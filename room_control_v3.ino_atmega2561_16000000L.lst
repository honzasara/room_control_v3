
/tmp/arduino_build_131566/room_control_v3.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 aa 47 	jmp	0x8f54	; 0x8f54 <__dtors_end>
       4:	0c 94 db 47 	jmp	0x8fb6	; 0x8fb6 <__bad_interrupt>
       8:	0c 94 db 47 	jmp	0x8fb6	; 0x8fb6 <__bad_interrupt>
       c:	0c 94 db 47 	jmp	0x8fb6	; 0x8fb6 <__bad_interrupt>
      10:	0c 94 db 47 	jmp	0x8fb6	; 0x8fb6 <__bad_interrupt>
      14:	0c 94 db 47 	jmp	0x8fb6	; 0x8fb6 <__bad_interrupt>
      18:	0c 94 db 47 	jmp	0x8fb6	; 0x8fb6 <__bad_interrupt>
      1c:	0c 94 db 47 	jmp	0x8fb6	; 0x8fb6 <__bad_interrupt>
      20:	0c 94 db 47 	jmp	0x8fb6	; 0x8fb6 <__bad_interrupt>
      24:	0c 94 db 47 	jmp	0x8fb6	; 0x8fb6 <__bad_interrupt>
      28:	0c 94 db 47 	jmp	0x8fb6	; 0x8fb6 <__bad_interrupt>
      2c:	0c 94 db 47 	jmp	0x8fb6	; 0x8fb6 <__bad_interrupt>
      30:	0c 94 db 47 	jmp	0x8fb6	; 0x8fb6 <__bad_interrupt>
      34:	0c 94 db 47 	jmp	0x8fb6	; 0x8fb6 <__bad_interrupt>
      38:	0c 94 db 47 	jmp	0x8fb6	; 0x8fb6 <__bad_interrupt>
      3c:	0c 94 db 47 	jmp	0x8fb6	; 0x8fb6 <__bad_interrupt>
      40:	0c 94 db 47 	jmp	0x8fb6	; 0x8fb6 <__bad_interrupt>
      44:	0c 94 db 47 	jmp	0x8fb6	; 0x8fb6 <__bad_interrupt>
      48:	0c 94 db 47 	jmp	0x8fb6	; 0x8fb6 <__bad_interrupt>
      4c:	0c 94 db 47 	jmp	0x8fb6	; 0x8fb6 <__bad_interrupt>
      50:	0c 94 db 47 	jmp	0x8fb6	; 0x8fb6 <__bad_interrupt>
      54:	0c 94 db 47 	jmp	0x8fb6	; 0x8fb6 <__bad_interrupt>
      58:	0c 94 db 47 	jmp	0x8fb6	; 0x8fb6 <__bad_interrupt>
      5c:	0d 94 b8 0e 	jmp	0x21d70	; 0x21d70 <__vector_23>
      60:	0c 94 db 47 	jmp	0x8fb6	; 0x8fb6 <__bad_interrupt>
      64:	0d 94 97 11 	jmp	0x2232e	; 0x2232e <__vector_25>
      68:	0d 94 cd 11 	jmp	0x2239a	; 0x2239a <__vector_26>
      6c:	0c 94 db 47 	jmp	0x8fb6	; 0x8fb6 <__bad_interrupt>
      70:	0c 94 db 47 	jmp	0x8fb6	; 0x8fb6 <__bad_interrupt>
      74:	0d 94 78 0e 	jmp	0x21cf0	; 0x21cf0 <__vector_29>
      78:	0c 94 db 47 	jmp	0x8fb6	; 0x8fb6 <__bad_interrupt>
      7c:	0c 94 db 47 	jmp	0x8fb6	; 0x8fb6 <__bad_interrupt>
      80:	0c 94 db 47 	jmp	0x8fb6	; 0x8fb6 <__bad_interrupt>
      84:	0c 94 db 47 	jmp	0x8fb6	; 0x8fb6 <__bad_interrupt>
      88:	0c 94 db 47 	jmp	0x8fb6	; 0x8fb6 <__bad_interrupt>
      8c:	0c 94 db 47 	jmp	0x8fb6	; 0x8fb6 <__bad_interrupt>
      90:	0c 94 db 47 	jmp	0x8fb6	; 0x8fb6 <__bad_interrupt>
      94:	0c 94 db 47 	jmp	0x8fb6	; 0x8fb6 <__bad_interrupt>
      98:	0c 94 db 47 	jmp	0x8fb6	; 0x8fb6 <__bad_interrupt>
      9c:	0d 94 c8 08 	jmp	0x21190	; 0x21190 <__vector_39>
      a0:	0c 94 db 47 	jmp	0x8fb6	; 0x8fb6 <__bad_interrupt>
      a4:	0c 94 db 47 	jmp	0x8fb6	; 0x8fb6 <__bad_interrupt>
      a8:	0c 94 db 47 	jmp	0x8fb6	; 0x8fb6 <__bad_interrupt>
      ac:	0c 94 db 47 	jmp	0x8fb6	; 0x8fb6 <__bad_interrupt>
      b0:	0c 94 db 47 	jmp	0x8fb6	; 0x8fb6 <__bad_interrupt>
      b4:	0c 94 db 47 	jmp	0x8fb6	; 0x8fb6 <__bad_interrupt>
      b8:	0c 94 db 47 	jmp	0x8fb6	; 0x8fb6 <__bad_interrupt>
      bc:	0c 94 db 47 	jmp	0x8fb6	; 0x8fb6 <__bad_interrupt>
      c0:	0c 94 db 47 	jmp	0x8fb6	; 0x8fb6 <__bad_interrupt>
      c4:	0c 94 db 47 	jmp	0x8fb6	; 0x8fb6 <__bad_interrupt>
      c8:	0c 94 db 47 	jmp	0x8fb6	; 0x8fb6 <__bad_interrupt>

000000cc <__trampolines_start>:
__trampolines_start():
      cc:	0c 94 2c da 	jmp	0x1b458	; 0x1b458 <Print::availableForWrite()>
      d0:	0c 94 a6 67 	jmp	0xcf4c	; 0xcf4c <term_ring_do_activate(unsigned int, unsigned int, unsigned char)>
      d4:	0d 94 ef 0f 	jmp	0x21fde	; 0x21fde <turnOffPWM+0x64>
      d8:	0c 94 69 51 	jmp	0xa2d2	; 0xa2d2 <button_status_default_ring_term_has_mode(unsigned int, unsigned int, unsigned char)>
      dc:	0c 94 dc da 	jmp	0x1b5b8	; 0x1b5b8 <EthernetClient::available()>
      e0:	0c 94 92 51 	jmp	0xa324	; 0xa324 <switch_brightness_automode_onclick(unsigned int, unsigned int, unsigned char)>
      e4:	0c 94 6e 8b 	jmp	0x116dc	; 0x116dc <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>
      e8:	0c 94 e7 da 	jmp	0x1b5ce	; 0x1b5ce <EthernetClient::read()>
      ec:	0c 94 9b 56 	jmp	0xad36	; 0xad36 <thermostat_button_set_ring_name_onclick(unsigned int, unsigned int, unsigned char)>
      f0:	0c 94 6f de 	jmp	0x1bcde	; 0x1bcde <EthernetUDP::read(unsigned char*, unsigned int)>
      f4:	0c 94 93 91 	jmp	0x12326	; 0x12326 <mqtt_callback(char*, unsigned char*, unsigned int)>
      f8:	0c 94 8e 50 	jmp	0xa11c	; 0xa11c <dyn_button_show_all_thermostat_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>
      fc:	0c 94 18 72 	jmp	0xe430	; 0xe430 <helper_set_menu_time_offset(unsigned int, float, unsigned char)>
     100:	0c 94 e1 55 	jmp	0xabc2	; 0xabc2 <button_change_default_ring_via_dialog_onclick(unsigned int, unsigned int, unsigned char)>
     104:	0c 94 a4 62 	jmp	0xc548	; 0xc548 <display_menu_rtds_update_name(unsigned int, unsigned int, unsigned char)>
     108:	0c 94 aa 51 	jmp	0xa354	; 0xa354 <helper_display_set_brightness(unsigned int, float, unsigned char)>
     10c:	0c 94 24 d5 	jmp	0x1aa48	; 0x1aa48 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x9e>
     110:	0d 94 2e 12 	jmp	0x2245c	; 0x2245c <IPAddress::printTo(Print&) const>
     114:	0c 94 23 49 	jmp	0x9246	; 0x9246 <display_enable_show(unsigned int, unsigned int, unsigned char)>
     118:	0c 94 20 4a 	jmp	0x9440	; 0x9440 <display_function_vertical_slider_dec(unsigned int, unsigned int, unsigned char)>
     11c:	0d 94 8a 06 	jmp	0x20d14	; 0x20d14 <TwoWire::onReceiveService(unsigned char*, int)>
     120:	0c 94 2e a7 	jmp	0x14e5c	; 0x14e5c <serial_putc(char, __file*)>
     124:	0c 94 e4 dd 	jmp	0x1bbc8	; 0x1bbc8 <EthernetUDP::available()>
     128:	0c 94 07 4d 	jmp	0x9a0e	; 0x9a0e <display_function_set_variable_minus(unsigned int, unsigned int, unsigned char)>
     12c:	0c 94 ff 51 	jmp	0xa3fe	; 0xa3fe <button_nastaveni_default_value(unsigned int, unsigned int, unsigned char)>
     130:	0d 94 c5 13 	jmp	0x2278a	; 0x2278a <__cxa_pure_virtual>
     134:	0c 94 72 54 	jmp	0xa8e4	; 0xa8e4 <dialog_set_string_button_click(unsigned int, unsigned int, unsigned char)>
     138:	0c 94 11 4b 	jmp	0x9622	; 0x9622 <display_element_rectangle(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>
     13c:	0c 94 28 db 	jmp	0x1b650	; 0x1b650 <EthernetClient::flush()>
     140:	0c 94 13 57 	jmp	0xae26	; 0xae26 <button_set_network_ip_onclick(unsigned int, unsigned int, unsigned char)>
     144:	0c 94 75 64 	jmp	0xc8ea	; 0xc8ea <menu_rtds_create_name(unsigned int, unsigned int, unsigned char)>
     148:	0c 94 e3 4c 	jmp	0x99c6	; 0x99c6 <button_click_ring_term_set_pid_default(unsigned int, unsigned int, unsigned char)>
     14c:	0c 94 00 50 	jmp	0xa000	; 0xa000 <button_change_default_ring_labels_in_dialog(unsigned char, unsigned char, unsigned char, char*, char*)>
     150:	0c 94 4f da 	jmp	0x1b49e	; 0x1b49e <EthernetClient::operator bool()>
     154:	0c 94 68 63 	jmp	0xc6d0	; 0xc6d0 <click_rtds_deassociate_onewire(unsigned int, unsigned int, unsigned char)>
     158:	0c 94 60 71 	jmp	0xe2c0	; 0xe2c0 <button_click_ntp_sync_time(unsigned int, unsigned int, unsigned char)>
     15c:	0d 94 f3 0f 	jmp	0x21fe6	; 0x21fe6 <turnOffPWM+0x6c>
     160:	0c 94 cb 6e 	jmp	0xdd96	; 0xdd96 <helper_dialog_network_set_dns(unsigned int, unsigned int, unsigned char)>
     164:	0d 94 db 0f 	jmp	0x21fb6	; 0x21fb6 <turnOffPWM+0x3c>
     168:	0c 94 15 63 	jmp	0xc62a	; 0xc62a <click_rtds_setting_sensor(unsigned int, unsigned int, unsigned char)>
     16c:	0c 94 77 49 	jmp	0x92ee	; 0x92ee <menu_redraw_change_term_mode(unsigned int, unsigned int, unsigned char)>
     170:	0c 94 d4 54 	jmp	0xa9a8	; 0xa9a8 <display_menu_tds_set_period(unsigned int, unsigned int, unsigned char)>
     174:	0c 94 39 da 	jmp	0x1b472	; 0x1b472 <EthernetClient::write(unsigned char)>
     178:	0d 94 07 10 	jmp	0x2200e	; 0x2200e <turnOffPWM+0x94>
     17c:	0c 94 6d 56 	jmp	0xacda	; 0xacda <display_menu_tds_set_name(unsigned int, unsigned int, unsigned char)>
     180:	0c 94 cf 4d 	jmp	0x9b9e	; 0x9b9e <display_element_set_string_del_char(unsigned int, unsigned int, unsigned char)>
     184:	0c 94 64 c3 	jmp	0x186c8	; 0x186c8 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)>
     188:	0c 94 17 d5 	jmp	0x1aa2e	; 0x1aa2e <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x84>
     18c:	0c 94 30 c1 	jmp	0x18260	; 0x18260 <LCDWIKI_KBV::Get_Width() const>
     190:	0c 94 1c 5a 	jmp	0xb438	; 0xb438 <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)>
     194:	0c 94 c7 49 	jmp	0x938e	; 0x938e <menu_redraw_slider(unsigned int, unsigned int, unsigned char)>
     198:	0c 94 33 52 	jmp	0xa466	; 0xa466 <button_check_mqtt_connection_onclick(unsigned int, unsigned int, unsigned char)>
     19c:	0c 94 84 4a 	jmp	0x9508	; 0x9508 <display_enable_show_brightness_manual_mode(unsigned int, unsigned int, unsigned char)>
     1a0:	0c 94 b8 4e 	jmp	0x9d70	; 0x9d70 <button_change_brightness_display_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>
     1a4:	0c 94 f7 de 	jmp	0x1bdee	; 0x1bdee <EthernetUDP::begin(unsigned int)>
     1a8:	0c 94 cd 9d 	jmp	0x13b9a	; 0x13b9a <_GLOBAL__sub_D__Z11serial_putccP6(float, int, long,...)>
     1ac:	0c 94 94 e6 	jmp	0x1cd28	; 0x1cd28 <DateTime::DateTime(char const*, char const*)+0xd4>
     1b0:	0c 94 34 4e 	jmp	0x9c68	; 0x9c68 <helper_thermostat_button_activate_ring_onclick(unsigned int, unsigned int, unsigned char)>
     1b4:	0c 94 dc 4b 	jmp	0x97b8	; 0x97b8 <helper_thermostat_set_pid_i(unsigned int, float, unsigned char)>
     1b8:	0c 94 de 4b 	jmp	0x97bc	; 0x97bc <helper_thermostat_set_pid_d(unsigned int, float, unsigned char)>
     1bc:	0c 94 25 dc 	jmp	0x1b84a	; 0x1b84a <_GLOBAL__sub_I__ZN14EthernetClient8_srcportE>
     1c0:	0c 94 b5 65 	jmp	0xcb6a	; 0xcb6a <button_get_show_default_temp_1(unsigned char, unsigned char, unsigned char, char*, char*)>
     1c4:	0c 94 2a 4f 	jmp	0x9e54	; 0x9e54 <switch_brightness_automode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>
     1c8:	0c 94 12 5a 	jmp	0xb424	; 0xb424 <click_keyboard_number(unsigned int, unsigned int, unsigned char)>
     1cc:	0c 94 96 54 	jmp	0xa92c	; 0xa92c <dialog_set_variable_button_click(unsigned int, unsigned int, unsigned char)>
     1d0:	0c 94 3b 4b 	jmp	0x9676	; 0x9676 <display_element_vertical_slider(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>
     1d4:	0c 94 c0 da 	jmp	0x1b580	; 0x1b580 <EthernetClient::write(unsigned char const*, unsigned int)>
     1d8:	0c 94 e2 49 	jmp	0x93c4	; 0x93c4 <get_function_return_args_1(unsigned int, unsigned int, unsigned char)>
     1dc:	0c 94 b0 63 	jmp	0xc760	; 0xc760 <click_rtds_subscribe(unsigned int, unsigned int, unsigned char)>
     1e0:	0d 94 b9 07 	jmp	0x20f72	; 0x20f72 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>
     1e4:	0c 94 b4 54 	jmp	0xa968	; 0xa968 <click_dialog_button_yes(unsigned int, unsigned int, unsigned char)>
     1e8:	0c 94 ca 4b 	jmp	0x9794	; 0x9794 <helper_thermostat_set_mezni(unsigned int, float, unsigned char)>
     1ec:	0c 94 51 51 	jmp	0xa2a2	; 0xa2a2 <button_click_default_term_set_mode(unsigned int, unsigned int, unsigned char)>
     1f0:	0c 94 05 db 	jmp	0x1b60a	; 0x1b60a <EthernetClient::peek()>
     1f4:	0c 94 c9 56 	jmp	0xad92	; 0xad92 <button_ntp_set_server_onclick(unsigned int, unsigned int, unsigned char)>
     1f8:	0c 94 3d 4a 	jmp	0x947a	; 0x947a <button_get_show_default_temp_max_items(unsigned int, unsigned int, unsigned char)>
     1fc:	0c 94 4b 5e 	jmp	0xbc96	; 0xbc96 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>
     200:	0c 94 4a 4a 	jmp	0x9494	; 0x9494 <button_get_show_default_temp_active(unsigned int, unsigned int, unsigned char)>
     204:	0d 94 60 06 	jmp	0x20cc0	; 0x20cc0 <TwoWire::available()>
     208:	0c 94 39 4e 	jmp	0x9c72	; 0x9c72 <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)>
     20c:	0c 94 5b 57 	jmp	0xaeb6	; 0xaeb6 <button_set_network_mask_onclick(unsigned int, unsigned int, unsigned char)>
     210:	0c 94 a3 64 	jmp	0xc946	; 0xc946 <menu_rtds_update_name(unsigned int, unsigned int, unsigned char)>
     214:	0c 94 ea bf 	jmp	0x17fd4	; 0x17fd4 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)>
     218:	0c 94 bc 4f 	jmp	0x9f78	; 0x9f78 <button_click_set_term_heat_or_cool(unsigned int, unsigned int, unsigned char)>
     21c:	0c 94 4c d5 	jmp	0x1aa98	; 0x1aa98 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0xee>
     220:	0c 94 68 59 	jmp	0xb2d0	; 0xb2d0 <helper_thermostat_button_set_ring_name(unsigned int, unsigned int, unsigned char)>
     224:	0c 94 41 df 	jmp	0x1be82	; 0x1be82 <EthernetUDP::beginPacket(char const*, unsigned int)>
     228:	0c 94 8e de 	jmp	0x1bd1c	; 0x1bd1c <EthernetUDP::peek()>
     22c:	0c 94 06 9d 	jmp	0x13a0c	; 0x13a0c <_GLOBAL__sub_I__Z11serial_putccP6(float, int, long,...)>
     230:	0c 94 d8 bf 	jmp	0x17fb0	; 0x17fb0 <LCDWIKI_KBV::Color_To_565(unsigned char, unsigned char, unsigned char)>
     234:	0d 94 01 12 	jmp	0x22402	; 0x22402 <_GLOBAL__sub_I___vector_25>
     238:	0c 94 2c 4e 	jmp	0x9c58	; 0x9c58 <button_deassociate_input_sensor_for_term_onclick(unsigned int, unsigned int, unsigned char)>
     23c:	0c 94 80 49 	jmp	0x9300	; 0x9300 <menu_redraw_change_term_mode_cool_heat(unsigned int, unsigned int, unsigned char)>
     240:	0c 94 e3 49 	jmp	0x93c6	; 0x93c6 <a2d_complete(unsigned char, unsigned int)>
     244:	0c 94 48 58 	jmp	0xb090	; 0xb090 <button_time_set_time_manualy_onclick(unsigned int, unsigned int, unsigned char)>
     248:	0c 94 d0 49 	jmp	0x93a0	; 0x93a0 <menu_redraw_change_default_ring(unsigned int, unsigned int, unsigned char)>
     24c:	0c 94 34 52 	jmp	0xa468	; 0xa468 <valid_true()>
     250:	0c 94 70 4f 	jmp	0x9ee0	; 0x9ee0 <button_get_term_ring_is_selected(unsigned int, unsigned int, unsigned char)>
     254:	0c 94 00 58 	jmp	0xb000	; 0xb000 <button_set_network_dns_onclick(unsigned int, unsigned int, unsigned char)>
     258:	0c 94 a0 55 	jmp	0xab40	; 0xab40 <thermostat_button_deactivate_ring_onclick(unsigned int, unsigned int, unsigned char)>
     25c:	0c 94 39 61 	jmp	0xc272	; 0xc272 <display_element_show_network_detail(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>
     260:	0c 94 58 d5 	jmp	0x1aab0	; 0x1aab0 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x106>
     264:	0c 94 1e 5f 	jmp	0xbe3c	; 0xbe3c <display_element_show_about_device(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>
     268:	0c 94 62 da 	jmp	0x1b4c4	; 0x1b4c4 <EthernetClient::connect(char const*, unsigned int)>
     26c:	0d 94 d1 10 	jmp	0x221a2	; 0x221a2 <HardwareSerial::read()>
     270:	0c 94 30 4a 	jmp	0x9460	; 0x9460 <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)>
     274:	0c 94 52 d5 	jmp	0x1aaa4	; 0x1aaa4 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0xfa>
     278:	0d 94 7a 06 	jmp	0x20cf4	; 0x20cf4 <TwoWire::peek()>
     27c:	0c 94 c3 4a 	jmp	0x9586	; 0x9586 <button_set_network_mac_onclick(unsigned int, unsigned int, unsigned char)>
     280:	0c 94 f6 6e 	jmp	0xddec	; 0xddec <helper_dialog_mqtt_set_server(unsigned int, unsigned int, unsigned char)>
     284:	0c 94 94 49 	jmp	0x9328	; 0x9328 <menu_redraw_update_temp(unsigned int, unsigned int, unsigned char)>
     288:	0c 94 59 49 	jmp	0x92b2	; 0x92b2 <get_function_keyboard_alfa_max_keys(unsigned int, unsigned int, unsigned char)>
     28c:	0c 94 d2 5c 	jmp	0xb9a4	; 0xb9a4 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>
     290:	0c 94 80 e6 	jmp	0x1cd00	; 0x1cd00 <DateTime::DateTime(char const*, char const*)+0xac>
     294:	0c 94 c9 dd 	jmp	0x1bb92	; 0x1bb92 <EthernetUDP::read(char*, unsigned int)>
     298:	0c 94 2f da 	jmp	0x1b45e	; 0x1b45e <EthernetClient::operator!=(EthernetClient const&)>
     29c:	0c 94 96 e6 	jmp	0x1cd2c	; 0x1cd2c <DateTime::DateTime(char const*, char const*)+0xd8>
     2a0:	0c 94 8a 49 	jmp	0x9314	; 0x9314 <menu_redraw_change_term_input(unsigned int, unsigned int, unsigned char)>
     2a4:	0c 94 7e 5c 	jmp	0xb8fc	; 0xb8fc <display_element_show_time_decorate_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>
     2a8:	0c 94 f2 50 	jmp	0xa1e4	; 0xa1e4 <button_select_term_mode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>
     2ac:	0c 94 92 e6 	jmp	0x1cd24	; 0x1cd24 <DateTime::DateTime(char const*, char const*)+0xd0>
     2b0:	0c 94 20 4c 	jmp	0x9840	; 0x9840 <preload_pid_menu(unsigned int, unsigned int, unsigned char)>
     2b4:	0d 94 15 0e 	jmp	0x21c2a	; 0x21c2a <_GLOBAL__sub_I__ZN9NTPClientC2ER3UDP>
     2b8:	0c 94 56 4d 	jmp	0x9aac	; 0x9aac <display_function_set_variable_plus(unsigned int, unsigned int, unsigned char)>
     2bc:	0c 94 31 de 	jmp	0x1bc62	; 0x1bc62 <EthernetUDP::write(unsigned char const*, unsigned int)>
     2c0:	0c 94 32 d5 	jmp	0x1aa64	; 0x1aa64 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0xba>
     2c4:	0c 94 a6 de 	jmp	0x1bd4c	; 0x1bd4c <EthernetUDP::parsePacket()>
     2c8:	0c 94 b5 67 	jmp	0xcf6a	; 0xcf6a <button_click_set_new_default_ring_in_dialog(unsigned int, unsigned int, unsigned char)>
     2cc:	0c 94 ed d6 	jmp	0x1adda	; 0x1adda <_GLOBAL__sub_I__ZN9DNSClient5beginERK9IPAddress>
     2d0:	0c 94 e0 4d 	jmp	0x9bc0	; 0x9bc0 <menu_tds_save_offset(unsigned int, float, unsigned char)>
     2d4:	0c 94 50 4a 	jmp	0x94a0	; 0x94a0 <switch_brightness_automode_get_status_fnt(unsigned int, unsigned int, unsigned char)>
     2d8:	0c 94 34 c1 	jmp	0x18268	; 0x18268 <LCDWIKI_KBV::Get_Height() const>
     2dc:	0c 94 5c 5b 	jmp	0xb6b8	; 0xb6b8 <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>
     2e0:	0c 94 5f 55 	jmp	0xaabe	; 0xaabe <button_change_brightness_display_dyn_button_onclick(unsigned int, unsigned int, unsigned char)>
     2e4:	0c 94 38 d5 	jmp	0x1aa70	; 0x1aa70 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0xc6>
     2e8:	0d 94 1d 10 	jmp	0x2203a	; 0x2203a <turnOffPWM+0xc0>
     2ec:	0c 94 62 e6 	jmp	0x1ccc4	; 0x1ccc4 <DateTime::DateTime(char const*, char const*)+0x70>
     2f0:	0c 94 b8 5d 	jmp	0xbb70	; 0xbb70 <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>
     2f4:	0c 94 26 56 	jmp	0xac4c	; 0xac4c <click_tds_associate_or_setting_onewire(unsigned int, unsigned int, unsigned char)>
     2f8:	0c 94 89 b0 	jmp	0x16112	; 0x16112 <printf_via_mqtt(char, __file*)>
     2fc:	0d 94 21 10 	jmp	0x22042	; 0x22042 <turnOffPWM+0xc8>
     300:	0c 94 d0 dd 	jmp	0x1bba0	; 0x1bba0 <EthernetUDP::remoteIP()>
     304:	0c 94 12 55 	jmp	0xaa24	; 0xaa24 <display_menu_tds_set_offset(unsigned int, unsigned int, unsigned char)>
     308:	0d 94 15 10 	jmp	0x2202a	; 0x2202a <turnOffPWM+0xb0>
     30c:	0d 94 89 06 	jmp	0x20d12	; 0x20d12 <TwoWire::flush()>
     310:	0c 94 10 de 	jmp	0x1bc20	; 0x1bc20 <EthernetUDP::stop()>
     314:	0c 94 37 4e 	jmp	0x9c6e	; 0x9c6e <helper_thermostat_button_deactivate_ring_onclick(unsigned int, unsigned int, unsigned char)>
     318:	0d 94 19 10 	jmp	0x22032	; 0x22032 <turnOffPWM+0xb8>
     31c:	0c 94 2d eb 	jmp	0x1d65a	; 0x1d65a <PubSubClient::write(unsigned char const*, unsigned int)>
     320:	0c 94 4f 50 	jmp	0xa09e	; 0xa09e <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)>
     324:	0c 94 30 59 	jmp	0xb260	; 0xb260 <button_set_mqtt_pass_onclick(unsigned int, unsigned int, unsigned char)>
     328:	0c 94 c2 db 	jmp	0x1b784	; 0x1b784 <EthernetClient::stop()>
     32c:	0c 94 59 55 	jmp	0xaab2	; 0xaab2 <button_set_brightness_auto_shutdown_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)>
     330:	0c 94 44 6f 	jmp	0xde88	; 0xde88 <helper_dialog_mqtt_set_pass(unsigned int, unsigned int, unsigned char)>
     334:	0d 94 fd 0f 	jmp	0x21ffa	; 0x21ffa <turnOffPWM+0x80>
     338:	0c 94 f7 4f 	jmp	0x9fee	; 0x9fee <display_enable_show_thermostat_deactive_ring(unsigned int, unsigned int, unsigned char)>
     33c:	0c 94 e8 dd 	jmp	0x1bbd0	; 0x1bbd0 <EthernetUDP::write(unsigned char)>
     340:	0c 94 0d 49 	jmp	0x921a	; 0x921a <ArduinoJson::Internals::StaticMemoryPoolBase::alloc(unsigned int)>
     344:	0d 94 01 10 	jmp	0x22002	; 0x22002 <turnOffPWM+0x88>
     348:	0c 94 a9 6e 	jmp	0xdd52	; 0xdd52 <helper_dialog_network_set_name(unsigned int, unsigned int, unsigned char)>
     34c:	0c 94 9f df 	jmp	0x1bf3e	; 0x1bf3e <_GLOBAL__sub_I__ZN11EthernetUDPC2Ev>
     350:	0c 94 ee 4f 	jmp	0x9fdc	; 0x9fdc <display_enable_show_thermostat_active_ring(unsigned int, unsigned int, unsigned char)>
     354:	0c 94 57 da 	jmp	0x1b4ae	; 0x1b4ae <EthernetClient::operator==(EthernetClient const&)>
     358:	0c 94 bc dd 	jmp	0x1bb78	; 0x1bb78 <_GLOBAL__sub_I__ZN14EthernetServerC2Ej>
     35c:	0c 94 02 dc 	jmp	0x1b804	; 0x1b804 <EthernetClient::connected()>
     360:	0c 94 27 65 	jmp	0xca4e	; 0xca4e <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)>
     364:	0c 94 28 6e 	jmp	0xdc50	; 0xdc50 <helper_dialog_network_set_ip(unsigned int, unsigned int, unsigned char)>
     368:	0c 94 d9 5a 	jmp	0xb5b2	; 0xb5b2 <display_element_dialog_show_text(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>
     36c:	0d 94 50 11 	jmp	0x222a0	; 0x222a0 <HardwareSerial::write(unsigned char)>
     370:	0c 94 e5 4a 	jmp	0x95ca	; 0x95ca <valid_ipv4_address_element_string()>
     374:	0c 94 15 eb 	jmp	0x1d62a	; 0x1d62a <PubSubClient::write(unsigned char)>
     378:	0c 94 27 49 	jmp	0x924e	; 0x924e <get_function_keyboard_number_char(unsigned char, unsigned char, unsigned char, char*, char*)>
     37c:	0c 94 d9 71 	jmp	0xe3b2	; 0xe3b2 <button_click_set_time_offset(unsigned int, unsigned int, unsigned char)>
     380:	0d 94 20 10 	jmp	0x22040	; 0x22040 <turnOffPWM+0xc6>
     384:	0c 94 86 5a 	jmp	0xb50c	; 0xb50c <display_element_dialog_default_ring(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>
     388:	0c 94 aa df 	jmp	0x1bf54	; 0x1bf54 <_GLOBAL__sub_I__ZN7TwitterC2EPKc>
     38c:	0c 94 82 e6 	jmp	0x1cd04	; 0x1cd04 <DateTime::DateTime(char const*, char const*)+0xb0>
     390:	0c 94 0c 4e 	jmp	0x9c18	; 0x9c18 <helper_tds_associate(unsigned int, unsigned int, unsigned char)>
     394:	0c 94 11 d5 	jmp	0x1aa22	; 0x1aa22 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x78>
     398:	0c 94 c9 50 	jmp	0xa192	; 0xa192 <button_select_term_ring_input_in_dialog_status_fnt(unsigned int, unsigned int, unsigned char)>
     39c:	0c 94 98 e6 	jmp	0x1cd30	; 0x1cd30 <DateTime::DateTime(char const*, char const*)+0xdc>
     3a0:	0c 94 8d bc 	jmp	0x1791a	; 0x1791a <_GLOBAL__sub_I_PID_Input>
     3a4:	0c 94 63 49 	jmp	0x92c6	; 0x92c6 <menu_redraw_time05s(unsigned int, unsigned int, unsigned char)>
     3a8:	0c 94 59 e6 	jmp	0x1ccb2	; 0x1ccb2 <DateTime::DateTime(char const*, char const*)+0x5e>
     3ac:	0c 94 31 dc 	jmp	0x1b862	; 0x1b862 <EthernetServer::write(unsigned char)>
     3b0:	0c 94 e5 67 	jmp	0xcfca	; 0xcfca <button_no_default_ring_onclick(unsigned int, unsigned int, unsigned char)>
     3b4:	0c 94 03 8b 	jmp	0x11606	; 0x11606 <display_element_show_temp_decorate_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>
     3b8:	0d 94 e5 0f 	jmp	0x21fca	; 0x21fca <turnOffPWM+0x50>
     3bc:	0c 94 40 f3 	jmp	0x1e680	; 0x1e680 <_GLOBAL__sub_I__ZN12PubSubClientC2Ev>
     3c0:	0d 94 67 06 	jmp	0x20cce	; 0x20cce <TwoWire::read()>
     3c4:	0c 94 8a e6 	jmp	0x1cd14	; 0x1cd14 <DateTime::DateTime(char const*, char const*)+0xc0>
     3c8:	0d 94 f9 0f 	jmp	0x21ff2	; 0x21ff2 <turnOffPWM+0x78>
     3cc:	0c 94 c7 dd 	jmp	0x1bb8e	; 0x1bb8e <UDP::beginMulticast(IPAddress, unsigned int)>
     3d0:	0c 94 de 8b 	jmp	0x117bc	; 0x117bc <display_element_show_all_temp(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>
     3d4:	0c 94 ec b0 	jmp	0x161d8	; 0x161d8 <_GLOBAL__sub_I_mqtt_error>
     3d8:	0c 94 2e 4a 	jmp	0x945c	; 0x945c <get_function_rtds_last_index_for_menu(unsigned int, unsigned int, unsigned char)>
     3dc:	0d 94 e5 10 	jmp	0x221ca	; 0x221ca <HardwareSerial::availableForWrite()>
     3e0:	0c 94 e0 dd 	jmp	0x1bbc0	; 0x1bbc0 <EthernetUDP::remotePort()>
     3e4:	0c 94 56 4a 	jmp	0x94ac	; 0x94ac <preload_display_setting_brightness(unsigned int, unsigned int, unsigned char)>
     3e8:	0c 94 98 d6 	jmp	0x1ad30	; 0x1ad30 <_GLOBAL__sub_I__ZN9DhcpClass13beginWithDHCPEPhmm>
     3ec:	0d 94 e1 0f 	jmp	0x21fc2	; 0x21fc2 <turnOffPWM+0x48>
     3f0:	0c 94 65 55 	jmp	0xaaca	; 0xaaca <thermostat_button_activate_ring_onclick(unsigned int, unsigned int, unsigned char)>
     3f4:	0c 94 7e 6e 	jmp	0xdcfc	; 0xdcfc <helper_dialog_network_set_gw(unsigned int, unsigned int, unsigned char)>
     3f8:	0c 94 f2 d4 	jmp	0x1a9e4	; 0x1a9e4 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x3a>
     3fc:	0c 94 85 c9 	jmp	0x1930a	; 0x1930a <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
     400:	0c 94 25 49 	jmp	0x924a	; 0x924a <get_function_keyboard_number_max_keys(unsigned int, unsigned int, unsigned char)>
     404:	0c 94 25 de 	jmp	0x1bc4a	; 0x1bc4a <EthernetUDP::beginPacket(IPAddress, unsigned int)>
     408:	0d 94 ef 06 	jmp	0x20dde	; 0x20dde <TwoWire::write(unsigned char const*, unsigned int)>
     40c:	0c 94 d4 50 	jmp	0xa1a8	; 0xa1a8 <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)>
     410:	0d 94 b7 10 	jmp	0x2216e	; 0x2216e <HardwareSerial::available()>
     414:	0c 94 d3 58 	jmp	0xb1a6	; 0xb1a6 <button_set_mqtt_broker_onclick(unsigned int, unsigned int, unsigned char)>
     418:	0c 94 db 55 	jmp	0xabb6	; 0xabb6 <dyn_button_show_all_thermostat_dyn_button_onclick(unsigned int, unsigned int, unsigned char)>
     41c:	0c 94 17 da 	jmp	0x1b42e	; 0x1b42e <_GLOBAL__sub_I__ZN13EthernetClass6_stateE>
     420:	0c 94 46 54 	jmp	0xa88c	; 0xa88c <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char)>
     424:	0c 94 e8 55 	jmp	0xabd0	; 0xabd0 <clik_button_onewire_scan_bus(unsigned int, unsigned int, unsigned char)>
     428:	0c 94 f1 5a 	jmp	0xb5e2	; 0xb5e2 <display_element_show_tds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>
     42c:	0c 94 53 6e 	jmp	0xdca6	; 0xdca6 <helper_dialog_network_set_mask(unsigned int, unsigned int, unsigned char)>
     430:	0d 94 e9 0f 	jmp	0x21fd2	; 0x21fd2 <turnOffPWM+0x58>
     434:	0c 94 fe dd 	jmp	0x1bbfc	; 0x1bbfc <EthernetUDP::flush()>
     438:	0d 94 30 11 	jmp	0x22260	; 0x22260 <HardwareSerial::flush()>
     43c:	0c 94 2d de 	jmp	0x1bc5a	; 0x1bc5a <EthernetUDP::endPacket()>
     440:	0c 94 a3 57 	jmp	0xaf46	; 0xaf46 <button_set_network_gw_onclick(unsigned int, unsigned int, unsigned char)>
     444:	0c 94 9d 49 	jmp	0x933a	; 0x933a <menu_redraw_date(unsigned int, unsigned int, unsigned char)>
     448:	0c 94 32 52 	jmp	0xa464	; 0xa464 <nullfce(unsigned int, unsigned int, unsigned char)>
     44c:	0c 94 d9 49 	jmp	0x93b2	; 0x93b2 <menu_redraw_change_variable(unsigned int, unsigned int, unsigned char)>
     450:	0d 94 0f 10 	jmp	0x2201e	; 0x2201e <turnOffPWM+0xa4>
     454:	0c 94 da 4b 	jmp	0x97b4	; 0x97b4 <helper_thermostat_set_pid_p(unsigned int, float, unsigned char)>
     458:	0c 94 38 c1 	jmp	0x18270	; 0x18270 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)>
     45c:	0c 94 02 e4 	jmp	0x1c804	; 0x1c804 <_GLOBAL__sub_I_w5500>
     460:	0c 94 3e d5 	jmp	0x1aa7c	; 0x1aa7c <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0xd2>
     464:	0c 94 0e 4e 	jmp	0x9c1c	; 0x9c1c <button_select_term_mode_onclick(unsigned int, unsigned int, unsigned char)>
     468:	0c 94 f4 dc 	jmp	0x1b9e8	; 0x1b9e8 <EthernetServer::write(unsigned char const*, unsigned int)>
     46c:	0c 94 a7 5e 	jmp	0xbd4e	; 0xbd4e <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>
     470:	0c 94 e0 4a 	jmp	0x95c0	; 0x95c0 <button_nastaveni_reload_onclick(unsigned int, unsigned int, unsigned char)>
     474:	0c 94 50 54 	jmp	0xa8a0	; 0xa8a0 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char)>
     478:	0d 94 b4 06 	jmp	0x20d68	; 0x20d68 <TwoWire::onRequestService()>
     47c:	0c 94 6b d5 	jmp	0x1aad6	; 0x1aad6 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x12c>
     480:	0c 94 b8 51 	jmp	0xa370	; 0xa370 <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)>
     484:	0c 94 66 d5 	jmp	0x1aacc	; 0x1aacc <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x122>
     488:	0d 94 c0 06 	jmp	0x20d80	; 0x20d80 <TwoWire::write(unsigned char)>
     48c:	0c 94 21 49 	jmp	0x9242	; 0x9242 <returnnullfceargs(unsigned int, unsigned int, unsigned char)>
     490:	0c 94 47 dc 	jmp	0x1b88e	; 0x1b88e <EthernetServer::begin()>
     494:	0c 94 01 db 	jmp	0x1b602	; 0x1b602 <EthernetClient::read(unsigned char*, unsigned int)>
     498:	0c 94 10 64 	jmp	0xc820	; 0xc820 <click_rtds_add_sensor(unsigned int, unsigned int, unsigned char)>
     49c:	0c 94 21 6f 	jmp	0xde42	; 0xde42 <helper_dialog_mqtt_set_user(unsigned int, unsigned int, unsigned char)>
     4a0:	0c 94 35 66 	jmp	0xcc6a	; 0xcc6a <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>
     4a4:	0d 94 0b 10 	jmp	0x22016	; 0x22016 <turnOffPWM+0x9c>
     4a8:	0c 94 0d 4a 	jmp	0x941a	; 0x941a <display_function_vertical_slider_inc(unsigned int, unsigned int, unsigned char)>
     4ac:	0c 94 e0 4b 	jmp	0x97c0	; 0x97c0 <helper_thermostat_set_pid_time(unsigned int, float, unsigned char)>
     4b0:	0c 94 45 de 	jmp	0x1bc8a	; 0x1bc8a <EthernetUDP::read()>
     4b4:	0c 94 10 b2 	jmp	0x16420	; 0x16420 <_GLOBAL__sub_I_scan_rf_net_enable>
     4b8:	0c 94 fb 67 	jmp	0xcff6	; 0xcff6 <button_click_set_show_default_temp(unsigned int, unsigned int, unsigned char)>
     4bc:	0d 94 c3 10 	jmp	0x22186	; 0x22186 <HardwareSerial::peek()>
     4c0:	0c 94 8b 4a 	jmp	0x9516	; 0x9516 <button_set_brightness_auto_shutdown_get_status_fnt(unsigned int, unsigned int, unsigned char)>
     4c4:	0c 94 60 49 	jmp	0x92c0	; 0x92c0 <click_keyboard_type(unsigned int, unsigned int, unsigned char)>
     4c8:	0c 94 88 4f 	jmp	0x9f10	; 0x9f10 <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)>
     4cc:	0c 94 49 59 	jmp	0xb292	; 0xb292 <menu_tds_save_name(unsigned int, unsigned int, unsigned char)>
     4d0:	0c 94 1b 59 	jmp	0xb236	; 0xb236 <button_set_mqtt_user_onclick(unsigned int, unsigned int, unsigned char)>
     4d4:	0c 94 91 4a 	jmp	0x9522	; 0x9522 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)>
     4d8:	0c 94 e7 4a 	jmp	0x95ce	; 0x95ce <display_element_fill_rectangle(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>
     4dc:	0c 94 6d 54 	jmp	0xa8da	; 0xa8da <click_tds_deassociate_onewire(unsigned int, unsigned int, unsigned char)>
     4e0:	0c 94 a5 4d 	jmp	0x9b4a	; 0x9b4a <button_set_brightness_auto_shutdown_select_time_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>
     4e4:	0c 94 eb 57 	jmp	0xafd6	; 0xafd6 <button_set_network_name_onclick(unsigned int, unsigned int, unsigned char)>
     4e8:	0d 94 f4 10 	jmp	0x221e8	; 0x221e8 <serialEventRun()>
     4ec:	0c 94 84 59 	jmp	0xb308	; 0xb308 <helper_set_time_manualy(unsigned int, unsigned int, unsigned char)>
     4f0:	0c 94 5d db 	jmp	0x1b6ba	; 0x1b6ba <EthernetClient::connect(IPAddress, unsigned int)>
     4f4:	0c 94 f1 64 	jmp	0xc9e2	; 0xc9e2 <get_function_rtds_text_button(unsigned char, unsigned char, unsigned char, char*, char*)>
     4f8:	0c 94 d9 4f 	jmp	0x9fb2	; 0x9fb2 <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)>
     4fc:	0c 94 8b 58 	jmp	0xb116	; 0xb116 <button_time_set_date_manualy_onclick(unsigned int, unsigned int, unsigned char)>
     500:	0d 94 9b 12 	jmp	0x22536	; 0x22536 <Print::write(unsigned char const*, unsigned int)>
     504:	0c 94 39 49 	jmp	0x9272	; 0x9272 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)>
     508:	0c 94 22 bf 	jmp	0x17e44	; 0x17e44 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)>
     50c:	0c 94 e3 4b 	jmp	0x97c6	; 0x97c6 <preload_regulator_menu(unsigned int, unsigned int, unsigned char)>
     510:	0c 94 2a 51 	jmp	0xa254	; 0xa254 <button_set_brightness_auto_shutdown_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>
     514:	0c 94 c2 59 	jmp	0xb384	; 0xb384 <helper_set_date_manualy(unsigned int, unsigned int, unsigned char)>
     518:	0d 94 f7 11 	jmp	0x223ee	; 0x223ee <Serial0_available()>
     51c:	0c 94 24 4e 	jmp	0x9c48	; 0x9c48 <button_select_term_ring_input_in_dialog_onclick(unsigned int, unsigned int, unsigned char)>
     520:	0c 94 fd 6d 	jmp	0xdbfa	; 0xdbfa <helper_dialog_ntp_set_server(unsigned int, unsigned int, unsigned char)>
     524:	0c 94 2c a7 	jmp	0x14e58	; 0x14e58 <button_network_test_connection_onclick(unsigned int, unsigned int, unsigned char)>
     528:	0c 94 30 dc 	jmp	0x1b860	; 0x1b860 <Print::flush()>
     52c:	0c 94 f9 4d 	jmp	0x9bf2	; 0x9bf2 <menu_tds_save_period(unsigned int, float, unsigned char)>

00000530 <__trampolines_end>:
__trampolines_end():
     530:	4e 41       	sbci	r20, 0x1E	; 30
     532:	4e 49       	Address 0x0000000000000532 is out of bounds.
.word	0xffff	; ????

00000533 <pstr_inity>:
     533:	49 4e 49 54 59                                      INITY

00000538 <pstr_inf>:
     538:	49 4e 46                                            INF

0000053b <pwr_m10>:
     53b:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     54b:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000553 <pwr_p10>:
     553:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     563:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     573:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     583:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     593:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     5a3:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     5b3:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     5c3:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     5d3:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     5e3:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     5f3:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     603:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     613:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     623:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     633:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     643:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     653:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     663:	3d 27                                               ='

00000665 <Menu_All>:
     665:	07 06 0a 07 40 86 ca 84 22 01 96 00 aa 00 28 00     ....@...".....(.
     675:	02 a2 50 54 20 23 49 d4 84 22 01 5a 00 aa 00 28     ..PT #I..".Z...(
     685:	00 02 01 32 52 20 23 49 0d 85 22 01 1e 00 aa 00     ...2R #I..".....
     695:	28 00 02 02 50 54 20 23 49 00 00 00 00 00 00 00     (...PT #I.......
	...
     715:	a7 84 0a 00 dc 00 52 00 3c 00 03 9a d6 ff ff 00     ......R.<.......
     725:	51 51 69 51 22 23 49 8d 84 64 00 dc 00 52 00 3c     QQiQ"#I..d...R.<
     735:	00 03 00 f8 ff ff 01 51 51 69 51 22 23 49 73 84     .......QQiQ"#Is.
     745:	be 00 dc 00 52 00 3c 00 03 1f 00 ff ff 07 51 51     ....R.<.......QQ
     755:	69 51 22 23 49 57 84 18 01 dc 00 52 00 3c 00 03     iQ"#IW.....R.<..
     765:	e0 ff ff ff 02 51 51 69 51 22 23 49 3f 84 72 01     .....QQiQ"#I?.r.
     775:	dc 00 52 00 3c 00 03 e0 07 ff ff 08 51 51 69 51     ..R.<.......QQiQ
     785:	22 23 49 0a 00 82 00 a1 00 6e 8b f0 00 50 00 14     "#I......n...P..
     795:	50 54 23 49 c5 81 18 01 22 01 00 00 a7 5e 00 00     PT#I...."....^..
     7a5:	00 00 18 32 52 23 49 c5 81 0a 00 1e 00 00 00 4b     ...2R#I........K
     7b5:	5e 00 00 00 00 11 32 52 23 49 c5 81 0a 00 1e 00     ^.....2R#I......
     7c5:	00 00 7e 5c f4 00 54 00 20 32 52 23 49 c5 81 0a     ..~\..T. 2R#I...
     7d5:	00 82 00 00 00 03 8b f4 00 54 00 20 32 52 23 49     .........T. 2R#I
     7e5:	c5 81 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     93d:	03 05 05 00 00 00 00 00 00 00 00 00 00 e0 01 40     ...............@
     94d:	01 01 ff ff 20 63 49 77 49 94 49 9d 49 21 49 c5     .... cIwI.I.I!I.
     95d:	83 ab 84 0a 00 dc 00 be 00 28 00 02 00 46 54 10     .........(...FT.
     96d:	23 49 96 7e 18 01 dc 00 be 00 1e 00 01 00 c3 4a     #I.~...........J
     97d:	10 23 49 ab 7e 18 01 b4 00 be 00 1e 00 01 00 00     .#I.~...........
     98d:	58 10 23 49 7d 7e 18 01 8c 00 be 00 1e 00 01 00     X.#I}~..........
     99d:	eb 57 10 23 49 c1 7e 18 01 64 00 be 00 1e 00 01     .W.#I.~..d......
     9ad:	00 a3 57 10 23 49 d9 7e 18 01 3c 00 be 00 1e 00     ..W.#I.~..<.....
     9bd:	01 00 5b 57 10 23 49 ee 7e 18 01 14 00 be 00 1e     ..[W.#I.~.......
     9cd:	00 01 00 13 57 10 23 49 6e 7e 0a 00 aa 00 be 00     ....W.#In~......
     9dd:	28 00 01 00 2c a7 10 23 49 00 00 00 00 00 00 00     (...,..#I.......
	...
     a79:	00 00 0a 00 28 00 00 00 39 61 c8 00 78 00 10 32     ....(...9a..x..2
     a89:	52 23 49 c5 81 00 00 00 00 00 00 00 00 00 00 00     R#I.............
	...
     c2d:	00 00 00 08 00 01 00 00 00 00 00 10 00 00 00 00     ................
     c3d:	e0 01 40 01 01 ff ff 10 21 49 21 49 21 49 21 49     ..@.....!I!I!I!I
     c4d:	21 49 99 83 ab 84 0a 00 dc 00 be 00 28 00 02 00     !I..........(...
     c5d:	46 54 10 23 49 de 7f 0a 00 28 00 be 00 28 00 02     FT.#I....(...(..
     c6d:	00 e8 55 10 23 49 00 00 00 00 00 00 00 00 00 00     ..U.#I..........
	...
     d6d:	00 18 01 22 01 00 00 a7 5e 00 00 00 00 18 32 52     ..."....^.....2R
     d7d:	23 49 c5 81 9a 01 48 00 00 00 3b 4b 28 00 7e 00     #I....H...;K(.~.
     d8d:	10 32 52 23 49 c5 81 dc 00 14 00 00 00 11 4b f0     .2R#I.........K.
     d9d:	00 f0 00 10 32 52 23 49 c5 81 00 00 00 00 00 00     ....2R#I........
	...
     e11:	00 e6 00 23 00 aa 00 37 00 01 3c 3c 00 03 01 00     ...#...7..<<....
     e21:	01 39 4e 26 56 30 4a 10 00 00 00 00 00 00 00 00     .9N&V0J.........
	...
     e3d:	00 00 00 2b 9a 01 1e 00 28 00 28 00 02 00 20 4a     ...+....(.(... J
     e4d:	10 23 49 2d 9a 01 c8 00 28 00 28 00 02 00 0d 4a     .#I-....(.(....J
     e5d:	10 23 49 00 00 00 00 00 00 00 00 00 00 00 00 00     .#I.............
	...
     f21:	00 00 02 00 03 00 01 02 00 00 03 00 00 00 00 e0     ................
     f31:	01 40 01 01 ff ff 10 21 49 21 49 21 49 21 49 21     .@.....!I!I!I!I!
     f41:	49 0c 80 ab 84 0a 00 dc 00 be 00 28 00 02 00 46     I..........(...F
     f51:	54 10 23 49 16 82 0a 00 28 00 be 00 28 00 01 00     T.#I....(...(...
     f61:	60 71 10 23 49 58 7e 0a 00 64 00 be 00 28 00 01     `q.#IX~..d...(..
     f71:	00 c9 56 10 23 49 46 7e 0a 00 a0 00 be 00 28 00     ..V.#IF~......(.
     f81:	01 00 d9 71 10 23 49 31 7e 18 01 28 00 be 00 28     ...q.#I1~..(...(
     f91:	00 01 00 48 58 10 23 49 1a 7e 18 01 64 00 be 00     ...HX.#I.~..d...
     fa1:	28 00 01 00 8b 58 10 23 49 00 00 00 00 00 00 00     (....X.#I.......
	...
    1061:	18 01 22 01 00 00 a7 5e 00 00 00 00 18 32 52 23     .."....^.....2R#
    1071:	49 c5 81 00 00 00 00 00 00 00 00 00 00 00 00 00     I...............
	...
    1215:	00 06 00 01 00 00 00 00 00 99 00 00 00 00 e0 01     ................
    1225:	40 01 01 ff ff 20 21 49 21 49 21 49 9d 49 21 49     @.... !I!I!I.I!I
    1235:	5d 82 ab 84 0a 00 dc 00 be 00 28 00 02 00 46 54     ].........(...FT
    1245:	10 23 49 00 00 00 00 00 00 00 00 00 00 00 00 00     .#I.............
	...
    1351:	00 00 00 18 01 22 01 00 00 a7 5e 00 00 00 00 18     ....."....^.....
    1361:	32 52 23 49 c5 81 9a 01 48 00 02 00 3b 4b 28 00     2R#I....H...;K(.
    1371:	56 00 10 32 52 23 49 c5 81 05 00 1e 00 00 00 11     V..2R#I.........
    1381:	4b cc 01 b4 00 10 32 52 23 49 c5 81 00 00 00 00     K.....2R#I......
	...
    1425:	00 2b 9a 01 1e 00 28 00 28 00 02 02 20 4a 10 23     .+....(.(... J.#
    1435:	49 2d 9a 01 a0 00 28 00 28 00 02 02 0d 4a 10 23     I-....(.(....J.#
    1445:	49 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     I...............
	...
    14e9:	00 00 0a 00 28 00 78 00 3c 00 01 01 e0 07 ff ff     ....(.x.<.......
    14f9:	82 50 02 03 02 02 00 27 65 fb 67 3d 4a 4a 4a 10     .P.....'e.g=JJJ.
    1509:	01 00 03 00 00 02 00 01 08 00 00 00 00 e0 01 40     ...............@
    1519:	01 01 ff ff 10 21 49 21 49 21 49 21 49 21 49 92     .....!I!I!I!I!I.
    1529:	7f ab 84 0a 00 dc 00 be 00 28 00 02 00 46 54 10     .........(...FT.
    1539:	23 49 86 7f 0a 00 28 00 be 00 28 00 01 00 d3 58     #I....(...(....X
    1549:	10 23 49 78 7f 0a 00 64 00 be 00 28 00 01 00 1b     .#Ix...d...(....
    1559:	59 10 23 49 59 7f 0a 00 a0 00 be 00 28 00 01 00     Y.#IY.......(...
    1569:	30 59 10 23 49 64 7f 18 01 28 00 be 00 28 00 01     0Y.#Id...(...(..
    1579:	00 33 52 10 23 49 00 00 00 00 00 00 00 00 00 00     .3R.#I..........
	...
    1645:	00 00 18 01 22 01 00 00 a7 5e 00 00 00 00 18 32     ...."....^.....2
    1655:	52 23 49 c5 81 00 00 00 00 00 00 00 00 00 00 00     R#I.............
	...
    17f9:	00 00 00 05 00 01 00 00 00 00 00 9a 00 00 00 00     ................
    1809:	e0 01 40 01 01 ff ff 10 21 49 21 49 21 49 21 49     ..@.....!I!I!I!I
    1819:	21 49 b3 80 ab 84 0a 00 dc 00 be 00 28 00 02 00     !I..........(...
    1829:	46 54 10 23 49 00 00 00 00 00 00 00 00 00 00 00     FT.#I...........
	...
    1939:	00 0f 00 2d 00 00 00 de 8b 00 00 00 00 24 32 52     ...-.........$2R
    1949:	23 49 c5 81 0a 00 28 00 00 00 11 4b b8 01 aa 00     #I....(....K....
    1959:	20 32 52 23 49 c5 81 18 01 22 01 00 00 a7 5e 00      2R#I...."....^.
    1969:	00 00 00 18 32 52 23 49 c5 81 00 00 00 00 00 00     ....2R#I........
	...
    1aed:	00 00 01 00 03 00 00 00 00 00 a1 00 00 00 00 e0     ................
    1afd:	01 40 01 01 ff ff 20 21 49 21 49 94 49 9d 49 21     .@.... !I!I.I.I!
    1b0d:	49 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     I...............
	...
    23e5:	00 00 0b 82 fc 81 1e 00 3c 00 64 00 28 00 02 00     ........<.d.(...
    23f5:	b4 54 10 23 49 f9 81 fa 00 3c 00 64 00 28 00 02     .T.#I....<.d.(..
    2405:	00 46 54 10 23 49 00 00 00 00 00 00 00 00 00 00     .FT.#I..........
	...
    2505:	00 14 00 23 00 00 00 d9 5a 00 00 00 00 10 32 52     ...#....Z.....2R
    2515:	23 49 c5 81 00 00 00 00 00 00 00 00 00 00 00 00     #I..............
	...
    26b9:	00 00 02 00 01 00 00 00 00 00 64 32 00 32 00 7c     ..........d2.2.|
    26c9:	01 8c 00 06 e0 ff 10 21 49 21 49 21 49 21 49 21     .......!I!I!I!I!
    26d9:	49 0b 82 eb 81 0a 00 c8 00 82 00 28 00 02 00 96     I..........(....
    26e9:	54 10 23 49 f2 81 96 00 c8 00 82 00 28 00 02 00     T.#I........(...
    26f9:	46 54 10 23 49 00 00 00 00 00 00 00 00 00 00 00     FT.#I...........
	...
    27f9:	64 00 2d 00 00 00 d2 5c b4 00 28 00 10 32 52 23     d.-....\..(..2R#
    2809:	49 c5 81 00 00 00 00 00 00 00 00 00 00 00 00 00     I...............
	...
    28c9:	00 00 2b 3c 00 2d 00 28 00 28 00 02 00 56 4d 10     ..+<.-.(.(...VM.
    28d9:	23 49 2d 18 01 2d 00 28 00 28 00 02 00 07 4d 10     #I-..-.(.(....M.
    28e9:	23 49 00 00 00 00 00 00 00 00 00 00 00 00 00 00     #I..............
	...
    29ad:	00 02 00 01 00 00 02 00 00 66 0a 00 0a 00 cc 01     .........f......
    29bd:	04 01 06 e0 ff 10 21 49 21 49 21 49 21 49 21 49     ......!I!I!I!I!I
    29cd:	00 82 eb 81 0a 00 c8 00 82 00 28 00 02 00 72 54     ..........(...rT
    29dd:	10 23 49 f2 81 96 00 c8 00 82 00 28 00 02 00 46     .#I........(...F
    29ed:	54 10 23 49 e1 81 2c 01 c8 00 82 00 28 00 02 00     T.#I..,.....(...
    29fd:	cf 4d 10 23 49 d6 81 40 01 23 00 28 00 28 00 02     .M.#I..@.#.(.(..
    2a0d:	00 60 49 10 23 49 d4 81 6d 01 23 00 28 00 28 00     .`I.#I..m.#.(.(.
    2a1d:	02 01 60 49 10 23 49 d2 81 9a 01 23 00 28 00 28     ..`I.#I....#.(.(
    2a2d:	00 02 02 60 49 10 23 49 00 00 00 00 00 00 00 00     ...`I.#I........
	...
    2ae9:	00 00 00 0a 00 23 00 00 00 b8 5d 2c 01 28 00 10     .....#....],.(..
    2af9:	32 52 23 49 c5 81 00 00 00 00 00 00 00 00 00 00     2R#I............
	...
    2c3d:	00 0a 00 50 00 1e 00 1e 00 02 28 28 02 0a 00 00     ...P......((....
    2c4d:	03 39 49 1c 5a 59 49 10 00 00 00 00 00 00 00 00     .9I.ZYI.........
	...
    2ca1:	06 00 01 00 00 00 01 00 67 0a 00 0a 00 cc 01 04     ........g.......
    2cb1:	01 06 e0 ff 10 21 49 21 49 21 49 21 49 21 49 0b     .....!I!I!I!I!I.
    2cc1:	82 eb 81 0a 00 c8 00 82 00 28 00 02 00 72 54 10     .........(...rT.
    2cd1:	23 49 f2 81 96 00 c8 00 82 00 28 00 02 00 46 54     #I........(...FT
    2ce1:	10 23 49 e1 81 2c 01 c8 00 82 00 28 00 02 00 cf     .#I..,.....(....
    2cf1:	4d 10 23 49 00 00 00 00 00 00 00 00 00 00 00 00     M.#I............
	...
    2ddd:	00 00 0a 00 23 00 00 00 b8 5d 2c 01 28 00 10 32     ....#....],.(..2
    2ded:	52 23 49 c5 81 00 00 00 00 00 00 00 00 00 00 00     R#I.............
	...
    2f31:	0a 00 5a 00 23 00 23 00 02 2d 2d 02 0a 00 00 02     ..Z.#.#..--.....
    2f41:	27 49 12 5a 25 49 10 00 00 00 00 00 00 00 00 00     'I.Z%I..........
	...
    2f91:	00 00 00 03 00 01 00 00 00 01 00 65 0a 00 0a 00     ...........e....
    2fa1:	cc 01 04 01 06 e0 ff 10 21 49 21 49 21 49 21 49     ........!I!I!I!I
    2fb1:	21 49 0b 82 ca 7f fa 00 3c 00 64 00 28 00 02 00     !I......<.d.(...
    2fc1:	46 54 10 23 49 00 00 00 00 00 00 00 00 00 00 00     FT.#I...........
	...
    30d1:	00 14 00 23 00 00 00 d9 5a 00 00 00 00 10 32 52     ...#....Z.....2R
    30e1:	23 49 c5 81 00 00 00 00 00 00 00 00 00 00 00 00     #I..............
	...
    3285:	00 00 01 00 01 00 00 00 00 00 68 32 00 32 00 7c     ..........h2.2.|
    3295:	01 8c 00 06 e0 ff 10 21 49 21 49 21 49 21 49 21     .......!I!I!I!I!
    32a5:	49 79 7c ab 84 0a 00 dc 00 be 00 28 00 02 00 46     Iy|........(...F
    32b5:	54 10 23 49 00 00 00 00 00 00 00 00 00 00 00 00     T.#I............
	...
    3579:	00 01 00 00 00 00 00 00 00 a2 00 00 00 00 e0 01     ................
    3589:	40 01 01 ff ff 20 21 49 21 49 c7 49 9d 49 21 49     @.... !I!I.I.I!I
	...
    4165:	6f 83 ab 84 0a 00 dc 00 be 00 28 00 02 00 46 54     o.........(...FT
    4175:	10 23 49 e7 82 18 01 be 00 be 00 28 00 02 00 6d     .#I........(...m
    4185:	54 10 23 49 ca 82 18 01 8c 00 be 00 28 00 02 00     T.#I........(...
    4195:	d4 54 10 23 49 bb 82 18 01 5a 00 be 00 28 00 02     .T.#I....Z...(..
    41a5:	00 6d 56 10 23 49 ab 82 18 01 28 00 be 00 28 00     .mV.#I....(...(.
    41b5:	02 00 12 55 10 23 49 00 00 00 00 00 00 00 00 00     ...U.#I.........
	...
    4281:	00 00 00 18 01 22 01 00 00 a7 5e 00 00 00 00 18     ....."....^.....
    4291:	32 52 23 49 c5 81 14 00 14 00 00 00 5c 5b 00 00     2R#I........\[..
    42a1:	00 00 10 32 52 23 49 c5 81 14 00 14 00 00 00 f1     ...2R#I.........
    42b1:	5a 00 00 00 00 14 32 52 23 49 c5 81 00 00 00 00     Z.....2R#I......
	...
    4439:	05 00 03 00 00 00 00 00 04 00 00 00 00 e0 01 40     ...............@
    4449:	01 01 ff ff 10 21 49 21 49 21 49 21 49 21 49 8a     .....!I!I!I!I!I.
    4459:	83 ab 84 0a 00 dc 00 be 00 28 00 02 00 46 54 10     .........(...FT.
    4469:	23 49 e7 82 18 01 5a 00 be 00 28 00 02 00 68 63     #I....Z...(...hc
    4479:	10 23 49 bb 82 18 01 28 00 be 00 28 00 02 00 a4     .#I....(...(....
    4489:	62 10 23 49 9b 82 18 01 8c 00 be 00 28 00 02 00     b.#I........(...
    4499:	b0 63 10 23 49 00 00 00 00 00 00 00 00 00 00 00     .c.#I...........
	...
    4575:	00 00 14 00 14 00 00 00 35 66 00 00 00 00 14 32     ........5f.....2
    4585:	52 23 49 c5 81 18 01 22 01 00 00 a7 5e 00 00 00     R#I...."....^...
    4595:	00 18 32 52 23 49 c5 81 00 00 00 00 00 00 00 00     ..2R#I..........
	...
    4729:	00 00 00 04 00 02 00 00 00 00 00 07 00 00 00 00     ................
    4739:	e0 01 40 01 01 ff ff 20 21 49 21 49 21 49 9d 49     ..@.... !I!I!I.I
    4749:	21 49 8a 83 ab 84 0a 00 dc 00 be 00 28 00 02 00     !I..........(...
    4759:	46 54 10 23 49 f5 82 0a 00 28 00 be 00 28 00 01     FT.#I....(...(..
    4769:	00 10 64 10 23 49 00 00 00 00 00 00 00 00 00 00     ..d.#I..........
	...
    4869:	00 dc 00 14 00 00 00 11 4b f0 00 f0 00 10 32 52     ........K.....2R
    4879:	23 49 c5 81 18 01 22 01 00 00 a7 5e 00 00 00 00     #I...."....^....
    4889:	18 32 52 23 49 c5 81 9a 01 48 00 01 00 3b 4b 28     .2R#I....H...;K(
    4899:	00 7e 00 10 32 52 23 49 c5 81 00 00 00 00 00 00     .~..2R#I........
	...
    490d:	00 e6 00 23 00 aa 00 37 00 01 3c 3c 00 03 01 01     ...#...7..<<....
    491d:	04 f1 64 15 63 2e 4a 24 00 00 00 00 00 00 00 00     ..d.c.J$........
	...
    4939:	00 00 00 2b 9a 01 1e 00 28 00 28 00 02 01 20 4a     ...+....(.(... J
    4949:	10 23 49 2d 9a 01 c8 00 28 00 28 00 02 01 0d 4a     .#I-....(.(....J
    4959:	10 23 49 00 00 00 00 00 00 00 00 00 00 00 00 00     .#I.............
	...
    4a1d:	00 00 02 00 03 00 01 02 00 00 06 00 00 00 00 e0     ................
    4a2d:	01 40 01 01 ff ff 20 21 49 21 49 c7 49 9d 49 21     .@.... !I!I.I.I!
    4a3d:	49 29 80 ab 84 0a 00 dc 00 be 00 28 00 02 00 46     I).........(...F
    4a4d:	54 10 23 49 b5 7c 0a 00 78 00 be 00 28 00 01 a0     T.#I.|..x...(...
    4a5d:	50 54 20 23 49 00 00 00 00 00 00 00 00 00 00 00     PT #I...........
	...
    4b5d:	18 01 22 01 00 00 a7 5e 00 00 00 00 18 32 52 23     .."....^.....2R#
    4b6d:	49 c5 81 9a 01 48 00 04 00 3b 4b 28 00 7e 00 24     I....H...;K(.~.$
    4b7d:	32 52 23 49 c5 81 00 00 00 00 00 00 00 00 00 00     2R#I............
	...
    4c01:	0a 00 28 00 be 00 37 00 01 01 01 00 01 01 00 01     ..(...7.........
    4c11:	4f 50 e1 55 e2 49 20 e6 00 28 00 aa 00 37 00 01     OP.U.I ..(...7..
    4c21:	3c 3c 00 03 01 04 05 8e 50 db 55 e2 49 24 2b 9a     <<......P.U.I$+.
    4c31:	01 1e 00 28 00 28 00 02 04 20 4a 20 23 49 2d 9a     ...(.(... J #I-.
    4c41:	01 c8 00 28 00 28 00 02 04 0d 4a 20 23 49 00 00     ...(.(....J #I..
	...
    4d11:	00 02 00 02 00 02 02 00 00 9e 00 00 00 00 e0 01     ................
    4d21:	40 01 01 ff ff 20 21 49 21 49 c7 49 9d 49 21 49     @.... !I!I.I.I!I
    4d31:	2c 82 ab 84 0a 00 dc 00 be 00 28 00 02 00 46 54     ,.........(...FT
    4d41:	10 23 49 61 7c dc 00 dc 00 be 00 28 00 01 00 e5     .#Ia|......(....
    4d51:	67 20 23 49 00 00 00 00 00 00 00 00 00 00 00 00     g #I............
	...
    4fe5:	00 00 0a 00 28 00 78 00 32 00 02 01 e0 07 ff ff     ....(.x.2.......
    4ff5:	82 3c 02 03 03 ff 05 00 50 b5 67 e2 49 70 4f 21     .<......P.g.IpO!
    5005:	02 00 00 00 00 00 00 01 0a 0a 00 0a 00 cc 01 2c     ...............,
    5015:	01 06 e0 ff 20 d0 49 21 49 21 49 21 49 21 49 c0     .... .I!I!I!I!I.
    5025:	84 ab 84 0a 00 dc 00 be 00 28 00 02 00 46 54 10     .........(...FT.
    5035:	23 49 89 7c 0a 00 a0 00 be 00 28 00 01 00 32 52     #I.|......(...2R
    5045:	20 23 49 bb 82 18 01 28 00 be 00 28 00 02 00 9b      #I....(...(....
    5055:	56 20 23 49 e3 83 0a 00 28 00 be 00 28 00 01 00     V #I....(...(...
    5065:	a0 55 20 f7 4f d4 83 0a 00 28 00 be 00 28 00 01     .U .O....(...(..
    5075:	00 65 55 20 ee 4f 39 83 18 01 64 00 be 00 28 00     .eU .O9...d...(.
    5085:	02 0b 50 54 20 23 49 29 83 18 01 a0 00 be 00 28     ..PT #I).......(
    5095:	00 01 00 32 52 20 23 49 1f 83 18 01 dc 00 be 00     ...2R #I........
    50a5:	28 00 02 0c 50 54 20 23 49 f5 84 0a 00 64 00 be     (...PT #I....d..
    50b5:	00 28 00 01 9f 50 54 20 23 49 00 00 00 00 00 00     .(...PT #I......
	...
    5141:	00 00 18 01 22 01 00 00 a7 5e 00 00 00 00 18 32     ...."....^.....2
    5151:	52 23 49 c5 81 8c 00 05 00 00 00 86 5a 00 00 00     R#I.........Z...
    5161:	00 20 32 52 23 49 c5 81 00 00 00 00 00 00 00 00     . 2R#I..........
	...
    52f5:	00 00 00 09 00 02 00 00 00 00 00 09 00 00 00 00     ................
    5305:	e0 01 40 01 01 ff ff 20 21 49 21 49 21 49 21 49     ..@.... !I!I!I!I
    5315:	21 49 39 83 ab 84 0a 00 dc 00 be 00 28 00 02 00     !I9.........(...
    5325:	46 54 10 23 49 d9 82 d2 00 dc 00 aa 00 28 00 02     FT.#I........(..
    5335:	00 2c 4e 20 23 49 00 00 00 00 00 00 00 00 00 00     .,N #I..........
	...
    5435:	00 9a 01 52 00 03 00 3b 4b 28 00 56 00 22 32 52     ...R...;K(.V."2R
    5445:	23 49 c5 81 00 00 00 00 00 00 00 00 00 00 00 00     #I..............
	...
    5505:	00 00 00 2b 9a 01 28 00 28 00 28 00 02 03 20 4a     ...+..(.(.(... J
    5515:	20 23 49 2d 9a 01 aa 00 28 00 28 00 02 03 0d 4a      #I-....(.(....J
    5525:	20 23 49 00 00 00 00 00 00 00 00 00 00 00 00 00      #I.............
	...
    55cd:	0a 00 28 00 78 00 32 00 01 01 e0 07 ff ff 82 3c     ..(.x.2........<
    55dd:	02 03 03 03 01 b5 65 24 4e 3d 4a c9 50 26 02 00     ......e$N=J.P&..
    55ed:	01 00 00 02 00 01 0b 0a 00 0a 00 cc 01 2c 01 06     .............,..
    55fd:	e0 ff 20 21 49 c7 49 8a 49 21 49 21 49 47 82 ab     .. !I.I.I!I!IG..
    560d:	84 0a 00 dc 00 be 00 28 00 02 00 46 54 10 23 49     .......(...FT.#I
	...
    56b5:	00 29 84 0a 00 a0 00 5a 00 28 00 01 00 f8 ff ff     .).....Z.(......
    56c5:	03 bc 4f d4 50 26 d9 4f 20 84 6e 00 a0 00 5a 00     ..O.P&.O .n...Z.
    56d5:	28 00 01 1f 00 ff ff 05 bc 4f d4 50 26 d9 4f 00     (........O.P&.O.
	...
    5729:	0a 00 28 00 e0 ff e7 4a be 00 a0 00 02 32 52 23     ..(....J.....2R#
    5739:	49 c5 81 32 00 28 00 00 00 d2 5c 6e 00 28 00 23     I..2.(....\n.(.#
    5749:	32 52 d9 4f c5 81 00 00 00 00 00 00 00 00 00 00     2R.O............
	...
    57f9:	00 00 2b a0 00 28 00 28 00 28 00 02 00 56 4d 22     ..+..(.(.(...VM"
    5809:	d9 4f 2d 0a 00 28 00 28 00 28 00 02 00 07 4d 22     .O-..(.(.(....M"
    5819:	d9 4f 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .O..............
	...
    58bd:	00 00 00 e6 00 28 00 c8 00 28 00 02 01 e0 07 ff     .....(...(......
    58cd:	ff 01 32 00 05 01 ff 05 f2 50 0e 4e e2 49 88 4f     ..2......P.N.I.O
    58dd:	22 01 02 02 00 00 02 00 01 9f 0a 00 0a 00 cc 01     "...............
    58ed:	2c 01 06 e0 ff 20 d9 49 77 49 80 49 21 49 e3 4b     ,.... .IwI.I!I.K
    58fd:	a9 85 ab 84 0a 00 dc 00 be 00 28 00 02 00 46 54     ..........(...FT
    590d:	10 23 49 b0 84 0a 00 28 00 be 00 28 00 01 00 e3     .#I....(...(....
    591d:	4c 10 23 49 00 00 00 00 00 00 00 00 00 00 00 00     L.#I............
	...
    5a19:	00 00 00 0e 01 28 00 00 00 d2 5c 8c 00 28 00 10     .....(....\..(..
    5a29:	32 52 23 49 cc 81 0e 01 5a 00 01 00 d2 5c 8c 00     2R#I....Z....\..
    5a39:	28 00 10 32 52 23 49 ca 81 0e 01 8c 00 02 00 d2     (..2R#I.........
    5a49:	5c 8c 00 28 00 10 32 52 23 49 c8 81 0e 01 be 00     \..(..2R#I......
    5a59:	03 00 d2 5c 8c 00 28 00 10 32 52 23 49 c6 81 00     ...\..(..2R#I...
	...
    5aed:	00 2b 9a 01 28 00 28 00 28 00 02 00 56 4d 10 23     .+..(.(.(...VM.#
    5afd:	49 2d e6 00 28 00 28 00 28 00 02 00 07 4d 10 23     I-..(.(.(....M.#
    5b0d:	49 2b 9a 01 5a 00 28 00 28 00 02 01 56 4d 10 23     I+..Z.(.(...VM.#
    5b1d:	49 2d e6 00 5a 00 28 00 28 00 02 01 07 4d 10 23     I-..Z.(.(....M.#
    5b2d:	49 2b 9a 01 8c 00 28 00 28 00 02 02 56 4d 10 23     I+....(.(...VM.#
    5b3d:	49 2d e6 00 8c 00 28 00 28 00 02 02 07 4d 10 23     I-....(.(....M.#
    5b4d:	49 2b 9a 01 be 00 28 00 28 00 02 03 56 4d 10 23     I+....(.(...VM.#
    5b5d:	49 2d e6 00 be 00 28 00 28 00 02 03 07 4d 10 23     I-....(.(....M.#
    5b6d:	49 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     I...............
	...
    5bd1:	02 00 04 00 00 08 00 00 0c 0a 00 0a 00 cc 01 2c     ...............,
    5be1:	01 06 e0 ff 10 21 49 21 49 21 49 21 49 20 4c b5     .....!I!I!I!I L.
    5bf1:	7c ab 84 0a 00 dc 00 be 00 28 00 02 00 46 54 10     |........(...FT.
    5c01:	23 49 ab 7c 0a 00 28 00 be 00 28 00 02 00 32 52     #I.|..(...(...2R
    5c11:	20 23 49 00 00 00 00 00 00 00 00 00 00 00 00 00      #I.............
	...
    5d0d:	00 00 18 01 22 01 00 00 a7 5e 00 00 00 00 18 32     ...."....^.....2
    5d1d:	52 23 49 c5 81 00 00 00 00 00 00 00 00 00 00 00     R#I.............
	...
    5ec1:	00 00 00 02 00 01 00 00 00 00 00 a0 00 00 00 00     ................
    5ed1:	e0 01 40 01 01 ff ff 20 21 49 21 49 21 49 9d 49     ..@.... !I!I!I.I
    5ee1:	21 49 8b 80 ab 84 0a 00 dc 00 be 00 28 00 02 00     !I..........(...
    5ef1:	46 54 10 23 49 c5 83 0a 00 28 00 be 00 28 00 02     FT.#I....(...(..
    5f01:	10 50 54 10 23 49 b7 83 0a 00 64 00 be 00 28 00     .PT.#I....d...(.
    5f11:	02 00 32 52 10 23 49 a7 83 18 01 a0 00 be 00 28     ..2R.#I........(
    5f21:	00 02 00 ff 51 10 23 49 0c 80 18 01 28 00 be 00     ....Q.#I....(...
    5f31:	28 00 02 99 50 54 10 23 49 01 80 18 01 64 00 be     (...PT.#I....d..
    5f41:	00 28 00 02 9c 50 54 10 23 49 92 7f 0a 00 a0 00     .(...PT.#I......
    5f51:	be 00 28 00 02 9a 50 54 10 23 49 cd 7f 18 01 dc     ..(...PT.#I.....
    5f61:	00 be 00 28 00 01 00 e0 4a 10 23 49 00 00 00 00     ...(....J.#I....
	...
    6001:	00 18 01 22 01 00 00 a7 5e 00 00 00 00 18 32 52     ..."....^.....2R
    6011:	23 49 c5 81 00 00 00 00 00 00 00 00 00 00 00 00     #I..............
	...
    61b5:	00 00 08 00 01 00 00 00 00 00 96 00 00 00 00 e0     ................
    61c5:	01 40 01 01 ff ff 10 21 49 21 49 21 49 9d 49 21     .@.....!I!I!I.I!
    61d5:	49 0d 85 ab 84 0a 00 dc 00 be 00 28 00 02 00 46     I..........(...F
    61e5:	54 10 23 49 80 80 0a 00 28 00 be 00 28 00 02 96     T.#I....(...(...
    61f5:	50 54 20 23 49 1b 80 18 01 28 00 be 00 28 00 02     PT #I....(...(..
    6205:	9e 50 54 20 23 49 3e 80 0a 00 a0 00 be 00 28 00     .PT #I>.......(.
    6215:	02 98 50 54 20 23 49 5f 80 0a 00 64 00 be 00 28     ..PT #I_...d...(
    6225:	00 02 97 50 54 20 23 49 00 00 00 00 00 00 00 00     ...PT #I........
	...
    62f5:	18 01 22 01 00 00 a7 5e 00 00 00 00 18 32 52 23     .."....^.....2R#
    6305:	49 c5 81 00 00 00 00 00 00 00 00 00 00 00 00 00     I...............
	...
    64a9:	00 05 00 01 00 00 00 00 00 02 00 00 00 00 e0 01     ................
    64b9:	40 01 01 ff ff 20 21 49 21 49 21 49 9d 49 21 49     @.... !I!I!I.I!I
    64c9:	6c 80 ab 84 0a 00 dc 00 be 00 28 00 02 00 46 54     l.........(...FT
    64d9:	10 23 49 99 83 0a 00 28 00 be 00 28 00 02 03 50     .#I....(...(...P
    64e9:	54 10 23 49 f6 7f 0a 00 64 00 be 00 28 00 02 06     T.#I....d...(...
    64f9:	50 54 10 23 49 ec 7f 0a 00 a0 00 be 00 28 00 02     PT.#I........(..
    6509:	00 32 52 10 23 49 00 00 00 00 00 00 00 00 00 00     .2R.#I..........
	...
    65e5:	00 00 00 18 01 22 01 00 00 a7 5e 00 00 00 00 18     ....."....^.....
    65f5:	32 52 23 49 c5 81 00 00 00 00 00 00 00 00 00 00     2R#I............
	...
    679d:	04 00 01 00 00 00 00 00 97 00 00 00 00 e0 01 40     ...............@
    67ad:	01 01 ff ff 10 21 49 21 49 21 49 21 49 21 49 4b     .....!I!I!I!I!IK
    67bd:	80 ab 84 0a 00 dc 00 be 00 28 00 02 00 46 54 10     .........(...FT.
    67cd:	23 49 5d 82 0a 00 28 00 be 00 28 00 01 08 50 54     #I]...(...(...PT
    67dd:	10 23 49 00 00 00 00 00 00 00 00 00 00 00 00 00     .#I.............
	...
    68d9:	00 00 18 01 22 01 00 00 a7 5e 00 00 00 00 18 32     ...."....^.....2
    68e9:	52 23 49 c5 81 00 00 00 00 00 00 00 00 00 00 00     R#I.............
	...
    697d:	00 00 0a 00 64 00 be 00 28 00 01 01 01 00 01 01     ....d...(.......
    698d:	00 01 b8 4e 5f 55 e2 49 10 00 00 00 00 00 00 00     ...N_U.I........
	...
    6a71:	00 0a 00 a0 00 be 00 28 00 01 01 e0 07 ff ff 01     .......(........
    6a81:	32 00 01 01 ff 01 2a 51 59 55 e2 49 8b 4a 10 02     2.....*QYU.I.J..
    6a91:	00 01 00 01 00 00 01 98 00 00 00 00 e0 01 40 01     ..............@.
    6aa1:	01 ff ff 10 21 49 21 49 21 49 21 49 21 49 4b 80     ....!I!I!I!I!IK.
    6ab1:	ab 84 0a 00 dc 00 be 00 28 00 02 00 46 54 10 23     ........(...FT.#
    6ac1:	49 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     I...............
	...
    6bcd:	00 0e 01 28 00 00 00 d2 5c 8c 00 28 00 10 32 52     ...(....\..(..2R
    6bdd:	84 4a c5 81 00 00 00 00 00 00 00 00 00 00 00 00     .J..............
	...
    6c2d:	e9 7d 0a 00 28 00 be 00 28 00 01 e0 07 ff ff 00     .}..(...(.......
    6c3d:	92 51 50 4a 2a 4f 10 00 00 00 00 00 00 00 00 00     .QPJ*O..........
	...
    6c9d:	00 00 00 2b 9a 01 28 00 28 00 28 00 02 00 56 4d     ...+..(.(.(...VM
    6cad:	10 84 4a 2d e6 00 28 00 28 00 28 00 02 00 07 4d     ..J-..(.(.(....M
    6cbd:	10 84 4a 00 00 00 00 00 00 00 00 00 00 00 00 00     ..J.............
	...
    6d81:	00 00 01 00 01 01 00 02 00 00 9b 0a 00 0a 00 cc     ................
    6d91:	01 18 01 06 e0 ff 10 21 49 21 49 21 49 21 49 56     .......!I!I!I!IV
    6da1:	4a 01 80 ab 84 0a 00 dc 00 be 00 28 00 02 00 46     J..........(...F
    6db1:	54 10 23 49 00 00 00 00 00 00 00 00 00 00 00 00     T.#I............
	...
    6ec1:	18 01 22 01 00 00 a7 5e 00 00 00 00 18 32 52 23     .."....^.....2R#
    6ed1:	49 c5 81 0a 00 1e 00 00 00 1e 5f 00 00 00 00 2c     I........._....,
    6ee1:	32 52 23 49 c5 81 00 00 00 00 00 00 00 00 00 00     2R#I............
	...
    7075:	00 01 00 02 00 00 00 00 00 9c 00 00 00 00 e0 01     ................
    7085:	40 01 01 ff ff 10 21 49 21 49 94 49 9d 49 21 49     @.....!I!I.I.I!I
    7095:	a8 7d ab 84 0a 00 dc 00 be 00 28 00 02 00 46 54     .}........(...FT
    70a5:	10 23 49 00 00 00 00 00 00 00 00 00 00 00 00 00     .#I.............
	...
    7349:	00 00 0a 00 28 00 64 00 28 00 01 01 e0 07 ff ff     ....(.d.(.......
    7359:	6e 32 02 04 02 ff 06 a5 4d b8 51 e2 49 91 4a 10     n2......M.Q.I.J.
    7369:	01 00 00 01 00 00 00 01 9d 0a 00 0a 00 cc 01 18     ................
    7379:	01 06 e0 ff 10 21 49 21 49 21 49 21 49 56 4a 00     .....!I!I!I!IVJ.
	...

00007c61 <new_text_no_default_ring>:
    7c61:	5a 61 64 6e 79 20 76 79 63 68 6f 7a 69 20 72 65     Zadny vychozi re
    7c71:	67 75 6c 61 74 6f 72 00                             gulator.

00007c79 <new_text_regulator_menu>:
    7c79:	4d 65 6e 75 20 72 65 67 75 6c 61 74 6f 72 75 00     Menu regulatoru.

00007c89 <new_text_termostat_statistika>:
    7c89:	53 74 61 74 69 73 74 69 6b 61 20 72 65 67 75 6c     Statistika regul
    7c99:	61 74 6f 72 75 00                                   atoru.

00007c9f <new_text_regulator>:
    7c9f:	52 65 67 75 6c 61 74 6f 72 3a 20 00                 Regulator: .

00007cab <new_text_novy_time_plan>:
    7cab:	4e 6f 76 79 20 70 6c 61 6e 00                       Novy plan.

00007cb5 <new_text_set_time_program>:
    7cb5:	43 61 73 6f 76 65 20 70 6c 61 6e 79 00              Casove plany.

00007cc2 <new_text_slash_rtds_control_list>:
    7cc2:	2f 72 74 64 73 2d 63 6f 6e 74 72 6f 6c 2f 6c 69     /rtds-control/li
    7cd2:	73 74 00                                            st.

00007cd5 <new_text_slash_rtds_slash>:
    7cd5:	2f 72 74 64 73 2f 00                                /rtds/.

00007cdc <new_text_rtds_type_temp>:
    7cdc:	54 79 70 3a 20 76 7a 64 61 6c 65 6e 61 20 74 65     Typ: vzdalena te
    7cec:	70 6c 6f 74 61 00                                   plota.

00007cf2 <new_text_date_error>:
    7cf2:	2d 2d 2e 2d 2d 2e 2d 2d 2d 2d 00                    --.--.----.

00007cfd <new_text_mqtt_error>:
    7cfd:	4d 51 54 54 20 76 20 63 68 79 62 65 3a 20 00        MQTT v chybe: .

00007d0c <new_text_mqtt_processed>:
    7d0c:	4d 51 54 54 20 7a 70 72 61 63 6f 76 61 6e 79 63     MQTT zpracovanyc
    7d1c:	68 3a 20 00                                         h: .

00007d20 <new_text_mqtt_receive>:
    7d20:	4d 51 54 54 20 70 72 69 6a 61 74 79 63 68 3a 20     MQTT prijatych: 
	...

00007d31 <new_text_mqtt_send>:
    7d31:	4d 51 54 54 20 6f 64 65 73 6c 61 6e 79 63 68 3a     MQTT odeslanych:
    7d41:	20 00                                                .

00007d43 <new_text_selfcheck_test>:
    7d43:	53 65 6c 66 63 68 65 63 6b 3a 20 00                 Selfcheck: .

00007d4f <new_text_internal_temp>:
    7d4f:	49 6e 74 65 72 6e 69 20 74 65 70 6c 6f 74 61 3a     Interni teplota:
    7d5f:	20 00                                                .

00007d61 <new_text_consume_ampere>:
    7d61:	4f 64 62 65 72 20 70 72 6f 75 64 75 3a 20 00        Odber proudu: .

00007d70 <new_text_tritri_volt>:
    7d70:	49 6e 74 65 72 6e 69 20 6e 61 70 65 74 69 20 33     Interni napeti 3
    7d80:	2e 33 20 00                                         .3 .

00007d84 <new_text_pet_volt>:
    7d84:	49 6e 74 65 72 6e 69 20 6e 61 70 65 74 69 20 35     Interni napeti 5
    7d94:	2e 30 20 00                                         .0 .

00007d98 <new_text_input_volt>:
    7d98:	56 73 74 75 70 6e 69 20 6e 61 70 65 74 69 20 00     Vstupni napeti .

00007da8 <new_text_auto_display_shutdown>:
    7da8:	41 75 74 6f 6d 61 74 69 63 6b 65 20 76 79 70 6e     Automaticke vypn
    7db8:	75 74 69 20 64 69 73 70 6c 61 79 65 00              uti displaye.

00007dc5 <new_text_jas_display_manual>:
    7dc5:	4d 61 6e 75 61 6c 6e 69 20 72 69 7a 65 6e 69 20     Manualni rizeni 
	...

00007dd6 <new_text_jas_display_automat>:
    7dd6:	41 75 74 6f 6d 61 74 69 63 6b 65 20 72 69 7a 65     Automaticke rize
    7de6:	6e 69 00                                            ni.

00007de9 <new_text_switch_brightness_automode>:
    7de9:	41 75 74 6f 6d 61 74 69 63 6b 79 20 6a 61 73 00     Automaticky jas.

00007df9 <new_text_err_connect_seznam>:
    7df9:	4b 6f 6e 65 6b 74 69 76 69 74 61 20 45 52 52 4f     Konektivita ERRO
    7e09:	52 00                                               R.

00007e0b <new_text_ok_connect_seznam>:
    7e0b:	4b 6f 6e 65 6b 74 69 76 69 74 61 20 4f 4b 00        Konektivita OK.

00007e1a <new_text_time_set_date_manualy>:
    7e1a:	52 75 63 6e 69 20 6e 61 73 74 61 76 65 6e 69 20     Rucni nastaveni 
    7e2a:	64 61 74 75 6d 75 00                                datumu.

00007e31 <new_text_time_set_time_manualy>:
    7e31:	52 75 63 6e 69 20 6e 61 73 74 61 76 65 6e 69 20     Rucni nastaveni 
    7e41:	63 61 73 75 00                                      casu.

00007e46 <new_text_time_set_offset>:
    7e46:	4e 54 50 20 70 6f 73 75 6e 75 74 69 20 63 61 73     NTP posunuti cas
    7e56:	75 00                                               u.

00007e58 <new_text_ntp_set_server>:
    7e58:	4e 61 73 74 61 76 65 6e 69 20 4e 54 50 20 73 65     Nastaveni NTP se
    7e68:	72 76 65 72 75 00                                   rveru.

00007e6e <new_text_set_network_test_connection>:
    7e6e:	54 65 73 74 20 70 72 69 70 6f 6a 65 6e 69 00        Test pripojeni.

00007e7d <new_text_set_network_name>:
    7e7d:	4e 61 73 74 61 76 65 6e 69 20 6e 61 7a 76 75 20     Nastaveni nazvu 
    7e8d:	7a 61 72 69 7a 65 6e 69 00                          zarizeni.

00007e96 <new_text_set_network_mac>:
    7e96:	4e 61 73 74 61 76 65 6e 69 20 4d 41 43 20 61 64     Nastaveni MAC ad
    7ea6:	72 65 73 79 00                                      resy.

00007eab <new_text_set_network_dns>:
    7eab:	4e 61 73 74 61 76 65 6e 69 20 44 4e 53 20 73 65     Nastaveni DNS se
    7ebb:	72 76 65 72 75 00                                   rveru.

00007ec1 <new_text_set_network_gw>:
    7ec1:	4e 61 73 74 61 76 65 6e 69 20 76 79 63 68 6f 7a     Nastaveni vychoz
    7ed1:	69 20 62 72 61 6e 79 00                             i brany.

00007ed9 <new_text_set_network_mask>:
    7ed9:	4e 61 73 74 61 76 65 6e 69 20 6d 61 73 6b 79 20     Nastaveni masky 
    7ee9:	73 69 74 65 00                                      site.

00007eee <new_text_set_network_ip>:
    7eee:	4e 61 73 74 61 76 65 6e 69 20 49 50 00              Nastaveni IP.

00007efb <new_text_device_mac>:
    7efb:	4d 41 43 20 61 64 72 65 73 61 00                    MAC adresa.

00007f06 <new_text_device_dns>:
    7f06:	44 4e 53 20 73 65 72 76 65 72 00                    DNS server.

00007f11 <new_text_device_gw>:
    7f11:	56 79 63 68 6f 7a 69 20 62 72 61 6e 61 00           Vychozi brana.

00007f1f <new_text_device_mask>:
    7f1f:	49 50 20 6d 61 73 6b 61 00                          IP maska.

00007f28 <new_text_device_ip>:
    7f28:	49 50 20 61 64 72 65 73 61 00                       IP adresa.

00007f32 <new_text_device_nazev>:
    7f32:	4e 61 7a 65 76 20 7a 61 72 69 7a 65 6e 69 00        Nazev zarizeni.

00007f41 <new_text_jas_display>:
    7f41:	4e 61 73 74 61 76 65 6e 69 20 6a 61 73 75 20 64     Nastaveni jasu d
    7f51:	69 73 70 6c 61 79 65 00                             isplaye.

00007f59 <new_text_mqtt_pass>:
    7f59:	4d 51 54 54 20 68 65 73 6c 6f 00                    MQTT heslo.

00007f64 <new_text_mqtt_check>:
    7f64:	4d 51 54 54 20 6f 76 65 72 69 74 20 73 70 6f 6a     MQTT overit spoj
    7f74:	65 6e 69 00                                         eni.

00007f78 <new_text_mqtt_user>:
    7f78:	4d 51 54 54 20 75 7a 69 76 61 74 65 6c 00           MQTT uzivatel.

00007f86 <new_text_mqtt_broker>:
    7f86:	4d 51 54 54 20 73 65 72 76 65 72 00                 MQTT server.

00007f92 <new_text_nastaveni_mqtt_pripojeni>:
    7f92:	4e 61 73 74 61 76 65 6e 69 20 4d 51 54 54 00        Nastaveni MQTT.

00007fa1 <new_text_error_ntp_time>:
    7fa1:	41 6b 74 75 61 6c 69 7a 61 63 65 20 4e 54 50 20     Aktualizace NTP 
    7fb1:	45 52 52 4f 52 00                                   ERROR.

00007fb7 <new_text_ok_ntp_time>:
    7fb7:	41 6b 74 75 61 6c 69 7a 61 63 65 20 4e 54 50 20     Aktualizace NTP 
    7fc7:	4f 4b 00                                            OK.

00007fca <new_text_ok>:
    7fca:	4f 4b 00                                            OK.

00007fcd <new_text_nastaveni_reload>:
    7fcd:	52 65 73 74 61 72 74 20 7a 61 72 69 7a 65 6e 69     Restart zarizeni
	...

00007fde <new_text_scan_onewire_bus>:
    7fde:	53 63 61 6e 20 73 62 65 72 6e 69 63 65 00           Scan sbernice.

00007fec <new_nastaveni_nrf_input>:
    7fec:	4e 52 46 20 76 73 74 75 70 00                       NRF vstup.

00007ff6 <new_nastaveni_mqtt_topic>:
    7ff6:	4d 51 54 54 20 74 6f 70 69 63 00                    MQTT topic.

00008001 <new_text_o_zarizeni>:
    8001:	4f 20 7a 61 72 69 7a 65 6e 69 00                    O zarizeni.

0000800c <new_text_nastaveni_casu>:
    800c:	4e 61 73 74 61 76 65 6e 69 20 63 61 73 75 00        Nastaveni casu.

0000801b <new_text_nastaveni_regulatoru>:
    801b:	4e 2e 20 72 65 67 75 6c 61 74 6f 72 75 00           N. regulatoru.

00008029 <new_text_nastaveni_regulatoru_full>:
    8029:	4e 61 73 74 61 76 65 6e 69 20 72 65 67 75 6c 61     Nastaveni regula
    8039:	74 6f 72 75 00                                      toru.

0000803e <new_text_nastaveni_zobrazeni>:
    803e:	4e 2e 20 7a 6f 62 72 61 7a 65 6e 69 00              N. zobrazeni.

0000804b <new_text_nastaveni_zobrazeni_full>:
    804b:	4e 61 73 74 61 76 65 6e 69 20 7a 6f 62 72 61 7a     Nastaveni zobraz
    805b:	65 6e 69 00                                         eni.

0000805f <new_text_nastaveni_periferie>:
    805f:	4e 2e 20 70 65 72 69 66 65 72 69 69 00              N. periferii.

0000806c <new_text_nastaveni_periferii_full>:
    806c:	4e 61 73 74 61 76 65 6e 69 20 70 65 72 69 66 65     Nastaveni perife
    807c:	72 69 69 00                                         rii.

00008080 <new_text_nastaveni_system>:
    8080:	4e 2e 20 73 79 73 74 65 6d 75 00                    N. systemu.

0000808b <new_text_nastaveni_system_full>:
    808b:	4e 61 73 74 61 76 65 6e 69 20 73 79 73 74 65 6d     Nastaveni system
    809b:	75 00                                               u.

0000809d <seznam_server>:
    809d:	77 77 77 2e 73 65 7a 6e 61 6d 2e 63 7a 00           www.seznam.cz.

000080ab <new_text_vypnuto>:
    80ab:	56 79 70 6e 75 74 6f 00                             Vypnuto.

000080b3 <new_text_show_all_temp>:
    80b3:	5a 6f 62 72 61 7a 65 6e 69 20 76 73 65 63 68 20     Zobrazeni vsech 
    80c3:	74 65 70 6c 6f 74 00                                teplot.

000080ca <keyboad_number_char_special>:
    80ca:	30 31 32 33 34 35 36 37 38 39 21 40 23 24 25 5e     0123456789!@#$%^
    80da:	26 2a 7c 2b 2d 5f 3f 2c 2e 2f                       &*|+-_?,./

000080e4 <keyboad_number_char_lower>:
    80e4:	61 62 63 64 65 66 67 68 69 6a 6b 6c 6d 6e 6f 70     abcdefghijklmnop
    80f4:	71 72 73 74 75 76 77 78 79 7a                       qrstuvwxyz

000080fe <keyboad_number_char_upper>:
    80fe:	41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f 50     ABCDEFGHIJKLMNOP
    810e:	51 52 53 54 55 56 57 58 59 5a                       QRSTUVWXYZ

00008118 <termbig_subscribe>:
    8118:	2f 63 74 6c 2f 74 65 72 6d 62 69 67 2f 73 75 62     /ctl/termbig/sub
    8128:	73 63 72 69 62 65 00                                scribe.

0000812f <thermctl_subscribe>:
    812f:	2f 63 74 6c 2f 74 68 65 72 6d 63 74 6c 2f 73 75     /ctl/thermctl/su
    813f:	62 73 63 72 69 62 65 00                             bscribe.

00008147 <lightctl_header_out>:
    8147:	2f 6c 69 67 68 74 63 74 6c 2d 6f 75 74 2f 00        /lightctl-out/.

00008156 <termbig_header_out>:
    8156:	2f 74 65 72 6d 62 69 67 2d 6f 75 74 2f 00           /termbig-out/.

00008164 <termbig_header_in>:
    8164:	2f 74 65 72 6d 62 69 67 2d 69 6e 2f 00              /termbig-in/.

00008171 <thermctl_header_out>:
    8171:	2f 74 68 65 72 6d 63 74 6c 2d 6f 75 74 2f 00        /thermctl-out/.

00008180 <thermctl_header_in>:
    8180:	2f 74 68 65 72 6d 63 74 6c 2d 69 6e 2f 00           /thermctl-in/.

0000818e <global_time_offset>:
    818e:	67 6c 6f 62 61 6c 2f 74 69 6d 65 2f 6e 74 70 5f     global/time/ntp_
    819e:	6f 66 66 73 65 74 00                                offset.

000081a5 <global_time_ntp>:
    81a5:	67 6c 6f 62 61 6c 2f 74 69 6d 65 2f 6e 74 70 00     global/time/ntp.

000081b5 <global_time_set>:
    81b5:	67 6c 6f 62 61 6c 2f 74 69 6d 65 2f 73 65 74 00     global/time/set.

000081c5 <char_NULL>:
	...

000081c6 <char_T>:
    81c6:	54 00                                               T.

000081c8 <char_D>:
    81c8:	44 00                                               D.

000081ca <char_I>:
    81ca:	49 00                                               I.

000081cc <char_P>:
    81cc:	50 00                                               P.

000081ce <text_dashdash>:
    81ce:	2d 2d 2d 00                                         ---.

000081d2 <text_special_case>:
    81d2:	40 00                                               @.

000081d4 <text_lower_case>:
    81d4:	61 00                                               a.

000081d6 <text_upper_case>:
    81d6:	41 00                                               A.

000081d8 <text_ok>:
    81d8:	4f 4b 00                                            OK.

000081db <text_err>:
    81db:	45 72 72 6f 72 00                                   Error.

000081e1 <text_delete_char>:
    81e1:	53 6d 61 7a 20 7a 6e 61 6b 00                       Smaz znak.

000081eb <text_ulozit>:
    81eb:	55 6c 6f 7a 69 74 00                                Ulozit.

000081f2 <text_zrusit>:
    81f2:	5a 72 75 73 69 74 00                                Zrusit.

000081f9 <text_no>:
    81f9:	4e 65 00                                            Ne.

000081fc <text_yes>:
    81fc:	41 6e 6f 00                                         Ano.

00008200 <text_klavesnice>:
    8200:	4b 6c 61 76 65 73 6e 69 63 65 00                    Klavesnice.

0000820b <text_upozorneni>:
    820b:	55 70 6f 7a 6f 72 6e 65 6e 69 00                    Upozorneni.

00008216 <text_ntp_sync_time>:
    8216:	41 6b 74 75 61 6c 69 7a 61 63 65 20 63 61 73 75     Aktualizace casu
	...

00008227 <text_prog>:
    8227:	50 52 4f 47 00                                      PROG.

0000822c <text_select_term_default_ring>:
    822c:	56 79 62 65 72 20 76 79 63 68 6f 7a 69 68 6f 20     Vyber vychoziho 
    823c:	72 65 67 75 6c 61 74 6f 72 75 00                    regulatoru.

00008247 <text_select_term_mode>:
    8247:	56 79 62 65 72 20 6d 6f 64 75 20 72 65 67 75 6c     Vyber modu regul
    8257:	61 74 6f 72 75 00                                   atoru.

0000825d <text_select_default_temp>:
    825d:	56 79 62 65 72 20 7a 6f 62 72 61 7a 65 6e 69 20     Vyber zobrazeni 
    826d:	74 65 70 6c 6f 6d 65 72 75 00                       teplomeru.

00008277 <text_last_update>:
    8277:	50 6f 73 6c 65 64 6e 69 20 61 6b 74 75 61 6c 69     Posledni aktuali
    8287:	7a 61 63 65 3a 00                                   zace:.

0000828d <text_online>:
    828d:	4f 6e 6c 69 6e 65 00                                Online.

00008294 <text_nazev>:
    8294:	4e 61 7a 65 76 3a 00                                Nazev:.

0000829b <nastaveni_rtds_subscribe>:
    829b:	4d 51 54 54 20 70 72 69 68 6c 61 73 65 6e 69 00     MQTT prihlaseni.

000082ab <nastaveni_tds_offset>:
    82ab:	4e 61 73 74 61 76 69 74 20 6f 66 66 73 65 74 00     Nastavit offset.

000082bb <nastaveni_name_sensor>:
    82bb:	4e 61 73 74 61 76 69 74 20 6e 61 7a 65 76 00        Nastavit nazev.

000082ca <nastaveni_tds_period>:
    82ca:	4d 65 72 69 63 69 20 70 65 72 69 6f 64 61 00        Merici perioda.

000082d9 <nastaveni_deassociate_sensor>:
    82d9:	55 76 6f 6c 6e 69 74 20 63 69 64 6c 6f 00           Uvolnit cidlo.

000082e7 <nastaveni_delete_sensor>:
    82e7:	56 79 6d 61 7a 61 74 20 63 69 64 6c 6f 00           Vymazat cidlo.

000082f5 <text_rtds_novy>:
    82f5:	50 72 69 64 61 74 20 6e 6f 76 65 20 76 7a 64 61     Pridat nove vzda
    8305:	6c 65 6e 65 20 63 69 64 6c 6f 00                    lene cidlo.

00008310 <text_not_used>:
    8310:	4e 65 6e 69 20 70 6f 75 7a 69 74 6f 00              Neni pouzito.

0000831d <text_rtds_prefix>:
    831d:	2f 00                                               /.

0000831f <text_nastavit_pid>:
    831f:	50 49 44 20 76 6f 6c 62 79 00                       PID volby.

00008329 <text_assocoivat_output>:
    8329:	4e 61 73 74 61 76 69 74 20 76 79 73 74 75 70 00     Nastavit vystup.

00008339 <text_assocoivat>:
    8339:	4e 61 73 74 61 76 69 74 20 63 69 64 6c 6f 00        Nastavit cidlo.

00008348 <text_nastavit_tds>:
    8348:	4e 61 73 74 61 76 69 74 20 54 44 53 20 63 69 64     Nastavit TDS cid
    8358:	6c 6f 00                                            lo.

0000835b <text_associovat_tds>:
    835b:	50 72 69 72 61 64 69 74 20 6e 6f 76 65 20 63 69     Priradit nove ci
    836b:	64 6c 6f 00                                         dlo.

0000836f <text_tds_sensors>:
    836f:	56 6c 61 73 74 6e 6f 73 74 69 20 6c 6f 6b 61 6c     Vlastnosti lokal
    837f:	6e 69 68 6f 20 63 69 64 6c 61 00                    niho cidla.

0000838a <nastaveni_rtds>:
    838a:	56 7a 64 61 6c 65 6e 65 20 63 69 64 6c 61 00        Vzdalene cidla.

00008399 <nastaveni_onewire>:
    8399:	4c 6f 6b 61 6c 6e 69 20 63 69 64 6c 61 00           Lokalni cidla.

000083a7 <nastaveni_default>:
    83a7:	52 65 73 65 74 20 6e 61 73 74 61 76 65 6e 69 00     Reset nastaveni.

000083b7 <nastaveni_nrf>:
    83b7:	4e 52 46 20 70 72 69 70 6f 6a 65 6e 69 00           NRF pripojeni.

000083c5 <nastaveni_site>:
    83c5:	4e 61 73 74 61 76 65 6e 69 20 73 69 74 65 00        Nastaveni site.

000083d4 <text_term_do_activate1>:
    83d4:	41 6b 74 69 76 6f 76 61 74 20 72 65 67 2e 00        Aktivovat reg..

000083e3 <text_term_do_deactivate>:
    83e3:	44 65 61 6b 74 69 76 6f 76 61 74 20 72 65 67 2e     Deaktivovat reg.
	...

000083f4 <text_term_do_activate>:
    83f4:	41 6b 74 69 76 6f 76 61 74 20 6e 6f 76 79 20 72     Aktivovat novy r
    8404:	65 67 75 6c 61 74 6f 72 3f 00                       egulator?.

0000840e <text_term_deactive>:
    840e:	4e 65 61 6b 74 69 76 6e 69 00                       Neaktivni.

00008418 <text_term_active>:
    8418:	41 6b 74 69 76 6e 69 00                             Aktivni.

00008420 <text_button_mode_cool>:
    8420:	43 68 6c 61 7a 65 6e 69 00                          Chlazeni.

00008429 <text_button_mode_heat>:
    8429:	54 6f 70 65 6e 69 00                                Topeni.

00008430 <text_button_term_man_comment>:
    8430:	52 75 63 6e 69 20 6f 76 6c 61 64 61 6e 69 00        Rucni ovladani.

0000843f <text_button_term_man>:
    843f:	4d 41 4e 00                                         MAN.

00008443 <text_button_term_prog_comment>:
    8443:	41 75 74 6f 6d 61 74 69 63 6b 79 20 70 72 6f 67     Automaticky prog
    8453:	72 61 6d 00                                         ram.

00008457 <text_button_term_prog>:
    8457:	50 52 4f 47 00                                      PROG.

0000845c <text_button_term_min_comment>:
    845c:	43 68 6c 61 7a 65 6e 69 2c 20 62 65 7a 20 72 65     Chlazeni, bez re
    846c:	67 75 6c 61 63 65 00                                gulace.

00008473 <text_button_term_min>:
    8473:	4d 49 4e 00                                         MIN.

00008477 <text_button_term_max_comment>:
    8477:	5a 61 70 6e 75 74 6f 2c 20 62 65 7a 20 72 65 67     Zapnuto, bez reg
    8487:	75 6c 61 63 65 00                                   ulace.

0000848d <text_button_term_max>:
    848d:	4d 41 58 00                                         MAX.

00008491 <text_button_term_off_comment>:
    8491:	56 79 70 6e 75 74 6f 2c 20 6f 63 68 72 61 6e 6e     Vypnuto, ochrann
    84a1:	79 20 6d 6f 64 00                                   y mod.

000084a7 <text_button_term_off>:
    84a7:	4f 46 46 00                                         OFF.

000084ab <button_zpet>:
    84ab:	5a 70 65 74 00                                      Zpet.

000084b0 <text_set_default>:
    84b0:	56 79 63 68 6f 7a 69 20 68 6f 64 6e 6f 74 79 00     Vychozi hodnoty.

000084c0 <ring_text_setup>:
    84c0:	4e 61 73 74 61 76 65 6e 69 00                       Nastaveni.

000084ca <regulator_text>:
    84ca:	52 65 67 75 6c 61 74 6f 72 00                       Regulator.

000084d4 <funkce_text>:
    84d4:	46 75 6e 6b 63 65 00                                Funkce.

000084db <text_change_default_ring>:
    84db:	5a 6d 65 6e 69 74 20 76 79 63 68 6f 7a 69 20 72     Zmenit vychozi r
    84eb:	65 67 75 6c 61 74 6f 72 75 00                       egulatoru.

000084f5 <text_current_ring_mode>:
    84f5:	41 6b 74 75 61 6c 6e 69 20 6d 6f 64 20 72 65 67     Aktualni mod reg
    8505:	75 6c 61 74 6f 72 75 00                             ulatoru.

0000850d <nastaveni_text>:
    850d:	4e 61 73 74 61 76 65 6e 69 00                       Nastaveni.

00008517 <temp_offset_short>:
    8517:	6f 66 66 73 65 74 3a 00                             offset:.

0000851f <current_temp_short>:
    851f:	74 65 70 6c 6f 74 61 3a 00                          teplota:.

00008528 <current_temp>:
    8528:	41 6b 74 75 61 6c 6e 69 20 74 65 70 6c 6f 74 61     Aktualni teplota
    8538:	3a 00                                               :.

0000853a <current_time>:
    853a:	41 6b 74 75 61 6c 6e 69 20 63 61 73 00              Aktualni cas.

00008547 <text_test_eeprom>:
    8547:	54 65 73 74 20 53 50 49 2d 45 45 50 52 4f 4d 00     Test SPI-EEPROM.

00008557 <text_test_ram>:
    8557:	54 65 73 74 20 53 50 49 2d 52 41 4d 00              Test SPI-RAM.

00008564 <text_bezny_start>:
    8564:	42 65 7a 6e 79 20 73 74 61 72 74 00                 Bezny start.

00008570 <text_vychozi_nastaveni>:
    8570:	56 79 63 68 6f 7a 69 20 6e 61 73 74 61 76 65 6e     Vychozi nastaven
    8580:	69 00                                               i.

00008582 <text_rtc_cas>:
    8582:	52 54 43 20 76 6e 69 74 72 6e 69 20 68 6f 64 69     RTC vnitrni hodi
    8592:	6e 79 00                                            ny.

00008595 <text_ntp_cas>:
    8595:	4e 54 50 20 69 6e 74 65 72 6e 65 74 6f 76 79 20     NTP internetovy 
    85a5:	63 61 73 00                                         cas.

000085a9 <text_pid_regulator>:
    85a9:	50 49 44 20 72 65 67 75 6c 61 74 6f 72 00           PID regulator.

000085b7 <text_nrf_rozhrani>:
    85b7:	4e 52 46 20 72 6f 7a 68 72 61 6e 69 00              NRF rozhrani.

000085c4 <text_rest_rozhrani>:
    85c4:	52 45 53 54 20 41 50 49 20 72 6f 7a 68 72 61 6e     REST API rozhran
    85d4:	69 00                                               i.

000085d6 <text_mqtt_rozhrani>:
    85d6:	4d 51 54 54 20 72 6f 7a 68 72 61 6e 69 00           MQTT rozhrani.

000085e4 <text_ethernet_rozhrani>:
    85e4:	45 74 68 65 72 6e 65 74 20 72 6f 7a 68 72 61 6e     Ethernet rozhran
    85f4:	69 00                                               i.

000085f6 <text_vnitrni_ochrany>:
    85f6:	56 6e 69 74 72 6e 69 20 6f 63 68 72 61 6e 79 00     Vnitrni ochrany.

00008606 <text_onewire_hledam>:
    8606:	31 77 69 72 65 20 68 6c 65 64 61 6d 00              1wire hledam.

00008613 <text_onewire_rozhrani>:
    8613:	31 77 69 72 65 20 72 6f 7a 68 72 61 6e 69 00        1wire rozhrani.

00008622 <text_nastaveni_systemu>:
    8622:	6e 61 73 74 61 76 65 6e 69 20 73 79 73 74 65 6d     nastaveni system
    8632:	75 00                                               u.

00008634 <text_touchscreen>:
    8634:	74 6f 75 63 68 73 63 72 65 65 6e 00                 touchscreen.

00008640 <term_title>:
    8640:	50 6f 6b 6f 6a 6f 76 79 20 72 65 67 75 6c 61 74     Pokojovy regulat
    8650:	6f 72 20 76 33 00                                   or v3.

00008656 <network_mqtt_key>:
    8656:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 6b 65 79     network/mqtt_key
	...

00008667 <network_mqtt_user>:
    8667:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 75 73 65     network/mqtt_use
    8677:	72 00                                               r.

00008679 <network_mqtt_port>:
    8679:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 70 6f 72     network/mqtt_por
    8689:	74 00                                               t.

0000868b <network_mqtt_host>:
    868b:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 68 6f 73     network/mqtt_hos
    869b:	74 00                                               t.

0000869d <network_ntp>:
    869d:	6e 65 74 77 6f 72 6b 2f 6e 74 70 00                 network/ntp.

000086a9 <network_dns>:
    86a9:	6e 65 74 77 6f 72 6b 2f 64 6e 73 00                 network/dns.

000086b5 <network_gw>:
    86b5:	6e 65 74 77 6f 72 6b 2f 67 77 00                    network/gw.

000086c0 <network_netmask>:
    86c0:	6e 65 74 77 6f 72 6b 2f 6e 65 74 6d 61 73 6b 00     network/netmask.

000086d0 <network_mac>:
    86d0:	6e 65 74 77 6f 72 6b 2f 6d 61 63 00                 network/mac.

000086dc <status_know_devices>:
    86dc:	73 74 61 74 75 73 2f 6b 6e 6f 77 5f 64 65 76 69     status/know_devi
    86ec:	63 65 73 00                                         ces.

000086f0 <network_name>:
    86f0:	6e 65 74 77 6f 72 6b 2f 6e 61 6d 65 00              network/name.

000086fd <network_ip>:
    86fd:	6e 65 74 77 6f 72 6b 2f 69 70 00                    network/ip.

00008708 <status_mqtt_process>:
    8708:	73 74 61 74 75 73 2f 6d 71 74 74 2f 70 72 6f 63     status/mqtt/proc
    8718:	65 73 73 00                                         ess.

0000871c <status_mqtt_receive>:
    871c:	73 74 61 74 75 73 2f 6d 71 74 74 2f 72 65 63 65     status/mqtt/rece
    872c:	69 76 65 00                                         ive.

00008730 <status_mqtt_error>:
    8730:	73 74 61 74 75 73 2f 6d 71 74 74 2f 65 72 72 6f     status/mqtt/erro
    8740:	72 00                                               r.

00008742 <status_mqtt_send>:
    8742:	73 74 61 74 75 73 2f 6d 71 74 74 2f 73 65 6e 64     status/mqtt/send
	...

00008753 <lcd_font>:
    8753:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
    8763:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
    8773:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
    8783:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
    8793:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
    87a3:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
    87b3:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
    87c3:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
    87d3:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
    87e3:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
    87f3:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
    8803:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
    8813:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
    8823:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
    8833:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
    8843:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
    8853:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
    8863:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
    8873:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
    8883:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
    8893:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
    88a3:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
    88b3:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
    88c3:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
    88d3:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
    88e3:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
    88f3:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
    8903:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
    8913:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
    8923:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
    8933:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
    8943:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
    8953:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
    8963:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
    8973:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
    8983:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
    8993:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
    89a3:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
    89b3:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
    89c3:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
    89d3:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
    89e3:	55 55 79 41 21 54 54 78 41 21 55 54 78 40 20 54     UUyA!TTxA!UTx@ T
    89f3:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
    8a03:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
    8a13:	42 00 01 45 7c 40 f0 29 24 29 f0 f0 28 25 28 f0     B..E|@.)$)..(%(.
    8a23:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
    8a33:	49 49 49 32 32 48 48 48 32 32 4a 48 48 30 3a 41     III22HHH22JHH0:A
    8a43:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 39 44 44     A!z:B@ x....}9DD
    8a53:	44 39 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     D9=@@@=<$.$$H~IC
    8a63:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
    8a73:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
    8a83:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
    8a93:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
    8aa3:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
    8ab3:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
    8ac3:	aa 00 55 00 aa aa 55 aa 55 aa 00 00 00 ff 00 10     ..U...U.U.......
    8ad3:	10 10 ff 00 14 14 14 ff 00 10 10 ff 00 ff 10 10     ................
    8ae3:	f0 10 f0 14 14 14 fc 00 14 14 f7 00 ff 00 00 ff     ................
    8af3:	00 ff 14 14 f4 04 fc 14 14 17 10 1f 10 10 1f 10     ................
    8b03:	1f 14 14 14 1f 00 10 10 10 f0 00 00 00 00 1f 10     ................
    8b13:	10 10 10 1f 10 10 10 10 f0 10 00 00 00 ff 10 10     ................
    8b23:	10 10 10 10 10 10 10 ff 10 00 00 00 ff 14 00 00     ................
    8b33:	ff 00 ff 00 00 1f 10 17 00 00 fc 04 f4 14 14 17     ................
    8b43:	10 17 14 14 f4 04 f4 00 00 ff 00 f7 14 14 14 14     ................
    8b53:	14 14 14 f7 00 f7 14 14 14 17 14 10 10 1f 10 1f     ................
    8b63:	14 14 14 f4 14 10 10 f0 10 f0 00 00 1f 10 1f 00     ................
    8b73:	00 00 1f 14 00 00 00 fc 14 00 00 f0 10 f0 10 10     ................
    8b83:	ff 10 ff 14 14 14 ff 14 10 10 10 1f 00 00 00 00     ................
    8b93:	f0 10 ff ff ff ff ff f0 f0 f0 f0 f0 ff ff ff 00     ................
    8ba3:	00 00 00 00 ff ff 0f 0f 0f 0f 0f 38 44 44 38 44     ...........8DD8D
    8bb3:	7c 2a 2a 3e 14 7e 02 02 06 06 02 7e 02 7e 02 63     |**>.~.....~.~.c
    8bc3:	55 49 41 63 38 44 44 3c 04 40 7e 20 1e 20 06 02     UIAc8DD<.@~ . ..
    8bd3:	7e 02 02 99 a5 e7 a5 99 1c 2a 49 2a 1c 4c 72 01     ~........*I*.Lr.
    8be3:	72 4c 30 4a 4d 4d 30 30 48 78 48 30 bc 62 5a 46     rL0JMM00HxH0.bZF
    8bf3:	3d 3e 49 49 49 00 7e 01 01 01 7e 2a 2a 2a 2a 2a     =>III.~...~*****
    8c03:	44 44 5f 44 44 40 51 4a 44 40 40 44 4a 51 40 00     DD_DD@QJD@@DJQ@.
    8c13:	00 ff 01 03 e0 80 ff 00 00 08 08 6b 6b 08 36 12     ...........kk.6.
    8c23:	36 24 36 06 0f 09 0f 06 00 00 18 18 00 00 00 10     6$6.............
    8c33:	10 00 30 40 ff 01 01 00 1f 01 01 1e 00 19 1d 17     ..0@............
    8c43:	12 00 3c 3c 3c 3c 00 00 00 00 00                    ..<<<<.....

00008c4e <LCDWIKI_KBV::start(unsigned int)::ST7796S_regValues>:
    8c4e:	f0 01 c3 f0 01 96 36 01 68 3a 01 05 b0 01 80 53     ......6.h:.....S
    8c5e:	01 2c 51 01 14 b6 02 20 02 b5 04 02 03 00 04 b1     .,Q.... ........
    8c6e:	02 80 10 b4 01 00 b7 01 c6 c5 01 24 e4 01 31 e8     ...........$..1.
    8c7e:	08 40 8a 00 00 29 19 a5 33 c2 00 a7 00 e0 0e f0     .@...)..3.......
    8c8e:	09 13 12 12 2b 3c 44 4b 1b 18 17 1d 21 e1 0e f0     ....+<DK....!...
    8c9e:	09 13 0c 0d 27 3b 44 4d 0b 17 17 1d 21 36 01 ec     ....';DM....!6..
    8cae:	f0 01 c3 f0 01 69 13 00 11 00 29 00                 .....i....).

00008cba <daysInMonth>:
    8cba:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e 1f                 ............

00008cc6 <child_payload_size>:
    8cc6:	11 12 13 14 15 16                                   ......

00008ccc <child_pipe>:
    8ccc:	0a 0b 0c 0d 0e 0f                                   ......

00008cd2 <child_pipe_enable>:
    8cd2:	00 01 02 03 04 05                                   ......

00008cd8 <_ZZN4RF2412printDetailsEvE3__c__12_>:
    8cd8:	50 41 20 50 6f 77 65 72 09 20 3d 20 25 53 0d 0a     PA Power. = %S..
	...

00008ce9 <_ZZN4RF2412printDetailsEvE3__c__11_>:
    8ce9:	43 52 43 20 4c 65 6e 67 74 68 09 20 3d 20 25 53     CRC Length. = %S
    8cf9:	0d 0a 00                                            ...

00008cfc <_ZZN4RF2412printDetailsEvE3__c__10_>:
    8cfc:	4d 6f 64 65 6c 09 09 20 3d 20 25 53 0d 0a 00        Model.. = %S...

00008d0b <RF24::printDetails()::__c>:
    8d0b:	44 61 74 61 20 52 61 74 65 09 20 3d 20 25 53 0d     Data Rate. = %S.
    8d1b:	0a 00                                               ..

00008d1d <RF24::printDetails()::__c>:
    8d1d:	44 59 4e 50 44 2f 46 45 41 54 55 52 45 00           DYNPD/FEATURE.

00008d2b <RF24::printDetails()::__c>:
    8d2b:	43 4f 4e 46 49 47 09 00                             CONFIG..

00008d33 <RF24::printDetails()::__c>:
    8d33:	52 46 5f 53 45 54 55 50 00                          RF_SETUP.

00008d3c <RF24::printDetails()::__c>:
    8d3c:	52 46 5f 43 48 09 00                                RF_CH..

00008d43 <RF24::printDetails()::__c>:
    8d43:	45 4e 5f 52 58 41 44 44 52 00                       EN_RXADDR.

00008d4d <RF24::printDetails()::__c>:
    8d4d:	45 4e 5f 41 41 09 00                                EN_AA..

00008d54 <RF24::printDetails()::__c>:
    8d54:	52 58 5f 50 57 5f 50 30 2d 36 00                    RX_PW_P0-6.

00008d5f <RF24::printDetails()::__c>:
    8d5f:	54 58 5f 41 44 44 52 09 00                          TX_ADDR..

00008d68 <RF24::printDetails()::__c>:
    8d68:	52 58 5f 41 44 44 52 5f 50 32 2d 35 00              RX_ADDR_P2-5.

00008d75 <RF24::printDetails()::__c>:
    8d75:	52 58 5f 41 44 44 52 5f 50 30 2d 31 00              RX_ADDR_P0-1.

00008d82 <rf24_pa_dbm_e_str_P>:
    8d82:	a0 8d 99 8d 91 8d 8a 8d                             ........

00008d8a <rf24_pa_dbm_e_str_3>:
    8d8a:	50 41 5f 4d 41 58 00                                PA_MAX.

00008d91 <rf24_pa_dbm_e_str_2>:
    8d91:	50 41 5f 48 49 47 48 00                             PA_HIGH.

00008d99 <rf24_pa_dbm_e_str_1>:
    8d99:	50 41 5f 4c 4f 57 00                                PA_LOW.

00008da0 <rf24_pa_dbm_e_str_0>:
    8da0:	50 41 5f 4d 49 4e 00                                PA_MIN.

00008da7 <rf24_crclength_e_str_P>:
    8da7:	bc 8d b5 8d ad 8d                                   ......

00008dad <rf24_crclength_e_str_2>:
    8dad:	31 36 20 62 69 74 73 00                             16 bits.

00008db5 <rf24_crclength_e_str_1>:
    8db5:	38 20 62 69 74 73 00                                8 bits.

00008dbc <rf24_crclength_e_str_0>:
    8dbc:	44 69 73 61 62 6c 65 64 00                          Disabled.

00008dc5 <rf24_model_e_str_P>:
    8dc5:	d3 8d c9 8d                                         ....

00008dc9 <rf24_model_e_str_1>:
    8dc9:	6e 52 46 32 34 4c 30 31 2b 00                       nRF24L01+.

00008dd3 <rf24_model_e_str_0>:
    8dd3:	6e 52 46 32 34 4c 30 31 00                          nRF24L01.

00008ddc <rf24_datarate_e_str_P>:
    8ddc:	f0 8d ea 8d e2 8d                                   ......

00008de2 <rf24_datarate_e_str_2>:
    8de2:	32 35 30 4b 42 50 53 00                             250KBPS.

00008dea <rf24_datarate_e_str_1>:
    8dea:	32 4d 42 50 53 00                                   2MBPS.

00008df0 <rf24_datarate_e_str_0>:
    8df0:	31 4d 42 50 53 00                                   1MBPS.

00008df6 <RF24::print_address_register(char const*, unsigned char, unsigned char)::__c>:
    8df6:	0d 0a 00                                            ...

00008df9 <RF24::print_address_register(char const*, unsigned char, unsigned char)::__c>:
    8df9:	25 30 32 78 00                                      %02x.

00008dfe <RF24::print_address_register(char const*, unsigned char, unsigned char)::__c>:
    8dfe:	20 30 78 00                                          0x.

00008e02 <RF24::print_address_register(char const*, unsigned char, unsigned char)::__c>:
    8e02:	25 53 09 20 3d 00                                   %S. =.

00008e08 <RF24::print_byte_register(char const*, unsigned char, unsigned char)::__c>:
    8e08:	0d 0a 00                                            ...

00008e0b <RF24::print_byte_register(char const*, unsigned char, unsigned char)::__c>:
    8e0b:	20 30 78 25 30 32 78 00                              0x%02x.

00008e13 <RF24::print_byte_register(char const*, unsigned char, unsigned char)::__c>:
    8e13:	25 53 09 20 3d 00                                   %S. =.

00008e19 <RF24::print_status(unsigned char)::__c>:
    8e19:	53 54 41 54 55 53 09 09 20 3d 20 30 78 25 30 32     STATUS.. = 0x%02
    8e29:	78 20 52 58 5f 44 52 3d 25 78 20 54 58 5f 44 53     x RX_DR=%x TX_DS
    8e39:	3d 25 78 20 4d 41 58 5f 52 54 3d 25 78 20 52 58     =%x MAX_RT=%x RX
    8e49:	5f 50 5f 4e 4f 3d 25 78 20 54 58 5f 46 55 4c 4c     _P_NO=%x TX_FULL
    8e59:	3d 25 78 0d 0a 00                                   =%x...

00008e5f <digital_pin_to_timer_PGM>:
    8e5f:	00 00 00 0a 0b 0c 00 00 00 00 00 00 08 04 05 06     ................
	...
    8e93:	00 03                                               ..

00008e95 <digital_pin_to_bit_mask_PGM>:
    8e95:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
    8ea5:	08 10 01 02 04 08 10 20 40 80 01 02 01 02 04 08     ....... @.......
    8eb5:	10 20 40 80 04 80 40 20 10 08 04 02 01 01 02 04     . @...@ ........
    8ec5:	08 10 20 40 80 20                                   .. @. 

00008ecb <digital_pin_to_port_PGM>:
    8ecb:	05 05 05 05 05 05 05 05 02 02 02 02 02 02 02 02     ................
    8edb:	07 07 04 04 04 04 04 04 04 04 07 07 03 03 03 03     ................
    8eeb:	03 03 03 03 07 01 01 01 01 01 01 01 01 06 06 06     ................
    8efb:	06 06 06 06 06 07                                   ......

00008f01 <port_to_input_PGM>:
    8f01:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.

00008f11 <port_to_output_PGM>:
    8f11:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.

00008f21 <port_to_mode_PGM>:
    8f21:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
	...

00008f32 <__ctors_start>:
__ctors_start():
    8f32:	06 9d       	mul	r16, r6
    8f34:	ec b0       	in	r14, 0x0c	; 12
    8f36:	10 b2       	in	r1, 0x10	; 16
    8f38:	8d bc       	out	0x2d, r8	; 45
    8f3a:	98 d6       	rcall	.+3376   	; 0x9c6c <helper_thermostat_button_activate_ring_onclick(unsigned int, unsigned int, unsigned char)+0x4>
    8f3c:	ed d6       	rcall	.+3546   	; 0x9d18 <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)+0xa6>
    8f3e:	17 da       	rcall	.-3026   	; 0x836e <text_associovat_tds+0x13>
    8f40:	25 dc       	rcall	.-1974   	; 0x878c <lcd_font+0x39>
    8f42:	bc dd       	rcall	.-1160   	; 0x8abc <lcd_font+0x369>
    8f44:	9f df       	rcall	.-194    	; 0x8e84 <digital_pin_to_timer_PGM+0x25>
    8f46:	aa df       	rcall	.-172    	; 0x8e9c <digital_pin_to_bit_mask_PGM+0x7>
    8f48:	02 e4       	ldi	r16, 0x42	; 66
    8f4a:	40 f3       	brcs	.-48     	; 0x8f1c <port_to_output_PGM+0xb>
    8f4c:	f0 00       	.word	0x00f0	; ????
    8f4e:	5a 01       	movw	r10, r20
    8f50:	1a 01       	movw	r2, r20

00008f52 <__ctors_end>:
__dtors_start():
    8f52:	cd 9d       	mul	r28, r13

00008f54 <__dtors_end>:
__dtors_end():
    8f54:	11 24       	eor	r1, r1
    8f56:	1f be       	out	0x3f, r1	; 63
    8f58:	cf ef       	ldi	r28, 0xFF	; 255
    8f5a:	d1 e2       	ldi	r29, 0x21	; 33
    8f5c:	de bf       	out	0x3e, r29	; 62
    8f5e:	cd bf       	out	0x3d, r28	; 61
    8f60:	00 e0       	ldi	r16, 0x00	; 0
    8f62:	0c bf       	out	0x3c, r16	; 60

00008f64 <__do_copy_data>:
__do_copy_data():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
    8f64:	19 e0       	ldi	r17, 0x09	; 9
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
    8f66:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
    8f68:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
    8f6a:	ec e2       	ldi	r30, 0x2C	; 44
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
    8f6c:	f5 e4       	ldi	r31, 0x45	; 69
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
    8f6e:	02 e0       	ldi	r16, 0x02	; 2
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
    8f70:	0b bf       	out	0x3b, r16	; 59
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
    8f72:	02 c0       	rjmp	.+4      	; 0x8f78 <__do_copy_data+0x14>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
    8f74:	07 90       	elpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
    8f76:	0d 92       	st	X+, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
    8f78:	ae 3d       	cpi	r26, 0xDE	; 222
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
    8f7a:	b1 07       	cpc	r27, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
    8f7c:	d9 f7       	brne	.-10     	; 0x8f74 <__do_copy_data+0x10>

00008f7e <__do_clear_bss>:
__do_clear_bss():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
    8f7e:	24 e1       	ldi	r18, 0x14	; 20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
    8f80:	ae ed       	ldi	r26, 0xDE	; 222
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
    8f82:	b9 e0       	ldi	r27, 0x09	; 9
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
    8f84:	01 c0       	rjmp	.+2      	; 0x8f88 <.do_clear_bss_start>

00008f86 <.do_clear_bss_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
    8f86:	1d 92       	st	X+, r1

00008f88 <.do_clear_bss_start>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
    8f88:	a3 31       	cpi	r26, 0x13	; 19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
    8f8a:	b2 07       	cpc	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
    8f8c:	e1 f7       	brne	.-8      	; 0x8f86 <.do_clear_bss_loop>

00008f8e <__do_global_ctors>:
__do_global_ctors():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
    8f8e:	17 e4       	ldi	r17, 0x47	; 71
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
    8f90:	c9 ea       	ldi	r28, 0xA9	; 169
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
    8f92:	d7 e4       	ldi	r29, 0x47	; 71
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2470
    8f94:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
    8f96:	06 c0       	rjmp	.+12     	; 0x8fa4 <__do_global_ctors+0x16>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
    8f98:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2476
    8f9a:	01 09       	sbc	r16, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2477
    8f9c:	80 2f       	mov	r24, r16
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
    8f9e:	fe 01       	movw	r30, r28
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
    8fa0:	0f 94 9e 16 	call	0x22d3c	; 0x22d3c <__tablejump2__>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
    8fa4:	c9 39       	cpi	r28, 0x99	; 153
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
    8fa6:	d1 07       	cpc	r29, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2486
    8fa8:	80 e0       	ldi	r24, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2487
    8faa:	08 07       	cpc	r16, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
    8fac:	a9 f7       	brne	.-22     	; 0x8f98 <__do_global_ctors+0xa>
    8fae:	0f 94 c8 13 	call	0x22790	; 0x22790 <main>
    8fb2:	0d 94 84 22 	jmp	0x24508	; 0x24508 <__do_global_dtors>

00008fb6 <__bad_interrupt>:
__vector_38():
    8fb6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00008fba <localtime>:
localtime():
    8fba:	6f ef       	ldi	r22, 0xFF	; 255
    8fbc:	73 e1       	ldi	r23, 0x13	; 19
    8fbe:	0e 94 e4 47 	call	0x8fc8	; 0x8fc8 <localtime_r>
    8fc2:	8f ef       	ldi	r24, 0xFF	; 255
    8fc4:	93 e1       	ldi	r25, 0x13	; 19
    8fc6:	08 95       	ret

00008fc8 <localtime_r>:
localtime_r():
    8fc8:	cf 92       	push	r12
    8fca:	df 92       	push	r13
    8fcc:	ef 92       	push	r14
    8fce:	ff 92       	push	r15
    8fd0:	0f 93       	push	r16
    8fd2:	1f 93       	push	r17
    8fd4:	cf 93       	push	r28
    8fd6:	df 93       	push	r29
    8fd8:	00 d0       	rcall	.+0      	; 0x8fda <localtime_r+0x12>
    8fda:	1f 92       	push	r1
    8fdc:	cd b7       	in	r28, 0x3d	; 61
    8fde:	de b7       	in	r29, 0x3e	; 62
    8fe0:	6c 01       	movw	r12, r24
    8fe2:	7b 01       	movw	r14, r22
    8fe4:	e0 91 11 14 	lds	r30, 0x1411	; 0x801411 <__dst_ptr>
    8fe8:	f0 91 12 14 	lds	r31, 0x1412	; 0x801412 <__dst_ptr+0x1>
    8fec:	0f ef       	ldi	r16, 0xFF	; 255
    8fee:	1f ef       	ldi	r17, 0xFF	; 255
    8ff0:	30 97       	sbiw	r30, 0x00	; 0
    8ff2:	21 f0       	breq	.+8      	; 0x8ffc <localtime_r+0x34>
    8ff4:	6b e0       	ldi	r22, 0x0B	; 11
    8ff6:	74 e1       	ldi	r23, 0x14	; 20
    8ff8:	19 95       	eicall
    8ffa:	8c 01       	movw	r16, r24
    8ffc:	f6 01       	movw	r30, r12
    8ffe:	80 81       	ld	r24, Z
    9000:	91 81       	ldd	r25, Z+1	; 0x01
    9002:	a2 81       	ldd	r26, Z+2	; 0x02
    9004:	b3 81       	ldd	r27, Z+3	; 0x03
    9006:	40 91 0b 14 	lds	r20, 0x140B	; 0x80140b <__utc_offset>
    900a:	50 91 0c 14 	lds	r21, 0x140C	; 0x80140c <__utc_offset+0x1>
    900e:	60 91 0d 14 	lds	r22, 0x140D	; 0x80140d <__utc_offset+0x2>
    9012:	70 91 0e 14 	lds	r23, 0x140E	; 0x80140e <__utc_offset+0x3>
    9016:	84 0f       	add	r24, r20
    9018:	95 1f       	adc	r25, r21
    901a:	a6 1f       	adc	r26, r22
    901c:	b7 1f       	adc	r27, r23
    901e:	10 16       	cp	r1, r16
    9020:	11 06       	cpc	r1, r17
    9022:	cc f0       	brlt	.+50     	; 0x9056 <localtime_r+0x8e>
    9024:	89 83       	std	Y+1, r24	; 0x01
    9026:	9a 83       	std	Y+2, r25	; 0x02
    9028:	ab 83       	std	Y+3, r26	; 0x03
    902a:	bc 83       	std	Y+4, r27	; 0x04
    902c:	b7 01       	movw	r22, r14
    902e:	ce 01       	movw	r24, r28
    9030:	01 96       	adiw	r24, 0x01	; 1
    9032:	0e 94 35 48 	call	0x906a	; 0x906a <gmtime_r>
    9036:	f7 01       	movw	r30, r14
    9038:	13 87       	std	Z+11, r17	; 0x0b
    903a:	02 87       	std	Z+10, r16	; 0x0a
    903c:	0f 90       	pop	r0
    903e:	0f 90       	pop	r0
    9040:	0f 90       	pop	r0
    9042:	0f 90       	pop	r0
    9044:	df 91       	pop	r29
    9046:	cf 91       	pop	r28
    9048:	1f 91       	pop	r17
    904a:	0f 91       	pop	r16
    904c:	ff 90       	pop	r15
    904e:	ef 90       	pop	r14
    9050:	df 90       	pop	r13
    9052:	cf 90       	pop	r12
    9054:	08 95       	ret
    9056:	a8 01       	movw	r20, r16
    9058:	01 2e       	mov	r0, r17
    905a:	00 0c       	add	r0, r0
    905c:	66 0b       	sbc	r22, r22
    905e:	77 0b       	sbc	r23, r23
    9060:	84 0f       	add	r24, r20
    9062:	95 1f       	adc	r25, r21
    9064:	a6 1f       	adc	r26, r22
    9066:	b7 1f       	adc	r27, r23
    9068:	dd cf       	rjmp	.-70     	; 0x9024 <localtime_r+0x5c>

0000906a <gmtime_r>:
gmtime_r():
    906a:	cf 92       	push	r12
    906c:	df 92       	push	r13
    906e:	ef 92       	push	r14
    9070:	ff 92       	push	r15
    9072:	0f 93       	push	r16
    9074:	1f 93       	push	r17
    9076:	cf 93       	push	r28
    9078:	df 93       	push	r29
    907a:	00 d0       	rcall	.+0      	; 0x907c <gmtime_r+0x12>
    907c:	00 d0       	rcall	.+0      	; 0x907e <gmtime_r+0x14>
    907e:	1f 92       	push	r1
    9080:	1f 92       	push	r1
    9082:	cd b7       	in	r28, 0x3d	; 61
    9084:	de b7       	in	r29, 0x3e	; 62
    9086:	8b 01       	movw	r16, r22
    9088:	fc 01       	movw	r30, r24
    908a:	60 81       	ld	r22, Z
    908c:	71 81       	ldd	r23, Z+1	; 0x01
    908e:	82 81       	ldd	r24, Z+2	; 0x02
    9090:	93 81       	ldd	r25, Z+3	; 0x03
    9092:	20 e8       	ldi	r18, 0x80	; 128
    9094:	31 e5       	ldi	r19, 0x51	; 81
    9096:	41 e0       	ldi	r20, 0x01	; 1
    9098:	50 e0       	ldi	r21, 0x00	; 0
    909a:	0f 94 5d 16 	call	0x22cba	; 0x22cba <__udivmodsi4>
    909e:	69 01       	movw	r12, r18
    90a0:	7a 01       	movw	r14, r20
    90a2:	2c e3       	ldi	r18, 0x3C	; 60
    90a4:	30 e0       	ldi	r19, 0x00	; 0
    90a6:	40 e0       	ldi	r20, 0x00	; 0
    90a8:	50 e0       	ldi	r21, 0x00	; 0
    90aa:	0f 94 7f 16 	call	0x22cfe	; 0x22cfe <__divmodsi4>
    90ae:	29 83       	std	Y+1, r18	; 0x01
    90b0:	3a 83       	std	Y+2, r19	; 0x02
    90b2:	4b 83       	std	Y+3, r20	; 0x03
    90b4:	5c 83       	std	Y+4, r21	; 0x04
    90b6:	89 81       	ldd	r24, Y+1	; 0x01
    90b8:	9a 81       	ldd	r25, Y+2	; 0x02
    90ba:	ab 81       	ldd	r26, Y+3	; 0x03
    90bc:	bc 81       	ldd	r27, Y+4	; 0x04
    90be:	f8 01       	movw	r30, r16
    90c0:	60 83       	st	Z, r22
    90c2:	6c e3       	ldi	r22, 0x3C	; 60
    90c4:	70 e0       	ldi	r23, 0x00	; 0
    90c6:	0f 94 49 16 	call	0x22c92	; 0x22c92 <__divmodhi4>
    90ca:	dc 01       	movw	r26, r24
    90cc:	f8 01       	movw	r30, r16
    90ce:	a1 83       	std	Z+1, r26	; 0x01
    90d0:	62 83       	std	Z+2, r22	; 0x02
    90d2:	c6 01       	movw	r24, r12
    90d4:	06 96       	adiw	r24, 0x06	; 6
    90d6:	67 e0       	ldi	r22, 0x07	; 7
    90d8:	70 e0       	ldi	r23, 0x00	; 0
    90da:	0f 94 35 16 	call	0x22c6a	; 0x22c6a <__udivmodhi4>
    90de:	84 83       	std	Z+4, r24	; 0x04
    90e0:	2d ea       	ldi	r18, 0xAD	; 173
    90e2:	3e e8       	ldi	r19, 0x8E	; 142
    90e4:	40 e0       	ldi	r20, 0x00	; 0
    90e6:	50 e0       	ldi	r21, 0x00	; 0
    90e8:	c7 01       	movw	r24, r14
    90ea:	b6 01       	movw	r22, r12
    90ec:	0f 94 7f 16 	call	0x22cfe	; 0x22cfe <__divmodsi4>
    90f0:	29 83       	std	Y+1, r18	; 0x01
    90f2:	3a 83       	std	Y+2, r19	; 0x02
    90f4:	6d 83       	std	Y+5, r22	; 0x05
    90f6:	7e 83       	std	Y+6, r23	; 0x06
    90f8:	8f 83       	std	Y+7, r24	; 0x07
    90fa:	98 87       	std	Y+8, r25	; 0x08
    90fc:	89 81       	ldd	r24, Y+1	; 0x01
    90fe:	9a 81       	ldd	r25, Y+2	; 0x02
    9100:	24 e6       	ldi	r18, 0x64	; 100
    9102:	28 9f       	mul	r18, r24
    9104:	60 01       	movw	r12, r0
    9106:	29 9f       	mul	r18, r25
    9108:	d0 0c       	add	r13, r0
    910a:	11 24       	eor	r1, r1
    910c:	6d 81       	ldd	r22, Y+5	; 0x05
    910e:	7e 81       	ldd	r23, Y+6	; 0x06
    9110:	8f 81       	ldd	r24, Y+7	; 0x07
    9112:	98 85       	ldd	r25, Y+8	; 0x08
    9114:	25 eb       	ldi	r18, 0xB5	; 181
    9116:	35 e0       	ldi	r19, 0x05	; 5
    9118:	40 e0       	ldi	r20, 0x00	; 0
    911a:	50 e0       	ldi	r21, 0x00	; 0
    911c:	0f 94 7f 16 	call	0x22cfe	; 0x22cfe <__divmodsi4>
    9120:	29 83       	std	Y+1, r18	; 0x01
    9122:	3a 83       	std	Y+2, r19	; 0x02
    9124:	6d 83       	std	Y+5, r22	; 0x05
    9126:	7e 83       	std	Y+6, r23	; 0x06
    9128:	e9 80       	ldd	r14, Y+1	; 0x01
    912a:	fa 80       	ldd	r15, Y+2	; 0x02
    912c:	ee 0c       	add	r14, r14
    912e:	ff 1c       	adc	r15, r15
    9130:	ee 0c       	add	r14, r14
    9132:	ff 1c       	adc	r15, r15
    9134:	ec 0c       	add	r14, r12
    9136:	fd 1c       	adc	r15, r13
    9138:	8d 81       	ldd	r24, Y+5	; 0x05
    913a:	9e 81       	ldd	r25, Y+6	; 0x06
    913c:	f5 e6       	ldi	r31, 0x65	; 101
    913e:	ef 16       	cp	r14, r31
    9140:	f1 04       	cpc	r15, r1
    9142:	08 f4       	brcc	.+2      	; 0x9146 <gmtime_r+0xdc>
    9144:	3f c0       	rjmp	.+126    	; 0x91c4 <gmtime_r+0x15a>
    9146:	01 96       	adiw	r24, 0x01	; 1
    9148:	21 e0       	ldi	r18, 0x01	; 1
    914a:	30 e0       	ldi	r19, 0x00	; 0
    914c:	a9 01       	movw	r20, r18
    914e:	44 59       	subi	r20, 0x94	; 148
    9150:	5e 4f       	sbci	r21, 0xFE	; 254
    9152:	48 17       	cp	r20, r24
    9154:	59 07       	cpc	r21, r25
    9156:	60 f4       	brcc	.+24     	; 0x9170 <gmtime_r+0x106>
    9158:	6d e6       	ldi	r22, 0x6D	; 109
    915a:	71 e0       	ldi	r23, 0x01	; 1
    915c:	82 1b       	sub	r24, r18
    915e:	93 0b       	sbc	r25, r19
    9160:	0f 94 49 16 	call	0x22c92	; 0x22c92 <__divmodhi4>
    9164:	dc 01       	movw	r26, r24
    9166:	e6 0e       	add	r14, r22
    9168:	f7 1e       	adc	r15, r23
    916a:	cd 01       	movw	r24, r26
    916c:	30 e0       	ldi	r19, 0x00	; 0
    916e:	20 e0       	ldi	r18, 0x00	; 0
    9170:	44 e6       	ldi	r20, 0x64	; 100
    9172:	e4 0e       	add	r14, r20
    9174:	f1 1c       	adc	r15, r1
    9176:	f8 01       	movw	r30, r16
    9178:	f7 82       	std	Z+7, r15	; 0x07
    917a:	e6 82       	std	Z+6, r14	; 0x06
    917c:	91 87       	std	Z+9, r25	; 0x09
    917e:	80 87       	std	Z+8, r24	; 0x08
    9180:	25 5c       	subi	r18, 0xC5	; 197
    9182:	3f 4f       	sbci	r19, 0xFF	; 255
    9184:	82 17       	cp	r24, r18
    9186:	93 07       	cpc	r25, r19
    9188:	38 f5       	brcc	.+78     	; 0x91d8 <gmtime_r+0x16e>
    918a:	6f e1       	ldi	r22, 0x1F	; 31
    918c:	70 e0       	ldi	r23, 0x00	; 0
    918e:	0f 94 49 16 	call	0x22c92	; 0x22c92 <__divmodhi4>
    9192:	dc 01       	movw	r26, r24
    9194:	f8 01       	movw	r30, r16
    9196:	65 83       	std	Z+5, r22	; 0x05
    9198:	a3 83       	std	Z+3, r26	; 0x03
    919a:	f8 01       	movw	r30, r16
    919c:	13 86       	std	Z+11, r1	; 0x0b
    919e:	12 86       	std	Z+10, r1	; 0x0a
    91a0:	83 81       	ldd	r24, Z+3	; 0x03
    91a2:	8f 5f       	subi	r24, 0xFF	; 255
    91a4:	83 83       	std	Z+3, r24	; 0x03
    91a6:	28 96       	adiw	r28, 0x08	; 8
    91a8:	0f b6       	in	r0, 0x3f	; 63
    91aa:	f8 94       	cli
    91ac:	de bf       	out	0x3e, r29	; 62
    91ae:	0f be       	out	0x3f, r0	; 63
    91b0:	cd bf       	out	0x3d, r28	; 61
    91b2:	df 91       	pop	r29
    91b4:	cf 91       	pop	r28
    91b6:	1f 91       	pop	r17
    91b8:	0f 91       	pop	r16
    91ba:	ff 90       	pop	r15
    91bc:	ef 90       	pop	r14
    91be:	df 90       	pop	r13
    91c0:	cf 90       	pop	r12
    91c2:	08 95       	ret
    91c4:	51 e0       	ldi	r21, 0x01	; 1
    91c6:	40 e0       	ldi	r20, 0x00	; 0
    91c8:	24 e6       	ldi	r18, 0x64	; 100
    91ca:	e2 16       	cp	r14, r18
    91cc:	f1 04       	cpc	r15, r1
    91ce:	09 f4       	brne	.+2      	; 0x91d2 <gmtime_r+0x168>
    91d0:	50 e0       	ldi	r21, 0x00	; 0
    91d2:	25 2f       	mov	r18, r21
    91d4:	34 2f       	mov	r19, r20
    91d6:	ba cf       	rjmp	.-140    	; 0x914c <gmtime_r+0xe2>
    91d8:	69 e9       	ldi	r22, 0x99	; 153
    91da:	70 e0       	ldi	r23, 0x00	; 0
    91dc:	82 1b       	sub	r24, r18
    91de:	93 0b       	sbc	r25, r19
    91e0:	0f 94 49 16 	call	0x22c92	; 0x22c92 <__divmodhi4>
    91e4:	dc 01       	movw	r26, r24
    91e6:	26 2f       	mov	r18, r22
    91e8:	22 0f       	add	r18, r18
    91ea:	22 0f       	add	r18, r18
    91ec:	f2 2e       	mov	r15, r18
    91ee:	f6 0e       	add	r15, r22
    91f0:	6d e3       	ldi	r22, 0x3D	; 61
    91f2:	70 e0       	ldi	r23, 0x00	; 0
    91f4:	cd 01       	movw	r24, r26
    91f6:	0f 94 49 16 	call	0x22c92	; 0x22c92 <__divmodhi4>
    91fa:	dc 01       	movw	r26, r24
    91fc:	e6 2e       	mov	r14, r22
    91fe:	ee 0c       	add	r14, r14
    9200:	6f e1       	ldi	r22, 0x1F	; 31
    9202:	70 e0       	ldi	r23, 0x00	; 0
    9204:	cd 01       	movw	r24, r26
    9206:	0f 94 49 16 	call	0x22c92	; 0x22c92 <__divmodhi4>
    920a:	dc 01       	movw	r26, r24
    920c:	22 e0       	ldi	r18, 0x02	; 2
    920e:	26 0f       	add	r18, r22
    9210:	2f 0d       	add	r18, r15
    9212:	2e 0d       	add	r18, r14
    9214:	f8 01       	movw	r30, r16
    9216:	25 83       	std	Z+5, r18	; 0x05
    9218:	bf cf       	rjmp	.-130    	; 0x9198 <gmtime_r+0x12e>

0000921a <ArduinoJson::Internals::StaticMemoryPoolBase::alloc(unsigned int)>:
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5allocEj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5416

void button_click_nastaveni_ring_screen(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (default_ring != NO_DEFAULT_RING)
    MenuHistoryNextMenu(args1, default_ring, 0);
}
    921a:	fc 01       	movw	r30, r24
_ZNK11ArduinoJson9Internals20StaticMemoryPoolBase8canAllocEj():
    921c:	86 81       	ldd	r24, Z+6	; 0x06
    921e:	97 81       	ldd	r25, Z+7	; 0x07
    9220:	68 0f       	add	r22, r24
    9222:	79 1f       	adc	r23, r25
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5allocEj():
    9224:	24 81       	ldd	r18, Z+4	; 0x04
    9226:	35 81       	ldd	r19, Z+5	; 0x05
    9228:	26 17       	cp	r18, r22
    922a:	37 07       	cpc	r19, r23
    922c:	38 f0       	brcs	.+14     	; 0x923c <ArduinoJson::Internals::StaticMemoryPoolBase::alloc(unsigned int)+0x22>
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase7doAllocEj():
    922e:	22 81       	ldd	r18, Z+2	; 0x02
    9230:	33 81       	ldd	r19, Z+3	; 0x03
    9232:	82 0f       	add	r24, r18
    9234:	93 1f       	adc	r25, r19
    9236:	77 83       	std	Z+7, r23	; 0x07
    9238:	66 83       	std	Z+6, r22	; 0x06
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5allocEj():
    923a:	08 95       	ret
    923c:	90 e0       	ldi	r25, 0x00	; 0
    923e:	80 e0       	ldi	r24, 0x00	; 0
    9240:	08 95       	ret

00009242 <returnnullfceargs(unsigned int, unsigned int, unsigned char)>:
_Z17returnnullfceargsjjh():
    9242:	80 e0       	ldi	r24, 0x00	; 0
    9244:	08 95       	ret

00009246 <display_enable_show(unsigned int, unsigned int, unsigned char)>:
_Z19display_enable_showjjh():
    9246:	81 e0       	ldi	r24, 0x01	; 1
    9248:	08 95       	ret

0000924a <get_function_keyboard_number_max_keys(unsigned int, unsigned int, unsigned char)>:
_Z37get_function_keyboard_number_max_keysjjh():
    924a:	8c e0       	ldi	r24, 0x0C	; 12
    924c:	08 95       	ret

0000924e <get_function_keyboard_number_char(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z33get_function_keyboard_number_charhhhPcS_():
    924e:	0f 93       	push	r16
    9250:	1f 93       	push	r17
    9252:	f9 01       	movw	r30, r18
    9254:	8a 30       	cpi	r24, 0x0A	; 10
    9256:	39 f4       	brne	.+14     	; 0x9266 <get_function_keyboard_number_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x18>
    9258:	8e e2       	ldi	r24, 0x2E	; 46
    925a:	80 83       	st	Z, r24
    925c:	f8 01       	movw	r30, r16
    925e:	10 82       	st	Z, r1
    9260:	1f 91       	pop	r17
    9262:	0f 91       	pop	r16
    9264:	08 95       	ret
    9266:	8b 30       	cpi	r24, 0x0B	; 11
    9268:	11 f0       	breq	.+4      	; 0x926e <get_function_keyboard_number_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x20>
    926a:	80 5d       	subi	r24, 0xD0	; 208
    926c:	f6 cf       	rjmp	.-20     	; 0x925a <get_function_keyboard_number_char(unsigned char, unsigned char, unsigned char, char*, char*)+0xc>
    926e:	8a e3       	ldi	r24, 0x3A	; 58
    9270:	f4 cf       	rjmp	.-24     	; 0x925a <get_function_keyboard_number_char(unsigned char, unsigned char, unsigned char, char*, char*)+0xc>

00009272 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z31get_function_keyboard_alfa_charhhhPcS_():
    9272:	0f 93       	push	r16
    9274:	1f 93       	push	r17
    9276:	90 91 80 0a 	lds	r25, 0x0A80	; 0x800a80 <dialog_set_string_keyboard_type>
    927a:	91 11       	cpse	r25, r1
    927c:	0c c0       	rjmp	.+24     	; 0x9296 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x24>
    927e:	e8 2f       	mov	r30, r24
    9280:	f0 e0       	ldi	r31, 0x00	; 0
    9282:	e2 50       	subi	r30, 0x02	; 2
    9284:	ff 47       	sbci	r31, 0x7F	; 127
    9286:	e4 91       	lpm	r30, Z
    9288:	d9 01       	movw	r26, r18
    928a:	ec 93       	st	X, r30
    928c:	f8 01       	movw	r30, r16
    928e:	10 82       	st	Z, r1
    9290:	1f 91       	pop	r17
    9292:	0f 91       	pop	r16
    9294:	08 95       	ret
    9296:	91 30       	cpi	r25, 0x01	; 1
    9298:	29 f4       	brne	.+10     	; 0x92a4 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x32>
    929a:	e8 2f       	mov	r30, r24
    929c:	f0 e0       	ldi	r31, 0x00	; 0
    929e:	ec 51       	subi	r30, 0x1C	; 28
    92a0:	ff 47       	sbci	r31, 0x7F	; 127
    92a2:	f1 cf       	rjmp	.-30     	; 0x9286 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x14>
    92a4:	92 30       	cpi	r25, 0x02	; 2
    92a6:	81 f7       	brne	.-32     	; 0x9288 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x16>
    92a8:	e8 2f       	mov	r30, r24
    92aa:	f0 e0       	ldi	r31, 0x00	; 0
    92ac:	e6 53       	subi	r30, 0x36	; 54
    92ae:	ff 47       	sbci	r31, 0x7F	; 127
    92b0:	ea cf       	rjmp	.-44     	; 0x9286 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x14>

000092b2 <get_function_keyboard_alfa_max_keys(unsigned int, unsigned int, unsigned char)>:
_Z35get_function_keyboard_alfa_max_keysjjh():
    92b2:	80 91 80 0a 	lds	r24, 0x0A80	; 0x800a80 <dialog_set_string_keyboard_type>
    92b6:	83 30       	cpi	r24, 0x03	; 3
    92b8:	08 f0       	brcs	.+2      	; 0x92bc <get_function_keyboard_alfa_max_keys(unsigned int, unsigned int, unsigned char)+0xa>
    92ba:	08 95       	ret
    92bc:	8a e1       	ldi	r24, 0x1A	; 26
    92be:	08 95       	ret

000092c0 <click_keyboard_type(unsigned int, unsigned int, unsigned char)>:
_Z19click_keyboard_typejjh():
    92c0:	80 93 80 0a 	sts	0x0A80, r24	; 0x800a80 <dialog_set_string_keyboard_type>
    92c4:	08 95       	ret

000092c6 <menu_redraw_time05s(unsigned int, unsigned int, unsigned char)>:
_Z19menu_redraw_time05sjjh():
    92c6:	90 91 18 0f 	lds	r25, 0x0F18	; 0x800f18 <now+0x3>
    92ca:	80 91 19 0f 	lds	r24, 0x0F19	; 0x800f19 <now+0x4>
    92ce:	20 91 10 0f 	lds	r18, 0x0F10	; 0x800f10 <last_time_hour>
    92d2:	29 13       	cpse	r18, r25
    92d4:	04 c0       	rjmp	.+8      	; 0x92de <menu_redraw_time05s(unsigned int, unsigned int, unsigned char)+0x18>
    92d6:	20 91 0f 0f 	lds	r18, 0x0F0F	; 0x800f0f <last_time_minute>
    92da:	28 17       	cp	r18, r24
    92dc:	31 f0       	breq	.+12     	; 0x92ea <menu_redraw_time05s(unsigned int, unsigned int, unsigned char)+0x24>
    92de:	90 93 10 0f 	sts	0x0F10, r25	; 0x800f10 <last_time_hour>
    92e2:	80 93 0f 0f 	sts	0x0F0F, r24	; 0x800f0f <last_time_minute>
    92e6:	81 e0       	ldi	r24, 0x01	; 1
    92e8:	08 95       	ret
    92ea:	80 e0       	ldi	r24, 0x00	; 0
    92ec:	08 95       	ret

000092ee <menu_redraw_change_term_mode(unsigned int, unsigned int, unsigned char)>:
_Z28menu_redraw_change_term_modejjh():
    92ee:	80 91 79 0a 	lds	r24, 0x0A79	; 0x800a79 <change_term_mode>
    92f2:	81 30       	cpi	r24, 0x01	; 1
    92f4:	19 f4       	brne	.+6      	; 0x92fc <menu_redraw_change_term_mode(unsigned int, unsigned int, unsigned char)+0xe>
    92f6:	10 92 79 0a 	sts	0x0A79, r1	; 0x800a79 <change_term_mode>
    92fa:	08 95       	ret
    92fc:	80 e0       	ldi	r24, 0x00	; 0
    92fe:	08 95       	ret

00009300 <menu_redraw_change_term_mode_cool_heat(unsigned int, unsigned int, unsigned char)>:
_Z38menu_redraw_change_term_mode_cool_heatjjh():
    9300:	80 91 79 0a 	lds	r24, 0x0A79	; 0x800a79 <change_term_mode>
    9304:	82 30       	cpi	r24, 0x02	; 2
    9306:	21 f4       	brne	.+8      	; 0x9310 <menu_redraw_change_term_mode_cool_heat(unsigned int, unsigned int, unsigned char)+0x10>
    9308:	10 92 79 0a 	sts	0x0A79, r1	; 0x800a79 <change_term_mode>
    930c:	81 e0       	ldi	r24, 0x01	; 1
    930e:	08 95       	ret
    9310:	80 e0       	ldi	r24, 0x00	; 0
    9312:	08 95       	ret

00009314 <menu_redraw_change_term_input(unsigned int, unsigned int, unsigned char)>:
_Z29menu_redraw_change_term_inputjjh():
    9314:	80 91 79 0a 	lds	r24, 0x0A79	; 0x800a79 <change_term_mode>
    9318:	84 30       	cpi	r24, 0x04	; 4
    931a:	21 f4       	brne	.+8      	; 0x9324 <menu_redraw_change_term_input(unsigned int, unsigned int, unsigned char)+0x10>
    931c:	10 92 79 0a 	sts	0x0A79, r1	; 0x800a79 <change_term_mode>
    9320:	81 e0       	ldi	r24, 0x01	; 1
    9322:	08 95       	ret
    9324:	80 e0       	ldi	r24, 0x00	; 0
    9326:	08 95       	ret

00009328 <menu_redraw_update_temp(unsigned int, unsigned int, unsigned char)>:
_Z23menu_redraw_update_tempjjh():
    9328:	80 91 7a 0a 	lds	r24, 0x0A7A	; 0x800a7a <menu_redraw10s>
    932c:	81 30       	cpi	r24, 0x01	; 1
    932e:	19 f4       	brne	.+6      	; 0x9336 <menu_redraw_update_temp(unsigned int, unsigned int, unsigned char)+0xe>
    9330:	10 92 7a 0a 	sts	0x0A7A, r1	; 0x800a7a <menu_redraw10s>
    9334:	08 95       	ret
    9336:	80 e0       	ldi	r24, 0x00	; 0
    9338:	08 95       	ret

0000933a <menu_redraw_date(unsigned int, unsigned int, unsigned char)>:
_ZNK8DateTime4yearEv():
    933a:	80 91 15 0f 	lds	r24, 0x0F15	; 0x800f15 <now>
    933e:	90 e0       	ldi	r25, 0x00	; 0
    9340:	80 53       	subi	r24, 0x30	; 48
    9342:	98 4f       	sbci	r25, 0xF8	; 248
    9344:	30 91 16 0f 	lds	r19, 0x0F16	; 0x800f16 <now+0x1>
    9348:	20 91 17 0f 	lds	r18, 0x0F17	; 0x800f17 <now+0x2>
_Z16menu_redraw_datejjh():
    934c:	40 91 13 0f 	lds	r20, 0x0F13	; 0x800f13 <last_year>
    9350:	50 91 14 0f 	lds	r21, 0x0F14	; 0x800f14 <last_year+0x1>
    9354:	48 17       	cp	r20, r24
    9356:	59 07       	cpc	r21, r25
    9358:	61 f4       	brne	.+24     	; 0x9372 <menu_redraw_date(unsigned int, unsigned int, unsigned char)+0x38>
    935a:	40 91 12 0f 	lds	r20, 0x0F12	; 0x800f12 <last_month>
    935e:	43 13       	cpse	r20, r19
    9360:	08 c0       	rjmp	.+16     	; 0x9372 <menu_redraw_date(unsigned int, unsigned int, unsigned char)+0x38>
    9362:	40 91 11 0f 	lds	r20, 0x0F11	; 0x800f11 <last_day>
    9366:	42 13       	cpse	r20, r18
    9368:	04 c0       	rjmp	.+8      	; 0x9372 <menu_redraw_date(unsigned int, unsigned int, unsigned char)+0x38>
    936a:	40 91 0e 0f 	lds	r20, 0x0F0E	; 0x800f0e <display_update_date>
    936e:	41 30       	cpi	r20, 0x01	; 1
    9370:	61 f4       	brne	.+24     	; 0x938a <menu_redraw_date(unsigned int, unsigned int, unsigned char)+0x50>
    9372:	10 92 0e 0f 	sts	0x0F0E, r1	; 0x800f0e <display_update_date>
    9376:	90 93 14 0f 	sts	0x0F14, r25	; 0x800f14 <last_year+0x1>
    937a:	80 93 13 0f 	sts	0x0F13, r24	; 0x800f13 <last_year>
    937e:	30 93 12 0f 	sts	0x0F12, r19	; 0x800f12 <last_month>
    9382:	20 93 11 0f 	sts	0x0F11, r18	; 0x800f11 <last_day>
    9386:	81 e0       	ldi	r24, 0x01	; 1
    9388:	08 95       	ret
    938a:	80 e0       	ldi	r24, 0x00	; 0
    938c:	08 95       	ret

0000938e <menu_redraw_slider(unsigned int, unsigned int, unsigned char)>:
_Z18menu_redraw_sliderjjh():
    938e:	80 91 0c 0f 	lds	r24, 0x0F0C	; 0x800f0c <display_update_slider>
    9392:	81 30       	cpi	r24, 0x01	; 1
    9394:	19 f4       	brne	.+6      	; 0x939c <menu_redraw_slider(unsigned int, unsigned int, unsigned char)+0xe>
    9396:	10 92 0c 0f 	sts	0x0F0C, r1	; 0x800f0c <display_update_slider>
    939a:	08 95       	ret
    939c:	80 e0       	ldi	r24, 0x00	; 0
    939e:	08 95       	ret

000093a0 <menu_redraw_change_default_ring(unsigned int, unsigned int, unsigned char)>:
_Z31menu_redraw_change_default_ringjjh():
    93a0:	80 91 0b 0f 	lds	r24, 0x0F0B	; 0x800f0b <display_redraw_default_ring>
    93a4:	81 30       	cpi	r24, 0x01	; 1
    93a6:	19 f4       	brne	.+6      	; 0x93ae <menu_redraw_change_default_ring(unsigned int, unsigned int, unsigned char)+0xe>
    93a8:	10 92 0b 0f 	sts	0x0F0B, r1	; 0x800f0b <display_redraw_default_ring>
    93ac:	08 95       	ret
    93ae:	80 e0       	ldi	r24, 0x00	; 0
    93b0:	08 95       	ret

000093b2 <menu_redraw_change_variable(unsigned int, unsigned int, unsigned char)>:
_Z27menu_redraw_change_variablejjh():
    93b2:	80 91 c4 0a 	lds	r24, 0x0AC4	; 0x800ac4 <menu_dialog_variable_change>
    93b6:	81 30       	cpi	r24, 0x01	; 1
    93b8:	19 f4       	brne	.+6      	; 0x93c0 <menu_redraw_change_variable(unsigned int, unsigned int, unsigned char)+0xe>
    93ba:	10 92 c4 0a 	sts	0x0AC4, r1	; 0x800ac4 <menu_dialog_variable_change>
    93be:	08 95       	ret
    93c0:	80 e0       	ldi	r24, 0x00	; 0
    93c2:	08 95       	ret

000093c4 <get_function_return_args_1(unsigned int, unsigned int, unsigned char)>:
_Z26get_function_return_args_1jjh():
    93c4:	08 95       	ret

000093c6 <a2d_complete(unsigned char, unsigned int)>:
_Z12a2d_completehj():
    93c6:	83 30       	cpi	r24, 0x03	; 3
    93c8:	41 f4       	brne	.+16     	; 0x93da <a2d_complete(unsigned char, unsigned int)+0x14>
    93ca:	70 93 59 0b 	sts	0x0B59, r23	; 0x800b59 <proud+0x1>
    93ce:	60 93 58 0b 	sts	0x0B58, r22	; 0x800b58 <proud>
    93d2:	81 e0       	ldi	r24, 0x01	; 1
    93d4:	80 93 55 0b 	sts	0x0B55, r24	; 0x800b55 <a2d_run_now>
    93d8:	08 95       	ret
    93da:	86 30       	cpi	r24, 0x06	; 6
    93dc:	29 f4       	brne	.+10     	; 0x93e8 <a2d_complete(unsigned char, unsigned int)+0x22>
    93de:	70 93 5f 0b 	sts	0x0B5F, r23	; 0x800b5f <tritri+0x1>
    93e2:	60 93 5e 0b 	sts	0x0B5E, r22	; 0x800b5e <tritri>
    93e6:	f5 cf       	rjmp	.-22     	; 0x93d2 <a2d_complete(unsigned char, unsigned int)+0xc>
    93e8:	85 30       	cpi	r24, 0x05	; 5
    93ea:	29 f4       	brne	.+10     	; 0x93f6 <a2d_complete(unsigned char, unsigned int)+0x30>
    93ec:	70 93 5d 0b 	sts	0x0B5D, r23	; 0x800b5d <petnula+0x1>
    93f0:	60 93 5c 0b 	sts	0x0B5C, r22	; 0x800b5c <petnula>
    93f4:	ee cf       	rjmp	.-36     	; 0x93d2 <a2d_complete(unsigned char, unsigned int)+0xc>
    93f6:	84 30       	cpi	r24, 0x04	; 4
    93f8:	29 f4       	brne	.+10     	; 0x9404 <a2d_complete(unsigned char, unsigned int)+0x3e>
    93fa:	70 93 5b 0b 	sts	0x0B5B, r23	; 0x800b5b <dvanact+0x1>
    93fe:	60 93 5a 0b 	sts	0x0B5A, r22	; 0x800b5a <dvanact>
    9402:	e7 cf       	rjmp	.-50     	; 0x93d2 <a2d_complete(unsigned char, unsigned int)+0xc>
    9404:	87 30       	cpi	r24, 0x07	; 7
    9406:	29 f7       	brne	.-54     	; 0x93d2 <a2d_complete(unsigned char, unsigned int)+0xc>
    9408:	8f ef       	ldi	r24, 0xFF	; 255
    940a:	93 e0       	ldi	r25, 0x03	; 3
    940c:	86 1b       	sub	r24, r22
    940e:	97 0b       	sbc	r25, r23
    9410:	90 93 57 0b 	sts	0x0B57, r25	; 0x800b57 <light_curr+0x1>
    9414:	80 93 56 0b 	sts	0x0B56, r24	; 0x800b56 <light_curr>
    9418:	dc cf       	rjmp	.-72     	; 0x93d2 <a2d_complete(unsigned char, unsigned int)+0xc>

0000941a <display_function_vertical_slider_inc(unsigned int, unsigned int, unsigned char)>:
_Z36display_function_vertical_slider_incjjh():
    941a:	fc 01       	movw	r30, r24
    941c:	e0 5e       	subi	r30, 0xE0	; 224
    941e:	f4 4f       	sbci	r31, 0xF4	; 244
    9420:	90 81       	ld	r25, Z
    9422:	20 91 1f 0b 	lds	r18, 0x0B1F	; 0x800b1f <menu_slider_data_max>
    9426:	80 91 1d 0b 	lds	r24, 0x0B1D	; 0x800b1d <menu_slider_data_max_element>
    942a:	28 1b       	sub	r18, r24
    942c:	33 0b       	sbc	r19, r19
    942e:	92 17       	cp	r25, r18
    9430:	13 06       	cpc	r1, r19
    9432:	2c f4       	brge	.+10     	; 0x943e <display_function_vertical_slider_inc(unsigned int, unsigned int, unsigned char)+0x24>
    9434:	9f 5f       	subi	r25, 0xFF	; 255
    9436:	90 83       	st	Z, r25
    9438:	81 e0       	ldi	r24, 0x01	; 1
    943a:	80 93 0c 0f 	sts	0x0F0C, r24	; 0x800f0c <display_update_slider>
    943e:	08 95       	ret

00009440 <display_function_vertical_slider_dec(unsigned int, unsigned int, unsigned char)>:
_Z36display_function_vertical_slider_decjjh():
    9440:	fc 01       	movw	r30, r24
    9442:	e0 5e       	subi	r30, 0xE0	; 224
    9444:	f4 4f       	sbci	r31, 0xF4	; 244
    9446:	90 81       	ld	r25, Z
    9448:	80 91 1e 0b 	lds	r24, 0x0B1E	; 0x800b1e <menu_slider_data_min>
    944c:	89 17       	cp	r24, r25
    944e:	28 f4       	brcc	.+10     	; 0x945a <display_function_vertical_slider_dec(unsigned int, unsigned int, unsigned char)+0x1a>
    9450:	91 50       	subi	r25, 0x01	; 1
    9452:	90 83       	st	Z, r25
    9454:	81 e0       	ldi	r24, 0x01	; 1
    9456:	80 93 0c 0f 	sts	0x0F0C, r24	; 0x800f0c <display_update_slider>
    945a:	08 95       	ret

0000945c <get_function_rtds_last_index_for_menu(unsigned int, unsigned int, unsigned char)>:
_Z37get_function_rtds_last_index_for_menujjh():
    945c:	8a e0       	ldi	r24, 0x0A	; 10
    945e:	08 95       	ret

00009460 <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)>:
_Z41get_function_one_wire_last_index_for_menujjh():
    9460:	eb e9       	ldi	r30, 0x9B	; 155
    9462:	f0 e1       	ldi	r31, 0x10	; 16
    9464:	80 e0       	ldi	r24, 0x00	; 0
    9466:	91 85       	ldd	r25, Z+9	; 0x09
    9468:	91 30       	cpi	r25, 0x01	; 1
    946a:	09 f4       	brne	.+2      	; 0x946e <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)+0xe>
    946c:	8f 5f       	subi	r24, 0xFF	; 255
    946e:	3b 96       	adiw	r30, 0x0b	; 11
    9470:	90 e1       	ldi	r25, 0x10	; 16
    9472:	ed 3d       	cpi	r30, 0xDD	; 221
    9474:	f9 07       	cpc	r31, r25
    9476:	b9 f7       	brne	.-18     	; 0x9466 <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)+0x6>
    9478:	08 95       	ret

0000947a <button_get_show_default_temp_max_items(unsigned int, unsigned int, unsigned char)>:
_Z38button_get_show_default_temp_max_itemsjjh():
    947a:	00 97       	sbiw	r24, 0x00	; 0
    947c:	31 f4       	brne	.+12     	; 0x948a <button_get_show_default_temp_max_items(unsigned int, unsigned int, unsigned char)+0x10>
    947e:	80 91 26 0b 	lds	r24, 0x0B26	; 0x800b26 <use_tds>
    9482:	90 91 27 0b 	lds	r25, 0x0B27	; 0x800b27 <use_rtds>
    9486:	89 0f       	add	r24, r25
    9488:	08 95       	ret
    948a:	01 97       	sbiw	r24, 0x01	; 1
    948c:	09 f0       	breq	.+2      	; 0x9490 <button_get_show_default_temp_max_items(unsigned int, unsigned int, unsigned char)+0x16>
    948e:	08 95       	ret
    9490:	80 e1       	ldi	r24, 0x10	; 16
    9492:	08 95       	ret

00009494 <button_get_show_default_temp_active(unsigned int, unsigned int, unsigned char)>:
_Z35button_get_show_default_temp_activejjh():
    9494:	81 e0       	ldi	r24, 0x01	; 1
    9496:	90 91 38 0b 	lds	r25, 0x0B38	; 0x800b38 <default_show_temp>
    949a:	94 13       	cpse	r25, r20
    949c:	80 e0       	ldi	r24, 0x00	; 0
    949e:	08 95       	ret

000094a0 <switch_brightness_automode_get_status_fnt(unsigned int, unsigned int, unsigned char)>:
_Z41switch_brightness_automode_get_status_fntjjh():
    94a0:	80 91 2a 0b 	lds	r24, 0x0B2A	; 0x800b2a <brigthness_display_mode>
    94a4:	88 1f       	adc	r24, r24
    94a6:	88 27       	eor	r24, r24
    94a8:	88 1f       	adc	r24, r24
    94aa:	08 95       	ret

000094ac <preload_display_setting_brightness(unsigned int, unsigned int, unsigned char)>:
_Z34preload_display_setting_brightnessjjh():
    94ac:	cf 93       	push	r28
    94ae:	df 93       	push	r29
_Z29display_function_set_variableffffhhhhPFvjfhE():
    94b0:	c5 ec       	ldi	r28, 0xC5	; 197
    94b2:	da e0       	ldi	r29, 0x0A	; 10
_Z34preload_display_setting_brightnessjjh():
    94b4:	60 91 2c 0b 	lds	r22, 0x0B2C	; 0x800b2c <brigthness_display_values>
    94b8:	70 e0       	ldi	r23, 0x00	; 0
    94ba:	90 e0       	ldi	r25, 0x00	; 0
    94bc:	80 e0       	ldi	r24, 0x00	; 0
    94be:	0f 94 f5 14 	call	0x229ea	; 0x229ea <__floatunsisf>
    94c2:	68 83       	st	Y, r22
    94c4:	79 83       	std	Y+1, r23	; 0x01
    94c6:	8a 83       	std	Y+2, r24	; 0x02
    94c8:	9b 83       	std	Y+3, r25	; 0x03
_Z29display_function_set_variableffffhhhhPFvjfhE():
    94ca:	80 e0       	ldi	r24, 0x00	; 0
    94cc:	90 e0       	ldi	r25, 0x00	; 0
    94ce:	a0 ea       	ldi	r26, 0xA0	; 160
    94d0:	b0 e4       	ldi	r27, 0x40	; 64
    94d2:	88 87       	std	Y+8, r24	; 0x08
    94d4:	99 87       	std	Y+9, r25	; 0x09
    94d6:	aa 87       	std	Y+10, r26	; 0x0a
    94d8:	bb 87       	std	Y+11, r27	; 0x0b
    94da:	40 e0       	ldi	r20, 0x00	; 0
    94dc:	50 e0       	ldi	r21, 0x00	; 0
    94de:	68 ec       	ldi	r22, 0xC8	; 200
    94e0:	72 e4       	ldi	r23, 0x42	; 66
    94e2:	4c 83       	std	Y+4, r20	; 0x04
    94e4:	5d 83       	std	Y+5, r21	; 0x05
    94e6:	6e 83       	std	Y+6, r22	; 0x06
    94e8:	7f 83       	std	Y+7, r23	; 0x07
    94ea:	8e 87       	std	Y+14, r24	; 0x0e
    94ec:	9f 87       	std	Y+15, r25	; 0x0f
    94ee:	a8 8b       	std	Y+16, r26	; 0x10
    94f0:	b9 8b       	std	Y+17, r27	; 0x11
    94f2:	81 e0       	ldi	r24, 0x01	; 1
    94f4:	8d 87       	std	Y+13, r24	; 0x0d
    94f6:	1a 8a       	std	Y+18, r1	; 0x12
    94f8:	8c 87       	std	Y+12, r24	; 0x0c
    94fa:	8a ea       	ldi	r24, 0xAA	; 170
    94fc:	91 e5       	ldi	r25, 0x51	; 81
    94fe:	9c 8b       	std	Y+20, r25	; 0x14
    9500:	8b 8b       	std	Y+19, r24	; 0x13
_Z34preload_display_setting_brightnessjjh():
    9502:	df 91       	pop	r29
    9504:	cf 91       	pop	r28
    9506:	08 95       	ret

00009508 <display_enable_show_brightness_manual_mode(unsigned int, unsigned int, unsigned char)>:
_Z41switch_brightness_automode_get_status_fntjjh():
    9508:	80 91 2a 0b 	lds	r24, 0x0B2A	; 0x800b2a <brigthness_display_mode>
    950c:	80 95       	com	r24
_Z42display_enable_show_brightness_manual_modejjh():
    950e:	88 1f       	adc	r24, r24
    9510:	88 27       	eor	r24, r24
    9512:	88 1f       	adc	r24, r24
    9514:	08 95       	ret

00009516 <button_set_brightness_auto_shutdown_get_status_fnt(unsigned int, unsigned int, unsigned char)>:
_Z50button_set_brightness_auto_shutdown_get_status_fntjjh():
    9516:	80 91 2a 0b 	lds	r24, 0x0B2A	; 0x800b2a <brigthness_display_mode>
    951a:	86 fb       	bst	r24, 6
    951c:	88 27       	eor	r24, r24
    951e:	80 f9       	bld	r24, 0
    9520:	08 95       	ret

00009522 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)>:
_Z62button_set_brightness_auto_shutdown_select_time_get_status_fntjjh():
    9522:	41 11       	cpse	r20, r1
    9524:	07 c0       	rjmp	.+14     	; 0x9534 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x12>
    9526:	81 e0       	ldi	r24, 0x01	; 1
    9528:	90 91 29 0b 	lds	r25, 0x0B29	; 0x800b29 <display_auto_shutdown>
    952c:	99 23       	and	r25, r25
    952e:	49 f0       	breq	.+18     	; 0x9542 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x20>
    9530:	80 e0       	ldi	r24, 0x00	; 0
    9532:	08 95       	ret
    9534:	41 30       	cpi	r20, 0x01	; 1
    9536:	31 f4       	brne	.+12     	; 0x9544 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x22>
    9538:	81 e0       	ldi	r24, 0x01	; 1
    953a:	90 91 29 0b 	lds	r25, 0x0B29	; 0x800b29 <display_auto_shutdown>
    953e:	9e 31       	cpi	r25, 0x1E	; 30
    9540:	b9 f7       	brne	.-18     	; 0x9530 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0xe>
    9542:	08 95       	ret
    9544:	42 30       	cpi	r20, 0x02	; 2
    9546:	31 f4       	brne	.+12     	; 0x9554 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x32>
    9548:	81 e0       	ldi	r24, 0x01	; 1
    954a:	90 91 29 0b 	lds	r25, 0x0B29	; 0x800b29 <display_auto_shutdown>
    954e:	9c 33       	cpi	r25, 0x3C	; 60
    9550:	79 f7       	brne	.-34     	; 0x9530 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0xe>
    9552:	f7 cf       	rjmp	.-18     	; 0x9542 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x20>
    9554:	43 30       	cpi	r20, 0x03	; 3
    9556:	31 f4       	brne	.+12     	; 0x9564 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x42>
    9558:	81 e0       	ldi	r24, 0x01	; 1
    955a:	90 91 29 0b 	lds	r25, 0x0B29	; 0x800b29 <display_auto_shutdown>
    955e:	98 37       	cpi	r25, 0x78	; 120
    9560:	39 f7       	brne	.-50     	; 0x9530 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0xe>
    9562:	ef cf       	rjmp	.-34     	; 0x9542 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x20>
    9564:	44 30       	cpi	r20, 0x04	; 4
    9566:	31 f4       	brne	.+12     	; 0x9574 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x52>
    9568:	81 e0       	ldi	r24, 0x01	; 1
    956a:	90 91 29 0b 	lds	r25, 0x0B29	; 0x800b29 <display_auto_shutdown>
    956e:	94 3b       	cpi	r25, 0xB4	; 180
    9570:	f9 f6       	brne	.-66     	; 0x9530 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0xe>
    9572:	e7 cf       	rjmp	.-50     	; 0x9542 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x20>
    9574:	80 e0       	ldi	r24, 0x00	; 0
    9576:	45 30       	cpi	r20, 0x05	; 5
    9578:	21 f7       	brne	.-56     	; 0x9542 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x20>
    957a:	90 91 29 0b 	lds	r25, 0x0B29	; 0x800b29 <display_auto_shutdown>
    957e:	9a 3f       	cpi	r25, 0xFA	; 250
    9580:	01 f7       	brne	.-64     	; 0x9542 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x20>
    9582:	81 e0       	ldi	r24, 0x01	; 1
    9584:	de cf       	rjmp	.-68     	; 0x9542 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x20>

00009586 <button_set_network_mac_onclick(unsigned int, unsigned int, unsigned char)>:
_Z30button_set_network_mac_onclickjjh():
    9586:	e6 eb       	ldi	r30, 0xB6	; 182
    9588:	ff e0       	ldi	r31, 0x0F	; 15
    958a:	82 e0       	ldi	r24, 0x02	; 2
    958c:	80 83       	st	Z, r24
    958e:	91 e0       	ldi	r25, 0x01	; 1
    9590:	91 83       	std	Z+1, r25	; 0x01
    9592:	82 83       	std	Z+2, r24	; 0x02
    9594:	80 91 5a 0b 	lds	r24, 0x0B5A	; 0x800b5a <dvanact>
    9598:	90 91 5b 0b 	lds	r25, 0x0B5B	; 0x800b5b <dvanact+0x1>
    959c:	96 95       	lsr	r25
    959e:	87 95       	ror	r24
    95a0:	83 83       	std	Z+3, r24	; 0x03
    95a2:	80 91 58 0b 	lds	r24, 0x0B58	; 0x800b58 <proud>
    95a6:	90 91 59 0b 	lds	r25, 0x0B59	; 0x800b59 <proud+0x1>
    95aa:	96 95       	lsr	r25
    95ac:	87 95       	ror	r24
    95ae:	84 83       	std	Z+4, r24	; 0x04
    95b0:	80 91 56 0b 	lds	r24, 0x0B56	; 0x800b56 <light_curr>
    95b4:	90 91 57 0b 	lds	r25, 0x0B57	; 0x800b57 <light_curr+0x1>
    95b8:	96 95       	lsr	r25
    95ba:	87 95       	ror	r24
    95bc:	85 83       	std	Z+5, r24	; 0x05
    95be:	08 95       	ret

000095c0 <button_nastaveni_reload_onclick(unsigned int, unsigned int, unsigned char)>:
_Z31button_nastaveni_reload_onclickjjh():
    95c0:	e0 91 60 0a 	lds	r30, 0x0A60	; 0x800a60 <resetFunc>
    95c4:	f0 91 61 0a 	lds	r31, 0x0A61	; 0x800a61 <resetFunc+0x1>
    95c8:	19 94       	eijmp

000095ca <valid_ipv4_address_element_string()>:
_Z33valid_ipv4_address_element_stringv():
    95ca:	81 e0       	ldi	r24, 0x01	; 1
    95cc:	08 95       	ret

000095ce <display_element_fill_rectangle(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>:
_Z30display_element_fill_rectanglejjjjjhPc():
    95ce:	af 92       	push	r10
    95d0:	bf 92       	push	r11
    95d2:	cf 92       	push	r12
    95d4:	df 92       	push	r13
    95d6:	ef 92       	push	r14
    95d8:	ff 92       	push	r15
    95da:	0f 93       	push	r16
    95dc:	1f 93       	push	r17
    95de:	cf 93       	push	r28
    95e0:	df 93       	push	r29
    95e2:	6c 01       	movw	r12, r24
    95e4:	5b 01       	movw	r10, r22
    95e6:	ea 01       	movw	r28, r20
    95e8:	79 01       	movw	r14, r18
    95ea:	b8 01       	movw	r22, r16
    95ec:	88 eb       	ldi	r24, 0xB8	; 184
    95ee:	9c e0       	ldi	r25, 0x0C	; 12
    95f0:	0e 94 a9 bc 	call	0x17952	; 0x17952 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    95f4:	85 01       	movw	r16, r10
    95f6:	0e 0d       	add	r16, r14
    95f8:	1f 1d       	adc	r17, r15
    95fa:	96 01       	movw	r18, r12
    95fc:	2c 0f       	add	r18, r28
    95fe:	3d 1f       	adc	r19, r29
    9600:	a5 01       	movw	r20, r10
    9602:	b6 01       	movw	r22, r12
    9604:	88 eb       	ldi	r24, 0xB8	; 184
    9606:	9c e0       	ldi	r25, 0x0C	; 12
    9608:	0e 94 ad bc 	call	0x1795a	; 0x1795a <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)>
    960c:	df 91       	pop	r29
    960e:	cf 91       	pop	r28
    9610:	1f 91       	pop	r17
    9612:	0f 91       	pop	r16
    9614:	ff 90       	pop	r15
    9616:	ef 90       	pop	r14
    9618:	df 90       	pop	r13
    961a:	cf 90       	pop	r12
    961c:	bf 90       	pop	r11
    961e:	af 90       	pop	r10
    9620:	08 95       	ret

00009622 <display_element_rectangle(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>:
_Z25display_element_rectanglejjjjjhPc():
    9622:	af 92       	push	r10
    9624:	bf 92       	push	r11
    9626:	cf 92       	push	r12
    9628:	df 92       	push	r13
    962a:	ef 92       	push	r14
    962c:	ff 92       	push	r15
    962e:	0f 93       	push	r16
    9630:	1f 93       	push	r17
    9632:	cf 93       	push	r28
    9634:	df 93       	push	r29
    9636:	6c 01       	movw	r12, r24
    9638:	5b 01       	movw	r10, r22
    963a:	ea 01       	movw	r28, r20
    963c:	79 01       	movw	r14, r18
    963e:	b8 01       	movw	r22, r16
    9640:	88 eb       	ldi	r24, 0xB8	; 184
    9642:	9c e0       	ldi	r25, 0x0C	; 12
    9644:	0e 94 a9 bc 	call	0x17952	; 0x17952 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    9648:	85 01       	movw	r16, r10
    964a:	0e 0d       	add	r16, r14
    964c:	1f 1d       	adc	r17, r15
    964e:	96 01       	movw	r18, r12
    9650:	2c 0f       	add	r18, r28
    9652:	3d 1f       	adc	r19, r29
    9654:	a5 01       	movw	r20, r10
    9656:	b6 01       	movw	r22, r12
    9658:	88 eb       	ldi	r24, 0xB8	; 184
    965a:	9c e0       	ldi	r25, 0x0C	; 12
    965c:	0e 94 34 bd 	call	0x17a68	; 0x17a68 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    9660:	df 91       	pop	r29
    9662:	cf 91       	pop	r28
    9664:	1f 91       	pop	r17
    9666:	0f 91       	pop	r16
    9668:	ff 90       	pop	r15
    966a:	ef 90       	pop	r14
    966c:	df 90       	pop	r13
    966e:	cf 90       	pop	r12
    9670:	bf 90       	pop	r11
    9672:	af 90       	pop	r10
    9674:	08 95       	ret

00009676 <display_element_vertical_slider(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>:
_Z31display_element_vertical_sliderjjjjjhPc():
    9676:	2f 92       	push	r2
    9678:	3f 92       	push	r3
    967a:	4f 92       	push	r4
    967c:	5f 92       	push	r5
    967e:	6f 92       	push	r6
    9680:	7f 92       	push	r7
    9682:	8f 92       	push	r8
    9684:	9f 92       	push	r9
    9686:	af 92       	push	r10
    9688:	bf 92       	push	r11
    968a:	cf 92       	push	r12
    968c:	df 92       	push	r13
    968e:	ef 92       	push	r14
    9690:	ff 92       	push	r15
    9692:	0f 93       	push	r16
    9694:	1f 93       	push	r17
    9696:	cf 93       	push	r28
    9698:	df 93       	push	r29
    969a:	3c 01       	movw	r6, r24
    969c:	6b 01       	movw	r12, r22
    969e:	ea 01       	movw	r28, r20
    96a0:	29 01       	movw	r4, r18
    96a2:	18 01       	movw	r2, r16
    96a4:	70 e0       	ldi	r23, 0x00	; 0
    96a6:	60 e0       	ldi	r22, 0x00	; 0
    96a8:	88 eb       	ldi	r24, 0xB8	; 184
    96aa:	9c e0       	ldi	r25, 0x0C	; 12
    96ac:	0e 94 a9 bc 	call	0x17952	; 0x17952 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    96b0:	f1 2c       	mov	r15, r1
    96b2:	e1 2c       	mov	r14, r1
    96b4:	46 01       	movw	r8, r12
    96b6:	84 0c       	add	r8, r4
    96b8:	95 1c       	adc	r9, r5
    96ba:	53 01       	movw	r10, r6
    96bc:	ac 0e       	add	r10, r28
    96be:	bd 1e       	adc	r11, r29
    96c0:	84 01       	movw	r16, r8
    96c2:	0e 19       	sub	r16, r14
    96c4:	1f 09       	sbc	r17, r15
    96c6:	95 01       	movw	r18, r10
    96c8:	2e 19       	sub	r18, r14
    96ca:	3f 09       	sbc	r19, r15
    96cc:	a7 01       	movw	r20, r14
    96ce:	4c 0d       	add	r20, r12
    96d0:	5d 1d       	adc	r21, r13
    96d2:	b7 01       	movw	r22, r14
    96d4:	66 0d       	add	r22, r6
    96d6:	77 1d       	adc	r23, r7
    96d8:	88 eb       	ldi	r24, 0xB8	; 184
    96da:	9c e0       	ldi	r25, 0x0C	; 12
    96dc:	0e 94 34 bd 	call	0x17a68	; 0x17a68 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    96e0:	8f ef       	ldi	r24, 0xFF	; 255
    96e2:	e8 1a       	sub	r14, r24
    96e4:	f8 0a       	sbc	r15, r24
    96e6:	83 e0       	ldi	r24, 0x03	; 3
    96e8:	e8 16       	cp	r14, r24
    96ea:	f1 04       	cpc	r15, r1
    96ec:	49 f7       	brne	.-46     	; 0x96c0 <display_element_vertical_slider(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x4a>
    96ee:	6f ef       	ldi	r22, 0xFF	; 255
    96f0:	7f ef       	ldi	r23, 0xFF	; 255
    96f2:	88 eb       	ldi	r24, 0xB8	; 184
    96f4:	9c e0       	ldi	r25, 0x0C	; 12
    96f6:	0e 94 a9 bc 	call	0x17952	; 0x17952 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    96fa:	23 97       	sbiw	r28, 0x03	; 3
    96fc:	c6 0d       	add	r28, r6
    96fe:	d7 1d       	adc	r29, r7
    9700:	83 e0       	ldi	r24, 0x03	; 3
    9702:	68 0e       	add	r6, r24
    9704:	71 1c       	adc	r7, r1
    9706:	82 01       	movw	r16, r4
    9708:	03 50       	subi	r16, 0x03	; 3
    970a:	11 09       	sbc	r17, r1
    970c:	0c 0d       	add	r16, r12
    970e:	1d 1d       	adc	r17, r13
    9710:	a6 01       	movw	r20, r12
    9712:	4d 5f       	subi	r20, 0xFD	; 253
    9714:	5f 4f       	sbci	r21, 0xFF	; 255
    9716:	9e 01       	movw	r18, r28
    9718:	b3 01       	movw	r22, r6
    971a:	88 eb       	ldi	r24, 0xB8	; 184
    971c:	9c e0       	ldi	r25, 0x0C	; 12
    971e:	0e 94 ad bc 	call	0x1795a	; 0x1795a <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)>
    9722:	60 91 1f 0b 	lds	r22, 0x0B1F	; 0x800b1f <menu_slider_data_max>
    9726:	80 91 1d 0b 	lds	r24, 0x0B1D	; 0x800b1d <menu_slider_data_max_element>
    972a:	68 1b       	sub	r22, r24
    972c:	77 0b       	sbc	r23, r23
    972e:	6f 5f       	subi	r22, 0xFF	; 255
    9730:	7f 4f       	sbci	r23, 0xFF	; 255
    9732:	c2 01       	movw	r24, r4
    9734:	0f 94 35 16 	call	0x22c6a	; 0x22c6a <__udivmodhi4>
    9738:	f1 01       	movw	r30, r2
    973a:	e0 5e       	subi	r30, 0xE0	; 224
    973c:	f4 4f       	sbci	r31, 0xF4	; 244
    973e:	f0 80       	ld	r15, Z
    9740:	f6 9e       	mul	r15, r22
    9742:	f0 2c       	mov	r15, r0
    9744:	11 24       	eor	r1, r1
    9746:	6a e9       	ldi	r22, 0x9A	; 154
    9748:	76 ed       	ldi	r23, 0xD6	; 214
    974a:	88 eb       	ldi	r24, 0xB8	; 184
    974c:	9c e0       	ldi	r25, 0x0C	; 12
    974e:	0e 94 a9 bc 	call	0x17952	; 0x17952 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    9752:	cf 0c       	add	r12, r15
    9754:	d1 1c       	adc	r13, r1
    9756:	86 01       	movw	r16, r12
    9758:	06 5f       	subi	r16, 0xF6	; 246
    975a:	1f 4f       	sbci	r17, 0xFF	; 255
    975c:	a6 01       	movw	r20, r12
    975e:	4b 5f       	subi	r20, 0xFB	; 251
    9760:	5f 4f       	sbci	r21, 0xFF	; 255
    9762:	9e 01       	movw	r18, r28
    9764:	b3 01       	movw	r22, r6
    9766:	88 eb       	ldi	r24, 0xB8	; 184
    9768:	9c e0       	ldi	r25, 0x0C	; 12
    976a:	0e 94 ad bc 	call	0x1795a	; 0x1795a <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)>
    976e:	df 91       	pop	r29
    9770:	cf 91       	pop	r28
    9772:	1f 91       	pop	r17
    9774:	0f 91       	pop	r16
    9776:	ff 90       	pop	r15
    9778:	ef 90       	pop	r14
    977a:	df 90       	pop	r13
    977c:	cf 90       	pop	r12
    977e:	bf 90       	pop	r11
    9780:	af 90       	pop	r10
    9782:	9f 90       	pop	r9
    9784:	8f 90       	pop	r8
    9786:	7f 90       	pop	r7
    9788:	6f 90       	pop	r6
    978a:	5f 90       	pop	r5
    978c:	4f 90       	pop	r4
    978e:	3f 90       	pop	r3
    9790:	2f 90       	pop	r2
    9792:	08 95       	ret

00009794 <helper_thermostat_set_mezni(unsigned int, float, unsigned char)>:
_Z27helper_thermostat_set_meznijfh():
    9794:	cf 93       	push	r28
    9796:	c8 2f       	mov	r28, r24
    9798:	cb 01       	movw	r24, r22
    979a:	ba 01       	movw	r22, r20
    979c:	20 e0       	ldi	r18, 0x00	; 0
    979e:	30 e0       	ldi	r19, 0x00	; 0
    97a0:	40 e2       	ldi	r20, 0x20	; 32
    97a2:	51 e4       	ldi	r21, 0x41	; 65
    97a4:	0f 94 ac 15 	call	0x22b58	; 0x22b58 <__mulsf3>
    97a8:	0f 94 bf 14 	call	0x2297e	; 0x2297e <__fixsfsi>
    97ac:	8c 2f       	mov	r24, r28
    97ae:	cf 91       	pop	r28
    97b0:	0c 94 37 b8 	jmp	0x1706e	; 0x1706e <thermostat_ring_set_mezni(unsigned char, int)>

000097b4 <helper_thermostat_set_pid_p(unsigned int, float, unsigned char)>:
_Z27helper_thermostat_set_pid_pjfh():
    97b4:	0c 94 8a b9 	jmp	0x17314	; 0x17314 <thermostat_ring_pid_set_kp(unsigned char, float)>

000097b8 <helper_thermostat_set_pid_i(unsigned int, float, unsigned char)>:
_Z27helper_thermostat_set_pid_ijfh():
    97b8:	0c 94 9d b9 	jmp	0x1733a	; 0x1733a <thermostat_ring_pid_set_ki(unsigned char, float)>

000097bc <helper_thermostat_set_pid_d(unsigned int, float, unsigned char)>:
_Z27helper_thermostat_set_pid_djfh():
    97bc:	0c 94 b0 b9 	jmp	0x17360	; 0x17360 <thermostat_ring_pid_set_kd(unsigned char, float)>

000097c0 <helper_thermostat_set_pid_time(unsigned int, float, unsigned char)>:
_Z30helper_thermostat_set_pid_timejfh():
    97c0:	62 2f       	mov	r22, r18
    97c2:	0c 94 c3 b9 	jmp	0x17386	; 0x17386 <thermostat_ring_pid_set_time(unsigned char, unsigned char)>

000097c6 <preload_regulator_menu(unsigned int, unsigned int, unsigned char)>:
_Z22preload_regulator_menujjh():
    97c6:	1f 93       	push	r17
    97c8:	cf 93       	push	r28
    97ca:	df 93       	push	r29
    97cc:	16 2f       	mov	r17, r22
    97ce:	86 2f       	mov	r24, r22
    97d0:	0e 94 1a b8 	call	0x17034	; 0x17034 <thermostat_ring_get_mezni(unsigned char)>
_Z29display_function_set_variableffffhhhhPFvjfhE():
    97d4:	c5 ec       	ldi	r28, 0xC5	; 197
    97d6:	da e0       	ldi	r29, 0x0A	; 10
_Z22preload_regulator_menujjh():
    97d8:	bc 01       	movw	r22, r24
    97da:	99 0f       	add	r25, r25
    97dc:	88 0b       	sbc	r24, r24
    97de:	99 0b       	sbc	r25, r25
    97e0:	0f 94 f7 14 	call	0x229ee	; 0x229ee <__floatsisf>
    97e4:	20 e0       	ldi	r18, 0x00	; 0
    97e6:	30 e0       	ldi	r19, 0x00	; 0
    97e8:	40 e2       	ldi	r20, 0x20	; 32
    97ea:	51 e4       	ldi	r21, 0x41	; 65
    97ec:	0f 94 4d 14 	call	0x2289a	; 0x2289a <__divsf3>
_Z29display_function_set_variableffffhhhhPFvjfhE():
    97f0:	68 83       	st	Y, r22
    97f2:	79 83       	std	Y+1, r23	; 0x01
    97f4:	8a 83       	std	Y+2, r24	; 0x02
    97f6:	9b 83       	std	Y+3, r25	; 0x03
    97f8:	80 e0       	ldi	r24, 0x00	; 0
    97fa:	90 e0       	ldi	r25, 0x00	; 0
    97fc:	a0 e8       	ldi	r26, 0x80	; 128
    97fe:	b1 e4       	ldi	r27, 0x41	; 65
    9800:	88 87       	std	Y+8, r24	; 0x08
    9802:	99 87       	std	Y+9, r25	; 0x09
    9804:	aa 87       	std	Y+10, r26	; 0x0a
    9806:	bb 87       	std	Y+11, r27	; 0x0b
    9808:	80 e0       	ldi	r24, 0x00	; 0
    980a:	90 e0       	ldi	r25, 0x00	; 0
    980c:	a0 e0       	ldi	r26, 0x00	; 0
    980e:	b2 e4       	ldi	r27, 0x42	; 66
    9810:	8c 83       	std	Y+4, r24	; 0x04
    9812:	9d 83       	std	Y+5, r25	; 0x05
    9814:	ae 83       	std	Y+6, r26	; 0x06
    9816:	bf 83       	std	Y+7, r27	; 0x07
    9818:	80 e0       	ldi	r24, 0x00	; 0
    981a:	90 e0       	ldi	r25, 0x00	; 0
    981c:	a0 e0       	ldi	r26, 0x00	; 0
    981e:	bf e3       	ldi	r27, 0x3F	; 63
    9820:	8e 87       	std	Y+14, r24	; 0x0e
    9822:	9f 87       	std	Y+15, r25	; 0x0f
    9824:	a8 8b       	std	Y+16, r26	; 0x10
    9826:	b9 8b       	std	Y+17, r27	; 0x11
    9828:	1d 86       	std	Y+13, r1	; 0x0d
    982a:	1a 8b       	std	Y+18, r17	; 0x12
    982c:	81 e0       	ldi	r24, 0x01	; 1
    982e:	8c 87       	std	Y+12, r24	; 0x0c
    9830:	8a ec       	ldi	r24, 0xCA	; 202
    9832:	9b e4       	ldi	r25, 0x4B	; 75
    9834:	9c 8b       	std	Y+20, r25	; 0x14
    9836:	8b 8b       	std	Y+19, r24	; 0x13
_Z22preload_regulator_menujjh():
    9838:	df 91       	pop	r29
    983a:	cf 91       	pop	r28
    983c:	1f 91       	pop	r17
    983e:	08 95       	ret

00009840 <preload_pid_menu(unsigned int, unsigned int, unsigned char)>:
_Z16preload_pid_menujjh():
    9840:	4f 92       	push	r4
    9842:	5f 92       	push	r5
    9844:	6f 92       	push	r6
    9846:	7f 92       	push	r7
    9848:	8f 92       	push	r8
    984a:	9f 92       	push	r9
    984c:	af 92       	push	r10
    984e:	bf 92       	push	r11
    9850:	cf 92       	push	r12
    9852:	df 92       	push	r13
    9854:	ef 92       	push	r14
    9856:	ff 92       	push	r15
    9858:	0f 93       	push	r16
    985a:	1f 93       	push	r17
    985c:	cf 93       	push	r28
    985e:	df 93       	push	r29
    9860:	16 2f       	mov	r17, r22
    9862:	86 2f       	mov	r24, r22
    9864:	0e 94 54 b7 	call	0x16ea8	; 0x16ea8 <thermostat_get_pid_p(unsigned char)>
_Z29display_function_set_variableffffhhhhPFvjfhE():
    9868:	c5 ec       	ldi	r28, 0xC5	; 197
    986a:	da e0       	ldi	r29, 0x0A	; 10
    986c:	68 83       	st	Y, r22
    986e:	79 83       	std	Y+1, r23	; 0x01
    9870:	8a 83       	std	Y+2, r24	; 0x02
    9872:	9b 83       	std	Y+3, r25	; 0x03
    9874:	41 2c       	mov	r4, r1
    9876:	51 2c       	mov	r5, r1
    9878:	80 e2       	ldi	r24, 0x20	; 32
    987a:	68 2e       	mov	r6, r24
    987c:	81 ec       	ldi	r24, 0xC1	; 193
    987e:	78 2e       	mov	r7, r24
    9880:	48 86       	std	Y+8, r4	; 0x08
    9882:	59 86       	std	Y+9, r5	; 0x09
    9884:	6a 86       	std	Y+10, r6	; 0x0a
    9886:	7b 86       	std	Y+11, r7	; 0x0b
    9888:	c1 2c       	mov	r12, r1
    988a:	d1 2c       	mov	r13, r1
    988c:	90 e2       	ldi	r25, 0x20	; 32
    988e:	e9 2e       	mov	r14, r25
    9890:	91 e4       	ldi	r25, 0x41	; 65
    9892:	f9 2e       	mov	r15, r25
    9894:	cc 82       	std	Y+4, r12	; 0x04
    9896:	dd 82       	std	Y+5, r13	; 0x05
    9898:	ee 82       	std	Y+6, r14	; 0x06
    989a:	ff 82       	std	Y+7, r15	; 0x07
    989c:	2d ec       	ldi	r18, 0xCD	; 205
    989e:	82 2e       	mov	r8, r18
    98a0:	2c ec       	ldi	r18, 0xCC	; 204
    98a2:	92 2e       	mov	r9, r18
    98a4:	a9 2c       	mov	r10, r9
    98a6:	2d e3       	ldi	r18, 0x3D	; 61
    98a8:	b2 2e       	mov	r11, r18
    98aa:	8e 86       	std	Y+14, r8	; 0x0e
    98ac:	9f 86       	std	Y+15, r9	; 0x0f
    98ae:	a8 8a       	std	Y+16, r10	; 0x10
    98b0:	b9 8a       	std	Y+17, r11	; 0x11
    98b2:	1d 86       	std	Y+13, r1	; 0x0d
    98b4:	1a 8b       	std	Y+18, r17	; 0x12
    98b6:	01 e0       	ldi	r16, 0x01	; 1
    98b8:	0c 87       	std	Y+12, r16	; 0x0c
    98ba:	8a ed       	ldi	r24, 0xDA	; 218
    98bc:	9b e4       	ldi	r25, 0x4B	; 75
    98be:	9c 8b       	std	Y+20, r25	; 0x14
    98c0:	8b 8b       	std	Y+19, r24	; 0x13
_Z16preload_pid_menujjh():
    98c2:	81 2f       	mov	r24, r17
    98c4:	0e 94 83 b7 	call	0x16f06	; 0x16f06 <thermostat_get_pid_i(unsigned char)>
_Z29display_function_set_variableffffhhhhPFvjfhE():
    98c8:	6d 8b       	std	Y+21, r22	; 0x15
    98ca:	7e 8b       	std	Y+22, r23	; 0x16
    98cc:	8f 8b       	std	Y+23, r24	; 0x17
    98ce:	98 8f       	std	Y+24, r25	; 0x18
    98d0:	4d 8e       	std	Y+29, r4	; 0x1d
    98d2:	5e 8e       	std	Y+30, r5	; 0x1e
    98d4:	6f 8e       	std	Y+31, r6	; 0x1f
    98d6:	78 a2       	std	Y+32, r7	; 0x20
    98d8:	c9 8e       	std	Y+25, r12	; 0x19
    98da:	da 8e       	std	Y+26, r13	; 0x1a
    98dc:	eb 8e       	std	Y+27, r14	; 0x1b
    98de:	fc 8e       	std	Y+28, r15	; 0x1c
    98e0:	8b a2       	std	Y+35, r8	; 0x23
    98e2:	9c a2       	std	Y+36, r9	; 0x24
    98e4:	ad a2       	std	Y+37, r10	; 0x25
    98e6:	be a2       	std	Y+38, r11	; 0x26
    98e8:	1a a2       	std	Y+34, r1	; 0x22
    98ea:	1f a3       	std	Y+39, r17	; 0x27
    98ec:	09 a3       	std	Y+33, r16	; 0x21
    98ee:	8c ed       	ldi	r24, 0xDC	; 220
    98f0:	9b e4       	ldi	r25, 0x4B	; 75
    98f2:	99 a7       	std	Y+41, r25	; 0x29
    98f4:	88 a7       	std	Y+40, r24	; 0x28
_Z16preload_pid_menujjh():
    98f6:	81 2f       	mov	r24, r17
    98f8:	0e 94 8e b7 	call	0x16f1c	; 0x16f1c <thermostat_get_pid_d(unsigned char)>
_Z29display_function_set_variableffffhhhhPFvjfhE():
    98fc:	6a a7       	std	Y+42, r22	; 0x2a
    98fe:	7b a7       	std	Y+43, r23	; 0x2b
    9900:	8c a7       	std	Y+44, r24	; 0x2c
    9902:	9d a7       	std	Y+45, r25	; 0x2d
    9904:	4a aa       	std	Y+50, r4	; 0x32
    9906:	5b aa       	std	Y+51, r5	; 0x33
    9908:	6c aa       	std	Y+52, r6	; 0x34
    990a:	7d aa       	std	Y+53, r7	; 0x35
    990c:	ce a6       	std	Y+46, r12	; 0x2e
    990e:	df a6       	std	Y+47, r13	; 0x2f
    9910:	e8 aa       	std	Y+48, r14	; 0x30
    9912:	f9 aa       	std	Y+49, r15	; 0x31
    9914:	88 ae       	std	Y+56, r8	; 0x38
    9916:	99 ae       	std	Y+57, r9	; 0x39
    9918:	aa ae       	std	Y+58, r10	; 0x3a
    991a:	bb ae       	std	Y+59, r11	; 0x3b
    991c:	1f aa       	std	Y+55, r1	; 0x37
    991e:	1c af       	std	Y+60, r17	; 0x3c
    9920:	0e ab       	std	Y+54, r16	; 0x36
    9922:	8e ed       	ldi	r24, 0xDE	; 222
    9924:	9b e4       	ldi	r25, 0x4B	; 75
    9926:	9e af       	std	Y+62, r25	; 0x3e
    9928:	8d af       	std	Y+61, r24	; 0x3d
_Z16preload_pid_menujjh():
    992a:	81 2f       	mov	r24, r17
    992c:	0e 94 99 b7 	call	0x16f32	; 0x16f32 <thermostat_get_pid_time(unsigned char)>
    9930:	68 2f       	mov	r22, r24
    9932:	70 e0       	ldi	r23, 0x00	; 0
    9934:	90 e0       	ldi	r25, 0x00	; 0
    9936:	80 e0       	ldi	r24, 0x00	; 0
    9938:	0f 94 f5 14 	call	0x229ea	; 0x229ea <__floatunsisf>
    993c:	60 93 04 0b 	sts	0x0B04, r22	; 0x800b04 <menu_dialog_variable+0x3f>
    9940:	70 93 05 0b 	sts	0x0B05, r23	; 0x800b05 <menu_dialog_variable+0x40>
    9944:	80 93 06 0b 	sts	0x0B06, r24	; 0x800b06 <menu_dialog_variable+0x41>
    9948:	90 93 07 0b 	sts	0x0B07, r25	; 0x800b07 <menu_dialog_variable+0x42>
_Z29display_function_set_variableffffhhhhPFvjfhE():
    994c:	c0 92 0c 0b 	sts	0x0B0C, r12	; 0x800b0c <menu_dialog_variable+0x47>
    9950:	d0 92 0d 0b 	sts	0x0B0D, r13	; 0x800b0d <menu_dialog_variable+0x48>
    9954:	e0 92 0e 0b 	sts	0x0B0E, r14	; 0x800b0e <menu_dialog_variable+0x49>
    9958:	f0 92 0f 0b 	sts	0x0B0F, r15	; 0x800b0f <menu_dialog_variable+0x4a>
    995c:	80 e0       	ldi	r24, 0x00	; 0
    995e:	90 e0       	ldi	r25, 0x00	; 0
    9960:	ae e7       	ldi	r26, 0x7E	; 126
    9962:	b3 e4       	ldi	r27, 0x43	; 67
    9964:	80 93 08 0b 	sts	0x0B08, r24	; 0x800b08 <menu_dialog_variable+0x43>
    9968:	90 93 09 0b 	sts	0x0B09, r25	; 0x800b09 <menu_dialog_variable+0x44>
    996c:	a0 93 0a 0b 	sts	0x0B0A, r26	; 0x800b0a <menu_dialog_variable+0x45>
    9970:	b0 93 0b 0b 	sts	0x0B0B, r27	; 0x800b0b <menu_dialog_variable+0x46>
    9974:	80 e0       	ldi	r24, 0x00	; 0
    9976:	90 e0       	ldi	r25, 0x00	; 0
    9978:	a0 e0       	ldi	r26, 0x00	; 0
    997a:	b0 e4       	ldi	r27, 0x40	; 64
    997c:	80 93 12 0b 	sts	0x0B12, r24	; 0x800b12 <menu_dialog_variable+0x4d>
    9980:	90 93 13 0b 	sts	0x0B13, r25	; 0x800b13 <menu_dialog_variable+0x4e>
    9984:	a0 93 14 0b 	sts	0x0B14, r26	; 0x800b14 <menu_dialog_variable+0x4f>
    9988:	b0 93 15 0b 	sts	0x0B15, r27	; 0x800b15 <menu_dialog_variable+0x50>
    998c:	00 93 11 0b 	sts	0x0B11, r16	; 0x800b11 <menu_dialog_variable+0x4c>
    9990:	10 93 16 0b 	sts	0x0B16, r17	; 0x800b16 <menu_dialog_variable+0x51>
    9994:	00 93 10 0b 	sts	0x0B10, r16	; 0x800b10 <menu_dialog_variable+0x4b>
    9998:	80 ee       	ldi	r24, 0xE0	; 224
    999a:	9b e4       	ldi	r25, 0x4B	; 75
    999c:	90 93 18 0b 	sts	0x0B18, r25	; 0x800b18 <menu_dialog_variable+0x53>
    99a0:	80 93 17 0b 	sts	0x0B17, r24	; 0x800b17 <menu_dialog_variable+0x52>
_Z16preload_pid_menujjh():
    99a4:	df 91       	pop	r29
    99a6:	cf 91       	pop	r28
    99a8:	1f 91       	pop	r17
    99aa:	0f 91       	pop	r16
    99ac:	ff 90       	pop	r15
    99ae:	ef 90       	pop	r14
    99b0:	df 90       	pop	r13
    99b2:	cf 90       	pop	r12
    99b4:	bf 90       	pop	r11
    99b6:	af 90       	pop	r10
    99b8:	9f 90       	pop	r9
    99ba:	8f 90       	pop	r8
    99bc:	7f 90       	pop	r7
    99be:	6f 90       	pop	r6
    99c0:	5f 90       	pop	r5
    99c2:	4f 90       	pop	r4
    99c4:	08 95       	ret

000099c6 <button_click_ring_term_set_pid_default(unsigned int, unsigned int, unsigned char)>:
_Z38button_click_ring_term_set_pid_defaultjjh():
    99c6:	cf 93       	push	r28
    99c8:	df 93       	push	r29
    99ca:	eb 01       	movw	r28, r22
    99cc:	40 e0       	ldi	r20, 0x00	; 0
    99ce:	50 e0       	ldi	r21, 0x00	; 0
    99d0:	60 e8       	ldi	r22, 0x80	; 128
    99d2:	7f e3       	ldi	r23, 0x3F	; 63
    99d4:	8c 2f       	mov	r24, r28
    99d6:	0e 94 8a b9 	call	0x17314	; 0x17314 <thermostat_ring_pid_set_kp(unsigned char, float)>
    99da:	40 e0       	ldi	r20, 0x00	; 0
    99dc:	50 e0       	ldi	r21, 0x00	; 0
    99de:	60 e0       	ldi	r22, 0x00	; 0
    99e0:	7f e3       	ldi	r23, 0x3F	; 63
    99e2:	8c 2f       	mov	r24, r28
    99e4:	0e 94 9d b9 	call	0x1733a	; 0x1733a <thermostat_ring_pid_set_ki(unsigned char, float)>
    99e8:	40 e0       	ldi	r20, 0x00	; 0
    99ea:	50 e0       	ldi	r21, 0x00	; 0
    99ec:	60 e8       	ldi	r22, 0x80	; 128
    99ee:	7f e3       	ldi	r23, 0x3F	; 63
    99f0:	8c 2f       	mov	r24, r28
    99f2:	0e 94 b0 b9 	call	0x17360	; 0x17360 <thermostat_ring_pid_set_kd(unsigned char, float)>
    99f6:	6c e3       	ldi	r22, 0x3C	; 60
    99f8:	8c 2f       	mov	r24, r28
    99fa:	0e 94 c3 b9 	call	0x17386	; 0x17386 <thermostat_ring_pid_set_time(unsigned char, unsigned char)>
    99fe:	40 e0       	ldi	r20, 0x00	; 0
    9a00:	be 01       	movw	r22, r28
    9a02:	90 e0       	ldi	r25, 0x00	; 0
    9a04:	80 e0       	ldi	r24, 0x00	; 0
    9a06:	df 91       	pop	r29
    9a08:	cf 91       	pop	r28
    9a0a:	0c 94 20 4c 	jmp	0x9840	; 0x9840 <preload_pid_menu(unsigned int, unsigned int, unsigned char)>

00009a0e <display_function_set_variable_minus(unsigned int, unsigned int, unsigned char)>:
_Z35display_function_set_variable_minusjjh():
    9a0e:	cf 92       	push	r12
    9a10:	df 92       	push	r13
    9a12:	ef 92       	push	r14
    9a14:	ff 92       	push	r15
    9a16:	0f 93       	push	r16
    9a18:	1f 93       	push	r17
    9a1a:	cf 93       	push	r28
    9a1c:	df 93       	push	r29
    9a1e:	25 e1       	ldi	r18, 0x15	; 21
    9a20:	28 9f       	mul	r18, r24
    9a22:	e0 01       	movw	r28, r0
    9a24:	29 9f       	mul	r18, r25
    9a26:	d0 0d       	add	r29, r0
    9a28:	11 24       	eor	r1, r1
    9a2a:	cb 53       	subi	r28, 0x3B	; 59
    9a2c:	d5 4f       	sbci	r29, 0xF5	; 245
    9a2e:	2e 85       	ldd	r18, Y+14	; 0x0e
    9a30:	3f 85       	ldd	r19, Y+15	; 0x0f
    9a32:	48 89       	ldd	r20, Y+16	; 0x10
    9a34:	59 89       	ldd	r21, Y+17	; 0x11
    9a36:	68 81       	ld	r22, Y
    9a38:	79 81       	ldd	r23, Y+1	; 0x01
    9a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    9a3c:	9b 81       	ldd	r25, Y+3	; 0x03
    9a3e:	0f 94 db 13 	call	0x227b6	; 0x227b6 <__subsf3>
    9a42:	6b 01       	movw	r12, r22
    9a44:	7c 01       	movw	r14, r24
    9a46:	28 85       	ldd	r18, Y+8	; 0x08
    9a48:	39 85       	ldd	r19, Y+9	; 0x09
    9a4a:	4a 85       	ldd	r20, Y+10	; 0x0a
    9a4c:	5b 85       	ldd	r21, Y+11	; 0x0b
    9a4e:	0f 94 a7 15 	call	0x22b4e	; 0x22b4e <__gesf2>
    9a52:	87 fd       	sbrc	r24, 7
    9a54:	22 c0       	rjmp	.+68     	; 0x9a9a <display_function_set_variable_minus(unsigned int, unsigned int, unsigned char)+0x8c>
    9a56:	81 e0       	ldi	r24, 0x01	; 1
    9a58:	80 93 c4 0a 	sts	0x0AC4, r24	; 0x800ac4 <menu_dialog_variable_change>
    9a5c:	c8 82       	st	Y, r12
    9a5e:	d9 82       	std	Y+1, r13	; 0x01
    9a60:	ea 82       	std	Y+2, r14	; 0x02
    9a62:	fb 82       	std	Y+3, r15	; 0x03
    9a64:	8c 85       	ldd	r24, Y+12	; 0x0c
    9a66:	81 30       	cpi	r24, 0x01	; 1
    9a68:	c1 f4       	brne	.+48     	; 0x9a9a <display_function_set_variable_minus(unsigned int, unsigned int, unsigned char)+0x8c>
    9a6a:	0b 89       	ldd	r16, Y+19	; 0x13
    9a6c:	1c 89       	ldd	r17, Y+20	; 0x14
    9a6e:	c7 01       	movw	r24, r14
    9a70:	b6 01       	movw	r22, r12
    9a72:	0e 94 6b e4 	call	0x1c8d6	; 0x1c8d6 <float_to_int(float)>
    9a76:	48 81       	ld	r20, Y
    9a78:	59 81       	ldd	r21, Y+1	; 0x01
    9a7a:	6a 81       	ldd	r22, Y+2	; 0x02
    9a7c:	7b 81       	ldd	r23, Y+3	; 0x03
    9a7e:	9a 89       	ldd	r25, Y+18	; 0x12
    9a80:	28 2f       	mov	r18, r24
    9a82:	89 2f       	mov	r24, r25
    9a84:	90 e0       	ldi	r25, 0x00	; 0
    9a86:	f8 01       	movw	r30, r16
    9a88:	df 91       	pop	r29
    9a8a:	cf 91       	pop	r28
    9a8c:	1f 91       	pop	r17
    9a8e:	0f 91       	pop	r16
    9a90:	ff 90       	pop	r15
    9a92:	ef 90       	pop	r14
    9a94:	df 90       	pop	r13
    9a96:	cf 90       	pop	r12
    9a98:	19 94       	eijmp
    9a9a:	df 91       	pop	r29
    9a9c:	cf 91       	pop	r28
    9a9e:	1f 91       	pop	r17
    9aa0:	0f 91       	pop	r16
    9aa2:	ff 90       	pop	r15
    9aa4:	ef 90       	pop	r14
    9aa6:	df 90       	pop	r13
    9aa8:	cf 90       	pop	r12
    9aaa:	08 95       	ret

00009aac <display_function_set_variable_plus(unsigned int, unsigned int, unsigned char)>:
_Z34display_function_set_variable_plusjjh():
    9aac:	cf 92       	push	r12
    9aae:	df 92       	push	r13
    9ab0:	ef 92       	push	r14
    9ab2:	ff 92       	push	r15
    9ab4:	0f 93       	push	r16
    9ab6:	1f 93       	push	r17
    9ab8:	cf 93       	push	r28
    9aba:	df 93       	push	r29
    9abc:	25 e1       	ldi	r18, 0x15	; 21
    9abe:	28 9f       	mul	r18, r24
    9ac0:	e0 01       	movw	r28, r0
    9ac2:	29 9f       	mul	r18, r25
    9ac4:	d0 0d       	add	r29, r0
    9ac6:	11 24       	eor	r1, r1
    9ac8:	cb 53       	subi	r28, 0x3B	; 59
    9aca:	d5 4f       	sbci	r29, 0xF5	; 245
    9acc:	2e 85       	ldd	r18, Y+14	; 0x0e
    9ace:	3f 85       	ldd	r19, Y+15	; 0x0f
    9ad0:	48 89       	ldd	r20, Y+16	; 0x10
    9ad2:	59 89       	ldd	r21, Y+17	; 0x11
    9ad4:	68 81       	ld	r22, Y
    9ad6:	79 81       	ldd	r23, Y+1	; 0x01
    9ad8:	8a 81       	ldd	r24, Y+2	; 0x02
    9ada:	9b 81       	ldd	r25, Y+3	; 0x03
    9adc:	0f 94 dc 13 	call	0x227b8	; 0x227b8 <__addsf3>
    9ae0:	6b 01       	movw	r12, r22
    9ae2:	7c 01       	movw	r14, r24
    9ae4:	2c 81       	ldd	r18, Y+4	; 0x04
    9ae6:	3d 81       	ldd	r19, Y+5	; 0x05
    9ae8:	4e 81       	ldd	r20, Y+6	; 0x06
    9aea:	5f 81       	ldd	r21, Y+7	; 0x07
    9aec:	0f 94 48 14 	call	0x22890	; 0x22890 <__cmpsf2>
    9af0:	18 16       	cp	r1, r24
    9af2:	14 f1       	brlt	.+68     	; 0x9b38 <display_function_set_variable_plus(unsigned int, unsigned int, unsigned char)+0x8c>
    9af4:	81 e0       	ldi	r24, 0x01	; 1
    9af6:	80 93 c4 0a 	sts	0x0AC4, r24	; 0x800ac4 <menu_dialog_variable_change>
    9afa:	c8 82       	st	Y, r12
    9afc:	d9 82       	std	Y+1, r13	; 0x01
    9afe:	ea 82       	std	Y+2, r14	; 0x02
    9b00:	fb 82       	std	Y+3, r15	; 0x03
    9b02:	8c 85       	ldd	r24, Y+12	; 0x0c
    9b04:	81 30       	cpi	r24, 0x01	; 1
    9b06:	c1 f4       	brne	.+48     	; 0x9b38 <display_function_set_variable_plus(unsigned int, unsigned int, unsigned char)+0x8c>
    9b08:	0b 89       	ldd	r16, Y+19	; 0x13
    9b0a:	1c 89       	ldd	r17, Y+20	; 0x14
    9b0c:	c7 01       	movw	r24, r14
    9b0e:	b6 01       	movw	r22, r12
    9b10:	0e 94 6b e4 	call	0x1c8d6	; 0x1c8d6 <float_to_int(float)>
    9b14:	48 81       	ld	r20, Y
    9b16:	59 81       	ldd	r21, Y+1	; 0x01
    9b18:	6a 81       	ldd	r22, Y+2	; 0x02
    9b1a:	7b 81       	ldd	r23, Y+3	; 0x03
    9b1c:	9a 89       	ldd	r25, Y+18	; 0x12
    9b1e:	28 2f       	mov	r18, r24
    9b20:	89 2f       	mov	r24, r25
    9b22:	90 e0       	ldi	r25, 0x00	; 0
    9b24:	f8 01       	movw	r30, r16
    9b26:	df 91       	pop	r29
    9b28:	cf 91       	pop	r28
    9b2a:	1f 91       	pop	r17
    9b2c:	0f 91       	pop	r16
    9b2e:	ff 90       	pop	r15
    9b30:	ef 90       	pop	r14
    9b32:	df 90       	pop	r13
    9b34:	cf 90       	pop	r12
    9b36:	19 94       	eijmp
    9b38:	df 91       	pop	r29
    9b3a:	cf 91       	pop	r28
    9b3c:	1f 91       	pop	r17
    9b3e:	0f 91       	pop	r16
    9b40:	ff 90       	pop	r15
    9b42:	ef 90       	pop	r14
    9b44:	df 90       	pop	r13
    9b46:	cf 90       	pop	r12
    9b48:	08 95       	ret

00009b4a <button_set_brightness_auto_shutdown_select_time_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z65button_set_brightness_auto_shutdown_select_time_get_status_stringhhhPcS_():
    9b4a:	0f 93       	push	r16
    9b4c:	1f 93       	push	r17
    9b4e:	48 2f       	mov	r20, r24
    9b50:	c9 01       	movw	r24, r18
    9b52:	f8 01       	movw	r30, r16
    9b54:	10 82       	st	Z, r1
    9b56:	41 11       	cpse	r20, r1
    9b58:	07 c0       	rjmp	.+14     	; 0x9b68 <button_set_brightness_auto_shutdown_select_time_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x1e>
    9b5a:	6b ea       	ldi	r22, 0xAB	; 171
    9b5c:	70 e8       	ldi	r23, 0x80	; 128
    9b5e:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    9b62:	1f 91       	pop	r17
    9b64:	0f 91       	pop	r16
    9b66:	08 95       	ret
    9b68:	41 30       	cpi	r20, 0x01	; 1
    9b6a:	29 f4       	brne	.+10     	; 0x9b76 <button_set_brightness_auto_shutdown_select_time_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x2c>
    9b6c:	66 e9       	ldi	r22, 0x96	; 150
    9b6e:	72 e0       	ldi	r23, 0x02	; 2
    9b70:	0f 94 67 1a 	call	0x234ce	; 0x234ce <strcpy>
    9b74:	f6 cf       	rjmp	.-20     	; 0x9b62 <button_set_brightness_auto_shutdown_select_time_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x18>
    9b76:	6d e9       	ldi	r22, 0x9D	; 157
    9b78:	72 e0       	ldi	r23, 0x02	; 2
    9b7a:	42 30       	cpi	r20, 0x02	; 2
    9b7c:	61 f0       	breq	.+24     	; 0x9b96 <button_set_brightness_auto_shutdown_select_time_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x4c>
    9b7e:	63 ea       	ldi	r22, 0xA3	; 163
    9b80:	72 e0       	ldi	r23, 0x02	; 2
    9b82:	43 30       	cpi	r20, 0x03	; 3
    9b84:	41 f0       	breq	.+16     	; 0x9b96 <button_set_brightness_auto_shutdown_select_time_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x4c>
    9b86:	69 ea       	ldi	r22, 0xA9	; 169
    9b88:	72 e0       	ldi	r23, 0x02	; 2
    9b8a:	44 30       	cpi	r20, 0x04	; 4
    9b8c:	21 f0       	breq	.+8      	; 0x9b96 <button_set_brightness_auto_shutdown_select_time_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x4c>
    9b8e:	45 30       	cpi	r20, 0x05	; 5
    9b90:	41 f7       	brne	.-48     	; 0x9b62 <button_set_brightness_auto_shutdown_select_time_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x18>
    9b92:	6f ea       	ldi	r22, 0xAF	; 175
    9b94:	72 e0       	ldi	r23, 0x02	; 2
    9b96:	1f 91       	pop	r17
    9b98:	0f 91       	pop	r16
    9b9a:	0d 94 67 1a 	jmp	0x234ce	; 0x234ce <strcpy>

00009b9e <display_element_set_string_del_char(unsigned int, unsigned int, unsigned char)>:
_Z35display_element_set_string_del_charjjh():
    9b9e:	83 e8       	ldi	r24, 0x83	; 131
    9ba0:	9a e0       	ldi	r25, 0x0A	; 10
    9ba2:	fc 01       	movw	r30, r24
    9ba4:	01 90       	ld	r0, Z+
    9ba6:	00 20       	and	r0, r0
    9ba8:	e9 f7       	brne	.-6      	; 0x9ba4 <display_element_set_string_del_char(unsigned int, unsigned int, unsigned char)+0x6>
    9baa:	cf 01       	movw	r24, r30
    9bac:	84 58       	subi	r24, 0x84	; 132
    9bae:	9a 40       	sbci	r25, 0x0A	; 10
    9bb0:	88 23       	and	r24, r24
    9bb2:	29 f0       	breq	.+10     	; 0x9bbe <display_element_set_string_del_char(unsigned int, unsigned int, unsigned char)+0x20>
    9bb4:	99 27       	eor	r25, r25
    9bb6:	fc 01       	movw	r30, r24
    9bb8:	ee 57       	subi	r30, 0x7E	; 126
    9bba:	f5 4f       	sbci	r31, 0xF5	; 245
    9bbc:	10 82       	st	Z, r1
    9bbe:	08 95       	ret

00009bc0 <menu_tds_save_offset(unsigned int, float, unsigned char)>:
_Z20menu_tds_save_offsetjfh():
    9bc0:	cf 93       	push	r28
    9bc2:	df 93       	push	r29
_Z35display_function_get_variable_floath():
    9bc4:	95 e1       	ldi	r25, 0x15	; 21
    9bc6:	89 9f       	mul	r24, r25
    9bc8:	e0 01       	movw	r28, r0
    9bca:	11 24       	eor	r1, r1
    9bcc:	cb 53       	subi	r28, 0x3B	; 59
    9bce:	d5 4f       	sbci	r29, 0xF5	; 245
_Z20menu_tds_save_offsetjfh():
    9bd0:	20 e0       	ldi	r18, 0x00	; 0
    9bd2:	30 e0       	ldi	r19, 0x00	; 0
    9bd4:	4a e7       	ldi	r20, 0x7A	; 122
    9bd6:	54 e4       	ldi	r21, 0x44	; 68
    9bd8:	68 81       	ld	r22, Y
    9bda:	79 81       	ldd	r23, Y+1	; 0x01
    9bdc:	8a 81       	ldd	r24, Y+2	; 0x02
    9bde:	9b 81       	ldd	r25, Y+3	; 0x03
    9be0:	0f 94 ac 15 	call	0x22b58	; 0x22b58 <__mulsf3>
    9be4:	0f 94 bf 14 	call	0x2297e	; 0x2297e <__fixsfsi>
    9be8:	8a 89       	ldd	r24, Y+18	; 0x12
    9bea:	df 91       	pop	r29
    9bec:	cf 91       	pop	r28
    9bee:	0c 94 54 b3 	jmp	0x166a8	; 0x166a8 <tds_set_offset(unsigned char, int)>

00009bf2 <menu_tds_save_period(unsigned int, float, unsigned char)>:
_Z20menu_tds_save_periodjfh():
    9bf2:	cf 93       	push	r28
    9bf4:	df 93       	push	r29
_Z35display_function_get_variable_floath():
    9bf6:	95 e1       	ldi	r25, 0x15	; 21
    9bf8:	89 9f       	mul	r24, r25
    9bfa:	e0 01       	movw	r28, r0
    9bfc:	11 24       	eor	r1, r1
    9bfe:	cb 53       	subi	r28, 0x3B	; 59
    9c00:	d5 4f       	sbci	r29, 0xF5	; 245
_Z20menu_tds_save_periodjfh():
    9c02:	68 81       	ld	r22, Y
    9c04:	79 81       	ldd	r23, Y+1	; 0x01
    9c06:	8a 81       	ldd	r24, Y+2	; 0x02
    9c08:	9b 81       	ldd	r25, Y+3	; 0x03
    9c0a:	0f 94 c6 14 	call	0x2298c	; 0x2298c <__fixunssfsi>
    9c0e:	8a 89       	ldd	r24, Y+18	; 0x12
    9c10:	df 91       	pop	r29
    9c12:	cf 91       	pop	r28
    9c14:	0c 94 96 b3 	jmp	0x1672c	; 0x1672c <tds_set_period(unsigned char, unsigned char)>

00009c18 <helper_tds_associate(unsigned int, unsigned int, unsigned char)>:
_Z20helper_tds_associatejjh():
    9c18:	0c 94 ab b4 	jmp	0x16956	; 0x16956 <tds_associate(unsigned char)>

00009c1c <button_select_term_mode_onclick(unsigned int, unsigned int, unsigned char)>:
_Z31button_select_term_mode_onclickjjh():
    9c1c:	86 2f       	mov	r24, r22
    9c1e:	60 e0       	ldi	r22, 0x00	; 0
    9c20:	44 23       	and	r20, r20
    9c22:	61 f0       	breq	.+24     	; 0x9c3c <button_select_term_mode_onclick(unsigned int, unsigned int, unsigned char)+0x20>
    9c24:	61 e0       	ldi	r22, 0x01	; 1
    9c26:	41 30       	cpi	r20, 0x01	; 1
    9c28:	49 f0       	breq	.+18     	; 0x9c3c <button_select_term_mode_onclick(unsigned int, unsigned int, unsigned char)+0x20>
    9c2a:	67 e0       	ldi	r22, 0x07	; 7
    9c2c:	42 30       	cpi	r20, 0x02	; 2
    9c2e:	31 f0       	breq	.+12     	; 0x9c3c <button_select_term_mode_onclick(unsigned int, unsigned int, unsigned char)+0x20>
    9c30:	62 e0       	ldi	r22, 0x02	; 2
    9c32:	43 30       	cpi	r20, 0x03	; 3
    9c34:	19 f0       	breq	.+6      	; 0x9c3c <button_select_term_mode_onclick(unsigned int, unsigned int, unsigned char)+0x20>
    9c36:	44 30       	cpi	r20, 0x04	; 4
    9c38:	19 f4       	brne	.+6      	; 0x9c40 <button_select_term_mode_onclick(unsigned int, unsigned int, unsigned char)+0x24>
    9c3a:	68 e0       	ldi	r22, 0x08	; 8
    9c3c:	0e 94 66 b8 	call	0x170cc	; 0x170cc <thermostat_ring_set_mode(unsigned char, unsigned char)>
    9c40:	81 e0       	ldi	r24, 0x01	; 1
    9c42:	80 93 79 0a 	sts	0x0A79, r24	; 0x800a79 <change_term_mode>
    9c46:	08 95       	ret

00009c48 <button_select_term_ring_input_in_dialog_onclick(unsigned int, unsigned int, unsigned char)>:
_Z47button_select_term_ring_input_in_dialog_onclickjjh():
    9c48:	86 2f       	mov	r24, r22
    9c4a:	64 2f       	mov	r22, r20
    9c4c:	0e 94 56 b8 	call	0x170ac	; 0x170ac <thermostat_ring_set_asociate_tds(unsigned char, unsigned char)>
    9c50:	84 e0       	ldi	r24, 0x04	; 4
    9c52:	80 93 79 0a 	sts	0x0A79, r24	; 0x800a79 <change_term_mode>
    9c56:	08 95       	ret

00009c58 <button_deassociate_input_sensor_for_term_onclick(unsigned int, unsigned int, unsigned char)>:
_Z48button_deassociate_input_sensor_for_term_onclickjjh():
    9c58:	86 2f       	mov	r24, r22
    9c5a:	6f ef       	ldi	r22, 0xFF	; 255
    9c5c:	0e 94 56 b8 	call	0x170ac	; 0x170ac <thermostat_ring_set_asociate_tds(unsigned char, unsigned char)>
    9c60:	84 e0       	ldi	r24, 0x04	; 4
    9c62:	80 93 79 0a 	sts	0x0A79, r24	; 0x800a79 <change_term_mode>
    9c66:	08 95       	ret

00009c68 <helper_thermostat_button_activate_ring_onclick(unsigned int, unsigned int, unsigned char)>:
_Z46helper_thermostat_button_activate_ring_onclickjjh():
    9c68:	61 e0       	ldi	r22, 0x01	; 1
    9c6a:	0c 94 02 b8 	jmp	0x17004	; 0x17004 <thermostat_ring_set_active(unsigned char, unsigned char)>

00009c6e <helper_thermostat_button_deactivate_ring_onclick(unsigned int, unsigned int, unsigned char)>:
_Z48helper_thermostat_button_deactivate_ring_onclickjjh():
    9c6e:	0c 94 46 bc 	jmp	0x1788c	; 0x1788c <thermostat_ring_clear(unsigned char)>

00009c72 <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z54get_function_one_wire_associate_or_setting_text_buttonhhhPcS_():
    9c72:	6f 92       	push	r6
    9c74:	7f 92       	push	r7
    9c76:	8f 92       	push	r8
    9c78:	9f 92       	push	r9
    9c7a:	af 92       	push	r10
    9c7c:	bf 92       	push	r11
    9c7e:	cf 92       	push	r12
    9c80:	df 92       	push	r13
    9c82:	ef 92       	push	r14
    9c84:	ff 92       	push	r15
    9c86:	0f 93       	push	r16
    9c88:	1f 93       	push	r17
    9c8a:	cf 93       	push	r28
    9c8c:	df 93       	push	r29
    9c8e:	cd b7       	in	r28, 0x3d	; 61
    9c90:	de b7       	in	r29, 0x3e	; 62
    9c92:	6a 97       	sbiw	r28, 0x1a	; 26
    9c94:	0f b6       	in	r0, 0x3f	; 63
    9c96:	f8 94       	cli
    9c98:	de bf       	out	0x3e, r29	; 62
    9c9a:	0f be       	out	0x3f, r0	; 63
    9c9c:	cd bf       	out	0x3d, r28	; 61
    9c9e:	f8 2e       	mov	r15, r24
    9ca0:	92 2e       	mov	r9, r18
    9ca2:	83 2e       	mov	r8, r19
    9ca4:	68 01       	movw	r12, r16
    9ca6:	60 e1       	ldi	r22, 0x10	; 16
    9ca8:	73 e8       	ldi	r23, 0x83	; 131
    9caa:	82 2f       	mov	r24, r18
    9cac:	93 2f       	mov	r25, r19
    9cae:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    9cb2:	6c e4       	ldi	r22, 0x4C	; 76
    9cb4:	73 e0       	ldi	r23, 0x03	; 3
    9cb6:	c8 01       	movw	r24, r16
    9cb8:	0f 94 67 1a 	call	0x234ce	; 0x234ce <strcpy>
    9cbc:	4b e0       	ldi	r20, 0x0B	; 11
    9cbe:	4f 9d       	mul	r20, r15
    9cc0:	c0 01       	movw	r24, r0
    9cc2:	11 24       	eor	r1, r1
    9cc4:	9c 01       	movw	r18, r24
    9cc6:	25 56       	subi	r18, 0x65	; 101
    9cc8:	3f 4e       	sbci	r19, 0xEF	; 239
    9cca:	59 01       	movw	r10, r18
    9ccc:	f9 01       	movw	r30, r18
    9cce:	81 85       	ldd	r24, Z+9	; 0x09
    9cd0:	81 30       	cpi	r24, 0x01	; 1
    9cd2:	99 f5       	brne	.+102    	; 0x9d3a <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)+0xc8>
    9cd4:	a9 01       	movw	r20, r18
    9cd6:	82 e0       	ldi	r24, 0x02	; 2
    9cd8:	e8 2e       	mov	r14, r24
    9cda:	00 e1       	ldi	r16, 0x10	; 16
    9cdc:	28 e0       	ldi	r18, 0x08	; 8
    9cde:	6a e3       	ldi	r22, 0x3A	; 58
    9ce0:	ce 01       	movw	r24, r28
    9ce2:	01 96       	adiw	r24, 0x01	; 1
    9ce4:	3c 01       	movw	r6, r24
    9ce6:	0e 94 e9 e4 	call	0x1c9d2	; 0x1c9d2 <createString(char*, char, unsigned char*, unsigned char, unsigned char, unsigned char)>
    9cea:	7f 92       	push	r7
    9cec:	6f 92       	push	r6
    9cee:	1f 92       	push	r1
    9cf0:	ff 92       	push	r15
    9cf2:	85 eb       	ldi	r24, 0xB5	; 181
    9cf4:	92 e0       	ldi	r25, 0x02	; 2
    9cf6:	9f 93       	push	r25
    9cf8:	8f 93       	push	r24
    9cfa:	8f 92       	push	r8
    9cfc:	9f 92       	push	r9
    9cfe:	0f 94 a6 1b 	call	0x2374c	; 0x2374c <sprintf>
    9d02:	0f b6       	in	r0, 0x3f	; 63
    9d04:	f8 94       	cli
    9d06:	de bf       	out	0x3e, r29	; 62
    9d08:	0f be       	out	0x3f, r0	; 63
    9d0a:	cd bf       	out	0x3d, r28	; 61
    9d0c:	f5 01       	movw	r30, r10
    9d0e:	82 85       	ldd	r24, Z+10	; 0x0a
    9d10:	8f 3f       	cpi	r24, 0xFF	; 255
    9d12:	41 f1       	breq	.+80     	; 0x9d64 <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)+0xf2>
    9d14:	68 e4       	ldi	r22, 0x48	; 72
    9d16:	73 e8       	ldi	r23, 0x83	; 131
    9d18:	c6 01       	movw	r24, r12
    9d1a:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    9d1e:	b3 01       	movw	r22, r6
    9d20:	f5 01       	movw	r30, r10
    9d22:	82 85       	ldd	r24, Z+10	; 0x0a
    9d24:	0e 94 06 b3 	call	0x1660c	; 0x1660c <tds_get_name(unsigned char, char*)>
    9d28:	61 e9       	ldi	r22, 0x91	; 145
    9d2a:	78 e0       	ldi	r23, 0x08	; 8
    9d2c:	c6 01       	movw	r24, r12
    9d2e:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    9d32:	b3 01       	movw	r22, r6
    9d34:	c6 01       	movw	r24, r12
    9d36:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    9d3a:	6a 96       	adiw	r28, 0x1a	; 26
    9d3c:	0f b6       	in	r0, 0x3f	; 63
    9d3e:	f8 94       	cli
    9d40:	de bf       	out	0x3e, r29	; 62
    9d42:	0f be       	out	0x3f, r0	; 63
    9d44:	cd bf       	out	0x3d, r28	; 61
    9d46:	df 91       	pop	r29
    9d48:	cf 91       	pop	r28
    9d4a:	1f 91       	pop	r17
    9d4c:	0f 91       	pop	r16
    9d4e:	ff 90       	pop	r15
    9d50:	ef 90       	pop	r14
    9d52:	df 90       	pop	r13
    9d54:	cf 90       	pop	r12
    9d56:	bf 90       	pop	r11
    9d58:	af 90       	pop	r10
    9d5a:	9f 90       	pop	r9
    9d5c:	8f 90       	pop	r8
    9d5e:	7f 90       	pop	r7
    9d60:	6f 90       	pop	r6
    9d62:	08 95       	ret
    9d64:	6b e5       	ldi	r22, 0x5B	; 91
    9d66:	73 e8       	ldi	r23, 0x83	; 131
    9d68:	c6 01       	movw	r24, r12
    9d6a:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    9d6e:	e5 cf       	rjmp	.-54     	; 0x9d3a <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)+0xc8>

00009d70 <button_change_brightness_display_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z50button_change_brightness_display_get_status_stringhhhPcS_():
    9d70:	0f 93       	push	r16
    9d72:	1f 93       	push	r17
    9d74:	cf 93       	push	r28
    9d76:	df 93       	push	r29
    9d78:	00 d0       	rcall	.+0      	; 0x9d7a <button_change_brightness_display_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0xa>
    9d7a:	00 d0       	rcall	.+0      	; 0x9d7c <button_change_brightness_display_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0xc>
    9d7c:	1f 92       	push	r1
    9d7e:	1f 92       	push	r1
    9d80:	cd b7       	in	r28, 0x3d	; 61
    9d82:	de b7       	in	r29, 0x3e	; 62
    9d84:	c9 01       	movw	r24, r18
    9d86:	61 e4       	ldi	r22, 0x41	; 65
    9d88:	7f e7       	ldi	r23, 0x7F	; 127
    9d8a:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    9d8e:	80 91 2a 0b 	lds	r24, 0x0B2A	; 0x800b2a <brigthness_display_mode>
    9d92:	87 ff       	sbrs	r24, 7
    9d94:	23 c0       	rjmp	.+70     	; 0x9ddc <button_change_brightness_display_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x6c>
    9d96:	66 ed       	ldi	r22, 0xD6	; 214
    9d98:	7d e7       	ldi	r23, 0x7D	; 125
    9d9a:	c8 01       	movw	r24, r16
    9d9c:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    9da0:	80 91 2b 0b 	lds	r24, 0x0B2B	; 0x800b2b <brigthness_display_auto_values>
itoa():
    9da4:	4a e0       	ldi	r20, 0x0A	; 10
    9da6:	be 01       	movw	r22, r28
    9da8:	6f 5f       	subi	r22, 0xFF	; 255
    9daa:	7f 4f       	sbci	r23, 0xFF	; 255
    9dac:	90 e0       	ldi	r25, 0x00	; 0
    9dae:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z50button_change_brightness_display_get_status_stringhhhPcS_():
    9db2:	61 e9       	ldi	r22, 0x91	; 145
    9db4:	78 e0       	ldi	r23, 0x08	; 8
    9db6:	c8 01       	movw	r24, r16
    9db8:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    9dbc:	be 01       	movw	r22, r28
    9dbe:	6f 5f       	subi	r22, 0xFF	; 255
    9dc0:	7f 4f       	sbci	r23, 0xFF	; 255
    9dc2:	c8 01       	movw	r24, r16
    9dc4:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    9dc8:	61 e9       	ldi	r22, 0x91	; 145
    9dca:	78 e0       	ldi	r23, 0x08	; 8
    9dcc:	c8 01       	movw	r24, r16
    9dce:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    9dd2:	6c eb       	ldi	r22, 0xBC	; 188
    9dd4:	72 e0       	ldi	r23, 0x02	; 2
    9dd6:	c8 01       	movw	r24, r16
    9dd8:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    9ddc:	80 91 2a 0b 	lds	r24, 0x0B2A	; 0x800b2a <brigthness_display_mode>
    9de0:	87 fd       	sbrc	r24, 7
    9de2:	2d c0       	rjmp	.+90     	; 0x9e3e <button_change_brightness_display_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0xce>
    9de4:	65 ec       	ldi	r22, 0xC5	; 197
    9de6:	7d e7       	ldi	r23, 0x7D	; 125
    9de8:	c8 01       	movw	r24, r16
    9dea:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    9dee:	80 91 2c 0b 	lds	r24, 0x0B2C	; 0x800b2c <brigthness_display_values>
itoa():
    9df2:	4a e0       	ldi	r20, 0x0A	; 10
    9df4:	be 01       	movw	r22, r28
    9df6:	6f 5f       	subi	r22, 0xFF	; 255
    9df8:	7f 4f       	sbci	r23, 0xFF	; 255
    9dfa:	90 e0       	ldi	r25, 0x00	; 0
    9dfc:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z50button_change_brightness_display_get_status_stringhhhPcS_():
    9e00:	61 e9       	ldi	r22, 0x91	; 145
    9e02:	78 e0       	ldi	r23, 0x08	; 8
    9e04:	c8 01       	movw	r24, r16
    9e06:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    9e0a:	be 01       	movw	r22, r28
    9e0c:	6f 5f       	subi	r22, 0xFF	; 255
    9e0e:	7f 4f       	sbci	r23, 0xFF	; 255
    9e10:	c8 01       	movw	r24, r16
    9e12:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    9e16:	61 e9       	ldi	r22, 0x91	; 145
    9e18:	78 e0       	ldi	r23, 0x08	; 8
    9e1a:	c8 01       	movw	r24, r16
    9e1c:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    9e20:	6c eb       	ldi	r22, 0xBC	; 188
    9e22:	72 e0       	ldi	r23, 0x02	; 2
    9e24:	c8 01       	movw	r24, r16
    9e26:	28 96       	adiw	r28, 0x08	; 8
    9e28:	0f b6       	in	r0, 0x3f	; 63
    9e2a:	f8 94       	cli
    9e2c:	de bf       	out	0x3e, r29	; 62
    9e2e:	0f be       	out	0x3f, r0	; 63
    9e30:	cd bf       	out	0x3d, r28	; 61
    9e32:	df 91       	pop	r29
    9e34:	cf 91       	pop	r28
    9e36:	1f 91       	pop	r17
    9e38:	0f 91       	pop	r16
    9e3a:	0d 94 48 1a 	jmp	0x23490	; 0x23490 <strcat>
    9e3e:	28 96       	adiw	r28, 0x08	; 8
    9e40:	0f b6       	in	r0, 0x3f	; 63
    9e42:	f8 94       	cli
    9e44:	de bf       	out	0x3e, r29	; 62
    9e46:	0f be       	out	0x3f, r0	; 63
    9e48:	cd bf       	out	0x3d, r28	; 61
    9e4a:	df 91       	pop	r29
    9e4c:	cf 91       	pop	r28
    9e4e:	1f 91       	pop	r17
    9e50:	0f 91       	pop	r16
    9e52:	08 95       	ret

00009e54 <switch_brightness_automode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z44switch_brightness_automode_get_status_stringhhhPcS_():
    9e54:	0f 93       	push	r16
    9e56:	1f 93       	push	r17
    9e58:	cf 93       	push	r28
    9e5a:	df 93       	push	r29
    9e5c:	00 d0       	rcall	.+0      	; 0x9e5e <switch_brightness_automode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0xa>
    9e5e:	00 d0       	rcall	.+0      	; 0x9e60 <switch_brightness_automode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0xc>
    9e60:	1f 92       	push	r1
    9e62:	1f 92       	push	r1
    9e64:	cd b7       	in	r28, 0x3d	; 61
    9e66:	de b7       	in	r29, 0x3e	; 62
    9e68:	89 01       	movw	r16, r18
    9e6a:	80 91 2a 0b 	lds	r24, 0x0B2A	; 0x800b2a <brigthness_display_mode>
    9e6e:	87 ff       	sbrs	r24, 7
    9e70:	23 c0       	rjmp	.+70     	; 0x9eb8 <switch_brightness_automode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x64>
    9e72:	66 ed       	ldi	r22, 0xD6	; 214
    9e74:	7d e7       	ldi	r23, 0x7D	; 125
    9e76:	c9 01       	movw	r24, r18
    9e78:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    9e7c:	80 91 2b 0b 	lds	r24, 0x0B2B	; 0x800b2b <brigthness_display_auto_values>
itoa():
    9e80:	4a e0       	ldi	r20, 0x0A	; 10
    9e82:	be 01       	movw	r22, r28
    9e84:	6f 5f       	subi	r22, 0xFF	; 255
    9e86:	7f 4f       	sbci	r23, 0xFF	; 255
    9e88:	90 e0       	ldi	r25, 0x00	; 0
    9e8a:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z44switch_brightness_automode_get_status_stringhhhPcS_():
    9e8e:	61 e9       	ldi	r22, 0x91	; 145
    9e90:	78 e0       	ldi	r23, 0x08	; 8
    9e92:	c8 01       	movw	r24, r16
    9e94:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    9e98:	be 01       	movw	r22, r28
    9e9a:	6f 5f       	subi	r22, 0xFF	; 255
    9e9c:	7f 4f       	sbci	r23, 0xFF	; 255
    9e9e:	c8 01       	movw	r24, r16
    9ea0:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    9ea4:	61 e9       	ldi	r22, 0x91	; 145
    9ea6:	78 e0       	ldi	r23, 0x08	; 8
    9ea8:	c8 01       	movw	r24, r16
    9eaa:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    9eae:	6c eb       	ldi	r22, 0xBC	; 188
    9eb0:	72 e0       	ldi	r23, 0x02	; 2
    9eb2:	c8 01       	movw	r24, r16
    9eb4:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    9eb8:	80 91 2a 0b 	lds	r24, 0x0B2A	; 0x800b2a <brigthness_display_mode>
    9ebc:	87 fd       	sbrc	r24, 7
    9ebe:	05 c0       	rjmp	.+10     	; 0x9eca <switch_brightness_automode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x76>
    9ec0:	65 ec       	ldi	r22, 0xC5	; 197
    9ec2:	7d e7       	ldi	r23, 0x7D	; 125
    9ec4:	c8 01       	movw	r24, r16
    9ec6:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    9eca:	28 96       	adiw	r28, 0x08	; 8
    9ecc:	0f b6       	in	r0, 0x3f	; 63
    9ece:	f8 94       	cli
    9ed0:	de bf       	out	0x3e, r29	; 62
    9ed2:	0f be       	out	0x3f, r0	; 63
    9ed4:	cd bf       	out	0x3d, r28	; 61
    9ed6:	df 91       	pop	r29
    9ed8:	cf 91       	pop	r28
    9eda:	1f 91       	pop	r17
    9edc:	0f 91       	pop	r16
    9ede:	08 95       	ret

00009ee0 <button_get_term_ring_is_selected(unsigned int, unsigned int, unsigned char)>:
_Z32button_get_term_ring_is_selectedjjh():
    9ee0:	cf 93       	push	r28
    9ee2:	c4 2f       	mov	r28, r20
    9ee4:	80 91 3a 0b 	lds	r24, 0x0B3A	; 0x800b3a <default_ring>
    9ee8:	84 13       	cpse	r24, r20
    9eea:	06 c0       	rjmp	.+12     	; 0x9ef8 <button_get_term_ring_is_selected(unsigned int, unsigned int, unsigned char)+0x18>
    9eec:	84 2f       	mov	r24, r20
    9eee:	0e 94 fa b7 	call	0x16ff4	; 0x16ff4 <thermostat_ring_get_active(unsigned char)>
    9ef2:	91 e0       	ldi	r25, 0x01	; 1
    9ef4:	81 30       	cpi	r24, 0x01	; 1
    9ef6:	09 f0       	breq	.+2      	; 0x9efa <button_get_term_ring_is_selected(unsigned int, unsigned int, unsigned char)+0x1a>
    9ef8:	90 e0       	ldi	r25, 0x00	; 0
    9efa:	80 91 3a 0b 	lds	r24, 0x0B3A	; 0x800b3a <default_ring>
    9efe:	8c 17       	cp	r24, r28
    9f00:	21 f0       	breq	.+8      	; 0x9f0a <button_get_term_ring_is_selected(unsigned int, unsigned int, unsigned char)+0x2a>
    9f02:	80 91 39 0b 	lds	r24, 0x0B39	; 0x800b39 <last_default_ring>
    9f06:	8c 13       	cpse	r24, r28
    9f08:	92 e0       	ldi	r25, 0x02	; 2
    9f0a:	89 2f       	mov	r24, r25
    9f0c:	cf 91       	pop	r28
    9f0e:	08 95       	ret

00009f10 <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)>:
_Z38button_select_term_mode_get_status_fntjjh():
    9f10:	cf 93       	push	r28
    9f12:	df 93       	push	r29
    9f14:	d6 2f       	mov	r29, r22
    9f16:	c4 2f       	mov	r28, r20
    9f18:	86 2f       	mov	r24, r22
    9f1a:	0e 94 fa b7 	call	0x16ff4	; 0x16ff4 <thermostat_ring_get_active(unsigned char)>
    9f1e:	8f 3f       	cpi	r24, 0xFF	; 255
    9f20:	49 f1       	breq	.+82     	; 0x9f74 <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x64>
    9f22:	8d 2f       	mov	r24, r29
    9f24:	0e 94 5e b8 	call	0x170bc	; 0x170bc <thermostat_ring_get_mode(unsigned char)>
    9f28:	98 2f       	mov	r25, r24
    9f2a:	c1 11       	cpse	r28, r1
    9f2c:	05 c0       	rjmp	.+10     	; 0x9f38 <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x28>
    9f2e:	81 e0       	ldi	r24, 0x01	; 1
    9f30:	99 23       	and	r25, r25
    9f32:	39 f0       	breq	.+14     	; 0x9f42 <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x32>
    9f34:	80 e0       	ldi	r24, 0x00	; 0
    9f36:	05 c0       	rjmp	.+10     	; 0x9f42 <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x32>
    9f38:	c1 30       	cpi	r28, 0x01	; 1
    9f3a:	31 f4       	brne	.+12     	; 0x9f48 <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x38>
    9f3c:	81 e0       	ldi	r24, 0x01	; 1
    9f3e:	91 30       	cpi	r25, 0x01	; 1
    9f40:	c9 f7       	brne	.-14     	; 0x9f34 <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x24>
    9f42:	df 91       	pop	r29
    9f44:	cf 91       	pop	r28
    9f46:	08 95       	ret
    9f48:	c2 30       	cpi	r28, 0x02	; 2
    9f4a:	21 f4       	brne	.+8      	; 0x9f54 <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x44>
    9f4c:	81 e0       	ldi	r24, 0x01	; 1
    9f4e:	97 30       	cpi	r25, 0x07	; 7
    9f50:	89 f7       	brne	.-30     	; 0x9f34 <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x24>
    9f52:	f7 cf       	rjmp	.-18     	; 0x9f42 <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x32>
    9f54:	c3 30       	cpi	r28, 0x03	; 3
    9f56:	21 f4       	brne	.+8      	; 0x9f60 <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x50>
    9f58:	81 e0       	ldi	r24, 0x01	; 1
    9f5a:	92 30       	cpi	r25, 0x02	; 2
    9f5c:	59 f7       	brne	.-42     	; 0x9f34 <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x24>
    9f5e:	f1 cf       	rjmp	.-30     	; 0x9f42 <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x32>
    9f60:	c4 30       	cpi	r28, 0x04	; 4
    9f62:	41 f7       	brne	.-48     	; 0x9f34 <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x24>
    9f64:	81 e0       	ldi	r24, 0x01	; 1
    9f66:	98 30       	cpi	r25, 0x08	; 8
    9f68:	61 f3       	breq	.-40     	; 0x9f42 <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x32>
    9f6a:	93 30       	cpi	r25, 0x03	; 3
    9f6c:	51 f3       	breq	.-44     	; 0x9f42 <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x32>
    9f6e:	95 30       	cpi	r25, 0x05	; 5
    9f70:	09 f7       	brne	.-62     	; 0x9f34 <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x24>
    9f72:	e7 cf       	rjmp	.-50     	; 0x9f42 <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x32>
    9f74:	82 e0       	ldi	r24, 0x02	; 2
    9f76:	e5 cf       	rjmp	.-54     	; 0x9f42 <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x32>

00009f78 <button_click_set_term_heat_or_cool(unsigned int, unsigned int, unsigned char)>:
_Z34button_click_set_term_heat_or_cooljjh():
    9f78:	0f 93       	push	r16
    9f7a:	1f 93       	push	r17
    9f7c:	cf 93       	push	r28
    9f7e:	8c 01       	movw	r16, r24
    9f80:	c6 2f       	mov	r28, r22
    9f82:	86 2f       	mov	r24, r22
    9f84:	0e 94 fa b7 	call	0x16ff4	; 0x16ff4 <thermostat_ring_get_active(unsigned char)>
    9f88:	8f 3f       	cpi	r24, 0xFF	; 255
    9f8a:	79 f0       	breq	.+30     	; 0x9faa <button_click_set_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x32>
    9f8c:	40 e0       	ldi	r20, 0x00	; 0
    9f8e:	03 30       	cpi	r16, 0x03	; 3
    9f90:	11 05       	cpc	r17, r1
    9f92:	21 f0       	breq	.+8      	; 0x9f9c <button_click_set_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x24>
    9f94:	05 30       	cpi	r16, 0x05	; 5
    9f96:	11 05       	cpc	r17, r1
    9f98:	29 f4       	brne	.+10     	; 0x9fa4 <button_click_set_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x2c>
    9f9a:	41 e0       	ldi	r20, 0x01	; 1
    9f9c:	60 e0       	ldi	r22, 0x00	; 0
    9f9e:	8c 2f       	mov	r24, r28
    9fa0:	0e 94 9b b8 	call	0x17136	; 0x17136 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char)>
    9fa4:	82 e0       	ldi	r24, 0x02	; 2
    9fa6:	80 93 79 0a 	sts	0x0A79, r24	; 0x800a79 <change_term_mode>
    9faa:	cf 91       	pop	r28
    9fac:	1f 91       	pop	r17
    9fae:	0f 91       	pop	r16
    9fb0:	08 95       	ret

00009fb2 <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)>:
_Z33display_enable_show_term_mode_manjjh():
    9fb2:	cf 93       	push	r28
    9fb4:	c6 2f       	mov	r28, r22
    9fb6:	86 2f       	mov	r24, r22
    9fb8:	0e 94 fa b7 	call	0x16ff4	; 0x16ff4 <thermostat_ring_get_active(unsigned char)>
    9fbc:	8f 3f       	cpi	r24, 0xFF	; 255
    9fbe:	59 f0       	breq	.+22     	; 0x9fd6 <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)+0x24>
    9fc0:	8c 2f       	mov	r24, r28
    9fc2:	0e 94 5e b8 	call	0x170bc	; 0x170bc <thermostat_ring_get_mode(unsigned char)>
    9fc6:	98 2f       	mov	r25, r24
    9fc8:	81 e0       	ldi	r24, 0x01	; 1
    9fca:	93 30       	cpi	r25, 0x03	; 3
    9fcc:	29 f0       	breq	.+10     	; 0x9fd8 <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)+0x26>
    9fce:	95 30       	cpi	r25, 0x05	; 5
    9fd0:	19 f0       	breq	.+6      	; 0x9fd8 <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)+0x26>
    9fd2:	98 30       	cpi	r25, 0x08	; 8
    9fd4:	09 f0       	breq	.+2      	; 0x9fd8 <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)+0x26>
    9fd6:	80 e0       	ldi	r24, 0x00	; 0
    9fd8:	cf 91       	pop	r28
    9fda:	08 95       	ret

00009fdc <display_enable_show_thermostat_active_ring(unsigned int, unsigned int, unsigned char)>:
_Z42display_enable_show_thermostat_active_ringjjh():
    9fdc:	86 2f       	mov	r24, r22
    9fde:	0e 94 fa b7 	call	0x16ff4	; 0x16ff4 <thermostat_ring_get_active(unsigned char)>
    9fe2:	91 e0       	ldi	r25, 0x01	; 1
    9fe4:	8f 3f       	cpi	r24, 0xFF	; 255
    9fe6:	09 f0       	breq	.+2      	; 0x9fea <display_enable_show_thermostat_active_ring(unsigned int, unsigned int, unsigned char)+0xe>
    9fe8:	90 e0       	ldi	r25, 0x00	; 0
    9fea:	89 2f       	mov	r24, r25
    9fec:	08 95       	ret

00009fee <display_enable_show_thermostat_deactive_ring(unsigned int, unsigned int, unsigned char)>:
_Z44display_enable_show_thermostat_deactive_ringjjh():
    9fee:	86 2f       	mov	r24, r22
    9ff0:	0e 94 fa b7 	call	0x16ff4	; 0x16ff4 <thermostat_ring_get_active(unsigned char)>
    9ff4:	91 e0       	ldi	r25, 0x01	; 1
    9ff6:	8f 3f       	cpi	r24, 0xFF	; 255
    9ff8:	09 f4       	brne	.+2      	; 0x9ffc <display_enable_show_thermostat_deactive_ring(unsigned int, unsigned int, unsigned char)+0xe>
    9ffa:	90 e0       	ldi	r25, 0x00	; 0
    9ffc:	89 2f       	mov	r24, r25
    9ffe:	08 95       	ret

0000a000 <button_change_default_ring_labels_in_dialog(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z43button_change_default_ring_labels_in_dialoghhhPcS_():
    a000:	af 92       	push	r10
    a002:	bf 92       	push	r11
    a004:	cf 92       	push	r12
    a006:	df 92       	push	r13
    a008:	ff 92       	push	r15
    a00a:	0f 93       	push	r16
    a00c:	1f 93       	push	r17
    a00e:	cf 93       	push	r28
    a010:	df 93       	push	r29
    a012:	cd b7       	in	r28, 0x3d	; 61
    a014:	de b7       	in	r29, 0x3e	; 62
    a016:	66 97       	sbiw	r28, 0x16	; 22
    a018:	0f b6       	in	r0, 0x3f	; 63
    a01a:	f8 94       	cli
    a01c:	de bf       	out	0x3e, r29	; 62
    a01e:	0f be       	out	0x3f, r0	; 63
    a020:	cd bf       	out	0x3d, r28	; 61
    a022:	f8 2e       	mov	r15, r24
    a024:	59 01       	movw	r10, r18
    a026:	0e 94 fa b7 	call	0x16ff4	; 0x16ff4 <thermostat_ring_get_active(unsigned char)>
    a02a:	9e 01       	movw	r18, r28
    a02c:	2f 5f       	subi	r18, 0xFF	; 255
    a02e:	3f 4f       	sbci	r19, 0xFF	; 255
    a030:	69 01       	movw	r12, r18
    a032:	68 e1       	ldi	r22, 0x18	; 24
    a034:	74 e8       	ldi	r23, 0x84	; 132
    a036:	8f 3f       	cpi	r24, 0xFF	; 255
    a038:	11 f4       	brne	.+4      	; 0xa03e <button_change_default_ring_labels_in_dialog(unsigned char, unsigned char, unsigned char, char*, char*)+0x3e>
    a03a:	6e e0       	ldi	r22, 0x0E	; 14
    a03c:	74 e8       	ldi	r23, 0x84	; 132
    a03e:	c6 01       	movw	r24, r12
    a040:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    a044:	be 01       	movw	r22, r28
    a046:	63 5f       	subi	r22, 0xF3	; 243
    a048:	7f 4f       	sbci	r23, 0xFF	; 255
    a04a:	8f 2d       	mov	r24, r15
    a04c:	0e 94 9f b7 	call	0x16f3e	; 0x16f3e <thermostat_ring_get_name(unsigned char, char*)>
    a050:	df 92       	push	r13
    a052:	cf 92       	push	r12
    a054:	1f 92       	push	r1
    a056:	ff 92       	push	r15
    a058:	8e eb       	ldi	r24, 0xBE	; 190
    a05a:	92 e0       	ldi	r25, 0x02	; 2
    a05c:	9f 93       	push	r25
    a05e:	8f 93       	push	r24
    a060:	1f 93       	push	r17
    a062:	0f 93       	push	r16
    a064:	0f 94 a6 1b 	call	0x2374c	; 0x2374c <sprintf>
    a068:	be 01       	movw	r22, r28
    a06a:	63 5f       	subi	r22, 0xF3	; 243
    a06c:	7f 4f       	sbci	r23, 0xFF	; 255
    a06e:	c5 01       	movw	r24, r10
    a070:	0f 94 67 1a 	call	0x234ce	; 0x234ce <strcpy>
    a074:	0f b6       	in	r0, 0x3f	; 63
    a076:	f8 94       	cli
    a078:	de bf       	out	0x3e, r29	; 62
    a07a:	0f be       	out	0x3f, r0	; 63
    a07c:	cd bf       	out	0x3d, r28	; 61
    a07e:	66 96       	adiw	r28, 0x16	; 22
    a080:	0f b6       	in	r0, 0x3f	; 63
    a082:	f8 94       	cli
    a084:	de bf       	out	0x3e, r29	; 62
    a086:	0f be       	out	0x3f, r0	; 63
    a088:	cd bf       	out	0x3d, r28	; 61
    a08a:	df 91       	pop	r29
    a08c:	cf 91       	pop	r28
    a08e:	1f 91       	pop	r17
    a090:	0f 91       	pop	r16
    a092:	ff 90       	pop	r15
    a094:	df 90       	pop	r13
    a096:	cf 90       	pop	r12
    a098:	bf 90       	pop	r11
    a09a:	af 90       	pop	r10
    a09c:	08 95       	ret

0000a09e <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z30button_get_default_ring_labelshhhPcS_():
    a09e:	ef 92       	push	r14
    a0a0:	ff 92       	push	r15
    a0a2:	0f 93       	push	r16
    a0a4:	1f 93       	push	r17
    a0a6:	cf 93       	push	r28
    a0a8:	df 93       	push	r29
    a0aa:	00 d0       	rcall	.+0      	; 0xa0ac <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0xe>
    a0ac:	00 d0       	rcall	.+0      	; 0xa0ae <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x10>
    a0ae:	00 d0       	rcall	.+0      	; 0xa0b0 <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x12>
    a0b0:	1f 92       	push	r1
    a0b2:	cd b7       	in	r28, 0x3d	; 61
    a0b4:	de b7       	in	r29, 0x3e	; 62
    a0b6:	c9 01       	movw	r24, r18
    a0b8:	6b ed       	ldi	r22, 0xDB	; 219
    a0ba:	74 e8       	ldi	r23, 0x84	; 132
    a0bc:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    a0c0:	80 91 3a 0b 	lds	r24, 0x0B3A	; 0x800b3a <default_ring>
    a0c4:	8f 3f       	cpi	r24, 0xFF	; 255
    a0c6:	21 f1       	breq	.+72     	; 0xa110 <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x72>
    a0c8:	9e 01       	movw	r18, r28
    a0ca:	2f 5f       	subi	r18, 0xFF	; 255
    a0cc:	3f 4f       	sbci	r19, 0xFF	; 255
    a0ce:	79 01       	movw	r14, r18
    a0d0:	b9 01       	movw	r22, r18
    a0d2:	0e 94 9f b7 	call	0x16f3e	; 0x16f3e <thermostat_ring_get_name(unsigned char, char*)>
    a0d6:	ff 92       	push	r15
    a0d8:	ef 92       	push	r14
    a0da:	89 ec       	ldi	r24, 0xC9	; 201
    a0dc:	92 e0       	ldi	r25, 0x02	; 2
    a0de:	9f 93       	push	r25
    a0e0:	8f 93       	push	r24
    a0e2:	1f 93       	push	r17
    a0e4:	0f 93       	push	r16
    a0e6:	0f 94 a6 1b 	call	0x2374c	; 0x2374c <sprintf>
    a0ea:	0f 90       	pop	r0
    a0ec:	0f 90       	pop	r0
    a0ee:	0f 90       	pop	r0
    a0f0:	0f 90       	pop	r0
    a0f2:	0f 90       	pop	r0
    a0f4:	0f 90       	pop	r0
    a0f6:	2a 96       	adiw	r28, 0x0a	; 10
    a0f8:	0f b6       	in	r0, 0x3f	; 63
    a0fa:	f8 94       	cli
    a0fc:	de bf       	out	0x3e, r29	; 62
    a0fe:	0f be       	out	0x3f, r0	; 63
    a100:	cd bf       	out	0x3d, r28	; 61
    a102:	df 91       	pop	r29
    a104:	cf 91       	pop	r28
    a106:	1f 91       	pop	r17
    a108:	0f 91       	pop	r16
    a10a:	ff 90       	pop	r15
    a10c:	ef 90       	pop	r14
    a10e:	08 95       	ret
    a110:	6e ec       	ldi	r22, 0xCE	; 206
    a112:	71 e8       	ldi	r23, 0x81	; 129
    a114:	c8 01       	movw	r24, r16
    a116:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    a11a:	ed cf       	rjmp	.-38     	; 0xa0f6 <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x58>

0000a11c <dyn_button_show_all_thermostat_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z48dyn_button_show_all_thermostat_get_status_stringhhhPcS_():
    a11c:	cf 92       	push	r12
    a11e:	df 92       	push	r13
    a120:	ef 92       	push	r14
    a122:	ff 92       	push	r15
    a124:	0f 93       	push	r16
    a126:	1f 93       	push	r17
    a128:	cf 93       	push	r28
    a12a:	df 93       	push	r29
    a12c:	00 d0       	rcall	.+0      	; 0xa12e <dyn_button_show_all_thermostat_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x12>
    a12e:	00 d0       	rcall	.+0      	; 0xa130 <dyn_button_show_all_thermostat_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x14>
    a130:	00 d0       	rcall	.+0      	; 0xa132 <dyn_button_show_all_thermostat_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x16>
    a132:	1f 92       	push	r1
    a134:	cd b7       	in	r28, 0x3d	; 61
    a136:	de b7       	in	r29, 0x3e	; 62
    a138:	d2 2e       	mov	r13, r18
    a13a:	c3 2e       	mov	r12, r19
    a13c:	9e 01       	movw	r18, r28
    a13e:	2f 5f       	subi	r18, 0xFF	; 255
    a140:	3f 4f       	sbci	r19, 0xFF	; 255
    a142:	79 01       	movw	r14, r18
    a144:	b9 01       	movw	r22, r18
    a146:	0e 94 9f b7 	call	0x16f3e	; 0x16f3e <thermostat_ring_get_name(unsigned char, char*)>
    a14a:	ff 92       	push	r15
    a14c:	ef 92       	push	r14
    a14e:	89 ec       	ldi	r24, 0xC9	; 201
    a150:	92 e0       	ldi	r25, 0x02	; 2
    a152:	9f 93       	push	r25
    a154:	8f 93       	push	r24
    a156:	cf 92       	push	r12
    a158:	df 92       	push	r13
    a15a:	0f 94 a6 1b 	call	0x2374c	; 0x2374c <sprintf>
    a15e:	6e ec       	ldi	r22, 0xCE	; 206
    a160:	71 e8       	ldi	r23, 0x81	; 129
    a162:	c8 01       	movw	r24, r16
    a164:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    a168:	0f 90       	pop	r0
    a16a:	0f 90       	pop	r0
    a16c:	0f 90       	pop	r0
    a16e:	0f 90       	pop	r0
    a170:	0f 90       	pop	r0
    a172:	0f 90       	pop	r0
    a174:	2a 96       	adiw	r28, 0x0a	; 10
    a176:	0f b6       	in	r0, 0x3f	; 63
    a178:	f8 94       	cli
    a17a:	de bf       	out	0x3e, r29	; 62
    a17c:	0f be       	out	0x3f, r0	; 63
    a17e:	cd bf       	out	0x3d, r28	; 61
    a180:	df 91       	pop	r29
    a182:	cf 91       	pop	r28
    a184:	1f 91       	pop	r17
    a186:	0f 91       	pop	r16
    a188:	ff 90       	pop	r15
    a18a:	ef 90       	pop	r14
    a18c:	df 90       	pop	r13
    a18e:	cf 90       	pop	r12
    a190:	08 95       	ret

0000a192 <button_select_term_ring_input_in_dialog_status_fnt(unsigned int, unsigned int, unsigned char)>:
_Z50button_select_term_ring_input_in_dialog_status_fntjjh():
    a192:	cf 93       	push	r28
    a194:	86 2f       	mov	r24, r22
    a196:	c4 2f       	mov	r28, r20
    a198:	0e 94 4e b8 	call	0x1709c	; 0x1709c <thermostat_ring_get_asociate_tds(unsigned char)>
    a19c:	91 e0       	ldi	r25, 0x01	; 1
    a19e:	8c 13       	cpse	r24, r28
    a1a0:	90 e0       	ldi	r25, 0x00	; 0
    a1a2:	89 2f       	mov	r24, r25
    a1a4:	cf 91       	pop	r28
    a1a6:	08 95       	ret

0000a1a8 <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)>:
_Z28button_get_term_heat_or_cooljjh():
    a1a8:	1f 93       	push	r17
    a1aa:	cf 93       	push	r28
    a1ac:	df 93       	push	r29
    a1ae:	ec 01       	movw	r28, r24
    a1b0:	16 2f       	mov	r17, r22
    a1b2:	86 2f       	mov	r24, r22
    a1b4:	0e 94 fa b7 	call	0x16ff4	; 0x16ff4 <thermostat_ring_get_active(unsigned char)>
    a1b8:	8f 3f       	cpi	r24, 0xFF	; 255
    a1ba:	59 f0       	breq	.+22     	; 0xa1d2 <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x2a>
    a1bc:	60 e0       	ldi	r22, 0x00	; 0
    a1be:	81 2f       	mov	r24, r17
    a1c0:	0e 94 80 b8 	call	0x17100	; 0x17100 <thermostat_ring_get_status_bites(unsigned char, unsigned char)>
    a1c4:	81 11       	cpse	r24, r1
    a1c6:	0a c0       	rjmp	.+20     	; 0xa1dc <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x34>
    a1c8:	81 e0       	ldi	r24, 0x01	; 1
    a1ca:	23 97       	sbiw	r28, 0x03	; 3
    a1cc:	19 f0       	breq	.+6      	; 0xa1d4 <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x2c>
    a1ce:	80 e0       	ldi	r24, 0x00	; 0
    a1d0:	01 c0       	rjmp	.+2      	; 0xa1d4 <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x2c>
    a1d2:	82 e0       	ldi	r24, 0x02	; 2
    a1d4:	df 91       	pop	r29
    a1d6:	cf 91       	pop	r28
    a1d8:	1f 91       	pop	r17
    a1da:	08 95       	ret
    a1dc:	81 e0       	ldi	r24, 0x01	; 1
    a1de:	25 97       	sbiw	r28, 0x05	; 5
    a1e0:	b1 f7       	brne	.-20     	; 0xa1ce <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x26>
    a1e2:	f8 cf       	rjmp	.-16     	; 0xa1d4 <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x2c>

0000a1e4 <button_select_term_mode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z41button_select_term_mode_get_status_stringhhhPcS_():
    a1e4:	0f 93       	push	r16
    a1e6:	1f 93       	push	r17
    a1e8:	48 2f       	mov	r20, r24
    a1ea:	c9 01       	movw	r24, r18
    a1ec:	41 11       	cpse	r20, r1
    a1ee:	0b c0       	rjmp	.+22     	; 0xa206 <button_select_term_mode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x22>
    a1f0:	67 ea       	ldi	r22, 0xA7	; 167
    a1f2:	74 e8       	ldi	r23, 0x84	; 132
    a1f4:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    a1f8:	61 e9       	ldi	r22, 0x91	; 145
    a1fa:	74 e8       	ldi	r23, 0x84	; 132
    a1fc:	c8 01       	movw	r24, r16
    a1fe:	1f 91       	pop	r17
    a200:	0f 91       	pop	r16
    a202:	0d 94 22 1a 	jmp	0x23444	; 0x23444 <strcpy_P>
    a206:	41 30       	cpi	r20, 0x01	; 1
    a208:	39 f4       	brne	.+14     	; 0xa218 <button_select_term_mode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x34>
    a20a:	6d e8       	ldi	r22, 0x8D	; 141
    a20c:	74 e8       	ldi	r23, 0x84	; 132
    a20e:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    a212:	67 e7       	ldi	r22, 0x77	; 119
    a214:	74 e8       	ldi	r23, 0x84	; 132
    a216:	f2 cf       	rjmp	.-28     	; 0xa1fc <button_select_term_mode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x18>
    a218:	42 30       	cpi	r20, 0x02	; 2
    a21a:	39 f4       	brne	.+14     	; 0xa22a <button_select_term_mode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x46>
    a21c:	63 e7       	ldi	r22, 0x73	; 115
    a21e:	74 e8       	ldi	r23, 0x84	; 132
    a220:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    a224:	6c e5       	ldi	r22, 0x5C	; 92
    a226:	74 e8       	ldi	r23, 0x84	; 132
    a228:	e9 cf       	rjmp	.-46     	; 0xa1fc <button_select_term_mode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x18>
    a22a:	43 30       	cpi	r20, 0x03	; 3
    a22c:	39 f4       	brne	.+14     	; 0xa23c <button_select_term_mode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x58>
    a22e:	67 e5       	ldi	r22, 0x57	; 87
    a230:	74 e8       	ldi	r23, 0x84	; 132
    a232:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    a236:	63 e4       	ldi	r22, 0x43	; 67
    a238:	74 e8       	ldi	r23, 0x84	; 132
    a23a:	e0 cf       	rjmp	.-64     	; 0xa1fc <button_select_term_mode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x18>
    a23c:	44 30       	cpi	r20, 0x04	; 4
    a23e:	39 f4       	brne	.+14     	; 0xa24e <button_select_term_mode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x6a>
    a240:	6f e3       	ldi	r22, 0x3F	; 63
    a242:	74 e8       	ldi	r23, 0x84	; 132
    a244:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    a248:	60 e3       	ldi	r22, 0x30	; 48
    a24a:	74 e8       	ldi	r23, 0x84	; 132
    a24c:	d7 cf       	rjmp	.-82     	; 0xa1fc <button_select_term_mode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x18>
    a24e:	1f 91       	pop	r17
    a250:	0f 91       	pop	r16
    a252:	08 95       	ret

0000a254 <button_set_brightness_auto_shutdown_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z53button_set_brightness_auto_shutdown_get_status_stringhhhPcS_():
    a254:	0f 93       	push	r16
    a256:	1f 93       	push	r17
    a258:	c9 01       	movw	r24, r18
    a25a:	68 ea       	ldi	r22, 0xA8	; 168
    a25c:	7d e7       	ldi	r23, 0x7D	; 125
    a25e:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    a262:	80 91 2a 0b 	lds	r24, 0x0B2A	; 0x800b2a <brigthness_display_mode>
    a266:	86 fd       	sbrc	r24, 6
    a268:	07 c0       	rjmp	.+14     	; 0xa278 <button_set_brightness_auto_shutdown_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x24>
    a26a:	6b ea       	ldi	r22, 0xAB	; 171
    a26c:	70 e8       	ldi	r23, 0x80	; 128
    a26e:	c8 01       	movw	r24, r16
    a270:	1f 91       	pop	r17
    a272:	0f 91       	pop	r16
    a274:	0d 94 22 1a 	jmp	0x23444	; 0x23444 <strcpy_P>
    a278:	80 91 29 0b 	lds	r24, 0x0B29	; 0x800b29 <display_auto_shutdown>
    a27c:	1f 92       	push	r1
    a27e:	8f 93       	push	r24
    a280:	87 ed       	ldi	r24, 0xD7	; 215
    a282:	92 e0       	ldi	r25, 0x02	; 2
    a284:	9f 93       	push	r25
    a286:	8f 93       	push	r24
    a288:	1f 93       	push	r17
    a28a:	0f 93       	push	r16
    a28c:	0f 94 a6 1b 	call	0x2374c	; 0x2374c <sprintf>
    a290:	0f 90       	pop	r0
    a292:	0f 90       	pop	r0
    a294:	0f 90       	pop	r0
    a296:	0f 90       	pop	r0
    a298:	0f 90       	pop	r0
    a29a:	0f 90       	pop	r0
    a29c:	1f 91       	pop	r17
    a29e:	0f 91       	pop	r16
    a2a0:	08 95       	ret

0000a2a2 <button_click_default_term_set_mode(unsigned int, unsigned int, unsigned char)>:
_Z34button_click_default_term_set_modejjh():
    a2a2:	cf 93       	push	r28
    a2a4:	c8 2f       	mov	r28, r24
    a2a6:	80 91 3a 0b 	lds	r24, 0x0B3A	; 0x800b3a <default_ring>
    a2aa:	0e 94 fa b7 	call	0x16ff4	; 0x16ff4 <thermostat_ring_get_active(unsigned char)>
    a2ae:	8f 3f       	cpi	r24, 0xFF	; 255
    a2b0:	71 f0       	breq	.+28     	; 0xa2ce <button_click_default_term_set_mode(unsigned int, unsigned int, unsigned char)+0x2c>
    a2b2:	80 91 3a 0b 	lds	r24, 0x0B3A	; 0x800b3a <default_ring>
    a2b6:	0e 94 5e b8 	call	0x170bc	; 0x170bc <thermostat_ring_get_mode(unsigned char)>
    a2ba:	80 93 37 0b 	sts	0x0B37, r24	; 0x800b37 <thermostat_mode_default_ring_last_state>
    a2be:	6c 2f       	mov	r22, r28
    a2c0:	80 91 3a 0b 	lds	r24, 0x0B3A	; 0x800b3a <default_ring>
    a2c4:	0e 94 66 b8 	call	0x170cc	; 0x170cc <thermostat_ring_set_mode(unsigned char, unsigned char)>
    a2c8:	81 e0       	ldi	r24, 0x01	; 1
    a2ca:	80 93 79 0a 	sts	0x0A79, r24	; 0x800a79 <change_term_mode>
    a2ce:	cf 91       	pop	r28
    a2d0:	08 95       	ret

0000a2d2 <button_status_default_ring_term_has_mode(unsigned int, unsigned int, unsigned char)>:
_Z40button_status_default_ring_term_has_modejjh():
    a2d2:	0f 93       	push	r16
    a2d4:	1f 93       	push	r17
    a2d6:	cf 93       	push	r28
    a2d8:	8c 01       	movw	r16, r24
    a2da:	80 91 3a 0b 	lds	r24, 0x0B3A	; 0x800b3a <default_ring>
    a2de:	0e 94 fa b7 	call	0x16ff4	; 0x16ff4 <thermostat_ring_get_active(unsigned char)>
    a2e2:	8f 3f       	cpi	r24, 0xFF	; 255
    a2e4:	b9 f0       	breq	.+46     	; 0xa314 <button_status_default_ring_term_has_mode(unsigned int, unsigned int, unsigned char)+0x42>
    a2e6:	60 2f       	mov	r22, r16
    a2e8:	80 91 3a 0b 	lds	r24, 0x0B3A	; 0x800b3a <default_ring>
    a2ec:	0e 94 6e b8 	call	0x170dc	; 0x170dc <thermostat_ring_get_mode_1(unsigned char, unsigned char)>
    a2f0:	c8 2f       	mov	r28, r24
    a2f2:	80 91 3a 0b 	lds	r24, 0x0B3A	; 0x800b3a <default_ring>
    a2f6:	0e 94 5e b8 	call	0x170bc	; 0x170bc <thermostat_ring_get_mode(unsigned char)>
    a2fa:	80 17       	cp	r24, r16
    a2fc:	11 06       	cpc	r1, r17
    a2fe:	29 f0       	breq	.+10     	; 0xa30a <button_status_default_ring_term_has_mode(unsigned int, unsigned int, unsigned char)+0x38>
    a300:	80 91 37 0b 	lds	r24, 0x0B37	; 0x800b37 <thermostat_mode_default_ring_last_state>
    a304:	80 17       	cp	r24, r16
    a306:	11 06       	cpc	r1, r17
    a308:	39 f4       	brne	.+14     	; 0xa318 <button_status_default_ring_term_has_mode(unsigned int, unsigned int, unsigned char)+0x46>
    a30a:	8c 2f       	mov	r24, r28
    a30c:	cf 91       	pop	r28
    a30e:	1f 91       	pop	r17
    a310:	0f 91       	pop	r16
    a312:	08 95       	ret
    a314:	80 e0       	ldi	r24, 0x00	; 0
    a316:	fa cf       	rjmp	.-12     	; 0xa30c <button_status_default_ring_term_has_mode(unsigned int, unsigned int, unsigned char)+0x3a>
    a318:	82 e0       	ldi	r24, 0x02	; 2
    a31a:	f8 cf       	rjmp	.-16     	; 0xa30c <button_status_default_ring_term_has_mode(unsigned int, unsigned int, unsigned char)+0x3a>

0000a31c <EEPROMClass::read(int) [clone .isra.8]>:
_ZNK5EERefdeEv():
    a31c:	0d 94 6e 22 	jmp	0x244dc	; 0x244dc <eeprom_read_byte>

0000a320 <EEPROMClass::write(int, unsigned char) [clone .isra.9]>:
_ZN5EERefaSEh():
    a320:	0d 94 76 22 	jmp	0x244ec	; 0x244ec <eeprom_write_byte>

0000a324 <switch_brightness_automode_onclick(unsigned int, unsigned int, unsigned char)>:
_Z34switch_brightness_automode_onclickjjh():
    a324:	80 91 2a 0b 	lds	r24, 0x0B2A	; 0x800b2a <brigthness_display_mode>
    a328:	87 ff       	sbrs	r24, 7
    a32a:	10 c0       	rjmp	.+32     	; 0xa34c <switch_brightness_automode_onclick(unsigned int, unsigned int, unsigned char)+0x28>
    a32c:	8f 77       	andi	r24, 0x7F	; 127
    a32e:	80 93 2a 0b 	sts	0x0B2A, r24	; 0x800b2a <brigthness_display_mode>
    a332:	60 91 2c 0b 	lds	r22, 0x0B2C	; 0x800b2c <brigthness_display_values>
    a336:	66 0f       	add	r22, r22
    a338:	85 e9       	ldi	r24, 0x95	; 149
    a33a:	9c e0       	ldi	r25, 0x0C	; 12
    a33c:	0e 94 19 d0 	call	0x1a032	; 0x1a032 <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char)>
    a340:	60 91 2a 0b 	lds	r22, 0x0B2A	; 0x800b2a <brigthness_display_mode>
    a344:	8f e5       	ldi	r24, 0x5F	; 95
    a346:	90 e0       	ldi	r25, 0x00	; 0
    a348:	0c 94 90 51 	jmp	0xa320	; 0xa320 <EEPROMClass::write(int, unsigned char) [clone .isra.9]>
    a34c:	80 68       	ori	r24, 0x80	; 128
    a34e:	80 93 2a 0b 	sts	0x0B2A, r24	; 0x800b2a <brigthness_display_mode>
    a352:	f6 cf       	rjmp	.-20     	; 0xa340 <switch_brightness_automode_onclick(unsigned int, unsigned int, unsigned char)+0x1c>

0000a354 <helper_display_set_brightness(unsigned int, float, unsigned char)>:
_Z29helper_display_set_brightnessjfh():
    a354:	20 93 2c 0b 	sts	0x0B2C, r18	; 0x800b2c <brigthness_display_values>
    a358:	62 2f       	mov	r22, r18
    a35a:	66 0f       	add	r22, r22
    a35c:	85 e9       	ldi	r24, 0x95	; 149
    a35e:	9c e0       	ldi	r25, 0x0C	; 12
    a360:	0e 94 19 d0 	call	0x1a032	; 0x1a032 <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char)>
    a364:	60 91 2c 0b 	lds	r22, 0x0B2C	; 0x800b2c <brigthness_display_values>
    a368:	8e e5       	ldi	r24, 0x5E	; 94
    a36a:	90 e0       	ldi	r25, 0x00	; 0
    a36c:	0c 94 90 51 	jmp	0xa320	; 0xa320 <EEPROMClass::write(int, unsigned char) [clone .isra.9]>

0000a370 <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)>:
_Z66button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclickjjh():
    a370:	10 92 28 0b 	sts	0x0B28, r1	; 0x800b28 <display_auto_shutdown_now>
    a374:	41 11       	cpse	r20, r1
    a376:	13 c0       	rjmp	.+38     	; 0xa39e <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)+0x2e>
    a378:	80 91 2a 0b 	lds	r24, 0x0B2A	; 0x800b2a <brigthness_display_mode>
    a37c:	8f 7b       	andi	r24, 0xBF	; 191
    a37e:	80 93 2a 0b 	sts	0x0B2A, r24	; 0x800b2a <brigthness_display_mode>
    a382:	10 92 29 0b 	sts	0x0B29, r1	; 0x800b29 <display_auto_shutdown>
    a386:	60 91 29 0b 	lds	r22, 0x0B29	; 0x800b29 <display_auto_shutdown>
    a38a:	80 e6       	ldi	r24, 0x60	; 96
    a38c:	90 e0       	ldi	r25, 0x00	; 0
    a38e:	0e 94 90 51 	call	0xa320	; 0xa320 <EEPROMClass::write(int, unsigned char) [clone .isra.9]>
    a392:	60 91 2a 0b 	lds	r22, 0x0B2A	; 0x800b2a <brigthness_display_mode>
    a396:	8f e5       	ldi	r24, 0x5F	; 95
    a398:	90 e0       	ldi	r25, 0x00	; 0
    a39a:	0c 94 90 51 	jmp	0xa320	; 0xa320 <EEPROMClass::write(int, unsigned char) [clone .isra.9]>
    a39e:	41 30       	cpi	r20, 0x01	; 1
    a3a0:	49 f4       	brne	.+18     	; 0xa3b4 <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)+0x44>
    a3a2:	80 91 2a 0b 	lds	r24, 0x0B2A	; 0x800b2a <brigthness_display_mode>
    a3a6:	80 64       	ori	r24, 0x40	; 64
    a3a8:	80 93 2a 0b 	sts	0x0B2A, r24	; 0x800b2a <brigthness_display_mode>
    a3ac:	8e e1       	ldi	r24, 0x1E	; 30
    a3ae:	80 93 29 0b 	sts	0x0B29, r24	; 0x800b29 <display_auto_shutdown>
    a3b2:	e9 cf       	rjmp	.-46     	; 0xa386 <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)+0x16>
    a3b4:	42 30       	cpi	r20, 0x02	; 2
    a3b6:	39 f4       	brne	.+14     	; 0xa3c6 <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)+0x56>
    a3b8:	80 91 2a 0b 	lds	r24, 0x0B2A	; 0x800b2a <brigthness_display_mode>
    a3bc:	80 64       	ori	r24, 0x40	; 64
    a3be:	80 93 2a 0b 	sts	0x0B2A, r24	; 0x800b2a <brigthness_display_mode>
    a3c2:	8c e3       	ldi	r24, 0x3C	; 60
    a3c4:	f4 cf       	rjmp	.-24     	; 0xa3ae <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)+0x3e>
    a3c6:	43 30       	cpi	r20, 0x03	; 3
    a3c8:	39 f4       	brne	.+14     	; 0xa3d8 <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)+0x68>
    a3ca:	80 91 2a 0b 	lds	r24, 0x0B2A	; 0x800b2a <brigthness_display_mode>
    a3ce:	80 64       	ori	r24, 0x40	; 64
    a3d0:	80 93 2a 0b 	sts	0x0B2A, r24	; 0x800b2a <brigthness_display_mode>
    a3d4:	88 e7       	ldi	r24, 0x78	; 120
    a3d6:	eb cf       	rjmp	.-42     	; 0xa3ae <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)+0x3e>
    a3d8:	44 30       	cpi	r20, 0x04	; 4
    a3da:	39 f4       	brne	.+14     	; 0xa3ea <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)+0x7a>
    a3dc:	80 91 2a 0b 	lds	r24, 0x0B2A	; 0x800b2a <brigthness_display_mode>
    a3e0:	80 64       	ori	r24, 0x40	; 64
    a3e2:	80 93 2a 0b 	sts	0x0B2A, r24	; 0x800b2a <brigthness_display_mode>
    a3e6:	84 eb       	ldi	r24, 0xB4	; 180
    a3e8:	e2 cf       	rjmp	.-60     	; 0xa3ae <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)+0x3e>
    a3ea:	45 30       	cpi	r20, 0x05	; 5
    a3ec:	39 f4       	brne	.+14     	; 0xa3fc <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)+0x8c>
    a3ee:	80 91 2a 0b 	lds	r24, 0x0B2A	; 0x800b2a <brigthness_display_mode>
    a3f2:	80 64       	ori	r24, 0x40	; 64
    a3f4:	80 93 2a 0b 	sts	0x0B2A, r24	; 0x800b2a <brigthness_display_mode>
    a3f8:	8a ef       	ldi	r24, 0xFA	; 250
    a3fa:	d9 cf       	rjmp	.-78     	; 0xa3ae <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)+0x3e>
    a3fc:	08 95       	ret

0000a3fe <button_nastaveni_default_value(unsigned int, unsigned int, unsigned char)>:
_Z30button_nastaveni_default_valuejjh():
    a3fe:	6f ef       	ldi	r22, 0xFF	; 255
    a400:	8a e5       	ldi	r24, 0x5A	; 90
    a402:	90 e0       	ldi	r25, 0x00	; 0
    a404:	0e 94 90 51 	call	0xa320	; 0xa320 <EEPROMClass::write(int, unsigned char) [clone .isra.9]>
    a408:	e0 91 60 0a 	lds	r30, 0x0A60	; 0x800a60 <resetFunc>
    a40c:	f0 91 61 0a 	lds	r31, 0x0A61	; 0x800a61 <resetFunc+0x1>
    a410:	19 94       	eijmp

0000a412 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]>:
_ZN11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
    a412:	0f 93       	push	r16
    a414:	1f 93       	push	r17
    a416:	cf 93       	push	r28
    a418:	df 93       	push	r29
    a41a:	00 97       	sbiw	r24, 0x00	; 0
    a41c:	01 f1       	breq	.+64     	; 0xa45e <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]+0x4c>
    a41e:	8b 01       	movw	r16, r22
    a420:	fc 01       	movw	r30, r24
    a422:	c0 81       	ld	r28, Z
    a424:	d1 81       	ldd	r29, Z+1	; 0x01
    a426:	20 97       	sbiw	r28, 0x00	; 0
    a428:	d1 f0       	breq	.+52     	; 0xa45e <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]+0x4c>
    a42a:	6a 85       	ldd	r22, Y+10	; 0x0a
    a42c:	7b 85       	ldd	r23, Y+11	; 0x0b
_ZNK11ArduinoJson9Internals23ZeroTerminatedRamString6equalsEPKc():
    a42e:	01 15       	cp	r16, r1
    a430:	11 05       	cpc	r17, r1
    a432:	19 f0       	breq	.+6      	; 0xa43a <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]+0x28>
    a434:	61 15       	cp	r22, r1
    a436:	71 05       	cpc	r23, r1
    a438:	49 f4       	brne	.+18     	; 0xa44c <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]+0x3a>
    a43a:	06 17       	cp	r16, r22
    a43c:	17 07       	cpc	r17, r23
    a43e:	59 f4       	brne	.+22     	; 0xa456 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]+0x44>
_ZN11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
    a440:	ce 01       	movw	r24, r28
    a442:	df 91       	pop	r29
    a444:	cf 91       	pop	r28
    a446:	1f 91       	pop	r17
    a448:	0f 91       	pop	r16
    a44a:	08 95       	ret
_ZNK11ArduinoJson9Internals23ZeroTerminatedRamString6equalsEPKc():
    a44c:	c8 01       	movw	r24, r16
    a44e:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
    a452:	89 2b       	or	r24, r25
    a454:	a9 f3       	breq	.-22     	; 0xa440 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]+0x2e>
_ZN11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
    a456:	0e 80       	ldd	r0, Y+6	; 0x06
    a458:	df 81       	ldd	r29, Y+7	; 0x07
    a45a:	c0 2d       	mov	r28, r0
    a45c:	e4 cf       	rjmp	.-56     	; 0xa426 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]+0x14>
    a45e:	d0 e0       	ldi	r29, 0x00	; 0
    a460:	c0 e0       	ldi	r28, 0x00	; 0
    a462:	ee cf       	rjmp	.-36     	; 0xa440 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]+0x2e>

0000a464 <nullfce(unsigned int, unsigned int, unsigned char)>:
_Z7nullfcejjh():
    a464:	08 95       	ret

0000a466 <button_check_mqtt_connection_onclick(unsigned int, unsigned int, unsigned char)>:
_Z36button_check_mqtt_connection_onclickjjh():
    a466:	08 95       	ret

0000a468 <valid_true()>:
_Z10valid_truev():
    a468:	81 e0       	ldi	r24, 0x01	; 1
    a46a:	08 95       	ret

0000a46c <ArduinoJson::JsonArray::add()>:
_ZN11ArduinoJson9JsonArray3addEv():
    a46c:	0f 93       	push	r16
    a46e:	1f 93       	push	r17
    a470:	cf 93       	push	r28
    a472:	df 93       	push	r29
    a474:	dc 01       	movw	r26, r24
    a476:	12 96       	adiw	r26, 0x02	; 2
    a478:	2d 91       	ld	r18, X+
    a47a:	3c 91       	ld	r19, X
    a47c:	23 2b       	or	r18, r19
    a47e:	41 f4       	brne	.+16     	; 0xa490 <ArduinoJson::JsonArray::add()+0x24>
    a480:	60 e0       	ldi	r22, 0x00	; 0
    a482:	70 e0       	ldi	r23, 0x00	; 0
    a484:	cb 01       	movw	r24, r22
    a486:	df 91       	pop	r29
    a488:	cf 91       	pop	r28
    a48a:	1f 91       	pop	r17
    a48c:	0f 91       	pop	r16
    a48e:	08 95       	ret
    a490:	8c 01       	movw	r16, r24
    a492:	ec 01       	movw	r28, r24
    a494:	88 81       	ld	r24, Y
    a496:	99 81       	ldd	r25, Y+1	; 0x01
_ZN11ArduinoJson9Internals21AllocableInMemoryPoolnwEjPNS0_10MemoryPoolE():
    a498:	dc 01       	movw	r26, r24
    a49a:	ed 91       	ld	r30, X+
    a49c:	fc 91       	ld	r31, X
    a49e:	01 90       	ld	r0, Z+
    a4a0:	f0 81       	ld	r31, Z
    a4a2:	e0 2d       	mov	r30, r0
    a4a4:	6c e0       	ldi	r22, 0x0C	; 12
    a4a6:	70 e0       	ldi	r23, 0x00	; 0
    a4a8:	19 95       	eicall
    a4aa:	fc 01       	movw	r30, r24
_ZN11ArduinoJson9JsonArray3addEv():
    a4ac:	89 2b       	or	r24, r25
    a4ae:	31 f1       	breq	.+76     	; 0xa4fc <ArduinoJson::JsonArray::add()+0x90>
    a4b0:	8c e0       	ldi	r24, 0x0C	; 12
    a4b2:	ef 01       	movw	r28, r30
    a4b4:	19 92       	st	Y+, r1
    a4b6:	8a 95       	dec	r24
    a4b8:	e9 f7       	brne	.-6      	; 0xa4b4 <ArduinoJson::JsonArray::add()+0x48>
_ZN11ArduinoJson9Internals15JsonVariantDataC4Ev():
    a4ba:	11 82       	std	Z+1, r1	; 0x01
    a4bc:	10 82       	st	Z, r1
_ZN11ArduinoJson9JsonArray3addEv():
    a4be:	e8 01       	movw	r28, r16
    a4c0:	aa 81       	ldd	r26, Y+2	; 0x02
    a4c2:	bb 81       	ldd	r27, Y+3	; 0x03
    a4c4:	12 96       	adiw	r26, 0x02	; 2
    a4c6:	8d 91       	ld	r24, X+
    a4c8:	9c 91       	ld	r25, X
    a4ca:	13 97       	sbiw	r26, 0x03	; 3
    a4cc:	00 97       	sbiw	r24, 0x00	; 0
    a4ce:	91 f0       	breq	.+36     	; 0xa4f4 <ArduinoJson::JsonArray::add()+0x88>
    a4d0:	91 87       	std	Z+9, r25	; 0x09
    a4d2:	80 87       	std	Z+8, r24	; 0x08
    a4d4:	ec 01       	movw	r28, r24
    a4d6:	ff 83       	std	Y+7, r31	; 0x07
    a4d8:	ee 83       	std	Y+6, r30	; 0x06
    a4da:	13 96       	adiw	r26, 0x03	; 3
    a4dc:	fc 93       	st	X, r31
    a4de:	ee 93       	st	-X, r30
    a4e0:	12 97       	sbiw	r26, 0x02	; 2
    a4e2:	3e 2f       	mov	r19, r30
    a4e4:	2f 2f       	mov	r18, r31
    a4e6:	f8 01       	movw	r30, r16
    a4e8:	40 81       	ld	r20, Z
    a4ea:	51 81       	ldd	r21, Z+1	; 0x01
    a4ec:	ba 01       	movw	r22, r20
    a4ee:	83 2f       	mov	r24, r19
    a4f0:	92 2f       	mov	r25, r18
    a4f2:	c9 cf       	rjmp	.-110    	; 0xa486 <ArduinoJson::JsonArray::add()+0x1a>
    a4f4:	11 96       	adiw	r26, 0x01	; 1
    a4f6:	fc 93       	st	X, r31
    a4f8:	ee 93       	st	-X, r30
    a4fa:	ef cf       	rjmp	.-34     	; 0xa4da <ArduinoJson::JsonArray::add()+0x6e>
    a4fc:	30 e0       	ldi	r19, 0x00	; 0
    a4fe:	20 e0       	ldi	r18, 0x00	; 0
    a500:	50 e0       	ldi	r21, 0x00	; 0
    a502:	40 e0       	ldi	r20, 0x00	; 0
    a504:	f3 cf       	rjmp	.-26     	; 0xa4ec <ArduinoJson::JsonArray::add()+0x80>

0000a506 <ArduinoJson::Internals::isFloat(char const*)>:
_ZN11ArduinoJson9Internals7isFloatEPKc():
    a506:	cf 93       	push	r28
    a508:	df 93       	push	r29
    a50a:	ec 01       	movw	r28, r24
    a50c:	00 97       	sbiw	r24, 0x00	; 0
    a50e:	09 f4       	brne	.+2      	; 0xa512 <ArduinoJson::Internals::isFloat(char const*)+0xc>
    a510:	3f c0       	rjmp	.+126    	; 0xa590 <ArduinoJson::Internals::isFloat(char const*)+0x8a>
    a512:	68 ee       	ldi	r22, 0xE8	; 232
    a514:	72 e0       	ldi	r23, 0x02	; 2
    a516:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
    a51a:	89 2b       	or	r24, r25
    a51c:	e9 f1       	breq	.+122    	; 0xa598 <ArduinoJson::Internals::isFloat(char const*)+0x92>
    a51e:	88 81       	ld	r24, Y
_ZN11ArduinoJson9Internals6issignEc():
    a520:	8d 32       	cpi	r24, 0x2D	; 45
    a522:	11 f0       	breq	.+4      	; 0xa528 <ArduinoJson::Internals::isFloat(char const*)+0x22>
    a524:	8b 32       	cpi	r24, 0x2B	; 43
    a526:	09 f4       	brne	.+2      	; 0xa52a <ArduinoJson::Internals::isFloat(char const*)+0x24>
_ZN11ArduinoJson9Internals7isFloatEPKc():
    a528:	21 96       	adiw	r28, 0x01	; 1
    a52a:	6c ee       	ldi	r22, 0xEC	; 236
    a52c:	72 e0       	ldi	r23, 0x02	; 2
    a52e:	ce 01       	movw	r24, r28
    a530:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
    a534:	89 2b       	or	r24, r25
    a536:	81 f1       	breq	.+96     	; 0xa598 <ArduinoJson::Internals::isFloat(char const*)+0x92>
    a538:	88 81       	ld	r24, Y
    a53a:	88 23       	and	r24, r24
    a53c:	49 f1       	breq	.+82     	; 0xa590 <ArduinoJson::Internals::isFloat(char const*)+0x8a>
    a53e:	fe 01       	movw	r30, r28
    a540:	89 91       	ld	r24, Y+
_ZN11ArduinoJson9Internals7isdigitEc():
    a542:	90 ed       	ldi	r25, 0xD0	; 208
    a544:	98 0f       	add	r25, r24
_ZN11ArduinoJson9Internals7isFloatEPKc():
    a546:	9a 30       	cpi	r25, 0x0A	; 10
    a548:	d0 f3       	brcs	.-12     	; 0xa53e <ArduinoJson::Internals::isFloat(char const*)+0x38>
    a54a:	8e 32       	cpi	r24, 0x2E	; 46
    a54c:	41 f4       	brne	.+16     	; 0xa55e <ArduinoJson::Internals::isFloat(char const*)+0x58>
    a54e:	9e 01       	movw	r18, r28
    a550:	f9 01       	movw	r30, r18
    a552:	2f 5f       	subi	r18, 0xFF	; 255
    a554:	3f 4f       	sbci	r19, 0xFF	; 255
_ZN11ArduinoJson9Internals7isdigitEc():
    a556:	80 81       	ld	r24, Z
    a558:	80 53       	subi	r24, 0x30	; 48
_ZN11ArduinoJson9Internals7isFloatEPKc():
    a55a:	8a 30       	cpi	r24, 0x0A	; 10
    a55c:	c8 f3       	brcs	.-14     	; 0xa550 <ArduinoJson::Internals::isFloat(char const*)+0x4a>
    a55e:	80 81       	ld	r24, Z
    a560:	8f 7d       	andi	r24, 0xDF	; 223
    a562:	85 34       	cpi	r24, 0x45	; 69
    a564:	89 f4       	brne	.+34     	; 0xa588 <ArduinoJson::Internals::isFloat(char const*)+0x82>
    a566:	81 81       	ldd	r24, Z+1	; 0x01
_ZN11ArduinoJson9Internals6issignEc():
    a568:	8d 32       	cpi	r24, 0x2D	; 45
    a56a:	a1 f0       	breq	.+40     	; 0xa594 <ArduinoJson::Internals::isFloat(char const*)+0x8e>
    a56c:	8b 32       	cpi	r24, 0x2B	; 43
    a56e:	91 f0       	breq	.+36     	; 0xa594 <ArduinoJson::Internals::isFloat(char const*)+0x8e>
_ZN11ArduinoJson9Internals7isFloatEPKc():
    a570:	31 96       	adiw	r30, 0x01	; 1
_ZN11ArduinoJson9Internals7isdigitEc():
    a572:	80 81       	ld	r24, Z
    a574:	80 53       	subi	r24, 0x30	; 48
_ZN11ArduinoJson9Internals7isFloatEPKc():
    a576:	8a 30       	cpi	r24, 0x0A	; 10
    a578:	58 f4       	brcc	.+22     	; 0xa590 <ArduinoJson::Internals::isFloat(char const*)+0x8a>
    a57a:	cf 01       	movw	r24, r30
    a57c:	fc 01       	movw	r30, r24
    a57e:	01 96       	adiw	r24, 0x01	; 1
_ZN11ArduinoJson9Internals7isdigitEc():
    a580:	20 81       	ld	r18, Z
    a582:	20 53       	subi	r18, 0x30	; 48
_ZN11ArduinoJson9Internals7isFloatEPKc():
    a584:	2a 30       	cpi	r18, 0x0A	; 10
    a586:	d0 f3       	brcs	.-12     	; 0xa57c <ArduinoJson::Internals::isFloat(char const*)+0x76>
    a588:	81 e0       	ldi	r24, 0x01	; 1
    a58a:	90 81       	ld	r25, Z
    a58c:	99 23       	and	r25, r25
    a58e:	29 f0       	breq	.+10     	; 0xa59a <ArduinoJson::Internals::isFloat(char const*)+0x94>
    a590:	80 e0       	ldi	r24, 0x00	; 0
    a592:	03 c0       	rjmp	.+6      	; 0xa59a <ArduinoJson::Internals::isFloat(char const*)+0x94>
    a594:	32 96       	adiw	r30, 0x02	; 2
    a596:	ed cf       	rjmp	.-38     	; 0xa572 <ArduinoJson::Internals::isFloat(char const*)+0x6c>
    a598:	81 e0       	ldi	r24, 0x01	; 1
    a59a:	df 91       	pop	r29
    a59c:	cf 91       	pop	r28
    a59e:	08 95       	ret

0000a5a0 <printf_begin()>:
_Z12printf_beginv():
    a5a0:	70 e0       	ldi	r23, 0x00	; 0
    a5a2:	60 e0       	ldi	r22, 0x00	; 0
    a5a4:	8e e2       	ldi	r24, 0x2E	; 46
    a5a6:	97 ea       	ldi	r25, 0xA7	; 167
    a5a8:	0d 94 f5 1a 	jmp	0x235ea	; 0x235ea <fdevopen>

0000a5ac <Temperature_LM75_Derived::readTemperatureC()>:
_ZN24Temperature_LM75_Derived16readTemperatureCEv():
    a5ac:	cf 93       	push	r28
    a5ae:	df 93       	push	r29
    a5b0:	ec 01       	movw	r28, r24
    a5b2:	eb 85       	ldd	r30, Y+11	; 0x0b
    a5b4:	fc 85       	ldd	r31, Y+12	; 0x0c
    a5b6:	04 80       	ldd	r0, Z+4	; 0x04
    a5b8:	f5 81       	ldd	r31, Z+5	; 0x05
    a5ba:	e0 2d       	mov	r30, r0
    a5bc:	60 81       	ld	r22, Z
    a5be:	0f 94 17 06 	call	0x20c2e	; 0x20c2e <Temperature_LM75_Derived::readIntegerTemperatureRegister(unsigned char)>
_ZN24Temperature_LM75_Derived25convertIntegerTemperatureEi():
    a5c2:	bc 01       	movw	r22, r24
    a5c4:	99 0f       	add	r25, r25
    a5c6:	88 0b       	sbc	r24, r24
    a5c8:	99 0b       	sbc	r25, r25
    a5ca:	0f 94 f7 14 	call	0x229ee	; 0x229ee <__floatsisf>
    a5ce:	2f 81       	ldd	r18, Y+7	; 0x07
    a5d0:	38 85       	ldd	r19, Y+8	; 0x08
    a5d2:	49 85       	ldd	r20, Y+9	; 0x09
    a5d4:	5a 85       	ldd	r21, Y+10	; 0x0a
    a5d6:	0f 94 ac 15 	call	0x22b58	; 0x22b58 <__mulsf3>
_ZN24Temperature_LM75_Derived16readTemperatureCEv():
    a5da:	df 91       	pop	r29
    a5dc:	cf 91       	pop	r28
    a5de:	08 95       	ret

0000a5e0 <enable_redraw(unsigned char, unsigned char)>:
_Z13enable_redrawhh():
    a5e0:	30 e0       	ldi	r19, 0x00	; 0
    a5e2:	20 e0       	ldi	r18, 0x00	; 0
    a5e4:	e1 e0       	ldi	r30, 0x01	; 1
    a5e6:	f0 e0       	ldi	r31, 0x00	; 0
    a5e8:	af 01       	movw	r20, r30
    a5ea:	02 2e       	mov	r0, r18
    a5ec:	01 c0       	rjmp	.+2      	; 0xa5f0 <enable_redraw(unsigned char, unsigned char)+0x10>
    a5ee:	44 0f       	add	r20, r20
    a5f0:	0a 94       	dec	r0
    a5f2:	ea f7       	brpl	.-6      	; 0xa5ee <enable_redraw(unsigned char, unsigned char)+0xe>
    a5f4:	98 2f       	mov	r25, r24
    a5f6:	94 23       	and	r25, r20
    a5f8:	11 f0       	breq	.+4      	; 0xa5fe <enable_redraw(unsigned char, unsigned char)+0x1e>
    a5fa:	46 23       	and	r20, r22
    a5fc:	39 f4       	brne	.+14     	; 0xa60c <enable_redraw(unsigned char, unsigned char)+0x2c>
    a5fe:	2f 5f       	subi	r18, 0xFF	; 255
    a600:	3f 4f       	sbci	r19, 0xFF	; 255
    a602:	28 30       	cpi	r18, 0x08	; 8
    a604:	31 05       	cpc	r19, r1
    a606:	81 f7       	brne	.-32     	; 0xa5e8 <enable_redraw(unsigned char, unsigned char)+0x8>
    a608:	80 e0       	ldi	r24, 0x00	; 0
    a60a:	08 95       	ret
    a60c:	81 e0       	ldi	r24, 0x01	; 1
    a60e:	08 95       	ret

0000a610 <MenuHistoryInit()>:
_Z15MenuHistoryInitv():
    a610:	e0 91 64 0a 	lds	r30, 0x0A64	; 0x800a64 <MenuHistoryIndex>
    a614:	f0 e0       	ldi	r31, 0x00	; 0
    a616:	e1 59       	subi	r30, 0x91	; 145
    a618:	f5 4f       	sbci	r31, 0xF5	; 245
    a61a:	10 82       	st	Z, r1
    a61c:	08 95       	ret

0000a61e <MenuHistoryGetMenu(unsigned char*)>:
_Z18MenuHistoryGetMenuPh():
    a61e:	ff 92       	push	r15
    a620:	0f 93       	push	r16
    a622:	1f 93       	push	r17
    a624:	cf 93       	push	r28
    a626:	df 93       	push	r29
    a628:	dc 01       	movw	r26, r24
    a62a:	20 91 64 0a 	lds	r18, 0x0A64	; 0x800a64 <MenuHistoryIndex>
    a62e:	30 e0       	ldi	r19, 0x00	; 0
    a630:	80 e0       	ldi	r24, 0x00	; 0
    a632:	65 e6       	ldi	r22, 0x65	; 101
    a634:	76 e0       	ldi	r23, 0x06	; 6
    a636:	c3 ef       	ldi	r28, 0xF3	; 243
    a638:	d2 e0       	ldi	r29, 0x02	; 2
    a63a:	89 01       	movw	r16, r18
    a63c:	01 59       	subi	r16, 0x91	; 145
    a63e:	15 4f       	sbci	r17, 0xF5	; 245
    a640:	fb 01       	movw	r30, r22
    a642:	94 91       	lpm	r25, Z
    a644:	89 17       	cp	r24, r25
    a646:	e8 f4       	brcc	.+58     	; 0xa682 <MenuHistoryGetMenu(unsigned char*)+0x64>
    a648:	8c 9f       	mul	r24, r28
    a64a:	a0 01       	movw	r20, r0
    a64c:	8d 9f       	mul	r24, r29
    a64e:	50 0d       	add	r21, r0
    a650:	11 24       	eor	r1, r1
    a652:	fa 01       	movw	r30, r20
    a654:	eb 5b       	subi	r30, 0xBB	; 187
    a656:	f6 4f       	sbci	r31, 0xF6	; 246
    a658:	f4 90       	lpm	r15, Z
    a65a:	f8 01       	movw	r30, r16
    a65c:	90 81       	ld	r25, Z
    a65e:	9f 11       	cpse	r25, r15
    a660:	0e c0       	rjmp	.+28     	; 0xa67e <MenuHistoryGetMenu(unsigned char*)+0x60>
    a662:	47 59       	subi	r20, 0x97	; 151
    a664:	59 4f       	sbci	r21, 0xF9	; 249
    a666:	2b 59       	subi	r18, 0x9B	; 155
    a668:	35 4f       	sbci	r19, 0xF5	; 245
    a66a:	f9 01       	movw	r30, r18
    a66c:	20 81       	ld	r18, Z
    a66e:	2c 93       	st	X, r18
    a670:	ca 01       	movw	r24, r20
    a672:	df 91       	pop	r29
    a674:	cf 91       	pop	r28
    a676:	1f 91       	pop	r17
    a678:	0f 91       	pop	r16
    a67a:	ff 90       	pop	r15
    a67c:	08 95       	ret
    a67e:	8f 5f       	subi	r24, 0xFF	; 255
    a680:	df cf       	rjmp	.-66     	; 0xa640 <MenuHistoryGetMenu(unsigned char*)+0x22>
    a682:	80 e0       	ldi	r24, 0x00	; 0
    a684:	66 e6       	ldi	r22, 0x66	; 102
    a686:	76 e0       	ldi	r23, 0x06	; 6
    a688:	c3 ef       	ldi	r28, 0xF3	; 243
    a68a:	d2 e0       	ldi	r29, 0x02	; 2
    a68c:	89 01       	movw	r16, r18
    a68e:	01 59       	subi	r16, 0x91	; 145
    a690:	15 4f       	sbci	r17, 0xF5	; 245
    a692:	fb 01       	movw	r30, r22
    a694:	94 91       	lpm	r25, Z
    a696:	89 17       	cp	r24, r25
    a698:	90 f4       	brcc	.+36     	; 0xa6be <MenuHistoryGetMenu(unsigned char*)+0xa0>
    a69a:	8c 9f       	mul	r24, r28
    a69c:	a0 01       	movw	r20, r0
    a69e:	8d 9f       	mul	r24, r29
    a6a0:	50 0d       	add	r21, r0
    a6a2:	11 24       	eor	r1, r1
    a6a4:	fa 01       	movw	r30, r20
    a6a6:	ed 53       	subi	r30, 0x3D	; 61
    a6a8:	f9 4d       	sbci	r31, 0xD9	; 217
    a6aa:	f4 90       	lpm	r15, Z
    a6ac:	f8 01       	movw	r30, r16
    a6ae:	90 81       	ld	r25, Z
    a6b0:	9f 11       	cpse	r25, r15
    a6b2:	03 c0       	rjmp	.+6      	; 0xa6ba <MenuHistoryGetMenu(unsigned char*)+0x9c>
    a6b4:	49 51       	subi	r20, 0x19	; 25
    a6b6:	5c 4d       	sbci	r21, 0xDC	; 220
    a6b8:	d6 cf       	rjmp	.-84     	; 0xa666 <MenuHistoryGetMenu(unsigned char*)+0x48>
    a6ba:	8f 5f       	subi	r24, 0xFF	; 255
    a6bc:	ea cf       	rjmp	.-44     	; 0xa692 <MenuHistoryGetMenu(unsigned char*)+0x74>
    a6be:	80 e0       	ldi	r24, 0x00	; 0
    a6c0:	67 e6       	ldi	r22, 0x67	; 103
    a6c2:	76 e0       	ldi	r23, 0x06	; 6
    a6c4:	c3 ef       	ldi	r28, 0xF3	; 243
    a6c6:	d2 e0       	ldi	r29, 0x02	; 2
    a6c8:	89 01       	movw	r16, r18
    a6ca:	01 59       	subi	r16, 0x91	; 145
    a6cc:	15 4f       	sbci	r17, 0xF5	; 245
    a6ce:	fb 01       	movw	r30, r22
    a6d0:	94 91       	lpm	r25, Z
    a6d2:	89 17       	cp	r24, r25
    a6d4:	90 f4       	brcc	.+36     	; 0xa6fa <MenuHistoryGetMenu(unsigned char*)+0xdc>
    a6d6:	8c 9f       	mul	r24, r28
    a6d8:	a0 01       	movw	r20, r0
    a6da:	8d 9f       	mul	r24, r29
    a6dc:	50 0d       	add	r21, r0
    a6de:	11 24       	eor	r1, r1
    a6e0:	fa 01       	movw	r30, r20
    a6e2:	ef 5b       	subi	r30, 0xBF	; 191
    a6e4:	fb 4b       	sbci	r31, 0xBB	; 187
    a6e6:	f4 90       	lpm	r15, Z
    a6e8:	f8 01       	movw	r30, r16
    a6ea:	90 81       	ld	r25, Z
    a6ec:	9f 11       	cpse	r25, r15
    a6ee:	03 c0       	rjmp	.+6      	; 0xa6f6 <MenuHistoryGetMenu(unsigned char*)+0xd8>
    a6f0:	4b 59       	subi	r20, 0x9B	; 155
    a6f2:	5e 4b       	sbci	r21, 0xBE	; 190
    a6f4:	b8 cf       	rjmp	.-144    	; 0xa666 <MenuHistoryGetMenu(unsigned char*)+0x48>
    a6f6:	8f 5f       	subi	r24, 0xFF	; 255
    a6f8:	ea cf       	rjmp	.-44     	; 0xa6ce <MenuHistoryGetMenu(unsigned char*)+0xb0>
    a6fa:	90 e0       	ldi	r25, 0x00	; 0
    a6fc:	68 e6       	ldi	r22, 0x68	; 104
    a6fe:	76 e0       	ldi	r23, 0x06	; 6
    a700:	c3 ef       	ldi	r28, 0xF3	; 243
    a702:	d2 e0       	ldi	r29, 0x02	; 2
    a704:	89 01       	movw	r16, r18
    a706:	01 59       	subi	r16, 0x91	; 145
    a708:	15 4f       	sbci	r17, 0xF5	; 245
    a70a:	fb 01       	movw	r30, r22
    a70c:	84 91       	lpm	r24, Z
    a70e:	98 17       	cp	r25, r24
    a710:	08 f0       	brcs	.+2      	; 0xa714 <MenuHistoryGetMenu(unsigned char*)+0xf6>
    a712:	ae cf       	rjmp	.-164    	; 0xa670 <MenuHistoryGetMenu(unsigned char*)+0x52>
    a714:	9c 9f       	mul	r25, r28
    a716:	a0 01       	movw	r20, r0
    a718:	9d 9f       	mul	r25, r29
    a71a:	50 0d       	add	r21, r0
    a71c:	11 24       	eor	r1, r1
    a71e:	fa 01       	movw	r30, r20
    a720:	e1 54       	subi	r30, 0x41	; 65
    a722:	fe 49       	sbci	r31, 0x9E	; 158
    a724:	f4 90       	lpm	r15, Z
    a726:	f8 01       	movw	r30, r16
    a728:	80 81       	ld	r24, Z
    a72a:	8f 11       	cpse	r24, r15
    a72c:	03 c0       	rjmp	.+6      	; 0xa734 <MenuHistoryGetMenu(unsigned char*)+0x116>
    a72e:	4d 51       	subi	r20, 0x1D	; 29
    a730:	51 4a       	sbci	r21, 0xA1	; 161
    a732:	99 cf       	rjmp	.-206    	; 0xa666 <MenuHistoryGetMenu(unsigned char*)+0x48>
    a734:	9f 5f       	subi	r25, 0xFF	; 255
    a736:	e9 cf       	rjmp	.-46     	; 0xa70a <MenuHistoryGetMenu(unsigned char*)+0xec>

0000a738 <DisplayClean(unsigned int)>:
_Z12DisplayCleanj():
    a738:	bc 01       	movw	r22, r24
    a73a:	88 eb       	ldi	r24, 0xB8	; 184
    a73c:	9c e0       	ldi	r25, 0x0C	; 12
    a73e:	0c 94 09 bd 	jmp	0x17a12	; 0x17a12 <LCDWIKI_GUI::Fill_Screen(unsigned int)>

0000a742 <MenuPrepareStyle()>:
_Z16MenuPrepareStylev():
    a742:	2f 92       	push	r2
    a744:	3f 92       	push	r3
    a746:	4f 92       	push	r4
    a748:	5f 92       	push	r5
    a74a:	6f 92       	push	r6
    a74c:	7f 92       	push	r7
    a74e:	8f 92       	push	r8
    a750:	9f 92       	push	r9
    a752:	af 92       	push	r10
    a754:	bf 92       	push	r11
    a756:	cf 92       	push	r12
    a758:	df 92       	push	r13
    a75a:	ef 92       	push	r14
    a75c:	ff 92       	push	r15
    a75e:	0f 93       	push	r16
    a760:	1f 93       	push	r17
    a762:	cf 93       	push	r28
    a764:	df 93       	push	r29
    a766:	1f 92       	push	r1
    a768:	cd b7       	in	r28, 0x3d	; 61
    a76a:	de b7       	in	r29, 0x3e	; 62
    a76c:	ce 01       	movw	r24, r28
    a76e:	01 96       	adiw	r24, 0x01	; 1
    a770:	0e 94 0f 53 	call	0xa61e	; 0xa61e <MenuHistoryGetMenu(unsigned char*)>
    a774:	7c 01       	movw	r14, r24
    a776:	fc 01       	movw	r30, r24
    a778:	eb 51       	subi	r30, 0x1B	; 27
    a77a:	fd 4f       	sbci	r31, 0xFD	; 253
    a77c:	b4 90       	lpm	r11, Z
    a77e:	38 97       	sbiw	r30, 0x08	; 8
    a780:	85 90       	lpm	r8, Z+
    a782:	94 90       	lpm	r9, Z
    a784:	fc 01       	movw	r30, r24
    a786:	e1 52       	subi	r30, 0x21	; 33
    a788:	fd 4f       	sbci	r31, 0xFD	; 253
    a78a:	c5 90       	lpm	r12, Z+
    a78c:	d4 90       	lpm	r13, Z
    a78e:	fc 01       	movw	r30, r24
    a790:	ef 51       	subi	r30, 0x1F	; 31
    a792:	fd 4f       	sbci	r31, 0xFD	; 253
    a794:	65 90       	lpm	r6, Z+
    a796:	74 90       	lpm	r7, Z
    a798:	fc 01       	movw	r30, r24
    a79a:	ed 51       	subi	r30, 0x1D	; 29
    a79c:	fd 4f       	sbci	r31, 0xFD	; 253
    a79e:	45 90       	lpm	r4, Z+
    a7a0:	54 90       	lpm	r5, Z
    a7a2:	fc 01       	movw	r30, r24
    a7a4:	ea 51       	subi	r30, 0x1A	; 26
    a7a6:	fd 4f       	sbci	r31, 0xFD	; 253
    a7a8:	25 90       	lpm	r2, Z+
    a7aa:	34 90       	lpm	r3, Z
    a7ac:	b0 fe       	sbrs	r11, 0
    a7ae:	03 c0       	rjmp	.+6      	; 0xa7b6 <MenuPrepareStyle()+0x74>
    a7b0:	c1 01       	movw	r24, r2
    a7b2:	0e 94 9c 53 	call	0xa738	; 0xa738 <DisplayClean(unsigned int)>
    a7b6:	b1 fe       	sbrs	r11, 1
    a7b8:	11 c0       	rjmp	.+34     	; 0xa7dc <MenuPrepareStyle()+0x9a>
    a7ba:	b1 01       	movw	r22, r2
    a7bc:	88 eb       	ldi	r24, 0xB8	; 184
    a7be:	9c e0       	ldi	r25, 0x0C	; 12
    a7c0:	0e 94 a9 bc 	call	0x17952	; 0x17952 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    a7c4:	86 01       	movw	r16, r12
    a7c6:	04 0d       	add	r16, r4
    a7c8:	15 1d       	adc	r17, r5
    a7ca:	94 01       	movw	r18, r8
    a7cc:	26 0d       	add	r18, r6
    a7ce:	37 1d       	adc	r19, r7
    a7d0:	a6 01       	movw	r20, r12
    a7d2:	b4 01       	movw	r22, r8
    a7d4:	88 eb       	ldi	r24, 0xB8	; 184
    a7d6:	9c e0       	ldi	r25, 0x0C	; 12
    a7d8:	0e 94 ad bc 	call	0x1795a	; 0x1795a <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)>
    a7dc:	b2 fe       	sbrs	r11, 2
    a7de:	30 c0       	rjmp	.+96     	; 0xa840 <MenuPrepareStyle()+0xfe>
    a7e0:	70 e0       	ldi	r23, 0x00	; 0
    a7e2:	60 e0       	ldi	r22, 0x00	; 0
    a7e4:	88 eb       	ldi	r24, 0xB8	; 184
    a7e6:	9c e0       	ldi	r25, 0x0C	; 12
    a7e8:	0e 94 a9 bc 	call	0x17952	; 0x17952 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    a7ec:	b1 2c       	mov	r11, r1
    a7ee:	a1 2c       	mov	r10, r1
    a7f0:	4c 0c       	add	r4, r12
    a7f2:	5d 1c       	adc	r5, r13
    a7f4:	14 01       	movw	r2, r8
    a7f6:	26 0c       	add	r2, r6
    a7f8:	37 1c       	adc	r3, r7
    a7fa:	82 01       	movw	r16, r4
    a7fc:	0a 19       	sub	r16, r10
    a7fe:	1b 09       	sbc	r17, r11
    a800:	91 01       	movw	r18, r2
    a802:	2a 19       	sub	r18, r10
    a804:	3b 09       	sbc	r19, r11
    a806:	b4 01       	movw	r22, r8
    a808:	6a 0d       	add	r22, r10
    a80a:	7b 1d       	adc	r23, r11
    a80c:	a6 01       	movw	r20, r12
    a80e:	88 eb       	ldi	r24, 0xB8	; 184
    a810:	9c e0       	ldi	r25, 0x0C	; 12
    a812:	0e 94 34 bd 	call	0x17a68	; 0x17a68 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    a816:	93 01       	movw	r18, r6
    a818:	2a 19       	sub	r18, r10
    a81a:	3b 09       	sbc	r19, r11
    a81c:	a6 01       	movw	r20, r12
    a81e:	49 5e       	subi	r20, 0xE9	; 233
    a820:	5f 4f       	sbci	r21, 0xFF	; 255
    a822:	b4 01       	movw	r22, r8
    a824:	88 eb       	ldi	r24, 0xB8	; 184
    a826:	9c e0       	ldi	r25, 0x0C	; 12
    a828:	0e 94 f3 bc 	call	0x179e6	; 0x179e6 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int)>
    a82c:	8f ef       	ldi	r24, 0xFF	; 255
    a82e:	a8 1a       	sub	r10, r24
    a830:	b8 0a       	sbc	r11, r24
    a832:	ef ef       	ldi	r30, 0xFF	; 255
    a834:	ce 1a       	sub	r12, r30
    a836:	de 0a       	sbc	r13, r30
    a838:	f4 e0       	ldi	r31, 0x04	; 4
    a83a:	af 16       	cp	r10, r31
    a83c:	b1 04       	cpc	r11, r1
    a83e:	e9 f6       	brne	.-70     	; 0xa7fa <MenuPrepareStyle()+0xb8>
    a840:	f7 01       	movw	r30, r14
    a842:	ef 50       	subi	r30, 0x0F	; 15
    a844:	fd 4f       	sbci	r31, 0xFD	; 253
    a846:	25 91       	lpm	r18, Z+
    a848:	34 91       	lpm	r19, Z
    a84a:	f7 01       	movw	r30, r14
    a84c:	e4 52       	subi	r30, 0x24	; 36
    a84e:	fd 4f       	sbci	r31, 0xFD	; 253
    a850:	e4 91       	lpm	r30, Z
    a852:	69 81       	ldd	r22, Y+1	; 0x01
    a854:	70 e0       	ldi	r23, 0x00	; 0
    a856:	4f ef       	ldi	r20, 0xFF	; 255
    a858:	8e 2f       	mov	r24, r30
    a85a:	90 e0       	ldi	r25, 0x00	; 0
    a85c:	f9 01       	movw	r30, r18
    a85e:	19 95       	eicall
    a860:	10 92 0d 0f 	sts	0x0F0D, r1	; 0x800f0d <display_redraw_once>
    a864:	0f 90       	pop	r0
    a866:	df 91       	pop	r29
    a868:	cf 91       	pop	r28
    a86a:	1f 91       	pop	r17
    a86c:	0f 91       	pop	r16
    a86e:	ff 90       	pop	r15
    a870:	ef 90       	pop	r14
    a872:	df 90       	pop	r13
    a874:	cf 90       	pop	r12
    a876:	bf 90       	pop	r11
    a878:	af 90       	pop	r10
    a87a:	9f 90       	pop	r9
    a87c:	8f 90       	pop	r8
    a87e:	7f 90       	pop	r7
    a880:	6f 90       	pop	r6
    a882:	5f 90       	pop	r5
    a884:	4f 90       	pop	r4
    a886:	3f 90       	pop	r3
    a888:	2f 90       	pop	r2
    a88a:	08 95       	ret

0000a88c <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char)>:
_Z19MenuHistoryPrevMenujjh():
    a88c:	80 91 64 0a 	lds	r24, 0x0A64	; 0x800a64 <MenuHistoryIndex>
    a890:	88 23       	and	r24, r24
    a892:	29 f0       	breq	.+10     	; 0xa89e <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char)+0x12>
    a894:	81 50       	subi	r24, 0x01	; 1
    a896:	80 93 64 0a 	sts	0x0A64, r24	; 0x800a64 <MenuHistoryIndex>
    a89a:	0c 94 a1 53 	jmp	0xa742	; 0xa742 <MenuPrepareStyle()>
    a89e:	08 95       	ret

0000a8a0 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char)>:
_Z19MenuHistoryNextMenujjh():
    a8a0:	20 91 64 0a 	lds	r18, 0x0A64	; 0x800a64 <MenuHistoryIndex>
    a8a4:	2a 30       	cpi	r18, 0x0A	; 10
    a8a6:	70 f4       	brcc	.+28     	; 0xa8c4 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char)+0x24>
    a8a8:	2f 5f       	subi	r18, 0xFF	; 255
    a8aa:	20 93 64 0a 	sts	0x0A64, r18	; 0x800a64 <MenuHistoryIndex>
    a8ae:	30 e0       	ldi	r19, 0x00	; 0
    a8b0:	f9 01       	movw	r30, r18
    a8b2:	e1 59       	subi	r30, 0x91	; 145
    a8b4:	f5 4f       	sbci	r31, 0xF5	; 245
    a8b6:	80 83       	st	Z, r24
    a8b8:	2b 59       	subi	r18, 0x9B	; 155
    a8ba:	35 4f       	sbci	r19, 0xF5	; 245
    a8bc:	f9 01       	movw	r30, r18
    a8be:	60 83       	st	Z, r22
    a8c0:	0c 94 a1 53 	jmp	0xa742	; 0xa742 <MenuPrepareStyle()>
    a8c4:	08 95       	ret

0000a8c6 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.56]>:
_Z19MenuHistoryPrevMenujjh():
    a8c6:	80 91 64 0a 	lds	r24, 0x0A64	; 0x800a64 <MenuHistoryIndex>
    a8ca:	88 23       	and	r24, r24
    a8cc:	29 f0       	breq	.+10     	; 0xa8d8 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.56]+0x12>
    a8ce:	81 50       	subi	r24, 0x01	; 1
    a8d0:	80 93 64 0a 	sts	0x0A64, r24	; 0x800a64 <MenuHistoryIndex>
    a8d4:	0c 94 a1 53 	jmp	0xa742	; 0xa742 <MenuPrepareStyle()>
    a8d8:	08 95       	ret

0000a8da <click_tds_deassociate_onewire(unsigned int, unsigned int, unsigned char)>:
_Z29click_tds_deassociate_onewirejjh():
    a8da:	86 2f       	mov	r24, r22
    a8dc:	0e 94 67 b4 	call	0x168ce	; 0x168ce <tds_set_clear_wrom_id(unsigned char)>
    a8e0:	0c 94 63 54 	jmp	0xa8c6	; 0xa8c6 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.56]>

0000a8e4 <dialog_set_string_button_click(unsigned int, unsigned int, unsigned char)>:
_Z30dialog_set_string_button_clickjjh():
    a8e4:	ff 92       	push	r15
    a8e6:	0f 93       	push	r16
    a8e8:	1f 93       	push	r17
    a8ea:	cf 93       	push	r28
    a8ec:	df 93       	push	r29
    a8ee:	ec 01       	movw	r28, r24
    a8f0:	8b 01       	movw	r16, r22
    a8f2:	f4 2e       	mov	r15, r20
    a8f4:	e0 91 7c 0a 	lds	r30, 0x0A7C	; 0x800a7c <dialog_save_valid_function>
    a8f8:	f0 91 7d 0a 	lds	r31, 0x0A7D	; 0x800a7d <dialog_save_valid_function+0x1>
    a8fc:	19 95       	eicall
    a8fe:	81 30       	cpi	r24, 0x01	; 1
    a900:	79 f4       	brne	.+30     	; 0xa920 <dialog_set_string_button_click(unsigned int, unsigned int, unsigned char)+0x3c>
    a902:	e0 91 7e 0a 	lds	r30, 0x0A7E	; 0x800a7e <dialog_save_string_function>
    a906:	f0 91 7f 0a 	lds	r31, 0x0A7F	; 0x800a7f <dialog_save_string_function+0x1>
    a90a:	4f 2d       	mov	r20, r15
    a90c:	b8 01       	movw	r22, r16
    a90e:	ce 01       	movw	r24, r28
    a910:	19 95       	eicall
    a912:	df 91       	pop	r29
    a914:	cf 91       	pop	r28
    a916:	1f 91       	pop	r17
    a918:	0f 91       	pop	r16
    a91a:	ff 90       	pop	r15
    a91c:	0c 94 63 54 	jmp	0xa8c6	; 0xa8c6 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.56]>
    a920:	df 91       	pop	r29
    a922:	cf 91       	pop	r28
    a924:	1f 91       	pop	r17
    a926:	0f 91       	pop	r16
    a928:	ff 90       	pop	r15
    a92a:	08 95       	ret

0000a92c <dialog_set_variable_button_click(unsigned int, unsigned int, unsigned char)>:
_Z32dialog_set_variable_button_clickjjh():
    a92c:	1f 93       	push	r17
    a92e:	cf 93       	push	r28
    a930:	df 93       	push	r29
    a932:	ec 01       	movw	r28, r24
    a934:	14 2f       	mov	r17, r20
    a936:	90 e0       	ldi	r25, 0x00	; 0
    a938:	80 e0       	ldi	r24, 0x00	; 0
    a93a:	0f 94 f5 14 	call	0x229ea	; 0x229ea <__floatunsisf>
    a93e:	ab 01       	movw	r20, r22
    a940:	bc 01       	movw	r22, r24
    a942:	85 e1       	ldi	r24, 0x15	; 21
    a944:	8c 9f       	mul	r24, r28
    a946:	f0 01       	movw	r30, r0
    a948:	8d 9f       	mul	r24, r29
    a94a:	f0 0d       	add	r31, r0
    a94c:	11 24       	eor	r1, r1
    a94e:	eb 53       	subi	r30, 0x3B	; 59
    a950:	f5 4f       	sbci	r31, 0xF5	; 245
    a952:	03 88       	ldd	r0, Z+19	; 0x13
    a954:	f4 89       	ldd	r31, Z+20	; 0x14
    a956:	e0 2d       	mov	r30, r0
    a958:	21 2f       	mov	r18, r17
    a95a:	ce 01       	movw	r24, r28
    a95c:	19 95       	eicall
    a95e:	df 91       	pop	r29
    a960:	cf 91       	pop	r28
    a962:	1f 91       	pop	r17
    a964:	0c 94 63 54 	jmp	0xa8c6	; 0xa8c6 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.56]>

0000a968 <click_dialog_button_yes(unsigned int, unsigned int, unsigned char)>:
_Z23click_dialog_button_yesjjh():
    a968:	80 91 c3 0a 	lds	r24, 0x0AC3	; 0x800ac3 <dialog_yes_args1>
    a96c:	e0 91 62 0a 	lds	r30, 0x0A62	; 0x800a62 <dialog_yes_function>
    a970:	f0 91 63 0a 	lds	r31, 0x0A63	; 0x800a63 <dialog_yes_function+0x1>
    a974:	40 e0       	ldi	r20, 0x00	; 0
    a976:	70 e0       	ldi	r23, 0x00	; 0
    a978:	60 e0       	ldi	r22, 0x00	; 0
    a97a:	90 e0       	ldi	r25, 0x00	; 0
    a97c:	19 95       	eicall
    a97e:	0c 94 63 54 	jmp	0xa8c6	; 0xa8c6 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.56]>

0000a982 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.59]>:
_Z19MenuHistoryNextMenujjh():
    a982:	20 91 64 0a 	lds	r18, 0x0A64	; 0x800a64 <MenuHistoryIndex>
    a986:	2a 30       	cpi	r18, 0x0A	; 10
    a988:	70 f4       	brcc	.+28     	; 0xa9a6 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.59]+0x24>
    a98a:	2f 5f       	subi	r18, 0xFF	; 255
    a98c:	20 93 64 0a 	sts	0x0A64, r18	; 0x800a64 <MenuHistoryIndex>
    a990:	30 e0       	ldi	r19, 0x00	; 0
    a992:	f9 01       	movw	r30, r18
    a994:	e1 59       	subi	r30, 0x91	; 145
    a996:	f5 4f       	sbci	r31, 0xF5	; 245
    a998:	80 83       	st	Z, r24
    a99a:	2b 59       	subi	r18, 0x9B	; 155
    a99c:	35 4f       	sbci	r19, 0xF5	; 245
    a99e:	f9 01       	movw	r30, r18
    a9a0:	60 83       	st	Z, r22
    a9a2:	0c 94 a1 53 	jmp	0xa742	; 0xa742 <MenuPrepareStyle()>
    a9a6:	08 95       	ret

0000a9a8 <display_menu_tds_set_period(unsigned int, unsigned int, unsigned char)>:
_Z27display_menu_tds_set_periodjjh():
    a9a8:	1f 93       	push	r17
    a9aa:	cf 93       	push	r28
    a9ac:	df 93       	push	r29
    a9ae:	c8 2f       	mov	r28, r24
    a9b0:	16 2f       	mov	r17, r22
    a9b2:	70 e0       	ldi	r23, 0x00	; 0
    a9b4:	60 e0       	ldi	r22, 0x00	; 0
    a9b6:	86 e6       	ldi	r24, 0x66	; 102
    a9b8:	90 e0       	ldi	r25, 0x00	; 0
    a9ba:	0e 94 c1 54 	call	0xa982	; 0xa982 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.59]>
    a9be:	81 2f       	mov	r24, r17
    a9c0:	0e 94 bb b3 	call	0x16776	; 0x16776 <tds_get_period(unsigned char)>
_Z29display_function_set_variableffffhhhhPFvjfhE():
    a9c4:	25 e1       	ldi	r18, 0x15	; 21
    a9c6:	c2 9f       	mul	r28, r18
    a9c8:	e0 01       	movw	r28, r0
    a9ca:	11 24       	eor	r1, r1
    a9cc:	cb 53       	subi	r28, 0x3B	; 59
    a9ce:	d5 4f       	sbci	r29, 0xF5	; 245
_Z27display_menu_tds_set_periodjjh():
    a9d0:	bc 01       	movw	r22, r24
    a9d2:	99 0f       	add	r25, r25
    a9d4:	88 0b       	sbc	r24, r24
    a9d6:	99 0b       	sbc	r25, r25
    a9d8:	0f 94 f7 14 	call	0x229ee	; 0x229ee <__floatsisf>
    a9dc:	68 83       	st	Y, r22
    a9de:	79 83       	std	Y+1, r23	; 0x01
    a9e0:	8a 83       	std	Y+2, r24	; 0x02
    a9e2:	9b 83       	std	Y+3, r25	; 0x03
_Z29display_function_set_variableffffhhhhPFvjfhE():
    a9e4:	80 e0       	ldi	r24, 0x00	; 0
    a9e6:	90 e0       	ldi	r25, 0x00	; 0
    a9e8:	a0 e8       	ldi	r26, 0x80	; 128
    a9ea:	bf e3       	ldi	r27, 0x3F	; 63
    a9ec:	88 87       	std	Y+8, r24	; 0x08
    a9ee:	99 87       	std	Y+9, r25	; 0x09
    a9f0:	aa 87       	std	Y+10, r26	; 0x0a
    a9f2:	bb 87       	std	Y+11, r27	; 0x0b
    a9f4:	40 e0       	ldi	r20, 0x00	; 0
    a9f6:	50 e0       	ldi	r21, 0x00	; 0
    a9f8:	6f e7       	ldi	r22, 0x7F	; 127
    a9fa:	73 e4       	ldi	r23, 0x43	; 67
    a9fc:	4c 83       	std	Y+4, r20	; 0x04
    a9fe:	5d 83       	std	Y+5, r21	; 0x05
    aa00:	6e 83       	std	Y+6, r22	; 0x06
    aa02:	7f 83       	std	Y+7, r23	; 0x07
    aa04:	8e 87       	std	Y+14, r24	; 0x0e
    aa06:	9f 87       	std	Y+15, r25	; 0x0f
    aa08:	a8 8b       	std	Y+16, r26	; 0x10
    aa0a:	b9 8b       	std	Y+17, r27	; 0x11
    aa0c:	81 e0       	ldi	r24, 0x01	; 1
    aa0e:	8d 87       	std	Y+13, r24	; 0x0d
    aa10:	1a 8b       	std	Y+18, r17	; 0x12
    aa12:	1c 86       	std	Y+12, r1	; 0x0c
    aa14:	89 ef       	ldi	r24, 0xF9	; 249
    aa16:	9d e4       	ldi	r25, 0x4D	; 77
    aa18:	9c 8b       	std	Y+20, r25	; 0x14
    aa1a:	8b 8b       	std	Y+19, r24	; 0x13
_Z27display_menu_tds_set_periodjjh():
    aa1c:	df 91       	pop	r29
    aa1e:	cf 91       	pop	r28
    aa20:	1f 91       	pop	r17
    aa22:	08 95       	ret

0000aa24 <display_menu_tds_set_offset(unsigned int, unsigned int, unsigned char)>:
_Z27display_menu_tds_set_offsetjjh():
    aa24:	1f 93       	push	r17
    aa26:	cf 93       	push	r28
    aa28:	df 93       	push	r29
    aa2a:	c8 2f       	mov	r28, r24
    aa2c:	16 2f       	mov	r17, r22
    aa2e:	70 e0       	ldi	r23, 0x00	; 0
    aa30:	60 e0       	ldi	r22, 0x00	; 0
    aa32:	86 e6       	ldi	r24, 0x66	; 102
    aa34:	90 e0       	ldi	r25, 0x00	; 0
    aa36:	0e 94 c1 54 	call	0xa982	; 0xa982 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.59]>
    aa3a:	81 2f       	mov	r24, r17
    aa3c:	0e 94 7c b3 	call	0x166f8	; 0x166f8 <tds_get_offset(unsigned char)>
_Z29display_function_set_variableffffhhhhPFvjfhE():
    aa40:	25 e1       	ldi	r18, 0x15	; 21
    aa42:	c2 9f       	mul	r28, r18
    aa44:	e0 01       	movw	r28, r0
    aa46:	11 24       	eor	r1, r1
    aa48:	cb 53       	subi	r28, 0x3B	; 59
    aa4a:	d5 4f       	sbci	r29, 0xF5	; 245
_Z27display_menu_tds_set_offsetjjh():
    aa4c:	bc 01       	movw	r22, r24
    aa4e:	99 0f       	add	r25, r25
    aa50:	88 0b       	sbc	r24, r24
    aa52:	99 0b       	sbc	r25, r25
    aa54:	0f 94 f7 14 	call	0x229ee	; 0x229ee <__floatsisf>
    aa58:	20 e0       	ldi	r18, 0x00	; 0
    aa5a:	30 e0       	ldi	r19, 0x00	; 0
    aa5c:	4a e7       	ldi	r20, 0x7A	; 122
    aa5e:	54 e4       	ldi	r21, 0x44	; 68
    aa60:	0f 94 4d 14 	call	0x2289a	; 0x2289a <__divsf3>
_Z29display_function_set_variableffffhhhhPFvjfhE():
    aa64:	68 83       	st	Y, r22
    aa66:	79 83       	std	Y+1, r23	; 0x01
    aa68:	8a 83       	std	Y+2, r24	; 0x02
    aa6a:	9b 83       	std	Y+3, r25	; 0x03
    aa6c:	80 e0       	ldi	r24, 0x00	; 0
    aa6e:	90 e0       	ldi	r25, 0x00	; 0
    aa70:	a0 e2       	ldi	r26, 0x20	; 32
    aa72:	b1 ec       	ldi	r27, 0xC1	; 193
    aa74:	88 87       	std	Y+8, r24	; 0x08
    aa76:	99 87       	std	Y+9, r25	; 0x09
    aa78:	aa 87       	std	Y+10, r26	; 0x0a
    aa7a:	bb 87       	std	Y+11, r27	; 0x0b
    aa7c:	80 e0       	ldi	r24, 0x00	; 0
    aa7e:	90 e0       	ldi	r25, 0x00	; 0
    aa80:	a0 e2       	ldi	r26, 0x20	; 32
    aa82:	b1 e4       	ldi	r27, 0x41	; 65
    aa84:	8c 83       	std	Y+4, r24	; 0x04
    aa86:	9d 83       	std	Y+5, r25	; 0x05
    aa88:	ae 83       	std	Y+6, r26	; 0x06
    aa8a:	bf 83       	std	Y+7, r27	; 0x07
    aa8c:	8d ec       	ldi	r24, 0xCD	; 205
    aa8e:	9c ec       	ldi	r25, 0xCC	; 204
    aa90:	ac ec       	ldi	r26, 0xCC	; 204
    aa92:	bd e3       	ldi	r27, 0x3D	; 61
    aa94:	8e 87       	std	Y+14, r24	; 0x0e
    aa96:	9f 87       	std	Y+15, r25	; 0x0f
    aa98:	a8 8b       	std	Y+16, r26	; 0x10
    aa9a:	b9 8b       	std	Y+17, r27	; 0x11
    aa9c:	1d 86       	std	Y+13, r1	; 0x0d
    aa9e:	1a 8b       	std	Y+18, r17	; 0x12
    aaa0:	1c 86       	std	Y+12, r1	; 0x0c
    aaa2:	80 ee       	ldi	r24, 0xE0	; 224
    aaa4:	9d e4       	ldi	r25, 0x4D	; 77
    aaa6:	9c 8b       	std	Y+20, r25	; 0x14
    aaa8:	8b 8b       	std	Y+19, r24	; 0x13
_Z27display_menu_tds_set_offsetjjh():
    aaaa:	df 91       	pop	r29
    aaac:	cf 91       	pop	r28
    aaae:	1f 91       	pop	r17
    aab0:	08 95       	ret

0000aab2 <button_set_brightness_auto_shutdown_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)>:
_Z54button_set_brightness_auto_shutdown_dyn_symbol_onclickjjh():
    aab2:	70 e0       	ldi	r23, 0x00	; 0
    aab4:	60 e0       	ldi	r22, 0x00	; 0
    aab6:	8d e9       	ldi	r24, 0x9D	; 157
    aab8:	90 e0       	ldi	r25, 0x00	; 0
    aaba:	0c 94 c1 54 	jmp	0xa982	; 0xa982 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.59]>

0000aabe <button_change_brightness_display_dyn_button_onclick(unsigned int, unsigned int, unsigned char)>:
_Z51button_change_brightness_display_dyn_button_onclickjjh():
    aabe:	70 e0       	ldi	r23, 0x00	; 0
    aac0:	60 e0       	ldi	r22, 0x00	; 0
    aac2:	8b e9       	ldi	r24, 0x9B	; 155
    aac4:	90 e0       	ldi	r25, 0x00	; 0
    aac6:	0c 94 c1 54 	jmp	0xa982	; 0xa982 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.59]>

0000aaca <thermostat_button_activate_ring_onclick(unsigned int, unsigned int, unsigned char)>:
_Z39thermostat_button_activate_ring_onclickjjh():
    aaca:	1f 93       	push	r17
    aacc:	cf 93       	push	r28
    aace:	df 93       	push	r29
    aad0:	00 d0       	rcall	.+0      	; 0xaad2 <thermostat_button_activate_ring_onclick(unsigned int, unsigned int, unsigned char)+0x8>
    aad2:	00 d0       	rcall	.+0      	; 0xaad4 <thermostat_button_activate_ring_onclick(unsigned int, unsigned int, unsigned char)+0xa>
    aad4:	00 d0       	rcall	.+0      	; 0xaad6 <thermostat_button_activate_ring_onclick(unsigned int, unsigned int, unsigned char)+0xc>
    aad6:	1f 92       	push	r1
    aad8:	cd b7       	in	r28, 0x3d	; 61
    aada:	de b7       	in	r29, 0x3e	; 62
    aadc:	16 2f       	mov	r17, r22
    aade:	70 e0       	ldi	r23, 0x00	; 0
    aae0:	60 e0       	ldi	r22, 0x00	; 0
    aae2:	84 e6       	ldi	r24, 0x64	; 100
    aae4:	90 e0       	ldi	r25, 0x00	; 0
    aae6:	0e 94 c1 54 	call	0xa982	; 0xa982 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.59]>
    aaea:	84 e3       	ldi	r24, 0x34	; 52
    aaec:	9e e4       	ldi	r25, 0x4E	; 78
    aaee:	90 93 63 0a 	sts	0x0A63, r25	; 0x800a63 <dialog_yes_function+0x1>
    aaf2:	80 93 62 0a 	sts	0x0A62, r24	; 0x800a62 <dialog_yes_function>
    aaf6:	10 93 c3 0a 	sts	0x0AC3, r17	; 0x800ac3 <dialog_yes_args1>
    aafa:	64 ed       	ldi	r22, 0xD4	; 212
    aafc:	73 e8       	ldi	r23, 0x83	; 131
    aafe:	83 ea       	ldi	r24, 0xA3	; 163
    ab00:	9a e0       	ldi	r25, 0x0A	; 10
    ab02:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    ab06:	60 e9       	ldi	r22, 0x90	; 144
    ab08:	78 e0       	ldi	r23, 0x08	; 8
    ab0a:	83 ea       	ldi	r24, 0xA3	; 163
    ab0c:	9a e0       	ldi	r25, 0x0A	; 10
    ab0e:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    ab12:	be 01       	movw	r22, r28
    ab14:	6f 5f       	subi	r22, 0xFF	; 255
    ab16:	7f 4f       	sbci	r23, 0xFF	; 255
    ab18:	81 2f       	mov	r24, r17
    ab1a:	0e 94 9f b7 	call	0x16f3e	; 0x16f3e <thermostat_ring_get_name(unsigned char, char*)>
    ab1e:	be 01       	movw	r22, r28
    ab20:	6f 5f       	subi	r22, 0xFF	; 255
    ab22:	7f 4f       	sbci	r23, 0xFF	; 255
    ab24:	83 ea       	ldi	r24, 0xA3	; 163
    ab26:	9a e0       	ldi	r25, 0x0A	; 10
    ab28:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    ab2c:	2a 96       	adiw	r28, 0x0a	; 10
    ab2e:	0f b6       	in	r0, 0x3f	; 63
    ab30:	f8 94       	cli
    ab32:	de bf       	out	0x3e, r29	; 62
    ab34:	0f be       	out	0x3f, r0	; 63
    ab36:	cd bf       	out	0x3d, r28	; 61
    ab38:	df 91       	pop	r29
    ab3a:	cf 91       	pop	r28
    ab3c:	1f 91       	pop	r17
    ab3e:	08 95       	ret

0000ab40 <thermostat_button_deactivate_ring_onclick(unsigned int, unsigned int, unsigned char)>:
_Z41thermostat_button_deactivate_ring_onclickjjh():
    ab40:	1f 93       	push	r17
    ab42:	cf 93       	push	r28
    ab44:	df 93       	push	r29
    ab46:	00 d0       	rcall	.+0      	; 0xab48 <thermostat_button_deactivate_ring_onclick(unsigned int, unsigned int, unsigned char)+0x8>
    ab48:	00 d0       	rcall	.+0      	; 0xab4a <thermostat_button_deactivate_ring_onclick(unsigned int, unsigned int, unsigned char)+0xa>
    ab4a:	00 d0       	rcall	.+0      	; 0xab4c <thermostat_button_deactivate_ring_onclick(unsigned int, unsigned int, unsigned char)+0xc>
    ab4c:	1f 92       	push	r1
    ab4e:	cd b7       	in	r28, 0x3d	; 61
    ab50:	de b7       	in	r29, 0x3e	; 62
    ab52:	16 2f       	mov	r17, r22
    ab54:	70 e0       	ldi	r23, 0x00	; 0
    ab56:	60 e0       	ldi	r22, 0x00	; 0
    ab58:	84 e6       	ldi	r24, 0x64	; 100
    ab5a:	90 e0       	ldi	r25, 0x00	; 0
    ab5c:	0e 94 c1 54 	call	0xa982	; 0xa982 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.59]>
    ab60:	87 e3       	ldi	r24, 0x37	; 55
    ab62:	9e e4       	ldi	r25, 0x4E	; 78
    ab64:	90 93 63 0a 	sts	0x0A63, r25	; 0x800a63 <dialog_yes_function+0x1>
    ab68:	80 93 62 0a 	sts	0x0A62, r24	; 0x800a62 <dialog_yes_function>
    ab6c:	10 93 c3 0a 	sts	0x0AC3, r17	; 0x800ac3 <dialog_yes_args1>
    ab70:	63 ee       	ldi	r22, 0xE3	; 227
    ab72:	73 e8       	ldi	r23, 0x83	; 131
    ab74:	83 ea       	ldi	r24, 0xA3	; 163
    ab76:	9a e0       	ldi	r25, 0x0A	; 10
    ab78:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    ab7c:	60 e9       	ldi	r22, 0x90	; 144
    ab7e:	78 e0       	ldi	r23, 0x08	; 8
    ab80:	83 ea       	ldi	r24, 0xA3	; 163
    ab82:	9a e0       	ldi	r25, 0x0A	; 10
    ab84:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    ab88:	be 01       	movw	r22, r28
    ab8a:	6f 5f       	subi	r22, 0xFF	; 255
    ab8c:	7f 4f       	sbci	r23, 0xFF	; 255
    ab8e:	81 2f       	mov	r24, r17
    ab90:	0e 94 9f b7 	call	0x16f3e	; 0x16f3e <thermostat_ring_get_name(unsigned char, char*)>
    ab94:	be 01       	movw	r22, r28
    ab96:	6f 5f       	subi	r22, 0xFF	; 255
    ab98:	7f 4f       	sbci	r23, 0xFF	; 255
    ab9a:	83 ea       	ldi	r24, 0xA3	; 163
    ab9c:	9a e0       	ldi	r25, 0x0A	; 10
    ab9e:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    aba2:	2a 96       	adiw	r28, 0x0a	; 10
    aba4:	0f b6       	in	r0, 0x3f	; 63
    aba6:	f8 94       	cli
    aba8:	de bf       	out	0x3e, r29	; 62
    abaa:	0f be       	out	0x3f, r0	; 63
    abac:	cd bf       	out	0x3d, r28	; 61
    abae:	df 91       	pop	r29
    abb0:	cf 91       	pop	r28
    abb2:	1f 91       	pop	r17
    abb4:	08 95       	ret

0000abb6 <dyn_button_show_all_thermostat_dyn_button_onclick(unsigned int, unsigned int, unsigned char)>:
_Z49dyn_button_show_all_thermostat_dyn_button_onclickjjh():
    abb6:	64 2f       	mov	r22, r20
    abb8:	70 e0       	ldi	r23, 0x00	; 0
    abba:	89 e0       	ldi	r24, 0x09	; 9
    abbc:	90 e0       	ldi	r25, 0x00	; 0
    abbe:	0c 94 c1 54 	jmp	0xa982	; 0xa982 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.59]>

0000abc2 <button_change_default_ring_via_dialog_onclick(unsigned int, unsigned int, unsigned char)>:
_Z45button_change_default_ring_via_dialog_onclickjjh():
    abc2:	60 91 3a 0b 	lds	r22, 0x0B3A	; 0x800b3a <default_ring>
    abc6:	70 e0       	ldi	r23, 0x00	; 0
    abc8:	8a e0       	ldi	r24, 0x0A	; 10
    abca:	90 e0       	ldi	r25, 0x00	; 0
    abcc:	0c 94 c1 54 	jmp	0xa982	; 0xa982 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.59]>

0000abd0 <clik_button_onewire_scan_bus(unsigned int, unsigned int, unsigned char)>:
_Z28clik_button_onewire_scan_busjjh():
    abd0:	0f 93       	push	r16
    abd2:	1f 93       	push	r17
    abd4:	cf 93       	push	r28
    abd6:	df 93       	push	r29
    abd8:	cd b7       	in	r28, 0x3d	; 61
    abda:	de b7       	in	r29, 0x3e	; 62
    abdc:	a0 97       	sbiw	r28, 0x20	; 32
    abde:	0f b6       	in	r0, 0x3f	; 63
    abe0:	f8 94       	cli
    abe2:	de bf       	out	0x3e, r29	; 62
    abe4:	0f be       	out	0x3f, r0	; 63
    abe6:	cd bf       	out	0x3d, r28	; 61
    abe8:	10 92 dd 10 	sts	0x10DD, r1	; 0x8010dd <Global_HWwirenum>
    abec:	80 e0       	ldi	r24, 0x00	; 0
    abee:	0e 94 26 b5 	call	0x16a4c	; 0x16a4c <one_hw_search_device(unsigned char)>
    abf2:	0e 94 e6 b3 	call	0x167cc	; 0x167cc <tds_update_associate()>
    abf6:	70 e0       	ldi	r23, 0x00	; 0
    abf8:	60 e0       	ldi	r22, 0x00	; 0
    abfa:	88 e6       	ldi	r24, 0x68	; 104
    abfc:	90 e0       	ldi	r25, 0x00	; 0
    abfe:	0e 94 c1 54 	call	0xa982	; 0xa982 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.59]>
    ac02:	80 91 dd 10 	lds	r24, 0x10DD	; 0x8010dd <Global_HWwirenum>
    ac06:	1f 92       	push	r1
    ac08:	8f 93       	push	r24
    ac0a:	85 ef       	ldi	r24, 0xF5	; 245
    ac0c:	92 e0       	ldi	r25, 0x02	; 2
    ac0e:	9f 93       	push	r25
    ac10:	8f 93       	push	r24
    ac12:	8e 01       	movw	r16, r28
    ac14:	0f 5f       	subi	r16, 0xFF	; 255
    ac16:	1f 4f       	sbci	r17, 0xFF	; 255
    ac18:	1f 93       	push	r17
    ac1a:	0f 93       	push	r16
    ac1c:	0f 94 a6 1b 	call	0x2374c	; 0x2374c <sprintf>
    ac20:	b8 01       	movw	r22, r16
    ac22:	83 ea       	ldi	r24, 0xA3	; 163
    ac24:	9a e0       	ldi	r25, 0x0A	; 10
    ac26:	0f 94 67 1a 	call	0x234ce	; 0x234ce <strcpy>
    ac2a:	0f 90       	pop	r0
    ac2c:	0f 90       	pop	r0
    ac2e:	0f 90       	pop	r0
    ac30:	0f 90       	pop	r0
    ac32:	0f 90       	pop	r0
    ac34:	0f 90       	pop	r0
    ac36:	a0 96       	adiw	r28, 0x20	; 32
    ac38:	0f b6       	in	r0, 0x3f	; 63
    ac3a:	f8 94       	cli
    ac3c:	de bf       	out	0x3e, r29	; 62
    ac3e:	0f be       	out	0x3f, r0	; 63
    ac40:	cd bf       	out	0x3d, r28	; 61
    ac42:	df 91       	pop	r29
    ac44:	cf 91       	pop	r28
    ac46:	1f 91       	pop	r17
    ac48:	0f 91       	pop	r16
    ac4a:	08 95       	ret

0000ac4c <click_tds_associate_or_setting_onewire(unsigned int, unsigned int, unsigned char)>:
_Z38click_tds_associate_or_setting_onewirejjh():
    ac4c:	cf 93       	push	r28
    ac4e:	8b e0       	ldi	r24, 0x0B	; 11
    ac50:	48 9f       	mul	r20, r24
    ac52:	f0 01       	movw	r30, r0
    ac54:	11 24       	eor	r1, r1
    ac56:	e5 56       	subi	r30, 0x65	; 101
    ac58:	ff 4e       	sbci	r31, 0xEF	; 239
    ac5a:	62 85       	ldd	r22, Z+10	; 0x0a
    ac5c:	6f 3f       	cpi	r22, 0xFF	; 255
    ac5e:	b1 f4       	brne	.+44     	; 0xac8c <click_tds_associate_or_setting_onewire(unsigned int, unsigned int, unsigned char)+0x40>
    ac60:	c4 2f       	mov	r28, r20
    ac62:	70 e0       	ldi	r23, 0x00	; 0
    ac64:	60 e0       	ldi	r22, 0x00	; 0
    ac66:	84 e6       	ldi	r24, 0x64	; 100
    ac68:	90 e0       	ldi	r25, 0x00	; 0
    ac6a:	0e 94 c1 54 	call	0xa982	; 0xa982 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.59]>
    ac6e:	8c e0       	ldi	r24, 0x0C	; 12
    ac70:	9e e4       	ldi	r25, 0x4E	; 78
    ac72:	90 93 63 0a 	sts	0x0A63, r25	; 0x800a63 <dialog_yes_function+0x1>
    ac76:	80 93 62 0a 	sts	0x0A62, r24	; 0x800a62 <dialog_yes_function>
    ac7a:	c0 93 c3 0a 	sts	0x0AC3, r28	; 0x800ac3 <dialog_yes_args1>
    ac7e:	6b e5       	ldi	r22, 0x5B	; 91
    ac80:	73 e8       	ldi	r23, 0x83	; 131
    ac82:	83 ea       	ldi	r24, 0xA3	; 163
    ac84:	9a e0       	ldi	r25, 0x0A	; 10
    ac86:	cf 91       	pop	r28
    ac88:	0d 94 22 1a 	jmp	0x23444	; 0x23444 <strcpy_P>
    ac8c:	70 e0       	ldi	r23, 0x00	; 0
    ac8e:	84 e0       	ldi	r24, 0x04	; 4
    ac90:	90 e0       	ldi	r25, 0x00	; 0
    ac92:	cf 91       	pop	r28
    ac94:	0c 94 c1 54 	jmp	0xa982	; 0xa982 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.59]>

0000ac98 <display_element_set_string(char*, unsigned char, unsigned char, void (*)(unsigned int, unsigned int, unsigned char), unsigned char (*)())>:
_Z26display_element_set_stringPchhPFvjjhEPFhvE():
    ac98:	ef 92       	push	r14
    ac9a:	ff 92       	push	r15
    ac9c:	0f 93       	push	r16
    ac9e:	1f 93       	push	r17
    aca0:	cf 93       	push	r28
    aca2:	df 93       	push	r29
    aca4:	e6 2e       	mov	r14, r22
    aca6:	f4 2e       	mov	r15, r20
    aca8:	e9 01       	movw	r28, r18
    acaa:	bc 01       	movw	r22, r24
    acac:	83 e8       	ldi	r24, 0x83	; 131
    acae:	9a e0       	ldi	r25, 0x0A	; 10
    acb0:	0f 94 67 1a 	call	0x234ce	; 0x234ce <strcpy>
    acb4:	e0 92 82 0a 	sts	0x0A82, r14	; 0x800a82 <dialog_set_string_max_length>
    acb8:	f0 92 81 0a 	sts	0x0A81, r15	; 0x800a81 <dialog_set_string_args>
    acbc:	d0 93 7f 0a 	sts	0x0A7F, r29	; 0x800a7f <dialog_save_string_function+0x1>
    acc0:	c0 93 7e 0a 	sts	0x0A7E, r28	; 0x800a7e <dialog_save_string_function>
    acc4:	10 93 7d 0a 	sts	0x0A7D, r17	; 0x800a7d <dialog_save_valid_function+0x1>
    acc8:	00 93 7c 0a 	sts	0x0A7C, r16	; 0x800a7c <dialog_save_valid_function>
    accc:	df 91       	pop	r29
    acce:	cf 91       	pop	r28
    acd0:	1f 91       	pop	r17
    acd2:	0f 91       	pop	r16
    acd4:	ff 90       	pop	r15
    acd6:	ef 90       	pop	r14
    acd8:	08 95       	ret

0000acda <display_menu_tds_set_name(unsigned int, unsigned int, unsigned char)>:
_Z25display_menu_tds_set_namejjh():
    acda:	ff 92       	push	r15
    acdc:	0f 93       	push	r16
    acde:	1f 93       	push	r17
    ace0:	cf 93       	push	r28
    ace2:	df 93       	push	r29
    ace4:	00 d0       	rcall	.+0      	; 0xace6 <display_menu_tds_set_name(unsigned int, unsigned int, unsigned char)+0xc>
    ace6:	00 d0       	rcall	.+0      	; 0xace8 <display_menu_tds_set_name(unsigned int, unsigned int, unsigned char)+0xe>
    ace8:	00 d0       	rcall	.+0      	; 0xacea <display_menu_tds_set_name(unsigned int, unsigned int, unsigned char)+0x10>
    acea:	1f 92       	push	r1
    acec:	cd b7       	in	r28, 0x3d	; 61
    acee:	de b7       	in	r29, 0x3e	; 62
    acf0:	f6 2e       	mov	r15, r22
    acf2:	be 01       	movw	r22, r28
    acf4:	6f 5f       	subi	r22, 0xFF	; 255
    acf6:	7f 4f       	sbci	r23, 0xFF	; 255
    acf8:	8f 2d       	mov	r24, r15
    acfa:	0e 94 06 b3 	call	0x1660c	; 0x1660c <tds_get_name(unsigned char, char*)>
    acfe:	70 e0       	ldi	r23, 0x00	; 0
    ad00:	60 e0       	ldi	r22, 0x00	; 0
    ad02:	87 e6       	ldi	r24, 0x67	; 103
    ad04:	90 e0       	ldi	r25, 0x00	; 0
    ad06:	0e 94 c1 54 	call	0xa982	; 0xa982 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.59]>
    ad0a:	04 e3       	ldi	r16, 0x34	; 52
    ad0c:	12 e5       	ldi	r17, 0x52	; 82
    ad0e:	29 e4       	ldi	r18, 0x49	; 73
    ad10:	39 e5       	ldi	r19, 0x59	; 89
    ad12:	4f 2d       	mov	r20, r15
    ad14:	68 e0       	ldi	r22, 0x08	; 8
    ad16:	ce 01       	movw	r24, r28
    ad18:	01 96       	adiw	r24, 0x01	; 1
    ad1a:	0e 94 4c 56 	call	0xac98	; 0xac98 <display_element_set_string(char*, unsigned char, unsigned char, void (*)(unsigned int, unsigned int, unsigned char), unsigned char (*)())>
    ad1e:	2a 96       	adiw	r28, 0x0a	; 10
    ad20:	0f b6       	in	r0, 0x3f	; 63
    ad22:	f8 94       	cli
    ad24:	de bf       	out	0x3e, r29	; 62
    ad26:	0f be       	out	0x3f, r0	; 63
    ad28:	cd bf       	out	0x3d, r28	; 61
    ad2a:	df 91       	pop	r29
    ad2c:	cf 91       	pop	r28
    ad2e:	1f 91       	pop	r17
    ad30:	0f 91       	pop	r16
    ad32:	ff 90       	pop	r15
    ad34:	08 95       	ret

0000ad36 <thermostat_button_set_ring_name_onclick(unsigned int, unsigned int, unsigned char)>:
_Z39thermostat_button_set_ring_name_onclickjjh():
    ad36:	ff 92       	push	r15
    ad38:	0f 93       	push	r16
    ad3a:	1f 93       	push	r17
    ad3c:	cf 93       	push	r28
    ad3e:	df 93       	push	r29
    ad40:	00 d0       	rcall	.+0      	; 0xad42 <thermostat_button_set_ring_name_onclick(unsigned int, unsigned int, unsigned char)+0xc>
    ad42:	00 d0       	rcall	.+0      	; 0xad44 <thermostat_button_set_ring_name_onclick(unsigned int, unsigned int, unsigned char)+0xe>
    ad44:	00 d0       	rcall	.+0      	; 0xad46 <thermostat_button_set_ring_name_onclick(unsigned int, unsigned int, unsigned char)+0x10>
    ad46:	1f 92       	push	r1
    ad48:	cd b7       	in	r28, 0x3d	; 61
    ad4a:	de b7       	in	r29, 0x3e	; 62
    ad4c:	f6 2e       	mov	r15, r22
    ad4e:	be 01       	movw	r22, r28
    ad50:	6f 5f       	subi	r22, 0xFF	; 255
    ad52:	7f 4f       	sbci	r23, 0xFF	; 255
    ad54:	8f 2d       	mov	r24, r15
    ad56:	0e 94 9f b7 	call	0x16f3e	; 0x16f3e <thermostat_ring_get_name(unsigned char, char*)>
    ad5a:	70 e0       	ldi	r23, 0x00	; 0
    ad5c:	60 e0       	ldi	r22, 0x00	; 0
    ad5e:	87 e6       	ldi	r24, 0x67	; 103
    ad60:	90 e0       	ldi	r25, 0x00	; 0
    ad62:	0e 94 c1 54 	call	0xa982	; 0xa982 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.59]>
    ad66:	04 e3       	ldi	r16, 0x34	; 52
    ad68:	12 e5       	ldi	r17, 0x52	; 82
    ad6a:	28 e6       	ldi	r18, 0x68	; 104
    ad6c:	39 e5       	ldi	r19, 0x59	; 89
    ad6e:	4f 2d       	mov	r20, r15
    ad70:	69 e0       	ldi	r22, 0x09	; 9
    ad72:	ce 01       	movw	r24, r28
    ad74:	01 96       	adiw	r24, 0x01	; 1
    ad76:	0e 94 4c 56 	call	0xac98	; 0xac98 <display_element_set_string(char*, unsigned char, unsigned char, void (*)(unsigned int, unsigned int, unsigned char), unsigned char (*)())>
    ad7a:	2a 96       	adiw	r28, 0x0a	; 10
    ad7c:	0f b6       	in	r0, 0x3f	; 63
    ad7e:	f8 94       	cli
    ad80:	de bf       	out	0x3e, r29	; 62
    ad82:	0f be       	out	0x3f, r0	; 63
    ad84:	cd bf       	out	0x3d, r28	; 61
    ad86:	df 91       	pop	r29
    ad88:	cf 91       	pop	r28
    ad8a:	1f 91       	pop	r17
    ad8c:	0f 91       	pop	r16
    ad8e:	ff 90       	pop	r15
    ad90:	08 95       	ret

0000ad92 <button_ntp_set_server_onclick(unsigned int, unsigned int, unsigned char)>:
_Z29button_ntp_set_server_onclickjjh():
    ad92:	ef 92       	push	r14
    ad94:	ff 92       	push	r15
    ad96:	0f 93       	push	r16
    ad98:	1f 93       	push	r17
    ad9a:	cf 93       	push	r28
    ad9c:	df 93       	push	r29
    ad9e:	cd b7       	in	r28, 0x3d	; 61
    ada0:	de b7       	in	r29, 0x3e	; 62
    ada2:	60 97       	sbiw	r28, 0x10	; 16
    ada4:	0f b6       	in	r0, 0x3f	; 63
    ada6:	f8 94       	cli
    ada8:	de bf       	out	0x3e, r29	; 62
    adaa:	0f be       	out	0x3f, r0	; 63
    adac:	cd bf       	out	0x3d, r28	; 61
    adae:	70 e0       	ldi	r23, 0x00	; 0
    adb0:	60 e0       	ldi	r22, 0x00	; 0
    adb2:	85 e6       	ldi	r24, 0x65	; 101
    adb4:	90 e0       	ldi	r25, 0x00	; 0
    adb6:	0e 94 c1 54 	call	0xa982	; 0xa982 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.59]>
    adba:	80 91 07 10 	lds	r24, 0x1007	; 0x801007 <device+0x51>
    adbe:	1f 92       	push	r1
    adc0:	8f 93       	push	r24
    adc2:	80 91 06 10 	lds	r24, 0x1006	; 0x801006 <device+0x50>
    adc6:	1f 92       	push	r1
    adc8:	8f 93       	push	r24
    adca:	80 91 05 10 	lds	r24, 0x1005	; 0x801005 <device+0x4f>
    adce:	1f 92       	push	r1
    add0:	8f 93       	push	r24
    add2:	80 91 04 10 	lds	r24, 0x1004	; 0x801004 <device+0x4e>
    add6:	1f 92       	push	r1
    add8:	8f 93       	push	r24
    adda:	8f e0       	ldi	r24, 0x0F	; 15
    addc:	93 e0       	ldi	r25, 0x03	; 3
    adde:	9f 93       	push	r25
    ade0:	8f 93       	push	r24
    ade2:	ce 01       	movw	r24, r28
    ade4:	01 96       	adiw	r24, 0x01	; 1
    ade6:	7c 01       	movw	r14, r24
    ade8:	9f 93       	push	r25
    adea:	8f 93       	push	r24
    adec:	0f 94 a6 1b 	call	0x2374c	; 0x2374c <sprintf>
    adf0:	05 ee       	ldi	r16, 0xE5	; 229
    adf2:	1a e4       	ldi	r17, 0x4A	; 74
    adf4:	2d ef       	ldi	r18, 0xFD	; 253
    adf6:	3d e6       	ldi	r19, 0x6D	; 109
    adf8:	40 e0       	ldi	r20, 0x00	; 0
    adfa:	60 e1       	ldi	r22, 0x10	; 16
    adfc:	c7 01       	movw	r24, r14
    adfe:	0e 94 4c 56 	call	0xac98	; 0xac98 <display_element_set_string(char*, unsigned char, unsigned char, void (*)(unsigned int, unsigned int, unsigned char), unsigned char (*)())>
    ae02:	0f b6       	in	r0, 0x3f	; 63
    ae04:	f8 94       	cli
    ae06:	de bf       	out	0x3e, r29	; 62
    ae08:	0f be       	out	0x3f, r0	; 63
    ae0a:	cd bf       	out	0x3d, r28	; 61
    ae0c:	60 96       	adiw	r28, 0x10	; 16
    ae0e:	0f b6       	in	r0, 0x3f	; 63
    ae10:	f8 94       	cli
    ae12:	de bf       	out	0x3e, r29	; 62
    ae14:	0f be       	out	0x3f, r0	; 63
    ae16:	cd bf       	out	0x3d, r28	; 61
    ae18:	df 91       	pop	r29
    ae1a:	cf 91       	pop	r28
    ae1c:	1f 91       	pop	r17
    ae1e:	0f 91       	pop	r16
    ae20:	ff 90       	pop	r15
    ae22:	ef 90       	pop	r14
    ae24:	08 95       	ret

0000ae26 <button_set_network_ip_onclick(unsigned int, unsigned int, unsigned char)>:
_Z29button_set_network_ip_onclickjjh():
    ae26:	ef 92       	push	r14
    ae28:	ff 92       	push	r15
    ae2a:	0f 93       	push	r16
    ae2c:	1f 93       	push	r17
    ae2e:	cf 93       	push	r28
    ae30:	df 93       	push	r29
    ae32:	cd b7       	in	r28, 0x3d	; 61
    ae34:	de b7       	in	r29, 0x3e	; 62
    ae36:	60 97       	sbiw	r28, 0x10	; 16
    ae38:	0f b6       	in	r0, 0x3f	; 63
    ae3a:	f8 94       	cli
    ae3c:	de bf       	out	0x3e, r29	; 62
    ae3e:	0f be       	out	0x3f, r0	; 63
    ae40:	cd bf       	out	0x3d, r28	; 61
    ae42:	70 e0       	ldi	r23, 0x00	; 0
    ae44:	60 e0       	ldi	r22, 0x00	; 0
    ae46:	85 e6       	ldi	r24, 0x65	; 101
    ae48:	90 e0       	ldi	r25, 0x00	; 0
    ae4a:	0e 94 c1 54 	call	0xa982	; 0xa982 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.59]>
    ae4e:	e6 eb       	ldi	r30, 0xB6	; 182
    ae50:	ff e0       	ldi	r31, 0x0F	; 15
    ae52:	81 85       	ldd	r24, Z+9	; 0x09
    ae54:	1f 92       	push	r1
    ae56:	8f 93       	push	r24
    ae58:	80 85       	ldd	r24, Z+8	; 0x08
    ae5a:	1f 92       	push	r1
    ae5c:	8f 93       	push	r24
    ae5e:	87 81       	ldd	r24, Z+7	; 0x07
    ae60:	1f 92       	push	r1
    ae62:	8f 93       	push	r24
    ae64:	86 81       	ldd	r24, Z+6	; 0x06
    ae66:	1f 92       	push	r1
    ae68:	8f 93       	push	r24
    ae6a:	8f e0       	ldi	r24, 0x0F	; 15
    ae6c:	93 e0       	ldi	r25, 0x03	; 3
    ae6e:	9f 93       	push	r25
    ae70:	8f 93       	push	r24
    ae72:	ce 01       	movw	r24, r28
    ae74:	01 96       	adiw	r24, 0x01	; 1
    ae76:	7c 01       	movw	r14, r24
    ae78:	9f 93       	push	r25
    ae7a:	8f 93       	push	r24
    ae7c:	0f 94 a6 1b 	call	0x2374c	; 0x2374c <sprintf>
    ae80:	05 ee       	ldi	r16, 0xE5	; 229
    ae82:	1a e4       	ldi	r17, 0x4A	; 74
    ae84:	28 e2       	ldi	r18, 0x28	; 40
    ae86:	3e e6       	ldi	r19, 0x6E	; 110
    ae88:	40 e0       	ldi	r20, 0x00	; 0
    ae8a:	60 e1       	ldi	r22, 0x10	; 16
    ae8c:	c7 01       	movw	r24, r14
    ae8e:	0e 94 4c 56 	call	0xac98	; 0xac98 <display_element_set_string(char*, unsigned char, unsigned char, void (*)(unsigned int, unsigned int, unsigned char), unsigned char (*)())>
    ae92:	0f b6       	in	r0, 0x3f	; 63
    ae94:	f8 94       	cli
    ae96:	de bf       	out	0x3e, r29	; 62
    ae98:	0f be       	out	0x3f, r0	; 63
    ae9a:	cd bf       	out	0x3d, r28	; 61
    ae9c:	60 96       	adiw	r28, 0x10	; 16
    ae9e:	0f b6       	in	r0, 0x3f	; 63
    aea0:	f8 94       	cli
    aea2:	de bf       	out	0x3e, r29	; 62
    aea4:	0f be       	out	0x3f, r0	; 63
    aea6:	cd bf       	out	0x3d, r28	; 61
    aea8:	df 91       	pop	r29
    aeaa:	cf 91       	pop	r28
    aeac:	1f 91       	pop	r17
    aeae:	0f 91       	pop	r16
    aeb0:	ff 90       	pop	r15
    aeb2:	ef 90       	pop	r14
    aeb4:	08 95       	ret

0000aeb6 <button_set_network_mask_onclick(unsigned int, unsigned int, unsigned char)>:
_Z31button_set_network_mask_onclickjjh():
    aeb6:	ef 92       	push	r14
    aeb8:	ff 92       	push	r15
    aeba:	0f 93       	push	r16
    aebc:	1f 93       	push	r17
    aebe:	cf 93       	push	r28
    aec0:	df 93       	push	r29
    aec2:	cd b7       	in	r28, 0x3d	; 61
    aec4:	de b7       	in	r29, 0x3e	; 62
    aec6:	60 97       	sbiw	r28, 0x10	; 16
    aec8:	0f b6       	in	r0, 0x3f	; 63
    aeca:	f8 94       	cli
    aecc:	de bf       	out	0x3e, r29	; 62
    aece:	0f be       	out	0x3f, r0	; 63
    aed0:	cd bf       	out	0x3d, r28	; 61
    aed2:	70 e0       	ldi	r23, 0x00	; 0
    aed4:	60 e0       	ldi	r22, 0x00	; 0
    aed6:	85 e6       	ldi	r24, 0x65	; 101
    aed8:	90 e0       	ldi	r25, 0x00	; 0
    aeda:	0e 94 c1 54 	call	0xa982	; 0xa982 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.59]>
    aede:	e6 eb       	ldi	r30, 0xB6	; 182
    aee0:	ff e0       	ldi	r31, 0x0F	; 15
    aee2:	85 85       	ldd	r24, Z+13	; 0x0d
    aee4:	1f 92       	push	r1
    aee6:	8f 93       	push	r24
    aee8:	84 85       	ldd	r24, Z+12	; 0x0c
    aeea:	1f 92       	push	r1
    aeec:	8f 93       	push	r24
    aeee:	83 85       	ldd	r24, Z+11	; 0x0b
    aef0:	1f 92       	push	r1
    aef2:	8f 93       	push	r24
    aef4:	82 85       	ldd	r24, Z+10	; 0x0a
    aef6:	1f 92       	push	r1
    aef8:	8f 93       	push	r24
    aefa:	8f e0       	ldi	r24, 0x0F	; 15
    aefc:	93 e0       	ldi	r25, 0x03	; 3
    aefe:	9f 93       	push	r25
    af00:	8f 93       	push	r24
    af02:	ce 01       	movw	r24, r28
    af04:	01 96       	adiw	r24, 0x01	; 1
    af06:	7c 01       	movw	r14, r24
    af08:	9f 93       	push	r25
    af0a:	8f 93       	push	r24
    af0c:	0f 94 a6 1b 	call	0x2374c	; 0x2374c <sprintf>
    af10:	05 ee       	ldi	r16, 0xE5	; 229
    af12:	1a e4       	ldi	r17, 0x4A	; 74
    af14:	23 e5       	ldi	r18, 0x53	; 83
    af16:	3e e6       	ldi	r19, 0x6E	; 110
    af18:	40 e0       	ldi	r20, 0x00	; 0
    af1a:	60 e1       	ldi	r22, 0x10	; 16
    af1c:	c7 01       	movw	r24, r14
    af1e:	0e 94 4c 56 	call	0xac98	; 0xac98 <display_element_set_string(char*, unsigned char, unsigned char, void (*)(unsigned int, unsigned int, unsigned char), unsigned char (*)())>
    af22:	0f b6       	in	r0, 0x3f	; 63
    af24:	f8 94       	cli
    af26:	de bf       	out	0x3e, r29	; 62
    af28:	0f be       	out	0x3f, r0	; 63
    af2a:	cd bf       	out	0x3d, r28	; 61
    af2c:	60 96       	adiw	r28, 0x10	; 16
    af2e:	0f b6       	in	r0, 0x3f	; 63
    af30:	f8 94       	cli
    af32:	de bf       	out	0x3e, r29	; 62
    af34:	0f be       	out	0x3f, r0	; 63
    af36:	cd bf       	out	0x3d, r28	; 61
    af38:	df 91       	pop	r29
    af3a:	cf 91       	pop	r28
    af3c:	1f 91       	pop	r17
    af3e:	0f 91       	pop	r16
    af40:	ff 90       	pop	r15
    af42:	ef 90       	pop	r14
    af44:	08 95       	ret

0000af46 <button_set_network_gw_onclick(unsigned int, unsigned int, unsigned char)>:
_Z29button_set_network_gw_onclickjjh():
    af46:	ef 92       	push	r14
    af48:	ff 92       	push	r15
    af4a:	0f 93       	push	r16
    af4c:	1f 93       	push	r17
    af4e:	cf 93       	push	r28
    af50:	df 93       	push	r29
    af52:	cd b7       	in	r28, 0x3d	; 61
    af54:	de b7       	in	r29, 0x3e	; 62
    af56:	60 97       	sbiw	r28, 0x10	; 16
    af58:	0f b6       	in	r0, 0x3f	; 63
    af5a:	f8 94       	cli
    af5c:	de bf       	out	0x3e, r29	; 62
    af5e:	0f be       	out	0x3f, r0	; 63
    af60:	cd bf       	out	0x3d, r28	; 61
    af62:	70 e0       	ldi	r23, 0x00	; 0
    af64:	60 e0       	ldi	r22, 0x00	; 0
    af66:	85 e6       	ldi	r24, 0x65	; 101
    af68:	90 e0       	ldi	r25, 0x00	; 0
    af6a:	0e 94 c1 54 	call	0xa982	; 0xa982 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.59]>
    af6e:	e6 eb       	ldi	r30, 0xB6	; 182
    af70:	ff e0       	ldi	r31, 0x0F	; 15
    af72:	85 89       	ldd	r24, Z+21	; 0x15
    af74:	1f 92       	push	r1
    af76:	8f 93       	push	r24
    af78:	84 89       	ldd	r24, Z+20	; 0x14
    af7a:	1f 92       	push	r1
    af7c:	8f 93       	push	r24
    af7e:	83 89       	ldd	r24, Z+19	; 0x13
    af80:	1f 92       	push	r1
    af82:	8f 93       	push	r24
    af84:	82 89       	ldd	r24, Z+18	; 0x12
    af86:	1f 92       	push	r1
    af88:	8f 93       	push	r24
    af8a:	8f e0       	ldi	r24, 0x0F	; 15
    af8c:	93 e0       	ldi	r25, 0x03	; 3
    af8e:	9f 93       	push	r25
    af90:	8f 93       	push	r24
    af92:	ce 01       	movw	r24, r28
    af94:	01 96       	adiw	r24, 0x01	; 1
    af96:	7c 01       	movw	r14, r24
    af98:	9f 93       	push	r25
    af9a:	8f 93       	push	r24
    af9c:	0f 94 a6 1b 	call	0x2374c	; 0x2374c <sprintf>
    afa0:	05 ee       	ldi	r16, 0xE5	; 229
    afa2:	1a e4       	ldi	r17, 0x4A	; 74
    afa4:	2e e7       	ldi	r18, 0x7E	; 126
    afa6:	3e e6       	ldi	r19, 0x6E	; 110
    afa8:	40 e0       	ldi	r20, 0x00	; 0
    afaa:	60 e1       	ldi	r22, 0x10	; 16
    afac:	c7 01       	movw	r24, r14
    afae:	0e 94 4c 56 	call	0xac98	; 0xac98 <display_element_set_string(char*, unsigned char, unsigned char, void (*)(unsigned int, unsigned int, unsigned char), unsigned char (*)())>
    afb2:	0f b6       	in	r0, 0x3f	; 63
    afb4:	f8 94       	cli
    afb6:	de bf       	out	0x3e, r29	; 62
    afb8:	0f be       	out	0x3f, r0	; 63
    afba:	cd bf       	out	0x3d, r28	; 61
    afbc:	60 96       	adiw	r28, 0x10	; 16
    afbe:	0f b6       	in	r0, 0x3f	; 63
    afc0:	f8 94       	cli
    afc2:	de bf       	out	0x3e, r29	; 62
    afc4:	0f be       	out	0x3f, r0	; 63
    afc6:	cd bf       	out	0x3d, r28	; 61
    afc8:	df 91       	pop	r29
    afca:	cf 91       	pop	r28
    afcc:	1f 91       	pop	r17
    afce:	0f 91       	pop	r16
    afd0:	ff 90       	pop	r15
    afd2:	ef 90       	pop	r14
    afd4:	08 95       	ret

0000afd6 <button_set_network_name_onclick(unsigned int, unsigned int, unsigned char)>:
_Z31button_set_network_name_onclickjjh():
    afd6:	0f 93       	push	r16
    afd8:	1f 93       	push	r17
    afda:	70 e0       	ldi	r23, 0x00	; 0
    afdc:	60 e0       	ldi	r22, 0x00	; 0
    afde:	87 e6       	ldi	r24, 0x67	; 103
    afe0:	90 e0       	ldi	r25, 0x00	; 0
    afe2:	0e 94 c1 54 	call	0xa982	; 0xa982 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.59]>
    afe6:	04 e3       	ldi	r16, 0x34	; 52
    afe8:	12 e5       	ldi	r17, 0x52	; 82
    afea:	29 ea       	ldi	r18, 0xA9	; 169
    afec:	3e e6       	ldi	r19, 0x6E	; 110
    afee:	40 e0       	ldi	r20, 0x00	; 0
    aff0:	6a e0       	ldi	r22, 0x0A	; 10
    aff2:	8c ec       	ldi	r24, 0xCC	; 204
    aff4:	9f e0       	ldi	r25, 0x0F	; 15
    aff6:	0e 94 4c 56 	call	0xac98	; 0xac98 <display_element_set_string(char*, unsigned char, unsigned char, void (*)(unsigned int, unsigned int, unsigned char), unsigned char (*)())>
    affa:	1f 91       	pop	r17
    affc:	0f 91       	pop	r16
    affe:	08 95       	ret

0000b000 <button_set_network_dns_onclick(unsigned int, unsigned int, unsigned char)>:
_Z30button_set_network_dns_onclickjjh():
    b000:	ef 92       	push	r14
    b002:	ff 92       	push	r15
    b004:	0f 93       	push	r16
    b006:	1f 93       	push	r17
    b008:	cf 93       	push	r28
    b00a:	df 93       	push	r29
    b00c:	cd b7       	in	r28, 0x3d	; 61
    b00e:	de b7       	in	r29, 0x3e	; 62
    b010:	60 97       	sbiw	r28, 0x10	; 16
    b012:	0f b6       	in	r0, 0x3f	; 63
    b014:	f8 94       	cli
    b016:	de bf       	out	0x3e, r29	; 62
    b018:	0f be       	out	0x3f, r0	; 63
    b01a:	cd bf       	out	0x3d, r28	; 61
    b01c:	70 e0       	ldi	r23, 0x00	; 0
    b01e:	60 e0       	ldi	r22, 0x00	; 0
    b020:	85 e6       	ldi	r24, 0x65	; 101
    b022:	90 e0       	ldi	r25, 0x00	; 0
    b024:	0e 94 c1 54 	call	0xa982	; 0xa982 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.59]>
    b028:	e6 eb       	ldi	r30, 0xB6	; 182
    b02a:	ff e0       	ldi	r31, 0x0F	; 15
    b02c:	81 89       	ldd	r24, Z+17	; 0x11
    b02e:	1f 92       	push	r1
    b030:	8f 93       	push	r24
    b032:	80 89       	ldd	r24, Z+16	; 0x10
    b034:	1f 92       	push	r1
    b036:	8f 93       	push	r24
    b038:	87 85       	ldd	r24, Z+15	; 0x0f
    b03a:	1f 92       	push	r1
    b03c:	8f 93       	push	r24
    b03e:	86 85       	ldd	r24, Z+14	; 0x0e
    b040:	1f 92       	push	r1
    b042:	8f 93       	push	r24
    b044:	8f e0       	ldi	r24, 0x0F	; 15
    b046:	93 e0       	ldi	r25, 0x03	; 3
    b048:	9f 93       	push	r25
    b04a:	8f 93       	push	r24
    b04c:	ce 01       	movw	r24, r28
    b04e:	01 96       	adiw	r24, 0x01	; 1
    b050:	7c 01       	movw	r14, r24
    b052:	9f 93       	push	r25
    b054:	8f 93       	push	r24
    b056:	0f 94 a6 1b 	call	0x2374c	; 0x2374c <sprintf>
    b05a:	05 ee       	ldi	r16, 0xE5	; 229
    b05c:	1a e4       	ldi	r17, 0x4A	; 74
    b05e:	2b ec       	ldi	r18, 0xCB	; 203
    b060:	3e e6       	ldi	r19, 0x6E	; 110
    b062:	40 e0       	ldi	r20, 0x00	; 0
    b064:	60 e1       	ldi	r22, 0x10	; 16
    b066:	c7 01       	movw	r24, r14
    b068:	0e 94 4c 56 	call	0xac98	; 0xac98 <display_element_set_string(char*, unsigned char, unsigned char, void (*)(unsigned int, unsigned int, unsigned char), unsigned char (*)())>
    b06c:	0f b6       	in	r0, 0x3f	; 63
    b06e:	f8 94       	cli
    b070:	de bf       	out	0x3e, r29	; 62
    b072:	0f be       	out	0x3f, r0	; 63
    b074:	cd bf       	out	0x3d, r28	; 61
    b076:	60 96       	adiw	r28, 0x10	; 16
    b078:	0f b6       	in	r0, 0x3f	; 63
    b07a:	f8 94       	cli
    b07c:	de bf       	out	0x3e, r29	; 62
    b07e:	0f be       	out	0x3f, r0	; 63
    b080:	cd bf       	out	0x3d, r28	; 61
    b082:	df 91       	pop	r29
    b084:	cf 91       	pop	r28
    b086:	1f 91       	pop	r17
    b088:	0f 91       	pop	r16
    b08a:	ff 90       	pop	r15
    b08c:	ef 90       	pop	r14
    b08e:	08 95       	ret

0000b090 <button_time_set_time_manualy_onclick(unsigned int, unsigned int, unsigned char)>:
_Z36button_time_set_time_manualy_onclickjjh():
    b090:	ef 92       	push	r14
    b092:	ff 92       	push	r15
    b094:	0f 93       	push	r16
    b096:	1f 93       	push	r17
    b098:	cf 93       	push	r28
    b09a:	df 93       	push	r29
    b09c:	00 d0       	rcall	.+0      	; 0xb09e <button_time_set_time_manualy_onclick(unsigned int, unsigned int, unsigned char)+0xe>
    b09e:	00 d0       	rcall	.+0      	; 0xb0a0 <button_time_set_time_manualy_onclick(unsigned int, unsigned int, unsigned char)+0x10>
    b0a0:	00 d0       	rcall	.+0      	; 0xb0a2 <button_time_set_time_manualy_onclick(unsigned int, unsigned int, unsigned char)+0x12>
    b0a2:	1f 92       	push	r1
    b0a4:	cd b7       	in	r28, 0x3d	; 61
    b0a6:	de b7       	in	r29, 0x3e	; 62
    b0a8:	70 e0       	ldi	r23, 0x00	; 0
    b0aa:	60 e0       	ldi	r22, 0x00	; 0
    b0ac:	85 e6       	ldi	r24, 0x65	; 101
    b0ae:	90 e0       	ldi	r25, 0x00	; 0
    b0b0:	0e 94 c1 54 	call	0xa982	; 0xa982 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.59]>
    b0b4:	e5 e1       	ldi	r30, 0x15	; 21
    b0b6:	ff e0       	ldi	r31, 0x0F	; 15
    b0b8:	85 81       	ldd	r24, Z+5	; 0x05
    b0ba:	1f 92       	push	r1
    b0bc:	8f 93       	push	r24
    b0be:	84 81       	ldd	r24, Z+4	; 0x04
    b0c0:	1f 92       	push	r1
    b0c2:	8f 93       	push	r24
    b0c4:	83 81       	ldd	r24, Z+3	; 0x03
    b0c6:	1f 92       	push	r1
    b0c8:	8f 93       	push	r24
    b0ca:	82 e8       	ldi	r24, 0x82	; 130
    b0cc:	93 e0       	ldi	r25, 0x03	; 3
    b0ce:	9f 93       	push	r25
    b0d0:	8f 93       	push	r24
    b0d2:	ce 01       	movw	r24, r28
    b0d4:	01 96       	adiw	r24, 0x01	; 1
    b0d6:	7c 01       	movw	r14, r24
    b0d8:	9f 93       	push	r25
    b0da:	8f 93       	push	r24
    b0dc:	0f 94 a6 1b 	call	0x2374c	; 0x2374c <sprintf>
    b0e0:	04 e3       	ldi	r16, 0x34	; 52
    b0e2:	12 e5       	ldi	r17, 0x52	; 82
    b0e4:	24 e8       	ldi	r18, 0x84	; 132
    b0e6:	39 e5       	ldi	r19, 0x59	; 89
    b0e8:	40 e0       	ldi	r20, 0x00	; 0
    b0ea:	69 e0       	ldi	r22, 0x09	; 9
    b0ec:	c7 01       	movw	r24, r14
    b0ee:	0e 94 4c 56 	call	0xac98	; 0xac98 <display_element_set_string(char*, unsigned char, unsigned char, void (*)(unsigned int, unsigned int, unsigned char), unsigned char (*)())>
    b0f2:	0f b6       	in	r0, 0x3f	; 63
    b0f4:	f8 94       	cli
    b0f6:	de bf       	out	0x3e, r29	; 62
    b0f8:	0f be       	out	0x3f, r0	; 63
    b0fa:	cd bf       	out	0x3d, r28	; 61
    b0fc:	2a 96       	adiw	r28, 0x0a	; 10
    b0fe:	0f b6       	in	r0, 0x3f	; 63
    b100:	f8 94       	cli
    b102:	de bf       	out	0x3e, r29	; 62
    b104:	0f be       	out	0x3f, r0	; 63
    b106:	cd bf       	out	0x3d, r28	; 61
    b108:	df 91       	pop	r29
    b10a:	cf 91       	pop	r28
    b10c:	1f 91       	pop	r17
    b10e:	0f 91       	pop	r16
    b110:	ff 90       	pop	r15
    b112:	ef 90       	pop	r14
    b114:	08 95       	ret

0000b116 <button_time_set_date_manualy_onclick(unsigned int, unsigned int, unsigned char)>:
_Z36button_time_set_date_manualy_onclickjjh():
    b116:	ef 92       	push	r14
    b118:	ff 92       	push	r15
    b11a:	0f 93       	push	r16
    b11c:	1f 93       	push	r17
    b11e:	cf 93       	push	r28
    b120:	df 93       	push	r29
    b122:	cd b7       	in	r28, 0x3d	; 61
    b124:	de b7       	in	r29, 0x3e	; 62
    b126:	2c 97       	sbiw	r28, 0x0c	; 12
    b128:	0f b6       	in	r0, 0x3f	; 63
    b12a:	f8 94       	cli
    b12c:	de bf       	out	0x3e, r29	; 62
    b12e:	0f be       	out	0x3f, r0	; 63
    b130:	cd bf       	out	0x3d, r28	; 61
    b132:	70 e0       	ldi	r23, 0x00	; 0
    b134:	60 e0       	ldi	r22, 0x00	; 0
    b136:	85 e6       	ldi	r24, 0x65	; 101
    b138:	90 e0       	ldi	r25, 0x00	; 0
    b13a:	0e 94 c1 54 	call	0xa982	; 0xa982 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.59]>
_ZNK8DateTime4yearEv():
    b13e:	e5 e1       	ldi	r30, 0x15	; 21
    b140:	ff e0       	ldi	r31, 0x0F	; 15
    b142:	80 81       	ld	r24, Z
    b144:	90 e0       	ldi	r25, 0x00	; 0
    b146:	80 53       	subi	r24, 0x30	; 48
    b148:	98 4f       	sbci	r25, 0xF8	; 248
_Z36button_time_set_date_manualy_onclickjjh():
    b14a:	9f 93       	push	r25
    b14c:	8f 93       	push	r24
    b14e:	81 81       	ldd	r24, Z+1	; 0x01
    b150:	1f 92       	push	r1
    b152:	8f 93       	push	r24
    b154:	82 81       	ldd	r24, Z+2	; 0x02
    b156:	1f 92       	push	r1
    b158:	8f 93       	push	r24
    b15a:	8b e1       	ldi	r24, 0x1B	; 27
    b15c:	93 e0       	ldi	r25, 0x03	; 3
    b15e:	9f 93       	push	r25
    b160:	8f 93       	push	r24
    b162:	ce 01       	movw	r24, r28
    b164:	01 96       	adiw	r24, 0x01	; 1
    b166:	7c 01       	movw	r14, r24
    b168:	9f 93       	push	r25
    b16a:	8f 93       	push	r24
    b16c:	0f 94 a6 1b 	call	0x2374c	; 0x2374c <sprintf>
    b170:	04 e3       	ldi	r16, 0x34	; 52
    b172:	12 e5       	ldi	r17, 0x52	; 82
    b174:	22 ec       	ldi	r18, 0xC2	; 194
    b176:	39 e5       	ldi	r19, 0x59	; 89
    b178:	40 e0       	ldi	r20, 0x00	; 0
    b17a:	6b e0       	ldi	r22, 0x0B	; 11
    b17c:	c7 01       	movw	r24, r14
    b17e:	0e 94 4c 56 	call	0xac98	; 0xac98 <display_element_set_string(char*, unsigned char, unsigned char, void (*)(unsigned int, unsigned int, unsigned char), unsigned char (*)())>
    b182:	0f b6       	in	r0, 0x3f	; 63
    b184:	f8 94       	cli
    b186:	de bf       	out	0x3e, r29	; 62
    b188:	0f be       	out	0x3f, r0	; 63
    b18a:	cd bf       	out	0x3d, r28	; 61
    b18c:	2c 96       	adiw	r28, 0x0c	; 12
    b18e:	0f b6       	in	r0, 0x3f	; 63
    b190:	f8 94       	cli
    b192:	de bf       	out	0x3e, r29	; 62
    b194:	0f be       	out	0x3f, r0	; 63
    b196:	cd bf       	out	0x3d, r28	; 61
    b198:	df 91       	pop	r29
    b19a:	cf 91       	pop	r28
    b19c:	1f 91       	pop	r17
    b19e:	0f 91       	pop	r16
    b1a0:	ff 90       	pop	r15
    b1a2:	ef 90       	pop	r14
    b1a4:	08 95       	ret

0000b1a6 <button_set_mqtt_broker_onclick(unsigned int, unsigned int, unsigned char)>:
_Z30button_set_mqtt_broker_onclickjjh():
    b1a6:	ef 92       	push	r14
    b1a8:	ff 92       	push	r15
    b1aa:	0f 93       	push	r16
    b1ac:	1f 93       	push	r17
    b1ae:	cf 93       	push	r28
    b1b0:	df 93       	push	r29
    b1b2:	cd b7       	in	r28, 0x3d	; 61
    b1b4:	de b7       	in	r29, 0x3e	; 62
    b1b6:	60 97       	sbiw	r28, 0x10	; 16
    b1b8:	0f b6       	in	r0, 0x3f	; 63
    b1ba:	f8 94       	cli
    b1bc:	de bf       	out	0x3e, r29	; 62
    b1be:	0f be       	out	0x3f, r0	; 63
    b1c0:	cd bf       	out	0x3d, r28	; 61
    b1c2:	70 e0       	ldi	r23, 0x00	; 0
    b1c4:	60 e0       	ldi	r22, 0x00	; 0
    b1c6:	85 e6       	ldi	r24, 0x65	; 101
    b1c8:	90 e0       	ldi	r25, 0x00	; 0
    b1ca:	0e 94 c1 54 	call	0xa982	; 0xa982 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.59]>
    b1ce:	e6 eb       	ldi	r30, 0xB6	; 182
    b1d0:	ff e0       	ldi	r31, 0x0F	; 15
    b1d2:	83 a1       	ldd	r24, Z+35	; 0x23
    b1d4:	1f 92       	push	r1
    b1d6:	8f 93       	push	r24
    b1d8:	82 a1       	ldd	r24, Z+34	; 0x22
    b1da:	1f 92       	push	r1
    b1dc:	8f 93       	push	r24
    b1de:	81 a1       	ldd	r24, Z+33	; 0x21
    b1e0:	1f 92       	push	r1
    b1e2:	8f 93       	push	r24
    b1e4:	80 a1       	ldd	r24, Z+32	; 0x20
    b1e6:	1f 92       	push	r1
    b1e8:	8f 93       	push	r24
    b1ea:	8f e0       	ldi	r24, 0x0F	; 15
    b1ec:	93 e0       	ldi	r25, 0x03	; 3
    b1ee:	9f 93       	push	r25
    b1f0:	8f 93       	push	r24
    b1f2:	ce 01       	movw	r24, r28
    b1f4:	01 96       	adiw	r24, 0x01	; 1
    b1f6:	7c 01       	movw	r14, r24
    b1f8:	9f 93       	push	r25
    b1fa:	8f 93       	push	r24
    b1fc:	0f 94 a6 1b 	call	0x2374c	; 0x2374c <sprintf>
    b200:	05 ee       	ldi	r16, 0xE5	; 229
    b202:	1a e4       	ldi	r17, 0x4A	; 74
    b204:	26 ef       	ldi	r18, 0xF6	; 246
    b206:	3e e6       	ldi	r19, 0x6E	; 110
    b208:	40 e0       	ldi	r20, 0x00	; 0
    b20a:	60 e1       	ldi	r22, 0x10	; 16
    b20c:	c7 01       	movw	r24, r14
    b20e:	0e 94 4c 56 	call	0xac98	; 0xac98 <display_element_set_string(char*, unsigned char, unsigned char, void (*)(unsigned int, unsigned int, unsigned char), unsigned char (*)())>
    b212:	0f b6       	in	r0, 0x3f	; 63
    b214:	f8 94       	cli
    b216:	de bf       	out	0x3e, r29	; 62
    b218:	0f be       	out	0x3f, r0	; 63
    b21a:	cd bf       	out	0x3d, r28	; 61
    b21c:	60 96       	adiw	r28, 0x10	; 16
    b21e:	0f b6       	in	r0, 0x3f	; 63
    b220:	f8 94       	cli
    b222:	de bf       	out	0x3e, r29	; 62
    b224:	0f be       	out	0x3f, r0	; 63
    b226:	cd bf       	out	0x3d, r28	; 61
    b228:	df 91       	pop	r29
    b22a:	cf 91       	pop	r28
    b22c:	1f 91       	pop	r17
    b22e:	0f 91       	pop	r16
    b230:	ff 90       	pop	r15
    b232:	ef 90       	pop	r14
    b234:	08 95       	ret

0000b236 <button_set_mqtt_user_onclick(unsigned int, unsigned int, unsigned char)>:
_Z28button_set_mqtt_user_onclickjjh():
    b236:	0f 93       	push	r16
    b238:	1f 93       	push	r17
    b23a:	70 e0       	ldi	r23, 0x00	; 0
    b23c:	60 e0       	ldi	r22, 0x00	; 0
    b23e:	87 e6       	ldi	r24, 0x67	; 103
    b240:	90 e0       	ldi	r25, 0x00	; 0
    b242:	0e 94 c1 54 	call	0xa982	; 0xa982 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.59]>
    b246:	04 e3       	ldi	r16, 0x34	; 52
    b248:	12 e5       	ldi	r17, 0x52	; 82
    b24a:	21 e2       	ldi	r18, 0x21	; 33
    b24c:	3f e6       	ldi	r19, 0x6F	; 111
    b24e:	40 e0       	ldi	r20, 0x00	; 0
    b250:	64 e1       	ldi	r22, 0x14	; 20
    b252:	8c ed       	ldi	r24, 0xDC	; 220
    b254:	9f e0       	ldi	r25, 0x0F	; 15
    b256:	0e 94 4c 56 	call	0xac98	; 0xac98 <display_element_set_string(char*, unsigned char, unsigned char, void (*)(unsigned int, unsigned int, unsigned char), unsigned char (*)())>
    b25a:	1f 91       	pop	r17
    b25c:	0f 91       	pop	r16
    b25e:	08 95       	ret

0000b260 <button_set_mqtt_pass_onclick(unsigned int, unsigned int, unsigned char)>:
_Z28button_set_mqtt_pass_onclickjjh():
    b260:	0f 93       	push	r16
    b262:	1f 93       	push	r17
    b264:	70 e0       	ldi	r23, 0x00	; 0
    b266:	60 e0       	ldi	r22, 0x00	; 0
    b268:	87 e6       	ldi	r24, 0x67	; 103
    b26a:	90 e0       	ldi	r25, 0x00	; 0
    b26c:	0e 94 c1 54 	call	0xa982	; 0xa982 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.59]>
    b270:	04 e3       	ldi	r16, 0x34	; 52
    b272:	12 e5       	ldi	r17, 0x52	; 82
    b274:	24 e4       	ldi	r18, 0x44	; 68
    b276:	3f e6       	ldi	r19, 0x6F	; 111
    b278:	40 e0       	ldi	r20, 0x00	; 0
    b27a:	64 e1       	ldi	r22, 0x14	; 20
    b27c:	80 ef       	ldi	r24, 0xF0	; 240
    b27e:	9f e0       	ldi	r25, 0x0F	; 15
    b280:	0e 94 4c 56 	call	0xac98	; 0xac98 <display_element_set_string(char*, unsigned char, unsigned char, void (*)(unsigned int, unsigned int, unsigned char), unsigned char (*)())>
    b284:	1f 91       	pop	r17
    b286:	0f 91       	pop	r16
    b288:	08 95       	ret

0000b28a <display_element_get_string(char*)>:
_Z26display_element_get_stringPc():
    b28a:	63 e8       	ldi	r22, 0x83	; 131
    b28c:	7a e0       	ldi	r23, 0x0A	; 10
    b28e:	0d 94 67 1a 	jmp	0x234ce	; 0x234ce <strcpy>

0000b292 <menu_tds_save_name(unsigned int, unsigned int, unsigned char)>:
_Z18menu_tds_save_namejjh():
    b292:	cf 93       	push	r28
    b294:	df 93       	push	r29
    b296:	00 d0       	rcall	.+0      	; 0xb298 <menu_tds_save_name(unsigned int, unsigned int, unsigned char)+0x6>
    b298:	00 d0       	rcall	.+0      	; 0xb29a <menu_tds_save_name(unsigned int, unsigned int, unsigned char)+0x8>
    b29a:	00 d0       	rcall	.+0      	; 0xb29c <menu_tds_save_name(unsigned int, unsigned int, unsigned char)+0xa>
    b29c:	1f 92       	push	r1
    b29e:	cd b7       	in	r28, 0x3d	; 61
    b2a0:	de b7       	in	r29, 0x3e	; 62
    b2a2:	ce 01       	movw	r24, r28
    b2a4:	01 96       	adiw	r24, 0x01	; 1
    b2a6:	0e 94 45 59 	call	0xb28a	; 0xb28a <display_element_get_string(char*)>
    b2aa:	89 81       	ldd	r24, Y+1	; 0x01
    b2ac:	88 23       	and	r24, r24
    b2ae:	39 f0       	breq	.+14     	; 0xb2be <menu_tds_save_name(unsigned int, unsigned int, unsigned char)+0x2c>
    b2b0:	be 01       	movw	r22, r28
    b2b2:	6f 5f       	subi	r22, 0xFF	; 255
    b2b4:	7f 4f       	sbci	r23, 0xFF	; 255
    b2b6:	80 91 81 0a 	lds	r24, 0x0A81	; 0x800a81 <dialog_set_string_args>
    b2ba:	0e 94 29 b3 	call	0x16652	; 0x16652 <tds_set_name(unsigned char, char*)>
    b2be:	2a 96       	adiw	r28, 0x0a	; 10
    b2c0:	0f b6       	in	r0, 0x3f	; 63
    b2c2:	f8 94       	cli
    b2c4:	de bf       	out	0x3e, r29	; 62
    b2c6:	0f be       	out	0x3f, r0	; 63
    b2c8:	cd bf       	out	0x3d, r28	; 61
    b2ca:	df 91       	pop	r29
    b2cc:	cf 91       	pop	r28
    b2ce:	08 95       	ret

0000b2d0 <helper_thermostat_button_set_ring_name(unsigned int, unsigned int, unsigned char)>:
_Z38helper_thermostat_button_set_ring_namejjh():
    b2d0:	cf 93       	push	r28
    b2d2:	df 93       	push	r29
    b2d4:	00 d0       	rcall	.+0      	; 0xb2d6 <helper_thermostat_button_set_ring_name(unsigned int, unsigned int, unsigned char)+0x6>
    b2d6:	00 d0       	rcall	.+0      	; 0xb2d8 <helper_thermostat_button_set_ring_name(unsigned int, unsigned int, unsigned char)+0x8>
    b2d8:	00 d0       	rcall	.+0      	; 0xb2da <helper_thermostat_button_set_ring_name(unsigned int, unsigned int, unsigned char)+0xa>
    b2da:	1f 92       	push	r1
    b2dc:	cd b7       	in	r28, 0x3d	; 61
    b2de:	de b7       	in	r29, 0x3e	; 62
    b2e0:	ce 01       	movw	r24, r28
    b2e2:	01 96       	adiw	r24, 0x01	; 1
    b2e4:	0e 94 45 59 	call	0xb28a	; 0xb28a <display_element_get_string(char*)>
    b2e8:	be 01       	movw	r22, r28
    b2ea:	6f 5f       	subi	r22, 0xFF	; 255
    b2ec:	7f 4f       	sbci	r23, 0xFF	; 255
    b2ee:	80 91 81 0a 	lds	r24, 0x0A81	; 0x800a81 <dialog_set_string_args>
    b2f2:	0e 94 c3 b7 	call	0x16f86	; 0x16f86 <thermostat_ring_set_name(unsigned char, char*)>
    b2f6:	2a 96       	adiw	r28, 0x0a	; 10
    b2f8:	0f b6       	in	r0, 0x3f	; 63
    b2fa:	f8 94       	cli
    b2fc:	de bf       	out	0x3e, r29	; 62
    b2fe:	0f be       	out	0x3f, r0	; 63
    b300:	cd bf       	out	0x3d, r28	; 61
    b302:	df 91       	pop	r29
    b304:	cf 91       	pop	r28
    b306:	08 95       	ret

0000b308 <helper_set_time_manualy(unsigned int, unsigned int, unsigned char)>:
_Z23helper_set_time_manualyjjh():
    b308:	cf 92       	push	r12
    b30a:	ef 92       	push	r14
    b30c:	0f 93       	push	r16
    b30e:	1f 93       	push	r17
    b310:	cf 93       	push	r28
    b312:	df 93       	push	r29
    b314:	cd b7       	in	r28, 0x3d	; 61
    b316:	de b7       	in	r29, 0x3e	; 62
    b318:	64 97       	sbiw	r28, 0x14	; 20
    b31a:	0f b6       	in	r0, 0x3f	; 63
    b31c:	f8 94       	cli
    b31e:	de bf       	out	0x3e, r29	; 62
    b320:	0f be       	out	0x3f, r0	; 63
    b322:	cd bf       	out	0x3d, r28	; 61
    b324:	ce 01       	movw	r24, r28
    b326:	01 96       	adiw	r24, 0x01	; 1
    b328:	0e 94 45 59 	call	0xb28a	; 0xb28a <display_element_get_string(char*)>
    b32c:	0a e0       	ldi	r16, 0x0A	; 10
    b32e:	10 e0       	ldi	r17, 0x00	; 0
    b330:	23 e0       	ldi	r18, 0x03	; 3
    b332:	30 e0       	ldi	r19, 0x00	; 0
    b334:	ae 01       	movw	r20, r28
    b336:	4e 5e       	subi	r20, 0xEE	; 238
    b338:	5f 4f       	sbci	r21, 0xFF	; 255
    b33a:	6a e3       	ldi	r22, 0x3A	; 58
    b33c:	ce 01       	movw	r24, r28
    b33e:	01 96       	adiw	r24, 0x01	; 1
    b340:	0e 94 6f e4 	call	0x1c8de	; 0x1c8de <parseBytes(char const*, char, unsigned char*, int, int)>
    b344:	e5 e1       	ldi	r30, 0x15	; 21
    b346:	ff e0       	ldi	r31, 0x0F	; 15
_ZNK8DateTime4yearEv():
    b348:	60 81       	ld	r22, Z
    b34a:	70 e0       	ldi	r23, 0x00	; 0
    b34c:	60 53       	subi	r22, 0x30	; 48
    b34e:	78 4f       	sbci	r23, 0xF8	; 248
_Z23helper_set_time_manualyjjh():
    b350:	cc 88       	ldd	r12, Y+20	; 0x14
    b352:	eb 88       	ldd	r14, Y+19	; 0x13
    b354:	0a 89       	ldd	r16, Y+18	; 0x12
    b356:	22 81       	ldd	r18, Z+2	; 0x02
    b358:	41 81       	ldd	r20, Z+1	; 0x01
    b35a:	ce 01       	movw	r24, r28
    b35c:	0b 96       	adiw	r24, 0x0b	; 11
    b35e:	0e 94 16 e6 	call	0x1cc2c	; 0x1cc2c <DateTime::DateTime(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
    b362:	ce 01       	movw	r24, r28
    b364:	0b 96       	adiw	r24, 0x0b	; 11
    b366:	0e 94 e7 e6 	call	0x1cdce	; 0x1cdce <RTC_DS1307::adjust(DateTime const&)>
    b36a:	64 96       	adiw	r28, 0x14	; 20
    b36c:	0f b6       	in	r0, 0x3f	; 63
    b36e:	f8 94       	cli
    b370:	de bf       	out	0x3e, r29	; 62
    b372:	0f be       	out	0x3f, r0	; 63
    b374:	cd bf       	out	0x3d, r28	; 61
    b376:	df 91       	pop	r29
    b378:	cf 91       	pop	r28
    b37a:	1f 91       	pop	r17
    b37c:	0f 91       	pop	r16
    b37e:	ef 90       	pop	r14
    b380:	cf 90       	pop	r12
    b382:	08 95       	ret

0000b384 <helper_set_date_manualy(unsigned int, unsigned int, unsigned char)>:
_Z23helper_set_date_manualyjjh():
    b384:	cf 92       	push	r12
    b386:	ef 92       	push	r14
    b388:	0f 93       	push	r16
    b38a:	1f 93       	push	r17
    b38c:	cf 93       	push	r28
    b38e:	df 93       	push	r29
    b390:	cd b7       	in	r28, 0x3d	; 61
    b392:	de b7       	in	r29, 0x3e	; 62
    b394:	69 97       	sbiw	r28, 0x19	; 25
    b396:	0f b6       	in	r0, 0x3f	; 63
    b398:	f8 94       	cli
    b39a:	de bf       	out	0x3e, r29	; 62
    b39c:	0f be       	out	0x3f, r0	; 63
    b39e:	cd bf       	out	0x3d, r28	; 61
    b3a0:	ce 01       	movw	r24, r28
    b3a2:	01 96       	adiw	r24, 0x01	; 1
    b3a4:	0e 94 45 59 	call	0xb28a	; 0xb28a <display_element_get_string(char*)>
    b3a8:	0a e0       	ldi	r16, 0x0A	; 10
    b3aa:	10 e0       	ldi	r17, 0x00	; 0
    b3ac:	23 e0       	ldi	r18, 0x03	; 3
    b3ae:	30 e0       	ldi	r19, 0x00	; 0
    b3b0:	ae 01       	movw	r20, r28
    b3b2:	4c 5e       	subi	r20, 0xEC	; 236
    b3b4:	5f 4f       	sbci	r21, 0xFF	; 255
    b3b6:	6e e2       	ldi	r22, 0x2E	; 46
    b3b8:	ce 01       	movw	r24, r28
    b3ba:	01 96       	adiw	r24, 0x01	; 1
    b3bc:	0e 94 ab e4 	call	0x1c956	; 0x1c956 <parseBytes(char const*, char, unsigned int*, int, int)>
    b3c0:	e5 e1       	ldi	r30, 0x15	; 21
    b3c2:	ff e0       	ldi	r31, 0x0F	; 15
    b3c4:	68 8d       	ldd	r22, Y+24	; 0x18
    b3c6:	79 8d       	ldd	r23, Y+25	; 0x19
    b3c8:	c5 80       	ldd	r12, Z+5	; 0x05
    b3ca:	e4 80       	ldd	r14, Z+4	; 0x04
    b3cc:	03 81       	ldd	r16, Z+3	; 0x03
    b3ce:	2c 89       	ldd	r18, Y+20	; 0x14
    b3d0:	4e 89       	ldd	r20, Y+22	; 0x16
    b3d2:	ce 01       	movw	r24, r28
    b3d4:	0d 96       	adiw	r24, 0x0d	; 13
    b3d6:	0e 94 16 e6 	call	0x1cc2c	; 0x1cc2c <DateTime::DateTime(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
    b3da:	ce 01       	movw	r24, r28
    b3dc:	0d 96       	adiw	r24, 0x0d	; 13
    b3de:	0e 94 e7 e6 	call	0x1cdce	; 0x1cdce <RTC_DS1307::adjust(DateTime const&)>
    b3e2:	69 96       	adiw	r28, 0x19	; 25
    b3e4:	0f b6       	in	r0, 0x3f	; 63
    b3e6:	f8 94       	cli
    b3e8:	de bf       	out	0x3e, r29	; 62
    b3ea:	0f be       	out	0x3f, r0	; 63
    b3ec:	cd bf       	out	0x3d, r28	; 61
    b3ee:	df 91       	pop	r29
    b3f0:	cf 91       	pop	r28
    b3f2:	1f 91       	pop	r17
    b3f4:	0f 91       	pop	r16
    b3f6:	ef 90       	pop	r14
    b3f8:	cf 90       	pop	r12
    b3fa:	08 95       	ret

0000b3fc <display_element_set_string_add_char(char)>:
_Z35display_element_set_string_add_charc():
    b3fc:	e3 e8       	ldi	r30, 0x83	; 131
    b3fe:	fa e0       	ldi	r31, 0x0A	; 10
    b400:	01 90       	ld	r0, Z+
    b402:	00 20       	and	r0, r0
    b404:	e9 f7       	brne	.-6      	; 0xb400 <display_element_set_string_add_char(char)+0x4>
    b406:	e4 58       	subi	r30, 0x84	; 132
    b408:	fa 40       	sbci	r31, 0x0A	; 10
    b40a:	ff 27       	eor	r31, r31
    b40c:	20 91 82 0a 	lds	r18, 0x0A82	; 0x800a82 <dialog_set_string_max_length>
    b410:	21 50       	subi	r18, 0x01	; 1
    b412:	33 0b       	sbc	r19, r19
    b414:	e2 17       	cp	r30, r18
    b416:	f3 07       	cpc	r31, r19
    b418:	24 f4       	brge	.+8      	; 0xb422 <display_element_set_string_add_char(char)+0x26>
    b41a:	ed 57       	subi	r30, 0x7D	; 125
    b41c:	f5 4f       	sbci	r31, 0xF5	; 245
    b41e:	80 83       	st	Z, r24
    b420:	11 82       	std	Z+1, r1	; 0x01
    b422:	08 95       	ret

0000b424 <click_keyboard_number(unsigned int, unsigned int, unsigned char)>:
_Z21click_keyboard_numberjjh():
    b424:	8e e2       	ldi	r24, 0x2E	; 46
    b426:	4a 30       	cpi	r20, 0x0A	; 10
    b428:	29 f0       	breq	.+10     	; 0xb434 <click_keyboard_number(unsigned int, unsigned int, unsigned char)+0x10>
    b42a:	80 e3       	ldi	r24, 0x30	; 48
    b42c:	84 0f       	add	r24, r20
    b42e:	4b 30       	cpi	r20, 0x0B	; 11
    b430:	09 f4       	brne	.+2      	; 0xb434 <click_keyboard_number(unsigned int, unsigned int, unsigned char)+0x10>
    b432:	8a e3       	ldi	r24, 0x3A	; 58
    b434:	0c 94 fe 59 	jmp	0xb3fc	; 0xb3fc <display_element_set_string_add_char(char)>

0000b438 <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)>:
_Z19click_keyboard_alfajjh():
    b438:	90 91 80 0a 	lds	r25, 0x0A80	; 0x800a80 <dialog_set_string_keyboard_type>
    b43c:	91 11       	cpse	r25, r1
    b43e:	07 c0       	rjmp	.+14     	; 0xb44e <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)+0x16>
    b440:	e4 2f       	mov	r30, r20
    b442:	f0 e0       	ldi	r31, 0x00	; 0
    b444:	e2 50       	subi	r30, 0x02	; 2
    b446:	ff 47       	sbci	r31, 0x7F	; 127
    b448:	84 91       	lpm	r24, Z
    b44a:	0c 94 fe 59 	jmp	0xb3fc	; 0xb3fc <display_element_set_string_add_char(char)>
    b44e:	91 30       	cpi	r25, 0x01	; 1
    b450:	29 f4       	brne	.+10     	; 0xb45c <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)+0x24>
    b452:	e4 2f       	mov	r30, r20
    b454:	f0 e0       	ldi	r31, 0x00	; 0
    b456:	ec 51       	subi	r30, 0x1C	; 28
    b458:	ff 47       	sbci	r31, 0x7F	; 127
    b45a:	f6 cf       	rjmp	.-20     	; 0xb448 <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)+0x10>
    b45c:	92 30       	cpi	r25, 0x02	; 2
    b45e:	a9 f7       	brne	.-22     	; 0xb44a <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)+0x12>
    b460:	e4 2f       	mov	r30, r20
    b462:	f0 e0       	ldi	r31, 0x00	; 0
    b464:	e6 53       	subi	r30, 0x36	; 54
    b466:	ff 47       	sbci	r31, 0x7F	; 127
    b468:	ef cf       	rjmp	.-34     	; 0xb448 <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)+0x10>

0000b46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>:
_Z11show_stringPciihjjb():
    b46a:	6f 92       	push	r6
    b46c:	7f 92       	push	r7
    b46e:	8f 92       	push	r8
    b470:	9f 92       	push	r9
    b472:	af 92       	push	r10
    b474:	bf 92       	push	r11
    b476:	cf 92       	push	r12
    b478:	df 92       	push	r13
    b47a:	ef 92       	push	r14
    b47c:	ff 92       	push	r15
    b47e:	0f 93       	push	r16
    b480:	1f 93       	push	r17
    b482:	cf 93       	push	r28
    b484:	df 93       	push	r29
    b486:	00 d0       	rcall	.+0      	; 0xb488 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)+0x1e>
    b488:	00 d0       	rcall	.+0      	; 0xb48a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)+0x20>
    b48a:	cd b7       	in	r28, 0x3d	; 61
    b48c:	de b7       	in	r29, 0x3e	; 62
    b48e:	3c 01       	movw	r6, r24
    b490:	5b 01       	movw	r10, r22
    b492:	4a 01       	movw	r8, r20
    b494:	d2 2e       	mov	r13, r18
    b496:	6c 2d       	mov	r22, r12
    b498:	88 eb       	ldi	r24, 0xB8	; 184
    b49a:	9c e0       	ldi	r25, 0x0C	; 12
    b49c:	0e 94 90 bd 	call	0x17b20	; 0x17b20 <LCDWIKI_GUI::Set_Text_Mode(bool)>
    b4a0:	6d 2d       	mov	r22, r13
    b4a2:	88 eb       	ldi	r24, 0xB8	; 184
    b4a4:	9c e0       	ldi	r25, 0x0C	; 12
    b4a6:	0e 94 8d bd 	call	0x17b1a	; 0x17b1a <LCDWIKI_GUI::Set_Text_Size(unsigned char)>
    b4aa:	b8 01       	movw	r22, r16
    b4ac:	88 eb       	ldi	r24, 0xB8	; 184
    b4ae:	9c e0       	ldi	r25, 0x0C	; 12
    b4b0:	0e 94 85 bd 	call	0x17b0a	; 0x17b0a <LCDWIKI_GUI::Set_Text_colour(unsigned int)>
    b4b4:	b7 01       	movw	r22, r14
    b4b6:	88 eb       	ldi	r24, 0xB8	; 184
    b4b8:	9c e0       	ldi	r25, 0x0C	; 12
    b4ba:	0e 94 89 bd 	call	0x17b12	; 0x17b12 <LCDWIKI_GUI::Set_Text_Back_colour(unsigned int)>
    b4be:	b3 01       	movw	r22, r6
    b4c0:	ce 01       	movw	r24, r28
    b4c2:	01 96       	adiw	r24, 0x01	; 1
    b4c4:	0f 94 b0 13 	call	0x22760	; 0x22760 <String::String(char const*)>
    b4c8:	94 01       	movw	r18, r8
    b4ca:	a5 01       	movw	r20, r10
    b4cc:	be 01       	movw	r22, r28
    b4ce:	6f 5f       	subi	r22, 0xFF	; 255
    b4d0:	7f 4f       	sbci	r23, 0xFF	; 255
    b4d2:	88 eb       	ldi	r24, 0xB8	; 184
    b4d4:	9c e0       	ldi	r25, 0x0C	; 12
    b4d6:	0e 94 16 bf 	call	0x17e2c	; 0x17e2c <LCDWIKI_GUI::Print_String(String, int, int)>
    b4da:	ce 01       	movw	r24, r28
    b4dc:	01 96       	adiw	r24, 0x01	; 1
    b4de:	0f 94 41 13 	call	0x22682	; 0x22682 <String::~String()>
    b4e2:	26 96       	adiw	r28, 0x06	; 6
    b4e4:	0f b6       	in	r0, 0x3f	; 63
    b4e6:	f8 94       	cli
    b4e8:	de bf       	out	0x3e, r29	; 62
    b4ea:	0f be       	out	0x3f, r0	; 63
    b4ec:	cd bf       	out	0x3d, r28	; 61
    b4ee:	df 91       	pop	r29
    b4f0:	cf 91       	pop	r28
    b4f2:	1f 91       	pop	r17
    b4f4:	0f 91       	pop	r16
    b4f6:	ff 90       	pop	r15
    b4f8:	ef 90       	pop	r14
    b4fa:	df 90       	pop	r13
    b4fc:	cf 90       	pop	r12
    b4fe:	bf 90       	pop	r11
    b500:	af 90       	pop	r10
    b502:	9f 90       	pop	r9
    b504:	8f 90       	pop	r8
    b506:	7f 90       	pop	r7
    b508:	6f 90       	pop	r6
    b50a:	08 95       	ret

0000b50c <display_element_dialog_default_ring(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>:
_Z35display_element_dialog_default_ringjjjjjhPc():
    b50c:	8f 92       	push	r8
    b50e:	9f 92       	push	r9
    b510:	af 92       	push	r10
    b512:	bf 92       	push	r11
    b514:	cf 92       	push	r12
    b516:	ef 92       	push	r14
    b518:	ff 92       	push	r15
    b51a:	0f 93       	push	r16
    b51c:	1f 93       	push	r17
    b51e:	cf 93       	push	r28
    b520:	df 93       	push	r29
    b522:	cd b7       	in	r28, 0x3d	; 61
    b524:	de b7       	in	r29, 0x3e	; 62
    b526:	a8 97       	sbiw	r28, 0x28	; 40
    b528:	0f b6       	in	r0, 0x3f	; 63
    b52a:	f8 94       	cli
    b52c:	de bf       	out	0x3e, r29	; 62
    b52e:	0f be       	out	0x3f, r0	; 63
    b530:	cd bf       	out	0x3d, r28	; 61
    b532:	5c 01       	movw	r10, r24
    b534:	4b 01       	movw	r8, r22
    b536:	6f e9       	ldi	r22, 0x9F	; 159
    b538:	7c e7       	ldi	r23, 0x7C	; 124
    b53a:	ce 01       	movw	r24, r28
    b53c:	01 96       	adiw	r24, 0x01	; 1
    b53e:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    b542:	8e 2d       	mov	r24, r14
    b544:	0e 94 fa b7 	call	0x16ff4	; 0x16ff4 <thermostat_ring_get_active(unsigned char)>
    b548:	8f 3f       	cpi	r24, 0xFF	; 255
    b54a:	61 f1       	breq	.+88     	; 0xb5a4 <display_element_dialog_default_ring(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x98>
    b54c:	be 01       	movw	r22, r28
    b54e:	61 5e       	subi	r22, 0xE1	; 225
    b550:	7f 4f       	sbci	r23, 0xFF	; 255
    b552:	8e 2d       	mov	r24, r14
    b554:	0e 94 9f b7 	call	0x16f3e	; 0x16f3e <thermostat_ring_get_name(unsigned char, char*)>
    b558:	be 01       	movw	r22, r28
    b55a:	61 5e       	subi	r22, 0xE1	; 225
    b55c:	7f 4f       	sbci	r23, 0xFF	; 255
    b55e:	ce 01       	movw	r24, r28
    b560:	01 96       	adiw	r24, 0x01	; 1
    b562:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    b566:	c1 2c       	mov	r12, r1
    b568:	ee 24       	eor	r14, r14
    b56a:	ea 94       	dec	r14
    b56c:	fe 2c       	mov	r15, r14
    b56e:	10 e0       	ldi	r17, 0x00	; 0
    b570:	00 e0       	ldi	r16, 0x00	; 0
    b572:	22 e0       	ldi	r18, 0x02	; 2
    b574:	a4 01       	movw	r20, r8
    b576:	b5 01       	movw	r22, r10
    b578:	ce 01       	movw	r24, r28
    b57a:	01 96       	adiw	r24, 0x01	; 1
    b57c:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    b580:	a8 96       	adiw	r28, 0x28	; 40
    b582:	0f b6       	in	r0, 0x3f	; 63
    b584:	f8 94       	cli
    b586:	de bf       	out	0x3e, r29	; 62
    b588:	0f be       	out	0x3f, r0	; 63
    b58a:	cd bf       	out	0x3d, r28	; 61
    b58c:	df 91       	pop	r29
    b58e:	cf 91       	pop	r28
    b590:	1f 91       	pop	r17
    b592:	0f 91       	pop	r16
    b594:	ff 90       	pop	r15
    b596:	ef 90       	pop	r14
    b598:	cf 90       	pop	r12
    b59a:	bf 90       	pop	r11
    b59c:	af 90       	pop	r10
    b59e:	9f 90       	pop	r9
    b5a0:	8f 90       	pop	r8
    b5a2:	08 95       	ret
    b5a4:	6e e0       	ldi	r22, 0x0E	; 14
    b5a6:	74 e8       	ldi	r23, 0x84	; 132
    b5a8:	ce 01       	movw	r24, r28
    b5aa:	4f 96       	adiw	r24, 0x1f	; 31
    b5ac:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    b5b0:	d3 cf       	rjmp	.-90     	; 0xb558 <display_element_dialog_default_ring(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x4c>

0000b5b2 <display_element_dialog_show_text(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>:
_Z32display_element_dialog_show_textjjjjjhPc():
    b5b2:	cf 92       	push	r12
    b5b4:	ef 92       	push	r14
    b5b6:	ff 92       	push	r15
    b5b8:	0f 93       	push	r16
    b5ba:	1f 93       	push	r17
    b5bc:	ab 01       	movw	r20, r22
    b5be:	c1 2c       	mov	r12, r1
    b5c0:	ee 24       	eor	r14, r14
    b5c2:	ea 94       	dec	r14
    b5c4:	fe 2c       	mov	r15, r14
    b5c6:	10 e0       	ldi	r17, 0x00	; 0
    b5c8:	00 e0       	ldi	r16, 0x00	; 0
    b5ca:	22 e0       	ldi	r18, 0x02	; 2
    b5cc:	bc 01       	movw	r22, r24
    b5ce:	83 ea       	ldi	r24, 0xA3	; 163
    b5d0:	9a e0       	ldi	r25, 0x0A	; 10
    b5d2:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    b5d6:	1f 91       	pop	r17
    b5d8:	0f 91       	pop	r16
    b5da:	ff 90       	pop	r15
    b5dc:	ef 90       	pop	r14
    b5de:	cf 90       	pop	r12
    b5e0:	08 95       	ret

0000b5e2 <display_element_show_tds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>:
_Z38display_element_show_tds_info_dynamicsjjjjjhPc():
    b5e2:	af 92       	push	r10
    b5e4:	bf 92       	push	r11
    b5e6:	cf 92       	push	r12
    b5e8:	df 92       	push	r13
    b5ea:	ef 92       	push	r14
    b5ec:	ff 92       	push	r15
    b5ee:	0f 93       	push	r16
    b5f0:	1f 93       	push	r17
    b5f2:	cf 93       	push	r28
    b5f4:	df 93       	push	r29
    b5f6:	cd b7       	in	r28, 0x3d	; 61
    b5f8:	de b7       	in	r29, 0x3e	; 62
    b5fa:	ca 54       	subi	r28, 0x4A	; 74
    b5fc:	d1 09       	sbc	r29, r1
    b5fe:	0f b6       	in	r0, 0x3f	; 63
    b600:	f8 94       	cli
    b602:	de bf       	out	0x3e, r29	; 62
    b604:	0f be       	out	0x3f, r0	; 63
    b606:	cd bf       	out	0x3d, r28	; 61
    b608:	6c 01       	movw	r12, r24
    b60a:	5b 01       	movw	r10, r22
    b60c:	be 01       	movw	r22, r28
    b60e:	6b 5c       	subi	r22, 0xCB	; 203
    b610:	7f 4f       	sbci	r23, 0xFF	; 255
    b612:	8e 2d       	mov	r24, r14
    b614:	0e 94 40 b2 	call	0x16480	; 0x16480 <get_tds18s20(unsigned char, struct_DDS18s20*)>
    b618:	81 30       	cpi	r24, 0x01	; 1
    b61a:	e1 f5       	brne	.+120    	; 0xb694 <display_element_show_tds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0xb2>
    b61c:	8e e1       	ldi	r24, 0x1E	; 30
    b61e:	e8 9e       	mul	r14, r24
    b620:	f0 01       	movw	r30, r0
    b622:	11 24       	eor	r1, r1
    b624:	e2 52       	subi	r30, 0x22	; 34
    b626:	ff 4e       	sbci	r31, 0xEF	; 239
    b628:	65 81       	ldd	r22, Z+5	; 0x05
    b62a:	76 81       	ldd	r23, Z+6	; 0x06
    b62c:	07 2e       	mov	r0, r23
    b62e:	00 0c       	add	r0, r0
    b630:	88 0b       	sbc	r24, r24
    b632:	99 0b       	sbc	r25, r25
    b634:	0f 94 f7 14 	call	0x229ee	; 0x229ee <__floatsisf>
    b638:	20 e0       	ldi	r18, 0x00	; 0
    b63a:	30 e0       	ldi	r19, 0x00	; 0
    b63c:	4a e7       	ldi	r20, 0x7A	; 122
    b63e:	54 e4       	ldi	r21, 0x44	; 68
    b640:	0f 94 4d 14 	call	0x2289a	; 0x2289a <__divsf3>
    b644:	8e 01       	movw	r16, r28
    b646:	05 5e       	subi	r16, 0xE5	; 229
    b648:	1f 4f       	sbci	r17, 0xFF	; 255
    b64a:	22 e0       	ldi	r18, 0x02	; 2
    b64c:	44 e0       	ldi	r20, 0x04	; 4
    b64e:	0f 94 c0 16 	call	0x22d80	; 0x22d80 <dtostrf>
    b652:	68 e2       	ldi	r22, 0x28	; 40
    b654:	76 e0       	ldi	r23, 0x06	; 6
    b656:	c8 01       	movw	r24, r16
    b658:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    b65c:	6f e1       	ldi	r22, 0x1F	; 31
    b65e:	75 e8       	ldi	r23, 0x85	; 133
    b660:	ce 01       	movw	r24, r28
    b662:	01 96       	adiw	r24, 0x01	; 1
    b664:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    b668:	b8 01       	movw	r22, r16
    b66a:	ce 01       	movw	r24, r28
    b66c:	01 96       	adiw	r24, 0x01	; 1
    b66e:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    b672:	a5 01       	movw	r20, r10
    b674:	44 57       	subi	r20, 0x74	; 116
    b676:	5f 4f       	sbci	r21, 0xFF	; 255
    b678:	b6 01       	movw	r22, r12
    b67a:	66 5f       	subi	r22, 0xF6	; 246
    b67c:	7f 4f       	sbci	r23, 0xFF	; 255
    b67e:	c1 2c       	mov	r12, r1
    b680:	ee 24       	eor	r14, r14
    b682:	ea 94       	dec	r14
    b684:	fe 2c       	mov	r15, r14
    b686:	10 e0       	ldi	r17, 0x00	; 0
    b688:	00 e0       	ldi	r16, 0x00	; 0
    b68a:	22 e0       	ldi	r18, 0x02	; 2
    b68c:	ce 01       	movw	r24, r28
    b68e:	01 96       	adiw	r24, 0x01	; 1
    b690:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    b694:	c6 5b       	subi	r28, 0xB6	; 182
    b696:	df 4f       	sbci	r29, 0xFF	; 255
    b698:	0f b6       	in	r0, 0x3f	; 63
    b69a:	f8 94       	cli
    b69c:	de bf       	out	0x3e, r29	; 62
    b69e:	0f be       	out	0x3f, r0	; 63
    b6a0:	cd bf       	out	0x3d, r28	; 61
    b6a2:	df 91       	pop	r29
    b6a4:	cf 91       	pop	r28
    b6a6:	1f 91       	pop	r17
    b6a8:	0f 91       	pop	r16
    b6aa:	ff 90       	pop	r15
    b6ac:	ef 90       	pop	r14
    b6ae:	df 90       	pop	r13
    b6b0:	cf 90       	pop	r12
    b6b2:	bf 90       	pop	r11
    b6b4:	af 90       	pop	r10
    b6b6:	08 95       	ret

0000b6b8 <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>:
_Z36display_element_show_tds_info_staticjjjjjhPc():
    b6b8:	2f 92       	push	r2
    b6ba:	3f 92       	push	r3
    b6bc:	4f 92       	push	r4
    b6be:	5f 92       	push	r5
    b6c0:	6f 92       	push	r6
    b6c2:	7f 92       	push	r7
    b6c4:	8f 92       	push	r8
    b6c6:	9f 92       	push	r9
    b6c8:	af 92       	push	r10
    b6ca:	bf 92       	push	r11
    b6cc:	cf 92       	push	r12
    b6ce:	df 92       	push	r13
    b6d0:	ef 92       	push	r14
    b6d2:	ff 92       	push	r15
    b6d4:	0f 93       	push	r16
    b6d6:	1f 93       	push	r17
    b6d8:	cf 93       	push	r28
    b6da:	df 93       	push	r29
    b6dc:	cd b7       	in	r28, 0x3d	; 61
    b6de:	de b7       	in	r29, 0x3e	; 62
    b6e0:	ca 54       	subi	r28, 0x4A	; 74
    b6e2:	d1 09       	sbc	r29, r1
    b6e4:	0f b6       	in	r0, 0x3f	; 63
    b6e6:	f8 94       	cli
    b6e8:	de bf       	out	0x3e, r29	; 62
    b6ea:	0f be       	out	0x3f, r0	; 63
    b6ec:	cd bf       	out	0x3d, r28	; 61
    b6ee:	4c 01       	movw	r8, r24
    b6f0:	2b 01       	movw	r4, r22
    b6f2:	5a 01       	movw	r10, r20
    b6f4:	89 01       	movw	r16, r18
    b6f6:	de 2c       	mov	r13, r14
    b6f8:	70 e0       	ldi	r23, 0x00	; 0
    b6fa:	60 e0       	ldi	r22, 0x00	; 0
    b6fc:	88 eb       	ldi	r24, 0xB8	; 184
    b6fe:	9c e0       	ldi	r25, 0x0C	; 12
    b700:	0e 94 a9 bc 	call	0x17952	; 0x17952 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    b704:	04 0d       	add	r16, r4
    b706:	15 1d       	adc	r17, r5
    b708:	94 01       	movw	r18, r8
    b70a:	2a 0d       	add	r18, r10
    b70c:	3b 1d       	adc	r19, r11
    b70e:	a2 01       	movw	r20, r4
    b710:	b4 01       	movw	r22, r8
    b712:	88 eb       	ldi	r24, 0xB8	; 184
    b714:	9c e0       	ldi	r25, 0x0C	; 12
    b716:	0e 94 34 bd 	call	0x17a68	; 0x17a68 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    b71a:	be 01       	movw	r22, r28
    b71c:	6b 5c       	subi	r22, 0xCB	; 203
    b71e:	7f 4f       	sbci	r23, 0xFF	; 255
    b720:	8e 2d       	mov	r24, r14
    b722:	0e 94 40 b2 	call	0x16480	; 0x16480 <get_tds18s20(unsigned char, struct_DDS18s20*)>
    b726:	12 01       	movw	r2, r4
    b728:	28 e2       	ldi	r18, 0x28	; 40
    b72a:	22 0e       	add	r2, r18
    b72c:	31 1c       	adc	r3, r1
    b72e:	9e 01       	movw	r18, r28
    b730:	25 5e       	subi	r18, 0xE5	; 229
    b732:	3f 4f       	sbci	r19, 0xFF	; 255
    b734:	59 01       	movw	r10, r18
    b736:	81 30       	cpi	r24, 0x01	; 1
    b738:	09 f0       	breq	.+2      	; 0xb73c <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x84>
    b73a:	cc c0       	rjmp	.+408    	; 0xb8d4 <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x21c>
    b73c:	92 e0       	ldi	r25, 0x02	; 2
    b73e:	e9 2e       	mov	r14, r25
    b740:	00 e1       	ldi	r16, 0x10	; 16
    b742:	28 e0       	ldi	r18, 0x08	; 8
    b744:	ae 01       	movw	r20, r28
    b746:	4a 5c       	subi	r20, 0xCA	; 202
    b748:	5f 4f       	sbci	r21, 0xFF	; 255
    b74a:	6a e3       	ldi	r22, 0x3A	; 58
    b74c:	ce 01       	movw	r24, r28
    b74e:	01 96       	adiw	r24, 0x01	; 1
    b750:	3c 01       	movw	r6, r24
    b752:	0e 94 e9 e4 	call	0x1c9d2	; 0x1c9d2 <createString(char*, char, unsigned char*, unsigned char, unsigned char, unsigned char)>
    b756:	7f 92       	push	r7
    b758:	6f 92       	push	r6
    b75a:	8a e2       	ldi	r24, 0x2A	; 42
    b75c:	93 e0       	ldi	r25, 0x03	; 3
    b75e:	9f 93       	push	r25
    b760:	8f 93       	push	r24
    b762:	bf 92       	push	r11
    b764:	af 92       	push	r10
    b766:	0f 94 a6 1b 	call	0x2374c	; 0x2374c <sprintf>
    b76a:	9a e0       	ldi	r25, 0x0A	; 10
    b76c:	89 0e       	add	r8, r25
    b76e:	91 1c       	adc	r9, r1
    b770:	a2 01       	movw	r20, r4
    b772:	4b 5a       	subi	r20, 0xAB	; 171
    b774:	5f 4f       	sbci	r21, 0xFF	; 255
    b776:	c1 2c       	mov	r12, r1
    b778:	ee 24       	eor	r14, r14
    b77a:	ea 94       	dec	r14
    b77c:	fe 2c       	mov	r15, r14
    b77e:	10 e0       	ldi	r17, 0x00	; 0
    b780:	00 e0       	ldi	r16, 0x00	; 0
    b782:	21 e0       	ldi	r18, 0x01	; 1
    b784:	b4 01       	movw	r22, r8
    b786:	c5 01       	movw	r24, r10
    b788:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    b78c:	64 e9       	ldi	r22, 0x94	; 148
    b78e:	72 e8       	ldi	r23, 0x82	; 130
    b790:	c3 01       	movw	r24, r6
    b792:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    b796:	85 e3       	ldi	r24, 0x35	; 53
    b798:	90 e0       	ldi	r25, 0x00	; 0
    b79a:	8c 0f       	add	r24, r28
    b79c:	9d 1f       	adc	r25, r29
    b79e:	0c 96       	adiw	r24, 0x0c	; 12
    b7a0:	9f 93       	push	r25
    b7a2:	8f 93       	push	r24
    b7a4:	7f 92       	push	r7
    b7a6:	6f 92       	push	r6
    b7a8:	82 e3       	ldi	r24, 0x32	; 50
    b7aa:	93 e0       	ldi	r25, 0x03	; 3
    b7ac:	9f 93       	push	r25
    b7ae:	8f 93       	push	r24
    b7b0:	bf 92       	push	r11
    b7b2:	af 92       	push	r10
    b7b4:	0f 94 a6 1b 	call	0x2374c	; 0x2374c <sprintf>
    b7b8:	22 e0       	ldi	r18, 0x02	; 2
    b7ba:	a1 01       	movw	r20, r2
    b7bc:	b4 01       	movw	r22, r8
    b7be:	c5 01       	movw	r24, r10
    b7c0:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    b7c4:	21 96       	adiw	r28, 0x01	; 1
    b7c6:	6e ad       	ldd	r22, Y+62	; 0x3e
    b7c8:	7f ad       	ldd	r23, Y+63	; 0x3f
    b7ca:	21 97       	sbiw	r28, 0x01	; 1
    b7cc:	07 2e       	mov	r0, r23
    b7ce:	00 0c       	add	r0, r0
    b7d0:	88 0b       	sbc	r24, r24
    b7d2:	99 0b       	sbc	r25, r25
    b7d4:	0f 94 f7 14 	call	0x229ee	; 0x229ee <__floatsisf>
    b7d8:	20 e0       	ldi	r18, 0x00	; 0
    b7da:	30 e0       	ldi	r19, 0x00	; 0
    b7dc:	4a e7       	ldi	r20, 0x7A	; 122
    b7de:	54 e4       	ldi	r21, 0x44	; 68
    b7e0:	0f 94 4d 14 	call	0x2289a	; 0x2289a <__divsf3>
    b7e4:	85 01       	movw	r16, r10
    b7e6:	22 e0       	ldi	r18, 0x02	; 2
    b7e8:	44 e0       	ldi	r20, 0x04	; 4
    b7ea:	0f 94 c0 16 	call	0x22d80	; 0x22d80 <dtostrf>
    b7ee:	68 e2       	ldi	r22, 0x28	; 40
    b7f0:	76 e0       	ldi	r23, 0x06	; 6
    b7f2:	c5 01       	movw	r24, r10
    b7f4:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    b7f8:	67 e1       	ldi	r22, 0x17	; 23
    b7fa:	75 e8       	ldi	r23, 0x85	; 133
    b7fc:	c3 01       	movw	r24, r6
    b7fe:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    b802:	b5 01       	movw	r22, r10
    b804:	c3 01       	movw	r24, r6
    b806:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    b80a:	a2 01       	movw	r20, r4
    b80c:	44 5c       	subi	r20, 0xC4	; 196
    b80e:	5f 4f       	sbci	r21, 0xFF	; 255
    b810:	10 e0       	ldi	r17, 0x00	; 0
    b812:	00 e0       	ldi	r16, 0x00	; 0
    b814:	22 e0       	ldi	r18, 0x02	; 2
    b816:	b4 01       	movw	r22, r8
    b818:	c3 01       	movw	r24, r6
    b81a:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    b81e:	6a ec       	ldi	r22, 0xCA	; 202
    b820:	72 e8       	ldi	r23, 0x82	; 130
    b822:	c3 01       	movw	r24, r6
    b824:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    b828:	2a 96       	adiw	r28, 0x0a	; 10
    b82a:	8f ad       	ldd	r24, Y+63	; 0x3f
    b82c:	2a 97       	sbiw	r28, 0x0a	; 10
    b82e:	1f 92       	push	r1
    b830:	8f 93       	push	r24
    b832:	7f 92       	push	r7
    b834:	6f 92       	push	r6
    b836:	89 e3       	ldi	r24, 0x39	; 57
    b838:	93 e0       	ldi	r25, 0x03	; 3
    b83a:	9f 93       	push	r25
    b83c:	8f 93       	push	r24
    b83e:	bf 92       	push	r11
    b840:	af 92       	push	r10
    b842:	0f 94 a6 1b 	call	0x2374c	; 0x2374c <sprintf>
    b846:	a2 01       	movw	r20, r4
    b848:	4c 59       	subi	r20, 0x9C	; 156
    b84a:	5f 4f       	sbci	r21, 0xFF	; 255
    b84c:	22 e0       	ldi	r18, 0x02	; 2
    b84e:	b4 01       	movw	r22, r8
    b850:	c5 01       	movw	r24, r10
    b852:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    b856:	6d e8       	ldi	r22, 0x8D	; 141
    b858:	72 e8       	ldi	r23, 0x82	; 130
    b85a:	c3 01       	movw	r24, r6
    b85c:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    b860:	2e e1       	ldi	r18, 0x1E	; 30
    b862:	d2 9e       	mul	r13, r18
    b864:	f0 01       	movw	r30, r0
    b866:	11 24       	eor	r1, r1
    b868:	e2 52       	subi	r30, 0x22	; 34
    b86a:	ff 4e       	sbci	r31, 0xEF	; 239
    b86c:	83 8d       	ldd	r24, Z+27	; 0x1b
    b86e:	1f 92       	push	r1
    b870:	8f 93       	push	r24
    b872:	7f 92       	push	r7
    b874:	6f 92       	push	r6
    b876:	81 e4       	ldi	r24, 0x41	; 65
    b878:	93 e0       	ldi	r25, 0x03	; 3
    b87a:	9f 93       	push	r25
    b87c:	8f 93       	push	r24
    b87e:	bf 92       	push	r11
    b880:	af 92       	push	r10
    b882:	0f 94 a6 1b 	call	0x2374c	; 0x2374c <sprintf>
    b886:	a2 01       	movw	r20, r4
    b888:	48 58       	subi	r20, 0x88	; 136
    b88a:	5f 4f       	sbci	r21, 0xFF	; 255
    b88c:	22 e0       	ldi	r18, 0x02	; 2
    b88e:	b4 01       	movw	r22, r8
    b890:	c5 01       	movw	r24, r10
    b892:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    b896:	0f b6       	in	r0, 0x3f	; 63
    b898:	f8 94       	cli
    b89a:	de bf       	out	0x3e, r29	; 62
    b89c:	0f be       	out	0x3f, r0	; 63
    b89e:	cd bf       	out	0x3d, r28	; 61
    b8a0:	c6 5b       	subi	r28, 0xB6	; 182
    b8a2:	df 4f       	sbci	r29, 0xFF	; 255
    b8a4:	0f b6       	in	r0, 0x3f	; 63
    b8a6:	f8 94       	cli
    b8a8:	de bf       	out	0x3e, r29	; 62
    b8aa:	0f be       	out	0x3f, r0	; 63
    b8ac:	cd bf       	out	0x3d, r28	; 61
    b8ae:	df 91       	pop	r29
    b8b0:	cf 91       	pop	r28
    b8b2:	1f 91       	pop	r17
    b8b4:	0f 91       	pop	r16
    b8b6:	ff 90       	pop	r15
    b8b8:	ef 90       	pop	r14
    b8ba:	df 90       	pop	r13
    b8bc:	cf 90       	pop	r12
    b8be:	bf 90       	pop	r11
    b8c0:	af 90       	pop	r10
    b8c2:	9f 90       	pop	r9
    b8c4:	8f 90       	pop	r8
    b8c6:	7f 90       	pop	r7
    b8c8:	6f 90       	pop	r6
    b8ca:	5f 90       	pop	r5
    b8cc:	4f 90       	pop	r4
    b8ce:	3f 90       	pop	r3
    b8d0:	2f 90       	pop	r2
    b8d2:	08 95       	ret
    b8d4:	6b ed       	ldi	r22, 0xDB	; 219
    b8d6:	71 e8       	ldi	r23, 0x81	; 129
    b8d8:	c9 01       	movw	r24, r18
    b8da:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    b8de:	b4 01       	movw	r22, r8
    b8e0:	67 5e       	subi	r22, 0xE7	; 231
    b8e2:	7f 4f       	sbci	r23, 0xFF	; 255
    b8e4:	c1 2c       	mov	r12, r1
    b8e6:	ee 24       	eor	r14, r14
    b8e8:	ea 94       	dec	r14
    b8ea:	fe 2c       	mov	r15, r14
    b8ec:	00 e0       	ldi	r16, 0x00	; 0
    b8ee:	18 ef       	ldi	r17, 0xF8	; 248
    b8f0:	24 e0       	ldi	r18, 0x04	; 4
    b8f2:	a1 01       	movw	r20, r2
    b8f4:	c5 01       	movw	r24, r10
    b8f6:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    b8fa:	d2 cf       	rjmp	.-92     	; 0xb8a0 <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x1e8>

0000b8fc <display_element_show_time_decorate_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>:
_Z36display_element_show_time_decorate_1jjjjjhPc():
    b8fc:	4f 92       	push	r4
    b8fe:	5f 92       	push	r5
    b900:	6f 92       	push	r6
    b902:	7f 92       	push	r7
    b904:	8f 92       	push	r8
    b906:	9f 92       	push	r9
    b908:	af 92       	push	r10
    b90a:	bf 92       	push	r11
    b90c:	cf 92       	push	r12
    b90e:	ef 92       	push	r14
    b910:	ff 92       	push	r15
    b912:	0f 93       	push	r16
    b914:	1f 93       	push	r17
    b916:	cf 93       	push	r28
    b918:	df 93       	push	r29
    b91a:	cd b7       	in	r28, 0x3d	; 61
    b91c:	de b7       	in	r29, 0x3e	; 62
    b91e:	68 97       	sbiw	r28, 0x18	; 24
    b920:	0f b6       	in	r0, 0x3f	; 63
    b922:	f8 94       	cli
    b924:	de bf       	out	0x3e, r29	; 62
    b926:	0f be       	out	0x3f, r0	; 63
    b928:	cd bf       	out	0x3d, r28	; 61
    b92a:	5c 01       	movw	r10, r24
    b92c:	4b 01       	movw	r8, r22
    b92e:	3a 01       	movw	r6, r20
    b930:	29 01       	movw	r4, r18
    b932:	6a e3       	ldi	r22, 0x3A	; 58
    b934:	75 e8       	ldi	r23, 0x85	; 133
    b936:	ce 01       	movw	r24, r28
    b938:	01 96       	adiw	r24, 0x01	; 1
    b93a:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    b93e:	a4 01       	movw	r20, r8
    b940:	4b 5f       	subi	r20, 0xFB	; 251
    b942:	5f 4f       	sbci	r21, 0xFF	; 255
    b944:	b5 01       	movw	r22, r10
    b946:	61 5b       	subi	r22, 0xB1	; 177
    b948:	7f 4f       	sbci	r23, 0xFF	; 255
    b94a:	c1 2c       	mov	r12, r1
    b94c:	ee 24       	eor	r14, r14
    b94e:	ea 94       	dec	r14
    b950:	fe 2c       	mov	r15, r14
    b952:	10 e0       	ldi	r17, 0x00	; 0
    b954:	00 e0       	ldi	r16, 0x00	; 0
    b956:	21 e0       	ldi	r18, 0x01	; 1
    b958:	ce 01       	movw	r24, r28
    b95a:	01 96       	adiw	r24, 0x01	; 1
    b95c:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    b960:	84 01       	movw	r16, r8
    b962:	04 0d       	add	r16, r4
    b964:	15 1d       	adc	r17, r5
    b966:	95 01       	movw	r18, r10
    b968:	26 0d       	add	r18, r6
    b96a:	37 1d       	adc	r19, r7
    b96c:	a4 01       	movw	r20, r8
    b96e:	b5 01       	movw	r22, r10
    b970:	88 eb       	ldi	r24, 0xB8	; 184
    b972:	9c e0       	ldi	r25, 0x0C	; 12
    b974:	0e 94 34 bd 	call	0x17a68	; 0x17a68 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    b978:	68 96       	adiw	r28, 0x18	; 24
    b97a:	0f b6       	in	r0, 0x3f	; 63
    b97c:	f8 94       	cli
    b97e:	de bf       	out	0x3e, r29	; 62
    b980:	0f be       	out	0x3f, r0	; 63
    b982:	cd bf       	out	0x3d, r28	; 61
    b984:	df 91       	pop	r29
    b986:	cf 91       	pop	r28
    b988:	1f 91       	pop	r17
    b98a:	0f 91       	pop	r16
    b98c:	ff 90       	pop	r15
    b98e:	ef 90       	pop	r14
    b990:	cf 90       	pop	r12
    b992:	bf 90       	pop	r11
    b994:	af 90       	pop	r10
    b996:	9f 90       	pop	r9
    b998:	8f 90       	pop	r8
    b99a:	7f 90       	pop	r7
    b99c:	6f 90       	pop	r6
    b99e:	5f 90       	pop	r5
    b9a0:	4f 90       	pop	r4
    b9a2:	08 95       	ret

0000b9a4 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>:
_Z35display_element_dialog_set_variablejjjjjhPc():
    b9a4:	2f 92       	push	r2
    b9a6:	3f 92       	push	r3
    b9a8:	4f 92       	push	r4
    b9aa:	5f 92       	push	r5
    b9ac:	6f 92       	push	r6
    b9ae:	7f 92       	push	r7
    b9b0:	8f 92       	push	r8
    b9b2:	9f 92       	push	r9
    b9b4:	af 92       	push	r10
    b9b6:	bf 92       	push	r11
    b9b8:	cf 92       	push	r12
    b9ba:	df 92       	push	r13
    b9bc:	ef 92       	push	r14
    b9be:	ff 92       	push	r15
    b9c0:	0f 93       	push	r16
    b9c2:	1f 93       	push	r17
    b9c4:	cf 93       	push	r28
    b9c6:	df 93       	push	r29
    b9c8:	cd b7       	in	r28, 0x3d	; 61
    b9ca:	de b7       	in	r29, 0x3e	; 62
    b9cc:	2d 97       	sbiw	r28, 0x0d	; 13
    b9ce:	0f b6       	in	r0, 0x3f	; 63
    b9d0:	f8 94       	cli
    b9d2:	de bf       	out	0x3e, r29	; 62
    b9d4:	0f be       	out	0x3f, r0	; 63
    b9d6:	cd bf       	out	0x3d, r28	; 61
    b9d8:	5c 01       	movw	r10, r24
    b9da:	7b 01       	movw	r14, r22
    b9dc:	1a 01       	movw	r2, r20
    b9de:	29 01       	movw	r4, r18
    b9e0:	38 01       	movw	r6, r16
    b9e2:	dd 86       	std	Y+13, r13	; 0x0d
    b9e4:	cc 86       	std	Y+12, r12	; 0x0c
    b9e6:	70 e0       	ldi	r23, 0x00	; 0
    b9e8:	60 e0       	ldi	r22, 0x00	; 0
    b9ea:	88 eb       	ldi	r24, 0xB8	; 184
    b9ec:	9c e0       	ldi	r25, 0x0C	; 12
    b9ee:	0e 94 a9 bc 	call	0x17952	; 0x17952 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    b9f2:	d1 2c       	mov	r13, r1
    b9f4:	c1 2c       	mov	r12, r1
    b9f6:	97 01       	movw	r18, r14
    b9f8:	24 0d       	add	r18, r4
    b9fa:	35 1d       	adc	r19, r5
    b9fc:	3b 87       	std	Y+11, r19	; 0x0b
    b9fe:	2a 87       	std	Y+10, r18	; 0x0a
    ba00:	45 01       	movw	r8, r10
    ba02:	82 0c       	add	r8, r2
    ba04:	93 1c       	adc	r9, r3
    ba06:	0a 85       	ldd	r16, Y+10	; 0x0a
    ba08:	1b 85       	ldd	r17, Y+11	; 0x0b
    ba0a:	0c 19       	sub	r16, r12
    ba0c:	1d 09       	sbc	r17, r13
    ba0e:	94 01       	movw	r18, r8
    ba10:	2c 19       	sub	r18, r12
    ba12:	3d 09       	sbc	r19, r13
    ba14:	a6 01       	movw	r20, r12
    ba16:	4e 0d       	add	r20, r14
    ba18:	5f 1d       	adc	r21, r15
    ba1a:	b6 01       	movw	r22, r12
    ba1c:	6a 0d       	add	r22, r10
    ba1e:	7b 1d       	adc	r23, r11
    ba20:	88 eb       	ldi	r24, 0xB8	; 184
    ba22:	9c e0       	ldi	r25, 0x0C	; 12
    ba24:	0e 94 34 bd 	call	0x17a68	; 0x17a68 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    ba28:	3f ef       	ldi	r19, 0xFF	; 255
    ba2a:	c3 1a       	sub	r12, r19
    ba2c:	d3 0a       	sbc	r13, r19
    ba2e:	83 e0       	ldi	r24, 0x03	; 3
    ba30:	c8 16       	cp	r12, r24
    ba32:	d1 04       	cpc	r13, r1
    ba34:	41 f7       	brne	.-48     	; 0xba06 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x62>
    ba36:	6f ef       	ldi	r22, 0xFF	; 255
    ba38:	7f ef       	ldi	r23, 0xFF	; 255
    ba3a:	88 eb       	ldi	r24, 0xB8	; 184
    ba3c:	9c e0       	ldi	r25, 0x0C	; 12
    ba3e:	0e 94 a9 bc 	call	0x17952	; 0x17952 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    ba42:	82 01       	movw	r16, r4
    ba44:	03 50       	subi	r16, 0x03	; 3
    ba46:	11 09       	sbc	r17, r1
    ba48:	0e 0d       	add	r16, r14
    ba4a:	1f 1d       	adc	r17, r15
    ba4c:	91 01       	movw	r18, r2
    ba4e:	23 50       	subi	r18, 0x03	; 3
    ba50:	31 09       	sbc	r19, r1
    ba52:	2a 0d       	add	r18, r10
    ba54:	3b 1d       	adc	r19, r11
    ba56:	a7 01       	movw	r20, r14
    ba58:	4d 5f       	subi	r20, 0xFD	; 253
    ba5a:	5f 4f       	sbci	r21, 0xFF	; 255
    ba5c:	b5 01       	movw	r22, r10
    ba5e:	6d 5f       	subi	r22, 0xFD	; 253
    ba60:	7f 4f       	sbci	r23, 0xFF	; 255
    ba62:	88 eb       	ldi	r24, 0xB8	; 184
    ba64:	9c e0       	ldi	r25, 0x0C	; 12
    ba66:	0e 94 ad bc 	call	0x1795a	; 0x1795a <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)>
    ba6a:	85 e1       	ldi	r24, 0x15	; 21
    ba6c:	86 9d       	mul	r24, r6
    ba6e:	f0 01       	movw	r30, r0
    ba70:	87 9d       	mul	r24, r7
    ba72:	f0 0d       	add	r31, r0
    ba74:	11 24       	eor	r1, r1
    ba76:	eb 53       	subi	r30, 0x3B	; 59
    ba78:	f5 4f       	sbci	r31, 0xF5	; 245
    ba7a:	85 85       	ldd	r24, Z+13	; 0x0d
    ba7c:	9e 01       	movw	r18, r28
    ba7e:	2f 5f       	subi	r18, 0xFF	; 255
    ba80:	3f 4f       	sbci	r19, 0xFF	; 255
    ba82:	49 01       	movw	r8, r18
    ba84:	81 11       	cpse	r24, r1
    ba86:	09 c0       	rjmp	.+18     	; 0xba9a <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0xf6>
    ba88:	60 81       	ld	r22, Z
    ba8a:	71 81       	ldd	r23, Z+1	; 0x01
    ba8c:	82 81       	ldd	r24, Z+2	; 0x02
    ba8e:	93 81       	ldd	r25, Z+3	; 0x03
    ba90:	89 01       	movw	r16, r18
    ba92:	22 e0       	ldi	r18, 0x02	; 2
    ba94:	44 e0       	ldi	r20, 0x04	; 4
    ba96:	0f 94 c0 16 	call	0x22d80	; 0x22d80 <dtostrf>
    ba9a:	85 e1       	ldi	r24, 0x15	; 21
    ba9c:	86 9d       	mul	r24, r6
    ba9e:	f0 01       	movw	r30, r0
    baa0:	87 9d       	mul	r24, r7
    baa2:	f0 0d       	add	r31, r0
    baa4:	11 24       	eor	r1, r1
    baa6:	eb 53       	subi	r30, 0x3B	; 59
    baa8:	f5 4f       	sbci	r31, 0xF5	; 245
    baaa:	85 85       	ldd	r24, Z+13	; 0x0d
    baac:	81 30       	cpi	r24, 0x01	; 1
    baae:	59 f4       	brne	.+22     	; 0xbac6 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x122>
    bab0:	60 81       	ld	r22, Z
    bab2:	71 81       	ldd	r23, Z+1	; 0x01
    bab4:	82 81       	ldd	r24, Z+2	; 0x02
    bab6:	93 81       	ldd	r25, Z+3	; 0x03
    bab8:	0f 94 bf 14 	call	0x2297e	; 0x2297e <__fixsfsi>
    babc:	cb 01       	movw	r24, r22
itoa():
    babe:	4a e0       	ldi	r20, 0x0A	; 10
    bac0:	b4 01       	movw	r22, r8
    bac2:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z35display_element_dialog_set_variablejjjjjhPc():
    bac6:	70 e0       	ldi	r23, 0x00	; 0
    bac8:	60 e0       	ldi	r22, 0x00	; 0
    baca:	88 eb       	ldi	r24, 0xB8	; 184
    bacc:	9c e0       	ldi	r25, 0x0C	; 12
    bace:	0e 94 a9 bc 	call	0x17952	; 0x17952 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    bad2:	f4 01       	movw	r30, r8
    bad4:	01 90       	ld	r0, Z+
    bad6:	00 20       	and	r0, r0
    bad8:	e9 f7       	brne	.-6      	; 0xbad4 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x130>
    bada:	31 97       	sbiw	r30, 0x01	; 1
    badc:	e8 19       	sub	r30, r8
    bade:	f9 09       	sbc	r31, r9
    bae0:	3c e0       	ldi	r19, 0x0C	; 12
    bae2:	43 1a       	sub	r4, r19
    bae4:	51 08       	sbc	r5, r1
    bae6:	56 94       	lsr	r5
    bae8:	47 94       	ror	r4
    baea:	81 e0       	ldi	r24, 0x01	; 1
    baec:	e8 1a       	sub	r14, r24
    baee:	f1 08       	sbc	r15, r1
    baf0:	4e 0c       	add	r4, r14
    baf2:	5f 1c       	adc	r5, r15
_Z22show_string_size_widthhh():
    baf4:	96 e0       	ldi	r25, 0x06	; 6
    baf6:	e9 9f       	mul	r30, r25
    baf8:	f0 01       	movw	r30, r0
    bafa:	11 24       	eor	r1, r1
    bafc:	ee 0f       	add	r30, r30
    bafe:	ff 1f       	adc	r31, r31
_Z35display_element_dialog_set_variablejjjjjhPc():
    bb00:	b1 01       	movw	r22, r2
    bb02:	6e 1b       	sub	r22, r30
    bb04:	7f 0b       	sbc	r23, r31
    bb06:	76 95       	lsr	r23
    bb08:	67 95       	ror	r22
    bb0a:	6a 0d       	add	r22, r10
    bb0c:	7b 1d       	adc	r23, r11
    bb0e:	c1 2c       	mov	r12, r1
    bb10:	ee 24       	eor	r14, r14
    bb12:	ea 94       	dec	r14
    bb14:	fe 2c       	mov	r15, r14
    bb16:	10 e0       	ldi	r17, 0x00	; 0
    bb18:	00 e0       	ldi	r16, 0x00	; 0
    bb1a:	22 e0       	ldi	r18, 0x02	; 2
    bb1c:	a2 01       	movw	r20, r4
    bb1e:	c4 01       	movw	r24, r8
    bb20:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    bb24:	ec 85       	ldd	r30, Y+12	; 0x0c
    bb26:	fd 85       	ldd	r31, Y+13	; 0x0d
    bb28:	80 81       	ld	r24, Z
    bb2a:	88 23       	and	r24, r24
    bb2c:	41 f0       	breq	.+16     	; 0xbb3e <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x19a>
    bb2e:	b5 01       	movw	r22, r10
    bb30:	6b 5f       	subi	r22, 0xFB	; 251
    bb32:	7f 4f       	sbci	r23, 0xFF	; 255
    bb34:	22 e0       	ldi	r18, 0x02	; 2
    bb36:	a2 01       	movw	r20, r4
    bb38:	cf 01       	movw	r24, r30
    bb3a:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    bb3e:	2d 96       	adiw	r28, 0x0d	; 13
    bb40:	0f b6       	in	r0, 0x3f	; 63
    bb42:	f8 94       	cli
    bb44:	de bf       	out	0x3e, r29	; 62
    bb46:	0f be       	out	0x3f, r0	; 63
    bb48:	cd bf       	out	0x3d, r28	; 61
    bb4a:	df 91       	pop	r29
    bb4c:	cf 91       	pop	r28
    bb4e:	1f 91       	pop	r17
    bb50:	0f 91       	pop	r16
    bb52:	ff 90       	pop	r15
    bb54:	ef 90       	pop	r14
    bb56:	df 90       	pop	r13
    bb58:	cf 90       	pop	r12
    bb5a:	bf 90       	pop	r11
    bb5c:	af 90       	pop	r10
    bb5e:	9f 90       	pop	r9
    bb60:	8f 90       	pop	r8
    bb62:	7f 90       	pop	r7
    bb64:	6f 90       	pop	r6
    bb66:	5f 90       	pop	r5
    bb68:	4f 90       	pop	r4
    bb6a:	3f 90       	pop	r3
    bb6c:	2f 90       	pop	r2
    bb6e:	08 95       	ret

0000bb70 <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>:
_Z33display_element_dialog_set_stringjjjjjhPc():
    bb70:	4f 92       	push	r4
    bb72:	5f 92       	push	r5
    bb74:	6f 92       	push	r6
    bb76:	7f 92       	push	r7
    bb78:	8f 92       	push	r8
    bb7a:	9f 92       	push	r9
    bb7c:	af 92       	push	r10
    bb7e:	bf 92       	push	r11
    bb80:	cf 92       	push	r12
    bb82:	df 92       	push	r13
    bb84:	ef 92       	push	r14
    bb86:	ff 92       	push	r15
    bb88:	0f 93       	push	r16
    bb8a:	1f 93       	push	r17
    bb8c:	cf 93       	push	r28
    bb8e:	df 93       	push	r29
    bb90:	6c 01       	movw	r12, r24
    bb92:	eb 01       	movw	r28, r22
    bb94:	2a 01       	movw	r4, r20
    bb96:	39 01       	movw	r6, r18
    bb98:	70 e0       	ldi	r23, 0x00	; 0
    bb9a:	60 e0       	ldi	r22, 0x00	; 0
    bb9c:	88 eb       	ldi	r24, 0xB8	; 184
    bb9e:	9c e0       	ldi	r25, 0x0C	; 12
    bba0:	0e 94 a9 bc 	call	0x17952	; 0x17952 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    bba4:	f1 2c       	mov	r15, r1
    bba6:	e1 2c       	mov	r14, r1
    bba8:	4e 01       	movw	r8, r28
    bbaa:	86 0c       	add	r8, r6
    bbac:	97 1c       	adc	r9, r7
    bbae:	56 01       	movw	r10, r12
    bbb0:	a4 0c       	add	r10, r4
    bbb2:	b5 1c       	adc	r11, r5
    bbb4:	84 01       	movw	r16, r8
    bbb6:	0e 19       	sub	r16, r14
    bbb8:	1f 09       	sbc	r17, r15
    bbba:	95 01       	movw	r18, r10
    bbbc:	2e 19       	sub	r18, r14
    bbbe:	3f 09       	sbc	r19, r15
    bbc0:	a7 01       	movw	r20, r14
    bbc2:	4c 0f       	add	r20, r28
    bbc4:	5d 1f       	adc	r21, r29
    bbc6:	b7 01       	movw	r22, r14
    bbc8:	6c 0d       	add	r22, r12
    bbca:	7d 1d       	adc	r23, r13
    bbcc:	88 eb       	ldi	r24, 0xB8	; 184
    bbce:	9c e0       	ldi	r25, 0x0C	; 12
    bbd0:	0e 94 34 bd 	call	0x17a68	; 0x17a68 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    bbd4:	2f ef       	ldi	r18, 0xFF	; 255
    bbd6:	e2 1a       	sub	r14, r18
    bbd8:	f2 0a       	sbc	r15, r18
    bbda:	83 e0       	ldi	r24, 0x03	; 3
    bbdc:	e8 16       	cp	r14, r24
    bbde:	f1 04       	cpc	r15, r1
    bbe0:	49 f7       	brne	.-46     	; 0xbbb4 <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x44>
    bbe2:	6f ef       	ldi	r22, 0xFF	; 255
    bbe4:	7f ef       	ldi	r23, 0xFF	; 255
    bbe6:	88 eb       	ldi	r24, 0xB8	; 184
    bbe8:	9c e0       	ldi	r25, 0x0C	; 12
    bbea:	0e 94 a9 bc 	call	0x17952	; 0x17952 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    bbee:	83 01       	movw	r16, r6
    bbf0:	03 50       	subi	r16, 0x03	; 3
    bbf2:	11 09       	sbc	r17, r1
    bbf4:	0c 0f       	add	r16, r28
    bbf6:	1d 1f       	adc	r17, r29
    bbf8:	92 01       	movw	r18, r4
    bbfa:	23 50       	subi	r18, 0x03	; 3
    bbfc:	31 09       	sbc	r19, r1
    bbfe:	2c 0d       	add	r18, r12
    bc00:	3d 1d       	adc	r19, r13
    bc02:	ae 01       	movw	r20, r28
    bc04:	4d 5f       	subi	r20, 0xFD	; 253
    bc06:	5f 4f       	sbci	r21, 0xFF	; 255
    bc08:	b6 01       	movw	r22, r12
    bc0a:	6d 5f       	subi	r22, 0xFD	; 253
    bc0c:	7f 4f       	sbci	r23, 0xFF	; 255
    bc0e:	88 eb       	ldi	r24, 0xB8	; 184
    bc10:	9c e0       	ldi	r25, 0x0C	; 12
    bc12:	0e 94 ad bc 	call	0x1795a	; 0x1795a <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)>
    bc16:	70 e0       	ldi	r23, 0x00	; 0
    bc18:	60 e0       	ldi	r22, 0x00	; 0
    bc1a:	88 eb       	ldi	r24, 0xB8	; 184
    bc1c:	9c e0       	ldi	r25, 0x0C	; 12
    bc1e:	0e 94 a9 bc 	call	0x17952	; 0x17952 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    bc22:	83 e8       	ldi	r24, 0x83	; 131
    bc24:	9a e0       	ldi	r25, 0x0A	; 10
    bc26:	fc 01       	movw	r30, r24
    bc28:	01 90       	ld	r0, Z+
    bc2a:	00 20       	and	r0, r0
    bc2c:	e9 f7       	brne	.-6      	; 0xbc28 <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0xb8>
    bc2e:	cf 01       	movw	r24, r30
    bc30:	84 58       	subi	r24, 0x84	; 132
    bc32:	9a 40       	sbci	r25, 0x0A	; 10
    bc34:	a3 01       	movw	r20, r6
    bc36:	4c 50       	subi	r20, 0x0C	; 12
    bc38:	51 09       	sbc	r21, r1
    bc3a:	56 95       	lsr	r21
    bc3c:	47 95       	ror	r20
    bc3e:	21 97       	sbiw	r28, 0x01	; 1
    bc40:	4c 0f       	add	r20, r28
    bc42:	5d 1f       	adc	r21, r29
_Z22show_string_size_widthhh():
    bc44:	f6 e0       	ldi	r31, 0x06	; 6
    bc46:	8f 9f       	mul	r24, r31
    bc48:	c0 01       	movw	r24, r0
    bc4a:	11 24       	eor	r1, r1
    bc4c:	88 0f       	add	r24, r24
    bc4e:	99 1f       	adc	r25, r25
_Z33display_element_dialog_set_stringjjjjjhPc():
    bc50:	b2 01       	movw	r22, r4
    bc52:	68 1b       	sub	r22, r24
    bc54:	79 0b       	sbc	r23, r25
    bc56:	76 95       	lsr	r23
    bc58:	67 95       	ror	r22
    bc5a:	6c 0d       	add	r22, r12
    bc5c:	7d 1d       	adc	r23, r13
    bc5e:	c1 2c       	mov	r12, r1
    bc60:	ee 24       	eor	r14, r14
    bc62:	ea 94       	dec	r14
    bc64:	fe 2c       	mov	r15, r14
    bc66:	10 e0       	ldi	r17, 0x00	; 0
    bc68:	00 e0       	ldi	r16, 0x00	; 0
    bc6a:	22 e0       	ldi	r18, 0x02	; 2
    bc6c:	83 e8       	ldi	r24, 0x83	; 131
    bc6e:	9a e0       	ldi	r25, 0x0A	; 10
    bc70:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    bc74:	df 91       	pop	r29
    bc76:	cf 91       	pop	r28
    bc78:	1f 91       	pop	r17
    bc7a:	0f 91       	pop	r16
    bc7c:	ff 90       	pop	r15
    bc7e:	ef 90       	pop	r14
    bc80:	df 90       	pop	r13
    bc82:	cf 90       	pop	r12
    bc84:	bf 90       	pop	r11
    bc86:	af 90       	pop	r10
    bc88:	9f 90       	pop	r9
    bc8a:	8f 90       	pop	r8
    bc8c:	7f 90       	pop	r7
    bc8e:	6f 90       	pop	r6
    bc90:	5f 90       	pop	r5
    bc92:	4f 90       	pop	r4
    bc94:	08 95       	ret

0000bc96 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>:
_Z27display_element_show_time_1jjjjjhPc():
    bc96:	af 92       	push	r10
    bc98:	bf 92       	push	r11
    bc9a:	cf 92       	push	r12
    bc9c:	ef 92       	push	r14
    bc9e:	ff 92       	push	r15
    bca0:	0f 93       	push	r16
    bca2:	1f 93       	push	r17
    bca4:	cf 93       	push	r28
    bca6:	df 93       	push	r29
    bca8:	cd b7       	in	r28, 0x3d	; 61
    bcaa:	de b7       	in	r29, 0x3e	; 62
    bcac:	68 97       	sbiw	r28, 0x18	; 24
    bcae:	0f b6       	in	r0, 0x3f	; 63
    bcb0:	f8 94       	cli
    bcb2:	de bf       	out	0x3e, r29	; 62
    bcb4:	0f be       	out	0x3f, r0	; 63
    bcb6:	cd bf       	out	0x3d, r28	; 61
    bcb8:	8c 01       	movw	r16, r24
    bcba:	7b 01       	movw	r14, r22
_Z14selftest_get_0h():
    bcbc:	80 91 60 0b 	lds	r24, 0x0B60	; 0x800b60 <selftest_data>
    bcc0:	9e 01       	movw	r18, r28
    bcc2:	2f 5f       	subi	r18, 0xFF	; 255
    bcc4:	3f 4f       	sbci	r19, 0xFF	; 255
    bcc6:	59 01       	movw	r10, r18
_Z27display_element_show_time_1jjjjjhPc():
    bcc8:	80 fd       	sbrc	r24, 0
    bcca:	3b c0       	rjmp	.+118    	; 0xbd42 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0xac>
    bccc:	80 91 19 0f 	lds	r24, 0x0F19	; 0x800f19 <now+0x4>
    bcd0:	1f 92       	push	r1
    bcd2:	8f 93       	push	r24
    bcd4:	80 91 18 0f 	lds	r24, 0x0F18	; 0x800f18 <now+0x3>
    bcd8:	1f 92       	push	r1
    bcda:	8f 93       	push	r24
    bcdc:	87 e8       	ldi	r24, 0x87	; 135
    bcde:	93 e0       	ldi	r25, 0x03	; 3
    bce0:	9f 93       	push	r25
    bce2:	8f 93       	push	r24
    bce4:	3f 93       	push	r19
    bce6:	2f 93       	push	r18
    bce8:	0f 94 a6 1b 	call	0x2374c	; 0x2374c <sprintf>
    bcec:	0f b6       	in	r0, 0x3f	; 63
    bcee:	f8 94       	cli
    bcf0:	de bf       	out	0x3e, r29	; 62
    bcf2:	0f be       	out	0x3f, r0	; 63
    bcf4:	cd bf       	out	0x3d, r28	; 61
    bcf6:	70 e0       	ldi	r23, 0x00	; 0
    bcf8:	60 e0       	ldi	r22, 0x00	; 0
    bcfa:	88 eb       	ldi	r24, 0xB8	; 184
    bcfc:	9c e0       	ldi	r25, 0x0C	; 12
    bcfe:	0e 94 a9 bc 	call	0x17952	; 0x17952 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    bd02:	a7 01       	movw	r20, r14
    bd04:	4c 5e       	subi	r20, 0xEC	; 236
    bd06:	5f 4f       	sbci	r21, 0xFF	; 255
    bd08:	b8 01       	movw	r22, r16
    bd0a:	6c 5f       	subi	r22, 0xFC	; 252
    bd0c:	7f 4f       	sbci	r23, 0xFF	; 255
    bd0e:	c1 2c       	mov	r12, r1
    bd10:	ee 24       	eor	r14, r14
    bd12:	ea 94       	dec	r14
    bd14:	fe 2c       	mov	r15, r14
    bd16:	10 e0       	ldi	r17, 0x00	; 0
    bd18:	00 e0       	ldi	r16, 0x00	; 0
    bd1a:	28 e0       	ldi	r18, 0x08	; 8
    bd1c:	c5 01       	movw	r24, r10
    bd1e:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    bd22:	68 96       	adiw	r28, 0x18	; 24
    bd24:	0f b6       	in	r0, 0x3f	; 63
    bd26:	f8 94       	cli
    bd28:	de bf       	out	0x3e, r29	; 62
    bd2a:	0f be       	out	0x3f, r0	; 63
    bd2c:	cd bf       	out	0x3d, r28	; 61
    bd2e:	df 91       	pop	r29
    bd30:	cf 91       	pop	r28
    bd32:	1f 91       	pop	r17
    bd34:	0f 91       	pop	r16
    bd36:	ff 90       	pop	r15
    bd38:	ef 90       	pop	r14
    bd3a:	cf 90       	pop	r12
    bd3c:	bf 90       	pop	r11
    bd3e:	af 90       	pop	r10
    bd40:	08 95       	ret
    bd42:	68 e4       	ldi	r22, 0x48	; 72
    bd44:	73 e0       	ldi	r23, 0x03	; 3
    bd46:	c9 01       	movw	r24, r18
    bd48:	0f 94 67 1a 	call	0x234ce	; 0x234ce <strcpy>
    bd4c:	d4 cf       	rjmp	.-88     	; 0xbcf6 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x60>

0000bd4e <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>:
_Z27display_element_show_date_1jjjjjhPc():
    bd4e:	8f 92       	push	r8
    bd50:	9f 92       	push	r9
    bd52:	af 92       	push	r10
    bd54:	bf 92       	push	r11
    bd56:	cf 92       	push	r12
    bd58:	ef 92       	push	r14
    bd5a:	ff 92       	push	r15
    bd5c:	0f 93       	push	r16
    bd5e:	1f 93       	push	r17
    bd60:	cf 93       	push	r28
    bd62:	df 93       	push	r29
    bd64:	cd b7       	in	r28, 0x3d	; 61
    bd66:	de b7       	in	r29, 0x3e	; 62
    bd68:	60 97       	sbiw	r28, 0x10	; 16
    bd6a:	0f b6       	in	r0, 0x3f	; 63
    bd6c:	f8 94       	cli
    bd6e:	de bf       	out	0x3e, r29	; 62
    bd70:	0f be       	out	0x3f, r0	; 63
    bd72:	cd bf       	out	0x3d, r28	; 61
    bd74:	4c 01       	movw	r8, r24
    bd76:	8b 01       	movw	r16, r22
_Z14selftest_get_0h():
    bd78:	80 91 60 0b 	lds	r24, 0x0B60	; 0x800b60 <selftest_data>
    bd7c:	9e 01       	movw	r18, r28
    bd7e:	2f 5f       	subi	r18, 0xFF	; 255
    bd80:	3f 4f       	sbci	r19, 0xFF	; 255
    bd82:	59 01       	movw	r10, r18
_Z27display_element_show_date_1jjjjjhPc():
    bd84:	80 fd       	sbrc	r24, 0
    bd86:	54 c0       	rjmp	.+168    	; 0xbe30 <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0xe2>
_ZNK8DateTime4yearEv():
    bd88:	80 91 15 0f 	lds	r24, 0x0F15	; 0x800f15 <now>
    bd8c:	90 e0       	ldi	r25, 0x00	; 0
    bd8e:	80 53       	subi	r24, 0x30	; 48
    bd90:	98 4f       	sbci	r25, 0xF8	; 248
_Z27display_element_show_date_1jjjjjhPc():
    bd92:	9f 93       	push	r25
    bd94:	8f 93       	push	r24
    bd96:	80 91 16 0f 	lds	r24, 0x0F16	; 0x800f16 <now+0x1>
    bd9a:	1f 92       	push	r1
    bd9c:	8f 93       	push	r24
    bd9e:	80 91 17 0f 	lds	r24, 0x0F17	; 0x800f17 <now+0x2>
    bda2:	1f 92       	push	r1
    bda4:	8f 93       	push	r24
    bda6:	8b e1       	ldi	r24, 0x1B	; 27
    bda8:	93 e0       	ldi	r25, 0x03	; 3
    bdaa:	9f 93       	push	r25
    bdac:	8f 93       	push	r24
    bdae:	3f 93       	push	r19
    bdb0:	2f 93       	push	r18
    bdb2:	0f 94 a6 1b 	call	0x2374c	; 0x2374c <sprintf>
    bdb6:	0f b6       	in	r0, 0x3f	; 63
    bdb8:	f8 94       	cli
    bdba:	de bf       	out	0x3e, r29	; 62
    bdbc:	0f be       	out	0x3f, r0	; 63
    bdbe:	cd bf       	out	0x3d, r28	; 61
    bdc0:	6f ef       	ldi	r22, 0xFF	; 255
    bdc2:	7f ef       	ldi	r23, 0xFF	; 255
    bdc4:	88 eb       	ldi	r24, 0xB8	; 184
    bdc6:	9c e0       	ldi	r25, 0x0C	; 12
    bdc8:	0e 94 a9 bc 	call	0x17952	; 0x17952 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    bdcc:	2e e8       	ldi	r18, 0x8E	; 142
    bdce:	30 e0       	ldi	r19, 0x00	; 0
    bdd0:	a8 01       	movw	r20, r16
    bdd2:	b4 01       	movw	r22, r8
    bdd4:	88 eb       	ldi	r24, 0xB8	; 184
    bdd6:	9c e0       	ldi	r25, 0x0C	; 12
    bdd8:	0e 94 f3 bc 	call	0x179e6	; 0x179e6 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int)>
    bddc:	a8 01       	movw	r20, r16
    bdde:	4f 5f       	subi	r20, 0xFF	; 255
    bde0:	5f 4f       	sbci	r21, 0xFF	; 255
    bde2:	2e e8       	ldi	r18, 0x8E	; 142
    bde4:	30 e0       	ldi	r19, 0x00	; 0
    bde6:	b4 01       	movw	r22, r8
    bde8:	88 eb       	ldi	r24, 0xB8	; 184
    bdea:	9c e0       	ldi	r25, 0x0C	; 12
    bdec:	0e 94 f3 bc 	call	0x179e6	; 0x179e6 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int)>
    bdf0:	a8 01       	movw	r20, r16
    bdf2:	4e 5f       	subi	r20, 0xFE	; 254
    bdf4:	5f 4f       	sbci	r21, 0xFF	; 255
    bdf6:	c1 2c       	mov	r12, r1
    bdf8:	ee 24       	eor	r14, r14
    bdfa:	ea 94       	dec	r14
    bdfc:	fe 2c       	mov	r15, r14
    bdfe:	10 e0       	ldi	r17, 0x00	; 0
    be00:	00 e0       	ldi	r16, 0x00	; 0
    be02:	23 e0       	ldi	r18, 0x03	; 3
    be04:	b4 01       	movw	r22, r8
    be06:	c5 01       	movw	r24, r10
    be08:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    be0c:	60 96       	adiw	r28, 0x10	; 16
    be0e:	0f b6       	in	r0, 0x3f	; 63
    be10:	f8 94       	cli
    be12:	de bf       	out	0x3e, r29	; 62
    be14:	0f be       	out	0x3f, r0	; 63
    be16:	cd bf       	out	0x3d, r28	; 61
    be18:	df 91       	pop	r29
    be1a:	cf 91       	pop	r28
    be1c:	1f 91       	pop	r17
    be1e:	0f 91       	pop	r16
    be20:	ff 90       	pop	r15
    be22:	ef 90       	pop	r14
    be24:	cf 90       	pop	r12
    be26:	bf 90       	pop	r11
    be28:	af 90       	pop	r10
    be2a:	9f 90       	pop	r9
    be2c:	8f 90       	pop	r8
    be2e:	08 95       	ret
    be30:	62 ef       	ldi	r22, 0xF2	; 242
    be32:	7c e7       	ldi	r23, 0x7C	; 124
    be34:	c9 01       	movw	r24, r18
    be36:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    be3a:	c2 cf       	rjmp	.-124    	; 0xbdc0 <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x72>

0000be3c <display_element_show_about_device(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>:
_Z33display_element_show_about_devicejjjjjhPc():
    be3c:	6f 92       	push	r6
    be3e:	7f 92       	push	r7
    be40:	8f 92       	push	r8
    be42:	9f 92       	push	r9
    be44:	af 92       	push	r10
    be46:	bf 92       	push	r11
    be48:	cf 92       	push	r12
    be4a:	ef 92       	push	r14
    be4c:	ff 92       	push	r15
    be4e:	0f 93       	push	r16
    be50:	1f 93       	push	r17
    be52:	cf 93       	push	r28
    be54:	df 93       	push	r29
    be56:	cd b7       	in	r28, 0x3d	; 61
    be58:	de b7       	in	r29, 0x3e	; 62
    be5a:	ed 97       	sbiw	r28, 0x3d	; 61
    be5c:	0f b6       	in	r0, 0x3f	; 63
    be5e:	f8 94       	cli
    be60:	de bf       	out	0x3e, r29	; 62
    be62:	0f be       	out	0x3f, r0	; 63
    be64:	cd bf       	out	0x3d, r28	; 61
    be66:	4c 01       	movw	r8, r24
    be68:	3b 01       	movw	r6, r22
    be6a:	40 e0       	ldi	r20, 0x00	; 0
    be6c:	50 e0       	ldi	r21, 0x00	; 0
    be6e:	ba 01       	movw	r22, r20
    be70:	ce 01       	movw	r24, r28
    be72:	c7 96       	adiw	r24, 0x37	; 55
    be74:	0e 94 99 e5 	call	0x1cb32	; 0x1cb32 <DateTime::DateTime(unsigned long)>
    be78:	68 e9       	ldi	r22, 0x98	; 152
    be7a:	7d e7       	ldi	r23, 0x7D	; 125
    be7c:	ce 01       	movw	r24, r28
    be7e:	01 96       	adiw	r24, 0x01	; 1
    be80:	5c 01       	movw	r10, r24
    be82:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
_Z15prepocet_napetijh():
    be86:	80 91 5a 0b 	lds	r24, 0x0B5A	; 0x800b5a <dvanact>
    be8a:	90 91 5b 0b 	lds	r25, 0x0B5B	; 0x800b5b <dvanact+0x1>
    be8e:	29 e3       	ldi	r18, 0x39	; 57
    be90:	28 9f       	mul	r18, r24
    be92:	b0 01       	movw	r22, r0
    be94:	29 9f       	mul	r18, r25
    be96:	70 0d       	add	r23, r0
    be98:	11 24       	eor	r1, r1
    be9a:	90 e0       	ldi	r25, 0x00	; 0
    be9c:	80 e0       	ldi	r24, 0x00	; 0
    be9e:	0f 94 f5 14 	call	0x229ea	; 0x229ea <__floatunsisf>
    bea2:	20 e0       	ldi	r18, 0x00	; 0
    bea4:	30 e0       	ldi	r19, 0x00	; 0
    bea6:	4a e7       	ldi	r20, 0x7A	; 122
    bea8:	54 e4       	ldi	r21, 0x44	; 68
    beaa:	0f 94 4d 14 	call	0x2289a	; 0x2289a <__divsf3>
_Z33display_element_show_about_devicejjjjjhPc():
    beae:	8e 01       	movw	r16, r28
    beb0:	0f 5d       	subi	r16, 0xDF	; 223
    beb2:	1f 4f       	sbci	r17, 0xFF	; 255
    beb4:	22 e0       	ldi	r18, 0x02	; 2
    beb6:	44 e0       	ldi	r20, 0x04	; 4
    beb8:	0f 94 c0 16 	call	0x22d80	; 0x22d80 <dtostrf>
    bebc:	b8 01       	movw	r22, r16
    bebe:	c5 01       	movw	r24, r10
    bec0:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    bec4:	6a e5       	ldi	r22, 0x5A	; 90
    bec6:	75 e0       	ldi	r23, 0x05	; 5
    bec8:	c5 01       	movw	r24, r10
    beca:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    bece:	95 e0       	ldi	r25, 0x05	; 5
    bed0:	89 0e       	add	r8, r25
    bed2:	91 1c       	adc	r9, r1
    bed4:	a3 01       	movw	r20, r6
    bed6:	46 5f       	subi	r20, 0xF6	; 246
    bed8:	5f 4f       	sbci	r21, 0xFF	; 255
    beda:	c1 2c       	mov	r12, r1
    bedc:	ee 24       	eor	r14, r14
    bede:	ea 94       	dec	r14
    bee0:	fe 2c       	mov	r15, r14
    bee2:	10 e0       	ldi	r17, 0x00	; 0
    bee4:	00 e0       	ldi	r16, 0x00	; 0
    bee6:	21 e0       	ldi	r18, 0x01	; 1
    bee8:	b4 01       	movw	r22, r8
    beea:	c5 01       	movw	r24, r10
    beec:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    bef0:	64 e8       	ldi	r22, 0x84	; 132
    bef2:	7d e7       	ldi	r23, 0x7D	; 125
    bef4:	c5 01       	movw	r24, r10
    bef6:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    befa:	60 e9       	ldi	r22, 0x90	; 144
    befc:	78 e0       	ldi	r23, 0x08	; 8
    befe:	c5 01       	movw	r24, r10
    bf00:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
_Z15prepocet_napetijh():
    bf04:	60 91 5c 0b 	lds	r22, 0x0B5C	; 0x800b5c <petnula>
    bf08:	70 91 5d 0b 	lds	r23, 0x0B5D	; 0x800b5d <petnula+0x1>
    bf0c:	93 e0       	ldi	r25, 0x03	; 3
    bf0e:	66 0f       	add	r22, r22
    bf10:	77 1f       	adc	r23, r23
    bf12:	9a 95       	dec	r25
    bf14:	e1 f7       	brne	.-8      	; 0xbf0e <display_element_show_about_device(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0xd2>
    bf16:	90 e0       	ldi	r25, 0x00	; 0
    bf18:	80 e0       	ldi	r24, 0x00	; 0
    bf1a:	0f 94 f5 14 	call	0x229ea	; 0x229ea <__floatunsisf>
    bf1e:	20 e0       	ldi	r18, 0x00	; 0
    bf20:	30 e0       	ldi	r19, 0x00	; 0
    bf22:	4a e7       	ldi	r20, 0x7A	; 122
    bf24:	54 e4       	ldi	r21, 0x44	; 68
    bf26:	0f 94 4d 14 	call	0x2289a	; 0x2289a <__divsf3>
_Z33display_element_show_about_devicejjjjjhPc():
    bf2a:	8e 01       	movw	r16, r28
    bf2c:	0f 5d       	subi	r16, 0xDF	; 223
    bf2e:	1f 4f       	sbci	r17, 0xFF	; 255
    bf30:	22 e0       	ldi	r18, 0x02	; 2
    bf32:	44 e0       	ldi	r20, 0x04	; 4
    bf34:	0f 94 c0 16 	call	0x22d80	; 0x22d80 <dtostrf>
    bf38:	b8 01       	movw	r22, r16
    bf3a:	c5 01       	movw	r24, r10
    bf3c:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    bf40:	6a e5       	ldi	r22, 0x5A	; 90
    bf42:	75 e0       	ldi	r23, 0x05	; 5
    bf44:	c5 01       	movw	r24, r10
    bf46:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    bf4a:	a3 01       	movw	r20, r6
    bf4c:	47 5e       	subi	r20, 0xE7	; 231
    bf4e:	5f 4f       	sbci	r21, 0xFF	; 255
    bf50:	10 e0       	ldi	r17, 0x00	; 0
    bf52:	00 e0       	ldi	r16, 0x00	; 0
    bf54:	21 e0       	ldi	r18, 0x01	; 1
    bf56:	b4 01       	movw	r22, r8
    bf58:	c5 01       	movw	r24, r10
    bf5a:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    bf5e:	60 e7       	ldi	r22, 0x70	; 112
    bf60:	7d e7       	ldi	r23, 0x7D	; 125
    bf62:	c5 01       	movw	r24, r10
    bf64:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
_Z15prepocet_napetijh():
    bf68:	80 91 5e 0b 	lds	r24, 0x0B5E	; 0x800b5e <tritri>
    bf6c:	90 91 5f 0b 	lds	r25, 0x0B5F	; 0x800b5f <tritri+0x1>
    bf70:	25 e0       	ldi	r18, 0x05	; 5
    bf72:	28 9f       	mul	r18, r24
    bf74:	b0 01       	movw	r22, r0
    bf76:	29 9f       	mul	r18, r25
    bf78:	70 0d       	add	r23, r0
    bf7a:	11 24       	eor	r1, r1
    bf7c:	90 e0       	ldi	r25, 0x00	; 0
    bf7e:	80 e0       	ldi	r24, 0x00	; 0
    bf80:	0f 94 f5 14 	call	0x229ea	; 0x229ea <__floatunsisf>
    bf84:	20 e0       	ldi	r18, 0x00	; 0
    bf86:	30 e0       	ldi	r19, 0x00	; 0
    bf88:	4a e7       	ldi	r20, 0x7A	; 122
    bf8a:	54 e4       	ldi	r21, 0x44	; 68
    bf8c:	0f 94 4d 14 	call	0x2289a	; 0x2289a <__divsf3>
_Z33display_element_show_about_devicejjjjjhPc():
    bf90:	8e 01       	movw	r16, r28
    bf92:	0f 5d       	subi	r16, 0xDF	; 223
    bf94:	1f 4f       	sbci	r17, 0xFF	; 255
    bf96:	22 e0       	ldi	r18, 0x02	; 2
    bf98:	44 e0       	ldi	r20, 0x04	; 4
    bf9a:	0f 94 c0 16 	call	0x22d80	; 0x22d80 <dtostrf>
    bf9e:	b8 01       	movw	r22, r16
    bfa0:	c5 01       	movw	r24, r10
    bfa2:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    bfa6:	6a e5       	ldi	r22, 0x5A	; 90
    bfa8:	75 e0       	ldi	r23, 0x05	; 5
    bfaa:	c5 01       	movw	r24, r10
    bfac:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    bfb0:	a3 01       	movw	r20, r6
    bfb2:	48 5d       	subi	r20, 0xD8	; 216
    bfb4:	5f 4f       	sbci	r21, 0xFF	; 255
    bfb6:	10 e0       	ldi	r17, 0x00	; 0
    bfb8:	00 e0       	ldi	r16, 0x00	; 0
    bfba:	21 e0       	ldi	r18, 0x01	; 1
    bfbc:	b4 01       	movw	r22, r8
    bfbe:	c5 01       	movw	r24, r10
    bfc0:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    bfc4:	61 e6       	ldi	r22, 0x61	; 97
    bfc6:	7d e7       	ldi	r23, 0x7D	; 125
    bfc8:	c5 01       	movw	r24, r10
    bfca:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
_Z15prepocet_prouduj():
    bfce:	60 91 58 0b 	lds	r22, 0x0B58	; 0x800b58 <proud>
    bfd2:	70 91 59 0b 	lds	r23, 0x0B59	; 0x800b59 <proud+0x1>
    bfd6:	90 e0       	ldi	r25, 0x00	; 0
    bfd8:	80 e0       	ldi	r24, 0x00	; 0
    bfda:	0f 94 f5 14 	call	0x229ea	; 0x229ea <__floatunsisf>
_Z33display_element_show_about_devicejjjjjhPc():
    bfde:	8e 01       	movw	r16, r28
    bfe0:	0f 5d       	subi	r16, 0xDF	; 223
    bfe2:	1f 4f       	sbci	r17, 0xFF	; 255
    bfe4:	22 e0       	ldi	r18, 0x02	; 2
    bfe6:	44 e0       	ldi	r20, 0x04	; 4
    bfe8:	0f 94 c0 16 	call	0x22d80	; 0x22d80 <dtostrf>
    bfec:	b8 01       	movw	r22, r16
    bfee:	c5 01       	movw	r24, r10
    bff0:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    bff4:	6e e4       	ldi	r22, 0x4E	; 78
    bff6:	73 e0       	ldi	r23, 0x03	; 3
    bff8:	c5 01       	movw	r24, r10
    bffa:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    bffe:	a3 01       	movw	r20, r6
    c000:	49 5c       	subi	r20, 0xC9	; 201
    c002:	5f 4f       	sbci	r21, 0xFF	; 255
    c004:	10 e0       	ldi	r17, 0x00	; 0
    c006:	00 e0       	ldi	r16, 0x00	; 0
    c008:	21 e0       	ldi	r18, 0x01	; 1
    c00a:	b4 01       	movw	r22, r8
    c00c:	c5 01       	movw	r24, r10
    c00e:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    c012:	6f e4       	ldi	r22, 0x4F	; 79
    c014:	7d e7       	ldi	r23, 0x7D	; 125
    c016:	c5 01       	movw	r24, r10
    c018:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    c01c:	60 91 19 0b 	lds	r22, 0x0B19	; 0x800b19 <internal_temp>
    c020:	70 91 1a 0b 	lds	r23, 0x0B1A	; 0x800b1a <internal_temp+0x1>
    c024:	80 91 1b 0b 	lds	r24, 0x0B1B	; 0x800b1b <internal_temp+0x2>
    c028:	90 91 1c 0b 	lds	r25, 0x0B1C	; 0x800b1c <internal_temp+0x3>
    c02c:	8e 01       	movw	r16, r28
    c02e:	0f 5d       	subi	r16, 0xDF	; 223
    c030:	1f 4f       	sbci	r17, 0xFF	; 255
    c032:	22 e0       	ldi	r18, 0x02	; 2
    c034:	44 e0       	ldi	r20, 0x04	; 4
    c036:	0f 94 c0 16 	call	0x22d80	; 0x22d80 <dtostrf>
    c03a:	b8 01       	movw	r22, r16
    c03c:	c5 01       	movw	r24, r10
    c03e:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    c042:	68 e2       	ldi	r22, 0x28	; 40
    c044:	76 e0       	ldi	r23, 0x06	; 6
    c046:	c5 01       	movw	r24, r10
    c048:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    c04c:	a3 01       	movw	r20, r6
    c04e:	4a 5b       	subi	r20, 0xBA	; 186
    c050:	5f 4f       	sbci	r21, 0xFF	; 255
    c052:	10 e0       	ldi	r17, 0x00	; 0
    c054:	00 e0       	ldi	r16, 0x00	; 0
    c056:	21 e0       	ldi	r18, 0x01	; 1
    c058:	b4 01       	movw	r22, r8
    c05a:	c5 01       	movw	r24, r10
    c05c:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    c060:	63 e4       	ldi	r22, 0x43	; 67
    c062:	7d e7       	ldi	r23, 0x7D	; 125
    c064:	c5 01       	movw	r24, r10
    c066:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    c06a:	80 91 60 0b 	lds	r24, 0x0B60	; 0x800b60 <selftest_data>
itoa():
    c06e:	40 e1       	ldi	r20, 0x10	; 16
    c070:	be 01       	movw	r22, r28
    c072:	6f 5d       	subi	r22, 0xDF	; 223
    c074:	7f 4f       	sbci	r23, 0xFF	; 255
    c076:	90 e0       	ldi	r25, 0x00	; 0
    c078:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z33display_element_show_about_devicejjjjjhPc():
    c07c:	be 01       	movw	r22, r28
    c07e:	6f 5d       	subi	r22, 0xDF	; 223
    c080:	7f 4f       	sbci	r23, 0xFF	; 255
    c082:	c5 01       	movw	r24, r10
    c084:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    c088:	a3 01       	movw	r20, r6
    c08a:	4b 5a       	subi	r20, 0xAB	; 171
    c08c:	5f 4f       	sbci	r21, 0xFF	; 255
    c08e:	21 e0       	ldi	r18, 0x01	; 1
    c090:	b4 01       	movw	r22, r8
    c092:	c5 01       	movw	r24, r10
    c094:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    c098:	61 e3       	ldi	r22, 0x31	; 49
    c09a:	7d e7       	ldi	r23, 0x7D	; 125
    c09c:	c5 01       	movw	r24, r10
    c09e:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
itoa():
    c0a2:	4a e0       	ldi	r20, 0x0A	; 10
    c0a4:	be 01       	movw	r22, r28
    c0a6:	6f 5d       	subi	r22, 0xDF	; 223
    c0a8:	7f 4f       	sbci	r23, 0xFF	; 255
    c0aa:	80 91 b4 0f 	lds	r24, 0x0FB4	; 0x800fb4 <mqtt_send_message>
    c0ae:	90 91 b5 0f 	lds	r25, 0x0FB5	; 0x800fb5 <mqtt_send_message+0x1>
    c0b2:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z33display_element_show_about_devicejjjjjhPc():
    c0b6:	be 01       	movw	r22, r28
    c0b8:	6f 5d       	subi	r22, 0xDF	; 223
    c0ba:	7f 4f       	sbci	r23, 0xFF	; 255
    c0bc:	c5 01       	movw	r24, r10
    c0be:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    c0c2:	a3 01       	movw	r20, r6
    c0c4:	4c 59       	subi	r20, 0x9C	; 156
    c0c6:	5f 4f       	sbci	r21, 0xFF	; 255
    c0c8:	21 e0       	ldi	r18, 0x01	; 1
    c0ca:	b4 01       	movw	r22, r8
    c0cc:	c5 01       	movw	r24, r10
    c0ce:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    c0d2:	60 e2       	ldi	r22, 0x20	; 32
    c0d4:	7d e7       	ldi	r23, 0x7D	; 125
    c0d6:	c5 01       	movw	r24, r10
    c0d8:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
itoa():
    c0dc:	4a e0       	ldi	r20, 0x0A	; 10
    c0de:	be 01       	movw	r22, r28
    c0e0:	6f 5d       	subi	r22, 0xDF	; 223
    c0e2:	7f 4f       	sbci	r23, 0xFF	; 255
    c0e4:	80 91 b0 0f 	lds	r24, 0x0FB0	; 0x800fb0 <mqtt_receive_message>
    c0e8:	90 91 b1 0f 	lds	r25, 0x0FB1	; 0x800fb1 <mqtt_receive_message+0x1>
    c0ec:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z33display_element_show_about_devicejjjjjhPc():
    c0f0:	be 01       	movw	r22, r28
    c0f2:	6f 5d       	subi	r22, 0xDF	; 223
    c0f4:	7f 4f       	sbci	r23, 0xFF	; 255
    c0f6:	c5 01       	movw	r24, r10
    c0f8:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    c0fc:	a3 01       	movw	r20, r6
    c0fe:	4d 58       	subi	r20, 0x8D	; 141
    c100:	5f 4f       	sbci	r21, 0xFF	; 255
    c102:	21 e0       	ldi	r18, 0x01	; 1
    c104:	b4 01       	movw	r22, r8
    c106:	c5 01       	movw	r24, r10
    c108:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    c10c:	6c e0       	ldi	r22, 0x0C	; 12
    c10e:	7d e7       	ldi	r23, 0x7D	; 125
    c110:	c5 01       	movw	r24, r10
    c112:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
itoa():
    c116:	4a e0       	ldi	r20, 0x0A	; 10
    c118:	be 01       	movw	r22, r28
    c11a:	6f 5d       	subi	r22, 0xDF	; 223
    c11c:	7f 4f       	sbci	r23, 0xFF	; 255
    c11e:	80 91 ae 0f 	lds	r24, 0x0FAE	; 0x800fae <mqtt_process_message>
    c122:	90 91 af 0f 	lds	r25, 0x0FAF	; 0x800faf <mqtt_process_message+0x1>
    c126:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z33display_element_show_about_devicejjjjjhPc():
    c12a:	be 01       	movw	r22, r28
    c12c:	6f 5d       	subi	r22, 0xDF	; 223
    c12e:	7f 4f       	sbci	r23, 0xFF	; 255
    c130:	c5 01       	movw	r24, r10
    c132:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    c136:	a3 01       	movw	r20, r6
    c138:	4e 57       	subi	r20, 0x7E	; 126
    c13a:	5f 4f       	sbci	r21, 0xFF	; 255
    c13c:	21 e0       	ldi	r18, 0x01	; 1
    c13e:	b4 01       	movw	r22, r8
    c140:	c5 01       	movw	r24, r10
    c142:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    c146:	6d ef       	ldi	r22, 0xFD	; 253
    c148:	7c e7       	ldi	r23, 0x7C	; 124
    c14a:	c5 01       	movw	r24, r10
    c14c:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
itoa():
    c150:	4a e0       	ldi	r20, 0x0A	; 10
    c152:	be 01       	movw	r22, r28
    c154:	6f 5d       	subi	r22, 0xDF	; 223
    c156:	7f 4f       	sbci	r23, 0xFF	; 255
    c158:	80 91 08 10 	lds	r24, 0x1008	; 0x801008 <mqtt_error>
    c15c:	90 91 09 10 	lds	r25, 0x1009	; 0x801009 <mqtt_error+0x1>
    c160:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z33display_element_show_about_devicejjjjjhPc():
    c164:	be 01       	movw	r22, r28
    c166:	6f 5d       	subi	r22, 0xDF	; 223
    c168:	7f 4f       	sbci	r23, 0xFF	; 255
    c16a:	c5 01       	movw	r24, r10
    c16c:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    c170:	a3 01       	movw	r20, r6
    c172:	4f 56       	subi	r20, 0x6F	; 111
    c174:	5f 4f       	sbci	r21, 0xFF	; 255
    c176:	21 e0       	ldi	r18, 0x01	; 1
    c178:	b4 01       	movw	r22, r8
    c17a:	c5 01       	movw	r24, r10
    c17c:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    c180:	41 e5       	ldi	r20, 0x51	; 81
    c182:	53 e0       	ldi	r21, 0x03	; 3
    c184:	6a e5       	ldi	r22, 0x5A	; 90
    c186:	73 e0       	ldi	r23, 0x03	; 3
    c188:	ce 01       	movw	r24, r28
    c18a:	c0 96       	adiw	r24, 0x30	; 48
    c18c:	0e 94 2a e6 	call	0x1cc54	; 0x1cc54 <DateTime::DateTime(char const*, char const*)>
    c190:	ce 01       	movw	r24, r28
    c192:	c0 96       	adiw	r24, 0x30	; 48
    c194:	0e 94 a7 e6 	call	0x1cd4e	; 0x1cd4e <DateTime::unixtime() const>
    c198:	ab 01       	movw	r20, r22
    c19a:	bc 01       	movw	r22, r24
    c19c:	ce 01       	movw	r24, r28
    c19e:	89 96       	adiw	r24, 0x29	; 41
    c1a0:	0e 94 99 e5 	call	0x1cb32	; 0x1cb32 <DateTime::DateTime(unsigned long)>
    c1a4:	87 e0       	ldi	r24, 0x07	; 7
    c1a6:	fe 01       	movw	r30, r28
    c1a8:	b9 96       	adiw	r30, 0x29	; 41
    c1aa:	de 01       	movw	r26, r28
    c1ac:	d7 96       	adiw	r26, 0x37	; 55
    c1ae:	01 90       	ld	r0, Z+
    c1b0:	0d 92       	st	X+, r0
    c1b2:	8a 95       	dec	r24
    c1b4:	e1 f7       	brne	.-8      	; 0xc1ae <display_element_show_about_device(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x372>
    c1b6:	8c ad       	ldd	r24, Y+60	; 0x3c
    c1b8:	1f 92       	push	r1
    c1ba:	8f 93       	push	r24
    c1bc:	8b ad       	ldd	r24, Y+59	; 0x3b
    c1be:	1f 92       	push	r1
    c1c0:	8f 93       	push	r24
    c1c2:	8a ad       	ldd	r24, Y+58	; 0x3a
    c1c4:	1f 92       	push	r1
    c1c6:	8f 93       	push	r24
    c1c8:	89 ad       	ldd	r24, Y+57	; 0x39
    c1ca:	1f 92       	push	r1
    c1cc:	8f 93       	push	r24
    c1ce:	88 ad       	ldd	r24, Y+56	; 0x38
    c1d0:	1f 92       	push	r1
    c1d2:	8f 93       	push	r24
_ZNK8DateTime4yearEv():
    c1d4:	8f a9       	ldd	r24, Y+55	; 0x37
    c1d6:	90 e0       	ldi	r25, 0x00	; 0
    c1d8:	80 53       	subi	r24, 0x30	; 48
    c1da:	98 4f       	sbci	r25, 0xF8	; 248
_Z33display_element_show_about_devicejjjjjhPc():
    c1dc:	9f 93       	push	r25
    c1de:	8f 93       	push	r24
    c1e0:	86 e6       	ldi	r24, 0x66	; 102
    c1e2:	93 e0       	ldi	r25, 0x03	; 3
    c1e4:	9f 93       	push	r25
    c1e6:	8f 93       	push	r24
    c1e8:	bf 92       	push	r11
    c1ea:	af 92       	push	r10
    c1ec:	0f 94 a6 1b 	call	0x2374c	; 0x2374c <sprintf>
    c1f0:	a3 01       	movw	r20, r6
    c1f2:	40 56       	subi	r20, 0x60	; 96
    c1f4:	5f 4f       	sbci	r21, 0xFF	; 255
    c1f6:	0f e1       	ldi	r16, 0x1F	; 31
    c1f8:	10 e0       	ldi	r17, 0x00	; 0
    c1fa:	21 e0       	ldi	r18, 0x01	; 1
    c1fc:	b4 01       	movw	r22, r8
    c1fe:	c5 01       	movw	r24, r10
    c200:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    c204:	0f b6       	in	r0, 0x3f	; 63
    c206:	f8 94       	cli
    c208:	de bf       	out	0x3e, r29	; 62
    c20a:	0f be       	out	0x3f, r0	; 63
    c20c:	cd bf       	out	0x3d, r28	; 61
    c20e:	ed 96       	adiw	r28, 0x3d	; 61
    c210:	0f b6       	in	r0, 0x3f	; 63
    c212:	f8 94       	cli
    c214:	de bf       	out	0x3e, r29	; 62
    c216:	0f be       	out	0x3f, r0	; 63
    c218:	cd bf       	out	0x3d, r28	; 61
    c21a:	df 91       	pop	r29
    c21c:	cf 91       	pop	r28
    c21e:	1f 91       	pop	r17
    c220:	0f 91       	pop	r16
    c222:	ff 90       	pop	r15
    c224:	ef 90       	pop	r14
    c226:	cf 90       	pop	r12
    c228:	bf 90       	pop	r11
    c22a:	af 90       	pop	r10
    c22c:	9f 90       	pop	r9
    c22e:	8f 90       	pop	r8
    c230:	7f 90       	pop	r7
    c232:	6f 90       	pop	r6
    c234:	08 95       	ret

0000c236 <ip2CharArray(IPAddress, char*)>:
_Z12ip2CharArray9IPAddressPc():
    c236:	fc 01       	movw	r30, r24
    c238:	85 81       	ldd	r24, Z+5	; 0x05
    c23a:	1f 92       	push	r1
    c23c:	8f 93       	push	r24
    c23e:	84 81       	ldd	r24, Z+4	; 0x04
    c240:	1f 92       	push	r1
    c242:	8f 93       	push	r24
    c244:	83 81       	ldd	r24, Z+3	; 0x03
    c246:	1f 92       	push	r1
    c248:	8f 93       	push	r24
    c24a:	82 81       	ldd	r24, Z+2	; 0x02
    c24c:	1f 92       	push	r1
    c24e:	8f 93       	push	r24
    c250:	8f e0       	ldi	r24, 0x0F	; 15
    c252:	93 e0       	ldi	r25, 0x03	; 3
    c254:	9f 93       	push	r25
    c256:	8f 93       	push	r24
    c258:	7f 93       	push	r23
    c25a:	6f 93       	push	r22
    c25c:	0f 94 a6 1b 	call	0x2374c	; 0x2374c <sprintf>
    c260:	8d b7       	in	r24, 0x3d	; 61
    c262:	9e b7       	in	r25, 0x3e	; 62
    c264:	0c 96       	adiw	r24, 0x0c	; 12
    c266:	0f b6       	in	r0, 0x3f	; 63
    c268:	f8 94       	cli
    c26a:	9e bf       	out	0x3e, r25	; 62
    c26c:	0f be       	out	0x3f, r0	; 63
    c26e:	8d bf       	out	0x3d, r24	; 61
    c270:	08 95       	ret

0000c272 <display_element_show_network_detail(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>:
_Z35display_element_show_network_detailjjjjjhPc():
    c272:	8f 92       	push	r8
    c274:	9f 92       	push	r9
    c276:	af 92       	push	r10
    c278:	bf 92       	push	r11
    c27a:	cf 92       	push	r12
    c27c:	ef 92       	push	r14
    c27e:	ff 92       	push	r15
    c280:	0f 93       	push	r16
    c282:	1f 93       	push	r17
    c284:	cf 93       	push	r28
    c286:	df 93       	push	r29
    c288:	cd b7       	in	r28, 0x3d	; 61
    c28a:	de b7       	in	r29, 0x3e	; 62
    c28c:	c2 54       	subi	r28, 0x42	; 66
    c28e:	d1 09       	sbc	r29, r1
    c290:	0f b6       	in	r0, 0x3f	; 63
    c292:	f8 94       	cli
    c294:	de bf       	out	0x3e, r29	; 62
    c296:	0f be       	out	0x3f, r0	; 63
    c298:	cd bf       	out	0x3d, r28	; 61
    c29a:	5c 01       	movw	r10, r24
    c29c:	4b 01       	movw	r8, r22
    c29e:	7a 01       	movw	r14, r20
    c2a0:	89 01       	movw	r16, r18
    c2a2:	70 e0       	ldi	r23, 0x00	; 0
    c2a4:	60 e0       	ldi	r22, 0x00	; 0
    c2a6:	88 eb       	ldi	r24, 0xB8	; 184
    c2a8:	9c e0       	ldi	r25, 0x0C	; 12
    c2aa:	0e 94 a9 bc 	call	0x17952	; 0x17952 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    c2ae:	08 0d       	add	r16, r8
    c2b0:	19 1d       	adc	r17, r9
    c2b2:	95 01       	movw	r18, r10
    c2b4:	2e 0d       	add	r18, r14
    c2b6:	3f 1d       	adc	r19, r15
    c2b8:	a4 01       	movw	r20, r8
    c2ba:	b5 01       	movw	r22, r10
    c2bc:	88 eb       	ldi	r24, 0xB8	; 184
    c2be:	9c e0       	ldi	r25, 0x0C	; 12
    c2c0:	0e 94 34 bd 	call	0x17a68	; 0x17a68 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    c2c4:	6b ef       	ldi	r22, 0xFB	; 251
    c2c6:	7e e7       	ldi	r23, 0x7E	; 126
    c2c8:	ce 01       	movw	r24, r28
    c2ca:	01 96       	adiw	r24, 0x01	; 1
    c2cc:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    c2d0:	60 e9       	ldi	r22, 0x90	; 144
    c2d2:	78 e0       	ldi	r23, 0x08	; 8
    c2d4:	ce 01       	movw	r24, r28
    c2d6:	01 96       	adiw	r24, 0x01	; 1
    c2d8:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    c2dc:	82 e0       	ldi	r24, 0x02	; 2
    c2de:	e8 2e       	mov	r14, r24
    c2e0:	00 e1       	ldi	r16, 0x10	; 16
    c2e2:	26 e0       	ldi	r18, 0x06	; 6
    c2e4:	46 eb       	ldi	r20, 0xB6	; 182
    c2e6:	5f e0       	ldi	r21, 0x0F	; 15
    c2e8:	6e e2       	ldi	r22, 0x2E	; 46
    c2ea:	ce 01       	movw	r24, r28
    c2ec:	85 96       	adiw	r24, 0x25	; 37
    c2ee:	0e 94 e9 e4 	call	0x1c9d2	; 0x1c9d2 <createString(char*, char, unsigned char*, unsigned char, unsigned char, unsigned char)>
    c2f2:	be 01       	movw	r22, r28
    c2f4:	6b 5d       	subi	r22, 0xDB	; 219
    c2f6:	7f 4f       	sbci	r23, 0xFF	; 255
    c2f8:	ce 01       	movw	r24, r28
    c2fa:	01 96       	adiw	r24, 0x01	; 1
    c2fc:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    c300:	85 e0       	ldi	r24, 0x05	; 5
    c302:	a8 0e       	add	r10, r24
    c304:	b1 1c       	adc	r11, r1
    c306:	a4 01       	movw	r20, r8
    c308:	46 5f       	subi	r20, 0xF6	; 246
    c30a:	5f 4f       	sbci	r21, 0xFF	; 255
    c30c:	c1 2c       	mov	r12, r1
    c30e:	ee 24       	eor	r14, r14
    c310:	ea 94       	dec	r14
    c312:	fe 2c       	mov	r15, r14
    c314:	10 e0       	ldi	r17, 0x00	; 0
    c316:	00 e0       	ldi	r16, 0x00	; 0
    c318:	21 e0       	ldi	r18, 0x01	; 1
    c31a:	b5 01       	movw	r22, r10
    c31c:	ce 01       	movw	r24, r28
    c31e:	01 96       	adiw	r24, 0x01	; 1
    c320:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    c324:	62 e3       	ldi	r22, 0x32	; 50
    c326:	7f e7       	ldi	r23, 0x7F	; 127
    c328:	ce 01       	movw	r24, r28
    c32a:	01 96       	adiw	r24, 0x01	; 1
    c32c:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    c330:	60 e9       	ldi	r22, 0x90	; 144
    c332:	78 e0       	ldi	r23, 0x08	; 8
    c334:	ce 01       	movw	r24, r28
    c336:	01 96       	adiw	r24, 0x01	; 1
    c338:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    c33c:	6c ec       	ldi	r22, 0xCC	; 204
    c33e:	7f e0       	ldi	r23, 0x0F	; 15
    c340:	ce 01       	movw	r24, r28
    c342:	01 96       	adiw	r24, 0x01	; 1
    c344:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    c348:	a4 01       	movw	r20, r8
    c34a:	47 5e       	subi	r20, 0xE7	; 231
    c34c:	5f 4f       	sbci	r21, 0xFF	; 255
    c34e:	21 e0       	ldi	r18, 0x01	; 1
    c350:	b5 01       	movw	r22, r10
    c352:	ce 01       	movw	r24, r28
    c354:	01 96       	adiw	r24, 0x01	; 1
    c356:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    c35a:	6c eb       	ldi	r22, 0xBC	; 188
    c35c:	7f e0       	ldi	r23, 0x0F	; 15
    c35e:	ce 01       	movw	r24, r28
    c360:	cd 96       	adiw	r24, 0x3d	; 61
    c362:	0f 94 86 12 	call	0x2250c	; 0x2250c <IPAddress::IPAddress(unsigned char const*)>
    c366:	be 01       	movw	r22, r28
    c368:	6b 5d       	subi	r22, 0xDB	; 219
    c36a:	7f 4f       	sbci	r23, 0xFF	; 255
    c36c:	ce 01       	movw	r24, r28
    c36e:	cd 96       	adiw	r24, 0x3d	; 61
    c370:	0e 94 1b 61 	call	0xc236	; 0xc236 <ip2CharArray(IPAddress, char*)>
    c374:	68 e2       	ldi	r22, 0x28	; 40
    c376:	7f e7       	ldi	r23, 0x7F	; 127
    c378:	ce 01       	movw	r24, r28
    c37a:	01 96       	adiw	r24, 0x01	; 1
    c37c:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    c380:	60 e9       	ldi	r22, 0x90	; 144
    c382:	78 e0       	ldi	r23, 0x08	; 8
    c384:	ce 01       	movw	r24, r28
    c386:	01 96       	adiw	r24, 0x01	; 1
    c388:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    c38c:	be 01       	movw	r22, r28
    c38e:	6b 5d       	subi	r22, 0xDB	; 219
    c390:	7f 4f       	sbci	r23, 0xFF	; 255
    c392:	ce 01       	movw	r24, r28
    c394:	01 96       	adiw	r24, 0x01	; 1
    c396:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    c39a:	a4 01       	movw	r20, r8
    c39c:	49 5c       	subi	r20, 0xC9	; 201
    c39e:	5f 4f       	sbci	r21, 0xFF	; 255
    c3a0:	21 e0       	ldi	r18, 0x01	; 1
    c3a2:	b5 01       	movw	r22, r10
    c3a4:	ce 01       	movw	r24, r28
    c3a6:	01 96       	adiw	r24, 0x01	; 1
    c3a8:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    c3ac:	60 ec       	ldi	r22, 0xC0	; 192
    c3ae:	7f e0       	ldi	r23, 0x0F	; 15
    c3b0:	ce 01       	movw	r24, r28
    c3b2:	cd 96       	adiw	r24, 0x3d	; 61
    c3b4:	0f 94 86 12 	call	0x2250c	; 0x2250c <IPAddress::IPAddress(unsigned char const*)>
    c3b8:	be 01       	movw	r22, r28
    c3ba:	6b 5d       	subi	r22, 0xDB	; 219
    c3bc:	7f 4f       	sbci	r23, 0xFF	; 255
    c3be:	ce 01       	movw	r24, r28
    c3c0:	cd 96       	adiw	r24, 0x3d	; 61
    c3c2:	0e 94 1b 61 	call	0xc236	; 0xc236 <ip2CharArray(IPAddress, char*)>
    c3c6:	6f e1       	ldi	r22, 0x1F	; 31
    c3c8:	7f e7       	ldi	r23, 0x7F	; 127
    c3ca:	ce 01       	movw	r24, r28
    c3cc:	01 96       	adiw	r24, 0x01	; 1
    c3ce:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    c3d2:	60 e9       	ldi	r22, 0x90	; 144
    c3d4:	78 e0       	ldi	r23, 0x08	; 8
    c3d6:	ce 01       	movw	r24, r28
    c3d8:	01 96       	adiw	r24, 0x01	; 1
    c3da:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    c3de:	be 01       	movw	r22, r28
    c3e0:	6b 5d       	subi	r22, 0xDB	; 219
    c3e2:	7f 4f       	sbci	r23, 0xFF	; 255
    c3e4:	ce 01       	movw	r24, r28
    c3e6:	01 96       	adiw	r24, 0x01	; 1
    c3e8:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    c3ec:	a4 01       	movw	r20, r8
    c3ee:	4a 5b       	subi	r20, 0xBA	; 186
    c3f0:	5f 4f       	sbci	r21, 0xFF	; 255
    c3f2:	21 e0       	ldi	r18, 0x01	; 1
    c3f4:	b5 01       	movw	r22, r10
    c3f6:	ce 01       	movw	r24, r28
    c3f8:	01 96       	adiw	r24, 0x01	; 1
    c3fa:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    c3fe:	68 ec       	ldi	r22, 0xC8	; 200
    c400:	7f e0       	ldi	r23, 0x0F	; 15
    c402:	ce 01       	movw	r24, r28
    c404:	cd 96       	adiw	r24, 0x3d	; 61
    c406:	0f 94 86 12 	call	0x2250c	; 0x2250c <IPAddress::IPAddress(unsigned char const*)>
    c40a:	be 01       	movw	r22, r28
    c40c:	6b 5d       	subi	r22, 0xDB	; 219
    c40e:	7f 4f       	sbci	r23, 0xFF	; 255
    c410:	ce 01       	movw	r24, r28
    c412:	cd 96       	adiw	r24, 0x3d	; 61
    c414:	0e 94 1b 61 	call	0xc236	; 0xc236 <ip2CharArray(IPAddress, char*)>
    c418:	61 e1       	ldi	r22, 0x11	; 17
    c41a:	7f e7       	ldi	r23, 0x7F	; 127
    c41c:	ce 01       	movw	r24, r28
    c41e:	01 96       	adiw	r24, 0x01	; 1
    c420:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    c424:	60 e9       	ldi	r22, 0x90	; 144
    c426:	78 e0       	ldi	r23, 0x08	; 8
    c428:	ce 01       	movw	r24, r28
    c42a:	01 96       	adiw	r24, 0x01	; 1
    c42c:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    c430:	be 01       	movw	r22, r28
    c432:	6b 5d       	subi	r22, 0xDB	; 219
    c434:	7f 4f       	sbci	r23, 0xFF	; 255
    c436:	ce 01       	movw	r24, r28
    c438:	01 96       	adiw	r24, 0x01	; 1
    c43a:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    c43e:	a4 01       	movw	r20, r8
    c440:	4b 5a       	subi	r20, 0xAB	; 171
    c442:	5f 4f       	sbci	r21, 0xFF	; 255
    c444:	21 e0       	ldi	r18, 0x01	; 1
    c446:	b5 01       	movw	r22, r10
    c448:	ce 01       	movw	r24, r28
    c44a:	01 96       	adiw	r24, 0x01	; 1
    c44c:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    c450:	64 ec       	ldi	r22, 0xC4	; 196
    c452:	7f e0       	ldi	r23, 0x0F	; 15
    c454:	ce 01       	movw	r24, r28
    c456:	cd 96       	adiw	r24, 0x3d	; 61
    c458:	0f 94 86 12 	call	0x2250c	; 0x2250c <IPAddress::IPAddress(unsigned char const*)>
    c45c:	be 01       	movw	r22, r28
    c45e:	6b 5d       	subi	r22, 0xDB	; 219
    c460:	7f 4f       	sbci	r23, 0xFF	; 255
    c462:	ce 01       	movw	r24, r28
    c464:	cd 96       	adiw	r24, 0x3d	; 61
    c466:	0e 94 1b 61 	call	0xc236	; 0xc236 <ip2CharArray(IPAddress, char*)>
    c46a:	66 e0       	ldi	r22, 0x06	; 6
    c46c:	7f e7       	ldi	r23, 0x7F	; 127
    c46e:	ce 01       	movw	r24, r28
    c470:	01 96       	adiw	r24, 0x01	; 1
    c472:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    c476:	60 e9       	ldi	r22, 0x90	; 144
    c478:	78 e0       	ldi	r23, 0x08	; 8
    c47a:	ce 01       	movw	r24, r28
    c47c:	01 96       	adiw	r24, 0x01	; 1
    c47e:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    c482:	be 01       	movw	r22, r28
    c484:	6b 5d       	subi	r22, 0xDB	; 219
    c486:	7f 4f       	sbci	r23, 0xFF	; 255
    c488:	ce 01       	movw	r24, r28
    c48a:	01 96       	adiw	r24, 0x01	; 1
    c48c:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    c490:	a4 01       	movw	r20, r8
    c492:	4c 59       	subi	r20, 0x9C	; 156
    c494:	5f 4f       	sbci	r21, 0xFF	; 255
    c496:	21 e0       	ldi	r18, 0x01	; 1
    c498:	b5 01       	movw	r22, r10
    c49a:	ce 01       	movw	r24, r28
    c49c:	01 96       	adiw	r24, 0x01	; 1
    c49e:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    c4a2:	ce 5b       	subi	r28, 0xBE	; 190
    c4a4:	df 4f       	sbci	r29, 0xFF	; 255
    c4a6:	0f b6       	in	r0, 0x3f	; 63
    c4a8:	f8 94       	cli
    c4aa:	de bf       	out	0x3e, r29	; 62
    c4ac:	0f be       	out	0x3f, r0	; 63
    c4ae:	cd bf       	out	0x3d, r28	; 61
    c4b0:	df 91       	pop	r29
    c4b2:	cf 91       	pop	r28
    c4b4:	1f 91       	pop	r17
    c4b6:	0f 91       	pop	r16
    c4b8:	ff 90       	pop	r15
    c4ba:	ef 90       	pop	r14
    c4bc:	cf 90       	pop	r12
    c4be:	bf 90       	pop	r11
    c4c0:	af 90       	pop	r10
    c4c2:	9f 90       	pop	r9
    c4c4:	8f 90       	pop	r8
    c4c6:	08 95       	ret

0000c4c8 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>:
_Z23remote_tds_get_completehPhPc():
    c4c8:	af 92       	push	r10
    c4ca:	bf 92       	push	r11
    c4cc:	cf 92       	push	r12
    c4ce:	df 92       	push	r13
    c4d0:	ef 92       	push	r14
    c4d2:	ff 92       	push	r15
    c4d4:	0f 93       	push	r16
    c4d6:	1f 93       	push	r17
    c4d8:	cf 93       	push	r28
    c4da:	df 93       	push	r29
    c4dc:	8a 30       	cpi	r24, 0x0A	; 10
    c4de:	88 f5       	brcc	.+98     	; 0xc542 <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x7a>
    c4e0:	7b 01       	movw	r14, r22
    c4e2:	94 e1       	ldi	r25, 0x14	; 20
    c4e4:	89 9f       	mul	r24, r25
    c4e6:	e0 01       	movw	r28, r0
    c4e8:	11 24       	eor	r1, r1
    c4ea:	6e 01       	movw	r12, r28
    c4ec:	e6 e5       	ldi	r30, 0x56	; 86
    c4ee:	ce 1a       	sub	r12, r30
    c4f0:	ea ef       	ldi	r30, 0xFA	; 250
    c4f2:	de 0a       	sbc	r13, r30
    c4f4:	8a 01       	movw	r16, r20
    c4f6:	5e 01       	movw	r10, r28
    c4f8:	f4 e4       	ldi	r31, 0x44	; 68
    c4fa:	af 1a       	sub	r10, r31
    c4fc:	fa ef       	ldi	r31, 0xFA	; 250
    c4fe:	bf 0a       	sbc	r11, r31
    c500:	c6 01       	movw	r24, r12
    c502:	0e 94 8e 51 	call	0xa31c	; 0xa31c <EEPROMClass::read(int) [clone .isra.8]>
    c506:	f8 01       	movw	r30, r16
    c508:	81 93       	st	Z+, r24
    c50a:	8f 01       	movw	r16, r30
    c50c:	10 82       	st	Z, r1
    c50e:	88 23       	and	r24, r24
    c510:	31 f0       	breq	.+12     	; 0xc51e <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x56>
    c512:	ff ef       	ldi	r31, 0xFF	; 255
    c514:	cf 1a       	sub	r12, r31
    c516:	df 0a       	sbc	r13, r31
    c518:	ca 14       	cp	r12, r10
    c51a:	db 04       	cpc	r13, r11
    c51c:	89 f7       	brne	.-30     	; 0xc500 <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x38>
    c51e:	ce 01       	movw	r24, r28
    c520:	83 54       	subi	r24, 0x43	; 67
    c522:	9a 4f       	sbci	r25, 0xFA	; 250
    c524:	0e 94 8e 51 	call	0xa31c	; 0xa31c <EEPROMClass::read(int) [clone .isra.8]>
    c528:	f7 01       	movw	r30, r14
    c52a:	80 83       	st	Z, r24
    c52c:	df 91       	pop	r29
    c52e:	cf 91       	pop	r28
    c530:	1f 91       	pop	r17
    c532:	0f 91       	pop	r16
    c534:	ff 90       	pop	r15
    c536:	ef 90       	pop	r14
    c538:	df 90       	pop	r13
    c53a:	cf 90       	pop	r12
    c53c:	bf 90       	pop	r11
    c53e:	af 90       	pop	r10
    c540:	08 95       	ret
    c542:	8f ef       	ldi	r24, 0xFF	; 255
    c544:	fb 01       	movw	r30, r22
    c546:	f1 cf       	rjmp	.-30     	; 0xc52a <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x62>

0000c548 <display_menu_rtds_update_name(unsigned int, unsigned int, unsigned char)>:
_Z29display_menu_rtds_update_namejjh():
    c548:	ff 92       	push	r15
    c54a:	0f 93       	push	r16
    c54c:	1f 93       	push	r17
    c54e:	cf 93       	push	r28
    c550:	df 93       	push	r29
    c552:	cd b7       	in	r28, 0x3d	; 61
    c554:	de b7       	in	r29, 0x3e	; 62
    c556:	63 97       	sbiw	r28, 0x13	; 19
    c558:	0f b6       	in	r0, 0x3f	; 63
    c55a:	f8 94       	cli
    c55c:	de bf       	out	0x3e, r29	; 62
    c55e:	0f be       	out	0x3f, r0	; 63
    c560:	cd bf       	out	0x3d, r28	; 61
    c562:	f6 2e       	mov	r15, r22
    c564:	ae 01       	movw	r20, r28
    c566:	4f 5f       	subi	r20, 0xFF	; 255
    c568:	5f 4f       	sbci	r21, 0xFF	; 255
    c56a:	be 01       	movw	r22, r28
    c56c:	6d 5e       	subi	r22, 0xED	; 237
    c56e:	7f 4f       	sbci	r23, 0xFF	; 255
    c570:	8f 2d       	mov	r24, r15
    c572:	0e 94 64 62 	call	0xc4c8	; 0xc4c8 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
    c576:	70 e0       	ldi	r23, 0x00	; 0
    c578:	60 e0       	ldi	r22, 0x00	; 0
    c57a:	87 e6       	ldi	r24, 0x67	; 103
    c57c:	90 e0       	ldi	r25, 0x00	; 0
    c57e:	0e 94 c1 54 	call	0xa982	; 0xa982 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.59]>
    c582:	04 e3       	ldi	r16, 0x34	; 52
    c584:	12 e5       	ldi	r17, 0x52	; 82
    c586:	23 ea       	ldi	r18, 0xA3	; 163
    c588:	34 e6       	ldi	r19, 0x64	; 100
    c58a:	4f 2d       	mov	r20, r15
    c58c:	62 e1       	ldi	r22, 0x12	; 18
    c58e:	ce 01       	movw	r24, r28
    c590:	01 96       	adiw	r24, 0x01	; 1
    c592:	0e 94 4c 56 	call	0xac98	; 0xac98 <display_element_set_string(char*, unsigned char, unsigned char, void (*)(unsigned int, unsigned int, unsigned char), unsigned char (*)())>
    c596:	63 96       	adiw	r28, 0x13	; 19
    c598:	0f b6       	in	r0, 0x3f	; 63
    c59a:	f8 94       	cli
    c59c:	de bf       	out	0x3e, r29	; 62
    c59e:	0f be       	out	0x3f, r0	; 63
    c5a0:	cd bf       	out	0x3d, r28	; 61
    c5a2:	df 91       	pop	r29
    c5a4:	cf 91       	pop	r28
    c5a6:	1f 91       	pop	r17
    c5a8:	0f 91       	pop	r16
    c5aa:	ff 90       	pop	r15
    c5ac:	08 95       	ret

0000c5ae <remote_tds_set_name(unsigned char, char*)>:
_Z19remote_tds_set_namehPc():
    c5ae:	df 92       	push	r13
    c5b0:	ef 92       	push	r14
    c5b2:	ff 92       	push	r15
    c5b4:	0f 93       	push	r16
    c5b6:	1f 93       	push	r17
    c5b8:	cf 93       	push	r28
    c5ba:	df 93       	push	r29
    c5bc:	8a 30       	cpi	r24, 0x0A	; 10
    c5be:	c0 f4       	brcc	.+48     	; 0xc5f0 <remote_tds_set_name(unsigned char, char*)+0x42>
    c5c0:	94 e1       	ldi	r25, 0x14	; 20
    c5c2:	89 9f       	mul	r24, r25
    c5c4:	e0 01       	movw	r28, r0
    c5c6:	11 24       	eor	r1, r1
    c5c8:	7b 01       	movw	r14, r22
    c5ca:	8e 01       	movw	r16, r28
    c5cc:	06 55       	subi	r16, 0x56	; 86
    c5ce:	1a 4f       	sbci	r17, 0xFA	; 250
    c5d0:	c4 54       	subi	r28, 0x44	; 68
    c5d2:	da 4f       	sbci	r29, 0xFA	; 250
    c5d4:	f7 01       	movw	r30, r14
    c5d6:	d1 90       	ld	r13, Z+
    c5d8:	7f 01       	movw	r14, r30
    c5da:	6d 2d       	mov	r22, r13
    c5dc:	c8 01       	movw	r24, r16
    c5de:	0e 94 90 51 	call	0xa320	; 0xa320 <EEPROMClass::write(int, unsigned char) [clone .isra.9]>
    c5e2:	dd 20       	and	r13, r13
    c5e4:	29 f0       	breq	.+10     	; 0xc5f0 <remote_tds_set_name(unsigned char, char*)+0x42>
    c5e6:	0f 5f       	subi	r16, 0xFF	; 255
    c5e8:	1f 4f       	sbci	r17, 0xFF	; 255
    c5ea:	0c 17       	cp	r16, r28
    c5ec:	1d 07       	cpc	r17, r29
    c5ee:	91 f7       	brne	.-28     	; 0xc5d4 <remote_tds_set_name(unsigned char, char*)+0x26>
    c5f0:	df 91       	pop	r29
    c5f2:	cf 91       	pop	r28
    c5f4:	1f 91       	pop	r17
    c5f6:	0f 91       	pop	r16
    c5f8:	ff 90       	pop	r15
    c5fa:	ef 90       	pop	r14
    c5fc:	df 90       	pop	r13
    c5fe:	08 95       	ret

0000c600 <remote_tds_get_active(unsigned char, unsigned char*)>:
_Z21remote_tds_get_activehPh():
    c600:	cf 93       	push	r28
    c602:	df 93       	push	r29
    c604:	8a 30       	cpi	r24, 0x0A	; 10
    c606:	68 f4       	brcc	.+26     	; 0xc622 <remote_tds_get_active(unsigned char, unsigned char*)+0x22>
    c608:	eb 01       	movw	r28, r22
    c60a:	24 e1       	ldi	r18, 0x14	; 20
    c60c:	82 9f       	mul	r24, r18
    c60e:	c0 01       	movw	r24, r0
    c610:	11 24       	eor	r1, r1
    c612:	83 54       	subi	r24, 0x43	; 67
    c614:	9a 4f       	sbci	r25, 0xFA	; 250
    c616:	0e 94 8e 51 	call	0xa31c	; 0xa31c <EEPROMClass::read(int) [clone .isra.8]>
    c61a:	88 83       	st	Y, r24
    c61c:	df 91       	pop	r29
    c61e:	cf 91       	pop	r28
    c620:	08 95       	ret
    c622:	8f ef       	ldi	r24, 0xFF	; 255
    c624:	fb 01       	movw	r30, r22
    c626:	80 83       	st	Z, r24
    c628:	f9 cf       	rjmp	.-14     	; 0xc61c <remote_tds_get_active(unsigned char, unsigned char*)+0x1c>

0000c62a <click_rtds_setting_sensor(unsigned int, unsigned int, unsigned char)>:
_Z25click_rtds_setting_sensorjjh():
    c62a:	1f 93       	push	r17
    c62c:	cf 93       	push	r28
    c62e:	df 93       	push	r29
    c630:	1f 92       	push	r1
    c632:	cd b7       	in	r28, 0x3d	; 61
    c634:	de b7       	in	r29, 0x3e	; 62
    c636:	14 2f       	mov	r17, r20
    c638:	be 01       	movw	r22, r28
    c63a:	6f 5f       	subi	r22, 0xFF	; 255
    c63c:	7f 4f       	sbci	r23, 0xFF	; 255
    c63e:	84 2f       	mov	r24, r20
    c640:	0e 94 00 63 	call	0xc600	; 0xc600 <remote_tds_get_active(unsigned char, unsigned char*)>
    c644:	89 81       	ldd	r24, Y+1	; 0x01
    c646:	81 30       	cpi	r24, 0x01	; 1
    c648:	31 f4       	brne	.+12     	; 0xc656 <click_rtds_setting_sensor(unsigned int, unsigned int, unsigned char)+0x2c>
    c64a:	61 2f       	mov	r22, r17
    c64c:	70 e0       	ldi	r23, 0x00	; 0
    c64e:	87 e0       	ldi	r24, 0x07	; 7
    c650:	90 e0       	ldi	r25, 0x00	; 0
    c652:	0e 94 c1 54 	call	0xa982	; 0xa982 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.59]>
    c656:	0f 90       	pop	r0
    c658:	df 91       	pop	r29
    c65a:	cf 91       	pop	r28
    c65c:	1f 91       	pop	r17
    c65e:	08 95       	ret

0000c660 <remote_tds_set_active(unsigned char, unsigned char)>:
_Z21remote_tds_set_activehh():
    c660:	8a 30       	cpi	r24, 0x0A	; 10
    c662:	40 f4       	brcc	.+16     	; 0xc674 <remote_tds_set_active(unsigned char, unsigned char)+0x14>
    c664:	24 e1       	ldi	r18, 0x14	; 20
    c666:	82 9f       	mul	r24, r18
    c668:	c0 01       	movw	r24, r0
    c66a:	11 24       	eor	r1, r1
    c66c:	83 54       	subi	r24, 0x43	; 67
    c66e:	9a 4f       	sbci	r25, 0xFA	; 250
    c670:	0c 94 90 51 	jmp	0xa320	; 0xa320 <EEPROMClass::write(int, unsigned char) [clone .isra.9]>
    c674:	08 95       	ret

0000c676 <remote_tds_set_complete(unsigned char, unsigned char, char*)>:
_Z23remote_tds_set_completehhPc():
    c676:	cf 93       	push	r28
    c678:	df 93       	push	r29
    c67a:	c8 2f       	mov	r28, r24
    c67c:	d6 2f       	mov	r29, r22
    c67e:	ba 01       	movw	r22, r20
    c680:	0e 94 d7 62 	call	0xc5ae	; 0xc5ae <remote_tds_set_name(unsigned char, char*)>
    c684:	6d 2f       	mov	r22, r29
    c686:	8c 2f       	mov	r24, r28
    c688:	df 91       	pop	r29
    c68a:	cf 91       	pop	r28
    c68c:	0c 94 30 63 	jmp	0xc660	; 0xc660 <remote_tds_set_active(unsigned char, unsigned char)>

0000c690 <remote_tds_clear(unsigned char)>:
_Z16remote_tds_clearh():
    c690:	cf 93       	push	r28
    c692:	df 93       	push	r29
    c694:	cd b7       	in	r28, 0x3d	; 61
    c696:	de b7       	in	r29, 0x3e	; 62
    c698:	62 97       	sbiw	r28, 0x12	; 18
    c69a:	0f b6       	in	r0, 0x3f	; 63
    c69c:	f8 94       	cli
    c69e:	de bf       	out	0x3e, r29	; 62
    c6a0:	0f be       	out	0x3f, r0	; 63
    c6a2:	cd bf       	out	0x3d, r28	; 61
    c6a4:	e1 e0       	ldi	r30, 0x01	; 1
    c6a6:	f0 e0       	ldi	r31, 0x00	; 0
    c6a8:	ec 0f       	add	r30, r28
    c6aa:	fd 1f       	adc	r31, r29
    c6ac:	e8 0f       	add	r30, r24
    c6ae:	f1 1d       	adc	r31, r1
    c6b0:	10 82       	st	Z, r1
    c6b2:	ae 01       	movw	r20, r28
    c6b4:	4f 5f       	subi	r20, 0xFF	; 255
    c6b6:	5f 4f       	sbci	r21, 0xFF	; 255
    c6b8:	60 e0       	ldi	r22, 0x00	; 0
    c6ba:	0e 94 3b 63 	call	0xc676	; 0xc676 <remote_tds_set_complete(unsigned char, unsigned char, char*)>
    c6be:	62 96       	adiw	r28, 0x12	; 18
    c6c0:	0f b6       	in	r0, 0x3f	; 63
    c6c2:	f8 94       	cli
    c6c4:	de bf       	out	0x3e, r29	; 62
    c6c6:	0f be       	out	0x3f, r0	; 63
    c6c8:	cd bf       	out	0x3d, r28	; 61
    c6ca:	df 91       	pop	r29
    c6cc:	cf 91       	pop	r28
    c6ce:	08 95       	ret

0000c6d0 <click_rtds_deassociate_onewire(unsigned int, unsigned int, unsigned char)>:
_Z30click_rtds_deassociate_onewirejjh():
    c6d0:	86 2f       	mov	r24, r22
    c6d2:	0e 94 48 63 	call	0xc690	; 0xc690 <remote_tds_clear(unsigned char)>
    c6d6:	0c 94 63 54 	jmp	0xa8c6	; 0xa8c6 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.56]>

0000c6da <remote_tds_subscibe_topic(unsigned char)>:
_Z25remote_tds_subscibe_topich():
    c6da:	cf 93       	push	r28
    c6dc:	df 93       	push	r29
    c6de:	cd b7       	in	r28, 0x3d	; 61
    c6e0:	de b7       	in	r29, 0x3e	; 62
    c6e2:	c1 58       	subi	r28, 0x81	; 129
    c6e4:	d1 09       	sbc	r29, r1
    c6e6:	0f b6       	in	r0, 0x3f	; 63
    c6e8:	f8 94       	cli
    c6ea:	de bf       	out	0x3e, r29	; 62
    c6ec:	0f be       	out	0x3f, r0	; 63
    c6ee:	cd bf       	out	0x3d, r28	; 61
    c6f0:	cf 57       	subi	r28, 0x7F	; 127
    c6f2:	df 4f       	sbci	r29, 0xFF	; 255
    c6f4:	18 82       	st	Y, r1
    c6f6:	c1 58       	subi	r28, 0x81	; 129
    c6f8:	d0 40       	sbci	r29, 0x00	; 0
    c6fa:	ae 01       	movw	r20, r28
    c6fc:	4f 5b       	subi	r20, 0xBF	; 191
    c6fe:	5f 4f       	sbci	r21, 0xFF	; 255
    c700:	be 01       	movw	r22, r28
    c702:	6f 57       	subi	r22, 0x7F	; 127
    c704:	7f 4f       	sbci	r23, 0xFF	; 255
    c706:	0e 94 64 62 	call	0xc4c8	; 0xc4c8 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
    c70a:	cf 57       	subi	r28, 0x7F	; 127
    c70c:	df 4f       	sbci	r29, 0xFF	; 255
    c70e:	88 81       	ld	r24, Y
    c710:	c1 58       	subi	r28, 0x81	; 129
    c712:	d0 40       	sbci	r29, 0x00	; 0
    c714:	81 30       	cpi	r24, 0x01	; 1
    c716:	d1 f4       	brne	.+52     	; 0xc74c <remote_tds_subscibe_topic(unsigned char)+0x72>
    c718:	65 ed       	ldi	r22, 0xD5	; 213
    c71a:	7c e7       	ldi	r23, 0x7C	; 124
    c71c:	ce 01       	movw	r24, r28
    c71e:	01 96       	adiw	r24, 0x01	; 1
    c720:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    c724:	be 01       	movw	r22, r28
    c726:	6f 5b       	subi	r22, 0xBF	; 191
    c728:	7f 4f       	sbci	r23, 0xFF	; 255
    c72a:	ce 01       	movw	r24, r28
    c72c:	01 96       	adiw	r24, 0x01	; 1
    c72e:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    c732:	67 e9       	ldi	r22, 0x97	; 151
    c734:	73 e0       	ldi	r23, 0x03	; 3
    c736:	ce 01       	movw	r24, r28
    c738:	01 96       	adiw	r24, 0x01	; 1
    c73a:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    c73e:	be 01       	movw	r22, r28
    c740:	6f 5f       	subi	r22, 0xFF	; 255
    c742:	7f 4f       	sbci	r23, 0xFF	; 255
    c744:	8c ea       	ldi	r24, 0xAC	; 172
    c746:	9e e0       	ldi	r25, 0x0E	; 14
    c748:	0e 94 64 f2 	call	0x1e4c8	; 0x1e4c8 <PubSubClient::subscribe(char const*)>
    c74c:	cf 57       	subi	r28, 0x7F	; 127
    c74e:	df 4f       	sbci	r29, 0xFF	; 255
    c750:	0f b6       	in	r0, 0x3f	; 63
    c752:	f8 94       	cli
    c754:	de bf       	out	0x3e, r29	; 62
    c756:	0f be       	out	0x3f, r0	; 63
    c758:	cd bf       	out	0x3d, r28	; 61
    c75a:	df 91       	pop	r29
    c75c:	cf 91       	pop	r28
    c75e:	08 95       	ret

0000c760 <click_rtds_subscribe(unsigned int, unsigned int, unsigned char)>:
_Z20click_rtds_subscribejjh():
    c760:	86 2f       	mov	r24, r22
    c762:	0c 94 6d 63 	jmp	0xc6da	; 0xc6da <remote_tds_subscibe_topic(unsigned char)>

0000c766 <remote_tds_unsubscibe_topic(unsigned char)>:
_Z27remote_tds_unsubscibe_topich():
    c766:	cf 93       	push	r28
    c768:	df 93       	push	r29
    c76a:	cd b7       	in	r28, 0x3d	; 61
    c76c:	de b7       	in	r29, 0x3e	; 62
    c76e:	c1 58       	subi	r28, 0x81	; 129
    c770:	d1 09       	sbc	r29, r1
    c772:	0f b6       	in	r0, 0x3f	; 63
    c774:	f8 94       	cli
    c776:	de bf       	out	0x3e, r29	; 62
    c778:	0f be       	out	0x3f, r0	; 63
    c77a:	cd bf       	out	0x3d, r28	; 61
    c77c:	cf 57       	subi	r28, 0x7F	; 127
    c77e:	df 4f       	sbci	r29, 0xFF	; 255
    c780:	18 82       	st	Y, r1
    c782:	c1 58       	subi	r28, 0x81	; 129
    c784:	d0 40       	sbci	r29, 0x00	; 0
    c786:	ae 01       	movw	r20, r28
    c788:	4f 5b       	subi	r20, 0xBF	; 191
    c78a:	5f 4f       	sbci	r21, 0xFF	; 255
    c78c:	be 01       	movw	r22, r28
    c78e:	6f 57       	subi	r22, 0x7F	; 127
    c790:	7f 4f       	sbci	r23, 0xFF	; 255
    c792:	0e 94 64 62 	call	0xc4c8	; 0xc4c8 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
    c796:	cf 57       	subi	r28, 0x7F	; 127
    c798:	df 4f       	sbci	r29, 0xFF	; 255
    c79a:	88 81       	ld	r24, Y
    c79c:	c1 58       	subi	r28, 0x81	; 129
    c79e:	d0 40       	sbci	r29, 0x00	; 0
    c7a0:	81 30       	cpi	r24, 0x01	; 1
    c7a2:	d1 f4       	brne	.+52     	; 0xc7d8 <remote_tds_unsubscibe_topic(unsigned char)+0x72>
    c7a4:	65 ed       	ldi	r22, 0xD5	; 213
    c7a6:	7c e7       	ldi	r23, 0x7C	; 124
    c7a8:	ce 01       	movw	r24, r28
    c7aa:	01 96       	adiw	r24, 0x01	; 1
    c7ac:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    c7b0:	be 01       	movw	r22, r28
    c7b2:	6f 5b       	subi	r22, 0xBF	; 191
    c7b4:	7f 4f       	sbci	r23, 0xFF	; 255
    c7b6:	ce 01       	movw	r24, r28
    c7b8:	01 96       	adiw	r24, 0x01	; 1
    c7ba:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    c7be:	67 e9       	ldi	r22, 0x97	; 151
    c7c0:	73 e0       	ldi	r23, 0x03	; 3
    c7c2:	ce 01       	movw	r24, r28
    c7c4:	01 96       	adiw	r24, 0x01	; 1
    c7c6:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    c7ca:	be 01       	movw	r22, r28
    c7cc:	6f 5f       	subi	r22, 0xFF	; 255
    c7ce:	7f 4f       	sbci	r23, 0xFF	; 255
    c7d0:	8c ea       	ldi	r24, 0xAC	; 172
    c7d2:	9e e0       	ldi	r25, 0x0E	; 14
    c7d4:	0e 94 67 f2 	call	0x1e4ce	; 0x1e4ce <PubSubClient::unsubscribe(char const*)>
    c7d8:	cf 57       	subi	r28, 0x7F	; 127
    c7da:	df 4f       	sbci	r29, 0xFF	; 255
    c7dc:	0f b6       	in	r0, 0x3f	; 63
    c7de:	f8 94       	cli
    c7e0:	de bf       	out	0x3e, r29	; 62
    c7e2:	0f be       	out	0x3f, r0	; 63
    c7e4:	cd bf       	out	0x3d, r28	; 61
    c7e6:	df 91       	pop	r29
    c7e8:	cf 91       	pop	r28
    c7ea:	08 95       	ret

0000c7ec <remote_tds_find_free()>:
_Z20remote_tds_find_freev():
    c7ec:	1f 93       	push	r17
    c7ee:	cf 93       	push	r28
    c7f0:	df 93       	push	r29
    c7f2:	1f 92       	push	r1
    c7f4:	cd b7       	in	r28, 0x3d	; 61
    c7f6:	de b7       	in	r29, 0x3e	; 62
    c7f8:	10 e0       	ldi	r17, 0x00	; 0
    c7fa:	be 01       	movw	r22, r28
    c7fc:	6f 5f       	subi	r22, 0xFF	; 255
    c7fe:	7f 4f       	sbci	r23, 0xFF	; 255
    c800:	81 2f       	mov	r24, r17
    c802:	0e 94 00 63 	call	0xc600	; 0xc600 <remote_tds_get_active(unsigned char, unsigned char*)>
    c806:	89 81       	ldd	r24, Y+1	; 0x01
    c808:	88 23       	and	r24, r24
    c80a:	21 f0       	breq	.+8      	; 0xc814 <remote_tds_find_free()+0x28>
    c80c:	1f 5f       	subi	r17, 0xFF	; 255
    c80e:	1a 30       	cpi	r17, 0x0A	; 10
    c810:	a1 f7       	brne	.-24     	; 0xc7fa <remote_tds_find_free()+0xe>
    c812:	1f ef       	ldi	r17, 0xFF	; 255
    c814:	81 2f       	mov	r24, r17
    c816:	0f 90       	pop	r0
    c818:	df 91       	pop	r29
    c81a:	cf 91       	pop	r28
    c81c:	1f 91       	pop	r17
    c81e:	08 95       	ret

0000c820 <click_rtds_add_sensor(unsigned int, unsigned int, unsigned char)>:
_Z21click_rtds_add_sensorjjh():
    c820:	ff 92       	push	r15
    c822:	0f 93       	push	r16
    c824:	1f 93       	push	r17
    c826:	cf 93       	push	r28
    c828:	df 93       	push	r29
    c82a:	00 d0       	rcall	.+0      	; 0xc82c <click_rtds_add_sensor(unsigned int, unsigned int, unsigned char)+0xc>
    c82c:	1f 92       	push	r1
    c82e:	1f 92       	push	r1
    c830:	cd b7       	in	r28, 0x3d	; 61
    c832:	de b7       	in	r29, 0x3e	; 62
    c834:	0e 94 f6 63 	call	0xc7ec	; 0xc7ec <remote_tds_find_free()>
    c838:	f8 2e       	mov	r15, r24
    c83a:	8f ef       	ldi	r24, 0xFF	; 255
    c83c:	f8 16       	cp	r15, r24
    c83e:	b1 f0       	breq	.+44     	; 0xc86c <click_rtds_add_sensor(unsigned int, unsigned int, unsigned char)+0x4c>
    c840:	6d e1       	ldi	r22, 0x1D	; 29
    c842:	73 e8       	ldi	r23, 0x83	; 131
    c844:	ce 01       	movw	r24, r28
    c846:	01 96       	adiw	r24, 0x01	; 1
    c848:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    c84c:	70 e0       	ldi	r23, 0x00	; 0
    c84e:	60 e0       	ldi	r22, 0x00	; 0
    c850:	87 e6       	ldi	r24, 0x67	; 103
    c852:	90 e0       	ldi	r25, 0x00	; 0
    c854:	0e 94 c1 54 	call	0xa982	; 0xa982 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.59]>
    c858:	04 e3       	ldi	r16, 0x34	; 52
    c85a:	12 e5       	ldi	r17, 0x52	; 82
    c85c:	25 e7       	ldi	r18, 0x75	; 117
    c85e:	34 e6       	ldi	r19, 0x64	; 100
    c860:	4f 2d       	mov	r20, r15
    c862:	62 e1       	ldi	r22, 0x12	; 18
    c864:	ce 01       	movw	r24, r28
    c866:	01 96       	adiw	r24, 0x01	; 1
    c868:	0e 94 4c 56 	call	0xac98	; 0xac98 <display_element_set_string(char*, unsigned char, unsigned char, void (*)(unsigned int, unsigned int, unsigned char), unsigned char (*)())>
    c86c:	0f 90       	pop	r0
    c86e:	0f 90       	pop	r0
    c870:	0f 90       	pop	r0
    c872:	0f 90       	pop	r0
    c874:	0f 90       	pop	r0
    c876:	df 91       	pop	r29
    c878:	cf 91       	pop	r28
    c87a:	1f 91       	pop	r17
    c87c:	0f 91       	pop	r16
    c87e:	ff 90       	pop	r15
    c880:	08 95       	ret

0000c882 <remote_tds_name_exist(char*)>:
_Z21remote_tds_name_existPc():
    c882:	ef 92       	push	r14
    c884:	ff 92       	push	r15
    c886:	0f 93       	push	r16
    c888:	1f 93       	push	r17
    c88a:	cf 93       	push	r28
    c88c:	df 93       	push	r29
    c88e:	cd b7       	in	r28, 0x3d	; 61
    c890:	de b7       	in	r29, 0x3e	; 62
    c892:	63 97       	sbiw	r28, 0x13	; 19
    c894:	0f b6       	in	r0, 0x3f	; 63
    c896:	f8 94       	cli
    c898:	de bf       	out	0x3e, r29	; 62
    c89a:	0f be       	out	0x3f, r0	; 63
    c89c:	cd bf       	out	0x3d, r28	; 61
    c89e:	7c 01       	movw	r14, r24
    c8a0:	10 e0       	ldi	r17, 0x00	; 0
    c8a2:	0f ef       	ldi	r16, 0xFF	; 255
    c8a4:	ae 01       	movw	r20, r28
    c8a6:	4f 5f       	subi	r20, 0xFF	; 255
    c8a8:	5f 4f       	sbci	r21, 0xFF	; 255
    c8aa:	be 01       	movw	r22, r28
    c8ac:	6d 5e       	subi	r22, 0xED	; 237
    c8ae:	7f 4f       	sbci	r23, 0xFF	; 255
    c8b0:	81 2f       	mov	r24, r17
    c8b2:	0e 94 64 62 	call	0xc4c8	; 0xc4c8 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
    c8b6:	be 01       	movw	r22, r28
    c8b8:	6f 5f       	subi	r22, 0xFF	; 255
    c8ba:	7f 4f       	sbci	r23, 0xFF	; 255
    c8bc:	c7 01       	movw	r24, r14
    c8be:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
    c8c2:	89 2b       	or	r24, r25
    c8c4:	09 f4       	brne	.+2      	; 0xc8c8 <remote_tds_name_exist(char*)+0x46>
    c8c6:	01 2f       	mov	r16, r17
    c8c8:	1f 5f       	subi	r17, 0xFF	; 255
    c8ca:	1a 30       	cpi	r17, 0x0A	; 10
    c8cc:	59 f7       	brne	.-42     	; 0xc8a4 <remote_tds_name_exist(char*)+0x22>
    c8ce:	80 2f       	mov	r24, r16
    c8d0:	63 96       	adiw	r28, 0x13	; 19
    c8d2:	0f b6       	in	r0, 0x3f	; 63
    c8d4:	f8 94       	cli
    c8d6:	de bf       	out	0x3e, r29	; 62
    c8d8:	0f be       	out	0x3f, r0	; 63
    c8da:	cd bf       	out	0x3d, r28	; 61
    c8dc:	df 91       	pop	r29
    c8de:	cf 91       	pop	r28
    c8e0:	1f 91       	pop	r17
    c8e2:	0f 91       	pop	r16
    c8e4:	ff 90       	pop	r15
    c8e6:	ef 90       	pop	r14
    c8e8:	08 95       	ret

0000c8ea <menu_rtds_create_name(unsigned int, unsigned int, unsigned char)>:
_Z21menu_rtds_create_namejjh():
    c8ea:	1f 93       	push	r17
    c8ec:	cf 93       	push	r28
    c8ee:	df 93       	push	r29
    c8f0:	cd b7       	in	r28, 0x3d	; 61
    c8f2:	de b7       	in	r29, 0x3e	; 62
    c8f4:	62 97       	sbiw	r28, 0x12	; 18
    c8f6:	0f b6       	in	r0, 0x3f	; 63
    c8f8:	f8 94       	cli
    c8fa:	de bf       	out	0x3e, r29	; 62
    c8fc:	0f be       	out	0x3f, r0	; 63
    c8fe:	cd bf       	out	0x3d, r28	; 61
_Z31display_element_get_string_argsv():
    c900:	10 91 81 0a 	lds	r17, 0x0A81	; 0x800a81 <dialog_set_string_args>
_Z21menu_rtds_create_namejjh():
    c904:	ce 01       	movw	r24, r28
    c906:	01 96       	adiw	r24, 0x01	; 1
    c908:	0e 94 45 59 	call	0xb28a	; 0xb28a <display_element_get_string(char*)>
    c90c:	89 81       	ldd	r24, Y+1	; 0x01
    c90e:	88 23       	and	r24, r24
    c910:	81 f0       	breq	.+32     	; 0xc932 <menu_rtds_create_name(unsigned int, unsigned int, unsigned char)+0x48>
    c912:	ce 01       	movw	r24, r28
    c914:	01 96       	adiw	r24, 0x01	; 1
    c916:	0e 94 41 64 	call	0xc882	; 0xc882 <remote_tds_name_exist(char*)>
    c91a:	8f 3f       	cpi	r24, 0xFF	; 255
    c91c:	51 f4       	brne	.+20     	; 0xc932 <menu_rtds_create_name(unsigned int, unsigned int, unsigned char)+0x48>
    c91e:	ae 01       	movw	r20, r28
    c920:	4f 5f       	subi	r20, 0xFF	; 255
    c922:	5f 4f       	sbci	r21, 0xFF	; 255
    c924:	61 e0       	ldi	r22, 0x01	; 1
    c926:	81 2f       	mov	r24, r17
    c928:	0e 94 3b 63 	call	0xc676	; 0xc676 <remote_tds_set_complete(unsigned char, unsigned char, char*)>
    c92c:	81 2f       	mov	r24, r17
    c92e:	0e 94 6d 63 	call	0xc6da	; 0xc6da <remote_tds_subscibe_topic(unsigned char)>
    c932:	62 96       	adiw	r28, 0x12	; 18
    c934:	0f b6       	in	r0, 0x3f	; 63
    c936:	f8 94       	cli
    c938:	de bf       	out	0x3e, r29	; 62
    c93a:	0f be       	out	0x3f, r0	; 63
    c93c:	cd bf       	out	0x3d, r28	; 61
    c93e:	df 91       	pop	r29
    c940:	cf 91       	pop	r28
    c942:	1f 91       	pop	r17
    c944:	08 95       	ret

0000c946 <menu_rtds_update_name(unsigned int, unsigned int, unsigned char)>:
_Z21menu_rtds_update_namejjh():
    c946:	1f 93       	push	r17
    c948:	cf 93       	push	r28
    c94a:	df 93       	push	r29
    c94c:	cd b7       	in	r28, 0x3d	; 61
    c94e:	de b7       	in	r29, 0x3e	; 62
    c950:	62 97       	sbiw	r28, 0x12	; 18
    c952:	0f b6       	in	r0, 0x3f	; 63
    c954:	f8 94       	cli
    c956:	de bf       	out	0x3e, r29	; 62
    c958:	0f be       	out	0x3f, r0	; 63
    c95a:	cd bf       	out	0x3d, r28	; 61
_Z31display_element_get_string_argsv():
    c95c:	10 91 81 0a 	lds	r17, 0x0A81	; 0x800a81 <dialog_set_string_args>
_Z21menu_rtds_update_namejjh():
    c960:	ce 01       	movw	r24, r28
    c962:	01 96       	adiw	r24, 0x01	; 1
    c964:	0e 94 45 59 	call	0xb28a	; 0xb28a <display_element_get_string(char*)>
    c968:	89 81       	ldd	r24, Y+1	; 0x01
    c96a:	88 23       	and	r24, r24
    c96c:	61 f0       	breq	.+24     	; 0xc986 <menu_rtds_update_name(unsigned int, unsigned int, unsigned char)+0x40>
    c96e:	ce 01       	movw	r24, r28
    c970:	01 96       	adiw	r24, 0x01	; 1
    c972:	0e 94 41 64 	call	0xc882	; 0xc882 <remote_tds_name_exist(char*)>
    c976:	8f 3f       	cpi	r24, 0xFF	; 255
    c978:	31 f4       	brne	.+12     	; 0xc986 <menu_rtds_update_name(unsigned int, unsigned int, unsigned char)+0x40>
    c97a:	be 01       	movw	r22, r28
    c97c:	6f 5f       	subi	r22, 0xFF	; 255
    c97e:	7f 4f       	sbci	r23, 0xFF	; 255
    c980:	81 2f       	mov	r24, r17
    c982:	0e 94 d7 62 	call	0xc5ae	; 0xc5ae <remote_tds_set_name(unsigned char, char*)>
    c986:	62 96       	adiw	r28, 0x12	; 18
    c988:	0f b6       	in	r0, 0x3f	; 63
    c98a:	f8 94       	cli
    c98c:	de bf       	out	0x3e, r29	; 62
    c98e:	0f be       	out	0x3f, r0	; 63
    c990:	cd bf       	out	0x3d, r28	; 61
    c992:	df 91       	pop	r29
    c994:	cf 91       	pop	r28
    c996:	1f 91       	pop	r17
    c998:	08 95       	ret

0000c99a <remote_tds_set_type(unsigned char, unsigned char)>:
_Z19remote_tds_set_typehh():
    c99a:	26 2f       	mov	r18, r22
    c99c:	8a 30       	cpi	r24, 0x0A	; 10
    c99e:	70 f4       	brcc	.+28     	; 0xc9bc <remote_tds_set_type(unsigned char, unsigned char)+0x22>
    c9a0:	94 e0       	ldi	r25, 0x04	; 4
    c9a2:	89 9f       	mul	r24, r25
    c9a4:	a0 01       	movw	r20, r0
    c9a6:	11 24       	eor	r1, r1
    c9a8:	49 59       	subi	r20, 0x99	; 153
    c9aa:	5f 4f       	sbci	r21, 0xFF	; 255
    c9ac:	05 2e       	mov	r0, r21
    c9ae:	00 0c       	add	r0, r0
    c9b0:	66 0b       	sbc	r22, r22
    c9b2:	77 0b       	sbc	r23, r23
    c9b4:	89 e7       	ldi	r24, 0x79	; 121
    c9b6:	9b e0       	ldi	r25, 0x0B	; 11
    c9b8:	0c 94 72 d4 	jmp	0x1a8e4	; 0x1a8e4 <SRAM_23LC::writeByte(unsigned long, unsigned char)>
    c9bc:	08 95       	ret

0000c9be <remote_tds_get_type(unsigned char)>:
_Z19remote_tds_get_typeh():
    c9be:	8a 30       	cpi	r24, 0x0A	; 10
    c9c0:	70 f4       	brcc	.+28     	; 0xc9de <remote_tds_get_type(unsigned char)+0x20>
    c9c2:	94 e0       	ldi	r25, 0x04	; 4
    c9c4:	89 9f       	mul	r24, r25
    c9c6:	a0 01       	movw	r20, r0
    c9c8:	11 24       	eor	r1, r1
    c9ca:	49 59       	subi	r20, 0x99	; 153
    c9cc:	5f 4f       	sbci	r21, 0xFF	; 255
    c9ce:	05 2e       	mov	r0, r21
    c9d0:	00 0c       	add	r0, r0
    c9d2:	66 0b       	sbc	r22, r22
    c9d4:	77 0b       	sbc	r23, r23
    c9d6:	89 e7       	ldi	r24, 0x79	; 121
    c9d8:	9b e0       	ldi	r25, 0x0B	; 11
    c9da:	0c 94 4d d4 	jmp	0x1a89a	; 0x1a89a <SRAM_23LC::readByte(unsigned long)>
    c9de:	8f ef       	ldi	r24, 0xFF	; 255
    c9e0:	08 95       	ret

0000c9e2 <get_function_rtds_text_button(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z29get_function_rtds_text_buttonhhhPcS_():
    c9e2:	cf 92       	push	r12
    c9e4:	df 92       	push	r13
    c9e6:	ff 92       	push	r15
    c9e8:	0f 93       	push	r16
    c9ea:	1f 93       	push	r17
    c9ec:	cf 93       	push	r28
    c9ee:	df 93       	push	r29
    c9f0:	1f 92       	push	r1
    c9f2:	cd b7       	in	r28, 0x3d	; 61
    c9f4:	de b7       	in	r29, 0x3e	; 62
    c9f6:	f8 2e       	mov	r15, r24
    c9f8:	69 01       	movw	r12, r18
    c9fa:	60 e1       	ldi	r22, 0x10	; 16
    c9fc:	73 e8       	ldi	r23, 0x83	; 131
    c9fe:	c9 01       	movw	r24, r18
    ca00:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    ca04:	f8 01       	movw	r30, r16
    ca06:	10 82       	st	Z, r1
    ca08:	be 01       	movw	r22, r28
    ca0a:	6f 5f       	subi	r22, 0xFF	; 255
    ca0c:	7f 4f       	sbci	r23, 0xFF	; 255
    ca0e:	8f 2d       	mov	r24, r15
    ca10:	0e 94 00 63 	call	0xc600	; 0xc600 <remote_tds_get_active(unsigned char, unsigned char*)>
    ca14:	89 81       	ldd	r24, Y+1	; 0x01
    ca16:	81 30       	cpi	r24, 0x01	; 1
    ca18:	89 f4       	brne	.+34     	; 0xca3c <get_function_rtds_text_button(unsigned char, unsigned char, unsigned char, char*, char*)+0x5a>
    ca1a:	a6 01       	movw	r20, r12
    ca1c:	be 01       	movw	r22, r28
    ca1e:	6f 5f       	subi	r22, 0xFF	; 255
    ca20:	7f 4f       	sbci	r23, 0xFF	; 255
    ca22:	8f 2d       	mov	r24, r15
    ca24:	0e 94 64 62 	call	0xc4c8	; 0xc4c8 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
    ca28:	8f 2d       	mov	r24, r15
    ca2a:	0e 94 df 64 	call	0xc9be	; 0xc9be <remote_tds_get_type(unsigned char)>
    ca2e:	81 30       	cpi	r24, 0x01	; 1
    ca30:	29 f4       	brne	.+10     	; 0xca3c <get_function_rtds_text_button(unsigned char, unsigned char, unsigned char, char*, char*)+0x5a>
    ca32:	6c ed       	ldi	r22, 0xDC	; 220
    ca34:	7c e7       	ldi	r23, 0x7C	; 124
    ca36:	c8 01       	movw	r24, r16
    ca38:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    ca3c:	0f 90       	pop	r0
    ca3e:	df 91       	pop	r29
    ca40:	cf 91       	pop	r28
    ca42:	1f 91       	pop	r17
    ca44:	0f 91       	pop	r16
    ca46:	ff 90       	pop	r15
    ca48:	df 90       	pop	r13
    ca4a:	cf 90       	pop	r12
    ca4c:	08 95       	ret

0000ca4e <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z28button_get_show_default_temphhhPcS_():
    ca4e:	9f 92       	push	r9
    ca50:	af 92       	push	r10
    ca52:	bf 92       	push	r11
    ca54:	cf 92       	push	r12
    ca56:	df 92       	push	r13
    ca58:	ef 92       	push	r14
    ca5a:	ff 92       	push	r15
    ca5c:	0f 93       	push	r16
    ca5e:	1f 93       	push	r17
    ca60:	cf 93       	push	r28
    ca62:	df 93       	push	r29
    ca64:	cd b7       	in	r28, 0x3d	; 61
    ca66:	de b7       	in	r29, 0x3e	; 62
    ca68:	65 97       	sbiw	r28, 0x15	; 21
    ca6a:	0f b6       	in	r0, 0x3f	; 63
    ca6c:	f8 94       	cli
    ca6e:	de bf       	out	0x3e, r29	; 62
    ca70:	0f be       	out	0x3f, r0	; 63
    ca72:	cd bf       	out	0x3d, r28	; 61
    ca74:	98 2e       	mov	r9, r24
    ca76:	e4 2e       	mov	r14, r20
    ca78:	69 01       	movw	r12, r18
    ca7a:	58 01       	movw	r10, r16
    ca7c:	69 e9       	ldi	r22, 0x99	; 153
    ca7e:	73 e8       	ldi	r23, 0x83	; 131
    ca80:	c9 01       	movw	r24, r18
    ca82:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    ca86:	68 e3       	ldi	r22, 0x38	; 56
    ca88:	76 e0       	ldi	r23, 0x06	; 6
    ca8a:	c8 01       	movw	r24, r16
    ca8c:	0f 94 67 1a 	call	0x234ce	; 0x234ce <strcpy>
    ca90:	10 e0       	ldi	r17, 0x00	; 0
    ca92:	f1 2c       	mov	r15, r1
    ca94:	81 2f       	mov	r24, r17
    ca96:	0e 94 35 b2 	call	0x1646a	; 0x1646a <tds_used(unsigned char)>
    ca9a:	81 30       	cpi	r24, 0x01	; 1
    ca9c:	11 f4       	brne	.+4      	; 0xcaa2 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x54>
    ca9e:	ee 20       	and	r14, r14
    caa0:	19 f0       	breq	.+6      	; 0xcaa8 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x5a>
    caa2:	81 e0       	ldi	r24, 0x01	; 1
    caa4:	e8 12       	cpse	r14, r24
    caa6:	26 c0       	rjmp	.+76     	; 0xcaf4 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xa6>
    caa8:	9f 10       	cpse	r9, r15
    caaa:	23 c0       	rjmp	.+70     	; 0xcaf2 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xa4>
    caac:	be 01       	movw	r22, r28
    caae:	6f 5f       	subi	r22, 0xFF	; 255
    cab0:	7f 4f       	sbci	r23, 0xFF	; 255
    cab2:	81 2f       	mov	r24, r17
    cab4:	0e 94 06 b3 	call	0x1660c	; 0x1660c <tds_get_name(unsigned char, char*)>
    cab8:	be 01       	movw	r22, r28
    caba:	6f 5f       	subi	r22, 0xFF	; 255
    cabc:	7f 4f       	sbci	r23, 0xFF	; 255
    cabe:	c5 01       	movw	r24, r10
    cac0:	0f 94 67 1a 	call	0x234ce	; 0x234ce <strcpy>
    cac4:	69 e9       	ldi	r22, 0x99	; 153
    cac6:	73 e8       	ldi	r23, 0x83	; 131
    cac8:	c6 01       	movw	r24, r12
    caca:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    cace:	65 96       	adiw	r28, 0x15	; 21
    cad0:	0f b6       	in	r0, 0x3f	; 63
    cad2:	f8 94       	cli
    cad4:	de bf       	out	0x3e, r29	; 62
    cad6:	0f be       	out	0x3f, r0	; 63
    cad8:	cd bf       	out	0x3d, r28	; 61
    cada:	df 91       	pop	r29
    cadc:	cf 91       	pop	r28
    cade:	1f 91       	pop	r17
    cae0:	0f 91       	pop	r16
    cae2:	ff 90       	pop	r15
    cae4:	ef 90       	pop	r14
    cae6:	df 90       	pop	r13
    cae8:	cf 90       	pop	r12
    caea:	bf 90       	pop	r11
    caec:	af 90       	pop	r10
    caee:	9f 90       	pop	r9
    caf0:	08 95       	ret
    caf2:	f3 94       	inc	r15
    caf4:	1f 5f       	subi	r17, 0xFF	; 255
    caf6:	16 30       	cpi	r17, 0x06	; 6
    caf8:	69 f6       	brne	.-102    	; 0xca94 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x46>
    cafa:	6a e8       	ldi	r22, 0x8A	; 138
    cafc:	73 e8       	ldi	r23, 0x83	; 131
    cafe:	c6 01       	movw	r24, r12
    cb00:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    cb04:	68 e3       	ldi	r22, 0x38	; 56
    cb06:	76 e0       	ldi	r23, 0x06	; 6
    cb08:	c5 01       	movw	r24, r10
    cb0a:	0f 94 67 1a 	call	0x234ce	; 0x234ce <strcpy>
    cb0e:	10 e0       	ldi	r17, 0x00	; 0
    cb10:	be 01       	movw	r22, r28
    cb12:	6b 5e       	subi	r22, 0xEB	; 235
    cb14:	7f 4f       	sbci	r23, 0xFF	; 255
    cb16:	81 2f       	mov	r24, r17
    cb18:	0e 94 00 63 	call	0xc600	; 0xc600 <remote_tds_get_active(unsigned char, unsigned char*)>
    cb1c:	8d 89       	ldd	r24, Y+21	; 0x15
    cb1e:	81 30       	cpi	r24, 0x01	; 1
    cb20:	d9 f4       	brne	.+54     	; 0xcb58 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x10a>
    cb22:	e1 10       	cpse	r14, r1
    cb24:	19 c0       	rjmp	.+50     	; 0xcb58 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x10a>
    cb26:	81 2f       	mov	r24, r17
    cb28:	0e 94 df 64 	call	0xc9be	; 0xc9be <remote_tds_get_type(unsigned char)>
    cb2c:	81 30       	cpi	r24, 0x01	; 1
    cb2e:	b9 f4       	brne	.+46     	; 0xcb5e <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x110>
    cb30:	9f 10       	cpse	r9, r15
    cb32:	19 c0       	rjmp	.+50     	; 0xcb66 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x118>
    cb34:	ae 01       	movw	r20, r28
    cb36:	4f 5f       	subi	r20, 0xFF	; 255
    cb38:	5f 4f       	sbci	r21, 0xFF	; 255
    cb3a:	be 01       	movw	r22, r28
    cb3c:	6b 5e       	subi	r22, 0xEB	; 235
    cb3e:	7f 4f       	sbci	r23, 0xFF	; 255
    cb40:	81 2f       	mov	r24, r17
    cb42:	0e 94 64 62 	call	0xc4c8	; 0xc4c8 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
    cb46:	be 01       	movw	r22, r28
    cb48:	6f 5f       	subi	r22, 0xFF	; 255
    cb4a:	7f 4f       	sbci	r23, 0xFF	; 255
    cb4c:	c5 01       	movw	r24, r10
    cb4e:	0f 94 67 1a 	call	0x234ce	; 0x234ce <strcpy>
    cb52:	6a e8       	ldi	r22, 0x8A	; 138
    cb54:	73 e8       	ldi	r23, 0x83	; 131
    cb56:	b8 cf       	rjmp	.-144    	; 0xcac8 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x7a>
    cb58:	81 e0       	ldi	r24, 0x01	; 1
    cb5a:	e8 16       	cp	r14, r24
    cb5c:	49 f3       	breq	.-46     	; 0xcb30 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xe2>
    cb5e:	1f 5f       	subi	r17, 0xFF	; 255
    cb60:	1a 30       	cpi	r17, 0x0A	; 10
    cb62:	b1 f6       	brne	.-84     	; 0xcb10 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xc2>
    cb64:	b4 cf       	rjmp	.-152    	; 0xcace <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x80>
    cb66:	f3 94       	inc	r15
    cb68:	fa cf       	rjmp	.-12     	; 0xcb5e <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x110>

0000cb6a <button_get_show_default_temp_1(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z30button_get_show_default_temp_1hhhPcS_():
    cb6a:	0f 93       	push	r16
    cb6c:	1f 93       	push	r17
    cb6e:	0e 94 27 65 	call	0xca4e	; 0xca4e <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)>
    cb72:	1f 91       	pop	r17
    cb74:	0f 91       	pop	r16
    cb76:	08 95       	ret

0000cb78 <remote_tds_set_data(unsigned char, int)>:
_Z19remote_tds_set_datahi():
    cb78:	1f 93       	push	r17
    cb7a:	cf 93       	push	r28
    cb7c:	df 93       	push	r29
    cb7e:	8a 30       	cpi	r24, 0x0A	; 10
    cb80:	78 f5       	brcc	.+94     	; 0xcbe0 <remote_tds_set_data(unsigned char, int)+0x68>
    cb82:	17 2f       	mov	r17, r23
    cb84:	26 2f       	mov	r18, r22
    cb86:	48 2f       	mov	r20, r24
    cb88:	50 e0       	ldi	r21, 0x00	; 0
    cb8a:	47 5e       	subi	r20, 0xE7	; 231
    cb8c:	5f 4f       	sbci	r21, 0xFF	; 255
    cb8e:	ea 01       	movw	r28, r20
    cb90:	cc 0f       	add	r28, r28
    cb92:	dd 1f       	adc	r29, r29
    cb94:	cc 0f       	add	r28, r28
    cb96:	dd 1f       	adc	r29, r29
    cb98:	ae 01       	movw	r20, r28
    cb9a:	0d 2e       	mov	r0, r29
    cb9c:	00 0c       	add	r0, r0
    cb9e:	66 0b       	sbc	r22, r22
    cba0:	77 0b       	sbc	r23, r23
    cba2:	89 e7       	ldi	r24, 0x79	; 121
    cba4:	9b e0       	ldi	r25, 0x0B	; 11
    cba6:	0e 94 72 d4 	call	0x1a8e4	; 0x1a8e4 <SRAM_23LC::writeByte(unsigned long, unsigned char)>
    cbaa:	ae 01       	movw	r20, r28
    cbac:	4f 5f       	subi	r20, 0xFF	; 255
    cbae:	5f 4f       	sbci	r21, 0xFF	; 255
    cbb0:	05 2e       	mov	r0, r21
    cbb2:	00 0c       	add	r0, r0
    cbb4:	66 0b       	sbc	r22, r22
    cbb6:	77 0b       	sbc	r23, r23
    cbb8:	21 2f       	mov	r18, r17
    cbba:	89 e7       	ldi	r24, 0x79	; 121
    cbbc:	9b e0       	ldi	r25, 0x0B	; 11
    cbbe:	0e 94 72 d4 	call	0x1a8e4	; 0x1a8e4 <SRAM_23LC::writeByte(unsigned long, unsigned char)>
    cbc2:	ae 01       	movw	r20, r28
    cbc4:	4e 5f       	subi	r20, 0xFE	; 254
    cbc6:	5f 4f       	sbci	r21, 0xFF	; 255
    cbc8:	05 2e       	mov	r0, r21
    cbca:	00 0c       	add	r0, r0
    cbcc:	66 0b       	sbc	r22, r22
    cbce:	77 0b       	sbc	r23, r23
    cbd0:	20 e0       	ldi	r18, 0x00	; 0
    cbd2:	89 e7       	ldi	r24, 0x79	; 121
    cbd4:	9b e0       	ldi	r25, 0x0B	; 11
    cbd6:	df 91       	pop	r29
    cbd8:	cf 91       	pop	r28
    cbda:	1f 91       	pop	r17
    cbdc:	0c 94 72 d4 	jmp	0x1a8e4	; 0x1a8e4 <SRAM_23LC::writeByte(unsigned long, unsigned char)>
    cbe0:	df 91       	pop	r29
    cbe2:	cf 91       	pop	r28
    cbe4:	1f 91       	pop	r17
    cbe6:	08 95       	ret

0000cbe8 <remote_tds_get_data(unsigned char)>:
_Z19remote_tds_get_datah():
    cbe8:	0f 93       	push	r16
    cbea:	1f 93       	push	r17
    cbec:	cf 93       	push	r28
    cbee:	df 93       	push	r29
    cbf0:	8a 30       	cpi	r24, 0x0A	; 10
    cbf2:	30 f5       	brcc	.+76     	; 0xcc40 <remote_tds_get_data(unsigned char)+0x58>
    cbf4:	94 e0       	ldi	r25, 0x04	; 4
    cbf6:	89 9f       	mul	r24, r25
    cbf8:	80 01       	movw	r16, r0
    cbfa:	11 24       	eor	r1, r1
    cbfc:	a8 01       	movw	r20, r16
    cbfe:	4b 59       	subi	r20, 0x9B	; 155
    cc00:	5f 4f       	sbci	r21, 0xFF	; 255
    cc02:	05 2e       	mov	r0, r21
    cc04:	00 0c       	add	r0, r0
    cc06:	66 0b       	sbc	r22, r22
    cc08:	77 0b       	sbc	r23, r23
    cc0a:	89 e7       	ldi	r24, 0x79	; 121
    cc0c:	9b e0       	ldi	r25, 0x0B	; 11
    cc0e:	0e 94 4d d4 	call	0x1a89a	; 0x1a89a <SRAM_23LC::readByte(unsigned long)>
    cc12:	c8 2f       	mov	r28, r24
    cc14:	d0 e0       	ldi	r29, 0x00	; 0
    cc16:	dc 2f       	mov	r29, r28
    cc18:	cc 27       	eor	r28, r28
    cc1a:	a8 01       	movw	r20, r16
    cc1c:	4c 59       	subi	r20, 0x9C	; 156
    cc1e:	5f 4f       	sbci	r21, 0xFF	; 255
    cc20:	05 2e       	mov	r0, r21
    cc22:	00 0c       	add	r0, r0
    cc24:	66 0b       	sbc	r22, r22
    cc26:	77 0b       	sbc	r23, r23
    cc28:	89 e7       	ldi	r24, 0x79	; 121
    cc2a:	9b e0       	ldi	r25, 0x0B	; 11
    cc2c:	0e 94 4d d4 	call	0x1a89a	; 0x1a89a <SRAM_23LC::readByte(unsigned long)>
    cc30:	8c 0f       	add	r24, r28
    cc32:	9d 2f       	mov	r25, r29
    cc34:	91 1d       	adc	r25, r1
    cc36:	df 91       	pop	r29
    cc38:	cf 91       	pop	r28
    cc3a:	1f 91       	pop	r17
    cc3c:	0f 91       	pop	r16
    cc3e:	08 95       	ret
    cc40:	90 e0       	ldi	r25, 0x00	; 0
    cc42:	80 e0       	ldi	r24, 0x00	; 0
    cc44:	f8 cf       	rjmp	.-16     	; 0xcc36 <remote_tds_get_data(unsigned char)+0x4e>

0000cc46 <remote_tds_get_last_update(unsigned char)>:
_Z26remote_tds_get_last_updateh():
    cc46:	8a 30       	cpi	r24, 0x0A	; 10
    cc48:	70 f4       	brcc	.+28     	; 0xcc66 <remote_tds_get_last_update(unsigned char)+0x20>
    cc4a:	94 e0       	ldi	r25, 0x04	; 4
    cc4c:	89 9f       	mul	r24, r25
    cc4e:	a0 01       	movw	r20, r0
    cc50:	11 24       	eor	r1, r1
    cc52:	4a 59       	subi	r20, 0x9A	; 154
    cc54:	5f 4f       	sbci	r21, 0xFF	; 255
    cc56:	05 2e       	mov	r0, r21
    cc58:	00 0c       	add	r0, r0
    cc5a:	66 0b       	sbc	r22, r22
    cc5c:	77 0b       	sbc	r23, r23
    cc5e:	89 e7       	ldi	r24, 0x79	; 121
    cc60:	9b e0       	ldi	r25, 0x0B	; 11
    cc62:	0c 94 4d d4 	jmp	0x1a89a	; 0x1a89a <SRAM_23LC::readByte(unsigned long)>
    cc66:	8f ef       	ldi	r24, 0xFF	; 255
    cc68:	08 95       	ret

0000cc6a <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>:
_Z39display_element_show_rtds_info_dynamicsjjjjjhPc():
    cc6a:	3f 92       	push	r3
    cc6c:	4f 92       	push	r4
    cc6e:	5f 92       	push	r5
    cc70:	6f 92       	push	r6
    cc72:	7f 92       	push	r7
    cc74:	8f 92       	push	r8
    cc76:	9f 92       	push	r9
    cc78:	af 92       	push	r10
    cc7a:	bf 92       	push	r11
    cc7c:	cf 92       	push	r12
    cc7e:	df 92       	push	r13
    cc80:	ef 92       	push	r14
    cc82:	ff 92       	push	r15
    cc84:	0f 93       	push	r16
    cc86:	1f 93       	push	r17
    cc88:	cf 93       	push	r28
    cc8a:	df 93       	push	r29
    cc8c:	cd b7       	in	r28, 0x3d	; 61
    cc8e:	de b7       	in	r29, 0x3e	; 62
    cc90:	cd 54       	subi	r28, 0x4D	; 77
    cc92:	d1 09       	sbc	r29, r1
    cc94:	0f b6       	in	r0, 0x3f	; 63
    cc96:	f8 94       	cli
    cc98:	de bf       	out	0x3e, r29	; 62
    cc9a:	0f be       	out	0x3f, r0	; 63
    cc9c:	cd bf       	out	0x3d, r28	; 61
    cc9e:	2c 01       	movw	r4, r24
    cca0:	4b 01       	movw	r8, r22
    cca2:	5a 01       	movw	r10, r20
    cca4:	89 01       	movw	r16, r18
    cca6:	de 2c       	mov	r13, r14
    cca8:	70 e0       	ldi	r23, 0x00	; 0
    ccaa:	60 e0       	ldi	r22, 0x00	; 0
    ccac:	88 eb       	ldi	r24, 0xB8	; 184
    ccae:	9c e0       	ldi	r25, 0x0C	; 12
    ccb0:	0e 94 a9 bc 	call	0x17952	; 0x17952 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    ccb4:	08 0d       	add	r16, r8
    ccb6:	19 1d       	adc	r17, r9
    ccb8:	92 01       	movw	r18, r4
    ccba:	2a 0d       	add	r18, r10
    ccbc:	3b 1d       	adc	r19, r11
    ccbe:	a4 01       	movw	r20, r8
    ccc0:	b2 01       	movw	r22, r4
    ccc2:	88 eb       	ldi	r24, 0xB8	; 184
    ccc4:	9c e0       	ldi	r25, 0x0C	; 12
    ccc6:	0e 94 34 bd 	call	0x17a68	; 0x17a68 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    ccca:	ae 01       	movw	r20, r28
    cccc:	45 5c       	subi	r20, 0xC5	; 197
    ccce:	5f 4f       	sbci	r21, 0xFF	; 255
    ccd0:	be 01       	movw	r22, r28
    ccd2:	63 5b       	subi	r22, 0xB3	; 179
    ccd4:	7f 4f       	sbci	r23, 0xFF	; 255
    ccd6:	8e 2d       	mov	r24, r14
    ccd8:	0e 94 64 62 	call	0xc4c8	; 0xc4c8 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
    ccdc:	2e 96       	adiw	r28, 0x0e	; 14
    ccde:	8f ad       	ldd	r24, Y+63	; 0x3f
    cce0:	2e 97       	sbiw	r28, 0x0e	; 14
    cce2:	81 30       	cpi	r24, 0x01	; 1
    cce4:	09 f0       	breq	.+2      	; 0xcce8 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x7e>
    cce6:	bd c0       	rjmp	.+378    	; 0xce62 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x1f8>
    cce8:	64 e9       	ldi	r22, 0x94	; 148
    ccea:	72 e8       	ldi	r23, 0x82	; 130
    ccec:	ce 01       	movw	r24, r28
    ccee:	01 96       	adiw	r24, 0x01	; 1
    ccf0:	5c 01       	movw	r10, r24
    ccf2:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    ccf6:	32 01       	movw	r6, r4
    ccf8:	95 e0       	ldi	r25, 0x05	; 5
    ccfa:	69 0e       	add	r6, r25
    ccfc:	71 1c       	adc	r7, r1
    ccfe:	c1 2c       	mov	r12, r1
    cd00:	ee 24       	eor	r14, r14
    cd02:	ea 94       	dec	r14
    cd04:	fe 2c       	mov	r15, r14
    cd06:	10 e0       	ldi	r17, 0x00	; 0
    cd08:	00 e0       	ldi	r16, 0x00	; 0
    cd0a:	22 e0       	ldi	r18, 0x02	; 2
    cd0c:	a4 01       	movw	r20, r8
    cd0e:	46 5f       	subi	r20, 0xF6	; 246
    cd10:	5f 4f       	sbci	r21, 0xFF	; 255
    cd12:	b3 01       	movw	r22, r6
    cd14:	c5 01       	movw	r24, r10
    cd16:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    cd1a:	be 01       	movw	r22, r28
    cd1c:	65 5c       	subi	r22, 0xC5	; 197
    cd1e:	7f 4f       	sbci	r23, 0xFF	; 255
    cd20:	c5 01       	movw	r24, r10
    cd22:	0f 94 67 1a 	call	0x234ce	; 0x234ce <strcpy>
    cd26:	b2 01       	movw	r22, r4
    cd28:	6c 5e       	subi	r22, 0xEC	; 236
    cd2a:	7f 4f       	sbci	r23, 0xFF	; 255
    cd2c:	22 e0       	ldi	r18, 0x02	; 2
    cd2e:	a4 01       	movw	r20, r8
    cd30:	42 5e       	subi	r20, 0xE2	; 226
    cd32:	5f 4f       	sbci	r21, 0xFF	; 255
    cd34:	c5 01       	movw	r24, r10
    cd36:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    cd3a:	8d 2d       	mov	r24, r13
    cd3c:	0e 94 df 64 	call	0xc9be	; 0xc9be <remote_tds_get_type(unsigned char)>
    cd40:	38 2e       	mov	r3, r24
    cd42:	81 e0       	ldi	r24, 0x01	; 1
    cd44:	38 12       	cpse	r3, r24
    cd46:	8d c0       	rjmp	.+282    	; 0xce62 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x1f8>
    cd48:	6c ed       	ldi	r22, 0xDC	; 220
    cd4a:	7c e7       	ldi	r23, 0x7C	; 124
    cd4c:	c5 01       	movw	r24, r10
    cd4e:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    cd52:	21 e0       	ldi	r18, 0x01	; 1
    cd54:	a4 01       	movw	r20, r8
    cd56:	44 5c       	subi	r20, 0xC4	; 196
    cd58:	5f 4f       	sbci	r21, 0xFF	; 255
    cd5a:	b3 01       	movw	r22, r6
    cd5c:	c5 01       	movw	r24, r10
    cd5e:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    cd62:	8d 2d       	mov	r24, r13
    cd64:	0e 94 f4 65 	call	0xcbe8	; 0xcbe8 <remote_tds_get_data(unsigned char)>
    cd68:	bc 01       	movw	r22, r24
    cd6a:	99 0f       	add	r25, r25
    cd6c:	88 0b       	sbc	r24, r24
    cd6e:	99 0b       	sbc	r25, r25
    cd70:	0f 94 f7 14 	call	0x229ee	; 0x229ee <__floatsisf>
    cd74:	20 e0       	ldi	r18, 0x00	; 0
    cd76:	30 e0       	ldi	r19, 0x00	; 0
    cd78:	4a e7       	ldi	r20, 0x7A	; 122
    cd7a:	54 e4       	ldi	r21, 0x44	; 68
    cd7c:	0f 94 4d 14 	call	0x2289a	; 0x2289a <__divsf3>
    cd80:	85 01       	movw	r16, r10
    cd82:	22 e0       	ldi	r18, 0x02	; 2
    cd84:	44 e0       	ldi	r20, 0x04	; 4
    cd86:	0f 94 c0 16 	call	0x22d80	; 0x22d80 <dtostrf>
    cd8a:	68 e2       	ldi	r22, 0x28	; 40
    cd8c:	76 e0       	ldi	r23, 0x06	; 6
    cd8e:	c5 01       	movw	r24, r10
    cd90:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    cd94:	2e 01       	movw	r4, r28
    cd96:	91 e2       	ldi	r25, 0x21	; 33
    cd98:	49 0e       	add	r4, r25
    cd9a:	51 1c       	adc	r5, r1
    cd9c:	6f e1       	ldi	r22, 0x1F	; 31
    cd9e:	75 e8       	ldi	r23, 0x85	; 133
    cda0:	c2 01       	movw	r24, r4
    cda2:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    cda6:	b5 01       	movw	r22, r10
    cda8:	c2 01       	movw	r24, r4
    cdaa:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    cdae:	10 e0       	ldi	r17, 0x00	; 0
    cdb0:	00 e0       	ldi	r16, 0x00	; 0
    cdb2:	22 e0       	ldi	r18, 0x02	; 2
    cdb4:	a4 01       	movw	r20, r8
    cdb6:	40 5b       	subi	r20, 0xB0	; 176
    cdb8:	5f 4f       	sbci	r21, 0xFF	; 255
    cdba:	b3 01       	movw	r22, r6
    cdbc:	c2 01       	movw	r24, r4
    cdbe:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    cdc2:	8d 2d       	mov	r24, r13
    cdc4:	0e 94 23 66 	call	0xcc46	; 0xcc46 <remote_tds_get_last_update(unsigned char)>
    cdc8:	d8 2e       	mov	r13, r24
    cdca:	67 e7       	ldi	r22, 0x77	; 119
    cdcc:	72 e8       	ldi	r23, 0x82	; 130
    cdce:	c2 01       	movw	r24, r4
    cdd0:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    cdd4:	1f 92       	push	r1
    cdd6:	df 92       	push	r13
    cdd8:	5f 92       	push	r5
    cdda:	4f 92       	push	r4
    cddc:	81 e4       	ldi	r24, 0x41	; 65
    cdde:	93 e0       	ldi	r25, 0x03	; 3
    cde0:	9f 93       	push	r25
    cde2:	8f 93       	push	r24
    cde4:	bf 92       	push	r11
    cde6:	af 92       	push	r10
    cde8:	0f 94 a6 1b 	call	0x2374c	; 0x2374c <sprintf>
    cdec:	21 e0       	ldi	r18, 0x01	; 1
    cdee:	a4 01       	movw	r20, r8
    cdf0:	4c 59       	subi	r20, 0x9C	; 156
    cdf2:	5f 4f       	sbci	r21, 0xFF	; 255
    cdf4:	b3 01       	movw	r22, r6
    cdf6:	c5 01       	movw	r24, r10
    cdf8:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    cdfc:	0f b6       	in	r0, 0x3f	; 63
    cdfe:	f8 94       	cli
    ce00:	de bf       	out	0x3e, r29	; 62
    ce02:	0f be       	out	0x3f, r0	; 63
    ce04:	cd bf       	out	0x3d, r28	; 61
    ce06:	99 ef       	ldi	r25, 0xF9	; 249
    ce08:	9d 15       	cp	r25, r13
    ce0a:	08 f4       	brcc	.+2      	; 0xce0e <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x1a4>
    ce0c:	43 c0       	rjmp	.+134    	; 0xce94 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x22a>
    ce0e:	2e 96       	adiw	r28, 0x0e	; 14
    ce10:	3f ae       	std	Y+63, r3	; 0x3f
    ce12:	2e 97       	sbiw	r28, 0x0e	; 14
    ce14:	6d e8       	ldi	r22, 0x8D	; 141
    ce16:	72 e8       	ldi	r23, 0x82	; 130
    ce18:	c2 01       	movw	r24, r4
    ce1a:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    ce1e:	2e 96       	adiw	r28, 0x0e	; 14
    ce20:	8f ad       	ldd	r24, Y+63	; 0x3f
    ce22:	2e 97       	sbiw	r28, 0x0e	; 14
    ce24:	1f 92       	push	r1
    ce26:	8f 93       	push	r24
    ce28:	5f 92       	push	r5
    ce2a:	4f 92       	push	r4
    ce2c:	81 e4       	ldi	r24, 0x41	; 65
    ce2e:	93 e0       	ldi	r25, 0x03	; 3
    ce30:	9f 93       	push	r25
    ce32:	8f 93       	push	r24
    ce34:	bf 92       	push	r11
    ce36:	af 92       	push	r10
    ce38:	0f 94 a6 1b 	call	0x2374c	; 0x2374c <sprintf>
    ce3c:	a4 01       	movw	r20, r8
    ce3e:	48 58       	subi	r20, 0x88	; 136
    ce40:	5f 4f       	sbci	r21, 0xFF	; 255
    ce42:	c1 2c       	mov	r12, r1
    ce44:	ee 24       	eor	r14, r14
    ce46:	ea 94       	dec	r14
    ce48:	fe 2c       	mov	r15, r14
    ce4a:	10 e0       	ldi	r17, 0x00	; 0
    ce4c:	00 e0       	ldi	r16, 0x00	; 0
    ce4e:	22 e0       	ldi	r18, 0x02	; 2
    ce50:	b3 01       	movw	r22, r6
    ce52:	c5 01       	movw	r24, r10
    ce54:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    ce58:	0f b6       	in	r0, 0x3f	; 63
    ce5a:	f8 94       	cli
    ce5c:	de bf       	out	0x3e, r29	; 62
    ce5e:	0f be       	out	0x3f, r0	; 63
    ce60:	cd bf       	out	0x3d, r28	; 61
    ce62:	c3 5b       	subi	r28, 0xB3	; 179
    ce64:	df 4f       	sbci	r29, 0xFF	; 255
    ce66:	0f b6       	in	r0, 0x3f	; 63
    ce68:	f8 94       	cli
    ce6a:	de bf       	out	0x3e, r29	; 62
    ce6c:	0f be       	out	0x3f, r0	; 63
    ce6e:	cd bf       	out	0x3d, r28	; 61
    ce70:	df 91       	pop	r29
    ce72:	cf 91       	pop	r28
    ce74:	1f 91       	pop	r17
    ce76:	0f 91       	pop	r16
    ce78:	ff 90       	pop	r15
    ce7a:	ef 90       	pop	r14
    ce7c:	df 90       	pop	r13
    ce7e:	cf 90       	pop	r12
    ce80:	bf 90       	pop	r11
    ce82:	af 90       	pop	r10
    ce84:	9f 90       	pop	r9
    ce86:	8f 90       	pop	r8
    ce88:	7f 90       	pop	r7
    ce8a:	6f 90       	pop	r6
    ce8c:	5f 90       	pop	r5
    ce8e:	4f 90       	pop	r4
    ce90:	3f 90       	pop	r3
    ce92:	08 95       	ret
    ce94:	2e 96       	adiw	r28, 0x0e	; 14
    ce96:	1f ae       	std	Y+63, r1	; 0x3f
    ce98:	2e 97       	sbiw	r28, 0x0e	; 14
    ce9a:	bc cf       	rjmp	.-136    	; 0xce14 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x1aa>

0000ce9c <remote_tds_set_last_update(unsigned char, unsigned char)>:
_Z26remote_tds_set_last_updatehh():
    ce9c:	8a 30       	cpi	r24, 0x0A	; 10
    ce9e:	78 f4       	brcc	.+30     	; 0xcebe <remote_tds_set_last_update(unsigned char, unsigned char)+0x22>
    cea0:	26 2f       	mov	r18, r22
    cea2:	94 e0       	ldi	r25, 0x04	; 4
    cea4:	89 9f       	mul	r24, r25
    cea6:	a0 01       	movw	r20, r0
    cea8:	11 24       	eor	r1, r1
    ceaa:	4a 59       	subi	r20, 0x9A	; 154
    ceac:	5f 4f       	sbci	r21, 0xFF	; 255
    ceae:	05 2e       	mov	r0, r21
    ceb0:	00 0c       	add	r0, r0
    ceb2:	66 0b       	sbc	r22, r22
    ceb4:	77 0b       	sbc	r23, r23
    ceb6:	89 e7       	ldi	r24, 0x79	; 121
    ceb8:	9b e0       	ldi	r25, 0x0B	; 11
    ceba:	0e 94 72 d4 	call	0x1a8e4	; 0x1a8e4 <SRAM_23LC::writeByte(unsigned long, unsigned char)>
    cebe:	08 95       	ret

0000cec0 <remote_tds_inc_last_update(unsigned char)>:
_Z26remote_tds_inc_last_updateh():
    cec0:	cf 92       	push	r12
    cec2:	df 92       	push	r13
    cec4:	ef 92       	push	r14
    cec6:	ff 92       	push	r15
    cec8:	8a 30       	cpi	r24, 0x0A	; 10
    ceca:	d8 f4       	brcc	.+54     	; 0xcf02 <remote_tds_inc_last_update(unsigned char)+0x42>
    cecc:	94 e0       	ldi	r25, 0x04	; 4
    cece:	89 9f       	mul	r24, r25
    ced0:	60 01       	movw	r12, r0
    ced2:	11 24       	eor	r1, r1
    ced4:	86 e6       	ldi	r24, 0x66	; 102
    ced6:	c8 0e       	add	r12, r24
    ced8:	d1 1c       	adc	r13, r1
    ceda:	0d 2c       	mov	r0, r13
    cedc:	00 0c       	add	r0, r0
    cede:	ee 08       	sbc	r14, r14
    cee0:	ff 08       	sbc	r15, r15
    cee2:	b7 01       	movw	r22, r14
    cee4:	a6 01       	movw	r20, r12
    cee6:	89 e7       	ldi	r24, 0x79	; 121
    cee8:	9b e0       	ldi	r25, 0x0B	; 11
    ceea:	0e 94 4d d4 	call	0x1a89a	; 0x1a89a <SRAM_23LC::readByte(unsigned long)>
    ceee:	8a 3f       	cpi	r24, 0xFA	; 250
    cef0:	08 f4       	brcc	.+2      	; 0xcef4 <remote_tds_inc_last_update(unsigned char)+0x34>
    cef2:	8f 5f       	subi	r24, 0xFF	; 255
    cef4:	28 2f       	mov	r18, r24
    cef6:	b7 01       	movw	r22, r14
    cef8:	a6 01       	movw	r20, r12
    cefa:	89 e7       	ldi	r24, 0x79	; 121
    cefc:	9b e0       	ldi	r25, 0x0B	; 11
    cefe:	0e 94 72 d4 	call	0x1a8e4	; 0x1a8e4 <SRAM_23LC::writeByte(unsigned long, unsigned char)>
    cf02:	ff 90       	pop	r15
    cf04:	ef 90       	pop	r14
    cf06:	df 90       	pop	r13
    cf08:	cf 90       	pop	r12
    cf0a:	08 95       	ret

0000cf0c <remote_tds_update_last_update()>:
_Z29remote_tds_update_last_updatev():
    cf0c:	1f 93       	push	r17
    cf0e:	cf 93       	push	r28
    cf10:	df 93       	push	r29
    cf12:	1f 92       	push	r1
    cf14:	cd b7       	in	r28, 0x3d	; 61
    cf16:	de b7       	in	r29, 0x3e	; 62
    cf18:	10 e0       	ldi	r17, 0x00	; 0
    cf1a:	be 01       	movw	r22, r28
    cf1c:	6f 5f       	subi	r22, 0xFF	; 255
    cf1e:	7f 4f       	sbci	r23, 0xFF	; 255
    cf20:	81 2f       	mov	r24, r17
    cf22:	0e 94 00 63 	call	0xc600	; 0xc600 <remote_tds_get_active(unsigned char, unsigned char*)>
    cf26:	89 81       	ldd	r24, Y+1	; 0x01
    cf28:	81 30       	cpi	r24, 0x01	; 1
    cf2a:	19 f4       	brne	.+6      	; 0xcf32 <remote_tds_update_last_update()+0x26>
    cf2c:	81 2f       	mov	r24, r17
    cf2e:	0e 94 60 67 	call	0xcec0	; 0xcec0 <remote_tds_inc_last_update(unsigned char)>
    cf32:	1f 5f       	subi	r17, 0xFF	; 255
    cf34:	1a 30       	cpi	r17, 0x0A	; 10
    cf36:	89 f7       	brne	.-30     	; 0xcf1a <remote_tds_update_last_update()+0xe>
    cf38:	0f 90       	pop	r0
    cf3a:	df 91       	pop	r29
    cf3c:	cf 91       	pop	r28
    cf3e:	1f 91       	pop	r17
    cf40:	08 95       	ret

0000cf42 <set_default_ring(unsigned char)>:
_Z16set_default_ringh():
    cf42:	68 2f       	mov	r22, r24
    cf44:	8c e5       	ldi	r24, 0x5C	; 92
    cf46:	90 e0       	ldi	r25, 0x00	; 0
    cf48:	0c 94 90 51 	jmp	0xa320	; 0xa320 <EEPROMClass::write(int, unsigned char) [clone .isra.9]>

0000cf4c <term_ring_do_activate(unsigned int, unsigned int, unsigned char)>:
_Z21term_ring_do_activatejjh():
    cf4c:	cf 93       	push	r28
    cf4e:	c8 2f       	mov	r28, r24
    cf50:	61 e0       	ldi	r22, 0x01	; 1
    cf52:	0e 94 02 b8 	call	0x17004	; 0x17004 <thermostat_ring_set_active(unsigned char, unsigned char)>
    cf56:	80 91 3a 0b 	lds	r24, 0x0B3A	; 0x800b3a <default_ring>
    cf5a:	80 93 39 0b 	sts	0x0B39, r24	; 0x800b39 <last_default_ring>
    cf5e:	c0 93 3a 0b 	sts	0x0B3A, r28	; 0x800b3a <default_ring>
    cf62:	8c 2f       	mov	r24, r28
    cf64:	cf 91       	pop	r28
    cf66:	0c 94 a1 67 	jmp	0xcf42	; 0xcf42 <set_default_ring(unsigned char)>

0000cf6a <button_click_set_new_default_ring_in_dialog(unsigned int, unsigned int, unsigned char)>:
_Z43button_click_set_new_default_ring_in_dialogjjh():
    cf6a:	cf 93       	push	r28
    cf6c:	c4 2f       	mov	r28, r20
    cf6e:	84 2f       	mov	r24, r20
    cf70:	0e 94 fa b7 	call	0x16ff4	; 0x16ff4 <thermostat_ring_get_active(unsigned char)>
    cf74:	8f 3f       	cpi	r24, 0xFF	; 255
    cf76:	a1 f0       	breq	.+40     	; 0xcfa0 <button_click_set_new_default_ring_in_dialog(unsigned int, unsigned int, unsigned char)+0x36>
    cf78:	80 91 3a 0b 	lds	r24, 0x0B3A	; 0x800b3a <default_ring>
    cf7c:	80 93 39 0b 	sts	0x0B39, r24	; 0x800b39 <last_default_ring>
    cf80:	c0 93 3a 0b 	sts	0x0B3A, r28	; 0x800b3a <default_ring>
    cf84:	8c 2f       	mov	r24, r28
    cf86:	0e 94 a1 67 	call	0xcf42	; 0xcf42 <set_default_ring(unsigned char)>
_Z22MenuHistoryUpdateArgs1h():
    cf8a:	e0 91 64 0a 	lds	r30, 0x0A64	; 0x800a64 <MenuHistoryIndex>
    cf8e:	f0 e0       	ldi	r31, 0x00	; 0
    cf90:	eb 59       	subi	r30, 0x9B	; 155
    cf92:	f5 4f       	sbci	r31, 0xF5	; 245
    cf94:	c0 83       	st	Z, r28
_Z43button_click_set_new_default_ring_in_dialogjjh():
    cf96:	81 e0       	ldi	r24, 0x01	; 1
    cf98:	80 93 0b 0f 	sts	0x0F0B, r24	; 0x800f0b <display_redraw_default_ring>
    cf9c:	cf 91       	pop	r28
    cf9e:	08 95       	ret
    cfa0:	70 e0       	ldi	r23, 0x00	; 0
    cfa2:	60 e0       	ldi	r22, 0x00	; 0
    cfa4:	84 e6       	ldi	r24, 0x64	; 100
    cfa6:	90 e0       	ldi	r25, 0x00	; 0
    cfa8:	0e 94 c1 54 	call	0xa982	; 0xa982 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.59]>
    cfac:	86 ea       	ldi	r24, 0xA6	; 166
    cfae:	97 e6       	ldi	r25, 0x67	; 103
    cfb0:	90 93 63 0a 	sts	0x0A63, r25	; 0x800a63 <dialog_yes_function+0x1>
    cfb4:	80 93 62 0a 	sts	0x0A62, r24	; 0x800a62 <dialog_yes_function>
    cfb8:	c0 93 c3 0a 	sts	0x0AC3, r28	; 0x800ac3 <dialog_yes_args1>
    cfbc:	64 ef       	ldi	r22, 0xF4	; 244
    cfbe:	73 e8       	ldi	r23, 0x83	; 131
    cfc0:	83 ea       	ldi	r24, 0xA3	; 163
    cfc2:	9a e0       	ldi	r25, 0x0A	; 10
    cfc4:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    cfc8:	e6 cf       	rjmp	.-52     	; 0xcf96 <button_click_set_new_default_ring_in_dialog(unsigned int, unsigned int, unsigned char)+0x2c>

0000cfca <button_no_default_ring_onclick(unsigned int, unsigned int, unsigned char)>:
_Z30button_no_default_ring_onclickjjh():
    cfca:	80 91 3a 0b 	lds	r24, 0x0B3A	; 0x800b3a <default_ring>
    cfce:	80 93 39 0b 	sts	0x0B39, r24	; 0x800b39 <last_default_ring>
    cfd2:	8f ef       	ldi	r24, 0xFF	; 255
    cfd4:	80 93 3a 0b 	sts	0x0B3A, r24	; 0x800b3a <default_ring>
    cfd8:	0e 94 a1 67 	call	0xcf42	; 0xcf42 <set_default_ring(unsigned char)>
    cfdc:	81 e0       	ldi	r24, 0x01	; 1
    cfde:	80 93 0b 0f 	sts	0x0F0B, r24	; 0x800f0b <display_redraw_default_ring>
    cfe2:	08 95       	ret

0000cfe4 <get_default_ring()>:
_Z16get_default_ringv():
    cfe4:	8c e5       	ldi	r24, 0x5C	; 92
    cfe6:	90 e0       	ldi	r25, 0x00	; 0
    cfe8:	0c 94 8e 51 	jmp	0xa31c	; 0xa31c <EEPROMClass::read(int) [clone .isra.8]>

0000cfec <set_default_show_temp(unsigned char)>:
_Z21set_default_show_temph():
    cfec:	68 2f       	mov	r22, r24
    cfee:	8d e5       	ldi	r24, 0x5D	; 93
    cff0:	90 e0       	ldi	r25, 0x00	; 0
    cff2:	0c 94 90 51 	jmp	0xa320	; 0xa320 <EEPROMClass::write(int, unsigned char) [clone .isra.9]>

0000cff6 <button_click_set_show_default_temp(unsigned int, unsigned int, unsigned char)>:
_Z34button_click_set_show_default_tempjjh():
    cff6:	84 2f       	mov	r24, r20
    cff8:	40 93 38 0b 	sts	0x0B38, r20	; 0x800b38 <default_show_temp>
    cffc:	0c 94 f6 67 	jmp	0xcfec	; 0xcfec <set_default_show_temp(unsigned char)>

0000d000 <get_default_show_temp()>:
_Z21get_default_show_tempv():
    d000:	8d e5       	ldi	r24, 0x5D	; 93
    d002:	90 e0       	ldi	r25, 0x00	; 0
    d004:	0c 94 8e 51 	jmp	0xa31c	; 0xa31c <EEPROMClass::read(int) [clone .isra.8]>

0000d008 <tds_extended_memory_store()>:
_Z25tds_extended_memory_storev():
    d008:	1f 93       	push	r17
    d00a:	cf 93       	push	r28
    d00c:	df 93       	push	r29
    d00e:	cd b7       	in	r28, 0x3d	; 61
    d010:	de b7       	in	r29, 0x3e	; 62
    d012:	66 97       	sbiw	r28, 0x16	; 22
    d014:	0f b6       	in	r0, 0x3f	; 63
    d016:	f8 94       	cli
    d018:	de bf       	out	0x3e, r29	; 62
    d01a:	0f be       	out	0x3f, r0	; 63
    d01c:	cd bf       	out	0x3d, r28	; 61
    d01e:	10 e0       	ldi	r17, 0x00	; 0
    d020:	be 01       	movw	r22, r28
    d022:	6f 5f       	subi	r22, 0xFF	; 255
    d024:	7f 4f       	sbci	r23, 0xFF	; 255
    d026:	81 2f       	mov	r24, r17
    d028:	0e 94 40 b2 	call	0x16480	; 0x16480 <get_tds18s20(unsigned char, struct_DDS18s20*)>
    d02c:	1f 5f       	subi	r17, 0xFF	; 255
    d02e:	16 30       	cpi	r17, 0x06	; 6
    d030:	b9 f7       	brne	.-18     	; 0xd020 <tds_extended_memory_store()+0x18>
    d032:	66 96       	adiw	r28, 0x16	; 22
    d034:	0f b6       	in	r0, 0x3f	; 63
    d036:	f8 94       	cli
    d038:	de bf       	out	0x3e, r29	; 62
    d03a:	0f be       	out	0x3f, r0	; 63
    d03c:	cd bf       	out	0x3d, r28	; 61
    d03e:	df 91       	pop	r29
    d040:	cf 91       	pop	r28
    d042:	1f 91       	pop	r17
    d044:	08 95       	ret

0000d046 <mqtt_reconnect()>:
_Z14mqtt_reconnectv():
    d046:	0f 93       	push	r16
    d048:	1f 93       	push	r17
    d04a:	cf 93       	push	r28
    d04c:	df 93       	push	r29
    d04e:	cd b7       	in	r28, 0x3d	; 61
    d050:	de b7       	in	r29, 0x3e	; 62
    d052:	a4 97       	sbiw	r28, 0x24	; 36
    d054:	0f b6       	in	r0, 0x3f	; 63
    d056:	f8 94       	cli
    d058:	de bf       	out	0x3e, r29	; 62
    d05a:	0f be       	out	0x3f, r0	; 63
    d05c:	cd bf       	out	0x3d, r28	; 61
    d05e:	8c ea       	ldi	r24, 0xAC	; 172
    d060:	9e e0       	ldi	r25, 0x0E	; 14
    d062:	0e 94 de ed 	call	0x1dbbc	; 0x1dbbc <PubSubClient::connected()>
    d066:	81 11       	cpse	r24, r1
    d068:	98 c0       	rjmp	.+304    	; 0xd19a <mqtt_reconnect()+0x154>
    d06a:	ce 01       	movw	r24, r28
    d06c:	4b 96       	adiw	r24, 0x1b	; 27
    d06e:	0e 94 91 ab 	call	0x15722	; 0x15722 <device_get_name(char*)>
    d072:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
    d076:	00 91 66 0b 	lds	r16, 0x0B66	; 0x800b66 <lastmqttconnect>
    d07a:	10 91 67 0b 	lds	r17, 0x0B67	; 0x800b67 <lastmqttconnect+0x1>
    d07e:	20 91 68 0b 	lds	r18, 0x0B68	; 0x800b68 <lastmqttconnect+0x2>
    d082:	30 91 69 0b 	lds	r19, 0x0B69	; 0x800b69 <lastmqttconnect+0x3>
    d086:	06 17       	cp	r16, r22
    d088:	17 07       	cpc	r17, r23
    d08a:	28 07       	cpc	r18, r24
    d08c:	39 07       	cpc	r19, r25
    d08e:	0c f0       	brlt	.+2      	; 0xd092 <mqtt_reconnect()+0x4c>
    d090:	84 c0       	rjmp	.+264    	; 0xd19a <mqtt_reconnect()+0x154>
    d092:	68 57       	subi	r22, 0x78	; 120
    d094:	7c 4e       	sbci	r23, 0xEC	; 236
    d096:	8f 4f       	sbci	r24, 0xFF	; 255
    d098:	9f 4f       	sbci	r25, 0xFF	; 255
    d09a:	60 93 66 0b 	sts	0x0B66, r22	; 0x800b66 <lastmqttconnect>
    d09e:	70 93 67 0b 	sts	0x0B67, r23	; 0x800b67 <lastmqttconnect+0x1>
    d0a2:	80 93 68 0b 	sts	0x0B68, r24	; 0x800b68 <lastmqttconnect+0x2>
    d0a6:	90 93 69 0b 	sts	0x0B69, r25	; 0x800b69 <lastmqttconnect+0x3>
    d0aa:	be 01       	movw	r22, r28
    d0ac:	65 5e       	subi	r22, 0xE5	; 229
    d0ae:	7f 4f       	sbci	r23, 0xFF	; 255
    d0b0:	8c ea       	ldi	r24, 0xAC	; 172
    d0b2:	9e e0       	ldi	r25, 0x0E	; 14
    d0b4:	0e 94 df ef 	call	0x1dfbe	; 0x1dfbe <PubSubClient::connect(char const*)>
    d0b8:	88 23       	and	r24, r24
    d0ba:	09 f4       	brne	.+2      	; 0xd0be <mqtt_reconnect()+0x78>
    d0bc:	6e c0       	rjmp	.+220    	; 0xd19a <mqtt_reconnect()+0x154>
    d0be:	60 e8       	ldi	r22, 0x80	; 128
    d0c0:	71 e8       	ldi	r23, 0x81	; 129
    d0c2:	ce 01       	movw	r24, r28
    d0c4:	01 96       	adiw	r24, 0x01	; 1
    d0c6:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    d0ca:	be 01       	movw	r22, r28
    d0cc:	65 5e       	subi	r22, 0xE5	; 229
    d0ce:	7f 4f       	sbci	r23, 0xFF	; 255
    d0d0:	ce 01       	movw	r24, r28
    d0d2:	01 96       	adiw	r24, 0x01	; 1
    d0d4:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    d0d8:	67 e9       	ldi	r22, 0x97	; 151
    d0da:	73 e0       	ldi	r23, 0x03	; 3
    d0dc:	ce 01       	movw	r24, r28
    d0de:	01 96       	adiw	r24, 0x01	; 1
    d0e0:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    d0e4:	be 01       	movw	r22, r28
    d0e6:	6f 5f       	subi	r22, 0xFF	; 255
    d0e8:	7f 4f       	sbci	r23, 0xFF	; 255
    d0ea:	8c ea       	ldi	r24, 0xAC	; 172
    d0ec:	9e e0       	ldi	r25, 0x0E	; 14
    d0ee:	0e 94 64 f2 	call	0x1e4c8	; 0x1e4c8 <PubSubClient::subscribe(char const*)>
    d0f2:	60 e8       	ldi	r22, 0x80	; 128
    d0f4:	71 e8       	ldi	r23, 0x81	; 129
    d0f6:	ce 01       	movw	r24, r28
    d0f8:	01 96       	adiw	r24, 0x01	; 1
    d0fa:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    d0fe:	61 e9       	ldi	r22, 0x91	; 145
    d100:	73 e0       	ldi	r23, 0x03	; 3
    d102:	ce 01       	movw	r24, r28
    d104:	01 96       	adiw	r24, 0x01	; 1
    d106:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    d10a:	be 01       	movw	r22, r28
    d10c:	6f 5f       	subi	r22, 0xFF	; 255
    d10e:	7f 4f       	sbci	r23, 0xFF	; 255
    d110:	8c ea       	ldi	r24, 0xAC	; 172
    d112:	9e e0       	ldi	r25, 0x0E	; 14
    d114:	0e 94 64 f2 	call	0x1e4c8	; 0x1e4c8 <PubSubClient::subscribe(char const*)>
    d118:	10 e0       	ldi	r17, 0x00	; 0
    d11a:	81 2f       	mov	r24, r17
    d11c:	0e 94 6d 63 	call	0xc6da	; 0xc6da <remote_tds_subscibe_topic(unsigned char)>
    d120:	1f 5f       	subi	r17, 0xFF	; 255
    d122:	1a 30       	cpi	r17, 0x0A	; 10
    d124:	d1 f7       	brne	.-12     	; 0xd11a <mqtt_reconnect()+0xd4>
    d126:	67 e4       	ldi	r22, 0x47	; 71
    d128:	71 e8       	ldi	r23, 0x81	; 129
    d12a:	ce 01       	movw	r24, r28
    d12c:	01 96       	adiw	r24, 0x01	; 1
    d12e:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    d132:	67 e9       	ldi	r22, 0x97	; 151
    d134:	73 e0       	ldi	r23, 0x03	; 3
    d136:	ce 01       	movw	r24, r28
    d138:	01 96       	adiw	r24, 0x01	; 1
    d13a:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    d13e:	be 01       	movw	r22, r28
    d140:	6f 5f       	subi	r22, 0xFF	; 255
    d142:	7f 4f       	sbci	r23, 0xFF	; 255
    d144:	8c ea       	ldi	r24, 0xAC	; 172
    d146:	9e e0       	ldi	r25, 0x0E	; 14
    d148:	0e 94 64 f2 	call	0x1e4c8	; 0x1e4c8 <PubSubClient::subscribe(char const*)>
    d14c:	6f e2       	ldi	r22, 0x2F	; 47
    d14e:	71 e8       	ldi	r23, 0x81	; 129
    d150:	ce 01       	movw	r24, r28
    d152:	01 96       	adiw	r24, 0x01	; 1
    d154:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    d158:	be 01       	movw	r22, r28
    d15a:	6f 5f       	subi	r22, 0xFF	; 255
    d15c:	7f 4f       	sbci	r23, 0xFF	; 255
    d15e:	8c ea       	ldi	r24, 0xAC	; 172
    d160:	9e e0       	ldi	r25, 0x0E	; 14
    d162:	0e 94 64 f2 	call	0x1e4c8	; 0x1e4c8 <PubSubClient::subscribe(char const*)>
    d166:	68 e1       	ldi	r22, 0x18	; 24
    d168:	71 e8       	ldi	r23, 0x81	; 129
    d16a:	ce 01       	movw	r24, r28
    d16c:	01 96       	adiw	r24, 0x01	; 1
    d16e:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    d172:	be 01       	movw	r22, r28
    d174:	6f 5f       	subi	r22, 0xFF	; 255
    d176:	7f 4f       	sbci	r23, 0xFF	; 255
    d178:	8c ea       	ldi	r24, 0xAC	; 172
    d17a:	9e e0       	ldi	r25, 0x0E	; 14
    d17c:	0e 94 64 f2 	call	0x1e4c8	; 0x1e4c8 <PubSubClient::subscribe(char const*)>
    d180:	66 e5       	ldi	r22, 0x56	; 86
    d182:	71 e8       	ldi	r23, 0x81	; 129
    d184:	ce 01       	movw	r24, r28
    d186:	01 96       	adiw	r24, 0x01	; 1
    d188:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    d18c:	be 01       	movw	r22, r28
    d18e:	6f 5f       	subi	r22, 0xFF	; 255
    d190:	7f 4f       	sbci	r23, 0xFF	; 255
    d192:	8c ea       	ldi	r24, 0xAC	; 172
    d194:	9e e0       	ldi	r25, 0x0E	; 14
    d196:	0e 94 64 f2 	call	0x1e4c8	; 0x1e4c8 <PubSubClient::subscribe(char const*)>
    d19a:	8c ea       	ldi	r24, 0xAC	; 172
    d19c:	9e e0       	ldi	r25, 0x0E	; 14
    d19e:	0e 94 eb f2 	call	0x1e5d6	; 0x1e5d6 <PubSubClient::state()>
    d1a2:	a4 96       	adiw	r28, 0x24	; 36
    d1a4:	0f b6       	in	r0, 0x3f	; 63
    d1a6:	f8 94       	cli
    d1a8:	de bf       	out	0x3e, r29	; 62
    d1aa:	0f be       	out	0x3f, r0	; 63
    d1ac:	cd bf       	out	0x3d, r28	; 61
    d1ae:	df 91       	pop	r29
    d1b0:	cf 91       	pop	r28
    d1b2:	1f 91       	pop	r17
    d1b4:	0f 91       	pop	r16
    d1b6:	08 95       	ret

0000d1b8 <send_mqtt_onewire()>:
_Z17send_mqtt_onewirev():
    d1b8:	bf 92       	push	r11
    d1ba:	cf 92       	push	r12
    d1bc:	df 92       	push	r13
    d1be:	ef 92       	push	r14
    d1c0:	ff 92       	push	r15
    d1c2:	0f 93       	push	r16
    d1c4:	1f 93       	push	r17
    d1c6:	cf 93       	push	r28
    d1c8:	df 93       	push	r29
    d1ca:	cd b7       	in	r28, 0x3d	; 61
    d1cc:	de b7       	in	r29, 0x3e	; 62
    d1ce:	c0 54       	subi	r28, 0x40	; 64
    d1d0:	d1 09       	sbc	r29, r1
    d1d2:	0f b6       	in	r0, 0x3f	; 63
    d1d4:	f8 94       	cli
    d1d6:	de bf       	out	0x3e, r29	; 62
    d1d8:	0f be       	out	0x3f, r0	; 63
    d1da:	cd bf       	out	0x3d, r28	; 61
    d1dc:	80 91 dd 10 	lds	r24, 0x10DD	; 0x8010dd <Global_HWwirenum>
itoa():
    d1e0:	4a e0       	ldi	r20, 0x0A	; 10
    d1e2:	be 01       	movw	r22, r28
    d1e4:	6f 5f       	subi	r22, 0xFF	; 255
    d1e6:	7f 4f       	sbci	r23, 0xFF	; 255
    d1e8:	90 e0       	ldi	r25, 0x00	; 0
    d1ea:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z17send_mqtt_onewirev():
    d1ee:	ae 01       	movw	r20, r28
    d1f0:	4f 5f       	subi	r20, 0xFF	; 255
    d1f2:	5f 4f       	sbci	r21, 0xFF	; 255
    d1f4:	6a e9       	ldi	r22, 0x9A	; 154
    d1f6:	73 e0       	ldi	r23, 0x03	; 3
    d1f8:	8c ea       	ldi	r24, 0xAC	; 172
    d1fa:	9e e0       	ldi	r25, 0x0E	; 14
    d1fc:	0e 94 d2 ad 	call	0x15ba4	; 0x15ba4 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    d200:	f1 2c       	mov	r15, r1
    d202:	9b e0       	ldi	r25, 0x0B	; 11
    d204:	b9 2e       	mov	r11, r25
    d206:	80 91 dd 10 	lds	r24, 0x10DD	; 0x8010dd <Global_HWwirenum>
    d20a:	f8 16       	cp	r15, r24
    d20c:	08 f0       	brcs	.+2      	; 0xd210 <send_mqtt_onewire()+0x58>
    d20e:	3f c0       	rjmp	.+126    	; 0xd28e <send_mqtt_onewire()+0xd6>
    d210:	fb 9c       	mul	r15, r11
    d212:	c0 01       	movw	r24, r0
    d214:	11 24       	eor	r1, r1
    d216:	9c 01       	movw	r18, r24
    d218:	25 56       	subi	r18, 0x65	; 101
    d21a:	3f 4e       	sbci	r19, 0xEF	; 239
    d21c:	69 01       	movw	r12, r18
    d21e:	82 e0       	ldi	r24, 0x02	; 2
    d220:	e8 2e       	mov	r14, r24
    d222:	00 e1       	ldi	r16, 0x10	; 16
    d224:	28 e0       	ldi	r18, 0x08	; 8
    d226:	a6 01       	movw	r20, r12
    d228:	6a e3       	ldi	r22, 0x3A	; 58
    d22a:	ce 01       	movw	r24, r28
    d22c:	01 96       	adiw	r24, 0x01	; 1
    d22e:	0e 94 e9 e4 	call	0x1c9d2	; 0x1c9d2 <createString(char*, char, unsigned char*, unsigned char, unsigned char, unsigned char)>
    d232:	8e 01       	movw	r16, r28
    d234:	0f 5f       	subi	r16, 0xFF	; 255
    d236:	1f 4f       	sbci	r17, 0xFF	; 255
    d238:	26 ea       	ldi	r18, 0xA6	; 166
    d23a:	33 e0       	ldi	r19, 0x03	; 3
    d23c:	4f 2d       	mov	r20, r15
    d23e:	6a ea       	ldi	r22, 0xAA	; 170
    d240:	73 e0       	ldi	r23, 0x03	; 3
    d242:	8c ea       	ldi	r24, 0xAC	; 172
    d244:	9e e0       	ldi	r25, 0x0E	; 14
    d246:	0e 94 a9 ac 	call	0x15952	; 0x15952 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    d24a:	f6 01       	movw	r30, r12
    d24c:	80 85       	ldd	r24, Z+8	; 0x08
itoa():
    d24e:	4a e0       	ldi	r20, 0x0A	; 10
    d250:	b8 01       	movw	r22, r16
    d252:	90 e0       	ldi	r25, 0x00	; 0
    d254:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z17send_mqtt_onewirev():
    d258:	20 eb       	ldi	r18, 0xB0	; 176
    d25a:	33 e0       	ldi	r19, 0x03	; 3
    d25c:	4f 2d       	mov	r20, r15
    d25e:	6a ea       	ldi	r22, 0xAA	; 170
    d260:	73 e0       	ldi	r23, 0x03	; 3
    d262:	8c ea       	ldi	r24, 0xAC	; 172
    d264:	9e e0       	ldi	r25, 0x0E	; 14
    d266:	0e 94 a9 ac 	call	0x15952	; 0x15952 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    d26a:	f6 01       	movw	r30, r12
    d26c:	82 85       	ldd	r24, Z+10	; 0x0a
itoa():
    d26e:	4a e0       	ldi	r20, 0x0A	; 10
    d270:	b8 01       	movw	r22, r16
    d272:	90 e0       	ldi	r25, 0x00	; 0
    d274:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z17send_mqtt_onewirev():
    d278:	29 eb       	ldi	r18, 0xB9	; 185
    d27a:	33 e0       	ldi	r19, 0x03	; 3
    d27c:	4f 2d       	mov	r20, r15
    d27e:	6a ea       	ldi	r22, 0xAA	; 170
    d280:	73 e0       	ldi	r23, 0x03	; 3
    d282:	8c ea       	ldi	r24, 0xAC	; 172
    d284:	9e e0       	ldi	r25, 0x0E	; 14
    d286:	0e 94 a9 ac 	call	0x15952	; 0x15952 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    d28a:	f3 94       	inc	r15
    d28c:	bc cf       	rjmp	.-136    	; 0xd206 <send_mqtt_onewire()+0x4e>
    d28e:	c0 5c       	subi	r28, 0xC0	; 192
    d290:	df 4f       	sbci	r29, 0xFF	; 255
    d292:	0f b6       	in	r0, 0x3f	; 63
    d294:	f8 94       	cli
    d296:	de bf       	out	0x3e, r29	; 62
    d298:	0f be       	out	0x3f, r0	; 63
    d29a:	cd bf       	out	0x3d, r28	; 61
    d29c:	df 91       	pop	r29
    d29e:	cf 91       	pop	r28
    d2a0:	1f 91       	pop	r17
    d2a2:	0f 91       	pop	r16
    d2a4:	ff 90       	pop	r15
    d2a6:	ef 90       	pop	r14
    d2a8:	df 90       	pop	r13
    d2aa:	cf 90       	pop	r12
    d2ac:	bf 90       	pop	r11
    d2ae:	08 95       	ret

0000d2b0 <send_mqtt_tds()>:
_Z13send_mqtt_tdsv():
    d2b0:	2f 92       	push	r2
    d2b2:	3f 92       	push	r3
    d2b4:	4f 92       	push	r4
    d2b6:	5f 92       	push	r5
    d2b8:	6f 92       	push	r6
    d2ba:	7f 92       	push	r7
    d2bc:	8f 92       	push	r8
    d2be:	9f 92       	push	r9
    d2c0:	af 92       	push	r10
    d2c2:	bf 92       	push	r11
    d2c4:	cf 92       	push	r12
    d2c6:	df 92       	push	r13
    d2c8:	ef 92       	push	r14
    d2ca:	ff 92       	push	r15
    d2cc:	0f 93       	push	r16
    d2ce:	1f 93       	push	r17
    d2d0:	cf 93       	push	r28
    d2d2:	df 93       	push	r29
    d2d4:	cd b7       	in	r28, 0x3d	; 61
    d2d6:	de b7       	in	r29, 0x3e	; 62
    d2d8:	c6 55       	subi	r28, 0x56	; 86
    d2da:	d1 09       	sbc	r29, r1
    d2dc:	0f b6       	in	r0, 0x3f	; 63
    d2de:	f8 94       	cli
    d2e0:	de bf       	out	0x3e, r29	; 62
    d2e2:	0f be       	out	0x3f, r0	; 63
    d2e4:	cd bf       	out	0x3d, r28	; 61
    d2e6:	3e ed       	ldi	r19, 0xDE	; 222
    d2e8:	c3 2e       	mov	r12, r19
    d2ea:	30 e1       	ldi	r19, 0x10	; 16
    d2ec:	d3 2e       	mov	r13, r19
    d2ee:	f1 2c       	mov	r15, r1
    d2f0:	4a e0       	ldi	r20, 0x0A	; 10
    d2f2:	a4 2e       	mov	r10, r20
    d2f4:	b1 2c       	mov	r11, r1
    d2f6:	54 e6       	ldi	r21, 0x64	; 100
    d2f8:	25 2e       	mov	r2, r21
    d2fa:	31 2c       	mov	r3, r1
    d2fc:	41 2c       	mov	r4, r1
    d2fe:	51 2c       	mov	r5, r1
    d300:	61 e4       	ldi	r22, 0x41	; 65
    d302:	86 2e       	mov	r8, r22
    d304:	91 2c       	mov	r9, r1
    d306:	8c 0e       	add	r8, r28
    d308:	9d 1e       	adc	r9, r29
    d30a:	8c e0       	ldi	r24, 0x0C	; 12
    d30c:	88 0e       	add	r8, r24
    d30e:	91 1c       	adc	r9, r1
    d310:	71 e4       	ldi	r23, 0x41	; 65
    d312:	67 2e       	mov	r6, r23
    d314:	71 2c       	mov	r7, r1
    d316:	6c 0e       	add	r6, r28
    d318:	7d 1e       	adc	r7, r29
    d31a:	ef ef       	ldi	r30, 0xFF	; 255
    d31c:	6e 1a       	sub	r6, r30
    d31e:	7e 0a       	sbc	r7, r30
    d320:	be 01       	movw	r22, r28
    d322:	6f 5b       	subi	r22, 0xBF	; 191
    d324:	7f 4f       	sbci	r23, 0xFF	; 255
    d326:	8f 2d       	mov	r24, r15
    d328:	0e 94 40 b2 	call	0x16480	; 0x16480 <get_tds18s20(unsigned char, struct_DDS18s20*)>
    d32c:	81 30       	cpi	r24, 0x01	; 1
    d32e:	09 f0       	breq	.+2      	; 0xd332 <send_mqtt_tds()+0x82>
    d330:	bc c0       	rjmp	.+376    	; 0xd4aa <send_mqtt_tds()+0x1fa>
    d332:	22 96       	adiw	r28, 0x02	; 2
    d334:	8f ad       	ldd	r24, Y+63	; 0x3f
    d336:	22 97       	sbiw	r28, 0x02	; 2
    d338:	81 30       	cpi	r24, 0x01	; 1
    d33a:	09 f0       	breq	.+2      	; 0xd33e <send_mqtt_tds()+0x8e>
    d33c:	b6 c0       	rjmp	.+364    	; 0xd4aa <send_mqtt_tds()+0x1fa>
    d33e:	f6 01       	movw	r30, r12
    d340:	83 8d       	ldd	r24, Z+27	; 0x1b
    d342:	81 30       	cpi	r24, 0x01	; 1
    d344:	09 f0       	breq	.+2      	; 0xd348 <send_mqtt_tds()+0x98>
    d346:	b1 c0       	rjmp	.+354    	; 0xd4aa <send_mqtt_tds()+0x1fa>
    d348:	85 81       	ldd	r24, Z+5	; 0x05
    d34a:	96 81       	ldd	r25, Z+6	; 0x06
    d34c:	b5 01       	movw	r22, r10
    d34e:	0f 94 49 16 	call	0x22c92	; 0x22c92 <__divmodhi4>
    d352:	cb 01       	movw	r24, r22
itoa():
    d354:	4a e0       	ldi	r20, 0x0A	; 10
    d356:	be 01       	movw	r22, r28
    d358:	6f 5f       	subi	r22, 0xFF	; 255
    d35a:	7f 4f       	sbci	r23, 0xFF	; 255
    d35c:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z13send_mqtt_tdsv():
    d360:	8e 01       	movw	r16, r28
    d362:	0f 5f       	subi	r16, 0xFF	; 255
    d364:	1f 4f       	sbci	r17, 0xFF	; 255
    d366:	26 e9       	ldi	r18, 0x96	; 150
    d368:	35 e0       	ldi	r19, 0x05	; 5
    d36a:	4f 2d       	mov	r20, r15
    d36c:	66 e1       	ldi	r22, 0x16	; 22
    d36e:	74 e0       	ldi	r23, 0x04	; 4
    d370:	8c ea       	ldi	r24, 0xAC	; 172
    d372:	9e e0       	ldi	r25, 0x0E	; 14
    d374:	0e 94 a9 ac 	call	0x15952	; 0x15952 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    d378:	50 e0       	ldi	r21, 0x00	; 0
    d37a:	40 e0       	ldi	r20, 0x00	; 0
    d37c:	60 e0       	ldi	r22, 0x00	; 0
    d37e:	70 e0       	ldi	r23, 0x00	; 0
    d380:	cb 01       	movw	r24, r22
    d382:	fa 01       	movw	r30, r20
    d384:	ee 0f       	add	r30, r30
    d386:	ff 1f       	adc	r31, r31
    d388:	ec 0d       	add	r30, r12
    d38a:	fd 1d       	adc	r31, r13
    d38c:	07 81       	ldd	r16, Z+7	; 0x07
    d38e:	10 85       	ldd	r17, Z+8	; 0x08
    d390:	01 2e       	mov	r0, r17
    d392:	00 0c       	add	r0, r0
    d394:	22 0b       	sbc	r18, r18
    d396:	33 0b       	sbc	r19, r19
    d398:	60 0f       	add	r22, r16
    d39a:	71 1f       	adc	r23, r17
    d39c:	82 1f       	adc	r24, r18
    d39e:	93 1f       	adc	r25, r19
    d3a0:	4f 5f       	subi	r20, 0xFF	; 255
    d3a2:	5f 4f       	sbci	r21, 0xFF	; 255
    d3a4:	4a 30       	cpi	r20, 0x0A	; 10
    d3a6:	51 05       	cpc	r21, r1
    d3a8:	61 f7       	brne	.-40     	; 0xd382 <send_mqtt_tds()+0xd2>
    d3aa:	a2 01       	movw	r20, r4
    d3ac:	91 01       	movw	r18, r2
    d3ae:	0f 94 7f 16 	call	0x22cfe	; 0x22cfe <__divmodsi4>
    d3b2:	c9 01       	movw	r24, r18
itoa():
    d3b4:	4a e0       	ldi	r20, 0x0A	; 10
    d3b6:	be 01       	movw	r22, r28
    d3b8:	6f 5f       	subi	r22, 0xFF	; 255
    d3ba:	7f 4f       	sbci	r23, 0xFF	; 255
    d3bc:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z13send_mqtt_tdsv():
    d3c0:	8e 01       	movw	r16, r28
    d3c2:	0f 5f       	subi	r16, 0xFF	; 255
    d3c4:	1f 4f       	sbci	r17, 0xFF	; 255
    d3c6:	21 ec       	ldi	r18, 0xC1	; 193
    d3c8:	33 e0       	ldi	r19, 0x03	; 3
    d3ca:	4f 2d       	mov	r20, r15
    d3cc:	66 e1       	ldi	r22, 0x16	; 22
    d3ce:	74 e0       	ldi	r23, 0x04	; 4
    d3d0:	8c ea       	ldi	r24, 0xAC	; 172
    d3d2:	9e e0       	ldi	r25, 0x0E	; 14
    d3d4:	0e 94 a9 ac 	call	0x15952	; 0x15952 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    d3d8:	b4 01       	movw	r22, r8
    d3da:	c8 01       	movw	r24, r16
    d3dc:	0f 94 67 1a 	call	0x234ce	; 0x234ce <strcpy>
    d3e0:	2a ec       	ldi	r18, 0xCA	; 202
    d3e2:	33 e0       	ldi	r19, 0x03	; 3
    d3e4:	4f 2d       	mov	r20, r15
    d3e6:	66 e1       	ldi	r22, 0x16	; 22
    d3e8:	74 e0       	ldi	r23, 0x04	; 4
    d3ea:	8c ea       	ldi	r24, 0xAC	; 172
    d3ec:	9e e0       	ldi	r25, 0x0E	; 14
    d3ee:	0e 94 a9 ac 	call	0x15952	; 0x15952 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
itoa():
    d3f2:	4a e0       	ldi	r20, 0x0A	; 10
    d3f4:	b8 01       	movw	r22, r16
    d3f6:	2d 96       	adiw	r28, 0x0d	; 13
    d3f8:	8e ad       	ldd	r24, Y+62	; 0x3e
    d3fa:	9f ad       	ldd	r25, Y+63	; 0x3f
    d3fc:	2d 97       	sbiw	r28, 0x0d	; 13
    d3fe:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z13send_mqtt_tdsv():
    d402:	2f e2       	ldi	r18, 0x2F	; 47
    d404:	35 e0       	ldi	r19, 0x05	; 5
    d406:	4f 2d       	mov	r20, r15
    d408:	66 e1       	ldi	r22, 0x16	; 22
    d40a:	74 e0       	ldi	r23, 0x04	; 4
    d40c:	8c ea       	ldi	r24, 0xAC	; 172
    d40e:	9e e0       	ldi	r25, 0x0E	; 14
    d410:	0e 94 a9 ac 	call	0x15952	; 0x15952 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    d414:	f6 01       	movw	r30, r12
    d416:	83 8d       	ldd	r24, Z+27	; 0x1b
itoa():
    d418:	4a e0       	ldi	r20, 0x0A	; 10
    d41a:	b8 01       	movw	r22, r16
    d41c:	90 e0       	ldi	r25, 0x00	; 0
    d41e:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z13send_mqtt_tdsv():
    d422:	2f ec       	ldi	r18, 0xCF	; 207
    d424:	33 e0       	ldi	r19, 0x03	; 3
    d426:	4f 2d       	mov	r20, r15
    d428:	66 e1       	ldi	r22, 0x16	; 22
    d42a:	74 e0       	ldi	r23, 0x04	; 4
    d42c:	8c ea       	ldi	r24, 0xAC	; 172
    d42e:	9e e0       	ldi	r25, 0x0E	; 14
    d430:	0e 94 a9 ac 	call	0x15952	; 0x15952 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    d434:	19 82       	std	Y+1, r1	; 0x01
    d436:	82 e0       	ldi	r24, 0x02	; 2
    d438:	e8 2e       	mov	r14, r24
    d43a:	00 e1       	ldi	r16, 0x10	; 16
    d43c:	28 e0       	ldi	r18, 0x08	; 8
    d43e:	a3 01       	movw	r20, r6
    d440:	6a e3       	ldi	r22, 0x3A	; 58
    d442:	ce 01       	movw	r24, r28
    d444:	01 96       	adiw	r24, 0x01	; 1
    d446:	0e 94 e9 e4 	call	0x1c9d2	; 0x1c9d2 <createString(char*, char, unsigned char*, unsigned char, unsigned char, unsigned char)>
    d44a:	8e 01       	movw	r16, r28
    d44c:	0f 5f       	subi	r16, 0xFF	; 255
    d44e:	1f 4f       	sbci	r17, 0xFF	; 255
    d450:	26 ea       	ldi	r18, 0xA6	; 166
    d452:	33 e0       	ldi	r19, 0x03	; 3
    d454:	4f 2d       	mov	r20, r15
    d456:	66 e1       	ldi	r22, 0x16	; 22
    d458:	74 e0       	ldi	r23, 0x04	; 4
    d45a:	8c ea       	ldi	r24, 0xAC	; 172
    d45c:	9e e0       	ldi	r25, 0x0E	; 14
    d45e:	0e 94 a9 ac 	call	0x15952	; 0x15952 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    d462:	66 96       	adiw	r28, 0x16	; 22
    d464:	8f ad       	ldd	r24, Y+63	; 0x3f
    d466:	66 97       	sbiw	r28, 0x16	; 22
itoa():
    d468:	4a e0       	ldi	r20, 0x0A	; 10
    d46a:	b8 01       	movw	r22, r16
    d46c:	90 e0       	ldi	r25, 0x00	; 0
    d46e:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z13send_mqtt_tdsv():
    d472:	26 ed       	ldi	r18, 0xD6	; 214
    d474:	33 e0       	ldi	r19, 0x03	; 3
    d476:	4f 2d       	mov	r20, r15
    d478:	66 e1       	ldi	r22, 0x16	; 22
    d47a:	74 e0       	ldi	r23, 0x04	; 4
    d47c:	8c ea       	ldi	r24, 0xAC	; 172
    d47e:	9e e0       	ldi	r25, 0x0E	; 14
    d480:	0e 94 a9 ac 	call	0x15952	; 0x15952 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    d484:	80 91 51 0b 	lds	r24, 0x0B51	; 0x800b51 <uptime>
    d488:	f6 01       	movw	r30, r12
    d48a:	94 8d       	ldd	r25, Z+28	; 0x1c
itoa():
    d48c:	4a e0       	ldi	r20, 0x0A	; 10
    d48e:	b8 01       	movw	r22, r16
    d490:	89 1b       	sub	r24, r25
    d492:	99 0b       	sbc	r25, r25
    d494:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z13send_mqtt_tdsv():
    d498:	2d ed       	ldi	r18, 0xDD	; 221
    d49a:	33 e0       	ldi	r19, 0x03	; 3
    d49c:	4f 2d       	mov	r20, r15
    d49e:	66 e1       	ldi	r22, 0x16	; 22
    d4a0:	74 e0       	ldi	r23, 0x04	; 4
    d4a2:	8c ea       	ldi	r24, 0xAC	; 172
    d4a4:	9e e0       	ldi	r25, 0x0E	; 14
    d4a6:	0e 94 a9 ac 	call	0x15952	; 0x15952 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    d4aa:	f3 94       	inc	r15
    d4ac:	fe e1       	ldi	r31, 0x1E	; 30
    d4ae:	cf 0e       	add	r12, r31
    d4b0:	d1 1c       	adc	r13, r1
    d4b2:	86 e0       	ldi	r24, 0x06	; 6
    d4b4:	f8 12       	cpse	r15, r24
    d4b6:	34 cf       	rjmp	.-408    	; 0xd320 <send_mqtt_tds()+0x70>
    d4b8:	ca 5a       	subi	r28, 0xAA	; 170
    d4ba:	df 4f       	sbci	r29, 0xFF	; 255
    d4bc:	0f b6       	in	r0, 0x3f	; 63
    d4be:	f8 94       	cli
    d4c0:	de bf       	out	0x3e, r29	; 62
    d4c2:	0f be       	out	0x3f, r0	; 63
    d4c4:	cd bf       	out	0x3d, r28	; 61
    d4c6:	df 91       	pop	r29
    d4c8:	cf 91       	pop	r28
    d4ca:	1f 91       	pop	r17
    d4cc:	0f 91       	pop	r16
    d4ce:	ff 90       	pop	r15
    d4d0:	ef 90       	pop	r14
    d4d2:	df 90       	pop	r13
    d4d4:	cf 90       	pop	r12
    d4d6:	bf 90       	pop	r11
    d4d8:	af 90       	pop	r10
    d4da:	9f 90       	pop	r9
    d4dc:	8f 90       	pop	r8
    d4de:	7f 90       	pop	r7
    d4e0:	6f 90       	pop	r6
    d4e2:	5f 90       	pop	r5
    d4e4:	4f 90       	pop	r4
    d4e6:	3f 90       	pop	r3
    d4e8:	2f 90       	pop	r2
    d4ea:	08 95       	ret

0000d4ec <send_mqtt_program()>:
_Z17send_mqtt_programv():
    d4ec:	af 92       	push	r10
    d4ee:	bf 92       	push	r11
    d4f0:	cf 92       	push	r12
    d4f2:	df 92       	push	r13
    d4f4:	ef 92       	push	r14
    d4f6:	ff 92       	push	r15
    d4f8:	0f 93       	push	r16
    d4fa:	1f 93       	push	r17
    d4fc:	cf 93       	push	r28
    d4fe:	df 93       	push	r29
    d500:	cd b7       	in	r28, 0x3d	; 61
    d502:	de b7       	in	r29, 0x3e	; 62
    d504:	cb 54       	subi	r28, 0x4B	; 75
    d506:	d1 09       	sbc	r29, r1
    d508:	0f b6       	in	r0, 0x3f	; 63
    d50a:	f8 94       	cli
    d50c:	de bf       	out	0x3e, r29	; 62
    d50e:	0f be       	out	0x3f, r0	; 63
    d510:	cd bf       	out	0x3d, r28	; 61
    d512:	b1 2c       	mov	r11, r1
    d514:	8b 2d       	mov	r24, r11
    d516:	0e 94 1c ba 	call	0x17438	; 0x17438 <thermostat_program_get_active(unsigned char)>
    d51a:	a8 2e       	mov	r10, r24
    d51c:	8f ef       	ldi	r24, 0xFF	; 255
    d51e:	a8 16       	cp	r10, r24
    d520:	09 f4       	brne	.+2      	; 0xd524 <send_mqtt_program()+0x38>
    d522:	e9 c0       	rjmp	.+466    	; 0xd6f6 <send_mqtt_program()+0x20a>
    d524:	be 01       	movw	r22, r28
    d526:	6f 5f       	subi	r22, 0xFF	; 255
    d528:	7f 4f       	sbci	r23, 0xFF	; 255
    d52a:	8b 2d       	mov	r24, r11
    d52c:	0e 94 d0 b9 	call	0x173a0	; 0x173a0 <thermostat_program_get_name(unsigned char, char*)>
    d530:	8e 01       	movw	r16, r28
    d532:	0f 5f       	subi	r16, 0xFF	; 255
    d534:	1f 4f       	sbci	r17, 0xFF	; 255
    d536:	2a ec       	ldi	r18, 0xCA	; 202
    d538:	33 e0       	ldi	r19, 0x03	; 3
    d53a:	4b 2d       	mov	r20, r11
    d53c:	66 ee       	ldi	r22, 0xE6	; 230
    d53e:	73 e0       	ldi	r23, 0x03	; 3
    d540:	8c ea       	ldi	r24, 0xAC	; 172
    d542:	9e e0       	ldi	r25, 0x0E	; 14
    d544:	0e 94 a9 ac 	call	0x15952	; 0x15952 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
itoa():
    d548:	4a e0       	ldi	r20, 0x0A	; 10
    d54a:	b8 01       	movw	r22, r16
    d54c:	8a 2d       	mov	r24, r10
    d54e:	90 e0       	ldi	r25, 0x00	; 0
    d550:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z17send_mqtt_programv():
    d554:	2b ee       	ldi	r18, 0xEB	; 235
    d556:	33 e0       	ldi	r19, 0x03	; 3
    d558:	4b 2d       	mov	r20, r11
    d55a:	66 ee       	ldi	r22, 0xE6	; 230
    d55c:	73 e0       	ldi	r23, 0x03	; 3
    d55e:	8c ea       	ldi	r24, 0xAC	; 172
    d560:	9e e0       	ldi	r25, 0x0E	; 14
    d562:	0e 94 a9 ac 	call	0x15952	; 0x15952 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    d566:	a1 2c       	mov	r10, r1
    d568:	ce 01       	movw	r24, r28
    d56a:	89 5b       	subi	r24, 0xB9	; 185
    d56c:	9f 4f       	sbci	r25, 0xFF	; 255
    d56e:	6c 01       	movw	r12, r24
    d570:	01 96       	adiw	r24, 0x01	; 1
    d572:	7c 01       	movw	r14, r24
    d574:	8e 01       	movw	r16, r28
    d576:	07 5b       	subi	r16, 0xB7	; 183
    d578:	1f 4f       	sbci	r17, 0xFF	; 255
    d57a:	9e 01       	movw	r18, r28
    d57c:	26 5b       	subi	r18, 0xB6	; 182
    d57e:	3f 4f       	sbci	r19, 0xFF	; 255
    d580:	ae 01       	movw	r20, r28
    d582:	45 5b       	subi	r20, 0xB5	; 181
    d584:	5f 4f       	sbci	r21, 0xFF	; 255
    d586:	6a 2d       	mov	r22, r10
    d588:	8b 2d       	mov	r24, r11
    d58a:	0e 94 2c ba 	call	0x17458	; 0x17458 <thermostat_program_get_time(unsigned char, unsigned char, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)>
    d58e:	28 96       	adiw	r28, 0x08	; 8
    d590:	8f ad       	ldd	r24, Y+63	; 0x3f
    d592:	28 97       	sbiw	r28, 0x08	; 8
    d594:	81 30       	cpi	r24, 0x01	; 1
    d596:	09 f0       	breq	.+2      	; 0xd59a <send_mqtt_program()+0xae>
    d598:	aa c0       	rjmp	.+340    	; 0xd6ee <send_mqtt_program()+0x202>
    d59a:	2c 96       	adiw	r28, 0x0c	; 12
    d59c:	8f ad       	ldd	r24, Y+63	; 0x3f
    d59e:	2c 97       	sbiw	r28, 0x0c	; 12
itoa():
    d5a0:	4a e0       	ldi	r20, 0x0A	; 10
    d5a2:	be 01       	movw	r22, r28
    d5a4:	6f 5b       	subi	r22, 0xBF	; 191
    d5a6:	7f 4f       	sbci	r23, 0xFF	; 255
    d5a8:	90 e0       	ldi	r25, 0x00	; 0
    d5aa:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z17send_mqtt_programv():
    d5ae:	be 01       	movw	r22, r28
    d5b0:	6f 5b       	subi	r22, 0xBF	; 191
    d5b2:	7f 4f       	sbci	r23, 0xFF	; 255
    d5b4:	ce 01       	movw	r24, r28
    d5b6:	01 96       	adiw	r24, 0x01	; 1
    d5b8:	0f 94 67 1a 	call	0x234ce	; 0x234ce <strcpy>
    d5bc:	62 ef       	ldi	r22, 0xF2	; 242
    d5be:	73 e0       	ldi	r23, 0x03	; 3
    d5c0:	ce 01       	movw	r24, r28
    d5c2:	01 96       	adiw	r24, 0x01	; 1
    d5c4:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    d5c8:	2b 96       	adiw	r28, 0x0b	; 11
    d5ca:	8f ad       	ldd	r24, Y+63	; 0x3f
    d5cc:	2b 97       	sbiw	r28, 0x0b	; 11
itoa():
    d5ce:	4a e0       	ldi	r20, 0x0A	; 10
    d5d0:	be 01       	movw	r22, r28
    d5d2:	6f 5b       	subi	r22, 0xBF	; 191
    d5d4:	7f 4f       	sbci	r23, 0xFF	; 255
    d5d6:	90 e0       	ldi	r25, 0x00	; 0
    d5d8:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z17send_mqtt_programv():
    d5dc:	be 01       	movw	r22, r28
    d5de:	6f 5b       	subi	r22, 0xBF	; 191
    d5e0:	7f 4f       	sbci	r23, 0xFF	; 255
    d5e2:	ce 01       	movw	r24, r28
    d5e4:	01 96       	adiw	r24, 0x01	; 1
    d5e6:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    d5ea:	62 ef       	ldi	r22, 0xF2	; 242
    d5ec:	73 e0       	ldi	r23, 0x03	; 3
    d5ee:	ce 01       	movw	r24, r28
    d5f0:	01 96       	adiw	r24, 0x01	; 1
    d5f2:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    d5f6:	2a 96       	adiw	r28, 0x0a	; 10
    d5f8:	8f ad       	ldd	r24, Y+63	; 0x3f
    d5fa:	2a 97       	sbiw	r28, 0x0a	; 10
itoa():
    d5fc:	4a e0       	ldi	r20, 0x0A	; 10
    d5fe:	be 01       	movw	r22, r28
    d600:	6f 5b       	subi	r22, 0xBF	; 191
    d602:	7f 4f       	sbci	r23, 0xFF	; 255
    d604:	90 e0       	ldi	r25, 0x00	; 0
    d606:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z17send_mqtt_programv():
    d60a:	be 01       	movw	r22, r28
    d60c:	6f 5b       	subi	r22, 0xBF	; 191
    d60e:	7f 4f       	sbci	r23, 0xFF	; 255
    d610:	ce 01       	movw	r24, r28
    d612:	01 96       	adiw	r24, 0x01	; 1
    d614:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    d618:	62 ef       	ldi	r22, 0xF2	; 242
    d61a:	73 e0       	ldi	r23, 0x03	; 3
    d61c:	ce 01       	movw	r24, r28
    d61e:	01 96       	adiw	r24, 0x01	; 1
    d620:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    d624:	29 96       	adiw	r28, 0x09	; 9
    d626:	8f ad       	ldd	r24, Y+63	; 0x3f
    d628:	29 97       	sbiw	r28, 0x09	; 9
itoa():
    d62a:	4a e0       	ldi	r20, 0x0A	; 10
    d62c:	be 01       	movw	r22, r28
    d62e:	6f 5b       	subi	r22, 0xBF	; 191
    d630:	7f 4f       	sbci	r23, 0xFF	; 255
    d632:	90 e0       	ldi	r25, 0x00	; 0
    d634:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z17send_mqtt_programv():
    d638:	be 01       	movw	r22, r28
    d63a:	6f 5b       	subi	r22, 0xBF	; 191
    d63c:	7f 4f       	sbci	r23, 0xFF	; 255
    d63e:	ce 01       	movw	r24, r28
    d640:	01 96       	adiw	r24, 0x01	; 1
    d642:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    d646:	ce 01       	movw	r24, r28
    d648:	01 96       	adiw	r24, 0x01	; 1
    d64a:	7c 01       	movw	r14, r24
    d64c:	0c e0       	ldi	r16, 0x0C	; 12
    d64e:	18 e0       	ldi	r17, 0x08	; 8
    d650:	2a 2d       	mov	r18, r10
    d652:	4b 2d       	mov	r20, r11
    d654:	64 ef       	ldi	r22, 0xF4	; 244
    d656:	73 e0       	ldi	r23, 0x03	; 3
    d658:	8c ea       	ldi	r24, 0xAC	; 172
    d65a:	9e e0       	ldi	r25, 0x0E	; 14
    d65c:	0e 94 32 ad 	call	0x15a64	; 0x15a64 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*)>
    d660:	28 96       	adiw	r28, 0x08	; 8
    d662:	8f ad       	ldd	r24, Y+63	; 0x3f
    d664:	28 97       	sbiw	r28, 0x08	; 8
itoa():
    d666:	4a e0       	ldi	r20, 0x0A	; 10
    d668:	be 01       	movw	r22, r28
    d66a:	6f 5b       	subi	r22, 0xBF	; 191
    d66c:	7f 4f       	sbci	r23, 0xFF	; 255
    d66e:	90 e0       	ldi	r25, 0x00	; 0
    d670:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z17send_mqtt_programv():
    d674:	be 01       	movw	r22, r28
    d676:	6f 5b       	subi	r22, 0xBF	; 191
    d678:	7f 4f       	sbci	r23, 0xFF	; 255
    d67a:	c7 01       	movw	r24, r14
    d67c:	0f 94 67 1a 	call	0x234ce	; 0x234ce <strcpy>
    d680:	0b ee       	ldi	r16, 0xEB	; 235
    d682:	13 e0       	ldi	r17, 0x03	; 3
    d684:	2a 2d       	mov	r18, r10
    d686:	4b 2d       	mov	r20, r11
    d688:	64 ef       	ldi	r22, 0xF4	; 244
    d68a:	73 e0       	ldi	r23, 0x03	; 3
    d68c:	8c ea       	ldi	r24, 0xAC	; 172
    d68e:	9e e0       	ldi	r25, 0x0E	; 14
    d690:	0e 94 32 ad 	call	0x15a64	; 0x15a64 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*)>
    d694:	6a 2d       	mov	r22, r10
    d696:	8b 2d       	mov	r24, r11
    d698:	0e 94 bb ba 	call	0x17576	; 0x17576 <thermostat_program_get_threshold(unsigned char, unsigned char)>
itoa():
    d69c:	4a e0       	ldi	r20, 0x0A	; 10
    d69e:	be 01       	movw	r22, r28
    d6a0:	6f 5b       	subi	r22, 0xBF	; 191
    d6a2:	7f 4f       	sbci	r23, 0xFF	; 255
    d6a4:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z17send_mqtt_programv():
    d6a8:	be 01       	movw	r22, r28
    d6aa:	6f 5b       	subi	r22, 0xBF	; 191
    d6ac:	7f 4f       	sbci	r23, 0xFF	; 255
    d6ae:	c7 01       	movw	r24, r14
    d6b0:	0f 94 67 1a 	call	0x234ce	; 0x234ce <strcpy>
    d6b4:	02 e0       	ldi	r16, 0x02	; 2
    d6b6:	14 e0       	ldi	r17, 0x04	; 4
    d6b8:	2a 2d       	mov	r18, r10
    d6ba:	4b 2d       	mov	r20, r11
    d6bc:	64 ef       	ldi	r22, 0xF4	; 244
    d6be:	73 e0       	ldi	r23, 0x03	; 3
    d6c0:	8c ea       	ldi	r24, 0xAC	; 172
    d6c2:	9e e0       	ldi	r25, 0x0E	; 14
    d6c4:	0e 94 32 ad 	call	0x15a64	; 0x15a64 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*)>
    d6c8:	6a 2d       	mov	r22, r10
    d6ca:	8b 2d       	mov	r24, r11
    d6cc:	0e 94 f9 ba 	call	0x175f2	; 0x175f2 <thermostat_program_get_week(unsigned char, unsigned char)>
itoa():
    d6d0:	4a e0       	ldi	r20, 0x0A	; 10
    d6d2:	b7 01       	movw	r22, r14
    d6d4:	90 e0       	ldi	r25, 0x00	; 0
    d6d6:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z17send_mqtt_programv():
    d6da:	0c e0       	ldi	r16, 0x0C	; 12
    d6dc:	14 e0       	ldi	r17, 0x04	; 4
    d6de:	2a 2d       	mov	r18, r10
    d6e0:	4b 2d       	mov	r20, r11
    d6e2:	64 ef       	ldi	r22, 0xF4	; 244
    d6e4:	73 e0       	ldi	r23, 0x03	; 3
    d6e6:	8c ea       	ldi	r24, 0xAC	; 172
    d6e8:	9e e0       	ldi	r25, 0x0E	; 14
    d6ea:	0e 94 32 ad 	call	0x15a64	; 0x15a64 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*)>
    d6ee:	a3 94       	inc	r10
    d6f0:	9b e0       	ldi	r25, 0x0B	; 11
    d6f2:	a9 12       	cpse	r10, r25
    d6f4:	39 cf       	rjmp	.-398    	; 0xd568 <send_mqtt_program()+0x7c>
    d6f6:	b3 94       	inc	r11
    d6f8:	88 e0       	ldi	r24, 0x08	; 8
    d6fa:	b8 12       	cpse	r11, r24
    d6fc:	0b cf       	rjmp	.-490    	; 0xd514 <send_mqtt_program()+0x28>
    d6fe:	c5 5b       	subi	r28, 0xB5	; 181
    d700:	df 4f       	sbci	r29, 0xFF	; 255
    d702:	0f b6       	in	r0, 0x3f	; 63
    d704:	f8 94       	cli
    d706:	de bf       	out	0x3e, r29	; 62
    d708:	0f be       	out	0x3f, r0	; 63
    d70a:	cd bf       	out	0x3d, r28	; 61
    d70c:	df 91       	pop	r29
    d70e:	cf 91       	pop	r28
    d710:	1f 91       	pop	r17
    d712:	0f 91       	pop	r16
    d714:	ff 90       	pop	r15
    d716:	ef 90       	pop	r14
    d718:	df 90       	pop	r13
    d71a:	cf 90       	pop	r12
    d71c:	bf 90       	pop	r11
    d71e:	af 90       	pop	r10
    d720:	08 95       	ret

0000d722 <mqtt_send_pid_variable(unsigned char)>:
_Z22mqtt_send_pid_variableh():
    d722:	ff 92       	push	r15
    d724:	0f 93       	push	r16
    d726:	1f 93       	push	r17
    d728:	cf 93       	push	r28
    d72a:	df 93       	push	r29
    d72c:	cd b7       	in	r28, 0x3d	; 61
    d72e:	de b7       	in	r29, 0x3e	; 62
    d730:	a0 97       	sbiw	r28, 0x20	; 32
    d732:	0f b6       	in	r0, 0x3f	; 63
    d734:	f8 94       	cli
    d736:	de bf       	out	0x3e, r29	; 62
    d738:	0f be       	out	0x3f, r0	; 63
    d73a:	cd bf       	out	0x3d, r28	; 61
    d73c:	f8 2e       	mov	r15, r24
    d73e:	0e 94 54 b7 	call	0x16ea8	; 0x16ea8 <thermostat_get_pid_p(unsigned char)>
    d742:	8e 01       	movw	r16, r28
    d744:	0f 5f       	subi	r16, 0xFF	; 255
    d746:	1f 4f       	sbci	r17, 0xFF	; 255
    d748:	22 e0       	ldi	r18, 0x02	; 2
    d74a:	47 e0       	ldi	r20, 0x07	; 7
    d74c:	0f 94 c0 16 	call	0x22d80	; 0x22d80 <dtostrf>
    d750:	27 ef       	ldi	r18, 0xF7	; 247
    d752:	37 e0       	ldi	r19, 0x07	; 7
    d754:	4f 2d       	mov	r20, r15
    d756:	61 e1       	ldi	r22, 0x11	; 17
    d758:	74 e0       	ldi	r23, 0x04	; 4
    d75a:	8c ea       	ldi	r24, 0xAC	; 172
    d75c:	9e e0       	ldi	r25, 0x0E	; 14
    d75e:	0e 94 a9 ac 	call	0x15952	; 0x15952 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    d762:	8f 2d       	mov	r24, r15
    d764:	0e 94 83 b7 	call	0x16f06	; 0x16f06 <thermostat_get_pid_i(unsigned char)>
    d768:	22 e0       	ldi	r18, 0x02	; 2
    d76a:	47 e0       	ldi	r20, 0x07	; 7
    d76c:	0f 94 c0 16 	call	0x22d80	; 0x22d80 <dtostrf>
    d770:	2e ef       	ldi	r18, 0xFE	; 254
    d772:	37 e0       	ldi	r19, 0x07	; 7
    d774:	4f 2d       	mov	r20, r15
    d776:	61 e1       	ldi	r22, 0x11	; 17
    d778:	74 e0       	ldi	r23, 0x04	; 4
    d77a:	8c ea       	ldi	r24, 0xAC	; 172
    d77c:	9e e0       	ldi	r25, 0x0E	; 14
    d77e:	0e 94 a9 ac 	call	0x15952	; 0x15952 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    d782:	8f 2d       	mov	r24, r15
    d784:	0e 94 8e b7 	call	0x16f1c	; 0x16f1c <thermostat_get_pid_d(unsigned char)>
    d788:	22 e0       	ldi	r18, 0x02	; 2
    d78a:	47 e0       	ldi	r20, 0x07	; 7
    d78c:	0f 94 c0 16 	call	0x22d80	; 0x22d80 <dtostrf>
    d790:	25 e0       	ldi	r18, 0x05	; 5
    d792:	38 e0       	ldi	r19, 0x08	; 8
    d794:	4f 2d       	mov	r20, r15
    d796:	61 e1       	ldi	r22, 0x11	; 17
    d798:	74 e0       	ldi	r23, 0x04	; 4
    d79a:	8c ea       	ldi	r24, 0xAC	; 172
    d79c:	9e e0       	ldi	r25, 0x0E	; 14
    d79e:	0e 94 a9 ac 	call	0x15952	; 0x15952 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    d7a2:	8f 2d       	mov	r24, r15
    d7a4:	0e 94 99 b7 	call	0x16f32	; 0x16f32 <thermostat_get_pid_time(unsigned char)>
itoa():
    d7a8:	4a e0       	ldi	r20, 0x0A	; 10
    d7aa:	b8 01       	movw	r22, r16
    d7ac:	90 e0       	ldi	r25, 0x00	; 0
    d7ae:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z22mqtt_send_pid_variableh():
    d7b2:	2c e0       	ldi	r18, 0x0C	; 12
    d7b4:	38 e0       	ldi	r19, 0x08	; 8
    d7b6:	4f 2d       	mov	r20, r15
    d7b8:	61 e1       	ldi	r22, 0x11	; 17
    d7ba:	74 e0       	ldi	r23, 0x04	; 4
    d7bc:	8c ea       	ldi	r24, 0xAC	; 172
    d7be:	9e e0       	ldi	r25, 0x0E	; 14
    d7c0:	0e 94 a9 ac 	call	0x15952	; 0x15952 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    d7c4:	a0 96       	adiw	r28, 0x20	; 32
    d7c6:	0f b6       	in	r0, 0x3f	; 63
    d7c8:	f8 94       	cli
    d7ca:	de bf       	out	0x3e, r29	; 62
    d7cc:	0f be       	out	0x3f, r0	; 63
    d7ce:	cd bf       	out	0x3d, r28	; 61
    d7d0:	df 91       	pop	r29
    d7d2:	cf 91       	pop	r28
    d7d4:	1f 91       	pop	r17
    d7d6:	0f 91       	pop	r16
    d7d8:	ff 90       	pop	r15
    d7da:	08 95       	ret

0000d7dc <send_mqtt_remote_tds_status()>:
_Z27send_mqtt_remote_tds_statusv():
    d7dc:	ff 92       	push	r15
    d7de:	0f 93       	push	r16
    d7e0:	1f 93       	push	r17
    d7e2:	cf 93       	push	r28
    d7e4:	df 93       	push	r29
    d7e6:	cd b7       	in	r28, 0x3d	; 61
    d7e8:	de b7       	in	r29, 0x3e	; 62
    d7ea:	63 97       	sbiw	r28, 0x13	; 19
    d7ec:	0f b6       	in	r0, 0x3f	; 63
    d7ee:	f8 94       	cli
    d7f0:	de bf       	out	0x3e, r29	; 62
    d7f2:	0f be       	out	0x3f, r0	; 63
    d7f4:	cd bf       	out	0x3d, r28	; 61
    d7f6:	1b 8a       	std	Y+19, r1	; 0x13
    d7f8:	f1 2c       	mov	r15, r1
    d7fa:	ae 01       	movw	r20, r28
    d7fc:	4f 5f       	subi	r20, 0xFF	; 255
    d7fe:	5f 4f       	sbci	r21, 0xFF	; 255
    d800:	be 01       	movw	r22, r28
    d802:	6d 5e       	subi	r22, 0xED	; 237
    d804:	7f 4f       	sbci	r23, 0xFF	; 255
    d806:	8f 2d       	mov	r24, r15
    d808:	0e 94 64 62 	call	0xc4c8	; 0xc4c8 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
    d80c:	8b 89       	ldd	r24, Y+19	; 0x13
    d80e:	81 30       	cpi	r24, 0x01	; 1
    d810:	09 f0       	breq	.+2      	; 0xd814 <send_mqtt_remote_tds_status()+0x38>
    d812:	4d c0       	rjmp	.+154    	; 0xd8ae <send_mqtt_remote_tds_status()+0xd2>
    d814:	8e 01       	movw	r16, r28
    d816:	0f 5f       	subi	r16, 0xFF	; 255
    d818:	1f 4f       	sbci	r17, 0xFF	; 255
    d81a:	2a ec       	ldi	r18, 0xCA	; 202
    d81c:	33 e0       	ldi	r19, 0x03	; 3
    d81e:	4f 2d       	mov	r20, r15
    d820:	65 e1       	ldi	r22, 0x15	; 21
    d822:	74 e0       	ldi	r23, 0x04	; 4
    d824:	8c ea       	ldi	r24, 0xAC	; 172
    d826:	9e e0       	ldi	r25, 0x0E	; 14
    d828:	0e 94 a9 ac 	call	0x15952	; 0x15952 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    d82c:	8b 89       	ldd	r24, Y+19	; 0x13
itoa():
    d82e:	4a e0       	ldi	r20, 0x0A	; 10
    d830:	b8 01       	movw	r22, r16
    d832:	90 e0       	ldi	r25, 0x00	; 0
    d834:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z27send_mqtt_remote_tds_statusv():
    d838:	2b ee       	ldi	r18, 0xEB	; 235
    d83a:	33 e0       	ldi	r19, 0x03	; 3
    d83c:	4f 2d       	mov	r20, r15
    d83e:	65 e1       	ldi	r22, 0x15	; 21
    d840:	74 e0       	ldi	r23, 0x04	; 4
    d842:	8c ea       	ldi	r24, 0xAC	; 172
    d844:	9e e0       	ldi	r25, 0x0E	; 14
    d846:	0e 94 a9 ac 	call	0x15952	; 0x15952 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    d84a:	8f 2d       	mov	r24, r15
    d84c:	0e 94 f4 65 	call	0xcbe8	; 0xcbe8 <remote_tds_get_data(unsigned char)>
itoa():
    d850:	4a e0       	ldi	r20, 0x0A	; 10
    d852:	b8 01       	movw	r22, r16
    d854:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z27send_mqtt_remote_tds_statusv():
    d858:	2a e1       	ldi	r18, 0x1A	; 26
    d85a:	34 e0       	ldi	r19, 0x04	; 4
    d85c:	4f 2d       	mov	r20, r15
    d85e:	65 e1       	ldi	r22, 0x15	; 21
    d860:	74 e0       	ldi	r23, 0x04	; 4
    d862:	8c ea       	ldi	r24, 0xAC	; 172
    d864:	9e e0       	ldi	r25, 0x0E	; 14
    d866:	0e 94 a9 ac 	call	0x15952	; 0x15952 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    d86a:	8f 2d       	mov	r24, r15
    d86c:	0e 94 df 64 	call	0xc9be	; 0xc9be <remote_tds_get_type(unsigned char)>
itoa():
    d870:	4a e0       	ldi	r20, 0x0A	; 10
    d872:	b8 01       	movw	r22, r16
    d874:	90 e0       	ldi	r25, 0x00	; 0
    d876:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z27send_mqtt_remote_tds_statusv():
    d87a:	20 e2       	ldi	r18, 0x20	; 32
    d87c:	34 e0       	ldi	r19, 0x04	; 4
    d87e:	4f 2d       	mov	r20, r15
    d880:	65 e1       	ldi	r22, 0x15	; 21
    d882:	74 e0       	ldi	r23, 0x04	; 4
    d884:	8c ea       	ldi	r24, 0xAC	; 172
    d886:	9e e0       	ldi	r25, 0x0E	; 14
    d888:	0e 94 a9 ac 	call	0x15952	; 0x15952 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    d88c:	8f 2d       	mov	r24, r15
    d88e:	0e 94 23 66 	call	0xcc46	; 0xcc46 <remote_tds_get_last_update(unsigned char)>
itoa():
    d892:	4a e0       	ldi	r20, 0x0A	; 10
    d894:	b8 01       	movw	r22, r16
    d896:	90 e0       	ldi	r25, 0x00	; 0
    d898:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z27send_mqtt_remote_tds_statusv():
    d89c:	25 e2       	ldi	r18, 0x25	; 37
    d89e:	34 e0       	ldi	r19, 0x04	; 4
    d8a0:	4f 2d       	mov	r20, r15
    d8a2:	65 e1       	ldi	r22, 0x15	; 21
    d8a4:	74 e0       	ldi	r23, 0x04	; 4
    d8a6:	8c ea       	ldi	r24, 0xAC	; 172
    d8a8:	9e e0       	ldi	r25, 0x0E	; 14
    d8aa:	0e 94 a9 ac 	call	0x15952	; 0x15952 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    d8ae:	f3 94       	inc	r15
    d8b0:	8a e0       	ldi	r24, 0x0A	; 10
    d8b2:	f8 12       	cpse	r15, r24
    d8b4:	a2 cf       	rjmp	.-188    	; 0xd7fa <send_mqtt_remote_tds_status()+0x1e>
    d8b6:	63 96       	adiw	r28, 0x13	; 19
    d8b8:	0f b6       	in	r0, 0x3f	; 63
    d8ba:	f8 94       	cli
    d8bc:	de bf       	out	0x3e, r29	; 62
    d8be:	0f be       	out	0x3f, r0	; 63
    d8c0:	cd bf       	out	0x3d, r28	; 61
    d8c2:	df 91       	pop	r29
    d8c4:	cf 91       	pop	r28
    d8c6:	1f 91       	pop	r17
    d8c8:	0f 91       	pop	r16
    d8ca:	ff 90       	pop	r15
    d8cc:	08 95       	ret

0000d8ce <mqtt_publis_output(unsigned char, unsigned char)>:
_Z18mqtt_publis_outputhh():
    d8ce:	0f 93       	push	r16
    d8d0:	1f 93       	push	r17
    d8d2:	cf 93       	push	r28
    d8d4:	df 93       	push	r29
    d8d6:	cd b7       	in	r28, 0x3d	; 61
    d8d8:	de b7       	in	r29, 0x3e	; 62
    d8da:	c8 58       	subi	r28, 0x88	; 136
    d8dc:	d1 09       	sbc	r29, r1
    d8de:	0f b6       	in	r0, 0x3f	; 63
    d8e0:	f8 94       	cli
    d8e2:	de bf       	out	0x3e, r29	; 62
    d8e4:	0f be       	out	0x3f, r0	; 63
    d8e6:	cd bf       	out	0x3d, r28	; 61
    d8e8:	8f 3f       	cpi	r24, 0xFF	; 255
    d8ea:	c9 f1       	breq	.+114    	; 0xd95e <mqtt_publis_output(unsigned char, unsigned char)+0x90>
    d8ec:	06 2f       	mov	r16, r22
    d8ee:	18 2f       	mov	r17, r24
    d8f0:	64 e6       	ldi	r22, 0x64	; 100
    d8f2:	71 e8       	ldi	r23, 0x81	; 129
    d8f4:	ce 01       	movw	r24, r28
    d8f6:	8f 5b       	subi	r24, 0xBF	; 191
    d8f8:	9f 4f       	sbci	r25, 0xFF	; 255
    d8fa:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    d8fe:	61 e3       	ldi	r22, 0x31	; 49
    d900:	74 e0       	ldi	r23, 0x04	; 4
    d902:	ce 01       	movw	r24, r28
    d904:	8f 5b       	subi	r24, 0xBF	; 191
    d906:	9f 4f       	sbci	r25, 0xFF	; 255
    d908:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
itoa():
    d90c:	4a e0       	ldi	r20, 0x0A	; 10
    d90e:	be 01       	movw	r22, r28
    d910:	6f 57       	subi	r22, 0x7F	; 127
    d912:	7f 4f       	sbci	r23, 0xFF	; 255
    d914:	81 2f       	mov	r24, r17
    d916:	90 e0       	ldi	r25, 0x00	; 0
    d918:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z18mqtt_publis_outputhh():
    d91c:	be 01       	movw	r22, r28
    d91e:	6f 57       	subi	r22, 0x7F	; 127
    d920:	7f 4f       	sbci	r23, 0xFF	; 255
    d922:	ce 01       	movw	r24, r28
    d924:	8f 5b       	subi	r24, 0xBF	; 191
    d926:	9f 4f       	sbci	r25, 0xFF	; 255
    d928:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    d92c:	6f e3       	ldi	r22, 0x3F	; 63
    d92e:	74 e0       	ldi	r23, 0x04	; 4
    d930:	ce 01       	movw	r24, r28
    d932:	8f 5b       	subi	r24, 0xBF	; 191
    d934:	9f 4f       	sbci	r25, 0xFF	; 255
    d936:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
itoa():
    d93a:	4a e0       	ldi	r20, 0x0A	; 10
    d93c:	be 01       	movw	r22, r28
    d93e:	6f 5f       	subi	r22, 0xFF	; 255
    d940:	7f 4f       	sbci	r23, 0xFF	; 255
    d942:	80 2f       	mov	r24, r16
    d944:	90 e0       	ldi	r25, 0x00	; 0
    d946:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z18mqtt_publis_outputhh():
    d94a:	ae 01       	movw	r20, r28
    d94c:	4f 5f       	subi	r20, 0xFF	; 255
    d94e:	5f 4f       	sbci	r21, 0xFF	; 255
    d950:	be 01       	movw	r22, r28
    d952:	6f 5b       	subi	r22, 0xBF	; 191
    d954:	7f 4f       	sbci	r23, 0xFF	; 255
    d956:	8c ea       	ldi	r24, 0xAC	; 172
    d958:	9e e0       	ldi	r25, 0x0E	; 14
    d95a:	0e 94 eb f1 	call	0x1e3d6	; 0x1e3d6 <PubSubClient::publish(char const*, char const*)>
    d95e:	c8 57       	subi	r28, 0x78	; 120
    d960:	df 4f       	sbci	r29, 0xFF	; 255
    d962:	0f b6       	in	r0, 0x3f	; 63
    d964:	f8 94       	cli
    d966:	de bf       	out	0x3e, r29	; 62
    d968:	0f be       	out	0x3f, r0	; 63
    d96a:	cd bf       	out	0x3d, r28	; 61
    d96c:	df 91       	pop	r29
    d96e:	cf 91       	pop	r28
    d970:	1f 91       	pop	r17
    d972:	0f 91       	pop	r16
    d974:	08 95       	ret

0000d976 <mqtt_publis_output_pwm(unsigned char, unsigned char, unsigned char)>:
_Z22mqtt_publis_output_pwmhhh():
    d976:	ff 92       	push	r15
    d978:	0f 93       	push	r16
    d97a:	1f 93       	push	r17
    d97c:	cf 93       	push	r28
    d97e:	df 93       	push	r29
    d980:	cd b7       	in	r28, 0x3d	; 61
    d982:	de b7       	in	r29, 0x3e	; 62
    d984:	c8 58       	subi	r28, 0x88	; 136
    d986:	d1 09       	sbc	r29, r1
    d988:	0f b6       	in	r0, 0x3f	; 63
    d98a:	f8 94       	cli
    d98c:	de bf       	out	0x3e, r29	; 62
    d98e:	0f be       	out	0x3f, r0	; 63
    d990:	cd bf       	out	0x3d, r28	; 61
    d992:	8f 3f       	cpi	r24, 0xFF	; 255
    d994:	09 f4       	brne	.+2      	; 0xd998 <mqtt_publis_output_pwm(unsigned char, unsigned char, unsigned char)+0x22>
    d996:	4f c0       	rjmp	.+158    	; 0xda36 <mqtt_publis_output_pwm(unsigned char, unsigned char, unsigned char)+0xc0>
    d998:	f4 2e       	mov	r15, r20
    d99a:	16 2f       	mov	r17, r22
    d99c:	08 2f       	mov	r16, r24
    d99e:	64 e6       	ldi	r22, 0x64	; 100
    d9a0:	71 e8       	ldi	r23, 0x81	; 129
    d9a2:	ce 01       	movw	r24, r28
    d9a4:	8f 5b       	subi	r24, 0xBF	; 191
    d9a6:	9f 4f       	sbci	r25, 0xFF	; 255
    d9a8:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    d9ac:	61 e3       	ldi	r22, 0x31	; 49
    d9ae:	74 e0       	ldi	r23, 0x04	; 4
    d9b0:	ce 01       	movw	r24, r28
    d9b2:	8f 5b       	subi	r24, 0xBF	; 191
    d9b4:	9f 4f       	sbci	r25, 0xFF	; 255
    d9b6:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
itoa():
    d9ba:	4a e0       	ldi	r20, 0x0A	; 10
    d9bc:	be 01       	movw	r22, r28
    d9be:	6f 57       	subi	r22, 0x7F	; 127
    d9c0:	7f 4f       	sbci	r23, 0xFF	; 255
    d9c2:	80 2f       	mov	r24, r16
    d9c4:	90 e0       	ldi	r25, 0x00	; 0
    d9c6:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z22mqtt_publis_output_pwmhhh():
    d9ca:	be 01       	movw	r22, r28
    d9cc:	6f 57       	subi	r22, 0x7F	; 127
    d9ce:	7f 4f       	sbci	r23, 0xFF	; 255
    d9d0:	ce 01       	movw	r24, r28
    d9d2:	8f 5b       	subi	r24, 0xBF	; 191
    d9d4:	9f 4f       	sbci	r25, 0xFF	; 255
    d9d6:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    d9da:	66 e4       	ldi	r22, 0x46	; 70
    d9dc:	74 e0       	ldi	r23, 0x04	; 4
    d9de:	13 30       	cpi	r17, 0x03	; 3
    d9e0:	61 f0       	breq	.+24     	; 0xd9fa <mqtt_publis_output_pwm(unsigned char, unsigned char, unsigned char)+0x84>
    d9e2:	6c e4       	ldi	r22, 0x4C	; 76
    d9e4:	74 e0       	ldi	r23, 0x04	; 4
    d9e6:	15 30       	cpi	r17, 0x05	; 5
    d9e8:	41 f0       	breq	.+16     	; 0xd9fa <mqtt_publis_output_pwm(unsigned char, unsigned char, unsigned char)+0x84>
    d9ea:	62 e5       	ldi	r22, 0x52	; 82
    d9ec:	74 e0       	ldi	r23, 0x04	; 4
    d9ee:	16 30       	cpi	r17, 0x06	; 6
    d9f0:	21 f0       	breq	.+8      	; 0xd9fa <mqtt_publis_output_pwm(unsigned char, unsigned char, unsigned char)+0x84>
    d9f2:	1e 3f       	cpi	r17, 0xFE	; 254
    d9f4:	39 f4       	brne	.+14     	; 0xda04 <mqtt_publis_output_pwm(unsigned char, unsigned char, unsigned char)+0x8e>
    d9f6:	67 e5       	ldi	r22, 0x57	; 87
    d9f8:	74 e0       	ldi	r23, 0x04	; 4
    d9fa:	ce 01       	movw	r24, r28
    d9fc:	8f 5b       	subi	r24, 0xBF	; 191
    d9fe:	9f 4f       	sbci	r25, 0xFF	; 255
    da00:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    da04:	6c e5       	ldi	r22, 0x5C	; 92
    da06:	74 e0       	ldi	r23, 0x04	; 4
    da08:	ce 01       	movw	r24, r28
    da0a:	8f 5b       	subi	r24, 0xBF	; 191
    da0c:	9f 4f       	sbci	r25, 0xFF	; 255
    da0e:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
itoa():
    da12:	4a e0       	ldi	r20, 0x0A	; 10
    da14:	be 01       	movw	r22, r28
    da16:	6f 5f       	subi	r22, 0xFF	; 255
    da18:	7f 4f       	sbci	r23, 0xFF	; 255
    da1a:	8f 2d       	mov	r24, r15
    da1c:	90 e0       	ldi	r25, 0x00	; 0
    da1e:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z22mqtt_publis_output_pwmhhh():
    da22:	ae 01       	movw	r20, r28
    da24:	4f 5f       	subi	r20, 0xFF	; 255
    da26:	5f 4f       	sbci	r21, 0xFF	; 255
    da28:	be 01       	movw	r22, r28
    da2a:	6f 5b       	subi	r22, 0xBF	; 191
    da2c:	7f 4f       	sbci	r23, 0xFF	; 255
    da2e:	8c ea       	ldi	r24, 0xAC	; 172
    da30:	9e e0       	ldi	r25, 0x0E	; 14
    da32:	0e 94 eb f1 	call	0x1e3d6	; 0x1e3d6 <PubSubClient::publish(char const*, char const*)>
    da36:	c8 57       	subi	r28, 0x78	; 120
    da38:	df 4f       	sbci	r29, 0xFF	; 255
    da3a:	0f b6       	in	r0, 0x3f	; 63
    da3c:	f8 94       	cli
    da3e:	de bf       	out	0x3e, r29	; 62
    da40:	0f be       	out	0x3f, r0	; 63
    da42:	cd bf       	out	0x3d, r28	; 61
    da44:	df 91       	pop	r29
    da46:	cf 91       	pop	r28
    da48:	1f 91       	pop	r17
    da4a:	0f 91       	pop	r16
    da4c:	ff 90       	pop	r15
    da4e:	08 95       	ret

0000da50 <send_mesh_status()>:
_Z16send_mesh_statusv():
    da50:	cf 92       	push	r12
    da52:	df 92       	push	r13
    da54:	ef 92       	push	r14
    da56:	ff 92       	push	r15
    da58:	0f 93       	push	r16
    da5a:	1f 93       	push	r17
    da5c:	cf 93       	push	r28
    da5e:	df 93       	push	r29
    da60:	cd b7       	in	r28, 0x3d	; 61
    da62:	de b7       	in	r29, 0x3e	; 62
    da64:	c0 58       	subi	r28, 0x80	; 128
    da66:	d1 09       	sbc	r29, r1
    da68:	0f b6       	in	r0, 0x3f	; 63
    da6a:	f8 94       	cli
    da6c:	de bf       	out	0x3e, r29	; 62
    da6e:	0f be       	out	0x3f, r0	; 63
    da70:	cd bf       	out	0x3d, r28	; 61
    da72:	6c ea       	ldi	r22, 0xAC	; 172
    da74:	77 e0       	ldi	r23, 0x07	; 7
    da76:	ce 01       	movw	r24, r28
    da78:	8f 5b       	subi	r24, 0xBF	; 191
    da7a:	9f 4f       	sbci	r25, 0xFF	; 255
    da7c:	0f 94 67 1a 	call	0x234ce	; 0x234ce <strcpy>
    da80:	6f ef       	ldi	r22, 0xFF	; 255
    da82:	7f ef       	ldi	r23, 0xFF	; 255
    da84:	84 e0       	ldi	r24, 0x04	; 4
    da86:	9d e0       	ldi	r25, 0x0D	; 13
    da88:	0f 94 c5 01 	call	0x2038a	; 0x2038a <RF24Mesh::getNodeID(unsigned int)>
itoa():
    da8c:	4a e0       	ldi	r20, 0x0A	; 10
    da8e:	be 01       	movw	r22, r28
    da90:	6f 5f       	subi	r22, 0xFF	; 255
    da92:	7f 4f       	sbci	r23, 0xFF	; 255
    da94:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z16send_mesh_statusv():
    da98:	ae 01       	movw	r20, r28
    da9a:	4f 5f       	subi	r20, 0xFF	; 255
    da9c:	5f 4f       	sbci	r21, 0xFF	; 255
    da9e:	be 01       	movw	r22, r28
    daa0:	6f 5b       	subi	r22, 0xBF	; 191
    daa2:	7f 4f       	sbci	r23, 0xFF	; 255
    daa4:	8c ea       	ldi	r24, 0xAC	; 172
    daa6:	9e e0       	ldi	r25, 0x0E	; 14
    daa8:	0e 94 d2 ad 	call	0x15ba4	; 0x15ba4 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    daac:	61 e6       	ldi	r22, 0x61	; 97
    daae:	74 e0       	ldi	r23, 0x04	; 4
    dab0:	ce 01       	movw	r24, r28
    dab2:	8f 5b       	subi	r24, 0xBF	; 191
    dab4:	9f 4f       	sbci	r25, 0xFF	; 255
    dab6:	0f 94 67 1a 	call	0x234ce	; 0x234ce <strcpy>
    daba:	80 91 09 0d 	lds	r24, 0x0D09	; 0x800d09 <mesh+0x5>
itoa():
    dabe:	4a e0       	ldi	r20, 0x0A	; 10
    dac0:	be 01       	movw	r22, r28
    dac2:	6f 5f       	subi	r22, 0xFF	; 255
    dac4:	7f 4f       	sbci	r23, 0xFF	; 255
    dac6:	90 e0       	ldi	r25, 0x00	; 0
    dac8:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z16send_mesh_statusv():
    dacc:	ae 01       	movw	r20, r28
    dace:	4f 5f       	subi	r20, 0xFF	; 255
    dad0:	5f 4f       	sbci	r21, 0xFF	; 255
    dad2:	be 01       	movw	r22, r28
    dad4:	6f 5b       	subi	r22, 0xBF	; 191
    dad6:	7f 4f       	sbci	r23, 0xFF	; 255
    dad8:	8c ea       	ldi	r24, 0xAC	; 172
    dada:	9e e0       	ldi	r25, 0x0E	; 14
    dadc:	0e 94 d2 ad 	call	0x15ba4	; 0x15ba4 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    dae0:	6d e9       	ldi	r22, 0x9D	; 157
    dae2:	77 e0       	ldi	r23, 0x07	; 7
    dae4:	ce 01       	movw	r24, r28
    dae6:	8f 5b       	subi	r24, 0xBF	; 191
    dae8:	9f 4f       	sbci	r25, 0xFF	; 255
    daea:	0f 94 67 1a 	call	0x234ce	; 0x234ce <strcpy>
    daee:	0e 94 02 b1 	call	0x16204	; 0x16204 <nrf_load_channel()>
itoa():
    daf2:	4a e0       	ldi	r20, 0x0A	; 10
    daf4:	be 01       	movw	r22, r28
    daf6:	6f 5f       	subi	r22, 0xFF	; 255
    daf8:	7f 4f       	sbci	r23, 0xFF	; 255
    dafa:	90 e0       	ldi	r25, 0x00	; 0
    dafc:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z16send_mesh_statusv():
    db00:	ae 01       	movw	r20, r28
    db02:	4f 5f       	subi	r20, 0xFF	; 255
    db04:	5f 4f       	sbci	r21, 0xFF	; 255
    db06:	be 01       	movw	r22, r28
    db08:	6f 5b       	subi	r22, 0xBF	; 191
    db0a:	7f 4f       	sbci	r23, 0xFF	; 255
    db0c:	8c ea       	ldi	r24, 0xAC	; 172
    db0e:	9e e0       	ldi	r25, 0x0E	; 14
    db10:	0e 94 d2 ad 	call	0x15ba4	; 0x15ba4 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    db14:	65 eb       	ldi	r22, 0xB5	; 181
    db16:	77 e0       	ldi	r23, 0x07	; 7
    db18:	ce 01       	movw	r24, r28
    db1a:	8f 5b       	subi	r24, 0xBF	; 191
    db1c:	9f 4f       	sbci	r25, 0xFF	; 255
    db1e:	0f 94 67 1a 	call	0x234ce	; 0x234ce <strcpy>
    db22:	8e e8       	ldi	r24, 0x8E	; 142
    db24:	9e e0       	ldi	r25, 0x0E	; 14
    db26:	0e 94 5a f8 	call	0x1f0b4	; 0x1f0b4 <RF24::getPALevel()>
itoa():
    db2a:	4a e0       	ldi	r20, 0x0A	; 10
    db2c:	be 01       	movw	r22, r28
    db2e:	6f 5f       	subi	r22, 0xFF	; 255
    db30:	7f 4f       	sbci	r23, 0xFF	; 255
    db32:	90 e0       	ldi	r25, 0x00	; 0
    db34:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z16send_mesh_statusv():
    db38:	ae 01       	movw	r20, r28
    db3a:	4f 5f       	subi	r20, 0xFF	; 255
    db3c:	5f 4f       	sbci	r21, 0xFF	; 255
    db3e:	be 01       	movw	r22, r28
    db40:	6f 5b       	subi	r22, 0xBF	; 191
    db42:	7f 4f       	sbci	r23, 0xFF	; 255
    db44:	8c ea       	ldi	r24, 0xAC	; 172
    db46:	9e e0       	ldi	r25, 0x0E	; 14
    db48:	0e 94 d2 ad 	call	0x15ba4	; 0x15ba4 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    db4c:	f1 2c       	mov	r15, r1
    db4e:	83 e0       	ldi	r24, 0x03	; 3
    db50:	e8 2e       	mov	r14, r24
    db52:	80 91 09 0d 	lds	r24, 0x0D09	; 0x800d09 <mesh+0x5>
    db56:	f8 16       	cp	r15, r24
    db58:	a0 f5       	brcc	.+104    	; 0xdbc2 <send_mesh_status()+0x172>
    db5a:	fe 9c       	mul	r15, r14
    db5c:	60 01       	movw	r12, r0
    db5e:	11 24       	eor	r1, r1
    db60:	e0 91 07 0d 	lds	r30, 0x0D07	; 0x800d07 <mesh+0x3>
    db64:	f0 91 08 0d 	lds	r31, 0x0D08	; 0x800d08 <mesh+0x4>
    db68:	ec 0d       	add	r30, r12
    db6a:	fd 1d       	adc	r31, r13
    db6c:	80 81       	ld	r24, Z
itoa():
    db6e:	4a e0       	ldi	r20, 0x0A	; 10
    db70:	be 01       	movw	r22, r28
    db72:	6f 5f       	subi	r22, 0xFF	; 255
    db74:	7f 4f       	sbci	r23, 0xFF	; 255
    db76:	90 e0       	ldi	r25, 0x00	; 0
    db78:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z16send_mesh_statusv():
    db7c:	8e 01       	movw	r16, r28
    db7e:	0f 5f       	subi	r16, 0xFF	; 255
    db80:	1f 4f       	sbci	r17, 0xFF	; 255
    db82:	25 e1       	ldi	r18, 0x15	; 21
    db84:	37 e0       	ldi	r19, 0x07	; 7
    db86:	4f 2d       	mov	r20, r15
    db88:	61 e7       	ldi	r22, 0x71	; 113
    db8a:	74 e0       	ldi	r23, 0x04	; 4
    db8c:	8c ea       	ldi	r24, 0xAC	; 172
    db8e:	9e e0       	ldi	r25, 0x0E	; 14
    db90:	0e 94 a9 ac 	call	0x15952	; 0x15952 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    db94:	e0 91 07 0d 	lds	r30, 0x0D07	; 0x800d07 <mesh+0x3>
    db98:	f0 91 08 0d 	lds	r31, 0x0D08	; 0x800d08 <mesh+0x4>
    db9c:	ec 0d       	add	r30, r12
    db9e:	fd 1d       	adc	r31, r13
itoa():
    dba0:	4a e0       	ldi	r20, 0x0A	; 10
    dba2:	b8 01       	movw	r22, r16
    dba4:	81 81       	ldd	r24, Z+1	; 0x01
    dba6:	92 81       	ldd	r25, Z+2	; 0x02
    dba8:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z16send_mesh_statusv():
    dbac:	20 e8       	ldi	r18, 0x80	; 128
    dbae:	34 e0       	ldi	r19, 0x04	; 4
    dbb0:	4f 2d       	mov	r20, r15
    dbb2:	61 e7       	ldi	r22, 0x71	; 113
    dbb4:	74 e0       	ldi	r23, 0x04	; 4
    dbb6:	8c ea       	ldi	r24, 0xAC	; 172
    dbb8:	9e e0       	ldi	r25, 0x0E	; 14
    dbba:	0e 94 a9 ac 	call	0x15952	; 0x15952 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    dbbe:	f3 94       	inc	r15
    dbc0:	c8 cf       	rjmp	.-112    	; 0xdb52 <send_mesh_status()+0x102>
    dbc2:	c0 58       	subi	r28, 0x80	; 128
    dbc4:	df 4f       	sbci	r29, 0xFF	; 255
    dbc6:	0f b6       	in	r0, 0x3f	; 63
    dbc8:	f8 94       	cli
    dbca:	de bf       	out	0x3e, r29	; 62
    dbcc:	0f be       	out	0x3f, r0	; 63
    dbce:	cd bf       	out	0x3d, r28	; 61
    dbd0:	df 91       	pop	r29
    dbd2:	cf 91       	pop	r28
    dbd4:	1f 91       	pop	r17
    dbd6:	0f 91       	pop	r16
    dbd8:	ff 90       	pop	r15
    dbda:	ef 90       	pop	r14
    dbdc:	df 90       	pop	r13
    dbde:	cf 90       	pop	r12
    dbe0:	08 95       	ret

0000dbe2 <selftest_set_0(unsigned char)>:
_Z14selftest_set_0h():
    dbe2:	21 e0       	ldi	r18, 0x01	; 1
    dbe4:	30 e0       	ldi	r19, 0x00	; 0
    dbe6:	01 c0       	rjmp	.+2      	; 0xdbea <selftest_set_0(unsigned char)+0x8>
    dbe8:	22 0f       	add	r18, r18
    dbea:	8a 95       	dec	r24
    dbec:	ea f7       	brpl	.-6      	; 0xdbe8 <selftest_set_0(unsigned char)+0x6>
    dbee:	80 91 60 0b 	lds	r24, 0x0B60	; 0x800b60 <selftest_data>
    dbf2:	82 2b       	or	r24, r18
    dbf4:	80 93 60 0b 	sts	0x0B60, r24	; 0x800b60 <selftest_data>
    dbf8:	08 95       	ret

0000dbfa <helper_dialog_ntp_set_server(unsigned int, unsigned int, unsigned char)>:
_Z28helper_dialog_ntp_set_serverjjh():
    dbfa:	0f 93       	push	r16
    dbfc:	1f 93       	push	r17
    dbfe:	cf 93       	push	r28
    dc00:	df 93       	push	r29
    dc02:	cd b7       	in	r28, 0x3d	; 61
    dc04:	de b7       	in	r29, 0x3e	; 62
    dc06:	60 97       	sbiw	r28, 0x10	; 16
    dc08:	0f b6       	in	r0, 0x3f	; 63
    dc0a:	f8 94       	cli
    dc0c:	de bf       	out	0x3e, r29	; 62
    dc0e:	0f be       	out	0x3f, r0	; 63
    dc10:	cd bf       	out	0x3d, r28	; 61
    dc12:	ce 01       	movw	r24, r28
    dc14:	01 96       	adiw	r24, 0x01	; 1
    dc16:	0e 94 45 59 	call	0xb28a	; 0xb28a <display_element_get_string(char*)>
    dc1a:	0a e0       	ldi	r16, 0x0A	; 10
    dc1c:	10 e0       	ldi	r17, 0x00	; 0
    dc1e:	24 e0       	ldi	r18, 0x04	; 4
    dc20:	30 e0       	ldi	r19, 0x00	; 0
    dc22:	44 e0       	ldi	r20, 0x04	; 4
    dc24:	50 e1       	ldi	r21, 0x10	; 16
    dc26:	6e e2       	ldi	r22, 0x2E	; 46
    dc28:	ce 01       	movw	r24, r28
    dc2a:	01 96       	adiw	r24, 0x01	; 1
    dc2c:	0e 94 6f e4 	call	0x1c8de	; 0x1c8de <parseBytes(char const*, char, unsigned char*, int, int)>
    dc30:	0e 94 f2 aa 	call	0x155e4	; 0x155e4 <save_setup_network()>
    dc34:	87 e0       	ldi	r24, 0x07	; 7
    dc36:	0e 94 f1 6d 	call	0xdbe2	; 0xdbe2 <selftest_set_0(unsigned char)>
    dc3a:	60 96       	adiw	r28, 0x10	; 16
    dc3c:	0f b6       	in	r0, 0x3f	; 63
    dc3e:	f8 94       	cli
    dc40:	de bf       	out	0x3e, r29	; 62
    dc42:	0f be       	out	0x3f, r0	; 63
    dc44:	cd bf       	out	0x3d, r28	; 61
    dc46:	df 91       	pop	r29
    dc48:	cf 91       	pop	r28
    dc4a:	1f 91       	pop	r17
    dc4c:	0f 91       	pop	r16
    dc4e:	08 95       	ret

0000dc50 <helper_dialog_network_set_ip(unsigned int, unsigned int, unsigned char)>:
_Z28helper_dialog_network_set_ipjjh():
    dc50:	0f 93       	push	r16
    dc52:	1f 93       	push	r17
    dc54:	cf 93       	push	r28
    dc56:	df 93       	push	r29
    dc58:	cd b7       	in	r28, 0x3d	; 61
    dc5a:	de b7       	in	r29, 0x3e	; 62
    dc5c:	60 97       	sbiw	r28, 0x10	; 16
    dc5e:	0f b6       	in	r0, 0x3f	; 63
    dc60:	f8 94       	cli
    dc62:	de bf       	out	0x3e, r29	; 62
    dc64:	0f be       	out	0x3f, r0	; 63
    dc66:	cd bf       	out	0x3d, r28	; 61
    dc68:	ce 01       	movw	r24, r28
    dc6a:	01 96       	adiw	r24, 0x01	; 1
    dc6c:	0e 94 45 59 	call	0xb28a	; 0xb28a <display_element_get_string(char*)>
    dc70:	0a e0       	ldi	r16, 0x0A	; 10
    dc72:	10 e0       	ldi	r17, 0x00	; 0
    dc74:	24 e0       	ldi	r18, 0x04	; 4
    dc76:	30 e0       	ldi	r19, 0x00	; 0
    dc78:	4c eb       	ldi	r20, 0xBC	; 188
    dc7a:	5f e0       	ldi	r21, 0x0F	; 15
    dc7c:	6e e2       	ldi	r22, 0x2E	; 46
    dc7e:	ce 01       	movw	r24, r28
    dc80:	01 96       	adiw	r24, 0x01	; 1
    dc82:	0e 94 6f e4 	call	0x1c8de	; 0x1c8de <parseBytes(char const*, char, unsigned char*, int, int)>
    dc86:	0e 94 f2 aa 	call	0x155e4	; 0x155e4 <save_setup_network()>
    dc8a:	87 e0       	ldi	r24, 0x07	; 7
    dc8c:	0e 94 f1 6d 	call	0xdbe2	; 0xdbe2 <selftest_set_0(unsigned char)>
    dc90:	60 96       	adiw	r28, 0x10	; 16
    dc92:	0f b6       	in	r0, 0x3f	; 63
    dc94:	f8 94       	cli
    dc96:	de bf       	out	0x3e, r29	; 62
    dc98:	0f be       	out	0x3f, r0	; 63
    dc9a:	cd bf       	out	0x3d, r28	; 61
    dc9c:	df 91       	pop	r29
    dc9e:	cf 91       	pop	r28
    dca0:	1f 91       	pop	r17
    dca2:	0f 91       	pop	r16
    dca4:	08 95       	ret

0000dca6 <helper_dialog_network_set_mask(unsigned int, unsigned int, unsigned char)>:
_Z30helper_dialog_network_set_maskjjh():
    dca6:	0f 93       	push	r16
    dca8:	1f 93       	push	r17
    dcaa:	cf 93       	push	r28
    dcac:	df 93       	push	r29
    dcae:	cd b7       	in	r28, 0x3d	; 61
    dcb0:	de b7       	in	r29, 0x3e	; 62
    dcb2:	60 97       	sbiw	r28, 0x10	; 16
    dcb4:	0f b6       	in	r0, 0x3f	; 63
    dcb6:	f8 94       	cli
    dcb8:	de bf       	out	0x3e, r29	; 62
    dcba:	0f be       	out	0x3f, r0	; 63
    dcbc:	cd bf       	out	0x3d, r28	; 61
    dcbe:	ce 01       	movw	r24, r28
    dcc0:	01 96       	adiw	r24, 0x01	; 1
    dcc2:	0e 94 45 59 	call	0xb28a	; 0xb28a <display_element_get_string(char*)>
    dcc6:	0a e0       	ldi	r16, 0x0A	; 10
    dcc8:	10 e0       	ldi	r17, 0x00	; 0
    dcca:	24 e0       	ldi	r18, 0x04	; 4
    dccc:	30 e0       	ldi	r19, 0x00	; 0
    dcce:	40 ec       	ldi	r20, 0xC0	; 192
    dcd0:	5f e0       	ldi	r21, 0x0F	; 15
    dcd2:	6e e2       	ldi	r22, 0x2E	; 46
    dcd4:	ce 01       	movw	r24, r28
    dcd6:	01 96       	adiw	r24, 0x01	; 1
    dcd8:	0e 94 6f e4 	call	0x1c8de	; 0x1c8de <parseBytes(char const*, char, unsigned char*, int, int)>
    dcdc:	0e 94 f2 aa 	call	0x155e4	; 0x155e4 <save_setup_network()>
    dce0:	87 e0       	ldi	r24, 0x07	; 7
    dce2:	0e 94 f1 6d 	call	0xdbe2	; 0xdbe2 <selftest_set_0(unsigned char)>
    dce6:	60 96       	adiw	r28, 0x10	; 16
    dce8:	0f b6       	in	r0, 0x3f	; 63
    dcea:	f8 94       	cli
    dcec:	de bf       	out	0x3e, r29	; 62
    dcee:	0f be       	out	0x3f, r0	; 63
    dcf0:	cd bf       	out	0x3d, r28	; 61
    dcf2:	df 91       	pop	r29
    dcf4:	cf 91       	pop	r28
    dcf6:	1f 91       	pop	r17
    dcf8:	0f 91       	pop	r16
    dcfa:	08 95       	ret

0000dcfc <helper_dialog_network_set_gw(unsigned int, unsigned int, unsigned char)>:
_Z28helper_dialog_network_set_gwjjh():
    dcfc:	0f 93       	push	r16
    dcfe:	1f 93       	push	r17
    dd00:	cf 93       	push	r28
    dd02:	df 93       	push	r29
    dd04:	cd b7       	in	r28, 0x3d	; 61
    dd06:	de b7       	in	r29, 0x3e	; 62
    dd08:	60 97       	sbiw	r28, 0x10	; 16
    dd0a:	0f b6       	in	r0, 0x3f	; 63
    dd0c:	f8 94       	cli
    dd0e:	de bf       	out	0x3e, r29	; 62
    dd10:	0f be       	out	0x3f, r0	; 63
    dd12:	cd bf       	out	0x3d, r28	; 61
    dd14:	ce 01       	movw	r24, r28
    dd16:	01 96       	adiw	r24, 0x01	; 1
    dd18:	0e 94 45 59 	call	0xb28a	; 0xb28a <display_element_get_string(char*)>
    dd1c:	0a e0       	ldi	r16, 0x0A	; 10
    dd1e:	10 e0       	ldi	r17, 0x00	; 0
    dd20:	24 e0       	ldi	r18, 0x04	; 4
    dd22:	30 e0       	ldi	r19, 0x00	; 0
    dd24:	48 ec       	ldi	r20, 0xC8	; 200
    dd26:	5f e0       	ldi	r21, 0x0F	; 15
    dd28:	6e e2       	ldi	r22, 0x2E	; 46
    dd2a:	ce 01       	movw	r24, r28
    dd2c:	01 96       	adiw	r24, 0x01	; 1
    dd2e:	0e 94 6f e4 	call	0x1c8de	; 0x1c8de <parseBytes(char const*, char, unsigned char*, int, int)>
    dd32:	0e 94 f2 aa 	call	0x155e4	; 0x155e4 <save_setup_network()>
    dd36:	87 e0       	ldi	r24, 0x07	; 7
    dd38:	0e 94 f1 6d 	call	0xdbe2	; 0xdbe2 <selftest_set_0(unsigned char)>
    dd3c:	60 96       	adiw	r28, 0x10	; 16
    dd3e:	0f b6       	in	r0, 0x3f	; 63
    dd40:	f8 94       	cli
    dd42:	de bf       	out	0x3e, r29	; 62
    dd44:	0f be       	out	0x3f, r0	; 63
    dd46:	cd bf       	out	0x3d, r28	; 61
    dd48:	df 91       	pop	r29
    dd4a:	cf 91       	pop	r28
    dd4c:	1f 91       	pop	r17
    dd4e:	0f 91       	pop	r16
    dd50:	08 95       	ret

0000dd52 <helper_dialog_network_set_name(unsigned int, unsigned int, unsigned char)>:
_Z30helper_dialog_network_set_namejjh():
    dd52:	cf 93       	push	r28
    dd54:	df 93       	push	r29
    dd56:	00 d0       	rcall	.+0      	; 0xdd58 <helper_dialog_network_set_name(unsigned int, unsigned int, unsigned char)+0x6>
    dd58:	00 d0       	rcall	.+0      	; 0xdd5a <helper_dialog_network_set_name(unsigned int, unsigned int, unsigned char)+0x8>
    dd5a:	00 d0       	rcall	.+0      	; 0xdd5c <helper_dialog_network_set_name(unsigned int, unsigned int, unsigned char)+0xa>
    dd5c:	1f 92       	push	r1
    dd5e:	1f 92       	push	r1
    dd60:	cd b7       	in	r28, 0x3d	; 61
    dd62:	de b7       	in	r29, 0x3e	; 62
    dd64:	ce 01       	movw	r24, r28
    dd66:	01 96       	adiw	r24, 0x01	; 1
    dd68:	0e 94 45 59 	call	0xb28a	; 0xb28a <display_element_get_string(char*)>
    dd6c:	be 01       	movw	r22, r28
    dd6e:	6f 5f       	subi	r22, 0xFF	; 255
    dd70:	7f 4f       	sbci	r23, 0xFF	; 255
    dd72:	8c ec       	ldi	r24, 0xCC	; 204
    dd74:	9f e0       	ldi	r25, 0x0F	; 15
    dd76:	0f 94 67 1a 	call	0x234ce	; 0x234ce <strcpy>
    dd7a:	0e 94 f2 aa 	call	0x155e4	; 0x155e4 <save_setup_network()>
    dd7e:	87 e0       	ldi	r24, 0x07	; 7
    dd80:	0e 94 f1 6d 	call	0xdbe2	; 0xdbe2 <selftest_set_0(unsigned char)>
    dd84:	2b 96       	adiw	r28, 0x0b	; 11
    dd86:	0f b6       	in	r0, 0x3f	; 63
    dd88:	f8 94       	cli
    dd8a:	de bf       	out	0x3e, r29	; 62
    dd8c:	0f be       	out	0x3f, r0	; 63
    dd8e:	cd bf       	out	0x3d, r28	; 61
    dd90:	df 91       	pop	r29
    dd92:	cf 91       	pop	r28
    dd94:	08 95       	ret

0000dd96 <helper_dialog_network_set_dns(unsigned int, unsigned int, unsigned char)>:
_Z29helper_dialog_network_set_dnsjjh():
    dd96:	0f 93       	push	r16
    dd98:	1f 93       	push	r17
    dd9a:	cf 93       	push	r28
    dd9c:	df 93       	push	r29
    dd9e:	cd b7       	in	r28, 0x3d	; 61
    dda0:	de b7       	in	r29, 0x3e	; 62
    dda2:	60 97       	sbiw	r28, 0x10	; 16
    dda4:	0f b6       	in	r0, 0x3f	; 63
    dda6:	f8 94       	cli
    dda8:	de bf       	out	0x3e, r29	; 62
    ddaa:	0f be       	out	0x3f, r0	; 63
    ddac:	cd bf       	out	0x3d, r28	; 61
    ddae:	ce 01       	movw	r24, r28
    ddb0:	01 96       	adiw	r24, 0x01	; 1
    ddb2:	0e 94 45 59 	call	0xb28a	; 0xb28a <display_element_get_string(char*)>
    ddb6:	0a e0       	ldi	r16, 0x0A	; 10
    ddb8:	10 e0       	ldi	r17, 0x00	; 0
    ddba:	24 e0       	ldi	r18, 0x04	; 4
    ddbc:	30 e0       	ldi	r19, 0x00	; 0
    ddbe:	44 ec       	ldi	r20, 0xC4	; 196
    ddc0:	5f e0       	ldi	r21, 0x0F	; 15
    ddc2:	6e e2       	ldi	r22, 0x2E	; 46
    ddc4:	ce 01       	movw	r24, r28
    ddc6:	01 96       	adiw	r24, 0x01	; 1
    ddc8:	0e 94 6f e4 	call	0x1c8de	; 0x1c8de <parseBytes(char const*, char, unsigned char*, int, int)>
    ddcc:	0e 94 f2 aa 	call	0x155e4	; 0x155e4 <save_setup_network()>
    ddd0:	87 e0       	ldi	r24, 0x07	; 7
    ddd2:	0e 94 f1 6d 	call	0xdbe2	; 0xdbe2 <selftest_set_0(unsigned char)>
    ddd6:	60 96       	adiw	r28, 0x10	; 16
    ddd8:	0f b6       	in	r0, 0x3f	; 63
    ddda:	f8 94       	cli
    dddc:	de bf       	out	0x3e, r29	; 62
    ddde:	0f be       	out	0x3f, r0	; 63
    dde0:	cd bf       	out	0x3d, r28	; 61
    dde2:	df 91       	pop	r29
    dde4:	cf 91       	pop	r28
    dde6:	1f 91       	pop	r17
    dde8:	0f 91       	pop	r16
    ddea:	08 95       	ret

0000ddec <helper_dialog_mqtt_set_server(unsigned int, unsigned int, unsigned char)>:
_Z29helper_dialog_mqtt_set_serverjjh():
    ddec:	0f 93       	push	r16
    ddee:	1f 93       	push	r17
    ddf0:	cf 93       	push	r28
    ddf2:	df 93       	push	r29
    ddf4:	cd b7       	in	r28, 0x3d	; 61
    ddf6:	de b7       	in	r29, 0x3e	; 62
    ddf8:	60 97       	sbiw	r28, 0x10	; 16
    ddfa:	0f b6       	in	r0, 0x3f	; 63
    ddfc:	f8 94       	cli
    ddfe:	de bf       	out	0x3e, r29	; 62
    de00:	0f be       	out	0x3f, r0	; 63
    de02:	cd bf       	out	0x3d, r28	; 61
    de04:	ce 01       	movw	r24, r28
    de06:	01 96       	adiw	r24, 0x01	; 1
    de08:	0e 94 45 59 	call	0xb28a	; 0xb28a <display_element_get_string(char*)>
    de0c:	0a e0       	ldi	r16, 0x0A	; 10
    de0e:	10 e0       	ldi	r17, 0x00	; 0
    de10:	24 e0       	ldi	r18, 0x04	; 4
    de12:	30 e0       	ldi	r19, 0x00	; 0
    de14:	46 ed       	ldi	r20, 0xD6	; 214
    de16:	5f e0       	ldi	r21, 0x0F	; 15
    de18:	6e e2       	ldi	r22, 0x2E	; 46
    de1a:	ce 01       	movw	r24, r28
    de1c:	01 96       	adiw	r24, 0x01	; 1
    de1e:	0e 94 6f e4 	call	0x1c8de	; 0x1c8de <parseBytes(char const*, char, unsigned char*, int, int)>
    de22:	0e 94 f2 aa 	call	0x155e4	; 0x155e4 <save_setup_network()>
    de26:	87 e0       	ldi	r24, 0x07	; 7
    de28:	0e 94 f1 6d 	call	0xdbe2	; 0xdbe2 <selftest_set_0(unsigned char)>
    de2c:	60 96       	adiw	r28, 0x10	; 16
    de2e:	0f b6       	in	r0, 0x3f	; 63
    de30:	f8 94       	cli
    de32:	de bf       	out	0x3e, r29	; 62
    de34:	0f be       	out	0x3f, r0	; 63
    de36:	cd bf       	out	0x3d, r28	; 61
    de38:	df 91       	pop	r29
    de3a:	cf 91       	pop	r28
    de3c:	1f 91       	pop	r17
    de3e:	0f 91       	pop	r16
    de40:	08 95       	ret

0000de42 <helper_dialog_mqtt_set_user(unsigned int, unsigned int, unsigned char)>:
_Z27helper_dialog_mqtt_set_userjjh():
    de42:	cf 93       	push	r28
    de44:	df 93       	push	r29
    de46:	cd b7       	in	r28, 0x3d	; 61
    de48:	de b7       	in	r29, 0x3e	; 62
    de4a:	64 97       	sbiw	r28, 0x14	; 20
    de4c:	0f b6       	in	r0, 0x3f	; 63
    de4e:	f8 94       	cli
    de50:	de bf       	out	0x3e, r29	; 62
    de52:	0f be       	out	0x3f, r0	; 63
    de54:	cd bf       	out	0x3d, r28	; 61
    de56:	ce 01       	movw	r24, r28
    de58:	01 96       	adiw	r24, 0x01	; 1
    de5a:	0e 94 45 59 	call	0xb28a	; 0xb28a <display_element_get_string(char*)>
    de5e:	be 01       	movw	r22, r28
    de60:	6f 5f       	subi	r22, 0xFF	; 255
    de62:	7f 4f       	sbci	r23, 0xFF	; 255
    de64:	8c ed       	ldi	r24, 0xDC	; 220
    de66:	9f e0       	ldi	r25, 0x0F	; 15
    de68:	0f 94 67 1a 	call	0x234ce	; 0x234ce <strcpy>
    de6c:	0e 94 f2 aa 	call	0x155e4	; 0x155e4 <save_setup_network()>
    de70:	87 e0       	ldi	r24, 0x07	; 7
    de72:	0e 94 f1 6d 	call	0xdbe2	; 0xdbe2 <selftest_set_0(unsigned char)>
    de76:	64 96       	adiw	r28, 0x14	; 20
    de78:	0f b6       	in	r0, 0x3f	; 63
    de7a:	f8 94       	cli
    de7c:	de bf       	out	0x3e, r29	; 62
    de7e:	0f be       	out	0x3f, r0	; 63
    de80:	cd bf       	out	0x3d, r28	; 61
    de82:	df 91       	pop	r29
    de84:	cf 91       	pop	r28
    de86:	08 95       	ret

0000de88 <helper_dialog_mqtt_set_pass(unsigned int, unsigned int, unsigned char)>:
_Z27helper_dialog_mqtt_set_passjjh():
    de88:	cf 93       	push	r28
    de8a:	df 93       	push	r29
    de8c:	cd b7       	in	r28, 0x3d	; 61
    de8e:	de b7       	in	r29, 0x3e	; 62
    de90:	64 97       	sbiw	r28, 0x14	; 20
    de92:	0f b6       	in	r0, 0x3f	; 63
    de94:	f8 94       	cli
    de96:	de bf       	out	0x3e, r29	; 62
    de98:	0f be       	out	0x3f, r0	; 63
    de9a:	cd bf       	out	0x3d, r28	; 61
    de9c:	ce 01       	movw	r24, r28
    de9e:	01 96       	adiw	r24, 0x01	; 1
    dea0:	0e 94 45 59 	call	0xb28a	; 0xb28a <display_element_get_string(char*)>
    dea4:	be 01       	movw	r22, r28
    dea6:	6f 5f       	subi	r22, 0xFF	; 255
    dea8:	7f 4f       	sbci	r23, 0xFF	; 255
    deaa:	80 ef       	ldi	r24, 0xF0	; 240
    deac:	9f e0       	ldi	r25, 0x0F	; 15
    deae:	0f 94 67 1a 	call	0x234ce	; 0x234ce <strcpy>
    deb2:	0e 94 f2 aa 	call	0x155e4	; 0x155e4 <save_setup_network()>
    deb6:	87 e0       	ldi	r24, 0x07	; 7
    deb8:	0e 94 f1 6d 	call	0xdbe2	; 0xdbe2 <selftest_set_0(unsigned char)>
    debc:	64 96       	adiw	r28, 0x14	; 20
    debe:	0f b6       	in	r0, 0x3f	; 63
    dec0:	f8 94       	cli
    dec2:	de bf       	out	0x3e, r29	; 62
    dec4:	0f be       	out	0x3f, r0	; 63
    dec6:	cd bf       	out	0x3d, r28	; 61
    dec8:	df 91       	pop	r29
    deca:	cf 91       	pop	r28
    decc:	08 95       	ret

0000dece <selftest_clear_0(unsigned char)>:
_Z16selftest_clear_0h():
    dece:	21 e0       	ldi	r18, 0x01	; 1
    ded0:	30 e0       	ldi	r19, 0x00	; 0
    ded2:	01 c0       	rjmp	.+2      	; 0xded6 <selftest_clear_0(unsigned char)+0x8>
    ded4:	22 0f       	add	r18, r18
    ded6:	8a 95       	dec	r24
    ded8:	ea f7       	brpl	.-6      	; 0xded4 <selftest_clear_0(unsigned char)+0x6>
    deda:	20 95       	com	r18
    dedc:	80 91 60 0b 	lds	r24, 0x0B60	; 0x800b60 <selftest_data>
    dee0:	28 23       	and	r18, r24
    dee2:	20 93 60 0b 	sts	0x0B60, r18	; 0x800b60 <selftest_data>
    dee6:	08 95       	ret

0000dee8 <selftest()>:
_Z8selftestv():
    dee8:	8c e1       	ldi	r24, 0x1C	; 28
    deea:	9f e0       	ldi	r25, 0x0F	; 15
    deec:	0e 94 57 e7 	call	0x1ceae	; 0x1ceae <RTC_DS1307::isrunning()>
    def0:	90 91 60 0b 	lds	r25, 0x0B60	; 0x800b60 <selftest_data>
    def4:	81 11       	cpse	r24, r1
    def6:	0f c0       	rjmp	.+30     	; 0xdf16 <selftest()+0x2e>
    def8:	91 60       	ori	r25, 0x01	; 1
    defa:	90 93 60 0b 	sts	0x0B60, r25	; 0x800b60 <selftest_data>
    defe:	83 e3       	ldi	r24, 0x33	; 51
    df00:	92 e1       	ldi	r25, 0x12	; 18
    df02:	0e 94 00 da 	call	0x1b400	; 0x1b400 <EthernetClass::link()>
    df06:	90 91 60 0b 	lds	r25, 0x0B60	; 0x800b60 <selftest_data>
    df0a:	81 30       	cpi	r24, 0x01	; 1
    df0c:	31 f4       	brne	.+12     	; 0xdf1a <selftest()+0x32>
    df0e:	9f 7b       	andi	r25, 0xBF	; 191
    df10:	90 93 60 0b 	sts	0x0B60, r25	; 0x800b60 <selftest_data>
    df14:	08 95       	ret
    df16:	9e 7f       	andi	r25, 0xFE	; 254
    df18:	f0 cf       	rjmp	.-32     	; 0xdefa <selftest()+0x12>
    df1a:	90 64       	ori	r25, 0x40	; 64
    df1c:	f9 cf       	rjmp	.-14     	; 0xdf10 <selftest()+0x28>

0000df1e <time_get_offset()>:
_Z15time_get_offsetv():
    df1e:	81 e0       	ldi	r24, 0x01	; 1
    df20:	90 e0       	ldi	r25, 0x00	; 0
    df22:	0c 94 8e 51 	jmp	0xa31c	; 0xa31c <EEPROMClass::read(int) [clone .isra.8]>

0000df26 <send_device_status()>:
_Z18send_device_statusv():
    df26:	cf 92       	push	r12
    df28:	df 92       	push	r13
    df2a:	ef 92       	push	r14
    df2c:	ff 92       	push	r15
    df2e:	0f 93       	push	r16
    df30:	1f 93       	push	r17
    df32:	cf 93       	push	r28
    df34:	df 93       	push	r29
    df36:	cd b7       	in	r28, 0x3d	; 61
    df38:	de b7       	in	r29, 0x3e	; 62
    df3a:	c7 58       	subi	r28, 0x87	; 135
    df3c:	d1 09       	sbc	r29, r1
    df3e:	0f b6       	in	r0, 0x3f	; 63
    df40:	f8 94       	cli
    df42:	de bf       	out	0x3e, r29	; 62
    df44:	0f be       	out	0x3f, r0	; 63
    df46:	cd bf       	out	0x3d, r28	; 61
    df48:	8c ea       	ldi	r24, 0xAC	; 172
    df4a:	9e e0       	ldi	r25, 0x0E	; 14
    df4c:	0e 94 de ed 	call	0x1dbbc	; 0x1dbbc <PubSubClient::connected()>
    df50:	88 23       	and	r24, r24
    df52:	09 f4       	brne	.+2      	; 0xdf56 <send_device_status()+0x30>
    df54:	a5 c1       	rjmp	.+842    	; 0xe2a0 <send_device_status()+0x37a>
    df56:	68 e8       	ldi	r22, 0x88	; 136
    df58:	74 e0       	ldi	r23, 0x04	; 4
    df5a:	ce 01       	movw	r24, r28
    df5c:	8f 5b       	subi	r24, 0xBF	; 191
    df5e:	9f 4f       	sbci	r25, 0xFF	; 255
    df60:	0f 94 67 1a 	call	0x234ce	; 0x234ce <strcpy>
    df64:	80 91 54 0b 	lds	r24, 0x0B54	; 0x800b54 <uptime+0x3>
    df68:	8f 93       	push	r24
    df6a:	80 91 53 0b 	lds	r24, 0x0B53	; 0x800b53 <uptime+0x2>
    df6e:	8f 93       	push	r24
    df70:	80 91 52 0b 	lds	r24, 0x0B52	; 0x800b52 <uptime+0x1>
    df74:	8f 93       	push	r24
    df76:	80 91 51 0b 	lds	r24, 0x0B51	; 0x800b51 <uptime>
    df7a:	8f 93       	push	r24
    df7c:	86 e9       	ldi	r24, 0x96	; 150
    df7e:	c8 2e       	mov	r12, r24
    df80:	84 e0       	ldi	r24, 0x04	; 4
    df82:	d8 2e       	mov	r13, r24
    df84:	df 92       	push	r13
    df86:	cf 92       	push	r12
    df88:	ce 01       	movw	r24, r28
    df8a:	01 96       	adiw	r24, 0x01	; 1
    df8c:	7c 01       	movw	r14, r24
    df8e:	9f 93       	push	r25
    df90:	8f 93       	push	r24
    df92:	0f 94 a6 1b 	call	0x2374c	; 0x2374c <sprintf>
    df96:	a7 01       	movw	r20, r14
    df98:	be 01       	movw	r22, r28
    df9a:	6f 5b       	subi	r22, 0xBF	; 191
    df9c:	7f 4f       	sbci	r23, 0xFF	; 255
    df9e:	8c ea       	ldi	r24, 0xAC	; 172
    dfa0:	9e e0       	ldi	r25, 0x0E	; 14
    dfa2:	0e 94 d2 ad 	call	0x15ba4	; 0x15ba4 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    dfa6:	6a e9       	ldi	r22, 0x9A	; 154
    dfa8:	74 e0       	ldi	r23, 0x04	; 4
    dfaa:	ce 01       	movw	r24, r28
    dfac:	8f 5b       	subi	r24, 0xBF	; 191
    dfae:	9f 4f       	sbci	r25, 0xFF	; 255
    dfb0:	0f 94 67 1a 	call	0x234ce	; 0x234ce <strcpy>
    dfb4:	80 91 2c 0b 	lds	r24, 0x0B2C	; 0x800b2c <brigthness_display_values>
itoa():
    dfb8:	4a e0       	ldi	r20, 0x0A	; 10
    dfba:	b7 01       	movw	r22, r14
    dfbc:	90 e0       	ldi	r25, 0x00	; 0
    dfbe:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z18send_device_statusv():
    dfc2:	a7 01       	movw	r20, r14
    dfc4:	be 01       	movw	r22, r28
    dfc6:	6f 5b       	subi	r22, 0xBF	; 191
    dfc8:	7f 4f       	sbci	r23, 0xFF	; 255
    dfca:	8c ea       	ldi	r24, 0xAC	; 172
    dfcc:	9e e0       	ldi	r25, 0x0E	; 14
    dfce:	0e 94 d2 ad 	call	0x15ba4	; 0x15ba4 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    dfd2:	6c ea       	ldi	r22, 0xAC	; 172
    dfd4:	74 e0       	ldi	r23, 0x04	; 4
    dfd6:	ce 01       	movw	r24, r28
    dfd8:	8f 5b       	subi	r24, 0xBF	; 191
    dfda:	9f 4f       	sbci	r25, 0xFF	; 255
    dfdc:	0f 94 67 1a 	call	0x234ce	; 0x234ce <strcpy>
itoa():
    dfe0:	4a e0       	ldi	r20, 0x0A	; 10
    dfe2:	b7 01       	movw	r22, r14
    dfe4:	80 91 56 0b 	lds	r24, 0x0B56	; 0x800b56 <light_curr>
    dfe8:	90 91 57 0b 	lds	r25, 0x0B57	; 0x800b57 <light_curr+0x1>
    dfec:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z18send_device_statusv():
    dff0:	a7 01       	movw	r20, r14
    dff2:	be 01       	movw	r22, r28
    dff4:	6f 5b       	subi	r22, 0xBF	; 191
    dff6:	7f 4f       	sbci	r23, 0xFF	; 255
    dff8:	8c ea       	ldi	r24, 0xAC	; 172
    dffa:	9e e0       	ldi	r25, 0x0E	; 14
    dffc:	0e 94 d2 ad 	call	0x15ba4	; 0x15ba4 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    e000:	69 eb       	ldi	r22, 0xB9	; 185
    e002:	74 e0       	ldi	r23, 0x04	; 4
    e004:	ce 01       	movw	r24, r28
    e006:	8f 5b       	subi	r24, 0xBF	; 191
    e008:	9f 4f       	sbci	r25, 0xFF	; 255
    e00a:	0f 94 67 1a 	call	0x234ce	; 0x234ce <strcpy>
    e00e:	80 91 2b 0b 	lds	r24, 0x0B2B	; 0x800b2b <brigthness_display_auto_values>
itoa():
    e012:	4a e0       	ldi	r20, 0x0A	; 10
    e014:	b7 01       	movw	r22, r14
    e016:	90 e0       	ldi	r25, 0x00	; 0
    e018:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z18send_device_statusv():
    e01c:	a7 01       	movw	r20, r14
    e01e:	be 01       	movw	r22, r28
    e020:	6f 5b       	subi	r22, 0xBF	; 191
    e022:	7f 4f       	sbci	r23, 0xFF	; 255
    e024:	8c ea       	ldi	r24, 0xAC	; 172
    e026:	9e e0       	ldi	r25, 0x0E	; 14
    e028:	0e 94 d2 ad 	call	0x15ba4	; 0x15ba4 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    e02c:	60 ed       	ldi	r22, 0xD0	; 208
    e02e:	74 e0       	ldi	r23, 0x04	; 4
    e030:	ce 01       	movw	r24, r28
    e032:	8f 5b       	subi	r24, 0xBF	; 191
    e034:	9f 4f       	sbci	r25, 0xFF	; 255
    e036:	0f 94 67 1a 	call	0x234ce	; 0x234ce <strcpy>
itoa():
    e03a:	4a e0       	ldi	r20, 0x0A	; 10
    e03c:	b7 01       	movw	r22, r14
    e03e:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <load_min>
    e042:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <load_min+0x1>
    e046:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z18send_device_statusv():
    e04a:	a7 01       	movw	r20, r14
    e04c:	be 01       	movw	r22, r28
    e04e:	6f 5b       	subi	r22, 0xBF	; 191
    e050:	7f 4f       	sbci	r23, 0xFF	; 255
    e052:	8c ea       	ldi	r24, 0xAC	; 172
    e054:	9e e0       	ldi	r25, 0x0E	; 14
    e056:	0e 94 d2 ad 	call	0x15ba4	; 0x15ba4 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    e05a:	60 ee       	ldi	r22, 0xE0	; 224
    e05c:	74 e0       	ldi	r23, 0x04	; 4
    e05e:	ce 01       	movw	r24, r28
    e060:	8f 5b       	subi	r24, 0xBF	; 191
    e062:	9f 4f       	sbci	r25, 0xFF	; 255
    e064:	0f 94 67 1a 	call	0x234ce	; 0x234ce <strcpy>
itoa():
    e068:	4a e0       	ldi	r20, 0x0A	; 10
    e06a:	b7 01       	movw	r22, r14
    e06c:	80 91 2f 0b 	lds	r24, 0x0B2F	; 0x800b2f <load_max>
    e070:	90 91 30 0b 	lds	r25, 0x0B30	; 0x800b30 <load_max+0x1>
    e074:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z18send_device_statusv():
    e078:	a7 01       	movw	r20, r14
    e07a:	be 01       	movw	r22, r28
    e07c:	6f 5b       	subi	r22, 0xBF	; 191
    e07e:	7f 4f       	sbci	r23, 0xFF	; 255
    e080:	8c ea       	ldi	r24, 0xAC	; 172
    e082:	9e e0       	ldi	r25, 0x0E	; 14
    e084:	0e 94 d2 ad 	call	0x15ba4	; 0x15ba4 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    e088:	10 92 2f 0b 	sts	0x0B2F, r1	; 0x800b2f <load_max>
    e08c:	10 92 30 0b 	sts	0x0B30, r1	; 0x800b30 <load_max+0x1>
    e090:	10 92 31 0b 	sts	0x0B31, r1	; 0x800b31 <load_max+0x2>
    e094:	10 92 32 0b 	sts	0x0B32, r1	; 0x800b32 <load_max+0x3>
    e098:	8f ef       	ldi	r24, 0xFF	; 255
    e09a:	9f ef       	ldi	r25, 0xFF	; 255
    e09c:	dc 01       	movw	r26, r24
    e09e:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <load_min>
    e0a2:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <load_min+0x1>
    e0a6:	a0 93 3a 02 	sts	0x023A, r26	; 0x80023a <load_min+0x2>
    e0aa:	b0 93 3b 02 	sts	0x023B, r27	; 0x80023b <load_min+0x3>
    e0ae:	60 ef       	ldi	r22, 0xF0	; 240
    e0b0:	74 e0       	ldi	r23, 0x04	; 4
    e0b2:	ce 01       	movw	r24, r28
    e0b4:	8f 5b       	subi	r24, 0xBF	; 191
    e0b6:	9f 4f       	sbci	r25, 0xFF	; 255
    e0b8:	0f 94 67 1a 	call	0x234ce	; 0x234ce <strcpy>
    e0bc:	80 91 3a 0b 	lds	r24, 0x0B3A	; 0x800b3a <default_ring>
itoa():
    e0c0:	4a e0       	ldi	r20, 0x0A	; 10
    e0c2:	b7 01       	movw	r22, r14
    e0c4:	90 e0       	ldi	r25, 0x00	; 0
    e0c6:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z18send_device_statusv():
    e0ca:	a7 01       	movw	r20, r14
    e0cc:	be 01       	movw	r22, r28
    e0ce:	6f 5b       	subi	r22, 0xBF	; 191
    e0d0:	7f 4f       	sbci	r23, 0xFF	; 255
    e0d2:	8c ea       	ldi	r24, 0xAC	; 172
    e0d4:	9e e0       	ldi	r25, 0x0E	; 14
    e0d6:	0e 94 d2 ad 	call	0x15ba4	; 0x15ba4 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    e0da:	64 e0       	ldi	r22, 0x04	; 4
    e0dc:	75 e0       	ldi	r23, 0x05	; 5
    e0de:	ce 01       	movw	r24, r28
    e0e0:	8f 5b       	subi	r24, 0xBF	; 191
    e0e2:	9f 4f       	sbci	r25, 0xFF	; 255
    e0e4:	0f 94 67 1a 	call	0x234ce	; 0x234ce <strcpy>
    e0e8:	80 91 60 0b 	lds	r24, 0x0B60	; 0x800b60 <selftest_data>
itoa():
    e0ec:	4a e0       	ldi	r20, 0x0A	; 10
    e0ee:	b7 01       	movw	r22, r14
    e0f0:	90 e0       	ldi	r25, 0x00	; 0
    e0f2:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z18send_device_statusv():
    e0f6:	a7 01       	movw	r20, r14
    e0f8:	be 01       	movw	r22, r28
    e0fa:	6f 5b       	subi	r22, 0xBF	; 191
    e0fc:	7f 4f       	sbci	r23, 0xFF	; 255
    e0fe:	8c ea       	ldi	r24, 0xAC	; 172
    e100:	9e e0       	ldi	r25, 0x0E	; 14
    e102:	0e 94 d2 ad 	call	0x15ba4	; 0x15ba4 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    e106:	64 e1       	ldi	r22, 0x14	; 20
    e108:	75 e0       	ldi	r23, 0x05	; 5
    e10a:	ce 01       	movw	r24, r28
    e10c:	8f 5b       	subi	r24, 0xBF	; 191
    e10e:	9f 4f       	sbci	r25, 0xFF	; 255
    e110:	0f 94 67 1a 	call	0x234ce	; 0x234ce <strcpy>
    e114:	80 91 27 0b 	lds	r24, 0x0B27	; 0x800b27 <use_rtds>
itoa():
    e118:	4a e0       	ldi	r20, 0x0A	; 10
    e11a:	b7 01       	movw	r22, r14
    e11c:	90 e0       	ldi	r25, 0x00	; 0
    e11e:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z18send_device_statusv():
    e122:	a7 01       	movw	r20, r14
    e124:	be 01       	movw	r22, r28
    e126:	6f 5b       	subi	r22, 0xBF	; 191
    e128:	7f 4f       	sbci	r23, 0xFF	; 255
    e12a:	8c ea       	ldi	r24, 0xAC	; 172
    e12c:	9e e0       	ldi	r25, 0x0E	; 14
    e12e:	0e 94 d2 ad 	call	0x15ba4	; 0x15ba4 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    e132:	0e 94 8f 6f 	call	0xdf1e	; 0xdf1e <time_get_offset()>
itoa():
    e136:	4a e0       	ldi	r20, 0x0A	; 10
    e138:	b7 01       	movw	r22, r14
    e13a:	08 2e       	mov	r0, r24
    e13c:	00 0c       	add	r0, r0
    e13e:	99 0b       	sbc	r25, r25
    e140:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z18send_device_statusv():
    e144:	a7 01       	movw	r20, r14
    e146:	66 e2       	ldi	r22, 0x26	; 38
    e148:	75 e0       	ldi	r23, 0x05	; 5
    e14a:	8c ea       	ldi	r24, 0xAC	; 172
    e14c:	9e e0       	ldi	r25, 0x0E	; 14
    e14e:	0e 94 d2 ad 	call	0x15ba4	; 0x15ba4 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
_Z15prepocet_napetijh():
    e152:	80 91 5e 0b 	lds	r24, 0x0B5E	; 0x800b5e <tritri>
    e156:	90 91 5f 0b 	lds	r25, 0x0B5F	; 0x800b5f <tritri+0x1>
    e15a:	25 e0       	ldi	r18, 0x05	; 5
    e15c:	28 9f       	mul	r18, r24
    e15e:	b0 01       	movw	r22, r0
    e160:	29 9f       	mul	r18, r25
    e162:	70 0d       	add	r23, r0
    e164:	11 24       	eor	r1, r1
    e166:	90 e0       	ldi	r25, 0x00	; 0
    e168:	80 e0       	ldi	r24, 0x00	; 0
    e16a:	0f 94 f5 14 	call	0x229ea	; 0x229ea <__floatunsisf>
    e16e:	20 e0       	ldi	r18, 0x00	; 0
    e170:	30 e0       	ldi	r19, 0x00	; 0
    e172:	4a e7       	ldi	r20, 0x7A	; 122
    e174:	54 e4       	ldi	r21, 0x44	; 68
    e176:	0f 94 4d 14 	call	0x2289a	; 0x2289a <__divsf3>
_Z18send_device_statusv():
    e17a:	87 01       	movw	r16, r14
    e17c:	22 e0       	ldi	r18, 0x02	; 2
    e17e:	44 e0       	ldi	r20, 0x04	; 4
    e180:	0f 94 c0 16 	call	0x22d80	; 0x22d80 <dtostrf>
    e184:	a7 01       	movw	r20, r14
    e186:	66 e3       	ldi	r22, 0x36	; 54
    e188:	75 e0       	ldi	r23, 0x05	; 5
    e18a:	8c ea       	ldi	r24, 0xAC	; 172
    e18c:	9e e0       	ldi	r25, 0x0E	; 14
    e18e:	0e 94 d2 ad 	call	0x15ba4	; 0x15ba4 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
_Z15prepocet_napetijh():
    e192:	60 91 5c 0b 	lds	r22, 0x0B5C	; 0x800b5c <petnula>
    e196:	70 91 5d 0b 	lds	r23, 0x0B5D	; 0x800b5d <petnula+0x1>
    e19a:	93 e0       	ldi	r25, 0x03	; 3
    e19c:	66 0f       	add	r22, r22
    e19e:	77 1f       	adc	r23, r23
    e1a0:	9a 95       	dec	r25
    e1a2:	e1 f7       	brne	.-8      	; 0xe19c <send_device_status()+0x276>
    e1a4:	90 e0       	ldi	r25, 0x00	; 0
    e1a6:	80 e0       	ldi	r24, 0x00	; 0
    e1a8:	0f 94 f5 14 	call	0x229ea	; 0x229ea <__floatunsisf>
    e1ac:	20 e0       	ldi	r18, 0x00	; 0
    e1ae:	30 e0       	ldi	r19, 0x00	; 0
    e1b0:	4a e7       	ldi	r20, 0x7A	; 122
    e1b2:	54 e4       	ldi	r21, 0x44	; 68
    e1b4:	0f 94 4d 14 	call	0x2289a	; 0x2289a <__divsf3>
_Z18send_device_statusv():
    e1b8:	22 e0       	ldi	r18, 0x02	; 2
    e1ba:	44 e0       	ldi	r20, 0x04	; 4
    e1bc:	0f 94 c0 16 	call	0x22d80	; 0x22d80 <dtostrf>
    e1c0:	a7 01       	movw	r20, r14
    e1c2:	69 e4       	ldi	r22, 0x49	; 73
    e1c4:	75 e0       	ldi	r23, 0x05	; 5
    e1c6:	8c ea       	ldi	r24, 0xAC	; 172
    e1c8:	9e e0       	ldi	r25, 0x0E	; 14
    e1ca:	0e 94 d2 ad 	call	0x15ba4	; 0x15ba4 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
_Z15prepocet_napetijh():
    e1ce:	80 91 5a 0b 	lds	r24, 0x0B5A	; 0x800b5a <dvanact>
    e1d2:	90 91 5b 0b 	lds	r25, 0x0B5B	; 0x800b5b <dvanact+0x1>
    e1d6:	29 e3       	ldi	r18, 0x39	; 57
    e1d8:	28 9f       	mul	r18, r24
    e1da:	b0 01       	movw	r22, r0
    e1dc:	29 9f       	mul	r18, r25
    e1de:	70 0d       	add	r23, r0
    e1e0:	11 24       	eor	r1, r1
    e1e2:	90 e0       	ldi	r25, 0x00	; 0
    e1e4:	80 e0       	ldi	r24, 0x00	; 0
    e1e6:	0f 94 f5 14 	call	0x229ea	; 0x229ea <__floatunsisf>
    e1ea:	20 e0       	ldi	r18, 0x00	; 0
    e1ec:	30 e0       	ldi	r19, 0x00	; 0
    e1ee:	4a e7       	ldi	r20, 0x7A	; 122
    e1f0:	54 e4       	ldi	r21, 0x44	; 68
    e1f2:	0f 94 4d 14 	call	0x2289a	; 0x2289a <__divsf3>
_Z18send_device_statusv():
    e1f6:	22 e0       	ldi	r18, 0x02	; 2
    e1f8:	44 e0       	ldi	r20, 0x04	; 4
    e1fa:	0f 94 c0 16 	call	0x22d80	; 0x22d80 <dtostrf>
    e1fe:	a7 01       	movw	r20, r14
    e200:	6c e5       	ldi	r22, 0x5C	; 92
    e202:	75 e0       	ldi	r23, 0x05	; 5
    e204:	8c ea       	ldi	r24, 0xAC	; 172
    e206:	9e e0       	ldi	r25, 0x0E	; 14
    e208:	0e 94 d2 ad 	call	0x15ba4	; 0x15ba4 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
_Z15prepocet_prouduj():
    e20c:	60 91 58 0b 	lds	r22, 0x0B58	; 0x800b58 <proud>
    e210:	70 91 59 0b 	lds	r23, 0x0B59	; 0x800b59 <proud+0x1>
    e214:	90 e0       	ldi	r25, 0x00	; 0
    e216:	80 e0       	ldi	r24, 0x00	; 0
    e218:	0f 94 f5 14 	call	0x229ea	; 0x229ea <__floatunsisf>
_Z18send_device_statusv():
    e21c:	22 e0       	ldi	r18, 0x02	; 2
    e21e:	44 e0       	ldi	r20, 0x04	; 4
    e220:	0f 94 c0 16 	call	0x22d80	; 0x22d80 <dtostrf>
    e224:	a7 01       	movw	r20, r14
    e226:	6f e6       	ldi	r22, 0x6F	; 111
    e228:	75 e0       	ldi	r23, 0x05	; 5
    e22a:	8c ea       	ldi	r24, 0xAC	; 172
    e22c:	9e e0       	ldi	r25, 0x0E	; 14
    e22e:	0e 94 d2 ad 	call	0x15ba4	; 0x15ba4 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    e232:	60 91 19 0b 	lds	r22, 0x0B19	; 0x800b19 <internal_temp>
    e236:	70 91 1a 0b 	lds	r23, 0x0B1A	; 0x800b1a <internal_temp+0x1>
    e23a:	80 91 1b 0b 	lds	r24, 0x0B1B	; 0x800b1b <internal_temp+0x2>
    e23e:	90 91 1c 0b 	lds	r25, 0x0B1C	; 0x800b1c <internal_temp+0x3>
    e242:	22 e0       	ldi	r18, 0x02	; 2
    e244:	44 e0       	ldi	r20, 0x04	; 4
    e246:	0f 94 c0 16 	call	0x22d80	; 0x22d80 <dtostrf>
    e24a:	a7 01       	movw	r20, r14
    e24c:	66 e8       	ldi	r22, 0x86	; 134
    e24e:	75 e0       	ldi	r23, 0x05	; 5
    e250:	8c ea       	ldi	r24, 0xAC	; 172
    e252:	9e e0       	ldi	r25, 0x0E	; 14
    e254:	0e 94 d2 ad 	call	0x15ba4	; 0x15ba4 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    e258:	41 e5       	ldi	r20, 0x51	; 81
    e25a:	53 e0       	ldi	r21, 0x03	; 3
    e25c:	6a e5       	ldi	r22, 0x5A	; 90
    e25e:	73 e0       	ldi	r23, 0x03	; 3
    e260:	ce 01       	movw	r24, r28
    e262:	8f 57       	subi	r24, 0x7F	; 127
    e264:	9f 4f       	sbci	r25, 0xFF	; 255
    e266:	0e 94 2a e6 	call	0x1cc54	; 0x1cc54 <DateTime::DateTime(char const*, char const*)>
    e26a:	ce 01       	movw	r24, r28
    e26c:	8f 57       	subi	r24, 0x7F	; 127
    e26e:	9f 4f       	sbci	r25, 0xFF	; 255
    e270:	0e 94 a7 e6 	call	0x1cd4e	; 0x1cd4e <DateTime::unixtime() const>
    e274:	9f 93       	push	r25
    e276:	8f 93       	push	r24
    e278:	7f 93       	push	r23
    e27a:	6f 93       	push	r22
    e27c:	df 92       	push	r13
    e27e:	cf 92       	push	r12
    e280:	ff 92       	push	r15
    e282:	ef 92       	push	r14
    e284:	0f 94 a6 1b 	call	0x2374c	; 0x2374c <sprintf>
    e288:	a7 01       	movw	r20, r14
    e28a:	6b e9       	ldi	r22, 0x9B	; 155
    e28c:	75 e0       	ldi	r23, 0x05	; 5
    e28e:	8c ea       	ldi	r24, 0xAC	; 172
    e290:	9e e0       	ldi	r25, 0x0E	; 14
    e292:	0e 94 d2 ad 	call	0x15ba4	; 0x15ba4 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    e296:	0f b6       	in	r0, 0x3f	; 63
    e298:	f8 94       	cli
    e29a:	de bf       	out	0x3e, r29	; 62
    e29c:	0f be       	out	0x3f, r0	; 63
    e29e:	cd bf       	out	0x3d, r28	; 61
    e2a0:	c9 57       	subi	r28, 0x79	; 121
    e2a2:	df 4f       	sbci	r29, 0xFF	; 255
    e2a4:	0f b6       	in	r0, 0x3f	; 63
    e2a6:	f8 94       	cli
    e2a8:	de bf       	out	0x3e, r29	; 62
    e2aa:	0f be       	out	0x3f, r0	; 63
    e2ac:	cd bf       	out	0x3d, r28	; 61
    e2ae:	df 91       	pop	r29
    e2b0:	cf 91       	pop	r28
    e2b2:	1f 91       	pop	r17
    e2b4:	0f 91       	pop	r16
    e2b6:	ff 90       	pop	r15
    e2b8:	ef 90       	pop	r14
    e2ba:	df 90       	pop	r13
    e2bc:	cf 90       	pop	r12
    e2be:	08 95       	ret

0000e2c0 <button_click_ntp_sync_time(unsigned int, unsigned int, unsigned char)>:
_Z26button_click_ntp_sync_timejjh():
    e2c0:	0f 93       	push	r16
    e2c2:	1f 93       	push	r17
    e2c4:	cf 93       	push	r28
    e2c6:	df 93       	push	r29
    e2c8:	cd b7       	in	r28, 0x3d	; 61
    e2ca:	de b7       	in	r29, 0x3e	; 62
    e2cc:	c4 55       	subi	r28, 0x54	; 84
    e2ce:	d1 09       	sbc	r29, r1
    e2d0:	0f b6       	in	r0, 0x3f	; 63
    e2d2:	f8 94       	cli
    e2d4:	de bf       	out	0x3e, r29	; 62
    e2d6:	0f be       	out	0x3f, r0	; 63
    e2d8:	cd bf       	out	0x3d, r28	; 61
    e2da:	65 ed       	ldi	r22, 0xD5	; 213
    e2dc:	7e e0       	ldi	r23, 0x0E	; 14
    e2de:	ce 01       	movw	r24, r28
    e2e0:	01 96       	adiw	r24, 0x01	; 1
    e2e2:	0f 94 1e 0c 	call	0x2183c	; 0x2183c <NTPClient::NTPClient(UDP&)>
    e2e6:	40 e0       	ldi	r20, 0x00	; 0
    e2e8:	50 e0       	ldi	r21, 0x00	; 0
    e2ea:	ba 01       	movw	r22, r20
    e2ec:	ce 01       	movw	r24, r28
    e2ee:	88 5b       	subi	r24, 0xB8	; 184
    e2f0:	9f 4f       	sbci	r25, 0xFF	; 255
    e2f2:	0e 94 99 e5 	call	0x1cb32	; 0x1cb32 <DateTime::DateTime(unsigned long)>
    e2f6:	0e 94 8f 6f 	call	0xdf1e	; 0xdf1e <time_get_offset()>
    e2fa:	9e 01       	movw	r18, r28
    e2fc:	28 5b       	subi	r18, 0xB8	; 184
    e2fe:	3f 4f       	sbci	r19, 0xFF	; 255
    e300:	48 2f       	mov	r20, r24
    e302:	6c e1       	ldi	r22, 0x1C	; 28
    e304:	7f e0       	ldi	r23, 0x0F	; 15
    e306:	ce 01       	movw	r24, r28
    e308:	01 96       	adiw	r24, 0x01	; 1
    e30a:	0e 94 09 b0 	call	0x16012	; 0x16012 <ntp_update(NTPClient*, RTC_DS1307*, unsigned char, DateTime*)>
    e30e:	81 30       	cpi	r24, 0x01	; 1
    e310:	09 f0       	breq	.+2      	; 0xe314 <button_click_ntp_sync_time(unsigned int, unsigned int, unsigned char)+0x54>
    e312:	3f c0       	rjmp	.+126    	; 0xe392 <button_click_ntp_sync_time(unsigned int, unsigned int, unsigned char)+0xd2>
    e314:	0e 94 67 6f 	call	0xdece	; 0xdece <selftest_clear_0(unsigned char)>
    e318:	70 e0       	ldi	r23, 0x00	; 0
    e31a:	60 e0       	ldi	r22, 0x00	; 0
    e31c:	88 e6       	ldi	r24, 0x68	; 104
    e31e:	90 e0       	ldi	r25, 0x00	; 0
    e320:	0e 94 c1 54 	call	0xa982	; 0xa982 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.59]>
    e324:	2d 96       	adiw	r28, 0x0d	; 13
    e326:	8f ad       	ldd	r24, Y+63	; 0x3f
    e328:	2d 97       	sbiw	r28, 0x0d	; 13
    e32a:	1f 92       	push	r1
    e32c:	8f 93       	push	r24
    e32e:	2c 96       	adiw	r28, 0x0c	; 12
    e330:	8f ad       	ldd	r24, Y+63	; 0x3f
    e332:	2c 97       	sbiw	r28, 0x0c	; 12
    e334:	1f 92       	push	r1
    e336:	8f 93       	push	r24
    e338:	87 e8       	ldi	r24, 0x87	; 135
    e33a:	93 e0       	ldi	r25, 0x03	; 3
    e33c:	9f 93       	push	r25
    e33e:	8f 93       	push	r24
    e340:	8e 01       	movw	r16, r28
    e342:	01 5b       	subi	r16, 0xB1	; 177
    e344:	1f 4f       	sbci	r17, 0xFF	; 255
    e346:	1f 93       	push	r17
    e348:	0f 93       	push	r16
    e34a:	0f 94 a6 1b 	call	0x2374c	; 0x2374c <sprintf>
    e34e:	67 eb       	ldi	r22, 0xB7	; 183
    e350:	7f e7       	ldi	r23, 0x7F	; 127
    e352:	83 ea       	ldi	r24, 0xA3	; 163
    e354:	9a e0       	ldi	r25, 0x0A	; 10
    e356:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    e35a:	61 e9       	ldi	r22, 0x91	; 145
    e35c:	78 e0       	ldi	r23, 0x08	; 8
    e35e:	83 ea       	ldi	r24, 0xA3	; 163
    e360:	9a e0       	ldi	r25, 0x0A	; 10
    e362:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    e366:	b8 01       	movw	r22, r16
    e368:	83 ea       	ldi	r24, 0xA3	; 163
    e36a:	9a e0       	ldi	r25, 0x0A	; 10
    e36c:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
    e370:	0f b6       	in	r0, 0x3f	; 63
    e372:	f8 94       	cli
    e374:	de bf       	out	0x3e, r29	; 62
    e376:	0f be       	out	0x3f, r0	; 63
    e378:	cd bf       	out	0x3d, r28	; 61
    e37a:	cc 5a       	subi	r28, 0xAC	; 172
    e37c:	df 4f       	sbci	r29, 0xFF	; 255
    e37e:	0f b6       	in	r0, 0x3f	; 63
    e380:	f8 94       	cli
    e382:	de bf       	out	0x3e, r29	; 62
    e384:	0f be       	out	0x3f, r0	; 63
    e386:	cd bf       	out	0x3d, r28	; 61
    e388:	df 91       	pop	r29
    e38a:	cf 91       	pop	r28
    e38c:	1f 91       	pop	r17
    e38e:	0f 91       	pop	r16
    e390:	08 95       	ret
    e392:	81 e0       	ldi	r24, 0x01	; 1
    e394:	0e 94 f1 6d 	call	0xdbe2	; 0xdbe2 <selftest_set_0(unsigned char)>
    e398:	70 e0       	ldi	r23, 0x00	; 0
    e39a:	60 e0       	ldi	r22, 0x00	; 0
    e39c:	88 e6       	ldi	r24, 0x68	; 104
    e39e:	90 e0       	ldi	r25, 0x00	; 0
    e3a0:	0e 94 c1 54 	call	0xa982	; 0xa982 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.59]>
    e3a4:	61 ea       	ldi	r22, 0xA1	; 161
    e3a6:	7f e7       	ldi	r23, 0x7F	; 127
    e3a8:	83 ea       	ldi	r24, 0xA3	; 163
    e3aa:	9a e0       	ldi	r25, 0x0A	; 10
    e3ac:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    e3b0:	e4 cf       	rjmp	.-56     	; 0xe37a <button_click_ntp_sync_time(unsigned int, unsigned int, unsigned char)+0xba>

0000e3b2 <button_click_set_time_offset(unsigned int, unsigned int, unsigned char)>:
_Z28button_click_set_time_offsetjjh():
    e3b2:	cf 93       	push	r28
    e3b4:	df 93       	push	r29
    e3b6:	70 e0       	ldi	r23, 0x00	; 0
    e3b8:	60 e0       	ldi	r22, 0x00	; 0
    e3ba:	86 e6       	ldi	r24, 0x66	; 102
    e3bc:	90 e0       	ldi	r25, 0x00	; 0
    e3be:	0e 94 c1 54 	call	0xa982	; 0xa982 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.59]>
    e3c2:	0e 94 8f 6f 	call	0xdf1e	; 0xdf1e <time_get_offset()>
_Z29display_function_set_variableffffhhhhPFvjfhE():
    e3c6:	c5 ec       	ldi	r28, 0xC5	; 197
    e3c8:	da e0       	ldi	r29, 0x0A	; 10
_Z28button_click_set_time_offsetjjh():
    e3ca:	68 2f       	mov	r22, r24
    e3cc:	88 0f       	add	r24, r24
    e3ce:	77 0b       	sbc	r23, r23
    e3d0:	88 0b       	sbc	r24, r24
    e3d2:	99 0b       	sbc	r25, r25
    e3d4:	0f 94 f7 14 	call	0x229ee	; 0x229ee <__floatsisf>
    e3d8:	68 83       	st	Y, r22
    e3da:	79 83       	std	Y+1, r23	; 0x01
    e3dc:	8a 83       	std	Y+2, r24	; 0x02
    e3de:	9b 83       	std	Y+3, r25	; 0x03
_Z29display_function_set_variableffffhhhhPFvjfhE():
    e3e0:	80 e0       	ldi	r24, 0x00	; 0
    e3e2:	90 e0       	ldi	r25, 0x00	; 0
    e3e4:	a0 e4       	ldi	r26, 0x40	; 64
    e3e6:	b1 ec       	ldi	r27, 0xC1	; 193
    e3e8:	88 87       	std	Y+8, r24	; 0x08
    e3ea:	99 87       	std	Y+9, r25	; 0x09
    e3ec:	aa 87       	std	Y+10, r26	; 0x0a
    e3ee:	bb 87       	std	Y+11, r27	; 0x0b
    e3f0:	80 e0       	ldi	r24, 0x00	; 0
    e3f2:	90 e0       	ldi	r25, 0x00	; 0
    e3f4:	a0 e4       	ldi	r26, 0x40	; 64
    e3f6:	b1 e4       	ldi	r27, 0x41	; 65
    e3f8:	8c 83       	std	Y+4, r24	; 0x04
    e3fa:	9d 83       	std	Y+5, r25	; 0x05
    e3fc:	ae 83       	std	Y+6, r26	; 0x06
    e3fe:	bf 83       	std	Y+7, r27	; 0x07
    e400:	80 e0       	ldi	r24, 0x00	; 0
    e402:	90 e0       	ldi	r25, 0x00	; 0
    e404:	a0 e8       	ldi	r26, 0x80	; 128
    e406:	bf e3       	ldi	r27, 0x3F	; 63
    e408:	8e 87       	std	Y+14, r24	; 0x0e
    e40a:	9f 87       	std	Y+15, r25	; 0x0f
    e40c:	a8 8b       	std	Y+16, r26	; 0x10
    e40e:	b9 8b       	std	Y+17, r27	; 0x11
    e410:	81 e0       	ldi	r24, 0x01	; 1
    e412:	8d 87       	std	Y+13, r24	; 0x0d
    e414:	1a 8a       	std	Y+18, r1	; 0x12
    e416:	1c 86       	std	Y+12, r1	; 0x0c
    e418:	88 e1       	ldi	r24, 0x18	; 24
    e41a:	92 e7       	ldi	r25, 0x72	; 114
    e41c:	9c 8b       	std	Y+20, r25	; 0x14
    e41e:	8b 8b       	std	Y+19, r24	; 0x13
_Z28button_click_set_time_offsetjjh():
    e420:	df 91       	pop	r29
    e422:	cf 91       	pop	r28
    e424:	08 95       	ret

0000e426 <time_set_offset(signed char)>:
_Z15time_set_offseta():
    e426:	68 2f       	mov	r22, r24
    e428:	81 e0       	ldi	r24, 0x01	; 1
    e42a:	90 e0       	ldi	r25, 0x00	; 0
    e42c:	0c 94 90 51 	jmp	0xa320	; 0xa320 <EEPROMClass::write(int, unsigned char) [clone .isra.9]>

0000e430 <helper_set_menu_time_offset(unsigned int, float, unsigned char)>:
_Z33display_function_get_variable_inth():
    e430:	60 91 c5 0a 	lds	r22, 0x0AC5	; 0x800ac5 <menu_dialog_variable>
    e434:	70 91 c6 0a 	lds	r23, 0x0AC6	; 0x800ac6 <menu_dialog_variable+0x1>
    e438:	80 91 c7 0a 	lds	r24, 0x0AC7	; 0x800ac7 <menu_dialog_variable+0x2>
    e43c:	90 91 c8 0a 	lds	r25, 0x0AC8	; 0x800ac8 <menu_dialog_variable+0x3>
    e440:	0f 94 bf 14 	call	0x2297e	; 0x2297e <__fixsfsi>
    e444:	86 2f       	mov	r24, r22
_Z27helper_set_menu_time_offsetjfh():
    e446:	0c 94 13 72 	jmp	0xe426	; 0xe426 <time_set_offset(signed char)>

0000e44a <setup_io_pin()>:
_Z12setup_io_pinv():
    e44a:	61 e0       	ldi	r22, 0x01	; 1
    e44c:	86 e0       	ldi	r24, 0x06	; 6
    e44e:	0f 94 24 10 	call	0x22048	; 0x22048 <pinMode>
    e452:	61 e0       	ldi	r22, 0x01	; 1
    e454:	8f e0       	ldi	r24, 0x0F	; 15
    e456:	0f 94 24 10 	call	0x22048	; 0x22048 <pinMode>
    e45a:	61 e0       	ldi	r22, 0x01	; 1
    e45c:	88 e0       	ldi	r24, 0x08	; 8
    e45e:	0f 94 24 10 	call	0x22048	; 0x22048 <pinMode>
    e462:	61 e0       	ldi	r22, 0x01	; 1
    e464:	8c e0       	ldi	r24, 0x0C	; 12
    e466:	0f 94 24 10 	call	0x22048	; 0x22048 <pinMode>
    e46a:	61 e0       	ldi	r22, 0x01	; 1
    e46c:	86 e1       	ldi	r24, 0x16	; 22
    e46e:	0f 94 24 10 	call	0x22048	; 0x22048 <pinMode>
    e472:	61 e0       	ldi	r22, 0x01	; 1
    e474:	87 e1       	ldi	r24, 0x17	; 23
    e476:	0f 94 24 10 	call	0x22048	; 0x22048 <pinMode>
    e47a:	62 e0       	ldi	r22, 0x02	; 2
    e47c:	8e e0       	ldi	r24, 0x0E	; 14
    e47e:	0f 94 24 10 	call	0x22048	; 0x22048 <pinMode>
    e482:	61 e0       	ldi	r22, 0x01	; 1
    e484:	8c e0       	ldi	r24, 0x0C	; 12
    e486:	0f 94 60 10 	call	0x220c0	; 0x220c0 <digitalWrite>
    e48a:	68 ee       	ldi	r22, 0xE8	; 232
    e48c:	73 e0       	ldi	r23, 0x03	; 3
    e48e:	80 e0       	ldi	r24, 0x00	; 0
    e490:	90 e0       	ldi	r25, 0x00	; 0
    e492:	0f 94 33 0f 	call	0x21e66	; 0x21e66 <delay>
    e496:	60 e0       	ldi	r22, 0x00	; 0
    e498:	8c e0       	ldi	r24, 0x0C	; 12
    e49a:	0d 94 60 10 	jmp	0x220c0	; 0x220c0 <digitalWrite>

0000e49e <convert_text_mode(char*)>:
_Z17convert_text_modePc():
    e49e:	ef 92       	push	r14
    e4a0:	ff 92       	push	r15
    e4a2:	0f 93       	push	r16
    e4a4:	1f 93       	push	r17
    e4a6:	cf 93       	push	r28
    e4a8:	8c 01       	movw	r16, r24
    e4aa:	67 e4       	ldi	r22, 0x47	; 71
    e4ac:	74 e0       	ldi	r23, 0x04	; 4
    e4ae:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
    e4b2:	7c 01       	movw	r14, r24
    e4b4:	6d ea       	ldi	r22, 0xAD	; 173
    e4b6:	75 e0       	ldi	r23, 0x05	; 5
    e4b8:	c8 01       	movw	r24, r16
    e4ba:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
    e4be:	c3 e0       	ldi	r28, 0x03	; 3
    e4c0:	89 2b       	or	r24, r25
    e4c2:	21 f0       	breq	.+8      	; 0xe4cc <convert_text_mode(char*)+0x2e>
    e4c4:	c1 e0       	ldi	r28, 0x01	; 1
    e4c6:	ef 28       	or	r14, r15
    e4c8:	09 f0       	breq	.+2      	; 0xe4cc <convert_text_mode(char*)+0x2e>
    e4ca:	c0 e0       	ldi	r28, 0x00	; 0
    e4cc:	64 eb       	ldi	r22, 0xB4	; 180
    e4ce:	75 e0       	ldi	r23, 0x05	; 5
    e4d0:	c8 01       	movw	r24, r16
    e4d2:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
    e4d6:	89 2b       	or	r24, r25
    e4d8:	09 f4       	brne	.+2      	; 0xe4dc <convert_text_mode(char*)+0x3e>
    e4da:	c2 e0       	ldi	r28, 0x02	; 2
    e4dc:	6d e4       	ldi	r22, 0x4D	; 77
    e4de:	74 e0       	ldi	r23, 0x04	; 4
    e4e0:	c8 01       	movw	r24, r16
    e4e2:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
    e4e6:	89 2b       	or	r24, r25
    e4e8:	09 f4       	brne	.+2      	; 0xe4ec <convert_text_mode(char*)+0x4e>
    e4ea:	c4 e0       	ldi	r28, 0x04	; 4
    e4ec:	69 eb       	ldi	r22, 0xB9	; 185
    e4ee:	75 e0       	ldi	r23, 0x05	; 5
    e4f0:	c8 01       	movw	r24, r16
    e4f2:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
    e4f6:	89 2b       	or	r24, r25
    e4f8:	09 f4       	brne	.+2      	; 0xe4fc <convert_text_mode(char*)+0x5e>
    e4fa:	c6 e0       	ldi	r28, 0x06	; 6
    e4fc:	8c 2f       	mov	r24, r28
    e4fe:	cf 91       	pop	r28
    e500:	1f 91       	pop	r17
    e502:	0f 91       	pop	r16
    e504:	ff 90       	pop	r15
    e506:	ef 90       	pop	r14
    e508:	08 95       	ret

0000e50a <convert_mode_text(unsigned char, char*)>:
_Z17convert_mode_texthPc():
    e50a:	28 2f       	mov	r18, r24
    e50c:	cb 01       	movw	r24, r22
    e50e:	62 ec       	ldi	r22, 0xC2	; 194
    e510:	75 e0       	ldi	r23, 0x05	; 5
    e512:	22 23       	and	r18, r18
    e514:	21 f0       	breq	.+8      	; 0xe51e <convert_mode_text(unsigned char, char*)+0x14>
    e516:	21 30       	cpi	r18, 0x01	; 1
    e518:	29 f4       	brne	.+10     	; 0xe524 <convert_mode_text(unsigned char, char*)+0x1a>
    e51a:	67 e4       	ldi	r22, 0x47	; 71
    e51c:	74 e0       	ldi	r23, 0x04	; 4
    e51e:	0f 94 67 1a 	call	0x234ce	; 0x234ce <strcpy>
    e522:	08 95       	ret
    e524:	6d ea       	ldi	r22, 0xAD	; 173
    e526:	75 e0       	ldi	r23, 0x05	; 5
    e528:	23 30       	cpi	r18, 0x03	; 3
    e52a:	61 f0       	breq	.+24     	; 0xe544 <convert_mode_text(unsigned char, char*)+0x3a>
    e52c:	64 eb       	ldi	r22, 0xB4	; 180
    e52e:	75 e0       	ldi	r23, 0x05	; 5
    e530:	22 30       	cpi	r18, 0x02	; 2
    e532:	41 f0       	breq	.+16     	; 0xe544 <convert_mode_text(unsigned char, char*)+0x3a>
    e534:	6d e4       	ldi	r22, 0x4D	; 77
    e536:	74 e0       	ldi	r23, 0x04	; 4
    e538:	24 30       	cpi	r18, 0x04	; 4
    e53a:	21 f0       	breq	.+8      	; 0xe544 <convert_mode_text(unsigned char, char*)+0x3a>
    e53c:	26 30       	cpi	r18, 0x06	; 6
    e53e:	21 f4       	brne	.+8      	; 0xe548 <convert_mode_text(unsigned char, char*)+0x3e>
    e540:	69 eb       	ldi	r22, 0xB9	; 185
    e542:	75 e0       	ldi	r23, 0x05	; 5
    e544:	0d 94 67 1a 	jmp	0x234ce	; 0x234ce <strcpy>
    e548:	08 95       	ret

0000e54a <send_mqtt_ring()>:
_Z14send_mqtt_ringv():
    e54a:	cf 92       	push	r12
    e54c:	df 92       	push	r13
    e54e:	ff 92       	push	r15
    e550:	0f 93       	push	r16
    e552:	1f 93       	push	r17
    e554:	cf 93       	push	r28
    e556:	df 93       	push	r29
    e558:	cd b7       	in	r28, 0x3d	; 61
    e55a:	de b7       	in	r29, 0x3e	; 62
    e55c:	c0 54       	subi	r28, 0x40	; 64
    e55e:	d1 09       	sbc	r29, r1
    e560:	0f b6       	in	r0, 0x3f	; 63
    e562:	f8 94       	cli
    e564:	de bf       	out	0x3e, r29	; 62
    e566:	0f be       	out	0x3f, r0	; 63
    e568:	cd bf       	out	0x3d, r28	; 61
    e56a:	81 e6       	ldi	r24, 0x61	; 97
    e56c:	c8 2e       	mov	r12, r24
    e56e:	8b e0       	ldi	r24, 0x0B	; 11
    e570:	d8 2e       	mov	r13, r24
    e572:	f1 2c       	mov	r15, r1
    e574:	8f 2d       	mov	r24, r15
    e576:	0e 94 fa b7 	call	0x16ff4	; 0x16ff4 <thermostat_ring_get_active(unsigned char)>
    e57a:	8f 3f       	cpi	r24, 0xFF	; 255
    e57c:	09 f4       	brne	.+2      	; 0xe580 <send_mqtt_ring()+0x36>
    e57e:	b8 c0       	rjmp	.+368    	; 0xe6f0 <send_mqtt_ring()+0x1a6>
    e580:	be 01       	movw	r22, r28
    e582:	6f 5f       	subi	r22, 0xFF	; 255
    e584:	7f 4f       	sbci	r23, 0xFF	; 255
    e586:	8f 2d       	mov	r24, r15
    e588:	0e 94 9f b7 	call	0x16f3e	; 0x16f3e <thermostat_ring_get_name(unsigned char, char*)>
    e58c:	8e 01       	movw	r16, r28
    e58e:	0f 5f       	subi	r16, 0xFF	; 255
    e590:	1f 4f       	sbci	r17, 0xFF	; 255
    e592:	2a ec       	ldi	r18, 0xCA	; 202
    e594:	33 e0       	ldi	r19, 0x03	; 3
    e596:	4f 2d       	mov	r20, r15
    e598:	6f ef       	ldi	r22, 0xFF	; 255
    e59a:	74 e0       	ldi	r23, 0x04	; 4
    e59c:	8c ea       	ldi	r24, 0xAC	; 172
    e59e:	9e e0       	ldi	r25, 0x0E	; 14
    e5a0:	0e 94 a9 ac 	call	0x15952	; 0x15952 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    e5a4:	8f 2d       	mov	r24, r15
    e5a6:	0e 94 fa b7 	call	0x16ff4	; 0x16ff4 <thermostat_ring_get_active(unsigned char)>
itoa():
    e5aa:	4a e0       	ldi	r20, 0x0A	; 10
    e5ac:	b8 01       	movw	r22, r16
    e5ae:	90 e0       	ldi	r25, 0x00	; 0
    e5b0:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z14send_mqtt_ringv():
    e5b4:	2b ee       	ldi	r18, 0xEB	; 235
    e5b6:	33 e0       	ldi	r19, 0x03	; 3
    e5b8:	4f 2d       	mov	r20, r15
    e5ba:	6f ef       	ldi	r22, 0xFF	; 255
    e5bc:	74 e0       	ldi	r23, 0x04	; 4
    e5be:	8c ea       	ldi	r24, 0xAC	; 172
    e5c0:	9e e0       	ldi	r25, 0x0E	; 14
    e5c2:	0e 94 a9 ac 	call	0x15952	; 0x15952 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    e5c6:	8f 2d       	mov	r24, r15
    e5c8:	0e 94 0a b8 	call	0x17014	; 0x17014 <thermostat_ring_get_program_id(unsigned char)>
itoa():
    e5cc:	4a e0       	ldi	r20, 0x0A	; 10
    e5ce:	b8 01       	movw	r22, r16
    e5d0:	90 e0       	ldi	r25, 0x00	; 0
    e5d2:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z14send_mqtt_ringv():
    e5d6:	26 ec       	ldi	r18, 0xC6	; 198
    e5d8:	35 e0       	ldi	r19, 0x05	; 5
    e5da:	4f 2d       	mov	r20, r15
    e5dc:	6f ef       	ldi	r22, 0xFF	; 255
    e5de:	74 e0       	ldi	r23, 0x04	; 4
    e5e0:	8c ea       	ldi	r24, 0xAC	; 172
    e5e2:	9e e0       	ldi	r25, 0x0E	; 14
    e5e4:	0e 94 a9 ac 	call	0x15952	; 0x15952 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    e5e8:	8f 2d       	mov	r24, r15
    e5ea:	0e 94 1a b8 	call	0x17034	; 0x17034 <thermostat_ring_get_mezni(unsigned char)>
itoa():
    e5ee:	4a e0       	ldi	r20, 0x0A	; 10
    e5f0:	b8 01       	movw	r22, r16
    e5f2:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z14send_mqtt_ringv():
    e5f6:	22 e0       	ldi	r18, 0x02	; 2
    e5f8:	34 e0       	ldi	r19, 0x04	; 4
    e5fa:	4f 2d       	mov	r20, r15
    e5fc:	6f ef       	ldi	r22, 0xFF	; 255
    e5fe:	74 e0       	ldi	r23, 0x04	; 4
    e600:	8c ea       	ldi	r24, 0xAC	; 172
    e602:	9e e0       	ldi	r25, 0x0E	; 14
    e604:	0e 94 a9 ac 	call	0x15952	; 0x15952 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    e608:	8f 2d       	mov	r24, r15
    e60a:	0e 94 5e b8 	call	0x170bc	; 0x170bc <thermostat_ring_get_mode(unsigned char)>
itoa():
    e60e:	4a e0       	ldi	r20, 0x0A	; 10
    e610:	b8 01       	movw	r22, r16
    e612:	90 e0       	ldi	r25, 0x00	; 0
    e614:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z14send_mqtt_ringv():
    e618:	23 ed       	ldi	r18, 0xD3	; 211
    e61a:	35 e0       	ldi	r19, 0x05	; 5
    e61c:	4f 2d       	mov	r20, r15
    e61e:	6f ef       	ldi	r22, 0xFF	; 255
    e620:	74 e0       	ldi	r23, 0x04	; 4
    e622:	8c ea       	ldi	r24, 0xAC	; 172
    e624:	9e e0       	ldi	r25, 0x0E	; 14
    e626:	0e 94 a9 ac 	call	0x15952	; 0x15952 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    e62a:	8f 2d       	mov	r24, r15
    e62c:	0e 94 5e b8 	call	0x170bc	; 0x170bc <thermostat_ring_get_mode(unsigned char)>
    e630:	b8 01       	movw	r22, r16
    e632:	0e 94 85 72 	call	0xe50a	; 0xe50a <convert_mode_text(unsigned char, char*)>
    e636:	2e ec       	ldi	r18, 0xCE	; 206
    e638:	35 e0       	ldi	r19, 0x05	; 5
    e63a:	4f 2d       	mov	r20, r15
    e63c:	6f ef       	ldi	r22, 0xFF	; 255
    e63e:	74 e0       	ldi	r23, 0x04	; 4
    e640:	8c ea       	ldi	r24, 0xAC	; 172
    e642:	9e e0       	ldi	r25, 0x0E	; 14
    e644:	0e 94 a9 ac 	call	0x15952	; 0x15952 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    e648:	8f 2d       	mov	r24, r15
    e64a:	0e 94 a0 b6 	call	0x16d40	; 0x16d40 <thermostat_ring_get_state(unsigned char)>
itoa():
    e64e:	4a e0       	ldi	r20, 0x0A	; 10
    e650:	b8 01       	movw	r22, r16
    e652:	90 e0       	ldi	r25, 0x00	; 0
    e654:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z14send_mqtt_ringv():
    e658:	28 ed       	ldi	r18, 0xD8	; 216
    e65a:	35 e0       	ldi	r19, 0x05	; 5
    e65c:	4f 2d       	mov	r20, r15
    e65e:	6f ef       	ldi	r22, 0xFF	; 255
    e660:	74 e0       	ldi	r23, 0x04	; 4
    e662:	8c ea       	ldi	r24, 0xAC	; 172
    e664:	9e e0       	ldi	r25, 0x0E	; 14
    e666:	0e 94 a9 ac 	call	0x15952	; 0x15952 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    e66a:	8f 2d       	mov	r24, r15
    e66c:	0e 94 4e b8 	call	0x1709c	; 0x1709c <thermostat_ring_get_asociate_tds(unsigned char)>
itoa():
    e670:	4a e0       	ldi	r20, 0x0A	; 10
    e672:	b8 01       	movw	r22, r16
    e674:	90 e0       	ldi	r25, 0x00	; 0
    e676:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z14send_mqtt_ringv():
    e67a:	2f ed       	ldi	r18, 0xDF	; 223
    e67c:	35 e0       	ldi	r19, 0x05	; 5
    e67e:	4f 2d       	mov	r20, r15
    e680:	6f ef       	ldi	r22, 0xFF	; 255
    e682:	74 e0       	ldi	r23, 0x04	; 4
    e684:	8c ea       	ldi	r24, 0xAC	; 172
    e686:	9e e0       	ldi	r25, 0x0E	; 14
    e688:	0e 94 a9 ac 	call	0x15952	; 0x15952 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    e68c:	8f 2d       	mov	r24, r15
    e68e:	0e 94 ea b7 	call	0x16fd4	; 0x16fd4 <thermostat_ring_get_output(unsigned char)>
itoa():
    e692:	4a e0       	ldi	r20, 0x0A	; 10
    e694:	b8 01       	movw	r22, r16
    e696:	90 e0       	ldi	r25, 0x00	; 0
    e698:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z14send_mqtt_ringv():
    e69c:	25 ee       	ldi	r18, 0xE5	; 229
    e69e:	35 e0       	ldi	r19, 0x05	; 5
    e6a0:	4f 2d       	mov	r20, r15
    e6a2:	6f ef       	ldi	r22, 0xFF	; 255
    e6a4:	74 e0       	ldi	r23, 0x04	; 4
    e6a6:	8c ea       	ldi	r24, 0xAC	; 172
    e6a8:	9e e0       	ldi	r25, 0x0E	; 14
    e6aa:	0e 94 a9 ac 	call	0x15952	; 0x15952 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    e6ae:	8f 2d       	mov	r24, r15
    e6b0:	0e 94 78 b8 	call	0x170f0	; 0x170f0 <thermostat_ring_get_status_data(unsigned char)>
itoa():
    e6b4:	4a e0       	ldi	r20, 0x0A	; 10
    e6b6:	b8 01       	movw	r22, r16
    e6b8:	90 e0       	ldi	r25, 0x00	; 0
    e6ba:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z14send_mqtt_ringv():
    e6be:	2c ee       	ldi	r18, 0xEC	; 236
    e6c0:	35 e0       	ldi	r19, 0x05	; 5
    e6c2:	4f 2d       	mov	r20, r15
    e6c4:	6f ef       	ldi	r22, 0xFF	; 255
    e6c6:	74 e0       	ldi	r23, 0x04	; 4
    e6c8:	8c ea       	ldi	r24, 0xAC	; 172
    e6ca:	9e e0       	ldi	r25, 0x0E	; 14
    e6cc:	0e 94 a9 ac 	call	0x15952	; 0x15952 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    e6d0:	f6 01       	movw	r30, r12
    e6d2:	80 81       	ld	r24, Z
itoa():
    e6d4:	4a e0       	ldi	r20, 0x0A	; 10
    e6d6:	b8 01       	movw	r22, r16
    e6d8:	90 e0       	ldi	r25, 0x00	; 0
    e6da:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z14send_mqtt_ringv():
    e6de:	29 ef       	ldi	r18, 0xF9	; 249
    e6e0:	35 e0       	ldi	r19, 0x05	; 5
    e6e2:	4f 2d       	mov	r20, r15
    e6e4:	6f ef       	ldi	r22, 0xFF	; 255
    e6e6:	74 e0       	ldi	r23, 0x04	; 4
    e6e8:	8c ea       	ldi	r24, 0xAC	; 172
    e6ea:	9e e0       	ldi	r25, 0x0E	; 14
    e6ec:	0e 94 a9 ac 	call	0x15952	; 0x15952 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    e6f0:	f3 94       	inc	r15
    e6f2:	ff ef       	ldi	r31, 0xFF	; 255
    e6f4:	cf 1a       	sub	r12, r31
    e6f6:	df 0a       	sbc	r13, r31
    e6f8:	85 e0       	ldi	r24, 0x05	; 5
    e6fa:	f8 12       	cpse	r15, r24
    e6fc:	3b cf       	rjmp	.-394    	; 0xe574 <send_mqtt_ring()+0x2a>
    e6fe:	c0 5c       	subi	r28, 0xC0	; 192
    e700:	df 4f       	sbci	r29, 0xFF	; 255
    e702:	0f b6       	in	r0, 0x3f	; 63
    e704:	f8 94       	cli
    e706:	de bf       	out	0x3e, r29	; 62
    e708:	0f be       	out	0x3f, r0	; 63
    e70a:	cd bf       	out	0x3d, r28	; 61
    e70c:	df 91       	pop	r29
    e70e:	cf 91       	pop	r28
    e710:	1f 91       	pop	r17
    e712:	0f 91       	pop	r16
    e714:	ff 90       	pop	r15
    e716:	df 90       	pop	r13
    e718:	cf 90       	pop	r12
    e71a:	08 95       	ret

0000e71c <thermostat()>:
_Z10thermostatv():
    e71c:	af 92       	push	r10
    e71e:	bf 92       	push	r11
    e720:	cf 92       	push	r12
    e722:	df 92       	push	r13
    e724:	ef 92       	push	r14
    e726:	ff 92       	push	r15
    e728:	0f 93       	push	r16
    e72a:	1f 93       	push	r17
    e72c:	cf 93       	push	r28
    e72e:	df 93       	push	r29
    e730:	cd b7       	in	r28, 0x3d	; 61
    e732:	de b7       	in	r29, 0x3e	; 62
    e734:	69 97       	sbiw	r28, 0x19	; 25
    e736:	0f b6       	in	r0, 0x3f	; 63
    e738:	f8 94       	cli
    e73a:	de bf       	out	0x3e, r29	; 62
    e73c:	0f be       	out	0x3f, r0	; 63
    e73e:	cd bf       	out	0x3d, r28	; 61
    e740:	18 8e       	std	Y+24, r1	; 0x18
    e742:	1f 8a       	std	Y+23, r1	; 0x17
    e744:	19 8e       	std	Y+25, r1	; 0x19
    e746:	10 e0       	ldi	r17, 0x00	; 0
    e748:	58 ec       	ldi	r21, 0xC8	; 200
    e74a:	e5 2e       	mov	r14, r21
    e74c:	6e e1       	ldi	r22, 0x1E	; 30
    e74e:	b6 2e       	mov	r11, r22
    e750:	81 2f       	mov	r24, r17
    e752:	0e 94 4e b8 	call	0x1709c	; 0x1709c <thermostat_ring_get_asociate_tds(unsigned char)>
    e756:	d8 2e       	mov	r13, r24
    e758:	81 2f       	mov	r24, r17
    e75a:	0e 94 5e b8 	call	0x170bc	; 0x170bc <thermostat_ring_get_mode(unsigned char)>
    e75e:	f8 2e       	mov	r15, r24
    e760:	81 2f       	mov	r24, r17
    e762:	0e 94 ea b7 	call	0x16fd4	; 0x16fd4 <thermostat_ring_get_output(unsigned char)>
    e766:	c8 2e       	mov	r12, r24
    e768:	81 2f       	mov	r24, r17
    e76a:	0e 94 1a b8 	call	0x17034	; 0x17034 <thermostat_ring_get_mezni(unsigned char)>
    e76e:	98 8f       	std	Y+24, r25	; 0x18
    e770:	8f 8b       	std	Y+23, r24	; 0x17
    e772:	82 e0       	ldi	r24, 0x02	; 2
    e774:	f8 12       	cpse	r15, r24
    e776:	9b c0       	rjmp	.+310    	; 0xe8ae <thermostat()+0x192>
    e778:	81 2f       	mov	r24, r17
    e77a:	0e 94 0a b8 	call	0x17014	; 0x17014 <thermostat_ring_get_program_id(unsigned char)>
    e77e:	a8 2e       	mov	r10, r24
    e780:	85 e1       	ldi	r24, 0x15	; 21
    e782:	9f e0       	ldi	r25, 0x0F	; 15
    e784:	0e 94 9a e6 	call	0x1cd34	; 0x1cd34 <DateTime::dayOfTheWeek() const>
    e788:	08 2f       	mov	r16, r24
    e78a:	20 91 19 0f 	lds	r18, 0x0F19	; 0x800f19 <now+0x4>
    e78e:	40 91 18 0f 	lds	r20, 0x0F18	; 0x800f18 <now+0x3>
    e792:	be 01       	movw	r22, r28
    e794:	69 5e       	subi	r22, 0xE9	; 233
    e796:	7f 4f       	sbci	r23, 0xFF	; 255
    e798:	8a 2d       	mov	r24, r10
    e79a:	0e 94 b9 bb 	call	0x17772	; 0x17772 <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)>
    e79e:	8e 3f       	cpi	r24, 0xFE	; 254
    e7a0:	09 f4       	brne	.+2      	; 0xe7a4 <thermostat()+0x88>
    e7a2:	69 c0       	rjmp	.+210    	; 0xe876 <thermostat()+0x15a>
    e7a4:	08 f0       	brcs	.+2      	; 0xe7a8 <thermostat()+0x8c>
    e7a6:	5f c0       	rjmp	.+190    	; 0xe866 <thermostat()+0x14a>
    e7a8:	8d 3f       	cpi	r24, 0xFD	; 253
    e7aa:	09 f4       	brne	.+2      	; 0xe7ae <thermostat()+0x92>
    e7ac:	6e c0       	rjmp	.+220    	; 0xe88a <thermostat()+0x16e>
    e7ae:	85 e0       	ldi	r24, 0x05	; 5
    e7b0:	8d 15       	cp	r24, r13
    e7b2:	e8 f1       	brcs	.+122    	; 0xe82e <thermostat()+0x112>
    e7b4:	be 01       	movw	r22, r28
    e7b6:	6f 5f       	subi	r22, 0xFF	; 255
    e7b8:	7f 4f       	sbci	r23, 0xFF	; 255
    e7ba:	8d 2d       	mov	r24, r13
    e7bc:	0e 94 40 b2 	call	0x16480	; 0x16480 <get_tds18s20(unsigned char, struct_DDS18s20*)>
    e7c0:	81 30       	cpi	r24, 0x01	; 1
    e7c2:	a9 f5       	brne	.+106    	; 0xe82e <thermostat()+0x112>
    e7c4:	89 81       	ldd	r24, Y+1	; 0x01
    e7c6:	81 30       	cpi	r24, 0x01	; 1
    e7c8:	09 f0       	breq	.+2      	; 0xe7cc <thermostat()+0xb0>
    e7ca:	7e c0       	rjmp	.+252    	; 0xe8c8 <thermostat()+0x1ac>
    e7cc:	bd 9c       	mul	r11, r13
    e7ce:	f0 01       	movw	r30, r0
    e7d0:	11 24       	eor	r1, r1
    e7d2:	e2 52       	subi	r30, 0x22	; 34
    e7d4:	ff 4e       	sbci	r31, 0xEF	; 239
    e7d6:	83 8d       	ldd	r24, Z+27	; 0x1b
    e7d8:	81 30       	cpi	r24, 0x01	; 1
    e7da:	09 f0       	breq	.+2      	; 0xe7de <thermostat()+0xc2>
    e7dc:	75 c0       	rjmp	.+234    	; 0xe8c8 <thermostat()+0x1ac>
    e7de:	65 81       	ldd	r22, Z+5	; 0x05
    e7e0:	76 81       	ldd	r23, Z+6	; 0x06
    e7e2:	07 2e       	mov	r0, r23
    e7e4:	00 0c       	add	r0, r0
    e7e6:	88 0b       	sbc	r24, r24
    e7e8:	99 0b       	sbc	r25, r25
    e7ea:	0f 94 f7 14 	call	0x229ee	; 0x229ee <__floatsisf>
    e7ee:	20 e0       	ldi	r18, 0x00	; 0
    e7f0:	30 e0       	ldi	r19, 0x00	; 0
    e7f2:	48 ec       	ldi	r20, 0xC8	; 200
    e7f4:	52 e4       	ldi	r21, 0x42	; 66
    e7f6:	0f 94 4d 14 	call	0x2289a	; 0x2289a <__divsf3>
    e7fa:	ab 01       	movw	r20, r22
    e7fc:	bc 01       	movw	r22, r24
    e7fe:	81 2f       	mov	r24, r17
    e800:	0e 94 5f b7 	call	0x16ebe	; 0x16ebe <thermostat_pid_input(unsigned char, double)>
    e804:	6f 89       	ldd	r22, Y+23	; 0x17
    e806:	78 8d       	ldd	r23, Y+24	; 0x18
    e808:	07 2e       	mov	r0, r23
    e80a:	00 0c       	add	r0, r0
    e80c:	88 0b       	sbc	r24, r24
    e80e:	99 0b       	sbc	r25, r25
    e810:	0f 94 f7 14 	call	0x229ee	; 0x229ee <__floatsisf>
    e814:	ab 01       	movw	r20, r22
    e816:	bc 01       	movw	r22, r24
    e818:	81 2f       	mov	r24, r17
    e81a:	0e 94 6a b7 	call	0x16ed4	; 0x16ed4 <thermostat_pid_setpoint(unsigned char, double)>
    e81e:	81 2f       	mov	r24, r17
    e820:	0e 94 75 b7 	call	0x16eea	; 0x16eea <thermostat_pid_output(unsigned char)>
    e824:	e8 2e       	mov	r14, r24
    e826:	68 2f       	mov	r22, r24
    e828:	81 2f       	mov	r24, r17
    e82a:	0e 94 ac b6 	call	0x16d58	; 0x16d58 <thermostat_ring_set_power(unsigned char, unsigned char)>
    e82e:	0a ef       	ldi	r16, 0xFA	; 250
    e830:	0d 0d       	add	r16, r13
    e832:	0a 30       	cpi	r16, 0x0A	; 10
    e834:	08 f0       	brcs	.+2      	; 0xe838 <thermostat()+0x11c>
    e836:	85 c0       	rjmp	.+266    	; 0xe942 <thermostat()+0x226>
    e838:	be 01       	movw	r22, r28
    e83a:	67 5e       	subi	r22, 0xE7	; 231
    e83c:	7f 4f       	sbci	r23, 0xFF	; 255
    e83e:	80 2f       	mov	r24, r16
    e840:	0e 94 00 63 	call	0xc600	; 0xc600 <remote_tds_get_active(unsigned char, unsigned char*)>
    e844:	89 8d       	ldd	r24, Y+25	; 0x19
    e846:	81 30       	cpi	r24, 0x01	; 1
    e848:	09 f4       	brne	.+2      	; 0xe84c <thermostat()+0x130>
    e84a:	46 c0       	rjmp	.+140    	; 0xe8d8 <thermostat()+0x1bc>
    e84c:	60 e0       	ldi	r22, 0x00	; 0
    e84e:	81 2f       	mov	r24, r17
    e850:	0e 94 ac b6 	call	0x16d58	; 0x16d58 <thermostat_ring_set_power(unsigned char, unsigned char)>
    e854:	9e ef       	ldi	r25, 0xFE	; 254
    e856:	f9 2e       	mov	r15, r25
    e858:	e1 2c       	mov	r14, r1
    e85a:	4e 2d       	mov	r20, r14
    e85c:	6f 2d       	mov	r22, r15
    e85e:	8c 2d       	mov	r24, r12
    e860:	0e 94 bb 6c 	call	0xd976	; 0xd976 <mqtt_publis_output_pwm(unsigned char, unsigned char, unsigned char)>
    e864:	78 c0       	rjmp	.+240    	; 0xe956 <thermostat()+0x23a>
    e866:	60 e0       	ldi	r22, 0x00	; 0
    e868:	81 2f       	mov	r24, r17
    e86a:	0e 94 a6 b6 	call	0x16d4c	; 0x16d4c <thermostat_ring_set_state(unsigned char, unsigned char)>
    e86e:	60 e0       	ldi	r22, 0x00	; 0
    e870:	81 2f       	mov	r24, r17
    e872:	0e 94 ac b6 	call	0x16d58	; 0x16d58 <thermostat_ring_set_power(unsigned char, unsigned char)>
    e876:	60 e0       	ldi	r22, 0x00	; 0
    e878:	81 2f       	mov	r24, r17
    e87a:	0e 94 a6 b6 	call	0x16d4c	; 0x16d4c <thermostat_ring_set_state(unsigned char, unsigned char)>
    e87e:	60 e0       	ldi	r22, 0x00	; 0
    e880:	81 2f       	mov	r24, r17
    e882:	0e 94 ac b6 	call	0x16d58	; 0x16d58 <thermostat_ring_set_power(unsigned char, unsigned char)>
    e886:	f1 2c       	mov	r15, r1
    e888:	92 cf       	rjmp	.-220    	; 0xe7ae <thermostat()+0x92>
    e88a:	61 e0       	ldi	r22, 0x01	; 1
    e88c:	81 2f       	mov	r24, r17
    e88e:	0e 94 a6 b6 	call	0x16d4c	; 0x16d4c <thermostat_ring_set_state(unsigned char, unsigned char)>
    e892:	8a 2d       	mov	r24, r10
    e894:	0e 94 1c ba 	call	0x17438	; 0x17438 <thermostat_program_get_active(unsigned char)>
    e898:	81 30       	cpi	r24, 0x01	; 1
    e89a:	61 f0       	breq	.+24     	; 0xe8b4 <thermostat()+0x198>
    e89c:	82 30       	cpi	r24, 0x02	; 2
    e89e:	09 f0       	breq	.+2      	; 0xe8a2 <thermostat()+0x186>
    e8a0:	8d c0       	rjmp	.+282    	; 0xe9bc <thermostat()+0x2a0>
    e8a2:	81 2f       	mov	r24, r17
    e8a4:	0e 94 44 b7 	call	0x16e88	; 0x16e88 <thermostat_pid_setdirection_reverse(unsigned char)>
    e8a8:	45 e0       	ldi	r20, 0x05	; 5
    e8aa:	f4 2e       	mov	r15, r20
    e8ac:	80 cf       	rjmp	.-256    	; 0xe7ae <thermostat()+0x92>
    e8ae:	83 e0       	ldi	r24, 0x03	; 3
    e8b0:	f8 12       	cpse	r15, r24
    e8b2:	06 c0       	rjmp	.+12     	; 0xe8c0 <thermostat()+0x1a4>
    e8b4:	81 2f       	mov	r24, r17
    e8b6:	0e 94 34 b7 	call	0x16e68	; 0x16e68 <thermostat_pid_setdirection_direct(unsigned char)>
    e8ba:	33 e0       	ldi	r19, 0x03	; 3
    e8bc:	f3 2e       	mov	r15, r19
    e8be:	77 cf       	rjmp	.-274    	; 0xe7ae <thermostat()+0x92>
    e8c0:	85 e0       	ldi	r24, 0x05	; 5
    e8c2:	f8 12       	cpse	r15, r24
    e8c4:	74 cf       	rjmp	.-280    	; 0xe7ae <thermostat()+0x92>
    e8c6:	ed cf       	rjmp	.-38     	; 0xe8a2 <thermostat()+0x186>
    e8c8:	60 e0       	ldi	r22, 0x00	; 0
    e8ca:	81 2f       	mov	r24, r17
    e8cc:	0e 94 ac b6 	call	0x16d58	; 0x16d58 <thermostat_ring_set_power(unsigned char, unsigned char)>
    e8d0:	e1 2c       	mov	r14, r1
    e8d2:	2e ef       	ldi	r18, 0xFE	; 254
    e8d4:	f2 2e       	mov	r15, r18
    e8d6:	ab cf       	rjmp	.-170    	; 0xe82e <thermostat()+0x112>
    e8d8:	80 2f       	mov	r24, r16
    e8da:	0e 94 23 66 	call	0xcc46	; 0xcc46 <remote_tds_get_last_update(unsigned char)>
    e8de:	84 3b       	cpi	r24, 0xB4	; 180
    e8e0:	08 f0       	brcs	.+2      	; 0xe8e4 <thermostat()+0x1c8>
    e8e2:	b4 cf       	rjmp	.-152    	; 0xe84c <thermostat()+0x130>
    e8e4:	80 2f       	mov	r24, r16
    e8e6:	0e 94 df 64 	call	0xc9be	; 0xc9be <remote_tds_get_type(unsigned char)>
    e8ea:	81 30       	cpi	r24, 0x01	; 1
    e8ec:	09 f0       	breq	.+2      	; 0xe8f0 <thermostat()+0x1d4>
    e8ee:	ae cf       	rjmp	.-164    	; 0xe84c <thermostat()+0x130>
    e8f0:	80 2f       	mov	r24, r16
    e8f2:	0e 94 f4 65 	call	0xcbe8	; 0xcbe8 <remote_tds_get_data(unsigned char)>
    e8f6:	bc 01       	movw	r22, r24
    e8f8:	99 0f       	add	r25, r25
    e8fa:	88 0b       	sbc	r24, r24
    e8fc:	99 0b       	sbc	r25, r25
    e8fe:	0f 94 f7 14 	call	0x229ee	; 0x229ee <__floatsisf>
    e902:	20 e0       	ldi	r18, 0x00	; 0
    e904:	30 e0       	ldi	r19, 0x00	; 0
    e906:	4a e7       	ldi	r20, 0x7A	; 122
    e908:	54 e4       	ldi	r21, 0x44	; 68
    e90a:	0f 94 4d 14 	call	0x2289a	; 0x2289a <__divsf3>
    e90e:	ab 01       	movw	r20, r22
    e910:	bc 01       	movw	r22, r24
    e912:	81 2f       	mov	r24, r17
    e914:	0e 94 5f b7 	call	0x16ebe	; 0x16ebe <thermostat_pid_input(unsigned char, double)>
    e918:	6f 89       	ldd	r22, Y+23	; 0x17
    e91a:	78 8d       	ldd	r23, Y+24	; 0x18
    e91c:	07 2e       	mov	r0, r23
    e91e:	00 0c       	add	r0, r0
    e920:	88 0b       	sbc	r24, r24
    e922:	99 0b       	sbc	r25, r25
    e924:	0f 94 f7 14 	call	0x229ee	; 0x229ee <__floatsisf>
    e928:	ab 01       	movw	r20, r22
    e92a:	bc 01       	movw	r22, r24
    e92c:	81 2f       	mov	r24, r17
    e92e:	0e 94 6a b7 	call	0x16ed4	; 0x16ed4 <thermostat_pid_setpoint(unsigned char, double)>
    e932:	81 2f       	mov	r24, r17
    e934:	0e 94 75 b7 	call	0x16eea	; 0x16eea <thermostat_pid_output(unsigned char)>
    e938:	e8 2e       	mov	r14, r24
    e93a:	68 2f       	mov	r22, r24
    e93c:	81 2f       	mov	r24, r17
    e93e:	0e 94 ac b6 	call	0x16d58	; 0x16d58 <thermostat_ring_set_power(unsigned char, unsigned char)>
    e942:	f1 10       	cpse	r15, r1
    e944:	1d c0       	rjmp	.+58     	; 0xe980 <thermostat()+0x264>
    e946:	6e ef       	ldi	r22, 0xFE	; 254
    e948:	8c 2d       	mov	r24, r12
    e94a:	0e 94 67 6c 	call	0xd8ce	; 0xd8ce <mqtt_publis_output(unsigned char, unsigned char)>
    e94e:	60 e0       	ldi	r22, 0x00	; 0
    e950:	81 2f       	mov	r24, r17
    e952:	0e 94 ac b6 	call	0x16d58	; 0x16d58 <thermostat_ring_set_power(unsigned char, unsigned char)>
    e956:	1f 5f       	subi	r17, 0xFF	; 255
    e958:	15 30       	cpi	r17, 0x05	; 5
    e95a:	09 f0       	breq	.+2      	; 0xe95e <thermostat()+0x242>
    e95c:	f9 ce       	rjmp	.-526    	; 0xe750 <thermostat()+0x34>
    e95e:	69 96       	adiw	r28, 0x19	; 25
    e960:	0f b6       	in	r0, 0x3f	; 63
    e962:	f8 94       	cli
    e964:	de bf       	out	0x3e, r29	; 62
    e966:	0f be       	out	0x3f, r0	; 63
    e968:	cd bf       	out	0x3d, r28	; 61
    e96a:	df 91       	pop	r29
    e96c:	cf 91       	pop	r28
    e96e:	1f 91       	pop	r17
    e970:	0f 91       	pop	r16
    e972:	ff 90       	pop	r15
    e974:	ef 90       	pop	r14
    e976:	df 90       	pop	r13
    e978:	cf 90       	pop	r12
    e97a:	bf 90       	pop	r11
    e97c:	af 90       	pop	r10
    e97e:	08 95       	ret
    e980:	81 e0       	ldi	r24, 0x01	; 1
    e982:	6a e0       	ldi	r22, 0x0A	; 10
    e984:	f8 16       	cp	r15, r24
    e986:	21 f0       	breq	.+8      	; 0xe990 <thermostat()+0x274>
    e988:	84 e0       	ldi	r24, 0x04	; 4
    e98a:	f8 12       	cpse	r15, r24
    e98c:	06 c0       	rjmp	.+12     	; 0xe99a <thermostat()+0x27e>
    e98e:	6b e0       	ldi	r22, 0x0B	; 11
    e990:	8c 2d       	mov	r24, r12
    e992:	0e 94 67 6c 	call	0xd8ce	; 0xd8ce <mqtt_publis_output(unsigned char, unsigned char)>
    e996:	6f ef       	ldi	r22, 0xFF	; 255
    e998:	db cf       	rjmp	.-74     	; 0xe950 <thermostat()+0x234>
    e99a:	83 e0       	ldi	r24, 0x03	; 3
    e99c:	f8 16       	cp	r15, r24
    e99e:	09 f4       	brne	.+2      	; 0xe9a2 <thermostat()+0x286>
    e9a0:	5c cf       	rjmp	.-328    	; 0xe85a <thermostat()+0x13e>
    e9a2:	85 e0       	ldi	r24, 0x05	; 5
    e9a4:	f8 16       	cp	r15, r24
    e9a6:	09 f4       	brne	.+2      	; 0xe9aa <thermostat()+0x28e>
    e9a8:	58 cf       	rjmp	.-336    	; 0xe85a <thermostat()+0x13e>
    e9aa:	86 e0       	ldi	r24, 0x06	; 6
    e9ac:	f8 16       	cp	r15, r24
    e9ae:	09 f4       	brne	.+2      	; 0xe9b2 <thermostat()+0x296>
    e9b0:	54 cf       	rjmp	.-344    	; 0xe85a <thermostat()+0x13e>
    e9b2:	8e ef       	ldi	r24, 0xFE	; 254
    e9b4:	f8 16       	cp	r15, r24
    e9b6:	09 f4       	brne	.+2      	; 0xe9ba <thermostat()+0x29e>
    e9b8:	50 cf       	rjmp	.-352    	; 0xe85a <thermostat()+0x13e>
    e9ba:	cd cf       	rjmp	.-102    	; 0xe956 <thermostat()+0x23a>
    e9bc:	83 30       	cpi	r24, 0x03	; 3
    e9be:	09 f0       	breq	.+2      	; 0xe9c2 <thermostat()+0x2a6>
    e9c0:	f6 ce       	rjmp	.-532    	; 0xe7ae <thermostat()+0x92>
    e9c2:	86 e0       	ldi	r24, 0x06	; 6
    e9c4:	f8 2e       	mov	r15, r24
    e9c6:	f3 ce       	rjmp	.-538    	; 0xe7ae <thermostat()+0x92>

0000e9c8 <nrf_mesh_reinit()>:
_Z15nrf_mesh_reinitv():
    e9c8:	0f 93       	push	r16
    e9ca:	1f 93       	push	r17
    e9cc:	60 e0       	ldi	r22, 0x00	; 0
    e9ce:	84 e0       	ldi	r24, 0x04	; 4
    e9d0:	9d e0       	ldi	r25, 0x0D	; 13
    e9d2:	0f 94 ca 04 	call	0x20994	; 0x20994 <RF24Mesh::setNodeID(unsigned char)>
    e9d6:	0e 94 02 b1 	call	0x16204	; 0x16204 <nrf_load_channel()>
    e9da:	00 e6       	ldi	r16, 0x60	; 96
    e9dc:	1a ee       	ldi	r17, 0xEA	; 234
    e9de:	20 e0       	ldi	r18, 0x00	; 0
    e9e0:	30 e0       	ldi	r19, 0x00	; 0
    e9e2:	50 e0       	ldi	r21, 0x00	; 0
    e9e4:	40 e0       	ldi	r20, 0x00	; 0
    e9e6:	68 2f       	mov	r22, r24
    e9e8:	84 e0       	ldi	r24, 0x04	; 4
    e9ea:	9d e0       	ldi	r25, 0x0D	; 13
    e9ec:	0f 94 74 04 	call	0x208e8	; 0x208e8 <RF24Mesh::begin(unsigned char, rf24_datarate_e, unsigned long)>
    e9f0:	1f 91       	pop	r17
    e9f2:	0f 91       	pop	r16
    e9f4:	08 95       	ret

0000e9f6 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>:
_Z30process_display_element_sliderPhS_hh():
    e9f6:	cf 93       	push	r28
    e9f8:	df 93       	push	r29
    e9fa:	fc 01       	movw	r30, r24
    e9fc:	eb 01       	movw	r28, r22
    e9fe:	22 23       	and	r18, r18
    ea00:	89 f1       	breq	.+98     	; 0xea64 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x6e>
    ea02:	88 81       	ld	r24, Y
    ea04:	80 93 1f 0b 	sts	0x0B1F, r24	; 0x800b1f <menu_slider_data_max>
    ea08:	80 81       	ld	r24, Z
    ea0a:	80 93 1e 0b 	sts	0x0B1E, r24	; 0x800b1e <menu_slider_data_min>
    ea0e:	20 93 1d 0b 	sts	0x0B1D, r18	; 0x800b1d <menu_slider_data_max_element>
    ea12:	a4 2f       	mov	r26, r20
    ea14:	b0 e0       	ldi	r27, 0x00	; 0
    ea16:	a0 5e       	subi	r26, 0xE0	; 224
    ea18:	b4 4f       	sbci	r27, 0xF4	; 244
    ea1a:	ac 91       	ld	r26, X
    ea1c:	a0 83       	st	Z, r26
    ea1e:	80 91 1f 0b 	lds	r24, 0x0B1F	; 0x800b1f <menu_slider_data_max>
    ea22:	48 2f       	mov	r20, r24
    ea24:	50 e0       	ldi	r21, 0x00	; 0
    ea26:	a2 0f       	add	r26, r18
    ea28:	bb 27       	eor	r27, r27
    ea2a:	bb 1f       	adc	r27, r27
    ea2c:	4a 17       	cp	r20, r26
    ea2e:	5b 07       	cpc	r21, r27
    ea30:	5c f4       	brge	.+22     	; 0xea48 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x52>
    ea32:	90 91 1e 0b 	lds	r25, 0x0B1E	; 0x800b1e <menu_slider_data_min>
    ea36:	49 1b       	sub	r20, r25
    ea38:	51 09       	sbc	r21, r1
    ea3a:	90 91 1d 0b 	lds	r25, 0x0B1D	; 0x800b1d <menu_slider_data_max_element>
    ea3e:	94 17       	cp	r25, r20
    ea40:	15 06       	cpc	r1, r21
    ea42:	14 f4       	brge	.+4      	; 0xea48 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x52>
    ea44:	82 1b       	sub	r24, r18
    ea46:	80 83       	st	Z, r24
    ea48:	80 91 1f 0b 	lds	r24, 0x0B1F	; 0x800b1f <menu_slider_data_max>
    ea4c:	90 81       	ld	r25, Z
    ea4e:	89 17       	cp	r24, r25
    ea50:	08 f4       	brcc	.+2      	; 0xea54 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x5e>
    ea52:	80 83       	st	Z, r24
    ea54:	80 81       	ld	r24, Z
    ea56:	82 0f       	add	r24, r18
    ea58:	88 83       	st	Y, r24
    ea5a:	80 91 1f 0b 	lds	r24, 0x0B1F	; 0x800b1f <menu_slider_data_max>
    ea5e:	28 17       	cp	r18, r24
    ea60:	08 f0       	brcs	.+2      	; 0xea64 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x6e>
    ea62:	88 83       	st	Y, r24
    ea64:	df 91       	pop	r29
    ea66:	cf 91       	pop	r28
    ea68:	08 95       	ret

0000ea6a <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)>:
_Z14button_click_1jjjjhhPcS_h():
    ea6a:	2f 92       	push	r2
    ea6c:	3f 92       	push	r3
    ea6e:	4f 92       	push	r4
    ea70:	5f 92       	push	r5
    ea72:	6f 92       	push	r6
    ea74:	7f 92       	push	r7
    ea76:	8f 92       	push	r8
    ea78:	9f 92       	push	r9
    ea7a:	af 92       	push	r10
    ea7c:	bf 92       	push	r11
    ea7e:	cf 92       	push	r12
    ea80:	df 92       	push	r13
    ea82:	ef 92       	push	r14
    ea84:	ff 92       	push	r15
    ea86:	0f 93       	push	r16
    ea88:	1f 93       	push	r17
    ea8a:	cf 93       	push	r28
    ea8c:	df 93       	push	r29
    ea8e:	00 d0       	rcall	.+0      	; 0xea90 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x26>
    ea90:	00 d0       	rcall	.+0      	; 0xea92 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x28>
    ea92:	1f 92       	push	r1
    ea94:	cd b7       	in	r28, 0x3d	; 61
    ea96:	de b7       	in	r29, 0x3e	; 62
    ea98:	1c 01       	movw	r2, r24
    ea9a:	2b 01       	movw	r4, r22
    ea9c:	3a 01       	movw	r6, r20
    ea9e:	3a 83       	std	Y+2, r19	; 0x02
    eaa0:	29 83       	std	Y+1, r18	; 0x01
    eaa2:	0b 83       	std	Y+3, r16	; 0x03
    eaa4:	9e 2c       	mov	r9, r14
    eaa6:	dd 82       	std	Y+5, r13	; 0x05
    eaa8:	cc 82       	std	Y+4, r12	; 0x04
    eaaa:	bf 82       	std	Y+7, r11	; 0x07
    eaac:	ae 82       	std	Y+6, r10	; 0x06
    eaae:	70 e0       	ldi	r23, 0x00	; 0
    eab0:	60 e0       	ldi	r22, 0x00	; 0
    eab2:	88 eb       	ldi	r24, 0xB8	; 184
    eab4:	9c e0       	ldi	r25, 0x0C	; 12
    eab6:	0e 94 a9 bc 	call	0x17952	; 0x17952 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    eaba:	f1 2c       	mov	r15, r1
    eabc:	e1 2c       	mov	r14, r1
    eabe:	a9 80       	ldd	r10, Y+1	; 0x01
    eac0:	ba 80       	ldd	r11, Y+2	; 0x02
    eac2:	a4 0c       	add	r10, r4
    eac4:	b5 1c       	adc	r11, r5
    eac6:	61 01       	movw	r12, r2
    eac8:	c6 0c       	add	r12, r6
    eaca:	d7 1c       	adc	r13, r7
    eacc:	85 01       	movw	r16, r10
    eace:	0e 19       	sub	r16, r14
    ead0:	1f 09       	sbc	r17, r15
    ead2:	96 01       	movw	r18, r12
    ead4:	2e 19       	sub	r18, r14
    ead6:	3f 09       	sbc	r19, r15
    ead8:	a7 01       	movw	r20, r14
    eada:	44 0d       	add	r20, r4
    eadc:	55 1d       	adc	r21, r5
    eade:	b7 01       	movw	r22, r14
    eae0:	62 0d       	add	r22, r2
    eae2:	73 1d       	adc	r23, r3
    eae4:	88 eb       	ldi	r24, 0xB8	; 184
    eae6:	9c e0       	ldi	r25, 0x0C	; 12
    eae8:	0e 94 34 bd 	call	0x17a68	; 0x17a68 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    eaec:	2f ef       	ldi	r18, 0xFF	; 255
    eaee:	e2 1a       	sub	r14, r18
    eaf0:	f2 0a       	sbc	r15, r18
    eaf2:	43 e0       	ldi	r20, 0x03	; 3
    eaf4:	e4 16       	cp	r14, r20
    eaf6:	f1 04       	cpc	r15, r1
    eaf8:	49 f7       	brne	.-46     	; 0xeacc <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x62>
    eafa:	09 81       	ldd	r16, Y+1	; 0x01
    eafc:	1a 81       	ldd	r17, Y+2	; 0x02
    eafe:	03 50       	subi	r16, 0x03	; 3
    eb00:	11 09       	sbc	r17, r1
    eb02:	73 01       	movw	r14, r6
    eb04:	53 e0       	ldi	r21, 0x03	; 3
    eb06:	e5 1a       	sub	r14, r21
    eb08:	f1 08       	sbc	r15, r1
    eb0a:	81 e0       	ldi	r24, 0x01	; 1
    eb0c:	88 12       	cpse	r8, r24
    eb0e:	15 c0       	rjmp	.+42     	; 0xeb3a <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0xd0>
    eb10:	6f ef       	ldi	r22, 0xFF	; 255
    eb12:	7f ef       	ldi	r23, 0xFF	; 255
    eb14:	88 eb       	ldi	r24, 0xB8	; 184
    eb16:	9c e0       	ldi	r25, 0x0C	; 12
    eb18:	0e 94 a9 bc 	call	0x17952	; 0x17952 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    eb1c:	04 0d       	add	r16, r4
    eb1e:	15 1d       	adc	r17, r5
    eb20:	91 01       	movw	r18, r2
    eb22:	2e 0d       	add	r18, r14
    eb24:	3f 1d       	adc	r19, r15
    eb26:	a2 01       	movw	r20, r4
    eb28:	4d 5f       	subi	r20, 0xFD	; 253
    eb2a:	5f 4f       	sbci	r21, 0xFF	; 255
    eb2c:	b1 01       	movw	r22, r2
    eb2e:	6d 5f       	subi	r22, 0xFD	; 253
    eb30:	7f 4f       	sbci	r23, 0xFF	; 255
    eb32:	88 eb       	ldi	r24, 0xB8	; 184
    eb34:	9c e0       	ldi	r25, 0x0C	; 12
    eb36:	0e 94 ad bc 	call	0x1795a	; 0x1795a <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)>
    eb3a:	ec 81       	ldd	r30, Y+4	; 0x04
    eb3c:	fd 81       	ldd	r31, Y+5	; 0x05
    eb3e:	80 81       	ld	r24, Z
    eb40:	60 e0       	ldi	r22, 0x00	; 0
    eb42:	b1 2c       	mov	r11, r1
    eb44:	a1 2c       	mov	r10, r1
    eb46:	88 23       	and	r24, r24
    eb48:	a1 f1       	breq	.+104    	; 0xebb2 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x148>
    eb4a:	01 90       	ld	r0, Z+
    eb4c:	00 20       	and	r0, r0
    eb4e:	e9 f7       	brne	.-6      	; 0xeb4a <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0xe0>
    eb50:	31 97       	sbiw	r30, 0x01	; 1
    eb52:	4c 81       	ldd	r20, Y+4	; 0x04
    eb54:	5d 81       	ldd	r21, Y+5	; 0x05
    eb56:	e4 1b       	sub	r30, r20
    eb58:	f5 0b       	sbc	r31, r21
_Z22show_string_size_highth():
    eb5a:	8b 81       	ldd	r24, Y+3	; 0x03
    eb5c:	88 0f       	add	r24, r24
    eb5e:	5b 81       	ldd	r21, Y+3	; 0x03
    eb60:	85 0f       	add	r24, r21
    eb62:	88 0f       	add	r24, r24
_Z14button_click_1jjjjhhPcS_h():
    eb64:	a9 80       	ldd	r10, Y+1	; 0x01
    eb66:	ba 80       	ldd	r11, Y+2	; 0x02
    eb68:	a8 1a       	sub	r10, r24
    eb6a:	b1 08       	sbc	r11, r1
    eb6c:	b6 94       	lsr	r11
    eb6e:	a7 94       	ror	r10
    eb70:	a2 01       	movw	r20, r4
    eb72:	41 50       	subi	r20, 0x01	; 1
    eb74:	51 09       	sbc	r21, r1
    eb76:	4a 0d       	add	r20, r10
    eb78:	5b 1d       	adc	r21, r11
_Z22show_string_size_widthhh():
    eb7a:	86 e0       	ldi	r24, 0x06	; 6
    eb7c:	e8 9f       	mul	r30, r24
    eb7e:	f0 01       	movw	r30, r0
    eb80:	11 24       	eor	r1, r1
    eb82:	2b 81       	ldd	r18, Y+3	; 0x03
    eb84:	2e 9f       	mul	r18, r30
    eb86:	c0 01       	movw	r24, r0
    eb88:	2f 9f       	mul	r18, r31
    eb8a:	90 0d       	add	r25, r0
    eb8c:	11 24       	eor	r1, r1
_Z14button_click_1jjjjhhPcS_h():
    eb8e:	b3 01       	movw	r22, r6
    eb90:	68 1b       	sub	r22, r24
    eb92:	79 0b       	sbc	r23, r25
    eb94:	76 95       	lsr	r23
    eb96:	67 95       	ror	r22
    eb98:	62 0d       	add	r22, r2
    eb9a:	73 1d       	adc	r23, r3
    eb9c:	c1 2c       	mov	r12, r1
    eb9e:	ee 24       	eor	r14, r14
    eba0:	ea 94       	dec	r14
    eba2:	fe 2c       	mov	r15, r14
    eba4:	10 e0       	ldi	r17, 0x00	; 0
    eba6:	00 e0       	ldi	r16, 0x00	; 0
    eba8:	8c 81       	ldd	r24, Y+4	; 0x04
    ebaa:	9d 81       	ldd	r25, Y+5	; 0x05
    ebac:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    ebb0:	62 e0       	ldi	r22, 0x02	; 2
    ebb2:	ee 81       	ldd	r30, Y+6	; 0x06
    ebb4:	ff 81       	ldd	r31, Y+7	; 0x07
    ebb6:	80 81       	ld	r24, Z
    ebb8:	88 23       	and	r24, r24
    ebba:	d1 f1       	breq	.+116    	; 0xec30 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x1c6>
    ebbc:	01 90       	ld	r0, Z+
    ebbe:	00 20       	and	r0, r0
    ebc0:	e9 f7       	brne	.-6      	; 0xebbc <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x152>
    ebc2:	9f 01       	movw	r18, r30
    ebc4:	21 50       	subi	r18, 0x01	; 1
    ebc6:	31 09       	sbc	r19, r1
    ebc8:	4e 81       	ldd	r20, Y+6	; 0x06
    ebca:	5f 81       	ldd	r21, Y+7	; 0x07
    ebcc:	24 1b       	sub	r18, r20
    ebce:	35 0b       	sbc	r19, r21
_Z22show_string_size_highth():
    ebd0:	89 2d       	mov	r24, r9
    ebd2:	88 0f       	add	r24, r24
    ebd4:	89 0d       	add	r24, r9
    ebd6:	88 0f       	add	r24, r24
_Z14button_click_1jjjjhhPcS_h():
    ebd8:	e9 81       	ldd	r30, Y+1	; 0x01
    ebda:	fa 81       	ldd	r31, Y+2	; 0x02
    ebdc:	e8 1b       	sub	r30, r24
    ebde:	f1 09       	sbc	r31, r1
    ebe0:	cf 01       	movw	r24, r30
    ebe2:	6e 5f       	subi	r22, 0xFE	; 254
    ebe4:	70 e0       	ldi	r23, 0x00	; 0
    ebe6:	0f 94 35 16 	call	0x22c6a	; 0x22c6a <__udivmodhi4>
    ebea:	f1 e0       	ldi	r31, 0x01	; 1
    ebec:	4f 1a       	sub	r4, r31
    ebee:	51 08       	sbc	r5, r1
    ebf0:	a4 0c       	add	r10, r4
    ebf2:	b5 1c       	adc	r11, r5
    ebf4:	ab 01       	movw	r20, r22
    ebf6:	4a 0d       	add	r20, r10
    ebf8:	5b 1d       	adc	r21, r11
_Z22show_string_size_widthhh():
    ebfa:	86 e0       	ldi	r24, 0x06	; 6
    ebfc:	28 9f       	mul	r18, r24
    ebfe:	90 01       	movw	r18, r0
    ec00:	11 24       	eor	r1, r1
    ec02:	92 9e       	mul	r9, r18
    ec04:	c0 01       	movw	r24, r0
    ec06:	93 9e       	mul	r9, r19
    ec08:	90 0d       	add	r25, r0
    ec0a:	11 24       	eor	r1, r1
_Z14button_click_1jjjjhhPcS_h():
    ec0c:	b3 01       	movw	r22, r6
    ec0e:	68 1b       	sub	r22, r24
    ec10:	79 0b       	sbc	r23, r25
    ec12:	76 95       	lsr	r23
    ec14:	67 95       	ror	r22
    ec16:	62 0d       	add	r22, r2
    ec18:	73 1d       	adc	r23, r3
    ec1a:	c1 2c       	mov	r12, r1
    ec1c:	ee 24       	eor	r14, r14
    ec1e:	ea 94       	dec	r14
    ec20:	fe 2c       	mov	r15, r14
    ec22:	10 e0       	ldi	r17, 0x00	; 0
    ec24:	00 e0       	ldi	r16, 0x00	; 0
    ec26:	29 2d       	mov	r18, r9
    ec28:	8e 81       	ldd	r24, Y+6	; 0x06
    ec2a:	9f 81       	ldd	r25, Y+7	; 0x07
    ec2c:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    ec30:	27 96       	adiw	r28, 0x07	; 7
    ec32:	0f b6       	in	r0, 0x3f	; 63
    ec34:	f8 94       	cli
    ec36:	de bf       	out	0x3e, r29	; 62
    ec38:	0f be       	out	0x3f, r0	; 63
    ec3a:	cd bf       	out	0x3d, r28	; 61
    ec3c:	df 91       	pop	r29
    ec3e:	cf 91       	pop	r28
    ec40:	1f 91       	pop	r17
    ec42:	0f 91       	pop	r16
    ec44:	ff 90       	pop	r15
    ec46:	ef 90       	pop	r14
    ec48:	df 90       	pop	r13
    ec4a:	cf 90       	pop	r12
    ec4c:	bf 90       	pop	r11
    ec4e:	af 90       	pop	r10
    ec50:	9f 90       	pop	r9
    ec52:	8f 90       	pop	r8
    ec54:	7f 90       	pop	r7
    ec56:	6f 90       	pop	r6
    ec58:	5f 90       	pop	r5
    ec5a:	4f 90       	pop	r4
    ec5c:	3f 90       	pop	r3
    ec5e:	2f 90       	pop	r2
    ec60:	08 95       	ret

0000ec62 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)>:
_Z14button_click_2jjhhhhjjhPcS_():
    ec62:	2f 92       	push	r2
    ec64:	3f 92       	push	r3
    ec66:	4f 92       	push	r4
    ec68:	5f 92       	push	r5
    ec6a:	6f 92       	push	r6
    ec6c:	7f 92       	push	r7
    ec6e:	8f 92       	push	r8
    ec70:	9f 92       	push	r9
    ec72:	af 92       	push	r10
    ec74:	bf 92       	push	r11
    ec76:	cf 92       	push	r12
    ec78:	df 92       	push	r13
    ec7a:	ef 92       	push	r14
    ec7c:	ff 92       	push	r15
    ec7e:	0f 93       	push	r16
    ec80:	1f 93       	push	r17
    ec82:	cf 93       	push	r28
    ec84:	df 93       	push	r29
    ec86:	00 d0       	rcall	.+0      	; 0xec88 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x26>
    ec88:	1f 92       	push	r1
    ec8a:	1f 92       	push	r1
    ec8c:	cd b7       	in	r28, 0x3d	; 61
    ec8e:	de b7       	in	r29, 0x3e	; 62
    ec90:	3c 01       	movw	r6, r24
    ec92:	1b 01       	movw	r2, r22
    ec94:	f4 2e       	mov	r15, r20
    ec96:	12 2f       	mov	r17, r18
    ec98:	0c 83       	std	Y+4, r16	; 0x04
    ec9a:	ed 82       	std	Y+5, r14	; 0x05
    ec9c:	c9 82       	std	Y+1, r12	; 0x01
    ec9e:	88 2d       	mov	r24, r8
    eca0:	88 20       	and	r8, r8
    eca2:	51 f0       	breq	.+20     	; 0xecb8 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x56>
    eca4:	81 30       	cpi	r24, 0x01	; 1
    eca6:	51 f0       	breq	.+20     	; 0xecbc <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x5a>
    eca8:	82 30       	cpi	r24, 0x02	; 2
    ecaa:	09 f4       	brne	.+2      	; 0xecae <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x4c>
    ecac:	e2 c0       	rjmp	.+452    	; 0xee72 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x210>
    ecae:	48 e1       	ldi	r20, 0x18	; 24
    ecb0:	49 83       	std	Y+1, r20	; 0x01
    ecb2:	06 ec       	ldi	r16, 0xC6	; 198
    ecb4:	d0 2e       	mov	r13, r16
    ecb6:	02 c0       	rjmp	.+4      	; 0xecbc <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x5a>
    ecb8:	a9 82       	std	Y+1, r10	; 0x01
    ecba:	db 2c       	mov	r13, r11
    ecbc:	70 e0       	ldi	r23, 0x00	; 0
    ecbe:	60 e0       	ldi	r22, 0x00	; 0
    ecc0:	88 eb       	ldi	r24, 0xB8	; 184
    ecc2:	9c e0       	ldi	r25, 0x0C	; 12
    ecc4:	0e 94 a9 bc 	call	0x17952	; 0x17952 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    ecc8:	51 2c       	mov	r5, r1
    ecca:	41 2c       	mov	r4, r1
    eccc:	81 2f       	mov	r24, r17
    ecce:	90 e0       	ldi	r25, 0x00	; 0
    ecd0:	9b 83       	std	Y+3, r25	; 0x03
    ecd2:	8a 83       	std	Y+2, r24	; 0x02
    ecd4:	8f 2c       	mov	r8, r15
    ecd6:	91 2c       	mov	r9, r1
    ecd8:	5c 01       	movw	r10, r24
    ecda:	a2 0c       	add	r10, r2
    ecdc:	b3 1c       	adc	r11, r3
    ecde:	74 01       	movw	r14, r8
    ece0:	e6 0c       	add	r14, r6
    ece2:	f7 1c       	adc	r15, r7
    ece4:	85 01       	movw	r16, r10
    ece6:	04 19       	sub	r16, r4
    ece8:	15 09       	sbc	r17, r5
    ecea:	97 01       	movw	r18, r14
    ecec:	24 19       	sub	r18, r4
    ecee:	35 09       	sbc	r19, r5
    ecf0:	a2 01       	movw	r20, r4
    ecf2:	42 0d       	add	r20, r2
    ecf4:	53 1d       	adc	r21, r3
    ecf6:	b2 01       	movw	r22, r4
    ecf8:	66 0d       	add	r22, r6
    ecfa:	77 1d       	adc	r23, r7
    ecfc:	88 eb       	ldi	r24, 0xB8	; 184
    ecfe:	9c e0       	ldi	r25, 0x0C	; 12
    ed00:	0e 94 34 bd 	call	0x17a68	; 0x17a68 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    ed04:	9f ef       	ldi	r25, 0xFF	; 255
    ed06:	49 1a       	sub	r4, r25
    ed08:	59 0a       	sbc	r5, r25
    ed0a:	e3 e0       	ldi	r30, 0x03	; 3
    ed0c:	4e 16       	cp	r4, r30
    ed0e:	51 04       	cpc	r5, r1
    ed10:	49 f7       	brne	.-46     	; 0xece4 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x82>
    ed12:	69 81       	ldd	r22, Y+1	; 0x01
    ed14:	7d 2d       	mov	r23, r13
    ed16:	88 eb       	ldi	r24, 0xB8	; 184
    ed18:	9c e0       	ldi	r25, 0x0C	; 12
    ed1a:	0e 94 a9 bc 	call	0x17952	; 0x17952 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    ed1e:	81 01       	movw	r16, r2
    ed20:	03 50       	subi	r16, 0x03	; 3
    ed22:	11 09       	sbc	r17, r1
    ed24:	4a 81       	ldd	r20, Y+2	; 0x02
    ed26:	5b 81       	ldd	r21, Y+3	; 0x03
    ed28:	04 0f       	add	r16, r20
    ed2a:	15 1f       	adc	r17, r21
    ed2c:	93 01       	movw	r18, r6
    ed2e:	23 50       	subi	r18, 0x03	; 3
    ed30:	31 09       	sbc	r19, r1
    ed32:	28 0d       	add	r18, r8
    ed34:	39 1d       	adc	r19, r9
    ed36:	a1 01       	movw	r20, r2
    ed38:	4d 5f       	subi	r20, 0xFD	; 253
    ed3a:	5f 4f       	sbci	r21, 0xFF	; 255
    ed3c:	b3 01       	movw	r22, r6
    ed3e:	6d 5f       	subi	r22, 0xFD	; 253
    ed40:	7f 4f       	sbci	r23, 0xFF	; 255
    ed42:	88 eb       	ldi	r24, 0xB8	; 184
    ed44:	9c e0       	ldi	r25, 0x0C	; 12
    ed46:	0e 94 ad bc 	call	0x1795a	; 0x1795a <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)>
    ed4a:	eb 8d       	ldd	r30, Y+27	; 0x1b
    ed4c:	fc 8d       	ldd	r31, Y+28	; 0x1c
    ed4e:	80 81       	ld	r24, Z
    ed50:	88 23       	and	r24, r24
    ed52:	09 f4       	brne	.+2      	; 0xed56 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xf4>
    ed54:	a6 c0       	rjmp	.+332    	; 0xeea2 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x240>
    ed56:	81 e0       	ldi	r24, 0x01	; 1
    ed58:	b2 e0       	ldi	r27, 0x02	; 2
    ed5a:	5b 2e       	mov	r5, r27
    ed5c:	ed 8d       	ldd	r30, Y+29	; 0x1d
    ed5e:	fe 8d       	ldd	r31, Y+30	; 0x1e
    ed60:	90 81       	ld	r25, Z
    ed62:	41 2c       	mov	r4, r1
    ed64:	99 23       	and	r25, r25
    ed66:	21 f0       	breq	.+8      	; 0xed70 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x10e>
    ed68:	53 94       	inc	r5
    ed6a:	53 94       	inc	r5
    ed6c:	44 24       	eor	r4, r4
    ed6e:	43 94       	inc	r4
    ed70:	b1 2c       	mov	r11, r1
    ed72:	a1 2c       	mov	r10, r1
    ed74:	81 30       	cpi	r24, 0x01	; 1
    ed76:	d9 f5       	brne	.+118    	; 0xedee <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x18c>
    ed78:	eb 8d       	ldd	r30, Y+27	; 0x1b
    ed7a:	fc 8d       	ldd	r31, Y+28	; 0x1c
    ed7c:	01 90       	ld	r0, Z+
    ed7e:	00 20       	and	r0, r0
    ed80:	e9 f7       	brne	.-6      	; 0xed7c <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x11a>
    ed82:	9f 01       	movw	r18, r30
    ed84:	21 50       	subi	r18, 0x01	; 1
    ed86:	31 09       	sbc	r19, r1
    ed88:	4b 8d       	ldd	r20, Y+27	; 0x1b
    ed8a:	5c 8d       	ldd	r21, Y+28	; 0x1c
    ed8c:	24 1b       	sub	r18, r20
    ed8e:	35 0b       	sbc	r19, r21
_Z22show_string_size_highth():
    ed90:	8c 81       	ldd	r24, Y+4	; 0x04
    ed92:	88 0f       	add	r24, r24
    ed94:	5c 81       	ldd	r21, Y+4	; 0x04
    ed96:	85 0f       	add	r24, r21
    ed98:	88 0f       	add	r24, r24
_Z14button_click_2jjhhhhjjhPcS_():
    ed9a:	ea 81       	ldd	r30, Y+2	; 0x02
    ed9c:	fb 81       	ldd	r31, Y+3	; 0x03
    ed9e:	e8 1b       	sub	r30, r24
    eda0:	f1 09       	sbc	r31, r1
    eda2:	cf 01       	movw	r24, r30
    eda4:	65 2d       	mov	r22, r5
    eda6:	70 e0       	ldi	r23, 0x00	; 0
    eda8:	0f 94 49 16 	call	0x22c92	; 0x22c92 <__divmodhi4>
    edac:	5b 01       	movw	r10, r22
    edae:	a1 01       	movw	r20, r2
    edb0:	41 50       	subi	r20, 0x01	; 1
    edb2:	51 09       	sbc	r21, r1
    edb4:	46 0f       	add	r20, r22
    edb6:	57 1f       	adc	r21, r23
_Z22show_string_size_widthhh():
    edb8:	f6 e0       	ldi	r31, 0x06	; 6
    edba:	2f 9f       	mul	r18, r31
    edbc:	90 01       	movw	r18, r0
    edbe:	11 24       	eor	r1, r1
    edc0:	6c 81       	ldd	r22, Y+4	; 0x04
    edc2:	62 9f       	mul	r22, r18
    edc4:	c0 01       	movw	r24, r0
    edc6:	63 9f       	mul	r22, r19
    edc8:	90 0d       	add	r25, r0
    edca:	11 24       	eor	r1, r1
_Z14button_click_2jjhhhhjjhPcS_():
    edcc:	b4 01       	movw	r22, r8
    edce:	68 1b       	sub	r22, r24
    edd0:	79 0b       	sbc	r23, r25
    edd2:	76 95       	lsr	r23
    edd4:	67 95       	ror	r22
    edd6:	66 0d       	add	r22, r6
    edd8:	77 1d       	adc	r23, r7
    edda:	c1 2c       	mov	r12, r1
    eddc:	e9 80       	ldd	r14, Y+1	; 0x01
    edde:	fd 2c       	mov	r15, r13
    ede0:	10 e0       	ldi	r17, 0x00	; 0
    ede2:	00 e0       	ldi	r16, 0x00	; 0
    ede4:	2c 81       	ldd	r18, Y+4	; 0x04
    ede6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    ede8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    edea:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    edee:	81 e0       	ldi	r24, 0x01	; 1
    edf0:	48 12       	cpse	r4, r24
    edf2:	3f c0       	rjmp	.+126    	; 0xee72 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x210>
    edf4:	ed 8d       	ldd	r30, Y+29	; 0x1d
    edf6:	fe 8d       	ldd	r31, Y+30	; 0x1e
    edf8:	01 90       	ld	r0, Z+
    edfa:	00 20       	and	r0, r0
    edfc:	e9 f7       	brne	.-6      	; 0xedf8 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x196>
    edfe:	9f 01       	movw	r18, r30
    ee00:	21 50       	subi	r18, 0x01	; 1
    ee02:	31 09       	sbc	r19, r1
    ee04:	4d 8d       	ldd	r20, Y+29	; 0x1d
    ee06:	5e 8d       	ldd	r21, Y+30	; 0x1e
    ee08:	24 1b       	sub	r18, r20
    ee0a:	35 0b       	sbc	r19, r21
_Z22show_string_size_highth():
    ee0c:	8d 81       	ldd	r24, Y+5	; 0x05
    ee0e:	88 0f       	add	r24, r24
    ee10:	5d 81       	ldd	r21, Y+5	; 0x05
    ee12:	85 0f       	add	r24, r21
    ee14:	88 0f       	add	r24, r24
_Z14button_click_2jjhhhhjjhPcS_():
    ee16:	ea 81       	ldd	r30, Y+2	; 0x02
    ee18:	fb 81       	ldd	r31, Y+3	; 0x03
    ee1a:	e8 1b       	sub	r30, r24
    ee1c:	f1 09       	sbc	r31, r1
    ee1e:	cf 01       	movw	r24, r30
    ee20:	88 0f       	add	r24, r24
    ee22:	99 1f       	adc	r25, r25
    ee24:	65 2d       	mov	r22, r5
    ee26:	70 e0       	ldi	r23, 0x00	; 0
    ee28:	0f 94 49 16 	call	0x22c92	; 0x22c92 <__divmodhi4>
    ee2c:	f1 e0       	ldi	r31, 0x01	; 1
    ee2e:	2f 1a       	sub	r2, r31
    ee30:	31 08       	sbc	r3, r1
    ee32:	26 0e       	add	r2, r22
    ee34:	37 1e       	adc	r3, r23
    ee36:	a1 01       	movw	r20, r2
    ee38:	4a 0d       	add	r20, r10
    ee3a:	5b 1d       	adc	r21, r11
_Z22show_string_size_widthhh():
    ee3c:	66 e0       	ldi	r22, 0x06	; 6
    ee3e:	26 9f       	mul	r18, r22
    ee40:	90 01       	movw	r18, r0
    ee42:	11 24       	eor	r1, r1
    ee44:	ed 81       	ldd	r30, Y+5	; 0x05
    ee46:	e2 9f       	mul	r30, r18
    ee48:	c0 01       	movw	r24, r0
    ee4a:	e3 9f       	mul	r30, r19
    ee4c:	90 0d       	add	r25, r0
    ee4e:	11 24       	eor	r1, r1
_Z14button_click_2jjhhhhjjhPcS_():
    ee50:	b4 01       	movw	r22, r8
    ee52:	68 1b       	sub	r22, r24
    ee54:	79 0b       	sbc	r23, r25
    ee56:	76 95       	lsr	r23
    ee58:	67 95       	ror	r22
    ee5a:	66 0d       	add	r22, r6
    ee5c:	77 1d       	adc	r23, r7
    ee5e:	c1 2c       	mov	r12, r1
    ee60:	e9 80       	ldd	r14, Y+1	; 0x01
    ee62:	fd 2c       	mov	r15, r13
    ee64:	10 e0       	ldi	r17, 0x00	; 0
    ee66:	00 e0       	ldi	r16, 0x00	; 0
    ee68:	2e 2f       	mov	r18, r30
    ee6a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    ee6c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    ee6e:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    ee72:	0f 90       	pop	r0
    ee74:	0f 90       	pop	r0
    ee76:	0f 90       	pop	r0
    ee78:	0f 90       	pop	r0
    ee7a:	0f 90       	pop	r0
    ee7c:	df 91       	pop	r29
    ee7e:	cf 91       	pop	r28
    ee80:	1f 91       	pop	r17
    ee82:	0f 91       	pop	r16
    ee84:	ff 90       	pop	r15
    ee86:	ef 90       	pop	r14
    ee88:	df 90       	pop	r13
    ee8a:	cf 90       	pop	r12
    ee8c:	bf 90       	pop	r11
    ee8e:	af 90       	pop	r10
    ee90:	9f 90       	pop	r9
    ee92:	8f 90       	pop	r8
    ee94:	7f 90       	pop	r7
    ee96:	6f 90       	pop	r6
    ee98:	5f 90       	pop	r5
    ee9a:	4f 90       	pop	r4
    ee9c:	3f 90       	pop	r3
    ee9e:	2f 90       	pop	r2
    eea0:	08 95       	ret
    eea2:	80 e0       	ldi	r24, 0x00	; 0
    eea4:	51 2c       	mov	r5, r1
    eea6:	5a cf       	rjmp	.-332    	; 0xed5c <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xfa>

0000eea8 <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z15button_switch_1jjhhhhPcS_():
    eea8:	2f 92       	push	r2
    eeaa:	3f 92       	push	r3
    eeac:	4f 92       	push	r4
    eeae:	5f 92       	push	r5
    eeb0:	6f 92       	push	r6
    eeb2:	7f 92       	push	r7
    eeb4:	8f 92       	push	r8
    eeb6:	9f 92       	push	r9
    eeb8:	af 92       	push	r10
    eeba:	bf 92       	push	r11
    eebc:	cf 92       	push	r12
    eebe:	df 92       	push	r13
    eec0:	ef 92       	push	r14
    eec2:	ff 92       	push	r15
    eec4:	0f 93       	push	r16
    eec6:	1f 93       	push	r17
    eec8:	cf 93       	push	r28
    eeca:	df 93       	push	r29
    eecc:	00 d0       	rcall	.+0      	; 0xeece <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)+0x26>
    eece:	1f 92       	push	r1
    eed0:	1f 92       	push	r1
    eed2:	cd b7       	in	r28, 0x3d	; 61
    eed4:	de b7       	in	r29, 0x3e	; 62
    eed6:	4c 01       	movw	r8, r24
    eed8:	3b 01       	movw	r6, r22
    eeda:	44 2e       	mov	r4, r20
    eedc:	f2 2e       	mov	r15, r18
    eede:	09 83       	std	Y+1, r16	; 0x01
    eee0:	db 82       	std	Y+3, r13	; 0x03
    eee2:	ca 82       	std	Y+2, r12	; 0x02
    eee4:	15 01       	movw	r2, r10
    eee6:	70 e0       	ldi	r23, 0x00	; 0
    eee8:	60 e0       	ldi	r22, 0x00	; 0
    eeea:	88 eb       	ldi	r24, 0xB8	; 184
    eeec:	9c e0       	ldi	r25, 0x0C	; 12
    eeee:	0e 94 a9 bc 	call	0x17952	; 0x17952 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    eef2:	1d 82       	std	Y+5, r1	; 0x05
    eef4:	1c 82       	std	Y+4, r1	; 0x04
    eef6:	af 2c       	mov	r10, r15
    eef8:	b1 2c       	mov	r11, r1
    eefa:	65 01       	movw	r12, r10
    eefc:	c6 0c       	add	r12, r6
    eefe:	d7 1c       	adc	r13, r7
    ef00:	51 2c       	mov	r5, r1
    ef02:	72 01       	movw	r14, r4
    ef04:	e8 0c       	add	r14, r8
    ef06:	f9 1c       	adc	r15, r9
    ef08:	86 01       	movw	r16, r12
    ef0a:	8c 81       	ldd	r24, Y+4	; 0x04
    ef0c:	9d 81       	ldd	r25, Y+5	; 0x05
    ef0e:	08 1b       	sub	r16, r24
    ef10:	19 0b       	sbc	r17, r25
    ef12:	97 01       	movw	r18, r14
    ef14:	28 1b       	sub	r18, r24
    ef16:	39 0b       	sbc	r19, r25
    ef18:	ac 01       	movw	r20, r24
    ef1a:	46 0d       	add	r20, r6
    ef1c:	57 1d       	adc	r21, r7
    ef1e:	bc 01       	movw	r22, r24
    ef20:	68 0d       	add	r22, r8
    ef22:	79 1d       	adc	r23, r9
    ef24:	88 eb       	ldi	r24, 0xB8	; 184
    ef26:	9c e0       	ldi	r25, 0x0C	; 12
    ef28:	0e 94 34 bd 	call	0x17a68	; 0x17a68 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    ef2c:	8c 81       	ldd	r24, Y+4	; 0x04
    ef2e:	9d 81       	ldd	r25, Y+5	; 0x05
    ef30:	01 96       	adiw	r24, 0x01	; 1
    ef32:	9d 83       	std	Y+5, r25	; 0x05
    ef34:	8c 83       	std	Y+4, r24	; 0x04
    ef36:	03 97       	sbiw	r24, 0x03	; 3
    ef38:	39 f7       	brne	.-50     	; 0xef08 <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)+0x60>
    ef3a:	ea 81       	ldd	r30, Y+2	; 0x02
    ef3c:	fb 81       	ldd	r31, Y+3	; 0x03
    ef3e:	01 90       	ld	r0, Z+
    ef40:	00 20       	and	r0, r0
    ef42:	e9 f7       	brne	.-6      	; 0xef3e <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)+0x96>
    ef44:	31 97       	sbiw	r30, 0x01	; 1
    ef46:	8a 81       	ldd	r24, Y+2	; 0x02
    ef48:	9b 81       	ldd	r25, Y+3	; 0x03
    ef4a:	e8 1b       	sub	r30, r24
    ef4c:	f9 0b       	sbc	r31, r25
_Z22show_string_size_highth():
    ef4e:	89 81       	ldd	r24, Y+1	; 0x01
    ef50:	88 0f       	add	r24, r24
    ef52:	99 81       	ldd	r25, Y+1	; 0x01
    ef54:	89 0f       	add	r24, r25
    ef56:	88 0f       	add	r24, r24
_Z15button_switch_1jjhhhhPcS_():
    ef58:	a5 01       	movw	r20, r10
    ef5a:	48 1b       	sub	r20, r24
    ef5c:	51 09       	sbc	r21, r1
    ef5e:	57 ff       	sbrs	r21, 7
    ef60:	02 c0       	rjmp	.+4      	; 0xef66 <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)+0xbe>
    ef62:	4d 5f       	subi	r20, 0xFD	; 253
    ef64:	5f 4f       	sbci	r21, 0xFF	; 255
    ef66:	55 95       	asr	r21
    ef68:	47 95       	ror	r20
    ef6a:	55 95       	asr	r21
    ef6c:	47 95       	ror	r20
    ef6e:	46 0d       	add	r20, r6
    ef70:	57 2d       	mov	r21, r7
    ef72:	51 1d       	adc	r21, r1
_Z22show_string_size_widthhh():
    ef74:	26 e0       	ldi	r18, 0x06	; 6
    ef76:	e2 9f       	mul	r30, r18
    ef78:	f0 01       	movw	r30, r0
    ef7a:	11 24       	eor	r1, r1
    ef7c:	29 81       	ldd	r18, Y+1	; 0x01
    ef7e:	2e 9f       	mul	r18, r30
    ef80:	c0 01       	movw	r24, r0
    ef82:	2f 9f       	mul	r18, r31
    ef84:	90 0d       	add	r25, r0
    ef86:	11 24       	eor	r1, r1
_Z15button_switch_1jjhhhhPcS_():
    ef88:	99 27       	eor	r25, r25
    ef8a:	b2 01       	movw	r22, r4
    ef8c:	68 1b       	sub	r22, r24
    ef8e:	79 0b       	sbc	r23, r25
    ef90:	77 ff       	sbrs	r23, 7
    ef92:	02 c0       	rjmp	.+4      	; 0xef98 <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)+0xf0>
    ef94:	6f 5f       	subi	r22, 0xFF	; 255
    ef96:	7f 4f       	sbci	r23, 0xFF	; 255
    ef98:	75 95       	asr	r23
    ef9a:	67 95       	ror	r22
    ef9c:	68 0d       	add	r22, r8
    ef9e:	79 2d       	mov	r23, r9
    efa0:	71 1d       	adc	r23, r1
    efa2:	c1 2c       	mov	r12, r1
    efa4:	ee 24       	eor	r14, r14
    efa6:	ea 94       	dec	r14
    efa8:	fe 2c       	mov	r15, r14
    efaa:	10 e0       	ldi	r17, 0x00	; 0
    efac:	00 e0       	ldi	r16, 0x00	; 0
    efae:	29 81       	ldd	r18, Y+1	; 0x01
    efb0:	8a 81       	ldd	r24, Y+2	; 0x02
    efb2:	9b 81       	ldd	r25, Y+3	; 0x03
    efb4:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    efb8:	f1 01       	movw	r30, r2
    efba:	01 90       	ld	r0, Z+
    efbc:	00 20       	and	r0, r0
    efbe:	e9 f7       	brne	.-6      	; 0xefba <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)+0x112>
    efc0:	31 97       	sbiw	r30, 0x01	; 1
    efc2:	e2 19       	sub	r30, r2
    efc4:	f3 09       	sbc	r31, r3
    efc6:	a5 01       	movw	r20, r10
    efc8:	46 50       	subi	r20, 0x06	; 6
    efca:	51 09       	sbc	r21, r1
    efcc:	57 ff       	sbrs	r21, 7
    efce:	02 c0       	rjmp	.+4      	; 0xefd4 <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)+0x12c>
    efd0:	4d 5f       	subi	r20, 0xFD	; 253
    efd2:	5f 4f       	sbci	r21, 0xFF	; 255
    efd4:	55 95       	asr	r21
    efd6:	47 95       	ror	r20
    efd8:	55 95       	asr	r21
    efda:	47 95       	ror	r20
    efdc:	55 27       	eor	r21, r21
    efde:	ca 01       	movw	r24, r20
    efe0:	88 0f       	add	r24, r24
    efe2:	99 1f       	adc	r25, r25
    efe4:	48 0f       	add	r20, r24
    efe6:	59 1f       	adc	r21, r25
    efe8:	46 0d       	add	r20, r6
    efea:	57 1d       	adc	r21, r7
_Z22show_string_size_widthhh():
    efec:	86 e0       	ldi	r24, 0x06	; 6
    efee:	e8 9f       	mul	r30, r24
    eff0:	f0 01       	movw	r30, r0
    eff2:	11 24       	eor	r1, r1
_Z15button_switch_1jjhhhhPcS_():
    eff4:	ff 27       	eor	r31, r31
    eff6:	b2 01       	movw	r22, r4
    eff8:	6e 1b       	sub	r22, r30
    effa:	7f 0b       	sbc	r23, r31
    effc:	77 ff       	sbrs	r23, 7
    effe:	02 c0       	rjmp	.+4      	; 0xf004 <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)+0x15c>
    f000:	6f 5f       	subi	r22, 0xFF	; 255
    f002:	7f 4f       	sbci	r23, 0xFF	; 255
    f004:	75 95       	asr	r23
    f006:	67 95       	ror	r22
    f008:	68 0d       	add	r22, r8
    f00a:	79 2d       	mov	r23, r9
    f00c:	71 1d       	adc	r23, r1
    f00e:	c1 2c       	mov	r12, r1
    f010:	ee 24       	eor	r14, r14
    f012:	ea 94       	dec	r14
    f014:	fe 2c       	mov	r15, r14
    f016:	10 e0       	ldi	r17, 0x00	; 0
    f018:	00 e0       	ldi	r16, 0x00	; 0
    f01a:	21 e0       	ldi	r18, 0x01	; 1
    f01c:	c1 01       	movw	r24, r2
    f01e:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    f022:	0f 90       	pop	r0
    f024:	0f 90       	pop	r0
    f026:	0f 90       	pop	r0
    f028:	0f 90       	pop	r0
    f02a:	0f 90       	pop	r0
    f02c:	df 91       	pop	r29
    f02e:	cf 91       	pop	r28
    f030:	1f 91       	pop	r17
    f032:	0f 91       	pop	r16
    f034:	ff 90       	pop	r15
    f036:	ef 90       	pop	r14
    f038:	df 90       	pop	r13
    f03a:	cf 90       	pop	r12
    f03c:	bf 90       	pop	r11
    f03e:	af 90       	pop	r10
    f040:	9f 90       	pop	r9
    f042:	8f 90       	pop	r8
    f044:	7f 90       	pop	r7
    f046:	6f 90       	pop	r6
    f048:	5f 90       	pop	r5
    f04a:	4f 90       	pop	r4
    f04c:	3f 90       	pop	r3
    f04e:	2f 90       	pop	r2
    f050:	08 95       	ret

0000f052 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)>:
_Z14button_click_3jjjjhc():
    f052:	2f 92       	push	r2
    f054:	3f 92       	push	r3
    f056:	4f 92       	push	r4
    f058:	5f 92       	push	r5
    f05a:	6f 92       	push	r6
    f05c:	7f 92       	push	r7
    f05e:	8f 92       	push	r8
    f060:	9f 92       	push	r9
    f062:	af 92       	push	r10
    f064:	bf 92       	push	r11
    f066:	cf 92       	push	r12
    f068:	df 92       	push	r13
    f06a:	ef 92       	push	r14
    f06c:	ff 92       	push	r15
    f06e:	0f 93       	push	r16
    f070:	1f 93       	push	r17
    f072:	cf 93       	push	r28
    f074:	df 93       	push	r29
    f076:	00 d0       	rcall	.+0      	; 0xf078 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)+0x26>
    f078:	1f 92       	push	r1
    f07a:	1f 92       	push	r1
    f07c:	cd b7       	in	r28, 0x3d	; 61
    f07e:	de b7       	in	r29, 0x3e	; 62
    f080:	6c 01       	movw	r12, r24
    f082:	5b 01       	movw	r10, r22
    f084:	1a 01       	movw	r2, r20
    f086:	29 01       	movw	r4, r18
    f088:	90 2e       	mov	r9, r16
    f08a:	8e 2c       	mov	r8, r14
    f08c:	70 e0       	ldi	r23, 0x00	; 0
    f08e:	60 e0       	ldi	r22, 0x00	; 0
    f090:	88 eb       	ldi	r24, 0xB8	; 184
    f092:	9c e0       	ldi	r25, 0x0C	; 12
    f094:	0e 94 a9 bc 	call	0x17952	; 0x17952 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    f098:	f1 2c       	mov	r15, r1
    f09a:	e1 2c       	mov	r14, r1
    f09c:	35 01       	movw	r6, r10
    f09e:	64 0c       	add	r6, r4
    f0a0:	75 1c       	adc	r7, r5
    f0a2:	c6 01       	movw	r24, r12
    f0a4:	82 0d       	add	r24, r2
    f0a6:	93 1d       	adc	r25, r3
    f0a8:	9d 83       	std	Y+5, r25	; 0x05
    f0aa:	8c 83       	std	Y+4, r24	; 0x04
    f0ac:	83 01       	movw	r16, r6
    f0ae:	0e 19       	sub	r16, r14
    f0b0:	1f 09       	sbc	r17, r15
    f0b2:	2c 81       	ldd	r18, Y+4	; 0x04
    f0b4:	3d 81       	ldd	r19, Y+5	; 0x05
    f0b6:	2e 19       	sub	r18, r14
    f0b8:	3f 09       	sbc	r19, r15
    f0ba:	a5 01       	movw	r20, r10
    f0bc:	4e 0d       	add	r20, r14
    f0be:	5f 1d       	adc	r21, r15
    f0c0:	b6 01       	movw	r22, r12
    f0c2:	6e 0d       	add	r22, r14
    f0c4:	7f 1d       	adc	r23, r15
    f0c6:	88 eb       	ldi	r24, 0xB8	; 184
    f0c8:	9c e0       	ldi	r25, 0x0C	; 12
    f0ca:	0e 94 34 bd 	call	0x17a68	; 0x17a68 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    f0ce:	9f ef       	ldi	r25, 0xFF	; 255
    f0d0:	e9 1a       	sub	r14, r25
    f0d2:	f9 0a       	sbc	r15, r25
    f0d4:	23 e0       	ldi	r18, 0x03	; 3
    f0d6:	e2 16       	cp	r14, r18
    f0d8:	f1 04       	cpc	r15, r1
    f0da:	41 f7       	brne	.-48     	; 0xf0ac <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)+0x5a>
    f0dc:	89 82       	std	Y+1, r8	; 0x01
    f0de:	1a 82       	std	Y+2, r1	; 0x02
    f0e0:	ce 01       	movw	r24, r28
    f0e2:	01 96       	adiw	r24, 0x01	; 1
    f0e4:	fc 01       	movw	r30, r24
    f0e6:	01 90       	ld	r0, Z+
    f0e8:	00 20       	and	r0, r0
    f0ea:	e9 f7       	brne	.-6      	; 0xf0e6 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)+0x94>
    f0ec:	31 97       	sbiw	r30, 0x01	; 1
    f0ee:	e8 1b       	sub	r30, r24
    f0f0:	f9 0b       	sbc	r31, r25
_Z22show_string_size_highth():
    f0f2:	29 2d       	mov	r18, r9
    f0f4:	22 0f       	add	r18, r18
    f0f6:	29 0d       	add	r18, r9
    f0f8:	22 0f       	add	r18, r18
_Z14button_click_3jjjjhc():
    f0fa:	a2 01       	movw	r20, r4
    f0fc:	42 1b       	sub	r20, r18
    f0fe:	51 09       	sbc	r21, r1
    f100:	56 95       	lsr	r21
    f102:	47 95       	ror	r20
    f104:	56 95       	lsr	r21
    f106:	47 95       	ror	r20
    f108:	4a 0d       	add	r20, r10
    f10a:	5b 2d       	mov	r21, r11
    f10c:	51 1d       	adc	r21, r1
_Z22show_string_size_widthhh():
    f10e:	26 e0       	ldi	r18, 0x06	; 6
    f110:	e2 9f       	mul	r30, r18
    f112:	f0 01       	movw	r30, r0
    f114:	11 24       	eor	r1, r1
    f116:	9e 9e       	mul	r9, r30
    f118:	90 01       	movw	r18, r0
    f11a:	9f 9e       	mul	r9, r31
    f11c:	30 0d       	add	r19, r0
    f11e:	11 24       	eor	r1, r1
_Z14button_click_3jjjjhc():
    f120:	33 27       	eor	r19, r19
    f122:	b1 01       	movw	r22, r2
    f124:	62 1b       	sub	r22, r18
    f126:	73 0b       	sbc	r23, r19
    f128:	76 95       	lsr	r23
    f12a:	67 95       	ror	r22
    f12c:	6c 0d       	add	r22, r12
    f12e:	7d 2d       	mov	r23, r13
    f130:	71 1d       	adc	r23, r1
    f132:	c1 2c       	mov	r12, r1
    f134:	ee 24       	eor	r14, r14
    f136:	ea 94       	dec	r14
    f138:	fe 2c       	mov	r15, r14
    f13a:	10 e0       	ldi	r17, 0x00	; 0
    f13c:	00 e0       	ldi	r16, 0x00	; 0
    f13e:	29 2d       	mov	r18, r9
    f140:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    f144:	0f 90       	pop	r0
    f146:	0f 90       	pop	r0
    f148:	0f 90       	pop	r0
    f14a:	0f 90       	pop	r0
    f14c:	0f 90       	pop	r0
    f14e:	df 91       	pop	r29
    f150:	cf 91       	pop	r28
    f152:	1f 91       	pop	r17
    f154:	0f 91       	pop	r16
    f156:	ff 90       	pop	r15
    f158:	ef 90       	pop	r14
    f15a:	df 90       	pop	r13
    f15c:	cf 90       	pop	r12
    f15e:	bf 90       	pop	r11
    f160:	af 90       	pop	r10
    f162:	9f 90       	pop	r9
    f164:	8f 90       	pop	r8
    f166:	7f 90       	pop	r7
    f168:	6f 90       	pop	r6
    f16a:	5f 90       	pop	r5
    f16c:	4f 90       	pop	r4
    f16e:	3f 90       	pop	r3
    f170:	2f 90       	pop	r2
    f172:	08 95       	ret

0000f174 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
_Z18button_click_touchjjjjjj():
    f174:	ef 92       	push	r14
    f176:	ff 92       	push	r15
    f178:	0f 93       	push	r16
    f17a:	1f 93       	push	r17
_Z10is_pressediiiiii():
    f17c:	80 17       	cp	r24, r16
    f17e:	91 07       	cpc	r25, r17
    f180:	74 f4       	brge	.+28     	; 0xf19e <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2a>
_Z18button_click_touchjjjjjj():
    f182:	84 0f       	add	r24, r20
    f184:	95 1f       	adc	r25, r21
_Z10is_pressediiiiii():
    f186:	08 17       	cp	r16, r24
    f188:	19 07       	cpc	r17, r25
    f18a:	4c f4       	brge	.+18     	; 0xf19e <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2a>
    f18c:	6e 15       	cp	r22, r14
    f18e:	7f 05       	cpc	r23, r15
    f190:	34 f4       	brge	.+12     	; 0xf19e <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2a>
_Z18button_click_touchjjjjjj():
    f192:	62 0f       	add	r22, r18
    f194:	73 1f       	adc	r23, r19
_Z10is_pressediiiiii():
    f196:	81 e0       	ldi	r24, 0x01	; 1
    f198:	e6 16       	cp	r14, r22
    f19a:	f7 06       	cpc	r15, r23
    f19c:	0c f0       	brlt	.+2      	; 0xf1a0 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2c>
_Z18button_click_touchjjjjjj():
    f19e:	80 e0       	ldi	r24, 0x00	; 0
    f1a0:	1f 91       	pop	r17
    f1a2:	0f 91       	pop	r16
    f1a4:	ff 90       	pop	r15
    f1a6:	ef 90       	pop	r14
    f1a8:	08 95       	ret

0000f1aa <draw_menu(bool, unsigned char, unsigned int, unsigned int)>:
_Z9draw_menubhjj():
    f1aa:	2f 92       	push	r2
    f1ac:	3f 92       	push	r3
    f1ae:	4f 92       	push	r4
    f1b0:	5f 92       	push	r5
    f1b2:	6f 92       	push	r6
    f1b4:	7f 92       	push	r7
    f1b6:	8f 92       	push	r8
    f1b8:	9f 92       	push	r9
    f1ba:	af 92       	push	r10
    f1bc:	bf 92       	push	r11
    f1be:	cf 92       	push	r12
    f1c0:	df 92       	push	r13
    f1c2:	ef 92       	push	r14
    f1c4:	ff 92       	push	r15
    f1c6:	0f 93       	push	r16
    f1c8:	1f 93       	push	r17
    f1ca:	cf 93       	push	r28
    f1cc:	df 93       	push	r29
    f1ce:	cd b7       	in	r28, 0x3d	; 61
    f1d0:	de b7       	in	r29, 0x3e	; 62
    f1d2:	c3 5e       	subi	r28, 0xE3	; 227
    f1d4:	d1 09       	sbc	r29, r1
    f1d6:	0f b6       	in	r0, 0x3f	; 63
    f1d8:	f8 94       	cli
    f1da:	de bf       	out	0x3e, r29	; 62
    f1dc:	0f be       	out	0x3f, r0	; 63
    f1de:	cd bf       	out	0x3d, r28	; 61
    f1e0:	f8 2e       	mov	r15, r24
    f1e2:	cb 53       	subi	r28, 0x3B	; 59
    f1e4:	df 4f       	sbci	r29, 0xFF	; 255
    f1e6:	59 83       	std	Y+1, r21	; 0x01
    f1e8:	48 83       	st	Y, r20
    f1ea:	c5 5c       	subi	r28, 0xC5	; 197
    f1ec:	d0 40       	sbci	r29, 0x00	; 0
    f1ee:	c9 53       	subi	r28, 0x39	; 57
    f1f0:	df 4f       	sbci	r29, 0xFF	; 255
    f1f2:	39 83       	std	Y+1, r19	; 0x01
    f1f4:	28 83       	st	Y, r18
    f1f6:	c7 5c       	subi	r28, 0xC7	; 199
    f1f8:	d0 40       	sbci	r29, 0x00	; 0
    f1fa:	ce 01       	movw	r24, r28
    f1fc:	8f 54       	subi	r24, 0x4F	; 79
    f1fe:	9f 4f       	sbci	r25, 0xFF	; 255
    f200:	0e 94 0f 53 	call	0xa61e	; 0xa61e <MenuHistoryGetMenu(unsigned char*)>
    f204:	3c 01       	movw	r6, r24
    f206:	8c 01       	movw	r16, r24
    f208:	03 52       	subi	r16, 0x23	; 35
    f20a:	1d 4f       	sbci	r17, 0xFD	; 253
    f20c:	f8 01       	movw	r30, r16
    f20e:	25 91       	lpm	r18, Z+
    f210:	34 91       	lpm	r19, Z
    f212:	ca 54       	subi	r28, 0x4A	; 74
    f214:	df 4f       	sbci	r29, 0xFF	; 255
    f216:	39 83       	std	Y+1, r19	; 0x01
    f218:	28 83       	st	Y, r18
    f21a:	c6 5b       	subi	r28, 0xB6	; 182
    f21c:	d0 40       	sbci	r29, 0x00	; 0
    f21e:	6c 01       	movw	r12, r24
    f220:	31 e2       	ldi	r19, 0x21	; 33
    f222:	c3 1a       	sub	r12, r19
    f224:	3d ef       	ldi	r19, 0xFD	; 253
    f226:	d3 0a       	sbc	r13, r19
    f228:	f6 01       	movw	r30, r12
    f22a:	45 91       	lpm	r20, Z+
    f22c:	54 91       	lpm	r21, Z
    f22e:	c8 54       	subi	r28, 0x48	; 72
    f230:	df 4f       	sbci	r29, 0xFF	; 255
    f232:	59 83       	std	Y+1, r21	; 0x01
    f234:	48 83       	st	Y, r20
    f236:	c8 5b       	subi	r28, 0xB8	; 184
    f238:	d0 40       	sbci	r29, 0x00	; 0
    f23a:	fc 01       	movw	r30, r24
    f23c:	e7 51       	subi	r30, 0x17	; 23
    f23e:	fd 4f       	sbci	r31, 0xFD	; 253
    f240:	25 91       	lpm	r18, Z+
    f242:	34 91       	lpm	r19, Z
    f244:	5c 01       	movw	r10, r24
    f246:	54 e2       	ldi	r21, 0x24	; 36
    f248:	a5 1a       	sub	r10, r21
    f24a:	5d ef       	ldi	r21, 0xFD	; 253
    f24c:	b5 0a       	sbc	r11, r21
    f24e:	f5 01       	movw	r30, r10
    f250:	84 91       	lpm	r24, Z
    f252:	cf 54       	subi	r28, 0x4F	; 79
    f254:	df 4f       	sbci	r29, 0xFF	; 255
    f256:	68 81       	ld	r22, Y
    f258:	c1 5b       	subi	r28, 0xB1	; 177
    f25a:	d0 40       	sbci	r29, 0x00	; 0
    f25c:	70 e0       	ldi	r23, 0x00	; 0
    f25e:	4f ef       	ldi	r20, 0xFF	; 255
    f260:	90 e0       	ldi	r25, 0x00	; 0
    f262:	f9 01       	movw	r30, r18
    f264:	19 95       	eicall
    f266:	91 2c       	mov	r9, r1
    f268:	88 23       	and	r24, r24
    f26a:	11 f0       	breq	.+4      	; 0xf270 <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0xc6>
    f26c:	99 24       	eor	r9, r9
    f26e:	93 94       	inc	r9
    f270:	f3 01       	movw	r30, r6
    f272:	e5 51       	subi	r30, 0x15	; 21
    f274:	fd 4f       	sbci	r31, 0xFD	; 253
    f276:	25 91       	lpm	r18, Z+
    f278:	34 91       	lpm	r19, Z
    f27a:	f5 01       	movw	r30, r10
    f27c:	84 91       	lpm	r24, Z
    f27e:	cf 54       	subi	r28, 0x4F	; 79
    f280:	df 4f       	sbci	r29, 0xFF	; 255
    f282:	68 81       	ld	r22, Y
    f284:	c1 5b       	subi	r28, 0xB1	; 177
    f286:	d0 40       	sbci	r29, 0x00	; 0
    f288:	70 e0       	ldi	r23, 0x00	; 0
    f28a:	4f ef       	ldi	r20, 0xFF	; 255
    f28c:	90 e0       	ldi	r25, 0x00	; 0
    f28e:	f9 01       	movw	r30, r18
    f290:	19 95       	eicall
    f292:	81 11       	cpse	r24, r1
    f294:	63 c1       	rjmp	.+710    	; 0xf55c <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0x3b2>
    f296:	e8 94       	clt
    f298:	91 f8       	bld	r9, 1
    f29a:	f3 01       	movw	r30, r6
    f29c:	e3 51       	subi	r30, 0x13	; 19
    f29e:	fd 4f       	sbci	r31, 0xFD	; 253
    f2a0:	25 91       	lpm	r18, Z+
    f2a2:	34 91       	lpm	r19, Z
    f2a4:	f5 01       	movw	r30, r10
    f2a6:	84 91       	lpm	r24, Z
    f2a8:	cf 54       	subi	r28, 0x4F	; 79
    f2aa:	df 4f       	sbci	r29, 0xFF	; 255
    f2ac:	68 81       	ld	r22, Y
    f2ae:	c1 5b       	subi	r28, 0xB1	; 177
    f2b0:	d0 40       	sbci	r29, 0x00	; 0
    f2b2:	70 e0       	ldi	r23, 0x00	; 0
    f2b4:	4f ef       	ldi	r20, 0xFF	; 255
    f2b6:	90 e0       	ldi	r25, 0x00	; 0
    f2b8:	f9 01       	movw	r30, r18
    f2ba:	19 95       	eicall
    f2bc:	81 11       	cpse	r24, r1
    f2be:	51 c1       	rjmp	.+674    	; 0xf562 <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0x3b8>
    f2c0:	e8 94       	clt
    f2c2:	92 f8       	bld	r9, 2
    f2c4:	f3 01       	movw	r30, r6
    f2c6:	e1 51       	subi	r30, 0x11	; 17
    f2c8:	fd 4f       	sbci	r31, 0xFD	; 253
    f2ca:	25 91       	lpm	r18, Z+
    f2cc:	34 91       	lpm	r19, Z
    f2ce:	f5 01       	movw	r30, r10
    f2d0:	84 91       	lpm	r24, Z
    f2d2:	cf 54       	subi	r28, 0x4F	; 79
    f2d4:	df 4f       	sbci	r29, 0xFF	; 255
    f2d6:	68 81       	ld	r22, Y
    f2d8:	c1 5b       	subi	r28, 0xB1	; 177
    f2da:	d0 40       	sbci	r29, 0x00	; 0
    f2dc:	70 e0       	ldi	r23, 0x00	; 0
    f2de:	4f ef       	ldi	r20, 0xFF	; 255
    f2e0:	90 e0       	ldi	r25, 0x00	; 0
    f2e2:	f9 01       	movw	r30, r18
    f2e4:	19 95       	eicall
    f2e6:	81 11       	cpse	r24, r1
    f2e8:	3f c1       	rjmp	.+638    	; 0xf568 <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0x3be>
    f2ea:	89 2d       	mov	r24, r9
    f2ec:	87 7f       	andi	r24, 0xF7	; 247
    f2ee:	f1 10       	cpse	r15, r1
    f2f0:	3e c1       	rjmp	.+636    	; 0xf56e <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0x3c4>
    f2f2:	8f 7e       	andi	r24, 0xEF	; 239
    f2f4:	90 91 0d 0f 	lds	r25, 0x0F0D	; 0x800f0d <display_redraw_once>
    f2f8:	91 11       	cpse	r25, r1
    f2fa:	3b c1       	rjmp	.+630    	; 0xf572 <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0x3c8>
    f2fc:	91 e0       	ldi	r25, 0x01	; 1
    f2fe:	90 93 0d 0f 	sts	0x0F0D, r25	; 0x800f0d <display_redraw_once>
    f302:	80 62       	ori	r24, 0x20	; 32
    f304:	c3 53       	subi	r28, 0x33	; 51
    f306:	df 4f       	sbci	r29, 0xFF	; 255
    f308:	88 83       	st	Y, r24
    f30a:	cd 5c       	subi	r28, 0xCD	; 205
    f30c:	d0 40       	sbci	r29, 0x00	; 0
    f30e:	f3 01       	movw	r30, r6
    f310:	e8 51       	subi	r30, 0x18	; 24
    f312:	fd 4f       	sbci	r31, 0xFD	; 253
    f314:	84 91       	lpm	r24, Z
    f316:	c3 53       	subi	r28, 0x33	; 51
    f318:	df 4f       	sbci	r29, 0xFF	; 255
    f31a:	68 81       	ld	r22, Y
    f31c:	cd 5c       	subi	r28, 0xCD	; 205
    f31e:	d0 40       	sbci	r29, 0x00	; 0
    f320:	0e 94 f0 52 	call	0xa5e0	; 0xa5e0 <enable_redraw(unsigned char, unsigned char)>
    f324:	88 23       	and	r24, r24
    f326:	e1 f0       	breq	.+56     	; 0xf360 <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0x1b6>
    f328:	f3 01       	movw	r30, r6
    f32a:	65 91       	lpm	r22, Z+
    f32c:	74 91       	lpm	r23, Z
    f32e:	ce 01       	movw	r24, r28
    f330:	01 96       	adiw	r24, 0x01	; 1
    f332:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    f336:	f6 01       	movw	r30, r12
    f338:	45 91       	lpm	r20, Z+
    f33a:	54 91       	lpm	r21, Z
    f33c:	f8 01       	movw	r30, r16
    f33e:	65 91       	lpm	r22, Z+
    f340:	74 91       	lpm	r23, Z
    f342:	4b 5f       	subi	r20, 0xFB	; 251
    f344:	5f 4f       	sbci	r21, 0xFF	; 255
    f346:	6b 5f       	subi	r22, 0xFB	; 251
    f348:	7f 4f       	sbci	r23, 0xFF	; 255
    f34a:	c1 2c       	mov	r12, r1
    f34c:	ee 24       	eor	r14, r14
    f34e:	ea 94       	dec	r14
    f350:	fe 2c       	mov	r15, r14
    f352:	10 e0       	ldi	r17, 0x00	; 0
    f354:	00 e0       	ldi	r16, 0x00	; 0
    f356:	22 e0       	ldi	r18, 0x02	; 2
    f358:	ce 01       	movw	r24, r28
    f35a:	01 96       	adiw	r24, 0x01	; 1
    f35c:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    f360:	51 2c       	mov	r5, r1
    f362:	ce 53       	subi	r28, 0x3E	; 62
    f364:	df 4f       	sbci	r29, 0xFF	; 255
    f366:	18 82       	st	Y, r1
    f368:	c2 5c       	subi	r28, 0xC2	; 194
    f36a:	d0 40       	sbci	r29, 0x00	; 0
    f36c:	13 01       	movw	r2, r6
    f36e:	fa e2       	ldi	r31, 0x2A	; 42
    f370:	2f 1a       	sub	r2, r31
    f372:	fd ef       	ldi	r31, 0xFD	; 253
    f374:	3f 0a       	sbc	r3, r31
    f376:	93 e1       	ldi	r25, 0x13	; 19
    f378:	49 2e       	mov	r4, r25
    f37a:	f1 01       	movw	r30, r2
    f37c:	84 91       	lpm	r24, Z
    f37e:	58 16       	cp	r5, r24
    f380:	08 f0       	brcs	.+2      	; 0xf384 <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0x1da>
    f382:	f9 c0       	rjmp	.+498    	; 0xf576 <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0x3cc>
    f384:	54 9c       	mul	r5, r4
    f386:	50 01       	movw	r10, r0
    f388:	11 24       	eor	r1, r1
    f38a:	f5 01       	movw	r30, r10
    f38c:	e2 5d       	subi	r30, 0xD2	; 210
    f38e:	fe 4f       	sbci	r31, 0xFE	; 254
    f390:	e6 0d       	add	r30, r6
    f392:	f7 1d       	adc	r31, r7
    f394:	25 91       	lpm	r18, Z+
    f396:	34 91       	lpm	r19, Z
    f398:	45 01       	movw	r8, r10
    f39a:	fd ed       	ldi	r31, 0xDD	; 221
    f39c:	8f 1a       	sub	r8, r31
    f39e:	fe ef       	ldi	r31, 0xFE	; 254
    f3a0:	9f 0a       	sbc	r9, r31
    f3a2:	86 0c       	add	r8, r6
    f3a4:	97 1c       	adc	r9, r7
    f3a6:	f4 01       	movw	r30, r8
    f3a8:	84 91       	lpm	r24, Z
    f3aa:	cf 54       	subi	r28, 0x4F	; 79
    f3ac:	df 4f       	sbci	r29, 0xFF	; 255
    f3ae:	68 81       	ld	r22, Y
    f3b0:	c1 5b       	subi	r28, 0xB1	; 177
    f3b2:	d0 40       	sbci	r29, 0x00	; 0
    f3b4:	70 e0       	ldi	r23, 0x00	; 0
    f3b6:	45 2d       	mov	r20, r5
    f3b8:	90 e0       	ldi	r25, 0x00	; 0
    f3ba:	f9 01       	movw	r30, r18
    f3bc:	19 95       	eicall
    f3be:	88 23       	and	r24, r24
    f3c0:	09 f4       	brne	.+2      	; 0xf3c4 <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0x21a>
    f3c2:	ca c0       	rjmp	.+404    	; 0xf558 <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0x3ae>
    f3c4:	f5 01       	movw	r30, r10
    f3c6:	e5 5d       	subi	r30, 0xD5	; 213
    f3c8:	fe 4f       	sbci	r31, 0xFE	; 254
    f3ca:	e6 0d       	add	r30, r6
    f3cc:	f7 1d       	adc	r31, r7
    f3ce:	84 91       	lpm	r24, Z
    f3d0:	c3 53       	subi	r28, 0x33	; 51
    f3d2:	df 4f       	sbci	r29, 0xFF	; 255
    f3d4:	68 81       	ld	r22, Y
    f3d6:	cd 5c       	subi	r28, 0xCD	; 205
    f3d8:	d0 40       	sbci	r29, 0x00	; 0
    f3da:	0e 94 f0 52 	call	0xa5e0	; 0xa5e0 <enable_redraw(unsigned char, unsigned char)>
    f3de:	88 23       	and	r24, r24
    f3e0:	09 f4       	brne	.+2      	; 0xf3e4 <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0x23a>
    f3e2:	4b c0       	rjmp	.+150    	; 0xf47a <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0x2d0>
    f3e4:	f5 01       	movw	r30, r10
    f3e6:	e0 5d       	subi	r30, 0xD0	; 208
    f3e8:	fe 4f       	sbci	r31, 0xFE	; 254
    f3ea:	e6 0d       	add	r30, r6
    f3ec:	f7 1d       	adc	r31, r7
    f3ee:	65 91       	lpm	r22, Z+
    f3f0:	74 91       	lpm	r23, Z
    f3f2:	ce 01       	movw	r24, r28
    f3f4:	01 96       	adiw	r24, 0x01	; 1
    f3f6:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    f3fa:	f5 01       	movw	r30, r10
    f3fc:	eb 5d       	subi	r30, 0xDB	; 219
    f3fe:	fe 4f       	sbci	r31, 0xFE	; 254
    f400:	e6 0d       	add	r30, r6
    f402:	f7 1d       	adc	r31, r7
    f404:	a5 91       	lpm	r26, Z+
    f406:	b4 91       	lpm	r27, Z
    f408:	f4 01       	movw	r30, r8
    f40a:	05 91       	lpm	r16, Z+
    f40c:	14 91       	lpm	r17, Z
    f40e:	f5 01       	movw	r30, r10
    f410:	e7 5d       	subi	r30, 0xD7	; 215
    f412:	fe 4f       	sbci	r31, 0xFE	; 254
    f414:	e6 0d       	add	r30, r6
    f416:	f7 1d       	adc	r31, r7
    f418:	25 91       	lpm	r18, Z+
    f41a:	34 91       	lpm	r19, Z
    f41c:	f5 01       	movw	r30, r10
    f41e:	e9 5d       	subi	r30, 0xD9	; 217
    f420:	fe 4f       	sbci	r31, 0xFE	; 254
    f422:	e6 0d       	add	r30, r6
    f424:	f7 1d       	adc	r31, r7
    f426:	45 91       	lpm	r20, Z+
    f428:	54 91       	lpm	r21, Z
    f42a:	f5 01       	movw	r30, r10
    f42c:	ef 5d       	subi	r30, 0xDF	; 223
    f42e:	fe 4f       	sbci	r31, 0xFE	; 254
    f430:	e6 0d       	add	r30, r6
    f432:	f7 1d       	adc	r31, r7
    f434:	65 91       	lpm	r22, Z+
    f436:	74 91       	lpm	r23, Z
    f438:	f5 01       	movw	r30, r10
    f43a:	e1 5e       	subi	r30, 0xE1	; 225
    f43c:	fe 4f       	sbci	r31, 0xFE	; 254
    f43e:	e6 0d       	add	r30, r6
    f440:	f7 1d       	adc	r31, r7
    f442:	85 91       	lpm	r24, Z+
    f444:	94 91       	lpm	r25, Z
    f446:	c8 54       	subi	r28, 0x48	; 72
    f448:	df 4f       	sbci	r29, 0xFF	; 255
    f44a:	e8 81       	ld	r30, Y
    f44c:	f9 81       	ldd	r31, Y+1	; 0x01
    f44e:	c8 5b       	subi	r28, 0xB8	; 184
    f450:	d0 40       	sbci	r29, 0x00	; 0
    f452:	6e 0f       	add	r22, r30
    f454:	7f 1f       	adc	r23, r31
    f456:	fe 01       	movw	r30, r28
    f458:	31 96       	adiw	r30, 0x01	; 1
    f45a:	6f 01       	movw	r12, r30
    f45c:	cf 54       	subi	r28, 0x4F	; 79
    f45e:	df 4f       	sbci	r29, 0xFF	; 255
    f460:	e8 80       	ld	r14, Y
    f462:	c1 5b       	subi	r28, 0xB1	; 177
    f464:	d0 40       	sbci	r29, 0x00	; 0
    f466:	ca 54       	subi	r28, 0x4A	; 74
    f468:	df 4f       	sbci	r29, 0xFF	; 255
    f46a:	e8 81       	ld	r30, Y
    f46c:	f9 81       	ldd	r31, Y+1	; 0x01
    f46e:	c6 5b       	subi	r28, 0xB6	; 182
    f470:	d0 40       	sbci	r29, 0x00	; 0
    f472:	8e 0f       	add	r24, r30
    f474:	9f 1f       	adc	r25, r31
    f476:	fd 01       	movw	r30, r26
    f478:	19 95       	eicall
    f47a:	cb 53       	subi	r28, 0x3B	; 59
    f47c:	df 4f       	sbci	r29, 0xFF	; 255
    f47e:	28 81       	ld	r18, Y
    f480:	39 81       	ldd	r19, Y+1	; 0x01
    f482:	c5 5c       	subi	r28, 0xC5	; 197
    f484:	d0 40       	sbci	r29, 0x00	; 0
    f486:	23 2b       	or	r18, r19
    f488:	09 f4       	brne	.+2      	; 0xf48c <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0x2e2>
    f48a:	66 c0       	rjmp	.+204    	; 0xf558 <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0x3ae>
    f48c:	c9 53       	subi	r28, 0x39	; 57
    f48e:	df 4f       	sbci	r29, 0xFF	; 255
    f490:	48 81       	ld	r20, Y
    f492:	59 81       	ldd	r21, Y+1	; 0x01
    f494:	c7 5c       	subi	r28, 0xC7	; 199
    f496:	d0 40       	sbci	r29, 0x00	; 0
    f498:	45 2b       	or	r20, r21
    f49a:	09 f4       	brne	.+2      	; 0xf49e <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0x2f4>
    f49c:	5d c0       	rjmp	.+186    	; 0xf558 <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0x3ae>
    f49e:	f5 01       	movw	r30, r10
    f4a0:	e7 5d       	subi	r30, 0xD7	; 215
    f4a2:	fe 4f       	sbci	r31, 0xFE	; 254
    f4a4:	e6 0d       	add	r30, r6
    f4a6:	f7 1d       	adc	r31, r7
    f4a8:	25 91       	lpm	r18, Z+
    f4aa:	34 91       	lpm	r19, Z
    f4ac:	f5 01       	movw	r30, r10
    f4ae:	e9 5d       	subi	r30, 0xD9	; 217
    f4b0:	fe 4f       	sbci	r31, 0xFE	; 254
    f4b2:	e6 0d       	add	r30, r6
    f4b4:	f7 1d       	adc	r31, r7
    f4b6:	45 91       	lpm	r20, Z+
    f4b8:	54 91       	lpm	r21, Z
    f4ba:	f5 01       	movw	r30, r10
    f4bc:	ef 5d       	subi	r30, 0xDF	; 223
    f4be:	fe 4f       	sbci	r31, 0xFE	; 254
    f4c0:	e6 0d       	add	r30, r6
    f4c2:	f7 1d       	adc	r31, r7
    f4c4:	65 91       	lpm	r22, Z+
    f4c6:	74 91       	lpm	r23, Z
    f4c8:	f5 01       	movw	r30, r10
    f4ca:	e1 5e       	subi	r30, 0xE1	; 225
    f4cc:	fe 4f       	sbci	r31, 0xFE	; 254
    f4ce:	e6 0d       	add	r30, r6
    f4d0:	f7 1d       	adc	r31, r7
    f4d2:	85 91       	lpm	r24, Z+
    f4d4:	94 91       	lpm	r25, Z
    f4d6:	c8 54       	subi	r28, 0x48	; 72
    f4d8:	df 4f       	sbci	r29, 0xFF	; 255
    f4da:	e8 81       	ld	r30, Y
    f4dc:	f9 81       	ldd	r31, Y+1	; 0x01
    f4de:	c8 5b       	subi	r28, 0xB8	; 184
    f4e0:	d0 40       	sbci	r29, 0x00	; 0
    f4e2:	6e 0f       	add	r22, r30
    f4e4:	7f 1f       	adc	r23, r31
    f4e6:	c9 53       	subi	r28, 0x39	; 57
    f4e8:	df 4f       	sbci	r29, 0xFF	; 255
    f4ea:	e8 80       	ld	r14, Y
    f4ec:	f9 80       	ldd	r15, Y+1	; 0x01
    f4ee:	c7 5c       	subi	r28, 0xC7	; 199
    f4f0:	d0 40       	sbci	r29, 0x00	; 0
    f4f2:	cb 53       	subi	r28, 0x3B	; 59
    f4f4:	df 4f       	sbci	r29, 0xFF	; 255
    f4f6:	08 81       	ld	r16, Y
    f4f8:	19 81       	ldd	r17, Y+1	; 0x01
    f4fa:	c5 5c       	subi	r28, 0xC5	; 197
    f4fc:	d0 40       	sbci	r29, 0x00	; 0
    f4fe:	ca 54       	subi	r28, 0x4A	; 74
    f500:	df 4f       	sbci	r29, 0xFF	; 255
    f502:	e8 81       	ld	r30, Y
    f504:	f9 81       	ldd	r31, Y+1	; 0x01
    f506:	c6 5b       	subi	r28, 0xB6	; 182
    f508:	d0 40       	sbci	r29, 0x00	; 0
    f50a:	8e 0f       	add	r24, r30
    f50c:	9f 1f       	adc	r25, r31
    f50e:	0e 94 ba 78 	call	0xf174	; 0xf174 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    f512:	18 2f       	mov	r17, r24
    f514:	88 23       	and	r24, r24
    f516:	01 f1       	breq	.+64     	; 0xf558 <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0x3ae>
    f518:	f5 01       	movw	r30, r10
    f51a:	e4 5d       	subi	r30, 0xD4	; 212
    f51c:	fe 4f       	sbci	r31, 0xFE	; 254
    f51e:	e6 0d       	add	r30, r6
    f520:	f7 1d       	adc	r31, r7
    f522:	25 91       	lpm	r18, Z+
    f524:	34 91       	lpm	r19, Z
    f526:	f2 e5       	ldi	r31, 0x52	; 82
    f528:	22 33       	cpi	r18, 0x32	; 50
    f52a:	3f 07       	cpc	r19, r31
    f52c:	a9 f0       	breq	.+42     	; 0xf558 <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0x3ae>
    f52e:	f4 01       	movw	r30, r8
    f530:	85 91       	lpm	r24, Z+
    f532:	94 91       	lpm	r25, Z
    f534:	cf 54       	subi	r28, 0x4F	; 79
    f536:	df 4f       	sbci	r29, 0xFF	; 255
    f538:	68 81       	ld	r22, Y
    f53a:	c1 5b       	subi	r28, 0xB1	; 177
    f53c:	d0 40       	sbci	r29, 0x00	; 0
    f53e:	70 e0       	ldi	r23, 0x00	; 0
    f540:	45 2d       	mov	r20, r5
    f542:	f9 01       	movw	r30, r18
    f544:	19 95       	eicall
    f546:	87 e0       	ldi	r24, 0x07	; 7
    f548:	96 e0       	ldi	r25, 0x06	; 6
    f54a:	0f 94 7b 1b 	call	0x236f6	; 0x236f6 <puts>
    f54e:	ce 53       	subi	r28, 0x3E	; 62
    f550:	df 4f       	sbci	r29, 0xFF	; 255
    f552:	18 83       	st	Y, r17
    f554:	c2 5c       	subi	r28, 0xC2	; 194
    f556:	d0 40       	sbci	r29, 0x00	; 0
    f558:	53 94       	inc	r5
    f55a:	0f cf       	rjmp	.-482    	; 0xf37a <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0x1d0>
    f55c:	68 94       	set
    f55e:	91 f8       	bld	r9, 1
    f560:	9c ce       	rjmp	.-712    	; 0xf29a <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0xf0>
    f562:	68 94       	set
    f564:	92 f8       	bld	r9, 2
    f566:	ae ce       	rjmp	.-676    	; 0xf2c4 <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0x11a>
    f568:	89 2d       	mov	r24, r9
    f56a:	88 60       	ori	r24, 0x08	; 8
    f56c:	c0 ce       	rjmp	.-640    	; 0xf2ee <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0x144>
    f56e:	80 61       	ori	r24, 0x10	; 16
    f570:	c1 ce       	rjmp	.-638    	; 0xf2f4 <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0x14a>
    f572:	8f 7d       	andi	r24, 0xDF	; 223
    f574:	c7 ce       	rjmp	.-626    	; 0xf304 <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0x15a>
    f576:	ce 53       	subi	r28, 0x3E	; 62
    f578:	df 4f       	sbci	r29, 0xFF	; 255
    f57a:	f8 81       	ld	r31, Y
    f57c:	c2 5c       	subi	r28, 0xC2	; 194
    f57e:	d0 40       	sbci	r29, 0x00	; 0
    f580:	f1 11       	cpse	r31, r1
    f582:	0c 94 14 8a 	jmp	0x11428	; 0x11428 <__EEPROM_REGION_LENGTH__+0x1428>
    f586:	91 2c       	mov	r9, r1
    f588:	93 01       	movw	r18, r6
    f58a:	2c 52       	subi	r18, 0x2C	; 44
    f58c:	3d 4f       	sbci	r19, 0xFD	; 253
    f58e:	c6 54       	subi	r28, 0x46	; 70
    f590:	df 4f       	sbci	r29, 0xFF	; 255
    f592:	39 83       	std	Y+1, r19	; 0x01
    f594:	28 83       	st	Y, r18
    f596:	ca 5b       	subi	r28, 0xBA	; 186
    f598:	d0 40       	sbci	r29, 0x00	; 0
    f59a:	c6 54       	subi	r28, 0x46	; 70
    f59c:	df 4f       	sbci	r29, 0xFF	; 255
    f59e:	e8 81       	ld	r30, Y
    f5a0:	f9 81       	ldd	r31, Y+1	; 0x01
    f5a2:	ca 5b       	subi	r28, 0xBA	; 186
    f5a4:	d0 40       	sbci	r29, 0x00	; 0
    f5a6:	84 91       	lpm	r24, Z
    f5a8:	98 16       	cp	r9, r24
    f5aa:	08 f0       	brcs	.+2      	; 0xf5ae <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0x404>
    f5ac:	d9 c0       	rjmp	.+434    	; 0xf760 <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0x5b6>
    f5ae:	89 2d       	mov	r24, r9
    f5b0:	90 e0       	ldi	r25, 0x00	; 0
    f5b2:	01 96       	adiw	r24, 0x01	; 1
    f5b4:	f1 e1       	ldi	r31, 0x11	; 17
    f5b6:	f8 9f       	mul	r31, r24
    f5b8:	20 01       	movw	r4, r0
    f5ba:	f9 9f       	mul	r31, r25
    f5bc:	50 0c       	add	r5, r0
    f5be:	11 24       	eor	r1, r1
    f5c0:	f3 01       	movw	r30, r6
    f5c2:	e4 0d       	add	r30, r4
    f5c4:	f5 1d       	adc	r31, r5
    f5c6:	25 91       	lpm	r18, Z+
    f5c8:	34 91       	lpm	r19, Z
    f5ca:	12 01       	movw	r2, r4
    f5cc:	44 e0       	ldi	r20, 0x04	; 4
    f5ce:	24 1a       	sub	r2, r20
    f5d0:	31 08       	sbc	r3, r1
    f5d2:	26 0c       	add	r2, r6
    f5d4:	37 1c       	adc	r3, r7
    f5d6:	f1 01       	movw	r30, r2
    f5d8:	84 91       	lpm	r24, Z
    f5da:	cf 54       	subi	r28, 0x4F	; 79
    f5dc:	df 4f       	sbci	r29, 0xFF	; 255
    f5de:	68 81       	ld	r22, Y
    f5e0:	c1 5b       	subi	r28, 0xB1	; 177
    f5e2:	d0 40       	sbci	r29, 0x00	; 0
    f5e4:	70 e0       	ldi	r23, 0x00	; 0
    f5e6:	49 2d       	mov	r20, r9
    f5e8:	90 e0       	ldi	r25, 0x00	; 0
    f5ea:	f9 01       	movw	r30, r18
    f5ec:	19 95       	eicall
    f5ee:	88 23       	and	r24, r24
    f5f0:	09 f4       	brne	.+2      	; 0xf5f4 <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0x44a>
    f5f2:	b4 c0       	rjmp	.+360    	; 0xf75c <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0x5b2>
    f5f4:	f2 01       	movw	r30, r4
    f5f6:	31 97       	sbiw	r30, 0x01	; 1
    f5f8:	e6 0d       	add	r30, r6
    f5fa:	f7 1d       	adc	r31, r7
    f5fc:	84 91       	lpm	r24, Z
    f5fe:	c3 53       	subi	r28, 0x33	; 51
    f600:	df 4f       	sbci	r29, 0xFF	; 255
    f602:	68 81       	ld	r22, Y
    f604:	cd 5c       	subi	r28, 0xCD	; 205
    f606:	d0 40       	sbci	r29, 0x00	; 0
    f608:	0e 94 f0 52 	call	0xa5e0	; 0xa5e0 <enable_redraw(unsigned char, unsigned char)>
    f60c:	88 23       	and	r24, r24
    f60e:	09 f4       	brne	.+2      	; 0xf612 <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0x468>
    f610:	43 c0       	rjmp	.+134    	; 0xf698 <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0x4ee>
    f612:	f2 01       	movw	r30, r4
    f614:	3f 97       	sbiw	r30, 0x0f	; 15
    f616:	e6 0d       	add	r30, r6
    f618:	f7 1d       	adc	r31, r7
    f61a:	65 91       	lpm	r22, Z+
    f61c:	74 91       	lpm	r23, Z
    f61e:	ce 01       	movw	r24, r28
    f620:	8f 57       	subi	r24, 0x7F	; 127
    f622:	9f 4f       	sbci	r25, 0xFF	; 255
    f624:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    f628:	19 82       	std	Y+1, r1	; 0x01
    f62a:	f2 01       	movw	r30, r4
    f62c:	35 97       	sbiw	r30, 0x05	; 5
    f62e:	e6 0d       	add	r30, r6
    f630:	f7 1d       	adc	r31, r7
    f632:	e4 90       	lpm	r14, Z
    f634:	04 91       	lpm	r16, Z
    f636:	f2 01       	movw	r30, r4
    f638:	37 97       	sbiw	r30, 0x07	; 7
    f63a:	e6 0d       	add	r30, r6
    f63c:	f7 1d       	adc	r31, r7
    f63e:	25 91       	lpm	r18, Z+
    f640:	34 91       	lpm	r19, Z
    f642:	f2 01       	movw	r30, r4
    f644:	39 97       	sbiw	r30, 0x09	; 9
    f646:	e6 0d       	add	r30, r6
    f648:	f7 1d       	adc	r31, r7
    f64a:	45 91       	lpm	r20, Z+
    f64c:	54 91       	lpm	r21, Z
    f64e:	f2 01       	movw	r30, r4
    f650:	3b 97       	sbiw	r30, 0x0b	; 11
    f652:	e6 0d       	add	r30, r6
    f654:	f7 1d       	adc	r31, r7
    f656:	65 91       	lpm	r22, Z+
    f658:	74 91       	lpm	r23, Z
    f65a:	f2 01       	movw	r30, r4
    f65c:	3d 97       	sbiw	r30, 0x0d	; 13
    f65e:	e6 0d       	add	r30, r6
    f660:	f7 1d       	adc	r31, r7
    f662:	85 91       	lpm	r24, Z+
    f664:	94 91       	lpm	r25, Z
    f666:	c8 54       	subi	r28, 0x48	; 72
    f668:	df 4f       	sbci	r29, 0xFF	; 255
    f66a:	e8 81       	ld	r30, Y
    f66c:	f9 81       	ldd	r31, Y+1	; 0x01
    f66e:	c8 5b       	subi	r28, 0xB8	; 184
    f670:	d0 40       	sbci	r29, 0x00	; 0
    f672:	6e 0f       	add	r22, r30
    f674:	7f 1f       	adc	r23, r31
    f676:	81 2c       	mov	r8, r1
    f678:	fe 01       	movw	r30, r28
    f67a:	31 96       	adiw	r30, 0x01	; 1
    f67c:	5f 01       	movw	r10, r30
    f67e:	e0 58       	subi	r30, 0x80	; 128
    f680:	ff 4f       	sbci	r31, 0xFF	; 255
    f682:	6f 01       	movw	r12, r30
    f684:	ca 54       	subi	r28, 0x4A	; 74
    f686:	df 4f       	sbci	r29, 0xFF	; 255
    f688:	e8 81       	ld	r30, Y
    f68a:	f9 81       	ldd	r31, Y+1	; 0x01
    f68c:	c6 5b       	subi	r28, 0xB6	; 182
    f68e:	d0 40       	sbci	r29, 0x00	; 0
    f690:	8e 0f       	add	r24, r30
    f692:	9f 1f       	adc	r25, r31
    f694:	0e 94 35 75 	call	0xea6a	; 0xea6a <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)>
    f698:	cb 53       	subi	r28, 0x3B	; 59
    f69a:	df 4f       	sbci	r29, 0xFF	; 255
    f69c:	28 81       	ld	r18, Y
    f69e:	39 81       	ldd	r19, Y+1	; 0x01
    f6a0:	c5 5c       	subi	r28, 0xC5	; 197
    f6a2:	d0 40       	sbci	r29, 0x00	; 0
    f6a4:	23 2b       	or	r18, r19
    f6a6:	09 f4       	brne	.+2      	; 0xf6aa <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0x500>
    f6a8:	59 c0       	rjmp	.+178    	; 0xf75c <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0x5b2>
    f6aa:	c9 53       	subi	r28, 0x39	; 57
    f6ac:	df 4f       	sbci	r29, 0xFF	; 255
    f6ae:	48 81       	ld	r20, Y
    f6b0:	59 81       	ldd	r21, Y+1	; 0x01
    f6b2:	c7 5c       	subi	r28, 0xC7	; 199
    f6b4:	d0 40       	sbci	r29, 0x00	; 0
    f6b6:	45 2b       	or	r20, r21
    f6b8:	09 f4       	brne	.+2      	; 0xf6bc <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0x512>
    f6ba:	50 c0       	rjmp	.+160    	; 0xf75c <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0x5b2>
    f6bc:	f2 01       	movw	r30, r4
    f6be:	37 97       	sbiw	r30, 0x07	; 7
    f6c0:	e6 0d       	add	r30, r6
    f6c2:	f7 1d       	adc	r31, r7
    f6c4:	25 91       	lpm	r18, Z+
    f6c6:	34 91       	lpm	r19, Z
    f6c8:	f2 01       	movw	r30, r4
    f6ca:	39 97       	sbiw	r30, 0x09	; 9
    f6cc:	e6 0d       	add	r30, r6
    f6ce:	f7 1d       	adc	r31, r7
    f6d0:	45 91       	lpm	r20, Z+
    f6d2:	54 91       	lpm	r21, Z
    f6d4:	f2 01       	movw	r30, r4
    f6d6:	3b 97       	sbiw	r30, 0x0b	; 11
    f6d8:	e6 0d       	add	r30, r6
    f6da:	f7 1d       	adc	r31, r7
    f6dc:	65 91       	lpm	r22, Z+
    f6de:	74 91       	lpm	r23, Z
    f6e0:	f2 01       	movw	r30, r4
    f6e2:	3d 97       	sbiw	r30, 0x0d	; 13
    f6e4:	e6 0d       	add	r30, r6
    f6e6:	f7 1d       	adc	r31, r7
    f6e8:	85 91       	lpm	r24, Z+
    f6ea:	94 91       	lpm	r25, Z
    f6ec:	c8 54       	subi	r28, 0x48	; 72
    f6ee:	df 4f       	sbci	r29, 0xFF	; 255
    f6f0:	e8 81       	ld	r30, Y
    f6f2:	f9 81       	ldd	r31, Y+1	; 0x01
    f6f4:	c8 5b       	subi	r28, 0xB8	; 184
    f6f6:	d0 40       	sbci	r29, 0x00	; 0
    f6f8:	6e 0f       	add	r22, r30
    f6fa:	7f 1f       	adc	r23, r31
    f6fc:	c9 53       	subi	r28, 0x39	; 57
    f6fe:	df 4f       	sbci	r29, 0xFF	; 255
    f700:	e8 80       	ld	r14, Y
    f702:	f9 80       	ldd	r15, Y+1	; 0x01
    f704:	c7 5c       	subi	r28, 0xC7	; 199
    f706:	d0 40       	sbci	r29, 0x00	; 0
    f708:	cb 53       	subi	r28, 0x3B	; 59
    f70a:	df 4f       	sbci	r29, 0xFF	; 255
    f70c:	08 81       	ld	r16, Y
    f70e:	19 81       	ldd	r17, Y+1	; 0x01
    f710:	c5 5c       	subi	r28, 0xC5	; 197
    f712:	d0 40       	sbci	r29, 0x00	; 0
    f714:	ca 54       	subi	r28, 0x4A	; 74
    f716:	df 4f       	sbci	r29, 0xFF	; 255
    f718:	e8 81       	ld	r30, Y
    f71a:	f9 81       	ldd	r31, Y+1	; 0x01
    f71c:	c6 5b       	subi	r28, 0xB6	; 182
    f71e:	d0 40       	sbci	r29, 0x00	; 0
    f720:	8e 0f       	add	r24, r30
    f722:	9f 1f       	adc	r25, r31
    f724:	0e 94 ba 78 	call	0xf174	; 0xf174 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    f728:	18 2f       	mov	r17, r24
    f72a:	88 23       	and	r24, r24
    f72c:	b9 f0       	breq	.+46     	; 0xf75c <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0x5b2>
    f72e:	f2 01       	movw	r30, r4
    f730:	33 97       	sbiw	r30, 0x03	; 3
    f732:	e6 0d       	add	r30, r6
    f734:	f7 1d       	adc	r31, r7
    f736:	25 91       	lpm	r18, Z+
    f738:	34 91       	lpm	r19, Z
    f73a:	f1 01       	movw	r30, r2
    f73c:	84 91       	lpm	r24, Z
    f73e:	cf 54       	subi	r28, 0x4F	; 79
    f740:	df 4f       	sbci	r29, 0xFF	; 255
    f742:	68 81       	ld	r22, Y
    f744:	c1 5b       	subi	r28, 0xB1	; 177
    f746:	d0 40       	sbci	r29, 0x00	; 0
    f748:	70 e0       	ldi	r23, 0x00	; 0
    f74a:	49 2d       	mov	r20, r9
    f74c:	90 e0       	ldi	r25, 0x00	; 0
    f74e:	f9 01       	movw	r30, r18
    f750:	19 95       	eicall
    f752:	ce 53       	subi	r28, 0x3E	; 62
    f754:	df 4f       	sbci	r29, 0xFF	; 255
    f756:	18 83       	st	Y, r17
    f758:	c2 5c       	subi	r28, 0xC2	; 194
    f75a:	d0 40       	sbci	r29, 0x00	; 0
    f75c:	93 94       	inc	r9
    f75e:	1d cf       	rjmp	.-454    	; 0xf59a <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0x3f0>
    f760:	ce 53       	subi	r28, 0x3E	; 62
    f762:	df 4f       	sbci	r29, 0xFF	; 255
    f764:	f8 81       	ld	r31, Y
    f766:	c2 5c       	subi	r28, 0xC2	; 194
    f768:	d0 40       	sbci	r29, 0x00	; 0
    f76a:	f1 11       	cpse	r31, r1
    f76c:	0c 94 14 8a 	jmp	0x11428	; 0x11428 <__EEPROM_REGION_LENGTH__+0x1428>
    f770:	91 2c       	mov	r9, r1
    f772:	93 01       	movw	r18, r6
    f774:	2b 52       	subi	r18, 0x2B	; 43
    f776:	3d 4f       	sbci	r19, 0xFD	; 253
    f778:	c0 54       	subi	r28, 0x40	; 64
    f77a:	df 4f       	sbci	r29, 0xFF	; 255
    f77c:	39 83       	std	Y+1, r19	; 0x01
    f77e:	28 83       	st	Y, r18
    f780:	c0 5c       	subi	r28, 0xC0	; 192
    f782:	d0 40       	sbci	r29, 0x00	; 0
    f784:	1e 01       	movw	r2, r28
    f786:	31 e8       	ldi	r19, 0x81	; 129
    f788:	23 0e       	add	r2, r19
    f78a:	31 1c       	adc	r3, r1
    f78c:	c0 54       	subi	r28, 0x40	; 64
    f78e:	df 4f       	sbci	r29, 0xFF	; 255
    f790:	e8 81       	ld	r30, Y
    f792:	f9 81       	ldd	r31, Y+1	; 0x01
    f794:	c0 5c       	subi	r28, 0xC0	; 192
    f796:	d0 40       	sbci	r29, 0x00	; 0
    f798:	84 91       	lpm	r24, Z
    f79a:	98 16       	cp	r9, r24
    f79c:	08 f0       	brcs	.+2      	; 0xf7a0 <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0x5f6>
    f79e:	26 c1       	rjmp	.+588    	; 0xf9ec <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0x842>
    f7a0:	f7 e1       	ldi	r31, 0x17	; 23
    f7a2:	9f 9e       	mul	r9, r31
    f7a4:	20 01       	movw	r4, r0
    f7a6:	11 24       	eor	r1, r1
    f7a8:	f2 01       	movw	r30, r4
    f7aa:	ef 53       	subi	r30, 0x3F	; 63
    f7ac:	ff 4f       	sbci	r31, 0xFF	; 255
    f7ae:	e6 0d       	add	r30, r6
    f7b0:	f7 1d       	adc	r31, r7
    f7b2:	25 91       	lpm	r18, Z+
    f7b4:	34 91       	lpm	r19, Z
    f7b6:	c2 01       	movw	r24, r4
    f7b8:	85 54       	subi	r24, 0x45	; 69
    f7ba:	9f 4f       	sbci	r25, 0xFF	; 255
    f7bc:	a3 01       	movw	r20, r6
    f7be:	48 0f       	add	r20, r24
    f7c0:	59 1f       	adc	r21, r25
    f7c2:	c6 54       	subi	r28, 0x46	; 70
    f7c4:	df 4f       	sbci	r29, 0xFF	; 255
    f7c6:	59 83       	std	Y+1, r21	; 0x01
    f7c8:	48 83       	st	Y, r20
    f7ca:	ca 5b       	subi	r28, 0xBA	; 186
    f7cc:	d0 40       	sbci	r29, 0x00	; 0
    f7ce:	fa 01       	movw	r30, r20
    f7d0:	84 91       	lpm	r24, Z
    f7d2:	cf 54       	subi	r28, 0x4F	; 79
    f7d4:	df 4f       	sbci	r29, 0xFF	; 255
    f7d6:	68 81       	ld	r22, Y
    f7d8:	c1 5b       	subi	r28, 0xB1	; 177
    f7da:	d0 40       	sbci	r29, 0x00	; 0
    f7dc:	70 e0       	ldi	r23, 0x00	; 0
    f7de:	49 2d       	mov	r20, r9
    f7e0:	90 e0       	ldi	r25, 0x00	; 0
    f7e2:	f9 01       	movw	r30, r18
    f7e4:	19 95       	eicall
    f7e6:	88 23       	and	r24, r24
    f7e8:	09 f4       	brne	.+2      	; 0xf7ec <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0x642>
    f7ea:	fe c0       	rjmp	.+508    	; 0xf9e8 <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0x83e>
    f7ec:	f2 01       	movw	r30, r4
    f7ee:	e0 54       	subi	r30, 0x40	; 64
    f7f0:	ff 4f       	sbci	r31, 0xFF	; 255
    f7f2:	e6 0d       	add	r30, r6
    f7f4:	f7 1d       	adc	r31, r7
    f7f6:	84 91       	lpm	r24, Z
    f7f8:	c3 53       	subi	r28, 0x33	; 51
    f7fa:	df 4f       	sbci	r29, 0xFF	; 255
    f7fc:	68 81       	ld	r22, Y
    f7fe:	cd 5c       	subi	r28, 0xCD	; 205
    f800:	d0 40       	sbci	r29, 0x00	; 0
    f802:	0e 94 f0 52 	call	0xa5e0	; 0xa5e0 <enable_redraw(unsigned char, unsigned char)>
    f806:	88 23       	and	r24, r24
    f808:	09 f4       	brne	.+2      	; 0xf80c <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0x662>
    f80a:	82 c0       	rjmp	.+260    	; 0xf910 <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0x766>
    f80c:	f2 01       	movw	r30, r4
    f80e:	e4 55       	subi	r30, 0x54	; 84
    f810:	ff 4f       	sbci	r31, 0xFF	; 255
    f812:	e6 0d       	add	r30, r6
    f814:	f7 1d       	adc	r31, r7
    f816:	65 91       	lpm	r22, Z+
    f818:	74 91       	lpm	r23, Z
    f81a:	c1 01       	movw	r24, r2
    f81c:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    f820:	f2 01       	movw	r30, r4
    f822:	e2 54       	subi	r30, 0x42	; 66
    f824:	ff 4f       	sbci	r31, 0xFF	; 255
    f826:	e6 0d       	add	r30, r6
    f828:	f7 1d       	adc	r31, r7
    f82a:	25 91       	lpm	r18, Z+
    f82c:	34 91       	lpm	r19, Z
    f82e:	c6 54       	subi	r28, 0x46	; 70
    f830:	df 4f       	sbci	r29, 0xFF	; 255
    f832:	e8 81       	ld	r30, Y
    f834:	f9 81       	ldd	r31, Y+1	; 0x01
    f836:	ca 5b       	subi	r28, 0xBA	; 186
    f838:	d0 40       	sbci	r29, 0x00	; 0
    f83a:	84 91       	lpm	r24, Z
    f83c:	cf 54       	subi	r28, 0x4F	; 79
    f83e:	df 4f       	sbci	r29, 0xFF	; 255
    f840:	68 81       	ld	r22, Y
    f842:	c1 5b       	subi	r28, 0xB1	; 177
    f844:	d0 40       	sbci	r29, 0x00	; 0
    f846:	70 e0       	ldi	r23, 0x00	; 0
    f848:	49 2d       	mov	r20, r9
    f84a:	90 e0       	ldi	r25, 0x00	; 0
    f84c:	f9 01       	movw	r30, r18
    f84e:	19 95       	eicall
    f850:	88 2e       	mov	r8, r24
    f852:	60 e2       	ldi	r22, 0x20	; 32
    f854:	c3 53       	subi	r28, 0x33	; 51
    f856:	df 4f       	sbci	r29, 0xFF	; 255
    f858:	88 81       	ld	r24, Y
    f85a:	cd 5c       	subi	r28, 0xCD	; 205
    f85c:	d0 40       	sbci	r29, 0x00	; 0
    f85e:	0e 94 f0 52 	call	0xa5e0	; 0xa5e0 <enable_redraw(unsigned char, unsigned char)>
    f862:	88 23       	and	r24, r24
    f864:	21 f0       	breq	.+8      	; 0xf86e <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0x6c4>
    f866:	f2 e0       	ldi	r31, 0x02	; 2
    f868:	8f 12       	cpse	r8, r31
    f86a:	01 c0       	rjmp	.+2      	; 0xf86e <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0x6c4>
    f86c:	81 2c       	mov	r8, r1
    f86e:	19 82       	std	Y+1, r1	; 0x01
    f870:	f2 01       	movw	r30, r4
    f872:	e7 54       	subi	r30, 0x47	; 71
    f874:	ff 4f       	sbci	r31, 0xFF	; 255
    f876:	e6 0d       	add	r30, r6
    f878:	f7 1d       	adc	r31, r7
    f87a:	a5 90       	lpm	r10, Z+
    f87c:	b4 90       	lpm	r11, Z
    f87e:	f2 01       	movw	r30, r4
    f880:	e9 54       	subi	r30, 0x49	; 73
    f882:	ff 4f       	sbci	r31, 0xFF	; 255
    f884:	e6 0d       	add	r30, r6
    f886:	f7 1d       	adc	r31, r7
    f888:	c5 90       	lpm	r12, Z+
    f88a:	d4 90       	lpm	r13, Z
    f88c:	82 01       	movw	r16, r4
    f88e:	0a 54       	subi	r16, 0x4A	; 74
    f890:	1f 4f       	sbci	r17, 0xFF	; 255
    f892:	06 0d       	add	r16, r6
    f894:	17 1d       	adc	r17, r7
    f896:	f8 01       	movw	r30, r16
    f898:	04 91       	lpm	r16, Z
    f89a:	f2 01       	movw	r30, r4
    f89c:	ec 54       	subi	r30, 0x4C	; 76
    f89e:	ff 4f       	sbci	r31, 0xFF	; 255
    f8a0:	e6 0d       	add	r30, r6
    f8a2:	f7 1d       	adc	r31, r7
    f8a4:	25 91       	lpm	r18, Z+
    f8a6:	34 91       	lpm	r19, Z
    f8a8:	f2 01       	movw	r30, r4
    f8aa:	ee 54       	subi	r30, 0x4E	; 78
    f8ac:	ff 4f       	sbci	r31, 0xFF	; 255
    f8ae:	e6 0d       	add	r30, r6
    f8b0:	f7 1d       	adc	r31, r7
    f8b2:	45 91       	lpm	r20, Z+
    f8b4:	54 91       	lpm	r21, Z
    f8b6:	f2 01       	movw	r30, r4
    f8b8:	e0 55       	subi	r30, 0x50	; 80
    f8ba:	ff 4f       	sbci	r31, 0xFF	; 255
    f8bc:	e6 0d       	add	r30, r6
    f8be:	f7 1d       	adc	r31, r7
    f8c0:	65 91       	lpm	r22, Z+
    f8c2:	74 91       	lpm	r23, Z
    f8c4:	f2 01       	movw	r30, r4
    f8c6:	e2 55       	subi	r30, 0x52	; 82
    f8c8:	ff 4f       	sbci	r31, 0xFF	; 255
    f8ca:	e6 0d       	add	r30, r6
    f8cc:	f7 1d       	adc	r31, r7
    f8ce:	85 91       	lpm	r24, Z+
    f8d0:	94 91       	lpm	r25, Z
    f8d2:	c8 54       	subi	r28, 0x48	; 72
    f8d4:	df 4f       	sbci	r29, 0xFF	; 255
    f8d6:	e8 81       	ld	r30, Y
    f8d8:	f9 81       	ldd	r31, Y+1	; 0x01
    f8da:	c8 5b       	subi	r28, 0xB8	; 184
    f8dc:	d0 40       	sbci	r29, 0x00	; 0
    f8de:	6e 0f       	add	r22, r30
    f8e0:	7f 1f       	adc	r23, r31
    f8e2:	e1 e0       	ldi	r30, 0x01	; 1
    f8e4:	f0 e0       	ldi	r31, 0x00	; 0
    f8e6:	ec 0f       	add	r30, r28
    f8e8:	fd 1f       	adc	r31, r29
    f8ea:	ff 93       	push	r31
    f8ec:	ef 93       	push	r30
    f8ee:	3f 92       	push	r3
    f8f0:	2f 92       	push	r2
    f8f2:	e1 2c       	mov	r14, r1
    f8f4:	ca 54       	subi	r28, 0x4A	; 74
    f8f6:	df 4f       	sbci	r29, 0xFF	; 255
    f8f8:	e8 81       	ld	r30, Y
    f8fa:	f9 81       	ldd	r31, Y+1	; 0x01
    f8fc:	c6 5b       	subi	r28, 0xB6	; 182
    f8fe:	d0 40       	sbci	r29, 0x00	; 0
    f900:	8e 0f       	add	r24, r30
    f902:	9f 1f       	adc	r25, r31
    f904:	0e 94 31 76 	call	0xec62	; 0xec62 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)>
    f908:	0f 90       	pop	r0
    f90a:	0f 90       	pop	r0
    f90c:	0f 90       	pop	r0
    f90e:	0f 90       	pop	r0
    f910:	cb 53       	subi	r28, 0x3B	; 59
    f912:	df 4f       	sbci	r29, 0xFF	; 255
    f914:	28 81       	ld	r18, Y
    f916:	39 81       	ldd	r19, Y+1	; 0x01
    f918:	c5 5c       	subi	r28, 0xC5	; 197
    f91a:	d0 40       	sbci	r29, 0x00	; 0
    f91c:	23 2b       	or	r18, r19
    f91e:	09 f4       	brne	.+2      	; 0xf922 <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0x778>
    f920:	63 c0       	rjmp	.+198    	; 0xf9e8 <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0x83e>
    f922:	c9 53       	subi	r28, 0x39	; 57
    f924:	df 4f       	sbci	r29, 0xFF	; 255
    f926:	48 81       	ld	r20, Y
    f928:	59 81       	ldd	r21, Y+1	; 0x01
    f92a:	c7 5c       	subi	r28, 0xC7	; 199
    f92c:	d0 40       	sbci	r29, 0x00	; 0
    f92e:	45 2b       	or	r20, r21
    f930:	09 f4       	brne	.+2      	; 0xf934 <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0x78a>
    f932:	5a c0       	rjmp	.+180    	; 0xf9e8 <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0x83e>
    f934:	f2 01       	movw	r30, r4
    f936:	ec 54       	subi	r30, 0x4C	; 76
    f938:	ff 4f       	sbci	r31, 0xFF	; 255
    f93a:	e6 0d       	add	r30, r6
    f93c:	f7 1d       	adc	r31, r7
    f93e:	25 91       	lpm	r18, Z+
    f940:	34 91       	lpm	r19, Z
    f942:	f2 01       	movw	r30, r4
    f944:	ee 54       	subi	r30, 0x4E	; 78
    f946:	ff 4f       	sbci	r31, 0xFF	; 255
    f948:	e6 0d       	add	r30, r6
    f94a:	f7 1d       	adc	r31, r7
    f94c:	45 91       	lpm	r20, Z+
    f94e:	54 91       	lpm	r21, Z
    f950:	f2 01       	movw	r30, r4
    f952:	e0 55       	subi	r30, 0x50	; 80
    f954:	ff 4f       	sbci	r31, 0xFF	; 255
    f956:	e6 0d       	add	r30, r6
    f958:	f7 1d       	adc	r31, r7
    f95a:	65 91       	lpm	r22, Z+
    f95c:	74 91       	lpm	r23, Z
    f95e:	f2 01       	movw	r30, r4
    f960:	e2 55       	subi	r30, 0x52	; 82
    f962:	ff 4f       	sbci	r31, 0xFF	; 255
    f964:	e6 0d       	add	r30, r6
    f966:	f7 1d       	adc	r31, r7
    f968:	85 91       	lpm	r24, Z+
    f96a:	94 91       	lpm	r25, Z
    f96c:	c8 54       	subi	r28, 0x48	; 72
    f96e:	df 4f       	sbci	r29, 0xFF	; 255
    f970:	e8 81       	ld	r30, Y
    f972:	f9 81       	ldd	r31, Y+1	; 0x01
    f974:	c8 5b       	subi	r28, 0xB8	; 184
    f976:	d0 40       	sbci	r29, 0x00	; 0
    f978:	6e 0f       	add	r22, r30
    f97a:	7f 1f       	adc	r23, r31
    f97c:	c9 53       	subi	r28, 0x39	; 57
    f97e:	df 4f       	sbci	r29, 0xFF	; 255
    f980:	e8 80       	ld	r14, Y
    f982:	f9 80       	ldd	r15, Y+1	; 0x01
    f984:	c7 5c       	subi	r28, 0xC7	; 199
    f986:	d0 40       	sbci	r29, 0x00	; 0
    f988:	cb 53       	subi	r28, 0x3B	; 59
    f98a:	df 4f       	sbci	r29, 0xFF	; 255
    f98c:	08 81       	ld	r16, Y
    f98e:	19 81       	ldd	r17, Y+1	; 0x01
    f990:	c5 5c       	subi	r28, 0xC5	; 197
    f992:	d0 40       	sbci	r29, 0x00	; 0
    f994:	ca 54       	subi	r28, 0x4A	; 74
    f996:	df 4f       	sbci	r29, 0xFF	; 255
    f998:	e8 81       	ld	r30, Y
    f99a:	f9 81       	ldd	r31, Y+1	; 0x01
    f99c:	c6 5b       	subi	r28, 0xB6	; 182
    f99e:	d0 40       	sbci	r29, 0x00	; 0
    f9a0:	8e 0f       	add	r24, r30
    f9a2:	9f 1f       	adc	r25, r31
    f9a4:	0e 94 ba 78 	call	0xf174	; 0xf174 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    f9a8:	18 2f       	mov	r17, r24
    f9aa:	88 23       	and	r24, r24
    f9ac:	e9 f0       	breq	.+58     	; 0xf9e8 <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0x83e>
    f9ae:	f2 01       	movw	r30, r4
    f9b0:	e4 54       	subi	r30, 0x44	; 68
    f9b2:	ff 4f       	sbci	r31, 0xFF	; 255
    f9b4:	e6 0d       	add	r30, r6
    f9b6:	f7 1d       	adc	r31, r7
    f9b8:	25 91       	lpm	r18, Z+
    f9ba:	34 91       	lpm	r19, Z
    f9bc:	c6 54       	subi	r28, 0x46	; 70
    f9be:	df 4f       	sbci	r29, 0xFF	; 255
    f9c0:	e8 81       	ld	r30, Y
    f9c2:	f9 81       	ldd	r31, Y+1	; 0x01
    f9c4:	ca 5b       	subi	r28, 0xBA	; 186
    f9c6:	d0 40       	sbci	r29, 0x00	; 0
    f9c8:	84 91       	lpm	r24, Z
    f9ca:	cf 54       	subi	r28, 0x4F	; 79
    f9cc:	df 4f       	sbci	r29, 0xFF	; 255
    f9ce:	68 81       	ld	r22, Y
    f9d0:	c1 5b       	subi	r28, 0xB1	; 177
    f9d2:	d0 40       	sbci	r29, 0x00	; 0
    f9d4:	70 e0       	ldi	r23, 0x00	; 0
    f9d6:	49 2d       	mov	r20, r9
    f9d8:	90 e0       	ldi	r25, 0x00	; 0
    f9da:	f9 01       	movw	r30, r18
    f9dc:	19 95       	eicall
    f9de:	ce 53       	subi	r28, 0x3E	; 62
    f9e0:	df 4f       	sbci	r29, 0xFF	; 255
    f9e2:	18 83       	st	Y, r17
    f9e4:	c2 5c       	subi	r28, 0xC2	; 194
    f9e6:	d0 40       	sbci	r29, 0x00	; 0
    f9e8:	93 94       	inc	r9
    f9ea:	d0 ce       	rjmp	.-608    	; 0xf78c <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0x5e2>
    f9ec:	ce 53       	subi	r28, 0x3E	; 62
    f9ee:	df 4f       	sbci	r29, 0xFF	; 255
    f9f0:	f8 81       	ld	r31, Y
    f9f2:	c2 5c       	subi	r28, 0xC2	; 194
    f9f4:	d0 40       	sbci	r29, 0x00	; 0
    f9f6:	f1 11       	cpse	r31, r1
    f9f8:	0c 94 14 8a 	jmp	0x11428	; 0x11428 <__EEPROM_REGION_LENGTH__+0x1428>
    f9fc:	31 2c       	mov	r3, r1
    f9fe:	23 01       	movw	r4, r6
    fa00:	29 e2       	ldi	r18, 0x29	; 41
    fa02:	42 1a       	sub	r4, r18
    fa04:	2d ef       	ldi	r18, 0xFD	; 253
    fa06:	52 0a       	sbc	r5, r18
    fa08:	87 e1       	ldi	r24, 0x17	; 23
    fa0a:	28 2e       	mov	r2, r24
    fa0c:	f2 01       	movw	r30, r4
    fa0e:	84 91       	lpm	r24, Z
    fa10:	38 16       	cp	r3, r24
    fa12:	08 f0       	brcs	.+2      	; 0xfa16 <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0x86c>
    fa14:	fc c0       	rjmp	.+504    	; 0xfc0e <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0xa64>
    fa16:	32 9c       	mul	r3, r2
    fa18:	40 01       	movw	r8, r0
    fa1a:	11 24       	eor	r1, r1
    fa1c:	f4 01       	movw	r30, r8
    fa1e:	ec 56       	subi	r30, 0x6C	; 108
    fa20:	fe 4f       	sbci	r31, 0xFE	; 254
    fa22:	e6 0d       	add	r30, r6
    fa24:	f7 1d       	adc	r31, r7
    fa26:	84 91       	lpm	r24, Z
    fa28:	c3 53       	subi	r28, 0x33	; 51
    fa2a:	df 4f       	sbci	r29, 0xFF	; 255
    fa2c:	68 81       	ld	r22, Y
    fa2e:	cd 5c       	subi	r28, 0xCD	; 205
    fa30:	d0 40       	sbci	r29, 0x00	; 0
    fa32:	0e 94 f0 52 	call	0xa5e0	; 0xa5e0 <enable_redraw(unsigned char, unsigned char)>
    fa36:	88 23       	and	r24, r24
    fa38:	09 f4       	brne	.+2      	; 0xfa3c <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0x892>
    fa3a:	7c c0       	rjmp	.+248    	; 0xfb34 <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0x98a>
    fa3c:	f4 01       	movw	r30, r8
    fa3e:	e2 58       	subi	r30, 0x82	; 130
    fa40:	fe 4f       	sbci	r31, 0xFE	; 254
    fa42:	e6 0d       	add	r30, r6
    fa44:	f7 1d       	adc	r31, r7
    fa46:	65 91       	lpm	r22, Z+
    fa48:	74 91       	lpm	r23, Z
    fa4a:	ce 01       	movw	r24, r28
    fa4c:	8f 57       	subi	r24, 0x7F	; 127
    fa4e:	9f 4f       	sbci	r25, 0xFF	; 255
    fa50:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
    fa54:	f4 01       	movw	r30, r8
    fa56:	e0 57       	subi	r30, 0x70	; 112
    fa58:	fe 4f       	sbci	r31, 0xFE	; 254
    fa5a:	e6 0d       	add	r30, r6
    fa5c:	f7 1d       	adc	r31, r7
    fa5e:	25 91       	lpm	r18, Z+
    fa60:	34 91       	lpm	r19, Z
    fa62:	f4 01       	movw	r30, r8
    fa64:	ee 56       	subi	r30, 0x6E	; 110
    fa66:	fe 4f       	sbci	r31, 0xFE	; 254
    fa68:	e6 0d       	add	r30, r6
    fa6a:	f7 1d       	adc	r31, r7
    fa6c:	c5 90       	lpm	r12, Z+
    fa6e:	d4 90       	lpm	r13, Z
    fa70:	84 01       	movw	r16, r8
    fa72:	03 57       	subi	r16, 0x73	; 115
    fa74:	1e 4f       	sbci	r17, 0xFE	; 254
    fa76:	06 0d       	add	r16, r6
    fa78:	17 1d       	adc	r17, r7
    fa7a:	f8 01       	movw	r30, r16
    fa7c:	84 91       	lpm	r24, Z
    fa7e:	cf 54       	subi	r28, 0x4F	; 79
    fa80:	df 4f       	sbci	r29, 0xFF	; 255
    fa82:	68 81       	ld	r22, Y
    fa84:	c1 5b       	subi	r28, 0xB1	; 177
    fa86:	d0 40       	sbci	r29, 0x00	; 0
    fa88:	70 e0       	ldi	r23, 0x00	; 0
    fa8a:	43 2d       	mov	r20, r3
    fa8c:	90 e0       	ldi	r25, 0x00	; 0
    fa8e:	f9 01       	movw	r30, r18
    fa90:	19 95       	eicall
    fa92:	e8 2e       	mov	r14, r24
    fa94:	cf 55       	subi	r28, 0x5F	; 95
    fa96:	df 4f       	sbci	r29, 0xFF	; 255
    fa98:	18 82       	st	Y, r1
    fa9a:	c1 5a       	subi	r28, 0xA1	; 161
    fa9c:	d0 40       	sbci	r29, 0x00	; 0
    fa9e:	f8 01       	movw	r30, r16
    faa0:	44 91       	lpm	r20, Z
    faa2:	84 91       	lpm	r24, Z
    faa4:	8e 01       	movw	r16, r28
    faa6:	0f 55       	subi	r16, 0x5F	; 95
    faa8:	1f 4f       	sbci	r17, 0xFF	; 255
    faaa:	9e 01       	movw	r18, r28
    faac:	2f 5f       	subi	r18, 0xFF	; 255
    faae:	3f 4f       	sbci	r19, 0xFF	; 255
    fab0:	cf 54       	subi	r28, 0x4F	; 79
    fab2:	df 4f       	sbci	r29, 0xFF	; 255
    fab4:	68 81       	ld	r22, Y
    fab6:	c1 5b       	subi	r28, 0xB1	; 177
    fab8:	d0 40       	sbci	r29, 0x00	; 0
    faba:	f6 01       	movw	r30, r12
    fabc:	19 95       	eicall
    fabe:	f4 01       	movw	r30, r8
    fac0:	e8 57       	subi	r30, 0x78	; 120
    fac2:	fe 4f       	sbci	r31, 0xFE	; 254
    fac4:	e6 0d       	add	r30, r6
    fac6:	f7 1d       	adc	r31, r7
    fac8:	05 91       	lpm	r16, Z+
    faca:	14 91       	lpm	r17, Z
    facc:	f4 01       	movw	r30, r8
    face:	ea 57       	subi	r30, 0x7A	; 122
    fad0:	fe 4f       	sbci	r31, 0xFE	; 254
    fad2:	e6 0d       	add	r30, r6
    fad4:	f7 1d       	adc	r31, r7
    fad6:	25 91       	lpm	r18, Z+
    fad8:	34 91       	lpm	r19, Z
    fada:	f4 01       	movw	r30, r8
    fadc:	ec 57       	subi	r30, 0x7C	; 124
    fade:	fe 4f       	sbci	r31, 0xFE	; 254
    fae0:	e6 0d       	add	r30, r6
    fae2:	f7 1d       	adc	r31, r7
    fae4:	45 91       	lpm	r20, Z+
    fae6:	54 91       	lpm	r21, Z
    fae8:	f4 01       	movw	r30, r8
    faea:	ee 57       	subi	r30, 0x7E	; 126
    faec:	fe 4f       	sbci	r31, 0xFE	; 254
    faee:	e6 0d       	add	r30, r6
    faf0:	f7 1d       	adc	r31, r7
    faf2:	65 91       	lpm	r22, Z+
    faf4:	74 91       	lpm	r23, Z
    faf6:	f4 01       	movw	r30, r8
    faf8:	e0 58       	subi	r30, 0x80	; 128
    fafa:	fe 4f       	sbci	r31, 0xFE	; 254
    fafc:	e6 0d       	add	r30, r6
    fafe:	f7 1d       	adc	r31, r7
    fb00:	85 91       	lpm	r24, Z+
    fb02:	94 91       	lpm	r25, Z
    fb04:	c8 54       	subi	r28, 0x48	; 72
    fb06:	df 4f       	sbci	r29, 0xFF	; 255
    fb08:	e8 81       	ld	r30, Y
    fb0a:	f9 81       	ldd	r31, Y+1	; 0x01
    fb0c:	c8 5b       	subi	r28, 0xB8	; 184
    fb0e:	d0 40       	sbci	r29, 0x00	; 0
    fb10:	6e 0f       	add	r22, r30
    fb12:	7f 1f       	adc	r23, r31
    fb14:	fe 01       	movw	r30, r28
    fb16:	31 96       	adiw	r30, 0x01	; 1
    fb18:	5f 01       	movw	r10, r30
    fb1a:	e0 58       	subi	r30, 0x80	; 128
    fb1c:	ff 4f       	sbci	r31, 0xFF	; 255
    fb1e:	6f 01       	movw	r12, r30
    fb20:	ca 54       	subi	r28, 0x4A	; 74
    fb22:	df 4f       	sbci	r29, 0xFF	; 255
    fb24:	e8 81       	ld	r30, Y
    fb26:	f9 81       	ldd	r31, Y+1	; 0x01
    fb28:	c6 5b       	subi	r28, 0xB6	; 182
    fb2a:	d0 40       	sbci	r29, 0x00	; 0
    fb2c:	8e 0f       	add	r24, r30
    fb2e:	9f 1f       	adc	r25, r31
    fb30:	0e 94 54 77 	call	0xeea8	; 0xeea8 <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)>
    fb34:	cb 53       	subi	r28, 0x3B	; 59
    fb36:	df 4f       	sbci	r29, 0xFF	; 255
    fb38:	28 81       	ld	r18, Y
    fb3a:	39 81       	ldd	r19, Y+1	; 0x01
    fb3c:	c5 5c       	subi	r28, 0xC5	; 197
    fb3e:	d0 40       	sbci	r29, 0x00	; 0
    fb40:	23 2b       	or	r18, r19
    fb42:	09 f4       	brne	.+2      	; 0xfb46 <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0x99c>
    fb44:	62 c0       	rjmp	.+196    	; 0xfc0a <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0xa60>
    fb46:	c9 53       	subi	r28, 0x39	; 57
    fb48:	df 4f       	sbci	r29, 0xFF	; 255
    fb4a:	48 81       	ld	r20, Y
    fb4c:	59 81       	ldd	r21, Y+1	; 0x01
    fb4e:	c7 5c       	subi	r28, 0xC7	; 199
    fb50:	d0 40       	sbci	r29, 0x00	; 0
    fb52:	45 2b       	or	r20, r21
    fb54:	09 f4       	brne	.+2      	; 0xfb58 <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0x9ae>
    fb56:	59 c0       	rjmp	.+178    	; 0xfc0a <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0xa60>
    fb58:	f4 01       	movw	r30, r8
    fb5a:	ea 57       	subi	r30, 0x7A	; 122
    fb5c:	fe 4f       	sbci	r31, 0xFE	; 254
    fb5e:	e6 0d       	add	r30, r6
    fb60:	f7 1d       	adc	r31, r7
    fb62:	25 91       	lpm	r18, Z+
    fb64:	34 91       	lpm	r19, Z
    fb66:	f4 01       	movw	r30, r8
    fb68:	ec 57       	subi	r30, 0x7C	; 124
    fb6a:	fe 4f       	sbci	r31, 0xFE	; 254
    fb6c:	e6 0d       	add	r30, r6
    fb6e:	f7 1d       	adc	r31, r7
    fb70:	45 91       	lpm	r20, Z+
    fb72:	54 91       	lpm	r21, Z
    fb74:	f4 01       	movw	r30, r8
    fb76:	ee 57       	subi	r30, 0x7E	; 126
    fb78:	fe 4f       	sbci	r31, 0xFE	; 254
    fb7a:	e6 0d       	add	r30, r6
    fb7c:	f7 1d       	adc	r31, r7
    fb7e:	65 91       	lpm	r22, Z+
    fb80:	74 91       	lpm	r23, Z
    fb82:	f4 01       	movw	r30, r8
    fb84:	e0 58       	subi	r30, 0x80	; 128
    fb86:	fe 4f       	sbci	r31, 0xFE	; 254
    fb88:	e6 0d       	add	r30, r6
    fb8a:	f7 1d       	adc	r31, r7
    fb8c:	85 91       	lpm	r24, Z+
    fb8e:	94 91       	lpm	r25, Z
    fb90:	c8 54       	subi	r28, 0x48	; 72
    fb92:	df 4f       	sbci	r29, 0xFF	; 255
    fb94:	e8 81       	ld	r30, Y
    fb96:	f9 81       	ldd	r31, Y+1	; 0x01
    fb98:	c8 5b       	subi	r28, 0xB8	; 184
    fb9a:	d0 40       	sbci	r29, 0x00	; 0
    fb9c:	6e 0f       	add	r22, r30
    fb9e:	7f 1f       	adc	r23, r31
    fba0:	c9 53       	subi	r28, 0x39	; 57
    fba2:	df 4f       	sbci	r29, 0xFF	; 255
    fba4:	e8 80       	ld	r14, Y
    fba6:	f9 80       	ldd	r15, Y+1	; 0x01
    fba8:	c7 5c       	subi	r28, 0xC7	; 199
    fbaa:	d0 40       	sbci	r29, 0x00	; 0
    fbac:	cb 53       	subi	r28, 0x3B	; 59
    fbae:	df 4f       	sbci	r29, 0xFF	; 255
    fbb0:	08 81       	ld	r16, Y
    fbb2:	19 81       	ldd	r17, Y+1	; 0x01
    fbb4:	c5 5c       	subi	r28, 0xC5	; 197
    fbb6:	d0 40       	sbci	r29, 0x00	; 0
    fbb8:	ca 54       	subi	r28, 0x4A	; 74
    fbba:	df 4f       	sbci	r29, 0xFF	; 255
    fbbc:	e8 81       	ld	r30, Y
    fbbe:	f9 81       	ldd	r31, Y+1	; 0x01
    fbc0:	c6 5b       	subi	r28, 0xB6	; 182
    fbc2:	d0 40       	sbci	r29, 0x00	; 0
    fbc4:	8e 0f       	add	r24, r30
    fbc6:	9f 1f       	adc	r25, r31
    fbc8:	0e 94 ba 78 	call	0xf174	; 0xf174 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    fbcc:	18 2f       	mov	r17, r24
    fbce:	88 23       	and	r24, r24
    fbd0:	e1 f0       	breq	.+56     	; 0xfc0a <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0xa60>
    fbd2:	f4 01       	movw	r30, r8
    fbd4:	e2 57       	subi	r30, 0x72	; 114
    fbd6:	fe 4f       	sbci	r31, 0xFE	; 254
    fbd8:	e6 0d       	add	r30, r6
    fbda:	f7 1d       	adc	r31, r7
    fbdc:	25 91       	lpm	r18, Z+
    fbde:	34 91       	lpm	r19, Z
    fbe0:	f4 01       	movw	r30, r8
    fbe2:	e3 57       	subi	r30, 0x73	; 115
    fbe4:	fe 4f       	sbci	r31, 0xFE	; 254
    fbe6:	e6 0d       	add	r30, r6
    fbe8:	f7 1d       	adc	r31, r7
    fbea:	84 91       	lpm	r24, Z
    fbec:	cf 54       	subi	r28, 0x4F	; 79
    fbee:	df 4f       	sbci	r29, 0xFF	; 255
    fbf0:	68 81       	ld	r22, Y
    fbf2:	c1 5b       	subi	r28, 0xB1	; 177
    fbf4:	d0 40       	sbci	r29, 0x00	; 0
    fbf6:	70 e0       	ldi	r23, 0x00	; 0
    fbf8:	43 2d       	mov	r20, r3
    fbfa:	90 e0       	ldi	r25, 0x00	; 0
    fbfc:	f9 01       	movw	r30, r18
    fbfe:	19 95       	eicall
    fc00:	ce 53       	subi	r28, 0x3E	; 62
    fc02:	df 4f       	sbci	r29, 0xFF	; 255
    fc04:	18 83       	st	Y, r17
    fc06:	c2 5c       	subi	r28, 0xC2	; 194
    fc08:	d0 40       	sbci	r29, 0x00	; 0
    fc0a:	33 94       	inc	r3
    fc0c:	ff ce       	rjmp	.-514    	; 0xfa0c <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0x862>
    fc0e:	ce 53       	subi	r28, 0x3E	; 62
    fc10:	df 4f       	sbci	r29, 0xFF	; 255
    fc12:	f8 81       	ld	r31, Y
    fc14:	c2 5c       	subi	r28, 0xC2	; 194
    fc16:	d0 40       	sbci	r29, 0x00	; 0
    fc18:	f1 11       	cpse	r31, r1
    fc1a:	0c 94 14 8a 	jmp	0x11428	; 0x11428 <__EEPROM_REGION_LENGTH__+0x1428>
    fc1e:	d1 2c       	mov	r13, r1
    fc20:	23 01       	movw	r4, r6
    fc22:	27 e2       	ldi	r18, 0x27	; 39
    fc24:	42 1a       	sub	r4, r18
    fc26:	2d ef       	ldi	r18, 0xFD	; 253
    fc28:	52 0a       	sbc	r5, r18
    fc2a:	f2 01       	movw	r30, r4
    fc2c:	84 91       	lpm	r24, Z
    fc2e:	d8 16       	cp	r13, r24
    fc30:	08 f0       	brcs	.+2      	; 0xfc34 <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0xa8a>
    fc32:	d6 c0       	rjmp	.+428    	; 0xfde0 <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0xc36>
    fc34:	f0 e1       	ldi	r31, 0x10	; 16
    fc36:	df 9e       	mul	r13, r31
    fc38:	50 01       	movw	r10, r0
    fc3a:	11 24       	eor	r1, r1
    fc3c:	f5 01       	movw	r30, r10
    fc3e:	e1 50       	subi	r30, 0x01	; 1
    fc40:	fe 4f       	sbci	r31, 0xFE	; 254
    fc42:	e6 0d       	add	r30, r6
    fc44:	f7 1d       	adc	r31, r7
    fc46:	25 91       	lpm	r18, Z+
    fc48:	34 91       	lpm	r19, Z
    fc4a:	45 01       	movw	r8, r10
    fc4c:	45 e0       	ldi	r20, 0x05	; 5
    fc4e:	84 1a       	sub	r8, r20
    fc50:	4e ef       	ldi	r20, 0xFE	; 254
    fc52:	94 0a       	sbc	r9, r20
    fc54:	86 0c       	add	r8, r6
    fc56:	97 1c       	adc	r9, r7
    fc58:	f4 01       	movw	r30, r8
    fc5a:	84 91       	lpm	r24, Z
    fc5c:	cf 54       	subi	r28, 0x4F	; 79
    fc5e:	df 4f       	sbci	r29, 0xFF	; 255
    fc60:	68 81       	ld	r22, Y
    fc62:	c1 5b       	subi	r28, 0xB1	; 177
    fc64:	d0 40       	sbci	r29, 0x00	; 0
    fc66:	70 e0       	ldi	r23, 0x00	; 0
    fc68:	4d 2d       	mov	r20, r13
    fc6a:	90 e0       	ldi	r25, 0x00	; 0
    fc6c:	f9 01       	movw	r30, r18
    fc6e:	19 95       	eicall
    fc70:	88 23       	and	r24, r24
    fc72:	09 f4       	brne	.+2      	; 0xfc76 <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0xacc>
    fc74:	b3 c0       	rjmp	.+358    	; 0xfddc <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0xc32>
    fc76:	f5 01       	movw	r30, r10
    fc78:	e2 50       	subi	r30, 0x02	; 2
    fc7a:	fe 4f       	sbci	r31, 0xFE	; 254
    fc7c:	e6 0d       	add	r30, r6
    fc7e:	f7 1d       	adc	r31, r7
    fc80:	84 91       	lpm	r24, Z
    fc82:	c3 53       	subi	r28, 0x33	; 51
    fc84:	df 4f       	sbci	r29, 0xFF	; 255
    fc86:	68 81       	ld	r22, Y
    fc88:	cd 5c       	subi	r28, 0xCD	; 205
    fc8a:	d0 40       	sbci	r29, 0x00	; 0
    fc8c:	0e 94 f0 52 	call	0xa5e0	; 0xa5e0 <enable_redraw(unsigned char, unsigned char)>
    fc90:	88 23       	and	r24, r24
    fc92:	09 f4       	brne	.+2      	; 0xfc96 <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0xaec>
    fc94:	3c c0       	rjmp	.+120    	; 0xfd0e <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0xb64>
    fc96:	f5 01       	movw	r30, r10
    fc98:	ef 50       	subi	r30, 0x0F	; 15
    fc9a:	fe 4f       	sbci	r31, 0xFE	; 254
    fc9c:	e6 0d       	add	r30, r6
    fc9e:	f7 1d       	adc	r31, r7
    fca0:	e5 90       	lpm	r14, Z+
    fca2:	f4 90       	lpm	r15, Z
    fca4:	f5 01       	movw	r30, r10
    fca6:	e6 50       	subi	r30, 0x06	; 6
    fca8:	fe 4f       	sbci	r31, 0xFE	; 254
    fcaa:	e6 0d       	add	r30, r6
    fcac:	f7 1d       	adc	r31, r7
    fcae:	05 91       	lpm	r16, Z+
    fcb0:	14 91       	lpm	r17, Z
    fcb2:	f5 01       	movw	r30, r10
    fcb4:	e8 50       	subi	r30, 0x08	; 8
    fcb6:	fe 4f       	sbci	r31, 0xFE	; 254
    fcb8:	e6 0d       	add	r30, r6
    fcba:	f7 1d       	adc	r31, r7
    fcbc:	25 91       	lpm	r18, Z+
    fcbe:	34 91       	lpm	r19, Z
    fcc0:	f5 01       	movw	r30, r10
    fcc2:	ea 50       	subi	r30, 0x0A	; 10
    fcc4:	fe 4f       	sbci	r31, 0xFE	; 254
    fcc6:	e6 0d       	add	r30, r6
    fcc8:	f7 1d       	adc	r31, r7
    fcca:	45 91       	lpm	r20, Z+
    fccc:	54 91       	lpm	r21, Z
    fcce:	f5 01       	movw	r30, r10
    fcd0:	ec 50       	subi	r30, 0x0C	; 12
    fcd2:	fe 4f       	sbci	r31, 0xFE	; 254
    fcd4:	e6 0d       	add	r30, r6
    fcd6:	f7 1d       	adc	r31, r7
    fcd8:	65 91       	lpm	r22, Z+
    fcda:	74 91       	lpm	r23, Z
    fcdc:	f5 01       	movw	r30, r10
    fcde:	ee 50       	subi	r30, 0x0E	; 14
    fce0:	fe 4f       	sbci	r31, 0xFE	; 254
    fce2:	e6 0d       	add	r30, r6
    fce4:	f7 1d       	adc	r31, r7
    fce6:	85 91       	lpm	r24, Z+
    fce8:	94 91       	lpm	r25, Z
    fcea:	c8 54       	subi	r28, 0x48	; 72
    fcec:	df 4f       	sbci	r29, 0xFF	; 255
    fcee:	e8 81       	ld	r30, Y
    fcf0:	f9 81       	ldd	r31, Y+1	; 0x01
    fcf2:	c8 5b       	subi	r28, 0xB8	; 184
    fcf4:	d0 40       	sbci	r29, 0x00	; 0
    fcf6:	6e 0f       	add	r22, r30
    fcf8:	7f 1f       	adc	r23, r31
    fcfa:	ca 54       	subi	r28, 0x4A	; 74
    fcfc:	df 4f       	sbci	r29, 0xFF	; 255
    fcfe:	e8 81       	ld	r30, Y
    fd00:	f9 81       	ldd	r31, Y+1	; 0x01
    fd02:	c6 5b       	subi	r28, 0xB6	; 182
    fd04:	d0 40       	sbci	r29, 0x00	; 0
    fd06:	8e 0f       	add	r24, r30
    fd08:	9f 1f       	adc	r25, r31
    fd0a:	0e 94 29 78 	call	0xf052	; 0xf052 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)>
    fd0e:	cb 53       	subi	r28, 0x3B	; 59
    fd10:	df 4f       	sbci	r29, 0xFF	; 255
    fd12:	28 81       	ld	r18, Y
    fd14:	39 81       	ldd	r19, Y+1	; 0x01
    fd16:	c5 5c       	subi	r28, 0xC5	; 197
    fd18:	d0 40       	sbci	r29, 0x00	; 0
    fd1a:	23 2b       	or	r18, r19
    fd1c:	09 f4       	brne	.+2      	; 0xfd20 <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0xb76>
    fd1e:	5e c0       	rjmp	.+188    	; 0xfddc <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0xc32>
    fd20:	c9 53       	subi	r28, 0x39	; 57
    fd22:	df 4f       	sbci	r29, 0xFF	; 255
    fd24:	48 81       	ld	r20, Y
    fd26:	59 81       	ldd	r21, Y+1	; 0x01
    fd28:	c7 5c       	subi	r28, 0xC7	; 199
    fd2a:	d0 40       	sbci	r29, 0x00	; 0
    fd2c:	45 2b       	or	r20, r21
    fd2e:	09 f4       	brne	.+2      	; 0xfd32 <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0xb88>
    fd30:	55 c0       	rjmp	.+170    	; 0xfddc <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0xc32>
    fd32:	f5 01       	movw	r30, r10
    fd34:	e8 50       	subi	r30, 0x08	; 8
    fd36:	fe 4f       	sbci	r31, 0xFE	; 254
    fd38:	e6 0d       	add	r30, r6
    fd3a:	f7 1d       	adc	r31, r7
    fd3c:	25 91       	lpm	r18, Z+
    fd3e:	34 91       	lpm	r19, Z
    fd40:	f5 01       	movw	r30, r10
    fd42:	ea 50       	subi	r30, 0x0A	; 10
    fd44:	fe 4f       	sbci	r31, 0xFE	; 254
    fd46:	e6 0d       	add	r30, r6
    fd48:	f7 1d       	adc	r31, r7
    fd4a:	45 91       	lpm	r20, Z+
    fd4c:	54 91       	lpm	r21, Z
    fd4e:	f5 01       	movw	r30, r10
    fd50:	ec 50       	subi	r30, 0x0C	; 12
    fd52:	fe 4f       	sbci	r31, 0xFE	; 254
    fd54:	e6 0d       	add	r30, r6
    fd56:	f7 1d       	adc	r31, r7
    fd58:	65 91       	lpm	r22, Z+
    fd5a:	74 91       	lpm	r23, Z
    fd5c:	f5 01       	movw	r30, r10
    fd5e:	ee 50       	subi	r30, 0x0E	; 14
    fd60:	fe 4f       	sbci	r31, 0xFE	; 254
    fd62:	e6 0d       	add	r30, r6
    fd64:	f7 1d       	adc	r31, r7
    fd66:	85 91       	lpm	r24, Z+
    fd68:	94 91       	lpm	r25, Z
    fd6a:	c8 54       	subi	r28, 0x48	; 72
    fd6c:	df 4f       	sbci	r29, 0xFF	; 255
    fd6e:	e8 81       	ld	r30, Y
    fd70:	f9 81       	ldd	r31, Y+1	; 0x01
    fd72:	c8 5b       	subi	r28, 0xB8	; 184
    fd74:	d0 40       	sbci	r29, 0x00	; 0
    fd76:	6e 0f       	add	r22, r30
    fd78:	7f 1f       	adc	r23, r31
    fd7a:	c9 53       	subi	r28, 0x39	; 57
    fd7c:	df 4f       	sbci	r29, 0xFF	; 255
    fd7e:	e8 80       	ld	r14, Y
    fd80:	f9 80       	ldd	r15, Y+1	; 0x01
    fd82:	c7 5c       	subi	r28, 0xC7	; 199
    fd84:	d0 40       	sbci	r29, 0x00	; 0
    fd86:	cb 53       	subi	r28, 0x3B	; 59
    fd88:	df 4f       	sbci	r29, 0xFF	; 255
    fd8a:	08 81       	ld	r16, Y
    fd8c:	19 81       	ldd	r17, Y+1	; 0x01
    fd8e:	c5 5c       	subi	r28, 0xC5	; 197
    fd90:	d0 40       	sbci	r29, 0x00	; 0
    fd92:	ca 54       	subi	r28, 0x4A	; 74
    fd94:	df 4f       	sbci	r29, 0xFF	; 255
    fd96:	e8 81       	ld	r30, Y
    fd98:	f9 81       	ldd	r31, Y+1	; 0x01
    fd9a:	c6 5b       	subi	r28, 0xB6	; 182
    fd9c:	d0 40       	sbci	r29, 0x00	; 0
    fd9e:	8e 0f       	add	r24, r30
    fda0:	9f 1f       	adc	r25, r31
    fda2:	0e 94 ba 78 	call	0xf174	; 0xf174 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    fda6:	18 2f       	mov	r17, r24
    fda8:	88 23       	and	r24, r24
    fdaa:	c1 f0       	breq	.+48     	; 0xfddc <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0xc32>
    fdac:	f5 01       	movw	r30, r10
    fdae:	e4 50       	subi	r30, 0x04	; 4
    fdb0:	fe 4f       	sbci	r31, 0xFE	; 254
    fdb2:	e6 0d       	add	r30, r6
    fdb4:	f7 1d       	adc	r31, r7
    fdb6:	25 91       	lpm	r18, Z+
    fdb8:	34 91       	lpm	r19, Z
    fdba:	f4 01       	movw	r30, r8
    fdbc:	84 91       	lpm	r24, Z
    fdbe:	cf 54       	subi	r28, 0x4F	; 79
    fdc0:	df 4f       	sbci	r29, 0xFF	; 255
    fdc2:	68 81       	ld	r22, Y
    fdc4:	c1 5b       	subi	r28, 0xB1	; 177
    fdc6:	d0 40       	sbci	r29, 0x00	; 0
    fdc8:	70 e0       	ldi	r23, 0x00	; 0
    fdca:	4d 2d       	mov	r20, r13
    fdcc:	90 e0       	ldi	r25, 0x00	; 0
    fdce:	f9 01       	movw	r30, r18
    fdd0:	19 95       	eicall
    fdd2:	ce 53       	subi	r28, 0x3E	; 62
    fdd4:	df 4f       	sbci	r29, 0xFF	; 255
    fdd6:	18 83       	st	Y, r17
    fdd8:	c2 5c       	subi	r28, 0xC2	; 194
    fdda:	d0 40       	sbci	r29, 0x00	; 0
    fddc:	d3 94       	inc	r13
    fdde:	25 cf       	rjmp	.-438    	; 0xfc2a <draw_menu(bool, unsigned char, unsigned int, unsigned int)+0xa80>
    fde0:	ce 53       	subi	r28, 0x3E	; 62
    fde2:	df 4f       	sbci	r29, 0xFF	; 255
    fde4:	f8 81       	ld	r31, Y
    fde6:	c2 5c       	subi	r28, 0xC2	; 194
    fde8:	d0 40       	sbci	r29, 0x00	; 0
    fdea:	f1 11       	cpse	r31, r1
    fdec:	0c 94 14 8a 	jmp	0x11428	; 0x11428 <__EEPROM_REGION_LENGTH__+0x1428>
    fdf0:	51 2c       	mov	r5, r1
    fdf2:	93 01       	movw	r18, r6
    fdf4:	26 52       	subi	r18, 0x26	; 38
    fdf6:	3d 4f       	sbci	r19, 0xFD	; 253
    fdf8:	cc 52       	subi	r28, 0x2C	; 44
    fdfa:	df 4f       	sbci	r29, 0xFF	; 255
    fdfc:	39 83       	std	Y+1, r19	; 0x01
    fdfe:	28 83       	st	Y, r18
    fe00:	c4 5d       	subi	r28, 0xD4	; 212
    fe02:	d0 40       	sbci	r29, 0x00	; 0
    fe04:	cc 52       	subi	r28, 0x2C	; 44
    fe06:	df 4f       	sbci	r29, 0xFF	; 255
    fe08:	e8 81       	ld	r30, Y
    fe0a:	f9 81       	ldd	r31, Y+1	; 0x01
    fe0c:	c4 5d       	subi	r28, 0xD4	; 212
    fe0e:	d0 40       	sbci	r29, 0x00	; 0
    fe10:	84 91       	lpm	r24, Z
    fe12:	58 16       	cp	r5, r24
    fe14:	08 f0       	brcs	.+2      	; 0xfe18 <__DATA_REGION_LENGTH__+0x18>
    fe16:	60 c3       	rjmp	.+1728   	; 0x104d8 <__EEPROM_REGION_LENGTH__+0x4d8>
    fe18:	f7 e1       	ldi	r31, 0x17	; 23
    fe1a:	5f 9e       	mul	r5, r31
    fe1c:	60 01       	movw	r12, r0
    fe1e:	11 24       	eor	r1, r1
    fe20:	f6 01       	movw	r30, r12
    fe22:	e9 57       	subi	r30, 0x79	; 121
    fe24:	fd 4f       	sbci	r31, 0xFD	; 253
    fe26:	e6 0d       	add	r30, r6
    fe28:	f7 1d       	adc	r31, r7
    fe2a:	84 91       	lpm	r24, Z
    fe2c:	c3 53       	subi	r28, 0x33	; 51
    fe2e:	df 4f       	sbci	r29, 0xFF	; 255
    fe30:	68 81       	ld	r22, Y
    fe32:	cd 5c       	subi	r28, 0xCD	; 205
    fe34:	d0 40       	sbci	r29, 0x00	; 0
    fe36:	0e 94 f0 52 	call	0xa5e0	; 0xa5e0 <enable_redraw(unsigned char, unsigned char)>
    fe3a:	88 23       	and	r24, r24
    fe3c:	09 f4       	brne	.+2      	; 0xfe40 <__DATA_REGION_LENGTH__+0x40>
    fe3e:	98 c1       	rjmp	.+816    	; 0x10170 <__EEPROM_REGION_LENGTH__+0x170>
    fe40:	ce 54       	subi	r28, 0x4E	; 78
    fe42:	df 4f       	sbci	r29, 0xFF	; 255
    fe44:	18 82       	st	Y, r1
    fe46:	c2 5b       	subi	r28, 0xB2	; 178
    fe48:	d0 40       	sbci	r29, 0x00	; 0
    fe4a:	f6 01       	movw	r30, r12
    fe4c:	eb 57       	subi	r30, 0x7B	; 123
    fe4e:	fd 4f       	sbci	r31, 0xFD	; 253
    fe50:	e6 0d       	add	r30, r6
    fe52:	f7 1d       	adc	r31, r7
    fe54:	25 91       	lpm	r18, Z+
    fe56:	34 91       	lpm	r19, Z
    fe58:	c6 01       	movw	r24, r12
    fe5a:	80 58       	subi	r24, 0x80	; 128
    fe5c:	9d 4f       	sbci	r25, 0xFD	; 253
    fe5e:	a3 01       	movw	r20, r6
    fe60:	48 0f       	add	r20, r24
    fe62:	59 1f       	adc	r21, r25
    fe64:	c6 54       	subi	r28, 0x46	; 70
    fe66:	df 4f       	sbci	r29, 0xFF	; 255
    fe68:	59 83       	std	Y+1, r21	; 0x01
    fe6a:	48 83       	st	Y, r20
    fe6c:	ca 5b       	subi	r28, 0xBA	; 186
    fe6e:	d0 40       	sbci	r29, 0x00	; 0
    fe70:	fa 01       	movw	r30, r20
    fe72:	84 91       	lpm	r24, Z
    fe74:	cf 54       	subi	r28, 0x4F	; 79
    fe76:	df 4f       	sbci	r29, 0xFF	; 255
    fe78:	68 81       	ld	r22, Y
    fe7a:	c1 5b       	subi	r28, 0xB1	; 177
    fe7c:	d0 40       	sbci	r29, 0x00	; 0
    fe7e:	70 e0       	ldi	r23, 0x00	; 0
    fe80:	40 e0       	ldi	r20, 0x00	; 0
    fe82:	90 e0       	ldi	r25, 0x00	; 0
    fe84:	f9 01       	movw	r30, r18
    fe86:	19 95       	eicall
    fe88:	cd 54       	subi	r28, 0x4D	; 77
    fe8a:	df 4f       	sbci	r29, 0xFF	; 255
    fe8c:	88 83       	st	Y, r24
    fe8e:	c3 5b       	subi	r28, 0xB3	; 179
    fe90:	d0 40       	sbci	r29, 0x00	; 0
    fe92:	f6 01       	movw	r30, r12
    fe94:	ef 57       	subi	r30, 0x7F	; 127
    fe96:	fd 4f       	sbci	r31, 0xFD	; 253
    fe98:	e6 0d       	add	r30, r6
    fe9a:	f7 1d       	adc	r31, r7
    fe9c:	25 91       	lpm	r18, Z+
    fe9e:	34 91       	lpm	r19, Z
    fea0:	ce 52       	subi	r28, 0x2E	; 46
    fea2:	df 4f       	sbci	r29, 0xFF	; 255
    fea4:	39 83       	std	Y+1, r19	; 0x01
    fea6:	28 83       	st	Y, r18
    fea8:	c2 5d       	subi	r28, 0xD2	; 210
    feaa:	d0 40       	sbci	r29, 0x00	; 0
    feac:	46 01       	movw	r8, r12
    feae:	3f e8       	ldi	r19, 0x8F	; 143
    feb0:	83 1a       	sub	r8, r19
    feb2:	3d ef       	ldi	r19, 0xFD	; 253
    feb4:	93 0a       	sbc	r9, r19
    feb6:	86 0c       	add	r8, r6
    feb8:	97 1c       	adc	r9, r7
    feba:	56 01       	movw	r10, r12
    febc:	4d e8       	ldi	r20, 0x8D	; 141
    febe:	a4 1a       	sub	r10, r20
    fec0:	4d ef       	ldi	r20, 0xFD	; 253
    fec2:	b4 0a       	sbc	r11, r20
    fec4:	a6 0c       	add	r10, r6
    fec6:	b7 1c       	adc	r11, r7
    fec8:	16 01       	movw	r2, r12
    feca:	54 e8       	ldi	r21, 0x84	; 132
    fecc:	25 1a       	sub	r2, r21
    fece:	5d ef       	ldi	r21, 0xFD	; 253
    fed0:	35 0a       	sbc	r3, r21
    fed2:	26 0c       	add	r2, r6
    fed4:	37 1c       	adc	r3, r7
    fed6:	c6 01       	movw	r24, r12
    fed8:	85 58       	subi	r24, 0x85	; 133
    feda:	9d 4f       	sbci	r25, 0xFD	; 253
    fedc:	b3 01       	movw	r22, r6
    fede:	68 0f       	add	r22, r24
    fee0:	79 1f       	adc	r23, r25
    fee2:	c0 54       	subi	r28, 0x40	; 64
    fee4:	df 4f       	sbci	r29, 0xFF	; 255
    fee6:	79 83       	std	Y+1, r23	; 0x01
    fee8:	68 83       	st	Y, r22
    feea:	c0 5c       	subi	r28, 0xC0	; 192
    feec:	d0 40       	sbci	r29, 0x00	; 0
    feee:	01 97       	sbiw	r24, 0x01	; 1
    fef0:	f3 01       	movw	r30, r6
    fef2:	e8 0f       	add	r30, r24
    fef4:	f9 1f       	adc	r31, r25
    fef6:	cd 53       	subi	r28, 0x3D	; 61
    fef8:	df 4f       	sbci	r29, 0xFF	; 255
    fefa:	f9 83       	std	Y+1, r31	; 0x01
    fefc:	e8 83       	st	Y, r30
    fefe:	c3 5c       	subi	r28, 0xC3	; 195
    ff00:	d0 40       	sbci	r29, 0x00	; 0
    ff02:	03 96       	adiw	r24, 0x03	; 3
    ff04:	93 01       	movw	r18, r6
    ff06:	28 0f       	add	r18, r24
    ff08:	39 1f       	adc	r19, r25
    ff0a:	c7 53       	subi	r28, 0x37	; 55
    ff0c:	df 4f       	sbci	r29, 0xFF	; 255
    ff0e:	39 83       	std	Y+1, r19	; 0x01
    ff10:	28 83       	st	Y, r18
    ff12:	c9 5c       	subi	r28, 0xC9	; 201
    ff14:	d0 40       	sbci	r29, 0x00	; 0
    ff16:	04 97       	sbiw	r24, 0x04	; 4
    ff18:	a3 01       	movw	r20, r6
    ff1a:	48 0f       	add	r20, r24
    ff1c:	59 1f       	adc	r21, r25
    ff1e:	c5 53       	subi	r28, 0x35	; 53
    ff20:	df 4f       	sbci	r29, 0xFF	; 255
    ff22:	59 83       	std	Y+1, r21	; 0x01
    ff24:	48 83       	st	Y, r20
    ff26:	cb 5c       	subi	r28, 0xCB	; 203
    ff28:	d0 40       	sbci	r29, 0x00	; 0
    ff2a:	02 97       	sbiw	r24, 0x02	; 2
    ff2c:	b3 01       	movw	r22, r6
    ff2e:	68 0f       	add	r22, r24
    ff30:	79 1f       	adc	r23, r25
    ff32:	c2 53       	subi	r28, 0x32	; 50
    ff34:	df 4f       	sbci	r29, 0xFF	; 255
    ff36:	79 83       	std	Y+1, r23	; 0x01
    ff38:	68 83       	st	Y, r22
    ff3a:	ce 5c       	subi	r28, 0xCE	; 206
    ff3c:	d0 40       	sbci	r29, 0x00	; 0
    ff3e:	02 97       	sbiw	r24, 0x02	; 2
    ff40:	f3 01       	movw	r30, r6
    ff42:	e8 0f       	add	r30, r24
    ff44:	f9 1f       	adc	r31, r25
    ff46:	c0 53       	subi	r28, 0x30	; 48
    ff48:	df 4f       	sbci	r29, 0xFF	; 255
    ff4a:	f9 83       	std	Y+1, r31	; 0x01
    ff4c:	e8 83       	st	Y, r30
    ff4e:	c0 5d       	subi	r28, 0xD0	; 208
    ff50:	d0 40       	sbci	r29, 0x00	; 0
    ff52:	f1 2c       	mov	r15, r1
    ff54:	41 2c       	mov	r4, r1
    ff56:	ce 54       	subi	r28, 0x4E	; 78
    ff58:	df 4f       	sbci	r29, 0xFF	; 255
    ff5a:	88 81       	ld	r24, Y
    ff5c:	c2 5b       	subi	r28, 0xB2	; 178
    ff5e:	d0 40       	sbci	r29, 0x00	; 0
    ff60:	cd 54       	subi	r28, 0x4D	; 77
    ff62:	df 4f       	sbci	r29, 0xFF	; 255
    ff64:	98 81       	ld	r25, Y
    ff66:	c3 5b       	subi	r28, 0xB3	; 179
    ff68:	d0 40       	sbci	r29, 0x00	; 0
    ff6a:	89 17       	cp	r24, r25
    ff6c:	08 f0       	brcs	.+2      	; 0xff70 <__DATA_REGION_LENGTH__+0x170>
    ff6e:	00 c1       	rjmp	.+512    	; 0x10170 <__EEPROM_REGION_LENGTH__+0x170>
    ff70:	f4 01       	movw	r30, r8
    ff72:	45 91       	lpm	r20, Z+
    ff74:	54 91       	lpm	r21, Z
    ff76:	f5 01       	movw	r30, r10
    ff78:	25 91       	lpm	r18, Z+
    ff7a:	34 91       	lpm	r19, Z
    ff7c:	f1 01       	movw	r30, r2
    ff7e:	94 91       	lpm	r25, Z
    ff80:	99 23       	and	r25, r25
    ff82:	09 f4       	brne	.+2      	; 0xff86 <__DATA_REGION_LENGTH__+0x186>
    ff84:	b7 c0       	rjmp	.+366    	; 0x100f4 <__EEPROM_REGION_LENGTH__+0xf4>
    ff86:	c8 54       	subi	r28, 0x48	; 72
    ff88:	df 4f       	sbci	r29, 0xFF	; 255
    ff8a:	68 81       	ld	r22, Y
    ff8c:	79 81       	ldd	r23, Y+1	; 0x01
    ff8e:	c8 5b       	subi	r28, 0xB8	; 184
    ff90:	d0 40       	sbci	r29, 0x00	; 0
    ff92:	62 0f       	add	r22, r18
    ff94:	73 1f       	adc	r23, r19
    ff96:	c2 54       	subi	r28, 0x42	; 66
    ff98:	df 4f       	sbci	r29, 0xFF	; 255
    ff9a:	79 83       	std	Y+1, r23	; 0x01
    ff9c:	68 83       	st	Y, r22
    ff9e:	ce 5b       	subi	r28, 0xBE	; 190
    ffa0:	d0 40       	sbci	r29, 0x00	; 0
    ffa2:	f1 01       	movw	r30, r2
    ffa4:	94 91       	lpm	r25, Z
    ffa6:	91 30       	cpi	r25, 0x01	; 1
    ffa8:	09 f4       	brne	.+2      	; 0xffac <__DATA_REGION_LENGTH__+0x1ac>
    ffaa:	c3 c0       	rjmp	.+390    	; 0x10132 <__EEPROM_REGION_LENGTH__+0x132>
    ffac:	ca 54       	subi	r28, 0x4A	; 74
    ffae:	df 4f       	sbci	r29, 0xFF	; 255
    ffb0:	28 81       	ld	r18, Y
    ffb2:	39 81       	ldd	r19, Y+1	; 0x01
    ffb4:	c6 5b       	subi	r28, 0xB6	; 182
    ffb6:	d0 40       	sbci	r29, 0x00	; 0
    ffb8:	24 0f       	add	r18, r20
    ffba:	35 1f       	adc	r19, r21
    ffbc:	c4 54       	subi	r28, 0x44	; 68
    ffbe:	df 4f       	sbci	r29, 0xFF	; 255
    ffc0:	39 83       	std	Y+1, r19	; 0x01
    ffc2:	28 83       	st	Y, r18
    ffc4:	cc 5b       	subi	r28, 0xBC	; 188
    ffc6:	d0 40       	sbci	r29, 0x00	; 0
    ffc8:	f1 01       	movw	r30, r2
    ffca:	94 91       	lpm	r25, Z
    ffcc:	92 30       	cpi	r25, 0x02	; 2
    ffce:	09 f0       	breq	.+2      	; 0xffd2 <__DATA_REGION_LENGTH__+0x1d2>
    ffd0:	46 c0       	rjmp	.+140    	; 0x1005e <__EEPROM_REGION_LENGTH__+0x5e>
    ffd2:	f4 01       	movw	r30, r8
    ffd4:	25 91       	lpm	r18, Z+
    ffd6:	34 91       	lpm	r19, Z
    ffd8:	cd 53       	subi	r28, 0x3D	; 61
    ffda:	df 4f       	sbci	r29, 0xFF	; 255
    ffdc:	e8 81       	ld	r30, Y
    ffde:	f9 81       	ldd	r31, Y+1	; 0x01
    ffe0:	c3 5c       	subi	r28, 0xC3	; 195
    ffe2:	d0 40       	sbci	r29, 0x00	; 0
    ffe4:	94 91       	lpm	r25, Z
    ffe6:	ca 54       	subi	r28, 0x4A	; 74
    ffe8:	df 4f       	sbci	r29, 0xFF	; 255
    ffea:	48 81       	ld	r20, Y
    ffec:	59 81       	ldd	r21, Y+1	; 0x01
    ffee:	c6 5b       	subi	r28, 0xB6	; 182
    fff0:	d0 40       	sbci	r29, 0x00	; 0
    fff2:	24 0f       	add	r18, r20
    fff4:	35 1f       	adc	r19, r21
    fff6:	b9 01       	movw	r22, r18
    fff8:	94 9d       	mul	r25, r4
    fffa:	60 0d       	add	r22, r0
    fffc:	71 1d       	adc	r23, r1
    fffe:	11 24       	eor	r1, r1
   10000:	c4 54       	subi	r28, 0x44	; 68
   10002:	df 4f       	sbci	r29, 0xFF	; 255
   10004:	79 83       	std	Y+1, r23	; 0x01
   10006:	68 83       	st	Y, r22
   10008:	cc 5b       	subi	r28, 0xBC	; 188
   1000a:	d0 40       	sbci	r29, 0x00	; 0
   1000c:	f5 01       	movw	r30, r10
   1000e:	25 91       	lpm	r18, Z+
   10010:	34 91       	lpm	r19, Z
   10012:	c0 54       	subi	r28, 0x40	; 64
   10014:	df 4f       	sbci	r29, 0xFF	; 255
   10016:	e8 81       	ld	r30, Y
   10018:	f9 81       	ldd	r31, Y+1	; 0x01
   1001a:	c0 5c       	subi	r28, 0xC0	; 192
   1001c:	d0 40       	sbci	r29, 0x00	; 0
   1001e:	94 91       	lpm	r25, Z
   10020:	c8 54       	subi	r28, 0x48	; 72
   10022:	df 4f       	sbci	r29, 0xFF	; 255
   10024:	48 81       	ld	r20, Y
   10026:	59 81       	ldd	r21, Y+1	; 0x01
   10028:	c8 5b       	subi	r28, 0xB8	; 184
   1002a:	d0 40       	sbci	r29, 0x00	; 0
   1002c:	24 0f       	add	r18, r20
   1002e:	35 1f       	adc	r19, r21
   10030:	b9 01       	movw	r22, r18
   10032:	9f 9d       	mul	r25, r15
   10034:	60 0d       	add	r22, r0
   10036:	71 1d       	adc	r23, r1
   10038:	11 24       	eor	r1, r1
   1003a:	c2 54       	subi	r28, 0x42	; 66
   1003c:	df 4f       	sbci	r29, 0xFF	; 255
   1003e:	79 83       	std	Y+1, r23	; 0x01
   10040:	68 83       	st	Y, r22
   10042:	ce 5b       	subi	r28, 0xBE	; 190
   10044:	d0 40       	sbci	r29, 0x00	; 0
   10046:	43 94       	inc	r4
   10048:	c7 53       	subi	r28, 0x37	; 55
   1004a:	df 4f       	sbci	r29, 0xFF	; 255
   1004c:	e8 81       	ld	r30, Y
   1004e:	f9 81       	ldd	r31, Y+1	; 0x01
   10050:	c9 5c       	subi	r28, 0xC9	; 201
   10052:	d0 40       	sbci	r29, 0x00	; 0
   10054:	94 91       	lpm	r25, Z
   10056:	49 16       	cp	r4, r25
   10058:	10 f0       	brcs	.+4      	; 0x1005e <__EEPROM_REGION_LENGTH__+0x5e>
   1005a:	f3 94       	inc	r15
   1005c:	41 2c       	mov	r4, r1
   1005e:	c6 54       	subi	r28, 0x46	; 70
   10060:	df 4f       	sbci	r29, 0xFF	; 255
   10062:	e8 81       	ld	r30, Y
   10064:	f9 81       	ldd	r31, Y+1	; 0x01
   10066:	ca 5b       	subi	r28, 0xBA	; 186
   10068:	d0 40       	sbci	r29, 0x00	; 0
   1006a:	44 91       	lpm	r20, Z
   1006c:	8e 01       	movw	r16, r28
   1006e:	0f 57       	subi	r16, 0x7F	; 127
   10070:	1f 4f       	sbci	r17, 0xFF	; 255
   10072:	9e 01       	movw	r18, r28
   10074:	2f 5f       	subi	r18, 0xFF	; 255
   10076:	3f 4f       	sbci	r19, 0xFF	; 255
   10078:	cf 54       	subi	r28, 0x4F	; 79
   1007a:	df 4f       	sbci	r29, 0xFF	; 255
   1007c:	68 81       	ld	r22, Y
   1007e:	c1 5b       	subi	r28, 0xB1	; 177
   10080:	d0 40       	sbci	r29, 0x00	; 0
   10082:	ce 52       	subi	r28, 0x2E	; 46
   10084:	df 4f       	sbci	r29, 0xFF	; 255
   10086:	e8 81       	ld	r30, Y
   10088:	f9 81       	ldd	r31, Y+1	; 0x01
   1008a:	c2 5d       	subi	r28, 0xD2	; 210
   1008c:	d0 40       	sbci	r29, 0x00	; 0
   1008e:	19 95       	eicall
   10090:	c5 53       	subi	r28, 0x35	; 53
   10092:	df 4f       	sbci	r29, 0xFF	; 255
   10094:	e8 81       	ld	r30, Y
   10096:	f9 81       	ldd	r31, Y+1	; 0x01
   10098:	cb 5c       	subi	r28, 0xCB	; 203
   1009a:	d0 40       	sbci	r29, 0x00	; 0
   1009c:	04 91       	lpm	r16, Z
   1009e:	c2 53       	subi	r28, 0x32	; 50
   100a0:	df 4f       	sbci	r29, 0xFF	; 255
   100a2:	e8 81       	ld	r30, Y
   100a4:	f9 81       	ldd	r31, Y+1	; 0x01
   100a6:	ce 5c       	subi	r28, 0xCE	; 206
   100a8:	d0 40       	sbci	r29, 0x00	; 0
   100aa:	25 91       	lpm	r18, Z+
   100ac:	34 91       	lpm	r19, Z
   100ae:	c0 53       	subi	r28, 0x30	; 48
   100b0:	df 4f       	sbci	r29, 0xFF	; 255
   100b2:	e8 81       	ld	r30, Y
   100b4:	f9 81       	ldd	r31, Y+1	; 0x01
   100b6:	c0 5d       	subi	r28, 0xD0	; 208
   100b8:	d0 40       	sbci	r29, 0x00	; 0
   100ba:	45 91       	lpm	r20, Z+
   100bc:	54 91       	lpm	r21, Z
   100be:	e9 80       	ldd	r14, Y+1	; 0x01
   100c0:	c2 54       	subi	r28, 0x42	; 66
   100c2:	df 4f       	sbci	r29, 0xFF	; 255
   100c4:	68 81       	ld	r22, Y
   100c6:	79 81       	ldd	r23, Y+1	; 0x01
   100c8:	ce 5b       	subi	r28, 0xBE	; 190
   100ca:	d0 40       	sbci	r29, 0x00	; 0
   100cc:	c4 54       	subi	r28, 0x44	; 68
   100ce:	df 4f       	sbci	r29, 0xFF	; 255
   100d0:	88 81       	ld	r24, Y
   100d2:	99 81       	ldd	r25, Y+1	; 0x01
   100d4:	cc 5b       	subi	r28, 0xBC	; 188
   100d6:	d0 40       	sbci	r29, 0x00	; 0
   100d8:	0e 94 29 78 	call	0xf052	; 0xf052 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)>
   100dc:	ce 54       	subi	r28, 0x4E	; 78
   100de:	df 4f       	sbci	r29, 0xFF	; 255
   100e0:	88 81       	ld	r24, Y
   100e2:	c2 5b       	subi	r28, 0xB2	; 178
   100e4:	d0 40       	sbci	r29, 0x00	; 0
   100e6:	8f 5f       	subi	r24, 0xFF	; 255
   100e8:	ce 54       	subi	r28, 0x4E	; 78
   100ea:	df 4f       	sbci	r29, 0xFF	; 255
   100ec:	88 83       	st	Y, r24
   100ee:	c2 5b       	subi	r28, 0xB2	; 178
   100f0:	d0 40       	sbci	r29, 0x00	; 0
   100f2:	31 cf       	rjmp	.-414    	; 0xff56 <__DATA_REGION_LENGTH__+0x156>
   100f4:	f5 01       	movw	r30, r10
   100f6:	25 91       	lpm	r18, Z+
   100f8:	34 91       	lpm	r19, Z
   100fa:	c0 54       	subi	r28, 0x40	; 64
   100fc:	df 4f       	sbci	r29, 0xFF	; 255
   100fe:	e8 81       	ld	r30, Y
   10100:	f9 81       	ldd	r31, Y+1	; 0x01
   10102:	c0 5c       	subi	r28, 0xC0	; 192
   10104:	d0 40       	sbci	r29, 0x00	; 0
   10106:	94 91       	lpm	r25, Z
   10108:	c8 54       	subi	r28, 0x48	; 72
   1010a:	df 4f       	sbci	r29, 0xFF	; 255
   1010c:	68 81       	ld	r22, Y
   1010e:	79 81       	ldd	r23, Y+1	; 0x01
   10110:	c8 5b       	subi	r28, 0xB8	; 184
   10112:	d0 40       	sbci	r29, 0x00	; 0
   10114:	26 0f       	add	r18, r22
   10116:	37 1f       	adc	r19, r23
   10118:	f9 01       	movw	r30, r18
   1011a:	94 9d       	mul	r25, r4
   1011c:	e0 0d       	add	r30, r0
   1011e:	f1 1d       	adc	r31, r1
   10120:	11 24       	eor	r1, r1
   10122:	c2 54       	subi	r28, 0x42	; 66
   10124:	df 4f       	sbci	r29, 0xFF	; 255
   10126:	f9 83       	std	Y+1, r31	; 0x01
   10128:	e8 83       	st	Y, r30
   1012a:	ce 5b       	subi	r28, 0xBE	; 190
   1012c:	d0 40       	sbci	r29, 0x00	; 0
   1012e:	43 94       	inc	r4
   10130:	38 cf       	rjmp	.-400    	; 0xffa2 <__DATA_REGION_LENGTH__+0x1a2>
   10132:	f4 01       	movw	r30, r8
   10134:	25 91       	lpm	r18, Z+
   10136:	34 91       	lpm	r19, Z
   10138:	cd 53       	subi	r28, 0x3D	; 61
   1013a:	df 4f       	sbci	r29, 0xFF	; 255
   1013c:	e8 81       	ld	r30, Y
   1013e:	f9 81       	ldd	r31, Y+1	; 0x01
   10140:	c3 5c       	subi	r28, 0xC3	; 195
   10142:	d0 40       	sbci	r29, 0x00	; 0
   10144:	94 91       	lpm	r25, Z
   10146:	ca 54       	subi	r28, 0x4A	; 74
   10148:	df 4f       	sbci	r29, 0xFF	; 255
   1014a:	48 81       	ld	r20, Y
   1014c:	59 81       	ldd	r21, Y+1	; 0x01
   1014e:	c6 5b       	subi	r28, 0xB6	; 182
   10150:	d0 40       	sbci	r29, 0x00	; 0
   10152:	24 0f       	add	r18, r20
   10154:	35 1f       	adc	r19, r21
   10156:	b9 01       	movw	r22, r18
   10158:	94 9d       	mul	r25, r4
   1015a:	60 0d       	add	r22, r0
   1015c:	71 1d       	adc	r23, r1
   1015e:	11 24       	eor	r1, r1
   10160:	c4 54       	subi	r28, 0x44	; 68
   10162:	df 4f       	sbci	r29, 0xFF	; 255
   10164:	79 83       	std	Y+1, r23	; 0x01
   10166:	68 83       	st	Y, r22
   10168:	cc 5b       	subi	r28, 0xBC	; 188
   1016a:	d0 40       	sbci	r29, 0x00	; 0
   1016c:	43 94       	inc	r4
   1016e:	2c cf       	rjmp	.-424    	; 0xffc8 <__DATA_REGION_LENGTH__+0x1c8>
   10170:	cb 53       	subi	r28, 0x3B	; 59
   10172:	df 4f       	sbci	r29, 0xFF	; 255
   10174:	28 81       	ld	r18, Y
   10176:	39 81       	ldd	r19, Y+1	; 0x01
   10178:	c5 5c       	subi	r28, 0xC5	; 197
   1017a:	d0 40       	sbci	r29, 0x00	; 0
   1017c:	23 2b       	or	r18, r19
   1017e:	09 f4       	brne	.+2      	; 0x10182 <__EEPROM_REGION_LENGTH__+0x182>
   10180:	69 c1       	rjmp	.+722    	; 0x10454 <__EEPROM_REGION_LENGTH__+0x454>
   10182:	c9 53       	subi	r28, 0x39	; 57
   10184:	df 4f       	sbci	r29, 0xFF	; 255
   10186:	48 81       	ld	r20, Y
   10188:	59 81       	ldd	r21, Y+1	; 0x01
   1018a:	c7 5c       	subi	r28, 0xC7	; 199
   1018c:	d0 40       	sbci	r29, 0x00	; 0
   1018e:	45 2b       	or	r20, r21
   10190:	09 f4       	brne	.+2      	; 0x10194 <__EEPROM_REGION_LENGTH__+0x194>
   10192:	60 c1       	rjmp	.+704    	; 0x10454 <__EEPROM_REGION_LENGTH__+0x454>
   10194:	ce 54       	subi	r28, 0x4E	; 78
   10196:	df 4f       	sbci	r29, 0xFF	; 255
   10198:	18 82       	st	Y, r1
   1019a:	c2 5b       	subi	r28, 0xB2	; 178
   1019c:	d0 40       	sbci	r29, 0x00	; 0
   1019e:	f6 01       	movw	r30, r12
   101a0:	eb 57       	subi	r30, 0x7B	; 123
   101a2:	fd 4f       	sbci	r31, 0xFD	; 253
   101a4:	e6 0d       	add	r30, r6
   101a6:	f7 1d       	adc	r31, r7
   101a8:	25 91       	lpm	r18, Z+
   101aa:	34 91       	lpm	r19, Z
   101ac:	c6 01       	movw	r24, r12
   101ae:	80 58       	subi	r24, 0x80	; 128
   101b0:	9d 4f       	sbci	r25, 0xFD	; 253
   101b2:	b3 01       	movw	r22, r6
   101b4:	68 0f       	add	r22, r24
   101b6:	79 1f       	adc	r23, r25
   101b8:	cd 53       	subi	r28, 0x3D	; 61
   101ba:	df 4f       	sbci	r29, 0xFF	; 255
   101bc:	79 83       	std	Y+1, r23	; 0x01
   101be:	68 83       	st	Y, r22
   101c0:	c3 5c       	subi	r28, 0xC3	; 195
   101c2:	d0 40       	sbci	r29, 0x00	; 0
   101c4:	fb 01       	movw	r30, r22
   101c6:	84 91       	lpm	r24, Z
   101c8:	cf 54       	subi	r28, 0x4F	; 79
   101ca:	df 4f       	sbci	r29, 0xFF	; 255
   101cc:	68 81       	ld	r22, Y
   101ce:	c1 5b       	subi	r28, 0xB1	; 177
   101d0:	d0 40       	sbci	r29, 0x00	; 0
   101d2:	70 e0       	ldi	r23, 0x00	; 0
   101d4:	40 e0       	ldi	r20, 0x00	; 0
   101d6:	90 e0       	ldi	r25, 0x00	; 0
   101d8:	f9 01       	movw	r30, r18
   101da:	19 95       	eicall
   101dc:	c0 54       	subi	r28, 0x40	; 64
   101de:	df 4f       	sbci	r29, 0xFF	; 255
   101e0:	88 83       	st	Y, r24
   101e2:	c0 5c       	subi	r28, 0xC0	; 192
   101e4:	d0 40       	sbci	r29, 0x00	; 0
   101e6:	cd 54       	subi	r28, 0x4D	; 77
   101e8:	df 4f       	sbci	r29, 0xFF	; 255
   101ea:	88 83       	st	Y, r24
   101ec:	c3 5b       	subi	r28, 0xB3	; 179
   101ee:	d0 40       	sbci	r29, 0x00	; 0
   101f0:	ce 54       	subi	r28, 0x4E	; 78
   101f2:	df 4f       	sbci	r29, 0xFF	; 255
   101f4:	a8 80       	ld	r10, Y
   101f6:	c2 5b       	subi	r28, 0xB2	; 178
   101f8:	d0 40       	sbci	r29, 0x00	; 0
   101fa:	16 01       	movw	r2, r12
   101fc:	ff e8       	ldi	r31, 0x8F	; 143
   101fe:	2f 1a       	sub	r2, r31
   10200:	fd ef       	ldi	r31, 0xFD	; 253
   10202:	3f 0a       	sbc	r3, r31
   10204:	26 0c       	add	r2, r6
   10206:	37 1c       	adc	r3, r7
   10208:	46 01       	movw	r8, r12
   1020a:	2d e8       	ldi	r18, 0x8D	; 141
   1020c:	82 1a       	sub	r8, r18
   1020e:	2d ef       	ldi	r18, 0xFD	; 253
   10210:	92 0a       	sbc	r9, r18
   10212:	86 0c       	add	r8, r6
   10214:	97 1c       	adc	r9, r7
   10216:	c6 01       	movw	r24, r12
   10218:	84 58       	subi	r24, 0x84	; 132
   1021a:	9d 4f       	sbci	r25, 0xFD	; 253
   1021c:	a3 01       	movw	r20, r6
   1021e:	48 0f       	add	r20, r24
   10220:	59 1f       	adc	r21, r25
   10222:	c6 54       	subi	r28, 0x46	; 70
   10224:	df 4f       	sbci	r29, 0xFF	; 255
   10226:	59 83       	std	Y+1, r21	; 0x01
   10228:	48 83       	st	Y, r20
   1022a:	ca 5b       	subi	r28, 0xBA	; 186
   1022c:	d0 40       	sbci	r29, 0x00	; 0
   1022e:	01 97       	sbiw	r24, 0x01	; 1
   10230:	b3 01       	movw	r22, r6
   10232:	68 0f       	add	r22, r24
   10234:	79 1f       	adc	r23, r25
   10236:	c7 53       	subi	r28, 0x37	; 55
   10238:	df 4f       	sbci	r29, 0xFF	; 255
   1023a:	79 83       	std	Y+1, r23	; 0x01
   1023c:	68 83       	st	Y, r22
   1023e:	c9 5c       	subi	r28, 0xC9	; 201
   10240:	d0 40       	sbci	r29, 0x00	; 0
   10242:	01 97       	sbiw	r24, 0x01	; 1
   10244:	f3 01       	movw	r30, r6
   10246:	e8 0f       	add	r30, r24
   10248:	f9 1f       	adc	r31, r25
   1024a:	c5 53       	subi	r28, 0x35	; 53
   1024c:	df 4f       	sbci	r29, 0xFF	; 255
   1024e:	f9 83       	std	Y+1, r31	; 0x01
   10250:	e8 83       	st	Y, r30
   10252:	cb 5c       	subi	r28, 0xCB	; 203
   10254:	d0 40       	sbci	r29, 0x00	; 0
   10256:	03 96       	adiw	r24, 0x03	; 3
   10258:	93 01       	movw	r18, r6
   1025a:	28 0f       	add	r18, r24
   1025c:	39 1f       	adc	r19, r25
   1025e:	c2 53       	subi	r28, 0x32	; 50
   10260:	df 4f       	sbci	r29, 0xFF	; 255
   10262:	39 83       	std	Y+1, r19	; 0x01
   10264:	28 83       	st	Y, r18
   10266:	ce 5c       	subi	r28, 0xCE	; 206
   10268:	d0 40       	sbci	r29, 0x00	; 0
   1026a:	06 97       	sbiw	r24, 0x06	; 6
   1026c:	a3 01       	movw	r20, r6
   1026e:	48 0f       	add	r20, r24
   10270:	59 1f       	adc	r21, r25
   10272:	c0 53       	subi	r28, 0x30	; 48
   10274:	df 4f       	sbci	r29, 0xFF	; 255
   10276:	59 83       	std	Y+1, r21	; 0x01
   10278:	48 83       	st	Y, r20
   1027a:	c0 5d       	subi	r28, 0xD0	; 208
   1027c:	d0 40       	sbci	r29, 0x00	; 0
   1027e:	02 97       	sbiw	r24, 0x02	; 2
   10280:	b3 01       	movw	r22, r6
   10282:	68 0f       	add	r22, r24
   10284:	79 1f       	adc	r23, r25
   10286:	ce 52       	subi	r28, 0x2E	; 46
   10288:	df 4f       	sbci	r29, 0xFF	; 255
   1028a:	79 83       	std	Y+1, r23	; 0x01
   1028c:	68 83       	st	Y, r22
   1028e:	c2 5d       	subi	r28, 0xD2	; 210
   10290:	d0 40       	sbci	r29, 0x00	; 0
   10292:	41 2c       	mov	r4, r1
   10294:	b1 2c       	mov	r11, r1
   10296:	c0 54       	subi	r28, 0x40	; 64
   10298:	df 4f       	sbci	r29, 0xFF	; 255
   1029a:	78 81       	ld	r23, Y
   1029c:	c0 5c       	subi	r28, 0xC0	; 192
   1029e:	d0 40       	sbci	r29, 0x00	; 0
   102a0:	a7 16       	cp	r10, r23
   102a2:	08 f0       	brcs	.+2      	; 0x102a6 <__EEPROM_REGION_LENGTH__+0x2a6>
   102a4:	d7 c0       	rjmp	.+430    	; 0x10454 <__EEPROM_REGION_LENGTH__+0x454>
   102a6:	f1 01       	movw	r30, r2
   102a8:	25 91       	lpm	r18, Z+
   102aa:	34 91       	lpm	r19, Z
   102ac:	f4 01       	movw	r30, r8
   102ae:	85 91       	lpm	r24, Z+
   102b0:	94 91       	lpm	r25, Z
   102b2:	c6 54       	subi	r28, 0x46	; 70
   102b4:	df 4f       	sbci	r29, 0xFF	; 255
   102b6:	e8 81       	ld	r30, Y
   102b8:	f9 81       	ldd	r31, Y+1	; 0x01
   102ba:	ca 5b       	subi	r28, 0xBA	; 186
   102bc:	d0 40       	sbci	r29, 0x00	; 0
   102be:	44 91       	lpm	r20, Z
   102c0:	44 23       	and	r20, r20
   102c2:	09 f4       	brne	.+2      	; 0x102c6 <__EEPROM_REGION_LENGTH__+0x2c6>
   102c4:	cb c0       	rjmp	.+406    	; 0x1045c <__EEPROM_REGION_LENGTH__+0x45c>
   102c6:	c8 54       	subi	r28, 0x48	; 72
   102c8:	df 4f       	sbci	r29, 0xFF	; 255
   102ca:	48 81       	ld	r20, Y
   102cc:	59 81       	ldd	r21, Y+1	; 0x01
   102ce:	c8 5b       	subi	r28, 0xB8	; 184
   102d0:	d0 40       	sbci	r29, 0x00	; 0
   102d2:	48 0f       	add	r20, r24
   102d4:	59 1f       	adc	r21, r25
   102d6:	c2 54       	subi	r28, 0x42	; 66
   102d8:	df 4f       	sbci	r29, 0xFF	; 255
   102da:	59 83       	std	Y+1, r21	; 0x01
   102dc:	48 83       	st	Y, r20
   102de:	ce 5b       	subi	r28, 0xBE	; 190
   102e0:	d0 40       	sbci	r29, 0x00	; 0
   102e2:	c6 54       	subi	r28, 0x46	; 70
   102e4:	df 4f       	sbci	r29, 0xFF	; 255
   102e6:	e8 81       	ld	r30, Y
   102e8:	f9 81       	ldd	r31, Y+1	; 0x01
   102ea:	ca 5b       	subi	r28, 0xBA	; 186
   102ec:	d0 40       	sbci	r29, 0x00	; 0
   102ee:	84 91       	lpm	r24, Z
   102f0:	81 30       	cpi	r24, 0x01	; 1
   102f2:	09 f4       	brne	.+2      	; 0x102f6 <__EEPROM_REGION_LENGTH__+0x2f6>
   102f4:	d2 c0       	rjmp	.+420    	; 0x1049a <__EEPROM_REGION_LENGTH__+0x49a>
   102f6:	ca 54       	subi	r28, 0x4A	; 74
   102f8:	df 4f       	sbci	r29, 0xFF	; 255
   102fa:	48 81       	ld	r20, Y
   102fc:	59 81       	ldd	r21, Y+1	; 0x01
   102fe:	c6 5b       	subi	r28, 0xB6	; 182
   10300:	d0 40       	sbci	r29, 0x00	; 0
   10302:	42 0f       	add	r20, r18
   10304:	53 1f       	adc	r21, r19
   10306:	c4 54       	subi	r28, 0x44	; 68
   10308:	df 4f       	sbci	r29, 0xFF	; 255
   1030a:	59 83       	std	Y+1, r21	; 0x01
   1030c:	48 83       	st	Y, r20
   1030e:	cc 5b       	subi	r28, 0xBC	; 188
   10310:	d0 40       	sbci	r29, 0x00	; 0
   10312:	c6 54       	subi	r28, 0x46	; 70
   10314:	df 4f       	sbci	r29, 0xFF	; 255
   10316:	e8 81       	ld	r30, Y
   10318:	f9 81       	ldd	r31, Y+1	; 0x01
   1031a:	ca 5b       	subi	r28, 0xBA	; 186
   1031c:	d0 40       	sbci	r29, 0x00	; 0
   1031e:	84 91       	lpm	r24, Z
   10320:	82 30       	cpi	r24, 0x02	; 2
   10322:	09 f0       	breq	.+2      	; 0x10326 <__EEPROM_REGION_LENGTH__+0x326>
   10324:	46 c0       	rjmp	.+140    	; 0x103b2 <__EEPROM_REGION_LENGTH__+0x3b2>
   10326:	f1 01       	movw	r30, r2
   10328:	85 91       	lpm	r24, Z+
   1032a:	94 91       	lpm	r25, Z
   1032c:	c5 53       	subi	r28, 0x35	; 53
   1032e:	df 4f       	sbci	r29, 0xFF	; 255
   10330:	e8 81       	ld	r30, Y
   10332:	f9 81       	ldd	r31, Y+1	; 0x01
   10334:	cb 5c       	subi	r28, 0xCB	; 203
   10336:	d0 40       	sbci	r29, 0x00	; 0
   10338:	24 91       	lpm	r18, Z
   1033a:	ca 54       	subi	r28, 0x4A	; 74
   1033c:	df 4f       	sbci	r29, 0xFF	; 255
   1033e:	48 81       	ld	r20, Y
   10340:	59 81       	ldd	r21, Y+1	; 0x01
   10342:	c6 5b       	subi	r28, 0xB6	; 182
   10344:	d0 40       	sbci	r29, 0x00	; 0
   10346:	84 0f       	add	r24, r20
   10348:	95 1f       	adc	r25, r21
   1034a:	bc 01       	movw	r22, r24
   1034c:	2b 9d       	mul	r18, r11
   1034e:	60 0d       	add	r22, r0
   10350:	71 1d       	adc	r23, r1
   10352:	11 24       	eor	r1, r1
   10354:	c4 54       	subi	r28, 0x44	; 68
   10356:	df 4f       	sbci	r29, 0xFF	; 255
   10358:	79 83       	std	Y+1, r23	; 0x01
   1035a:	68 83       	st	Y, r22
   1035c:	cc 5b       	subi	r28, 0xBC	; 188
   1035e:	d0 40       	sbci	r29, 0x00	; 0
   10360:	f4 01       	movw	r30, r8
   10362:	85 91       	lpm	r24, Z+
   10364:	94 91       	lpm	r25, Z
   10366:	c7 53       	subi	r28, 0x37	; 55
   10368:	df 4f       	sbci	r29, 0xFF	; 255
   1036a:	e8 81       	ld	r30, Y
   1036c:	f9 81       	ldd	r31, Y+1	; 0x01
   1036e:	c9 5c       	subi	r28, 0xC9	; 201
   10370:	d0 40       	sbci	r29, 0x00	; 0
   10372:	24 91       	lpm	r18, Z
   10374:	c8 54       	subi	r28, 0x48	; 72
   10376:	df 4f       	sbci	r29, 0xFF	; 255
   10378:	48 81       	ld	r20, Y
   1037a:	59 81       	ldd	r21, Y+1	; 0x01
   1037c:	c8 5b       	subi	r28, 0xB8	; 184
   1037e:	d0 40       	sbci	r29, 0x00	; 0
   10380:	84 0f       	add	r24, r20
   10382:	95 1f       	adc	r25, r21
   10384:	bc 01       	movw	r22, r24
   10386:	24 9d       	mul	r18, r4
   10388:	60 0d       	add	r22, r0
   1038a:	71 1d       	adc	r23, r1
   1038c:	11 24       	eor	r1, r1
   1038e:	c2 54       	subi	r28, 0x42	; 66
   10390:	df 4f       	sbci	r29, 0xFF	; 255
   10392:	79 83       	std	Y+1, r23	; 0x01
   10394:	68 83       	st	Y, r22
   10396:	ce 5b       	subi	r28, 0xBE	; 190
   10398:	d0 40       	sbci	r29, 0x00	; 0
   1039a:	b3 94       	inc	r11
   1039c:	c2 53       	subi	r28, 0x32	; 50
   1039e:	df 4f       	sbci	r29, 0xFF	; 255
   103a0:	e8 81       	ld	r30, Y
   103a2:	f9 81       	ldd	r31, Y+1	; 0x01
   103a4:	ce 5c       	subi	r28, 0xCE	; 206
   103a6:	d0 40       	sbci	r29, 0x00	; 0
   103a8:	84 91       	lpm	r24, Z
   103aa:	b8 16       	cp	r11, r24
   103ac:	10 f0       	brcs	.+4      	; 0x103b2 <__EEPROM_REGION_LENGTH__+0x3b2>
   103ae:	43 94       	inc	r4
   103b0:	b1 2c       	mov	r11, r1
   103b2:	c0 53       	subi	r28, 0x30	; 48
   103b4:	df 4f       	sbci	r29, 0xFF	; 255
   103b6:	e8 81       	ld	r30, Y
   103b8:	f9 81       	ldd	r31, Y+1	; 0x01
   103ba:	c0 5d       	subi	r28, 0xD0	; 208
   103bc:	d0 40       	sbci	r29, 0x00	; 0
   103be:	25 91       	lpm	r18, Z+
   103c0:	34 91       	lpm	r19, Z
   103c2:	ce 52       	subi	r28, 0x2E	; 46
   103c4:	df 4f       	sbci	r29, 0xFF	; 255
   103c6:	e8 81       	ld	r30, Y
   103c8:	f9 81       	ldd	r31, Y+1	; 0x01
   103ca:	c2 5d       	subi	r28, 0xD2	; 210
   103cc:	d0 40       	sbci	r29, 0x00	; 0
   103ce:	45 91       	lpm	r20, Z+
   103d0:	54 91       	lpm	r21, Z
   103d2:	c9 53       	subi	r28, 0x39	; 57
   103d4:	df 4f       	sbci	r29, 0xFF	; 255
   103d6:	e8 80       	ld	r14, Y
   103d8:	f9 80       	ldd	r15, Y+1	; 0x01
   103da:	c7 5c       	subi	r28, 0xC7	; 199
   103dc:	d0 40       	sbci	r29, 0x00	; 0
   103de:	cb 53       	subi	r28, 0x3B	; 59
   103e0:	df 4f       	sbci	r29, 0xFF	; 255
   103e2:	08 81       	ld	r16, Y
   103e4:	19 81       	ldd	r17, Y+1	; 0x01
   103e6:	c5 5c       	subi	r28, 0xC5	; 197
   103e8:	d0 40       	sbci	r29, 0x00	; 0
   103ea:	c2 54       	subi	r28, 0x42	; 66
   103ec:	df 4f       	sbci	r29, 0xFF	; 255
   103ee:	68 81       	ld	r22, Y
   103f0:	79 81       	ldd	r23, Y+1	; 0x01
   103f2:	ce 5b       	subi	r28, 0xBE	; 190
   103f4:	d0 40       	sbci	r29, 0x00	; 0
   103f6:	c4 54       	subi	r28, 0x44	; 68
   103f8:	df 4f       	sbci	r29, 0xFF	; 255
   103fa:	88 81       	ld	r24, Y
   103fc:	99 81       	ldd	r25, Y+1	; 0x01
   103fe:	cc 5b       	subi	r28, 0xBC	; 188
   10400:	d0 40       	sbci	r29, 0x00	; 0
   10402:	0e 94 ba 78 	call	0xf174	; 0xf174 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   10406:	18 2f       	mov	r17, r24
   10408:	81 e0       	ldi	r24, 0x01	; 1
   1040a:	8a 0d       	add	r24, r10
   1040c:	11 23       	and	r17, r17
   1040e:	21 f1       	breq	.+72     	; 0x10458 <__EEPROM_REGION_LENGTH__+0x458>
   10410:	ce 54       	subi	r28, 0x4E	; 78
   10412:	df 4f       	sbci	r29, 0xFF	; 255
   10414:	a8 82       	st	Y, r10
   10416:	c2 5b       	subi	r28, 0xB2	; 178
   10418:	d0 40       	sbci	r29, 0x00	; 0
   1041a:	f6 01       	movw	r30, r12
   1041c:	ed 57       	subi	r30, 0x7D	; 125
   1041e:	fd 4f       	sbci	r31, 0xFD	; 253
   10420:	e6 0d       	add	r30, r6
   10422:	f7 1d       	adc	r31, r7
   10424:	25 91       	lpm	r18, Z+
   10426:	34 91       	lpm	r19, Z
   10428:	cd 53       	subi	r28, 0x3D	; 61
   1042a:	df 4f       	sbci	r29, 0xFF	; 255
   1042c:	e8 81       	ld	r30, Y
   1042e:	f9 81       	ldd	r31, Y+1	; 0x01
   10430:	c3 5c       	subi	r28, 0xC3	; 195
   10432:	d0 40       	sbci	r29, 0x00	; 0
   10434:	84 91       	lpm	r24, Z
   10436:	cf 54       	subi	r28, 0x4F	; 79
   10438:	df 4f       	sbci	r29, 0xFF	; 255
   1043a:	68 81       	ld	r22, Y
   1043c:	c1 5b       	subi	r28, 0xB1	; 177
   1043e:	d0 40       	sbci	r29, 0x00	; 0
   10440:	70 e0       	ldi	r23, 0x00	; 0
   10442:	4a 2d       	mov	r20, r10
   10444:	90 e0       	ldi	r25, 0x00	; 0
   10446:	f9 01       	movw	r30, r18
   10448:	19 95       	eicall
   1044a:	ce 53       	subi	r28, 0x3E	; 62
   1044c:	df 4f       	sbci	r29, 0xFF	; 255
   1044e:	18 83       	st	Y, r17
   10450:	c2 5c       	subi	r28, 0xC2	; 194
   10452:	d0 40       	sbci	r29, 0x00	; 0
   10454:	53 94       	inc	r5
   10456:	d6 cc       	rjmp	.-1620   	; 0xfe04 <__DATA_REGION_LENGTH__+0x4>
   10458:	a8 2e       	mov	r10, r24
   1045a:	1d cf       	rjmp	.-454    	; 0x10296 <__EEPROM_REGION_LENGTH__+0x296>
   1045c:	f4 01       	movw	r30, r8
   1045e:	85 91       	lpm	r24, Z+
   10460:	94 91       	lpm	r25, Z
   10462:	c7 53       	subi	r28, 0x37	; 55
   10464:	df 4f       	sbci	r29, 0xFF	; 255
   10466:	e8 81       	ld	r30, Y
   10468:	f9 81       	ldd	r31, Y+1	; 0x01
   1046a:	c9 5c       	subi	r28, 0xC9	; 201
   1046c:	d0 40       	sbci	r29, 0x00	; 0
   1046e:	44 91       	lpm	r20, Z
   10470:	c8 54       	subi	r28, 0x48	; 72
   10472:	df 4f       	sbci	r29, 0xFF	; 255
   10474:	68 81       	ld	r22, Y
   10476:	79 81       	ldd	r23, Y+1	; 0x01
   10478:	c8 5b       	subi	r28, 0xB8	; 184
   1047a:	d0 40       	sbci	r29, 0x00	; 0
   1047c:	86 0f       	add	r24, r22
   1047e:	97 1f       	adc	r25, r23
   10480:	fc 01       	movw	r30, r24
   10482:	4b 9d       	mul	r20, r11
   10484:	e0 0d       	add	r30, r0
   10486:	f1 1d       	adc	r31, r1
   10488:	11 24       	eor	r1, r1
   1048a:	c2 54       	subi	r28, 0x42	; 66
   1048c:	df 4f       	sbci	r29, 0xFF	; 255
   1048e:	f9 83       	std	Y+1, r31	; 0x01
   10490:	e8 83       	st	Y, r30
   10492:	ce 5b       	subi	r28, 0xBE	; 190
   10494:	d0 40       	sbci	r29, 0x00	; 0
   10496:	b3 94       	inc	r11
   10498:	24 cf       	rjmp	.-440    	; 0x102e2 <__EEPROM_REGION_LENGTH__+0x2e2>
   1049a:	f1 01       	movw	r30, r2
   1049c:	85 91       	lpm	r24, Z+
   1049e:	94 91       	lpm	r25, Z
   104a0:	c5 53       	subi	r28, 0x35	; 53
   104a2:	df 4f       	sbci	r29, 0xFF	; 255
   104a4:	e8 81       	ld	r30, Y
   104a6:	f9 81       	ldd	r31, Y+1	; 0x01
   104a8:	cb 5c       	subi	r28, 0xCB	; 203
   104aa:	d0 40       	sbci	r29, 0x00	; 0
   104ac:	24 91       	lpm	r18, Z
   104ae:	ca 54       	subi	r28, 0x4A	; 74
   104b0:	df 4f       	sbci	r29, 0xFF	; 255
   104b2:	48 81       	ld	r20, Y
   104b4:	59 81       	ldd	r21, Y+1	; 0x01
   104b6:	c6 5b       	subi	r28, 0xB6	; 182
   104b8:	d0 40       	sbci	r29, 0x00	; 0
   104ba:	84 0f       	add	r24, r20
   104bc:	95 1f       	adc	r25, r21
   104be:	bc 01       	movw	r22, r24
   104c0:	2b 9d       	mul	r18, r11
   104c2:	60 0d       	add	r22, r0
   104c4:	71 1d       	adc	r23, r1
   104c6:	11 24       	eor	r1, r1
   104c8:	c4 54       	subi	r28, 0x44	; 68
   104ca:	df 4f       	sbci	r29, 0xFF	; 255
   104cc:	79 83       	std	Y+1, r23	; 0x01
   104ce:	68 83       	st	Y, r22
   104d0:	cc 5b       	subi	r28, 0xBC	; 188
   104d2:	d0 40       	sbci	r29, 0x00	; 0
   104d4:	b3 94       	inc	r11
   104d6:	1d cf       	rjmp	.-454    	; 0x10312 <__EEPROM_REGION_LENGTH__+0x312>
   104d8:	ce 53       	subi	r28, 0x3E	; 62
   104da:	df 4f       	sbci	r29, 0xFF	; 255
   104dc:	f8 81       	ld	r31, Y
   104de:	c2 5c       	subi	r28, 0xC2	; 194
   104e0:	d0 40       	sbci	r29, 0x00	; 0
   104e2:	f1 11       	cpse	r31, r1
   104e4:	0c 94 14 8a 	jmp	0x11428	; 0x11428 <__EEPROM_REGION_LENGTH__+0x1428>
   104e8:	91 2c       	mov	r9, r1
   104ea:	93 01       	movw	r18, r6
   104ec:	28 52       	subi	r18, 0x28	; 40
   104ee:	3d 4f       	sbci	r19, 0xFD	; 253
   104f0:	cc 52       	subi	r28, 0x2C	; 44
   104f2:	df 4f       	sbci	r29, 0xFF	; 255
   104f4:	39 83       	std	Y+1, r19	; 0x01
   104f6:	28 83       	st	Y, r18
   104f8:	c4 5d       	subi	r28, 0xD4	; 212
   104fa:	d0 40       	sbci	r29, 0x00	; 0
   104fc:	cc 52       	subi	r28, 0x2C	; 44
   104fe:	df 4f       	sbci	r29, 0xFF	; 255
   10500:	e8 81       	ld	r30, Y
   10502:	f9 81       	ldd	r31, Y+1	; 0x01
   10504:	c4 5d       	subi	r28, 0xD4	; 212
   10506:	d0 40       	sbci	r29, 0x00	; 0
   10508:	84 91       	lpm	r24, Z
   1050a:	98 16       	cp	r9, r24
   1050c:	08 f0       	brcs	.+2      	; 0x10510 <__EEPROM_REGION_LENGTH__+0x510>
   1050e:	1a c3       	rjmp	.+1588   	; 0x10b44 <__EEPROM_REGION_LENGTH__+0xb44>
   10510:	f7 e1       	ldi	r31, 0x17	; 23
   10512:	9f 9e       	mul	r9, r31
   10514:	20 01       	movw	r4, r0
   10516:	11 24       	eor	r1, r1
   10518:	f2 01       	movw	r30, r4
   1051a:	e7 52       	subi	r30, 0x27	; 39
   1051c:	fe 4f       	sbci	r31, 0xFE	; 254
   1051e:	e6 0d       	add	r30, r6
   10520:	f7 1d       	adc	r31, r7
   10522:	84 91       	lpm	r24, Z
   10524:	c3 53       	subi	r28, 0x33	; 51
   10526:	df 4f       	sbci	r29, 0xFF	; 255
   10528:	68 81       	ld	r22, Y
   1052a:	cd 5c       	subi	r28, 0xCD	; 205
   1052c:	d0 40       	sbci	r29, 0x00	; 0
   1052e:	0e 94 f0 52 	call	0xa5e0	; 0xa5e0 <enable_redraw(unsigned char, unsigned char)>
   10532:	88 23       	and	r24, r24
   10534:	09 f4       	brne	.+2      	; 0x10538 <__EEPROM_REGION_LENGTH__+0x538>
   10536:	83 c1       	rjmp	.+774    	; 0x1083e <__EEPROM_REGION_LENGTH__+0x83e>
   10538:	ce 54       	subi	r28, 0x4E	; 78
   1053a:	df 4f       	sbci	r29, 0xFF	; 255
   1053c:	18 82       	st	Y, r1
   1053e:	c2 5b       	subi	r28, 0xB2	; 178
   10540:	d0 40       	sbci	r29, 0x00	; 0
   10542:	f2 01       	movw	r30, r4
   10544:	e9 52       	subi	r30, 0x29	; 41
   10546:	fe 4f       	sbci	r31, 0xFE	; 254
   10548:	e6 0d       	add	r30, r6
   1054a:	f7 1d       	adc	r31, r7
   1054c:	25 91       	lpm	r18, Z+
   1054e:	34 91       	lpm	r19, Z
   10550:	c2 01       	movw	r24, r4
   10552:	8e 52       	subi	r24, 0x2E	; 46
   10554:	9e 4f       	sbci	r25, 0xFE	; 254
   10556:	a3 01       	movw	r20, r6
   10558:	48 0f       	add	r20, r24
   1055a:	59 1f       	adc	r21, r25
   1055c:	c6 54       	subi	r28, 0x46	; 70
   1055e:	df 4f       	sbci	r29, 0xFF	; 255
   10560:	59 83       	std	Y+1, r21	; 0x01
   10562:	48 83       	st	Y, r20
   10564:	ca 5b       	subi	r28, 0xBA	; 186
   10566:	d0 40       	sbci	r29, 0x00	; 0
   10568:	fa 01       	movw	r30, r20
   1056a:	84 91       	lpm	r24, Z
   1056c:	cf 54       	subi	r28, 0x4F	; 79
   1056e:	df 4f       	sbci	r29, 0xFF	; 255
   10570:	68 81       	ld	r22, Y
   10572:	c1 5b       	subi	r28, 0xB1	; 177
   10574:	d0 40       	sbci	r29, 0x00	; 0
   10576:	70 e0       	ldi	r23, 0x00	; 0
   10578:	40 e0       	ldi	r20, 0x00	; 0
   1057a:	90 e0       	ldi	r25, 0x00	; 0
   1057c:	f9 01       	movw	r30, r18
   1057e:	19 95       	eicall
   10580:	cd 54       	subi	r28, 0x4D	; 77
   10582:	df 4f       	sbci	r29, 0xFF	; 255
   10584:	88 83       	st	Y, r24
   10586:	c3 5b       	subi	r28, 0xB3	; 179
   10588:	d0 40       	sbci	r29, 0x00	; 0
   1058a:	f2 01       	movw	r30, r4
   1058c:	ed 52       	subi	r30, 0x2D	; 45
   1058e:	fe 4f       	sbci	r31, 0xFE	; 254
   10590:	e6 0d       	add	r30, r6
   10592:	f7 1d       	adc	r31, r7
   10594:	25 91       	lpm	r18, Z+
   10596:	34 91       	lpm	r19, Z
   10598:	ca 52       	subi	r28, 0x2A	; 42
   1059a:	df 4f       	sbci	r29, 0xFF	; 255
   1059c:	39 83       	std	Y+1, r19	; 0x01
   1059e:	28 83       	st	Y, r18
   105a0:	c6 5d       	subi	r28, 0xD6	; 214
   105a2:	d0 40       	sbci	r29, 0x00	; 0
   105a4:	f2 01       	movw	r30, r4
   105a6:	ef 52       	subi	r30, 0x2F	; 47
   105a8:	fe 4f       	sbci	r31, 0xFE	; 254
   105aa:	e6 0d       	add	r30, r6
   105ac:	f7 1d       	adc	r31, r7
   105ae:	44 91       	lpm	r20, Z
   105b0:	4f 3f       	cpi	r20, 0xFF	; 255
   105b2:	b9 f0       	breq	.+46     	; 0x105e2 <__EEPROM_REGION_LENGTH__+0x5e2>
   105b4:	f2 01       	movw	r30, r4
   105b6:	e1 53       	subi	r30, 0x31	; 49
   105b8:	fe 4f       	sbci	r31, 0xFE	; 254
   105ba:	e6 0d       	add	r30, r6
   105bc:	f7 1d       	adc	r31, r7
   105be:	24 91       	lpm	r18, Z
   105c0:	f2 01       	movw	r30, r4
   105c2:	e0 53       	subi	r30, 0x30	; 48
   105c4:	fe 4f       	sbci	r31, 0xFE	; 254
   105c6:	e6 0d       	add	r30, r6
   105c8:	f7 1d       	adc	r31, r7
   105ca:	e4 91       	lpm	r30, Z
   105cc:	2e 9f       	mul	r18, r30
   105ce:	20 2d       	mov	r18, r0
   105d0:	11 24       	eor	r1, r1
   105d2:	be 01       	movw	r22, r28
   105d4:	6d 54       	subi	r22, 0x4D	; 77
   105d6:	7f 4f       	sbci	r23, 0xFF	; 255
   105d8:	ce 01       	movw	r24, r28
   105da:	8e 54       	subi	r24, 0x4E	; 78
   105dc:	9f 4f       	sbci	r25, 0xFF	; 255
   105de:	0e 94 fb 74 	call	0xe9f6	; 0xe9f6 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
   105e2:	12 01       	movw	r2, r4
   105e4:	3d e3       	ldi	r19, 0x3D	; 61
   105e6:	23 1a       	sub	r2, r19
   105e8:	3e ef       	ldi	r19, 0xFE	; 254
   105ea:	33 0a       	sbc	r3, r19
   105ec:	26 0c       	add	r2, r6
   105ee:	37 1c       	adc	r3, r7
   105f0:	c2 01       	movw	r24, r4
   105f2:	8b 53       	subi	r24, 0x3B	; 59
   105f4:	9e 4f       	sbci	r25, 0xFE	; 254
   105f6:	a3 01       	movw	r20, r6
   105f8:	48 0f       	add	r20, r24
   105fa:	59 1f       	adc	r21, r25
   105fc:	c0 54       	subi	r28, 0x40	; 64
   105fe:	df 4f       	sbci	r29, 0xFF	; 255
   10600:	59 83       	std	Y+1, r21	; 0x01
   10602:	48 83       	st	Y, r20
   10604:	c0 5c       	subi	r28, 0xC0	; 192
   10606:	d0 40       	sbci	r29, 0x00	; 0
   10608:	09 96       	adiw	r24, 0x09	; 9
   1060a:	b3 01       	movw	r22, r6
   1060c:	68 0f       	add	r22, r24
   1060e:	79 1f       	adc	r23, r25
   10610:	cd 53       	subi	r28, 0x3D	; 61
   10612:	df 4f       	sbci	r29, 0xFF	; 255
   10614:	79 83       	std	Y+1, r23	; 0x01
   10616:	68 83       	st	Y, r22
   10618:	c3 5c       	subi	r28, 0xC3	; 195
   1061a:	d0 40       	sbci	r29, 0x00	; 0
   1061c:	01 97       	sbiw	r24, 0x01	; 1
   1061e:	f3 01       	movw	r30, r6
   10620:	e8 0f       	add	r30, r24
   10622:	f9 1f       	adc	r31, r25
   10624:	c5 53       	subi	r28, 0x35	; 53
   10626:	df 4f       	sbci	r29, 0xFF	; 255
   10628:	f9 83       	std	Y+1, r31	; 0x01
   1062a:	e8 83       	st	Y, r30
   1062c:	cb 5c       	subi	r28, 0xCB	; 203
   1062e:	d0 40       	sbci	r29, 0x00	; 0
   10630:	01 97       	sbiw	r24, 0x01	; 1
   10632:	93 01       	movw	r18, r6
   10634:	28 0f       	add	r18, r24
   10636:	39 1f       	adc	r19, r25
   10638:	c2 53       	subi	r28, 0x32	; 50
   1063a:	df 4f       	sbci	r29, 0xFF	; 255
   1063c:	39 83       	std	Y+1, r19	; 0x01
   1063e:	28 83       	st	Y, r18
   10640:	ce 5c       	subi	r28, 0xCE	; 206
   10642:	d0 40       	sbci	r29, 0x00	; 0
   10644:	01 97       	sbiw	r24, 0x01	; 1
   10646:	a3 01       	movw	r20, r6
   10648:	48 0f       	add	r20, r24
   1064a:	59 1f       	adc	r21, r25
   1064c:	c7 53       	subi	r28, 0x37	; 55
   1064e:	df 4f       	sbci	r29, 0xFF	; 255
   10650:	59 83       	std	Y+1, r21	; 0x01
   10652:	48 83       	st	Y, r20
   10654:	c9 5c       	subi	r28, 0xC9	; 201
   10656:	d0 40       	sbci	r29, 0x00	; 0
   10658:	02 97       	sbiw	r24, 0x02	; 2
   1065a:	b3 01       	movw	r22, r6
   1065c:	68 0f       	add	r22, r24
   1065e:	79 1f       	adc	r23, r25
   10660:	c0 53       	subi	r28, 0x30	; 48
   10662:	df 4f       	sbci	r29, 0xFF	; 255
   10664:	79 83       	std	Y+1, r23	; 0x01
   10666:	68 83       	st	Y, r22
   10668:	c0 5d       	subi	r28, 0xD0	; 208
   1066a:	d0 40       	sbci	r29, 0x00	; 0
   1066c:	02 97       	sbiw	r24, 0x02	; 2
   1066e:	f3 01       	movw	r30, r6
   10670:	e8 0f       	add	r30, r24
   10672:	f9 1f       	adc	r31, r25
   10674:	ce 52       	subi	r28, 0x2E	; 46
   10676:	df 4f       	sbci	r29, 0xFF	; 255
   10678:	f9 83       	std	Y+1, r31	; 0x01
   1067a:	e8 83       	st	Y, r30
   1067c:	c2 5d       	subi	r28, 0xD2	; 210
   1067e:	d0 40       	sbci	r29, 0x00	; 0
   10680:	f1 2c       	mov	r15, r1
   10682:	ce 54       	subi	r28, 0x4E	; 78
   10684:	df 4f       	sbci	r29, 0xFF	; 255
   10686:	88 81       	ld	r24, Y
   10688:	c2 5b       	subi	r28, 0xB2	; 178
   1068a:	d0 40       	sbci	r29, 0x00	; 0
   1068c:	cd 54       	subi	r28, 0x4D	; 77
   1068e:	df 4f       	sbci	r29, 0xFF	; 255
   10690:	98 81       	ld	r25, Y
   10692:	c3 5b       	subi	r28, 0xB3	; 179
   10694:	d0 40       	sbci	r29, 0x00	; 0
   10696:	89 17       	cp	r24, r25
   10698:	08 f0       	brcs	.+2      	; 0x1069c <__EEPROM_REGION_LENGTH__+0x69c>
   1069a:	d1 c0       	rjmp	.+418    	; 0x1083e <__EEPROM_REGION_LENGTH__+0x83e>
   1069c:	f1 01       	movw	r30, r2
   1069e:	45 91       	lpm	r20, Z+
   106a0:	54 91       	lpm	r21, Z
   106a2:	c0 54       	subi	r28, 0x40	; 64
   106a4:	df 4f       	sbci	r29, 0xFF	; 255
   106a6:	e8 81       	ld	r30, Y
   106a8:	f9 81       	ldd	r31, Y+1	; 0x01
   106aa:	c0 5c       	subi	r28, 0xC0	; 192
   106ac:	d0 40       	sbci	r29, 0x00	; 0
   106ae:	25 91       	lpm	r18, Z+
   106b0:	34 91       	lpm	r19, Z
   106b2:	cd 53       	subi	r28, 0x3D	; 61
   106b4:	df 4f       	sbci	r29, 0xFF	; 255
   106b6:	e8 81       	ld	r30, Y
   106b8:	f9 81       	ldd	r31, Y+1	; 0x01
   106ba:	c3 5c       	subi	r28, 0xC3	; 195
   106bc:	d0 40       	sbci	r29, 0x00	; 0
   106be:	94 91       	lpm	r25, Z
   106c0:	99 23       	and	r25, r25
   106c2:	09 f4       	brne	.+2      	; 0x106c6 <__EEPROM_REGION_LENGTH__+0x6c6>
   106c4:	7b c0       	rjmp	.+246    	; 0x107bc <__EEPROM_REGION_LENGTH__+0x7bc>
   106c6:	c8 54       	subi	r28, 0x48	; 72
   106c8:	df 4f       	sbci	r29, 0xFF	; 255
   106ca:	68 81       	ld	r22, Y
   106cc:	79 81       	ldd	r23, Y+1	; 0x01
   106ce:	c8 5b       	subi	r28, 0xB8	; 184
   106d0:	d0 40       	sbci	r29, 0x00	; 0
   106d2:	62 0f       	add	r22, r18
   106d4:	73 1f       	adc	r23, r19
   106d6:	c2 54       	subi	r28, 0x42	; 66
   106d8:	df 4f       	sbci	r29, 0xFF	; 255
   106da:	79 83       	std	Y+1, r23	; 0x01
   106dc:	68 83       	st	Y, r22
   106de:	ce 5b       	subi	r28, 0xBE	; 190
   106e0:	d0 40       	sbci	r29, 0x00	; 0
   106e2:	cd 53       	subi	r28, 0x3D	; 61
   106e4:	df 4f       	sbci	r29, 0xFF	; 255
   106e6:	e8 81       	ld	r30, Y
   106e8:	f9 81       	ldd	r31, Y+1	; 0x01
   106ea:	c3 5c       	subi	r28, 0xC3	; 195
   106ec:	d0 40       	sbci	r29, 0x00	; 0
   106ee:	94 91       	lpm	r25, Z
   106f0:	91 30       	cpi	r25, 0x01	; 1
   106f2:	09 f4       	brne	.+2      	; 0x106f6 <__EEPROM_REGION_LENGTH__+0x6f6>
   106f4:	86 c0       	rjmp	.+268    	; 0x10802 <__EEPROM_REGION_LENGTH__+0x802>
   106f6:	ca 54       	subi	r28, 0x4A	; 74
   106f8:	df 4f       	sbci	r29, 0xFF	; 255
   106fa:	28 81       	ld	r18, Y
   106fc:	39 81       	ldd	r19, Y+1	; 0x01
   106fe:	c6 5b       	subi	r28, 0xB6	; 182
   10700:	d0 40       	sbci	r29, 0x00	; 0
   10702:	24 0f       	add	r18, r20
   10704:	35 1f       	adc	r19, r21
   10706:	c4 54       	subi	r28, 0x44	; 68
   10708:	df 4f       	sbci	r29, 0xFF	; 255
   1070a:	39 83       	std	Y+1, r19	; 0x01
   1070c:	28 83       	st	Y, r18
   1070e:	cc 5b       	subi	r28, 0xBC	; 188
   10710:	d0 40       	sbci	r29, 0x00	; 0
   10712:	c6 54       	subi	r28, 0x46	; 70
   10714:	df 4f       	sbci	r29, 0xFF	; 255
   10716:	e8 81       	ld	r30, Y
   10718:	f9 81       	ldd	r31, Y+1	; 0x01
   1071a:	ca 5b       	subi	r28, 0xBA	; 186
   1071c:	d0 40       	sbci	r29, 0x00	; 0
   1071e:	44 91       	lpm	r20, Z
   10720:	8e 01       	movw	r16, r28
   10722:	0f 57       	subi	r16, 0x7F	; 127
   10724:	1f 4f       	sbci	r17, 0xFF	; 255
   10726:	9e 01       	movw	r18, r28
   10728:	2f 5f       	subi	r18, 0xFF	; 255
   1072a:	3f 4f       	sbci	r19, 0xFF	; 255
   1072c:	cf 54       	subi	r28, 0x4F	; 79
   1072e:	df 4f       	sbci	r29, 0xFF	; 255
   10730:	68 81       	ld	r22, Y
   10732:	c1 5b       	subi	r28, 0xB1	; 177
   10734:	d0 40       	sbci	r29, 0x00	; 0
   10736:	ca 52       	subi	r28, 0x2A	; 42
   10738:	df 4f       	sbci	r29, 0xFF	; 255
   1073a:	e8 81       	ld	r30, Y
   1073c:	f9 81       	ldd	r31, Y+1	; 0x01
   1073e:	c6 5d       	subi	r28, 0xD6	; 214
   10740:	d0 40       	sbci	r29, 0x00	; 0
   10742:	19 95       	eicall
   10744:	c7 53       	subi	r28, 0x37	; 55
   10746:	df 4f       	sbci	r29, 0xFF	; 255
   10748:	e8 81       	ld	r30, Y
   1074a:	f9 81       	ldd	r31, Y+1	; 0x01
   1074c:	c9 5c       	subi	r28, 0xC9	; 201
   1074e:	d0 40       	sbci	r29, 0x00	; 0
   10750:	e4 90       	lpm	r14, Z
   10752:	04 91       	lpm	r16, Z
   10754:	c0 53       	subi	r28, 0x30	; 48
   10756:	df 4f       	sbci	r29, 0xFF	; 255
   10758:	e8 81       	ld	r30, Y
   1075a:	f9 81       	ldd	r31, Y+1	; 0x01
   1075c:	c0 5d       	subi	r28, 0xD0	; 208
   1075e:	d0 40       	sbci	r29, 0x00	; 0
   10760:	25 91       	lpm	r18, Z+
   10762:	34 91       	lpm	r19, Z
   10764:	ce 52       	subi	r28, 0x2E	; 46
   10766:	df 4f       	sbci	r29, 0xFF	; 255
   10768:	e8 81       	ld	r30, Y
   1076a:	f9 81       	ldd	r31, Y+1	; 0x01
   1076c:	c2 5d       	subi	r28, 0xD2	; 210
   1076e:	d0 40       	sbci	r29, 0x00	; 0
   10770:	45 91       	lpm	r20, Z+
   10772:	54 91       	lpm	r21, Z
   10774:	88 24       	eor	r8, r8
   10776:	83 94       	inc	r8
   10778:	be 01       	movw	r22, r28
   1077a:	6f 57       	subi	r22, 0x7F	; 127
   1077c:	7f 4f       	sbci	r23, 0xFF	; 255
   1077e:	5b 01       	movw	r10, r22
   10780:	ce 01       	movw	r24, r28
   10782:	01 96       	adiw	r24, 0x01	; 1
   10784:	6c 01       	movw	r12, r24
   10786:	c2 54       	subi	r28, 0x42	; 66
   10788:	df 4f       	sbci	r29, 0xFF	; 255
   1078a:	68 81       	ld	r22, Y
   1078c:	79 81       	ldd	r23, Y+1	; 0x01
   1078e:	ce 5b       	subi	r28, 0xBE	; 190
   10790:	d0 40       	sbci	r29, 0x00	; 0
   10792:	c4 54       	subi	r28, 0x44	; 68
   10794:	df 4f       	sbci	r29, 0xFF	; 255
   10796:	88 81       	ld	r24, Y
   10798:	99 81       	ldd	r25, Y+1	; 0x01
   1079a:	cc 5b       	subi	r28, 0xBC	; 188
   1079c:	d0 40       	sbci	r29, 0x00	; 0
   1079e:	0e 94 35 75 	call	0xea6a	; 0xea6a <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)>
   107a2:	f3 94       	inc	r15
   107a4:	ce 54       	subi	r28, 0x4E	; 78
   107a6:	df 4f       	sbci	r29, 0xFF	; 255
   107a8:	88 81       	ld	r24, Y
   107aa:	c2 5b       	subi	r28, 0xB2	; 178
   107ac:	d0 40       	sbci	r29, 0x00	; 0
   107ae:	8f 5f       	subi	r24, 0xFF	; 255
   107b0:	ce 54       	subi	r28, 0x4E	; 78
   107b2:	df 4f       	sbci	r29, 0xFF	; 255
   107b4:	88 83       	st	Y, r24
   107b6:	c2 5b       	subi	r28, 0xB2	; 178
   107b8:	d0 40       	sbci	r29, 0x00	; 0
   107ba:	63 cf       	rjmp	.-314    	; 0x10682 <__EEPROM_REGION_LENGTH__+0x682>
   107bc:	c0 54       	subi	r28, 0x40	; 64
   107be:	df 4f       	sbci	r29, 0xFF	; 255
   107c0:	e8 81       	ld	r30, Y
   107c2:	f9 81       	ldd	r31, Y+1	; 0x01
   107c4:	c0 5c       	subi	r28, 0xC0	; 192
   107c6:	d0 40       	sbci	r29, 0x00	; 0
   107c8:	25 91       	lpm	r18, Z+
   107ca:	34 91       	lpm	r19, Z
   107cc:	c5 53       	subi	r28, 0x35	; 53
   107ce:	df 4f       	sbci	r29, 0xFF	; 255
   107d0:	e8 81       	ld	r30, Y
   107d2:	f9 81       	ldd	r31, Y+1	; 0x01
   107d4:	cb 5c       	subi	r28, 0xCB	; 203
   107d6:	d0 40       	sbci	r29, 0x00	; 0
   107d8:	94 91       	lpm	r25, Z
   107da:	c8 54       	subi	r28, 0x48	; 72
   107dc:	df 4f       	sbci	r29, 0xFF	; 255
   107de:	68 81       	ld	r22, Y
   107e0:	79 81       	ldd	r23, Y+1	; 0x01
   107e2:	c8 5b       	subi	r28, 0xB8	; 184
   107e4:	d0 40       	sbci	r29, 0x00	; 0
   107e6:	26 0f       	add	r18, r22
   107e8:	37 1f       	adc	r19, r23
   107ea:	f9 01       	movw	r30, r18
   107ec:	9f 9d       	mul	r25, r15
   107ee:	e0 0d       	add	r30, r0
   107f0:	f1 1d       	adc	r31, r1
   107f2:	11 24       	eor	r1, r1
   107f4:	c2 54       	subi	r28, 0x42	; 66
   107f6:	df 4f       	sbci	r29, 0xFF	; 255
   107f8:	f9 83       	std	Y+1, r31	; 0x01
   107fa:	e8 83       	st	Y, r30
   107fc:	ce 5b       	subi	r28, 0xBE	; 190
   107fe:	d0 40       	sbci	r29, 0x00	; 0
   10800:	70 cf       	rjmp	.-288    	; 0x106e2 <__EEPROM_REGION_LENGTH__+0x6e2>
   10802:	f1 01       	movw	r30, r2
   10804:	25 91       	lpm	r18, Z+
   10806:	34 91       	lpm	r19, Z
   10808:	c2 53       	subi	r28, 0x32	; 50
   1080a:	df 4f       	sbci	r29, 0xFF	; 255
   1080c:	e8 81       	ld	r30, Y
   1080e:	f9 81       	ldd	r31, Y+1	; 0x01
   10810:	ce 5c       	subi	r28, 0xCE	; 206
   10812:	d0 40       	sbci	r29, 0x00	; 0
   10814:	94 91       	lpm	r25, Z
   10816:	ca 54       	subi	r28, 0x4A	; 74
   10818:	df 4f       	sbci	r29, 0xFF	; 255
   1081a:	48 81       	ld	r20, Y
   1081c:	59 81       	ldd	r21, Y+1	; 0x01
   1081e:	c6 5b       	subi	r28, 0xB6	; 182
   10820:	d0 40       	sbci	r29, 0x00	; 0
   10822:	24 0f       	add	r18, r20
   10824:	35 1f       	adc	r19, r21
   10826:	b9 01       	movw	r22, r18
   10828:	9f 9d       	mul	r25, r15
   1082a:	60 0d       	add	r22, r0
   1082c:	71 1d       	adc	r23, r1
   1082e:	11 24       	eor	r1, r1
   10830:	c4 54       	subi	r28, 0x44	; 68
   10832:	df 4f       	sbci	r29, 0xFF	; 255
   10834:	79 83       	std	Y+1, r23	; 0x01
   10836:	68 83       	st	Y, r22
   10838:	cc 5b       	subi	r28, 0xBC	; 188
   1083a:	d0 40       	sbci	r29, 0x00	; 0
   1083c:	6a cf       	rjmp	.-300    	; 0x10712 <__EEPROM_REGION_LENGTH__+0x712>
   1083e:	cb 53       	subi	r28, 0x3B	; 59
   10840:	df 4f       	sbci	r29, 0xFF	; 255
   10842:	e8 81       	ld	r30, Y
   10844:	f9 81       	ldd	r31, Y+1	; 0x01
   10846:	c5 5c       	subi	r28, 0xC5	; 197
   10848:	d0 40       	sbci	r29, 0x00	; 0
   1084a:	ef 2b       	or	r30, r31
   1084c:	09 f4       	brne	.+2      	; 0x10850 <__EEPROM_REGION_LENGTH__+0x850>
   1084e:	57 c1       	rjmp	.+686    	; 0x10afe <__EEPROM_REGION_LENGTH__+0xafe>
   10850:	c9 53       	subi	r28, 0x39	; 57
   10852:	df 4f       	sbci	r29, 0xFF	; 255
   10854:	28 81       	ld	r18, Y
   10856:	39 81       	ldd	r19, Y+1	; 0x01
   10858:	c7 5c       	subi	r28, 0xC7	; 199
   1085a:	d0 40       	sbci	r29, 0x00	; 0
   1085c:	23 2b       	or	r18, r19
   1085e:	09 f4       	brne	.+2      	; 0x10862 <__EEPROM_REGION_LENGTH__+0x862>
   10860:	4e c1       	rjmp	.+668    	; 0x10afe <__EEPROM_REGION_LENGTH__+0xafe>
   10862:	ce 54       	subi	r28, 0x4E	; 78
   10864:	df 4f       	sbci	r29, 0xFF	; 255
   10866:	18 82       	st	Y, r1
   10868:	c2 5b       	subi	r28, 0xB2	; 178
   1086a:	d0 40       	sbci	r29, 0x00	; 0
   1086c:	f2 01       	movw	r30, r4
   1086e:	e9 52       	subi	r30, 0x29	; 41
   10870:	fe 4f       	sbci	r31, 0xFE	; 254
   10872:	e6 0d       	add	r30, r6
   10874:	f7 1d       	adc	r31, r7
   10876:	25 91       	lpm	r18, Z+
   10878:	34 91       	lpm	r19, Z
   1087a:	c2 01       	movw	r24, r4
   1087c:	8e 52       	subi	r24, 0x2E	; 46
   1087e:	9e 4f       	sbci	r25, 0xFE	; 254
   10880:	a3 01       	movw	r20, r6
   10882:	48 0f       	add	r20, r24
   10884:	59 1f       	adc	r21, r25
   10886:	c6 54       	subi	r28, 0x46	; 70
   10888:	df 4f       	sbci	r29, 0xFF	; 255
   1088a:	59 83       	std	Y+1, r21	; 0x01
   1088c:	48 83       	st	Y, r20
   1088e:	ca 5b       	subi	r28, 0xBA	; 186
   10890:	d0 40       	sbci	r29, 0x00	; 0
   10892:	fa 01       	movw	r30, r20
   10894:	84 91       	lpm	r24, Z
   10896:	cf 54       	subi	r28, 0x4F	; 79
   10898:	df 4f       	sbci	r29, 0xFF	; 255
   1089a:	68 81       	ld	r22, Y
   1089c:	c1 5b       	subi	r28, 0xB1	; 177
   1089e:	d0 40       	sbci	r29, 0x00	; 0
   108a0:	70 e0       	ldi	r23, 0x00	; 0
   108a2:	40 e0       	ldi	r20, 0x00	; 0
   108a4:	90 e0       	ldi	r25, 0x00	; 0
   108a6:	f9 01       	movw	r30, r18
   108a8:	19 95       	eicall
   108aa:	cd 54       	subi	r28, 0x4D	; 77
   108ac:	df 4f       	sbci	r29, 0xFF	; 255
   108ae:	88 83       	st	Y, r24
   108b0:	c3 5b       	subi	r28, 0xB3	; 179
   108b2:	d0 40       	sbci	r29, 0x00	; 0
   108b4:	f2 01       	movw	r30, r4
   108b6:	ef 52       	subi	r30, 0x2F	; 47
   108b8:	fe 4f       	sbci	r31, 0xFE	; 254
   108ba:	e6 0d       	add	r30, r6
   108bc:	f7 1d       	adc	r31, r7
   108be:	44 91       	lpm	r20, Z
   108c0:	4f 3f       	cpi	r20, 0xFF	; 255
   108c2:	b9 f0       	breq	.+46     	; 0x108f2 <__EEPROM_REGION_LENGTH__+0x8f2>
   108c4:	f2 01       	movw	r30, r4
   108c6:	e1 53       	subi	r30, 0x31	; 49
   108c8:	fe 4f       	sbci	r31, 0xFE	; 254
   108ca:	e6 0d       	add	r30, r6
   108cc:	f7 1d       	adc	r31, r7
   108ce:	24 91       	lpm	r18, Z
   108d0:	f2 01       	movw	r30, r4
   108d2:	e0 53       	subi	r30, 0x30	; 48
   108d4:	fe 4f       	sbci	r31, 0xFE	; 254
   108d6:	e6 0d       	add	r30, r6
   108d8:	f7 1d       	adc	r31, r7
   108da:	e4 91       	lpm	r30, Z
   108dc:	2e 9f       	mul	r18, r30
   108de:	20 2d       	mov	r18, r0
   108e0:	11 24       	eor	r1, r1
   108e2:	be 01       	movw	r22, r28
   108e4:	6d 54       	subi	r22, 0x4D	; 77
   108e6:	7f 4f       	sbci	r23, 0xFF	; 255
   108e8:	ce 01       	movw	r24, r28
   108ea:	8e 54       	subi	r24, 0x4E	; 78
   108ec:	9f 4f       	sbci	r25, 0xFF	; 255
   108ee:	0e 94 fb 74 	call	0xe9f6	; 0xe9f6 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
   108f2:	ce 54       	subi	r28, 0x4E	; 78
   108f4:	df 4f       	sbci	r29, 0xFF	; 255
   108f6:	f8 81       	ld	r31, Y
   108f8:	c2 5b       	subi	r28, 0xB2	; 178
   108fa:	d0 40       	sbci	r29, 0x00	; 0
   108fc:	ce 52       	subi	r28, 0x2E	; 46
   108fe:	df 4f       	sbci	r29, 0xFF	; 255
   10900:	f8 83       	st	Y, r31
   10902:	c2 5d       	subi	r28, 0xD2	; 210
   10904:	d0 40       	sbci	r29, 0x00	; 0
   10906:	cd 54       	subi	r28, 0x4D	; 77
   10908:	df 4f       	sbci	r29, 0xFF	; 255
   1090a:	28 81       	ld	r18, Y
   1090c:	c3 5b       	subi	r28, 0xB3	; 179
   1090e:	d0 40       	sbci	r29, 0x00	; 0
   10910:	cd 53       	subi	r28, 0x3D	; 61
   10912:	df 4f       	sbci	r29, 0xFF	; 255
   10914:	28 83       	st	Y, r18
   10916:	c3 5c       	subi	r28, 0xC3	; 195
   10918:	d0 40       	sbci	r29, 0x00	; 0
   1091a:	12 01       	movw	r2, r4
   1091c:	3d e3       	ldi	r19, 0x3D	; 61
   1091e:	23 1a       	sub	r2, r19
   10920:	3e ef       	ldi	r19, 0xFE	; 254
   10922:	33 0a       	sbc	r3, r19
   10924:	26 0c       	add	r2, r6
   10926:	37 1c       	adc	r3, r7
   10928:	62 01       	movw	r12, r4
   1092a:	4b e3       	ldi	r20, 0x3B	; 59
   1092c:	c4 1a       	sub	r12, r20
   1092e:	4e ef       	ldi	r20, 0xFE	; 254
   10930:	d4 0a       	sbc	r13, r20
   10932:	c6 0c       	add	r12, r6
   10934:	d7 1c       	adc	r13, r7
   10936:	c2 01       	movw	r24, r4
   10938:	82 53       	subi	r24, 0x32	; 50
   1093a:	9e 4f       	sbci	r25, 0xFE	; 254
   1093c:	b3 01       	movw	r22, r6
   1093e:	68 0f       	add	r22, r24
   10940:	79 1f       	adc	r23, r25
   10942:	c0 54       	subi	r28, 0x40	; 64
   10944:	df 4f       	sbci	r29, 0xFF	; 255
   10946:	79 83       	std	Y+1, r23	; 0x01
   10948:	68 83       	st	Y, r22
   1094a:	c0 5c       	subi	r28, 0xC0	; 192
   1094c:	d0 40       	sbci	r29, 0x00	; 0
   1094e:	01 97       	sbiw	r24, 0x01	; 1
   10950:	f3 01       	movw	r30, r6
   10952:	e8 0f       	add	r30, r24
   10954:	f9 1f       	adc	r31, r25
   10956:	c7 53       	subi	r28, 0x37	; 55
   10958:	df 4f       	sbci	r29, 0xFF	; 255
   1095a:	f9 83       	std	Y+1, r31	; 0x01
   1095c:	e8 83       	st	Y, r30
   1095e:	c9 5c       	subi	r28, 0xC9	; 201
   10960:	d0 40       	sbci	r29, 0x00	; 0
   10962:	01 97       	sbiw	r24, 0x01	; 1
   10964:	93 01       	movw	r18, r6
   10966:	28 0f       	add	r18, r24
   10968:	39 1f       	adc	r19, r25
   1096a:	c5 53       	subi	r28, 0x35	; 53
   1096c:	df 4f       	sbci	r29, 0xFF	; 255
   1096e:	39 83       	std	Y+1, r19	; 0x01
   10970:	28 83       	st	Y, r18
   10972:	cb 5c       	subi	r28, 0xCB	; 203
   10974:	d0 40       	sbci	r29, 0x00	; 0
   10976:	03 97       	sbiw	r24, 0x03	; 3
   10978:	a3 01       	movw	r20, r6
   1097a:	48 0f       	add	r20, r24
   1097c:	59 1f       	adc	r21, r25
   1097e:	c2 53       	subi	r28, 0x32	; 50
   10980:	df 4f       	sbci	r29, 0xFF	; 255
   10982:	59 83       	std	Y+1, r21	; 0x01
   10984:	48 83       	st	Y, r20
   10986:	ce 5c       	subi	r28, 0xCE	; 206
   10988:	d0 40       	sbci	r29, 0x00	; 0
   1098a:	02 97       	sbiw	r24, 0x02	; 2
   1098c:	b3 01       	movw	r22, r6
   1098e:	68 0f       	add	r22, r24
   10990:	79 1f       	adc	r23, r25
   10992:	c0 53       	subi	r28, 0x30	; 48
   10994:	df 4f       	sbci	r29, 0xFF	; 255
   10996:	79 83       	std	Y+1, r23	; 0x01
   10998:	68 83       	st	Y, r22
   1099a:	c0 5d       	subi	r28, 0xD0	; 208
   1099c:	d0 40       	sbci	r29, 0x00	; 0
   1099e:	b1 2c       	mov	r11, r1
   109a0:	a1 2c       	mov	r10, r1
   109a2:	ce 52       	subi	r28, 0x2E	; 46
   109a4:	df 4f       	sbci	r29, 0xFF	; 255
   109a6:	88 80       	ld	r8, Y
   109a8:	c2 5d       	subi	r28, 0xD2	; 210
   109aa:	d0 40       	sbci	r29, 0x00	; 0
   109ac:	8a 0c       	add	r8, r10
   109ae:	cd 53       	subi	r28, 0x3D	; 61
   109b0:	df 4f       	sbci	r29, 0xFF	; 255
   109b2:	78 81       	ld	r23, Y
   109b4:	c3 5c       	subi	r28, 0xC3	; 195
   109b6:	d0 40       	sbci	r29, 0x00	; 0
   109b8:	87 16       	cp	r8, r23
   109ba:	08 f0       	brcs	.+2      	; 0x109be <__EEPROM_REGION_LENGTH__+0x9be>
   109bc:	a0 c0       	rjmp	.+320    	; 0x10afe <__EEPROM_REGION_LENGTH__+0xafe>
   109be:	f1 01       	movw	r30, r2
   109c0:	25 91       	lpm	r18, Z+
   109c2:	34 91       	lpm	r19, Z
   109c4:	f6 01       	movw	r30, r12
   109c6:	85 91       	lpm	r24, Z+
   109c8:	94 91       	lpm	r25, Z
   109ca:	c0 54       	subi	r28, 0x40	; 64
   109cc:	df 4f       	sbci	r29, 0xFF	; 255
   109ce:	e8 81       	ld	r30, Y
   109d0:	f9 81       	ldd	r31, Y+1	; 0x01
   109d2:	c0 5c       	subi	r28, 0xC0	; 192
   109d4:	d0 40       	sbci	r29, 0x00	; 0
   109d6:	44 91       	lpm	r20, Z
   109d8:	44 23       	and	r20, r20
   109da:	09 f4       	brne	.+2      	; 0x109de <__EEPROM_REGION_LENGTH__+0x9de>
   109dc:	92 c0       	rjmp	.+292    	; 0x10b02 <__EEPROM_REGION_LENGTH__+0xb02>
   109de:	c8 54       	subi	r28, 0x48	; 72
   109e0:	df 4f       	sbci	r29, 0xFF	; 255
   109e2:	48 81       	ld	r20, Y
   109e4:	59 81       	ldd	r21, Y+1	; 0x01
   109e6:	c8 5b       	subi	r28, 0xB8	; 184
   109e8:	d0 40       	sbci	r29, 0x00	; 0
   109ea:	48 0f       	add	r20, r24
   109ec:	59 1f       	adc	r21, r25
   109ee:	c2 54       	subi	r28, 0x42	; 66
   109f0:	df 4f       	sbci	r29, 0xFF	; 255
   109f2:	59 83       	std	Y+1, r21	; 0x01
   109f4:	48 83       	st	Y, r20
   109f6:	ce 5b       	subi	r28, 0xBE	; 190
   109f8:	d0 40       	sbci	r29, 0x00	; 0
   109fa:	c0 54       	subi	r28, 0x40	; 64
   109fc:	df 4f       	sbci	r29, 0xFF	; 255
   109fe:	e8 81       	ld	r30, Y
   10a00:	f9 81       	ldd	r31, Y+1	; 0x01
   10a02:	c0 5c       	subi	r28, 0xC0	; 192
   10a04:	d0 40       	sbci	r29, 0x00	; 0
   10a06:	84 91       	lpm	r24, Z
   10a08:	ca 54       	subi	r28, 0x4A	; 74
   10a0a:	df 4f       	sbci	r29, 0xFF	; 255
   10a0c:	48 81       	ld	r20, Y
   10a0e:	59 81       	ldd	r21, Y+1	; 0x01
   10a10:	c6 5b       	subi	r28, 0xB6	; 182
   10a12:	d0 40       	sbci	r29, 0x00	; 0
   10a14:	81 30       	cpi	r24, 0x01	; 1
   10a16:	c1 f4       	brne	.+48     	; 0x10a48 <__EEPROM_REGION_LENGTH__+0xa48>
   10a18:	f1 01       	movw	r30, r2
   10a1a:	85 91       	lpm	r24, Z+
   10a1c:	94 91       	lpm	r25, Z
   10a1e:	c5 53       	subi	r28, 0x35	; 53
   10a20:	df 4f       	sbci	r29, 0xFF	; 255
   10a22:	e8 81       	ld	r30, Y
   10a24:	f9 81       	ldd	r31, Y+1	; 0x01
   10a26:	cb 5c       	subi	r28, 0xCB	; 203
   10a28:	d0 40       	sbci	r29, 0x00	; 0
   10a2a:	44 91       	lpm	r20, Z
   10a2c:	ca 54       	subi	r28, 0x4A	; 74
   10a2e:	df 4f       	sbci	r29, 0xFF	; 255
   10a30:	28 81       	ld	r18, Y
   10a32:	39 81       	ldd	r19, Y+1	; 0x01
   10a34:	c6 5b       	subi	r28, 0xB6	; 182
   10a36:	d0 40       	sbci	r29, 0x00	; 0
   10a38:	82 0f       	add	r24, r18
   10a3a:	93 1f       	adc	r25, r19
   10a3c:	4a 9d       	mul	r20, r10
   10a3e:	90 01       	movw	r18, r0
   10a40:	4b 9d       	mul	r20, r11
   10a42:	30 0d       	add	r19, r0
   10a44:	11 24       	eor	r1, r1
   10a46:	ac 01       	movw	r20, r24
   10a48:	42 0f       	add	r20, r18
   10a4a:	53 1f       	adc	r21, r19
   10a4c:	c4 54       	subi	r28, 0x44	; 68
   10a4e:	df 4f       	sbci	r29, 0xFF	; 255
   10a50:	59 83       	std	Y+1, r21	; 0x01
   10a52:	48 83       	st	Y, r20
   10a54:	cc 5b       	subi	r28, 0xBC	; 188
   10a56:	d0 40       	sbci	r29, 0x00	; 0
   10a58:	c2 53       	subi	r28, 0x32	; 50
   10a5a:	df 4f       	sbci	r29, 0xFF	; 255
   10a5c:	e8 81       	ld	r30, Y
   10a5e:	f9 81       	ldd	r31, Y+1	; 0x01
   10a60:	ce 5c       	subi	r28, 0xCE	; 206
   10a62:	d0 40       	sbci	r29, 0x00	; 0
   10a64:	25 91       	lpm	r18, Z+
   10a66:	34 91       	lpm	r19, Z
   10a68:	c0 53       	subi	r28, 0x30	; 48
   10a6a:	df 4f       	sbci	r29, 0xFF	; 255
   10a6c:	e8 81       	ld	r30, Y
   10a6e:	f9 81       	ldd	r31, Y+1	; 0x01
   10a70:	c0 5d       	subi	r28, 0xD0	; 208
   10a72:	d0 40       	sbci	r29, 0x00	; 0
   10a74:	45 91       	lpm	r20, Z+
   10a76:	54 91       	lpm	r21, Z
   10a78:	c9 53       	subi	r28, 0x39	; 57
   10a7a:	df 4f       	sbci	r29, 0xFF	; 255
   10a7c:	e8 80       	ld	r14, Y
   10a7e:	f9 80       	ldd	r15, Y+1	; 0x01
   10a80:	c7 5c       	subi	r28, 0xC7	; 199
   10a82:	d0 40       	sbci	r29, 0x00	; 0
   10a84:	cb 53       	subi	r28, 0x3B	; 59
   10a86:	df 4f       	sbci	r29, 0xFF	; 255
   10a88:	08 81       	ld	r16, Y
   10a8a:	19 81       	ldd	r17, Y+1	; 0x01
   10a8c:	c5 5c       	subi	r28, 0xC5	; 197
   10a8e:	d0 40       	sbci	r29, 0x00	; 0
   10a90:	c2 54       	subi	r28, 0x42	; 66
   10a92:	df 4f       	sbci	r29, 0xFF	; 255
   10a94:	68 81       	ld	r22, Y
   10a96:	79 81       	ldd	r23, Y+1	; 0x01
   10a98:	ce 5b       	subi	r28, 0xBE	; 190
   10a9a:	d0 40       	sbci	r29, 0x00	; 0
   10a9c:	c4 54       	subi	r28, 0x44	; 68
   10a9e:	df 4f       	sbci	r29, 0xFF	; 255
   10aa0:	88 81       	ld	r24, Y
   10aa2:	99 81       	ldd	r25, Y+1	; 0x01
   10aa4:	cc 5b       	subi	r28, 0xBC	; 188
   10aa6:	d0 40       	sbci	r29, 0x00	; 0
   10aa8:	0e 94 ba 78 	call	0xf174	; 0xf174 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   10aac:	18 2f       	mov	r17, r24
   10aae:	5f ef       	ldi	r21, 0xFF	; 255
   10ab0:	a5 1a       	sub	r10, r21
   10ab2:	b5 0a       	sbc	r11, r21
   10ab4:	88 23       	and	r24, r24
   10ab6:	09 f4       	brne	.+2      	; 0x10aba <__EEPROM_REGION_LENGTH__+0xaba>
   10ab8:	74 cf       	rjmp	.-280    	; 0x109a2 <__EEPROM_REGION_LENGTH__+0x9a2>
   10aba:	ce 54       	subi	r28, 0x4E	; 78
   10abc:	df 4f       	sbci	r29, 0xFF	; 255
   10abe:	88 82       	st	Y, r8
   10ac0:	c2 5b       	subi	r28, 0xB2	; 178
   10ac2:	d0 40       	sbci	r29, 0x00	; 0
   10ac4:	f2 01       	movw	r30, r4
   10ac6:	eb 52       	subi	r30, 0x2B	; 43
   10ac8:	fe 4f       	sbci	r31, 0xFE	; 254
   10aca:	e6 0d       	add	r30, r6
   10acc:	f7 1d       	adc	r31, r7
   10ace:	25 91       	lpm	r18, Z+
   10ad0:	34 91       	lpm	r19, Z
   10ad2:	c6 54       	subi	r28, 0x46	; 70
   10ad4:	df 4f       	sbci	r29, 0xFF	; 255
   10ad6:	e8 81       	ld	r30, Y
   10ad8:	f9 81       	ldd	r31, Y+1	; 0x01
   10ada:	ca 5b       	subi	r28, 0xBA	; 186
   10adc:	d0 40       	sbci	r29, 0x00	; 0
   10ade:	84 91       	lpm	r24, Z
   10ae0:	cf 54       	subi	r28, 0x4F	; 79
   10ae2:	df 4f       	sbci	r29, 0xFF	; 255
   10ae4:	68 81       	ld	r22, Y
   10ae6:	c1 5b       	subi	r28, 0xB1	; 177
   10ae8:	d0 40       	sbci	r29, 0x00	; 0
   10aea:	70 e0       	ldi	r23, 0x00	; 0
   10aec:	48 2d       	mov	r20, r8
   10aee:	90 e0       	ldi	r25, 0x00	; 0
   10af0:	f9 01       	movw	r30, r18
   10af2:	19 95       	eicall
   10af4:	ce 53       	subi	r28, 0x3E	; 62
   10af6:	df 4f       	sbci	r29, 0xFF	; 255
   10af8:	18 83       	st	Y, r17
   10afa:	c2 5c       	subi	r28, 0xC2	; 194
   10afc:	d0 40       	sbci	r29, 0x00	; 0
   10afe:	93 94       	inc	r9
   10b00:	fd cc       	rjmp	.-1542   	; 0x104fc <__EEPROM_REGION_LENGTH__+0x4fc>
   10b02:	f6 01       	movw	r30, r12
   10b04:	85 91       	lpm	r24, Z+
   10b06:	94 91       	lpm	r25, Z
   10b08:	c7 53       	subi	r28, 0x37	; 55
   10b0a:	df 4f       	sbci	r29, 0xFF	; 255
   10b0c:	e8 81       	ld	r30, Y
   10b0e:	f9 81       	ldd	r31, Y+1	; 0x01
   10b10:	c9 5c       	subi	r28, 0xC9	; 201
   10b12:	d0 40       	sbci	r29, 0x00	; 0
   10b14:	64 91       	lpm	r22, Z
   10b16:	c8 54       	subi	r28, 0x48	; 72
   10b18:	df 4f       	sbci	r29, 0xFF	; 255
   10b1a:	48 81       	ld	r20, Y
   10b1c:	59 81       	ldd	r21, Y+1	; 0x01
   10b1e:	c8 5b       	subi	r28, 0xB8	; 184
   10b20:	d0 40       	sbci	r29, 0x00	; 0
   10b22:	84 0f       	add	r24, r20
   10b24:	95 1f       	adc	r25, r21
   10b26:	6a 9d       	mul	r22, r10
   10b28:	a0 01       	movw	r20, r0
   10b2a:	6b 9d       	mul	r22, r11
   10b2c:	50 0d       	add	r21, r0
   10b2e:	11 24       	eor	r1, r1
   10b30:	bc 01       	movw	r22, r24
   10b32:	64 0f       	add	r22, r20
   10b34:	75 1f       	adc	r23, r21
   10b36:	c2 54       	subi	r28, 0x42	; 66
   10b38:	df 4f       	sbci	r29, 0xFF	; 255
   10b3a:	79 83       	std	Y+1, r23	; 0x01
   10b3c:	68 83       	st	Y, r22
   10b3e:	ce 5b       	subi	r28, 0xBE	; 190
   10b40:	d0 40       	sbci	r29, 0x00	; 0
   10b42:	5b cf       	rjmp	.-330    	; 0x109fa <__EEPROM_REGION_LENGTH__+0x9fa>
   10b44:	ce 53       	subi	r28, 0x3E	; 62
   10b46:	df 4f       	sbci	r29, 0xFF	; 255
   10b48:	f8 81       	ld	r31, Y
   10b4a:	c2 5c       	subi	r28, 0xC2	; 194
   10b4c:	d0 40       	sbci	r29, 0x00	; 0
   10b4e:	f1 11       	cpse	r31, r1
   10b50:	6b c4       	rjmp	.+2262   	; 0x11428 <__EEPROM_REGION_LENGTH__+0x1428>
   10b52:	21 2c       	mov	r2, r1
   10b54:	93 01       	movw	r18, r6
   10b56:	25 52       	subi	r18, 0x25	; 37
   10b58:	3d 4f       	sbci	r19, 0xFD	; 253
   10b5a:	c0 52       	subi	r28, 0x20	; 32
   10b5c:	df 4f       	sbci	r29, 0xFF	; 255
   10b5e:	39 83       	std	Y+1, r19	; 0x01
   10b60:	28 83       	st	Y, r18
   10b62:	c0 5e       	subi	r28, 0xE0	; 224
   10b64:	d0 40       	sbci	r29, 0x00	; 0
   10b66:	ae 01       	movw	r20, r28
   10b68:	4f 57       	subi	r20, 0x7F	; 127
   10b6a:	5f 4f       	sbci	r21, 0xFF	; 255
   10b6c:	cc 54       	subi	r28, 0x4C	; 76
   10b6e:	df 4f       	sbci	r29, 0xFF	; 255
   10b70:	59 83       	std	Y+1, r21	; 0x01
   10b72:	48 83       	st	Y, r20
   10b74:	c4 5b       	subi	r28, 0xB4	; 180
   10b76:	d0 40       	sbci	r29, 0x00	; 0
   10b78:	c0 52       	subi	r28, 0x20	; 32
   10b7a:	df 4f       	sbci	r29, 0xFF	; 255
   10b7c:	e8 81       	ld	r30, Y
   10b7e:	f9 81       	ldd	r31, Y+1	; 0x01
   10b80:	c0 5e       	subi	r28, 0xE0	; 224
   10b82:	d0 40       	sbci	r29, 0x00	; 0
   10b84:	84 91       	lpm	r24, Z
   10b86:	28 16       	cp	r2, r24
   10b88:	08 f0       	brcs	.+2      	; 0x10b8c <__EEPROM_REGION_LENGTH__+0xb8c>
   10b8a:	54 c4       	rjmp	.+2216   	; 0x11434 <__EEPROM_REGION_LENGTH__+0x1434>
   10b8c:	fe e1       	ldi	r31, 0x1E	; 30
   10b8e:	2f 9e       	mul	r2, r31
   10b90:	20 01       	movw	r4, r0
   10b92:	11 24       	eor	r1, r1
   10b94:	f2 01       	movw	r30, r4
   10b96:	ed 52       	subi	r30, 0x2D	; 45
   10b98:	fd 4f       	sbci	r31, 0xFD	; 253
   10b9a:	e6 0d       	add	r30, r6
   10b9c:	f7 1d       	adc	r31, r7
   10b9e:	84 91       	lpm	r24, Z
   10ba0:	c3 53       	subi	r28, 0x33	; 51
   10ba2:	df 4f       	sbci	r29, 0xFF	; 255
   10ba4:	68 81       	ld	r22, Y
   10ba6:	cd 5c       	subi	r28, 0xCD	; 205
   10ba8:	d0 40       	sbci	r29, 0x00	; 0
   10baa:	0e 94 f0 52 	call	0xa5e0	; 0xa5e0 <enable_redraw(unsigned char, unsigned char)>
   10bae:	88 23       	and	r24, r24
   10bb0:	09 f4       	brne	.+2      	; 0x10bb4 <__EEPROM_REGION_LENGTH__+0xbb4>
   10bb2:	68 c2       	rjmp	.+1232   	; 0x11084 <__EEPROM_REGION_LENGTH__+0x1084>
   10bb4:	ce 54       	subi	r28, 0x4E	; 78
   10bb6:	df 4f       	sbci	r29, 0xFF	; 255
   10bb8:	18 82       	st	Y, r1
   10bba:	c2 5b       	subi	r28, 0xB2	; 178
   10bbc:	d0 40       	sbci	r29, 0x00	; 0
   10bbe:	f2 01       	movw	r30, r4
   10bc0:	e1 53       	subi	r30, 0x31	; 49
   10bc2:	fd 4f       	sbci	r31, 0xFD	; 253
   10bc4:	e6 0d       	add	r30, r6
   10bc6:	f7 1d       	adc	r31, r7
   10bc8:	25 91       	lpm	r18, Z+
   10bca:	34 91       	lpm	r19, Z
   10bcc:	c2 01       	movw	r24, r4
   10bce:	86 53       	subi	r24, 0x36	; 54
   10bd0:	9d 4f       	sbci	r25, 0xFD	; 253
   10bd2:	a3 01       	movw	r20, r6
   10bd4:	48 0f       	add	r20, r24
   10bd6:	59 1f       	adc	r21, r25
   10bd8:	c6 54       	subi	r28, 0x46	; 70
   10bda:	df 4f       	sbci	r29, 0xFF	; 255
   10bdc:	59 83       	std	Y+1, r21	; 0x01
   10bde:	48 83       	st	Y, r20
   10be0:	ca 5b       	subi	r28, 0xBA	; 186
   10be2:	d0 40       	sbci	r29, 0x00	; 0
   10be4:	fa 01       	movw	r30, r20
   10be6:	84 91       	lpm	r24, Z
   10be8:	cf 54       	subi	r28, 0x4F	; 79
   10bea:	df 4f       	sbci	r29, 0xFF	; 255
   10bec:	68 81       	ld	r22, Y
   10bee:	c1 5b       	subi	r28, 0xB1	; 177
   10bf0:	d0 40       	sbci	r29, 0x00	; 0
   10bf2:	70 e0       	ldi	r23, 0x00	; 0
   10bf4:	40 e0       	ldi	r20, 0x00	; 0
   10bf6:	90 e0       	ldi	r25, 0x00	; 0
   10bf8:	f9 01       	movw	r30, r18
   10bfa:	19 95       	eicall
   10bfc:	cd 54       	subi	r28, 0x4D	; 77
   10bfe:	df 4f       	sbci	r29, 0xFF	; 255
   10c00:	88 83       	st	Y, r24
   10c02:	c3 5b       	subi	r28, 0xB3	; 179
   10c04:	d0 40       	sbci	r29, 0x00	; 0
   10c06:	f2 01       	movw	r30, r4
   10c08:	e5 53       	subi	r30, 0x35	; 53
   10c0a:	fd 4f       	sbci	r31, 0xFD	; 253
   10c0c:	e6 0d       	add	r30, r6
   10c0e:	f7 1d       	adc	r31, r7
   10c10:	25 91       	lpm	r18, Z+
   10c12:	34 91       	lpm	r19, Z
   10c14:	ce 51       	subi	r28, 0x1E	; 30
   10c16:	df 4f       	sbci	r29, 0xFF	; 255
   10c18:	39 83       	std	Y+1, r19	; 0x01
   10c1a:	28 83       	st	Y, r18
   10c1c:	c2 5e       	subi	r28, 0xE2	; 226
   10c1e:	d0 40       	sbci	r29, 0x00	; 0
   10c20:	f2 01       	movw	r30, r4
   10c22:	e7 53       	subi	r30, 0x37	; 55
   10c24:	fd 4f       	sbci	r31, 0xFD	; 253
   10c26:	e6 0d       	add	r30, r6
   10c28:	f7 1d       	adc	r31, r7
   10c2a:	44 91       	lpm	r20, Z
   10c2c:	c2 01       	movw	r24, r4
   10c2e:	89 53       	subi	r24, 0x39	; 57
   10c30:	9d 4f       	sbci	r25, 0xFD	; 253
   10c32:	b3 01       	movw	r22, r6
   10c34:	68 0f       	add	r22, r24
   10c36:	79 1f       	adc	r23, r25
   10c38:	c0 53       	subi	r28, 0x30	; 48
   10c3a:	df 4f       	sbci	r29, 0xFF	; 255
   10c3c:	79 83       	std	Y+1, r23	; 0x01
   10c3e:	68 83       	st	Y, r22
   10c40:	c0 5d       	subi	r28, 0xD0	; 208
   10c42:	d0 40       	sbci	r29, 0x00	; 0
   10c44:	4f 3f       	cpi	r20, 0xFF	; 255
   10c46:	99 f0       	breq	.+38     	; 0x10c6e <__EEPROM_REGION_LENGTH__+0xc6e>
   10c48:	fb 01       	movw	r30, r22
   10c4a:	24 91       	lpm	r18, Z
   10c4c:	f2 01       	movw	r30, r4
   10c4e:	e8 53       	subi	r30, 0x38	; 56
   10c50:	fd 4f       	sbci	r31, 0xFD	; 253
   10c52:	e6 0d       	add	r30, r6
   10c54:	f7 1d       	adc	r31, r7
   10c56:	e4 91       	lpm	r30, Z
   10c58:	2e 9f       	mul	r18, r30
   10c5a:	20 2d       	mov	r18, r0
   10c5c:	11 24       	eor	r1, r1
   10c5e:	be 01       	movw	r22, r28
   10c60:	6d 54       	subi	r22, 0x4D	; 77
   10c62:	7f 4f       	sbci	r23, 0xFF	; 255
   10c64:	ce 01       	movw	r24, r28
   10c66:	8e 54       	subi	r24, 0x4E	; 78
   10c68:	9f 4f       	sbci	r25, 0xFF	; 255
   10c6a:	0e 94 fb 74 	call	0xe9f6	; 0xe9f6 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
   10c6e:	c2 01       	movw	r24, r4
   10c70:	8a 53       	subi	r24, 0x3A	; 58
   10c72:	9d 4f       	sbci	r25, 0xFD	; 253
   10c74:	93 01       	movw	r18, r6
   10c76:	28 0f       	add	r18, r24
   10c78:	39 1f       	adc	r19, r25
   10c7a:	c0 54       	subi	r28, 0x40	; 64
   10c7c:	df 4f       	sbci	r29, 0xFF	; 255
   10c7e:	39 83       	std	Y+1, r19	; 0x01
   10c80:	28 83       	st	Y, r18
   10c82:	c0 5c       	subi	r28, 0xC0	; 192
   10c84:	d0 40       	sbci	r29, 0x00	; 0
   10c86:	40 97       	sbiw	r24, 0x10	; 16
   10c88:	a3 01       	movw	r20, r6
   10c8a:	48 0f       	add	r20, r24
   10c8c:	59 1f       	adc	r21, r25
   10c8e:	cd 53       	subi	r28, 0x3D	; 61
   10c90:	df 4f       	sbci	r29, 0xFF	; 255
   10c92:	59 83       	std	Y+1, r21	; 0x01
   10c94:	48 83       	st	Y, r20
   10c96:	c3 5c       	subi	r28, 0xC3	; 195
   10c98:	d0 40       	sbci	r29, 0x00	; 0
   10c9a:	02 96       	adiw	r24, 0x02	; 2
   10c9c:	b3 01       	movw	r22, r6
   10c9e:	68 0f       	add	r22, r24
   10ca0:	79 1f       	adc	r23, r25
   10ca2:	c7 53       	subi	r28, 0x37	; 55
   10ca4:	df 4f       	sbci	r29, 0xFF	; 255
   10ca6:	79 83       	std	Y+1, r23	; 0x01
   10ca8:	68 83       	st	Y, r22
   10caa:	c9 5c       	subi	r28, 0xC9	; 201
   10cac:	d0 40       	sbci	r29, 0x00	; 0
   10cae:	0d 96       	adiw	r24, 0x0d	; 13
   10cb0:	f3 01       	movw	r30, r6
   10cb2:	e8 0f       	add	r30, r24
   10cb4:	f9 1f       	adc	r31, r25
   10cb6:	c5 53       	subi	r28, 0x35	; 53
   10cb8:	df 4f       	sbci	r29, 0xFF	; 255
   10cba:	f9 83       	std	Y+1, r31	; 0x01
   10cbc:	e8 83       	st	Y, r30
   10cbe:	cb 5c       	subi	r28, 0xCB	; 203
   10cc0:	d0 40       	sbci	r29, 0x00	; 0
   10cc2:	01 97       	sbiw	r24, 0x01	; 1
   10cc4:	93 01       	movw	r18, r6
   10cc6:	28 0f       	add	r18, r24
   10cc8:	39 1f       	adc	r19, r25
   10cca:	c2 53       	subi	r28, 0x32	; 50
   10ccc:	df 4f       	sbci	r29, 0xFF	; 255
   10cce:	39 83       	std	Y+1, r19	; 0x01
   10cd0:	28 83       	st	Y, r18
   10cd2:	ce 5c       	subi	r28, 0xCE	; 206
   10cd4:	d0 40       	sbci	r29, 0x00	; 0
   10cd6:	0d 96       	adiw	r24, 0x0d	; 13
   10cd8:	a3 01       	movw	r20, r6
   10cda:	48 0f       	add	r20, r24
   10cdc:	59 1f       	adc	r21, r25
   10cde:	ce 52       	subi	r28, 0x2E	; 46
   10ce0:	df 4f       	sbci	r29, 0xFF	; 255
   10ce2:	59 83       	std	Y+1, r21	; 0x01
   10ce4:	48 83       	st	Y, r20
   10ce6:	c2 5d       	subi	r28, 0xD2	; 210
   10ce8:	d0 40       	sbci	r29, 0x00	; 0
   10cea:	0f 97       	sbiw	r24, 0x0f	; 15
   10cec:	b3 01       	movw	r22, r6
   10cee:	68 0f       	add	r22, r24
   10cf0:	79 1f       	adc	r23, r25
   10cf2:	cc 52       	subi	r28, 0x2C	; 44
   10cf4:	df 4f       	sbci	r29, 0xFF	; 255
   10cf6:	79 83       	std	Y+1, r23	; 0x01
   10cf8:	68 83       	st	Y, r22
   10cfa:	c4 5d       	subi	r28, 0xD4	; 212
   10cfc:	d0 40       	sbci	r29, 0x00	; 0
   10cfe:	02 97       	sbiw	r24, 0x02	; 2
   10d00:	f3 01       	movw	r30, r6
   10d02:	e8 0f       	add	r30, r24
   10d04:	f9 1f       	adc	r31, r25
   10d06:	ca 52       	subi	r28, 0x2A	; 42
   10d08:	df 4f       	sbci	r29, 0xFF	; 255
   10d0a:	f9 83       	std	Y+1, r31	; 0x01
   10d0c:	e8 83       	st	Y, r30
   10d0e:	c6 5d       	subi	r28, 0xD6	; 214
   10d10:	d0 40       	sbci	r29, 0x00	; 0
   10d12:	01 97       	sbiw	r24, 0x01	; 1
   10d14:	93 01       	movw	r18, r6
   10d16:	28 0f       	add	r18, r24
   10d18:	39 1f       	adc	r19, r25
   10d1a:	c8 52       	subi	r28, 0x28	; 40
   10d1c:	df 4f       	sbci	r29, 0xFF	; 255
   10d1e:	39 83       	std	Y+1, r19	; 0x01
   10d20:	28 83       	st	Y, r18
   10d22:	c8 5d       	subi	r28, 0xD8	; 216
   10d24:	d0 40       	sbci	r29, 0x00	; 0
   10d26:	01 97       	sbiw	r24, 0x01	; 1
   10d28:	a3 01       	movw	r20, r6
   10d2a:	48 0f       	add	r20, r24
   10d2c:	59 1f       	adc	r21, r25
   10d2e:	c6 52       	subi	r28, 0x26	; 38
   10d30:	df 4f       	sbci	r29, 0xFF	; 255
   10d32:	59 83       	std	Y+1, r21	; 0x01
   10d34:	48 83       	st	Y, r20
   10d36:	ca 5d       	subi	r28, 0xDA	; 218
   10d38:	d0 40       	sbci	r29, 0x00	; 0
   10d3a:	02 97       	sbiw	r24, 0x02	; 2
   10d3c:	b3 01       	movw	r22, r6
   10d3e:	68 0f       	add	r22, r24
   10d40:	79 1f       	adc	r23, r25
   10d42:	c4 52       	subi	r28, 0x24	; 36
   10d44:	df 4f       	sbci	r29, 0xFF	; 255
   10d46:	79 83       	std	Y+1, r23	; 0x01
   10d48:	68 83       	st	Y, r22
   10d4a:	cc 5d       	subi	r28, 0xDC	; 220
   10d4c:	d0 40       	sbci	r29, 0x00	; 0
   10d4e:	02 97       	sbiw	r24, 0x02	; 2
   10d50:	f3 01       	movw	r30, r6
   10d52:	e8 0f       	add	r30, r24
   10d54:	f9 1f       	adc	r31, r25
   10d56:	c2 52       	subi	r28, 0x22	; 34
   10d58:	df 4f       	sbci	r29, 0xFF	; 255
   10d5a:	f9 83       	std	Y+1, r31	; 0x01
   10d5c:	e8 83       	st	Y, r30
   10d5e:	ce 5d       	subi	r28, 0xDE	; 222
   10d60:	d0 40       	sbci	r29, 0x00	; 0
   10d62:	31 2c       	mov	r3, r1
   10d64:	91 2c       	mov	r9, r1
   10d66:	ce 54       	subi	r28, 0x4E	; 78
   10d68:	df 4f       	sbci	r29, 0xFF	; 255
   10d6a:	88 81       	ld	r24, Y
   10d6c:	c2 5b       	subi	r28, 0xB2	; 178
   10d6e:	d0 40       	sbci	r29, 0x00	; 0
   10d70:	cd 54       	subi	r28, 0x4D	; 77
   10d72:	df 4f       	sbci	r29, 0xFF	; 255
   10d74:	98 81       	ld	r25, Y
   10d76:	c3 5b       	subi	r28, 0xB3	; 179
   10d78:	d0 40       	sbci	r29, 0x00	; 0
   10d7a:	89 17       	cp	r24, r25
   10d7c:	08 f0       	brcs	.+2      	; 0x10d80 <__EEPROM_REGION_LENGTH__+0xd80>
   10d7e:	82 c1       	rjmp	.+772    	; 0x11084 <__EEPROM_REGION_LENGTH__+0x1084>
   10d80:	c0 54       	subi	r28, 0x40	; 64
   10d82:	df 4f       	sbci	r29, 0xFF	; 255
   10d84:	e8 81       	ld	r30, Y
   10d86:	f9 81       	ldd	r31, Y+1	; 0x01
   10d88:	c0 5c       	subi	r28, 0xC0	; 192
   10d8a:	d0 40       	sbci	r29, 0x00	; 0
   10d8c:	94 91       	lpm	r25, Z
   10d8e:	91 11       	cpse	r25, r1
   10d90:	39 c0       	rjmp	.+114    	; 0x10e04 <__EEPROM_REGION_LENGTH__+0xe04>
   10d92:	cd 53       	subi	r28, 0x3D	; 61
   10d94:	df 4f       	sbci	r29, 0xFF	; 255
   10d96:	e8 81       	ld	r30, Y
   10d98:	f9 81       	ldd	r31, Y+1	; 0x01
   10d9a:	c3 5c       	subi	r28, 0xC3	; 195
   10d9c:	d0 40       	sbci	r29, 0x00	; 0
   10d9e:	25 91       	lpm	r18, Z+
   10da0:	34 91       	lpm	r19, Z
   10da2:	ca 54       	subi	r28, 0x4A	; 74
   10da4:	df 4f       	sbci	r29, 0xFF	; 255
   10da6:	48 81       	ld	r20, Y
   10da8:	59 81       	ldd	r21, Y+1	; 0x01
   10daa:	c6 5b       	subi	r28, 0xB6	; 182
   10dac:	d0 40       	sbci	r29, 0x00	; 0
   10dae:	42 0f       	add	r20, r18
   10db0:	53 1f       	adc	r21, r19
   10db2:	c4 54       	subi	r28, 0x44	; 68
   10db4:	df 4f       	sbci	r29, 0xFF	; 255
   10db6:	59 83       	std	Y+1, r21	; 0x01
   10db8:	48 83       	st	Y, r20
   10dba:	cc 5b       	subi	r28, 0xBC	; 188
   10dbc:	d0 40       	sbci	r29, 0x00	; 0
   10dbe:	c7 53       	subi	r28, 0x37	; 55
   10dc0:	df 4f       	sbci	r29, 0xFF	; 255
   10dc2:	e8 81       	ld	r30, Y
   10dc4:	f9 81       	ldd	r31, Y+1	; 0x01
   10dc6:	c9 5c       	subi	r28, 0xC9	; 201
   10dc8:	d0 40       	sbci	r29, 0x00	; 0
   10dca:	25 91       	lpm	r18, Z+
   10dcc:	34 91       	lpm	r19, Z
   10dce:	c5 53       	subi	r28, 0x35	; 53
   10dd0:	df 4f       	sbci	r29, 0xFF	; 255
   10dd2:	e8 81       	ld	r30, Y
   10dd4:	f9 81       	ldd	r31, Y+1	; 0x01
   10dd6:	cb 5c       	subi	r28, 0xCB	; 203
   10dd8:	d0 40       	sbci	r29, 0x00	; 0
   10dda:	94 91       	lpm	r25, Z
   10ddc:	c8 54       	subi	r28, 0x48	; 72
   10dde:	df 4f       	sbci	r29, 0xFF	; 255
   10de0:	48 81       	ld	r20, Y
   10de2:	59 81       	ldd	r21, Y+1	; 0x01
   10de4:	c8 5b       	subi	r28, 0xB8	; 184
   10de6:	d0 40       	sbci	r29, 0x00	; 0
   10de8:	24 0f       	add	r18, r20
   10dea:	35 1f       	adc	r19, r21
   10dec:	b9 01       	movw	r22, r18
   10dee:	99 9d       	mul	r25, r9
   10df0:	60 0d       	add	r22, r0
   10df2:	71 1d       	adc	r23, r1
   10df4:	11 24       	eor	r1, r1
   10df6:	c2 54       	subi	r28, 0x42	; 66
   10df8:	df 4f       	sbci	r29, 0xFF	; 255
   10dfa:	79 83       	std	Y+1, r23	; 0x01
   10dfc:	68 83       	st	Y, r22
   10dfe:	ce 5b       	subi	r28, 0xBE	; 190
   10e00:	d0 40       	sbci	r29, 0x00	; 0
   10e02:	93 94       	inc	r9
   10e04:	c0 54       	subi	r28, 0x40	; 64
   10e06:	df 4f       	sbci	r29, 0xFF	; 255
   10e08:	e8 81       	ld	r30, Y
   10e0a:	f9 81       	ldd	r31, Y+1	; 0x01
   10e0c:	c0 5c       	subi	r28, 0xC0	; 192
   10e0e:	d0 40       	sbci	r29, 0x00	; 0
   10e10:	94 91       	lpm	r25, Z
   10e12:	91 30       	cpi	r25, 0x01	; 1
   10e14:	09 f0       	breq	.+2      	; 0x10e18 <__EEPROM_REGION_LENGTH__+0xe18>
   10e16:	39 c0       	rjmp	.+114    	; 0x10e8a <__EEPROM_REGION_LENGTH__+0xe8a>
   10e18:	c7 53       	subi	r28, 0x37	; 55
   10e1a:	df 4f       	sbci	r29, 0xFF	; 255
   10e1c:	e8 81       	ld	r30, Y
   10e1e:	f9 81       	ldd	r31, Y+1	; 0x01
   10e20:	c9 5c       	subi	r28, 0xC9	; 201
   10e22:	d0 40       	sbci	r29, 0x00	; 0
   10e24:	25 91       	lpm	r18, Z+
   10e26:	34 91       	lpm	r19, Z
   10e28:	c8 54       	subi	r28, 0x48	; 72
   10e2a:	df 4f       	sbci	r29, 0xFF	; 255
   10e2c:	48 81       	ld	r20, Y
   10e2e:	59 81       	ldd	r21, Y+1	; 0x01
   10e30:	c8 5b       	subi	r28, 0xB8	; 184
   10e32:	d0 40       	sbci	r29, 0x00	; 0
   10e34:	42 0f       	add	r20, r18
   10e36:	53 1f       	adc	r21, r19
   10e38:	c2 54       	subi	r28, 0x42	; 66
   10e3a:	df 4f       	sbci	r29, 0xFF	; 255
   10e3c:	59 83       	std	Y+1, r21	; 0x01
   10e3e:	48 83       	st	Y, r20
   10e40:	ce 5b       	subi	r28, 0xBE	; 190
   10e42:	d0 40       	sbci	r29, 0x00	; 0
   10e44:	cd 53       	subi	r28, 0x3D	; 61
   10e46:	df 4f       	sbci	r29, 0xFF	; 255
   10e48:	e8 81       	ld	r30, Y
   10e4a:	f9 81       	ldd	r31, Y+1	; 0x01
   10e4c:	c3 5c       	subi	r28, 0xC3	; 195
   10e4e:	d0 40       	sbci	r29, 0x00	; 0
   10e50:	25 91       	lpm	r18, Z+
   10e52:	34 91       	lpm	r19, Z
   10e54:	c2 53       	subi	r28, 0x32	; 50
   10e56:	df 4f       	sbci	r29, 0xFF	; 255
   10e58:	e8 81       	ld	r30, Y
   10e5a:	f9 81       	ldd	r31, Y+1	; 0x01
   10e5c:	ce 5c       	subi	r28, 0xCE	; 206
   10e5e:	d0 40       	sbci	r29, 0x00	; 0
   10e60:	94 91       	lpm	r25, Z
   10e62:	ca 54       	subi	r28, 0x4A	; 74
   10e64:	df 4f       	sbci	r29, 0xFF	; 255
   10e66:	48 81       	ld	r20, Y
   10e68:	59 81       	ldd	r21, Y+1	; 0x01
   10e6a:	c6 5b       	subi	r28, 0xB6	; 182
   10e6c:	d0 40       	sbci	r29, 0x00	; 0
   10e6e:	24 0f       	add	r18, r20
   10e70:	35 1f       	adc	r19, r21
   10e72:	b9 01       	movw	r22, r18
   10e74:	99 9d       	mul	r25, r9
   10e76:	60 0d       	add	r22, r0
   10e78:	71 1d       	adc	r23, r1
   10e7a:	11 24       	eor	r1, r1
   10e7c:	c4 54       	subi	r28, 0x44	; 68
   10e7e:	df 4f       	sbci	r29, 0xFF	; 255
   10e80:	79 83       	std	Y+1, r23	; 0x01
   10e82:	68 83       	st	Y, r22
   10e84:	cc 5b       	subi	r28, 0xBC	; 188
   10e86:	d0 40       	sbci	r29, 0x00	; 0
   10e88:	93 94       	inc	r9
   10e8a:	c0 54       	subi	r28, 0x40	; 64
   10e8c:	df 4f       	sbci	r29, 0xFF	; 255
   10e8e:	e8 81       	ld	r30, Y
   10e90:	f9 81       	ldd	r31, Y+1	; 0x01
   10e92:	c0 5c       	subi	r28, 0xC0	; 192
   10e94:	d0 40       	sbci	r29, 0x00	; 0
   10e96:	94 91       	lpm	r25, Z
   10e98:	92 30       	cpi	r25, 0x02	; 2
   10e9a:	09 f0       	breq	.+2      	; 0x10e9e <__EEPROM_REGION_LENGTH__+0xe9e>
   10e9c:	50 c0       	rjmp	.+160    	; 0x10f3e <__EEPROM_REGION_LENGTH__+0xf3e>
   10e9e:	cd 53       	subi	r28, 0x3D	; 61
   10ea0:	df 4f       	sbci	r29, 0xFF	; 255
   10ea2:	e8 81       	ld	r30, Y
   10ea4:	f9 81       	ldd	r31, Y+1	; 0x01
   10ea6:	c3 5c       	subi	r28, 0xC3	; 195
   10ea8:	d0 40       	sbci	r29, 0x00	; 0
   10eaa:	25 91       	lpm	r18, Z+
   10eac:	34 91       	lpm	r19, Z
   10eae:	c2 53       	subi	r28, 0x32	; 50
   10eb0:	df 4f       	sbci	r29, 0xFF	; 255
   10eb2:	e8 81       	ld	r30, Y
   10eb4:	f9 81       	ldd	r31, Y+1	; 0x01
   10eb6:	ce 5c       	subi	r28, 0xCE	; 206
   10eb8:	d0 40       	sbci	r29, 0x00	; 0
   10eba:	94 91       	lpm	r25, Z
   10ebc:	ca 54       	subi	r28, 0x4A	; 74
   10ebe:	df 4f       	sbci	r29, 0xFF	; 255
   10ec0:	48 81       	ld	r20, Y
   10ec2:	59 81       	ldd	r21, Y+1	; 0x01
   10ec4:	c6 5b       	subi	r28, 0xB6	; 182
   10ec6:	d0 40       	sbci	r29, 0x00	; 0
   10ec8:	24 0f       	add	r18, r20
   10eca:	35 1f       	adc	r19, r21
   10ecc:	b9 01       	movw	r22, r18
   10ece:	99 9d       	mul	r25, r9
   10ed0:	60 0d       	add	r22, r0
   10ed2:	71 1d       	adc	r23, r1
   10ed4:	11 24       	eor	r1, r1
   10ed6:	c4 54       	subi	r28, 0x44	; 68
   10ed8:	df 4f       	sbci	r29, 0xFF	; 255
   10eda:	79 83       	std	Y+1, r23	; 0x01
   10edc:	68 83       	st	Y, r22
   10ede:	cc 5b       	subi	r28, 0xBC	; 188
   10ee0:	d0 40       	sbci	r29, 0x00	; 0
   10ee2:	c7 53       	subi	r28, 0x37	; 55
   10ee4:	df 4f       	sbci	r29, 0xFF	; 255
   10ee6:	e8 81       	ld	r30, Y
   10ee8:	f9 81       	ldd	r31, Y+1	; 0x01
   10eea:	c9 5c       	subi	r28, 0xC9	; 201
   10eec:	d0 40       	sbci	r29, 0x00	; 0
   10eee:	25 91       	lpm	r18, Z+
   10ef0:	34 91       	lpm	r19, Z
   10ef2:	c5 53       	subi	r28, 0x35	; 53
   10ef4:	df 4f       	sbci	r29, 0xFF	; 255
   10ef6:	e8 81       	ld	r30, Y
   10ef8:	f9 81       	ldd	r31, Y+1	; 0x01
   10efa:	cb 5c       	subi	r28, 0xCB	; 203
   10efc:	d0 40       	sbci	r29, 0x00	; 0
   10efe:	94 91       	lpm	r25, Z
   10f00:	c8 54       	subi	r28, 0x48	; 72
   10f02:	df 4f       	sbci	r29, 0xFF	; 255
   10f04:	48 81       	ld	r20, Y
   10f06:	59 81       	ldd	r21, Y+1	; 0x01
   10f08:	c8 5b       	subi	r28, 0xB8	; 184
   10f0a:	d0 40       	sbci	r29, 0x00	; 0
   10f0c:	24 0f       	add	r18, r20
   10f0e:	35 1f       	adc	r19, r21
   10f10:	b9 01       	movw	r22, r18
   10f12:	93 9d       	mul	r25, r3
   10f14:	60 0d       	add	r22, r0
   10f16:	71 1d       	adc	r23, r1
   10f18:	11 24       	eor	r1, r1
   10f1a:	c2 54       	subi	r28, 0x42	; 66
   10f1c:	df 4f       	sbci	r29, 0xFF	; 255
   10f1e:	79 83       	std	Y+1, r23	; 0x01
   10f20:	68 83       	st	Y, r22
   10f22:	ce 5b       	subi	r28, 0xBE	; 190
   10f24:	d0 40       	sbci	r29, 0x00	; 0
   10f26:	93 94       	inc	r9
   10f28:	c0 53       	subi	r28, 0x30	; 48
   10f2a:	df 4f       	sbci	r29, 0xFF	; 255
   10f2c:	e8 81       	ld	r30, Y
   10f2e:	f9 81       	ldd	r31, Y+1	; 0x01
   10f30:	c0 5d       	subi	r28, 0xD0	; 208
   10f32:	d0 40       	sbci	r29, 0x00	; 0
   10f34:	94 91       	lpm	r25, Z
   10f36:	99 16       	cp	r9, r25
   10f38:	10 f0       	brcs	.+4      	; 0x10f3e <__EEPROM_REGION_LENGTH__+0xf3e>
   10f3a:	33 94       	inc	r3
   10f3c:	91 2c       	mov	r9, r1
   10f3e:	c6 54       	subi	r28, 0x46	; 70
   10f40:	df 4f       	sbci	r29, 0xFF	; 255
   10f42:	e8 81       	ld	r30, Y
   10f44:	f9 81       	ldd	r31, Y+1	; 0x01
   10f46:	ca 5b       	subi	r28, 0xBA	; 186
   10f48:	d0 40       	sbci	r29, 0x00	; 0
   10f4a:	44 91       	lpm	r20, Z
   10f4c:	8e 01       	movw	r16, r28
   10f4e:	0f 57       	subi	r16, 0x7F	; 127
   10f50:	1f 4f       	sbci	r17, 0xFF	; 255
   10f52:	9e 01       	movw	r18, r28
   10f54:	2f 5f       	subi	r18, 0xFF	; 255
   10f56:	3f 4f       	sbci	r19, 0xFF	; 255
   10f58:	cf 54       	subi	r28, 0x4F	; 79
   10f5a:	df 4f       	sbci	r29, 0xFF	; 255
   10f5c:	68 81       	ld	r22, Y
   10f5e:	c1 5b       	subi	r28, 0xB1	; 177
   10f60:	d0 40       	sbci	r29, 0x00	; 0
   10f62:	ce 51       	subi	r28, 0x1E	; 30
   10f64:	df 4f       	sbci	r29, 0xFF	; 255
   10f66:	e8 81       	ld	r30, Y
   10f68:	f9 81       	ldd	r31, Y+1	; 0x01
   10f6a:	c2 5e       	subi	r28, 0xE2	; 226
   10f6c:	d0 40       	sbci	r29, 0x00	; 0
   10f6e:	19 95       	eicall
   10f70:	ce 52       	subi	r28, 0x2E	; 46
   10f72:	df 4f       	sbci	r29, 0xFF	; 255
   10f74:	e8 81       	ld	r30, Y
   10f76:	f9 81       	ldd	r31, Y+1	; 0x01
   10f78:	c2 5d       	subi	r28, 0xD2	; 210
   10f7a:	d0 40       	sbci	r29, 0x00	; 0
   10f7c:	25 91       	lpm	r18, Z+
   10f7e:	34 91       	lpm	r19, Z
   10f80:	c6 54       	subi	r28, 0x46	; 70
   10f82:	df 4f       	sbci	r29, 0xFF	; 255
   10f84:	e8 81       	ld	r30, Y
   10f86:	f9 81       	ldd	r31, Y+1	; 0x01
   10f88:	ca 5b       	subi	r28, 0xBA	; 186
   10f8a:	d0 40       	sbci	r29, 0x00	; 0
   10f8c:	84 91       	lpm	r24, Z
   10f8e:	cf 54       	subi	r28, 0x4F	; 79
   10f90:	df 4f       	sbci	r29, 0xFF	; 255
   10f92:	68 81       	ld	r22, Y
   10f94:	c1 5b       	subi	r28, 0xB1	; 177
   10f96:	d0 40       	sbci	r29, 0x00	; 0
   10f98:	70 e0       	ldi	r23, 0x00	; 0
   10f9a:	ce 54       	subi	r28, 0x4E	; 78
   10f9c:	df 4f       	sbci	r29, 0xFF	; 255
   10f9e:	48 81       	ld	r20, Y
   10fa0:	c2 5b       	subi	r28, 0xB2	; 178
   10fa2:	d0 40       	sbci	r29, 0x00	; 0
   10fa4:	90 e0       	ldi	r25, 0x00	; 0
   10fa6:	f9 01       	movw	r30, r18
   10fa8:	19 95       	eicall
   10faa:	88 2e       	mov	r8, r24
   10fac:	60 e2       	ldi	r22, 0x20	; 32
   10fae:	c3 53       	subi	r28, 0x33	; 51
   10fb0:	df 4f       	sbci	r29, 0xFF	; 255
   10fb2:	88 81       	ld	r24, Y
   10fb4:	cd 5c       	subi	r28, 0xCD	; 205
   10fb6:	d0 40       	sbci	r29, 0x00	; 0
   10fb8:	0e 94 f0 52 	call	0xa5e0	; 0xa5e0 <enable_redraw(unsigned char, unsigned char)>
   10fbc:	88 23       	and	r24, r24
   10fbe:	21 f0       	breq	.+8      	; 0x10fc8 <__EEPROM_REGION_LENGTH__+0xfc8>
   10fc0:	f2 e0       	ldi	r31, 0x02	; 2
   10fc2:	8f 12       	cpse	r8, r31
   10fc4:	01 c0       	rjmp	.+2      	; 0x10fc8 <__EEPROM_REGION_LENGTH__+0xfc8>
   10fc6:	81 2c       	mov	r8, r1
   10fc8:	cc 52       	subi	r28, 0x2C	; 44
   10fca:	df 4f       	sbci	r29, 0xFF	; 255
   10fcc:	e8 81       	ld	r30, Y
   10fce:	f9 81       	ldd	r31, Y+1	; 0x01
   10fd0:	c4 5d       	subi	r28, 0xD4	; 212
   10fd2:	d0 40       	sbci	r29, 0x00	; 0
   10fd4:	a5 90       	lpm	r10, Z+
   10fd6:	b4 90       	lpm	r11, Z
   10fd8:	ca 52       	subi	r28, 0x2A	; 42
   10fda:	df 4f       	sbci	r29, 0xFF	; 255
   10fdc:	e8 81       	ld	r30, Y
   10fde:	f9 81       	ldd	r31, Y+1	; 0x01
   10fe0:	c6 5d       	subi	r28, 0xD6	; 214
   10fe2:	d0 40       	sbci	r29, 0x00	; 0
   10fe4:	c5 90       	lpm	r12, Z+
   10fe6:	d4 90       	lpm	r13, Z
   10fe8:	c8 52       	subi	r28, 0x28	; 40
   10fea:	df 4f       	sbci	r29, 0xFF	; 255
   10fec:	e8 81       	ld	r30, Y
   10fee:	f9 81       	ldd	r31, Y+1	; 0x01
   10ff0:	c8 5d       	subi	r28, 0xD8	; 216
   10ff2:	d0 40       	sbci	r29, 0x00	; 0
   10ff4:	e4 90       	lpm	r14, Z
   10ff6:	c6 52       	subi	r28, 0x26	; 38
   10ff8:	df 4f       	sbci	r29, 0xFF	; 255
   10ffa:	e8 81       	ld	r30, Y
   10ffc:	f9 81       	ldd	r31, Y+1	; 0x01
   10ffe:	ca 5d       	subi	r28, 0xDA	; 218
   11000:	d0 40       	sbci	r29, 0x00	; 0
   11002:	04 91       	lpm	r16, Z
   11004:	c4 52       	subi	r28, 0x24	; 36
   11006:	df 4f       	sbci	r29, 0xFF	; 255
   11008:	e8 81       	ld	r30, Y
   1100a:	f9 81       	ldd	r31, Y+1	; 0x01
   1100c:	cc 5d       	subi	r28, 0xDC	; 220
   1100e:	d0 40       	sbci	r29, 0x00	; 0
   11010:	25 91       	lpm	r18, Z+
   11012:	34 91       	lpm	r19, Z
   11014:	c2 52       	subi	r28, 0x22	; 34
   11016:	df 4f       	sbci	r29, 0xFF	; 255
   11018:	e8 81       	ld	r30, Y
   1101a:	f9 81       	ldd	r31, Y+1	; 0x01
   1101c:	ce 5d       	subi	r28, 0xDE	; 222
   1101e:	d0 40       	sbci	r29, 0x00	; 0
   11020:	45 91       	lpm	r20, Z+
   11022:	54 91       	lpm	r21, Z
   11024:	cb 54       	subi	r28, 0x4B	; 75
   11026:	df 4f       	sbci	r29, 0xFF	; 255
   11028:	f8 81       	ld	r31, Y
   1102a:	c5 5b       	subi	r28, 0xB5	; 181
   1102c:	d0 40       	sbci	r29, 0x00	; 0
   1102e:	ff 93       	push	r31
   11030:	cc 54       	subi	r28, 0x4C	; 76
   11032:	df 4f       	sbci	r29, 0xFF	; 255
   11034:	68 81       	ld	r22, Y
   11036:	c4 5b       	subi	r28, 0xB4	; 180
   11038:	d0 40       	sbci	r29, 0x00	; 0
   1103a:	6f 93       	push	r22
   1103c:	81 e0       	ldi	r24, 0x01	; 1
   1103e:	90 e0       	ldi	r25, 0x00	; 0
   11040:	8c 0f       	add	r24, r28
   11042:	9d 1f       	adc	r25, r29
   11044:	9f 93       	push	r25
   11046:	8f 93       	push	r24
   11048:	c2 54       	subi	r28, 0x42	; 66
   1104a:	df 4f       	sbci	r29, 0xFF	; 255
   1104c:	68 81       	ld	r22, Y
   1104e:	79 81       	ldd	r23, Y+1	; 0x01
   11050:	ce 5b       	subi	r28, 0xBE	; 190
   11052:	d0 40       	sbci	r29, 0x00	; 0
   11054:	c4 54       	subi	r28, 0x44	; 68
   11056:	df 4f       	sbci	r29, 0xFF	; 255
   11058:	88 81       	ld	r24, Y
   1105a:	99 81       	ldd	r25, Y+1	; 0x01
   1105c:	cc 5b       	subi	r28, 0xBC	; 188
   1105e:	d0 40       	sbci	r29, 0x00	; 0
   11060:	0e 94 31 76 	call	0xec62	; 0xec62 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)>
   11064:	ce 54       	subi	r28, 0x4E	; 78
   11066:	df 4f       	sbci	r29, 0xFF	; 255
   11068:	88 81       	ld	r24, Y
   1106a:	c2 5b       	subi	r28, 0xB2	; 178
   1106c:	d0 40       	sbci	r29, 0x00	; 0
   1106e:	8f 5f       	subi	r24, 0xFF	; 255
   11070:	ce 54       	subi	r28, 0x4E	; 78
   11072:	df 4f       	sbci	r29, 0xFF	; 255
   11074:	88 83       	st	Y, r24
   11076:	c2 5b       	subi	r28, 0xB2	; 178
   11078:	d0 40       	sbci	r29, 0x00	; 0
   1107a:	0f 90       	pop	r0
   1107c:	0f 90       	pop	r0
   1107e:	0f 90       	pop	r0
   11080:	0f 90       	pop	r0
   11082:	71 ce       	rjmp	.-798    	; 0x10d66 <__EEPROM_REGION_LENGTH__+0xd66>
   11084:	cb 53       	subi	r28, 0x3B	; 59
   11086:	df 4f       	sbci	r29, 0xFF	; 255
   11088:	e8 81       	ld	r30, Y
   1108a:	f9 81       	ldd	r31, Y+1	; 0x01
   1108c:	c5 5c       	subi	r28, 0xC5	; 197
   1108e:	d0 40       	sbci	r29, 0x00	; 0
   11090:	ef 2b       	or	r30, r31
   11092:	09 f4       	brne	.+2      	; 0x11096 <__EEPROM_REGION_LENGTH__+0x1096>
   11094:	c5 c1       	rjmp	.+906    	; 0x11420 <__EEPROM_REGION_LENGTH__+0x1420>
   11096:	c9 53       	subi	r28, 0x39	; 57
   11098:	df 4f       	sbci	r29, 0xFF	; 255
   1109a:	28 81       	ld	r18, Y
   1109c:	39 81       	ldd	r19, Y+1	; 0x01
   1109e:	c7 5c       	subi	r28, 0xC7	; 199
   110a0:	d0 40       	sbci	r29, 0x00	; 0
   110a2:	23 2b       	or	r18, r19
   110a4:	09 f4       	brne	.+2      	; 0x110a8 <__EEPROM_REGION_LENGTH__+0x10a8>
   110a6:	bc c1       	rjmp	.+888    	; 0x11420 <__EEPROM_REGION_LENGTH__+0x1420>
   110a8:	ce 54       	subi	r28, 0x4E	; 78
   110aa:	df 4f       	sbci	r29, 0xFF	; 255
   110ac:	18 82       	st	Y, r1
   110ae:	c2 5b       	subi	r28, 0xB2	; 178
   110b0:	d0 40       	sbci	r29, 0x00	; 0
   110b2:	f2 01       	movw	r30, r4
   110b4:	e1 53       	subi	r30, 0x31	; 49
   110b6:	fd 4f       	sbci	r31, 0xFD	; 253
   110b8:	e6 0d       	add	r30, r6
   110ba:	f7 1d       	adc	r31, r7
   110bc:	25 91       	lpm	r18, Z+
   110be:	34 91       	lpm	r19, Z
   110c0:	c2 01       	movw	r24, r4
   110c2:	86 53       	subi	r24, 0x36	; 54
   110c4:	9d 4f       	sbci	r25, 0xFD	; 253
   110c6:	a3 01       	movw	r20, r6
   110c8:	48 0f       	add	r20, r24
   110ca:	59 1f       	adc	r21, r25
   110cc:	c0 54       	subi	r28, 0x40	; 64
   110ce:	df 4f       	sbci	r29, 0xFF	; 255
   110d0:	59 83       	std	Y+1, r21	; 0x01
   110d2:	48 83       	st	Y, r20
   110d4:	c0 5c       	subi	r28, 0xC0	; 192
   110d6:	d0 40       	sbci	r29, 0x00	; 0
   110d8:	fa 01       	movw	r30, r20
   110da:	84 91       	lpm	r24, Z
   110dc:	cf 54       	subi	r28, 0x4F	; 79
   110de:	df 4f       	sbci	r29, 0xFF	; 255
   110e0:	68 81       	ld	r22, Y
   110e2:	c1 5b       	subi	r28, 0xB1	; 177
   110e4:	d0 40       	sbci	r29, 0x00	; 0
   110e6:	70 e0       	ldi	r23, 0x00	; 0
   110e8:	40 e0       	ldi	r20, 0x00	; 0
   110ea:	90 e0       	ldi	r25, 0x00	; 0
   110ec:	f9 01       	movw	r30, r18
   110ee:	19 95       	eicall
   110f0:	cd 54       	subi	r28, 0x4D	; 77
   110f2:	df 4f       	sbci	r29, 0xFF	; 255
   110f4:	88 83       	st	Y, r24
   110f6:	c3 5b       	subi	r28, 0xB3	; 179
   110f8:	d0 40       	sbci	r29, 0x00	; 0
   110fa:	f2 01       	movw	r30, r4
   110fc:	e7 53       	subi	r30, 0x37	; 55
   110fe:	fd 4f       	sbci	r31, 0xFD	; 253
   11100:	e6 0d       	add	r30, r6
   11102:	f7 1d       	adc	r31, r7
   11104:	44 91       	lpm	r20, Z
   11106:	c2 01       	movw	r24, r4
   11108:	89 53       	subi	r24, 0x39	; 57
   1110a:	9d 4f       	sbci	r25, 0xFD	; 253
   1110c:	93 01       	movw	r18, r6
   1110e:	28 0f       	add	r18, r24
   11110:	39 1f       	adc	r19, r25
   11112:	c5 53       	subi	r28, 0x35	; 53
   11114:	df 4f       	sbci	r29, 0xFF	; 255
   11116:	39 83       	std	Y+1, r19	; 0x01
   11118:	28 83       	st	Y, r18
   1111a:	cb 5c       	subi	r28, 0xCB	; 203
   1111c:	d0 40       	sbci	r29, 0x00	; 0
   1111e:	4f 3f       	cpi	r20, 0xFF	; 255
   11120:	99 f0       	breq	.+38     	; 0x11148 <__EEPROM_REGION_LENGTH__+0x1148>
   11122:	f9 01       	movw	r30, r18
   11124:	24 91       	lpm	r18, Z
   11126:	f2 01       	movw	r30, r4
   11128:	e8 53       	subi	r30, 0x38	; 56
   1112a:	fd 4f       	sbci	r31, 0xFD	; 253
   1112c:	e6 0d       	add	r30, r6
   1112e:	f7 1d       	adc	r31, r7
   11130:	e4 91       	lpm	r30, Z
   11132:	2e 9f       	mul	r18, r30
   11134:	20 2d       	mov	r18, r0
   11136:	11 24       	eor	r1, r1
   11138:	be 01       	movw	r22, r28
   1113a:	6d 54       	subi	r22, 0x4D	; 77
   1113c:	7f 4f       	sbci	r23, 0xFF	; 255
   1113e:	ce 01       	movw	r24, r28
   11140:	8e 54       	subi	r24, 0x4E	; 78
   11142:	9f 4f       	sbci	r25, 0xFF	; 255
   11144:	0e 94 fb 74 	call	0xe9f6	; 0xe9f6 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
   11148:	ce 54       	subi	r28, 0x4E	; 78
   1114a:	df 4f       	sbci	r29, 0xFF	; 255
   1114c:	88 80       	ld	r8, Y
   1114e:	c2 5b       	subi	r28, 0xB2	; 178
   11150:	d0 40       	sbci	r29, 0x00	; 0
   11152:	cd 54       	subi	r28, 0x4D	; 77
   11154:	df 4f       	sbci	r29, 0xFF	; 255
   11156:	f8 81       	ld	r31, Y
   11158:	c3 5b       	subi	r28, 0xB3	; 179
   1115a:	d0 40       	sbci	r29, 0x00	; 0
   1115c:	c2 53       	subi	r28, 0x32	; 50
   1115e:	df 4f       	sbci	r29, 0xFF	; 255
   11160:	f8 83       	st	Y, r31
   11162:	ce 5c       	subi	r28, 0xCE	; 206
   11164:	d0 40       	sbci	r29, 0x00	; 0
   11166:	c2 01       	movw	r24, r4
   11168:	8a 53       	subi	r24, 0x3A	; 58
   1116a:	9d 4f       	sbci	r25, 0xFD	; 253
   1116c:	93 01       	movw	r18, r6
   1116e:	28 0f       	add	r18, r24
   11170:	39 1f       	adc	r19, r25
   11172:	c6 54       	subi	r28, 0x46	; 70
   11174:	df 4f       	sbci	r29, 0xFF	; 255
   11176:	39 83       	std	Y+1, r19	; 0x01
   11178:	28 83       	st	Y, r18
   1117a:	ca 5b       	subi	r28, 0xBA	; 186
   1117c:	d0 40       	sbci	r29, 0x00	; 0
   1117e:	62 01       	movw	r12, r4
   11180:	3a e4       	ldi	r19, 0x4A	; 74
   11182:	c3 1a       	sub	r12, r19
   11184:	3d ef       	ldi	r19, 0xFD	; 253
   11186:	d3 0a       	sbc	r13, r19
   11188:	c6 0c       	add	r12, r6
   1118a:	d7 1c       	adc	r13, r7
   1118c:	52 01       	movw	r10, r4
   1118e:	48 e4       	ldi	r20, 0x48	; 72
   11190:	a4 1a       	sub	r10, r20
   11192:	4d ef       	ldi	r20, 0xFD	; 253
   11194:	b4 0a       	sbc	r11, r20
   11196:	a6 0c       	add	r10, r6
   11198:	b7 1c       	adc	r11, r7
   1119a:	01 97       	sbiw	r24, 0x01	; 1
   1119c:	b3 01       	movw	r22, r6
   1119e:	68 0f       	add	r22, r24
   111a0:	79 1f       	adc	r23, r25
   111a2:	cd 53       	subi	r28, 0x3D	; 61
   111a4:	df 4f       	sbci	r29, 0xFF	; 255
   111a6:	79 83       	std	Y+1, r23	; 0x01
   111a8:	68 83       	st	Y, r22
   111aa:	c3 5c       	subi	r28, 0xC3	; 195
   111ac:	d0 40       	sbci	r29, 0x00	; 0
   111ae:	01 97       	sbiw	r24, 0x01	; 1
   111b0:	f3 01       	movw	r30, r6
   111b2:	e8 0f       	add	r30, r24
   111b4:	f9 1f       	adc	r31, r25
   111b6:	c7 53       	subi	r28, 0x37	; 55
   111b8:	df 4f       	sbci	r29, 0xFF	; 255
   111ba:	f9 83       	std	Y+1, r31	; 0x01
   111bc:	e8 83       	st	Y, r30
   111be:	c9 5c       	subi	r28, 0xC9	; 201
   111c0:	d0 40       	sbci	r29, 0x00	; 0
   111c2:	08 97       	sbiw	r24, 0x08	; 8
   111c4:	93 01       	movw	r18, r6
   111c6:	28 0f       	add	r18, r24
   111c8:	39 1f       	adc	r19, r25
   111ca:	c0 53       	subi	r28, 0x30	; 48
   111cc:	df 4f       	sbci	r29, 0xFF	; 255
   111ce:	39 83       	std	Y+1, r19	; 0x01
   111d0:	28 83       	st	Y, r18
   111d2:	c0 5d       	subi	r28, 0xD0	; 208
   111d4:	d0 40       	sbci	r29, 0x00	; 0
   111d6:	02 97       	sbiw	r24, 0x02	; 2
   111d8:	a3 01       	movw	r20, r6
   111da:	48 0f       	add	r20, r24
   111dc:	59 1f       	adc	r21, r25
   111de:	ce 52       	subi	r28, 0x2E	; 46
   111e0:	df 4f       	sbci	r29, 0xFF	; 255
   111e2:	59 83       	std	Y+1, r21	; 0x01
   111e4:	48 83       	st	Y, r20
   111e6:	c2 5d       	subi	r28, 0xD2	; 210
   111e8:	d0 40       	sbci	r29, 0x00	; 0
   111ea:	31 2c       	mov	r3, r1
   111ec:	91 2c       	mov	r9, r1
   111ee:	c2 53       	subi	r28, 0x32	; 50
   111f0:	df 4f       	sbci	r29, 0xFF	; 255
   111f2:	58 81       	ld	r21, Y
   111f4:	ce 5c       	subi	r28, 0xCE	; 206
   111f6:	d0 40       	sbci	r29, 0x00	; 0
   111f8:	85 16       	cp	r8, r21
   111fa:	08 f0       	brcs	.+2      	; 0x111fe <__EEPROM_REGION_LENGTH__+0x11fe>
   111fc:	11 c1       	rjmp	.+546    	; 0x11420 <__EEPROM_REGION_LENGTH__+0x1420>
   111fe:	c6 54       	subi	r28, 0x46	; 70
   11200:	df 4f       	sbci	r29, 0xFF	; 255
   11202:	e8 81       	ld	r30, Y
   11204:	f9 81       	ldd	r31, Y+1	; 0x01
   11206:	ca 5b       	subi	r28, 0xBA	; 186
   11208:	d0 40       	sbci	r29, 0x00	; 0
   1120a:	84 91       	lpm	r24, Z
   1120c:	81 11       	cpse	r24, r1
   1120e:	2f c0       	rjmp	.+94     	; 0x1126e <__EEPROM_REGION_LENGTH__+0x126e>
   11210:	f6 01       	movw	r30, r12
   11212:	85 91       	lpm	r24, Z+
   11214:	94 91       	lpm	r25, Z
   11216:	ca 54       	subi	r28, 0x4A	; 74
   11218:	df 4f       	sbci	r29, 0xFF	; 255
   1121a:	28 81       	ld	r18, Y
   1121c:	39 81       	ldd	r19, Y+1	; 0x01
   1121e:	c6 5b       	subi	r28, 0xB6	; 182
   11220:	d0 40       	sbci	r29, 0x00	; 0
   11222:	28 0f       	add	r18, r24
   11224:	39 1f       	adc	r19, r25
   11226:	c4 54       	subi	r28, 0x44	; 68
   11228:	df 4f       	sbci	r29, 0xFF	; 255
   1122a:	39 83       	std	Y+1, r19	; 0x01
   1122c:	28 83       	st	Y, r18
   1122e:	cc 5b       	subi	r28, 0xBC	; 188
   11230:	d0 40       	sbci	r29, 0x00	; 0
   11232:	f5 01       	movw	r30, r10
   11234:	85 91       	lpm	r24, Z+
   11236:	94 91       	lpm	r25, Z
   11238:	cd 53       	subi	r28, 0x3D	; 61
   1123a:	df 4f       	sbci	r29, 0xFF	; 255
   1123c:	e8 81       	ld	r30, Y
   1123e:	f9 81       	ldd	r31, Y+1	; 0x01
   11240:	c3 5c       	subi	r28, 0xC3	; 195
   11242:	d0 40       	sbci	r29, 0x00	; 0
   11244:	24 91       	lpm	r18, Z
   11246:	c8 54       	subi	r28, 0x48	; 72
   11248:	df 4f       	sbci	r29, 0xFF	; 255
   1124a:	48 81       	ld	r20, Y
   1124c:	59 81       	ldd	r21, Y+1	; 0x01
   1124e:	c8 5b       	subi	r28, 0xB8	; 184
   11250:	d0 40       	sbci	r29, 0x00	; 0
   11252:	84 0f       	add	r24, r20
   11254:	95 1f       	adc	r25, r21
   11256:	bc 01       	movw	r22, r24
   11258:	29 9d       	mul	r18, r9
   1125a:	60 0d       	add	r22, r0
   1125c:	71 1d       	adc	r23, r1
   1125e:	11 24       	eor	r1, r1
   11260:	c2 54       	subi	r28, 0x42	; 66
   11262:	df 4f       	sbci	r29, 0xFF	; 255
   11264:	79 83       	std	Y+1, r23	; 0x01
   11266:	68 83       	st	Y, r22
   11268:	ce 5b       	subi	r28, 0xBE	; 190
   1126a:	d0 40       	sbci	r29, 0x00	; 0
   1126c:	93 94       	inc	r9
   1126e:	c6 54       	subi	r28, 0x46	; 70
   11270:	df 4f       	sbci	r29, 0xFF	; 255
   11272:	e8 81       	ld	r30, Y
   11274:	f9 81       	ldd	r31, Y+1	; 0x01
   11276:	ca 5b       	subi	r28, 0xBA	; 186
   11278:	d0 40       	sbci	r29, 0x00	; 0
   1127a:	84 91       	lpm	r24, Z
   1127c:	81 30       	cpi	r24, 0x01	; 1
   1127e:	79 f5       	brne	.+94     	; 0x112de <__EEPROM_REGION_LENGTH__+0x12de>
   11280:	f5 01       	movw	r30, r10
   11282:	85 91       	lpm	r24, Z+
   11284:	94 91       	lpm	r25, Z
   11286:	c8 54       	subi	r28, 0x48	; 72
   11288:	df 4f       	sbci	r29, 0xFF	; 255
   1128a:	28 81       	ld	r18, Y
   1128c:	39 81       	ldd	r19, Y+1	; 0x01
   1128e:	c8 5b       	subi	r28, 0xB8	; 184
   11290:	d0 40       	sbci	r29, 0x00	; 0
   11292:	28 0f       	add	r18, r24
   11294:	39 1f       	adc	r19, r25
   11296:	c2 54       	subi	r28, 0x42	; 66
   11298:	df 4f       	sbci	r29, 0xFF	; 255
   1129a:	39 83       	std	Y+1, r19	; 0x01
   1129c:	28 83       	st	Y, r18
   1129e:	ce 5b       	subi	r28, 0xBE	; 190
   112a0:	d0 40       	sbci	r29, 0x00	; 0
   112a2:	f6 01       	movw	r30, r12
   112a4:	85 91       	lpm	r24, Z+
   112a6:	94 91       	lpm	r25, Z
   112a8:	c7 53       	subi	r28, 0x37	; 55
   112aa:	df 4f       	sbci	r29, 0xFF	; 255
   112ac:	e8 81       	ld	r30, Y
   112ae:	f9 81       	ldd	r31, Y+1	; 0x01
   112b0:	c9 5c       	subi	r28, 0xC9	; 201
   112b2:	d0 40       	sbci	r29, 0x00	; 0
   112b4:	24 91       	lpm	r18, Z
   112b6:	ca 54       	subi	r28, 0x4A	; 74
   112b8:	df 4f       	sbci	r29, 0xFF	; 255
   112ba:	48 81       	ld	r20, Y
   112bc:	59 81       	ldd	r21, Y+1	; 0x01
   112be:	c6 5b       	subi	r28, 0xB6	; 182
   112c0:	d0 40       	sbci	r29, 0x00	; 0
   112c2:	84 0f       	add	r24, r20
   112c4:	95 1f       	adc	r25, r21
   112c6:	bc 01       	movw	r22, r24
   112c8:	29 9d       	mul	r18, r9
   112ca:	60 0d       	add	r22, r0
   112cc:	71 1d       	adc	r23, r1
   112ce:	11 24       	eor	r1, r1
   112d0:	c4 54       	subi	r28, 0x44	; 68
   112d2:	df 4f       	sbci	r29, 0xFF	; 255
   112d4:	79 83       	std	Y+1, r23	; 0x01
   112d6:	68 83       	st	Y, r22
   112d8:	cc 5b       	subi	r28, 0xBC	; 188
   112da:	d0 40       	sbci	r29, 0x00	; 0
   112dc:	93 94       	inc	r9
   112de:	c6 54       	subi	r28, 0x46	; 70
   112e0:	df 4f       	sbci	r29, 0xFF	; 255
   112e2:	e8 81       	ld	r30, Y
   112e4:	f9 81       	ldd	r31, Y+1	; 0x01
   112e6:	ca 5b       	subi	r28, 0xBA	; 186
   112e8:	d0 40       	sbci	r29, 0x00	; 0
   112ea:	84 91       	lpm	r24, Z
   112ec:	82 30       	cpi	r24, 0x02	; 2
   112ee:	09 f0       	breq	.+2      	; 0x112f2 <__EEPROM_REGION_LENGTH__+0x12f2>
   112f0:	46 c0       	rjmp	.+140    	; 0x1137e <__EEPROM_REGION_LENGTH__+0x137e>
   112f2:	f6 01       	movw	r30, r12
   112f4:	85 91       	lpm	r24, Z+
   112f6:	94 91       	lpm	r25, Z
   112f8:	c7 53       	subi	r28, 0x37	; 55
   112fa:	df 4f       	sbci	r29, 0xFF	; 255
   112fc:	e8 81       	ld	r30, Y
   112fe:	f9 81       	ldd	r31, Y+1	; 0x01
   11300:	c9 5c       	subi	r28, 0xC9	; 201
   11302:	d0 40       	sbci	r29, 0x00	; 0
   11304:	24 91       	lpm	r18, Z
   11306:	ca 54       	subi	r28, 0x4A	; 74
   11308:	df 4f       	sbci	r29, 0xFF	; 255
   1130a:	48 81       	ld	r20, Y
   1130c:	59 81       	ldd	r21, Y+1	; 0x01
   1130e:	c6 5b       	subi	r28, 0xB6	; 182
   11310:	d0 40       	sbci	r29, 0x00	; 0
   11312:	84 0f       	add	r24, r20
   11314:	95 1f       	adc	r25, r21
   11316:	bc 01       	movw	r22, r24
   11318:	29 9d       	mul	r18, r9
   1131a:	60 0d       	add	r22, r0
   1131c:	71 1d       	adc	r23, r1
   1131e:	11 24       	eor	r1, r1
   11320:	c4 54       	subi	r28, 0x44	; 68
   11322:	df 4f       	sbci	r29, 0xFF	; 255
   11324:	79 83       	std	Y+1, r23	; 0x01
   11326:	68 83       	st	Y, r22
   11328:	cc 5b       	subi	r28, 0xBC	; 188
   1132a:	d0 40       	sbci	r29, 0x00	; 0
   1132c:	f5 01       	movw	r30, r10
   1132e:	85 91       	lpm	r24, Z+
   11330:	94 91       	lpm	r25, Z
   11332:	cd 53       	subi	r28, 0x3D	; 61
   11334:	df 4f       	sbci	r29, 0xFF	; 255
   11336:	e8 81       	ld	r30, Y
   11338:	f9 81       	ldd	r31, Y+1	; 0x01
   1133a:	c3 5c       	subi	r28, 0xC3	; 195
   1133c:	d0 40       	sbci	r29, 0x00	; 0
   1133e:	24 91       	lpm	r18, Z
   11340:	c8 54       	subi	r28, 0x48	; 72
   11342:	df 4f       	sbci	r29, 0xFF	; 255
   11344:	48 81       	ld	r20, Y
   11346:	59 81       	ldd	r21, Y+1	; 0x01
   11348:	c8 5b       	subi	r28, 0xB8	; 184
   1134a:	d0 40       	sbci	r29, 0x00	; 0
   1134c:	84 0f       	add	r24, r20
   1134e:	95 1f       	adc	r25, r21
   11350:	bc 01       	movw	r22, r24
   11352:	23 9d       	mul	r18, r3
   11354:	60 0d       	add	r22, r0
   11356:	71 1d       	adc	r23, r1
   11358:	11 24       	eor	r1, r1
   1135a:	c2 54       	subi	r28, 0x42	; 66
   1135c:	df 4f       	sbci	r29, 0xFF	; 255
   1135e:	79 83       	std	Y+1, r23	; 0x01
   11360:	68 83       	st	Y, r22
   11362:	ce 5b       	subi	r28, 0xBE	; 190
   11364:	d0 40       	sbci	r29, 0x00	; 0
   11366:	93 94       	inc	r9
   11368:	c5 53       	subi	r28, 0x35	; 53
   1136a:	df 4f       	sbci	r29, 0xFF	; 255
   1136c:	e8 81       	ld	r30, Y
   1136e:	f9 81       	ldd	r31, Y+1	; 0x01
   11370:	cb 5c       	subi	r28, 0xCB	; 203
   11372:	d0 40       	sbci	r29, 0x00	; 0
   11374:	84 91       	lpm	r24, Z
   11376:	98 16       	cp	r9, r24
   11378:	10 f0       	brcs	.+4      	; 0x1137e <__EEPROM_REGION_LENGTH__+0x137e>
   1137a:	33 94       	inc	r3
   1137c:	91 2c       	mov	r9, r1
   1137e:	c0 53       	subi	r28, 0x30	; 48
   11380:	df 4f       	sbci	r29, 0xFF	; 255
   11382:	e8 81       	ld	r30, Y
   11384:	f9 81       	ldd	r31, Y+1	; 0x01
   11386:	c0 5d       	subi	r28, 0xD0	; 208
   11388:	d0 40       	sbci	r29, 0x00	; 0
   1138a:	25 91       	lpm	r18, Z+
   1138c:	34 91       	lpm	r19, Z
   1138e:	ce 52       	subi	r28, 0x2E	; 46
   11390:	df 4f       	sbci	r29, 0xFF	; 255
   11392:	e8 81       	ld	r30, Y
   11394:	f9 81       	ldd	r31, Y+1	; 0x01
   11396:	c2 5d       	subi	r28, 0xD2	; 210
   11398:	d0 40       	sbci	r29, 0x00	; 0
   1139a:	45 91       	lpm	r20, Z+
   1139c:	54 91       	lpm	r21, Z
   1139e:	c9 53       	subi	r28, 0x39	; 57
   113a0:	df 4f       	sbci	r29, 0xFF	; 255
   113a2:	e8 80       	ld	r14, Y
   113a4:	f9 80       	ldd	r15, Y+1	; 0x01
   113a6:	c7 5c       	subi	r28, 0xC7	; 199
   113a8:	d0 40       	sbci	r29, 0x00	; 0
   113aa:	cb 53       	subi	r28, 0x3B	; 59
   113ac:	df 4f       	sbci	r29, 0xFF	; 255
   113ae:	08 81       	ld	r16, Y
   113b0:	19 81       	ldd	r17, Y+1	; 0x01
   113b2:	c5 5c       	subi	r28, 0xC5	; 197
   113b4:	d0 40       	sbci	r29, 0x00	; 0
   113b6:	c2 54       	subi	r28, 0x42	; 66
   113b8:	df 4f       	sbci	r29, 0xFF	; 255
   113ba:	68 81       	ld	r22, Y
   113bc:	79 81       	ldd	r23, Y+1	; 0x01
   113be:	ce 5b       	subi	r28, 0xBE	; 190
   113c0:	d0 40       	sbci	r29, 0x00	; 0
   113c2:	c4 54       	subi	r28, 0x44	; 68
   113c4:	df 4f       	sbci	r29, 0xFF	; 255
   113c6:	88 81       	ld	r24, Y
   113c8:	99 81       	ldd	r25, Y+1	; 0x01
   113ca:	cc 5b       	subi	r28, 0xBC	; 188
   113cc:	d0 40       	sbci	r29, 0x00	; 0
   113ce:	0e 94 ba 78 	call	0xf174	; 0xf174 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   113d2:	18 2f       	mov	r17, r24
   113d4:	81 e0       	ldi	r24, 0x01	; 1
   113d6:	88 0d       	add	r24, r8
   113d8:	11 23       	and	r17, r17
   113da:	21 f1       	breq	.+72     	; 0x11424 <__EEPROM_REGION_LENGTH__+0x1424>
   113dc:	ce 54       	subi	r28, 0x4E	; 78
   113de:	df 4f       	sbci	r29, 0xFF	; 255
   113e0:	88 82       	st	Y, r8
   113e2:	c2 5b       	subi	r28, 0xB2	; 178
   113e4:	d0 40       	sbci	r29, 0x00	; 0
   113e6:	f2 01       	movw	r30, r4
   113e8:	e3 53       	subi	r30, 0x33	; 51
   113ea:	fd 4f       	sbci	r31, 0xFD	; 253
   113ec:	e6 0d       	add	r30, r6
   113ee:	f7 1d       	adc	r31, r7
   113f0:	25 91       	lpm	r18, Z+
   113f2:	34 91       	lpm	r19, Z
   113f4:	c0 54       	subi	r28, 0x40	; 64
   113f6:	df 4f       	sbci	r29, 0xFF	; 255
   113f8:	e8 81       	ld	r30, Y
   113fa:	f9 81       	ldd	r31, Y+1	; 0x01
   113fc:	c0 5c       	subi	r28, 0xC0	; 192
   113fe:	d0 40       	sbci	r29, 0x00	; 0
   11400:	84 91       	lpm	r24, Z
   11402:	cf 54       	subi	r28, 0x4F	; 79
   11404:	df 4f       	sbci	r29, 0xFF	; 255
   11406:	68 81       	ld	r22, Y
   11408:	c1 5b       	subi	r28, 0xB1	; 177
   1140a:	d0 40       	sbci	r29, 0x00	; 0
   1140c:	70 e0       	ldi	r23, 0x00	; 0
   1140e:	48 2d       	mov	r20, r8
   11410:	90 e0       	ldi	r25, 0x00	; 0
   11412:	f9 01       	movw	r30, r18
   11414:	19 95       	eicall
   11416:	ce 53       	subi	r28, 0x3E	; 62
   11418:	df 4f       	sbci	r29, 0xFF	; 255
   1141a:	18 83       	st	Y, r17
   1141c:	c2 5c       	subi	r28, 0xC2	; 194
   1141e:	d0 40       	sbci	r29, 0x00	; 0
   11420:	23 94       	inc	r2
   11422:	aa cb       	rjmp	.-2220   	; 0x10b78 <__EEPROM_REGION_LENGTH__+0xb78>
   11424:	88 2e       	mov	r8, r24
   11426:	e3 ce       	rjmp	.-570    	; 0x111ee <__EEPROM_REGION_LENGTH__+0x11ee>
   11428:	f1 e0       	ldi	r31, 0x01	; 1
   1142a:	ce 53       	subi	r28, 0x3E	; 62
   1142c:	df 4f       	sbci	r29, 0xFF	; 255
   1142e:	f8 83       	st	Y, r31
   11430:	c2 5c       	subi	r28, 0xC2	; 194
   11432:	d0 40       	sbci	r29, 0x00	; 0
   11434:	ce 53       	subi	r28, 0x3E	; 62
   11436:	df 4f       	sbci	r29, 0xFF	; 255
   11438:	88 81       	ld	r24, Y
   1143a:	c2 5c       	subi	r28, 0xC2	; 194
   1143c:	d0 40       	sbci	r29, 0x00	; 0
   1143e:	cd 51       	subi	r28, 0x1D	; 29
   11440:	df 4f       	sbci	r29, 0xFF	; 255
   11442:	0f b6       	in	r0, 0x3f	; 63
   11444:	f8 94       	cli
   11446:	de bf       	out	0x3e, r29	; 62
   11448:	0f be       	out	0x3f, r0	; 63
   1144a:	cd bf       	out	0x3d, r28	; 61
   1144c:	df 91       	pop	r29
   1144e:	cf 91       	pop	r28
   11450:	1f 91       	pop	r17
   11452:	0f 91       	pop	r16
   11454:	ff 90       	pop	r15
   11456:	ef 90       	pop	r14
   11458:	df 90       	pop	r13
   1145a:	cf 90       	pop	r12
   1145c:	bf 90       	pop	r11
   1145e:	af 90       	pop	r10
   11460:	9f 90       	pop	r9
   11462:	8f 90       	pop	r8
   11464:	7f 90       	pop	r7
   11466:	6f 90       	pop	r6
   11468:	5f 90       	pop	r5
   1146a:	4f 90       	pop	r4
   1146c:	3f 90       	pop	r3
   1146e:	2f 90       	pop	r2
   11470:	08 95       	ret

00011472 <count_use_rtds()>:
_Z14count_use_rtdsv():
   11472:	0f 93       	push	r16
   11474:	1f 93       	push	r17
   11476:	cf 93       	push	r28
   11478:	df 93       	push	r29
   1147a:	1f 92       	push	r1
   1147c:	cd b7       	in	r28, 0x3d	; 61
   1147e:	de b7       	in	r29, 0x3e	; 62
   11480:	19 82       	std	Y+1, r1	; 0x01
   11482:	10 e0       	ldi	r17, 0x00	; 0
   11484:	00 e0       	ldi	r16, 0x00	; 0
   11486:	be 01       	movw	r22, r28
   11488:	6f 5f       	subi	r22, 0xFF	; 255
   1148a:	7f 4f       	sbci	r23, 0xFF	; 255
   1148c:	81 2f       	mov	r24, r17
   1148e:	0e 94 00 63 	call	0xc600	; 0xc600 <remote_tds_get_active(unsigned char, unsigned char*)>
   11492:	89 81       	ldd	r24, Y+1	; 0x01
   11494:	81 30       	cpi	r24, 0x01	; 1
   11496:	09 f4       	brne	.+2      	; 0x1149a <count_use_rtds()+0x28>
   11498:	0f 5f       	subi	r16, 0xFF	; 255
   1149a:	1f 5f       	subi	r17, 0xFF	; 255
   1149c:	1a 30       	cpi	r17, 0x0A	; 10
   1149e:	99 f7       	brne	.-26     	; 0x11486 <count_use_rtds()+0x14>
   114a0:	80 2f       	mov	r24, r16
   114a2:	0f 90       	pop	r0
   114a4:	df 91       	pop	r29
   114a6:	cf 91       	pop	r28
   114a8:	1f 91       	pop	r17
   114aa:	0f 91       	pop	r16
   114ac:	08 95       	ret

000114ae <get_global_temp(unsigned char, char*, float*)>:
_Z15get_global_temphPcPf():
   114ae:	8f 92       	push	r8
   114b0:	9f 92       	push	r9
   114b2:	af 92       	push	r10
   114b4:	bf 92       	push	r11
   114b6:	cf 92       	push	r12
   114b8:	df 92       	push	r13
   114ba:	ef 92       	push	r14
   114bc:	ff 92       	push	r15
   114be:	0f 93       	push	r16
   114c0:	1f 93       	push	r17
   114c2:	cf 93       	push	r28
   114c4:	df 93       	push	r29
   114c6:	cd b7       	in	r28, 0x3d	; 61
   114c8:	de b7       	in	r29, 0x3e	; 62
   114ca:	67 97       	sbiw	r28, 0x17	; 23
   114cc:	0f b6       	in	r0, 0x3f	; 63
   114ce:	f8 94       	cli
   114d0:	de bf       	out	0x3e, r29	; 62
   114d2:	0f be       	out	0x3f, r0	; 63
   114d4:	cd bf       	out	0x3d, r28	; 61
   114d6:	98 2e       	mov	r9, r24
   114d8:	6b 01       	movw	r12, r22
   114da:	5a 01       	movw	r10, r20
   114dc:	6b ed       	ldi	r22, 0xDB	; 219
   114de:	71 e8       	ldi	r23, 0x81	; 129
   114e0:	c6 01       	movw	r24, r12
   114e2:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
   114e6:	f5 01       	movw	r30, r10
   114e8:	10 82       	st	Z, r1
   114ea:	11 82       	std	Z+1, r1	; 0x01
   114ec:	12 82       	std	Z+2, r1	; 0x02
   114ee:	13 82       	std	Z+3, r1	; 0x03
   114f0:	f1 2c       	mov	r15, r1
   114f2:	e1 2c       	mov	r14, r1
   114f4:	00 e0       	ldi	r16, 0x00	; 0
   114f6:	8e e1       	ldi	r24, 0x1E	; 30
   114f8:	88 2e       	mov	r8, r24
   114fa:	be 01       	movw	r22, r28
   114fc:	6f 5f       	subi	r22, 0xFF	; 255
   114fe:	7f 4f       	sbci	r23, 0xFF	; 255
   11500:	8e 2d       	mov	r24, r14
   11502:	0e 94 40 b2 	call	0x16480	; 0x16480 <get_tds18s20(unsigned char, struct_DDS18s20*)>
   11506:	81 30       	cpi	r24, 0x01	; 1
   11508:	e9 f5       	brne	.+122    	; 0x11584 <get_global_temp(unsigned char, char*, float*)+0xd6>
   1150a:	89 81       	ldd	r24, Y+1	; 0x01
   1150c:	81 30       	cpi	r24, 0x01	; 1
   1150e:	d1 f5       	brne	.+116    	; 0x11584 <get_global_temp(unsigned char, char*, float*)+0xd6>
   11510:	90 12       	cpse	r9, r16
   11512:	37 c0       	rjmp	.+110    	; 0x11582 <get_global_temp(unsigned char, char*, float*)+0xd4>
   11514:	be 01       	movw	r22, r28
   11516:	63 5f       	subi	r22, 0xF3	; 243
   11518:	7f 4f       	sbci	r23, 0xFF	; 255
   1151a:	c6 01       	movw	r24, r12
   1151c:	0f 94 67 1a 	call	0x234ce	; 0x234ce <strcpy>
   11520:	8e 9c       	mul	r8, r14
   11522:	f0 01       	movw	r30, r0
   11524:	8f 9c       	mul	r8, r15
   11526:	f0 0d       	add	r31, r0
   11528:	11 24       	eor	r1, r1
   1152a:	e2 52       	subi	r30, 0x22	; 34
   1152c:	ff 4e       	sbci	r31, 0xEF	; 239
   1152e:	13 8d       	ldd	r17, Z+27	; 0x1b
   11530:	11 30       	cpi	r17, 0x01	; 1
   11532:	39 f5       	brne	.+78     	; 0x11582 <get_global_temp(unsigned char, char*, float*)+0xd4>
   11534:	65 81       	ldd	r22, Z+5	; 0x05
   11536:	76 81       	ldd	r23, Z+6	; 0x06
   11538:	07 2e       	mov	r0, r23
   1153a:	00 0c       	add	r0, r0
   1153c:	88 0b       	sbc	r24, r24
   1153e:	99 0b       	sbc	r25, r25
   11540:	0f 94 f7 14 	call	0x229ee	; 0x229ee <__floatsisf>
   11544:	20 e0       	ldi	r18, 0x00	; 0
   11546:	30 e0       	ldi	r19, 0x00	; 0
   11548:	4a e7       	ldi	r20, 0x7A	; 122
   1154a:	54 e4       	ldi	r21, 0x44	; 68
   1154c:	0f 94 4d 14 	call	0x2289a	; 0x2289a <__divsf3>
   11550:	f5 01       	movw	r30, r10
   11552:	60 83       	st	Z, r22
   11554:	71 83       	std	Z+1, r23	; 0x01
   11556:	82 83       	std	Z+2, r24	; 0x02
   11558:	93 83       	std	Z+3, r25	; 0x03
   1155a:	81 2f       	mov	r24, r17
   1155c:	67 96       	adiw	r28, 0x17	; 23
   1155e:	0f b6       	in	r0, 0x3f	; 63
   11560:	f8 94       	cli
   11562:	de bf       	out	0x3e, r29	; 62
   11564:	0f be       	out	0x3f, r0	; 63
   11566:	cd bf       	out	0x3d, r28	; 61
   11568:	df 91       	pop	r29
   1156a:	cf 91       	pop	r28
   1156c:	1f 91       	pop	r17
   1156e:	0f 91       	pop	r16
   11570:	ff 90       	pop	r15
   11572:	ef 90       	pop	r14
   11574:	df 90       	pop	r13
   11576:	cf 90       	pop	r12
   11578:	bf 90       	pop	r11
   1157a:	af 90       	pop	r10
   1157c:	9f 90       	pop	r9
   1157e:	8f 90       	pop	r8
   11580:	08 95       	ret
   11582:	0f 5f       	subi	r16, 0xFF	; 255
   11584:	ff ef       	ldi	r31, 0xFF	; 255
   11586:	ef 1a       	sub	r14, r31
   11588:	ff 0a       	sbc	r15, r31
   1158a:	86 e0       	ldi	r24, 0x06	; 6
   1158c:	e8 16       	cp	r14, r24
   1158e:	f1 04       	cpc	r15, r1
   11590:	09 f0       	breq	.+2      	; 0x11594 <get_global_temp(unsigned char, char*, float*)+0xe6>
   11592:	b3 cf       	rjmp	.-154    	; 0x114fa <get_global_temp(unsigned char, char*, float*)+0x4c>
   11594:	10 e0       	ldi	r17, 0x00	; 0
   11596:	be 01       	movw	r22, r28
   11598:	69 5e       	subi	r22, 0xE9	; 233
   1159a:	7f 4f       	sbci	r23, 0xFF	; 255
   1159c:	81 2f       	mov	r24, r17
   1159e:	0e 94 00 63 	call	0xc600	; 0xc600 <remote_tds_get_active(unsigned char, unsigned char*)>
   115a2:	8f 89       	ldd	r24, Y+23	; 0x17
   115a4:	81 30       	cpi	r24, 0x01	; 1
   115a6:	51 f5       	brne	.+84     	; 0x115fc <get_global_temp(unsigned char, char*, float*)+0x14e>
   115a8:	90 12       	cpse	r9, r16
   115aa:	27 c0       	rjmp	.+78     	; 0x115fa <get_global_temp(unsigned char, char*, float*)+0x14c>
   115ac:	a6 01       	movw	r20, r12
   115ae:	be 01       	movw	r22, r28
   115b0:	69 5e       	subi	r22, 0xE9	; 233
   115b2:	7f 4f       	sbci	r23, 0xFF	; 255
   115b4:	81 2f       	mov	r24, r17
   115b6:	0e 94 64 62 	call	0xc4c8	; 0xc4c8 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
   115ba:	81 2f       	mov	r24, r17
   115bc:	0e 94 23 66 	call	0xcc46	; 0xcc46 <remote_tds_get_last_update(unsigned char)>
   115c0:	8a 3f       	cpi	r24, 0xFA	; 250
   115c2:	d8 f4       	brcc	.+54     	; 0x115fa <get_global_temp(unsigned char, char*, float*)+0x14c>
   115c4:	81 2f       	mov	r24, r17
   115c6:	0e 94 df 64 	call	0xc9be	; 0xc9be <remote_tds_get_type(unsigned char)>
   115ca:	81 30       	cpi	r24, 0x01	; 1
   115cc:	b1 f4       	brne	.+44     	; 0x115fa <get_global_temp(unsigned char, char*, float*)+0x14c>
   115ce:	81 2f       	mov	r24, r17
   115d0:	0e 94 f4 65 	call	0xcbe8	; 0xcbe8 <remote_tds_get_data(unsigned char)>
   115d4:	bc 01       	movw	r22, r24
   115d6:	99 0f       	add	r25, r25
   115d8:	88 0b       	sbc	r24, r24
   115da:	99 0b       	sbc	r25, r25
   115dc:	0f 94 f7 14 	call	0x229ee	; 0x229ee <__floatsisf>
   115e0:	20 e0       	ldi	r18, 0x00	; 0
   115e2:	30 e0       	ldi	r19, 0x00	; 0
   115e4:	4a e7       	ldi	r20, 0x7A	; 122
   115e6:	54 e4       	ldi	r21, 0x44	; 68
   115e8:	0f 94 4d 14 	call	0x2289a	; 0x2289a <__divsf3>
   115ec:	f5 01       	movw	r30, r10
   115ee:	60 83       	st	Z, r22
   115f0:	71 83       	std	Z+1, r23	; 0x01
   115f2:	82 83       	std	Z+2, r24	; 0x02
   115f4:	93 83       	std	Z+3, r25	; 0x03
   115f6:	12 e0       	ldi	r17, 0x02	; 2
   115f8:	b0 cf       	rjmp	.-160    	; 0x1155a <get_global_temp(unsigned char, char*, float*)+0xac>
   115fa:	0f 5f       	subi	r16, 0xFF	; 255
   115fc:	1f 5f       	subi	r17, 0xFF	; 255
   115fe:	1a 30       	cpi	r17, 0x0A	; 10
   11600:	51 f6       	brne	.-108    	; 0x11596 <get_global_temp(unsigned char, char*, float*)+0xe8>
   11602:	10 e0       	ldi	r17, 0x00	; 0
   11604:	aa cf       	rjmp	.-172    	; 0x1155a <get_global_temp(unsigned char, char*, float*)+0xac>

00011606 <display_element_show_temp_decorate_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>:
_Z36display_element_show_temp_decorate_1jjjjjhPc():
   11606:	4f 92       	push	r4
   11608:	5f 92       	push	r5
   1160a:	6f 92       	push	r6
   1160c:	7f 92       	push	r7
   1160e:	8f 92       	push	r8
   11610:	9f 92       	push	r9
   11612:	af 92       	push	r10
   11614:	bf 92       	push	r11
   11616:	cf 92       	push	r12
   11618:	ef 92       	push	r14
   1161a:	ff 92       	push	r15
   1161c:	0f 93       	push	r16
   1161e:	1f 93       	push	r17
   11620:	cf 93       	push	r28
   11622:	df 93       	push	r29
   11624:	cd b7       	in	r28, 0x3d	; 61
   11626:	de b7       	in	r29, 0x3e	; 62
   11628:	e8 97       	sbiw	r28, 0x38	; 56
   1162a:	0f b6       	in	r0, 0x3f	; 63
   1162c:	f8 94       	cli
   1162e:	de bf       	out	0x3e, r29	; 62
   11630:	0f be       	out	0x3f, r0	; 63
   11632:	cd bf       	out	0x3d, r28	; 61
   11634:	5c 01       	movw	r10, r24
   11636:	4b 01       	movw	r8, r22
   11638:	3a 01       	movw	r6, r20
   1163a:	29 01       	movw	r4, r18
   1163c:	68 e2       	ldi	r22, 0x28	; 40
   1163e:	75 e8       	ldi	r23, 0x85	; 133
   11640:	ce 01       	movw	r24, r28
   11642:	01 96       	adiw	r24, 0x01	; 1
   11644:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
   11648:	ae 01       	movw	r20, r28
   1164a:	4b 5c       	subi	r20, 0xCB	; 203
   1164c:	5f 4f       	sbci	r21, 0xFF	; 255
   1164e:	be 01       	movw	r22, r28
   11650:	6f 5d       	subi	r22, 0xDF	; 223
   11652:	7f 4f       	sbci	r23, 0xFF	; 255
   11654:	80 91 38 0b 	lds	r24, 0x0B38	; 0x800b38 <default_show_temp>
   11658:	0e 94 57 8a 	call	0x114ae	; 0x114ae <get_global_temp(unsigned char, char*, float*)>
   1165c:	be 01       	movw	r22, r28
   1165e:	6f 5d       	subi	r22, 0xDF	; 223
   11660:	7f 4f       	sbci	r23, 0xFF	; 255
   11662:	ce 01       	movw	r24, r28
   11664:	01 96       	adiw	r24, 0x01	; 1
   11666:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
   1166a:	a4 01       	movw	r20, r8
   1166c:	4b 5f       	subi	r20, 0xFB	; 251
   1166e:	5f 4f       	sbci	r21, 0xFF	; 255
   11670:	b5 01       	movw	r22, r10
   11672:	6b 5f       	subi	r22, 0xFB	; 251
   11674:	7f 4f       	sbci	r23, 0xFF	; 255
   11676:	c1 2c       	mov	r12, r1
   11678:	ee 24       	eor	r14, r14
   1167a:	ea 94       	dec	r14
   1167c:	fe 2c       	mov	r15, r14
   1167e:	10 e0       	ldi	r17, 0x00	; 0
   11680:	00 e0       	ldi	r16, 0x00	; 0
   11682:	21 e0       	ldi	r18, 0x01	; 1
   11684:	ce 01       	movw	r24, r28
   11686:	01 96       	adiw	r24, 0x01	; 1
   11688:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
   1168c:	70 e0       	ldi	r23, 0x00	; 0
   1168e:	60 e0       	ldi	r22, 0x00	; 0
   11690:	88 eb       	ldi	r24, 0xB8	; 184
   11692:	9c e0       	ldi	r25, 0x0C	; 12
   11694:	0e 94 a9 bc 	call	0x17952	; 0x17952 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
   11698:	84 01       	movw	r16, r8
   1169a:	04 0d       	add	r16, r4
   1169c:	15 1d       	adc	r17, r5
   1169e:	95 01       	movw	r18, r10
   116a0:	26 0d       	add	r18, r6
   116a2:	37 1d       	adc	r19, r7
   116a4:	a4 01       	movw	r20, r8
   116a6:	b5 01       	movw	r22, r10
   116a8:	88 eb       	ldi	r24, 0xB8	; 184
   116aa:	9c e0       	ldi	r25, 0x0C	; 12
   116ac:	0e 94 34 bd 	call	0x17a68	; 0x17a68 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
   116b0:	e8 96       	adiw	r28, 0x38	; 56
   116b2:	0f b6       	in	r0, 0x3f	; 63
   116b4:	f8 94       	cli
   116b6:	de bf       	out	0x3e, r29	; 62
   116b8:	0f be       	out	0x3f, r0	; 63
   116ba:	cd bf       	out	0x3d, r28	; 61
   116bc:	df 91       	pop	r29
   116be:	cf 91       	pop	r28
   116c0:	1f 91       	pop	r17
   116c2:	0f 91       	pop	r16
   116c4:	ff 90       	pop	r15
   116c6:	ef 90       	pop	r14
   116c8:	cf 90       	pop	r12
   116ca:	bf 90       	pop	r11
   116cc:	af 90       	pop	r10
   116ce:	9f 90       	pop	r9
   116d0:	8f 90       	pop	r8
   116d2:	7f 90       	pop	r7
   116d4:	6f 90       	pop	r6
   116d6:	5f 90       	pop	r5
   116d8:	4f 90       	pop	r4
   116da:	08 95       	ret

000116dc <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>:
_Z27display_element_show_temp_1jjjjjhPc():
   116dc:	6f 92       	push	r6
   116de:	7f 92       	push	r7
   116e0:	8f 92       	push	r8
   116e2:	9f 92       	push	r9
   116e4:	af 92       	push	r10
   116e6:	bf 92       	push	r11
   116e8:	cf 92       	push	r12
   116ea:	ef 92       	push	r14
   116ec:	ff 92       	push	r15
   116ee:	0f 93       	push	r16
   116f0:	1f 93       	push	r17
   116f2:	cf 93       	push	r28
   116f4:	df 93       	push	r29
   116f6:	cd b7       	in	r28, 0x3d	; 61
   116f8:	de b7       	in	r29, 0x3e	; 62
   116fa:	e8 97       	sbiw	r28, 0x38	; 56
   116fc:	0f b6       	in	r0, 0x3f	; 63
   116fe:	f8 94       	cli
   11700:	de bf       	out	0x3e, r29	; 62
   11702:	0f be       	out	0x3f, r0	; 63
   11704:	cd bf       	out	0x3d, r28	; 61
   11706:	4c 01       	movw	r8, r24
   11708:	3b 01       	movw	r6, r22
   1170a:	ae 01       	movw	r20, r28
   1170c:	4b 5c       	subi	r20, 0xCB	; 203
   1170e:	5f 4f       	sbci	r21, 0xFF	; 255
   11710:	be 01       	movw	r22, r28
   11712:	6f 5d       	subi	r22, 0xDF	; 223
   11714:	7f 4f       	sbci	r23, 0xFF	; 255
   11716:	80 91 38 0b 	lds	r24, 0x0B38	; 0x800b38 <default_show_temp>
   1171a:	0e 94 57 8a 	call	0x114ae	; 0x114ae <get_global_temp(unsigned char, char*, float*)>
   1171e:	24 e1       	ldi	r18, 0x14	; 20
   11720:	62 0e       	add	r6, r18
   11722:	71 1c       	adc	r7, r1
   11724:	34 e0       	ldi	r19, 0x04	; 4
   11726:	83 0e       	add	r8, r19
   11728:	91 1c       	adc	r9, r1
   1172a:	9e 01       	movw	r18, r28
   1172c:	2f 5f       	subi	r18, 0xFF	; 255
   1172e:	3f 4f       	sbci	r19, 0xFF	; 255
   11730:	59 01       	movw	r10, r18
   11732:	88 23       	and	r24, r24
   11734:	b9 f1       	breq	.+110    	; 0x117a4 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0xc8>
   11736:	6d a9       	ldd	r22, Y+53	; 0x35
   11738:	7e a9       	ldd	r23, Y+54	; 0x36
   1173a:	8f a9       	ldd	r24, Y+55	; 0x37
   1173c:	98 ad       	ldd	r25, Y+56	; 0x38
   1173e:	89 01       	movw	r16, r18
   11740:	21 e0       	ldi	r18, 0x01	; 1
   11742:	44 e0       	ldi	r20, 0x04	; 4
   11744:	0f 94 c0 16 	call	0x22d80	; 0x22d80 <dtostrf>
   11748:	f5 01       	movw	r30, r10
   1174a:	01 90       	ld	r0, Z+
   1174c:	00 20       	and	r0, r0
   1174e:	e9 f7       	brne	.-6      	; 0x1174a <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x6e>
   11750:	31 97       	sbiw	r30, 0x01	; 1
   11752:	ea 19       	sub	r30, r10
   11754:	fb 09       	sbc	r31, r11
   11756:	35 97       	sbiw	r30, 0x05	; 5
   11758:	28 f4       	brcc	.+10     	; 0x11764 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x88>
   1175a:	68 e2       	ldi	r22, 0x28	; 40
   1175c:	76 e0       	ldi	r23, 0x06	; 6
   1175e:	c5 01       	movw	r24, r10
   11760:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
   11764:	c1 2c       	mov	r12, r1
   11766:	ee 24       	eor	r14, r14
   11768:	ea 94       	dec	r14
   1176a:	fe 2c       	mov	r15, r14
   1176c:	10 e0       	ldi	r17, 0x00	; 0
   1176e:	00 e0       	ldi	r16, 0x00	; 0
   11770:	28 e0       	ldi	r18, 0x08	; 8
   11772:	a3 01       	movw	r20, r6
   11774:	b4 01       	movw	r22, r8
   11776:	c5 01       	movw	r24, r10
   11778:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
   1177c:	e8 96       	adiw	r28, 0x38	; 56
   1177e:	0f b6       	in	r0, 0x3f	; 63
   11780:	f8 94       	cli
   11782:	de bf       	out	0x3e, r29	; 62
   11784:	0f be       	out	0x3f, r0	; 63
   11786:	cd bf       	out	0x3d, r28	; 61
   11788:	df 91       	pop	r29
   1178a:	cf 91       	pop	r28
   1178c:	1f 91       	pop	r17
   1178e:	0f 91       	pop	r16
   11790:	ff 90       	pop	r15
   11792:	ef 90       	pop	r14
   11794:	cf 90       	pop	r12
   11796:	bf 90       	pop	r11
   11798:	af 90       	pop	r10
   1179a:	9f 90       	pop	r9
   1179c:	8f 90       	pop	r8
   1179e:	7f 90       	pop	r7
   117a0:	6f 90       	pop	r6
   117a2:	08 95       	ret
   117a4:	6b ed       	ldi	r22, 0xDB	; 219
   117a6:	71 e8       	ldi	r23, 0x81	; 129
   117a8:	c9 01       	movw	r24, r18
   117aa:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
   117ae:	c1 2c       	mov	r12, r1
   117b0:	ee 24       	eor	r14, r14
   117b2:	ea 94       	dec	r14
   117b4:	fe 2c       	mov	r15, r14
   117b6:	00 e0       	ldi	r16, 0x00	; 0
   117b8:	18 ef       	ldi	r17, 0xF8	; 248
   117ba:	da cf       	rjmp	.-76     	; 0x11770 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x94>

000117bc <display_element_show_all_temp(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>:
_Z29display_element_show_all_tempjjjjjhPc():
   117bc:	3f 92       	push	r3
   117be:	4f 92       	push	r4
   117c0:	5f 92       	push	r5
   117c2:	6f 92       	push	r6
   117c4:	7f 92       	push	r7
   117c6:	8f 92       	push	r8
   117c8:	9f 92       	push	r9
   117ca:	af 92       	push	r10
   117cc:	bf 92       	push	r11
   117ce:	cf 92       	push	r12
   117d0:	df 92       	push	r13
   117d2:	ef 92       	push	r14
   117d4:	ff 92       	push	r15
   117d6:	0f 93       	push	r16
   117d8:	1f 93       	push	r17
   117da:	cf 93       	push	r28
   117dc:	df 93       	push	r29
   117de:	cd b7       	in	r28, 0x3d	; 61
   117e0:	de b7       	in	r29, 0x3e	; 62
   117e2:	ac 97       	sbiw	r28, 0x2c	; 44
   117e4:	0f b6       	in	r0, 0x3f	; 63
   117e6:	f8 94       	cli
   117e8:	de bf       	out	0x3e, r29	; 62
   117ea:	0f be       	out	0x3f, r0	; 63
   117ec:	cd bf       	out	0x3d, r28	; 61
   117ee:	3c 01       	movw	r6, r24
   117f0:	2b 01       	movw	r4, r22
   117f2:	4e 01       	movw	r8, r28
   117f4:	81 e2       	ldi	r24, 0x21	; 33
   117f6:	88 0e       	add	r8, r24
   117f8:	91 1c       	adc	r9, r1
   117fa:	60 91 19 0b 	lds	r22, 0x0B19	; 0x800b19 <internal_temp>
   117fe:	70 91 1a 0b 	lds	r23, 0x0B1A	; 0x800b1a <internal_temp+0x1>
   11802:	80 91 1b 0b 	lds	r24, 0x0B1B	; 0x800b1b <internal_temp+0x2>
   11806:	90 91 1c 0b 	lds	r25, 0x0B1C	; 0x800b1c <internal_temp+0x3>
   1180a:	84 01       	movw	r16, r8
   1180c:	22 e0       	ldi	r18, 0x02	; 2
   1180e:	44 e0       	ldi	r20, 0x04	; 4
   11810:	0f 94 c0 16 	call	0x22d80	; 0x22d80 <dtostrf>
   11814:	9f 92       	push	r9
   11816:	8f 92       	push	r8
   11818:	84 e1       	ldi	r24, 0x14	; 20
   1181a:	96 e0       	ldi	r25, 0x06	; 6
   1181c:	9f 93       	push	r25
   1181e:	8f 93       	push	r24
   11820:	ce 01       	movw	r24, r28
   11822:	01 96       	adiw	r24, 0x01	; 1
   11824:	5c 01       	movw	r10, r24
   11826:	9f 93       	push	r25
   11828:	8f 93       	push	r24
   1182a:	0f 94 a6 1b 	call	0x2374c	; 0x2374c <sprintf>
   1182e:	c1 2c       	mov	r12, r1
   11830:	ee 24       	eor	r14, r14
   11832:	ea 94       	dec	r14
   11834:	fe 2c       	mov	r15, r14
   11836:	10 e0       	ldi	r17, 0x00	; 0
   11838:	00 e0       	ldi	r16, 0x00	; 0
   1183a:	22 e0       	ldi	r18, 0x02	; 2
   1183c:	a2 01       	movw	r20, r4
   1183e:	b3 01       	movw	r22, r6
   11840:	c5 01       	movw	r24, r10
   11842:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
   11846:	0f 90       	pop	r0
   11848:	0f 90       	pop	r0
   1184a:	0f 90       	pop	r0
   1184c:	0f 90       	pop	r0
   1184e:	0f 90       	pop	r0
   11850:	0f 90       	pop	r0
   11852:	80 e0       	ldi	r24, 0x00	; 0
   11854:	29 e1       	ldi	r18, 0x19	; 25
   11856:	32 2e       	mov	r3, r18
   11858:	dd 24       	eor	r13, r13
   1185a:	d3 94       	inc	r13
   1185c:	d8 0e       	add	r13, r24
_Z38button_get_show_default_temp_max_itemsjjh():
   1185e:	90 91 26 0b 	lds	r25, 0x0B26	; 0x800b26 <use_tds>
   11862:	20 91 27 0b 	lds	r18, 0x0B27	; 0x800b27 <use_rtds>
   11866:	92 0f       	add	r25, r18
_Z29display_element_show_all_tempjjjjjhPc():
   11868:	89 17       	cp	r24, r25
   1186a:	d0 f5       	brcc	.+116    	; 0x118e0 <display_element_show_all_temp(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x124>
   1186c:	ae 01       	movw	r20, r28
   1186e:	47 5d       	subi	r20, 0xD7	; 215
   11870:	5f 4f       	sbci	r21, 0xFF	; 255
   11872:	b5 01       	movw	r22, r10
   11874:	0e 94 57 8a 	call	0x114ae	; 0x114ae <get_global_temp(unsigned char, char*, float*)>
   11878:	60 e9       	ldi	r22, 0x90	; 144
   1187a:	78 e0       	ldi	r23, 0x08	; 8
   1187c:	88 23       	and	r24, r24
   1187e:	39 f1       	breq	.+78     	; 0x118ce <display_element_show_all_temp(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x112>
   11880:	c5 01       	movw	r24, r10
   11882:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
   11886:	69 a5       	ldd	r22, Y+41	; 0x29
   11888:	7a a5       	ldd	r23, Y+42	; 0x2a
   1188a:	8b a5       	ldd	r24, Y+43	; 0x2b
   1188c:	9c a5       	ldd	r25, Y+44	; 0x2c
   1188e:	84 01       	movw	r16, r8
   11890:	21 e0       	ldi	r18, 0x01	; 1
   11892:	44 e0       	ldi	r20, 0x04	; 4
   11894:	0f 94 c0 16 	call	0x22d80	; 0x22d80 <dtostrf>
   11898:	68 e2       	ldi	r22, 0x28	; 40
   1189a:	76 e0       	ldi	r23, 0x06	; 6
   1189c:	c4 01       	movw	r24, r8
   1189e:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
   118a2:	b4 01       	movw	r22, r8
   118a4:	c5 01       	movw	r24, r10
   118a6:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
   118aa:	a2 01       	movw	r20, r4
   118ac:	d3 9c       	mul	r13, r3
   118ae:	40 0d       	add	r20, r0
   118b0:	51 1d       	adc	r21, r1
   118b2:	11 24       	eor	r1, r1
   118b4:	c1 2c       	mov	r12, r1
   118b6:	ee 24       	eor	r14, r14
   118b8:	ea 94       	dec	r14
   118ba:	fe 2c       	mov	r15, r14
   118bc:	10 e0       	ldi	r17, 0x00	; 0
   118be:	00 e0       	ldi	r16, 0x00	; 0
   118c0:	22 e0       	ldi	r18, 0x02	; 2
   118c2:	b3 01       	movw	r22, r6
   118c4:	c5 01       	movw	r24, r10
   118c6:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
   118ca:	8d 2d       	mov	r24, r13
   118cc:	c5 cf       	rjmp	.-118    	; 0x11858 <display_element_show_all_temp(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x9c>
   118ce:	c5 01       	movw	r24, r10
   118d0:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
   118d4:	6b ed       	ldi	r22, 0xDB	; 219
   118d6:	71 e8       	ldi	r23, 0x81	; 129
   118d8:	c5 01       	movw	r24, r10
   118da:	0f 94 17 1a 	call	0x2342e	; 0x2342e <strcat_P>
   118de:	e5 cf       	rjmp	.-54     	; 0x118aa <display_element_show_all_temp(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0xee>
   118e0:	ac 96       	adiw	r28, 0x2c	; 44
   118e2:	0f b6       	in	r0, 0x3f	; 63
   118e4:	f8 94       	cli
   118e6:	de bf       	out	0x3e, r29	; 62
   118e8:	0f be       	out	0x3f, r0	; 63
   118ea:	cd bf       	out	0x3d, r28	; 61
   118ec:	df 91       	pop	r29
   118ee:	cf 91       	pop	r28
   118f0:	1f 91       	pop	r17
   118f2:	0f 91       	pop	r16
   118f4:	ff 90       	pop	r15
   118f6:	ef 90       	pop	r14
   118f8:	df 90       	pop	r13
   118fa:	cf 90       	pop	r12
   118fc:	bf 90       	pop	r11
   118fe:	af 90       	pop	r10
   11900:	9f 90       	pop	r9
   11902:	8f 90       	pop	r8
   11904:	7f 90       	pop	r7
   11906:	6f 90       	pop	r6
   11908:	5f 90       	pop	r5
   1190a:	4f 90       	pop	r4
   1190c:	3f 90       	pop	r3
   1190e:	08 95       	ret

00011910 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE7currentEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:47
  }

 private:
  JsonDeserializer &operator=(const JsonDeserializer &);  // non-copiable

  char current() {
   11910:	fc 01       	movw	r30, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:48
    if (!_loaded) {
   11912:	80 85       	ldd	r24, Z+8	; 0x08
   11914:	81 11       	cpse	r24, r1
   11916:	0a c0       	rjmp	.+20     	; 0x1192c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()+0x1c>
_ZN11ArduinoJson9Internals23UnsafeCharPointerReaderIcE4readEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/./CharPointerReader.hpp:19
 public:
  explicit UnsafeCharPointerReader(const TChar* ptr)
      : _ptr(ptr ? ptr : reinterpret_cast<const TChar*>("")) {}

  char read() {
    return static_cast<char>(*_ptr++);
   11918:	a2 81       	ldd	r26, Z+2	; 0x02
   1191a:	b3 81       	ldd	r27, Z+3	; 0x03
   1191c:	cd 01       	movw	r24, r26
   1191e:	01 96       	adiw	r24, 0x01	; 1
   11920:	93 83       	std	Z+3, r25	; 0x03
   11922:	82 83       	std	Z+2, r24	; 0x02
   11924:	8c 91       	ld	r24, X
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE7currentEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:52
      if (_reader.ended())
        _current = 0;
      else
        _current = _reader.read();
   11926:	87 83       	std	Z+7, r24	; 0x07
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:53
      _loaded = true;
   11928:	81 e0       	ldi	r24, 0x01	; 1
   1192a:	80 87       	std	Z+8, r24	; 0x08
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:56
    }
    return _current;
  }
   1192c:	87 81       	ldd	r24, Z+7	; 0x07
   1192e:	08 95       	ret

00011930 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:277

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
  }

  DeserializationError skipSpacesAndComments() {
   11930:	1f 93       	push	r17
   11932:	cf 93       	push	r28
   11934:	df 93       	push	r29
   11936:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:279
    for (;;) {
      switch (current()) {
   11938:	ce 01       	movw	r24, r28
   1193a:	0e 94 88 8c 	call	0x11910	; 0x11910 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
   1193e:	8b 30       	cpi	r24, 0x0B	; 11
   11940:	3c f4       	brge	.+14     	; 0x11950 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x20>
   11942:	89 30       	cpi	r24, 0x09	; 9
   11944:	5c f4       	brge	.+22     	; 0x1195c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x2c>
   11946:	88 23       	and	r24, r24
   11948:	e9 f0       	breq	.+58     	; 0x11984 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x54>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:331
              return DeserializationError::InvalidInput;
          }
          break;

        default:
          return DeserializationError::Ok;
   1194a:	90 e0       	ldi	r25, 0x00	; 0
   1194c:	80 e0       	ldi	r24, 0x00	; 0
   1194e:	1c c0       	rjmp	.+56     	; 0x11988 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x58>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:279
    return c == '\'' || c == '\"';
  }

  DeserializationError skipSpacesAndComments() {
    for (;;) {
      switch (current()) {
   11950:	80 32       	cpi	r24, 0x20	; 32
   11952:	21 f0       	breq	.+8      	; 0x1195c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x2c>
   11954:	8f 32       	cpi	r24, 0x2F	; 47
   11956:	21 f0       	breq	.+8      	; 0x11960 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x30>
   11958:	8d 30       	cpi	r24, 0x0D	; 13
   1195a:	b9 f7       	brne	.-18     	; 0x1194a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x1a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
   1195c:	18 86       	std	Y+8, r1	; 0x08
   1195e:	ec cf       	rjmp	.-40     	; 0x11938 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x8>
   11960:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:295
          continue;

        // comments
        case '/':
          move();  // skip '/'
          switch (current()) {
   11962:	ce 01       	movw	r24, r28
   11964:	0e 94 88 8c 	call	0x11910	; 0x11910 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
   11968:	8a 32       	cpi	r24, 0x2A	; 42
   1196a:	29 f0       	breq	.+10     	; 0x11976 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x46>
   1196c:	8f 32       	cpi	r24, 0x2F	; 47
   1196e:	d1 f0       	breq	.+52     	; 0x119a4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x74>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:326
              }
              break;

            // not a comment, just a '/'
            default:
              return DeserializationError::InvalidInput;
   11970:	82 e0       	ldi	r24, 0x02	; 2
   11972:	90 e0       	ldi	r25, 0x00	; 0
   11974:	09 c0       	rjmp	.+18     	; 0x11988 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x58>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
   11976:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:299
          move();  // skip '/'
          switch (current()) {
            // block comment
            case '*': {
              move();  // skip '*'
              bool wasStar = false;
   11978:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:301
              for (;;) {
                char c = current();
   1197a:	ce 01       	movw	r24, r28
   1197c:	0e 94 88 8c 	call	0x11910	; 0x11910 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:302
                if (c == '\0') return DeserializationError::IncompleteInput;
   11980:	81 11       	cpse	r24, r1
   11982:	06 c0       	rjmp	.+12     	; 0x11990 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x60>
   11984:	81 e0       	ldi	r24, 0x01	; 1
   11986:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:334

        default:
          return DeserializationError::Ok;
      }
    }
  }
   11988:	df 91       	pop	r29
   1198a:	cf 91       	pop	r28
   1198c:	1f 91       	pop	r17
   1198e:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:303
              move();  // skip '*'
              bool wasStar = false;
              for (;;) {
                char c = current();
                if (c == '\0') return DeserializationError::IncompleteInput;
                if (c == '/' && wasStar) {
   11990:	8f 32       	cpi	r24, 0x2F	; 47
   11992:	11 f4       	brne	.+4      	; 0x11998 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x68>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:303 (discriminator 1)
   11994:	11 11       	cpse	r17, r1
   11996:	e2 cf       	rjmp	.-60     	; 0x1195c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x2c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:307
                  move();
                  break;
                }
                wasStar = c == '*';
   11998:	11 e0       	ldi	r17, 0x01	; 1
   1199a:	8a 32       	cpi	r24, 0x2A	; 42
   1199c:	09 f0       	breq	.+2      	; 0x119a0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x70>
   1199e:	10 e0       	ldi	r17, 0x00	; 0
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
   119a0:	18 86       	std	Y+8, r1	; 0x08
   119a2:	eb cf       	rjmp	.-42     	; 0x1197a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x4a>
   119a4:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:318
            // trailing comment
            case '/':
              // no need to skip "//"
              for (;;) {
                move();
                char c = current();
   119a6:	ce 01       	movw	r24, r28
   119a8:	0e 94 88 8c 	call	0x11910	; 0x11910 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:319
                if (c == '\0') return DeserializationError::IncompleteInput;
   119ac:	88 23       	and	r24, r24
   119ae:	51 f3       	breq	.-44     	; 0x11984 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x54>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:320
                if (c == '\n') break;
   119b0:	8a 30       	cpi	r24, 0x0A	; 10
   119b2:	c1 f7       	brne	.-16     	; 0x119a4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x74>
   119b4:	c1 cf       	rjmp	.-126    	; 0x11938 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x8>

000119b6 <float ArduinoJson::Internals::parseFloat<float>(char const*)>:
_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:15

namespace ArduinoJson {
namespace Internals {

template <typename T>
inline T parseFloat(const char* s) {
   119b6:	ff 92       	push	r15
   119b8:	0f 93       	push	r16
   119ba:	1f 93       	push	r17
   119bc:	cf 93       	push	r28
   119be:	df 93       	push	r29
   119c0:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:20
  typedef FloatTraits<T> traits;
  typedef typename traits::mantissa_type mantissa_t;
  typedef typename traits::exponent_type exponent_t;

  if (!s) return 0;  // NULL
   119c2:	89 2b       	or	r24, r25
   119c4:	09 f4       	brne	.+2      	; 0x119c8 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x12>
   119c6:	8b c0       	rjmp	.+278    	; 0x11ade <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x128>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:23

  bool negative_result = false;
  switch (*s) {
   119c8:	88 81       	ld	r24, Y
   119ca:	8b 32       	cpi	r24, 0x2B	; 43
   119cc:	91 f1       	breq	.+100    	; 0x11a32 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x7c>
   119ce:	8d 32       	cpi	r24, 0x2D	; 45
   119d0:	89 f5       	brne	.+98     	; 0x11a34 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x7e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:26
    case '-':
      negative_result = true;
      s++;
   119d2:	21 96       	adiw	r28, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:25
  if (!s) return 0;  // NULL

  bool negative_result = false;
  switch (*s) {
    case '-':
      negative_result = true;
   119d4:	11 e0       	ldi	r17, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:33
    case '+':
      s++;
      break;
  }

  if (*s == 't') return 1;  // true
   119d6:	88 81       	ld	r24, Y
   119d8:	84 37       	cpi	r24, 0x74	; 116
   119da:	09 f4       	brne	.+2      	; 0x119de <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x28>
   119dc:	db c0       	rjmp	.+438    	; 0x11b94 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x1de>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:34 (discriminator 2)
  if (*s == 'n' || *s == 'N') return traits::nan();
   119de:	8f 7d       	andi	r24, 0xDF	; 223
   119e0:	8e 34       	cpi	r24, 0x4E	; 78
   119e2:	09 f4       	brne	.+2      	; 0x119e6 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x30>
   119e4:	dc c0       	rjmp	.+440    	; 0x11b9e <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x1e8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:35 (discriminator 1)
  if (*s == 'i' || *s == 'I')
   119e6:	89 34       	cpi	r24, 0x49	; 73
   119e8:	09 f4       	brne	.+2      	; 0x119ec <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x36>
   119ea:	84 c0       	rjmp	.+264    	; 0x11af4 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x13e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:39
    return negative_result ? -traits::inf() : traits::inf();

  mantissa_t mantissa = 0;
  exponent_t exponent_offset = 0;
   119ec:	f1 2c       	mov	r15, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:38
  if (*s == 't') return 1;  // true
  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return negative_result ? -traits::inf() : traits::inf();

  mantissa_t mantissa = 0;
   119ee:	20 e0       	ldi	r18, 0x00	; 0
   119f0:	30 e0       	ldi	r19, 0x00	; 0
   119f2:	a9 01       	movw	r20, r18
   119f4:	fe 01       	movw	r30, r28
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:41
  exponent_t exponent_offset = 0;

  while (isdigit(*s)) {
   119f6:	09 91       	ld	r16, Y+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11

namespace ArduinoJson {
namespace Internals {

inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
   119f8:	80 ed       	ldi	r24, 0xD0	; 208
   119fa:	80 0f       	add	r24, r16
_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:41
   119fc:	8a 30       	cpi	r24, 0x0A	; 10
   119fe:	f0 f4       	brcc	.+60     	; 0x11a3c <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x86>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:42
    if (mantissa < traits::mantissa_max / 10)
   11a00:	2c 3c       	cpi	r18, 0xCC	; 204
   11a02:	8c ec       	ldi	r24, 0xCC	; 204
   11a04:	38 07       	cpc	r19, r24
   11a06:	8c e0       	ldi	r24, 0x0C	; 12
   11a08:	48 07       	cpc	r20, r24
   11a0a:	51 05       	cpc	r21, r1
   11a0c:	ac f4       	brge	.+42     	; 0x11a38 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x82>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:43
      mantissa = mantissa * 10 + (*s - '0');
   11a0e:	aa e0       	ldi	r26, 0x0A	; 10
   11a10:	b0 e0       	ldi	r27, 0x00	; 0
   11a12:	0f 94 b5 16 	call	0x22d6a	; 0x22d6a <__muluhisi3>
   11a16:	20 2f       	mov	r18, r16
   11a18:	00 0f       	add	r16, r16
   11a1a:	33 0b       	sbc	r19, r19
   11a1c:	20 53       	subi	r18, 0x30	; 48
   11a1e:	31 09       	sbc	r19, r1
   11a20:	03 2e       	mov	r0, r19
   11a22:	00 0c       	add	r0, r0
   11a24:	44 0b       	sbc	r20, r20
   11a26:	55 0b       	sbc	r21, r21
   11a28:	26 0f       	add	r18, r22
   11a2a:	37 1f       	adc	r19, r23
   11a2c:	48 1f       	adc	r20, r24
   11a2e:	59 1f       	adc	r21, r25
   11a30:	e1 cf       	rjmp	.-62     	; 0x119f4 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x3e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
   11a32:	21 96       	adiw	r28, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:22
  typedef typename traits::mantissa_type mantissa_t;
  typedef typename traits::exponent_type exponent_t;

  if (!s) return 0;  // NULL

  bool negative_result = false;
   11a34:	10 e0       	ldi	r17, 0x00	; 0
   11a36:	cf cf       	rjmp	.-98     	; 0x119d6 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x20>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:45

  while (isdigit(*s)) {
    if (mantissa < traits::mantissa_max / 10)
      mantissa = mantissa * 10 + (*s - '0');
    else
      exponent_offset++;
   11a38:	f3 94       	inc	r15
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:41
    return negative_result ? -traits::inf() : traits::inf();

  mantissa_t mantissa = 0;
  exponent_t exponent_offset = 0;

  while (isdigit(*s)) {
   11a3a:	dc cf       	rjmp	.-72     	; 0x119f4 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x3e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:49
    else
      exponent_offset++;
    s++;
  }

  if (*s == '.') {
   11a3c:	0e 32       	cpi	r16, 0x2E	; 46
   11a3e:	11 f5       	brne	.+68     	; 0x11a84 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0xce>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:50
    s++;
   11a40:	ef 01       	movw	r28, r30
   11a42:	21 96       	adiw	r28, 0x01	; 1
   11a44:	fe 01       	movw	r30, r28
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:51
    while (isdigit(*s)) {
   11a46:	09 91       	ld	r16, Y+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
   11a48:	80 ed       	ldi	r24, 0xD0	; 208
   11a4a:	80 0f       	add	r24, r16
_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:51
   11a4c:	8a 30       	cpi	r24, 0x0A	; 10
   11a4e:	d0 f4       	brcc	.+52     	; 0x11a84 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0xce>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:52
      if (mantissa < traits::mantissa_max / 10) {
   11a50:	2c 3c       	cpi	r18, 0xCC	; 204
   11a52:	8c ec       	ldi	r24, 0xCC	; 204
   11a54:	38 07       	cpc	r19, r24
   11a56:	8c e0       	ldi	r24, 0x0C	; 12
   11a58:	48 07       	cpc	r20, r24
   11a5a:	51 05       	cpc	r21, r1
   11a5c:	9c f7       	brge	.-26     	; 0x11a44 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x8e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:53
        mantissa = mantissa * 10 + (*s - '0');
   11a5e:	aa e0       	ldi	r26, 0x0A	; 10
   11a60:	b0 e0       	ldi	r27, 0x00	; 0
   11a62:	0f 94 b5 16 	call	0x22d6a	; 0x22d6a <__muluhisi3>
   11a66:	20 2f       	mov	r18, r16
   11a68:	00 0f       	add	r16, r16
   11a6a:	33 0b       	sbc	r19, r19
   11a6c:	20 53       	subi	r18, 0x30	; 48
   11a6e:	31 09       	sbc	r19, r1
   11a70:	03 2e       	mov	r0, r19
   11a72:	00 0c       	add	r0, r0
   11a74:	44 0b       	sbc	r20, r20
   11a76:	55 0b       	sbc	r21, r21
   11a78:	26 0f       	add	r18, r22
   11a7a:	37 1f       	adc	r19, r23
   11a7c:	48 1f       	adc	r20, r24
   11a7e:	59 1f       	adc	r21, r25
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:54
        exponent_offset--;
   11a80:	fa 94       	dec	r15
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:51
    s++;
  }

  if (*s == '.') {
    s++;
    while (isdigit(*s)) {
   11a82:	e0 cf       	rjmp	.-64     	; 0x11a44 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x8e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:61
      s++;
    }
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
   11a84:	80 81       	ld	r24, Z
   11a86:	8f 7d       	andi	r24, 0xDF	; 223
   11a88:	cf 2d       	mov	r28, r15
   11a8a:	ff 0c       	add	r15, r15
   11a8c:	dd 0b       	sbc	r29, r29
   11a8e:	85 34       	cpi	r24, 0x45	; 69
   11a90:	09 f0       	breq	.+2      	; 0x11a94 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0xde>
   11a92:	65 c0       	rjmp	.+202    	; 0x11b5e <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x1a8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:64
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
   11a94:	81 81       	ldd	r24, Z+1	; 0x01
   11a96:	8d 32       	cpi	r24, 0x2D	; 45
   11a98:	31 f5       	brne	.+76     	; 0x11ae6 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x130>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:66
      negative_exponent = true;
      s++;
   11a9a:	32 96       	adiw	r30, 0x02	; 2
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:65
  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
      negative_exponent = true;
   11a9c:	71 e0       	ldi	r23, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:63
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    bool negative_exponent = false;
   11a9e:	90 e0       	ldi	r25, 0x00	; 0
   11aa0:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:72
    } else if (*s == '+') {
      s++;
    }

    while (isdigit(*s)) {
      exponent = exponent * 10 + (*s - '0');
   11aa2:	0a e0       	ldi	r16, 0x0A	; 10
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:71
      s++;
    } else if (*s == '+') {
      s++;
    }

    while (isdigit(*s)) {
   11aa4:	61 91       	ld	r22, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
   11aa6:	a0 ed       	ldi	r26, 0xD0	; 208
   11aa8:	a6 0f       	add	r26, r22
_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:71
   11aaa:	aa 30       	cpi	r26, 0x0A	; 10
   11aac:	70 f5       	brcc	.+92     	; 0x11b0a <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x154>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:72
      exponent = exponent * 10 + (*s - '0');
   11aae:	08 9f       	mul	r16, r24
   11ab0:	d0 01       	movw	r26, r0
   11ab2:	09 9f       	mul	r16, r25
   11ab4:	b0 0d       	add	r27, r0
   11ab6:	11 24       	eor	r1, r1
   11ab8:	86 2f       	mov	r24, r22
   11aba:	66 0f       	add	r22, r22
   11abc:	99 0b       	sbc	r25, r25
   11abe:	c0 97       	sbiw	r24, 0x30	; 48
   11ac0:	8a 0f       	add	r24, r26
   11ac2:	9b 1f       	adc	r25, r27
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:73
      if (exponent + exponent_offset > traits::exponent_max) {
   11ac4:	dc 01       	movw	r26, r24
   11ac6:	ac 0f       	add	r26, r28
   11ac8:	bd 1f       	adc	r27, r29
   11aca:	97 97       	sbiw	r26, 0x27	; 39
   11acc:	5c f3       	brlt	.-42     	; 0x11aa4 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0xee>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:74
        if (negative_exponent)
   11ace:	77 23       	and	r23, r23
   11ad0:	89 f0       	breq	.+34     	; 0x11af4 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x13e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:75
          return negative_result ? -0.0f : 0.0f;
   11ad2:	60 e0       	ldi	r22, 0x00	; 0
   11ad4:	70 e0       	ldi	r23, 0x00	; 0
   11ad6:	80 e0       	ldi	r24, 0x00	; 0
   11ad8:	90 e8       	ldi	r25, 0x80	; 128
   11ada:	11 11       	cpse	r17, r1
   11adc:	3a c0       	rjmp	.+116    	; 0x11b52 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x19c>
   11ade:	60 e0       	ldi	r22, 0x00	; 0
   11ae0:	70 e0       	ldi	r23, 0x00	; 0
   11ae2:	cb 01       	movw	r24, r22
   11ae4:	36 c0       	rjmp	.+108    	; 0x11b52 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x19c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:67
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
      negative_exponent = true;
      s++;
    } else if (*s == '+') {
   11ae6:	8b 32       	cpi	r24, 0x2B	; 43
   11ae8:	19 f0       	breq	.+6      	; 0x11af0 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x13a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:62
    }
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
   11aea:	31 96       	adiw	r30, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:63
    bool negative_exponent = false;
   11aec:	70 e0       	ldi	r23, 0x00	; 0
   11aee:	d7 cf       	rjmp	.-82     	; 0x11a9e <float ArduinoJson::Internals::parseFloat<float>(char const*)+0xe8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:68
    if (*s == '-') {
      negative_exponent = true;
      s++;
    } else if (*s == '+') {
      s++;
   11af0:	32 96       	adiw	r30, 0x02	; 2
   11af2:	fc cf       	rjmp	.-8      	; 0x11aec <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x136>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:36
  }

  if (*s == 't') return 1;  // true
  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return negative_result ? -traits::inf() : traits::inf();
   11af4:	60 e0       	ldi	r22, 0x00	; 0
   11af6:	70 e0       	ldi	r23, 0x00	; 0
   11af8:	80 e8       	ldi	r24, 0x80	; 128
   11afa:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:77
      exponent = exponent * 10 + (*s - '0');
      if (exponent + exponent_offset > traits::exponent_max) {
        if (negative_exponent)
          return negative_result ? -0.0f : 0.0f;
        else
          return negative_result ? -traits::inf() : traits::inf();
   11afc:	11 11       	cpse	r17, r1
   11afe:	29 c0       	rjmp	.+82     	; 0x11b52 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x19c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:36
  }

  if (*s == 't') return 1;  // true
  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return negative_result ? -traits::inf() : traits::inf();
   11b00:	60 e0       	ldi	r22, 0x00	; 0
   11b02:	70 e0       	ldi	r23, 0x00	; 0
   11b04:	80 e8       	ldi	r24, 0x80	; 128
   11b06:	9f e7       	ldi	r25, 0x7F	; 127
   11b08:	24 c0       	rjmp	.+72     	; 0x11b52 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x19c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:81
        else
          return negative_result ? -traits::inf() : traits::inf();
      }
      s++;
    }
    if (negative_exponent) exponent = -exponent;
   11b0a:	77 23       	and	r23, r23
   11b0c:	19 f0       	breq	.+6      	; 0x11b14 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x15e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:81 (discriminator 1)
   11b0e:	91 95       	neg	r25
   11b10:	81 95       	neg	r24
   11b12:	91 09       	sbc	r25, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:83
  }
  exponent += exponent_offset;
   11b14:	c8 0f       	add	r28, r24
   11b16:	d9 1f       	adc	r29, r25
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:85

  T result = traits::make_float(static_cast<T>(mantissa), exponent);
   11b18:	ca 01       	movw	r24, r20
   11b1a:	b9 01       	movw	r22, r18
   11b1c:	0f 94 f7 14 	call	0x229ee	; 0x229ee <__floatsisf>
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE10make_floatIiEEffT_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:123
  typedef int8_t exponent_type;
  static const exponent_type exponent_max = 38;

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
   11b20:	1c 16       	cp	r1, r28
   11b22:	1d 06       	cpc	r1, r29
   11b24:	fc f4       	brge	.+62     	; 0x11b64 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x1ae>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:124
      for (uint8_t index = 0; e != 0; index++) {
   11b26:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:125
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
   11b28:	c0 ff       	sbrs	r28, 0
   11b2a:	0c c0       	rjmp	.+24     	; 0x11b44 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x18e>
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE24positiveBinaryPowerOfTenEi():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:140
    return m;
  }

  static T positiveBinaryPowerOfTen(int index) {
    static T factors[] = {1e1f, 1e2f, 1e4f, 1e8f, 1e16f, 1e32f};
    return factors[index];
   11b2c:	24 e0       	ldi	r18, 0x04	; 4
   11b2e:	02 9f       	mul	r16, r18
   11b30:	f0 01       	movw	r30, r0
   11b32:	11 24       	eor	r1, r1
   11b34:	e2 5e       	subi	r30, 0xE2	; 226
   11b36:	fd 4f       	sbci	r31, 0xFD	; 253
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE10make_floatIiEEffT_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:125

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
      for (uint8_t index = 0; e != 0; index++) {
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
   11b38:	20 81       	ld	r18, Z
   11b3a:	31 81       	ldd	r19, Z+1	; 0x01
   11b3c:	42 81       	ldd	r20, Z+2	; 0x02
   11b3e:	53 81       	ldd	r21, Z+3	; 0x03
   11b40:	0f 94 ac 15 	call	0x22b58	; 0x22b58 <__mulsf3>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:126
        e >>= 1;
   11b44:	d5 95       	asr	r29
   11b46:	c7 95       	ror	r28
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:124
  static const exponent_type exponent_max = 38;

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
      for (uint8_t index = 0; e != 0; index++) {
   11b48:	0f 5f       	subi	r16, 0xFF	; 255
   11b4a:	20 97       	sbiw	r28, 0x00	; 0
   11b4c:	69 f7       	brne	.-38     	; 0x11b28 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x172>
_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:87

  return negative_result ? -result : result;
   11b4e:	11 11       	cpse	r17, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:87 (discriminator 1)
   11b50:	90 58       	subi	r25, 0x80	; 128
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:88
}
   11b52:	df 91       	pop	r29
   11b54:	cf 91       	pop	r28
   11b56:	1f 91       	pop	r17
   11b58:	0f 91       	pop	r16
   11b5a:	ff 90       	pop	r15
   11b5c:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:60
      }
      s++;
    }
  }

  int exponent = 0;
   11b5e:	90 e0       	ldi	r25, 0x00	; 0
   11b60:	80 e0       	ldi	r24, 0x00	; 0
   11b62:	d8 cf       	rjmp	.-80     	; 0x11b14 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x15e>
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE10make_floatIiEEffT_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:129
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
        e >>= 1;
      }
    } else {
      e = -e;
   11b64:	d1 95       	neg	r29
   11b66:	c1 95       	neg	r28
   11b68:	d1 09       	sbc	r29, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:130
      for (uint8_t index = 0; e != 0; index++) {
   11b6a:	00 e0       	ldi	r16, 0x00	; 0
   11b6c:	20 97       	sbiw	r28, 0x00	; 0
   11b6e:	79 f3       	breq	.-34     	; 0x11b4e <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x198>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:131
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
   11b70:	c0 ff       	sbrs	r28, 0
   11b72:	0c c0       	rjmp	.+24     	; 0x11b8c <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x1d6>
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE24negativeBinaryPowerOfTenEi():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:145
    return factors[index];
  }

  static T negativeBinaryPowerOfTen(int index) {
    static T factors[] = {1e-1f, 1e-2f, 1e-4f, 1e-8f, 1e-16f, 1e-32f};
    return factors[index];
   11b74:	24 e0       	ldi	r18, 0x04	; 4
   11b76:	02 9f       	mul	r16, r18
   11b78:	f0 01       	movw	r30, r0
   11b7a:	11 24       	eor	r1, r1
   11b7c:	ea 5f       	subi	r30, 0xFA	; 250
   11b7e:	fd 4f       	sbci	r31, 0xFD	; 253
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE10make_floatIiEEffT_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:131
        e >>= 1;
      }
    } else {
      e = -e;
      for (uint8_t index = 0; e != 0; index++) {
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
   11b80:	20 81       	ld	r18, Z
   11b82:	31 81       	ldd	r19, Z+1	; 0x01
   11b84:	42 81       	ldd	r20, Z+2	; 0x02
   11b86:	53 81       	ldd	r21, Z+3	; 0x03
   11b88:	0f 94 ac 15 	call	0x22b58	; 0x22b58 <__mulsf3>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:132
        e >>= 1;
   11b8c:	d5 95       	asr	r29
   11b8e:	c7 95       	ror	r28
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:130
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
        e >>= 1;
      }
    } else {
      e = -e;
      for (uint8_t index = 0; e != 0; index++) {
   11b90:	0f 5f       	subi	r16, 0xFF	; 255
   11b92:	ec cf       	rjmp	.-40     	; 0x11b6c <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x1b6>
_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:33
    case '+':
      s++;
      break;
  }

  if (*s == 't') return 1;  // true
   11b94:	60 e0       	ldi	r22, 0x00	; 0
   11b96:	70 e0       	ldi	r23, 0x00	; 0
   11b98:	80 e8       	ldi	r24, 0x80	; 128
   11b9a:	9f e3       	ldi	r25, 0x3F	; 63
   11b9c:	da cf       	rjmp	.-76     	; 0x11b52 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x19c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:34
  if (*s == 'n' || *s == 'N') return traits::nan();
   11b9e:	60 e0       	ldi	r22, 0x00	; 0
   11ba0:	70 e0       	ldi	r23, 0x00	; 0
   11ba2:	80 ec       	ldi	r24, 0xC0	; 192
   11ba4:	9f e7       	ldi	r25, 0x7F	; 127
   11ba6:	d5 cf       	rjmp	.-86     	; 0x11b52 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x19c>

00011ba8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:182
    if (err) return err;
    variant.set(value);
    return DeserializationError::Ok;
  }

  DeserializationError parseQuotedString(const char **result) {
   11ba8:	df 92       	push	r13
   11baa:	ef 92       	push	r14
   11bac:	ff 92       	push	r15
   11bae:	0f 93       	push	r16
   11bb0:	1f 93       	push	r17
   11bb2:	cf 93       	push	r28
   11bb4:	df 93       	push	r29
   11bb6:	ec 01       	movw	r28, r24
   11bb8:	7b 01       	movw	r14, r22
_ZN11ArduinoJson9Internals11StringMoverIcE6StringC4EPPc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:15
template <typename TChar>
class StringMover {
 public:
  class String {
   public:
    String(TChar** ptr) : _writePtr(ptr), _startPtr(*ptr) {}
   11bba:	0c 81       	ldd	r16, Y+4	; 0x04
   11bbc:	1d 81       	ldd	r17, Y+5	; 0x05
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:186
    typename remove_reference<TStringStorage>::type::String str =
        _stringStorage.startString();

    char stopChar = current();
   11bbe:	0e 94 88 8c 	call	0x11910	; 0x11910 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
   11bc2:	d8 2e       	mov	r13, r24
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
   11bc4:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:190

    char stopChar = current();

    move();
    for (;;) {
      char c = current();
   11bc6:	ce 01       	movw	r24, r28
   11bc8:	0e 94 88 8c 	call	0x11910	; 0x11910 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
   11bcc:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:192

    move();
    for (;;) {
      char c = current();
      move();
      if (c == stopChar) break;
   11bce:	d8 16       	cp	r13, r24
   11bd0:	89 f1       	breq	.+98     	; 0x11c34 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x8c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:194

      if (c == '\0') return DeserializationError::IncompleteInput;
   11bd2:	81 11       	cpse	r24, r1
   11bd4:	0a c0       	rjmp	.+20     	; 0x11bea <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x42>
   11bd6:	81 e0       	ldi	r24, 0x01	; 1
   11bd8:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:212
    }

    *result = str.c_str();
    if (*result == NULL) return DeserializationError::NoMemory;
    return DeserializationError::Ok;
  }
   11bda:	df 91       	pop	r29
   11bdc:	cf 91       	pop	r28
   11bde:	1f 91       	pop	r17
   11be0:	0f 91       	pop	r16
   11be2:	ff 90       	pop	r15
   11be4:	ef 90       	pop	r14
   11be6:	df 90       	pop	r13
   11be8:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:196
      move();
      if (c == stopChar) break;

      if (c == '\0') return DeserializationError::IncompleteInput;

      if (c == '\\') {
   11bea:	8c 35       	cpi	r24, 0x5C	; 92
   11bec:	d1 f4       	brne	.+52     	; 0x11c22 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x7a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:197
        c = current();
   11bee:	ce 01       	movw	r24, r28
   11bf0:	0e 94 88 8c 	call	0x11910	; 0x11910 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:198
        if (c == '\0') return DeserializationError::IncompleteInput;
   11bf4:	88 23       	and	r24, r24
   11bf6:	79 f3       	breq	.-34     	; 0x11bd6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x2e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:199
        if (c == 'u') return DeserializationError::NotSupported;
   11bf8:	85 37       	cpi	r24, 0x75	; 117
   11bfa:	19 f4       	brne	.+6      	; 0x11c02 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x5a>
   11bfc:	84 e0       	ldi	r24, 0x04	; 4
   11bfe:	90 e0       	ldi	r25, 0x00	; 0
   11c00:	ec cf       	rjmp	.-40     	; 0x11bda <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>
_ZN11ArduinoJson9Internals14EscapeSequence12unescapeCharEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:23
    return p[0];
  }

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
    const char *p = escapeTable(true);
   11c02:	ee e2       	ldi	r30, 0x2E	; 46
   11c04:	f6 e0       	ldi	r31, 0x06	; 6
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:25
    for (;;) {
      if (p[0] == '\0') return c;
   11c06:	90 81       	ld	r25, Z
   11c08:	99 23       	and	r25, r25
   11c0a:	51 f0       	breq	.+20     	; 0x11c20 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x78>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:26
      if (p[0] == c) return p[1];
   11c0c:	89 13       	cpse	r24, r25
   11c0e:	06 c0       	rjmp	.+12     	; 0x11c1c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x74>
   11c10:	81 81       	ldd	r24, Z+1	; 0x01
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:202
        // replace char
        c = EscapeSequence::unescapeChar(c);
        if (c == '\0') return DeserializationError::InvalidInput;
   11c12:	81 11       	cpse	r24, r1
   11c14:	05 c0       	rjmp	.+10     	; 0x11c20 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x78>
   11c16:	82 e0       	ldi	r24, 0x02	; 2
   11c18:	90 e0       	ldi	r25, 0x00	; 0
   11c1a:	df cf       	rjmp	.-66     	; 0x11bda <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>
_ZN11ArduinoJson9Internals14EscapeSequence12unescapeCharEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:27
      p += 2;
   11c1c:	32 96       	adiw	r30, 0x02	; 2
   11c1e:	f3 cf       	rjmp	.-26     	; 0x11c06 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x5e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
   11c20:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals11StringMoverIcE6String6appendEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:18

    void append(char c) {
      *(*_writePtr)++ = TChar(c);
   11c22:	ec 81       	ldd	r30, Y+4	; 0x04
   11c24:	fd 81       	ldd	r31, Y+5	; 0x05
   11c26:	9f 01       	movw	r18, r30
   11c28:	2f 5f       	subi	r18, 0xFF	; 255
   11c2a:	3f 4f       	sbci	r19, 0xFF	; 255
   11c2c:	3d 83       	std	Y+5, r19	; 0x05
   11c2e:	2c 83       	std	Y+4, r18	; 0x04
   11c30:	80 83       	st	Z, r24
   11c32:	c9 cf       	rjmp	.-110    	; 0x11bc6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x1e>
_ZNK11ArduinoJson9Internals11StringMoverIcE6String5c_strEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:22
    }

    const char* c_str() const {
      *(*_writePtr)++ = 0;
   11c34:	ec 81       	ldd	r30, Y+4	; 0x04
   11c36:	fd 81       	ldd	r31, Y+5	; 0x05
   11c38:	cf 01       	movw	r24, r30
   11c3a:	01 96       	adiw	r24, 0x01	; 1
   11c3c:	9d 83       	std	Y+5, r25	; 0x05
   11c3e:	8c 83       	std	Y+4, r24	; 0x04
   11c40:	10 82       	st	Z, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:209
      }

      str.append(c);
    }

    *result = str.c_str();
   11c42:	f7 01       	movw	r30, r14
   11c44:	11 83       	std	Z+1, r17	; 0x01
   11c46:	00 83       	st	Z, r16
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:210
    if (*result == NULL) return DeserializationError::NoMemory;
   11c48:	83 e0       	ldi	r24, 0x03	; 3
   11c4a:	90 e0       	ldi	r25, 0x00	; 0
   11c4c:	01 2b       	or	r16, r17
   11c4e:	29 f2       	breq	.-118    	; 0x11bda <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:211
    return DeserializationError::Ok;
   11c50:	90 e0       	ldi	r25, 0x00	; 0
   11c52:	80 e0       	ldi	r24, 0x00	; 0
   11c54:	c2 cf       	rjmp	.-124    	; 0x11bda <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>

00011c56 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE9isBetweenEccc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:265
    }
    return DeserializationError::Ok;
  }

  static inline bool isBetween(char c, char min, char max) {
    return min <= c && c <= max;
   11c56:	80 33       	cpi	r24, 0x30	; 48
   11c58:	9c f0       	brlt	.+38     	; 0x11c80 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x2a>
   11c5a:	8a 33       	cpi	r24, 0x3A	; 58
   11c5c:	24 f0       	brlt	.+8      	; 0x11c66 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x10>
   11c5e:	8f 35       	cpi	r24, 0x5F	; 95
   11c60:	24 f0       	brlt	.+8      	; 0x11c6a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x14>
   11c62:	8b 37       	cpi	r24, 0x7B	; 123
   11c64:	24 f4       	brge	.+8      	; 0x11c6e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x18>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE22canBeInNonQuotedStringEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:270
  }

  static inline bool canBeInNonQuotedString(char c) {
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
   11c66:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:271
  }
   11c68:	08 95       	ret
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE9isBetweenEccc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:265
    }
    return DeserializationError::Ok;
  }

  static inline bool isBetween(char c, char min, char max) {
    return min <= c && c <= max;
   11c6a:	81 34       	cpi	r24, 0x41	; 65
   11c6c:	4c f0       	brlt	.+18     	; 0x11c80 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x2a>
   11c6e:	8b 35       	cpi	r24, 0x5B	; 91
   11c70:	d4 f3       	brlt	.-12     	; 0x11c66 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x10>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE22canBeInNonQuotedStringEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:270
  }

  static inline bool canBeInNonQuotedString(char c) {
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
   11c72:	93 ed       	ldi	r25, 0xD3	; 211
   11c74:	98 0f       	add	r25, r24
   11c76:	81 e0       	ldi	r24, 0x01	; 1
   11c78:	92 30       	cpi	r25, 0x02	; 2
   11c7a:	b0 f3       	brcs	.-20     	; 0x11c68 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x12>
   11c7c:	80 e0       	ldi	r24, 0x00	; 0
   11c7e:	08 95       	ret
   11c80:	8b 32       	cpi	r24, 0x2B	; 43
   11c82:	b9 f7       	brne	.-18     	; 0x11c72 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x1c>
   11c84:	f0 cf       	rjmp	.-32     	; 0x11c66 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x10>

00011c86 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseNumericValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:236
    *result = str.c_str();
    if (*result == NULL) return DeserializationError::NoMemory;
    return DeserializationError::Ok;
  }

  DeserializationError parseNumericValue(JsonVariant result) {
   11c86:	8f 92       	push	r8
   11c88:	9f 92       	push	r9
   11c8a:	af 92       	push	r10
   11c8c:	bf 92       	push	r11
   11c8e:	cf 92       	push	r12
   11c90:	df 92       	push	r13
   11c92:	ef 92       	push	r14
   11c94:	ff 92       	push	r15
   11c96:	0f 93       	push	r16
   11c98:	1f 93       	push	r17
   11c9a:	cf 93       	push	r28
   11c9c:	df 93       	push	r29
   11c9e:	cd b7       	in	r28, 0x3d	; 61
   11ca0:	de b7       	in	r29, 0x3e	; 62
   11ca2:	c0 54       	subi	r28, 0x40	; 64
   11ca4:	d1 09       	sbc	r29, r1
   11ca6:	0f b6       	in	r0, 0x3f	; 63
   11ca8:	f8 94       	cli
   11caa:	de bf       	out	0x3e, r29	; 62
   11cac:	0f be       	out	0x3f, r0	; 63
   11cae:	cd bf       	out	0x3d, r28	; 61
   11cb0:	5c 01       	movw	r10, r24
   11cb2:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:240
    char buffer[64];
    uint8_t n = 0;

    char c = current();
   11cb4:	0e 94 88 8c 	call	0x11910	; 0x11910 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
   11cb8:	c8 2e       	mov	r12, r24
   11cba:	ce 01       	movw	r24, r28
   11cbc:	01 96       	adiw	r24, 0x01	; 1
   11cbe:	4c 01       	movw	r8, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:238
    return DeserializationError::Ok;
  }

  DeserializationError parseNumericValue(JsonVariant result) {
    char buffer[64];
    uint8_t n = 0;
   11cc0:	d1 2c       	mov	r13, r1
   11cc2:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:241

    char c = current();
    while (canBeInNonQuotedString(c) && n < 63) {
   11cc4:	8c 2d       	mov	r24, r12
   11cc6:	0e 94 2b 8e 	call	0x11c56	; 0x11c56 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>
   11cca:	88 23       	and	r24, r24
   11ccc:	71 f0       	breq	.+28     	; 0x11cea <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x64>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:241 (discriminator 1)
   11cce:	9f e3       	ldi	r25, 0x3F	; 63
   11cd0:	d9 16       	cp	r13, r25
   11cd2:	59 f0       	breq	.+22     	; 0x11cea <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x64>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
   11cd4:	f5 01       	movw	r30, r10
   11cd6:	10 86       	std	Z+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseNumericValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:243
    uint8_t n = 0;

    char c = current();
    while (canBeInNonQuotedString(c) && n < 63) {
      move();
      buffer[n++] = c;
   11cd8:	d3 94       	inc	r13
   11cda:	f4 01       	movw	r30, r8
   11cdc:	c1 92       	st	Z+, r12
   11cde:	4f 01       	movw	r8, r30
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:244
      c = current();
   11ce0:	c5 01       	movw	r24, r10
   11ce2:	0e 94 88 8c 	call	0x11910	; 0x11910 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
   11ce6:	c8 2e       	mov	r12, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:241
  DeserializationError parseNumericValue(JsonVariant result) {
    char buffer[64];
    uint8_t n = 0;

    char c = current();
    while (canBeInNonQuotedString(c) && n < 63) {
   11ce8:	ed cf       	rjmp	.-38     	; 0x11cc4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x3e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:246
      move();
      buffer[n++] = c;
      c = current();
    }
    buffer[n] = 0;
   11cea:	f7 01       	movw	r30, r14
   11cec:	ed 0d       	add	r30, r13
   11cee:	f1 1d       	adc	r31, r1
   11cf0:	10 82       	st	Z, r1
_ZN11ArduinoJson9Internals9isIntegerEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:13

namespace ArduinoJson {
namespace Internals {

inline bool isInteger(const char* s) {
  if (!s || !*s) return false;
   11cf2:	89 81       	ldd	r24, Y+1	; 0x01
   11cf4:	88 23       	and	r24, r24
   11cf6:	09 f4       	brne	.+2      	; 0x11cfa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x74>
   11cf8:	56 c0       	rjmp	.+172    	; 0x11da6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x120>
_ZN11ArduinoJson9Internals6issignEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:15
}

inline bool issign(char c) {
  return '-' == c || c == '+';
   11cfa:	8d 32       	cpi	r24, 0x2D	; 45
   11cfc:	19 f0       	breq	.+6      	; 0x11d04 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x7e>
   11cfe:	f7 01       	movw	r30, r14
   11d00:	8b 32       	cpi	r24, 0x2B	; 43
   11d02:	11 f4       	brne	.+4      	; 0x11d08 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x82>
_ZN11ArduinoJson9Internals9isIntegerEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:14
  if (issign(*s)) s++;
   11d04:	fe 01       	movw	r30, r28
   11d06:	32 96       	adiw	r30, 0x02	; 2
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:15
  while (isdigit(*s)) s++;
   11d08:	91 91       	ld	r25, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11

namespace ArduinoJson {
namespace Internals {

inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
   11d0a:	20 ed       	ldi	r18, 0xD0	; 208
   11d0c:	29 0f       	add	r18, r25
_ZN11ArduinoJson9Internals9isIntegerEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:15
   11d0e:	2a 30       	cpi	r18, 0x0A	; 10
   11d10:	d8 f3       	brcs	.-10     	; 0x11d08 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x82>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseNumericValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:248

    if (isInteger(buffer)) {
   11d12:	91 11       	cpse	r25, r1
   11d14:	48 c0       	rjmp	.+144    	; 0x11da6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x120>
_ZN11ArduinoJson9Internals12parseIntegerIlEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"
   11d16:	84 37       	cpi	r24, 0x74	; 116
   11d18:	09 f4       	brne	.+2      	; 0x11d1c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x96>
   11d1a:	a4 c0       	rjmp	.+328    	; 0x11e64 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x1de>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  T result = 0;
  bool negative_result = false;

  switch (*s) {
   11d1c:	8b 32       	cpi	r24, 0x2B	; 43
   11d1e:	51 f0       	breq	.+20     	; 0x11d34 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0xae>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
   11d20:	d1 2c       	mov	r13, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  switch (*s) {
   11d22:	8d 32       	cpi	r24, 0x2D	; 45
   11d24:	61 f4       	brne	.+24     	; 0x11d3e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0xb8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:25
    case '-':
      negative_result = true;
   11d26:	dd 24       	eor	r13, r13
   11d28:	d3 94       	inc	r13
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:26
      s++;
   11d2a:	7e 01       	movw	r14, r28
   11d2c:	82 e0       	ldi	r24, 0x02	; 2
   11d2e:	e8 0e       	add	r14, r24
   11d30:	f1 1c       	adc	r15, r1
   11d32:	05 c0       	rjmp	.+10     	; 0x11d3e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0xb8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
   11d34:	d1 2c       	mov	r13, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
   11d36:	7e 01       	movw	r14, r28
   11d38:	f2 e0       	ldi	r31, 0x02	; 2
   11d3a:	ef 0e       	add	r14, r31
   11d3c:	f1 1c       	adc	r15, r1
   11d3e:	f7 01       	movw	r30, r14
   11d40:	20 e0       	ldi	r18, 0x00	; 0
   11d42:	30 e0       	ldi	r19, 0x00	; 0
   11d44:	a9 01       	movw	r20, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
      break;
  }

  while (isdigit(*s)) {
   11d46:	f1 90       	ld	r15, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
   11d48:	80 ed       	ldi	r24, 0xD0	; 208
   11d4a:	8f 0d       	add	r24, r15
_ZN11ArduinoJson9Internals12parseIntegerIlEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
   11d4c:	8a 30       	cpi	r24, 0x0A	; 10
   11d4e:	90 f4       	brcc	.+36     	; 0x11d74 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0xee>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
    result = T(result * 10 + T(*s - '0'));
   11d50:	aa e0       	ldi	r26, 0x0A	; 10
   11d52:	b0 e0       	ldi	r27, 0x00	; 0
   11d54:	0f 94 b5 16 	call	0x22d6a	; 0x22d6a <__muluhisi3>
   11d58:	2f 2d       	mov	r18, r15
   11d5a:	ff 0c       	add	r15, r15
   11d5c:	33 0b       	sbc	r19, r19
   11d5e:	20 53       	subi	r18, 0x30	; 48
   11d60:	31 09       	sbc	r19, r1
   11d62:	03 2e       	mov	r0, r19
   11d64:	00 0c       	add	r0, r0
   11d66:	44 0b       	sbc	r20, r20
   11d68:	55 0b       	sbc	r21, r21
   11d6a:	26 0f       	add	r18, r22
   11d6c:	37 1f       	adc	r19, r23
   11d6e:	48 1f       	adc	r20, r24
   11d70:	59 1f       	adc	r21, r25
   11d72:	e9 cf       	rjmp	.-46     	; 0x11d46 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0xc0>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
    s++;
  }

  return negative_result ? T(~result + 1) : result;
   11d74:	dd 20       	and	r13, r13
   11d76:	09 f4       	brne	.+2      	; 0x11d7a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0xf4>
   11d78:	79 c0       	rjmp	.+242    	; 0x11e6c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x1e6>
_ZN11ArduinoJson11JsonVariant3setIlEEbT_PNS_9Internals9enable_ifIXaasrNS3_11is_integralIS2_EE5valuesrNS3_9is_signedIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:70
  FORCE_INLINE bool set(
      T value,
      typename Internals::enable_if<Internals::is_integral<T>::value &&
                                    Internals::is_signed<T>::value>::type * =
          0) {
    if (!_data) return false;
   11d7a:	01 15       	cp	r16, r1
   11d7c:	11 05       	cpc	r17, r1
   11d7e:	81 f0       	breq	.+32     	; 0x11da0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x11a>
_ZN11ArduinoJson9Internals15JsonVariantData18setNegativeIntegerEm():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:34
    type = JSON_FLOAT;
    content.asFloat = value;
  }

  void setNegativeInteger(JsonUInt value) {
    type = JSON_NEGATIVE_INTEGER;
   11d80:	87 e0       	ldi	r24, 0x07	; 7
   11d82:	90 e0       	ldi	r25, 0x00	; 0
_ZN11ArduinoJson11JsonVariant3setIlEEbT_PNS_9Internals9enable_ifIXaasrNS3_11is_integralIS2_EE5valuesrNS3_9is_signedIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:71
    if (value >= 0)
   11d84:	21 15       	cp	r18, r1
   11d86:	31 05       	cpc	r19, r1
   11d88:	41 05       	cpc	r20, r1
   11d8a:	51 05       	cpc	r21, r1
   11d8c:	11 f4       	brne	.+4      	; 0x11d92 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x10c>
_ZN11ArduinoJson9Internals15JsonVariantData17setPostiveIntegerEm():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:39
    content.asInteger = value;
  }

  void setPostiveInteger(JsonUInt value) {
    type = JSON_POSITIVE_INTEGER;
   11d8e:	86 e0       	ldi	r24, 0x06	; 6
   11d90:	90 e0       	ldi	r25, 0x00	; 0
_ZN11ArduinoJson9Internals15JsonVariantData18setNegativeIntegerEm():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:34
    type = JSON_FLOAT;
    content.asFloat = value;
  }

  void setNegativeInteger(JsonUInt value) {
    type = JSON_NEGATIVE_INTEGER;
   11d92:	f8 01       	movw	r30, r16
   11d94:	91 83       	std	Z+1, r25	; 0x01
   11d96:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:35
    content.asInteger = value;
   11d98:	22 83       	std	Z+2, r18	; 0x02
   11d9a:	33 83       	std	Z+3, r19	; 0x03
   11d9c:	44 83       	std	Z+4, r20	; 0x04
   11d9e:	55 83       	std	Z+5, r21	; 0x05
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseNumericValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:261
    } else if (!strcmp(buffer, "null")) {
      // already null
    } else {
      return DeserializationError::InvalidInput;
    }
    return DeserializationError::Ok;
   11da0:	90 e0       	ldi	r25, 0x00	; 0
   11da2:	80 e0       	ldi	r24, 0x00	; 0
   11da4:	4b c0       	rjmp	.+150    	; 0x11e3c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x1b6>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:250
    }
    buffer[n] = 0;

    if (isInteger(buffer)) {
      result.set(parseInteger<JsonInteger>(buffer));
    } else if (isFloat(buffer)) {
   11da6:	c7 01       	movw	r24, r14
   11da8:	0e 94 83 52 	call	0xa506	; 0xa506 <ArduinoJson::Internals::isFloat(char const*)>
   11dac:	88 23       	and	r24, r24
   11dae:	81 f0       	breq	.+32     	; 0x11dd0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x14a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:251
      result.set(parseFloat<JsonFloat>(buffer));
   11db0:	c7 01       	movw	r24, r14
   11db2:	0e 94 db 8c 	call	0x119b6	; 0x119b6 <float ArduinoJson::Internals::parseFloat<float>(char const*)>
_ZN11ArduinoJson11JsonVariant3setIfEEbT_PNS_9Internals9enable_ifIXsrNS3_17is_floating_pointIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:54
  // set(float value);
  template <typename T>
  FORCE_INLINE bool set(
      T value, typename Internals::enable_if<
                   Internals::is_floating_point<T>::value>::type * = 0) {
    if (!_data) return false;
   11db6:	01 15       	cp	r16, r1
   11db8:	11 05       	cpc	r17, r1
   11dba:	91 f3       	breq	.-28     	; 0x11da0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x11a>
_ZN11ArduinoJson9Internals15JsonVariantData8setFloatEf():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:29
    type = JSON_BOOLEAN;
    content.asInteger = static_cast<JsonUInt>(value);
  }

  void setFloat(JsonFloat value) {
    type = JSON_FLOAT;
   11dbc:	2a e0       	ldi	r18, 0x0A	; 10
   11dbe:	30 e0       	ldi	r19, 0x00	; 0
   11dc0:	f8 01       	movw	r30, r16
   11dc2:	31 83       	std	Z+1, r19	; 0x01
   11dc4:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:30
    content.asFloat = value;
   11dc6:	62 83       	std	Z+2, r22	; 0x02
   11dc8:	73 83       	std	Z+3, r23	; 0x03
   11dca:	84 83       	std	Z+4, r24	; 0x04
   11dcc:	95 83       	std	Z+5, r25	; 0x05
   11dce:	e8 cf       	rjmp	.-48     	; 0x11da0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x11a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseNumericValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:252
    } else if (!strcmp(buffer, "true")) {
   11dd0:	69 e3       	ldi	r22, 0x39	; 57
   11dd2:	76 e0       	ldi	r23, 0x06	; 6
   11dd4:	c7 01       	movw	r24, r14
   11dd6:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
   11dda:	89 2b       	or	r24, r25
   11ddc:	89 f4       	brne	.+34     	; 0x11e00 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x17a>
_ZN11ArduinoJson11JsonVariant3setEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:43
  // Creates an uninitialized JsonVariant
  FORCE_INLINE JsonVariant() : _memoryPool(0), _data(0) {}

  // set(bool value)
  FORCE_INLINE bool set(bool value) {
    if (!_data) return false;
   11dde:	01 15       	cp	r16, r1
   11de0:	11 05       	cpc	r17, r1
   11de2:	f1 f2       	breq	.-68     	; 0x11da0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x11a>
_ZN11ArduinoJson9Internals15JsonVariantData10setBooleanEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:24
  JsonVariantData() {
    type = JSON_NULL;
  }

  void setBoolean(bool value) {
    type = JSON_BOOLEAN;
   11de4:	85 e0       	ldi	r24, 0x05	; 5
   11de6:	90 e0       	ldi	r25, 0x00	; 0
   11de8:	f8 01       	movw	r30, r16
   11dea:	91 83       	std	Z+1, r25	; 0x01
   11dec:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:25
    content.asInteger = static_cast<JsonUInt>(value);
   11dee:	81 e0       	ldi	r24, 0x01	; 1
   11df0:	90 e0       	ldi	r25, 0x00	; 0
   11df2:	a0 e0       	ldi	r26, 0x00	; 0
   11df4:	b0 e0       	ldi	r27, 0x00	; 0
   11df6:	82 83       	std	Z+2, r24	; 0x02
   11df8:	93 83       	std	Z+3, r25	; 0x03
   11dfa:	a4 83       	std	Z+4, r26	; 0x04
   11dfc:	b5 83       	std	Z+5, r27	; 0x05
   11dfe:	d0 cf       	rjmp	.-96     	; 0x11da0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x11a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseNumericValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:254
      result.set(true);
    } else if (!strcmp(buffer, "false")) {
   11e00:	6e e3       	ldi	r22, 0x3E	; 62
   11e02:	76 e0       	ldi	r23, 0x06	; 6
   11e04:	c7 01       	movw	r24, r14
   11e06:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
   11e0a:	89 2b       	or	r24, r25
   11e0c:	69 f4       	brne	.+26     	; 0x11e28 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x1a2>
_ZN11ArduinoJson11JsonVariant3setEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:43
   11e0e:	01 15       	cp	r16, r1
   11e10:	11 05       	cpc	r17, r1
   11e12:	31 f2       	breq	.-116    	; 0x11da0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x11a>
_ZN11ArduinoJson9Internals15JsonVariantData10setBooleanEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:24
  JsonVariantData() {
    type = JSON_NULL;
  }

  void setBoolean(bool value) {
    type = JSON_BOOLEAN;
   11e14:	85 e0       	ldi	r24, 0x05	; 5
   11e16:	90 e0       	ldi	r25, 0x00	; 0
   11e18:	f8 01       	movw	r30, r16
   11e1a:	91 83       	std	Z+1, r25	; 0x01
   11e1c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:25
    content.asInteger = static_cast<JsonUInt>(value);
   11e1e:	12 82       	std	Z+2, r1	; 0x02
   11e20:	13 82       	std	Z+3, r1	; 0x03
   11e22:	14 82       	std	Z+4, r1	; 0x04
   11e24:	15 82       	std	Z+5, r1	; 0x05
   11e26:	bc cf       	rjmp	.-136    	; 0x11da0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x11a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseNumericValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:256
      result.set(false);
    } else if (!strcmp(buffer, "null")) {
   11e28:	64 e4       	ldi	r22, 0x44	; 68
   11e2a:	76 e0       	ldi	r23, 0x06	; 6
   11e2c:	c7 01       	movw	r24, r14
   11e2e:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
   11e32:	89 2b       	or	r24, r25
   11e34:	09 f4       	brne	.+2      	; 0x11e38 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x1b2>
   11e36:	b4 cf       	rjmp	.-152    	; 0x11da0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x11a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:259
      // already null
    } else {
      return DeserializationError::InvalidInput;
   11e38:	82 e0       	ldi	r24, 0x02	; 2
   11e3a:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:262
    }
    return DeserializationError::Ok;
  }
   11e3c:	c0 5c       	subi	r28, 0xC0	; 192
   11e3e:	df 4f       	sbci	r29, 0xFF	; 255
   11e40:	0f b6       	in	r0, 0x3f	; 63
   11e42:	f8 94       	cli
   11e44:	de bf       	out	0x3e, r29	; 62
   11e46:	0f be       	out	0x3f, r0	; 63
   11e48:	cd bf       	out	0x3d, r28	; 61
   11e4a:	df 91       	pop	r29
   11e4c:	cf 91       	pop	r28
   11e4e:	1f 91       	pop	r17
   11e50:	0f 91       	pop	r16
   11e52:	ff 90       	pop	r15
   11e54:	ef 90       	pop	r14
   11e56:	df 90       	pop	r13
   11e58:	cf 90       	pop	r12
   11e5a:	bf 90       	pop	r11
   11e5c:	af 90       	pop	r10
   11e5e:	9f 90       	pop	r9
   11e60:	8f 90       	pop	r8
   11e62:	08 95       	ret
_ZN11ArduinoJson9Internals12parseIntegerIlEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"
   11e64:	21 e0       	ldi	r18, 0x01	; 1
   11e66:	30 e0       	ldi	r19, 0x00	; 0
   11e68:	40 e0       	ldi	r20, 0x00	; 0
   11e6a:	50 e0       	ldi	r21, 0x00	; 0
_ZN11ArduinoJson11JsonVariant3setIlEEbT_PNS_9Internals9enable_ifIXaasrNS3_11is_integralIS2_EE5valuesrNS3_9is_signedIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:70
  FORCE_INLINE bool set(
      T value,
      typename Internals::enable_if<Internals::is_integral<T>::value &&
                                    Internals::is_signed<T>::value>::type * =
          0) {
    if (!_data) return false;
   11e6c:	01 15       	cp	r16, r1
   11e6e:	11 05       	cpc	r17, r1
   11e70:	09 f0       	breq	.+2      	; 0x11e74 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x1ee>
   11e72:	8d cf       	rjmp	.-230    	; 0x11d8e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x108>
   11e74:	95 cf       	rjmp	.-214    	; 0x11da0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x11a>

00011e76 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE8parseKeyEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:166
    } else {
      return parseNumericValue(variant);
    }
  }

  DeserializationError parseKey(const char **key) {
   11e76:	cf 92       	push	r12
   11e78:	df 92       	push	r13
   11e7a:	ef 92       	push	r14
   11e7c:	ff 92       	push	r15
   11e7e:	1f 93       	push	r17
   11e80:	cf 93       	push	r28
   11e82:	df 93       	push	r29
   11e84:	ec 01       	movw	r28, r24
   11e86:	6b 01       	movw	r12, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:167
    if (isQuote(current())) {
   11e88:	0e 94 88 8c 	call	0x11910	; 0x11910 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE7isQuoteEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:274
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
  }

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
   11e8c:	87 32       	cpi	r24, 0x27	; 39
   11e8e:	a1 f0       	breq	.+40     	; 0x11eb8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)+0x42>
   11e90:	82 32       	cpi	r24, 0x22	; 34
   11e92:	91 f0       	breq	.+36     	; 0x11eb8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)+0x42>
_ZN11ArduinoJson9Internals11StringMoverIcE6StringC4EPPc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:15
template <typename TChar>
class StringMover {
 public:
  class String {
   public:
    String(TChar** ptr) : _writePtr(ptr), _startPtr(*ptr) {}
   11e94:	ec 80       	ldd	r14, Y+4	; 0x04
   11e96:	fd 80       	ldd	r15, Y+5	; 0x05
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE20parseNonQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:218

  DeserializationError parseNonQuotedString(const char **result) {
    typename remove_reference<TStringStorage>::type::String str =
        _stringStorage.startString();

    char c = current();
   11e98:	ce 01       	movw	r24, r28
   11e9a:	0e 94 88 8c 	call	0x11910	; 0x11910 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
   11e9e:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:219
    if (c == '\0') return DeserializationError::IncompleteInput;
   11ea0:	81 11       	cpse	r24, r1
   11ea2:	15 c0       	rjmp	.+42     	; 0x11ece <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)+0x58>
   11ea4:	81 e0       	ldi	r24, 0x01	; 1
   11ea6:	90 e0       	ldi	r25, 0x00	; 0
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE8parseKeyEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:172
    if (isQuote(current())) {
      return parseQuotedString(key);
    } else {
      return parseNonQuotedString(key);
    }
  }
   11ea8:	df 91       	pop	r29
   11eaa:	cf 91       	pop	r28
   11eac:	1f 91       	pop	r17
   11eae:	ff 90       	pop	r15
   11eb0:	ef 90       	pop	r14
   11eb2:	df 90       	pop	r13
   11eb4:	cf 90       	pop	r12
   11eb6:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:168
    }
  }

  DeserializationError parseKey(const char **key) {
    if (isQuote(current())) {
      return parseQuotedString(key);
   11eb8:	b6 01       	movw	r22, r12
   11eba:	ce 01       	movw	r24, r28
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:172
    } else {
      return parseNonQuotedString(key);
    }
  }
   11ebc:	df 91       	pop	r29
   11ebe:	cf 91       	pop	r28
   11ec0:	1f 91       	pop	r17
   11ec2:	ff 90       	pop	r15
   11ec4:	ef 90       	pop	r14
   11ec6:	df 90       	pop	r13
   11ec8:	cf 90       	pop	r12
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:168
    }
  }

  DeserializationError parseKey(const char **key) {
    if (isQuote(current())) {
      return parseQuotedString(key);
   11eca:	0c 94 d4 8d 	jmp	0x11ba8	; 0x11ba8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE20parseNonQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:221
        _stringStorage.startString();

    char c = current();
    if (c == '\0') return DeserializationError::IncompleteInput;

    if (canBeInNonQuotedString(c)) {  // no quotes
   11ece:	0e 94 2b 8e 	call	0x11c56	; 0x11c56 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>
   11ed2:	88 23       	and	r24, r24
   11ed4:	09 f1       	breq	.+66     	; 0x11f18 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)+0xa2>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
   11ed6:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals11StringMoverIcE6String6appendEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:18

    void append(char c) {
      *(*_writePtr)++ = TChar(c);
   11ed8:	ec 81       	ldd	r30, Y+4	; 0x04
   11eda:	fd 81       	ldd	r31, Y+5	; 0x05
   11edc:	cf 01       	movw	r24, r30
   11ede:	01 96       	adiw	r24, 0x01	; 1
   11ee0:	9d 83       	std	Y+5, r25	; 0x05
   11ee2:	8c 83       	std	Y+4, r24	; 0x04
   11ee4:	10 83       	st	Z, r17
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE20parseNonQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:225

    if (canBeInNonQuotedString(c)) {  // no quotes
      do {
        move();
        str.append(c);
        c = current();
   11ee6:	ce 01       	movw	r24, r28
   11ee8:	0e 94 88 8c 	call	0x11910	; 0x11910 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
   11eec:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:226
      } while (canBeInNonQuotedString(c));
   11eee:	0e 94 2b 8e 	call	0x11c56	; 0x11c56 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>
   11ef2:	81 11       	cpse	r24, r1
   11ef4:	f0 cf       	rjmp	.-32     	; 0x11ed6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)+0x60>
_ZNK11ArduinoJson9Internals11StringMoverIcE6String5c_strEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:22
    }

    const char* c_str() const {
      *(*_writePtr)++ = 0;
   11ef6:	ec 81       	ldd	r30, Y+4	; 0x04
   11ef8:	fd 81       	ldd	r31, Y+5	; 0x05
   11efa:	cf 01       	movw	r24, r30
   11efc:	01 96       	adiw	r24, 0x01	; 1
   11efe:	9d 83       	std	Y+5, r25	; 0x05
   11f00:	8c 83       	std	Y+4, r24	; 0x04
   11f02:	10 82       	st	Z, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE20parseNonQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:231
    } else {
      return DeserializationError::InvalidInput;
    }

    *result = str.c_str();
   11f04:	f6 01       	movw	r30, r12
   11f06:	f1 82       	std	Z+1, r15	; 0x01
   11f08:	e0 82       	st	Z, r14
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:233
    if (*result == NULL) return DeserializationError::NoMemory;
    return DeserializationError::Ok;
   11f0a:	90 e0       	ldi	r25, 0x00	; 0
   11f0c:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:232
    } else {
      return DeserializationError::InvalidInput;
    }

    *result = str.c_str();
    if (*result == NULL) return DeserializationError::NoMemory;
   11f0e:	ef 28       	or	r14, r15
   11f10:	59 f6       	brne	.-106    	; 0x11ea8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)+0x32>
   11f12:	83 e0       	ldi	r24, 0x03	; 3
   11f14:	90 e0       	ldi	r25, 0x00	; 0
   11f16:	c8 cf       	rjmp	.-112    	; 0x11ea8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)+0x32>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:228
        move();
        str.append(c);
        c = current();
      } while (canBeInNonQuotedString(c));
    } else {
      return DeserializationError::InvalidInput;
   11f18:	82 e0       	ldi	r24, 0x02	; 2
   11f1a:	90 e0       	ldi	r25, 0x00	; 0
   11f1c:	c5 cf       	rjmp	.-118    	; 0x11ea8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)+0x32>

00011f1e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE11parseObjectENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:106
      if (eat(']')) return DeserializationError::Ok;
      if (!eat(',')) return DeserializationError::InvalidInput;
    }
  }

  DeserializationError parseObject(JsonVariant variant) {
   11f1e:	3f 92       	push	r3
   11f20:	4f 92       	push	r4
   11f22:	5f 92       	push	r5
   11f24:	6f 92       	push	r6
   11f26:	7f 92       	push	r7
   11f28:	8f 92       	push	r8
   11f2a:	9f 92       	push	r9
   11f2c:	af 92       	push	r10
   11f2e:	bf 92       	push	r11
   11f30:	cf 92       	push	r12
   11f32:	df 92       	push	r13
   11f34:	ef 92       	push	r14
   11f36:	ff 92       	push	r15
   11f38:	0f 93       	push	r16
   11f3a:	1f 93       	push	r17
   11f3c:	cf 93       	push	r28
   11f3e:	df 93       	push	r29
   11f40:	1f 92       	push	r1
   11f42:	1f 92       	push	r1
   11f44:	cd b7       	in	r28, 0x3d	; 61
   11f46:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:107
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
   11f48:	dc 01       	movw	r26, r24
   11f4a:	16 96       	adiw	r26, 0x06	; 6
   11f4c:	2c 91       	ld	r18, X
   11f4e:	16 97       	sbiw	r26, 0x06	; 6
   11f50:	21 11       	cpse	r18, r1
   11f52:	16 c0       	rjmp	.+44     	; 0x11f80 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x62>
   11f54:	85 e0       	ldi	r24, 0x05	; 5
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:110

    JsonObject object = variant.to<JsonObject>();
    if (object.isNull()) return DeserializationError::NoMemory;
   11f56:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:156

      // Skip spaces
      err = skipSpacesAndComments();
      if (err) return err;
    }
  }
   11f58:	0f 90       	pop	r0
   11f5a:	0f 90       	pop	r0
   11f5c:	df 91       	pop	r29
   11f5e:	cf 91       	pop	r28
   11f60:	1f 91       	pop	r17
   11f62:	0f 91       	pop	r16
   11f64:	ff 90       	pop	r15
   11f66:	ef 90       	pop	r14
   11f68:	df 90       	pop	r13
   11f6a:	cf 90       	pop	r12
   11f6c:	bf 90       	pop	r11
   11f6e:	af 90       	pop	r10
   11f70:	9f 90       	pop	r9
   11f72:	8f 90       	pop	r8
   11f74:	7f 90       	pop	r7
   11f76:	6f 90       	pop	r6
   11f78:	5f 90       	pop	r5
   11f7a:	4f 90       	pop	r4
   11f7c:	3f 90       	pop	r3
   11f7e:	08 95       	ret
_ZN11ArduinoJson11JsonVariant2toINS_10JsonObjectEEENS_9Internals9enable_ifIXsrNS3_7is_sameIT_S2_EE5valueES2_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:86

template <typename T>
typename Internals::enable_if<Internals::is_same<T, JsonObject>::value,
                              JsonObject>::type
JsonVariant::to() {
  if (!_data) return JsonObject();
   11f80:	6b 01       	movw	r12, r22
   11f82:	61 15       	cp	r22, r1
   11f84:	71 05       	cpc	r23, r1
   11f86:	11 f4       	brne	.+4      	; 0x11f8c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x6e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE11parseObjectENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:110

  DeserializationError parseObject(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;

    JsonObject object = variant.to<JsonObject>();
    if (object.isNull()) return DeserializationError::NoMemory;
   11f88:	83 e0       	ldi	r24, 0x03	; 3
   11f8a:	e5 cf       	rjmp	.-54     	; 0x11f56 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x38>
   11f8c:	8c 01       	movw	r16, r24
_ZN11ArduinoJson9Internals15JsonVariantData8toObjectEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:77
    content.asArray.tail = 0;
    return &content.asArray;
  }

  JsonObjectData *toObject() {
    type = JSON_OBJECT;
   11f8e:	89 e0       	ldi	r24, 0x09	; 9
   11f90:	90 e0       	ldi	r25, 0x00	; 0
   11f92:	fb 01       	movw	r30, r22
   11f94:	91 83       	std	Z+1, r25	; 0x01
   11f96:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:78
    content.asObject.head = 0;
   11f98:	13 82       	std	Z+3, r1	; 0x03
   11f9a:	12 82       	std	Z+2, r1	; 0x02
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:79
    content.asObject.tail = 0;
   11f9c:	15 82       	std	Z+5, r1	; 0x05
   11f9e:	14 82       	std	Z+4, r1	; 0x04
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:80
    return &content.asObject;
   11fa0:	4b 01       	movw	r8, r22
   11fa2:	f2 e0       	ldi	r31, 0x02	; 2
   11fa4:	8f 0e       	add	r8, r31
   11fa6:	91 1c       	adc	r9, r1
_ZN11ArduinoJson11JsonVariant2toINS_10JsonObjectEEENS_9Internals9enable_ifIXsrNS3_7is_sameIT_S2_EE5valueES2_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:87
  return JsonObject(_memoryPool, _data->toObject());
   11fa8:	7a 01       	movw	r14, r20
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
   11faa:	cd 01       	movw	r24, r26
   11fac:	0e 94 88 8c 	call	0x11910	; 0x11910 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
   11fb0:	8b 37       	cpi	r24, 0x7B	; 123
   11fb2:	11 f0       	breq	.+4      	; 0x11fb8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x9a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE11parseObjectENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:132
      if (err) return err;

      // Skip spaces
      err = skipSpacesAndComments();
      if (err) return err;  // Colon
      if (!eat(':')) return DeserializationError::InvalidInput;
   11fb4:	82 e0       	ldi	r24, 0x02	; 2
   11fb6:	cf cf       	rjmp	.-98     	; 0x11f56 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x38>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
   11fb8:	d8 01       	movw	r26, r16
   11fba:	18 96       	adiw	r26, 0x08	; 8
   11fbc:	1c 92       	st	X, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE11parseObjectENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:116

    // Check opening brace
    if (!eat('{')) return DeserializationError::InvalidInput;

    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
   11fbe:	c8 01       	movw	r24, r16
   11fc0:	0e 94 98 8c 	call	0x11930	; 0x11930 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:117
    if (err) return err;
   11fc4:	00 97       	sbiw	r24, 0x00	; 0
   11fc6:	41 f6       	brne	.-112    	; 0x11f58 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x3a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
   11fc8:	c8 01       	movw	r24, r16
   11fca:	0e 94 88 8c 	call	0x11910	; 0x11910 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
   11fce:	8d 37       	cpi	r24, 0x7D	; 125
   11fd0:	09 f4       	brne	.+2      	; 0x11fd4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0xb6>
   11fd2:	4b c0       	rjmp	.+150    	; 0x1206a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x14c>
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:348

    // search a matching key
    Internals::Slot* slot = findSlot<TStringRef>(key);
    if (!slot) {
      // add the key
      slot = new (_memoryPool) Internals::Slot();
   11fd4:	8c e0       	ldi	r24, 0x0C	; 12
   11fd6:	38 2e       	mov	r3, r24
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE11parseObjectENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:126

    // Read each key value pair
    for (;;) {
      // Parse key
      const char *key;
      err = parseKey(&key);
   11fd8:	be 01       	movw	r22, r28
   11fda:	6f 5f       	subi	r22, 0xFF	; 255
   11fdc:	7f 4f       	sbci	r23, 0xFF	; 255
   11fde:	c8 01       	movw	r24, r16
   11fe0:	0e 94 3b 8f 	call	0x11e76	; 0x11e76 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:127
      if (err) return err;
   11fe4:	00 97       	sbiw	r24, 0x00	; 0
   11fe6:	09 f0       	breq	.+2      	; 0x11fea <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0xcc>
   11fe8:	b7 cf       	rjmp	.-146    	; 0x11f58 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x3a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:130

      // Skip spaces
      err = skipSpacesAndComments();
   11fea:	c8 01       	movw	r24, r16
   11fec:	0e 94 98 8c 	call	0x11930	; 0x11930 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:131
      if (err) return err;  // Colon
   11ff0:	00 97       	sbiw	r24, 0x00	; 0
   11ff2:	09 f0       	breq	.+2      	; 0x11ff6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0xd8>
   11ff4:	b1 cf       	rjmp	.-158    	; 0x11f58 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x3a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
   11ff6:	c8 01       	movw	r24, r16
   11ff8:	0e 94 88 8c 	call	0x11910	; 0x11910 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
   11ffc:	8a 33       	cpi	r24, 0x3A	; 58
   11ffe:	d1 f6       	brne	.-76     	; 0x11fb4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x96>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
   12000:	d8 01       	movw	r26, r16
   12002:	18 96       	adiw	r26, 0x08	; 8
   12004:	1c 92       	st	X, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE11parseObjectENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:135
      err = skipSpacesAndComments();
      if (err) return err;  // Colon
      if (!eat(':')) return DeserializationError::InvalidInput;

      // Allocate slot in object
      JsonVariant value = object.set(key);
   12006:	a9 80       	ldd	r10, Y+1	; 0x01
   12008:	ba 80       	ldd	r11, Y+2	; 0x02
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:342
  template <typename TStringRef>
  FORCE_INLINE JsonVariant set_impl(TStringRef key) {
    if (!_data) return JsonVariant();

    // ignore null key
    if (Internals::makeString(key).is_null()) return JsonVariant();
   1200a:	a1 14       	cp	r10, r1
   1200c:	b1 04       	cpc	r11, r1
   1200e:	89 f5       	brne	.+98     	; 0x12072 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x154>
   12010:	90 e0       	ldi	r25, 0x00	; 0
   12012:	80 e0       	ldi	r24, 0x00	; 0
   12014:	30 e0       	ldi	r19, 0x00	; 0
   12016:	20 e0       	ldi	r18, 0x00	; 0
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE11parseObjectENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:135
   12018:	43 2e       	mov	r4, r19
   1201a:	52 2e       	mov	r5, r18
   1201c:	3c 01       	movw	r6, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:136
      if (value.isInvalid()) return DeserializationError::NoMemory;
   1201e:	89 2b       	or	r24, r25
   12020:	09 f4       	brne	.+2      	; 0x12024 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x106>
   12022:	b2 cf       	rjmp	.-156    	; 0x11f88 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x6a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:139

      // Parse value
      _nestingLimit--;
   12024:	d8 01       	movw	r26, r16
   12026:	16 96       	adiw	r26, 0x06	; 6
   12028:	8c 91       	ld	r24, X
   1202a:	16 97       	sbiw	r26, 0x06	; 6
   1202c:	81 50       	subi	r24, 0x01	; 1
   1202e:	16 96       	adiw	r26, 0x06	; 6
   12030:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:140
      err = parse(value);
   12032:	b3 01       	movw	r22, r6
   12034:	a2 01       	movw	r20, r4
   12036:	c8 01       	movw	r24, r16
   12038:	0e 94 83 90 	call	0x12106	; 0x12106 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:141
      _nestingLimit++;
   1203c:	f8 01       	movw	r30, r16
   1203e:	26 81       	ldd	r18, Z+6	; 0x06
   12040:	2f 5f       	subi	r18, 0xFF	; 255
   12042:	26 83       	std	Z+6, r18	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:142
      if (err) return err;
   12044:	00 97       	sbiw	r24, 0x00	; 0
   12046:	09 f0       	breq	.+2      	; 0x1204a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x12c>
   12048:	87 cf       	rjmp	.-242    	; 0x11f58 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x3a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:145

      // Skip spaces
      err = skipSpacesAndComments();
   1204a:	c8 01       	movw	r24, r16
   1204c:	0e 94 98 8c 	call	0x11930	; 0x11930 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:146
      if (err) return err;
   12050:	00 97       	sbiw	r24, 0x00	; 0
   12052:	09 f0       	breq	.+2      	; 0x12056 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x138>
   12054:	81 cf       	rjmp	.-254    	; 0x11f58 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x3a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
   12056:	c8 01       	movw	r24, r16
   12058:	0e 94 88 8c 	call	0x11910	; 0x11910 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
   1205c:	8d 37       	cpi	r24, 0x7D	; 125
   1205e:	09 f0       	breq	.+2      	; 0x12062 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x144>
   12060:	43 c0       	rjmp	.+134    	; 0x120e8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x1ca>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
   12062:	d8 01       	movw	r26, r16
   12064:	18 96       	adiw	r26, 0x08	; 8
   12066:	1c 92       	st	X, r1
   12068:	02 c0       	rjmp	.+4      	; 0x1206e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x150>
   1206a:	f8 01       	movw	r30, r16
   1206c:	10 86       	std	Z+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE11parseObjectENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:149
      // Skip spaces
      err = skipSpacesAndComments();
      if (err) return err;

      // More keys/values?
      if (eat('}')) return DeserializationError::Ok;
   1206e:	80 e0       	ldi	r24, 0x00	; 0
   12070:	72 cf       	rjmp	.-284    	; 0x11f56 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x38>
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:345

    // search a matching key
    Internals::Slot* slot = findSlot<TStringRef>(key);
   12072:	b5 01       	movw	r22, r10
   12074:	c4 01       	movw	r24, r8
   12076:	0e 94 09 52 	call	0xa412	; 0xa412 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:346
    if (!slot) {
   1207a:	00 97       	sbiw	r24, 0x00	; 0
   1207c:	49 f5       	brne	.+82     	; 0x120d0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x1b2>
_ZN11ArduinoJson9Internals21AllocableInMemoryPoolnwEjPNS0_10MemoryPoolE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Memory/AllocableInMemoryPool.hpp:15
namespace Internals {

class AllocableInMemoryPool {
 public:
  void *operator new(size_t n, MemoryPool *memoryPool) NOEXCEPT {
    return memoryPool->alloc(n);
   1207e:	d7 01       	movw	r26, r14
   12080:	ed 91       	ld	r30, X+
   12082:	fc 91       	ld	r31, X
   12084:	01 90       	ld	r0, Z+
   12086:	f0 81       	ld	r31, Z
   12088:	e0 2d       	mov	r30, r0
   1208a:	6c e0       	ldi	r22, 0x0C	; 12
   1208c:	70 e0       	ldi	r23, 0x00	; 0
   1208e:	c7 01       	movw	r24, r14
   12090:	19 95       	eicall
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:348
      // add the key
      slot = new (_memoryPool) Internals::Slot();
   12092:	00 97       	sbiw	r24, 0x00	; 0
   12094:	09 f4       	brne	.+2      	; 0x12098 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x17a>
   12096:	bc cf       	rjmp	.-136    	; 0x12010 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0xf2>
   12098:	fc 01       	movw	r30, r24
   1209a:	23 2d       	mov	r18, r3
   1209c:	11 92       	st	Z+, r1
   1209e:	2a 95       	dec	r18
   120a0:	e9 f7       	brne	.-6      	; 0x1209c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x17e>
_ZN11ArduinoJson9Internals15JsonVariantDataC4Ev():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:20
struct JsonVariantData {
  JsonVariantType type;
  JsonVariantContent content;

  JsonVariantData() {
    type = JSON_NULL;
   120a2:	dc 01       	movw	r26, r24
   120a4:	1d 92       	st	X+, r1
   120a6:	1c 92       	st	X, r1
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:353
      if (!slot) return JsonVariant();

      slot->next = 0;

      if (_data->tail) {
   120a8:	d6 01       	movw	r26, r12
   120aa:	14 96       	adiw	r26, 0x04	; 4
   120ac:	ed 91       	ld	r30, X+
   120ae:	fc 91       	ld	r31, X
   120b0:	15 97       	sbiw	r26, 0x05	; 5
   120b2:	30 97       	sbiw	r30, 0x00	; 0
   120b4:	81 f0       	breq	.+32     	; 0x120d6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x1b8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:354
        slot->prev = _data->tail;
   120b6:	dc 01       	movw	r26, r24
   120b8:	19 96       	adiw	r26, 0x09	; 9
   120ba:	fc 93       	st	X, r31
   120bc:	ee 93       	st	-X, r30
   120be:	18 97       	sbiw	r26, 0x08	; 8
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:355
        _data->tail->next = slot;
   120c0:	97 83       	std	Z+7, r25	; 0x07
   120c2:	86 83       	std	Z+6, r24	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:356
        _data->tail = slot;
   120c4:	f6 01       	movw	r30, r12
   120c6:	95 83       	std	Z+5, r25	; 0x05
   120c8:	84 83       	std	Z+4, r24	; 0x04
_ZN11ArduinoJson10JsonObject7set_keyEPNS_9Internals4SlotEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:370

    return JsonVariant(_memoryPool, &slot->value);
  }

  FORCE_INLINE bool set_key(Internals::Slot* slot, const char* key) {
    slot->key = key;
   120ca:	fc 01       	movw	r30, r24
   120cc:	b3 86       	std	Z+11, r11	; 0x0b
   120ce:	a2 86       	std	Z+10, r10	; 0x0a
_ZN11ArduinoJson11JsonVariant2toINS_10JsonObjectEEENS_9Internals9enable_ifIXsrNS3_7is_sameIT_S2_EE5valueES2_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:87
   120d0:	3e 2d       	mov	r19, r14
   120d2:	2f 2d       	mov	r18, r15
   120d4:	a1 cf       	rjmp	.-190    	; 0x12018 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0xfa>
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:359
        slot->prev = _data->tail;
        _data->tail->next = slot;
        _data->tail = slot;
      } else {
        slot->prev = 0;
        _data->head = slot;
   120d6:	13 96       	adiw	r26, 0x03	; 3
   120d8:	9c 93       	st	X, r25
   120da:	8e 93       	st	-X, r24
   120dc:	12 97       	sbiw	r26, 0x02	; 2
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:360
        _data->tail = slot;
   120de:	15 96       	adiw	r26, 0x05	; 5
   120e0:	9c 93       	st	X, r25
   120e2:	8e 93       	st	-X, r24
   120e4:	14 97       	sbiw	r26, 0x04	; 4
   120e6:	f1 cf       	rjmp	.-30     	; 0x120ca <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x1ac>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
   120e8:	c8 01       	movw	r24, r16
   120ea:	0e 94 88 8c 	call	0x11910	; 0x11910 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
   120ee:	8c 32       	cpi	r24, 0x2C	; 44
   120f0:	09 f0       	breq	.+2      	; 0x120f4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x1d6>
   120f2:	60 cf       	rjmp	.-320    	; 0x11fb4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x96>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
   120f4:	f8 01       	movw	r30, r16
   120f6:	10 86       	std	Z+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE11parseObjectENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:153
      // More keys/values?
      if (eat('}')) return DeserializationError::Ok;
      if (!eat(',')) return DeserializationError::InvalidInput;

      // Skip spaces
      err = skipSpacesAndComments();
   120f8:	c8 01       	movw	r24, r16
   120fa:	0e 94 98 8c 	call	0x11930	; 0x11930 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:154
      if (err) return err;
   120fe:	00 97       	sbiw	r24, 0x00	; 0
   12100:	09 f4       	brne	.+2      	; 0x12104 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x1e6>
   12102:	6a cf       	rjmp	.-300    	; 0x11fd8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0xba>
   12104:	29 cf       	rjmp	.-430    	; 0x11f58 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x3a>

00012106 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:28
      : _memoryPool(&memoryPool),
        _reader(reader),
        _stringStorage(stringStorage),
        _nestingLimit(nestingLimit),
        _loaded(false) {}
  DeserializationError parse(JsonVariant variant) {
   12106:	8f 92       	push	r8
   12108:	9f 92       	push	r9
   1210a:	af 92       	push	r10
   1210c:	bf 92       	push	r11
   1210e:	ef 92       	push	r14
   12110:	ff 92       	push	r15
   12112:	0f 93       	push	r16
   12114:	1f 93       	push	r17
   12116:	cf 93       	push	r28
   12118:	df 93       	push	r29
   1211a:	1f 92       	push	r1
   1211c:	1f 92       	push	r1
   1211e:	cd b7       	in	r28, 0x3d	; 61
   12120:	de b7       	in	r29, 0x3e	; 62
   12122:	8c 01       	movw	r16, r24
   12124:	4a 01       	movw	r8, r20
   12126:	5b 01       	movw	r10, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:29
    DeserializationError err = skipSpacesAndComments();
   12128:	0e 94 98 8c 	call	0x11930	; 0x11930 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:30
    if (err) return err;
   1212c:	00 97       	sbiw	r24, 0x00	; 0
   1212e:	e1 f4       	brne	.+56     	; 0x12168 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x62>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:32

    switch (current()) {
   12130:	c8 01       	movw	r24, r16
   12132:	0e 94 88 8c 	call	0x11910	; 0x11910 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
   12136:	8b 35       	cpi	r24, 0x5B	; 91
   12138:	91 f0       	breq	.+36     	; 0x1215e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x58>
   1213a:	8b 37       	cpi	r24, 0x7B	; 123
   1213c:	11 f1       	breq	.+68     	; 0x12182 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7c>
   1213e:	75 01       	movw	r14, r10
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE10parseValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:159
      if (err) return err;
    }
  }

  DeserializationError parseValue(JsonVariant variant) {
    if (isQuote(current())) {
   12140:	c8 01       	movw	r24, r16
   12142:	0e 94 88 8c 	call	0x11910	; 0x11910 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE7isQuoteEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:274
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
  }

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
   12146:	87 32       	cpi	r24, 0x27	; 39
   12148:	11 f1       	breq	.+68     	; 0x1218e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x88>
   1214a:	82 32       	cpi	r24, 0x22	; 34
   1214c:	01 f1       	breq	.+64     	; 0x1218e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x88>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE10parseValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:162

  DeserializationError parseValue(JsonVariant variant) {
    if (isQuote(current())) {
      return parseStringValue(variant);
    } else {
      return parseNumericValue(variant);
   1214e:	b5 01       	movw	r22, r10
   12150:	a4 01       	movw	r20, r8
   12152:	c8 01       	movw	r24, r16
   12154:	0e 94 43 8e 	call	0x11c86	; 0x11c86 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)>
   12158:	9c 01       	movw	r18, r24
   1215a:	c9 01       	movw	r24, r18
   1215c:	05 c0       	rjmp	.+10     	; 0x12168 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x62>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:34
    DeserializationError err = skipSpacesAndComments();
    if (err) return err;

    switch (current()) {
      case '[':
        return parseArray(variant);
   1215e:	b5 01       	movw	r22, r10
   12160:	a4 01       	movw	r20, r8
   12162:	c8 01       	movw	r24, r16
   12164:	0e 94 df 90 	call	0x121be	; 0x121be <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:42
        return parseObject(variant);

      default:
        return parseValue(variant);
    }
  }
   12168:	0f 90       	pop	r0
   1216a:	0f 90       	pop	r0
   1216c:	df 91       	pop	r29
   1216e:	cf 91       	pop	r28
   12170:	1f 91       	pop	r17
   12172:	0f 91       	pop	r16
   12174:	ff 90       	pop	r15
   12176:	ef 90       	pop	r14
   12178:	bf 90       	pop	r11
   1217a:	af 90       	pop	r10
   1217c:	9f 90       	pop	r9
   1217e:	8f 90       	pop	r8
   12180:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:37
    switch (current()) {
      case '[':
        return parseArray(variant);

      case '{':
        return parseObject(variant);
   12182:	b5 01       	movw	r22, r10
   12184:	a4 01       	movw	r20, r8
   12186:	c8 01       	movw	r24, r16
   12188:	0e 94 8f 8f 	call	0x11f1e	; 0x11f1e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)>
   1218c:	ed cf       	rjmp	.-38     	; 0x12168 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x62>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE16parseStringValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:176
    }
  }

  DeserializationError parseStringValue(JsonVariant variant) {
    const char *value;
    DeserializationError err = parseQuotedString(&value);
   1218e:	be 01       	movw	r22, r28
   12190:	6f 5f       	subi	r22, 0xFF	; 255
   12192:	7f 4f       	sbci	r23, 0xFF	; 255
   12194:	c8 01       	movw	r24, r16
   12196:	0e 94 d4 8d 	call	0x11ba8	; 0x11ba8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)>
   1219a:	9c 01       	movw	r18, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:177
    if (err) return err;
   1219c:	89 2b       	or	r24, r25
   1219e:	e9 f6       	brne	.-70     	; 0x1215a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x54>
_ZN11ArduinoJson11JsonVariant3setEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:154
    }
  }

  // set(const char*);
  FORCE_INLINE bool set(const char *value) {
    if (!_data) return false;
   121a0:	e1 14       	cp	r14, r1
   121a2:	f1 04       	cpc	r15, r1
   121a4:	49 f0       	breq	.+18     	; 0x121b8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xb2>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE16parseStringValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:178
    variant.set(value);
   121a6:	89 81       	ldd	r24, Y+1	; 0x01
   121a8:	9a 81       	ldd	r25, Y+2	; 0x02
_ZN11ArduinoJson9Internals15JsonVariantData15setLinkedStringEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:49
    type = JSON_OWNED_STRING;
    content.asString = value;
  }

  void setLinkedString(const char *value) {
    type = JSON_LINKED_STRING;
   121aa:	23 e0       	ldi	r18, 0x03	; 3
   121ac:	30 e0       	ldi	r19, 0x00	; 0
   121ae:	f7 01       	movw	r30, r14
   121b0:	31 83       	std	Z+1, r19	; 0x01
   121b2:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:50
    content.asString = value;
   121b4:	93 83       	std	Z+3, r25	; 0x03
   121b6:	82 83       	std	Z+2, r24	; 0x02
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE16parseStringValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:179
    return DeserializationError::Ok;
   121b8:	30 e0       	ldi	r19, 0x00	; 0
   121ba:	20 e0       	ldi	r18, 0x00	; 0
   121bc:	ce cf       	rjmp	.-100    	; 0x1215a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x54>

000121be <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE10parseArrayENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:68
    if (current() != charToSkip) return false;
    move();
    return true;
  }

  DeserializationError parseArray(JsonVariant variant) {
   121be:	0f 93       	push	r16
   121c0:	1f 93       	push	r17
   121c2:	cf 93       	push	r28
   121c4:	df 93       	push	r29
   121c6:	00 d0       	rcall	.+0      	; 0x121c8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0xa>
   121c8:	1f 92       	push	r1
   121ca:	cd b7       	in	r28, 0x3d	; 61
   121cc:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:69
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
   121ce:	fc 01       	movw	r30, r24
   121d0:	26 81       	ldd	r18, Z+6	; 0x06
   121d2:	21 11       	cpse	r18, r1
   121d4:	0b c0       	rjmp	.+22     	; 0x121ec <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x2e>
   121d6:	85 e0       	ldi	r24, 0x05	; 5
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:102
      err = skipSpacesAndComments();
      if (err) return err;

      // 3 - More values?
      if (eat(']')) return DeserializationError::Ok;
      if (!eat(',')) return DeserializationError::InvalidInput;
   121d8:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:104 (discriminator 2)
    }
  }
   121da:	0f 90       	pop	r0
   121dc:	0f 90       	pop	r0
   121de:	0f 90       	pop	r0
   121e0:	0f 90       	pop	r0
   121e2:	df 91       	pop	r29
   121e4:	cf 91       	pop	r28
   121e6:	1f 91       	pop	r17
   121e8:	0f 91       	pop	r16
   121ea:	08 95       	ret
_ZN11ArduinoJson11JsonVariant2toINS_9JsonArrayEEENS_9Internals9enable_ifIXsrNS3_7is_sameIT_S2_EE5valueES2_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:78

template <typename T>
inline typename Internals::enable_if<Internals::is_same<T, JsonArray>::value,
                                     JsonArray>::type
JsonVariant::to() {
  if (!_data) return JsonArray();
   121ec:	fb 01       	movw	r30, r22
   121ee:	30 97       	sbiw	r30, 0x00	; 0
   121f0:	99 f0       	breq	.+38     	; 0x12218 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x5a>
_ZN11ArduinoJson9Internals15JsonVariantData7toArrayEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:70
  void setNull() {
    type = JSON_NULL;
  }

  JsonArrayData *toArray() {
    type = JSON_ARRAY;
   121f2:	28 e0       	ldi	r18, 0x08	; 8
   121f4:	30 e0       	ldi	r19, 0x00	; 0
   121f6:	31 83       	std	Z+1, r19	; 0x01
   121f8:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:71
    content.asArray.head = 0;
   121fa:	13 82       	std	Z+3, r1	; 0x03
   121fc:	12 82       	std	Z+2, r1	; 0x02
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:72
    content.asArray.tail = 0;
   121fe:	15 82       	std	Z+5, r1	; 0x05
   12200:	14 82       	std	Z+4, r1	; 0x04
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:73
    return &content.asArray;
   12202:	9b 01       	movw	r18, r22
   12204:	2e 5f       	subi	r18, 0xFE	; 254
   12206:	3f 4f       	sbci	r19, 0xFF	; 255
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE10parseArrayENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:71
  }

  DeserializationError parseArray(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;

    JsonArray array = variant.to<JsonArray>();
   12208:	5a 83       	std	Y+2, r21	; 0x02
   1220a:	49 83       	std	Y+1, r20	; 0x01
   1220c:	3c 83       	std	Y+4, r19	; 0x04
   1220e:	2b 83       	std	Y+3, r18	; 0x03
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:72
    if (array.isNull()) return DeserializationError::NoMemory;
   12210:	23 2b       	or	r18, r19
   12212:	39 f4       	brne	.+14     	; 0x12222 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x64>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:88

    // Read each value
    for (;;) {
      // Allocate slot in array
      JsonVariant value = array.add();
      if (value.isInvalid()) return DeserializationError::NoMemory;
   12214:	83 e0       	ldi	r24, 0x03	; 3
   12216:	e0 cf       	rjmp	.-64     	; 0x121d8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x1a>
_ZN11ArduinoJson11JsonVariant2toINS_9JsonArrayEEENS_9Internals9enable_ifIXsrNS3_7is_sameIT_S2_EE5valueES2_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:78
   12218:	30 e0       	ldi	r19, 0x00	; 0
   1221a:	20 e0       	ldi	r18, 0x00	; 0
   1221c:	50 e0       	ldi	r21, 0x00	; 0
   1221e:	40 e0       	ldi	r20, 0x00	; 0
   12220:	f3 cf       	rjmp	.-26     	; 0x12208 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x4a>
   12222:	8c 01       	movw	r16, r24
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
   12224:	0e 94 88 8c 	call	0x11910	; 0x11910 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
   12228:	8b 35       	cpi	r24, 0x5B	; 91
   1222a:	11 f0       	breq	.+4      	; 0x12230 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x72>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE10parseArrayENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:102
      err = skipSpacesAndComments();
      if (err) return err;

      // 3 - More values?
      if (eat(']')) return DeserializationError::Ok;
      if (!eat(',')) return DeserializationError::InvalidInput;
   1222c:	82 e0       	ldi	r24, 0x02	; 2
   1222e:	d4 cf       	rjmp	.-88     	; 0x121d8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x1a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
   12230:	f8 01       	movw	r30, r16
   12232:	10 86       	std	Z+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE10parseArrayENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:78

    // Check opening braket
    if (!eat('[')) return DeserializationError::InvalidInput;

    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
   12234:	c8 01       	movw	r24, r16
   12236:	0e 94 98 8c 	call	0x11930	; 0x11930 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:79
    if (err) return err;
   1223a:	00 97       	sbiw	r24, 0x00	; 0
   1223c:	71 f6       	brne	.-100    	; 0x121da <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x1c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
   1223e:	c8 01       	movw	r24, r16
   12240:	0e 94 88 8c 	call	0x11910	; 0x11910 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
   12244:	8d 35       	cpi	r24, 0x5D	; 93
   12246:	21 f4       	brne	.+8      	; 0x12250 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x92>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
   12248:	f8 01       	movw	r30, r16
   1224a:	10 86       	std	Z+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE10parseArrayENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:101
      // 2 - Skip spaces
      err = skipSpacesAndComments();
      if (err) return err;

      // 3 - More values?
      if (eat(']')) return DeserializationError::Ok;
   1224c:	80 e0       	ldi	r24, 0x00	; 0
   1224e:	c4 cf       	rjmp	.-120    	; 0x121d8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x1a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:87
    if (eat(']')) return DeserializationError::Ok;

    // Read each value
    for (;;) {
      // Allocate slot in array
      JsonVariant value = array.add();
   12250:	ce 01       	movw	r24, r28
   12252:	01 96       	adiw	r24, 0x01	; 1
   12254:	0e 94 36 52 	call	0xa46c	; 0xa46c <ArduinoJson::JsonArray::add()>
   12258:	ab 01       	movw	r20, r22
   1225a:	bc 01       	movw	r22, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:88
      if (value.isInvalid()) return DeserializationError::NoMemory;
   1225c:	89 2b       	or	r24, r25
   1225e:	d1 f2       	breq	.-76     	; 0x12214 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x56>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:91

      // 1 - Parse value
      _nestingLimit--;
   12260:	f8 01       	movw	r30, r16
   12262:	86 81       	ldd	r24, Z+6	; 0x06
   12264:	81 50       	subi	r24, 0x01	; 1
   12266:	86 83       	std	Z+6, r24	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:92
      err = parse(value);
   12268:	c8 01       	movw	r24, r16
   1226a:	0e 94 83 90 	call	0x12106	; 0x12106 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:93
      _nestingLimit++;
   1226e:	f8 01       	movw	r30, r16
   12270:	26 81       	ldd	r18, Z+6	; 0x06
   12272:	2f 5f       	subi	r18, 0xFF	; 255
   12274:	26 83       	std	Z+6, r18	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:94
      if (err) return err;
   12276:	00 97       	sbiw	r24, 0x00	; 0
   12278:	09 f0       	breq	.+2      	; 0x1227c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0xbe>
   1227a:	af cf       	rjmp	.-162    	; 0x121da <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x1c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:97

      // 2 - Skip spaces
      err = skipSpacesAndComments();
   1227c:	c8 01       	movw	r24, r16
   1227e:	0e 94 98 8c 	call	0x11930	; 0x11930 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:98
      if (err) return err;
   12282:	00 97       	sbiw	r24, 0x00	; 0
   12284:	09 f0       	breq	.+2      	; 0x12288 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0xca>
   12286:	a9 cf       	rjmp	.-174    	; 0x121da <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x1c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
   12288:	c8 01       	movw	r24, r16
   1228a:	0e 94 88 8c 	call	0x11910	; 0x11910 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
   1228e:	8d 35       	cpi	r24, 0x5D	; 93
   12290:	d9 f2       	breq	.-74     	; 0x12248 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x8a>
   12292:	c8 01       	movw	r24, r16
   12294:	0e 94 88 8c 	call	0x11910	; 0x11910 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
   12298:	8c 32       	cpi	r24, 0x2C	; 44
   1229a:	41 f6       	brne	.-112    	; 0x1222c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x6e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
   1229c:	f8 01       	movw	r30, r16
   1229e:	10 86       	std	Z+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE10parseArrayENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:85

    // Empty array?
    if (eat(']')) return DeserializationError::Ok;

    // Read each value
    for (;;) {
   122a0:	d7 cf       	rjmp	.-82     	; 0x12250 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x92>

000122a2 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>:
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:92
  JsonObjectData *asObject() {
    return type == JSON_OBJECT ? &content.asObject : 0;
  }

  template <typename T>
  T asInteger() const {
   122a2:	fc 01       	movw	r30, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
    switch (type) {
   122a4:	80 81       	ld	r24, Z
   122a6:	91 81       	ldd	r25, Z+1	; 0x01
   122a8:	87 30       	cpi	r24, 0x07	; 7
   122aa:	91 05       	cpc	r25, r1
   122ac:	38 f4       	brcc	.+14     	; 0x122bc <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x1a>
   122ae:	85 30       	cpi	r24, 0x05	; 5
   122b0:	91 05       	cpc	r25, r1
   122b2:	88 f4       	brcc	.+34     	; 0x122d6 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x34>
   122b4:	03 97       	sbiw	r24, 0x03	; 3
   122b6:	a0 f4       	brcc	.+40     	; 0x122e0 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x3e>
_ZN11ArduinoJson9Internals12parseIntegerIhEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
   122b8:	80 e0       	ldi	r24, 0x00	; 0
   122ba:	08 95       	ret
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
   122bc:	87 30       	cpi	r24, 0x07	; 7
   122be:	91 05       	cpc	r25, r1
   122c0:	61 f0       	breq	.+24     	; 0x122da <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x38>
   122c2:	0a 97       	sbiw	r24, 0x0a	; 10
   122c4:	c9 f7       	brne	.-14     	; 0x122b8 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x16>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:103
        return T(~content.asInteger + 1);
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
      case JSON_FLOAT:
        return T(content.asFloat);
   122c6:	62 81       	ldd	r22, Z+2	; 0x02
   122c8:	73 81       	ldd	r23, Z+3	; 0x03
   122ca:	84 81       	ldd	r24, Z+4	; 0x04
   122cc:	95 81       	ldd	r25, Z+5	; 0x05
   122ce:	0f 94 c6 14 	call	0x2298c	; 0x2298c <__fixunssfsi>
   122d2:	86 2f       	mov	r24, r22
   122d4:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:96
  template <typename T>
  T asInteger() const {
    switch (type) {
      case JSON_POSITIVE_INTEGER:
      case JSON_BOOLEAN:
        return T(content.asInteger);
   122d6:	82 81       	ldd	r24, Z+2	; 0x02
   122d8:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:98
      case JSON_NEGATIVE_INTEGER:
        return T(~content.asInteger + 1);
   122da:	82 81       	ldd	r24, Z+2	; 0x02
_ZN11ArduinoJson9Internals12parseIntegerIhEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
   122dc:	81 95       	neg	r24
   122de:	08 95       	ret
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:101
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
   122e0:	02 80       	ldd	r0, Z+2	; 0x02
   122e2:	f3 81       	ldd	r31, Z+3	; 0x03
   122e4:	e0 2d       	mov	r30, r0
_ZN11ArduinoJson9Internals12parseIntegerIhEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
   122e6:	30 97       	sbiw	r30, 0x00	; 0
   122e8:	39 f3       	breq	.-50     	; 0x122b8 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x16>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18

  if (*s == 't') return 1;  // "true"
   122ea:	80 81       	ld	r24, Z
   122ec:	84 37       	cpi	r24, 0x74	; 116
   122ee:	c9 f0       	breq	.+50     	; 0x12322 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x80>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  T result = 0;
  bool negative_result = false;

  switch (*s) {
   122f0:	8b 32       	cpi	r24, 0x2B	; 43
   122f2:	89 f0       	breq	.+34     	; 0x12316 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x74>
   122f4:	8d 32       	cpi	r24, 0x2D	; 45
   122f6:	81 f4       	brne	.+32     	; 0x12318 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x76>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:26
    case '-':
      negative_result = true;
      s++;
   122f8:	31 96       	adiw	r30, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:25
  T result = 0;
  bool negative_result = false;

  switch (*s) {
    case '-':
      negative_result = true;
   122fa:	91 e0       	ldi	r25, 0x01	; 1
   122fc:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
      s++;
      break;
  }

  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
   122fe:	2a e0       	ldi	r18, 0x0A	; 10
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
   12300:	61 91       	ld	r22, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
   12302:	30 ed       	ldi	r19, 0xD0	; 208
   12304:	36 0f       	add	r19, r22
_ZN11ArduinoJson9Internals12parseIntegerIhEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
   12306:	3a 30       	cpi	r19, 0x0A	; 10
   12308:	48 f4       	brcc	.+18     	; 0x1231c <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x7a>
   1230a:	82 9f       	mul	r24, r18
   1230c:	60 0d       	add	r22, r0
   1230e:	11 24       	eor	r1, r1
   12310:	86 2f       	mov	r24, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
    result = T(result * 10 + T(*s - '0'));
   12312:	80 53       	subi	r24, 0x30	; 48
   12314:	f5 cf       	rjmp	.-22     	; 0x12300 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x5e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
   12316:	31 96       	adiw	r30, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
   12318:	90 e0       	ldi	r25, 0x00	; 0
   1231a:	f0 cf       	rjmp	.-32     	; 0x122fc <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x5a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
   1231c:	91 11       	cpse	r25, r1
   1231e:	de cf       	rjmp	.-68     	; 0x122dc <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x3a>
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:107
      case JSON_FLOAT:
        return T(content.asFloat);
      default:
        return 0;
    }
  }
   12320:	08 95       	ret
_ZN11ArduinoJson9Internals12parseIntegerIhEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"
   12322:	81 e0       	ldi	r24, 0x01	; 1
   12324:	fd cf       	rjmp	.-6      	; 0x12320 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x7e>

00012326 <mqtt_callback(char*, unsigned char*, unsigned int)>:
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2074
   topic - ukazatel na nazev topicu
   payload - ukazatel na pole prichozich dat
   length - pocet prichozich dat
*/
void mqtt_callback(char* topic, byte * payload, unsigned int length)
{
   12326:	2f 92       	push	r2
   12328:	3f 92       	push	r3
   1232a:	4f 92       	push	r4
   1232c:	5f 92       	push	r5
   1232e:	6f 92       	push	r6
   12330:	7f 92       	push	r7
   12332:	8f 92       	push	r8
   12334:	9f 92       	push	r9
   12336:	af 92       	push	r10
   12338:	bf 92       	push	r11
   1233a:	cf 92       	push	r12
   1233c:	df 92       	push	r13
   1233e:	ef 92       	push	r14
   12340:	ff 92       	push	r15
   12342:	0f 93       	push	r16
   12344:	1f 93       	push	r17
   12346:	cf 93       	push	r28
   12348:	df 93       	push	r29
   1234a:	cd b7       	in	r28, 0x3d	; 61
   1234c:	de b7       	in	r29, 0x3e	; 62
   1234e:	c0 5d       	subi	r28, 0xD0	; 208
   12350:	d1 09       	sbc	r29, r1
   12352:	0f b6       	in	r0, 0x3f	; 63
   12354:	f8 94       	cli
   12356:	de bf       	out	0x3e, r29	; 62
   12358:	0f be       	out	0x3f, r0	; 63
   1235a:	cd bf       	out	0x3d, r28	; 61
   1235c:	4c 01       	movw	r8, r24
   1235e:	8b 01       	movw	r16, r22
   12360:	7a 01       	movw	r14, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2087
  uint8_t id_interval = 0;
  struct_DDS18s20 tds;
  char *pch;
  uint8_t active;

  NTPClient timeClient(udpClient);
   12362:	65 ed       	ldi	r22, 0xD5	; 213
   12364:	7e e0       	ldi	r23, 0x0E	; 14
   12366:	ce 01       	movw	r24, r28
   12368:	01 96       	adiw	r24, 0x01	; 1
   1236a:	0f 94 1e 0c 	call	0x2183c	; 0x2183c <NTPClient::NTPClient(UDP&)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2088
  DateTime ted;
   1236e:	40 e0       	ldi	r20, 0x00	; 0
   12370:	50 e0       	ldi	r21, 0x00	; 0
   12372:	ba 01       	movw	r22, r20
   12374:	ce 01       	movw	r24, r28
   12376:	88 53       	subi	r24, 0x38	; 56
   12378:	9f 4f       	sbci	r25, 0xFF	; 255
   1237a:	0e 94 99 e5 	call	0x1cb32	; 0x1cb32 <DateTime::DateTime(unsigned long)>
   1237e:	e0 ee       	ldi	r30, 0xE0	; 224
   12380:	f9 e0       	ldi	r31, 0x09	; 9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2089
  for (uint8_t j = 0; j < 128; j++) my_payload[j] = 0;
   12382:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2089 (discriminator 2)
   12384:	11 92       	st	Z+, r1
   12386:	8f 5f       	subi	r24, 0xFF	; 255
   12388:	80 38       	cpi	r24, 0x80	; 128
   1238a:	e1 f7       	brne	.-8      	; 0x12384 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2091
  ////
  mqtt_receive_message++; /// inkrementuji promenou celkovy pocet prijatych zprav
   1238c:	80 91 b0 0f 	lds	r24, 0x0FB0	; 0x800fb0 <mqtt_receive_message>
   12390:	90 91 b1 0f 	lds	r25, 0x0FB1	; 0x800fb1 <mqtt_receive_message+0x1>
   12394:	01 96       	adiw	r24, 0x01	; 1
   12396:	90 93 b1 0f 	sts	0x0FB1, r25	; 0x800fb1 <mqtt_receive_message+0x1>
   1239a:	80 93 b0 0f 	sts	0x0FB0, r24	; 0x800fb0 <mqtt_receive_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2092
  strncpy(my_payload, (char*) payload, length);
   1239e:	a7 01       	movw	r20, r14
   123a0:	b8 01       	movw	r22, r16
   123a2:	80 ee       	ldi	r24, 0xE0	; 224
   123a4:	99 e0       	ldi	r25, 0x09	; 9
   123a6:	0f 94 7c 1a 	call	0x234f8	; 0x234f8 <strncpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2095
  ///
  /// kamarad discovery
  strcpy_P(str1, termbig_subscribe);
   123aa:	5e 01       	movw	r10, r28
   123ac:	88 e4       	ldi	r24, 0x48	; 72
   123ae:	a8 0e       	add	r10, r24
   123b0:	b1 1c       	adc	r11, r1
   123b2:	68 e1       	ldi	r22, 0x18	; 24
   123b4:	71 e8       	ldi	r23, 0x81	; 129
   123b6:	c5 01       	movw	r24, r10
   123b8:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2096
  if (strcmp(str1, topic) == 0)
   123bc:	b4 01       	movw	r22, r8
   123be:	c5 01       	movw	r24, r10
   123c0:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
   123c4:	89 2b       	or	r24, r25
   123c6:	71 f4       	brne	.+28     	; 0x123e4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xbe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2098
  {
    mqtt_process_message++; /// inkrementuji promenou celkovy pocet zpracovanych zprav
   123c8:	80 91 ae 0f 	lds	r24, 0x0FAE	; 0x800fae <mqtt_process_message>
   123cc:	90 91 af 0f 	lds	r25, 0x0FAF	; 0x800faf <mqtt_process_message+0x1>
   123d0:	01 96       	adiw	r24, 0x01	; 1
   123d2:	90 93 af 0f 	sts	0x0FAF, r25	; 0x800faf <mqtt_process_message+0x1>
   123d6:	80 93 ae 0f 	sts	0x0FAE, r24	; 0x800fae <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2099
    know_mqtt_create_or_update(my_payload, TYPE_TERMBIG);
   123da:	62 e0       	ldi	r22, 0x02	; 2
   123dc:	80 ee       	ldi	r24, 0xE0	; 224
   123de:	99 e0       	ldi	r25, 0x09	; 9
   123e0:	0e 94 08 b0 	call	0x16010	; 0x16010 <know_mqtt_create_or_update(char*, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2101
  }
  strcpy_P(str1, thermctl_subscribe);
   123e4:	6f e2       	ldi	r22, 0x2F	; 47
   123e6:	71 e8       	ldi	r23, 0x81	; 129
   123e8:	c5 01       	movw	r24, r10
   123ea:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2102
  if (strcmp(str1, topic) == 0)
   123ee:	b4 01       	movw	r22, r8
   123f0:	c5 01       	movw	r24, r10
   123f2:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
   123f6:	89 2b       	or	r24, r25
   123f8:	71 f4       	brne	.+28     	; 0x12416 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2104
  {
    mqtt_process_message++;
   123fa:	80 91 ae 0f 	lds	r24, 0x0FAE	; 0x800fae <mqtt_process_message>
   123fe:	90 91 af 0f 	lds	r25, 0x0FAF	; 0x800faf <mqtt_process_message+0x1>
   12402:	01 96       	adiw	r24, 0x01	; 1
   12404:	90 93 af 0f 	sts	0x0FAF, r25	; 0x800faf <mqtt_process_message+0x1>
   12408:	80 93 ae 0f 	sts	0x0FAE, r24	; 0x800fae <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2105
    know_mqtt_create_or_update(my_payload, TYPE_THERMCTL);
   1240c:	61 e0       	ldi	r22, 0x01	; 1
   1240e:	80 ee       	ldi	r24, 0xE0	; 224
   12410:	99 e0       	ldi	r25, 0x09	; 9
   12412:	0e 94 08 b0 	call	0x16010	; 0x16010 <know_mqtt_create_or_update(char*, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2110
  }
  ///
  /// nastavovani casu
  //// /thermctl-in/global/time/set - nastaveni casu. payload json
  strcpy_P(str1, thermctl_header_in);
   12416:	60 e8       	ldi	r22, 0x80	; 128
   12418:	71 e8       	ldi	r23, 0x81	; 129
   1241a:	c5 01       	movw	r24, r10
   1241c:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2111
  strcat_P(str1, global_time_set);
   12420:	65 eb       	ldi	r22, 0xB5	; 181
   12422:	71 e8       	ldi	r23, 0x81	; 129
   12424:	c5 01       	movw	r24, r10
   12426:	0f 94 17 1a 	call	0x2342e	; 0x2342e <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2112
  if (strcmp(str1, topic) == 0)
   1242a:	b4 01       	movw	r22, r8
   1242c:	c5 01       	movw	r24, r10
   1242e:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
   12432:	89 2b       	or	r24, r25
   12434:	09 f0       	breq	.+2      	; 0x12438 <mqtt_callback(char*, unsigned char*, unsigned int)+0x112>
   12436:	bc c0       	rjmp	.+376    	; 0x125b0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x28a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2114
  {
    mqtt_process_message++;
   12438:	80 91 ae 0f 	lds	r24, 0x0FAE	; 0x800fae <mqtt_process_message>
   1243c:	90 91 af 0f 	lds	r25, 0x0FAF	; 0x800faf <mqtt_process_message+0x1>
   12440:	01 96       	adiw	r24, 0x01	; 1
   12442:	90 93 af 0f 	sts	0x0FAF, r25	; 0x800faf <mqtt_process_message+0x1>
   12446:	80 93 ae 0f 	sts	0x0FAE, r24	; 0x800fae <mqtt_process_message>
_ZN11ArduinoJson9Internals11deserializeINS0_16JsonDeserializerENS_18StaticJsonDocumentILj256EEEcEENS_20DeserializationErrorERT0_PT1_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/deserialize.hpp:49
// TChar* = char*, const char*, const FlashStringHelper*
template <template <typename, typename> class TDeserializer, typename TDocument,
          typename TChar>
DeserializationError deserialize(TDocument &doc, TChar *input) {
  using namespace Internals;
  return makeDeserializer<TDeserializer>(
   1244a:	20 91 86 0b 	lds	r18, 0x0B86	; 0x800b86 <doc>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEEC4ERNS0_10MemoryPoolES3_S5_h():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:27
                   TStringStorage stringStorage, uint8_t nestingLimit)
      : _memoryPool(&memoryPool),
        _reader(reader),
        _stringStorage(stringStorage),
        _nestingLimit(nestingLimit),
        _loaded(false) {}
   1244e:	87 e8       	ldi	r24, 0x87	; 135
   12450:	9b e0       	ldi	r25, 0x0B	; 11
   12452:	c8 57       	subi	r28, 0x78	; 120
   12454:	df 4f       	sbci	r29, 0xFF	; 255
   12456:	99 83       	std	Y+1, r25	; 0x01
   12458:	88 83       	st	Y, r24
   1245a:	c8 58       	subi	r28, 0x88	; 136
   1245c:	d0 40       	sbci	r29, 0x00	; 0
   1245e:	80 ee       	ldi	r24, 0xE0	; 224
   12460:	99 e0       	ldi	r25, 0x09	; 9
   12462:	c6 57       	subi	r28, 0x76	; 118
   12464:	df 4f       	sbci	r29, 0xFF	; 255
   12466:	99 83       	std	Y+1, r25	; 0x01
   12468:	88 83       	st	Y, r24
   1246a:	ca 58       	subi	r28, 0x8A	; 138
   1246c:	d0 40       	sbci	r29, 0x00	; 0
   1246e:	c4 57       	subi	r28, 0x74	; 116
   12470:	df 4f       	sbci	r29, 0xFF	; 255
   12472:	99 83       	std	Y+1, r25	; 0x01
   12474:	88 83       	st	Y, r24
   12476:	cc 58       	subi	r28, 0x8C	; 140
   12478:	d0 40       	sbci	r29, 0x00	; 0
   1247a:	c2 57       	subi	r28, 0x72	; 114
   1247c:	df 4f       	sbci	r29, 0xFF	; 255
   1247e:	28 83       	st	Y, r18
   12480:	ce 58       	subi	r28, 0x8E	; 142
   12482:	d0 40       	sbci	r29, 0x00	; 0
   12484:	c0 57       	subi	r28, 0x70	; 112
   12486:	df 4f       	sbci	r29, 0xFF	; 255
   12488:	18 82       	st	Y, r1
   1248a:	c0 59       	subi	r28, 0x90	; 144
   1248c:	d0 40       	sbci	r29, 0x00	; 0
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5clearEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:66
  }

  // Resets the memoryPool.
  // USE WITH CAUTION: this invalidates all previously allocated data
  void clear() {
    _size = 0;
   1248e:	10 92 8e 0b 	sts	0x0B8E, r1	; 0x800b8e <doc+0x8>
   12492:	10 92 8d 0b 	sts	0x0B8D, r1	; 0x800b8d <doc+0x7>
_ZN11ArduinoJson9Internals15JsonVariantData7setNullEv():
    content.asRaw.data = data;
    content.asRaw.size = size;
  }

  void setNull() {
    type = JSON_NULL;
   12496:	10 92 90 0c 	sts	0x0C90, r1	; 0x800c90 <doc+0x10a>
   1249a:	10 92 8f 0c 	sts	0x0C8F, r1	; 0x800c8f <doc+0x109>
   1249e:	47 e8       	ldi	r20, 0x87	; 135
   124a0:	5b e0       	ldi	r21, 0x0B	; 11
   124a2:	6f e8       	ldi	r22, 0x8F	; 143
   124a4:	7c e0       	ldi	r23, 0x0C	; 12
_ZN11ArduinoJson9Internals11deserializeINS0_16JsonDeserializerENS_18StaticJsonDocumentILj256EEEcEENS_20DeserializationErrorERT0_PT1_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/deserialize.hpp:52
             doc.memoryPool(), makeReader(input),
             makeStringStorage(doc.memoryPool(), input), doc.nestingLimit)
      .parse(doc.template to<JsonVariant>());
   124a6:	ce 01       	movw	r24, r28
   124a8:	88 57       	subi	r24, 0x78	; 120
   124aa:	9f 4f       	sbci	r25, 0xFF	; 255
   124ac:	0e 94 83 90 	call	0x12106	; 0x12106 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>
_ZN11ArduinoJson9Internals15JsonVariantData8asObjectEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:88
  JsonArrayData *asArray() {
    return type == JSON_ARRAY ? &content.asArray : 0;
  }

  JsonObjectData *asObject() {
    return type == JSON_OBJECT ? &content.asObject : 0;
   124b0:	80 91 8f 0c 	lds	r24, 0x0C8F	; 0x800c8f <doc+0x109>
   124b4:	90 91 90 0c 	lds	r25, 0x0C90	; 0x800c90 <doc+0x10a>
   124b8:	71 2c       	mov	r7, r1
   124ba:	61 2c       	mov	r6, r1
   124bc:	09 97       	sbiw	r24, 0x09	; 9
   124be:	21 f4       	brne	.+8      	; 0x124c8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a2>
   124c0:	81 e9       	ldi	r24, 0x91	; 145
   124c2:	68 2e       	mov	r6, r24
   124c4:	8c e0       	ldi	r24, 0x0C	; 12
   124c6:	78 2e       	mov	r7, r24
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    }
    return slot;
  }
  template <typename TStringRef>
  FORCE_INLINE Internals::Slot* findSlot(TStringRef key) const {
    return const_cast<JsonObject*>(this)->findSlot<TStringRef>(key);
   124c8:	69 e4       	ldi	r22, 0x49	; 73
   124ca:	76 e0       	ldi	r23, 0x06	; 6
   124cc:	c3 01       	movw	r24, r6
   124ce:	0e 94 09 52 	call	0xa412	; 0xa412 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]>
   124d2:	2c 01       	movw	r4, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2117
    deserializeJson(doc, my_payload);
    JsonObject root = doc.as<JsonObject>();
    if (root.containsKey("year") && root.containsKey("month") && root.containsKey("month") && root.containsKey("hour") && root.containsKey("minute") && root.containsKey("second"))
   124d4:	89 2b       	or	r24, r25
   124d6:	09 f4       	brne	.+2      	; 0x124da <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b4>
   124d8:	6b c0       	rjmp	.+214    	; 0x125b0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x28a>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
   124da:	6e e4       	ldi	r22, 0x4E	; 78
   124dc:	76 e0       	ldi	r23, 0x06	; 6
   124de:	c3 01       	movw	r24, r6
   124e0:	0e 94 09 52 	call	0xa412	; 0xa412 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]>
   124e4:	7c 01       	movw	r14, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2117
   124e6:	89 2b       	or	r24, r25
   124e8:	09 f4       	brne	.+2      	; 0x124ec <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c6>
   124ea:	62 c0       	rjmp	.+196    	; 0x125b0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x28a>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
   124ec:	64 e5       	ldi	r22, 0x54	; 84
   124ee:	76 e0       	ldi	r23, 0x06	; 6
   124f0:	c3 01       	movw	r24, r6
   124f2:	0e 94 09 52 	call	0xa412	; 0xa412 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]>
   124f6:	1c 01       	movw	r2, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2117
   124f8:	89 2b       	or	r24, r25
   124fa:	09 f4       	brne	.+2      	; 0x124fe <mqtt_callback(char*, unsigned char*, unsigned int)+0x1d8>
   124fc:	59 c0       	rjmp	.+178    	; 0x125b0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x28a>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
   124fe:	69 e5       	ldi	r22, 0x59	; 89
   12500:	76 e0       	ldi	r23, 0x06	; 6
   12502:	c3 01       	movw	r24, r6
   12504:	0e 94 09 52 	call	0xa412	; 0xa412 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]>
   12508:	8c 01       	movw	r16, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2117
   1250a:	89 2b       	or	r24, r25
   1250c:	09 f4       	brne	.+2      	; 0x12510 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ea>
   1250e:	50 c0       	rjmp	.+160    	; 0x125b0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x28a>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
   12510:	60 e6       	ldi	r22, 0x60	; 96
   12512:	76 e0       	ldi	r23, 0x06	; 6
   12514:	c3 01       	movw	r24, r6
   12516:	0e 94 09 52 	call	0xa412	; 0xa412 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2117
   1251a:	00 97       	sbiw	r24, 0x00	; 0
   1251c:	09 f4       	brne	.+2      	; 0x12520 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1fa>
   1251e:	48 c0       	rjmp	.+144    	; 0x125b0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x28a>
_ZNK11ArduinoJson11JsonVariant2asIhEEKNS_9Internals9enable_ifIXsrNS2_11is_integralIT_EE5valueES5_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:182
  // unsigned long as<unsigned long>() const;
  template <typename T>
  FORCE_INLINE const typename Internals::enable_if<
      Internals::is_integral<T>::value, T>::type
  as() const {
    return _data ? _data->asInteger<T>() : T();
   12520:	0e 94 51 91 	call	0x122a2	; 0x122a2 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
   12524:	c8 2e       	mov	r12, r24
   12526:	c8 01       	movw	r24, r16
   12528:	0e 94 51 91 	call	0x122a2	; 0x122a2 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
   1252c:	d8 2e       	mov	r13, r24
   1252e:	c1 01       	movw	r24, r2
   12530:	0e 94 51 91 	call	0x122a2	; 0x122a2 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
   12534:	08 2f       	mov	r16, r24
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
   12536:	67 e6       	ldi	r22, 0x67	; 103
   12538:	76 e0       	ldi	r23, 0x06	; 6
   1253a:	c3 01       	movw	r24, r6
   1253c:	0e 94 09 52 	call	0xa412	; 0xa412 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]>
_ZNK11ArduinoJson10JsonObject8get_implIPKchEENS_9Internals13JsonVariantAsIT0_E4typeET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:312

  template <typename TStringRef, typename TValue>
  FORCE_INLINE typename Internals::JsonVariantAs<TValue>::type get_impl(
      TStringRef key) const {
    Internals::Slot* slot = findSlot<TStringRef>(key);
    return slot ? JsonVariant(_memoryPool, &slot->value).as<TValue>()
   12540:	10 e0       	ldi	r17, 0x00	; 0
   12542:	00 97       	sbiw	r24, 0x00	; 0
   12544:	19 f0       	breq	.+6      	; 0x1254c <mqtt_callback(char*, unsigned char*, unsigned int)+0x226>
_ZNK11ArduinoJson11JsonVariant2asIhEEKNS_9Internals9enable_ifIXsrNS2_11is_integralIT_EE5valueES5_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:182
   12546:	0e 94 51 91 	call	0x122a2	; 0x122a2 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
   1254a:	18 2f       	mov	r17, r24
   1254c:	c7 01       	movw	r24, r14
   1254e:	0e 94 51 91 	call	0x122a2	; 0x122a2 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
   12552:	f8 2e       	mov	r15, r24
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIjEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
  }

  template <typename T>
  T asInteger() const {
    switch (type) {
   12554:	d2 01       	movw	r26, r4
   12556:	8d 91       	ld	r24, X+
   12558:	9c 91       	ld	r25, X
   1255a:	11 97       	sbiw	r26, 0x01	; 1
   1255c:	87 30       	cpi	r24, 0x07	; 7
   1255e:	91 05       	cpc	r25, r1
   12560:	48 f4       	brcc	.+18     	; 0x12574 <mqtt_callback(char*, unsigned char*, unsigned int)+0x24e>
   12562:	85 30       	cpi	r24, 0x05	; 5
   12564:	91 05       	cpc	r25, r1
   12566:	a0 f4       	brcc	.+40     	; 0x12590 <mqtt_callback(char*, unsigned char*, unsigned int)+0x26a>
   12568:	03 97       	sbiw	r24, 0x03	; 3
   1256a:	08 f0       	brcs	.+2      	; 0x1256e <mqtt_callback(char*, unsigned char*, unsigned int)+0x248>
   1256c:	ea c0       	rjmp	.+468    	; 0x12742 <mqtt_callback(char*, unsigned char*, unsigned int)+0x41c>
_ZN11ArduinoJson9Internals12parseIntegerIjEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
   1256e:	70 e0       	ldi	r23, 0x00	; 0
   12570:	60 e0       	ldi	r22, 0x00	; 0
   12572:	11 c0       	rjmp	.+34     	; 0x12596 <mqtt_callback(char*, unsigned char*, unsigned int)+0x270>
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIjEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
   12574:	87 30       	cpi	r24, 0x07	; 7
   12576:	91 05       	cpc	r25, r1
   12578:	09 f4       	brne	.+2      	; 0x1257c <mqtt_callback(char*, unsigned char*, unsigned int)+0x256>
   1257a:	dc c0       	rjmp	.+440    	; 0x12734 <mqtt_callback(char*, unsigned char*, unsigned int)+0x40e>
   1257c:	0a 97       	sbiw	r24, 0x0a	; 10
   1257e:	b9 f7       	brne	.-18     	; 0x1256e <mqtt_callback(char*, unsigned char*, unsigned int)+0x248>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:103
        return T(~content.asInteger + 1);
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
      case JSON_FLOAT:
        return T(content.asFloat);
   12580:	f2 01       	movw	r30, r4
   12582:	62 81       	ldd	r22, Z+2	; 0x02
   12584:	73 81       	ldd	r23, Z+3	; 0x03
   12586:	84 81       	ldd	r24, Z+4	; 0x04
   12588:	95 81       	ldd	r25, Z+5	; 0x05
   1258a:	0f 94 c6 14 	call	0x2298c	; 0x2298c <__fixunssfsi>
   1258e:	03 c0       	rjmp	.+6      	; 0x12596 <mqtt_callback(char*, unsigned char*, unsigned int)+0x270>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:96
  template <typename T>
  T asInteger() const {
    switch (type) {
      case JSON_POSITIVE_INTEGER:
      case JSON_BOOLEAN:
        return T(content.asInteger);
   12590:	f2 01       	movw	r30, r4
   12592:	62 81       	ldd	r22, Z+2	; 0x02
   12594:	73 81       	ldd	r23, Z+3	; 0x03
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2118
      rtc.adjust(DateTime(root["year"], root["month"], root["day"], root["hour"], root["minute"], root["second"]));
   12596:	ed 2c       	mov	r14, r13
   12598:	21 2f       	mov	r18, r17
   1259a:	4f 2d       	mov	r20, r15
   1259c:	ce 01       	movw	r24, r28
   1259e:	88 57       	subi	r24, 0x78	; 120
   125a0:	9f 4f       	sbci	r25, 0xFF	; 255
   125a2:	0e 94 16 e6 	call	0x1cc2c	; 0x1cc2c <DateTime::DateTime(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
   125a6:	ce 01       	movw	r24, r28
   125a8:	88 57       	subi	r24, 0x78	; 120
   125aa:	9f 4f       	sbci	r25, 0xFF	; 255
   125ac:	0e 94 e7 e6 	call	0x1cdce	; 0x1cdce <RTC_DS1307::adjust(DateTime const&)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2121
  }
  //// /thermctl-in/global/time/ntp - jednorazova aktualizace casu z ntp serveru
  strcpy_P(str1, thermctl_header_in);
   125b0:	60 e8       	ldi	r22, 0x80	; 128
   125b2:	71 e8       	ldi	r23, 0x81	; 129
   125b4:	c5 01       	movw	r24, r10
   125b6:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2122
  strcat_P(str1, global_time_ntp);
   125ba:	65 ea       	ldi	r22, 0xA5	; 165
   125bc:	71 e8       	ldi	r23, 0x81	; 129
   125be:	c5 01       	movw	r24, r10
   125c0:	0f 94 17 1a 	call	0x2342e	; 0x2342e <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2123
  if (strcmp(str1, topic) == 0)
   125c4:	b4 01       	movw	r22, r8
   125c6:	c5 01       	movw	r24, r10
   125c8:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
   125cc:	89 2b       	or	r24, r25
   125ce:	d1 f4       	brne	.+52     	; 0x12604 <mqtt_callback(char*, unsigned char*, unsigned int)+0x2de>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2125
  {
    mqtt_process_message++;
   125d0:	80 91 ae 0f 	lds	r24, 0x0FAE	; 0x800fae <mqtt_process_message>
   125d4:	90 91 af 0f 	lds	r25, 0x0FAF	; 0x800faf <mqtt_process_message+0x1>
   125d8:	01 96       	adiw	r24, 0x01	; 1
   125da:	90 93 af 0f 	sts	0x0FAF, r25	; 0x800faf <mqtt_process_message+0x1>
   125de:	80 93 ae 0f 	sts	0x0FAE, r24	; 0x800fae <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2126
    if (ntp_update(&timeClient, &rtc, time_get_offset(), &ted) == 1)
   125e2:	0e 94 8f 6f 	call	0xdf1e	; 0xdf1e <time_get_offset()>
   125e6:	9e 01       	movw	r18, r28
   125e8:	28 53       	subi	r18, 0x38	; 56
   125ea:	3f 4f       	sbci	r19, 0xFF	; 255
   125ec:	48 2f       	mov	r20, r24
   125ee:	6c e1       	ldi	r22, 0x1C	; 28
   125f0:	7f e0       	ldi	r23, 0x0F	; 15
   125f2:	ce 01       	movw	r24, r28
   125f4:	01 96       	adiw	r24, 0x01	; 1
   125f6:	0e 94 09 b0 	call	0x16012	; 0x16012 <ntp_update(NTPClient*, RTC_DS1307*, unsigned char, DateTime*)>
   125fa:	81 30       	cpi	r24, 0x01	; 1
   125fc:	09 f0       	breq	.+2      	; 0x12600 <mqtt_callback(char*, unsigned char*, unsigned int)+0x2da>
   125fe:	ce c0       	rjmp	.+412    	; 0x1279c <mqtt_callback(char*, unsigned char*, unsigned int)+0x476>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2127
      selftest_clear_0(SELFTEST_ERR_NTP);
   12600:	0e 94 67 6f 	call	0xdece	; 0xdece <selftest_clear_0(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2132
    else
      selftest_set_0(SELFTEST_ERR_NTP);
  }
  //// /termbig-in/global/time/offset - nastaveni offsetu casu
  strcpy_P(str1, thermctl_header_in);
   12604:	60 e8       	ldi	r22, 0x80	; 128
   12606:	71 e8       	ldi	r23, 0x81	; 129
   12608:	c5 01       	movw	r24, r10
   1260a:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2133
  strcat_P(str1, global_time_offset);
   1260e:	6e e8       	ldi	r22, 0x8E	; 142
   12610:	71 e8       	ldi	r23, 0x81	; 129
   12612:	c5 01       	movw	r24, r10
   12614:	0f 94 17 1a 	call	0x2342e	; 0x2342e <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2134
  if (strcmp(str1, topic) == 0)
   12618:	b4 01       	movw	r22, r8
   1261a:	c5 01       	movw	r24, r10
   1261c:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
   12620:	89 2b       	or	r24, r25
   12622:	79 f4       	brne	.+30     	; 0x12642 <mqtt_callback(char*, unsigned char*, unsigned int)+0x31c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2136
  {
    mqtt_process_message++;
   12624:	80 91 ae 0f 	lds	r24, 0x0FAE	; 0x800fae <mqtt_process_message>
   12628:	90 91 af 0f 	lds	r25, 0x0FAF	; 0x800faf <mqtt_process_message+0x1>
   1262c:	01 96       	adiw	r24, 0x01	; 1
   1262e:	90 93 af 0f 	sts	0x0FAF, r25	; 0x800faf <mqtt_process_message+0x1>
   12632:	80 93 ae 0f 	sts	0x0FAE, r24	; 0x800fae <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2137
    time_set_offset(atoi(my_payload));
   12636:	80 ee       	ldi	r24, 0xE0	; 224
   12638:	99 e0       	ldi	r25, 0x09	; 9
   1263a:	0f 94 f0 19 	call	0x233e0	; 0x233e0 <atoi>
   1263e:	0e 94 13 72 	call	0xe426	; 0xe426 <time_set_offset(signed char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2141
  }
  /// nastavovani vlastnosti TDS
  //// /thermctl-in/XXXX/tds/associate - asociace do tds si pridam mac 1wire - odpoved je pod jakem ID to mam ulozeno
  strcpy_P(str1, thermctl_header_in);
   12642:	60 e8       	ldi	r22, 0x80	; 128
   12644:	71 e8       	ldi	r23, 0x81	; 129
   12646:	c5 01       	movw	r24, r10
   12648:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2142
  strcat(str1, device.nazev);
   1264c:	6c ec       	ldi	r22, 0xCC	; 204
   1264e:	7f e0       	ldi	r23, 0x0F	; 15
   12650:	c5 01       	movw	r24, r10
   12652:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2143
  strcat(str1, "/tds/associate");
   12656:	6b e6       	ldi	r22, 0x6B	; 107
   12658:	76 e0       	ldi	r23, 0x06	; 6
   1265a:	c5 01       	movw	r24, r10
   1265c:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2144
  if (strcmp(str1, topic) == 0)
   12660:	b4 01       	movw	r22, r8
   12662:	c5 01       	movw	r24, r10
   12664:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2081
  char tmp1[32];
  char tmp2[32];
  static char my_payload[128];
  boolean ret = 0;
  uint8_t cnt = 0;
  uint8_t id = 0;
   12668:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2144
  /// nastavovani vlastnosti TDS
  //// /thermctl-in/XXXX/tds/associate - asociace do tds si pridam mac 1wire - odpoved je pod jakem ID to mam ulozeno
  strcpy_P(str1, thermctl_header_in);
  strcat(str1, device.nazev);
  strcat(str1, "/tds/associate");
  if (strcmp(str1, topic) == 0)
   1266a:	89 2b       	or	r24, r25
   1266c:	c1 f4       	brne	.+48     	; 0x1269e <mqtt_callback(char*, unsigned char*, unsigned int)+0x378>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2146
  {
    mqtt_process_message++;
   1266e:	80 91 ae 0f 	lds	r24, 0x0FAE	; 0x800fae <mqtt_process_message>
   12672:	90 91 af 0f 	lds	r25, 0x0FAF	; 0x800faf <mqtt_process_message+0x1>
   12676:	01 96       	adiw	r24, 0x01	; 1
   12678:	90 93 af 0f 	sts	0x0FAF, r25	; 0x800faf <mqtt_process_message+0x1>
   1267c:	80 93 ae 0f 	sts	0x0FAE, r24	; 0x800fae <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2147
    id = atoi(my_payload);
   12680:	80 ee       	ldi	r24, 0xE0	; 224
   12682:	99 e0       	ldi	r25, 0x09	; 9
   12684:	0f 94 f0 19 	call	0x233e0	; 0x233e0 <atoi>
   12688:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2148
    if (tds_associate(id) == 255)
   1268a:	0e 94 ab b4 	call	0x16956	; 0x16956 <tds_associate(unsigned char)>
   1268e:	8f 3f       	cpi	r24, 0xFF	; 255
   12690:	31 f4       	brne	.+12     	; 0x1269e <mqtt_callback(char*, unsigned char*, unsigned int)+0x378>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2149
      log_error(&mqtt_client, "E");
   12692:	6b e6       	ldi	r22, 0x6B	; 107
   12694:	78 e0       	ldi	r23, 0x08	; 8
   12696:	8c ea       	ldi	r24, 0xAC	; 172
   12698:	9e e0       	ldi	r25, 0x0E	; 14
   1269a:	0e 94 c0 b0 	call	0x16180	; 0x16180 <log_error(PubSubClient*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2155
  }
  ///
  //// /thermctl-in/XXXX/tds/set/IDcko/name - nastavi cidlu nazev
  //// /thermctl-in/XXXX/tds/set/IDcko/offset
  //// /thermctl-in/XXXX/tds/set/IDcko/period
  strcpy_P(str1, thermctl_header_in);
   1269e:	60 e8       	ldi	r22, 0x80	; 128
   126a0:	71 e8       	ldi	r23, 0x81	; 129
   126a2:	c5 01       	movw	r24, r10
   126a4:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2156
  strcat(str1, device.nazev);
   126a8:	6c ec       	ldi	r22, 0xCC	; 204
   126aa:	7f e0       	ldi	r23, 0x0F	; 15
   126ac:	c5 01       	movw	r24, r10
   126ae:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2157
  strcat(str1, "/tds/set/");
   126b2:	6a e7       	ldi	r22, 0x7A	; 122
   126b4:	76 e0       	ldi	r23, 0x06	; 6
   126b6:	c5 01       	movw	r24, r10
   126b8:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2158
  if (strncmp(str1, topic, strlen(str1)) == 0)
   126bc:	f5 01       	movw	r30, r10
   126be:	01 90       	ld	r0, Z+
   126c0:	00 20       	and	r0, r0
   126c2:	e9 f7       	brne	.-6      	; 0x126be <mqtt_callback(char*, unsigned char*, unsigned int)+0x398>
   126c4:	31 97       	sbiw	r30, 0x01	; 1
   126c6:	af 01       	movw	r20, r30
   126c8:	4a 19       	sub	r20, r10
   126ca:	5b 09       	sbc	r21, r11
   126cc:	b4 01       	movw	r22, r8
   126ce:	c5 01       	movw	r24, r10
   126d0:	0f 94 6e 1a 	call	0x234dc	; 0x234dc <strncmp>
   126d4:	89 2b       	or	r24, r25
   126d6:	09 f0       	breq	.+2      	; 0x126da <mqtt_callback(char*, unsigned char*, unsigned int)+0x3b4>
   126d8:	b6 c0       	rjmp	.+364    	; 0x12846 <mqtt_callback(char*, unsigned char*, unsigned int)+0x520>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2160
  {
    mqtt_process_message++;
   126da:	80 91 ae 0f 	lds	r24, 0x0FAE	; 0x800fae <mqtt_process_message>
   126de:	90 91 af 0f 	lds	r25, 0x0FAF	; 0x800faf <mqtt_process_message+0x1>
   126e2:	01 96       	adiw	r24, 0x01	; 1
   126e4:	90 93 af 0f 	sts	0x0FAF, r25	; 0x800faf <mqtt_process_message+0x1>
   126e8:	80 93 ae 0f 	sts	0x0FAE, r24	; 0x800fae <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2162
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   126ec:	f5 01       	movw	r30, r10
   126ee:	01 90       	ld	r0, Z+
   126f0:	00 20       	and	r0, r0
   126f2:	e9 f7       	brne	.-6      	; 0x126ee <mqtt_callback(char*, unsigned char*, unsigned int)+0x3c8>
   126f4:	31 97       	sbiw	r30, 0x01	; 1
   126f6:	ea 19       	sub	r30, r10
   126f8:	fb 09       	sbc	r31, r11
   126fa:	9e 2f       	mov	r25, r30
   126fc:	4e 2f       	mov	r20, r30
   126fe:	84 2f       	mov	r24, r20
   12700:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2162 (discriminator 3)
   12702:	24 2f       	mov	r18, r20
   12704:	30 e0       	ldi	r19, 0x00	; 0
   12706:	d4 01       	movw	r26, r8
   12708:	0d 90       	ld	r0, X+
   1270a:	00 20       	and	r0, r0
   1270c:	e9 f7       	brne	.-6      	; 0x12708 <mqtt_callback(char*, unsigned char*, unsigned int)+0x3e2>
   1270e:	11 97       	sbiw	r26, 0x01	; 1
   12710:	a8 19       	sub	r26, r8
   12712:	b9 09       	sbc	r27, r9
   12714:	2a 17       	cp	r18, r26
   12716:	3b 07       	cpc	r19, r27
   12718:	08 f0       	brcs	.+2      	; 0x1271c <mqtt_callback(char*, unsigned char*, unsigned int)+0x3f6>
   1271a:	44 c0       	rjmp	.+136    	; 0x127a4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x47e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2164 (discriminator 2)
    {
      str1[cnt] = topic[f];
   1271c:	d5 01       	movw	r26, r10
   1271e:	a8 0f       	add	r26, r24
   12720:	b1 1d       	adc	r27, r1
   12722:	28 0d       	add	r18, r8
   12724:	39 1d       	adc	r19, r9
   12726:	f9 01       	movw	r30, r18
   12728:	80 81       	ld	r24, Z
   1272a:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2165 (discriminator 2)
      str1[cnt + 1] = 0;
   1272c:	11 96       	adiw	r26, 0x01	; 1
   1272e:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2162 (discriminator 2)
  strcat(str1, "/tds/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   12730:	4f 5f       	subi	r20, 0xFF	; 255
   12732:	e5 cf       	rjmp	.-54     	; 0x126fe <mqtt_callback(char*, unsigned char*, unsigned int)+0x3d8>
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIjEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:98
      case JSON_NEGATIVE_INTEGER:
        return T(~content.asInteger + 1);
   12734:	12 96       	adiw	r26, 0x02	; 2
   12736:	6d 91       	ld	r22, X+
   12738:	7c 91       	ld	r23, X
_ZN11ArduinoJson9Internals12parseIntegerIjEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
   1273a:	71 95       	neg	r23
   1273c:	61 95       	neg	r22
   1273e:	71 09       	sbc	r23, r1
   12740:	2a cf       	rjmp	.-428    	; 0x12596 <mqtt_callback(char*, unsigned char*, unsigned int)+0x270>
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIjEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:101
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
   12742:	12 96       	adiw	r26, 0x02	; 2
   12744:	ed 91       	ld	r30, X+
   12746:	fc 91       	ld	r31, X
_ZN11ArduinoJson9Internals12parseIntegerIjEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
   12748:	30 97       	sbiw	r30, 0x00	; 0
   1274a:	09 f4       	brne	.+2      	; 0x1274e <mqtt_callback(char*, unsigned char*, unsigned int)+0x428>
   1274c:	10 cf       	rjmp	.-480    	; 0x1256e <mqtt_callback(char*, unsigned char*, unsigned int)+0x248>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18

  if (*s == 't') return 1;  // "true"
   1274e:	80 81       	ld	r24, Z
   12750:	61 e0       	ldi	r22, 0x01	; 1
   12752:	70 e0       	ldi	r23, 0x00	; 0
   12754:	84 37       	cpi	r24, 0x74	; 116
   12756:	09 f4       	brne	.+2      	; 0x1275a <mqtt_callback(char*, unsigned char*, unsigned int)+0x434>
   12758:	1e cf       	rjmp	.-452    	; 0x12596 <mqtt_callback(char*, unsigned char*, unsigned int)+0x270>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  T result = 0;
  bool negative_result = false;

  switch (*s) {
   1275a:	8b 32       	cpi	r24, 0x2B	; 43
   1275c:	c9 f0       	breq	.+50     	; 0x12790 <mqtt_callback(char*, unsigned char*, unsigned int)+0x46a>
   1275e:	8d 32       	cpi	r24, 0x2D	; 45
   12760:	c1 f4       	brne	.+48     	; 0x12792 <mqtt_callback(char*, unsigned char*, unsigned int)+0x46c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:26
    case '-':
      negative_result = true;
      s++;
   12762:	31 96       	adiw	r30, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:25
  T result = 0;
  bool negative_result = false;

  switch (*s) {
    case '-':
      negative_result = true;
   12764:	81 e0       	ldi	r24, 0x01	; 1
   12766:	70 e0       	ldi	r23, 0x00	; 0
   12768:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
      s++;
      break;
  }

  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
   1276a:	4a e0       	ldi	r20, 0x0A	; 10
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
   1276c:	91 91       	ld	r25, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
   1276e:	20 ed       	ldi	r18, 0xD0	; 208
   12770:	29 0f       	add	r18, r25
_ZN11ArduinoJson9Internals12parseIntegerIjEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
   12772:	2a 30       	cpi	r18, 0x0A	; 10
   12774:	80 f4       	brcc	.+32     	; 0x12796 <mqtt_callback(char*, unsigned char*, unsigned int)+0x470>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
    result = T(result * 10 + T(*s - '0'));
   12776:	46 9f       	mul	r20, r22
   12778:	90 01       	movw	r18, r0
   1277a:	47 9f       	mul	r20, r23
   1277c:	30 0d       	add	r19, r0
   1277e:	11 24       	eor	r1, r1
   12780:	b9 01       	movw	r22, r18
   12782:	60 53       	subi	r22, 0x30	; 48
   12784:	71 09       	sbc	r23, r1
   12786:	69 0f       	add	r22, r25
   12788:	71 1d       	adc	r23, r1
   1278a:	97 fd       	sbrc	r25, 7
   1278c:	7a 95       	dec	r23
   1278e:	ee cf       	rjmp	.-36     	; 0x1276c <mqtt_callback(char*, unsigned char*, unsigned int)+0x446>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
   12790:	31 96       	adiw	r30, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
   12792:	80 e0       	ldi	r24, 0x00	; 0
   12794:	e8 cf       	rjmp	.-48     	; 0x12766 <mqtt_callback(char*, unsigned char*, unsigned int)+0x440>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
   12796:	81 11       	cpse	r24, r1
   12798:	d0 cf       	rjmp	.-96     	; 0x1273a <mqtt_callback(char*, unsigned char*, unsigned int)+0x414>
   1279a:	fd ce       	rjmp	.-518    	; 0x12596 <mqtt_callback(char*, unsigned char*, unsigned int)+0x270>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2129
  {
    mqtt_process_message++;
    if (ntp_update(&timeClient, &rtc, time_get_offset(), &ted) == 1)
      selftest_clear_0(SELFTEST_ERR_NTP);
    else
      selftest_set_0(SELFTEST_ERR_NTP);
   1279c:	81 e0       	ldi	r24, 0x01	; 1
   1279e:	0e 94 f1 6d 	call	0xdbe2	; 0xdbe2 <selftest_set_0(unsigned char)>
   127a2:	30 cf       	rjmp	.-416    	; 0x12604 <mqtt_callback(char*, unsigned char*, unsigned int)+0x2de>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2169
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
   127a4:	63 e4       	ldi	r22, 0x43	; 67
   127a6:	77 e0       	ldi	r23, 0x07	; 7
   127a8:	c5 01       	movw	r24, r10
   127aa:	0f 94 29 1a 	call	0x23452	; 0x23452 <strtok>
   127ae:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2168
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
   127b0:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2170
    pch = strtok (str1, "/");
    while (pch != NULL)
   127b2:	e1 14       	cp	r14, r1
   127b4:	f1 04       	cpc	r15, r1
   127b6:	09 f4       	brne	.+2      	; 0x127ba <mqtt_callback(char*, unsigned char*, unsigned int)+0x494>
   127b8:	46 c0       	rjmp	.+140    	; 0x12846 <mqtt_callback(char*, unsigned char*, unsigned int)+0x520>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2172
    {
      if (cnt == 0) id = atoi(pch);
   127ba:	01 11       	cpse	r16, r1
   127bc:	0d c0       	rjmp	.+26     	; 0x127d8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x4b2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2172 (discriminator 1)
   127be:	c7 01       	movw	r24, r14
   127c0:	0f 94 f0 19 	call	0x233e0	; 0x233e0 <atoi>
   127c4:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2173 (discriminator 1)
      if (id < HW_ONEWIRE_MAXROMS)
   127c6:	86 30       	cpi	r24, 0x06	; 6
   127c8:	a8 f1       	brcs	.+106    	; 0x12834 <mqtt_callback(char*, unsigned char*, unsigned int)+0x50e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2181
        if ((cnt == 1) && (strcmp(pch, "offset") == 0)) tds_set_offset(id, atoi(my_payload));
        if ((cnt == 1) && (strcmp(pch, "period") == 0)) tds_set_period(id, atoi(my_payload));
      }
      else
      {
        log_error(&mqtt_client, "E");
   127ca:	6b e6       	ldi	r22, 0x6B	; 107
   127cc:	78 e0       	ldi	r23, 0x08	; 8
   127ce:	8c ea       	ldi	r24, 0xAC	; 172
   127d0:	9e e0       	ldi	r25, 0x0E	; 14
   127d2:	0e 94 c0 b0 	call	0x16180	; 0x16180 <log_error(PubSubClient*, char*)>
   127d6:	2e c0       	rjmp	.+92     	; 0x12834 <mqtt_callback(char*, unsigned char*, unsigned int)+0x50e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2173
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < HW_ONEWIRE_MAXROMS)
   127d8:	16 30       	cpi	r17, 0x06	; 6
   127da:	b8 f7       	brcc	.-18     	; 0x127ca <mqtt_callback(char*, unsigned char*, unsigned int)+0x4a4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2175
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0)) tds_set_name(id, my_payload);
   127dc:	01 30       	cpi	r16, 0x01	; 1
   127de:	51 f5       	brne	.+84     	; 0x12834 <mqtt_callback(char*, unsigned char*, unsigned int)+0x50e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2175 (discriminator 1)
   127e0:	6a ec       	ldi	r22, 0xCA	; 202
   127e2:	73 e0       	ldi	r23, 0x03	; 3
   127e4:	c7 01       	movw	r24, r14
   127e6:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
   127ea:	89 2b       	or	r24, r25
   127ec:	29 f4       	brne	.+10     	; 0x127f8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x4d2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2175 (discriminator 2)
   127ee:	60 ee       	ldi	r22, 0xE0	; 224
   127f0:	79 e0       	ldi	r23, 0x09	; 9
   127f2:	81 2f       	mov	r24, r17
   127f4:	0e 94 29 b3 	call	0x16652	; 0x16652 <tds_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2176
        if ((cnt == 1) && (strcmp(pch, "offset") == 0)) tds_set_offset(id, atoi(my_payload));
   127f8:	6f e2       	ldi	r22, 0x2F	; 47
   127fa:	75 e0       	ldi	r23, 0x05	; 5
   127fc:	c7 01       	movw	r24, r14
   127fe:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
   12802:	89 2b       	or	r24, r25
   12804:	41 f4       	brne	.+16     	; 0x12816 <mqtt_callback(char*, unsigned char*, unsigned int)+0x4f0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2176 (discriminator 2)
   12806:	80 ee       	ldi	r24, 0xE0	; 224
   12808:	99 e0       	ldi	r25, 0x09	; 9
   1280a:	0f 94 f0 19 	call	0x233e0	; 0x233e0 <atoi>
   1280e:	bc 01       	movw	r22, r24
   12810:	81 2f       	mov	r24, r17
   12812:	0e 94 54 b3 	call	0x166a8	; 0x166a8 <tds_set_offset(unsigned char, int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2177
        if ((cnt == 1) && (strcmp(pch, "period") == 0)) tds_set_period(id, atoi(my_payload));
   12816:	66 ed       	ldi	r22, 0xD6	; 214
   12818:	73 e0       	ldi	r23, 0x03	; 3
   1281a:	c7 01       	movw	r24, r14
   1281c:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
   12820:	89 2b       	or	r24, r25
   12822:	41 f4       	brne	.+16     	; 0x12834 <mqtt_callback(char*, unsigned char*, unsigned int)+0x50e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2177 (discriminator 2)
   12824:	80 ee       	ldi	r24, 0xE0	; 224
   12826:	99 e0       	ldi	r25, 0x09	; 9
   12828:	0f 94 f0 19 	call	0x233e0	; 0x233e0 <atoi>
   1282c:	68 2f       	mov	r22, r24
   1282e:	81 2f       	mov	r24, r17
   12830:	0e 94 96 b3 	call	0x1672c	; 0x1672c <tds_set_period(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2183
      }
      else
      {
        log_error(&mqtt_client, "E");
      }
      pch = strtok (NULL, "/");
   12834:	63 e4       	ldi	r22, 0x43	; 67
   12836:	77 e0       	ldi	r23, 0x07	; 7
   12838:	90 e0       	ldi	r25, 0x00	; 0
   1283a:	80 e0       	ldi	r24, 0x00	; 0
   1283c:	0f 94 29 1a 	call	0x23452	; 0x23452 <strtok>
   12840:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2184
      cnt++;
   12842:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2170
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
   12844:	b6 cf       	rjmp	.-148    	; 0x127b2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x48c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2189
      cnt++;
    }
  }
  ////
  //// /thermctl-in/XXXX/tds/clear
  strcpy_P(str1, thermctl_header_in);
   12846:	60 e8       	ldi	r22, 0x80	; 128
   12848:	71 e8       	ldi	r23, 0x81	; 129
   1284a:	c5 01       	movw	r24, r10
   1284c:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2190
  strcat(str1, device.nazev);
   12850:	6c ec       	ldi	r22, 0xCC	; 204
   12852:	7f e0       	ldi	r23, 0x0F	; 15
   12854:	c5 01       	movw	r24, r10
   12856:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2191
  strcat(str1, "/tds/clear");
   1285a:	64 e8       	ldi	r22, 0x84	; 132
   1285c:	76 e0       	ldi	r23, 0x06	; 6
   1285e:	c5 01       	movw	r24, r10
   12860:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2192
  if (strncmp(str1, topic, strlen(str1)) == 0)
   12864:	f5 01       	movw	r30, r10
   12866:	01 90       	ld	r0, Z+
   12868:	00 20       	and	r0, r0
   1286a:	e9 f7       	brne	.-6      	; 0x12866 <mqtt_callback(char*, unsigned char*, unsigned int)+0x540>
   1286c:	31 97       	sbiw	r30, 0x01	; 1
   1286e:	af 01       	movw	r20, r30
   12870:	4a 19       	sub	r20, r10
   12872:	5b 09       	sbc	r21, r11
   12874:	b4 01       	movw	r22, r8
   12876:	c5 01       	movw	r24, r10
   12878:	0f 94 6e 1a 	call	0x234dc	; 0x234dc <strncmp>
   1287c:	89 2b       	or	r24, r25
   1287e:	99 f4       	brne	.+38     	; 0x128a6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x580>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2194
  {
    mqtt_process_message++;
   12880:	80 91 ae 0f 	lds	r24, 0x0FAE	; 0x800fae <mqtt_process_message>
   12884:	90 91 af 0f 	lds	r25, 0x0FAF	; 0x800faf <mqtt_process_message+0x1>
   12888:	01 96       	adiw	r24, 0x01	; 1
   1288a:	90 93 af 0f 	sts	0x0FAF, r25	; 0x800faf <mqtt_process_message+0x1>
   1288e:	80 93 ae 0f 	sts	0x0FAE, r24	; 0x800fae <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2195
    id = atoi(my_payload);
   12892:	80 ee       	ldi	r24, 0xE0	; 224
   12894:	99 e0       	ldi	r25, 0x09	; 9
   12896:	0f 94 f0 19 	call	0x233e0	; 0x233e0 <atoi>
   1289a:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2196
    if (id < HW_ONEWIRE_MAXROMS)
   1289c:	86 30       	cpi	r24, 0x06	; 6
   1289e:	08 f0       	brcs	.+2      	; 0x128a2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x57c>
   128a0:	83 c0       	rjmp	.+262    	; 0x129a8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x682>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2197
      tds_set_clear(id);
   128a2:	0e 94 30 b4 	call	0x16860	; 0x16860 <tds_set_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2206
  ////////
  ////////
  /// nastavovani vlastnosti RTDS ///
  ///
  //// thermctl-in/XXXXX/rtds-control/register - registruje nove vzdalene cidlo
  strcpy_P(str1, thermctl_header_in);
   128a6:	60 e8       	ldi	r22, 0x80	; 128
   128a8:	71 e8       	ldi	r23, 0x81	; 129
   128aa:	c5 01       	movw	r24, r10
   128ac:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2207
  strcat(str1, device.nazev);
   128b0:	6c ec       	ldi	r22, 0xCC	; 204
   128b2:	7f e0       	ldi	r23, 0x0F	; 15
   128b4:	c5 01       	movw	r24, r10
   128b6:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2208
  strcat(str1, "/rtds-control/register");
   128ba:	6f e8       	ldi	r22, 0x8F	; 143
   128bc:	76 e0       	ldi	r23, 0x06	; 6
   128be:	c5 01       	movw	r24, r10
   128c0:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2209
  if (strncmp(str1, topic, strlen(str1)) == 0)
   128c4:	f5 01       	movw	r30, r10
   128c6:	01 90       	ld	r0, Z+
   128c8:	00 20       	and	r0, r0
   128ca:	e9 f7       	brne	.-6      	; 0x128c6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5a0>
   128cc:	31 97       	sbiw	r30, 0x01	; 1
   128ce:	af 01       	movw	r20, r30
   128d0:	4a 19       	sub	r20, r10
   128d2:	5b 09       	sbc	r21, r11
   128d4:	b4 01       	movw	r22, r8
   128d6:	c5 01       	movw	r24, r10
   128d8:	0f 94 6e 1a 	call	0x234dc	; 0x234dc <strncmp>
   128dc:	89 2b       	or	r24, r25
   128de:	d1 f4       	brne	.+52     	; 0x12914 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5ee>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2211
  {
    mqtt_process_message++;
   128e0:	80 91 ae 0f 	lds	r24, 0x0FAE	; 0x800fae <mqtt_process_message>
   128e4:	90 91 af 0f 	lds	r25, 0x0FAF	; 0x800faf <mqtt_process_message+0x1>
   128e8:	01 96       	adiw	r24, 0x01	; 1
   128ea:	90 93 af 0f 	sts	0x0FAF, r25	; 0x800faf <mqtt_process_message+0x1>
   128ee:	80 93 ae 0f 	sts	0x0FAE, r24	; 0x800fae <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2212
    if (remote_tds_name_exist(my_payload) == 255)
   128f2:	80 ee       	ldi	r24, 0xE0	; 224
   128f4:	99 e0       	ldi	r25, 0x09	; 9
   128f6:	0e 94 41 64 	call	0xc882	; 0xc882 <remote_tds_name_exist(char*)>
   128fa:	8f 3f       	cpi	r24, 0xFF	; 255
   128fc:	59 f4       	brne	.+22     	; 0x12914 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5ee>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2214
    {
      id = remote_tds_find_free();
   128fe:	0e 94 f6 63 	call	0xc7ec	; 0xc7ec <remote_tds_find_free()>
   12902:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2215
      remote_tds_set_complete(id, 1, my_payload);
   12904:	40 ee       	ldi	r20, 0xE0	; 224
   12906:	59 e0       	ldi	r21, 0x09	; 9
   12908:	61 e0       	ldi	r22, 0x01	; 1
   1290a:	0e 94 3b 63 	call	0xc676	; 0xc676 <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2216
      remote_tds_subscibe_topic(id);
   1290e:	81 2f       	mov	r24, r17
   12910:	0e 94 6d 63 	call	0xc6da	; 0xc6da <remote_tds_subscibe_topic(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2222
    }
    ///TODO - vratit ze jiz existuje
  }
  ///
  //// thermctl-in/XXXXX/rtds/set/IDX/name - nastavi a udela prihlaseni
  strcpy_P(str1, thermctl_header_in);
   12914:	60 e8       	ldi	r22, 0x80	; 128
   12916:	71 e8       	ldi	r23, 0x81	; 129
   12918:	c5 01       	movw	r24, r10
   1291a:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2223
  strcat(str1, device.nazev);
   1291e:	6c ec       	ldi	r22, 0xCC	; 204
   12920:	7f e0       	ldi	r23, 0x0F	; 15
   12922:	c5 01       	movw	r24, r10
   12924:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2224
  strcat(str1, "/rtds-control/set/");
   12928:	66 ea       	ldi	r22, 0xA6	; 166
   1292a:	76 e0       	ldi	r23, 0x06	; 6
   1292c:	c5 01       	movw	r24, r10
   1292e:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2225
  if (strncmp(str1, topic, strlen(str1)) == 0)
   12932:	f5 01       	movw	r30, r10
   12934:	01 90       	ld	r0, Z+
   12936:	00 20       	and	r0, r0
   12938:	e9 f7       	brne	.-6      	; 0x12934 <mqtt_callback(char*, unsigned char*, unsigned int)+0x60e>
   1293a:	31 97       	sbiw	r30, 0x01	; 1
   1293c:	af 01       	movw	r20, r30
   1293e:	4a 19       	sub	r20, r10
   12940:	5b 09       	sbc	r21, r11
   12942:	b4 01       	movw	r22, r8
   12944:	c5 01       	movw	r24, r10
   12946:	0f 94 6e 1a 	call	0x234dc	; 0x234dc <strncmp>
   1294a:	89 2b       	or	r24, r25
   1294c:	09 f0       	breq	.+2      	; 0x12950 <mqtt_callback(char*, unsigned char*, unsigned int)+0x62a>
   1294e:	6e c0       	rjmp	.+220    	; 0x12a2c <mqtt_callback(char*, unsigned char*, unsigned int)+0x706>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2227
  {
    mqtt_process_message++;
   12950:	80 91 ae 0f 	lds	r24, 0x0FAE	; 0x800fae <mqtt_process_message>
   12954:	90 91 af 0f 	lds	r25, 0x0FAF	; 0x800faf <mqtt_process_message+0x1>
   12958:	01 96       	adiw	r24, 0x01	; 1
   1295a:	90 93 af 0f 	sts	0x0FAF, r25	; 0x800faf <mqtt_process_message+0x1>
   1295e:	80 93 ae 0f 	sts	0x0FAE, r24	; 0x800fae <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2229
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   12962:	f5 01       	movw	r30, r10
   12964:	01 90       	ld	r0, Z+
   12966:	00 20       	and	r0, r0
   12968:	e9 f7       	brne	.-6      	; 0x12964 <mqtt_callback(char*, unsigned char*, unsigned int)+0x63e>
   1296a:	31 97       	sbiw	r30, 0x01	; 1
   1296c:	ea 19       	sub	r30, r10
   1296e:	fb 09       	sbc	r31, r11
   12970:	9e 2f       	mov	r25, r30
   12972:	4e 2f       	mov	r20, r30
   12974:	84 2f       	mov	r24, r20
   12976:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2229 (discriminator 3)
   12978:	24 2f       	mov	r18, r20
   1297a:	30 e0       	ldi	r19, 0x00	; 0
   1297c:	d4 01       	movw	r26, r8
   1297e:	0d 90       	ld	r0, X+
   12980:	00 20       	and	r0, r0
   12982:	e9 f7       	brne	.-6      	; 0x1297e <mqtt_callback(char*, unsigned char*, unsigned int)+0x658>
   12984:	11 97       	sbiw	r26, 0x01	; 1
   12986:	a8 19       	sub	r26, r8
   12988:	b9 09       	sbc	r27, r9
   1298a:	2a 17       	cp	r18, r26
   1298c:	3b 07       	cpc	r19, r27
   1298e:	98 f4       	brcc	.+38     	; 0x129b6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x690>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2231 (discriminator 2)
    {
      str1[cnt] = topic[f];
   12990:	d5 01       	movw	r26, r10
   12992:	a8 0f       	add	r26, r24
   12994:	b1 1d       	adc	r27, r1
   12996:	28 0d       	add	r18, r8
   12998:	39 1d       	adc	r19, r9
   1299a:	f9 01       	movw	r30, r18
   1299c:	80 81       	ld	r24, Z
   1299e:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2232 (discriminator 2)
      str1[cnt + 1] = 0;
   129a0:	11 96       	adiw	r26, 0x01	; 1
   129a2:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2229 (discriminator 2)
  strcat(str1, "/rtds-control/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   129a4:	4f 5f       	subi	r20, 0xFF	; 255
   129a6:	e6 cf       	rjmp	.-52     	; 0x12974 <mqtt_callback(char*, unsigned char*, unsigned int)+0x64e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2199
    mqtt_process_message++;
    id = atoi(my_payload);
    if (id < HW_ONEWIRE_MAXROMS)
      tds_set_clear(id);
    else
      log_error(&mqtt_client, "E");
   129a8:	6b e6       	ldi	r22, 0x6B	; 107
   129aa:	78 e0       	ldi	r23, 0x08	; 8
   129ac:	8c ea       	ldi	r24, 0xAC	; 172
   129ae:	9e e0       	ldi	r25, 0x0E	; 14
   129b0:	0e 94 c0 b0 	call	0x16180	; 0x16180 <log_error(PubSubClient*, char*)>
   129b4:	78 cf       	rjmp	.-272    	; 0x128a6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x580>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2236
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
   129b6:	63 e4       	ldi	r22, 0x43	; 67
   129b8:	77 e0       	ldi	r23, 0x07	; 7
   129ba:	c5 01       	movw	r24, r10
   129bc:	0f 94 29 1a 	call	0x23452	; 0x23452 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2235
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
   129c0:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2237
    pch = strtok (str1, "/");
    while (pch != NULL)
   129c2:	00 97       	sbiw	r24, 0x00	; 0
   129c4:	99 f1       	breq	.+102    	; 0x12a2c <mqtt_callback(char*, unsigned char*, unsigned int)+0x706>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2239
    {
      if (cnt == 0) id = atoi(pch);
   129c6:	01 11       	cpse	r16, r1
   129c8:	0b c0       	rjmp	.+22     	; 0x129e0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x6ba>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2239 (discriminator 1)
   129ca:	0f 94 f0 19 	call	0x233e0	; 0x233e0 <atoi>
   129ce:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2253
        else
        {
          log_error(&mqtt_client, "rtds/set bad id");
        }
      }
      pch = strtok (NULL, "/");
   129d0:	63 e4       	ldi	r22, 0x43	; 67
   129d2:	77 e0       	ldi	r23, 0x07	; 7
   129d4:	90 e0       	ldi	r25, 0x00	; 0
   129d6:	80 e0       	ldi	r24, 0x00	; 0
   129d8:	0f 94 29 1a 	call	0x23452	; 0x23452 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2254
      cnt++;
   129dc:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2237
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
   129de:	f1 cf       	rjmp	.-30     	; 0x129c2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x69c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2240
    {
      if (cnt == 0) id = atoi(pch);
      if ((cnt == 1) && (strcmp(pch, "name") == 0))
   129e0:	01 30       	cpi	r16, 0x01	; 1
   129e2:	b1 f7       	brne	.-20     	; 0x129d0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x6aa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2240 (discriminator 1)
   129e4:	6a ec       	ldi	r22, 0xCA	; 202
   129e6:	73 e0       	ldi	r23, 0x03	; 3
   129e8:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
   129ec:	89 2b       	or	r24, r25
   129ee:	81 f7       	brne	.-32     	; 0x129d0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x6aa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2242
      {
        remote_tds_get_active(id, &active);
   129f0:	be 01       	movw	r22, r28
   129f2:	60 53       	subi	r22, 0x30	; 48
   129f4:	7f 4f       	sbci	r23, 0xFF	; 255
   129f6:	81 2f       	mov	r24, r17
   129f8:	0e 94 00 63 	call	0xc600	; 0xc600 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2243
        if (active == 0)
   129fc:	c0 53       	subi	r28, 0x30	; 48
   129fe:	df 4f       	sbci	r29, 0xFF	; 255
   12a00:	88 81       	ld	r24, Y
   12a02:	c0 5d       	subi	r28, 0xD0	; 208
   12a04:	d0 40       	sbci	r29, 0x00	; 0
   12a06:	81 11       	cpse	r24, r1
   12a08:	0a c0       	rjmp	.+20     	; 0x12a1e <mqtt_callback(char*, unsigned char*, unsigned int)+0x6f8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2245
        {
          remote_tds_set_complete(id, 1, my_payload);
   12a0a:	40 ee       	ldi	r20, 0xE0	; 224
   12a0c:	59 e0       	ldi	r21, 0x09	; 9
   12a0e:	61 e0       	ldi	r22, 0x01	; 1
   12a10:	81 2f       	mov	r24, r17
   12a12:	0e 94 3b 63 	call	0xc676	; 0xc676 <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2246
          remote_tds_subscibe_topic(id);
   12a16:	81 2f       	mov	r24, r17
   12a18:	0e 94 6d 63 	call	0xc6da	; 0xc6da <remote_tds_subscibe_topic(unsigned char)>
   12a1c:	d9 cf       	rjmp	.-78     	; 0x129d0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x6aa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2250
        }
        else
        {
          log_error(&mqtt_client, "rtds/set bad id");
   12a1e:	69 eb       	ldi	r22, 0xB9	; 185
   12a20:	76 e0       	ldi	r23, 0x06	; 6
   12a22:	8c ea       	ldi	r24, 0xAC	; 172
   12a24:	9e e0       	ldi	r25, 0x0E	; 14
   12a26:	0e 94 c0 b0 	call	0x16180	; 0x16180 <log_error(PubSubClient*, char*)>
   12a2a:	d2 cf       	rjmp	.-92     	; 0x129d0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x6aa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2259
      cnt++;
    }
  }
  ///
  //// /thermctl-in/XXXX/rtds/clear index vymaze a odhlasi
  strcpy_P(str1, thermctl_header_in);
   12a2c:	60 e8       	ldi	r22, 0x80	; 128
   12a2e:	71 e8       	ldi	r23, 0x81	; 129
   12a30:	c5 01       	movw	r24, r10
   12a32:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2260
  strcat(str1, device.nazev);
   12a36:	6c ec       	ldi	r22, 0xCC	; 204
   12a38:	7f e0       	ldi	r23, 0x0F	; 15
   12a3a:	c5 01       	movw	r24, r10
   12a3c:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2261
  strcat(str1, "/rtds-control/clear");
   12a40:	69 ec       	ldi	r22, 0xC9	; 201
   12a42:	76 e0       	ldi	r23, 0x06	; 6
   12a44:	c5 01       	movw	r24, r10
   12a46:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2262
  if (strncmp(str1, topic, strlen(str1)) == 0)
   12a4a:	f5 01       	movw	r30, r10
   12a4c:	01 90       	ld	r0, Z+
   12a4e:	00 20       	and	r0, r0
   12a50:	e9 f7       	brne	.-6      	; 0x12a4c <mqtt_callback(char*, unsigned char*, unsigned int)+0x726>
   12a52:	31 97       	sbiw	r30, 0x01	; 1
   12a54:	af 01       	movw	r20, r30
   12a56:	4a 19       	sub	r20, r10
   12a58:	5b 09       	sbc	r21, r11
   12a5a:	b4 01       	movw	r22, r8
   12a5c:	c5 01       	movw	r24, r10
   12a5e:	0f 94 6e 1a 	call	0x234dc	; 0x234dc <strncmp>
   12a62:	89 2b       	or	r24, r25
   12a64:	99 f4       	brne	.+38     	; 0x12a8c <mqtt_callback(char*, unsigned char*, unsigned int)+0x766>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2264
  {
    mqtt_process_message++;
   12a66:	80 91 ae 0f 	lds	r24, 0x0FAE	; 0x800fae <mqtt_process_message>
   12a6a:	90 91 af 0f 	lds	r25, 0x0FAF	; 0x800faf <mqtt_process_message+0x1>
   12a6e:	01 96       	adiw	r24, 0x01	; 1
   12a70:	90 93 af 0f 	sts	0x0FAF, r25	; 0x800faf <mqtt_process_message+0x1>
   12a74:	80 93 ae 0f 	sts	0x0FAE, r24	; 0x800fae <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2265
    id = atoi(my_payload);
   12a78:	80 ee       	ldi	r24, 0xE0	; 224
   12a7a:	99 e0       	ldi	r25, 0x09	; 9
   12a7c:	0f 94 f0 19 	call	0x233e0	; 0x233e0 <atoi>
   12a80:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2266
    remote_tds_unsubscibe_topic(id);
   12a82:	0e 94 b3 63 	call	0xc766	; 0xc766 <remote_tds_unsubscibe_topic(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2268
    /// TODO dodelat navratovou chybu
    remote_tds_clear(id);
   12a86:	81 2f       	mov	r24, r17
   12a88:	0e 94 48 63 	call	0xc690	; 0xc690 <remote_tds_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2272
  }
  ///
  //// ziska nastaveni remote_tds
  strcpy_P(str1, thermctl_header_in);
   12a8c:	60 e8       	ldi	r22, 0x80	; 128
   12a8e:	71 e8       	ldi	r23, 0x81	; 129
   12a90:	c5 01       	movw	r24, r10
   12a92:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2273
  strcat(str1, device.nazev);
   12a96:	6c ec       	ldi	r22, 0xCC	; 204
   12a98:	7f e0       	ldi	r23, 0x0F	; 15
   12a9a:	c5 01       	movw	r24, r10
   12a9c:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2274
  strcat(str1, "/rtds-control/get");
   12aa0:	6d ed       	ldi	r22, 0xDD	; 221
   12aa2:	76 e0       	ldi	r23, 0x06	; 6
   12aa4:	c5 01       	movw	r24, r10
   12aa6:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2275
  if (strncmp(str1, topic, strlen(str1)) == 0)
   12aaa:	f5 01       	movw	r30, r10
   12aac:	01 90       	ld	r0, Z+
   12aae:	00 20       	and	r0, r0
   12ab0:	e9 f7       	brne	.-6      	; 0x12aac <mqtt_callback(char*, unsigned char*, unsigned int)+0x786>
   12ab2:	31 97       	sbiw	r30, 0x01	; 1
   12ab4:	af 01       	movw	r20, r30
   12ab6:	4a 19       	sub	r20, r10
   12ab8:	5b 09       	sbc	r21, r11
   12aba:	b4 01       	movw	r22, r8
   12abc:	c5 01       	movw	r24, r10
   12abe:	0f 94 6e 1a 	call	0x234dc	; 0x234dc <strncmp>
   12ac2:	89 2b       	or	r24, r25
   12ac4:	11 f4       	brne	.+4      	; 0x12aca <mqtt_callback(char*, unsigned char*, unsigned int)+0x7a4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2277
  {
    send_mqtt_remote_tds_status();
   12ac6:	0e 94 ee 6b 	call	0xd7dc	; 0xd7dc <send_mqtt_remote_tds_status()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2281
  }
  ////
  //// rtds/NAME - hodnota, kde NAME je nazev cidla
  strcpy_P(str1, new_text_slash_rtds_slash); /// /rtds/
   12aca:	65 ed       	ldi	r22, 0xD5	; 213
   12acc:	7c e7       	ldi	r23, 0x7C	; 124
   12ace:	c5 01       	movw	r24, r10
   12ad0:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2282
  if (strncmp(str1, topic, strlen(str1)) == 0)
   12ad4:	f5 01       	movw	r30, r10
   12ad6:	01 90       	ld	r0, Z+
   12ad8:	00 20       	and	r0, r0
   12ada:	e9 f7       	brne	.-6      	; 0x12ad6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7b0>
   12adc:	31 97       	sbiw	r30, 0x01	; 1
   12ade:	af 01       	movw	r20, r30
   12ae0:	4a 19       	sub	r20, r10
   12ae2:	5b 09       	sbc	r21, r11
   12ae4:	b4 01       	movw	r22, r8
   12ae6:	c5 01       	movw	r24, r10
   12ae8:	0f 94 6e 1a 	call	0x234dc	; 0x234dc <strncmp>
   12aec:	89 2b       	or	r24, r25
   12aee:	09 f0       	breq	.+2      	; 0x12af2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7cc>
   12af0:	8f c0       	rjmp	.+286    	; 0x12c10 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8ea>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2284
  {
    mqtt_process_message++;
   12af2:	80 91 ae 0f 	lds	r24, 0x0FAE	; 0x800fae <mqtt_process_message>
   12af6:	90 91 af 0f 	lds	r25, 0x0FAF	; 0x800faf <mqtt_process_message+0x1>
   12afa:	01 96       	adiw	r24, 0x01	; 1
   12afc:	90 93 af 0f 	sts	0x0FAF, r25	; 0x800faf <mqtt_process_message+0x1>
   12b00:	80 93 ae 0f 	sts	0x0FAE, r24	; 0x800fae <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2286
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   12b04:	f5 01       	movw	r30, r10
   12b06:	01 90       	ld	r0, Z+
   12b08:	00 20       	and	r0, r0
   12b0a:	e9 f7       	brne	.-6      	; 0x12b06 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7e0>
   12b0c:	31 97       	sbiw	r30, 0x01	; 1
   12b0e:	ea 19       	sub	r30, r10
   12b10:	fb 09       	sbc	r31, r11
   12b12:	9e 2f       	mov	r25, r30
   12b14:	4e 2f       	mov	r20, r30
   12b16:	84 2f       	mov	r24, r20
   12b18:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2286 (discriminator 3)
   12b1a:	24 2f       	mov	r18, r20
   12b1c:	30 e0       	ldi	r19, 0x00	; 0
   12b1e:	d4 01       	movw	r26, r8
   12b20:	0d 90       	ld	r0, X+
   12b22:	00 20       	and	r0, r0
   12b24:	e9 f7       	brne	.-6      	; 0x12b20 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7fa>
   12b26:	11 97       	sbiw	r26, 0x01	; 1
   12b28:	a8 19       	sub	r26, r8
   12b2a:	b9 09       	sbc	r27, r9
   12b2c:	2a 17       	cp	r18, r26
   12b2e:	3b 07       	cpc	r19, r27
   12b30:	60 f4       	brcc	.+24     	; 0x12b4a <mqtt_callback(char*, unsigned char*, unsigned int)+0x824>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2288 (discriminator 2)
    {
      str1[cnt] = topic[f];
   12b32:	d5 01       	movw	r26, r10
   12b34:	a8 0f       	add	r26, r24
   12b36:	b1 1d       	adc	r27, r1
   12b38:	28 0d       	add	r18, r8
   12b3a:	39 1d       	adc	r19, r9
   12b3c:	f9 01       	movw	r30, r18
   12b3e:	80 81       	ld	r24, Z
   12b40:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2289 (discriminator 2)
      str1[cnt + 1] = 0;
   12b42:	11 96       	adiw	r26, 0x01	; 1
   12b44:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2286 (discriminator 2)
  strcpy_P(str1, new_text_slash_rtds_slash); /// /rtds/
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   12b46:	4f 5f       	subi	r20, 0xFF	; 255
   12b48:	e6 cf       	rjmp	.-52     	; 0x12b16 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7f0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2293
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
   12b4a:	63 e4       	ldi	r22, 0x43	; 67
   12b4c:	77 e0       	ldi	r23, 0x07	; 7
   12b4e:	c5 01       	movw	r24, r10
   12b50:	0f 94 29 1a 	call	0x23452	; 0x23452 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2292
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
   12b54:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2294
    pch = strtok (str1, "/");
    while (pch != NULL)
   12b56:	00 97       	sbiw	r24, 0x00	; 0
   12b58:	b9 f0       	breq	.+46     	; 0x12b88 <mqtt_callback(char*, unsigned char*, unsigned int)+0x862>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2296
    {
      if (cnt == 0)
   12b5a:	01 11       	cpse	r16, r1
   12b5c:	0e c0       	rjmp	.+28     	; 0x12b7a <mqtt_callback(char*, unsigned char*, unsigned int)+0x854>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2297
        strcpy(tmp1, pch);
   12b5e:	bc 01       	movw	r22, r24
   12b60:	ce 01       	movw	r24, r28
   12b62:	88 55       	subi	r24, 0x58	; 88
   12b64:	9f 4f       	sbci	r25, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2299
      if (cnt == 1)
        strcpy(tmp2, pch);
   12b66:	0f 94 67 1a 	call	0x234ce	; 0x234ce <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2300
      pch = strtok (NULL, "/");
   12b6a:	63 e4       	ldi	r22, 0x43	; 67
   12b6c:	77 e0       	ldi	r23, 0x07	; 7
   12b6e:	90 e0       	ldi	r25, 0x00	; 0
   12b70:	80 e0       	ldi	r24, 0x00	; 0
   12b72:	0f 94 29 1a 	call	0x23452	; 0x23452 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2301
      cnt++;
   12b76:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2294
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
   12b78:	ee cf       	rjmp	.-36     	; 0x12b56 <mqtt_callback(char*, unsigned char*, unsigned int)+0x830>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2298
    {
      if (cnt == 0)
        strcpy(tmp1, pch);
      if (cnt == 1)
   12b7a:	01 30       	cpi	r16, 0x01	; 1
   12b7c:	b1 f7       	brne	.-20     	; 0x12b6a <mqtt_callback(char*, unsigned char*, unsigned int)+0x844>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2299
        strcpy(tmp2, pch);
   12b7e:	bc 01       	movw	r22, r24
   12b80:	ce 01       	movw	r24, r28
   12b82:	88 57       	subi	r24, 0x78	; 120
   12b84:	9f 4f       	sbci	r25, 0xFF	; 255
   12b86:	ef cf       	rjmp	.-34     	; 0x12b66 <mqtt_callback(char*, unsigned char*, unsigned int)+0x840>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2303
      pch = strtok (NULL, "/");
      cnt++;
    }
    for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   12b88:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2305
    {
      uint8_t active = 0;
   12b8a:	c1 53       	subi	r28, 0x31	; 49
   12b8c:	df 4f       	sbci	r29, 0xFF	; 255
   12b8e:	18 82       	st	Y, r1
   12b90:	cf 5c       	subi	r28, 0xCF	; 207
   12b92:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2306
      str1[0] = 0;
   12b94:	d5 01       	movw	r26, r10
   12b96:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2307
      remote_tds_get_complete(idx, &active, str1);
   12b98:	a5 01       	movw	r20, r10
   12b9a:	be 01       	movw	r22, r28
   12b9c:	61 53       	subi	r22, 0x31	; 49
   12b9e:	7f 4f       	sbci	r23, 0xFF	; 255
   12ba0:	80 2f       	mov	r24, r16
   12ba2:	0e 94 64 62 	call	0xc4c8	; 0xc4c8 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2308
      if (active == 1 && strcmp(str1, tmp1) == 0)
   12ba6:	c1 53       	subi	r28, 0x31	; 49
   12ba8:	df 4f       	sbci	r29, 0xFF	; 255
   12baa:	88 81       	ld	r24, Y
   12bac:	cf 5c       	subi	r28, 0xCF	; 207
   12bae:	d0 40       	sbci	r29, 0x00	; 0
   12bb0:	81 30       	cpi	r24, 0x01	; 1
   12bb2:	51 f5       	brne	.+84     	; 0x12c08 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2308 (discriminator 1)
   12bb4:	be 01       	movw	r22, r28
   12bb6:	68 55       	subi	r22, 0x58	; 88
   12bb8:	7f 4f       	sbci	r23, 0xFF	; 255
   12bba:	c5 01       	movw	r24, r10
   12bbc:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
   12bc0:	89 2b       	or	r24, r25
   12bc2:	11 f5       	brne	.+68     	; 0x12c08 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2310
      {
        if (strcmp(tmp2, "value") == 0)
   12bc4:	6a e1       	ldi	r22, 0x1A	; 26
   12bc6:	74 e0       	ldi	r23, 0x04	; 4
   12bc8:	ce 01       	movw	r24, r28
   12bca:	88 57       	subi	r24, 0x78	; 120
   12bcc:	9f 4f       	sbci	r25, 0xFF	; 255
   12bce:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
   12bd2:	89 2b       	or	r24, r25
   12bd4:	41 f4       	brne	.+16     	; 0x12be6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8c0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2311
          remote_tds_set_data(idx, atoi(my_payload));
   12bd6:	80 ee       	ldi	r24, 0xE0	; 224
   12bd8:	99 e0       	ldi	r25, 0x09	; 9
   12bda:	0f 94 f0 19 	call	0x233e0	; 0x233e0 <atoi>
   12bde:	bc 01       	movw	r22, r24
   12be0:	80 2f       	mov	r24, r16
   12be2:	0e 94 bc 65 	call	0xcb78	; 0xcb78 <remote_tds_set_data(unsigned char, int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2312
        if (strcmp(tmp2, "type") == 0)
   12be6:	60 e2       	ldi	r22, 0x20	; 32
   12be8:	74 e0       	ldi	r23, 0x04	; 4
   12bea:	ce 01       	movw	r24, r28
   12bec:	88 57       	subi	r24, 0x78	; 120
   12bee:	9f 4f       	sbci	r25, 0xFF	; 255
   12bf0:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
   12bf4:	89 2b       	or	r24, r25
   12bf6:	41 f4       	brne	.+16     	; 0x12c08 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2313
          remote_tds_set_type(idx, atoi(my_payload));
   12bf8:	80 ee       	ldi	r24, 0xE0	; 224
   12bfa:	99 e0       	ldi	r25, 0x09	; 9
   12bfc:	0f 94 f0 19 	call	0x233e0	; 0x233e0 <atoi>
   12c00:	68 2f       	mov	r22, r24
   12c02:	80 2f       	mov	r24, r16
   12c04:	0e 94 cd 64 	call	0xc99a	; 0xc99a <remote_tds_set_type(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2303 (discriminator 1)
      if (cnt == 1)
        strcpy(tmp2, pch);
      pch = strtok (NULL, "/");
      cnt++;
    }
    for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   12c08:	0f 5f       	subi	r16, 0xFF	; 255
   12c0a:	0a 30       	cpi	r16, 0x0A	; 10
   12c0c:	09 f0       	breq	.+2      	; 0x12c10 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8ea>
   12c0e:	bd cf       	rjmp	.-134    	; 0x12b8a <mqtt_callback(char*, unsigned char*, unsigned int)+0x864>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2319
      }
    }
  }
  ///

  strcpy_P(str1, new_text_slash_rtds_control_list); /// /rtds-control/list"
   12c10:	62 ec       	ldi	r22, 0xC2	; 194
   12c12:	7c e7       	ldi	r23, 0x7C	; 124
   12c14:	c5 01       	movw	r24, r10
   12c16:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2334
  //// thermctl-in/XXXXX/prog/set/IDX/active  - 0-off, 1-heat, 2-cool,3.....
  //// thermctl-in/XXXXX/prog_interval/set/IDX/IDcko/theshold - pro jednotlive casove useky ruzne teploty
  //// thermctl-in/XXXXX/prog_interval/set/IDX/IDcko/active - pro jednotlivy usek povoleni zakazani
  //// thermctl-in/XXXXX/prog_interval/set/IDX/IDcko/time - nastavi cas pro jednotlive intervaly
  //// thermctl-in/XXXXX/prog/clear - IDX
  strcpy_P(str1, thermctl_header_in);
   12c1a:	60 e8       	ldi	r22, 0x80	; 128
   12c1c:	71 e8       	ldi	r23, 0x81	; 129
   12c1e:	c5 01       	movw	r24, r10
   12c20:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2335
  strcat(str1, device.nazev);
   12c24:	6c ec       	ldi	r22, 0xCC	; 204
   12c26:	7f e0       	ldi	r23, 0x0F	; 15
   12c28:	c5 01       	movw	r24, r10
   12c2a:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2336
  strcat(str1, "/prog/set/");
   12c2e:	6f ee       	ldi	r22, 0xEF	; 239
   12c30:	76 e0       	ldi	r23, 0x06	; 6
   12c32:	c5 01       	movw	r24, r10
   12c34:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2337
  if (strncmp(str1, topic, strlen(str1)) == 0)
   12c38:	f5 01       	movw	r30, r10
   12c3a:	01 90       	ld	r0, Z+
   12c3c:	00 20       	and	r0, r0
   12c3e:	e9 f7       	brne	.-6      	; 0x12c3a <mqtt_callback(char*, unsigned char*, unsigned int)+0x914>
   12c40:	31 97       	sbiw	r30, 0x01	; 1
   12c42:	af 01       	movw	r20, r30
   12c44:	4a 19       	sub	r20, r10
   12c46:	5b 09       	sbc	r21, r11
   12c48:	b4 01       	movw	r22, r8
   12c4a:	c5 01       	movw	r24, r10
   12c4c:	0f 94 6e 1a 	call	0x234dc	; 0x234dc <strncmp>
   12c50:	89 2b       	or	r24, r25
   12c52:	09 f0       	breq	.+2      	; 0x12c56 <mqtt_callback(char*, unsigned char*, unsigned int)+0x930>
   12c54:	45 c0       	rjmp	.+138    	; 0x12ce0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9ba>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2339
  {
    mqtt_process_message++;
   12c56:	80 91 ae 0f 	lds	r24, 0x0FAE	; 0x800fae <mqtt_process_message>
   12c5a:	90 91 af 0f 	lds	r25, 0x0FAF	; 0x800faf <mqtt_process_message+0x1>
   12c5e:	01 96       	adiw	r24, 0x01	; 1
   12c60:	90 93 af 0f 	sts	0x0FAF, r25	; 0x800faf <mqtt_process_message+0x1>
   12c64:	80 93 ae 0f 	sts	0x0FAE, r24	; 0x800fae <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2341
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   12c68:	f5 01       	movw	r30, r10
   12c6a:	01 90       	ld	r0, Z+
   12c6c:	00 20       	and	r0, r0
   12c6e:	e9 f7       	brne	.-6      	; 0x12c6a <mqtt_callback(char*, unsigned char*, unsigned int)+0x944>
   12c70:	31 97       	sbiw	r30, 0x01	; 1
   12c72:	ea 19       	sub	r30, r10
   12c74:	fb 09       	sbc	r31, r11
   12c76:	9e 2f       	mov	r25, r30
   12c78:	4e 2f       	mov	r20, r30
   12c7a:	84 2f       	mov	r24, r20
   12c7c:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2341 (discriminator 3)
   12c7e:	24 2f       	mov	r18, r20
   12c80:	30 e0       	ldi	r19, 0x00	; 0
   12c82:	d4 01       	movw	r26, r8
   12c84:	0d 90       	ld	r0, X+
   12c86:	00 20       	and	r0, r0
   12c88:	e9 f7       	brne	.-6      	; 0x12c84 <mqtt_callback(char*, unsigned char*, unsigned int)+0x95e>
   12c8a:	11 97       	sbiw	r26, 0x01	; 1
   12c8c:	a8 19       	sub	r26, r8
   12c8e:	b9 09       	sbc	r27, r9
   12c90:	2a 17       	cp	r18, r26
   12c92:	3b 07       	cpc	r19, r27
   12c94:	60 f4       	brcc	.+24     	; 0x12cae <mqtt_callback(char*, unsigned char*, unsigned int)+0x988>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2343 (discriminator 2)
    {
      str1[cnt] = topic[f];
   12c96:	d5 01       	movw	r26, r10
   12c98:	a8 0f       	add	r26, r24
   12c9a:	b1 1d       	adc	r27, r1
   12c9c:	28 0d       	add	r18, r8
   12c9e:	39 1d       	adc	r19, r9
   12ca0:	f9 01       	movw	r30, r18
   12ca2:	80 81       	ld	r24, Z
   12ca4:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2344 (discriminator 2)
      str1[cnt + 1] = 0;
   12ca6:	11 96       	adiw	r26, 0x01	; 1
   12ca8:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2341 (discriminator 2)
  strcat(str1, "/prog/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   12caa:	4f 5f       	subi	r20, 0xFF	; 255
   12cac:	e6 cf       	rjmp	.-52     	; 0x12c7a <mqtt_callback(char*, unsigned char*, unsigned int)+0x954>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2348
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
   12cae:	63 e4       	ldi	r22, 0x43	; 67
   12cb0:	77 e0       	ldi	r23, 0x07	; 7
   12cb2:	c5 01       	movw	r24, r10
   12cb4:	0f 94 29 1a 	call	0x23452	; 0x23452 <strtok>
   12cb8:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2347
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
   12cba:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2349
    pch = strtok (str1, "/");
    while (pch != NULL)
   12cbc:	e1 14       	cp	r14, r1
   12cbe:	f1 04       	cpc	r15, r1
   12cc0:	79 f0       	breq	.+30     	; 0x12ce0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9ba>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2351
    {
      if (cnt == 0) id = atoi(pch);
   12cc2:	01 11       	cpse	r16, r1
   12cc4:	bc c0       	rjmp	.+376    	; 0x12e3e <mqtt_callback(char*, unsigned char*, unsigned int)+0xb18>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2351 (discriminator 1)
   12cc6:	c7 01       	movw	r24, r14
   12cc8:	0f 94 f0 19 	call	0x233e0	; 0x233e0 <atoi>
   12ccc:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2352 (discriminator 1)
      if (id < AVAILABLE_PROGRAM)
   12cce:	88 30       	cpi	r24, 0x08	; 8
   12cd0:	08 f4       	brcc	.+2      	; 0x12cd4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9ae>
   12cd2:	d5 c0       	rjmp	.+426    	; 0x12e7e <mqtt_callback(char*, unsigned char*, unsigned int)+0xb58>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2359
        if ((cnt == 1) && (strcmp(pch, "name") == 0))  thermostat_program_set_name(id, my_payload);
        if ((cnt == 1) && (strcmp(pch, "active") == 0))  thermostat_program_set_active(id, atoi(my_payload));
      }
      else
      {
        log_error(&mqtt_client, "E");
   12cd4:	6b e6       	ldi	r22, 0x6B	; 107
   12cd6:	78 e0       	ldi	r23, 0x08	; 8
   12cd8:	8c ea       	ldi	r24, 0xAC	; 172
   12cda:	9e e0       	ldi	r25, 0x0E	; 14
   12cdc:	0e 94 c0 b0 	call	0x16180	; 0x16180 <log_error(PubSubClient*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2367
      pch = strtok (NULL, "/");
      cnt++;
    }
  }
  ////
  strcpy_P(str1, thermctl_header_in);
   12ce0:	60 e8       	ldi	r22, 0x80	; 128
   12ce2:	71 e8       	ldi	r23, 0x81	; 129
   12ce4:	c5 01       	movw	r24, r10
   12ce6:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2368
  strcat(str1, device.nazev);
   12cea:	6c ec       	ldi	r22, 0xCC	; 204
   12cec:	7f e0       	ldi	r23, 0x0F	; 15
   12cee:	c5 01       	movw	r24, r10
   12cf0:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2369
  strcat(str1, "/prog/clear");
   12cf4:	6a ef       	ldi	r22, 0xFA	; 250
   12cf6:	76 e0       	ldi	r23, 0x06	; 6
   12cf8:	c5 01       	movw	r24, r10
   12cfa:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2370
  if (strncmp(str1, topic, strlen(str1)) == 0)
   12cfe:	f5 01       	movw	r30, r10
   12d00:	01 90       	ld	r0, Z+
   12d02:	00 20       	and	r0, r0
   12d04:	e9 f7       	brne	.-6      	; 0x12d00 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9da>
   12d06:	31 97       	sbiw	r30, 0x01	; 1
   12d08:	af 01       	movw	r20, r30
   12d0a:	4a 19       	sub	r20, r10
   12d0c:	5b 09       	sbc	r21, r11
   12d0e:	b4 01       	movw	r22, r8
   12d10:	c5 01       	movw	r24, r10
   12d12:	0f 94 6e 1a 	call	0x234dc	; 0x234dc <strncmp>
   12d16:	89 2b       	or	r24, r25
   12d18:	09 f0       	breq	.+2      	; 0x12d1c <mqtt_callback(char*, unsigned char*, unsigned int)+0x9f6>
   12d1a:	47 c0       	rjmp	.+142    	; 0x12daa <mqtt_callback(char*, unsigned char*, unsigned int)+0xa84>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2372
  {
    mqtt_process_message++;
   12d1c:	80 91 ae 0f 	lds	r24, 0x0FAE	; 0x800fae <mqtt_process_message>
   12d20:	90 91 af 0f 	lds	r25, 0x0FAF	; 0x800faf <mqtt_process_message+0x1>
   12d24:	01 96       	adiw	r24, 0x01	; 1
   12d26:	90 93 af 0f 	sts	0x0FAF, r25	; 0x800faf <mqtt_process_message+0x1>
   12d2a:	80 93 ae 0f 	sts	0x0FAE, r24	; 0x800fae <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2373
    id = atoi(my_payload);
   12d2e:	80 ee       	ldi	r24, 0xE0	; 224
   12d30:	99 e0       	ldi	r25, 0x09	; 9
   12d32:	0f 94 f0 19 	call	0x233e0	; 0x233e0 <atoi>
   12d36:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2374
    if (id < AVAILABLE_PROGRAM)
   12d38:	88 30       	cpi	r24, 0x08	; 8
   12d3a:	08 f0       	brcs	.+2      	; 0x12d3e <mqtt_callback(char*, unsigned char*, unsigned int)+0xa18>
   12d3c:	a9 c0       	rjmp	.+338    	; 0x12e90 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb6a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2376
    {
      strcpy_P(tmp2, text_prog);
   12d3e:	67 e2       	ldi	r22, 0x27	; 39
   12d40:	72 e8       	ldi	r23, 0x82	; 130
   12d42:	ce 01       	movw	r24, r28
   12d44:	88 57       	subi	r24, 0x78	; 120
   12d46:	9f 4f       	sbci	r25, 0xFF	; 255
   12d48:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2377
      thermostat_program_set_name(id, tmp2);
   12d4c:	be 01       	movw	r22, r28
   12d4e:	68 57       	subi	r22, 0x78	; 120
   12d50:	7f 4f       	sbci	r23, 0xFF	; 255
   12d52:	81 2f       	mov	r24, r17
   12d54:	0e 94 f4 b9 	call	0x173e8	; 0x173e8 <thermostat_program_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2378
      thermostat_program_set_active(id, PROG_FREE);
   12d58:	6f ef       	ldi	r22, 0xFF	; 255
   12d5a:	81 2f       	mov	r24, r17
   12d5c:	0e 94 24 ba 	call	0x17448	; 0x17448 <thermostat_program_set_active(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2379
      for (uint8_t progid = 0; progid < MAX_PROGRAM_INTERVAL; progid++)
   12d60:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2381 (discriminator 2)
      {
        thermostat_program_set_time(id, progid, 0, 0, 0, 0, 0);
   12d62:	c1 2c       	mov	r12, r1
   12d64:	e1 2c       	mov	r14, r1
   12d66:	00 e0       	ldi	r16, 0x00	; 0
   12d68:	20 e0       	ldi	r18, 0x00	; 0
   12d6a:	40 e0       	ldi	r20, 0x00	; 0
   12d6c:	6f 2d       	mov	r22, r15
   12d6e:	81 2f       	mov	r24, r17
   12d70:	0e 94 7f ba 	call	0x174fe	; 0x174fe <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2382 (discriminator 2)
        thermostat_program_set_threshold(id, progid, 220);
   12d74:	4c ed       	ldi	r20, 0xDC	; 220
   12d76:	50 e0       	ldi	r21, 0x00	; 0
   12d78:	6f 2d       	mov	r22, r15
   12d7a:	81 2f       	mov	r24, r17
   12d7c:	0e 94 dd ba 	call	0x175ba	; 0x175ba <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2383 (discriminator 2)
        thermostat_program_set_week(id, progid, 0);
   12d80:	40 e0       	ldi	r20, 0x00	; 0
   12d82:	6f 2d       	mov	r22, r15
   12d84:	81 2f       	mov	r24, r17
   12d86:	0e 94 06 bb 	call	0x1760c	; 0x1760c <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2379 (discriminator 2)
    if (id < AVAILABLE_PROGRAM)
    {
      strcpy_P(tmp2, text_prog);
      thermostat_program_set_name(id, tmp2);
      thermostat_program_set_active(id, PROG_FREE);
      for (uint8_t progid = 0; progid < MAX_PROGRAM_INTERVAL; progid++)
   12d8a:	f3 94       	inc	r15
   12d8c:	fb e0       	ldi	r31, 0x0B	; 11
   12d8e:	ff 12       	cpse	r15, r31
   12d90:	e8 cf       	rjmp	.-48     	; 0x12d62 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa3c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2387
        thermostat_program_set_threshold(id, progid, 220);
        thermostat_program_set_week(id, progid, 0);
      }
      for (uint8_t tix = 0; tix < MAX_THERMOSTAT; tix++)
      {
        if (thermostat_ring_get_program_id(tix) == id)
   12d92:	80 2f       	mov	r24, r16
   12d94:	0e 94 0a b8 	call	0x17014	; 0x17014 <thermostat_ring_get_program_id(unsigned char)>
   12d98:	81 13       	cpse	r24, r17
   12d9a:	04 c0       	rjmp	.+8      	; 0x12da4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa7e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2389
        {
          thermostat_ring_set_program_id(tix, PROG_FREE);
   12d9c:	6f ef       	ldi	r22, 0xFF	; 255
   12d9e:	80 2f       	mov	r24, r16
   12da0:	0e 94 12 b8 	call	0x17024	; 0x17024 <thermostat_ring_set_program_id(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2385 (discriminator 2)
      {
        thermostat_program_set_time(id, progid, 0, 0, 0, 0, 0);
        thermostat_program_set_threshold(id, progid, 220);
        thermostat_program_set_week(id, progid, 0);
      }
      for (uint8_t tix = 0; tix < MAX_THERMOSTAT; tix++)
   12da4:	0f 5f       	subi	r16, 0xFF	; 255
   12da6:	05 30       	cpi	r16, 0x05	; 5
   12da8:	a1 f7       	brne	.-24     	; 0x12d92 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa6c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2399
    {
      log_error(&mqtt_client, "prog/clear bad id");
    }
  }
  /////
  strcpy_P(str1, thermctl_header_in);
   12daa:	60 e8       	ldi	r22, 0x80	; 128
   12dac:	71 e8       	ldi	r23, 0x81	; 129
   12dae:	c5 01       	movw	r24, r10
   12db0:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2400
  strcat(str1, device.nazev);
   12db4:	6c ec       	ldi	r22, 0xCC	; 204
   12db6:	7f e0       	ldi	r23, 0x0F	; 15
   12db8:	c5 01       	movw	r24, r10
   12dba:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2401
  strcat(str1, "/prog_interval/set/");
   12dbe:	68 e1       	ldi	r22, 0x18	; 24
   12dc0:	77 e0       	ldi	r23, 0x07	; 7
   12dc2:	c5 01       	movw	r24, r10
   12dc4:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2402
  if (strncmp(str1, topic, strlen(str1)) == 0)
   12dc8:	f5 01       	movw	r30, r10
   12dca:	01 90       	ld	r0, Z+
   12dcc:	00 20       	and	r0, r0
   12dce:	e9 f7       	brne	.-6      	; 0x12dca <mqtt_callback(char*, unsigned char*, unsigned int)+0xaa4>
   12dd0:	31 97       	sbiw	r30, 0x01	; 1
   12dd2:	af 01       	movw	r20, r30
   12dd4:	4a 19       	sub	r20, r10
   12dd6:	5b 09       	sbc	r21, r11
   12dd8:	b4 01       	movw	r22, r8
   12dda:	c5 01       	movw	r24, r10
   12ddc:	0f 94 6e 1a 	call	0x234dc	; 0x234dc <strncmp>
   12de0:	89 2b       	or	r24, r25
   12de2:	09 f0       	breq	.+2      	; 0x12de6 <mqtt_callback(char*, unsigned char*, unsigned int)+0xac0>
   12de4:	bb c0       	rjmp	.+374    	; 0x12f5c <mqtt_callback(char*, unsigned char*, unsigned int)+0xc36>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2404
  {
    mqtt_process_message++;
   12de6:	80 91 ae 0f 	lds	r24, 0x0FAE	; 0x800fae <mqtt_process_message>
   12dea:	90 91 af 0f 	lds	r25, 0x0FAF	; 0x800faf <mqtt_process_message+0x1>
   12dee:	01 96       	adiw	r24, 0x01	; 1
   12df0:	90 93 af 0f 	sts	0x0FAF, r25	; 0x800faf <mqtt_process_message+0x1>
   12df4:	80 93 ae 0f 	sts	0x0FAE, r24	; 0x800fae <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2406
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   12df8:	f5 01       	movw	r30, r10
   12dfa:	01 90       	ld	r0, Z+
   12dfc:	00 20       	and	r0, r0
   12dfe:	e9 f7       	brne	.-6      	; 0x12dfa <mqtt_callback(char*, unsigned char*, unsigned int)+0xad4>
   12e00:	31 97       	sbiw	r30, 0x01	; 1
   12e02:	ea 19       	sub	r30, r10
   12e04:	fb 09       	sbc	r31, r11
   12e06:	9e 2f       	mov	r25, r30
   12e08:	4e 2f       	mov	r20, r30
   12e0a:	84 2f       	mov	r24, r20
   12e0c:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2406 (discriminator 3)
   12e0e:	24 2f       	mov	r18, r20
   12e10:	30 e0       	ldi	r19, 0x00	; 0
   12e12:	d4 01       	movw	r26, r8
   12e14:	0d 90       	ld	r0, X+
   12e16:	00 20       	and	r0, r0
   12e18:	e9 f7       	brne	.-6      	; 0x12e14 <mqtt_callback(char*, unsigned char*, unsigned int)+0xaee>
   12e1a:	11 97       	sbiw	r26, 0x01	; 1
   12e1c:	a8 19       	sub	r26, r8
   12e1e:	b9 09       	sbc	r27, r9
   12e20:	2a 17       	cp	r18, r26
   12e22:	3b 07       	cpc	r19, r27
   12e24:	e0 f5       	brcc	.+120    	; 0x12e9e <mqtt_callback(char*, unsigned char*, unsigned int)+0xb78>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2408 (discriminator 2)
    {
      str1[cnt] = topic[f];
   12e26:	d5 01       	movw	r26, r10
   12e28:	a8 0f       	add	r26, r24
   12e2a:	b1 1d       	adc	r27, r1
   12e2c:	28 0d       	add	r18, r8
   12e2e:	39 1d       	adc	r19, r9
   12e30:	f9 01       	movw	r30, r18
   12e32:	80 81       	ld	r24, Z
   12e34:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2409 (discriminator 2)
      str1[cnt + 1] = 0;
   12e36:	11 96       	adiw	r26, 0x01	; 1
   12e38:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2406 (discriminator 2)
  strcat(str1, "/prog_interval/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   12e3a:	4f 5f       	subi	r20, 0xFF	; 255
   12e3c:	e6 cf       	rjmp	.-52     	; 0x12e0a <mqtt_callback(char*, unsigned char*, unsigned int)+0xae4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2352
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < AVAILABLE_PROGRAM)
   12e3e:	18 30       	cpi	r17, 0x08	; 8
   12e40:	08 f0       	brcs	.+2      	; 0x12e44 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb1e>
   12e42:	48 cf       	rjmp	.-368    	; 0x12cd4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9ae>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2354
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0))  thermostat_program_set_name(id, my_payload);
   12e44:	01 30       	cpi	r16, 0x01	; 1
   12e46:	d9 f4       	brne	.+54     	; 0x12e7e <mqtt_callback(char*, unsigned char*, unsigned int)+0xb58>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2354 (discriminator 1)
   12e48:	6a ec       	ldi	r22, 0xCA	; 202
   12e4a:	73 e0       	ldi	r23, 0x03	; 3
   12e4c:	c7 01       	movw	r24, r14
   12e4e:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
   12e52:	89 2b       	or	r24, r25
   12e54:	29 f4       	brne	.+10     	; 0x12e60 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb3a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2354 (discriminator 2)
   12e56:	60 ee       	ldi	r22, 0xE0	; 224
   12e58:	79 e0       	ldi	r23, 0x09	; 9
   12e5a:	81 2f       	mov	r24, r17
   12e5c:	0e 94 f4 b9 	call	0x173e8	; 0x173e8 <thermostat_program_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2355
        if ((cnt == 1) && (strcmp(pch, "active") == 0))  thermostat_program_set_active(id, atoi(my_payload));
   12e60:	6b ee       	ldi	r22, 0xEB	; 235
   12e62:	73 e0       	ldi	r23, 0x03	; 3
   12e64:	c7 01       	movw	r24, r14
   12e66:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
   12e6a:	89 2b       	or	r24, r25
   12e6c:	41 f4       	brne	.+16     	; 0x12e7e <mqtt_callback(char*, unsigned char*, unsigned int)+0xb58>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2355 (discriminator 2)
   12e6e:	80 ee       	ldi	r24, 0xE0	; 224
   12e70:	99 e0       	ldi	r25, 0x09	; 9
   12e72:	0f 94 f0 19 	call	0x233e0	; 0x233e0 <atoi>
   12e76:	68 2f       	mov	r22, r24
   12e78:	81 2f       	mov	r24, r17
   12e7a:	0e 94 24 ba 	call	0x17448	; 0x17448 <thermostat_program_set_active(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2362
      else
      {
        log_error(&mqtt_client, "E");
        break;
      }
      pch = strtok (NULL, "/");
   12e7e:	63 e4       	ldi	r22, 0x43	; 67
   12e80:	77 e0       	ldi	r23, 0x07	; 7
   12e82:	90 e0       	ldi	r25, 0x00	; 0
   12e84:	80 e0       	ldi	r24, 0x00	; 0
   12e86:	0f 94 29 1a 	call	0x23452	; 0x23452 <strtok>
   12e8a:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2363
      cnt++;
   12e8c:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2349
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
   12e8e:	16 cf       	rjmp	.-468    	; 0x12cbc <mqtt_callback(char*, unsigned char*, unsigned int)+0x996>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2395
        }
      }
    }
    else
    {
      log_error(&mqtt_client, "prog/clear bad id");
   12e90:	66 e0       	ldi	r22, 0x06	; 6
   12e92:	77 e0       	ldi	r23, 0x07	; 7
   12e94:	8c ea       	ldi	r24, 0xAC	; 172
   12e96:	9e e0       	ldi	r25, 0x0E	; 14
   12e98:	0e 94 c0 b0 	call	0x16180	; 0x16180 <log_error(PubSubClient*, char*)>
   12e9c:	86 cf       	rjmp	.-244    	; 0x12daa <mqtt_callback(char*, unsigned char*, unsigned int)+0xa84>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2413
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
   12e9e:	63 e4       	ldi	r22, 0x43	; 67
   12ea0:	77 e0       	ldi	r23, 0x07	; 7
   12ea2:	c5 01       	movw	r24, r10
   12ea4:	0f 94 29 1a 	call	0x23452	; 0x23452 <strtok>
   12ea8:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2082
  char tmp2[32];
  static char my_payload[128];
  boolean ret = 0;
  uint8_t cnt = 0;
  uint8_t id = 0;
  uint8_t id_interval = 0;
   12eaa:	d1 2c       	mov	r13, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2412
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
   12eac:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2414
    pch = strtok (str1, "/");
    while (pch != NULL)
   12eae:	e1 14       	cp	r14, r1
   12eb0:	f1 04       	cpc	r15, r1
   12eb2:	09 f4       	brne	.+2      	; 0x12eb6 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb90>
   12eb4:	53 c0       	rjmp	.+166    	; 0x12f5c <mqtt_callback(char*, unsigned char*, unsigned int)+0xc36>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2416
    {
      if (cnt == 0) id = atoi(pch);
   12eb6:	01 11       	cpse	r16, r1
   12eb8:	43 c0       	rjmp	.+134    	; 0x12f40 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc1a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2416 (discriminator 1)
   12eba:	c7 01       	movw	r24, r14
   12ebc:	0f 94 f0 19 	call	0x233e0	; 0x233e0 <atoi>
   12ec0:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2418
      if (cnt == 1) id_interval = atoi(pch);
      if (id < AVAILABLE_PROGRAM && id_interval < MAX_PROGRAM_INTERVAL)
   12ec2:	18 30       	cpi	r17, 0x08	; 8
   12ec4:	08 f0       	brcs	.+2      	; 0x12ec8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xba2>
   12ec6:	44 c0       	rjmp	.+136    	; 0x12f50 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc2a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2418 (discriminator 1)
   12ec8:	fa e0       	ldi	r31, 0x0A	; 10
   12eca:	fd 15       	cp	r31, r13
   12ecc:	08 f4       	brcc	.+2      	; 0x12ed0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xbaa>
   12ece:	40 c0       	rjmp	.+128    	; 0x12f50 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc2a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2420
      {
        if ((cnt == 2) && (strcmp(pch, "active") == 0))  thermostat_program_set_interval_active(id, id_interval, atoi(my_payload));
   12ed0:	02 30       	cpi	r16, 0x02	; 2
   12ed2:	69 f5       	brne	.+90     	; 0x12f2e <mqtt_callback(char*, unsigned char*, unsigned int)+0xc08>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2420 (discriminator 1)
   12ed4:	6b ee       	ldi	r22, 0xEB	; 235
   12ed6:	73 e0       	ldi	r23, 0x03	; 3
   12ed8:	c7 01       	movw	r24, r14
   12eda:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
   12ede:	89 2b       	or	r24, r25
   12ee0:	49 f4       	brne	.+18     	; 0x12ef4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xbce>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2420 (discriminator 2)
   12ee2:	80 ee       	ldi	r24, 0xE0	; 224
   12ee4:	99 e0       	ldi	r25, 0x09	; 9
   12ee6:	0f 94 f0 19 	call	0x233e0	; 0x233e0 <atoi>
   12eea:	48 2f       	mov	r20, r24
   12eec:	6d 2d       	mov	r22, r13
   12eee:	81 2f       	mov	r24, r17
   12ef0:	0e 94 78 bb 	call	0x176f0	; 0x176f0 <thermostat_program_set_interval_active(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2421
        if ((cnt == 2) && (strcmp(pch, "threshold") == 0))  thermostat_program_set_threshold(id, id_interval , atoi(my_payload));
   12ef4:	62 e0       	ldi	r22, 0x02	; 2
   12ef6:	74 e0       	ldi	r23, 0x04	; 4
   12ef8:	c7 01       	movw	r24, r14
   12efa:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
   12efe:	89 2b       	or	r24, r25
   12f00:	49 f4       	brne	.+18     	; 0x12f14 <mqtt_callback(char*, unsigned char*, unsigned int)+0xbee>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2421 (discriminator 2)
   12f02:	80 ee       	ldi	r24, 0xE0	; 224
   12f04:	99 e0       	ldi	r25, 0x09	; 9
   12f06:	0f 94 f0 19 	call	0x233e0	; 0x233e0 <atoi>
   12f0a:	ac 01       	movw	r20, r24
   12f0c:	6d 2d       	mov	r22, r13
   12f0e:	81 2f       	mov	r24, r17
   12f10:	0e 94 dd ba 	call	0x175ba	; 0x175ba <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2422
        if ((cnt == 2) && (strcmp(pch, "time") == 0)) thermostat_program_set_parse_interval(id, id_interval, my_payload);
   12f14:	6c e0       	ldi	r22, 0x0C	; 12
   12f16:	78 e0       	ldi	r23, 0x08	; 8
   12f18:	c7 01       	movw	r24, r14
   12f1a:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
   12f1e:	89 2b       	or	r24, r25
   12f20:	31 f4       	brne	.+12     	; 0x12f2e <mqtt_callback(char*, unsigned char*, unsigned int)+0xc08>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2422 (discriminator 2)
   12f22:	40 ee       	ldi	r20, 0xE0	; 224
   12f24:	59 e0       	ldi	r21, 0x09	; 9
   12f26:	6d 2d       	mov	r22, r13
   12f28:	81 2f       	mov	r24, r17
   12f2a:	0e 94 14 bb 	call	0x17628	; 0x17628 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2429
      else
      {
        log_error(&mqtt_client, "E");
        break;
      }
      pch = strtok (NULL, "/");
   12f2e:	63 e4       	ldi	r22, 0x43	; 67
   12f30:	77 e0       	ldi	r23, 0x07	; 7
   12f32:	90 e0       	ldi	r25, 0x00	; 0
   12f34:	80 e0       	ldi	r24, 0x00	; 0
   12f36:	0f 94 29 1a 	call	0x23452	; 0x23452 <strtok>
   12f3a:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2430
      cnt++;
   12f3c:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2414
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
   12f3e:	b7 cf       	rjmp	.-146    	; 0x12eae <mqtt_callback(char*, unsigned char*, unsigned int)+0xb88>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2417
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1) id_interval = atoi(pch);
   12f40:	01 30       	cpi	r16, 0x01	; 1
   12f42:	09 f0       	breq	.+2      	; 0x12f46 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc20>
   12f44:	be cf       	rjmp	.-132    	; 0x12ec2 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb9c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2417 (discriminator 1)
   12f46:	c7 01       	movw	r24, r14
   12f48:	0f 94 f0 19 	call	0x233e0	; 0x233e0 <atoi>
   12f4c:	d8 2e       	mov	r13, r24
   12f4e:	b9 cf       	rjmp	.-142    	; 0x12ec2 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb9c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2426
        if ((cnt == 2) && (strcmp(pch, "threshold") == 0))  thermostat_program_set_threshold(id, id_interval , atoi(my_payload));
        if ((cnt == 2) && (strcmp(pch, "time") == 0)) thermostat_program_set_parse_interval(id, id_interval, my_payload);
      }
      else
      {
        log_error(&mqtt_client, "E");
   12f50:	6b e6       	ldi	r22, 0x6B	; 107
   12f52:	78 e0       	ldi	r23, 0x08	; 8
   12f54:	8c ea       	ldi	r24, 0xAC	; 172
   12f56:	9e e0       	ldi	r25, 0x0E	; 14
   12f58:	0e 94 c0 b0 	call	0x16180	; 0x16180 <log_error(PubSubClient*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2435
      cnt++;
    }
  }
  ///
  //// thermctl-in/XXXXX/ring/default, nastavi vychozi ring na displaji
  strcpy_P(str1, thermctl_header_in);
   12f5c:	60 e8       	ldi	r22, 0x80	; 128
   12f5e:	71 e8       	ldi	r23, 0x81	; 129
   12f60:	c5 01       	movw	r24, r10
   12f62:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2436
  strcat(str1, device.nazev);
   12f66:	6c ec       	ldi	r22, 0xCC	; 204
   12f68:	7f e0       	ldi	r23, 0x0F	; 15
   12f6a:	c5 01       	movw	r24, r10
   12f6c:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2437
  strcat(str1, "/ring/default");
   12f70:	6c e2       	ldi	r22, 0x2C	; 44
   12f72:	77 e0       	ldi	r23, 0x07	; 7
   12f74:	c5 01       	movw	r24, r10
   12f76:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2438
  if (strcmp(str1, topic) == 0)
   12f7a:	b4 01       	movw	r22, r8
   12f7c:	c5 01       	movw	r24, r10
   12f7e:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
   12f82:	89 2b       	or	r24, r25
   12f84:	c1 f4       	brne	.+48     	; 0x12fb6 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc90>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2440
  {
    mqtt_process_message++;
   12f86:	80 91 ae 0f 	lds	r24, 0x0FAE	; 0x800fae <mqtt_process_message>
   12f8a:	90 91 af 0f 	lds	r25, 0x0FAF	; 0x800faf <mqtt_process_message+0x1>
   12f8e:	01 96       	adiw	r24, 0x01	; 1
   12f90:	90 93 af 0f 	sts	0x0FAF, r25	; 0x800faf <mqtt_process_message+0x1>
   12f94:	80 93 ae 0f 	sts	0x0FAE, r24	; 0x800fae <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2441
    last_default_ring = default_ring;
   12f98:	80 91 3a 0b 	lds	r24, 0x0B3A	; 0x800b3a <default_ring>
   12f9c:	80 93 39 0b 	sts	0x0B39, r24	; 0x800b39 <last_default_ring>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2442
    default_ring = atoi(my_payload);
   12fa0:	80 ee       	ldi	r24, 0xE0	; 224
   12fa2:	99 e0       	ldi	r25, 0x09	; 9
   12fa4:	0f 94 f0 19 	call	0x233e0	; 0x233e0 <atoi>
   12fa8:	80 93 3a 0b 	sts	0x0B3A, r24	; 0x800b3a <default_ring>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2443
    display_redraw_default_ring = 1;
   12fac:	91 e0       	ldi	r25, 0x01	; 1
   12fae:	90 93 0b 0f 	sts	0x0F0B, r25	; 0x800f0b <display_redraw_default_ring>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2444
    set_default_ring(default_ring);
   12fb2:	0e 94 a1 67 	call	0xcf42	; 0xcf42 <set_default_ring(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2448
  }
  ///
  //// thermctl-in/XXXXX/ring/get/IDcko/pid
  strcpy_P(str1, thermctl_header_in);
   12fb6:	60 e8       	ldi	r22, 0x80	; 128
   12fb8:	71 e8       	ldi	r23, 0x81	; 129
   12fba:	c5 01       	movw	r24, r10
   12fbc:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2449
  strcat(str1, device.nazev);
   12fc0:	6c ec       	ldi	r22, 0xCC	; 204
   12fc2:	7f e0       	ldi	r23, 0x0F	; 15
   12fc4:	c5 01       	movw	r24, r10
   12fc6:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2450
  strcat(str1, "/ring/get/");
   12fca:	6a e3       	ldi	r22, 0x3A	; 58
   12fcc:	77 e0       	ldi	r23, 0x07	; 7
   12fce:	c5 01       	movw	r24, r10
   12fd0:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2451
  if (strncmp(str1, topic, strlen(str1)) == 0)
   12fd4:	f5 01       	movw	r30, r10
   12fd6:	01 90       	ld	r0, Z+
   12fd8:	00 20       	and	r0, r0
   12fda:	e9 f7       	brne	.-6      	; 0x12fd6 <mqtt_callback(char*, unsigned char*, unsigned int)+0xcb0>
   12fdc:	31 97       	sbiw	r30, 0x01	; 1
   12fde:	7f 01       	movw	r14, r30
   12fe0:	ea 18       	sub	r14, r10
   12fe2:	fb 08       	sbc	r15, r11
   12fe4:	a7 01       	movw	r20, r14
   12fe6:	b4 01       	movw	r22, r8
   12fe8:	c5 01       	movw	r24, r10
   12fea:	0f 94 6e 1a 	call	0x234dc	; 0x234dc <strncmp>
   12fee:	89 2b       	or	r24, r25
   12ff0:	09 f0       	breq	.+2      	; 0x12ff4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xcce>
   12ff2:	47 c0       	rjmp	.+142    	; 0x13082 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd5c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2454
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   12ff4:	9e 2d       	mov	r25, r14
   12ff6:	8e 2d       	mov	r24, r14
   12ff8:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2454 (discriminator 3)
   12ffa:	2e 2d       	mov	r18, r14
   12ffc:	30 e0       	ldi	r19, 0x00	; 0
   12ffe:	f4 01       	movw	r30, r8
   13000:	01 90       	ld	r0, Z+
   13002:	00 20       	and	r0, r0
   13004:	e9 f7       	brne	.-6      	; 0x13000 <mqtt_callback(char*, unsigned char*, unsigned int)+0xcda>
   13006:	31 97       	sbiw	r30, 0x01	; 1
   13008:	e8 19       	sub	r30, r8
   1300a:	f9 09       	sbc	r31, r9
   1300c:	2e 17       	cp	r18, r30
   1300e:	3f 07       	cpc	r19, r31
   13010:	58 f4       	brcc	.+22     	; 0x13028 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd02>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2456 (discriminator 2)
    {
      str1[cnt] = topic[f];
   13012:	f5 01       	movw	r30, r10
   13014:	e8 0f       	add	r30, r24
   13016:	f1 1d       	adc	r31, r1
   13018:	28 0d       	add	r18, r8
   1301a:	39 1d       	adc	r19, r9
   1301c:	d9 01       	movw	r26, r18
   1301e:	8c 91       	ld	r24, X
   13020:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2457 (discriminator 2)
      str1[cnt + 1] = 0;
   13022:	11 82       	std	Z+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2454 (discriminator 2)
  strcat(str1, device.nazev);
  strcat(str1, "/ring/get/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   13024:	e3 94       	inc	r14
   13026:	e7 cf       	rjmp	.-50     	; 0x12ff6 <mqtt_callback(char*, unsigned char*, unsigned int)+0xcd0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2461
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
   13028:	63 e4       	ldi	r22, 0x43	; 67
   1302a:	77 e0       	ldi	r23, 0x07	; 7
   1302c:	c5 01       	movw	r24, r10
   1302e:	0f 94 29 1a 	call	0x23452	; 0x23452 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2460
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
   13032:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2462
    pch = strtok (str1, "/");
    while (pch != NULL)
   13034:	00 97       	sbiw	r24, 0x00	; 0
   13036:	29 f1       	breq	.+74     	; 0x13082 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd5c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2464
    {
      if (cnt == 0) id = atoi(my_payload);
   13038:	01 11       	cpse	r16, r1
   1303a:	0e c0       	rjmp	.+28     	; 0x13058 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd32>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2464 (discriminator 1)
   1303c:	80 ee       	ldi	r24, 0xE0	; 224
   1303e:	99 e0       	ldi	r25, 0x09	; 9
   13040:	0f 94 f0 19 	call	0x233e0	; 0x233e0 <atoi>
   13044:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2465 (discriminator 1)
      if (id < MAX_THERMOSTAT)
   13046:	85 30       	cpi	r24, 0x05	; 5
   13048:	a0 f0       	brcs	.+40     	; 0x13072 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2471
      {
        if ((cnt == 1) && (strcmp(pch, "pid") == 0))  mqtt_send_pid_variable(id);
      }
      else
      {
        log_error(&mqtt_client, "E");
   1304a:	6b e6       	ldi	r22, 0x6B	; 107
   1304c:	78 e0       	ldi	r23, 0x08	; 8
   1304e:	8c ea       	ldi	r24, 0xAC	; 172
   13050:	9e e0       	ldi	r25, 0x0E	; 14
   13052:	0e 94 c0 b0 	call	0x16180	; 0x16180 <log_error(PubSubClient*, char*)>
   13056:	0d c0       	rjmp	.+26     	; 0x13072 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2465
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(my_payload);
      if (id < MAX_THERMOSTAT)
   13058:	15 30       	cpi	r17, 0x05	; 5
   1305a:	b8 f7       	brcc	.-18     	; 0x1304a <mqtt_callback(char*, unsigned char*, unsigned int)+0xd24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2467
      {
        if ((cnt == 1) && (strcmp(pch, "pid") == 0))  mqtt_send_pid_variable(id);
   1305c:	01 30       	cpi	r16, 0x01	; 1
   1305e:	49 f4       	brne	.+18     	; 0x13072 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2467 (discriminator 1)
   13060:	61 e1       	ldi	r22, 0x11	; 17
   13062:	74 e0       	ldi	r23, 0x04	; 4
   13064:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
   13068:	89 2b       	or	r24, r25
   1306a:	19 f4       	brne	.+6      	; 0x13072 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2467 (discriminator 2)
   1306c:	81 2f       	mov	r24, r17
   1306e:	0e 94 91 6b 	call	0xd722	; 0xd722 <mqtt_send_pid_variable(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2473
      }
      else
      {
        log_error(&mqtt_client, "E");
      }
      pch = strtok (NULL, "/");
   13072:	63 e4       	ldi	r22, 0x43	; 67
   13074:	77 e0       	ldi	r23, 0x07	; 7
   13076:	90 e0       	ldi	r25, 0x00	; 0
   13078:	80 e0       	ldi	r24, 0x00	; 0
   1307a:	0f 94 29 1a 	call	0x23452	; 0x23452 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2474
      cnt++;
   1307e:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2462
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
   13080:	d9 cf       	rjmp	.-78     	; 0x13034 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd0e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2493
  //// thermctl-in/XXXXX/ring/set/IDcko/output
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_kp
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_ki
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_kd
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_time
  strcpy_P(str1, thermctl_header_in);
   13082:	60 e8       	ldi	r22, 0x80	; 128
   13084:	71 e8       	ldi	r23, 0x81	; 129
   13086:	c5 01       	movw	r24, r10
   13088:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2494
  strcat(str1, device.nazev);
   1308c:	6c ec       	ldi	r22, 0xCC	; 204
   1308e:	7f e0       	ldi	r23, 0x0F	; 15
   13090:	c5 01       	movw	r24, r10
   13092:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2495
  strcat(str1, "/ring/set/");
   13096:	65 e4       	ldi	r22, 0x45	; 69
   13098:	77 e0       	ldi	r23, 0x07	; 7
   1309a:	c5 01       	movw	r24, r10
   1309c:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2496
  if (strncmp(str1, topic, strlen(str1)) == 0)
   130a0:	f5 01       	movw	r30, r10
   130a2:	01 90       	ld	r0, Z+
   130a4:	00 20       	and	r0, r0
   130a6:	e9 f7       	brne	.-6      	; 0x130a2 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd7c>
   130a8:	31 97       	sbiw	r30, 0x01	; 1
   130aa:	7f 01       	movw	r14, r30
   130ac:	ea 18       	sub	r14, r10
   130ae:	fb 08       	sbc	r15, r11
   130b0:	a7 01       	movw	r20, r14
   130b2:	b4 01       	movw	r22, r8
   130b4:	c5 01       	movw	r24, r10
   130b6:	0f 94 6e 1a 	call	0x234dc	; 0x234dc <strncmp>
   130ba:	89 2b       	or	r24, r25
   130bc:	09 f0       	breq	.+2      	; 0x130c0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd9a>
   130be:	5c c1       	rjmp	.+696    	; 0x13378 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1052>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2499
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   130c0:	9e 2d       	mov	r25, r14
   130c2:	8e 2d       	mov	r24, r14
   130c4:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2499 (discriminator 3)
   130c6:	2e 2d       	mov	r18, r14
   130c8:	30 e0       	ldi	r19, 0x00	; 0
   130ca:	f4 01       	movw	r30, r8
   130cc:	01 90       	ld	r0, Z+
   130ce:	00 20       	and	r0, r0
   130d0:	e9 f7       	brne	.-6      	; 0x130cc <mqtt_callback(char*, unsigned char*, unsigned int)+0xda6>
   130d2:	31 97       	sbiw	r30, 0x01	; 1
   130d4:	e8 19       	sub	r30, r8
   130d6:	f9 09       	sbc	r31, r9
   130d8:	2e 17       	cp	r18, r30
   130da:	3f 07       	cpc	r19, r31
   130dc:	58 f4       	brcc	.+22     	; 0x130f4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xdce>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2501 (discriminator 2)
    {
      str1[cnt] = topic[f];
   130de:	f5 01       	movw	r30, r10
   130e0:	e8 0f       	add	r30, r24
   130e2:	f1 1d       	adc	r31, r1
   130e4:	28 0d       	add	r18, r8
   130e6:	39 1d       	adc	r19, r9
   130e8:	d9 01       	movw	r26, r18
   130ea:	8c 91       	ld	r24, X
   130ec:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2502 (discriminator 2)
      str1[cnt + 1] = 0;
   130ee:	11 82       	std	Z+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2499 (discriminator 2)
  strcat(str1, device.nazev);
  strcat(str1, "/ring/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   130f0:	e3 94       	inc	r14
   130f2:	e7 cf       	rjmp	.-50     	; 0x130c2 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd9c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2506
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
   130f4:	63 e4       	ldi	r22, 0x43	; 67
   130f6:	77 e0       	ldi	r23, 0x07	; 7
   130f8:	c5 01       	movw	r24, r10
   130fa:	0f 94 29 1a 	call	0x23452	; 0x23452 <strtok>
   130fe:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2505
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
   13100:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2545
          thermostat_ring_set_mode(id, active);
          if (active == TERM_MODE_MAN_HEAT)
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 0);
          if (active == TERM_MODE_MAN_COOL)
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 1);
          change_term_mode = 1;
   13102:	dd 24       	eor	r13, r13
   13104:	d3 94       	inc	r13
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2507
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
   13106:	e1 14       	cp	r14, r1
   13108:	f1 04       	cpc	r15, r1
   1310a:	09 f4       	brne	.+2      	; 0x1310e <mqtt_callback(char*, unsigned char*, unsigned int)+0xde8>
   1310c:	35 c1       	rjmp	.+618    	; 0x13378 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1052>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2509
    {
      if (cnt == 0) id = atoi(pch);
   1310e:	01 11       	cpse	r16, r1
   13110:	0e c0       	rjmp	.+28     	; 0x1312e <mqtt_callback(char*, unsigned char*, unsigned int)+0xe08>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2509 (discriminator 1)
   13112:	c7 01       	movw	r24, r14
   13114:	0f 94 f0 19 	call	0x233e0	; 0x233e0 <atoi>
   13118:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2510 (discriminator 1)
      if (id < MAX_THERMOSTAT)
   1311a:	85 30       	cpi	r24, 0x05	; 5
   1311c:	08 f4       	brcc	.+2      	; 0x13120 <mqtt_callback(char*, unsigned char*, unsigned int)+0xdfa>
   1311e:	23 c1       	rjmp	.+582    	; 0x13366 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1040>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2558
        if ((cnt == 1) && (strcmp(pch, "pid_kd") == 0)) thermostat_ring_pid_set_kd(id, atof(my_payload));
        if ((cnt == 1) && (strcmp(pch, "pid_time") == 0)) thermostat_ring_pid_set_time(id, atoi(my_payload));
      }
      else
      {
        log_error(&mqtt_client, "E");
   13120:	6b e6       	ldi	r22, 0x6B	; 107
   13122:	78 e0       	ldi	r23, 0x08	; 8
   13124:	8c ea       	ldi	r24, 0xAC	; 172
   13126:	9e e0       	ldi	r25, 0x0E	; 14
   13128:	0e 94 c0 b0 	call	0x16180	; 0x16180 <log_error(PubSubClient*, char*)>
   1312c:	1c c1       	rjmp	.+568    	; 0x13366 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1040>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2510
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < MAX_THERMOSTAT)
   1312e:	15 30       	cpi	r17, 0x05	; 5
   13130:	b8 f7       	brcc	.-18     	; 0x13120 <mqtt_callback(char*, unsigned char*, unsigned int)+0xdfa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2512
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0)) thermostat_ring_set_name(id, my_payload);
   13132:	01 30       	cpi	r16, 0x01	; 1
   13134:	09 f0       	breq	.+2      	; 0x13138 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe12>
   13136:	17 c1       	rjmp	.+558    	; 0x13366 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1040>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2512 (discriminator 1)
   13138:	6a ec       	ldi	r22, 0xCA	; 202
   1313a:	73 e0       	ldi	r23, 0x03	; 3
   1313c:	c7 01       	movw	r24, r14
   1313e:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
   13142:	89 2b       	or	r24, r25
   13144:	29 f4       	brne	.+10     	; 0x13150 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe2a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2512 (discriminator 2)
   13146:	60 ee       	ldi	r22, 0xE0	; 224
   13148:	79 e0       	ldi	r23, 0x09	; 9
   1314a:	81 2f       	mov	r24, r17
   1314c:	0e 94 c3 b7 	call	0x16f86	; 0x16f86 <thermostat_ring_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2513
        if ((cnt == 1) && (strcmp(pch, "program") == 0))
   13150:	66 ec       	ldi	r22, 0xC6	; 198
   13152:	75 e0       	ldi	r23, 0x05	; 5
   13154:	c7 01       	movw	r24, r14
   13156:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
   1315a:	89 2b       	or	r24, r25
   1315c:	59 f4       	brne	.+22     	; 0x13174 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe4e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2514
          if (atoi(my_payload) < AVAILABLE_PROGRAM)
   1315e:	80 ee       	ldi	r24, 0xE0	; 224
   13160:	99 e0       	ldi	r25, 0x09	; 9
   13162:	0f 94 f0 19 	call	0x233e0	; 0x233e0 <atoi>
   13166:	88 30       	cpi	r24, 0x08	; 8
   13168:	91 05       	cpc	r25, r1
   1316a:	24 f4       	brge	.+8      	; 0x13174 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe4e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2515
            thermostat_ring_set_program_id(id, atoi(my_payload));
   1316c:	68 2f       	mov	r22, r24
   1316e:	81 2f       	mov	r24, r17
   13170:	0e 94 12 b8 	call	0x17024	; 0x17024 <thermostat_ring_set_program_id(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2516
        if ((cnt == 1) && (strcmp(pch, "threshold-f") == 0))
   13174:	67 ee       	ldi	r22, 0xE7	; 231
   13176:	77 e0       	ldi	r23, 0x07	; 7
   13178:	c7 01       	movw	r24, r14
   1317a:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
   1317e:	89 2b       	or	r24, r25
   13180:	79 f4       	brne	.+30     	; 0x131a0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe7a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2518
        {
          thermostat_ring_set_mezni(id, atof(my_payload) * 10); /// thereshold hodnota presne ve floatu * 10
   13182:	80 ee       	ldi	r24, 0xE0	; 224
   13184:	99 e0       	ldi	r25, 0x09	; 9
   13186:	0f 94 ec 19 	call	0x233d8	; 0x233d8 <atof>
   1318a:	20 e0       	ldi	r18, 0x00	; 0
   1318c:	30 e0       	ldi	r19, 0x00	; 0
   1318e:	40 e2       	ldi	r20, 0x20	; 32
   13190:	51 e4       	ldi	r21, 0x41	; 65
   13192:	0f 94 ac 15 	call	0x22b58	; 0x22b58 <__mulsf3>
   13196:	0f 94 bf 14 	call	0x2297e	; 0x2297e <__fixsfsi>
   1319a:	81 2f       	mov	r24, r17
   1319c:	0e 94 37 b8 	call	0x1706e	; 0x1706e <thermostat_ring_set_mezni(unsigned char, int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2520
        }
        if ((cnt == 1) && (strcmp(pch, "threshold") == 0))
   131a0:	62 e0       	ldi	r22, 0x02	; 2
   131a2:	74 e0       	ldi	r23, 0x04	; 4
   131a4:	c7 01       	movw	r24, r14
   131a6:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
   131aa:	89 2b       	or	r24, r25
   131ac:	41 f4       	brne	.+16     	; 0x131be <mqtt_callback(char*, unsigned char*, unsigned int)+0xe98>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2522
        {
          thermostat_ring_set_mezni(id, atoi(my_payload));
   131ae:	80 ee       	ldi	r24, 0xE0	; 224
   131b0:	99 e0       	ldi	r25, 0x09	; 9
   131b2:	0f 94 f0 19 	call	0x233e0	; 0x233e0 <atoi>
   131b6:	bc 01       	movw	r22, r24
   131b8:	81 2f       	mov	r24, r17
   131ba:	0e 94 37 b8 	call	0x1706e	; 0x1706e <thermostat_ring_set_mezni(unsigned char, int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2524
        }
        if ((cnt == 1) && (strcmp(pch, "text_mode") == 0))
   131be:	6e ec       	ldi	r22, 0xCE	; 206
   131c0:	75 e0       	ldi	r23, 0x05	; 5
   131c2:	c7 01       	movw	r24, r14
   131c4:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
   131c8:	89 2b       	or	r24, r25
   131ca:	69 f5       	brne	.+90     	; 0x13226 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf00>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2526
        {
          thermostat_mode_default_ring_last_state = thermostat_ring_get_mode(default_ring);
   131cc:	80 91 3a 0b 	lds	r24, 0x0B3A	; 0x800b3a <default_ring>
   131d0:	0e 94 5e b8 	call	0x170bc	; 0x170bc <thermostat_ring_get_mode(unsigned char)>
   131d4:	80 93 37 0b 	sts	0x0B37, r24	; 0x800b37 <thermostat_mode_default_ring_last_state>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2527
          active = convert_text_mode(my_payload);
   131d8:	80 ee       	ldi	r24, 0xE0	; 224
   131da:	99 e0       	ldi	r25, 0x09	; 9
   131dc:	0e 94 4f 72 	call	0xe49e	; 0xe49e <convert_text_mode(char*)>
   131e0:	c0 53       	subi	r28, 0x30	; 48
   131e2:	df 4f       	sbci	r29, 0xFF	; 255
   131e4:	88 83       	st	Y, r24
   131e6:	c0 5d       	subi	r28, 0xD0	; 208
   131e8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2528
          thermostat_ring_set_mode(id, active);
   131ea:	68 2f       	mov	r22, r24
   131ec:	81 2f       	mov	r24, r17
   131ee:	0e 94 66 b8 	call	0x170cc	; 0x170cc <thermostat_ring_set_mode(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2529
          if (active == TERM_MODE_MAN_HEAT)
   131f2:	c0 53       	subi	r28, 0x30	; 48
   131f4:	df 4f       	sbci	r29, 0xFF	; 255
   131f6:	88 81       	ld	r24, Y
   131f8:	c0 5d       	subi	r28, 0xD0	; 208
   131fa:	d0 40       	sbci	r29, 0x00	; 0
   131fc:	83 30       	cpi	r24, 0x03	; 3
   131fe:	29 f4       	brne	.+10     	; 0x1320a <mqtt_callback(char*, unsigned char*, unsigned int)+0xee4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2530
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 0);
   13200:	40 e0       	ldi	r20, 0x00	; 0
   13202:	60 e0       	ldi	r22, 0x00	; 0
   13204:	81 2f       	mov	r24, r17
   13206:	0e 94 9b b8 	call	0x17136	; 0x17136 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2531
          if (active == TERM_MODE_MAN_COOL)
   1320a:	c0 53       	subi	r28, 0x30	; 48
   1320c:	df 4f       	sbci	r29, 0xFF	; 255
   1320e:	88 81       	ld	r24, Y
   13210:	c0 5d       	subi	r28, 0xD0	; 208
   13212:	d0 40       	sbci	r29, 0x00	; 0
   13214:	85 30       	cpi	r24, 0x05	; 5
   13216:	29 f4       	brne	.+10     	; 0x13222 <mqtt_callback(char*, unsigned char*, unsigned int)+0xefc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2532
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 1);
   13218:	41 e0       	ldi	r20, 0x01	; 1
   1321a:	60 e0       	ldi	r22, 0x00	; 0
   1321c:	81 2f       	mov	r24, r17
   1321e:	0e 94 9b b8 	call	0x17136	; 0x17136 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2533
          change_term_mode = 1;
   13222:	d0 92 79 0a 	sts	0x0A79, r13	; 0x800a79 <change_term_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2536

        }
        if ((cnt == 1) && (strcmp(pch, "mode") == 0))
   13226:	63 ed       	ldi	r22, 0xD3	; 211
   13228:	75 e0       	ldi	r23, 0x05	; 5
   1322a:	c7 01       	movw	r24, r14
   1322c:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
   13230:	89 2b       	or	r24, r25
   13232:	69 f5       	brne	.+90     	; 0x1328e <mqtt_callback(char*, unsigned char*, unsigned int)+0xf68>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2538
        {
          thermostat_mode_default_ring_last_state = thermostat_ring_get_mode(default_ring);
   13234:	80 91 3a 0b 	lds	r24, 0x0B3A	; 0x800b3a <default_ring>
   13238:	0e 94 5e b8 	call	0x170bc	; 0x170bc <thermostat_ring_get_mode(unsigned char)>
   1323c:	80 93 37 0b 	sts	0x0B37, r24	; 0x800b37 <thermostat_mode_default_ring_last_state>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2539
          active = atoi(my_payload);
   13240:	80 ee       	ldi	r24, 0xE0	; 224
   13242:	99 e0       	ldi	r25, 0x09	; 9
   13244:	0f 94 f0 19 	call	0x233e0	; 0x233e0 <atoi>
   13248:	c0 53       	subi	r28, 0x30	; 48
   1324a:	df 4f       	sbci	r29, 0xFF	; 255
   1324c:	88 83       	st	Y, r24
   1324e:	c0 5d       	subi	r28, 0xD0	; 208
   13250:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2540
          thermostat_ring_set_mode(id, active);
   13252:	68 2f       	mov	r22, r24
   13254:	81 2f       	mov	r24, r17
   13256:	0e 94 66 b8 	call	0x170cc	; 0x170cc <thermostat_ring_set_mode(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2541
          if (active == TERM_MODE_MAN_HEAT)
   1325a:	c0 53       	subi	r28, 0x30	; 48
   1325c:	df 4f       	sbci	r29, 0xFF	; 255
   1325e:	88 81       	ld	r24, Y
   13260:	c0 5d       	subi	r28, 0xD0	; 208
   13262:	d0 40       	sbci	r29, 0x00	; 0
   13264:	83 30       	cpi	r24, 0x03	; 3
   13266:	29 f4       	brne	.+10     	; 0x13272 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2542
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 0);
   13268:	40 e0       	ldi	r20, 0x00	; 0
   1326a:	60 e0       	ldi	r22, 0x00	; 0
   1326c:	81 2f       	mov	r24, r17
   1326e:	0e 94 9b b8 	call	0x17136	; 0x17136 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2543
          if (active == TERM_MODE_MAN_COOL)
   13272:	c0 53       	subi	r28, 0x30	; 48
   13274:	df 4f       	sbci	r29, 0xFF	; 255
   13276:	88 81       	ld	r24, Y
   13278:	c0 5d       	subi	r28, 0xD0	; 208
   1327a:	d0 40       	sbci	r29, 0x00	; 0
   1327c:	85 30       	cpi	r24, 0x05	; 5
   1327e:	29 f4       	brne	.+10     	; 0x1328a <mqtt_callback(char*, unsigned char*, unsigned int)+0xf64>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2544
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 1);
   13280:	41 e0       	ldi	r20, 0x01	; 1
   13282:	60 e0       	ldi	r22, 0x00	; 0
   13284:	81 2f       	mov	r24, r17
   13286:	0e 94 9b b8 	call	0x17136	; 0x17136 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2545
          change_term_mode = 1;
   1328a:	d0 92 79 0a 	sts	0x0A79, r13	; 0x800a79 <change_term_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2547
        }
        if ((cnt == 1) && (strcmp(pch, "input") == 0)) thermostat_ring_set_asociate_tds(id, atoi(my_payload));
   1328e:	6f ed       	ldi	r22, 0xDF	; 223
   13290:	75 e0       	ldi	r23, 0x05	; 5
   13292:	c7 01       	movw	r24, r14
   13294:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
   13298:	89 2b       	or	r24, r25
   1329a:	41 f4       	brne	.+16     	; 0x132ac <mqtt_callback(char*, unsigned char*, unsigned int)+0xf86>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2547 (discriminator 2)
   1329c:	80 ee       	ldi	r24, 0xE0	; 224
   1329e:	99 e0       	ldi	r25, 0x09	; 9
   132a0:	0f 94 f0 19 	call	0x233e0	; 0x233e0 <atoi>
   132a4:	68 2f       	mov	r22, r24
   132a6:	81 2f       	mov	r24, r17
   132a8:	0e 94 56 b8 	call	0x170ac	; 0x170ac <thermostat_ring_set_asociate_tds(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2549
        //if ((cnt == 1) && (strcmp(pch, "rtds") == 0)) thermostat_ring_set_asociate_tds(id, atoi(my_payload) + TDS_MEMORY_MAP_RTDS);
        if ((cnt == 1) && (strcmp(pch, "active") == 0)) thermostat_ring_set_active(id, atoi(my_payload));
   132ac:	6b ee       	ldi	r22, 0xEB	; 235
   132ae:	73 e0       	ldi	r23, 0x03	; 3
   132b0:	c7 01       	movw	r24, r14
   132b2:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
   132b6:	89 2b       	or	r24, r25
   132b8:	41 f4       	brne	.+16     	; 0x132ca <mqtt_callback(char*, unsigned char*, unsigned int)+0xfa4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2549 (discriminator 2)
   132ba:	80 ee       	ldi	r24, 0xE0	; 224
   132bc:	99 e0       	ldi	r25, 0x09	; 9
   132be:	0f 94 f0 19 	call	0x233e0	; 0x233e0 <atoi>
   132c2:	68 2f       	mov	r22, r24
   132c4:	81 2f       	mov	r24, r17
   132c6:	0e 94 02 b8 	call	0x17004	; 0x17004 <thermostat_ring_set_active(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2550
        if ((cnt == 1) && (strcmp(pch, "output") == 0)) thermostat_ring_set_output(id, atoi(my_payload));
   132ca:	65 ee       	ldi	r22, 0xE5	; 229
   132cc:	75 e0       	ldi	r23, 0x05	; 5
   132ce:	c7 01       	movw	r24, r14
   132d0:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
   132d4:	89 2b       	or	r24, r25
   132d6:	41 f4       	brne	.+16     	; 0x132e8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfc2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2550 (discriminator 2)
   132d8:	80 ee       	ldi	r24, 0xE0	; 224
   132da:	99 e0       	ldi	r25, 0x09	; 9
   132dc:	0f 94 f0 19 	call	0x233e0	; 0x233e0 <atoi>
   132e0:	68 2f       	mov	r22, r24
   132e2:	81 2f       	mov	r24, r17
   132e4:	0e 94 f2 b7 	call	0x16fe4	; 0x16fe4 <thermostat_ring_set_output(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2551
        if ((cnt == 1) && (strcmp(pch, "pid_kp") == 0)) thermostat_ring_pid_set_kp(id, atof(my_payload));
   132e8:	63 ef       	ldi	r22, 0xF3	; 243
   132ea:	77 e0       	ldi	r23, 0x07	; 7
   132ec:	c7 01       	movw	r24, r14
   132ee:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
   132f2:	89 2b       	or	r24, r25
   132f4:	49 f4       	brne	.+18     	; 0x13308 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfe2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2551 (discriminator 2)
   132f6:	80 ee       	ldi	r24, 0xE0	; 224
   132f8:	99 e0       	ldi	r25, 0x09	; 9
   132fa:	0f 94 ec 19 	call	0x233d8	; 0x233d8 <atof>
   132fe:	ab 01       	movw	r20, r22
   13300:	bc 01       	movw	r22, r24
   13302:	81 2f       	mov	r24, r17
   13304:	0e 94 8a b9 	call	0x17314	; 0x17314 <thermostat_ring_pid_set_kp(unsigned char, float)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2552
        if ((cnt == 1) && (strcmp(pch, "pid_ki") == 0)) thermostat_ring_pid_set_ki(id, atof(my_payload));
   13308:	6a ef       	ldi	r22, 0xFA	; 250
   1330a:	77 e0       	ldi	r23, 0x07	; 7
   1330c:	c7 01       	movw	r24, r14
   1330e:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
   13312:	89 2b       	or	r24, r25
   13314:	49 f4       	brne	.+18     	; 0x13328 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1002>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2552 (discriminator 2)
   13316:	80 ee       	ldi	r24, 0xE0	; 224
   13318:	99 e0       	ldi	r25, 0x09	; 9
   1331a:	0f 94 ec 19 	call	0x233d8	; 0x233d8 <atof>
   1331e:	ab 01       	movw	r20, r22
   13320:	bc 01       	movw	r22, r24
   13322:	81 2f       	mov	r24, r17
   13324:	0e 94 9d b9 	call	0x1733a	; 0x1733a <thermostat_ring_pid_set_ki(unsigned char, float)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2553
        if ((cnt == 1) && (strcmp(pch, "pid_kd") == 0)) thermostat_ring_pid_set_kd(id, atof(my_payload));
   13328:	61 e0       	ldi	r22, 0x01	; 1
   1332a:	78 e0       	ldi	r23, 0x08	; 8
   1332c:	c7 01       	movw	r24, r14
   1332e:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
   13332:	89 2b       	or	r24, r25
   13334:	49 f4       	brne	.+18     	; 0x13348 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1022>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2553 (discriminator 2)
   13336:	80 ee       	ldi	r24, 0xE0	; 224
   13338:	99 e0       	ldi	r25, 0x09	; 9
   1333a:	0f 94 ec 19 	call	0x233d8	; 0x233d8 <atof>
   1333e:	ab 01       	movw	r20, r22
   13340:	bc 01       	movw	r22, r24
   13342:	81 2f       	mov	r24, r17
   13344:	0e 94 b0 b9 	call	0x17360	; 0x17360 <thermostat_ring_pid_set_kd(unsigned char, float)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2554
        if ((cnt == 1) && (strcmp(pch, "pid_time") == 0)) thermostat_ring_pid_set_time(id, atoi(my_payload));
   13348:	68 e0       	ldi	r22, 0x08	; 8
   1334a:	78 e0       	ldi	r23, 0x08	; 8
   1334c:	c7 01       	movw	r24, r14
   1334e:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
   13352:	89 2b       	or	r24, r25
   13354:	41 f4       	brne	.+16     	; 0x13366 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1040>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2554 (discriminator 2)
   13356:	80 ee       	ldi	r24, 0xE0	; 224
   13358:	99 e0       	ldi	r25, 0x09	; 9
   1335a:	0f 94 f0 19 	call	0x233e0	; 0x233e0 <atoi>
   1335e:	68 2f       	mov	r22, r24
   13360:	81 2f       	mov	r24, r17
   13362:	0e 94 c3 b9 	call	0x17386	; 0x17386 <thermostat_ring_pid_set_time(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2560
      }
      else
      {
        log_error(&mqtt_client, "E");
      }
      pch = strtok (NULL, "/");
   13366:	63 e4       	ldi	r22, 0x43	; 67
   13368:	77 e0       	ldi	r23, 0x07	; 7
   1336a:	90 e0       	ldi	r25, 0x00	; 0
   1336c:	80 e0       	ldi	r24, 0x00	; 0
   1336e:	0f 94 29 1a 	call	0x23452	; 0x23452 <strtok>
   13372:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2561
      cnt++;
   13374:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2507
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
   13376:	c7 ce       	rjmp	.-626    	; 0x13106 <mqtt_callback(char*, unsigned char*, unsigned int)+0xde0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2566
      cnt++;
    }

  }
  //// nastaveni ringu do vychoziho stavu
  strcpy_P(str1, thermctl_header_in);
   13378:	60 e8       	ldi	r22, 0x80	; 128
   1337a:	71 e8       	ldi	r23, 0x81	; 129
   1337c:	c5 01       	movw	r24, r10
   1337e:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2567
  strcat(str1, device.nazev);
   13382:	6c ec       	ldi	r22, 0xCC	; 204
   13384:	7f e0       	ldi	r23, 0x0F	; 15
   13386:	c5 01       	movw	r24, r10
   13388:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2568
  strcat(str1, "/ring/clear");
   1338c:	60 e5       	ldi	r22, 0x50	; 80
   1338e:	77 e0       	ldi	r23, 0x07	; 7
   13390:	c5 01       	movw	r24, r10
   13392:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2569
  if (strncmp(str1, topic, strlen(str1)) == 0)
   13396:	f5 01       	movw	r30, r10
   13398:	01 90       	ld	r0, Z+
   1339a:	00 20       	and	r0, r0
   1339c:	e9 f7       	brne	.-6      	; 0x13398 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1072>
   1339e:	31 97       	sbiw	r30, 0x01	; 1
   133a0:	af 01       	movw	r20, r30
   133a2:	4a 19       	sub	r20, r10
   133a4:	5b 09       	sbc	r21, r11
   133a6:	b4 01       	movw	r22, r8
   133a8:	c5 01       	movw	r24, r10
   133aa:	0f 94 6e 1a 	call	0x234dc	; 0x234dc <strncmp>
   133ae:	89 2b       	or	r24, r25
   133b0:	99 f4       	brne	.+38     	; 0x133d8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10b2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2571
  {
    mqtt_process_message++;
   133b2:	80 91 ae 0f 	lds	r24, 0x0FAE	; 0x800fae <mqtt_process_message>
   133b6:	90 91 af 0f 	lds	r25, 0x0FAF	; 0x800faf <mqtt_process_message+0x1>
   133ba:	01 96       	adiw	r24, 0x01	; 1
   133bc:	90 93 af 0f 	sts	0x0FAF, r25	; 0x800faf <mqtt_process_message+0x1>
   133c0:	80 93 ae 0f 	sts	0x0FAE, r24	; 0x800fae <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2572
    id = atoi(my_payload);
   133c4:	80 ee       	ldi	r24, 0xE0	; 224
   133c6:	99 e0       	ldi	r25, 0x09	; 9
   133c8:	0f 94 f0 19 	call	0x233e0	; 0x233e0 <atoi>
   133cc:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2573
    if (id < MAX_THERMOSTAT)
   133ce:	85 30       	cpi	r24, 0x05	; 5
   133d0:	08 f0       	brcs	.+2      	; 0x133d4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10ae>
   133d2:	76 c0       	rjmp	.+236    	; 0x134c0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x119a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2575
    {
      thermostat_ring_clear(id);
   133d4:	0e 94 46 bc 	call	0x1788c	; 0x1788c <thermostat_ring_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2586
  }
  ////////
  ////////
  //// nastavovani vlastnosti site
  //// ziskani nastaveni site
  strcpy_P(str1, thermctl_header_in);
   133d8:	60 e8       	ldi	r22, 0x80	; 128
   133da:	71 e8       	ldi	r23, 0x81	; 129
   133dc:	c5 01       	movw	r24, r10
   133de:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2587
  strcat(str1, device.nazev);
   133e2:	6c ec       	ldi	r22, 0xCC	; 204
   133e4:	7f e0       	ldi	r23, 0x0F	; 15
   133e6:	c5 01       	movw	r24, r10
   133e8:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2588
  strcat(str1, "/network/get/config");
   133ec:	6c e5       	ldi	r22, 0x5C	; 92
   133ee:	77 e0       	ldi	r23, 0x07	; 7
   133f0:	c5 01       	movw	r24, r10
   133f2:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2589
  if (strncmp(str1, topic, strlen(str1)) == 0)
   133f6:	f5 01       	movw	r30, r10
   133f8:	01 90       	ld	r0, Z+
   133fa:	00 20       	and	r0, r0
   133fc:	e9 f7       	brne	.-6      	; 0x133f8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10d2>
   133fe:	31 97       	sbiw	r30, 0x01	; 1
   13400:	af 01       	movw	r20, r30
   13402:	4a 19       	sub	r20, r10
   13404:	5b 09       	sbc	r21, r11
   13406:	b4 01       	movw	r22, r8
   13408:	c5 01       	movw	r24, r10
   1340a:	0f 94 6e 1a 	call	0x234dc	; 0x234dc <strncmp>
   1340e:	89 2b       	or	r24, r25
   13410:	69 f4       	brne	.+26     	; 0x1342c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1106>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2591
  {
    mqtt_process_message++;
   13412:	80 91 ae 0f 	lds	r24, 0x0FAE	; 0x800fae <mqtt_process_message>
   13416:	90 91 af 0f 	lds	r25, 0x0FAF	; 0x800faf <mqtt_process_message+0x1>
   1341a:	01 96       	adiw	r24, 0x01	; 1
   1341c:	90 93 af 0f 	sts	0x0FAF, r25	; 0x800faf <mqtt_process_message+0x1>
   13420:	80 93 ae 0f 	sts	0x0FAE, r24	; 0x800fae <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2592
    send_network_config(&mqtt_client);
   13424:	8c ea       	ldi	r24, 0xAC	; 172
   13426:	9e e0       	ldi	r25, 0x0E	; 14
   13428:	0e 94 34 ae 	call	0x15c68	; 0x15c68 <send_network_config(PubSubClient*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2606
  //// thermctl-in/XXXXX/network/set/mqtt_host
  //// thermctl-in/XXXXX/network/set/mqtt_port
  //// thermctl-in/XXXXX/network/set/mqtt_user
  //// thermctl-in/XXXXX/network/set/mqtt_key
  //// thermctl-in/XXXXX/network/set/name
  strcpy_P(str1, thermctl_header_in);
   1342c:	60 e8       	ldi	r22, 0x80	; 128
   1342e:	71 e8       	ldi	r23, 0x81	; 129
   13430:	c5 01       	movw	r24, r10
   13432:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2607
  strcat(str1, device.nazev);
   13436:	6c ec       	ldi	r22, 0xCC	; 204
   13438:	7f e0       	ldi	r23, 0x0F	; 15
   1343a:	c5 01       	movw	r24, r10
   1343c:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2608
  strcat(str1, "/network/set/");
   13440:	60 e7       	ldi	r22, 0x70	; 112
   13442:	77 e0       	ldi	r23, 0x07	; 7
   13444:	c5 01       	movw	r24, r10
   13446:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2609
  if (strncmp(str1, topic, strlen(str1)) == 0)
   1344a:	f5 01       	movw	r30, r10
   1344c:	01 90       	ld	r0, Z+
   1344e:	00 20       	and	r0, r0
   13450:	e9 f7       	brne	.-6      	; 0x1344c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1126>
   13452:	31 97       	sbiw	r30, 0x01	; 1
   13454:	af 01       	movw	r20, r30
   13456:	4a 19       	sub	r20, r10
   13458:	5b 09       	sbc	r21, r11
   1345a:	b4 01       	movw	r22, r8
   1345c:	c5 01       	movw	r24, r10
   1345e:	0f 94 6e 1a 	call	0x234dc	; 0x234dc <strncmp>
   13462:	89 2b       	or	r24, r25
   13464:	09 f0       	breq	.+2      	; 0x13468 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1142>
   13466:	44 c0       	rjmp	.+136    	; 0x134f0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11ca>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2611
  {
    mqtt_process_message++;
   13468:	80 91 ae 0f 	lds	r24, 0x0FAE	; 0x800fae <mqtt_process_message>
   1346c:	90 91 af 0f 	lds	r25, 0x0FAF	; 0x800faf <mqtt_process_message+0x1>
   13470:	01 96       	adiw	r24, 0x01	; 1
   13472:	90 93 af 0f 	sts	0x0FAF, r25	; 0x800faf <mqtt_process_message+0x1>
   13476:	80 93 ae 0f 	sts	0x0FAE, r24	; 0x800fae <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2613
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   1347a:	f5 01       	movw	r30, r10
   1347c:	01 90       	ld	r0, Z+
   1347e:	00 20       	and	r0, r0
   13480:	e9 f7       	brne	.-6      	; 0x1347c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1156>
   13482:	31 97       	sbiw	r30, 0x01	; 1
   13484:	ea 19       	sub	r30, r10
   13486:	fb 09       	sbc	r31, r11
   13488:	9e 2f       	mov	r25, r30
   1348a:	4e 2f       	mov	r20, r30
   1348c:	84 2f       	mov	r24, r20
   1348e:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2613 (discriminator 3)
   13490:	24 2f       	mov	r18, r20
   13492:	30 e0       	ldi	r19, 0x00	; 0
   13494:	d4 01       	movw	r26, r8
   13496:	0d 90       	ld	r0, X+
   13498:	00 20       	and	r0, r0
   1349a:	e9 f7       	brne	.-6      	; 0x13496 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1170>
   1349c:	11 97       	sbiw	r26, 0x01	; 1
   1349e:	a8 19       	sub	r26, r8
   134a0:	b9 09       	sbc	r27, r9
   134a2:	2a 17       	cp	r18, r26
   134a4:	3b 07       	cpc	r19, r27
   134a6:	98 f4       	brcc	.+38     	; 0x134ce <mqtt_callback(char*, unsigned char*, unsigned int)+0x11a8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2615 (discriminator 2)
    {
      str1[cnt] = topic[f];
   134a8:	d5 01       	movw	r26, r10
   134aa:	a8 0f       	add	r26, r24
   134ac:	b1 1d       	adc	r27, r1
   134ae:	28 0d       	add	r18, r8
   134b0:	39 1d       	adc	r19, r9
   134b2:	f9 01       	movw	r30, r18
   134b4:	80 81       	ld	r24, Z
   134b6:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2616 (discriminator 2)
      str1[cnt + 1] = 0;
   134b8:	11 96       	adiw	r26, 0x01	; 1
   134ba:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2613 (discriminator 2)
  strcat(str1, "/network/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   134bc:	4f 5f       	subi	r20, 0xFF	; 255
   134be:	e6 cf       	rjmp	.-52     	; 0x1348c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1166>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2579
    {
      thermostat_ring_clear(id);
    }
    else
    {
      log_error(&mqtt_client, "E");
   134c0:	6b e6       	ldi	r22, 0x6B	; 107
   134c2:	78 e0       	ldi	r23, 0x08	; 8
   134c4:	8c ea       	ldi	r24, 0xAC	; 172
   134c6:	9e e0       	ldi	r25, 0x0E	; 14
   134c8:	0e 94 c0 b0 	call	0x16180	; 0x16180 <log_error(PubSubClient*, char*)>
   134cc:	85 cf       	rjmp	.-246    	; 0x133d8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10b2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2619
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = setting_network(str1, my_payload);
   134ce:	60 ee       	ldi	r22, 0xE0	; 224
   134d0:	79 e0       	ldi	r23, 0x09	; 9
   134d2:	c5 01       	movw	r24, r10
   134d4:	0e 94 d2 ab 	call	0x157a4	; 0x157a4 <setting_network(char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2620
    if (cnt == 1)
   134d8:	81 30       	cpi	r24, 0x01	; 1
   134da:	41 f4       	brne	.+16     	; 0x134ec <mqtt_callback(char*, unsigned char*, unsigned int)+0x11c6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2622
    {
      save_setup_network();
   134dc:	0e 94 f2 aa 	call	0x155e4	; 0x155e4 <save_setup_network()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2627
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    }
    if (cnt == 2)
    {
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
   134e0:	80 91 60 0b 	lds	r24, 0x0B60	; 0x800b60 <selftest_data>
   134e4:	80 68       	ori	r24, 0x80	; 128
   134e6:	80 93 60 0b 	sts	0x0B60, r24	; 0x800b60 <selftest_data>
   134ea:	02 c0       	rjmp	.+4      	; 0x134f0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11ca>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2625
    if (cnt == 1)
    {
      save_setup_network();
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    }
    if (cnt == 2)
   134ec:	82 30       	cpi	r24, 0x02	; 2
   134ee:	c1 f3       	breq	.-16     	; 0x134e0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11ba>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2632
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    }
  }
  //// priradi k menu pro rizeni intezity svetla vystup
  //// thermctl-in/XXXXX//light/set/IDX/output
  strcpy_P(str1, thermctl_header_in);
   134f0:	60 e8       	ldi	r22, 0x80	; 128
   134f2:	71 e8       	ldi	r23, 0x81	; 129
   134f4:	c5 01       	movw	r24, r10
   134f6:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2633
  strcat(str1, device.nazev);
   134fa:	6c ec       	ldi	r22, 0xCC	; 204
   134fc:	7f e0       	ldi	r23, 0x0F	; 15
   134fe:	c5 01       	movw	r24, r10
   13500:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2634
  strcat(str1, "/light/set/");
   13504:	6e e7       	ldi	r22, 0x7E	; 126
   13506:	77 e0       	ldi	r23, 0x07	; 7
   13508:	c5 01       	movw	r24, r10
   1350a:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2635
  if (strncmp(str1, topic, strlen(str1)) == 0)
   1350e:	f5 01       	movw	r30, r10
   13510:	01 90       	ld	r0, Z+
   13512:	00 20       	and	r0, r0
   13514:	e9 f7       	brne	.-6      	; 0x13510 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11ea>
   13516:	31 97       	sbiw	r30, 0x01	; 1
   13518:	af 01       	movw	r20, r30
   1351a:	4a 19       	sub	r20, r10
   1351c:	5b 09       	sbc	r21, r11
   1351e:	b4 01       	movw	r22, r8
   13520:	c5 01       	movw	r24, r10
   13522:	0f 94 6e 1a 	call	0x234dc	; 0x234dc <strncmp>
   13526:	89 2b       	or	r24, r25
   13528:	09 f0       	breq	.+2      	; 0x1352c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1206>
   1352a:	41 c0       	rjmp	.+130    	; 0x135ae <mqtt_callback(char*, unsigned char*, unsigned int)+0x1288>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2637
  {
    mqtt_process_message++;
   1352c:	80 91 ae 0f 	lds	r24, 0x0FAE	; 0x800fae <mqtt_process_message>
   13530:	90 91 af 0f 	lds	r25, 0x0FAF	; 0x800faf <mqtt_process_message+0x1>
   13534:	01 96       	adiw	r24, 0x01	; 1
   13536:	90 93 af 0f 	sts	0x0FAF, r25	; 0x800faf <mqtt_process_message+0x1>
   1353a:	80 93 ae 0f 	sts	0x0FAE, r24	; 0x800fae <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2640
    //strncpy(str2, payload, length);
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   1353e:	f5 01       	movw	r30, r10
   13540:	01 90       	ld	r0, Z+
   13542:	00 20       	and	r0, r0
   13544:	e9 f7       	brne	.-6      	; 0x13540 <mqtt_callback(char*, unsigned char*, unsigned int)+0x121a>
   13546:	31 97       	sbiw	r30, 0x01	; 1
   13548:	ea 19       	sub	r30, r10
   1354a:	fb 09       	sbc	r31, r11
   1354c:	9e 2f       	mov	r25, r30
   1354e:	4e 2f       	mov	r20, r30
   13550:	84 2f       	mov	r24, r20
   13552:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2640 (discriminator 3)
   13554:	24 2f       	mov	r18, r20
   13556:	30 e0       	ldi	r19, 0x00	; 0
   13558:	d4 01       	movw	r26, r8
   1355a:	0d 90       	ld	r0, X+
   1355c:	00 20       	and	r0, r0
   1355e:	e9 f7       	brne	.-6      	; 0x1355a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1234>
   13560:	11 97       	sbiw	r26, 0x01	; 1
   13562:	a8 19       	sub	r26, r8
   13564:	b9 09       	sbc	r27, r9
   13566:	2a 17       	cp	r18, r26
   13568:	3b 07       	cpc	r19, r27
   1356a:	60 f4       	brcc	.+24     	; 0x13584 <mqtt_callback(char*, unsigned char*, unsigned int)+0x125e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2642 (discriminator 2)
    {
      str1[cnt] = topic[f];
   1356c:	d5 01       	movw	r26, r10
   1356e:	a8 0f       	add	r26, r24
   13570:	b1 1d       	adc	r27, r1
   13572:	28 0d       	add	r18, r8
   13574:	39 1d       	adc	r19, r9
   13576:	f9 01       	movw	r30, r18
   13578:	80 81       	ld	r24, Z
   1357a:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2643 (discriminator 2)
      str1[cnt + 1] = 0;
   1357c:	11 96       	adiw	r26, 0x01	; 1
   1357e:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2640 (discriminator 2)
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    //strncpy(str2, payload, length);
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   13580:	4f 5f       	subi	r20, 0xFF	; 255
   13582:	e6 cf       	rjmp	.-52     	; 0x13550 <mqtt_callback(char*, unsigned char*, unsigned int)+0x122a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2647
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
   13584:	63 e4       	ldi	r22, 0x43	; 67
   13586:	77 e0       	ldi	r23, 0x07	; 7
   13588:	c5 01       	movw	r24, r10
   1358a:	0f 94 29 1a 	call	0x23452	; 0x23452 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2646
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
   1358e:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2648
    pch = strtok (str1, "/");
    while (pch != NULL)
   13590:	00 97       	sbiw	r24, 0x00	; 0
   13592:	69 f0       	breq	.+26     	; 0x135ae <mqtt_callback(char*, unsigned char*, unsigned int)+0x1288>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2650
    {
      if (cnt == 0) id = atoi(pch);
   13594:	01 11       	cpse	r16, r1
   13596:	03 c0       	rjmp	.+6      	; 0x1359e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1278>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2650 (discriminator 1)
   13598:	0f 94 f0 19 	call	0x233e0	; 0x233e0 <atoi>
   1359c:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2653
      //if ((cnt == 1) && (strcmp(pch, "output") == 0)) light_set_output(id, atoi(my_payload));
      //if ((cnt == 1) && (strcmp(pch, "value") == 0)) light_value[id] = atoi(my_payload);
      pch = strtok (NULL, "/");
   1359e:	63 e4       	ldi	r22, 0x43	; 67
   135a0:	77 e0       	ldi	r23, 0x07	; 7
   135a2:	90 e0       	ldi	r25, 0x00	; 0
   135a4:	80 e0       	ldi	r24, 0x00	; 0
   135a6:	0f 94 29 1a 	call	0x23452	; 0x23452 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2654
      cnt++;
   135aa:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2648
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
   135ac:	f1 cf       	rjmp	.-30     	; 0x13590 <mqtt_callback(char*, unsigned char*, unsigned int)+0x126a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2659
      cnt++;
    }
  }
  ///
  /// zpetna vazba od vystupu
  strcpy_P(str1, termbig_header_out);
   135ae:	66 e5       	ldi	r22, 0x56	; 86
   135b0:	71 e8       	ldi	r23, 0x81	; 129
   135b2:	c5 01       	movw	r24, r10
   135b4:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2660
  strcat(str1, "output/");
   135b8:	67 e3       	ldi	r22, 0x37	; 55
   135ba:	74 e0       	ldi	r23, 0x04	; 4
   135bc:	c5 01       	movw	r24, r10
   135be:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2661
  if (strncmp(str1, topic, strlen(str1)) == 0)
   135c2:	f5 01       	movw	r30, r10
   135c4:	01 90       	ld	r0, Z+
   135c6:	00 20       	and	r0, r0
   135c8:	e9 f7       	brne	.-6      	; 0x135c4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x129e>
   135ca:	31 97       	sbiw	r30, 0x01	; 1
   135cc:	af 01       	movw	r20, r30
   135ce:	4a 19       	sub	r20, r10
   135d0:	5b 09       	sbc	r21, r11
   135d2:	b4 01       	movw	r22, r8
   135d4:	c5 01       	movw	r24, r10
   135d6:	0f 94 6e 1a 	call	0x234dc	; 0x234dc <strncmp>
   135da:	89 2b       	or	r24, r25
   135dc:	09 f0       	breq	.+2      	; 0x135e0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x12ba>
   135de:	6d c0       	rjmp	.+218    	; 0x136ba <mqtt_callback(char*, unsigned char*, unsigned int)+0x1394>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2663
  {
    mqtt_process_message++;
   135e0:	80 91 ae 0f 	lds	r24, 0x0FAE	; 0x800fae <mqtt_process_message>
   135e4:	90 91 af 0f 	lds	r25, 0x0FAF	; 0x800faf <mqtt_process_message+0x1>
   135e8:	01 96       	adiw	r24, 0x01	; 1
   135ea:	90 93 af 0f 	sts	0x0FAF, r25	; 0x800faf <mqtt_process_message+0x1>
   135ee:	80 93 ae 0f 	sts	0x0FAE, r24	; 0x800fae <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2665
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   135f2:	f5 01       	movw	r30, r10
   135f4:	01 90       	ld	r0, Z+
   135f6:	00 20       	and	r0, r0
   135f8:	e9 f7       	brne	.-6      	; 0x135f4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x12ce>
   135fa:	31 97       	sbiw	r30, 0x01	; 1
   135fc:	ea 19       	sub	r30, r10
   135fe:	fb 09       	sbc	r31, r11
   13600:	9e 2f       	mov	r25, r30
   13602:	4e 2f       	mov	r20, r30
   13604:	84 2f       	mov	r24, r20
   13606:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2665 (discriminator 3)
   13608:	24 2f       	mov	r18, r20
   1360a:	30 e0       	ldi	r19, 0x00	; 0
   1360c:	d4 01       	movw	r26, r8
   1360e:	0d 90       	ld	r0, X+
   13610:	00 20       	and	r0, r0
   13612:	e9 f7       	brne	.-6      	; 0x1360e <mqtt_callback(char*, unsigned char*, unsigned int)+0x12e8>
   13614:	11 97       	sbiw	r26, 0x01	; 1
   13616:	a8 19       	sub	r26, r8
   13618:	b9 09       	sbc	r27, r9
   1361a:	2a 17       	cp	r18, r26
   1361c:	3b 07       	cpc	r19, r27
   1361e:	60 f4       	brcc	.+24     	; 0x13638 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1312>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2667 (discriminator 2)
    {
      str1[cnt] = topic[f];
   13620:	d5 01       	movw	r26, r10
   13622:	a8 0f       	add	r26, r24
   13624:	b1 1d       	adc	r27, r1
   13626:	28 0d       	add	r18, r8
   13628:	39 1d       	adc	r19, r9
   1362a:	f9 01       	movw	r30, r18
   1362c:	80 81       	ld	r24, Z
   1362e:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2668 (discriminator 2)
      str1[cnt + 1] = 0;
   13630:	11 96       	adiw	r26, 0x01	; 1
   13632:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2665 (discriminator 2)
  strcat(str1, "output/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   13634:	4f 5f       	subi	r20, 0xFF	; 255
   13636:	e6 cf       	rjmp	.-52     	; 0x13604 <mqtt_callback(char*, unsigned char*, unsigned int)+0x12de>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2672
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
   13638:	63 e4       	ldi	r22, 0x43	; 67
   1363a:	77 e0       	ldi	r23, 0x07	; 7
   1363c:	c5 01       	movw	r24, r10
   1363e:	0f 94 29 1a 	call	0x23452	; 0x23452 <strtok>
   13642:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2671
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
   13644:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2673
    pch = strtok (str1, "/");
    while (pch != NULL)
   13646:	e1 14       	cp	r14, r1
   13648:	f1 04       	cpc	r15, r1
   1364a:	b9 f1       	breq	.+110    	; 0x136ba <mqtt_callback(char*, unsigned char*, unsigned int)+0x1394>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2675
    {
      if (cnt == 0) id = atoi(pch);
   1364c:	01 11       	cpse	r16, r1
   1364e:	0d c0       	rjmp	.+26     	; 0x1366a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1344>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2675 (discriminator 1)
   13650:	c7 01       	movw	r24, r14
   13652:	0f 94 f0 19 	call	0x233e0	; 0x233e0 <atoi>
   13656:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2686
            if (strcmp(pch, "pwm")) last_output_update[id] = 0;
            if (strcmp(pch, "state")) last_output_update[id] = 0;
            break;
          }
      }
      pch = strtok (NULL, "/");
   13658:	63 e4       	ldi	r22, 0x43	; 67
   1365a:	77 e0       	ldi	r23, 0x07	; 7
   1365c:	90 e0       	ldi	r25, 0x00	; 0
   1365e:	80 e0       	ldi	r24, 0x00	; 0
   13660:	0f 94 29 1a 	call	0x23452	; 0x23452 <strtok>
   13664:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2687
      cnt++;
   13666:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2673
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
   13668:	ee cf       	rjmp	.-36     	; 0x13646 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1320>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2676
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1)
   1366a:	01 30       	cpi	r16, 0x01	; 1
   1366c:	a9 f7       	brne	.-22     	; 0x13658 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1332>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2678
      {
        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
   1366e:	d1 2c       	mov	r13, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2679
          if (thermostat_ring_get_output(idx) == id)
   13670:	8d 2d       	mov	r24, r13
   13672:	0e 94 ea b7 	call	0x16fd4	; 0x16fd4 <thermostat_ring_get_output(unsigned char)>
   13676:	c8 2e       	mov	r12, r24
   13678:	81 13       	cpse	r24, r17
   1367a:	1a c0       	rjmp	.+52     	; 0x136b0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x138a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2681
          {
            if (strcmp(pch, "pwm")) last_output_update[id] = 0;
   1367c:	6d e5       	ldi	r22, 0x5D	; 93
   1367e:	74 e0       	ldi	r23, 0x04	; 4
   13680:	c7 01       	movw	r24, r14
   13682:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
   13686:	89 2b       	or	r24, r25
   13688:	29 f0       	breq	.+10     	; 0x13694 <mqtt_callback(char*, unsigned char*, unsigned int)+0x136e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2681 (discriminator 1)
   1368a:	e1 2f       	mov	r30, r17
   1368c:	f0 e0       	ldi	r31, 0x00	; 0
   1368e:	ef 59       	subi	r30, 0x9F	; 159
   13690:	f4 4f       	sbci	r31, 0xF4	; 244
   13692:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2682
            if (strcmp(pch, "state")) last_output_update[id] = 0;
   13694:	60 e4       	ldi	r22, 0x40	; 64
   13696:	74 e0       	ldi	r23, 0x04	; 4
   13698:	c7 01       	movw	r24, r14
   1369a:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
   1369e:	89 2b       	or	r24, r25
   136a0:	29 f0       	breq	.+10     	; 0x136ac <mqtt_callback(char*, unsigned char*, unsigned int)+0x1386>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2682 (discriminator 1)
   136a2:	e1 2f       	mov	r30, r17
   136a4:	f0 e0       	ldi	r31, 0x00	; 0
   136a6:	ef 59       	subi	r30, 0x9F	; 159
   136a8:	f4 4f       	sbci	r31, 0xF4	; 244
   136aa:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2679
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1)
      {
        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
          if (thermostat_ring_get_output(idx) == id)
   136ac:	1c 2d       	mov	r17, r12
   136ae:	d4 cf       	rjmp	.-88     	; 0x13658 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1332>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2678 (discriminator 2)
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1)
      {
        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
   136b0:	d3 94       	inc	r13
   136b2:	f5 e0       	ldi	r31, 0x05	; 5
   136b4:	df 12       	cpse	r13, r31
   136b6:	dc cf       	rjmp	.-72     	; 0x13670 <mqtt_callback(char*, unsigned char*, unsigned int)+0x134a>
   136b8:	cf cf       	rjmp	.-98     	; 0x13658 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1332>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2692
      cnt++;
    }
  }

  //// /thermctl-in/XXXX/rf/scan - 0|1 zapnuti/vypnuti scanovani rf site
  strcpy_P(str1, thermctl_header_in);
   136ba:	60 e8       	ldi	r22, 0x80	; 128
   136bc:	71 e8       	ldi	r23, 0x81	; 129
   136be:	c5 01       	movw	r24, r10
   136c0:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2693
  strcat(str1, device.nazev);
   136c4:	6c ec       	ldi	r22, 0xCC	; 204
   136c6:	7f e0       	ldi	r23, 0x0F	; 15
   136c8:	c5 01       	movw	r24, r10
   136ca:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2694
  strcat(str1, "/rf/scan");
   136ce:	6a e8       	ldi	r22, 0x8A	; 138
   136d0:	77 e0       	ldi	r23, 0x07	; 7
   136d2:	c5 01       	movw	r24, r10
   136d4:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2695
  if (strcmp(str1, topic) == 0)
   136d8:	b4 01       	movw	r22, r8
   136da:	c5 01       	movw	r24, r10
   136dc:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
   136e0:	89 2b       	or	r24, r25
   136e2:	b9 f4       	brne	.+46     	; 0x13712 <mqtt_callback(char*, unsigned char*, unsigned int)+0x13ec>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2697
  {
    mqtt_process_message++;
   136e4:	80 91 ae 0f 	lds	r24, 0x0FAE	; 0x800fae <mqtt_process_message>
   136e8:	90 91 af 0f 	lds	r25, 0x0FAF	; 0x800faf <mqtt_process_message+0x1>
   136ec:	01 96       	adiw	r24, 0x01	; 1
   136ee:	90 93 af 0f 	sts	0x0FAF, r25	; 0x800faf <mqtt_process_message+0x1>
   136f2:	80 93 ae 0f 	sts	0x0FAE, r24	; 0x800fae <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2698
    if (atoi(my_payload) == 1)
   136f6:	80 ee       	ldi	r24, 0xE0	; 224
   136f8:	99 e0       	ldi	r25, 0x09	; 9
   136fa:	0f 94 f0 19 	call	0x233e0	; 0x233e0 <atoi>
   136fe:	01 97       	sbiw	r24, 0x01	; 1
   13700:	09 f0       	breq	.+2      	; 0x13704 <mqtt_callback(char*, unsigned char*, unsigned int)+0x13de>
   13702:	ff c0       	rjmp	.+510    	; 0x13902 <mqtt_callback(char*, unsigned char*, unsigned int)+0x15dc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2700
    {
      start_scan_rf_network(&radio);
   13704:	8e e8       	ldi	r24, 0x8E	; 142
   13706:	9e e0       	ldi	r25, 0x0E	; 14
   13708:	0e 94 11 b1 	call	0x16222	; 0x16222 <start_scan_rf_network(RF24*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2701
      selftest_set_0(SELFTEST_NRF_SCAN);
   1370c:	84 e0       	ldi	r24, 0x04	; 4
   1370e:	0e 94 f1 6d 	call	0xdbe2	; 0xdbe2 <selftest_set_0(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2712
      selftest_clear_0(SELFTEST_NRF_SCAN);
    }
  }

  ///// //thermctl-in/XXXX/rf/stat - statisticke informace
  strcpy_P(str1, thermctl_header_in);
   13712:	60 e8       	ldi	r22, 0x80	; 128
   13714:	71 e8       	ldi	r23, 0x81	; 129
   13716:	c5 01       	movw	r24, r10
   13718:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2713
  strcat(str1, device.nazev);
   1371c:	6c ec       	ldi	r22, 0xCC	; 204
   1371e:	7f e0       	ldi	r23, 0x0F	; 15
   13720:	c5 01       	movw	r24, r10
   13722:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2714
  strcat(str1, "/rf/stat");
   13726:	63 e9       	ldi	r22, 0x93	; 147
   13728:	77 e0       	ldi	r23, 0x07	; 7
   1372a:	c5 01       	movw	r24, r10
   1372c:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2715
  if (strcmp(str1, topic) == 0)
   13730:	b4 01       	movw	r22, r8
   13732:	c5 01       	movw	r24, r10
   13734:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
   13738:	89 2b       	or	r24, r25
   1373a:	61 f4       	brne	.+24     	; 0x13754 <mqtt_callback(char*, unsigned char*, unsigned int)+0x142e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2717
  {
    mqtt_process_message++;
   1373c:	80 91 ae 0f 	lds	r24, 0x0FAE	; 0x800fae <mqtt_process_message>
   13740:	90 91 af 0f 	lds	r25, 0x0FAF	; 0x800faf <mqtt_process_message+0x1>
   13744:	01 96       	adiw	r24, 0x01	; 1
   13746:	90 93 af 0f 	sts	0x0FAF, r25	; 0x800faf <mqtt_process_message+0x1>
   1374a:	80 93 ae 0f 	sts	0x0FAE, r24	; 0x800fae <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2718
    scan_rf_net_enable = 2;
   1374e:	82 e0       	ldi	r24, 0x02	; 2
   13750:	80 93 92 10 	sts	0x1092, r24	; 0x801092 <scan_rf_net_enable>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2722
  }

  ///// //thermctl-in/XXXX/rf/channel - nastaveni komunikacniho kanalu
  strcpy_P(str1, thermctl_header_in);
   13754:	60 e8       	ldi	r22, 0x80	; 128
   13756:	71 e8       	ldi	r23, 0x81	; 129
   13758:	c5 01       	movw	r24, r10
   1375a:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2723
  strcat(str1, device.nazev);
   1375e:	6c ec       	ldi	r22, 0xCC	; 204
   13760:	7f e0       	ldi	r23, 0x0F	; 15
   13762:	c5 01       	movw	r24, r10
   13764:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2724
  strcat(str1, "/rf/channel");
   13768:	6c e9       	ldi	r22, 0x9C	; 156
   1376a:	77 e0       	ldi	r23, 0x07	; 7
   1376c:	c5 01       	movw	r24, r10
   1376e:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2725
  if (strcmp(str1, topic) == 0)
   13772:	b4 01       	movw	r22, r8
   13774:	c5 01       	movw	r24, r10
   13776:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
   1377a:	89 2b       	or	r24, r25
   1377c:	c1 f4       	brne	.+48     	; 0x137ae <mqtt_callback(char*, unsigned char*, unsigned int)+0x1488>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2727
  {
    mqtt_process_message++;
   1377e:	80 91 ae 0f 	lds	r24, 0x0FAE	; 0x800fae <mqtt_process_message>
   13782:	90 91 af 0f 	lds	r25, 0x0FAF	; 0x800faf <mqtt_process_message+0x1>
   13786:	01 96       	adiw	r24, 0x01	; 1
   13788:	90 93 af 0f 	sts	0x0FAF, r25	; 0x800faf <mqtt_process_message+0x1>
   1378c:	80 93 ae 0f 	sts	0x0FAE, r24	; 0x800fae <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2728
    nrf_save_channel(atoi(my_payload));
   13790:	80 ee       	ldi	r24, 0xE0	; 224
   13792:	99 e0       	ldi	r25, 0x09	; 9
   13794:	0f 94 f0 19 	call	0x233e0	; 0x233e0 <atoi>
   13798:	0e 94 fd b0 	call	0x161fa	; 0x161fa <nrf_save_channel(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2729
    mesh.setChannel(atoi(my_payload));
   1379c:	80 ee       	ldi	r24, 0xE0	; 224
   1379e:	99 e0       	ldi	r25, 0x09	; 9
   137a0:	0f 94 f0 19 	call	0x233e0	; 0x233e0 <atoi>
   137a4:	68 2f       	mov	r22, r24
   137a6:	84 e0       	ldi	r24, 0x04	; 4
   137a8:	9d e0       	ldi	r25, 0x0D	; 13
   137aa:	0f 94 2f 01 	call	0x2025e	; 0x2025e <RF24Mesh::setChannel(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2733
  }

  ///// //thermctl-in/XXXX/rf/mesh/id - nastaveni komunikacniho kanalu
  strcpy_P(str1, thermctl_header_in);
   137ae:	60 e8       	ldi	r22, 0x80	; 128
   137b0:	71 e8       	ldi	r23, 0x81	; 129
   137b2:	c5 01       	movw	r24, r10
   137b4:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2734
  strcat(str1, device.nazev);
   137b8:	6c ec       	ldi	r22, 0xCC	; 204
   137ba:	7f e0       	ldi	r23, 0x0F	; 15
   137bc:	c5 01       	movw	r24, r10
   137be:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2735
  strcat(str1, "/rf/mesh/id");
   137c2:	68 ea       	ldi	r22, 0xA8	; 168
   137c4:	77 e0       	ldi	r23, 0x07	; 7
   137c6:	c5 01       	movw	r24, r10
   137c8:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2736
  if (strcmp(str1, topic) == 0)
   137cc:	b4 01       	movw	r22, r8
   137ce:	c5 01       	movw	r24, r10
   137d0:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
   137d4:	89 2b       	or	r24, r25
   137d6:	91 f4       	brne	.+36     	; 0x137fc <mqtt_callback(char*, unsigned char*, unsigned int)+0x14d6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2738
  {
    mqtt_process_message++;
   137d8:	80 91 ae 0f 	lds	r24, 0x0FAE	; 0x800fae <mqtt_process_message>
   137dc:	90 91 af 0f 	lds	r25, 0x0FAF	; 0x800faf <mqtt_process_message+0x1>
   137e0:	01 96       	adiw	r24, 0x01	; 1
   137e2:	90 93 af 0f 	sts	0x0FAF, r25	; 0x800faf <mqtt_process_message+0x1>
   137e6:	80 93 ae 0f 	sts	0x0FAE, r24	; 0x800fae <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2739
    mesh.setNodeID(atoi(my_payload));
   137ea:	80 ee       	ldi	r24, 0xE0	; 224
   137ec:	99 e0       	ldi	r25, 0x09	; 9
   137ee:	0f 94 f0 19 	call	0x233e0	; 0x233e0 <atoi>
   137f2:	68 2f       	mov	r22, r24
   137f4:	84 e0       	ldi	r24, 0x04	; 4
   137f6:	9d e0       	ldi	r25, 0x0D	; 13
   137f8:	0f 94 ca 04 	call	0x20994	; 0x20994 <RF24Mesh::setNodeID(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2743
  }

  ///// //thermctl-in/XXXX/rf/power - nastaveni komunikacniho kanalu
  strcpy_P(str1, thermctl_header_in);
   137fc:	60 e8       	ldi	r22, 0x80	; 128
   137fe:	71 e8       	ldi	r23, 0x81	; 129
   13800:	c5 01       	movw	r24, r10
   13802:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2744
  strcat(str1, device.nazev);
   13806:	6c ec       	ldi	r22, 0xCC	; 204
   13808:	7f e0       	ldi	r23, 0x0F	; 15
   1380a:	c5 01       	movw	r24, r10
   1380c:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2745
  strcat(str1, "/rf/power");
   13810:	64 eb       	ldi	r22, 0xB4	; 180
   13812:	77 e0       	ldi	r23, 0x07	; 7
   13814:	c5 01       	movw	r24, r10
   13816:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2746
  if (strcmp(str1, topic) == 0)
   1381a:	b4 01       	movw	r22, r8
   1381c:	c5 01       	movw	r24, r10
   1381e:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
   13822:	89 2b       	or	r24, r25
   13824:	c1 f4       	brne	.+48     	; 0x13856 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1530>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2748
  {
    mqtt_process_message++;
   13826:	80 91 ae 0f 	lds	r24, 0x0FAE	; 0x800fae <mqtt_process_message>
   1382a:	90 91 af 0f 	lds	r25, 0x0FAF	; 0x800faf <mqtt_process_message+0x1>
   1382e:	01 96       	adiw	r24, 0x01	; 1
   13830:	90 93 af 0f 	sts	0x0FAF, r25	; 0x800faf <mqtt_process_message+0x1>
   13834:	80 93 ae 0f 	sts	0x0FAE, r24	; 0x800fae <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2749
    radio.setPALevel(atoi(my_payload));
   13838:	80 ee       	ldi	r24, 0xE0	; 224
   1383a:	99 e0       	ldi	r25, 0x09	; 9
   1383c:	0f 94 f0 19 	call	0x233e0	; 0x233e0 <atoi>
   13840:	68 2f       	mov	r22, r24
   13842:	8e e8       	ldi	r24, 0x8E	; 142
   13844:	9e e0       	ldi	r25, 0x0E	; 14
   13846:	0e 94 42 f8 	call	0x1f084	; 0x1f084 <RF24::setPALevel(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2750
    nrf_save_power((rf24_pa_dbm_e) atoi(my_payload));
   1384a:	80 ee       	ldi	r24, 0xE0	; 224
   1384c:	99 e0       	ldi	r25, 0x09	; 9
   1384e:	0f 94 f0 19 	call	0x233e0	; 0x233e0 <atoi>
   13852:	0e 94 06 b1 	call	0x1620c	; 0x1620c <nrf_save_power(rf24_pa_dbm_e)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2755
  }


  //// thermctl-in/XXXXX/brightness
  strcpy_P(str1, thermctl_header_in);
   13856:	60 e8       	ldi	r22, 0x80	; 128
   13858:	71 e8       	ldi	r23, 0x81	; 129
   1385a:	c5 01       	movw	r24, r10
   1385c:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2756
  strcat(str1, device.nazev);
   13860:	6c ec       	ldi	r22, 0xCC	; 204
   13862:	7f e0       	ldi	r23, 0x0F	; 15
   13864:	c5 01       	movw	r24, r10
   13866:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2757
  strcat(str1, "/brightness");
   1386a:	6e eb       	ldi	r22, 0xBE	; 190
   1386c:	77 e0       	ldi	r23, 0x07	; 7
   1386e:	c5 01       	movw	r24, r10
   13870:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2758
  if (strcmp(str1, topic) == 0)
   13874:	b4 01       	movw	r22, r8
   13876:	c5 01       	movw	r24, r10
   13878:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
   1387c:	89 2b       	or	r24, r25
   1387e:	91 f4       	brne	.+36     	; 0x138a4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x157e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2760
  {
    mqtt_process_message++;
   13880:	80 91 ae 0f 	lds	r24, 0x0FAE	; 0x800fae <mqtt_process_message>
   13884:	90 91 af 0f 	lds	r25, 0x0FAF	; 0x800faf <mqtt_process_message+0x1>
   13888:	01 96       	adiw	r24, 0x01	; 1
   1388a:	90 93 af 0f 	sts	0x0FAF, r25	; 0x800faf <mqtt_process_message+0x1>
   1388e:	80 93 ae 0f 	sts	0x0FAE, r24	; 0x800fae <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2761
    my_touch.TP_SetBacklight(atoi(my_payload));
   13892:	80 ee       	ldi	r24, 0xE0	; 224
   13894:	99 e0       	ldi	r25, 0x09	; 9
   13896:	0f 94 f0 19 	call	0x233e0	; 0x233e0 <atoi>
   1389a:	68 2f       	mov	r22, r24
   1389c:	85 e9       	ldi	r24, 0x95	; 149
   1389e:	9c e0       	ldi	r25, 0x0C	; 12
   138a0:	0e 94 19 d0 	call	0x1a032	; 0x1a032 <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2765
  }

  //// thermctl-in/XXXXX/reload
  strcpy_P(str1, thermctl_header_in);
   138a4:	60 e8       	ldi	r22, 0x80	; 128
   138a6:	71 e8       	ldi	r23, 0x81	; 129
   138a8:	c5 01       	movw	r24, r10
   138aa:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2766
  strcat(str1, device.nazev);
   138ae:	6c ec       	ldi	r22, 0xCC	; 204
   138b0:	7f e0       	ldi	r23, 0x0F	; 15
   138b2:	c5 01       	movw	r24, r10
   138b4:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2767
  strcat(str1, "/reload");
   138b8:	6a ec       	ldi	r22, 0xCA	; 202
   138ba:	77 e0       	ldi	r23, 0x07	; 7
   138bc:	c5 01       	movw	r24, r10
   138be:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2768
  if (strcmp(str1, topic) == 0)
   138c2:	b4 01       	movw	r22, r8
   138c4:	c5 01       	movw	r24, r10
   138c6:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
   138ca:	89 2b       	or	r24, r25
   138cc:	31 f5       	brne	.+76     	; 0x1391a <mqtt_callback(char*, unsigned char*, unsigned int)+0x15f4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2770
  {
    mqtt_process_message++;
   138ce:	80 91 ae 0f 	lds	r24, 0x0FAE	; 0x800fae <mqtt_process_message>
   138d2:	90 91 af 0f 	lds	r25, 0x0FAF	; 0x800faf <mqtt_process_message+0x1>
   138d6:	01 96       	adiw	r24, 0x01	; 1
   138d8:	90 93 af 0f 	sts	0x0FAF, r25	; 0x800faf <mqtt_process_message+0x1>
   138dc:	80 93 ae 0f 	sts	0x0FAE, r24	; 0x800fae <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2771
    log_error(&mqtt_client, "reload..");
   138e0:	62 ed       	ldi	r22, 0xD2	; 210
   138e2:	77 e0       	ldi	r23, 0x07	; 7
   138e4:	8c ea       	ldi	r24, 0xAC	; 172
   138e6:	9e e0       	ldi	r25, 0x0E	; 14
   138e8:	0e 94 c0 b0 	call	0x16180	; 0x16180 <log_error(PubSubClient*, char*)>
wdt_enable():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/avr/wdt.h:486
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
   138ec:	88 e1       	ldi	r24, 0x18	; 24
   138ee:	9e e0       	ldi	r25, 0x0E	; 14
   138f0:	0f b6       	in	r0, 0x3f	; 63
   138f2:	f8 94       	cli
   138f4:	a8 95       	wdr
   138f6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
   138fa:	0f be       	out	0x3f, r0	; 63
   138fc:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
   13900:	ff cf       	rjmp	.-2      	; 0x13900 <mqtt_callback(char*, unsigned char*, unsigned int)+0x15da>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2705
      start_scan_rf_network(&radio);
      selftest_set_0(SELFTEST_NRF_SCAN);
    }
    else
    {
      stop_scan_rf_network(&radio);
   13902:	8e e8       	ldi	r24, 0x8E	; 142
   13904:	9e e0       	ldi	r25, 0x0E	; 14
   13906:	0e 94 61 b1 	call	0x162c2	; 0x162c2 <stop_scan_rf_network(RF24*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2706
      scan_rf_network_public(&mqtt_client);
   1390a:	8c ea       	ldi	r24, 0xAC	; 172
   1390c:	9e e0       	ldi	r25, 0x0E	; 14
   1390e:	0e 94 68 b1 	call	0x162d0	; 0x162d0 <scan_rf_network_public(PubSubClient*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2707
      selftest_clear_0(SELFTEST_NRF_SCAN);
   13912:	84 e0       	ldi	r24, 0x04	; 4
   13914:	0e 94 67 6f 	call	0xdece	; 0xdece <selftest_clear_0(unsigned char)>
   13918:	fc ce       	rjmp	.-520    	; 0x13712 <mqtt_callback(char*, unsigned char*, unsigned int)+0x13ec>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2778
    wdt_enable(WDTO_1S);
    while (1);
  }

  //// thermctl-in/XXXXX/bootloader
  strcpy_P(str1, thermctl_header_in);
   1391a:	60 e8       	ldi	r22, 0x80	; 128
   1391c:	71 e8       	ldi	r23, 0x81	; 129
   1391e:	c5 01       	movw	r24, r10
   13920:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2779
  strcat(str1, device.nazev);
   13924:	6c ec       	ldi	r22, 0xCC	; 204
   13926:	7f e0       	ldi	r23, 0x0F	; 15
   13928:	c5 01       	movw	r24, r10
   1392a:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2780
  strcat(str1, "/bootloader");
   1392e:	6b ed       	ldi	r22, 0xDB	; 219
   13930:	77 e0       	ldi	r23, 0x07	; 7
   13932:	c5 01       	movw	r24, r10
   13934:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2781
  if (strcmp(str1, topic) == 0)
   13938:	b4 01       	movw	r22, r8
   1393a:	c5 01       	movw	r24, r10
   1393c:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
   13940:	89 2b       	or	r24, r25
   13942:	19 f5       	brne	.+70     	; 0x1398a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1664>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2783
  {
    mqtt_process_message++;
   13944:	80 91 ae 0f 	lds	r24, 0x0FAE	; 0x800fae <mqtt_process_message>
   13948:	90 91 af 0f 	lds	r25, 0x0FAF	; 0x800faf <mqtt_process_message+0x1>
   1394c:	01 96       	adiw	r24, 0x01	; 1
   1394e:	90 93 af 0f 	sts	0x0FAF, r25	; 0x800faf <mqtt_process_message+0x1>
   13952:	80 93 ae 0f 	sts	0x0FAE, r24	; 0x800fae <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2784
    log_error(&mqtt_client, "bootloader");
   13956:	6c ed       	ldi	r22, 0xDC	; 220
   13958:	77 e0       	ldi	r23, 0x07	; 7
   1395a:	8c ea       	ldi	r24, 0xAC	; 172
   1395c:	9e e0       	ldi	r25, 0x0E	; 14
   1395e:	0e 94 c0 b0 	call	0x16180	; 0x16180 <log_error(PubSubClient*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2785
    EEPROM.write(bootloader_tag, atoi(my_payload));
   13962:	80 ee       	ldi	r24, 0xE0	; 224
   13964:	99 e0       	ldi	r25, 0x09	; 9
   13966:	0f 94 f0 19 	call	0x233e0	; 0x233e0 <atoi>
   1396a:	68 2f       	mov	r22, r24
   1396c:	90 e0       	ldi	r25, 0x00	; 0
   1396e:	80 e0       	ldi	r24, 0x00	; 0
   13970:	0e 94 90 51 	call	0xa320	; 0xa320 <EEPROMClass::write(int, unsigned char) [clone .isra.9]>
wdt_enable():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/avr/wdt.h:486
   13974:	88 e1       	ldi	r24, 0x18	; 24
   13976:	9e e0       	ldi	r25, 0x0E	; 14
   13978:	0f b6       	in	r0, 0x3f	; 63
   1397a:	f8 94       	cli
   1397c:	a8 95       	wdr
   1397e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
   13982:	0f be       	out	0x3f, r0	; 63
   13984:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
   13988:	ff cf       	rjmp	.-2      	; 0x13988 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1662>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2791
    wdt_enable(WDTO_1S);
    while (1);
  }

  //// /thermctl-in/XXXXX/reset_default
  strcpy_P(str1, thermctl_header_in);
   1398a:	60 e8       	ldi	r22, 0x80	; 128
   1398c:	71 e8       	ldi	r23, 0x81	; 129
   1398e:	c5 01       	movw	r24, r10
   13990:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2792
  strcat(str1, device.nazev);
   13994:	6c ec       	ldi	r22, 0xCC	; 204
   13996:	7f e0       	ldi	r23, 0x0F	; 15
   13998:	c5 01       	movw	r24, r10
   1399a:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2793
  strcat(str1, "/default");
   1399e:	61 e3       	ldi	r22, 0x31	; 49
   139a0:	77 e0       	ldi	r23, 0x07	; 7
   139a2:	c5 01       	movw	r24, r10
   139a4:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2794
  if (strcmp(str1, topic) == 0)
   139a8:	b4 01       	movw	r22, r8
   139aa:	c5 01       	movw	r24, r10
   139ac:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
   139b0:	89 2b       	or	r24, r25
   139b2:	91 f4       	brne	.+36     	; 0x139d8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x16b2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2796
  {
    mqtt_process_message++;
   139b4:	80 91 ae 0f 	lds	r24, 0x0FAE	; 0x800fae <mqtt_process_message>
   139b8:	90 91 af 0f 	lds	r25, 0x0FAF	; 0x800faf <mqtt_process_message+0x1>
   139bc:	01 96       	adiw	r24, 0x01	; 1
   139be:	90 93 af 0f 	sts	0x0FAF, r25	; 0x800faf <mqtt_process_message+0x1>
   139c2:	80 93 ae 0f 	sts	0x0FAE, r24	; 0x800fae <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2798
    //strncpy(str2, payload, length);
    EEPROM.write(set_default_values, atoi(my_payload));
   139c6:	80 ee       	ldi	r24, 0xE0	; 224
   139c8:	99 e0       	ldi	r25, 0x09	; 9
   139ca:	0f 94 f0 19 	call	0x233e0	; 0x233e0 <atoi>
   139ce:	68 2f       	mov	r22, r24
   139d0:	8a e5       	ldi	r24, 0x5A	; 90
   139d2:	90 e0       	ldi	r25, 0x00	; 0
   139d4:	0e 94 90 51 	call	0xa320	; 0xa320 <EEPROMClass::write(int, unsigned char) [clone .isra.9]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2801
  }

}
   139d8:	c0 53       	subi	r28, 0x30	; 48
   139da:	df 4f       	sbci	r29, 0xFF	; 255
   139dc:	0f b6       	in	r0, 0x3f	; 63
   139de:	f8 94       	cli
   139e0:	de bf       	out	0x3e, r29	; 62
   139e2:	0f be       	out	0x3f, r0	; 63
   139e4:	cd bf       	out	0x3d, r28	; 61
   139e6:	df 91       	pop	r29
   139e8:	cf 91       	pop	r28
   139ea:	1f 91       	pop	r17
   139ec:	0f 91       	pop	r16
   139ee:	ff 90       	pop	r15
   139f0:	ef 90       	pop	r14
   139f2:	df 90       	pop	r13
   139f4:	cf 90       	pop	r12
   139f6:	bf 90       	pop	r11
   139f8:	af 90       	pop	r10
   139fa:	9f 90       	pop	r9
   139fc:	8f 90       	pop	r8
   139fe:	7f 90       	pop	r7
   13a00:	6f 90       	pop	r6
   13a02:	5f 90       	pop	r5
   13a04:	4f 90       	pop	r4
   13a06:	3f 90       	pop	r3
   13a08:	2f 90       	pop	r2
   13a0a:	08 95       	ret

00013a0c <_GLOBAL__sub_I__Z11serial_putccP6(float, int, long,...)>:
_GLOBAL__sub_I__Z11serial_putccP6__file():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6510
}
////
uint8_t valid_true(void)
{
  return 1;
}
   13a0c:	cf 92       	push	r12
   13a0e:	ef 92       	push	r14
   13a10:	0f 93       	push	r16
   13a12:	cf 93       	push	r28
   13a14:	df 93       	push	r29
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
   13a16:	00 e0       	ldi	r16, 0x00	; 0
   13a18:	20 e0       	ldi	r18, 0x00	; 0
   13a1a:	40 e0       	ldi	r20, 0x00	; 0
   13a1c:	60 e0       	ldi	r22, 0x00	; 0
   13a1e:	84 e2       	ldi	r24, 0x24	; 36
   13a20:	9f e0       	ldi	r25, 0x0F	; 15
   13a22:	0f 94 7a 12 	call	0x224f4	; 0x224f4 <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:67
#include "MenuNastaveniMqtt.h"
#include "ThermostatMenu.h"
#include "pidDialogMenu.h"
#include "ThermostatTimeMenu.h"

SoftSPIB swSPI(STORAGE_MOSI, STORAGE_MISO, STORAGE_CLK);
   13a26:	29 e1       	ldi	r18, 0x19	; 25
   13a28:	4a e1       	ldi	r20, 0x1A	; 26
   13a2a:	68 e1       	ldi	r22, 0x18	; 24
   13a2c:	8d e1       	ldi	r24, 0x1D	; 29
   13a2e:	9f e0       	ldi	r25, 0x0F	; 15
   13a30:	0e 94 e7 d2 	call	0x1a5ce	; 0x1a5ce <SoftSPIB::SoftSPIB(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:71


RTC_DS1307 rtc;
DateTime now;
   13a34:	40 e0       	ldi	r20, 0x00	; 0
   13a36:	50 e0       	ldi	r21, 0x00	; 0
   13a38:	ba 01       	movw	r22, r20
   13a3a:	85 e1       	ldi	r24, 0x15	; 21
   13a3c:	9f e0       	ldi	r25, 0x0F	; 15
   13a3e:	0e 94 99 e5 	call	0x1cb32	; 0x1cb32 <DateTime::DateTime(unsigned long)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:84
uint8_t display_update_slider = 0;
uint8_t display_redraw_default_ring = 0;

uint8_t status_send_counter = 0;

EthernetClient ethClient;
   13a42:	8d ef       	ldi	r24, 0xFD	; 253
   13a44:	9e e0       	ldi	r25, 0x0E	; 14
   13a46:	0e 94 2c db 	call	0x1b658	; 0x1b658 <EthernetClient::EthernetClient()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:85
EthernetClient ethClient1;
   13a4a:	80 ef       	ldi	r24, 0xF0	; 240
   13a4c:	9e e0       	ldi	r25, 0x0E	; 14
   13a4e:	0e 94 2c db 	call	0x1b658	; 0x1b658 <EthernetClient::EthernetClient()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:86
EthernetUDP udpClient;
   13a52:	85 ed       	ldi	r24, 0xD5	; 213
   13a54:	9e e0       	ldi	r25, 0x0E	; 14
   13a56:	0e 94 2c df 	call	0x1be58	; 0x1be58 <EthernetUDP::EthernetUDP()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:87
PubSubClient mqtt_client(ethClient);
   13a5a:	6d ef       	ldi	r22, 0xFD	; 253
   13a5c:	7e e0       	ldi	r23, 0x0E	; 14
   13a5e:	8c ea       	ldi	r24, 0xAC	; 172
   13a60:	9e e0       	ldi	r25, 0x0E	; 14
   13a62:	0e 94 16 f3 	call	0x1e62c	; 0x1e62c <PubSubClient::PubSubClient(Client&)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:88
EthernetServer http_server(80);
   13a66:	60 e5       	ldi	r22, 0x50	; 80
   13a68:	70 e0       	ldi	r23, 0x00	; 0
   13a6a:	86 ea       	ldi	r24, 0xA6	; 166
   13a6c:	9e e0       	ldi	r25, 0x0E	; 14
   13a6e:	0e 94 8b dc 	call	0x1b916	; 0x1b916 <EthernetServer::EthernetServer(unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:91


RF24 radio(NRF_CE, NRF_CS);
   13a72:	42 e0       	ldi	r20, 0x02	; 2
   13a74:	50 e0       	ldi	r21, 0x00	; 0
   13a76:	63 e0       	ldi	r22, 0x03	; 3
   13a78:	70 e0       	ldi	r23, 0x00	; 0
   13a7a:	8e e8       	ldi	r24, 0x8E	; 142
   13a7c:	9e e0       	ldi	r25, 0x0E	; 14
   13a7e:	0e 94 86 f5 	call	0x1eb0c	; 0x1eb0c <RF24::RF24(unsigned int, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:92
RF24Network network(radio);
   13a82:	6e e8       	ldi	r22, 0x8E	; 142
   13a84:	7e e0       	ldi	r23, 0x0E	; 14
   13a86:	8c e1       	ldi	r24, 0x1C	; 28
   13a88:	9d e0       	ldi	r25, 0x0D	; 13
   13a8a:	0e 94 f5 f9 	call	0x1f3ea	; 0x1f3ea <RF24Network::RF24Network(RF24&)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:93
RF24Mesh mesh(radio, network);
   13a8e:	4c e1       	ldi	r20, 0x1C	; 28
   13a90:	5d e0       	ldi	r21, 0x0D	; 13
   13a92:	6e e8       	ldi	r22, 0x8E	; 142
   13a94:	7e e0       	ldi	r23, 0x0E	; 14
   13a96:	84 e0       	ldi	r24, 0x04	; 4
   13a98:	9d e0       	ldi	r25, 0x0D	; 13
   13a9a:	0f 94 29 01 	call	0x20252	; 0x20252 <RF24Mesh::RF24Mesh(RF24&, RF24Network&)>
_ZN24Temperature_LM75_DerivedC4EP7TwoWirehPNS_10AttributesE():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:66
  void writeIntegerTemperatureRegister(uint8_t register_index, int16_t value);

public:

  Temperature_LM75_Derived(TwoWire *bus, uint8_t i2c_address, Attributes *attributes) {
    this->bus = bus;
   13a9e:	c7 ef       	ldi	r28, 0xF7	; 247
   13aa0:	dc e0       	ldi	r29, 0x0C	; 12
   13aa2:	8a e7       	ldi	r24, 0x7A	; 122
   13aa4:	92 e1       	ldi	r25, 0x12	; 18
   13aa6:	99 83       	std	Y+1, r25	; 0x01
   13aa8:	88 83       	st	Y, r24
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:67
    this->i2c_address = i2c_address;
   13aaa:	88 e4       	ldi	r24, 0x48	; 72
   13aac:	8a 83       	std	Y+2, r24	; 0x02
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:68
    this->attributes = attributes;
   13aae:	e2 e8       	ldi	r30, 0x82	; 130
   13ab0:	f2 e0       	ldi	r31, 0x02	; 2
   13ab2:	fc 87       	std	Y+12, r31	; 0x0c
   13ab4:	eb 87       	std	Y+11, r30	; 0x0b
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:70

    setInternalResolution(attributes->default_temperature_resolution);
   13ab6:	91 81       	ldd	r25, Z+1	; 0x01
_ZN24Temperature_LM75_Derived21setInternalResolutionEh():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:51
  Attributes *attributes;

  // Set the internal resolution of the temperature sensor, which affects
  // conversions and which bits are discarded.
  void setInternalResolution(uint8_t resolution) {
    this->resolution = resolution;
   13ab8:	9b 83       	std	Y+3, r25	; 0x03
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:52
    this->resolution_mask = ~(uint16_t)((1 << (attributes->temperature_width - resolution)) - 1);
   13aba:	80 81       	ld	r24, Z
   13abc:	89 1b       	sub	r24, r25
   13abe:	99 0b       	sbc	r25, r25
   13ac0:	61 e0       	ldi	r22, 0x01	; 1
   13ac2:	70 e0       	ldi	r23, 0x00	; 0
   13ac4:	9b 01       	movw	r18, r22
   13ac6:	02 c0       	rjmp	.+4      	; 0x13acc <_GLOBAL__sub_I__Z11serial_putccP6(float, int, long,...)+0xc0>
   13ac8:	22 0f       	add	r18, r18
   13aca:	33 1f       	adc	r19, r19
   13acc:	8a 95       	dec	r24
   13ace:	e2 f7       	brpl	.-8      	; 0x13ac8 <_GLOBAL__sub_I__Z11serial_putccP6(float, int, long,...)+0xbc>
   13ad0:	c9 01       	movw	r24, r18
   13ad2:	91 95       	neg	r25
   13ad4:	81 95       	neg	r24
   13ad6:	91 09       	sbc	r25, r1
   13ad8:	9d 83       	std	Y+5, r25	; 0x05
   13ada:	8c 83       	std	Y+4, r24	; 0x04
_ZN24Temperature_LM75_DerivedC4EP7TwoWirehPNS_10AttributesE():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:71
    this->bus = bus;
    this->i2c_address = i2c_address;
    this->attributes = attributes;

    setInternalResolution(attributes->default_temperature_resolution);
    setInternalTemperatureFracWidth(attributes->default_temperature_frac_width);
   13adc:	82 81       	ldd	r24, Z+2	; 0x02
_ZN24Temperature_LM75_Derived31setInternalTemperatureFracWidthEh():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:56
    this->resolution = resolution;
    this->resolution_mask = ~(uint16_t)((1 << (attributes->temperature_width - resolution)) - 1);
  }

  void setInternalTemperatureFracWidth(uint8_t temperature_frac_width) {
    this->temperature_frac_width = temperature_frac_width;
   13ade:	8e 83       	std	Y+6, r24	; 0x06
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:57
    temperature_frac_factor = 1.0 / (float)(1 << temperature_frac_width);
   13ae0:	02 c0       	rjmp	.+4      	; 0x13ae6 <_GLOBAL__sub_I__Z11serial_putccP6(float, int, long,...)+0xda>
   13ae2:	66 0f       	add	r22, r22
   13ae4:	77 1f       	adc	r23, r23
   13ae6:	8a 95       	dec	r24
   13ae8:	e2 f7       	brpl	.-8      	; 0x13ae2 <_GLOBAL__sub_I__Z11serial_putccP6(float, int, long,...)+0xd6>
   13aea:	07 2e       	mov	r0, r23
   13aec:	00 0c       	add	r0, r0
   13aee:	88 0b       	sbc	r24, r24
   13af0:	99 0b       	sbc	r25, r25
   13af2:	0f 94 f7 14 	call	0x229ee	; 0x229ee <__floatsisf>
   13af6:	9b 01       	movw	r18, r22
   13af8:	ac 01       	movw	r20, r24
   13afa:	60 e0       	ldi	r22, 0x00	; 0
   13afc:	70 e0       	ldi	r23, 0x00	; 0
   13afe:	80 e8       	ldi	r24, 0x80	; 128
   13b00:	9f e3       	ldi	r25, 0x3F	; 63
   13b02:	0f 94 4d 14 	call	0x2289a	; 0x2289a <__divsf3>
   13b06:	6f 83       	std	Y+7, r22	; 0x07
   13b08:	78 87       	std	Y+8, r23	; 0x08
   13b0a:	89 87       	std	Y+9, r24	; 0x09
   13b0c:	9a 87       	std	Y+10, r25	; 0x0a
__static_initialization_and_destruction_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:98

Generic_LM75_11Bit lm75_temp;


LCDWIKI_KBV my_lcd(ST7796S, 33, 35, 36, 32, 34); //model,cs,cd,wr,rd,reset
   13b0e:	82 e2       	ldi	r24, 0x22	; 34
   13b10:	c8 2e       	mov	r12, r24
   13b12:	90 e2       	ldi	r25, 0x20	; 32
   13b14:	e9 2e       	mov	r14, r25
   13b16:	04 e2       	ldi	r16, 0x24	; 36
   13b18:	23 e2       	ldi	r18, 0x23	; 35
   13b1a:	41 e2       	ldi	r20, 0x21	; 33
   13b1c:	6a e0       	ldi	r22, 0x0A	; 10
   13b1e:	70 e0       	ldi	r23, 0x00	; 0
   13b20:	88 eb       	ldi	r24, 0xB8	; 184
   13b22:	9c e0       	ldi	r25, 0x0C	; 12
   13b24:	0e 94 c4 c1 	call	0x18388	; 0x18388 <LCDWIKI_KBV::LCDWIKI_KBV(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:99
LCDWIKI_TOUCH my_touch(28, 27, 29, 30, 7, 31); //tcs,tclk,tdout,tdin,tirq, sdcd
   13b28:	2f e1       	ldi	r18, 0x1F	; 31
   13b2a:	c2 2e       	mov	r12, r18
   13b2c:	37 e0       	ldi	r19, 0x07	; 7
   13b2e:	e3 2e       	mov	r14, r19
   13b30:	0e e1       	ldi	r16, 0x1E	; 30
   13b32:	2d e1       	ldi	r18, 0x1D	; 29
   13b34:	4b e1       	ldi	r20, 0x1B	; 27
   13b36:	6c e1       	ldi	r22, 0x1C	; 28
   13b38:	85 e9       	ldi	r24, 0x95	; 149
   13b3a:	9c e0       	ldi	r25, 0x0C	; 12
   13b3c:	0e 94 01 cf 	call	0x19e02	; 0x19e02 <LCDWIKI_TOUCH::LCDWIKI_TOUCH(signed char, signed char, signed char, signed char, signed char, signed char)>
_ZN11ArduinoJson18StaticJsonDocumentILj256EEC4Ev():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/StaticJsonDocument.hpp:18
template <size_t CAPACITY>
class StaticJsonDocument {
 public:
  uint8_t nestingLimit;

  StaticJsonDocument() : nestingLimit(ARDUINOJSON_DEFAULT_NESTING_LIMIT) {}
   13b40:	e6 e8       	ldi	r30, 0x86	; 134
   13b42:	fb e0       	ldi	r31, 0x0B	; 11
   13b44:	8a e0       	ldi	r24, 0x0A	; 10
   13b46:	80 83       	st	Z, r24
_ZN11ArduinoJson9Internals20StaticMemoryPoolBaseC4EPcj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:44
    StaticMemoryPoolBase* _parent;
    char* _start;
  };

  StaticMemoryPoolBase(char* memoryPool, size_t capa)
      : _buffer(memoryPool), _capacity(capa), _size(0) {}
   13b48:	8f e8       	ldi	r24, 0x8F	; 143
   13b4a:	9b e0       	ldi	r25, 0x0B	; 11
   13b4c:	94 83       	std	Z+4, r25	; 0x04
   13b4e:	83 83       	std	Z+3, r24	; 0x03
   13b50:	80 e0       	ldi	r24, 0x00	; 0
   13b52:	91 e0       	ldi	r25, 0x01	; 1
   13b54:	96 83       	std	Z+6, r25	; 0x06
   13b56:	85 83       	std	Z+5, r24	; 0x05
   13b58:	10 86       	std	Z+8, r1	; 0x08
   13b5a:	17 82       	std	Z+7, r1	; 0x07
_ZN11ArduinoJson9Internals16StaticMemoryPoolILj256EEC4Ev():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:115
class StaticMemoryPool : public StaticMemoryPoolBase {
  static const size_t ACTUAL_CAPACITY = Max<1, CAPACITY>::value;

 public:
  explicit StaticMemoryPool()
      : StaticMemoryPoolBase(_buffer, ACTUAL_CAPACITY) {}
   13b5c:	86 ea       	ldi	r24, 0xA6	; 166
   13b5e:	98 e0       	ldi	r25, 0x08	; 8
   13b60:	92 83       	std	Z+2, r25	; 0x02
   13b62:	81 83       	std	Z+1, r24	; 0x01
_ZN11ArduinoJson9Internals15JsonVariantDataC4Ev():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:20
struct JsonVariantData {
  JsonVariantType type;
  JsonVariantContent content;

  JsonVariantData() {
    type = JSON_NULL;
   13b64:	10 92 90 0c 	sts	0x0C90, r1	; 0x800c90 <doc+0x10a>
   13b68:	10 92 8f 0c 	sts	0x0C8F, r1	; 0x800c8f <doc+0x109>
__static_initialization_and_destruction_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:103

StaticJsonDocument<256> doc;

SRAM_23LC SRAM(&swSPI, STORAGE_RAM_CS, SRAM_23LC1024);
   13b6c:	21 e0       	ldi	r18, 0x01	; 1
   13b6e:	30 e0       	ldi	r19, 0x00	; 0
   13b70:	46 e1       	ldi	r20, 0x16	; 22
   13b72:	6d e1       	ldi	r22, 0x1D	; 29
   13b74:	7f e0       	ldi	r23, 0x0F	; 15
   13b76:	89 e7       	ldi	r24, 0x79	; 121
   13b78:	9b e0       	ldi	r25, 0x0B	; 11
   13b7a:	0e 94 a4 d3 	call	0x1a748	; 0x1a748 <SRAM_23LC::SRAM_23LC(SoftSPIB*, unsigned char, _SRAM_23LC_Device)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:104
EEPROM_CAT25 SROM(&swSPI, STORAGE_EEPROM_CS , CAT25M02);
   13b7e:	30 e0       	ldi	r19, 0x00	; 0
   13b80:	20 e0       	ldi	r18, 0x00	; 0
   13b82:	47 e1       	ldi	r20, 0x17	; 23
   13b84:	6d e1       	ldi	r22, 0x1D	; 29
   13b86:	7f e0       	ldi	r23, 0x0F	; 15
   13b88:	8a e6       	ldi	r24, 0x6A	; 106
   13b8a:	9b e0       	ldi	r25, 0x0B	; 11
_GLOBAL__sub_I__Z11serial_putccP6__file():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6510
}
////
uint8_t valid_true(void)
{
  return 1;
}
   13b8c:	df 91       	pop	r29
   13b8e:	cf 91       	pop	r28
   13b90:	0f 91       	pop	r16
   13b92:	ef 90       	pop	r14
   13b94:	cf 90       	pop	r12
__static_initialization_and_destruction_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:104
LCDWIKI_TOUCH my_touch(28, 27, 29, 30, 7, 31); //tcs,tclk,tdout,tdin,tirq, sdcd

StaticJsonDocument<256> doc;

SRAM_23LC SRAM(&swSPI, STORAGE_RAM_CS, SRAM_23LC1024);
EEPROM_CAT25 SROM(&swSPI, STORAGE_EEPROM_CS , CAT25M02);
   13b96:	0c 94 d5 d4 	jmp	0x1a9aa	; 0x1a9aa <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)>

00013b9a <_GLOBAL__sub_D__Z11serial_putccP6(float, int, long,...)>:
_GLOBAL__sub_D__Z11serial_putccP6__file():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:87
uint8_t status_send_counter = 0;

EthernetClient ethClient;
EthernetClient ethClient1;
EthernetUDP udpClient;
PubSubClient mqtt_client(ethClient);
   13b9a:	8c ea       	ldi	r24, 0xAC	; 172
   13b9c:	9e e0       	ldi	r25, 0x0E	; 14
   13b9e:	0c 94 4d eb 	jmp	0x1d69a	; 0x1d69a <PubSubClient::~PubSubClient()>

00013ba2 <setup>:
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3567


/////////////////////////////////////////////////////
/// setup - zakladni nastaveni - vola se pouze 1x
void setup()
{
   13ba2:	2f 92       	push	r2
   13ba4:	3f 92       	push	r3
   13ba6:	4f 92       	push	r4
   13ba8:	5f 92       	push	r5
   13baa:	6f 92       	push	r6
   13bac:	7f 92       	push	r7
   13bae:	8f 92       	push	r8
   13bb0:	9f 92       	push	r9
   13bb2:	af 92       	push	r10
   13bb4:	bf 92       	push	r11
   13bb6:	cf 92       	push	r12
   13bb8:	df 92       	push	r13
   13bba:	ef 92       	push	r14
   13bbc:	ff 92       	push	r15
   13bbe:	0f 93       	push	r16
   13bc0:	1f 93       	push	r17
   13bc2:	cf 93       	push	r28
   13bc4:	df 93       	push	r29
   13bc6:	cd b7       	in	r28, 0x3d	; 61
   13bc8:	de b7       	in	r29, 0x3e	; 62
   13bca:	c9 53       	subi	r28, 0x39	; 57
   13bcc:	d1 40       	sbci	r29, 0x01	; 1
   13bce:	0f b6       	in	r0, 0x3f	; 63
   13bd0:	f8 94       	cli
   13bd2:	de bf       	out	0x3e, r29	; 62
   13bd4:	0f be       	out	0x3f, r0	; 63
   13bd6:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3580
  char s_dvanact[8];
  char s_current[8];
  struct_DDS18s20 tds;
  long milis;

  NTPClient timeClient(udpClient);
   13bd8:	65 ed       	ldi	r22, 0xD5	; 213
   13bda:	7e e0       	ldi	r23, 0x0E	; 14
   13bdc:	ce 01       	movw	r24, r28
   13bde:	01 96       	adiw	r24, 0x01	; 1
   13be0:	0f 94 1e 0c 	call	0x2183c	; 0x2183c <NTPClient::NTPClient(UDP&)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3581
  DateTime time_now;
   13be4:	40 e0       	ldi	r20, 0x00	; 0
   13be6:	50 e0       	ldi	r21, 0x00	; 0
   13be8:	ba 01       	movw	r22, r20
   13bea:	ce 01       	movw	r24, r28
   13bec:	84 5e       	subi	r24, 0xE4	; 228
   13bee:	9e 4f       	sbci	r25, 0xFE	; 254
   13bf0:	0e 94 99 e5 	call	0x1cb32	; 0x1cb32 <DateTime::DateTime(unsigned long)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3583

  wdt_reset();
   13bf4:	a8 95       	wdr
wdt_enable():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/avr/wdt.h:486
   13bf6:	88 e1       	ldi	r24, 0x18	; 24
   13bf8:	99 e2       	ldi	r25, 0x29	; 41
   13bfa:	0f b6       	in	r0, 0x3f	; 63
   13bfc:	f8 94       	cli
   13bfe:	a8 95       	wdr
   13c00:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
   13c04:	0f be       	out	0x3f, r0	; 63
   13c06:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3586
  wdt_enable(WDTO_8S);

  if (EEPROM.read(bootloader_tag) == 0xee)
   13c0a:	90 e0       	ldi	r25, 0x00	; 0
   13c0c:	80 e0       	ldi	r24, 0x00	; 0
   13c0e:	0e 94 8e 51 	call	0xa31c	; 0xa31c <EEPROMClass::read(int) [clone .isra.8]>
   13c12:	8e 3e       	cpi	r24, 0xEE	; 238
   13c14:	29 f4       	brne	.+10     	; 0x13c20 <setup+0x7e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3587
    EEPROM.write(bootloader_tag, 0);
   13c16:	60 e0       	ldi	r22, 0x00	; 0
   13c18:	90 e0       	ldi	r25, 0x00	; 0
   13c1a:	80 e0       	ldi	r24, 0x00	; 0
   13c1c:	0e 94 90 51 	call	0xa320	; 0xa320 <EEPROMClass::write(int, unsigned char) [clone .isra.9]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3589

  setup_io_pin();
   13c20:	0e 94 25 72 	call	0xe44a	; 0xe44a <setup_io_pin()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3591

  interrupts();             // enable all interrupts
   13c24:	78 94       	sei
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3592
  SPI.begin();
   13c26:	0e 94 9f d4 	call	0x1a93e	; 0x1a93e <SPIClass::begin()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3593
  Wire.begin();
   13c2a:	8a e7       	ldi	r24, 0x7A	; 122
   13c2c:	92 e1       	ldi	r25, 0x12	; 18
   13c2e:	0f 94 1c 07 	call	0x20e38	; 0x20e38 <TwoWire::begin()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3594
  rtc.begin();
   13c32:	8c e1       	ldi	r24, 0x1C	; 28
   13c34:	9f e0       	ldi	r25, 0x0F	; 15
   13c36:	0e 94 e1 e6 	call	0x1cdc2	; 0x1cdc2 <RTC_DS1307::begin()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3596

  mqtt_set_public_mqtt_client(&mqtt_client);
   13c3a:	8c ea       	ldi	r24, 0xAC	; 172
   13c3c:	9e e0       	ldi	r25, 0x0E	; 14
   13c3e:	0e 94 e7 b0 	call	0x161ce	; 0x161ce <mqtt_set_public_mqtt_client(PubSubClient*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3597
  fdevopen( &printf_via_mqtt, 0);
   13c42:	70 e0       	ldi	r23, 0x00	; 0
   13c44:	60 e0       	ldi	r22, 0x00	; 0
   13c46:	89 e8       	ldi	r24, 0x89	; 137
   13c48:	90 eb       	ldi	r25, 0xB0	; 176
   13c4a:	0f 94 f5 1a 	call	0x235ea	; 0x235ea <fdevopen>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3598
  printf_begin();
   13c4e:	0e 94 d0 52 	call	0xa5a0	; 0xa5a0 <printf_begin()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3600

  swSPI.begin();
   13c52:	8d e1       	ldi	r24, 0x1D	; 29
   13c54:	9f e0       	ldi	r25, 0x0F	; 15
   13c56:	0e 94 f4 d2 	call	0x1a5e8	; 0x1a5e8 <SoftSPIB::begin()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3602

  MenuHistoryInit();
   13c5a:	0e 94 08 53 	call	0xa610	; 0xa610 <MenuHistoryInit()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3604

  my_lcd.Init_LCD();
   13c5e:	88 eb       	ldi	r24, 0xB8	; 184
   13c60:	9c e0       	ldi	r25, 0x0C	; 12
   13c62:	0e 94 da ce 	call	0x19db4	; 0x19db4 <LCDWIKI_KBV::Init_LCD()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3605
  my_lcd.Set_Rotation(3);
   13c66:	63 e0       	ldi	r22, 0x03	; 3
   13c68:	88 eb       	ldi	r24, 0xB8	; 184
   13c6a:	9c e0       	ldi	r25, 0x0C	; 12
   13c6c:	0e 94 44 cc 	call	0x19888	; 0x19888 <LCDWIKI_KBV::Set_Rotation(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3606
  my_lcd.Fill_Screen(WHITE);
   13c70:	6f ef       	ldi	r22, 0xFF	; 255
   13c72:	7f ef       	ldi	r23, 0xFF	; 255
   13c74:	88 eb       	ldi	r24, 0xB8	; 184
   13c76:	9c e0       	ldi	r25, 0x0C	; 12
   13c78:	0e 94 09 bd 	call	0x17a12	; 0x17a12 <LCDWIKI_GUI::Fill_Screen(unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3607
  my_lcd.Set_Draw_color(BLUE);
   13c7c:	6f e1       	ldi	r22, 0x1F	; 31
   13c7e:	70 e0       	ldi	r23, 0x00	; 0
   13c80:	88 eb       	ldi	r24, 0xB8	; 184
   13c82:	9c e0       	ldi	r25, 0x0C	; 12
   13c84:	0e 94 a9 bc 	call	0x17952	; 0x17952 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3608
  strcpy_P(str1, term_title);
   13c88:	60 e4       	ldi	r22, 0x40	; 64
   13c8a:	76 e8       	ldi	r23, 0x86	; 134
   13c8c:	ce 01       	movw	r24, r28
   13c8e:	88 57       	subi	r24, 0x78	; 120
   13c90:	9f 4f       	sbci	r25, 0xFF	; 255
   13c92:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3609
  show_string(str1, 30, 10, 2, BLUE, WHITE, 0);
   13c96:	c1 2c       	mov	r12, r1
   13c98:	ee 24       	eor	r14, r14
   13c9a:	ea 94       	dec	r14
   13c9c:	fe 2c       	mov	r15, r14
   13c9e:	0f e1       	ldi	r16, 0x1F	; 31
   13ca0:	10 e0       	ldi	r17, 0x00	; 0
   13ca2:	22 e0       	ldi	r18, 0x02	; 2
   13ca4:	4a e0       	ldi	r20, 0x0A	; 10
   13ca6:	50 e0       	ldi	r21, 0x00	; 0
   13ca8:	6e e1       	ldi	r22, 0x1E	; 30
   13caa:	70 e0       	ldi	r23, 0x00	; 0
   13cac:	ce 01       	movw	r24, r28
   13cae:	88 57       	subi	r24, 0x78	; 120
   13cb0:	9f 4f       	sbci	r25, 0xFF	; 255
   13cb2:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
   13cb6:	0e e1       	ldi	r16, 0x1E	; 30
   13cb8:	60 2e       	mov	r6, r16
   13cba:	71 2c       	mov	r7, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3611
  ///
  for (uint8_t init = 0;  init < 17; init++)
   13cbc:	c9 5c       	subi	r28, 0xC9	; 201
   13cbe:	de 4f       	sbci	r29, 0xFE	; 254
   13cc0:	18 82       	st	Y, r1
   13cc2:	c7 53       	subi	r28, 0x37	; 55
   13cc4:	d1 40       	sbci	r29, 0x01	; 1
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
   13cc6:	5e 01       	movw	r10, r28
   13cc8:	28 e4       	ldi	r18, 0x48	; 72
   13cca:	a2 0e       	add	r10, r18
   13ccc:	b1 1c       	adc	r11, r1
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3721
        }
        ///
        for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
        {
          get_tds18s20(idx, &tds);
          strcpy(tds.name, "FREE");
   13cce:	68 ec       	ldi	r22, 0xC8	; 200
   13cd0:	70 e0       	ldi	r23, 0x00	; 0
   13cd2:	6c 0f       	add	r22, r28
   13cd4:	7d 1f       	adc	r23, r29
   13cd6:	64 5f       	subi	r22, 0xF4	; 244
   13cd8:	7f 4f       	sbci	r23, 0xFF	; 255
   13cda:	c8 5c       	subi	r28, 0xC8	; 200
   13cdc:	de 4f       	sbci	r29, 0xFE	; 254
   13cde:	79 83       	std	Y+1, r23	; 0x01
   13ce0:	68 83       	st	Y, r22
   13ce2:	c8 53       	subi	r28, 0x38	; 56
   13ce4:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3680
    if (init == 2)
    {
      strcpy_P(str1, text_vnitrni_ochrany);
      strcat(str1, ":2");
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      dtostrf(lm75_temp.readTemperatureC(), 4, 2, s_current);
   13ce6:	4e 01       	movw	r8, r28
   13ce8:	7c ef       	ldi	r23, 0xFC	; 252
   13cea:	87 0e       	add	r8, r23
   13cec:	91 1c       	adc	r9, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3666
      milis = millis();
      while (a2d_run_now == 0 && millis() - milis < 10);
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
   13cee:	ce 01       	movw	r24, r28
   13cf0:	8c 5e       	subi	r24, 0xEC	; 236
   13cf2:	9e 4f       	sbci	r25, 0xFE	; 254
   13cf4:	cb 5c       	subi	r28, 0xCB	; 203
   13cf6:	de 4f       	sbci	r29, 0xFE	; 254
   13cf8:	99 83       	std	Y+1, r25	; 0x01
   13cfa:	88 83       	st	Y, r24
   13cfc:	c5 53       	subi	r28, 0x35	; 53
   13cfe:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3667
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
   13d00:	1e 01       	movw	r2, r28
   13d02:	94 ef       	ldi	r25, 0xF4	; 244
   13d04:	29 1a       	sub	r2, r25
   13d06:	9e ef       	ldi	r25, 0xFE	; 254
   13d08:	39 0a       	sbc	r3, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3668
      dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, s_dvanact);
   13d0a:	2e 01       	movw	r4, r28
   13d0c:	2c ef       	ldi	r18, 0xFC	; 252
   13d0e:	42 1a       	sub	r4, r18
   13d10:	2e ef       	ldi	r18, 0xFE	; 254
   13d12:	52 0a       	sbc	r5, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3613
  strcpy_P(str1, term_title);
  show_string(str1, 30, 10, 2, BLUE, WHITE, 0);
  ///
  for (uint8_t init = 0;  init < 17; init++)
  {
    wdt_reset();
   13d14:	a8 95       	wdr
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3614
    show_string("X", 30 + (init * 15), 30, 1, RED, WHITE, 0);
   13d16:	c1 2c       	mov	r12, r1
   13d18:	ee 24       	eor	r14, r14
   13d1a:	ea 94       	dec	r14
   13d1c:	fe 2c       	mov	r15, r14
   13d1e:	00 e0       	ldi	r16, 0x00	; 0
   13d20:	18 ef       	ldi	r17, 0xF8	; 248
   13d22:	21 e0       	ldi	r18, 0x01	; 1
   13d24:	4e e1       	ldi	r20, 0x1E	; 30
   13d26:	50 e0       	ldi	r21, 0x00	; 0
   13d28:	b3 01       	movw	r22, r6
   13d2a:	81 e1       	ldi	r24, 0x11	; 17
   13d2c:	98 e0       	ldi	r25, 0x08	; 8
   13d2e:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3616
    /// commit version
    if (init == 0)
   13d32:	c9 5c       	subi	r28, 0xC9	; 201
   13d34:	de 4f       	sbci	r29, 0xFE	; 254
   13d36:	68 81       	ld	r22, Y
   13d38:	c7 53       	subi	r28, 0x37	; 55
   13d3a:	d1 40       	sbci	r29, 0x01	; 1
   13d3c:	61 11       	cpse	r22, r1
   13d3e:	9a c0       	rjmp	.+308    	; 0x13e74 <setup+0x2d2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3618
    {
      time_now = DateTime(__DATE__, __TIME__);
   13d40:	41 e5       	ldi	r20, 0x51	; 81
   13d42:	53 e0       	ldi	r21, 0x03	; 3
   13d44:	6a e5       	ldi	r22, 0x5A	; 90
   13d46:	73 e0       	ldi	r23, 0x03	; 3
   13d48:	ce 01       	movw	r24, r28
   13d4a:	8e 50       	subi	r24, 0x0E	; 14
   13d4c:	9f 4f       	sbci	r25, 0xFF	; 255
   13d4e:	0e 94 2a e6 	call	0x1cc54	; 0x1cc54 <DateTime::DateTime(char const*, char const*)>
   13d52:	87 e0       	ldi	r24, 0x07	; 7
   13d54:	fe 01       	movw	r30, r28
   13d56:	ee 50       	subi	r30, 0x0E	; 14
   13d58:	ff 4f       	sbci	r31, 0xFF	; 255
   13d5a:	de 01       	movw	r26, r28
   13d5c:	a4 5e       	subi	r26, 0xE4	; 228
   13d5e:	be 4f       	sbci	r27, 0xFE	; 254
   13d60:	01 90       	ld	r0, Z+
   13d62:	0d 92       	st	X+, r0
   13d64:	8a 95       	dec	r24
   13d66:	e1 f7       	brne	.-8      	; 0x13d60 <setup+0x1be>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3619
      sprintf(str2, "build version %d.%02d.%02d %02d:%02d:%02d", time_now.year(), time_now.month(), time_now.day(), time_now.hour(), time_now.minute(), time_now.second());
   13d68:	cf 5d       	subi	r28, 0xDF	; 223
   13d6a:	de 4f       	sbci	r29, 0xFE	; 254
   13d6c:	88 81       	ld	r24, Y
   13d6e:	c1 52       	subi	r28, 0x21	; 33
   13d70:	d1 40       	sbci	r29, 0x01	; 1
   13d72:	1f 92       	push	r1
   13d74:	8f 93       	push	r24
   13d76:	c0 5e       	subi	r28, 0xE0	; 224
   13d78:	de 4f       	sbci	r29, 0xFE	; 254
   13d7a:	88 81       	ld	r24, Y
   13d7c:	c0 52       	subi	r28, 0x20	; 32
   13d7e:	d1 40       	sbci	r29, 0x01	; 1
   13d80:	1f 92       	push	r1
   13d82:	8f 93       	push	r24
   13d84:	c1 5e       	subi	r28, 0xE1	; 225
   13d86:	de 4f       	sbci	r29, 0xFE	; 254
   13d88:	88 81       	ld	r24, Y
   13d8a:	cf 51       	subi	r28, 0x1F	; 31
   13d8c:	d1 40       	sbci	r29, 0x01	; 1
   13d8e:	1f 92       	push	r1
   13d90:	8f 93       	push	r24
   13d92:	c2 5e       	subi	r28, 0xE2	; 226
   13d94:	de 4f       	sbci	r29, 0xFE	; 254
   13d96:	88 81       	ld	r24, Y
   13d98:	ce 51       	subi	r28, 0x1E	; 30
   13d9a:	d1 40       	sbci	r29, 0x01	; 1
   13d9c:	1f 92       	push	r1
   13d9e:	8f 93       	push	r24
   13da0:	c3 5e       	subi	r28, 0xE3	; 227
   13da2:	de 4f       	sbci	r29, 0xFE	; 254
   13da4:	88 81       	ld	r24, Y
   13da6:	cd 51       	subi	r28, 0x1D	; 29
   13da8:	d1 40       	sbci	r29, 0x01	; 1
   13daa:	1f 92       	push	r1
   13dac:	8f 93       	push	r24
_ZNK8DateTime4yearEv():
/home/saric/Arduino/libraries/RTClib/RTClib.h:38
    DateTime (uint16_t year, uint8_t month, uint8_t day, 
                uint8_t hour =0, uint8_t min =0, uint8_t sec =0);
    DateTime (const DateTime& copy);
    DateTime (const char* date, const char* time);
    DateTime (const __FlashStringHelper* date, const __FlashStringHelper* time);
    uint16_t year() const       { return 2000 + yOff; }
   13dae:	c4 5e       	subi	r28, 0xE4	; 228
   13db0:	de 4f       	sbci	r29, 0xFE	; 254
   13db2:	88 81       	ld	r24, Y
   13db4:	cc 51       	subi	r28, 0x1C	; 28
   13db6:	d1 40       	sbci	r29, 0x01	; 1
   13db8:	90 e0       	ldi	r25, 0x00	; 0
   13dba:	80 53       	subi	r24, 0x30	; 48
   13dbc:	98 4f       	sbci	r25, 0xF8	; 248
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3619
   13dbe:	9f 93       	push	r25
   13dc0:	8f 93       	push	r24
   13dc2:	83 e1       	ldi	r24, 0x13	; 19
   13dc4:	98 e0       	ldi	r25, 0x08	; 8
   13dc6:	9f 93       	push	r25
   13dc8:	8f 93       	push	r24
   13dca:	bf 92       	push	r11
   13dcc:	af 92       	push	r10
   13dce:	0f 94 a6 1b 	call	0x2374c	; 0x2374c <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3620
      show_string(str2, 30, 50 + (init * 10), 1, BLUE, WHITE, 0 );
   13dd2:	0f e1       	ldi	r16, 0x1F	; 31
   13dd4:	10 e0       	ldi	r17, 0x00	; 0
   13dd6:	21 e0       	ldi	r18, 0x01	; 1
   13dd8:	42 e3       	ldi	r20, 0x32	; 50
   13dda:	50 e0       	ldi	r21, 0x00	; 0
   13ddc:	6e e1       	ldi	r22, 0x1E	; 30
   13dde:	70 e0       	ldi	r23, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3671
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
      dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, s_dvanact);
      dtostrf(prepocet_proudu(proud), 4, 2, s_current);
      sprintf(str2, "3.3V=%s; 5.0V=%s; IN=%s; I=%s", s_tritri, s_petnula, s_dvanact, s_current);
      show_string(str2, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   13de0:	c5 01       	movw	r24, r10
   13de2:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
   13de6:	0f b6       	in	r0, 0x3f	; 63
   13de8:	f8 94       	cli
   13dea:	de bf       	out	0x3e, r29	; 62
   13dec:	0f be       	out	0x3f, r0	; 63
   13dee:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3999
      default_show_temp = get_default_show_temp();
      thermostat_mode_default_ring_last_state = thermostat_ring_get_mode(default_ring);
    }
    ///
    /// kontrola NTP serveru
    if (init == 15)
   13df0:	c9 5c       	subi	r28, 0xC9	; 201
   13df2:	de 4f       	sbci	r29, 0xFE	; 254
   13df4:	88 81       	ld	r24, Y
   13df6:	c7 53       	subi	r28, 0x37	; 55
   13df8:	d1 40       	sbci	r29, 0x01	; 1
   13dfa:	8f 30       	cpi	r24, 0x0F	; 15
   13dfc:	09 f0       	breq	.+2      	; 0x13e00 <setup+0x25e>
   13dfe:	72 c6       	rjmp	.+3300   	; 0x14ae4 <setup+0xf42>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4001
    {
      strcpy_P(str1, text_ntp_cas);
   13e00:	65 e9       	ldi	r22, 0x95	; 149
   13e02:	75 e8       	ldi	r23, 0x85	; 133
   13e04:	ce 01       	movw	r24, r28
   13e06:	88 57       	subi	r24, 0x78	; 120
   13e08:	9f 4f       	sbci	r25, 0xFF	; 255
   13e0a:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4002
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   13e0e:	c1 2c       	mov	r12, r1
   13e10:	ee 24       	eor	r14, r14
   13e12:	ea 94       	dec	r14
   13e14:	fe 2c       	mov	r15, r14
   13e16:	00 ee       	ldi	r16, 0xE0	; 224
   13e18:	17 e0       	ldi	r17, 0x07	; 7
   13e1a:	21 e0       	ldi	r18, 0x01	; 1
   13e1c:	48 ec       	ldi	r20, 0xC8	; 200
   13e1e:	50 e0       	ldi	r21, 0x00	; 0
   13e20:	6e e1       	ldi	r22, 0x1E	; 30
   13e22:	70 e0       	ldi	r23, 0x00	; 0
   13e24:	ce 01       	movw	r24, r28
   13e26:	88 57       	subi	r24, 0x78	; 120
   13e28:	9f 4f       	sbci	r25, 0xFF	; 255
   13e2a:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4003
      if (ntp_update(&timeClient, &rtc, time_get_offset(), &time_now) == 0)
   13e2e:	0e 94 8f 6f 	call	0xdf1e	; 0xdf1e <time_get_offset()>
   13e32:	9e 01       	movw	r18, r28
   13e34:	24 5e       	subi	r18, 0xE4	; 228
   13e36:	3e 4f       	sbci	r19, 0xFE	; 254
   13e38:	48 2f       	mov	r20, r24
   13e3a:	6c e1       	ldi	r22, 0x1C	; 28
   13e3c:	7f e0       	ldi	r23, 0x0F	; 15
   13e3e:	ce 01       	movw	r24, r28
   13e40:	01 96       	adiw	r24, 0x01	; 1
   13e42:	0e 94 09 b0 	call	0x16012	; 0x16012 <ntp_update(NTPClient*, RTC_DS1307*, unsigned char, DateTime*)>
   13e46:	81 11       	cpse	r24, r1
   13e48:	34 c6       	rjmp	.+3176   	; 0x14ab2 <setup+0xf10>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4005
      {
        strcpy_P(str1, text_err);
   13e4a:	6b ed       	ldi	r22, 0xDB	; 219
   13e4c:	71 e8       	ldi	r23, 0x81	; 129
   13e4e:	ce 01       	movw	r24, r28
   13e50:	88 57       	subi	r24, 0x78	; 120
   13e52:	9f 4f       	sbci	r25, 0xFF	; 255
   13e54:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4006
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
   13e58:	00 e0       	ldi	r16, 0x00	; 0
   13e5a:	18 ef       	ldi	r17, 0xF8	; 248
   13e5c:	21 e0       	ldi	r18, 0x01	; 1
   13e5e:	48 ec       	ldi	r20, 0xC8	; 200
   13e60:	50 e0       	ldi	r21, 0x00	; 0
   13e62:	60 ea       	ldi	r22, 0xA0	; 160
   13e64:	70 e0       	ldi	r23, 0x00	; 0
   13e66:	ce 01       	movw	r24, r28
   13e68:	88 57       	subi	r24, 0x78	; 120
   13e6a:	9f 4f       	sbci	r25, 0xFF	; 255
   13e6c:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4007
        selftest_set_0(SELFTEST_ERR_NTP);
   13e70:	81 e0       	ldi	r24, 0x01	; 1
   13e72:	f7 c4       	rjmp	.+2542   	; 0x14862 <setup+0xcc0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3624
      sprintf(str2, "build version %d.%02d.%02d %02d:%02d:%02d", time_now.year(), time_now.month(), time_now.day(), time_now.hour(), time_now.minute(), time_now.second());
      show_string(str2, 30, 50 + (init * 10), 1, BLUE, WHITE, 0 );
    }
    ///
    /// inicalizace vnitrniho ADC prevodniku
    if (init == 1)
   13e74:	c9 5c       	subi	r28, 0xC9	; 201
   13e76:	de 4f       	sbci	r29, 0xFE	; 254
   13e78:	98 81       	ld	r25, Y
   13e7a:	c7 53       	subi	r28, 0x37	; 55
   13e7c:	d1 40       	sbci	r29, 0x01	; 1
   13e7e:	91 30       	cpi	r25, 0x01	; 1
   13e80:	09 f0       	breq	.+2      	; 0x13e84 <setup+0x2e2>
   13e82:	30 c1       	rjmp	.+608    	; 0x140e4 <setup+0x542>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3626
    {
      strcpy_P(str1, text_vnitrni_ochrany);
   13e84:	66 ef       	ldi	r22, 0xF6	; 246
   13e86:	75 e8       	ldi	r23, 0x85	; 133
   13e88:	ce 01       	movw	r24, r28
   13e8a:	88 57       	subi	r24, 0x78	; 120
   13e8c:	9f 4f       	sbci	r25, 0xFF	; 255
   13e8e:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3627
      strcat(str1, ":1");
   13e92:	6d e3       	ldi	r22, 0x3D	; 61
   13e94:	78 e0       	ldi	r23, 0x08	; 8
   13e96:	ce 01       	movw	r24, r28
   13e98:	88 57       	subi	r24, 0x78	; 120
   13e9a:	9f 4f       	sbci	r25, 0xFF	; 255
   13e9c:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3628
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   13ea0:	c1 2c       	mov	r12, r1
   13ea2:	ee 24       	eor	r14, r14
   13ea4:	ea 94       	dec	r14
   13ea6:	fe 2c       	mov	r15, r14
   13ea8:	00 ee       	ldi	r16, 0xE0	; 224
   13eaa:	17 e0       	ldi	r17, 0x07	; 7
   13eac:	21 e0       	ldi	r18, 0x01	; 1
   13eae:	4c e3       	ldi	r20, 0x3C	; 60
   13eb0:	50 e0       	ldi	r21, 0x00	; 0
   13eb2:	6e e1       	ldi	r22, 0x1E	; 30
   13eb4:	70 e0       	ldi	r23, 0x00	; 0
   13eb6:	ce 01       	movw	r24, r28
   13eb8:	88 57       	subi	r24, 0x78	; 120
   13eba:	9f 4f       	sbci	r25, 0xFF	; 255
   13ebc:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3629
      tritri = 0;
   13ec0:	10 92 5f 0b 	sts	0x0B5F, r1	; 0x800b5f <tritri+0x1>
   13ec4:	10 92 5e 0b 	sts	0x0B5E, r1	; 0x800b5e <tritri>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3630
      petnula = 0;
   13ec8:	10 92 5d 0b 	sts	0x0B5D, r1	; 0x800b5d <petnula+0x1>
   13ecc:	10 92 5c 0b 	sts	0x0B5C, r1	; 0x800b5c <petnula>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3631
      dvanact = 0;
   13ed0:	10 92 5b 0b 	sts	0x0B5B, r1	; 0x800b5b <dvanact+0x1>
   13ed4:	10 92 5a 0b 	sts	0x0B5A, r1	; 0x800b5a <dvanact>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3633
      dvanact = 0;
      light_curr = 0;
   13ed8:	10 92 57 0b 	sts	0x0B57, r1	; 0x800b57 <light_curr+0x1>
   13edc:	10 92 56 0b 	sts	0x0B56, r1	; 0x800b56 <light_curr>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3635
      /// inicializace prevodniku
      init_a2d((1 << A_PROUD | 1 << A_TRIV | 1 << A_PETV | 1 << A_DVANACTV | 1 << A_LIGHT), 6, 3);
   13ee0:	43 e0       	ldi	r20, 0x03	; 3
   13ee2:	66 e0       	ldi	r22, 0x06	; 6
   13ee4:	88 ef       	ldi	r24, 0xF8	; 248
   13ee6:	0f 94 25 0e 	call	0x21c4a	; 0x21c4a <init_a2d(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3636
      a2d_handler(a2d_complete);
   13eea:	83 ee       	ldi	r24, 0xE3	; 227
   13eec:	99 e4       	ldi	r25, 0x49	; 73
   13eee:	0f 94 20 0e 	call	0x21c40	; 0x21c40 <a2d_handler(void (*)(unsigned char, unsigned int))>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3639
      ///
      /// spotreba proudu
      a2d_run_now = 0;
   13ef2:	10 92 55 0b 	sts	0x0B55, r1	; 0x800b55 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3640
      a2d_start_first(A_PROUD);
   13ef6:	83 e0       	ldi	r24, 0x03	; 3
   13ef8:	0f 94 42 0e 	call	0x21c84	; 0x21c84 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3641
      milis = millis();
   13efc:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   13f00:	6b 01       	movw	r12, r22
   13f02:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3642
      while (a2d_run_now == 0 && millis() - milis < 10);
   13f04:	80 91 55 0b 	lds	r24, 0x0B55	; 0x800b55 <a2d_run_now>
   13f08:	81 11       	cpse	r24, r1
   13f0a:	0b c0       	rjmp	.+22     	; 0x13f22 <setup+0x380>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3642 (discriminator 1)
   13f0c:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   13f10:	6c 19       	sub	r22, r12
   13f12:	7d 09       	sbc	r23, r13
   13f14:	8e 09       	sbc	r24, r14
   13f16:	9f 09       	sbc	r25, r15
   13f18:	6a 30       	cpi	r22, 0x0A	; 10
   13f1a:	71 05       	cpc	r23, r1
   13f1c:	81 05       	cpc	r24, r1
   13f1e:	91 05       	cpc	r25, r1
   13f20:	88 f3       	brcs	.-30     	; 0x13f04 <setup+0x362>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3644
      /// regulator 3.3V
      a2d_run_now = 0;
   13f22:	10 92 55 0b 	sts	0x0B55, r1	; 0x800b55 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3645
      a2d_start_first(A_TRIV);
   13f26:	86 e0       	ldi	r24, 0x06	; 6
   13f28:	0f 94 42 0e 	call	0x21c84	; 0x21c84 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3646
      milis = millis();
   13f2c:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   13f30:	6b 01       	movw	r12, r22
   13f32:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3647
      while (a2d_run_now == 0 && millis() - milis < 10);
   13f34:	80 91 55 0b 	lds	r24, 0x0B55	; 0x800b55 <a2d_run_now>
   13f38:	81 11       	cpse	r24, r1
   13f3a:	0b c0       	rjmp	.+22     	; 0x13f52 <setup+0x3b0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3647 (discriminator 1)
   13f3c:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   13f40:	6c 19       	sub	r22, r12
   13f42:	7d 09       	sbc	r23, r13
   13f44:	8e 09       	sbc	r24, r14
   13f46:	9f 09       	sbc	r25, r15
   13f48:	6a 30       	cpi	r22, 0x0A	; 10
   13f4a:	71 05       	cpc	r23, r1
   13f4c:	81 05       	cpc	r24, r1
   13f4e:	91 05       	cpc	r25, r1
   13f50:	88 f3       	brcs	.-30     	; 0x13f34 <setup+0x392>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3649
      /// regulator 5.0V
      a2d_run_now = 0;
   13f52:	10 92 55 0b 	sts	0x0B55, r1	; 0x800b55 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3650
      a2d_start_first(A_PETV);
   13f56:	85 e0       	ldi	r24, 0x05	; 5
   13f58:	0f 94 42 0e 	call	0x21c84	; 0x21c84 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3651
      milis = millis();
   13f5c:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   13f60:	6b 01       	movw	r12, r22
   13f62:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3652
      while (a2d_run_now == 0 && millis() - milis < 10);
   13f64:	80 91 55 0b 	lds	r24, 0x0B55	; 0x800b55 <a2d_run_now>
   13f68:	81 11       	cpse	r24, r1
   13f6a:	0b c0       	rjmp	.+22     	; 0x13f82 <setup+0x3e0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3652 (discriminator 1)
   13f6c:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   13f70:	6c 19       	sub	r22, r12
   13f72:	7d 09       	sbc	r23, r13
   13f74:	8e 09       	sbc	r24, r14
   13f76:	9f 09       	sbc	r25, r15
   13f78:	6a 30       	cpi	r22, 0x0A	; 10
   13f7a:	71 05       	cpc	r23, r1
   13f7c:	81 05       	cpc	r24, r1
   13f7e:	91 05       	cpc	r25, r1
   13f80:	88 f3       	brcs	.-30     	; 0x13f64 <setup+0x3c2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3654
      /// vstupni napeti 12V
      a2d_run_now = 0;
   13f82:	10 92 55 0b 	sts	0x0B55, r1	; 0x800b55 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3655
      a2d_start_first(A_DVANACTV);
   13f86:	84 e0       	ldi	r24, 0x04	; 4
   13f88:	0f 94 42 0e 	call	0x21c84	; 0x21c84 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3656
      milis = millis();
   13f8c:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   13f90:	6b 01       	movw	r12, r22
   13f92:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3657
      while (a2d_run_now == 0 && millis() - milis < 10);
   13f94:	80 91 55 0b 	lds	r24, 0x0B55	; 0x800b55 <a2d_run_now>
   13f98:	81 11       	cpse	r24, r1
   13f9a:	0b c0       	rjmp	.+22     	; 0x13fb2 <setup+0x410>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3657 (discriminator 1)
   13f9c:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   13fa0:	6c 19       	sub	r22, r12
   13fa2:	7d 09       	sbc	r23, r13
   13fa4:	8e 09       	sbc	r24, r14
   13fa6:	9f 09       	sbc	r25, r15
   13fa8:	6a 30       	cpi	r22, 0x0A	; 10
   13faa:	71 05       	cpc	r23, r1
   13fac:	81 05       	cpc	r24, r1
   13fae:	91 05       	cpc	r25, r1
   13fb0:	88 f3       	brcs	.-30     	; 0x13f94 <setup+0x3f2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3659
      /// aktualni intenzita svetla
      a2d_run_now = 0;
   13fb2:	10 92 55 0b 	sts	0x0B55, r1	; 0x800b55 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3660
      a2d_start_first(A_LIGHT);
   13fb6:	87 e0       	ldi	r24, 0x07	; 7
   13fb8:	0f 94 42 0e 	call	0x21c84	; 0x21c84 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3661
      milis = millis();
   13fbc:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   13fc0:	6b 01       	movw	r12, r22
   13fc2:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3662
      while (a2d_run_now == 0 && millis() - milis < 10);
   13fc4:	80 91 55 0b 	lds	r24, 0x0B55	; 0x800b55 <a2d_run_now>
   13fc8:	81 11       	cpse	r24, r1
   13fca:	0b c0       	rjmp	.+22     	; 0x13fe2 <setup+0x440>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3662 (discriminator 1)
   13fcc:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   13fd0:	6c 19       	sub	r22, r12
   13fd2:	7d 09       	sbc	r23, r13
   13fd4:	8e 09       	sbc	r24, r14
   13fd6:	9f 09       	sbc	r25, r15
   13fd8:	6a 30       	cpi	r22, 0x0A	; 10
   13fda:	71 05       	cpc	r23, r1
   13fdc:	81 05       	cpc	r24, r1
   13fde:	91 05       	cpc	r25, r1
   13fe0:	88 f3       	brcs	.-30     	; 0x13fc4 <setup+0x422>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3664
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
   13fe2:	10 92 55 0b 	sts	0x0B55, r1	; 0x800b55 <a2d_run_now>
_Z15prepocet_napetijh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3309
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
   13fe6:	80 91 5e 0b 	lds	r24, 0x0B5E	; 0x800b5e <tritri>
   13fea:	90 91 5f 0b 	lds	r25, 0x0B5F	; 0x800b5f <tritri+0x1>
   13fee:	25 e0       	ldi	r18, 0x05	; 5
   13ff0:	28 9f       	mul	r18, r24
   13ff2:	b0 01       	movw	r22, r0
   13ff4:	29 9f       	mul	r18, r25
   13ff6:	70 0d       	add	r23, r0
   13ff8:	11 24       	eor	r1, r1
   13ffa:	90 e0       	ldi	r25, 0x00	; 0
   13ffc:	80 e0       	ldi	r24, 0x00	; 0
   13ffe:	0f 94 f5 14 	call	0x229ea	; 0x229ea <__floatunsisf>
   14002:	20 e0       	ldi	r18, 0x00	; 0
   14004:	30 e0       	ldi	r19, 0x00	; 0
   14006:	4a e7       	ldi	r20, 0x7A	; 122
   14008:	54 e4       	ldi	r21, 0x44	; 68
   1400a:	0f 94 4d 14 	call	0x2289a	; 0x2289a <__divsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3666
      milis = millis();
      while (a2d_run_now == 0 && millis() - milis < 10);
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
   1400e:	8e 01       	movw	r16, r28
   14010:	0c 5e       	subi	r16, 0xEC	; 236
   14012:	1e 4f       	sbci	r17, 0xFE	; 254
   14014:	22 e0       	ldi	r18, 0x02	; 2
   14016:	44 e0       	ldi	r20, 0x04	; 4
   14018:	0f 94 c0 16 	call	0x22d80	; 0x22d80 <dtostrf>
_Z15prepocet_napetijh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3309
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
   1401c:	60 91 5c 0b 	lds	r22, 0x0B5C	; 0x800b5c <petnula>
   14020:	70 91 5d 0b 	lds	r23, 0x0B5D	; 0x800b5d <petnula+0x1>
   14024:	e3 e0       	ldi	r30, 0x03	; 3
   14026:	66 0f       	add	r22, r22
   14028:	77 1f       	adc	r23, r23
   1402a:	ea 95       	dec	r30
   1402c:	e1 f7       	brne	.-8      	; 0x14026 <setup+0x484>
   1402e:	90 e0       	ldi	r25, 0x00	; 0
   14030:	80 e0       	ldi	r24, 0x00	; 0
   14032:	0f 94 f5 14 	call	0x229ea	; 0x229ea <__floatunsisf>
   14036:	20 e0       	ldi	r18, 0x00	; 0
   14038:	30 e0       	ldi	r19, 0x00	; 0
   1403a:	4a e7       	ldi	r20, 0x7A	; 122
   1403c:	54 e4       	ldi	r21, 0x44	; 68
   1403e:	0f 94 4d 14 	call	0x2289a	; 0x2289a <__divsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3667
      while (a2d_run_now == 0 && millis() - milis < 10);
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
   14042:	81 01       	movw	r16, r2
   14044:	22 e0       	ldi	r18, 0x02	; 2
   14046:	44 e0       	ldi	r20, 0x04	; 4
   14048:	0f 94 c0 16 	call	0x22d80	; 0x22d80 <dtostrf>
_Z15prepocet_napetijh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3309
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
   1404c:	80 91 5a 0b 	lds	r24, 0x0B5A	; 0x800b5a <dvanact>
   14050:	90 91 5b 0b 	lds	r25, 0x0B5B	; 0x800b5b <dvanact+0x1>
   14054:	29 e3       	ldi	r18, 0x39	; 57
   14056:	28 9f       	mul	r18, r24
   14058:	b0 01       	movw	r22, r0
   1405a:	29 9f       	mul	r18, r25
   1405c:	70 0d       	add	r23, r0
   1405e:	11 24       	eor	r1, r1
   14060:	90 e0       	ldi	r25, 0x00	; 0
   14062:	80 e0       	ldi	r24, 0x00	; 0
   14064:	0f 94 f5 14 	call	0x229ea	; 0x229ea <__floatunsisf>
   14068:	20 e0       	ldi	r18, 0x00	; 0
   1406a:	30 e0       	ldi	r19, 0x00	; 0
   1406c:	4a e7       	ldi	r20, 0x7A	; 122
   1406e:	54 e4       	ldi	r21, 0x44	; 68
   14070:	0f 94 4d 14 	call	0x2289a	; 0x2289a <__divsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3668
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
      dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, s_dvanact);
   14074:	82 01       	movw	r16, r4
   14076:	22 e0       	ldi	r18, 0x02	; 2
   14078:	44 e0       	ldi	r20, 0x04	; 4
   1407a:	0f 94 c0 16 	call	0x22d80	; 0x22d80 <dtostrf>
_Z15prepocet_prouduj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3324
*/
float prepocet_proudu(uint16_t vstup)
{
#define proud_constanta  470
  float proud = (vstup - proud_constanta) * 5 / 185;
  return vstup;
   1407e:	60 91 58 0b 	lds	r22, 0x0B58	; 0x800b58 <proud>
   14082:	70 91 59 0b 	lds	r23, 0x0B59	; 0x800b59 <proud+0x1>
   14086:	90 e0       	ldi	r25, 0x00	; 0
   14088:	80 e0       	ldi	r24, 0x00	; 0
   1408a:	0f 94 f5 14 	call	0x229ea	; 0x229ea <__floatunsisf>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3669
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
      dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, s_dvanact);
      dtostrf(prepocet_proudu(proud), 4, 2, s_current);
   1408e:	84 01       	movw	r16, r8
   14090:	22 e0       	ldi	r18, 0x02	; 2
   14092:	44 e0       	ldi	r20, 0x04	; 4
   14094:	0f 94 c0 16 	call	0x22d80	; 0x22d80 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3670
      sprintf(str2, "3.3V=%s; 5.0V=%s; IN=%s; I=%s", s_tritri, s_petnula, s_dvanact, s_current);
   14098:	9f 92       	push	r9
   1409a:	8f 92       	push	r8
   1409c:	5f 92       	push	r5
   1409e:	4f 92       	push	r4
   140a0:	3f 92       	push	r3
   140a2:	2f 92       	push	r2
   140a4:	ca 5c       	subi	r28, 0xCA	; 202
   140a6:	de 4f       	sbci	r29, 0xFE	; 254
   140a8:	28 81       	ld	r18, Y
   140aa:	c6 53       	subi	r28, 0x36	; 54
   140ac:	d1 40       	sbci	r29, 0x01	; 1
   140ae:	2f 93       	push	r18
   140b0:	cb 5c       	subi	r28, 0xCB	; 203
   140b2:	de 4f       	sbci	r29, 0xFE	; 254
   140b4:	68 81       	ld	r22, Y
   140b6:	c5 53       	subi	r28, 0x35	; 53
   140b8:	d1 40       	sbci	r29, 0x01	; 1
   140ba:	6f 93       	push	r22
   140bc:	80 e4       	ldi	r24, 0x40	; 64
   140be:	98 e0       	ldi	r25, 0x08	; 8
   140c0:	9f 93       	push	r25
   140c2:	8f 93       	push	r24
   140c4:	bf 92       	push	r11
   140c6:	af 92       	push	r10
   140c8:	0f 94 a6 1b 	call	0x2374c	; 0x2374c <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3671
      show_string(str2, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   140cc:	c1 2c       	mov	r12, r1
   140ce:	ee 24       	eor	r14, r14
   140d0:	ea 94       	dec	r14
   140d2:	fe 2c       	mov	r15, r14
   140d4:	00 ee       	ldi	r16, 0xE0	; 224
   140d6:	17 e0       	ldi	r17, 0x07	; 7
   140d8:	21 e0       	ldi	r18, 0x01	; 1
   140da:	4c e3       	ldi	r20, 0x3C	; 60
   140dc:	50 e0       	ldi	r21, 0x00	; 0
   140de:	60 ea       	ldi	r22, 0xA0	; 160
   140e0:	70 e0       	ldi	r23, 0x00	; 0
   140e2:	7e ce       	rjmp	.-772    	; 0x13de0 <setup+0x23e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3675
    }
    ///
    /// inicializace vnitrniho teplomeru LM75B
    if (init == 2)
   140e4:	c9 5c       	subi	r28, 0xC9	; 201
   140e6:	de 4f       	sbci	r29, 0xFE	; 254
   140e8:	98 81       	ld	r25, Y
   140ea:	c7 53       	subi	r28, 0x37	; 55
   140ec:	d1 40       	sbci	r29, 0x01	; 1
   140ee:	92 30       	cpi	r25, 0x02	; 2
   140f0:	09 f0       	breq	.+2      	; 0x140f4 <setup+0x552>
   140f2:	42 c0       	rjmp	.+132    	; 0x14178 <setup+0x5d6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3677
    {
      strcpy_P(str1, text_vnitrni_ochrany);
   140f4:	66 ef       	ldi	r22, 0xF6	; 246
   140f6:	75 e8       	ldi	r23, 0x85	; 133
   140f8:	ce 01       	movw	r24, r28
   140fa:	88 57       	subi	r24, 0x78	; 120
   140fc:	9f 4f       	sbci	r25, 0xFF	; 255
   140fe:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3678
      strcat(str1, ":2");
   14102:	6e e5       	ldi	r22, 0x5E	; 94
   14104:	78 e0       	ldi	r23, 0x08	; 8
   14106:	ce 01       	movw	r24, r28
   14108:	88 57       	subi	r24, 0x78	; 120
   1410a:	9f 4f       	sbci	r25, 0xFF	; 255
   1410c:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3679
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   14110:	c1 2c       	mov	r12, r1
   14112:	ee 24       	eor	r14, r14
   14114:	ea 94       	dec	r14
   14116:	fe 2c       	mov	r15, r14
   14118:	00 ee       	ldi	r16, 0xE0	; 224
   1411a:	17 e0       	ldi	r17, 0x07	; 7
   1411c:	21 e0       	ldi	r18, 0x01	; 1
   1411e:	46 e4       	ldi	r20, 0x46	; 70
   14120:	50 e0       	ldi	r21, 0x00	; 0
   14122:	6e e1       	ldi	r22, 0x1E	; 30
   14124:	70 e0       	ldi	r23, 0x00	; 0
   14126:	ce 01       	movw	r24, r28
   14128:	88 57       	subi	r24, 0x78	; 120
   1412a:	9f 4f       	sbci	r25, 0xFF	; 255
   1412c:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3680
      dtostrf(lm75_temp.readTemperatureC(), 4, 2, s_current);
   14130:	87 ef       	ldi	r24, 0xF7	; 247
   14132:	9c e0       	ldi	r25, 0x0C	; 12
   14134:	0e 94 d6 52 	call	0xa5ac	; 0xa5ac <Temperature_LM75_Derived::readTemperatureC()>
   14138:	84 01       	movw	r16, r8
   1413a:	22 e0       	ldi	r18, 0x02	; 2
   1413c:	44 e0       	ldi	r20, 0x04	; 4
   1413e:	0f 94 c0 16 	call	0x22d80	; 0x22d80 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3681
      sprintf(str2, "iT=%sC", s_current);
   14142:	9f 92       	push	r9
   14144:	8f 92       	push	r8
   14146:	81 e6       	ldi	r24, 0x61	; 97
   14148:	98 e0       	ldi	r25, 0x08	; 8
   1414a:	9f 93       	push	r25
   1414c:	8f 93       	push	r24
   1414e:	bf 92       	push	r11
   14150:	af 92       	push	r10
   14152:	0f 94 a6 1b 	call	0x2374c	; 0x2374c <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3682
      show_string(str2, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   14156:	00 ee       	ldi	r16, 0xE0	; 224
   14158:	17 e0       	ldi	r17, 0x07	; 7
   1415a:	21 e0       	ldi	r18, 0x01	; 1
   1415c:	46 e4       	ldi	r20, 0x46	; 70
   1415e:	50 e0       	ldi	r21, 0x00	; 0
   14160:	60 ea       	ldi	r22, 0xA0	; 160
   14162:	70 e0       	ldi	r23, 0x00	; 0
   14164:	c5 01       	movw	r24, r10
   14166:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
   1416a:	0f 90       	pop	r0
   1416c:	0f 90       	pop	r0
   1416e:	0f 90       	pop	r0
   14170:	0f 90       	pop	r0
   14172:	0f 90       	pop	r0
   14174:	0f 90       	pop	r0
   14176:	3c ce       	rjmp	.-904    	; 0x13df0 <setup+0x24e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3686
    }
    ///
    //// nastaveni vychozich hodnot systemu
    if (init == 3)
   14178:	c9 5c       	subi	r28, 0xC9	; 201
   1417a:	de 4f       	sbci	r29, 0xFE	; 254
   1417c:	28 81       	ld	r18, Y
   1417e:	c7 53       	subi	r28, 0x37	; 55
   14180:	d1 40       	sbci	r29, 0x01	; 1
   14182:	23 30       	cpi	r18, 0x03	; 3
   14184:	09 f0       	breq	.+2      	; 0x14188 <setup+0x5e6>
   14186:	8a c1       	rjmp	.+788    	; 0x1449c <setup+0x8fa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3688
    {
      if (EEPROM.read(set_default_values) == 255)
   14188:	8a e5       	ldi	r24, 0x5A	; 90
   1418a:	90 e0       	ldi	r25, 0x00	; 0
   1418c:	0e 94 8e 51 	call	0xa31c	; 0xa31c <EEPROMClass::read(int) [clone .isra.8]>
   14190:	8f 3f       	cpi	r24, 0xFF	; 255
   14192:	09 f0       	breq	.+2      	; 0x14196 <setup+0x5f4>
   14194:	6b c1       	rjmp	.+726    	; 0x1446c <setup+0x8ca>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3690
      {
        EEPROM.write(set_default_values, 0);
   14196:	60 e0       	ldi	r22, 0x00	; 0
   14198:	8a e5       	ldi	r24, 0x5A	; 90
   1419a:	90 e0       	ldi	r25, 0x00	; 0
   1419c:	0e 94 90 51 	call	0xa320	; 0xa320 <EEPROMClass::write(int, unsigned char) [clone .isra.9]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3691
        strcpy_P(str1, text_vychozi_nastaveni);
   141a0:	60 e7       	ldi	r22, 0x70	; 112
   141a2:	75 e8       	ldi	r23, 0x85	; 133
   141a4:	ce 01       	movw	r24, r28
   141a6:	88 57       	subi	r24, 0x78	; 120
   141a8:	9f 4f       	sbci	r25, 0xFF	; 255
   141aa:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3692
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
   141ae:	c1 2c       	mov	r12, r1
   141b0:	ee 24       	eor	r14, r14
   141b2:	ea 94       	dec	r14
   141b4:	fe 2c       	mov	r15, r14
   141b6:	00 e0       	ldi	r16, 0x00	; 0
   141b8:	18 ef       	ldi	r17, 0xF8	; 248
   141ba:	21 e0       	ldi	r18, 0x01	; 1
   141bc:	40 e5       	ldi	r20, 0x50	; 80
   141be:	50 e0       	ldi	r21, 0x00	; 0
   141c0:	6e e1       	ldi	r22, 0x1E	; 30
   141c2:	70 e0       	ldi	r23, 0x00	; 0
   141c4:	ce 01       	movw	r24, r28
   141c6:	88 57       	subi	r24, 0x78	; 120
   141c8:	9f 4f       	sbci	r25, 0xFF	; 255
   141ca:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3694

        set_default_show_temp(255);
   141ce:	8f ef       	ldi	r24, 0xFF	; 255
   141d0:	0e 94 f6 67 	call	0xcfec	; 0xcfec <set_default_show_temp(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3697

        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
          thermostat_ring_clear(idx);
   141d4:	80 e0       	ldi	r24, 0x00	; 0
   141d6:	0e 94 46 bc 	call	0x1788c	; 0x1788c <thermostat_ring_clear(unsigned char)>
   141da:	81 e0       	ldi	r24, 0x01	; 1
   141dc:	0e 94 46 bc 	call	0x1788c	; 0x1788c <thermostat_ring_clear(unsigned char)>
   141e0:	82 e0       	ldi	r24, 0x02	; 2
   141e2:	0e 94 46 bc 	call	0x1788c	; 0x1788c <thermostat_ring_clear(unsigned char)>
   141e6:	83 e0       	ldi	r24, 0x03	; 3
   141e8:	0e 94 46 bc 	call	0x1788c	; 0x1788c <thermostat_ring_clear(unsigned char)>
   141ec:	84 e0       	ldi	r24, 0x04	; 4
   141ee:	0e 94 46 bc 	call	0x1788c	; 0x1788c <thermostat_ring_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3699
        ///
        for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   141f2:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3701 (discriminator 2)
        {
          strcpy(tmp1, "");
   141f4:	68 e3       	ldi	r22, 0x38	; 56
   141f6:	76 e0       	ldi	r23, 0x06	; 6
   141f8:	ce 01       	movw	r24, r28
   141fa:	82 52       	subi	r24, 0x22	; 34
   141fc:	9f 4f       	sbci	r25, 0xFF	; 255
   141fe:	0f 94 67 1a 	call	0x234ce	; 0x234ce <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3702 (discriminator 2)
          remote_tds_clear(idx);
   14202:	81 2f       	mov	r24, r17
   14204:	0e 94 48 63 	call	0xc690	; 0xc690 <remote_tds_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3699 (discriminator 2)
        set_default_show_temp(255);

        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
          thermostat_ring_clear(idx);
        ///
        for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   14208:	1f 5f       	subi	r17, 0xFF	; 255
   1420a:	1a 30       	cpi	r17, 0x0A	; 10
   1420c:	99 f7       	brne	.-26     	; 0x141f4 <setup+0x652>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3705
        {
          strcpy(tmp1, "");
          remote_tds_clear(idx);
        }
        ///
        for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
   1420e:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3707
        {
          strcpy_P(str2, text_prog);
   14210:	67 e2       	ldi	r22, 0x27	; 39
   14212:	72 e8       	ldi	r23, 0x82	; 130
   14214:	c5 01       	movw	r24, r10
   14216:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3708
          thermostat_program_set_name(idx, str2);
   1421a:	b5 01       	movw	r22, r10
   1421c:	81 2f       	mov	r24, r17
   1421e:	0e 94 f4 b9 	call	0x173e8	; 0x173e8 <thermostat_program_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3709
          thermostat_program_set_active(idx, PROG_FREE);
   14222:	6f ef       	ldi	r22, 0xFF	; 255
   14224:	81 2f       	mov	r24, r17
   14226:	0e 94 24 ba 	call	0x17448	; 0x17448 <thermostat_program_set_active(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3710
          for (uint8_t interval_id = 0; interval_id < MAX_PROGRAM_INTERVAL; interval_id++)
   1422a:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3712 (discriminator 2)
          {
            thermostat_program_set_time(idx, interval_id, 0, 0, 0, 0, 0);
   1422c:	c1 2c       	mov	r12, r1
   1422e:	e1 2c       	mov	r14, r1
   14230:	00 e0       	ldi	r16, 0x00	; 0
   14232:	20 e0       	ldi	r18, 0x00	; 0
   14234:	40 e0       	ldi	r20, 0x00	; 0
   14236:	6f 2d       	mov	r22, r15
   14238:	81 2f       	mov	r24, r17
   1423a:	0e 94 7f ba 	call	0x174fe	; 0x174fe <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3713 (discriminator 2)
            thermostat_program_set_threshold(idx, interval_id, 220);
   1423e:	4c ed       	ldi	r20, 0xDC	; 220
   14240:	50 e0       	ldi	r21, 0x00	; 0
   14242:	6f 2d       	mov	r22, r15
   14244:	81 2f       	mov	r24, r17
   14246:	0e 94 dd ba 	call	0x175ba	; 0x175ba <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3714 (discriminator 2)
            thermostat_program_set_week(idx, interval_id, 0);
   1424a:	40 e0       	ldi	r20, 0x00	; 0
   1424c:	6f 2d       	mov	r22, r15
   1424e:	81 2f       	mov	r24, r17
   14250:	0e 94 06 bb 	call	0x1760c	; 0x1760c <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3710 (discriminator 2)
        for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
        {
          strcpy_P(str2, text_prog);
          thermostat_program_set_name(idx, str2);
          thermostat_program_set_active(idx, PROG_FREE);
          for (uint8_t interval_id = 0; interval_id < MAX_PROGRAM_INTERVAL; interval_id++)
   14254:	f3 94       	inc	r15
   14256:	6b e0       	ldi	r22, 0x0B	; 11
   14258:	f6 12       	cpse	r15, r22
   1425a:	e8 cf       	rjmp	.-48     	; 0x1422c <setup+0x68a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3705 (discriminator 2)
        {
          strcpy(tmp1, "");
          remote_tds_clear(idx);
        }
        ///
        for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
   1425c:	1f 5f       	subi	r17, 0xFF	; 255
   1425e:	18 30       	cpi	r17, 0x08	; 8
   14260:	b9 f6       	brne	.-82     	; 0x14210 <setup+0x66e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3725
          get_tds18s20(idx, &tds);
          strcpy(tds.name, "FREE");
          tds.used = 0;
          tds.offset = 0;
          tds.assigned_ds2482 = 0;
          tds.period = 10;
   14262:	5a e0       	ldi	r21, 0x0A	; 10
   14264:	f5 2e       	mov	r15, r21
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3726
          for (uint8_t m = 0; m < 8; m++) tds.rom[m] = 0xff;
   14266:	1f ef       	ldi	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3720
          }
        }
        ///
        for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
        {
          get_tds18s20(idx, &tds);
   14268:	be 01       	movw	r22, r28
   1426a:	68 53       	subi	r22, 0x38	; 56
   1426c:	7f 4f       	sbci	r23, 0xFF	; 255
   1426e:	80 2f       	mov	r24, r16
   14270:	0e 94 40 b2 	call	0x16480	; 0x16480 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3721
          strcpy(tds.name, "FREE");
   14274:	68 e6       	ldi	r22, 0x68	; 104
   14276:	78 e0       	ldi	r23, 0x08	; 8
   14278:	c8 5c       	subi	r28, 0xC8	; 200
   1427a:	de 4f       	sbci	r29, 0xFE	; 254
   1427c:	88 81       	ld	r24, Y
   1427e:	99 81       	ldd	r25, Y+1	; 0x01
   14280:	c8 53       	subi	r28, 0x38	; 56
   14282:	d1 40       	sbci	r29, 0x01	; 1
   14284:	0f 94 67 1a 	call	0x234ce	; 0x234ce <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3722
          tds.used = 0;
   14288:	c8 53       	subi	r28, 0x38	; 56
   1428a:	df 4f       	sbci	r29, 0xFF	; 255
   1428c:	18 82       	st	Y, r1
   1428e:	c8 5c       	subi	r28, 0xC8	; 200
   14290:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3723
          tds.offset = 0;
   14292:	ce 52       	subi	r28, 0x2E	; 46
   14294:	df 4f       	sbci	r29, 0xFF	; 255
   14296:	19 82       	std	Y+1, r1	; 0x01
   14298:	18 82       	st	Y, r1
   1429a:	c2 5d       	subi	r28, 0xD2	; 210
   1429c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3724
          tds.assigned_ds2482 = 0;
   1429e:	cf 52       	subi	r28, 0x2F	; 47
   142a0:	df 4f       	sbci	r29, 0xFF	; 255
   142a2:	18 82       	st	Y, r1
   142a4:	c1 5d       	subi	r28, 0xD1	; 209
   142a6:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3725
          tds.period = 10;
   142a8:	c4 52       	subi	r28, 0x24	; 36
   142aa:	df 4f       	sbci	r29, 0xFF	; 255
   142ac:	f8 82       	st	Y, r15
   142ae:	cc 5d       	subi	r28, 0xDC	; 220
   142b0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3726
          for (uint8_t m = 0; m < 8; m++) tds.rom[m] = 0xff;
   142b2:	c7 53       	subi	r28, 0x37	; 55
   142b4:	df 4f       	sbci	r29, 0xFF	; 255
   142b6:	18 83       	st	Y, r17
   142b8:	c9 5c       	subi	r28, 0xC9	; 201
   142ba:	d0 40       	sbci	r29, 0x00	; 0
   142bc:	c6 53       	subi	r28, 0x36	; 54
   142be:	df 4f       	sbci	r29, 0xFF	; 255
   142c0:	18 83       	st	Y, r17
   142c2:	ca 5c       	subi	r28, 0xCA	; 202
   142c4:	d0 40       	sbci	r29, 0x00	; 0
   142c6:	c5 53       	subi	r28, 0x35	; 53
   142c8:	df 4f       	sbci	r29, 0xFF	; 255
   142ca:	18 83       	st	Y, r17
   142cc:	cb 5c       	subi	r28, 0xCB	; 203
   142ce:	d0 40       	sbci	r29, 0x00	; 0
   142d0:	c4 53       	subi	r28, 0x34	; 52
   142d2:	df 4f       	sbci	r29, 0xFF	; 255
   142d4:	18 83       	st	Y, r17
   142d6:	cc 5c       	subi	r28, 0xCC	; 204
   142d8:	d0 40       	sbci	r29, 0x00	; 0
   142da:	c3 53       	subi	r28, 0x33	; 51
   142dc:	df 4f       	sbci	r29, 0xFF	; 255
   142de:	18 83       	st	Y, r17
   142e0:	cd 5c       	subi	r28, 0xCD	; 205
   142e2:	d0 40       	sbci	r29, 0x00	; 0
   142e4:	c2 53       	subi	r28, 0x32	; 50
   142e6:	df 4f       	sbci	r29, 0xFF	; 255
   142e8:	18 83       	st	Y, r17
   142ea:	ce 5c       	subi	r28, 0xCE	; 206
   142ec:	d0 40       	sbci	r29, 0x00	; 0
   142ee:	c1 53       	subi	r28, 0x31	; 49
   142f0:	df 4f       	sbci	r29, 0xFF	; 255
   142f2:	18 83       	st	Y, r17
   142f4:	cf 5c       	subi	r28, 0xCF	; 207
   142f6:	d0 40       	sbci	r29, 0x00	; 0
   142f8:	c0 53       	subi	r28, 0x30	; 48
   142fa:	df 4f       	sbci	r29, 0xFF	; 255
   142fc:	18 83       	st	Y, r17
   142fe:	c0 5d       	subi	r28, 0xD0	; 208
   14300:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3727
          set_tds18s20(idx, &tds);
   14302:	be 01       	movw	r22, r28
   14304:	68 53       	subi	r22, 0x38	; 56
   14306:	7f 4f       	sbci	r23, 0xFF	; 255
   14308:	80 2f       	mov	r24, r16
   1430a:	0e 94 a5 b2 	call	0x1654a	; 0x1654a <set_tds18s20(unsigned char, struct_DDS18s20*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3718
            thermostat_program_set_threshold(idx, interval_id, 220);
            thermostat_program_set_week(idx, interval_id, 0);
          }
        }
        ///
        for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
   1430e:	0f 5f       	subi	r16, 0xFF	; 255
   14310:	06 30       	cpi	r16, 0x06	; 6
   14312:	09 f0       	breq	.+2      	; 0x14316 <setup+0x774>
   14314:	a9 cf       	rjmp	.-174    	; 0x14268 <setup+0x6c6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3730
          tds.period = 10;
          for (uint8_t m = 0; m < 8; m++) tds.rom[m] = 0xff;
          set_tds18s20(idx, &tds);
        }

        rtc.adjust(DateTime(2020, 12, 14, 17, 14, 0));
   14316:	c1 2c       	mov	r12, r1
   14318:	ae e0       	ldi	r26, 0x0E	; 14
   1431a:	ea 2e       	mov	r14, r26
   1431c:	01 e1       	ldi	r16, 0x11	; 17
   1431e:	2e e0       	ldi	r18, 0x0E	; 14
   14320:	4c e0       	ldi	r20, 0x0C	; 12
   14322:	64 ee       	ldi	r22, 0xE4	; 228
   14324:	77 e0       	ldi	r23, 0x07	; 7
   14326:	ce 01       	movw	r24, r28
   14328:	8e 50       	subi	r24, 0x0E	; 14
   1432a:	9f 4f       	sbci	r25, 0xFF	; 255
   1432c:	0e 94 16 e6 	call	0x1cc2c	; 0x1cc2c <DateTime::DateTime(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
   14330:	ce 01       	movw	r24, r28
   14332:	8e 50       	subi	r24, 0x0E	; 14
   14334:	9f 4f       	sbci	r25, 0xFF	; 255
   14336:	0e 94 e7 e6 	call	0x1cdce	; 0x1cdce <RTC_DS1307::adjust(DateTime const&)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3731
        time_set_offset(1);
   1433a:	81 e0       	ldi	r24, 0x01	; 1
   1433c:	0e 94 13 72 	call	0xe426	; 0xe426 <time_set_offset(signed char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3733
        /// pokus o vetsi random
        device.mac[0] = 2; device.mac[1] = 1; device.mac[2] = 2; device.mac[3] = dvanact >> 1; device.mac[4] = light_curr >> 1; device.mac[5] = proud >> 1;
   14340:	82 e0       	ldi	r24, 0x02	; 2
   14342:	80 93 b6 0f 	sts	0x0FB6, r24	; 0x800fb6 <device>
   14346:	91 e0       	ldi	r25, 0x01	; 1
   14348:	90 93 b7 0f 	sts	0x0FB7, r25	; 0x800fb7 <device+0x1>
   1434c:	80 93 b8 0f 	sts	0x0FB8, r24	; 0x800fb8 <device+0x2>
   14350:	20 91 5a 0b 	lds	r18, 0x0B5A	; 0x800b5a <dvanact>
   14354:	30 91 5b 0b 	lds	r19, 0x0B5B	; 0x800b5b <dvanact+0x1>
   14358:	36 95       	lsr	r19
   1435a:	27 95       	ror	r18
   1435c:	20 93 b9 0f 	sts	0x0FB9, r18	; 0x800fb9 <device+0x3>
   14360:	20 91 56 0b 	lds	r18, 0x0B56	; 0x800b56 <light_curr>
   14364:	30 91 57 0b 	lds	r19, 0x0B57	; 0x800b57 <light_curr+0x1>
   14368:	36 95       	lsr	r19
   1436a:	27 95       	ror	r18
   1436c:	20 93 ba 0f 	sts	0x0FBA, r18	; 0x800fba <device+0x4>
   14370:	20 91 58 0b 	lds	r18, 0x0B58	; 0x800b58 <proud>
   14374:	30 91 59 0b 	lds	r19, 0x0B59	; 0x800b59 <proud+0x1>
   14378:	36 95       	lsr	r19
   1437a:	27 95       	ror	r18
   1437c:	20 93 bb 0f 	sts	0x0FBB, r18	; 0x800fbb <device+0x5>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3734
        device.myIP[0] = 192; device.myIP[1] = 168; device.myIP[2] = 2; device.myIP[3] = 111;
   14380:	30 ec       	ldi	r19, 0xC0	; 192
   14382:	30 93 bc 0f 	sts	0x0FBC, r19	; 0x800fbc <device+0x6>
   14386:	28 ea       	ldi	r18, 0xA8	; 168
   14388:	20 93 bd 0f 	sts	0x0FBD, r18	; 0x800fbd <device+0x7>
   1438c:	80 93 be 0f 	sts	0x0FBE, r24	; 0x800fbe <device+0x8>
   14390:	4f e6       	ldi	r20, 0x6F	; 111
   14392:	40 93 bf 0f 	sts	0x0FBF, r20	; 0x800fbf <device+0x9>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3735
        device.myMASK[0] = 255; device.myMASK[1] = 255; device.myMASK[2] = 255; device.myMASK[3] = 0;
   14396:	10 93 c0 0f 	sts	0x0FC0, r17	; 0x800fc0 <device+0xa>
   1439a:	10 93 c1 0f 	sts	0x0FC1, r17	; 0x800fc1 <device+0xb>
   1439e:	10 93 c2 0f 	sts	0x0FC2, r17	; 0x800fc2 <device+0xc>
   143a2:	10 92 c3 0f 	sts	0x0FC3, r1	; 0x800fc3 <device+0xd>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3737

        device.myGW[0] = 192; device.myGW[1] = 168; device.myGW[2] = 2; device.myGW[3] = 1;
   143a6:	30 93 c8 0f 	sts	0x0FC8, r19	; 0x800fc8 <device+0x12>
   143aa:	20 93 c9 0f 	sts	0x0FC9, r18	; 0x800fc9 <device+0x13>
   143ae:	80 93 ca 0f 	sts	0x0FCA, r24	; 0x800fca <device+0x14>
   143b2:	90 93 cb 0f 	sts	0x0FCB, r25	; 0x800fcb <device+0x15>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3738
        device.myDNS[0] = 192; device.myDNS[1] = 168; device.myDNS[2] = 2; device.myDNS[3] = 1;
   143b6:	30 93 c4 0f 	sts	0x0FC4, r19	; 0x800fc4 <device+0xe>
   143ba:	20 93 c5 0f 	sts	0x0FC5, r18	; 0x800fc5 <device+0xf>
   143be:	80 93 c6 0f 	sts	0x0FC6, r24	; 0x800fc6 <device+0x10>
   143c2:	90 93 c7 0f 	sts	0x0FC7, r25	; 0x800fc7 <device+0x11>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3739
        device.mqtt_server[0] = 192; device.mqtt_server[1] = 168; device.mqtt_server[2] = 2; device.mqtt_server[3] = 1;
   143c6:	30 93 d6 0f 	sts	0x0FD6, r19	; 0x800fd6 <device+0x20>
   143ca:	20 93 d7 0f 	sts	0x0FD7, r18	; 0x800fd7 <device+0x21>
   143ce:	80 93 d8 0f 	sts	0x0FD8, r24	; 0x800fd8 <device+0x22>
   143d2:	90 93 d9 0f 	sts	0x0FD9, r25	; 0x800fd9 <device+0x23>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3740
        device.ntp_server[0] = 192; device.ntp_server[1] = 168; device.ntp_server[2] = 2; device.ntp_server[3] = 1;
   143d6:	30 93 04 10 	sts	0x1004, r19	; 0x801004 <device+0x4e>
   143da:	20 93 05 10 	sts	0x1005, r18	; 0x801005 <device+0x4f>
   143de:	80 93 06 10 	sts	0x1006, r24	; 0x801006 <device+0x50>
   143e2:	90 93 07 10 	sts	0x1007, r25	; 0x801007 <device+0x51>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3741
        device.mqtt_port = 1883;
   143e6:	8b e5       	ldi	r24, 0x5B	; 91
   143e8:	97 e0       	ldi	r25, 0x07	; 7
   143ea:	90 93 db 0f 	sts	0x0FDB, r25	; 0x800fdb <device+0x25>
   143ee:	80 93 da 0f 	sts	0x0FDA, r24	; 0x800fda <device+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3742
        strcpy(device.mqtt_user, "saric");
   143f2:	6d e6       	ldi	r22, 0x6D	; 109
   143f4:	78 e0       	ldi	r23, 0x08	; 8
   143f6:	8c ed       	ldi	r24, 0xDC	; 220
   143f8:	9f e0       	ldi	r25, 0x0F	; 15
   143fa:	0f 94 67 1a 	call	0x234ce	; 0x234ce <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3743
        strcpy(device.mqtt_key, "no");
   143fe:	63 e7       	ldi	r22, 0x73	; 115
   14400:	78 e0       	ldi	r23, 0x08	; 8
   14402:	80 ef       	ldi	r24, 0xF0	; 240
   14404:	9f e0       	ldi	r25, 0x0F	; 15
   14406:	0f 94 67 1a 	call	0x234ce	; 0x234ce <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3744
        save_setup_network();
   1440a:	0e 94 f2 aa 	call	0x155e4	; 0x155e4 <save_setup_network()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3745
        strcpy(str1, "TERM D2");
   1440e:	66 e7       	ldi	r22, 0x76	; 118
   14410:	78 e0       	ldi	r23, 0x08	; 8
   14412:	ce 01       	movw	r24, r28
   14414:	88 57       	subi	r24, 0x78	; 120
   14416:	9f 4f       	sbci	r25, 0xFF	; 255
   14418:	0f 94 67 1a 	call	0x234ce	; 0x234ce <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3746
        device_set_name(str1);
   1441c:	ce 01       	movw	r24, r28
   1441e:	88 57       	subi	r24, 0x78	; 120
   14420:	9f 4f       	sbci	r25, 0xFF	; 255
   14422:	0e 94 aa ab 	call	0x15754	; 0x15754 <device_set_name(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3748
        char hostname[10];
        device_get_name(hostname);
   14426:	ce 01       	movw	r24, r28
   14428:	8e 50       	subi	r24, 0x0E	; 14
   1442a:	9f 4f       	sbci	r25, 0xFF	; 255
   1442c:	0e 94 91 ab 	call	0x15722	; 0x15722 <device_get_name(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3749
        default_ring = NO_DEFAULT_RING;
   14430:	10 93 3a 0b 	sts	0x0B3A, r17	; 0x800b3a <default_ring>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3750
        last_default_ring = NO_DEFAULT_RING;
   14434:	10 93 39 0b 	sts	0x0B39, r17	; 0x800b39 <last_default_ring>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3751
        set_default_ring(default_ring);
   14438:	8f ef       	ldi	r24, 0xFF	; 255
   1443a:	0e 94 a1 67 	call	0xcf42	; 0xcf42 <set_default_ring(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3752
        EEPROM.write(my_brightness_values, 50);
   1443e:	62 e3       	ldi	r22, 0x32	; 50
   14440:	8e e5       	ldi	r24, 0x5E	; 94
   14442:	90 e0       	ldi	r25, 0x00	; 0
   14444:	0e 94 90 51 	call	0xa320	; 0xa320 <EEPROMClass::write(int, unsigned char) [clone .isra.9]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3753
        EEPROM.write(my_brightness_mode, 0);
   14448:	60 e0       	ldi	r22, 0x00	; 0
   1444a:	8f e5       	ldi	r24, 0x5F	; 95
   1444c:	90 e0       	ldi	r25, 0x00	; 0
   1444e:	0e 94 90 51 	call	0xa320	; 0xa320 <EEPROMClass::write(int, unsigned char) [clone .isra.9]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3754
        EEPROM.write(my_display_auto_shutdown, 60);
   14452:	6c e3       	ldi	r22, 0x3C	; 60
   14454:	80 e6       	ldi	r24, 0x60	; 96
   14456:	90 e0       	ldi	r25, 0x00	; 0
   14458:	0e 94 90 51 	call	0xa320	; 0xa320 <EEPROMClass::write(int, unsigned char) [clone .isra.9]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3756

        nrf_save_channel(97);
   1445c:	81 e6       	ldi	r24, 0x61	; 97
   1445e:	0e 94 fd b0 	call	0x161fa	; 0x161fa <nrf_save_channel(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3757
        nrf_save_power(RF24_PA_LOW);
   14462:	81 e0       	ldi	r24, 0x01	; 1
   14464:	90 e0       	ldi	r25, 0x00	; 0
   14466:	0e 94 06 b1 	call	0x1620c	; 0x1620c <nrf_save_power(rf24_pa_dbm_e)>
   1446a:	c2 cc       	rjmp	.-1660   	; 0x13df0 <setup+0x24e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3761
      }
      else
      {
        strcpy_P(str1, text_bezny_start);
   1446c:	64 e6       	ldi	r22, 0x64	; 100
   1446e:	75 e8       	ldi	r23, 0x85	; 133
   14470:	ce 01       	movw	r24, r28
   14472:	88 57       	subi	r24, 0x78	; 120
   14474:	9f 4f       	sbci	r25, 0xFF	; 255
   14476:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3762
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   1447a:	c1 2c       	mov	r12, r1
   1447c:	ee 24       	eor	r14, r14
   1447e:	ea 94       	dec	r14
   14480:	fe 2c       	mov	r15, r14
   14482:	00 ee       	ldi	r16, 0xE0	; 224
   14484:	17 e0       	ldi	r17, 0x07	; 7
   14486:	21 e0       	ldi	r18, 0x01	; 1
   14488:	40 e5       	ldi	r20, 0x50	; 80
   1448a:	50 e0       	ldi	r21, 0x00	; 0
   1448c:	6e e1       	ldi	r22, 0x1E	; 30
   1448e:	70 e0       	ldi	r23, 0x00	; 0
   14490:	ce 01       	movw	r24, r28
   14492:	88 57       	subi	r24, 0x78	; 120
   14494:	9f 4f       	sbci	r25, 0xFF	; 255
   14496:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
   1449a:	aa cc       	rjmp	.-1708   	; 0x13df0 <setup+0x24e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3767
      }
    }
    ///
    /// test SRAM
    if (init == 4)
   1449c:	c9 5c       	subi	r28, 0xC9	; 201
   1449e:	de 4f       	sbci	r29, 0xFE	; 254
   144a0:	78 81       	ld	r23, Y
   144a2:	c7 53       	subi	r28, 0x37	; 55
   144a4:	d1 40       	sbci	r29, 0x01	; 1
   144a6:	74 30       	cpi	r23, 0x04	; 4
   144a8:	09 f0       	breq	.+2      	; 0x144ac <setup+0x90a>
   144aa:	5d c0       	rjmp	.+186    	; 0x14566 <setup+0x9c4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3769
    {
      SRAM.begin();
   144ac:	89 e7       	ldi	r24, 0x79	; 121
   144ae:	9b e0       	ldi	r25, 0x0B	; 11
   144b0:	0e 94 2d d4 	call	0x1a85a	; 0x1a85a <SRAM_23LC::begin()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3770
      SRAM.writeByte(0, 0xAB);
   144b4:	2b ea       	ldi	r18, 0xAB	; 171
   144b6:	40 e0       	ldi	r20, 0x00	; 0
   144b8:	50 e0       	ldi	r21, 0x00	; 0
   144ba:	ba 01       	movw	r22, r20
   144bc:	89 e7       	ldi	r24, 0x79	; 121
   144be:	9b e0       	ldi	r25, 0x0B	; 11
   144c0:	0e 94 72 d4 	call	0x1a8e4	; 0x1a8e4 <SRAM_23LC::writeByte(unsigned long, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3771
      if (SRAM.readByte(0) == 0xAB)
   144c4:	40 e0       	ldi	r20, 0x00	; 0
   144c6:	50 e0       	ldi	r21, 0x00	; 0
   144c8:	ba 01       	movw	r22, r20
   144ca:	89 e7       	ldi	r24, 0x79	; 121
   144cc:	9b e0       	ldi	r25, 0x0B	; 11
   144ce:	0e 94 4d d4 	call	0x1a89a	; 0x1a89a <SRAM_23LC::readByte(unsigned long)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3773
      {
        strcpy_P(str1, text_test_ram);
   144d2:	67 e5       	ldi	r22, 0x57	; 87
   144d4:	75 e8       	ldi	r23, 0x85	; 133
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3771
    /// test SRAM
    if (init == 4)
    {
      SRAM.begin();
      SRAM.writeByte(0, 0xAB);
      if (SRAM.readByte(0) == 0xAB)
   144d6:	8b 3a       	cpi	r24, 0xAB	; 171
   144d8:	71 f5       	brne	.+92     	; 0x14536 <setup+0x994>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3773
      {
        strcpy_P(str1, text_test_ram);
   144da:	ce 01       	movw	r24, r28
   144dc:	88 57       	subi	r24, 0x78	; 120
   144de:	9f 4f       	sbci	r25, 0xFF	; 255
   144e0:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3774
        strcat(str1, " init ...");
   144e4:	6e e7       	ldi	r22, 0x7E	; 126
   144e6:	78 e0       	ldi	r23, 0x08	; 8
   144e8:	ce 01       	movw	r24, r28
   144ea:	88 57       	subi	r24, 0x78	; 120
   144ec:	9f 4f       	sbci	r25, 0xFF	; 255
   144ee:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3775
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   144f2:	c1 2c       	mov	r12, r1
   144f4:	ee 24       	eor	r14, r14
   144f6:	ea 94       	dec	r14
   144f8:	fe 2c       	mov	r15, r14
   144fa:	00 ee       	ldi	r16, 0xE0	; 224
   144fc:	17 e0       	ldi	r17, 0x07	; 7
   144fe:	21 e0       	ldi	r18, 0x01	; 1
   14500:	4a e5       	ldi	r20, 0x5A	; 90
   14502:	50 e0       	ldi	r21, 0x00	; 0
   14504:	6e e1       	ldi	r22, 0x1E	; 30
   14506:	70 e0       	ldi	r23, 0x00	; 0
   14508:	ce 01       	movw	r24, r28
   1450a:	88 57       	subi	r24, 0x78	; 120
   1450c:	9f 4f       	sbci	r25, 0xFF	; 255
   1450e:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3788
            sprintf(str1, "%d/2048", p);
            show_string(str1, 180, 50 + (init * 10), 1, GREEN, WHITE, 0 );
          }
          }
        */
        strcpy_P(str1, text_ok);
   14512:	68 ed       	ldi	r22, 0xD8	; 216
   14514:	71 e8       	ldi	r23, 0x81	; 129
   14516:	ce 01       	movw	r24, r28
   14518:	88 57       	subi	r24, 0x78	; 120
   1451a:	9f 4f       	sbci	r25, 0xFF	; 255
   1451c:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3789
        show_string(str1, 210, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   14520:	21 e0       	ldi	r18, 0x01	; 1
   14522:	4a e5       	ldi	r20, 0x5A	; 90
   14524:	50 e0       	ldi	r21, 0x00	; 0
   14526:	62 ed       	ldi	r22, 0xD2	; 210
   14528:	70 e0       	ldi	r23, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3955
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_ok);
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   1452a:	ce 01       	movw	r24, r28
   1452c:	88 57       	subi	r24, 0x78	; 120
   1452e:	9f 4f       	sbci	r25, 0xFF	; 255
   14530:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
   14534:	ab c0       	rjmp	.+342    	; 0x1468c <setup+0xaea>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3793
        strcpy_P(str1, text_ok);
        show_string(str1, 210, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_test_ram);
   14536:	ce 01       	movw	r24, r28
   14538:	88 57       	subi	r24, 0x78	; 120
   1453a:	9f 4f       	sbci	r25, 0xFF	; 255
   1453c:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3794
        strcat_P(str1, text_err);
   14540:	6b ed       	ldi	r22, 0xDB	; 219
   14542:	71 e8       	ldi	r23, 0x81	; 129
   14544:	ce 01       	movw	r24, r28
   14546:	88 57       	subi	r24, 0x78	; 120
   14548:	9f 4f       	sbci	r25, 0xFF	; 255
   1454a:	0f 94 17 1a 	call	0x2342e	; 0x2342e <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3795
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
   1454e:	c1 2c       	mov	r12, r1
   14550:	ee 24       	eor	r14, r14
   14552:	ea 94       	dec	r14
   14554:	fe 2c       	mov	r15, r14
   14556:	00 e0       	ldi	r16, 0x00	; 0
   14558:	18 ef       	ldi	r17, 0xF8	; 248
   1455a:	21 e0       	ldi	r18, 0x01	; 1
   1455c:	4a e5       	ldi	r20, 0x5A	; 90
   1455e:	50 e0       	ldi	r21, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3808
      SROM.writeByte(0, 0xBA);
      if (SROM.readByte(0) == 0xBA)
      {
        strcpy_P(str1, text_test_eeprom);
        strcat_P(str1, text_ok);
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   14560:	6e e1       	ldi	r22, 0x1E	; 30
   14562:	70 e0       	ldi	r23, 0x00	; 0
   14564:	e2 cf       	rjmp	.-60     	; 0x1452a <setup+0x988>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3800
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
    }
    ///
    /// init EEPROMKY
    if (init == 5)
   14566:	c9 5c       	subi	r28, 0xC9	; 201
   14568:	de 4f       	sbci	r29, 0xFE	; 254
   1456a:	88 81       	ld	r24, Y
   1456c:	c7 53       	subi	r28, 0x37	; 55
   1456e:	d1 40       	sbci	r29, 0x01	; 1
   14570:	85 30       	cpi	r24, 0x05	; 5
   14572:	09 f0       	breq	.+2      	; 0x14576 <setup+0x9d4>
   14574:	17 c3       	rjmp	.+1582   	; 0x14ba4 <setup+0x1002>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3802
    {
      SROM.begin();
   14576:	8a e6       	ldi	r24, 0x6A	; 106
   14578:	9b e0       	ldi	r25, 0x0B	; 11
   1457a:	0e 94 71 d5 	call	0x1aae2	; 0x1aae2 <EEPROM_CAT25::begin()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3803
      SROM.writeByte(0, 0xBA);
   1457e:	2a eb       	ldi	r18, 0xBA	; 186
   14580:	40 e0       	ldi	r20, 0x00	; 0
   14582:	50 e0       	ldi	r21, 0x00	; 0
   14584:	ba 01       	movw	r22, r20
   14586:	8a e6       	ldi	r24, 0x6A	; 106
   14588:	9b e0       	ldi	r25, 0x0B	; 11
   1458a:	0e 94 5e d6 	call	0x1acbc	; 0x1acbc <EEPROM_CAT25::writeByte(unsigned long, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3804
      if (SROM.readByte(0) == 0xBA)
   1458e:	40 e0       	ldi	r20, 0x00	; 0
   14590:	50 e0       	ldi	r21, 0x00	; 0
   14592:	ba 01       	movw	r22, r20
   14594:	8a e6       	ldi	r24, 0x6A	; 106
   14596:	9b e0       	ldi	r25, 0x0B	; 11
   14598:	0e 94 2a d6 	call	0x1ac54	; 0x1ac54 <EEPROM_CAT25::readByte(unsigned long)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3806
      {
        strcpy_P(str1, text_test_eeprom);
   1459c:	67 e4       	ldi	r22, 0x47	; 71
   1459e:	75 e8       	ldi	r23, 0x85	; 133
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3804
    /// init EEPROMKY
    if (init == 5)
    {
      SROM.begin();
      SROM.writeByte(0, 0xBA);
      if (SROM.readByte(0) == 0xBA)
   145a0:	8a 3b       	cpi	r24, 0xBA	; 186
   145a2:	b1 f4       	brne	.+44     	; 0x145d0 <setup+0xa2e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3806
      {
        strcpy_P(str1, text_test_eeprom);
   145a4:	ce 01       	movw	r24, r28
   145a6:	88 57       	subi	r24, 0x78	; 120
   145a8:	9f 4f       	sbci	r25, 0xFF	; 255
   145aa:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3807
        strcat_P(str1, text_ok);
   145ae:	68 ed       	ldi	r22, 0xD8	; 216
   145b0:	71 e8       	ldi	r23, 0x81	; 129
   145b2:	ce 01       	movw	r24, r28
   145b4:	88 57       	subi	r24, 0x78	; 120
   145b6:	9f 4f       	sbci	r25, 0xFF	; 255
   145b8:	0f 94 17 1a 	call	0x2342e	; 0x2342e <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3808
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   145bc:	c1 2c       	mov	r12, r1
   145be:	ee 24       	eor	r14, r14
   145c0:	ea 94       	dec	r14
   145c2:	fe 2c       	mov	r15, r14
   145c4:	00 ee       	ldi	r16, 0xE0	; 224
   145c6:	17 e0       	ldi	r17, 0x07	; 7
   145c8:	21 e0       	ldi	r18, 0x01	; 1
   145ca:	44 e6       	ldi	r20, 0x64	; 100
   145cc:	50 e0       	ldi	r21, 0x00	; 0
   145ce:	c8 cf       	rjmp	.-112    	; 0x14560 <setup+0x9be>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3812
      }
      else
      {
        strcpy_P(str1, text_test_eeprom);
   145d0:	ce 01       	movw	r24, r28
   145d2:	88 57       	subi	r24, 0x78	; 120
   145d4:	9f 4f       	sbci	r25, 0xFF	; 255
   145d6:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3813
        strcat_P(str1, text_err);
   145da:	6b ed       	ldi	r22, 0xDB	; 219
   145dc:	71 e8       	ldi	r23, 0x81	; 129
   145de:	ce 01       	movw	r24, r28
   145e0:	88 57       	subi	r24, 0x78	; 120
   145e2:	9f 4f       	sbci	r25, 0xFF	; 255
   145e4:	0f 94 17 1a 	call	0x2342e	; 0x2342e <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3814
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
   145e8:	c1 2c       	mov	r12, r1
   145ea:	ee 24       	eor	r14, r14
   145ec:	ea 94       	dec	r14
   145ee:	fe 2c       	mov	r15, r14
   145f0:	00 e0       	ldi	r16, 0x00	; 0
   145f2:	18 ef       	ldi	r17, 0xF8	; 248
   145f4:	e9 cf       	rjmp	.-46     	; 0x145c8 <setup+0xa26>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3821
    }
    ///
    ///  nacteni provoznich parametru
    if (init == 6)
    {
      strcpy_P(str1, text_nastaveni_systemu);
   145f6:	62 e2       	ldi	r22, 0x22	; 34
   145f8:	76 e8       	ldi	r23, 0x86	; 134
   145fa:	ce 01       	movw	r24, r28
   145fc:	88 57       	subi	r24, 0x78	; 120
   145fe:	9f 4f       	sbci	r25, 0xFF	; 255
   14600:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3822
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   14604:	c1 2c       	mov	r12, r1
   14606:	ee 24       	eor	r14, r14
   14608:	ea 94       	dec	r14
   1460a:	fe 2c       	mov	r15, r14
   1460c:	00 ee       	ldi	r16, 0xE0	; 224
   1460e:	17 e0       	ldi	r17, 0x07	; 7
   14610:	21 e0       	ldi	r18, 0x01	; 1
   14612:	4e e6       	ldi	r20, 0x6E	; 110
   14614:	50 e0       	ldi	r21, 0x00	; 0
   14616:	6e e1       	ldi	r22, 0x1E	; 30
   14618:	70 e0       	ldi	r23, 0x00	; 0
   1461a:	ce 01       	movw	r24, r28
   1461c:	88 57       	subi	r24, 0x78	; 120
   1461e:	9f 4f       	sbci	r25, 0xFF	; 255
   14620:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3824
      /// nactu nastaveni site
      load_setup_network();
   14624:	0e 94 4b aa 	call	0x15496	; 0x15496 <load_setup_network()>
   14628:	4e ed       	ldi	r20, 0xDE	; 222
   1462a:	50 e1       	ldi	r21, 0x10	; 16
   1462c:	26 e0       	ldi	r18, 0x06	; 6
   1462e:	90 e0       	ldi	r25, 0x00	; 0
   14630:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3828 (discriminator 2)
      //// kvuli lepsimu nabehu pocitani nastavim vychozi hodnotu na 2000 = 20 stupnu
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
          status_tds18s20[idx].average_temp[cnt] = 20000;
   14632:	fc 01       	movw	r30, r24
   14634:	ee 0f       	add	r30, r30
   14636:	ff 1f       	adc	r31, r31
   14638:	e4 0f       	add	r30, r20
   1463a:	f5 1f       	adc	r31, r21
   1463c:	60 e2       	ldi	r22, 0x20	; 32
   1463e:	7e e4       	ldi	r23, 0x4E	; 78
   14640:	70 87       	std	Z+8, r23	; 0x08
   14642:	67 83       	std	Z+7, r22	; 0x07
   14644:	01 96       	adiw	r24, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3827 (discriminator 2)
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      /// nactu nastaveni site
      load_setup_network();
      //// kvuli lepsimu nabehu pocitani nastavim vychozi hodnotu na 2000 = 20 stupnu
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
   14646:	8a 30       	cpi	r24, 0x0A	; 10
   14648:	91 05       	cpc	r25, r1
   1464a:	99 f7       	brne	.-26     	; 0x14632 <setup+0xa90>
   1464c:	21 50       	subi	r18, 0x01	; 1
   1464e:	42 5e       	subi	r20, 0xE2	; 226
   14650:	5f 4f       	sbci	r21, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3826 (discriminator 2)
      strcpy_P(str1, text_nastaveni_systemu);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      /// nactu nastaveni site
      load_setup_network();
      //// kvuli lepsimu nabehu pocitani nastavim vychozi hodnotu na 2000 = 20 stupnu
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
   14652:	21 11       	cpse	r18, r1
   14654:	ec cf       	rjmp	.-40     	; 0x1462e <setup+0xa8c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3831
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
          status_tds18s20[idx].average_temp[cnt] = 20000;
      ///
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
        last_output_update[idx] = 0;
   14656:	10 92 61 0b 	sts	0x0B61, r1	; 0x800b61 <last_output_update>
   1465a:	10 92 62 0b 	sts	0x0B62, r1	; 0x800b62 <last_output_update+0x1>
   1465e:	10 92 63 0b 	sts	0x0B63, r1	; 0x800b63 <last_output_update+0x2>
   14662:	10 92 64 0b 	sts	0x0B64, r1	; 0x800b64 <last_output_update+0x3>
   14666:	10 92 65 0b 	sts	0x0B65, r1	; 0x800b65 <last_output_update+0x4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3833

      for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   1466a:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3835 (discriminator 2)
      {
        remote_tds_set_data(idx, 0);
   1466c:	70 e0       	ldi	r23, 0x00	; 0
   1466e:	60 e0       	ldi	r22, 0x00	; 0
   14670:	81 2f       	mov	r24, r17
   14672:	0e 94 bc 65 	call	0xcb78	; 0xcb78 <remote_tds_set_data(unsigned char, int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3836 (discriminator 2)
        remote_tds_set_type(idx, RTDS_REMOTE_TYPE_FREE);
   14676:	6f ef       	ldi	r22, 0xFF	; 255
   14678:	81 2f       	mov	r24, r17
   1467a:	0e 94 cd 64 	call	0xc99a	; 0xc99a <remote_tds_set_type(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3837 (discriminator 2)
        remote_tds_set_last_update(idx, 255);
   1467e:	6f ef       	ldi	r22, 0xFF	; 255
   14680:	81 2f       	mov	r24, r17
   14682:	0e 94 4e 67 	call	0xce9c	; 0xce9c <remote_tds_set_last_update(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3833 (discriminator 2)
          status_tds18s20[idx].average_temp[cnt] = 20000;
      ///
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
        last_output_update[idx] = 0;

      for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   14686:	1f 5f       	subi	r17, 0xFF	; 255
   14688:	1a 30       	cpi	r17, 0x0A	; 10
   1468a:	81 f7       	brne	.-32     	; 0x1466c <setup+0xaca>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3611 (discriminator 2)
  my_lcd.Fill_Screen(WHITE);
  my_lcd.Set_Draw_color(BLUE);
  strcpy_P(str1, term_title);
  show_string(str1, 30, 10, 2, BLUE, WHITE, 0);
  ///
  for (uint8_t init = 0;  init < 17; init++)
   1468c:	c9 5c       	subi	r28, 0xC9	; 201
   1468e:	de 4f       	sbci	r29, 0xFE	; 254
   14690:	28 81       	ld	r18, Y
   14692:	c7 53       	subi	r28, 0x37	; 55
   14694:	d1 40       	sbci	r29, 0x01	; 1
   14696:	2f 5f       	subi	r18, 0xFF	; 255
   14698:	c9 5c       	subi	r28, 0xC9	; 201
   1469a:	de 4f       	sbci	r29, 0xFE	; 254
   1469c:	28 83       	st	Y, r18
   1469e:	c7 53       	subi	r28, 0x37	; 55
   146a0:	d1 40       	sbci	r29, 0x01	; 1
   146a2:	6f e0       	ldi	r22, 0x0F	; 15
   146a4:	66 0e       	add	r6, r22
   146a6:	71 1c       	adc	r7, r1
   146a8:	21 31       	cpi	r18, 0x11	; 17
   146aa:	09 f0       	breq	.+2      	; 0x146ae <setup+0xb0c>
   146ac:	33 cb       	rjmp	.-2458   	; 0x13d14 <setup+0x172>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4038
        selftest_set_0(SELFTEST_ERR_RTC);
      }
    }

  }
  delay(500);
   146ae:	64 ef       	ldi	r22, 0xF4	; 244
   146b0:	71 e0       	ldi	r23, 0x01	; 1
   146b2:	80 e0       	ldi	r24, 0x00	; 0
   146b4:	90 e0       	ldi	r25, 0x00	; 0
   146b6:	0f 94 33 0f 	call	0x21e66	; 0x21e66 <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4039
  MenuPrepareStyle();
   146ba:	0e 94 a1 53 	call	0xa742	; 0xa742 <MenuPrepareStyle()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4040
  draw_menu(true, 0, 0, 0);
   146be:	30 e0       	ldi	r19, 0x00	; 0
   146c0:	20 e0       	ldi	r18, 0x00	; 0
   146c2:	50 e0       	ldi	r21, 0x00	; 0
   146c4:	40 e0       	ldi	r20, 0x00	; 0
   146c6:	60 e0       	ldi	r22, 0x00	; 0
   146c8:	81 e0       	ldi	r24, 0x01	; 1
   146ca:	0e 94 d5 78 	call	0xf1aa	; 0xf1aa <draw_menu(bool, unsigned char, unsigned int, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4041
  a2d_run_now = 1;
   146ce:	81 e0       	ldi	r24, 0x01	; 1
   146d0:	80 93 55 0b 	sts	0x0B55, r24	; 0x800b55 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4043

  milis_10s = millis();
   146d4:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   146d8:	60 93 41 0b 	sts	0x0B41, r22	; 0x800b41 <milis_10s>
   146dc:	70 93 42 0b 	sts	0x0B42, r23	; 0x800b42 <milis_10s+0x1>
   146e0:	80 93 43 0b 	sts	0x0B43, r24	; 0x800b43 <milis_10s+0x2>
   146e4:	90 93 44 0b 	sts	0x0B44, r25	; 0x800b44 <milis_10s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4044
  milis_1s = millis();
   146e8:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   146ec:	60 93 45 0b 	sts	0x0B45, r22	; 0x800b45 <milis_1s>
   146f0:	70 93 46 0b 	sts	0x0B46, r23	; 0x800b46 <milis_1s+0x1>
   146f4:	80 93 47 0b 	sts	0x0B47, r24	; 0x800b47 <milis_1s+0x2>
   146f8:	90 93 48 0b 	sts	0x0B48, r25	; 0x800b48 <milis_1s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4045
  milis_05s = millis();
   146fc:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   14700:	60 93 49 0b 	sts	0x0B49, r22	; 0x800b49 <milis_05s>
   14704:	70 93 4a 0b 	sts	0x0B4A, r23	; 0x800b4a <milis_05s+0x1>
   14708:	80 93 4b 0b 	sts	0x0B4B, r24	; 0x800b4b <milis_05s+0x2>
   1470c:	90 93 4c 0b 	sts	0x0B4C, r25	; 0x800b4c <milis_05s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4046
  milis_005s = millis();
   14710:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   14714:	60 93 4d 0b 	sts	0x0B4D, r22	; 0x800b4d <milis_005s>
   14718:	70 93 4e 0b 	sts	0x0B4E, r23	; 0x800b4e <milis_005s+0x1>
   1471c:	80 93 4f 0b 	sts	0x0B4F, r24	; 0x800b4f <milis_005s+0x2>
   14720:	90 93 50 0b 	sts	0x0B50, r25	; 0x800b50 <milis_005s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4048

}
   14724:	c7 5c       	subi	r28, 0xC7	; 199
   14726:	de 4f       	sbci	r29, 0xFE	; 254
   14728:	0f b6       	in	r0, 0x3f	; 63
   1472a:	f8 94       	cli
   1472c:	de bf       	out	0x3e, r29	; 62
   1472e:	0f be       	out	0x3f, r0	; 63
   14730:	cd bf       	out	0x3d, r28	; 61
   14732:	df 91       	pop	r29
   14734:	cf 91       	pop	r28
   14736:	1f 91       	pop	r17
   14738:	0f 91       	pop	r16
   1473a:	ff 90       	pop	r15
   1473c:	ef 90       	pop	r14
   1473e:	df 90       	pop	r13
   14740:	cf 90       	pop	r12
   14742:	bf 90       	pop	r11
   14744:	af 90       	pop	r10
   14746:	9f 90       	pop	r9
   14748:	8f 90       	pop	r8
   1474a:	7f 90       	pop	r7
   1474c:	6f 90       	pop	r6
   1474e:	5f 90       	pop	r5
   14750:	4f 90       	pop	r4
   14752:	3f 90       	pop	r3
   14754:	2f 90       	pop	r2
   14756:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3844
    }
    ///
    /// zobrazeni kalibracnich informaci touchscreenu
    if (init == 7)
    {
      strcpy_P(str1, text_touchscreen);
   14758:	64 e3       	ldi	r22, 0x34	; 52
   1475a:	76 e8       	ldi	r23, 0x86	; 134
   1475c:	ce 01       	movw	r24, r28
   1475e:	88 57       	subi	r24, 0x78	; 120
   14760:	9f 4f       	sbci	r25, 0xFF	; 255
   14762:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3845
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   14766:	c1 2c       	mov	r12, r1
   14768:	ee 24       	eor	r14, r14
   1476a:	ea 94       	dec	r14
   1476c:	fe 2c       	mov	r15, r14
   1476e:	00 ee       	ldi	r16, 0xE0	; 224
   14770:	17 e0       	ldi	r17, 0x07	; 7
   14772:	21 e0       	ldi	r18, 0x01	; 1
   14774:	48 e7       	ldi	r20, 0x78	; 120
   14776:	50 e0       	ldi	r21, 0x00	; 0
   14778:	6e e1       	ldi	r22, 0x1E	; 30
   1477a:	70 e0       	ldi	r23, 0x00	; 0
   1477c:	ce 01       	movw	r24, r28
   1477e:	88 57       	subi	r24, 0x78	; 120
   14780:	9f 4f       	sbci	r25, 0xFF	; 255
   14782:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3846
      my_touch.TP_Init(my_lcd.Get_Rotation(), my_lcd.Get_Display_Width(), my_lcd.Get_Display_Height());
   14786:	88 eb       	ldi	r24, 0xB8	; 184
   14788:	9c e0       	ldi	r25, 0x0C	; 12
   1478a:	0e 94 1b bf 	call	0x17e36	; 0x17e36 <LCDWIKI_GUI::Get_Display_Height() const>
   1478e:	8c 01       	movw	r16, r24
   14790:	88 eb       	ldi	r24, 0xB8	; 184
   14792:	9c e0       	ldi	r25, 0x0C	; 12
   14794:	0e 94 ba be 	call	0x17d74	; 0x17d74 <LCDWIKI_GUI::Get_Display_Width() const>
   14798:	7c 01       	movw	r14, r24
   1479a:	88 eb       	ldi	r24, 0xB8	; 184
   1479c:	9c e0       	ldi	r25, 0x0C	; 12
   1479e:	0e 94 c4 cd 	call	0x19b88	; 0x19b88 <LCDWIKI_KBV::Get_Rotation() const>
   147a2:	98 01       	movw	r18, r16
   147a4:	a7 01       	movw	r20, r14
   147a6:	68 2f       	mov	r22, r24
   147a8:	85 e9       	ldi	r24, 0x95	; 149
   147aa:	9c e0       	ldi	r25, 0x0C	; 12
   147ac:	0e 94 4a d0 	call	0x1a094	; 0x1a094 <LCDWIKI_TOUCH::TP_Init(unsigned char, unsigned int, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3847
      my_touch.TP_Set_Rotation(3);
   147b0:	63 e0       	ldi	r22, 0x03	; 3
   147b2:	85 e9       	ldi	r24, 0x95	; 149
   147b4:	9c e0       	ldi	r25, 0x0C	; 12
   147b6:	0e 94 e1 d2 	call	0x1a5c2	; 0x1a5c2 <LCDWIKI_TOUCH::TP_Set_Rotation(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3848
      my_touch.TP_SetOnOff(LED_ON);
   147ba:	61 e0       	ldi	r22, 0x01	; 1
   147bc:	85 e9       	ldi	r24, 0x95	; 149
   147be:	9c e0       	ldi	r25, 0x0C	; 12
   147c0:	0e 94 6c d0 	call	0x1a0d8	; 0x1a0d8 <LCDWIKI_TOUCH::TP_SetOnOff(unsigned char)>
   147c4:	1b e0       	ldi	r17, 0x0B	; 11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3851 (discriminator 2)
      for (uint8_t i = 1; i < 8; i++)
      {
        digitalWrite(LED, LOW);
   147c6:	60 e0       	ldi	r22, 0x00	; 0
   147c8:	88 e0       	ldi	r24, 0x08	; 8
   147ca:	0f 94 60 10 	call	0x220c0	; 0x220c0 <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3852 (discriminator 2)
        my_touch.TP_SetBacklight(i * 11);
   147ce:	61 2f       	mov	r22, r17
   147d0:	85 e9       	ldi	r24, 0x95	; 149
   147d2:	9c e0       	ldi	r25, 0x0C	; 12
   147d4:	0e 94 19 d0 	call	0x1a032	; 0x1a032 <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3853 (discriminator 2)
        delay(100);
   147d8:	64 e6       	ldi	r22, 0x64	; 100
   147da:	70 e0       	ldi	r23, 0x00	; 0
   147dc:	80 e0       	ldi	r24, 0x00	; 0
   147de:	90 e0       	ldi	r25, 0x00	; 0
   147e0:	0f 94 33 0f 	call	0x21e66	; 0x21e66 <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3854 (discriminator 2)
        digitalWrite(LED, HIGH);
   147e4:	61 e0       	ldi	r22, 0x01	; 1
   147e6:	88 e0       	ldi	r24, 0x08	; 8
   147e8:	0f 94 60 10 	call	0x220c0	; 0x220c0 <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3855 (discriminator 2)
        delay(100);
   147ec:	64 e6       	ldi	r22, 0x64	; 100
   147ee:	70 e0       	ldi	r23, 0x00	; 0
   147f0:	80 e0       	ldi	r24, 0x00	; 0
   147f2:	90 e0       	ldi	r25, 0x00	; 0
   147f4:	0f 94 33 0f 	call	0x21e66	; 0x21e66 <delay>
   147f8:	15 5f       	subi	r17, 0xF5	; 245
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3849 (discriminator 2)
      strcpy_P(str1, text_touchscreen);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      my_touch.TP_Init(my_lcd.Get_Rotation(), my_lcd.Get_Display_Width(), my_lcd.Get_Display_Height());
      my_touch.TP_Set_Rotation(3);
      my_touch.TP_SetOnOff(LED_ON);
      for (uint8_t i = 1; i < 8; i++)
   147fa:	18 35       	cpi	r17, 0x58	; 88
   147fc:	21 f7       	brne	.-56     	; 0x147c6 <setup+0xc24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3857
        my_touch.TP_SetBacklight(i * 11);
        delay(100);
        digitalWrite(LED, HIGH);
        delay(100);
      }
      display_auto_shutdown = EEPROM.read(my_display_auto_shutdown);
   147fe:	80 e6       	ldi	r24, 0x60	; 96
   14800:	90 e0       	ldi	r25, 0x00	; 0
   14802:	0e 94 8e 51 	call	0xa31c	; 0xa31c <EEPROMClass::read(int) [clone .isra.8]>
   14806:	80 93 29 0b 	sts	0x0B29, r24	; 0x800b29 <display_auto_shutdown>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3858
      brigthness_display_values = EEPROM.read(my_brightness_values);
   1480a:	8e e5       	ldi	r24, 0x5E	; 94
   1480c:	90 e0       	ldi	r25, 0x00	; 0
   1480e:	0e 94 8e 51 	call	0xa31c	; 0xa31c <EEPROMClass::read(int) [clone .isra.8]>
   14812:	18 2f       	mov	r17, r24
   14814:	80 93 2c 0b 	sts	0x0B2C, r24	; 0x800b2c <brigthness_display_values>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3859
      brigthness_display_mode = EEPROM.read(my_brightness_mode);
   14818:	8f e5       	ldi	r24, 0x5F	; 95
   1481a:	90 e0       	ldi	r25, 0x00	; 0
   1481c:	0e 94 8e 51 	call	0xa31c	; 0xa31c <EEPROMClass::read(int) [clone .isra.8]>
   14820:	80 93 2a 0b 	sts	0x0B2A, r24	; 0x800b2a <brigthness_display_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3860
      my_touch.TP_SetBacklight(brigthness_display_values * 2);
   14824:	61 2f       	mov	r22, r17
   14826:	66 0f       	add	r22, r22
   14828:	85 e9       	ldi	r24, 0x95	; 149
   1482a:	9c e0       	ldi	r25, 0x0C	; 12
   1482c:	0e 94 19 d0 	call	0x1a032	; 0x1a032 <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char)>
   14830:	2d cf       	rjmp	.-422    	; 0x1468c <setup+0xaea>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3885
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
        selftest_clear_0(SELFTEST_ERR_ONEWIRE);
      }
      else
      {
        strcpy_P(str1, text_err);
   14832:	6b ed       	ldi	r22, 0xDB	; 219
   14834:	71 e8       	ldi	r23, 0x81	; 129
   14836:	ce 01       	movw	r24, r28
   14838:	88 57       	subi	r24, 0x78	; 120
   1483a:	9f 4f       	sbci	r25, 0xFF	; 255
   1483c:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3886
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
   14840:	c1 2c       	mov	r12, r1
   14842:	ee 24       	eor	r14, r14
   14844:	ea 94       	dec	r14
   14846:	fe 2c       	mov	r15, r14
   14848:	00 e0       	ldi	r16, 0x00	; 0
   1484a:	18 ef       	ldi	r17, 0xF8	; 248
   1484c:	21 e0       	ldi	r18, 0x01	; 1
   1484e:	42 e8       	ldi	r20, 0x82	; 130
   14850:	50 e0       	ldi	r21, 0x00	; 0
   14852:	60 ea       	ldi	r22, 0xA0	; 160
   14854:	70 e0       	ldi	r23, 0x00	; 0
   14856:	ce 01       	movw	r24, r28
   14858:	88 57       	subi	r24, 0x78	; 120
   1485a:	9f 4f       	sbci	r25, 0xFF	; 255
   1485c:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3887
        selftest_set_0(SELFTEST_ERR_ONEWIRE);
   14860:	82 e0       	ldi	r24, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4033
      }
      else
      {
        strcpy_P(str1, text_err);
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
        selftest_set_0(SELFTEST_ERR_RTC);
   14862:	0e 94 f1 6d 	call	0xdbe2	; 0xdbe2 <selftest_set_0(unsigned char)>
   14866:	12 cf       	rjmp	.-476    	; 0x1468c <setup+0xaea>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3892
        selftest_set_0(SELFTEST_ERR_ONEWIRE);
      }
    }
    ///
    /// hledani zarizeni na 1wire sbernici
    if (init == 9)
   14868:	c9 5c       	subi	r28, 0xC9	; 201
   1486a:	de 4f       	sbci	r29, 0xFE	; 254
   1486c:	88 81       	ld	r24, Y
   1486e:	c7 53       	subi	r28, 0x37	; 55
   14870:	d1 40       	sbci	r29, 0x01	; 1
   14872:	89 30       	cpi	r24, 0x09	; 9
   14874:	c1 f5       	brne	.+112    	; 0x148e6 <setup+0xd44>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3894
    {
      strcpy_P(str1, text_onewire_hledam);
   14876:	66 e0       	ldi	r22, 0x06	; 6
   14878:	76 e8       	ldi	r23, 0x86	; 134
   1487a:	ce 01       	movw	r24, r28
   1487c:	88 57       	subi	r24, 0x78	; 120
   1487e:	9f 4f       	sbci	r25, 0xFF	; 255
   14880:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3895
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   14884:	c1 2c       	mov	r12, r1
   14886:	ee 24       	eor	r14, r14
   14888:	ea 94       	dec	r14
   1488a:	fe 2c       	mov	r15, r14
   1488c:	00 ee       	ldi	r16, 0xE0	; 224
   1488e:	17 e0       	ldi	r17, 0x07	; 7
   14890:	21 e0       	ldi	r18, 0x01	; 1
   14892:	4c e8       	ldi	r20, 0x8C	; 140
   14894:	50 e0       	ldi	r21, 0x00	; 0
   14896:	6e e1       	ldi	r22, 0x1E	; 30
   14898:	70 e0       	ldi	r23, 0x00	; 0
   1489a:	ce 01       	movw	r24, r28
   1489c:	88 57       	subi	r24, 0x78	; 120
   1489e:	9f 4f       	sbci	r25, 0xFF	; 255
   148a0:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3896
      Global_HWwirenum = 0;
   148a4:	10 92 dd 10 	sts	0x10DD, r1	; 0x8010dd <Global_HWwirenum>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3897
      one_hw_search_device(0);
   148a8:	80 e0       	ldi	r24, 0x00	; 0
   148aa:	0e 94 26 b5 	call	0x16a4c	; 0x16a4c <one_hw_search_device(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3898
      tds_update_associate();
   148ae:	0e 94 e6 b3 	call	0x167cc	; 0x167cc <tds_update_associate()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3899
      strcpy (str1, "Nalezeno: ");
   148b2:	68 e8       	ldi	r22, 0x88	; 136
   148b4:	78 e0       	ldi	r23, 0x08	; 8
   148b6:	ce 01       	movw	r24, r28
   148b8:	88 57       	subi	r24, 0x78	; 120
   148ba:	9f 4f       	sbci	r25, 0xFF	; 255
   148bc:	0f 94 67 1a 	call	0x234ce	; 0x234ce <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3900
      itoa(Global_HWwirenum, str2, 10);
   148c0:	80 91 dd 10 	lds	r24, 0x10DD	; 0x8010dd <Global_HWwirenum>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   148c4:	4a e0       	ldi	r20, 0x0A	; 10
   148c6:	b5 01       	movw	r22, r10
   148c8:	90 e0       	ldi	r25, 0x00	; 0
   148ca:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3901
      strcat(str1, str2);
   148ce:	b5 01       	movw	r22, r10
   148d0:	ce 01       	movw	r24, r28
   148d2:	88 57       	subi	r24, 0x78	; 120
   148d4:	9f 4f       	sbci	r25, 0xFF	; 255
   148d6:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3902
      show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   148da:	21 e0       	ldi	r18, 0x01	; 1
   148dc:	4c e8       	ldi	r20, 0x8C	; 140
   148de:	50 e0       	ldi	r21, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3955
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_ok);
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   148e0:	60 ea       	ldi	r22, 0xA0	; 160
   148e2:	70 e0       	ldi	r23, 0x00	; 0
   148e4:	22 ce       	rjmp	.-956    	; 0x1452a <setup+0x988>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3906
      strcat(str1, str2);
      show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    }
    ///
    /// inicializace wiznet w5500
    if (init == 10)
   148e6:	c9 5c       	subi	r28, 0xC9	; 201
   148e8:	de 4f       	sbci	r29, 0xFE	; 254
   148ea:	98 81       	ld	r25, Y
   148ec:	c7 53       	subi	r28, 0x37	; 55
   148ee:	d1 40       	sbci	r29, 0x01	; 1
   148f0:	9a 30       	cpi	r25, 0x0A	; 10
   148f2:	09 f0       	breq	.+2      	; 0x148f6 <setup+0xd54>
   148f4:	b3 c1       	rjmp	.+870    	; 0x14c5c <setup+0x10ba>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3908
    {
      digitalWrite(ETH_RST, HIGH);
   148f6:	61 e0       	ldi	r22, 0x01	; 1
   148f8:	86 e0       	ldi	r24, 0x06	; 6
   148fa:	0f 94 60 10 	call	0x220c0	; 0x220c0 <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3909
      delay(10);
   148fe:	6a e0       	ldi	r22, 0x0A	; 10
   14900:	70 e0       	ldi	r23, 0x00	; 0
   14902:	80 e0       	ldi	r24, 0x00	; 0
   14904:	90 e0       	ldi	r25, 0x00	; 0
   14906:	0f 94 33 0f 	call	0x21e66	; 0x21e66 <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3910
      digitalWrite(ETH_RST, LOW);
   1490a:	60 e0       	ldi	r22, 0x00	; 0
   1490c:	86 e0       	ldi	r24, 0x06	; 6
   1490e:	0f 94 60 10 	call	0x220c0	; 0x220c0 <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3911
      delay(10);
   14912:	6a e0       	ldi	r22, 0x0A	; 10
   14914:	70 e0       	ldi	r23, 0x00	; 0
   14916:	80 e0       	ldi	r24, 0x00	; 0
   14918:	90 e0       	ldi	r25, 0x00	; 0
   1491a:	0f 94 33 0f 	call	0x21e66	; 0x21e66 <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3912
      digitalWrite(ETH_RST, HIGH);
   1491e:	61 e0       	ldi	r22, 0x01	; 1
   14920:	86 e0       	ldi	r24, 0x06	; 6
   14922:	0f 94 60 10 	call	0x220c0	; 0x220c0 <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3913
      delay(100);
   14926:	64 e6       	ldi	r22, 0x64	; 100
   14928:	70 e0       	ldi	r23, 0x00	; 0
   1492a:	80 e0       	ldi	r24, 0x00	; 0
   1492c:	90 e0       	ldi	r25, 0x00	; 0
   1492e:	0f 94 33 0f 	call	0x21e66	; 0x21e66 <delay>
_ZN13EthernetClass4initEh():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.h:35

  static uint8_t _state[MAX_SOCK_NUM];
  static uint16_t _server_port[MAX_SOCK_NUM];

  EthernetClass() { _dhcp = NULL; w5500_cspin = 10; }
  void init(uint8_t _cspin = 10) { w5500_cspin = _cspin; }
   14932:	8f e0       	ldi	r24, 0x0F	; 15
   14934:	80 93 3f 12 	sts	0x123F, r24	; 0x80123f <Ethernet+0xc>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3915
      Ethernet.init(ETH_CS);
      Ethernet.begin(device.mac, device.myIP, device.myDNS, device.myGW, device.myMASK);
   14938:	60 ec       	ldi	r22, 0xC0	; 192
   1493a:	7f e0       	ldi	r23, 0x0F	; 15
   1493c:	ce 01       	movw	r24, r28
   1493e:	8e 50       	subi	r24, 0x0E	; 14
   14940:	9f 4f       	sbci	r25, 0xFF	; 255
   14942:	0f 94 86 12 	call	0x2250c	; 0x2250c <IPAddress::IPAddress(unsigned char const*)>
   14946:	68 ec       	ldi	r22, 0xC8	; 200
   14948:	7f e0       	ldi	r23, 0x0F	; 15
   1494a:	ce 01       	movw	r24, r28
   1494c:	8d 5d       	subi	r24, 0xDD	; 221
   1494e:	9e 4f       	sbci	r25, 0xFE	; 254
   14950:	0f 94 86 12 	call	0x2250c	; 0x2250c <IPAddress::IPAddress(unsigned char const*)>
   14954:	64 ec       	ldi	r22, 0xC4	; 196
   14956:	7f e0       	ldi	r23, 0x0F	; 15
   14958:	ce 01       	movw	r24, r28
   1495a:	87 5d       	subi	r24, 0xD7	; 215
   1495c:	9e 4f       	sbci	r25, 0xFE	; 254
   1495e:	0f 94 86 12 	call	0x2250c	; 0x2250c <IPAddress::IPAddress(unsigned char const*)>
   14962:	6c eb       	ldi	r22, 0xBC	; 188
   14964:	7f e0       	ldi	r23, 0x0F	; 15
   14966:	ce 01       	movw	r24, r28
   14968:	81 5d       	subi	r24, 0xD1	; 209
   1496a:	9e 4f       	sbci	r25, 0xFE	; 254
   1496c:	0f 94 86 12 	call	0x2250c	; 0x2250c <IPAddress::IPAddress(unsigned char const*)>
   14970:	be 01       	movw	r22, r28
   14972:	6e 50       	subi	r22, 0x0E	; 14
   14974:	7f 4f       	sbci	r23, 0xFF	; 255
   14976:	7b 01       	movw	r14, r22
   14978:	8e 01       	movw	r16, r28
   1497a:	0d 5d       	subi	r16, 0xDD	; 221
   1497c:	1e 4f       	sbci	r17, 0xFE	; 254
   1497e:	9e 01       	movw	r18, r28
   14980:	27 5d       	subi	r18, 0xD7	; 215
   14982:	3e 4f       	sbci	r19, 0xFE	; 254
   14984:	ae 01       	movw	r20, r28
   14986:	41 5d       	subi	r20, 0xD1	; 209
   14988:	5e 4f       	sbci	r21, 0xFE	; 254
   1498a:	66 eb       	ldi	r22, 0xB6	; 182
   1498c:	7f e0       	ldi	r23, 0x0F	; 15
   1498e:	83 e3       	ldi	r24, 0x33	; 51
   14990:	92 e1       	ldi	r25, 0x12	; 18
   14992:	0e 94 c5 d9 	call	0x1b38a	; 0x1b38a <EthernetClass::begin(unsigned char*, IPAddress, IPAddress, IPAddress, IPAddress)>
_ZN10W5500Class8writeRCREh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:242
  __GP_REGISTER_N(SHAR,   0x0009, 6); // Source MAC address
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
  __GP_REGISTER8 (IR,     0x0015);    // Interrupt
  __GP_REGISTER8 (IMR,    0x0016);    // Interrupt Mask
  __GP_REGISTER16(RTR,    0x0019);    // Timeout address
  __GP_REGISTER8 (RCR,    0x001B);    // Retry count
   14996:	42 e0       	ldi	r20, 0x02	; 2
   14998:	64 e0       	ldi	r22, 0x04	; 4
   1499a:	8b e1       	ldi	r24, 0x1B	; 27
   1499c:	90 e0       	ldi	r25, 0x00	; 0
   1499e:	0e 94 ea e1 	call	0x1c3d4	; 0x1c3d4 <W5500Class::write(unsigned int, unsigned char, unsigned char)>
_ZN10W5500Class8writeRTREj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:241
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
  __GP_REGISTER_N(SHAR,   0x0009, 6); // Source MAC address
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
  __GP_REGISTER8 (IR,     0x0015);    // Interrupt
  __GP_REGISTER8 (IMR,    0x0016);    // Interrupt Mask
  __GP_REGISTER16(RTR,    0x0019);    // Timeout address
   149a2:	42 e0       	ldi	r20, 0x02	; 2
   149a4:	64 e0       	ldi	r22, 0x04	; 4
   149a6:	89 e1       	ldi	r24, 0x19	; 25
   149a8:	90 e0       	ldi	r25, 0x00	; 0
   149aa:	0e 94 ea e1 	call	0x1c3d4	; 0x1c3d4 <W5500Class::write(unsigned int, unsigned char, unsigned char)>
   149ae:	48 e5       	ldi	r20, 0x58	; 88
   149b0:	64 e0       	ldi	r22, 0x04	; 4
   149b2:	8a e1       	ldi	r24, 0x1A	; 26
   149b4:	90 e0       	ldi	r25, 0x00	; 0
   149b6:	0e 94 ea e1 	call	0x1c3d4	; 0x1c3d4 <W5500Class::write(unsigned int, unsigned char, unsigned char)>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3918
      w5500.setRetransmissionCount(2);
      w5500.setRetransmissionTime(600);
      strcpy_P(str1, text_ethernet_rozhrani);
   149ba:	64 ee       	ldi	r22, 0xE4	; 228
   149bc:	75 e8       	ldi	r23, 0x85	; 133
   149be:	ce 01       	movw	r24, r28
   149c0:	88 57       	subi	r24, 0x78	; 120
   149c2:	9f 4f       	sbci	r25, 0xFF	; 255
   149c4:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3919
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   149c8:	c1 2c       	mov	r12, r1
   149ca:	ee 24       	eor	r14, r14
   149cc:	ea 94       	dec	r14
   149ce:	fe 2c       	mov	r15, r14
   149d0:	00 ee       	ldi	r16, 0xE0	; 224
   149d2:	17 e0       	ldi	r17, 0x07	; 7
   149d4:	21 e0       	ldi	r18, 0x01	; 1
   149d6:	46 e9       	ldi	r20, 0x96	; 150
   149d8:	50 e0       	ldi	r21, 0x00	; 0
   149da:	6e e1       	ldi	r22, 0x1E	; 30
   149dc:	70 e0       	ldi	r23, 0x00	; 0
   149de:	ce 01       	movw	r24, r28
   149e0:	88 57       	subi	r24, 0x78	; 120
   149e2:	9f 4f       	sbci	r25, 0xFF	; 255
   149e4:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3920
      delay(100);
   149e8:	64 e6       	ldi	r22, 0x64	; 100
   149ea:	70 e0       	ldi	r23, 0x00	; 0
   149ec:	80 e0       	ldi	r24, 0x00	; 0
   149ee:	90 e0       	ldi	r25, 0x00	; 0
   149f0:	0f 94 33 0f 	call	0x21e66	; 0x21e66 <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3921
      http_server.begin();
   149f4:	86 ea       	ldi	r24, 0xA6	; 166
   149f6:	9e e0       	ldi	r25, 0x0E	; 14
   149f8:	0e 94 47 dc 	call	0x1b88e	; 0x1b88e <EthernetServer::begin()>
   149fc:	47 ce       	rjmp	.-882    	; 0x1468c <setup+0xaea>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3944
        {
          selftest_clear_0(SELFTEST_MQTT_LINK);
          break;
        }
        else
          selftest_set_0(SELFTEST_MQTT_LINK);
   149fe:	85 e0       	ldi	r24, 0x05	; 5
   14a00:	0e 94 f1 6d 	call	0xdbe2	; 0xdbe2 <selftest_set_0(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3934

      mqtt_client.setServer(device.mqtt_server, device.mqtt_port);
      mqtt_client.setCallback(mqtt_callback);
      send_mqtt_set_header(thermctl_header_out);
      milis = millis();
      while ((millis() - milis) < 3000 )
   14a04:	62 c1       	rjmp	.+708    	; 0x14cca <setup+0x1128>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3954
        strcpy_P(str1, text_err);
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_ok);
   14a06:	68 ed       	ldi	r22, 0xD8	; 216
   14a08:	71 e8       	ldi	r23, 0x81	; 129
   14a0a:	ce 01       	movw	r24, r28
   14a0c:	88 57       	subi	r24, 0x78	; 120
   14a0e:	9f 4f       	sbci	r25, 0xFF	; 255
   14a10:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3955
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   14a14:	c1 2c       	mov	r12, r1
   14a16:	ee 24       	eor	r14, r14
   14a18:	ea 94       	dec	r14
   14a1a:	fe 2c       	mov	r15, r14
   14a1c:	00 ee       	ldi	r16, 0xE0	; 224
   14a1e:	17 e0       	ldi	r17, 0x07	; 7
   14a20:	8b c1       	rjmp	.+790    	; 0x14d38 <setup+0x1196>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3960
      }
    }
    ///
    /// inicializace rest api rozhrani
    if (init == 12)
   14a22:	c9 5c       	subi	r28, 0xC9	; 201
   14a24:	de 4f       	sbci	r29, 0xFE	; 254
   14a26:	68 81       	ld	r22, Y
   14a28:	c7 53       	subi	r28, 0x37	; 55
   14a2a:	d1 40       	sbci	r29, 0x01	; 1
   14a2c:	6c 30       	cpi	r22, 0x0C	; 12
   14a2e:	89 f4       	brne	.+34     	; 0x14a52 <setup+0xeb0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3962
    {
      strcpy_P(str1, text_rest_rozhrani);
   14a30:	64 ec       	ldi	r22, 0xC4	; 196
   14a32:	75 e8       	ldi	r23, 0x85	; 133
   14a34:	ce 01       	movw	r24, r28
   14a36:	88 57       	subi	r24, 0x78	; 120
   14a38:	9f 4f       	sbci	r25, 0xFF	; 255
   14a3a:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3963
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   14a3e:	c1 2c       	mov	r12, r1
   14a40:	ee 24       	eor	r14, r14
   14a42:	ea 94       	dec	r14
   14a44:	fe 2c       	mov	r15, r14
   14a46:	00 ee       	ldi	r16, 0xE0	; 224
   14a48:	17 e0       	ldi	r17, 0x07	; 7
   14a4a:	21 e0       	ldi	r18, 0x01	; 1
   14a4c:	4a ea       	ldi	r20, 0xAA	; 170
   14a4e:	50 e0       	ldi	r21, 0x00	; 0
   14a50:	87 cd       	rjmp	.-1266   	; 0x14560 <setup+0x9be>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3967
    }
    ///
    /// inicializace nrf
    if (init == 13)
   14a52:	c9 5c       	subi	r28, 0xC9	; 201
   14a54:	de 4f       	sbci	r29, 0xFE	; 254
   14a56:	78 81       	ld	r23, Y
   14a58:	c7 53       	subi	r28, 0x37	; 55
   14a5a:	d1 40       	sbci	r29, 0x01	; 1
   14a5c:	7d 30       	cpi	r23, 0x0D	; 13
   14a5e:	09 f0       	breq	.+2      	; 0x14a62 <setup+0xec0>
   14a60:	6f c1       	rjmp	.+734    	; 0x14d40 <setup+0x119e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3969
    {
      strcpy_P(str1, text_nrf_rozhrani);
   14a62:	67 eb       	ldi	r22, 0xB7	; 183
   14a64:	75 e8       	ldi	r23, 0x85	; 133
   14a66:	ce 01       	movw	r24, r28
   14a68:	88 57       	subi	r24, 0x78	; 120
   14a6a:	9f 4f       	sbci	r25, 0xFF	; 255
   14a6c:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3970
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   14a70:	c1 2c       	mov	r12, r1
   14a72:	ee 24       	eor	r14, r14
   14a74:	ea 94       	dec	r14
   14a76:	fe 2c       	mov	r15, r14
   14a78:	00 ee       	ldi	r16, 0xE0	; 224
   14a7a:	17 e0       	ldi	r17, 0x07	; 7
   14a7c:	21 e0       	ldi	r18, 0x01	; 1
   14a7e:	44 eb       	ldi	r20, 0xB4	; 180
   14a80:	50 e0       	ldi	r21, 0x00	; 0
   14a82:	6e e1       	ldi	r22, 0x1E	; 30
   14a84:	70 e0       	ldi	r23, 0x00	; 0
   14a86:	ce 01       	movw	r24, r28
   14a88:	88 57       	subi	r24, 0x78	; 120
   14a8a:	9f 4f       	sbci	r25, 0xFF	; 255
   14a8c:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3971
      scan_rf_net_enable = 2;
   14a90:	82 e0       	ldi	r24, 0x02	; 2
   14a92:	80 93 92 10 	sts	0x1092, r24	; 0x801092 <scan_rf_net_enable>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3972
      radio.begin();
   14a96:	8e e8       	ldi	r24, 0x8E	; 142
   14a98:	9e e0       	ldi	r25, 0x0E	; 14
   14a9a:	0e 94 9c f8 	call	0x1f138	; 0x1f138 <RF24::begin()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3973
      radio.setPALevel(nrf_load_power());
   14a9e:	0e 94 0b b1 	call	0x16216	; 0x16216 <nrf_load_power()>
   14aa2:	68 2f       	mov	r22, r24
   14aa4:	8e e8       	ldi	r24, 0x8E	; 142
   14aa6:	9e e0       	ldi	r25, 0x0E	; 14
   14aa8:	0e 94 42 f8 	call	0x1f084	; 0x1f084 <RF24::setPALevel(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3974
      nrf_mesh_reinit();
   14aac:	0e 94 e4 74 	call	0xe9c8	; 0xe9c8 <nrf_mesh_reinit()>
   14ab0:	ed cd       	rjmp	.-1062   	; 0x1468c <setup+0xaea>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4011
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
        selftest_set_0(SELFTEST_ERR_NTP);
      }
      else
      {
        strcpy_P(str1, text_ok);
   14ab2:	68 ed       	ldi	r22, 0xD8	; 216
   14ab4:	71 e8       	ldi	r23, 0x81	; 129
   14ab6:	ce 01       	movw	r24, r28
   14ab8:	88 57       	subi	r24, 0x78	; 120
   14aba:	9f 4f       	sbci	r25, 0xFF	; 255
   14abc:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4012
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   14ac0:	c1 2c       	mov	r12, r1
   14ac2:	ee 24       	eor	r14, r14
   14ac4:	ea 94       	dec	r14
   14ac6:	fe 2c       	mov	r15, r14
   14ac8:	00 ee       	ldi	r16, 0xE0	; 224
   14aca:	17 e0       	ldi	r17, 0x07	; 7
   14acc:	21 e0       	ldi	r18, 0x01	; 1
   14ace:	48 ec       	ldi	r20, 0xC8	; 200
   14ad0:	50 e0       	ldi	r21, 0x00	; 0
   14ad2:	60 ea       	ldi	r22, 0xA0	; 160
   14ad4:	70 e0       	ldi	r23, 0x00	; 0
   14ad6:	ce 01       	movw	r24, r28
   14ad8:	88 57       	subi	r24, 0x78	; 120
   14ada:	9f 4f       	sbci	r25, 0xFF	; 255
   14adc:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4013
        selftest_clear_0(SELFTEST_ERR_NTP);
   14ae0:	81 e0       	ldi	r24, 0x01	; 1
   14ae2:	b9 c0       	rjmp	.+370    	; 0x14c56 <setup+0x10b4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4018
      }
    }
    ///
    /// inicializace RTC casu
    if (init == 16)
   14ae4:	c9 5c       	subi	r28, 0xC9	; 201
   14ae6:	de 4f       	sbci	r29, 0xFE	; 254
   14ae8:	98 81       	ld	r25, Y
   14aea:	c7 53       	subi	r28, 0x37	; 55
   14aec:	d1 40       	sbci	r29, 0x01	; 1
   14aee:	90 31       	cpi	r25, 0x10	; 16
   14af0:	09 f0       	breq	.+2      	; 0x14af4 <setup+0xf52>
   14af2:	cc cd       	rjmp	.-1128   	; 0x1468c <setup+0xaea>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4020
    {
      strcpy_P(str1, text_rtc_cas);
   14af4:	62 e8       	ldi	r22, 0x82	; 130
   14af6:	75 e8       	ldi	r23, 0x85	; 133
   14af8:	ce 01       	movw	r24, r28
   14afa:	88 57       	subi	r24, 0x78	; 120
   14afc:	9f 4f       	sbci	r25, 0xFF	; 255
   14afe:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4021
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   14b02:	c1 2c       	mov	r12, r1
   14b04:	ee 24       	eor	r14, r14
   14b06:	ea 94       	dec	r14
   14b08:	fe 2c       	mov	r15, r14
   14b0a:	00 ee       	ldi	r16, 0xE0	; 224
   14b0c:	17 e0       	ldi	r17, 0x07	; 7
   14b0e:	21 e0       	ldi	r18, 0x01	; 1
   14b10:	42 ed       	ldi	r20, 0xD2	; 210
   14b12:	50 e0       	ldi	r21, 0x00	; 0
   14b14:	6e e1       	ldi	r22, 0x1E	; 30
   14b16:	70 e0       	ldi	r23, 0x00	; 0
   14b18:	ce 01       	movw	r24, r28
   14b1a:	88 57       	subi	r24, 0x78	; 120
   14b1c:	9f 4f       	sbci	r25, 0xFF	; 255
   14b1e:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4022
      if (rtc.isrunning())
   14b22:	8c e1       	ldi	r24, 0x1C	; 28
   14b24:	9f e0       	ldi	r25, 0x0F	; 15
   14b26:	0e 94 57 e7 	call	0x1ceae	; 0x1ceae <RTC_DS1307::isrunning()>
   14b2a:	88 23       	and	r24, r24
   14b2c:	11 f1       	breq	.+68     	; 0x14b72 <setup+0xfd0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4024
      {
        now = rtc.now();
   14b2e:	ce 01       	movw	r24, r28
   14b30:	8e 50       	subi	r24, 0x0E	; 14
   14b32:	9f 4f       	sbci	r25, 0xFF	; 255
   14b34:	0e 94 77 e7 	call	0x1ceee	; 0x1ceee <RTC_DS1307::now()>
   14b38:	87 e0       	ldi	r24, 0x07	; 7
   14b3a:	fe 01       	movw	r30, r28
   14b3c:	ee 50       	subi	r30, 0x0E	; 14
   14b3e:	ff 4f       	sbci	r31, 0xFF	; 255
   14b40:	a5 e1       	ldi	r26, 0x15	; 21
   14b42:	bf e0       	ldi	r27, 0x0F	; 15
   14b44:	01 90       	ld	r0, Z+
   14b46:	0d 92       	st	X+, r0
   14b48:	8a 95       	dec	r24
   14b4a:	e1 f7       	brne	.-8      	; 0x14b44 <setup+0xfa2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4025
        strcpy_P(str1, text_ok);
   14b4c:	68 ed       	ldi	r22, 0xD8	; 216
   14b4e:	71 e8       	ldi	r23, 0x81	; 129
   14b50:	ce 01       	movw	r24, r28
   14b52:	88 57       	subi	r24, 0x78	; 120
   14b54:	9f 4f       	sbci	r25, 0xFF	; 255
   14b56:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4026
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   14b5a:	21 e0       	ldi	r18, 0x01	; 1
   14b5c:	42 ed       	ldi	r20, 0xD2	; 210
   14b5e:	50 e0       	ldi	r21, 0x00	; 0
   14b60:	60 ea       	ldi	r22, 0xA0	; 160
   14b62:	70 e0       	ldi	r23, 0x00	; 0
   14b64:	ce 01       	movw	r24, r28
   14b66:	88 57       	subi	r24, 0x78	; 120
   14b68:	9f 4f       	sbci	r25, 0xFF	; 255
   14b6a:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4027
        selftest_clear_0(SELFTEST_ERR_RTC);
   14b6e:	80 e0       	ldi	r24, 0x00	; 0
   14b70:	72 c0       	rjmp	.+228    	; 0x14c56 <setup+0x10b4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4031
      }
      else
      {
        strcpy_P(str1, text_err);
   14b72:	6b ed       	ldi	r22, 0xDB	; 219
   14b74:	71 e8       	ldi	r23, 0x81	; 129
   14b76:	ce 01       	movw	r24, r28
   14b78:	88 57       	subi	r24, 0x78	; 120
   14b7a:	9f 4f       	sbci	r25, 0xFF	; 255
   14b7c:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4032
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
   14b80:	c1 2c       	mov	r12, r1
   14b82:	ee 24       	eor	r14, r14
   14b84:	ea 94       	dec	r14
   14b86:	fe 2c       	mov	r15, r14
   14b88:	00 e0       	ldi	r16, 0x00	; 0
   14b8a:	18 ef       	ldi	r17, 0xF8	; 248
   14b8c:	21 e0       	ldi	r18, 0x01	; 1
   14b8e:	42 ed       	ldi	r20, 0xD2	; 210
   14b90:	50 e0       	ldi	r21, 0x00	; 0
   14b92:	60 ea       	ldi	r22, 0xA0	; 160
   14b94:	70 e0       	ldi	r23, 0x00	; 0
   14b96:	ce 01       	movw	r24, r28
   14b98:	88 57       	subi	r24, 0x78	; 120
   14b9a:	9f 4f       	sbci	r25, 0xFF	; 255
   14b9c:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4033
        selftest_set_0(SELFTEST_ERR_RTC);
   14ba0:	80 e0       	ldi	r24, 0x00	; 0
   14ba2:	5f ce       	rjmp	.-834    	; 0x14862 <setup+0xcc0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3819
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
    }
    ///
    ///  nacteni provoznich parametru
    if (init == 6)
   14ba4:	c9 5c       	subi	r28, 0xC9	; 201
   14ba6:	de 4f       	sbci	r29, 0xFE	; 254
   14ba8:	78 81       	ld	r23, Y
   14baa:	c7 53       	subi	r28, 0x37	; 55
   14bac:	d1 40       	sbci	r29, 0x01	; 1
   14bae:	76 30       	cpi	r23, 0x06	; 6
   14bb0:	09 f4       	brne	.+2      	; 0x14bb4 <setup+0x1012>
   14bb2:	21 cd       	rjmp	.-1470   	; 0x145f6 <setup+0xa54>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3842
        remote_tds_set_last_update(idx, 255);
      }
    }
    ///
    /// zobrazeni kalibracnich informaci touchscreenu
    if (init == 7)
   14bb4:	77 30       	cpi	r23, 0x07	; 7
   14bb6:	09 f4       	brne	.+2      	; 0x14bba <setup+0x1018>
   14bb8:	cf cd       	rjmp	.-1122   	; 0x14758 <setup+0xbb6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3864
      brigthness_display_mode = EEPROM.read(my_brightness_mode);
      my_touch.TP_SetBacklight(brigthness_display_values * 2);
    }
    ///
    /// inicializace ds2482
    if (init == 8)
   14bba:	78 30       	cpi	r23, 0x08	; 8
   14bbc:	09 f0       	breq	.+2      	; 0x14bc0 <setup+0x101e>
   14bbe:	54 ce       	rjmp	.-856    	; 0x14868 <setup+0xcc6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3866
    {
      strcpy_P(str1, text_onewire_rozhrani);
   14bc0:	63 e1       	ldi	r22, 0x13	; 19
   14bc2:	76 e8       	ldi	r23, 0x86	; 134
   14bc4:	ce 01       	movw	r24, r28
   14bc6:	88 57       	subi	r24, 0x78	; 120
   14bc8:	9f 4f       	sbci	r25, 0xFF	; 255
   14bca:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3867
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   14bce:	c1 2c       	mov	r12, r1
   14bd0:	ee 24       	eor	r14, r14
   14bd2:	ea 94       	dec	r14
   14bd4:	fe 2c       	mov	r15, r14
   14bd6:	00 ee       	ldi	r16, 0xE0	; 224
   14bd8:	17 e0       	ldi	r17, 0x07	; 7
   14bda:	21 e0       	ldi	r18, 0x01	; 1
   14bdc:	42 e8       	ldi	r20, 0x82	; 130
   14bde:	50 e0       	ldi	r21, 0x00	; 0
   14be0:	6e e1       	ldi	r22, 0x1E	; 30
   14be2:	70 e0       	ldi	r23, 0x00	; 0
   14be4:	ce 01       	movw	r24, r28
   14be6:	88 57       	subi	r24, 0x78	; 120
   14be8:	9f 4f       	sbci	r25, 0xFF	; 255
   14bea:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3868
      ds2482_address[0].i2c_addr = 0b0011000;
   14bee:	88 e1       	ldi	r24, 0x18	; 24
   14bf0:	80 93 99 10 	sts	0x1099, r24	; 0x801099 <ds2482_address>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3869
      ds2482_address[0].HWwirenum = 0;
   14bf4:	10 92 9a 10 	sts	0x109A, r1	; 0x80109a <ds2482_address+0x1>
   14bf8:	ee ed       	ldi	r30, 0xDE	; 222
   14bfa:	f0 e1       	ldi	r31, 0x10	; 16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3873 (discriminator 2)
      ///
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++ )
      {
        status_tds18s20[idx].wait = false;
   14bfc:	15 8e       	std	Z+29, r1	; 0x1d
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3874 (discriminator 2)
        status_tds18s20[idx].period_now = 0;
   14bfe:	14 8e       	std	Z+28, r1	; 0x1c
   14c00:	7e 96       	adiw	r30, 0x1e	; 30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3871 (discriminator 2)
      strcpy_P(str1, text_onewire_rozhrani);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      ds2482_address[0].i2c_addr = 0b0011000;
      ds2482_address[0].HWwirenum = 0;
      ///
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++ )
   14c02:	71 e1       	ldi	r23, 0x11	; 17
   14c04:	e2 39       	cpi	r30, 0x92	; 146
   14c06:	f7 07       	cpc	r31, r23
   14c08:	c9 f7       	brne	.-14     	; 0x14bfc <setup+0x105a>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   14c0a:	4a e0       	ldi	r20, 0x0A	; 10
   14c0c:	be 01       	movw	r22, r28
   14c0e:	62 52       	subi	r22, 0x22	; 34
   14c10:	7f 4f       	sbci	r23, 0xFF	; 255
   14c12:	88 e1       	ldi	r24, 0x18	; 24
   14c14:	90 e0       	ldi	r25, 0x00	; 0
   14c16:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3877
      {
        status_tds18s20[idx].wait = false;
        status_tds18s20[idx].period_now = 0;
      }
      itoa(ds2482_address[0].i2c_addr, tmp1, 10);
      if (ds2482reset(ds2482_address[0].i2c_addr) == DS2482_ERR_OK)
   14c1a:	80 91 99 10 	lds	r24, 0x1099	; 0x801099 <ds2482_address>
   14c1e:	0f 94 a9 0a 	call	0x21552	; 0x21552 <ds2482reset(unsigned char)>
   14c22:	81 11       	cpse	r24, r1
   14c24:	06 ce       	rjmp	.-1012   	; 0x14832 <setup+0xc90>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3879
      {
        strcpy_P(str1, text_ok);
   14c26:	68 ed       	ldi	r22, 0xD8	; 216
   14c28:	71 e8       	ldi	r23, 0x81	; 129
   14c2a:	ce 01       	movw	r24, r28
   14c2c:	88 57       	subi	r24, 0x78	; 120
   14c2e:	9f 4f       	sbci	r25, 0xFF	; 255
   14c30:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3880
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   14c34:	c1 2c       	mov	r12, r1
   14c36:	ee 24       	eor	r14, r14
   14c38:	ea 94       	dec	r14
   14c3a:	fe 2c       	mov	r15, r14
   14c3c:	00 ee       	ldi	r16, 0xE0	; 224
   14c3e:	17 e0       	ldi	r17, 0x07	; 7
   14c40:	21 e0       	ldi	r18, 0x01	; 1
   14c42:	42 e8       	ldi	r20, 0x82	; 130
   14c44:	50 e0       	ldi	r21, 0x00	; 0
   14c46:	60 ea       	ldi	r22, 0xA0	; 160
   14c48:	70 e0       	ldi	r23, 0x00	; 0
   14c4a:	ce 01       	movw	r24, r28
   14c4c:	88 57       	subi	r24, 0x78	; 120
   14c4e:	9f 4f       	sbci	r25, 0xFF	; 255
   14c50:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3881
        selftest_clear_0(SELFTEST_ERR_ONEWIRE);
   14c54:	82 e0       	ldi	r24, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4027
      if (rtc.isrunning())
      {
        now = rtc.now();
        strcpy_P(str1, text_ok);
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
        selftest_clear_0(SELFTEST_ERR_RTC);
   14c56:	0e 94 67 6f 	call	0xdece	; 0xdece <selftest_clear_0(unsigned char)>
   14c5a:	18 cd       	rjmp	.-1488   	; 0x1468c <setup+0xaea>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3925
      delay(100);
      http_server.begin();
    }
    ///
    ///inicializace mqtt rozhrani
    if (init == 11)
   14c5c:	c9 5c       	subi	r28, 0xC9	; 201
   14c5e:	de 4f       	sbci	r29, 0xFE	; 254
   14c60:	88 81       	ld	r24, Y
   14c62:	c7 53       	subi	r28, 0x37	; 55
   14c64:	d1 40       	sbci	r29, 0x01	; 1
   14c66:	8b 30       	cpi	r24, 0x0B	; 11
   14c68:	09 f0       	breq	.+2      	; 0x14c6c <setup+0x10ca>
   14c6a:	db ce       	rjmp	.-586    	; 0x14a22 <setup+0xe80>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3927
    {
      strcpy_P(str1, text_mqtt_rozhrani);
   14c6c:	66 ed       	ldi	r22, 0xD6	; 214
   14c6e:	75 e8       	ldi	r23, 0x85	; 133
   14c70:	ce 01       	movw	r24, r28
   14c72:	88 57       	subi	r24, 0x78	; 120
   14c74:	9f 4f       	sbci	r25, 0xFF	; 255
   14c76:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3928
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   14c7a:	c1 2c       	mov	r12, r1
   14c7c:	ee 24       	eor	r14, r14
   14c7e:	ea 94       	dec	r14
   14c80:	fe 2c       	mov	r15, r14
   14c82:	00 ee       	ldi	r16, 0xE0	; 224
   14c84:	17 e0       	ldi	r17, 0x07	; 7
   14c86:	21 e0       	ldi	r18, 0x01	; 1
   14c88:	40 ea       	ldi	r20, 0xA0	; 160
   14c8a:	50 e0       	ldi	r21, 0x00	; 0
   14c8c:	6e e1       	ldi	r22, 0x1E	; 30
   14c8e:	70 e0       	ldi	r23, 0x00	; 0
   14c90:	ce 01       	movw	r24, r28
   14c92:	88 57       	subi	r24, 0x78	; 120
   14c94:	9f 4f       	sbci	r25, 0xFF	; 255
   14c96:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3930

      mqtt_client.setServer(device.mqtt_server, device.mqtt_port);
   14c9a:	40 91 da 0f 	lds	r20, 0x0FDA	; 0x800fda <device+0x24>
   14c9e:	50 91 db 0f 	lds	r21, 0x0FDB	; 0x800fdb <device+0x25>
   14ca2:	66 ed       	ldi	r22, 0xD6	; 214
   14ca4:	7f e0       	ldi	r23, 0x0F	; 15
   14ca6:	8c ea       	ldi	r24, 0xAC	; 172
   14ca8:	9e e0       	ldi	r25, 0x0E	; 14
   14caa:	0e 94 b1 f2 	call	0x1e562	; 0x1e562 <PubSubClient::setServer(unsigned char*, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3931
      mqtt_client.setCallback(mqtt_callback);
   14cae:	63 e9       	ldi	r22, 0x93	; 147
   14cb0:	71 e9       	ldi	r23, 0x91	; 145
   14cb2:	8c ea       	ldi	r24, 0xAC	; 172
   14cb4:	9e e0       	ldi	r25, 0x0E	; 14
   14cb6:	0e 94 e7 f2 	call	0x1e5ce	; 0x1e5ce <PubSubClient::setCallback(void (*)(char*, unsigned char*, unsigned int))>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3932
      send_mqtt_set_header(thermctl_header_out);
   14cba:	81 e7       	ldi	r24, 0x71	; 113
   14cbc:	91 e8       	ldi	r25, 0x81	; 129
   14cbe:	0e 94 a4 ac 	call	0x15948	; 0x15948 <send_mqtt_set_header(char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3933
      milis = millis();
   14cc2:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   14cc6:	6b 01       	movw	r12, r22
   14cc8:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3934
      while ((millis() - milis) < 3000 )
   14cca:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   14cce:	6c 19       	sub	r22, r12
   14cd0:	7d 09       	sbc	r23, r13
   14cd2:	8e 09       	sbc	r24, r14
   14cd4:	9f 09       	sbc	r25, r15
   14cd6:	68 3b       	cpi	r22, 0xB8	; 184
   14cd8:	7b 40       	sbci	r23, 0x0B	; 11
   14cda:	81 05       	cpc	r24, r1
   14cdc:	91 05       	cpc	r25, r1
   14cde:	98 f4       	brcc	.+38     	; 0x14d06 <setup+0x1164>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3936
      {
        lastmqttconnect = 0;
   14ce0:	10 92 66 0b 	sts	0x0B66, r1	; 0x800b66 <lastmqttconnect>
   14ce4:	10 92 67 0b 	sts	0x0B67, r1	; 0x800b67 <lastmqttconnect+0x1>
   14ce8:	10 92 68 0b 	sts	0x0B68, r1	; 0x800b68 <lastmqttconnect+0x2>
   14cec:	10 92 69 0b 	sts	0x0B69, r1	; 0x800b69 <lastmqttconnect+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3937
        mqtt_client.loop();
   14cf0:	8c ea       	ldi	r24, 0xAC	; 172
   14cf2:	9e e0       	ldi	r25, 0x0E	; 14
   14cf4:	0e 94 fc ef 	call	0x1dff8	; 0x1dff8 <PubSubClient::loop()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3938
        if (mqtt_reconnect() == 0)
   14cf8:	0e 94 23 68 	call	0xd046	; 0xd046 <mqtt_reconnect()>
   14cfc:	81 11       	cpse	r24, r1
   14cfe:	7f ce       	rjmp	.-770    	; 0x149fe <setup+0xe5c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3940
        {
          selftest_clear_0(SELFTEST_MQTT_LINK);
   14d00:	85 e0       	ldi	r24, 0x05	; 5
   14d02:	0e 94 67 6f 	call	0xdece	; 0xdece <selftest_clear_0(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3946
          break;
        }
        else
          selftest_set_0(SELFTEST_MQTT_LINK);
      }
      lastmqttconnect = 0;
   14d06:	10 92 66 0b 	sts	0x0B66, r1	; 0x800b66 <lastmqttconnect>
   14d0a:	10 92 67 0b 	sts	0x0B67, r1	; 0x800b67 <lastmqttconnect+0x1>
   14d0e:	10 92 68 0b 	sts	0x0B68, r1	; 0x800b68 <lastmqttconnect+0x2>
   14d12:	10 92 69 0b 	sts	0x0B69, r1	; 0x800b69 <lastmqttconnect+0x3>
_Z14selftest_get_0h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3282
     ... 0 - neni oznacen jako chybny
     ... neni 0 - chybny flag
*/
uint8_t selftest_get_0(uint8_t what)
{
  return selftest_data & (1 << what);
   14d16:	80 91 60 0b 	lds	r24, 0x0B60	; 0x800b60 <selftest_data>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3947
        }
        else
          selftest_set_0(SELFTEST_MQTT_LINK);
      }
      lastmqttconnect = 0;
      if (selftest_get_0(SELFTEST_MQTT_LINK) != 0)
   14d1a:	85 ff       	sbrs	r24, 5
   14d1c:	74 ce       	rjmp	.-792    	; 0x14a06 <setup+0xe64>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3949
      {
        strcpy_P(str1, text_err);
   14d1e:	6b ed       	ldi	r22, 0xDB	; 219
   14d20:	71 e8       	ldi	r23, 0x81	; 129
   14d22:	ce 01       	movw	r24, r28
   14d24:	88 57       	subi	r24, 0x78	; 120
   14d26:	9f 4f       	sbci	r25, 0xFF	; 255
   14d28:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3950
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
   14d2c:	c1 2c       	mov	r12, r1
   14d2e:	ee 24       	eor	r14, r14
   14d30:	ea 94       	dec	r14
   14d32:	fe 2c       	mov	r15, r14
   14d34:	00 e0       	ldi	r16, 0x00	; 0
   14d36:	18 ef       	ldi	r17, 0xF8	; 248
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3955
      }
      else
      {
        strcpy_P(str1, text_ok);
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   14d38:	21 e0       	ldi	r18, 0x01	; 1
   14d3a:	40 ea       	ldi	r20, 0xA0	; 160
   14d3c:	50 e0       	ldi	r21, 0x00	; 0
   14d3e:	d0 cd       	rjmp	.-1120   	; 0x148e0 <setup+0xd3e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3978
      radio.setPALevel(nrf_load_power());
      nrf_mesh_reinit();
    }
    ///
    /// inicializace termostatu
    if (init == 14)
   14d40:	c9 5c       	subi	r28, 0xC9	; 201
   14d42:	de 4f       	sbci	r29, 0xFE	; 254
   14d44:	98 81       	ld	r25, Y
   14d46:	c7 53       	subi	r28, 0x37	; 55
   14d48:	d1 40       	sbci	r29, 0x01	; 1
   14d4a:	9e 30       	cpi	r25, 0x0E	; 14
   14d4c:	09 f0       	breq	.+2      	; 0x14d50 <setup+0x11ae>
   14d4e:	50 c8       	rjmp	.-3936   	; 0x13df0 <setup+0x24e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3980
    {
      strcpy_P(str1, text_pid_regulator);
   14d50:	69 ea       	ldi	r22, 0xA9	; 169
   14d52:	75 e8       	ldi	r23, 0x85	; 133
   14d54:	ce 01       	movw	r24, r28
   14d56:	88 57       	subi	r24, 0x78	; 120
   14d58:	9f 4f       	sbci	r25, 0xFF	; 255
   14d5a:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3981
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   14d5e:	c1 2c       	mov	r12, r1
   14d60:	ee 24       	eor	r14, r14
   14d62:	ea 94       	dec	r14
   14d64:	fe 2c       	mov	r15, r14
   14d66:	00 ee       	ldi	r16, 0xE0	; 224
   14d68:	17 e0       	ldi	r17, 0x07	; 7
   14d6a:	21 e0       	ldi	r18, 0x01	; 1
   14d6c:	4e eb       	ldi	r20, 0xBE	; 190
   14d6e:	50 e0       	ldi	r21, 0x00	; 0
   14d70:	6e e1       	ldi	r22, 0x1E	; 30
   14d72:	70 e0       	ldi	r23, 0x00	; 0
   14d74:	ce 01       	movw	r24, r28
   14d76:	88 57       	subi	r24, 0x78	; 120
   14d78:	9f 4f       	sbci	r25, 0xFF	; 255
   14d7a:	0e 94 35 5a 	call	0xb46a	; 0xb46a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3982
      thermostat_init_pid();
   14d7e:	0e 94 b2 b6 	call	0x16d64	; 0x16d64 <thermostat_init_pid()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3984
      /// nastaveni vychozich hodnot pro regulator
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
   14d82:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3986 (discriminator 2)
      {
        thermostat_ring_set_state(idx, 0);
   14d84:	60 e0       	ldi	r22, 0x00	; 0
   14d86:	81 2f       	mov	r24, r17
   14d88:	0e 94 a6 b6 	call	0x16d4c	; 0x16d4c <thermostat_ring_set_state(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3987 (discriminator 2)
        thermostat_ring_set_power(idx, 0);
   14d8c:	60 e0       	ldi	r22, 0x00	; 0
   14d8e:	81 2f       	mov	r24, r17
   14d90:	0e 94 ac b6 	call	0x16d58	; 0x16d58 <thermostat_ring_set_power(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3988 (discriminator 2)
        thermostat_ring_get_pid_eeprom(idx);
   14d94:	81 2f       	mov	r24, r17
   14d96:	0e 94 01 b9 	call	0x17202	; 0x17202 <thermostat_ring_get_pid_eeprom(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3989 (discriminator 2)
        thermostat_ring_update_pid_parameters(idx);
   14d9a:	81 2f       	mov	r24, r17
   14d9c:	0e 94 b5 b8 	call	0x1716a	; 0x1716a <thermostat_ring_update_pid_parameters(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3984 (discriminator 2)
    {
      strcpy_P(str1, text_pid_regulator);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      thermostat_init_pid();
      /// nastaveni vychozich hodnot pro regulator
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
   14da0:	1f 5f       	subi	r17, 0xFF	; 255
   14da2:	15 30       	cpi	r17, 0x05	; 5
   14da4:	79 f7       	brne	.-34     	; 0x14d84 <setup+0x11e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3992
        thermostat_ring_set_power(idx, 0);
        thermostat_ring_get_pid_eeprom(idx);
        thermostat_ring_update_pid_parameters(idx);
      }

      default_ring = get_default_ring();
   14da6:	0e 94 f2 67 	call	0xcfe4	; 0xcfe4 <get_default_ring()>
   14daa:	18 2f       	mov	r17, r24
   14dac:	80 93 3a 0b 	sts	0x0B3A, r24	; 0x800b3a <default_ring>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3993
      last_default_ring = default_ring;
   14db0:	80 93 39 0b 	sts	0x0B39, r24	; 0x800b39 <last_default_ring>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3994
      default_show_temp = get_default_show_temp();
   14db4:	0e 94 00 68 	call	0xd000	; 0xd000 <get_default_show_temp()>
   14db8:	80 93 38 0b 	sts	0x0B38, r24	; 0x800b38 <default_show_temp>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3995
      thermostat_mode_default_ring_last_state = thermostat_ring_get_mode(default_ring);
   14dbc:	81 2f       	mov	r24, r17
   14dbe:	0e 94 5e b8 	call	0x170bc	; 0x170bc <thermostat_ring_get_mode(unsigned char)>
   14dc2:	80 93 37 0b 	sts	0x0B37, r24	; 0x800b37 <thermostat_mode_default_ring_last_state>
   14dc6:	62 cc       	rjmp	.-1852   	; 0x1468c <setup+0xaea>

00014dc8 <check_connectivity_connection()>:
_Z29check_connectivity_connectionv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6393
   return
      1 - OK
      0 - ERR
*/
uint8_t check_connectivity_connection(void)
{
   14dc8:	1f 93       	push	r17
   14dca:	cf 93       	push	r28
   14dcc:	df 93       	push	r29
   14dce:	cd b7       	in	r28, 0x3d	; 61
   14dd0:	de b7       	in	r29, 0x3e	; 62
   14dd2:	60 97       	sbiw	r28, 0x10	; 16
   14dd4:	0f b6       	in	r0, 0x3f	; 63
   14dd6:	f8 94       	cli
   14dd8:	de bf       	out	0x3e, r29	; 62
   14dda:	0f be       	out	0x3f, r0	; 63
   14ddc:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6396
  char server[16];
  uint8_t ret = 0;
  strcpy_P(server, seznam_server);
   14dde:	6d e9       	ldi	r22, 0x9D	; 157
   14de0:	70 e8       	ldi	r23, 0x80	; 128
   14de2:	ce 01       	movw	r24, r28
   14de4:	01 96       	adiw	r24, 0x01	; 1
   14de6:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6397
  if (!ethClient1.connected())
   14dea:	80 ef       	ldi	r24, 0xF0	; 240
   14dec:	9e e0       	ldi	r25, 0x0E	; 14
   14dee:	0e 94 02 dc 	call	0x1b804	; 0x1b804 <EthernetClient::connected()>
   14df2:	18 2f       	mov	r17, r24
   14df4:	81 11       	cpse	r24, r1
   14df6:	2e c0       	rjmp	.+92     	; 0x14e54 <check_connectivity_connection()+0x8c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6399
  {
    if (ethClient1.connect(server, 80))
   14df8:	40 e5       	ldi	r20, 0x50	; 80
   14dfa:	50 e0       	ldi	r21, 0x00	; 0
   14dfc:	be 01       	movw	r22, r28
   14dfe:	6f 5f       	subi	r22, 0xFF	; 255
   14e00:	7f 4f       	sbci	r23, 0xFF	; 255
   14e02:	80 ef       	ldi	r24, 0xF0	; 240
   14e04:	9e e0       	ldi	r25, 0x0E	; 14
   14e06:	0e 94 62 da 	call	0x1b4c4	; 0x1b4c4 <EthernetClient::connect(char const*, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6401
    {
      MenuHistoryNextMenu(MENU_DIALOG_OK, 0, 0);
   14e0a:	70 e0       	ldi	r23, 0x00	; 0
   14e0c:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6399
  char server[16];
  uint8_t ret = 0;
  strcpy_P(server, seznam_server);
  if (!ethClient1.connected())
  {
    if (ethClient1.connect(server, 80))
   14e0e:	89 2b       	or	r24, r25
   14e10:	b1 f0       	breq	.+44     	; 0x14e3e <check_connectivity_connection()+0x76>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6401
    {
      MenuHistoryNextMenu(MENU_DIALOG_OK, 0, 0);
   14e12:	88 e6       	ldi	r24, 0x68	; 104
   14e14:	90 e0       	ldi	r25, 0x00	; 0
   14e16:	0e 94 c1 54 	call	0xa982	; 0xa982 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.59]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6402
      strcpy_P(dialog_text, new_text_ok_connect_seznam);
   14e1a:	6b e0       	ldi	r22, 0x0B	; 11
   14e1c:	7e e7       	ldi	r23, 0x7E	; 126
   14e1e:	83 ea       	ldi	r24, 0xA3	; 163
   14e20:	9a e0       	ldi	r25, 0x0A	; 10
   14e22:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
   14e26:	11 e0       	ldi	r17, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6413
      strcpy_P(dialog_text, new_text_err_connect_seznam);
      ret = 0;
    }
  }
  return ret;
}
   14e28:	81 2f       	mov	r24, r17
   14e2a:	60 96       	adiw	r28, 0x10	; 16
   14e2c:	0f b6       	in	r0, 0x3f	; 63
   14e2e:	f8 94       	cli
   14e30:	de bf       	out	0x3e, r29	; 62
   14e32:	0f be       	out	0x3f, r0	; 63
   14e34:	cd bf       	out	0x3d, r28	; 61
   14e36:	df 91       	pop	r29
   14e38:	cf 91       	pop	r28
   14e3a:	1f 91       	pop	r17
   14e3c:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6407
      strcpy_P(dialog_text, new_text_ok_connect_seznam);
      ret = 1;
    }
    else
    {
      MenuHistoryNextMenu(MENU_DIALOG_OK, 0, 0);
   14e3e:	88 e6       	ldi	r24, 0x68	; 104
   14e40:	90 e0       	ldi	r25, 0x00	; 0
   14e42:	0e 94 c1 54 	call	0xa982	; 0xa982 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.59]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6408
      strcpy_P(dialog_text, new_text_err_connect_seznam);
   14e46:	69 ef       	ldi	r22, 0xF9	; 249
   14e48:	7d e7       	ldi	r23, 0x7D	; 125
   14e4a:	83 ea       	ldi	r24, 0xA3	; 163
   14e4c:	9a e0       	ldi	r25, 0x0A	; 10
   14e4e:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
   14e52:	ea cf       	rjmp	.-44     	; 0x14e28 <check_connectivity_connection()+0x60>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6395
      0 - ERR
*/
uint8_t check_connectivity_connection(void)
{
  char server[16];
  uint8_t ret = 0;
   14e54:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6412
      MenuHistoryNextMenu(MENU_DIALOG_OK, 0, 0);
      strcpy_P(dialog_text, new_text_err_connect_seznam);
      ret = 0;
    }
  }
  return ret;
   14e56:	e8 cf       	rjmp	.-48     	; 0x14e28 <check_connectivity_connection()+0x60>

00014e58 <button_network_test_connection_onclick(unsigned int, unsigned int, unsigned char)>:
_Z38button_network_test_connection_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6382
/*
   Obsluha tlacitka kontrola konektivity
*/
void button_network_test_connection_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
  check_connectivity_connection();
   14e58:	0c 94 e4 a6 	jmp	0x14dc8	; 0x14dc8 <check_connectivity_connection()>

00014e5c <serial_putc(char, __file*)>:
_Z11serial_putccP6__file():
/home/saric/Arduino/libraries/RF24/printf.h:23
#define __PRINTF_H__

#if defined (ARDUINO) && !defined (__arm__) && !defined(__ARDUINO_X86__)

int serial_putc( char c, FILE * )
{
   14e5c:	cf 93       	push	r28
   14e5e:	c8 2f       	mov	r28, r24
_ZN14HardwareSerial5writeEi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.h:133
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
   14e60:	68 2f       	mov	r22, r24
   14e62:	88 e5       	ldi	r24, 0x58	; 88
   14e64:	93 e1       	ldi	r25, 0x13	; 19
   14e66:	0f 94 50 11 	call	0x222a0	; 0x222a0 <HardwareSerial::write(unsigned char)>
_Z11serial_putccP6__file():
/home/saric/Arduino/libraries/RF24/printf.h:27
  Serial.write( c );

  return c;
}
   14e6a:	8c 2f       	mov	r24, r28
   14e6c:	cc 0f       	add	r28, r28
   14e6e:	99 0b       	sbc	r25, r25
   14e70:	cf 91       	pop	r28
   14e72:	08 95       	ret

00014e74 <loop>:
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4055


/************************************************************************************/
/////////////////////////////////////////////////////////////////////////////////////
/// Hlavni programova smycka ///
void loop() {
   14e74:	8f 92       	push	r8
   14e76:	9f 92       	push	r9
   14e78:	af 92       	push	r10
   14e7a:	bf 92       	push	r11
   14e7c:	cf 92       	push	r12
   14e7e:	df 92       	push	r13
   14e80:	ef 92       	push	r14
   14e82:	ff 92       	push	r15
   14e84:	0f 93       	push	r16
   14e86:	1f 93       	push	r17
   14e88:	cf 93       	push	r28
   14e8a:	df 93       	push	r29
   14e8c:	cd b7       	in	r28, 0x3d	; 61
   14e8e:	de b7       	in	r29, 0x3e	; 62
   14e90:	ac 97       	sbiw	r28, 0x2c	; 44
   14e92:	0f b6       	in	r0, 0x3f	; 63
   14e94:	f8 94       	cli
   14e96:	de bf       	out	0x3e, r29	; 62
   14e98:	0f be       	out	0x3f, r0	; 63
   14e9a:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4065
  long mil;
  uint16_t click_x, click_y;
  nrf_message_t nrf_message;


  wdt_reset();
   14e9c:	a8 95       	wdr
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4067

  load_now = millis();
   14e9e:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   14ea2:	6b 01       	movw	r12, r22
   14ea4:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4068
  if  (Ethernet.link() == 1)
   14ea6:	83 e3       	ldi	r24, 0x33	; 51
   14ea8:	92 e1       	ldi	r25, 0x12	; 18
   14eaa:	0e 94 00 da 	call	0x1b400	; 0x1b400 <EthernetClass::link()>
   14eae:	81 30       	cpi	r24, 0x01	; 1
   14eb0:	09 f0       	breq	.+2      	; 0x14eb4 <loop+0x40>
   14eb2:	cc c2       	rjmp	.+1432   	; 0x1544c <loop+0x5d8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4070
  {
    if (mqtt_reconnect() == 0)
   14eb4:	0e 94 23 68 	call	0xd046	; 0xd046 <mqtt_reconnect()>
   14eb8:	81 11       	cpse	r24, r1
   14eba:	28 c0       	rjmp	.+80     	; 0x14f0c <loop+0x98>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4071
      selftest_clear_0(SELFTEST_MQTT_LINK);
   14ebc:	85 e0       	ldi	r24, 0x05	; 5
   14ebe:	0e 94 67 6f 	call	0xdece	; 0xdece <selftest_clear_0(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4075
    else
      selftest_set_0(SELFTEST_MQTT_LINK);

    mqtt_client.loop();
   14ec2:	8c ea       	ldi	r24, 0xAC	; 172
   14ec4:	9e e0       	ldi	r25, 0x0E	; 14
   14ec6:	0e 94 fc ef 	call	0x1dff8	; 0x1dff8 <PubSubClient::loop()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4078


    if (ethClient1.connected())
   14eca:	80 ef       	ldi	r24, 0xF0	; 240
   14ecc:	9e e0       	ldi	r25, 0x0E	; 14
   14ece:	0e 94 02 dc 	call	0x1b804	; 0x1b804 <EthernetClient::connected()>
   14ed2:	88 23       	and	r24, r24
   14ed4:	21 f0       	breq	.+8      	; 0x14ede <loop+0x6a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4079
      ethClient1.stop();
   14ed6:	80 ef       	ldi	r24, 0xF0	; 240
   14ed8:	9e e0       	ldi	r25, 0x0E	; 14
   14eda:	0e 94 c2 db 	call	0x1b784	; 0x1b784 <EthernetClient::stop()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4082


    EthernetClient http_client = http_server.available();
   14ede:	66 ea       	ldi	r22, 0xA6	; 166
   14ee0:	7e e0       	ldi	r23, 0x0E	; 14
   14ee2:	ce 01       	movw	r24, r28
   14ee4:	01 96       	adiw	r24, 0x01	; 1
   14ee6:	0e 94 4b dd 	call	0x1ba96	; 0x1ba96 <EthernetServer::available()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4083
    if (http_client.connected())
   14eea:	ce 01       	movw	r24, r28
   14eec:	01 96       	adiw	r24, 0x01	; 1
   14eee:	0e 94 02 dc 	call	0x1b804	; 0x1b804 <EthernetClient::connected()>
   14ef2:	88 23       	and	r24, r24
   14ef4:	b9 f0       	breq	.+46     	; 0x14f24 <loop+0xb0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4085
    {
      while (http_client.available())
   14ef6:	ce 01       	movw	r24, r28
   14ef8:	01 96       	adiw	r24, 0x01	; 1
   14efa:	0e 94 dc da 	call	0x1b5b8	; 0x1b5b8 <EthernetClient::available()>
   14efe:	89 2b       	or	r24, r25
   14f00:	49 f0       	breq	.+18     	; 0x14f14 <loop+0xa0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4086
        http_client.read();
   14f02:	ce 01       	movw	r24, r28
   14f04:	01 96       	adiw	r24, 0x01	; 1
   14f06:	0e 94 e7 da 	call	0x1b5ce	; 0x1b5ce <EthernetClient::read()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4085


    EthernetClient http_client = http_server.available();
    if (http_client.connected())
    {
      while (http_client.available())
   14f0a:	f5 cf       	rjmp	.-22     	; 0x14ef6 <loop+0x82>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4073
  if  (Ethernet.link() == 1)
  {
    if (mqtt_reconnect() == 0)
      selftest_clear_0(SELFTEST_MQTT_LINK);
    else
      selftest_set_0(SELFTEST_MQTT_LINK);
   14f0c:	85 e0       	ldi	r24, 0x05	; 5
   14f0e:	0e 94 f1 6d 	call	0xdbe2	; 0xdbe2 <selftest_set_0(unsigned char)>
   14f12:	d7 cf       	rjmp	.-82     	; 0x14ec2 <loop+0x4e>
_ZN5Print5writeEPKc():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:54
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   14f14:	44 e0       	ldi	r20, 0x04	; 4
   14f16:	50 e0       	ldi	r21, 0x00	; 0
   14f18:	63 e9       	ldi	r22, 0x93	; 147
   14f1a:	78 e0       	ldi	r23, 0x08	; 8
   14f1c:	ce 01       	movw	r24, r28
   14f1e:	01 96       	adiw	r24, 0x01	; 1
   14f20:	0e 94 c0 da 	call	0x1b580	; 0x1b580 <EthernetClient::write(unsigned char const*, unsigned int)>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4097
  {
    mqtt_client.disconnect();
  }


  if (scan_rf_net_enable == 0)
   14f24:	80 91 92 10 	lds	r24, 0x1092	; 0x801092 <scan_rf_net_enable>
   14f28:	81 11       	cpse	r24, r1
   14f2a:	40 c0       	rjmp	.+128    	; 0x14fac <loop+0x138>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4099
  {
    mesh.update();
   14f2c:	84 e0       	ldi	r24, 0x04	; 4
   14f2e:	9d e0       	ldi	r25, 0x0D	; 13
   14f30:	0f 94 53 02 	call	0x204a6	; 0x204a6 <RF24Mesh::update()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4100
    mesh.DHCP();
   14f34:	84 e0       	ldi	r24, 0x04	; 4
   14f36:	9d e0       	ldi	r25, 0x0D	; 13
   14f38:	0f 94 ff 04 	call	0x209fe	; 0x209fe <RF24Mesh::DHCP()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4103

    // Check for incoming data from the sensors
    if (network.available()) {
   14f3c:	8c e1       	ldi	r24, 0x1C	; 28
   14f3e:	9d e0       	ldi	r25, 0x0D	; 13
   14f40:	0e 94 73 fb 	call	0x1f6e6	; 0x1f6e6 <RF24Network::available()>
   14f44:	88 23       	and	r24, r24
   14f46:	91 f1       	breq	.+100    	; 0x14fac <loop+0x138>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4105
      RF24NetworkHeader header;
      network.peek(header);
   14f48:	be 01       	movw	r22, r28
   14f4a:	6b 5d       	subi	r22, 0xDB	; 219
   14f4c:	7f 4f       	sbci	r23, 0xFF	; 255
   14f4e:	8c e1       	ldi	r24, 0x1C	; 28
   14f50:	9d e0       	ldi	r25, 0x0D	; 13
   14f52:	0e 94 81 fb 	call	0x1f702	; 0x1f702 <RF24Network::peek(RF24NetworkHeader&)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4108

      
      switch (header.type) {
   14f56:	8b a5       	ldd	r24, Y+43	; 0x2b
   14f58:	8d 34       	cpi	r24, 0x4D	; 77
   14f5a:	09 f0       	breq	.+2      	; 0x14f5e <loop+0xea>
   14f5c:	7c c2       	rjmp	.+1272   	; 0x15456 <loop+0x5e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4111
        case 'M': 
          {
            network.read(header, &nrf_data, 18); 
   14f5e:	22 e1       	ldi	r18, 0x12	; 18
   14f60:	30 e0       	ldi	r19, 0x00	; 0
   14f62:	ae 01       	movw	r20, r28
   14f64:	4d 5e       	subi	r20, 0xED	; 237
   14f66:	5f 4f       	sbci	r21, 0xFF	; 255
   14f68:	be 01       	movw	r22, r28
   14f6a:	6b 5d       	subi	r22, 0xDB	; 219
   14f6c:	7f 4f       	sbci	r23, 0xFF	; 255
   14f6e:	8c e1       	ldi	r24, 0x1C	; 28
   14f70:	9d e0       	ldi	r25, 0x0D	; 13
   14f72:	0e 94 98 fb 	call	0x1f730	; 0x1f730 <RF24Network::read(RF24NetworkHeader&, void*, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4112
            convert_data_to_nrf_message(&nrf_message, nrf_data);
   14f76:	be 01       	movw	r22, r28
   14f78:	6d 5e       	subi	r22, 0xED	; 237
   14f7a:	7f 4f       	sbci	r23, 0xFF	; 255
   14f7c:	ce 01       	movw	r24, r28
   14f7e:	01 96       	adiw	r24, 0x01	; 1
   14f80:	0e 94 e6 b1 	call	0x163cc	; 0x163cc <convert_data_to_nrf_message(nrf_message_t*, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4113
            printf("%d %d %d\n", nrf_message.nodeid, nrf_message.mode, nrf_message.data[0]);
   14f84:	8b 81       	ldd	r24, Y+3	; 0x03
   14f86:	1f 92       	push	r1
   14f88:	8f 93       	push	r24
   14f8a:	8a 81       	ldd	r24, Y+2	; 0x02
   14f8c:	1f 92       	push	r1
   14f8e:	8f 93       	push	r24
   14f90:	89 81       	ldd	r24, Y+1	; 0x01
   14f92:	1f 92       	push	r1
   14f94:	8f 93       	push	r24
   14f96:	88 e9       	ldi	r24, 0x98	; 152
   14f98:	98 e0       	ldi	r25, 0x08	; 8
   14f9a:	9f 93       	push	r25
   14f9c:	8f 93       	push	r24
   14f9e:	0f 94 40 1b 	call	0x23680	; 0x23680 <printf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4114
            break; 
   14fa2:	0f b6       	in	r0, 0x3f	; 63
   14fa4:	f8 94       	cli
   14fa6:	de bf       	out	0x3e, r29	; 62
   14fa8:	0f be       	out	0x3f, r0	; 63
   14faa:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4123
    }


  }

  if (scan_rf_net_enable == 1)
   14fac:	80 91 92 10 	lds	r24, 0x1092	; 0x801092 <scan_rf_net_enable>
   14fb0:	81 30       	cpi	r24, 0x01	; 1
   14fb2:	29 f5       	brne	.+74     	; 0x14ffe <loop+0x18a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4125
  {
    scan_rf_network(&radio, scan_rf_net_channel);
   14fb4:	60 91 91 10 	lds	r22, 0x1091	; 0x801091 <scan_rf_net_channel>
   14fb8:	8e e8       	ldi	r24, 0x8E	; 142
   14fba:	9e e0       	ldi	r25, 0x0E	; 14
   14fbc:	0e 94 3e b1 	call	0x1627c	; 0x1627c <scan_rf_network(RF24*, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4127
    /// kazdy kanal proskenuji 128x
    nrf_scan_check_cnt ++;
   14fc0:	80 91 90 10 	lds	r24, 0x1090	; 0x801090 <nrf_scan_check_cnt>
   14fc4:	8f 5f       	subi	r24, 0xFF	; 255
   14fc6:	80 93 90 10 	sts	0x1090, r24	; 0x801090 <nrf_scan_check_cnt>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4128
    if (nrf_scan_check_cnt > 127)
   14fca:	87 ff       	sbrs	r24, 7
   14fcc:	07 c0       	rjmp	.+14     	; 0x14fdc <loop+0x168>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4130
    {
      scan_rf_net_channel++;
   14fce:	80 91 91 10 	lds	r24, 0x1091	; 0x801091 <scan_rf_net_channel>
   14fd2:	8f 5f       	subi	r24, 0xFF	; 255
   14fd4:	80 93 91 10 	sts	0x1091, r24	; 0x801091 <scan_rf_net_channel>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4131
      nrf_scan_check_cnt = 0;
   14fd8:	10 92 90 10 	sts	0x1090, r1	; 0x801090 <nrf_scan_check_cnt>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4133
    }
    if (scan_rf_net_channel > 127)
   14fdc:	80 91 91 10 	lds	r24, 0x1091	; 0x801091 <scan_rf_net_channel>
   14fe0:	87 ff       	sbrs	r24, 7
   14fe2:	0d c0       	rjmp	.+26     	; 0x14ffe <loop+0x18a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4135
    {
      selftest_clear_0(SELFTEST_NRF_SCAN);
   14fe4:	84 e0       	ldi	r24, 0x04	; 4
   14fe6:	0e 94 67 6f 	call	0xdece	; 0xdece <selftest_clear_0(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4136
      stop_scan_rf_network(&radio);
   14fea:	8e e8       	ldi	r24, 0x8E	; 142
   14fec:	9e e0       	ldi	r25, 0x0E	; 14
   14fee:	0e 94 61 b1 	call	0x162c2	; 0x162c2 <stop_scan_rf_network(RF24*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4137
      scan_rf_network_public(&mqtt_client);
   14ff2:	8c ea       	ldi	r24, 0xAC	; 172
   14ff4:	9e e0       	ldi	r25, 0x0E	; 14
   14ff6:	0e 94 68 b1 	call	0x162d0	; 0x162d0 <scan_rf_network_public(PubSubClient*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4138
      nrf_mesh_reinit();
   14ffa:	0e 94 e4 74 	call	0xe9c8	; 0xe9c8 <nrf_mesh_reinit()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4143
    }
  }


  if (scan_rf_net_enable == 2)
   14ffe:	80 91 92 10 	lds	r24, 0x1092	; 0x801092 <scan_rf_net_enable>
   15002:	82 30       	cpi	r24, 0x02	; 2
   15004:	31 f4       	brne	.+12     	; 0x15012 <loop+0x19e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4145
  {
    scan_rf_net_enable = 0;
   15006:	10 92 92 10 	sts	0x1092, r1	; 0x801092 <scan_rf_net_enable>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4146
    radio.printDetails();
   1500a:	8e e8       	ldi	r24, 0x8E	; 142
   1500c:	9e e0       	ldi	r25, 0x0E	; 14
   1500e:	0e 94 4b f9 	call	0x1f296	; 0x1f296 <RF24::printDetails()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4153



  ////////////////////
  /// kazdych 10sec
  if ((millis() - milis_10s) >= 10000)
   15012:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   15016:	00 91 41 0b 	lds	r16, 0x0B41	; 0x800b41 <milis_10s>
   1501a:	10 91 42 0b 	lds	r17, 0x0B42	; 0x800b42 <milis_10s+0x1>
   1501e:	20 91 43 0b 	lds	r18, 0x0B43	; 0x800b43 <milis_10s+0x2>
   15022:	30 91 44 0b 	lds	r19, 0x0B44	; 0x800b44 <milis_10s+0x3>
   15026:	ab 01       	movw	r20, r22
   15028:	bc 01       	movw	r22, r24
   1502a:	40 1b       	sub	r20, r16
   1502c:	51 0b       	sbc	r21, r17
   1502e:	62 0b       	sbc	r22, r18
   15030:	73 0b       	sbc	r23, r19
   15032:	40 31       	cpi	r20, 0x10	; 16
   15034:	57 42       	sbci	r21, 0x27	; 39
   15036:	61 05       	cpc	r22, r1
   15038:	71 05       	cpc	r23, r1
   1503a:	08 f4       	brcc	.+2      	; 0x1503e <loop+0x1ca>
   1503c:	98 c0       	rjmp	.+304    	; 0x1516e <loop+0x2fa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4155
  {
    milis_10s += 10000;
   1503e:	d9 01       	movw	r26, r18
   15040:	c8 01       	movw	r24, r16
   15042:	80 5f       	subi	r24, 0xF0	; 240
   15044:	98 4d       	sbci	r25, 0xD8	; 216
   15046:	af 4f       	sbci	r26, 0xFF	; 255
   15048:	bf 4f       	sbci	r27, 0xFF	; 255
   1504a:	80 93 41 0b 	sts	0x0B41, r24	; 0x800b41 <milis_10s>
   1504e:	90 93 42 0b 	sts	0x0B42, r25	; 0x800b42 <milis_10s+0x1>
   15052:	a0 93 43 0b 	sts	0x0B43, r26	; 0x800b43 <milis_10s+0x2>
   15056:	b0 93 44 0b 	sts	0x0B44, r27	; 0x800b44 <milis_10s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4156
    menu_redraw10s = 1;
   1505a:	81 e0       	ldi	r24, 0x01	; 1
   1505c:	80 93 7a 0a 	sts	0x0A7A, r24	; 0x800a7a <menu_redraw10s>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4158
    //device_get_name(str1);
    internal_temp = lm75_temp.readTemperatureC();
   15060:	87 ef       	ldi	r24, 0xF7	; 247
   15062:	9c e0       	ldi	r25, 0x0C	; 12
   15064:	0e 94 d6 52 	call	0xa5ac	; 0xa5ac <Temperature_LM75_Derived::readTemperatureC()>
   15068:	60 93 19 0b 	sts	0x0B19, r22	; 0x800b19 <internal_temp>
   1506c:	70 93 1a 0b 	sts	0x0B1A, r23	; 0x800b1a <internal_temp+0x1>
   15070:	80 93 1b 0b 	sts	0x0B1B, r24	; 0x800b1b <internal_temp+0x2>
   15074:	90 93 1c 0b 	sts	0x0B1C, r25	; 0x800b1c <internal_temp+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4159
    brigthness_display_auto_values = (float) (light_curr - light_min) / (light_max - light_min) * 100;
   15078:	00 91 36 02 	lds	r16, 0x0236	; 0x800236 <light_min>
   1507c:	10 91 37 02 	lds	r17, 0x0237	; 0x800237 <light_min+0x1>
   15080:	60 91 56 0b 	lds	r22, 0x0B56	; 0x800b56 <light_curr>
   15084:	70 91 57 0b 	lds	r23, 0x0B57	; 0x800b57 <light_curr+0x1>
   15088:	60 1b       	sub	r22, r16
   1508a:	71 0b       	sbc	r23, r17
   1508c:	90 e0       	ldi	r25, 0x00	; 0
   1508e:	80 e0       	ldi	r24, 0x00	; 0
   15090:	0f 94 f5 14 	call	0x229ea	; 0x229ea <__floatunsisf>
   15094:	4b 01       	movw	r8, r22
   15096:	5c 01       	movw	r10, r24
   15098:	60 91 2d 0b 	lds	r22, 0x0B2D	; 0x800b2d <light_max>
   1509c:	70 91 2e 0b 	lds	r23, 0x0B2E	; 0x800b2e <light_max+0x1>
   150a0:	60 1b       	sub	r22, r16
   150a2:	71 0b       	sbc	r23, r17
   150a4:	90 e0       	ldi	r25, 0x00	; 0
   150a6:	80 e0       	ldi	r24, 0x00	; 0
   150a8:	0f 94 f5 14 	call	0x229ea	; 0x229ea <__floatunsisf>
   150ac:	9b 01       	movw	r18, r22
   150ae:	ac 01       	movw	r20, r24
   150b0:	c5 01       	movw	r24, r10
   150b2:	b4 01       	movw	r22, r8
   150b4:	0f 94 4d 14 	call	0x2289a	; 0x2289a <__divsf3>
   150b8:	20 e0       	ldi	r18, 0x00	; 0
   150ba:	30 e0       	ldi	r19, 0x00	; 0
   150bc:	48 ec       	ldi	r20, 0xC8	; 200
   150be:	52 e4       	ldi	r21, 0x42	; 66
   150c0:	0f 94 ac 15 	call	0x22b58	; 0x22b58 <__mulsf3>
   150c4:	0f 94 c6 14 	call	0x2298c	; 0x2298c <__fixunssfsi>
   150c8:	60 93 2b 0b 	sts	0x0B2B, r22	; 0x800b2b <brigthness_display_auto_values>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4161

    if (status_send_counter == 0)
   150cc:	80 91 0a 0f 	lds	r24, 0x0F0A	; 0x800f0a <status_send_counter>
   150d0:	81 11       	cpse	r24, r1
   150d2:	04 c0       	rjmp	.+8      	; 0x150dc <loop+0x268>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4163
    {
      send_mqtt_onewire();
   150d4:	0e 94 dc 68 	call	0xd1b8	; 0xd1b8 <send_mqtt_onewire()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4164
      send_mqtt_tds();
   150d8:	0e 94 58 69 	call	0xd2b0	; 0xd2b0 <send_mqtt_tds()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4167
    }
    ///
    if (status_send_counter == 1)
   150dc:	80 91 0a 0f 	lds	r24, 0x0F0A	; 0x800f0a <status_send_counter>
   150e0:	81 30       	cpi	r24, 0x01	; 1
   150e2:	31 f4       	brne	.+12     	; 0x150f0 <loop+0x27c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4169
    {
      send_mqtt_status(&mqtt_client);
   150e4:	8c ea       	ldi	r24, 0xAC	; 172
   150e6:	9e e0       	ldi	r25, 0x0E	; 14
   150e8:	0e 94 41 af 	call	0x15e82	; 0x15e82 <send_mqtt_status(PubSubClient*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4170
      send_device_status();
   150ec:	0e 94 93 6f 	call	0xdf26	; 0xdf26 <send_device_status()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4173
    }
    ///
    if (status_send_counter == 2)
   150f0:	80 91 0a 0f 	lds	r24, 0x0F0A	; 0x800f0a <status_send_counter>
   150f4:	82 30       	cpi	r24, 0x02	; 2
   150f6:	91 f4       	brne	.+36     	; 0x1511c <loop+0x2a8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4175
    {
      send_mqtt_ring();
   150f8:	0e 94 a5 72 	call	0xe54a	; 0xe54a <send_mqtt_ring()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4176
      send_mqtt_program();
   150fc:	0e 94 76 6a 	call	0xd4ec	; 0xd4ec <send_mqtt_program()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4177
      thermostat();
   15100:	0e 94 8e 73 	call	0xe71c	; 0xe71c <thermostat()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4178
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
   15104:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4179
        if (thermostat_ring_get_active(idx) != RING_FREE)
   15106:	81 2f       	mov	r24, r17
   15108:	0e 94 fa b7 	call	0x16ff4	; 0x16ff4 <thermostat_ring_get_active(unsigned char)>
   1510c:	8f 3f       	cpi	r24, 0xFF	; 255
   1510e:	19 f0       	breq	.+6      	; 0x15116 <loop+0x2a2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4180
          mqtt_send_pid_variable(idx);
   15110:	81 2f       	mov	r24, r17
   15112:	0e 94 91 6b 	call	0xd722	; 0xd722 <mqtt_send_pid_variable(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4178 (discriminator 2)
    if (status_send_counter == 2)
    {
      send_mqtt_ring();
      send_mqtt_program();
      thermostat();
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
   15116:	1f 5f       	subi	r17, 0xFF	; 255
   15118:	15 30       	cpi	r17, 0x05	; 5
   1511a:	a9 f7       	brne	.-22     	; 0x15106 <loop+0x292>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4183
        if (thermostat_ring_get_active(idx) != RING_FREE)
          mqtt_send_pid_variable(idx);
    }
    ///
    if (status_send_counter == 3)
   1511c:	80 91 0a 0f 	lds	r24, 0x0F0A	; 0x800f0a <status_send_counter>
   15120:	83 30       	cpi	r24, 0x03	; 3
   15122:	21 f4       	brne	.+8      	; 0x1512c <loop+0x2b8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4185
    {
      send_mqtt_remote_tds_status();
   15124:	0e 94 ee 6b 	call	0xd7dc	; 0xd7dc <send_mqtt_remote_tds_status()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4189
      //send_network_config(&mqtt_client);
      //send_light_controler();
      //send_know_device();
      send_mesh_status();
   15128:	0e 94 28 6d 	call	0xda50	; 0xda50 <send_mesh_status()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4193
    }
    ///

    status_send_counter++;
   1512c:	80 91 0a 0f 	lds	r24, 0x0F0A	; 0x800f0a <status_send_counter>
   15130:	8f 5f       	subi	r24, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4194
    if (status_send_counter == 4)
   15132:	84 30       	cpi	r24, 0x04	; 4
   15134:	09 f4       	brne	.+2      	; 0x15138 <loop+0x2c4>
   15136:	9b c1       	rjmp	.+822    	; 0x1546e <loop+0x5fa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4193
      //send_know_device();
      send_mesh_status();
    }
    ///

    status_send_counter++;
   15138:	80 93 0a 0f 	sts	0x0F0A, r24	; 0x800f0a <status_send_counter>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4198
    if (status_send_counter == 4)
      status_send_counter = 0;


    if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) != 0) // Automatika
   1513c:	80 91 2a 0b 	lds	r24, 0x0B2A	; 0x800b2a <brigthness_display_mode>
   15140:	87 ff       	sbrs	r24, 7
   15142:	15 c0       	rjmp	.+42     	; 0x1516e <loop+0x2fa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4200
    {
      if (brigthness_display_auto_values > 100)
   15144:	80 91 2b 0b 	lds	r24, 0x0B2B	; 0x800b2b <brigthness_display_auto_values>
   15148:	85 36       	cpi	r24, 0x65	; 101
   1514a:	18 f0       	brcs	.+6      	; 0x15152 <loop+0x2de>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4201
        brigthness_display_auto_values = 100;
   1514c:	84 e6       	ldi	r24, 0x64	; 100
   1514e:	80 93 2b 0b 	sts	0x0B2B, r24	; 0x800b2b <brigthness_display_auto_values>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4202
      if (brigthness_display_auto_values < 5)
   15152:	80 91 2b 0b 	lds	r24, 0x0B2B	; 0x800b2b <brigthness_display_auto_values>
   15156:	85 30       	cpi	r24, 0x05	; 5
   15158:	18 f4       	brcc	.+6      	; 0x15160 <loop+0x2ec>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4203
        brigthness_display_auto_values = 5;
   1515a:	85 e0       	ldi	r24, 0x05	; 5
   1515c:	80 93 2b 0b 	sts	0x0B2B, r24	; 0x800b2b <brigthness_display_auto_values>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4204
      my_touch.TP_SetBacklight(brigthness_display_auto_values * 2);
   15160:	60 91 2b 0b 	lds	r22, 0x0B2B	; 0x800b2b <brigthness_display_auto_values>
   15164:	66 0f       	add	r22, r22
   15166:	85 e9       	ldi	r24, 0x95	; 149
   15168:	9c e0       	ldi	r25, 0x0C	; 12
   1516a:	0e 94 19 d0 	call	0x1a032	; 0x1a032 <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4209
    }

  }

  if ((millis() - milis_1s) >= 1000)
   1516e:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   15172:	00 91 45 0b 	lds	r16, 0x0B45	; 0x800b45 <milis_1s>
   15176:	10 91 46 0b 	lds	r17, 0x0B46	; 0x800b46 <milis_1s+0x1>
   1517a:	20 91 47 0b 	lds	r18, 0x0B47	; 0x800b47 <milis_1s+0x2>
   1517e:	30 91 48 0b 	lds	r19, 0x0B48	; 0x800b48 <milis_1s+0x3>
   15182:	ab 01       	movw	r20, r22
   15184:	bc 01       	movw	r22, r24
   15186:	40 1b       	sub	r20, r16
   15188:	51 0b       	sbc	r21, r17
   1518a:	62 0b       	sbc	r22, r18
   1518c:	73 0b       	sbc	r23, r19
   1518e:	48 3e       	cpi	r20, 0xE8	; 232
   15190:	53 40       	sbci	r21, 0x03	; 3
   15192:	61 05       	cpc	r22, r1
   15194:	71 05       	cpc	r23, r1
   15196:	c8 f1       	brcs	.+114    	; 0x1520a <loop+0x396>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4211
  {
    milis_1s += 1000;
   15198:	d9 01       	movw	r26, r18
   1519a:	c8 01       	movw	r24, r16
   1519c:	88 51       	subi	r24, 0x18	; 24
   1519e:	9c 4f       	sbci	r25, 0xFC	; 252
   151a0:	af 4f       	sbci	r26, 0xFF	; 255
   151a2:	bf 4f       	sbci	r27, 0xFF	; 255
   151a4:	80 93 45 0b 	sts	0x0B45, r24	; 0x800b45 <milis_1s>
   151a8:	90 93 46 0b 	sts	0x0B46, r25	; 0x800b46 <milis_1s+0x1>
   151ac:	a0 93 47 0b 	sts	0x0B47, r26	; 0x800b47 <milis_1s+0x2>
   151b0:	b0 93 48 0b 	sts	0x0B48, r27	; 0x800b48 <milis_1s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4212
    uptime++;
   151b4:	80 91 51 0b 	lds	r24, 0x0B51	; 0x800b51 <uptime>
   151b8:	90 91 52 0b 	lds	r25, 0x0B52	; 0x800b52 <uptime+0x1>
   151bc:	a0 91 53 0b 	lds	r26, 0x0B53	; 0x800b53 <uptime+0x2>
   151c0:	b0 91 54 0b 	lds	r27, 0x0B54	; 0x800b54 <uptime+0x3>
   151c4:	01 96       	adiw	r24, 0x01	; 1
   151c6:	a1 1d       	adc	r26, r1
   151c8:	b1 1d       	adc	r27, r1
   151ca:	80 93 51 0b 	sts	0x0B51, r24	; 0x800b51 <uptime>
   151ce:	90 93 52 0b 	sts	0x0B52, r25	; 0x800b52 <uptime+0x1>
   151d2:	a0 93 53 0b 	sts	0x0B53, r26	; 0x800b53 <uptime+0x2>
   151d6:	b0 93 54 0b 	sts	0x0B54, r27	; 0x800b54 <uptime+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4213
    if ((brigthness_display_mode & (1 << DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY)) != 0)
   151da:	80 91 2a 0b 	lds	r24, 0x0B2A	; 0x800b2a <brigthness_display_mode>
   151de:	86 ff       	sbrs	r24, 6
   151e0:	0a c0       	rjmp	.+20     	; 0x151f6 <loop+0x382>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4215
    {
      if (display_auto_shutdown > display_auto_shutdown_now)
   151e2:	80 91 28 0b 	lds	r24, 0x0B28	; 0x800b28 <display_auto_shutdown_now>
   151e6:	90 91 29 0b 	lds	r25, 0x0B29	; 0x800b29 <display_auto_shutdown>
   151ea:	89 17       	cp	r24, r25
   151ec:	08 f0       	brcs	.+2      	; 0x151f0 <loop+0x37c>
   151ee:	42 c1       	rjmp	.+644    	; 0x15474 <loop+0x600>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4216
        display_auto_shutdown_now++;
   151f0:	8f 5f       	subi	r24, 0xFF	; 255
   151f2:	80 93 28 0b 	sts	0x0B28, r24	; 0x800b28 <display_auto_shutdown_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4221
      else
        my_touch.TP_SetOnOff(LED_OFF);
    }

    mereni_hwwire(uptime);
   151f6:	80 91 51 0b 	lds	r24, 0x0B51	; 0x800b51 <uptime>
   151fa:	90 91 52 0b 	lds	r25, 0x0B52	; 0x800b52 <uptime+0x1>
   151fe:	0e 94 84 b5 	call	0x16b08	; 0x16b08 <mereni_hwwire(unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4222
    tds_extended_memory_store();
   15202:	0e 94 04 68 	call	0xd008	; 0xd008 <tds_extended_memory_store()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4223
    remote_tds_update_last_update();
   15206:	0e 94 86 67 	call	0xcf0c	; 0xcf0c <remote_tds_update_last_update()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4243
    */
  }


  //digitalWrite(LED, LOW);
  if ((millis() - milis_05s) >= 500)
   1520a:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   1520e:	00 91 49 0b 	lds	r16, 0x0B49	; 0x800b49 <milis_05s>
   15212:	10 91 4a 0b 	lds	r17, 0x0B4A	; 0x800b4a <milis_05s+0x1>
   15216:	20 91 4b 0b 	lds	r18, 0x0B4B	; 0x800b4b <milis_05s+0x2>
   1521a:	30 91 4c 0b 	lds	r19, 0x0B4C	; 0x800b4c <milis_05s+0x3>
   1521e:	ab 01       	movw	r20, r22
   15220:	bc 01       	movw	r22, r24
   15222:	40 1b       	sub	r20, r16
   15224:	51 0b       	sbc	r21, r17
   15226:	62 0b       	sbc	r22, r18
   15228:	73 0b       	sbc	r23, r19
   1522a:	44 3f       	cpi	r20, 0xF4	; 244
   1522c:	51 40       	sbci	r21, 0x01	; 1
   1522e:	61 05       	cpc	r22, r1
   15230:	71 05       	cpc	r23, r1
   15232:	40 f1       	brcs	.+80     	; 0x15284 <loop+0x410>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4245
  {
    milis_05s += 500;
   15234:	d9 01       	movw	r26, r18
   15236:	c8 01       	movw	r24, r16
   15238:	8c 50       	subi	r24, 0x0C	; 12
   1523a:	9e 4f       	sbci	r25, 0xFE	; 254
   1523c:	af 4f       	sbci	r26, 0xFF	; 255
   1523e:	bf 4f       	sbci	r27, 0xFF	; 255
   15240:	80 93 49 0b 	sts	0x0B49, r24	; 0x800b49 <milis_05s>
   15244:	90 93 4a 0b 	sts	0x0B4A, r25	; 0x800b4a <milis_05s+0x1>
   15248:	a0 93 4b 0b 	sts	0x0B4B, r26	; 0x800b4b <milis_05s+0x2>
   1524c:	b0 93 4c 0b 	sts	0x0B4C, r27	; 0x800b4c <milis_05s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4246
    now = rtc.now();
   15250:	ce 01       	movw	r24, r28
   15252:	85 96       	adiw	r24, 0x25	; 37
   15254:	0e 94 77 e7 	call	0x1ceee	; 0x1ceee <RTC_DS1307::now()>
   15258:	87 e0       	ldi	r24, 0x07	; 7
   1525a:	fe 01       	movw	r30, r28
   1525c:	b5 96       	adiw	r30, 0x25	; 37
   1525e:	a5 e1       	ldi	r26, 0x15	; 21
   15260:	bf e0       	ldi	r27, 0x0F	; 15
   15262:	01 90       	ld	r0, Z+
   15264:	0d 92       	st	X+, r0
   15266:	8a 95       	dec	r24
   15268:	e1 f7       	brne	.-8      	; 0x15262 <loop+0x3ee>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4247
    selftest();
   1526a:	0e 94 74 6f 	call	0xdee8	; 0xdee8 <selftest()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4248
    menu_redraw05s = 1;
   1526e:	81 e0       	ldi	r24, 0x01	; 1
   15270:	80 93 7b 0a 	sts	0x0A7B, r24	; 0x800a7b <menu_redraw05s>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4250

    use_rtds = count_use_rtds();
   15274:	0e 94 39 8a 	call	0x11472	; 0x11472 <count_use_rtds()>
   15278:	80 93 27 0b 	sts	0x0B27, r24	; 0x800b27 <use_rtds>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4251
    use_tds = count_use_tds();
   1527c:	0e 94 1f b2 	call	0x1643e	; 0x1643e <count_use_tds()>
   15280:	80 93 26 0b 	sts	0x0B26, r24	; 0x800b26 <use_tds>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4256
  }


  /// kazdych 100ms
  if ((millis() - milis_005s) >= 50 )
   15284:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   15288:	00 91 4d 0b 	lds	r16, 0x0B4D	; 0x800b4d <milis_005s>
   1528c:	10 91 4e 0b 	lds	r17, 0x0B4E	; 0x800b4e <milis_005s+0x1>
   15290:	20 91 4f 0b 	lds	r18, 0x0B4F	; 0x800b4f <milis_005s+0x2>
   15294:	30 91 50 0b 	lds	r19, 0x0B50	; 0x800b50 <milis_005s+0x3>
   15298:	ab 01       	movw	r20, r22
   1529a:	bc 01       	movw	r22, r24
   1529c:	40 1b       	sub	r20, r16
   1529e:	51 0b       	sbc	r21, r17
   152a0:	62 0b       	sbc	r22, r18
   152a2:	73 0b       	sbc	r23, r19
   152a4:	42 33       	cpi	r20, 0x32	; 50
   152a6:	51 05       	cpc	r21, r1
   152a8:	61 05       	cpc	r22, r1
   152aa:	71 05       	cpc	r23, r1
   152ac:	d8 f0       	brcs	.+54     	; 0x152e4 <loop+0x470>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4258
  {
    milis_005s += 50;
   152ae:	d9 01       	movw	r26, r18
   152b0:	c8 01       	movw	r24, r16
   152b2:	c2 96       	adiw	r24, 0x32	; 50
   152b4:	a1 1d       	adc	r26, r1
   152b6:	b1 1d       	adc	r27, r1
   152b8:	80 93 4d 0b 	sts	0x0B4D, r24	; 0x800b4d <milis_005s>
   152bc:	90 93 4e 0b 	sts	0x0B4E, r25	; 0x800b4e <milis_005s+0x1>
   152c0:	a0 93 4f 0b 	sts	0x0B4F, r26	; 0x800b4f <milis_005s+0x2>
   152c4:	b0 93 50 0b 	sts	0x0B50, r27	; 0x800b50 <milis_005s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4261

    /// obsluha adc prevodniku
    if (a2d_run_now == 1)
   152c8:	10 91 55 0b 	lds	r17, 0x0B55	; 0x800b55 <a2d_run_now>
   152cc:	11 30       	cpi	r17, 0x01	; 1
   152ce:	51 f4       	brne	.+20     	; 0x152e4 <loop+0x470>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4263
    {
      a2d_start_process();
   152d0:	0f 94 55 0e 	call	0x21caa	; 0x21caa <a2d_start_process()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4264
      a2d_run_now = 0;
   152d4:	10 92 55 0b 	sts	0x0B55, r1	; 0x800b55 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4265
      if (a2d_done() == 0) a2d_run_now = 1;
   152d8:	0f 94 75 0e 	call	0x21cea	; 0x21cea <a2d_done()>
   152dc:	81 11       	cpse	r24, r1
   152de:	02 c0       	rjmp	.+4      	; 0x152e4 <loop+0x470>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4265 (discriminator 1)
   152e0:	10 93 55 0b 	sts	0x0B55, r17	; 0x800b55 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4270
    }
  }

  ///display_touch_click
  my_touch.TP_Scan(0);
   152e4:	60 e0       	ldi	r22, 0x00	; 0
   152e6:	85 e9       	ldi	r24, 0x95	; 149
   152e8:	9c e0       	ldi	r25, 0x0C	; 12
   152ea:	0e 94 11 d2 	call	0x1a422	; 0x1a422 <LCDWIKI_TOUCH::TP_Scan(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4271
  if (my_touch.TP_Get_State() & TP_PRES_DOWN)
   152ee:	85 e9       	ldi	r24, 0x95	; 149
   152f0:	9c e0       	ldi	r25, 0x0C	; 12
   152f2:	0e 94 e4 d2 	call	0x1a5c8	; 0x1a5c8 <LCDWIKI_TOUCH::TP_Get_State() const>
   152f6:	87 ff       	sbrs	r24, 7
   152f8:	c3 c0       	rjmp	.+390    	; 0x15480 <loop+0x60c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4273
  {
    click_x = my_touch.x;
   152fa:	00 91 99 0c 	lds	r16, 0x0C99	; 0x800c99 <my_touch+0x4>
   152fe:	10 91 9a 0c 	lds	r17, 0x0C9A	; 0x800c9a <my_touch+0x5>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4274
    click_y = my_touch.y;
   15302:	a0 90 9b 0c 	lds	r10, 0x0C9B	; 0x800c9b <my_touch+0x6>
   15306:	b0 90 9c 0c 	lds	r11, 0x0C9C	; 0x800c9c <my_touch+0x7>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4275
    click_on_display = 1;
   1530a:	81 e0       	ldi	r24, 0x01	; 1
   1530c:	80 93 40 0b 	sts	0x0B40, r24	; 0x800b40 <click_on_display>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4285
    click_y = 0;
    click_on_display = 0;
  }


  if (click_on_display == 1 && click_on_display_last == 0)
   15310:	80 91 40 0b 	lds	r24, 0x0B40	; 0x800b40 <click_on_display>
   15314:	81 30       	cpi	r24, 0x01	; 1
   15316:	f9 f4       	brne	.+62     	; 0x15356 <loop+0x4e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4285 (discriminator 1)
   15318:	80 91 3f 0b 	lds	r24, 0x0B3F	; 0x800b3f <click_on_display_last>
   1531c:	81 11       	cpse	r24, r1
   1531e:	1b c0       	rjmp	.+54     	; 0x15356 <loop+0x4e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4287
  {
    click_time = millis();
   15320:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   15324:	60 93 3b 0b 	sts	0x0B3B, r22	; 0x800b3b <click_time>
   15328:	70 93 3c 0b 	sts	0x0B3C, r23	; 0x800b3c <click_time+0x1>
   1532c:	80 93 3d 0b 	sts	0x0B3D, r24	; 0x800b3d <click_time+0x2>
   15330:	90 93 3e 0b 	sts	0x0B3E, r25	; 0x800b3e <click_time+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4288
    display_auto_shutdown_now = 0;
   15334:	10 92 28 0b 	sts	0x0B28, r1	; 0x800b28 <display_auto_shutdown_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4289
    if (((brigthness_display_mode & (1 << DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY)) != 0) && my_touch.TP_GetOnOff() == 0)
   15338:	80 91 2a 0b 	lds	r24, 0x0B2A	; 0x800b2a <brigthness_display_mode>
   1533c:	86 ff       	sbrs	r24, 6
   1533e:	0b c0       	rjmp	.+22     	; 0x15356 <loop+0x4e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4289 (discriminator 1)
   15340:	85 e9       	ldi	r24, 0x95	; 149
   15342:	9c e0       	ldi	r25, 0x0C	; 12
   15344:	0e 94 cc cf 	call	0x19f98	; 0x19f98 <LCDWIKI_TOUCH::TP_GetOnOff()>
   15348:	81 11       	cpse	r24, r1
   1534a:	05 c0       	rjmp	.+10     	; 0x15356 <loop+0x4e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4291
    {
      my_touch.TP_SetOnOff(LED_ON);
   1534c:	61 e0       	ldi	r22, 0x01	; 1
   1534e:	85 e9       	ldi	r24, 0x95	; 149
   15350:	9c e0       	ldi	r25, 0x0C	; 12
   15352:	0e 94 6c d0 	call	0x1a0d8	; 0x1a0d8 <LCDWIKI_TOUCH::TP_SetOnOff(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4300
  if (click_on_display == 1 && click_on_display_last == 1)
  {

  }

  click_on_display_last = click_on_display;
   15356:	80 91 40 0b 	lds	r24, 0x0B40	; 0x800b40 <click_on_display>
   1535a:	80 93 3f 0b 	sts	0x0B3F, r24	; 0x800b3f <click_on_display_last>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4303


  if (draw_menu(false, 0, click_x, click_y) == true)
   1535e:	95 01       	movw	r18, r10
   15360:	a8 01       	movw	r20, r16
   15362:	60 e0       	ldi	r22, 0x00	; 0
   15364:	80 e0       	ldi	r24, 0x00	; 0
   15366:	0e 94 d5 78 	call	0xf1aa	; 0xf1aa <draw_menu(bool, unsigned char, unsigned int, unsigned int)>
   1536a:	88 23       	and	r24, r24
   1536c:	41 f0       	breq	.+16     	; 0x1537e <loop+0x50a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4305
  {
    draw_menu(true, 0, 0, 0);
   1536e:	30 e0       	ldi	r19, 0x00	; 0
   15370:	20 e0       	ldi	r18, 0x00	; 0
   15372:	50 e0       	ldi	r21, 0x00	; 0
   15374:	40 e0       	ldi	r20, 0x00	; 0
   15376:	60 e0       	ldi	r22, 0x00	; 0
   15378:	81 e0       	ldi	r24, 0x01	; 1
   1537a:	0e 94 d5 78 	call	0xf1aa	; 0xf1aa <draw_menu(bool, unsigned char, unsigned int, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4322
      draw_menu(true);
    }
    }
  */

  load = millis() - load_now;
   1537e:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   15382:	dc 01       	movw	r26, r24
   15384:	cb 01       	movw	r24, r22
   15386:	8c 19       	sub	r24, r12
   15388:	9d 09       	sbc	r25, r13
   1538a:	ae 09       	sbc	r26, r14
   1538c:	bf 09       	sbc	r27, r15
   1538e:	80 93 33 0b 	sts	0x0B33, r24	; 0x800b33 <load>
   15392:	90 93 34 0b 	sts	0x0B34, r25	; 0x800b34 <load+0x1>
   15396:	a0 93 35 0b 	sts	0x0B35, r26	; 0x800b35 <load+0x2>
   1539a:	b0 93 36 0b 	sts	0x0B36, r27	; 0x800b36 <load+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4323
  if (load < load_min) load_min = load;
   1539e:	00 91 38 02 	lds	r16, 0x0238	; 0x800238 <load_min>
   153a2:	10 91 39 02 	lds	r17, 0x0239	; 0x800239 <load_min+0x1>
   153a6:	20 91 3a 02 	lds	r18, 0x023A	; 0x80023a <load_min+0x2>
   153aa:	30 91 3b 02 	lds	r19, 0x023B	; 0x80023b <load_min+0x3>
   153ae:	80 17       	cp	r24, r16
   153b0:	91 07       	cpc	r25, r17
   153b2:	a2 07       	cpc	r26, r18
   153b4:	b3 07       	cpc	r27, r19
   153b6:	40 f4       	brcc	.+16     	; 0x153c8 <loop+0x554>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4323 (discriminator 1)
   153b8:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <load_min>
   153bc:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <load_min+0x1>
   153c0:	a0 93 3a 02 	sts	0x023A, r26	; 0x80023a <load_min+0x2>
   153c4:	b0 93 3b 02 	sts	0x023B, r27	; 0x80023b <load_min+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4324
  if (load > load_max) load_max = load;
   153c8:	00 91 2f 0b 	lds	r16, 0x0B2F	; 0x800b2f <load_max>
   153cc:	10 91 30 0b 	lds	r17, 0x0B30	; 0x800b30 <load_max+0x1>
   153d0:	20 91 31 0b 	lds	r18, 0x0B31	; 0x800b31 <load_max+0x2>
   153d4:	30 91 32 0b 	lds	r19, 0x0B32	; 0x800b32 <load_max+0x3>
   153d8:	08 17       	cp	r16, r24
   153da:	19 07       	cpc	r17, r25
   153dc:	2a 07       	cpc	r18, r26
   153de:	3b 07       	cpc	r19, r27
   153e0:	40 f4       	brcc	.+16     	; 0x153f2 <loop+0x57e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4324 (discriminator 1)
   153e2:	80 93 2f 0b 	sts	0x0B2F, r24	; 0x800b2f <load_max>
   153e6:	90 93 30 0b 	sts	0x0B30, r25	; 0x800b30 <load_max+0x1>
   153ea:	a0 93 31 0b 	sts	0x0B31, r26	; 0x800b31 <load_max+0x2>
   153ee:	b0 93 32 0b 	sts	0x0B32, r27	; 0x800b32 <load_max+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4327

  /// automaticke nastaveni jasu displaye
  if (light_curr < light_min) light_min = light_curr;
   153f2:	80 91 56 0b 	lds	r24, 0x0B56	; 0x800b56 <light_curr>
   153f6:	90 91 57 0b 	lds	r25, 0x0B57	; 0x800b57 <light_curr+0x1>
   153fa:	20 91 36 02 	lds	r18, 0x0236	; 0x800236 <light_min>
   153fe:	30 91 37 02 	lds	r19, 0x0237	; 0x800237 <light_min+0x1>
   15402:	82 17       	cp	r24, r18
   15404:	93 07       	cpc	r25, r19
   15406:	20 f4       	brcc	.+8      	; 0x15410 <loop+0x59c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4327 (discriminator 1)
   15408:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <light_min+0x1>
   1540c:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <light_min>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4328
  if (light_curr > light_max) light_max = light_curr;
   15410:	20 91 2d 0b 	lds	r18, 0x0B2D	; 0x800b2d <light_max>
   15414:	30 91 2e 0b 	lds	r19, 0x0B2E	; 0x800b2e <light_max+0x1>
   15418:	28 17       	cp	r18, r24
   1541a:	39 07       	cpc	r19, r25
   1541c:	20 f4       	brcc	.+8      	; 0x15426 <loop+0x5b2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4328 (discriminator 1)
   1541e:	90 93 2e 0b 	sts	0x0B2E, r25	; 0x800b2e <light_max+0x1>
   15422:	80 93 2d 0b 	sts	0x0B2D, r24	; 0x800b2d <light_max>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4329
}
   15426:	ac 96       	adiw	r28, 0x2c	; 44
   15428:	0f b6       	in	r0, 0x3f	; 63
   1542a:	f8 94       	cli
   1542c:	de bf       	out	0x3e, r29	; 62
   1542e:	0f be       	out	0x3f, r0	; 63
   15430:	cd bf       	out	0x3d, r28	; 61
   15432:	df 91       	pop	r29
   15434:	cf 91       	pop	r28
   15436:	1f 91       	pop	r17
   15438:	0f 91       	pop	r16
   1543a:	ff 90       	pop	r15
   1543c:	ef 90       	pop	r14
   1543e:	df 90       	pop	r13
   15440:	cf 90       	pop	r12
   15442:	bf 90       	pop	r11
   15444:	af 90       	pop	r10
   15446:	9f 90       	pop	r9
   15448:	8f 90       	pop	r8
   1544a:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4093
    }
  }

  else
  {
    mqtt_client.disconnect();
   1544c:	8c ea       	ldi	r24, 0xAC	; 172
   1544e:	9e e0       	ldi	r25, 0x0E	; 14
   15450:	0e 94 82 ed 	call	0x1db04	; 0x1db04 <PubSubClient::disconnect()>
   15454:	67 cd       	rjmp	.-1330   	; 0x14f24 <loop+0xb0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4116
            network.read(header, &nrf_data, 18); 
            convert_data_to_nrf_message(&nrf_message, nrf_data);
            printf("%d %d %d\n", nrf_message.nodeid, nrf_message.mode, nrf_message.data[0]);
            break; 
          }
        default: network.read(header, 0, 0); break;
   15456:	30 e0       	ldi	r19, 0x00	; 0
   15458:	20 e0       	ldi	r18, 0x00	; 0
   1545a:	50 e0       	ldi	r21, 0x00	; 0
   1545c:	40 e0       	ldi	r20, 0x00	; 0
   1545e:	be 01       	movw	r22, r28
   15460:	6b 5d       	subi	r22, 0xDB	; 219
   15462:	7f 4f       	sbci	r23, 0xFF	; 255
   15464:	8c e1       	ldi	r24, 0x1C	; 28
   15466:	9d e0       	ldi	r25, 0x0D	; 13
   15468:	0e 94 98 fb 	call	0x1f730	; 0x1f730 <RF24Network::read(RF24NetworkHeader&, void*, unsigned int)>
   1546c:	9f cd       	rjmp	.-1218   	; 0x14fac <loop+0x138>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4195
    }
    ///

    status_send_counter++;
    if (status_send_counter == 4)
      status_send_counter = 0;
   1546e:	10 92 0a 0f 	sts	0x0F0A, r1	; 0x800f0a <status_send_counter>
   15472:	64 ce       	rjmp	.-824    	; 0x1513c <loop+0x2c8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4218
    if ((brigthness_display_mode & (1 << DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY)) != 0)
    {
      if (display_auto_shutdown > display_auto_shutdown_now)
        display_auto_shutdown_now++;
      else
        my_touch.TP_SetOnOff(LED_OFF);
   15474:	60 e0       	ldi	r22, 0x00	; 0
   15476:	85 e9       	ldi	r24, 0x95	; 149
   15478:	9c e0       	ldi	r25, 0x0C	; 12
   1547a:	0e 94 6c d0 	call	0x1a0d8	; 0x1a0d8 <LCDWIKI_TOUCH::TP_SetOnOff(unsigned char)>
   1547e:	bb ce       	rjmp	.-650    	; 0x151f6 <loop+0x382>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4281
  }
  else
  {
    click_x = 0;
    click_y = 0;
    click_on_display = 0;
   15480:	10 92 40 0b 	sts	0x0B40, r1	; 0x800b40 <click_on_display>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4280
    click_on_display = 1;
  }
  else
  {
    click_x = 0;
    click_y = 0;
   15484:	b1 2c       	mov	r11, r1
   15486:	a1 2c       	mov	r10, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4279
    click_y = my_touch.y;
    click_on_display = 1;
  }
  else
  {
    click_x = 0;
   15488:	10 e0       	ldi	r17, 0x00	; 0
   1548a:	00 e0       	ldi	r16, 0x00	; 0
   1548c:	41 cf       	rjmp	.-382    	; 0x15310 <loop+0x49c>

0001548e <EEPROMClass::read(int) [clone .isra.0]>:
_ZNK5EERefdeEv():
/tmp/arduino_build_131566/sketch/saric_mqtt_network.cpp:497
}

PubSubClient * mqtt_get_public_mqtt_client(void)
{
  return pub_mqtt_client;
}
   1548e:	0d 94 6e 22 	jmp	0x244dc	; 0x244dc <eeprom_read_byte>

00015492 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>:
_ZN5EERefaSEh():
   15492:	0d 94 76 22 	jmp	0x244ec	; 0x244ec <eeprom_write_byte>

00015496 <load_setup_network()>:
_Z18load_setup_networkv():
   15496:	ef 92       	push	r14
   15498:	ff 92       	push	r15
   1549a:	0f 93       	push	r16
   1549c:	1f 93       	push	r17
   1549e:	cf 93       	push	r28
   154a0:	df 93       	push	r29
   154a2:	06 eb       	ldi	r16, 0xB6	; 182
   154a4:	1f e0       	ldi	r17, 0x0F	; 15
   154a6:	ce e6       	ldi	r28, 0x6E	; 110
   154a8:	d0 e0       	ldi	r29, 0x00	; 0
   154aa:	ce 01       	movw	r24, r28
   154ac:	0e 94 47 aa 	call	0x1548e	; 0x1548e <EEPROMClass::read(int) [clone .isra.0]>
   154b0:	f8 01       	movw	r30, r16
   154b2:	81 93       	st	Z+, r24
   154b4:	8f 01       	movw	r16, r30
   154b6:	21 96       	adiw	r28, 0x01	; 1
   154b8:	c4 37       	cpi	r28, 0x74	; 116
   154ba:	d1 05       	cpc	r29, r1
   154bc:	b1 f7       	brne	.-20     	; 0x154aa <load_setup_network()+0x14>
   154be:	0c eb       	ldi	r16, 0xBC	; 188
   154c0:	1f e0       	ldi	r17, 0x0F	; 15
   154c2:	ce 01       	movw	r24, r28
   154c4:	0e 94 47 aa 	call	0x1548e	; 0x1548e <EEPROMClass::read(int) [clone .isra.0]>
   154c8:	f8 01       	movw	r30, r16
   154ca:	81 93       	st	Z+, r24
   154cc:	8f 01       	movw	r16, r30
   154ce:	21 96       	adiw	r28, 0x01	; 1
   154d0:	c8 37       	cpi	r28, 0x78	; 120
   154d2:	d1 05       	cpc	r29, r1
   154d4:	b1 f7       	brne	.-20     	; 0x154c2 <load_setup_network()+0x2c>
   154d6:	00 ec       	ldi	r16, 0xC0	; 192
   154d8:	1f e0       	ldi	r17, 0x0F	; 15
   154da:	ce 01       	movw	r24, r28
   154dc:	0e 94 47 aa 	call	0x1548e	; 0x1548e <EEPROMClass::read(int) [clone .isra.0]>
   154e0:	f8 01       	movw	r30, r16
   154e2:	81 93       	st	Z+, r24
   154e4:	8f 01       	movw	r16, r30
   154e6:	21 96       	adiw	r28, 0x01	; 1
   154e8:	cc 37       	cpi	r28, 0x7C	; 124
   154ea:	d1 05       	cpc	r29, r1
   154ec:	b1 f7       	brne	.-20     	; 0x154da <load_setup_network()+0x44>
   154ee:	48 ec       	ldi	r20, 0xC8	; 200
   154f0:	e4 2e       	mov	r14, r20
   154f2:	4f e0       	ldi	r20, 0x0F	; 15
   154f4:	f4 2e       	mov	r15, r20
   154f6:	00 e8       	ldi	r16, 0x80	; 128
   154f8:	10 e0       	ldi	r17, 0x00	; 0
   154fa:	c8 01       	movw	r24, r16
   154fc:	0e 94 47 aa 	call	0x1548e	; 0x1548e <EEPROMClass::read(int) [clone .isra.0]>
   15500:	f7 01       	movw	r30, r14
   15502:	81 93       	st	Z+, r24
   15504:	7f 01       	movw	r14, r30
   15506:	0f 5f       	subi	r16, 0xFF	; 255
   15508:	1f 4f       	sbci	r17, 0xFF	; 255
   1550a:	04 38       	cpi	r16, 0x84	; 132
   1550c:	11 05       	cpc	r17, r1
   1550e:	a9 f7       	brne	.-22     	; 0x154fa <load_setup_network()+0x64>
   15510:	34 ec       	ldi	r19, 0xC4	; 196
   15512:	e3 2e       	mov	r14, r19
   15514:	3f e0       	ldi	r19, 0x0F	; 15
   15516:	f3 2e       	mov	r15, r19
   15518:	ce 01       	movw	r24, r28
   1551a:	0e 94 47 aa 	call	0x1548e	; 0x1548e <EEPROMClass::read(int) [clone .isra.0]>
   1551e:	f7 01       	movw	r30, r14
   15520:	81 93       	st	Z+, r24
   15522:	7f 01       	movw	r14, r30
   15524:	21 96       	adiw	r28, 0x01	; 1
   15526:	c0 38       	cpi	r28, 0x80	; 128
   15528:	d1 05       	cpc	r29, r1
   1552a:	b1 f7       	brne	.-20     	; 0x15518 <load_setup_network()+0x82>
   1552c:	2c ec       	ldi	r18, 0xCC	; 204
   1552e:	e2 2e       	mov	r14, r18
   15530:	2f e0       	ldi	r18, 0x0F	; 15
   15532:	f2 2e       	mov	r15, r18
   15534:	c4 e6       	ldi	r28, 0x64	; 100
   15536:	d0 e0       	ldi	r29, 0x00	; 0
   15538:	ce 01       	movw	r24, r28
   1553a:	0e 94 47 aa 	call	0x1548e	; 0x1548e <EEPROMClass::read(int) [clone .isra.0]>
   1553e:	f7 01       	movw	r30, r14
   15540:	81 93       	st	Z+, r24
   15542:	7f 01       	movw	r14, r30
   15544:	21 96       	adiw	r28, 0x01	; 1
   15546:	cd 36       	cpi	r28, 0x6D	; 109
   15548:	d1 05       	cpc	r29, r1
   1554a:	b1 f7       	brne	.-20     	; 0x15538 <load_setup_network()+0xa2>
   1554c:	c6 ed       	ldi	r28, 0xD6	; 214
   1554e:	df e0       	ldi	r29, 0x0F	; 15
   15550:	c8 01       	movw	r24, r16
   15552:	0e 94 47 aa 	call	0x1548e	; 0x1548e <EEPROMClass::read(int) [clone .isra.0]>
   15556:	89 93       	st	Y+, r24
   15558:	0f 5f       	subi	r16, 0xFF	; 255
   1555a:	1f 4f       	sbci	r17, 0xFF	; 255
   1555c:	08 38       	cpi	r16, 0x88	; 136
   1555e:	11 05       	cpc	r17, r1
   15560:	b9 f7       	brne	.-18     	; 0x15550 <load_setup_network()+0xba>
   15562:	88 e8       	ldi	r24, 0x88	; 136
   15564:	90 e0       	ldi	r25, 0x00	; 0
   15566:	0e 94 47 aa 	call	0x1548e	; 0x1548e <EEPROMClass::read(int) [clone .isra.0]>
   1556a:	c8 2f       	mov	r28, r24
   1556c:	89 e8       	ldi	r24, 0x89	; 137
   1556e:	90 e0       	ldi	r25, 0x00	; 0
   15570:	0e 94 47 aa 	call	0x1548e	; 0x1548e <EEPROMClass::read(int) [clone .isra.0]>
   15574:	2c 2f       	mov	r18, r28
   15576:	30 e0       	ldi	r19, 0x00	; 0
   15578:	32 2f       	mov	r19, r18
   1557a:	22 27       	eor	r18, r18
   1557c:	82 0f       	add	r24, r18
   1557e:	93 2f       	mov	r25, r19
   15580:	91 1d       	adc	r25, r1
   15582:	90 93 db 0f 	sts	0x0FDB, r25	; 0x800fdb <device+0x25>
   15586:	80 93 da 0f 	sts	0x0FDA, r24	; 0x800fda <device+0x24>
   1558a:	0c ed       	ldi	r16, 0xDC	; 220
   1558c:	1f e0       	ldi	r17, 0x0F	; 15
   1558e:	ca e8       	ldi	r28, 0x8A	; 138
   15590:	d0 e0       	ldi	r29, 0x00	; 0
   15592:	ce 01       	movw	r24, r28
   15594:	0e 94 47 aa 	call	0x1548e	; 0x1548e <EEPROMClass::read(int) [clone .isra.0]>
   15598:	f8 01       	movw	r30, r16
   1559a:	81 93       	st	Z+, r24
   1559c:	8f 01       	movw	r16, r30
   1559e:	21 96       	adiw	r28, 0x01	; 1
   155a0:	ce 39       	cpi	r28, 0x9E	; 158
   155a2:	d1 05       	cpc	r29, r1
   155a4:	b1 f7       	brne	.-20     	; 0x15592 <load_setup_network()+0xfc>
   155a6:	00 ef       	ldi	r16, 0xF0	; 240
   155a8:	1f e0       	ldi	r17, 0x0F	; 15
   155aa:	ce 01       	movw	r24, r28
   155ac:	0e 94 47 aa 	call	0x1548e	; 0x1548e <EEPROMClass::read(int) [clone .isra.0]>
   155b0:	f8 01       	movw	r30, r16
   155b2:	81 93       	st	Z+, r24
   155b4:	8f 01       	movw	r16, r30
   155b6:	21 96       	adiw	r28, 0x01	; 1
   155b8:	c2 3b       	cpi	r28, 0xB2	; 178
   155ba:	d1 05       	cpc	r29, r1
   155bc:	b1 f7       	brne	.-20     	; 0x155aa <load_setup_network()+0x114>
   155be:	04 e0       	ldi	r16, 0x04	; 4
   155c0:	10 e1       	ldi	r17, 0x10	; 16
   155c2:	ce 01       	movw	r24, r28
   155c4:	0e 94 47 aa 	call	0x1548e	; 0x1548e <EEPROMClass::read(int) [clone .isra.0]>
   155c8:	f8 01       	movw	r30, r16
   155ca:	81 93       	st	Z+, r24
   155cc:	8f 01       	movw	r16, r30
   155ce:	21 96       	adiw	r28, 0x01	; 1
   155d0:	c6 3b       	cpi	r28, 0xB6	; 182
   155d2:	d1 05       	cpc	r29, r1
   155d4:	b1 f7       	brne	.-20     	; 0x155c2 <load_setup_network()+0x12c>
   155d6:	df 91       	pop	r29
   155d8:	cf 91       	pop	r28
   155da:	1f 91       	pop	r17
   155dc:	0f 91       	pop	r16
   155de:	ff 90       	pop	r15
   155e0:	ef 90       	pop	r14
   155e2:	08 95       	ret

000155e4 <save_setup_network()>:
_Z18save_setup_networkv():
   155e4:	ef 92       	push	r14
   155e6:	ff 92       	push	r15
   155e8:	0f 93       	push	r16
   155ea:	1f 93       	push	r17
   155ec:	cf 93       	push	r28
   155ee:	df 93       	push	r29
   155f0:	06 eb       	ldi	r16, 0xB6	; 182
   155f2:	1f e0       	ldi	r17, 0x0F	; 15
   155f4:	ce e6       	ldi	r28, 0x6E	; 110
   155f6:	d0 e0       	ldi	r29, 0x00	; 0
   155f8:	f8 01       	movw	r30, r16
   155fa:	61 91       	ld	r22, Z+
   155fc:	8f 01       	movw	r16, r30
   155fe:	ce 01       	movw	r24, r28
   15600:	0e 94 49 aa 	call	0x15492	; 0x15492 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   15604:	21 96       	adiw	r28, 0x01	; 1
   15606:	c4 37       	cpi	r28, 0x74	; 116
   15608:	d1 05       	cpc	r29, r1
   1560a:	b1 f7       	brne	.-20     	; 0x155f8 <save_setup_network()+0x14>
   1560c:	0c eb       	ldi	r16, 0xBC	; 188
   1560e:	1f e0       	ldi	r17, 0x0F	; 15
   15610:	f8 01       	movw	r30, r16
   15612:	61 91       	ld	r22, Z+
   15614:	8f 01       	movw	r16, r30
   15616:	ce 01       	movw	r24, r28
   15618:	0e 94 49 aa 	call	0x15492	; 0x15492 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   1561c:	21 96       	adiw	r28, 0x01	; 1
   1561e:	c8 37       	cpi	r28, 0x78	; 120
   15620:	d1 05       	cpc	r29, r1
   15622:	b1 f7       	brne	.-20     	; 0x15610 <save_setup_network()+0x2c>
   15624:	00 ec       	ldi	r16, 0xC0	; 192
   15626:	1f e0       	ldi	r17, 0x0F	; 15
   15628:	f8 01       	movw	r30, r16
   1562a:	61 91       	ld	r22, Z+
   1562c:	8f 01       	movw	r16, r30
   1562e:	ce 01       	movw	r24, r28
   15630:	0e 94 49 aa 	call	0x15492	; 0x15492 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   15634:	21 96       	adiw	r28, 0x01	; 1
   15636:	cc 37       	cpi	r28, 0x7C	; 124
   15638:	d1 05       	cpc	r29, r1
   1563a:	b1 f7       	brne	.-20     	; 0x15628 <save_setup_network()+0x44>
   1563c:	28 ec       	ldi	r18, 0xC8	; 200
   1563e:	e2 2e       	mov	r14, r18
   15640:	2f e0       	ldi	r18, 0x0F	; 15
   15642:	f2 2e       	mov	r15, r18
   15644:	00 e8       	ldi	r16, 0x80	; 128
   15646:	10 e0       	ldi	r17, 0x00	; 0
   15648:	f7 01       	movw	r30, r14
   1564a:	61 91       	ld	r22, Z+
   1564c:	7f 01       	movw	r14, r30
   1564e:	c8 01       	movw	r24, r16
   15650:	0e 94 49 aa 	call	0x15492	; 0x15492 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   15654:	0f 5f       	subi	r16, 0xFF	; 255
   15656:	1f 4f       	sbci	r17, 0xFF	; 255
   15658:	04 38       	cpi	r16, 0x84	; 132
   1565a:	11 05       	cpc	r17, r1
   1565c:	a9 f7       	brne	.-22     	; 0x15648 <save_setup_network()+0x64>
   1565e:	94 ec       	ldi	r25, 0xC4	; 196
   15660:	e9 2e       	mov	r14, r25
   15662:	9f e0       	ldi	r25, 0x0F	; 15
   15664:	f9 2e       	mov	r15, r25
   15666:	f7 01       	movw	r30, r14
   15668:	61 91       	ld	r22, Z+
   1566a:	7f 01       	movw	r14, r30
   1566c:	ce 01       	movw	r24, r28
   1566e:	0e 94 49 aa 	call	0x15492	; 0x15492 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   15672:	21 96       	adiw	r28, 0x01	; 1
   15674:	c0 38       	cpi	r28, 0x80	; 128
   15676:	d1 05       	cpc	r29, r1
   15678:	b1 f7       	brne	.-20     	; 0x15666 <save_setup_network()+0x82>
   1567a:	8c ec       	ldi	r24, 0xCC	; 204
   1567c:	e8 2e       	mov	r14, r24
   1567e:	8f e0       	ldi	r24, 0x0F	; 15
   15680:	f8 2e       	mov	r15, r24
   15682:	c4 e6       	ldi	r28, 0x64	; 100
   15684:	d0 e0       	ldi	r29, 0x00	; 0
   15686:	f7 01       	movw	r30, r14
   15688:	61 91       	ld	r22, Z+
   1568a:	7f 01       	movw	r14, r30
   1568c:	ce 01       	movw	r24, r28
   1568e:	0e 94 49 aa 	call	0x15492	; 0x15492 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   15692:	21 96       	adiw	r28, 0x01	; 1
   15694:	cd 36       	cpi	r28, 0x6D	; 109
   15696:	d1 05       	cpc	r29, r1
   15698:	b1 f7       	brne	.-20     	; 0x15686 <save_setup_network()+0xa2>
   1569a:	c6 ed       	ldi	r28, 0xD6	; 214
   1569c:	df e0       	ldi	r29, 0x0F	; 15
   1569e:	69 91       	ld	r22, Y+
   156a0:	c8 01       	movw	r24, r16
   156a2:	0e 94 49 aa 	call	0x15492	; 0x15492 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   156a6:	0f 5f       	subi	r16, 0xFF	; 255
   156a8:	1f 4f       	sbci	r17, 0xFF	; 255
   156aa:	08 38       	cpi	r16, 0x88	; 136
   156ac:	11 05       	cpc	r17, r1
   156ae:	b9 f7       	brne	.-18     	; 0x1569e <save_setup_network()+0xba>
   156b0:	60 91 db 0f 	lds	r22, 0x0FDB	; 0x800fdb <device+0x25>
   156b4:	88 e8       	ldi	r24, 0x88	; 136
   156b6:	90 e0       	ldi	r25, 0x00	; 0
   156b8:	0e 94 49 aa 	call	0x15492	; 0x15492 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   156bc:	60 91 da 0f 	lds	r22, 0x0FDA	; 0x800fda <device+0x24>
   156c0:	89 e8       	ldi	r24, 0x89	; 137
   156c2:	90 e0       	ldi	r25, 0x00	; 0
   156c4:	0e 94 49 aa 	call	0x15492	; 0x15492 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   156c8:	0c ed       	ldi	r16, 0xDC	; 220
   156ca:	1f e0       	ldi	r17, 0x0F	; 15
   156cc:	ca e8       	ldi	r28, 0x8A	; 138
   156ce:	d0 e0       	ldi	r29, 0x00	; 0
   156d0:	f8 01       	movw	r30, r16
   156d2:	61 91       	ld	r22, Z+
   156d4:	8f 01       	movw	r16, r30
   156d6:	ce 01       	movw	r24, r28
   156d8:	0e 94 49 aa 	call	0x15492	; 0x15492 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   156dc:	21 96       	adiw	r28, 0x01	; 1
   156de:	ce 39       	cpi	r28, 0x9E	; 158
   156e0:	d1 05       	cpc	r29, r1
   156e2:	b1 f7       	brne	.-20     	; 0x156d0 <save_setup_network()+0xec>
   156e4:	00 ef       	ldi	r16, 0xF0	; 240
   156e6:	1f e0       	ldi	r17, 0x0F	; 15
   156e8:	f8 01       	movw	r30, r16
   156ea:	61 91       	ld	r22, Z+
   156ec:	8f 01       	movw	r16, r30
   156ee:	ce 01       	movw	r24, r28
   156f0:	0e 94 49 aa 	call	0x15492	; 0x15492 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   156f4:	21 96       	adiw	r28, 0x01	; 1
   156f6:	c2 3b       	cpi	r28, 0xB2	; 178
   156f8:	d1 05       	cpc	r29, r1
   156fa:	b1 f7       	brne	.-20     	; 0x156e8 <save_setup_network()+0x104>
   156fc:	04 e0       	ldi	r16, 0x04	; 4
   156fe:	10 e1       	ldi	r17, 0x10	; 16
   15700:	f8 01       	movw	r30, r16
   15702:	61 91       	ld	r22, Z+
   15704:	8f 01       	movw	r16, r30
   15706:	ce 01       	movw	r24, r28
   15708:	0e 94 49 aa 	call	0x15492	; 0x15492 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   1570c:	21 96       	adiw	r28, 0x01	; 1
   1570e:	c6 3b       	cpi	r28, 0xB6	; 182
   15710:	d1 05       	cpc	r29, r1
   15712:	b1 f7       	brne	.-20     	; 0x15700 <save_setup_network()+0x11c>
   15714:	df 91       	pop	r29
   15716:	cf 91       	pop	r28
   15718:	1f 91       	pop	r17
   1571a:	0f 91       	pop	r16
   1571c:	ff 90       	pop	r15
   1571e:	ef 90       	pop	r14
   15720:	08 95       	ret

00015722 <device_get_name(char*)>:
_Z15device_get_namePc():
   15722:	0f 93       	push	r16
   15724:	1f 93       	push	r17
   15726:	cf 93       	push	r28
   15728:	df 93       	push	r29
   1572a:	8c 01       	movw	r16, r24
   1572c:	c4 e6       	ldi	r28, 0x64	; 100
   1572e:	d0 e0       	ldi	r29, 0x00	; 0
   15730:	ce 01       	movw	r24, r28
   15732:	0e 94 47 aa 	call	0x1548e	; 0x1548e <EEPROMClass::read(int) [clone .isra.0]>
   15736:	f8 01       	movw	r30, r16
   15738:	81 93       	st	Z+, r24
   1573a:	8f 01       	movw	r16, r30
   1573c:	10 82       	st	Z, r1
   1573e:	88 23       	and	r24, r24
   15740:	21 f0       	breq	.+8      	; 0x1574a <device_get_name(char*)+0x28>
   15742:	21 96       	adiw	r28, 0x01	; 1
   15744:	cd 36       	cpi	r28, 0x6D	; 109
   15746:	d1 05       	cpc	r29, r1
   15748:	99 f7       	brne	.-26     	; 0x15730 <device_get_name(char*)+0xe>
   1574a:	df 91       	pop	r29
   1574c:	cf 91       	pop	r28
   1574e:	1f 91       	pop	r17
   15750:	0f 91       	pop	r16
   15752:	08 95       	ret

00015754 <device_set_name(char*)>:
_Z15device_set_namePc():
   15754:	ff 92       	push	r15
   15756:	0f 93       	push	r16
   15758:	1f 93       	push	r17
   1575a:	cf 93       	push	r28
   1575c:	df 93       	push	r29
   1575e:	8c 01       	movw	r16, r24
   15760:	d0 e0       	ldi	r29, 0x00	; 0
   15762:	c0 e0       	ldi	r28, 0x00	; 0
   15764:	f8 01       	movw	r30, r16
   15766:	f1 90       	ld	r15, Z+
   15768:	8f 01       	movw	r16, r30
   1576a:	6f 2d       	mov	r22, r15
   1576c:	ce 01       	movw	r24, r28
   1576e:	8c 59       	subi	r24, 0x9C	; 156
   15770:	9f 4f       	sbci	r25, 0xFF	; 255
   15772:	0e 94 49 aa 	call	0x15492	; 0x15492 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   15776:	f1 10       	cpse	r15, r1
   15778:	0b c0       	rjmp	.+22     	; 0x15790 <device_set_name(char*)+0x3c>
   1577a:	60 e0       	ldi	r22, 0x00	; 0
   1577c:	ce 01       	movw	r24, r28
   1577e:	8b 59       	subi	r24, 0x9B	; 155
   15780:	9f 4f       	sbci	r25, 0xFF	; 255
   15782:	df 91       	pop	r29
   15784:	cf 91       	pop	r28
   15786:	1f 91       	pop	r17
   15788:	0f 91       	pop	r16
   1578a:	ff 90       	pop	r15
   1578c:	0c 94 49 aa 	jmp	0x15492	; 0x15492 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   15790:	21 96       	adiw	r28, 0x01	; 1
   15792:	c9 30       	cpi	r28, 0x09	; 9
   15794:	d1 05       	cpc	r29, r1
   15796:	31 f7       	brne	.-52     	; 0x15764 <device_set_name(char*)+0x10>
   15798:	df 91       	pop	r29
   1579a:	cf 91       	pop	r28
   1579c:	1f 91       	pop	r17
   1579e:	0f 91       	pop	r16
   157a0:	ff 90       	pop	r15
   157a2:	08 95       	ret

000157a4 <setting_network(char*, char*)>:
_Z15setting_networkPcS_():
   157a4:	ef 92       	push	r14
   157a6:	ff 92       	push	r15
   157a8:	0f 93       	push	r16
   157aa:	1f 93       	push	r17
   157ac:	cf 93       	push	r28
   157ae:	df 93       	push	r29
   157b0:	7b 01       	movw	r14, r22
   157b2:	63 e4       	ldi	r22, 0x43	; 67
   157b4:	77 e0       	ldi	r23, 0x07	; 7
   157b6:	0f 94 29 1a 	call	0x23452	; 0x23452 <strtok>
   157ba:	ec 01       	movw	r28, r24
   157bc:	10 e0       	ldi	r17, 0x00	; 0
   157be:	20 97       	sbiw	r28, 0x00	; 0
   157c0:	09 f4       	brne	.+2      	; 0x157c4 <setting_network(char*, char*)+0x20>
   157c2:	ba c0       	rjmp	.+372    	; 0x15938 <setting_network(char*, char*)+0x194>
   157c4:	68 ea       	ldi	r22, 0xA8	; 168
   157c6:	78 e0       	ldi	r23, 0x08	; 8
   157c8:	ce 01       	movw	r24, r28
   157ca:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
   157ce:	89 2b       	or	r24, r25
   157d0:	59 f4       	brne	.+22     	; 0x157e8 <setting_network(char*, char*)+0x44>
   157d2:	0a e0       	ldi	r16, 0x0A	; 10
   157d4:	10 e0       	ldi	r17, 0x00	; 0
   157d6:	26 e0       	ldi	r18, 0x06	; 6
   157d8:	30 e0       	ldi	r19, 0x00	; 0
   157da:	46 eb       	ldi	r20, 0xB6	; 182
   157dc:	5f e0       	ldi	r21, 0x0F	; 15
   157de:	6a e3       	ldi	r22, 0x3A	; 58
   157e0:	c7 01       	movw	r24, r14
   157e2:	0e 94 6f e4 	call	0x1c8de	; 0x1c8de <parseBytes(char const*, char, unsigned char*, int, int)>
   157e6:	11 e0       	ldi	r17, 0x01	; 1
   157e8:	6c ea       	ldi	r22, 0xAC	; 172
   157ea:	78 e0       	ldi	r23, 0x08	; 8
   157ec:	ce 01       	movw	r24, r28
   157ee:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
   157f2:	89 2b       	or	r24, r25
   157f4:	59 f4       	brne	.+22     	; 0x1580c <setting_network(char*, char*)+0x68>
   157f6:	0a e0       	ldi	r16, 0x0A	; 10
   157f8:	10 e0       	ldi	r17, 0x00	; 0
   157fa:	24 e0       	ldi	r18, 0x04	; 4
   157fc:	30 e0       	ldi	r19, 0x00	; 0
   157fe:	4c eb       	ldi	r20, 0xBC	; 188
   15800:	5f e0       	ldi	r21, 0x0F	; 15
   15802:	6e e2       	ldi	r22, 0x2E	; 46
   15804:	c7 01       	movw	r24, r14
   15806:	0e 94 6f e4 	call	0x1c8de	; 0x1c8de <parseBytes(char const*, char, unsigned char*, int, int)>
   1580a:	11 e0       	ldi	r17, 0x01	; 1
   1580c:	6f ea       	ldi	r22, 0xAF	; 175
   1580e:	78 e0       	ldi	r23, 0x08	; 8
   15810:	ce 01       	movw	r24, r28
   15812:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
   15816:	89 2b       	or	r24, r25
   15818:	59 f4       	brne	.+22     	; 0x15830 <setting_network(char*, char*)+0x8c>
   1581a:	0a e0       	ldi	r16, 0x0A	; 10
   1581c:	10 e0       	ldi	r17, 0x00	; 0
   1581e:	24 e0       	ldi	r18, 0x04	; 4
   15820:	30 e0       	ldi	r19, 0x00	; 0
   15822:	40 ec       	ldi	r20, 0xC0	; 192
   15824:	5f e0       	ldi	r21, 0x0F	; 15
   15826:	6e e2       	ldi	r22, 0x2E	; 46
   15828:	c7 01       	movw	r24, r14
   1582a:	0e 94 6f e4 	call	0x1c8de	; 0x1c8de <parseBytes(char const*, char, unsigned char*, int, int)>
   1582e:	11 e0       	ldi	r17, 0x01	; 1
   15830:	67 eb       	ldi	r22, 0xB7	; 183
   15832:	78 e0       	ldi	r23, 0x08	; 8
   15834:	ce 01       	movw	r24, r28
   15836:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
   1583a:	89 2b       	or	r24, r25
   1583c:	59 f4       	brne	.+22     	; 0x15854 <setting_network(char*, char*)+0xb0>
   1583e:	0a e0       	ldi	r16, 0x0A	; 10
   15840:	10 e0       	ldi	r17, 0x00	; 0
   15842:	24 e0       	ldi	r18, 0x04	; 4
   15844:	30 e0       	ldi	r19, 0x00	; 0
   15846:	48 ec       	ldi	r20, 0xC8	; 200
   15848:	5f e0       	ldi	r21, 0x0F	; 15
   1584a:	6e e2       	ldi	r22, 0x2E	; 46
   1584c:	c7 01       	movw	r24, r14
   1584e:	0e 94 6f e4 	call	0x1c8de	; 0x1c8de <parseBytes(char const*, char, unsigned char*, int, int)>
   15852:	11 e0       	ldi	r17, 0x01	; 1
   15854:	6a eb       	ldi	r22, 0xBA	; 186
   15856:	78 e0       	ldi	r23, 0x08	; 8
   15858:	ce 01       	movw	r24, r28
   1585a:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
   1585e:	89 2b       	or	r24, r25
   15860:	59 f4       	brne	.+22     	; 0x15878 <setting_network(char*, char*)+0xd4>
   15862:	0a e0       	ldi	r16, 0x0A	; 10
   15864:	10 e0       	ldi	r17, 0x00	; 0
   15866:	24 e0       	ldi	r18, 0x04	; 4
   15868:	30 e0       	ldi	r19, 0x00	; 0
   1586a:	44 ec       	ldi	r20, 0xC4	; 196
   1586c:	5f e0       	ldi	r21, 0x0F	; 15
   1586e:	6e e2       	ldi	r22, 0x2E	; 46
   15870:	c7 01       	movw	r24, r14
   15872:	0e 94 6f e4 	call	0x1c8de	; 0x1c8de <parseBytes(char const*, char, unsigned char*, int, int)>
   15876:	11 e0       	ldi	r17, 0x01	; 1
   15878:	6e eb       	ldi	r22, 0xBE	; 190
   1587a:	78 e0       	ldi	r23, 0x08	; 8
   1587c:	ce 01       	movw	r24, r28
   1587e:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
   15882:	89 2b       	or	r24, r25
   15884:	59 f4       	brne	.+22     	; 0x1589c <setting_network(char*, char*)+0xf8>
   15886:	0a e0       	ldi	r16, 0x0A	; 10
   15888:	10 e0       	ldi	r17, 0x00	; 0
   1588a:	24 e0       	ldi	r18, 0x04	; 4
   1588c:	30 e0       	ldi	r19, 0x00	; 0
   1588e:	44 e0       	ldi	r20, 0x04	; 4
   15890:	50 e1       	ldi	r21, 0x10	; 16
   15892:	6e e2       	ldi	r22, 0x2E	; 46
   15894:	c7 01       	movw	r24, r14
   15896:	0e 94 6f e4 	call	0x1c8de	; 0x1c8de <parseBytes(char const*, char, unsigned char*, int, int)>
   1589a:	11 e0       	ldi	r17, 0x01	; 1
   1589c:	62 ec       	ldi	r22, 0xC2	; 194
   1589e:	78 e0       	ldi	r23, 0x08	; 8
   158a0:	ce 01       	movw	r24, r28
   158a2:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
   158a6:	89 2b       	or	r24, r25
   158a8:	59 f4       	brne	.+22     	; 0x158c0 <setting_network(char*, char*)+0x11c>
   158aa:	0a e0       	ldi	r16, 0x0A	; 10
   158ac:	10 e0       	ldi	r17, 0x00	; 0
   158ae:	24 e0       	ldi	r18, 0x04	; 4
   158b0:	30 e0       	ldi	r19, 0x00	; 0
   158b2:	46 ed       	ldi	r20, 0xD6	; 214
   158b4:	5f e0       	ldi	r21, 0x0F	; 15
   158b6:	6e e2       	ldi	r22, 0x2E	; 46
   158b8:	c7 01       	movw	r24, r14
   158ba:	0e 94 6f e4 	call	0x1c8de	; 0x1c8de <parseBytes(char const*, char, unsigned char*, int, int)>
   158be:	11 e0       	ldi	r17, 0x01	; 1
   158c0:	6c ec       	ldi	r22, 0xCC	; 204
   158c2:	78 e0       	ldi	r23, 0x08	; 8
   158c4:	ce 01       	movw	r24, r28
   158c6:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
   158ca:	89 2b       	or	r24, r25
   158cc:	41 f4       	brne	.+16     	; 0x158de <setting_network(char*, char*)+0x13a>
   158ce:	c7 01       	movw	r24, r14
   158d0:	0f 94 f0 19 	call	0x233e0	; 0x233e0 <atoi>
   158d4:	90 93 db 0f 	sts	0x0FDB, r25	; 0x800fdb <device+0x25>
   158d8:	80 93 da 0f 	sts	0x0FDA, r24	; 0x800fda <device+0x24>
   158dc:	11 e0       	ldi	r17, 0x01	; 1
   158de:	66 ed       	ldi	r22, 0xD6	; 214
   158e0:	78 e0       	ldi	r23, 0x08	; 8
   158e2:	ce 01       	movw	r24, r28
   158e4:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
   158e8:	89 2b       	or	r24, r25
   158ea:	31 f4       	brne	.+12     	; 0x158f8 <setting_network(char*, char*)+0x154>
   158ec:	b7 01       	movw	r22, r14
   158ee:	8c ed       	ldi	r24, 0xDC	; 220
   158f0:	9f e0       	ldi	r25, 0x0F	; 15
   158f2:	0f 94 67 1a 	call	0x234ce	; 0x234ce <strcpy>
   158f6:	11 e0       	ldi	r17, 0x01	; 1
   158f8:	60 ee       	ldi	r22, 0xE0	; 224
   158fa:	78 e0       	ldi	r23, 0x08	; 8
   158fc:	ce 01       	movw	r24, r28
   158fe:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
   15902:	89 2b       	or	r24, r25
   15904:	31 f4       	brne	.+12     	; 0x15912 <setting_network(char*, char*)+0x16e>
   15906:	b7 01       	movw	r22, r14
   15908:	80 ef       	ldi	r24, 0xF0	; 240
   1590a:	9f e0       	ldi	r25, 0x0F	; 15
   1590c:	0f 94 67 1a 	call	0x234ce	; 0x234ce <strcpy>
   15910:	11 e0       	ldi	r17, 0x01	; 1
   15912:	6a ec       	ldi	r22, 0xCA	; 202
   15914:	73 e0       	ldi	r23, 0x03	; 3
   15916:	ce 01       	movw	r24, r28
   15918:	0f 94 5e 1a 	call	0x234bc	; 0x234bc <strcmp>
   1591c:	89 2b       	or	r24, r25
   1591e:	21 f4       	brne	.+8      	; 0x15928 <setting_network(char*, char*)+0x184>
   15920:	c7 01       	movw	r24, r14
   15922:	0e 94 aa ab 	call	0x15754	; 0x15754 <device_set_name(char*)>
   15926:	12 e0       	ldi	r17, 0x02	; 2
   15928:	63 e4       	ldi	r22, 0x43	; 67
   1592a:	77 e0       	ldi	r23, 0x07	; 7
   1592c:	90 e0       	ldi	r25, 0x00	; 0
   1592e:	80 e0       	ldi	r24, 0x00	; 0
   15930:	0f 94 29 1a 	call	0x23452	; 0x23452 <strtok>
   15934:	ec 01       	movw	r28, r24
   15936:	43 cf       	rjmp	.-378    	; 0x157be <setting_network(char*, char*)+0x1a>
   15938:	81 2f       	mov	r24, r17
   1593a:	df 91       	pop	r29
   1593c:	cf 91       	pop	r28
   1593e:	1f 91       	pop	r17
   15940:	0f 91       	pop	r16
   15942:	ff 90       	pop	r15
   15944:	ef 90       	pop	r14
   15946:	08 95       	ret

00015948 <send_mqtt_set_header(char const*)>:
_Z20send_mqtt_set_headerPKc():
   15948:	90 93 b3 0f 	sts	0x0FB3, r25	; 0x800fb3 <header_out+0x1>
   1594c:	80 93 b2 0f 	sts	0x0FB2, r24	; 0x800fb2 <header_out>
   15950:	08 95       	ret

00015952 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>:
_Z41send_mqtt_message_prefix_id_topic_payloadP12PubSubClientPchS1_S1_():
   15952:	9f 92       	push	r9
   15954:	af 92       	push	r10
   15956:	bf 92       	push	r11
   15958:	cf 92       	push	r12
   1595a:	df 92       	push	r13
   1595c:	ef 92       	push	r14
   1595e:	ff 92       	push	r15
   15960:	0f 93       	push	r16
   15962:	1f 93       	push	r17
   15964:	cf 93       	push	r28
   15966:	df 93       	push	r29
   15968:	cd b7       	in	r28, 0x3d	; 61
   1596a:	de b7       	in	r29, 0x3e	; 62
   1596c:	c6 55       	subi	r28, 0x56	; 86
   1596e:	d1 09       	sbc	r29, r1
   15970:	0f b6       	in	r0, 0x3f	; 63
   15972:	f8 94       	cli
   15974:	de bf       	out	0x3e, r29	; 62
   15976:	0f be       	out	0x3f, r0	; 63
   15978:	cd bf       	out	0x3d, r28	; 61
   1597a:	7c 01       	movw	r14, r24
   1597c:	5b 01       	movw	r10, r22
   1597e:	94 2e       	mov	r9, r20
   15980:	69 01       	movw	r12, r18
   15982:	0e 94 de ed 	call	0x1dbbc	; 0x1dbbc <PubSubClient::connected()>
   15986:	88 23       	and	r24, r24
   15988:	09 f4       	brne	.+2      	; 0x1598c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)+0x3a>
   1598a:	62 c0       	rjmp	.+196    	; 0x15a50 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)+0xfe>
   1598c:	80 91 b4 0f 	lds	r24, 0x0FB4	; 0x800fb4 <mqtt_send_message>
   15990:	90 91 b5 0f 	lds	r25, 0x0FB5	; 0x800fb5 <mqtt_send_message+0x1>
   15994:	01 96       	adiw	r24, 0x01	; 1
   15996:	90 93 b5 0f 	sts	0x0FB5, r25	; 0x800fb5 <mqtt_send_message+0x1>
   1599a:	80 93 b4 0f 	sts	0x0FB4, r24	; 0x800fb4 <mqtt_send_message>
   1599e:	ce 01       	movw	r24, r28
   159a0:	83 5b       	subi	r24, 0xB3	; 179
   159a2:	9f 4f       	sbci	r25, 0xFF	; 255
   159a4:	0e 94 91 ab 	call	0x15722	; 0x15722 <device_get_name(char*)>
   159a8:	60 91 b2 0f 	lds	r22, 0x0FB2	; 0x800fb2 <header_out>
   159ac:	70 91 b3 0f 	lds	r23, 0x0FB3	; 0x800fb3 <header_out+0x1>
   159b0:	ce 01       	movw	r24, r28
   159b2:	01 96       	adiw	r24, 0x01	; 1
   159b4:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
   159b8:	be 01       	movw	r22, r28
   159ba:	63 5b       	subi	r22, 0xB3	; 179
   159bc:	7f 4f       	sbci	r23, 0xFF	; 255
   159be:	ce 01       	movw	r24, r28
   159c0:	01 96       	adiw	r24, 0x01	; 1
   159c2:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
   159c6:	63 e4       	ldi	r22, 0x43	; 67
   159c8:	77 e0       	ldi	r23, 0x07	; 7
   159ca:	ce 01       	movw	r24, r28
   159cc:	01 96       	adiw	r24, 0x01	; 1
   159ce:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
   159d2:	b5 01       	movw	r22, r10
   159d4:	ce 01       	movw	r24, r28
   159d6:	01 96       	adiw	r24, 0x01	; 1
   159d8:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
   159dc:	63 e4       	ldi	r22, 0x43	; 67
   159de:	77 e0       	ldi	r23, 0x07	; 7
   159e0:	ce 01       	movw	r24, r28
   159e2:	01 96       	adiw	r24, 0x01	; 1
   159e4:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
itoa():
   159e8:	4a e0       	ldi	r20, 0x0A	; 10
   159ea:	be 01       	movw	r22, r28
   159ec:	6f 5b       	subi	r22, 0xBF	; 191
   159ee:	7f 4f       	sbci	r23, 0xFF	; 255
   159f0:	89 2d       	mov	r24, r9
   159f2:	90 e0       	ldi	r25, 0x00	; 0
   159f4:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z41send_mqtt_message_prefix_id_topic_payloadP12PubSubClientPchS1_S1_():
   159f8:	be 01       	movw	r22, r28
   159fa:	6f 5b       	subi	r22, 0xBF	; 191
   159fc:	7f 4f       	sbci	r23, 0xFF	; 255
   159fe:	ce 01       	movw	r24, r28
   15a00:	01 96       	adiw	r24, 0x01	; 1
   15a02:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
   15a06:	63 e4       	ldi	r22, 0x43	; 67
   15a08:	77 e0       	ldi	r23, 0x07	; 7
   15a0a:	ce 01       	movw	r24, r28
   15a0c:	01 96       	adiw	r24, 0x01	; 1
   15a0e:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
   15a12:	b6 01       	movw	r22, r12
   15a14:	ce 01       	movw	r24, r28
   15a16:	01 96       	adiw	r24, 0x01	; 1
   15a18:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
   15a1c:	a8 01       	movw	r20, r16
   15a1e:	be 01       	movw	r22, r28
   15a20:	6f 5f       	subi	r22, 0xFF	; 255
   15a22:	7f 4f       	sbci	r23, 0xFF	; 255
   15a24:	c7 01       	movw	r24, r14
   15a26:	0e 94 eb f1 	call	0x1e3d6	; 0x1e3d6 <PubSubClient::publish(char const*, char const*)>
   15a2a:	ca 5a       	subi	r28, 0xAA	; 170
   15a2c:	df 4f       	sbci	r29, 0xFF	; 255
   15a2e:	0f b6       	in	r0, 0x3f	; 63
   15a30:	f8 94       	cli
   15a32:	de bf       	out	0x3e, r29	; 62
   15a34:	0f be       	out	0x3f, r0	; 63
   15a36:	cd bf       	out	0x3d, r28	; 61
   15a38:	df 91       	pop	r29
   15a3a:	cf 91       	pop	r28
   15a3c:	1f 91       	pop	r17
   15a3e:	0f 91       	pop	r16
   15a40:	ff 90       	pop	r15
   15a42:	ef 90       	pop	r14
   15a44:	df 90       	pop	r13
   15a46:	cf 90       	pop	r12
   15a48:	bf 90       	pop	r11
   15a4a:	af 90       	pop	r10
   15a4c:	9f 90       	pop	r9
   15a4e:	08 95       	ret
   15a50:	80 91 08 10 	lds	r24, 0x1008	; 0x801008 <mqtt_error>
   15a54:	90 91 09 10 	lds	r25, 0x1009	; 0x801009 <mqtt_error+0x1>
   15a58:	01 96       	adiw	r24, 0x01	; 1
   15a5a:	90 93 09 10 	sts	0x1009, r25	; 0x801009 <mqtt_error+0x1>
   15a5e:	80 93 08 10 	sts	0x1008, r24	; 0x801008 <mqtt_error>
   15a62:	e3 cf       	rjmp	.-58     	; 0x15a2a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)+0xd8>

00015a64 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*)>:
_Z45send_mqtt_message_prefix_id_idx_topic_payloadP12PubSubClientPchhS1_S1_():
   15a64:	8f 92       	push	r8
   15a66:	9f 92       	push	r9
   15a68:	af 92       	push	r10
   15a6a:	bf 92       	push	r11
   15a6c:	cf 92       	push	r12
   15a6e:	df 92       	push	r13
   15a70:	ef 92       	push	r14
   15a72:	ff 92       	push	r15
   15a74:	0f 93       	push	r16
   15a76:	1f 93       	push	r17
   15a78:	cf 93       	push	r28
   15a7a:	df 93       	push	r29
   15a7c:	cd b7       	in	r28, 0x3d	; 61
   15a7e:	de b7       	in	r29, 0x3e	; 62
   15a80:	c6 55       	subi	r28, 0x56	; 86
   15a82:	d1 09       	sbc	r29, r1
   15a84:	0f b6       	in	r0, 0x3f	; 63
   15a86:	f8 94       	cli
   15a88:	de bf       	out	0x3e, r29	; 62
   15a8a:	0f be       	out	0x3f, r0	; 63
   15a8c:	cd bf       	out	0x3d, r28	; 61
   15a8e:	6c 01       	movw	r12, r24
   15a90:	5b 01       	movw	r10, r22
   15a92:	84 2e       	mov	r8, r20
   15a94:	92 2e       	mov	r9, r18
   15a96:	0e 94 de ed 	call	0x1dbbc	; 0x1dbbc <PubSubClient::connected()>
   15a9a:	88 23       	and	r24, r24
   15a9c:	09 f4       	brne	.+2      	; 0x15aa0 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*)+0x3c>
   15a9e:	78 c0       	rjmp	.+240    	; 0x15b90 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*)+0x12c>
   15aa0:	80 91 b4 0f 	lds	r24, 0x0FB4	; 0x800fb4 <mqtt_send_message>
   15aa4:	90 91 b5 0f 	lds	r25, 0x0FB5	; 0x800fb5 <mqtt_send_message+0x1>
   15aa8:	01 96       	adiw	r24, 0x01	; 1
   15aaa:	90 93 b5 0f 	sts	0x0FB5, r25	; 0x800fb5 <mqtt_send_message+0x1>
   15aae:	80 93 b4 0f 	sts	0x0FB4, r24	; 0x800fb4 <mqtt_send_message>
   15ab2:	ce 01       	movw	r24, r28
   15ab4:	83 5b       	subi	r24, 0xB3	; 179
   15ab6:	9f 4f       	sbci	r25, 0xFF	; 255
   15ab8:	0e 94 91 ab 	call	0x15722	; 0x15722 <device_get_name(char*)>
   15abc:	60 91 b2 0f 	lds	r22, 0x0FB2	; 0x800fb2 <header_out>
   15ac0:	70 91 b3 0f 	lds	r23, 0x0FB3	; 0x800fb3 <header_out+0x1>
   15ac4:	ce 01       	movw	r24, r28
   15ac6:	01 96       	adiw	r24, 0x01	; 1
   15ac8:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
   15acc:	be 01       	movw	r22, r28
   15ace:	63 5b       	subi	r22, 0xB3	; 179
   15ad0:	7f 4f       	sbci	r23, 0xFF	; 255
   15ad2:	ce 01       	movw	r24, r28
   15ad4:	01 96       	adiw	r24, 0x01	; 1
   15ad6:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
   15ada:	63 e4       	ldi	r22, 0x43	; 67
   15adc:	77 e0       	ldi	r23, 0x07	; 7
   15ade:	ce 01       	movw	r24, r28
   15ae0:	01 96       	adiw	r24, 0x01	; 1
   15ae2:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
   15ae6:	b5 01       	movw	r22, r10
   15ae8:	ce 01       	movw	r24, r28
   15aea:	01 96       	adiw	r24, 0x01	; 1
   15aec:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
   15af0:	63 e4       	ldi	r22, 0x43	; 67
   15af2:	77 e0       	ldi	r23, 0x07	; 7
   15af4:	ce 01       	movw	r24, r28
   15af6:	01 96       	adiw	r24, 0x01	; 1
   15af8:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
itoa():
   15afc:	4a e0       	ldi	r20, 0x0A	; 10
   15afe:	be 01       	movw	r22, r28
   15b00:	6f 5b       	subi	r22, 0xBF	; 191
   15b02:	7f 4f       	sbci	r23, 0xFF	; 255
   15b04:	88 2d       	mov	r24, r8
   15b06:	90 e0       	ldi	r25, 0x00	; 0
   15b08:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z45send_mqtt_message_prefix_id_idx_topic_payloadP12PubSubClientPchhS1_S1_():
   15b0c:	be 01       	movw	r22, r28
   15b0e:	6f 5b       	subi	r22, 0xBF	; 191
   15b10:	7f 4f       	sbci	r23, 0xFF	; 255
   15b12:	ce 01       	movw	r24, r28
   15b14:	01 96       	adiw	r24, 0x01	; 1
   15b16:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
   15b1a:	63 e4       	ldi	r22, 0x43	; 67
   15b1c:	77 e0       	ldi	r23, 0x07	; 7
   15b1e:	ce 01       	movw	r24, r28
   15b20:	01 96       	adiw	r24, 0x01	; 1
   15b22:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
itoa():
   15b26:	4a e0       	ldi	r20, 0x0A	; 10
   15b28:	be 01       	movw	r22, r28
   15b2a:	6f 5b       	subi	r22, 0xBF	; 191
   15b2c:	7f 4f       	sbci	r23, 0xFF	; 255
   15b2e:	89 2d       	mov	r24, r9
   15b30:	90 e0       	ldi	r25, 0x00	; 0
   15b32:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z45send_mqtt_message_prefix_id_idx_topic_payloadP12PubSubClientPchhS1_S1_():
   15b36:	be 01       	movw	r22, r28
   15b38:	6f 5b       	subi	r22, 0xBF	; 191
   15b3a:	7f 4f       	sbci	r23, 0xFF	; 255
   15b3c:	ce 01       	movw	r24, r28
   15b3e:	01 96       	adiw	r24, 0x01	; 1
   15b40:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
   15b44:	63 e4       	ldi	r22, 0x43	; 67
   15b46:	77 e0       	ldi	r23, 0x07	; 7
   15b48:	ce 01       	movw	r24, r28
   15b4a:	01 96       	adiw	r24, 0x01	; 1
   15b4c:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
   15b50:	b8 01       	movw	r22, r16
   15b52:	ce 01       	movw	r24, r28
   15b54:	01 96       	adiw	r24, 0x01	; 1
   15b56:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
   15b5a:	a7 01       	movw	r20, r14
   15b5c:	be 01       	movw	r22, r28
   15b5e:	6f 5f       	subi	r22, 0xFF	; 255
   15b60:	7f 4f       	sbci	r23, 0xFF	; 255
   15b62:	c6 01       	movw	r24, r12
   15b64:	0e 94 eb f1 	call	0x1e3d6	; 0x1e3d6 <PubSubClient::publish(char const*, char const*)>
   15b68:	ca 5a       	subi	r28, 0xAA	; 170
   15b6a:	df 4f       	sbci	r29, 0xFF	; 255
   15b6c:	0f b6       	in	r0, 0x3f	; 63
   15b6e:	f8 94       	cli
   15b70:	de bf       	out	0x3e, r29	; 62
   15b72:	0f be       	out	0x3f, r0	; 63
   15b74:	cd bf       	out	0x3d, r28	; 61
   15b76:	df 91       	pop	r29
   15b78:	cf 91       	pop	r28
   15b7a:	1f 91       	pop	r17
   15b7c:	0f 91       	pop	r16
   15b7e:	ff 90       	pop	r15
   15b80:	ef 90       	pop	r14
   15b82:	df 90       	pop	r13
   15b84:	cf 90       	pop	r12
   15b86:	bf 90       	pop	r11
   15b88:	af 90       	pop	r10
   15b8a:	9f 90       	pop	r9
   15b8c:	8f 90       	pop	r8
   15b8e:	08 95       	ret
   15b90:	80 91 08 10 	lds	r24, 0x1008	; 0x801008 <mqtt_error>
   15b94:	90 91 09 10 	lds	r25, 0x1009	; 0x801009 <mqtt_error+0x1>
   15b98:	01 96       	adiw	r24, 0x01	; 1
   15b9a:	90 93 09 10 	sts	0x1009, r25	; 0x801009 <mqtt_error+0x1>
   15b9e:	80 93 08 10 	sts	0x1008, r24	; 0x801008 <mqtt_error>
   15ba2:	e2 cf       	rjmp	.-60     	; 0x15b68 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*)+0x104>

00015ba4 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>:
_Z25send_mqtt_general_payloadP12PubSubClientPcPKc():
   15ba4:	cf 92       	push	r12
   15ba6:	df 92       	push	r13
   15ba8:	ef 92       	push	r14
   15baa:	ff 92       	push	r15
   15bac:	0f 93       	push	r16
   15bae:	1f 93       	push	r17
   15bb0:	cf 93       	push	r28
   15bb2:	df 93       	push	r29
   15bb4:	cd b7       	in	r28, 0x3d	; 61
   15bb6:	de b7       	in	r29, 0x3e	; 62
   15bb8:	ca 54       	subi	r28, 0x4A	; 74
   15bba:	d1 09       	sbc	r29, r1
   15bbc:	0f b6       	in	r0, 0x3f	; 63
   15bbe:	f8 94       	cli
   15bc0:	de bf       	out	0x3e, r29	; 62
   15bc2:	0f be       	out	0x3f, r0	; 63
   15bc4:	cd bf       	out	0x3d, r28	; 61
   15bc6:	8c 01       	movw	r16, r24
   15bc8:	6b 01       	movw	r12, r22
   15bca:	7a 01       	movw	r14, r20
   15bcc:	0e 94 de ed 	call	0x1dbbc	; 0x1dbbc <PubSubClient::connected()>
   15bd0:	88 23       	and	r24, r24
   15bd2:	09 f4       	brne	.+2      	; 0x15bd6 <send_mqtt_general_payload(PubSubClient*, char*, char const*)+0x32>
   15bd4:	3f c0       	rjmp	.+126    	; 0x15c54 <send_mqtt_general_payload(PubSubClient*, char*, char const*)+0xb0>
   15bd6:	80 91 b4 0f 	lds	r24, 0x0FB4	; 0x800fb4 <mqtt_send_message>
   15bda:	90 91 b5 0f 	lds	r25, 0x0FB5	; 0x800fb5 <mqtt_send_message+0x1>
   15bde:	01 96       	adiw	r24, 0x01	; 1
   15be0:	90 93 b5 0f 	sts	0x0FB5, r25	; 0x800fb5 <mqtt_send_message+0x1>
   15be4:	80 93 b4 0f 	sts	0x0FB4, r24	; 0x800fb4 <mqtt_send_message>
   15be8:	ce 01       	movw	r24, r28
   15bea:	8f 5b       	subi	r24, 0xBF	; 191
   15bec:	9f 4f       	sbci	r25, 0xFF	; 255
   15bee:	0e 94 91 ab 	call	0x15722	; 0x15722 <device_get_name(char*)>
   15bf2:	60 91 b2 0f 	lds	r22, 0x0FB2	; 0x800fb2 <header_out>
   15bf6:	70 91 b3 0f 	lds	r23, 0x0FB3	; 0x800fb3 <header_out+0x1>
   15bfa:	ce 01       	movw	r24, r28
   15bfc:	01 96       	adiw	r24, 0x01	; 1
   15bfe:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
   15c02:	be 01       	movw	r22, r28
   15c04:	6f 5b       	subi	r22, 0xBF	; 191
   15c06:	7f 4f       	sbci	r23, 0xFF	; 255
   15c08:	ce 01       	movw	r24, r28
   15c0a:	01 96       	adiw	r24, 0x01	; 1
   15c0c:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
   15c10:	63 e4       	ldi	r22, 0x43	; 67
   15c12:	77 e0       	ldi	r23, 0x07	; 7
   15c14:	ce 01       	movw	r24, r28
   15c16:	01 96       	adiw	r24, 0x01	; 1
   15c18:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
   15c1c:	b6 01       	movw	r22, r12
   15c1e:	ce 01       	movw	r24, r28
   15c20:	01 96       	adiw	r24, 0x01	; 1
   15c22:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
   15c26:	a7 01       	movw	r20, r14
   15c28:	be 01       	movw	r22, r28
   15c2a:	6f 5f       	subi	r22, 0xFF	; 255
   15c2c:	7f 4f       	sbci	r23, 0xFF	; 255
   15c2e:	c8 01       	movw	r24, r16
   15c30:	0e 94 eb f1 	call	0x1e3d6	; 0x1e3d6 <PubSubClient::publish(char const*, char const*)>
   15c34:	c6 5b       	subi	r28, 0xB6	; 182
   15c36:	df 4f       	sbci	r29, 0xFF	; 255
   15c38:	0f b6       	in	r0, 0x3f	; 63
   15c3a:	f8 94       	cli
   15c3c:	de bf       	out	0x3e, r29	; 62
   15c3e:	0f be       	out	0x3f, r0	; 63
   15c40:	cd bf       	out	0x3d, r28	; 61
   15c42:	df 91       	pop	r29
   15c44:	cf 91       	pop	r28
   15c46:	1f 91       	pop	r17
   15c48:	0f 91       	pop	r16
   15c4a:	ff 90       	pop	r15
   15c4c:	ef 90       	pop	r14
   15c4e:	df 90       	pop	r13
   15c50:	cf 90       	pop	r12
   15c52:	08 95       	ret
   15c54:	80 91 08 10 	lds	r24, 0x1008	; 0x801008 <mqtt_error>
   15c58:	90 91 09 10 	lds	r25, 0x1009	; 0x801009 <mqtt_error+0x1>
   15c5c:	01 96       	adiw	r24, 0x01	; 1
   15c5e:	90 93 09 10 	sts	0x1009, r25	; 0x801009 <mqtt_error+0x1>
   15c62:	80 93 08 10 	sts	0x1008, r24	; 0x801008 <mqtt_error>
   15c66:	e6 cf       	rjmp	.-52     	; 0x15c34 <send_mqtt_general_payload(PubSubClient*, char*, char const*)+0x90>

00015c68 <send_network_config(PubSubClient*)>:
_Z19send_network_configP12PubSubClient():
   15c68:	cf 92       	push	r12
   15c6a:	df 92       	push	r13
   15c6c:	ef 92       	push	r14
   15c6e:	0f 93       	push	r16
   15c70:	cf 93       	push	r28
   15c72:	df 93       	push	r29
   15c74:	cd b7       	in	r28, 0x3d	; 61
   15c76:	de b7       	in	r29, 0x3e	; 62
   15c78:	e4 97       	sbiw	r28, 0x34	; 52
   15c7a:	0f b6       	in	r0, 0x3f	; 63
   15c7c:	f8 94       	cli
   15c7e:	de bf       	out	0x3e, r29	; 62
   15c80:	0f be       	out	0x3f, r0	; 63
   15c82:	cd bf       	out	0x3d, r28	; 61
   15c84:	6c 01       	movw	r12, r24
   15c86:	19 a2       	std	Y+33, r1	; 0x21
   15c88:	82 e0       	ldi	r24, 0x02	; 2
   15c8a:	e8 2e       	mov	r14, r24
   15c8c:	00 e1       	ldi	r16, 0x10	; 16
   15c8e:	26 e0       	ldi	r18, 0x06	; 6
   15c90:	46 eb       	ldi	r20, 0xB6	; 182
   15c92:	5f e0       	ldi	r21, 0x0F	; 15
   15c94:	6a e3       	ldi	r22, 0x3A	; 58
   15c96:	ce 01       	movw	r24, r28
   15c98:	81 96       	adiw	r24, 0x21	; 33
   15c9a:	0e 94 e9 e4 	call	0x1c9d2	; 0x1c9d2 <createString(char*, char, unsigned char*, unsigned char, unsigned char, unsigned char)>
   15c9e:	60 ed       	ldi	r22, 0xD0	; 208
   15ca0:	76 e8       	ldi	r23, 0x86	; 134
   15ca2:	ce 01       	movw	r24, r28
   15ca4:	01 96       	adiw	r24, 0x01	; 1
   15ca6:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
   15caa:	ae 01       	movw	r20, r28
   15cac:	4f 5d       	subi	r20, 0xDF	; 223
   15cae:	5f 4f       	sbci	r21, 0xFF	; 255
   15cb0:	be 01       	movw	r22, r28
   15cb2:	6f 5f       	subi	r22, 0xFF	; 255
   15cb4:	7f 4f       	sbci	r23, 0xFF	; 255
   15cb6:	c6 01       	movw	r24, r12
   15cb8:	0e 94 d2 ad 	call	0x15ba4	; 0x15ba4 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   15cbc:	19 a2       	std	Y+33, r1	; 0x21
   15cbe:	ee 24       	eor	r14, r14
   15cc0:	e3 94       	inc	r14
   15cc2:	0a e0       	ldi	r16, 0x0A	; 10
   15cc4:	24 e0       	ldi	r18, 0x04	; 4
   15cc6:	4c eb       	ldi	r20, 0xBC	; 188
   15cc8:	5f e0       	ldi	r21, 0x0F	; 15
   15cca:	6e e2       	ldi	r22, 0x2E	; 46
   15ccc:	ce 01       	movw	r24, r28
   15cce:	81 96       	adiw	r24, 0x21	; 33
   15cd0:	0e 94 e9 e4 	call	0x1c9d2	; 0x1c9d2 <createString(char*, char, unsigned char*, unsigned char, unsigned char, unsigned char)>
   15cd4:	6d ef       	ldi	r22, 0xFD	; 253
   15cd6:	76 e8       	ldi	r23, 0x86	; 134
   15cd8:	ce 01       	movw	r24, r28
   15cda:	01 96       	adiw	r24, 0x01	; 1
   15cdc:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
   15ce0:	ae 01       	movw	r20, r28
   15ce2:	4f 5d       	subi	r20, 0xDF	; 223
   15ce4:	5f 4f       	sbci	r21, 0xFF	; 255
   15ce6:	be 01       	movw	r22, r28
   15ce8:	6f 5f       	subi	r22, 0xFF	; 255
   15cea:	7f 4f       	sbci	r23, 0xFF	; 255
   15cec:	c6 01       	movw	r24, r12
   15cee:	0e 94 d2 ad 	call	0x15ba4	; 0x15ba4 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   15cf2:	19 a2       	std	Y+33, r1	; 0x21
   15cf4:	24 e0       	ldi	r18, 0x04	; 4
   15cf6:	40 ec       	ldi	r20, 0xC0	; 192
   15cf8:	5f e0       	ldi	r21, 0x0F	; 15
   15cfa:	6e e2       	ldi	r22, 0x2E	; 46
   15cfc:	ce 01       	movw	r24, r28
   15cfe:	81 96       	adiw	r24, 0x21	; 33
   15d00:	0e 94 e9 e4 	call	0x1c9d2	; 0x1c9d2 <createString(char*, char, unsigned char*, unsigned char, unsigned char, unsigned char)>
   15d04:	60 ec       	ldi	r22, 0xC0	; 192
   15d06:	76 e8       	ldi	r23, 0x86	; 134
   15d08:	ce 01       	movw	r24, r28
   15d0a:	01 96       	adiw	r24, 0x01	; 1
   15d0c:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
   15d10:	ae 01       	movw	r20, r28
   15d12:	4f 5d       	subi	r20, 0xDF	; 223
   15d14:	5f 4f       	sbci	r21, 0xFF	; 255
   15d16:	be 01       	movw	r22, r28
   15d18:	6f 5f       	subi	r22, 0xFF	; 255
   15d1a:	7f 4f       	sbci	r23, 0xFF	; 255
   15d1c:	c6 01       	movw	r24, r12
   15d1e:	0e 94 d2 ad 	call	0x15ba4	; 0x15ba4 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   15d22:	19 a2       	std	Y+33, r1	; 0x21
   15d24:	24 e0       	ldi	r18, 0x04	; 4
   15d26:	48 ec       	ldi	r20, 0xC8	; 200
   15d28:	5f e0       	ldi	r21, 0x0F	; 15
   15d2a:	6e e2       	ldi	r22, 0x2E	; 46
   15d2c:	ce 01       	movw	r24, r28
   15d2e:	81 96       	adiw	r24, 0x21	; 33
   15d30:	0e 94 e9 e4 	call	0x1c9d2	; 0x1c9d2 <createString(char*, char, unsigned char*, unsigned char, unsigned char, unsigned char)>
   15d34:	65 eb       	ldi	r22, 0xB5	; 181
   15d36:	76 e8       	ldi	r23, 0x86	; 134
   15d38:	ce 01       	movw	r24, r28
   15d3a:	01 96       	adiw	r24, 0x01	; 1
   15d3c:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
   15d40:	ae 01       	movw	r20, r28
   15d42:	4f 5d       	subi	r20, 0xDF	; 223
   15d44:	5f 4f       	sbci	r21, 0xFF	; 255
   15d46:	be 01       	movw	r22, r28
   15d48:	6f 5f       	subi	r22, 0xFF	; 255
   15d4a:	7f 4f       	sbci	r23, 0xFF	; 255
   15d4c:	c6 01       	movw	r24, r12
   15d4e:	0e 94 d2 ad 	call	0x15ba4	; 0x15ba4 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   15d52:	19 a2       	std	Y+33, r1	; 0x21
   15d54:	24 e0       	ldi	r18, 0x04	; 4
   15d56:	44 ec       	ldi	r20, 0xC4	; 196
   15d58:	5f e0       	ldi	r21, 0x0F	; 15
   15d5a:	6e e2       	ldi	r22, 0x2E	; 46
   15d5c:	ce 01       	movw	r24, r28
   15d5e:	81 96       	adiw	r24, 0x21	; 33
   15d60:	0e 94 e9 e4 	call	0x1c9d2	; 0x1c9d2 <createString(char*, char, unsigned char*, unsigned char, unsigned char, unsigned char)>
   15d64:	69 ea       	ldi	r22, 0xA9	; 169
   15d66:	76 e8       	ldi	r23, 0x86	; 134
   15d68:	ce 01       	movw	r24, r28
   15d6a:	01 96       	adiw	r24, 0x01	; 1
   15d6c:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
   15d70:	ae 01       	movw	r20, r28
   15d72:	4f 5d       	subi	r20, 0xDF	; 223
   15d74:	5f 4f       	sbci	r21, 0xFF	; 255
   15d76:	be 01       	movw	r22, r28
   15d78:	6f 5f       	subi	r22, 0xFF	; 255
   15d7a:	7f 4f       	sbci	r23, 0xFF	; 255
   15d7c:	c6 01       	movw	r24, r12
   15d7e:	0e 94 d2 ad 	call	0x15ba4	; 0x15ba4 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   15d82:	19 a2       	std	Y+33, r1	; 0x21
   15d84:	24 e0       	ldi	r18, 0x04	; 4
   15d86:	44 e0       	ldi	r20, 0x04	; 4
   15d88:	50 e1       	ldi	r21, 0x10	; 16
   15d8a:	6e e2       	ldi	r22, 0x2E	; 46
   15d8c:	ce 01       	movw	r24, r28
   15d8e:	81 96       	adiw	r24, 0x21	; 33
   15d90:	0e 94 e9 e4 	call	0x1c9d2	; 0x1c9d2 <createString(char*, char, unsigned char*, unsigned char, unsigned char, unsigned char)>
   15d94:	6d e9       	ldi	r22, 0x9D	; 157
   15d96:	76 e8       	ldi	r23, 0x86	; 134
   15d98:	ce 01       	movw	r24, r28
   15d9a:	01 96       	adiw	r24, 0x01	; 1
   15d9c:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
   15da0:	ae 01       	movw	r20, r28
   15da2:	4f 5d       	subi	r20, 0xDF	; 223
   15da4:	5f 4f       	sbci	r21, 0xFF	; 255
   15da6:	be 01       	movw	r22, r28
   15da8:	6f 5f       	subi	r22, 0xFF	; 255
   15daa:	7f 4f       	sbci	r23, 0xFF	; 255
   15dac:	c6 01       	movw	r24, r12
   15dae:	0e 94 d2 ad 	call	0x15ba4	; 0x15ba4 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   15db2:	19 a2       	std	Y+33, r1	; 0x21
   15db4:	24 e0       	ldi	r18, 0x04	; 4
   15db6:	46 ed       	ldi	r20, 0xD6	; 214
   15db8:	5f e0       	ldi	r21, 0x0F	; 15
   15dba:	6e e2       	ldi	r22, 0x2E	; 46
   15dbc:	ce 01       	movw	r24, r28
   15dbe:	81 96       	adiw	r24, 0x21	; 33
   15dc0:	0e 94 e9 e4 	call	0x1c9d2	; 0x1c9d2 <createString(char*, char, unsigned char*, unsigned char, unsigned char, unsigned char)>
   15dc4:	6b e8       	ldi	r22, 0x8B	; 139
   15dc6:	76 e8       	ldi	r23, 0x86	; 134
   15dc8:	ce 01       	movw	r24, r28
   15dca:	01 96       	adiw	r24, 0x01	; 1
   15dcc:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
   15dd0:	ae 01       	movw	r20, r28
   15dd2:	4f 5d       	subi	r20, 0xDF	; 223
   15dd4:	5f 4f       	sbci	r21, 0xFF	; 255
   15dd6:	be 01       	movw	r22, r28
   15dd8:	6f 5f       	subi	r22, 0xFF	; 255
   15dda:	7f 4f       	sbci	r23, 0xFF	; 255
   15ddc:	c6 01       	movw	r24, r12
   15dde:	0e 94 d2 ad 	call	0x15ba4	; 0x15ba4 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
itoa():
   15de2:	4a e0       	ldi	r20, 0x0A	; 10
   15de4:	be 01       	movw	r22, r28
   15de6:	6f 5d       	subi	r22, 0xDF	; 223
   15de8:	7f 4f       	sbci	r23, 0xFF	; 255
   15dea:	80 91 da 0f 	lds	r24, 0x0FDA	; 0x800fda <device+0x24>
   15dee:	90 91 db 0f 	lds	r25, 0x0FDB	; 0x800fdb <device+0x25>
   15df2:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z19send_network_configP12PubSubClient():
   15df6:	69 e7       	ldi	r22, 0x79	; 121
   15df8:	76 e8       	ldi	r23, 0x86	; 134
   15dfa:	ce 01       	movw	r24, r28
   15dfc:	01 96       	adiw	r24, 0x01	; 1
   15dfe:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
   15e02:	ae 01       	movw	r20, r28
   15e04:	4f 5d       	subi	r20, 0xDF	; 223
   15e06:	5f 4f       	sbci	r21, 0xFF	; 255
   15e08:	be 01       	movw	r22, r28
   15e0a:	6f 5f       	subi	r22, 0xFF	; 255
   15e0c:	7f 4f       	sbci	r23, 0xFF	; 255
   15e0e:	c6 01       	movw	r24, r12
   15e10:	0e 94 d2 ad 	call	0x15ba4	; 0x15ba4 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   15e14:	67 e6       	ldi	r22, 0x67	; 103
   15e16:	76 e8       	ldi	r23, 0x86	; 134
   15e18:	ce 01       	movw	r24, r28
   15e1a:	01 96       	adiw	r24, 0x01	; 1
   15e1c:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
   15e20:	4c ed       	ldi	r20, 0xDC	; 220
   15e22:	5f e0       	ldi	r21, 0x0F	; 15
   15e24:	be 01       	movw	r22, r28
   15e26:	6f 5f       	subi	r22, 0xFF	; 255
   15e28:	7f 4f       	sbci	r23, 0xFF	; 255
   15e2a:	c6 01       	movw	r24, r12
   15e2c:	0e 94 d2 ad 	call	0x15ba4	; 0x15ba4 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   15e30:	66 e5       	ldi	r22, 0x56	; 86
   15e32:	76 e8       	ldi	r23, 0x86	; 134
   15e34:	ce 01       	movw	r24, r28
   15e36:	01 96       	adiw	r24, 0x01	; 1
   15e38:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
   15e3c:	40 ef       	ldi	r20, 0xF0	; 240
   15e3e:	5f e0       	ldi	r21, 0x0F	; 15
   15e40:	be 01       	movw	r22, r28
   15e42:	6f 5f       	subi	r22, 0xFF	; 255
   15e44:	7f 4f       	sbci	r23, 0xFF	; 255
   15e46:	c6 01       	movw	r24, r12
   15e48:	0e 94 d2 ad 	call	0x15ba4	; 0x15ba4 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   15e4c:	60 ef       	ldi	r22, 0xF0	; 240
   15e4e:	76 e8       	ldi	r23, 0x86	; 134
   15e50:	ce 01       	movw	r24, r28
   15e52:	01 96       	adiw	r24, 0x01	; 1
   15e54:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
   15e58:	4c ec       	ldi	r20, 0xCC	; 204
   15e5a:	5f e0       	ldi	r21, 0x0F	; 15
   15e5c:	be 01       	movw	r22, r28
   15e5e:	6f 5f       	subi	r22, 0xFF	; 255
   15e60:	7f 4f       	sbci	r23, 0xFF	; 255
   15e62:	c6 01       	movw	r24, r12
   15e64:	0e 94 d2 ad 	call	0x15ba4	; 0x15ba4 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   15e68:	e4 96       	adiw	r28, 0x34	; 52
   15e6a:	0f b6       	in	r0, 0x3f	; 63
   15e6c:	f8 94       	cli
   15e6e:	de bf       	out	0x3e, r29	; 62
   15e70:	0f be       	out	0x3f, r0	; 63
   15e72:	cd bf       	out	0x3d, r28	; 61
   15e74:	df 91       	pop	r29
   15e76:	cf 91       	pop	r28
   15e78:	0f 91       	pop	r16
   15e7a:	ef 90       	pop	r14
   15e7c:	df 90       	pop	r13
   15e7e:	cf 90       	pop	r12
   15e80:	08 95       	ret

00015e82 <send_mqtt_status(PubSubClient*)>:
_Z16send_mqtt_statusP12PubSubClient():
   15e82:	cf 92       	push	r12
   15e84:	df 92       	push	r13
   15e86:	ef 92       	push	r14
   15e88:	0f 93       	push	r16
   15e8a:	cf 93       	push	r28
   15e8c:	df 93       	push	r29
   15e8e:	cd b7       	in	r28, 0x3d	; 61
   15e90:	de b7       	in	r29, 0x3e	; 62
   15e92:	c0 58       	subi	r28, 0x80	; 128
   15e94:	d1 09       	sbc	r29, r1
   15e96:	0f b6       	in	r0, 0x3f	; 63
   15e98:	f8 94       	cli
   15e9a:	de bf       	out	0x3e, r29	; 62
   15e9c:	0f be       	out	0x3f, r0	; 63
   15e9e:	cd bf       	out	0x3d, r28	; 61
   15ea0:	6c 01       	movw	r12, r24
   15ea2:	62 e4       	ldi	r22, 0x42	; 66
   15ea4:	77 e8       	ldi	r23, 0x87	; 135
   15ea6:	ce 01       	movw	r24, r28
   15ea8:	8f 5b       	subi	r24, 0xBF	; 191
   15eaa:	9f 4f       	sbci	r25, 0xFF	; 255
   15eac:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
itoa():
   15eb0:	4a e0       	ldi	r20, 0x0A	; 10
   15eb2:	be 01       	movw	r22, r28
   15eb4:	6f 5f       	subi	r22, 0xFF	; 255
   15eb6:	7f 4f       	sbci	r23, 0xFF	; 255
   15eb8:	80 91 b4 0f 	lds	r24, 0x0FB4	; 0x800fb4 <mqtt_send_message>
   15ebc:	90 91 b5 0f 	lds	r25, 0x0FB5	; 0x800fb5 <mqtt_send_message+0x1>
   15ec0:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z16send_mqtt_statusP12PubSubClient():
   15ec4:	10 92 b5 0f 	sts	0x0FB5, r1	; 0x800fb5 <mqtt_send_message+0x1>
   15ec8:	10 92 b4 0f 	sts	0x0FB4, r1	; 0x800fb4 <mqtt_send_message>
   15ecc:	ae 01       	movw	r20, r28
   15ece:	4f 5f       	subi	r20, 0xFF	; 255
   15ed0:	5f 4f       	sbci	r21, 0xFF	; 255
   15ed2:	be 01       	movw	r22, r28
   15ed4:	6f 5b       	subi	r22, 0xBF	; 191
   15ed6:	7f 4f       	sbci	r23, 0xFF	; 255
   15ed8:	c6 01       	movw	r24, r12
   15eda:	0e 94 d2 ad 	call	0x15ba4	; 0x15ba4 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   15ede:	60 e3       	ldi	r22, 0x30	; 48
   15ee0:	77 e8       	ldi	r23, 0x87	; 135
   15ee2:	ce 01       	movw	r24, r28
   15ee4:	8f 5b       	subi	r24, 0xBF	; 191
   15ee6:	9f 4f       	sbci	r25, 0xFF	; 255
   15ee8:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
itoa():
   15eec:	4a e0       	ldi	r20, 0x0A	; 10
   15eee:	be 01       	movw	r22, r28
   15ef0:	6f 5f       	subi	r22, 0xFF	; 255
   15ef2:	7f 4f       	sbci	r23, 0xFF	; 255
   15ef4:	80 91 08 10 	lds	r24, 0x1008	; 0x801008 <mqtt_error>
   15ef8:	90 91 09 10 	lds	r25, 0x1009	; 0x801009 <mqtt_error+0x1>
   15efc:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z16send_mqtt_statusP12PubSubClient():
   15f00:	ae 01       	movw	r20, r28
   15f02:	4f 5f       	subi	r20, 0xFF	; 255
   15f04:	5f 4f       	sbci	r21, 0xFF	; 255
   15f06:	be 01       	movw	r22, r28
   15f08:	6f 5b       	subi	r22, 0xBF	; 191
   15f0a:	7f 4f       	sbci	r23, 0xFF	; 255
   15f0c:	c6 01       	movw	r24, r12
   15f0e:	0e 94 d2 ad 	call	0x15ba4	; 0x15ba4 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   15f12:	6c e1       	ldi	r22, 0x1C	; 28
   15f14:	77 e8       	ldi	r23, 0x87	; 135
   15f16:	ce 01       	movw	r24, r28
   15f18:	8f 5b       	subi	r24, 0xBF	; 191
   15f1a:	9f 4f       	sbci	r25, 0xFF	; 255
   15f1c:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
itoa():
   15f20:	4a e0       	ldi	r20, 0x0A	; 10
   15f22:	be 01       	movw	r22, r28
   15f24:	6f 5f       	subi	r22, 0xFF	; 255
   15f26:	7f 4f       	sbci	r23, 0xFF	; 255
   15f28:	80 91 b0 0f 	lds	r24, 0x0FB0	; 0x800fb0 <mqtt_receive_message>
   15f2c:	90 91 b1 0f 	lds	r25, 0x0FB1	; 0x800fb1 <mqtt_receive_message+0x1>
   15f30:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z16send_mqtt_statusP12PubSubClient():
   15f34:	10 92 b1 0f 	sts	0x0FB1, r1	; 0x800fb1 <mqtt_receive_message+0x1>
   15f38:	10 92 b0 0f 	sts	0x0FB0, r1	; 0x800fb0 <mqtt_receive_message>
   15f3c:	ae 01       	movw	r20, r28
   15f3e:	4f 5f       	subi	r20, 0xFF	; 255
   15f40:	5f 4f       	sbci	r21, 0xFF	; 255
   15f42:	be 01       	movw	r22, r28
   15f44:	6f 5b       	subi	r22, 0xBF	; 191
   15f46:	7f 4f       	sbci	r23, 0xFF	; 255
   15f48:	c6 01       	movw	r24, r12
   15f4a:	0e 94 d2 ad 	call	0x15ba4	; 0x15ba4 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   15f4e:	68 e0       	ldi	r22, 0x08	; 8
   15f50:	77 e8       	ldi	r23, 0x87	; 135
   15f52:	ce 01       	movw	r24, r28
   15f54:	8f 5b       	subi	r24, 0xBF	; 191
   15f56:	9f 4f       	sbci	r25, 0xFF	; 255
   15f58:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
itoa():
   15f5c:	4a e0       	ldi	r20, 0x0A	; 10
   15f5e:	be 01       	movw	r22, r28
   15f60:	6f 5f       	subi	r22, 0xFF	; 255
   15f62:	7f 4f       	sbci	r23, 0xFF	; 255
   15f64:	80 91 ae 0f 	lds	r24, 0x0FAE	; 0x800fae <mqtt_process_message>
   15f68:	90 91 af 0f 	lds	r25, 0x0FAF	; 0x800faf <mqtt_process_message+0x1>
   15f6c:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z16send_mqtt_statusP12PubSubClient():
   15f70:	10 92 af 0f 	sts	0x0FAF, r1	; 0x800faf <mqtt_process_message+0x1>
   15f74:	10 92 ae 0f 	sts	0x0FAE, r1	; 0x800fae <mqtt_process_message>
   15f78:	ae 01       	movw	r20, r28
   15f7a:	4f 5f       	subi	r20, 0xFF	; 255
   15f7c:	5f 4f       	sbci	r21, 0xFF	; 255
   15f7e:	be 01       	movw	r22, r28
   15f80:	6f 5b       	subi	r22, 0xBF	; 191
   15f82:	7f 4f       	sbci	r23, 0xFF	; 255
   15f84:	c6 01       	movw	r24, r12
   15f86:	0e 94 d2 ad 	call	0x15ba4	; 0x15ba4 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   15f8a:	19 82       	std	Y+1, r1	; 0x01
   15f8c:	ee 24       	eor	r14, r14
   15f8e:	e3 94       	inc	r14
   15f90:	0a e0       	ldi	r16, 0x0A	; 10
   15f92:	24 e0       	ldi	r18, 0x04	; 4
   15f94:	4c eb       	ldi	r20, 0xBC	; 188
   15f96:	5f e0       	ldi	r21, 0x0F	; 15
   15f98:	6e e2       	ldi	r22, 0x2E	; 46
   15f9a:	ce 01       	movw	r24, r28
   15f9c:	01 96       	adiw	r24, 0x01	; 1
   15f9e:	0e 94 e9 e4 	call	0x1c9d2	; 0x1c9d2 <createString(char*, char, unsigned char*, unsigned char, unsigned char, unsigned char)>
   15fa2:	6d ef       	ldi	r22, 0xFD	; 253
   15fa4:	76 e8       	ldi	r23, 0x86	; 134
   15fa6:	ce 01       	movw	r24, r28
   15fa8:	8f 5b       	subi	r24, 0xBF	; 191
   15faa:	9f 4f       	sbci	r25, 0xFF	; 255
   15fac:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
   15fb0:	ae 01       	movw	r20, r28
   15fb2:	4f 5f       	subi	r20, 0xFF	; 255
   15fb4:	5f 4f       	sbci	r21, 0xFF	; 255
   15fb6:	be 01       	movw	r22, r28
   15fb8:	6f 5b       	subi	r22, 0xBF	; 191
   15fba:	7f 4f       	sbci	r23, 0xFF	; 255
   15fbc:	c6 01       	movw	r24, r12
   15fbe:	0e 94 d2 ad 	call	0x15ba4	; 0x15ba4 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   15fc2:	6c ed       	ldi	r22, 0xDC	; 220
   15fc4:	76 e8       	ldi	r23, 0x86	; 134
   15fc6:	ce 01       	movw	r24, r28
   15fc8:	8f 5b       	subi	r24, 0xBF	; 191
   15fca:	9f 4f       	sbci	r25, 0xFF	; 255
   15fcc:	0f 94 22 1a 	call	0x23444	; 0x23444 <strcpy_P>
   15fd0:	80 91 ad 0f 	lds	r24, 0x0FAD	; 0x800fad <count_know_mqtt>
itoa():
   15fd4:	4a e0       	ldi	r20, 0x0A	; 10
   15fd6:	be 01       	movw	r22, r28
   15fd8:	6f 5f       	subi	r22, 0xFF	; 255
   15fda:	7f 4f       	sbci	r23, 0xFF	; 255
   15fdc:	90 e0       	ldi	r25, 0x00	; 0
   15fde:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z16send_mqtt_statusP12PubSubClient():
   15fe2:	ae 01       	movw	r20, r28
   15fe4:	4f 5f       	subi	r20, 0xFF	; 255
   15fe6:	5f 4f       	sbci	r21, 0xFF	; 255
   15fe8:	be 01       	movw	r22, r28
   15fea:	6f 5b       	subi	r22, 0xBF	; 191
   15fec:	7f 4f       	sbci	r23, 0xFF	; 255
   15fee:	c6 01       	movw	r24, r12
   15ff0:	0e 94 d2 ad 	call	0x15ba4	; 0x15ba4 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   15ff4:	c0 58       	subi	r28, 0x80	; 128
   15ff6:	df 4f       	sbci	r29, 0xFF	; 255
   15ff8:	0f b6       	in	r0, 0x3f	; 63
   15ffa:	f8 94       	cli
   15ffc:	de bf       	out	0x3e, r29	; 62
   15ffe:	0f be       	out	0x3f, r0	; 63
   16000:	cd bf       	out	0x3d, r28	; 61
   16002:	df 91       	pop	r29
   16004:	cf 91       	pop	r28
   16006:	0f 91       	pop	r16
   16008:	ef 90       	pop	r14
   1600a:	df 90       	pop	r13
   1600c:	cf 90       	pop	r12
   1600e:	08 95       	ret

00016010 <know_mqtt_create_or_update(char*, unsigned char)>:
_Z26know_mqtt_create_or_updatePch():
   16010:	08 95       	ret

00016012 <ntp_update(NTPClient*, RTC_DS1307*, unsigned char, DateTime*)>:
_Z10ntp_updateP9NTPClientP10RTC_DS1307hP8DateTime():
   16012:	8f 92       	push	r8
   16014:	9f 92       	push	r9
   16016:	af 92       	push	r10
   16018:	bf 92       	push	r11
   1601a:	cf 92       	push	r12
   1601c:	ef 92       	push	r14
   1601e:	ff 92       	push	r15
   16020:	0f 93       	push	r16
   16022:	1f 93       	push	r17
   16024:	cf 93       	push	r28
   16026:	df 93       	push	r29
   16028:	cd b7       	in	r28, 0x3d	; 61
   1602a:	de b7       	in	r29, 0x3e	; 62
   1602c:	6b 97       	sbiw	r28, 0x1b	; 27
   1602e:	0f b6       	in	r0, 0x3f	; 63
   16030:	f8 94       	cli
   16032:	de bf       	out	0x3e, r29	; 62
   16034:	0f be       	out	0x3f, r0	; 63
   16036:	cd bf       	out	0x3d, r28	; 61
   16038:	5c 01       	movw	r10, r24
   1603a:	14 2f       	mov	r17, r20
   1603c:	49 01       	movw	r8, r18
   1603e:	19 82       	std	Y+1, r1	; 0x01
   16040:	ee 24       	eor	r14, r14
   16042:	e3 94       	inc	r14
   16044:	0a e0       	ldi	r16, 0x0A	; 10
   16046:	24 e0       	ldi	r18, 0x04	; 4
   16048:	44 e0       	ldi	r20, 0x04	; 4
   1604a:	50 e1       	ldi	r21, 0x10	; 16
   1604c:	6e e2       	ldi	r22, 0x2E	; 46
   1604e:	ce 01       	movw	r24, r28
   16050:	01 96       	adiw	r24, 0x01	; 1
   16052:	0e 94 e9 e4 	call	0x1c9d2	; 0x1c9d2 <createString(char*, char, unsigned char*, unsigned char, unsigned char, unsigned char)>
   16056:	c5 01       	movw	r24, r10
   16058:	0f 94 52 0c 	call	0x218a4	; 0x218a4 <NTPClient::begin()>
   1605c:	80 e1       	ldi	r24, 0x10	; 16
   1605e:	9e e0       	ldi	r25, 0x0E	; 14
   16060:	18 9f       	mul	r17, r24
   16062:	b0 01       	movw	r22, r0
   16064:	19 9f       	mul	r17, r25
   16066:	70 0d       	add	r23, r0
   16068:	11 24       	eor	r1, r1
   1606a:	c5 01       	movw	r24, r10
   1606c:	0f 94 19 0d 	call	0x21a32	; 0x21a32 <NTPClient::setTimeOffset(int)>
   16070:	be 01       	movw	r22, r28
   16072:	6f 5f       	subi	r22, 0xFF	; 255
   16074:	7f 4f       	sbci	r23, 0xFF	; 255
   16076:	c5 01       	movw	r24, r10
   16078:	0f 94 23 0d 	call	0x21a46	; 0x21a46 <NTPClient::setPoolServerName(char const*)>
   1607c:	c5 01       	movw	r24, r10
   1607e:	0f 94 da 0d 	call	0x21bb4	; 0x21bb4 <NTPClient::update()>
   16082:	10 e0       	ldi	r17, 0x00	; 0
   16084:	88 23       	and	r24, r24
   16086:	79 f1       	breq	.+94     	; 0x160e6 <ntp_update(NTPClient*, RTC_DS1307*, unsigned char, DateTime*)+0xd4>
   16088:	c5 01       	movw	r24, r10
   1608a:	0f 94 ff 0c 	call	0x219fe	; 0x219fe <NTPClient::getSeconds() const>
   1608e:	c8 2e       	mov	r12, r24
   16090:	c5 01       	movw	r24, r10
   16092:	0f 94 ef 0c 	call	0x219de	; 0x219de <NTPClient::getMinutes() const>
   16096:	e8 2e       	mov	r14, r24
   16098:	c5 01       	movw	r24, r10
   1609a:	0f 94 df 0c 	call	0x219be	; 0x219be <NTPClient::getHours() const>
   1609e:	08 2f       	mov	r16, r24
   160a0:	c5 01       	movw	r24, r10
   160a2:	0f 94 c3 0c 	call	0x21986	; 0x21986 <NTPClient::getDate() const>
   160a6:	f8 2e       	mov	r15, r24
   160a8:	c5 01       	movw	r24, r10
   160aa:	0f 94 a6 0c 	call	0x2194c	; 0x2194c <NTPClient::getMonth() const>
   160ae:	18 2f       	mov	r17, r24
   160b0:	c5 01       	movw	r24, r10
   160b2:	0f 94 8a 0c 	call	0x21914	; 0x21914 <NTPClient::getYear() const>
   160b6:	2f 2d       	mov	r18, r15
   160b8:	41 2f       	mov	r20, r17
   160ba:	bc 01       	movw	r22, r24
   160bc:	ce 01       	movw	r24, r28
   160be:	45 96       	adiw	r24, 0x15	; 21
   160c0:	0e 94 16 e6 	call	0x1cc2c	; 0x1cc2c <DateTime::DateTime(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
   160c4:	ce 01       	movw	r24, r28
   160c6:	45 96       	adiw	r24, 0x15	; 21
   160c8:	0e 94 e7 e6 	call	0x1cdce	; 0x1cdce <RTC_DS1307::adjust(DateTime const&)>
   160cc:	ce 01       	movw	r24, r28
   160ce:	45 96       	adiw	r24, 0x15	; 21
   160d0:	0e 94 77 e7 	call	0x1ceee	; 0x1ceee <RTC_DS1307::now()>
   160d4:	87 e0       	ldi	r24, 0x07	; 7
   160d6:	fe 01       	movw	r30, r28
   160d8:	75 96       	adiw	r30, 0x15	; 21
   160da:	d4 01       	movw	r26, r8
   160dc:	01 90       	ld	r0, Z+
   160de:	0d 92       	st	X+, r0
   160e0:	8a 95       	dec	r24
   160e2:	e1 f7       	brne	.-8      	; 0x160dc <ntp_update(NTPClient*, RTC_DS1307*, unsigned char, DateTime*)+0xca>
   160e4:	11 e0       	ldi	r17, 0x01	; 1
   160e6:	c5 01       	movw	r24, r10
   160e8:	0f 94 09 0d 	call	0x21a12	; 0x21a12 <NTPClient::end()>
   160ec:	81 2f       	mov	r24, r17
   160ee:	6b 96       	adiw	r28, 0x1b	; 27
   160f0:	0f b6       	in	r0, 0x3f	; 63
   160f2:	f8 94       	cli
   160f4:	de bf       	out	0x3e, r29	; 62
   160f6:	0f be       	out	0x3f, r0	; 63
   160f8:	cd bf       	out	0x3d, r28	; 61
   160fa:	df 91       	pop	r29
   160fc:	cf 91       	pop	r28
   160fe:	1f 91       	pop	r17
   16100:	0f 91       	pop	r16
   16102:	ff 90       	pop	r15
   16104:	ef 90       	pop	r14
   16106:	cf 90       	pop	r12
   16108:	bf 90       	pop	r11
   1610a:	af 90       	pop	r10
   1610c:	9f 90       	pop	r9
   1610e:	8f 90       	pop	r8
   16110:	08 95       	ret

00016112 <printf_via_mqtt(char, __file*)>:
_Z15printf_via_mqttcP6__file():
   16112:	cf 93       	push	r28
   16114:	df 93       	push	r29
   16116:	cd b7       	in	r28, 0x3d	; 61
   16118:	de b7       	in	r29, 0x3e	; 62
   1611a:	60 97       	sbiw	r28, 0x10	; 16
   1611c:	0f b6       	in	r0, 0x3f	; 63
   1611e:	f8 94       	cli
   16120:	de bf       	out	0x3e, r29	; 62
   16122:	0f be       	out	0x3f, r0	; 63
   16124:	cd bf       	out	0x3d, r28	; 61
   16126:	90 91 ac 0f 	lds	r25, 0x0FAC	; 0x800fac <mqtt_log_cnt>
   1612a:	e9 2f       	mov	r30, r25
   1612c:	f0 e0       	ldi	r31, 0x00	; 0
   1612e:	e4 5d       	subi	r30, 0xD4	; 212
   16130:	f0 4f       	sbci	r31, 0xF0	; 240
   16132:	80 83       	st	Z, r24
   16134:	11 82       	std	Z+1, r1	; 0x01
   16136:	9f 5f       	subi	r25, 0xFF	; 255
   16138:	90 93 ac 0f 	sts	0x0FAC, r25	; 0x800fac <mqtt_log_cnt>
   1613c:	97 fd       	sbrc	r25, 7
   1613e:	04 c0       	rjmp	.+8      	; 0x16148 <printf_via_mqtt(char, __file*)+0x36>
   16140:	8a 30       	cpi	r24, 0x0A	; 10
   16142:	11 f0       	breq	.+4      	; 0x16148 <printf_via_mqtt(char, __file*)+0x36>
   16144:	81 11       	cpse	r24, r1
   16146:	13 c0       	rjmp	.+38     	; 0x1616e <printf_via_mqtt(char, __file*)+0x5c>
   16148:	6a ee       	ldi	r22, 0xEA	; 234
   1614a:	78 e0       	ldi	r23, 0x08	; 8
   1614c:	ce 01       	movw	r24, r28
   1614e:	01 96       	adiw	r24, 0x01	; 1
   16150:	0f 94 67 1a 	call	0x234ce	; 0x234ce <strcpy>
   16154:	4c e2       	ldi	r20, 0x2C	; 44
   16156:	5f e0       	ldi	r21, 0x0F	; 15
   16158:	be 01       	movw	r22, r28
   1615a:	6f 5f       	subi	r22, 0xFF	; 255
   1615c:	7f 4f       	sbci	r23, 0xFF	; 255
   1615e:	80 91 2a 0f 	lds	r24, 0x0F2A	; 0x800f2a <pub_mqtt_client>
   16162:	90 91 2b 0f 	lds	r25, 0x0F2B	; 0x800f2b <pub_mqtt_client+0x1>
   16166:	0e 94 d2 ad 	call	0x15ba4	; 0x15ba4 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   1616a:	10 92 ac 0f 	sts	0x0FAC, r1	; 0x800fac <mqtt_log_cnt>
   1616e:	60 96       	adiw	r28, 0x10	; 16
   16170:	0f b6       	in	r0, 0x3f	; 63
   16172:	f8 94       	cli
   16174:	de bf       	out	0x3e, r29	; 62
   16176:	0f be       	out	0x3f, r0	; 63
   16178:	cd bf       	out	0x3d, r28	; 61
   1617a:	df 91       	pop	r29
   1617c:	cf 91       	pop	r28
   1617e:	08 95       	ret

00016180 <log_error(PubSubClient*, char*)>:
_Z9log_errorP12PubSubClientPc():
   16180:	ef 92       	push	r14
   16182:	ff 92       	push	r15
   16184:	0f 93       	push	r16
   16186:	1f 93       	push	r17
   16188:	cf 93       	push	r28
   1618a:	df 93       	push	r29
   1618c:	00 d0       	rcall	.+0      	; 0x1618e <log_error(PubSubClient*, char*)+0xe>
   1618e:	00 d0       	rcall	.+0      	; 0x16190 <log_error(PubSubClient*, char*)+0x10>
   16190:	00 d0       	rcall	.+0      	; 0x16192 <log_error(PubSubClient*, char*)+0x12>
   16192:	cd b7       	in	r28, 0x3d	; 61
   16194:	de b7       	in	r29, 0x3e	; 62
   16196:	8c 01       	movw	r16, r24
   16198:	7b 01       	movw	r14, r22
   1619a:	65 ef       	ldi	r22, 0xF5	; 245
   1619c:	78 e0       	ldi	r23, 0x08	; 8
   1619e:	ce 01       	movw	r24, r28
   161a0:	01 96       	adiw	r24, 0x01	; 1
   161a2:	0f 94 67 1a 	call	0x234ce	; 0x234ce <strcpy>
   161a6:	a7 01       	movw	r20, r14
   161a8:	be 01       	movw	r22, r28
   161aa:	6f 5f       	subi	r22, 0xFF	; 255
   161ac:	7f 4f       	sbci	r23, 0xFF	; 255
   161ae:	c8 01       	movw	r24, r16
   161b0:	0e 94 d2 ad 	call	0x15ba4	; 0x15ba4 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   161b4:	29 96       	adiw	r28, 0x09	; 9
   161b6:	0f b6       	in	r0, 0x3f	; 63
   161b8:	f8 94       	cli
   161ba:	de bf       	out	0x3e, r29	; 62
   161bc:	0f be       	out	0x3f, r0	; 63
   161be:	cd bf       	out	0x3d, r28	; 61
   161c0:	df 91       	pop	r29
   161c2:	cf 91       	pop	r28
   161c4:	1f 91       	pop	r17
   161c6:	0f 91       	pop	r16
   161c8:	ff 90       	pop	r15
   161ca:	ef 90       	pop	r14
   161cc:	08 95       	ret

000161ce <mqtt_set_public_mqtt_client(PubSubClient*)>:
_Z27mqtt_set_public_mqtt_clientP12PubSubClient():
   161ce:	90 93 2b 0f 	sts	0x0F2B, r25	; 0x800f2b <pub_mqtt_client+0x1>
   161d2:	80 93 2a 0f 	sts	0x0F2A, r24	; 0x800f2a <pub_mqtt_client>
   161d6:	08 95       	ret

000161d8 <_GLOBAL__sub_I_mqtt_error>:
_GLOBAL__sub_I_mqtt_error():
   161d8:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
   161da:	00 e0       	ldi	r16, 0x00	; 0
   161dc:	20 e0       	ldi	r18, 0x00	; 0
   161de:	40 e0       	ldi	r20, 0x00	; 0
   161e0:	60 e0       	ldi	r22, 0x00	; 0
   161e2:	8a e0       	ldi	r24, 0x0A	; 10
   161e4:	90 e1       	ldi	r25, 0x10	; 16
   161e6:	0f 94 7a 12 	call	0x224f4	; 0x224f4 <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_ZN16struct_my_deviceC4Ev():
/tmp/arduino_build_131566/sketch/saric_mqtt_network.h:55
#define TYPE_THERMCTL 1
#define TYPE_TERMBIG 2
#define TYPE_BRANA 3
#define TYPE_MASTER 4

typedef struct struct_my_device
   161ea:	8b e5       	ldi	r24, 0x5B	; 91
   161ec:	97 e0       	ldi	r25, 0x07	; 7
   161ee:	90 93 db 0f 	sts	0x0FDB, r25	; 0x800fdb <device+0x25>
   161f2:	80 93 da 0f 	sts	0x0FDA, r24	; 0x800fda <device+0x24>
_GLOBAL__sub_I_mqtt_error():
/tmp/arduino_build_131566/sketch/saric_mqtt_network.cpp:497
   161f6:	0f 91       	pop	r16
   161f8:	08 95       	ret

000161fa <nrf_save_channel(unsigned char)>:
_ZN5EERefaSEh():
/tmp/arduino_build_131566/sketch/saric_nrf.cpp:109
  unijon.m.nodeid = nrf_message->nodeid;
  unijon.m.mode = nrf_message->mode;
  for (uint8_t idx = 0; idx < 16; idx++)
    unijon.m.data[idx] = nrf_message->data[idx];
  memcpy(data, unijon.d, 18);
}
   161fa:	68 2f       	mov	r22, r24
   161fc:	86 e8       	ldi	r24, 0x86	; 134
   161fe:	96 e0       	ldi	r25, 0x06	; 6
   16200:	0d 94 76 22 	jmp	0x244ec	; 0x244ec <eeprom_write_byte>

00016204 <nrf_load_channel()>:
_ZNK5EERefdeEv():
   16204:	86 e8       	ldi	r24, 0x86	; 134
   16206:	96 e0       	ldi	r25, 0x06	; 6
   16208:	0d 94 6e 22 	jmp	0x244dc	; 0x244dc <eeprom_read_byte>

0001620c <nrf_save_power(rf24_pa_dbm_e)>:
_ZN5EERefaSEh():
   1620c:	68 2f       	mov	r22, r24
   1620e:	87 e8       	ldi	r24, 0x87	; 135
   16210:	96 e0       	ldi	r25, 0x06	; 6
   16212:	0d 94 76 22 	jmp	0x244ec	; 0x244ec <eeprom_write_byte>

00016216 <nrf_load_power()>:
_ZNK5EERefdeEv():
   16216:	87 e8       	ldi	r24, 0x87	; 135
   16218:	96 e0       	ldi	r25, 0x06	; 6
   1621a:	0f 94 6e 22 	call	0x244dc	; 0x244dc <eeprom_read_byte>
_Z14nrf_load_powerv():
   1621e:	90 e0       	ldi	r25, 0x00	; 0
   16220:	08 95       	ret

00016222 <start_scan_rf_network(RF24*)>:
_Z21start_scan_rf_networkP4RF24():
   16222:	1f 93       	push	r17
   16224:	cf 93       	push	r28
   16226:	df 93       	push	r29
   16228:	ec 01       	movw	r28, r24
   1622a:	81 e0       	ldi	r24, 0x01	; 1
   1622c:	80 93 92 10 	sts	0x1092, r24	; 0x801092 <scan_rf_net_enable>
   16230:	10 92 91 10 	sts	0x1091, r1	; 0x801091 <scan_rf_net_channel>
   16234:	10 92 90 10 	sts	0x1090, r1	; 0x801090 <nrf_scan_check_cnt>
   16238:	e0 e1       	ldi	r30, 0x10	; 16
   1623a:	f0 e1       	ldi	r31, 0x10	; 16
   1623c:	80 e0       	ldi	r24, 0x00	; 0
   1623e:	11 92       	st	Z+, r1
   16240:	8f 5f       	subi	r24, 0xFF	; 255
   16242:	80 38       	cpi	r24, 0x80	; 128
   16244:	e1 f7       	brne	.-8      	; 0x1623e <start_scan_rf_network(RF24*)+0x1c>
   16246:	ce 01       	movw	r24, r28
   16248:	0e 94 9c f8 	call	0x1f138	; 0x1f138 <RF24::begin()>
   1624c:	ce 01       	movw	r24, r28
   1624e:	0e 94 fc f7 	call	0x1eff8	; 0x1eff8 <RF24::enableAckPayload()>
   16252:	ce 01       	movw	r24, r28
   16254:	0e 94 e1 f7 	call	0x1efc2	; 0x1efc2 <RF24::enableDynamicPayloads()>
   16258:	ce 01       	movw	r24, r28
   1625a:	0e 94 9b f7 	call	0x1ef36	; 0x1ef36 <RF24::startListening()>
   1625e:	ce 01       	movw	r24, r28
   16260:	0e 94 a2 f5 	call	0x1eb44	; 0x1eb44 <RF24::stopListening()>
   16264:	11 e0       	ldi	r17, 0x01	; 1
   16266:	61 2f       	mov	r22, r17
   16268:	ce 01       	movw	r24, r28
   1626a:	0e 94 7e f7 	call	0x1eefc	; 0x1eefc <RF24::closeReadingPipe(unsigned char)>
   1626e:	1f 5f       	subi	r17, 0xFF	; 255
   16270:	16 30       	cpi	r17, 0x06	; 6
   16272:	c9 f7       	brne	.-14     	; 0x16266 <start_scan_rf_network(RF24*)+0x44>
   16274:	df 91       	pop	r29
   16276:	cf 91       	pop	r28
   16278:	1f 91       	pop	r17
   1627a:	08 95       	ret

0001627c <scan_rf_network(RF24*, unsigned char)>:
_Z15scan_rf_networkP4RF24h():
   1627c:	0f 93       	push	r16
   1627e:	1f 93       	push	r17
   16280:	cf 93       	push	r28
   16282:	67 fd       	sbrc	r22, 7
   16284:	1a c0       	rjmp	.+52     	; 0x162ba <scan_rf_network(RF24*, unsigned char)+0x3e>
   16286:	c6 2f       	mov	r28, r22
   16288:	8c 01       	movw	r16, r24
   1628a:	0e 94 9b f5 	call	0x1eb36	; 0x1eb36 <RF24::setChannel(unsigned char)>
   1628e:	c8 01       	movw	r24, r16
   16290:	0e 94 9b f7 	call	0x1ef36	; 0x1ef36 <RF24::startListening()>
   16294:	80 e8       	ldi	r24, 0x80	; 128
   16296:	90 e0       	ldi	r25, 0x00	; 0
   16298:	0f 94 6c 0f 	call	0x21ed8	; 0x21ed8 <delayMicroseconds>
   1629c:	c8 01       	movw	r24, r16
   1629e:	0e 94 a2 f5 	call	0x1eb44	; 0x1eb44 <RF24::stopListening()>
   162a2:	c8 01       	movw	r24, r16
   162a4:	0e 94 3d f8 	call	0x1f07a	; 0x1f07a <RF24::testCarrier()>
   162a8:	88 23       	and	r24, r24
   162aa:	39 f0       	breq	.+14     	; 0x162ba <scan_rf_network(RF24*, unsigned char)+0x3e>
   162ac:	ec 2f       	mov	r30, r28
   162ae:	f0 e0       	ldi	r31, 0x00	; 0
   162b0:	e0 5f       	subi	r30, 0xF0	; 240
   162b2:	ff 4e       	sbci	r31, 0xEF	; 239
   162b4:	80 81       	ld	r24, Z
   162b6:	8f 5f       	subi	r24, 0xFF	; 255
   162b8:	80 83       	st	Z, r24
   162ba:	cf 91       	pop	r28
   162bc:	1f 91       	pop	r17
   162be:	0f 91       	pop	r16
   162c0:	08 95       	ret

000162c2 <stop_scan_rf_network(RF24*)>:
_Z20stop_scan_rf_networkP4RF24():
   162c2:	10 92 92 10 	sts	0x1092, r1	; 0x801092 <scan_rf_net_enable>
   162c6:	10 92 91 10 	sts	0x1091, r1	; 0x801091 <scan_rf_net_channel>
   162ca:	10 92 90 10 	sts	0x1090, r1	; 0x801090 <nrf_scan_check_cnt>
   162ce:	08 95       	ret

000162d0 <scan_rf_network_public(PubSubClient*)>:
_Z22scan_rf_network_publicP12PubSubClient():
   162d0:	8f 92       	push	r8
   162d2:	9f 92       	push	r9
   162d4:	af 92       	push	r10
   162d6:	bf 92       	push	r11
   162d8:	df 92       	push	r13
   162da:	ef 92       	push	r14
   162dc:	ff 92       	push	r15
   162de:	0f 93       	push	r16
   162e0:	1f 93       	push	r17
   162e2:	cf 93       	push	r28
   162e4:	df 93       	push	r29
   162e6:	cd b7       	in	r28, 0x3d	; 61
   162e8:	de b7       	in	r29, 0x3e	; 62
   162ea:	c8 59       	subi	r28, 0x98	; 152
   162ec:	d1 09       	sbc	r29, r1
   162ee:	0f b6       	in	r0, 0x3f	; 63
   162f0:	f8 94       	cli
   162f2:	de bf       	out	0x3e, r29	; 62
   162f4:	0f be       	out	0x3f, r0	; 63
   162f6:	cd bf       	out	0x3d, r28	; 61
   162f8:	4c 01       	movw	r8, r24
   162fa:	6d ef       	ldi	r22, 0xFD	; 253
   162fc:	78 e0       	ldi	r23, 0x08	; 8
   162fe:	ce 01       	movw	r24, r28
   16300:	8f 57       	subi	r24, 0x7F	; 127
   16302:	9f 4f       	sbci	r25, 0xFF	; 255
   16304:	0f 94 67 1a 	call	0x234ce	; 0x234ce <strcpy>
   16308:	90 e1       	ldi	r25, 0x10	; 16
   1630a:	e9 2e       	mov	r14, r25
   1630c:	90 e1       	ldi	r25, 0x10	; 16
   1630e:	f9 2e       	mov	r15, r25
   16310:	10 e0       	ldi	r17, 0x00	; 0
   16312:	00 e0       	ldi	r16, 0x00	; 0
itoa():
   16314:	40 e1       	ldi	r20, 0x10	; 16
   16316:	be 01       	movw	r22, r28
   16318:	6f 56       	subi	r22, 0x6F	; 111
   1631a:	7f 4f       	sbci	r23, 0xFF	; 255
   1631c:	c8 01       	movw	r24, r16
   1631e:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z22scan_rf_network_publicP12PubSubClient():
   16322:	65 e0       	ldi	r22, 0x05	; 5
   16324:	79 e0       	ldi	r23, 0x09	; 9
   16326:	ce 01       	movw	r24, r28
   16328:	01 96       	adiw	r24, 0x01	; 1
   1632a:	0f 94 67 1a 	call	0x234ce	; 0x234ce <strcpy>
   1632e:	be 01       	movw	r22, r28
   16330:	6f 56       	subi	r22, 0x6F	; 111
   16332:	7f 4f       	sbci	r23, 0xFF	; 255
   16334:	ce 01       	movw	r24, r28
   16336:	01 96       	adiw	r24, 0x01	; 1
   16338:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
   1633c:	68 e0       	ldi	r22, 0x08	; 8
   1633e:	79 e0       	ldi	r23, 0x09	; 9
   16340:	ce 01       	movw	r24, r28
   16342:	01 96       	adiw	r24, 0x01	; 1
   16344:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
   16348:	57 01       	movw	r10, r14
   1634a:	80 e1       	ldi	r24, 0x10	; 16
   1634c:	d8 2e       	mov	r13, r24
   1634e:	f5 01       	movw	r30, r10
   16350:	81 91       	ld	r24, Z+
   16352:	5f 01       	movw	r10, r30
itoa():
   16354:	4a e0       	ldi	r20, 0x0A	; 10
   16356:	be 01       	movw	r22, r28
   16358:	6f 56       	subi	r22, 0x6F	; 111
   1635a:	7f 4f       	sbci	r23, 0xFF	; 255
   1635c:	90 e0       	ldi	r25, 0x00	; 0
   1635e:	0f 94 c8 1a 	call	0x23590	; 0x23590 <__itoa_ncheck>
_Z22scan_rf_network_publicP12PubSubClient():
   16362:	be 01       	movw	r22, r28
   16364:	6f 56       	subi	r22, 0x6F	; 111
   16366:	7f 4f       	sbci	r23, 0xFF	; 255
   16368:	ce 01       	movw	r24, r28
   1636a:	01 96       	adiw	r24, 0x01	; 1
   1636c:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
   16370:	61 e9       	ldi	r22, 0x91	; 145
   16372:	78 e0       	ldi	r23, 0x08	; 8
   16374:	ce 01       	movw	r24, r28
   16376:	01 96       	adiw	r24, 0x01	; 1
   16378:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
   1637c:	da 94       	dec	r13
   1637e:	d1 10       	cpse	r13, r1
   16380:	e6 cf       	rjmp	.-52     	; 0x1634e <scan_rf_network_public(PubSubClient*)+0x7e>
   16382:	ae 01       	movw	r20, r28
   16384:	4f 5f       	subi	r20, 0xFF	; 255
   16386:	5f 4f       	sbci	r21, 0xFF	; 255
   16388:	be 01       	movw	r22, r28
   1638a:	6f 57       	subi	r22, 0x7F	; 127
   1638c:	7f 4f       	sbci	r23, 0xFF	; 255
   1638e:	c4 01       	movw	r24, r8
   16390:	0e 94 d2 ad 	call	0x15ba4	; 0x15ba4 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   16394:	0f 5f       	subi	r16, 0xFF	; 255
   16396:	1f 4f       	sbci	r17, 0xFF	; 255
   16398:	ff e0       	ldi	r31, 0x0F	; 15
   1639a:	ef 0e       	add	r14, r31
   1639c:	f1 1c       	adc	r15, r1
   1639e:	08 30       	cpi	r16, 0x08	; 8
   163a0:	11 05       	cpc	r17, r1
   163a2:	09 f0       	breq	.+2      	; 0x163a6 <scan_rf_network_public(PubSubClient*)+0xd6>
   163a4:	b7 cf       	rjmp	.-146    	; 0x16314 <scan_rf_network_public(PubSubClient*)+0x44>
   163a6:	c8 56       	subi	r28, 0x68	; 104
   163a8:	df 4f       	sbci	r29, 0xFF	; 255
   163aa:	0f b6       	in	r0, 0x3f	; 63
   163ac:	f8 94       	cli
   163ae:	de bf       	out	0x3e, r29	; 62
   163b0:	0f be       	out	0x3f, r0	; 63
   163b2:	cd bf       	out	0x3d, r28	; 61
   163b4:	df 91       	pop	r29
   163b6:	cf 91       	pop	r28
   163b8:	1f 91       	pop	r17
   163ba:	0f 91       	pop	r16
   163bc:	ff 90       	pop	r15
   163be:	ef 90       	pop	r14
   163c0:	df 90       	pop	r13
   163c2:	bf 90       	pop	r11
   163c4:	af 90       	pop	r10
   163c6:	9f 90       	pop	r9
   163c8:	8f 90       	pop	r8
   163ca:	08 95       	ret

000163cc <convert_data_to_nrf_message(nrf_message_t*, unsigned char*)>:
_Z27convert_data_to_nrf_messageP13nrf_message_tPh():
/tmp/arduino_build_131566/sketch/saric_nrf.cpp:112

void convert_data_to_nrf_message(nrf_message_t *nrf_message, uint8_t *data)
{
   163cc:	cf 93       	push	r28
   163ce:	df 93       	push	r29
   163d0:	cd b7       	in	r28, 0x3d	; 61
   163d2:	de b7       	in	r29, 0x3e	; 62
   163d4:	62 97       	sbiw	r28, 0x12	; 18
   163d6:	0f b6       	in	r0, 0x3f	; 63
   163d8:	f8 94       	cli
   163da:	de bf       	out	0x3e, r29	; 62
   163dc:	0f be       	out	0x3f, r0	; 63
   163de:	cd bf       	out	0x3d, r28	; 61
/tmp/arduino_build_131566/sketch/saric_nrf.cpp:118
  union {
    uint8_t d[18];
    nrf_message_t m;
  } unijon;

  memcpy(unijon.d, data, 18);
   163e0:	22 e1       	ldi	r18, 0x12	; 18
   163e2:	fb 01       	movw	r30, r22
   163e4:	de 01       	movw	r26, r28
   163e6:	11 96       	adiw	r26, 0x01	; 1
   163e8:	01 90       	ld	r0, Z+
   163ea:	0d 92       	st	X+, r0
   163ec:	2a 95       	dec	r18
   163ee:	e1 f7       	brne	.-8      	; 0x163e8 <convert_data_to_nrf_message(nrf_message_t*, unsigned char*)+0x1c>
   163f0:	fb 01       	movw	r30, r22
   163f2:	30 81       	ld	r19, Z
   163f4:	21 81       	ldd	r18, Z+1	; 0x01
/tmp/arduino_build_131566/sketch/saric_nrf.cpp:119
  nrf_message->nodeid = unijon.m.nodeid;
   163f6:	fc 01       	movw	r30, r24
   163f8:	30 83       	st	Z, r19
/tmp/arduino_build_131566/sketch/saric_nrf.cpp:120
  nrf_message->mode = unijon.m.mode;
   163fa:	21 83       	std	Z+1, r18	; 0x01
   163fc:	de 01       	movw	r26, r28
   163fe:	13 96       	adiw	r26, 0x03	; 3
   16400:	32 96       	adiw	r30, 0x02	; 2
   16402:	42 96       	adiw	r24, 0x12	; 18
/tmp/arduino_build_131566/sketch/saric_nrf.cpp:122 (discriminator 2)
  for (uint8_t idx = 0; idx < 16; idx++)
    nrf_message->data[idx] = unijon.m.data[idx];
   16404:	2d 91       	ld	r18, X+
   16406:	21 93       	st	Z+, r18
/tmp/arduino_build_131566/sketch/saric_nrf.cpp:121 (discriminator 2)
  } unijon;

  memcpy(unijon.d, data, 18);
  nrf_message->nodeid = unijon.m.nodeid;
  nrf_message->mode = unijon.m.mode;
  for (uint8_t idx = 0; idx < 16; idx++)
   16408:	e8 17       	cp	r30, r24
   1640a:	f9 07       	cpc	r31, r25
   1640c:	d9 f7       	brne	.-10     	; 0x16404 <convert_data_to_nrf_message(nrf_message_t*, unsigned char*)+0x38>
/tmp/arduino_build_131566/sketch/saric_nrf.cpp:123
    nrf_message->data[idx] = unijon.m.data[idx];
}
   1640e:	62 96       	adiw	r28, 0x12	; 18
   16410:	0f b6       	in	r0, 0x3f	; 63
   16412:	f8 94       	cli
   16414:	de bf       	out	0x3e, r29	; 62
   16416:	0f be       	out	0x3f, r0	; 63
   16418:	cd bf       	out	0x3d, r28	; 61
   1641a:	df 91       	pop	r29
   1641c:	cf 91       	pop	r28
   1641e:	08 95       	ret

00016420 <_GLOBAL__sub_I_scan_rf_net_enable>:
_GLOBAL__sub_I_scan_rf_net_enable():
   16420:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
   16422:	00 e0       	ldi	r16, 0x00	; 0
   16424:	20 e0       	ldi	r18, 0x00	; 0
   16426:	40 e0       	ldi	r20, 0x00	; 0
   16428:	60 e0       	ldi	r22, 0x00	; 0
   1642a:	83 e9       	ldi	r24, 0x93	; 147
   1642c:	90 e1       	ldi	r25, 0x10	; 16
   1642e:	0f 94 7a 12 	call	0x224f4	; 0x224f4 <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_GLOBAL__sub_I_scan_rf_net_enable():
/tmp/arduino_build_131566/sketch/saric_nrf.cpp:123
   16432:	0f 91       	pop	r16
   16434:	08 95       	ret

00016436 <EEPROMClass::read(int) [clone .isra.0]>:
_ZNK5EERefdeEv():
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:199
}

uint8_t tds_get_idx_from_wrom(uint8_t id)
{
  return w_rom[id].tds_idx;
}
   16436:	0d 94 6e 22 	jmp	0x244dc	; 0x244dc <eeprom_read_byte>

0001643a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>:
_ZN5EERefaSEh():
   1643a:	0d 94 76 22 	jmp	0x244ec	; 0x244ec <eeprom_write_byte>

0001643e <count_use_tds()>:
_Z13count_use_tdsv():
   1643e:	1f 93       	push	r17
   16440:	cf 93       	push	r28
   16442:	df 93       	push	r29
   16444:	c8 ec       	ldi	r28, 0xC8	; 200
   16446:	d0 e0       	ldi	r29, 0x00	; 0
   16448:	10 e0       	ldi	r17, 0x00	; 0
   1644a:	ce 01       	movw	r24, r28
   1644c:	0e 94 1b b2 	call	0x16436	; 0x16436 <EEPROMClass::read(int) [clone .isra.0]>
   16450:	81 30       	cpi	r24, 0x01	; 1
   16452:	09 f4       	brne	.+2      	; 0x16456 <count_use_tds()+0x18>
   16454:	1f 5f       	subi	r17, 0xFF	; 255
   16456:	66 96       	adiw	r28, 0x16	; 22
   16458:	cc 34       	cpi	r28, 0x4C	; 76
   1645a:	81 e0       	ldi	r24, 0x01	; 1
   1645c:	d8 07       	cpc	r29, r24
   1645e:	a9 f7       	brne	.-22     	; 0x1644a <count_use_tds()+0xc>
   16460:	81 2f       	mov	r24, r17
   16462:	df 91       	pop	r29
   16464:	cf 91       	pop	r28
   16466:	1f 91       	pop	r17
   16468:	08 95       	ret

0001646a <tds_used(unsigned char)>:
_Z8tds_usedh():
   1646a:	86 30       	cpi	r24, 0x06	; 6
   1646c:	40 f4       	brcc	.+16     	; 0x1647e <tds_used(unsigned char)+0x14>
   1646e:	26 e1       	ldi	r18, 0x16	; 22
   16470:	82 9f       	mul	r24, r18
   16472:	c0 01       	movw	r24, r0
   16474:	11 24       	eor	r1, r1
   16476:	88 53       	subi	r24, 0x38	; 56
   16478:	9f 4f       	sbci	r25, 0xFF	; 255
   1647a:	0c 94 1b b2 	jmp	0x16436	; 0x16436 <EEPROMClass::read(int) [clone .isra.0]>
   1647e:	08 95       	ret

00016480 <get_tds18s20(unsigned char, struct_DDS18s20*)>:
_Z12get_tds18s20hP15struct_DDS18s20():
   16480:	af 92       	push	r10
   16482:	bf 92       	push	r11
   16484:	cf 92       	push	r12
   16486:	df 92       	push	r13
   16488:	ef 92       	push	r14
   1648a:	ff 92       	push	r15
   1648c:	0f 93       	push	r16
   1648e:	1f 93       	push	r17
   16490:	cf 93       	push	r28
   16492:	df 93       	push	r29
   16494:	86 30       	cpi	r24, 0x06	; 6
   16496:	08 f0       	brcs	.+2      	; 0x1649a <get_tds18s20(unsigned char, struct_DDS18s20*)+0x1a>
   16498:	56 c0       	rjmp	.+172    	; 0x16546 <get_tds18s20(unsigned char, struct_DDS18s20*)+0xc6>
   1649a:	8b 01       	movw	r16, r22
   1649c:	96 e1       	ldi	r25, 0x16	; 22
   1649e:	89 9f       	mul	r24, r25
   164a0:	e0 01       	movw	r28, r0
   164a2:	11 24       	eor	r1, r1
   164a4:	ce 01       	movw	r24, r28
   164a6:	88 53       	subi	r24, 0x38	; 56
   164a8:	9f 4f       	sbci	r25, 0xFF	; 255
   164aa:	0e 94 1b b2 	call	0x16436	; 0x16436 <EEPROMClass::read(int) [clone .isra.0]>
   164ae:	f8 01       	movw	r30, r16
   164b0:	81 93       	st	Z+, r24
   164b2:	6f 01       	movw	r12, r30
   164b4:	7e 01       	movw	r14, r28
   164b6:	f9 ec       	ldi	r31, 0xC9	; 201
   164b8:	ef 0e       	add	r14, r31
   164ba:	f1 1c       	adc	r15, r1
   164bc:	5e 01       	movw	r10, r28
   164be:	81 ed       	ldi	r24, 0xD1	; 209
   164c0:	a8 0e       	add	r10, r24
   164c2:	b1 1c       	adc	r11, r1
   164c4:	c7 01       	movw	r24, r14
   164c6:	0e 94 1b b2 	call	0x16436	; 0x16436 <EEPROMClass::read(int) [clone .isra.0]>
   164ca:	f6 01       	movw	r30, r12
   164cc:	81 93       	st	Z+, r24
   164ce:	6f 01       	movw	r12, r30
   164d0:	c7 01       	movw	r24, r14
   164d2:	0b 96       	adiw	r24, 0x0b	; 11
   164d4:	0e 94 1b b2 	call	0x16436	; 0x16436 <EEPROMClass::read(int) [clone .isra.0]>
   164d8:	f6 01       	movw	r30, r12
   164da:	82 87       	std	Z+10, r24	; 0x0a
   164dc:	ff ef       	ldi	r31, 0xFF	; 255
   164de:	ef 1a       	sub	r14, r31
   164e0:	ff 0a       	sbc	r15, r31
   164e2:	ea 14       	cp	r14, r10
   164e4:	fb 04       	cpc	r15, r11
   164e6:	71 f7       	brne	.-36     	; 0x164c4 <get_tds18s20(unsigned char, struct_DDS18s20*)+0x44>
   164e8:	f8 01       	movw	r30, r16
   164ea:	13 8a       	std	Z+19, r1	; 0x13
   164ec:	c7 01       	movw	r24, r14
   164ee:	0e 94 1b b2 	call	0x16436	; 0x16436 <EEPROMClass::read(int) [clone .isra.0]>
   164f2:	f8 01       	movw	r30, r16
   164f4:	81 87       	std	Z+9, r24	; 0x09
   164f6:	ce 01       	movw	r24, r28
   164f8:	8e 52       	subi	r24, 0x2E	; 46
   164fa:	9f 4f       	sbci	r25, 0xFF	; 255
   164fc:	0e 94 1b b2 	call	0x16436	; 0x16436 <EEPROMClass::read(int) [clone .isra.0]>
   16500:	f8 2e       	mov	r15, r24
   16502:	ce 01       	movw	r24, r28
   16504:	8d 52       	subi	r24, 0x2D	; 45
   16506:	9f 4f       	sbci	r25, 0xFF	; 255
   16508:	0e 94 1b b2 	call	0x16436	; 0x16436 <EEPROMClass::read(int) [clone .isra.0]>
   1650c:	2f 2d       	mov	r18, r15
   1650e:	30 e0       	ldi	r19, 0x00	; 0
   16510:	32 2f       	mov	r19, r18
   16512:	22 27       	eor	r18, r18
   16514:	82 0f       	add	r24, r18
   16516:	93 2f       	mov	r25, r19
   16518:	91 1d       	adc	r25, r1
   1651a:	f8 01       	movw	r30, r16
   1651c:	93 87       	std	Z+11, r25	; 0x0b
   1651e:	82 87       	std	Z+10, r24	; 0x0a
   16520:	ce 01       	movw	r24, r28
   16522:	84 52       	subi	r24, 0x24	; 36
   16524:	9f 4f       	sbci	r25, 0xFF	; 255
   16526:	0e 94 1b b2 	call	0x16436	; 0x16436 <EEPROMClass::read(int) [clone .isra.0]>
   1652a:	f8 01       	movw	r30, r16
   1652c:	84 8b       	std	Z+20, r24	; 0x14
   1652e:	81 e0       	ldi	r24, 0x01	; 1
   16530:	df 91       	pop	r29
   16532:	cf 91       	pop	r28
   16534:	1f 91       	pop	r17
   16536:	0f 91       	pop	r16
   16538:	ff 90       	pop	r15
   1653a:	ef 90       	pop	r14
   1653c:	df 90       	pop	r13
   1653e:	cf 90       	pop	r12
   16540:	bf 90       	pop	r11
   16542:	af 90       	pop	r10
   16544:	08 95       	ret
   16546:	80 e0       	ldi	r24, 0x00	; 0
   16548:	f3 cf       	rjmp	.-26     	; 0x16530 <get_tds18s20(unsigned char, struct_DDS18s20*)+0xb0>

0001654a <set_tds18s20(unsigned char, struct_DDS18s20*)>:
_Z12set_tds18s20hP15struct_DDS18s20():
   1654a:	af 92       	push	r10
   1654c:	bf 92       	push	r11
   1654e:	cf 92       	push	r12
   16550:	df 92       	push	r13
   16552:	ef 92       	push	r14
   16554:	ff 92       	push	r15
   16556:	0f 93       	push	r16
   16558:	1f 93       	push	r17
   1655a:	cf 93       	push	r28
   1655c:	df 93       	push	r29
   1655e:	86 30       	cpi	r24, 0x06	; 6
   16560:	08 f0       	brcs	.+2      	; 0x16564 <set_tds18s20(unsigned char, struct_DDS18s20*)+0x1a>
   16562:	49 c0       	rjmp	.+146    	; 0x165f6 <set_tds18s20(unsigned char, struct_DDS18s20*)+0xac>
   16564:	6b 01       	movw	r12, r22
   16566:	96 e1       	ldi	r25, 0x16	; 22
   16568:	89 9f       	mul	r24, r25
   1656a:	e0 01       	movw	r28, r0
   1656c:	11 24       	eor	r1, r1
   1656e:	f6 01       	movw	r30, r12
   16570:	61 91       	ld	r22, Z+
   16572:	7f 01       	movw	r14, r30
   16574:	ce 01       	movw	r24, r28
   16576:	88 53       	subi	r24, 0x38	; 56
   16578:	9f 4f       	sbci	r25, 0xFF	; 255
   1657a:	0e 94 1d b2 	call	0x1643a	; 0x1643a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   1657e:	8e 01       	movw	r16, r28
   16580:	07 53       	subi	r16, 0x37	; 55
   16582:	1f 4f       	sbci	r17, 0xFF	; 255
   16584:	5e 01       	movw	r10, r28
   16586:	f1 ed       	ldi	r31, 0xD1	; 209
   16588:	af 0e       	add	r10, r31
   1658a:	b1 1c       	adc	r11, r1
   1658c:	f7 01       	movw	r30, r14
   1658e:	61 91       	ld	r22, Z+
   16590:	7f 01       	movw	r14, r30
_ZN5EERefaSEh():
   16592:	c8 01       	movw	r24, r16
   16594:	0f 94 76 22 	call	0x244ec	; 0x244ec <eeprom_write_byte>
   16598:	f7 01       	movw	r30, r14
   1659a:	62 85       	ldd	r22, Z+10	; 0x0a
   1659c:	c8 01       	movw	r24, r16
   1659e:	0b 96       	adiw	r24, 0x0b	; 11
   165a0:	0f 94 76 22 	call	0x244ec	; 0x244ec <eeprom_write_byte>
   165a4:	0f 5f       	subi	r16, 0xFF	; 255
   165a6:	1f 4f       	sbci	r17, 0xFF	; 255
_Z12set_tds18s20hP15struct_DDS18s20():
   165a8:	0a 15       	cp	r16, r10
   165aa:	1b 05       	cpc	r17, r11
   165ac:	79 f7       	brne	.-34     	; 0x1658c <set_tds18s20(unsigned char, struct_DDS18s20*)+0x42>
   165ae:	f6 01       	movw	r30, r12
   165b0:	61 85       	ldd	r22, Z+9	; 0x09
   165b2:	c8 01       	movw	r24, r16
   165b4:	0e 94 1d b2 	call	0x1643a	; 0x1643a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   165b8:	f6 01       	movw	r30, r12
   165ba:	63 85       	ldd	r22, Z+11	; 0x0b
   165bc:	ce 01       	movw	r24, r28
   165be:	8e 52       	subi	r24, 0x2E	; 46
   165c0:	9f 4f       	sbci	r25, 0xFF	; 255
   165c2:	0e 94 1d b2 	call	0x1643a	; 0x1643a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   165c6:	f6 01       	movw	r30, r12
   165c8:	62 85       	ldd	r22, Z+10	; 0x0a
   165ca:	ce 01       	movw	r24, r28
   165cc:	8d 52       	subi	r24, 0x2D	; 45
   165ce:	9f 4f       	sbci	r25, 0xFF	; 255
   165d0:	0e 94 1d b2 	call	0x1643a	; 0x1643a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   165d4:	f6 01       	movw	r30, r12
   165d6:	64 89       	ldd	r22, Z+20	; 0x14
   165d8:	ce 01       	movw	r24, r28
   165da:	84 52       	subi	r24, 0x24	; 36
   165dc:	9f 4f       	sbci	r25, 0xFF	; 255
   165de:	df 91       	pop	r29
   165e0:	cf 91       	pop	r28
   165e2:	1f 91       	pop	r17
   165e4:	0f 91       	pop	r16
   165e6:	ff 90       	pop	r15
   165e8:	ef 90       	pop	r14
   165ea:	df 90       	pop	r13
   165ec:	cf 90       	pop	r12
   165ee:	bf 90       	pop	r11
   165f0:	af 90       	pop	r10
   165f2:	0c 94 1d b2 	jmp	0x1643a	; 0x1643a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   165f6:	df 91       	pop	r29
   165f8:	cf 91       	pop	r28
   165fa:	1f 91       	pop	r17
   165fc:	0f 91       	pop	r16
   165fe:	ff 90       	pop	r15
   16600:	ef 90       	pop	r14
   16602:	df 90       	pop	r13
   16604:	cf 90       	pop	r12
   16606:	bf 90       	pop	r11
   16608:	af 90       	pop	r10
   1660a:	08 95       	ret

0001660c <tds_get_name(unsigned char, char*)>:
_Z12tds_get_namehPc():
   1660c:	0f 93       	push	r16
   1660e:	1f 93       	push	r17
   16610:	cf 93       	push	r28
   16612:	df 93       	push	r29
   16614:	cd b7       	in	r28, 0x3d	; 61
   16616:	de b7       	in	r29, 0x3e	; 62
   16618:	66 97       	sbiw	r28, 0x16	; 22
   1661a:	0f b6       	in	r0, 0x3f	; 63
   1661c:	f8 94       	cli
   1661e:	de bf       	out	0x3e, r29	; 62
   16620:	0f be       	out	0x3f, r0	; 63
   16622:	cd bf       	out	0x3d, r28	; 61
   16624:	8b 01       	movw	r16, r22
   16626:	be 01       	movw	r22, r28
   16628:	6f 5f       	subi	r22, 0xFF	; 255
   1662a:	7f 4f       	sbci	r23, 0xFF	; 255
   1662c:	0e 94 40 b2 	call	0x16480	; 0x16480 <get_tds18s20(unsigned char, struct_DDS18s20*)>
   16630:	be 01       	movw	r22, r28
   16632:	63 5f       	subi	r22, 0xF3	; 243
   16634:	7f 4f       	sbci	r23, 0xFF	; 255
   16636:	c8 01       	movw	r24, r16
   16638:	0f 94 67 1a 	call	0x234ce	; 0x234ce <strcpy>
   1663c:	66 96       	adiw	r28, 0x16	; 22
   1663e:	0f b6       	in	r0, 0x3f	; 63
   16640:	f8 94       	cli
   16642:	de bf       	out	0x3e, r29	; 62
   16644:	0f be       	out	0x3f, r0	; 63
   16646:	cd bf       	out	0x3d, r28	; 61
   16648:	df 91       	pop	r29
   1664a:	cf 91       	pop	r28
   1664c:	1f 91       	pop	r17
   1664e:	0f 91       	pop	r16
   16650:	08 95       	ret

00016652 <tds_set_name(unsigned char, char*)>:
_Z12tds_set_namehPc():
   16652:	ef 92       	push	r14
   16654:	ff 92       	push	r15
   16656:	1f 93       	push	r17
   16658:	cf 93       	push	r28
   1665a:	df 93       	push	r29
   1665c:	cd b7       	in	r28, 0x3d	; 61
   1665e:	de b7       	in	r29, 0x3e	; 62
   16660:	66 97       	sbiw	r28, 0x16	; 22
   16662:	0f b6       	in	r0, 0x3f	; 63
   16664:	f8 94       	cli
   16666:	de bf       	out	0x3e, r29	; 62
   16668:	0f be       	out	0x3f, r0	; 63
   1666a:	cd bf       	out	0x3d, r28	; 61
   1666c:	18 2f       	mov	r17, r24
   1666e:	7b 01       	movw	r14, r22
   16670:	be 01       	movw	r22, r28
   16672:	6f 5f       	subi	r22, 0xFF	; 255
   16674:	7f 4f       	sbci	r23, 0xFF	; 255
   16676:	0e 94 40 b2 	call	0x16480	; 0x16480 <get_tds18s20(unsigned char, struct_DDS18s20*)>
   1667a:	b7 01       	movw	r22, r14
   1667c:	ce 01       	movw	r24, r28
   1667e:	0d 96       	adiw	r24, 0x0d	; 13
   16680:	0f 94 67 1a 	call	0x234ce	; 0x234ce <strcpy>
   16684:	be 01       	movw	r22, r28
   16686:	6f 5f       	subi	r22, 0xFF	; 255
   16688:	7f 4f       	sbci	r23, 0xFF	; 255
   1668a:	81 2f       	mov	r24, r17
   1668c:	0e 94 a5 b2 	call	0x1654a	; 0x1654a <set_tds18s20(unsigned char, struct_DDS18s20*)>
   16690:	66 96       	adiw	r28, 0x16	; 22
   16692:	0f b6       	in	r0, 0x3f	; 63
   16694:	f8 94       	cli
   16696:	de bf       	out	0x3e, r29	; 62
   16698:	0f be       	out	0x3f, r0	; 63
   1669a:	cd bf       	out	0x3d, r28	; 61
   1669c:	df 91       	pop	r29
   1669e:	cf 91       	pop	r28
   166a0:	1f 91       	pop	r17
   166a2:	ff 90       	pop	r15
   166a4:	ef 90       	pop	r14
   166a6:	08 95       	ret

000166a8 <tds_set_offset(unsigned char, int)>:
_Z14tds_set_offsethi():
   166a8:	ef 92       	push	r14
   166aa:	ff 92       	push	r15
   166ac:	1f 93       	push	r17
   166ae:	cf 93       	push	r28
   166b0:	df 93       	push	r29
   166b2:	cd b7       	in	r28, 0x3d	; 61
   166b4:	de b7       	in	r29, 0x3e	; 62
   166b6:	66 97       	sbiw	r28, 0x16	; 22
   166b8:	0f b6       	in	r0, 0x3f	; 63
   166ba:	f8 94       	cli
   166bc:	de bf       	out	0x3e, r29	; 62
   166be:	0f be       	out	0x3f, r0	; 63
   166c0:	cd bf       	out	0x3d, r28	; 61
   166c2:	18 2f       	mov	r17, r24
   166c4:	7b 01       	movw	r14, r22
   166c6:	be 01       	movw	r22, r28
   166c8:	6f 5f       	subi	r22, 0xFF	; 255
   166ca:	7f 4f       	sbci	r23, 0xFF	; 255
   166cc:	0e 94 40 b2 	call	0x16480	; 0x16480 <get_tds18s20(unsigned char, struct_DDS18s20*)>
   166d0:	fc 86       	std	Y+12, r15	; 0x0c
   166d2:	eb 86       	std	Y+11, r14	; 0x0b
   166d4:	be 01       	movw	r22, r28
   166d6:	6f 5f       	subi	r22, 0xFF	; 255
   166d8:	7f 4f       	sbci	r23, 0xFF	; 255
   166da:	81 2f       	mov	r24, r17
   166dc:	0e 94 a5 b2 	call	0x1654a	; 0x1654a <set_tds18s20(unsigned char, struct_DDS18s20*)>
   166e0:	66 96       	adiw	r28, 0x16	; 22
   166e2:	0f b6       	in	r0, 0x3f	; 63
   166e4:	f8 94       	cli
   166e6:	de bf       	out	0x3e, r29	; 62
   166e8:	0f be       	out	0x3f, r0	; 63
   166ea:	cd bf       	out	0x3d, r28	; 61
   166ec:	df 91       	pop	r29
   166ee:	cf 91       	pop	r28
   166f0:	1f 91       	pop	r17
   166f2:	ff 90       	pop	r15
   166f4:	ef 90       	pop	r14
   166f6:	08 95       	ret

000166f8 <tds_get_offset(unsigned char)>:
_Z14tds_get_offseth():
   166f8:	cf 93       	push	r28
   166fa:	df 93       	push	r29
   166fc:	cd b7       	in	r28, 0x3d	; 61
   166fe:	de b7       	in	r29, 0x3e	; 62
   16700:	66 97       	sbiw	r28, 0x16	; 22
   16702:	0f b6       	in	r0, 0x3f	; 63
   16704:	f8 94       	cli
   16706:	de bf       	out	0x3e, r29	; 62
   16708:	0f be       	out	0x3f, r0	; 63
   1670a:	cd bf       	out	0x3d, r28	; 61
   1670c:	be 01       	movw	r22, r28
   1670e:	6f 5f       	subi	r22, 0xFF	; 255
   16710:	7f 4f       	sbci	r23, 0xFF	; 255
   16712:	0e 94 40 b2 	call	0x16480	; 0x16480 <get_tds18s20(unsigned char, struct_DDS18s20*)>
   16716:	8b 85       	ldd	r24, Y+11	; 0x0b
   16718:	9c 85       	ldd	r25, Y+12	; 0x0c
   1671a:	66 96       	adiw	r28, 0x16	; 22
   1671c:	0f b6       	in	r0, 0x3f	; 63
   1671e:	f8 94       	cli
   16720:	de bf       	out	0x3e, r29	; 62
   16722:	0f be       	out	0x3f, r0	; 63
   16724:	cd bf       	out	0x3d, r28	; 61
   16726:	df 91       	pop	r29
   16728:	cf 91       	pop	r28
   1672a:	08 95       	ret

0001672c <tds_set_period(unsigned char, unsigned char)>:
_Z14tds_set_periodhh():
   1672c:	0f 93       	push	r16
   1672e:	1f 93       	push	r17
   16730:	cf 93       	push	r28
   16732:	df 93       	push	r29
   16734:	cd b7       	in	r28, 0x3d	; 61
   16736:	de b7       	in	r29, 0x3e	; 62
   16738:	66 97       	sbiw	r28, 0x16	; 22
   1673a:	0f b6       	in	r0, 0x3f	; 63
   1673c:	f8 94       	cli
   1673e:	de bf       	out	0x3e, r29	; 62
   16740:	0f be       	out	0x3f, r0	; 63
   16742:	cd bf       	out	0x3d, r28	; 61
   16744:	18 2f       	mov	r17, r24
   16746:	06 2f       	mov	r16, r22
   16748:	be 01       	movw	r22, r28
   1674a:	6f 5f       	subi	r22, 0xFF	; 255
   1674c:	7f 4f       	sbci	r23, 0xFF	; 255
   1674e:	0e 94 40 b2 	call	0x16480	; 0x16480 <get_tds18s20(unsigned char, struct_DDS18s20*)>
   16752:	0d 8b       	std	Y+21, r16	; 0x15
   16754:	be 01       	movw	r22, r28
   16756:	6f 5f       	subi	r22, 0xFF	; 255
   16758:	7f 4f       	sbci	r23, 0xFF	; 255
   1675a:	81 2f       	mov	r24, r17
   1675c:	0e 94 a5 b2 	call	0x1654a	; 0x1654a <set_tds18s20(unsigned char, struct_DDS18s20*)>
   16760:	66 96       	adiw	r28, 0x16	; 22
   16762:	0f b6       	in	r0, 0x3f	; 63
   16764:	f8 94       	cli
   16766:	de bf       	out	0x3e, r29	; 62
   16768:	0f be       	out	0x3f, r0	; 63
   1676a:	cd bf       	out	0x3d, r28	; 61
   1676c:	df 91       	pop	r29
   1676e:	cf 91       	pop	r28
   16770:	1f 91       	pop	r17
   16772:	0f 91       	pop	r16
   16774:	08 95       	ret

00016776 <tds_get_period(unsigned char)>:
_Z14tds_get_periodh():
   16776:	cf 93       	push	r28
   16778:	df 93       	push	r29
   1677a:	cd b7       	in	r28, 0x3d	; 61
   1677c:	de b7       	in	r29, 0x3e	; 62
   1677e:	66 97       	sbiw	r28, 0x16	; 22
   16780:	0f b6       	in	r0, 0x3f	; 63
   16782:	f8 94       	cli
   16784:	de bf       	out	0x3e, r29	; 62
   16786:	0f be       	out	0x3f, r0	; 63
   16788:	cd bf       	out	0x3d, r28	; 61
   1678a:	be 01       	movw	r22, r28
   1678c:	6f 5f       	subi	r22, 0xFF	; 255
   1678e:	7f 4f       	sbci	r23, 0xFF	; 255
   16790:	0e 94 40 b2 	call	0x16480	; 0x16480 <get_tds18s20(unsigned char, struct_DDS18s20*)>
   16794:	8d 89       	ldd	r24, Y+21	; 0x15
   16796:	90 e0       	ldi	r25, 0x00	; 0
   16798:	66 96       	adiw	r28, 0x16	; 22
   1679a:	0f b6       	in	r0, 0x3f	; 63
   1679c:	f8 94       	cli
   1679e:	de bf       	out	0x3e, r29	; 62
   167a0:	0f be       	out	0x3f, r0	; 63
   167a2:	cd bf       	out	0x3d, r28	; 61
   167a4:	df 91       	pop	r29
   167a6:	cf 91       	pop	r28
   167a8:	08 95       	ret

000167aa <tds_compare_rom(unsigned char*, unsigned char*)>:
_Z15tds_compare_romPhS_():
   167aa:	fb 01       	movw	r30, r22
   167ac:	9c 01       	movw	r18, r24
   167ae:	28 5f       	subi	r18, 0xF8	; 248
   167b0:	3f 4f       	sbci	r19, 0xFF	; 255
   167b2:	dc 01       	movw	r26, r24
   167b4:	5d 91       	ld	r21, X+
   167b6:	cd 01       	movw	r24, r26
   167b8:	41 91       	ld	r20, Z+
   167ba:	54 13       	cpse	r21, r20
   167bc:	05 c0       	rjmp	.+10     	; 0x167c8 <tds_compare_rom(unsigned char*, unsigned char*)+0x1e>
   167be:	a2 17       	cp	r26, r18
   167c0:	b3 07       	cpc	r27, r19
   167c2:	b9 f7       	brne	.-18     	; 0x167b2 <tds_compare_rom(unsigned char*, unsigned char*)+0x8>
   167c4:	81 e0       	ldi	r24, 0x01	; 1
   167c6:	08 95       	ret
   167c8:	80 e0       	ldi	r24, 0x00	; 0
   167ca:	08 95       	ret

000167cc <tds_update_associate()>:
_Z20tds_update_associatev():
   167cc:	ef 92       	push	r14
   167ce:	ff 92       	push	r15
   167d0:	0f 93       	push	r16
   167d2:	1f 93       	push	r17
   167d4:	cf 93       	push	r28
   167d6:	df 93       	push	r29
   167d8:	cd b7       	in	r28, 0x3d	; 61
   167da:	de b7       	in	r29, 0x3e	; 62
   167dc:	6e 97       	sbiw	r28, 0x1e	; 30
   167de:	0f b6       	in	r0, 0x3f	; 63
   167e0:	f8 94       	cli
   167e2:	de bf       	out	0x3e, r29	; 62
   167e4:	0f be       	out	0x3f, r0	; 63
   167e6:	cd bf       	out	0x3d, r28	; 61
   167e8:	1f 8a       	std	Y+23, r1	; 0x17
   167ea:	18 8e       	std	Y+24, r1	; 0x18
   167ec:	19 8e       	std	Y+25, r1	; 0x19
   167ee:	1a 8e       	std	Y+26, r1	; 0x1a
   167f0:	1b 8e       	std	Y+27, r1	; 0x1b
   167f2:	1c 8e       	std	Y+28, r1	; 0x1c
   167f4:	1d 8e       	std	Y+29, r1	; 0x1d
   167f6:	1e 8e       	std	Y+30, r1	; 0x1e
   167f8:	0b e9       	ldi	r16, 0x9B	; 155
   167fa:	10 e1       	ldi	r17, 0x10	; 16
   167fc:	ee 24       	eor	r14, r14
   167fe:	ea 94       	dec	r14
   16800:	f8 01       	movw	r30, r16
   16802:	e2 86       	std	Z+10, r14	; 0x0a
   16804:	b8 01       	movw	r22, r16
   16806:	ce 01       	movw	r24, r28
   16808:	47 96       	adiw	r24, 0x17	; 23
   1680a:	0e 94 d5 b3 	call	0x167aa	; 0x167aa <tds_compare_rom(unsigned char*, unsigned char*)>
   1680e:	81 11       	cpse	r24, r1
   16810:	14 c0       	rjmp	.+40     	; 0x1683a <tds_update_associate()+0x6e>
   16812:	f1 2c       	mov	r15, r1
   16814:	be 01       	movw	r22, r28
   16816:	6f 5f       	subi	r22, 0xFF	; 255
   16818:	7f 4f       	sbci	r23, 0xFF	; 255
   1681a:	8f 2d       	mov	r24, r15
   1681c:	0e 94 40 b2 	call	0x16480	; 0x16480 <get_tds18s20(unsigned char, struct_DDS18s20*)>
   16820:	b8 01       	movw	r22, r16
   16822:	ce 01       	movw	r24, r28
   16824:	02 96       	adiw	r24, 0x02	; 2
   16826:	0e 94 d5 b3 	call	0x167aa	; 0x167aa <tds_compare_rom(unsigned char*, unsigned char*)>
   1682a:	88 23       	and	r24, r24
   1682c:	11 f0       	breq	.+4      	; 0x16832 <tds_update_associate()+0x66>
   1682e:	f8 01       	movw	r30, r16
   16830:	f2 86       	std	Z+10, r15	; 0x0a
   16832:	f3 94       	inc	r15
   16834:	f6 e0       	ldi	r31, 0x06	; 6
   16836:	ff 12       	cpse	r15, r31
   16838:	ed cf       	rjmp	.-38     	; 0x16814 <tds_update_associate()+0x48>
   1683a:	05 5f       	subi	r16, 0xF5	; 245
   1683c:	1f 4f       	sbci	r17, 0xFF	; 255
   1683e:	80 e1       	ldi	r24, 0x10	; 16
   16840:	0d 3d       	cpi	r16, 0xDD	; 221
   16842:	18 07       	cpc	r17, r24
   16844:	e9 f6       	brne	.-70     	; 0x16800 <tds_update_associate()+0x34>
   16846:	6e 96       	adiw	r28, 0x1e	; 30
   16848:	0f b6       	in	r0, 0x3f	; 63
   1684a:	f8 94       	cli
   1684c:	de bf       	out	0x3e, r29	; 62
   1684e:	0f be       	out	0x3f, r0	; 63
   16850:	cd bf       	out	0x3d, r28	; 61
   16852:	df 91       	pop	r29
   16854:	cf 91       	pop	r28
   16856:	1f 91       	pop	r17
   16858:	0f 91       	pop	r16
   1685a:	ff 90       	pop	r15
   1685c:	ef 90       	pop	r14
   1685e:	08 95       	ret

00016860 <tds_set_clear(unsigned char)>:
_Z13tds_set_clearh():
   16860:	1f 93       	push	r17
   16862:	cf 93       	push	r28
   16864:	df 93       	push	r29
   16866:	cd b7       	in	r28, 0x3d	; 61
   16868:	de b7       	in	r29, 0x3e	; 62
   1686a:	66 97       	sbiw	r28, 0x16	; 22
   1686c:	0f b6       	in	r0, 0x3f	; 63
   1686e:	f8 94       	cli
   16870:	de bf       	out	0x3e, r29	; 62
   16872:	0f be       	out	0x3f, r0	; 63
   16874:	cd bf       	out	0x3d, r28	; 61
   16876:	18 2f       	mov	r17, r24
   16878:	be 01       	movw	r22, r28
   1687a:	6f 5f       	subi	r22, 0xFF	; 255
   1687c:	7f 4f       	sbci	r23, 0xFF	; 255
   1687e:	0e 94 40 b2 	call	0x16480	; 0x16480 <get_tds18s20(unsigned char, struct_DDS18s20*)>
   16882:	19 82       	std	Y+1, r1	; 0x01
   16884:	68 e6       	ldi	r22, 0x68	; 104
   16886:	78 e0       	ldi	r23, 0x08	; 8
   16888:	ce 01       	movw	r24, r28
   1688a:	0d 96       	adiw	r24, 0x0d	; 13
   1688c:	0f 94 67 1a 	call	0x234ce	; 0x234ce <strcpy>
   16890:	1c 86       	std	Y+12, r1	; 0x0c
   16892:	1b 86       	std	Y+11, r1	; 0x0b
   16894:	8a e0       	ldi	r24, 0x0A	; 10
   16896:	8d 8b       	std	Y+21, r24	; 0x15
   16898:	1a 82       	std	Y+2, r1	; 0x02
   1689a:	1b 82       	std	Y+3, r1	; 0x03
   1689c:	1c 82       	std	Y+4, r1	; 0x04
   1689e:	1d 82       	std	Y+5, r1	; 0x05
   168a0:	1e 82       	std	Y+6, r1	; 0x06
   168a2:	1f 82       	std	Y+7, r1	; 0x07
   168a4:	18 86       	std	Y+8, r1	; 0x08
   168a6:	19 86       	std	Y+9, r1	; 0x09
   168a8:	1a 86       	std	Y+10, r1	; 0x0a
   168aa:	be 01       	movw	r22, r28
   168ac:	6f 5f       	subi	r22, 0xFF	; 255
   168ae:	7f 4f       	sbci	r23, 0xFF	; 255
   168b0:	81 2f       	mov	r24, r17
   168b2:	0e 94 a5 b2 	call	0x1654a	; 0x1654a <set_tds18s20(unsigned char, struct_DDS18s20*)>
   168b6:	0e 94 e6 b3 	call	0x167cc	; 0x167cc <tds_update_associate()>
   168ba:	66 96       	adiw	r28, 0x16	; 22
   168bc:	0f b6       	in	r0, 0x3f	; 63
   168be:	f8 94       	cli
   168c0:	de bf       	out	0x3e, r29	; 62
   168c2:	0f be       	out	0x3f, r0	; 63
   168c4:	cd bf       	out	0x3d, r28	; 61
   168c6:	df 91       	pop	r29
   168c8:	cf 91       	pop	r28
   168ca:	1f 91       	pop	r17
   168cc:	08 95       	ret

000168ce <tds_set_clear_wrom_id(unsigned char)>:
_Z21tds_set_clear_wrom_idh():
   168ce:	9b e0       	ldi	r25, 0x0B	; 11
   168d0:	89 9f       	mul	r24, r25
   168d2:	f0 01       	movw	r30, r0
   168d4:	11 24       	eor	r1, r1
   168d6:	e5 56       	subi	r30, 0x65	; 101
   168d8:	ff 4e       	sbci	r31, 0xEF	; 239
   168da:	82 85       	ldd	r24, Z+10	; 0x0a
   168dc:	0c 94 30 b4 	jmp	0x16860	; 0x16860 <tds_set_clear(unsigned char)>

000168e0 <tds_check_associate(unsigned char)>:
_Z19tds_check_associateh():
   168e0:	ff 92       	push	r15
   168e2:	0f 93       	push	r16
   168e4:	1f 93       	push	r17
   168e6:	cf 93       	push	r28
   168e8:	df 93       	push	r29
   168ea:	cd b7       	in	r28, 0x3d	; 61
   168ec:	de b7       	in	r29, 0x3e	; 62
   168ee:	66 97       	sbiw	r28, 0x16	; 22
   168f0:	0f b6       	in	r0, 0x3f	; 63
   168f2:	f8 94       	cli
   168f4:	de bf       	out	0x3e, r29	; 62
   168f6:	0f be       	out	0x3f, r0	; 63
   168f8:	cd bf       	out	0x3d, r28	; 61
   168fa:	90 91 dd 10 	lds	r25, 0x10DD	; 0x8010dd <Global_HWwirenum>
   168fe:	89 17       	cp	r24, r25
   16900:	38 f5       	brcc	.+78     	; 0x16950 <tds_check_associate(unsigned char)+0x70>
   16902:	9b e0       	ldi	r25, 0x0B	; 11
   16904:	89 9f       	mul	r24, r25
   16906:	80 01       	movw	r16, r0
   16908:	11 24       	eor	r1, r1
   1690a:	05 56       	subi	r16, 0x65	; 101
   1690c:	1f 4e       	sbci	r17, 0xEF	; 239
   1690e:	f1 2c       	mov	r15, r1
   16910:	be 01       	movw	r22, r28
   16912:	6f 5f       	subi	r22, 0xFF	; 255
   16914:	7f 4f       	sbci	r23, 0xFF	; 255
   16916:	8f 2d       	mov	r24, r15
   16918:	0e 94 40 b2 	call	0x16480	; 0x16480 <get_tds18s20(unsigned char, struct_DDS18s20*)>
   1691c:	b8 01       	movw	r22, r16
   1691e:	ce 01       	movw	r24, r28
   16920:	02 96       	adiw	r24, 0x02	; 2
   16922:	0e 94 d5 b3 	call	0x167aa	; 0x167aa <tds_compare_rom(unsigned char*, unsigned char*)>
   16926:	81 11       	cpse	r24, r1
   16928:	06 c0       	rjmp	.+12     	; 0x16936 <tds_check_associate(unsigned char)+0x56>
   1692a:	f3 94       	inc	r15
   1692c:	86 e0       	ldi	r24, 0x06	; 6
   1692e:	f8 12       	cpse	r15, r24
   16930:	ef cf       	rjmp	.-34     	; 0x16910 <tds_check_associate(unsigned char)+0x30>
   16932:	ff 24       	eor	r15, r15
   16934:	fa 94       	dec	r15
   16936:	8f 2d       	mov	r24, r15
   16938:	66 96       	adiw	r28, 0x16	; 22
   1693a:	0f b6       	in	r0, 0x3f	; 63
   1693c:	f8 94       	cli
   1693e:	de bf       	out	0x3e, r29	; 62
   16940:	0f be       	out	0x3f, r0	; 63
   16942:	cd bf       	out	0x3d, r28	; 61
   16944:	df 91       	pop	r29
   16946:	cf 91       	pop	r28
   16948:	1f 91       	pop	r17
   1694a:	0f 91       	pop	r16
   1694c:	ff 90       	pop	r15
   1694e:	08 95       	ret
   16950:	8e ef       	ldi	r24, 0xFE	; 254
   16952:	f8 2e       	mov	r15, r24
   16954:	f0 cf       	rjmp	.-32     	; 0x16936 <tds_check_associate(unsigned char)+0x56>

00016956 <tds_associate(unsigned char)>:
_Z13tds_associateh():
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:202

uint8_t tds_associate(uint8_t id)
{
   16956:	df 92       	push	r13
   16958:	ef 92       	push	r14
   1695a:	ff 92       	push	r15
   1695c:	0f 93       	push	r16
   1695e:	1f 93       	push	r17
   16960:	cf 93       	push	r28
   16962:	df 93       	push	r29
   16964:	cd b7       	in	r28, 0x3d	; 61
   16966:	de b7       	in	r29, 0x3e	; 62
   16968:	66 97       	sbiw	r28, 0x16	; 22
   1696a:	0f b6       	in	r0, 0x3f	; 63
   1696c:	f8 94       	cli
   1696e:	de bf       	out	0x3e, r29	; 62
   16970:	0f be       	out	0x3f, r0	; 63
   16972:	cd bf       	out	0x3d, r28	; 61
   16974:	08 2f       	mov	r16, r24
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:205
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if (tds_check_associate(id) == 255)
   16976:	0e 94 70 b4 	call	0x168e0	; 0x168e0 <tds_check_associate(unsigned char)>
   1697a:	8f 3f       	cpi	r24, 0xFF	; 255
   1697c:	09 f0       	breq	.+2      	; 0x16980 <tds_associate(unsigned char)+0x2a>
   1697e:	64 c0       	rjmp	.+200    	; 0x16a48 <tds_associate(unsigned char)+0xf2>
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:207
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
   16980:	10 e0       	ldi	r17, 0x00	; 0
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:210
    {
      get_tds18s20(idx, &tds);
      if (tds.used == 0 && w_rom[id].used == 1)
   16982:	7b e0       	ldi	r23, 0x0B	; 11
   16984:	d7 2e       	mov	r13, r23
   16986:	d0 9e       	mul	r13, r16
   16988:	c0 01       	movw	r24, r0
   1698a:	11 24       	eor	r1, r1
   1698c:	9c 01       	movw	r18, r24
   1698e:	2c 55       	subi	r18, 0x5C	; 92
   16990:	3f 4e       	sbci	r19, 0xEF	; 239
   16992:	79 01       	movw	r14, r18
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:209
  struct_DDS18s20 tds;
  if (tds_check_associate(id) == 255)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    {
      get_tds18s20(idx, &tds);
   16994:	be 01       	movw	r22, r28
   16996:	6f 5f       	subi	r22, 0xFF	; 255
   16998:	7f 4f       	sbci	r23, 0xFF	; 255
   1699a:	81 2f       	mov	r24, r17
   1699c:	0e 94 40 b2 	call	0x16480	; 0x16480 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:210
      if (tds.used == 0 && w_rom[id].used == 1)
   169a0:	89 81       	ldd	r24, Y+1	; 0x01
   169a2:	81 11       	cpse	r24, r1
   169a4:	4d c0       	rjmp	.+154    	; 0x16a40 <tds_associate(unsigned char)+0xea>
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:210 (discriminator 1)
   169a6:	f7 01       	movw	r30, r14
   169a8:	80 81       	ld	r24, Z
   169aa:	81 30       	cpi	r24, 0x01	; 1
   169ac:	09 f0       	breq	.+2      	; 0x169b0 <tds_associate(unsigned char)+0x5a>
   169ae:	48 c0       	rjmp	.+144    	; 0x16a40 <tds_associate(unsigned char)+0xea>
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:212
      {
        tds.used = 1;
   169b0:	89 83       	std	Y+1, r24	; 0x01
   169b2:	de 01       	movw	r26, r28
   169b4:	12 96       	adiw	r26, 0x02	; 2
   169b6:	0d 9d       	mul	r16, r13
   169b8:	c0 01       	movw	r24, r0
   169ba:	11 24       	eor	r1, r1
   169bc:	30 e0       	ldi	r19, 0x00	; 0
   169be:	20 e0       	ldi	r18, 0x00	; 0
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:214 (discriminator 2)
        for (uint8_t i = 0; i < 8; i++)
          tds.rom[i] = w_rom[id].rom[i];
   169c0:	f9 01       	movw	r30, r18
   169c2:	e8 0f       	add	r30, r24
   169c4:	f9 1f       	adc	r31, r25
   169c6:	e5 56       	subi	r30, 0x65	; 101
   169c8:	ff 4e       	sbci	r31, 0xEF	; 239
   169ca:	40 81       	ld	r20, Z
   169cc:	4d 93       	st	X+, r20
   169ce:	2f 5f       	subi	r18, 0xFF	; 255
   169d0:	3f 4f       	sbci	r19, 0xFF	; 255
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:213 (discriminator 2)
    {
      get_tds18s20(idx, &tds);
      if (tds.used == 0 && w_rom[id].used == 1)
      {
        tds.used = 1;
        for (uint8_t i = 0; i < 8; i++)
   169d2:	28 30       	cpi	r18, 0x08	; 8
   169d4:	31 05       	cpc	r19, r1
   169d6:	a1 f7       	brne	.-24     	; 0x169c0 <tds_associate(unsigned char)+0x6a>
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:215
          tds.rom[i] = w_rom[id].rom[i];
        tds.assigned_ds2482 = w_rom[idx].assigned_ds2482;
   169d8:	2b e0       	ldi	r18, 0x0B	; 11
   169da:	12 9f       	mul	r17, r18
   169dc:	f0 01       	movw	r30, r0
   169de:	11 24       	eor	r1, r1
   169e0:	e5 56       	subi	r30, 0x65	; 101
   169e2:	ff 4e       	sbci	r31, 0xEF	; 239
   169e4:	80 85       	ldd	r24, Z+8	; 0x08
   169e6:	8a 87       	std	Y+10, r24	; 0x0a
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:216
        set_tds18s20(idx, &tds);
   169e8:	be 01       	movw	r22, r28
   169ea:	6f 5f       	subi	r22, 0xFF	; 255
   169ec:	7f 4f       	sbci	r23, 0xFF	; 255
   169ee:	81 2f       	mov	r24, r17
   169f0:	0e 94 a5 b2 	call	0x1654a	; 0x1654a <set_tds18s20(unsigned char, struct_DDS18s20*)>
   169f4:	3e e1       	ldi	r19, 0x1E	; 30
   169f6:	13 9f       	mul	r17, r19
   169f8:	a0 01       	movw	r20, r0
   169fa:	11 24       	eor	r1, r1
   169fc:	90 e0       	ldi	r25, 0x00	; 0
   169fe:	80 e0       	ldi	r24, 0x00	; 0
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:218
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
          status_tds18s20[idx].average_temp[cnt] = 20000;
   16a00:	20 e2       	ldi	r18, 0x20	; 32
   16a02:	3e e4       	ldi	r19, 0x4E	; 78
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:218 (discriminator 2)
   16a04:	fc 01       	movw	r30, r24
   16a06:	ee 0f       	add	r30, r30
   16a08:	ff 1f       	adc	r31, r31
   16a0a:	e4 0f       	add	r30, r20
   16a0c:	f5 1f       	adc	r31, r21
   16a0e:	e2 52       	subi	r30, 0x22	; 34
   16a10:	ff 4e       	sbci	r31, 0xEF	; 239
   16a12:	30 87       	std	Z+8, r19	; 0x08
   16a14:	27 83       	std	Z+7, r18	; 0x07
   16a16:	01 96       	adiw	r24, 0x01	; 1
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:217 (discriminator 2)
        tds.used = 1;
        for (uint8_t i = 0; i < 8; i++)
          tds.rom[i] = w_rom[id].rom[i];
        tds.assigned_ds2482 = w_rom[idx].assigned_ds2482;
        set_tds18s20(idx, &tds);
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
   16a18:	8a 30       	cpi	r24, 0x0A	; 10
   16a1a:	91 05       	cpc	r25, r1
   16a1c:	99 f7       	brne	.-26     	; 0x16a04 <tds_associate(unsigned char)+0xae>
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:224
        ret = idx;
        break;
      }
    }
  }
  tds_update_associate();
   16a1e:	0e 94 e6 b3 	call	0x167cc	; 0x167cc <tds_update_associate()>
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:226
  return ret;
}
   16a22:	81 2f       	mov	r24, r17
   16a24:	66 96       	adiw	r28, 0x16	; 22
   16a26:	0f b6       	in	r0, 0x3f	; 63
   16a28:	f8 94       	cli
   16a2a:	de bf       	out	0x3e, r29	; 62
   16a2c:	0f be       	out	0x3f, r0	; 63
   16a2e:	cd bf       	out	0x3d, r28	; 61
   16a30:	df 91       	pop	r29
   16a32:	cf 91       	pop	r28
   16a34:	1f 91       	pop	r17
   16a36:	0f 91       	pop	r16
   16a38:	ff 90       	pop	r15
   16a3a:	ef 90       	pop	r14
   16a3c:	df 90       	pop	r13
   16a3e:	08 95       	ret
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:207 (discriminator 2)
{
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if (tds_check_associate(id) == 255)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
   16a40:	1f 5f       	subi	r17, 0xFF	; 255
   16a42:	16 30       	cpi	r17, 0x06	; 6
   16a44:	09 f0       	breq	.+2      	; 0x16a48 <tds_associate(unsigned char)+0xf2>
   16a46:	a6 cf       	rjmp	.-180    	; 0x16994 <tds_associate(unsigned char)+0x3e>
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:203
  return w_rom[id].tds_idx;
}

uint8_t tds_associate(uint8_t id)
{
  uint8_t ret = 255;
   16a48:	1f ef       	ldi	r17, 0xFF	; 255
   16a4a:	e9 cf       	rjmp	.-46     	; 0x16a1e <tds_associate(unsigned char)+0xc8>

00016a4c <one_hw_search_device(unsigned char)>:
_Z20one_hw_search_deviceh():
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:232

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//*************************************************************************************************************//
/////vyhledani zarizeni na hw 1wire sbernici////////
uint8_t one_hw_search_device(uint8_t idx)
{
   16a4c:	ef 92       	push	r14
   16a4e:	ff 92       	push	r15
   16a50:	0f 93       	push	r16
   16a52:	1f 93       	push	r17
   16a54:	cf 93       	push	r28
   16a56:	df 93       	push	r29
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:234
  uint8_t r;
  ds2482_address[idx].HWwirenum = 0;
   16a58:	c8 2f       	mov	r28, r24
   16a5a:	d0 e0       	ldi	r29, 0x00	; 0
   16a5c:	cc 0f       	add	r28, r28
   16a5e:	dd 1f       	adc	r29, r29
   16a60:	c7 56       	subi	r28, 0x67	; 103
   16a62:	df 4e       	sbci	r29, 0xEF	; 239
   16a64:	19 82       	std	Y+1, r1	; 0x01
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:235
  ds2482init(ds2482_address[idx].i2c_addr);
   16a66:	88 81       	ld	r24, Y
   16a68:	0f 94 ef 0a 	call	0x215de	; 0x215de <ds2482init(unsigned char)>
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:236
  ds2482reset(ds2482_address[idx].i2c_addr);
   16a6c:	88 81       	ld	r24, Y
   16a6e:	0f 94 a9 0a 	call	0x21552	; 0x21552 <ds2482reset(unsigned char)>
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:237
  ds2482owReset(ds2482_address[idx].i2c_addr);
   16a72:	88 81       	ld	r24, Y
   16a74:	0f 94 08 0b 	call	0x21610	; 0x21610 <ds2482owReset(unsigned char)>
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:238
  r = owMatchFirst(ds2482_address[idx].i2c_addr, tmp_rom);
   16a78:	62 e9       	ldi	r22, 0x92	; 146
   16a7a:	71 e1       	ldi	r23, 0x11	; 17
   16a7c:	88 81       	ld	r24, Y
   16a7e:	0f 94 a3 0a 	call	0x21546	; 0x21546 <owMatchFirst(unsigned char, unsigned char*)>
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:246
  }
  if (r) {
    /*jina chyba*/
  }
  ///
  if (r == DS2482_ERR_OK)
   16a82:	81 11       	cpse	r24, r1
   16a84:	3a c0       	rjmp	.+116    	; 0x16afa <one_hw_search_device(unsigned char)+0xae>
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:248
    while (1) { /// TODO optimalizovat podminku do jednoho radku
      if (ds2482_address[idx].HWwirenum > HW_ONEWIRE_MAXDEVICES - 1) break;
   16a86:	8e 01       	movw	r16, r28
   16a88:	0f 5f       	subi	r16, 0xFF	; 255
   16a8a:	1f 4f       	sbci	r17, 0xFF	; 255
   16a8c:	9b e0       	ldi	r25, 0x0B	; 11
   16a8e:	f9 2e       	mov	r15, r25
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:251
      for (uint8_t a = 0; a < 8; a++)  w_rom[Global_HWwirenum].rom[a] = tmp_rom[a];
      w_rom[Global_HWwirenum].assigned_ds2482 = ds2482_address[idx].i2c_addr;
      w_rom[Global_HWwirenum].used = 1;
   16a90:	ee 24       	eor	r14, r14
   16a92:	e3 94       	inc	r14
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:248
    /*jina chyba*/
  }
  ///
  if (r == DS2482_ERR_OK)
    while (1) { /// TODO optimalizovat podminku do jednoho radku
      if (ds2482_address[idx].HWwirenum > HW_ONEWIRE_MAXDEVICES - 1) break;
   16a94:	f8 01       	movw	r30, r16
   16a96:	90 81       	ld	r25, Z
   16a98:	96 30       	cpi	r25, 0x06	; 6
   16a9a:	78 f5       	brcc	.+94     	; 0x16afa <one_hw_search_device(unsigned char)+0xae>
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:249
      for (uint8_t a = 0; a < 8; a++)  w_rom[Global_HWwirenum].rom[a] = tmp_rom[a];
   16a9c:	20 91 dd 10 	lds	r18, 0x10DD	; 0x8010dd <Global_HWwirenum>
   16aa0:	42 2f       	mov	r20, r18
   16aa2:	50 e0       	ldi	r21, 0x00	; 0
   16aa4:	a2 e9       	ldi	r26, 0x92	; 146
   16aa6:	b1 e1       	ldi	r27, 0x11	; 17
   16aa8:	2f 9d       	mul	r18, r15
   16aaa:	90 01       	movw	r18, r0
   16aac:	11 24       	eor	r1, r1
   16aae:	90 e0       	ldi	r25, 0x00	; 0
   16ab0:	80 e0       	ldi	r24, 0x00	; 0
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:249 (discriminator 2)
   16ab2:	6d 91       	ld	r22, X+
   16ab4:	fc 01       	movw	r30, r24
   16ab6:	e2 0f       	add	r30, r18
   16ab8:	f3 1f       	adc	r31, r19
   16aba:	e5 56       	subi	r30, 0x65	; 101
   16abc:	ff 4e       	sbci	r31, 0xEF	; 239
   16abe:	60 83       	st	Z, r22
   16ac0:	01 96       	adiw	r24, 0x01	; 1
   16ac2:	88 30       	cpi	r24, 0x08	; 8
   16ac4:	91 05       	cpc	r25, r1
   16ac6:	a9 f7       	brne	.-22     	; 0x16ab2 <one_hw_search_device(unsigned char)+0x66>
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:250
      w_rom[Global_HWwirenum].assigned_ds2482 = ds2482_address[idx].i2c_addr;
   16ac8:	88 81       	ld	r24, Y
   16aca:	f4 9e       	mul	r15, r20
   16acc:	f0 01       	movw	r30, r0
   16ace:	f5 9e       	mul	r15, r21
   16ad0:	f0 0d       	add	r31, r0
   16ad2:	11 24       	eor	r1, r1
   16ad4:	e5 56       	subi	r30, 0x65	; 101
   16ad6:	ff 4e       	sbci	r31, 0xEF	; 239
   16ad8:	80 87       	std	Z+8, r24	; 0x08
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:251
      w_rom[Global_HWwirenum].used = 1;
   16ada:	e1 86       	std	Z+9, r14	; 0x09
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:252
      r = owMatchNext(ds2482_address[idx].i2c_addr, tmp_rom);
   16adc:	62 e9       	ldi	r22, 0x92	; 146
   16ade:	71 e1       	ldi	r23, 0x11	; 17
   16ae0:	0f 94 1d 0a 	call	0x2143a	; 0x2143a <owMatchNext(unsigned char, unsigned char*)>
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:254
      /// celkovy pocet detekovanych roms
      ds2482_address[idx].HWwirenum++;
   16ae4:	f8 01       	movw	r30, r16
   16ae6:	90 81       	ld	r25, Z
   16ae8:	9f 5f       	subi	r25, 0xFF	; 255
   16aea:	90 83       	st	Z, r25
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:255
      Global_HWwirenum++;
   16aec:	90 91 dd 10 	lds	r25, 0x10DD	; 0x8010dd <Global_HWwirenum>
   16af0:	9f 5f       	subi	r25, 0xFF	; 255
   16af2:	90 93 dd 10 	sts	0x10DD, r25	; 0x8010dd <Global_HWwirenum>
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:256
      if (r == DS2482_ERR_NO_DEVICE)
   16af6:	85 30       	cpi	r24, 0x05	; 5
   16af8:	69 f6       	brne	.-102    	; 0x16a94 <one_hw_search_device(unsigned char)+0x48>
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:262
      { ///hledani dokonceno
        break;
      }
    }
  return r;
}
   16afa:	df 91       	pop	r29
   16afc:	cf 91       	pop	r28
   16afe:	1f 91       	pop	r17
   16b00:	0f 91       	pop	r16
   16b02:	ff 90       	pop	r15
   16b04:	ef 90       	pop	r14
   16b06:	08 95       	ret

00016b08 <mereni_hwwire(unsigned int)>:
_Z13mereni_hwwirej():
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:266
//////
/// funkce mereni na sbernici
uint8_t mereni_hwwire(uint16_t uptime)
{
   16b08:	af 92       	push	r10
   16b0a:	bf 92       	push	r11
   16b0c:	cf 92       	push	r12
   16b0e:	df 92       	push	r13
   16b10:	ef 92       	push	r14
   16b12:	ff 92       	push	r15
   16b14:	0f 93       	push	r16
   16b16:	1f 93       	push	r17
   16b18:	cf 93       	push	r28
   16b1a:	df 93       	push	r29
   16b1c:	cd b7       	in	r28, 0x3d	; 61
   16b1e:	de b7       	in	r29, 0x3e	; 62
   16b20:	68 97       	sbiw	r28, 0x18	; 24
   16b22:	0f b6       	in	r0, 0x3f	; 63
   16b24:	f8 94       	cli
   16b26:	de bf       	out	0x3e, r29	; 62
   16b28:	0f be       	out	0x3f, r0	; 63
   16b2a:	cd bf       	out	0x3d, r28	; 61
   16b2c:	5e ed       	ldi	r21, 0xDE	; 222
   16b2e:	e5 2e       	mov	r14, r21
   16b30:	50 e1       	ldi	r21, 0x10	; 16
   16b32:	f5 2e       	mov	r15, r21
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:270
  uint8_t status = 0;
  uint8_t t, e;
  struct_DDS18s20 tds;
  for (uint8_t w = 0; w < HW_ONEWIRE_MAXROMS; w++)
   16b34:	00 e0       	ldi	r16, 0x00	; 0
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:273
  {
    get_tds18s20(w, &tds);
    if ((tds.used == 1) && (((uptime & 0xff) - status_tds18s20[w].period_now) >= tds.period))
   16b36:	6c 01       	movw	r12, r24
   16b38:	dd 24       	eor	r13, r13
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:311
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
          status_tds18s20[w].CRC = e; // crc soucet
          if (status == 0)
          {
            int temp = (int) status_tds18s20[w].tempH << 11 | (int) status_tds18s20[w].tempL << 3;
            status_tds18s20[w].temp = ((temp & 0xfff0) << 3) -  16 + (  (  (status_tds18s20[w].CP - (status_tds18s20[t].CR) << 7) ) / status_tds18s20[w].CP ) + tds.offset;
   16b3a:	6e e1       	ldi	r22, 0x1E	; 30
   16b3c:	a6 2e       	mov	r10, r22
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:272
  uint8_t status = 0;
  uint8_t t, e;
  struct_DDS18s20 tds;
  for (uint8_t w = 0; w < HW_ONEWIRE_MAXROMS; w++)
  {
    get_tds18s20(w, &tds);
   16b3e:	be 01       	movw	r22, r28
   16b40:	6f 5f       	subi	r22, 0xFF	; 255
   16b42:	7f 4f       	sbci	r23, 0xFF	; 255
   16b44:	80 2f       	mov	r24, r16
   16b46:	0e 94 40 b2 	call	0x16480	; 0x16480 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:273
    if ((tds.used == 1) && (((uptime & 0xff) - status_tds18s20[w].period_now) >= tds.period))
   16b4a:	19 81       	ldd	r17, Y+1	; 0x01
   16b4c:	11 30       	cpi	r17, 0x01	; 1
   16b4e:	09 f0       	breq	.+2      	; 0x16b52 <mereni_hwwire(unsigned int)+0x4a>
   16b50:	d9 c0       	rjmp	.+434    	; 0x16d04 <mereni_hwwire(unsigned int)+0x1fc>
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:273 (discriminator 1)
   16b52:	f7 01       	movw	r30, r14
   16b54:	84 8d       	ldd	r24, Z+28	; 0x1c
   16b56:	9d 89       	ldd	r25, Y+21	; 0x15
   16b58:	96 01       	movw	r18, r12
   16b5a:	28 1b       	sub	r18, r24
   16b5c:	31 09       	sbc	r19, r1
   16b5e:	92 17       	cp	r25, r18
   16b60:	13 06       	cpc	r1, r19
   16b62:	11 f0       	breq	.+4      	; 0x16b68 <mereni_hwwire(unsigned int)+0x60>
   16b64:	08 f0       	brcs	.+2      	; 0x16b68 <mereni_hwwire(unsigned int)+0x60>
   16b66:	ce c0       	rjmp	.+412    	; 0x16d04 <mereni_hwwire(unsigned int)+0x1fc>
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:275
    {
      status_tds18s20[w].period_now += tds.period;
   16b68:	89 0f       	add	r24, r25
   16b6a:	84 8f       	std	Z+28, r24	; 0x1c
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:276
      if (status_tds18s20[w].wait == false)
   16b6c:	85 8d       	ldd	r24, Z+29	; 0x1d
   16b6e:	81 11       	cpse	r24, r1
   16b70:	0f c0       	rjmp	.+30     	; 0x16b90 <mereni_hwwire(unsigned int)+0x88>
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:278
      {
        owReset(tds.assigned_ds2482);
   16b72:	8a 85       	ldd	r24, Y+10	; 0x0a
   16b74:	0f 94 08 0b 	call	0x21610	; 0x21610 <ds2482owReset(unsigned char)>
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:279
        owMatchRom(tds.assigned_ds2482, tds.rom);
   16b78:	be 01       	movw	r22, r28
   16b7a:	6e 5f       	subi	r22, 0xFE	; 254
   16b7c:	7f 4f       	sbci	r23, 0xFF	; 255
   16b7e:	8a 85       	ldd	r24, Y+10	; 0x0a
   16b80:	0f 94 07 0a 	call	0x2140e	; 0x2140e <owMatchRom(unsigned char, unsigned char*)>
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:280
        owWriteByte(tds.assigned_ds2482, OW_CONVERT_T);
   16b84:	64 e4       	ldi	r22, 0x44	; 68
   16b86:	8a 85       	ldd	r24, Y+10	; 0x0a
   16b88:	0f 94 43 0b 	call	0x21686	; 0x21686 <ds2482owWriteByte(unsigned char, unsigned char)>
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:281
        status_tds18s20[w].wait = true;
   16b8c:	f7 01       	movw	r30, r14
   16b8e:	15 8f       	std	Z+29, r17	; 0x1d
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:283
      }
      if (status_tds18s20[w].wait == true)
   16b90:	f7 01       	movw	r30, r14
   16b92:	b5 8c       	ldd	r11, Z+29	; 0x1d
   16b94:	f1 e0       	ldi	r31, 0x01	; 1
   16b96:	bf 12       	cpse	r11, r31
   16b98:	b5 c0       	rjmp	.+362    	; 0x16d04 <mereni_hwwire(unsigned int)+0x1fc>
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:285
      {
        owReset(tds.assigned_ds2482);
   16b9a:	8a 85       	ldd	r24, Y+10	; 0x0a
   16b9c:	0f 94 08 0b 	call	0x21610	; 0x21610 <ds2482owReset(unsigned char)>
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:286
        owMatchRom(tds.assigned_ds2482, tds.rom);
   16ba0:	be 01       	movw	r22, r28
   16ba2:	6e 5f       	subi	r22, 0xFE	; 254
   16ba4:	7f 4f       	sbci	r23, 0xFF	; 255
   16ba6:	8a 85       	ldd	r24, Y+10	; 0x0a
   16ba8:	0f 94 07 0a 	call	0x2140e	; 0x2140e <owMatchRom(unsigned char, unsigned char*)>
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:287
        owReadByte(tds.assigned_ds2482, &t);
   16bac:	be 01       	movw	r22, r28
   16bae:	68 5e       	subi	r22, 0xE8	; 232
   16bb0:	7f 4f       	sbci	r23, 0xFF	; 255
   16bb2:	8a 85       	ldd	r24, Y+10	; 0x0a
   16bb4:	0f 94 cb 0b 	call	0x21796	; 0x21796 <ds2482owReadByte(unsigned char, unsigned char*)>
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:288
        if (t != 0) 
   16bb8:	88 8d       	ldd	r24, Y+24	; 0x18
   16bba:	88 23       	and	r24, r24
   16bbc:	09 f4       	brne	.+2      	; 0x16bc0 <mereni_hwwire(unsigned int)+0xb8>
   16bbe:	a2 c0       	rjmp	.+324    	; 0x16d04 <mereni_hwwire(unsigned int)+0x1fc>
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:290
        {
          status_tds18s20[w].wait = false;
   16bc0:	f7 01       	movw	r30, r14
   16bc2:	15 8e       	std	Z+29, r1	; 0x1d
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:291
          status = owReset(tds.assigned_ds2482);
   16bc4:	8a 85       	ldd	r24, Y+10	; 0x0a
   16bc6:	0f 94 08 0b 	call	0x21610	; 0x21610 <ds2482owReset(unsigned char)>
   16bca:	18 2f       	mov	r17, r24
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:292
          status = status + owMatchRom(tds.assigned_ds2482, tds.rom);
   16bcc:	be 01       	movw	r22, r28
   16bce:	6e 5f       	subi	r22, 0xFE	; 254
   16bd0:	7f 4f       	sbci	r23, 0xFF	; 255
   16bd2:	8a 85       	ldd	r24, Y+10	; 0x0a
   16bd4:	0f 94 07 0a 	call	0x2140e	; 0x2140e <owMatchRom(unsigned char, unsigned char*)>
   16bd8:	18 0f       	add	r17, r24
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:293
          status = status + owWriteByte(tds.assigned_ds2482, OW_READ_SCRATCHPAD);
   16bda:	6e eb       	ldi	r22, 0xBE	; 190
   16bdc:	8a 85       	ldd	r24, Y+10	; 0x0a
   16bde:	0f 94 43 0b 	call	0x21686	; 0x21686 <ds2482owWriteByte(unsigned char, unsigned char)>
   16be2:	18 0f       	add	r17, r24
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:294
          status = status + owReadByte(tds.assigned_ds2482, &e);     //0byte
   16be4:	be 01       	movw	r22, r28
   16be6:	69 5e       	subi	r22, 0xE9	; 233
   16be8:	7f 4f       	sbci	r23, 0xFF	; 255
   16bea:	8a 85       	ldd	r24, Y+10	; 0x0a
   16bec:	0f 94 cb 0b 	call	0x21796	; 0x21796 <ds2482owReadByte(unsigned char, unsigned char*)>
   16bf0:	18 0f       	add	r17, r24
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:295
          status_tds18s20[w].tempL = e;
   16bf2:	8f 89       	ldd	r24, Y+23	; 0x17
   16bf4:	f7 01       	movw	r30, r14
   16bf6:	80 83       	st	Z, r24
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:296
          status = status + owReadByte(tds.assigned_ds2482, &e);     //1byte
   16bf8:	be 01       	movw	r22, r28
   16bfa:	69 5e       	subi	r22, 0xE9	; 233
   16bfc:	7f 4f       	sbci	r23, 0xFF	; 255
   16bfe:	8a 85       	ldd	r24, Y+10	; 0x0a
   16c00:	0f 94 cb 0b 	call	0x21796	; 0x21796 <ds2482owReadByte(unsigned char, unsigned char*)>
   16c04:	18 0f       	add	r17, r24
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:297
          status_tds18s20[w].tempH = e;
   16c06:	8f 89       	ldd	r24, Y+23	; 0x17
   16c08:	f7 01       	movw	r30, r14
   16c0a:	81 83       	std	Z+1, r24	; 0x01
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:298
          status = status + owReadByte(tds.assigned_ds2482, &e); //2byte
   16c0c:	be 01       	movw	r22, r28
   16c0e:	69 5e       	subi	r22, 0xE9	; 233
   16c10:	7f 4f       	sbci	r23, 0xFF	; 255
   16c12:	8a 85       	ldd	r24, Y+10	; 0x0a
   16c14:	0f 94 cb 0b 	call	0x21796	; 0x21796 <ds2482owReadByte(unsigned char, unsigned char*)>
   16c18:	18 0f       	add	r17, r24
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:299
          status = status + owReadByte(tds.assigned_ds2482, &e); //3byte
   16c1a:	be 01       	movw	r22, r28
   16c1c:	69 5e       	subi	r22, 0xE9	; 233
   16c1e:	7f 4f       	sbci	r23, 0xFF	; 255
   16c20:	8a 85       	ldd	r24, Y+10	; 0x0a
   16c22:	0f 94 cb 0b 	call	0x21796	; 0x21796 <ds2482owReadByte(unsigned char, unsigned char*)>
   16c26:	18 0f       	add	r17, r24
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:300
          status = status + owReadByte(tds.assigned_ds2482, &e); //4byte
   16c28:	be 01       	movw	r22, r28
   16c2a:	69 5e       	subi	r22, 0xE9	; 233
   16c2c:	7f 4f       	sbci	r23, 0xFF	; 255
   16c2e:	8a 85       	ldd	r24, Y+10	; 0x0a
   16c30:	0f 94 cb 0b 	call	0x21796	; 0x21796 <ds2482owReadByte(unsigned char, unsigned char*)>
   16c34:	18 0f       	add	r17, r24
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:301
          status = status + owReadByte(tds.assigned_ds2482, &e); //5byte
   16c36:	be 01       	movw	r22, r28
   16c38:	69 5e       	subi	r22, 0xE9	; 233
   16c3a:	7f 4f       	sbci	r23, 0xFF	; 255
   16c3c:	8a 85       	ldd	r24, Y+10	; 0x0a
   16c3e:	0f 94 cb 0b 	call	0x21796	; 0x21796 <ds2482owReadByte(unsigned char, unsigned char*)>
   16c42:	18 0f       	add	r17, r24
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:302
          status = status + owReadByte(tds.assigned_ds2482, &e); //6byte
   16c44:	be 01       	movw	r22, r28
   16c46:	69 5e       	subi	r22, 0xE9	; 233
   16c48:	7f 4f       	sbci	r23, 0xFF	; 255
   16c4a:	8a 85       	ldd	r24, Y+10	; 0x0a
   16c4c:	0f 94 cb 0b 	call	0x21796	; 0x21796 <ds2482owReadByte(unsigned char, unsigned char*)>
   16c50:	18 0f       	add	r17, r24
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:303
          status_tds18s20[w].CR = e; //count remain
   16c52:	8f 89       	ldd	r24, Y+23	; 0x17
   16c54:	f7 01       	movw	r30, r14
   16c56:	82 83       	std	Z+2, r24	; 0x02
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:304
          status = status + owReadByte(tds.assigned_ds2482, &e); //7byte
   16c58:	be 01       	movw	r22, r28
   16c5a:	69 5e       	subi	r22, 0xE9	; 233
   16c5c:	7f 4f       	sbci	r23, 0xFF	; 255
   16c5e:	8a 85       	ldd	r24, Y+10	; 0x0a
   16c60:	0f 94 cb 0b 	call	0x21796	; 0x21796 <ds2482owReadByte(unsigned char, unsigned char*)>
   16c64:	18 0f       	add	r17, r24
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:305
          status_tds18s20[w].CP = e; // count per
   16c66:	8f 89       	ldd	r24, Y+23	; 0x17
   16c68:	f7 01       	movw	r30, r14
   16c6a:	83 83       	std	Z+3, r24	; 0x03
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:306
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
   16c6c:	be 01       	movw	r22, r28
   16c6e:	69 5e       	subi	r22, 0xE9	; 233
   16c70:	7f 4f       	sbci	r23, 0xFF	; 255
   16c72:	8a 85       	ldd	r24, Y+10	; 0x0a
   16c74:	0f 94 cb 0b 	call	0x21796	; 0x21796 <ds2482owReadByte(unsigned char, unsigned char*)>
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:307
          status_tds18s20[w].CRC = e; // crc soucet
   16c78:	9f 89       	ldd	r25, Y+23	; 0x17
   16c7a:	f7 01       	movw	r30, r14
   16c7c:	94 83       	std	Z+4, r25	; 0x04
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:306
          status = status + owReadByte(tds.assigned_ds2482, &e); //5byte
          status = status + owReadByte(tds.assigned_ds2482, &e); //6byte
          status_tds18s20[w].CR = e; //count remain
          status = status + owReadByte(tds.assigned_ds2482, &e); //7byte
          status_tds18s20[w].CP = e; // count per
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
   16c7e:	81 0f       	add	r24, r17
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:308
          status_tds18s20[w].CRC = e; // crc soucet
          if (status == 0)
   16c80:	09 f0       	breq	.+2      	; 0x16c84 <mereni_hwwire(unsigned int)+0x17c>
   16c82:	58 c0       	rjmp	.+176    	; 0x16d34 <mereni_hwwire(unsigned int)+0x22c>
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:311
          {
            int temp = (int) status_tds18s20[w].tempH << 11 | (int) status_tds18s20[w].tempL << 3;
            status_tds18s20[w].temp = ((temp & 0xfff0) << 3) -  16 + (  (  (status_tds18s20[w].CP - (status_tds18s20[t].CR) << 7) ) / status_tds18s20[w].CP ) + tds.offset;
   16c84:	63 81       	ldd	r22, Z+3	; 0x03
   16c86:	70 e0       	ldi	r23, 0x00	; 0
   16c88:	e8 8d       	ldd	r30, Y+24	; 0x18
   16c8a:	ae 9e       	mul	r10, r30
   16c8c:	f0 01       	movw	r30, r0
   16c8e:	11 24       	eor	r1, r1
   16c90:	e2 52       	subi	r30, 0x22	; 34
   16c92:	ff 4e       	sbci	r31, 0xEF	; 239
   16c94:	82 81       	ldd	r24, Z+2	; 0x02
   16c96:	9b 01       	movw	r18, r22
   16c98:	28 1b       	sub	r18, r24
   16c9a:	31 09       	sbc	r19, r1
   16c9c:	c9 01       	movw	r24, r18
   16c9e:	96 95       	lsr	r25
   16ca0:	98 2f       	mov	r25, r24
   16ca2:	88 27       	eor	r24, r24
   16ca4:	97 95       	ror	r25
   16ca6:	87 95       	ror	r24
   16ca8:	0f 94 49 16 	call	0x22c92	; 0x22c92 <__divmodhi4>
   16cac:	8b 85       	ldd	r24, Y+11	; 0x0b
   16cae:	9c 85       	ldd	r25, Y+12	; 0x0c
   16cb0:	40 97       	sbiw	r24, 0x10	; 16
   16cb2:	68 0f       	add	r22, r24
   16cb4:	79 1f       	adc	r23, r25
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:310
          status_tds18s20[w].CP = e; // count per
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
          status_tds18s20[w].CRC = e; // crc soucet
          if (status == 0)
          {
            int temp = (int) status_tds18s20[w].tempH << 11 | (int) status_tds18s20[w].tempL << 3;
   16cb6:	f7 01       	movw	r30, r14
   16cb8:	81 81       	ldd	r24, Z+1	; 0x01
   16cba:	90 e0       	ldi	r25, 0x00	; 0
   16cbc:	98 2f       	mov	r25, r24
   16cbe:	88 27       	eor	r24, r24
   16cc0:	99 0f       	add	r25, r25
   16cc2:	99 0f       	add	r25, r25
   16cc4:	99 0f       	add	r25, r25
   16cc6:	20 81       	ld	r18, Z
   16cc8:	f8 e0       	ldi	r31, 0x08	; 8
   16cca:	2f 9f       	mul	r18, r31
   16ccc:	90 01       	movw	r18, r0
   16cce:	11 24       	eor	r1, r1
   16cd0:	82 2b       	or	r24, r18
   16cd2:	93 2b       	or	r25, r19
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:311
            status_tds18s20[w].temp = ((temp & 0xfff0) << 3) -  16 + (  (  (status_tds18s20[w].CP - (status_tds18s20[t].CR) << 7) ) / status_tds18s20[w].CP ) + tds.offset;
   16cd4:	43 e0       	ldi	r20, 0x03	; 3
   16cd6:	88 0f       	add	r24, r24
   16cd8:	99 1f       	adc	r25, r25
   16cda:	4a 95       	dec	r20
   16cdc:	e1 f7       	brne	.-8      	; 0x16cd6 <mereni_hwwire(unsigned int)+0x1ce>
   16cde:	80 78       	andi	r24, 0x80	; 128
   16ce0:	68 0f       	add	r22, r24
   16ce2:	79 1f       	adc	r23, r25
   16ce4:	f7 01       	movw	r30, r14
   16ce6:	76 83       	std	Z+6, r23	; 0x06
   16ce8:	65 83       	std	Z+5, r22	; 0x05
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:312
            status_tds18s20[w].online = True;
   16cea:	b3 8e       	std	Z+27, r11	; 0x1b
   16cec:	89 e0       	ldi	r24, 0x09	; 9
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:313 (discriminator 2)
            for (uint8_t av = 9; av > 0; av--) status_tds18s20[w].average_temp[av] = status_tds18s20[w].average_temp[av - 1];
   16cee:	27 89       	ldd	r18, Z+23	; 0x17
   16cf0:	30 8d       	ldd	r19, Z+24	; 0x18
   16cf2:	32 8f       	std	Z+26, r19	; 0x1a
   16cf4:	21 8f       	std	Z+25, r18	; 0x19
   16cf6:	81 50       	subi	r24, 0x01	; 1
   16cf8:	32 97       	sbiw	r30, 0x02	; 2
   16cfa:	81 11       	cpse	r24, r1
   16cfc:	f8 cf       	rjmp	.-16     	; 0x16cee <mereni_hwwire(unsigned int)+0x1e6>
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:314
            status_tds18s20[w].average_temp[0] = status_tds18s20[w].temp;
   16cfe:	f7 01       	movw	r30, r14
   16d00:	70 87       	std	Z+8, r23	; 0x08
   16d02:	67 83       	std	Z+7, r22	; 0x07
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:270 (discriminator 2)
uint8_t mereni_hwwire(uint16_t uptime)
{
  uint8_t status = 0;
  uint8_t t, e;
  struct_DDS18s20 tds;
  for (uint8_t w = 0; w < HW_ONEWIRE_MAXROMS; w++)
   16d04:	0f 5f       	subi	r16, 0xFF	; 255
   16d06:	fe e1       	ldi	r31, 0x1E	; 30
   16d08:	ef 0e       	add	r14, r31
   16d0a:	f1 1c       	adc	r15, r1
   16d0c:	06 30       	cpi	r16, 0x06	; 6
   16d0e:	09 f0       	breq	.+2      	; 0x16d12 <mereni_hwwire(unsigned int)+0x20a>
   16d10:	16 cf       	rjmp	.-468    	; 0x16b3e <mereni_hwwire(unsigned int)+0x36>
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:325
          }
        }
      }
    }
  }
}
   16d12:	68 96       	adiw	r28, 0x18	; 24
   16d14:	0f b6       	in	r0, 0x3f	; 63
   16d16:	f8 94       	cli
   16d18:	de bf       	out	0x3e, r29	; 62
   16d1a:	0f be       	out	0x3f, r0	; 63
   16d1c:	cd bf       	out	0x3d, r28	; 61
   16d1e:	df 91       	pop	r29
   16d20:	cf 91       	pop	r28
   16d22:	1f 91       	pop	r17
   16d24:	0f 91       	pop	r16
   16d26:	ff 90       	pop	r15
   16d28:	ef 90       	pop	r14
   16d2a:	df 90       	pop	r13
   16d2c:	cf 90       	pop	r12
   16d2e:	bf 90       	pop	r11
   16d30:	af 90       	pop	r10
   16d32:	08 95       	ret
/tmp/arduino_build_131566/sketch/saric_tds_function.cpp:319
            status_tds18s20[w].average_temp[0] = status_tds18s20[w].temp;
          }

          else
          {
            status_tds18s20[w].online = False;
   16d34:	13 8e       	std	Z+27, r1	; 0x1b
   16d36:	e6 cf       	rjmp	.-52     	; 0x16d04 <mereni_hwwire(unsigned int)+0x1fc>

00016d38 <EEPROMClass::read(int) [clone .isra.0]>:
_ZNK5EERefdeEv():
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:60
  array_pids[idx]->SetControllerDirection(REVERSE);
}

void thermostat_pid_compute(uint8_t idx)
{
  array_pids[idx]->Compute();
   16d38:	0d 94 6e 22 	jmp	0x244dc	; 0x244dc <eeprom_read_byte>

00016d3c <EEPROMClass::write(int, unsigned char) [clone .isra.1]>:
_ZN5EERefaSEh():
   16d3c:	0d 94 76 22 	jmp	0x244ec	; 0x244ec <eeprom_write_byte>

00016d40 <thermostat_ring_get_state(unsigned char)>:
_Z25thermostat_ring_get_stateh():
   16d40:	e8 2f       	mov	r30, r24
   16d42:	f0 e0       	ldi	r31, 0x00	; 0
   16d44:	ef 55       	subi	r30, 0x5F	; 95
   16d46:	fe 4e       	sbci	r31, 0xEE	; 238
   16d48:	80 81       	ld	r24, Z
   16d4a:	08 95       	ret

00016d4c <thermostat_ring_set_state(unsigned char, unsigned char)>:
_Z25thermostat_ring_set_statehh():
   16d4c:	e8 2f       	mov	r30, r24
   16d4e:	f0 e0       	ldi	r31, 0x00	; 0
   16d50:	ef 55       	subi	r30, 0x5F	; 95
   16d52:	fe 4e       	sbci	r31, 0xEE	; 238
   16d54:	60 83       	st	Z, r22
   16d56:	08 95       	ret

00016d58 <thermostat_ring_set_power(unsigned char, unsigned char)>:
_Z25thermostat_ring_set_powerhh():
   16d58:	e8 2f       	mov	r30, r24
   16d5a:	f0 e0       	ldi	r31, 0x00	; 0
   16d5c:	e4 56       	subi	r30, 0x64	; 100
   16d5e:	fe 4e       	sbci	r31, 0xEE	; 238
   16d60:	60 83       	st	Z, r22
   16d62:	08 95       	ret

00016d64 <thermostat_init_pid()>:
_Z19thermostat_init_pidv():
   16d64:	2f 92       	push	r2
   16d66:	3f 92       	push	r3
   16d68:	4f 92       	push	r4
   16d6a:	5f 92       	push	r5
   16d6c:	6f 92       	push	r6
   16d6e:	7f 92       	push	r7
   16d70:	8f 92       	push	r8
   16d72:	9f 92       	push	r9
   16d74:	af 92       	push	r10
   16d76:	bf 92       	push	r11
   16d78:	cf 92       	push	r12
   16d7a:	df 92       	push	r13
   16d7c:	ef 92       	push	r14
   16d7e:	ff 92       	push	r15
   16d80:	0f 93       	push	r16
   16d82:	1f 93       	push	r17
   16d84:	cf 93       	push	r28
   16d86:	df 93       	push	r29
   16d88:	2f e0       	ldi	r18, 0x0F	; 15
   16d8a:	82 2e       	mov	r8, r18
   16d8c:	22 e1       	ldi	r18, 0x12	; 18
   16d8e:	92 2e       	mov	r9, r18
   16d90:	3b ef       	ldi	r19, 0xFB	; 251
   16d92:	43 2e       	mov	r4, r19
   16d94:	31 e1       	ldi	r19, 0x11	; 17
   16d96:	53 2e       	mov	r5, r19
   16d98:	47 ee       	ldi	r20, 0xE7	; 231
   16d9a:	24 2e       	mov	r2, r20
   16d9c:	41 e1       	ldi	r20, 0x11	; 17
   16d9e:	34 2e       	mov	r3, r20
   16da0:	d0 e0       	ldi	r29, 0x00	; 0
   16da2:	c0 e0       	ldi	r28, 0x00	; 0
   16da4:	8c e3       	ldi	r24, 0x3C	; 60
   16da6:	90 e0       	ldi	r25, 0x00	; 0
   16da8:	0f 94 d7 13 	call	0x227ae	; 0x227ae <operator new(unsigned int)>
   16dac:	3c 01       	movw	r6, r24
   16dae:	1f 92       	push	r1
   16db0:	1f 92       	push	r1
   16db2:	8f e3       	ldi	r24, 0x3F	; 63
   16db4:	8f 93       	push	r24
   16db6:	80 e8       	ldi	r24, 0x80	; 128
   16db8:	8f 93       	push	r24
   16dba:	1f 92       	push	r1
   16dbc:	1f 92       	push	r1
   16dbe:	a1 2c       	mov	r10, r1
   16dc0:	b1 2c       	mov	r11, r1
   16dc2:	80 ea       	ldi	r24, 0xA0	; 160
   16dc4:	c8 2e       	mov	r12, r24
   16dc6:	80 e4       	ldi	r24, 0x40	; 64
   16dc8:	d8 2e       	mov	r13, r24
   16dca:	e1 2c       	mov	r14, r1
   16dcc:	f1 2c       	mov	r15, r1
   16dce:	00 e0       	ldi	r16, 0x00	; 0
   16dd0:	10 e4       	ldi	r17, 0x40	; 64
   16dd2:	91 01       	movw	r18, r2
   16dd4:	a2 01       	movw	r20, r4
   16dd6:	b4 01       	movw	r22, r8
   16dd8:	c3 01       	movw	r24, r6
   16dda:	0e 94 e3 ea 	call	0x1d5c6	; 0x1d5c6 <PID::PID(double*, double*, double*, double, double, double, int)>
   16dde:	e0 91 9a 11 	lds	r30, 0x119A	; 0x80119a <array_pids>
   16de2:	f0 91 9b 11 	lds	r31, 0x119B	; 0x80119b <array_pids+0x1>
   16de6:	ec 0f       	add	r30, r28
   16de8:	fd 1f       	adc	r31, r29
   16dea:	71 82       	std	Z+1, r7	; 0x01
   16dec:	60 82       	st	Z, r6
   16dee:	61 e0       	ldi	r22, 0x01	; 1
   16df0:	70 e0       	ldi	r23, 0x00	; 0
   16df2:	c3 01       	movw	r24, r6
   16df4:	0e 94 1b ea 	call	0x1d436	; 0x1d436 <PID::SetMode(int)>
   16df8:	e0 91 9a 11 	lds	r30, 0x119A	; 0x80119a <array_pids>
   16dfc:	f0 91 9b 11 	lds	r31, 0x119B	; 0x80119b <array_pids+0x1>
   16e00:	ec 0f       	add	r30, r28
   16e02:	fd 1f       	adc	r31, r29
   16e04:	00 e0       	ldi	r16, 0x00	; 0
   16e06:	10 e0       	ldi	r17, 0x00	; 0
   16e08:	2f e7       	ldi	r18, 0x7F	; 127
   16e0a:	33 e4       	ldi	r19, 0x43	; 67
   16e0c:	40 e0       	ldi	r20, 0x00	; 0
   16e0e:	50 e0       	ldi	r21, 0x00	; 0
   16e10:	ba 01       	movw	r22, r20
   16e12:	80 81       	ld	r24, Z
   16e14:	91 81       	ldd	r25, Z+1	; 0x01
   16e16:	0e 94 53 e9 	call	0x1d2a6	; 0x1d2a6 <PID::SetOutputLimits(double, double)>
   16e1a:	84 e0       	ldi	r24, 0x04	; 4
   16e1c:	88 0e       	add	r8, r24
   16e1e:	91 1c       	adc	r9, r1
   16e20:	84 e0       	ldi	r24, 0x04	; 4
   16e22:	48 0e       	add	r4, r24
   16e24:	51 1c       	adc	r5, r1
   16e26:	84 e0       	ldi	r24, 0x04	; 4
   16e28:	28 0e       	add	r2, r24
   16e2a:	31 1c       	adc	r3, r1
   16e2c:	22 96       	adiw	r28, 0x02	; 2
   16e2e:	0f 90       	pop	r0
   16e30:	0f 90       	pop	r0
   16e32:	0f 90       	pop	r0
   16e34:	0f 90       	pop	r0
   16e36:	0f 90       	pop	r0
   16e38:	0f 90       	pop	r0
   16e3a:	ca 30       	cpi	r28, 0x0A	; 10
   16e3c:	d1 05       	cpc	r29, r1
   16e3e:	09 f0       	breq	.+2      	; 0x16e42 <thermostat_init_pid()+0xde>
   16e40:	b1 cf       	rjmp	.-158    	; 0x16da4 <thermostat_init_pid()+0x40>
   16e42:	df 91       	pop	r29
   16e44:	cf 91       	pop	r28
   16e46:	1f 91       	pop	r17
   16e48:	0f 91       	pop	r16
   16e4a:	ff 90       	pop	r15
   16e4c:	ef 90       	pop	r14
   16e4e:	df 90       	pop	r13
   16e50:	cf 90       	pop	r12
   16e52:	bf 90       	pop	r11
   16e54:	af 90       	pop	r10
   16e56:	9f 90       	pop	r9
   16e58:	8f 90       	pop	r8
   16e5a:	7f 90       	pop	r7
   16e5c:	6f 90       	pop	r6
   16e5e:	5f 90       	pop	r5
   16e60:	4f 90       	pop	r4
   16e62:	3f 90       	pop	r3
   16e64:	2f 90       	pop	r2
   16e66:	08 95       	ret

00016e68 <thermostat_pid_setdirection_direct(unsigned char)>:
_Z34thermostat_pid_setdirection_directh():
   16e68:	90 e0       	ldi	r25, 0x00	; 0
   16e6a:	88 0f       	add	r24, r24
   16e6c:	99 1f       	adc	r25, r25
   16e6e:	20 91 9a 11 	lds	r18, 0x119A	; 0x80119a <array_pids>
   16e72:	30 91 9b 11 	lds	r19, 0x119B	; 0x80119b <array_pids+0x1>
   16e76:	82 0f       	add	r24, r18
   16e78:	93 1f       	adc	r25, r19
   16e7a:	70 e0       	ldi	r23, 0x00	; 0
   16e7c:	60 e0       	ldi	r22, 0x00	; 0
   16e7e:	fc 01       	movw	r30, r24
   16e80:	80 81       	ld	r24, Z
   16e82:	91 81       	ldd	r25, Z+1	; 0x01
   16e84:	0c 94 32 ea 	jmp	0x1d464	; 0x1d464 <PID::SetControllerDirection(int)>

00016e88 <thermostat_pid_setdirection_reverse(unsigned char)>:
_Z35thermostat_pid_setdirection_reverseh():
   16e88:	90 e0       	ldi	r25, 0x00	; 0
   16e8a:	88 0f       	add	r24, r24
   16e8c:	99 1f       	adc	r25, r25
   16e8e:	20 91 9a 11 	lds	r18, 0x119A	; 0x80119a <array_pids>
   16e92:	30 91 9b 11 	lds	r19, 0x119B	; 0x80119b <array_pids+0x1>
   16e96:	82 0f       	add	r24, r18
   16e98:	93 1f       	adc	r25, r19
   16e9a:	61 e0       	ldi	r22, 0x01	; 1
   16e9c:	70 e0       	ldi	r23, 0x00	; 0
   16e9e:	fc 01       	movw	r30, r24
   16ea0:	80 81       	ld	r24, Z
   16ea2:	91 81       	ldd	r25, Z+1	; 0x01
   16ea4:	0c 94 32 ea 	jmp	0x1d464	; 0x1d464 <PID::SetControllerDirection(int)>

00016ea8 <thermostat_get_pid_p(unsigned char)>:
_Z20thermostat_get_pid_ph():
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:65
}

float thermostat_get_pid_p(uint8_t idx)
{
  return PID_p[idx];
   16ea8:	94 e0       	ldi	r25, 0x04	; 4
   16eaa:	89 9f       	mul	r24, r25
   16eac:	f0 01       	movw	r30, r0
   16eae:	11 24       	eor	r1, r1
   16eb0:	ed 52       	subi	r30, 0x2D	; 45
   16eb2:	fe 4e       	sbci	r31, 0xEE	; 238
   16eb4:	60 81       	ld	r22, Z
   16eb6:	71 81       	ldd	r23, Z+1	; 0x01
   16eb8:	82 81       	ldd	r24, Z+2	; 0x02
   16eba:	93 81       	ldd	r25, Z+3	; 0x03
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:66
}
   16ebc:	08 95       	ret

00016ebe <thermostat_pid_input(unsigned char, double)>:
_Z20thermostat_pid_inputhd():
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:70

void thermostat_pid_input(uint8_t idx, double value)
{
  PID_Input[idx] = value;
   16ebe:	94 e0       	ldi	r25, 0x04	; 4
   16ec0:	89 9f       	mul	r24, r25
   16ec2:	f0 01       	movw	r30, r0
   16ec4:	11 24       	eor	r1, r1
   16ec6:	e1 5f       	subi	r30, 0xF1	; 241
   16ec8:	fd 4e       	sbci	r31, 0xED	; 237
   16eca:	40 83       	st	Z, r20
   16ecc:	51 83       	std	Z+1, r21	; 0x01
   16ece:	62 83       	std	Z+2, r22	; 0x02
   16ed0:	73 83       	std	Z+3, r23	; 0x03
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:71
}
   16ed2:	08 95       	ret

00016ed4 <thermostat_pid_setpoint(unsigned char, double)>:
_Z23thermostat_pid_setpointhd():
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:75

void thermostat_pid_setpoint(uint8_t idx, double value)
{
  PID_Setpoint[idx] = value;
   16ed4:	94 e0       	ldi	r25, 0x04	; 4
   16ed6:	89 9f       	mul	r24, r25
   16ed8:	f0 01       	movw	r30, r0
   16eda:	11 24       	eor	r1, r1
   16edc:	e9 51       	subi	r30, 0x19	; 25
   16ede:	fe 4e       	sbci	r31, 0xEE	; 238
   16ee0:	40 83       	st	Z, r20
   16ee2:	51 83       	std	Z+1, r21	; 0x01
   16ee4:	62 83       	std	Z+2, r22	; 0x02
   16ee6:	73 83       	std	Z+3, r23	; 0x03
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:76
}
   16ee8:	08 95       	ret

00016eea <thermostat_pid_output(unsigned char)>:
_Z21thermostat_pid_outputh():
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:80

uint8_t thermostat_pid_output(uint8_t idx)
{
  return PID_Output[idx];
   16eea:	94 e0       	ldi	r25, 0x04	; 4
   16eec:	89 9f       	mul	r24, r25
   16eee:	f0 01       	movw	r30, r0
   16ef0:	11 24       	eor	r1, r1
   16ef2:	e5 50       	subi	r30, 0x05	; 5
   16ef4:	fe 4e       	sbci	r31, 0xEE	; 238
   16ef6:	60 81       	ld	r22, Z
   16ef8:	71 81       	ldd	r23, Z+1	; 0x01
   16efa:	82 81       	ldd	r24, Z+2	; 0x02
   16efc:	93 81       	ldd	r25, Z+3	; 0x03
   16efe:	0f 94 c6 14 	call	0x2298c	; 0x2298c <__fixunssfsi>
   16f02:	86 2f       	mov	r24, r22
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:81
}
   16f04:	08 95       	ret

00016f06 <thermostat_get_pid_i(unsigned char)>:
_Z20thermostat_get_pid_ih():
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:85

float thermostat_get_pid_i(uint8_t idx)
{
  return PID_i[idx];
   16f06:	94 e0       	ldi	r25, 0x04	; 4
   16f08:	89 9f       	mul	r24, r25
   16f0a:	f0 01       	movw	r30, r0
   16f0c:	11 24       	eor	r1, r1
   16f0e:	e1 54       	subi	r30, 0x41	; 65
   16f10:	fe 4e       	sbci	r31, 0xEE	; 238
   16f12:	60 81       	ld	r22, Z
   16f14:	71 81       	ldd	r23, Z+1	; 0x01
   16f16:	82 81       	ldd	r24, Z+2	; 0x02
   16f18:	93 81       	ldd	r25, Z+3	; 0x03
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:86
}
   16f1a:	08 95       	ret

00016f1c <thermostat_get_pid_d(unsigned char)>:
_Z20thermostat_get_pid_dh():
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:90

float thermostat_get_pid_d(uint8_t idx)
{
  return PID_d[idx];
   16f1c:	94 e0       	ldi	r25, 0x04	; 4
   16f1e:	89 9f       	mul	r24, r25
   16f20:	f0 01       	movw	r30, r0
   16f22:	11 24       	eor	r1, r1
   16f24:	e5 55       	subi	r30, 0x55	; 85
   16f26:	fe 4e       	sbci	r31, 0xEE	; 238
   16f28:	60 81       	ld	r22, Z
   16f2a:	71 81       	ldd	r23, Z+1	; 0x01
   16f2c:	82 81       	ldd	r24, Z+2	; 0x02
   16f2e:	93 81       	ldd	r25, Z+3	; 0x03
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:91
}
   16f30:	08 95       	ret

00016f32 <thermostat_get_pid_time(unsigned char)>:
_Z23thermostat_get_pid_timeh():
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:95

uint8_t thermostat_get_pid_time(uint8_t idx)
{
  return PID_time[idx];
   16f32:	e8 2f       	mov	r30, r24
   16f34:	f0 e0       	ldi	r31, 0x00	; 0
   16f36:	ea 55       	subi	r30, 0x5A	; 90
   16f38:	fe 4e       	sbci	r31, 0xEE	; 238
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:96
}
   16f3a:	80 81       	ld	r24, Z
   16f3c:	08 95       	ret

00016f3e <thermostat_ring_get_name(unsigned char, char*)>:
_Z24thermostat_ring_get_namehPc():
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:100

/// ziska/nastavi nazev termostatu
void thermostat_ring_get_name(uint8_t idx, char *name)
{
   16f3e:	ef 92       	push	r14
   16f40:	ff 92       	push	r15
   16f42:	0f 93       	push	r16
   16f44:	1f 93       	push	r17
   16f46:	cf 93       	push	r28
   16f48:	df 93       	push	r29
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:104
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i);
   16f4a:	91 e2       	ldi	r25, 0x21	; 33
   16f4c:	89 9f       	mul	r24, r25
   16f4e:	e0 01       	movw	r28, r0
   16f50:	11 24       	eor	r1, r1
   16f52:	8e 01       	movw	r16, r28
   16f54:	04 5b       	subi	r16, 0xB4	; 180
   16f56:	1e 4f       	sbci	r17, 0xFE	; 254
   16f58:	7b 01       	movw	r14, r22
   16f5a:	cb 5a       	subi	r28, 0xAB	; 171
   16f5c:	de 4f       	sbci	r29, 0xFE	; 254
   16f5e:	c8 01       	movw	r24, r16
   16f60:	0e 94 9c b6 	call	0x16d38	; 0x16d38 <EEPROMClass::read(int) [clone .isra.0]>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:105
    name[i] = t;
   16f64:	f7 01       	movw	r30, r14
   16f66:	81 93       	st	Z+, r24
   16f68:	7f 01       	movw	r14, r30
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:106
    if (t == 0) break;
   16f6a:	88 23       	and	r24, r24
   16f6c:	29 f0       	breq	.+10     	; 0x16f78 <thermostat_ring_get_name(unsigned char, char*)+0x3a>
   16f6e:	0f 5f       	subi	r16, 0xFF	; 255
   16f70:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:102 (discriminator 2)

/// ziska/nastavi nazev termostatu
void thermostat_ring_get_name(uint8_t idx, char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
   16f72:	0c 17       	cp	r16, r28
   16f74:	1d 07       	cpc	r17, r29
   16f76:	99 f7       	brne	.-26     	; 0x16f5e <thermostat_ring_get_name(unsigned char, char*)+0x20>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:108
  {
    t = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i);
    name[i] = t;
    if (t == 0) break;
  }
}
   16f78:	df 91       	pop	r29
   16f7a:	cf 91       	pop	r28
   16f7c:	1f 91       	pop	r17
   16f7e:	0f 91       	pop	r16
   16f80:	ff 90       	pop	r15
   16f82:	ef 90       	pop	r14
   16f84:	08 95       	ret

00016f86 <thermostat_ring_set_name(unsigned char, char*)>:
_Z24thermostat_ring_set_namehPc():
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:110
void thermostat_ring_set_name(uint8_t idx, char *name)
{
   16f86:	df 92       	push	r13
   16f88:	ef 92       	push	r14
   16f8a:	ff 92       	push	r15
   16f8c:	0f 93       	push	r16
   16f8e:	1f 93       	push	r17
   16f90:	cf 93       	push	r28
   16f92:	df 93       	push	r29
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:115
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = name[i];
    EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i, t);
   16f94:	91 e2       	ldi	r25, 0x21	; 33
   16f96:	89 9f       	mul	r24, r25
   16f98:	e0 01       	movw	r28, r0
   16f9a:	11 24       	eor	r1, r1
   16f9c:	7b 01       	movw	r14, r22
   16f9e:	8e 01       	movw	r16, r28
   16fa0:	04 5b       	subi	r16, 0xB4	; 180
   16fa2:	1e 4f       	sbci	r17, 0xFE	; 254
   16fa4:	cb 5a       	subi	r28, 0xAB	; 171
   16fa6:	de 4f       	sbci	r29, 0xFE	; 254
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:114
void thermostat_ring_set_name(uint8_t idx, char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = name[i];
   16fa8:	f7 01       	movw	r30, r14
   16faa:	d1 90       	ld	r13, Z+
   16fac:	7f 01       	movw	r14, r30
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:115
    EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i, t);
   16fae:	6d 2d       	mov	r22, r13
   16fb0:	c8 01       	movw	r24, r16
   16fb2:	0e 94 9e b6 	call	0x16d3c	; 0x16d3c <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:116
    if (t == 0) break;
   16fb6:	dd 20       	and	r13, r13
   16fb8:	29 f0       	breq	.+10     	; 0x16fc4 <thermostat_ring_set_name(unsigned char, char*)+0x3e>
   16fba:	0f 5f       	subi	r16, 0xFF	; 255
   16fbc:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:112 (discriminator 2)
  }
}
void thermostat_ring_set_name(uint8_t idx, char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
   16fbe:	0c 17       	cp	r16, r28
   16fc0:	1d 07       	cpc	r17, r29
   16fc2:	91 f7       	brne	.-28     	; 0x16fa8 <thermostat_ring_set_name(unsigned char, char*)+0x22>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:118
  {
    t = name[i];
    EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i, t);
    if (t == 0) break;
  }
}
   16fc4:	df 91       	pop	r29
   16fc6:	cf 91       	pop	r28
   16fc8:	1f 91       	pop	r17
   16fca:	0f 91       	pop	r16
   16fcc:	ff 90       	pop	r15
   16fce:	ef 90       	pop	r14
   16fd0:	df 90       	pop	r13
   16fd2:	08 95       	ret

00016fd4 <thermostat_ring_get_output(unsigned char)>:
_Z26thermostat_ring_get_outputh():
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:123

/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_output(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
   16fd4:	21 e2       	ldi	r18, 0x21	; 33
   16fd6:	82 9f       	mul	r24, r18
   16fd8:	c0 01       	movw	r24, r0
   16fda:	11 24       	eor	r1, r1
   16fdc:	81 5a       	subi	r24, 0xA1	; 161
   16fde:	9e 4f       	sbci	r25, 0xFE	; 254
   16fe0:	0c 94 9c b6 	jmp	0x16d38	; 0x16d38 <EEPROMClass::read(int) [clone .isra.0]>

00016fe4 <thermostat_ring_set_output(unsigned char, unsigned char)>:
_Z26thermostat_ring_set_outputhh():
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:127
}
void thermostat_ring_set_output(uint8_t idx, uint8_t output)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output, output);
   16fe4:	21 e2       	ldi	r18, 0x21	; 33
   16fe6:	82 9f       	mul	r24, r18
   16fe8:	c0 01       	movw	r24, r0
   16fea:	11 24       	eor	r1, r1
   16fec:	81 5a       	subi	r24, 0xA1	; 161
   16fee:	9e 4f       	sbci	r25, 0xFE	; 254
   16ff0:	0c 94 9e b6 	jmp	0x16d3c	; 0x16d3c <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

00016ff4 <thermostat_ring_get_active(unsigned char)>:
_Z26thermostat_ring_get_activeh():
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:133
}
////////////////////////////////////////////////////////////////////////////////////////////////////////
/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_active(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active);
   16ff4:	21 e2       	ldi	r18, 0x21	; 33
   16ff6:	82 9f       	mul	r24, r18
   16ff8:	c0 01       	movw	r24, r0
   16ffa:	11 24       	eor	r1, r1
   16ffc:	83 5a       	subi	r24, 0xA3	; 163
   16ffe:	9e 4f       	sbci	r25, 0xFE	; 254
   17000:	0c 94 9c b6 	jmp	0x16d38	; 0x16d38 <EEPROMClass::read(int) [clone .isra.0]>

00017004 <thermostat_ring_set_active(unsigned char, unsigned char)>:
_Z26thermostat_ring_set_activehh():
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:137
}
void thermostat_ring_set_active(uint8_t idx, uint8_t ready)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active, ready);
   17004:	21 e2       	ldi	r18, 0x21	; 33
   17006:	82 9f       	mul	r24, r18
   17008:	c0 01       	movw	r24, r0
   1700a:	11 24       	eor	r1, r1
   1700c:	83 5a       	subi	r24, 0xA3	; 163
   1700e:	9e 4f       	sbci	r25, 0xFE	; 254
   17010:	0c 94 9e b6 	jmp	0x16d3c	; 0x16d3c <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

00017014 <thermostat_ring_get_program_id(unsigned char)>:
_Z30thermostat_ring_get_program_idh():
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:144


//// nastaveni programu k ringu termostatu
uint8_t thermostat_ring_get_program_id(uint8_t idx)
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
   17014:	21 e2       	ldi	r18, 0x21	; 33
   17016:	82 9f       	mul	r24, r18
   17018:	c0 01       	movw	r24, r0
   1701a:	11 24       	eor	r1, r1
   1701c:	85 5a       	subi	r24, 0xA5	; 165
   1701e:	9e 4f       	sbci	r25, 0xFE	; 254
   17020:	0c 94 9c b6 	jmp	0x16d38	; 0x16d38 <EEPROMClass::read(int) [clone .isra.0]>

00017024 <thermostat_ring_set_program_id(unsigned char, unsigned char)>:
_Z30thermostat_ring_set_program_idhh():
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:148
}
void thermostat_ring_set_program_id(uint8_t idx, uint8_t id)
{
  return EEPROM.write((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program, id);
   17024:	21 e2       	ldi	r18, 0x21	; 33
   17026:	82 9f       	mul	r24, r18
   17028:	c0 01       	movw	r24, r0
   1702a:	11 24       	eor	r1, r1
   1702c:	85 5a       	subi	r24, 0xA5	; 165
   1702e:	9e 4f       	sbci	r25, 0xFE	; 254
   17030:	0c 94 9e b6 	jmp	0x16d3c	; 0x16d3c <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

00017034 <thermostat_ring_get_mezni(unsigned char)>:
_Z25thermostat_ring_get_meznih():
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:153
}
///////////////////////////////////////////////////////////////////////////////////////////////////////
///mezni rozhodovaci teplota
int thermostat_ring_get_mezni(uint8_t idx)
{
   17034:	0f 93       	push	r16
   17036:	1f 93       	push	r17
   17038:	cf 93       	push	r28
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:154
  return (EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni) << 8) + EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1);
   1703a:	91 e2       	ldi	r25, 0x21	; 33
   1703c:	89 9f       	mul	r24, r25
   1703e:	80 01       	movw	r16, r0
   17040:	11 24       	eor	r1, r1
   17042:	c8 01       	movw	r24, r16
   17044:	8a 5a       	subi	r24, 0xAA	; 170
   17046:	9e 4f       	sbci	r25, 0xFE	; 254
   17048:	0e 94 9c b6 	call	0x16d38	; 0x16d38 <EEPROMClass::read(int) [clone .isra.0]>
   1704c:	c8 2f       	mov	r28, r24
   1704e:	c8 01       	movw	r24, r16
   17050:	89 5a       	subi	r24, 0xA9	; 169
   17052:	9e 4f       	sbci	r25, 0xFE	; 254
   17054:	0e 94 9c b6 	call	0x16d38	; 0x16d38 <EEPROMClass::read(int) [clone .isra.0]>
   17058:	2c 2f       	mov	r18, r28
   1705a:	30 e0       	ldi	r19, 0x00	; 0
   1705c:	32 2f       	mov	r19, r18
   1705e:	22 27       	eor	r18, r18
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:155
}
   17060:	82 0f       	add	r24, r18
   17062:	93 2f       	mov	r25, r19
   17064:	91 1d       	adc	r25, r1
   17066:	cf 91       	pop	r28
   17068:	1f 91       	pop	r17
   1706a:	0f 91       	pop	r16
   1706c:	08 95       	ret

0001706e <thermostat_ring_set_mezni(unsigned char, int)>:
_Z25thermostat_ring_set_meznihi():
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:157
void thermostat_ring_set_mezni(uint8_t idx, int temp)
{
   1706e:	1f 93       	push	r17
   17070:	cf 93       	push	r28
   17072:	df 93       	push	r29
   17074:	16 2f       	mov	r17, r22
   17076:	67 2f       	mov	r22, r23
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:158
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni, temp >> 8);
   17078:	91 e2       	ldi	r25, 0x21	; 33
   1707a:	89 9f       	mul	r24, r25
   1707c:	e0 01       	movw	r28, r0
   1707e:	11 24       	eor	r1, r1
   17080:	ce 01       	movw	r24, r28
   17082:	8a 5a       	subi	r24, 0xAA	; 170
   17084:	9e 4f       	sbci	r25, 0xFE	; 254
   17086:	0e 94 9e b6 	call	0x16d3c	; 0x16d3c <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:159
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1, temp & 0xff);
   1708a:	61 2f       	mov	r22, r17
   1708c:	ce 01       	movw	r24, r28
   1708e:	89 5a       	subi	r24, 0xA9	; 169
   17090:	9e 4f       	sbci	r25, 0xFE	; 254
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:160
}
   17092:	df 91       	pop	r29
   17094:	cf 91       	pop	r28
   17096:	1f 91       	pop	r17
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:159
  return (EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni) << 8) + EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1);
}
void thermostat_ring_set_mezni(uint8_t idx, int temp)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni, temp >> 8);
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1, temp & 0xff);
   17098:	0c 94 9e b6 	jmp	0x16d3c	; 0x16d3c <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

0001709c <thermostat_ring_get_asociate_tds(unsigned char)>:
_Z32thermostat_ring_get_asociate_tdsh():
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:166


/// ziska/nastavi cislo tds k ringu termostatu
uint8_t thermostat_ring_get_asociate_tds(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
   1709c:	21 e2       	ldi	r18, 0x21	; 33
   1709e:	82 9f       	mul	r24, r18
   170a0:	c0 01       	movw	r24, r0
   170a2:	11 24       	eor	r1, r1
   170a4:	84 5a       	subi	r24, 0xA4	; 164
   170a6:	9e 4f       	sbci	r25, 0xFE	; 254
   170a8:	0c 94 9c b6 	jmp	0x16d38	; 0x16d38 <EEPROMClass::read(int) [clone .isra.0]>

000170ac <thermostat_ring_set_asociate_tds(unsigned char, unsigned char)>:
_Z32thermostat_ring_set_asociate_tdshh():
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:170
}
void thermostat_ring_set_asociate_tds(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds, id);
   170ac:	21 e2       	ldi	r18, 0x21	; 33
   170ae:	82 9f       	mul	r24, r18
   170b0:	c0 01       	movw	r24, r0
   170b2:	11 24       	eor	r1, r1
   170b4:	84 5a       	subi	r24, 0xA4	; 164
   170b6:	9e 4f       	sbci	r25, 0xFE	; 254
   170b8:	0c 94 9e b6 	jmp	0x16d3c	; 0x16d3c <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

000170bc <thermostat_ring_get_mode(unsigned char)>:
_Z24thermostat_ring_get_modeh():
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:176
}
//////////////////////////////////////////////////////////////////////////////////////////////////////
//// nastaveni/ziska modu k ringu termostatu
uint8_t thermostat_ring_get_mode(uint8_t idx)
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_mode);
   170bc:	21 e2       	ldi	r18, 0x21	; 33
   170be:	82 9f       	mul	r24, r18
   170c0:	c0 01       	movw	r24, r0
   170c2:	11 24       	eor	r1, r1
   170c4:	82 5a       	subi	r24, 0xA2	; 162
   170c6:	9e 4f       	sbci	r25, 0xFE	; 254
   170c8:	0c 94 9c b6 	jmp	0x16d38	; 0x16d38 <EEPROMClass::read(int) [clone .isra.0]>

000170cc <thermostat_ring_set_mode(unsigned char, unsigned char)>:
_Z24thermostat_ring_set_modehh():
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:180
}
void thermostat_ring_set_mode(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mode, id);
   170cc:	21 e2       	ldi	r18, 0x21	; 33
   170ce:	82 9f       	mul	r24, r18
   170d0:	c0 01       	movw	r24, r0
   170d2:	11 24       	eor	r1, r1
   170d4:	82 5a       	subi	r24, 0xA2	; 162
   170d6:	9e 4f       	sbci	r25, 0xFE	; 254
   170d8:	0c 94 9e b6 	jmp	0x16d3c	; 0x16d3c <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

000170dc <thermostat_ring_get_mode_1(unsigned char, unsigned char)>:
_Z26thermostat_ring_get_mode_1hh():
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:183
}
bool thermostat_ring_get_mode_1(uint8_t idx, uint8_t args)
{
   170dc:	cf 93       	push	r28
   170de:	c6 2f       	mov	r28, r22
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:185
  bool ret = false;
  if (thermostat_ring_get_mode(idx) == args)
   170e0:	0e 94 5e b8 	call	0x170bc	; 0x170bc <thermostat_ring_get_mode(unsigned char)>
   170e4:	91 e0       	ldi	r25, 0x01	; 1
   170e6:	8c 13       	cpse	r24, r28
   170e8:	90 e0       	ldi	r25, 0x00	; 0
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:188
    ret = true;
  return ret;
}
   170ea:	89 2f       	mov	r24, r25
   170ec:	cf 91       	pop	r28
   170ee:	08 95       	ret

000170f0 <thermostat_ring_get_status_data(unsigned char)>:
_Z31thermostat_ring_get_status_datah():
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:193
//////////////////////////////////////
//// nastaveni/ziska modu k ringu termostatu
uint8_t thermostat_ring_get_status_data(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites);
   170f0:	21 e2       	ldi	r18, 0x21	; 33
   170f2:	82 9f       	mul	r24, r18
   170f4:	c0 01       	movw	r24, r0
   170f6:	11 24       	eor	r1, r1
   170f8:	88 5a       	subi	r24, 0xA8	; 168
   170fa:	9e 4f       	sbci	r25, 0xFE	; 254
   170fc:	0c 94 9c b6 	jmp	0x16d38	; 0x16d38 <EEPROMClass::read(int) [clone .isra.0]>

00017100 <thermostat_ring_get_status_bites(unsigned char, unsigned char)>:
_Z32thermostat_ring_get_status_biteshh():
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:196
}
uint8_t thermostat_ring_get_status_bites(uint8_t idx, uint8_t bits)
{
   17100:	cf 93       	push	r28
   17102:	c6 2f       	mov	r28, r22
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:197
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
   17104:	21 e2       	ldi	r18, 0x21	; 33
   17106:	82 9f       	mul	r24, r18
   17108:	c0 01       	movw	r24, r0
   1710a:	11 24       	eor	r1, r1
   1710c:	88 5a       	subi	r24, 0xA8	; 168
   1710e:	9e 4f       	sbci	r25, 0xFE	; 254
   17110:	0e 94 9c b6 	call	0x16d38	; 0x16d38 <EEPROMClass::read(int) [clone .isra.0]>
   17114:	21 e0       	ldi	r18, 0x01	; 1
   17116:	30 e0       	ldi	r19, 0x00	; 0
   17118:	01 c0       	rjmp	.+2      	; 0x1711c <thermostat_ring_get_status_bites(unsigned char, unsigned char)+0x1c>
   1711a:	22 0f       	add	r18, r18
   1711c:	ca 95       	dec	r28
   1711e:	ea f7       	brpl	.-6      	; 0x1711a <thermostat_ring_get_status_bites(unsigned char, unsigned char)+0x1a>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:198
}
   17120:	82 23       	and	r24, r18
   17122:	cf 91       	pop	r28
   17124:	08 95       	ret

00017126 <thermostat_ring_set_status_bites(unsigned char, unsigned char)>:
_Z32thermostat_ring_set_status_biteshh():
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:201
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
   17126:	21 e2       	ldi	r18, 0x21	; 33
   17128:	82 9f       	mul	r24, r18
   1712a:	c0 01       	movw	r24, r0
   1712c:	11 24       	eor	r1, r1
   1712e:	88 5a       	subi	r24, 0xA8	; 168
   17130:	9e 4f       	sbci	r25, 0xFE	; 254
   17132:	0c 94 9e b6 	jmp	0x16d3c	; 0x16d3c <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

00017136 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char)>:
_Z28thermostat_ring_update_biteshhh():
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:204
}
void thermostat_ring_update_bites(uint8_t idx, uint8_t bits, uint8_t sets)
{
   17136:	1f 93       	push	r17
   17138:	cf 93       	push	r28
   1713a:	df 93       	push	r29
   1713c:	c8 2f       	mov	r28, r24
   1713e:	16 2f       	mov	r17, r22
   17140:	d4 2f       	mov	r29, r20
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:205
  uint8_t b = thermostat_ring_get_status_data(idx);
   17142:	0e 94 78 b8 	call	0x170f0	; 0x170f0 <thermostat_ring_get_status_data(unsigned char)>
   17146:	61 e0       	ldi	r22, 0x01	; 1
   17148:	70 e0       	ldi	r23, 0x00	; 0
   1714a:	01 c0       	rjmp	.+2      	; 0x1714e <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char)+0x18>
   1714c:	66 0f       	add	r22, r22
   1714e:	1a 95       	dec	r17
   17150:	ea f7       	brpl	.-6      	; 0x1714c <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char)+0x16>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:206
  if (sets == 0) cbi(b, bits);
   17152:	d1 11       	cpse	r29, r1
   17154:	08 c0       	rjmp	.+16     	; 0x17166 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char)+0x30>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:206 (discriminator 1)
   17156:	60 95       	com	r22
   17158:	68 23       	and	r22, r24
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:208
  else sbi(b, bits);
  thermostat_ring_set_status_bites(idx, b);
   1715a:	8c 2f       	mov	r24, r28
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:209
}
   1715c:	df 91       	pop	r29
   1715e:	cf 91       	pop	r28
   17160:	1f 91       	pop	r17
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:208
void thermostat_ring_update_bites(uint8_t idx, uint8_t bits, uint8_t sets)
{
  uint8_t b = thermostat_ring_get_status_data(idx);
  if (sets == 0) cbi(b, bits);
  else sbi(b, bits);
  thermostat_ring_set_status_bites(idx, b);
   17162:	0c 94 93 b8 	jmp	0x17126	; 0x17126 <thermostat_ring_set_status_bites(unsigned char, unsigned char)>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:207
}
void thermostat_ring_update_bites(uint8_t idx, uint8_t bits, uint8_t sets)
{
  uint8_t b = thermostat_ring_get_status_data(idx);
  if (sets == 0) cbi(b, bits);
  else sbi(b, bits);
   17166:	68 2b       	or	r22, r24
   17168:	f8 cf       	rjmp	.-16     	; 0x1715a <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char)+0x24>

0001716a <thermostat_ring_update_pid_parameters(unsigned char)>:
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:218




void thermostat_ring_update_pid_parameters(uint8_t idx)
{
   1716a:	af 92       	push	r10
   1716c:	bf 92       	push	r11
   1716e:	cf 92       	push	r12
   17170:	df 92       	push	r13
   17172:	ef 92       	push	r14
   17174:	ff 92       	push	r15
   17176:	0f 93       	push	r16
   17178:	1f 93       	push	r17
   1717a:	cf 93       	push	r28
   1717c:	df 93       	push	r29
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:219
  array_pids[idx]->SetTunings(PID_p[idx], PID_i[idx], PID_d[idx]);
   1717e:	c8 2f       	mov	r28, r24
   17180:	d0 e0       	ldi	r29, 0x00	; 0
   17182:	5e 01       	movw	r10, r28
   17184:	aa 0c       	add	r10, r10
   17186:	bb 1c       	adc	r11, r11
   17188:	ce 01       	movw	r24, r28
   1718a:	88 0f       	add	r24, r24
   1718c:	99 1f       	adc	r25, r25
   1718e:	88 0f       	add	r24, r24
   17190:	99 1f       	adc	r25, r25
   17192:	fc 01       	movw	r30, r24
   17194:	e5 55       	subi	r30, 0x55	; 85
   17196:	fe 4e       	sbci	r31, 0xEE	; 238
   17198:	c0 80       	ld	r12, Z
   1719a:	d1 80       	ldd	r13, Z+1	; 0x01
   1719c:	e2 80       	ldd	r14, Z+2	; 0x02
   1719e:	f3 80       	ldd	r15, Z+3	; 0x03
   171a0:	fc 01       	movw	r30, r24
   171a2:	e1 54       	subi	r30, 0x41	; 65
   171a4:	fe 4e       	sbci	r31, 0xEE	; 238
   171a6:	00 81       	ld	r16, Z
   171a8:	11 81       	ldd	r17, Z+1	; 0x01
   171aa:	22 81       	ldd	r18, Z+2	; 0x02
   171ac:	33 81       	ldd	r19, Z+3	; 0x03
   171ae:	8d 52       	subi	r24, 0x2D	; 45
   171b0:	9e 4e       	sbci	r25, 0xEE	; 238
   171b2:	fc 01       	movw	r30, r24
   171b4:	40 81       	ld	r20, Z
   171b6:	51 81       	ldd	r21, Z+1	; 0x01
   171b8:	62 81       	ldd	r22, Z+2	; 0x02
   171ba:	73 81       	ldd	r23, Z+3	; 0x03
   171bc:	e0 91 9a 11 	lds	r30, 0x119A	; 0x80119a <array_pids>
   171c0:	f0 91 9b 11 	lds	r31, 0x119B	; 0x80119b <array_pids+0x1>
   171c4:	ea 0d       	add	r30, r10
   171c6:	fb 1d       	adc	r31, r11
   171c8:	80 81       	ld	r24, Z
   171ca:	91 81       	ldd	r25, Z+1	; 0x01
   171cc:	0e 94 f0 e8 	call	0x1d1e0	; 0x1d1e0 <PID::SetTunings(double, double, double)>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:220
  array_pids[idx]->SetSampleTime(PID_time[idx]);
   171d0:	ca 55       	subi	r28, 0x5A	; 90
   171d2:	de 4e       	sbci	r29, 0xEE	; 238
   171d4:	68 81       	ld	r22, Y
   171d6:	70 e0       	ldi	r23, 0x00	; 0
   171d8:	80 91 9a 11 	lds	r24, 0x119A	; 0x80119a <array_pids>
   171dc:	90 91 9b 11 	lds	r25, 0x119B	; 0x80119b <array_pids+0x1>
   171e0:	a8 0e       	add	r10, r24
   171e2:	b9 1e       	adc	r11, r25
   171e4:	f5 01       	movw	r30, r10
   171e6:	80 81       	ld	r24, Z
   171e8:	91 81       	ldd	r25, Z+1	; 0x01
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:221
}
   171ea:	df 91       	pop	r29
   171ec:	cf 91       	pop	r28
   171ee:	1f 91       	pop	r17
   171f0:	0f 91       	pop	r16
   171f2:	ff 90       	pop	r15
   171f4:	ef 90       	pop	r14
   171f6:	df 90       	pop	r13
   171f8:	cf 90       	pop	r12
   171fa:	bf 90       	pop	r11
   171fc:	af 90       	pop	r10
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:220


void thermostat_ring_update_pid_parameters(uint8_t idx)
{
  array_pids[idx]->SetTunings(PID_p[idx], PID_i[idx], PID_d[idx]);
  array_pids[idx]->SetSampleTime(PID_time[idx]);
   171fe:	0c 94 06 e9 	jmp	0x1d20c	; 0x1d20c <PID::SetSampleTime(int)>

00017202 <thermostat_ring_get_pid_eeprom(unsigned char)>:
_Z30thermostat_ring_get_pid_eepromh():
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:224
}

void thermostat_ring_get_pid_eeprom(uint8_t idx)
{
   17202:	ef 92       	push	r14
   17204:	ff 92       	push	r15
   17206:	0f 93       	push	r16
   17208:	1f 93       	push	r17
   1720a:	cf 93       	push	r28
   1720c:	df 93       	push	r29
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:225
  PID_p[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_p);
   1720e:	e8 2e       	mov	r14, r24
   17210:	f1 2c       	mov	r15, r1
   17212:	91 e2       	ldi	r25, 0x21	; 33
   17214:	89 9f       	mul	r24, r25
   17216:	e0 01       	movw	r28, r0
   17218:	11 24       	eor	r1, r1
   1721a:	ce 01       	movw	r24, r28
   1721c:	80 5a       	subi	r24, 0xA0	; 160
   1721e:	9e 4f       	sbci	r25, 0xFE	; 254
   17220:	0e 94 09 e4 	call	0x1c812	; 0x1c812 <EEPROMreadFloat(unsigned int)>
   17224:	87 01       	movw	r16, r14
   17226:	00 0f       	add	r16, r16
   17228:	11 1f       	adc	r17, r17
   1722a:	00 0f       	add	r16, r16
   1722c:	11 1f       	adc	r17, r17
   1722e:	f8 01       	movw	r30, r16
   17230:	ed 52       	subi	r30, 0x2D	; 45
   17232:	fe 4e       	sbci	r31, 0xEE	; 238
   17234:	60 83       	st	Z, r22
   17236:	71 83       	std	Z+1, r23	; 0x01
   17238:	82 83       	std	Z+2, r24	; 0x02
   1723a:	93 83       	std	Z+3, r25	; 0x03
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:226
  PID_i[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_i);
   1723c:	ce 01       	movw	r24, r28
   1723e:	8c 59       	subi	r24, 0x9C	; 156
   17240:	9e 4f       	sbci	r25, 0xFE	; 254
   17242:	0e 94 09 e4 	call	0x1c812	; 0x1c812 <EEPROMreadFloat(unsigned int)>
   17246:	f8 01       	movw	r30, r16
   17248:	e1 54       	subi	r30, 0x41	; 65
   1724a:	fe 4e       	sbci	r31, 0xEE	; 238
   1724c:	60 83       	st	Z, r22
   1724e:	71 83       	std	Z+1, r23	; 0x01
   17250:	82 83       	std	Z+2, r24	; 0x02
   17252:	93 83       	std	Z+3, r25	; 0x03
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:227
  PID_d[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d);
   17254:	ce 01       	movw	r24, r28
   17256:	88 59       	subi	r24, 0x98	; 152
   17258:	9e 4f       	sbci	r25, 0xFE	; 254
   1725a:	0e 94 09 e4 	call	0x1c812	; 0x1c812 <EEPROMreadFloat(unsigned int)>
   1725e:	f8 01       	movw	r30, r16
   17260:	e5 55       	subi	r30, 0x55	; 85
   17262:	fe 4e       	sbci	r31, 0xEE	; 238
   17264:	60 83       	st	Z, r22
   17266:	71 83       	std	Z+1, r23	; 0x01
   17268:	82 83       	std	Z+2, r24	; 0x02
   1726a:	93 83       	std	Z+3, r25	; 0x03
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:228
  PID_time[idx] = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer);
   1726c:	ce 01       	movw	r24, r28
   1726e:	84 59       	subi	r24, 0x94	; 148
   17270:	9e 4f       	sbci	r25, 0xFE	; 254
   17272:	0e 94 9c b6 	call	0x16d38	; 0x16d38 <EEPROMClass::read(int) [clone .isra.0]>
   17276:	f7 01       	movw	r30, r14
   17278:	ea 55       	subi	r30, 0x5A	; 90
   1727a:	fe 4e       	sbci	r31, 0xEE	; 238
   1727c:	80 83       	st	Z, r24
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:229
}
   1727e:	df 91       	pop	r29
   17280:	cf 91       	pop	r28
   17282:	1f 91       	pop	r17
   17284:	0f 91       	pop	r16
   17286:	ff 90       	pop	r15
   17288:	ef 90       	pop	r14
   1728a:	08 95       	ret

0001728c <thermostat_ring_set_pid_eeprom(unsigned char)>:
_Z30thermostat_ring_set_pid_eepromh():
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:232

void thermostat_ring_set_pid_eeprom(uint8_t idx)
{
   1728c:	ef 92       	push	r14
   1728e:	ff 92       	push	r15
   17290:	0f 93       	push	r16
   17292:	1f 93       	push	r17
   17294:	cf 93       	push	r28
   17296:	df 93       	push	r29
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:233
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_p, PID_p[idx]);
   17298:	e8 2e       	mov	r14, r24
   1729a:	f1 2c       	mov	r15, r1
   1729c:	91 e2       	ldi	r25, 0x21	; 33
   1729e:	89 9f       	mul	r24, r25
   172a0:	e0 01       	movw	r28, r0
   172a2:	11 24       	eor	r1, r1
   172a4:	87 01       	movw	r16, r14
   172a6:	00 0f       	add	r16, r16
   172a8:	11 1f       	adc	r17, r17
   172aa:	00 0f       	add	r16, r16
   172ac:	11 1f       	adc	r17, r17
   172ae:	f8 01       	movw	r30, r16
   172b0:	ed 52       	subi	r30, 0x2D	; 45
   172b2:	fe 4e       	sbci	r31, 0xEE	; 238
   172b4:	40 81       	ld	r20, Z
   172b6:	51 81       	ldd	r21, Z+1	; 0x01
   172b8:	62 81       	ldd	r22, Z+2	; 0x02
   172ba:	73 81       	ldd	r23, Z+3	; 0x03
   172bc:	ce 01       	movw	r24, r28
   172be:	80 5a       	subi	r24, 0xA0	; 160
   172c0:	9e 4f       	sbci	r25, 0xFE	; 254
   172c2:	0e 94 3b e4 	call	0x1c876	; 0x1c876 <EEPROMwriteFloat(unsigned int, float)>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:234
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_i, PID_i[idx]);
   172c6:	f8 01       	movw	r30, r16
   172c8:	e1 54       	subi	r30, 0x41	; 65
   172ca:	fe 4e       	sbci	r31, 0xEE	; 238
   172cc:	40 81       	ld	r20, Z
   172ce:	51 81       	ldd	r21, Z+1	; 0x01
   172d0:	62 81       	ldd	r22, Z+2	; 0x02
   172d2:	73 81       	ldd	r23, Z+3	; 0x03
   172d4:	ce 01       	movw	r24, r28
   172d6:	8c 59       	subi	r24, 0x9C	; 156
   172d8:	9e 4f       	sbci	r25, 0xFE	; 254
   172da:	0e 94 3b e4 	call	0x1c876	; 0x1c876 <EEPROMwriteFloat(unsigned int, float)>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:235
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d, PID_d[idx]);
   172de:	f8 01       	movw	r30, r16
   172e0:	e5 55       	subi	r30, 0x55	; 85
   172e2:	fe 4e       	sbci	r31, 0xEE	; 238
   172e4:	40 81       	ld	r20, Z
   172e6:	51 81       	ldd	r21, Z+1	; 0x01
   172e8:	62 81       	ldd	r22, Z+2	; 0x02
   172ea:	73 81       	ldd	r23, Z+3	; 0x03
   172ec:	ce 01       	movw	r24, r28
   172ee:	88 59       	subi	r24, 0x98	; 152
   172f0:	9e 4f       	sbci	r25, 0xFE	; 254
   172f2:	0e 94 3b e4 	call	0x1c876	; 0x1c876 <EEPROMwriteFloat(unsigned int, float)>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:236
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
   172f6:	f7 01       	movw	r30, r14
   172f8:	ea 55       	subi	r30, 0x5A	; 90
   172fa:	fe 4e       	sbci	r31, 0xEE	; 238
   172fc:	60 81       	ld	r22, Z
   172fe:	ce 01       	movw	r24, r28
   17300:	84 59       	subi	r24, 0x94	; 148
   17302:	9e 4f       	sbci	r25, 0xFE	; 254
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:237
}
   17304:	df 91       	pop	r29
   17306:	cf 91       	pop	r28
   17308:	1f 91       	pop	r17
   1730a:	0f 91       	pop	r16
   1730c:	ff 90       	pop	r15
   1730e:	ef 90       	pop	r14
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:236
void thermostat_ring_set_pid_eeprom(uint8_t idx)
{
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_p, PID_p[idx]);
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_i, PID_i[idx]);
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d, PID_d[idx]);
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
   17310:	0c 94 9e b6 	jmp	0x16d3c	; 0x16d3c <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

00017314 <thermostat_ring_pid_set_kp(unsigned char, float)>:
_Z26thermostat_ring_pid_set_kphf():
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:240
}

void thermostat_ring_pid_set_kp(uint8_t id, float x)
{
   17314:	cf 93       	push	r28
   17316:	c8 2f       	mov	r28, r24
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:241
  PID_p[id] = x;
   17318:	84 e0       	ldi	r24, 0x04	; 4
   1731a:	c8 9f       	mul	r28, r24
   1731c:	f0 01       	movw	r30, r0
   1731e:	11 24       	eor	r1, r1
   17320:	ed 52       	subi	r30, 0x2D	; 45
   17322:	fe 4e       	sbci	r31, 0xEE	; 238
   17324:	40 83       	st	Z, r20
   17326:	51 83       	std	Z+1, r21	; 0x01
   17328:	62 83       	std	Z+2, r22	; 0x02
   1732a:	73 83       	std	Z+3, r23	; 0x03
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:242
  thermostat_ring_update_pid_parameters(id);
   1732c:	8c 2f       	mov	r24, r28
   1732e:	0e 94 b5 b8 	call	0x1716a	; 0x1716a <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:243
  thermostat_ring_set_pid_eeprom(id);
   17332:	8c 2f       	mov	r24, r28
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:244
}
   17334:	cf 91       	pop	r28
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:243

void thermostat_ring_pid_set_kp(uint8_t id, float x)
{
  PID_p[id] = x;
  thermostat_ring_update_pid_parameters(id);
  thermostat_ring_set_pid_eeprom(id);
   17336:	0c 94 46 b9 	jmp	0x1728c	; 0x1728c <thermostat_ring_set_pid_eeprom(unsigned char)>

0001733a <thermostat_ring_pid_set_ki(unsigned char, float)>:
_Z26thermostat_ring_pid_set_kihf():
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:246
}
void thermostat_ring_pid_set_ki(uint8_t id, float x)
{
   1733a:	cf 93       	push	r28
   1733c:	c8 2f       	mov	r28, r24
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:247
  PID_i[id] = x;
   1733e:	84 e0       	ldi	r24, 0x04	; 4
   17340:	c8 9f       	mul	r28, r24
   17342:	f0 01       	movw	r30, r0
   17344:	11 24       	eor	r1, r1
   17346:	e1 54       	subi	r30, 0x41	; 65
   17348:	fe 4e       	sbci	r31, 0xEE	; 238
   1734a:	40 83       	st	Z, r20
   1734c:	51 83       	std	Z+1, r21	; 0x01
   1734e:	62 83       	std	Z+2, r22	; 0x02
   17350:	73 83       	std	Z+3, r23	; 0x03
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:248
  thermostat_ring_update_pid_parameters(id);
   17352:	8c 2f       	mov	r24, r28
   17354:	0e 94 b5 b8 	call	0x1716a	; 0x1716a <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:249
  thermostat_ring_set_pid_eeprom(id);
   17358:	8c 2f       	mov	r24, r28
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:250
}
   1735a:	cf 91       	pop	r28
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:249
}
void thermostat_ring_pid_set_ki(uint8_t id, float x)
{
  PID_i[id] = x;
  thermostat_ring_update_pid_parameters(id);
  thermostat_ring_set_pid_eeprom(id);
   1735c:	0c 94 46 b9 	jmp	0x1728c	; 0x1728c <thermostat_ring_set_pid_eeprom(unsigned char)>

00017360 <thermostat_ring_pid_set_kd(unsigned char, float)>:
_Z26thermostat_ring_pid_set_kdhf():
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:252
}
void thermostat_ring_pid_set_kd(uint8_t id, float x)
{
   17360:	cf 93       	push	r28
   17362:	c8 2f       	mov	r28, r24
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:253
  PID_d[id] = x;
   17364:	84 e0       	ldi	r24, 0x04	; 4
   17366:	c8 9f       	mul	r28, r24
   17368:	f0 01       	movw	r30, r0
   1736a:	11 24       	eor	r1, r1
   1736c:	e5 55       	subi	r30, 0x55	; 85
   1736e:	fe 4e       	sbci	r31, 0xEE	; 238
   17370:	40 83       	st	Z, r20
   17372:	51 83       	std	Z+1, r21	; 0x01
   17374:	62 83       	std	Z+2, r22	; 0x02
   17376:	73 83       	std	Z+3, r23	; 0x03
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:254
  thermostat_ring_update_pid_parameters(id);
   17378:	8c 2f       	mov	r24, r28
   1737a:	0e 94 b5 b8 	call	0x1716a	; 0x1716a <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:255
  thermostat_ring_set_pid_eeprom(id);
   1737e:	8c 2f       	mov	r24, r28
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:256
}
   17380:	cf 91       	pop	r28
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:255
}
void thermostat_ring_pid_set_kd(uint8_t id, float x)
{
  PID_d[id] = x;
  thermostat_ring_update_pid_parameters(id);
  thermostat_ring_set_pid_eeprom(id);
   17382:	0c 94 46 b9 	jmp	0x1728c	; 0x1728c <thermostat_ring_set_pid_eeprom(unsigned char)>

00017386 <thermostat_ring_pid_set_time(unsigned char, unsigned char)>:
_Z28thermostat_ring_pid_set_timehh():
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:259
}

void thermostat_ring_pid_set_time(uint8_t id, uint8_t timer)
{
   17386:	cf 93       	push	r28
   17388:	c8 2f       	mov	r28, r24
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:260
  PID_time[id] = timer;
   1738a:	e8 2f       	mov	r30, r24
   1738c:	f0 e0       	ldi	r31, 0x00	; 0
   1738e:	ea 55       	subi	r30, 0x5A	; 90
   17390:	fe 4e       	sbci	r31, 0xEE	; 238
   17392:	60 83       	st	Z, r22
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:261
  thermostat_ring_update_pid_parameters(id);
   17394:	0e 94 b5 b8 	call	0x1716a	; 0x1716a <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:262
  thermostat_ring_set_pid_eeprom(id);
   17398:	8c 2f       	mov	r24, r28
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:263
}
   1739a:	cf 91       	pop	r28
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:262

void thermostat_ring_pid_set_time(uint8_t id, uint8_t timer)
{
  PID_time[id] = timer;
  thermostat_ring_update_pid_parameters(id);
  thermostat_ring_set_pid_eeprom(id);
   1739c:	0c 94 46 b9 	jmp	0x1728c	; 0x1728c <thermostat_ring_set_pid_eeprom(unsigned char)>

000173a0 <thermostat_program_get_name(unsigned char, char*)>:
_Z27thermostat_program_get_namehPc():
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:270


//// NASTAVENI PROGRAMU /////////////////////////////////
//// ziska pojmenovani programu
void thermostat_program_get_name(uint8_t program_id, char *name)
{
   173a0:	ef 92       	push	r14
   173a2:	ff 92       	push	r15
   173a4:	0f 93       	push	r16
   173a6:	1f 93       	push	r17
   173a8:	cf 93       	push	r28
   173aa:	df 93       	push	r29
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:274
  uint8_t t = 0;
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
  {
    t = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + i + eeprom_thermostat_program_name);
   173ac:	9d e4       	ldi	r25, 0x4D	; 77
   173ae:	89 9f       	mul	r24, r25
   173b0:	e0 01       	movw	r28, r0
   173b2:	11 24       	eor	r1, r1
   173b4:	8e 01       	movw	r16, r28
   173b6:	0c 5c       	subi	r16, 0xCC	; 204
   173b8:	1d 4f       	sbci	r17, 0xFD	; 253
   173ba:	7b 01       	movw	r14, r22
   173bc:	c2 5c       	subi	r28, 0xC2	; 194
   173be:	dd 4f       	sbci	r29, 0xFD	; 253
   173c0:	c8 01       	movw	r24, r16
   173c2:	0e 94 9c b6 	call	0x16d38	; 0x16d38 <EEPROMClass::read(int) [clone .isra.0]>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:275
    name[i] = t;
   173c6:	f7 01       	movw	r30, r14
   173c8:	81 93       	st	Z+, r24
   173ca:	7f 01       	movw	r14, r30
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:276
    if (t == 0) break;
   173cc:	88 23       	and	r24, r24
   173ce:	29 f0       	breq	.+10     	; 0x173da <thermostat_program_get_name(unsigned char, char*)+0x3a>
   173d0:	0f 5f       	subi	r16, 0xFF	; 255
   173d2:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:272 (discriminator 2)
//// NASTAVENI PROGRAMU /////////////////////////////////
//// ziska pojmenovani programu
void thermostat_program_get_name(uint8_t program_id, char *name)
{
  uint8_t t = 0;
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
   173d4:	0c 17       	cp	r16, r28
   173d6:	1d 07       	cpc	r17, r29
   173d8:	99 f7       	brne	.-26     	; 0x173c0 <thermostat_program_get_name(unsigned char, char*)+0x20>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:278
  {
    t = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + i + eeprom_thermostat_program_name);
    name[i] = t;
    if (t == 0) break;
  }
}
   173da:	df 91       	pop	r29
   173dc:	cf 91       	pop	r28
   173de:	1f 91       	pop	r17
   173e0:	0f 91       	pop	r16
   173e2:	ff 90       	pop	r15
   173e4:	ef 90       	pop	r14
   173e6:	08 95       	ret

000173e8 <thermostat_program_set_name(unsigned char, char*)>:
_Z27thermostat_program_set_namehPc():
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:281
//// nastavi pojmenovani programu
void thermostat_program_set_name(uint8_t program_id, char *name)
{
   173e8:	ef 92       	push	r14
   173ea:	ff 92       	push	r15
   173ec:	0f 93       	push	r16
   173ee:	1f 93       	push	r17
   173f0:	cf 93       	push	r28
   173f2:	df 93       	push	r29
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:284
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
  {
    EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + i + eeprom_thermostat_program_name, name[i]);
   173f4:	9d e4       	ldi	r25, 0x4D	; 77
   173f6:	89 9f       	mul	r24, r25
   173f8:	80 01       	movw	r16, r0
   173fa:	11 24       	eor	r1, r1
   173fc:	eb 01       	movw	r28, r22
   173fe:	78 01       	movw	r14, r16
   17400:	8c ec       	ldi	r24, 0xCC	; 204
   17402:	e8 1a       	sub	r14, r24
   17404:	8d ef       	ldi	r24, 0xFD	; 253
   17406:	f8 0a       	sbc	r15, r24
   17408:	02 5c       	subi	r16, 0xC2	; 194
   1740a:	1d 4f       	sbci	r17, 0xFD	; 253
   1740c:	69 91       	ld	r22, Y+
   1740e:	c7 01       	movw	r24, r14
   17410:	0e 94 9e b6 	call	0x16d3c	; 0x16d3c <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:285
    if (name[i] == 0) break;
   17414:	fe 01       	movw	r30, r28
   17416:	31 97       	sbiw	r30, 0x01	; 1
   17418:	80 81       	ld	r24, Z
   1741a:	88 23       	and	r24, r24
   1741c:	31 f0       	breq	.+12     	; 0x1742a <thermostat_program_set_name(unsigned char, char*)+0x42>
   1741e:	9f ef       	ldi	r25, 0xFF	; 255
   17420:	e9 1a       	sub	r14, r25
   17422:	f9 0a       	sbc	r15, r25
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:282 (discriminator 2)
  }
}
//// nastavi pojmenovani programu
void thermostat_program_set_name(uint8_t program_id, char *name)
{
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
   17424:	e0 16       	cp	r14, r16
   17426:	f1 06       	cpc	r15, r17
   17428:	89 f7       	brne	.-30     	; 0x1740c <thermostat_program_set_name(unsigned char, char*)+0x24>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:287
  {
    EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + i + eeprom_thermostat_program_name, name[i]);
    if (name[i] == 0) break;
  }
}
   1742a:	df 91       	pop	r29
   1742c:	cf 91       	pop	r28
   1742e:	1f 91       	pop	r17
   17430:	0f 91       	pop	r16
   17432:	ff 90       	pop	r15
   17434:	ef 90       	pop	r14
   17436:	08 95       	ret

00017438 <thermostat_program_get_active(unsigned char)>:
_Z29thermostat_program_get_activeh():
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:291
//// globalni povoleni programu a nastaveni rezimu
uint8_t thermostat_program_get_active(uint8_t program_id)
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active);
   17438:	2d e4       	ldi	r18, 0x4D	; 77
   1743a:	82 9f       	mul	r24, r18
   1743c:	c0 01       	movw	r24, r0
   1743e:	11 24       	eor	r1, r1
   17440:	8f 50       	subi	r24, 0x0F	; 15
   17442:	9e 4f       	sbci	r25, 0xFE	; 254
   17444:	0c 94 9c b6 	jmp	0x16d38	; 0x16d38 <EEPROMClass::read(int) [clone .isra.0]>

00017448 <thermostat_program_set_active(unsigned char, unsigned char)>:
_Z29thermostat_program_set_activehh():
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:295
}
void thermostat_program_set_active(uint8_t program_id, uint8_t active)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active, active);
   17448:	2d e4       	ldi	r18, 0x4D	; 77
   1744a:	82 9f       	mul	r24, r18
   1744c:	c0 01       	movw	r24, r0
   1744e:	11 24       	eor	r1, r1
   17450:	8f 50       	subi	r24, 0x0F	; 15
   17452:	9e 4f       	sbci	r25, 0xFE	; 254
   17454:	0c 94 9e b6 	jmp	0x16d3c	; 0x16d3c <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

00017458 <thermostat_program_get_time(unsigned char, unsigned char, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)>:
_Z27thermostat_program_get_timehhPhS_S_S_S_():
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:301
}


//// ziska cas termostatu
void thermostat_program_get_time(uint8_t program_id, uint8_t interval_id, uint8_t *start_hour, uint8_t *start_min, uint8_t *stop_hour, uint8_t *stop_min, uint8_t *active)
{
   17458:	7f 92       	push	r7
   1745a:	8f 92       	push	r8
   1745c:	9f 92       	push	r9
   1745e:	af 92       	push	r10
   17460:	bf 92       	push	r11
   17462:	cf 92       	push	r12
   17464:	df 92       	push	r13
   17466:	ef 92       	push	r14
   17468:	ff 92       	push	r15
   1746a:	0f 93       	push	r16
   1746c:	1f 93       	push	r17
   1746e:	cf 93       	push	r28
   17470:	df 93       	push	r29
   17472:	5a 01       	movw	r10, r20
   17474:	e9 01       	movw	r28, r18
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:302
  uint8_t start = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1);
   17476:	9d e4       	ldi	r25, 0x4D	; 77
   17478:	89 9f       	mul	r24, r25
   1747a:	40 01       	movw	r8, r0
   1747c:	11 24       	eor	r1, r1
   1747e:	ef e0       	ldi	r30, 0x0F	; 15
   17480:	8e 1a       	sub	r8, r30
   17482:	ee ef       	ldi	r30, 0xFE	; 254
   17484:	9e 0a       	sbc	r9, r30
   17486:	f6 e0       	ldi	r31, 0x06	; 6
   17488:	6f 9f       	mul	r22, r31
   1748a:	80 0c       	add	r8, r0
   1748c:	91 1c       	adc	r9, r1
   1748e:	11 24       	eor	r1, r1
   17490:	c4 01       	movw	r24, r8
   17492:	02 96       	adiw	r24, 0x02	; 2
   17494:	0e 94 9c b6 	call	0x16d38	; 0x16d38 <EEPROMClass::read(int) [clone .isra.0]>
   17498:	78 2e       	mov	r7, r24
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:303
  uint8_t stop = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size)  + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1);
   1749a:	c4 01       	movw	r24, r8
   1749c:	03 96       	adiw	r24, 0x03	; 3
   1749e:	0e 94 9c b6 	call	0x16d38	; 0x16d38 <EEPROMClass::read(int) [clone .isra.0]>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:304
  *start_hour = (start >> 3) & 0b00011111;
   174a2:	97 2d       	mov	r25, r7
   174a4:	96 95       	lsr	r25
   174a6:	96 95       	lsr	r25
   174a8:	96 95       	lsr	r25
   174aa:	f5 01       	movw	r30, r10
   174ac:	90 83       	st	Z, r25
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:305
  *start_min = (start >> 1 & 0b00000011) * 15;
   174ae:	27 2d       	mov	r18, r7
   174b0:	30 e0       	ldi	r19, 0x00	; 0
   174b2:	35 95       	asr	r19
   174b4:	27 95       	ror	r18
   174b6:	23 70       	andi	r18, 0x03	; 3
   174b8:	9f e0       	ldi	r25, 0x0F	; 15
   174ba:	29 9f       	mul	r18, r25
   174bc:	20 2d       	mov	r18, r0
   174be:	11 24       	eor	r1, r1
   174c0:	28 83       	st	Y, r18
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:306
  *stop_hour = (stop >> 3) & 0b00011111;
   174c2:	28 2f       	mov	r18, r24
   174c4:	26 95       	lsr	r18
   174c6:	26 95       	lsr	r18
   174c8:	26 95       	lsr	r18
   174ca:	f8 01       	movw	r30, r16
   174cc:	20 83       	st	Z, r18
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:307
  *stop_min = (stop & 0b00000011) * 15;
   174ce:	83 70       	andi	r24, 0x03	; 3
   174d0:	89 9f       	mul	r24, r25
   174d2:	80 2d       	mov	r24, r0
   174d4:	11 24       	eor	r1, r1
   174d6:	f7 01       	movw	r30, r14
   174d8:	80 83       	st	Z, r24
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:308
  *active = start & 0b00000001;
   174da:	87 2d       	mov	r24, r7
   174dc:	81 70       	andi	r24, 0x01	; 1
   174de:	f6 01       	movw	r30, r12
   174e0:	80 83       	st	Z, r24
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:309
}
   174e2:	df 91       	pop	r29
   174e4:	cf 91       	pop	r28
   174e6:	1f 91       	pop	r17
   174e8:	0f 91       	pop	r16
   174ea:	ff 90       	pop	r15
   174ec:	ef 90       	pop	r14
   174ee:	df 90       	pop	r13
   174f0:	cf 90       	pop	r12
   174f2:	bf 90       	pop	r11
   174f4:	af 90       	pop	r10
   174f6:	9f 90       	pop	r9
   174f8:	8f 90       	pop	r8
   174fa:	7f 90       	pop	r7
   174fc:	08 95       	ret

000174fe <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
_Z27thermostat_program_set_timehhhhhhh():
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:312
//// nastavi cas termostatu
void thermostat_program_set_time(uint8_t program_id, uint8_t interval_id, uint8_t start_hour, uint8_t start_min, uint8_t stop_hour, uint8_t stop_min, uint8_t active)
{
   174fe:	cf 92       	push	r12
   17500:	ef 92       	push	r14
   17502:	0f 93       	push	r16
   17504:	1f 93       	push	r17
   17506:	cf 93       	push	r28
   17508:	df 93       	push	r29
   1750a:	c8 2f       	mov	r28, r24
   1750c:	56 2f       	mov	r21, r22
   1750e:	8e 2d       	mov	r24, r14
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:315
  uint8_t start, stop;
  start = ((start_hour << 3) & 0b11111000) + (((start_min / 15) << 1) & 0b00000110 ) + (active & 0b00000001);
  stop = ((stop_hour << 3) & 0b11111000) + ((stop_min / 15) & 0b00000011);
   17510:	3f e0       	ldi	r19, 0x0F	; 15
   17512:	63 2f       	mov	r22, r19
   17514:	0f 94 29 16 	call	0x22c52	; 0x22c52 <__udivmodqi4>
   17518:	83 70       	andi	r24, 0x03	; 3
   1751a:	98 e0       	ldi	r25, 0x08	; 8
   1751c:	09 9f       	mul	r16, r25
   1751e:	80 01       	movw	r16, r0
   17520:	11 24       	eor	r1, r1
   17522:	08 0f       	add	r16, r24
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:316
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1, start);
   17524:	8d e4       	ldi	r24, 0x4D	; 77
   17526:	c8 9f       	mul	r28, r24
   17528:	e0 01       	movw	r28, r0
   1752a:	11 24       	eor	r1, r1
   1752c:	cf 50       	subi	r28, 0x0F	; 15
   1752e:	de 4f       	sbci	r29, 0xFE	; 254
   17530:	96 e0       	ldi	r25, 0x06	; 6
   17532:	59 9f       	mul	r21, r25
   17534:	c0 0d       	add	r28, r0
   17536:	d1 1d       	adc	r29, r1
   17538:	11 24       	eor	r1, r1
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:314
}
//// nastavi cas termostatu
void thermostat_program_set_time(uint8_t program_id, uint8_t interval_id, uint8_t start_hour, uint8_t start_min, uint8_t stop_hour, uint8_t stop_min, uint8_t active)
{
  uint8_t start, stop;
  start = ((start_hour << 3) & 0b11111000) + (((start_min / 15) << 1) & 0b00000110 ) + (active & 0b00000001);
   1753a:	82 2f       	mov	r24, r18
   1753c:	0f 94 29 16 	call	0x22c52	; 0x22c52 <__udivmodqi4>
   17540:	68 2f       	mov	r22, r24
   17542:	66 0f       	add	r22, r22
   17544:	66 70       	andi	r22, 0x06	; 6
   17546:	88 e0       	ldi	r24, 0x08	; 8
   17548:	48 9f       	mul	r20, r24
   1754a:	a0 01       	movw	r20, r0
   1754c:	11 24       	eor	r1, r1
   1754e:	9c 2d       	mov	r25, r12
   17550:	91 70       	andi	r25, 0x01	; 1
   17552:	c9 2e       	mov	r12, r25
   17554:	c4 0e       	add	r12, r20
   17556:	6c 0d       	add	r22, r12
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:316
  stop = ((stop_hour << 3) & 0b11111000) + ((stop_min / 15) & 0b00000011);
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1, start);
   17558:	ce 01       	movw	r24, r28
   1755a:	02 96       	adiw	r24, 0x02	; 2
   1755c:	0e 94 9e b6 	call	0x16d3c	; 0x16d3c <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:317
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1, stop);
   17560:	60 2f       	mov	r22, r16
   17562:	ce 01       	movw	r24, r28
   17564:	03 96       	adiw	r24, 0x03	; 3
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:318
}
   17566:	df 91       	pop	r29
   17568:	cf 91       	pop	r28
   1756a:	1f 91       	pop	r17
   1756c:	0f 91       	pop	r16
   1756e:	ef 90       	pop	r14
   17570:	cf 90       	pop	r12
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:317
{
  uint8_t start, stop;
  start = ((start_hour << 3) & 0b11111000) + (((start_min / 15) << 1) & 0b00000110 ) + (active & 0b00000001);
  stop = ((stop_hour << 3) & 0b11111000) + ((stop_min / 15) & 0b00000011);
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1, start);
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1, stop);
   17572:	0c 94 9e b6 	jmp	0x16d3c	; 0x16d3c <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

00017576 <thermostat_program_get_threshold(unsigned char, unsigned char)>:
_Z32thermostat_program_get_thresholdhh():
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:323
}


//// ziska rozhodovaci uroven termostatu
uint16_t thermostat_program_get_threshold(uint8_t program_id, uint8_t interval_id)
{
   17576:	1f 93       	push	r17
   17578:	cf 93       	push	r28
   1757a:	df 93       	push	r29
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:325
  uint16_t ret = 0;
  ret = (EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1) << 8)  + EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1);
   1757c:	9d e4       	ldi	r25, 0x4D	; 77
   1757e:	89 9f       	mul	r24, r25
   17580:	e0 01       	movw	r28, r0
   17582:	11 24       	eor	r1, r1
   17584:	cf 50       	subi	r28, 0x0F	; 15
   17586:	de 4f       	sbci	r29, 0xFE	; 254
   17588:	86 e0       	ldi	r24, 0x06	; 6
   1758a:	68 9f       	mul	r22, r24
   1758c:	c0 0d       	add	r28, r0
   1758e:	d1 1d       	adc	r29, r1
   17590:	11 24       	eor	r1, r1
   17592:	ce 01       	movw	r24, r28
   17594:	05 96       	adiw	r24, 0x05	; 5
   17596:	0e 94 9c b6 	call	0x16d38	; 0x16d38 <EEPROMClass::read(int) [clone .isra.0]>
   1759a:	18 2f       	mov	r17, r24
   1759c:	ce 01       	movw	r24, r28
   1759e:	04 96       	adiw	r24, 0x04	; 4
   175a0:	0e 94 9c b6 	call	0x16d38	; 0x16d38 <EEPROMClass::read(int) [clone .isra.0]>
   175a4:	21 2f       	mov	r18, r17
   175a6:	30 e0       	ldi	r19, 0x00	; 0
   175a8:	32 2f       	mov	r19, r18
   175aa:	22 27       	eor	r18, r18
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:327
  return ret;
}
   175ac:	82 0f       	add	r24, r18
   175ae:	93 2f       	mov	r25, r19
   175b0:	91 1d       	adc	r25, r1
   175b2:	df 91       	pop	r29
   175b4:	cf 91       	pop	r28
   175b6:	1f 91       	pop	r17
   175b8:	08 95       	ret

000175ba <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>:
_Z32thermostat_program_set_thresholdhhj():
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:330
//// nastavi rozhodovaci uroven termostatu
void thermostat_program_set_threshold(uint8_t program_id, uint8_t interval_id, uint16_t threshold)
{
   175ba:	1f 93       	push	r17
   175bc:	cf 93       	push	r28
   175be:	df 93       	push	r29
   175c0:	14 2f       	mov	r17, r20
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:331
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1, ((threshold >> 8) & 0xff));
   175c2:	9d e4       	ldi	r25, 0x4D	; 77
   175c4:	89 9f       	mul	r24, r25
   175c6:	e0 01       	movw	r28, r0
   175c8:	11 24       	eor	r1, r1
   175ca:	cf 50       	subi	r28, 0x0F	; 15
   175cc:	de 4f       	sbci	r29, 0xFE	; 254
   175ce:	86 e0       	ldi	r24, 0x06	; 6
   175d0:	68 9f       	mul	r22, r24
   175d2:	c0 0d       	add	r28, r0
   175d4:	d1 1d       	adc	r29, r1
   175d6:	11 24       	eor	r1, r1
   175d8:	65 2f       	mov	r22, r21
   175da:	ce 01       	movw	r24, r28
   175dc:	05 96       	adiw	r24, 0x05	; 5
   175de:	0e 94 9e b6 	call	0x16d3c	; 0x16d3c <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:332
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1, (threshold & 0xff));
   175e2:	61 2f       	mov	r22, r17
   175e4:	ce 01       	movw	r24, r28
   175e6:	04 96       	adiw	r24, 0x04	; 4
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:333
}
   175e8:	df 91       	pop	r29
   175ea:	cf 91       	pop	r28
   175ec:	1f 91       	pop	r17
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:332
}
//// nastavi rozhodovaci uroven termostatu
void thermostat_program_set_threshold(uint8_t program_id, uint8_t interval_id, uint16_t threshold)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1, ((threshold >> 8) & 0xff));
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1, (threshold & 0xff));
   175ee:	0c 94 9e b6 	jmp	0x16d3c	; 0x16d3c <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

000175f2 <thermostat_program_get_week(unsigned char, unsigned char)>:
_Z27thermostat_program_get_weekhh():
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:366
}

//// ziska jakych dnech program plati
uint8_t thermostat_program_get_week(uint8_t program_id, uint8_t interval_id)
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day );
   175f2:	2d e4       	ldi	r18, 0x4D	; 77
   175f4:	82 9f       	mul	r24, r18
   175f6:	c0 01       	movw	r24, r0
   175f8:	11 24       	eor	r1, r1
   175fa:	26 e0       	ldi	r18, 0x06	; 6
   175fc:	62 9f       	mul	r22, r18
   175fe:	80 0d       	add	r24, r0
   17600:	91 1d       	adc	r25, r1
   17602:	11 24       	eor	r1, r1
   17604:	8e 50       	subi	r24, 0x0E	; 14
   17606:	9e 4f       	sbci	r25, 0xFE	; 254
   17608:	0c 94 9c b6 	jmp	0x16d38	; 0x16d38 <EEPROMClass::read(int) [clone .isra.0]>

0001760c <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>:
_Z27thermostat_program_set_weekhhh():
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:371
}
//// nastavi jaky v jakych dnech program plati
void thermostat_program_set_week(uint8_t program_id, uint8_t interval_id, uint8_t week)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day, week);
   1760c:	2d e4       	ldi	r18, 0x4D	; 77
   1760e:	82 9f       	mul	r24, r18
   17610:	c0 01       	movw	r24, r0
   17612:	11 24       	eor	r1, r1
   17614:	26 e0       	ldi	r18, 0x06	; 6
   17616:	62 9f       	mul	r22, r18
   17618:	80 0d       	add	r24, r0
   1761a:	91 1d       	adc	r25, r1
   1761c:	11 24       	eor	r1, r1
   1761e:	64 2f       	mov	r22, r20
   17620:	8e 50       	subi	r24, 0x0E	; 14
   17622:	9e 4f       	sbci	r25, 0xFE	; 254
   17624:	0c 94 9e b6 	jmp	0x16d3c	; 0x16d3c <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

00017628 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)>:
_Z37thermostat_program_set_parse_intervalhhPc():
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:338
}


//// rozparsuje casovy format start_hour,start_min,stop_hour,stop_min,active a ulozi jej
void thermostat_program_set_parse_interval(uint8_t program_id, uint8_t interval_id,  char *str)
{
   17628:	bf 92       	push	r11
   1762a:	cf 92       	push	r12
   1762c:	df 92       	push	r13
   1762e:	ef 92       	push	r14
   17630:	ff 92       	push	r15
   17632:	0f 93       	push	r16
   17634:	1f 93       	push	r17
   17636:	cf 93       	push	r28
   17638:	df 93       	push	r29
   1763a:	d8 2f       	mov	r29, r24
   1763c:	16 2f       	mov	r17, r22
   1763e:	ca 01       	movw	r24, r20
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:343
  uint8_t cnt;
  uint8_t start_hour = 0, start_min = 0, stop_hour = 0, stop_min = 0, active = 0, week = 0;
  char *pch;
  cnt = 0;
  pch = strtok (str, ",");
   17640:	62 ef       	ldi	r22, 0xF2	; 242
   17642:	73 e0       	ldi	r23, 0x03	; 3
   17644:	0f 94 29 1a 	call	0x23452	; 0x23452 <strtok>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:340

//// rozparsuje casovy format start_hour,start_min,stop_hour,stop_min,active a ulozi jej
void thermostat_program_set_parse_interval(uint8_t program_id, uint8_t interval_id,  char *str)
{
  uint8_t cnt;
  uint8_t start_hour = 0, start_min = 0, stop_hour = 0, stop_min = 0, active = 0, week = 0;
   17648:	f1 2c       	mov	r15, r1
   1764a:	c1 2c       	mov	r12, r1
   1764c:	e1 2c       	mov	r14, r1
   1764e:	00 e0       	ldi	r16, 0x00	; 0
   17650:	b1 2c       	mov	r11, r1
   17652:	d1 2c       	mov	r13, r1
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:342
  char *pch;
  cnt = 0;
   17654:	c0 e0       	ldi	r28, 0x00	; 0
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:344
  pch = strtok (str, ",");
  while (pch != NULL)
   17656:	00 97       	sbiw	r24, 0x00	; 0
   17658:	59 f1       	breq	.+86     	; 0x176b0 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x88>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:346
  {
    if (cnt == 0) start_hour = atoi(pch);
   1765a:	c1 11       	cpse	r28, r1
   1765c:	0b c0       	rjmp	.+22     	; 0x17674 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x4c>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:346 (discriminator 1)
   1765e:	0f 94 f0 19 	call	0x233e0	; 0x233e0 <atoi>
   17662:	d8 2e       	mov	r13, r24
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:353
    if (cnt == 2) stop_hour = atoi(pch);
    if (cnt == 3) stop_min = atoi(pch);
    if (cnt == 4) week = atoi(pch);
    if (cnt == 5) active = atoi(pch);

    pch = strtok (NULL, ",");
   17664:	62 ef       	ldi	r22, 0xF2	; 242
   17666:	73 e0       	ldi	r23, 0x03	; 3
   17668:	90 e0       	ldi	r25, 0x00	; 0
   1766a:	80 e0       	ldi	r24, 0x00	; 0
   1766c:	0f 94 29 1a 	call	0x23452	; 0x23452 <strtok>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:354
    cnt++;
   17670:	cf 5f       	subi	r28, 0xFF	; 255
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:344
  uint8_t cnt;
  uint8_t start_hour = 0, start_min = 0, stop_hour = 0, stop_min = 0, active = 0, week = 0;
  char *pch;
  cnt = 0;
  pch = strtok (str, ",");
  while (pch != NULL)
   17672:	f1 cf       	rjmp	.-30     	; 0x17656 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x2e>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:347
  {
    if (cnt == 0) start_hour = atoi(pch);
    if (cnt == 1) start_min = atoi(pch);
   17674:	c1 30       	cpi	r28, 0x01	; 1
   17676:	21 f4       	brne	.+8      	; 0x17680 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x58>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:347 (discriminator 1)
   17678:	0f 94 f0 19 	call	0x233e0	; 0x233e0 <atoi>
   1767c:	b8 2e       	mov	r11, r24
   1767e:	f2 cf       	rjmp	.-28     	; 0x17664 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x3c>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:348
    if (cnt == 2) stop_hour = atoi(pch);
   17680:	c2 30       	cpi	r28, 0x02	; 2
   17682:	21 f4       	brne	.+8      	; 0x1768c <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x64>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:348 (discriminator 1)
   17684:	0f 94 f0 19 	call	0x233e0	; 0x233e0 <atoi>
   17688:	08 2f       	mov	r16, r24
   1768a:	ec cf       	rjmp	.-40     	; 0x17664 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x3c>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:349
    if (cnt == 3) stop_min = atoi(pch);
   1768c:	c3 30       	cpi	r28, 0x03	; 3
   1768e:	21 f4       	brne	.+8      	; 0x17698 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x70>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:349 (discriminator 1)
   17690:	0f 94 f0 19 	call	0x233e0	; 0x233e0 <atoi>
   17694:	e8 2e       	mov	r14, r24
   17696:	e6 cf       	rjmp	.-52     	; 0x17664 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x3c>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:350
    if (cnt == 4) week = atoi(pch);
   17698:	c4 30       	cpi	r28, 0x04	; 4
   1769a:	21 f4       	brne	.+8      	; 0x176a4 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x7c>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:350 (discriminator 1)
   1769c:	0f 94 f0 19 	call	0x233e0	; 0x233e0 <atoi>
   176a0:	f8 2e       	mov	r15, r24
   176a2:	e0 cf       	rjmp	.-64     	; 0x17664 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x3c>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:351
    if (cnt == 5) active = atoi(pch);
   176a4:	c5 30       	cpi	r28, 0x05	; 5
   176a6:	f1 f6       	brne	.-68     	; 0x17664 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x3c>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:351 (discriminator 1)
   176a8:	0f 94 f0 19 	call	0x233e0	; 0x233e0 <atoi>
   176ac:	c8 2e       	mov	r12, r24
   176ae:	da cf       	rjmp	.-76     	; 0x17664 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x3c>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:356

    pch = strtok (NULL, ",");
    cnt++;
  }
  if (cnt == 6)
   176b0:	c6 30       	cpi	r28, 0x06	; 6
   176b2:	a1 f4       	brne	.+40     	; 0x176dc <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0xb4>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:358
  {
    thermostat_program_set_time(program_id, interval_id, start_hour, start_min, stop_hour, stop_min, active);
   176b4:	2b 2d       	mov	r18, r11
   176b6:	4d 2d       	mov	r20, r13
   176b8:	61 2f       	mov	r22, r17
   176ba:	8d 2f       	mov	r24, r29
   176bc:	0e 94 7f ba 	call	0x174fe	; 0x174fe <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:359
    thermostat_program_set_week(program_id, interval_id, week);
   176c0:	4f 2d       	mov	r20, r15
   176c2:	61 2f       	mov	r22, r17
   176c4:	8d 2f       	mov	r24, r29
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:361
  }
}
   176c6:	df 91       	pop	r29
   176c8:	cf 91       	pop	r28
   176ca:	1f 91       	pop	r17
   176cc:	0f 91       	pop	r16
   176ce:	ff 90       	pop	r15
   176d0:	ef 90       	pop	r14
   176d2:	df 90       	pop	r13
   176d4:	cf 90       	pop	r12
   176d6:	bf 90       	pop	r11
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:359
    cnt++;
  }
  if (cnt == 6)
  {
    thermostat_program_set_time(program_id, interval_id, start_hour, start_min, stop_hour, stop_min, active);
    thermostat_program_set_week(program_id, interval_id, week);
   176d8:	0c 94 06 bb 	jmp	0x1760c	; 0x1760c <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:361
  }
}
   176dc:	df 91       	pop	r29
   176de:	cf 91       	pop	r28
   176e0:	1f 91       	pop	r17
   176e2:	0f 91       	pop	r16
   176e4:	ff 90       	pop	r15
   176e6:	ef 90       	pop	r14
   176e8:	df 90       	pop	r13
   176ea:	cf 90       	pop	r12
   176ec:	bf 90       	pop	r11
   176ee:	08 95       	ret

000176f0 <thermostat_program_set_interval_active(unsigned char, unsigned char, unsigned char)>:
_Z38thermostat_program_set_interval_activehhh():
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:377
}


/***************************************************************************************************************/
void thermostat_program_set_interval_active(uint8_t program_id, uint8_t interval_id, uint8_t set_active)
{
   176f0:	9f 92       	push	r9
   176f2:	af 92       	push	r10
   176f4:	bf 92       	push	r11
   176f6:	cf 92       	push	r12
   176f8:	df 92       	push	r13
   176fa:	ef 92       	push	r14
   176fc:	ff 92       	push	r15
   176fe:	0f 93       	push	r16
   17700:	1f 93       	push	r17
   17702:	cf 93       	push	r28
   17704:	df 93       	push	r29
   17706:	00 d0       	rcall	.+0      	; 0x17708 <thermostat_program_set_interval_active(unsigned char, unsigned char, unsigned char)+0x18>
   17708:	1f 92       	push	r1
   1770a:	1f 92       	push	r1
   1770c:	cd b7       	in	r28, 0x3d	; 61
   1770e:	de b7       	in	r29, 0x3e	; 62
   17710:	b8 2e       	mov	r11, r24
   17712:	a6 2e       	mov	r10, r22
   17714:	94 2e       	mov	r9, r20
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:379
  uint8_t start_hour, start_min, stop_hour, stop_min, active;
  thermostat_program_get_time(program_id, interval_id, &start_hour, &start_min, &stop_hour, &stop_min, &active);
   17716:	ce 01       	movw	r24, r28
   17718:	01 96       	adiw	r24, 0x01	; 1
   1771a:	6c 01       	movw	r12, r24
   1771c:	01 96       	adiw	r24, 0x01	; 1
   1771e:	7c 01       	movw	r14, r24
   17720:	8e 01       	movw	r16, r28
   17722:	0d 5f       	subi	r16, 0xFD	; 253
   17724:	1f 4f       	sbci	r17, 0xFF	; 255
   17726:	9e 01       	movw	r18, r28
   17728:	2c 5f       	subi	r18, 0xFC	; 252
   1772a:	3f 4f       	sbci	r19, 0xFF	; 255
   1772c:	ae 01       	movw	r20, r28
   1772e:	4b 5f       	subi	r20, 0xFB	; 251
   17730:	5f 4f       	sbci	r21, 0xFF	; 255
   17732:	8b 2d       	mov	r24, r11
   17734:	0e 94 2c ba 	call	0x17458	; 0x17458 <thermostat_program_get_time(unsigned char, unsigned char, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:380
  if (active != set_active)
   17738:	89 81       	ldd	r24, Y+1	; 0x01
   1773a:	89 15       	cp	r24, r9
   1773c:	49 f0       	breq	.+18     	; 0x17750 <thermostat_program_set_interval_active(unsigned char, unsigned char, unsigned char)+0x60>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:381
    thermostat_program_set_time(program_id, interval_id, start_hour, start_min, stop_hour, stop_min, set_active);
   1773e:	c9 2c       	mov	r12, r9
   17740:	ea 80       	ldd	r14, Y+2	; 0x02
   17742:	0b 81       	ldd	r16, Y+3	; 0x03
   17744:	2c 81       	ldd	r18, Y+4	; 0x04
   17746:	4d 81       	ldd	r20, Y+5	; 0x05
   17748:	6a 2d       	mov	r22, r10
   1774a:	8b 2d       	mov	r24, r11
   1774c:	0e 94 7f ba 	call	0x174fe	; 0x174fe <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:382
}
   17750:	0f 90       	pop	r0
   17752:	0f 90       	pop	r0
   17754:	0f 90       	pop	r0
   17756:	0f 90       	pop	r0
   17758:	0f 90       	pop	r0
   1775a:	df 91       	pop	r29
   1775c:	cf 91       	pop	r28
   1775e:	1f 91       	pop	r17
   17760:	0f 91       	pop	r16
   17762:	ff 90       	pop	r15
   17764:	ef 90       	pop	r14
   17766:	df 90       	pop	r13
   17768:	cf 90       	pop	r12
   1776a:	bf 90       	pop	r11
   1776c:	af 90       	pop	r10
   1776e:	9f 90       	pop	r9
   17770:	08 95       	ret

00017772 <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)>:
_Z18thermostat_runninghPihhh():
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:387
/***************************************************************************************************************/
///// vraci 1 pokud je termostat aktivni
/// now.dayOfTheWeek() 0..nedele; 6..sobota
uint8_t thermostat_running(uint8_t program, int16_t *threshold, uint8_t now_hour, uint8_t now_minute, uint8_t now_dayweek)
{
   17772:	3f 92       	push	r3
   17774:	4f 92       	push	r4
   17776:	5f 92       	push	r5
   17778:	6f 92       	push	r6
   1777a:	7f 92       	push	r7
   1777c:	8f 92       	push	r8
   1777e:	9f 92       	push	r9
   17780:	af 92       	push	r10
   17782:	bf 92       	push	r11
   17784:	cf 92       	push	r12
   17786:	df 92       	push	r13
   17788:	ef 92       	push	r14
   1778a:	ff 92       	push	r15
   1778c:	0f 93       	push	r16
   1778e:	1f 93       	push	r17
   17790:	cf 93       	push	r28
   17792:	df 93       	push	r29
   17794:	00 d0       	rcall	.+0      	; 0x17796 <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x24>
   17796:	1f 92       	push	r1
   17798:	1f 92       	push	r1
   1779a:	cd b7       	in	r28, 0x3d	; 61
   1779c:	de b7       	in	r29, 0x3e	; 62
   1779e:	b8 2e       	mov	r11, r24
   177a0:	2b 01       	movw	r4, r22
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:392
  uint8_t ret = PROG_FREE;
  uint8_t start_hour, start_min, stop_hour, stop_min, active, week;
  int16_t t_start, t_stop, t_now;
  /// pokud neni vybrany zadny program, tak nic nedelam
  if (program != PROG_FREE)
   177a2:	8f ef       	ldi	r24, 0xFF	; 255
   177a4:	b8 16       	cp	r11, r24
   177a6:	09 f4       	brne	.+2      	; 0x177aa <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x38>
   177a8:	54 c0       	rjmp	.+168    	; 0x17852 <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0xe0>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:402
      if (active == 1)
      {
        week = thermostat_program_get_week(program, interval_id);
        t_start = start_hour * 60 + start_min;
        t_stop = stop_hour * 60 + stop_min;
        t_now = now_hour * 60 + now_minute;
   177aa:	82 2e       	mov	r8, r18
   177ac:	91 2c       	mov	r9, r1
   177ae:	9c e3       	ldi	r25, 0x3C	; 60
   177b0:	49 9f       	mul	r20, r25
   177b2:	80 0c       	add	r8, r0
   177b4:	91 1c       	adc	r9, r1
   177b6:	11 24       	eor	r1, r1
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:403
        if (t_now >= t_start && t_now < t_stop && (week & (1 << now_dayweek) != 0))
   177b8:	81 e0       	ldi	r24, 0x01	; 1
   177ba:	90 e0       	ldi	r25, 0x00	; 0
   177bc:	02 c0       	rjmp	.+4      	; 0x177c2 <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x50>
   177be:	88 0f       	add	r24, r24
   177c0:	99 1f       	adc	r25, r25
   177c2:	0a 95       	dec	r16
   177c4:	e2 f7       	brpl	.-8      	; 0x177be <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x4c>
   177c6:	66 24       	eor	r6, r6
   177c8:	63 94       	inc	r6
   177ca:	71 2c       	mov	r7, r1
   177cc:	89 2b       	or	r24, r25
   177ce:	11 f4       	brne	.+4      	; 0x177d4 <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x62>
   177d0:	71 2c       	mov	r7, r1
   177d2:	61 2c       	mov	r6, r1
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:394
  uint8_t start_hour, start_min, stop_hour, stop_min, active, week;
  int16_t t_start, t_stop, t_now;
  /// pokud neni vybrany zadny program, tak nic nedelam
  if (program != PROG_FREE)
  {
    for (uint8_t interval_id = 0; interval_id < MAX_PROGRAM_INTERVAL; interval_id++)
   177d4:	a1 2c       	mov	r10, r1
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:400
    {
      thermostat_program_get_time(program, interval_id, &start_hour, &start_min, &stop_hour, &stop_min, &active);
      if (active == 1)
      {
        week = thermostat_program_get_week(program, interval_id);
        t_start = start_hour * 60 + start_min;
   177d6:	9c e3       	ldi	r25, 0x3C	; 60
   177d8:	39 2e       	mov	r3, r25
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:396
  /// pokud neni vybrany zadny program, tak nic nedelam
  if (program != PROG_FREE)
  {
    for (uint8_t interval_id = 0; interval_id < MAX_PROGRAM_INTERVAL; interval_id++)
    {
      thermostat_program_get_time(program, interval_id, &start_hour, &start_min, &stop_hour, &stop_min, &active);
   177da:	fe 01       	movw	r30, r28
   177dc:	31 96       	adiw	r30, 0x01	; 1
   177de:	6f 01       	movw	r12, r30
   177e0:	ce 01       	movw	r24, r28
   177e2:	02 96       	adiw	r24, 0x02	; 2
   177e4:	7c 01       	movw	r14, r24
   177e6:	8e 01       	movw	r16, r28
   177e8:	0d 5f       	subi	r16, 0xFD	; 253
   177ea:	1f 4f       	sbci	r17, 0xFF	; 255
   177ec:	9e 01       	movw	r18, r28
   177ee:	2c 5f       	subi	r18, 0xFC	; 252
   177f0:	3f 4f       	sbci	r19, 0xFF	; 255
   177f2:	ae 01       	movw	r20, r28
   177f4:	4b 5f       	subi	r20, 0xFB	; 251
   177f6:	5f 4f       	sbci	r21, 0xFF	; 255
   177f8:	6a 2d       	mov	r22, r10
   177fa:	8b 2d       	mov	r24, r11
   177fc:	0e 94 2c ba 	call	0x17458	; 0x17458 <thermostat_program_get_time(unsigned char, unsigned char, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:397
      if (active == 1)
   17800:	89 81       	ldd	r24, Y+1	; 0x01
   17802:	81 30       	cpi	r24, 0x01	; 1
   17804:	f1 f5       	brne	.+124    	; 0x17882 <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x110>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:399
      {
        week = thermostat_program_get_week(program, interval_id);
   17806:	6a 2d       	mov	r22, r10
   17808:	8b 2d       	mov	r24, r11
   1780a:	0e 94 f9 ba 	call	0x175f2	; 0x175f2 <thermostat_program_get_week(unsigned char, unsigned char)>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:400
        t_start = start_hour * 60 + start_min;
   1780e:	9d 81       	ldd	r25, Y+5	; 0x05
   17810:	2c 81       	ldd	r18, Y+4	; 0x04
   17812:	30 e0       	ldi	r19, 0x00	; 0
   17814:	93 9d       	mul	r25, r3
   17816:	20 0d       	add	r18, r0
   17818:	31 1d       	adc	r19, r1
   1781a:	11 24       	eor	r1, r1
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:403
        t_stop = stop_hour * 60 + stop_min;
        t_now = now_hour * 60 + now_minute;
        if (t_now >= t_start && t_now < t_stop && (week & (1 << now_dayweek) != 0))
   1781c:	82 16       	cp	r8, r18
   1781e:	93 06       	cpc	r9, r19
   17820:	84 f1       	brlt	.+96     	; 0x17882 <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x110>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:401 (discriminator 1)
      thermostat_program_get_time(program, interval_id, &start_hour, &start_min, &stop_hour, &stop_min, &active);
      if (active == 1)
      {
        week = thermostat_program_get_week(program, interval_id);
        t_start = start_hour * 60 + start_min;
        t_stop = stop_hour * 60 + stop_min;
   17822:	9b 81       	ldd	r25, Y+3	; 0x03
   17824:	2a 81       	ldd	r18, Y+2	; 0x02
   17826:	30 e0       	ldi	r19, 0x00	; 0
   17828:	93 9d       	mul	r25, r3
   1782a:	20 0d       	add	r18, r0
   1782c:	31 1d       	adc	r19, r1
   1782e:	11 24       	eor	r1, r1
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:403 (discriminator 1)
        t_now = now_hour * 60 + now_minute;
        if (t_now >= t_start && t_now < t_stop && (week & (1 << now_dayweek) != 0))
   17830:	82 16       	cp	r8, r18
   17832:	93 06       	cpc	r9, r19
   17834:	34 f5       	brge	.+76     	; 0x17882 <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x110>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:403 (discriminator 2)
   17836:	90 e0       	ldi	r25, 0x00	; 0
   17838:	86 21       	and	r24, r6
   1783a:	97 21       	and	r25, r7
   1783c:	89 2b       	or	r24, r25
   1783e:	09 f1       	breq	.+66     	; 0x17882 <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x110>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:405
        {
          *threshold = thermostat_program_get_threshold(program, interval_id);
   17840:	6a 2d       	mov	r22, r10
   17842:	8b 2d       	mov	r24, r11
   17844:	0e 94 bb ba 	call	0x17576	; 0x17576 <thermostat_program_get_threshold(unsigned char, unsigned char)>
   17848:	f2 01       	movw	r30, r4
   1784a:	91 83       	std	Z+1, r25	; 0x01
   1784c:	80 83       	st	Z, r24
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:411
          ret = PROG_ACTIVE;
          break;
        }
      }
    }
    ret = PROG_NO_INTERVAL;
   1784e:	8e ef       	ldi	r24, 0xFE	; 254
   17850:	b8 2e       	mov	r11, r24
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:414
  }
  return ret;
}
   17852:	8b 2d       	mov	r24, r11
   17854:	0f 90       	pop	r0
   17856:	0f 90       	pop	r0
   17858:	0f 90       	pop	r0
   1785a:	0f 90       	pop	r0
   1785c:	0f 90       	pop	r0
   1785e:	df 91       	pop	r29
   17860:	cf 91       	pop	r28
   17862:	1f 91       	pop	r17
   17864:	0f 91       	pop	r16
   17866:	ff 90       	pop	r15
   17868:	ef 90       	pop	r14
   1786a:	df 90       	pop	r13
   1786c:	cf 90       	pop	r12
   1786e:	bf 90       	pop	r11
   17870:	af 90       	pop	r10
   17872:	9f 90       	pop	r9
   17874:	8f 90       	pop	r8
   17876:	7f 90       	pop	r7
   17878:	6f 90       	pop	r6
   1787a:	5f 90       	pop	r5
   1787c:	4f 90       	pop	r4
   1787e:	3f 90       	pop	r3
   17880:	08 95       	ret
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:394 (discriminator 2)
  uint8_t start_hour, start_min, stop_hour, stop_min, active, week;
  int16_t t_start, t_stop, t_now;
  /// pokud neni vybrany zadny program, tak nic nedelam
  if (program != PROG_FREE)
  {
    for (uint8_t interval_id = 0; interval_id < MAX_PROGRAM_INTERVAL; interval_id++)
   17882:	a3 94       	inc	r10
   17884:	fb e0       	ldi	r31, 0x0B	; 11
   17886:	af 12       	cpse	r10, r31
   17888:	a8 cf       	rjmp	.-176    	; 0x177da <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x68>
   1788a:	e1 cf       	rjmp	.-62     	; 0x1784e <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0xdc>

0001788c <thermostat_ring_clear(unsigned char)>:
_Z21thermostat_ring_clearh():
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:418
  return ret;
}


void thermostat_ring_clear(uint8_t idx)
{
   1788c:	cf 93       	push	r28
   1788e:	c8 2f       	mov	r28, r24
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:419
  thermostat_ring_pid_set_kp(idx, 1);
   17890:	40 e0       	ldi	r20, 0x00	; 0
   17892:	50 e0       	ldi	r21, 0x00	; 0
   17894:	60 e8       	ldi	r22, 0x80	; 128
   17896:	7f e3       	ldi	r23, 0x3F	; 63
   17898:	0e 94 8a b9 	call	0x17314	; 0x17314 <thermostat_ring_pid_set_kp(unsigned char, float)>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:420
  thermostat_ring_pid_set_ki(idx, 0.5);
   1789c:	40 e0       	ldi	r20, 0x00	; 0
   1789e:	50 e0       	ldi	r21, 0x00	; 0
   178a0:	60 e0       	ldi	r22, 0x00	; 0
   178a2:	7f e3       	ldi	r23, 0x3F	; 63
   178a4:	8c 2f       	mov	r24, r28
   178a6:	0e 94 9d b9 	call	0x1733a	; 0x1733a <thermostat_ring_pid_set_ki(unsigned char, float)>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:421
  thermostat_ring_pid_set_kd(idx, 1);
   178aa:	40 e0       	ldi	r20, 0x00	; 0
   178ac:	50 e0       	ldi	r21, 0x00	; 0
   178ae:	60 e8       	ldi	r22, 0x80	; 128
   178b0:	7f e3       	ldi	r23, 0x3F	; 63
   178b2:	8c 2f       	mov	r24, r28
   178b4:	0e 94 b0 b9 	call	0x17360	; 0x17360 <thermostat_ring_pid_set_kd(unsigned char, float)>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:422
  thermostat_ring_pid_set_time(idx, 60);
   178b8:	6c e3       	ldi	r22, 0x3C	; 60
   178ba:	8c 2f       	mov	r24, r28
   178bc:	0e 94 c3 b9 	call	0x17386	; 0x17386 <thermostat_ring_pid_set_time(unsigned char, unsigned char)>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:423
  thermostat_ring_set_asociate_tds(idx, RING_NO_INPUT);
   178c0:	6f ef       	ldi	r22, 0xFF	; 255
   178c2:	8c 2f       	mov	r24, r28
   178c4:	0e 94 56 b8 	call	0x170ac	; 0x170ac <thermostat_ring_set_asociate_tds(unsigned char, unsigned char)>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:424
  thermostat_ring_set_mezni(idx, 220);
   178c8:	6c ed       	ldi	r22, 0xDC	; 220
   178ca:	70 e0       	ldi	r23, 0x00	; 0
   178cc:	8c 2f       	mov	r24, r28
   178ce:	0e 94 37 b8 	call	0x1706e	; 0x1706e <thermostat_ring_set_mezni(unsigned char, int)>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:425
  thermostat_ring_set_program_id(idx, PROG_FREE);
   178d2:	6f ef       	ldi	r22, 0xFF	; 255
   178d4:	8c 2f       	mov	r24, r28
   178d6:	0e 94 12 b8 	call	0x17024	; 0x17024 <thermostat_ring_set_program_id(unsigned char, unsigned char)>
_Z25thermostat_ring_set_statehh():
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:23
{
  return therm_stav[idx];
}
void thermostat_ring_set_state(uint8_t idx, uint8_t stav)
{
  therm_stav[idx] = stav;
   178da:	8c 2f       	mov	r24, r28
   178dc:	90 e0       	ldi	r25, 0x00	; 0
   178de:	fc 01       	movw	r30, r24
   178e0:	ef 55       	subi	r30, 0x5F	; 95
   178e2:	fe 4e       	sbci	r31, 0xEE	; 238
   178e4:	10 82       	st	Z, r1
_Z25thermostat_ring_set_powerhh():
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:33
{
  return therm_power[idx];
}
void thermostat_ring_set_power(uint8_t idx, uint8_t stav)
{
  therm_power[idx] = stav;
   178e6:	84 56       	subi	r24, 0x64	; 100
   178e8:	9e 4e       	sbci	r25, 0xEE	; 238
   178ea:	fc 01       	movw	r30, r24
   178ec:	10 82       	st	Z, r1
_Z21thermostat_ring_clearh():
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:428
  thermostat_ring_set_asociate_tds(idx, RING_NO_INPUT);
  thermostat_ring_set_mezni(idx, 220);
  thermostat_ring_set_program_id(idx, PROG_FREE);
  thermostat_ring_set_state(idx, 0);
  thermostat_ring_set_power(idx, 0);
  thermostat_ring_set_active(idx, RING_FREE);
   178ee:	6f ef       	ldi	r22, 0xFF	; 255
   178f0:	8c 2f       	mov	r24, r28
   178f2:	0e 94 02 b8 	call	0x17004	; 0x17004 <thermostat_ring_set_active(unsigned char, unsigned char)>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:429
  thermostat_ring_set_output(idx, 255);
   178f6:	6f ef       	ldi	r22, 0xFF	; 255
   178f8:	8c 2f       	mov	r24, r28
   178fa:	0e 94 f2 b7 	call	0x16fe4	; 0x16fe4 <thermostat_ring_set_output(unsigned char, unsigned char)>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:430
  thermostat_ring_set_mode(idx, 0);
   178fe:	60 e0       	ldi	r22, 0x00	; 0
   17900:	8c 2f       	mov	r24, r28
   17902:	0e 94 66 b8 	call	0x170cc	; 0x170cc <thermostat_ring_set_mode(unsigned char, unsigned char)>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:431
  thermostat_ring_set_name(idx, "FREE");
   17906:	68 e6       	ldi	r22, 0x68	; 104
   17908:	78 e0       	ldi	r23, 0x08	; 8
   1790a:	8c 2f       	mov	r24, r28
   1790c:	0e 94 c3 b7 	call	0x16f86	; 0x16f86 <thermostat_ring_set_name(unsigned char, char*)>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:432
  thermostat_ring_set_status_bites(idx, 0);
   17910:	60 e0       	ldi	r22, 0x00	; 0
   17912:	8c 2f       	mov	r24, r28
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:433
}
   17914:	cf 91       	pop	r28
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:432
  thermostat_ring_set_power(idx, 0);
  thermostat_ring_set_active(idx, RING_FREE);
  thermostat_ring_set_output(idx, 255);
  thermostat_ring_set_mode(idx, 0);
  thermostat_ring_set_name(idx, "FREE");
  thermostat_ring_set_status_bites(idx, 0);
   17916:	0c 94 93 b8 	jmp	0x17126	; 0x17126 <thermostat_ring_set_status_bites(unsigned char, unsigned char)>

0001791a <_GLOBAL__sub_I_PID_Input>:
_GLOBAL__sub_I_PID_Input():
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:36
void thermostat_ring_set_power(uint8_t idx, uint8_t stav)
{
  therm_power[idx] = stav;
}

PID** array_pids = new PID*[MAX_THERMOSTAT];
   1791a:	8a e0       	ldi	r24, 0x0A	; 10
   1791c:	90 e0       	ldi	r25, 0x00	; 0
   1791e:	0f 94 d9 13 	call	0x227b2	; 0x227b2 <operator new[](unsigned int)>
   17922:	90 93 9b 11 	sts	0x119B, r25	; 0x80119b <array_pids+0x1>
   17926:	80 93 9a 11 	sts	0x119A, r24	; 0x80119a <array_pids>
/tmp/arduino_build_131566/sketch/saric_thermostat.cpp:433
  thermostat_ring_set_active(idx, RING_FREE);
  thermostat_ring_set_output(idx, 255);
  thermostat_ring_set_mode(idx, 0);
  thermostat_ring_set_name(idx, "FREE");
  thermostat_ring_set_status_bites(idx, 0);
}
   1792a:	08 95       	ret

0001792c <LCDWIKI_GUI::LCDWIKI_GUI()>:
_ZN11LCDWIKI_GUIC2Ev():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:787
				}
			}
		}
	}
	Print(st, x, y);
}
   1792c:	fc 01       	movw	r30, r24
   1792e:	8f e0       	ldi	r24, 0x0F	; 15
   17930:	99 e0       	ldi	r25, 0x09	; 9
   17932:	91 83       	std	Z+1, r25	; 0x01
   17934:	80 83       	st	Z, r24
   17936:	80 e0       	ldi	r24, 0x00	; 0
   17938:	98 ef       	ldi	r25, 0xF8	; 248
   1793a:	91 87       	std	Z+9, r25	; 0x09
   1793c:	80 87       	std	Z+8, r24	; 0x08
   1793e:	20 ee       	ldi	r18, 0xE0	; 224
   17940:	37 e0       	ldi	r19, 0x07	; 7
   17942:	37 83       	std	Z+7, r19	; 0x07
   17944:	26 83       	std	Z+6, r18	; 0x06
   17946:	93 87       	std	Z+11, r25	; 0x0b
   17948:	82 87       	std	Z+10, r24	; 0x0a
   1794a:	81 e0       	ldi	r24, 0x01	; 1
   1794c:	84 87       	std	Z+12, r24	; 0x0c
   1794e:	15 86       	std	Z+13, r1	; 0x0d
   17950:	08 95       	ret

00017952 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>:
_ZN11LCDWIKI_GUI14Set_Draw_colorEj():
   17952:	fc 01       	movw	r30, r24
   17954:	73 87       	std	Z+11, r23	; 0x0b
   17956:	62 87       	std	Z+10, r22	; 0x0a
   17958:	08 95       	ret

0001795a <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)>:
_ZN11LCDWIKI_GUI14Fill_RectangleEiiii():
   1795a:	ef 92       	push	r14
   1795c:	ff 92       	push	r15
   1795e:	0f 93       	push	r16
   17960:	1f 93       	push	r17
   17962:	cf 93       	push	r28
   17964:	df 93       	push	r29
   17966:	e9 01       	movw	r28, r18
   17968:	79 01       	movw	r14, r18
   1796a:	e6 1a       	sub	r14, r22
   1796c:	f7 0a       	sbc	r15, r23
   1796e:	97 01       	movw	r18, r14
   17970:	2f 5f       	subi	r18, 0xFF	; 255
   17972:	3f 4f       	sbci	r19, 0xFF	; 255
   17974:	f8 01       	movw	r30, r16
   17976:	e4 1b       	sub	r30, r20
   17978:	f5 0b       	sbc	r31, r21
   1797a:	df 01       	movw	r26, r30
   1797c:	11 96       	adiw	r26, 0x01	; 1
   1797e:	37 ff       	sbrs	r19, 7
   17980:	04 c0       	rjmp	.+8      	; 0x1798a <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)+0x30>
   17982:	97 01       	movw	r18, r14
   17984:	20 95       	com	r18
   17986:	30 95       	com	r19
   17988:	be 01       	movw	r22, r28
   1798a:	b7 ff       	sbrs	r27, 7
   1798c:	04 c0       	rjmp	.+8      	; 0x17996 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)+0x3c>
   1798e:	df 01       	movw	r26, r30
   17990:	a0 95       	com	r26
   17992:	b0 95       	com	r27
   17994:	a8 01       	movw	r20, r16
   17996:	ec 01       	movw	r28, r24
   17998:	ea 84       	ldd	r14, Y+10	; 0x0a
   1799a:	fb 84       	ldd	r15, Y+11	; 0x0b
   1799c:	e8 81       	ld	r30, Y
   1799e:	f9 81       	ldd	r31, Y+1	; 0x01
   179a0:	04 80       	ldd	r0, Z+4	; 0x04
   179a2:	f5 81       	ldd	r31, Z+5	; 0x05
   179a4:	e0 2d       	mov	r30, r0
   179a6:	8d 01       	movw	r16, r26
   179a8:	19 95       	eicall
   179aa:	df 91       	pop	r29
   179ac:	cf 91       	pop	r28
   179ae:	1f 91       	pop	r17
   179b0:	0f 91       	pop	r16
   179b2:	ff 90       	pop	r15
   179b4:	ef 90       	pop	r14
   179b6:	08 95       	ret

000179b8 <LCDWIKI_GUI::Draw_Fast_VLine(int, int, int)>:
_ZN11LCDWIKI_GUI15Draw_Fast_VLineEiii():
   179b8:	ef 92       	push	r14
   179ba:	ff 92       	push	r15
   179bc:	0f 93       	push	r16
   179be:	1f 93       	push	r17
   179c0:	dc 01       	movw	r26, r24
   179c2:	1a 96       	adiw	r26, 0x0a	; 10
   179c4:	ed 90       	ld	r14, X+
   179c6:	fc 90       	ld	r15, X
   179c8:	1b 97       	sbiw	r26, 0x0b	; 11
   179ca:	ed 91       	ld	r30, X+
   179cc:	fc 91       	ld	r31, X
   179ce:	04 80       	ldd	r0, Z+4	; 0x04
   179d0:	f5 81       	ldd	r31, Z+5	; 0x05
   179d2:	e0 2d       	mov	r30, r0
   179d4:	89 01       	movw	r16, r18
   179d6:	21 e0       	ldi	r18, 0x01	; 1
   179d8:	30 e0       	ldi	r19, 0x00	; 0
   179da:	19 95       	eicall
   179dc:	1f 91       	pop	r17
   179de:	0f 91       	pop	r16
   179e0:	ff 90       	pop	r15
   179e2:	ef 90       	pop	r14
   179e4:	08 95       	ret

000179e6 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int)>:
_ZN11LCDWIKI_GUI15Draw_Fast_HLineEiii():
   179e6:	ef 92       	push	r14
   179e8:	ff 92       	push	r15
   179ea:	0f 93       	push	r16
   179ec:	1f 93       	push	r17
   179ee:	dc 01       	movw	r26, r24
   179f0:	1a 96       	adiw	r26, 0x0a	; 10
   179f2:	ed 90       	ld	r14, X+
   179f4:	fc 90       	ld	r15, X
   179f6:	1b 97       	sbiw	r26, 0x0b	; 11
   179f8:	ed 91       	ld	r30, X+
   179fa:	fc 91       	ld	r31, X
   179fc:	04 80       	ldd	r0, Z+4	; 0x04
   179fe:	f5 81       	ldd	r31, Z+5	; 0x05
   17a00:	e0 2d       	mov	r30, r0
   17a02:	01 e0       	ldi	r16, 0x01	; 1
   17a04:	10 e0       	ldi	r17, 0x00	; 0
   17a06:	19 95       	eicall
   17a08:	1f 91       	pop	r17
   17a0a:	0f 91       	pop	r16
   17a0c:	ff 90       	pop	r15
   17a0e:	ef 90       	pop	r14
   17a10:	08 95       	ret

00017a12 <LCDWIKI_GUI::Fill_Screen(unsigned int)>:
_ZN11LCDWIKI_GUI11Fill_ScreenEj():
   17a12:	cf 92       	push	r12
   17a14:	df 92       	push	r13
   17a16:	ef 92       	push	r14
   17a18:	ff 92       	push	r15
   17a1a:	0f 93       	push	r16
   17a1c:	1f 93       	push	r17
   17a1e:	cf 93       	push	r28
   17a20:	df 93       	push	r29
   17a22:	ec 01       	movw	r28, r24
   17a24:	7b 01       	movw	r14, r22
   17a26:	e8 81       	ld	r30, Y
   17a28:	f9 81       	ldd	r31, Y+1	; 0x01
   17a2a:	c4 80       	ldd	r12, Z+4	; 0x04
   17a2c:	d5 80       	ldd	r13, Z+5	; 0x05
   17a2e:	04 84       	ldd	r0, Z+12	; 0x0c
   17a30:	f5 85       	ldd	r31, Z+13	; 0x0d
   17a32:	e0 2d       	mov	r30, r0
   17a34:	19 95       	eicall
   17a36:	8c 01       	movw	r16, r24
   17a38:	e8 81       	ld	r30, Y
   17a3a:	f9 81       	ldd	r31, Y+1	; 0x01
   17a3c:	06 84       	ldd	r0, Z+14	; 0x0e
   17a3e:	f7 85       	ldd	r31, Z+15	; 0x0f
   17a40:	e0 2d       	mov	r30, r0
   17a42:	ce 01       	movw	r24, r28
   17a44:	19 95       	eicall
   17a46:	9c 01       	movw	r18, r24
   17a48:	50 e0       	ldi	r21, 0x00	; 0
   17a4a:	40 e0       	ldi	r20, 0x00	; 0
   17a4c:	70 e0       	ldi	r23, 0x00	; 0
   17a4e:	60 e0       	ldi	r22, 0x00	; 0
   17a50:	ce 01       	movw	r24, r28
   17a52:	f6 01       	movw	r30, r12
   17a54:	19 95       	eicall
   17a56:	df 91       	pop	r29
   17a58:	cf 91       	pop	r28
   17a5a:	1f 91       	pop	r17
   17a5c:	0f 91       	pop	r16
   17a5e:	ff 90       	pop	r15
   17a60:	ef 90       	pop	r14
   17a62:	df 90       	pop	r13
   17a64:	cf 90       	pop	r12
   17a66:	08 95       	ret

00017a68 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>:
_ZN11LCDWIKI_GUI14Draw_RectangleEiiii():
   17a68:	6f 92       	push	r6
   17a6a:	7f 92       	push	r7
   17a6c:	8f 92       	push	r8
   17a6e:	9f 92       	push	r9
   17a70:	af 92       	push	r10
   17a72:	bf 92       	push	r11
   17a74:	cf 92       	push	r12
   17a76:	df 92       	push	r13
   17a78:	ef 92       	push	r14
   17a7a:	ff 92       	push	r15
   17a7c:	0f 93       	push	r16
   17a7e:	1f 93       	push	r17
   17a80:	cf 93       	push	r28
   17a82:	df 93       	push	r29
   17a84:	3c 01       	movw	r6, r24
   17a86:	7b 01       	movw	r14, r22
   17a88:	ea 01       	movw	r28, r20
   17a8a:	49 01       	movw	r8, r18
   17a8c:	26 1b       	sub	r18, r22
   17a8e:	37 0b       	sbc	r19, r23
   17a90:	59 01       	movw	r10, r18
   17a92:	4f ef       	ldi	r20, 0xFF	; 255
   17a94:	a4 1a       	sub	r10, r20
   17a96:	b4 0a       	sbc	r11, r20
   17a98:	c8 01       	movw	r24, r16
   17a9a:	8c 1b       	sub	r24, r28
   17a9c:	9d 0b       	sbc	r25, r29
   17a9e:	6c 01       	movw	r12, r24
   17aa0:	4f ef       	ldi	r20, 0xFF	; 255
   17aa2:	c4 1a       	sub	r12, r20
   17aa4:	d4 0a       	sbc	r13, r20
   17aa6:	b7 fe       	sbrs	r11, 7
   17aa8:	04 c0       	rjmp	.+8      	; 0x17ab2 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)+0x4a>
   17aaa:	59 01       	movw	r10, r18
   17aac:	a0 94       	com	r10
   17aae:	b0 94       	com	r11
   17ab0:	74 01       	movw	r14, r8
   17ab2:	d7 fe       	sbrs	r13, 7
   17ab4:	04 c0       	rjmp	.+8      	; 0x17abe <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)+0x56>
   17ab6:	6c 01       	movw	r12, r24
   17ab8:	c0 94       	com	r12
   17aba:	d0 94       	com	r13
   17abc:	e8 01       	movw	r28, r16
   17abe:	95 01       	movw	r18, r10
   17ac0:	ae 01       	movw	r20, r28
   17ac2:	b7 01       	movw	r22, r14
   17ac4:	c3 01       	movw	r24, r6
   17ac6:	0e 94 f3 bc 	call	0x179e6	; 0x179e6 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int)>
   17aca:	95 01       	movw	r18, r10
   17acc:	a8 01       	movw	r20, r16
   17ace:	b7 01       	movw	r22, r14
   17ad0:	c3 01       	movw	r24, r6
   17ad2:	0e 94 f3 bc 	call	0x179e6	; 0x179e6 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int)>
   17ad6:	96 01       	movw	r18, r12
   17ad8:	ae 01       	movw	r20, r28
   17ada:	b7 01       	movw	r22, r14
   17adc:	c3 01       	movw	r24, r6
   17ade:	0e 94 dc bc 	call	0x179b8	; 0x179b8 <LCDWIKI_GUI::Draw_Fast_VLine(int, int, int)>
   17ae2:	96 01       	movw	r18, r12
   17ae4:	ae 01       	movw	r20, r28
   17ae6:	b4 01       	movw	r22, r8
   17ae8:	c3 01       	movw	r24, r6
   17aea:	df 91       	pop	r29
   17aec:	cf 91       	pop	r28
   17aee:	1f 91       	pop	r17
   17af0:	0f 91       	pop	r16
   17af2:	ff 90       	pop	r15
   17af4:	ef 90       	pop	r14
   17af6:	df 90       	pop	r13
   17af8:	cf 90       	pop	r12
   17afa:	bf 90       	pop	r11
   17afc:	af 90       	pop	r10
   17afe:	9f 90       	pop	r9
   17b00:	8f 90       	pop	r8
   17b02:	7f 90       	pop	r7
   17b04:	6f 90       	pop	r6
   17b06:	0c 94 dc bc 	jmp	0x179b8	; 0x179b8 <LCDWIKI_GUI::Draw_Fast_VLine(int, int, int)>

00017b0a <LCDWIKI_GUI::Set_Text_colour(unsigned int)>:
_ZN11LCDWIKI_GUI15Set_Text_colourEj():
   17b0a:	fc 01       	movw	r30, r24
   17b0c:	77 83       	std	Z+7, r23	; 0x07
   17b0e:	66 83       	std	Z+6, r22	; 0x06
   17b10:	08 95       	ret

00017b12 <LCDWIKI_GUI::Set_Text_Back_colour(unsigned int)>:
_ZN11LCDWIKI_GUI20Set_Text_Back_colourEj():
   17b12:	fc 01       	movw	r30, r24
   17b14:	71 87       	std	Z+9, r23	; 0x09
   17b16:	60 87       	std	Z+8, r22	; 0x08
   17b18:	08 95       	ret

00017b1a <LCDWIKI_GUI::Set_Text_Size(unsigned char)>:
_ZN11LCDWIKI_GUI13Set_Text_SizeEh():
   17b1a:	fc 01       	movw	r30, r24
   17b1c:	64 87       	std	Z+12, r22	; 0x0c
   17b1e:	08 95       	ret

00017b20 <LCDWIKI_GUI::Set_Text_Mode(bool)>:
_ZN11LCDWIKI_GUI13Set_Text_ModeEb():
   17b20:	fc 01       	movw	r30, r24
   17b22:	65 87       	std	Z+13, r22	; 0x0d
   17b24:	08 95       	ret

00017b26 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)>:
_ZN11LCDWIKI_GUI9Draw_CharEiihjjhb():
   17b26:	2f 92       	push	r2
   17b28:	3f 92       	push	r3
   17b2a:	4f 92       	push	r4
   17b2c:	5f 92       	push	r5
   17b2e:	6f 92       	push	r6
   17b30:	7f 92       	push	r7
   17b32:	8f 92       	push	r8
   17b34:	9f 92       	push	r9
   17b36:	af 92       	push	r10
   17b38:	bf 92       	push	r11
   17b3a:	cf 92       	push	r12
   17b3c:	df 92       	push	r13
   17b3e:	ef 92       	push	r14
   17b40:	ff 92       	push	r15
   17b42:	0f 93       	push	r16
   17b44:	1f 93       	push	r17
   17b46:	cf 93       	push	r28
   17b48:	df 93       	push	r29
   17b4a:	cd b7       	in	r28, 0x3d	; 61
   17b4c:	de b7       	in	r29, 0x3e	; 62
   17b4e:	2d 97       	sbiw	r28, 0x0d	; 13
   17b50:	0f b6       	in	r0, 0x3f	; 63
   17b52:	f8 94       	cli
   17b54:	de bf       	out	0x3e, r29	; 62
   17b56:	0f be       	out	0x3f, r0	; 63
   17b58:	cd bf       	out	0x3d, r28	; 61
   17b5a:	3c 01       	movw	r6, r24
   17b5c:	4b 01       	movw	r8, r22
   17b5e:	2a 01       	movw	r4, r20
   17b60:	d2 2e       	mov	r13, r18
   17b62:	1c 83       	std	Y+4, r17	; 0x04
   17b64:	0b 83       	std	Y+3, r16	; 0x03
   17b66:	fe 82       	std	Y+6, r15	; 0x06
   17b68:	ed 82       	std	Y+5, r14	; 0x05
   17b6a:	ca 82       	std	Y+2, r12	; 0x02
   17b6c:	a9 86       	std	Y+9, r10	; 0x09
   17b6e:	dc 01       	movw	r26, r24
   17b70:	ed 91       	ld	r30, X+
   17b72:	fc 91       	ld	r31, X
   17b74:	06 84       	ldd	r0, Z+14	; 0x0e
   17b76:	f7 85       	ldd	r31, Z+15	; 0x0f
   17b78:	e0 2d       	mov	r30, r0
   17b7a:	19 95       	eicall
   17b7c:	88 16       	cp	r8, r24
   17b7e:	99 06       	cpc	r9, r25
   17b80:	0c f0       	brlt	.+2      	; 0x17b84 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x5e>
   17b82:	7a c0       	rjmp	.+244    	; 0x17c78 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x152>
   17b84:	d3 01       	movw	r26, r6
   17b86:	ed 91       	ld	r30, X+
   17b88:	fc 91       	ld	r31, X
   17b8a:	04 84       	ldd	r0, Z+12	; 0x0c
   17b8c:	f5 85       	ldd	r31, Z+13	; 0x0d
   17b8e:	e0 2d       	mov	r30, r0
   17b90:	c3 01       	movw	r24, r6
   17b92:	19 95       	eicall
   17b94:	48 16       	cp	r4, r24
   17b96:	59 06       	cpc	r5, r25
   17b98:	0c f0       	brlt	.+2      	; 0x17b9c <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x76>
   17b9a:	6e c0       	rjmp	.+220    	; 0x17c78 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x152>
   17b9c:	3a 81       	ldd	r19, Y+2	; 0x02
   17b9e:	23 2f       	mov	r18, r19
   17ba0:	30 e0       	ldi	r19, 0x00	; 0
   17ba2:	3d 87       	std	Y+13, r19	; 0x0d
   17ba4:	2c 87       	std	Y+12, r18	; 0x0c
   17ba6:	c4 01       	movw	r24, r8
   17ba8:	aa 81       	ldd	r26, Y+2	; 0x02
   17baa:	46 e0       	ldi	r20, 0x06	; 6
   17bac:	a4 9f       	mul	r26, r20
   17bae:	80 0d       	add	r24, r0
   17bb0:	91 1d       	adc	r25, r1
   17bb2:	11 24       	eor	r1, r1
   17bb4:	18 16       	cp	r1, r24
   17bb6:	19 06       	cpc	r1, r25
   17bb8:	0c f0       	brlt	.+2      	; 0x17bbc <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x96>
   17bba:	5e c0       	rjmp	.+188    	; 0x17c78 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x152>
   17bbc:	c9 01       	movw	r24, r18
   17bbe:	23 e0       	ldi	r18, 0x03	; 3
   17bc0:	88 0f       	add	r24, r24
   17bc2:	99 1f       	adc	r25, r25
   17bc4:	2a 95       	dec	r18
   17bc6:	e1 f7       	brne	.-8      	; 0x17bc0 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x9a>
   17bc8:	84 0d       	add	r24, r4
   17bca:	95 1d       	adc	r25, r5
   17bcc:	18 16       	cp	r1, r24
   17bce:	19 06       	cpc	r1, r25
   17bd0:	0c f0       	brlt	.+2      	; 0x17bd4 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0xae>
   17bd2:	52 c0       	rjmp	.+164    	; 0x17c78 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x152>
   17bd4:	bf ea       	ldi	r27, 0xAF	; 175
   17bd6:	bd 15       	cp	r27, r13
   17bd8:	08 f4       	brcc	.+2      	; 0x17bdc <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0xb6>
   17bda:	d3 94       	inc	r13
   17bdc:	54 01       	movw	r10, r8
   17bde:	19 82       	std	Y+1, r1	; 0x01
   17be0:	83 e5       	ldi	r24, 0x53	; 83
   17be2:	97 e8       	ldi	r25, 0x87	; 135
   17be4:	88 19       	sub	r24, r8
   17be6:	99 09       	sbc	r25, r9
   17be8:	9c 01       	movw	r18, r24
   17bea:	45 e0       	ldi	r20, 0x05	; 5
   17bec:	d4 9e       	mul	r13, r20
   17bee:	20 0d       	add	r18, r0
   17bf0:	31 1d       	adc	r19, r1
   17bf2:	11 24       	eor	r1, r1
   17bf4:	3b 87       	std	Y+11, r19	; 0x0b
   17bf6:	2a 87       	std	Y+10, r18	; 0x0a
   17bf8:	89 81       	ldd	r24, Y+1	; 0x01
   17bfa:	e0 e0       	ldi	r30, 0x00	; 0
   17bfc:	85 30       	cpi	r24, 0x05	; 5
   17bfe:	29 f0       	breq	.+10     	; 0x17c0a <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0xe4>
   17c00:	ea 85       	ldd	r30, Y+10	; 0x0a
   17c02:	fb 85       	ldd	r31, Y+11	; 0x0b
   17c04:	ea 0d       	add	r30, r10
   17c06:	fb 1d       	adc	r31, r11
   17c08:	e4 91       	lpm	r30, Z
   17c0a:	62 01       	movw	r12, r4
   17c0c:	31 2c       	mov	r3, r1
   17c0e:	21 2c       	mov	r2, r1
   17c10:	ae 2f       	mov	r26, r30
   17c12:	b0 e0       	ldi	r27, 0x00	; 0
   17c14:	b8 87       	std	Y+8, r27	; 0x08
   17c16:	af 83       	std	Y+7, r26	; 0x07
   17c18:	e0 ff       	sbrs	r30, 0
   17c1a:	54 c0       	rjmp	.+168    	; 0x17cc4 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x19e>
   17c1c:	d3 01       	movw	r26, r6
   17c1e:	ed 91       	ld	r30, X+
   17c20:	fc 91       	ld	r31, X
   17c22:	ba 81       	ldd	r27, Y+2	; 0x02
   17c24:	b1 30       	cpi	r27, 0x01	; 1
   17c26:	09 f0       	breq	.+2      	; 0x17c2a <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x104>
   17c28:	40 c0       	rjmp	.+128    	; 0x17caa <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x184>
   17c2a:	02 80       	ldd	r0, Z+2	; 0x02
   17c2c:	f3 81       	ldd	r31, Z+3	; 0x03
   17c2e:	e0 2d       	mov	r30, r0
   17c30:	2b 81       	ldd	r18, Y+3	; 0x03
   17c32:	3c 81       	ldd	r19, Y+4	; 0x04
   17c34:	a2 01       	movw	r20, r4
   17c36:	42 0d       	add	r20, r2
   17c38:	53 1d       	adc	r21, r3
   17c3a:	b5 01       	movw	r22, r10
   17c3c:	c3 01       	movw	r24, r6
   17c3e:	19 95       	eicall
   17c40:	ef 81       	ldd	r30, Y+7	; 0x07
   17c42:	f8 85       	ldd	r31, Y+8	; 0x08
   17c44:	f5 95       	asr	r31
   17c46:	e7 95       	ror	r30
   17c48:	2f ef       	ldi	r18, 0xFF	; 255
   17c4a:	22 1a       	sub	r2, r18
   17c4c:	32 0a       	sbc	r3, r18
   17c4e:	8c 85       	ldd	r24, Y+12	; 0x0c
   17c50:	9d 85       	ldd	r25, Y+13	; 0x0d
   17c52:	c8 0e       	add	r12, r24
   17c54:	d9 1e       	adc	r13, r25
   17c56:	98 e0       	ldi	r25, 0x08	; 8
   17c58:	29 16       	cp	r2, r25
   17c5a:	31 04       	cpc	r3, r1
   17c5c:	c9 f6       	brne	.-78     	; 0x17c10 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0xea>
   17c5e:	af ef       	ldi	r26, 0xFF	; 255
   17c60:	aa 1a       	sub	r10, r26
   17c62:	ba 0a       	sbc	r11, r26
   17c64:	2c 85       	ldd	r18, Y+12	; 0x0c
   17c66:	3d 85       	ldd	r19, Y+13	; 0x0d
   17c68:	82 0e       	add	r8, r18
   17c6a:	93 1e       	adc	r9, r19
   17c6c:	39 81       	ldd	r19, Y+1	; 0x01
   17c6e:	3f 5f       	subi	r19, 0xFF	; 255
   17c70:	39 83       	std	Y+1, r19	; 0x01
   17c72:	36 30       	cpi	r19, 0x06	; 6
   17c74:	09 f0       	breq	.+2      	; 0x17c78 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x152>
   17c76:	c0 cf       	rjmp	.-128    	; 0x17bf8 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0xd2>
   17c78:	2d 96       	adiw	r28, 0x0d	; 13
   17c7a:	0f b6       	in	r0, 0x3f	; 63
   17c7c:	f8 94       	cli
   17c7e:	de bf       	out	0x3e, r29	; 62
   17c80:	0f be       	out	0x3f, r0	; 63
   17c82:	cd bf       	out	0x3d, r28	; 61
   17c84:	df 91       	pop	r29
   17c86:	cf 91       	pop	r28
   17c88:	1f 91       	pop	r17
   17c8a:	0f 91       	pop	r16
   17c8c:	ff 90       	pop	r15
   17c8e:	ef 90       	pop	r14
   17c90:	df 90       	pop	r13
   17c92:	cf 90       	pop	r12
   17c94:	bf 90       	pop	r11
   17c96:	af 90       	pop	r10
   17c98:	9f 90       	pop	r9
   17c9a:	8f 90       	pop	r8
   17c9c:	7f 90       	pop	r7
   17c9e:	6f 90       	pop	r6
   17ca0:	5f 90       	pop	r5
   17ca2:	4f 90       	pop	r4
   17ca4:	3f 90       	pop	r3
   17ca6:	2f 90       	pop	r2
   17ca8:	08 95       	ret
   17caa:	04 80       	ldd	r0, Z+4	; 0x04
   17cac:	f5 81       	ldd	r31, Z+5	; 0x05
   17cae:	e0 2d       	mov	r30, r0
   17cb0:	eb 80       	ldd	r14, Y+3	; 0x03
   17cb2:	fc 80       	ldd	r15, Y+4	; 0x04
   17cb4:	0c 85       	ldd	r16, Y+12	; 0x0c
   17cb6:	1d 85       	ldd	r17, Y+13	; 0x0d
   17cb8:	98 01       	movw	r18, r16
   17cba:	a6 01       	movw	r20, r12
   17cbc:	b4 01       	movw	r22, r8
   17cbe:	c3 01       	movw	r24, r6
   17cc0:	19 95       	eicall
   17cc2:	be cf       	rjmp	.-132    	; 0x17c40 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x11a>
   17cc4:	2d 81       	ldd	r18, Y+5	; 0x05
   17cc6:	3e 81       	ldd	r19, Y+6	; 0x06
   17cc8:	8b 81       	ldd	r24, Y+3	; 0x03
   17cca:	9c 81       	ldd	r25, Y+4	; 0x04
   17ccc:	28 17       	cp	r18, r24
   17cce:	39 07       	cpc	r19, r25
   17cd0:	09 f4       	brne	.+2      	; 0x17cd4 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x1ae>
   17cd2:	b6 cf       	rjmp	.-148    	; 0x17c40 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x11a>
   17cd4:	99 85       	ldd	r25, Y+9	; 0x09
   17cd6:	91 11       	cpse	r25, r1
   17cd8:	b3 cf       	rjmp	.-154    	; 0x17c40 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x11a>
   17cda:	d3 01       	movw	r26, r6
   17cdc:	ed 91       	ld	r30, X+
   17cde:	fc 91       	ld	r31, X
   17ce0:	ba 81       	ldd	r27, Y+2	; 0x02
   17ce2:	b1 30       	cpi	r27, 0x01	; 1
   17ce4:	21 f4       	brne	.+8      	; 0x17cee <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x1c8>
   17ce6:	02 80       	ldd	r0, Z+2	; 0x02
   17ce8:	f3 81       	ldd	r31, Z+3	; 0x03
   17cea:	e0 2d       	mov	r30, r0
   17cec:	a3 cf       	rjmp	.-186    	; 0x17c34 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x10e>
   17cee:	04 80       	ldd	r0, Z+4	; 0x04
   17cf0:	f5 81       	ldd	r31, Z+5	; 0x05
   17cf2:	e0 2d       	mov	r30, r0
   17cf4:	ed 80       	ldd	r14, Y+5	; 0x05
   17cf6:	fe 80       	ldd	r15, Y+6	; 0x06
   17cf8:	dd cf       	rjmp	.-70     	; 0x17cb4 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x18e>

00017cfa <LCDWIKI_GUI::write(unsigned char)>:
_ZN11LCDWIKI_GUI5writeEh():
   17cfa:	af 92       	push	r10
   17cfc:	cf 92       	push	r12
   17cfe:	ef 92       	push	r14
   17d00:	ff 92       	push	r15
   17d02:	0f 93       	push	r16
   17d04:	1f 93       	push	r17
   17d06:	cf 93       	push	r28
   17d08:	df 93       	push	r29
   17d0a:	ec 01       	movw	r28, r24
   17d0c:	6a 30       	cpi	r22, 0x0A	; 10
   17d0e:	c1 f4       	brne	.+48     	; 0x17d40 <LCDWIKI_GUI::write(unsigned char)+0x46>
   17d10:	8c 85       	ldd	r24, Y+12	; 0x0c
   17d12:	98 e0       	ldi	r25, 0x08	; 8
   17d14:	89 9f       	mul	r24, r25
   17d16:	90 01       	movw	r18, r0
   17d18:	11 24       	eor	r1, r1
   17d1a:	8c 81       	ldd	r24, Y+4	; 0x04
   17d1c:	9d 81       	ldd	r25, Y+5	; 0x05
   17d1e:	82 0f       	add	r24, r18
   17d20:	93 1f       	adc	r25, r19
   17d22:	9d 83       	std	Y+5, r25	; 0x05
   17d24:	8c 83       	std	Y+4, r24	; 0x04
   17d26:	1b 82       	std	Y+3, r1	; 0x03
   17d28:	1a 82       	std	Y+2, r1	; 0x02
   17d2a:	81 e0       	ldi	r24, 0x01	; 1
   17d2c:	90 e0       	ldi	r25, 0x00	; 0
   17d2e:	df 91       	pop	r29
   17d30:	cf 91       	pop	r28
   17d32:	1f 91       	pop	r17
   17d34:	0f 91       	pop	r16
   17d36:	ff 90       	pop	r15
   17d38:	ef 90       	pop	r14
   17d3a:	cf 90       	pop	r12
   17d3c:	af 90       	pop	r10
   17d3e:	08 95       	ret
   17d40:	6d 30       	cpi	r22, 0x0D	; 13
   17d42:	99 f3       	breq	.-26     	; 0x17d2a <LCDWIKI_GUI::write(unsigned char)+0x30>
   17d44:	26 2f       	mov	r18, r22
   17d46:	e8 84       	ldd	r14, Y+8	; 0x08
   17d48:	f9 84       	ldd	r15, Y+9	; 0x09
   17d4a:	0e 81       	ldd	r16, Y+6	; 0x06
   17d4c:	1f 81       	ldd	r17, Y+7	; 0x07
   17d4e:	4c 81       	ldd	r20, Y+4	; 0x04
   17d50:	5d 81       	ldd	r21, Y+5	; 0x05
   17d52:	6a 81       	ldd	r22, Y+2	; 0x02
   17d54:	7b 81       	ldd	r23, Y+3	; 0x03
   17d56:	ad 84       	ldd	r10, Y+13	; 0x0d
   17d58:	cc 84       	ldd	r12, Y+12	; 0x0c
   17d5a:	0e 94 93 bd 	call	0x17b26	; 0x17b26 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)>
   17d5e:	2c 85       	ldd	r18, Y+12	; 0x0c
   17d60:	8a 81       	ldd	r24, Y+2	; 0x02
   17d62:	9b 81       	ldd	r25, Y+3	; 0x03
   17d64:	36 e0       	ldi	r19, 0x06	; 6
   17d66:	23 9f       	mul	r18, r19
   17d68:	80 0d       	add	r24, r0
   17d6a:	91 1d       	adc	r25, r1
   17d6c:	11 24       	eor	r1, r1
   17d6e:	9b 83       	std	Y+3, r25	; 0x03
   17d70:	8a 83       	std	Y+2, r24	; 0x02
   17d72:	db cf       	rjmp	.-74     	; 0x17d2a <LCDWIKI_GUI::write(unsigned char)+0x30>

00017d74 <LCDWIKI_GUI::Get_Display_Width() const>:
_ZNK11LCDWIKI_GUI17Get_Display_WidthEv():
   17d74:	dc 01       	movw	r26, r24
   17d76:	ed 91       	ld	r30, X+
   17d78:	fc 91       	ld	r31, X
   17d7a:	06 84       	ldd	r0, Z+14	; 0x0e
   17d7c:	f7 85       	ldd	r31, Z+15	; 0x0f
   17d7e:	e0 2d       	mov	r30, r0
   17d80:	19 94       	eijmp

00017d82 <LCDWIKI_GUI::Print(unsigned char*, int, int)>:
_ZN11LCDWIKI_GUI5PrintEPhii():
   17d82:	af 92       	push	r10
   17d84:	bf 92       	push	r11
   17d86:	cf 92       	push	r12
   17d88:	df 92       	push	r13
   17d8a:	ef 92       	push	r14
   17d8c:	ff 92       	push	r15
   17d8e:	0f 93       	push	r16
   17d90:	1f 93       	push	r17
   17d92:	cf 93       	push	r28
   17d94:	df 93       	push	r29
   17d96:	ec 01       	movw	r28, r24
   17d98:	6b 01       	movw	r12, r22
   17d9a:	8a 01       	movw	r16, r20
   17d9c:	79 01       	movw	r14, r18
   17d9e:	ca 01       	movw	r24, r20
   17da0:	8e 50       	subi	r24, 0x0E	; 14
   17da2:	97 42       	sbci	r25, 0x27	; 39
   17da4:	02 97       	sbiw	r24, 0x02	; 2
   17da6:	00 f5       	brcc	.+64     	; 0x17de8 <LCDWIKI_GUI::Print(unsigned char*, int, int)+0x66>
   17da8:	fb 01       	movw	r30, r22
   17daa:	01 90       	ld	r0, Z+
   17dac:	00 20       	and	r0, r0
   17dae:	e9 f7       	brne	.-6      	; 0x17daa <LCDWIKI_GUI::Print(unsigned char*, int, int)+0x28>
   17db0:	31 97       	sbiw	r30, 0x01	; 1
   17db2:	e6 1b       	sub	r30, r22
   17db4:	f7 0b       	sbc	r31, r23
   17db6:	8c 85       	ldd	r24, Y+12	; 0x0c
   17db8:	26 e0       	ldi	r18, 0x06	; 6
   17dba:	82 9f       	mul	r24, r18
   17dbc:	c0 01       	movw	r24, r0
   17dbe:	11 24       	eor	r1, r1
   17dc0:	8e 9f       	mul	r24, r30
   17dc2:	50 01       	movw	r10, r0
   17dc4:	8f 9f       	mul	r24, r31
   17dc6:	b0 0c       	add	r11, r0
   17dc8:	9e 9f       	mul	r25, r30
   17dca:	b0 0c       	add	r11, r0
   17dcc:	11 24       	eor	r1, r1
   17dce:	ce 01       	movw	r24, r28
   17dd0:	0e 94 ba be 	call	0x17d74	; 0x17d74 <LCDWIKI_GUI::Get_Display_Width() const>
   17dd4:	8a 19       	sub	r24, r10
   17dd6:	9b 09       	sbc	r25, r11
   17dd8:	0e 30       	cpi	r16, 0x0E	; 14
   17dda:	17 42       	sbci	r17, 0x27	; 39
   17ddc:	19 f5       	brne	.+70     	; 0x17e24 <LCDWIKI_GUI::Print(unsigned char*, int, int)+0xa2>
   17dde:	97 fd       	sbrc	r25, 7
   17de0:	01 96       	adiw	r24, 0x01	; 1
   17de2:	8c 01       	movw	r16, r24
   17de4:	15 95       	asr	r17
   17de6:	07 95       	ror	r16
_ZN11LCDWIKI_GUI15Set_Text_CousurEii():
   17de8:	1b 83       	std	Y+3, r17	; 0x03
   17dea:	0a 83       	std	Y+2, r16	; 0x02
   17dec:	fd 82       	std	Y+5, r15	; 0x05
   17dee:	ec 82       	std	Y+4, r14	; 0x04
   17df0:	86 01       	movw	r16, r12
   17df2:	78 01       	movw	r14, r16
   17df4:	ec 18       	sub	r14, r12
   17df6:	fd 08       	sbc	r15, r13
_ZN11LCDWIKI_GUI5PrintEPhii():
   17df8:	f8 01       	movw	r30, r16
   17dfa:	61 91       	ld	r22, Z+
   17dfc:	8f 01       	movw	r16, r30
   17dfe:	66 23       	and	r22, r22
   17e00:	29 f0       	breq	.+10     	; 0x17e0c <LCDWIKI_GUI::Print(unsigned char*, int, int)+0x8a>
   17e02:	ce 01       	movw	r24, r28
   17e04:	0e 94 7d be 	call	0x17cfa	; 0x17cfa <LCDWIKI_GUI::write(unsigned char)>
   17e08:	89 2b       	or	r24, r25
   17e0a:	99 f7       	brne	.-26     	; 0x17df2 <LCDWIKI_GUI::Print(unsigned char*, int, int)+0x70>
   17e0c:	c7 01       	movw	r24, r14
   17e0e:	df 91       	pop	r29
   17e10:	cf 91       	pop	r28
   17e12:	1f 91       	pop	r17
   17e14:	0f 91       	pop	r16
   17e16:	ff 90       	pop	r15
   17e18:	ef 90       	pop	r14
   17e1a:	df 90       	pop	r13
   17e1c:	cf 90       	pop	r12
   17e1e:	bf 90       	pop	r11
   17e20:	af 90       	pop	r10
   17e22:	08 95       	ret
   17e24:	8c 01       	movw	r16, r24
   17e26:	01 50       	subi	r16, 0x01	; 1
   17e28:	11 09       	sbc	r17, r1
   17e2a:	de cf       	rjmp	.-68     	; 0x17de8 <LCDWIKI_GUI::Print(unsigned char*, int, int)+0x66>

00017e2c <LCDWIKI_GUI::Print_String(String, int, int)>:
_ZN11LCDWIKI_GUI12Print_StringE6Stringii():
   17e2c:	fb 01       	movw	r30, r22
   17e2e:	60 81       	ld	r22, Z
   17e30:	71 81       	ldd	r23, Z+1	; 0x01
   17e32:	0c 94 c1 be 	jmp	0x17d82	; 0x17d82 <LCDWIKI_GUI::Print(unsigned char*, int, int)>

00017e36 <LCDWIKI_GUI::Get_Display_Height() const>:
_ZNK11LCDWIKI_GUI18Get_Display_HeightEv():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:817
}

//get lcd height 
int16_t LCDWIKI_GUI::Get_Display_Height(void) const
{
	return Get_Height();
   17e36:	dc 01       	movw	r26, r24
   17e38:	ed 91       	ld	r30, X+
   17e3a:	fc 91       	ld	r31, X
   17e3c:	04 84       	ldd	r0, Z+12	; 0x0c
   17e3e:	f5 85       	ldd	r31, Z+13	; 0x0d
   17e40:	e0 2d       	mov	r30, r0
   17e42:	19 94       	eijmp

00017e44 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)>:
_ZN11LCDWIKI_KBV14Push_Any_ColorEPjibh():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:951
		{
			Write_Cmd_Data(cmd, d);                      //static function
        }
        size -= 2 * sizeof(int16_t);
    }
}
   17e44:	0f 93       	push	r16
   17e46:	cf 93       	push	r28
   17e48:	df 93       	push	r29
   17e4a:	dc 01       	movw	r26, r24
   17e4c:	01 70       	andi	r16, 0x01	; 1
   17e4e:	9e 96       	adiw	r26, 0x2e	; 46
   17e50:	ed 91       	ld	r30, X+
   17e52:	fc 91       	ld	r31, X
   17e54:	9f 97       	sbiw	r26, 0x2f	; 47
   17e56:	80 81       	ld	r24, Z
   17e58:	da 96       	adiw	r26, 0x3a	; 58
   17e5a:	9c 91       	ld	r25, X
   17e5c:	da 97       	sbiw	r26, 0x3a	; 58
   17e5e:	89 23       	and	r24, r25
   17e60:	80 83       	st	Z, r24
   17e62:	22 23       	and	r18, r18
   17e64:	09 f4       	brne	.+2      	; 0x17e68 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x24>
   17e66:	5b c0       	rjmp	.+182    	; 0x17f1e <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xda>
   17e68:	58 96       	adiw	r26, 0x18	; 24
   17e6a:	8d 91       	ld	r24, X+
   17e6c:	9c 91       	ld	r25, X
   17e6e:	59 97       	sbiw	r26, 0x19	; 25
   17e70:	89 2b       	or	r24, r25
   17e72:	49 f5       	brne	.+82     	; 0x17ec6 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x82>
   17e74:	d0 96       	adiw	r26, 0x30	; 48
   17e76:	ed 91       	ld	r30, X+
   17e78:	fc 91       	ld	r31, X
   17e7a:	d1 97       	sbiw	r26, 0x31	; 49
   17e7c:	80 81       	ld	r24, Z
   17e7e:	db 96       	adiw	r26, 0x3b	; 59
   17e80:	9c 91       	ld	r25, X
   17e82:	db 97       	sbiw	r26, 0x3b	; 59
   17e84:	89 23       	and	r24, r25
   17e86:	80 83       	st	Z, r24
   17e88:	12 b8       	out	0x02, r1	; 2
   17e8a:	d2 96       	adiw	r26, 0x32	; 50
   17e8c:	ed 91       	ld	r30, X+
   17e8e:	fc 91       	ld	r31, X
   17e90:	d3 97       	sbiw	r26, 0x33	; 51
   17e92:	80 81       	ld	r24, Z
   17e94:	dc 96       	adiw	r26, 0x3c	; 60
   17e96:	9c 91       	ld	r25, X
   17e98:	dc 97       	sbiw	r26, 0x3c	; 60
   17e9a:	89 23       	and	r24, r25
   17e9c:	80 83       	st	Z, r24
   17e9e:	d2 96       	adiw	r26, 0x32	; 50
   17ea0:	ed 91       	ld	r30, X+
   17ea2:	fc 91       	ld	r31, X
   17ea4:	d3 97       	sbiw	r26, 0x33	; 51
   17ea6:	80 81       	ld	r24, Z
   17ea8:	d8 96       	adiw	r26, 0x38	; 56
   17eaa:	9c 91       	ld	r25, X
   17eac:	d8 97       	sbiw	r26, 0x38	; 56
   17eae:	89 2b       	or	r24, r25
   17eb0:	80 83       	st	Z, r24
   17eb2:	d0 96       	adiw	r26, 0x30	; 48
   17eb4:	ed 91       	ld	r30, X+
   17eb6:	fc 91       	ld	r31, X
   17eb8:	d1 97       	sbiw	r26, 0x31	; 49
   17eba:	80 81       	ld	r24, Z
   17ebc:	d7 96       	adiw	r26, 0x37	; 55
   17ebe:	9c 91       	ld	r25, X
   17ec0:	d7 97       	sbiw	r26, 0x37	; 55
   17ec2:	89 2b       	or	r24, r25
   17ec4:	80 83       	st	Z, r24
   17ec6:	d0 96       	adiw	r26, 0x30	; 48
   17ec8:	ed 91       	ld	r30, X+
   17eca:	fc 91       	ld	r31, X
   17ecc:	d1 97       	sbiw	r26, 0x31	; 49
   17ece:	80 81       	ld	r24, Z
   17ed0:	db 96       	adiw	r26, 0x3b	; 59
   17ed2:	9c 91       	ld	r25, X
   17ed4:	db 97       	sbiw	r26, 0x3b	; 59
   17ed6:	89 23       	and	r24, r25
   17ed8:	80 83       	st	Z, r24
   17eda:	90 96       	adiw	r26, 0x20	; 32
   17edc:	8c 91       	ld	r24, X
   17ede:	90 97       	sbiw	r26, 0x20	; 32
   17ee0:	82 b9       	out	0x02, r24	; 2
   17ee2:	d2 96       	adiw	r26, 0x32	; 50
   17ee4:	ed 91       	ld	r30, X+
   17ee6:	fc 91       	ld	r31, X
   17ee8:	d3 97       	sbiw	r26, 0x33	; 51
   17eea:	80 81       	ld	r24, Z
   17eec:	dc 96       	adiw	r26, 0x3c	; 60
   17eee:	9c 91       	ld	r25, X
   17ef0:	dc 97       	sbiw	r26, 0x3c	; 60
   17ef2:	89 23       	and	r24, r25
   17ef4:	80 83       	st	Z, r24
   17ef6:	d2 96       	adiw	r26, 0x32	; 50
   17ef8:	ed 91       	ld	r30, X+
   17efa:	fc 91       	ld	r31, X
   17efc:	d3 97       	sbiw	r26, 0x33	; 51
   17efe:	80 81       	ld	r24, Z
   17f00:	d8 96       	adiw	r26, 0x38	; 56
   17f02:	9c 91       	ld	r25, X
   17f04:	d8 97       	sbiw	r26, 0x38	; 56
   17f06:	89 2b       	or	r24, r25
   17f08:	80 83       	st	Z, r24
   17f0a:	d0 96       	adiw	r26, 0x30	; 48
   17f0c:	ed 91       	ld	r30, X+
   17f0e:	fc 91       	ld	r31, X
   17f10:	d1 97       	sbiw	r26, 0x31	; 49
   17f12:	80 81       	ld	r24, Z
   17f14:	d7 96       	adiw	r26, 0x37	; 55
   17f16:	9c 91       	ld	r25, X
   17f18:	d7 97       	sbiw	r26, 0x37	; 55
   17f1a:	89 2b       	or	r24, r25
   17f1c:	80 83       	st	Z, r24
   17f1e:	eb 01       	movw	r28, r22
   17f20:	ca 01       	movw	r24, r20
   17f22:	18 16       	cp	r1, r24
   17f24:	19 06       	cpc	r1, r25
   17f26:	bc f5       	brge	.+110    	; 0x17f96 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x152>
   17f28:	00 23       	and	r16, r16
   17f2a:	91 f1       	breq	.+100    	; 0x17f90 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x14c>
   17f2c:	fe 01       	movw	r30, r28
   17f2e:	45 91       	lpm	r20, Z+
   17f30:	54 91       	lpm	r21, Z
   17f32:	34 2f       	mov	r19, r20
   17f34:	25 2f       	mov	r18, r21
   17f36:	22 b9       	out	0x02, r18	; 2
   17f38:	d2 96       	adiw	r26, 0x32	; 50
   17f3a:	ed 91       	ld	r30, X+
   17f3c:	fc 91       	ld	r31, X
   17f3e:	d3 97       	sbiw	r26, 0x33	; 51
   17f40:	20 81       	ld	r18, Z
   17f42:	dc 96       	adiw	r26, 0x3c	; 60
   17f44:	4c 91       	ld	r20, X
   17f46:	dc 97       	sbiw	r26, 0x3c	; 60
   17f48:	24 23       	and	r18, r20
   17f4a:	20 83       	st	Z, r18
   17f4c:	d2 96       	adiw	r26, 0x32	; 50
   17f4e:	ed 91       	ld	r30, X+
   17f50:	fc 91       	ld	r31, X
   17f52:	d3 97       	sbiw	r26, 0x33	; 51
   17f54:	20 81       	ld	r18, Z
   17f56:	d8 96       	adiw	r26, 0x38	; 56
   17f58:	4c 91       	ld	r20, X
   17f5a:	d8 97       	sbiw	r26, 0x38	; 56
   17f5c:	24 2b       	or	r18, r20
   17f5e:	20 83       	st	Z, r18
   17f60:	32 b9       	out	0x02, r19	; 2
   17f62:	d2 96       	adiw	r26, 0x32	; 50
   17f64:	ed 91       	ld	r30, X+
   17f66:	fc 91       	ld	r31, X
   17f68:	d3 97       	sbiw	r26, 0x33	; 51
   17f6a:	20 81       	ld	r18, Z
   17f6c:	dc 96       	adiw	r26, 0x3c	; 60
   17f6e:	3c 91       	ld	r19, X
   17f70:	dc 97       	sbiw	r26, 0x3c	; 60
   17f72:	23 23       	and	r18, r19
   17f74:	20 83       	st	Z, r18
   17f76:	d2 96       	adiw	r26, 0x32	; 50
   17f78:	ed 91       	ld	r30, X+
   17f7a:	fc 91       	ld	r31, X
   17f7c:	d3 97       	sbiw	r26, 0x33	; 51
   17f7e:	20 81       	ld	r18, Z
   17f80:	d8 96       	adiw	r26, 0x38	; 56
   17f82:	3c 91       	ld	r19, X
   17f84:	d8 97       	sbiw	r26, 0x38	; 56
   17f86:	23 2b       	or	r18, r19
   17f88:	20 83       	st	Z, r18
   17f8a:	22 96       	adiw	r28, 0x02	; 2
   17f8c:	01 97       	sbiw	r24, 0x01	; 1
   17f8e:	c9 cf       	rjmp	.-110    	; 0x17f22 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xde>
   17f90:	38 81       	ld	r19, Y
   17f92:	29 81       	ldd	r18, Y+1	; 0x01
   17f94:	d0 cf       	rjmp	.-96     	; 0x17f36 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xf2>
   17f96:	9e 96       	adiw	r26, 0x2e	; 46
   17f98:	ed 91       	ld	r30, X+
   17f9a:	fc 91       	ld	r31, X
   17f9c:	9f 97       	sbiw	r26, 0x2f	; 47
   17f9e:	80 81       	ld	r24, Z
   17fa0:	d6 96       	adiw	r26, 0x36	; 54
   17fa2:	9c 91       	ld	r25, X
   17fa4:	89 2b       	or	r24, r25
   17fa6:	80 83       	st	Z, r24
   17fa8:	df 91       	pop	r29
   17faa:	cf 91       	pop	r28
   17fac:	0f 91       	pop	r16
   17fae:	08 95       	ret

00017fb0 <LCDWIKI_KBV::Color_To_565(unsigned char, unsigned char, unsigned char)>:
_ZN11LCDWIKI_KBV12Color_To_565Ehhh():
   17fb0:	38 e0       	ldi	r19, 0x08	; 8
   17fb2:	43 9f       	mul	r20, r19
   17fb4:	c0 01       	movw	r24, r0
   17fb6:	11 24       	eor	r1, r1
   17fb8:	80 7e       	andi	r24, 0xE0	; 224
   17fba:	97 70       	andi	r25, 0x07	; 7
   17fbc:	26 95       	lsr	r18
   17fbe:	26 95       	lsr	r18
   17fc0:	26 95       	lsr	r18
   17fc2:	82 2b       	or	r24, r18
   17fc4:	70 e0       	ldi	r23, 0x00	; 0
   17fc6:	76 2f       	mov	r23, r22
   17fc8:	66 27       	eor	r22, r22
   17fca:	66 27       	eor	r22, r22
   17fcc:	78 7f       	andi	r23, 0xF8	; 248
   17fce:	86 2b       	or	r24, r22
   17fd0:	97 2b       	or	r25, r23
   17fd2:	08 95       	ret

00017fd4 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)>:
_ZN11LCDWIKI_KBV9Read_GRAMEiiPjii():
   17fd4:	7f 92       	push	r7
   17fd6:	8f 92       	push	r8
   17fd8:	9f 92       	push	r9
   17fda:	af 92       	push	r10
   17fdc:	bf 92       	push	r11
   17fde:	cf 92       	push	r12
   17fe0:	df 92       	push	r13
   17fe2:	ef 92       	push	r14
   17fe4:	ff 92       	push	r15
   17fe6:	0f 93       	push	r16
   17fe8:	1f 93       	push	r17
   17fea:	cf 93       	push	r28
   17fec:	df 93       	push	r29
   17fee:	ec 01       	movw	r28, r24
   17ff0:	59 01       	movw	r10, r18
   17ff2:	98 01       	movw	r18, r16
   17ff4:	0e 9d       	mul	r16, r14
   17ff6:	60 01       	movw	r12, r0
   17ff8:	0f 9d       	mul	r16, r15
   17ffa:	d0 0c       	add	r13, r0
   17ffc:	1e 9d       	mul	r17, r14
   17ffe:	d0 0c       	add	r13, r0
   18000:	11 24       	eor	r1, r1
   18002:	87 01       	movw	r16, r14
   18004:	04 0f       	add	r16, r20
   18006:	15 1f       	adc	r17, r21
   18008:	01 50       	subi	r16, 0x01	; 1
   1800a:	11 09       	sbc	r17, r1
   1800c:	26 0f       	add	r18, r22
   1800e:	37 1f       	adc	r19, r23
   18010:	21 50       	subi	r18, 0x01	; 1
   18012:	31 09       	sbc	r19, r1
   18014:	e8 81       	ld	r30, Y
   18016:	f9 81       	ldd	r31, Y+1	; 0x01
   18018:	06 80       	ldd	r0, Z+6	; 0x06
   1801a:	f7 81       	ldd	r31, Z+7	; 0x07
   1801c:	e0 2d       	mov	r30, r0
   1801e:	19 95       	eicall
   18020:	77 24       	eor	r7, r7
   18022:	7a 94       	dec	r7
   18024:	1c 14       	cp	r1, r12
   18026:	1d 04       	cpc	r1, r13
   18028:	0c f0       	brlt	.+2      	; 0x1802c <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x58>
   1802a:	0a c1       	rjmp	.+532    	; 0x18240 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x26c>
   1802c:	ee a5       	ldd	r30, Y+46	; 0x2e
   1802e:	ff a5       	ldd	r31, Y+47	; 0x2f
   18030:	80 81       	ld	r24, Z
   18032:	9a ad       	ldd	r25, Y+58	; 0x3a
   18034:	89 23       	and	r24, r25
   18036:	80 83       	st	Z, r24
   18038:	e8 a9       	ldd	r30, Y+48	; 0x30
   1803a:	f9 a9       	ldd	r31, Y+49	; 0x31
   1803c:	80 81       	ld	r24, Z
   1803e:	9b ad       	ldd	r25, Y+59	; 0x3b
   18040:	89 23       	and	r24, r25
   18042:	80 83       	st	Z, r24
   18044:	9a a1       	ldd	r25, Y+34	; 0x22
   18046:	8b a1       	ldd	r24, Y+35	; 0x23
   18048:	82 b9       	out	0x02, r24	; 2
   1804a:	ea a9       	ldd	r30, Y+50	; 0x32
   1804c:	fb a9       	ldd	r31, Y+51	; 0x33
   1804e:	80 81       	ld	r24, Z
   18050:	2c ad       	ldd	r18, Y+60	; 0x3c
   18052:	82 23       	and	r24, r18
   18054:	80 83       	st	Z, r24
   18056:	ea a9       	ldd	r30, Y+50	; 0x32
   18058:	fb a9       	ldd	r31, Y+51	; 0x33
   1805a:	80 81       	ld	r24, Z
   1805c:	28 ad       	ldd	r18, Y+56	; 0x38
   1805e:	82 2b       	or	r24, r18
   18060:	80 83       	st	Z, r24
   18062:	92 b9       	out	0x02, r25	; 2
   18064:	ea a9       	ldd	r30, Y+50	; 0x32
   18066:	fb a9       	ldd	r31, Y+51	; 0x33
   18068:	80 81       	ld	r24, Z
   1806a:	9c ad       	ldd	r25, Y+60	; 0x3c
   1806c:	89 23       	and	r24, r25
   1806e:	80 83       	st	Z, r24
   18070:	ea a9       	ldd	r30, Y+50	; 0x32
   18072:	fb a9       	ldd	r31, Y+51	; 0x33
   18074:	80 81       	ld	r24, Z
   18076:	98 ad       	ldd	r25, Y+56	; 0x38
   18078:	89 2b       	or	r24, r25
   1807a:	80 83       	st	Z, r24
   1807c:	e8 a9       	ldd	r30, Y+48	; 0x30
   1807e:	f9 a9       	ldd	r31, Y+49	; 0x31
   18080:	80 81       	ld	r24, Z
   18082:	9f a9       	ldd	r25, Y+55	; 0x37
   18084:	89 2b       	or	r24, r25
   18086:	80 83       	st	Z, r24
   18088:	81 b1       	in	r24, 0x01	; 1
   1808a:	11 b8       	out	0x01, r1	; 1
   1808c:	88 8d       	ldd	r24, Y+24	; 0x18
   1808e:	99 8d       	ldd	r25, Y+25	; 0x19
   18090:	89 2b       	or	r24, r25
   18092:	09 f0       	breq	.+2      	; 0x18096 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0xc2>
   18094:	67 c0       	rjmp	.+206    	; 0x18164 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x190>
   18096:	f5 01       	movw	r30, r10
   18098:	c6 01       	movw	r24, r12
   1809a:	42 e0       	ldi	r20, 0x02	; 2
   1809c:	50 e0       	ldi	r21, 0x00	; 0
   1809e:	ac a9       	ldd	r26, Y+52	; 0x34
   180a0:	bd a9       	ldd	r27, Y+53	; 0x35
   180a2:	2c 91       	ld	r18, X
   180a4:	3d ad       	ldd	r19, Y+61	; 0x3d
   180a6:	23 23       	and	r18, r19
   180a8:	2c 93       	st	X, r18
   180aa:	20 b1       	in	r18, 0x00	; 0
   180ac:	ac a9       	ldd	r26, Y+52	; 0x34
   180ae:	bd a9       	ldd	r27, Y+53	; 0x35
   180b0:	2c 91       	ld	r18, X
   180b2:	39 ad       	ldd	r19, Y+57	; 0x39
   180b4:	23 2b       	or	r18, r19
   180b6:	2c 93       	st	X, r18
   180b8:	ac a9       	ldd	r26, Y+52	; 0x34
   180ba:	bd a9       	ldd	r27, Y+53	; 0x35
   180bc:	2c 91       	ld	r18, X
   180be:	3d ad       	ldd	r19, Y+61	; 0x3d
   180c0:	23 23       	and	r18, r19
   180c2:	2c 93       	st	X, r18
   180c4:	20 b1       	in	r18, 0x00	; 0
   180c6:	ac a9       	ldd	r26, Y+52	; 0x34
   180c8:	bd a9       	ldd	r27, Y+53	; 0x35
   180ca:	2c 91       	ld	r18, X
   180cc:	39 ad       	ldd	r19, Y+57	; 0x39
   180ce:	23 2b       	or	r18, r19
   180d0:	2c 93       	st	X, r18
   180d2:	ac a9       	ldd	r26, Y+52	; 0x34
   180d4:	bd a9       	ldd	r27, Y+53	; 0x35
   180d6:	2c 91       	ld	r18, X
   180d8:	3d ad       	ldd	r19, Y+61	; 0x3d
   180da:	23 23       	and	r18, r19
   180dc:	2c 93       	st	X, r18
   180de:	20 b1       	in	r18, 0x00	; 0
   180e0:	ac a9       	ldd	r26, Y+52	; 0x34
   180e2:	bd a9       	ldd	r27, Y+53	; 0x35
   180e4:	3c 91       	ld	r19, X
   180e6:	69 ad       	ldd	r22, Y+57	; 0x39
   180e8:	36 2b       	or	r19, r22
   180ea:	3c 93       	st	X, r19
   180ec:	ac a9       	ldd	r26, Y+52	; 0x34
   180ee:	bd a9       	ldd	r27, Y+53	; 0x35
   180f0:	3c 91       	ld	r19, X
   180f2:	6d ad       	ldd	r22, Y+61	; 0x3d
   180f4:	36 23       	and	r19, r22
   180f6:	3c 93       	st	X, r19
   180f8:	60 b1       	in	r22, 0x00	; 0
   180fa:	ac a9       	ldd	r26, Y+52	; 0x34
   180fc:	bd a9       	ldd	r27, Y+53	; 0x35
   180fe:	3c 91       	ld	r19, X
   18100:	79 ad       	ldd	r23, Y+57	; 0x39
   18102:	37 2b       	or	r19, r23
   18104:	3c 93       	st	X, r19
   18106:	41 30       	cpi	r20, 0x01	; 1
   18108:	51 05       	cpc	r21, r1
   1810a:	49 f5       	brne	.+82     	; 0x1815e <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x18a>
   1810c:	32 2f       	mov	r19, r18
   1810e:	26 2f       	mov	r18, r22
   18110:	21 93       	st	Z+, r18
   18112:	31 93       	st	Z+, r19
   18114:	01 97       	sbiw	r24, 0x01	; 1
   18116:	09 f0       	breq	.+2      	; 0x1811a <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x146>
   18118:	c0 cf       	rjmp	.-128    	; 0x1809a <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0xc6>
   1811a:	cc 0c       	add	r12, r12
   1811c:	dd 1c       	adc	r13, r13
   1811e:	ac 0c       	add	r10, r12
   18120:	bd 1c       	adc	r11, r13
   18122:	0c 89       	ldd	r16, Y+20	; 0x14
   18124:	1d 89       	ldd	r17, Y+21	; 0x15
   18126:	01 50       	subi	r16, 0x01	; 1
   18128:	11 09       	sbc	r17, r1
   1812a:	2a 89       	ldd	r18, Y+18	; 0x12
   1812c:	3b 89       	ldd	r19, Y+19	; 0x13
   1812e:	21 50       	subi	r18, 0x01	; 1
   18130:	31 09       	sbc	r19, r1
   18132:	e8 81       	ld	r30, Y
   18134:	f9 81       	ldd	r31, Y+1	; 0x01
   18136:	06 80       	ldd	r0, Z+6	; 0x06
   18138:	f7 81       	ldd	r31, Z+7	; 0x07
   1813a:	e0 2d       	mov	r30, r0
   1813c:	50 e0       	ldi	r21, 0x00	; 0
   1813e:	40 e0       	ldi	r20, 0x00	; 0
   18140:	70 e0       	ldi	r23, 0x00	; 0
   18142:	60 e0       	ldi	r22, 0x00	; 0
   18144:	ce 01       	movw	r24, r28
   18146:	19 95       	eicall
   18148:	ee a5       	ldd	r30, Y+46	; 0x2e
   1814a:	ff a5       	ldd	r31, Y+47	; 0x2f
   1814c:	80 81       	ld	r24, Z
   1814e:	9e a9       	ldd	r25, Y+54	; 0x36
   18150:	89 2b       	or	r24, r25
   18152:	80 83       	st	Z, r24
   18154:	81 b1       	in	r24, 0x01	; 1
   18156:	71 b8       	out	0x01, r7	; 1
   18158:	d1 2c       	mov	r13, r1
   1815a:	c1 2c       	mov	r12, r1
   1815c:	63 cf       	rjmp	.-314    	; 0x18024 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x50>
   1815e:	41 e0       	ldi	r20, 0x01	; 1
   18160:	50 e0       	ldi	r21, 0x00	; 0
   18162:	9d cf       	rjmp	.-198    	; 0x1809e <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0xca>
   18164:	ec a9       	ldd	r30, Y+52	; 0x34
   18166:	fd a9       	ldd	r31, Y+53	; 0x35
   18168:	80 81       	ld	r24, Z
   1816a:	9d ad       	ldd	r25, Y+61	; 0x3d
   1816c:	89 23       	and	r24, r25
   1816e:	80 83       	st	Z, r24
   18170:	80 b1       	in	r24, 0x00	; 0
   18172:	ec a9       	ldd	r30, Y+52	; 0x34
   18174:	fd a9       	ldd	r31, Y+53	; 0x35
   18176:	80 81       	ld	r24, Z
   18178:	99 ad       	ldd	r25, Y+57	; 0x39
   1817a:	89 2b       	or	r24, r25
   1817c:	80 83       	st	Z, r24
   1817e:	75 01       	movw	r14, r10
   18180:	86 01       	movw	r16, r12
   18182:	8c a5       	ldd	r24, Y+44	; 0x2c
   18184:	9d a5       	ldd	r25, Y+45	; 0x2d
   18186:	81 30       	cpi	r24, 0x01	; 1
   18188:	91 05       	cpc	r25, r1
   1818a:	d9 f5       	brne	.+118    	; 0x18202 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x22e>
   1818c:	ec a9       	ldd	r30, Y+52	; 0x34
   1818e:	fd a9       	ldd	r31, Y+53	; 0x35
   18190:	80 81       	ld	r24, Z
   18192:	9d ad       	ldd	r25, Y+61	; 0x3d
   18194:	89 23       	and	r24, r25
   18196:	80 83       	st	Z, r24
   18198:	60 b1       	in	r22, 0x00	; 0
   1819a:	ec a9       	ldd	r30, Y+52	; 0x34
   1819c:	fd a9       	ldd	r31, Y+53	; 0x35
   1819e:	80 81       	ld	r24, Z
   181a0:	99 ad       	ldd	r25, Y+57	; 0x39
   181a2:	89 2b       	or	r24, r25
   181a4:	80 83       	st	Z, r24
   181a6:	ec a9       	ldd	r30, Y+52	; 0x34
   181a8:	fd a9       	ldd	r31, Y+53	; 0x35
   181aa:	80 81       	ld	r24, Z
   181ac:	9d ad       	ldd	r25, Y+61	; 0x3d
   181ae:	89 23       	and	r24, r25
   181b0:	80 83       	st	Z, r24
   181b2:	40 b1       	in	r20, 0x00	; 0
   181b4:	ec a9       	ldd	r30, Y+52	; 0x34
   181b6:	fd a9       	ldd	r31, Y+53	; 0x35
   181b8:	80 81       	ld	r24, Z
   181ba:	99 ad       	ldd	r25, Y+57	; 0x39
   181bc:	89 2b       	or	r24, r25
   181be:	80 83       	st	Z, r24
   181c0:	ec a9       	ldd	r30, Y+52	; 0x34
   181c2:	fd a9       	ldd	r31, Y+53	; 0x35
   181c4:	80 81       	ld	r24, Z
   181c6:	9d ad       	ldd	r25, Y+61	; 0x3d
   181c8:	89 23       	and	r24, r25
   181ca:	80 83       	st	Z, r24
   181cc:	20 b1       	in	r18, 0x00	; 0
   181ce:	ec a9       	ldd	r30, Y+52	; 0x34
   181d0:	fd a9       	ldd	r31, Y+53	; 0x35
   181d2:	80 81       	ld	r24, Z
   181d4:	99 ad       	ldd	r25, Y+57	; 0x39
   181d6:	89 2b       	or	r24, r25
   181d8:	80 83       	st	Z, r24
   181da:	e8 81       	ld	r30, Y
   181dc:	f9 81       	ldd	r31, Y+1	; 0x01
   181de:	01 90       	ld	r0, Z+
   181e0:	f0 81       	ld	r31, Z
   181e2:	e0 2d       	mov	r30, r0
   181e4:	ce 01       	movw	r24, r28
   181e6:	19 95       	eicall
   181e8:	4c 01       	movw	r8, r24
   181ea:	f7 01       	movw	r30, r14
   181ec:	81 92       	st	Z+, r8
   181ee:	91 92       	st	Z+, r9
   181f0:	7f 01       	movw	r14, r30
   181f2:	01 50       	subi	r16, 0x01	; 1
   181f4:	11 09       	sbc	r17, r1
   181f6:	29 f6       	brne	.-118    	; 0x18182 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x1ae>
   181f8:	cc 0c       	add	r12, r12
   181fa:	dd 1c       	adc	r13, r13
   181fc:	ac 0c       	add	r10, r12
   181fe:	bd 1c       	adc	r11, r13
   18200:	a3 cf       	rjmp	.-186    	; 0x18148 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x174>
   18202:	89 2b       	or	r24, r25
   18204:	91 f7       	brne	.-28     	; 0x181ea <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x216>
   18206:	ec a9       	ldd	r30, Y+52	; 0x34
   18208:	fd a9       	ldd	r31, Y+53	; 0x35
   1820a:	80 81       	ld	r24, Z
   1820c:	9d ad       	ldd	r25, Y+61	; 0x3d
   1820e:	89 23       	and	r24, r25
   18210:	80 83       	st	Z, r24
   18212:	80 b0       	in	r8, 0x00	; 0
   18214:	ec a9       	ldd	r30, Y+52	; 0x34
   18216:	fd a9       	ldd	r31, Y+53	; 0x35
   18218:	80 81       	ld	r24, Z
   1821a:	99 ad       	ldd	r25, Y+57	; 0x39
   1821c:	89 2b       	or	r24, r25
   1821e:	80 83       	st	Z, r24
   18220:	ec a9       	ldd	r30, Y+52	; 0x34
   18222:	fd a9       	ldd	r31, Y+53	; 0x35
   18224:	80 81       	ld	r24, Z
   18226:	9d ad       	ldd	r25, Y+61	; 0x3d
   18228:	89 23       	and	r24, r25
   1822a:	80 83       	st	Z, r24
   1822c:	90 b1       	in	r25, 0x00	; 0
   1822e:	ec a9       	ldd	r30, Y+52	; 0x34
   18230:	fd a9       	ldd	r31, Y+53	; 0x35
   18232:	80 81       	ld	r24, Z
   18234:	29 ad       	ldd	r18, Y+57	; 0x39
   18236:	82 2b       	or	r24, r18
   18238:	80 83       	st	Z, r24
   1823a:	98 2c       	mov	r9, r8
   1823c:	89 2e       	mov	r8, r25
   1823e:	d5 cf       	rjmp	.-86     	; 0x181ea <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x216>
   18240:	90 e0       	ldi	r25, 0x00	; 0
   18242:	80 e0       	ldi	r24, 0x00	; 0
   18244:	df 91       	pop	r29
   18246:	cf 91       	pop	r28
   18248:	1f 91       	pop	r17
   1824a:	0f 91       	pop	r16
   1824c:	ff 90       	pop	r15
   1824e:	ef 90       	pop	r14
   18250:	df 90       	pop	r13
   18252:	cf 90       	pop	r12
   18254:	bf 90       	pop	r11
   18256:	af 90       	pop	r10
   18258:	9f 90       	pop	r9
   1825a:	8f 90       	pop	r8
   1825c:	7f 90       	pop	r7
   1825e:	08 95       	ret

00018260 <LCDWIKI_KBV::Get_Width() const>:
_ZNK11LCDWIKI_KBV9Get_WidthEv():
   18260:	fc 01       	movw	r30, r24
   18262:	82 89       	ldd	r24, Z+18	; 0x12
   18264:	93 89       	ldd	r25, Z+19	; 0x13
   18266:	08 95       	ret

00018268 <LCDWIKI_KBV::Get_Height() const>:
_ZNK11LCDWIKI_KBV10Get_HeightEv():
   18268:	fc 01       	movw	r30, r24
   1826a:	84 89       	ldd	r24, Z+20	; 0x14
   1826c:	95 89       	ldd	r25, Z+21	; 0x15
   1826e:	08 95       	ret

00018270 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)>:
_ZN11LCDWIKI_KBV9Draw_PixeEiij():
   18270:	af 92       	push	r10
   18272:	bf 92       	push	r11
   18274:	cf 92       	push	r12
   18276:	df 92       	push	r13
   18278:	ef 92       	push	r14
   1827a:	ff 92       	push	r15
   1827c:	0f 93       	push	r16
   1827e:	1f 93       	push	r17
   18280:	cf 93       	push	r28
   18282:	df 93       	push	r29
   18284:	77 fd       	sbrc	r23, 7
   18286:	75 c0       	rjmp	.+234    	; 0x18372 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
   18288:	57 fd       	sbrc	r21, 7
   1828a:	73 c0       	rjmp	.+230    	; 0x18372 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
   1828c:	c3 2e       	mov	r12, r19
   1828e:	d2 2e       	mov	r13, r18
   18290:	5a 01       	movw	r10, r20
   18292:	7b 01       	movw	r14, r22
   18294:	ec 01       	movw	r28, r24
   18296:	e8 81       	ld	r30, Y
   18298:	f9 81       	ldd	r31, Y+1	; 0x01
   1829a:	06 84       	ldd	r0, Z+14	; 0x0e
   1829c:	f7 85       	ldd	r31, Z+15	; 0x0f
   1829e:	e0 2d       	mov	r30, r0
   182a0:	19 95       	eicall
   182a2:	8e 15       	cp	r24, r14
   182a4:	9f 05       	cpc	r25, r15
   182a6:	0c f4       	brge	.+2      	; 0x182aa <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x3a>
   182a8:	64 c0       	rjmp	.+200    	; 0x18372 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
   182aa:	e8 81       	ld	r30, Y
   182ac:	f9 81       	ldd	r31, Y+1	; 0x01
   182ae:	04 84       	ldd	r0, Z+12	; 0x0c
   182b0:	f5 85       	ldd	r31, Z+13	; 0x0d
   182b2:	e0 2d       	mov	r30, r0
   182b4:	ce 01       	movw	r24, r28
   182b6:	19 95       	eicall
   182b8:	8a 15       	cp	r24, r10
   182ba:	9b 05       	cpc	r25, r11
   182bc:	0c f4       	brge	.+2      	; 0x182c0 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x50>
   182be:	59 c0       	rjmp	.+178    	; 0x18372 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
   182c0:	e8 81       	ld	r30, Y
   182c2:	f9 81       	ldd	r31, Y+1	; 0x01
   182c4:	06 80       	ldd	r0, Z+6	; 0x06
   182c6:	f7 81       	ldd	r31, Z+7	; 0x07
   182c8:	e0 2d       	mov	r30, r0
   182ca:	85 01       	movw	r16, r10
   182cc:	97 01       	movw	r18, r14
   182ce:	a5 01       	movw	r20, r10
   182d0:	b7 01       	movw	r22, r14
   182d2:	ce 01       	movw	r24, r28
   182d4:	19 95       	eicall
   182d6:	ee a5       	ldd	r30, Y+46	; 0x2e
   182d8:	ff a5       	ldd	r31, Y+47	; 0x2f
   182da:	80 81       	ld	r24, Z
   182dc:	9a ad       	ldd	r25, Y+58	; 0x3a
   182de:	89 23       	and	r24, r25
   182e0:	80 83       	st	Z, r24
   182e2:	98 a1       	ldd	r25, Y+32	; 0x20
   182e4:	29 a1       	ldd	r18, Y+33	; 0x21
   182e6:	e8 a9       	ldd	r30, Y+48	; 0x30
   182e8:	f9 a9       	ldd	r31, Y+49	; 0x31
   182ea:	80 81       	ld	r24, Z
   182ec:	3b ad       	ldd	r19, Y+59	; 0x3b
   182ee:	83 23       	and	r24, r19
   182f0:	80 83       	st	Z, r24
   182f2:	22 b9       	out	0x02, r18	; 2
   182f4:	ea a9       	ldd	r30, Y+50	; 0x32
   182f6:	fb a9       	ldd	r31, Y+51	; 0x33
   182f8:	80 81       	ld	r24, Z
   182fa:	2c ad       	ldd	r18, Y+60	; 0x3c
   182fc:	82 23       	and	r24, r18
   182fe:	80 83       	st	Z, r24
   18300:	ea a9       	ldd	r30, Y+50	; 0x32
   18302:	fb a9       	ldd	r31, Y+51	; 0x33
   18304:	80 81       	ld	r24, Z
   18306:	28 ad       	ldd	r18, Y+56	; 0x38
   18308:	82 2b       	or	r24, r18
   1830a:	80 83       	st	Z, r24
   1830c:	92 b9       	out	0x02, r25	; 2
   1830e:	ea a9       	ldd	r30, Y+50	; 0x32
   18310:	fb a9       	ldd	r31, Y+51	; 0x33
   18312:	80 81       	ld	r24, Z
   18314:	9c ad       	ldd	r25, Y+60	; 0x3c
   18316:	89 23       	and	r24, r25
   18318:	80 83       	st	Z, r24
   1831a:	ea a9       	ldd	r30, Y+50	; 0x32
   1831c:	fb a9       	ldd	r31, Y+51	; 0x33
   1831e:	80 81       	ld	r24, Z
   18320:	98 ad       	ldd	r25, Y+56	; 0x38
   18322:	89 2b       	or	r24, r25
   18324:	80 83       	st	Z, r24
   18326:	e8 a9       	ldd	r30, Y+48	; 0x30
   18328:	f9 a9       	ldd	r31, Y+49	; 0x31
   1832a:	80 81       	ld	r24, Z
   1832c:	9f a9       	ldd	r25, Y+55	; 0x37
   1832e:	89 2b       	or	r24, r25
   18330:	80 83       	st	Z, r24
   18332:	c2 b8       	out	0x02, r12	; 2
   18334:	ea a9       	ldd	r30, Y+50	; 0x32
   18336:	fb a9       	ldd	r31, Y+51	; 0x33
   18338:	80 81       	ld	r24, Z
   1833a:	9c ad       	ldd	r25, Y+60	; 0x3c
   1833c:	89 23       	and	r24, r25
   1833e:	80 83       	st	Z, r24
   18340:	ea a9       	ldd	r30, Y+50	; 0x32
   18342:	fb a9       	ldd	r31, Y+51	; 0x33
   18344:	80 81       	ld	r24, Z
   18346:	98 ad       	ldd	r25, Y+56	; 0x38
   18348:	89 2b       	or	r24, r25
   1834a:	80 83       	st	Z, r24
   1834c:	d2 b8       	out	0x02, r13	; 2
   1834e:	ea a9       	ldd	r30, Y+50	; 0x32
   18350:	fb a9       	ldd	r31, Y+51	; 0x33
   18352:	80 81       	ld	r24, Z
   18354:	9c ad       	ldd	r25, Y+60	; 0x3c
   18356:	89 23       	and	r24, r25
   18358:	80 83       	st	Z, r24
   1835a:	ea a9       	ldd	r30, Y+50	; 0x32
   1835c:	fb a9       	ldd	r31, Y+51	; 0x33
   1835e:	80 81       	ld	r24, Z
   18360:	98 ad       	ldd	r25, Y+56	; 0x38
   18362:	89 2b       	or	r24, r25
   18364:	80 83       	st	Z, r24
   18366:	ee a5       	ldd	r30, Y+46	; 0x2e
   18368:	ff a5       	ldd	r31, Y+47	; 0x2f
   1836a:	80 81       	ld	r24, Z
   1836c:	9e a9       	ldd	r25, Y+54	; 0x36
   1836e:	89 2b       	or	r24, r25
   18370:	80 83       	st	Z, r24
   18372:	df 91       	pop	r29
   18374:	cf 91       	pop	r28
   18376:	1f 91       	pop	r17
   18378:	0f 91       	pop	r16
   1837a:	ff 90       	pop	r15
   1837c:	ef 90       	pop	r14
   1837e:	df 90       	pop	r13
   18380:	cf 90       	pop	r12
   18382:	bf 90       	pop	r11
   18384:	af 90       	pop	r10
   18386:	08 95       	ret

00018388 <LCDWIKI_KBV::LCDWIKI_KBV(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
_ZN11LCDWIKI_KBVC2Ejhhhhh():
   18388:	9f 92       	push	r9
   1838a:	af 92       	push	r10
   1838c:	bf 92       	push	r11
   1838e:	cf 92       	push	r12
   18390:	df 92       	push	r13
   18392:	ef 92       	push	r14
   18394:	ff 92       	push	r15
   18396:	0f 93       	push	r16
   18398:	1f 93       	push	r17
   1839a:	cf 93       	push	r28
   1839c:	df 93       	push	r29
   1839e:	ec 01       	movw	r28, r24
   183a0:	5b 01       	movw	r10, r22
   183a2:	14 2f       	mov	r17, r20
   183a4:	d2 2e       	mov	r13, r18
   183a6:	9e 2c       	mov	r9, r14
   183a8:	0e 94 96 bc 	call	0x1792c	; 0x1792c <LCDWIKI_GUI::LCDWIKI_GUI()>
   183ac:	89 e2       	ldi	r24, 0x29	; 41
   183ae:	99 e0       	ldi	r25, 0x09	; 9
   183b0:	99 83       	std	Y+1, r25	; 0x01
   183b2:	88 83       	st	Y, r24
   183b4:	ce ae       	std	Y+62, r12	; 0x3e
   183b6:	61 2f       	mov	r22, r17
   183b8:	70 e0       	ldi	r23, 0x00	; 0
   183ba:	fb 01       	movw	r30, r22
   183bc:	e5 53       	subi	r30, 0x35	; 53
   183be:	f1 47       	sbci	r31, 0x71	; 113
   183c0:	e4 91       	lpm	r30, Z
   183c2:	f0 e0       	ldi	r31, 0x00	; 0
   183c4:	ee 0f       	add	r30, r30
   183c6:	ff 1f       	adc	r31, r31
   183c8:	ef 5e       	subi	r30, 0xEF	; 239
   183ca:	f0 47       	sbci	r31, 0x70	; 112
   183cc:	a5 91       	lpm	r26, Z+
   183ce:	b4 91       	lpm	r27, Z
   183d0:	bf a7       	std	Y+47, r27	; 0x2f
   183d2:	ae a7       	std	Y+46, r26	; 0x2e
   183d4:	4d 2d       	mov	r20, r13
   183d6:	50 e0       	ldi	r21, 0x00	; 0
   183d8:	fa 01       	movw	r30, r20
   183da:	e5 53       	subi	r30, 0x35	; 53
   183dc:	f1 47       	sbci	r31, 0x71	; 113
   183de:	e4 91       	lpm	r30, Z
   183e0:	f0 e0       	ldi	r31, 0x00	; 0
   183e2:	ee 0f       	add	r30, r30
   183e4:	ff 1f       	adc	r31, r31
   183e6:	ef 5e       	subi	r30, 0xEF	; 239
   183e8:	f0 47       	sbci	r31, 0x70	; 112
   183ea:	85 91       	lpm	r24, Z+
   183ec:	94 91       	lpm	r25, Z
   183ee:	99 ab       	std	Y+49, r25	; 0x31
   183f0:	88 ab       	std	Y+48, r24	; 0x30
   183f2:	20 2f       	mov	r18, r16
   183f4:	30 e0       	ldi	r19, 0x00	; 0
   183f6:	f9 01       	movw	r30, r18
   183f8:	e5 53       	subi	r30, 0x35	; 53
   183fa:	f1 47       	sbci	r31, 0x71	; 113
   183fc:	e4 91       	lpm	r30, Z
   183fe:	f0 e0       	ldi	r31, 0x00	; 0
   18400:	ee 0f       	add	r30, r30
   18402:	ff 1f       	adc	r31, r31
   18404:	ef 5e       	subi	r30, 0xEF	; 239
   18406:	f0 47       	sbci	r31, 0x70	; 112
   18408:	85 91       	lpm	r24, Z+
   1840a:	94 91       	lpm	r25, Z
   1840c:	9b ab       	std	Y+51, r25	; 0x33
   1840e:	8a ab       	std	Y+50, r24	; 0x32
   18410:	8e 2d       	mov	r24, r14
   18412:	90 e0       	ldi	r25, 0x00	; 0
   18414:	fc 01       	movw	r30, r24
   18416:	e5 53       	subi	r30, 0x35	; 53
   18418:	f1 47       	sbci	r31, 0x71	; 113
   1841a:	e4 91       	lpm	r30, Z
   1841c:	f0 e0       	ldi	r31, 0x00	; 0
   1841e:	ee 0f       	add	r30, r30
   18420:	ff 1f       	adc	r31, r31
   18422:	ef 5e       	subi	r30, 0xEF	; 239
   18424:	f0 47       	sbci	r31, 0x70	; 112
   18426:	e5 90       	lpm	r14, Z+
   18428:	f4 90       	lpm	r15, Z
   1842a:	fd aa       	std	Y+53, r15	; 0x35
   1842c:	ec aa       	std	Y+52, r14	; 0x34
   1842e:	6b 56       	subi	r22, 0x6B	; 107
   18430:	71 47       	sbci	r23, 0x71	; 113
   18432:	fb 01       	movw	r30, r22
   18434:	64 91       	lpm	r22, Z
   18436:	6e ab       	std	Y+54, r22	; 0x36
   18438:	4b 56       	subi	r20, 0x6B	; 107
   1843a:	51 47       	sbci	r21, 0x71	; 113
   1843c:	fa 01       	movw	r30, r20
   1843e:	44 91       	lpm	r20, Z
   18440:	4f ab       	std	Y+55, r20	; 0x37
   18442:	2b 56       	subi	r18, 0x6B	; 107
   18444:	31 47       	sbci	r19, 0x71	; 113
   18446:	f9 01       	movw	r30, r18
   18448:	24 91       	lpm	r18, Z
   1844a:	28 af       	std	Y+56, r18	; 0x38
   1844c:	8b 56       	subi	r24, 0x6B	; 107
   1844e:	91 47       	sbci	r25, 0x71	; 113
   18450:	fc 01       	movw	r30, r24
   18452:	84 91       	lpm	r24, Z
   18454:	89 af       	std	Y+57, r24	; 0x39
   18456:	96 2f       	mov	r25, r22
   18458:	90 95       	com	r25
   1845a:	9a af       	std	Y+58, r25	; 0x3a
   1845c:	e4 2f       	mov	r30, r20
   1845e:	e0 95       	com	r30
   18460:	eb af       	std	Y+59, r30	; 0x3b
   18462:	20 95       	com	r18
   18464:	2c af       	std	Y+60, r18	; 0x3c
   18466:	80 95       	com	r24
   18468:	8d af       	std	Y+61, r24	; 0x3d
   1846a:	ec 91       	ld	r30, X
   1846c:	6e 2b       	or	r22, r30
   1846e:	6c 93       	st	X, r22
   18470:	e8 a9       	ldd	r30, Y+48	; 0x30
   18472:	f9 a9       	ldd	r31, Y+49	; 0x31
   18474:	80 81       	ld	r24, Z
   18476:	9f a9       	ldd	r25, Y+55	; 0x37
   18478:	89 2b       	or	r24, r25
   1847a:	80 83       	st	Z, r24
   1847c:	ea a9       	ldd	r30, Y+50	; 0x32
   1847e:	fb a9       	ldd	r31, Y+51	; 0x33
   18480:	80 81       	ld	r24, Z
   18482:	98 ad       	ldd	r25, Y+56	; 0x38
   18484:	89 2b       	or	r24, r25
   18486:	80 83       	st	Z, r24
   18488:	ec a9       	ldd	r30, Y+52	; 0x34
   1848a:	fd a9       	ldd	r31, Y+53	; 0x35
   1848c:	80 81       	ld	r24, Z
   1848e:	99 ad       	ldd	r25, Y+57	; 0x39
   18490:	89 2b       	or	r24, r25
   18492:	80 83       	st	Z, r24
   18494:	61 e0       	ldi	r22, 0x01	; 1
   18496:	81 2f       	mov	r24, r17
   18498:	0f 94 24 10 	call	0x22048	; 0x22048 <pinMode>
   1849c:	61 e0       	ldi	r22, 0x01	; 1
   1849e:	8d 2d       	mov	r24, r13
   184a0:	0f 94 24 10 	call	0x22048	; 0x22048 <pinMode>
   184a4:	61 e0       	ldi	r22, 0x01	; 1
   184a6:	80 2f       	mov	r24, r16
   184a8:	0f 94 24 10 	call	0x22048	; 0x22048 <pinMode>
   184ac:	61 e0       	ldi	r22, 0x01	; 1
   184ae:	89 2d       	mov	r24, r9
   184b0:	0f 94 24 10 	call	0x22048	; 0x22048 <pinMode>
   184b4:	cc 20       	and	r12, r12
   184b6:	41 f0       	breq	.+16     	; 0x184c8 <LCDWIKI_KBV::LCDWIKI_KBV(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x140>
   184b8:	61 e0       	ldi	r22, 0x01	; 1
   184ba:	8c 2d       	mov	r24, r12
   184bc:	0f 94 60 10 	call	0x220c0	; 0x220c0 <digitalWrite>
   184c0:	61 e0       	ldi	r22, 0x01	; 1
   184c2:	8c 2d       	mov	r24, r12
   184c4:	0f 94 24 10 	call	0x22048	; 0x22048 <pinMode>
   184c8:	1f 8a       	std	Y+23, r1	; 0x17
   184ca:	1e 8a       	std	Y+22, r1	; 0x16
   184cc:	86 e0       	ldi	r24, 0x06	; 6
   184ce:	8a 9d       	mul	r24, r10
   184d0:	f0 01       	movw	r30, r0
   184d2:	8b 9d       	mul	r24, r11
   184d4:	f0 0d       	add	r31, r0
   184d6:	11 24       	eor	r1, r1
   184d8:	e4 5c       	subi	r30, 0xC4	; 196
   184da:	fd 4f       	sbci	r31, 0xFD	; 253
   184dc:	80 81       	ld	r24, Z
   184de:	91 81       	ldd	r25, Z+1	; 0x01
   184e0:	9b 8f       	std	Y+27, r25	; 0x1b
   184e2:	8a 8f       	std	Y+26, r24	; 0x1a
   184e4:	82 81       	ldd	r24, Z+2	; 0x02
   184e6:	93 81       	ldd	r25, Z+3	; 0x03
   184e8:	9f 87       	std	Y+15, r25	; 0x0f
   184ea:	8e 87       	std	Y+14, r24	; 0x0e
   184ec:	84 81       	ldd	r24, Z+4	; 0x04
   184ee:	95 81       	ldd	r25, Z+5	; 0x05
   184f0:	99 8b       	std	Y+17, r25	; 0x11
   184f2:	88 8b       	std	Y+16, r24	; 0x10
   184f4:	81 b1       	in	r24, 0x01	; 1
   184f6:	8f ef       	ldi	r24, 0xFF	; 255
   184f8:	81 b9       	out	0x01, r24	; 1
   184fa:	8e 85       	ldd	r24, Y+14	; 0x0e
   184fc:	9f 85       	ldd	r25, Y+15	; 0x0f
   184fe:	9b 8b       	std	Y+19, r25	; 0x13
   18500:	8a 8b       	std	Y+18, r24	; 0x12
   18502:	88 89       	ldd	r24, Y+16	; 0x10
   18504:	99 89       	ldd	r25, Y+17	; 0x11
   18506:	9d 8b       	std	Y+21, r25	; 0x15
   18508:	8c 8b       	std	Y+20, r24	; 0x14
   1850a:	df 91       	pop	r29
   1850c:	cf 91       	pop	r28
   1850e:	1f 91       	pop	r17
   18510:	0f 91       	pop	r16
   18512:	ff 90       	pop	r15
   18514:	ef 90       	pop	r14
   18516:	df 90       	pop	r13
   18518:	cf 90       	pop	r12
   1851a:	bf 90       	pop	r11
   1851c:	af 90       	pop	r10
   1851e:	9f 90       	pop	r9
   18520:	08 95       	ret

00018522 <LCDWIKI_KBV::reset()>:
_ZN11LCDWIKI_KBV5resetEv():
   18522:	cf 93       	push	r28
   18524:	df 93       	push	r29
   18526:	ec 01       	movw	r28, r24
   18528:	ee a5       	ldd	r30, Y+46	; 0x2e
   1852a:	ff a5       	ldd	r31, Y+47	; 0x2f
   1852c:	80 81       	ld	r24, Z
   1852e:	9e a9       	ldd	r25, Y+54	; 0x36
   18530:	89 2b       	or	r24, r25
   18532:	80 83       	st	Z, r24
   18534:	ec a9       	ldd	r30, Y+52	; 0x34
   18536:	fd a9       	ldd	r31, Y+53	; 0x35
   18538:	80 81       	ld	r24, Z
   1853a:	99 ad       	ldd	r25, Y+57	; 0x39
   1853c:	89 2b       	or	r24, r25
   1853e:	80 83       	st	Z, r24
   18540:	ea a9       	ldd	r30, Y+50	; 0x32
   18542:	fb a9       	ldd	r31, Y+51	; 0x33
   18544:	80 81       	ld	r24, Z
   18546:	98 ad       	ldd	r25, Y+56	; 0x38
   18548:	89 2b       	or	r24, r25
   1854a:	80 83       	st	Z, r24
   1854c:	8e ad       	ldd	r24, Y+62	; 0x3e
   1854e:	88 23       	and	r24, r24
   18550:	69 f0       	breq	.+26     	; 0x1856c <LCDWIKI_KBV::reset()+0x4a>
   18552:	60 e0       	ldi	r22, 0x00	; 0
   18554:	0f 94 60 10 	call	0x220c0	; 0x220c0 <digitalWrite>
   18558:	62 e0       	ldi	r22, 0x02	; 2
   1855a:	70 e0       	ldi	r23, 0x00	; 0
   1855c:	80 e0       	ldi	r24, 0x00	; 0
   1855e:	90 e0       	ldi	r25, 0x00	; 0
   18560:	0f 94 33 0f 	call	0x21e66	; 0x21e66 <delay>
   18564:	61 e0       	ldi	r22, 0x01	; 1
   18566:	8e ad       	ldd	r24, Y+62	; 0x3e
   18568:	0f 94 60 10 	call	0x220c0	; 0x220c0 <digitalWrite>
   1856c:	ee a5       	ldd	r30, Y+46	; 0x2e
   1856e:	ff a5       	ldd	r31, Y+47	; 0x2f
   18570:	80 81       	ld	r24, Z
   18572:	9a ad       	ldd	r25, Y+58	; 0x3a
   18574:	89 23       	and	r24, r25
   18576:	80 83       	st	Z, r24
   18578:	e8 a9       	ldd	r30, Y+48	; 0x30
   1857a:	f9 a9       	ldd	r31, Y+49	; 0x31
   1857c:	80 81       	ld	r24, Z
   1857e:	9b ad       	ldd	r25, Y+59	; 0x3b
   18580:	89 23       	and	r24, r25
   18582:	80 83       	st	Z, r24
   18584:	12 b8       	out	0x02, r1	; 2
   18586:	ea a9       	ldd	r30, Y+50	; 0x32
   18588:	fb a9       	ldd	r31, Y+51	; 0x33
   1858a:	80 81       	ld	r24, Z
   1858c:	9c ad       	ldd	r25, Y+60	; 0x3c
   1858e:	89 23       	and	r24, r25
   18590:	80 83       	st	Z, r24
   18592:	ea a9       	ldd	r30, Y+50	; 0x32
   18594:	fb a9       	ldd	r31, Y+51	; 0x33
   18596:	80 81       	ld	r24, Z
   18598:	98 ad       	ldd	r25, Y+56	; 0x38
   1859a:	89 2b       	or	r24, r25
   1859c:	80 83       	st	Z, r24
   1859e:	83 e0       	ldi	r24, 0x03	; 3
   185a0:	ea a9       	ldd	r30, Y+50	; 0x32
   185a2:	fb a9       	ldd	r31, Y+51	; 0x33
   185a4:	90 81       	ld	r25, Z
   185a6:	2c ad       	ldd	r18, Y+60	; 0x3c
   185a8:	92 23       	and	r25, r18
   185aa:	90 83       	st	Z, r25
   185ac:	ea a9       	ldd	r30, Y+50	; 0x32
   185ae:	fb a9       	ldd	r31, Y+51	; 0x33
   185b0:	90 81       	ld	r25, Z
   185b2:	28 ad       	ldd	r18, Y+56	; 0x38
   185b4:	92 2b       	or	r25, r18
   185b6:	90 83       	st	Z, r25
   185b8:	81 50       	subi	r24, 0x01	; 1
   185ba:	91 f7       	brne	.-28     	; 0x185a0 <LCDWIKI_KBV::reset()+0x7e>
   185bc:	ee a5       	ldd	r30, Y+46	; 0x2e
   185be:	ff a5       	ldd	r31, Y+47	; 0x2f
   185c0:	80 81       	ld	r24, Z
   185c2:	9e a9       	ldd	r25, Y+54	; 0x36
   185c4:	89 2b       	or	r24, r25
   185c6:	80 83       	st	Z, r24
   185c8:	df 91       	pop	r29
   185ca:	cf 91       	pop	r28
   185cc:	08 95       	ret

000185ce <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>:
_ZN11LCDWIKI_KBV12Push_CommandEjPha():
   185ce:	cf 93       	push	r28
   185d0:	df 93       	push	r29
   185d2:	fc 01       	movw	r30, r24
   185d4:	a6 a5       	ldd	r26, Z+46	; 0x2e
   185d6:	b7 a5       	ldd	r27, Z+47	; 0x2f
   185d8:	8c 91       	ld	r24, X
   185da:	92 ad       	ldd	r25, Z+58	; 0x3a
   185dc:	89 23       	and	r24, r25
   185de:	8c 93       	st	X, r24
   185e0:	a0 a9       	ldd	r26, Z+48	; 0x30
   185e2:	b1 a9       	ldd	r27, Z+49	; 0x31
   185e4:	8c 91       	ld	r24, X
   185e6:	93 ad       	ldd	r25, Z+59	; 0x3b
   185e8:	89 23       	and	r24, r25
   185ea:	8c 93       	st	X, r24
   185ec:	72 b9       	out	0x02, r23	; 2
   185ee:	a2 a9       	ldd	r26, Z+50	; 0x32
   185f0:	b3 a9       	ldd	r27, Z+51	; 0x33
   185f2:	8c 91       	ld	r24, X
   185f4:	94 ad       	ldd	r25, Z+60	; 0x3c
   185f6:	89 23       	and	r24, r25
   185f8:	8c 93       	st	X, r24
   185fa:	a2 a9       	ldd	r26, Z+50	; 0x32
   185fc:	b3 a9       	ldd	r27, Z+51	; 0x33
   185fe:	8c 91       	ld	r24, X
   18600:	90 ad       	ldd	r25, Z+56	; 0x38
   18602:	89 2b       	or	r24, r25
   18604:	8c 93       	st	X, r24
   18606:	62 b9       	out	0x02, r22	; 2
   18608:	a2 a9       	ldd	r26, Z+50	; 0x32
   1860a:	b3 a9       	ldd	r27, Z+51	; 0x33
   1860c:	8c 91       	ld	r24, X
   1860e:	94 ad       	ldd	r25, Z+60	; 0x3c
   18610:	89 23       	and	r24, r25
   18612:	8c 93       	st	X, r24
   18614:	a2 a9       	ldd	r26, Z+50	; 0x32
   18616:	b3 a9       	ldd	r27, Z+51	; 0x33
   18618:	8c 91       	ld	r24, X
   1861a:	90 ad       	ldd	r25, Z+56	; 0x38
   1861c:	89 2b       	or	r24, r25
   1861e:	8c 93       	st	X, r24
   18620:	a0 a9       	ldd	r26, Z+48	; 0x30
   18622:	b1 a9       	ldd	r27, Z+49	; 0x31
   18624:	8c 91       	ld	r24, X
   18626:	97 a9       	ldd	r25, Z+55	; 0x37
   18628:	89 2b       	or	r24, r25
   1862a:	8c 93       	st	X, r24
   1862c:	da 01       	movw	r26, r20
   1862e:	9f ef       	ldi	r25, 0xFF	; 255
   18630:	92 0f       	add	r25, r18
   18632:	12 16       	cp	r1, r18
   18634:	0c f0       	brlt	.+2      	; 0x18638 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0x6a>
   18636:	3f c0       	rjmp	.+126    	; 0x186b6 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0xe8>
   18638:	8d 91       	ld	r24, X+
   1863a:	82 b9       	out	0x02, r24	; 2
   1863c:	c2 a9       	ldd	r28, Z+50	; 0x32
   1863e:	d3 a9       	ldd	r29, Z+51	; 0x33
   18640:	88 81       	ld	r24, Y
   18642:	24 ad       	ldd	r18, Z+60	; 0x3c
   18644:	82 23       	and	r24, r18
   18646:	88 83       	st	Y, r24
   18648:	c2 a9       	ldd	r28, Z+50	; 0x32
   1864a:	d3 a9       	ldd	r29, Z+51	; 0x33
   1864c:	88 81       	ld	r24, Y
   1864e:	20 ad       	ldd	r18, Z+56	; 0x38
   18650:	82 2b       	or	r24, r18
   18652:	88 83       	st	Y, r24
   18654:	99 23       	and	r25, r25
   18656:	69 f1       	breq	.+90     	; 0x186b2 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0xe4>
   18658:	20 8d       	ldd	r18, Z+24	; 0x18
   1865a:	31 8d       	ldd	r19, Z+25	; 0x19
   1865c:	21 30       	cpi	r18, 0x01	; 1
   1865e:	31 05       	cpc	r19, r1
   18660:	41 f5       	brne	.+80     	; 0x186b2 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0xe4>
   18662:	6f 5f       	subi	r22, 0xFF	; 255
   18664:	7f 4f       	sbci	r23, 0xFF	; 255
   18666:	c0 a9       	ldd	r28, Z+48	; 0x30
   18668:	d1 a9       	ldd	r29, Z+49	; 0x31
   1866a:	88 81       	ld	r24, Y
   1866c:	23 ad       	ldd	r18, Z+59	; 0x3b
   1866e:	82 23       	and	r24, r18
   18670:	88 83       	st	Y, r24
   18672:	72 b9       	out	0x02, r23	; 2
   18674:	c2 a9       	ldd	r28, Z+50	; 0x32
   18676:	d3 a9       	ldd	r29, Z+51	; 0x33
   18678:	88 81       	ld	r24, Y
   1867a:	24 ad       	ldd	r18, Z+60	; 0x3c
   1867c:	82 23       	and	r24, r18
   1867e:	88 83       	st	Y, r24
   18680:	c2 a9       	ldd	r28, Z+50	; 0x32
   18682:	d3 a9       	ldd	r29, Z+51	; 0x33
   18684:	88 81       	ld	r24, Y
   18686:	20 ad       	ldd	r18, Z+56	; 0x38
   18688:	82 2b       	or	r24, r18
   1868a:	88 83       	st	Y, r24
   1868c:	62 b9       	out	0x02, r22	; 2
   1868e:	c2 a9       	ldd	r28, Z+50	; 0x32
   18690:	d3 a9       	ldd	r29, Z+51	; 0x33
   18692:	88 81       	ld	r24, Y
   18694:	24 ad       	ldd	r18, Z+60	; 0x3c
   18696:	82 23       	and	r24, r18
   18698:	88 83       	st	Y, r24
   1869a:	c2 a9       	ldd	r28, Z+50	; 0x32
   1869c:	d3 a9       	ldd	r29, Z+51	; 0x33
   1869e:	88 81       	ld	r24, Y
   186a0:	20 ad       	ldd	r18, Z+56	; 0x38
   186a2:	82 2b       	or	r24, r18
   186a4:	88 83       	st	Y, r24
   186a6:	c0 a9       	ldd	r28, Z+48	; 0x30
   186a8:	d1 a9       	ldd	r29, Z+49	; 0x31
   186aa:	88 81       	ld	r24, Y
   186ac:	27 a9       	ldd	r18, Z+55	; 0x37
   186ae:	82 2b       	or	r24, r18
   186b0:	88 83       	st	Y, r24
   186b2:	29 2f       	mov	r18, r25
   186b4:	bc cf       	rjmp	.-136    	; 0x1862e <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0x60>
   186b6:	a6 a5       	ldd	r26, Z+46	; 0x2e
   186b8:	b7 a5       	ldd	r27, Z+47	; 0x2f
   186ba:	8c 91       	ld	r24, X
   186bc:	96 a9       	ldd	r25, Z+54	; 0x36
   186be:	89 2b       	or	r24, r25
   186c0:	8c 93       	st	X, r24
   186c2:	df 91       	pop	r29
   186c4:	cf 91       	pop	r28
   186c6:	08 95       	ret

000186c8 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)>:
_ZN11LCDWIKI_KBV15Set_Addr_WindowEiiii():
   186c8:	af 92       	push	r10
   186ca:	bf 92       	push	r11
   186cc:	cf 92       	push	r12
   186ce:	df 92       	push	r13
   186d0:	ef 92       	push	r14
   186d2:	ff 92       	push	r15
   186d4:	0f 93       	push	r16
   186d6:	1f 93       	push	r17
   186d8:	cf 93       	push	r28
   186da:	df 93       	push	r29
   186dc:	00 d0       	rcall	.+0      	; 0x186de <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x16>
   186de:	00 d0       	rcall	.+0      	; 0x186e0 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x18>
   186e0:	1f 92       	push	r1
   186e2:	1f 92       	push	r1
   186e4:	cd b7       	in	r28, 0x3d	; 61
   186e6:	de b7       	in	r29, 0x3e	; 62
   186e8:	7c 01       	movw	r14, r24
   186ea:	dc 01       	movw	r26, r24
   186ec:	9e 96       	adiw	r26, 0x2e	; 46
   186ee:	ed 91       	ld	r30, X+
   186f0:	fc 91       	ld	r31, X
   186f2:	9f 97       	sbiw	r26, 0x2f	; 47
   186f4:	80 81       	ld	r24, Z
   186f6:	da 96       	adiw	r26, 0x3a	; 58
   186f8:	9c 91       	ld	r25, X
   186fa:	da 97       	sbiw	r26, 0x3a	; 58
   186fc:	89 23       	and	r24, r25
   186fe:	80 83       	st	Z, r24
   18700:	58 96       	adiw	r26, 0x18	; 24
   18702:	8d 91       	ld	r24, X+
   18704:	9c 91       	ld	r25, X
   18706:	59 97       	sbiw	r26, 0x19	; 25
   18708:	00 97       	sbiw	r24, 0x00	; 0
   1870a:	09 f0       	breq	.+2      	; 0x1870e <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x46>
   1870c:	44 c3       	rjmp	.+1672   	; 0x18d96 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6ce>
   1870e:	56 96       	adiw	r26, 0x16	; 22
   18710:	8d 91       	ld	r24, X+
   18712:	9c 91       	ld	r25, X
   18714:	57 97       	sbiw	r26, 0x17	; 23
   18716:	82 30       	cpi	r24, 0x02	; 2
   18718:	91 05       	cpc	r25, r1
   1871a:	09 f4       	brne	.+2      	; 0x1871e <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x56>
   1871c:	0b c3       	rjmp	.+1558   	; 0x18d34 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x66c>
   1871e:	83 30       	cpi	r24, 0x03	; 3
   18720:	91 05       	cpc	r25, r1
   18722:	09 f4       	brne	.+2      	; 0x18726 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x5e>
   18724:	23 c3       	rjmp	.+1606   	; 0x18d6c <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6a4>
   18726:	01 97       	sbiw	r24, 0x01	; 1
   18728:	09 f0       	breq	.+2      	; 0x1872c <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x64>
   1872a:	32 c3       	rjmp	.+1636   	; 0x18d90 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6c8>
   1872c:	1e 96       	adiw	r26, 0x0e	; 14
   1872e:	0d 90       	ld	r0, X+
   18730:	bc 91       	ld	r27, X
   18732:	a0 2d       	mov	r26, r0
   18734:	68 01       	movw	r12, r16
   18736:	c0 94       	com	r12
   18738:	d0 94       	com	r13
   1873a:	40 95       	com	r20
   1873c:	50 95       	com	r21
   1873e:	fa 01       	movw	r30, r20
   18740:	ea 0f       	add	r30, r26
   18742:	fb 1f       	adc	r31, r27
   18744:	cb 01       	movw	r24, r22
   18746:	89 01       	movw	r16, r18
   18748:	9f 01       	movw	r18, r30
   1874a:	ab 01       	movw	r20, r22
   1874c:	b6 01       	movw	r22, r12
   1874e:	6a 0f       	add	r22, r26
   18750:	7b 1f       	adc	r23, r27
   18752:	d7 01       	movw	r26, r14
   18754:	d0 96       	adiw	r26, 0x30	; 48
   18756:	cd 90       	ld	r12, X+
   18758:	dc 90       	ld	r13, X
   1875a:	d6 01       	movw	r26, r12
   1875c:	bc 90       	ld	r11, X
   1875e:	d7 01       	movw	r26, r14
   18760:	db 96       	adiw	r26, 0x3b	; 59
   18762:	ac 90       	ld	r10, X
   18764:	ba 20       	and	r11, r10
   18766:	d6 01       	movw	r26, r12
   18768:	bc 92       	st	X, r11
   1876a:	12 b8       	out	0x02, r1	; 2
   1876c:	d7 01       	movw	r26, r14
   1876e:	d2 96       	adiw	r26, 0x32	; 50
   18770:	cd 90       	ld	r12, X+
   18772:	dc 90       	ld	r13, X
   18774:	d6 01       	movw	r26, r12
   18776:	bc 90       	ld	r11, X
   18778:	d7 01       	movw	r26, r14
   1877a:	dc 96       	adiw	r26, 0x3c	; 60
   1877c:	ac 90       	ld	r10, X
   1877e:	ba 20       	and	r11, r10
   18780:	d6 01       	movw	r26, r12
   18782:	bc 92       	st	X, r11
   18784:	d7 01       	movw	r26, r14
   18786:	d2 96       	adiw	r26, 0x32	; 50
   18788:	cd 90       	ld	r12, X+
   1878a:	dc 90       	ld	r13, X
   1878c:	d6 01       	movw	r26, r12
   1878e:	bc 90       	ld	r11, X
   18790:	d7 01       	movw	r26, r14
   18792:	d8 96       	adiw	r26, 0x38	; 56
   18794:	ac 90       	ld	r10, X
   18796:	ba 28       	or	r11, r10
   18798:	d6 01       	movw	r26, r12
   1879a:	bc 92       	st	X, r11
   1879c:	a0 e5       	ldi	r26, 0x50	; 80
   1879e:	a2 b9       	out	0x02, r26	; 2
   187a0:	d7 01       	movw	r26, r14
   187a2:	d2 96       	adiw	r26, 0x32	; 50
   187a4:	cd 90       	ld	r12, X+
   187a6:	dc 90       	ld	r13, X
   187a8:	d6 01       	movw	r26, r12
   187aa:	bc 90       	ld	r11, X
   187ac:	d7 01       	movw	r26, r14
   187ae:	dc 96       	adiw	r26, 0x3c	; 60
   187b0:	ac 90       	ld	r10, X
   187b2:	ba 20       	and	r11, r10
   187b4:	d6 01       	movw	r26, r12
   187b6:	bc 92       	st	X, r11
   187b8:	d7 01       	movw	r26, r14
   187ba:	d2 96       	adiw	r26, 0x32	; 50
   187bc:	cd 90       	ld	r12, X+
   187be:	dc 90       	ld	r13, X
   187c0:	d6 01       	movw	r26, r12
   187c2:	bc 90       	ld	r11, X
   187c4:	d7 01       	movw	r26, r14
   187c6:	d8 96       	adiw	r26, 0x38	; 56
   187c8:	ac 90       	ld	r10, X
   187ca:	ba 28       	or	r11, r10
   187cc:	d6 01       	movw	r26, r12
   187ce:	bc 92       	st	X, r11
   187d0:	d7 01       	movw	r26, r14
   187d2:	d0 96       	adiw	r26, 0x30	; 48
   187d4:	cd 90       	ld	r12, X+
   187d6:	dc 90       	ld	r13, X
   187d8:	d6 01       	movw	r26, r12
   187da:	bc 90       	ld	r11, X
   187dc:	d7 01       	movw	r26, r14
   187de:	d7 96       	adiw	r26, 0x37	; 55
   187e0:	ac 90       	ld	r10, X
   187e2:	ba 28       	or	r11, r10
   187e4:	d6 01       	movw	r26, r12
   187e6:	bc 92       	st	X, r11
   187e8:	72 b9       	out	0x02, r23	; 2
   187ea:	d7 01       	movw	r26, r14
   187ec:	d2 96       	adiw	r26, 0x32	; 50
   187ee:	ad 90       	ld	r10, X+
   187f0:	bc 90       	ld	r11, X
   187f2:	d5 01       	movw	r26, r10
   187f4:	7c 91       	ld	r23, X
   187f6:	d7 01       	movw	r26, r14
   187f8:	dc 96       	adiw	r26, 0x3c	; 60
   187fa:	dc 90       	ld	r13, X
   187fc:	7d 21       	and	r23, r13
   187fe:	d5 01       	movw	r26, r10
   18800:	7c 93       	st	X, r23
   18802:	d7 01       	movw	r26, r14
   18804:	d2 96       	adiw	r26, 0x32	; 50
   18806:	ad 90       	ld	r10, X+
   18808:	bc 90       	ld	r11, X
   1880a:	d5 01       	movw	r26, r10
   1880c:	7c 91       	ld	r23, X
   1880e:	d7 01       	movw	r26, r14
   18810:	d8 96       	adiw	r26, 0x38	; 56
   18812:	dc 90       	ld	r13, X
   18814:	7d 29       	or	r23, r13
   18816:	d5 01       	movw	r26, r10
   18818:	7c 93       	st	X, r23
   1881a:	62 b9       	out	0x02, r22	; 2
   1881c:	d7 01       	movw	r26, r14
   1881e:	d2 96       	adiw	r26, 0x32	; 50
   18820:	cd 90       	ld	r12, X+
   18822:	dc 90       	ld	r13, X
   18824:	d6 01       	movw	r26, r12
   18826:	6c 91       	ld	r22, X
   18828:	d7 01       	movw	r26, r14
   1882a:	dc 96       	adiw	r26, 0x3c	; 60
   1882c:	7c 91       	ld	r23, X
   1882e:	67 23       	and	r22, r23
   18830:	d6 01       	movw	r26, r12
   18832:	6c 93       	st	X, r22
   18834:	d7 01       	movw	r26, r14
   18836:	d2 96       	adiw	r26, 0x32	; 50
   18838:	cd 90       	ld	r12, X+
   1883a:	dc 90       	ld	r13, X
   1883c:	d6 01       	movw	r26, r12
   1883e:	6c 91       	ld	r22, X
   18840:	d7 01       	movw	r26, r14
   18842:	d8 96       	adiw	r26, 0x38	; 56
   18844:	7c 91       	ld	r23, X
   18846:	67 2b       	or	r22, r23
   18848:	d6 01       	movw	r26, r12
   1884a:	6c 93       	st	X, r22
   1884c:	d7 01       	movw	r26, r14
   1884e:	d0 96       	adiw	r26, 0x30	; 48
   18850:	cd 90       	ld	r12, X+
   18852:	dc 90       	ld	r13, X
   18854:	d6 01       	movw	r26, r12
   18856:	6c 91       	ld	r22, X
   18858:	d7 01       	movw	r26, r14
   1885a:	db 96       	adiw	r26, 0x3b	; 59
   1885c:	7c 91       	ld	r23, X
   1885e:	67 23       	and	r22, r23
   18860:	d6 01       	movw	r26, r12
   18862:	6c 93       	st	X, r22
   18864:	12 b8       	out	0x02, r1	; 2
   18866:	d7 01       	movw	r26, r14
   18868:	d2 96       	adiw	r26, 0x32	; 50
   1886a:	cd 90       	ld	r12, X+
   1886c:	dc 90       	ld	r13, X
   1886e:	d6 01       	movw	r26, r12
   18870:	6c 91       	ld	r22, X
   18872:	d7 01       	movw	r26, r14
   18874:	dc 96       	adiw	r26, 0x3c	; 60
   18876:	7c 91       	ld	r23, X
   18878:	67 23       	and	r22, r23
   1887a:	d6 01       	movw	r26, r12
   1887c:	6c 93       	st	X, r22
   1887e:	d7 01       	movw	r26, r14
   18880:	d2 96       	adiw	r26, 0x32	; 50
   18882:	cd 90       	ld	r12, X+
   18884:	dc 90       	ld	r13, X
   18886:	d6 01       	movw	r26, r12
   18888:	6c 91       	ld	r22, X
   1888a:	d7 01       	movw	r26, r14
   1888c:	d8 96       	adiw	r26, 0x38	; 56
   1888e:	7c 91       	ld	r23, X
   18890:	67 2b       	or	r22, r23
   18892:	d6 01       	movw	r26, r12
   18894:	6c 93       	st	X, r22
   18896:	61 e5       	ldi	r22, 0x51	; 81
   18898:	62 b9       	out	0x02, r22	; 2
   1889a:	d7 01       	movw	r26, r14
   1889c:	d2 96       	adiw	r26, 0x32	; 50
   1889e:	cd 90       	ld	r12, X+
   188a0:	dc 90       	ld	r13, X
   188a2:	d6 01       	movw	r26, r12
   188a4:	6c 91       	ld	r22, X
   188a6:	d7 01       	movw	r26, r14
   188a8:	dc 96       	adiw	r26, 0x3c	; 60
   188aa:	7c 91       	ld	r23, X
   188ac:	67 23       	and	r22, r23
   188ae:	d6 01       	movw	r26, r12
   188b0:	6c 93       	st	X, r22
   188b2:	d7 01       	movw	r26, r14
   188b4:	d2 96       	adiw	r26, 0x32	; 50
   188b6:	cd 90       	ld	r12, X+
   188b8:	dc 90       	ld	r13, X
   188ba:	d6 01       	movw	r26, r12
   188bc:	6c 91       	ld	r22, X
   188be:	d7 01       	movw	r26, r14
   188c0:	d8 96       	adiw	r26, 0x38	; 56
   188c2:	7c 91       	ld	r23, X
   188c4:	67 2b       	or	r22, r23
   188c6:	d6 01       	movw	r26, r12
   188c8:	6c 93       	st	X, r22
   188ca:	d7 01       	movw	r26, r14
   188cc:	d0 96       	adiw	r26, 0x30	; 48
   188ce:	cd 90       	ld	r12, X+
   188d0:	dc 90       	ld	r13, X
   188d2:	d6 01       	movw	r26, r12
   188d4:	6c 91       	ld	r22, X
   188d6:	d7 01       	movw	r26, r14
   188d8:	d7 96       	adiw	r26, 0x37	; 55
   188da:	7c 91       	ld	r23, X
   188dc:	67 2b       	or	r22, r23
   188de:	d6 01       	movw	r26, r12
   188e0:	6c 93       	st	X, r22
   188e2:	32 b9       	out	0x02, r19	; 2
   188e4:	d7 01       	movw	r26, r14
   188e6:	d2 96       	adiw	r26, 0x32	; 50
   188e8:	cd 90       	ld	r12, X+
   188ea:	dc 90       	ld	r13, X
   188ec:	d6 01       	movw	r26, r12
   188ee:	3c 91       	ld	r19, X
   188f0:	d7 01       	movw	r26, r14
   188f2:	dc 96       	adiw	r26, 0x3c	; 60
   188f4:	6c 91       	ld	r22, X
   188f6:	36 23       	and	r19, r22
   188f8:	d6 01       	movw	r26, r12
   188fa:	3c 93       	st	X, r19
   188fc:	d7 01       	movw	r26, r14
   188fe:	d2 96       	adiw	r26, 0x32	; 50
   18900:	cd 90       	ld	r12, X+
   18902:	dc 90       	ld	r13, X
   18904:	d6 01       	movw	r26, r12
   18906:	3c 91       	ld	r19, X
   18908:	d7 01       	movw	r26, r14
   1890a:	d8 96       	adiw	r26, 0x38	; 56
   1890c:	6c 91       	ld	r22, X
   1890e:	36 2b       	or	r19, r22
   18910:	d6 01       	movw	r26, r12
   18912:	3c 93       	st	X, r19
   18914:	22 b9       	out	0x02, r18	; 2
   18916:	d7 01       	movw	r26, r14
   18918:	d2 96       	adiw	r26, 0x32	; 50
   1891a:	6d 91       	ld	r22, X+
   1891c:	7c 91       	ld	r23, X
   1891e:	db 01       	movw	r26, r22
   18920:	2c 91       	ld	r18, X
   18922:	d7 01       	movw	r26, r14
   18924:	dc 96       	adiw	r26, 0x3c	; 60
   18926:	3c 91       	ld	r19, X
   18928:	23 23       	and	r18, r19
   1892a:	db 01       	movw	r26, r22
   1892c:	2c 93       	st	X, r18
   1892e:	d7 01       	movw	r26, r14
   18930:	d2 96       	adiw	r26, 0x32	; 50
   18932:	6d 91       	ld	r22, X+
   18934:	7c 91       	ld	r23, X
   18936:	db 01       	movw	r26, r22
   18938:	2c 91       	ld	r18, X
   1893a:	d7 01       	movw	r26, r14
   1893c:	d8 96       	adiw	r26, 0x38	; 56
   1893e:	3c 91       	ld	r19, X
   18940:	23 2b       	or	r18, r19
   18942:	db 01       	movw	r26, r22
   18944:	2c 93       	st	X, r18
   18946:	d7 01       	movw	r26, r14
   18948:	d0 96       	adiw	r26, 0x30	; 48
   1894a:	6d 91       	ld	r22, X+
   1894c:	7c 91       	ld	r23, X
   1894e:	db 01       	movw	r26, r22
   18950:	2c 91       	ld	r18, X
   18952:	d7 01       	movw	r26, r14
   18954:	db 96       	adiw	r26, 0x3b	; 59
   18956:	3c 91       	ld	r19, X
   18958:	23 23       	and	r18, r19
   1895a:	db 01       	movw	r26, r22
   1895c:	2c 93       	st	X, r18
   1895e:	12 b8       	out	0x02, r1	; 2
   18960:	d7 01       	movw	r26, r14
   18962:	d2 96       	adiw	r26, 0x32	; 50
   18964:	6d 91       	ld	r22, X+
   18966:	7c 91       	ld	r23, X
   18968:	db 01       	movw	r26, r22
   1896a:	2c 91       	ld	r18, X
   1896c:	d7 01       	movw	r26, r14
   1896e:	dc 96       	adiw	r26, 0x3c	; 60
   18970:	3c 91       	ld	r19, X
   18972:	23 23       	and	r18, r19
   18974:	db 01       	movw	r26, r22
   18976:	2c 93       	st	X, r18
   18978:	d7 01       	movw	r26, r14
   1897a:	d2 96       	adiw	r26, 0x32	; 50
   1897c:	6d 91       	ld	r22, X+
   1897e:	7c 91       	ld	r23, X
   18980:	db 01       	movw	r26, r22
   18982:	2c 91       	ld	r18, X
   18984:	d7 01       	movw	r26, r14
   18986:	d8 96       	adiw	r26, 0x38	; 56
   18988:	3c 91       	ld	r19, X
   1898a:	23 2b       	or	r18, r19
   1898c:	db 01       	movw	r26, r22
   1898e:	2c 93       	st	X, r18
   18990:	22 e5       	ldi	r18, 0x52	; 82
   18992:	22 b9       	out	0x02, r18	; 2
   18994:	d7 01       	movw	r26, r14
   18996:	d2 96       	adiw	r26, 0x32	; 50
   18998:	6d 91       	ld	r22, X+
   1899a:	7c 91       	ld	r23, X
   1899c:	db 01       	movw	r26, r22
   1899e:	2c 91       	ld	r18, X
   189a0:	d7 01       	movw	r26, r14
   189a2:	dc 96       	adiw	r26, 0x3c	; 60
   189a4:	3c 91       	ld	r19, X
   189a6:	23 23       	and	r18, r19
   189a8:	db 01       	movw	r26, r22
   189aa:	2c 93       	st	X, r18
   189ac:	d7 01       	movw	r26, r14
   189ae:	d2 96       	adiw	r26, 0x32	; 50
   189b0:	6d 91       	ld	r22, X+
   189b2:	7c 91       	ld	r23, X
   189b4:	db 01       	movw	r26, r22
   189b6:	2c 91       	ld	r18, X
   189b8:	d7 01       	movw	r26, r14
   189ba:	d8 96       	adiw	r26, 0x38	; 56
   189bc:	3c 91       	ld	r19, X
   189be:	23 2b       	or	r18, r19
   189c0:	db 01       	movw	r26, r22
   189c2:	2c 93       	st	X, r18
   189c4:	d7 01       	movw	r26, r14
   189c6:	d0 96       	adiw	r26, 0x30	; 48
   189c8:	6d 91       	ld	r22, X+
   189ca:	7c 91       	ld	r23, X
   189cc:	db 01       	movw	r26, r22
   189ce:	2c 91       	ld	r18, X
   189d0:	d7 01       	movw	r26, r14
   189d2:	d7 96       	adiw	r26, 0x37	; 55
   189d4:	3c 91       	ld	r19, X
   189d6:	23 2b       	or	r18, r19
   189d8:	db 01       	movw	r26, r22
   189da:	2c 93       	st	X, r18
   189dc:	52 b9       	out	0x02, r21	; 2
   189de:	d7 01       	movw	r26, r14
   189e0:	d2 96       	adiw	r26, 0x32	; 50
   189e2:	6d 91       	ld	r22, X+
   189e4:	7c 91       	ld	r23, X
   189e6:	db 01       	movw	r26, r22
   189e8:	2c 91       	ld	r18, X
   189ea:	d7 01       	movw	r26, r14
   189ec:	dc 96       	adiw	r26, 0x3c	; 60
   189ee:	3c 91       	ld	r19, X
   189f0:	23 23       	and	r18, r19
   189f2:	db 01       	movw	r26, r22
   189f4:	2c 93       	st	X, r18
   189f6:	d7 01       	movw	r26, r14
   189f8:	d2 96       	adiw	r26, 0x32	; 50
   189fa:	6d 91       	ld	r22, X+
   189fc:	7c 91       	ld	r23, X
   189fe:	db 01       	movw	r26, r22
   18a00:	2c 91       	ld	r18, X
   18a02:	d7 01       	movw	r26, r14
   18a04:	d8 96       	adiw	r26, 0x38	; 56
   18a06:	3c 91       	ld	r19, X
   18a08:	23 2b       	or	r18, r19
   18a0a:	db 01       	movw	r26, r22
   18a0c:	2c 93       	st	X, r18
   18a0e:	42 b9       	out	0x02, r20	; 2
   18a10:	d7 01       	movw	r26, r14
   18a12:	d2 96       	adiw	r26, 0x32	; 50
   18a14:	4d 91       	ld	r20, X+
   18a16:	5c 91       	ld	r21, X
   18a18:	da 01       	movw	r26, r20
   18a1a:	2c 91       	ld	r18, X
   18a1c:	d7 01       	movw	r26, r14
   18a1e:	dc 96       	adiw	r26, 0x3c	; 60
   18a20:	3c 91       	ld	r19, X
   18a22:	23 23       	and	r18, r19
   18a24:	da 01       	movw	r26, r20
   18a26:	2c 93       	st	X, r18
   18a28:	d7 01       	movw	r26, r14
   18a2a:	d2 96       	adiw	r26, 0x32	; 50
   18a2c:	4d 91       	ld	r20, X+
   18a2e:	5c 91       	ld	r21, X
   18a30:	da 01       	movw	r26, r20
   18a32:	2c 91       	ld	r18, X
   18a34:	d7 01       	movw	r26, r14
   18a36:	d8 96       	adiw	r26, 0x38	; 56
   18a38:	3c 91       	ld	r19, X
   18a3a:	23 2b       	or	r18, r19
   18a3c:	da 01       	movw	r26, r20
   18a3e:	2c 93       	st	X, r18
   18a40:	d7 01       	movw	r26, r14
   18a42:	d0 96       	adiw	r26, 0x30	; 48
   18a44:	4d 91       	ld	r20, X+
   18a46:	5c 91       	ld	r21, X
   18a48:	da 01       	movw	r26, r20
   18a4a:	2c 91       	ld	r18, X
   18a4c:	d7 01       	movw	r26, r14
   18a4e:	db 96       	adiw	r26, 0x3b	; 59
   18a50:	3c 91       	ld	r19, X
   18a52:	23 23       	and	r18, r19
   18a54:	da 01       	movw	r26, r20
   18a56:	2c 93       	st	X, r18
   18a58:	12 b8       	out	0x02, r1	; 2
   18a5a:	d7 01       	movw	r26, r14
   18a5c:	d2 96       	adiw	r26, 0x32	; 50
   18a5e:	4d 91       	ld	r20, X+
   18a60:	5c 91       	ld	r21, X
   18a62:	da 01       	movw	r26, r20
   18a64:	2c 91       	ld	r18, X
   18a66:	d7 01       	movw	r26, r14
   18a68:	dc 96       	adiw	r26, 0x3c	; 60
   18a6a:	3c 91       	ld	r19, X
   18a6c:	23 23       	and	r18, r19
   18a6e:	da 01       	movw	r26, r20
   18a70:	2c 93       	st	X, r18
   18a72:	d7 01       	movw	r26, r14
   18a74:	d2 96       	adiw	r26, 0x32	; 50
   18a76:	4d 91       	ld	r20, X+
   18a78:	5c 91       	ld	r21, X
   18a7a:	da 01       	movw	r26, r20
   18a7c:	2c 91       	ld	r18, X
   18a7e:	d7 01       	movw	r26, r14
   18a80:	d8 96       	adiw	r26, 0x38	; 56
   18a82:	3c 91       	ld	r19, X
   18a84:	23 2b       	or	r18, r19
   18a86:	da 01       	movw	r26, r20
   18a88:	2c 93       	st	X, r18
   18a8a:	23 e5       	ldi	r18, 0x53	; 83
   18a8c:	22 b9       	out	0x02, r18	; 2
   18a8e:	d7 01       	movw	r26, r14
   18a90:	d2 96       	adiw	r26, 0x32	; 50
   18a92:	4d 91       	ld	r20, X+
   18a94:	5c 91       	ld	r21, X
   18a96:	da 01       	movw	r26, r20
   18a98:	2c 91       	ld	r18, X
   18a9a:	d7 01       	movw	r26, r14
   18a9c:	dc 96       	adiw	r26, 0x3c	; 60
   18a9e:	3c 91       	ld	r19, X
   18aa0:	23 23       	and	r18, r19
   18aa2:	da 01       	movw	r26, r20
   18aa4:	2c 93       	st	X, r18
   18aa6:	d7 01       	movw	r26, r14
   18aa8:	d2 96       	adiw	r26, 0x32	; 50
   18aaa:	4d 91       	ld	r20, X+
   18aac:	5c 91       	ld	r21, X
   18aae:	da 01       	movw	r26, r20
   18ab0:	2c 91       	ld	r18, X
   18ab2:	d7 01       	movw	r26, r14
   18ab4:	d8 96       	adiw	r26, 0x38	; 56
   18ab6:	3c 91       	ld	r19, X
   18ab8:	23 2b       	or	r18, r19
   18aba:	da 01       	movw	r26, r20
   18abc:	2c 93       	st	X, r18
   18abe:	d7 01       	movw	r26, r14
   18ac0:	d0 96       	adiw	r26, 0x30	; 48
   18ac2:	4d 91       	ld	r20, X+
   18ac4:	5c 91       	ld	r21, X
   18ac6:	da 01       	movw	r26, r20
   18ac8:	2c 91       	ld	r18, X
   18aca:	d7 01       	movw	r26, r14
   18acc:	d7 96       	adiw	r26, 0x37	; 55
   18ace:	3c 91       	ld	r19, X
   18ad0:	23 2b       	or	r18, r19
   18ad2:	da 01       	movw	r26, r20
   18ad4:	2c 93       	st	X, r18
   18ad6:	12 b9       	out	0x02, r17	; 2
   18ad8:	d7 01       	movw	r26, r14
   18ada:	d2 96       	adiw	r26, 0x32	; 50
   18adc:	4d 91       	ld	r20, X+
   18ade:	5c 91       	ld	r21, X
   18ae0:	da 01       	movw	r26, r20
   18ae2:	2c 91       	ld	r18, X
   18ae4:	d7 01       	movw	r26, r14
   18ae6:	dc 96       	adiw	r26, 0x3c	; 60
   18ae8:	3c 91       	ld	r19, X
   18aea:	23 23       	and	r18, r19
   18aec:	da 01       	movw	r26, r20
   18aee:	2c 93       	st	X, r18
   18af0:	d7 01       	movw	r26, r14
   18af2:	d2 96       	adiw	r26, 0x32	; 50
   18af4:	4d 91       	ld	r20, X+
   18af6:	5c 91       	ld	r21, X
   18af8:	da 01       	movw	r26, r20
   18afa:	2c 91       	ld	r18, X
   18afc:	d7 01       	movw	r26, r14
   18afe:	d8 96       	adiw	r26, 0x38	; 56
   18b00:	3c 91       	ld	r19, X
   18b02:	23 2b       	or	r18, r19
   18b04:	da 01       	movw	r26, r20
   18b06:	2c 93       	st	X, r18
   18b08:	02 b9       	out	0x02, r16	; 2
   18b0a:	d7 01       	movw	r26, r14
   18b0c:	d2 96       	adiw	r26, 0x32	; 50
   18b0e:	4d 91       	ld	r20, X+
   18b10:	5c 91       	ld	r21, X
   18b12:	da 01       	movw	r26, r20
   18b14:	2c 91       	ld	r18, X
   18b16:	d7 01       	movw	r26, r14
   18b18:	dc 96       	adiw	r26, 0x3c	; 60
   18b1a:	3c 91       	ld	r19, X
   18b1c:	23 23       	and	r18, r19
   18b1e:	da 01       	movw	r26, r20
   18b20:	2c 93       	st	X, r18
   18b22:	d7 01       	movw	r26, r14
   18b24:	d2 96       	adiw	r26, 0x32	; 50
   18b26:	4d 91       	ld	r20, X+
   18b28:	5c 91       	ld	r21, X
   18b2a:	da 01       	movw	r26, r20
   18b2c:	2c 91       	ld	r18, X
   18b2e:	d7 01       	movw	r26, r14
   18b30:	d8 96       	adiw	r26, 0x38	; 56
   18b32:	3c 91       	ld	r19, X
   18b34:	23 2b       	or	r18, r19
   18b36:	da 01       	movw	r26, r20
   18b38:	2c 93       	st	X, r18
   18b3a:	d7 01       	movw	r26, r14
   18b3c:	d0 96       	adiw	r26, 0x30	; 48
   18b3e:	4d 91       	ld	r20, X+
   18b40:	5c 91       	ld	r21, X
   18b42:	da 01       	movw	r26, r20
   18b44:	2c 91       	ld	r18, X
   18b46:	d7 01       	movw	r26, r14
   18b48:	db 96       	adiw	r26, 0x3b	; 59
   18b4a:	3c 91       	ld	r19, X
   18b4c:	23 23       	and	r18, r19
   18b4e:	da 01       	movw	r26, r20
   18b50:	2c 93       	st	X, r18
   18b52:	12 b8       	out	0x02, r1	; 2
   18b54:	d7 01       	movw	r26, r14
   18b56:	d2 96       	adiw	r26, 0x32	; 50
   18b58:	4d 91       	ld	r20, X+
   18b5a:	5c 91       	ld	r21, X
   18b5c:	da 01       	movw	r26, r20
   18b5e:	2c 91       	ld	r18, X
   18b60:	d7 01       	movw	r26, r14
   18b62:	dc 96       	adiw	r26, 0x3c	; 60
   18b64:	3c 91       	ld	r19, X
   18b66:	23 23       	and	r18, r19
   18b68:	da 01       	movw	r26, r20
   18b6a:	2c 93       	st	X, r18
   18b6c:	d7 01       	movw	r26, r14
   18b6e:	d2 96       	adiw	r26, 0x32	; 50
   18b70:	4d 91       	ld	r20, X+
   18b72:	5c 91       	ld	r21, X
   18b74:	da 01       	movw	r26, r20
   18b76:	2c 91       	ld	r18, X
   18b78:	d7 01       	movw	r26, r14
   18b7a:	d8 96       	adiw	r26, 0x38	; 56
   18b7c:	3c 91       	ld	r19, X
   18b7e:	23 2b       	or	r18, r19
   18b80:	da 01       	movw	r26, r20
   18b82:	2c 93       	st	X, r18
   18b84:	20 e2       	ldi	r18, 0x20	; 32
   18b86:	22 b9       	out	0x02, r18	; 2
   18b88:	d7 01       	movw	r26, r14
   18b8a:	d2 96       	adiw	r26, 0x32	; 50
   18b8c:	4d 91       	ld	r20, X+
   18b8e:	5c 91       	ld	r21, X
   18b90:	da 01       	movw	r26, r20
   18b92:	2c 91       	ld	r18, X
   18b94:	d7 01       	movw	r26, r14
   18b96:	dc 96       	adiw	r26, 0x3c	; 60
   18b98:	3c 91       	ld	r19, X
   18b9a:	23 23       	and	r18, r19
   18b9c:	da 01       	movw	r26, r20
   18b9e:	2c 93       	st	X, r18
   18ba0:	d7 01       	movw	r26, r14
   18ba2:	d2 96       	adiw	r26, 0x32	; 50
   18ba4:	4d 91       	ld	r20, X+
   18ba6:	5c 91       	ld	r21, X
   18ba8:	da 01       	movw	r26, r20
   18baa:	2c 91       	ld	r18, X
   18bac:	d7 01       	movw	r26, r14
   18bae:	d8 96       	adiw	r26, 0x38	; 56
   18bb0:	3c 91       	ld	r19, X
   18bb2:	23 2b       	or	r18, r19
   18bb4:	da 01       	movw	r26, r20
   18bb6:	2c 93       	st	X, r18
   18bb8:	d7 01       	movw	r26, r14
   18bba:	d0 96       	adiw	r26, 0x30	; 48
   18bbc:	4d 91       	ld	r20, X+
   18bbe:	5c 91       	ld	r21, X
   18bc0:	da 01       	movw	r26, r20
   18bc2:	2c 91       	ld	r18, X
   18bc4:	d7 01       	movw	r26, r14
   18bc6:	d7 96       	adiw	r26, 0x37	; 55
   18bc8:	3c 91       	ld	r19, X
   18bca:	23 2b       	or	r18, r19
   18bcc:	da 01       	movw	r26, r20
   18bce:	2c 93       	st	X, r18
   18bd0:	f2 b9       	out	0x02, r31	; 2
   18bd2:	d7 01       	movw	r26, r14
   18bd4:	d2 96       	adiw	r26, 0x32	; 50
   18bd6:	4d 91       	ld	r20, X+
   18bd8:	5c 91       	ld	r21, X
   18bda:	da 01       	movw	r26, r20
   18bdc:	2c 91       	ld	r18, X
   18bde:	d7 01       	movw	r26, r14
   18be0:	dc 96       	adiw	r26, 0x3c	; 60
   18be2:	3c 91       	ld	r19, X
   18be4:	23 23       	and	r18, r19
   18be6:	da 01       	movw	r26, r20
   18be8:	2c 93       	st	X, r18
   18bea:	d7 01       	movw	r26, r14
   18bec:	d2 96       	adiw	r26, 0x32	; 50
   18bee:	4d 91       	ld	r20, X+
   18bf0:	5c 91       	ld	r21, X
   18bf2:	da 01       	movw	r26, r20
   18bf4:	2c 91       	ld	r18, X
   18bf6:	d7 01       	movw	r26, r14
   18bf8:	d8 96       	adiw	r26, 0x38	; 56
   18bfa:	3c 91       	ld	r19, X
   18bfc:	23 2b       	or	r18, r19
   18bfe:	da 01       	movw	r26, r20
   18c00:	2c 93       	st	X, r18
   18c02:	e2 b9       	out	0x02, r30	; 2
   18c04:	d7 01       	movw	r26, r14
   18c06:	d2 96       	adiw	r26, 0x32	; 50
   18c08:	ed 91       	ld	r30, X+
   18c0a:	fc 91       	ld	r31, X
   18c0c:	d3 97       	sbiw	r26, 0x33	; 51
   18c0e:	20 81       	ld	r18, Z
   18c10:	dc 96       	adiw	r26, 0x3c	; 60
   18c12:	3c 91       	ld	r19, X
   18c14:	dc 97       	sbiw	r26, 0x3c	; 60
   18c16:	23 23       	and	r18, r19
   18c18:	20 83       	st	Z, r18
   18c1a:	d2 96       	adiw	r26, 0x32	; 50
   18c1c:	ed 91       	ld	r30, X+
   18c1e:	fc 91       	ld	r31, X
   18c20:	d3 97       	sbiw	r26, 0x33	; 51
   18c22:	20 81       	ld	r18, Z
   18c24:	d8 96       	adiw	r26, 0x38	; 56
   18c26:	3c 91       	ld	r19, X
   18c28:	d8 97       	sbiw	r26, 0x38	; 56
   18c2a:	23 2b       	or	r18, r19
   18c2c:	20 83       	st	Z, r18
   18c2e:	d0 96       	adiw	r26, 0x30	; 48
   18c30:	ed 91       	ld	r30, X+
   18c32:	fc 91       	ld	r31, X
   18c34:	d1 97       	sbiw	r26, 0x31	; 49
   18c36:	20 81       	ld	r18, Z
   18c38:	db 96       	adiw	r26, 0x3b	; 59
   18c3a:	3c 91       	ld	r19, X
   18c3c:	db 97       	sbiw	r26, 0x3b	; 59
   18c3e:	23 23       	and	r18, r19
   18c40:	20 83       	st	Z, r18
   18c42:	12 b8       	out	0x02, r1	; 2
   18c44:	d2 96       	adiw	r26, 0x32	; 50
   18c46:	ed 91       	ld	r30, X+
   18c48:	fc 91       	ld	r31, X
   18c4a:	d3 97       	sbiw	r26, 0x33	; 51
   18c4c:	20 81       	ld	r18, Z
   18c4e:	dc 96       	adiw	r26, 0x3c	; 60
   18c50:	3c 91       	ld	r19, X
   18c52:	dc 97       	sbiw	r26, 0x3c	; 60
   18c54:	23 23       	and	r18, r19
   18c56:	20 83       	st	Z, r18
   18c58:	d2 96       	adiw	r26, 0x32	; 50
   18c5a:	ed 91       	ld	r30, X+
   18c5c:	fc 91       	ld	r31, X
   18c5e:	d3 97       	sbiw	r26, 0x33	; 51
   18c60:	20 81       	ld	r18, Z
   18c62:	d8 96       	adiw	r26, 0x38	; 56
   18c64:	3c 91       	ld	r19, X
   18c66:	d8 97       	sbiw	r26, 0x38	; 56
   18c68:	23 2b       	or	r18, r19
   18c6a:	20 83       	st	Z, r18
   18c6c:	21 e2       	ldi	r18, 0x21	; 33
   18c6e:	22 b9       	out	0x02, r18	; 2
   18c70:	d2 96       	adiw	r26, 0x32	; 50
   18c72:	ed 91       	ld	r30, X+
   18c74:	fc 91       	ld	r31, X
   18c76:	d3 97       	sbiw	r26, 0x33	; 51
   18c78:	20 81       	ld	r18, Z
   18c7a:	dc 96       	adiw	r26, 0x3c	; 60
   18c7c:	3c 91       	ld	r19, X
   18c7e:	dc 97       	sbiw	r26, 0x3c	; 60
   18c80:	23 23       	and	r18, r19
   18c82:	20 83       	st	Z, r18
   18c84:	d2 96       	adiw	r26, 0x32	; 50
   18c86:	ed 91       	ld	r30, X+
   18c88:	fc 91       	ld	r31, X
   18c8a:	d3 97       	sbiw	r26, 0x33	; 51
   18c8c:	20 81       	ld	r18, Z
   18c8e:	d8 96       	adiw	r26, 0x38	; 56
   18c90:	3c 91       	ld	r19, X
   18c92:	d8 97       	sbiw	r26, 0x38	; 56
   18c94:	23 2b       	or	r18, r19
   18c96:	20 83       	st	Z, r18
   18c98:	d0 96       	adiw	r26, 0x30	; 48
   18c9a:	ed 91       	ld	r30, X+
   18c9c:	fc 91       	ld	r31, X
   18c9e:	d1 97       	sbiw	r26, 0x31	; 49
   18ca0:	20 81       	ld	r18, Z
   18ca2:	d7 96       	adiw	r26, 0x37	; 55
   18ca4:	3c 91       	ld	r19, X
   18ca6:	d7 97       	sbiw	r26, 0x37	; 55
   18ca8:	23 2b       	or	r18, r19
   18caa:	20 83       	st	Z, r18
   18cac:	92 b9       	out	0x02, r25	; 2
   18cae:	d2 96       	adiw	r26, 0x32	; 50
   18cb0:	ed 91       	ld	r30, X+
   18cb2:	fc 91       	ld	r31, X
   18cb4:	d3 97       	sbiw	r26, 0x33	; 51
   18cb6:	90 81       	ld	r25, Z
   18cb8:	dc 96       	adiw	r26, 0x3c	; 60
   18cba:	2c 91       	ld	r18, X
   18cbc:	dc 97       	sbiw	r26, 0x3c	; 60
   18cbe:	92 23       	and	r25, r18
   18cc0:	90 83       	st	Z, r25
   18cc2:	d2 96       	adiw	r26, 0x32	; 50
   18cc4:	ed 91       	ld	r30, X+
   18cc6:	fc 91       	ld	r31, X
   18cc8:	d3 97       	sbiw	r26, 0x33	; 51
   18cca:	90 81       	ld	r25, Z
   18ccc:	d8 96       	adiw	r26, 0x38	; 56
   18cce:	2c 91       	ld	r18, X
   18cd0:	d8 97       	sbiw	r26, 0x38	; 56
   18cd2:	92 2b       	or	r25, r18
   18cd4:	90 83       	st	Z, r25
   18cd6:	82 b9       	out	0x02, r24	; 2
   18cd8:	d2 96       	adiw	r26, 0x32	; 50
   18cda:	ed 91       	ld	r30, X+
   18cdc:	fc 91       	ld	r31, X
   18cde:	d3 97       	sbiw	r26, 0x33	; 51
   18ce0:	80 81       	ld	r24, Z
   18ce2:	dc 96       	adiw	r26, 0x3c	; 60
   18ce4:	9c 91       	ld	r25, X
   18ce6:	dc 97       	sbiw	r26, 0x3c	; 60
   18ce8:	89 23       	and	r24, r25
   18cea:	80 83       	st	Z, r24
   18cec:	d2 96       	adiw	r26, 0x32	; 50
   18cee:	ed 91       	ld	r30, X+
   18cf0:	fc 91       	ld	r31, X
   18cf2:	d3 97       	sbiw	r26, 0x33	; 51
   18cf4:	80 81       	ld	r24, Z
   18cf6:	d8 96       	adiw	r26, 0x38	; 56
   18cf8:	9c 91       	ld	r25, X
   18cfa:	89 2b       	or	r24, r25
   18cfc:	80 83       	st	Z, r24
   18cfe:	d7 01       	movw	r26, r14
   18d00:	9e 96       	adiw	r26, 0x2e	; 46
   18d02:	ed 91       	ld	r30, X+
   18d04:	fc 91       	ld	r31, X
   18d06:	9f 97       	sbiw	r26, 0x2f	; 47
   18d08:	80 81       	ld	r24, Z
   18d0a:	d6 96       	adiw	r26, 0x36	; 54
   18d0c:	9c 91       	ld	r25, X
   18d0e:	89 2b       	or	r24, r25
   18d10:	80 83       	st	Z, r24
   18d12:	28 96       	adiw	r28, 0x08	; 8
   18d14:	0f b6       	in	r0, 0x3f	; 63
   18d16:	f8 94       	cli
   18d18:	de bf       	out	0x3e, r29	; 62
   18d1a:	0f be       	out	0x3f, r0	; 63
   18d1c:	cd bf       	out	0x3d, r28	; 61
   18d1e:	df 91       	pop	r29
   18d20:	cf 91       	pop	r28
   18d22:	1f 91       	pop	r17
   18d24:	0f 91       	pop	r16
   18d26:	ff 90       	pop	r15
   18d28:	ef 90       	pop	r14
   18d2a:	df 90       	pop	r13
   18d2c:	cf 90       	pop	r12
   18d2e:	bf 90       	pop	r11
   18d30:	af 90       	pop	r10
   18d32:	08 95       	ret
   18d34:	f7 01       	movw	r30, r14
   18d36:	a6 85       	ldd	r26, Z+14	; 0x0e
   18d38:	b7 85       	ldd	r27, Z+15	; 0x0f
   18d3a:	59 01       	movw	r10, r18
   18d3c:	a0 94       	com	r10
   18d3e:	b0 94       	com	r11
   18d40:	9d 01       	movw	r18, r26
   18d42:	26 1b       	sub	r18, r22
   18d44:	37 0b       	sbc	r19, r23
   18d46:	21 50       	subi	r18, 0x01	; 1
   18d48:	31 09       	sbc	r19, r1
   18d4a:	60 89       	ldd	r22, Z+16	; 0x10
   18d4c:	71 89       	ldd	r23, Z+17	; 0x11
   18d4e:	68 01       	movw	r12, r16
   18d50:	c0 94       	com	r12
   18d52:	d0 94       	com	r13
   18d54:	8a 01       	movw	r16, r20
   18d56:	00 95       	com	r16
   18d58:	10 95       	com	r17
   18d5a:	06 0f       	add	r16, r22
   18d5c:	17 1f       	adc	r17, r23
   18d5e:	c8 01       	movw	r24, r16
   18d60:	f9 01       	movw	r30, r18
   18d62:	a6 01       	movw	r20, r12
   18d64:	46 0f       	add	r20, r22
   18d66:	57 1f       	adc	r21, r23
   18d68:	b5 01       	movw	r22, r10
   18d6a:	f1 cc       	rjmp	.-1566   	; 0x1874e <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x86>
   18d6c:	f7 01       	movw	r30, r14
   18d6e:	a0 89       	ldd	r26, Z+16	; 0x10
   18d70:	b1 89       	ldd	r27, Z+17	; 0x11
   18d72:	69 01       	movw	r12, r18
   18d74:	c0 94       	com	r12
   18d76:	d0 94       	com	r13
   18d78:	cd 01       	movw	r24, r26
   18d7a:	86 1b       	sub	r24, r22
   18d7c:	97 0b       	sbc	r25, r23
   18d7e:	01 97       	sbiw	r24, 0x01	; 1
   18d80:	fa 01       	movw	r30, r20
   18d82:	98 01       	movw	r18, r16
   18d84:	8c 01       	movw	r16, r24
   18d86:	ba 01       	movw	r22, r20
   18d88:	a6 01       	movw	r20, r12
   18d8a:	4a 0f       	add	r20, r26
   18d8c:	5b 1f       	adc	r21, r27
   18d8e:	e1 cc       	rjmp	.-1598   	; 0x18752 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x8a>
   18d90:	ca 01       	movw	r24, r20
   18d92:	fb 01       	movw	r30, r22
   18d94:	de cc       	rjmp	.-1604   	; 0x18752 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x8a>
   18d96:	01 97       	sbiw	r24, 0x01	; 1
   18d98:	09 f0       	breq	.+2      	; 0x18d9c <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6d4>
   18d9a:	e5 c1       	rjmp	.+970    	; 0x19166 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0xa9e>
   18d9c:	d0 96       	adiw	r26, 0x30	; 48
   18d9e:	ed 91       	ld	r30, X+
   18da0:	fc 91       	ld	r31, X
   18da2:	d1 97       	sbiw	r26, 0x31	; 49
   18da4:	80 81       	ld	r24, Z
   18da6:	db 96       	adiw	r26, 0x3b	; 59
   18da8:	9c 91       	ld	r25, X
   18daa:	db 97       	sbiw	r26, 0x3b	; 59
   18dac:	89 23       	and	r24, r25
   18dae:	80 83       	st	Z, r24
   18db0:	82 e0       	ldi	r24, 0x02	; 2
   18db2:	82 b9       	out	0x02, r24	; 2
   18db4:	d2 96       	adiw	r26, 0x32	; 50
   18db6:	ed 91       	ld	r30, X+
   18db8:	fc 91       	ld	r31, X
   18dba:	d3 97       	sbiw	r26, 0x33	; 51
   18dbc:	80 81       	ld	r24, Z
   18dbe:	dc 96       	adiw	r26, 0x3c	; 60
   18dc0:	9c 91       	ld	r25, X
   18dc2:	dc 97       	sbiw	r26, 0x3c	; 60
   18dc4:	89 23       	and	r24, r25
   18dc6:	80 83       	st	Z, r24
   18dc8:	d2 96       	adiw	r26, 0x32	; 50
   18dca:	ed 91       	ld	r30, X+
   18dcc:	fc 91       	ld	r31, X
   18dce:	d3 97       	sbiw	r26, 0x33	; 51
   18dd0:	80 81       	ld	r24, Z
   18dd2:	d8 96       	adiw	r26, 0x38	; 56
   18dd4:	9c 91       	ld	r25, X
   18dd6:	d8 97       	sbiw	r26, 0x38	; 56
   18dd8:	89 2b       	or	r24, r25
   18dda:	80 83       	st	Z, r24
   18ddc:	d0 96       	adiw	r26, 0x30	; 48
   18dde:	ed 91       	ld	r30, X+
   18de0:	fc 91       	ld	r31, X
   18de2:	d1 97       	sbiw	r26, 0x31	; 49
   18de4:	80 81       	ld	r24, Z
   18de6:	d7 96       	adiw	r26, 0x37	; 55
   18de8:	9c 91       	ld	r25, X
   18dea:	d7 97       	sbiw	r26, 0x37	; 55
   18dec:	89 2b       	or	r24, r25
   18dee:	80 83       	st	Z, r24
   18df0:	72 b9       	out	0x02, r23	; 2
   18df2:	d2 96       	adiw	r26, 0x32	; 50
   18df4:	ed 91       	ld	r30, X+
   18df6:	fc 91       	ld	r31, X
   18df8:	d3 97       	sbiw	r26, 0x33	; 51
   18dfa:	80 81       	ld	r24, Z
   18dfc:	dc 96       	adiw	r26, 0x3c	; 60
   18dfe:	9c 91       	ld	r25, X
   18e00:	dc 97       	sbiw	r26, 0x3c	; 60
   18e02:	89 23       	and	r24, r25
   18e04:	80 83       	st	Z, r24
   18e06:	d2 96       	adiw	r26, 0x32	; 50
   18e08:	ed 91       	ld	r30, X+
   18e0a:	fc 91       	ld	r31, X
   18e0c:	d3 97       	sbiw	r26, 0x33	; 51
   18e0e:	80 81       	ld	r24, Z
   18e10:	d8 96       	adiw	r26, 0x38	; 56
   18e12:	9c 91       	ld	r25, X
   18e14:	d8 97       	sbiw	r26, 0x38	; 56
   18e16:	89 2b       	or	r24, r25
   18e18:	80 83       	st	Z, r24
   18e1a:	d0 96       	adiw	r26, 0x30	; 48
   18e1c:	ed 91       	ld	r30, X+
   18e1e:	fc 91       	ld	r31, X
   18e20:	d1 97       	sbiw	r26, 0x31	; 49
   18e22:	80 81       	ld	r24, Z
   18e24:	db 96       	adiw	r26, 0x3b	; 59
   18e26:	9c 91       	ld	r25, X
   18e28:	db 97       	sbiw	r26, 0x3b	; 59
   18e2a:	89 23       	and	r24, r25
   18e2c:	80 83       	st	Z, r24
   18e2e:	83 e0       	ldi	r24, 0x03	; 3
   18e30:	82 b9       	out	0x02, r24	; 2
   18e32:	d2 96       	adiw	r26, 0x32	; 50
   18e34:	ed 91       	ld	r30, X+
   18e36:	fc 91       	ld	r31, X
   18e38:	d3 97       	sbiw	r26, 0x33	; 51
   18e3a:	80 81       	ld	r24, Z
   18e3c:	dc 96       	adiw	r26, 0x3c	; 60
   18e3e:	9c 91       	ld	r25, X
   18e40:	dc 97       	sbiw	r26, 0x3c	; 60
   18e42:	89 23       	and	r24, r25
   18e44:	80 83       	st	Z, r24
   18e46:	d2 96       	adiw	r26, 0x32	; 50
   18e48:	ed 91       	ld	r30, X+
   18e4a:	fc 91       	ld	r31, X
   18e4c:	d3 97       	sbiw	r26, 0x33	; 51
   18e4e:	80 81       	ld	r24, Z
   18e50:	d8 96       	adiw	r26, 0x38	; 56
   18e52:	9c 91       	ld	r25, X
   18e54:	d8 97       	sbiw	r26, 0x38	; 56
   18e56:	89 2b       	or	r24, r25
   18e58:	80 83       	st	Z, r24
   18e5a:	d0 96       	adiw	r26, 0x30	; 48
   18e5c:	ed 91       	ld	r30, X+
   18e5e:	fc 91       	ld	r31, X
   18e60:	d1 97       	sbiw	r26, 0x31	; 49
   18e62:	80 81       	ld	r24, Z
   18e64:	d7 96       	adiw	r26, 0x37	; 55
   18e66:	9c 91       	ld	r25, X
   18e68:	d7 97       	sbiw	r26, 0x37	; 55
   18e6a:	89 2b       	or	r24, r25
   18e6c:	80 83       	st	Z, r24
   18e6e:	62 b9       	out	0x02, r22	; 2
   18e70:	d2 96       	adiw	r26, 0x32	; 50
   18e72:	ed 91       	ld	r30, X+
   18e74:	fc 91       	ld	r31, X
   18e76:	d3 97       	sbiw	r26, 0x33	; 51
   18e78:	80 81       	ld	r24, Z
   18e7a:	dc 96       	adiw	r26, 0x3c	; 60
   18e7c:	9c 91       	ld	r25, X
   18e7e:	dc 97       	sbiw	r26, 0x3c	; 60
   18e80:	89 23       	and	r24, r25
   18e82:	80 83       	st	Z, r24
   18e84:	d2 96       	adiw	r26, 0x32	; 50
   18e86:	ed 91       	ld	r30, X+
   18e88:	fc 91       	ld	r31, X
   18e8a:	d3 97       	sbiw	r26, 0x33	; 51
   18e8c:	80 81       	ld	r24, Z
   18e8e:	d8 96       	adiw	r26, 0x38	; 56
   18e90:	9c 91       	ld	r25, X
   18e92:	d8 97       	sbiw	r26, 0x38	; 56
   18e94:	89 2b       	or	r24, r25
   18e96:	80 83       	st	Z, r24
   18e98:	d0 96       	adiw	r26, 0x30	; 48
   18e9a:	ed 91       	ld	r30, X+
   18e9c:	fc 91       	ld	r31, X
   18e9e:	d1 97       	sbiw	r26, 0x31	; 49
   18ea0:	80 81       	ld	r24, Z
   18ea2:	db 96       	adiw	r26, 0x3b	; 59
   18ea4:	9c 91       	ld	r25, X
   18ea6:	db 97       	sbiw	r26, 0x3b	; 59
   18ea8:	89 23       	and	r24, r25
   18eaa:	80 83       	st	Z, r24
   18eac:	86 e0       	ldi	r24, 0x06	; 6
   18eae:	82 b9       	out	0x02, r24	; 2
   18eb0:	d2 96       	adiw	r26, 0x32	; 50
   18eb2:	ed 91       	ld	r30, X+
   18eb4:	fc 91       	ld	r31, X
   18eb6:	d3 97       	sbiw	r26, 0x33	; 51
   18eb8:	80 81       	ld	r24, Z
   18eba:	dc 96       	adiw	r26, 0x3c	; 60
   18ebc:	9c 91       	ld	r25, X
   18ebe:	dc 97       	sbiw	r26, 0x3c	; 60
   18ec0:	89 23       	and	r24, r25
   18ec2:	80 83       	st	Z, r24
   18ec4:	d2 96       	adiw	r26, 0x32	; 50
   18ec6:	ed 91       	ld	r30, X+
   18ec8:	fc 91       	ld	r31, X
   18eca:	d3 97       	sbiw	r26, 0x33	; 51
   18ecc:	80 81       	ld	r24, Z
   18ece:	d8 96       	adiw	r26, 0x38	; 56
   18ed0:	9c 91       	ld	r25, X
   18ed2:	d8 97       	sbiw	r26, 0x38	; 56
   18ed4:	89 2b       	or	r24, r25
   18ed6:	80 83       	st	Z, r24
   18ed8:	d0 96       	adiw	r26, 0x30	; 48
   18eda:	ed 91       	ld	r30, X+
   18edc:	fc 91       	ld	r31, X
   18ede:	d1 97       	sbiw	r26, 0x31	; 49
   18ee0:	80 81       	ld	r24, Z
   18ee2:	d7 96       	adiw	r26, 0x37	; 55
   18ee4:	9c 91       	ld	r25, X
   18ee6:	d7 97       	sbiw	r26, 0x37	; 55
   18ee8:	89 2b       	or	r24, r25
   18eea:	80 83       	st	Z, r24
   18eec:	52 b9       	out	0x02, r21	; 2
   18eee:	d2 96       	adiw	r26, 0x32	; 50
   18ef0:	ed 91       	ld	r30, X+
   18ef2:	fc 91       	ld	r31, X
   18ef4:	d3 97       	sbiw	r26, 0x33	; 51
   18ef6:	80 81       	ld	r24, Z
   18ef8:	dc 96       	adiw	r26, 0x3c	; 60
   18efa:	9c 91       	ld	r25, X
   18efc:	dc 97       	sbiw	r26, 0x3c	; 60
   18efe:	89 23       	and	r24, r25
   18f00:	80 83       	st	Z, r24
   18f02:	d2 96       	adiw	r26, 0x32	; 50
   18f04:	ed 91       	ld	r30, X+
   18f06:	fc 91       	ld	r31, X
   18f08:	d3 97       	sbiw	r26, 0x33	; 51
   18f0a:	80 81       	ld	r24, Z
   18f0c:	d8 96       	adiw	r26, 0x38	; 56
   18f0e:	9c 91       	ld	r25, X
   18f10:	d8 97       	sbiw	r26, 0x38	; 56
   18f12:	89 2b       	or	r24, r25
   18f14:	80 83       	st	Z, r24
   18f16:	d0 96       	adiw	r26, 0x30	; 48
   18f18:	ed 91       	ld	r30, X+
   18f1a:	fc 91       	ld	r31, X
   18f1c:	d1 97       	sbiw	r26, 0x31	; 49
   18f1e:	80 81       	ld	r24, Z
   18f20:	db 96       	adiw	r26, 0x3b	; 59
   18f22:	9c 91       	ld	r25, X
   18f24:	db 97       	sbiw	r26, 0x3b	; 59
   18f26:	89 23       	and	r24, r25
   18f28:	80 83       	st	Z, r24
   18f2a:	87 e0       	ldi	r24, 0x07	; 7
   18f2c:	82 b9       	out	0x02, r24	; 2
   18f2e:	d2 96       	adiw	r26, 0x32	; 50
   18f30:	ed 91       	ld	r30, X+
   18f32:	fc 91       	ld	r31, X
   18f34:	d3 97       	sbiw	r26, 0x33	; 51
   18f36:	80 81       	ld	r24, Z
   18f38:	dc 96       	adiw	r26, 0x3c	; 60
   18f3a:	9c 91       	ld	r25, X
   18f3c:	dc 97       	sbiw	r26, 0x3c	; 60
   18f3e:	89 23       	and	r24, r25
   18f40:	80 83       	st	Z, r24
   18f42:	d2 96       	adiw	r26, 0x32	; 50
   18f44:	ed 91       	ld	r30, X+
   18f46:	fc 91       	ld	r31, X
   18f48:	d3 97       	sbiw	r26, 0x33	; 51
   18f4a:	80 81       	ld	r24, Z
   18f4c:	d8 96       	adiw	r26, 0x38	; 56
   18f4e:	9c 91       	ld	r25, X
   18f50:	d8 97       	sbiw	r26, 0x38	; 56
   18f52:	89 2b       	or	r24, r25
   18f54:	80 83       	st	Z, r24
   18f56:	d0 96       	adiw	r26, 0x30	; 48
   18f58:	ed 91       	ld	r30, X+
   18f5a:	fc 91       	ld	r31, X
   18f5c:	d1 97       	sbiw	r26, 0x31	; 49
   18f5e:	80 81       	ld	r24, Z
   18f60:	d7 96       	adiw	r26, 0x37	; 55
   18f62:	9c 91       	ld	r25, X
   18f64:	d7 97       	sbiw	r26, 0x37	; 55
   18f66:	89 2b       	or	r24, r25
   18f68:	80 83       	st	Z, r24
   18f6a:	42 b9       	out	0x02, r20	; 2
   18f6c:	d2 96       	adiw	r26, 0x32	; 50
   18f6e:	ed 91       	ld	r30, X+
   18f70:	fc 91       	ld	r31, X
   18f72:	d3 97       	sbiw	r26, 0x33	; 51
   18f74:	80 81       	ld	r24, Z
   18f76:	dc 96       	adiw	r26, 0x3c	; 60
   18f78:	9c 91       	ld	r25, X
   18f7a:	dc 97       	sbiw	r26, 0x3c	; 60
   18f7c:	89 23       	and	r24, r25
   18f7e:	80 83       	st	Z, r24
   18f80:	d2 96       	adiw	r26, 0x32	; 50
   18f82:	ed 91       	ld	r30, X+
   18f84:	fc 91       	ld	r31, X
   18f86:	d3 97       	sbiw	r26, 0x33	; 51
   18f88:	80 81       	ld	r24, Z
   18f8a:	d8 96       	adiw	r26, 0x38	; 56
   18f8c:	9c 91       	ld	r25, X
   18f8e:	d8 97       	sbiw	r26, 0x38	; 56
   18f90:	89 2b       	or	r24, r25
   18f92:	80 83       	st	Z, r24
   18f94:	d0 96       	adiw	r26, 0x30	; 48
   18f96:	ed 91       	ld	r30, X+
   18f98:	fc 91       	ld	r31, X
   18f9a:	d1 97       	sbiw	r26, 0x31	; 49
   18f9c:	80 81       	ld	r24, Z
   18f9e:	db 96       	adiw	r26, 0x3b	; 59
   18fa0:	9c 91       	ld	r25, X
   18fa2:	db 97       	sbiw	r26, 0x3b	; 59
   18fa4:	89 23       	and	r24, r25
   18fa6:	80 83       	st	Z, r24
   18fa8:	84 e0       	ldi	r24, 0x04	; 4
   18faa:	82 b9       	out	0x02, r24	; 2
   18fac:	d2 96       	adiw	r26, 0x32	; 50
   18fae:	ed 91       	ld	r30, X+
   18fb0:	fc 91       	ld	r31, X
   18fb2:	d3 97       	sbiw	r26, 0x33	; 51
   18fb4:	80 81       	ld	r24, Z
   18fb6:	dc 96       	adiw	r26, 0x3c	; 60
   18fb8:	9c 91       	ld	r25, X
   18fba:	dc 97       	sbiw	r26, 0x3c	; 60
   18fbc:	89 23       	and	r24, r25
   18fbe:	80 83       	st	Z, r24
   18fc0:	d2 96       	adiw	r26, 0x32	; 50
   18fc2:	ed 91       	ld	r30, X+
   18fc4:	fc 91       	ld	r31, X
   18fc6:	d3 97       	sbiw	r26, 0x33	; 51
   18fc8:	80 81       	ld	r24, Z
   18fca:	d8 96       	adiw	r26, 0x38	; 56
   18fcc:	9c 91       	ld	r25, X
   18fce:	d8 97       	sbiw	r26, 0x38	; 56
   18fd0:	89 2b       	or	r24, r25
   18fd2:	80 83       	st	Z, r24
   18fd4:	d0 96       	adiw	r26, 0x30	; 48
   18fd6:	ed 91       	ld	r30, X+
   18fd8:	fc 91       	ld	r31, X
   18fda:	d1 97       	sbiw	r26, 0x31	; 49
   18fdc:	80 81       	ld	r24, Z
   18fde:	d7 96       	adiw	r26, 0x37	; 55
   18fe0:	9c 91       	ld	r25, X
   18fe2:	d7 97       	sbiw	r26, 0x37	; 55
   18fe4:	89 2b       	or	r24, r25
   18fe6:	80 83       	st	Z, r24
   18fe8:	32 b9       	out	0x02, r19	; 2
   18fea:	d2 96       	adiw	r26, 0x32	; 50
   18fec:	ed 91       	ld	r30, X+
   18fee:	fc 91       	ld	r31, X
   18ff0:	d3 97       	sbiw	r26, 0x33	; 51
   18ff2:	80 81       	ld	r24, Z
   18ff4:	dc 96       	adiw	r26, 0x3c	; 60
   18ff6:	9c 91       	ld	r25, X
   18ff8:	dc 97       	sbiw	r26, 0x3c	; 60
   18ffa:	89 23       	and	r24, r25
   18ffc:	80 83       	st	Z, r24
   18ffe:	d2 96       	adiw	r26, 0x32	; 50
   19000:	ed 91       	ld	r30, X+
   19002:	fc 91       	ld	r31, X
   19004:	d3 97       	sbiw	r26, 0x33	; 51
   19006:	80 81       	ld	r24, Z
   19008:	d8 96       	adiw	r26, 0x38	; 56
   1900a:	9c 91       	ld	r25, X
   1900c:	d8 97       	sbiw	r26, 0x38	; 56
   1900e:	89 2b       	or	r24, r25
   19010:	80 83       	st	Z, r24
   19012:	d0 96       	adiw	r26, 0x30	; 48
   19014:	ed 91       	ld	r30, X+
   19016:	fc 91       	ld	r31, X
   19018:	d1 97       	sbiw	r26, 0x31	; 49
   1901a:	80 81       	ld	r24, Z
   1901c:	db 96       	adiw	r26, 0x3b	; 59
   1901e:	9c 91       	ld	r25, X
   19020:	db 97       	sbiw	r26, 0x3b	; 59
   19022:	89 23       	and	r24, r25
   19024:	80 83       	st	Z, r24
   19026:	85 e0       	ldi	r24, 0x05	; 5
   19028:	82 b9       	out	0x02, r24	; 2
   1902a:	d2 96       	adiw	r26, 0x32	; 50
   1902c:	ed 91       	ld	r30, X+
   1902e:	fc 91       	ld	r31, X
   19030:	d3 97       	sbiw	r26, 0x33	; 51
   19032:	80 81       	ld	r24, Z
   19034:	dc 96       	adiw	r26, 0x3c	; 60
   19036:	9c 91       	ld	r25, X
   19038:	dc 97       	sbiw	r26, 0x3c	; 60
   1903a:	89 23       	and	r24, r25
   1903c:	80 83       	st	Z, r24
   1903e:	d2 96       	adiw	r26, 0x32	; 50
   19040:	ed 91       	ld	r30, X+
   19042:	fc 91       	ld	r31, X
   19044:	d3 97       	sbiw	r26, 0x33	; 51
   19046:	80 81       	ld	r24, Z
   19048:	d8 96       	adiw	r26, 0x38	; 56
   1904a:	9c 91       	ld	r25, X
   1904c:	d8 97       	sbiw	r26, 0x38	; 56
   1904e:	89 2b       	or	r24, r25
   19050:	80 83       	st	Z, r24
   19052:	d0 96       	adiw	r26, 0x30	; 48
   19054:	ed 91       	ld	r30, X+
   19056:	fc 91       	ld	r31, X
   19058:	d1 97       	sbiw	r26, 0x31	; 49
   1905a:	80 81       	ld	r24, Z
   1905c:	d7 96       	adiw	r26, 0x37	; 55
   1905e:	9c 91       	ld	r25, X
   19060:	d7 97       	sbiw	r26, 0x37	; 55
   19062:	89 2b       	or	r24, r25
   19064:	80 83       	st	Z, r24
   19066:	22 b9       	out	0x02, r18	; 2
   19068:	d2 96       	adiw	r26, 0x32	; 50
   1906a:	ed 91       	ld	r30, X+
   1906c:	fc 91       	ld	r31, X
   1906e:	d3 97       	sbiw	r26, 0x33	; 51
   19070:	80 81       	ld	r24, Z
   19072:	dc 96       	adiw	r26, 0x3c	; 60
   19074:	9c 91       	ld	r25, X
   19076:	dc 97       	sbiw	r26, 0x3c	; 60
   19078:	89 23       	and	r24, r25
   1907a:	80 83       	st	Z, r24
   1907c:	d2 96       	adiw	r26, 0x32	; 50
   1907e:	ed 91       	ld	r30, X+
   19080:	fc 91       	ld	r31, X
   19082:	d3 97       	sbiw	r26, 0x33	; 51
   19084:	80 81       	ld	r24, Z
   19086:	d8 96       	adiw	r26, 0x38	; 56
   19088:	9c 91       	ld	r25, X
   1908a:	d8 97       	sbiw	r26, 0x38	; 56
   1908c:	89 2b       	or	r24, r25
   1908e:	80 83       	st	Z, r24
   19090:	d0 96       	adiw	r26, 0x30	; 48
   19092:	ed 91       	ld	r30, X+
   19094:	fc 91       	ld	r31, X
   19096:	d1 97       	sbiw	r26, 0x31	; 49
   19098:	80 81       	ld	r24, Z
   1909a:	db 96       	adiw	r26, 0x3b	; 59
   1909c:	9c 91       	ld	r25, X
   1909e:	db 97       	sbiw	r26, 0x3b	; 59
   190a0:	89 23       	and	r24, r25
   190a2:	80 83       	st	Z, r24
   190a4:	88 e0       	ldi	r24, 0x08	; 8
   190a6:	82 b9       	out	0x02, r24	; 2
   190a8:	d2 96       	adiw	r26, 0x32	; 50
   190aa:	ed 91       	ld	r30, X+
   190ac:	fc 91       	ld	r31, X
   190ae:	d3 97       	sbiw	r26, 0x33	; 51
   190b0:	80 81       	ld	r24, Z
   190b2:	dc 96       	adiw	r26, 0x3c	; 60
   190b4:	9c 91       	ld	r25, X
   190b6:	dc 97       	sbiw	r26, 0x3c	; 60
   190b8:	89 23       	and	r24, r25
   190ba:	80 83       	st	Z, r24
   190bc:	d2 96       	adiw	r26, 0x32	; 50
   190be:	ed 91       	ld	r30, X+
   190c0:	fc 91       	ld	r31, X
   190c2:	d3 97       	sbiw	r26, 0x33	; 51
   190c4:	80 81       	ld	r24, Z
   190c6:	d8 96       	adiw	r26, 0x38	; 56
   190c8:	9c 91       	ld	r25, X
   190ca:	d8 97       	sbiw	r26, 0x38	; 56
   190cc:	89 2b       	or	r24, r25
   190ce:	80 83       	st	Z, r24
   190d0:	d0 96       	adiw	r26, 0x30	; 48
   190d2:	ed 91       	ld	r30, X+
   190d4:	fc 91       	ld	r31, X
   190d6:	d1 97       	sbiw	r26, 0x31	; 49
   190d8:	80 81       	ld	r24, Z
   190da:	d7 96       	adiw	r26, 0x37	; 55
   190dc:	9c 91       	ld	r25, X
   190de:	d7 97       	sbiw	r26, 0x37	; 55
   190e0:	89 2b       	or	r24, r25
   190e2:	80 83       	st	Z, r24
   190e4:	12 b9       	out	0x02, r17	; 2
   190e6:	d2 96       	adiw	r26, 0x32	; 50
   190e8:	ed 91       	ld	r30, X+
   190ea:	fc 91       	ld	r31, X
   190ec:	d3 97       	sbiw	r26, 0x33	; 51
   190ee:	80 81       	ld	r24, Z
   190f0:	dc 96       	adiw	r26, 0x3c	; 60
   190f2:	9c 91       	ld	r25, X
   190f4:	dc 97       	sbiw	r26, 0x3c	; 60
   190f6:	89 23       	and	r24, r25
   190f8:	80 83       	st	Z, r24
   190fa:	d2 96       	adiw	r26, 0x32	; 50
   190fc:	ed 91       	ld	r30, X+
   190fe:	fc 91       	ld	r31, X
   19100:	d3 97       	sbiw	r26, 0x33	; 51
   19102:	80 81       	ld	r24, Z
   19104:	d8 96       	adiw	r26, 0x38	; 56
   19106:	9c 91       	ld	r25, X
   19108:	d8 97       	sbiw	r26, 0x38	; 56
   1910a:	89 2b       	or	r24, r25
   1910c:	80 83       	st	Z, r24
   1910e:	d0 96       	adiw	r26, 0x30	; 48
   19110:	ed 91       	ld	r30, X+
   19112:	fc 91       	ld	r31, X
   19114:	d1 97       	sbiw	r26, 0x31	; 49
   19116:	80 81       	ld	r24, Z
   19118:	db 96       	adiw	r26, 0x3b	; 59
   1911a:	9c 91       	ld	r25, X
   1911c:	db 97       	sbiw	r26, 0x3b	; 59
   1911e:	89 23       	and	r24, r25
   19120:	80 83       	st	Z, r24
   19122:	89 e0       	ldi	r24, 0x09	; 9
   19124:	82 b9       	out	0x02, r24	; 2
   19126:	d2 96       	adiw	r26, 0x32	; 50
   19128:	ed 91       	ld	r30, X+
   1912a:	fc 91       	ld	r31, X
   1912c:	d3 97       	sbiw	r26, 0x33	; 51
   1912e:	80 81       	ld	r24, Z
   19130:	dc 96       	adiw	r26, 0x3c	; 60
   19132:	9c 91       	ld	r25, X
   19134:	dc 97       	sbiw	r26, 0x3c	; 60
   19136:	89 23       	and	r24, r25
   19138:	80 83       	st	Z, r24
   1913a:	d2 96       	adiw	r26, 0x32	; 50
   1913c:	ed 91       	ld	r30, X+
   1913e:	fc 91       	ld	r31, X
   19140:	d3 97       	sbiw	r26, 0x33	; 51
   19142:	80 81       	ld	r24, Z
   19144:	d8 96       	adiw	r26, 0x38	; 56
   19146:	9c 91       	ld	r25, X
   19148:	d8 97       	sbiw	r26, 0x38	; 56
   1914a:	89 2b       	or	r24, r25
   1914c:	80 83       	st	Z, r24
   1914e:	d0 96       	adiw	r26, 0x30	; 48
   19150:	ed 91       	ld	r30, X+
   19152:	fc 91       	ld	r31, X
   19154:	d1 97       	sbiw	r26, 0x31	; 49
   19156:	80 81       	ld	r24, Z
   19158:	d7 96       	adiw	r26, 0x37	; 55
   1915a:	9c 91       	ld	r25, X
   1915c:	d7 97       	sbiw	r26, 0x37	; 55
   1915e:	89 2b       	or	r24, r25
   19160:	80 83       	st	Z, r24
   19162:	02 b9       	out	0x02, r16	; 2
   19164:	b9 cd       	rjmp	.-1166   	; 0x18cd8 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x610>
   19166:	7d 83       	std	Y+5, r23	; 0x05
   19168:	6e 83       	std	Y+6, r22	; 0x06
   1916a:	3f 83       	std	Y+7, r19	; 0x07
   1916c:	28 87       	std	Y+8, r18	; 0x08
   1916e:	59 83       	std	Y+1, r21	; 0x01
   19170:	4a 83       	std	Y+2, r20	; 0x02
   19172:	1b 83       	std	Y+3, r17	; 0x03
   19174:	0c 83       	std	Y+4, r16	; 0x04
   19176:	f7 01       	movw	r30, r14
   19178:	64 8d       	ldd	r22, Z+28	; 0x1c
   1917a:	75 8d       	ldd	r23, Z+29	; 0x1d
   1917c:	24 e0       	ldi	r18, 0x04	; 4
   1917e:	ae 01       	movw	r20, r28
   19180:	4b 5f       	subi	r20, 0xFB	; 251
   19182:	5f 4f       	sbci	r21, 0xFF	; 255
   19184:	c7 01       	movw	r24, r14
   19186:	0e 94 e7 c2 	call	0x185ce	; 0x185ce <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   1918a:	d7 01       	movw	r26, r14
   1918c:	5e 96       	adiw	r26, 0x1e	; 30
   1918e:	6d 91       	ld	r22, X+
   19190:	7c 91       	ld	r23, X
   19192:	24 e0       	ldi	r18, 0x04	; 4
   19194:	ae 01       	movw	r20, r28
   19196:	4f 5f       	subi	r20, 0xFF	; 255
   19198:	5f 4f       	sbci	r21, 0xFF	; 255
   1919a:	c7 01       	movw	r24, r14
   1919c:	0e 94 e7 c2 	call	0x185ce	; 0x185ce <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   191a0:	ae cd       	rjmp	.-1188   	; 0x18cfe <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x636>

000191a2 <LCDWIKI_KBV::Set_LR()>:
_ZN11LCDWIKI_KBV6Set_LREv():
   191a2:	fc 01       	movw	r30, r24
   191a4:	a6 a5       	ldd	r26, Z+46	; 0x2e
   191a6:	b7 a5       	ldd	r27, Z+47	; 0x2f
   191a8:	8c 91       	ld	r24, X
   191aa:	92 ad       	ldd	r25, Z+58	; 0x3a
   191ac:	89 23       	and	r24, r25
   191ae:	8c 93       	st	X, r24
   191b0:	a0 a9       	ldd	r26, Z+48	; 0x30
   191b2:	b1 a9       	ldd	r27, Z+49	; 0x31
   191b4:	8c 91       	ld	r24, X
   191b6:	93 ad       	ldd	r25, Z+59	; 0x3b
   191b8:	89 23       	and	r24, r25
   191ba:	8c 93       	st	X, r24
   191bc:	84 e0       	ldi	r24, 0x04	; 4
   191be:	82 b9       	out	0x02, r24	; 2
   191c0:	a2 a9       	ldd	r26, Z+50	; 0x32
   191c2:	b3 a9       	ldd	r27, Z+51	; 0x33
   191c4:	8c 91       	ld	r24, X
   191c6:	94 ad       	ldd	r25, Z+60	; 0x3c
   191c8:	89 23       	and	r24, r25
   191ca:	8c 93       	st	X, r24
   191cc:	a2 a9       	ldd	r26, Z+50	; 0x32
   191ce:	b3 a9       	ldd	r27, Z+51	; 0x33
   191d0:	8c 91       	ld	r24, X
   191d2:	90 ad       	ldd	r25, Z+56	; 0x38
   191d4:	89 2b       	or	r24, r25
   191d6:	8c 93       	st	X, r24
   191d8:	a0 a9       	ldd	r26, Z+48	; 0x30
   191da:	b1 a9       	ldd	r27, Z+49	; 0x31
   191dc:	8c 91       	ld	r24, X
   191de:	97 a9       	ldd	r25, Z+55	; 0x37
   191e0:	89 2b       	or	r24, r25
   191e2:	8c 93       	st	X, r24
   191e4:	82 89       	ldd	r24, Z+18	; 0x12
   191e6:	93 89       	ldd	r25, Z+19	; 0x13
   191e8:	01 97       	sbiw	r24, 0x01	; 1
   191ea:	92 b9       	out	0x02, r25	; 2
   191ec:	a2 a9       	ldd	r26, Z+50	; 0x32
   191ee:	b3 a9       	ldd	r27, Z+51	; 0x33
   191f0:	8c 91       	ld	r24, X
   191f2:	94 ad       	ldd	r25, Z+60	; 0x3c
   191f4:	89 23       	and	r24, r25
   191f6:	8c 93       	st	X, r24
   191f8:	a2 a9       	ldd	r26, Z+50	; 0x32
   191fa:	b3 a9       	ldd	r27, Z+51	; 0x33
   191fc:	8c 91       	ld	r24, X
   191fe:	90 ad       	ldd	r25, Z+56	; 0x38
   19200:	89 2b       	or	r24, r25
   19202:	8c 93       	st	X, r24
   19204:	a0 a9       	ldd	r26, Z+48	; 0x30
   19206:	b1 a9       	ldd	r27, Z+49	; 0x31
   19208:	8c 91       	ld	r24, X
   1920a:	93 ad       	ldd	r25, Z+59	; 0x3b
   1920c:	89 23       	and	r24, r25
   1920e:	8c 93       	st	X, r24
   19210:	85 e0       	ldi	r24, 0x05	; 5
   19212:	82 b9       	out	0x02, r24	; 2
   19214:	a2 a9       	ldd	r26, Z+50	; 0x32
   19216:	b3 a9       	ldd	r27, Z+51	; 0x33
   19218:	8c 91       	ld	r24, X
   1921a:	94 ad       	ldd	r25, Z+60	; 0x3c
   1921c:	89 23       	and	r24, r25
   1921e:	8c 93       	st	X, r24
   19220:	a2 a9       	ldd	r26, Z+50	; 0x32
   19222:	b3 a9       	ldd	r27, Z+51	; 0x33
   19224:	8c 91       	ld	r24, X
   19226:	90 ad       	ldd	r25, Z+56	; 0x38
   19228:	89 2b       	or	r24, r25
   1922a:	8c 93       	st	X, r24
   1922c:	a0 a9       	ldd	r26, Z+48	; 0x30
   1922e:	b1 a9       	ldd	r27, Z+49	; 0x31
   19230:	8c 91       	ld	r24, X
   19232:	97 a9       	ldd	r25, Z+55	; 0x37
   19234:	89 2b       	or	r24, r25
   19236:	8c 93       	st	X, r24
   19238:	82 89       	ldd	r24, Z+18	; 0x12
   1923a:	81 50       	subi	r24, 0x01	; 1
   1923c:	82 b9       	out	0x02, r24	; 2
   1923e:	a2 a9       	ldd	r26, Z+50	; 0x32
   19240:	b3 a9       	ldd	r27, Z+51	; 0x33
   19242:	8c 91       	ld	r24, X
   19244:	94 ad       	ldd	r25, Z+60	; 0x3c
   19246:	89 23       	and	r24, r25
   19248:	8c 93       	st	X, r24
   1924a:	a2 a9       	ldd	r26, Z+50	; 0x32
   1924c:	b3 a9       	ldd	r27, Z+51	; 0x33
   1924e:	8c 91       	ld	r24, X
   19250:	90 ad       	ldd	r25, Z+56	; 0x38
   19252:	89 2b       	or	r24, r25
   19254:	8c 93       	st	X, r24
   19256:	a0 a9       	ldd	r26, Z+48	; 0x30
   19258:	b1 a9       	ldd	r27, Z+49	; 0x31
   1925a:	8c 91       	ld	r24, X
   1925c:	93 ad       	ldd	r25, Z+59	; 0x3b
   1925e:	89 23       	and	r24, r25
   19260:	8c 93       	st	X, r24
   19262:	88 e0       	ldi	r24, 0x08	; 8
   19264:	82 b9       	out	0x02, r24	; 2
   19266:	a2 a9       	ldd	r26, Z+50	; 0x32
   19268:	b3 a9       	ldd	r27, Z+51	; 0x33
   1926a:	8c 91       	ld	r24, X
   1926c:	94 ad       	ldd	r25, Z+60	; 0x3c
   1926e:	89 23       	and	r24, r25
   19270:	8c 93       	st	X, r24
   19272:	a2 a9       	ldd	r26, Z+50	; 0x32
   19274:	b3 a9       	ldd	r27, Z+51	; 0x33
   19276:	8c 91       	ld	r24, X
   19278:	90 ad       	ldd	r25, Z+56	; 0x38
   1927a:	89 2b       	or	r24, r25
   1927c:	8c 93       	st	X, r24
   1927e:	a0 a9       	ldd	r26, Z+48	; 0x30
   19280:	b1 a9       	ldd	r27, Z+49	; 0x31
   19282:	8c 91       	ld	r24, X
   19284:	97 a9       	ldd	r25, Z+55	; 0x37
   19286:	89 2b       	or	r24, r25
   19288:	8c 93       	st	X, r24
   1928a:	84 89       	ldd	r24, Z+20	; 0x14
   1928c:	95 89       	ldd	r25, Z+21	; 0x15
   1928e:	01 97       	sbiw	r24, 0x01	; 1
   19290:	92 b9       	out	0x02, r25	; 2
   19292:	a2 a9       	ldd	r26, Z+50	; 0x32
   19294:	b3 a9       	ldd	r27, Z+51	; 0x33
   19296:	8c 91       	ld	r24, X
   19298:	94 ad       	ldd	r25, Z+60	; 0x3c
   1929a:	89 23       	and	r24, r25
   1929c:	8c 93       	st	X, r24
   1929e:	a2 a9       	ldd	r26, Z+50	; 0x32
   192a0:	b3 a9       	ldd	r27, Z+51	; 0x33
   192a2:	8c 91       	ld	r24, X
   192a4:	90 ad       	ldd	r25, Z+56	; 0x38
   192a6:	89 2b       	or	r24, r25
   192a8:	8c 93       	st	X, r24
   192aa:	a0 a9       	ldd	r26, Z+48	; 0x30
   192ac:	b1 a9       	ldd	r27, Z+49	; 0x31
   192ae:	8c 91       	ld	r24, X
   192b0:	93 ad       	ldd	r25, Z+59	; 0x3b
   192b2:	89 23       	and	r24, r25
   192b4:	8c 93       	st	X, r24
   192b6:	89 e0       	ldi	r24, 0x09	; 9
   192b8:	82 b9       	out	0x02, r24	; 2
   192ba:	a2 a9       	ldd	r26, Z+50	; 0x32
   192bc:	b3 a9       	ldd	r27, Z+51	; 0x33
   192be:	8c 91       	ld	r24, X
   192c0:	94 ad       	ldd	r25, Z+60	; 0x3c
   192c2:	89 23       	and	r24, r25
   192c4:	8c 93       	st	X, r24
   192c6:	a2 a9       	ldd	r26, Z+50	; 0x32
   192c8:	b3 a9       	ldd	r27, Z+51	; 0x33
   192ca:	8c 91       	ld	r24, X
   192cc:	90 ad       	ldd	r25, Z+56	; 0x38
   192ce:	89 2b       	or	r24, r25
   192d0:	8c 93       	st	X, r24
   192d2:	a0 a9       	ldd	r26, Z+48	; 0x30
   192d4:	b1 a9       	ldd	r27, Z+49	; 0x31
   192d6:	8c 91       	ld	r24, X
   192d8:	97 a9       	ldd	r25, Z+55	; 0x37
   192da:	89 2b       	or	r24, r25
   192dc:	8c 93       	st	X, r24
   192de:	84 89       	ldd	r24, Z+20	; 0x14
   192e0:	81 50       	subi	r24, 0x01	; 1
   192e2:	82 b9       	out	0x02, r24	; 2
   192e4:	a2 a9       	ldd	r26, Z+50	; 0x32
   192e6:	b3 a9       	ldd	r27, Z+51	; 0x33
   192e8:	8c 91       	ld	r24, X
   192ea:	94 ad       	ldd	r25, Z+60	; 0x3c
   192ec:	89 23       	and	r24, r25
   192ee:	8c 93       	st	X, r24
   192f0:	a2 a9       	ldd	r26, Z+50	; 0x32
   192f2:	b3 a9       	ldd	r27, Z+51	; 0x33
   192f4:	8c 91       	ld	r24, X
   192f6:	90 ad       	ldd	r25, Z+56	; 0x38
   192f8:	89 2b       	or	r24, r25
   192fa:	8c 93       	st	X, r24
   192fc:	a6 a5       	ldd	r26, Z+46	; 0x2e
   192fe:	b7 a5       	ldd	r27, Z+47	; 0x2f
   19300:	8c 91       	ld	r24, X
   19302:	96 a9       	ldd	r25, Z+54	; 0x36
   19304:	89 2b       	or	r24, r25
   19306:	8c 93       	st	X, r24
   19308:	08 95       	ret

0001930a <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>:
_ZN11LCDWIKI_KBV9Fill_RectEiiiij():
   1930a:	4f 92       	push	r4
   1930c:	5f 92       	push	r5
   1930e:	6f 92       	push	r6
   19310:	7f 92       	push	r7
   19312:	8f 92       	push	r8
   19314:	9f 92       	push	r9
   19316:	af 92       	push	r10
   19318:	bf 92       	push	r11
   1931a:	cf 92       	push	r12
   1931c:	df 92       	push	r13
   1931e:	ef 92       	push	r14
   19320:	ff 92       	push	r15
   19322:	0f 93       	push	r16
   19324:	1f 93       	push	r17
   19326:	cf 93       	push	r28
   19328:	df 93       	push	r29
   1932a:	ec 01       	movw	r28, r24
   1932c:	5a 01       	movw	r10, r20
   1932e:	27 01       	movw	r4, r14
   19330:	37 ff       	sbrs	r19, 7
   19332:	05 c0       	rjmp	.+10     	; 0x1933e <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x34>
   19334:	62 0f       	add	r22, r18
   19336:	73 1f       	adc	r23, r19
   19338:	31 95       	neg	r19
   1933a:	21 95       	neg	r18
   1933c:	31 09       	sbc	r19, r1
   1933e:	7b 01       	movw	r14, r22
   19340:	e2 0e       	add	r14, r18
   19342:	f3 1e       	adc	r15, r19
   19344:	6b 01       	movw	r12, r22
   19346:	77 ff       	sbrs	r23, 7
   19348:	02 c0       	rjmp	.+4      	; 0x1934e <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x44>
   1934a:	d1 2c       	mov	r13, r1
   1934c:	c1 2c       	mov	r12, r1
   1934e:	e8 81       	ld	r30, Y
   19350:	f9 81       	ldd	r31, Y+1	; 0x01
   19352:	06 84       	ldd	r0, Z+14	; 0x0e
   19354:	f7 85       	ldd	r31, Z+15	; 0x0f
   19356:	e0 2d       	mov	r30, r0
   19358:	ce 01       	movw	r24, r28
   1935a:	19 95       	eicall
   1935c:	8e 15       	cp	r24, r14
   1935e:	9f 05       	cpc	r25, r15
   19360:	44 f4       	brge	.+16     	; 0x19372 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x68>
   19362:	e8 81       	ld	r30, Y
   19364:	f9 81       	ldd	r31, Y+1	; 0x01
   19366:	06 84       	ldd	r0, Z+14	; 0x0e
   19368:	f7 85       	ldd	r31, Z+15	; 0x0f
   1936a:	e0 2d       	mov	r30, r0
   1936c:	ce 01       	movw	r24, r28
   1936e:	19 95       	eicall
   19370:	7c 01       	movw	r14, r24
   19372:	47 01       	movw	r8, r14
   19374:	8c 18       	sub	r8, r12
   19376:	9d 08       	sbc	r9, r13
   19378:	17 ff       	sbrs	r17, 7
   1937a:	05 c0       	rjmp	.+10     	; 0x19386 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x7c>
   1937c:	a0 0e       	add	r10, r16
   1937e:	b1 1e       	adc	r11, r17
   19380:	11 95       	neg	r17
   19382:	01 95       	neg	r16
   19384:	11 09       	sbc	r17, r1
   19386:	0a 0d       	add	r16, r10
   19388:	1b 1d       	adc	r17, r11
   1938a:	b7 fe       	sbrs	r11, 7
   1938c:	02 c0       	rjmp	.+4      	; 0x19392 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x88>
   1938e:	b1 2c       	mov	r11, r1
   19390:	a1 2c       	mov	r10, r1
   19392:	e8 81       	ld	r30, Y
   19394:	f9 81       	ldd	r31, Y+1	; 0x01
   19396:	04 84       	ldd	r0, Z+12	; 0x0c
   19398:	f5 85       	ldd	r31, Z+13	; 0x0d
   1939a:	e0 2d       	mov	r30, r0
   1939c:	ce 01       	movw	r24, r28
   1939e:	19 95       	eicall
   193a0:	80 17       	cp	r24, r16
   193a2:	91 07       	cpc	r25, r17
   193a4:	44 f4       	brge	.+16     	; 0x193b6 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0xac>
   193a6:	e8 81       	ld	r30, Y
   193a8:	f9 81       	ldd	r31, Y+1	; 0x01
   193aa:	04 84       	ldd	r0, Z+12	; 0x0c
   193ac:	f5 85       	ldd	r31, Z+13	; 0x0d
   193ae:	e0 2d       	mov	r30, r0
   193b0:	ce 01       	movw	r24, r28
   193b2:	19 95       	eicall
   193b4:	8c 01       	movw	r16, r24
   193b6:	38 01       	movw	r6, r16
   193b8:	6a 18       	sub	r6, r10
   193ba:	7b 08       	sbc	r7, r11
   193bc:	01 50       	subi	r16, 0x01	; 1
   193be:	11 09       	sbc	r17, r1
   193c0:	97 01       	movw	r18, r14
   193c2:	21 50       	subi	r18, 0x01	; 1
   193c4:	31 09       	sbc	r19, r1
   193c6:	e8 81       	ld	r30, Y
   193c8:	f9 81       	ldd	r31, Y+1	; 0x01
   193ca:	06 80       	ldd	r0, Z+6	; 0x06
   193cc:	f7 81       	ldd	r31, Z+7	; 0x07
   193ce:	e0 2d       	mov	r30, r0
   193d0:	a5 01       	movw	r20, r10
   193d2:	b6 01       	movw	r22, r12
   193d4:	ce 01       	movw	r24, r28
   193d6:	19 95       	eicall
   193d8:	ee a5       	ldd	r30, Y+46	; 0x2e
   193da:	ff a5       	ldd	r31, Y+47	; 0x2f
   193dc:	80 81       	ld	r24, Z
   193de:	9a ad       	ldd	r25, Y+58	; 0x3a
   193e0:	89 23       	and	r24, r25
   193e2:	80 83       	st	Z, r24
   193e4:	88 8d       	ldd	r24, Y+24	; 0x18
   193e6:	99 8d       	ldd	r25, Y+25	; 0x19
   193e8:	89 2b       	or	r24, r25
   193ea:	c9 f4       	brne	.+50     	; 0x1941e <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x114>
   193ec:	e8 a9       	ldd	r30, Y+48	; 0x30
   193ee:	f9 a9       	ldd	r31, Y+49	; 0x31
   193f0:	80 81       	ld	r24, Z
   193f2:	9b ad       	ldd	r25, Y+59	; 0x3b
   193f4:	89 23       	and	r24, r25
   193f6:	80 83       	st	Z, r24
   193f8:	12 b8       	out	0x02, r1	; 2
   193fa:	ea a9       	ldd	r30, Y+50	; 0x32
   193fc:	fb a9       	ldd	r31, Y+51	; 0x33
   193fe:	80 81       	ld	r24, Z
   19400:	9c ad       	ldd	r25, Y+60	; 0x3c
   19402:	89 23       	and	r24, r25
   19404:	80 83       	st	Z, r24
   19406:	ea a9       	ldd	r30, Y+50	; 0x32
   19408:	fb a9       	ldd	r31, Y+51	; 0x33
   1940a:	80 81       	ld	r24, Z
   1940c:	98 ad       	ldd	r25, Y+56	; 0x38
   1940e:	89 2b       	or	r24, r25
   19410:	80 83       	st	Z, r24
   19412:	e8 a9       	ldd	r30, Y+48	; 0x30
   19414:	f9 a9       	ldd	r31, Y+49	; 0x31
   19416:	80 81       	ld	r24, Z
   19418:	9f a9       	ldd	r25, Y+55	; 0x37
   1941a:	89 2b       	or	r24, r25
   1941c:	80 83       	st	Z, r24
   1941e:	e8 a9       	ldd	r30, Y+48	; 0x30
   19420:	f9 a9       	ldd	r31, Y+49	; 0x31
   19422:	80 81       	ld	r24, Z
   19424:	9b ad       	ldd	r25, Y+59	; 0x3b
   19426:	89 23       	and	r24, r25
   19428:	80 83       	st	Z, r24
   1942a:	88 a1       	ldd	r24, Y+32	; 0x20
   1942c:	82 b9       	out	0x02, r24	; 2
   1942e:	ea a9       	ldd	r30, Y+50	; 0x32
   19430:	fb a9       	ldd	r31, Y+51	; 0x33
   19432:	80 81       	ld	r24, Z
   19434:	9c ad       	ldd	r25, Y+60	; 0x3c
   19436:	89 23       	and	r24, r25
   19438:	80 83       	st	Z, r24
   1943a:	ea a9       	ldd	r30, Y+50	; 0x32
   1943c:	fb a9       	ldd	r31, Y+51	; 0x33
   1943e:	80 81       	ld	r24, Z
   19440:	98 ad       	ldd	r25, Y+56	; 0x38
   19442:	89 2b       	or	r24, r25
   19444:	80 83       	st	Z, r24
   19446:	e8 a9       	ldd	r30, Y+48	; 0x30
   19448:	f9 a9       	ldd	r31, Y+49	; 0x31
   1944a:	80 81       	ld	r24, Z
   1944c:	9f a9       	ldd	r25, Y+55	; 0x37
   1944e:	89 2b       	or	r24, r25
   19450:	80 83       	st	Z, r24
   19452:	86 14       	cp	r8, r6
   19454:	97 04       	cpc	r9, r7
   19456:	2c f0       	brlt	.+10     	; 0x19462 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x158>
   19458:	96 2d       	mov	r25, r6
   1945a:	87 2d       	mov	r24, r7
   1945c:	34 01       	movw	r6, r8
   1945e:	89 2e       	mov	r8, r25
   19460:	98 2e       	mov	r9, r24
   19462:	18 14       	cp	r1, r8
   19464:	19 04       	cpc	r1, r9
   19466:	0c f5       	brge	.+66     	; 0x194aa <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1a0>
   19468:	c3 01       	movw	r24, r6
   1946a:	52 b8       	out	0x02, r5	; 2
   1946c:	ea a9       	ldd	r30, Y+50	; 0x32
   1946e:	fb a9       	ldd	r31, Y+51	; 0x33
   19470:	20 81       	ld	r18, Z
   19472:	3c ad       	ldd	r19, Y+60	; 0x3c
   19474:	23 23       	and	r18, r19
   19476:	20 83       	st	Z, r18
   19478:	ea a9       	ldd	r30, Y+50	; 0x32
   1947a:	fb a9       	ldd	r31, Y+51	; 0x33
   1947c:	20 81       	ld	r18, Z
   1947e:	38 ad       	ldd	r19, Y+56	; 0x38
   19480:	23 2b       	or	r18, r19
   19482:	20 83       	st	Z, r18
   19484:	42 b8       	out	0x02, r4	; 2
   19486:	ea a9       	ldd	r30, Y+50	; 0x32
   19488:	fb a9       	ldd	r31, Y+51	; 0x33
   1948a:	20 81       	ld	r18, Z
   1948c:	3c ad       	ldd	r19, Y+60	; 0x3c
   1948e:	23 23       	and	r18, r19
   19490:	20 83       	st	Z, r18
   19492:	ea a9       	ldd	r30, Y+50	; 0x32
   19494:	fb a9       	ldd	r31, Y+51	; 0x33
   19496:	20 81       	ld	r18, Z
   19498:	38 ad       	ldd	r19, Y+56	; 0x38
   1949a:	23 2b       	or	r18, r19
   1949c:	20 83       	st	Z, r18
   1949e:	01 97       	sbiw	r24, 0x01	; 1
   194a0:	21 f7       	brne	.-56     	; 0x1946a <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x160>
   194a2:	81 e0       	ldi	r24, 0x01	; 1
   194a4:	88 1a       	sub	r8, r24
   194a6:	91 08       	sbc	r9, r1
   194a8:	dc cf       	rjmp	.-72     	; 0x19462 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x158>
   194aa:	88 8d       	ldd	r24, Y+24	; 0x18
   194ac:	99 8d       	ldd	r25, Y+25	; 0x19
   194ae:	00 97       	sbiw	r24, 0x00	; 0
   194b0:	51 f5       	brne	.+84     	; 0x19506 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1fc>
   194b2:	0c 89       	ldd	r16, Y+20	; 0x14
   194b4:	1d 89       	ldd	r17, Y+21	; 0x15
   194b6:	01 50       	subi	r16, 0x01	; 1
   194b8:	11 09       	sbc	r17, r1
   194ba:	2a 89       	ldd	r18, Y+18	; 0x12
   194bc:	3b 89       	ldd	r19, Y+19	; 0x13
   194be:	21 50       	subi	r18, 0x01	; 1
   194c0:	31 09       	sbc	r19, r1
   194c2:	e8 81       	ld	r30, Y
   194c4:	f9 81       	ldd	r31, Y+1	; 0x01
   194c6:	06 80       	ldd	r0, Z+6	; 0x06
   194c8:	f7 81       	ldd	r31, Z+7	; 0x07
   194ca:	e0 2d       	mov	r30, r0
   194cc:	50 e0       	ldi	r21, 0x00	; 0
   194ce:	40 e0       	ldi	r20, 0x00	; 0
   194d0:	70 e0       	ldi	r23, 0x00	; 0
   194d2:	60 e0       	ldi	r22, 0x00	; 0
   194d4:	ce 01       	movw	r24, r28
   194d6:	19 95       	eicall
   194d8:	ee a5       	ldd	r30, Y+46	; 0x2e
   194da:	ff a5       	ldd	r31, Y+47	; 0x2f
   194dc:	80 81       	ld	r24, Z
   194de:	9e a9       	ldd	r25, Y+54	; 0x36
   194e0:	89 2b       	or	r24, r25
   194e2:	80 83       	st	Z, r24
   194e4:	df 91       	pop	r29
   194e6:	cf 91       	pop	r28
   194e8:	1f 91       	pop	r17
   194ea:	0f 91       	pop	r16
   194ec:	ff 90       	pop	r15
   194ee:	ef 90       	pop	r14
   194f0:	df 90       	pop	r13
   194f2:	cf 90       	pop	r12
   194f4:	bf 90       	pop	r11
   194f6:	af 90       	pop	r10
   194f8:	9f 90       	pop	r9
   194fa:	8f 90       	pop	r8
   194fc:	7f 90       	pop	r7
   194fe:	6f 90       	pop	r6
   19500:	5f 90       	pop	r5
   19502:	4f 90       	pop	r4
   19504:	08 95       	ret
   19506:	01 97       	sbiw	r24, 0x01	; 1
   19508:	39 f7       	brne	.-50     	; 0x194d8 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1ce>
   1950a:	ce 01       	movw	r24, r28
   1950c:	0e 94 d1 c8 	call	0x191a2	; 0x191a2 <LCDWIKI_KBV::Set_LR()>
   19510:	e3 cf       	rjmp	.-58     	; 0x194d8 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1ce>

00019512 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char)>:
_ZN11LCDWIKI_KBV8Read_RegEja():
   19512:	1f 93       	push	r17
   19514:	cf 93       	push	r28
   19516:	df 93       	push	r29
   19518:	ec 01       	movw	r28, r24
   1951a:	14 2f       	mov	r17, r20
   1951c:	ee a5       	ldd	r30, Y+46	; 0x2e
   1951e:	ff a5       	ldd	r31, Y+47	; 0x2f
   19520:	80 81       	ld	r24, Z
   19522:	9a ad       	ldd	r25, Y+58	; 0x3a
   19524:	89 23       	and	r24, r25
   19526:	80 83       	st	Z, r24
   19528:	e8 a9       	ldd	r30, Y+48	; 0x30
   1952a:	f9 a9       	ldd	r31, Y+49	; 0x31
   1952c:	80 81       	ld	r24, Z
   1952e:	9b ad       	ldd	r25, Y+59	; 0x3b
   19530:	89 23       	and	r24, r25
   19532:	80 83       	st	Z, r24
   19534:	72 b9       	out	0x02, r23	; 2
   19536:	ea a9       	ldd	r30, Y+50	; 0x32
   19538:	fb a9       	ldd	r31, Y+51	; 0x33
   1953a:	80 81       	ld	r24, Z
   1953c:	9c ad       	ldd	r25, Y+60	; 0x3c
   1953e:	89 23       	and	r24, r25
   19540:	80 83       	st	Z, r24
   19542:	ea a9       	ldd	r30, Y+50	; 0x32
   19544:	fb a9       	ldd	r31, Y+51	; 0x33
   19546:	80 81       	ld	r24, Z
   19548:	98 ad       	ldd	r25, Y+56	; 0x38
   1954a:	89 2b       	or	r24, r25
   1954c:	80 83       	st	Z, r24
   1954e:	62 b9       	out	0x02, r22	; 2
   19550:	ea a9       	ldd	r30, Y+50	; 0x32
   19552:	fb a9       	ldd	r31, Y+51	; 0x33
   19554:	80 81       	ld	r24, Z
   19556:	9c ad       	ldd	r25, Y+60	; 0x3c
   19558:	89 23       	and	r24, r25
   1955a:	80 83       	st	Z, r24
   1955c:	ea a9       	ldd	r30, Y+50	; 0x32
   1955e:	fb a9       	ldd	r31, Y+51	; 0x33
   19560:	80 81       	ld	r24, Z
   19562:	98 ad       	ldd	r25, Y+56	; 0x38
   19564:	89 2b       	or	r24, r25
   19566:	80 83       	st	Z, r24
   19568:	e8 a9       	ldd	r30, Y+48	; 0x30
   1956a:	f9 a9       	ldd	r31, Y+49	; 0x31
   1956c:	80 81       	ld	r24, Z
   1956e:	9f a9       	ldd	r25, Y+55	; 0x37
   19570:	89 2b       	or	r24, r25
   19572:	80 83       	st	Z, r24
   19574:	81 b1       	in	r24, 0x01	; 1
   19576:	11 b8       	out	0x01, r1	; 1
   19578:	61 e0       	ldi	r22, 0x01	; 1
   1957a:	70 e0       	ldi	r23, 0x00	; 0
   1957c:	80 e0       	ldi	r24, 0x00	; 0
   1957e:	90 e0       	ldi	r25, 0x00	; 0
   19580:	0f 94 33 0f 	call	0x21e66	; 0x21e66 <delay>
   19584:	ec a9       	ldd	r30, Y+52	; 0x34
   19586:	fd a9       	ldd	r31, Y+53	; 0x35
   19588:	80 81       	ld	r24, Z
   1958a:	9d ad       	ldd	r25, Y+61	; 0x3d
   1958c:	89 23       	and	r24, r25
   1958e:	80 83       	st	Z, r24
   19590:	20 b1       	in	r18, 0x00	; 0
   19592:	ec a9       	ldd	r30, Y+52	; 0x34
   19594:	fd a9       	ldd	r31, Y+53	; 0x35
   19596:	90 81       	ld	r25, Z
   19598:	89 ad       	ldd	r24, Y+57	; 0x39
   1959a:	98 2b       	or	r25, r24
   1959c:	90 83       	st	Z, r25
   1959e:	ec a9       	ldd	r30, Y+52	; 0x34
   195a0:	fd a9       	ldd	r31, Y+53	; 0x35
   195a2:	90 81       	ld	r25, Z
   195a4:	8d ad       	ldd	r24, Y+61	; 0x3d
   195a6:	98 23       	and	r25, r24
   195a8:	90 83       	st	Z, r25
   195aa:	80 b1       	in	r24, 0x00	; 0
   195ac:	ec a9       	ldd	r30, Y+52	; 0x34
   195ae:	fd a9       	ldd	r31, Y+53	; 0x35
   195b0:	90 81       	ld	r25, Z
   195b2:	39 ad       	ldd	r19, Y+57	; 0x39
   195b4:	93 2b       	or	r25, r19
   195b6:	90 83       	st	Z, r25
   195b8:	11 50       	subi	r17, 0x01	; 1
   195ba:	17 ff       	sbrs	r17, 7
   195bc:	e3 cf       	rjmp	.-58     	; 0x19584 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char)+0x72>
   195be:	ee a5       	ldd	r30, Y+46	; 0x2e
   195c0:	ff a5       	ldd	r31, Y+47	; 0x2f
   195c2:	90 81       	ld	r25, Z
   195c4:	3e a9       	ldd	r19, Y+54	; 0x36
   195c6:	93 2b       	or	r25, r19
   195c8:	90 83       	st	Z, r25
   195ca:	91 b1       	in	r25, 0x01	; 1
   195cc:	9f ef       	ldi	r25, 0xFF	; 255
   195ce:	91 b9       	out	0x01, r25	; 1
   195d0:	92 2f       	mov	r25, r18
   195d2:	df 91       	pop	r29
   195d4:	cf 91       	pop	r28
   195d6:	1f 91       	pop	r17
   195d8:	08 95       	ret

000195da <LCDWIKI_KBV::Read_ID()>:
_ZN11LCDWIKI_KBV7Read_IDEv():
   195da:	0f 93       	push	r16
   195dc:	1f 93       	push	r17
   195de:	cf 93       	push	r28
   195e0:	df 93       	push	r29
   195e2:	00 d0       	rcall	.+0      	; 0x195e4 <LCDWIKI_KBV::Read_ID()+0xa>
   195e4:	cd b7       	in	r28, 0x3d	; 61
   195e6:	de b7       	in	r29, 0x3e	; 62
   195e8:	8c 01       	movw	r16, r24
   195ea:	40 e0       	ldi	r20, 0x00	; 0
   195ec:	64 e0       	ldi	r22, 0x04	; 4
   195ee:	70 e0       	ldi	r23, 0x00	; 0
   195f0:	0e 94 89 ca 	call	0x19512	; 0x19512 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char)>
   195f4:	89 2b       	or	r24, r25
   195f6:	39 f5       	brne	.+78     	; 0x19646 <LCDWIKI_KBV::Read_ID()+0x6c>
   195f8:	41 e0       	ldi	r20, 0x01	; 1
   195fa:	64 e0       	ldi	r22, 0x04	; 4
   195fc:	70 e0       	ldi	r23, 0x00	; 0
   195fe:	c8 01       	movw	r24, r16
   19600:	0e 94 89 ca 	call	0x19512	; 0x19512 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char)>
   19604:	81 15       	cp	r24, r1
   19606:	90 48       	sbci	r25, 0x80	; 128
   19608:	f1 f4       	brne	.+60     	; 0x19646 <LCDWIKI_KBV::Read_ID()+0x6c>
   1960a:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <LM75_Compatible_Registers+0x4>
   1960e:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <LM75_Compatible_Registers+0x5>
   19612:	a0 91 8e 02 	lds	r26, 0x028E	; 0x80028e <LM75_Compatible_Registers+0x6>
   19616:	89 83       	std	Y+1, r24	; 0x01
   19618:	9a 83       	std	Y+2, r25	; 0x02
   1961a:	ab 83       	std	Y+3, r26	; 0x03
   1961c:	23 e0       	ldi	r18, 0x03	; 3
   1961e:	ae 01       	movw	r20, r28
   19620:	4f 5f       	subi	r20, 0xFF	; 255
   19622:	5f 4f       	sbci	r21, 0xFF	; 255
   19624:	69 eb       	ldi	r22, 0xB9	; 185
   19626:	70 e0       	ldi	r23, 0x00	; 0
   19628:	c8 01       	movw	r24, r16
   1962a:	0e 94 e7 c2 	call	0x185ce	; 0x185ce <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   1962e:	40 e0       	ldi	r20, 0x00	; 0
   19630:	60 ed       	ldi	r22, 0xD0	; 208
   19632:	70 e0       	ldi	r23, 0x00	; 0
   19634:	c8 01       	movw	r24, r16
   19636:	0e 94 89 ca 	call	0x19512	; 0x19512 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char)>
   1963a:	41 e0       	ldi	r20, 0x01	; 1
   1963c:	60 ed       	ldi	r22, 0xD0	; 208
   1963e:	70 e0       	ldi	r23, 0x00	; 0
   19640:	c8 01       	movw	r24, r16
   19642:	0e 94 89 ca 	call	0x19512	; 0x19512 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char)>
   19646:	41 e0       	ldi	r20, 0x01	; 1
   19648:	63 ed       	ldi	r22, 0xD3	; 211
   1964a:	70 e0       	ldi	r23, 0x00	; 0
   1964c:	c8 01       	movw	r24, r16
   1964e:	0e 94 89 ca 	call	0x19512	; 0x19512 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char)>
   19652:	81 34       	cpi	r24, 0x41	; 65
   19654:	23 e9       	ldi	r18, 0x93	; 147
   19656:	92 07       	cpc	r25, r18
   19658:	91 f0       	breq	.+36     	; 0x1967e <LCDWIKI_KBV::Read_ID()+0xa4>
   1965a:	86 38       	cpi	r24, 0x86	; 134
   1965c:	24 e9       	ldi	r18, 0x94	; 148
   1965e:	92 07       	cpc	r25, r18
   19660:	71 f0       	breq	.+28     	; 0x1967e <LCDWIKI_KBV::Read_ID()+0xa4>
   19662:	88 38       	cpi	r24, 0x88	; 136
   19664:	24 e9       	ldi	r18, 0x94	; 148
   19666:	92 07       	cpc	r25, r18
   19668:	51 f0       	breq	.+20     	; 0x1967e <LCDWIKI_KBV::Read_ID()+0xa4>
   1966a:	86 39       	cpi	r24, 0x96	; 150
   1966c:	27 e7       	ldi	r18, 0x77	; 119
   1966e:	92 07       	cpc	r25, r18
   19670:	31 f0       	breq	.+12     	; 0x1967e <LCDWIKI_KBV::Read_ID()+0xa4>
   19672:	40 e0       	ldi	r20, 0x00	; 0
   19674:	70 e0       	ldi	r23, 0x00	; 0
   19676:	60 e0       	ldi	r22, 0x00	; 0
   19678:	c8 01       	movw	r24, r16
   1967a:	0e 94 89 ca 	call	0x19512	; 0x19512 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char)>
   1967e:	0f 90       	pop	r0
   19680:	0f 90       	pop	r0
   19682:	0f 90       	pop	r0
   19684:	df 91       	pop	r29
   19686:	cf 91       	pop	r28
   19688:	1f 91       	pop	r17
   1968a:	0f 91       	pop	r16
   1968c:	08 95       	ret

0001968e <LCDWIKI_KBV::Vert_Scroll(int, int, int)>:
_ZN11LCDWIKI_KBV11Vert_ScrollEiii():
   1968e:	cf 92       	push	r12
   19690:	df 92       	push	r13
   19692:	ef 92       	push	r14
   19694:	ff 92       	push	r15
   19696:	0f 93       	push	r16
   19698:	1f 93       	push	r17
   1969a:	cf 93       	push	r28
   1969c:	df 93       	push	r29
   1969e:	00 d0       	rcall	.+0      	; 0x196a0 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x12>
   196a0:	00 d0       	rcall	.+0      	; 0x196a2 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x14>
   196a2:	cd b7       	in	r28, 0x3d	; 61
   196a4:	de b7       	in	r29, 0x3e	; 62
   196a6:	8c 01       	movw	r16, r24
   196a8:	79 01       	movw	r14, r18
   196aa:	88 27       	eor	r24, r24
   196ac:	99 27       	eor	r25, r25
   196ae:	84 1b       	sub	r24, r20
   196b0:	95 0b       	sbc	r25, r21
   196b2:	6b 01       	movw	r12, r22
   196b4:	82 17       	cp	r24, r18
   196b6:	93 07       	cpc	r25, r19
   196b8:	0c f0       	brlt	.+2      	; 0x196bc <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x2e>
   196ba:	a3 c0       	rjmp	.+326    	; 0x19802 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x174>
   196bc:	24 17       	cp	r18, r20
   196be:	35 07       	cpc	r19, r21
   196c0:	0c f0       	brlt	.+2      	; 0x196c4 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x36>
   196c2:	9f c0       	rjmp	.+318    	; 0x19802 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x174>
   196c4:	c2 0e       	add	r12, r18
   196c6:	d3 1e       	adc	r13, r19
   196c8:	37 ff       	sbrs	r19, 7
   196ca:	02 c0       	rjmp	.+4      	; 0x196d0 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x42>
   196cc:	c4 0e       	add	r12, r20
   196ce:	d5 1e       	adc	r13, r21
   196d0:	d8 01       	movw	r26, r16
   196d2:	58 96       	adiw	r26, 0x18	; 24
   196d4:	8d 91       	ld	r24, X+
   196d6:	9c 91       	ld	r25, X
   196d8:	59 97       	sbiw	r26, 0x19	; 25
   196da:	89 2b       	or	r24, r25
   196dc:	09 f0       	breq	.+2      	; 0x196e0 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x52>
   196de:	94 c0       	rjmp	.+296    	; 0x19808 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x17a>
   196e0:	d0 96       	adiw	r26, 0x30	; 48
   196e2:	ed 91       	ld	r30, X+
   196e4:	fc 91       	ld	r31, X
   196e6:	d1 97       	sbiw	r26, 0x31	; 49
   196e8:	80 81       	ld	r24, Z
   196ea:	db 96       	adiw	r26, 0x3b	; 59
   196ec:	9c 91       	ld	r25, X
   196ee:	db 97       	sbiw	r26, 0x3b	; 59
   196f0:	89 23       	and	r24, r25
   196f2:	80 83       	st	Z, r24
   196f4:	94 96       	adiw	r26, 0x24	; 36
   196f6:	8c 91       	ld	r24, X
   196f8:	94 97       	sbiw	r26, 0x24	; 36
   196fa:	82 b9       	out	0x02, r24	; 2
   196fc:	d2 96       	adiw	r26, 0x32	; 50
   196fe:	ed 91       	ld	r30, X+
   19700:	fc 91       	ld	r31, X
   19702:	d3 97       	sbiw	r26, 0x33	; 51
   19704:	80 81       	ld	r24, Z
   19706:	dc 96       	adiw	r26, 0x3c	; 60
   19708:	9c 91       	ld	r25, X
   1970a:	dc 97       	sbiw	r26, 0x3c	; 60
   1970c:	89 23       	and	r24, r25
   1970e:	80 83       	st	Z, r24
   19710:	d2 96       	adiw	r26, 0x32	; 50
   19712:	ed 91       	ld	r30, X+
   19714:	fc 91       	ld	r31, X
   19716:	d3 97       	sbiw	r26, 0x33	; 51
   19718:	80 81       	ld	r24, Z
   1971a:	d8 96       	adiw	r26, 0x38	; 56
   1971c:	9c 91       	ld	r25, X
   1971e:	d8 97       	sbiw	r26, 0x38	; 56
   19720:	89 2b       	or	r24, r25
   19722:	80 83       	st	Z, r24
   19724:	d0 96       	adiw	r26, 0x30	; 48
   19726:	ed 91       	ld	r30, X+
   19728:	fc 91       	ld	r31, X
   1972a:	d1 97       	sbiw	r26, 0x31	; 49
   1972c:	80 81       	ld	r24, Z
   1972e:	d7 96       	adiw	r26, 0x37	; 55
   19730:	9c 91       	ld	r25, X
   19732:	d7 97       	sbiw	r26, 0x37	; 55
   19734:	89 2b       	or	r24, r25
   19736:	80 83       	st	Z, r24
   19738:	83 e0       	ldi	r24, 0x03	; 3
   1973a:	82 b9       	out	0x02, r24	; 2
   1973c:	d2 96       	adiw	r26, 0x32	; 50
   1973e:	ed 91       	ld	r30, X+
   19740:	fc 91       	ld	r31, X
   19742:	d3 97       	sbiw	r26, 0x33	; 51
   19744:	80 81       	ld	r24, Z
   19746:	dc 96       	adiw	r26, 0x3c	; 60
   19748:	9c 91       	ld	r25, X
   1974a:	dc 97       	sbiw	r26, 0x3c	; 60
   1974c:	89 23       	and	r24, r25
   1974e:	80 83       	st	Z, r24
   19750:	d2 96       	adiw	r26, 0x32	; 50
   19752:	ed 91       	ld	r30, X+
   19754:	fc 91       	ld	r31, X
   19756:	d3 97       	sbiw	r26, 0x33	; 51
   19758:	80 81       	ld	r24, Z
   1975a:	d8 96       	adiw	r26, 0x38	; 56
   1975c:	9c 91       	ld	r25, X
   1975e:	d8 97       	sbiw	r26, 0x38	; 56
   19760:	89 2b       	or	r24, r25
   19762:	80 83       	st	Z, r24
   19764:	d0 96       	adiw	r26, 0x30	; 48
   19766:	ed 91       	ld	r30, X+
   19768:	fc 91       	ld	r31, X
   1976a:	d1 97       	sbiw	r26, 0x31	; 49
   1976c:	80 81       	ld	r24, Z
   1976e:	db 96       	adiw	r26, 0x3b	; 59
   19770:	9c 91       	ld	r25, X
   19772:	db 97       	sbiw	r26, 0x3b	; 59
   19774:	89 23       	and	r24, r25
   19776:	80 83       	st	Z, r24
   19778:	96 96       	adiw	r26, 0x26	; 38
   1977a:	8c 91       	ld	r24, X
   1977c:	96 97       	sbiw	r26, 0x26	; 38
   1977e:	82 b9       	out	0x02, r24	; 2
   19780:	d2 96       	adiw	r26, 0x32	; 50
   19782:	ed 91       	ld	r30, X+
   19784:	fc 91       	ld	r31, X
   19786:	d3 97       	sbiw	r26, 0x33	; 51
   19788:	80 81       	ld	r24, Z
   1978a:	dc 96       	adiw	r26, 0x3c	; 60
   1978c:	9c 91       	ld	r25, X
   1978e:	dc 97       	sbiw	r26, 0x3c	; 60
   19790:	89 23       	and	r24, r25
   19792:	80 83       	st	Z, r24
   19794:	d2 96       	adiw	r26, 0x32	; 50
   19796:	ed 91       	ld	r30, X+
   19798:	fc 91       	ld	r31, X
   1979a:	d3 97       	sbiw	r26, 0x33	; 51
   1979c:	80 81       	ld	r24, Z
   1979e:	d8 96       	adiw	r26, 0x38	; 56
   197a0:	9c 91       	ld	r25, X
   197a2:	d8 97       	sbiw	r26, 0x38	; 56
   197a4:	89 2b       	or	r24, r25
   197a6:	80 83       	st	Z, r24
   197a8:	d0 96       	adiw	r26, 0x30	; 48
   197aa:	ed 91       	ld	r30, X+
   197ac:	fc 91       	ld	r31, X
   197ae:	d1 97       	sbiw	r26, 0x31	; 49
   197b0:	80 81       	ld	r24, Z
   197b2:	d7 96       	adiw	r26, 0x37	; 55
   197b4:	9c 91       	ld	r25, X
   197b6:	d7 97       	sbiw	r26, 0x37	; 55
   197b8:	89 2b       	or	r24, r25
   197ba:	80 83       	st	Z, r24
   197bc:	c2 b8       	out	0x02, r12	; 2
   197be:	d2 96       	adiw	r26, 0x32	; 50
   197c0:	ed 91       	ld	r30, X+
   197c2:	fc 91       	ld	r31, X
   197c4:	d3 97       	sbiw	r26, 0x33	; 51
   197c6:	80 81       	ld	r24, Z
   197c8:	dc 96       	adiw	r26, 0x3c	; 60
   197ca:	9c 91       	ld	r25, X
   197cc:	dc 97       	sbiw	r26, 0x3c	; 60
   197ce:	89 23       	and	r24, r25
   197d0:	80 83       	st	Z, r24
   197d2:	d2 96       	adiw	r26, 0x32	; 50
   197d4:	ed 91       	ld	r30, X+
   197d6:	fc 91       	ld	r31, X
   197d8:	d3 97       	sbiw	r26, 0x33	; 51
   197da:	80 81       	ld	r24, Z
   197dc:	d8 96       	adiw	r26, 0x38	; 56
   197de:	9c 91       	ld	r25, X
   197e0:	89 2b       	or	r24, r25
   197e2:	80 83       	st	Z, r24
   197e4:	26 96       	adiw	r28, 0x06	; 6
   197e6:	0f b6       	in	r0, 0x3f	; 63
   197e8:	f8 94       	cli
   197ea:	de bf       	out	0x3e, r29	; 62
   197ec:	0f be       	out	0x3f, r0	; 63
   197ee:	cd bf       	out	0x3d, r28	; 61
   197f0:	df 91       	pop	r29
   197f2:	cf 91       	pop	r28
   197f4:	1f 91       	pop	r17
   197f6:	0f 91       	pop	r16
   197f8:	ff 90       	pop	r15
   197fa:	ef 90       	pop	r14
   197fc:	df 90       	pop	r13
   197fe:	cf 90       	pop	r12
   19800:	08 95       	ret
   19802:	f1 2c       	mov	r15, r1
   19804:	e1 2c       	mov	r14, r1
   19806:	64 cf       	rjmp	.-312    	; 0x196d0 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x42>
   19808:	f8 01       	movw	r30, r16
   1980a:	80 89       	ldd	r24, Z+16	; 0x10
   1980c:	91 89       	ldd	r25, Z+17	; 0x11
   1980e:	86 1b       	sub	r24, r22
   19810:	97 0b       	sbc	r25, r23
   19812:	84 1b       	sub	r24, r20
   19814:	95 0b       	sbc	r25, r21
   19816:	79 83       	std	Y+1, r23	; 0x01
   19818:	6a 83       	std	Y+2, r22	; 0x02
   1981a:	5b 83       	std	Y+3, r21	; 0x03
   1981c:	4c 83       	std	Y+4, r20	; 0x04
   1981e:	9d 83       	std	Y+5, r25	; 0x05
   19820:	8e 83       	std	Y+6, r24	; 0x06
   19822:	64 a1       	ldd	r22, Z+36	; 0x24
   19824:	75 a1       	ldd	r23, Z+37	; 0x25
   19826:	26 e0       	ldi	r18, 0x06	; 6
   19828:	ae 01       	movw	r20, r28
   1982a:	4f 5f       	subi	r20, 0xFF	; 255
   1982c:	5f 4f       	sbci	r21, 0xFF	; 255
   1982e:	c8 01       	movw	r24, r16
   19830:	0e 94 e7 c2 	call	0x185ce	; 0x185ce <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   19834:	d9 82       	std	Y+1, r13	; 0x01
   19836:	ca 82       	std	Y+2, r12	; 0x02
   19838:	d8 01       	movw	r26, r16
   1983a:	96 96       	adiw	r26, 0x26	; 38
   1983c:	6d 91       	ld	r22, X+
   1983e:	7c 91       	ld	r23, X
   19840:	22 e0       	ldi	r18, 0x02	; 2
   19842:	ae 01       	movw	r20, r28
   19844:	4f 5f       	subi	r20, 0xFF	; 255
   19846:	5f 4f       	sbci	r21, 0xFF	; 255
   19848:	c8 01       	movw	r24, r16
   1984a:	0e 94 e7 c2 	call	0x185ce	; 0x185ce <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   1984e:	f8 01       	movw	r30, r16
   19850:	80 8d       	ldd	r24, Z+24	; 0x18
   19852:	91 8d       	ldd	r25, Z+25	; 0x19
   19854:	01 97       	sbiw	r24, 0x01	; 1
   19856:	79 f4       	brne	.+30     	; 0x19876 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x1e8>
   19858:	88 e0       	ldi	r24, 0x08	; 8
   1985a:	ef 28       	or	r14, r15
   1985c:	09 f4       	brne	.+2      	; 0x19860 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x1d2>
   1985e:	80 e0       	ldi	r24, 0x00	; 0
   19860:	89 83       	std	Y+1, r24	; 0x01
   19862:	21 e0       	ldi	r18, 0x01	; 1
   19864:	ae 01       	movw	r20, r28
   19866:	4f 5f       	subi	r20, 0xFF	; 255
   19868:	5f 4f       	sbci	r21, 0xFF	; 255
   1986a:	61 e0       	ldi	r22, 0x01	; 1
   1986c:	70 e0       	ldi	r23, 0x00	; 0
   1986e:	c8 01       	movw	r24, r16
   19870:	0e 94 e7 c2 	call	0x185ce	; 0x185ce <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   19874:	b7 cf       	rjmp	.-146    	; 0x197e4 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x156>
   19876:	ef 28       	or	r14, r15
   19878:	09 f0       	breq	.+2      	; 0x1987c <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x1ee>
   1987a:	b4 cf       	rjmp	.-152    	; 0x197e4 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x156>
   1987c:	20 e0       	ldi	r18, 0x00	; 0
   1987e:	50 e0       	ldi	r21, 0x00	; 0
   19880:	40 e0       	ldi	r20, 0x00	; 0
   19882:	63 e1       	ldi	r22, 0x13	; 19
   19884:	70 e0       	ldi	r23, 0x00	; 0
   19886:	f3 cf       	rjmp	.-26     	; 0x1986e <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x1e0>

00019888 <LCDWIKI_KBV::Set_Rotation(unsigned char)>:
_ZN11LCDWIKI_KBV12Set_RotationEh():
   19888:	0f 93       	push	r16
   1988a:	1f 93       	push	r17
   1988c:	cf 93       	push	r28
   1988e:	df 93       	push	r29
   19890:	ec 01       	movw	r28, r24
   19892:	86 2f       	mov	r24, r22
   19894:	83 70       	andi	r24, 0x03	; 3
   19896:	90 e0       	ldi	r25, 0x00	; 0
   19898:	9f 8b       	std	Y+23, r25	; 0x17
   1989a:	8e 8b       	std	Y+22, r24	; 0x16
   1989c:	26 2f       	mov	r18, r22
   1989e:	21 70       	andi	r18, 0x01	; 1
   198a0:	60 ff       	sbrs	r22, 0
   198a2:	8e c0       	rjmp	.+284    	; 0x199c0 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x138>
   198a4:	88 89       	ldd	r24, Y+16	; 0x10
   198a6:	99 89       	ldd	r25, Y+17	; 0x11
   198a8:	9b 8b       	std	Y+19, r25	; 0x13
   198aa:	8a 8b       	std	Y+18, r24	; 0x12
   198ac:	22 23       	and	r18, r18
   198ae:	09 f4       	brne	.+2      	; 0x198b2 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2a>
   198b0:	8a c0       	rjmp	.+276    	; 0x199c6 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x13e>
   198b2:	8e 85       	ldd	r24, Y+14	; 0x0e
   198b4:	9f 85       	ldd	r25, Y+15	; 0x0f
   198b6:	9d 8b       	std	Y+21, r25	; 0x15
   198b8:	8c 8b       	std	Y+20, r24	; 0x14
   198ba:	ae a5       	ldd	r26, Y+46	; 0x2e
   198bc:	bf a5       	ldd	r27, Y+47	; 0x2f
   198be:	8c 91       	ld	r24, X
   198c0:	9a ad       	ldd	r25, Y+58	; 0x3a
   198c2:	89 23       	and	r24, r25
   198c4:	8c 93       	st	X, r24
   198c6:	48 8d       	ldd	r20, Y+24	; 0x18
   198c8:	59 8d       	ldd	r21, Y+25	; 0x19
   198ca:	8e 89       	ldd	r24, Y+22	; 0x16
   198cc:	9f 89       	ldd	r25, Y+23	; 0x17
   198ce:	a8 a9       	ldd	r26, Y+48	; 0x30
   198d0:	b9 a9       	ldd	r27, Y+49	; 0x31
   198d2:	2b ad       	ldd	r18, Y+59	; 0x3b
   198d4:	41 15       	cp	r20, r1
   198d6:	51 05       	cpc	r21, r1
   198d8:	09 f0       	breq	.+2      	; 0x198dc <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x54>
   198da:	7a c0       	rjmp	.+244    	; 0x199d0 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x148>
   198dc:	01 97       	sbiw	r24, 0x01	; 1
   198de:	83 30       	cpi	r24, 0x03	; 3
   198e0:	91 05       	cpc	r25, r1
   198e2:	08 f0       	brcs	.+2      	; 0x198e6 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x5e>
   198e4:	73 c0       	rjmp	.+230    	; 0x199cc <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x144>
   198e6:	88 0f       	add	r24, r24
   198e8:	99 1f       	adc	r25, r25
   198ea:	fc 01       	movw	r30, r24
   198ec:	e1 5e       	subi	r30, 0xE1	; 225
   198ee:	f6 4f       	sbci	r31, 0xF6	; 246
   198f0:	90 81       	ld	r25, Z
   198f2:	38 a5       	ldd	r19, Y+40	; 0x28
   198f4:	49 a5       	ldd	r20, Y+41	; 0x29
   198f6:	8c 91       	ld	r24, X
   198f8:	28 23       	and	r18, r24
   198fa:	2c 93       	st	X, r18
   198fc:	42 b9       	out	0x02, r20	; 2
   198fe:	ea a9       	ldd	r30, Y+50	; 0x32
   19900:	fb a9       	ldd	r31, Y+51	; 0x33
   19902:	80 81       	ld	r24, Z
   19904:	2c ad       	ldd	r18, Y+60	; 0x3c
   19906:	82 23       	and	r24, r18
   19908:	80 83       	st	Z, r24
   1990a:	ea a9       	ldd	r30, Y+50	; 0x32
   1990c:	fb a9       	ldd	r31, Y+51	; 0x33
   1990e:	80 81       	ld	r24, Z
   19910:	28 ad       	ldd	r18, Y+56	; 0x38
   19912:	82 2b       	or	r24, r18
   19914:	80 83       	st	Z, r24
   19916:	32 b9       	out	0x02, r19	; 2
   19918:	ea a9       	ldd	r30, Y+50	; 0x32
   1991a:	fb a9       	ldd	r31, Y+51	; 0x33
   1991c:	80 81       	ld	r24, Z
   1991e:	2c ad       	ldd	r18, Y+60	; 0x3c
   19920:	82 23       	and	r24, r18
   19922:	80 83       	st	Z, r24
   19924:	ea a9       	ldd	r30, Y+50	; 0x32
   19926:	fb a9       	ldd	r31, Y+51	; 0x33
   19928:	80 81       	ld	r24, Z
   1992a:	28 ad       	ldd	r18, Y+56	; 0x38
   1992c:	82 2b       	or	r24, r18
   1992e:	80 83       	st	Z, r24
   19930:	e8 a9       	ldd	r30, Y+48	; 0x30
   19932:	f9 a9       	ldd	r31, Y+49	; 0x31
   19934:	80 81       	ld	r24, Z
   19936:	2f a9       	ldd	r18, Y+55	; 0x37
   19938:	82 2b       	or	r24, r18
   1993a:	80 83       	st	Z, r24
   1993c:	80 e1       	ldi	r24, 0x10	; 16
   1993e:	82 b9       	out	0x02, r24	; 2
   19940:	ea a9       	ldd	r30, Y+50	; 0x32
   19942:	fb a9       	ldd	r31, Y+51	; 0x33
   19944:	80 81       	ld	r24, Z
   19946:	2c ad       	ldd	r18, Y+60	; 0x3c
   19948:	82 23       	and	r24, r18
   1994a:	80 83       	st	Z, r24
   1994c:	ea a9       	ldd	r30, Y+50	; 0x32
   1994e:	fb a9       	ldd	r31, Y+51	; 0x33
   19950:	80 81       	ld	r24, Z
   19952:	28 ad       	ldd	r18, Y+56	; 0x38
   19954:	82 2b       	or	r24, r18
   19956:	80 83       	st	Z, r24
   19958:	92 b9       	out	0x02, r25	; 2
   1995a:	ea a9       	ldd	r30, Y+50	; 0x32
   1995c:	fb a9       	ldd	r31, Y+51	; 0x33
   1995e:	80 81       	ld	r24, Z
   19960:	9c ad       	ldd	r25, Y+60	; 0x3c
   19962:	89 23       	and	r24, r25
   19964:	80 83       	st	Z, r24
   19966:	ea a9       	ldd	r30, Y+50	; 0x32
   19968:	fb a9       	ldd	r31, Y+51	; 0x33
   1996a:	80 81       	ld	r24, Z
   1996c:	98 ad       	ldd	r25, Y+56	; 0x38
   1996e:	89 2b       	or	r24, r25
   19970:	80 83       	st	Z, r24
   19972:	0c 89       	ldd	r16, Y+20	; 0x14
   19974:	1d 89       	ldd	r17, Y+21	; 0x15
   19976:	01 50       	subi	r16, 0x01	; 1
   19978:	11 09       	sbc	r17, r1
   1997a:	2a 89       	ldd	r18, Y+18	; 0x12
   1997c:	3b 89       	ldd	r19, Y+19	; 0x13
   1997e:	21 50       	subi	r18, 0x01	; 1
   19980:	31 09       	sbc	r19, r1
   19982:	e8 81       	ld	r30, Y
   19984:	f9 81       	ldd	r31, Y+1	; 0x01
   19986:	06 80       	ldd	r0, Z+6	; 0x06
   19988:	f7 81       	ldd	r31, Z+7	; 0x07
   1998a:	e0 2d       	mov	r30, r0
   1998c:	50 e0       	ldi	r21, 0x00	; 0
   1998e:	40 e0       	ldi	r20, 0x00	; 0
   19990:	70 e0       	ldi	r23, 0x00	; 0
   19992:	60 e0       	ldi	r22, 0x00	; 0
   19994:	ce 01       	movw	r24, r28
   19996:	19 95       	eicall
   19998:	48 89       	ldd	r20, Y+16	; 0x10
   1999a:	59 89       	ldd	r21, Y+17	; 0x11
   1999c:	30 e0       	ldi	r19, 0x00	; 0
   1999e:	20 e0       	ldi	r18, 0x00	; 0
   199a0:	70 e0       	ldi	r23, 0x00	; 0
   199a2:	60 e0       	ldi	r22, 0x00	; 0
   199a4:	ce 01       	movw	r24, r28
   199a6:	0e 94 47 cb 	call	0x1968e	; 0x1968e <LCDWIKI_KBV::Vert_Scroll(int, int, int)>
   199aa:	ee a5       	ldd	r30, Y+46	; 0x2e
   199ac:	ff a5       	ldd	r31, Y+47	; 0x2f
   199ae:	80 81       	ld	r24, Z
   199b0:	9e a9       	ldd	r25, Y+54	; 0x36
   199b2:	89 2b       	or	r24, r25
   199b4:	80 83       	st	Z, r24
   199b6:	df 91       	pop	r29
   199b8:	cf 91       	pop	r28
   199ba:	1f 91       	pop	r17
   199bc:	0f 91       	pop	r16
   199be:	08 95       	ret
   199c0:	8e 85       	ldd	r24, Y+14	; 0x0e
   199c2:	9f 85       	ldd	r25, Y+15	; 0x0f
   199c4:	71 cf       	rjmp	.-286    	; 0x198a8 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x20>
   199c6:	88 89       	ldd	r24, Y+16	; 0x10
   199c8:	99 89       	ldd	r25, Y+17	; 0x11
   199ca:	75 cf       	rjmp	.-278    	; 0x198b6 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2e>
   199cc:	90 e3       	ldi	r25, 0x30	; 48
   199ce:	91 cf       	rjmp	.-222    	; 0x198f2 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x6a>
   199d0:	46 30       	cpi	r20, 0x06	; 6
   199d2:	51 05       	cpc	r21, r1
   199d4:	51 f5       	brne	.+84     	; 0x19a2a <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x1a2>
   199d6:	81 30       	cpi	r24, 0x01	; 1
   199d8:	91 05       	cpc	r25, r1
   199da:	f9 f0       	breq	.+62     	; 0x19a1a <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x192>
   199dc:	20 f1       	brcs	.+72     	; 0x19a26 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x19e>
   199de:	82 30       	cpi	r24, 0x02	; 2
   199e0:	91 05       	cpc	r25, r1
   199e2:	e9 f0       	breq	.+58     	; 0x19a1e <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x196>
   199e4:	03 97       	sbiw	r24, 0x03	; 3
   199e6:	e9 f0       	breq	.+58     	; 0x19a22 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x19a>
   199e8:	8c 91       	ld	r24, X
   199ea:	28 23       	and	r18, r24
   199ec:	2c 93       	st	X, r18
   199ee:	88 a5       	ldd	r24, Y+40	; 0x28
   199f0:	82 b9       	out	0x02, r24	; 2
   199f2:	ea a9       	ldd	r30, Y+50	; 0x32
   199f4:	fb a9       	ldd	r31, Y+51	; 0x33
   199f6:	80 81       	ld	r24, Z
   199f8:	9c ad       	ldd	r25, Y+60	; 0x3c
   199fa:	89 23       	and	r24, r25
   199fc:	80 83       	st	Z, r24
   199fe:	ea a9       	ldd	r30, Y+50	; 0x32
   19a00:	fb a9       	ldd	r31, Y+51	; 0x33
   19a02:	80 81       	ld	r24, Z
   19a04:	98 ad       	ldd	r25, Y+56	; 0x38
   19a06:	89 2b       	or	r24, r25
   19a08:	80 83       	st	Z, r24
   19a0a:	e8 a9       	ldd	r30, Y+48	; 0x30
   19a0c:	f9 a9       	ldd	r31, Y+49	; 0x31
   19a0e:	80 81       	ld	r24, Z
   19a10:	9f a9       	ldd	r25, Y+55	; 0x37
   19a12:	89 2b       	or	r24, r25
   19a14:	80 83       	st	Z, r24
   19a16:	12 b9       	out	0x02, r17	; 2
   19a18:	a0 cf       	rjmp	.-192    	; 0x1995a <LCDWIKI_KBV::Set_Rotation(unsigned char)+0xd2>
   19a1a:	10 ea       	ldi	r17, 0xA0	; 160
   19a1c:	e5 cf       	rjmp	.-54     	; 0x199e8 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x160>
   19a1e:	10 e0       	ldi	r17, 0x00	; 0
   19a20:	e3 cf       	rjmp	.-58     	; 0x199e8 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x160>
   19a22:	10 e6       	ldi	r17, 0x60	; 96
   19a24:	e1 cf       	rjmp	.-62     	; 0x199e8 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x160>
   19a26:	10 ed       	ldi	r17, 0xD0	; 208
   19a28:	df cf       	rjmp	.-66     	; 0x199e8 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x160>
   19a2a:	48 30       	cpi	r20, 0x08	; 8
   19a2c:	51 05       	cpc	r21, r1
   19a2e:	49 f5       	brne	.+82     	; 0x19a82 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x1fa>
   19a30:	fb e2       	ldi	r31, 0x2B	; 43
   19a32:	81 30       	cpi	r24, 0x01	; 1
   19a34:	91 05       	cpc	r25, r1
   19a36:	51 f0       	breq	.+20     	; 0x19a4c <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x1c4>
   19a38:	f9 e0       	ldi	r31, 0x09	; 9
   19a3a:	81 30       	cpi	r24, 0x01	; 1
   19a3c:	91 05       	cpc	r25, r1
   19a3e:	30 f0       	brcs	.+12     	; 0x19a4c <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x1c4>
   19a40:	fa e0       	ldi	r31, 0x0A	; 10
   19a42:	82 30       	cpi	r24, 0x02	; 2
   19a44:	91 05       	cpc	r25, r1
   19a46:	11 f0       	breq	.+4      	; 0x19a4c <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x1c4>
   19a48:	03 97       	sbiw	r24, 0x03	; 3
   19a4a:	c9 f0       	breq	.+50     	; 0x19a7e <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x1f6>
   19a4c:	8c 91       	ld	r24, X
   19a4e:	28 23       	and	r18, r24
   19a50:	2c 93       	st	X, r18
   19a52:	88 a5       	ldd	r24, Y+40	; 0x28
   19a54:	82 b9       	out	0x02, r24	; 2
   19a56:	aa a9       	ldd	r26, Y+50	; 0x32
   19a58:	bb a9       	ldd	r27, Y+51	; 0x33
   19a5a:	8c 91       	ld	r24, X
   19a5c:	9c ad       	ldd	r25, Y+60	; 0x3c
   19a5e:	89 23       	and	r24, r25
   19a60:	8c 93       	st	X, r24
   19a62:	aa a9       	ldd	r26, Y+50	; 0x32
   19a64:	bb a9       	ldd	r27, Y+51	; 0x33
   19a66:	8c 91       	ld	r24, X
   19a68:	98 ad       	ldd	r25, Y+56	; 0x38
   19a6a:	89 2b       	or	r24, r25
   19a6c:	8c 93       	st	X, r24
   19a6e:	a8 a9       	ldd	r26, Y+48	; 0x30
   19a70:	b9 a9       	ldd	r27, Y+49	; 0x31
   19a72:	8c 91       	ld	r24, X
   19a74:	9f a9       	ldd	r25, Y+55	; 0x37
   19a76:	89 2b       	or	r24, r25
   19a78:	8c 93       	st	X, r24
   19a7a:	f2 b9       	out	0x02, r31	; 2
   19a7c:	6e cf       	rjmp	.-292    	; 0x1995a <LCDWIKI_KBV::Set_Rotation(unsigned char)+0xd2>
   19a7e:	f8 e2       	ldi	r31, 0x28	; 40
   19a80:	e5 cf       	rjmp	.-54     	; 0x19a4c <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x1c4>
   19a82:	45 30       	cpi	r20, 0x05	; 5
   19a84:	51 05       	cpc	r21, r1
   19a86:	49 f5       	brne	.+82     	; 0x19ada <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x252>
   19a88:	e8 e7       	ldi	r30, 0x78	; 120
   19a8a:	81 30       	cpi	r24, 0x01	; 1
   19a8c:	91 05       	cpc	r25, r1
   19a8e:	51 f0       	breq	.+20     	; 0x19aa4 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x21c>
   19a90:	e8 e0       	ldi	r30, 0x08	; 8
   19a92:	81 30       	cpi	r24, 0x01	; 1
   19a94:	91 05       	cpc	r25, r1
   19a96:	30 f0       	brcs	.+12     	; 0x19aa4 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x21c>
   19a98:	e8 ec       	ldi	r30, 0xC8	; 200
   19a9a:	82 30       	cpi	r24, 0x02	; 2
   19a9c:	91 05       	cpc	r25, r1
   19a9e:	11 f0       	breq	.+4      	; 0x19aa4 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x21c>
   19aa0:	03 97       	sbiw	r24, 0x03	; 3
   19aa2:	c9 f0       	breq	.+50     	; 0x19ad6 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x24e>
   19aa4:	8c 91       	ld	r24, X
   19aa6:	28 23       	and	r18, r24
   19aa8:	2c 93       	st	X, r18
   19aaa:	88 a5       	ldd	r24, Y+40	; 0x28
   19aac:	82 b9       	out	0x02, r24	; 2
   19aae:	aa a9       	ldd	r26, Y+50	; 0x32
   19ab0:	bb a9       	ldd	r27, Y+51	; 0x33
   19ab2:	8c 91       	ld	r24, X
   19ab4:	9c ad       	ldd	r25, Y+60	; 0x3c
   19ab6:	89 23       	and	r24, r25
   19ab8:	8c 93       	st	X, r24
   19aba:	aa a9       	ldd	r26, Y+50	; 0x32
   19abc:	bb a9       	ldd	r27, Y+51	; 0x33
   19abe:	8c 91       	ld	r24, X
   19ac0:	98 ad       	ldd	r25, Y+56	; 0x38
   19ac2:	89 2b       	or	r24, r25
   19ac4:	8c 93       	st	X, r24
   19ac6:	a8 a9       	ldd	r26, Y+48	; 0x30
   19ac8:	b9 a9       	ldd	r27, Y+49	; 0x31
   19aca:	8c 91       	ld	r24, X
   19acc:	9f a9       	ldd	r25, Y+55	; 0x37
   19ace:	89 2b       	or	r24, r25
   19ad0:	8c 93       	st	X, r24
   19ad2:	e2 b9       	out	0x02, r30	; 2
   19ad4:	42 cf       	rjmp	.-380    	; 0x1995a <LCDWIKI_KBV::Set_Rotation(unsigned char)+0xd2>
   19ad6:	e8 ea       	ldi	r30, 0xA8	; 168
   19ad8:	e5 cf       	rjmp	.-54     	; 0x19aa4 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x21c>
   19ada:	47 30       	cpi	r20, 0x07	; 7
   19adc:	51 05       	cpc	r21, r1
   19ade:	51 f5       	brne	.+84     	; 0x19b34 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2ac>
   19ae0:	81 30       	cpi	r24, 0x01	; 1
   19ae2:	91 05       	cpc	r25, r1
   19ae4:	f9 f0       	breq	.+62     	; 0x19b24 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x29c>
   19ae6:	20 f1       	brcs	.+72     	; 0x19b30 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2a8>
   19ae8:	82 30       	cpi	r24, 0x02	; 2
   19aea:	91 05       	cpc	r25, r1
   19aec:	e9 f0       	breq	.+58     	; 0x19b28 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2a0>
   19aee:	03 97       	sbiw	r24, 0x03	; 3
   19af0:	e9 f0       	breq	.+58     	; 0x19b2c <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2a4>
   19af2:	8c 91       	ld	r24, X
   19af4:	28 23       	and	r18, r24
   19af6:	2c 93       	st	X, r18
   19af8:	88 a5       	ldd	r24, Y+40	; 0x28
   19afa:	82 b9       	out	0x02, r24	; 2
   19afc:	ea a9       	ldd	r30, Y+50	; 0x32
   19afe:	fb a9       	ldd	r31, Y+51	; 0x33
   19b00:	80 81       	ld	r24, Z
   19b02:	9c ad       	ldd	r25, Y+60	; 0x3c
   19b04:	89 23       	and	r24, r25
   19b06:	80 83       	st	Z, r24
   19b08:	ea a9       	ldd	r30, Y+50	; 0x32
   19b0a:	fb a9       	ldd	r31, Y+51	; 0x33
   19b0c:	80 81       	ld	r24, Z
   19b0e:	98 ad       	ldd	r25, Y+56	; 0x38
   19b10:	89 2b       	or	r24, r25
   19b12:	80 83       	st	Z, r24
   19b14:	e8 a9       	ldd	r30, Y+48	; 0x30
   19b16:	f9 a9       	ldd	r31, Y+49	; 0x31
   19b18:	80 81       	ld	r24, Z
   19b1a:	9f a9       	ldd	r25, Y+55	; 0x37
   19b1c:	89 2b       	or	r24, r25
   19b1e:	80 83       	st	Z, r24
   19b20:	72 b9       	out	0x02, r23	; 2
   19b22:	1b cf       	rjmp	.-458    	; 0x1995a <LCDWIKI_KBV::Set_Rotation(unsigned char)+0xd2>
   19b24:	78 ea       	ldi	r23, 0xA8	; 168
   19b26:	e5 cf       	rjmp	.-54     	; 0x19af2 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x26a>
   19b28:	78 e1       	ldi	r23, 0x18	; 24
   19b2a:	e3 cf       	rjmp	.-58     	; 0x19af2 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x26a>
   19b2c:	78 e7       	ldi	r23, 0x78	; 120
   19b2e:	e1 cf       	rjmp	.-62     	; 0x19af2 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x26a>
   19b30:	78 ec       	ldi	r23, 0xC8	; 200
   19b32:	df cf       	rjmp	.-66     	; 0x19af2 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x26a>
   19b34:	81 30       	cpi	r24, 0x01	; 1
   19b36:	91 05       	cpc	r25, r1
   19b38:	f9 f0       	breq	.+62     	; 0x19b78 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2f0>
   19b3a:	20 f1       	brcs	.+72     	; 0x19b84 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2fc>
   19b3c:	82 30       	cpi	r24, 0x02	; 2
   19b3e:	91 05       	cpc	r25, r1
   19b40:	e9 f0       	breq	.+58     	; 0x19b7c <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2f4>
   19b42:	03 97       	sbiw	r24, 0x03	; 3
   19b44:	e9 f0       	breq	.+58     	; 0x19b80 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2f8>
   19b46:	8c 91       	ld	r24, X
   19b48:	28 23       	and	r18, r24
   19b4a:	2c 93       	st	X, r18
   19b4c:	88 a5       	ldd	r24, Y+40	; 0x28
   19b4e:	82 b9       	out	0x02, r24	; 2
   19b50:	ea a9       	ldd	r30, Y+50	; 0x32
   19b52:	fb a9       	ldd	r31, Y+51	; 0x33
   19b54:	80 81       	ld	r24, Z
   19b56:	9c ad       	ldd	r25, Y+60	; 0x3c
   19b58:	89 23       	and	r24, r25
   19b5a:	80 83       	st	Z, r24
   19b5c:	ea a9       	ldd	r30, Y+50	; 0x32
   19b5e:	fb a9       	ldd	r31, Y+51	; 0x33
   19b60:	80 81       	ld	r24, Z
   19b62:	98 ad       	ldd	r25, Y+56	; 0x38
   19b64:	89 2b       	or	r24, r25
   19b66:	80 83       	st	Z, r24
   19b68:	e8 a9       	ldd	r30, Y+48	; 0x30
   19b6a:	f9 a9       	ldd	r31, Y+49	; 0x31
   19b6c:	80 81       	ld	r24, Z
   19b6e:	9f a9       	ldd	r25, Y+55	; 0x37
   19b70:	89 2b       	or	r24, r25
   19b72:	80 83       	st	Z, r24
   19b74:	32 b9       	out	0x02, r19	; 2
   19b76:	f1 ce       	rjmp	.-542    	; 0x1995a <LCDWIKI_KBV::Set_Rotation(unsigned char)+0xd2>
   19b78:	38 e2       	ldi	r19, 0x28	; 40
   19b7a:	e5 cf       	rjmp	.-54     	; 0x19b46 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2be>
   19b7c:	38 e9       	ldi	r19, 0x98	; 152
   19b7e:	e3 cf       	rjmp	.-58     	; 0x19b46 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2be>
   19b80:	38 ef       	ldi	r19, 0xF8	; 248
   19b82:	e1 cf       	rjmp	.-62     	; 0x19b46 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2be>
   19b84:	38 e4       	ldi	r19, 0x48	; 72
   19b86:	df cf       	rjmp	.-66     	; 0x19b46 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2be>

00019b88 <LCDWIKI_KBV::Get_Rotation() const>:
_ZNK11LCDWIKI_KBV12Get_RotationEv():
   19b88:	fc 01       	movw	r30, r24
   19b8a:	86 89       	ldd	r24, Z+22	; 0x16
   19b8c:	08 95       	ret

00019b8e <LCDWIKI_KBV::Invert_Display(bool)>:
_ZN11LCDWIKI_KBV14Invert_DisplayEb():
   19b8e:	fc 01       	movw	r30, r24
   19b90:	a6 a5       	ldd	r26, Z+46	; 0x2e
   19b92:	b7 a5       	ldd	r27, Z+47	; 0x2f
   19b94:	8c 91       	ld	r24, X
   19b96:	92 ad       	ldd	r25, Z+58	; 0x3a
   19b98:	89 23       	and	r24, r25
   19b9a:	8c 93       	st	X, r24
   19b9c:	82 a5       	ldd	r24, Z+42	; 0x2a
   19b9e:	40 8d       	ldd	r20, Z+24	; 0x18
   19ba0:	51 8d       	ldd	r21, Z+25	; 0x19
   19ba2:	a0 a9       	ldd	r26, Z+48	; 0x30
   19ba4:	b1 a9       	ldd	r27, Z+49	; 0x31
   19ba6:	23 ad       	ldd	r18, Z+59	; 0x3b
   19ba8:	9c 91       	ld	r25, X
   19baa:	92 23       	and	r25, r18
   19bac:	9c 93       	st	X, r25
   19bae:	41 15       	cp	r20, r1
   19bb0:	51 05       	cpc	r21, r1
   19bb2:	49 f5       	brne	.+82     	; 0x19c06 <LCDWIKI_KBV::Invert_Display(bool)+0x78>
   19bb4:	91 e6       	ldi	r25, 0x61	; 97
   19bb6:	92 b9       	out	0x02, r25	; 2
   19bb8:	a2 a9       	ldd	r26, Z+50	; 0x32
   19bba:	b3 a9       	ldd	r27, Z+51	; 0x33
   19bbc:	9c 91       	ld	r25, X
   19bbe:	24 ad       	ldd	r18, Z+60	; 0x3c
   19bc0:	92 23       	and	r25, r18
   19bc2:	9c 93       	st	X, r25
   19bc4:	a2 a9       	ldd	r26, Z+50	; 0x32
   19bc6:	b3 a9       	ldd	r27, Z+51	; 0x33
   19bc8:	9c 91       	ld	r25, X
   19bca:	20 ad       	ldd	r18, Z+56	; 0x38
   19bcc:	92 2b       	or	r25, r18
   19bce:	9c 93       	st	X, r25
   19bd0:	a0 a9       	ldd	r26, Z+48	; 0x30
   19bd2:	b1 a9       	ldd	r27, Z+49	; 0x31
   19bd4:	9c 91       	ld	r25, X
   19bd6:	27 a9       	ldd	r18, Z+55	; 0x37
   19bd8:	92 2b       	or	r25, r18
   19bda:	9c 93       	st	X, r25
   19bdc:	68 27       	eor	r22, r24
   19bde:	62 b9       	out	0x02, r22	; 2
   19be0:	a2 a9       	ldd	r26, Z+50	; 0x32
   19be2:	b3 a9       	ldd	r27, Z+51	; 0x33
   19be4:	8c 91       	ld	r24, X
   19be6:	94 ad       	ldd	r25, Z+60	; 0x3c
   19be8:	89 23       	and	r24, r25
   19bea:	8c 93       	st	X, r24
   19bec:	a2 a9       	ldd	r26, Z+50	; 0x32
   19bee:	b3 a9       	ldd	r27, Z+51	; 0x33
   19bf0:	8c 91       	ld	r24, X
   19bf2:	90 ad       	ldd	r25, Z+56	; 0x38
   19bf4:	89 2b       	or	r24, r25
   19bf6:	8c 93       	st	X, r24
   19bf8:	a6 a5       	ldd	r26, Z+46	; 0x2e
   19bfa:	b7 a5       	ldd	r27, Z+47	; 0x2f
   19bfc:	8c 91       	ld	r24, X
   19bfe:	96 a9       	ldd	r25, Z+54	; 0x36
   19c00:	89 2b       	or	r24, r25
   19c02:	8c 93       	st	X, r24
   19c04:	08 95       	ret
   19c06:	41 30       	cpi	r20, 0x01	; 1
   19c08:	51 05       	cpc	r21, r1
   19c0a:	d9 f4       	brne	.+54     	; 0x19c42 <LCDWIKI_KBV::Invert_Display(bool)+0xb4>
   19c0c:	91 e0       	ldi	r25, 0x01	; 1
   19c0e:	92 b9       	out	0x02, r25	; 2
   19c10:	a2 a9       	ldd	r26, Z+50	; 0x32
   19c12:	b3 a9       	ldd	r27, Z+51	; 0x33
   19c14:	9c 91       	ld	r25, X
   19c16:	24 ad       	ldd	r18, Z+60	; 0x3c
   19c18:	92 23       	and	r25, r18
   19c1a:	9c 93       	st	X, r25
   19c1c:	a2 a9       	ldd	r26, Z+50	; 0x32
   19c1e:	b3 a9       	ldd	r27, Z+51	; 0x33
   19c20:	9c 91       	ld	r25, X
   19c22:	20 ad       	ldd	r18, Z+56	; 0x38
   19c24:	92 2b       	or	r25, r18
   19c26:	9c 93       	st	X, r25
   19c28:	a0 a9       	ldd	r26, Z+48	; 0x30
   19c2a:	b1 a9       	ldd	r27, Z+49	; 0x31
   19c2c:	9c 91       	ld	r25, X
   19c2e:	27 a9       	ldd	r18, Z+55	; 0x37
   19c30:	92 2b       	or	r25, r18
   19c32:	9c 93       	st	X, r25
   19c34:	86 17       	cp	r24, r22
   19c36:	19 f0       	breq	.+6      	; 0x19c3e <LCDWIKI_KBV::Invert_Display(bool)+0xb0>
   19c38:	88 e0       	ldi	r24, 0x08	; 8
   19c3a:	82 b9       	out	0x02, r24	; 2
   19c3c:	d1 cf       	rjmp	.-94     	; 0x19be0 <LCDWIKI_KBV::Invert_Display(bool)+0x52>
   19c3e:	8a e0       	ldi	r24, 0x0A	; 10
   19c40:	fc cf       	rjmp	.-8      	; 0x19c3a <LCDWIKI_KBV::Invert_Display(bool)+0xac>
   19c42:	86 17       	cp	r24, r22
   19c44:	99 f0       	breq	.+38     	; 0x19c6c <LCDWIKI_KBV::Invert_Display(bool)+0xde>
   19c46:	81 e2       	ldi	r24, 0x21	; 33
   19c48:	82 b9       	out	0x02, r24	; 2
   19c4a:	a2 a9       	ldd	r26, Z+50	; 0x32
   19c4c:	b3 a9       	ldd	r27, Z+51	; 0x33
   19c4e:	8c 91       	ld	r24, X
   19c50:	94 ad       	ldd	r25, Z+60	; 0x3c
   19c52:	89 23       	and	r24, r25
   19c54:	8c 93       	st	X, r24
   19c56:	a2 a9       	ldd	r26, Z+50	; 0x32
   19c58:	b3 a9       	ldd	r27, Z+51	; 0x33
   19c5a:	8c 91       	ld	r24, X
   19c5c:	90 ad       	ldd	r25, Z+56	; 0x38
   19c5e:	89 2b       	or	r24, r25
   19c60:	8c 93       	st	X, r24
   19c62:	a0 a9       	ldd	r26, Z+48	; 0x30
   19c64:	b1 a9       	ldd	r27, Z+49	; 0x31
   19c66:	8c 91       	ld	r24, X
   19c68:	97 a9       	ldd	r25, Z+55	; 0x37
   19c6a:	c4 cf       	rjmp	.-120    	; 0x19bf4 <LCDWIKI_KBV::Invert_Display(bool)+0x66>
   19c6c:	80 e2       	ldi	r24, 0x20	; 32
   19c6e:	ec cf       	rjmp	.-40     	; 0x19c48 <LCDWIKI_KBV::Invert_Display(bool)+0xba>

00019c70 <LCDWIKI_KBV::init_table8(void const*, int)>:
_ZN11LCDWIKI_KBV11init_table8EPKvi():
   19c70:	af 92       	push	r10
   19c72:	bf 92       	push	r11
   19c74:	cf 92       	push	r12
   19c76:	df 92       	push	r13
   19c78:	ef 92       	push	r14
   19c7a:	ff 92       	push	r15
   19c7c:	1f 93       	push	r17
   19c7e:	cf 93       	push	r28
   19c80:	df 93       	push	r29
   19c82:	cd b7       	in	r28, 0x3d	; 61
   19c84:	de b7       	in	r29, 0x3e	; 62
   19c86:	68 97       	sbiw	r28, 0x18	; 24
   19c88:	0f b6       	in	r0, 0x3f	; 63
   19c8a:	f8 94       	cli
   19c8c:	de bf       	out	0x3e, r29	; 62
   19c8e:	0f be       	out	0x3f, r0	; 63
   19c90:	cd bf       	out	0x3d, r28	; 61
   19c92:	5c 01       	movw	r10, r24
   19c94:	7b 01       	movw	r14, r22
   19c96:	6a 01       	movw	r12, r20
   19c98:	1c 14       	cp	r1, r12
   19c9a:	1d 04       	cpc	r1, r13
   19c9c:	74 f5       	brge	.+92     	; 0x19cfa <LCDWIKI_KBV::init_table8(void const*, int)+0x8a>
   19c9e:	f7 01       	movw	r30, r14
   19ca0:	64 91       	lpm	r22, Z
   19ca2:	31 96       	adiw	r30, 0x01	; 1
   19ca4:	14 91       	lpm	r17, Z
   19ca6:	f2 e0       	ldi	r31, 0x02	; 2
   19ca8:	ef 0e       	add	r14, r31
   19caa:	f1 1c       	adc	r15, r1
   19cac:	6f 37       	cpi	r22, 0x7F	; 127
   19cae:	79 f0       	breq	.+30     	; 0x19cce <LCDWIKI_KBV::init_table8(void const*, int)+0x5e>
   19cb0:	de 01       	movw	r26, r28
   19cb2:	11 96       	adiw	r26, 0x01	; 1
   19cb4:	30 e0       	ldi	r19, 0x00	; 0
   19cb6:	20 e0       	ldi	r18, 0x00	; 0
   19cb8:	ad 01       	movw	r20, r26
   19cba:	21 17       	cp	r18, r17
   19cbc:	b0 f4       	brcc	.+44     	; 0x19cea <LCDWIKI_KBV::init_table8(void const*, int)+0x7a>
   19cbe:	f7 01       	movw	r30, r14
   19cc0:	e2 0f       	add	r30, r18
   19cc2:	f3 1f       	adc	r31, r19
   19cc4:	e4 91       	lpm	r30, Z
   19cc6:	ed 93       	st	X+, r30
   19cc8:	2f 5f       	subi	r18, 0xFF	; 255
   19cca:	3f 4f       	sbci	r19, 0xFF	; 255
   19ccc:	f6 cf       	rjmp	.-20     	; 0x19cba <LCDWIKI_KBV::init_table8(void const*, int)+0x4a>
   19cce:	61 2f       	mov	r22, r17
   19cd0:	70 e0       	ldi	r23, 0x00	; 0
   19cd2:	90 e0       	ldi	r25, 0x00	; 0
   19cd4:	80 e0       	ldi	r24, 0x00	; 0
   19cd6:	0f 94 33 0f 	call	0x21e66	; 0x21e66 <delay>
   19cda:	10 e0       	ldi	r17, 0x00	; 0
   19cdc:	61 2f       	mov	r22, r17
   19cde:	70 e0       	ldi	r23, 0x00	; 0
   19ce0:	6e 5f       	subi	r22, 0xFE	; 254
   19ce2:	7f 4f       	sbci	r23, 0xFF	; 255
   19ce4:	c6 1a       	sub	r12, r22
   19ce6:	d7 0a       	sbc	r13, r23
   19ce8:	d7 cf       	rjmp	.-82     	; 0x19c98 <LCDWIKI_KBV::init_table8(void const*, int)+0x28>
   19cea:	e1 0e       	add	r14, r17
   19cec:	f1 1c       	adc	r15, r1
   19cee:	70 e0       	ldi	r23, 0x00	; 0
   19cf0:	21 2f       	mov	r18, r17
   19cf2:	c5 01       	movw	r24, r10
   19cf4:	0e 94 e7 c2 	call	0x185ce	; 0x185ce <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   19cf8:	f1 cf       	rjmp	.-30     	; 0x19cdc <LCDWIKI_KBV::init_table8(void const*, int)+0x6c>
   19cfa:	68 96       	adiw	r28, 0x18	; 24
   19cfc:	0f b6       	in	r0, 0x3f	; 63
   19cfe:	f8 94       	cli
   19d00:	de bf       	out	0x3e, r29	; 62
   19d02:	0f be       	out	0x3f, r0	; 63
   19d04:	cd bf       	out	0x3d, r28	; 61
   19d06:	df 91       	pop	r29
   19d08:	cf 91       	pop	r28
   19d0a:	1f 91       	pop	r17
   19d0c:	ff 90       	pop	r15
   19d0e:	ef 90       	pop	r14
   19d10:	df 90       	pop	r13
   19d12:	cf 90       	pop	r12
   19d14:	bf 90       	pop	r11
   19d16:	af 90       	pop	r10
   19d18:	08 95       	ret

00019d1a <LCDWIKI_KBV::start(unsigned int)>:
_ZN11LCDWIKI_KBV5startEj():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:954

void LCDWIKI_KBV::start(uint16_t ID)
{
   19d1a:	0f 93       	push	r16
   19d1c:	1f 93       	push	r17
   19d1e:	cf 93       	push	r28
   19d20:	df 93       	push	r29
   19d22:	ec 01       	movw	r28, r24
   19d24:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:955
	reset();
   19d26:	0e 94 91 c2 	call	0x18522	; 0x18522 <LCDWIKI_KBV::reset()>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:956
	delay(200);
   19d2a:	68 ec       	ldi	r22, 0xC8	; 200
   19d2c:	70 e0       	ldi	r23, 0x00	; 0
   19d2e:	80 e0       	ldi	r24, 0x00	; 0
   19d30:	90 e0       	ldi	r25, 0x00	; 0
   19d32:	0f 94 33 0f 	call	0x21e66	; 0x21e66 <delay>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:957
	switch(ID)
   19d36:	06 39       	cpi	r16, 0x96	; 150
   19d38:	17 47       	sbci	r17, 0x77	; 119
   19d3a:	b9 f5       	brne	.+110    	; 0x19daa <LCDWIKI_KBV::start(unsigned int)+0x90>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:962
	{
		

		case 0x7796:
			lcd_driver = ID_7796;
   19d3c:	89 e0       	ldi	r24, 0x09	; 9
   19d3e:	90 e0       	ldi	r25, 0x00	; 0
   19d40:	99 8f       	std	Y+25, r25	; 0x19
   19d42:	88 8f       	std	Y+24, r24	; 0x18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:965
			//WIDTH = 128,HEIGHT = 160;
			//width = WIDTH, height = HEIGHT;
			XC=ILI9341_COLADDRSET,YC=ILI9341_PAGEADDRSET,CC=ILI9341_MEMORYWRITE,RC=HX8357_RAMRD,SC1=0x33,SC2=0x37,MD=ILI9341_MADCTL,VL=0,R24BIT=0;
   19d44:	8a e2       	ldi	r24, 0x2A	; 42
   19d46:	90 e0       	ldi	r25, 0x00	; 0
   19d48:	9d 8f       	std	Y+29, r25	; 0x1d
   19d4a:	8c 8f       	std	Y+28, r24	; 0x1c
   19d4c:	8b e2       	ldi	r24, 0x2B	; 43
   19d4e:	90 e0       	ldi	r25, 0x00	; 0
   19d50:	9f 8f       	std	Y+31, r25	; 0x1f
   19d52:	8e 8f       	std	Y+30, r24	; 0x1e
   19d54:	8c e2       	ldi	r24, 0x2C	; 44
   19d56:	90 e0       	ldi	r25, 0x00	; 0
   19d58:	99 a3       	std	Y+33, r25	; 0x21
   19d5a:	88 a3       	std	Y+32, r24	; 0x20
   19d5c:	8e e2       	ldi	r24, 0x2E	; 46
   19d5e:	90 e0       	ldi	r25, 0x00	; 0
   19d60:	9b a3       	std	Y+35, r25	; 0x23
   19d62:	8a a3       	std	Y+34, r24	; 0x22
   19d64:	83 e3       	ldi	r24, 0x33	; 51
   19d66:	90 e0       	ldi	r25, 0x00	; 0
   19d68:	9d a3       	std	Y+37, r25	; 0x25
   19d6a:	8c a3       	std	Y+36, r24	; 0x24
   19d6c:	87 e3       	ldi	r24, 0x37	; 55
   19d6e:	90 e0       	ldi	r25, 0x00	; 0
   19d70:	9f a3       	std	Y+39, r25	; 0x27
   19d72:	8e a3       	std	Y+38, r24	; 0x26
   19d74:	86 e3       	ldi	r24, 0x36	; 54
   19d76:	90 e0       	ldi	r25, 0x00	; 0
   19d78:	99 a7       	std	Y+41, r25	; 0x29
   19d7a:	88 a7       	std	Y+40, r24	; 0x28
   19d7c:	1b a6       	std	Y+43, r1	; 0x2b
   19d7e:	1a a6       	std	Y+42, r1	; 0x2a
   19d80:	1d a6       	std	Y+45, r1	; 0x2d
   19d82:	1c a6       	std	Y+44, r1	; 0x2c
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:996
            	0xF0, 1, 0x69,
            	0x13, 0,
            	0x11, 0,
            	0x29, 0
			};
			init_table8(ST7796S_regValues, sizeof(ST7796S_regValues));
   19d84:	4c e6       	ldi	r20, 0x6C	; 108
   19d86:	50 e0       	ldi	r21, 0x00	; 0
   19d88:	6e e4       	ldi	r22, 0x4E	; 78
   19d8a:	7c e8       	ldi	r23, 0x8C	; 140
   19d8c:	ce 01       	movw	r24, r28
   19d8e:	0e 94 38 ce 	call	0x19c70	; 0x19c70 <LCDWIKI_KBV::init_table8(void const*, int)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:1002
			break;
		default:
			lcd_driver = ID_UNKNOWN;
			break;		
	}
	Set_Rotation(rotation); 
   19d92:	6e 89       	ldd	r22, Y+22	; 0x16
   19d94:	ce 01       	movw	r24, r28
   19d96:	0e 94 44 cc 	call	0x19888	; 0x19888 <LCDWIKI_KBV::Set_Rotation(unsigned char)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:1003
	Invert_Display(false);
   19d9a:	60 e0       	ldi	r22, 0x00	; 0
   19d9c:	ce 01       	movw	r24, r28
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:1004
}
   19d9e:	df 91       	pop	r29
   19da0:	cf 91       	pop	r28
   19da2:	1f 91       	pop	r17
   19da4:	0f 91       	pop	r16
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:1003
		default:
			lcd_driver = ID_UNKNOWN;
			break;		
	}
	Set_Rotation(rotation); 
	Invert_Display(false);
   19da6:	0c 94 c7 cd 	jmp	0x19b8e	; 0x19b8e <LCDWIKI_KBV::Invert_Display(bool)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:999
            	0x29, 0
			};
			init_table8(ST7796S_regValues, sizeof(ST7796S_regValues));
			break;
		default:
			lcd_driver = ID_UNKNOWN;
   19daa:	8f ef       	ldi	r24, 0xFF	; 255
   19dac:	90 e0       	ldi	r25, 0x00	; 0
   19dae:	99 8f       	std	Y+25, r25	; 0x19
   19db0:	88 8f       	std	Y+24, r24	; 0x18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:1000
			break;		
   19db2:	ef cf       	rjmp	.-34     	; 0x19d92 <LCDWIKI_KBV::start(unsigned int)+0x78>

00019db4 <LCDWIKI_KBV::Init_LCD()>:
_ZN11LCDWIKI_KBV8Init_LCDEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:233
}
*/

// Initialization lcd modules
void LCDWIKI_KBV::Init_LCD(void)
{
   19db4:	cf 93       	push	r28
   19db6:	df 93       	push	r29
   19db8:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:234
	reset();
   19dba:	0e 94 91 c2 	call	0x18522	; 0x18522 <LCDWIKI_KBV::reset()>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:235
	if(lcd_model == 0xFFFF)
   19dbe:	8a 8d       	ldd	r24, Y+26	; 0x1a
   19dc0:	9b 8d       	ldd	r25, Y+27	; 0x1b
   19dc2:	01 96       	adiw	r24, 0x01	; 1
   19dc4:	29 f4       	brne	.+10     	; 0x19dd0 <LCDWIKI_KBV::Init_LCD()+0x1c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:237
	{
		lcd_model = Read_ID(); 
   19dc6:	ce 01       	movw	r24, r28
   19dc8:	0e 94 ed ca 	call	0x195da	; 0x195da <LCDWIKI_KBV::Read_ID()>
   19dcc:	9b 8f       	std	Y+27, r25	; 0x1b
   19dce:	8a 8f       	std	Y+26, r24	; 0x1a
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:240
	}
//	uint16_t ID = Read_ID(); 
	start(lcd_model);
   19dd0:	6a 8d       	ldd	r22, Y+26	; 0x1a
   19dd2:	7b 8d       	ldd	r23, Y+27	; 0x1b
   19dd4:	ce 01       	movw	r24, r28
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:242
//	Set_Rotation(0);
}
   19dd6:	df 91       	pop	r29
   19dd8:	cf 91       	pop	r28
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:240
	if(lcd_model == 0xFFFF)
	{
		lcd_model = Read_ID(); 
	}
//	uint16_t ID = Read_ID(); 
	start(lcd_model);
   19dda:	0c 94 8d ce 	jmp	0x19d1a	; 0x19d1a <LCDWIKI_KBV::start(unsigned int)>

00019dde <delay_hus(unsigned long)>:
_Z9delay_husm():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:431
}

void LCDWIKI_TOUCH::TP_Set_State(uint8_t val)
{
	touch_statue = val;
}
   19dde:	0f 93       	push	r16
   19de0:	1f 93       	push	r17
   19de2:	40 e0       	ldi	r20, 0x00	; 0
   19de4:	04 2f       	mov	r16, r20
   19de6:	10 e0       	ldi	r17, 0x00	; 0
   19de8:	30 e0       	ldi	r19, 0x00	; 0
   19dea:	20 e0       	ldi	r18, 0x00	; 0
   19dec:	06 17       	cp	r16, r22
   19dee:	17 07       	cpc	r17, r23
   19df0:	28 07       	cpc	r18, r24
   19df2:	39 07       	cpc	r19, r25
   19df4:	18 f4       	brcc	.+6      	; 0x19dfc <delay_hus(unsigned long)+0x1e>
   19df6:	00 00       	nop
   19df8:	4f 5f       	subi	r20, 0xFF	; 255
   19dfa:	f4 cf       	rjmp	.-24     	; 0x19de4 <delay_hus(unsigned long)+0x6>
   19dfc:	1f 91       	pop	r17
   19dfe:	0f 91       	pop	r16
   19e00:	08 95       	ret

00019e02 <LCDWIKI_TOUCH::LCDWIKI_TOUCH(signed char, signed char, signed char, signed char, signed char, signed char)>:
_ZN13LCDWIKI_TOUCHC2Eaaaaaa():
   19e02:	8f 92       	push	r8
   19e04:	9f 92       	push	r9
   19e06:	af 92       	push	r10
   19e08:	bf 92       	push	r11
   19e0a:	cf 92       	push	r12
   19e0c:	df 92       	push	r13
   19e0e:	ef 92       	push	r14
   19e10:	ff 92       	push	r15
   19e12:	0f 93       	push	r16
   19e14:	1f 93       	push	r17
   19e16:	cf 93       	push	r28
   19e18:	df 93       	push	r29
   19e1a:	ec 01       	movw	r28, r24
   19e1c:	86 2e       	mov	r8, r22
   19e1e:	d4 2e       	mov	r13, r20
   19e20:	f2 2e       	mov	r15, r18
   19e22:	90 2e       	mov	r9, r16
   19e24:	86 2f       	mov	r24, r22
   19e26:	66 0f       	add	r22, r22
   19e28:	99 0b       	sbc	r25, r25
   19e2a:	fc 01       	movw	r30, r24
   19e2c:	e5 53       	subi	r30, 0x35	; 53
   19e2e:	f1 47       	sbci	r31, 0x71	; 113
   19e30:	e4 91       	lpm	r30, Z
   19e32:	f0 e0       	ldi	r31, 0x00	; 0
   19e34:	ee 0f       	add	r30, r30
   19e36:	ff 1f       	adc	r31, r31
   19e38:	ef 5e       	subi	r30, 0xEF	; 239
   19e3a:	f0 47       	sbci	r31, 0x70	; 112
   19e3c:	25 91       	lpm	r18, Z+
   19e3e:	34 91       	lpm	r19, Z
   19e40:	3a 8b       	std	Y+18, r19	; 0x12
   19e42:	29 8b       	std	Y+17, r18	; 0x11
   19e44:	04 2f       	mov	r16, r20
   19e46:	44 0f       	add	r20, r20
   19e48:	11 0b       	sbc	r17, r17
   19e4a:	f8 01       	movw	r30, r16
   19e4c:	e5 53       	subi	r30, 0x35	; 53
   19e4e:	f1 47       	sbci	r31, 0x71	; 113
   19e50:	e4 91       	lpm	r30, Z
   19e52:	f0 e0       	ldi	r31, 0x00	; 0
   19e54:	ee 0f       	add	r30, r30
   19e56:	ff 1f       	adc	r31, r31
   19e58:	ef 5e       	subi	r30, 0xEF	; 239
   19e5a:	f0 47       	sbci	r31, 0x70	; 112
   19e5c:	25 91       	lpm	r18, Z+
   19e5e:	34 91       	lpm	r19, Z
   19e60:	3c 8b       	std	Y+20, r19	; 0x14
   19e62:	2b 8b       	std	Y+19, r18	; 0x13
   19e64:	af 2d       	mov	r26, r15
   19e66:	0f 2c       	mov	r0, r15
   19e68:	00 0c       	add	r0, r0
   19e6a:	bb 0b       	sbc	r27, r27
   19e6c:	fd 01       	movw	r30, r26
   19e6e:	e5 53       	subi	r30, 0x35	; 53
   19e70:	f1 47       	sbci	r31, 0x71	; 113
   19e72:	e4 91       	lpm	r30, Z
   19e74:	f0 e0       	ldi	r31, 0x00	; 0
   19e76:	ee 0f       	add	r30, r30
   19e78:	ff 1f       	adc	r31, r31
   19e7a:	ef 5f       	subi	r30, 0xFF	; 255
   19e7c:	f0 47       	sbci	r31, 0x70	; 112
   19e7e:	25 91       	lpm	r18, Z+
   19e80:	34 91       	lpm	r19, Z
   19e82:	3e 8b       	std	Y+22, r19	; 0x16
   19e84:	2d 8b       	std	Y+21, r18	; 0x15
   19e86:	69 2d       	mov	r22, r9
   19e88:	09 2c       	mov	r0, r9
   19e8a:	00 0c       	add	r0, r0
   19e8c:	77 0b       	sbc	r23, r23
   19e8e:	fb 01       	movw	r30, r22
   19e90:	e5 53       	subi	r30, 0x35	; 53
   19e92:	f1 47       	sbci	r31, 0x71	; 113
   19e94:	e4 91       	lpm	r30, Z
   19e96:	f0 e0       	ldi	r31, 0x00	; 0
   19e98:	ee 0f       	add	r30, r30
   19e9a:	ff 1f       	adc	r31, r31
   19e9c:	ef 5e       	subi	r30, 0xEF	; 239
   19e9e:	f0 47       	sbci	r31, 0x70	; 112
   19ea0:	25 91       	lpm	r18, Z+
   19ea2:	34 91       	lpm	r19, Z
   19ea4:	38 8f       	std	Y+24, r19	; 0x18
   19ea6:	2f 8b       	std	Y+23, r18	; 0x17
   19ea8:	4e 2d       	mov	r20, r14
   19eaa:	0e 2c       	mov	r0, r14
   19eac:	00 0c       	add	r0, r0
   19eae:	55 0b       	sbc	r21, r21
   19eb0:	fa 01       	movw	r30, r20
   19eb2:	e5 53       	subi	r30, 0x35	; 53
   19eb4:	f1 47       	sbci	r31, 0x71	; 113
   19eb6:	e4 91       	lpm	r30, Z
   19eb8:	f0 e0       	ldi	r31, 0x00	; 0
   19eba:	ee 0f       	add	r30, r30
   19ebc:	ff 1f       	adc	r31, r31
   19ebe:	ef 5f       	subi	r30, 0xFF	; 255
   19ec0:	f0 47       	sbci	r31, 0x70	; 112
   19ec2:	25 91       	lpm	r18, Z+
   19ec4:	34 91       	lpm	r19, Z
   19ec6:	3a 8f       	std	Y+26, r19	; 0x1a
   19ec8:	29 8f       	std	Y+25, r18	; 0x19
   19eca:	2c 2d       	mov	r18, r12
   19ecc:	0c 2c       	mov	r0, r12
   19ece:	00 0c       	add	r0, r0
   19ed0:	33 0b       	sbc	r19, r19
   19ed2:	f9 01       	movw	r30, r18
   19ed4:	e5 53       	subi	r30, 0x35	; 53
   19ed6:	f1 47       	sbci	r31, 0x71	; 113
   19ed8:	e4 91       	lpm	r30, Z
   19eda:	f0 e0       	ldi	r31, 0x00	; 0
   19edc:	ee 0f       	add	r30, r30
   19ede:	ff 1f       	adc	r31, r31
   19ee0:	ef 5e       	subi	r30, 0xEF	; 239
   19ee2:	f0 47       	sbci	r31, 0x70	; 112
   19ee4:	a5 90       	lpm	r10, Z+
   19ee6:	b4 90       	lpm	r11, Z
   19ee8:	bc 8e       	std	Y+28, r11	; 0x1c
   19eea:	ab 8e       	std	Y+27, r10	; 0x1b
   19eec:	fc 01       	movw	r30, r24
   19eee:	eb 56       	subi	r30, 0x6B	; 107
   19ef0:	f1 47       	sbci	r31, 0x71	; 113
   19ef2:	e4 91       	lpm	r30, Z
   19ef4:	ed 8f       	std	Y+29, r30	; 0x1d
   19ef6:	f8 01       	movw	r30, r16
   19ef8:	eb 56       	subi	r30, 0x6B	; 107
   19efa:	f1 47       	sbci	r31, 0x71	; 113
   19efc:	e4 91       	lpm	r30, Z
   19efe:	ee 8f       	std	Y+30, r30	; 0x1e
   19f00:	fd 01       	movw	r30, r26
   19f02:	eb 56       	subi	r30, 0x6B	; 107
   19f04:	f1 47       	sbci	r31, 0x71	; 113
   19f06:	e4 91       	lpm	r30, Z
   19f08:	ef 8f       	std	Y+31, r30	; 0x1f
   19f0a:	fb 01       	movw	r30, r22
   19f0c:	eb 56       	subi	r30, 0x6B	; 107
   19f0e:	f1 47       	sbci	r31, 0x71	; 113
   19f10:	e4 91       	lpm	r30, Z
   19f12:	e8 a3       	std	Y+32, r30	; 0x20
   19f14:	fa 01       	movw	r30, r20
   19f16:	eb 56       	subi	r30, 0x6B	; 107
   19f18:	f1 47       	sbci	r31, 0x71	; 113
   19f1a:	e4 91       	lpm	r30, Z
   19f1c:	e9 a3       	std	Y+33, r30	; 0x21
   19f1e:	f9 01       	movw	r30, r18
   19f20:	eb 56       	subi	r30, 0x6B	; 107
   19f22:	f1 47       	sbci	r31, 0x71	; 113
   19f24:	e4 91       	lpm	r30, Z
   19f26:	ea a3       	std	Y+34, r30	; 0x22
   19f28:	61 e0       	ldi	r22, 0x01	; 1
   19f2a:	88 2d       	mov	r24, r8
   19f2c:	0f 94 24 10 	call	0x22048	; 0x22048 <pinMode>
   19f30:	61 e0       	ldi	r22, 0x01	; 1
   19f32:	8d 2d       	mov	r24, r13
   19f34:	0f 94 24 10 	call	0x22048	; 0x22048 <pinMode>
   19f38:	60 e0       	ldi	r22, 0x00	; 0
   19f3a:	8f 2d       	mov	r24, r15
   19f3c:	0f 94 24 10 	call	0x22048	; 0x22048 <pinMode>
   19f40:	61 e0       	ldi	r22, 0x01	; 1
   19f42:	89 2d       	mov	r24, r9
   19f44:	0f 94 24 10 	call	0x22048	; 0x22048 <pinMode>
   19f48:	60 e0       	ldi	r22, 0x00	; 0
   19f4a:	8e 2d       	mov	r24, r14
   19f4c:	0f 94 24 10 	call	0x22048	; 0x22048 <pinMode>
   19f50:	61 e0       	ldi	r22, 0x01	; 1
   19f52:	8c 2d       	mov	r24, r12
   19f54:	0f 94 24 10 	call	0x22048	; 0x22048 <pinMode>
   19f58:	1c 86       	std	Y+12, r1	; 0x0c
   19f5a:	1d 86       	std	Y+13, r1	; 0x0d
   19f5c:	1e 86       	std	Y+14, r1	; 0x0e
   19f5e:	1f 86       	std	Y+15, r1	; 0x0f
   19f60:	18 8a       	std	Y+16, r1	; 0x10
   19f62:	19 86       	std	Y+9, r1	; 0x09
   19f64:	18 86       	std	Y+8, r1	; 0x08
   19f66:	1b 86       	std	Y+11, r1	; 0x0b
   19f68:	1a 86       	std	Y+10, r1	; 0x0a
   19f6a:	19 82       	std	Y+1, r1	; 0x01
   19f6c:	18 82       	st	Y, r1
   19f6e:	1b 82       	std	Y+3, r1	; 0x03
   19f70:	1a 82       	std	Y+2, r1	; 0x02
   19f72:	8f ef       	ldi	r24, 0xFF	; 255
   19f74:	9f ef       	ldi	r25, 0xFF	; 255
   19f76:	9d 83       	std	Y+5, r25	; 0x05
   19f78:	8c 83       	std	Y+4, r24	; 0x04
   19f7a:	9f 83       	std	Y+7, r25	; 0x07
   19f7c:	8e 83       	std	Y+6, r24	; 0x06
   19f7e:	df 91       	pop	r29
   19f80:	cf 91       	pop	r28
   19f82:	1f 91       	pop	r17
   19f84:	0f 91       	pop	r16
   19f86:	ff 90       	pop	r15
   19f88:	ef 90       	pop	r14
   19f8a:	df 90       	pop	r13
   19f8c:	cf 90       	pop	r12
   19f8e:	bf 90       	pop	r11
   19f90:	af 90       	pop	r10
   19f92:	9f 90       	pop	r9
   19f94:	8f 90       	pop	r8
   19f96:	08 95       	ret

00019f98 <LCDWIKI_TOUCH::TP_GetOnOff()>:
_ZN13LCDWIKI_TOUCH11TP_GetOnOffEv():
   19f98:	fc 01       	movw	r30, r24
   19f9a:	80 89       	ldd	r24, Z+16	; 0x10
   19f9c:	08 95       	ret

00019f9e <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char)>:
_ZN13LCDWIKI_TOUCH22TP_Write_Byte_LowSpeedEh():
   19f9e:	ef 92       	push	r14
   19fa0:	ff 92       	push	r15
   19fa2:	0f 93       	push	r16
   19fa4:	1f 93       	push	r17
   19fa6:	cf 93       	push	r28
   19fa8:	df 93       	push	r29
   19faa:	ec 01       	movw	r28, r24
   19fac:	f1 2c       	mov	r15, r1
   19fae:	e1 2c       	mov	r14, r1
   19fb0:	06 2f       	mov	r16, r22
   19fb2:	10 e0       	ldi	r17, 0x00	; 0
   19fb4:	ef 89       	ldd	r30, Y+23	; 0x17
   19fb6:	f8 8d       	ldd	r31, Y+24	; 0x18
   19fb8:	88 a1       	ldd	r24, Y+32	; 0x20
   19fba:	98 01       	movw	r18, r16
   19fbc:	0e 2c       	mov	r0, r14
   19fbe:	02 c0       	rjmp	.+4      	; 0x19fc4 <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char)+0x26>
   19fc0:	35 95       	asr	r19
   19fc2:	27 95       	ror	r18
   19fc4:	0a 94       	dec	r0
   19fc6:	e2 f7       	brpl	.-8      	; 0x19fc0 <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char)+0x22>
   19fc8:	90 81       	ld	r25, Z
   19fca:	20 ff       	sbrs	r18, 0
   19fcc:	2f c0       	rjmp	.+94     	; 0x1a02c <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char)+0x8e>
   19fce:	89 2b       	or	r24, r25
   19fd0:	80 83       	st	Z, r24
   19fd2:	60 e5       	ldi	r22, 0x50	; 80
   19fd4:	70 e0       	ldi	r23, 0x00	; 0
   19fd6:	80 e0       	ldi	r24, 0x00	; 0
   19fd8:	90 e0       	ldi	r25, 0x00	; 0
   19fda:	0e 94 ef ce 	call	0x19dde	; 0x19dde <delay_hus(unsigned long)>
   19fde:	eb 89       	ldd	r30, Y+19	; 0x13
   19fe0:	fc 89       	ldd	r31, Y+20	; 0x14
   19fe2:	90 81       	ld	r25, Z
   19fe4:	8e 8d       	ldd	r24, Y+30	; 0x1e
   19fe6:	80 95       	com	r24
   19fe8:	89 23       	and	r24, r25
   19fea:	80 83       	st	Z, r24
   19fec:	68 e7       	ldi	r22, 0x78	; 120
   19fee:	70 e0       	ldi	r23, 0x00	; 0
   19ff0:	80 e0       	ldi	r24, 0x00	; 0
   19ff2:	90 e0       	ldi	r25, 0x00	; 0
   19ff4:	0e 94 ef ce 	call	0x19dde	; 0x19dde <delay_hus(unsigned long)>
   19ff8:	eb 89       	ldd	r30, Y+19	; 0x13
   19ffa:	fc 89       	ldd	r31, Y+20	; 0x14
   19ffc:	80 81       	ld	r24, Z
   19ffe:	9e 8d       	ldd	r25, Y+30	; 0x1e
   1a000:	89 2b       	or	r24, r25
   1a002:	80 83       	st	Z, r24
   1a004:	68 e7       	ldi	r22, 0x78	; 120
   1a006:	70 e0       	ldi	r23, 0x00	; 0
   1a008:	80 e0       	ldi	r24, 0x00	; 0
   1a00a:	90 e0       	ldi	r25, 0x00	; 0
   1a00c:	0e 94 ef ce 	call	0x19dde	; 0x19dde <delay_hus(unsigned long)>
   1a010:	8f ef       	ldi	r24, 0xFF	; 255
   1a012:	e8 1a       	sub	r14, r24
   1a014:	f8 0a       	sbc	r15, r24
   1a016:	88 e0       	ldi	r24, 0x08	; 8
   1a018:	e8 16       	cp	r14, r24
   1a01a:	f1 04       	cpc	r15, r1
   1a01c:	59 f6       	brne	.-106    	; 0x19fb4 <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char)+0x16>
   1a01e:	df 91       	pop	r29
   1a020:	cf 91       	pop	r28
   1a022:	1f 91       	pop	r17
   1a024:	0f 91       	pop	r16
   1a026:	ff 90       	pop	r15
   1a028:	ef 90       	pop	r14
   1a02a:	08 95       	ret
   1a02c:	80 95       	com	r24
   1a02e:	89 23       	and	r24, r25
   1a030:	cf cf       	rjmp	.-98     	; 0x19fd0 <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char)+0x32>

0001a032 <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char)>:
_ZN13LCDWIKI_TOUCH15TP_SetBacklightEh():
   1a032:	1f 93       	push	r17
   1a034:	cf 93       	push	r28
   1a036:	df 93       	push	r29
   1a038:	ec 01       	movw	r28, r24
   1a03a:	16 2f       	mov	r17, r22
   1a03c:	6f 87       	std	Y+15, r22	; 0x0f
   1a03e:	e9 89       	ldd	r30, Y+17	; 0x11
   1a040:	fa 89       	ldd	r31, Y+18	; 0x12
   1a042:	90 81       	ld	r25, Z
   1a044:	8d 8d       	ldd	r24, Y+29	; 0x1d
   1a046:	80 95       	com	r24
   1a048:	89 23       	and	r24, r25
   1a04a:	80 83       	st	Z, r24
   1a04c:	eb 8d       	ldd	r30, Y+27	; 0x1b
   1a04e:	fc 8d       	ldd	r31, Y+28	; 0x1c
   1a050:	90 81       	ld	r25, Z
   1a052:	8a a1       	ldd	r24, Y+34	; 0x22
   1a054:	80 95       	com	r24
   1a056:	89 23       	and	r24, r25
   1a058:	80 83       	st	Z, r24
   1a05a:	68 ec       	ldi	r22, 0xC8	; 200
   1a05c:	70 e0       	ldi	r23, 0x00	; 0
   1a05e:	80 e0       	ldi	r24, 0x00	; 0
   1a060:	90 e0       	ldi	r25, 0x00	; 0
   1a062:	0e 94 ef ce 	call	0x19dde	; 0x19dde <delay_hus(unsigned long)>
   1a066:	e9 89       	ldd	r30, Y+17	; 0x11
   1a068:	fa 89       	ldd	r31, Y+18	; 0x12
   1a06a:	80 81       	ld	r24, Z
   1a06c:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a06e:	89 2b       	or	r24, r25
   1a070:	80 83       	st	Z, r24
   1a072:	eb 8d       	ldd	r30, Y+27	; 0x1b
   1a074:	fc 8d       	ldd	r31, Y+28	; 0x1c
   1a076:	80 81       	ld	r24, Z
   1a078:	9a a1       	ldd	r25, Y+34	; 0x22
   1a07a:	89 2b       	or	r24, r25
   1a07c:	80 83       	st	Z, r24
   1a07e:	65 e5       	ldi	r22, 0x55	; 85
   1a080:	ce 01       	movw	r24, r28
   1a082:	0e 94 cf cf 	call	0x19f9e	; 0x19f9e <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char)>
   1a086:	61 2f       	mov	r22, r17
   1a088:	ce 01       	movw	r24, r28
   1a08a:	df 91       	pop	r29
   1a08c:	cf 91       	pop	r28
   1a08e:	1f 91       	pop	r17
   1a090:	0c 94 cf cf 	jmp	0x19f9e	; 0x19f9e <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char)>

0001a094 <LCDWIKI_TOUCH::TP_Init(unsigned char, unsigned int, unsigned int)>:
_ZN13LCDWIKI_TOUCH7TP_InitEhjj():
   1a094:	fc 01       	movw	r30, r24
   1a096:	a7 89       	ldd	r26, Z+23	; 0x17
   1a098:	b0 8d       	ldd	r27, Z+24	; 0x18
   1a09a:	8c 91       	ld	r24, X
   1a09c:	90 a1       	ldd	r25, Z+32	; 0x20
   1a09e:	89 2b       	or	r24, r25
   1a0a0:	8c 93       	st	X, r24
   1a0a2:	a3 89       	ldd	r26, Z+19	; 0x13
   1a0a4:	b4 89       	ldd	r27, Z+20	; 0x14
   1a0a6:	8c 91       	ld	r24, X
   1a0a8:	96 8d       	ldd	r25, Z+30	; 0x1e
   1a0aa:	89 2b       	or	r24, r25
   1a0ac:	8c 93       	st	X, r24
   1a0ae:	a1 89       	ldd	r26, Z+17	; 0x11
   1a0b0:	b2 89       	ldd	r27, Z+18	; 0x12
   1a0b2:	8c 91       	ld	r24, X
   1a0b4:	95 8d       	ldd	r25, Z+29	; 0x1d
   1a0b6:	89 2b       	or	r24, r25
   1a0b8:	8c 93       	st	X, r24
   1a0ba:	a3 8d       	ldd	r26, Z+27	; 0x1b
   1a0bc:	b4 8d       	ldd	r27, Z+28	; 0x1c
   1a0be:	8c 91       	ld	r24, X
   1a0c0:	92 a1       	ldd	r25, Z+34	; 0x22
   1a0c2:	89 2b       	or	r24, r25
   1a0c4:	8c 93       	st	X, r24
   1a0c6:	51 87       	std	Z+9, r21	; 0x09
   1a0c8:	40 87       	std	Z+8, r20	; 0x08
   1a0ca:	33 87       	std	Z+11, r19	; 0x0b
   1a0cc:	22 87       	std	Z+10, r18	; 0x0a
_ZN13LCDWIKI_TOUCH16LCD_Set_RotationEh():
   1a0ce:	66 87       	std	Z+14, r22	; 0x0e
_ZN13LCDWIKI_TOUCH7TP_InitEhjj():
   1a0d0:	6a e0       	ldi	r22, 0x0A	; 10
   1a0d2:	cf 01       	movw	r24, r30
   1a0d4:	0c 94 19 d0 	jmp	0x1a032	; 0x1a032 <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char)>

0001a0d8 <LCDWIKI_TOUCH::TP_SetOnOff(unsigned char)>:
_ZN13LCDWIKI_TOUCH11TP_SetOnOffEh():
   1a0d8:	1f 93       	push	r17
   1a0da:	cf 93       	push	r28
   1a0dc:	df 93       	push	r29
   1a0de:	ec 01       	movw	r28, r24
   1a0e0:	16 2f       	mov	r17, r22
   1a0e2:	68 8b       	std	Y+16, r22	; 0x10
   1a0e4:	e9 89       	ldd	r30, Y+17	; 0x11
   1a0e6:	fa 89       	ldd	r31, Y+18	; 0x12
   1a0e8:	90 81       	ld	r25, Z
   1a0ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
   1a0ec:	80 95       	com	r24
   1a0ee:	89 23       	and	r24, r25
   1a0f0:	80 83       	st	Z, r24
   1a0f2:	eb 8d       	ldd	r30, Y+27	; 0x1b
   1a0f4:	fc 8d       	ldd	r31, Y+28	; 0x1c
   1a0f6:	90 81       	ld	r25, Z
   1a0f8:	8a a1       	ldd	r24, Y+34	; 0x22
   1a0fa:	80 95       	com	r24
   1a0fc:	89 23       	and	r24, r25
   1a0fe:	80 83       	st	Z, r24
   1a100:	68 ec       	ldi	r22, 0xC8	; 200
   1a102:	70 e0       	ldi	r23, 0x00	; 0
   1a104:	80 e0       	ldi	r24, 0x00	; 0
   1a106:	90 e0       	ldi	r25, 0x00	; 0
   1a108:	0e 94 ef ce 	call	0x19dde	; 0x19dde <delay_hus(unsigned long)>
   1a10c:	e9 89       	ldd	r30, Y+17	; 0x11
   1a10e:	fa 89       	ldd	r31, Y+18	; 0x12
   1a110:	80 81       	ld	r24, Z
   1a112:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a114:	89 2b       	or	r24, r25
   1a116:	80 83       	st	Z, r24
   1a118:	eb 8d       	ldd	r30, Y+27	; 0x1b
   1a11a:	fc 8d       	ldd	r31, Y+28	; 0x1c
   1a11c:	80 81       	ld	r24, Z
   1a11e:	9a a1       	ldd	r25, Y+34	; 0x22
   1a120:	89 2b       	or	r24, r25
   1a122:	80 83       	st	Z, r24
   1a124:	66 e5       	ldi	r22, 0x56	; 86
   1a126:	ce 01       	movw	r24, r28
   1a128:	0e 94 cf cf 	call	0x19f9e	; 0x19f9e <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char)>
   1a12c:	61 2f       	mov	r22, r17
   1a12e:	ce 01       	movw	r24, r28
   1a130:	df 91       	pop	r29
   1a132:	cf 91       	pop	r28
   1a134:	1f 91       	pop	r17
   1a136:	0c 94 cf cf 	jmp	0x19f9e	; 0x19f9e <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char)>

0001a13a <LCDWIKI_TOUCH::TP_Write_Byte(unsigned char)>:
_ZN13LCDWIKI_TOUCH13TP_Write_ByteEh():
   1a13a:	fc 01       	movw	r30, r24
   1a13c:	28 e0       	ldi	r18, 0x08	; 8
   1a13e:	30 e0       	ldi	r19, 0x00	; 0
   1a140:	90 e8       	ldi	r25, 0x80	; 128
   1a142:	a7 89       	ldd	r26, Z+23	; 0x17
   1a144:	b0 8d       	ldd	r27, Z+24	; 0x18
   1a146:	80 a1       	ldd	r24, Z+32	; 0x20
   1a148:	46 2f       	mov	r20, r22
   1a14a:	49 23       	and	r20, r25
   1a14c:	a9 f0       	breq	.+42     	; 0x1a178 <LCDWIKI_TOUCH::TP_Write_Byte(unsigned char)+0x3e>
   1a14e:	4c 91       	ld	r20, X
   1a150:	84 2b       	or	r24, r20
   1a152:	8c 93       	st	X, r24
   1a154:	a3 89       	ldd	r26, Z+19	; 0x13
   1a156:	b4 89       	ldd	r27, Z+20	; 0x14
   1a158:	4c 91       	ld	r20, X
   1a15a:	86 8d       	ldd	r24, Z+30	; 0x1e
   1a15c:	80 95       	com	r24
   1a15e:	84 23       	and	r24, r20
   1a160:	8c 93       	st	X, r24
   1a162:	a3 89       	ldd	r26, Z+19	; 0x13
   1a164:	b4 89       	ldd	r27, Z+20	; 0x14
   1a166:	8c 91       	ld	r24, X
   1a168:	46 8d       	ldd	r20, Z+30	; 0x1e
   1a16a:	84 2b       	or	r24, r20
   1a16c:	8c 93       	st	X, r24
   1a16e:	96 95       	lsr	r25
   1a170:	21 50       	subi	r18, 0x01	; 1
   1a172:	31 09       	sbc	r19, r1
   1a174:	31 f7       	brne	.-52     	; 0x1a142 <LCDWIKI_TOUCH::TP_Write_Byte(unsigned char)+0x8>
   1a176:	08 95       	ret
   1a178:	4c 91       	ld	r20, X
   1a17a:	80 95       	com	r24
   1a17c:	84 23       	and	r24, r20
   1a17e:	e9 cf       	rjmp	.-46     	; 0x1a152 <LCDWIKI_TOUCH::TP_Write_Byte(unsigned char)+0x18>

0001a180 <LCDWIKI_TOUCH::TP_Read_ADC(unsigned char)>:
_ZN13LCDWIKI_TOUCH11TP_Read_ADCEh():
   1a180:	cf 93       	push	r28
   1a182:	df 93       	push	r29
   1a184:	ec 01       	movw	r28, r24
   1a186:	e9 89       	ldd	r30, Y+17	; 0x11
   1a188:	fa 89       	ldd	r31, Y+18	; 0x12
   1a18a:	90 81       	ld	r25, Z
   1a18c:	8d 8d       	ldd	r24, Y+29	; 0x1d
   1a18e:	80 95       	com	r24
   1a190:	89 23       	and	r24, r25
   1a192:	80 83       	st	Z, r24
   1a194:	eb 89       	ldd	r30, Y+19	; 0x13
   1a196:	fc 89       	ldd	r31, Y+20	; 0x14
   1a198:	90 81       	ld	r25, Z
   1a19a:	8e 8d       	ldd	r24, Y+30	; 0x1e
   1a19c:	80 95       	com	r24
   1a19e:	89 23       	and	r24, r25
   1a1a0:	80 83       	st	Z, r24
   1a1a2:	ef 89       	ldd	r30, Y+23	; 0x17
   1a1a4:	f8 8d       	ldd	r31, Y+24	; 0x18
   1a1a6:	90 81       	ld	r25, Z
   1a1a8:	88 a1       	ldd	r24, Y+32	; 0x20
   1a1aa:	80 95       	com	r24
   1a1ac:	89 23       	and	r24, r25
   1a1ae:	80 83       	st	Z, r24
   1a1b0:	ce 01       	movw	r24, r28
   1a1b2:	0e 94 9d d0 	call	0x1a13a	; 0x1a13a <LCDWIKI_TOUCH::TP_Write_Byte(unsigned char)>
   1a1b6:	eb 89       	ldd	r30, Y+19	; 0x13
   1a1b8:	fc 89       	ldd	r31, Y+20	; 0x14
   1a1ba:	90 81       	ld	r25, Z
   1a1bc:	8e 8d       	ldd	r24, Y+30	; 0x1e
   1a1be:	80 95       	com	r24
   1a1c0:	89 23       	and	r24, r25
   1a1c2:	80 83       	st	Z, r24
   1a1c4:	61 e0       	ldi	r22, 0x01	; 1
   1a1c6:	70 e0       	ldi	r23, 0x00	; 0
   1a1c8:	80 e0       	ldi	r24, 0x00	; 0
   1a1ca:	90 e0       	ldi	r25, 0x00	; 0
   1a1cc:	0e 94 ef ce 	call	0x19dde	; 0x19dde <delay_hus(unsigned long)>
   1a1d0:	eb 89       	ldd	r30, Y+19	; 0x13
   1a1d2:	fc 89       	ldd	r31, Y+20	; 0x14
   1a1d4:	80 81       	ld	r24, Z
   1a1d6:	9e 8d       	ldd	r25, Y+30	; 0x1e
   1a1d8:	89 2b       	or	r24, r25
   1a1da:	80 83       	st	Z, r24
   1a1dc:	eb 89       	ldd	r30, Y+19	; 0x13
   1a1de:	fc 89       	ldd	r31, Y+20	; 0x14
   1a1e0:	90 81       	ld	r25, Z
   1a1e2:	8e 8d       	ldd	r24, Y+30	; 0x1e
   1a1e4:	80 95       	com	r24
   1a1e6:	89 23       	and	r24, r25
   1a1e8:	80 83       	st	Z, r24
   1a1ea:	30 e1       	ldi	r19, 0x10	; 16
   1a1ec:	90 e0       	ldi	r25, 0x00	; 0
   1a1ee:	80 e0       	ldi	r24, 0x00	; 0
   1a1f0:	88 0f       	add	r24, r24
   1a1f2:	99 1f       	adc	r25, r25
   1a1f4:	eb 89       	ldd	r30, Y+19	; 0x13
   1a1f6:	fc 89       	ldd	r31, Y+20	; 0x14
   1a1f8:	40 81       	ld	r20, Z
   1a1fa:	2e 8d       	ldd	r18, Y+30	; 0x1e
   1a1fc:	20 95       	com	r18
   1a1fe:	24 23       	and	r18, r20
   1a200:	20 83       	st	Z, r18
   1a202:	eb 89       	ldd	r30, Y+19	; 0x13
   1a204:	fc 89       	ldd	r31, Y+20	; 0x14
   1a206:	20 81       	ld	r18, Z
   1a208:	4e 8d       	ldd	r20, Y+30	; 0x1e
   1a20a:	24 2b       	or	r18, r20
   1a20c:	20 83       	st	Z, r18
   1a20e:	ed 89       	ldd	r30, Y+21	; 0x15
   1a210:	fe 89       	ldd	r31, Y+22	; 0x16
   1a212:	20 81       	ld	r18, Z
   1a214:	4f 8d       	ldd	r20, Y+31	; 0x1f
   1a216:	24 23       	and	r18, r20
   1a218:	09 f0       	breq	.+2      	; 0x1a21c <LCDWIKI_TOUCH::TP_Read_ADC(unsigned char)+0x9c>
   1a21a:	01 96       	adiw	r24, 0x01	; 1
   1a21c:	31 50       	subi	r19, 0x01	; 1
   1a21e:	41 f7       	brne	.-48     	; 0x1a1f0 <LCDWIKI_TOUCH::TP_Read_ADC(unsigned char)+0x70>
   1a220:	e9 89       	ldd	r30, Y+17	; 0x11
   1a222:	fa 89       	ldd	r31, Y+18	; 0x12
   1a224:	20 81       	ld	r18, Z
   1a226:	3d 8d       	ldd	r19, Y+29	; 0x1d
   1a228:	23 2b       	or	r18, r19
   1a22a:	20 83       	st	Z, r18
   1a22c:	24 e0       	ldi	r18, 0x04	; 4
   1a22e:	96 95       	lsr	r25
   1a230:	87 95       	ror	r24
   1a232:	2a 95       	dec	r18
   1a234:	e1 f7       	brne	.-8      	; 0x1a22e <LCDWIKI_TOUCH::TP_Read_ADC(unsigned char)+0xae>
   1a236:	df 91       	pop	r29
   1a238:	cf 91       	pop	r28
   1a23a:	08 95       	ret

0001a23c <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)>:
_ZN13LCDWIKI_TOUCH10TP_Read_XYEh():
   1a23c:	9f 92       	push	r9
   1a23e:	af 92       	push	r10
   1a240:	bf 92       	push	r11
   1a242:	cf 92       	push	r12
   1a244:	df 92       	push	r13
   1a246:	ef 92       	push	r14
   1a248:	ff 92       	push	r15
   1a24a:	0f 93       	push	r16
   1a24c:	1f 93       	push	r17
   1a24e:	cf 93       	push	r28
   1a250:	df 93       	push	r29
   1a252:	00 d0       	rcall	.+0      	; 0x1a254 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)+0x18>
   1a254:	00 d0       	rcall	.+0      	; 0x1a256 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)+0x1a>
   1a256:	00 d0       	rcall	.+0      	; 0x1a258 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)+0x1c>
   1a258:	1f 92       	push	r1
   1a25a:	cd b7       	in	r28, 0x3d	; 61
   1a25c:	de b7       	in	r29, 0x3e	; 62
   1a25e:	5c 01       	movw	r10, r24
   1a260:	96 2e       	mov	r9, r22
   1a262:	8e 01       	movw	r16, r28
   1a264:	0f 5f       	subi	r16, 0xFF	; 255
   1a266:	1f 4f       	sbci	r17, 0xFF	; 255
   1a268:	6e 01       	movw	r12, r28
   1a26a:	8b e0       	ldi	r24, 0x0B	; 11
   1a26c:	c8 0e       	add	r12, r24
   1a26e:	d1 1c       	adc	r13, r1
   1a270:	78 01       	movw	r14, r16
   1a272:	69 2d       	mov	r22, r9
   1a274:	c5 01       	movw	r24, r10
   1a276:	0e 94 c0 d0 	call	0x1a180	; 0x1a180 <LCDWIKI_TOUCH::TP_Read_ADC(unsigned char)>
   1a27a:	d7 01       	movw	r26, r14
   1a27c:	8d 93       	st	X+, r24
   1a27e:	9d 93       	st	X+, r25
   1a280:	7d 01       	movw	r14, r26
   1a282:	ac 15       	cp	r26, r12
   1a284:	bd 05       	cpc	r27, r13
   1a286:	a9 f7       	brne	.-22     	; 0x1a272 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)+0x36>
   1a288:	a8 01       	movw	r20, r16
   1a28a:	48 5f       	subi	r20, 0xF8	; 248
   1a28c:	5f 4f       	sbci	r21, 0xFF	; 255
   1a28e:	f8 01       	movw	r30, r16
   1a290:	d8 01       	movw	r26, r16
   1a292:	8d 91       	ld	r24, X+
   1a294:	9c 91       	ld	r25, X
   1a296:	11 97       	sbiw	r26, 0x01	; 1
   1a298:	22 81       	ldd	r18, Z+2	; 0x02
   1a29a:	33 81       	ldd	r19, Z+3	; 0x03
   1a29c:	28 17       	cp	r18, r24
   1a29e:	39 07       	cpc	r19, r25
   1a2a0:	20 f4       	brcc	.+8      	; 0x1a2aa <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)+0x6e>
   1a2a2:	2d 93       	st	X+, r18
   1a2a4:	3c 93       	st	X, r19
   1a2a6:	93 83       	std	Z+3, r25	; 0x03
   1a2a8:	82 83       	std	Z+2, r24	; 0x02
   1a2aa:	32 96       	adiw	r30, 0x02	; 2
   1a2ac:	e4 17       	cp	r30, r20
   1a2ae:	f5 07       	cpc	r31, r21
   1a2b0:	79 f7       	brne	.-34     	; 0x1a290 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)+0x54>
   1a2b2:	0e 5f       	subi	r16, 0xFE	; 254
   1a2b4:	1f 4f       	sbci	r17, 0xFF	; 255
   1a2b6:	e0 17       	cp	r30, r16
   1a2b8:	f1 07       	cpc	r31, r17
   1a2ba:	49 f7       	brne	.-46     	; 0x1a28e <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)+0x52>
   1a2bc:	8b 81       	ldd	r24, Y+3	; 0x03
   1a2be:	9c 81       	ldd	r25, Y+4	; 0x04
   1a2c0:	2d 81       	ldd	r18, Y+5	; 0x05
   1a2c2:	3e 81       	ldd	r19, Y+6	; 0x06
   1a2c4:	82 0f       	add	r24, r18
   1a2c6:	93 1f       	adc	r25, r19
   1a2c8:	2f 81       	ldd	r18, Y+7	; 0x07
   1a2ca:	38 85       	ldd	r19, Y+8	; 0x08
   1a2cc:	82 0f       	add	r24, r18
   1a2ce:	93 1f       	adc	r25, r19
   1a2d0:	63 e0       	ldi	r22, 0x03	; 3
   1a2d2:	70 e0       	ldi	r23, 0x00	; 0
   1a2d4:	0f 94 35 16 	call	0x22c6a	; 0x22c6a <__udivmodhi4>
   1a2d8:	cb 01       	movw	r24, r22
   1a2da:	2a 96       	adiw	r28, 0x0a	; 10
   1a2dc:	0f b6       	in	r0, 0x3f	; 63
   1a2de:	f8 94       	cli
   1a2e0:	de bf       	out	0x3e, r29	; 62
   1a2e2:	0f be       	out	0x3f, r0	; 63
   1a2e4:	cd bf       	out	0x3d, r28	; 61
   1a2e6:	df 91       	pop	r29
   1a2e8:	cf 91       	pop	r28
   1a2ea:	1f 91       	pop	r17
   1a2ec:	0f 91       	pop	r16
   1a2ee:	ff 90       	pop	r15
   1a2f0:	ef 90       	pop	r14
   1a2f2:	df 90       	pop	r13
   1a2f4:	cf 90       	pop	r12
   1a2f6:	bf 90       	pop	r11
   1a2f8:	af 90       	pop	r10
   1a2fa:	9f 90       	pop	r9
   1a2fc:	08 95       	ret

0001a2fe <LCDWIKI_TOUCH::TP_Read_Coordinate(unsigned int*, unsigned int*)>:
_ZN13LCDWIKI_TOUCH18TP_Read_CoordinateEPjS0_():
   1a2fe:	cf 92       	push	r12
   1a300:	df 92       	push	r13
   1a302:	ef 92       	push	r14
   1a304:	ff 92       	push	r15
   1a306:	0f 93       	push	r16
   1a308:	1f 93       	push	r17
   1a30a:	cf 93       	push	r28
   1a30c:	df 93       	push	r29
   1a30e:	ec 01       	movw	r28, r24
   1a310:	7b 01       	movw	r14, r22
   1a312:	8a 01       	movw	r16, r20
   1a314:	60 ed       	ldi	r22, 0xD0	; 208
   1a316:	0e 94 1e d1 	call	0x1a23c	; 0x1a23c <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)>
   1a31a:	6c 01       	movw	r12, r24
   1a31c:	60 e9       	ldi	r22, 0x90	; 144
   1a31e:	ce 01       	movw	r24, r28
   1a320:	0e 94 1e d1 	call	0x1a23c	; 0x1a23c <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)>
   1a324:	f7 01       	movw	r30, r14
   1a326:	d1 82       	std	Z+1, r13	; 0x01
   1a328:	c0 82       	st	Z, r12
   1a32a:	f8 01       	movw	r30, r16
   1a32c:	91 83       	std	Z+1, r25	; 0x01
   1a32e:	80 83       	st	Z, r24
   1a330:	81 e0       	ldi	r24, 0x01	; 1
   1a332:	df 91       	pop	r29
   1a334:	cf 91       	pop	r28
   1a336:	1f 91       	pop	r17
   1a338:	0f 91       	pop	r16
   1a33a:	ff 90       	pop	r15
   1a33c:	ef 90       	pop	r14
   1a33e:	df 90       	pop	r13
   1a340:	cf 90       	pop	r12
   1a342:	08 95       	ret

0001a344 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)>:
_ZN13LCDWIKI_TOUCH19TP_Read_Coordinate2EPjS0_():
   1a344:	cf 92       	push	r12
   1a346:	df 92       	push	r13
   1a348:	ef 92       	push	r14
   1a34a:	ff 92       	push	r15
   1a34c:	0f 93       	push	r16
   1a34e:	1f 93       	push	r17
   1a350:	cf 93       	push	r28
   1a352:	df 93       	push	r29
   1a354:	00 d0       	rcall	.+0      	; 0x1a356 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x12>
   1a356:	00 d0       	rcall	.+0      	; 0x1a358 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x14>
   1a358:	1f 92       	push	r1
   1a35a:	1f 92       	push	r1
   1a35c:	cd b7       	in	r28, 0x3d	; 61
   1a35e:	de b7       	in	r29, 0x3e	; 62
   1a360:	6c 01       	movw	r12, r24
   1a362:	7b 01       	movw	r14, r22
   1a364:	8a 01       	movw	r16, r20
   1a366:	ae 01       	movw	r20, r28
   1a368:	4b 5f       	subi	r20, 0xFB	; 251
   1a36a:	5f 4f       	sbci	r21, 0xFF	; 255
   1a36c:	be 01       	movw	r22, r28
   1a36e:	69 5f       	subi	r22, 0xF9	; 249
   1a370:	7f 4f       	sbci	r23, 0xFF	; 255
   1a372:	0e 94 7f d1 	call	0x1a2fe	; 0x1a2fe <LCDWIKI_TOUCH::TP_Read_Coordinate(unsigned int*, unsigned int*)>
   1a376:	81 11       	cpse	r24, r1
   1a378:	10 c0       	rjmp	.+32     	; 0x1a39a <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x56>
   1a37a:	80 e0       	ldi	r24, 0x00	; 0
   1a37c:	28 96       	adiw	r28, 0x08	; 8
   1a37e:	0f b6       	in	r0, 0x3f	; 63
   1a380:	f8 94       	cli
   1a382:	de bf       	out	0x3e, r29	; 62
   1a384:	0f be       	out	0x3f, r0	; 63
   1a386:	cd bf       	out	0x3d, r28	; 61
   1a388:	df 91       	pop	r29
   1a38a:	cf 91       	pop	r28
   1a38c:	1f 91       	pop	r17
   1a38e:	0f 91       	pop	r16
   1a390:	ff 90       	pop	r15
   1a392:	ef 90       	pop	r14
   1a394:	df 90       	pop	r13
   1a396:	cf 90       	pop	r12
   1a398:	08 95       	ret
   1a39a:	ae 01       	movw	r20, r28
   1a39c:	4f 5f       	subi	r20, 0xFF	; 255
   1a39e:	5f 4f       	sbci	r21, 0xFF	; 255
   1a3a0:	be 01       	movw	r22, r28
   1a3a2:	6d 5f       	subi	r22, 0xFD	; 253
   1a3a4:	7f 4f       	sbci	r23, 0xFF	; 255
   1a3a6:	c6 01       	movw	r24, r12
   1a3a8:	0e 94 7f d1 	call	0x1a2fe	; 0x1a2fe <LCDWIKI_TOUCH::TP_Read_Coordinate(unsigned int*, unsigned int*)>
   1a3ac:	88 23       	and	r24, r24
   1a3ae:	29 f3       	breq	.-54     	; 0x1a37a <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x36>
   1a3b0:	2b 81       	ldd	r18, Y+3	; 0x03
   1a3b2:	3c 81       	ldd	r19, Y+4	; 0x04
   1a3b4:	6f 81       	ldd	r22, Y+7	; 0x07
   1a3b6:	78 85       	ldd	r23, Y+8	; 0x08
   1a3b8:	62 17       	cp	r22, r18
   1a3ba:	73 07       	cpc	r23, r19
   1a3bc:	40 f0       	brcs	.+16     	; 0x1a3ce <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x8a>
   1a3be:	c9 01       	movw	r24, r18
   1a3c0:	c2 96       	adiw	r24, 0x32	; 50
   1a3c2:	68 17       	cp	r22, r24
   1a3c4:	79 07       	cpc	r23, r25
   1a3c6:	40 f0       	brcs	.+16     	; 0x1a3d8 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x94>
   1a3c8:	26 17       	cp	r18, r22
   1a3ca:	37 07       	cpc	r19, r23
   1a3cc:	b0 f2       	brcs	.-84     	; 0x1a37a <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x36>
   1a3ce:	cb 01       	movw	r24, r22
   1a3d0:	c2 96       	adiw	r24, 0x32	; 50
   1a3d2:	28 17       	cp	r18, r24
   1a3d4:	39 07       	cpc	r19, r25
   1a3d6:	88 f6       	brcc	.-94     	; 0x1a37a <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x36>
   1a3d8:	89 81       	ldd	r24, Y+1	; 0x01
   1a3da:	9a 81       	ldd	r25, Y+2	; 0x02
   1a3dc:	4d 81       	ldd	r20, Y+5	; 0x05
   1a3de:	5e 81       	ldd	r21, Y+6	; 0x06
   1a3e0:	48 17       	cp	r20, r24
   1a3e2:	59 07       	cpc	r21, r25
   1a3e4:	40 f0       	brcs	.+16     	; 0x1a3f6 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0xb2>
   1a3e6:	fc 01       	movw	r30, r24
   1a3e8:	f2 96       	adiw	r30, 0x32	; 50
   1a3ea:	4e 17       	cp	r20, r30
   1a3ec:	5f 07       	cpc	r21, r31
   1a3ee:	48 f0       	brcs	.+18     	; 0x1a402 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0xbe>
   1a3f0:	84 17       	cp	r24, r20
   1a3f2:	95 07       	cpc	r25, r21
   1a3f4:	10 f2       	brcs	.-124    	; 0x1a37a <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x36>
   1a3f6:	fa 01       	movw	r30, r20
   1a3f8:	f2 96       	adiw	r30, 0x32	; 50
   1a3fa:	8e 17       	cp	r24, r30
   1a3fc:	9f 07       	cpc	r25, r31
   1a3fe:	08 f0       	brcs	.+2      	; 0x1a402 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0xbe>
   1a400:	bc cf       	rjmp	.-136    	; 0x1a37a <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x36>
   1a402:	26 0f       	add	r18, r22
   1a404:	37 1f       	adc	r19, r23
   1a406:	36 95       	lsr	r19
   1a408:	27 95       	ror	r18
   1a40a:	f7 01       	movw	r30, r14
   1a40c:	31 83       	std	Z+1, r19	; 0x01
   1a40e:	20 83       	st	Z, r18
   1a410:	84 0f       	add	r24, r20
   1a412:	95 1f       	adc	r25, r21
   1a414:	96 95       	lsr	r25
   1a416:	87 95       	ror	r24
   1a418:	f8 01       	movw	r30, r16
   1a41a:	91 83       	std	Z+1, r25	; 0x01
   1a41c:	80 83       	st	Z, r24
   1a41e:	81 e0       	ldi	r24, 0x01	; 1
   1a420:	ad cf       	rjmp	.-166    	; 0x1a37c <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x38>

0001a422 <LCDWIKI_TOUCH::TP_Scan(unsigned char)>:
_ZN13LCDWIKI_TOUCH7TP_ScanEh():
   1a422:	cf 92       	push	r12
   1a424:	df 92       	push	r13
   1a426:	ef 92       	push	r14
   1a428:	ff 92       	push	r15
   1a42a:	0f 93       	push	r16
   1a42c:	1f 93       	push	r17
   1a42e:	cf 93       	push	r28
   1a430:	df 93       	push	r29
   1a432:	ec 01       	movw	r28, r24
   1a434:	96 2f       	mov	r25, r22
   1a436:	e9 8d       	ldd	r30, Y+25	; 0x19
   1a438:	fa 8d       	ldd	r31, Y+26	; 0x1a
   1a43a:	80 81       	ld	r24, Z
   1a43c:	29 a1       	ldd	r18, Y+33	; 0x21
   1a43e:	82 23       	and	r24, r18
   1a440:	09 f0       	breq	.+2      	; 0x1a444 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x22>
   1a442:	ae c0       	rjmp	.+348    	; 0x1a5a0 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x17e>
   1a444:	ae 01       	movw	r20, r28
   1a446:	4a 5f       	subi	r20, 0xFA	; 250
   1a448:	5f 4f       	sbci	r21, 0xFF	; 255
   1a44a:	be 01       	movw	r22, r28
   1a44c:	6c 5f       	subi	r22, 0xFC	; 252
   1a44e:	7f 4f       	sbci	r23, 0xFF	; 255
   1a450:	99 23       	and	r25, r25
   1a452:	d9 f0       	breq	.+54     	; 0x1a48a <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x68>
   1a454:	ce 01       	movw	r24, r28
   1a456:	0e 94 a2 d1 	call	0x1a344	; 0x1a344 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)>
   1a45a:	8c 85       	ldd	r24, Y+12	; 0x0c
   1a45c:	87 fd       	sbrc	r24, 7
   1a45e:	0a c0       	rjmp	.+20     	; 0x1a474 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x52>
   1a460:	80 ec       	ldi	r24, 0xC0	; 192
   1a462:	8c 87       	std	Y+12, r24	; 0x0c
   1a464:	8c 81       	ldd	r24, Y+4	; 0x04
   1a466:	9d 81       	ldd	r25, Y+5	; 0x05
   1a468:	99 83       	std	Y+1, r25	; 0x01
   1a46a:	88 83       	st	Y, r24
   1a46c:	8e 81       	ldd	r24, Y+6	; 0x06
   1a46e:	9f 81       	ldd	r25, Y+7	; 0x07
   1a470:	9b 83       	std	Y+3, r25	; 0x03
   1a472:	8a 83       	std	Y+2, r24	; 0x02
   1a474:	8c 85       	ldd	r24, Y+12	; 0x0c
   1a476:	80 78       	andi	r24, 0x80	; 128
   1a478:	df 91       	pop	r29
   1a47a:	cf 91       	pop	r28
   1a47c:	1f 91       	pop	r17
   1a47e:	0f 91       	pop	r16
   1a480:	ff 90       	pop	r15
   1a482:	ef 90       	pop	r14
   1a484:	df 90       	pop	r13
   1a486:	cf 90       	pop	r12
   1a488:	08 95       	ret
   1a48a:	ce 01       	movw	r24, r28
   1a48c:	0e 94 a2 d1 	call	0x1a344	; 0x1a344 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)>
   1a490:	88 23       	and	r24, r24
   1a492:	19 f3       	breq	.-58     	; 0x1a45a <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   1a494:	2c 81       	ldd	r18, Y+4	; 0x04
   1a496:	3d 81       	ldd	r19, Y+5	; 0x05
   1a498:	a4 e5       	ldi	r26, 0x54	; 84
   1a49a:	b3 e0       	ldi	r27, 0x03	; 3
   1a49c:	0f 94 a6 16 	call	0x22d4c	; 0x22d4c <__umulhisi3>
   1a4a0:	20 e1       	ldi	r18, 0x10	; 16
   1a4a2:	c2 2e       	mov	r12, r18
   1a4a4:	27 e2       	ldi	r18, 0x27	; 39
   1a4a6:	d2 2e       	mov	r13, r18
   1a4a8:	e1 2c       	mov	r14, r1
   1a4aa:	f1 2c       	mov	r15, r1
   1a4ac:	a7 01       	movw	r20, r14
   1a4ae:	96 01       	movw	r18, r12
   1a4b0:	0f 94 7f 16 	call	0x22cfe	; 0x22cfe <__divmodsi4>
   1a4b4:	89 01       	movw	r16, r18
   1a4b6:	0e 50       	subi	r16, 0x0E	; 14
   1a4b8:	11 09       	sbc	r17, r1
   1a4ba:	1d 83       	std	Y+5, r17	; 0x05
   1a4bc:	0c 83       	std	Y+4, r16	; 0x04
   1a4be:	2e 81       	ldd	r18, Y+6	; 0x06
   1a4c0:	3f 81       	ldd	r19, Y+7	; 0x07
   1a4c2:	a4 e0       	ldi	r26, 0x04	; 4
   1a4c4:	b5 e0       	ldi	r27, 0x05	; 5
   1a4c6:	0f 94 a6 16 	call	0x22d4c	; 0x22d4c <__umulhisi3>
   1a4ca:	a7 01       	movw	r20, r14
   1a4cc:	96 01       	movw	r18, r12
   1a4ce:	0f 94 7f 16 	call	0x22cfe	; 0x22cfe <__divmodsi4>
   1a4d2:	2e 51       	subi	r18, 0x1E	; 30
   1a4d4:	31 09       	sbc	r19, r1
   1a4d6:	3f 83       	std	Y+7, r19	; 0x07
   1a4d8:	2e 83       	std	Y+6, r18	; 0x06
   1a4da:	8d 85       	ldd	r24, Y+13	; 0x0d
   1a4dc:	81 30       	cpi	r24, 0x01	; 1
   1a4de:	a9 f1       	breq	.+106    	; 0x1a54a <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x128>
   1a4e0:	90 f0       	brcs	.+36     	; 0x1a506 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0xe4>
   1a4e2:	82 30       	cpi	r24, 0x02	; 2
   1a4e4:	09 f4       	brne	.+2      	; 0x1a4e8 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0xc6>
   1a4e6:	53 c0       	rjmp	.+166    	; 0x1a58e <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x16c>
   1a4e8:	83 30       	cpi	r24, 0x03	; 3
   1a4ea:	09 f0       	breq	.+2      	; 0x1a4ee <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0xcc>
   1a4ec:	b6 cf       	rjmp	.-148    	; 0x1a45a <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   1a4ee:	8e 85       	ldd	r24, Y+14	; 0x0e
   1a4f0:	88 23       	and	r24, r24
   1a4f2:	e1 f1       	breq	.+120    	; 0x1a56c <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x14a>
   1a4f4:	81 30       	cpi	r24, 0x01	; 1
   1a4f6:	09 f4       	brne	.+2      	; 0x1a4fa <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0xd8>
   1a4f8:	43 c0       	rjmp	.+134    	; 0x1a580 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x15e>
   1a4fa:	82 30       	cpi	r24, 0x02	; 2
   1a4fc:	49 f1       	breq	.+82     	; 0x1a550 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x12e>
   1a4fe:	83 30       	cpi	r24, 0x03	; 3
   1a500:	09 f0       	breq	.+2      	; 0x1a504 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0xe2>
   1a502:	ab cf       	rjmp	.-170    	; 0x1a45a <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   1a504:	2c c0       	rjmp	.+88     	; 0x1a55e <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x13c>
   1a506:	8e 85       	ldd	r24, Y+14	; 0x0e
   1a508:	88 23       	and	r24, r24
   1a50a:	09 f4       	brne	.+2      	; 0x1a50e <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0xec>
   1a50c:	a6 cf       	rjmp	.-180    	; 0x1a45a <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   1a50e:	81 30       	cpi	r24, 0x01	; 1
   1a510:	39 f4       	brne	.+14     	; 0x1a520 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0xfe>
   1a512:	3d 83       	std	Y+5, r19	; 0x05
   1a514:	2c 83       	std	Y+4, r18	; 0x04
   1a516:	8a 85       	ldd	r24, Y+10	; 0x0a
   1a518:	9b 85       	ldd	r25, Y+11	; 0x0b
   1a51a:	80 1b       	sub	r24, r16
   1a51c:	91 0b       	sbc	r25, r17
   1a51e:	2a c0       	rjmp	.+84     	; 0x1a574 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x152>
   1a520:	82 30       	cpi	r24, 0x02	; 2
   1a522:	39 f4       	brne	.+14     	; 0x1a532 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x110>
   1a524:	88 85       	ldd	r24, Y+8	; 0x08
   1a526:	99 85       	ldd	r25, Y+9	; 0x09
   1a528:	80 1b       	sub	r24, r16
   1a52a:	91 0b       	sbc	r25, r17
   1a52c:	9d 83       	std	Y+5, r25	; 0x05
   1a52e:	8c 83       	std	Y+4, r24	; 0x04
   1a530:	1d c0       	rjmp	.+58     	; 0x1a56c <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x14a>
   1a532:	83 30       	cpi	r24, 0x03	; 3
   1a534:	09 f0       	breq	.+2      	; 0x1a538 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x116>
   1a536:	91 cf       	rjmp	.-222    	; 0x1a45a <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   1a538:	1f 83       	std	Y+7, r17	; 0x07
   1a53a:	0e 83       	std	Y+6, r16	; 0x06
   1a53c:	88 85       	ldd	r24, Y+8	; 0x08
   1a53e:	99 85       	ldd	r25, Y+9	; 0x09
   1a540:	82 1b       	sub	r24, r18
   1a542:	93 0b       	sbc	r25, r19
   1a544:	9d 83       	std	Y+5, r25	; 0x05
   1a546:	8c 83       	std	Y+4, r24	; 0x04
   1a548:	88 cf       	rjmp	.-240    	; 0x1a45a <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   1a54a:	8e 85       	ldd	r24, Y+14	; 0x0e
   1a54c:	81 11       	cpse	r24, r1
   1a54e:	05 c0       	rjmp	.+10     	; 0x1a55a <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x138>
   1a550:	88 85       	ldd	r24, Y+8	; 0x08
   1a552:	99 85       	ldd	r25, Y+9	; 0x09
   1a554:	80 1b       	sub	r24, r16
   1a556:	91 0b       	sbc	r25, r17
   1a558:	f5 cf       	rjmp	.-22     	; 0x1a544 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x122>
   1a55a:	81 30       	cpi	r24, 0x01	; 1
   1a55c:	29 f4       	brne	.+10     	; 0x1a568 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x146>
   1a55e:	3d 83       	std	Y+5, r19	; 0x05
   1a560:	2c 83       	std	Y+4, r18	; 0x04
   1a562:	1f 83       	std	Y+7, r17	; 0x07
   1a564:	0e 83       	std	Y+6, r16	; 0x06
   1a566:	79 cf       	rjmp	.-270    	; 0x1a45a <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   1a568:	82 30       	cpi	r24, 0x02	; 2
   1a56a:	39 f4       	brne	.+14     	; 0x1a57a <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x158>
   1a56c:	8a 85       	ldd	r24, Y+10	; 0x0a
   1a56e:	9b 85       	ldd	r25, Y+11	; 0x0b
   1a570:	82 1b       	sub	r24, r18
   1a572:	93 0b       	sbc	r25, r19
   1a574:	9f 83       	std	Y+7, r25	; 0x07
   1a576:	8e 83       	std	Y+6, r24	; 0x06
   1a578:	70 cf       	rjmp	.-288    	; 0x1a45a <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   1a57a:	83 30       	cpi	r24, 0x03	; 3
   1a57c:	09 f0       	breq	.+2      	; 0x1a580 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x15e>
   1a57e:	6d cf       	rjmp	.-294    	; 0x1a45a <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   1a580:	88 85       	ldd	r24, Y+8	; 0x08
   1a582:	99 85       	ldd	r25, Y+9	; 0x09
   1a584:	82 1b       	sub	r24, r18
   1a586:	93 0b       	sbc	r25, r19
   1a588:	9d 83       	std	Y+5, r25	; 0x05
   1a58a:	8c 83       	std	Y+4, r24	; 0x04
   1a58c:	c4 cf       	rjmp	.-120    	; 0x1a516 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0xf4>
   1a58e:	8e 85       	ldd	r24, Y+14	; 0x0e
   1a590:	88 23       	and	r24, r24
   1a592:	41 f2       	breq	.-112    	; 0x1a524 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x102>
   1a594:	81 30       	cpi	r24, 0x01	; 1
   1a596:	81 f2       	breq	.-96     	; 0x1a538 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x116>
   1a598:	83 30       	cpi	r24, 0x03	; 3
   1a59a:	09 f0       	breq	.+2      	; 0x1a59e <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x17c>
   1a59c:	5e cf       	rjmp	.-324    	; 0x1a45a <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   1a59e:	b9 cf       	rjmp	.-142    	; 0x1a512 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0xf0>
   1a5a0:	8c 85       	ldd	r24, Y+12	; 0x0c
   1a5a2:	87 ff       	sbrs	r24, 7
   1a5a4:	03 c0       	rjmp	.+6      	; 0x1a5ac <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x18a>
   1a5a6:	8f 77       	andi	r24, 0x7F	; 127
   1a5a8:	8c 87       	std	Y+12, r24	; 0x0c
   1a5aa:	64 cf       	rjmp	.-312    	; 0x1a474 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x52>
   1a5ac:	19 82       	std	Y+1, r1	; 0x01
   1a5ae:	18 82       	st	Y, r1
   1a5b0:	1b 82       	std	Y+3, r1	; 0x03
   1a5b2:	1a 82       	std	Y+2, r1	; 0x02
   1a5b4:	8f ef       	ldi	r24, 0xFF	; 255
   1a5b6:	9f ef       	ldi	r25, 0xFF	; 255
   1a5b8:	9d 83       	std	Y+5, r25	; 0x05
   1a5ba:	8c 83       	std	Y+4, r24	; 0x04
   1a5bc:	9f 83       	std	Y+7, r25	; 0x07
   1a5be:	8e 83       	std	Y+6, r24	; 0x06
   1a5c0:	59 cf       	rjmp	.-334    	; 0x1a474 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x52>

0001a5c2 <LCDWIKI_TOUCH::TP_Set_Rotation(unsigned char)>:
_ZN13LCDWIKI_TOUCH15TP_Set_RotationEh():
   1a5c2:	fc 01       	movw	r30, r24
   1a5c4:	65 87       	std	Z+13, r22	; 0x0d
   1a5c6:	08 95       	ret

0001a5c8 <LCDWIKI_TOUCH::TP_Get_State() const>:
_ZNK13LCDWIKI_TOUCH12TP_Get_StateEv():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:436

uint8_t LCDWIKI_TOUCH::TP_Get_State(void) const
{
	return touch_statue;
}
   1a5c8:	fc 01       	movw	r30, r24
   1a5ca:	84 85       	ldd	r24, Z+12	; 0x0c
   1a5cc:	08 95       	ret

0001a5ce <SoftSPIB::SoftSPIB(unsigned char, unsigned char, unsigned char)>:
_ZN8SoftSPIBC2Ehhh():
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:48
            _cke = 0;
            break;
        case SPI_MODE3:
            _ckp = 1;
            _cke = 1;
            break;
   1a5ce:	fc 01       	movw	r30, r24
   1a5d0:	82 2f       	mov	r24, r18
   1a5d2:	64 83       	std	Z+4, r22	; 0x04
   1a5d4:	43 83       	std	Z+3, r20	; 0x03
   1a5d6:	25 83       	std	Z+5, r18	; 0x05
   1a5d8:	92 e0       	ldi	r25, 0x02	; 2
   1a5da:	92 83       	std	Z+2, r25	; 0x02
   1a5dc:	10 82       	st	Z, r1
   1a5de:	11 82       	std	Z+1, r1	; 0x01
   1a5e0:	16 82       	std	Z+6, r1	; 0x06
   1a5e2:	60 e0       	ldi	r22, 0x00	; 0
   1a5e4:	0d 94 60 10 	jmp	0x220c0	; 0x220c0 <digitalWrite>

0001a5e8 <SoftSPIB::begin()>:
_ZN8SoftSPIB5beginEv():
   1a5e8:	cf 93       	push	r28
   1a5ea:	df 93       	push	r29
   1a5ec:	ec 01       	movw	r28, r24
   1a5ee:	61 e0       	ldi	r22, 0x01	; 1
   1a5f0:	8c 81       	ldd	r24, Y+4	; 0x04
   1a5f2:	0f 94 24 10 	call	0x22048	; 0x22048 <pinMode>
   1a5f6:	60 e0       	ldi	r22, 0x00	; 0
   1a5f8:	8b 81       	ldd	r24, Y+3	; 0x03
   1a5fa:	0f 94 24 10 	call	0x22048	; 0x22048 <pinMode>
   1a5fe:	61 e0       	ldi	r22, 0x01	; 1
   1a600:	8d 81       	ldd	r24, Y+5	; 0x05
   1a602:	df 91       	pop	r29
   1a604:	cf 91       	pop	r28
   1a606:	0d 94 24 10 	jmp	0x22048	; 0x22048 <pinMode>

0001a60a <SoftSPIB::transfer(unsigned char)>:
_ZN8SoftSPIB8transferEh():
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:76
    val[l] = transfer(val[l]);
    }
}


uint8_t SoftSPIB::transfer(uint8_t val) {
   1a60a:	8f 92       	push	r8
   1a60c:	9f 92       	push	r9
   1a60e:	af 92       	push	r10
   1a610:	bf 92       	push	r11
   1a612:	cf 92       	push	r12
   1a614:	df 92       	push	r13
   1a616:	ff 92       	push	r15
   1a618:	0f 93       	push	r16
   1a61a:	1f 93       	push	r17
   1a61c:	cf 93       	push	r28
   1a61e:	df 93       	push	r29
   1a620:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:79

    uint8_t out = 0;
    if (_order == MSBFIRST) {
   1a622:	fc 01       	movw	r30, r24
   1a624:	86 81       	ldd	r24, Z+6	; 0x06
   1a626:	81 11       	cpse	r24, r1
   1a628:	35 c0       	rjmp	.+106    	; 0x1a694 <SoftSPIB::transfer(unsigned char)+0x8a>
   1a62a:	86 2f       	mov	r24, r22
   1a62c:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:81
        uint8_t v2 = 
            ((val & 0x01) << 7) |
   1a62e:	ec 01       	movw	r28, r24
   1a630:	d6 95       	lsr	r29
   1a632:	dc 2f       	mov	r29, r28
   1a634:	cc 27       	eor	r28, r28
   1a636:	d7 95       	ror	r29
   1a638:	c7 95       	ror	r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:88
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
            ((val & 0x80) >> 7);
   1a63a:	66 1f       	adc	r22, r22
   1a63c:	66 27       	eor	r22, r22
   1a63e:	66 1f       	adc	r22, r22
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
   1a640:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:82

    uint8_t out = 0;
    if (_order == MSBFIRST) {
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
   1a642:	ec 01       	movw	r28, r24
   1a644:	35 e0       	ldi	r19, 0x05	; 5
   1a646:	cc 0f       	add	r28, r28
   1a648:	dd 1f       	adc	r29, r29
   1a64a:	3a 95       	dec	r19
   1a64c:	e1 f7       	brne	.-8      	; 0x1a646 <SoftSPIB::transfer(unsigned char)+0x3c>
   1a64e:	c0 74       	andi	r28, 0x40	; 64
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
   1a650:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:83
    uint8_t out = 0;
    if (_order == MSBFIRST) {
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
   1a652:	ec 01       	movw	r28, r24
   1a654:	43 e0       	ldi	r20, 0x03	; 3
   1a656:	cc 0f       	add	r28, r28
   1a658:	dd 1f       	adc	r29, r29
   1a65a:	4a 95       	dec	r20
   1a65c:	e1 f7       	brne	.-8      	; 0x1a656 <SoftSPIB::transfer(unsigned char)+0x4c>
   1a65e:	c0 72       	andi	r28, 0x20	; 32
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
   1a660:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:84
    if (_order == MSBFIRST) {
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
   1a662:	ec 01       	movw	r28, r24
   1a664:	cc 0f       	add	r28, r28
   1a666:	dd 1f       	adc	r29, r29
   1a668:	c0 71       	andi	r28, 0x10	; 16
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
   1a66a:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:85
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
   1a66c:	ec 01       	movw	r28, r24
   1a66e:	d5 95       	asr	r29
   1a670:	c7 95       	ror	r28
   1a672:	c8 70       	andi	r28, 0x08	; 8
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
   1a674:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:86
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
   1a676:	ec 01       	movw	r28, r24
   1a678:	e3 e0       	ldi	r30, 0x03	; 3
   1a67a:	d5 95       	asr	r29
   1a67c:	c7 95       	ror	r28
   1a67e:	ea 95       	dec	r30
   1a680:	e1 f7       	brne	.-8      	; 0x1a67a <SoftSPIB::transfer(unsigned char)+0x70>
   1a682:	c4 70       	andi	r28, 0x04	; 4
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x40) >> 5) |
   1a684:	6c 2b       	or	r22, r28
   1a686:	f5 e0       	ldi	r31, 0x05	; 5
   1a688:	95 95       	asr	r25
   1a68a:	87 95       	ror	r24
   1a68c:	fa 95       	dec	r31
   1a68e:	e1 f7       	brne	.-8      	; 0x1a688 <SoftSPIB::transfer(unsigned char)+0x7e>
   1a690:	82 70       	andi	r24, 0x02	; 2
   1a692:	68 2b       	or	r22, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:96

    //uint8_t del = _delay >> 1;

    uint8_t bval = 0;

    int sck = (_ckp) ? HIGH : LOW;
   1a694:	91 e0       	ldi	r25, 0x01	; 1
   1a696:	80 e0       	ldi	r24, 0x00	; 0
   1a698:	f8 01       	movw	r30, r16
   1a69a:	21 81       	ldd	r18, Z+1	; 0x01
   1a69c:	21 11       	cpse	r18, r1
   1a69e:	01 c0       	rjmp	.+2      	; 0x1a6a2 <SoftSPIB::transfer(unsigned char)+0x98>
   1a6a0:	90 e0       	ldi	r25, 0x00	; 0
   1a6a2:	c9 2e       	mov	r12, r25
   1a6a4:	d8 2e       	mov	r13, r24
   1a6a6:	b1 2c       	mov	r11, r1
   1a6a8:	a1 2c       	mov	r10, r1
   1a6aa:	f1 2c       	mov	r15, r1
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:107
            digitalWrite(_sck, sck);            
            //wait(del);
        }

        /* ... Write bit */
        digitalWrite(_mosi, ((val & (1<<bit)) ? HIGH : LOW));
   1a6ac:	c6 2f       	mov	r28, r22
   1a6ae:	d0 e0       	ldi	r29, 0x00	; 0
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:100

    int sck = (_ckp) ? HIGH : LOW;

    for (uint8_t bit = 0u; bit < 8u; bit++)
    {
        if (_cke) {
   1a6b0:	f8 01       	movw	r30, r16
   1a6b2:	80 81       	ld	r24, Z
   1a6b4:	88 23       	and	r24, r24
   1a6b6:	39 f0       	breq	.+14     	; 0x1a6c6 <SoftSPIB::transfer(unsigned char)+0xbc>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:101
            sck ^= 1;
   1a6b8:	f1 e0       	ldi	r31, 0x01	; 1
   1a6ba:	cf 26       	eor	r12, r31
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:102
            digitalWrite(_sck, sck);            
   1a6bc:	6c 2d       	mov	r22, r12
   1a6be:	f8 01       	movw	r30, r16
   1a6c0:	85 81       	ldd	r24, Z+5	; 0x05
   1a6c2:	0f 94 60 10 	call	0x220c0	; 0x220c0 <digitalWrite>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:107
            //wait(del);
        }

        /* ... Write bit */
        digitalWrite(_mosi, ((val & (1<<bit)) ? HIGH : LOW));
   1a6c6:	be 01       	movw	r22, r28
   1a6c8:	0a 2c       	mov	r0, r10
   1a6ca:	02 c0       	rjmp	.+4      	; 0x1a6d0 <SoftSPIB::transfer(unsigned char)+0xc6>
   1a6cc:	75 95       	asr	r23
   1a6ce:	67 95       	ror	r22
   1a6d0:	0a 94       	dec	r0
   1a6d2:	e2 f7       	brpl	.-8      	; 0x1a6cc <SoftSPIB::transfer(unsigned char)+0xc2>
   1a6d4:	61 70       	andi	r22, 0x01	; 1
   1a6d6:	f8 01       	movw	r30, r16
   1a6d8:	84 81       	ldd	r24, Z+4	; 0x04
   1a6da:	0f 94 60 10 	call	0x220c0	; 0x220c0 <digitalWrite>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:111

        //wait(del);

        sck ^= 1u; 
   1a6de:	46 01       	movw	r8, r12
   1a6e0:	f1 e0       	ldi	r31, 0x01	; 1
   1a6e2:	8f 26       	eor	r8, r31
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:112
	digitalWrite(_sck, sck);
   1a6e4:	68 2d       	mov	r22, r8
   1a6e6:	f8 01       	movw	r30, r16
   1a6e8:	85 81       	ldd	r24, Z+5	; 0x05
   1a6ea:	0f 94 60 10 	call	0x220c0	; 0x220c0 <digitalWrite>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:116

        /* ... Read bit */
        {
            bval = digitalRead(_miso);
   1a6ee:	f8 01       	movw	r30, r16
   1a6f0:	83 81       	ldd	r24, Z+3	; 0x03
   1a6f2:	0f 94 8e 10 	call	0x2211c	; 0x2211c <digitalRead>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:118

            if (_order == MSBFIRST) {
   1a6f6:	f8 01       	movw	r30, r16
   1a6f8:	96 81       	ldd	r25, Z+6	; 0x06
   1a6fa:	91 11       	cpse	r25, r1
   1a6fc:	1b c0       	rjmp	.+54     	; 0x1a734 <SoftSPIB::transfer(unsigned char)+0x12a>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:119
                out <<= 1;
   1a6fe:	ff 0c       	add	r15, r15
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:123
                out |= bval;
            } else {
                out >>= 1;
                out |= bval << 7;
   1a700:	f8 2a       	or	r15, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:129
            }
        }

        //wait(del);

        if (!_cke) {
   1a702:	f8 01       	movw	r30, r16
   1a704:	80 81       	ld	r24, Z
   1a706:	88 23       	and	r24, r24
   1a708:	d1 f0       	breq	.+52     	; 0x1a73e <SoftSPIB::transfer(unsigned char)+0x134>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:111
        /* ... Write bit */
        digitalWrite(_mosi, ((val & (1<<bit)) ? HIGH : LOW));

        //wait(del);

        sck ^= 1u; 
   1a70a:	64 01       	movw	r12, r8
   1a70c:	ff ef       	ldi	r31, 0xFF	; 255
   1a70e:	af 1a       	sub	r10, r31
   1a710:	bf 0a       	sbc	r11, r31
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:98 (discriminator 2)

    uint8_t bval = 0;

    int sck = (_ckp) ? HIGH : LOW;

    for (uint8_t bit = 0u; bit < 8u; bit++)
   1a712:	28 e0       	ldi	r18, 0x08	; 8
   1a714:	a2 16       	cp	r10, r18
   1a716:	b1 04       	cpc	r11, r1
   1a718:	59 f6       	brne	.-106    	; 0x1a6b0 <SoftSPIB::transfer(unsigned char)+0xa6>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:137
        }
    }

    return out;

}
   1a71a:	8f 2d       	mov	r24, r15
   1a71c:	df 91       	pop	r29
   1a71e:	cf 91       	pop	r28
   1a720:	1f 91       	pop	r17
   1a722:	0f 91       	pop	r16
   1a724:	ff 90       	pop	r15
   1a726:	df 90       	pop	r13
   1a728:	cf 90       	pop	r12
   1a72a:	bf 90       	pop	r11
   1a72c:	af 90       	pop	r10
   1a72e:	9f 90       	pop	r9
   1a730:	8f 90       	pop	r8
   1a732:	08 95       	ret
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:123
            if (_order == MSBFIRST) {
                out <<= 1;
                out |= bval;
            } else {
                out >>= 1;
                out |= bval << 7;
   1a734:	87 95       	ror	r24
   1a736:	88 27       	eor	r24, r24
   1a738:	87 95       	ror	r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:122

            if (_order == MSBFIRST) {
                out <<= 1;
                out |= bval;
            } else {
                out >>= 1;
   1a73a:	f6 94       	lsr	r15
   1a73c:	e1 cf       	rjmp	.-62     	; 0x1a700 <SoftSPIB::transfer(unsigned char)+0xf6>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:131

        //wait(del);

        if (!_cke) {
            sck ^= 1u;
            digitalWrite(_sck, sck);
   1a73e:	6c 2d       	mov	r22, r12
   1a740:	85 81       	ldd	r24, Z+5	; 0x05
   1a742:	0f 94 60 10 	call	0x220c0	; 0x220c0 <digitalWrite>
   1a746:	e2 cf       	rjmp	.-60     	; 0x1a70c <SoftSPIB::transfer(unsigned char)+0x102>

0001a748 <SRAM_23LC::SRAM_23LC(SoftSPIB*, unsigned char, _SRAM_23LC_Device)>:
_ZN9SRAM_23LCC2EP8SoftSPIBh17_SRAM_23LC_Device():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:62
  endCommand();
}

void SRAM_23LC::end(void)
{
  pinMode(_chipSelect, INPUT);
   1a748:	fc 01       	movw	r30, r24
   1a74a:	80 e0       	ldi	r24, 0x00	; 0
   1a74c:	90 e0       	ldi	r25, 0x00	; 0
   1a74e:	a2 e0       	ldi	r26, 0x02	; 2
   1a750:	b0 e0       	ldi	r27, 0x00	; 0
   1a752:	23 30       	cpi	r18, 0x03	; 3
   1a754:	31 05       	cpc	r19, r1
   1a756:	40 f0       	brcs	.+16     	; 0x1a768 <SRAM_23LC::SRAM_23LC(SoftSPIB*, unsigned char, _SRAM_23LC_Device)+0x20>
   1a758:	c9 01       	movw	r24, r18
   1a75a:	03 97       	sbiw	r24, 0x03	; 3
   1a75c:	03 97       	sbiw	r24, 0x03	; 3
   1a75e:	70 f4       	brcc	.+28     	; 0x1a77c <SRAM_23LC::SRAM_23LC(SoftSPIB*, unsigned char, _SRAM_23LC_Device)+0x34>
   1a760:	80 e0       	ldi	r24, 0x00	; 0
   1a762:	90 e0       	ldi	r25, 0x00	; 0
   1a764:	a1 e0       	ldi	r26, 0x01	; 1
   1a766:	b0 e0       	ldi	r27, 0x00	; 0
   1a768:	84 83       	std	Z+4, r24	; 0x04
   1a76a:	95 83       	std	Z+5, r25	; 0x05
   1a76c:	a6 83       	std	Z+6, r26	; 0x06
   1a76e:	b7 83       	std	Z+7, r27	; 0x07
   1a770:	33 83       	std	Z+3, r19	; 0x03
   1a772:	22 83       	std	Z+2, r18	; 0x02
   1a774:	71 83       	std	Z+1, r23	; 0x01
   1a776:	60 83       	st	Z, r22
   1a778:	40 87       	std	Z+8, r20	; 0x08
   1a77a:	08 95       	ret
   1a77c:	c9 01       	movw	r24, r18
   1a77e:	06 97       	sbiw	r24, 0x06	; 6
   1a780:	02 97       	sbiw	r24, 0x02	; 2
   1a782:	28 f4       	brcc	.+10     	; 0x1a78e <SRAM_23LC::SRAM_23LC(SoftSPIB*, unsigned char, _SRAM_23LC_Device)+0x46>
   1a784:	80 e0       	ldi	r24, 0x00	; 0
   1a786:	90 e8       	ldi	r25, 0x80	; 128
   1a788:	a0 e0       	ldi	r26, 0x00	; 0
   1a78a:	b0 e0       	ldi	r27, 0x00	; 0
   1a78c:	ed cf       	rjmp	.-38     	; 0x1a768 <SRAM_23LC::SRAM_23LC(SoftSPIB*, unsigned char, _SRAM_23LC_Device)+0x20>
   1a78e:	c9 01       	movw	r24, r18
   1a790:	08 97       	sbiw	r24, 0x08	; 8
   1a792:	02 97       	sbiw	r24, 0x02	; 2
   1a794:	68 f7       	brcc	.-38     	; 0x1a770 <SRAM_23LC::SRAM_23LC(SoftSPIB*, unsigned char, _SRAM_23LC_Device)+0x28>
   1a796:	80 e0       	ldi	r24, 0x00	; 0
   1a798:	90 e2       	ldi	r25, 0x20	; 32
   1a79a:	a0 e0       	ldi	r26, 0x00	; 0
   1a79c:	b0 e0       	ldi	r27, 0x00	; 0
   1a79e:	e4 cf       	rjmp	.-56     	; 0x1a768 <SRAM_23LC::SRAM_23LC(SoftSPIB*, unsigned char, _SRAM_23LC_Device)+0x20>

0001a7a0 <SRAM_23LC::sendAddressBytes(unsigned long)>:
_ZN9SRAM_23LC16sendAddressBytesEm():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:134
    sendAddressBytes(address);
  }
}

void SRAM_23LC::sendAddressBytes(const uint32_t address)
{
   1a7a0:	cf 92       	push	r12
   1a7a2:	df 92       	push	r13
   1a7a4:	ef 92       	push	r14
   1a7a6:	ff 92       	push	r15
   1a7a8:	cf 93       	push	r28
   1a7aa:	df 93       	push	r29
   1a7ac:	ec 01       	movw	r28, r24
   1a7ae:	6a 01       	movw	r12, r20
   1a7b0:	7b 01       	movw	r14, r22
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:135
  if (_capacity > 0x10000) {
   1a7b2:	8c 81       	ldd	r24, Y+4	; 0x04
   1a7b4:	9d 81       	ldd	r25, Y+5	; 0x05
   1a7b6:	ae 81       	ldd	r26, Y+6	; 0x06
   1a7b8:	bf 81       	ldd	r27, Y+7	; 0x07
   1a7ba:	01 97       	sbiw	r24, 0x01	; 1
   1a7bc:	a1 40       	sbci	r26, 0x01	; 1
   1a7be:	b1 05       	cpc	r27, r1
   1a7c0:	38 f0       	brcs	.+14     	; 0x1a7d0 <SRAM_23LC::sendAddressBytes(unsigned long)+0x30>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:136
    _spi->transfer((uint8_t)((address >> 16) & 0xFF));
   1a7c2:	b7 01       	movw	r22, r14
   1a7c4:	88 27       	eor	r24, r24
   1a7c6:	99 27       	eor	r25, r25
   1a7c8:	88 81       	ld	r24, Y
   1a7ca:	99 81       	ldd	r25, Y+1	; 0x01
   1a7cc:	0e 94 05 d3 	call	0x1a60a	; 0x1a60a <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:138
  }
  _spi->transfer((uint8_t)((address >> 8) & 0xFF));
   1a7d0:	99 27       	eor	r25, r25
   1a7d2:	8f 2d       	mov	r24, r15
   1a7d4:	7e 2d       	mov	r23, r14
   1a7d6:	6d 2d       	mov	r22, r13
   1a7d8:	88 81       	ld	r24, Y
   1a7da:	99 81       	ldd	r25, Y+1	; 0x01
   1a7dc:	0e 94 05 d3 	call	0x1a60a	; 0x1a60a <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:139
  _spi->transfer((uint8_t)(address & 0xFF));
   1a7e0:	6c 2d       	mov	r22, r12
   1a7e2:	88 81       	ld	r24, Y
   1a7e4:	99 81       	ldd	r25, Y+1	; 0x01
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:140
}
   1a7e6:	df 91       	pop	r29
   1a7e8:	cf 91       	pop	r28
   1a7ea:	ff 90       	pop	r15
   1a7ec:	ef 90       	pop	r14
   1a7ee:	df 90       	pop	r13
   1a7f0:	cf 90       	pop	r12
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:139
{
  if (_capacity > 0x10000) {
    _spi->transfer((uint8_t)((address >> 16) & 0xFF));
  }
  _spi->transfer((uint8_t)((address >> 8) & 0xFF));
  _spi->transfer((uint8_t)(address & 0xFF));
   1a7f2:	0c 94 05 d3 	jmp	0x1a60a	; 0x1a60a <SoftSPIB::transfer(unsigned char)>

0001a7f6 <SRAM_23LC::startCommand(unsigned char, unsigned long)>:
_ZN9SRAM_23LC12startCommandEhm():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:123

  return(length);
}

void SRAM_23LC::startCommand(const uint8_t command, const uint32_t address)
{
   1a7f6:	cf 92       	push	r12
   1a7f8:	df 92       	push	r13
   1a7fa:	ef 92       	push	r14
   1a7fc:	ff 92       	push	r15
   1a7fe:	0f 93       	push	r16
   1a800:	1f 93       	push	r17
   1a802:	cf 93       	push	r28
   1a804:	8c 01       	movw	r16, r24
   1a806:	c6 2f       	mov	r28, r22
   1a808:	69 01       	movw	r12, r18
   1a80a:	7a 01       	movw	r14, r20
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:125
  //_spi->beginTransaction(_spiSettings);
  digitalWrite(_chipSelect, LOW);
   1a80c:	60 e0       	ldi	r22, 0x00	; 0
   1a80e:	fc 01       	movw	r30, r24
   1a810:	80 85       	ldd	r24, Z+8	; 0x08
   1a812:	0f 94 60 10 	call	0x220c0	; 0x220c0 <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:127

  _spi->transfer(command);
   1a816:	6c 2f       	mov	r22, r28
   1a818:	f8 01       	movw	r30, r16
   1a81a:	80 81       	ld	r24, Z
   1a81c:	91 81       	ldd	r25, Z+1	; 0x01
   1a81e:	0e 94 05 d3 	call	0x1a60a	; 0x1a60a <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:128
  if (command == SRAM_23LC_COMMAND_READ || command == SRAM_23LC_COMMAND_WRITE) {
   1a822:	c2 50       	subi	r28, 0x02	; 2
   1a824:	c2 30       	cpi	r28, 0x02	; 2
   1a826:	60 f4       	brcc	.+24     	; 0x1a840 <SRAM_23LC::startCommand(unsigned char, unsigned long)+0x4a>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:129
    sendAddressBytes(address);
   1a828:	b7 01       	movw	r22, r14
   1a82a:	a6 01       	movw	r20, r12
   1a82c:	c8 01       	movw	r24, r16
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:131
  }
}
   1a82e:	cf 91       	pop	r28
   1a830:	1f 91       	pop	r17
   1a832:	0f 91       	pop	r16
   1a834:	ff 90       	pop	r15
   1a836:	ef 90       	pop	r14
   1a838:	df 90       	pop	r13
   1a83a:	cf 90       	pop	r12
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:129
  //_spi->beginTransaction(_spiSettings);
  digitalWrite(_chipSelect, LOW);

  _spi->transfer(command);
  if (command == SRAM_23LC_COMMAND_READ || command == SRAM_23LC_COMMAND_WRITE) {
    sendAddressBytes(address);
   1a83c:	0c 94 d0 d3 	jmp	0x1a7a0	; 0x1a7a0 <SRAM_23LC::sendAddressBytes(unsigned long)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:131
  }
}
   1a840:	cf 91       	pop	r28
   1a842:	1f 91       	pop	r17
   1a844:	0f 91       	pop	r16
   1a846:	ff 90       	pop	r15
   1a848:	ef 90       	pop	r14
   1a84a:	df 90       	pop	r13
   1a84c:	cf 90       	pop	r12
   1a84e:	08 95       	ret

0001a850 <SRAM_23LC::endCommand()>:
_ZN9SRAM_23LC10endCommandEv():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:144
  _spi->transfer((uint8_t)(address & 0xFF));
}

void SRAM_23LC::endCommand(void)
{
  digitalWrite(_chipSelect, HIGH);
   1a850:	61 e0       	ldi	r22, 0x01	; 1
   1a852:	fc 01       	movw	r30, r24
   1a854:	80 85       	ldd	r24, Z+8	; 0x08
   1a856:	0d 94 60 10 	jmp	0x220c0	; 0x220c0 <digitalWrite>

0001a85a <SRAM_23LC::begin()>:
_ZN9SRAM_23LC5beginEv():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:49




void SRAM_23LC::begin(void)
{
   1a85a:	cf 93       	push	r28
   1a85c:	df 93       	push	r29
   1a85e:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:50
  digitalWrite(_chipSelect, HIGH);
   1a860:	61 e0       	ldi	r22, 0x01	; 1
   1a862:	88 85       	ldd	r24, Y+8	; 0x08
   1a864:	0f 94 60 10 	call	0x220c0	; 0x220c0 <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:51
  pinMode(_chipSelect, OUTPUT);
   1a868:	61 e0       	ldi	r22, 0x01	; 1
   1a86a:	88 85       	ldd	r24, Y+8	; 0x08
   1a86c:	0f 94 24 10 	call	0x22048	; 0x22048 <pinMode>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:53

  _spi->begin();
   1a870:	88 81       	ld	r24, Y
   1a872:	99 81       	ldd	r25, Y+1	; 0x01
   1a874:	0e 94 f4 d2 	call	0x1a5e8	; 0x1a5e8 <SoftSPIB::begin()>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:55

  startCommand(SRAM_23LC_COMMAND_WRMR, 0);
   1a878:	20 e0       	ldi	r18, 0x00	; 0
   1a87a:	30 e0       	ldi	r19, 0x00	; 0
   1a87c:	a9 01       	movw	r20, r18
   1a87e:	61 e0       	ldi	r22, 0x01	; 1
   1a880:	ce 01       	movw	r24, r28
   1a882:	0e 94 fb d3 	call	0x1a7f6	; 0x1a7f6 <SRAM_23LC::startCommand(unsigned char, unsigned long)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:56
  _spi->transfer(SRAM_23LC_MODE_SEQUENTIAL);
   1a886:	60 e4       	ldi	r22, 0x40	; 64
   1a888:	88 81       	ld	r24, Y
   1a88a:	99 81       	ldd	r25, Y+1	; 0x01
   1a88c:	0e 94 05 d3 	call	0x1a60a	; 0x1a60a <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:57
  endCommand();
   1a890:	ce 01       	movw	r24, r28
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:58
}
   1a892:	df 91       	pop	r29
   1a894:	cf 91       	pop	r28
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:57

  _spi->begin();

  startCommand(SRAM_23LC_COMMAND_WRMR, 0);
  _spi->transfer(SRAM_23LC_MODE_SEQUENTIAL);
  endCommand();
   1a896:	0c 94 28 d4 	jmp	0x1a850	; 0x1a850 <SRAM_23LC::endCommand()>

0001a89a <SRAM_23LC::readByte(unsigned long)>:
_ZN9SRAM_23LC8readByteEm():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:66
{
  pinMode(_chipSelect, INPUT);
}

uint8_t SRAM_23LC::readByte(const uint32_t address)
{
   1a89a:	0f 93       	push	r16
   1a89c:	1f 93       	push	r17
   1a89e:	cf 93       	push	r28
   1a8a0:	df 93       	push	r29
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:67
  if (address >= _capacity) {
   1a8a2:	fc 01       	movw	r30, r24
   1a8a4:	04 81       	ldd	r16, Z+4	; 0x04
   1a8a6:	15 81       	ldd	r17, Z+5	; 0x05
   1a8a8:	26 81       	ldd	r18, Z+6	; 0x06
   1a8aa:	37 81       	ldd	r19, Z+7	; 0x07
   1a8ac:	40 17       	cp	r20, r16
   1a8ae:	51 07       	cpc	r21, r17
   1a8b0:	62 07       	cpc	r22, r18
   1a8b2:	73 07       	cpc	r23, r19
   1a8b4:	a8 f4       	brcc	.+42     	; 0x1a8e0 <SRAM_23LC::readByte(unsigned long)+0x46>
   1a8b6:	9a 01       	movw	r18, r20
   1a8b8:	ab 01       	movw	r20, r22
   1a8ba:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:71
    return(0);
  }

  startCommand(SRAM_23LC_COMMAND_READ, address);
   1a8bc:	63 e0       	ldi	r22, 0x03	; 3
   1a8be:	0e 94 fb d3 	call	0x1a7f6	; 0x1a7f6 <SRAM_23LC::startCommand(unsigned char, unsigned long)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:72
  uint8_t ret = _spi->transfer(SRAM_23LC_DUMMY_BYTE);
   1a8c2:	6f ef       	ldi	r22, 0xFF	; 255
   1a8c4:	88 81       	ld	r24, Y
   1a8c6:	99 81       	ldd	r25, Y+1	; 0x01
   1a8c8:	0e 94 05 d3 	call	0x1a60a	; 0x1a60a <SoftSPIB::transfer(unsigned char)>
   1a8cc:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:73
  endCommand();
   1a8ce:	ce 01       	movw	r24, r28
   1a8d0:	0e 94 28 d4 	call	0x1a850	; 0x1a850 <SRAM_23LC::endCommand()>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:76

  return(ret);
}
   1a8d4:	81 2f       	mov	r24, r17
   1a8d6:	df 91       	pop	r29
   1a8d8:	cf 91       	pop	r28
   1a8da:	1f 91       	pop	r17
   1a8dc:	0f 91       	pop	r16
   1a8de:	08 95       	ret
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:68
}

uint8_t SRAM_23LC::readByte(const uint32_t address)
{
  if (address >= _capacity) {
    return(0);
   1a8e0:	10 e0       	ldi	r17, 0x00	; 0
   1a8e2:	f8 cf       	rjmp	.-16     	; 0x1a8d4 <SRAM_23LC::readByte(unsigned long)+0x3a>

0001a8e4 <SRAM_23LC::writeByte(unsigned long, unsigned char)>:
_ZN9SRAM_23LC9writeByteEmh():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:79

  return(ret);
}

size_t SRAM_23LC::writeByte(const uint32_t address, const uint8_t byte)
{
   1a8e4:	cf 92       	push	r12
   1a8e6:	df 92       	push	r13
   1a8e8:	ef 92       	push	r14
   1a8ea:	ff 92       	push	r15
   1a8ec:	1f 93       	push	r17
   1a8ee:	cf 93       	push	r28
   1a8f0:	df 93       	push	r29
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:80
  if (address >= _capacity) {
   1a8f2:	fc 01       	movw	r30, r24
   1a8f4:	c4 80       	ldd	r12, Z+4	; 0x04
   1a8f6:	d5 80       	ldd	r13, Z+5	; 0x05
   1a8f8:	e6 80       	ldd	r14, Z+6	; 0x06
   1a8fa:	f7 80       	ldd	r15, Z+7	; 0x07
   1a8fc:	4c 15       	cp	r20, r12
   1a8fe:	5d 05       	cpc	r21, r13
   1a900:	6e 05       	cpc	r22, r14
   1a902:	7f 05       	cpc	r23, r15
   1a904:	c8 f4       	brcc	.+50     	; 0x1a938 <SRAM_23LC::writeByte(unsigned long, unsigned char)+0x54>
   1a906:	12 2f       	mov	r17, r18
   1a908:	9a 01       	movw	r18, r20
   1a90a:	ab 01       	movw	r20, r22
   1a90c:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:84
    return(0);
  }

  startCommand(SRAM_23LC_COMMAND_WRITE, address);
   1a90e:	62 e0       	ldi	r22, 0x02	; 2
   1a910:	0e 94 fb d3 	call	0x1a7f6	; 0x1a7f6 <SRAM_23LC::startCommand(unsigned char, unsigned long)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:85
  _spi->transfer(byte);
   1a914:	61 2f       	mov	r22, r17
   1a916:	88 81       	ld	r24, Y
   1a918:	99 81       	ldd	r25, Y+1	; 0x01
   1a91a:	0e 94 05 d3 	call	0x1a60a	; 0x1a60a <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:86
  endCommand();
   1a91e:	ce 01       	movw	r24, r28
   1a920:	0e 94 28 d4 	call	0x1a850	; 0x1a850 <SRAM_23LC::endCommand()>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:87
  return(1);
   1a924:	81 e0       	ldi	r24, 0x01	; 1
   1a926:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:88
}
   1a928:	df 91       	pop	r29
   1a92a:	cf 91       	pop	r28
   1a92c:	1f 91       	pop	r17
   1a92e:	ff 90       	pop	r15
   1a930:	ef 90       	pop	r14
   1a932:	df 90       	pop	r13
   1a934:	cf 90       	pop	r12
   1a936:	08 95       	ret
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:81
}

size_t SRAM_23LC::writeByte(const uint32_t address, const uint8_t byte)
{
  if (address >= _capacity) {
    return(0);
   1a938:	90 e0       	ldi	r25, 0x00	; 0
   1a93a:	80 e0       	ldi	r24, 0x00	; 0
   1a93c:	f5 cf       	rjmp	.-22     	; 0x1a928 <SRAM_23LC::writeByte(unsigned long, unsigned char)+0x44>

0001a93e <SPIClass::begin()>:
_ZN8SPIClass5beginEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:27
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
   1a93e:	cf 93       	push	r28
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:28
  uint8_t sreg = SREG;
   1a940:	cf b7       	in	r28, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:29
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
   1a942:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:30
  if (!initialized) {
   1a944:	80 91 26 12 	lds	r24, 0x1226	; 0x801226 <SPIClass::initialized>
   1a948:	81 11       	cpse	r24, r1
   1a94a:	27 c0       	rjmp	.+78     	; 0x1a99a <SPIClass::begin()+0x5c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:32
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
   1a94c:	e3 ed       	ldi	r30, 0xD3	; 211
   1a94e:	fe e8       	ldi	r31, 0x8E	; 142
   1a950:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:33
    uint8_t bit = digitalPinToBitMask(SS);
   1a952:	ed e9       	ldi	r30, 0x9D	; 157
   1a954:	fe e8       	ldi	r31, 0x8E	; 142
   1a956:	94 91       	lpm	r25, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:34
    volatile uint8_t *reg = portModeRegister(port);
   1a958:	e8 2f       	mov	r30, r24
   1a95a:	f0 e0       	ldi	r31, 0x00	; 0
   1a95c:	ee 0f       	add	r30, r30
   1a95e:	ff 1f       	adc	r31, r31
   1a960:	ef 5d       	subi	r30, 0xDF	; 223
   1a962:	f0 47       	sbci	r31, 0x70	; 112
   1a964:	a5 91       	lpm	r26, Z+
   1a966:	b4 91       	lpm	r27, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:38

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
   1a968:	ec 91       	ld	r30, X
   1a96a:	e9 23       	and	r30, r25
   1a96c:	21 f4       	brne	.+8      	; 0x1a976 <SPIClass::begin()+0x38>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:39
      digitalWrite(SS, HIGH);
   1a96e:	61 e0       	ldi	r22, 0x01	; 1
   1a970:	88 e0       	ldi	r24, 0x08	; 8
   1a972:	0f 94 60 10 	call	0x220c0	; 0x220c0 <digitalWrite>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:45
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
   1a976:	61 e0       	ldi	r22, 0x01	; 1
   1a978:	88 e0       	ldi	r24, 0x08	; 8
   1a97a:	0f 94 24 10 	call	0x22048	; 0x22048 <pinMode>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:50

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
   1a97e:	8c b5       	in	r24, 0x2c	; 44
   1a980:	80 61       	ori	r24, 0x10	; 16
   1a982:	8c bd       	out	0x2c, r24	; 44
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:51
    SPCR |= _BV(SPE);
   1a984:	8c b5       	in	r24, 0x2c	; 44
   1a986:	80 64       	ori	r24, 0x40	; 64
   1a988:	8c bd       	out	0x2c, r24	; 44
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:59
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
   1a98a:	61 e0       	ldi	r22, 0x01	; 1
   1a98c:	89 e0       	ldi	r24, 0x09	; 9
   1a98e:	0f 94 24 10 	call	0x22048	; 0x22048 <pinMode>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:60
    pinMode(MOSI, OUTPUT);
   1a992:	61 e0       	ldi	r22, 0x01	; 1
   1a994:	8a e0       	ldi	r24, 0x0A	; 10
   1a996:	0f 94 24 10 	call	0x22048	; 0x22048 <pinMode>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:62
  }
  initialized++; // reference count
   1a99a:	80 91 26 12 	lds	r24, 0x1226	; 0x801226 <SPIClass::initialized>
   1a99e:	8f 5f       	subi	r24, 0xFF	; 255
   1a9a0:	80 93 26 12 	sts	0x1226, r24	; 0x801226 <SPIClass::initialized>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:63
  SREG = sreg;
   1a9a4:	cf bf       	out	0x3f, r28	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:64
}
   1a9a6:	cf 91       	pop	r28
   1a9a8:	08 95       	ret

0001a9aa <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)>:
_ZN12EEPROM_CAT25C2EP8SoftSPIBh20_EEPROM_CAT25_Device():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:67
}

void EEPROM_CAT25::disableWrite(void)
{
  startCommand(EEPROM_CAT25_COMMAND_WRDI, 0);
  endCommand();
   1a9aa:	cf 92       	push	r12
   1a9ac:	df 92       	push	r13
   1a9ae:	ef 92       	push	r14
   1a9b0:	ff 92       	push	r15
   1a9b2:	dc 01       	movw	r26, r24
   1a9b4:	2e 30       	cpi	r18, 0x0E	; 14
   1a9b6:	31 05       	cpc	r19, r1
   1a9b8:	30 f5       	brcc	.+76     	; 0x1aa06 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x5c>
   1a9ba:	f9 01       	movw	r30, r18
   1a9bc:	88 27       	eor	r24, r24
   1a9be:	ec 51       	subi	r30, 0x1C	; 28
   1a9c0:	fb 42       	sbci	r31, 0x2B	; 43
   1a9c2:	8f 4f       	sbci	r24, 0xFF	; 255
   1a9c4:	0d 94 9e 16 	jmp	0x22d3c	; 0x22d3c <__tablejump2__>
   1a9c8:	f2 d4       	rcall	.+2532   	; 0x1b3ae <EthernetClass::begin(unsigned char*, IPAddress, IPAddress, IPAddress, IPAddress)+0x24>
   1a9ca:	11 d5       	rcall	.+2594   	; 0x1b3ee <EthernetClass::begin(unsigned char*, IPAddress, IPAddress, IPAddress, IPAddress)+0x64>
   1a9cc:	17 d5       	rcall	.+2606   	; 0x1b3fc <EthernetClass::begin(unsigned char*, IPAddress, IPAddress, IPAddress, IPAddress)+0x72>
   1a9ce:	24 d5       	rcall	.+2632   	; 0x1b418 <EthernetClass::dnsServerIP()+0xa>
   1a9d0:	32 d5       	rcall	.+2660   	; 0x1b436 <_GLOBAL__sub_I__ZN13EthernetClass6_stateE+0x8>
   1a9d2:	38 d5       	rcall	.+2672   	; 0x1b444 <_GLOBAL__sub_I__ZN13EthernetClass6_stateE+0x16>
   1a9d4:	3e d5       	rcall	.+2684   	; 0x1b452 <_GLOBAL__sub_I__ZN13EthernetClass6_stateE+0x24>
   1a9d6:	4c d5       	rcall	.+2712   	; 0x1b470 <EthernetClient::operator!=(EthernetClient const&)+0x12>
   1a9d8:	4c d5       	rcall	.+2712   	; 0x1b472 <EthernetClient::write(unsigned char)>
   1a9da:	52 d5       	rcall	.+2724   	; 0x1b480 <EthernetClient::write(unsigned char)+0xe>
   1a9dc:	52 d5       	rcall	.+2724   	; 0x1b482 <EthernetClient::write(unsigned char)+0x10>
   1a9de:	58 d5       	rcall	.+2736   	; 0x1b490 <EthernetClient::write(unsigned char)+0x1e>
   1a9e0:	66 d5       	rcall	.+2764   	; 0x1b4ae <EthernetClient::operator==(EthernetClient const&)>
   1a9e2:	6b d5       	rcall	.+2774   	; 0x1b4ba <EthernetClient::operator==(EthernetClient const&)+0xc>
   1a9e4:	c1 2c       	mov	r12, r1
   1a9e6:	d1 2c       	mov	r13, r1
   1a9e8:	94 e0       	ldi	r25, 0x04	; 4
   1a9ea:	e9 2e       	mov	r14, r25
   1a9ec:	f1 2c       	mov	r15, r1
   1a9ee:	14 96       	adiw	r26, 0x04	; 4
   1a9f0:	cd 92       	st	X+, r12
   1a9f2:	dd 92       	st	X+, r13
   1a9f4:	ed 92       	st	X+, r14
   1a9f6:	fc 92       	st	X, r15
   1a9f8:	17 97       	sbiw	r26, 0x07	; 7
   1a9fa:	80 e0       	ldi	r24, 0x00	; 0
   1a9fc:	91 e0       	ldi	r25, 0x01	; 1
   1a9fe:	19 96       	adiw	r26, 0x09	; 9
   1aa00:	9c 93       	st	X, r25
   1aa02:	8e 93       	st	-X, r24
   1aa04:	18 97       	sbiw	r26, 0x08	; 8
   1aa06:	13 96       	adiw	r26, 0x03	; 3
   1aa08:	3c 93       	st	X, r19
   1aa0a:	2e 93       	st	-X, r18
   1aa0c:	12 97       	sbiw	r26, 0x02	; 2
   1aa0e:	11 96       	adiw	r26, 0x01	; 1
   1aa10:	7c 93       	st	X, r23
   1aa12:	6e 93       	st	-X, r22
   1aa14:	1a 96       	adiw	r26, 0x0a	; 10
   1aa16:	4c 93       	st	X, r20
   1aa18:	ff 90       	pop	r15
   1aa1a:	ef 90       	pop	r14
   1aa1c:	df 90       	pop	r13
   1aa1e:	cf 90       	pop	r12
   1aa20:	08 95       	ret
   1aa22:	c1 2c       	mov	r12, r1
   1aa24:	d1 2c       	mov	r13, r1
   1aa26:	82 e0       	ldi	r24, 0x02	; 2
   1aa28:	e8 2e       	mov	r14, r24
   1aa2a:	f1 2c       	mov	r15, r1
   1aa2c:	e0 cf       	rjmp	.-64     	; 0x1a9ee <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x44>
   1aa2e:	c1 2c       	mov	r12, r1
   1aa30:	d1 2c       	mov	r13, r1
   1aa32:	76 01       	movw	r14, r12
   1aa34:	e3 94       	inc	r14
   1aa36:	14 96       	adiw	r26, 0x04	; 4
   1aa38:	cd 92       	st	X+, r12
   1aa3a:	dd 92       	st	X+, r13
   1aa3c:	ed 92       	st	X+, r14
   1aa3e:	fc 92       	st	X, r15
   1aa40:	17 97       	sbiw	r26, 0x07	; 7
   1aa42:	80 e8       	ldi	r24, 0x80	; 128
   1aa44:	90 e0       	ldi	r25, 0x00	; 0
   1aa46:	db cf       	rjmp	.-74     	; 0x1a9fe <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x54>
   1aa48:	c1 2c       	mov	r12, r1
   1aa4a:	e0 e8       	ldi	r30, 0x80	; 128
   1aa4c:	de 2e       	mov	r13, r30
   1aa4e:	e1 2c       	mov	r14, r1
   1aa50:	f1 2c       	mov	r15, r1
   1aa52:	14 96       	adiw	r26, 0x04	; 4
   1aa54:	cd 92       	st	X+, r12
   1aa56:	dd 92       	st	X+, r13
   1aa58:	ed 92       	st	X+, r14
   1aa5a:	fc 92       	st	X, r15
   1aa5c:	17 97       	sbiw	r26, 0x07	; 7
   1aa5e:	80 e4       	ldi	r24, 0x40	; 64
   1aa60:	90 e0       	ldi	r25, 0x00	; 0
   1aa62:	cd cf       	rjmp	.-102    	; 0x1a9fe <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x54>
   1aa64:	c1 2c       	mov	r12, r1
   1aa66:	50 e4       	ldi	r21, 0x40	; 64
   1aa68:	d5 2e       	mov	r13, r21
   1aa6a:	e1 2c       	mov	r14, r1
   1aa6c:	f1 2c       	mov	r15, r1
   1aa6e:	f1 cf       	rjmp	.-30     	; 0x1aa52 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0xa8>
   1aa70:	c1 2c       	mov	r12, r1
   1aa72:	90 e2       	ldi	r25, 0x20	; 32
   1aa74:	d9 2e       	mov	r13, r25
   1aa76:	e1 2c       	mov	r14, r1
   1aa78:	f1 2c       	mov	r15, r1
   1aa7a:	eb cf       	rjmp	.-42     	; 0x1aa52 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0xa8>
   1aa7c:	c1 2c       	mov	r12, r1
   1aa7e:	80 e1       	ldi	r24, 0x10	; 16
   1aa80:	d8 2e       	mov	r13, r24
   1aa82:	e1 2c       	mov	r14, r1
   1aa84:	f1 2c       	mov	r15, r1
   1aa86:	14 96       	adiw	r26, 0x04	; 4
   1aa88:	cd 92       	st	X+, r12
   1aa8a:	dd 92       	st	X+, r13
   1aa8c:	ed 92       	st	X+, r14
   1aa8e:	fc 92       	st	X, r15
   1aa90:	17 97       	sbiw	r26, 0x07	; 7
   1aa92:	80 e2       	ldi	r24, 0x20	; 32
   1aa94:	90 e0       	ldi	r25, 0x00	; 0
   1aa96:	b3 cf       	rjmp	.-154    	; 0x1a9fe <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x54>
   1aa98:	c1 2c       	mov	r12, r1
   1aa9a:	f8 e0       	ldi	r31, 0x08	; 8
   1aa9c:	df 2e       	mov	r13, r31
   1aa9e:	e1 2c       	mov	r14, r1
   1aaa0:	f1 2c       	mov	r15, r1
   1aaa2:	f1 cf       	rjmp	.-30     	; 0x1aa86 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0xdc>
   1aaa4:	c1 2c       	mov	r12, r1
   1aaa6:	e4 e0       	ldi	r30, 0x04	; 4
   1aaa8:	de 2e       	mov	r13, r30
   1aaaa:	e1 2c       	mov	r14, r1
   1aaac:	f1 2c       	mov	r15, r1
   1aaae:	eb cf       	rjmp	.-42     	; 0x1aa86 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0xdc>
   1aab0:	c1 2c       	mov	r12, r1
   1aab2:	52 e0       	ldi	r21, 0x02	; 2
   1aab4:	d5 2e       	mov	r13, r21
   1aab6:	e1 2c       	mov	r14, r1
   1aab8:	f1 2c       	mov	r15, r1
   1aaba:	14 96       	adiw	r26, 0x04	; 4
   1aabc:	cd 92       	st	X+, r12
   1aabe:	dd 92       	st	X+, r13
   1aac0:	ed 92       	st	X+, r14
   1aac2:	fc 92       	st	X, r15
   1aac4:	17 97       	sbiw	r26, 0x07	; 7
   1aac6:	80 e1       	ldi	r24, 0x10	; 16
   1aac8:	90 e0       	ldi	r25, 0x00	; 0
   1aaca:	99 cf       	rjmp	.-206    	; 0x1a9fe <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x54>
   1aacc:	c1 2c       	mov	r12, r1
   1aace:	d1 2c       	mov	r13, r1
   1aad0:	76 01       	movw	r14, r12
   1aad2:	d3 94       	inc	r13
   1aad4:	f2 cf       	rjmp	.-28     	; 0x1aaba <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x110>
   1aad6:	80 e8       	ldi	r24, 0x80	; 128
   1aad8:	c8 2e       	mov	r12, r24
   1aada:	d1 2c       	mov	r13, r1
   1aadc:	e1 2c       	mov	r14, r1
   1aade:	f1 2c       	mov	r15, r1
   1aae0:	ec cf       	rjmp	.-40     	; 0x1aaba <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x110>

0001aae2 <EEPROM_CAT25::begin()>:
_ZN12EEPROM_CAT255beginEv():
   1aae2:	cf 93       	push	r28
   1aae4:	df 93       	push	r29
   1aae6:	ec 01       	movw	r28, r24
   1aae8:	61 e0       	ldi	r22, 0x01	; 1
   1aaea:	8a 85       	ldd	r24, Y+10	; 0x0a
   1aaec:	0f 94 60 10 	call	0x220c0	; 0x220c0 <digitalWrite>
   1aaf0:	61 e0       	ldi	r22, 0x01	; 1
   1aaf2:	8a 85       	ldd	r24, Y+10	; 0x0a
   1aaf4:	0f 94 24 10 	call	0x22048	; 0x22048 <pinMode>
   1aaf8:	88 81       	ld	r24, Y
   1aafa:	99 81       	ldd	r25, Y+1	; 0x01
   1aafc:	df 91       	pop	r29
   1aafe:	cf 91       	pop	r28
   1ab00:	0c 94 f4 d2 	jmp	0x1a5e8	; 0x1a5e8 <SoftSPIB::begin()>

0001ab04 <EEPROM_CAT25::sendAddressBytes(unsigned long)>:
_ZN12EEPROM_CAT2516sendAddressBytesEm():
   1ab04:	cf 92       	push	r12
   1ab06:	df 92       	push	r13
   1ab08:	ef 92       	push	r14
   1ab0a:	ff 92       	push	r15
   1ab0c:	cf 93       	push	r28
   1ab0e:	df 93       	push	r29
   1ab10:	ec 01       	movw	r28, r24
   1ab12:	6a 01       	movw	r12, r20
   1ab14:	7b 01       	movw	r14, r22
   1ab16:	8c 81       	ldd	r24, Y+4	; 0x04
   1ab18:	9d 81       	ldd	r25, Y+5	; 0x05
   1ab1a:	ae 81       	ldd	r26, Y+6	; 0x06
   1ab1c:	bf 81       	ldd	r27, Y+7	; 0x07
   1ab1e:	01 97       	sbiw	r24, 0x01	; 1
   1ab20:	a1 40       	sbci	r26, 0x01	; 1
   1ab22:	b1 05       	cpc	r27, r1
   1ab24:	38 f0       	brcs	.+14     	; 0x1ab34 <EEPROM_CAT25::sendAddressBytes(unsigned long)+0x30>
   1ab26:	b7 01       	movw	r22, r14
   1ab28:	88 27       	eor	r24, r24
   1ab2a:	99 27       	eor	r25, r25
   1ab2c:	88 81       	ld	r24, Y
   1ab2e:	99 81       	ldd	r25, Y+1	; 0x01
   1ab30:	0e 94 05 d3 	call	0x1a60a	; 0x1a60a <SoftSPIB::transfer(unsigned char)>
   1ab34:	8c 81       	ldd	r24, Y+4	; 0x04
   1ab36:	9d 81       	ldd	r25, Y+5	; 0x05
   1ab38:	ae 81       	ldd	r26, Y+6	; 0x06
   1ab3a:	bf 81       	ldd	r27, Y+7	; 0x07
   1ab3c:	81 30       	cpi	r24, 0x01	; 1
   1ab3e:	91 40       	sbci	r25, 0x01	; 1
   1ab40:	a1 05       	cpc	r26, r1
   1ab42:	b1 05       	cpc	r27, r1
   1ab44:	60 f0       	brcs	.+24     	; 0x1ab5e <EEPROM_CAT25::sendAddressBytes(unsigned long)+0x5a>
   1ab46:	8a 81       	ldd	r24, Y+2	; 0x02
   1ab48:	9b 81       	ldd	r25, Y+3	; 0x03
   1ab4a:	0b 97       	sbiw	r24, 0x0b	; 11
   1ab4c:	41 f0       	breq	.+16     	; 0x1ab5e <EEPROM_CAT25::sendAddressBytes(unsigned long)+0x5a>
   1ab4e:	99 27       	eor	r25, r25
   1ab50:	8f 2d       	mov	r24, r15
   1ab52:	7e 2d       	mov	r23, r14
   1ab54:	6d 2d       	mov	r22, r13
   1ab56:	88 81       	ld	r24, Y
   1ab58:	99 81       	ldd	r25, Y+1	; 0x01
   1ab5a:	0e 94 05 d3 	call	0x1a60a	; 0x1a60a <SoftSPIB::transfer(unsigned char)>
   1ab5e:	6c 2d       	mov	r22, r12
   1ab60:	88 81       	ld	r24, Y
   1ab62:	99 81       	ldd	r25, Y+1	; 0x01
   1ab64:	df 91       	pop	r29
   1ab66:	cf 91       	pop	r28
   1ab68:	ff 90       	pop	r15
   1ab6a:	ef 90       	pop	r14
   1ab6c:	df 90       	pop	r13
   1ab6e:	cf 90       	pop	r12
   1ab70:	0c 94 05 d3 	jmp	0x1a60a	; 0x1a60a <SoftSPIB::transfer(unsigned char)>

0001ab74 <EEPROM_CAT25::startCommand(unsigned char, unsigned long)>:
_ZN12EEPROM_CAT2512startCommandEhm():
   1ab74:	cf 92       	push	r12
   1ab76:	df 92       	push	r13
   1ab78:	ef 92       	push	r14
   1ab7a:	ff 92       	push	r15
   1ab7c:	0f 93       	push	r16
   1ab7e:	1f 93       	push	r17
   1ab80:	cf 93       	push	r28
   1ab82:	8c 01       	movw	r16, r24
   1ab84:	c6 2f       	mov	r28, r22
   1ab86:	69 01       	movw	r12, r18
   1ab88:	7a 01       	movw	r14, r20
   1ab8a:	60 e0       	ldi	r22, 0x00	; 0
   1ab8c:	fc 01       	movw	r30, r24
   1ab8e:	82 85       	ldd	r24, Z+10	; 0x0a
   1ab90:	0f 94 60 10 	call	0x220c0	; 0x220c0 <digitalWrite>
   1ab94:	f8 01       	movw	r30, r16
   1ab96:	82 81       	ldd	r24, Z+2	; 0x02
   1ab98:	93 81       	ldd	r25, Z+3	; 0x03
   1ab9a:	0b 97       	sbiw	r24, 0x0b	; 11
   1ab9c:	71 f4       	brne	.+28     	; 0x1abba <EEPROM_CAT25::startCommand(unsigned char, unsigned long)+0x46>
   1ab9e:	ff ef       	ldi	r31, 0xFF	; 255
   1aba0:	cf 16       	cp	r12, r31
   1aba2:	d1 04       	cpc	r13, r1
   1aba4:	e1 04       	cpc	r14, r1
   1aba6:	f1 04       	cpc	r15, r1
   1aba8:	41 f0       	breq	.+16     	; 0x1abba <EEPROM_CAT25::startCommand(unsigned char, unsigned long)+0x46>
   1abaa:	38 f0       	brcs	.+14     	; 0x1abba <EEPROM_CAT25::startCommand(unsigned char, unsigned long)+0x46>
   1abac:	c3 30       	cpi	r28, 0x03	; 3
   1abae:	21 f0       	breq	.+8      	; 0x1abb8 <EEPROM_CAT25::startCommand(unsigned char, unsigned long)+0x44>
   1abb0:	c2 30       	cpi	r28, 0x02	; 2
   1abb2:	19 f4       	brne	.+6      	; 0x1abba <EEPROM_CAT25::startCommand(unsigned char, unsigned long)+0x46>
   1abb4:	ca e0       	ldi	r28, 0x0A	; 10
   1abb6:	01 c0       	rjmp	.+2      	; 0x1abba <EEPROM_CAT25::startCommand(unsigned char, unsigned long)+0x46>
   1abb8:	cb e0       	ldi	r28, 0x0B	; 11
   1abba:	6c 2f       	mov	r22, r28
   1abbc:	f8 01       	movw	r30, r16
   1abbe:	80 81       	ld	r24, Z
   1abc0:	91 81       	ldd	r25, Z+1	; 0x01
   1abc2:	0e 94 05 d3 	call	0x1a60a	; 0x1a60a <SoftSPIB::transfer(unsigned char)>
   1abc6:	c2 50       	subi	r28, 0x02	; 2
   1abc8:	c2 30       	cpi	r28, 0x02	; 2
   1abca:	60 f4       	brcc	.+24     	; 0x1abe4 <EEPROM_CAT25::startCommand(unsigned char, unsigned long)+0x70>
   1abcc:	b7 01       	movw	r22, r14
   1abce:	a6 01       	movw	r20, r12
   1abd0:	c8 01       	movw	r24, r16
   1abd2:	cf 91       	pop	r28
   1abd4:	1f 91       	pop	r17
   1abd6:	0f 91       	pop	r16
   1abd8:	ff 90       	pop	r15
   1abda:	ef 90       	pop	r14
   1abdc:	df 90       	pop	r13
   1abde:	cf 90       	pop	r12
   1abe0:	0c 94 82 d5 	jmp	0x1ab04	; 0x1ab04 <EEPROM_CAT25::sendAddressBytes(unsigned long)>
   1abe4:	cf 91       	pop	r28
   1abe6:	1f 91       	pop	r17
   1abe8:	0f 91       	pop	r16
   1abea:	ff 90       	pop	r15
   1abec:	ef 90       	pop	r14
   1abee:	df 90       	pop	r13
   1abf0:	cf 90       	pop	r12
   1abf2:	08 95       	ret

0001abf4 <EEPROM_CAT25::endCommand()>:
_ZN12EEPROM_CAT2510endCommandEv():
   1abf4:	61 e0       	ldi	r22, 0x01	; 1
   1abf6:	fc 01       	movw	r30, r24
   1abf8:	82 85       	ldd	r24, Z+10	; 0x0a
   1abfa:	0d 94 60 10 	jmp	0x220c0	; 0x220c0 <digitalWrite>

0001abfe <EEPROM_CAT25::getStatusRegister()>:
_ZN12EEPROM_CAT2517getStatusRegisterEv():
   1abfe:	1f 93       	push	r17
   1ac00:	cf 93       	push	r28
   1ac02:	df 93       	push	r29
   1ac04:	ec 01       	movw	r28, r24
   1ac06:	20 e0       	ldi	r18, 0x00	; 0
   1ac08:	30 e0       	ldi	r19, 0x00	; 0
   1ac0a:	a9 01       	movw	r20, r18
   1ac0c:	65 e0       	ldi	r22, 0x05	; 5
   1ac0e:	0e 94 ba d5 	call	0x1ab74	; 0x1ab74 <EEPROM_CAT25::startCommand(unsigned char, unsigned long)>
   1ac12:	6f ef       	ldi	r22, 0xFF	; 255
   1ac14:	88 81       	ld	r24, Y
   1ac16:	99 81       	ldd	r25, Y+1	; 0x01
   1ac18:	0e 94 05 d3 	call	0x1a60a	; 0x1a60a <SoftSPIB::transfer(unsigned char)>
   1ac1c:	18 2f       	mov	r17, r24
   1ac1e:	ce 01       	movw	r24, r28
   1ac20:	0e 94 fa d5 	call	0x1abf4	; 0x1abf4 <EEPROM_CAT25::endCommand()>
   1ac24:	81 2f       	mov	r24, r17
   1ac26:	df 91       	pop	r29
   1ac28:	cf 91       	pop	r28
   1ac2a:	1f 91       	pop	r17
   1ac2c:	08 95       	ret

0001ac2e <EEPROM_CAT25::isReady()>:
_ZN12EEPROM_CAT257isReadyEv():
   1ac2e:	0e 94 ff d5 	call	0x1abfe	; 0x1abfe <EEPROM_CAT25::getStatusRegister()>
   1ac32:	80 95       	com	r24
   1ac34:	81 70       	andi	r24, 0x01	; 1
   1ac36:	08 95       	ret

0001ac38 <EEPROM_CAT25::enableWrite()>:
_ZN12EEPROM_CAT2511enableWriteEv():
   1ac38:	cf 93       	push	r28
   1ac3a:	df 93       	push	r29
   1ac3c:	ec 01       	movw	r28, r24
   1ac3e:	20 e0       	ldi	r18, 0x00	; 0
   1ac40:	30 e0       	ldi	r19, 0x00	; 0
   1ac42:	a9 01       	movw	r20, r18
   1ac44:	66 e0       	ldi	r22, 0x06	; 6
   1ac46:	0e 94 ba d5 	call	0x1ab74	; 0x1ab74 <EEPROM_CAT25::startCommand(unsigned char, unsigned long)>
   1ac4a:	ce 01       	movw	r24, r28
   1ac4c:	df 91       	pop	r29
   1ac4e:	cf 91       	pop	r28
   1ac50:	0c 94 fa d5 	jmp	0x1abf4	; 0x1abf4 <EEPROM_CAT25::endCommand()>

0001ac54 <EEPROM_CAT25::readByte(unsigned long)>:
_ZN12EEPROM_CAT258readByteEm():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:71
}

uint8_t EEPROM_CAT25::readByte(const uint32_t address)
{
   1ac54:	cf 92       	push	r12
   1ac56:	df 92       	push	r13
   1ac58:	ef 92       	push	r14
   1ac5a:	ff 92       	push	r15
   1ac5c:	1f 93       	push	r17
   1ac5e:	cf 93       	push	r28
   1ac60:	df 93       	push	r29
   1ac62:	ec 01       	movw	r28, r24
   1ac64:	6a 01       	movw	r12, r20
   1ac66:	7b 01       	movw	r14, r22
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:72
  if (address >= _capacity) {
   1ac68:	8c 81       	ldd	r24, Y+4	; 0x04
   1ac6a:	9d 81       	ldd	r25, Y+5	; 0x05
   1ac6c:	ae 81       	ldd	r26, Y+6	; 0x06
   1ac6e:	bf 81       	ldd	r27, Y+7	; 0x07
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:73
    return(0);
   1ac70:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:72
  endCommand();
}

uint8_t EEPROM_CAT25::readByte(const uint32_t address)
{
  if (address >= _capacity) {
   1ac72:	c8 16       	cp	r12, r24
   1ac74:	d9 06       	cpc	r13, r25
   1ac76:	ea 06       	cpc	r14, r26
   1ac78:	fb 06       	cpc	r15, r27
   1ac7a:	b8 f4       	brcc	.+46     	; 0x1acaa <EEPROM_CAT25::readByte(unsigned long)+0x56>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:76
    return(0);
  }

  while (!isReady()) {
   1ac7c:	ce 01       	movw	r24, r28
   1ac7e:	0e 94 17 d6 	call	0x1ac2e	; 0x1ac2e <EEPROM_CAT25::isReady()>
   1ac82:	81 11       	cpse	r24, r1
   1ac84:	03 c0       	rjmp	.+6      	; 0x1ac8c <EEPROM_CAT25::readByte(unsigned long)+0x38>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:77
    yield();
   1ac86:	0f 94 b7 0e 	call	0x21d6e	; 0x21d6e <yield>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:76
{
  if (address >= _capacity) {
    return(0);
  }

  while (!isReady()) {
   1ac8a:	f8 cf       	rjmp	.-16     	; 0x1ac7c <EEPROM_CAT25::readByte(unsigned long)+0x28>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:80
    yield();
  }

  startCommand(EEPROM_CAT25_COMMAND_READ, address);
   1ac8c:	a7 01       	movw	r20, r14
   1ac8e:	96 01       	movw	r18, r12
   1ac90:	63 e0       	ldi	r22, 0x03	; 3
   1ac92:	ce 01       	movw	r24, r28
   1ac94:	0e 94 ba d5 	call	0x1ab74	; 0x1ab74 <EEPROM_CAT25::startCommand(unsigned char, unsigned long)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:81
  uint8_t ret = _spi->transfer(EEPROM_CAT25_DUMMY_BYTE);
   1ac98:	6f ef       	ldi	r22, 0xFF	; 255
   1ac9a:	88 81       	ld	r24, Y
   1ac9c:	99 81       	ldd	r25, Y+1	; 0x01
   1ac9e:	0e 94 05 d3 	call	0x1a60a	; 0x1a60a <SoftSPIB::transfer(unsigned char)>
   1aca2:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:82
  endCommand();
   1aca4:	ce 01       	movw	r24, r28
   1aca6:	0e 94 fa d5 	call	0x1abf4	; 0x1abf4 <EEPROM_CAT25::endCommand()>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:85

  return(ret);
}
   1acaa:	81 2f       	mov	r24, r17
   1acac:	df 91       	pop	r29
   1acae:	cf 91       	pop	r28
   1acb0:	1f 91       	pop	r17
   1acb2:	ff 90       	pop	r15
   1acb4:	ef 90       	pop	r14
   1acb6:	df 90       	pop	r13
   1acb8:	cf 90       	pop	r12
   1acba:	08 95       	ret

0001acbc <EEPROM_CAT25::writeByte(unsigned long, unsigned char)>:
_ZN12EEPROM_CAT259writeByteEmh():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:88

size_t EEPROM_CAT25::writeByte(const uint32_t address, const uint8_t byte)
{
   1acbc:	cf 92       	push	r12
   1acbe:	df 92       	push	r13
   1acc0:	ef 92       	push	r14
   1acc2:	ff 92       	push	r15
   1acc4:	1f 93       	push	r17
   1acc6:	cf 93       	push	r28
   1acc8:	df 93       	push	r29
   1acca:	ec 01       	movw	r28, r24
   1accc:	6a 01       	movw	r12, r20
   1acce:	7b 01       	movw	r14, r22
   1acd0:	12 2f       	mov	r17, r18
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:90

  if (address >= _capacity) {
   1acd2:	8c 81       	ldd	r24, Y+4	; 0x04
   1acd4:	9d 81       	ldd	r25, Y+5	; 0x05
   1acd6:	ae 81       	ldd	r26, Y+6	; 0x06
   1acd8:	bf 81       	ldd	r27, Y+7	; 0x07
   1acda:	c8 16       	cp	r12, r24
   1acdc:	d9 06       	cpc	r13, r25
   1acde:	ea 06       	cpc	r14, r26
   1ace0:	fb 06       	cpc	r15, r27
   1ace2:	18 f5       	brcc	.+70     	; 0x1ad2a <EEPROM_CAT25::writeByte(unsigned long, unsigned char)+0x6e>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:95
    return(0);
  }


  while (!isReady()) {
   1ace4:	ce 01       	movw	r24, r28
   1ace6:	0e 94 17 d6 	call	0x1ac2e	; 0x1ac2e <EEPROM_CAT25::isReady()>
   1acea:	81 11       	cpse	r24, r1
   1acec:	03 c0       	rjmp	.+6      	; 0x1acf4 <EEPROM_CAT25::writeByte(unsigned long, unsigned char)+0x38>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:96
    yield();
   1acee:	0f 94 b7 0e 	call	0x21d6e	; 0x21d6e <yield>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:95
  if (address >= _capacity) {
    return(0);
  }


  while (!isReady()) {
   1acf2:	f8 cf       	rjmp	.-16     	; 0x1ace4 <EEPROM_CAT25::writeByte(unsigned long, unsigned char)+0x28>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:99
    yield();
  }

  enableWrite();
   1acf4:	ce 01       	movw	r24, r28
   1acf6:	0e 94 1c d6 	call	0x1ac38	; 0x1ac38 <EEPROM_CAT25::enableWrite()>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:100
  startCommand(EEPROM_CAT25_COMMAND_WRITE, address);
   1acfa:	a7 01       	movw	r20, r14
   1acfc:	96 01       	movw	r18, r12
   1acfe:	62 e0       	ldi	r22, 0x02	; 2
   1ad00:	ce 01       	movw	r24, r28
   1ad02:	0e 94 ba d5 	call	0x1ab74	; 0x1ab74 <EEPROM_CAT25::startCommand(unsigned char, unsigned long)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:101
  _spi->transfer(byte);
   1ad06:	61 2f       	mov	r22, r17
   1ad08:	88 81       	ld	r24, Y
   1ad0a:	99 81       	ldd	r25, Y+1	; 0x01
   1ad0c:	0e 94 05 d3 	call	0x1a60a	; 0x1a60a <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:102
  endCommand();
   1ad10:	ce 01       	movw	r24, r28
   1ad12:	0e 94 fa d5 	call	0x1abf4	; 0x1abf4 <EEPROM_CAT25::endCommand()>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:104

  return(1);
   1ad16:	81 e0       	ldi	r24, 0x01	; 1
   1ad18:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:105
}
   1ad1a:	df 91       	pop	r29
   1ad1c:	cf 91       	pop	r28
   1ad1e:	1f 91       	pop	r17
   1ad20:	ff 90       	pop	r15
   1ad22:	ef 90       	pop	r14
   1ad24:	df 90       	pop	r13
   1ad26:	cf 90       	pop	r12
   1ad28:	08 95       	ret
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:91

size_t EEPROM_CAT25::writeByte(const uint32_t address, const uint8_t byte)
{

  if (address >= _capacity) {
    return(0);
   1ad2a:	90 e0       	ldi	r25, 0x00	; 0
   1ad2c:	80 e0       	ldi	r24, 0x00	; 0
   1ad2e:	f5 cf       	rjmp	.-22     	; 0x1ad1a <EEPROM_CAT25::writeByte(unsigned long, unsigned char)+0x5e>

0001ad30 <_GLOBAL__sub_I__ZN9DhcpClass13beginWithDHCPEPhmm>:
_GLOBAL__sub_I__ZN9DhcpClass13beginWithDHCPEPhmm():
/home/saric/Arduino/libraries/Ethernet2/src/Dhcp.cpp:518
    unsigned long m = n;
    n /= 16;
    char c = m - 16 * n;
    *str-- = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);
}
   1ad30:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
   1ad32:	00 e0       	ldi	r16, 0x00	; 0
   1ad34:	20 e0       	ldi	r18, 0x00	; 0
   1ad36:	40 e0       	ldi	r20, 0x00	; 0
   1ad38:	60 e0       	ldi	r22, 0x00	; 0
   1ad3a:	87 e2       	ldi	r24, 0x27	; 39
   1ad3c:	92 e1       	ldi	r25, 0x12	; 18
   1ad3e:	0f 94 7a 12 	call	0x224f4	; 0x224f4 <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_GLOBAL__sub_I__ZN9DhcpClass13beginWithDHCPEPhmm():
/home/saric/Arduino/libraries/Ethernet2/src/Dhcp.cpp:518
   1ad42:	0f 91       	pop	r16
   1ad44:	08 95       	ret

0001ad46 <DNSClient::begin(IPAddress const&)>:
_ZN9IPAddressaSERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
   1ad46:	fb 01       	movw	r30, r22
   1ad48:	42 81       	ldd	r20, Z+2	; 0x02
   1ad4a:	53 81       	ldd	r21, Z+3	; 0x03
   1ad4c:	64 81       	ldd	r22, Z+4	; 0x04
   1ad4e:	75 81       	ldd	r23, Z+5	; 0x05
   1ad50:	fc 01       	movw	r30, r24
   1ad52:	42 83       	std	Z+2, r20	; 0x02
   1ad54:	53 83       	std	Z+3, r21	; 0x03
   1ad56:	64 83       	std	Z+4, r22	; 0x04
   1ad58:	75 83       	std	Z+5, r23	; 0x05
_ZN9DNSClient5beginERK9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:54
#define INVALID_RESPONSE -4

void DNSClient::begin(const IPAddress& aDNSServer)
{
    iDNSServer = aDNSServer;
    iRequestId = 0;
   1ad5a:	17 82       	std	Z+7, r1	; 0x07
   1ad5c:	16 82       	std	Z+6, r1	; 0x06
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:55
}
   1ad5e:	08 95       	ret

0001ad60 <DNSClient::inet_aton(char const*, IPAddress&)>:
_ZN9DNSClient9inet_atonEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:59


int DNSClient::inet_aton(const char* aIPAddrString, IPAddress& aResult)
{
   1ad60:	fb 01       	movw	r30, r22
   1ad62:	db 01       	movw	r26, r22
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:62
    // See if we've been given a valid IP address
    const char* p =aIPAddrString;
    while (*p &&
   1ad64:	8d 91       	ld	r24, X+
   1ad66:	81 11       	cpse	r24, r1
   1ad68:	fd cf       	rjmp	.-6      	; 0x1ad64 <DNSClient::inet_aton(char const*, IPAddress&)+0x4>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:73
    if (*p == '\0')
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
   1ad6a:	90 e0       	ldi	r25, 0x00	; 0
   1ad6c:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:72

    if (*p == '\0')
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
   1ad6e:	70 e0       	ldi	r23, 0x00	; 0
   1ad70:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:94
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
   1ad72:	3a e0       	ldi	r19, 0x0A	; 10
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:74
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
        while (*p && (segment < 4))
   1ad74:	21 91       	ld	r18, Z+
   1ad76:	22 23       	and	r18, r18
   1ad78:	f9 f0       	breq	.+62     	; 0x1adb8 <DNSClient::inet_aton(char const*, IPAddress&)+0x58>
   1ad7a:	64 30       	cpi	r22, 0x04	; 4
   1ad7c:	71 05       	cpc	r23, r1
   1ad7e:	54 f5       	brge	.+84     	; 0x1add4 <DNSClient::inet_aton(char const*, IPAddress&)+0x74>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:76
        {
            if (*p == '.')
   1ad80:	2e 32       	cpi	r18, 0x2E	; 46
   1ad82:	71 f4       	brne	.+28     	; 0x1ada0 <DNSClient::inet_aton(char const*, IPAddress&)+0x40>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:79
            {
                // We've reached the end of a segment
                if (segmentValue > 255)
   1ad84:	8f 3f       	cpi	r24, 0xFF	; 255
   1ad86:	91 05       	cpc	r25, r1
   1ad88:	09 f0       	breq	.+2      	; 0x1ad8c <DNSClient::inet_aton(char const*, IPAddress&)+0x2c>
   1ad8a:	24 f5       	brge	.+72     	; 0x1add4 <DNSClient::inet_aton(char const*, IPAddress&)+0x74>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:86
                    // You can't have IP address segments that don't fit in a byte
                    return 0;
                }
                else
                {
                    aResult[segment] = (byte)segmentValue;
   1ad8c:	da 01       	movw	r26, r20
   1ad8e:	a6 0f       	add	r26, r22
   1ad90:	b7 1f       	adc	r27, r23
   1ad92:	12 96       	adiw	r26, 0x02	; 2
   1ad94:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:87
                    segment++;
   1ad96:	6f 5f       	subi	r22, 0xFF	; 255
   1ad98:	7f 4f       	sbci	r23, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:88
                    segmentValue = 0;
   1ad9a:	90 e0       	ldi	r25, 0x00	; 0
   1ad9c:	80 e0       	ldi	r24, 0x00	; 0
   1ad9e:	ea cf       	rjmp	.-44     	; 0x1ad74 <DNSClient::inet_aton(char const*, IPAddress&)+0x14>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:94
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
   1ada0:	38 9f       	mul	r19, r24
   1ada2:	d0 01       	movw	r26, r0
   1ada4:	39 9f       	mul	r19, r25
   1ada6:	b0 0d       	add	r27, r0
   1ada8:	11 24       	eor	r1, r1
   1adaa:	82 2f       	mov	r24, r18
   1adac:	22 0f       	add	r18, r18
   1adae:	99 0b       	sbc	r25, r25
   1adb0:	c0 97       	sbiw	r24, 0x30	; 48
   1adb2:	8a 0f       	add	r24, r26
   1adb4:	9b 1f       	adc	r25, r27
   1adb6:	de cf       	rjmp	.-68     	; 0x1ad74 <DNSClient::inet_aton(char const*, IPAddress&)+0x14>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:100
            }
            p++;
        }
        // We've reached the end of address, but there'll still be the last
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
   1adb8:	8f 3f       	cpi	r24, 0xFF	; 255
   1adba:	91 05       	cpc	r25, r1
   1adbc:	09 f0       	breq	.+2      	; 0x1adc0 <DNSClient::inet_aton(char const*, IPAddress&)+0x60>
   1adbe:	54 f4       	brge	.+20     	; 0x1add4 <DNSClient::inet_aton(char const*, IPAddress&)+0x74>
   1adc0:	64 30       	cpi	r22, 0x04	; 4
   1adc2:	71 05       	cpc	r23, r1
   1adc4:	3c f4       	brge	.+14     	; 0x1add4 <DNSClient::inet_aton(char const*, IPAddress&)+0x74>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:108
            // or more than four segments
            return 0;
        }
        else
        {
            aResult[segment] = (byte)segmentValue;
   1adc6:	46 0f       	add	r20, r22
   1adc8:	57 1f       	adc	r21, r23
   1adca:	fa 01       	movw	r30, r20
   1adcc:	82 83       	std	Z+2, r24	; 0x02
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:109
            return 1;
   1adce:	81 e0       	ldi	r24, 0x01	; 1
   1add0:	90 e0       	ldi	r25, 0x00	; 0
   1add2:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:104
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
        {
            // You can't have IP address segments that don't fit in a byte,
            // or more than four segments
            return 0;
   1add4:	90 e0       	ldi	r25, 0x00	; 0
   1add6:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:116
    }
    else
    {
        return 0;
    }
}
   1add8:	08 95       	ret

0001adda <_GLOBAL__sub_I__ZN9DNSClient5beginERK9IPAddress>:
_GLOBAL__sub_I__ZN9DNSClient5beginERK9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:422
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
   1adda:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
   1addc:	00 e0       	ldi	r16, 0x00	; 0
   1adde:	20 e0       	ldi	r18, 0x00	; 0
   1ade0:	40 e0       	ldi	r20, 0x00	; 0
   1ade2:	60 e0       	ldi	r22, 0x00	; 0
   1ade4:	8d e2       	ldi	r24, 0x2D	; 45
   1ade6:	92 e1       	ldi	r25, 0x12	; 18
   1ade8:	0f 94 7a 12 	call	0x224f4	; 0x224f4 <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_GLOBAL__sub_I__ZN9DNSClient5beginERK9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:422
   1adec:	0f 91       	pop	r16
   1adee:	08 95       	ret

0001adf0 <DNSClient::BuildRequest(char const*)>:
_ZN9DNSClient12BuildRequestEPKc():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:176

    return ret;
}

uint16_t DNSClient::BuildRequest(const char* aName)
{
   1adf0:	8f 92       	push	r8
   1adf2:	9f 92       	push	r9
   1adf4:	af 92       	push	r10
   1adf6:	bf 92       	push	r11
   1adf8:	cf 92       	push	r12
   1adfa:	df 92       	push	r13
   1adfc:	ef 92       	push	r14
   1adfe:	ff 92       	push	r15
   1ae00:	0f 93       	push	r16
   1ae02:	1f 93       	push	r17
   1ae04:	cf 93       	push	r28
   1ae06:	df 93       	push	r29
   1ae08:	00 d0       	rcall	.+0      	; 0x1ae0a <DNSClient::BuildRequest(char const*)+0x1a>
   1ae0a:	cd b7       	in	r28, 0x3d	; 61
   1ae0c:	de b7       	in	r29, 0x3e	; 62
   1ae0e:	6c 01       	movw	r12, r24
   1ae10:	7b 01       	movw	r14, r22
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:195
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    //    |                    ARCOUNT                    |
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    // As we only support one request at a time at present, we can simplify
    // some of this header
    iRequestId = millis(); // generate a random ID
   1ae12:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   1ae16:	f6 01       	movw	r30, r12
   1ae18:	77 83       	std	Z+7, r23	; 0x07
   1ae1a:	66 83       	std	Z+6, r22	; 0x06
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:200
    uint16_t twoByteBuffer;

    // FIXME We should also check that there's enough space available to write to, rather
    // FIXME than assume there's enough space (as the code does at present)
    iUdp.write((uint8_t*)&iRequestId, sizeof(iRequestId));
   1ae1c:	86 01       	movw	r16, r12
   1ae1e:	08 5f       	subi	r16, 0xF8	; 248
   1ae20:	1f 4f       	sbci	r17, 0xFF	; 255
   1ae22:	b6 01       	movw	r22, r12
   1ae24:	6a 5f       	subi	r22, 0xFA	; 250
   1ae26:	7f 4f       	sbci	r23, 0xFF	; 255
   1ae28:	42 e0       	ldi	r20, 0x02	; 2
   1ae2a:	50 e0       	ldi	r21, 0x00	; 0
   1ae2c:	c8 01       	movw	r24, r16
   1ae2e:	0e 94 31 de 	call	0x1bc62	; 0x1bc62 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:202

    twoByteBuffer = htons(QUERY_FLAG | OPCODE_STANDARD_QUERY | RECURSION_DESIRED_FLAG);
   1ae32:	81 e0       	ldi	r24, 0x01	; 1
   1ae34:	90 e0       	ldi	r25, 0x00	; 0
   1ae36:	9a 83       	std	Y+2, r25	; 0x02
   1ae38:	89 83       	std	Y+1, r24	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:203
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
   1ae3a:	42 e0       	ldi	r20, 0x02	; 2
   1ae3c:	50 e0       	ldi	r21, 0x00	; 0
   1ae3e:	be 01       	movw	r22, r28
   1ae40:	6f 5f       	subi	r22, 0xFF	; 255
   1ae42:	7f 4f       	sbci	r23, 0xFF	; 255
   1ae44:	c8 01       	movw	r24, r16
   1ae46:	0e 94 31 de 	call	0x1bc62	; 0x1bc62 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:205

    twoByteBuffer = htons(1);  // One question record
   1ae4a:	80 e0       	ldi	r24, 0x00	; 0
   1ae4c:	91 e0       	ldi	r25, 0x01	; 1
   1ae4e:	9a 83       	std	Y+2, r25	; 0x02
   1ae50:	89 83       	std	Y+1, r24	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:206
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
   1ae52:	42 e0       	ldi	r20, 0x02	; 2
   1ae54:	50 e0       	ldi	r21, 0x00	; 0
   1ae56:	be 01       	movw	r22, r28
   1ae58:	6f 5f       	subi	r22, 0xFF	; 255
   1ae5a:	7f 4f       	sbci	r23, 0xFF	; 255
   1ae5c:	c8 01       	movw	r24, r16
   1ae5e:	0e 94 31 de 	call	0x1bc62	; 0x1bc62 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:208

    twoByteBuffer = 0;  // Zero answer records
   1ae62:	1a 82       	std	Y+2, r1	; 0x02
   1ae64:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:209
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
   1ae66:	42 e0       	ldi	r20, 0x02	; 2
   1ae68:	50 e0       	ldi	r21, 0x00	; 0
   1ae6a:	be 01       	movw	r22, r28
   1ae6c:	6f 5f       	subi	r22, 0xFF	; 255
   1ae6e:	7f 4f       	sbci	r23, 0xFF	; 255
   1ae70:	c8 01       	movw	r24, r16
   1ae72:	0e 94 31 de 	call	0x1bc62	; 0x1bc62 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:211

    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
   1ae76:	42 e0       	ldi	r20, 0x02	; 2
   1ae78:	50 e0       	ldi	r21, 0x00	; 0
   1ae7a:	be 01       	movw	r22, r28
   1ae7c:	6f 5f       	subi	r22, 0xFF	; 255
   1ae7e:	7f 4f       	sbci	r23, 0xFF	; 255
   1ae80:	c8 01       	movw	r24, r16
   1ae82:	0e 94 31 de 	call	0x1bc62	; 0x1bc62 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:213
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
   1ae86:	42 e0       	ldi	r20, 0x02	; 2
   1ae88:	50 e0       	ldi	r21, 0x00	; 0
   1ae8a:	be 01       	movw	r22, r28
   1ae8c:	6f 5f       	subi	r22, 0xFF	; 255
   1ae8e:	7f 4f       	sbci	r23, 0xFF	; 255
   1ae90:	c8 01       	movw	r24, r16
   1ae92:	0e 94 31 de 	call	0x1bc62	; 0x1bc62 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:216

    // Build question
    const char* start =aName;
   1ae96:	67 01       	movw	r12, r14
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:220
    const char* end =start;
    uint8_t len;
    // Run through the name being requested
    while (*end)
   1ae98:	f7 01       	movw	r30, r14
   1ae9a:	80 81       	ld	r24, Z
   1ae9c:	88 23       	and	r24, r24
   1ae9e:	01 f1       	breq	.+64     	; 0x1aee0 <DNSClient::BuildRequest(char const*)+0xf0>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:223
    {
        // Find out how long this section of the name is
        end = start;
   1aea0:	76 01       	movw	r14, r12
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:224
        while (*end && (*end != '.') )
   1aea2:	f7 01       	movw	r30, r14
   1aea4:	81 91       	ld	r24, Z+
   1aea6:	5f 01       	movw	r10, r30
   1aea8:	88 23       	and	r24, r24
   1aeaa:	11 f0       	breq	.+4      	; 0x1aeb0 <DNSClient::BuildRequest(char const*)+0xc0>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:224 (discriminator 1)
   1aeac:	8e 32       	cpi	r24, 0x2E	; 46
   1aeae:	b1 f4       	brne	.+44     	; 0x1aedc <DNSClient::BuildRequest(char const*)+0xec>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:229
        {
            end++;
        }

        if (end-start > 0)
   1aeb0:	47 01       	movw	r8, r14
   1aeb2:	8c 18       	sub	r8, r12
   1aeb4:	9d 08       	sbc	r9, r13
   1aeb6:	18 14       	cp	r1, r8
   1aeb8:	19 04       	cpc	r1, r9
   1aeba:	74 f4       	brge	.+28     	; 0x1aed8 <DNSClient::BuildRequest(char const*)+0xe8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:232
        {
            // Write out the size of this section
            len = end-start;
   1aebc:	8b 82       	std	Y+3, r8	; 0x03
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:233
            iUdp.write(&len, sizeof(len));
   1aebe:	41 e0       	ldi	r20, 0x01	; 1
   1aec0:	50 e0       	ldi	r21, 0x00	; 0
   1aec2:	be 01       	movw	r22, r28
   1aec4:	6d 5f       	subi	r22, 0xFD	; 253
   1aec6:	7f 4f       	sbci	r23, 0xFF	; 255
   1aec8:	c8 01       	movw	r24, r16
   1aeca:	0e 94 31 de 	call	0x1bc62	; 0x1bc62 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:235
            // And then write out the section
            iUdp.write((uint8_t*)start, end-start);
   1aece:	a4 01       	movw	r20, r8
   1aed0:	b6 01       	movw	r22, r12
   1aed2:	c8 01       	movw	r24, r16
   1aed4:	0e 94 31 de 	call	0x1bc62	; 0x1bc62 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:220
    // Build question
    const char* start =aName;
    const char* end =start;
    uint8_t len;
    // Run through the name being requested
    while (*end)
   1aed8:	65 01       	movw	r12, r10
   1aeda:	de cf       	rjmp	.-68     	; 0x1ae98 <DNSClient::BuildRequest(char const*)+0xa8>
   1aedc:	75 01       	movw	r14, r10
   1aede:	e1 cf       	rjmp	.-62     	; 0x1aea2 <DNSClient::BuildRequest(char const*)+0xb2>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:242
        start = end+1;
    }

    // We've got to the end of the question name, so
    // terminate it with a zero-length section
    len = 0;
   1aee0:	1b 82       	std	Y+3, r1	; 0x03
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:243
    iUdp.write(&len, sizeof(len));
   1aee2:	41 e0       	ldi	r20, 0x01	; 1
   1aee4:	50 e0       	ldi	r21, 0x00	; 0
   1aee6:	be 01       	movw	r22, r28
   1aee8:	6d 5f       	subi	r22, 0xFD	; 253
   1aeea:	7f 4f       	sbci	r23, 0xFF	; 255
   1aeec:	c8 01       	movw	r24, r16
   1aeee:	0e 94 31 de 	call	0x1bc62	; 0x1bc62 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:245
    // Finally the type and class of question
    twoByteBuffer = htons(TYPE_A);
   1aef2:	e1 2c       	mov	r14, r1
   1aef4:	ff 24       	eor	r15, r15
   1aef6:	f3 94       	inc	r15
   1aef8:	fa 82       	std	Y+2, r15	; 0x02
   1aefa:	e9 82       	std	Y+1, r14	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:246
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
   1aefc:	42 e0       	ldi	r20, 0x02	; 2
   1aefe:	50 e0       	ldi	r21, 0x00	; 0
   1af00:	be 01       	movw	r22, r28
   1af02:	6f 5f       	subi	r22, 0xFF	; 255
   1af04:	7f 4f       	sbci	r23, 0xFF	; 255
   1af06:	c8 01       	movw	r24, r16
   1af08:	0e 94 31 de 	call	0x1bc62	; 0x1bc62 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:248

    twoByteBuffer = htons(CLASS_IN);  // Internet class of question
   1af0c:	fa 82       	std	Y+2, r15	; 0x02
   1af0e:	e9 82       	std	Y+1, r14	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:249
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
   1af10:	42 e0       	ldi	r20, 0x02	; 2
   1af12:	50 e0       	ldi	r21, 0x00	; 0
   1af14:	be 01       	movw	r22, r28
   1af16:	6f 5f       	subi	r22, 0xFF	; 255
   1af18:	7f 4f       	sbci	r23, 0xFF	; 255
   1af1a:	c8 01       	movw	r24, r16
   1af1c:	0e 94 31 de 	call	0x1bc62	; 0x1bc62 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:252
    // Success!  Everything buffered okay
    return 1;
}
   1af20:	81 e0       	ldi	r24, 0x01	; 1
   1af22:	90 e0       	ldi	r25, 0x00	; 0
   1af24:	0f 90       	pop	r0
   1af26:	0f 90       	pop	r0
   1af28:	0f 90       	pop	r0
   1af2a:	df 91       	pop	r29
   1af2c:	cf 91       	pop	r28
   1af2e:	1f 91       	pop	r17
   1af30:	0f 91       	pop	r16
   1af32:	ff 90       	pop	r15
   1af34:	ef 90       	pop	r14
   1af36:	df 90       	pop	r13
   1af38:	cf 90       	pop	r12
   1af3a:	bf 90       	pop	r11
   1af3c:	af 90       	pop	r10
   1af3e:	9f 90       	pop	r9
   1af40:	8f 90       	pop	r8
   1af42:	08 95       	ret

0001af44 <DNSClient::ProcessResponse(unsigned int, IPAddress&)>:
_ZN9DNSClient15ProcessResponseEjR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:256


uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
   1af44:	2f 92       	push	r2
   1af46:	3f 92       	push	r3
   1af48:	4f 92       	push	r4
   1af4a:	5f 92       	push	r5
   1af4c:	6f 92       	push	r6
   1af4e:	7f 92       	push	r7
   1af50:	8f 92       	push	r8
   1af52:	9f 92       	push	r9
   1af54:	af 92       	push	r10
   1af56:	bf 92       	push	r11
   1af58:	cf 92       	push	r12
   1af5a:	df 92       	push	r13
   1af5c:	ef 92       	push	r14
   1af5e:	ff 92       	push	r15
   1af60:	0f 93       	push	r16
   1af62:	1f 93       	push	r17
   1af64:	cf 93       	push	r28
   1af66:	df 93       	push	r29
   1af68:	cd b7       	in	r28, 0x3d	; 61
   1af6a:	de b7       	in	r29, 0x3e	; 62
   1af6c:	63 97       	sbiw	r28, 0x13	; 19
   1af6e:	0f b6       	in	r0, 0x3f	; 63
   1af70:	f8 94       	cli
   1af72:	de bf       	out	0x3e, r29	; 62
   1af74:	0f be       	out	0x3f, r0	; 63
   1af76:	cd bf       	out	0x3d, r28	; 61
   1af78:	7c 01       	movw	r14, r24
   1af7a:	2b 01       	movw	r4, r22
   1af7c:	1a 01       	movw	r2, r20
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:257
    uint32_t startTime = millis();
   1af7e:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   1af82:	4b 01       	movw	r8, r22
   1af84:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:260

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
   1af86:	87 01       	movw	r16, r14
   1af88:	08 5f       	subi	r16, 0xF8	; 248
   1af8a:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:262
    {
        if((millis() - startTime) > aTimeout)
   1af8c:	71 2c       	mov	r7, r1
   1af8e:	61 2c       	mov	r6, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:260
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
   1af90:	c8 01       	movw	r24, r16
   1af92:	0e 94 a6 de 	call	0x1bd4c	; 0x1bd4c <EthernetUDP::parsePacket()>
   1af96:	18 16       	cp	r1, r24
   1af98:	19 06       	cpc	r1, r25
   1af9a:	9c f0       	brlt	.+38     	; 0x1afc2 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x7e>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:262
    {
        if((millis() - startTime) > aTimeout)
   1af9c:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   1afa0:	68 19       	sub	r22, r8
   1afa2:	79 09       	sbc	r23, r9
   1afa4:	8a 09       	sbc	r24, r10
   1afa6:	9b 09       	sbc	r25, r11
   1afa8:	46 16       	cp	r4, r22
   1afaa:	57 06       	cpc	r5, r23
   1afac:	68 06       	cpc	r6, r24
   1afae:	79 06       	cpc	r7, r25
   1afb0:	08 f4       	brcc	.+2      	; 0x1afb4 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x70>
   1afb2:	31 c1       	rjmp	.+610    	; 0x1b216 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x2d2>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:264
            return TIMED_OUT;
        delay(50);
   1afb4:	62 e3       	ldi	r22, 0x32	; 50
   1afb6:	70 e0       	ldi	r23, 0x00	; 0
   1afb8:	80 e0       	ldi	r24, 0x00	; 0
   1afba:	90 e0       	ldi	r25, 0x00	; 0
   1afbc:	0f 94 33 0f 	call	0x21e66	; 0x21e66 <delay>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:260
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
   1afc0:	e7 cf       	rjmp	.-50     	; 0x1af90 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x4c>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:271

    // We've had a reply!
    // Read the UDP header
    uint8_t header[DNS_HEADER_SIZE]; // Enough space to reuse for the DNS header
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
   1afc2:	f7 01       	movw	r30, r14
   1afc4:	42 81       	ldd	r20, Z+2	; 0x02
   1afc6:	53 81       	ldd	r21, Z+3	; 0x03
   1afc8:	64 81       	ldd	r22, Z+4	; 0x04
   1afca:	75 81       	ldd	r23, Z+5	; 0x05
   1afcc:	81 8d       	ldd	r24, Z+25	; 0x19
   1afce:	92 8d       	ldd	r25, Z+26	; 0x1a
   1afd0:	a3 8d       	ldd	r26, Z+27	; 0x1b
   1afd2:	b4 8d       	ldd	r27, Z+28	; 0x1c
   1afd4:	48 17       	cp	r20, r24
   1afd6:	59 07       	cpc	r21, r25
   1afd8:	6a 07       	cpc	r22, r26
   1afda:	7b 07       	cpc	r23, r27
   1afdc:	09 f0       	breq	.+2      	; 0x1afe0 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x9c>
   1afde:	1f c1       	rjmp	.+574    	; 0x1b21e <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x2da>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:271 (discriminator 2)
   1afe0:	85 8d       	ldd	r24, Z+29	; 0x1d
   1afe2:	96 8d       	ldd	r25, Z+30	; 0x1e
   1afe4:	c5 97       	sbiw	r24, 0x35	; 53
   1afe6:	09 f0       	breq	.+2      	; 0x1afea <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xa6>
   1afe8:	1a c1       	rjmp	.+564    	; 0x1b21e <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x2da>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:279
        // It's not from who we expected
        return INVALID_SERVER;
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
   1afea:	c8 01       	movw	r24, r16
   1afec:	0e 94 e4 dd 	call	0x1bbc8	; 0x1bbc8 <EthernetUDP::available()>
   1aff0:	0c 97       	sbiw	r24, 0x0c	; 12
   1aff2:	0c f4       	brge	.+2      	; 0x1aff6 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xb2>
   1aff4:	19 c1       	rjmp	.+562    	; 0x1b228 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x2e4>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:283
    {
        return TRUNCATED;
    }
    iUdp.read(header, DNS_HEADER_SIZE);
   1aff6:	4c e0       	ldi	r20, 0x0C	; 12
   1aff8:	50 e0       	ldi	r21, 0x00	; 0
   1affa:	be 01       	movw	r22, r28
   1affc:	6f 5f       	subi	r22, 0xFF	; 255
   1affe:	7f 4f       	sbci	r23, 0xFF	; 255
   1b000:	c8 01       	movw	r24, r16
   1b002:	0e 94 6f de 	call	0x1bcde	; 0x1bcde <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:285

    uint16_t header_flags = htons(*((uint16_t*)&header[2]));
   1b006:	8b 81       	ldd	r24, Y+3	; 0x03
   1b008:	9c 81       	ldd	r25, Y+4	; 0x04
   1b00a:	98 27       	eor	r25, r24
   1b00c:	89 27       	eor	r24, r25
   1b00e:	98 27       	eor	r25, r24
   1b010:	9a 8b       	std	Y+18, r25	; 0x12
   1b012:	89 8b       	std	Y+17, r24	; 0x11
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:287
    // Check that it's a response to this request
    if ( ( iRequestId != (*((uint16_t*)&header[0])) ) ||
   1b014:	f7 01       	movw	r30, r14
   1b016:	46 81       	ldd	r20, Z+6	; 0x06
   1b018:	57 81       	ldd	r21, Z+7	; 0x07
   1b01a:	29 81       	ldd	r18, Y+1	; 0x01
   1b01c:	3a 81       	ldd	r19, Y+2	; 0x02
   1b01e:	42 17       	cp	r20, r18
   1b020:	53 07       	cpc	r21, r19
   1b022:	11 f4       	brne	.+4      	; 0x1b028 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xe4>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:287 (discriminator 1)
   1b024:	97 fd       	sbrc	r25, 7
   1b026:	21 c0       	rjmp	.+66     	; 0x1b06a <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x126>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:291
        ((header_flags & QUERY_RESPONSE_MASK) != (uint16_t)RESPONSE_FLAG) )
    {
        // Mark the entire packet as read
        iUdp.flush();
   1b028:	c8 01       	movw	r24, r16
   1b02a:	0e 94 fe dd 	call	0x1bbfc	; 0x1bbfc <EthernetUDP::flush()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:292
        return INVALID_RESPONSE;
   1b02e:	7c ef       	ldi	r23, 0xFC	; 252
   1b030:	e7 2e       	mov	r14, r23
   1b032:	ff 24       	eor	r15, r15
   1b034:	fa 94       	dec	r15
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:422
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
   1b036:	c7 01       	movw	r24, r14
   1b038:	63 96       	adiw	r28, 0x13	; 19
   1b03a:	0f b6       	in	r0, 0x3f	; 63
   1b03c:	f8 94       	cli
   1b03e:	de bf       	out	0x3e, r29	; 62
   1b040:	0f be       	out	0x3f, r0	; 63
   1b042:	cd bf       	out	0x3d, r28	; 61
   1b044:	df 91       	pop	r29
   1b046:	cf 91       	pop	r28
   1b048:	1f 91       	pop	r17
   1b04a:	0f 91       	pop	r16
   1b04c:	ff 90       	pop	r15
   1b04e:	ef 90       	pop	r14
   1b050:	df 90       	pop	r13
   1b052:	cf 90       	pop	r12
   1b054:	bf 90       	pop	r11
   1b056:	af 90       	pop	r10
   1b058:	9f 90       	pop	r9
   1b05a:	8f 90       	pop	r8
   1b05c:	7f 90       	pop	r7
   1b05e:	6f 90       	pop	r6
   1b060:	5f 90       	pop	r5
   1b062:	4f 90       	pop	r4
   1b064:	3f 90       	pop	r3
   1b066:	2f 90       	pop	r2
   1b068:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:296
        iUdp.flush();
        return INVALID_RESPONSE;
    }
    // Check for any errors in the response (or in our request)
    // although we don't do anything to get round these
    if ( (header_flags & TRUNCATION_FLAG) || (header_flags & RESP_MASK) )
   1b06a:	8f 70       	andi	r24, 0x0F	; 15
   1b06c:	92 70       	andi	r25, 0x02	; 2
   1b06e:	89 2b       	or	r24, r25
   1b070:	41 f0       	breq	.+16     	; 0x1b082 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x13e>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:299
    {
        // Mark the entire packet as read
        iUdp.flush();
   1b072:	c8 01       	movw	r24, r16
   1b074:	0e 94 fe dd 	call	0x1bbfc	; 0x1bbfc <EthernetUDP::flush()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:300
        return -5; //INVALID_RESPONSE;
   1b078:	6b ef       	ldi	r22, 0xFB	; 251
   1b07a:	e6 2e       	mov	r14, r22
   1b07c:	ff 24       	eor	r15, r15
   1b07e:	fa 94       	dec	r15
   1b080:	da cf       	rjmp	.-76     	; 0x1b036 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xf2>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:304
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
   1b082:	cf 80       	ldd	r12, Y+7	; 0x07
   1b084:	d8 84       	ldd	r13, Y+8	; 0x08
   1b086:	dc 24       	eor	r13, r12
   1b088:	cd 24       	eor	r12, r13
   1b08a:	dc 24       	eor	r13, r12
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:313
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
   1b08c:	f1 2c       	mov	r15, r1
   1b08e:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:305
        return -5; //INVALID_RESPONSE;
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
    if (answerCount == 0 )
   1b090:	c1 14       	cp	r12, r1
   1b092:	d1 04       	cpc	r13, r1
   1b094:	d1 f4       	brne	.+52     	; 0x1b0ca <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x186>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:308
    {
        // Mark the entire packet as read
        iUdp.flush();
   1b096:	c8 01       	movw	r24, r16
   1b098:	0e 94 fe dd 	call	0x1bbfc	; 0x1bbfc <EthernetUDP::flush()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:309
        return -6; //INVALID_RESPONSE;
   1b09c:	5a ef       	ldi	r21, 0xFA	; 250
   1b09e:	e5 2e       	mov	r14, r21
   1b0a0:	ff 24       	eor	r15, r15
   1b0a2:	fa 94       	dec	r15
   1b0a4:	c8 cf       	rjmp	.-112    	; 0x1b036 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xf2>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:329
                while(len--)
                {
                    iUdp.read(); // we don't care about the returned byte
                }
            }
        } while (len != 0);
   1b0a6:	8d 85       	ldd	r24, Y+13	; 0x0d
   1b0a8:	81 11       	cpse	r24, r1
   1b0aa:	17 c0       	rjmp	.+46     	; 0x1b0da <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x196>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:334

        // Now jump over the type and class
        for (int i =0; i < 4; i++)
        {
            iUdp.read(); // we don't care about the returned byte
   1b0ac:	c8 01       	movw	r24, r16
   1b0ae:	0e 94 45 de 	call	0x1bc8a	; 0x1bc8a <EthernetUDP::read()>
   1b0b2:	c8 01       	movw	r24, r16
   1b0b4:	0e 94 45 de 	call	0x1bc8a	; 0x1bc8a <EthernetUDP::read()>
   1b0b8:	c8 01       	movw	r24, r16
   1b0ba:	0e 94 45 de 	call	0x1bc8a	; 0x1bc8a <EthernetUDP::read()>
   1b0be:	c8 01       	movw	r24, r16
   1b0c0:	0e 94 45 de 	call	0x1bc8a	; 0x1bc8a <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:313
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
   1b0c4:	ff ef       	ldi	r31, 0xFF	; 255
   1b0c6:	ef 1a       	sub	r14, r31
   1b0c8:	ff 0a       	sbc	r15, r31
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:313 (discriminator 1)
   1b0ca:	8d 81       	ldd	r24, Y+5	; 0x05
   1b0cc:	9e 81       	ldd	r25, Y+6	; 0x06
   1b0ce:	98 27       	eor	r25, r24
   1b0d0:	89 27       	eor	r24, r25
   1b0d2:	98 27       	eor	r25, r24
   1b0d4:	e8 16       	cp	r14, r24
   1b0d6:	f9 06       	cpc	r15, r25
   1b0d8:	a8 f4       	brcc	.+42     	; 0x1b104 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x1c0>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:319
    {
        // Skip over the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
   1b0da:	41 e0       	ldi	r20, 0x01	; 1
   1b0dc:	50 e0       	ldi	r21, 0x00	; 0
   1b0de:	be 01       	movw	r22, r28
   1b0e0:	63 5f       	subi	r22, 0xF3	; 243
   1b0e2:	7f 4f       	sbci	r23, 0xFF	; 255
   1b0e4:	c8 01       	movw	r24, r16
   1b0e6:	0e 94 6f de 	call	0x1bcde	; 0x1bcde <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:320
            if (len > 0)
   1b0ea:	8d 85       	ldd	r24, Y+13	; 0x0d
   1b0ec:	88 23       	and	r24, r24
   1b0ee:	d9 f2       	breq	.-74     	; 0x1b0a6 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x162>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:324
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
   1b0f0:	8d 85       	ldd	r24, Y+13	; 0x0d
   1b0f2:	9f ef       	ldi	r25, 0xFF	; 255
   1b0f4:	98 0f       	add	r25, r24
   1b0f6:	9d 87       	std	Y+13, r25	; 0x0d
   1b0f8:	88 23       	and	r24, r24
   1b0fa:	a9 f2       	breq	.-86     	; 0x1b0a6 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x162>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:326
                {
                    iUdp.read(); // we don't care about the returned byte
   1b0fc:	c8 01       	movw	r24, r16
   1b0fe:	0e 94 45 de 	call	0x1bc8a	; 0x1bc8a <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:324
            iUdp.read(&len, sizeof(len));
            if (len > 0)
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
   1b102:	f6 cf       	rjmp	.-20     	; 0x1b0f0 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x1ac>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:343
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
   1b104:	b1 2c       	mov	r11, r1
   1b106:	a1 2c       	mov	r10, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:349
    {
        // Skip the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
   1b108:	41 e0       	ldi	r20, 0x01	; 1
   1b10a:	50 e0       	ldi	r21, 0x00	; 0
   1b10c:	be 01       	movw	r22, r28
   1b10e:	6d 5e       	subi	r22, 0xED	; 237
   1b110:	7f 4f       	sbci	r23, 0xFF	; 255
   1b112:	c8 01       	movw	r24, r16
   1b114:	0e 94 6f de 	call	0x1bcde	; 0x1bcde <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:350
            if ((len & LABEL_COMPRESSION_MASK) == 0)
   1b118:	8b 89       	ldd	r24, Y+19	; 0x13
   1b11a:	98 2f       	mov	r25, r24
   1b11c:	90 7c       	andi	r25, 0xC0	; 192
   1b11e:	61 f4       	brne	.+24     	; 0x1b138 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x1f4>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:353
            {
                // It's just a normal label
                if (len > 0)
   1b120:	88 23       	and	r24, r24
   1b122:	89 f0       	breq	.+34     	; 0x1b146 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x202>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:358
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
   1b124:	8b 89       	ldd	r24, Y+19	; 0x13
   1b126:	9f ef       	ldi	r25, 0xFF	; 255
   1b128:	98 0f       	add	r25, r24
   1b12a:	9b 8b       	std	Y+19, r25	; 0x13
   1b12c:	88 23       	and	r24, r24
   1b12e:	41 f0       	breq	.+16     	; 0x1b140 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x1fc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:360
                    {
                        iUdp.read(); // we don't care about the returned byte
   1b130:	c8 01       	movw	r24, r16
   1b132:	0e 94 45 de 	call	0x1bc8a	; 0x1bc8a <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:358
                if (len > 0)
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
   1b136:	f6 cf       	rjmp	.-20     	; 0x1b124 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x1e0>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:373
                // says that a name is either a sequence of labels ended with a
                // 0 length octet or a pointer or a sequence of labels ending in
                // a pointer.  Either way, when we get here we're at the end of
                // the name
                // Skip over the pointer
                iUdp.read(); // we don't care about the returned byte
   1b138:	c8 01       	movw	r24, r16
   1b13a:	0e 94 45 de 	call	0x1bc8a	; 0x1bc8a <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:375
                // And set len so that we drop out of the name loop
                len = 0;
   1b13e:	1b 8a       	std	Y+19, r1	; 0x13
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:377
            }
        } while (len != 0);
   1b140:	8b 89       	ldd	r24, Y+19	; 0x13
   1b142:	81 11       	cpse	r24, r1
   1b144:	e1 cf       	rjmp	.-62     	; 0x1b108 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x1c4>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:382

        // Check the type and class
        uint16_t answerType;
        uint16_t answerClass;
        iUdp.read((uint8_t*)&answerType, sizeof(answerType));
   1b146:	42 e0       	ldi	r20, 0x02	; 2
   1b148:	50 e0       	ldi	r21, 0x00	; 0
   1b14a:	be 01       	movw	r22, r28
   1b14c:	61 5f       	subi	r22, 0xF1	; 241
   1b14e:	7f 4f       	sbci	r23, 0xFF	; 255
   1b150:	c8 01       	movw	r24, r16
   1b152:	0e 94 6f de 	call	0x1bcde	; 0x1bcde <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:383
        iUdp.read((uint8_t*)&answerClass, sizeof(answerClass));
   1b156:	42 e0       	ldi	r20, 0x02	; 2
   1b158:	50 e0       	ldi	r21, 0x00	; 0
   1b15a:	be 01       	movw	r22, r28
   1b15c:	63 5f       	subi	r22, 0xF3	; 243
   1b15e:	7f 4f       	sbci	r23, 0xFF	; 255
   1b160:	c8 01       	movw	r24, r16
   1b162:	0e 94 6f de 	call	0x1bcde	; 0x1bcde <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:388

        // Ignore the Time-To-Live as we don't do any caching
        for (int i =0; i < TTL_SIZE; i++)
        {
            iUdp.read(); // we don't care about the returned byte
   1b166:	c8 01       	movw	r24, r16
   1b168:	0e 94 45 de 	call	0x1bc8a	; 0x1bc8a <EthernetUDP::read()>
   1b16c:	c8 01       	movw	r24, r16
   1b16e:	0e 94 45 de 	call	0x1bc8a	; 0x1bc8a <EthernetUDP::read()>
   1b172:	c8 01       	movw	r24, r16
   1b174:	0e 94 45 de 	call	0x1bc8a	; 0x1bc8a <EthernetUDP::read()>
   1b178:	c8 01       	movw	r24, r16
   1b17a:	0e 94 45 de 	call	0x1bc8a	; 0x1bc8a <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:393
        }

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));
   1b17e:	42 e0       	ldi	r20, 0x02	; 2
   1b180:	50 e0       	ldi	r21, 0x00	; 0
   1b182:	be 01       	movw	r22, r28
   1b184:	6f 5e       	subi	r22, 0xEF	; 239
   1b186:	7f 4f       	sbci	r23, 0xFF	; 255
   1b188:	c8 01       	movw	r24, r16
   1b18a:	0e 94 6f de 	call	0x1bcde	; 0x1bcde <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:395

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
   1b18e:	8f 85       	ldd	r24, Y+15	; 0x0f
   1b190:	98 89       	ldd	r25, Y+16	; 0x10
   1b192:	81 15       	cp	r24, r1
   1b194:	91 40       	sbci	r25, 0x01	; 1
   1b196:	f9 f4       	brne	.+62     	; 0x1b1d6 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x292>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:395 (discriminator 1)
   1b198:	ed 84       	ldd	r14, Y+13	; 0x0d
   1b19a:	fe 84       	ldd	r15, Y+14	; 0x0e
   1b19c:	fe 24       	eor	r15, r14
   1b19e:	ef 24       	eor	r14, r15
   1b1a0:	fe 24       	eor	r15, r14
   1b1a2:	81 e0       	ldi	r24, 0x01	; 1
   1b1a4:	e8 16       	cp	r14, r24
   1b1a6:	f1 04       	cpc	r15, r1
   1b1a8:	b1 f4       	brne	.+44     	; 0x1b1d6 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x292>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:397
        {
            if (htons(header_flags) != 4)
   1b1aa:	89 89       	ldd	r24, Y+17	; 0x11
   1b1ac:	9a 89       	ldd	r25, Y+18	; 0x12
   1b1ae:	81 15       	cp	r24, r1
   1b1b0:	94 40       	sbci	r25, 0x04	; 4
   1b1b2:	41 f0       	breq	.+16     	; 0x1b1c4 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x280>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:401
            {
                // It's a weird size
                // Mark the entire packet as read
                iUdp.flush();
   1b1b4:	c8 01       	movw	r24, r16
   1b1b6:	0e 94 fe dd 	call	0x1bbfc	; 0x1bbfc <EthernetUDP::flush()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:402
                return -9;//INVALID_RESPONSE;
   1b1ba:	47 ef       	ldi	r20, 0xF7	; 247
   1b1bc:	e4 2e       	mov	r14, r20
   1b1be:	ff 24       	eor	r15, r15
   1b1c0:	fa 94       	dec	r15
   1b1c2:	39 cf       	rjmp	.-398    	; 0x1b036 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xf2>
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
   1b1c4:	b1 01       	movw	r22, r2
   1b1c6:	6e 5f       	subi	r22, 0xFE	; 254
   1b1c8:	7f 4f       	sbci	r23, 0xFF	; 255
_ZN9DNSClient15ProcessResponseEjR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:404
            }
            iUdp.read(aAddress.raw_address(), 4);
   1b1ca:	44 e0       	ldi	r20, 0x04	; 4
   1b1cc:	50 e0       	ldi	r21, 0x00	; 0
   1b1ce:	c8 01       	movw	r24, r16
   1b1d0:	0e 94 6f de 	call	0x1bcde	; 0x1bcde <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:405
            return SUCCESS;
   1b1d4:	30 cf       	rjmp	.-416    	; 0x1b036 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xf2>
   1b1d6:	f1 2c       	mov	r15, r1
   1b1d8:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:410 (discriminator 3)
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
   1b1da:	89 89       	ldd	r24, Y+17	; 0x11
   1b1dc:	9a 89       	ldd	r25, Y+18	; 0x12
   1b1de:	98 27       	eor	r25, r24
   1b1e0:	89 27       	eor	r24, r25
   1b1e2:	98 27       	eor	r25, r24
   1b1e4:	e8 16       	cp	r14, r24
   1b1e6:	f9 06       	cpc	r15, r25
   1b1e8:	38 f4       	brcc	.+14     	; 0x1b1f8 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x2b4>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:412 (discriminator 2)
            {
                iUdp.read(); // we don't care about the returned byte
   1b1ea:	c8 01       	movw	r24, r16
   1b1ec:	0e 94 45 de 	call	0x1bc8a	; 0x1bc8a <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:410 (discriminator 2)
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
   1b1f0:	ff ef       	ldi	r31, 0xFF	; 255
   1b1f2:	ef 1a       	sub	r14, r31
   1b1f4:	ff 0a       	sbc	r15, r31
   1b1f6:	f1 cf       	rjmp	.-30     	; 0x1b1da <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x296>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:343
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
   1b1f8:	2f ef       	ldi	r18, 0xFF	; 255
   1b1fa:	a2 1a       	sub	r10, r18
   1b1fc:	b2 0a       	sbc	r11, r18
   1b1fe:	ca 14       	cp	r12, r10
   1b200:	db 04       	cpc	r13, r11
   1b202:	09 f0       	breq	.+2      	; 0x1b206 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x2c2>
   1b204:	81 cf       	rjmp	.-254    	; 0x1b108 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x1c4>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:418
            }
        }
    }

    // Mark the entire packet as read
    iUdp.flush();
   1b206:	c8 01       	movw	r24, r16
   1b208:	0e 94 fe dd 	call	0x1bbfc	; 0x1bbfc <EthernetUDP::flush()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:421

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
   1b20c:	36 ef       	ldi	r19, 0xF6	; 246
   1b20e:	e3 2e       	mov	r14, r19
   1b210:	ff 24       	eor	r15, r15
   1b212:	fa 94       	dec	r15
   1b214:	10 cf       	rjmp	.-480    	; 0x1b036 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xf2>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:263

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    {
        if((millis() - startTime) > aTimeout)
            return TIMED_OUT;
   1b216:	ee 24       	eor	r14, r14
   1b218:	ea 94       	dec	r14
   1b21a:	fe 2c       	mov	r15, r14
   1b21c:	0c cf       	rjmp	.-488    	; 0x1b036 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xf2>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:275
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
        (iUdp.remotePort() != DNS_PORT) )
    {
        // It's not from who we expected
        return INVALID_SERVER;
   1b21e:	9e ef       	ldi	r25, 0xFE	; 254
   1b220:	e9 2e       	mov	r14, r25
   1b222:	ff 24       	eor	r15, r15
   1b224:	fa 94       	dec	r15
   1b226:	07 cf       	rjmp	.-498    	; 0x1b036 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xf2>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:281
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    {
        return TRUNCATED;
   1b228:	8d ef       	ldi	r24, 0xFD	; 253
   1b22a:	e8 2e       	mov	r14, r24
   1b22c:	ff 24       	eor	r15, r15
   1b22e:	fa 94       	dec	r15
   1b230:	02 cf       	rjmp	.-508    	; 0x1b036 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xf2>

0001b232 <DNSClient::getHostByName(char const*, IPAddress&)>:
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:119
        return 0;
    }
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
   1b232:	8f 92       	push	r8
   1b234:	9f 92       	push	r9
   1b236:	af 92       	push	r10
   1b238:	bf 92       	push	r11
   1b23a:	cf 92       	push	r12
   1b23c:	df 92       	push	r13
   1b23e:	ef 92       	push	r14
   1b240:	ff 92       	push	r15
   1b242:	0f 93       	push	r16
   1b244:	1f 93       	push	r17
   1b246:	cf 93       	push	r28
   1b248:	df 93       	push	r29
   1b24a:	00 d0       	rcall	.+0      	; 0x1b24c <DNSClient::getHostByName(char const*, IPAddress&)+0x1a>
   1b24c:	00 d0       	rcall	.+0      	; 0x1b24e <DNSClient::getHostByName(char const*, IPAddress&)+0x1c>
   1b24e:	cd b7       	in	r28, 0x3d	; 61
   1b250:	de b7       	in	r29, 0x3e	; 62
   1b252:	7c 01       	movw	r14, r24
   1b254:	4b 01       	movw	r8, r22
   1b256:	5a 01       	movw	r10, r20
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:123
    int ret =0;

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
   1b258:	0e 94 b0 d6 	call	0x1ad60	; 0x1ad60 <DNSClient::inet_aton(char const*, IPAddress&)>
   1b25c:	8c 01       	movw	r16, r24
   1b25e:	89 2b       	or	r24, r25
   1b260:	09 f0       	breq	.+2      	; 0x1b264 <DNSClient::getHostByName(char const*, IPAddress&)+0x32>
   1b262:	6d c0       	rjmp	.+218    	; 0x1b33e <DNSClient::getHostByName(char const*, IPAddress&)+0x10c>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:130
        // It is, our work here is done
        return 1;
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
   1b264:	f7 01       	movw	r30, r14
   1b266:	42 81       	ldd	r20, Z+2	; 0x02
   1b268:	53 81       	ldd	r21, Z+3	; 0x03
   1b26a:	64 81       	ldd	r22, Z+4	; 0x04
   1b26c:	75 81       	ldd	r23, Z+5	; 0x05
   1b26e:	80 91 2f 12 	lds	r24, 0x122F	; 0x80122f <INADDR_NONE+0x2>
   1b272:	90 91 30 12 	lds	r25, 0x1230	; 0x801230 <INADDR_NONE+0x3>
   1b276:	a0 91 31 12 	lds	r26, 0x1231	; 0x801231 <INADDR_NONE+0x4>
   1b27a:	b0 91 32 12 	lds	r27, 0x1232	; 0x801232 <INADDR_NONE+0x5>
   1b27e:	48 17       	cp	r20, r24
   1b280:	59 07       	cpc	r21, r25
   1b282:	6a 07       	cpc	r22, r26
   1b284:	7b 07       	cpc	r23, r27
   1b286:	09 f4       	brne	.+2      	; 0x1b28a <DNSClient::getHostByName(char const*, IPAddress&)+0x58>
   1b288:	5d c0       	rjmp	.+186    	; 0x1b344 <DNSClient::getHostByName(char const*, IPAddress&)+0x112>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:136
    {
        return INVALID_SERVER;
    }
	
    // Find a socket to use
    if (iUdp.begin(1024+(millis() & 0xF)) == 1)
   1b28a:	67 01       	movw	r12, r14
   1b28c:	f8 e0       	ldi	r31, 0x08	; 8
   1b28e:	cf 0e       	add	r12, r31
   1b290:	d1 1c       	adc	r13, r1
   1b292:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   1b296:	6f 70       	andi	r22, 0x0F	; 15
   1b298:	77 27       	eor	r23, r23
   1b29a:	7c 5f       	subi	r23, 0xFC	; 252
   1b29c:	c6 01       	movw	r24, r12
   1b29e:	0e 94 f7 de 	call	0x1bdee	; 0x1bdee <EthernetUDP::begin(unsigned int)>
   1b2a2:	81 30       	cpi	r24, 0x01	; 1
   1b2a4:	29 f5       	brne	.+74     	; 0x1b2f0 <DNSClient::getHostByName(char const*, IPAddress&)+0xbe>
_ZN9IPAddressC4ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
   1b2a6:	8b ed       	ldi	r24, 0xDB	; 219
   1b2a8:	99 e0       	ldi	r25, 0x09	; 9
   1b2aa:	9a 83       	std	Y+2, r25	; 0x02
   1b2ac:	89 83       	std	Y+1, r24	; 0x01
   1b2ae:	f7 01       	movw	r30, r14
   1b2b0:	82 81       	ldd	r24, Z+2	; 0x02
   1b2b2:	93 81       	ldd	r25, Z+3	; 0x03
   1b2b4:	a4 81       	ldd	r26, Z+4	; 0x04
   1b2b6:	b5 81       	ldd	r27, Z+5	; 0x05
   1b2b8:	8b 83       	std	Y+3, r24	; 0x03
   1b2ba:	9c 83       	std	Y+4, r25	; 0x04
   1b2bc:	ad 83       	std	Y+5, r26	; 0x05
   1b2be:	be 83       	std	Y+6, r27	; 0x06
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:143
        // Try up to three times
        int retries = 0;
//        while ((retries < 3) && (ret <= 0))
        {
            // Send DNS request
            ret = iUdp.beginPacket(iDNSServer, DNS_PORT);
   1b2c0:	45 e3       	ldi	r20, 0x35	; 53
   1b2c2:	50 e0       	ldi	r21, 0x00	; 0
   1b2c4:	be 01       	movw	r22, r28
   1b2c6:	6f 5f       	subi	r22, 0xFF	; 255
   1b2c8:	7f 4f       	sbci	r23, 0xFF	; 255
   1b2ca:	c6 01       	movw	r24, r12
   1b2cc:	0e 94 25 de 	call	0x1bc4a	; 0x1bc4a <EthernetUDP::beginPacket(IPAddress, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:144
            if (ret != 0)
   1b2d0:	89 2b       	or	r24, r25
   1b2d2:	59 f0       	breq	.+22     	; 0x1b2ea <DNSClient::getHostByName(char const*, IPAddress&)+0xb8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:147
            {
                // Now output the request data
                ret = BuildRequest(aHostname);
   1b2d4:	b4 01       	movw	r22, r8
   1b2d6:	c7 01       	movw	r24, r14
   1b2d8:	0e 94 f8 d6 	call	0x1adf0	; 0x1adf0 <DNSClient::BuildRequest(char const*)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:148
                if (ret != 0)
   1b2dc:	89 2b       	or	r24, r25
   1b2de:	29 f0       	breq	.+10     	; 0x1b2ea <DNSClient::getHostByName(char const*, IPAddress&)+0xb8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:151
                {
                    // And finally send the request
                    ret = iUdp.endPacket();
   1b2e0:	c6 01       	movw	r24, r12
   1b2e2:	0e 94 2d de 	call	0x1bc5a	; 0x1bc5a <EthernetUDP::endPacket()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:152
                    if (ret != 0)
   1b2e6:	89 2b       	or	r24, r25
   1b2e8:	31 f5       	brne	.+76     	; 0x1b336 <DNSClient::getHostByName(char const*, IPAddress&)+0x104>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:169
            }
            retries++;
        }

        // We're done with the socket now
        iUdp.stop();
   1b2ea:	c6 01       	movw	r24, r12
   1b2ec:	0e 94 10 de 	call	0x1bc20	; 0x1bc20 <EthernetUDP::stop()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:173
    }

    return ret;
}
   1b2f0:	c8 01       	movw	r24, r16
   1b2f2:	26 96       	adiw	r28, 0x06	; 6
   1b2f4:	0f b6       	in	r0, 0x3f	; 63
   1b2f6:	f8 94       	cli
   1b2f8:	de bf       	out	0x3e, r29	; 62
   1b2fa:	0f be       	out	0x3f, r0	; 63
   1b2fc:	cd bf       	out	0x3d, r28	; 61
   1b2fe:	df 91       	pop	r29
   1b300:	cf 91       	pop	r28
   1b302:	1f 91       	pop	r17
   1b304:	0f 91       	pop	r16
   1b306:	ff 90       	pop	r15
   1b308:	ef 90       	pop	r14
   1b30a:	df 90       	pop	r13
   1b30c:	cf 90       	pop	r12
   1b30e:	bf 90       	pop	r11
   1b310:	af 90       	pop	r10
   1b312:	9f 90       	pop	r9
   1b314:	8f 90       	pop	r8
   1b316:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:157 (discriminator 1)
                    if (ret != 0)
                    {
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
   1b318:	0f 3f       	cpi	r16, 0xFF	; 255
   1b31a:	10 07       	cpc	r17, r16
   1b31c:	31 f7       	brne	.-52     	; 0x1b2ea <DNSClient::getHostByName(char const*, IPAddress&)+0xb8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:159
                        {
                            ret = ProcessResponse(5000, aResult);
   1b31e:	a5 01       	movw	r20, r10
   1b320:	68 e8       	ldi	r22, 0x88	; 136
   1b322:	73 e1       	ldi	r23, 0x13	; 19
   1b324:	c7 01       	movw	r24, r14
   1b326:	0e 94 a2 d7 	call	0x1af44	; 0x1af44 <DNSClient::ProcessResponse(unsigned int, IPAddress&)>
   1b32a:	8c 01       	movw	r16, r24
   1b32c:	81 e0       	ldi	r24, 0x01	; 1
   1b32e:	88 1a       	sub	r8, r24
   1b330:	91 08       	sbc	r9, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:157
                    if (ret != 0)
                    {
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
   1b332:	91 f7       	brne	.-28     	; 0x1b318 <DNSClient::getHostByName(char const*, IPAddress&)+0xe6>
   1b334:	da cf       	rjmp	.-76     	; 0x1b2ea <DNSClient::getHostByName(char const*, IPAddress&)+0xb8>
   1b336:	83 e0       	ldi	r24, 0x03	; 3
   1b338:	88 2e       	mov	r8, r24
   1b33a:	91 2c       	mov	r9, r1
   1b33c:	f0 cf       	rjmp	.-32     	; 0x1b31e <DNSClient::getHostByName(char const*, IPAddress&)+0xec>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:126

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    {
        // It is, our work here is done
        return 1;
   1b33e:	01 e0       	ldi	r16, 0x01	; 1
   1b340:	10 e0       	ldi	r17, 0x00	; 0
   1b342:	d6 cf       	rjmp	.-84     	; 0x1b2f0 <DNSClient::getHostByName(char const*, IPAddress&)+0xbe>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:132
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    {
        return INVALID_SERVER;
   1b344:	0e ef       	ldi	r16, 0xFE	; 254
   1b346:	1f ef       	ldi	r17, 0xFF	; 255
   1b348:	d3 cf       	rjmp	.-90     	; 0x1b2f0 <DNSClient::getHostByName(char const*, IPAddress&)+0xbe>

0001b34a <W5500Class::writeGAR(unsigned char*)>:
_ZN10W5500Class8writeGAREPh():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.cpp:211
    return _dnsDomainName;
}

char* EthernetClass::hostName(){
    return _hostName;
}
   1b34a:	24 e0       	ldi	r18, 0x04	; 4
   1b34c:	30 e0       	ldi	r19, 0x00	; 0
   1b34e:	ac 01       	movw	r20, r24
   1b350:	64 e0       	ldi	r22, 0x04	; 4
   1b352:	81 e0       	ldi	r24, 0x01	; 1
   1b354:	90 e0       	ldi	r25, 0x00	; 0
   1b356:	0c 94 10 e2 	jmp	0x1c420	; 0x1c420 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>

0001b35a <W5500Class::writeSUBR(unsigned char*)>:
_ZN10W5500Class9writeSUBREPh():
   1b35a:	24 e0       	ldi	r18, 0x04	; 4
   1b35c:	30 e0       	ldi	r19, 0x00	; 0
   1b35e:	ac 01       	movw	r20, r24
   1b360:	64 e0       	ldi	r22, 0x04	; 4
   1b362:	85 e0       	ldi	r24, 0x05	; 5
   1b364:	90 e0       	ldi	r25, 0x00	; 0
   1b366:	0c 94 10 e2 	jmp	0x1c420	; 0x1c420 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>

0001b36a <W5500Class::writeSHAR(unsigned char*)>:
_ZN10W5500Class9writeSHAREPh():
   1b36a:	26 e0       	ldi	r18, 0x06	; 6
   1b36c:	30 e0       	ldi	r19, 0x00	; 0
   1b36e:	ac 01       	movw	r20, r24
   1b370:	64 e0       	ldi	r22, 0x04	; 4
   1b372:	89 e0       	ldi	r24, 0x09	; 9
   1b374:	90 e0       	ldi	r25, 0x00	; 0
   1b376:	0c 94 10 e2 	jmp	0x1c420	; 0x1c420 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>

0001b37a <W5500Class::writeSIPR(unsigned char*)>:
_ZN10W5500Class9writeSIPREPh():
   1b37a:	24 e0       	ldi	r18, 0x04	; 4
   1b37c:	30 e0       	ldi	r19, 0x00	; 0
   1b37e:	ac 01       	movw	r20, r24
   1b380:	64 e0       	ldi	r22, 0x04	; 4
   1b382:	8f e0       	ldi	r24, 0x0F	; 15
   1b384:	90 e0       	ldi	r25, 0x00	; 0
   1b386:	0c 94 10 e2 	jmp	0x1c420	; 0x1c420 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>

0001b38a <EthernetClass::begin(unsigned char*, IPAddress, IPAddress, IPAddress, IPAddress)>:
_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_():
   1b38a:	8f 92       	push	r8
   1b38c:	9f 92       	push	r9
   1b38e:	af 92       	push	r10
   1b390:	bf 92       	push	r11
   1b392:	cf 92       	push	r12
   1b394:	df 92       	push	r13
   1b396:	ef 92       	push	r14
   1b398:	ff 92       	push	r15
   1b39a:	0f 93       	push	r16
   1b39c:	1f 93       	push	r17
   1b39e:	cf 93       	push	r28
   1b3a0:	df 93       	push	r29
   1b3a2:	4c 01       	movw	r8, r24
   1b3a4:	5b 01       	movw	r10, r22
   1b3a6:	6a 01       	movw	r12, r20
   1b3a8:	e9 01       	movw	r28, r18
   1b3aa:	fc 01       	movw	r30, r24
   1b3ac:	64 85       	ldd	r22, Z+12	; 0x0c
   1b3ae:	83 e7       	ldi	r24, 0x73	; 115
   1b3b0:	92 e1       	ldi	r25, 0x12	; 18
   1b3b2:	0e 94 68 e2 	call	0x1c4d0	; 0x1c4d0 <W5500Class::init(unsigned char)>
_ZN10W5500Class13setMACAddressEPh():
   1b3b6:	c5 01       	movw	r24, r10
   1b3b8:	0e 94 b5 d9 	call	0x1b36a	; 0x1b36a <W5500Class::writeSHAR(unsigned char*)>
_ZN10W5500Class12setIPAddressEPh():
   1b3bc:	c6 01       	movw	r24, r12
   1b3be:	02 96       	adiw	r24, 0x02	; 2
   1b3c0:	0e 94 bd d9 	call	0x1b37a	; 0x1b37a <W5500Class::writeSIPR(unsigned char*)>
_ZN10W5500Class12setGatewayIpEPh():
   1b3c4:	c8 01       	movw	r24, r16
   1b3c6:	02 96       	adiw	r24, 0x02	; 2
   1b3c8:	0e 94 a5 d9 	call	0x1b34a	; 0x1b34a <W5500Class::writeGAR(unsigned char*)>
_ZN10W5500Class13setSubnetMaskEPh():
   1b3cc:	c7 01       	movw	r24, r14
   1b3ce:	02 96       	adiw	r24, 0x02	; 2
   1b3d0:	0e 94 ad d9 	call	0x1b35a	; 0x1b35a <W5500Class::writeSUBR(unsigned char*)>
_ZN9IPAddressaSERKS_():
   1b3d4:	8a 81       	ldd	r24, Y+2	; 0x02
   1b3d6:	9b 81       	ldd	r25, Y+3	; 0x03
   1b3d8:	ac 81       	ldd	r26, Y+4	; 0x04
   1b3da:	bd 81       	ldd	r27, Y+5	; 0x05
   1b3dc:	f4 01       	movw	r30, r8
   1b3de:	82 83       	std	Z+2, r24	; 0x02
   1b3e0:	93 83       	std	Z+3, r25	; 0x03
   1b3e2:	a4 83       	std	Z+4, r26	; 0x04
   1b3e4:	b5 83       	std	Z+5, r27	; 0x05
_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_():
   1b3e6:	df 91       	pop	r29
   1b3e8:	cf 91       	pop	r28
   1b3ea:	1f 91       	pop	r17
   1b3ec:	0f 91       	pop	r16
   1b3ee:	ff 90       	pop	r15
   1b3f0:	ef 90       	pop	r14
   1b3f2:	df 90       	pop	r13
   1b3f4:	cf 90       	pop	r12
   1b3f6:	bf 90       	pop	r11
   1b3f8:	af 90       	pop	r10
   1b3fa:	9f 90       	pop	r9
   1b3fc:	8f 90       	pop	r8
   1b3fe:	08 95       	ret

0001b400 <EthernetClass::link()>:
_ZN10W5500Class10getPHYCFGREv():
   1b400:	60 e0       	ldi	r22, 0x00	; 0
   1b402:	8e e2       	ldi	r24, 0x2E	; 46
   1b404:	90 e0       	ldi	r25, 0x00	; 0
   1b406:	0e 94 44 e2 	call	0x1c488	; 0x1c488 <W5500Class::read(unsigned int, unsigned char)>
_ZN13EthernetClass4linkEv():
   1b40a:	81 70       	andi	r24, 0x01	; 1
   1b40c:	08 95       	ret

0001b40e <EthernetClass::dnsServerIP()>:
_ZN9IPAddressC4ERKS_():
   1b40e:	2b ed       	ldi	r18, 0xDB	; 219
   1b410:	39 e0       	ldi	r19, 0x09	; 9
   1b412:	fc 01       	movw	r30, r24
   1b414:	31 83       	std	Z+1, r19	; 0x01
   1b416:	20 83       	st	Z, r18
   1b418:	fb 01       	movw	r30, r22
   1b41a:	42 81       	ldd	r20, Z+2	; 0x02
   1b41c:	53 81       	ldd	r21, Z+3	; 0x03
   1b41e:	64 81       	ldd	r22, Z+4	; 0x04
   1b420:	75 81       	ldd	r23, Z+5	; 0x05
   1b422:	fc 01       	movw	r30, r24
   1b424:	42 83       	std	Z+2, r20	; 0x02
   1b426:	53 83       	std	Z+3, r21	; 0x03
   1b428:	64 83       	std	Z+4, r22	; 0x04
   1b42a:	75 83       	std	Z+5, r23	; 0x05
_ZN13EthernetClass11dnsServerIPEv():
   1b42c:	08 95       	ret

0001b42e <_GLOBAL__sub_I__ZN13EthernetClass6_stateE>:
_GLOBAL__sub_I__ZN13EthernetClass6_stateE():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.cpp:213

EthernetClass Ethernet;
   1b42e:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
   1b430:	00 e0       	ldi	r16, 0x00	; 0
   1b432:	20 e0       	ldi	r18, 0x00	; 0
   1b434:	40 e0       	ldi	r20, 0x00	; 0
   1b436:	60 e0       	ldi	r22, 0x00	; 0
   1b438:	80 e5       	ldi	r24, 0x50	; 80
   1b43a:	92 e1       	ldi	r25, 0x12	; 18
   1b43c:	0f 94 7a 12 	call	0x224f4	; 0x224f4 <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_ZN13EthernetClassC4Ev():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.h:34
  uint8_t w5500_cspin;

  static uint8_t _state[MAX_SOCK_NUM];
  static uint16_t _server_port[MAX_SOCK_NUM];

  EthernetClass() { _dhcp = NULL; w5500_cspin = 10; }
   1b440:	83 e3       	ldi	r24, 0x33	; 51
   1b442:	92 e1       	ldi	r25, 0x12	; 18
   1b444:	0f 94 70 12 	call	0x224e0	; 0x224e0 <IPAddress::IPAddress()>
   1b448:	e3 e3       	ldi	r30, 0x33	; 51
   1b44a:	f2 e1       	ldi	r31, 0x12	; 18
   1b44c:	13 86       	std	Z+11, r1	; 0x0b
   1b44e:	12 86       	std	Z+10, r1	; 0x0a
   1b450:	8a e0       	ldi	r24, 0x0A	; 10
   1b452:	84 87       	std	Z+12, r24	; 0x0c
_GLOBAL__sub_I__ZN13EthernetClass6_stateE():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.cpp:213
   1b454:	0f 91       	pop	r16
   1b456:	08 95       	ret

0001b458 <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:63
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
   1b458:	90 e0       	ldi	r25, 0x00	; 0
   1b45a:	80 e0       	ldi	r24, 0x00	; 0
   1b45c:	08 95       	ret

0001b45e <EthernetClient::operator!=(EthernetClient const&)>:
_ZN14EthernetClientneERKS_():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.h:28
  virtual void flush();
  virtual void stop();
  virtual uint8_t connected();
  virtual operator bool();
  virtual bool operator==(const EthernetClient&);
  virtual bool operator!=(const EthernetClient& rhs) { return !this->operator==(rhs); };
   1b45e:	dc 01       	movw	r26, r24
   1b460:	ed 91       	ld	r30, X+
   1b462:	fc 91       	ld	r31, X
   1b464:	02 8c       	ldd	r0, Z+26	; 0x1a
   1b466:	f3 8d       	ldd	r31, Z+27	; 0x1b
   1b468:	e0 2d       	mov	r30, r0
   1b46a:	19 95       	eicall
   1b46c:	91 e0       	ldi	r25, 0x01	; 1
   1b46e:	89 27       	eor	r24, r25
   1b470:	08 95       	ret

0001b472 <EthernetClient::write(unsigned char)>:
_ZN14EthernetClient5writeEh():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:73
  }

  return 1;
}

size_t EthernetClient::write(uint8_t b) {
   1b472:	cf 93       	push	r28
   1b474:	df 93       	push	r29
   1b476:	1f 92       	push	r1
   1b478:	cd b7       	in	r28, 0x3d	; 61
   1b47a:	de b7       	in	r29, 0x3e	; 62
   1b47c:	69 83       	std	Y+1, r22	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:74
  return write(&b, 1);
   1b47e:	dc 01       	movw	r26, r24
   1b480:	ed 91       	ld	r30, X+
   1b482:	fc 91       	ld	r31, X
   1b484:	02 80       	ldd	r0, Z+2	; 0x02
   1b486:	f3 81       	ldd	r31, Z+3	; 0x03
   1b488:	e0 2d       	mov	r30, r0
   1b48a:	41 e0       	ldi	r20, 0x01	; 1
   1b48c:	50 e0       	ldi	r21, 0x00	; 0
   1b48e:	be 01       	movw	r22, r28
   1b490:	6f 5f       	subi	r22, 0xFF	; 255
   1b492:	7f 4f       	sbci	r23, 0xFF	; 255
   1b494:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:75
}
   1b496:	0f 90       	pop	r0
   1b498:	df 91       	pop	r29
   1b49a:	cf 91       	pop	r28
   1b49c:	08 95       	ret

0001b49e <EthernetClient::operator bool()>:
_ZN14EthernetClientcvbEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:163

// the next function allows us to use the client returned by
// EthernetServer::available() as the condition in an if-statement.

EthernetClient::operator bool() {
  return _sock != MAX_SOCK_NUM;
   1b49e:	21 e0       	ldi	r18, 0x01	; 1
   1b4a0:	fc 01       	movw	r30, r24
   1b4a2:	84 85       	ldd	r24, Z+12	; 0x0c
   1b4a4:	88 30       	cpi	r24, 0x08	; 8
   1b4a6:	09 f4       	brne	.+2      	; 0x1b4aa <EthernetClient::operator bool()+0xc>
   1b4a8:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:164
}
   1b4aa:	82 2f       	mov	r24, r18
   1b4ac:	08 95       	ret

0001b4ae <EthernetClient::operator==(EthernetClient const&)>:
_ZN14EthernetClienteqERKS_():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:167

bool EthernetClient::operator==(const EthernetClient& rhs) {
  return _sock == rhs._sock && _sock != MAX_SOCK_NUM && rhs._sock != MAX_SOCK_NUM;
   1b4ae:	fc 01       	movw	r30, r24
   1b4b0:	94 85       	ldd	r25, Z+12	; 0x0c
   1b4b2:	fb 01       	movw	r30, r22
   1b4b4:	84 85       	ldd	r24, Z+12	; 0x0c
   1b4b6:	98 13       	cpse	r25, r24
   1b4b8:	03 c0       	rjmp	.+6      	; 0x1b4c0 <EthernetClient::operator==(EthernetClient const&)+0x12>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:167 (discriminator 1)
   1b4ba:	81 e0       	ldi	r24, 0x01	; 1
   1b4bc:	98 30       	cpi	r25, 0x08	; 8
   1b4be:	09 f4       	brne	.+2      	; 0x1b4c2 <EthernetClient::operator==(EthernetClient const&)+0x14>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:167
   1b4c0:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:168
}
   1b4c2:	08 95       	ret

0001b4c4 <EthernetClient::connect(char const*, unsigned int)>:
_ZN14EthernetClient7connectEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:23
}

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
}

int EthernetClient::connect(const char* host, uint16_t port) {
   1b4c4:	cf 92       	push	r12
   1b4c6:	df 92       	push	r13
   1b4c8:	ef 92       	push	r14
   1b4ca:	ff 92       	push	r15
   1b4cc:	0f 93       	push	r16
   1b4ce:	1f 93       	push	r17
   1b4d0:	cf 93       	push	r28
   1b4d2:	df 93       	push	r29
   1b4d4:	cd b7       	in	r28, 0x3d	; 61
   1b4d6:	de b7       	in	r29, 0x3e	; 62
   1b4d8:	af 97       	sbiw	r28, 0x2f	; 47
   1b4da:	0f b6       	in	r0, 0x3f	; 63
   1b4dc:	f8 94       	cli
   1b4de:	de bf       	out	0x3e, r29	; 62
   1b4e0:	0f be       	out	0x3f, r0	; 63
   1b4e2:	cd bf       	out	0x3d, r28	; 61
   1b4e4:	8c 01       	movw	r16, r24
   1b4e6:	6b 01       	movw	r12, r22
   1b4e8:	7a 01       	movw	r14, r20
_ZN9DNSClientC4Ev():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.h:10
#ifndef DNSClient_h
#define DNSClient_h

#include <EthernetUdp2.h>

class DNSClient
   1b4ea:	ce 01       	movw	r24, r28
   1b4ec:	01 96       	adiw	r24, 0x01	; 1
   1b4ee:	0f 94 70 12 	call	0x224e0	; 0x224e0 <IPAddress::IPAddress()>
   1b4f2:	ce 01       	movw	r24, r28
   1b4f4:	09 96       	adiw	r24, 0x09	; 9
   1b4f6:	0e 94 2c df 	call	0x1be58	; 0x1be58 <EthernetUDP::EthernetUDP()>
_ZN14EthernetClient7connectEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:27
  // Look up the host first
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;
   1b4fa:	ce 01       	movw	r24, r28
   1b4fc:	8a 96       	adiw	r24, 0x2a	; 42
   1b4fe:	0f 94 70 12 	call	0x224e0	; 0x224e0 <IPAddress::IPAddress()>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:29

  dns.begin(Ethernet.dnsServerIP());
   1b502:	63 e3       	ldi	r22, 0x33	; 51
   1b504:	72 e1       	ldi	r23, 0x12	; 18
   1b506:	ce 01       	movw	r24, r28
   1b508:	84 96       	adiw	r24, 0x24	; 36
   1b50a:	0e 94 07 da 	call	0x1b40e	; 0x1b40e <EthernetClass::dnsServerIP()>
   1b50e:	be 01       	movw	r22, r28
   1b510:	6c 5d       	subi	r22, 0xDC	; 220
   1b512:	7f 4f       	sbci	r23, 0xFF	; 255
   1b514:	ce 01       	movw	r24, r28
   1b516:	01 96       	adiw	r24, 0x01	; 1
   1b518:	0e 94 a3 d6 	call	0x1ad46	; 0x1ad46 <DNSClient::begin(IPAddress const&)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:30
  ret = dns.getHostByName(host, remote_addr);
   1b51c:	ae 01       	movw	r20, r28
   1b51e:	46 5d       	subi	r20, 0xD6	; 214
   1b520:	5f 4f       	sbci	r21, 0xFF	; 255
   1b522:	b6 01       	movw	r22, r12
   1b524:	ce 01       	movw	r24, r28
   1b526:	01 96       	adiw	r24, 0x01	; 1
   1b528:	0e 94 19 d9 	call	0x1b232	; 0x1b232 <DNSClient::getHostByName(char const*, IPAddress&)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:31
  if (ret == 1) {
   1b52c:	81 30       	cpi	r24, 0x01	; 1
   1b52e:	91 05       	cpc	r25, r1
   1b530:	c1 f4       	brne	.+48     	; 0x1b562 <EthernetClient::connect(char const*, unsigned int)+0x9e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:32
    return connect(remote_addr, port);
   1b532:	d8 01       	movw	r26, r16
   1b534:	ed 91       	ld	r30, X+
   1b536:	fc 91       	ld	r31, X
   1b538:	06 84       	ldd	r0, Z+14	; 0x0e
   1b53a:	f7 85       	ldd	r31, Z+15	; 0x0f
   1b53c:	e0 2d       	mov	r30, r0
_ZN9IPAddressC4ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
   1b53e:	8b ed       	ldi	r24, 0xDB	; 219
   1b540:	99 e0       	ldi	r25, 0x09	; 9
   1b542:	9d a3       	std	Y+37, r25	; 0x25
   1b544:	8c a3       	std	Y+36, r24	; 0x24
   1b546:	8c a5       	ldd	r24, Y+44	; 0x2c
   1b548:	9d a5       	ldd	r25, Y+45	; 0x2d
   1b54a:	ae a5       	ldd	r26, Y+46	; 0x2e
   1b54c:	bf a5       	ldd	r27, Y+47	; 0x2f
   1b54e:	8e a3       	std	Y+38, r24	; 0x26
   1b550:	9f a3       	std	Y+39, r25	; 0x27
   1b552:	a8 a7       	std	Y+40, r26	; 0x28
   1b554:	b9 a7       	std	Y+41, r27	; 0x29
_ZN14EthernetClient7connectEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:32
   1b556:	a7 01       	movw	r20, r14
   1b558:	be 01       	movw	r22, r28
   1b55a:	6c 5d       	subi	r22, 0xDC	; 220
   1b55c:	7f 4f       	sbci	r23, 0xFF	; 255
   1b55e:	c8 01       	movw	r24, r16
   1b560:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:36
  } else {
    return ret;
  }
}
   1b562:	af 96       	adiw	r28, 0x2f	; 47
   1b564:	0f b6       	in	r0, 0x3f	; 63
   1b566:	f8 94       	cli
   1b568:	de bf       	out	0x3e, r29	; 62
   1b56a:	0f be       	out	0x3f, r0	; 63
   1b56c:	cd bf       	out	0x3d, r28	; 61
   1b56e:	df 91       	pop	r29
   1b570:	cf 91       	pop	r28
   1b572:	1f 91       	pop	r17
   1b574:	0f 91       	pop	r16
   1b576:	ff 90       	pop	r15
   1b578:	ef 90       	pop	r14
   1b57a:	df 90       	pop	r13
   1b57c:	cf 90       	pop	r12
   1b57e:	08 95       	ret

0001b580 <EthernetClient::write(unsigned char const*, unsigned int)>:
_ZN14EthernetClient5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:77

size_t EthernetClient::write(uint8_t b) {
  return write(&b, 1);
}

size_t EthernetClient::write(const uint8_t *buf, size_t size) {
   1b580:	0f 93       	push	r16
   1b582:	1f 93       	push	r17
   1b584:	cf 93       	push	r28
   1b586:	df 93       	push	r29
   1b588:	8c 01       	movw	r16, r24
   1b58a:	ea 01       	movw	r28, r20
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:78
  if (_sock == MAX_SOCK_NUM) {
   1b58c:	fc 01       	movw	r30, r24
   1b58e:	84 85       	ldd	r24, Z+12	; 0x0c
   1b590:	88 30       	cpi	r24, 0x08	; 8
   1b592:	69 f4       	brne	.+26     	; 0x1b5ae <EthernetClient::write(unsigned char const*, unsigned int)+0x2e>
_ZN5Print13setWriteErrorEi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:44
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   1b594:	81 e0       	ldi	r24, 0x01	; 1
   1b596:	90 e0       	ldi	r25, 0x00	; 0
   1b598:	f8 01       	movw	r30, r16
   1b59a:	93 83       	std	Z+3, r25	; 0x03
   1b59c:	82 83       	std	Z+2, r24	; 0x02
_ZN14EthernetClient5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:80
    setWriteError();
    return 0;
   1b59e:	d0 e0       	ldi	r29, 0x00	; 0
   1b5a0:	c0 e0       	ldi	r28, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:87
  if (!send(_sock, buf, size)) {
    setWriteError();
    return 0;
  }
  return size;
}
   1b5a2:	ce 01       	movw	r24, r28
   1b5a4:	df 91       	pop	r29
   1b5a6:	cf 91       	pop	r28
   1b5a8:	1f 91       	pop	r17
   1b5aa:	0f 91       	pop	r16
   1b5ac:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:82
size_t EthernetClient::write(const uint8_t *buf, size_t size) {
  if (_sock == MAX_SOCK_NUM) {
    setWriteError();
    return 0;
  }
  if (!send(_sock, buf, size)) {
   1b5ae:	0e 94 93 e0 	call	0x1c126	; 0x1c126 <send(unsigned char, unsigned char const*, unsigned int)>
   1b5b2:	89 2b       	or	r24, r25
   1b5b4:	79 f3       	breq	.-34     	; 0x1b594 <EthernetClient::write(unsigned char const*, unsigned int)+0x14>
   1b5b6:	f5 cf       	rjmp	.-22     	; 0x1b5a2 <EthernetClient::write(unsigned char const*, unsigned int)+0x22>

0001b5b8 <EthernetClient::available()>:
_ZN14EthernetClient9availableEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:90
  }
  return size;
}

int EthernetClient::available() {
  if (_sock != MAX_SOCK_NUM)
   1b5b8:	fc 01       	movw	r30, r24
   1b5ba:	64 85       	ldd	r22, Z+12	; 0x0c
   1b5bc:	68 30       	cpi	r22, 0x08	; 8
   1b5be:	21 f0       	breq	.+8      	; 0x1b5c8 <EthernetClient::available()+0x10>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:91
    return w5500.getRXReceivedSize(_sock);
   1b5c0:	83 e7       	ldi	r24, 0x73	; 115
   1b5c2:	92 e1       	ldi	r25, 0x12	; 18
   1b5c4:	0c 94 eb e2 	jmp	0x1c5d6	; 0x1c5d6 <W5500Class::getRXReceivedSize(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:93
  return 0;
}
   1b5c8:	90 e0       	ldi	r25, 0x00	; 0
   1b5ca:	80 e0       	ldi	r24, 0x00	; 0
   1b5cc:	08 95       	ret

0001b5ce <EthernetClient::read()>:
_ZN14EthernetClient4readEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:95

int EthernetClient::read() {
   1b5ce:	cf 93       	push	r28
   1b5d0:	df 93       	push	r29
   1b5d2:	1f 92       	push	r1
   1b5d4:	cd b7       	in	r28, 0x3d	; 61
   1b5d6:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:97
  uint8_t b;
  if ( recv(_sock, &b, 1) > 0 )
   1b5d8:	41 e0       	ldi	r20, 0x01	; 1
   1b5da:	50 e0       	ldi	r21, 0x00	; 0
   1b5dc:	be 01       	movw	r22, r28
   1b5de:	6f 5f       	subi	r22, 0xFF	; 255
   1b5e0:	7f 4f       	sbci	r23, 0xFF	; 255
   1b5e2:	fc 01       	movw	r30, r24
   1b5e4:	84 85       	ldd	r24, Z+12	; 0x0c
   1b5e6:	0e 94 e4 e0 	call	0x1c1c8	; 0x1c1c8 <recv(unsigned char, unsigned char*, int)>
   1b5ea:	18 16       	cp	r1, r24
   1b5ec:	19 06       	cpc	r1, r25
   1b5ee:	34 f4       	brge	.+12     	; 0x1b5fc <EthernetClient::read()+0x2e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:100
  {
    // recv worked
    return b;
   1b5f0:	89 81       	ldd	r24, Y+1	; 0x01
   1b5f2:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:107
  else
  {
    // No data available
    return -1;
  }
}
   1b5f4:	0f 90       	pop	r0
   1b5f6:	df 91       	pop	r29
   1b5f8:	cf 91       	pop	r28
   1b5fa:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:105
    return b;
  }
  else
  {
    // No data available
    return -1;
   1b5fc:	8f ef       	ldi	r24, 0xFF	; 255
   1b5fe:	9f ef       	ldi	r25, 0xFF	; 255
   1b600:	f9 cf       	rjmp	.-14     	; 0x1b5f4 <EthernetClient::read()+0x26>

0001b602 <EthernetClient::read(unsigned char*, unsigned int)>:
_ZN14EthernetClient4readEPhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:110
  }
}

int EthernetClient::read(uint8_t *buf, size_t size) {
  return recv(_sock, buf, size);
   1b602:	fc 01       	movw	r30, r24
   1b604:	84 85       	ldd	r24, Z+12	; 0x0c
   1b606:	0c 94 e4 e0 	jmp	0x1c1c8	; 0x1c1c8 <recv(unsigned char, unsigned char*, int)>

0001b60a <EthernetClient::peek()>:
_ZN14EthernetClient4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:113
}

int EthernetClient::peek() {
   1b60a:	0f 93       	push	r16
   1b60c:	1f 93       	push	r17
   1b60e:	cf 93       	push	r28
   1b610:	df 93       	push	r29
   1b612:	1f 92       	push	r1
   1b614:	cd b7       	in	r28, 0x3d	; 61
   1b616:	de b7       	in	r29, 0x3e	; 62
   1b618:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:116
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must
  if (!available())
   1b61a:	dc 01       	movw	r26, r24
   1b61c:	ed 91       	ld	r30, X+
   1b61e:	fc 91       	ld	r31, X
   1b620:	00 84       	ldd	r0, Z+8	; 0x08
   1b622:	f1 85       	ldd	r31, Z+9	; 0x09
   1b624:	e0 2d       	mov	r30, r0
   1b626:	19 95       	eicall
   1b628:	89 2b       	or	r24, r25
   1b62a:	79 f0       	breq	.+30     	; 0x1b64a <EthernetClient::peek()+0x40>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:118
    return -1;
  ::peek(_sock, &b);
   1b62c:	be 01       	movw	r22, r28
   1b62e:	6f 5f       	subi	r22, 0xFF	; 255
   1b630:	7f 4f       	sbci	r23, 0xFF	; 255
   1b632:	f8 01       	movw	r30, r16
   1b634:	84 85       	ldd	r24, Z+12	; 0x0c
   1b636:	0e 94 2a e1 	call	0x1c254	; 0x1c254 <peek(unsigned char, unsigned char*)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:119
  return b;
   1b63a:	89 81       	ldd	r24, Y+1	; 0x01
   1b63c:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:120
}
   1b63e:	0f 90       	pop	r0
   1b640:	df 91       	pop	r29
   1b642:	cf 91       	pop	r28
   1b644:	1f 91       	pop	r17
   1b646:	0f 91       	pop	r16
   1b648:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:117

int EthernetClient::peek() {
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must
  if (!available())
    return -1;
   1b64a:	8f ef       	ldi	r24, 0xFF	; 255
   1b64c:	9f ef       	ldi	r25, 0xFF	; 255
   1b64e:	f7 cf       	rjmp	.-18     	; 0x1b63e <EthernetClient::peek()+0x34>

0001b650 <EthernetClient::flush()>:
_ZN14EthernetClient5flushEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:123
  ::peek(_sock, &b);
  return b;
}

void EthernetClient::flush() {
  ::flush(_sock);
   1b650:	fc 01       	movw	r30, r24
   1b652:	84 85       	ldd	r24, Z+12	; 0x0c
   1b654:	0c 94 38 e1 	jmp	0x1c270	; 0x1c270 <flush(unsigned char)>

0001b658 <EthernetClient::EthernetClient()>:
_ZN14EthernetClientC2Ev():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:17
#include "EthernetServer.h"
#include "Dns.h"

uint16_t EthernetClient::_srcport = 1024;

EthernetClient::EthernetClient() : _sock(MAX_SOCK_NUM) {
   1b658:	fc 01       	movw	r30, r24
_ZN5PrintC4Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:46
  public:
    Print() : write_error(0) {}
   1b65a:	13 82       	std	Z+3, r1	; 0x03
   1b65c:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
   1b65e:	88 ee       	ldi	r24, 0xE8	; 232
   1b660:	93 e0       	ldi	r25, 0x03	; 3
   1b662:	a0 e0       	ldi	r26, 0x00	; 0
   1b664:	b0 e0       	ldi	r27, 0x00	; 0
   1b666:	84 83       	std	Z+4, r24	; 0x04
   1b668:	95 83       	std	Z+5, r25	; 0x05
   1b66a:	a6 83       	std	Z+6, r26	; 0x06
   1b66c:	b7 83       	std	Z+7, r27	; 0x07
_ZN14EthernetClientC2Ev():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:17
   1b66e:	8d e3       	ldi	r24, 0x3D	; 61
   1b670:	99 e0       	ldi	r25, 0x09	; 9
   1b672:	91 83       	std	Z+1, r25	; 0x01
   1b674:	80 83       	st	Z, r24
   1b676:	88 e0       	ldi	r24, 0x08	; 8
   1b678:	84 87       	std	Z+12, r24	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:18
}
   1b67a:	08 95       	ret

0001b67c <EthernetClient::EthernetClient(unsigned char)>:
_ZN14EthernetClientC2Eh():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:20

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
   1b67c:	fc 01       	movw	r30, r24
_ZN5PrintC4Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:46
   1b67e:	13 82       	std	Z+3, r1	; 0x03
   1b680:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
   1b682:	88 ee       	ldi	r24, 0xE8	; 232
   1b684:	93 e0       	ldi	r25, 0x03	; 3
   1b686:	a0 e0       	ldi	r26, 0x00	; 0
   1b688:	b0 e0       	ldi	r27, 0x00	; 0
   1b68a:	84 83       	std	Z+4, r24	; 0x04
   1b68c:	95 83       	std	Z+5, r25	; 0x05
   1b68e:	a6 83       	std	Z+6, r26	; 0x06
   1b690:	b7 83       	std	Z+7, r27	; 0x07
_ZN14EthernetClientC2Eh():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:20
   1b692:	8d e3       	ldi	r24, 0x3D	; 61
   1b694:	99 e0       	ldi	r25, 0x09	; 9
   1b696:	91 83       	std	Z+1, r25	; 0x01
   1b698:	80 83       	st	Z, r24
   1b69a:	64 87       	std	Z+12, r22	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:21
}
   1b69c:	08 95       	ret

0001b69e <EthernetClient::status()>:
_ZN14EthernetClient6statusEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:155
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
}

uint8_t EthernetClient::status() {
  if (_sock == MAX_SOCK_NUM) return SnSR::CLOSED;
   1b69e:	fc 01       	movw	r30, r24
   1b6a0:	64 85       	ldd	r22, Z+12	; 0x0c
   1b6a2:	68 30       	cpi	r22, 0x08	; 8
   1b6a4:	41 f0       	breq	.+16     	; 0x1b6b6 <EthernetClient::status()+0x18>
_ZN10W5500Class6readSnEhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:348
};

extern W5500Class w5500;

uint8_t W5500Class::readSn(SOCKET _s, uint16_t _addr) {
    uint8_t cntl_byte = (_s<<5)+0x08;
   1b6a6:	62 95       	swap	r22
   1b6a8:	66 0f       	add	r22, r22
   1b6aa:	60 7e       	andi	r22, 0xE0	; 224
   1b6ac:	68 5f       	subi	r22, 0xF8	; 248
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:349
    return read(_addr, cntl_byte);
   1b6ae:	83 e0       	ldi	r24, 0x03	; 3
   1b6b0:	90 e0       	ldi	r25, 0x00	; 0
   1b6b2:	0c 94 44 e2 	jmp	0x1c488	; 0x1c488 <W5500Class::read(unsigned int, unsigned char)>
_ZN14EthernetClient6statusEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:157
  return w5500.readSnSR(_sock);
}
   1b6b6:	80 e0       	ldi	r24, 0x00	; 0
   1b6b8:	08 95       	ret

0001b6ba <EthernetClient::connect(IPAddress, unsigned int)>:
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:38
  } else {
    return ret;
  }
}

int EthernetClient::connect(IPAddress ip, uint16_t port) {
   1b6ba:	cf 92       	push	r12
   1b6bc:	df 92       	push	r13
   1b6be:	ef 92       	push	r14
   1b6c0:	ff 92       	push	r15
   1b6c2:	0f 93       	push	r16
   1b6c4:	1f 93       	push	r17
   1b6c6:	cf 93       	push	r28
   1b6c8:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:39
  if (_sock != MAX_SOCK_NUM)
   1b6ca:	fc 01       	movw	r30, r24
   1b6cc:	e4 84       	ldd	r14, Z+12	; 0x0c
   1b6ce:	f8 e0       	ldi	r31, 0x08	; 8
   1b6d0:	ef 16       	cp	r14, r31
   1b6d2:	59 f0       	breq	.+22     	; 0x1b6ea <EthernetClient::connect(IPAddress, unsigned int)+0x30>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:59
  if (_srcport == 0) _srcport = 1024;
  socket(_sock, SnMR::TCP, _srcport, 0);

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    _sock = MAX_SOCK_NUM;
    return 0;
   1b6d4:	90 e0       	ldi	r25, 0x00	; 0
   1b6d6:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:71
      return 0;
    }
  }

  return 1;
}
   1b6d8:	df 91       	pop	r29
   1b6da:	cf 91       	pop	r28
   1b6dc:	1f 91       	pop	r17
   1b6de:	0f 91       	pop	r16
   1b6e0:	ff 90       	pop	r15
   1b6e2:	ef 90       	pop	r14
   1b6e4:	df 90       	pop	r13
   1b6e6:	cf 90       	pop	r12
   1b6e8:	08 95       	ret
   1b6ea:	6a 01       	movw	r12, r20
   1b6ec:	8b 01       	movw	r16, r22
   1b6ee:	ec 01       	movw	r28, r24
   1b6f0:	f1 2c       	mov	r15, r1
_ZN10W5500Class6readSnEhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:349
   1b6f2:	6e 2d       	mov	r22, r14
   1b6f4:	83 e0       	ldi	r24, 0x03	; 3
   1b6f6:	90 e0       	ldi	r25, 0x00	; 0
   1b6f8:	0e 94 44 e2 	call	0x1c488	; 0x1c488 <W5500Class::read(unsigned int, unsigned char)>
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:44
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
   1b6fc:	81 11       	cpse	r24, r1
   1b6fe:	23 c0       	rjmp	.+70     	; 0x1b746 <EthernetClient::connect(IPAddress, unsigned int)+0x8c>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:45
      _sock = i;
   1b700:	fc 86       	std	Y+12, r15	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:50
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
   1b702:	8c 85       	ldd	r24, Y+12	; 0x0c
   1b704:	88 30       	cpi	r24, 0x08	; 8
   1b706:	31 f3       	breq	.-52     	; 0x1b6d4 <EthernetClient::connect(IPAddress, unsigned int)+0x1a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:53
    return 0;

  _srcport++;
   1b708:	20 91 7e 02 	lds	r18, 0x027E	; 0x80027e <EthernetClient::_srcport>
   1b70c:	30 91 7f 02 	lds	r19, 0x027F	; 0x80027f <EthernetClient::_srcport+0x1>
   1b710:	2f 5f       	subi	r18, 0xFF	; 255
   1b712:	3f 4f       	sbci	r19, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:54
  if (_srcport == 0) _srcport = 1024;
   1b714:	11 f1       	breq	.+68     	; 0x1b75a <EthernetClient::connect(IPAddress, unsigned int)+0xa0>
   1b716:	30 93 7f 02 	sts	0x027F, r19	; 0x80027f <EthernetClient::_srcport+0x1>
   1b71a:	20 93 7e 02 	sts	0x027E, r18	; 0x80027e <EthernetClient::_srcport>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:55
  socket(_sock, SnMR::TCP, _srcport, 0);
   1b71e:	40 91 7e 02 	lds	r20, 0x027E	; 0x80027e <EthernetClient::_srcport>
   1b722:	50 91 7f 02 	lds	r21, 0x027F	; 0x80027f <EthernetClient::_srcport+0x1>
   1b726:	20 e0       	ldi	r18, 0x00	; 0
   1b728:	61 e0       	ldi	r22, 0x01	; 1
   1b72a:	0e 94 0c e0 	call	0x1c018	; 0x1c018 <socket(unsigned char, unsigned char, unsigned int, unsigned char)>
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
   1b72e:	b8 01       	movw	r22, r16
   1b730:	6e 5f       	subi	r22, 0xFE	; 254
   1b732:	7f 4f       	sbci	r23, 0xFF	; 255
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:57

  if (!::connect(_sock, rawIPAddress(ip), port)) {
   1b734:	a6 01       	movw	r20, r12
   1b736:	8c 85       	ldd	r24, Y+12	; 0x0c
   1b738:	0e 94 56 e0 	call	0x1c0ac	; 0x1c0ac <connect(unsigned char, unsigned char*, unsigned int)>
   1b73c:	81 11       	cpse	r24, r1
   1b73e:	10 c0       	rjmp	.+32     	; 0x1b760 <EthernetClient::connect(IPAddress, unsigned int)+0xa6>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:58
    _sock = MAX_SOCK_NUM;
   1b740:	88 e0       	ldi	r24, 0x08	; 8
   1b742:	8c 87       	std	Y+12, r24	; 0x0c
   1b744:	c7 cf       	rjmp	.-114    	; 0x1b6d4 <EthernetClient::connect(IPAddress, unsigned int)+0x1a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:44
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
   1b746:	8b 7f       	andi	r24, 0xFB	; 251
   1b748:	88 31       	cpi	r24, 0x18	; 24
   1b74a:	d1 f2       	breq	.-76     	; 0x1b700 <EthernetClient::connect(IPAddress, unsigned int)+0x46>
   1b74c:	f3 94       	inc	r15
   1b74e:	20 e2       	ldi	r18, 0x20	; 32
   1b750:	e2 0e       	add	r14, r18
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:42

int EthernetClient::connect(IPAddress ip, uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
   1b752:	88 e0       	ldi	r24, 0x08	; 8
   1b754:	f8 12       	cpse	r15, r24
   1b756:	cd cf       	rjmp	.-102    	; 0x1b6f2 <EthernetClient::connect(IPAddress, unsigned int)+0x38>
   1b758:	d4 cf       	rjmp	.-88     	; 0x1b702 <EthernetClient::connect(IPAddress, unsigned int)+0x48>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:54

  if (_sock == MAX_SOCK_NUM)
    return 0;

  _srcport++;
  if (_srcport == 0) _srcport = 1024;
   1b75a:	20 e0       	ldi	r18, 0x00	; 0
   1b75c:	34 e0       	ldi	r19, 0x04	; 4
   1b75e:	db cf       	rjmp	.-74     	; 0x1b716 <EthernetClient::connect(IPAddress, unsigned int)+0x5c>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:62
  if (!::connect(_sock, rawIPAddress(ip), port)) {
    _sock = MAX_SOCK_NUM;
    return 0;
  }

  while (status() != SnSR::ESTABLISHED) {
   1b760:	ce 01       	movw	r24, r28
   1b762:	0e 94 4f db 	call	0x1b69e	; 0x1b69e <EthernetClient::status()>
   1b766:	87 31       	cpi	r24, 0x17	; 23
   1b768:	51 f0       	breq	.+20     	; 0x1b77e <EthernetClient::connect(IPAddress, unsigned int)+0xc4>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:63
    delay(1);
   1b76a:	61 e0       	ldi	r22, 0x01	; 1
   1b76c:	70 e0       	ldi	r23, 0x00	; 0
   1b76e:	80 e0       	ldi	r24, 0x00	; 0
   1b770:	90 e0       	ldi	r25, 0x00	; 0
   1b772:	0f 94 33 0f 	call	0x21e66	; 0x21e66 <delay>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:64
    if (status() == SnSR::CLOSED) {
   1b776:	ce 01       	movw	r24, r28
   1b778:	0e 94 4f db 	call	0x1b69e	; 0x1b69e <EthernetClient::status()>
   1b77c:	df cf       	rjmp	.-66     	; 0x1b73c <EthernetClient::connect(IPAddress, unsigned int)+0x82>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:70
      _sock = MAX_SOCK_NUM;
      return 0;
    }
  }

  return 1;
   1b77e:	81 e0       	ldi	r24, 0x01	; 1
   1b780:	90 e0       	ldi	r25, 0x00	; 0
   1b782:	aa cf       	rjmp	.-172    	; 0x1b6d8 <EthernetClient::connect(IPAddress, unsigned int)+0x1e>

0001b784 <EthernetClient::stop()>:
_ZN14EthernetClient4stopEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:126

void EthernetClient::flush() {
  ::flush(_sock);
}

void EthernetClient::stop() {
   1b784:	cf 92       	push	r12
   1b786:	df 92       	push	r13
   1b788:	ef 92       	push	r14
   1b78a:	ff 92       	push	r15
   1b78c:	cf 93       	push	r28
   1b78e:	df 93       	push	r29
   1b790:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:127
  if (_sock == MAX_SOCK_NUM)
   1b792:	8c 85       	ldd	r24, Y+12	; 0x0c
   1b794:	88 30       	cpi	r24, 0x08	; 8
   1b796:	79 f1       	breq	.+94     	; 0x1b7f6 <EthernetClient::stop()+0x72>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:131
    return;

  // attempt to close the connection gracefully (send a FIN to other side)
  disconnect(_sock);
   1b798:	0e 94 8c e0 	call	0x1c118	; 0x1c118 <disconnect(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:132
  unsigned long start = millis();
   1b79c:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   1b7a0:	6b 01       	movw	r12, r22
   1b7a2:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:135

  // wait a second for the connection to close
  while (status() != SnSR::CLOSED && millis() - start < 1000)
   1b7a4:	ce 01       	movw	r24, r28
   1b7a6:	0e 94 4f db 	call	0x1b69e	; 0x1b69e <EthernetClient::status()>
   1b7aa:	88 23       	and	r24, r24
   1b7ac:	91 f0       	breq	.+36     	; 0x1b7d2 <EthernetClient::stop()+0x4e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:135 (discriminator 1)
   1b7ae:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   1b7b2:	6c 19       	sub	r22, r12
   1b7b4:	7d 09       	sbc	r23, r13
   1b7b6:	8e 09       	sbc	r24, r14
   1b7b8:	9f 09       	sbc	r25, r15
   1b7ba:	68 3e       	cpi	r22, 0xE8	; 232
   1b7bc:	73 40       	sbci	r23, 0x03	; 3
   1b7be:	81 05       	cpc	r24, r1
   1b7c0:	91 05       	cpc	r25, r1
   1b7c2:	38 f4       	brcc	.+14     	; 0x1b7d2 <EthernetClient::stop()+0x4e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:136
    delay(1);
   1b7c4:	61 e0       	ldi	r22, 0x01	; 1
   1b7c6:	70 e0       	ldi	r23, 0x00	; 0
   1b7c8:	80 e0       	ldi	r24, 0x00	; 0
   1b7ca:	90 e0       	ldi	r25, 0x00	; 0
   1b7cc:	0f 94 33 0f 	call	0x21e66	; 0x21e66 <delay>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:135
  // attempt to close the connection gracefully (send a FIN to other side)
  disconnect(_sock);
  unsigned long start = millis();

  // wait a second for the connection to close
  while (status() != SnSR::CLOSED && millis() - start < 1000)
   1b7d0:	e9 cf       	rjmp	.-46     	; 0x1b7a4 <EthernetClient::stop()+0x20>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:139
    delay(1);

  // if it hasn't closed, close it forcefully
  if (status() != SnSR::CLOSED)
   1b7d2:	ce 01       	movw	r24, r28
   1b7d4:	0e 94 4f db 	call	0x1b69e	; 0x1b69e <EthernetClient::status()>
   1b7d8:	88 23       	and	r24, r24
   1b7da:	19 f0       	breq	.+6      	; 0x1b7e2 <EthernetClient::stop()+0x5e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:140
    close(_sock);
   1b7dc:	8c 85       	ldd	r24, Y+12	; 0x0c
   1b7de:	0e 94 fe df 	call	0x1bffc	; 0x1bffc <close(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:142

  EthernetClass::_server_port[_sock] = 0;
   1b7e2:	ec 85       	ldd	r30, Y+12	; 0x0c
   1b7e4:	f0 e0       	ldi	r31, 0x00	; 0
   1b7e6:	ee 0f       	add	r30, r30
   1b7e8:	ff 1f       	adc	r31, r31
   1b7ea:	e0 5c       	subi	r30, 0xC0	; 192
   1b7ec:	fd 4e       	sbci	r31, 0xED	; 237
   1b7ee:	11 82       	std	Z+1, r1	; 0x01
   1b7f0:	10 82       	st	Z, r1
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:143
  _sock = MAX_SOCK_NUM;
   1b7f2:	88 e0       	ldi	r24, 0x08	; 8
   1b7f4:	8c 87       	std	Y+12, r24	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:144
}
   1b7f6:	df 91       	pop	r29
   1b7f8:	cf 91       	pop	r28
   1b7fa:	ff 90       	pop	r15
   1b7fc:	ef 90       	pop	r14
   1b7fe:	df 90       	pop	r13
   1b800:	cf 90       	pop	r12
   1b802:	08 95       	ret

0001b804 <EthernetClient::connected()>:
_ZN14EthernetClient9connectedEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:146

uint8_t EthernetClient::connected() {
   1b804:	cf 93       	push	r28
   1b806:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:147
  if (_sock == MAX_SOCK_NUM) return 0;
   1b808:	fc 01       	movw	r30, r24
   1b80a:	24 85       	ldd	r18, Z+12	; 0x0c
   1b80c:	28 30       	cpi	r18, 0x08	; 8
   1b80e:	d9 f0       	breq	.+54     	; 0x1b846 <EthernetClient::connected()+0x42>
   1b810:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:149
  
  uint8_t s = status();
   1b812:	0e 94 4f db 	call	0x1b69e	; 0x1b69e <EthernetClient::status()>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:150
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
   1b816:	84 31       	cpi	r24, 0x14	; 20
   1b818:	89 f0       	breq	.+34     	; 0x1b83c <EthernetClient::connected()+0x38>
   1b81a:	88 23       	and	r24, r24
   1b81c:	79 f0       	breq	.+30     	; 0x1b83c <EthernetClient::connected()+0x38>
   1b81e:	88 31       	cpi	r24, 0x18	; 24
   1b820:	69 f0       	breq	.+26     	; 0x1b83c <EthernetClient::connected()+0x38>
   1b822:	21 e0       	ldi	r18, 0x01	; 1
   1b824:	8c 31       	cpi	r24, 0x1C	; 28
   1b826:	59 f4       	brne	.+22     	; 0x1b83e <EthernetClient::connected()+0x3a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:151
    (s == SnSR::CLOSE_WAIT && !available()));
   1b828:	e8 81       	ld	r30, Y
   1b82a:	f9 81       	ldd	r31, Y+1	; 0x01
   1b82c:	00 84       	ldd	r0, Z+8	; 0x08
   1b82e:	f1 85       	ldd	r31, Z+9	; 0x09
   1b830:	e0 2d       	mov	r30, r0
   1b832:	ce 01       	movw	r24, r28
   1b834:	19 95       	eicall
   1b836:	21 e0       	ldi	r18, 0x01	; 1
   1b838:	89 2b       	or	r24, r25
   1b83a:	09 f4       	brne	.+2      	; 0x1b83e <EthernetClient::connected()+0x3a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:150

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
  
  uint8_t s = status();
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
   1b83c:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:151
    (s == SnSR::CLOSE_WAIT && !available()));
   1b83e:	82 2f       	mov	r24, r18
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:152
}
   1b840:	df 91       	pop	r29
   1b842:	cf 91       	pop	r28
   1b844:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:147
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
   1b846:	80 e0       	ldi	r24, 0x00	; 0
   1b848:	fb cf       	rjmp	.-10     	; 0x1b840 <EthernetClient::connected()+0x3c>

0001b84a <_GLOBAL__sub_I__ZN14EthernetClient8_srcportE>:
_GLOBAL__sub_I__ZN14EthernetClient8_srcportE():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:168
  return _sock != MAX_SOCK_NUM;
}

bool EthernetClient::operator==(const EthernetClient& rhs) {
  return _sock == rhs._sock && _sock != MAX_SOCK_NUM && rhs._sock != MAX_SOCK_NUM;
}
   1b84a:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
   1b84c:	00 e0       	ldi	r16, 0x00	; 0
   1b84e:	20 e0       	ldi	r18, 0x00	; 0
   1b850:	40 e0       	ldi	r20, 0x00	; 0
   1b852:	60 e0       	ldi	r22, 0x00	; 0
   1b854:	86 e5       	ldi	r24, 0x56	; 86
   1b856:	92 e1       	ldi	r25, 0x12	; 18
   1b858:	0f 94 7a 12 	call	0x224f4	; 0x224f4 <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_GLOBAL__sub_I__ZN14EthernetClient8_srcportE():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:168
   1b85c:	0f 91       	pop	r16
   1b85e:	08 95       	ret

0001b860 <Print::flush()>:
_ZN5Print5flushEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:65

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }

    virtual void flush() { /* Empty implementation for backward compatibility */ }
   1b860:	08 95       	ret

0001b862 <EthernetServer::write(unsigned char)>:
_ZN14EthernetServer5writeEh():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:71

  return EthernetClient(MAX_SOCK_NUM);
}

size_t EthernetServer::write(uint8_t b) 
{
   1b862:	cf 93       	push	r28
   1b864:	df 93       	push	r29
   1b866:	1f 92       	push	r1
   1b868:	cd b7       	in	r28, 0x3d	; 61
   1b86a:	de b7       	in	r29, 0x3e	; 62
   1b86c:	69 83       	std	Y+1, r22	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:72
  return write(&b, 1);
   1b86e:	dc 01       	movw	r26, r24
   1b870:	ed 91       	ld	r30, X+
   1b872:	fc 91       	ld	r31, X
   1b874:	02 80       	ldd	r0, Z+2	; 0x02
   1b876:	f3 81       	ldd	r31, Z+3	; 0x03
   1b878:	e0 2d       	mov	r30, r0
   1b87a:	41 e0       	ldi	r20, 0x01	; 1
   1b87c:	50 e0       	ldi	r21, 0x00	; 0
   1b87e:	be 01       	movw	r22, r28
   1b880:	6f 5f       	subi	r22, 0xFF	; 255
   1b882:	7f 4f       	sbci	r23, 0xFF	; 255
   1b884:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:73
}
   1b886:	0f 90       	pop	r0
   1b888:	df 91       	pop	r29
   1b88a:	cf 91       	pop	r28
   1b88c:	08 95       	ret

0001b88e <EthernetServer::begin()>:
_ZN14EthernetServer5beginEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:17
{
  _port = port;
}

void EthernetServer::begin()
{
   1b88e:	ef 92       	push	r14
   1b890:	ff 92       	push	r15
   1b892:	0f 93       	push	r16
   1b894:	1f 93       	push	r17
   1b896:	cf 93       	push	r28
   1b898:	df 93       	push	r29
   1b89a:	cd b7       	in	r28, 0x3d	; 61
   1b89c:	de b7       	in	r29, 0x3e	; 62
   1b89e:	2d 97       	sbiw	r28, 0x0d	; 13
   1b8a0:	0f b6       	in	r0, 0x3f	; 63
   1b8a2:	f8 94       	cli
   1b8a4:	de bf       	out	0x3e, r29	; 62
   1b8a6:	0f be       	out	0x3f, r0	; 63
   1b8a8:	cd bf       	out	0x3d, r28	; 61
   1b8aa:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:18
  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
   1b8ac:	10 e0       	ldi	r17, 0x00	; 0
   1b8ae:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:19
    EthernetClient client(sock);
   1b8b0:	60 2f       	mov	r22, r16
   1b8b2:	ce 01       	movw	r24, r28
   1b8b4:	01 96       	adiw	r24, 0x01	; 1
   1b8b6:	0e 94 3e db 	call	0x1b67c	; 0x1b67c <EthernetClient::EthernetClient(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:20
    if (client.status() == SnSR::CLOSED) {
   1b8ba:	ce 01       	movw	r24, r28
   1b8bc:	01 96       	adiw	r24, 0x01	; 1
   1b8be:	0e 94 4f db 	call	0x1b69e	; 0x1b69e <EthernetClient::status()>
   1b8c2:	81 11       	cpse	r24, r1
   1b8c4:	22 c0       	rjmp	.+68     	; 0x1b90a <EthernetServer::begin()+0x7c>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:21
      socket(sock, SnMR::TCP, _port, 0);
   1b8c6:	f7 01       	movw	r30, r14
   1b8c8:	44 81       	ldd	r20, Z+4	; 0x04
   1b8ca:	55 81       	ldd	r21, Z+5	; 0x05
   1b8cc:	20 e0       	ldi	r18, 0x00	; 0
   1b8ce:	61 e0       	ldi	r22, 0x01	; 1
   1b8d0:	80 2f       	mov	r24, r16
   1b8d2:	0e 94 0c e0 	call	0x1c018	; 0x1c018 <socket(unsigned char, unsigned char, unsigned int, unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:22
      listen(sock);
   1b8d6:	80 2f       	mov	r24, r16
   1b8d8:	0e 94 42 e0 	call	0x1c084	; 0x1c084 <listen(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:23
      EthernetClass::_server_port[sock] = _port;
   1b8dc:	f7 01       	movw	r30, r14
   1b8de:	84 81       	ldd	r24, Z+4	; 0x04
   1b8e0:	95 81       	ldd	r25, Z+5	; 0x05
   1b8e2:	00 0f       	add	r16, r16
   1b8e4:	11 1f       	adc	r17, r17
   1b8e6:	f8 01       	movw	r30, r16
   1b8e8:	e0 5c       	subi	r30, 0xC0	; 192
   1b8ea:	fd 4e       	sbci	r31, 0xED	; 237
   1b8ec:	91 83       	std	Z+1, r25	; 0x01
   1b8ee:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:27
      break;
    }
  }  
}
   1b8f0:	2d 96       	adiw	r28, 0x0d	; 13
   1b8f2:	0f b6       	in	r0, 0x3f	; 63
   1b8f4:	f8 94       	cli
   1b8f6:	de bf       	out	0x3e, r29	; 62
   1b8f8:	0f be       	out	0x3f, r0	; 63
   1b8fa:	cd bf       	out	0x3d, r28	; 61
   1b8fc:	df 91       	pop	r29
   1b8fe:	cf 91       	pop	r28
   1b900:	1f 91       	pop	r17
   1b902:	0f 91       	pop	r16
   1b904:	ff 90       	pop	r15
   1b906:	ef 90       	pop	r14
   1b908:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:18
  _port = port;
}

void EthernetServer::begin()
{
  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
   1b90a:	0f 5f       	subi	r16, 0xFF	; 255
   1b90c:	1f 4f       	sbci	r17, 0xFF	; 255
   1b90e:	08 30       	cpi	r16, 0x08	; 8
   1b910:	11 05       	cpc	r17, r1
   1b912:	71 f6       	brne	.-100    	; 0x1b8b0 <EthernetServer::begin()+0x22>
   1b914:	ed cf       	rjmp	.-38     	; 0x1b8f0 <EthernetServer::begin()+0x62>

0001b916 <EthernetServer::EthernetServer(unsigned int)>:
_ZN14EthernetServerC2Ej():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:11

#include "Ethernet2.h"
#include "EthernetClient.h"
#include "EthernetServer.h"

EthernetServer::EthernetServer(uint16_t port)
   1b916:	fc 01       	movw	r30, r24
_ZN5PrintC4Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
   1b918:	13 82       	std	Z+3, r1	; 0x03
   1b91a:	12 82       	std	Z+2, r1	; 0x02
_ZN14EthernetServerC2Ej():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:11
   1b91c:	8f e5       	ldi	r24, 0x5F	; 95
   1b91e:	99 e0       	ldi	r25, 0x09	; 9
   1b920:	91 83       	std	Z+1, r25	; 0x01
   1b922:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:13
{
  _port = port;
   1b924:	75 83       	std	Z+5, r23	; 0x05
   1b926:	64 83       	std	Z+4, r22	; 0x04
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:14
}
   1b928:	08 95       	ret

0001b92a <EthernetServer::accept()>:
_ZN14EthernetServer6acceptEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:30
    }
  }  
}

void EthernetServer::accept()
{
   1b92a:	af 92       	push	r10
   1b92c:	bf 92       	push	r11
   1b92e:	cf 92       	push	r12
   1b930:	df 92       	push	r13
   1b932:	ef 92       	push	r14
   1b934:	ff 92       	push	r15
   1b936:	1f 93       	push	r17
   1b938:	cf 93       	push	r28
   1b93a:	df 93       	push	r29
   1b93c:	cd b7       	in	r28, 0x3d	; 61
   1b93e:	de b7       	in	r29, 0x3e	; 62
   1b940:	2d 97       	sbiw	r28, 0x0d	; 13
   1b942:	0f b6       	in	r0, 0x3f	; 63
   1b944:	f8 94       	cli
   1b946:	de bf       	out	0x3e, r29	; 62
   1b948:	0f be       	out	0x3f, r0	; 63
   1b94a:	cd bf       	out	0x3d, r28	; 61
   1b94c:	7c 01       	movw	r14, r24
   1b94e:	90 e4       	ldi	r25, 0x40	; 64
   1b950:	a9 2e       	mov	r10, r25
   1b952:	92 e1       	ldi	r25, 0x12	; 18
   1b954:	b9 2e       	mov	r11, r25
   1b956:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:31
  int listening = 0;
   1b958:	d1 2c       	mov	r13, r1
   1b95a:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:34

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);
   1b95c:	61 2f       	mov	r22, r17
   1b95e:	ce 01       	movw	r24, r28
   1b960:	01 96       	adiw	r24, 0x01	; 1
   1b962:	0e 94 3e db 	call	0x1b67c	; 0x1b67c <EthernetClient::EthernetClient(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:36

    if (EthernetClass::_server_port[sock] == _port) {
   1b966:	d5 01       	movw	r26, r10
   1b968:	2d 91       	ld	r18, X+
   1b96a:	3d 91       	ld	r19, X+
   1b96c:	5d 01       	movw	r10, r26
   1b96e:	f7 01       	movw	r30, r14
   1b970:	84 81       	ldd	r24, Z+4	; 0x04
   1b972:	95 81       	ldd	r25, Z+5	; 0x05
   1b974:	28 17       	cp	r18, r24
   1b976:	39 07       	cpc	r19, r25
   1b978:	b1 f4       	brne	.+44     	; 0x1b9a6 <EthernetServer::accept()+0x7c>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:37
      if (client.status() == SnSR::LISTEN) {
   1b97a:	ce 01       	movw	r24, r28
   1b97c:	01 96       	adiw	r24, 0x01	; 1
   1b97e:	0e 94 4f db 	call	0x1b69e	; 0x1b69e <EthernetClient::status()>
   1b982:	84 31       	cpi	r24, 0x14	; 20
   1b984:	69 f1       	breq	.+90     	; 0x1b9e0 <EthernetServer::accept()+0xb6>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:40
        listening = 1;
      } 
      else if (client.status() == SnSR::CLOSE_WAIT && !client.available()) {
   1b986:	ce 01       	movw	r24, r28
   1b988:	01 96       	adiw	r24, 0x01	; 1
   1b98a:	0e 94 4f db 	call	0x1b69e	; 0x1b69e <EthernetClient::status()>
   1b98e:	8c 31       	cpi	r24, 0x1C	; 28
   1b990:	51 f4       	brne	.+20     	; 0x1b9a6 <EthernetServer::accept()+0x7c>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:40 (discriminator 1)
   1b992:	ce 01       	movw	r24, r28
   1b994:	01 96       	adiw	r24, 0x01	; 1
   1b996:	0e 94 dc da 	call	0x1b5b8	; 0x1b5b8 <EthernetClient::available()>
   1b99a:	89 2b       	or	r24, r25
   1b99c:	21 f4       	brne	.+8      	; 0x1b9a6 <EthernetServer::accept()+0x7c>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:41
        client.stop();
   1b99e:	ce 01       	movw	r24, r28
   1b9a0:	01 96       	adiw	r24, 0x01	; 1
   1b9a2:	0e 94 c2 db 	call	0x1b784	; 0x1b784 <EthernetClient::stop()>
   1b9a6:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:33 (discriminator 1)

void EthernetServer::accept()
{
  int listening = 0;

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
   1b9a8:	18 30       	cpi	r17, 0x08	; 8
   1b9aa:	c1 f6       	brne	.-80     	; 0x1b95c <EthernetServer::accept()+0x32>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:46
        client.stop();
      }
    } 
  }

  if (!listening) {
   1b9ac:	cd 28       	or	r12, r13
   1b9ae:	41 f4       	brne	.+16     	; 0x1b9c0 <EthernetServer::accept()+0x96>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:47
    begin();
   1b9b0:	d7 01       	movw	r26, r14
   1b9b2:	ed 91       	ld	r30, X+
   1b9b4:	fc 91       	ld	r31, X
   1b9b6:	00 84       	ldd	r0, Z+8	; 0x08
   1b9b8:	f1 85       	ldd	r31, Z+9	; 0x09
   1b9ba:	e0 2d       	mov	r30, r0
   1b9bc:	c7 01       	movw	r24, r14
   1b9be:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:49
  }
}
   1b9c0:	2d 96       	adiw	r28, 0x0d	; 13
   1b9c2:	0f b6       	in	r0, 0x3f	; 63
   1b9c4:	f8 94       	cli
   1b9c6:	de bf       	out	0x3e, r29	; 62
   1b9c8:	0f be       	out	0x3f, r0	; 63
   1b9ca:	cd bf       	out	0x3d, r28	; 61
   1b9cc:	df 91       	pop	r29
   1b9ce:	cf 91       	pop	r28
   1b9d0:	1f 91       	pop	r17
   1b9d2:	ff 90       	pop	r15
   1b9d4:	ef 90       	pop	r14
   1b9d6:	df 90       	pop	r13
   1b9d8:	cf 90       	pop	r12
   1b9da:	bf 90       	pop	r11
   1b9dc:	af 90       	pop	r10
   1b9de:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:38
  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);

    if (EthernetClass::_server_port[sock] == _port) {
      if (client.status() == SnSR::LISTEN) {
        listening = 1;
   1b9e0:	cc 24       	eor	r12, r12
   1b9e2:	c3 94       	inc	r12
   1b9e4:	d1 2c       	mov	r13, r1
   1b9e6:	df cf       	rjmp	.-66     	; 0x1b9a6 <EthernetServer::accept()+0x7c>

0001b9e8 <EthernetServer::write(unsigned char const*, unsigned int)>:
_ZN14EthernetServer5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:76
{
  return write(&b, 1);
}

size_t EthernetServer::write(const uint8_t *buffer, size_t size) 
{
   1b9e8:	7f 92       	push	r7
   1b9ea:	8f 92       	push	r8
   1b9ec:	9f 92       	push	r9
   1b9ee:	af 92       	push	r10
   1b9f0:	bf 92       	push	r11
   1b9f2:	cf 92       	push	r12
   1b9f4:	df 92       	push	r13
   1b9f6:	ef 92       	push	r14
   1b9f8:	ff 92       	push	r15
   1b9fa:	0f 93       	push	r16
   1b9fc:	1f 93       	push	r17
   1b9fe:	cf 93       	push	r28
   1ba00:	df 93       	push	r29
   1ba02:	cd b7       	in	r28, 0x3d	; 61
   1ba04:	de b7       	in	r29, 0x3e	; 62
   1ba06:	2d 97       	sbiw	r28, 0x0d	; 13
   1ba08:	0f b6       	in	r0, 0x3f	; 63
   1ba0a:	f8 94       	cli
   1ba0c:	de bf       	out	0x3e, r29	; 62
   1ba0e:	0f be       	out	0x3f, r0	; 63
   1ba10:	cd bf       	out	0x3d, r28	; 61
   1ba12:	6c 01       	movw	r12, r24
   1ba14:	5b 01       	movw	r10, r22
   1ba16:	4a 01       	movw	r8, r20
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:79
  size_t n = 0;
  
  accept();
   1ba18:	0e 94 95 dc 	call	0x1b92a	; 0x1b92a <EthernetServer::accept()>
   1ba1c:	80 e4       	ldi	r24, 0x40	; 64
   1ba1e:	e8 2e       	mov	r14, r24
   1ba20:	82 e1       	ldi	r24, 0x12	; 18
   1ba22:	f8 2e       	mov	r15, r24
   1ba24:	71 2c       	mov	r7, r1
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:77
  return write(&b, 1);
}

size_t EthernetServer::write(const uint8_t *buffer, size_t size) 
{
  size_t n = 0;
   1ba26:	10 e0       	ldi	r17, 0x00	; 0
   1ba28:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:82
  
  accept();

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);
   1ba2a:	67 2d       	mov	r22, r7
   1ba2c:	ce 01       	movw	r24, r28
   1ba2e:	01 96       	adiw	r24, 0x01	; 1
   1ba30:	0e 94 3e db 	call	0x1b67c	; 0x1b67c <EthernetClient::EthernetClient(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:84

    if (EthernetClass::_server_port[sock] == _port &&
   1ba34:	f7 01       	movw	r30, r14
   1ba36:	21 91       	ld	r18, Z+
   1ba38:	31 91       	ld	r19, Z+
   1ba3a:	7f 01       	movw	r14, r30
   1ba3c:	f6 01       	movw	r30, r12
   1ba3e:	84 81       	ldd	r24, Z+4	; 0x04
   1ba40:	95 81       	ldd	r25, Z+5	; 0x05
   1ba42:	28 17       	cp	r18, r24
   1ba44:	39 07       	cpc	r19, r25
   1ba46:	71 f4       	brne	.+28     	; 0x1ba64 <EthernetServer::write(unsigned char const*, unsigned int)+0x7c>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:85 (discriminator 1)
      client.status() == SnSR::ESTABLISHED) {
   1ba48:	ce 01       	movw	r24, r28
   1ba4a:	01 96       	adiw	r24, 0x01	; 1
   1ba4c:	0e 94 4f db 	call	0x1b69e	; 0x1b69e <EthernetClient::status()>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:84 (discriminator 1)
  accept();

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);

    if (EthernetClass::_server_port[sock] == _port &&
   1ba50:	87 31       	cpi	r24, 0x17	; 23
   1ba52:	41 f4       	brne	.+16     	; 0x1ba64 <EthernetServer::write(unsigned char const*, unsigned int)+0x7c>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:86
      client.status() == SnSR::ESTABLISHED) {
      n += client.write(buffer, size);
   1ba54:	a4 01       	movw	r20, r8
   1ba56:	b5 01       	movw	r22, r10
   1ba58:	ce 01       	movw	r24, r28
   1ba5a:	01 96       	adiw	r24, 0x01	; 1
   1ba5c:	0e 94 c0 da 	call	0x1b580	; 0x1b580 <EthernetClient::write(unsigned char const*, unsigned int)>
   1ba60:	08 0f       	add	r16, r24
   1ba62:	19 1f       	adc	r17, r25
   1ba64:	73 94       	inc	r7
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:81 (discriminator 2)
{
  size_t n = 0;
  
  accept();

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
   1ba66:	f8 e0       	ldi	r31, 0x08	; 8
   1ba68:	7f 12       	cpse	r7, r31
   1ba6a:	df cf       	rjmp	.-66     	; 0x1ba2a <EthernetServer::write(unsigned char const*, unsigned int)+0x42>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:91
      n += client.write(buffer, size);
    }
  }
  
  return n;
}
   1ba6c:	c8 01       	movw	r24, r16
   1ba6e:	2d 96       	adiw	r28, 0x0d	; 13
   1ba70:	0f b6       	in	r0, 0x3f	; 63
   1ba72:	f8 94       	cli
   1ba74:	de bf       	out	0x3e, r29	; 62
   1ba76:	0f be       	out	0x3f, r0	; 63
   1ba78:	cd bf       	out	0x3d, r28	; 61
   1ba7a:	df 91       	pop	r29
   1ba7c:	cf 91       	pop	r28
   1ba7e:	1f 91       	pop	r17
   1ba80:	0f 91       	pop	r16
   1ba82:	ff 90       	pop	r15
   1ba84:	ef 90       	pop	r14
   1ba86:	df 90       	pop	r13
   1ba88:	cf 90       	pop	r12
   1ba8a:	bf 90       	pop	r11
   1ba8c:	af 90       	pop	r10
   1ba8e:	9f 90       	pop	r9
   1ba90:	8f 90       	pop	r8
   1ba92:	7f 90       	pop	r7
   1ba94:	08 95       	ret

0001ba96 <EthernetServer::available()>:
_ZN14EthernetServer9availableEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:52
    begin();
  }
}

EthernetClient EthernetServer::available()
{
   1ba96:	af 92       	push	r10
   1ba98:	bf 92       	push	r11
   1ba9a:	cf 92       	push	r12
   1ba9c:	df 92       	push	r13
   1ba9e:	ff 92       	push	r15
   1baa0:	0f 93       	push	r16
   1baa2:	1f 93       	push	r17
   1baa4:	cf 93       	push	r28
   1baa6:	df 93       	push	r29
   1baa8:	cd b7       	in	r28, 0x3d	; 61
   1baaa:	de b7       	in	r29, 0x3e	; 62
   1baac:	2d 97       	sbiw	r28, 0x0d	; 13
   1baae:	0f b6       	in	r0, 0x3f	; 63
   1bab0:	f8 94       	cli
   1bab2:	de bf       	out	0x3e, r29	; 62
   1bab4:	0f be       	out	0x3f, r0	; 63
   1bab6:	cd bf       	out	0x3d, r28	; 61
   1bab8:	8c 01       	movw	r16, r24
   1baba:	5b 01       	movw	r10, r22
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:53
  accept();
   1babc:	cb 01       	movw	r24, r22
   1babe:	0e 94 95 dc 	call	0x1b92a	; 0x1b92a <EthernetServer::accept()>
   1bac2:	80 e4       	ldi	r24, 0x40	; 64
   1bac4:	c8 2e       	mov	r12, r24
   1bac6:	82 e1       	ldi	r24, 0x12	; 18
   1bac8:	d8 2e       	mov	r13, r24
   1baca:	f1 2c       	mov	r15, r1
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:56

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);
   1bacc:	6f 2d       	mov	r22, r15
   1bace:	ce 01       	movw	r24, r28
   1bad0:	01 96       	adiw	r24, 0x01	; 1
   1bad2:	0e 94 3e db 	call	0x1b67c	; 0x1b67c <EthernetClient::EthernetClient(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:57
    if (EthernetClass::_server_port[sock] == _port &&
   1bad6:	f6 01       	movw	r30, r12
   1bad8:	21 91       	ld	r18, Z+
   1bada:	31 91       	ld	r19, Z+
   1badc:	6f 01       	movw	r12, r30
   1bade:	f5 01       	movw	r30, r10
   1bae0:	84 81       	ldd	r24, Z+4	; 0x04
   1bae2:	95 81       	ldd	r25, Z+5	; 0x05
   1bae4:	28 17       	cp	r18, r24
   1bae6:	39 07       	cpc	r19, r25
   1bae8:	f1 f5       	brne	.+124    	; 0x1bb66 <EthernetServer::available()+0xd0>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:58 (discriminator 1)
        (client.status() == SnSR::ESTABLISHED ||
   1baea:	ce 01       	movw	r24, r28
   1baec:	01 96       	adiw	r24, 0x01	; 1
   1baee:	0e 94 4f db 	call	0x1b69e	; 0x1b69e <EthernetClient::status()>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:57 (discriminator 1)
{
  accept();

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);
    if (EthernetClass::_server_port[sock] == _port &&
   1baf2:	87 31       	cpi	r24, 0x17	; 23
   1baf4:	91 f5       	brne	.+100    	; 0x1bb5a <EthernetServer::available()+0xc4>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:60
        (client.status() == SnSR::ESTABLISHED ||
         client.status() == SnSR::CLOSE_WAIT)) {
      if (client.available()) {
   1baf6:	ce 01       	movw	r24, r28
   1baf8:	01 96       	adiw	r24, 0x01	; 1
   1bafa:	0e 94 dc da 	call	0x1b5b8	; 0x1b5b8 <EthernetClient::available()>
   1bafe:	89 2b       	or	r24, r25
   1bb00:	91 f1       	breq	.+100    	; 0x1bb66 <EthernetServer::available()+0xd0>
_ZN5PrintC4EOS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:37
#ifdef BIN // Prevent warnings if BIN is previously defined in "iotnx4.h" or similar
#undef BIN
#endif
#define BIN 2

class Print
   1bb02:	8b 81       	ldd	r24, Y+3	; 0x03
   1bb04:	9c 81       	ldd	r25, Y+4	; 0x04
   1bb06:	f8 01       	movw	r30, r16
   1bb08:	93 83       	std	Z+3, r25	; 0x03
   1bb0a:	82 83       	std	Z+2, r24	; 0x02
_ZN6StreamC4EOS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:49
    SKIP_WHITESPACE // Only tabs, spaces, line feeds & carriage returns are skipped.
};

#define NO_IGNORE_CHAR  '\x01' // a char not found in a valid ASCII numeric field

class Stream : public Print
   1bb0c:	8d 81       	ldd	r24, Y+5	; 0x05
   1bb0e:	9e 81       	ldd	r25, Y+6	; 0x06
   1bb10:	af 81       	ldd	r26, Y+7	; 0x07
   1bb12:	b8 85       	ldd	r27, Y+8	; 0x08
   1bb14:	84 83       	std	Z+4, r24	; 0x04
   1bb16:	95 83       	std	Z+5, r25	; 0x05
   1bb18:	a6 83       	std	Z+6, r26	; 0x06
   1bb1a:	b7 83       	std	Z+7, r27	; 0x07
   1bb1c:	89 85       	ldd	r24, Y+9	; 0x09
   1bb1e:	9a 85       	ldd	r25, Y+10	; 0x0a
   1bb20:	ab 85       	ldd	r26, Y+11	; 0x0b
   1bb22:	bc 85       	ldd	r27, Y+12	; 0x0c
   1bb24:	80 87       	std	Z+8, r24	; 0x08
   1bb26:	91 87       	std	Z+9, r25	; 0x09
   1bb28:	a2 87       	std	Z+10, r26	; 0x0a
   1bb2a:	b3 87       	std	Z+11, r27	; 0x0b
_ZN14EthernetClientC4EOS_():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.h:8
#include "Arduino.h"	
#include "Print.h"
#include "Client.h"
#include "IPAddress.h"

class EthernetClient : public Client {
   1bb2c:	8d e3       	ldi	r24, 0x3D	; 61
   1bb2e:	99 e0       	ldi	r25, 0x09	; 9
   1bb30:	91 83       	std	Z+1, r25	; 0x01
   1bb32:	80 83       	st	Z, r24
   1bb34:	8d 85       	ldd	r24, Y+13	; 0x0d
   1bb36:	84 87       	std	Z+12, r24	; 0x0c
_ZN14EthernetServer9availableEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:68
      }
    }
  }

  return EthernetClient(MAX_SOCK_NUM);
}
   1bb38:	c8 01       	movw	r24, r16
   1bb3a:	2d 96       	adiw	r28, 0x0d	; 13
   1bb3c:	0f b6       	in	r0, 0x3f	; 63
   1bb3e:	f8 94       	cli
   1bb40:	de bf       	out	0x3e, r29	; 62
   1bb42:	0f be       	out	0x3f, r0	; 63
   1bb44:	cd bf       	out	0x3d, r28	; 61
   1bb46:	df 91       	pop	r29
   1bb48:	cf 91       	pop	r28
   1bb4a:	1f 91       	pop	r17
   1bb4c:	0f 91       	pop	r16
   1bb4e:	ff 90       	pop	r15
   1bb50:	df 90       	pop	r13
   1bb52:	cf 90       	pop	r12
   1bb54:	bf 90       	pop	r11
   1bb56:	af 90       	pop	r10
   1bb58:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:59

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);
    if (EthernetClass::_server_port[sock] == _port &&
        (client.status() == SnSR::ESTABLISHED ||
         client.status() == SnSR::CLOSE_WAIT)) {
   1bb5a:	ce 01       	movw	r24, r28
   1bb5c:	01 96       	adiw	r24, 0x01	; 1
   1bb5e:	0e 94 4f db 	call	0x1b69e	; 0x1b69e <EthernetClient::status()>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:58
  accept();

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);
    if (EthernetClass::_server_port[sock] == _port &&
        (client.status() == SnSR::ESTABLISHED ||
   1bb62:	8c 31       	cpi	r24, 0x1C	; 28
   1bb64:	41 f2       	breq	.-112    	; 0x1baf6 <EthernetServer::available()+0x60>
   1bb66:	f3 94       	inc	r15
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:55

EthernetClient EthernetServer::available()
{
  accept();

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
   1bb68:	f8 e0       	ldi	r31, 0x08	; 8
   1bb6a:	ff 12       	cpse	r15, r31
   1bb6c:	af cf       	rjmp	.-162    	; 0x1bacc <EthernetServer::available()+0x36>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:67
        return client;
      }
    }
  }

  return EthernetClient(MAX_SOCK_NUM);
   1bb6e:	68 e0       	ldi	r22, 0x08	; 8
   1bb70:	c8 01       	movw	r24, r16
   1bb72:	0e 94 3e db 	call	0x1b67c	; 0x1b67c <EthernetClient::EthernetClient(unsigned char)>
   1bb76:	e0 cf       	rjmp	.-64     	; 0x1bb38 <EthernetServer::available()+0xa2>

0001bb78 <_GLOBAL__sub_I__ZN14EthernetServerC2Ej>:
_GLOBAL__sub_I__ZN14EthernetServerC2Ej():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:91
      n += client.write(buffer, size);
    }
  }
  
  return n;
}
   1bb78:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
   1bb7a:	00 e0       	ldi	r16, 0x00	; 0
   1bb7c:	20 e0       	ldi	r18, 0x00	; 0
   1bb7e:	40 e0       	ldi	r20, 0x00	; 0
   1bb80:	60 e0       	ldi	r22, 0x00	; 0
   1bb82:	8c e5       	ldi	r24, 0x5C	; 92
   1bb84:	92 e1       	ldi	r25, 0x12	; 18
   1bb86:	0f 94 7a 12 	call	0x224f4	; 0x224f4 <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_GLOBAL__sub_I__ZN14EthernetServerC2Ej():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:91
   1bb8a:	0f 91       	pop	r16
   1bb8c:	08 95       	ret

0001bb8e <UDP::beginMulticast(IPAddress, unsigned int)>:
_ZN3UDP14beginMulticastE9IPAddressj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Udp.h:45

class UDP : public Stream {

public:
  virtual uint8_t begin(uint16_t) =0;  // initialize, start listening on specified port. Returns 1 if successful, 0 if there are no sockets available to use
  virtual uint8_t beginMulticast(IPAddress, uint16_t) { return 0; }  // initialize, start listening on specified multicast IP address and port. Returns 1 if successful, 0 on failure
   1bb8e:	80 e0       	ldi	r24, 0x00	; 0
   1bb90:	08 95       	ret

0001bb92 <EthernetUDP::read(char*, unsigned int)>:
_ZN11EthernetUDP4readEPcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.h:94
  // Read up to len bytes from the current packet and place them into buffer
  // Returns the number of bytes read, or 0 if none are available
  virtual int read(unsigned char* buffer, size_t len);
  // Read up to len characters from the current packet and place them into buffer
  // Returns the number of characters read, or 0 if none are available
  virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   1bb92:	dc 01       	movw	r26, r24
   1bb94:	ed 91       	ld	r30, X+
   1bb96:	fc 91       	ld	r31, X
   1bb98:	04 8c       	ldd	r0, Z+28	; 0x1c
   1bb9a:	f5 8d       	ldd	r31, Z+29	; 0x1d
   1bb9c:	e0 2d       	mov	r30, r0
   1bb9e:	19 94       	eijmp

0001bba0 <EthernetUDP::remoteIP()>:
_ZN9IPAddressC4ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
   1bba0:	2b ed       	ldi	r18, 0xDB	; 219
   1bba2:	39 e0       	ldi	r19, 0x09	; 9
   1bba4:	fc 01       	movw	r30, r24
   1bba6:	31 83       	std	Z+1, r19	; 0x01
   1bba8:	20 83       	st	Z, r18
   1bbaa:	fb 01       	movw	r30, r22
   1bbac:	41 89       	ldd	r20, Z+17	; 0x11
   1bbae:	52 89       	ldd	r21, Z+18	; 0x12
   1bbb0:	63 89       	ldd	r22, Z+19	; 0x13
   1bbb2:	74 89       	ldd	r23, Z+20	; 0x14
   1bbb4:	fc 01       	movw	r30, r24
   1bbb6:	42 83       	std	Z+2, r20	; 0x02
   1bbb8:	53 83       	std	Z+3, r21	; 0x03
   1bbba:	64 83       	std	Z+4, r22	; 0x04
   1bbbc:	75 83       	std	Z+5, r23	; 0x05
_ZN11EthernetUDP8remoteIPEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.h:100
  // Return the next byte from the current packet without moving on to the next byte
  virtual int peek();
  virtual void flush();	// Finish reading the current packet

  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() { return _remoteIP; };
   1bbbe:	08 95       	ret

0001bbc0 <EthernetUDP::remotePort()>:
_ZN11EthernetUDP10remotePortEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.h:102
  // Return the port of the host who sent the current incoming packet
  virtual uint16_t remotePort() { return _remotePort; };
   1bbc0:	fc 01       	movw	r30, r24
   1bbc2:	85 89       	ldd	r24, Z+21	; 0x15
   1bbc4:	96 89       	ldd	r25, Z+22	; 0x16
   1bbc6:	08 95       	ret

0001bbc8 <EthernetUDP::available()>:
_ZN11EthernetUDP9availableEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:69

/* return number of bytes available in the current packet,
   will return zero if parsePacket hasn't been called yet */
int EthernetUDP::available() {
  return _remaining;
}
   1bbc8:	fc 01       	movw	r30, r24
   1bbca:	81 8d       	ldd	r24, Z+25	; 0x19
   1bbcc:	92 8d       	ldd	r25, Z+26	; 0x1a
   1bbce:	08 95       	ret

0001bbd0 <EthernetUDP::write(unsigned char)>:
_ZN11EthernetUDP5writeEh():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:111
{
  return sendUDP(_sock);
}

size_t EthernetUDP::write(uint8_t byte)
{
   1bbd0:	cf 93       	push	r28
   1bbd2:	df 93       	push	r29
   1bbd4:	1f 92       	push	r1
   1bbd6:	cd b7       	in	r28, 0x3d	; 61
   1bbd8:	de b7       	in	r29, 0x3e	; 62
   1bbda:	69 83       	std	Y+1, r22	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:112
  return write(&byte, 1);
   1bbdc:	dc 01       	movw	r26, r24
   1bbde:	ed 91       	ld	r30, X+
   1bbe0:	fc 91       	ld	r31, X
   1bbe2:	02 80       	ldd	r0, Z+2	; 0x02
   1bbe4:	f3 81       	ldd	r31, Z+3	; 0x03
   1bbe6:	e0 2d       	mov	r30, r0
   1bbe8:	41 e0       	ldi	r20, 0x01	; 1
   1bbea:	50 e0       	ldi	r21, 0x00	; 0
   1bbec:	be 01       	movw	r22, r28
   1bbee:	6f 5f       	subi	r22, 0xFF	; 255
   1bbf0:	7f 4f       	sbci	r23, 0xFF	; 255
   1bbf2:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:113
}
   1bbf4:	0f 90       	pop	r0
   1bbf6:	df 91       	pop	r29
   1bbf8:	cf 91       	pop	r28
   1bbfa:	08 95       	ret

0001bbfc <EthernetUDP::flush()>:
_ZN11EthernetUDP5flushEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:212
  ::peek(_sock, &b);
  return b;
}

void EthernetUDP::flush()
{
   1bbfc:	cf 93       	push	r28
   1bbfe:	df 93       	push	r29
   1bc00:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:217
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5500 always behaves :)

  while (_remaining)
   1bc02:	89 8d       	ldd	r24, Y+25	; 0x19
   1bc04:	9a 8d       	ldd	r25, Y+26	; 0x1a
   1bc06:	89 2b       	or	r24, r25
   1bc08:	41 f0       	breq	.+16     	; 0x1bc1a <EthernetUDP::flush()+0x1e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:219
  {
    read();
   1bc0a:	e8 81       	ld	r30, Y
   1bc0c:	f9 81       	ldd	r31, Y+1	; 0x01
   1bc0e:	02 84       	ldd	r0, Z+10	; 0x0a
   1bc10:	f3 85       	ldd	r31, Z+11	; 0x0b
   1bc12:	e0 2d       	mov	r30, r0
   1bc14:	ce 01       	movw	r24, r28
   1bc16:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:217
{
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5500 always behaves :)

  while (_remaining)
   1bc18:	f4 cf       	rjmp	.-24     	; 0x1bc02 <EthernetUDP::flush()+0x6>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:221
  {
    read();
  }
}
   1bc1a:	df 91       	pop	r29
   1bc1c:	cf 91       	pop	r28
   1bc1e:	08 95       	ret

0001bc20 <EthernetUDP::stop()>:
_ZN11EthernetUDP4stopEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:73
  return _remaining;
}

/* Release any resources being used by this EthernetUDP instance */
void EthernetUDP::stop()
{
   1bc20:	cf 93       	push	r28
   1bc22:	df 93       	push	r29
   1bc24:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:74
  if (_sock == MAX_SOCK_NUM)
   1bc26:	8c 85       	ldd	r24, Y+12	; 0x0c
   1bc28:	88 30       	cpi	r24, 0x08	; 8
   1bc2a:	61 f0       	breq	.+24     	; 0x1bc44 <EthernetUDP::stop()+0x24>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:77
    return;

  close(_sock);
   1bc2c:	0e 94 fe df 	call	0x1bffc	; 0x1bffc <close(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:79

  EthernetClass::_server_port[_sock] = 0;
   1bc30:	ec 85       	ldd	r30, Y+12	; 0x0c
   1bc32:	f0 e0       	ldi	r31, 0x00	; 0
   1bc34:	ee 0f       	add	r30, r30
   1bc36:	ff 1f       	adc	r31, r31
   1bc38:	e0 5c       	subi	r30, 0xC0	; 192
   1bc3a:	fd 4e       	sbci	r31, 0xED	; 237
   1bc3c:	11 82       	std	Z+1, r1	; 0x01
   1bc3e:	10 82       	st	Z, r1
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:80
  _sock = MAX_SOCK_NUM;
   1bc40:	88 e0       	ldi	r24, 0x08	; 8
   1bc42:	8c 87       	std	Y+12, r24	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:81
}
   1bc44:	df 91       	pop	r29
   1bc46:	cf 91       	pop	r28
   1bc48:	08 95       	ret

0001bc4a <EthernetUDP::beginPacket(IPAddress, unsigned int)>:
_ZN11EthernetUDP11beginPacketE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:101
  }
}

int EthernetUDP::beginPacket(IPAddress ip, uint16_t port)
{
  _offset = 0;
   1bc4a:	fc 01       	movw	r30, r24
   1bc4c:	10 8e       	std	Z+24, r1	; 0x18
   1bc4e:	17 8a       	std	Z+23, r1	; 0x17
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
   1bc50:	6e 5f       	subi	r22, 0xFE	; 254
   1bc52:	7f 4f       	sbci	r23, 0xFF	; 255
_ZN11EthernetUDP11beginPacketE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:102
  return startUDP(_sock, rawIPAddress(ip), port);
   1bc54:	84 85       	ldd	r24, Z+12	; 0x0c
   1bc56:	0c 94 67 e1 	jmp	0x1c2ce	; 0x1c2ce <startUDP(unsigned char, unsigned char*, unsigned int)>

0001bc5a <EthernetUDP::endPacket()>:
_ZN11EthernetUDP9endPacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:107
}

int EthernetUDP::endPacket()
{
  return sendUDP(_sock);
   1bc5a:	fc 01       	movw	r30, r24
   1bc5c:	84 85       	ldd	r24, Z+12	; 0x0c
   1bc5e:	0c 94 8c e1 	jmp	0x1c318	; 0x1c318 <sendUDP(unsigned char)>

0001bc62 <EthernetUDP::write(unsigned char const*, unsigned int)>:
_ZN11EthernetUDP5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:116
{
  return write(&byte, 1);
}

size_t EthernetUDP::write(const uint8_t *buffer, size_t size)
{
   1bc62:	cf 93       	push	r28
   1bc64:	df 93       	push	r29
   1bc66:	ec 01       	movw	r28, r24
   1bc68:	9a 01       	movw	r18, r20
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:117
  uint16_t bytes_written = bufferData(_sock, _offset, buffer, size);
   1bc6a:	8f 89       	ldd	r24, Y+23	; 0x17
   1bc6c:	98 8d       	ldd	r25, Y+24	; 0x18
   1bc6e:	ab 01       	movw	r20, r22
   1bc70:	bc 01       	movw	r22, r24
   1bc72:	8c 85       	ldd	r24, Y+12	; 0x0c
   1bc74:	0e 94 39 e1 	call	0x1c272	; 0x1c272 <bufferData(unsigned char, unsigned int, unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:118
  _offset += bytes_written;
   1bc78:	2f 89       	ldd	r18, Y+23	; 0x17
   1bc7a:	38 8d       	ldd	r19, Y+24	; 0x18
   1bc7c:	28 0f       	add	r18, r24
   1bc7e:	39 1f       	adc	r19, r25
   1bc80:	38 8f       	std	Y+24, r19	; 0x18
   1bc82:	2f 8b       	std	Y+23, r18	; 0x17
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:120
  return bytes_written;
}
   1bc84:	df 91       	pop	r29
   1bc86:	cf 91       	pop	r28
   1bc88:	08 95       	ret

0001bc8a <EthernetUDP::read()>:
_ZN11EthernetUDP4readEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:152
  // There aren't any packets available
  return 0;
}

int EthernetUDP::read()
{
   1bc8a:	0f 93       	push	r16
   1bc8c:	1f 93       	push	r17
   1bc8e:	cf 93       	push	r28
   1bc90:	df 93       	push	r29
   1bc92:	1f 92       	push	r1
   1bc94:	cd b7       	in	r28, 0x3d	; 61
   1bc96:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:155
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
   1bc98:	fc 01       	movw	r30, r24
   1bc9a:	21 8d       	ldd	r18, Z+25	; 0x19
   1bc9c:	32 8d       	ldd	r19, Z+26	; 0x1a
   1bc9e:	23 2b       	or	r18, r19
   1bca0:	41 f4       	brne	.+16     	; 0x1bcb2 <EthernetUDP::read()+0x28>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:163
    _remaining--;
    return byte;
  }

  // If we get here, there's no data available
  return -1;
   1bca2:	8f ef       	ldi	r24, 0xFF	; 255
   1bca4:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:164
}
   1bca6:	0f 90       	pop	r0
   1bca8:	df 91       	pop	r29
   1bcaa:	cf 91       	pop	r28
   1bcac:	1f 91       	pop	r17
   1bcae:	0f 91       	pop	r16
   1bcb0:	08 95       	ret
   1bcb2:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:155 (discriminator 1)

int EthernetUDP::read()
{
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
   1bcb4:	41 e0       	ldi	r20, 0x01	; 1
   1bcb6:	50 e0       	ldi	r21, 0x00	; 0
   1bcb8:	be 01       	movw	r22, r28
   1bcba:	6f 5f       	subi	r22, 0xFF	; 255
   1bcbc:	7f 4f       	sbci	r23, 0xFF	; 255
   1bcbe:	fc 01       	movw	r30, r24
   1bcc0:	84 85       	ldd	r24, Z+12	; 0x0c
   1bcc2:	0e 94 e4 e0 	call	0x1c1c8	; 0x1c1c8 <recv(unsigned char, unsigned char*, int)>
   1bcc6:	18 16       	cp	r1, r24
   1bcc8:	19 06       	cpc	r1, r25
   1bcca:	5c f7       	brge	.-42     	; 0x1bca2 <EthernetUDP::read()+0x18>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:158
  {
    // We read things without any problems
    _remaining--;
   1bccc:	f8 01       	movw	r30, r16
   1bcce:	81 8d       	ldd	r24, Z+25	; 0x19
   1bcd0:	92 8d       	ldd	r25, Z+26	; 0x1a
   1bcd2:	01 97       	sbiw	r24, 0x01	; 1
   1bcd4:	92 8f       	std	Z+26, r25	; 0x1a
   1bcd6:	81 8f       	std	Z+25, r24	; 0x19
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:159
    return byte;
   1bcd8:	89 81       	ldd	r24, Y+1	; 0x01
   1bcda:	90 e0       	ldi	r25, 0x00	; 0
   1bcdc:	e4 cf       	rjmp	.-56     	; 0x1bca6 <EthernetUDP::read()+0x1c>

0001bcde <EthernetUDP::read(unsigned char*, unsigned int)>:
_ZN11EthernetUDP4readEPhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:167
  // If we get here, there's no data available
  return -1;
}

int EthernetUDP::read(unsigned char* buffer, size_t len)
{
   1bcde:	cf 93       	push	r28
   1bce0:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:169

  if (_remaining > 0)
   1bce2:	fc 01       	movw	r30, r24
   1bce4:	21 8d       	ldd	r18, Z+25	; 0x19
   1bce6:	32 8d       	ldd	r19, Z+26	; 0x1a
   1bce8:	21 15       	cp	r18, r1
   1bcea:	31 05       	cpc	r19, r1
   1bcec:	29 f4       	brne	.+10     	; 0x1bcf8 <EthernetUDP::read(unsigned char*, unsigned int)+0x1a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:195
    }

  }

  // If we get here, there's no data available or recv failed
  return -1;
   1bcee:	8f ef       	ldi	r24, 0xFF	; 255
   1bcf0:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:197

}
   1bcf2:	df 91       	pop	r29
   1bcf4:	cf 91       	pop	r28
   1bcf6:	08 95       	ret
   1bcf8:	ec 01       	movw	r28, r24
   1bcfa:	84 85       	ldd	r24, Z+12	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:174
  if (_remaining > 0)
  {

    int got;

    if (_remaining <= len)
   1bcfc:	42 17       	cp	r20, r18
   1bcfe:	53 07       	cpc	r21, r19
   1bd00:	08 f0       	brcs	.+2      	; 0x1bd04 <EthernetUDP::read(unsigned char*, unsigned int)+0x26>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:177
    {
      // data should fit in the buffer
      got = recv(_sock, buffer, _remaining);
   1bd02:	a9 01       	movw	r20, r18
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:183
    }
    else
    {
      // too much data for the buffer, 
      // grab as much as will fit
      got = recv(_sock, buffer, len);
   1bd04:	0e 94 e4 e0 	call	0x1c1c8	; 0x1c1c8 <recv(unsigned char, unsigned char*, int)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:186
    }

    if (got > 0)
   1bd08:	18 16       	cp	r1, r24
   1bd0a:	19 06       	cpc	r1, r25
   1bd0c:	84 f7       	brge	.-32     	; 0x1bcee <EthernetUDP::read(unsigned char*, unsigned int)+0x10>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:188
    {
      _remaining -= got;
   1bd0e:	29 8d       	ldd	r18, Y+25	; 0x19
   1bd10:	3a 8d       	ldd	r19, Y+26	; 0x1a
   1bd12:	28 1b       	sub	r18, r24
   1bd14:	39 0b       	sbc	r19, r25
   1bd16:	3a 8f       	std	Y+26, r19	; 0x1a
   1bd18:	29 8f       	std	Y+25, r18	; 0x19
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:189
      return got;
   1bd1a:	eb cf       	rjmp	.-42     	; 0x1bcf2 <EthernetUDP::read(unsigned char*, unsigned int)+0x14>

0001bd1c <EthernetUDP::peek()>:
_ZN11EthernetUDP4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:200
  return -1;

}

int EthernetUDP::peek()
{
   1bd1c:	cf 93       	push	r28
   1bd1e:	df 93       	push	r29
   1bd20:	1f 92       	push	r1
   1bd22:	cd b7       	in	r28, 0x3d	; 61
   1bd24:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:205
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
   1bd26:	fc 01       	movw	r30, r24
   1bd28:	21 8d       	ldd	r18, Z+25	; 0x19
   1bd2a:	32 8d       	ldd	r19, Z+26	; 0x1a
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:206
    return -1;
   1bd2c:	8f ef       	ldi	r24, 0xFF	; 255
   1bd2e:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:205
{
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
   1bd30:	23 2b       	or	r18, r19
   1bd32:	41 f0       	breq	.+16     	; 0x1bd44 <EthernetUDP::peek()+0x28>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:207
    return -1;
  ::peek(_sock, &b);
   1bd34:	be 01       	movw	r22, r28
   1bd36:	6f 5f       	subi	r22, 0xFF	; 255
   1bd38:	7f 4f       	sbci	r23, 0xFF	; 255
   1bd3a:	84 85       	ldd	r24, Z+12	; 0x0c
   1bd3c:	0e 94 2a e1 	call	0x1c254	; 0x1c254 <peek(unsigned char, unsigned char*)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:208
  return b;
   1bd40:	89 81       	ldd	r24, Y+1	; 0x01
   1bd42:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:209
}
   1bd44:	0f 90       	pop	r0
   1bd46:	df 91       	pop	r29
   1bd48:	cf 91       	pop	r28
   1bd4a:	08 95       	ret

0001bd4c <EthernetUDP::parsePacket()>:
_ZN11EthernetUDP11parsePacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:123
  _offset += bytes_written;
  return bytes_written;
}

int EthernetUDP::parsePacket()
{
   1bd4c:	0f 93       	push	r16
   1bd4e:	1f 93       	push	r17
   1bd50:	cf 93       	push	r28
   1bd52:	df 93       	push	r29
   1bd54:	00 d0       	rcall	.+0      	; 0x1bd56 <EthernetUDP::parsePacket()+0xa>
   1bd56:	00 d0       	rcall	.+0      	; 0x1bd58 <EthernetUDP::parsePacket()+0xc>
   1bd58:	1f 92       	push	r1
   1bd5a:	1f 92       	push	r1
   1bd5c:	cd b7       	in	r28, 0x3d	; 61
   1bd5e:	de b7       	in	r29, 0x3e	; 62
   1bd60:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:125
  // discard any remaining bytes in the last packet
  flush();
   1bd62:	dc 01       	movw	r26, r24
   1bd64:	ed 91       	ld	r30, X+
   1bd66:	fc 91       	ld	r31, X
   1bd68:	06 80       	ldd	r0, Z+6	; 0x06
   1bd6a:	f7 81       	ldd	r31, Z+7	; 0x07
   1bd6c:	e0 2d       	mov	r30, r0
   1bd6e:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:127

  if (w5500.getRXReceivedSize(_sock) > 0)
   1bd70:	f8 01       	movw	r30, r16
   1bd72:	64 85       	ldd	r22, Z+12	; 0x0c
   1bd74:	83 e7       	ldi	r24, 0x73	; 115
   1bd76:	92 e1       	ldi	r25, 0x12	; 18
   1bd78:	0e 94 eb e2 	call	0x1c5d6	; 0x1c5d6 <W5500Class::getRXReceivedSize(unsigned char)>
   1bd7c:	89 2b       	or	r24, r25
   1bd7e:	a1 f1       	breq	.+104    	; 0x1bde8 <EthernetUDP::parsePacket()+0x9c>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:133
  {
    //HACK - hand-parse the UDP packet using TCP recv method
    uint8_t tmpBuf[8];
    int ret =0; 
    //read 8 header bytes and get IP and port from it
    ret = recv(_sock,tmpBuf,8);
   1bd80:	48 e0       	ldi	r20, 0x08	; 8
   1bd82:	50 e0       	ldi	r21, 0x00	; 0
   1bd84:	be 01       	movw	r22, r28
   1bd86:	6f 5f       	subi	r22, 0xFF	; 255
   1bd88:	7f 4f       	sbci	r23, 0xFF	; 255
   1bd8a:	d8 01       	movw	r26, r16
   1bd8c:	1c 96       	adiw	r26, 0x0c	; 12
   1bd8e:	8c 91       	ld	r24, X
   1bd90:	0e 94 e4 e0 	call	0x1c1c8	; 0x1c1c8 <recv(unsigned char, unsigned char*, int)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:134
    if (ret > 0)
   1bd94:	18 16       	cp	r1, r24
   1bd96:	19 06       	cpc	r1, r25
   1bd98:	e4 f4       	brge	.+56     	; 0x1bdd2 <EthernetUDP::parsePacket()+0x86>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:136
    {
      _remoteIP = tmpBuf;
   1bd9a:	be 01       	movw	r22, r28
   1bd9c:	6f 5f       	subi	r22, 0xFF	; 255
   1bd9e:	7f 4f       	sbci	r23, 0xFF	; 255
   1bda0:	c8 01       	movw	r24, r16
   1bda2:	0f 96       	adiw	r24, 0x0f	; 15
   1bda4:	0f 94 92 12 	call	0x22524	; 0x22524 <IPAddress::operator=(unsigned char const*)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:137
      _remotePort = tmpBuf[4];
   1bda8:	8d 81       	ldd	r24, Y+5	; 0x05
   1bdaa:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:138
      _remotePort = (_remotePort << 8) + tmpBuf[5];
   1bdac:	98 2f       	mov	r25, r24
   1bdae:	88 27       	eor	r24, r24
   1bdb0:	2e 81       	ldd	r18, Y+6	; 0x06
   1bdb2:	82 0f       	add	r24, r18
   1bdb4:	91 1d       	adc	r25, r1
   1bdb6:	f8 01       	movw	r30, r16
   1bdb8:	96 8b       	std	Z+22, r25	; 0x16
   1bdba:	85 8b       	std	Z+21, r24	; 0x15
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:139
      _remaining = tmpBuf[6];
   1bdbc:	8f 81       	ldd	r24, Y+7	; 0x07
   1bdbe:	28 2f       	mov	r18, r24
   1bdc0:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:140
      _remaining = (_remaining << 8) + tmpBuf[7];
   1bdc2:	32 2f       	mov	r19, r18
   1bdc4:	22 27       	eor	r18, r18
   1bdc6:	88 85       	ldd	r24, Y+8	; 0x08
   1bdc8:	82 0f       	add	r24, r18
   1bdca:	93 2f       	mov	r25, r19
   1bdcc:	91 1d       	adc	r25, r1
   1bdce:	92 8f       	std	Z+26, r25	; 0x1a
   1bdd0:	81 8f       	std	Z+25, r24	; 0x19
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:149
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
}
   1bdd2:	28 96       	adiw	r28, 0x08	; 8
   1bdd4:	0f b6       	in	r0, 0x3f	; 63
   1bdd6:	f8 94       	cli
   1bdd8:	de bf       	out	0x3e, r29	; 62
   1bdda:	0f be       	out	0x3f, r0	; 63
   1bddc:	cd bf       	out	0x3d, r28	; 61
   1bdde:	df 91       	pop	r29
   1bde0:	cf 91       	pop	r28
   1bde2:	1f 91       	pop	r17
   1bde4:	0f 91       	pop	r16
   1bde6:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:148
      ret = _remaining;
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
   1bde8:	90 e0       	ldi	r25, 0x00	; 0
   1bdea:	80 e0       	ldi	r24, 0x00	; 0
   1bdec:	f2 cf       	rjmp	.-28     	; 0x1bdd2 <EthernetUDP::parsePacket()+0x86>

0001bdee <EthernetUDP::begin(unsigned int)>:
_ZN11EthernetUDP5beginEj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:43

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
   1bdee:	ef 92       	push	r14
   1bdf0:	ff 92       	push	r15
   1bdf2:	0f 93       	push	r16
   1bdf4:	1f 93       	push	r17
   1bdf6:	cf 93       	push	r28
   1bdf8:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:44
  if (_sock != MAX_SOCK_NUM)
   1bdfa:	fc 01       	movw	r30, r24
   1bdfc:	e4 84       	ldd	r14, Z+12	; 0x0c
   1bdfe:	f8 e0       	ldi	r31, 0x08	; 8
   1be00:	ef 16       	cp	r14, r31
   1be02:	41 f0       	breq	.+16     	; 0x1be14 <EthernetUDP::begin(unsigned int)+0x26>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:45
    return 0;
   1be04:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:63
  _port = port;
  _remaining = 0;
  socket(_sock, SnMR::UDP, _port, 0);

  return 1;
}
   1be06:	df 91       	pop	r29
   1be08:	cf 91       	pop	r28
   1be0a:	1f 91       	pop	r17
   1be0c:	0f 91       	pop	r16
   1be0e:	ff 90       	pop	r15
   1be10:	ef 90       	pop	r14
   1be12:	08 95       	ret
   1be14:	8b 01       	movw	r16, r22
   1be16:	ec 01       	movw	r28, r24
   1be18:	f1 2c       	mov	r15, r1
_ZN10W5500Class6readSnEhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:349
   1be1a:	6e 2d       	mov	r22, r14
   1be1c:	83 e0       	ldi	r24, 0x03	; 3
   1be1e:	90 e0       	ldi	r25, 0x00	; 0
   1be20:	0e 94 44 e2 	call	0x1c488	; 0x1c488 <W5500Class::read(unsigned int, unsigned char)>
_ZN11EthernetUDP5beginEj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:49
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
   1be24:	81 11       	cpse	r24, r1
   1be26:	0f c0       	rjmp	.+30     	; 0x1be46 <EthernetUDP::begin(unsigned int)+0x58>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:50
      _sock = i;
   1be28:	fc 86       	std	Y+12, r15	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:55
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
   1be2a:	8c 85       	ldd	r24, Y+12	; 0x0c
   1be2c:	88 30       	cpi	r24, 0x08	; 8
   1be2e:	51 f3       	breq	.-44     	; 0x1be04 <EthernetUDP::begin(unsigned int)+0x16>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:58
    return 0;

  _port = port;
   1be30:	1e 87       	std	Y+14, r17	; 0x0e
   1be32:	0d 87       	std	Y+13, r16	; 0x0d
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:59
  _remaining = 0;
   1be34:	1a 8e       	std	Y+26, r1	; 0x1a
   1be36:	19 8e       	std	Y+25, r1	; 0x19
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:60
  socket(_sock, SnMR::UDP, _port, 0);
   1be38:	20 e0       	ldi	r18, 0x00	; 0
   1be3a:	a8 01       	movw	r20, r16
   1be3c:	62 e0       	ldi	r22, 0x02	; 2
   1be3e:	0e 94 0c e0 	call	0x1c018	; 0x1c018 <socket(unsigned char, unsigned char, unsigned int, unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:62

  return 1;
   1be42:	81 e0       	ldi	r24, 0x01	; 1
   1be44:	e0 cf       	rjmp	.-64     	; 0x1be06 <EthernetUDP::begin(unsigned int)+0x18>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:49
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
   1be46:	88 31       	cpi	r24, 0x18	; 24
   1be48:	79 f3       	breq	.-34     	; 0x1be28 <EthernetUDP::begin(unsigned int)+0x3a>
   1be4a:	f3 94       	inc	r15
   1be4c:	20 e2       	ldi	r18, 0x20	; 32
   1be4e:	e2 0e       	add	r14, r18
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:47
/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
   1be50:	88 e0       	ldi	r24, 0x08	; 8
   1be52:	f8 12       	cpse	r15, r24
   1be54:	e2 cf       	rjmp	.-60     	; 0x1be1a <EthernetUDP::begin(unsigned int)+0x2c>
   1be56:	e9 cf       	rjmp	.-46     	; 0x1be2a <EthernetUDP::begin(unsigned int)+0x3c>

0001be58 <EthernetUDP::EthernetUDP()>:
_ZN11EthernetUDPC2Ev():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:40
#include "Ethernet2.h"
#include "Udp.h"
#include "Dns.h"

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}
   1be58:	fc 01       	movw	r30, r24
_ZN5PrintC4Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
   1be5a:	13 82       	std	Z+3, r1	; 0x03
   1be5c:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
   1be5e:	88 ee       	ldi	r24, 0xE8	; 232
   1be60:	93 e0       	ldi	r25, 0x03	; 3
   1be62:	a0 e0       	ldi	r26, 0x00	; 0
   1be64:	b0 e0       	ldi	r27, 0x00	; 0
   1be66:	84 83       	std	Z+4, r24	; 0x04
   1be68:	95 83       	std	Z+5, r25	; 0x05
   1be6a:	a6 83       	std	Z+6, r26	; 0x06
   1be6c:	b7 83       	std	Z+7, r27	; 0x07
_ZN11EthernetUDPC2Ev():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:40
   1be6e:	8d e6       	ldi	r24, 0x6D	; 109
   1be70:	99 e0       	ldi	r25, 0x09	; 9
   1be72:	91 83       	std	Z+1, r25	; 0x01
   1be74:	80 83       	st	Z, r24
   1be76:	88 e0       	ldi	r24, 0x08	; 8
   1be78:	84 87       	std	Z+12, r24	; 0x0c
   1be7a:	cf 01       	movw	r24, r30
   1be7c:	0f 96       	adiw	r24, 0x0f	; 15
   1be7e:	0d 94 70 12 	jmp	0x224e0	; 0x224e0 <IPAddress::IPAddress()>

0001be82 <EthernetUDP::beginPacket(char const*, unsigned int)>:
_ZN11EthernetUDP11beginPacketEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:84
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

int EthernetUDP::beginPacket(const char *host, uint16_t port)
{
   1be82:	cf 92       	push	r12
   1be84:	df 92       	push	r13
   1be86:	ef 92       	push	r14
   1be88:	ff 92       	push	r15
   1be8a:	0f 93       	push	r16
   1be8c:	1f 93       	push	r17
   1be8e:	cf 93       	push	r28
   1be90:	df 93       	push	r29
   1be92:	cd b7       	in	r28, 0x3d	; 61
   1be94:	de b7       	in	r29, 0x3e	; 62
   1be96:	af 97       	sbiw	r28, 0x2f	; 47
   1be98:	0f b6       	in	r0, 0x3f	; 63
   1be9a:	f8 94       	cli
   1be9c:	de bf       	out	0x3e, r29	; 62
   1be9e:	0f be       	out	0x3f, r0	; 63
   1bea0:	cd bf       	out	0x3d, r28	; 61
   1bea2:	8c 01       	movw	r16, r24
   1bea4:	6b 01       	movw	r12, r22
   1bea6:	7a 01       	movw	r14, r20
_ZN9DNSClientC4Ev():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.h:10
   1bea8:	ce 01       	movw	r24, r28
   1beaa:	01 96       	adiw	r24, 0x01	; 1
   1beac:	0f 94 70 12 	call	0x224e0	; 0x224e0 <IPAddress::IPAddress()>
   1beb0:	ce 01       	movw	r24, r28
   1beb2:	09 96       	adiw	r24, 0x09	; 9
   1beb4:	0e 94 2c df 	call	0x1be58	; 0x1be58 <EthernetUDP::EthernetUDP()>
_ZN11EthernetUDP11beginPacketEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:88
  // Look up the host first
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;
   1beb8:	ce 01       	movw	r24, r28
   1beba:	8a 96       	adiw	r24, 0x2a	; 42
   1bebc:	0f 94 70 12 	call	0x224e0	; 0x224e0 <IPAddress::IPAddress()>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:90

  dns.begin(Ethernet.dnsServerIP());
   1bec0:	63 e3       	ldi	r22, 0x33	; 51
   1bec2:	72 e1       	ldi	r23, 0x12	; 18
   1bec4:	ce 01       	movw	r24, r28
   1bec6:	84 96       	adiw	r24, 0x24	; 36
   1bec8:	0e 94 07 da 	call	0x1b40e	; 0x1b40e <EthernetClass::dnsServerIP()>
   1becc:	be 01       	movw	r22, r28
   1bece:	6c 5d       	subi	r22, 0xDC	; 220
   1bed0:	7f 4f       	sbci	r23, 0xFF	; 255
   1bed2:	ce 01       	movw	r24, r28
   1bed4:	01 96       	adiw	r24, 0x01	; 1
   1bed6:	0e 94 a3 d6 	call	0x1ad46	; 0x1ad46 <DNSClient::begin(IPAddress const&)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:91
  ret = dns.getHostByName(host, remote_addr);
   1beda:	ae 01       	movw	r20, r28
   1bedc:	46 5d       	subi	r20, 0xD6	; 214
   1bede:	5f 4f       	sbci	r21, 0xFF	; 255
   1bee0:	b6 01       	movw	r22, r12
   1bee2:	ce 01       	movw	r24, r28
   1bee4:	01 96       	adiw	r24, 0x01	; 1
   1bee6:	0e 94 19 d9 	call	0x1b232	; 0x1b232 <DNSClient::getHostByName(char const*, IPAddress&)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:92
  if (ret == 1) {
   1beea:	81 30       	cpi	r24, 0x01	; 1
   1beec:	91 05       	cpc	r25, r1
   1beee:	c1 f4       	brne	.+48     	; 0x1bf20 <EthernetUDP::beginPacket(char const*, unsigned int)+0x9e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:93
    return beginPacket(remote_addr, port);
   1bef0:	d8 01       	movw	r26, r16
   1bef2:	ed 91       	ld	r30, X+
   1bef4:	fc 91       	ld	r31, X
   1bef6:	04 88       	ldd	r0, Z+20	; 0x14
   1bef8:	f5 89       	ldd	r31, Z+21	; 0x15
   1befa:	e0 2d       	mov	r30, r0
_ZN9IPAddressC4ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
   1befc:	8b ed       	ldi	r24, 0xDB	; 219
   1befe:	99 e0       	ldi	r25, 0x09	; 9
   1bf00:	9d a3       	std	Y+37, r25	; 0x25
   1bf02:	8c a3       	std	Y+36, r24	; 0x24
   1bf04:	8c a5       	ldd	r24, Y+44	; 0x2c
   1bf06:	9d a5       	ldd	r25, Y+45	; 0x2d
   1bf08:	ae a5       	ldd	r26, Y+46	; 0x2e
   1bf0a:	bf a5       	ldd	r27, Y+47	; 0x2f
   1bf0c:	8e a3       	std	Y+38, r24	; 0x26
   1bf0e:	9f a3       	std	Y+39, r25	; 0x27
   1bf10:	a8 a7       	std	Y+40, r26	; 0x28
   1bf12:	b9 a7       	std	Y+41, r27	; 0x29
_ZN11EthernetUDP11beginPacketEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:93
   1bf14:	a7 01       	movw	r20, r14
   1bf16:	be 01       	movw	r22, r28
   1bf18:	6c 5d       	subi	r22, 0xDC	; 220
   1bf1a:	7f 4f       	sbci	r23, 0xFF	; 255
   1bf1c:	c8 01       	movw	r24, r16
   1bf1e:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:97
  } else {
    return ret;
  }
}
   1bf20:	af 96       	adiw	r28, 0x2f	; 47
   1bf22:	0f b6       	in	r0, 0x3f	; 63
   1bf24:	f8 94       	cli
   1bf26:	de bf       	out	0x3e, r29	; 62
   1bf28:	0f be       	out	0x3f, r0	; 63
   1bf2a:	cd bf       	out	0x3d, r28	; 61
   1bf2c:	df 91       	pop	r29
   1bf2e:	cf 91       	pop	r28
   1bf30:	1f 91       	pop	r17
   1bf32:	0f 91       	pop	r16
   1bf34:	ff 90       	pop	r15
   1bf36:	ef 90       	pop	r14
   1bf38:	df 90       	pop	r13
   1bf3a:	cf 90       	pop	r12
   1bf3c:	08 95       	ret

0001bf3e <_GLOBAL__sub_I__ZN11EthernetUDPC2Ev>:
_GLOBAL__sub_I__ZN11EthernetUDPC2Ev():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:221

  while (_remaining)
  {
    read();
  }
}
   1bf3e:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
   1bf40:	00 e0       	ldi	r16, 0x00	; 0
   1bf42:	20 e0       	ldi	r18, 0x00	; 0
   1bf44:	40 e0       	ldi	r20, 0x00	; 0
   1bf46:	60 e0       	ldi	r22, 0x00	; 0
   1bf48:	82 e6       	ldi	r24, 0x62	; 98
   1bf4a:	92 e1       	ldi	r25, 0x12	; 18
   1bf4c:	0f 94 7a 12 	call	0x224f4	; 0x224f4 <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_GLOBAL__sub_I__ZN11EthernetUDPC2Ev():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:221
   1bf50:	0f 91       	pop	r16
   1bf52:	08 95       	ret

0001bf54 <_GLOBAL__sub_I__ZN7TwitterC2EPKc>:
_GLOBAL__sub_I__ZN7TwitterC2EPKc():
/home/saric/Arduino/libraries/Ethernet2/src/Twitter.cpp:91

int Twitter::wait(Print *debug)
{
	while (checkStatus(debug));
	return statusCode;
}
   1bf54:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
   1bf56:	00 e0       	ldi	r16, 0x00	; 0
   1bf58:	20 e0       	ldi	r18, 0x00	; 0
   1bf5a:	40 e0       	ldi	r20, 0x00	; 0
   1bf5c:	60 e0       	ldi	r22, 0x00	; 0
   1bf5e:	88 e6       	ldi	r24, 0x68	; 104
   1bf60:	92 e1       	ldi	r25, 0x12	; 18
   1bf62:	0f 94 7a 12 	call	0x224f4	; 0x224f4 <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_GLOBAL__sub_I__ZN7TwitterC2EPKc():
/home/saric/Arduino/libraries/Ethernet2/src/Twitter.cpp:91
   1bf66:	0f 91       	pop	r16
   1bf68:	08 95       	ret

0001bf6a <W5500Class::writeSnDIPR(unsigned char, unsigned char*)>:
_ZN10W5500Class11writeSnDIPREhPh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:355
      return 0;
    }
  }

  w5500.writeSnIR(s, SnIR::SEND_OK);
  return ret;
   1bf6a:	ab 01       	movw	r20, r22
_ZN10W5500Class7writeSnEhjPhj():
   1bf6c:	82 95       	swap	r24
   1bf6e:	88 0f       	add	r24, r24
   1bf70:	80 7e       	andi	r24, 0xE0	; 224
   1bf72:	6c e0       	ldi	r22, 0x0C	; 12
   1bf74:	68 0f       	add	r22, r24
   1bf76:	24 e0       	ldi	r18, 0x04	; 4
   1bf78:	30 e0       	ldi	r19, 0x00	; 0
   1bf7a:	8c e0       	ldi	r24, 0x0C	; 12
   1bf7c:	90 e0       	ldi	r25, 0x00	; 0
   1bf7e:	0c 94 10 e2 	jmp	0x1c420	; 0x1c420 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>

0001bf82 <W5500Class::readSn(unsigned char, unsigned int)>:
_ZN10W5500Class6readSnEhj():
   1bf82:	9b 01       	movw	r18, r22
   1bf84:	82 95       	swap	r24
   1bf86:	88 0f       	add	r24, r24
   1bf88:	80 7e       	andi	r24, 0xE0	; 224
   1bf8a:	68 e0       	ldi	r22, 0x08	; 8
   1bf8c:	68 0f       	add	r22, r24
   1bf8e:	c9 01       	movw	r24, r18
   1bf90:	0c 94 44 e2 	jmp	0x1c488	; 0x1c488 <W5500Class::read(unsigned int, unsigned char)>

0001bf94 <W5500Class::readSnIR(unsigned char)>:
_ZN10W5500Class8readSnIREh():
   1bf94:	62 e0       	ldi	r22, 0x02	; 2
   1bf96:	70 e0       	ldi	r23, 0x00	; 0
   1bf98:	0c 94 c1 df 	jmp	0x1bf82	; 0x1bf82 <W5500Class::readSn(unsigned char, unsigned int)>

0001bf9c <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>:
_ZN10W5500Class7writeSnEhjh():
   1bf9c:	9b 01       	movw	r18, r22
   1bf9e:	82 95       	swap	r24
   1bfa0:	88 0f       	add	r24, r24
   1bfa2:	80 7e       	andi	r24, 0xE0	; 224
   1bfa4:	6c e0       	ldi	r22, 0x0C	; 12
   1bfa6:	68 0f       	add	r22, r24
   1bfa8:	c9 01       	movw	r24, r18
   1bfaa:	0c 94 ea e1 	jmp	0x1c3d4	; 0x1c3d4 <W5500Class::write(unsigned int, unsigned char, unsigned char)>

0001bfae <W5500Class::writeSnPORT(unsigned char, unsigned int)>:
_ZN10W5500Class11writeSnPORTEhj():
   1bfae:	cf 93       	push	r28
   1bfb0:	df 93       	push	r29
   1bfb2:	c8 2f       	mov	r28, r24
   1bfb4:	d6 2f       	mov	r29, r22
   1bfb6:	47 2f       	mov	r20, r23
   1bfb8:	64 e0       	ldi	r22, 0x04	; 4
   1bfba:	70 e0       	ldi	r23, 0x00	; 0
   1bfbc:	0e 94 ce df 	call	0x1bf9c	; 0x1bf9c <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   1bfc0:	4d 2f       	mov	r20, r29
   1bfc2:	65 e0       	ldi	r22, 0x05	; 5
   1bfc4:	70 e0       	ldi	r23, 0x00	; 0
   1bfc6:	8c 2f       	mov	r24, r28
   1bfc8:	df 91       	pop	r29
   1bfca:	cf 91       	pop	r28
   1bfcc:	0c 94 ce df 	jmp	0x1bf9c	; 0x1bf9c <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>

0001bfd0 <W5500Class::writeSnIR(unsigned char, unsigned char)>:
_ZN10W5500Class9writeSnIREhh():
   1bfd0:	46 2f       	mov	r20, r22
   1bfd2:	62 e0       	ldi	r22, 0x02	; 2
   1bfd4:	70 e0       	ldi	r23, 0x00	; 0
   1bfd6:	0c 94 ce df 	jmp	0x1bf9c	; 0x1bf9c <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>

0001bfda <W5500Class::writeSnDPORT(unsigned char, unsigned int)>:
_ZN10W5500Class12writeSnDPORTEhj():
   1bfda:	cf 93       	push	r28
   1bfdc:	df 93       	push	r29
   1bfde:	c8 2f       	mov	r28, r24
   1bfe0:	d6 2f       	mov	r29, r22
   1bfe2:	47 2f       	mov	r20, r23
   1bfe4:	60 e1       	ldi	r22, 0x10	; 16
   1bfe6:	70 e0       	ldi	r23, 0x00	; 0
   1bfe8:	0e 94 ce df 	call	0x1bf9c	; 0x1bf9c <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   1bfec:	4d 2f       	mov	r20, r29
   1bfee:	61 e1       	ldi	r22, 0x11	; 17
   1bff0:	70 e0       	ldi	r23, 0x00	; 0
   1bff2:	8c 2f       	mov	r24, r28
   1bff4:	df 91       	pop	r29
   1bff6:	cf 91       	pop	r28
   1bff8:	0c 94 ce df 	jmp	0x1bf9c	; 0x1bf9c <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>

0001bffc <close(unsigned char)>:
_Z5closeh():
   1bffc:	cf 93       	push	r28
   1bffe:	c8 2f       	mov	r28, r24
   1c000:	40 e1       	ldi	r20, 0x10	; 16
   1c002:	50 e0       	ldi	r21, 0x00	; 0
   1c004:	68 2f       	mov	r22, r24
   1c006:	83 e7       	ldi	r24, 0x73	; 115
   1c008:	92 e1       	ldi	r25, 0x12	; 18
   1c00a:	0e 94 f2 e3 	call	0x1c7e4	; 0x1c7e4 <W5500Class::execCmdSn(unsigned char, SockCMD)>
   1c00e:	6f ef       	ldi	r22, 0xFF	; 255
   1c010:	8c 2f       	mov	r24, r28
   1c012:	cf 91       	pop	r28
   1c014:	0c 94 e8 df 	jmp	0x1bfd0	; 0x1bfd0 <W5500Class::writeSnIR(unsigned char, unsigned char)>

0001c018 <socket(unsigned char, unsigned char, unsigned int, unsigned char)>:
_Z6sockethhjh():
   1c018:	ff 92       	push	r15
   1c01a:	0f 93       	push	r16
   1c01c:	1f 93       	push	r17
   1c01e:	cf 93       	push	r28
   1c020:	df 93       	push	r29
   1c022:	9f ef       	ldi	r25, 0xFF	; 255
   1c024:	96 0f       	add	r25, r22
   1c026:	95 30       	cpi	r25, 0x05	; 5
   1c028:	58 f5       	brcc	.+86     	; 0x1c080 <socket(unsigned char, unsigned char, unsigned int, unsigned char)+0x68>
   1c02a:	f2 2e       	mov	r15, r18
   1c02c:	8a 01       	movw	r16, r20
   1c02e:	d6 2f       	mov	r29, r22
   1c030:	c8 2f       	mov	r28, r24
   1c032:	0e 94 fe df 	call	0x1bffc	; 0x1bffc <close(unsigned char)>
   1c036:	4d 2f       	mov	r20, r29
   1c038:	4f 29       	or	r20, r15
_ZN10W5500Class9writeSnMREhh():
   1c03a:	70 e0       	ldi	r23, 0x00	; 0
   1c03c:	60 e0       	ldi	r22, 0x00	; 0
   1c03e:	8c 2f       	mov	r24, r28
   1c040:	0e 94 ce df 	call	0x1bf9c	; 0x1bf9c <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_Z6sockethhjh():
   1c044:	b8 01       	movw	r22, r16
   1c046:	01 2b       	or	r16, r17
   1c048:	51 f4       	brne	.+20     	; 0x1c05e <socket(unsigned char, unsigned char, unsigned int, unsigned char)+0x46>
   1c04a:	60 91 6e 12 	lds	r22, 0x126E	; 0x80126e <local_port>
   1c04e:	70 91 6f 12 	lds	r23, 0x126F	; 0x80126f <local_port+0x1>
   1c052:	6f 5f       	subi	r22, 0xFF	; 255
   1c054:	7f 4f       	sbci	r23, 0xFF	; 255
   1c056:	70 93 6f 12 	sts	0x126F, r23	; 0x80126f <local_port+0x1>
   1c05a:	60 93 6e 12 	sts	0x126E, r22	; 0x80126e <local_port>
   1c05e:	8c 2f       	mov	r24, r28
   1c060:	0e 94 d7 df 	call	0x1bfae	; 0x1bfae <W5500Class::writeSnPORT(unsigned char, unsigned int)>
   1c064:	41 e0       	ldi	r20, 0x01	; 1
   1c066:	50 e0       	ldi	r21, 0x00	; 0
   1c068:	6c 2f       	mov	r22, r28
   1c06a:	83 e7       	ldi	r24, 0x73	; 115
   1c06c:	92 e1       	ldi	r25, 0x12	; 18
   1c06e:	0e 94 f2 e3 	call	0x1c7e4	; 0x1c7e4 <W5500Class::execCmdSn(unsigned char, SockCMD)>
   1c072:	81 e0       	ldi	r24, 0x01	; 1
   1c074:	df 91       	pop	r29
   1c076:	cf 91       	pop	r28
   1c078:	1f 91       	pop	r17
   1c07a:	0f 91       	pop	r16
   1c07c:	ff 90       	pop	r15
   1c07e:	08 95       	ret
   1c080:	80 e0       	ldi	r24, 0x00	; 0
   1c082:	f8 cf       	rjmp	.-16     	; 0x1c074 <socket(unsigned char, unsigned char, unsigned int, unsigned char)+0x5c>

0001c084 <listen(unsigned char)>:
_Z6listenh():
   1c084:	cf 93       	push	r28
   1c086:	c8 2f       	mov	r28, r24
_ZN10W5500Class8readSnSREh():
   1c088:	63 e0       	ldi	r22, 0x03	; 3
   1c08a:	70 e0       	ldi	r23, 0x00	; 0
   1c08c:	0e 94 c1 df 	call	0x1bf82	; 0x1bf82 <W5500Class::readSn(unsigned char, unsigned int)>
_Z6listenh():
   1c090:	83 31       	cpi	r24, 0x13	; 19
   1c092:	51 f4       	brne	.+20     	; 0x1c0a8 <listen(unsigned char)+0x24>
   1c094:	42 e0       	ldi	r20, 0x02	; 2
   1c096:	50 e0       	ldi	r21, 0x00	; 0
   1c098:	6c 2f       	mov	r22, r28
   1c09a:	83 e7       	ldi	r24, 0x73	; 115
   1c09c:	92 e1       	ldi	r25, 0x12	; 18
   1c09e:	0e 94 f2 e3 	call	0x1c7e4	; 0x1c7e4 <W5500Class::execCmdSn(unsigned char, SockCMD)>
   1c0a2:	81 e0       	ldi	r24, 0x01	; 1
   1c0a4:	cf 91       	pop	r28
   1c0a6:	08 95       	ret
   1c0a8:	80 e0       	ldi	r24, 0x00	; 0
   1c0aa:	fc cf       	rjmp	.-8      	; 0x1c0a4 <listen(unsigned char)+0x20>

0001c0ac <connect(unsigned char, unsigned char*, unsigned int)>:
_Z7connecthPhj():
   1c0ac:	0f 93       	push	r16
   1c0ae:	1f 93       	push	r17
   1c0b0:	cf 93       	push	r28
   1c0b2:	fb 01       	movw	r30, r22
   1c0b4:	90 81       	ld	r25, Z
   1c0b6:	9f 3f       	cpi	r25, 0xFF	; 255
   1c0b8:	59 f4       	brne	.+22     	; 0x1c0d0 <connect(unsigned char, unsigned char*, unsigned int)+0x24>
   1c0ba:	91 81       	ldd	r25, Z+1	; 0x01
   1c0bc:	9f 3f       	cpi	r25, 0xFF	; 255
   1c0be:	99 f4       	brne	.+38     	; 0x1c0e6 <connect(unsigned char, unsigned char*, unsigned int)+0x3a>
   1c0c0:	92 81       	ldd	r25, Z+2	; 0x02
   1c0c2:	9f 3f       	cpi	r25, 0xFF	; 255
   1c0c4:	81 f4       	brne	.+32     	; 0x1c0e6 <connect(unsigned char, unsigned char*, unsigned int)+0x3a>
   1c0c6:	93 81       	ldd	r25, Z+3	; 0x03
   1c0c8:	9f 3f       	cpi	r25, 0xFF	; 255
   1c0ca:	69 f4       	brne	.+26     	; 0x1c0e6 <connect(unsigned char, unsigned char*, unsigned int)+0x3a>
   1c0cc:	90 e0       	ldi	r25, 0x00	; 0
   1c0ce:	1f c0       	rjmp	.+62     	; 0x1c10e <connect(unsigned char, unsigned char*, unsigned int)+0x62>
   1c0d0:	91 11       	cpse	r25, r1
   1c0d2:	09 c0       	rjmp	.+18     	; 0x1c0e6 <connect(unsigned char, unsigned char*, unsigned int)+0x3a>
   1c0d4:	91 81       	ldd	r25, Z+1	; 0x01
   1c0d6:	91 11       	cpse	r25, r1
   1c0d8:	06 c0       	rjmp	.+12     	; 0x1c0e6 <connect(unsigned char, unsigned char*, unsigned int)+0x3a>
   1c0da:	92 81       	ldd	r25, Z+2	; 0x02
   1c0dc:	91 11       	cpse	r25, r1
   1c0de:	03 c0       	rjmp	.+6      	; 0x1c0e6 <connect(unsigned char, unsigned char*, unsigned int)+0x3a>
   1c0e0:	93 81       	ldd	r25, Z+3	; 0x03
   1c0e2:	99 23       	and	r25, r25
   1c0e4:	a1 f0       	breq	.+40     	; 0x1c10e <connect(unsigned char, unsigned char*, unsigned int)+0x62>
   1c0e6:	41 15       	cp	r20, r1
   1c0e8:	51 05       	cpc	r21, r1
   1c0ea:	81 f3       	breq	.-32     	; 0x1c0cc <connect(unsigned char, unsigned char*, unsigned int)+0x20>
   1c0ec:	8a 01       	movw	r16, r20
   1c0ee:	bf 01       	movw	r22, r30
   1c0f0:	c8 2f       	mov	r28, r24
   1c0f2:	0e 94 b5 df 	call	0x1bf6a	; 0x1bf6a <W5500Class::writeSnDIPR(unsigned char, unsigned char*)>
   1c0f6:	b8 01       	movw	r22, r16
   1c0f8:	8c 2f       	mov	r24, r28
   1c0fa:	0e 94 ed df 	call	0x1bfda	; 0x1bfda <W5500Class::writeSnDPORT(unsigned char, unsigned int)>
   1c0fe:	44 e0       	ldi	r20, 0x04	; 4
   1c100:	50 e0       	ldi	r21, 0x00	; 0
   1c102:	6c 2f       	mov	r22, r28
   1c104:	83 e7       	ldi	r24, 0x73	; 115
   1c106:	92 e1       	ldi	r25, 0x12	; 18
   1c108:	0e 94 f2 e3 	call	0x1c7e4	; 0x1c7e4 <W5500Class::execCmdSn(unsigned char, SockCMD)>
   1c10c:	91 e0       	ldi	r25, 0x01	; 1
   1c10e:	89 2f       	mov	r24, r25
   1c110:	cf 91       	pop	r28
   1c112:	1f 91       	pop	r17
   1c114:	0f 91       	pop	r16
   1c116:	08 95       	ret

0001c118 <disconnect(unsigned char)>:
_Z10disconnecth():
   1c118:	48 e0       	ldi	r20, 0x08	; 8
   1c11a:	50 e0       	ldi	r21, 0x00	; 0
   1c11c:	68 2f       	mov	r22, r24
   1c11e:	83 e7       	ldi	r24, 0x73	; 115
   1c120:	92 e1       	ldi	r25, 0x12	; 18
   1c122:	0c 94 f2 e3 	jmp	0x1c7e4	; 0x1c7e4 <W5500Class::execCmdSn(unsigned char, SockCMD)>

0001c126 <send(unsigned char, unsigned char const*, unsigned int)>:
_Z4sendhPKhj():
   1c126:	cf 92       	push	r12
   1c128:	df 92       	push	r13
   1c12a:	ef 92       	push	r14
   1c12c:	ff 92       	push	r15
   1c12e:	0f 93       	push	r16
   1c130:	1f 93       	push	r17
   1c132:	cf 93       	push	r28
   1c134:	c8 2f       	mov	r28, r24
   1c136:	7b 01       	movw	r14, r22
   1c138:	8a 01       	movw	r16, r20
   1c13a:	41 30       	cpi	r20, 0x01	; 1
   1c13c:	58 40       	sbci	r21, 0x08	; 8
   1c13e:	10 f0       	brcs	.+4      	; 0x1c144 <send(unsigned char, unsigned char const*, unsigned int)+0x1e>
   1c140:	00 e0       	ldi	r16, 0x00	; 0
   1c142:	18 e0       	ldi	r17, 0x08	; 8
   1c144:	6c 2f       	mov	r22, r28
   1c146:	83 e7       	ldi	r24, 0x73	; 115
   1c148:	92 e1       	ldi	r25, 0x12	; 18
   1c14a:	0e 94 b7 e2 	call	0x1c56e	; 0x1c56e <W5500Class::getTXFreeSize(unsigned char)>
   1c14e:	6c 01       	movw	r12, r24
_ZN10W5500Class8readSnSREh():
   1c150:	63 e0       	ldi	r22, 0x03	; 3
   1c152:	70 e0       	ldi	r23, 0x00	; 0
   1c154:	8c 2f       	mov	r24, r28
   1c156:	0e 94 c1 df 	call	0x1bf82	; 0x1bf82 <W5500Class::readSn(unsigned char, unsigned int)>
_Z4sendhPKhj():
   1c15a:	87 31       	cpi	r24, 0x17	; 23
   1c15c:	11 f0       	breq	.+4      	; 0x1c162 <send(unsigned char, unsigned char const*, unsigned int)+0x3c>
   1c15e:	8c 31       	cpi	r24, 0x1C	; 28
   1c160:	59 f5       	brne	.+86     	; 0x1c1b8 <send(unsigned char, unsigned char const*, unsigned int)+0x92>
   1c162:	c0 16       	cp	r12, r16
   1c164:	d1 06       	cpc	r13, r17
   1c166:	70 f3       	brcs	.-36     	; 0x1c144 <send(unsigned char, unsigned char const*, unsigned int)+0x1e>
   1c168:	98 01       	movw	r18, r16
   1c16a:	a7 01       	movw	r20, r14
   1c16c:	6c 2f       	mov	r22, r28
   1c16e:	83 e7       	ldi	r24, 0x73	; 115
   1c170:	92 e1       	ldi	r25, 0x12	; 18
   1c172:	0e 94 47 e3 	call	0x1c68e	; 0x1c68e <W5500Class::send_data_processing(unsigned char, unsigned char const*, unsigned int)>
   1c176:	40 e2       	ldi	r20, 0x20	; 32
   1c178:	50 e0       	ldi	r21, 0x00	; 0
   1c17a:	6c 2f       	mov	r22, r28
   1c17c:	83 e7       	ldi	r24, 0x73	; 115
   1c17e:	92 e1       	ldi	r25, 0x12	; 18
   1c180:	0e 94 f2 e3 	call	0x1c7e4	; 0x1c7e4 <W5500Class::execCmdSn(unsigned char, SockCMD)>
   1c184:	8c 2f       	mov	r24, r28
   1c186:	0e 94 ca df 	call	0x1bf94	; 0x1bf94 <W5500Class::readSnIR(unsigned char)>
   1c18a:	84 fd       	sbrc	r24, 4
   1c18c:	18 c0       	rjmp	.+48     	; 0x1c1be <send(unsigned char, unsigned char const*, unsigned int)+0x98>
_ZN10W5500Class8readSnSREh():
   1c18e:	63 e0       	ldi	r22, 0x03	; 3
   1c190:	70 e0       	ldi	r23, 0x00	; 0
   1c192:	8c 2f       	mov	r24, r28
   1c194:	0e 94 c1 df 	call	0x1bf82	; 0x1bf82 <W5500Class::readSn(unsigned char, unsigned int)>
_Z4sendhPKhj():
   1c198:	81 11       	cpse	r24, r1
   1c19a:	f4 cf       	rjmp	.-24     	; 0x1c184 <send(unsigned char, unsigned char const*, unsigned int)+0x5e>
   1c19c:	8c 2f       	mov	r24, r28
   1c19e:	0e 94 fe df 	call	0x1bffc	; 0x1bffc <close(unsigned char)>
   1c1a2:	10 e0       	ldi	r17, 0x00	; 0
   1c1a4:	00 e0       	ldi	r16, 0x00	; 0
   1c1a6:	c8 01       	movw	r24, r16
   1c1a8:	cf 91       	pop	r28
   1c1aa:	1f 91       	pop	r17
   1c1ac:	0f 91       	pop	r16
   1c1ae:	ff 90       	pop	r15
   1c1b0:	ef 90       	pop	r14
   1c1b2:	df 90       	pop	r13
   1c1b4:	cf 90       	pop	r12
   1c1b6:	08 95       	ret
   1c1b8:	10 e0       	ldi	r17, 0x00	; 0
   1c1ba:	00 e0       	ldi	r16, 0x00	; 0
   1c1bc:	d5 cf       	rjmp	.-86     	; 0x1c168 <send(unsigned char, unsigned char const*, unsigned int)+0x42>
   1c1be:	60 e1       	ldi	r22, 0x10	; 16
   1c1c0:	8c 2f       	mov	r24, r28
   1c1c2:	0e 94 e8 df 	call	0x1bfd0	; 0x1bfd0 <W5500Class::writeSnIR(unsigned char, unsigned char)>
   1c1c6:	ef cf       	rjmp	.-34     	; 0x1c1a6 <send(unsigned char, unsigned char const*, unsigned int)+0x80>

0001c1c8 <recv(unsigned char, unsigned char*, int)>:
_Z4recvhPhi():
   1c1c8:	cf 92       	push	r12
   1c1ca:	df 92       	push	r13
   1c1cc:	ef 92       	push	r14
   1c1ce:	ff 92       	push	r15
   1c1d0:	0f 93       	push	r16
   1c1d2:	1f 93       	push	r17
   1c1d4:	cf 93       	push	r28
   1c1d6:	df 93       	push	r29
   1c1d8:	18 2f       	mov	r17, r24
   1c1da:	6b 01       	movw	r12, r22
   1c1dc:	7a 01       	movw	r14, r20
   1c1de:	68 2f       	mov	r22, r24
   1c1e0:	83 e7       	ldi	r24, 0x73	; 115
   1c1e2:	92 e1       	ldi	r25, 0x12	; 18
   1c1e4:	0e 94 eb e2 	call	0x1c5d6	; 0x1c5d6 <W5500Class::getRXReceivedSize(unsigned char)>
   1c1e8:	ec 01       	movw	r28, r24
   1c1ea:	00 97       	sbiw	r24, 0x00	; 0
   1c1ec:	e1 f4       	brne	.+56     	; 0x1c226 <recv(unsigned char, unsigned char*, int)+0x5e>
_ZN10W5500Class8readSnSREh():
   1c1ee:	63 e0       	ldi	r22, 0x03	; 3
   1c1f0:	70 e0       	ldi	r23, 0x00	; 0
   1c1f2:	81 2f       	mov	r24, r17
   1c1f4:	0e 94 c1 df 	call	0x1bf82	; 0x1bf82 <W5500Class::readSn(unsigned char, unsigned int)>
_Z4recvhPhi():
   1c1f8:	84 31       	cpi	r24, 0x14	; 20
   1c1fa:	59 f0       	breq	.+22     	; 0x1c212 <recv(unsigned char, unsigned char*, int)+0x4a>
   1c1fc:	88 23       	and	r24, r24
   1c1fe:	49 f0       	breq	.+18     	; 0x1c212 <recv(unsigned char, unsigned char*, int)+0x4a>
   1c200:	c1 e0       	ldi	r28, 0x01	; 1
   1c202:	d0 e0       	ldi	r29, 0x00	; 0
   1c204:	8c 31       	cpi	r24, 0x1C	; 28
   1c206:	11 f4       	brne	.+4      	; 0x1c20c <recv(unsigned char, unsigned char*, int)+0x44>
   1c208:	d0 e0       	ldi	r29, 0x00	; 0
   1c20a:	c0 e0       	ldi	r28, 0x00	; 0
   1c20c:	d1 95       	neg	r29
   1c20e:	c1 95       	neg	r28
   1c210:	d1 09       	sbc	r29, r1
   1c212:	ce 01       	movw	r24, r28
   1c214:	df 91       	pop	r29
   1c216:	cf 91       	pop	r28
   1c218:	1f 91       	pop	r17
   1c21a:	0f 91       	pop	r16
   1c21c:	ff 90       	pop	r15
   1c21e:	ef 90       	pop	r14
   1c220:	df 90       	pop	r13
   1c222:	cf 90       	pop	r12
   1c224:	08 95       	ret
   1c226:	e8 16       	cp	r14, r24
   1c228:	f9 06       	cpc	r15, r25
   1c22a:	0c f4       	brge	.+2      	; 0x1c22e <recv(unsigned char, unsigned char*, int)+0x66>
   1c22c:	e7 01       	movw	r28, r14
   1c22e:	1c 16       	cp	r1, r28
   1c230:	1d 06       	cpc	r1, r29
   1c232:	7c f7       	brge	.-34     	; 0x1c212 <recv(unsigned char, unsigned char*, int)+0x4a>
   1c234:	00 e0       	ldi	r16, 0x00	; 0
   1c236:	9e 01       	movw	r18, r28
   1c238:	a6 01       	movw	r20, r12
   1c23a:	61 2f       	mov	r22, r17
   1c23c:	83 e7       	ldi	r24, 0x73	; 115
   1c23e:	92 e1       	ldi	r25, 0x12	; 18
   1c240:	0e 94 a1 e3 	call	0x1c742	; 0x1c742 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char)>
   1c244:	40 e4       	ldi	r20, 0x40	; 64
   1c246:	50 e0       	ldi	r21, 0x00	; 0
   1c248:	61 2f       	mov	r22, r17
   1c24a:	83 e7       	ldi	r24, 0x73	; 115
   1c24c:	92 e1       	ldi	r25, 0x12	; 18
   1c24e:	0e 94 f2 e3 	call	0x1c7e4	; 0x1c7e4 <W5500Class::execCmdSn(unsigned char, SockCMD)>
   1c252:	df cf       	rjmp	.-66     	; 0x1c212 <recv(unsigned char, unsigned char*, int)+0x4a>

0001c254 <peek(unsigned char, unsigned char*)>:
_Z4peekhPh():
   1c254:	0f 93       	push	r16
   1c256:	ab 01       	movw	r20, r22
   1c258:	01 e0       	ldi	r16, 0x01	; 1
   1c25a:	21 e0       	ldi	r18, 0x01	; 1
   1c25c:	30 e0       	ldi	r19, 0x00	; 0
   1c25e:	68 2f       	mov	r22, r24
   1c260:	83 e7       	ldi	r24, 0x73	; 115
   1c262:	92 e1       	ldi	r25, 0x12	; 18
   1c264:	0e 94 a1 e3 	call	0x1c742	; 0x1c742 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char)>
   1c268:	81 e0       	ldi	r24, 0x01	; 1
   1c26a:	90 e0       	ldi	r25, 0x00	; 0
   1c26c:	0f 91       	pop	r16
   1c26e:	08 95       	ret

0001c270 <flush(unsigned char)>:
_Z5flushh():
   1c270:	08 95       	ret

0001c272 <bufferData(unsigned char, unsigned int, unsigned char const*, unsigned int)>:
_Z10bufferDatahjPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:359
}

uint16_t bufferData(SOCKET s, uint16_t offset, const uint8_t* buf, uint16_t len)
{
   1c272:	af 92       	push	r10
   1c274:	bf 92       	push	r11
   1c276:	cf 92       	push	r12
   1c278:	df 92       	push	r13
   1c27a:	ff 92       	push	r15
   1c27c:	0f 93       	push	r16
   1c27e:	1f 93       	push	r17
   1c280:	cf 93       	push	r28
   1c282:	df 93       	push	r29
   1c284:	f8 2e       	mov	r15, r24
   1c286:	6b 01       	movw	r12, r22
   1c288:	5a 01       	movw	r10, r20
   1c28a:	e9 01       	movw	r28, r18
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:361
  uint16_t ret =0;
  if (len > w5500.getTXFreeSize(s))
   1c28c:	68 2f       	mov	r22, r24
   1c28e:	83 e7       	ldi	r24, 0x73	; 115
   1c290:	92 e1       	ldi	r25, 0x12	; 18
   1c292:	0e 94 b7 e2 	call	0x1c56e	; 0x1c56e <W5500Class::getTXFreeSize(unsigned char)>
   1c296:	8c 17       	cp	r24, r28
   1c298:	9d 07       	cpc	r25, r29
   1c29a:	30 f4       	brcc	.+12     	; 0x1c2a8 <bufferData(unsigned char, unsigned int, unsigned char const*, unsigned int)+0x36>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:363
  {
    ret = w5500.getTXFreeSize(s); // check size not to exceed MAX size.
   1c29c:	6f 2d       	mov	r22, r15
   1c29e:	83 e7       	ldi	r24, 0x73	; 115
   1c2a0:	92 e1       	ldi	r25, 0x12	; 18
   1c2a2:	0e 94 b7 e2 	call	0x1c56e	; 0x1c56e <W5500Class::getTXFreeSize(unsigned char)>
   1c2a6:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:369
  }
  else
  {
    ret = len;
  }
  w5500.send_data_processing_offset(s, offset, buf, ret);
   1c2a8:	8e 01       	movw	r16, r28
   1c2aa:	95 01       	movw	r18, r10
   1c2ac:	a6 01       	movw	r20, r12
   1c2ae:	6f 2d       	mov	r22, r15
   1c2b0:	83 e7       	ldi	r24, 0x73	; 115
   1c2b2:	92 e1       	ldi	r25, 0x12	; 18
   1c2b4:	0e 94 07 e3 	call	0x1c60e	; 0x1c60e <W5500Class::send_data_processing_offset(unsigned char, unsigned int, unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:371
  return ret;
}
   1c2b8:	ce 01       	movw	r24, r28
   1c2ba:	df 91       	pop	r29
   1c2bc:	cf 91       	pop	r28
   1c2be:	1f 91       	pop	r17
   1c2c0:	0f 91       	pop	r16
   1c2c2:	ff 90       	pop	r15
   1c2c4:	df 90       	pop	r13
   1c2c6:	cf 90       	pop	r12
   1c2c8:	bf 90       	pop	r11
   1c2ca:	af 90       	pop	r10
   1c2cc:	08 95       	ret

0001c2ce <startUDP(unsigned char, unsigned char*, unsigned int)>:
_Z8startUDPhPhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:374

int startUDP(SOCKET s, uint8_t* addr, uint16_t port)
{
   1c2ce:	0f 93       	push	r16
   1c2d0:	1f 93       	push	r17
   1c2d2:	cf 93       	push	r28
   1c2d4:	fb 01       	movw	r30, r22
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:375
  if
   1c2d6:	90 81       	ld	r25, Z
   1c2d8:	91 11       	cpse	r25, r1
   1c2da:	09 c0       	rjmp	.+18     	; 0x1c2ee <startUDP(unsigned char, unsigned char*, unsigned int)+0x20>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:377
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
   1c2dc:	91 81       	ldd	r25, Z+1	; 0x01
   1c2de:	91 11       	cpse	r25, r1
   1c2e0:	06 c0       	rjmp	.+12     	; 0x1c2ee <startUDP(unsigned char, unsigned char*, unsigned int)+0x20>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:377 (discriminator 1)
   1c2e2:	92 81       	ldd	r25, Z+2	; 0x02
   1c2e4:	91 11       	cpse	r25, r1
   1c2e6:	03 c0       	rjmp	.+6      	; 0x1c2ee <startUDP(unsigned char, unsigned char*, unsigned int)+0x20>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:377 (discriminator 3)
   1c2e8:	93 81       	ldd	r25, Z+3	; 0x03
   1c2ea:	99 23       	and	r25, r25
   1c2ec:	91 f0       	breq	.+36     	; 0x1c312 <startUDP(unsigned char, unsigned char*, unsigned int)+0x44>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:377 (discriminator 5)
   1c2ee:	41 15       	cp	r20, r1
   1c2f0:	51 05       	cpc	r21, r1
   1c2f2:	79 f0       	breq	.+30     	; 0x1c312 <startUDP(unsigned char, unsigned char*, unsigned int)+0x44>
   1c2f4:	8a 01       	movw	r16, r20
   1c2f6:	bf 01       	movw	r22, r30
   1c2f8:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:385
  {
    return 0;
  }
  else
  {
    w5500.writeSnDIPR(s, addr);
   1c2fa:	0e 94 b5 df 	call	0x1bf6a	; 0x1bf6a <W5500Class::writeSnDIPR(unsigned char, unsigned char*)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:386
    w5500.writeSnDPORT(s, port);
   1c2fe:	b8 01       	movw	r22, r16
   1c300:	8c 2f       	mov	r24, r28
   1c302:	0e 94 ed df 	call	0x1bfda	; 0x1bfda <W5500Class::writeSnDPORT(unsigned char, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:387
    return 1;
   1c306:	81 e0       	ldi	r24, 0x01	; 1
   1c308:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:389
  }
}
   1c30a:	cf 91       	pop	r28
   1c30c:	1f 91       	pop	r17
   1c30e:	0f 91       	pop	r16
   1c310:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:381
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
     ((port == 0x00))
    ) 
  {
    return 0;
   1c312:	90 e0       	ldi	r25, 0x00	; 0
   1c314:	80 e0       	ldi	r24, 0x00	; 0
   1c316:	f9 cf       	rjmp	.-14     	; 0x1c30a <startUDP(unsigned char, unsigned char*, unsigned int)+0x3c>

0001c318 <sendUDP(unsigned char)>:
_Z7sendUDPh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:392
    return 1;
  }
}

int sendUDP(SOCKET s)
{
   1c318:	cf 93       	push	r28
   1c31a:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:393
  w5500.execCmdSn(s, Sock_SEND);
   1c31c:	40 e2       	ldi	r20, 0x20	; 32
   1c31e:	50 e0       	ldi	r21, 0x00	; 0
   1c320:	68 2f       	mov	r22, r24
   1c322:	83 e7       	ldi	r24, 0x73	; 115
   1c324:	92 e1       	ldi	r25, 0x12	; 18
   1c326:	0e 94 f2 e3 	call	0x1c7e4	; 0x1c7e4 <W5500Class::execCmdSn(unsigned char, SockCMD)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:396
		
  /* +2008.01 bj */
  while ( (w5500.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
   1c32a:	8c 2f       	mov	r24, r28
   1c32c:	0e 94 ca df 	call	0x1bf94	; 0x1bf94 <W5500Class::readSnIR(unsigned char)>
   1c330:	84 fd       	sbrc	r24, 4
   1c332:	0d c0       	rjmp	.+26     	; 0x1c34e <sendUDP(unsigned char)+0x36>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:398
  {
    if (w5500.readSnIR(s) & SnIR::TIMEOUT)
   1c334:	8c 2f       	mov	r24, r28
   1c336:	0e 94 ca df 	call	0x1bf94	; 0x1bf94 <W5500Class::readSnIR(unsigned char)>
   1c33a:	83 ff       	sbrs	r24, 3
   1c33c:	f6 cf       	rjmp	.-20     	; 0x1c32a <sendUDP(unsigned char)+0x12>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:401
    {
      /* +2008.01 [bj]: clear interrupt */
      w5500.writeSnIR(s, (SnIR::SEND_OK|SnIR::TIMEOUT));
   1c33e:	68 e1       	ldi	r22, 0x18	; 24
   1c340:	8c 2f       	mov	r24, r28
   1c342:	0e 94 e8 df 	call	0x1bfd0	; 0x1bfd0 <W5500Class::writeSnIR(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:402
      return 0;
   1c346:	90 e0       	ldi	r25, 0x00	; 0
   1c348:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:411
  /* +2008.01 bj */	
  w5500.writeSnIR(s, SnIR::SEND_OK);

  /* Sent ok */
  return 1;
}
   1c34a:	cf 91       	pop	r28
   1c34c:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:407
      return 0;
    }
  }

  /* +2008.01 bj */	
  w5500.writeSnIR(s, SnIR::SEND_OK);
   1c34e:	60 e1       	ldi	r22, 0x10	; 16
   1c350:	8c 2f       	mov	r24, r28
   1c352:	0e 94 e8 df 	call	0x1bfd0	; 0x1bfd0 <W5500Class::writeSnIR(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:410

  /* Sent ok */
  return 1;
   1c356:	81 e0       	ldi	r24, 0x01	; 1
   1c358:	90 e0       	ldi	r25, 0x00	; 0
   1c35a:	f7 cf       	rjmp	.-18     	; 0x1c34a <sendUDP(unsigned char)+0x32>

0001c35c <SPIClass::beginTransaction(SPISettings)>:
_ZN8SPIClass16beginTransactionE11SPISettings():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:184
    uint8_t _data = SPI.transfer(0);
    resetSS();
    SPI.endTransaction();

    return _data;
}
   1c35c:	20 91 25 12 	lds	r18, 0x1225	; 0x801225 <SPIClass::interruptMode>
   1c360:	22 23       	and	r18, r18
   1c362:	81 f0       	breq	.+32     	; 0x1c384 <SPIClass::beginTransaction(SPISettings)+0x28>
   1c364:	3f b7       	in	r19, 0x3f	; 63
   1c366:	f8 94       	cli
   1c368:	20 91 25 12 	lds	r18, 0x1225	; 0x801225 <SPIClass::interruptMode>
   1c36c:	21 30       	cpi	r18, 0x01	; 1
   1c36e:	69 f4       	brne	.+26     	; 0x1c38a <SPIClass::beginTransaction(SPISettings)+0x2e>
   1c370:	2d b3       	in	r18, 0x1d	; 29
   1c372:	20 93 23 12 	sts	0x1223, r18	; 0x801223 <SPIClass::interruptSave>
   1c376:	4d b3       	in	r20, 0x1d	; 29
   1c378:	20 91 24 12 	lds	r18, 0x1224	; 0x801224 <SPIClass::interruptMask>
   1c37c:	20 95       	com	r18
   1c37e:	24 23       	and	r18, r20
   1c380:	2d bb       	out	0x1d, r18	; 29
   1c382:	3f bf       	out	0x3f, r19	; 63
   1c384:	8c bd       	out	0x2c, r24	; 44
   1c386:	9d bd       	out	0x2d, r25	; 45
   1c388:	08 95       	ret
   1c38a:	30 93 23 12 	sts	0x1223, r19	; 0x801223 <SPIClass::interruptSave>
   1c38e:	fa cf       	rjmp	.-12     	; 0x1c384 <SPIClass::beginTransaction(SPISettings)+0x28>

0001c390 <SPIClass::transfer(unsigned char)>:
_ZN8SPIClass8transferEh():
   1c390:	8e bd       	out	0x2e, r24	; 46
   1c392:	00 00       	nop
   1c394:	0d b4       	in	r0, 0x2d	; 45
   1c396:	07 fe       	sbrs	r0, 7
   1c398:	fd cf       	rjmp	.-6      	; 0x1c394 <SPIClass::transfer(unsigned char)+0x4>
   1c39a:	8e b5       	in	r24, 0x2e	; 46
   1c39c:	08 95       	ret

0001c39e <SPIClass::endTransaction()>:
_ZN8SPIClass14endTransactionEv():
   1c39e:	80 91 25 12 	lds	r24, 0x1225	; 0x801225 <SPIClass::interruptMode>
   1c3a2:	88 23       	and	r24, r24
   1c3a4:	61 f0       	breq	.+24     	; 0x1c3be <SPIClass::endTransaction()+0x20>
   1c3a6:	9f b7       	in	r25, 0x3f	; 63
   1c3a8:	f8 94       	cli
   1c3aa:	20 91 25 12 	lds	r18, 0x1225	; 0x801225 <SPIClass::interruptMode>
   1c3ae:	80 91 23 12 	lds	r24, 0x1223	; 0x801223 <SPIClass::interruptSave>
   1c3b2:	21 30       	cpi	r18, 0x01	; 1
   1c3b4:	19 f4       	brne	.+6      	; 0x1c3bc <SPIClass::endTransaction()+0x1e>
   1c3b6:	8d bb       	out	0x1d, r24	; 29
   1c3b8:	9f bf       	out	0x3f, r25	; 63
   1c3ba:	08 95       	ret
   1c3bc:	8f bf       	out	0x3f, r24	; 63
   1c3be:	08 95       	ret

0001c3c0 <W5500Class::setSS()>:
_ZN10W5500Class5setSSEv():
   1c3c0:	60 e0       	ldi	r22, 0x00	; 0
   1c3c2:	80 91 70 12 	lds	r24, 0x1270	; 0x801270 <SPI_CS>
   1c3c6:	0d 94 60 10 	jmp	0x220c0	; 0x220c0 <digitalWrite>

0001c3ca <W5500Class::resetSS()>:
_ZN10W5500Class7resetSSEv():
   1c3ca:	61 e0       	ldi	r22, 0x01	; 1
   1c3cc:	80 91 70 12 	lds	r24, 0x1270	; 0x801270 <SPI_CS>
   1c3d0:	0d 94 60 10 	jmp	0x220c0	; 0x220c0 <digitalWrite>

0001c3d4 <W5500Class::write(unsigned int, unsigned char, unsigned char)>:
_ZN10W5500Class5writeEjhh():
   1c3d4:	0f 93       	push	r16
   1c3d6:	1f 93       	push	r17
   1c3d8:	cf 93       	push	r28
   1c3da:	df 93       	push	r29
   1c3dc:	18 2f       	mov	r17, r24
   1c3de:	09 2f       	mov	r16, r25
   1c3e0:	d6 2f       	mov	r29, r22
   1c3e2:	c4 2f       	mov	r28, r20
   1c3e4:	80 91 71 12 	lds	r24, 0x1271	; 0x801271 <wiznet_SPI_settings>
   1c3e8:	90 91 72 12 	lds	r25, 0x1272	; 0x801272 <wiznet_SPI_settings+0x1>
   1c3ec:	0e 94 ae e1 	call	0x1c35c	; 0x1c35c <SPIClass::beginTransaction(SPISettings)>
   1c3f0:	0e 94 e0 e1 	call	0x1c3c0	; 0x1c3c0 <W5500Class::setSS()>
   1c3f4:	80 2f       	mov	r24, r16
   1c3f6:	0e 94 c8 e1 	call	0x1c390	; 0x1c390 <SPIClass::transfer(unsigned char)>
   1c3fa:	81 2f       	mov	r24, r17
   1c3fc:	0e 94 c8 e1 	call	0x1c390	; 0x1c390 <SPIClass::transfer(unsigned char)>
   1c400:	8d 2f       	mov	r24, r29
   1c402:	0e 94 c8 e1 	call	0x1c390	; 0x1c390 <SPIClass::transfer(unsigned char)>
   1c406:	8c 2f       	mov	r24, r28
   1c408:	0e 94 c8 e1 	call	0x1c390	; 0x1c390 <SPIClass::transfer(unsigned char)>
   1c40c:	0e 94 e5 e1 	call	0x1c3ca	; 0x1c3ca <W5500Class::resetSS()>
   1c410:	0e 94 cf e1 	call	0x1c39e	; 0x1c39e <SPIClass::endTransaction()>
   1c414:	81 e0       	ldi	r24, 0x01	; 1
   1c416:	df 91       	pop	r29
   1c418:	cf 91       	pop	r28
   1c41a:	1f 91       	pop	r17
   1c41c:	0f 91       	pop	r16
   1c41e:	08 95       	ret

0001c420 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>:
_ZN10W5500Class5writeEjhPKhj():
   1c420:	df 92       	push	r13
   1c422:	ef 92       	push	r14
   1c424:	ff 92       	push	r15
   1c426:	0f 93       	push	r16
   1c428:	1f 93       	push	r17
   1c42a:	cf 93       	push	r28
   1c42c:	df 93       	push	r29
   1c42e:	d8 2f       	mov	r29, r24
   1c430:	d9 2e       	mov	r13, r25
   1c432:	c6 2f       	mov	r28, r22
   1c434:	7a 01       	movw	r14, r20
   1c436:	89 01       	movw	r16, r18
   1c438:	80 91 71 12 	lds	r24, 0x1271	; 0x801271 <wiznet_SPI_settings>
   1c43c:	90 91 72 12 	lds	r25, 0x1272	; 0x801272 <wiznet_SPI_settings+0x1>
   1c440:	0e 94 ae e1 	call	0x1c35c	; 0x1c35c <SPIClass::beginTransaction(SPISettings)>
   1c444:	0e 94 e0 e1 	call	0x1c3c0	; 0x1c3c0 <W5500Class::setSS()>
   1c448:	8d 2d       	mov	r24, r13
   1c44a:	0e 94 c8 e1 	call	0x1c390	; 0x1c390 <SPIClass::transfer(unsigned char)>
   1c44e:	8d 2f       	mov	r24, r29
   1c450:	0e 94 c8 e1 	call	0x1c390	; 0x1c390 <SPIClass::transfer(unsigned char)>
   1c454:	8c 2f       	mov	r24, r28
   1c456:	0e 94 c8 e1 	call	0x1c390	; 0x1c390 <SPIClass::transfer(unsigned char)>
   1c45a:	e7 01       	movw	r28, r14
   1c45c:	e0 0e       	add	r14, r16
   1c45e:	f1 1e       	adc	r15, r17
   1c460:	ce 15       	cp	r28, r14
   1c462:	df 05       	cpc	r29, r15
   1c464:	21 f0       	breq	.+8      	; 0x1c46e <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)+0x4e>
   1c466:	89 91       	ld	r24, Y+
   1c468:	0e 94 c8 e1 	call	0x1c390	; 0x1c390 <SPIClass::transfer(unsigned char)>
   1c46c:	f9 cf       	rjmp	.-14     	; 0x1c460 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)+0x40>
   1c46e:	0e 94 e5 e1 	call	0x1c3ca	; 0x1c3ca <W5500Class::resetSS()>
   1c472:	0e 94 cf e1 	call	0x1c39e	; 0x1c39e <SPIClass::endTransaction()>
   1c476:	c8 01       	movw	r24, r16
   1c478:	df 91       	pop	r29
   1c47a:	cf 91       	pop	r28
   1c47c:	1f 91       	pop	r17
   1c47e:	0f 91       	pop	r16
   1c480:	ff 90       	pop	r15
   1c482:	ef 90       	pop	r14
   1c484:	df 90       	pop	r13
   1c486:	08 95       	ret

0001c488 <W5500Class::read(unsigned int, unsigned char)>:
_ZN10W5500Class4readEjh():
   1c488:	1f 93       	push	r17
   1c48a:	cf 93       	push	r28
   1c48c:	df 93       	push	r29
   1c48e:	d8 2f       	mov	r29, r24
   1c490:	19 2f       	mov	r17, r25
   1c492:	c6 2f       	mov	r28, r22
   1c494:	80 91 71 12 	lds	r24, 0x1271	; 0x801271 <wiznet_SPI_settings>
   1c498:	90 91 72 12 	lds	r25, 0x1272	; 0x801272 <wiznet_SPI_settings+0x1>
   1c49c:	0e 94 ae e1 	call	0x1c35c	; 0x1c35c <SPIClass::beginTransaction(SPISettings)>
   1c4a0:	0e 94 e0 e1 	call	0x1c3c0	; 0x1c3c0 <W5500Class::setSS()>
   1c4a4:	81 2f       	mov	r24, r17
   1c4a6:	0e 94 c8 e1 	call	0x1c390	; 0x1c390 <SPIClass::transfer(unsigned char)>
   1c4aa:	8d 2f       	mov	r24, r29
   1c4ac:	0e 94 c8 e1 	call	0x1c390	; 0x1c390 <SPIClass::transfer(unsigned char)>
   1c4b0:	8c 2f       	mov	r24, r28
   1c4b2:	0e 94 c8 e1 	call	0x1c390	; 0x1c390 <SPIClass::transfer(unsigned char)>
   1c4b6:	80 e0       	ldi	r24, 0x00	; 0
   1c4b8:	0e 94 c8 e1 	call	0x1c390	; 0x1c390 <SPIClass::transfer(unsigned char)>
   1c4bc:	c8 2f       	mov	r28, r24
   1c4be:	0e 94 e5 e1 	call	0x1c3ca	; 0x1c3ca <W5500Class::resetSS()>
   1c4c2:	0e 94 cf e1 	call	0x1c39e	; 0x1c39e <SPIClass::endTransaction()>
   1c4c6:	8c 2f       	mov	r24, r28
   1c4c8:	df 91       	pop	r29
   1c4ca:	cf 91       	pop	r28
   1c4cc:	1f 91       	pop	r17
   1c4ce:	08 95       	ret

0001c4d0 <W5500Class::init(unsigned char)>:
_ZN10W5500Class4initEh():
   1c4d0:	0f 93       	push	r16
   1c4d2:	1f 93       	push	r17
   1c4d4:	cf 93       	push	r28
   1c4d6:	60 93 70 12 	sts	0x1270, r22	; 0x801270 <SPI_CS>
   1c4da:	68 ee       	ldi	r22, 0xE8	; 232
   1c4dc:	73 e0       	ldi	r23, 0x03	; 3
   1c4de:	80 e0       	ldi	r24, 0x00	; 0
   1c4e0:	90 e0       	ldi	r25, 0x00	; 0
   1c4e2:	0f 94 33 0f 	call	0x21e66	; 0x21e66 <delay>
_ZN10W5500Class6initSSEv():
   1c4e6:	61 e0       	ldi	r22, 0x01	; 1
   1c4e8:	80 91 70 12 	lds	r24, 0x1270	; 0x801270 <SPI_CS>
   1c4ec:	0f 94 24 10 	call	0x22048	; 0x22048 <pinMode>
_ZN10W5500Class4initEh():
   1c4f0:	0e 94 9f d4 	call	0x1a93e	; 0x1a93e <SPIClass::begin()>
_ZN10W5500Class6readMREv():
   1c4f4:	60 e0       	ldi	r22, 0x00	; 0
   1c4f6:	90 e0       	ldi	r25, 0x00	; 0
   1c4f8:	80 e0       	ldi	r24, 0x00	; 0
   1c4fa:	0e 94 44 e2 	call	0x1c488	; 0x1c488 <W5500Class::read(unsigned int, unsigned char)>
_ZN10W5500Class7swResetEv():
   1c4fe:	48 2f       	mov	r20, r24
   1c500:	40 68       	ori	r20, 0x80	; 128
_ZN10W5500Class7writeMREh():
   1c502:	64 e0       	ldi	r22, 0x04	; 4
   1c504:	90 e0       	ldi	r25, 0x00	; 0
   1c506:	80 e0       	ldi	r24, 0x00	; 0
   1c508:	0e 94 ea e1 	call	0x1c3d4	; 0x1c3d4 <W5500Class::write(unsigned int, unsigned char, unsigned char)>
   1c50c:	cc e0       	ldi	r28, 0x0C	; 12
   1c50e:	08 e0       	ldi	r16, 0x08	; 8
   1c510:	10 e0       	ldi	r17, 0x00	; 0
_ZN10W5500Class4initEh():
   1c512:	42 e0       	ldi	r20, 0x02	; 2
   1c514:	6c 2f       	mov	r22, r28
   1c516:	8e e1       	ldi	r24, 0x1E	; 30
   1c518:	90 e0       	ldi	r25, 0x00	; 0
   1c51a:	0e 94 ea e1 	call	0x1c3d4	; 0x1c3d4 <W5500Class::write(unsigned int, unsigned char, unsigned char)>
   1c51e:	42 e0       	ldi	r20, 0x02	; 2
   1c520:	6c 2f       	mov	r22, r28
   1c522:	8f e1       	ldi	r24, 0x1F	; 31
   1c524:	90 e0       	ldi	r25, 0x00	; 0
   1c526:	0e 94 ea e1 	call	0x1c3d4	; 0x1c3d4 <W5500Class::write(unsigned int, unsigned char, unsigned char)>
   1c52a:	01 50       	subi	r16, 0x01	; 1
   1c52c:	11 09       	sbc	r17, r1
   1c52e:	c0 5e       	subi	r28, 0xE0	; 224
   1c530:	01 15       	cp	r16, r1
   1c532:	11 05       	cpc	r17, r1
   1c534:	71 f7       	brne	.-36     	; 0x1c512 <W5500Class::init(unsigned char)+0x42>
   1c536:	cf 91       	pop	r28
   1c538:	1f 91       	pop	r17
   1c53a:	0f 91       	pop	r16
   1c53c:	08 95       	ret

0001c53e <W5500Class::readSnTX_FSR(unsigned char)>:
_ZN10W5500Class12readSnTX_FSREh():
   1c53e:	1f 93       	push	r17
   1c540:	cf 93       	push	r28
   1c542:	df 93       	push	r29
   1c544:	18 2f       	mov	r17, r24
   1c546:	60 e2       	ldi	r22, 0x20	; 32
   1c548:	70 e0       	ldi	r23, 0x00	; 0
   1c54a:	0e 94 c1 df 	call	0x1bf82	; 0x1bf82 <W5500Class::readSn(unsigned char, unsigned int)>
   1c54e:	c8 2f       	mov	r28, r24
   1c550:	d0 e0       	ldi	r29, 0x00	; 0
   1c552:	dc 2f       	mov	r29, r28
   1c554:	cc 27       	eor	r28, r28
   1c556:	61 e2       	ldi	r22, 0x21	; 33
   1c558:	70 e0       	ldi	r23, 0x00	; 0
   1c55a:	81 2f       	mov	r24, r17
   1c55c:	0e 94 c1 df 	call	0x1bf82	; 0x1bf82 <W5500Class::readSn(unsigned char, unsigned int)>
   1c560:	8c 0f       	add	r24, r28
   1c562:	9d 2f       	mov	r25, r29
   1c564:	91 1d       	adc	r25, r1
   1c566:	df 91       	pop	r29
   1c568:	cf 91       	pop	r28
   1c56a:	1f 91       	pop	r17
   1c56c:	08 95       	ret

0001c56e <W5500Class::getTXFreeSize(unsigned char)>:
_ZN10W5500Class13getTXFreeSizeEh():
   1c56e:	ff 92       	push	r15
   1c570:	0f 93       	push	r16
   1c572:	1f 93       	push	r17
   1c574:	cf 93       	push	r28
   1c576:	df 93       	push	r29
   1c578:	f6 2e       	mov	r15, r22
   1c57a:	d0 e0       	ldi	r29, 0x00	; 0
   1c57c:	c0 e0       	ldi	r28, 0x00	; 0
   1c57e:	8f 2d       	mov	r24, r15
   1c580:	0e 94 9f e2 	call	0x1c53e	; 0x1c53e <W5500Class::readSnTX_FSR(unsigned char)>
   1c584:	8c 01       	movw	r16, r24
   1c586:	89 2b       	or	r24, r25
   1c588:	21 f0       	breq	.+8      	; 0x1c592 <W5500Class::getTXFreeSize(unsigned char)+0x24>
   1c58a:	8f 2d       	mov	r24, r15
   1c58c:	0e 94 9f e2 	call	0x1c53e	; 0x1c53e <W5500Class::readSnTX_FSR(unsigned char)>
   1c590:	ec 01       	movw	r28, r24
   1c592:	c0 17       	cp	r28, r16
   1c594:	d1 07       	cpc	r29, r17
   1c596:	99 f7       	brne	.-26     	; 0x1c57e <W5500Class::getTXFreeSize(unsigned char)+0x10>
   1c598:	ce 01       	movw	r24, r28
   1c59a:	df 91       	pop	r29
   1c59c:	cf 91       	pop	r28
   1c59e:	1f 91       	pop	r17
   1c5a0:	0f 91       	pop	r16
   1c5a2:	ff 90       	pop	r15
   1c5a4:	08 95       	ret

0001c5a6 <W5500Class::readSnRX_RSR(unsigned char)>:
_ZN10W5500Class12readSnRX_RSREh():
   1c5a6:	1f 93       	push	r17
   1c5a8:	cf 93       	push	r28
   1c5aa:	df 93       	push	r29
   1c5ac:	18 2f       	mov	r17, r24
   1c5ae:	66 e2       	ldi	r22, 0x26	; 38
   1c5b0:	70 e0       	ldi	r23, 0x00	; 0
   1c5b2:	0e 94 c1 df 	call	0x1bf82	; 0x1bf82 <W5500Class::readSn(unsigned char, unsigned int)>
   1c5b6:	c8 2f       	mov	r28, r24
   1c5b8:	d0 e0       	ldi	r29, 0x00	; 0
   1c5ba:	dc 2f       	mov	r29, r28
   1c5bc:	cc 27       	eor	r28, r28
   1c5be:	67 e2       	ldi	r22, 0x27	; 39
   1c5c0:	70 e0       	ldi	r23, 0x00	; 0
   1c5c2:	81 2f       	mov	r24, r17
   1c5c4:	0e 94 c1 df 	call	0x1bf82	; 0x1bf82 <W5500Class::readSn(unsigned char, unsigned int)>
   1c5c8:	8c 0f       	add	r24, r28
   1c5ca:	9d 2f       	mov	r25, r29
   1c5cc:	91 1d       	adc	r25, r1
   1c5ce:	df 91       	pop	r29
   1c5d0:	cf 91       	pop	r28
   1c5d2:	1f 91       	pop	r17
   1c5d4:	08 95       	ret

0001c5d6 <W5500Class::getRXReceivedSize(unsigned char)>:
_ZN10W5500Class17getRXReceivedSizeEh():
   1c5d6:	ff 92       	push	r15
   1c5d8:	0f 93       	push	r16
   1c5da:	1f 93       	push	r17
   1c5dc:	cf 93       	push	r28
   1c5de:	df 93       	push	r29
   1c5e0:	f6 2e       	mov	r15, r22
   1c5e2:	d0 e0       	ldi	r29, 0x00	; 0
   1c5e4:	c0 e0       	ldi	r28, 0x00	; 0
   1c5e6:	8f 2d       	mov	r24, r15
   1c5e8:	0e 94 d3 e2 	call	0x1c5a6	; 0x1c5a6 <W5500Class::readSnRX_RSR(unsigned char)>
   1c5ec:	8c 01       	movw	r16, r24
   1c5ee:	89 2b       	or	r24, r25
   1c5f0:	21 f0       	breq	.+8      	; 0x1c5fa <W5500Class::getRXReceivedSize(unsigned char)+0x24>
   1c5f2:	8f 2d       	mov	r24, r15
   1c5f4:	0e 94 d3 e2 	call	0x1c5a6	; 0x1c5a6 <W5500Class::readSnRX_RSR(unsigned char)>
   1c5f8:	ec 01       	movw	r28, r24
   1c5fa:	c0 17       	cp	r28, r16
   1c5fc:	d1 07       	cpc	r29, r17
   1c5fe:	99 f7       	brne	.-26     	; 0x1c5e6 <W5500Class::getRXReceivedSize(unsigned char)+0x10>
   1c600:	ce 01       	movw	r24, r28
   1c602:	df 91       	pop	r29
   1c604:	cf 91       	pop	r28
   1c606:	1f 91       	pop	r17
   1c608:	0f 91       	pop	r16
   1c60a:	ff 90       	pop	r15
   1c60c:	08 95       	ret

0001c60e <W5500Class::send_data_processing_offset(unsigned char, unsigned int, unsigned char const*, unsigned int)>:
_ZN10W5500Class27send_data_processing_offsetEhjPKhj():
   1c60e:	bf 92       	push	r11
   1c610:	cf 92       	push	r12
   1c612:	df 92       	push	r13
   1c614:	ef 92       	push	r14
   1c616:	ff 92       	push	r15
   1c618:	0f 93       	push	r16
   1c61a:	1f 93       	push	r17
   1c61c:	cf 93       	push	r28
   1c61e:	df 93       	push	r29
   1c620:	b6 2e       	mov	r11, r22
   1c622:	7a 01       	movw	r14, r20
   1c624:	69 01       	movw	r12, r18
_ZN10W5500Class11readSnTX_WREh():
   1c626:	64 e2       	ldi	r22, 0x24	; 36
   1c628:	70 e0       	ldi	r23, 0x00	; 0
   1c62a:	8b 2d       	mov	r24, r11
   1c62c:	0e 94 c1 df 	call	0x1bf82	; 0x1bf82 <W5500Class::readSn(unsigned char, unsigned int)>
   1c630:	c8 2f       	mov	r28, r24
   1c632:	65 e2       	ldi	r22, 0x25	; 37
   1c634:	70 e0       	ldi	r23, 0x00	; 0
   1c636:	8b 2d       	mov	r24, r11
   1c638:	0e 94 c1 df 	call	0x1bf82	; 0x1bf82 <W5500Class::readSn(unsigned char, unsigned int)>
   1c63c:	d0 e0       	ldi	r29, 0x00	; 0
   1c63e:	dc 2f       	mov	r29, r28
   1c640:	cc 27       	eor	r28, r28
_ZN10W5500Class27send_data_processing_offsetEhjPKhj():
   1c642:	8e 0d       	add	r24, r14
   1c644:	9f 2d       	mov	r25, r15
   1c646:	91 1d       	adc	r25, r1
   1c648:	c8 0f       	add	r28, r24
   1c64a:	d9 1f       	adc	r29, r25
   1c64c:	6b 2d       	mov	r22, r11
   1c64e:	62 95       	swap	r22
   1c650:	66 0f       	add	r22, r22
   1c652:	60 7e       	andi	r22, 0xE0	; 224
   1c654:	6c 5e       	subi	r22, 0xEC	; 236
   1c656:	98 01       	movw	r18, r16
   1c658:	a6 01       	movw	r20, r12
   1c65a:	ce 01       	movw	r24, r28
   1c65c:	0e 94 10 e2 	call	0x1c420	; 0x1c420 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
   1c660:	0c 0f       	add	r16, r28
   1c662:	1d 1f       	adc	r17, r29
_ZN10W5500Class12writeSnTX_WREhj():
   1c664:	41 2f       	mov	r20, r17
   1c666:	64 e2       	ldi	r22, 0x24	; 36
   1c668:	70 e0       	ldi	r23, 0x00	; 0
   1c66a:	8b 2d       	mov	r24, r11
   1c66c:	0e 94 ce df 	call	0x1bf9c	; 0x1bf9c <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   1c670:	40 2f       	mov	r20, r16
   1c672:	65 e2       	ldi	r22, 0x25	; 37
   1c674:	70 e0       	ldi	r23, 0x00	; 0
   1c676:	8b 2d       	mov	r24, r11
_ZN10W5500Class27send_data_processing_offsetEhjPKhj():
   1c678:	df 91       	pop	r29
   1c67a:	cf 91       	pop	r28
   1c67c:	1f 91       	pop	r17
   1c67e:	0f 91       	pop	r16
   1c680:	ff 90       	pop	r15
   1c682:	ef 90       	pop	r14
   1c684:	df 90       	pop	r13
   1c686:	cf 90       	pop	r12
   1c688:	bf 90       	pop	r11
_ZN10W5500Class12writeSnTX_WREhj():
   1c68a:	0c 94 ce df 	jmp	0x1bf9c	; 0x1bf9c <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>

0001c68e <W5500Class::send_data_processing(unsigned char, unsigned char const*, unsigned int)>:
_ZN10W5500Class20send_data_processingEhPKhj():
   1c68e:	0f 93       	push	r16
   1c690:	1f 93       	push	r17
   1c692:	89 01       	movw	r16, r18
   1c694:	9a 01       	movw	r18, r20
   1c696:	50 e0       	ldi	r21, 0x00	; 0
   1c698:	40 e0       	ldi	r20, 0x00	; 0
   1c69a:	0e 94 07 e3 	call	0x1c60e	; 0x1c60e <W5500Class::send_data_processing_offset(unsigned char, unsigned int, unsigned char const*, unsigned int)>
   1c69e:	1f 91       	pop	r17
   1c6a0:	0f 91       	pop	r16
   1c6a2:	08 95       	ret

0001c6a4 <W5500Class::read(unsigned int, unsigned char, unsigned char*, unsigned int)>:
_ZN10W5500Class4readEjhPhj():
   1c6a4:	df 92       	push	r13
   1c6a6:	ef 92       	push	r14
   1c6a8:	ff 92       	push	r15
   1c6aa:	0f 93       	push	r16
   1c6ac:	1f 93       	push	r17
   1c6ae:	cf 93       	push	r28
   1c6b0:	df 93       	push	r29
   1c6b2:	d8 2f       	mov	r29, r24
   1c6b4:	d9 2e       	mov	r13, r25
   1c6b6:	c6 2f       	mov	r28, r22
   1c6b8:	7a 01       	movw	r14, r20
   1c6ba:	89 01       	movw	r16, r18
   1c6bc:	80 91 71 12 	lds	r24, 0x1271	; 0x801271 <wiznet_SPI_settings>
   1c6c0:	90 91 72 12 	lds	r25, 0x1272	; 0x801272 <wiznet_SPI_settings+0x1>
   1c6c4:	0e 94 ae e1 	call	0x1c35c	; 0x1c35c <SPIClass::beginTransaction(SPISettings)>
   1c6c8:	0e 94 e0 e1 	call	0x1c3c0	; 0x1c3c0 <W5500Class::setSS()>
   1c6cc:	8d 2d       	mov	r24, r13
   1c6ce:	0e 94 c8 e1 	call	0x1c390	; 0x1c390 <SPIClass::transfer(unsigned char)>
   1c6d2:	8d 2f       	mov	r24, r29
   1c6d4:	0e 94 c8 e1 	call	0x1c390	; 0x1c390 <SPIClass::transfer(unsigned char)>
   1c6d8:	8c 2f       	mov	r24, r28
   1c6da:	0e 94 c8 e1 	call	0x1c390	; 0x1c390 <SPIClass::transfer(unsigned char)>
   1c6de:	e7 01       	movw	r28, r14
   1c6e0:	e0 0e       	add	r14, r16
   1c6e2:	f1 1e       	adc	r15, r17
   1c6e4:	ce 15       	cp	r28, r14
   1c6e6:	df 05       	cpc	r29, r15
   1c6e8:	29 f0       	breq	.+10     	; 0x1c6f4 <W5500Class::read(unsigned int, unsigned char, unsigned char*, unsigned int)+0x50>
   1c6ea:	80 e0       	ldi	r24, 0x00	; 0
   1c6ec:	0e 94 c8 e1 	call	0x1c390	; 0x1c390 <SPIClass::transfer(unsigned char)>
   1c6f0:	89 93       	st	Y+, r24
   1c6f2:	f8 cf       	rjmp	.-16     	; 0x1c6e4 <W5500Class::read(unsigned int, unsigned char, unsigned char*, unsigned int)+0x40>
   1c6f4:	0e 94 e5 e1 	call	0x1c3ca	; 0x1c3ca <W5500Class::resetSS()>
   1c6f8:	0e 94 cf e1 	call	0x1c39e	; 0x1c39e <SPIClass::endTransaction()>
   1c6fc:	c8 01       	movw	r24, r16
   1c6fe:	df 91       	pop	r29
   1c700:	cf 91       	pop	r28
   1c702:	1f 91       	pop	r17
   1c704:	0f 91       	pop	r16
   1c706:	ff 90       	pop	r15
   1c708:	ef 90       	pop	r14
   1c70a:	df 90       	pop	r13
   1c70c:	08 95       	ret

0001c70e <W5500Class::read_data(unsigned char, unsigned int, unsigned char volatile*, unsigned int)>:
_ZN10W5500Class9read_dataEhjPVhj():
   1c70e:	0f 93       	push	r16
   1c710:	1f 93       	push	r17
   1c712:	cf 93       	push	r28
   1c714:	df 93       	push	r29
   1c716:	1f 92       	push	r1
   1c718:	1f 92       	push	r1
   1c71a:	cd b7       	in	r28, 0x3d	; 61
   1c71c:	de b7       	in	r29, 0x3e	; 62
   1c71e:	5a 83       	std	Y+2, r21	; 0x02
   1c720:	49 83       	std	Y+1, r20	; 0x01
   1c722:	a9 01       	movw	r20, r18
   1c724:	98 01       	movw	r18, r16
   1c726:	89 81       	ldd	r24, Y+1	; 0x01
   1c728:	9a 81       	ldd	r25, Y+2	; 0x02
   1c72a:	62 95       	swap	r22
   1c72c:	66 0f       	add	r22, r22
   1c72e:	60 7e       	andi	r22, 0xE0	; 224
   1c730:	68 5e       	subi	r22, 0xE8	; 232
   1c732:	0f 90       	pop	r0
   1c734:	0f 90       	pop	r0
   1c736:	df 91       	pop	r29
   1c738:	cf 91       	pop	r28
   1c73a:	1f 91       	pop	r17
   1c73c:	0f 91       	pop	r16
   1c73e:	0c 94 52 e3 	jmp	0x1c6a4	; 0x1c6a4 <W5500Class::read(unsigned int, unsigned char, unsigned char*, unsigned int)>

0001c742 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char)>:
_ZN10W5500Class20recv_data_processingEhPhjh():
   1c742:	8f 92       	push	r8
   1c744:	9f 92       	push	r9
   1c746:	af 92       	push	r10
   1c748:	bf 92       	push	r11
   1c74a:	cf 92       	push	r12
   1c74c:	df 92       	push	r13
   1c74e:	ef 92       	push	r14
   1c750:	ff 92       	push	r15
   1c752:	0f 93       	push	r16
   1c754:	1f 93       	push	r17
   1c756:	cf 93       	push	r28
   1c758:	df 93       	push	r29
   1c75a:	6c 01       	movw	r12, r24
   1c75c:	96 2e       	mov	r9, r22
   1c75e:	5a 01       	movw	r10, r20
   1c760:	79 01       	movw	r14, r18
   1c762:	80 2e       	mov	r8, r16
_ZN10W5500Class11readSnRX_RDEh():
   1c764:	68 e2       	ldi	r22, 0x28	; 40
   1c766:	70 e0       	ldi	r23, 0x00	; 0
   1c768:	89 2d       	mov	r24, r9
   1c76a:	0e 94 c1 df 	call	0x1bf82	; 0x1bf82 <W5500Class::readSn(unsigned char, unsigned int)>
   1c76e:	c8 2f       	mov	r28, r24
   1c770:	d0 e0       	ldi	r29, 0x00	; 0
   1c772:	dc 2f       	mov	r29, r28
   1c774:	cc 27       	eor	r28, r28
   1c776:	69 e2       	ldi	r22, 0x29	; 41
   1c778:	70 e0       	ldi	r23, 0x00	; 0
   1c77a:	89 2d       	mov	r24, r9
   1c77c:	0e 94 c1 df 	call	0x1bf82	; 0x1bf82 <W5500Class::readSn(unsigned char, unsigned int)>
   1c780:	c8 0f       	add	r28, r24
   1c782:	d1 1d       	adc	r29, r1
_ZN10W5500Class20recv_data_processingEhPhjh():
   1c784:	87 01       	movw	r16, r14
   1c786:	95 01       	movw	r18, r10
   1c788:	ae 01       	movw	r20, r28
   1c78a:	69 2d       	mov	r22, r9
   1c78c:	c6 01       	movw	r24, r12
   1c78e:	0e 94 87 e3 	call	0x1c70e	; 0x1c70e <W5500Class::read_data(unsigned char, unsigned int, unsigned char volatile*, unsigned int)>
   1c792:	81 10       	cpse	r8, r1
   1c794:	1a c0       	rjmp	.+52     	; 0x1c7ca <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char)+0x88>
   1c796:	ce 0d       	add	r28, r14
   1c798:	df 1d       	adc	r29, r15
_ZN10W5500Class12writeSnRX_RDEhj():
   1c79a:	4d 2f       	mov	r20, r29
   1c79c:	68 e2       	ldi	r22, 0x28	; 40
   1c79e:	70 e0       	ldi	r23, 0x00	; 0
   1c7a0:	89 2d       	mov	r24, r9
   1c7a2:	0e 94 ce df 	call	0x1bf9c	; 0x1bf9c <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   1c7a6:	4c 2f       	mov	r20, r28
   1c7a8:	69 e2       	ldi	r22, 0x29	; 41
   1c7aa:	70 e0       	ldi	r23, 0x00	; 0
   1c7ac:	89 2d       	mov	r24, r9
_ZN10W5500Class20recv_data_processingEhPhjh():
   1c7ae:	df 91       	pop	r29
   1c7b0:	cf 91       	pop	r28
   1c7b2:	1f 91       	pop	r17
   1c7b4:	0f 91       	pop	r16
   1c7b6:	ff 90       	pop	r15
   1c7b8:	ef 90       	pop	r14
   1c7ba:	df 90       	pop	r13
   1c7bc:	cf 90       	pop	r12
   1c7be:	bf 90       	pop	r11
   1c7c0:	af 90       	pop	r10
   1c7c2:	9f 90       	pop	r9
   1c7c4:	8f 90       	pop	r8
_ZN10W5500Class12writeSnRX_RDEhj():
   1c7c6:	0c 94 ce df 	jmp	0x1bf9c	; 0x1bf9c <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN10W5500Class20recv_data_processingEhPhjh():
   1c7ca:	df 91       	pop	r29
   1c7cc:	cf 91       	pop	r28
   1c7ce:	1f 91       	pop	r17
   1c7d0:	0f 91       	pop	r16
   1c7d2:	ff 90       	pop	r15
   1c7d4:	ef 90       	pop	r14
   1c7d6:	df 90       	pop	r13
   1c7d8:	cf 90       	pop	r12
   1c7da:	bf 90       	pop	r11
   1c7dc:	af 90       	pop	r10
   1c7de:	9f 90       	pop	r9
   1c7e0:	8f 90       	pop	r8
   1c7e2:	08 95       	ret

0001c7e4 <W5500Class::execCmdSn(unsigned char, SockCMD)>:
_ZN10W5500Class9execCmdSnEh7SockCMD():
   1c7e4:	cf 93       	push	r28
   1c7e6:	c6 2f       	mov	r28, r22
_ZN10W5500Class9writeSnCREhh():
   1c7e8:	61 e0       	ldi	r22, 0x01	; 1
   1c7ea:	70 e0       	ldi	r23, 0x00	; 0
   1c7ec:	8c 2f       	mov	r24, r28
   1c7ee:	0e 94 ce df 	call	0x1bf9c	; 0x1bf9c <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN10W5500Class8readSnCREh():
   1c7f2:	61 e0       	ldi	r22, 0x01	; 1
   1c7f4:	70 e0       	ldi	r23, 0x00	; 0
   1c7f6:	8c 2f       	mov	r24, r28
   1c7f8:	0e 94 c1 df 	call	0x1bf82	; 0x1bf82 <W5500Class::readSn(unsigned char, unsigned int)>
_ZN10W5500Class9execCmdSnEh7SockCMD():
   1c7fc:	81 11       	cpse	r24, r1
   1c7fe:	f9 cf       	rjmp	.-14     	; 0x1c7f2 <W5500Class::execCmdSn(unsigned char, SockCMD)+0xe>
   1c800:	cf 91       	pop	r28
   1c802:	08 95       	ret

0001c804 <_GLOBAL__sub_I_w5500>:
_ZN11SPISettings17init_AlwaysInlineEmhh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:149

    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
   1c804:	e1 e7       	ldi	r30, 0x71	; 113
   1c806:	f2 e1       	ldi	r31, 0x12	; 18
   1c808:	80 e5       	ldi	r24, 0x50	; 80
   1c80a:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:151
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    spsr = clockDiv & SPI_2XCLOCK_MASK;
   1c80c:	81 e0       	ldi	r24, 0x01	; 1
   1c80e:	81 83       	std	Z+1, r24	; 0x01
_GLOBAL__sub_I_w5500():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:184
   1c810:	08 95       	ret

0001c812 <EEPROMreadFloat(unsigned int)>:
_Z15EEPROMreadFloatj():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:98
    uint8_t b[4];
    float f;
  } data;
  data.f = x;
  for (int i = 0; i < 4; i++) ar[i] = data.b[i];
}
   1c812:	cf 92       	push	r12
   1c814:	df 92       	push	r13
   1c816:	ef 92       	push	r14
   1c818:	ff 92       	push	r15
   1c81a:	0f 93       	push	r16
   1c81c:	1f 93       	push	r17
   1c81e:	cf 93       	push	r28
   1c820:	df 93       	push	r29
   1c822:	00 d0       	rcall	.+0      	; 0x1c824 <EEPROMreadFloat(unsigned int)+0x12>
   1c824:	1f 92       	push	r1
   1c826:	cd b7       	in	r28, 0x3d	; 61
   1c828:	de b7       	in	r29, 0x3e	; 62
   1c82a:	7e 01       	movw	r14, r28
   1c82c:	25 e0       	ldi	r18, 0x05	; 5
   1c82e:	e2 0e       	add	r14, r18
   1c830:	f1 1c       	adc	r15, r1
   1c832:	8e 01       	movw	r16, r28
   1c834:	0f 5f       	subi	r16, 0xFF	; 255
   1c836:	1f 4f       	sbci	r17, 0xFF	; 255
_ZNK5EERefdeEv():
   1c838:	6c 01       	movw	r12, r24
   1c83a:	c0 1a       	sub	r12, r16
   1c83c:	d1 0a       	sbc	r13, r17
   1c83e:	c6 01       	movw	r24, r12
   1c840:	80 0f       	add	r24, r16
   1c842:	91 1f       	adc	r25, r17
   1c844:	0f 94 6e 22 	call	0x244dc	; 0x244dc <eeprom_read_byte>
_Z15EEPROMreadFloatj():
   1c848:	f8 01       	movw	r30, r16
   1c84a:	81 93       	st	Z+, r24
   1c84c:	8f 01       	movw	r16, r30
   1c84e:	ee 15       	cp	r30, r14
   1c850:	ff 05       	cpc	r31, r15
   1c852:	a9 f7       	brne	.-22     	; 0x1c83e <EEPROMreadFloat(unsigned int)+0x2c>
   1c854:	69 81       	ldd	r22, Y+1	; 0x01
   1c856:	7a 81       	ldd	r23, Y+2	; 0x02
   1c858:	8b 81       	ldd	r24, Y+3	; 0x03
   1c85a:	9c 81       	ldd	r25, Y+4	; 0x04
   1c85c:	0f 90       	pop	r0
   1c85e:	0f 90       	pop	r0
   1c860:	0f 90       	pop	r0
   1c862:	0f 90       	pop	r0
   1c864:	df 91       	pop	r29
   1c866:	cf 91       	pop	r28
   1c868:	1f 91       	pop	r17
   1c86a:	0f 91       	pop	r16
   1c86c:	ff 90       	pop	r15
   1c86e:	ef 90       	pop	r14
   1c870:	df 90       	pop	r13
   1c872:	cf 90       	pop	r12
   1c874:	08 95       	ret

0001c876 <EEPROMwriteFloat(unsigned int, float)>:
_Z16EEPROMwriteFloatjf():
   1c876:	cf 92       	push	r12
   1c878:	df 92       	push	r13
   1c87a:	ef 92       	push	r14
   1c87c:	ff 92       	push	r15
   1c87e:	0f 93       	push	r16
   1c880:	1f 93       	push	r17
   1c882:	cf 93       	push	r28
   1c884:	df 93       	push	r29
   1c886:	00 d0       	rcall	.+0      	; 0x1c888 <EEPROMwriteFloat(unsigned int, float)+0x12>
   1c888:	1f 92       	push	r1
   1c88a:	cd b7       	in	r28, 0x3d	; 61
   1c88c:	de b7       	in	r29, 0x3e	; 62
   1c88e:	6c 01       	movw	r12, r24
   1c890:	49 83       	std	Y+1, r20	; 0x01
   1c892:	5a 83       	std	Y+2, r21	; 0x02
   1c894:	6b 83       	std	Y+3, r22	; 0x03
   1c896:	7c 83       	std	Y+4, r23	; 0x04
   1c898:	ce 01       	movw	r24, r28
   1c89a:	01 96       	adiw	r24, 0x01	; 1
   1c89c:	7c 01       	movw	r14, r24
   1c89e:	10 e0       	ldi	r17, 0x00	; 0
   1c8a0:	00 e0       	ldi	r16, 0x00	; 0
   1c8a2:	f7 01       	movw	r30, r14
   1c8a4:	61 91       	ld	r22, Z+
   1c8a6:	7f 01       	movw	r14, r30
_ZN5EERefaSEh():
   1c8a8:	c8 01       	movw	r24, r16
   1c8aa:	8c 0d       	add	r24, r12
   1c8ac:	9d 1d       	adc	r25, r13
   1c8ae:	0f 94 76 22 	call	0x244ec	; 0x244ec <eeprom_write_byte>
_Z16EEPROMwriteFloatjf():
   1c8b2:	0f 5f       	subi	r16, 0xFF	; 255
   1c8b4:	1f 4f       	sbci	r17, 0xFF	; 255
   1c8b6:	04 30       	cpi	r16, 0x04	; 4
   1c8b8:	11 05       	cpc	r17, r1
   1c8ba:	99 f7       	brne	.-26     	; 0x1c8a2 <EEPROMwriteFloat(unsigned int, float)+0x2c>
   1c8bc:	0f 90       	pop	r0
   1c8be:	0f 90       	pop	r0
   1c8c0:	0f 90       	pop	r0
   1c8c2:	0f 90       	pop	r0
   1c8c4:	df 91       	pop	r29
   1c8c6:	cf 91       	pop	r28
   1c8c8:	1f 91       	pop	r17
   1c8ca:	0f 91       	pop	r16
   1c8cc:	ff 90       	pop	r15
   1c8ce:	ef 90       	pop	r14
   1c8d0:	df 90       	pop	r13
   1c8d2:	cf 90       	pop	r12
   1c8d4:	08 95       	ret

0001c8d6 <float_to_int(float)>:
_Z12float_to_intf():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:102

int float_to_int(float x)
{
 return x;
   1c8d6:	0f 94 bf 14 	call	0x2297e	; 0x2297e <__fixsfsi>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:103
}
   1c8da:	cb 01       	movw	r24, r22
   1c8dc:	08 95       	ret

0001c8de <parseBytes(char const*, char, unsigned char*, int, int)>:
_Z10parseBytesPKccPhii():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:107


void parseBytes(const char* str, char sep, uint8_t* bytes, int maxBytes, int base)
{
   1c8de:	8f 92       	push	r8
   1c8e0:	9f 92       	push	r9
   1c8e2:	af 92       	push	r10
   1c8e4:	bf 92       	push	r11
   1c8e6:	cf 92       	push	r12
   1c8e8:	df 92       	push	r13
   1c8ea:	ef 92       	push	r14
   1c8ec:	ff 92       	push	r15
   1c8ee:	0f 93       	push	r16
   1c8f0:	1f 93       	push	r17
   1c8f2:	cf 93       	push	r28
   1c8f4:	df 93       	push	r29
   1c8f6:	ec 01       	movw	r28, r24
   1c8f8:	5a 01       	movw	r10, r20
   1c8fa:	49 01       	movw	r8, r18
   1c8fc:	7a 01       	movw	r14, r20
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:111
  //parseBytes(str, sep, (uint16_t*)bytes, maxBytes, base);
  for (int i = 0; i < maxBytes; i++) {
    bytes[i] = strtoul(str, NULL, base);  // Convert byte
    str = strchr(str, sep);               // Find next separator
   1c8fe:	c6 2e       	mov	r12, r22
   1c900:	66 0f       	add	r22, r22
   1c902:	dd 08       	sbc	r13, r13
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:109 (discriminator 1)


void parseBytes(const char* str, char sep, uint8_t* bytes, int maxBytes, int base)
{
  //parseBytes(str, sep, (uint16_t*)bytes, maxBytes, base);
  for (int i = 0; i < maxBytes; i++) {
   1c904:	c7 01       	movw	r24, r14
   1c906:	8a 19       	sub	r24, r10
   1c908:	9b 09       	sbc	r25, r11
   1c90a:	88 15       	cp	r24, r8
   1c90c:	99 05       	cpc	r25, r9
   1c90e:	b4 f4       	brge	.+44     	; 0x1c93c <parseBytes(char const*, char, unsigned char*, int, int)+0x5e>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:110
    bytes[i] = strtoul(str, NULL, base);  // Convert byte
   1c910:	a8 01       	movw	r20, r16
   1c912:	70 e0       	ldi	r23, 0x00	; 0
   1c914:	60 e0       	ldi	r22, 0x00	; 0
   1c916:	ce 01       	movw	r24, r28
   1c918:	0f 94 e4 18 	call	0x231c8	; 0x231c8 <strtoul>
   1c91c:	f7 01       	movw	r30, r14
   1c91e:	61 93       	st	Z+, r22
   1c920:	7f 01       	movw	r14, r30
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:111
    str = strchr(str, sep);               // Find next separator
   1c922:	b6 01       	movw	r22, r12
   1c924:	ce 01       	movw	r24, r28
   1c926:	0f 94 53 1a 	call	0x234a6	; 0x234a6 <strchr>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:112
    if (str == NULL || *str == '\0') {
   1c92a:	00 97       	sbiw	r24, 0x00	; 0
   1c92c:	39 f0       	breq	.+14     	; 0x1c93c <parseBytes(char const*, char, unsigned char*, int, int)+0x5e>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:112 (discriminator 1)
   1c92e:	fc 01       	movw	r30, r24
   1c930:	20 81       	ld	r18, Z
   1c932:	22 23       	and	r18, r18
   1c934:	19 f0       	breq	.+6      	; 0x1c93c <parseBytes(char const*, char, unsigned char*, int, int)+0x5e>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:115 (discriminator 2)
      break;                            // No more separators, exit
    }
    str++;                               // Point to next character after separator
   1c936:	ec 01       	movw	r28, r24
   1c938:	21 96       	adiw	r28, 0x01	; 1
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:109 (discriminator 2)


void parseBytes(const char* str, char sep, uint8_t* bytes, int maxBytes, int base)
{
  //parseBytes(str, sep, (uint16_t*)bytes, maxBytes, base);
  for (int i = 0; i < maxBytes; i++) {
   1c93a:	e4 cf       	rjmp	.-56     	; 0x1c904 <parseBytes(char const*, char, unsigned char*, int, int)+0x26>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:117
    if (str == NULL || *str == '\0') {
      break;                            // No more separators, exit
    }
    str++;                               // Point to next character after separator
  }
}
   1c93c:	df 91       	pop	r29
   1c93e:	cf 91       	pop	r28
   1c940:	1f 91       	pop	r17
   1c942:	0f 91       	pop	r16
   1c944:	ff 90       	pop	r15
   1c946:	ef 90       	pop	r14
   1c948:	df 90       	pop	r13
   1c94a:	cf 90       	pop	r12
   1c94c:	bf 90       	pop	r11
   1c94e:	af 90       	pop	r10
   1c950:	9f 90       	pop	r9
   1c952:	8f 90       	pop	r8
   1c954:	08 95       	ret

0001c956 <parseBytes(char const*, char, unsigned int*, int, int)>:
_Z10parseBytesPKccPjii():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:121


void parseBytes(const char* str, char sep, uint16_t* bytes, int maxBytes, int base) 
{
   1c956:	8f 92       	push	r8
   1c958:	9f 92       	push	r9
   1c95a:	af 92       	push	r10
   1c95c:	bf 92       	push	r11
   1c95e:	cf 92       	push	r12
   1c960:	df 92       	push	r13
   1c962:	ef 92       	push	r14
   1c964:	ff 92       	push	r15
   1c966:	0f 93       	push	r16
   1c968:	1f 93       	push	r17
   1c96a:	cf 93       	push	r28
   1c96c:	df 93       	push	r29
   1c96e:	ec 01       	movw	r28, r24
   1c970:	59 01       	movw	r10, r18
   1c972:	7a 01       	movw	r14, r20
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:122
  for (int i = 0; i < maxBytes; i++) {
   1c974:	91 2c       	mov	r9, r1
   1c976:	81 2c       	mov	r8, r1
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:124
    bytes[i] = strtoul(str, NULL, base);  // Convert byte
    str = strchr(str, sep);               // Find next separator
   1c978:	c6 2e       	mov	r12, r22
   1c97a:	66 0f       	add	r22, r22
   1c97c:	dd 08       	sbc	r13, r13
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:122 (discriminator 1)
}


void parseBytes(const char* str, char sep, uint16_t* bytes, int maxBytes, int base) 
{
  for (int i = 0; i < maxBytes; i++) {
   1c97e:	8a 14       	cp	r8, r10
   1c980:	9b 04       	cpc	r9, r11
   1c982:	d4 f4       	brge	.+52     	; 0x1c9b8 <parseBytes(char const*, char, unsigned int*, int, int)+0x62>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:123
    bytes[i] = strtoul(str, NULL, base);  // Convert byte
   1c984:	a8 01       	movw	r20, r16
   1c986:	70 e0       	ldi	r23, 0x00	; 0
   1c988:	60 e0       	ldi	r22, 0x00	; 0
   1c98a:	ce 01       	movw	r24, r28
   1c98c:	0f 94 e4 18 	call	0x231c8	; 0x231c8 <strtoul>
   1c990:	f7 01       	movw	r30, r14
   1c992:	61 93       	st	Z+, r22
   1c994:	71 93       	st	Z+, r23
   1c996:	7f 01       	movw	r14, r30
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:124
    str = strchr(str, sep);               // Find next separator
   1c998:	b6 01       	movw	r22, r12
   1c99a:	ce 01       	movw	r24, r28
   1c99c:	0f 94 53 1a 	call	0x234a6	; 0x234a6 <strchr>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:125
    if (str == NULL || *str == '\0') {
   1c9a0:	00 97       	sbiw	r24, 0x00	; 0
   1c9a2:	51 f0       	breq	.+20     	; 0x1c9b8 <parseBytes(char const*, char, unsigned int*, int, int)+0x62>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:125 (discriminator 1)
   1c9a4:	fc 01       	movw	r30, r24
   1c9a6:	20 81       	ld	r18, Z
   1c9a8:	22 23       	and	r18, r18
   1c9aa:	31 f0       	breq	.+12     	; 0x1c9b8 <parseBytes(char const*, char, unsigned int*, int, int)+0x62>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:128 (discriminator 2)
      break;                            // No more separators, exit
    }
    str++;                                // Point to next character after separator
   1c9ac:	ec 01       	movw	r28, r24
   1c9ae:	21 96       	adiw	r28, 0x01	; 1
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:122 (discriminator 2)
}


void parseBytes(const char* str, char sep, uint16_t* bytes, int maxBytes, int base) 
{
  for (int i = 0; i < maxBytes; i++) {
   1c9b0:	ff ef       	ldi	r31, 0xFF	; 255
   1c9b2:	8f 1a       	sub	r8, r31
   1c9b4:	9f 0a       	sbc	r9, r31
   1c9b6:	e3 cf       	rjmp	.-58     	; 0x1c97e <parseBytes(char const*, char, unsigned int*, int, int)+0x28>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:130
    if (str == NULL || *str == '\0') {
      break;                            // No more separators, exit
    }
    str++;                                // Point to next character after separator
  }
}
   1c9b8:	df 91       	pop	r29
   1c9ba:	cf 91       	pop	r28
   1c9bc:	1f 91       	pop	r17
   1c9be:	0f 91       	pop	r16
   1c9c0:	ff 90       	pop	r15
   1c9c2:	ef 90       	pop	r14
   1c9c4:	df 90       	pop	r13
   1c9c6:	cf 90       	pop	r12
   1c9c8:	bf 90       	pop	r11
   1c9ca:	af 90       	pop	r10
   1c9cc:	9f 90       	pop	r9
   1c9ce:	8f 90       	pop	r8
   1c9d0:	08 95       	ret

0001c9d2 <createString(char*, char, unsigned char*, unsigned char, unsigned char, unsigned char)>:
_Z12createStringPccPhhhh():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:135



void createString(char* str, char sep, uint8_t* bytes, uint8_t maxBytes, uint8_t base, uint8_t min_len)
{
   1c9d2:	2f 92       	push	r2
   1c9d4:	3f 92       	push	r3
   1c9d6:	4f 92       	push	r4
   1c9d8:	5f 92       	push	r5
   1c9da:	6f 92       	push	r6
   1c9dc:	7f 92       	push	r7
   1c9de:	8f 92       	push	r8
   1c9e0:	9f 92       	push	r9
   1c9e2:	af 92       	push	r10
   1c9e4:	bf 92       	push	r11
   1c9e6:	cf 92       	push	r12
   1c9e8:	df 92       	push	r13
   1c9ea:	ef 92       	push	r14
   1c9ec:	ff 92       	push	r15
   1c9ee:	0f 93       	push	r16
   1c9f0:	1f 93       	push	r17
   1c9f2:	cf 93       	push	r28
   1c9f4:	df 93       	push	r29
   1c9f6:	00 d0       	rcall	.+0      	; 0x1c9f8 <createString(char*, char, unsigned char*, unsigned char, unsigned char, unsigned char)+0x26>
   1c9f8:	00 d0       	rcall	.+0      	; 0x1c9fa <createString(char*, char, unsigned char*, unsigned char, unsigned char, unsigned char)+0x28>
   1c9fa:	00 d0       	rcall	.+0      	; 0x1c9fc <createString(char*, char, unsigned char*, unsigned char, unsigned char, unsigned char)+0x2a>
   1c9fc:	cd b7       	in	r28, 0x3d	; 61
   1c9fe:	de b7       	in	r29, 0x3e	; 62
   1ca00:	4c 01       	movw	r8, r24
   1ca02:	69 87       	std	Y+9, r22	; 0x09
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:137
  char tmp1[8];
  str[0] = 0;
   1ca04:	fc 01       	movw	r30, r24
   1ca06:	10 82       	st	Z, r1
   1ca08:	1a 01       	movw	r2, r20
   1ca0a:	a2 2e       	mov	r10, r18
   1ca0c:	b1 2c       	mov	r11, r1
   1ca0e:	d1 2c       	mov	r13, r1
   1ca10:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:140
  for (uint8_t a = 0; a < maxBytes; a++ )
  {
    itoa(bytes[a], tmp1, base);
   1ca12:	40 2e       	mov	r4, r16
   1ca14:	51 2c       	mov	r5, r1
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:433
extern __inline__ __ATTR_GNU_INLINE__
char *itoa (int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__itoa (int, char *, int);
	return __itoa (__val, __s, __radix);
   1ca16:	8e 01       	movw	r16, r28
   1ca18:	0f 5f       	subi	r16, 0xFF	; 255
   1ca1a:	1f 4f       	sbci	r17, 0xFF	; 255
_Z12createStringPccPhhhh():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:141
    if (strlen(tmp1) < min_len)
   1ca1c:	6e 2c       	mov	r6, r14
   1ca1e:	71 2c       	mov	r7, r1
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:144
      strcat(str, "0");
    strcat(str, tmp1); 
    if (a < maxBytes - 1)
   1ca20:	75 01       	movw	r14, r10
   1ca22:	f1 e0       	ldi	r31, 0x01	; 1
   1ca24:	ef 1a       	sub	r14, r31
   1ca26:	f1 08       	sbc	r15, r1
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:138 (discriminator 1)

void createString(char* str, char sep, uint8_t* bytes, uint8_t maxBytes, uint8_t base, uint8_t min_len)
{
  char tmp1[8];
  str[0] = 0;
  for (uint8_t a = 0; a < maxBytes; a++ )
   1ca28:	ca 14       	cp	r12, r10
   1ca2a:	db 04       	cpc	r13, r11
   1ca2c:	49 f1       	breq	.+82     	; 0x1ca80 <createString(char*, char, unsigned char*, unsigned char, unsigned char, unsigned char)+0xae>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:140
  {
    itoa(bytes[a], tmp1, base);
   1ca2e:	f1 01       	movw	r30, r2
   1ca30:	81 91       	ld	r24, Z+
   1ca32:	1f 01       	movw	r2, r30
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:433
   1ca34:	a2 01       	movw	r20, r4
   1ca36:	b8 01       	movw	r22, r16
   1ca38:	90 e0       	ldi	r25, 0x00	; 0
   1ca3a:	0f 94 bd 1a 	call	0x2357a	; 0x2357a <itoa>
_Z12createStringPccPhhhh():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:141
    if (strlen(tmp1) < min_len)
   1ca3e:	f8 01       	movw	r30, r16
   1ca40:	01 90       	ld	r0, Z+
   1ca42:	00 20       	and	r0, r0
   1ca44:	e9 f7       	brne	.-6      	; 0x1ca40 <createString(char*, char, unsigned char*, unsigned char, unsigned char, unsigned char)+0x6e>
   1ca46:	31 97       	sbiw	r30, 0x01	; 1
   1ca48:	e0 1b       	sub	r30, r16
   1ca4a:	f1 0b       	sbc	r31, r17
   1ca4c:	e6 15       	cp	r30, r6
   1ca4e:	f7 05       	cpc	r31, r7
   1ca50:	28 f4       	brcc	.+10     	; 0x1ca5c <createString(char*, char, unsigned char*, unsigned char, unsigned char, unsigned char)+0x8a>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:142
      strcat(str, "0");
   1ca52:	61 e9       	ldi	r22, 0x91	; 145
   1ca54:	79 e0       	ldi	r23, 0x09	; 9
   1ca56:	c4 01       	movw	r24, r8
   1ca58:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:143
    strcat(str, tmp1); 
   1ca5c:	b8 01       	movw	r22, r16
   1ca5e:	c4 01       	movw	r24, r8
   1ca60:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:144
    if (a < maxBytes - 1)
   1ca64:	ce 14       	cp	r12, r14
   1ca66:	df 04       	cpc	r13, r15
   1ca68:	3c f4       	brge	.+14     	; 0x1ca78 <createString(char*, char, unsigned char*, unsigned char, unsigned char, unsigned char)+0xa6>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:146
    {
      tmp1[0] = sep;
   1ca6a:	f9 85       	ldd	r31, Y+9	; 0x09
   1ca6c:	f9 83       	std	Y+1, r31	; 0x01
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:147
      tmp1[1] = 0;
   1ca6e:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:148
      strcat(str, tmp1);
   1ca70:	b8 01       	movw	r22, r16
   1ca72:	c4 01       	movw	r24, r8
   1ca74:	0f 94 48 1a 	call	0x23490	; 0x23490 <strcat>
   1ca78:	8f ef       	ldi	r24, 0xFF	; 255
   1ca7a:	c8 1a       	sub	r12, r24
   1ca7c:	d8 0a       	sbc	r13, r24
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:138 (discriminator 2)

void createString(char* str, char sep, uint8_t* bytes, uint8_t maxBytes, uint8_t base, uint8_t min_len)
{
  char tmp1[8];
  str[0] = 0;
  for (uint8_t a = 0; a < maxBytes; a++ )
   1ca7e:	d4 cf       	rjmp	.-88     	; 0x1ca28 <createString(char*, char, unsigned char*, unsigned char, unsigned char, unsigned char)+0x56>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:151
      tmp1[0] = sep;
      tmp1[1] = 0;
      strcat(str, tmp1);
    }
  }
}
   1ca80:	29 96       	adiw	r28, 0x09	; 9
   1ca82:	0f b6       	in	r0, 0x3f	; 63
   1ca84:	f8 94       	cli
   1ca86:	de bf       	out	0x3e, r29	; 62
   1ca88:	0f be       	out	0x3f, r0	; 63
   1ca8a:	cd bf       	out	0x3d, r28	; 61
   1ca8c:	df 91       	pop	r29
   1ca8e:	cf 91       	pop	r28
   1ca90:	1f 91       	pop	r17
   1ca92:	0f 91       	pop	r16
   1ca94:	ff 90       	pop	r15
   1ca96:	ef 90       	pop	r14
   1ca98:	df 90       	pop	r13
   1ca9a:	cf 90       	pop	r12
   1ca9c:	bf 90       	pop	r11
   1ca9e:	af 90       	pop	r10
   1caa0:	9f 90       	pop	r9
   1caa2:	8f 90       	pop	r8
   1caa4:	7f 90       	pop	r7
   1caa6:	6f 90       	pop	r6
   1caa8:	5f 90       	pop	r5
   1caaa:	4f 90       	pop	r4
   1caac:	3f 90       	pop	r3
   1caae:	2f 90       	pop	r2
   1cab0:	08 95       	ret

0001cab2 <date2days(unsigned int, unsigned char, unsigned char)>:
_ZL9date2daysjhh():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:336
  return data;
}

void RTC_DS1307::writenvram(uint8_t address, uint8_t data) {
  writenvram(address, &data, 1);
}
   1cab2:	dc 01       	movw	r26, r24
   1cab4:	50 e0       	ldi	r21, 0x00	; 0
   1cab6:	ea eb       	ldi	r30, 0xBA	; 186
   1cab8:	fc e8       	ldi	r31, 0x8C	; 140
   1caba:	81 e0       	ldi	r24, 0x01	; 1
   1cabc:	86 17       	cp	r24, r22
   1cabe:	30 f4       	brcc	.+12     	; 0x1cacc <date2days(unsigned int, unsigned char, unsigned char)+0x1a>
   1cac0:	94 91       	lpm	r25, Z
   1cac2:	49 0f       	add	r20, r25
   1cac4:	51 1d       	adc	r21, r1
   1cac6:	8f 5f       	subi	r24, 0xFF	; 255
   1cac8:	31 96       	adiw	r30, 0x01	; 1
   1caca:	f8 cf       	rjmp	.-16     	; 0x1cabc <date2days(unsigned int, unsigned char, unsigned char)+0xa>
   1cacc:	63 30       	cpi	r22, 0x03	; 3
   1cace:	38 f0       	brcs	.+14     	; 0x1cade <date2days(unsigned int, unsigned char, unsigned char)+0x2c>
   1cad0:	cd 01       	movw	r24, r26
   1cad2:	83 70       	andi	r24, 0x03	; 3
   1cad4:	99 27       	eor	r25, r25
   1cad6:	89 2b       	or	r24, r25
   1cad8:	11 f4       	brne	.+4      	; 0x1cade <date2days(unsigned int, unsigned char, unsigned char)+0x2c>
   1cada:	4f 5f       	subi	r20, 0xFF	; 255
   1cadc:	5f 4f       	sbci	r21, 0xFF	; 255
   1cade:	9d 01       	movw	r18, r26
   1cae0:	2d 5f       	subi	r18, 0xFD	; 253
   1cae2:	3f 4f       	sbci	r19, 0xFF	; 255
   1cae4:	36 95       	lsr	r19
   1cae6:	27 95       	ror	r18
   1cae8:	36 95       	lsr	r19
   1caea:	27 95       	ror	r18
   1caec:	6d e6       	ldi	r22, 0x6D	; 109
   1caee:	71 e0       	ldi	r23, 0x01	; 1
   1caf0:	a6 9f       	mul	r26, r22
   1caf2:	c0 01       	movw	r24, r0
   1caf4:	a7 9f       	mul	r26, r23
   1caf6:	90 0d       	add	r25, r0
   1caf8:	b6 9f       	mul	r27, r22
   1cafa:	90 0d       	add	r25, r0
   1cafc:	11 24       	eor	r1, r1
   1cafe:	01 97       	sbiw	r24, 0x01	; 1
   1cb00:	82 0f       	add	r24, r18
   1cb02:	93 1f       	adc	r25, r19
   1cb04:	84 0f       	add	r24, r20
   1cb06:	95 1f       	adc	r25, r21
   1cb08:	08 95       	ret

0001cb0a <conv2d(char const*)>:
_ZL6conv2dPKc():
   1cb0a:	fc 01       	movw	r30, r24
   1cb0c:	90 81       	ld	r25, Z
   1cb0e:	90 53       	subi	r25, 0x30	; 48
   1cb10:	9a 30       	cpi	r25, 0x0A	; 10
   1cb12:	08 f0       	brcs	.+2      	; 0x1cb16 <conv2d(char const*)+0xc>
   1cb14:	90 e0       	ldi	r25, 0x00	; 0
   1cb16:	81 81       	ldd	r24, Z+1	; 0x01
   1cb18:	80 53       	subi	r24, 0x30	; 48
   1cb1a:	2a e0       	ldi	r18, 0x0A	; 10
   1cb1c:	92 9f       	mul	r25, r18
   1cb1e:	80 0d       	add	r24, r0
   1cb20:	11 24       	eor	r1, r1
   1cb22:	08 95       	ret

0001cb24 <TwoWire::write(int)>:
_ZN7TwoWire5writeEi():
   1cb24:	dc 01       	movw	r26, r24
   1cb26:	ed 91       	ld	r30, X+
   1cb28:	fc 91       	ld	r31, X
   1cb2a:	01 90       	ld	r0, Z+
   1cb2c:	f0 81       	ld	r31, Z
   1cb2e:	e0 2d       	mov	r30, r0
   1cb30:	19 94       	eijmp

0001cb32 <DateTime::DateTime(unsigned long)>:
_ZN8DateTimeC2Em():
   1cb32:	8f 92       	push	r8
   1cb34:	9f 92       	push	r9
   1cb36:	af 92       	push	r10
   1cb38:	bf 92       	push	r11
   1cb3a:	cf 92       	push	r12
   1cb3c:	df 92       	push	r13
   1cb3e:	ef 92       	push	r14
   1cb40:	ff 92       	push	r15
   1cb42:	cf 93       	push	r28
   1cb44:	df 93       	push	r29
   1cb46:	ec 01       	movw	r28, r24
   1cb48:	6a 01       	movw	r12, r20
   1cb4a:	7b 01       	movw	r14, r22
   1cb4c:	80 e8       	ldi	r24, 0x80	; 128
   1cb4e:	c8 1a       	sub	r12, r24
   1cb50:	83 e4       	ldi	r24, 0x43	; 67
   1cb52:	d8 0a       	sbc	r13, r24
   1cb54:	8d e6       	ldi	r24, 0x6D	; 109
   1cb56:	e8 0a       	sbc	r14, r24
   1cb58:	88 e3       	ldi	r24, 0x38	; 56
   1cb5a:	f8 0a       	sbc	r15, r24
   1cb5c:	8c e3       	ldi	r24, 0x3C	; 60
   1cb5e:	88 2e       	mov	r8, r24
   1cb60:	91 2c       	mov	r9, r1
   1cb62:	a1 2c       	mov	r10, r1
   1cb64:	b1 2c       	mov	r11, r1
   1cb66:	c7 01       	movw	r24, r14
   1cb68:	b6 01       	movw	r22, r12
   1cb6a:	a5 01       	movw	r20, r10
   1cb6c:	94 01       	movw	r18, r8
   1cb6e:	0f 94 5d 16 	call	0x22cba	; 0x22cba <__udivmodsi4>
   1cb72:	6d 83       	std	Y+5, r22	; 0x05
   1cb74:	ca 01       	movw	r24, r20
   1cb76:	b9 01       	movw	r22, r18
   1cb78:	a5 01       	movw	r20, r10
   1cb7a:	94 01       	movw	r18, r8
   1cb7c:	0f 94 5d 16 	call	0x22cba	; 0x22cba <__udivmodsi4>
   1cb80:	6c 83       	std	Y+4, r22	; 0x04
   1cb82:	c7 01       	movw	r24, r14
   1cb84:	b6 01       	movw	r22, r12
   1cb86:	20 e1       	ldi	r18, 0x10	; 16
   1cb88:	3e e0       	ldi	r19, 0x0E	; 14
   1cb8a:	40 e0       	ldi	r20, 0x00	; 0
   1cb8c:	50 e0       	ldi	r21, 0x00	; 0
   1cb8e:	0f 94 5d 16 	call	0x22cba	; 0x22cba <__udivmodsi4>
   1cb92:	ca 01       	movw	r24, r20
   1cb94:	b9 01       	movw	r22, r18
   1cb96:	28 e1       	ldi	r18, 0x18	; 24
   1cb98:	30 e0       	ldi	r19, 0x00	; 0
   1cb9a:	40 e0       	ldi	r20, 0x00	; 0
   1cb9c:	50 e0       	ldi	r21, 0x00	; 0
   1cb9e:	0f 94 5d 16 	call	0x22cba	; 0x22cba <__udivmodsi4>
   1cba2:	6b 83       	std	Y+3, r22	; 0x03
   1cba4:	c7 01       	movw	r24, r14
   1cba6:	b6 01       	movw	r22, r12
   1cba8:	20 e8       	ldi	r18, 0x80	; 128
   1cbaa:	31 e5       	ldi	r19, 0x51	; 81
   1cbac:	41 e0       	ldi	r20, 0x01	; 1
   1cbae:	50 e0       	ldi	r21, 0x00	; 0
   1cbb0:	0f 94 5d 16 	call	0x22cba	; 0x22cba <__udivmodsi4>
   1cbb4:	18 82       	st	Y, r1
   1cbb6:	63 e9       	ldi	r22, 0x93	; 147
   1cbb8:	7e ef       	ldi	r23, 0xFE	; 254
   1cbba:	48 81       	ld	r20, Y
   1cbbc:	54 2f       	mov	r21, r20
   1cbbe:	53 70       	andi	r21, 0x03	; 3
   1cbc0:	81 e0       	ldi	r24, 0x01	; 1
   1cbc2:	09 f0       	breq	.+2      	; 0x1cbc6 <DateTime::DateTime(unsigned long)+0x94>
   1cbc4:	80 e0       	ldi	r24, 0x00	; 0
   1cbc6:	90 e0       	ldi	r25, 0x00	; 0
   1cbc8:	fc 01       	movw	r30, r24
   1cbca:	e3 59       	subi	r30, 0x93	; 147
   1cbcc:	fe 4f       	sbci	r31, 0xFE	; 254
   1cbce:	2e 17       	cp	r18, r30
   1cbd0:	3f 07       	cpc	r19, r31
   1cbd2:	40 f0       	brcs	.+16     	; 0x1cbe4 <DateTime::DateTime(unsigned long)+0xb2>
   1cbd4:	fb 01       	movw	r30, r22
   1cbd6:	e8 1b       	sub	r30, r24
   1cbd8:	f9 0b       	sbc	r31, r25
   1cbda:	2e 0f       	add	r18, r30
   1cbdc:	3f 1f       	adc	r19, r31
   1cbde:	4f 5f       	subi	r20, 0xFF	; 255
   1cbe0:	48 83       	st	Y, r20
   1cbe2:	eb cf       	rjmp	.-42     	; 0x1cbba <DateTime::DateTime(unsigned long)+0x88>
   1cbe4:	81 e0       	ldi	r24, 0x01	; 1
   1cbe6:	89 83       	std	Y+1, r24	; 0x01
   1cbe8:	89 81       	ldd	r24, Y+1	; 0x01
   1cbea:	68 2f       	mov	r22, r24
   1cbec:	61 50       	subi	r22, 0x01	; 1
   1cbee:	77 0b       	sbc	r23, r23
   1cbf0:	fb 01       	movw	r30, r22
   1cbf2:	e6 54       	subi	r30, 0x46	; 70
   1cbf4:	f3 47       	sbci	r31, 0x73	; 115
   1cbf6:	e4 91       	lpm	r30, Z
   1cbf8:	51 11       	cpse	r21, r1
   1cbfa:	03 c0       	rjmp	.+6      	; 0x1cc02 <DateTime::DateTime(unsigned long)+0xd0>
   1cbfc:	82 30       	cpi	r24, 0x02	; 2
   1cbfe:	09 f4       	brne	.+2      	; 0x1cc02 <DateTime::DateTime(unsigned long)+0xd0>
   1cc00:	ef 5f       	subi	r30, 0xFF	; 255
   1cc02:	f0 e0       	ldi	r31, 0x00	; 0
   1cc04:	2e 17       	cp	r18, r30
   1cc06:	3f 07       	cpc	r19, r31
   1cc08:	20 f0       	brcs	.+8      	; 0x1cc12 <DateTime::DateTime(unsigned long)+0xe0>
   1cc0a:	2e 1b       	sub	r18, r30
   1cc0c:	3f 0b       	sbc	r19, r31
   1cc0e:	8f 5f       	subi	r24, 0xFF	; 255
   1cc10:	ea cf       	rjmp	.-44     	; 0x1cbe6 <DateTime::DateTime(unsigned long)+0xb4>
   1cc12:	2f 5f       	subi	r18, 0xFF	; 255
   1cc14:	2a 83       	std	Y+2, r18	; 0x02
   1cc16:	df 91       	pop	r29
   1cc18:	cf 91       	pop	r28
   1cc1a:	ff 90       	pop	r15
   1cc1c:	ef 90       	pop	r14
   1cc1e:	df 90       	pop	r13
   1cc20:	cf 90       	pop	r12
   1cc22:	bf 90       	pop	r11
   1cc24:	af 90       	pop	r10
   1cc26:	9f 90       	pop	r9
   1cc28:	8f 90       	pop	r8
   1cc2a:	08 95       	ret

0001cc2c <DateTime::DateTime(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
_ZN8DateTimeC2Ejhhhhh():
   1cc2c:	cf 92       	push	r12
   1cc2e:	ef 92       	push	r14
   1cc30:	0f 93       	push	r16
   1cc32:	fc 01       	movw	r30, r24
   1cc34:	60 3d       	cpi	r22, 0xD0	; 208
   1cc36:	87 e0       	ldi	r24, 0x07	; 7
   1cc38:	78 07       	cpc	r23, r24
   1cc3a:	10 f0       	brcs	.+4      	; 0x1cc40 <DateTime::DateTime(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x14>
   1cc3c:	60 5d       	subi	r22, 0xD0	; 208
   1cc3e:	77 40       	sbci	r23, 0x07	; 7
   1cc40:	60 83       	st	Z, r22
   1cc42:	41 83       	std	Z+1, r20	; 0x01
   1cc44:	22 83       	std	Z+2, r18	; 0x02
   1cc46:	03 83       	std	Z+3, r16	; 0x03
   1cc48:	e4 82       	std	Z+4, r14	; 0x04
   1cc4a:	c5 82       	std	Z+5, r12	; 0x05
   1cc4c:	0f 91       	pop	r16
   1cc4e:	ef 90       	pop	r14
   1cc50:	cf 90       	pop	r12
   1cc52:	08 95       	ret

0001cc54 <DateTime::DateTime(char const*, char const*)>:
_ZN8DateTimeC2EPKcS1_():
   1cc54:	ef 92       	push	r14
   1cc56:	ff 92       	push	r15
   1cc58:	0f 93       	push	r16
   1cc5a:	1f 93       	push	r17
   1cc5c:	cf 93       	push	r28
   1cc5e:	df 93       	push	r29
   1cc60:	ec 01       	movw	r28, r24
   1cc62:	8b 01       	movw	r16, r22
   1cc64:	7a 01       	movw	r14, r20
   1cc66:	cb 01       	movw	r24, r22
   1cc68:	09 96       	adiw	r24, 0x09	; 9
   1cc6a:	0e 94 85 e5 	call	0x1cb0a	; 0x1cb0a <conv2d(char const*)>
   1cc6e:	88 83       	st	Y, r24
   1cc70:	d8 01       	movw	r26, r16
   1cc72:	ec 91       	ld	r30, X
   1cc74:	e1 54       	subi	r30, 0x41	; 65
   1cc76:	e3 31       	cpi	r30, 0x13	; 19
   1cc78:	28 f5       	brcc	.+74     	; 0x1ccc4 <DateTime::DateTime(char const*, char const*)+0x70>
   1cc7a:	0e 2e       	mov	r0, r30
   1cc7c:	00 0c       	add	r0, r0
   1cc7e:	ff 0b       	sbc	r31, r31
   1cc80:	88 27       	eor	r24, r24
   1cc82:	ea 5b       	subi	r30, 0xBA	; 186
   1cc84:	f9 41       	sbci	r31, 0x19	; 25
   1cc86:	8f 4f       	sbci	r24, 0xFF	; 255
   1cc88:	0d 94 9e 16 	jmp	0x22d3c	; 0x22d3c <__tablejump2__>
   1cc8c:	82 e6       	ldi	r24, 0x62	; 98
   1cc8e:	62 e6       	ldi	r22, 0x62	; 98
   1cc90:	62 e6       	ldi	r22, 0x62	; 98
   1cc92:	98 e6       	ldi	r25, 0x68	; 104
   1cc94:	62 e6       	ldi	r22, 0x62	; 98
   1cc96:	80 e6       	ldi	r24, 0x60	; 96
   1cc98:	62 e6       	ldi	r22, 0x62	; 98
   1cc9a:	62 e6       	ldi	r22, 0x62	; 98
   1cc9c:	62 e6       	ldi	r22, 0x62	; 98
   1cc9e:	59 e6       	ldi	r21, 0x69	; 105
   1cca0:	62 e6       	ldi	r22, 0x62	; 98
   1cca2:	62 e6       	ldi	r22, 0x62	; 98
   1cca4:	8a e6       	ldi	r24, 0x6A	; 106
   1cca6:	96 e6       	ldi	r25, 0x66	; 102
   1cca8:	94 e6       	ldi	r25, 0x64	; 100
   1ccaa:	62 e6       	ldi	r22, 0x62	; 98
   1ccac:	62 e6       	ldi	r22, 0x62	; 98
   1ccae:	62 e6       	ldi	r22, 0x62	; 98
   1ccb0:	92 e6       	ldi	r25, 0x62	; 98
   1ccb2:	f8 01       	movw	r30, r16
   1ccb4:	81 81       	ldd	r24, Z+1	; 0x01
   1ccb6:	81 36       	cpi	r24, 0x61	; 97
   1ccb8:	f9 f0       	breq	.+62     	; 0x1ccf8 <DateTime::DateTime(char const*, char const*)+0xa4>
   1ccba:	82 81       	ldd	r24, Z+2	; 0x02
   1ccbc:	8e 36       	cpi	r24, 0x6E	; 110
   1ccbe:	f1 f0       	breq	.+60     	; 0x1ccfc <DateTime::DateTime(char const*, char const*)+0xa8>
   1ccc0:	87 e0       	ldi	r24, 0x07	; 7
   1ccc2:	89 83       	std	Y+1, r24	; 0x01
   1ccc4:	c8 01       	movw	r24, r16
   1ccc6:	04 96       	adiw	r24, 0x04	; 4
   1ccc8:	0e 94 85 e5 	call	0x1cb0a	; 0x1cb0a <conv2d(char const*)>
   1cccc:	8a 83       	std	Y+2, r24	; 0x02
   1ccce:	c7 01       	movw	r24, r14
   1ccd0:	0e 94 85 e5 	call	0x1cb0a	; 0x1cb0a <conv2d(char const*)>
   1ccd4:	8b 83       	std	Y+3, r24	; 0x03
   1ccd6:	c7 01       	movw	r24, r14
   1ccd8:	03 96       	adiw	r24, 0x03	; 3
   1ccda:	0e 94 85 e5 	call	0x1cb0a	; 0x1cb0a <conv2d(char const*)>
   1ccde:	8c 83       	std	Y+4, r24	; 0x04
   1cce0:	c7 01       	movw	r24, r14
   1cce2:	06 96       	adiw	r24, 0x06	; 6
   1cce4:	0e 94 85 e5 	call	0x1cb0a	; 0x1cb0a <conv2d(char const*)>
   1cce8:	8d 83       	std	Y+5, r24	; 0x05
   1ccea:	df 91       	pop	r29
   1ccec:	cf 91       	pop	r28
   1ccee:	1f 91       	pop	r17
   1ccf0:	0f 91       	pop	r16
   1ccf2:	ff 90       	pop	r15
   1ccf4:	ef 90       	pop	r14
   1ccf6:	08 95       	ret
   1ccf8:	81 e0       	ldi	r24, 0x01	; 1
   1ccfa:	e3 cf       	rjmp	.-58     	; 0x1ccc2 <DateTime::DateTime(char const*, char const*)+0x6e>
   1ccfc:	86 e0       	ldi	r24, 0x06	; 6
   1ccfe:	e1 cf       	rjmp	.-62     	; 0x1ccc2 <DateTime::DateTime(char const*, char const*)+0x6e>
   1cd00:	82 e0       	ldi	r24, 0x02	; 2
   1cd02:	df cf       	rjmp	.-66     	; 0x1ccc2 <DateTime::DateTime(char const*, char const*)+0x6e>
   1cd04:	12 96       	adiw	r26, 0x02	; 2
   1cd06:	8c 91       	ld	r24, X
   1cd08:	82 37       	cpi	r24, 0x72	; 114
   1cd0a:	11 f0       	breq	.+4      	; 0x1cd10 <DateTime::DateTime(char const*, char const*)+0xbc>
   1cd0c:	88 e0       	ldi	r24, 0x08	; 8
   1cd0e:	d9 cf       	rjmp	.-78     	; 0x1ccc2 <DateTime::DateTime(char const*, char const*)+0x6e>
   1cd10:	84 e0       	ldi	r24, 0x04	; 4
   1cd12:	d7 cf       	rjmp	.-82     	; 0x1ccc2 <DateTime::DateTime(char const*, char const*)+0x6e>
   1cd14:	f8 01       	movw	r30, r16
   1cd16:	82 81       	ldd	r24, Z+2	; 0x02
   1cd18:	82 37       	cpi	r24, 0x72	; 114
   1cd1a:	11 f0       	breq	.+4      	; 0x1cd20 <DateTime::DateTime(char const*, char const*)+0xcc>
   1cd1c:	85 e0       	ldi	r24, 0x05	; 5
   1cd1e:	d1 cf       	rjmp	.-94     	; 0x1ccc2 <DateTime::DateTime(char const*, char const*)+0x6e>
   1cd20:	83 e0       	ldi	r24, 0x03	; 3
   1cd22:	cf cf       	rjmp	.-98     	; 0x1ccc2 <DateTime::DateTime(char const*, char const*)+0x6e>
   1cd24:	89 e0       	ldi	r24, 0x09	; 9
   1cd26:	cd cf       	rjmp	.-102    	; 0x1ccc2 <DateTime::DateTime(char const*, char const*)+0x6e>
   1cd28:	8a e0       	ldi	r24, 0x0A	; 10
   1cd2a:	cb cf       	rjmp	.-106    	; 0x1ccc2 <DateTime::DateTime(char const*, char const*)+0x6e>
   1cd2c:	8b e0       	ldi	r24, 0x0B	; 11
   1cd2e:	c9 cf       	rjmp	.-110    	; 0x1ccc2 <DateTime::DateTime(char const*, char const*)+0x6e>
   1cd30:	8c e0       	ldi	r24, 0x0C	; 12
   1cd32:	c7 cf       	rjmp	.-114    	; 0x1ccc2 <DateTime::DateTime(char const*, char const*)+0x6e>

0001cd34 <DateTime::dayOfTheWeek() const>:
_ZNK8DateTime12dayOfTheWeekEv():
   1cd34:	fc 01       	movw	r30, r24
   1cd36:	80 81       	ld	r24, Z
   1cd38:	42 81       	ldd	r20, Z+2	; 0x02
   1cd3a:	61 81       	ldd	r22, Z+1	; 0x01
   1cd3c:	90 e0       	ldi	r25, 0x00	; 0
   1cd3e:	0e 94 59 e5 	call	0x1cab2	; 0x1cab2 <date2days(unsigned int, unsigned char, unsigned char)>
   1cd42:	06 96       	adiw	r24, 0x06	; 6
   1cd44:	67 e0       	ldi	r22, 0x07	; 7
   1cd46:	70 e0       	ldi	r23, 0x00	; 0
   1cd48:	0f 94 35 16 	call	0x22c6a	; 0x22c6a <__udivmodhi4>
   1cd4c:	08 95       	ret

0001cd4e <DateTime::unixtime() const>:
_ZNK8DateTime8unixtimeEv():
   1cd4e:	ef 92       	push	r14
   1cd50:	ff 92       	push	r15
   1cd52:	0f 93       	push	r16
   1cd54:	1f 93       	push	r17
   1cd56:	cf 93       	push	r28
   1cd58:	df 93       	push	r29
   1cd5a:	ec 01       	movw	r28, r24
   1cd5c:	88 81       	ld	r24, Y
   1cd5e:	4a 81       	ldd	r20, Y+2	; 0x02
   1cd60:	69 81       	ldd	r22, Y+1	; 0x01
   1cd62:	90 e0       	ldi	r25, 0x00	; 0
   1cd64:	0e 94 59 e5 	call	0x1cab2	; 0x1cab2 <date2days(unsigned int, unsigned char, unsigned char)>
time2long():
   1cd68:	9c 01       	movw	r18, r24
   1cd6a:	a8 e1       	ldi	r26, 0x18	; 24
   1cd6c:	b0 e0       	ldi	r27, 0x00	; 0
   1cd6e:	0f 94 a6 16 	call	0x22d4c	; 0x22d4c <__umulhisi3>
   1cd72:	2b 81       	ldd	r18, Y+3	; 0x03
   1cd74:	7b 01       	movw	r14, r22
   1cd76:	8c 01       	movw	r16, r24
   1cd78:	e2 0e       	add	r14, r18
   1cd7a:	f1 1c       	adc	r15, r1
   1cd7c:	01 1d       	adc	r16, r1
   1cd7e:	11 1d       	adc	r17, r1
   1cd80:	a8 01       	movw	r20, r16
   1cd82:	97 01       	movw	r18, r14
   1cd84:	ac e3       	ldi	r26, 0x3C	; 60
   1cd86:	b0 e0       	ldi	r27, 0x00	; 0
   1cd88:	0f 94 b5 16 	call	0x22d6a	; 0x22d6a <__muluhisi3>
   1cd8c:	2c 81       	ldd	r18, Y+4	; 0x04
   1cd8e:	7b 01       	movw	r14, r22
   1cd90:	8c 01       	movw	r16, r24
   1cd92:	e2 0e       	add	r14, r18
   1cd94:	f1 1c       	adc	r15, r1
   1cd96:	01 1d       	adc	r16, r1
   1cd98:	11 1d       	adc	r17, r1
   1cd9a:	a8 01       	movw	r20, r16
   1cd9c:	97 01       	movw	r18, r14
   1cd9e:	0f 94 b5 16 	call	0x22d6a	; 0x22d6a <__muluhisi3>
   1cda2:	2d 81       	ldd	r18, Y+5	; 0x05
   1cda4:	62 0f       	add	r22, r18
   1cda6:	71 1d       	adc	r23, r1
   1cda8:	81 1d       	adc	r24, r1
   1cdaa:	91 1d       	adc	r25, r1
_ZNK8DateTime8unixtimeEv():
   1cdac:	60 58       	subi	r22, 0x80	; 128
   1cdae:	7c 4b       	sbci	r23, 0xBC	; 188
   1cdb0:	82 49       	sbci	r24, 0x92	; 146
   1cdb2:	97 4c       	sbci	r25, 0xC7	; 199
   1cdb4:	df 91       	pop	r29
   1cdb6:	cf 91       	pop	r28
   1cdb8:	1f 91       	pop	r17
   1cdba:	0f 91       	pop	r16
   1cdbc:	ff 90       	pop	r15
   1cdbe:	ef 90       	pop	r14
   1cdc0:	08 95       	ret

0001cdc2 <RTC_DS1307::begin()>:
_ZN10RTC_DS13075beginEv():
   1cdc2:	8a e7       	ldi	r24, 0x7A	; 122
   1cdc4:	92 e1       	ldi	r25, 0x12	; 18
   1cdc6:	0f 94 1c 07 	call	0x20e38	; 0x20e38 <TwoWire::begin()>
   1cdca:	81 e0       	ldi	r24, 0x01	; 1
   1cdcc:	08 95       	ret

0001cdce <RTC_DS1307::adjust(DateTime const&)>:
_ZN10RTC_DS13076adjustERK8DateTime():
   1cdce:	1f 93       	push	r17
   1cdd0:	cf 93       	push	r28
   1cdd2:	df 93       	push	r29
   1cdd4:	ec 01       	movw	r28, r24
   1cdd6:	68 e6       	ldi	r22, 0x68	; 104
   1cdd8:	70 e0       	ldi	r23, 0x00	; 0
   1cdda:	8a e7       	ldi	r24, 0x7A	; 122
   1cddc:	92 e1       	ldi	r25, 0x12	; 18
   1cdde:	0f 94 38 07 	call	0x20e70	; 0x20e70 <TwoWire::beginTransmission(int)>
   1cde2:	60 e0       	ldi	r22, 0x00	; 0
   1cde4:	8a e7       	ldi	r24, 0x7A	; 122
   1cde6:	92 e1       	ldi	r25, 0x12	; 18
   1cde8:	0f 94 c0 06 	call	0x20d80	; 0x20d80 <TwoWire::write(unsigned char)>
   1cdec:	2d 81       	ldd	r18, Y+5	; 0x05
bin2bcd():
   1cdee:	1a e0       	ldi	r17, 0x0A	; 10
   1cdf0:	82 2f       	mov	r24, r18
   1cdf2:	61 2f       	mov	r22, r17
   1cdf4:	0f 94 29 16 	call	0x22c52	; 0x22c52 <__udivmodqi4>
   1cdf8:	68 2f       	mov	r22, r24
   1cdfa:	66 0f       	add	r22, r22
   1cdfc:	68 0f       	add	r22, r24
   1cdfe:	66 0f       	add	r22, r22
   1ce00:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
   1ce02:	8a e7       	ldi	r24, 0x7A	; 122
   1ce04:	92 e1       	ldi	r25, 0x12	; 18
   1ce06:	0f 94 c0 06 	call	0x20d80	; 0x20d80 <TwoWire::write(unsigned char)>
   1ce0a:	2c 81       	ldd	r18, Y+4	; 0x04
bin2bcd():
   1ce0c:	82 2f       	mov	r24, r18
   1ce0e:	61 2f       	mov	r22, r17
   1ce10:	0f 94 29 16 	call	0x22c52	; 0x22c52 <__udivmodqi4>
   1ce14:	68 2f       	mov	r22, r24
   1ce16:	66 0f       	add	r22, r22
   1ce18:	68 0f       	add	r22, r24
   1ce1a:	66 0f       	add	r22, r22
   1ce1c:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
   1ce1e:	8a e7       	ldi	r24, 0x7A	; 122
   1ce20:	92 e1       	ldi	r25, 0x12	; 18
   1ce22:	0f 94 c0 06 	call	0x20d80	; 0x20d80 <TwoWire::write(unsigned char)>
   1ce26:	2b 81       	ldd	r18, Y+3	; 0x03
bin2bcd():
   1ce28:	82 2f       	mov	r24, r18
   1ce2a:	61 2f       	mov	r22, r17
   1ce2c:	0f 94 29 16 	call	0x22c52	; 0x22c52 <__udivmodqi4>
   1ce30:	68 2f       	mov	r22, r24
   1ce32:	66 0f       	add	r22, r22
   1ce34:	68 0f       	add	r22, r24
   1ce36:	66 0f       	add	r22, r22
   1ce38:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
   1ce3a:	8a e7       	ldi	r24, 0x7A	; 122
   1ce3c:	92 e1       	ldi	r25, 0x12	; 18
   1ce3e:	0f 94 c0 06 	call	0x20d80	; 0x20d80 <TwoWire::write(unsigned char)>
   1ce42:	60 e0       	ldi	r22, 0x00	; 0
   1ce44:	8a e7       	ldi	r24, 0x7A	; 122
   1ce46:	92 e1       	ldi	r25, 0x12	; 18
   1ce48:	0f 94 c0 06 	call	0x20d80	; 0x20d80 <TwoWire::write(unsigned char)>
   1ce4c:	2a 81       	ldd	r18, Y+2	; 0x02
bin2bcd():
   1ce4e:	82 2f       	mov	r24, r18
   1ce50:	61 2f       	mov	r22, r17
   1ce52:	0f 94 29 16 	call	0x22c52	; 0x22c52 <__udivmodqi4>
   1ce56:	68 2f       	mov	r22, r24
   1ce58:	66 0f       	add	r22, r22
   1ce5a:	68 0f       	add	r22, r24
   1ce5c:	66 0f       	add	r22, r22
   1ce5e:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
   1ce60:	8a e7       	ldi	r24, 0x7A	; 122
   1ce62:	92 e1       	ldi	r25, 0x12	; 18
   1ce64:	0f 94 c0 06 	call	0x20d80	; 0x20d80 <TwoWire::write(unsigned char)>
   1ce68:	29 81       	ldd	r18, Y+1	; 0x01
bin2bcd():
   1ce6a:	82 2f       	mov	r24, r18
   1ce6c:	61 2f       	mov	r22, r17
   1ce6e:	0f 94 29 16 	call	0x22c52	; 0x22c52 <__udivmodqi4>
   1ce72:	68 2f       	mov	r22, r24
   1ce74:	66 0f       	add	r22, r22
   1ce76:	68 0f       	add	r22, r24
   1ce78:	66 0f       	add	r22, r22
   1ce7a:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
   1ce7c:	8a e7       	ldi	r24, 0x7A	; 122
   1ce7e:	92 e1       	ldi	r25, 0x12	; 18
   1ce80:	0f 94 c0 06 	call	0x20d80	; 0x20d80 <TwoWire::write(unsigned char)>
   1ce84:	28 81       	ld	r18, Y
bin2bcd():
   1ce86:	82 2f       	mov	r24, r18
   1ce88:	61 2f       	mov	r22, r17
   1ce8a:	0f 94 29 16 	call	0x22c52	; 0x22c52 <__udivmodqi4>
   1ce8e:	68 2f       	mov	r22, r24
   1ce90:	66 0f       	add	r22, r22
   1ce92:	68 0f       	add	r22, r24
   1ce94:	66 0f       	add	r22, r22
   1ce96:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
   1ce98:	8a e7       	ldi	r24, 0x7A	; 122
   1ce9a:	92 e1       	ldi	r25, 0x12	; 18
   1ce9c:	0f 94 c0 06 	call	0x20d80	; 0x20d80 <TwoWire::write(unsigned char)>
   1cea0:	8a e7       	ldi	r24, 0x7A	; 122
   1cea2:	92 e1       	ldi	r25, 0x12	; 18
   1cea4:	df 91       	pop	r29
   1cea6:	cf 91       	pop	r28
   1cea8:	1f 91       	pop	r17
   1ceaa:	0d 94 b6 07 	jmp	0x20f6c	; 0x20f6c <TwoWire::endTransmission()>

0001ceae <RTC_DS1307::isrunning()>:
_ZN10RTC_DS13079isrunningEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:245
  Wire.begin();
  return true;
}

uint8_t RTC_DS1307::isrunning(void) {
  Wire.beginTransmission(DS1307_ADDRESS);
   1ceae:	68 e6       	ldi	r22, 0x68	; 104
   1ceb0:	70 e0       	ldi	r23, 0x00	; 0
   1ceb2:	8a e7       	ldi	r24, 0x7A	; 122
   1ceb4:	92 e1       	ldi	r25, 0x12	; 18
   1ceb6:	0f 94 38 07 	call	0x20e70	; 0x20e70 <TwoWire::beginTransmission(int)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:246
  Wire._I2C_WRITE((byte)0);
   1ceba:	60 e0       	ldi	r22, 0x00	; 0
   1cebc:	8a e7       	ldi	r24, 0x7A	; 122
   1cebe:	92 e1       	ldi	r25, 0x12	; 18
   1cec0:	0f 94 c0 06 	call	0x20d80	; 0x20d80 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:247
  Wire.endTransmission();
   1cec4:	8a e7       	ldi	r24, 0x7A	; 122
   1cec6:	92 e1       	ldi	r25, 0x12	; 18
   1cec8:	0f 94 b6 07 	call	0x20f6c	; 0x20f6c <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:249

  Wire.requestFrom(DS1307_ADDRESS, 1);
   1cecc:	41 e0       	ldi	r20, 0x01	; 1
   1cece:	50 e0       	ldi	r21, 0x00	; 0
   1ced0:	68 e6       	ldi	r22, 0x68	; 104
   1ced2:	70 e0       	ldi	r23, 0x00	; 0
   1ced4:	8a e7       	ldi	r24, 0x7A	; 122
   1ced6:	92 e1       	ldi	r25, 0x12	; 18
   1ced8:	0f 94 b3 07 	call	0x20f66	; 0x20f66 <TwoWire::requestFrom(int, int)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:250
  uint8_t ss = Wire._I2C_READ();
   1cedc:	8a e7       	ldi	r24, 0x7A	; 122
   1cede:	92 e1       	ldi	r25, 0x12	; 18
   1cee0:	0f 94 67 06 	call	0x20cce	; 0x20cce <TwoWire::read()>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:251
  return !(ss>>7);
   1cee4:	80 58       	subi	r24, 0x80	; 128
   1cee6:	87 fb       	bst	r24, 7
   1cee8:	88 27       	eor	r24, r24
   1ceea:	80 f9       	bld	r24, 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:252
}
   1ceec:	08 95       	ret

0001ceee <RTC_DS1307::now()>:
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:268
  Wire._I2C_WRITE(bin2bcd(dt.month()));
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000));
  Wire.endTransmission();
}

DateTime RTC_DS1307::now() {
   1ceee:	cf 92       	push	r12
   1cef0:	df 92       	push	r13
   1cef2:	ff 92       	push	r15
   1cef4:	0f 93       	push	r16
   1cef6:	1f 93       	push	r17
   1cef8:	cf 93       	push	r28
   1cefa:	df 93       	push	r29
   1cefc:	6c 01       	movw	r12, r24
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:269
  Wire.beginTransmission(DS1307_ADDRESS);
   1cefe:	68 e6       	ldi	r22, 0x68	; 104
   1cf00:	70 e0       	ldi	r23, 0x00	; 0
   1cf02:	8a e7       	ldi	r24, 0x7A	; 122
   1cf04:	92 e1       	ldi	r25, 0x12	; 18
   1cf06:	0f 94 38 07 	call	0x20e70	; 0x20e70 <TwoWire::beginTransmission(int)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:270
  Wire._I2C_WRITE((byte)0);	
   1cf0a:	60 e0       	ldi	r22, 0x00	; 0
   1cf0c:	8a e7       	ldi	r24, 0x7A	; 122
   1cf0e:	92 e1       	ldi	r25, 0x12	; 18
   1cf10:	0f 94 c0 06 	call	0x20d80	; 0x20d80 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:271
  Wire.endTransmission();
   1cf14:	8a e7       	ldi	r24, 0x7A	; 122
   1cf16:	92 e1       	ldi	r25, 0x12	; 18
   1cf18:	0f 94 b6 07 	call	0x20f6c	; 0x20f6c <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:273

  Wire.requestFrom(DS1307_ADDRESS, 7);
   1cf1c:	47 e0       	ldi	r20, 0x07	; 7
   1cf1e:	50 e0       	ldi	r21, 0x00	; 0
   1cf20:	68 e6       	ldi	r22, 0x68	; 104
   1cf22:	70 e0       	ldi	r23, 0x00	; 0
   1cf24:	8a e7       	ldi	r24, 0x7A	; 122
   1cf26:	92 e1       	ldi	r25, 0x12	; 18
   1cf28:	0f 94 b3 07 	call	0x20f66	; 0x20f66 <TwoWire::requestFrom(int, int)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:274
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
   1cf2c:	8a e7       	ldi	r24, 0x7A	; 122
   1cf2e:	92 e1       	ldi	r25, 0x12	; 18
   1cf30:	0f 94 67 06 	call	0x20cce	; 0x20cce <TwoWire::read()>
   1cf34:	8f 77       	andi	r24, 0x7F	; 127
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   1cf36:	28 2f       	mov	r18, r24
   1cf38:	30 e0       	ldi	r19, 0x00	; 0
   1cf3a:	94 e0       	ldi	r25, 0x04	; 4
   1cf3c:	35 95       	asr	r19
   1cf3e:	27 95       	ror	r18
   1cf40:	9a 95       	dec	r25
   1cf42:	e1 f7       	brne	.-8      	; 0x1cf3c <RTC_DS1307::now()+0x4e>
   1cf44:	92 2f       	mov	r25, r18
   1cf46:	99 0f       	add	r25, r25
   1cf48:	99 0f       	add	r25, r25
   1cf4a:	c2 2f       	mov	r28, r18
   1cf4c:	c9 1b       	sub	r28, r25
   1cf4e:	cc 0f       	add	r28, r28
   1cf50:	c8 0f       	add	r28, r24
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:275
  Wire._I2C_WRITE((byte)0);	
  Wire.endTransmission();

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
   1cf52:	8a e7       	ldi	r24, 0x7A	; 122
   1cf54:	92 e1       	ldi	r25, 0x12	; 18
   1cf56:	0f 94 67 06 	call	0x20cce	; 0x20cce <TwoWire::read()>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   1cf5a:	9c 01       	movw	r18, r24
   1cf5c:	44 e0       	ldi	r20, 0x04	; 4
   1cf5e:	35 95       	asr	r19
   1cf60:	27 95       	ror	r18
   1cf62:	4a 95       	dec	r20
   1cf64:	e1 f7       	brne	.-8      	; 0x1cf5e <RTC_DS1307::now()+0x70>
   1cf66:	2f 70       	andi	r18, 0x0F	; 15
   1cf68:	33 27       	eor	r19, r19
   1cf6a:	92 2f       	mov	r25, r18
   1cf6c:	99 0f       	add	r25, r25
   1cf6e:	99 0f       	add	r25, r25
   1cf70:	d2 2f       	mov	r29, r18
   1cf72:	d9 1b       	sub	r29, r25
   1cf74:	dd 0f       	add	r29, r29
   1cf76:	d8 0f       	add	r29, r24
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:276
  Wire.endTransmission();

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
   1cf78:	8a e7       	ldi	r24, 0x7A	; 122
   1cf7a:	92 e1       	ldi	r25, 0x12	; 18
   1cf7c:	0f 94 67 06 	call	0x20cce	; 0x20cce <TwoWire::read()>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   1cf80:	9c 01       	movw	r18, r24
   1cf82:	54 e0       	ldi	r21, 0x04	; 4
   1cf84:	35 95       	asr	r19
   1cf86:	27 95       	ror	r18
   1cf88:	5a 95       	dec	r21
   1cf8a:	e1 f7       	brne	.-8      	; 0x1cf84 <RTC_DS1307::now()+0x96>
   1cf8c:	2f 70       	andi	r18, 0x0F	; 15
   1cf8e:	33 27       	eor	r19, r19
   1cf90:	92 2f       	mov	r25, r18
   1cf92:	99 0f       	add	r25, r25
   1cf94:	99 0f       	add	r25, r25
   1cf96:	12 2f       	mov	r17, r18
   1cf98:	19 1b       	sub	r17, r25
   1cf9a:	11 0f       	add	r17, r17
   1cf9c:	18 0f       	add	r17, r24
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:277

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
   1cf9e:	8a e7       	ldi	r24, 0x7A	; 122
   1cfa0:	92 e1       	ldi	r25, 0x12	; 18
   1cfa2:	0f 94 67 06 	call	0x20cce	; 0x20cce <TwoWire::read()>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:278
  uint8_t d = bcd2bin(Wire._I2C_READ());
   1cfa6:	8a e7       	ldi	r24, 0x7A	; 122
   1cfa8:	92 e1       	ldi	r25, 0x12	; 18
   1cfaa:	0f 94 67 06 	call	0x20cce	; 0x20cce <TwoWire::read()>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   1cfae:	9c 01       	movw	r18, r24
   1cfb0:	64 e0       	ldi	r22, 0x04	; 4
   1cfb2:	35 95       	asr	r19
   1cfb4:	27 95       	ror	r18
   1cfb6:	6a 95       	dec	r22
   1cfb8:	e1 f7       	brne	.-8      	; 0x1cfb2 <RTC_DS1307::now()+0xc4>
   1cfba:	2f 70       	andi	r18, 0x0F	; 15
   1cfbc:	33 27       	eor	r19, r19
   1cfbe:	92 2f       	mov	r25, r18
   1cfc0:	99 0f       	add	r25, r25
   1cfc2:	99 0f       	add	r25, r25
   1cfc4:	02 2f       	mov	r16, r18
   1cfc6:	09 1b       	sub	r16, r25
   1cfc8:	00 0f       	add	r16, r16
   1cfca:	08 0f       	add	r16, r24
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:279
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
   1cfcc:	8a e7       	ldi	r24, 0x7A	; 122
   1cfce:	92 e1       	ldi	r25, 0x12	; 18
   1cfd0:	0f 94 67 06 	call	0x20cce	; 0x20cce <TwoWire::read()>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   1cfd4:	9c 01       	movw	r18, r24
   1cfd6:	74 e0       	ldi	r23, 0x04	; 4
   1cfd8:	35 95       	asr	r19
   1cfda:	27 95       	ror	r18
   1cfdc:	7a 95       	dec	r23
   1cfde:	e1 f7       	brne	.-8      	; 0x1cfd8 <RTC_DS1307::now()+0xea>
   1cfe0:	2f 70       	andi	r18, 0x0F	; 15
   1cfe2:	33 27       	eor	r19, r19
   1cfe4:	92 2f       	mov	r25, r18
   1cfe6:	99 0f       	add	r25, r25
   1cfe8:	99 0f       	add	r25, r25
   1cfea:	f2 2e       	mov	r15, r18
   1cfec:	f9 1a       	sub	r15, r25
   1cfee:	ff 0c       	add	r15, r15
   1cff0:	f8 0e       	add	r15, r24
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:280
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
  uint16_t y = bcd2bin(Wire._I2C_READ()) + 2000;
   1cff2:	8a e7       	ldi	r24, 0x7A	; 122
   1cff4:	92 e1       	ldi	r25, 0x12	; 18
   1cff6:	0f 94 67 06 	call	0x20cce	; 0x20cce <TwoWire::read()>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   1cffa:	9c 01       	movw	r18, r24
   1cffc:	e4 e0       	ldi	r30, 0x04	; 4
   1cffe:	35 95       	asr	r19
   1d000:	27 95       	ror	r18
   1d002:	ea 95       	dec	r30
   1d004:	e1 f7       	brne	.-8      	; 0x1cffe <RTC_DS1307::now()+0x110>
   1d006:	2f 70       	andi	r18, 0x0F	; 15
   1d008:	33 27       	eor	r19, r19
   1d00a:	92 2f       	mov	r25, r18
   1d00c:	99 0f       	add	r25, r25
   1d00e:	99 0f       	add	r25, r25
   1d010:	29 1b       	sub	r18, r25
   1d012:	22 0f       	add	r18, r18
   1d014:	82 0f       	add	r24, r18
_ZN8DateTimeC4Ejhhhhh():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
    yOff = year;
   1d016:	f6 01       	movw	r30, r12
   1d018:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:105
    m = month;
   1d01a:	f1 82       	std	Z+1, r15	; 0x01
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:106
    d = day;
   1d01c:	02 83       	std	Z+2, r16	; 0x02
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:107
    hh = hour;
   1d01e:	13 83       	std	Z+3, r17	; 0x03
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:108
    mm = min;
   1d020:	d4 83       	std	Z+4, r29	; 0x04
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:109
    ss = sec;
   1d022:	c5 83       	std	Z+5, r28	; 0x05
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:283
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
  uint16_t y = bcd2bin(Wire._I2C_READ()) + 2000;
  
  return DateTime (y, m, d, hh, mm, ss);
}
   1d024:	c6 01       	movw	r24, r12
   1d026:	df 91       	pop	r29
   1d028:	cf 91       	pop	r28
   1d02a:	1f 91       	pop	r17
   1d02c:	0f 91       	pop	r16
   1d02e:	ff 90       	pop	r15
   1d030:	df 90       	pop	r13
   1d032:	cf 90       	pop	r12
   1d034:	08 95       	ret

0001d036 <PID::SetTunings(double, double, double, int)>:
_ZN3PID10SetTuningsEdddi():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:103
 * This function allows the controller's dynamic performance to be adjusted.
 * it's called automatically from the constructor, but tunings can also
 * be adjusted on the fly during normal operation
 ******************************************************************************/
void PID::SetTunings(double Kp, double Ki, double Kd, int POn)
{
   1d036:	4f 92       	push	r4
   1d038:	5f 92       	push	r5
   1d03a:	6f 92       	push	r6
   1d03c:	7f 92       	push	r7
   1d03e:	8f 92       	push	r8
   1d040:	9f 92       	push	r9
   1d042:	af 92       	push	r10
   1d044:	bf 92       	push	r11
   1d046:	cf 92       	push	r12
   1d048:	df 92       	push	r13
   1d04a:	ef 92       	push	r14
   1d04c:	ff 92       	push	r15
   1d04e:	0f 93       	push	r16
   1d050:	1f 93       	push	r17
   1d052:	cf 93       	push	r28
   1d054:	df 93       	push	r29
   1d056:	00 d0       	rcall	.+0      	; 0x1d058 <PID::SetTunings(double, double, double, int)+0x22>
   1d058:	00 d0       	rcall	.+0      	; 0x1d05a <PID::SetTunings(double, double, double, int)+0x24>
   1d05a:	cd b7       	in	r28, 0x3d	; 61
   1d05c:	de b7       	in	r29, 0x3e	; 62
   1d05e:	9e 83       	std	Y+6, r25	; 0x06
   1d060:	8d 83       	std	Y+5, r24	; 0x05
   1d062:	49 83       	std	Y+1, r20	; 0x01
   1d064:	5a 83       	std	Y+2, r21	; 0x02
   1d066:	6b 83       	std	Y+3, r22	; 0x03
   1d068:	7c 83       	std	Y+4, r23	; 0x04
   1d06a:	28 01       	movw	r4, r16
   1d06c:	39 01       	movw	r6, r18
/home/saric/Arduino/libraries/PID/PID_v1.cpp:104
   if (Kp<0 || Ki<0 || Kd<0) return;
   1d06e:	20 e0       	ldi	r18, 0x00	; 0
   1d070:	30 e0       	ldi	r19, 0x00	; 0
   1d072:	a9 01       	movw	r20, r18
   1d074:	69 81       	ldd	r22, Y+1	; 0x01
   1d076:	7a 81       	ldd	r23, Y+2	; 0x02
   1d078:	8b 81       	ldd	r24, Y+3	; 0x03
   1d07a:	9c 81       	ldd	r25, Y+4	; 0x04
   1d07c:	0f 94 48 14 	call	0x22890	; 0x22890 <__cmpsf2>
   1d080:	87 fd       	sbrc	r24, 7
   1d082:	97 c0       	rjmp	.+302    	; 0x1d1b2 <PID::SetTunings(double, double, double, int)+0x17c>
   1d084:	20 e0       	ldi	r18, 0x00	; 0
   1d086:	30 e0       	ldi	r19, 0x00	; 0
   1d088:	a9 01       	movw	r20, r18
   1d08a:	c3 01       	movw	r24, r6
   1d08c:	b8 01       	movw	r22, r16
   1d08e:	0f 94 48 14 	call	0x22890	; 0x22890 <__cmpsf2>
   1d092:	87 fd       	sbrc	r24, 7
   1d094:	8e c0       	rjmp	.+284    	; 0x1d1b2 <PID::SetTunings(double, double, double, int)+0x17c>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:104 (discriminator 2)
   1d096:	20 e0       	ldi	r18, 0x00	; 0
   1d098:	30 e0       	ldi	r19, 0x00	; 0
   1d09a:	a9 01       	movw	r20, r18
   1d09c:	c7 01       	movw	r24, r14
   1d09e:	b6 01       	movw	r22, r12
   1d0a0:	0f 94 48 14 	call	0x22890	; 0x22890 <__cmpsf2>
   1d0a4:	87 fd       	sbrc	r24, 7
   1d0a6:	85 c0       	rjmp	.+266    	; 0x1d1b2 <PID::SetTunings(double, double, double, int)+0x17c>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:106

   pOn = POn;
   1d0a8:	ad 81       	ldd	r26, Y+5	; 0x05
   1d0aa:	be 81       	ldd	r27, Y+6	; 0x06
   1d0ac:	5b 96       	adiw	r26, 0x1b	; 27
   1d0ae:	bc 92       	st	X, r11
   1d0b0:	ae 92       	st	-X, r10
   1d0b2:	5a 97       	sbiw	r26, 0x1a	; 26
/home/saric/Arduino/libraries/PID/PID_v1.cpp:107
   pOnE = POn == P_ON_E;
   1d0b4:	81 e0       	ldi	r24, 0x01	; 1
   1d0b6:	aa 94       	dec	r10
   1d0b8:	ab 28       	or	r10, r11
   1d0ba:	09 f0       	breq	.+2      	; 0x1d0be <PID::SetTunings(double, double, double, int)+0x88>
   1d0bc:	80 e0       	ldi	r24, 0x00	; 0
   1d0be:	ed 81       	ldd	r30, Y+5	; 0x05
   1d0c0:	fe 81       	ldd	r31, Y+6	; 0x06
   1d0c2:	83 af       	std	Z+59, r24	; 0x3b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:109

   dispKp = Kp; dispKi = Ki; dispKd = Kd;
   1d0c4:	89 81       	ldd	r24, Y+1	; 0x01
   1d0c6:	9a 81       	ldd	r25, Y+2	; 0x02
   1d0c8:	ab 81       	ldd	r26, Y+3	; 0x03
   1d0ca:	bc 81       	ldd	r27, Y+4	; 0x04
   1d0cc:	80 83       	st	Z, r24
   1d0ce:	91 83       	std	Z+1, r25	; 0x01
   1d0d0:	a2 83       	std	Z+2, r26	; 0x02
   1d0d2:	b3 83       	std	Z+3, r27	; 0x03
   1d0d4:	44 82       	std	Z+4, r4	; 0x04
   1d0d6:	55 82       	std	Z+5, r5	; 0x05
   1d0d8:	66 82       	std	Z+6, r6	; 0x06
   1d0da:	77 82       	std	Z+7, r7	; 0x07
   1d0dc:	c0 86       	std	Z+8, r12	; 0x08
   1d0de:	d1 86       	std	Z+9, r13	; 0x09
   1d0e0:	e2 86       	std	Z+10, r14	; 0x0a
   1d0e2:	f3 86       	std	Z+11, r15	; 0x0b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:111

   double SampleTimeInSec = ((double)SampleTime)/1000;
   1d0e4:	66 a5       	ldd	r22, Z+46	; 0x2e
   1d0e6:	77 a5       	ldd	r23, Z+47	; 0x2f
   1d0e8:	80 a9       	ldd	r24, Z+48	; 0x30
   1d0ea:	91 a9       	ldd	r25, Z+49	; 0x31
   1d0ec:	0f 94 f5 14 	call	0x229ea	; 0x229ea <__floatunsisf>
   1d0f0:	20 e0       	ldi	r18, 0x00	; 0
   1d0f2:	30 e0       	ldi	r19, 0x00	; 0
   1d0f4:	4a e7       	ldi	r20, 0x7A	; 122
   1d0f6:	54 e4       	ldi	r21, 0x44	; 68
   1d0f8:	0f 94 4d 14 	call	0x2289a	; 0x2289a <__divsf3>
   1d0fc:	4b 01       	movw	r8, r22
   1d0fe:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:112
   kp = Kp;
   1d100:	89 81       	ldd	r24, Y+1	; 0x01
   1d102:	9a 81       	ldd	r25, Y+2	; 0x02
   1d104:	ab 81       	ldd	r26, Y+3	; 0x03
   1d106:	bc 81       	ldd	r27, Y+4	; 0x04
   1d108:	ed 81       	ldd	r30, Y+5	; 0x05
   1d10a:	fe 81       	ldd	r31, Y+6	; 0x06
   1d10c:	84 87       	std	Z+12, r24	; 0x0c
   1d10e:	95 87       	std	Z+13, r25	; 0x0d
   1d110:	a6 87       	std	Z+14, r26	; 0x0e
   1d112:	b7 87       	std	Z+15, r27	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:113
   ki = Ki * SampleTimeInSec;
   1d114:	a5 01       	movw	r20, r10
   1d116:	94 01       	movw	r18, r8
   1d118:	c3 01       	movw	r24, r6
   1d11a:	b2 01       	movw	r22, r4
   1d11c:	0f 94 ac 15 	call	0x22b58	; 0x22b58 <__mulsf3>
   1d120:	2b 01       	movw	r4, r22
   1d122:	3c 01       	movw	r6, r24
   1d124:	ad 81       	ldd	r26, Y+5	; 0x05
   1d126:	be 81       	ldd	r27, Y+6	; 0x06
   1d128:	50 96       	adiw	r26, 0x10	; 16
   1d12a:	4d 92       	st	X+, r4
   1d12c:	5d 92       	st	X+, r5
   1d12e:	6d 92       	st	X+, r6
   1d130:	7c 92       	st	X, r7
   1d132:	53 97       	sbiw	r26, 0x13	; 19
/home/saric/Arduino/libraries/PID/PID_v1.cpp:114
   kd = Kd / SampleTimeInSec;
   1d134:	a5 01       	movw	r20, r10
   1d136:	94 01       	movw	r18, r8
   1d138:	c7 01       	movw	r24, r14
   1d13a:	b6 01       	movw	r22, r12
   1d13c:	0f 94 4d 14 	call	0x2289a	; 0x2289a <__divsf3>
   1d140:	6b 01       	movw	r12, r22
   1d142:	7c 01       	movw	r14, r24
   1d144:	ed 81       	ldd	r30, Y+5	; 0x05
   1d146:	fe 81       	ldd	r31, Y+6	; 0x06
   1d148:	c4 8a       	std	Z+20, r12	; 0x14
   1d14a:	d5 8a       	std	Z+21, r13	; 0x15
   1d14c:	e6 8a       	std	Z+22, r14	; 0x16
   1d14e:	f7 8a       	std	Z+23, r15	; 0x17
/home/saric/Arduino/libraries/PID/PID_v1.cpp:116

  if(controllerDirection == REVERSE)
   1d150:	80 8d       	ldd	r24, Z+24	; 0x18
   1d152:	91 8d       	ldd	r25, Z+25	; 0x19
   1d154:	01 97       	sbiw	r24, 0x01	; 1
   1d156:	69 f5       	brne	.+90     	; 0x1d1b2 <PID::SetTunings(double, double, double, int)+0x17c>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:118
   {
      kp = (0 - kp);
   1d158:	29 81       	ldd	r18, Y+1	; 0x01
   1d15a:	3a 81       	ldd	r19, Y+2	; 0x02
   1d15c:	4b 81       	ldd	r20, Y+3	; 0x03
   1d15e:	5c 81       	ldd	r21, Y+4	; 0x04
   1d160:	60 e0       	ldi	r22, 0x00	; 0
   1d162:	70 e0       	ldi	r23, 0x00	; 0
   1d164:	cb 01       	movw	r24, r22
   1d166:	0f 94 db 13 	call	0x227b6	; 0x227b6 <__subsf3>
   1d16a:	ad 81       	ldd	r26, Y+5	; 0x05
   1d16c:	be 81       	ldd	r27, Y+6	; 0x06
   1d16e:	1c 96       	adiw	r26, 0x0c	; 12
   1d170:	6d 93       	st	X+, r22
   1d172:	7d 93       	st	X+, r23
   1d174:	8d 93       	st	X+, r24
   1d176:	9c 93       	st	X, r25
   1d178:	1f 97       	sbiw	r26, 0x0f	; 15
/home/saric/Arduino/libraries/PID/PID_v1.cpp:119
      ki = (0 - ki);
   1d17a:	a3 01       	movw	r20, r6
   1d17c:	92 01       	movw	r18, r4
   1d17e:	60 e0       	ldi	r22, 0x00	; 0
   1d180:	70 e0       	ldi	r23, 0x00	; 0
   1d182:	cb 01       	movw	r24, r22
   1d184:	0f 94 db 13 	call	0x227b6	; 0x227b6 <__subsf3>
   1d188:	ed 81       	ldd	r30, Y+5	; 0x05
   1d18a:	fe 81       	ldd	r31, Y+6	; 0x06
   1d18c:	60 8b       	std	Z+16, r22	; 0x10
   1d18e:	71 8b       	std	Z+17, r23	; 0x11
   1d190:	82 8b       	std	Z+18, r24	; 0x12
   1d192:	93 8b       	std	Z+19, r25	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:120
      kd = (0 - kd);
   1d194:	a7 01       	movw	r20, r14
   1d196:	96 01       	movw	r18, r12
   1d198:	60 e0       	ldi	r22, 0x00	; 0
   1d19a:	70 e0       	ldi	r23, 0x00	; 0
   1d19c:	cb 01       	movw	r24, r22
   1d19e:	0f 94 db 13 	call	0x227b6	; 0x227b6 <__subsf3>
   1d1a2:	ad 81       	ldd	r26, Y+5	; 0x05
   1d1a4:	be 81       	ldd	r27, Y+6	; 0x06
   1d1a6:	54 96       	adiw	r26, 0x14	; 20
   1d1a8:	6d 93       	st	X+, r22
   1d1aa:	7d 93       	st	X+, r23
   1d1ac:	8d 93       	st	X+, r24
   1d1ae:	9c 93       	st	X, r25
   1d1b0:	57 97       	sbiw	r26, 0x17	; 23
/home/saric/Arduino/libraries/PID/PID_v1.cpp:122
   }
}
   1d1b2:	26 96       	adiw	r28, 0x06	; 6
   1d1b4:	0f b6       	in	r0, 0x3f	; 63
   1d1b6:	f8 94       	cli
   1d1b8:	de bf       	out	0x3e, r29	; 62
   1d1ba:	0f be       	out	0x3f, r0	; 63
   1d1bc:	cd bf       	out	0x3d, r28	; 61
   1d1be:	df 91       	pop	r29
   1d1c0:	cf 91       	pop	r28
   1d1c2:	1f 91       	pop	r17
   1d1c4:	0f 91       	pop	r16
   1d1c6:	ff 90       	pop	r15
   1d1c8:	ef 90       	pop	r14
   1d1ca:	df 90       	pop	r13
   1d1cc:	cf 90       	pop	r12
   1d1ce:	bf 90       	pop	r11
   1d1d0:	af 90       	pop	r10
   1d1d2:	9f 90       	pop	r9
   1d1d4:	8f 90       	pop	r8
   1d1d6:	7f 90       	pop	r7
   1d1d8:	6f 90       	pop	r6
   1d1da:	5f 90       	pop	r5
   1d1dc:	4f 90       	pop	r4
   1d1de:	08 95       	ret

0001d1e0 <PID::SetTunings(double, double, double)>:
_ZN3PID10SetTuningsEddd():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:127

/* SetTunings(...)*************************************************************
 * Set Tunings using the last-rembered POn setting
 ******************************************************************************/
void PID::SetTunings(double Kp, double Ki, double Kd){
   1d1e0:	af 92       	push	r10
   1d1e2:	bf 92       	push	r11
   1d1e4:	cf 92       	push	r12
   1d1e6:	df 92       	push	r13
   1d1e8:	ef 92       	push	r14
   1d1ea:	ff 92       	push	r15
   1d1ec:	0f 93       	push	r16
   1d1ee:	1f 93       	push	r17
/home/saric/Arduino/libraries/PID/PID_v1.cpp:128
    SetTunings(Kp, Ki, Kd, pOn); 
   1d1f0:	fc 01       	movw	r30, r24
   1d1f2:	a2 8c       	ldd	r10, Z+26	; 0x1a
   1d1f4:	b3 8c       	ldd	r11, Z+27	; 0x1b
   1d1f6:	0e 94 1b e8 	call	0x1d036	; 0x1d036 <PID::SetTunings(double, double, double, int)>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:129
}
   1d1fa:	1f 91       	pop	r17
   1d1fc:	0f 91       	pop	r16
   1d1fe:	ff 90       	pop	r15
   1d200:	ef 90       	pop	r14
   1d202:	df 90       	pop	r13
   1d204:	cf 90       	pop	r12
   1d206:	bf 90       	pop	r11
   1d208:	af 90       	pop	r10
   1d20a:	08 95       	ret

0001d20c <PID::SetSampleTime(int)>:
_ZN3PID13SetSampleTimeEi():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:135

/* SetSampleTime(...) *********************************************************
 * sets the period, in Milliseconds, at which the calculation is performed
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
   1d20c:	8f 92       	push	r8
   1d20e:	9f 92       	push	r9
   1d210:	af 92       	push	r10
   1d212:	bf 92       	push	r11
   1d214:	cf 92       	push	r12
   1d216:	df 92       	push	r13
   1d218:	ef 92       	push	r14
   1d21a:	ff 92       	push	r15
   1d21c:	cf 93       	push	r28
   1d21e:	df 93       	push	r29
/home/saric/Arduino/libraries/PID/PID_v1.cpp:136
   if (NewSampleTime > 0)
   1d220:	16 16       	cp	r1, r22
   1d222:	17 06       	cpc	r1, r23
   1d224:	ac f5       	brge	.+106    	; 0x1d290 <PID::SetSampleTime(int)+0x84>
   1d226:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:138
   {
      double ratio  = (double)NewSampleTime
   1d228:	6b 01       	movw	r12, r22
   1d22a:	77 0f       	add	r23, r23
   1d22c:	ee 08       	sbc	r14, r14
   1d22e:	ff 08       	sbc	r15, r15
   1d230:	c7 01       	movw	r24, r14
   1d232:	b6 01       	movw	r22, r12
   1d234:	0f 94 f7 14 	call	0x229ee	; 0x229ee <__floatsisf>
   1d238:	4b 01       	movw	r8, r22
   1d23a:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:139
                      / (double)SampleTime;
   1d23c:	6e a5       	ldd	r22, Y+46	; 0x2e
   1d23e:	7f a5       	ldd	r23, Y+47	; 0x2f
   1d240:	88 a9       	ldd	r24, Y+48	; 0x30
   1d242:	99 a9       	ldd	r25, Y+49	; 0x31
   1d244:	0f 94 f5 14 	call	0x229ea	; 0x229ea <__floatunsisf>
   1d248:	9b 01       	movw	r18, r22
   1d24a:	ac 01       	movw	r20, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:138
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
   if (NewSampleTime > 0)
   {
      double ratio  = (double)NewSampleTime
   1d24c:	c5 01       	movw	r24, r10
   1d24e:	b4 01       	movw	r22, r8
   1d250:	0f 94 4d 14 	call	0x2289a	; 0x2289a <__divsf3>
   1d254:	4b 01       	movw	r8, r22
   1d256:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:140
                      / (double)SampleTime;
      ki *= ratio;
   1d258:	ac 01       	movw	r20, r24
   1d25a:	9b 01       	movw	r18, r22
   1d25c:	68 89       	ldd	r22, Y+16	; 0x10
   1d25e:	79 89       	ldd	r23, Y+17	; 0x11
   1d260:	8a 89       	ldd	r24, Y+18	; 0x12
   1d262:	9b 89       	ldd	r25, Y+19	; 0x13
   1d264:	0f 94 ac 15 	call	0x22b58	; 0x22b58 <__mulsf3>
   1d268:	68 8b       	std	Y+16, r22	; 0x10
   1d26a:	79 8b       	std	Y+17, r23	; 0x11
   1d26c:	8a 8b       	std	Y+18, r24	; 0x12
   1d26e:	9b 8b       	std	Y+19, r25	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:141
      kd /= ratio;
   1d270:	a5 01       	movw	r20, r10
   1d272:	94 01       	movw	r18, r8
   1d274:	6c 89       	ldd	r22, Y+20	; 0x14
   1d276:	7d 89       	ldd	r23, Y+21	; 0x15
   1d278:	8e 89       	ldd	r24, Y+22	; 0x16
   1d27a:	9f 89       	ldd	r25, Y+23	; 0x17
   1d27c:	0f 94 4d 14 	call	0x2289a	; 0x2289a <__divsf3>
   1d280:	6c 8b       	std	Y+20, r22	; 0x14
   1d282:	7d 8b       	std	Y+21, r23	; 0x15
   1d284:	8e 8b       	std	Y+22, r24	; 0x16
   1d286:	9f 8b       	std	Y+23, r25	; 0x17
/home/saric/Arduino/libraries/PID/PID_v1.cpp:142
      SampleTime = (unsigned long)NewSampleTime;
   1d288:	ce a6       	std	Y+46, r12	; 0x2e
   1d28a:	df a6       	std	Y+47, r13	; 0x2f
   1d28c:	e8 aa       	std	Y+48, r14	; 0x30
   1d28e:	f9 aa       	std	Y+49, r15	; 0x31
/home/saric/Arduino/libraries/PID/PID_v1.cpp:144
   }
}
   1d290:	df 91       	pop	r29
   1d292:	cf 91       	pop	r28
   1d294:	ff 90       	pop	r15
   1d296:	ef 90       	pop	r14
   1d298:	df 90       	pop	r13
   1d29a:	cf 90       	pop	r12
   1d29c:	bf 90       	pop	r11
   1d29e:	af 90       	pop	r10
   1d2a0:	9f 90       	pop	r9
   1d2a2:	8f 90       	pop	r8
   1d2a4:	08 95       	ret

0001d2a6 <PID::SetOutputLimits(double, double)>:
_ZN3PID15SetOutputLimitsEdd():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:155
 *  be doing a time window and will need 0-8000 or something.  or maybe they'll
 *  want to clamp it from 0-125.  who knows.  at any rate, that can all be done
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   1d2a6:	2f 92       	push	r2
   1d2a8:	3f 92       	push	r3
   1d2aa:	4f 92       	push	r4
   1d2ac:	5f 92       	push	r5
   1d2ae:	6f 92       	push	r6
   1d2b0:	7f 92       	push	r7
   1d2b2:	8f 92       	push	r8
   1d2b4:	9f 92       	push	r9
   1d2b6:	af 92       	push	r10
   1d2b8:	bf 92       	push	r11
   1d2ba:	cf 92       	push	r12
   1d2bc:	df 92       	push	r13
   1d2be:	ef 92       	push	r14
   1d2c0:	ff 92       	push	r15
   1d2c2:	0f 93       	push	r16
   1d2c4:	1f 93       	push	r17
   1d2c6:	cf 93       	push	r28
   1d2c8:	df 93       	push	r29
   1d2ca:	ec 01       	movw	r28, r24
   1d2cc:	6a 01       	movw	r12, r20
   1d2ce:	7b 01       	movw	r14, r22
   1d2d0:	48 01       	movw	r8, r16
   1d2d2:	59 01       	movw	r10, r18
/home/saric/Arduino/libraries/PID/PID_v1.cpp:156
   if(Min >= Max) return;
   1d2d4:	a9 01       	movw	r20, r18
   1d2d6:	98 01       	movw	r18, r16
   1d2d8:	cb 01       	movw	r24, r22
   1d2da:	b6 01       	movw	r22, r12
   1d2dc:	0f 94 a7 15 	call	0x22b4e	; 0x22b4e <__gesf2>
   1d2e0:	87 ff       	sbrs	r24, 7
   1d2e2:	4f c0       	rjmp	.+158    	; 0x1d382 <PID::SetOutputLimits(double, double)+0xdc>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:157
   outMin = Min;
   1d2e4:	ca aa       	std	Y+50, r12	; 0x32
   1d2e6:	db aa       	std	Y+51, r13	; 0x33
   1d2e8:	ec aa       	std	Y+52, r14	; 0x34
   1d2ea:	fd aa       	std	Y+53, r15	; 0x35
/home/saric/Arduino/libraries/PID/PID_v1.cpp:158
   outMax = Max;
   1d2ec:	8e aa       	std	Y+54, r8	; 0x36
   1d2ee:	9f aa       	std	Y+55, r9	; 0x37
   1d2f0:	a8 ae       	std	Y+56, r10	; 0x38
   1d2f2:	b9 ae       	std	Y+57, r11	; 0x39
/home/saric/Arduino/libraries/PID/PID_v1.cpp:160

   if(inAuto)
   1d2f4:	8a ad       	ldd	r24, Y+58	; 0x3a
   1d2f6:	88 23       	and	r24, r24
   1d2f8:	09 f4       	brne	.+2      	; 0x1d2fc <PID::SetOutputLimits(double, double)+0x56>
   1d2fa:	43 c0       	rjmp	.+134    	; 0x1d382 <PID::SetOutputLimits(double, double)+0xdc>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:162
   {
	   if(*myOutput > outMax) *myOutput = outMax;
   1d2fc:	2e 8c       	ldd	r2, Y+30	; 0x1e
   1d2fe:	3f 8c       	ldd	r3, Y+31	; 0x1f
   1d300:	f1 01       	movw	r30, r2
   1d302:	40 80       	ld	r4, Z
   1d304:	51 80       	ldd	r5, Z+1	; 0x01
   1d306:	62 80       	ldd	r6, Z+2	; 0x02
   1d308:	73 80       	ldd	r7, Z+3	; 0x03
   1d30a:	a3 01       	movw	r20, r6
   1d30c:	92 01       	movw	r18, r4
   1d30e:	c5 01       	movw	r24, r10
   1d310:	b8 01       	movw	r22, r16
   1d312:	0f 94 48 14 	call	0x22890	; 0x22890 <__cmpsf2>
   1d316:	87 ff       	sbrs	r24, 7
   1d318:	1a c0       	rjmp	.+52     	; 0x1d34e <PID::SetOutputLimits(double, double)+0xa8>
   1d31a:	f1 01       	movw	r30, r2
   1d31c:	80 82       	st	Z, r8
   1d31e:	91 82       	std	Z+1, r9	; 0x01
   1d320:	a2 82       	std	Z+2, r10	; 0x02
   1d322:	b3 82       	std	Z+3, r11	; 0x03
/home/saric/Arduino/libraries/PID/PID_v1.cpp:165
	   else if(*myOutput < outMin) *myOutput = outMin;

	   if(outputSum > outMax) outputSum= outMax;
   1d324:	8e a0       	ldd	r8, Y+38	; 0x26
   1d326:	9f a0       	ldd	r9, Y+39	; 0x27
   1d328:	a8 a4       	ldd	r10, Y+40	; 0x28
   1d32a:	b9 a4       	ldd	r11, Y+41	; 0x29
   1d32c:	ce a8       	ldd	r12, Y+54	; 0x36
   1d32e:	df a8       	ldd	r13, Y+55	; 0x37
   1d330:	e8 ac       	ldd	r14, Y+56	; 0x38
   1d332:	f9 ac       	ldd	r15, Y+57	; 0x39
   1d334:	a7 01       	movw	r20, r14
   1d336:	96 01       	movw	r18, r12
   1d338:	c5 01       	movw	r24, r10
   1d33a:	b4 01       	movw	r22, r8
   1d33c:	0f 94 a7 15 	call	0x22b4e	; 0x22b4e <__gesf2>
   1d340:	18 16       	cp	r1, r24
   1d342:	9c f4       	brge	.+38     	; 0x1d36a <PID::SetOutputLimits(double, double)+0xc4>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:166
	   else if(outputSum < outMin) outputSum= outMin;
   1d344:	ce a2       	std	Y+38, r12	; 0x26
   1d346:	df a2       	std	Y+39, r13	; 0x27
   1d348:	e8 a6       	std	Y+40, r14	; 0x28
   1d34a:	f9 a6       	std	Y+41, r15	; 0x29
   1d34c:	1a c0       	rjmp	.+52     	; 0x1d382 <PID::SetOutputLimits(double, double)+0xdc>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:163
   outMax = Max;

   if(inAuto)
   {
	   if(*myOutput > outMax) *myOutput = outMax;
	   else if(*myOutput < outMin) *myOutput = outMin;
   1d34e:	a3 01       	movw	r20, r6
   1d350:	92 01       	movw	r18, r4
   1d352:	c7 01       	movw	r24, r14
   1d354:	b6 01       	movw	r22, r12
   1d356:	0f 94 a7 15 	call	0x22b4e	; 0x22b4e <__gesf2>
   1d35a:	18 16       	cp	r1, r24
   1d35c:	1c f7       	brge	.-58     	; 0x1d324 <PID::SetOutputLimits(double, double)+0x7e>
   1d35e:	f1 01       	movw	r30, r2
   1d360:	c0 82       	st	Z, r12
   1d362:	d1 82       	std	Z+1, r13	; 0x01
   1d364:	e2 82       	std	Z+2, r14	; 0x02
   1d366:	f3 82       	std	Z+3, r15	; 0x03
   1d368:	dd cf       	rjmp	.-70     	; 0x1d324 <PID::SetOutputLimits(double, double)+0x7e>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:166

	   if(outputSum > outMax) outputSum= outMax;
	   else if(outputSum < outMin) outputSum= outMin;
   1d36a:	ca a8       	ldd	r12, Y+50	; 0x32
   1d36c:	db a8       	ldd	r13, Y+51	; 0x33
   1d36e:	ec a8       	ldd	r14, Y+52	; 0x34
   1d370:	fd a8       	ldd	r15, Y+53	; 0x35
   1d372:	a7 01       	movw	r20, r14
   1d374:	96 01       	movw	r18, r12
   1d376:	c5 01       	movw	r24, r10
   1d378:	b4 01       	movw	r22, r8
   1d37a:	0f 94 48 14 	call	0x22890	; 0x22890 <__cmpsf2>
   1d37e:	87 fd       	sbrc	r24, 7
   1d380:	e1 cf       	rjmp	.-62     	; 0x1d344 <PID::SetOutputLimits(double, double)+0x9e>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:168
   }
}
   1d382:	df 91       	pop	r29
   1d384:	cf 91       	pop	r28
   1d386:	1f 91       	pop	r17
   1d388:	0f 91       	pop	r16
   1d38a:	ff 90       	pop	r15
   1d38c:	ef 90       	pop	r14
   1d38e:	df 90       	pop	r13
   1d390:	cf 90       	pop	r12
   1d392:	bf 90       	pop	r11
   1d394:	af 90       	pop	r10
   1d396:	9f 90       	pop	r9
   1d398:	8f 90       	pop	r8
   1d39a:	7f 90       	pop	r7
   1d39c:	6f 90       	pop	r6
   1d39e:	5f 90       	pop	r5
   1d3a0:	4f 90       	pop	r4
   1d3a2:	3f 90       	pop	r3
   1d3a4:	2f 90       	pop	r2
   1d3a6:	08 95       	ret

0001d3a8 <PID::Initialize()>:
_ZN3PID10InitializeEv():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:190
/* Initialize()****************************************************************
 *	does all the things that need to happen to ensure a bumpless transfer
 *  from manual to automatic mode.
 ******************************************************************************/
void PID::Initialize()
{
   1d3a8:	8f 92       	push	r8
   1d3aa:	9f 92       	push	r9
   1d3ac:	af 92       	push	r10
   1d3ae:	bf 92       	push	r11
   1d3b0:	cf 92       	push	r12
   1d3b2:	df 92       	push	r13
   1d3b4:	ef 92       	push	r14
   1d3b6:	ff 92       	push	r15
   1d3b8:	cf 93       	push	r28
   1d3ba:	df 93       	push	r29
   1d3bc:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:191
   outputSum = *myOutput;
   1d3be:	ee 8d       	ldd	r30, Y+30	; 0x1e
   1d3c0:	ff 8d       	ldd	r31, Y+31	; 0x1f
   1d3c2:	c0 80       	ld	r12, Z
   1d3c4:	d1 80       	ldd	r13, Z+1	; 0x01
   1d3c6:	e2 80       	ldd	r14, Z+2	; 0x02
   1d3c8:	f3 80       	ldd	r15, Z+3	; 0x03
   1d3ca:	ce a2       	std	Y+38, r12	; 0x26
   1d3cc:	df a2       	std	Y+39, r13	; 0x27
   1d3ce:	e8 a6       	std	Y+40, r14	; 0x28
   1d3d0:	f9 a6       	std	Y+41, r15	; 0x29
/home/saric/Arduino/libraries/PID/PID_v1.cpp:192
   lastInput = *myInput;
   1d3d2:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1d3d4:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1d3d6:	80 81       	ld	r24, Z
   1d3d8:	91 81       	ldd	r25, Z+1	; 0x01
   1d3da:	a2 81       	ldd	r26, Z+2	; 0x02
   1d3dc:	b3 81       	ldd	r27, Z+3	; 0x03
   1d3de:	8a a7       	std	Y+42, r24	; 0x2a
   1d3e0:	9b a7       	std	Y+43, r25	; 0x2b
   1d3e2:	ac a7       	std	Y+44, r26	; 0x2c
   1d3e4:	bd a7       	std	Y+45, r27	; 0x2d
/home/saric/Arduino/libraries/PID/PID_v1.cpp:193
   if(outputSum > outMax) outputSum = outMax;
   1d3e6:	8e a8       	ldd	r8, Y+54	; 0x36
   1d3e8:	9f a8       	ldd	r9, Y+55	; 0x37
   1d3ea:	a8 ac       	ldd	r10, Y+56	; 0x38
   1d3ec:	b9 ac       	ldd	r11, Y+57	; 0x39
   1d3ee:	a5 01       	movw	r20, r10
   1d3f0:	94 01       	movw	r18, r8
   1d3f2:	c7 01       	movw	r24, r14
   1d3f4:	b6 01       	movw	r22, r12
   1d3f6:	0f 94 a7 15 	call	0x22b4e	; 0x22b4e <__gesf2>
   1d3fa:	18 16       	cp	r1, r24
   1d3fc:	2c f4       	brge	.+10     	; 0x1d408 <PID::Initialize()+0x60>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:194 (discriminator 1)
   else if(outputSum < outMin) outputSum = outMin;
   1d3fe:	8e a2       	std	Y+38, r8	; 0x26
   1d400:	9f a2       	std	Y+39, r9	; 0x27
   1d402:	a8 a6       	std	Y+40, r10	; 0x28
   1d404:	b9 a6       	std	Y+41, r11	; 0x29
/home/saric/Arduino/libraries/PID/PID_v1.cpp:195 (discriminator 1)
}
   1d406:	0c c0       	rjmp	.+24     	; 0x1d420 <PID::Initialize()+0x78>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:194
void PID::Initialize()
{
   outputSum = *myOutput;
   lastInput = *myInput;
   if(outputSum > outMax) outputSum = outMax;
   else if(outputSum < outMin) outputSum = outMin;
   1d408:	8a a8       	ldd	r8, Y+50	; 0x32
   1d40a:	9b a8       	ldd	r9, Y+51	; 0x33
   1d40c:	ac a8       	ldd	r10, Y+52	; 0x34
   1d40e:	bd a8       	ldd	r11, Y+53	; 0x35
   1d410:	a5 01       	movw	r20, r10
   1d412:	94 01       	movw	r18, r8
   1d414:	c7 01       	movw	r24, r14
   1d416:	b6 01       	movw	r22, r12
   1d418:	0f 94 48 14 	call	0x22890	; 0x22890 <__cmpsf2>
   1d41c:	87 fd       	sbrc	r24, 7
   1d41e:	ef cf       	rjmp	.-34     	; 0x1d3fe <PID::Initialize()+0x56>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:195
}
   1d420:	df 91       	pop	r29
   1d422:	cf 91       	pop	r28
   1d424:	ff 90       	pop	r15
   1d426:	ef 90       	pop	r14
   1d428:	df 90       	pop	r13
   1d42a:	cf 90       	pop	r12
   1d42c:	bf 90       	pop	r11
   1d42e:	af 90       	pop	r10
   1d430:	9f 90       	pop	r9
   1d432:	8f 90       	pop	r8
   1d434:	08 95       	ret

0001d436 <PID::SetMode(int)>:
_ZN3PID7SetModeEi():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:176
 * Allows the controller Mode to be set to manual (0) or Automatic (non-zero)
 * when the transition from manual to auto occurs, the controller is
 * automatically initialized
 ******************************************************************************/
void PID::SetMode(int Mode)
{
   1d436:	1f 93       	push	r17
   1d438:	cf 93       	push	r28
   1d43a:	df 93       	push	r29
   1d43c:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:177
    bool newAuto = (Mode == AUTOMATIC);
   1d43e:	11 e0       	ldi	r17, 0x01	; 1
   1d440:	61 30       	cpi	r22, 0x01	; 1
   1d442:	71 05       	cpc	r23, r1
   1d444:	09 f0       	breq	.+2      	; 0x1d448 <PID::SetMode(int)+0x12>
   1d446:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/libraries/PID/PID_v1.cpp:178
    if(newAuto && !inAuto)
   1d448:	61 30       	cpi	r22, 0x01	; 1
   1d44a:	71 05       	cpc	r23, r1
   1d44c:	31 f4       	brne	.+12     	; 0x1d45a <PID::SetMode(int)+0x24>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:178 (discriminator 1)
   1d44e:	8a ad       	ldd	r24, Y+58	; 0x3a
   1d450:	81 11       	cpse	r24, r1
   1d452:	03 c0       	rjmp	.+6      	; 0x1d45a <PID::SetMode(int)+0x24>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:180
    {  /*we just went from manual to auto*/
        PID::Initialize();
   1d454:	ce 01       	movw	r24, r28
   1d456:	0e 94 d4 e9 	call	0x1d3a8	; 0x1d3a8 <PID::Initialize()>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:182
    }
    inAuto = newAuto;
   1d45a:	1a af       	std	Y+58, r17	; 0x3a
/home/saric/Arduino/libraries/PID/PID_v1.cpp:183
}
   1d45c:	df 91       	pop	r29
   1d45e:	cf 91       	pop	r28
   1d460:	1f 91       	pop	r17
   1d462:	08 95       	ret

0001d464 <PID::SetControllerDirection(int)>:
_ZN3PID22SetControllerDirectionEi():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:204
 * to +Input) or a REVERSE acting process(+Output leads to -Input.)  we need to
 * know which one, because otherwise we may increase the output when we should
 * be decreasing.  This is called from the constructor.
 ******************************************************************************/
void PID::SetControllerDirection(int Direction)
{
   1d464:	0f 93       	push	r16
   1d466:	1f 93       	push	r17
   1d468:	cf 93       	push	r28
   1d46a:	df 93       	push	r29
   1d46c:	ec 01       	movw	r28, r24
   1d46e:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/PID/PID_v1.cpp:205
   if(inAuto && Direction !=controllerDirection)
   1d470:	8a ad       	ldd	r24, Y+58	; 0x3a
   1d472:	88 23       	and	r24, r24
   1d474:	61 f1       	breq	.+88     	; 0x1d4ce <PID::SetControllerDirection(int)+0x6a>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:205 (discriminator 1)
   1d476:	88 8d       	ldd	r24, Y+24	; 0x18
   1d478:	99 8d       	ldd	r25, Y+25	; 0x19
   1d47a:	86 17       	cp	r24, r22
   1d47c:	97 07       	cpc	r25, r23
   1d47e:	39 f1       	breq	.+78     	; 0x1d4ce <PID::SetControllerDirection(int)+0x6a>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:207
   {
	    kp = (0 - kp);
   1d480:	2c 85       	ldd	r18, Y+12	; 0x0c
   1d482:	3d 85       	ldd	r19, Y+13	; 0x0d
   1d484:	4e 85       	ldd	r20, Y+14	; 0x0e
   1d486:	5f 85       	ldd	r21, Y+15	; 0x0f
   1d488:	60 e0       	ldi	r22, 0x00	; 0
   1d48a:	70 e0       	ldi	r23, 0x00	; 0
   1d48c:	cb 01       	movw	r24, r22
   1d48e:	0f 94 db 13 	call	0x227b6	; 0x227b6 <__subsf3>
   1d492:	6c 87       	std	Y+12, r22	; 0x0c
   1d494:	7d 87       	std	Y+13, r23	; 0x0d
   1d496:	8e 87       	std	Y+14, r24	; 0x0e
   1d498:	9f 87       	std	Y+15, r25	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:208
      ki = (0 - ki);
   1d49a:	28 89       	ldd	r18, Y+16	; 0x10
   1d49c:	39 89       	ldd	r19, Y+17	; 0x11
   1d49e:	4a 89       	ldd	r20, Y+18	; 0x12
   1d4a0:	5b 89       	ldd	r21, Y+19	; 0x13
   1d4a2:	60 e0       	ldi	r22, 0x00	; 0
   1d4a4:	70 e0       	ldi	r23, 0x00	; 0
   1d4a6:	cb 01       	movw	r24, r22
   1d4a8:	0f 94 db 13 	call	0x227b6	; 0x227b6 <__subsf3>
   1d4ac:	68 8b       	std	Y+16, r22	; 0x10
   1d4ae:	79 8b       	std	Y+17, r23	; 0x11
   1d4b0:	8a 8b       	std	Y+18, r24	; 0x12
   1d4b2:	9b 8b       	std	Y+19, r25	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:209
      kd = (0 - kd);
   1d4b4:	2c 89       	ldd	r18, Y+20	; 0x14
   1d4b6:	3d 89       	ldd	r19, Y+21	; 0x15
   1d4b8:	4e 89       	ldd	r20, Y+22	; 0x16
   1d4ba:	5f 89       	ldd	r21, Y+23	; 0x17
   1d4bc:	60 e0       	ldi	r22, 0x00	; 0
   1d4be:	70 e0       	ldi	r23, 0x00	; 0
   1d4c0:	cb 01       	movw	r24, r22
   1d4c2:	0f 94 db 13 	call	0x227b6	; 0x227b6 <__subsf3>
   1d4c6:	6c 8b       	std	Y+20, r22	; 0x14
   1d4c8:	7d 8b       	std	Y+21, r23	; 0x15
   1d4ca:	8e 8b       	std	Y+22, r24	; 0x16
   1d4cc:	9f 8b       	std	Y+23, r25	; 0x17
/home/saric/Arduino/libraries/PID/PID_v1.cpp:211
   }
   controllerDirection = Direction;
   1d4ce:	19 8f       	std	Y+25, r17	; 0x19
   1d4d0:	08 8f       	std	Y+24, r16	; 0x18
/home/saric/Arduino/libraries/PID/PID_v1.cpp:212
}
   1d4d2:	df 91       	pop	r29
   1d4d4:	cf 91       	pop	r28
   1d4d6:	1f 91       	pop	r17
   1d4d8:	0f 91       	pop	r16
   1d4da:	08 95       	ret

0001d4dc <PID::PID(double*, double*, double*, double, double, double, int, int)>:
_ZN3PIDC2EPdS0_S0_dddii():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:20

/*Constructor (...)*********************************************************
 *    The parameters specified here are those for for which we can't set up
 *    reliable defaults, so we need to have the user set them.
 ***************************************************************************/
PID::PID(double* Input, double* Output, double* Setpoint,
   1d4dc:	4f 92       	push	r4
   1d4de:	5f 92       	push	r5
   1d4e0:	6f 92       	push	r6
   1d4e2:	7f 92       	push	r7
   1d4e4:	8f 92       	push	r8
   1d4e6:	9f 92       	push	r9
   1d4e8:	af 92       	push	r10
   1d4ea:	bf 92       	push	r11
   1d4ec:	cf 92       	push	r12
   1d4ee:	df 92       	push	r13
   1d4f0:	ef 92       	push	r14
   1d4f2:	ff 92       	push	r15
   1d4f4:	0f 93       	push	r16
   1d4f6:	1f 93       	push	r17
   1d4f8:	cf 93       	push	r28
   1d4fa:	df 93       	push	r29
   1d4fc:	00 d0       	rcall	.+0      	; 0x1d4fe <PID::PID(double*, double*, double*, double, double, double, int, int)+0x22>
   1d4fe:	1f 92       	push	r1
   1d500:	cd b7       	in	r28, 0x3d	; 61
   1d502:	de b7       	in	r29, 0x3e	; 62
   1d504:	4c 01       	movw	r8, r24
   1d506:	27 01       	movw	r4, r14
   1d508:	38 01       	movw	r6, r16
   1d50a:	a9 82       	std	Y+1, r10	; 0x01
   1d50c:	ba 82       	std	Y+2, r11	; 0x02
   1d50e:	cb 82       	std	Y+3, r12	; 0x03
   1d510:	dc 82       	std	Y+4, r13	; 0x04
/home/saric/Arduino/libraries/PID/PID_v1.cpp:23
        double Kp, double Ki, double Kd, int POn, int ControllerDirection)
{
    myOutput = Output;
   1d512:	fc 01       	movw	r30, r24
   1d514:	57 8f       	std	Z+31, r21	; 0x1f
   1d516:	46 8f       	std	Z+30, r20	; 0x1e
/home/saric/Arduino/libraries/PID/PID_v1.cpp:24
    myInput = Input;
   1d518:	75 8f       	std	Z+29, r23	; 0x1d
   1d51a:	64 8f       	std	Z+28, r22	; 0x1c
/home/saric/Arduino/libraries/PID/PID_v1.cpp:25
    mySetpoint = Setpoint;
   1d51c:	31 a3       	std	Z+33, r19	; 0x21
   1d51e:	20 a3       	std	Z+32, r18	; 0x20
/home/saric/Arduino/libraries/PID/PID_v1.cpp:26
    inAuto = false;
   1d520:	12 ae       	std	Z+58, r1	; 0x3a
_ZN3PID15SetOutputLimitsEdd():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:157
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   if(Min >= Max) return;
   outMin = Min;
   1d522:	12 aa       	std	Z+50, r1	; 0x32
   1d524:	13 aa       	std	Z+51, r1	; 0x33
   1d526:	14 aa       	std	Z+52, r1	; 0x34
   1d528:	15 aa       	std	Z+53, r1	; 0x35
/home/saric/Arduino/libraries/PID/PID_v1.cpp:158
   outMax = Max;
   1d52a:	80 e0       	ldi	r24, 0x00	; 0
   1d52c:	90 e0       	ldi	r25, 0x00	; 0
   1d52e:	af e7       	ldi	r26, 0x7F	; 127
   1d530:	b3 e4       	ldi	r27, 0x43	; 67
   1d532:	86 ab       	std	Z+54, r24	; 0x36
   1d534:	97 ab       	std	Z+55, r25	; 0x37
   1d536:	a0 af       	std	Z+56, r26	; 0x38
   1d538:	b1 af       	std	Z+57, r27	; 0x39
_ZN3PIDC2EPdS0_S0_dddii():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:31
    inAuto = false;

    PID::SetOutputLimits(0, 255);				//default output limit corresponds to
												//the arduino pwm limits

    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds
   1d53a:	84 e6       	ldi	r24, 0x64	; 100
   1d53c:	90 e0       	ldi	r25, 0x00	; 0
   1d53e:	a0 e0       	ldi	r26, 0x00	; 0
   1d540:	b0 e0       	ldi	r27, 0x00	; 0
   1d542:	86 a7       	std	Z+46, r24	; 0x2e
   1d544:	97 a7       	std	Z+47, r25	; 0x2f
   1d546:	a0 ab       	std	Z+48, r26	; 0x30
   1d548:	b1 ab       	std	Z+49, r27	; 0x31
/home/saric/Arduino/libraries/PID/PID_v1.cpp:33

    PID::SetControllerDirection(ControllerDirection);
   1d54a:	6e 8d       	ldd	r22, Y+30	; 0x1e
   1d54c:	7f 8d       	ldd	r23, Y+31	; 0x1f
   1d54e:	c4 01       	movw	r24, r8
   1d550:	0e 94 32 ea 	call	0x1d464	; 0x1d464 <PID::SetControllerDirection(int)>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:34
    PID::SetTunings(Kp, Ki, Kd, POn);
   1d554:	ac 8c       	ldd	r10, Y+28	; 0x1c
   1d556:	bd 8c       	ldd	r11, Y+29	; 0x1d
   1d558:	c8 8c       	ldd	r12, Y+24	; 0x18
   1d55a:	d9 8c       	ldd	r13, Y+25	; 0x19
   1d55c:	ea 8c       	ldd	r14, Y+26	; 0x1a
   1d55e:	fb 8c       	ldd	r15, Y+27	; 0x1b
   1d560:	09 81       	ldd	r16, Y+1	; 0x01
   1d562:	1a 81       	ldd	r17, Y+2	; 0x02
   1d564:	2b 81       	ldd	r18, Y+3	; 0x03
   1d566:	3c 81       	ldd	r19, Y+4	; 0x04
   1d568:	b3 01       	movw	r22, r6
   1d56a:	a2 01       	movw	r20, r4
   1d56c:	c4 01       	movw	r24, r8
   1d56e:	0e 94 1b e8 	call	0x1d036	; 0x1d036 <PID::SetTunings(double, double, double, int)>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:36

    lastTime = (millis() / 1000) - SampleTime;
   1d572:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   1d576:	28 ee       	ldi	r18, 0xE8	; 232
   1d578:	33 e0       	ldi	r19, 0x03	; 3
   1d57a:	40 e0       	ldi	r20, 0x00	; 0
   1d57c:	50 e0       	ldi	r21, 0x00	; 0
   1d57e:	0f 94 5d 16 	call	0x22cba	; 0x22cba <__udivmodsi4>
   1d582:	f4 01       	movw	r30, r8
   1d584:	86 a5       	ldd	r24, Z+46	; 0x2e
   1d586:	97 a5       	ldd	r25, Z+47	; 0x2f
   1d588:	a0 a9       	ldd	r26, Z+48	; 0x30
   1d58a:	b1 a9       	ldd	r27, Z+49	; 0x31
   1d58c:	28 1b       	sub	r18, r24
   1d58e:	39 0b       	sbc	r19, r25
   1d590:	4a 0b       	sbc	r20, r26
   1d592:	5b 0b       	sbc	r21, r27
   1d594:	22 a3       	std	Z+34, r18	; 0x22
   1d596:	33 a3       	std	Z+35, r19	; 0x23
   1d598:	44 a3       	std	Z+36, r20	; 0x24
   1d59a:	55 a3       	std	Z+37, r21	; 0x25
/home/saric/Arduino/libraries/PID/PID_v1.cpp:37
}
   1d59c:	0f 90       	pop	r0
   1d59e:	0f 90       	pop	r0
   1d5a0:	0f 90       	pop	r0
   1d5a2:	0f 90       	pop	r0
   1d5a4:	df 91       	pop	r29
   1d5a6:	cf 91       	pop	r28
   1d5a8:	1f 91       	pop	r17
   1d5aa:	0f 91       	pop	r16
   1d5ac:	ff 90       	pop	r15
   1d5ae:	ef 90       	pop	r14
   1d5b0:	df 90       	pop	r13
   1d5b2:	cf 90       	pop	r12
   1d5b4:	bf 90       	pop	r11
   1d5b6:	af 90       	pop	r10
   1d5b8:	9f 90       	pop	r9
   1d5ba:	8f 90       	pop	r8
   1d5bc:	7f 90       	pop	r7
   1d5be:	6f 90       	pop	r6
   1d5c0:	5f 90       	pop	r5
   1d5c2:	4f 90       	pop	r4
   1d5c4:	08 95       	ret

0001d5c6 <PID::PID(double*, double*, double*, double, double, double, int)>:
_ZN3PIDC2EPdS0_S0_dddi():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:44
/*Constructor (...)*********************************************************
 *    To allow backwards compatability for v1.1, or for people that just want
 *    to use Proportional on Error without explicitly saying so
 ***************************************************************************/

PID::PID(double* Input, double* Output, double* Setpoint,
   1d5c6:	8f 92       	push	r8
   1d5c8:	9f 92       	push	r9
   1d5ca:	af 92       	push	r10
   1d5cc:	bf 92       	push	r11
   1d5ce:	cf 92       	push	r12
   1d5d0:	df 92       	push	r13
   1d5d2:	ef 92       	push	r14
   1d5d4:	ff 92       	push	r15
   1d5d6:	0f 93       	push	r16
   1d5d8:	1f 93       	push	r17
   1d5da:	cf 93       	push	r28
   1d5dc:	df 93       	push	r29
   1d5de:	cd b7       	in	r28, 0x3d	; 61
   1d5e0:	de b7       	in	r29, 0x3e	; 62
   1d5e2:	e8 89       	ldd	r30, Y+16	; 0x10
   1d5e4:	f9 89       	ldd	r31, Y+17	; 0x11
   1d5e6:	aa 89       	ldd	r26, Y+18	; 0x12
   1d5e8:	bb 89       	ldd	r27, Y+19	; 0x13
   1d5ea:	9c 88       	ldd	r9, Y+20	; 0x14
   1d5ec:	8d 88       	ldd	r8, Y+21	; 0x15
/home/saric/Arduino/libraries/PID/PID_v1.cpp:46
        double Kp, double Ki, double Kd, int ControllerDirection)
    :PID::PID(Input, Output, Setpoint, Kp, Ki, Kd, P_ON_E, ControllerDirection)
   1d5ee:	8f 92       	push	r8
   1d5f0:	9f 92       	push	r9
   1d5f2:	1f 92       	push	r1
   1d5f4:	99 24       	eor	r9, r9
   1d5f6:	93 94       	inc	r9
   1d5f8:	9f 92       	push	r9
   1d5fa:	bf 93       	push	r27
   1d5fc:	af 93       	push	r26
   1d5fe:	ff 93       	push	r31
   1d600:	ef 93       	push	r30
   1d602:	0e 94 6e ea 	call	0x1d4dc	; 0x1d4dc <PID::PID(double*, double*, double*, double, double, double, int, int)>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:49
{

}
   1d606:	0f b6       	in	r0, 0x3f	; 63
   1d608:	f8 94       	cli
   1d60a:	de bf       	out	0x3e, r29	; 62
   1d60c:	0f be       	out	0x3f, r0	; 63
   1d60e:	cd bf       	out	0x3d, r28	; 61
   1d610:	df 91       	pop	r29
   1d612:	cf 91       	pop	r28
   1d614:	1f 91       	pop	r17
   1d616:	0f 91       	pop	r16
   1d618:	ff 90       	pop	r15
   1d61a:	ef 90       	pop	r14
   1d61c:	df 90       	pop	r13
   1d61e:	cf 90       	pop	r12
   1d620:	bf 90       	pop	r11
   1d622:	af 90       	pop	r10
   1d624:	9f 90       	pop	r9
   1d626:	8f 90       	pop	r8
   1d628:	08 95       	ret

0001d62a <PubSubClient::write(unsigned char)>:
_ZN12PubSubClient5writeEh():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:769
    return *this;
}
PubSubClient& PubSubClient::setSocketTimeout(uint16_t timeout) {
    this->socketTimeout = timeout;
    return *this;
}
   1d62a:	1f 93       	push	r17
   1d62c:	cf 93       	push	r28
   1d62e:	df 93       	push	r29
   1d630:	ec 01       	movw	r28, r24
   1d632:	16 2f       	mov	r17, r22
   1d634:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   1d638:	68 8b       	std	Y+16, r22	; 0x10
   1d63a:	79 8b       	std	Y+17, r23	; 0x11
   1d63c:	8a 8b       	std	Y+18, r24	; 0x12
   1d63e:	9b 8b       	std	Y+19, r25	; 0x13
   1d640:	8c 81       	ldd	r24, Y+4	; 0x04
   1d642:	9d 81       	ldd	r25, Y+5	; 0x05
   1d644:	dc 01       	movw	r26, r24
   1d646:	ed 91       	ld	r30, X+
   1d648:	fc 91       	ld	r31, X
   1d64a:	01 90       	ld	r0, Z+
   1d64c:	f0 81       	ld	r31, Z
   1d64e:	e0 2d       	mov	r30, r0
   1d650:	61 2f       	mov	r22, r17
   1d652:	df 91       	pop	r29
   1d654:	cf 91       	pop	r28
   1d656:	1f 91       	pop	r17
   1d658:	19 94       	eijmp

0001d65a <PubSubClient::write(unsigned char const*, unsigned int)>:
_ZN12PubSubClient5writeEPKhj():
   1d65a:	ef 92       	push	r14
   1d65c:	ff 92       	push	r15
   1d65e:	0f 93       	push	r16
   1d660:	1f 93       	push	r17
   1d662:	cf 93       	push	r28
   1d664:	df 93       	push	r29
   1d666:	ec 01       	movw	r28, r24
   1d668:	8b 01       	movw	r16, r22
   1d66a:	7a 01       	movw	r14, r20
   1d66c:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   1d670:	68 8b       	std	Y+16, r22	; 0x10
   1d672:	79 8b       	std	Y+17, r23	; 0x11
   1d674:	8a 8b       	std	Y+18, r24	; 0x12
   1d676:	9b 8b       	std	Y+19, r25	; 0x13
   1d678:	8c 81       	ldd	r24, Y+4	; 0x04
   1d67a:	9d 81       	ldd	r25, Y+5	; 0x05
   1d67c:	dc 01       	movw	r26, r24
   1d67e:	ed 91       	ld	r30, X+
   1d680:	fc 91       	ld	r31, X
   1d682:	02 80       	ldd	r0, Z+2	; 0x02
   1d684:	f3 81       	ldd	r31, Z+3	; 0x03
   1d686:	e0 2d       	mov	r30, r0
   1d688:	a7 01       	movw	r20, r14
   1d68a:	b8 01       	movw	r22, r16
   1d68c:	df 91       	pop	r29
   1d68e:	cf 91       	pop	r28
   1d690:	1f 91       	pop	r17
   1d692:	0f 91       	pop	r16
   1d694:	ff 90       	pop	r15
   1d696:	ef 90       	pop	r14
   1d698:	19 94       	eijmp

0001d69a <PubSubClient::~PubSubClient()>:
_ZN12PubSubClientD2Ev():
   1d69a:	fc 01       	movw	r30, r24
   1d69c:	86 81       	ldd	r24, Z+6	; 0x06
   1d69e:	97 81       	ldd	r25, Z+7	; 0x07
   1d6a0:	0d 94 7a 17 	jmp	0x22ef4	; 0x22ef4 <free>

0001d6a4 <PubSubClient::readByte(unsigned char*)>:
_ZN12PubSubClient8readByteEPh():
   1d6a4:	8f 92       	push	r8
   1d6a6:	9f 92       	push	r9
   1d6a8:	af 92       	push	r10
   1d6aa:	bf 92       	push	r11
   1d6ac:	cf 92       	push	r12
   1d6ae:	df 92       	push	r13
   1d6b0:	ef 92       	push	r14
   1d6b2:	ff 92       	push	r15
   1d6b4:	0f 93       	push	r16
   1d6b6:	1f 93       	push	r17
   1d6b8:	cf 93       	push	r28
   1d6ba:	df 93       	push	r29
   1d6bc:	ec 01       	movw	r28, r24
   1d6be:	8b 01       	movw	r16, r22
   1d6c0:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   1d6c4:	4b 01       	movw	r8, r22
   1d6c6:	5c 01       	movw	r10, r24
   1d6c8:	8c 81       	ldd	r24, Y+4	; 0x04
   1d6ca:	9d 81       	ldd	r25, Y+5	; 0x05
   1d6cc:	dc 01       	movw	r26, r24
   1d6ce:	ed 91       	ld	r30, X+
   1d6d0:	fc 91       	ld	r31, X
   1d6d2:	00 84       	ldd	r0, Z+8	; 0x08
   1d6d4:	f1 85       	ldd	r31, Z+9	; 0x09
   1d6d6:	e0 2d       	mov	r30, r0
   1d6d8:	19 95       	eicall
   1d6da:	89 2b       	or	r24, r25
   1d6dc:	b9 f4       	brne	.+46     	; 0x1d70c <PubSubClient::readByte(unsigned char*)+0x68>
   1d6de:	0f 94 b7 0e 	call	0x21d6e	; 0x21d6e <yield>
   1d6e2:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   1d6e6:	6b 01       	movw	r12, r22
   1d6e8:	7c 01       	movw	r14, r24
   1d6ea:	c8 18       	sub	r12, r8
   1d6ec:	d9 08       	sbc	r13, r9
   1d6ee:	ea 08       	sbc	r14, r10
   1d6f0:	fb 08       	sbc	r15, r11
   1d6f2:	2c 85       	ldd	r18, Y+12	; 0x0c
   1d6f4:	3d 85       	ldd	r19, Y+13	; 0x0d
   1d6f6:	a4 e6       	ldi	r26, 0x64	; 100
   1d6f8:	b0 e0       	ldi	r27, 0x00	; 0
   1d6fa:	0f 94 a6 16 	call	0x22d4c	; 0x22d4c <__umulhisi3>
   1d6fe:	c6 16       	cp	r12, r22
   1d700:	d7 06       	cpc	r13, r23
   1d702:	e8 06       	cpc	r14, r24
   1d704:	f9 06       	cpc	r15, r25
   1d706:	00 f3       	brcs	.-64     	; 0x1d6c8 <PubSubClient::readByte(unsigned char*)+0x24>
   1d708:	80 e0       	ldi	r24, 0x00	; 0
   1d70a:	0c c0       	rjmp	.+24     	; 0x1d724 <PubSubClient::readByte(unsigned char*)+0x80>
   1d70c:	8c 81       	ldd	r24, Y+4	; 0x04
   1d70e:	9d 81       	ldd	r25, Y+5	; 0x05
   1d710:	dc 01       	movw	r26, r24
   1d712:	ed 91       	ld	r30, X+
   1d714:	fc 91       	ld	r31, X
   1d716:	02 84       	ldd	r0, Z+10	; 0x0a
   1d718:	f3 85       	ldd	r31, Z+11	; 0x0b
   1d71a:	e0 2d       	mov	r30, r0
   1d71c:	19 95       	eicall
   1d71e:	f8 01       	movw	r30, r16
   1d720:	80 83       	st	Z, r24
   1d722:	81 e0       	ldi	r24, 0x01	; 1
   1d724:	df 91       	pop	r29
   1d726:	cf 91       	pop	r28
   1d728:	1f 91       	pop	r17
   1d72a:	0f 91       	pop	r16
   1d72c:	ff 90       	pop	r15
   1d72e:	ef 90       	pop	r14
   1d730:	df 90       	pop	r13
   1d732:	cf 90       	pop	r12
   1d734:	bf 90       	pop	r11
   1d736:	af 90       	pop	r10
   1d738:	9f 90       	pop	r9
   1d73a:	8f 90       	pop	r8
   1d73c:	08 95       	ret

0001d73e <PubSubClient::readByte(unsigned char*, unsigned int*)>:
_ZN12PubSubClient8readByteEPhPj():
   1d73e:	0f 93       	push	r16
   1d740:	1f 93       	push	r17
   1d742:	cf 93       	push	r28
   1d744:	df 93       	push	r29
   1d746:	8a 01       	movw	r16, r20
   1d748:	fa 01       	movw	r30, r20
   1d74a:	c0 81       	ld	r28, Z
   1d74c:	d1 81       	ldd	r29, Z+1	; 0x01
   1d74e:	6c 0f       	add	r22, r28
   1d750:	7d 1f       	adc	r23, r29
   1d752:	0e 94 52 eb 	call	0x1d6a4	; 0x1d6a4 <PubSubClient::readByte(unsigned char*)>
   1d756:	88 23       	and	r24, r24
   1d758:	21 f0       	breq	.+8      	; 0x1d762 <PubSubClient::readByte(unsigned char*, unsigned int*)+0x24>
   1d75a:	21 96       	adiw	r28, 0x01	; 1
   1d75c:	f8 01       	movw	r30, r16
   1d75e:	d1 83       	std	Z+1, r29	; 0x01
   1d760:	c0 83       	st	Z, r28
   1d762:	df 91       	pop	r29
   1d764:	cf 91       	pop	r28
   1d766:	1f 91       	pop	r17
   1d768:	0f 91       	pop	r16
   1d76a:	08 95       	ret

0001d76c <PubSubClient::readPacket(unsigned char*)>:
_ZN12PubSubClient10readPacketEPh():
   1d76c:	2f 92       	push	r2
   1d76e:	3f 92       	push	r3
   1d770:	4f 92       	push	r4
   1d772:	5f 92       	push	r5
   1d774:	6f 92       	push	r6
   1d776:	7f 92       	push	r7
   1d778:	8f 92       	push	r8
   1d77a:	9f 92       	push	r9
   1d77c:	af 92       	push	r10
   1d77e:	bf 92       	push	r11
   1d780:	cf 92       	push	r12
   1d782:	df 92       	push	r13
   1d784:	ef 92       	push	r14
   1d786:	ff 92       	push	r15
   1d788:	0f 93       	push	r16
   1d78a:	1f 93       	push	r17
   1d78c:	cf 93       	push	r28
   1d78e:	df 93       	push	r29
   1d790:	cd b7       	in	r28, 0x3d	; 61
   1d792:	de b7       	in	r29, 0x3e	; 62
   1d794:	2c 97       	sbiw	r28, 0x0c	; 12
   1d796:	0f b6       	in	r0, 0x3f	; 63
   1d798:	f8 94       	cli
   1d79a:	de bf       	out	0x3e, r29	; 62
   1d79c:	0f be       	out	0x3f, r0	; 63
   1d79e:	cd bf       	out	0x3d, r28	; 61
   1d7a0:	8c 01       	movw	r16, r24
   1d7a2:	1b 01       	movw	r2, r22
   1d7a4:	1a 82       	std	Y+2, r1	; 0x02
   1d7a6:	19 82       	std	Y+1, r1	; 0x01
   1d7a8:	dc 01       	movw	r26, r24
   1d7aa:	16 96       	adiw	r26, 0x06	; 6
   1d7ac:	6d 91       	ld	r22, X+
   1d7ae:	7c 91       	ld	r23, X
   1d7b0:	ae 01       	movw	r20, r28
   1d7b2:	4f 5f       	subi	r20, 0xFF	; 255
   1d7b4:	5f 4f       	sbci	r21, 0xFF	; 255
   1d7b6:	0e 94 9f eb 	call	0x1d73e	; 0x1d73e <PubSubClient::readByte(unsigned char*, unsigned int*)>
   1d7ba:	81 11       	cpse	r24, r1
   1d7bc:	1c c0       	rjmp	.+56     	; 0x1d7f6 <PubSubClient::readPacket(unsigned char*)+0x8a>
   1d7be:	60 e0       	ldi	r22, 0x00	; 0
   1d7c0:	70 e0       	ldi	r23, 0x00	; 0
   1d7c2:	cb 01       	movw	r24, r22
   1d7c4:	2c 96       	adiw	r28, 0x0c	; 12
   1d7c6:	0f b6       	in	r0, 0x3f	; 63
   1d7c8:	f8 94       	cli
   1d7ca:	de bf       	out	0x3e, r29	; 62
   1d7cc:	0f be       	out	0x3f, r0	; 63
   1d7ce:	cd bf       	out	0x3d, r28	; 61
   1d7d0:	df 91       	pop	r29
   1d7d2:	cf 91       	pop	r28
   1d7d4:	1f 91       	pop	r17
   1d7d6:	0f 91       	pop	r16
   1d7d8:	ff 90       	pop	r15
   1d7da:	ef 90       	pop	r14
   1d7dc:	df 90       	pop	r13
   1d7de:	cf 90       	pop	r12
   1d7e0:	bf 90       	pop	r11
   1d7e2:	af 90       	pop	r10
   1d7e4:	9f 90       	pop	r9
   1d7e6:	8f 90       	pop	r8
   1d7e8:	7f 90       	pop	r7
   1d7ea:	6f 90       	pop	r6
   1d7ec:	5f 90       	pop	r5
   1d7ee:	4f 90       	pop	r4
   1d7f0:	3f 90       	pop	r3
   1d7f2:	2f 90       	pop	r2
   1d7f4:	08 95       	ret
   1d7f6:	d8 01       	movw	r26, r16
   1d7f8:	16 96       	adiw	r26, 0x06	; 6
   1d7fa:	ed 91       	ld	r30, X+
   1d7fc:	fc 91       	ld	r31, X
   1d7fe:	70 80       	ld	r7, Z
   1d800:	1b 82       	std	Y+3, r1	; 0x03
   1d802:	81 2c       	mov	r8, r1
   1d804:	91 2c       	mov	r9, r1
   1d806:	54 01       	movw	r10, r8
   1d808:	c1 2c       	mov	r12, r1
   1d80a:	d1 2c       	mov	r13, r1
   1d80c:	76 01       	movw	r14, r12
   1d80e:	c3 94       	inc	r12
   1d810:	89 81       	ldd	r24, Y+1	; 0x01
   1d812:	9a 81       	ldd	r25, Y+2	; 0x02
   1d814:	05 97       	sbiw	r24, 0x05	; 5
   1d816:	79 f4       	brne	.+30     	; 0x1d836 <PubSubClient::readPacket(unsigned char*)+0xca>
   1d818:	8f ef       	ldi	r24, 0xFF	; 255
   1d81a:	9f ef       	ldi	r25, 0xFF	; 255
   1d81c:	f8 01       	movw	r30, r16
   1d81e:	90 a7       	std	Z+40, r25	; 0x28
   1d820:	87 a3       	std	Z+39, r24	; 0x27
   1d822:	84 81       	ldd	r24, Z+4	; 0x04
   1d824:	95 81       	ldd	r25, Z+5	; 0x05
   1d826:	dc 01       	movw	r26, r24
   1d828:	ed 91       	ld	r30, X+
   1d82a:	fc 91       	ld	r31, X
   1d82c:	04 88       	ldd	r0, Z+20	; 0x14
   1d82e:	f5 89       	ldd	r31, Z+21	; 0x15
   1d830:	e0 2d       	mov	r30, r0
   1d832:	19 95       	eicall
   1d834:	c4 cf       	rjmp	.-120    	; 0x1d7be <PubSubClient::readPacket(unsigned char*)+0x52>
   1d836:	be 01       	movw	r22, r28
   1d838:	6d 5f       	subi	r22, 0xFD	; 253
   1d83a:	7f 4f       	sbci	r23, 0xFF	; 255
   1d83c:	c8 01       	movw	r24, r16
   1d83e:	0e 94 52 eb 	call	0x1d6a4	; 0x1d6a4 <PubSubClient::readByte(unsigned char*)>
   1d842:	88 23       	and	r24, r24
   1d844:	09 f4       	brne	.+2      	; 0x1d848 <PubSubClient::readPacket(unsigned char*)+0xdc>
   1d846:	bb cf       	rjmp	.-138    	; 0x1d7be <PubSubClient::readPacket(unsigned char*)+0x52>
   1d848:	d8 01       	movw	r26, r16
   1d84a:	16 96       	adiw	r26, 0x06	; 6
   1d84c:	ed 91       	ld	r30, X+
   1d84e:	fc 91       	ld	r31, X
   1d850:	89 81       	ldd	r24, Y+1	; 0x01
   1d852:	9a 81       	ldd	r25, Y+2	; 0x02
   1d854:	9c 01       	movw	r18, r24
   1d856:	2f 5f       	subi	r18, 0xFF	; 255
   1d858:	3f 4f       	sbci	r19, 0xFF	; 255
   1d85a:	3a 83       	std	Y+2, r19	; 0x02
   1d85c:	29 83       	std	Y+1, r18	; 0x01
   1d85e:	2b 81       	ldd	r18, Y+3	; 0x03
   1d860:	e8 0f       	add	r30, r24
   1d862:	f9 1f       	adc	r31, r25
   1d864:	20 83       	st	Z, r18
   1d866:	eb 81       	ldd	r30, Y+3	; 0x03
   1d868:	ae 2f       	mov	r26, r30
   1d86a:	af 77       	andi	r26, 0x7F	; 127
   1d86c:	b0 e0       	ldi	r27, 0x00	; 0
   1d86e:	a7 01       	movw	r20, r14
   1d870:	96 01       	movw	r18, r12
   1d872:	0f 94 b5 16 	call	0x22d6a	; 0x22d6a <__muluhisi3>
   1d876:	86 0e       	add	r8, r22
   1d878:	97 1e       	adc	r9, r23
   1d87a:	a8 1e       	adc	r10, r24
   1d87c:	b9 1e       	adc	r11, r25
   1d87e:	37 e0       	ldi	r19, 0x07	; 7
   1d880:	cc 0c       	add	r12, r12
   1d882:	dd 1c       	adc	r13, r13
   1d884:	ee 1c       	adc	r14, r14
   1d886:	ff 1c       	adc	r15, r15
   1d888:	3a 95       	dec	r19
   1d88a:	d1 f7       	brne	.-12     	; 0x1d880 <PubSubClient::readPacket(unsigned char*)+0x114>
   1d88c:	e7 fd       	sbrc	r30, 7
   1d88e:	c0 cf       	rjmp	.-128    	; 0x1d810 <PubSubClient::readPacket(unsigned char*)+0xa4>
   1d890:	b7 2d       	mov	r27, r7
   1d892:	b0 7f       	andi	r27, 0xF0	; 240
   1d894:	bc 83       	std	Y+4, r27	; 0x04
   1d896:	89 81       	ldd	r24, Y+1	; 0x01
   1d898:	81 50       	subi	r24, 0x01	; 1
   1d89a:	f1 01       	movw	r30, r2
   1d89c:	80 83       	st	Z, r24
   1d89e:	b0 33       	cpi	r27, 0x30	; 48
   1d8a0:	a1 f5       	brne	.+104    	; 0x1d90a <PubSubClient::readPacket(unsigned char*)+0x19e>
   1d8a2:	d8 01       	movw	r26, r16
   1d8a4:	16 96       	adiw	r26, 0x06	; 6
   1d8a6:	6d 91       	ld	r22, X+
   1d8a8:	7c 91       	ld	r23, X
   1d8aa:	ae 01       	movw	r20, r28
   1d8ac:	4f 5f       	subi	r20, 0xFF	; 255
   1d8ae:	5f 4f       	sbci	r21, 0xFF	; 255
   1d8b0:	c8 01       	movw	r24, r16
   1d8b2:	0e 94 9f eb 	call	0x1d73e	; 0x1d73e <PubSubClient::readByte(unsigned char*, unsigned int*)>
   1d8b6:	88 23       	and	r24, r24
   1d8b8:	09 f4       	brne	.+2      	; 0x1d8bc <PubSubClient::readPacket(unsigned char*)+0x150>
   1d8ba:	81 cf       	rjmp	.-254    	; 0x1d7be <PubSubClient::readPacket(unsigned char*)+0x52>
   1d8bc:	f8 01       	movw	r30, r16
   1d8be:	66 81       	ldd	r22, Z+6	; 0x06
   1d8c0:	77 81       	ldd	r23, Z+7	; 0x07
   1d8c2:	ae 01       	movw	r20, r28
   1d8c4:	4f 5f       	subi	r20, 0xFF	; 255
   1d8c6:	5f 4f       	sbci	r21, 0xFF	; 255
   1d8c8:	c8 01       	movw	r24, r16
   1d8ca:	0e 94 9f eb 	call	0x1d73e	; 0x1d73e <PubSubClient::readByte(unsigned char*, unsigned int*)>
   1d8ce:	88 23       	and	r24, r24
   1d8d0:	09 f4       	brne	.+2      	; 0x1d8d4 <PubSubClient::readPacket(unsigned char*)+0x168>
   1d8d2:	75 cf       	rjmp	.-278    	; 0x1d7be <PubSubClient::readPacket(unsigned char*)+0x52>
   1d8d4:	d8 01       	movw	r26, r16
   1d8d6:	16 96       	adiw	r26, 0x06	; 6
   1d8d8:	ed 91       	ld	r30, X+
   1d8da:	fc 91       	ld	r31, X
   1d8dc:	d1 01       	movw	r26, r2
   1d8de:	8c 91       	ld	r24, X
   1d8e0:	df 01       	movw	r26, r30
   1d8e2:	a8 0f       	add	r26, r24
   1d8e4:	b1 1d       	adc	r27, r1
   1d8e6:	11 96       	adiw	r26, 0x01	; 1
   1d8e8:	8c 91       	ld	r24, X
   1d8ea:	11 97       	sbiw	r26, 0x01	; 1
   1d8ec:	90 e0       	ldi	r25, 0x00	; 0
   1d8ee:	98 2f       	mov	r25, r24
   1d8f0:	88 27       	eor	r24, r24
   1d8f2:	12 96       	adiw	r26, 0x02	; 2
   1d8f4:	2c 91       	ld	r18, X
   1d8f6:	82 0f       	add	r24, r18
   1d8f8:	91 1d       	adc	r25, r1
   1d8fa:	20 81       	ld	r18, Z
   1d8fc:	21 fd       	sbrc	r18, 1
   1d8fe:	02 96       	adiw	r24, 0x02	; 2
   1d900:	f2 e0       	ldi	r31, 0x02	; 2
   1d902:	e0 e0       	ldi	r30, 0x00	; 0
   1d904:	30 e0       	ldi	r19, 0x00	; 0
   1d906:	20 e0       	ldi	r18, 0x00	; 0
   1d908:	06 c0       	rjmp	.+12     	; 0x1d916 <PubSubClient::readPacket(unsigned char*)+0x1aa>
   1d90a:	f0 e0       	ldi	r31, 0x00	; 0
   1d90c:	e0 e0       	ldi	r30, 0x00	; 0
   1d90e:	30 e0       	ldi	r19, 0x00	; 0
   1d910:	20 e0       	ldi	r18, 0x00	; 0
   1d912:	90 e0       	ldi	r25, 0x00	; 0
   1d914:	80 e0       	ldi	r24, 0x00	; 0
   1d916:	49 81       	ldd	r20, Y+1	; 0x01
   1d918:	5a 81       	ldd	r21, Y+2	; 0x02
   1d91a:	70 e0       	ldi	r23, 0x00	; 0
   1d91c:	60 e0       	ldi	r22, 0x00	; 0
   1d91e:	cf 2e       	mov	r12, r31
   1d920:	de 2e       	mov	r13, r30
   1d922:	e3 2e       	mov	r14, r19
   1d924:	f2 2e       	mov	r15, r18
   1d926:	2a 01       	movw	r4, r20
   1d928:	3b 01       	movw	r6, r22
   1d92a:	4c 18       	sub	r4, r12
   1d92c:	5d 08       	sbc	r5, r13
   1d92e:	6e 08       	sbc	r6, r14
   1d930:	7f 08       	sbc	r7, r15
   1d932:	4d 82       	std	Y+5, r4	; 0x05
   1d934:	5e 82       	std	Y+6, r5	; 0x06
   1d936:	6f 82       	std	Y+7, r6	; 0x07
   1d938:	78 86       	std	Y+8, r7	; 0x08
   1d93a:	2c 01       	movw	r4, r24
   1d93c:	71 2c       	mov	r7, r1
   1d93e:	61 2c       	mov	r6, r1
   1d940:	49 86       	std	Y+9, r4	; 0x09
   1d942:	5a 86       	std	Y+10, r5	; 0x0a
   1d944:	6b 86       	std	Y+11, r6	; 0x0b
   1d946:	7c 86       	std	Y+12, r7	; 0x0c
   1d948:	4d 80       	ldd	r4, Y+5	; 0x05
   1d94a:	5e 80       	ldd	r5, Y+6	; 0x06
   1d94c:	6f 80       	ldd	r6, Y+7	; 0x07
   1d94e:	78 84       	ldd	r7, Y+8	; 0x08
   1d950:	4c 0c       	add	r4, r12
   1d952:	5d 1c       	adc	r5, r13
   1d954:	6e 1c       	adc	r6, r14
   1d956:	7f 1c       	adc	r7, r15
   1d958:	c8 14       	cp	r12, r8
   1d95a:	d9 04       	cpc	r13, r9
   1d95c:	ea 04       	cpc	r14, r10
   1d95e:	fb 04       	cpc	r15, r11
   1d960:	08 f0       	brcs	.+2      	; 0x1d964 <PubSubClient::readPacket(unsigned char*)+0x1f8>
   1d962:	4b c0       	rjmp	.+150    	; 0x1d9fa <PubSubClient::readPacket(unsigned char*)+0x28e>
   1d964:	be 01       	movw	r22, r28
   1d966:	6d 5f       	subi	r22, 0xFD	; 253
   1d968:	7f 4f       	sbci	r23, 0xFF	; 255
   1d96a:	c8 01       	movw	r24, r16
   1d96c:	0e 94 52 eb 	call	0x1d6a4	; 0x1d6a4 <PubSubClient::readByte(unsigned char*)>
   1d970:	88 23       	and	r24, r24
   1d972:	09 f4       	brne	.+2      	; 0x1d976 <PubSubClient::readPacket(unsigned char*)+0x20a>
   1d974:	24 cf       	rjmp	.-440    	; 0x1d7be <PubSubClient::readPacket(unsigned char*)+0x52>
   1d976:	d8 01       	movw	r26, r16
   1d978:	95 96       	adiw	r26, 0x25	; 37
   1d97a:	8d 91       	ld	r24, X+
   1d97c:	9c 91       	ld	r25, X
   1d97e:	00 97       	sbiw	r24, 0x00	; 0
   1d980:	11 f1       	breq	.+68     	; 0x1d9c6 <PubSubClient::readPacket(unsigned char*)+0x25a>
   1d982:	bc 81       	ldd	r27, Y+4	; 0x04
   1d984:	b0 33       	cpi	r27, 0x30	; 48
   1d986:	f9 f4       	brne	.+62     	; 0x1d9c6 <PubSubClient::readPacket(unsigned char*)+0x25a>
   1d988:	f1 01       	movw	r30, r2
   1d98a:	20 81       	ld	r18, Z
   1d98c:	4e ef       	ldi	r20, 0xFE	; 254
   1d98e:	5f ef       	ldi	r21, 0xFF	; 255
   1d990:	6f ef       	ldi	r22, 0xFF	; 255
   1d992:	7f ef       	ldi	r23, 0xFF	; 255
   1d994:	42 1b       	sub	r20, r18
   1d996:	51 09       	sbc	r21, r1
   1d998:	61 09       	sbc	r22, r1
   1d99a:	71 09       	sbc	r23, r1
   1d99c:	44 0e       	add	r4, r20
   1d99e:	55 1e       	adc	r5, r21
   1d9a0:	66 1e       	adc	r6, r22
   1d9a2:	77 1e       	adc	r7, r23
   1d9a4:	29 85       	ldd	r18, Y+9	; 0x09
   1d9a6:	3a 85       	ldd	r19, Y+10	; 0x0a
   1d9a8:	4b 85       	ldd	r20, Y+11	; 0x0b
   1d9aa:	5c 85       	ldd	r21, Y+12	; 0x0c
   1d9ac:	24 15       	cp	r18, r4
   1d9ae:	35 05       	cpc	r19, r5
   1d9b0:	46 05       	cpc	r20, r6
   1d9b2:	57 05       	cpc	r21, r7
   1d9b4:	40 f4       	brcc	.+16     	; 0x1d9c6 <PubSubClient::readPacket(unsigned char*)+0x25a>
   1d9b6:	dc 01       	movw	r26, r24
   1d9b8:	ed 91       	ld	r30, X+
   1d9ba:	fc 91       	ld	r31, X
   1d9bc:	01 90       	ld	r0, Z+
   1d9be:	f0 81       	ld	r31, Z
   1d9c0:	e0 2d       	mov	r30, r0
   1d9c2:	6b 81       	ldd	r22, Y+3	; 0x03
   1d9c4:	19 95       	eicall
   1d9c6:	89 81       	ldd	r24, Y+1	; 0x01
   1d9c8:	9a 81       	ldd	r25, Y+2	; 0x02
   1d9ca:	f8 01       	movw	r30, r16
   1d9cc:	20 85       	ldd	r18, Z+8	; 0x08
   1d9ce:	31 85       	ldd	r19, Z+9	; 0x09
   1d9d0:	82 17       	cp	r24, r18
   1d9d2:	93 07       	cpc	r25, r19
   1d9d4:	60 f4       	brcc	.+24     	; 0x1d9ee <PubSubClient::readPacket(unsigned char*)+0x282>
   1d9d6:	2b 81       	ldd	r18, Y+3	; 0x03
   1d9d8:	06 80       	ldd	r0, Z+6	; 0x06
   1d9da:	f7 81       	ldd	r31, Z+7	; 0x07
   1d9dc:	e0 2d       	mov	r30, r0
   1d9de:	e8 0f       	add	r30, r24
   1d9e0:	f9 1f       	adc	r31, r25
   1d9e2:	20 83       	st	Z, r18
   1d9e4:	89 81       	ldd	r24, Y+1	; 0x01
   1d9e6:	9a 81       	ldd	r25, Y+2	; 0x02
   1d9e8:	01 96       	adiw	r24, 0x01	; 1
   1d9ea:	9a 83       	std	Y+2, r25	; 0x02
   1d9ec:	89 83       	std	Y+1, r24	; 0x01
   1d9ee:	ff ef       	ldi	r31, 0xFF	; 255
   1d9f0:	cf 1a       	sub	r12, r31
   1d9f2:	df 0a       	sbc	r13, r31
   1d9f4:	ef 0a       	sbc	r14, r31
   1d9f6:	ff 0a       	sbc	r15, r31
   1d9f8:	a7 cf       	rjmp	.-178    	; 0x1d948 <PubSubClient::readPacket(unsigned char*)+0x1dc>
   1d9fa:	d8 01       	movw	r26, r16
   1d9fc:	95 96       	adiw	r26, 0x25	; 37
   1d9fe:	8d 91       	ld	r24, X+
   1da00:	9c 91       	ld	r25, X
   1da02:	96 97       	sbiw	r26, 0x26	; 38
   1da04:	89 2b       	or	r24, r25
   1da06:	61 f4       	brne	.+24     	; 0x1da20 <PubSubClient::readPacket(unsigned char*)+0x2b4>
   1da08:	18 96       	adiw	r26, 0x08	; 8
   1da0a:	8d 91       	ld	r24, X+
   1da0c:	9c 91       	ld	r25, X
   1da0e:	b0 e0       	ldi	r27, 0x00	; 0
   1da10:	a0 e0       	ldi	r26, 0x00	; 0
   1da12:	84 15       	cp	r24, r4
   1da14:	95 05       	cpc	r25, r5
   1da16:	a6 05       	cpc	r26, r6
   1da18:	b7 05       	cpc	r27, r7
   1da1a:	10 f4       	brcc	.+4      	; 0x1da20 <PubSubClient::readPacket(unsigned char*)+0x2b4>
   1da1c:	1a 82       	std	Y+2, r1	; 0x02
   1da1e:	19 82       	std	Y+1, r1	; 0x01
   1da20:	69 81       	ldd	r22, Y+1	; 0x01
   1da22:	7a 81       	ldd	r23, Y+2	; 0x02
   1da24:	90 e0       	ldi	r25, 0x00	; 0
   1da26:	80 e0       	ldi	r24, 0x00	; 0
   1da28:	cd ce       	rjmp	.-614    	; 0x1d7c4 <PubSubClient::readPacket(unsigned char*)+0x58>

0001da2a <PubSubClient::buildHeader(unsigned char, unsigned char*, unsigned int)>:
_ZN12PubSubClient11buildHeaderEhPhj():
   1da2a:	0f 93       	push	r16
   1da2c:	1f 93       	push	r17
   1da2e:	cf 93       	push	r28
   1da30:	df 93       	push	r29
   1da32:	00 d0       	rcall	.+0      	; 0x1da34 <PubSubClient::buildHeader(unsigned char, unsigned char*, unsigned int)+0xa>
   1da34:	1f 92       	push	r1
   1da36:	cd b7       	in	r28, 0x3d	; 61
   1da38:	de b7       	in	r29, 0x3e	; 62
   1da3a:	80 e0       	ldi	r24, 0x00	; 0
   1da3c:	8e 01       	movw	r16, r28
   1da3e:	0f 5f       	subi	r16, 0xFF	; 255
   1da40:	1f 4f       	sbci	r17, 0xFF	; 255
   1da42:	92 2f       	mov	r25, r18
   1da44:	9f 77       	andi	r25, 0x7F	; 127
   1da46:	22 0f       	add	r18, r18
   1da48:	23 2f       	mov	r18, r19
   1da4a:	22 1f       	adc	r18, r18
   1da4c:	33 0b       	sbc	r19, r19
   1da4e:	31 95       	neg	r19
   1da50:	21 15       	cp	r18, r1
   1da52:	31 05       	cpc	r19, r1
   1da54:	09 f0       	breq	.+2      	; 0x1da58 <PubSubClient::buildHeader(unsigned char, unsigned char*, unsigned int)+0x2e>
   1da56:	90 68       	ori	r25, 0x80	; 128
   1da58:	f8 01       	movw	r30, r16
   1da5a:	e8 0f       	add	r30, r24
   1da5c:	f1 1d       	adc	r31, r1
   1da5e:	90 83       	st	Z, r25
   1da60:	8f 5f       	subi	r24, 0xFF	; 255
   1da62:	21 15       	cp	r18, r1
   1da64:	31 05       	cpc	r19, r1
   1da66:	69 f7       	brne	.-38     	; 0x1da42 <PubSubClient::buildHeader(unsigned char, unsigned char*, unsigned int)+0x18>
   1da68:	90 e0       	ldi	r25, 0x00	; 0
   1da6a:	fa 01       	movw	r30, r20
   1da6c:	e8 1b       	sub	r30, r24
   1da6e:	f9 0b       	sbc	r31, r25
   1da70:	64 83       	std	Z+4, r22	; 0x04
   1da72:	35 96       	adiw	r30, 0x05	; 5
   1da74:	d8 01       	movw	r26, r16
   1da76:	9d 01       	movw	r18, r26
   1da78:	20 1b       	sub	r18, r16
   1da7a:	31 0b       	sbc	r19, r17
   1da7c:	28 17       	cp	r18, r24
   1da7e:	39 07       	cpc	r19, r25
   1da80:	1c f4       	brge	.+6      	; 0x1da88 <PubSubClient::buildHeader(unsigned char, unsigned char*, unsigned int)+0x5e>
   1da82:	2d 91       	ld	r18, X+
   1da84:	21 93       	st	Z+, r18
   1da86:	f7 cf       	rjmp	.-18     	; 0x1da76 <PubSubClient::buildHeader(unsigned char, unsigned char*, unsigned int)+0x4c>
   1da88:	01 96       	adiw	r24, 0x01	; 1
   1da8a:	0f 90       	pop	r0
   1da8c:	0f 90       	pop	r0
   1da8e:	0f 90       	pop	r0
   1da90:	0f 90       	pop	r0
   1da92:	df 91       	pop	r29
   1da94:	cf 91       	pop	r28
   1da96:	1f 91       	pop	r17
   1da98:	0f 91       	pop	r16
   1da9a:	08 95       	ret

0001da9c <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>:
_ZN12PubSubClient5writeEhPhj():
   1da9c:	ef 92       	push	r14
   1da9e:	ff 92       	push	r15
   1daa0:	0f 93       	push	r16
   1daa2:	1f 93       	push	r17
   1daa4:	cf 93       	push	r28
   1daa6:	df 93       	push	r29
   1daa8:	7c 01       	movw	r14, r24
   1daaa:	ea 01       	movw	r28, r20
   1daac:	89 01       	movw	r16, r18
   1daae:	0e 94 15 ed 	call	0x1da2a	; 0x1da2a <PubSubClient::buildHeader(unsigned char, unsigned char*, unsigned int)>
   1dab2:	9c 01       	movw	r18, r24
   1dab4:	d7 01       	movw	r26, r14
   1dab6:	14 96       	adiw	r26, 0x04	; 4
   1dab8:	8d 91       	ld	r24, X+
   1daba:	9c 91       	ld	r25, X
   1dabc:	33 27       	eor	r19, r19
   1dabe:	02 0f       	add	r16, r18
   1dac0:	13 1f       	adc	r17, r19
   1dac2:	be 01       	movw	r22, r28
   1dac4:	62 1b       	sub	r22, r18
   1dac6:	73 0b       	sbc	r23, r19
   1dac8:	6b 5f       	subi	r22, 0xFB	; 251
   1daca:	7f 4f       	sbci	r23, 0xFF	; 255
   1dacc:	dc 01       	movw	r26, r24
   1dace:	ed 91       	ld	r30, X+
   1dad0:	fc 91       	ld	r31, X
   1dad2:	02 80       	ldd	r0, Z+2	; 0x02
   1dad4:	f3 81       	ldd	r31, Z+3	; 0x03
   1dad6:	e0 2d       	mov	r30, r0
   1dad8:	a8 01       	movw	r20, r16
   1dada:	19 95       	eicall
   1dadc:	ec 01       	movw	r28, r24
   1dade:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   1dae2:	f7 01       	movw	r30, r14
   1dae4:	60 8b       	std	Z+16, r22	; 0x10
   1dae6:	71 8b       	std	Z+17, r23	; 0x11
   1dae8:	82 8b       	std	Z+18, r24	; 0x12
   1daea:	93 8b       	std	Z+19, r25	; 0x13
   1daec:	81 e0       	ldi	r24, 0x01	; 1
   1daee:	0c 17       	cp	r16, r28
   1daf0:	1d 07       	cpc	r17, r29
   1daf2:	09 f0       	breq	.+2      	; 0x1daf6 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x5a>
   1daf4:	80 e0       	ldi	r24, 0x00	; 0
   1daf6:	df 91       	pop	r29
   1daf8:	cf 91       	pop	r28
   1dafa:	1f 91       	pop	r17
   1dafc:	0f 91       	pop	r16
   1dafe:	ff 90       	pop	r15
   1db00:	ef 90       	pop	r14
   1db02:	08 95       	ret

0001db04 <PubSubClient::disconnect()>:
_ZN12PubSubClient10disconnectEv():
   1db04:	cf 93       	push	r28
   1db06:	df 93       	push	r29
   1db08:	ec 01       	movw	r28, r24
   1db0a:	ee 81       	ldd	r30, Y+6	; 0x06
   1db0c:	ff 81       	ldd	r31, Y+7	; 0x07
   1db0e:	80 ee       	ldi	r24, 0xE0	; 224
   1db10:	80 83       	st	Z, r24
   1db12:	ee 81       	ldd	r30, Y+6	; 0x06
   1db14:	ff 81       	ldd	r31, Y+7	; 0x07
   1db16:	11 82       	std	Z+1, r1	; 0x01
   1db18:	8c 81       	ldd	r24, Y+4	; 0x04
   1db1a:	9d 81       	ldd	r25, Y+5	; 0x05
   1db1c:	6e 81       	ldd	r22, Y+6	; 0x06
   1db1e:	7f 81       	ldd	r23, Y+7	; 0x07
   1db20:	dc 01       	movw	r26, r24
   1db22:	ed 91       	ld	r30, X+
   1db24:	fc 91       	ld	r31, X
   1db26:	02 80       	ldd	r0, Z+2	; 0x02
   1db28:	f3 81       	ldd	r31, Z+3	; 0x03
   1db2a:	e0 2d       	mov	r30, r0
   1db2c:	42 e0       	ldi	r20, 0x02	; 2
   1db2e:	50 e0       	ldi	r21, 0x00	; 0
   1db30:	19 95       	eicall
   1db32:	8f ef       	ldi	r24, 0xFF	; 255
   1db34:	9f ef       	ldi	r25, 0xFF	; 255
   1db36:	98 a7       	std	Y+40, r25	; 0x28
   1db38:	8f a3       	std	Y+39, r24	; 0x27
   1db3a:	8c 81       	ldd	r24, Y+4	; 0x04
   1db3c:	9d 81       	ldd	r25, Y+5	; 0x05
   1db3e:	dc 01       	movw	r26, r24
   1db40:	ed 91       	ld	r30, X+
   1db42:	fc 91       	ld	r31, X
   1db44:	06 80       	ldd	r0, Z+6	; 0x06
   1db46:	f7 81       	ldd	r31, Z+7	; 0x07
   1db48:	e0 2d       	mov	r30, r0
   1db4a:	19 95       	eicall
   1db4c:	8c 81       	ldd	r24, Y+4	; 0x04
   1db4e:	9d 81       	ldd	r25, Y+5	; 0x05
   1db50:	dc 01       	movw	r26, r24
   1db52:	ed 91       	ld	r30, X+
   1db54:	fc 91       	ld	r31, X
   1db56:	04 88       	ldd	r0, Z+20	; 0x14
   1db58:	f5 89       	ldd	r31, Z+21	; 0x15
   1db5a:	e0 2d       	mov	r30, r0
   1db5c:	19 95       	eicall
   1db5e:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   1db62:	68 8b       	std	Y+16, r22	; 0x10
   1db64:	79 8b       	std	Y+17, r23	; 0x11
   1db66:	8a 8b       	std	Y+18, r24	; 0x12
   1db68:	9b 8b       	std	Y+19, r25	; 0x13
   1db6a:	6c 8b       	std	Y+20, r22	; 0x14
   1db6c:	7d 8b       	std	Y+21, r23	; 0x15
   1db6e:	8e 8b       	std	Y+22, r24	; 0x16
   1db70:	9f 8b       	std	Y+23, r25	; 0x17
   1db72:	df 91       	pop	r29
   1db74:	cf 91       	pop	r28
   1db76:	08 95       	ret

0001db78 <PubSubClient::writeString(char const*, unsigned char*, unsigned int)>:
_ZN12PubSubClient11writeStringEPKcPhj():
   1db78:	cf 93       	push	r28
   1db7a:	df 93       	push	r29
   1db7c:	eb 01       	movw	r28, r22
   1db7e:	f9 01       	movw	r30, r18
   1db80:	32 96       	adiw	r30, 0x02	; 2
   1db82:	e4 0f       	add	r30, r20
   1db84:	f5 1f       	adc	r31, r21
   1db86:	db 01       	movw	r26, r22
   1db88:	9d 01       	movw	r18, r26
   1db8a:	2c 1b       	sub	r18, r28
   1db8c:	3d 0b       	sbc	r19, r29
   1db8e:	cf 01       	movw	r24, r30
   1db90:	84 1b       	sub	r24, r20
   1db92:	95 0b       	sbc	r25, r21
   1db94:	7d 91       	ld	r23, X+
   1db96:	77 23       	and	r23, r23
   1db98:	11 f0       	breq	.+4      	; 0x1db9e <PubSubClient::writeString(char const*, unsigned char*, unsigned int)+0x26>
   1db9a:	71 93       	st	Z+, r23
   1db9c:	f5 cf       	rjmp	.-22     	; 0x1db88 <PubSubClient::writeString(char const*, unsigned char*, unsigned int)+0x10>
   1db9e:	bc 01       	movw	r22, r24
   1dba0:	62 1b       	sub	r22, r18
   1dba2:	73 0b       	sbc	r23, r19
   1dba4:	46 0f       	add	r20, r22
   1dba6:	57 1f       	adc	r21, r23
   1dba8:	fa 01       	movw	r30, r20
   1dbaa:	32 97       	sbiw	r30, 0x02	; 2
   1dbac:	30 83       	st	Z, r19
   1dbae:	41 50       	subi	r20, 0x01	; 1
   1dbb0:	51 09       	sbc	r21, r1
   1dbb2:	fa 01       	movw	r30, r20
   1dbb4:	20 83       	st	Z, r18
   1dbb6:	df 91       	pop	r29
   1dbb8:	cf 91       	pop	r28
   1dbba:	08 95       	ret

0001dbbc <PubSubClient::connected()>:
_ZN12PubSubClient9connectedEv():
   1dbbc:	cf 93       	push	r28
   1dbbe:	df 93       	push	r29
   1dbc0:	fc 01       	movw	r30, r24
   1dbc2:	a4 81       	ldd	r26, Z+4	; 0x04
   1dbc4:	b5 81       	ldd	r27, Z+5	; 0x05
   1dbc6:	10 97       	sbiw	r26, 0x00	; 0
   1dbc8:	11 f4       	brne	.+4      	; 0x1dbce <PubSubClient::connected()+0x12>
   1dbca:	80 e0       	ldi	r24, 0x00	; 0
   1dbcc:	29 c0       	rjmp	.+82     	; 0x1dc20 <PubSubClient::connected()+0x64>
   1dbce:	ec 01       	movw	r28, r24
   1dbd0:	ed 91       	ld	r30, X+
   1dbd2:	fc 91       	ld	r31, X
   1dbd4:	11 97       	sbiw	r26, 0x01	; 1
   1dbd6:	06 88       	ldd	r0, Z+22	; 0x16
   1dbd8:	f7 89       	ldd	r31, Z+23	; 0x17
   1dbda:	e0 2d       	mov	r30, r0
   1dbdc:	cd 01       	movw	r24, r26
   1dbde:	19 95       	eicall
   1dbe0:	2f a1       	ldd	r18, Y+39	; 0x27
   1dbe2:	38 a5       	ldd	r19, Y+40	; 0x28
   1dbe4:	81 11       	cpse	r24, r1
   1dbe6:	19 c0       	rjmp	.+50     	; 0x1dc1a <PubSubClient::connected()+0x5e>
   1dbe8:	23 2b       	or	r18, r19
   1dbea:	79 f7       	brne	.-34     	; 0x1dbca <PubSubClient::connected()+0xe>
   1dbec:	8d ef       	ldi	r24, 0xFD	; 253
   1dbee:	9f ef       	ldi	r25, 0xFF	; 255
   1dbf0:	98 a7       	std	Y+40, r25	; 0x28
   1dbf2:	8f a3       	std	Y+39, r24	; 0x27
   1dbf4:	8c 81       	ldd	r24, Y+4	; 0x04
   1dbf6:	9d 81       	ldd	r25, Y+5	; 0x05
   1dbf8:	dc 01       	movw	r26, r24
   1dbfa:	ed 91       	ld	r30, X+
   1dbfc:	fc 91       	ld	r31, X
   1dbfe:	06 80       	ldd	r0, Z+6	; 0x06
   1dc00:	f7 81       	ldd	r31, Z+7	; 0x07
   1dc02:	e0 2d       	mov	r30, r0
   1dc04:	19 95       	eicall
   1dc06:	8c 81       	ldd	r24, Y+4	; 0x04
   1dc08:	9d 81       	ldd	r25, Y+5	; 0x05
   1dc0a:	dc 01       	movw	r26, r24
   1dc0c:	ed 91       	ld	r30, X+
   1dc0e:	fc 91       	ld	r31, X
   1dc10:	04 88       	ldd	r0, Z+20	; 0x14
   1dc12:	f5 89       	ldd	r31, Z+21	; 0x15
   1dc14:	e0 2d       	mov	r30, r0
   1dc16:	19 95       	eicall
   1dc18:	d8 cf       	rjmp	.-80     	; 0x1dbca <PubSubClient::connected()+0xe>
   1dc1a:	81 e0       	ldi	r24, 0x01	; 1
   1dc1c:	23 2b       	or	r18, r19
   1dc1e:	a9 f6       	brne	.-86     	; 0x1dbca <PubSubClient::connected()+0xe>
   1dc20:	df 91       	pop	r29
   1dc22:	cf 91       	pop	r28
   1dc24:	08 95       	ret

0001dc26 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*, bool)>:
_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_b():
   1dc26:	2f 92       	push	r2
   1dc28:	3f 92       	push	r3
   1dc2a:	4f 92       	push	r4
   1dc2c:	5f 92       	push	r5
   1dc2e:	6f 92       	push	r6
   1dc30:	7f 92       	push	r7
   1dc32:	8f 92       	push	r8
   1dc34:	9f 92       	push	r9
   1dc36:	af 92       	push	r10
   1dc38:	bf 92       	push	r11
   1dc3a:	cf 92       	push	r12
   1dc3c:	df 92       	push	r13
   1dc3e:	ef 92       	push	r14
   1dc40:	ff 92       	push	r15
   1dc42:	0f 93       	push	r16
   1dc44:	1f 93       	push	r17
   1dc46:	cf 93       	push	r28
   1dc48:	df 93       	push	r29
   1dc4a:	cd b7       	in	r28, 0x3d	; 61
   1dc4c:	de b7       	in	r29, 0x3e	; 62
   1dc4e:	60 97       	sbiw	r28, 0x10	; 16
   1dc50:	0f b6       	in	r0, 0x3f	; 63
   1dc52:	f8 94       	cli
   1dc54:	de bf       	out	0x3e, r29	; 62
   1dc56:	0f be       	out	0x3f, r0	; 63
   1dc58:	cd bf       	out	0x3d, r28	; 61
   1dc5a:	3c 01       	movw	r6, r24
   1dc5c:	7a 87       	std	Y+10, r23	; 0x0a
   1dc5e:	69 87       	std	Y+9, r22	; 0x09
   1dc60:	1a 01       	movw	r2, r20
   1dc62:	29 01       	movw	r4, r18
   1dc64:	0e 94 de ed 	call	0x1dbbc	; 0x1dbbc <PubSubClient::connected()>
   1dc68:	d8 2e       	mov	r13, r24
   1dc6a:	81 11       	cpse	r24, r1
   1dc6c:	87 c1       	rjmp	.+782    	; 0x1df7c <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*, bool)+0x356>
   1dc6e:	d3 01       	movw	r26, r6
   1dc70:	14 96       	adiw	r26, 0x04	; 4
   1dc72:	8d 91       	ld	r24, X+
   1dc74:	9c 91       	ld	r25, X
   1dc76:	dc 01       	movw	r26, r24
   1dc78:	ed 91       	ld	r30, X+
   1dc7a:	fc 91       	ld	r31, X
   1dc7c:	06 88       	ldd	r0, Z+22	; 0x16
   1dc7e:	f7 89       	ldd	r31, Z+23	; 0x17
   1dc80:	e0 2d       	mov	r30, r0
   1dc82:	19 95       	eicall
   1dc84:	88 23       	and	r24, r24
   1dc86:	09 f4       	brne	.+2      	; 0x1dc8a <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*, bool)+0x64>
   1dc88:	65 c0       	rjmp	.+202    	; 0x1dd54 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*, bool)+0x12e>
   1dc8a:	81 e0       	ldi	r24, 0x01	; 1
   1dc8c:	90 e0       	ldi	r25, 0x00	; 0
   1dc8e:	f3 01       	movw	r30, r6
   1dc90:	97 87       	std	Z+15, r25	; 0x0f
   1dc92:	86 87       	std	Z+14, r24	; 0x0e
   1dc94:	87 e0       	ldi	r24, 0x07	; 7
   1dc96:	ef e8       	ldi	r30, 0x8F	; 143
   1dc98:	f2 e0       	ldi	r31, 0x02	; 2
   1dc9a:	de 01       	movw	r26, r28
   1dc9c:	11 96       	adiw	r26, 0x01	; 1
   1dc9e:	01 90       	ld	r0, Z+
   1dca0:	0d 92       	st	X+, r0
   1dca2:	8a 95       	dec	r24
   1dca4:	e1 f7       	brne	.-8      	; 0x1dc9e <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*, bool)+0x78>
   1dca6:	fe 01       	movw	r30, r28
   1dca8:	31 96       	adiw	r30, 0x01	; 1
   1dcaa:	85 e0       	ldi	r24, 0x05	; 5
   1dcac:	90 e0       	ldi	r25, 0x00	; 0
   1dcae:	21 91       	ld	r18, Z+
   1dcb0:	d3 01       	movw	r26, r6
   1dcb2:	16 96       	adiw	r26, 0x06	; 6
   1dcb4:	4d 91       	ld	r20, X+
   1dcb6:	5c 91       	ld	r21, X
   1dcb8:	da 01       	movw	r26, r20
   1dcba:	a8 0f       	add	r26, r24
   1dcbc:	b9 1f       	adc	r27, r25
   1dcbe:	2c 93       	st	X, r18
   1dcc0:	01 96       	adiw	r24, 0x01	; 1
   1dcc2:	8c 30       	cpi	r24, 0x0C	; 12
   1dcc4:	91 05       	cpc	r25, r1
   1dcc6:	99 f7       	brne	.-26     	; 0x1dcae <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*, bool)+0x88>
   1dcc8:	80 e0       	ldi	r24, 0x00	; 0
   1dcca:	01 15       	cp	r16, r1
   1dccc:	11 05       	cpc	r17, r1
   1dcce:	51 f0       	breq	.+20     	; 0x1dce4 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*, bool)+0xbe>
   1dcd0:	b0 e2       	ldi	r27, 0x20	; 32
   1dcd2:	cb 9e       	mul	r12, r27
   1dcd4:	c0 01       	movw	r24, r0
   1dcd6:	11 24       	eor	r1, r1
   1dcd8:	84 60       	ori	r24, 0x04	; 4
   1dcda:	e8 e0       	ldi	r30, 0x08	; 8
   1dcdc:	ee 9e       	mul	r14, r30
   1dcde:	70 01       	movw	r14, r0
   1dce0:	11 24       	eor	r1, r1
   1dce2:	8e 29       	or	r24, r14
   1dce4:	81 10       	cpse	r8, r1
   1dce6:	82 60       	ori	r24, 0x02	; 2
   1dce8:	21 14       	cp	r2, r1
   1dcea:	31 04       	cpc	r3, r1
   1dcec:	29 f0       	breq	.+10     	; 0x1dcf8 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*, bool)+0xd2>
   1dcee:	41 14       	cp	r4, r1
   1dcf0:	51 04       	cpc	r5, r1
   1dcf2:	09 f0       	breq	.+2      	; 0x1dcf6 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*, bool)+0xd0>
   1dcf4:	6a c0       	rjmp	.+212    	; 0x1ddca <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*, bool)+0x1a4>
   1dcf6:	80 68       	ori	r24, 0x80	; 128
   1dcf8:	d3 01       	movw	r26, r6
   1dcfa:	16 96       	adiw	r26, 0x06	; 6
   1dcfc:	ed 91       	ld	r30, X+
   1dcfe:	fc 91       	ld	r31, X
   1dd00:	17 97       	sbiw	r26, 0x07	; 7
   1dd02:	84 87       	std	Z+12, r24	; 0x0c
   1dd04:	16 96       	adiw	r26, 0x06	; 6
   1dd06:	ed 91       	ld	r30, X+
   1dd08:	fc 91       	ld	r31, X
   1dd0a:	17 97       	sbiw	r26, 0x07	; 7
   1dd0c:	1b 96       	adiw	r26, 0x0b	; 11
   1dd0e:	8c 91       	ld	r24, X
   1dd10:	1b 97       	sbiw	r26, 0x0b	; 11
   1dd12:	85 87       	std	Z+13, r24	; 0x0d
   1dd14:	16 96       	adiw	r26, 0x06	; 6
   1dd16:	ed 91       	ld	r30, X+
   1dd18:	fc 91       	ld	r31, X
   1dd1a:	17 97       	sbiw	r26, 0x07	; 7
   1dd1c:	1a 96       	adiw	r26, 0x0a	; 10
   1dd1e:	8c 91       	ld	r24, X
   1dd20:	1a 97       	sbiw	r26, 0x0a	; 10
   1dd22:	86 87       	std	Z+14, r24	; 0x0e
   1dd24:	18 96       	adiw	r26, 0x08	; 8
   1dd26:	ed 90       	ld	r14, X+
   1dd28:	fc 90       	ld	r15, X
   1dd2a:	b7 01       	movw	r22, r14
   1dd2c:	89 85       	ldd	r24, Y+9	; 0x09
   1dd2e:	9a 85       	ldd	r25, Y+10	; 0x0a
   1dd30:	0f 94 8b 1a 	call	0x23516	; 0x23516 <strnlen>
   1dd34:	41 96       	adiw	r24, 0x11	; 17
   1dd36:	f3 01       	movw	r30, r6
   1dd38:	e8 16       	cp	r14, r24
   1dd3a:	f9 06       	cpc	r15, r25
   1dd3c:	08 f0       	brcs	.+2      	; 0x1dd40 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*, bool)+0x11a>
   1dd3e:	47 c0       	rjmp	.+142    	; 0x1ddce <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*, bool)+0x1a8>
   1dd40:	84 81       	ldd	r24, Z+4	; 0x04
   1dd42:	95 81       	ldd	r25, Z+5	; 0x05
   1dd44:	dc 01       	movw	r26, r24
   1dd46:	ed 91       	ld	r30, X+
   1dd48:	fc 91       	ld	r31, X
   1dd4a:	04 88       	ldd	r0, Z+20	; 0x14
   1dd4c:	f5 89       	ldd	r31, Z+21	; 0x15
   1dd4e:	e0 2d       	mov	r30, r0
   1dd50:	19 95       	eicall
   1dd52:	14 c1       	rjmp	.+552    	; 0x1df7c <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*, bool)+0x356>
   1dd54:	d3 01       	movw	r26, r6
   1dd56:	91 96       	adiw	r26, 0x21	; 33
   1dd58:	6d 91       	ld	r22, X+
   1dd5a:	7c 91       	ld	r23, X
   1dd5c:	92 97       	sbiw	r26, 0x22	; 34
   1dd5e:	14 96       	adiw	r26, 0x04	; 4
   1dd60:	8d 91       	ld	r24, X+
   1dd62:	9c 91       	ld	r25, X
   1dd64:	dc 01       	movw	r26, r24
   1dd66:	ed 91       	ld	r30, X+
   1dd68:	fc 91       	ld	r31, X
   1dd6a:	d3 01       	movw	r26, r6
   1dd6c:	93 96       	adiw	r26, 0x23	; 35
   1dd6e:	0d 90       	ld	r0, X+
   1dd70:	bc 91       	ld	r27, X
   1dd72:	a0 2d       	mov	r26, r0
   1dd74:	b8 8b       	std	Y+16, r27	; 0x10
   1dd76:	af 87       	std	Y+15, r26	; 0x0f
   1dd78:	61 15       	cp	r22, r1
   1dd7a:	71 05       	cpc	r23, r1
   1dd7c:	71 f0       	breq	.+28     	; 0x1dd9a <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*, bool)+0x174>
   1dd7e:	00 88       	ldd	r0, Z+16	; 0x10
   1dd80:	f1 89       	ldd	r31, Z+17	; 0x11
   1dd82:	e0 2d       	mov	r30, r0
   1dd84:	ad 01       	movw	r20, r26
   1dd86:	19 95       	eicall
   1dd88:	01 97       	sbiw	r24, 0x01	; 1
   1dd8a:	09 f4       	brne	.+2      	; 0x1dd8e <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*, bool)+0x168>
   1dd8c:	7e cf       	rjmp	.-260    	; 0x1dc8a <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*, bool)+0x64>
   1dd8e:	8e ef       	ldi	r24, 0xFE	; 254
   1dd90:	9f ef       	ldi	r25, 0xFF	; 255
   1dd92:	f3 01       	movw	r30, r6
   1dd94:	90 a7       	std	Z+40, r25	; 0x28
   1dd96:	87 a3       	std	Z+39, r24	; 0x27
   1dd98:	f1 c0       	rjmp	.+482    	; 0x1df7c <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*, bool)+0x356>
   1dd9a:	06 84       	ldd	r0, Z+14	; 0x0e
   1dd9c:	f7 85       	ldd	r31, Z+15	; 0x0f
   1dd9e:	e0 2d       	mov	r30, r0
_ZN9IPAddressC4ERKS_():
   1dda0:	2b ed       	ldi	r18, 0xDB	; 219
   1dda2:	39 e0       	ldi	r19, 0x09	; 9
   1dda4:	3a 83       	std	Y+2, r19	; 0x02
   1dda6:	29 83       	std	Y+1, r18	; 0x01
   1dda8:	d3 01       	movw	r26, r6
   1ddaa:	5d 96       	adiw	r26, 0x1d	; 29
   1ddac:	2d 91       	ld	r18, X+
   1ddae:	3d 91       	ld	r19, X+
   1ddb0:	4d 91       	ld	r20, X+
   1ddb2:	5c 91       	ld	r21, X
   1ddb4:	90 97       	sbiw	r26, 0x20	; 32
   1ddb6:	2b 83       	std	Y+3, r18	; 0x03
   1ddb8:	3c 83       	std	Y+4, r19	; 0x04
   1ddba:	4d 83       	std	Y+5, r20	; 0x05
   1ddbc:	5e 83       	std	Y+6, r21	; 0x06
_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_b():
   1ddbe:	4f 85       	ldd	r20, Y+15	; 0x0f
   1ddc0:	58 89       	ldd	r21, Y+16	; 0x10
   1ddc2:	be 01       	movw	r22, r28
   1ddc4:	6f 5f       	subi	r22, 0xFF	; 255
   1ddc6:	7f 4f       	sbci	r23, 0xFF	; 255
   1ddc8:	de cf       	rjmp	.-68     	; 0x1dd86 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*, bool)+0x160>
   1ddca:	80 6c       	ori	r24, 0xC0	; 192
   1ddcc:	95 cf       	rjmp	.-214    	; 0x1dcf8 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*, bool)+0xd2>
   1ddce:	46 81       	ldd	r20, Z+6	; 0x06
   1ddd0:	57 81       	ldd	r21, Z+7	; 0x07
   1ddd2:	2f e0       	ldi	r18, 0x0F	; 15
   1ddd4:	30 e0       	ldi	r19, 0x00	; 0
   1ddd6:	69 85       	ldd	r22, Y+9	; 0x09
   1ddd8:	7a 85       	ldd	r23, Y+10	; 0x0a
   1ddda:	c3 01       	movw	r24, r6
   1dddc:	0e 94 bc ed 	call	0x1db78	; 0x1db78 <PubSubClient::writeString(char const*, unsigned char*, unsigned int)>
   1dde0:	7c 01       	movw	r14, r24
   1dde2:	01 15       	cp	r16, r1
   1dde4:	11 05       	cpc	r17, r1
   1dde6:	91 f1       	breq	.+100    	; 0x1de4c <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*, bool)+0x226>
   1dde8:	d3 01       	movw	r26, r6
   1ddea:	18 96       	adiw	r26, 0x08	; 8
   1ddec:	8d 90       	ld	r8, X+
   1ddee:	9c 90       	ld	r9, X
   1ddf0:	b4 01       	movw	r22, r8
   1ddf2:	c8 01       	movw	r24, r16
   1ddf4:	0f 94 8b 1a 	call	0x23516	; 0x23516 <strnlen>
   1ddf8:	97 01       	movw	r18, r14
   1ddfa:	2e 5f       	subi	r18, 0xFE	; 254
   1ddfc:	3f 4f       	sbci	r19, 0xFF	; 255
   1ddfe:	82 0f       	add	r24, r18
   1de00:	93 1f       	adc	r25, r19
   1de02:	f3 01       	movw	r30, r6
   1de04:	88 16       	cp	r8, r24
   1de06:	99 06       	cpc	r9, r25
   1de08:	08 f4       	brcc	.+2      	; 0x1de0c <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*, bool)+0x1e6>
   1de0a:	9a cf       	rjmp	.-204    	; 0x1dd40 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*, bool)+0x11a>
   1de0c:	46 81       	ldd	r20, Z+6	; 0x06
   1de0e:	57 81       	ldd	r21, Z+7	; 0x07
   1de10:	97 01       	movw	r18, r14
   1de12:	b8 01       	movw	r22, r16
   1de14:	c3 01       	movw	r24, r6
   1de16:	0e 94 bc ed 	call	0x1db78	; 0x1db78 <PubSubClient::writeString(char const*, unsigned char*, unsigned int)>
   1de1a:	8c 01       	movw	r16, r24
   1de1c:	d3 01       	movw	r26, r6
   1de1e:	18 96       	adiw	r26, 0x08	; 8
   1de20:	ed 90       	ld	r14, X+
   1de22:	fc 90       	ld	r15, X
   1de24:	b7 01       	movw	r22, r14
   1de26:	c5 01       	movw	r24, r10
   1de28:	0f 94 8b 1a 	call	0x23516	; 0x23516 <strnlen>
   1de2c:	80 0f       	add	r24, r16
   1de2e:	91 1f       	adc	r25, r17
   1de30:	02 96       	adiw	r24, 0x02	; 2
   1de32:	f3 01       	movw	r30, r6
   1de34:	e8 16       	cp	r14, r24
   1de36:	f9 06       	cpc	r15, r25
   1de38:	08 f4       	brcc	.+2      	; 0x1de3c <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*, bool)+0x216>
   1de3a:	82 cf       	rjmp	.-252    	; 0x1dd40 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*, bool)+0x11a>
   1de3c:	46 81       	ldd	r20, Z+6	; 0x06
   1de3e:	57 81       	ldd	r21, Z+7	; 0x07
   1de40:	98 01       	movw	r18, r16
   1de42:	b5 01       	movw	r22, r10
   1de44:	c3 01       	movw	r24, r6
   1de46:	0e 94 bc ed 	call	0x1db78	; 0x1db78 <PubSubClient::writeString(char const*, unsigned char*, unsigned int)>
   1de4a:	7c 01       	movw	r14, r24
   1de4c:	21 14       	cp	r2, r1
   1de4e:	31 04       	cpc	r3, r1
   1de50:	b9 f1       	breq	.+110    	; 0x1dec0 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*, bool)+0x29a>
   1de52:	d3 01       	movw	r26, r6
   1de54:	18 96       	adiw	r26, 0x08	; 8
   1de56:	0d 91       	ld	r16, X+
   1de58:	1c 91       	ld	r17, X
   1de5a:	b8 01       	movw	r22, r16
   1de5c:	c1 01       	movw	r24, r2
   1de5e:	0f 94 8b 1a 	call	0x23516	; 0x23516 <strnlen>
   1de62:	97 01       	movw	r18, r14
   1de64:	2e 5f       	subi	r18, 0xFE	; 254
   1de66:	3f 4f       	sbci	r19, 0xFF	; 255
   1de68:	82 0f       	add	r24, r18
   1de6a:	93 1f       	adc	r25, r19
   1de6c:	f3 01       	movw	r30, r6
   1de6e:	08 17       	cp	r16, r24
   1de70:	19 07       	cpc	r17, r25
   1de72:	08 f4       	brcc	.+2      	; 0x1de76 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*, bool)+0x250>
   1de74:	65 cf       	rjmp	.-310    	; 0x1dd40 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*, bool)+0x11a>
   1de76:	46 81       	ldd	r20, Z+6	; 0x06
   1de78:	57 81       	ldd	r21, Z+7	; 0x07
   1de7a:	97 01       	movw	r18, r14
   1de7c:	b1 01       	movw	r22, r2
   1de7e:	c3 01       	movw	r24, r6
   1de80:	0e 94 bc ed 	call	0x1db78	; 0x1db78 <PubSubClient::writeString(char const*, unsigned char*, unsigned int)>
   1de84:	7c 01       	movw	r14, r24
   1de86:	41 14       	cp	r4, r1
   1de88:	51 04       	cpc	r5, r1
   1de8a:	d1 f0       	breq	.+52     	; 0x1dec0 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*, bool)+0x29a>
   1de8c:	d3 01       	movw	r26, r6
   1de8e:	18 96       	adiw	r26, 0x08	; 8
   1de90:	0d 91       	ld	r16, X+
   1de92:	1c 91       	ld	r17, X
   1de94:	b8 01       	movw	r22, r16
   1de96:	c2 01       	movw	r24, r4
   1de98:	0f 94 8b 1a 	call	0x23516	; 0x23516 <strnlen>
   1de9c:	97 01       	movw	r18, r14
   1de9e:	2e 5f       	subi	r18, 0xFE	; 254
   1dea0:	3f 4f       	sbci	r19, 0xFF	; 255
   1dea2:	82 0f       	add	r24, r18
   1dea4:	93 1f       	adc	r25, r19
   1dea6:	f3 01       	movw	r30, r6
   1dea8:	08 17       	cp	r16, r24
   1deaa:	19 07       	cpc	r17, r25
   1deac:	08 f4       	brcc	.+2      	; 0x1deb0 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*, bool)+0x28a>
   1deae:	48 cf       	rjmp	.-368    	; 0x1dd40 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*, bool)+0x11a>
   1deb0:	46 81       	ldd	r20, Z+6	; 0x06
   1deb2:	57 81       	ldd	r21, Z+7	; 0x07
   1deb4:	97 01       	movw	r18, r14
   1deb6:	b2 01       	movw	r22, r4
   1deb8:	c3 01       	movw	r24, r6
   1deba:	0e 94 bc ed 	call	0x1db78	; 0x1db78 <PubSubClient::writeString(char const*, unsigned char*, unsigned int)>
   1debe:	7c 01       	movw	r14, r24
   1dec0:	97 01       	movw	r18, r14
   1dec2:	25 50       	subi	r18, 0x05	; 5
   1dec4:	31 09       	sbc	r19, r1
   1dec6:	d3 01       	movw	r26, r6
   1dec8:	16 96       	adiw	r26, 0x06	; 6
   1deca:	4d 91       	ld	r20, X+
   1decc:	5c 91       	ld	r21, X
   1dece:	60 e1       	ldi	r22, 0x10	; 16
   1ded0:	c3 01       	movw	r24, r6
   1ded2:	0e 94 4e ed 	call	0x1da9c	; 0x1da9c <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
   1ded6:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   1deda:	f3 01       	movw	r30, r6
   1dedc:	60 8b       	std	Z+16, r22	; 0x10
   1dede:	71 8b       	std	Z+17, r23	; 0x11
   1dee0:	82 8b       	std	Z+18, r24	; 0x12
   1dee2:	93 8b       	std	Z+19, r25	; 0x13
   1dee4:	64 8b       	std	Z+20, r22	; 0x14
   1dee6:	75 8b       	std	Z+21, r23	; 0x15
   1dee8:	86 8b       	std	Z+22, r24	; 0x16
   1deea:	97 8b       	std	Z+23, r25	; 0x17
   1deec:	f3 01       	movw	r30, r6
   1deee:	84 81       	ldd	r24, Z+4	; 0x04
   1def0:	95 81       	ldd	r25, Z+5	; 0x05
   1def2:	dc 01       	movw	r26, r24
   1def4:	ed 91       	ld	r30, X+
   1def6:	fc 91       	ld	r31, X
   1def8:	00 84       	ldd	r0, Z+8	; 0x08
   1defa:	f1 85       	ldd	r31, Z+9	; 0x09
   1defc:	e0 2d       	mov	r30, r0
   1defe:	19 95       	eicall
   1df00:	89 2b       	or	r24, r25
   1df02:	e9 f4       	brne	.+58     	; 0x1df3e <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*, bool)+0x318>
   1df04:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   1df08:	f3 01       	movw	r30, r6
   1df0a:	04 89       	ldd	r16, Z+20	; 0x14
   1df0c:	15 89       	ldd	r17, Z+21	; 0x15
   1df0e:	26 89       	ldd	r18, Z+22	; 0x16
   1df10:	37 89       	ldd	r19, Z+23	; 0x17
   1df12:	4b 01       	movw	r8, r22
   1df14:	5c 01       	movw	r10, r24
   1df16:	80 1a       	sub	r8, r16
   1df18:	91 0a       	sbc	r9, r17
   1df1a:	a2 0a       	sbc	r10, r18
   1df1c:	b3 0a       	sbc	r11, r19
   1df1e:	24 85       	ldd	r18, Z+12	; 0x0c
   1df20:	35 85       	ldd	r19, Z+13	; 0x0d
   1df22:	a4 e6       	ldi	r26, 0x64	; 100
   1df24:	b0 e0       	ldi	r27, 0x00	; 0
   1df26:	0f 94 a6 16 	call	0x22d4c	; 0x22d4c <__umulhisi3>
   1df2a:	86 16       	cp	r8, r22
   1df2c:	97 06       	cpc	r9, r23
   1df2e:	a8 06       	cpc	r10, r24
   1df30:	b9 06       	cpc	r11, r25
   1df32:	e0 f2       	brcs	.-72     	; 0x1deec <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*, bool)+0x2c6>
   1df34:	8c ef       	ldi	r24, 0xFC	; 252
   1df36:	9f ef       	ldi	r25, 0xFF	; 255
   1df38:	90 a7       	std	Z+40, r25	; 0x28
   1df3a:	87 a3       	std	Z+39, r24	; 0x27
   1df3c:	01 cf       	rjmp	.-510    	; 0x1dd40 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*, bool)+0x11a>
   1df3e:	be 01       	movw	r22, r28
   1df40:	68 5f       	subi	r22, 0xF8	; 248
   1df42:	7f 4f       	sbci	r23, 0xFF	; 255
   1df44:	c3 01       	movw	r24, r6
   1df46:	0e 94 b6 eb 	call	0x1d76c	; 0x1d76c <PubSubClient::readPacket(unsigned char*)>
   1df4a:	64 30       	cpi	r22, 0x04	; 4
   1df4c:	71 05       	cpc	r23, r1
   1df4e:	81 05       	cpc	r24, r1
   1df50:	91 05       	cpc	r25, r1
   1df52:	99 f5       	brne	.+102    	; 0x1dfba <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*, bool)+0x394>
   1df54:	d3 01       	movw	r26, r6
   1df56:	16 96       	adiw	r26, 0x06	; 6
   1df58:	ed 91       	ld	r30, X+
   1df5a:	fc 91       	ld	r31, X
   1df5c:	17 97       	sbiw	r26, 0x07	; 7
   1df5e:	83 81       	ldd	r24, Z+3	; 0x03
   1df60:	81 11       	cpse	r24, r1
   1df62:	26 c0       	rjmp	.+76     	; 0x1dfb0 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*, bool)+0x38a>
   1df64:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   1df68:	f3 01       	movw	r30, r6
   1df6a:	64 8b       	std	Z+20, r22	; 0x14
   1df6c:	75 8b       	std	Z+21, r23	; 0x15
   1df6e:	86 8b       	std	Z+22, r24	; 0x16
   1df70:	97 8b       	std	Z+23, r25	; 0x17
   1df72:	10 8e       	std	Z+24, r1	; 0x18
   1df74:	10 a6       	std	Z+40, r1	; 0x28
   1df76:	17 a2       	std	Z+39, r1	; 0x27
   1df78:	dd 24       	eor	r13, r13
   1df7a:	d3 94       	inc	r13
   1df7c:	8d 2d       	mov	r24, r13
   1df7e:	60 96       	adiw	r28, 0x10	; 16
   1df80:	0f b6       	in	r0, 0x3f	; 63
   1df82:	f8 94       	cli
   1df84:	de bf       	out	0x3e, r29	; 62
   1df86:	0f be       	out	0x3f, r0	; 63
   1df88:	cd bf       	out	0x3d, r28	; 61
   1df8a:	df 91       	pop	r29
   1df8c:	cf 91       	pop	r28
   1df8e:	1f 91       	pop	r17
   1df90:	0f 91       	pop	r16
   1df92:	ff 90       	pop	r15
   1df94:	ef 90       	pop	r14
   1df96:	df 90       	pop	r13
   1df98:	cf 90       	pop	r12
   1df9a:	bf 90       	pop	r11
   1df9c:	af 90       	pop	r10
   1df9e:	9f 90       	pop	r9
   1dfa0:	8f 90       	pop	r8
   1dfa2:	7f 90       	pop	r7
   1dfa4:	6f 90       	pop	r6
   1dfa6:	5f 90       	pop	r5
   1dfa8:	4f 90       	pop	r4
   1dfaa:	3f 90       	pop	r3
   1dfac:	2f 90       	pop	r2
   1dfae:	08 95       	ret
   1dfb0:	90 e0       	ldi	r25, 0x00	; 0
   1dfb2:	98 96       	adiw	r26, 0x28	; 40
   1dfb4:	9c 93       	st	X, r25
   1dfb6:	8e 93       	st	-X, r24
   1dfb8:	97 97       	sbiw	r26, 0x27	; 39
   1dfba:	f3 01       	movw	r30, r6
   1dfbc:	c1 ce       	rjmp	.-638    	; 0x1dd40 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*, bool)+0x11a>

0001dfbe <PubSubClient::connect(char const*)>:
_ZN12PubSubClient7connectEPKc():
   1dfbe:	8f 92       	push	r8
   1dfc0:	af 92       	push	r10
   1dfc2:	bf 92       	push	r11
   1dfc4:	cf 92       	push	r12
   1dfc6:	ef 92       	push	r14
   1dfc8:	0f 93       	push	r16
   1dfca:	1f 93       	push	r17
   1dfcc:	88 24       	eor	r8, r8
   1dfce:	83 94       	inc	r8
   1dfd0:	b1 2c       	mov	r11, r1
   1dfd2:	a1 2c       	mov	r10, r1
   1dfd4:	c1 2c       	mov	r12, r1
   1dfd6:	e1 2c       	mov	r14, r1
   1dfd8:	10 e0       	ldi	r17, 0x00	; 0
   1dfda:	00 e0       	ldi	r16, 0x00	; 0
   1dfdc:	30 e0       	ldi	r19, 0x00	; 0
   1dfde:	20 e0       	ldi	r18, 0x00	; 0
   1dfe0:	50 e0       	ldi	r21, 0x00	; 0
   1dfe2:	40 e0       	ldi	r20, 0x00	; 0
   1dfe4:	0e 94 13 ee 	call	0x1dc26	; 0x1dc26 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*, bool)>
   1dfe8:	1f 91       	pop	r17
   1dfea:	0f 91       	pop	r16
   1dfec:	ef 90       	pop	r14
   1dfee:	cf 90       	pop	r12
   1dff0:	bf 90       	pop	r11
   1dff2:	af 90       	pop	r10
   1dff4:	8f 90       	pop	r8
   1dff6:	08 95       	ret

0001dff8 <PubSubClient::loop()>:
_ZN12PubSubClient4loopEv():
   1dff8:	2f 92       	push	r2
   1dffa:	3f 92       	push	r3
   1dffc:	4f 92       	push	r4
   1dffe:	5f 92       	push	r5
   1e000:	6f 92       	push	r6
   1e002:	7f 92       	push	r7
   1e004:	8f 92       	push	r8
   1e006:	9f 92       	push	r9
   1e008:	af 92       	push	r10
   1e00a:	bf 92       	push	r11
   1e00c:	cf 92       	push	r12
   1e00e:	df 92       	push	r13
   1e010:	ef 92       	push	r14
   1e012:	ff 92       	push	r15
   1e014:	0f 93       	push	r16
   1e016:	1f 93       	push	r17
   1e018:	cf 93       	push	r28
   1e01a:	df 93       	push	r29
   1e01c:	00 d0       	rcall	.+0      	; 0x1e01e <PubSubClient::loop()+0x26>
   1e01e:	cd b7       	in	r28, 0x3d	; 61
   1e020:	de b7       	in	r29, 0x3e	; 62
   1e022:	8c 01       	movw	r16, r24
   1e024:	0e 94 de ed 	call	0x1dbbc	; 0x1dbbc <PubSubClient::connected()>
   1e028:	d8 2e       	mov	r13, r24
   1e02a:	88 23       	and	r24, r24
   1e02c:	09 f4       	brne	.+2      	; 0x1e030 <PubSubClient::loop()+0x38>
   1e02e:	1b c1       	rjmp	.+566    	; 0x1e266 <PubSubClient::loop()+0x26e>
   1e030:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   1e034:	4b 01       	movw	r8, r22
   1e036:	5c 01       	movw	r10, r24
   1e038:	d8 01       	movw	r26, r16
   1e03a:	1a 96       	adiw	r26, 0x0a	; 10
   1e03c:	2d 91       	ld	r18, X+
   1e03e:	3c 91       	ld	r19, X
   1e040:	a8 ee       	ldi	r26, 0xE8	; 232
   1e042:	b3 e0       	ldi	r27, 0x03	; 3
   1e044:	0f 94 a6 16 	call	0x22d4c	; 0x22d4c <__umulhisi3>
   1e048:	f8 01       	movw	r30, r16
   1e04a:	44 88       	ldd	r4, Z+20	; 0x14
   1e04c:	55 88       	ldd	r5, Z+21	; 0x15
   1e04e:	66 88       	ldd	r6, Z+22	; 0x16
   1e050:	77 88       	ldd	r7, Z+23	; 0x17
   1e052:	a5 01       	movw	r20, r10
   1e054:	94 01       	movw	r18, r8
   1e056:	24 19       	sub	r18, r4
   1e058:	35 09       	sbc	r19, r5
   1e05a:	46 09       	sbc	r20, r6
   1e05c:	57 09       	sbc	r21, r7
   1e05e:	29 01       	movw	r4, r18
   1e060:	3a 01       	movw	r6, r20
   1e062:	64 15       	cp	r22, r4
   1e064:	75 05       	cpc	r23, r5
   1e066:	86 05       	cpc	r24, r6
   1e068:	97 05       	cpc	r25, r7
   1e06a:	88 f0       	brcs	.+34     	; 0x1e08e <PubSubClient::loop()+0x96>
   1e06c:	40 88       	ldd	r4, Z+16	; 0x10
   1e06e:	51 88       	ldd	r5, Z+17	; 0x11
   1e070:	62 88       	ldd	r6, Z+18	; 0x12
   1e072:	73 88       	ldd	r7, Z+19	; 0x13
   1e074:	a5 01       	movw	r20, r10
   1e076:	94 01       	movw	r18, r8
   1e078:	24 19       	sub	r18, r4
   1e07a:	35 09       	sbc	r19, r5
   1e07c:	46 09       	sbc	r20, r6
   1e07e:	57 09       	sbc	r21, r7
   1e080:	29 01       	movw	r4, r18
   1e082:	3a 01       	movw	r6, r20
   1e084:	64 15       	cp	r22, r4
   1e086:	75 05       	cpc	r23, r5
   1e088:	86 05       	cpc	r24, r6
   1e08a:	97 05       	cpc	r25, r7
   1e08c:	f0 f5       	brcc	.+124    	; 0x1e10a <PubSubClient::loop()+0x112>
   1e08e:	d8 01       	movw	r26, r16
   1e090:	58 96       	adiw	r26, 0x18	; 24
   1e092:	8c 91       	ld	r24, X
   1e094:	58 97       	sbiw	r26, 0x18	; 24
   1e096:	88 23       	and	r24, r24
   1e098:	91 f0       	breq	.+36     	; 0x1e0be <PubSubClient::loop()+0xc6>
   1e09a:	8c ef       	ldi	r24, 0xFC	; 252
   1e09c:	9f ef       	ldi	r25, 0xFF	; 255
   1e09e:	98 96       	adiw	r26, 0x28	; 40
   1e0a0:	9c 93       	st	X, r25
   1e0a2:	8e 93       	st	-X, r24
   1e0a4:	97 97       	sbiw	r26, 0x27	; 39
   1e0a6:	14 96       	adiw	r26, 0x04	; 4
   1e0a8:	8d 91       	ld	r24, X+
   1e0aa:	9c 91       	ld	r25, X
   1e0ac:	dc 01       	movw	r26, r24
   1e0ae:	ed 91       	ld	r30, X+
   1e0b0:	fc 91       	ld	r31, X
   1e0b2:	04 88       	ldd	r0, Z+20	; 0x14
   1e0b4:	f5 89       	ldd	r31, Z+21	; 0x15
   1e0b6:	e0 2d       	mov	r30, r0
   1e0b8:	19 95       	eicall
   1e0ba:	d1 2c       	mov	r13, r1
   1e0bc:	d4 c0       	rjmp	.+424    	; 0x1e266 <PubSubClient::loop()+0x26e>
   1e0be:	16 96       	adiw	r26, 0x06	; 6
   1e0c0:	ed 91       	ld	r30, X+
   1e0c2:	fc 91       	ld	r31, X
   1e0c4:	17 97       	sbiw	r26, 0x07	; 7
   1e0c6:	80 ec       	ldi	r24, 0xC0	; 192
   1e0c8:	80 83       	st	Z, r24
   1e0ca:	16 96       	adiw	r26, 0x06	; 6
   1e0cc:	ed 91       	ld	r30, X+
   1e0ce:	fc 91       	ld	r31, X
   1e0d0:	17 97       	sbiw	r26, 0x07	; 7
   1e0d2:	11 82       	std	Z+1, r1	; 0x01
   1e0d4:	14 96       	adiw	r26, 0x04	; 4
   1e0d6:	8d 91       	ld	r24, X+
   1e0d8:	9c 91       	ld	r25, X
   1e0da:	15 97       	sbiw	r26, 0x05	; 5
   1e0dc:	16 96       	adiw	r26, 0x06	; 6
   1e0de:	6d 91       	ld	r22, X+
   1e0e0:	7c 91       	ld	r23, X
   1e0e2:	dc 01       	movw	r26, r24
   1e0e4:	ed 91       	ld	r30, X+
   1e0e6:	fc 91       	ld	r31, X
   1e0e8:	02 80       	ldd	r0, Z+2	; 0x02
   1e0ea:	f3 81       	ldd	r31, Z+3	; 0x03
   1e0ec:	e0 2d       	mov	r30, r0
   1e0ee:	42 e0       	ldi	r20, 0x02	; 2
   1e0f0:	50 e0       	ldi	r21, 0x00	; 0
   1e0f2:	19 95       	eicall
   1e0f4:	f8 01       	movw	r30, r16
   1e0f6:	80 8a       	std	Z+16, r8	; 0x10
   1e0f8:	91 8a       	std	Z+17, r9	; 0x11
   1e0fa:	a2 8a       	std	Z+18, r10	; 0x12
   1e0fc:	b3 8a       	std	Z+19, r11	; 0x13
   1e0fe:	84 8a       	std	Z+20, r8	; 0x14
   1e100:	95 8a       	std	Z+21, r9	; 0x15
   1e102:	a6 8a       	std	Z+22, r10	; 0x16
   1e104:	b7 8a       	std	Z+23, r11	; 0x17
   1e106:	81 e0       	ldi	r24, 0x01	; 1
   1e108:	80 8f       	std	Z+24, r24	; 0x18
   1e10a:	f8 01       	movw	r30, r16
   1e10c:	84 81       	ldd	r24, Z+4	; 0x04
   1e10e:	95 81       	ldd	r25, Z+5	; 0x05
   1e110:	dc 01       	movw	r26, r24
   1e112:	ed 91       	ld	r30, X+
   1e114:	fc 91       	ld	r31, X
   1e116:	00 84       	ldd	r0, Z+8	; 0x08
   1e118:	f1 85       	ldd	r31, Z+9	; 0x09
   1e11a:	e0 2d       	mov	r30, r0
   1e11c:	19 95       	eicall
   1e11e:	89 2b       	or	r24, r25
   1e120:	09 f4       	brne	.+2      	; 0x1e124 <PubSubClient::loop()+0x12c>
   1e122:	a1 c0       	rjmp	.+322    	; 0x1e266 <PubSubClient::loop()+0x26e>
   1e124:	be 01       	movw	r22, r28
   1e126:	6f 5f       	subi	r22, 0xFF	; 255
   1e128:	7f 4f       	sbci	r23, 0xFF	; 255
   1e12a:	c8 01       	movw	r24, r16
   1e12c:	0e 94 b6 eb 	call	0x1d76c	; 0x1d76c <PubSubClient::readPacket(unsigned char*)>
   1e130:	2b 01       	movw	r4, r22
   1e132:	67 2b       	or	r22, r23
   1e134:	09 f4       	brne	.+2      	; 0x1e138 <PubSubClient::loop()+0x140>
   1e136:	e1 c0       	rjmp	.+450    	; 0x1e2fa <PubSubClient::loop()+0x302>
   1e138:	f8 01       	movw	r30, r16
   1e13a:	84 8a       	std	Z+20, r8	; 0x14
   1e13c:	95 8a       	std	Z+21, r9	; 0x15
   1e13e:	a6 8a       	std	Z+22, r10	; 0x16
   1e140:	b7 8a       	std	Z+23, r11	; 0x17
   1e142:	06 80       	ldd	r0, Z+6	; 0x06
   1e144:	f7 81       	ldd	r31, Z+7	; 0x07
   1e146:	e0 2d       	mov	r30, r0
   1e148:	80 81       	ld	r24, Z
   1e14a:	80 7f       	andi	r24, 0xF0	; 240
   1e14c:	80 33       	cpi	r24, 0x30	; 48
   1e14e:	09 f0       	breq	.+2      	; 0x1e152 <PubSubClient::loop()+0x15a>
   1e150:	b3 c0       	rjmp	.+358    	; 0x1e2b8 <PubSubClient::loop()+0x2c0>
   1e152:	d8 01       	movw	r26, r16
   1e154:	59 96       	adiw	r26, 0x19	; 25
   1e156:	8d 91       	ld	r24, X+
   1e158:	9c 91       	ld	r25, X
   1e15a:	89 2b       	or	r24, r25
   1e15c:	09 f4       	brne	.+2      	; 0x1e160 <PubSubClient::loop()+0x168>
   1e15e:	83 c0       	rjmp	.+262    	; 0x1e266 <PubSubClient::loop()+0x26e>
   1e160:	49 81       	ldd	r20, Y+1	; 0x01
   1e162:	50 e0       	ldi	r21, 0x00	; 0
   1e164:	ca 01       	movw	r24, r20
   1e166:	02 96       	adiw	r24, 0x02	; 2
   1e168:	8e 0f       	add	r24, r30
   1e16a:	9f 1f       	adc	r25, r31
   1e16c:	df 01       	movw	r26, r30
   1e16e:	a4 0f       	add	r26, r20
   1e170:	b5 1f       	adc	r27, r21
   1e172:	11 96       	adiw	r26, 0x01	; 1
   1e174:	ec 90       	ld	r14, X
   1e176:	f1 2c       	mov	r15, r1
   1e178:	fe 2c       	mov	r15, r14
   1e17a:	ee 24       	eor	r14, r14
   1e17c:	dc 01       	movw	r26, r24
   1e17e:	6c 91       	ld	r22, X
   1e180:	e6 0e       	add	r14, r22
   1e182:	f1 1c       	adc	r15, r1
   1e184:	4d 5f       	subi	r20, 0xFD	; 253
   1e186:	5f 4f       	sbci	r21, 0xFF	; 255
   1e188:	bf 01       	movw	r22, r30
   1e18a:	64 0f       	add	r22, r20
   1e18c:	75 1f       	adc	r23, r21
   1e18e:	a7 01       	movw	r20, r14
   1e190:	0f 94 36 1a 	call	0x2346c	; 0x2346c <memmove>
   1e194:	e9 81       	ldd	r30, Y+1	; 0x01
   1e196:	d8 01       	movw	r26, r16
   1e198:	16 96       	adiw	r26, 0x06	; 6
   1e19a:	8d 91       	ld	r24, X+
   1e19c:	9c 91       	ld	r25, X
   1e19e:	17 97       	sbiw	r26, 0x07	; 7
   1e1a0:	8e 0d       	add	r24, r14
   1e1a2:	9f 1d       	adc	r25, r15
   1e1a4:	e8 0f       	add	r30, r24
   1e1a6:	f9 2f       	mov	r31, r25
   1e1a8:	f1 1d       	adc	r31, r1
   1e1aa:	12 82       	std	Z+2, r1	; 0x02
   1e1ac:	16 96       	adiw	r26, 0x06	; 6
   1e1ae:	ed 91       	ld	r30, X+
   1e1b0:	fc 91       	ld	r31, X
   1e1b2:	17 97       	sbiw	r26, 0x07	; 7
   1e1b4:	29 81       	ldd	r18, Y+1	; 0x01
   1e1b6:	30 e0       	ldi	r19, 0x00	; 0
   1e1b8:	c9 01       	movw	r24, r18
   1e1ba:	02 96       	adiw	r24, 0x02	; 2
   1e1bc:	8e 0f       	add	r24, r30
   1e1be:	9f 1f       	adc	r25, r31
   1e1c0:	40 81       	ld	r20, Z
   1e1c2:	46 70       	andi	r20, 0x06	; 6
   1e1c4:	c4 2e       	mov	r12, r20
   1e1c6:	59 96       	adiw	r26, 0x19	; 25
   1e1c8:	2d 90       	ld	r2, X+
   1e1ca:	3c 90       	ld	r3, X
   1e1cc:	b2 e0       	ldi	r27, 0x02	; 2
   1e1ce:	4b 13       	cpse	r20, r27
   1e1d0:	61 c0       	rjmp	.+194    	; 0x1e294 <PubSubClient::loop()+0x29c>
   1e1d2:	b9 01       	movw	r22, r18
   1e1d4:	6e 0d       	add	r22, r14
   1e1d6:	7f 1d       	adc	r23, r15
   1e1d8:	df 01       	movw	r26, r30
   1e1da:	a6 0f       	add	r26, r22
   1e1dc:	b7 1f       	adc	r27, r23
   1e1de:	13 96       	adiw	r26, 0x03	; 3
   1e1e0:	4c 91       	ld	r20, X
   1e1e2:	13 97       	sbiw	r26, 0x03	; 3
   1e1e4:	50 e0       	ldi	r21, 0x00	; 0
   1e1e6:	54 2f       	mov	r21, r20
   1e1e8:	44 27       	eor	r20, r20
   1e1ea:	14 96       	adiw	r26, 0x04	; 4
   1e1ec:	ac 91       	ld	r26, X
   1e1ee:	4a 0f       	add	r20, r26
   1e1f0:	51 1d       	adc	r21, r1
   1e1f2:	5b 83       	std	Y+3, r21	; 0x03
   1e1f4:	4a 83       	std	Y+2, r20	; 0x02
   1e1f6:	4b ef       	ldi	r20, 0xFB	; 251
   1e1f8:	5f ef       	ldi	r21, 0xFF	; 255
   1e1fa:	42 1b       	sub	r20, r18
   1e1fc:	53 0b       	sbc	r21, r19
   1e1fe:	4e 19       	sub	r20, r14
   1e200:	5f 09       	sbc	r21, r15
   1e202:	44 0d       	add	r20, r4
   1e204:	55 1d       	adc	r21, r5
   1e206:	6b 5f       	subi	r22, 0xFB	; 251
   1e208:	7f 4f       	sbci	r23, 0xFF	; 255
   1e20a:	6e 0f       	add	r22, r30
   1e20c:	7f 1f       	adc	r23, r31
   1e20e:	f1 01       	movw	r30, r2
   1e210:	19 95       	eicall
   1e212:	d8 01       	movw	r26, r16
   1e214:	16 96       	adiw	r26, 0x06	; 6
   1e216:	ed 91       	ld	r30, X+
   1e218:	fc 91       	ld	r31, X
   1e21a:	17 97       	sbiw	r26, 0x07	; 7
   1e21c:	80 e4       	ldi	r24, 0x40	; 64
   1e21e:	80 83       	st	Z, r24
   1e220:	16 96       	adiw	r26, 0x06	; 6
   1e222:	ed 91       	ld	r30, X+
   1e224:	fc 91       	ld	r31, X
   1e226:	17 97       	sbiw	r26, 0x07	; 7
   1e228:	c1 82       	std	Z+1, r12	; 0x01
   1e22a:	16 96       	adiw	r26, 0x06	; 6
   1e22c:	ed 91       	ld	r30, X+
   1e22e:	fc 91       	ld	r31, X
   1e230:	bb 81       	ldd	r27, Y+3	; 0x03
   1e232:	b2 83       	std	Z+2, r27	; 0x02
   1e234:	d8 01       	movw	r26, r16
   1e236:	16 96       	adiw	r26, 0x06	; 6
   1e238:	ed 91       	ld	r30, X+
   1e23a:	fc 91       	ld	r31, X
   1e23c:	ba 81       	ldd	r27, Y+2	; 0x02
   1e23e:	b3 83       	std	Z+3, r27	; 0x03
   1e240:	f8 01       	movw	r30, r16
   1e242:	84 81       	ldd	r24, Z+4	; 0x04
   1e244:	95 81       	ldd	r25, Z+5	; 0x05
   1e246:	66 81       	ldd	r22, Z+6	; 0x06
   1e248:	77 81       	ldd	r23, Z+7	; 0x07
   1e24a:	dc 01       	movw	r26, r24
   1e24c:	ed 91       	ld	r30, X+
   1e24e:	fc 91       	ld	r31, X
   1e250:	02 80       	ldd	r0, Z+2	; 0x02
   1e252:	f3 81       	ldd	r31, Z+3	; 0x03
   1e254:	e0 2d       	mov	r30, r0
   1e256:	44 e0       	ldi	r20, 0x04	; 4
   1e258:	50 e0       	ldi	r21, 0x00	; 0
   1e25a:	19 95       	eicall
   1e25c:	f8 01       	movw	r30, r16
   1e25e:	80 8a       	std	Z+16, r8	; 0x10
   1e260:	91 8a       	std	Z+17, r9	; 0x11
   1e262:	a2 8a       	std	Z+18, r10	; 0x12
   1e264:	b3 8a       	std	Z+19, r11	; 0x13
   1e266:	8d 2d       	mov	r24, r13
   1e268:	0f 90       	pop	r0
   1e26a:	0f 90       	pop	r0
   1e26c:	0f 90       	pop	r0
   1e26e:	df 91       	pop	r29
   1e270:	cf 91       	pop	r28
   1e272:	1f 91       	pop	r17
   1e274:	0f 91       	pop	r16
   1e276:	ff 90       	pop	r15
   1e278:	ef 90       	pop	r14
   1e27a:	df 90       	pop	r13
   1e27c:	cf 90       	pop	r12
   1e27e:	bf 90       	pop	r11
   1e280:	af 90       	pop	r10
   1e282:	9f 90       	pop	r9
   1e284:	8f 90       	pop	r8
   1e286:	7f 90       	pop	r7
   1e288:	6f 90       	pop	r6
   1e28a:	5f 90       	pop	r5
   1e28c:	4f 90       	pop	r4
   1e28e:	3f 90       	pop	r3
   1e290:	2f 90       	pop	r2
   1e292:	08 95       	ret
   1e294:	4d ef       	ldi	r20, 0xFD	; 253
   1e296:	5f ef       	ldi	r21, 0xFF	; 255
   1e298:	42 1b       	sub	r20, r18
   1e29a:	53 0b       	sbc	r21, r19
   1e29c:	4e 19       	sub	r20, r14
   1e29e:	5f 09       	sbc	r21, r15
   1e2a0:	44 0d       	add	r20, r4
   1e2a2:	55 1d       	adc	r21, r5
   1e2a4:	2d 5f       	subi	r18, 0xFD	; 253
   1e2a6:	3f 4f       	sbci	r19, 0xFF	; 255
   1e2a8:	e2 0e       	add	r14, r18
   1e2aa:	f3 1e       	adc	r15, r19
   1e2ac:	bf 01       	movw	r22, r30
   1e2ae:	6e 0d       	add	r22, r14
   1e2b0:	7f 1d       	adc	r23, r15
   1e2b2:	f1 01       	movw	r30, r2
   1e2b4:	19 95       	eicall
   1e2b6:	d7 cf       	rjmp	.-82     	; 0x1e266 <PubSubClient::loop()+0x26e>
   1e2b8:	80 3c       	cpi	r24, 0xC0	; 192
   1e2ba:	c9 f4       	brne	.+50     	; 0x1e2ee <PubSubClient::loop()+0x2f6>
   1e2bc:	80 ed       	ldi	r24, 0xD0	; 208
   1e2be:	80 83       	st	Z, r24
   1e2c0:	d8 01       	movw	r26, r16
   1e2c2:	16 96       	adiw	r26, 0x06	; 6
   1e2c4:	ed 91       	ld	r30, X+
   1e2c6:	fc 91       	ld	r31, X
   1e2c8:	17 97       	sbiw	r26, 0x07	; 7
   1e2ca:	11 82       	std	Z+1, r1	; 0x01
   1e2cc:	14 96       	adiw	r26, 0x04	; 4
   1e2ce:	8d 91       	ld	r24, X+
   1e2d0:	9c 91       	ld	r25, X
   1e2d2:	15 97       	sbiw	r26, 0x05	; 5
   1e2d4:	16 96       	adiw	r26, 0x06	; 6
   1e2d6:	6d 91       	ld	r22, X+
   1e2d8:	7c 91       	ld	r23, X
   1e2da:	dc 01       	movw	r26, r24
   1e2dc:	ed 91       	ld	r30, X+
   1e2de:	fc 91       	ld	r31, X
   1e2e0:	02 80       	ldd	r0, Z+2	; 0x02
   1e2e2:	f3 81       	ldd	r31, Z+3	; 0x03
   1e2e4:	e0 2d       	mov	r30, r0
   1e2e6:	42 e0       	ldi	r20, 0x02	; 2
   1e2e8:	50 e0       	ldi	r21, 0x00	; 0
   1e2ea:	19 95       	eicall
   1e2ec:	bc cf       	rjmp	.-136    	; 0x1e266 <PubSubClient::loop()+0x26e>
   1e2ee:	80 3d       	cpi	r24, 0xD0	; 208
   1e2f0:	09 f0       	breq	.+2      	; 0x1e2f4 <PubSubClient::loop()+0x2fc>
   1e2f2:	b9 cf       	rjmp	.-142    	; 0x1e266 <PubSubClient::loop()+0x26e>
   1e2f4:	f8 01       	movw	r30, r16
   1e2f6:	10 8e       	std	Z+24, r1	; 0x18
   1e2f8:	b6 cf       	rjmp	.-148    	; 0x1e266 <PubSubClient::loop()+0x26e>
   1e2fa:	c8 01       	movw	r24, r16
   1e2fc:	0e 94 de ed 	call	0x1dbbc	; 0x1dbbc <PubSubClient::connected()>
   1e300:	81 11       	cpse	r24, r1
   1e302:	b1 cf       	rjmp	.-158    	; 0x1e266 <PubSubClient::loop()+0x26e>
   1e304:	da ce       	rjmp	.-588    	; 0x1e0ba <PubSubClient::loop()+0xc2>

0001e306 <PubSubClient::publish(char const*, unsigned char const*, unsigned int, bool)>:
_ZN12PubSubClient7publishEPKcPKhjb():
   1e306:	8f 92       	push	r8
   1e308:	9f 92       	push	r9
   1e30a:	af 92       	push	r10
   1e30c:	bf 92       	push	r11
   1e30e:	cf 92       	push	r12
   1e310:	df 92       	push	r13
   1e312:	ef 92       	push	r14
   1e314:	ff 92       	push	r15
   1e316:	0f 93       	push	r16
   1e318:	cf 93       	push	r28
   1e31a:	df 93       	push	r29
   1e31c:	7c 01       	movw	r14, r24
   1e31e:	5b 01       	movw	r10, r22
   1e320:	ea 01       	movw	r28, r20
   1e322:	69 01       	movw	r12, r18
   1e324:	0e 94 de ed 	call	0x1dbbc	; 0x1dbbc <PubSubClient::connected()>
   1e328:	88 23       	and	r24, r24
   1e32a:	09 f4       	brne	.+2      	; 0x1e32e <PubSubClient::publish(char const*, unsigned char const*, unsigned int, bool)+0x28>
   1e32c:	47 c0       	rjmp	.+142    	; 0x1e3bc <PubSubClient::publish(char const*, unsigned char const*, unsigned int, bool)+0xb6>
   1e32e:	d7 01       	movw	r26, r14
   1e330:	18 96       	adiw	r26, 0x08	; 8
   1e332:	8d 90       	ld	r8, X+
   1e334:	9c 90       	ld	r9, X
   1e336:	b4 01       	movw	r22, r8
   1e338:	c5 01       	movw	r24, r10
   1e33a:	0f 94 8b 1a 	call	0x23516	; 0x23516 <strnlen>
   1e33e:	96 01       	movw	r18, r12
   1e340:	29 5f       	subi	r18, 0xF9	; 249
   1e342:	3f 4f       	sbci	r19, 0xFF	; 255
   1e344:	82 0f       	add	r24, r18
   1e346:	93 1f       	adc	r25, r19
   1e348:	88 16       	cp	r8, r24
   1e34a:	99 06       	cpc	r9, r25
   1e34c:	b8 f1       	brcs	.+110    	; 0x1e3bc <PubSubClient::publish(char const*, unsigned char const*, unsigned int, bool)+0xb6>
   1e34e:	f7 01       	movw	r30, r14
   1e350:	46 81       	ldd	r20, Z+6	; 0x06
   1e352:	57 81       	ldd	r21, Z+7	; 0x07
   1e354:	25 e0       	ldi	r18, 0x05	; 5
   1e356:	30 e0       	ldi	r19, 0x00	; 0
   1e358:	b5 01       	movw	r22, r10
   1e35a:	c7 01       	movw	r24, r14
   1e35c:	0e 94 bc ed 	call	0x1db78	; 0x1db78 <PubSubClient::writeString(char const*, unsigned char*, unsigned int)>
   1e360:	be 01       	movw	r22, r28
   1e362:	6c 0d       	add	r22, r12
   1e364:	7d 1d       	adc	r23, r13
   1e366:	fe 01       	movw	r30, r28
   1e368:	ec 01       	movw	r28, r24
   1e36a:	ce 1b       	sub	r28, r30
   1e36c:	df 0b       	sbc	r29, r31
   1e36e:	5e 01       	movw	r10, r28
   1e370:	ae 0e       	add	r10, r30
   1e372:	bf 1e       	adc	r11, r31
   1e374:	d7 01       	movw	r26, r14
   1e376:	16 96       	adiw	r26, 0x06	; 6
   1e378:	4d 91       	ld	r20, X+
   1e37a:	5c 91       	ld	r21, X
   1e37c:	e6 17       	cp	r30, r22
   1e37e:	f7 07       	cpc	r31, r23
   1e380:	31 f0       	breq	.+12     	; 0x1e38e <PubSubClient::publish(char const*, unsigned char const*, unsigned int, bool)+0x88>
   1e382:	21 91       	ld	r18, Z+
   1e384:	d5 01       	movw	r26, r10
   1e386:	a4 0f       	add	r26, r20
   1e388:	b5 1f       	adc	r27, r21
   1e38a:	2c 93       	st	X, r18
   1e38c:	f0 cf       	rjmp	.-32     	; 0x1e36e <PubSubClient::publish(char const*, unsigned char const*, unsigned int, bool)+0x68>
   1e38e:	b5 e0       	ldi	r27, 0x05	; 5
   1e390:	cb 1a       	sub	r12, r27
   1e392:	d1 08       	sbc	r13, r1
   1e394:	60 e3       	ldi	r22, 0x30	; 48
   1e396:	01 11       	cpse	r16, r1
   1e398:	61 e3       	ldi	r22, 0x31	; 49
   1e39a:	9c 01       	movw	r18, r24
   1e39c:	2c 0d       	add	r18, r12
   1e39e:	3d 1d       	adc	r19, r13
   1e3a0:	c7 01       	movw	r24, r14
   1e3a2:	df 91       	pop	r29
   1e3a4:	cf 91       	pop	r28
   1e3a6:	0f 91       	pop	r16
   1e3a8:	ff 90       	pop	r15
   1e3aa:	ef 90       	pop	r14
   1e3ac:	df 90       	pop	r13
   1e3ae:	cf 90       	pop	r12
   1e3b0:	bf 90       	pop	r11
   1e3b2:	af 90       	pop	r10
   1e3b4:	9f 90       	pop	r9
   1e3b6:	8f 90       	pop	r8
   1e3b8:	0c 94 4e ed 	jmp	0x1da9c	; 0x1da9c <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
   1e3bc:	80 e0       	ldi	r24, 0x00	; 0
   1e3be:	df 91       	pop	r29
   1e3c0:	cf 91       	pop	r28
   1e3c2:	0f 91       	pop	r16
   1e3c4:	ff 90       	pop	r15
   1e3c6:	ef 90       	pop	r14
   1e3c8:	df 90       	pop	r13
   1e3ca:	cf 90       	pop	r12
   1e3cc:	bf 90       	pop	r11
   1e3ce:	af 90       	pop	r10
   1e3d0:	9f 90       	pop	r9
   1e3d2:	8f 90       	pop	r8
   1e3d4:	08 95       	ret

0001e3d6 <PubSubClient::publish(char const*, char const*)>:
_ZN12PubSubClient7publishEPKcS1_():
   1e3d6:	cf 92       	push	r12
   1e3d8:	df 92       	push	r13
   1e3da:	ef 92       	push	r14
   1e3dc:	ff 92       	push	r15
   1e3de:	0f 93       	push	r16
   1e3e0:	cf 93       	push	r28
   1e3e2:	df 93       	push	r29
   1e3e4:	7c 01       	movw	r14, r24
   1e3e6:	6b 01       	movw	r12, r22
   1e3e8:	ea 01       	movw	r28, r20
   1e3ea:	90 e0       	ldi	r25, 0x00	; 0
   1e3ec:	80 e0       	ldi	r24, 0x00	; 0
   1e3ee:	20 97       	sbiw	r28, 0x00	; 0
   1e3f0:	31 f0       	breq	.+12     	; 0x1e3fe <PubSubClient::publish(char const*, char const*)+0x28>
   1e3f2:	f7 01       	movw	r30, r14
   1e3f4:	60 85       	ldd	r22, Z+8	; 0x08
   1e3f6:	71 85       	ldd	r23, Z+9	; 0x09
   1e3f8:	ca 01       	movw	r24, r20
   1e3fa:	0f 94 8b 1a 	call	0x23516	; 0x23516 <strnlen>
   1e3fe:	00 e0       	ldi	r16, 0x00	; 0
   1e400:	9c 01       	movw	r18, r24
   1e402:	ae 01       	movw	r20, r28
   1e404:	b6 01       	movw	r22, r12
   1e406:	c7 01       	movw	r24, r14
   1e408:	0e 94 83 f1 	call	0x1e306	; 0x1e306 <PubSubClient::publish(char const*, unsigned char const*, unsigned int, bool)>
   1e40c:	df 91       	pop	r29
   1e40e:	cf 91       	pop	r28
   1e410:	0f 91       	pop	r16
   1e412:	ff 90       	pop	r15
   1e414:	ef 90       	pop	r14
   1e416:	df 90       	pop	r13
   1e418:	cf 90       	pop	r12
   1e41a:	08 95       	ret

0001e41c <PubSubClient::subscribe(char const*, unsigned char)>:
_ZN12PubSubClient9subscribeEPKch():
   1e41c:	cf 92       	push	r12
   1e41e:	df 92       	push	r13
   1e420:	ff 92       	push	r15
   1e422:	0f 93       	push	r16
   1e424:	1f 93       	push	r17
   1e426:	cf 93       	push	r28
   1e428:	df 93       	push	r29
   1e42a:	ec 01       	movw	r28, r24
   1e42c:	8b 01       	movw	r16, r22
   1e42e:	f4 2e       	mov	r15, r20
   1e430:	c8 84       	ldd	r12, Y+8	; 0x08
   1e432:	d9 84       	ldd	r13, Y+9	; 0x09
   1e434:	b6 01       	movw	r22, r12
   1e436:	c8 01       	movw	r24, r16
   1e438:	0f 94 8b 1a 	call	0x23516	; 0x23516 <strnlen>
   1e43c:	01 15       	cp	r16, r1
   1e43e:	11 05       	cpc	r17, r1
   1e440:	d1 f1       	breq	.+116    	; 0x1e4b6 <PubSubClient::subscribe(char const*, unsigned char)+0x9a>
   1e442:	21 e0       	ldi	r18, 0x01	; 1
   1e444:	2f 15       	cp	r18, r15
   1e446:	b8 f1       	brcs	.+110    	; 0x1e4b6 <PubSubClient::subscribe(char const*, unsigned char)+0x9a>
   1e448:	09 96       	adiw	r24, 0x09	; 9
   1e44a:	c8 16       	cp	r12, r24
   1e44c:	d9 06       	cpc	r13, r25
   1e44e:	98 f1       	brcs	.+102    	; 0x1e4b6 <PubSubClient::subscribe(char const*, unsigned char)+0x9a>
   1e450:	ce 01       	movw	r24, r28
   1e452:	0e 94 de ed 	call	0x1dbbc	; 0x1dbbc <PubSubClient::connected()>
   1e456:	88 23       	and	r24, r24
   1e458:	71 f1       	breq	.+92     	; 0x1e4b6 <PubSubClient::subscribe(char const*, unsigned char)+0x9a>
   1e45a:	8e 85       	ldd	r24, Y+14	; 0x0e
   1e45c:	9f 85       	ldd	r25, Y+15	; 0x0f
   1e45e:	01 96       	adiw	r24, 0x01	; 1
   1e460:	39 f1       	breq	.+78     	; 0x1e4b0 <PubSubClient::subscribe(char const*, unsigned char)+0x94>
   1e462:	9f 87       	std	Y+15, r25	; 0x0f
   1e464:	8e 87       	std	Y+14, r24	; 0x0e
   1e466:	ee 81       	ldd	r30, Y+6	; 0x06
   1e468:	ff 81       	ldd	r31, Y+7	; 0x07
   1e46a:	8f 85       	ldd	r24, Y+15	; 0x0f
   1e46c:	85 83       	std	Z+5, r24	; 0x05
   1e46e:	ee 81       	ldd	r30, Y+6	; 0x06
   1e470:	ff 81       	ldd	r31, Y+7	; 0x07
   1e472:	8e 85       	ldd	r24, Y+14	; 0x0e
   1e474:	86 83       	std	Z+6, r24	; 0x06
   1e476:	4e 81       	ldd	r20, Y+6	; 0x06
   1e478:	5f 81       	ldd	r21, Y+7	; 0x07
   1e47a:	27 e0       	ldi	r18, 0x07	; 7
   1e47c:	30 e0       	ldi	r19, 0x00	; 0
   1e47e:	b8 01       	movw	r22, r16
   1e480:	ce 01       	movw	r24, r28
   1e482:	0e 94 bc ed 	call	0x1db78	; 0x1db78 <PubSubClient::writeString(char const*, unsigned char*, unsigned int)>
   1e486:	ee 81       	ldd	r30, Y+6	; 0x06
   1e488:	ff 81       	ldd	r31, Y+7	; 0x07
   1e48a:	e8 0f       	add	r30, r24
   1e48c:	f9 1f       	adc	r31, r25
   1e48e:	f0 82       	st	Z, r15
   1e490:	9c 01       	movw	r18, r24
   1e492:	24 50       	subi	r18, 0x04	; 4
   1e494:	31 09       	sbc	r19, r1
   1e496:	4e 81       	ldd	r20, Y+6	; 0x06
   1e498:	5f 81       	ldd	r21, Y+7	; 0x07
   1e49a:	62 e8       	ldi	r22, 0x82	; 130
   1e49c:	ce 01       	movw	r24, r28
   1e49e:	df 91       	pop	r29
   1e4a0:	cf 91       	pop	r28
   1e4a2:	1f 91       	pop	r17
   1e4a4:	0f 91       	pop	r16
   1e4a6:	ff 90       	pop	r15
   1e4a8:	df 90       	pop	r13
   1e4aa:	cf 90       	pop	r12
   1e4ac:	0c 94 4e ed 	jmp	0x1da9c	; 0x1da9c <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
   1e4b0:	81 e0       	ldi	r24, 0x01	; 1
   1e4b2:	90 e0       	ldi	r25, 0x00	; 0
   1e4b4:	d6 cf       	rjmp	.-84     	; 0x1e462 <PubSubClient::subscribe(char const*, unsigned char)+0x46>
   1e4b6:	80 e0       	ldi	r24, 0x00	; 0
   1e4b8:	df 91       	pop	r29
   1e4ba:	cf 91       	pop	r28
   1e4bc:	1f 91       	pop	r17
   1e4be:	0f 91       	pop	r16
   1e4c0:	ff 90       	pop	r15
   1e4c2:	df 90       	pop	r13
   1e4c4:	cf 90       	pop	r12
   1e4c6:	08 95       	ret

0001e4c8 <PubSubClient::subscribe(char const*)>:
_ZN12PubSubClient9subscribeEPKc():
   1e4c8:	40 e0       	ldi	r20, 0x00	; 0
   1e4ca:	0c 94 0e f2 	jmp	0x1e41c	; 0x1e41c <PubSubClient::subscribe(char const*, unsigned char)>

0001e4ce <PubSubClient::unsubscribe(char const*)>:
_ZN12PubSubClient11unsubscribeEPKc():
   1e4ce:	ef 92       	push	r14
   1e4d0:	ff 92       	push	r15
   1e4d2:	0f 93       	push	r16
   1e4d4:	1f 93       	push	r17
   1e4d6:	cf 93       	push	r28
   1e4d8:	df 93       	push	r29
   1e4da:	ec 01       	movw	r28, r24
   1e4dc:	8b 01       	movw	r16, r22
   1e4de:	e8 84       	ldd	r14, Y+8	; 0x08
   1e4e0:	f9 84       	ldd	r15, Y+9	; 0x09
   1e4e2:	b7 01       	movw	r22, r14
   1e4e4:	c8 01       	movw	r24, r16
   1e4e6:	0f 94 8b 1a 	call	0x23516	; 0x23516 <strnlen>
   1e4ea:	01 15       	cp	r16, r1
   1e4ec:	11 05       	cpc	r17, r1
   1e4ee:	89 f1       	breq	.+98     	; 0x1e552 <PubSubClient::unsubscribe(char const*)+0x84>
   1e4f0:	09 96       	adiw	r24, 0x09	; 9
   1e4f2:	e8 16       	cp	r14, r24
   1e4f4:	f9 06       	cpc	r15, r25
   1e4f6:	68 f1       	brcs	.+90     	; 0x1e552 <PubSubClient::unsubscribe(char const*)+0x84>
   1e4f8:	ce 01       	movw	r24, r28
   1e4fa:	0e 94 de ed 	call	0x1dbbc	; 0x1dbbc <PubSubClient::connected()>
   1e4fe:	88 23       	and	r24, r24
   1e500:	41 f1       	breq	.+80     	; 0x1e552 <PubSubClient::unsubscribe(char const*)+0x84>
   1e502:	8e 85       	ldd	r24, Y+14	; 0x0e
   1e504:	9f 85       	ldd	r25, Y+15	; 0x0f
   1e506:	01 96       	adiw	r24, 0x01	; 1
   1e508:	09 f1       	breq	.+66     	; 0x1e54c <PubSubClient::unsubscribe(char const*)+0x7e>
   1e50a:	9f 87       	std	Y+15, r25	; 0x0f
   1e50c:	8e 87       	std	Y+14, r24	; 0x0e
   1e50e:	ee 81       	ldd	r30, Y+6	; 0x06
   1e510:	ff 81       	ldd	r31, Y+7	; 0x07
   1e512:	8f 85       	ldd	r24, Y+15	; 0x0f
   1e514:	85 83       	std	Z+5, r24	; 0x05
   1e516:	ee 81       	ldd	r30, Y+6	; 0x06
   1e518:	ff 81       	ldd	r31, Y+7	; 0x07
   1e51a:	8e 85       	ldd	r24, Y+14	; 0x0e
   1e51c:	86 83       	std	Z+6, r24	; 0x06
   1e51e:	4e 81       	ldd	r20, Y+6	; 0x06
   1e520:	5f 81       	ldd	r21, Y+7	; 0x07
   1e522:	27 e0       	ldi	r18, 0x07	; 7
   1e524:	30 e0       	ldi	r19, 0x00	; 0
   1e526:	b8 01       	movw	r22, r16
   1e528:	ce 01       	movw	r24, r28
   1e52a:	0e 94 bc ed 	call	0x1db78	; 0x1db78 <PubSubClient::writeString(char const*, unsigned char*, unsigned int)>
   1e52e:	9c 01       	movw	r18, r24
   1e530:	25 50       	subi	r18, 0x05	; 5
   1e532:	31 09       	sbc	r19, r1
   1e534:	4e 81       	ldd	r20, Y+6	; 0x06
   1e536:	5f 81       	ldd	r21, Y+7	; 0x07
   1e538:	62 ea       	ldi	r22, 0xA2	; 162
   1e53a:	ce 01       	movw	r24, r28
   1e53c:	df 91       	pop	r29
   1e53e:	cf 91       	pop	r28
   1e540:	1f 91       	pop	r17
   1e542:	0f 91       	pop	r16
   1e544:	ff 90       	pop	r15
   1e546:	ef 90       	pop	r14
   1e548:	0c 94 4e ed 	jmp	0x1da9c	; 0x1da9c <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
   1e54c:	81 e0       	ldi	r24, 0x01	; 1
   1e54e:	90 e0       	ldi	r25, 0x00	; 0
   1e550:	dc cf       	rjmp	.-72     	; 0x1e50a <PubSubClient::unsubscribe(char const*)+0x3c>
   1e552:	80 e0       	ldi	r24, 0x00	; 0
   1e554:	df 91       	pop	r29
   1e556:	cf 91       	pop	r28
   1e558:	1f 91       	pop	r17
   1e55a:	0f 91       	pop	r16
   1e55c:	ff 90       	pop	r15
   1e55e:	ef 90       	pop	r14
   1e560:	08 95       	ret

0001e562 <PubSubClient::setServer(unsigned char*, unsigned int)>:
_ZN12PubSubClient9setServerEPhj():
   1e562:	cf 92       	push	r12
   1e564:	df 92       	push	r13
   1e566:	ef 92       	push	r14
   1e568:	ff 92       	push	r15
   1e56a:	0f 93       	push	r16
   1e56c:	cf 93       	push	r28
   1e56e:	df 93       	push	r29
   1e570:	cd b7       	in	r28, 0x3d	; 61
   1e572:	de b7       	in	r29, 0x3e	; 62
   1e574:	2c 97       	sbiw	r28, 0x0c	; 12
   1e576:	0f b6       	in	r0, 0x3f	; 63
   1e578:	f8 94       	cli
   1e57a:	de bf       	out	0x3e, r29	; 62
   1e57c:	0f be       	out	0x3f, r0	; 63
   1e57e:	cd bf       	out	0x3d, r28	; 61
   1e580:	7c 01       	movw	r14, r24
   1e582:	fb 01       	movw	r30, r22
   1e584:	6a 01       	movw	r12, r20
   1e586:	03 81       	ldd	r16, Z+3	; 0x03
   1e588:	22 81       	ldd	r18, Z+2	; 0x02
   1e58a:	41 81       	ldd	r20, Z+1	; 0x01
   1e58c:	60 81       	ld	r22, Z
   1e58e:	ce 01       	movw	r24, r28
   1e590:	07 96       	adiw	r24, 0x07	; 7
   1e592:	0f 94 7a 12 	call	0x224f4	; 0x224f4 <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_ZN9IPAddressC4ERKS_():
   1e596:	89 85       	ldd	r24, Y+9	; 0x09
   1e598:	9a 85       	ldd	r25, Y+10	; 0x0a
   1e59a:	ab 85       	ldd	r26, Y+11	; 0x0b
   1e59c:	bc 85       	ldd	r27, Y+12	; 0x0c
_ZN9IPAddressaSERKS_():
   1e59e:	f7 01       	movw	r30, r14
   1e5a0:	85 8f       	std	Z+29, r24	; 0x1d
   1e5a2:	96 8f       	std	Z+30, r25	; 0x1e
   1e5a4:	a7 8f       	std	Z+31, r26	; 0x1f
   1e5a6:	b0 a3       	std	Z+32, r27	; 0x20
_ZN12PubSubClient9setServerE9IPAddressj():
   1e5a8:	d4 a2       	std	Z+36, r13	; 0x24
   1e5aa:	c3 a2       	std	Z+35, r12	; 0x23
   1e5ac:	12 a2       	std	Z+34, r1	; 0x22
   1e5ae:	11 a2       	std	Z+33, r1	; 0x21
_ZN12PubSubClient9setServerEPhj():
   1e5b0:	c7 01       	movw	r24, r14
   1e5b2:	2c 96       	adiw	r28, 0x0c	; 12
   1e5b4:	0f b6       	in	r0, 0x3f	; 63
   1e5b6:	f8 94       	cli
   1e5b8:	de bf       	out	0x3e, r29	; 62
   1e5ba:	0f be       	out	0x3f, r0	; 63
   1e5bc:	cd bf       	out	0x3d, r28	; 61
   1e5be:	df 91       	pop	r29
   1e5c0:	cf 91       	pop	r28
   1e5c2:	0f 91       	pop	r16
   1e5c4:	ff 90       	pop	r15
   1e5c6:	ef 90       	pop	r14
   1e5c8:	df 90       	pop	r13
   1e5ca:	cf 90       	pop	r12
   1e5cc:	08 95       	ret

0001e5ce <PubSubClient::setCallback(void (*)(char*, unsigned char*, unsigned int))>:
_ZN12PubSubClient11setCallbackEPFvPcPhjE():
   1e5ce:	fc 01       	movw	r30, r24
   1e5d0:	72 8f       	std	Z+26, r23	; 0x1a
   1e5d2:	61 8f       	std	Z+25, r22	; 0x19
   1e5d4:	08 95       	ret

0001e5d6 <PubSubClient::state()>:
_ZN12PubSubClient5stateEv():
   1e5d6:	fc 01       	movw	r30, r24
   1e5d8:	87 a1       	ldd	r24, Z+39	; 0x27
   1e5da:	90 a5       	ldd	r25, Z+40	; 0x28
   1e5dc:	08 95       	ret

0001e5de <PubSubClient::setBufferSize(unsigned int)>:
_ZN12PubSubClient13setBufferSizeEj():
   1e5de:	0f 93       	push	r16
   1e5e0:	1f 93       	push	r17
   1e5e2:	cf 93       	push	r28
   1e5e4:	df 93       	push	r29
   1e5e6:	61 15       	cp	r22, r1
   1e5e8:	71 05       	cpc	r23, r1
   1e5ea:	11 f4       	brne	.+4      	; 0x1e5f0 <PubSubClient::setBufferSize(unsigned int)+0x12>
   1e5ec:	80 e0       	ldi	r24, 0x00	; 0
   1e5ee:	12 c0       	rjmp	.+36     	; 0x1e614 <PubSubClient::setBufferSize(unsigned int)+0x36>
   1e5f0:	8b 01       	movw	r16, r22
   1e5f2:	ec 01       	movw	r28, r24
   1e5f4:	88 85       	ldd	r24, Y+8	; 0x08
   1e5f6:	99 85       	ldd	r25, Y+9	; 0x09
   1e5f8:	89 2b       	or	r24, r25
   1e5fa:	89 f4       	brne	.+34     	; 0x1e61e <PubSubClient::setBufferSize(unsigned int)+0x40>
   1e5fc:	cb 01       	movw	r24, r22
   1e5fe:	0f 94 de 16 	call	0x22dbc	; 0x22dbc <malloc>
   1e602:	9f 83       	std	Y+7, r25	; 0x07
   1e604:	8e 83       	std	Y+6, r24	; 0x06
   1e606:	19 87       	std	Y+9, r17	; 0x09
   1e608:	08 87       	std	Y+8, r16	; 0x08
   1e60a:	81 e0       	ldi	r24, 0x01	; 1
   1e60c:	2e 81       	ldd	r18, Y+6	; 0x06
   1e60e:	3f 81       	ldd	r19, Y+7	; 0x07
   1e610:	23 2b       	or	r18, r19
   1e612:	61 f3       	breq	.-40     	; 0x1e5ec <PubSubClient::setBufferSize(unsigned int)+0xe>
   1e614:	df 91       	pop	r29
   1e616:	cf 91       	pop	r28
   1e618:	1f 91       	pop	r17
   1e61a:	0f 91       	pop	r16
   1e61c:	08 95       	ret
   1e61e:	8e 81       	ldd	r24, Y+6	; 0x06
   1e620:	9f 81       	ldd	r25, Y+7	; 0x07
   1e622:	0f 94 03 18 	call	0x23006	; 0x23006 <realloc>
   1e626:	00 97       	sbiw	r24, 0x00	; 0
   1e628:	61 f7       	brne	.-40     	; 0x1e602 <PubSubClient::setBufferSize(unsigned int)+0x24>
   1e62a:	e0 cf       	rjmp	.-64     	; 0x1e5ec <PubSubClient::setBufferSize(unsigned int)+0xe>

0001e62c <PubSubClient::PubSubClient(Client&)>:
_ZN12PubSubClientC2ER6Client():
   1e62c:	0f 93       	push	r16
   1e62e:	1f 93       	push	r17
   1e630:	cf 93       	push	r28
   1e632:	df 93       	push	r29
   1e634:	ec 01       	movw	r28, r24
   1e636:	8b 01       	movw	r16, r22
_ZN5PrintC4Ev():
   1e638:	1b 82       	std	Y+3, r1	; 0x03
   1e63a:	1a 82       	std	Y+2, r1	; 0x02
_ZN12PubSubClientC2ER6Client():
   1e63c:	87 e9       	ldi	r24, 0x97	; 151
   1e63e:	99 e0       	ldi	r25, 0x09	; 9
   1e640:	99 83       	std	Y+1, r25	; 0x01
   1e642:	88 83       	st	Y, r24
   1e644:	ce 01       	movw	r24, r28
   1e646:	4b 96       	adiw	r24, 0x1b	; 27
   1e648:	0f 94 70 12 	call	0x224e0	; 0x224e0 <IPAddress::IPAddress()>
   1e64c:	8f ef       	ldi	r24, 0xFF	; 255
   1e64e:	9f ef       	ldi	r25, 0xFF	; 255
   1e650:	98 a7       	std	Y+40, r25	; 0x28
   1e652:	8f a3       	std	Y+39, r24	; 0x27
_ZN12PubSubClient9setClientER6Client():
   1e654:	1d 83       	std	Y+5, r17	; 0x05
   1e656:	0c 83       	std	Y+4, r16	; 0x04
_ZN12PubSubClientC2ER6Client():
   1e658:	1e a2       	std	Y+38, r1	; 0x26
   1e65a:	1d a2       	std	Y+37, r1	; 0x25
   1e65c:	19 86       	std	Y+9, r1	; 0x09
   1e65e:	18 86       	std	Y+8, r1	; 0x08
   1e660:	60 e0       	ldi	r22, 0x00	; 0
   1e662:	71 e0       	ldi	r23, 0x01	; 1
   1e664:	ce 01       	movw	r24, r28
   1e666:	0e 94 ef f2 	call	0x1e5de	; 0x1e5de <PubSubClient::setBufferSize(unsigned int)>
_ZN12PubSubClient12setKeepAliveEj():
   1e66a:	8f e0       	ldi	r24, 0x0F	; 15
   1e66c:	90 e0       	ldi	r25, 0x00	; 0
   1e66e:	9b 87       	std	Y+11, r25	; 0x0b
   1e670:	8a 87       	std	Y+10, r24	; 0x0a
_ZN12PubSubClient16setSocketTimeoutEj():
   1e672:	9d 87       	std	Y+13, r25	; 0x0d
   1e674:	8c 87       	std	Y+12, r24	; 0x0c
_ZN12PubSubClientC2ER6Client():
   1e676:	df 91       	pop	r29
   1e678:	cf 91       	pop	r28
   1e67a:	1f 91       	pop	r17
   1e67c:	0f 91       	pop	r16
   1e67e:	08 95       	ret

0001e680 <_GLOBAL__sub_I__ZN12PubSubClientC2Ev>:
_GLOBAL__sub_I__ZN12PubSubClientC2Ev():
   1e680:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
   1e682:	00 e0       	ldi	r16, 0x00	; 0
   1e684:	20 e0       	ldi	r18, 0x00	; 0
   1e686:	40 e0       	ldi	r20, 0x00	; 0
   1e688:	60 e0       	ldi	r22, 0x00	; 0
   1e68a:	84 e7       	ldi	r24, 0x74	; 116
   1e68c:	92 e1       	ldi	r25, 0x12	; 18
   1e68e:	0f 94 7a 12 	call	0x224f4	; 0x224f4 <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_GLOBAL__sub_I__ZN12PubSubClientC2Ev():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:769
   1e692:	0f 91       	pop	r16
   1e694:	08 95       	ret

0001e696 <RF24::csn(bool)>:
_ZN4RF243csnEb():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1582
/****************************************************************************/

void RF24::disableCRC( void )
{
  uint8_t disable = read_register(NRF_CONFIG) & ~_BV(EN_CRC) ;
  write_register( NRF_CONFIG, disable ) ;
   1e696:	cf 93       	push	r28
   1e698:	df 93       	push	r29
   1e69a:	ec 01       	movw	r28, r24
_ZN8SPIClass11setBitOrderEh():
   1e69c:	8c b5       	in	r24, 0x2c	; 44
   1e69e:	8f 7d       	andi	r24, 0xDF	; 223
   1e6a0:	8c bd       	out	0x2c, r24	; 44
_ZN8SPIClass11setDataModeEh():
   1e6a2:	8c b5       	in	r24, 0x2c	; 44
   1e6a4:	83 7f       	andi	r24, 0xF3	; 243
   1e6a6:	8c bd       	out	0x2c, r24	; 44
_ZN8SPIClass15setClockDividerEh():
   1e6a8:	8c b5       	in	r24, 0x2c	; 44
   1e6aa:	8c 7f       	andi	r24, 0xFC	; 252
   1e6ac:	8c bd       	out	0x2c, r24	; 44
   1e6ae:	8d b5       	in	r24, 0x2d	; 45
   1e6b0:	81 60       	ori	r24, 0x01	; 1
   1e6b2:	8d bd       	out	0x2d, r24	; 45
_ZN4RF243csnEb():
   1e6b4:	8a 81       	ldd	r24, Y+2	; 0x02
   1e6b6:	0f 94 60 10 	call	0x220c0	; 0x220c0 <digitalWrite>
   1e6ba:	8c 89       	ldd	r24, Y+20	; 0x14
   1e6bc:	9d 89       	ldd	r25, Y+21	; 0x15
   1e6be:	df 91       	pop	r29
   1e6c0:	cf 91       	pop	r28
   1e6c2:	0d 94 6c 0f 	jmp	0x21ed8	; 0x21ed8 <delayMicroseconds>

0001e6c6 <RF24::ce(bool)>:
_ZN4RF242ceEb():
   1e6c6:	fc 01       	movw	r30, r24
   1e6c8:	20 81       	ld	r18, Z
   1e6ca:	31 81       	ldd	r19, Z+1	; 0x01
   1e6cc:	82 81       	ldd	r24, Z+2	; 0x02
   1e6ce:	93 81       	ldd	r25, Z+3	; 0x03
   1e6d0:	28 17       	cp	r18, r24
   1e6d2:	39 07       	cpc	r19, r25
   1e6d4:	19 f0       	breq	.+6      	; 0x1e6dc <RF24::ce(bool)+0x16>
   1e6d6:	82 2f       	mov	r24, r18
   1e6d8:	0d 94 60 10 	jmp	0x220c0	; 0x220c0 <digitalWrite>
   1e6dc:	08 95       	ret

0001e6de <RF24::beginTransaction()>:
_ZN4RF2416beginTransactionEv():
   1e6de:	60 e0       	ldi	r22, 0x00	; 0
   1e6e0:	0c 94 4b f3 	jmp	0x1e696	; 0x1e696 <RF24::csn(bool)>

0001e6e4 <RF24::endTransaction()>:
_ZN4RF2414endTransactionEv():
   1e6e4:	61 e0       	ldi	r22, 0x01	; 1
   1e6e6:	0c 94 4b f3 	jmp	0x1e696	; 0x1e696 <RF24::csn(bool)>

0001e6ea <RF24::read_register(unsigned char, unsigned char*, unsigned char)>:
_ZN4RF2413read_registerEhPhh():
   1e6ea:	cf 92       	push	r12
   1e6ec:	df 92       	push	r13
   1e6ee:	ef 92       	push	r14
   1e6f0:	ff 92       	push	r15
   1e6f2:	0f 93       	push	r16
   1e6f4:	1f 93       	push	r17
   1e6f6:	cf 93       	push	r28
   1e6f8:	df 93       	push	r29
   1e6fa:	7c 01       	movw	r14, r24
   1e6fc:	c6 2f       	mov	r28, r22
   1e6fe:	6a 01       	movw	r12, r20
   1e700:	12 2f       	mov	r17, r18
   1e702:	0e 94 6f f3 	call	0x1e6de	; 0x1e6de <RF24::beginTransaction()>
   1e706:	8c 2f       	mov	r24, r28
   1e708:	8f 71       	andi	r24, 0x1F	; 31
   1e70a:	0e 94 c8 e1 	call	0x1c390	; 0x1c390 <SPIClass::transfer(unsigned char)>
   1e70e:	08 2f       	mov	r16, r24
   1e710:	e6 01       	movw	r28, r12
   1e712:	11 50       	subi	r17, 0x01	; 1
   1e714:	28 f0       	brcs	.+10     	; 0x1e720 <RF24::read_register(unsigned char, unsigned char*, unsigned char)+0x36>
   1e716:	8f ef       	ldi	r24, 0xFF	; 255
   1e718:	0e 94 c8 e1 	call	0x1c390	; 0x1c390 <SPIClass::transfer(unsigned char)>
   1e71c:	89 93       	st	Y+, r24
   1e71e:	f9 cf       	rjmp	.-14     	; 0x1e712 <RF24::read_register(unsigned char, unsigned char*, unsigned char)+0x28>
   1e720:	c7 01       	movw	r24, r14
   1e722:	0e 94 72 f3 	call	0x1e6e4	; 0x1e6e4 <RF24::endTransaction()>
   1e726:	80 2f       	mov	r24, r16
   1e728:	df 91       	pop	r29
   1e72a:	cf 91       	pop	r28
   1e72c:	1f 91       	pop	r17
   1e72e:	0f 91       	pop	r16
   1e730:	ff 90       	pop	r15
   1e732:	ef 90       	pop	r14
   1e734:	df 90       	pop	r13
   1e736:	cf 90       	pop	r12
   1e738:	08 95       	ret

0001e73a <RF24::read_register(unsigned char)>:
_ZN4RF2413read_registerEh():
   1e73a:	1f 93       	push	r17
   1e73c:	cf 93       	push	r28
   1e73e:	df 93       	push	r29
   1e740:	ec 01       	movw	r28, r24
   1e742:	16 2f       	mov	r17, r22
   1e744:	0e 94 6f f3 	call	0x1e6de	; 0x1e6de <RF24::beginTransaction()>
   1e748:	81 2f       	mov	r24, r17
   1e74a:	8f 71       	andi	r24, 0x1F	; 31
   1e74c:	0e 94 c8 e1 	call	0x1c390	; 0x1c390 <SPIClass::transfer(unsigned char)>
   1e750:	8f ef       	ldi	r24, 0xFF	; 255
   1e752:	0e 94 c8 e1 	call	0x1c390	; 0x1c390 <SPIClass::transfer(unsigned char)>
   1e756:	18 2f       	mov	r17, r24
   1e758:	ce 01       	movw	r24, r28
   1e75a:	0e 94 72 f3 	call	0x1e6e4	; 0x1e6e4 <RF24::endTransaction()>
   1e75e:	81 2f       	mov	r24, r17
   1e760:	df 91       	pop	r29
   1e762:	cf 91       	pop	r28
   1e764:	1f 91       	pop	r17
   1e766:	08 95       	ret

0001e768 <RF24::write_register(unsigned char, unsigned char const*, unsigned char)>:
_ZN4RF2414write_registerEhPKhh():
   1e768:	cf 92       	push	r12
   1e76a:	df 92       	push	r13
   1e76c:	ef 92       	push	r14
   1e76e:	ff 92       	push	r15
   1e770:	0f 93       	push	r16
   1e772:	1f 93       	push	r17
   1e774:	cf 93       	push	r28
   1e776:	df 93       	push	r29
   1e778:	7c 01       	movw	r14, r24
   1e77a:	c6 2f       	mov	r28, r22
   1e77c:	6a 01       	movw	r12, r20
   1e77e:	12 2f       	mov	r17, r18
   1e780:	0e 94 6f f3 	call	0x1e6de	; 0x1e6de <RF24::beginTransaction()>
   1e784:	8c 2f       	mov	r24, r28
   1e786:	8f 71       	andi	r24, 0x1F	; 31
   1e788:	80 62       	ori	r24, 0x20	; 32
   1e78a:	0e 94 c8 e1 	call	0x1c390	; 0x1c390 <SPIClass::transfer(unsigned char)>
   1e78e:	08 2f       	mov	r16, r24
   1e790:	e6 01       	movw	r28, r12
   1e792:	11 50       	subi	r17, 0x01	; 1
   1e794:	20 f0       	brcs	.+8      	; 0x1e79e <RF24::write_register(unsigned char, unsigned char const*, unsigned char)+0x36>
   1e796:	89 91       	ld	r24, Y+
   1e798:	0e 94 c8 e1 	call	0x1c390	; 0x1c390 <SPIClass::transfer(unsigned char)>
   1e79c:	fa cf       	rjmp	.-12     	; 0x1e792 <RF24::write_register(unsigned char, unsigned char const*, unsigned char)+0x2a>
   1e79e:	c7 01       	movw	r24, r14
   1e7a0:	0e 94 72 f3 	call	0x1e6e4	; 0x1e6e4 <RF24::endTransaction()>
   1e7a4:	80 2f       	mov	r24, r16
   1e7a6:	df 91       	pop	r29
   1e7a8:	cf 91       	pop	r28
   1e7aa:	1f 91       	pop	r17
   1e7ac:	0f 91       	pop	r16
   1e7ae:	ff 90       	pop	r15
   1e7b0:	ef 90       	pop	r14
   1e7b2:	df 90       	pop	r13
   1e7b4:	cf 90       	pop	r12
   1e7b6:	08 95       	ret

0001e7b8 <RF24::write_register(unsigned char, unsigned char)>:
_ZN4RF2414write_registerEhh():
   1e7b8:	0f 93       	push	r16
   1e7ba:	1f 93       	push	r17
   1e7bc:	cf 93       	push	r28
   1e7be:	df 93       	push	r29
   1e7c0:	8c 01       	movw	r16, r24
   1e7c2:	c6 2f       	mov	r28, r22
   1e7c4:	d4 2f       	mov	r29, r20
   1e7c6:	0e 94 6f f3 	call	0x1e6de	; 0x1e6de <RF24::beginTransaction()>
   1e7ca:	8c 2f       	mov	r24, r28
   1e7cc:	8f 71       	andi	r24, 0x1F	; 31
   1e7ce:	80 62       	ori	r24, 0x20	; 32
   1e7d0:	0e 94 c8 e1 	call	0x1c390	; 0x1c390 <SPIClass::transfer(unsigned char)>
   1e7d4:	c8 2f       	mov	r28, r24
   1e7d6:	8d 2f       	mov	r24, r29
   1e7d8:	0e 94 c8 e1 	call	0x1c390	; 0x1c390 <SPIClass::transfer(unsigned char)>
   1e7dc:	c8 01       	movw	r24, r16
   1e7de:	0e 94 72 f3 	call	0x1e6e4	; 0x1e6e4 <RF24::endTransaction()>
   1e7e2:	8c 2f       	mov	r24, r28
   1e7e4:	df 91       	pop	r29
   1e7e6:	cf 91       	pop	r28
   1e7e8:	1f 91       	pop	r17
   1e7ea:	0f 91       	pop	r16
   1e7ec:	08 95       	ret

0001e7ee <RF24::write_payload(void const*, unsigned char, unsigned char)>:
_ZN4RF2413write_payloadEPKvhh():
   1e7ee:	bf 92       	push	r11
   1e7f0:	cf 92       	push	r12
   1e7f2:	df 92       	push	r13
   1e7f4:	ef 92       	push	r14
   1e7f6:	ff 92       	push	r15
   1e7f8:	0f 93       	push	r16
   1e7fa:	1f 93       	push	r17
   1e7fc:	cf 93       	push	r28
   1e7fe:	df 93       	push	r29
   1e800:	8c 01       	movw	r16, r24
   1e802:	b6 2e       	mov	r11, r22
   1e804:	c7 2e       	mov	r12, r23
   1e806:	f2 2e       	mov	r15, r18
   1e808:	fc 01       	movw	r30, r24
   1e80a:	c7 81       	ldd	r28, Z+7	; 0x07
   1e80c:	dc 2f       	mov	r29, r28
   1e80e:	4c 17       	cp	r20, r28
   1e810:	08 f4       	brcc	.+2      	; 0x1e814 <RF24::write_payload(void const*, unsigned char, unsigned char)+0x26>
   1e812:	d4 2f       	mov	r29, r20
   1e814:	f8 01       	movw	r30, r16
   1e816:	80 85       	ldd	r24, Z+8	; 0x08
   1e818:	cd 1b       	sub	r28, r29
   1e81a:	81 11       	cpse	r24, r1
   1e81c:	c0 e0       	ldi	r28, 0x00	; 0
   1e81e:	c8 01       	movw	r24, r16
   1e820:	0e 94 6f f3 	call	0x1e6de	; 0x1e6de <RF24::beginTransaction()>
   1e824:	8f 2d       	mov	r24, r15
   1e826:	0e 94 c8 e1 	call	0x1c390	; 0x1c390 <SPIClass::transfer(unsigned char)>
   1e82a:	d8 2e       	mov	r13, r24
   1e82c:	eb 2c       	mov	r14, r11
   1e82e:	fc 2c       	mov	r15, r12
   1e830:	d1 50       	subi	r29, 0x01	; 1
   1e832:	30 f0       	brcs	.+12     	; 0x1e840 <RF24::write_payload(void const*, unsigned char, unsigned char)+0x52>
   1e834:	f7 01       	movw	r30, r14
   1e836:	81 91       	ld	r24, Z+
   1e838:	7f 01       	movw	r14, r30
   1e83a:	0e 94 c8 e1 	call	0x1c390	; 0x1c390 <SPIClass::transfer(unsigned char)>
   1e83e:	f8 cf       	rjmp	.-16     	; 0x1e830 <RF24::write_payload(void const*, unsigned char, unsigned char)+0x42>
   1e840:	c1 50       	subi	r28, 0x01	; 1
   1e842:	20 f0       	brcs	.+8      	; 0x1e84c <RF24::write_payload(void const*, unsigned char, unsigned char)+0x5e>
   1e844:	80 e0       	ldi	r24, 0x00	; 0
   1e846:	0e 94 c8 e1 	call	0x1c390	; 0x1c390 <SPIClass::transfer(unsigned char)>
   1e84a:	fa cf       	rjmp	.-12     	; 0x1e840 <RF24::write_payload(void const*, unsigned char, unsigned char)+0x52>
   1e84c:	c8 01       	movw	r24, r16
   1e84e:	0e 94 72 f3 	call	0x1e6e4	; 0x1e6e4 <RF24::endTransaction()>
   1e852:	8d 2d       	mov	r24, r13
   1e854:	df 91       	pop	r29
   1e856:	cf 91       	pop	r28
   1e858:	1f 91       	pop	r17
   1e85a:	0f 91       	pop	r16
   1e85c:	ff 90       	pop	r15
   1e85e:	ef 90       	pop	r14
   1e860:	df 90       	pop	r13
   1e862:	cf 90       	pop	r12
   1e864:	bf 90       	pop	r11
   1e866:	08 95       	ret

0001e868 <RF24::read_payload(void*, unsigned char)>:
_ZN4RF2412read_payloadEPvh():
   1e868:	bf 92       	push	r11
   1e86a:	cf 92       	push	r12
   1e86c:	df 92       	push	r13
   1e86e:	ef 92       	push	r14
   1e870:	ff 92       	push	r15
   1e872:	0f 93       	push	r16
   1e874:	1f 93       	push	r17
   1e876:	cf 93       	push	r28
   1e878:	df 93       	push	r29
   1e87a:	8c 01       	movw	r16, r24
   1e87c:	b6 2e       	mov	r11, r22
   1e87e:	c7 2e       	mov	r12, r23
   1e880:	fc 01       	movw	r30, r24
   1e882:	c7 81       	ldd	r28, Z+7	; 0x07
   1e884:	dc 2f       	mov	r29, r28
   1e886:	4c 17       	cp	r20, r28
   1e888:	08 f4       	brcc	.+2      	; 0x1e88c <RF24::read_payload(void*, unsigned char)+0x24>
   1e88a:	d4 2f       	mov	r29, r20
   1e88c:	f8 01       	movw	r30, r16
   1e88e:	80 85       	ldd	r24, Z+8	; 0x08
   1e890:	cd 1b       	sub	r28, r29
   1e892:	81 11       	cpse	r24, r1
   1e894:	c0 e0       	ldi	r28, 0x00	; 0
   1e896:	c8 01       	movw	r24, r16
   1e898:	0e 94 6f f3 	call	0x1e6de	; 0x1e6de <RF24::beginTransaction()>
   1e89c:	81 e6       	ldi	r24, 0x61	; 97
   1e89e:	0e 94 c8 e1 	call	0x1c390	; 0x1c390 <SPIClass::transfer(unsigned char)>
   1e8a2:	d8 2e       	mov	r13, r24
   1e8a4:	eb 2c       	mov	r14, r11
   1e8a6:	fc 2c       	mov	r15, r12
   1e8a8:	d1 50       	subi	r29, 0x01	; 1
   1e8aa:	38 f0       	brcs	.+14     	; 0x1e8ba <RF24::read_payload(void*, unsigned char)+0x52>
   1e8ac:	8f ef       	ldi	r24, 0xFF	; 255
   1e8ae:	0e 94 c8 e1 	call	0x1c390	; 0x1c390 <SPIClass::transfer(unsigned char)>
   1e8b2:	f7 01       	movw	r30, r14
   1e8b4:	81 93       	st	Z+, r24
   1e8b6:	7f 01       	movw	r14, r30
   1e8b8:	f7 cf       	rjmp	.-18     	; 0x1e8a8 <RF24::read_payload(void*, unsigned char)+0x40>
   1e8ba:	c1 50       	subi	r28, 0x01	; 1
   1e8bc:	20 f0       	brcs	.+8      	; 0x1e8c6 <RF24::read_payload(void*, unsigned char)+0x5e>
   1e8be:	8f ef       	ldi	r24, 0xFF	; 255
   1e8c0:	0e 94 c8 e1 	call	0x1c390	; 0x1c390 <SPIClass::transfer(unsigned char)>
   1e8c4:	fa cf       	rjmp	.-12     	; 0x1e8ba <RF24::read_payload(void*, unsigned char)+0x52>
   1e8c6:	c8 01       	movw	r24, r16
   1e8c8:	0e 94 72 f3 	call	0x1e6e4	; 0x1e6e4 <RF24::endTransaction()>
   1e8cc:	8d 2d       	mov	r24, r13
   1e8ce:	df 91       	pop	r29
   1e8d0:	cf 91       	pop	r28
   1e8d2:	1f 91       	pop	r17
   1e8d4:	0f 91       	pop	r16
   1e8d6:	ff 90       	pop	r15
   1e8d8:	ef 90       	pop	r14
   1e8da:	df 90       	pop	r13
   1e8dc:	cf 90       	pop	r12
   1e8de:	bf 90       	pop	r11
   1e8e0:	08 95       	ret

0001e8e2 <RF24::spiTrans(unsigned char)>:
_ZN4RF248spiTransEh():
   1e8e2:	1f 93       	push	r17
   1e8e4:	cf 93       	push	r28
   1e8e6:	df 93       	push	r29
   1e8e8:	ec 01       	movw	r28, r24
   1e8ea:	16 2f       	mov	r17, r22
   1e8ec:	0e 94 6f f3 	call	0x1e6de	; 0x1e6de <RF24::beginTransaction()>
   1e8f0:	81 2f       	mov	r24, r17
   1e8f2:	0e 94 c8 e1 	call	0x1c390	; 0x1c390 <SPIClass::transfer(unsigned char)>
   1e8f6:	18 2f       	mov	r17, r24
   1e8f8:	ce 01       	movw	r24, r28
   1e8fa:	0e 94 72 f3 	call	0x1e6e4	; 0x1e6e4 <RF24::endTransaction()>
   1e8fe:	81 2f       	mov	r24, r17
   1e900:	df 91       	pop	r29
   1e902:	cf 91       	pop	r28
   1e904:	1f 91       	pop	r17
   1e906:	08 95       	ret

0001e908 <RF24::flush_rx()>:
_ZN4RF248flush_rxEv():
   1e908:	62 ee       	ldi	r22, 0xE2	; 226
   1e90a:	0c 94 71 f4 	jmp	0x1e8e2	; 0x1e8e2 <RF24::spiTrans(unsigned char)>

0001e90e <RF24::flush_tx()>:
_ZN4RF248flush_txEv():
   1e90e:	61 ee       	ldi	r22, 0xE1	; 225
   1e910:	0c 94 71 f4 	jmp	0x1e8e2	; 0x1e8e2 <RF24::spiTrans(unsigned char)>

0001e914 <RF24::get_status()>:
_ZN4RF2410get_statusEv():
   1e914:	6f ef       	ldi	r22, 0xFF	; 255
   1e916:	0c 94 71 f4 	jmp	0x1e8e2	; 0x1e8e2 <RF24::spiTrans(unsigned char)>

0001e91a <RF24::print_status(unsigned char)>:
_ZN4RF2412print_statusEh():
   1e91a:	86 2f       	mov	r24, r22
   1e91c:	90 e0       	ldi	r25, 0x00	; 0
   1e91e:	26 2f       	mov	r18, r22
   1e920:	21 70       	andi	r18, 0x01	; 1
   1e922:	1f 92       	push	r1
   1e924:	2f 93       	push	r18
   1e926:	9c 01       	movw	r18, r24
   1e928:	35 95       	asr	r19
   1e92a:	27 95       	ror	r18
   1e92c:	27 70       	andi	r18, 0x07	; 7
   1e92e:	33 27       	eor	r19, r19
   1e930:	3f 93       	push	r19
   1e932:	2f 93       	push	r18
   1e934:	64 fb       	bst	r22, 4
   1e936:	99 27       	eor	r25, r25
   1e938:	90 f9       	bld	r25, 0
   1e93a:	1f 92       	push	r1
   1e93c:	9f 93       	push	r25
   1e93e:	65 fb       	bst	r22, 5
   1e940:	99 27       	eor	r25, r25
   1e942:	90 f9       	bld	r25, 0
   1e944:	1f 92       	push	r1
   1e946:	9f 93       	push	r25
   1e948:	66 fb       	bst	r22, 6
   1e94a:	88 27       	eor	r24, r24
   1e94c:	80 f9       	bld	r24, 0
   1e94e:	1f 92       	push	r1
   1e950:	8f 93       	push	r24
   1e952:	1f 92       	push	r1
   1e954:	6f 93       	push	r22
   1e956:	89 e1       	ldi	r24, 0x19	; 25
   1e958:	9e e8       	ldi	r25, 0x8E	; 142
   1e95a:	9f 93       	push	r25
   1e95c:	8f 93       	push	r24
   1e95e:	0f 94 54 1b 	call	0x236a8	; 0x236a8 <printf_P>
   1e962:	8d b7       	in	r24, 0x3d	; 61
   1e964:	9e b7       	in	r25, 0x3e	; 62
   1e966:	0e 96       	adiw	r24, 0x0e	; 14
   1e968:	0f b6       	in	r0, 0x3f	; 63
   1e96a:	f8 94       	cli
   1e96c:	9e bf       	out	0x3e, r25	; 62
   1e96e:	0f be       	out	0x3f, r0	; 63
   1e970:	8d bf       	out	0x3d, r24	; 61
   1e972:	08 95       	ret

0001e974 <RF24::print_byte_register(char const*, unsigned char, unsigned char)>:
_ZN4RF2419print_byte_registerEPKchh():
   1e974:	cf 92       	push	r12
   1e976:	df 92       	push	r13
   1e978:	ff 92       	push	r15
   1e97a:	0f 93       	push	r16
   1e97c:	1f 93       	push	r17
   1e97e:	cf 93       	push	r28
   1e980:	df 93       	push	r29
   1e982:	6c 01       	movw	r12, r24
   1e984:	c4 2f       	mov	r28, r20
   1e986:	d2 2f       	mov	r29, r18
   1e988:	7f 93       	push	r23
   1e98a:	6f 93       	push	r22
   1e98c:	83 e1       	ldi	r24, 0x13	; 19
   1e98e:	9e e8       	ldi	r25, 0x8E	; 142
   1e990:	9f 93       	push	r25
   1e992:	8f 93       	push	r24
   1e994:	0f 94 54 1b 	call	0x236a8	; 0x236a8 <printf_P>
   1e998:	dc 0f       	add	r29, r28
   1e99a:	0f 90       	pop	r0
   1e99c:	0f 90       	pop	r0
   1e99e:	0f 90       	pop	r0
   1e9a0:	0f 90       	pop	r0
   1e9a2:	0b e0       	ldi	r16, 0x0B	; 11
   1e9a4:	1e e8       	ldi	r17, 0x8E	; 142
   1e9a6:	cd 17       	cp	r28, r29
   1e9a8:	99 f0       	breq	.+38     	; 0x1e9d0 <RF24::print_byte_register(char const*, unsigned char, unsigned char)+0x5c>
   1e9aa:	ff 24       	eor	r15, r15
   1e9ac:	f3 94       	inc	r15
   1e9ae:	fc 0e       	add	r15, r28
   1e9b0:	6c 2f       	mov	r22, r28
   1e9b2:	c6 01       	movw	r24, r12
   1e9b4:	0e 94 9d f3 	call	0x1e73a	; 0x1e73a <RF24::read_register(unsigned char)>
   1e9b8:	1f 92       	push	r1
   1e9ba:	8f 93       	push	r24
   1e9bc:	1f 93       	push	r17
   1e9be:	0f 93       	push	r16
   1e9c0:	0f 94 54 1b 	call	0x236a8	; 0x236a8 <printf_P>
   1e9c4:	0f 90       	pop	r0
   1e9c6:	0f 90       	pop	r0
   1e9c8:	0f 90       	pop	r0
   1e9ca:	0f 90       	pop	r0
   1e9cc:	cf 2d       	mov	r28, r15
   1e9ce:	eb cf       	rjmp	.-42     	; 0x1e9a6 <RF24::print_byte_register(char const*, unsigned char, unsigned char)+0x32>
   1e9d0:	88 e0       	ldi	r24, 0x08	; 8
   1e9d2:	9e e8       	ldi	r25, 0x8E	; 142
   1e9d4:	9f 93       	push	r25
   1e9d6:	8f 93       	push	r24
   1e9d8:	0f 94 54 1b 	call	0x236a8	; 0x236a8 <printf_P>
   1e9dc:	0f 90       	pop	r0
   1e9de:	0f 90       	pop	r0
   1e9e0:	df 91       	pop	r29
   1e9e2:	cf 91       	pop	r28
   1e9e4:	1f 91       	pop	r17
   1e9e6:	0f 91       	pop	r16
   1e9e8:	ff 90       	pop	r15
   1e9ea:	df 90       	pop	r13
   1e9ec:	cf 90       	pop	r12
   1e9ee:	08 95       	ret

0001e9f0 <RF24::print_address_register(char const*, unsigned char, unsigned char)>:
_ZN4RF2422print_address_registerEPKchh():
   1e9f0:	2f 92       	push	r2
   1e9f2:	3f 92       	push	r3
   1e9f4:	4f 92       	push	r4
   1e9f6:	5f 92       	push	r5
   1e9f8:	6f 92       	push	r6
   1e9fa:	7f 92       	push	r7
   1e9fc:	8f 92       	push	r8
   1e9fe:	9f 92       	push	r9
   1ea00:	af 92       	push	r10
   1ea02:	bf 92       	push	r11
   1ea04:	cf 92       	push	r12
   1ea06:	df 92       	push	r13
   1ea08:	ef 92       	push	r14
   1ea0a:	ff 92       	push	r15
   1ea0c:	0f 93       	push	r16
   1ea0e:	1f 93       	push	r17
   1ea10:	cf 93       	push	r28
   1ea12:	df 93       	push	r29
   1ea14:	1f 92       	push	r1
   1ea16:	cd b7       	in	r28, 0x3d	; 61
   1ea18:	de b7       	in	r29, 0x3e	; 62
   1ea1a:	6c 01       	movw	r12, r24
   1ea1c:	24 2e       	mov	r2, r20
   1ea1e:	32 2e       	mov	r3, r18
   1ea20:	4d b6       	in	r4, 0x3d	; 61
   1ea22:	5e b6       	in	r5, 0x3e	; 62
   1ea24:	7f 93       	push	r23
   1ea26:	6f 93       	push	r22
   1ea28:	82 e0       	ldi	r24, 0x02	; 2
   1ea2a:	9e e8       	ldi	r25, 0x8E	; 142
   1ea2c:	9f 93       	push	r25
   1ea2e:	8f 93       	push	r24
   1ea30:	0f 94 54 1b 	call	0x236a8	; 0x236a8 <printf_P>
   1ea34:	32 0c       	add	r3, r2
   1ea36:	0f 90       	pop	r0
   1ea38:	0f 90       	pop	r0
   1ea3a:	0f 90       	pop	r0
   1ea3c:	0f 90       	pop	r0
   1ea3e:	8e ef       	ldi	r24, 0xFE	; 254
   1ea40:	a8 2e       	mov	r10, r24
   1ea42:	8d e8       	ldi	r24, 0x8D	; 141
   1ea44:	b8 2e       	mov	r11, r24
   1ea46:	99 ef       	ldi	r25, 0xF9	; 249
   1ea48:	89 2e       	mov	r8, r25
   1ea4a:	9d e8       	ldi	r25, 0x8D	; 141
   1ea4c:	99 2e       	mov	r9, r25
   1ea4e:	23 14       	cp	r2, r3
   1ea50:	e1 f1       	breq	.+120    	; 0x1eaca <RF24::print_address_register(char const*, unsigned char, unsigned char)+0xda>
   1ea52:	6d b6       	in	r6, 0x3d	; 61
   1ea54:	7e b6       	in	r7, 0x3e	; 62
   1ea56:	f6 01       	movw	r30, r12
   1ea58:	26 85       	ldd	r18, Z+14	; 0x0e
   1ea5a:	02 2f       	mov	r16, r18
   1ea5c:	10 e0       	ldi	r17, 0x00	; 0
   1ea5e:	8d b7       	in	r24, 0x3d	; 61
   1ea60:	9e b7       	in	r25, 0x3e	; 62
   1ea62:	80 1b       	sub	r24, r16
   1ea64:	91 0b       	sbc	r25, r17
   1ea66:	0f b6       	in	r0, 0x3f	; 63
   1ea68:	f8 94       	cli
   1ea6a:	9e bf       	out	0x3e, r25	; 62
   1ea6c:	0f be       	out	0x3f, r0	; 63
   1ea6e:	8d bf       	out	0x3d, r24	; 61
   1ea70:	ed b7       	in	r30, 0x3d	; 61
   1ea72:	fe b7       	in	r31, 0x3e	; 62
   1ea74:	31 96       	adiw	r30, 0x01	; 1
   1ea76:	7f 01       	movw	r14, r30
   1ea78:	f1 e0       	ldi	r31, 0x01	; 1
   1ea7a:	f2 0d       	add	r31, r2
   1ea7c:	f9 83       	std	Y+1, r31	; 0x01
   1ea7e:	a7 01       	movw	r20, r14
   1ea80:	62 2d       	mov	r22, r2
   1ea82:	c6 01       	movw	r24, r12
   1ea84:	0e 94 75 f3 	call	0x1e6ea	; 0x1e6ea <RF24::read_register(unsigned char, unsigned char*, unsigned char)>
   1ea88:	bf 92       	push	r11
   1ea8a:	af 92       	push	r10
   1ea8c:	0f 94 54 1b 	call	0x236a8	; 0x236a8 <printf_P>
   1ea90:	0e 0d       	add	r16, r14
   1ea92:	1f 1d       	adc	r17, r15
   1ea94:	0f 90       	pop	r0
   1ea96:	0f 90       	pop	r0
   1ea98:	01 50       	subi	r16, 0x01	; 1
   1ea9a:	11 09       	sbc	r17, r1
   1ea9c:	0e 15       	cp	r16, r14
   1ea9e:	1f 05       	cpc	r17, r15
   1eaa0:	68 f0       	brcs	.+26     	; 0x1eabc <RF24::print_address_register(char const*, unsigned char, unsigned char)+0xcc>
   1eaa2:	f8 01       	movw	r30, r16
   1eaa4:	80 81       	ld	r24, Z
   1eaa6:	1f 92       	push	r1
   1eaa8:	8f 93       	push	r24
   1eaaa:	9f 92       	push	r9
   1eaac:	8f 92       	push	r8
   1eaae:	0f 94 54 1b 	call	0x236a8	; 0x236a8 <printf_P>
   1eab2:	0f 90       	pop	r0
   1eab4:	0f 90       	pop	r0
   1eab6:	0f 90       	pop	r0
   1eab8:	0f 90       	pop	r0
   1eaba:	ee cf       	rjmp	.-36     	; 0x1ea98 <RF24::print_address_register(char const*, unsigned char, unsigned char)+0xa8>
   1eabc:	0f b6       	in	r0, 0x3f	; 63
   1eabe:	f8 94       	cli
   1eac0:	7e be       	out	0x3e, r7	; 62
   1eac2:	0f be       	out	0x3f, r0	; 63
   1eac4:	6d be       	out	0x3d, r6	; 61
   1eac6:	29 80       	ldd	r2, Y+1	; 0x01
   1eac8:	c2 cf       	rjmp	.-124    	; 0x1ea4e <RF24::print_address_register(char const*, unsigned char, unsigned char)+0x5e>
   1eaca:	86 ef       	ldi	r24, 0xF6	; 246
   1eacc:	9d e8       	ldi	r25, 0x8D	; 141
   1eace:	9f 93       	push	r25
   1ead0:	8f 93       	push	r24
   1ead2:	0f 94 54 1b 	call	0x236a8	; 0x236a8 <printf_P>
   1ead6:	0f 90       	pop	r0
   1ead8:	0f 90       	pop	r0
   1eada:	0f b6       	in	r0, 0x3f	; 63
   1eadc:	f8 94       	cli
   1eade:	5e be       	out	0x3e, r5	; 62
   1eae0:	0f be       	out	0x3f, r0	; 63
   1eae2:	4d be       	out	0x3d, r4	; 61
   1eae4:	0f 90       	pop	r0
   1eae6:	df 91       	pop	r29
   1eae8:	cf 91       	pop	r28
   1eaea:	1f 91       	pop	r17
   1eaec:	0f 91       	pop	r16
   1eaee:	ff 90       	pop	r15
   1eaf0:	ef 90       	pop	r14
   1eaf2:	df 90       	pop	r13
   1eaf4:	cf 90       	pop	r12
   1eaf6:	bf 90       	pop	r11
   1eaf8:	af 90       	pop	r10
   1eafa:	9f 90       	pop	r9
   1eafc:	8f 90       	pop	r8
   1eafe:	7f 90       	pop	r7
   1eb00:	6f 90       	pop	r6
   1eb02:	5f 90       	pop	r5
   1eb04:	4f 90       	pop	r4
   1eb06:	3f 90       	pop	r3
   1eb08:	2f 90       	pop	r2
   1eb0a:	08 95       	ret

0001eb0c <RF24::RF24(unsigned int, unsigned int)>:
_ZN4RF24C2Ejj():
   1eb0c:	fc 01       	movw	r30, r24
   1eb0e:	71 83       	std	Z+1, r23	; 0x01
   1eb10:	60 83       	st	Z, r22
   1eb12:	53 83       	std	Z+3, r21	; 0x03
   1eb14:	42 83       	std	Z+2, r20	; 0x02
   1eb16:	16 82       	std	Z+6, r1	; 0x06
   1eb18:	80 e2       	ldi	r24, 0x20	; 32
   1eb1a:	87 83       	std	Z+7, r24	; 0x07
   1eb1c:	10 86       	std	Z+8, r1	; 0x08
   1eb1e:	85 e0       	ldi	r24, 0x05	; 5
   1eb20:	86 87       	std	Z+14, r24	; 0x0e
   1eb22:	85 e0       	ldi	r24, 0x05	; 5
   1eb24:	90 e0       	ldi	r25, 0x00	; 0
   1eb26:	a0 e0       	ldi	r26, 0x00	; 0
   1eb28:	b0 e0       	ldi	r27, 0x00	; 0
   1eb2a:	84 8b       	std	Z+20, r24	; 0x14
   1eb2c:	95 8b       	std	Z+21, r25	; 0x15
   1eb2e:	a6 8b       	std	Z+22, r26	; 0x16
   1eb30:	b7 8b       	std	Z+23, r27	; 0x17
   1eb32:	11 86       	std	Z+9, r1	; 0x09
   1eb34:	08 95       	ret

0001eb36 <RF24::setChannel(unsigned char)>:
_ZN4RF2410setChannelEh():
   1eb36:	46 2f       	mov	r20, r22
   1eb38:	6d 37       	cpi	r22, 0x7D	; 125
   1eb3a:	08 f0       	brcs	.+2      	; 0x1eb3e <RF24::setChannel(unsigned char)+0x8>
   1eb3c:	4d e7       	ldi	r20, 0x7D	; 125
   1eb3e:	65 e0       	ldi	r22, 0x05	; 5
   1eb40:	0c 94 dc f3 	jmp	0x1e7b8	; 0x1e7b8 <RF24::write_register(unsigned char, unsigned char)>

0001eb44 <RF24::stopListening()>:
_ZN4RF2413stopListeningEv():
   1eb44:	cf 93       	push	r28
   1eb46:	df 93       	push	r29
   1eb48:	ec 01       	movw	r28, r24
   1eb4a:	60 e0       	ldi	r22, 0x00	; 0
   1eb4c:	0e 94 63 f3 	call	0x1e6c6	; 0x1e6c6 <RF24::ce(bool)>
   1eb50:	88 89       	ldd	r24, Y+16	; 0x10
   1eb52:	99 89       	ldd	r25, Y+17	; 0x11
   1eb54:	0f 94 6c 0f 	call	0x21ed8	; 0x21ed8 <delayMicroseconds>
   1eb58:	6d e1       	ldi	r22, 0x1D	; 29
   1eb5a:	ce 01       	movw	r24, r28
   1eb5c:	0e 94 9d f3 	call	0x1e73a	; 0x1e73a <RF24::read_register(unsigned char)>
   1eb60:	81 ff       	sbrs	r24, 1
   1eb62:	07 c0       	rjmp	.+14     	; 0x1eb72 <RF24::stopListening()+0x2e>
   1eb64:	88 89       	ldd	r24, Y+16	; 0x10
   1eb66:	99 89       	ldd	r25, Y+17	; 0x11
   1eb68:	0f 94 6c 0f 	call	0x21ed8	; 0x21ed8 <delayMicroseconds>
   1eb6c:	ce 01       	movw	r24, r28
   1eb6e:	0e 94 87 f4 	call	0x1e90e	; 0x1e90e <RF24::flush_tx()>
   1eb72:	60 e0       	ldi	r22, 0x00	; 0
   1eb74:	ce 01       	movw	r24, r28
   1eb76:	0e 94 9d f3 	call	0x1e73a	; 0x1e73a <RF24::read_register(unsigned char)>
   1eb7a:	48 2f       	mov	r20, r24
   1eb7c:	4e 7f       	andi	r20, 0xFE	; 254
   1eb7e:	60 e0       	ldi	r22, 0x00	; 0
   1eb80:	ce 01       	movw	r24, r28
   1eb82:	0e 94 dc f3 	call	0x1e7b8	; 0x1e7b8 <RF24::write_register(unsigned char, unsigned char)>
   1eb86:	62 e0       	ldi	r22, 0x02	; 2
   1eb88:	ce 01       	movw	r24, r28
   1eb8a:	0e 94 9d f3 	call	0x1e73a	; 0x1e73a <RF24::read_register(unsigned char)>
   1eb8e:	e2 ed       	ldi	r30, 0xD2	; 210
   1eb90:	fc e8       	ldi	r31, 0x8C	; 140
   1eb92:	e4 91       	lpm	r30, Z
   1eb94:	41 e0       	ldi	r20, 0x01	; 1
   1eb96:	50 e0       	ldi	r21, 0x00	; 0
   1eb98:	01 c0       	rjmp	.+2      	; 0x1eb9c <RF24::stopListening()+0x58>
   1eb9a:	44 0f       	add	r20, r20
   1eb9c:	ea 95       	dec	r30
   1eb9e:	ea f7       	brpl	.-6      	; 0x1eb9a <RF24::stopListening()+0x56>
   1eba0:	48 2b       	or	r20, r24
   1eba2:	62 e0       	ldi	r22, 0x02	; 2
   1eba4:	ce 01       	movw	r24, r28
   1eba6:	df 91       	pop	r29
   1eba8:	cf 91       	pop	r28
   1ebaa:	0c 94 dc f3 	jmp	0x1e7b8	; 0x1e7b8 <RF24::write_register(unsigned char, unsigned char)>

0001ebae <RF24::powerUp()>:
_ZN4RF247powerUpEv():
   1ebae:	cf 93       	push	r28
   1ebb0:	df 93       	push	r29
   1ebb2:	ec 01       	movw	r28, r24
   1ebb4:	60 e0       	ldi	r22, 0x00	; 0
   1ebb6:	0e 94 9d f3 	call	0x1e73a	; 0x1e73a <RF24::read_register(unsigned char)>
   1ebba:	81 fd       	sbrc	r24, 1
   1ebbc:	0e c0       	rjmp	.+28     	; 0x1ebda <RF24::powerUp()+0x2c>
   1ebbe:	48 2f       	mov	r20, r24
   1ebc0:	42 60       	ori	r20, 0x02	; 2
   1ebc2:	60 e0       	ldi	r22, 0x00	; 0
   1ebc4:	ce 01       	movw	r24, r28
   1ebc6:	0e 94 dc f3 	call	0x1e7b8	; 0x1e7b8 <RF24::write_register(unsigned char, unsigned char)>
   1ebca:	65 e0       	ldi	r22, 0x05	; 5
   1ebcc:	70 e0       	ldi	r23, 0x00	; 0
   1ebce:	80 e0       	ldi	r24, 0x00	; 0
   1ebd0:	90 e0       	ldi	r25, 0x00	; 0
   1ebd2:	df 91       	pop	r29
   1ebd4:	cf 91       	pop	r28
   1ebd6:	0d 94 33 0f 	jmp	0x21e66	; 0x21e66 <delay>
   1ebda:	df 91       	pop	r29
   1ebdc:	cf 91       	pop	r28
   1ebde:	08 95       	ret

0001ebe0 <RF24::startFastWrite(void const*, unsigned char, bool, bool)>:
_ZN4RF2414startFastWriteEPKvhbb():
   1ebe0:	0f 93       	push	r16
   1ebe2:	cf 93       	push	r28
   1ebe4:	df 93       	push	r29
   1ebe6:	ec 01       	movw	r28, r24
   1ebe8:	21 11       	cpse	r18, r1
   1ebea:	0d c0       	rjmp	.+26     	; 0x1ec06 <RF24::startFastWrite(void const*, unsigned char, bool, bool)+0x26>
   1ebec:	20 ea       	ldi	r18, 0xA0	; 160
   1ebee:	ce 01       	movw	r24, r28
   1ebf0:	0e 94 f7 f3 	call	0x1e7ee	; 0x1e7ee <RF24::write_payload(void const*, unsigned char, unsigned char)>
   1ebf4:	00 23       	and	r16, r16
   1ebf6:	49 f0       	breq	.+18     	; 0x1ec0a <RF24::startFastWrite(void const*, unsigned char, bool, bool)+0x2a>
   1ebf8:	61 e0       	ldi	r22, 0x01	; 1
   1ebfa:	ce 01       	movw	r24, r28
   1ebfc:	df 91       	pop	r29
   1ebfe:	cf 91       	pop	r28
   1ec00:	0f 91       	pop	r16
   1ec02:	0c 94 63 f3 	jmp	0x1e6c6	; 0x1e6c6 <RF24::ce(bool)>
   1ec06:	20 eb       	ldi	r18, 0xB0	; 176
   1ec08:	f2 cf       	rjmp	.-28     	; 0x1ebee <RF24::startFastWrite(void const*, unsigned char, bool, bool)+0xe>
   1ec0a:	df 91       	pop	r29
   1ec0c:	cf 91       	pop	r28
   1ec0e:	0f 91       	pop	r16
   1ec10:	08 95       	ret

0001ec12 <RF24::writeFast(void const*, unsigned char, bool)>:
_ZN4RF249writeFastEPKvhb():
   1ec12:	df 92       	push	r13
   1ec14:	ef 92       	push	r14
   1ec16:	ff 92       	push	r15
   1ec18:	0f 93       	push	r16
   1ec1a:	1f 93       	push	r17
   1ec1c:	cf 93       	push	r28
   1ec1e:	df 93       	push	r29
   1ec20:	ec 01       	movw	r28, r24
   1ec22:	7b 01       	movw	r14, r22
   1ec24:	14 2f       	mov	r17, r20
   1ec26:	d2 2e       	mov	r13, r18
   1ec28:	ce 01       	movw	r24, r28
   1ec2a:	0e 94 8a f4 	call	0x1e914	; 0x1e914 <RF24::get_status()>
   1ec2e:	80 ff       	sbrs	r24, 0
   1ec30:	13 c0       	rjmp	.+38     	; 0x1ec58 <RF24::writeFast(void const*, unsigned char, bool)+0x46>
   1ec32:	ce 01       	movw	r24, r28
   1ec34:	0e 94 8a f4 	call	0x1e914	; 0x1e914 <RF24::get_status()>
   1ec38:	84 ff       	sbrs	r24, 4
   1ec3a:	f6 cf       	rjmp	.-20     	; 0x1ec28 <RF24::writeFast(void const*, unsigned char, bool)+0x16>
   1ec3c:	40 e1       	ldi	r20, 0x10	; 16
   1ec3e:	67 e0       	ldi	r22, 0x07	; 7
   1ec40:	ce 01       	movw	r24, r28
   1ec42:	0e 94 dc f3 	call	0x1e7b8	; 0x1e7b8 <RF24::write_register(unsigned char, unsigned char)>
   1ec46:	80 e0       	ldi	r24, 0x00	; 0
   1ec48:	df 91       	pop	r29
   1ec4a:	cf 91       	pop	r28
   1ec4c:	1f 91       	pop	r17
   1ec4e:	0f 91       	pop	r16
   1ec50:	ff 90       	pop	r15
   1ec52:	ef 90       	pop	r14
   1ec54:	df 90       	pop	r13
   1ec56:	08 95       	ret
   1ec58:	01 e0       	ldi	r16, 0x01	; 1
   1ec5a:	2d 2d       	mov	r18, r13
   1ec5c:	41 2f       	mov	r20, r17
   1ec5e:	b7 01       	movw	r22, r14
   1ec60:	ce 01       	movw	r24, r28
   1ec62:	0e 94 f0 f5 	call	0x1ebe0	; 0x1ebe0 <RF24::startFastWrite(void const*, unsigned char, bool, bool)>
   1ec66:	81 e0       	ldi	r24, 0x01	; 1
   1ec68:	ef cf       	rjmp	.-34     	; 0x1ec48 <RF24::writeFast(void const*, unsigned char, bool)+0x36>

0001ec6a <RF24::txStandBy(unsigned long, bool)>:
_ZN4RF249txStandByEmb():
   1ec6a:	8f 92       	push	r8
   1ec6c:	9f 92       	push	r9
   1ec6e:	af 92       	push	r10
   1ec70:	bf 92       	push	r11
   1ec72:	cf 92       	push	r12
   1ec74:	df 92       	push	r13
   1ec76:	ef 92       	push	r14
   1ec78:	ff 92       	push	r15
   1ec7a:	cf 93       	push	r28
   1ec7c:	df 93       	push	r29
   1ec7e:	ec 01       	movw	r28, r24
   1ec80:	6a 01       	movw	r12, r20
   1ec82:	7b 01       	movw	r14, r22
   1ec84:	22 23       	and	r18, r18
   1ec86:	31 f0       	breq	.+12     	; 0x1ec94 <RF24::txStandBy(unsigned long, bool)+0x2a>
   1ec88:	0e 94 a2 f5 	call	0x1eb44	; 0x1eb44 <RF24::stopListening()>
   1ec8c:	61 e0       	ldi	r22, 0x01	; 1
   1ec8e:	ce 01       	movw	r24, r28
   1ec90:	0e 94 63 f3 	call	0x1e6c6	; 0x1e6c6 <RF24::ce(bool)>
   1ec94:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   1ec98:	4b 01       	movw	r8, r22
   1ec9a:	5c 01       	movw	r10, r24
   1ec9c:	67 e1       	ldi	r22, 0x17	; 23
   1ec9e:	ce 01       	movw	r24, r28
   1eca0:	0e 94 9d f3 	call	0x1e73a	; 0x1e73a <RF24::read_register(unsigned char)>
   1eca4:	84 fd       	sbrc	r24, 4
   1eca6:	30 c0       	rjmp	.+96     	; 0x1ed08 <RF24::txStandBy(unsigned long, bool)+0x9e>
   1eca8:	ce 01       	movw	r24, r28
   1ecaa:	0e 94 8a f4 	call	0x1e914	; 0x1e914 <RF24::get_status()>
   1ecae:	84 ff       	sbrs	r24, 4
   1ecb0:	f5 cf       	rjmp	.-22     	; 0x1ec9c <RF24::txStandBy(unsigned long, bool)+0x32>
   1ecb2:	40 e1       	ldi	r20, 0x10	; 16
   1ecb4:	67 e0       	ldi	r22, 0x07	; 7
   1ecb6:	ce 01       	movw	r24, r28
   1ecb8:	0e 94 dc f3 	call	0x1e7b8	; 0x1e7b8 <RF24::write_register(unsigned char, unsigned char)>
   1ecbc:	60 e0       	ldi	r22, 0x00	; 0
   1ecbe:	ce 01       	movw	r24, r28
   1ecc0:	0e 94 63 f3 	call	0x1e6c6	; 0x1e6c6 <RF24::ce(bool)>
   1ecc4:	61 e0       	ldi	r22, 0x01	; 1
   1ecc6:	ce 01       	movw	r24, r28
   1ecc8:	0e 94 63 f3 	call	0x1e6c6	; 0x1e6c6 <RF24::ce(bool)>
   1eccc:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   1ecd0:	68 19       	sub	r22, r8
   1ecd2:	79 09       	sbc	r23, r9
   1ecd4:	8a 09       	sbc	r24, r10
   1ecd6:	9b 09       	sbc	r25, r11
   1ecd8:	6c 15       	cp	r22, r12
   1ecda:	7d 05       	cpc	r23, r13
   1ecdc:	8e 05       	cpc	r24, r14
   1ecde:	9f 05       	cpc	r25, r15
   1ece0:	e8 f2       	brcs	.-70     	; 0x1ec9c <RF24::txStandBy(unsigned long, bool)+0x32>
   1ece2:	60 e0       	ldi	r22, 0x00	; 0
   1ece4:	ce 01       	movw	r24, r28
   1ece6:	0e 94 63 f3 	call	0x1e6c6	; 0x1e6c6 <RF24::ce(bool)>
   1ecea:	ce 01       	movw	r24, r28
   1ecec:	0e 94 87 f4 	call	0x1e90e	; 0x1e90e <RF24::flush_tx()>
   1ecf0:	80 e0       	ldi	r24, 0x00	; 0
   1ecf2:	df 91       	pop	r29
   1ecf4:	cf 91       	pop	r28
   1ecf6:	ff 90       	pop	r15
   1ecf8:	ef 90       	pop	r14
   1ecfa:	df 90       	pop	r13
   1ecfc:	cf 90       	pop	r12
   1ecfe:	bf 90       	pop	r11
   1ed00:	af 90       	pop	r10
   1ed02:	9f 90       	pop	r9
   1ed04:	8f 90       	pop	r8
   1ed06:	08 95       	ret
   1ed08:	60 e0       	ldi	r22, 0x00	; 0
   1ed0a:	ce 01       	movw	r24, r28
   1ed0c:	0e 94 63 f3 	call	0x1e6c6	; 0x1e6c6 <RF24::ce(bool)>
   1ed10:	81 e0       	ldi	r24, 0x01	; 1
   1ed12:	ef cf       	rjmp	.-34     	; 0x1ecf2 <RF24::txStandBy(unsigned long, bool)+0x88>

0001ed14 <RF24::getDynamicPayloadSize()>:
_ZN4RF2421getDynamicPayloadSizeEv():
   1ed14:	0f 93       	push	r16
   1ed16:	1f 93       	push	r17
   1ed18:	cf 93       	push	r28
   1ed1a:	8c 01       	movw	r16, r24
   1ed1c:	0e 94 6f f3 	call	0x1e6de	; 0x1e6de <RF24::beginTransaction()>
   1ed20:	80 e6       	ldi	r24, 0x60	; 96
   1ed22:	0e 94 c8 e1 	call	0x1c390	; 0x1c390 <SPIClass::transfer(unsigned char)>
   1ed26:	8f ef       	ldi	r24, 0xFF	; 255
   1ed28:	0e 94 c8 e1 	call	0x1c390	; 0x1c390 <SPIClass::transfer(unsigned char)>
   1ed2c:	c8 2f       	mov	r28, r24
   1ed2e:	c8 01       	movw	r24, r16
   1ed30:	0e 94 72 f3 	call	0x1e6e4	; 0x1e6e4 <RF24::endTransaction()>
   1ed34:	c1 32       	cpi	r28, 0x21	; 33
   1ed36:	50 f0       	brcs	.+20     	; 0x1ed4c <RF24::getDynamicPayloadSize()+0x38>
   1ed38:	c8 01       	movw	r24, r16
   1ed3a:	0e 94 84 f4 	call	0x1e908	; 0x1e908 <RF24::flush_rx()>
   1ed3e:	62 e0       	ldi	r22, 0x02	; 2
   1ed40:	70 e0       	ldi	r23, 0x00	; 0
   1ed42:	80 e0       	ldi	r24, 0x00	; 0
   1ed44:	90 e0       	ldi	r25, 0x00	; 0
   1ed46:	0f 94 33 0f 	call	0x21e66	; 0x21e66 <delay>
   1ed4a:	c0 e0       	ldi	r28, 0x00	; 0
   1ed4c:	8c 2f       	mov	r24, r28
   1ed4e:	cf 91       	pop	r28
   1ed50:	1f 91       	pop	r17
   1ed52:	0f 91       	pop	r16
   1ed54:	08 95       	ret

0001ed56 <RF24::available(unsigned char*)>:
_ZN4RF249availableEPh():
   1ed56:	0f 93       	push	r16
   1ed58:	1f 93       	push	r17
   1ed5a:	cf 93       	push	r28
   1ed5c:	df 93       	push	r29
   1ed5e:	8c 01       	movw	r16, r24
   1ed60:	eb 01       	movw	r28, r22
   1ed62:	67 e1       	ldi	r22, 0x17	; 23
   1ed64:	0e 94 9d f3 	call	0x1e73a	; 0x1e73a <RF24::read_register(unsigned char)>
   1ed68:	80 fd       	sbrc	r24, 0
   1ed6a:	0c c0       	rjmp	.+24     	; 0x1ed84 <RF24::available(unsigned char*)+0x2e>
   1ed6c:	20 97       	sbiw	r28, 0x00	; 0
   1ed6e:	41 f0       	breq	.+16     	; 0x1ed80 <RF24::available(unsigned char*)+0x2a>
   1ed70:	c8 01       	movw	r24, r16
   1ed72:	0e 94 8a f4 	call	0x1e914	; 0x1e914 <RF24::get_status()>
   1ed76:	90 e0       	ldi	r25, 0x00	; 0
   1ed78:	95 95       	asr	r25
   1ed7a:	87 95       	ror	r24
   1ed7c:	87 70       	andi	r24, 0x07	; 7
   1ed7e:	88 83       	st	Y, r24
   1ed80:	81 e0       	ldi	r24, 0x01	; 1
   1ed82:	01 c0       	rjmp	.+2      	; 0x1ed86 <RF24::available(unsigned char*)+0x30>
   1ed84:	80 e0       	ldi	r24, 0x00	; 0
   1ed86:	df 91       	pop	r29
   1ed88:	cf 91       	pop	r28
   1ed8a:	1f 91       	pop	r17
   1ed8c:	0f 91       	pop	r16
   1ed8e:	08 95       	ret

0001ed90 <RF24::available()>:
_ZN4RF249availableEv():
   1ed90:	70 e0       	ldi	r23, 0x00	; 0
   1ed92:	60 e0       	ldi	r22, 0x00	; 0
   1ed94:	0c 94 ab f6 	jmp	0x1ed56	; 0x1ed56 <RF24::available(unsigned char*)>

0001ed98 <RF24::read(void*, unsigned char)>:
_ZN4RF244readEPvh():
   1ed98:	cf 93       	push	r28
   1ed9a:	df 93       	push	r29
   1ed9c:	ec 01       	movw	r28, r24
   1ed9e:	0e 94 34 f4 	call	0x1e868	; 0x1e868 <RF24::read_payload(void*, unsigned char)>
   1eda2:	40 e7       	ldi	r20, 0x70	; 112
   1eda4:	67 e0       	ldi	r22, 0x07	; 7
   1eda6:	ce 01       	movw	r24, r28
   1eda8:	df 91       	pop	r29
   1edaa:	cf 91       	pop	r28
   1edac:	0c 94 dc f3 	jmp	0x1e7b8	; 0x1e7b8 <RF24::write_register(unsigned char, unsigned char)>

0001edb0 <RF24::openWritingPipe(unsigned long long)>:
_ZN4RF2415openWritingPipeEy():
   1edb0:	ef 92       	push	r14
   1edb2:	ff 92       	push	r15
   1edb4:	0f 93       	push	r16
   1edb6:	1f 93       	push	r17
   1edb8:	cf 93       	push	r28
   1edba:	df 93       	push	r29
   1edbc:	00 d0       	rcall	.+0      	; 0x1edbe <RF24::openWritingPipe(unsigned long long)+0xe>
   1edbe:	00 d0       	rcall	.+0      	; 0x1edc0 <RF24::openWritingPipe(unsigned long long)+0x10>
   1edc0:	1f 92       	push	r1
   1edc2:	1f 92       	push	r1
   1edc4:	cd b7       	in	r28, 0x3d	; 61
   1edc6:	de b7       	in	r29, 0x3e	; 62
   1edc8:	7c 01       	movw	r14, r24
   1edca:	09 83       	std	Y+1, r16	; 0x01
   1edcc:	1a 83       	std	Y+2, r17	; 0x02
   1edce:	2b 83       	std	Y+3, r18	; 0x03
   1edd0:	3c 83       	std	Y+4, r19	; 0x04
   1edd2:	4d 83       	std	Y+5, r20	; 0x05
   1edd4:	5e 83       	std	Y+6, r21	; 0x06
   1edd6:	6f 83       	std	Y+7, r22	; 0x07
   1edd8:	78 87       	std	Y+8, r23	; 0x08
   1edda:	fc 01       	movw	r30, r24
   1eddc:	26 85       	ldd	r18, Z+14	; 0x0e
   1edde:	ae 01       	movw	r20, r28
   1ede0:	4f 5f       	subi	r20, 0xFF	; 255
   1ede2:	5f 4f       	sbci	r21, 0xFF	; 255
   1ede4:	6a e0       	ldi	r22, 0x0A	; 10
   1ede6:	0e 94 b4 f3 	call	0x1e768	; 0x1e768 <RF24::write_register(unsigned char, unsigned char const*, unsigned char)>
   1edea:	f7 01       	movw	r30, r14
   1edec:	26 85       	ldd	r18, Z+14	; 0x0e
   1edee:	ae 01       	movw	r20, r28
   1edf0:	4f 5f       	subi	r20, 0xFF	; 255
   1edf2:	5f 4f       	sbci	r21, 0xFF	; 255
   1edf4:	60 e1       	ldi	r22, 0x10	; 16
   1edf6:	c7 01       	movw	r24, r14
   1edf8:	0e 94 b4 f3 	call	0x1e768	; 0x1e768 <RF24::write_register(unsigned char, unsigned char const*, unsigned char)>
   1edfc:	f7 01       	movw	r30, r14
   1edfe:	47 81       	ldd	r20, Z+7	; 0x07
   1ee00:	61 e1       	ldi	r22, 0x11	; 17
   1ee02:	c7 01       	movw	r24, r14
   1ee04:	0e 94 dc f3 	call	0x1e7b8	; 0x1e7b8 <RF24::write_register(unsigned char, unsigned char)>
   1ee08:	28 96       	adiw	r28, 0x08	; 8
   1ee0a:	0f b6       	in	r0, 0x3f	; 63
   1ee0c:	f8 94       	cli
   1ee0e:	de bf       	out	0x3e, r29	; 62
   1ee10:	0f be       	out	0x3f, r0	; 63
   1ee12:	cd bf       	out	0x3d, r28	; 61
   1ee14:	df 91       	pop	r29
   1ee16:	cf 91       	pop	r28
   1ee18:	1f 91       	pop	r17
   1ee1a:	0f 91       	pop	r16
   1ee1c:	ff 90       	pop	r15
   1ee1e:	ef 90       	pop	r14
   1ee20:	08 95       	ret

0001ee22 <RF24::openReadingPipe(unsigned char, unsigned long long)>:
_ZN4RF2415openReadingPipeEhy():
   1ee22:	af 92       	push	r10
   1ee24:	bf 92       	push	r11
   1ee26:	df 92       	push	r13
   1ee28:	ef 92       	push	r14
   1ee2a:	ff 92       	push	r15
   1ee2c:	0f 93       	push	r16
   1ee2e:	1f 93       	push	r17
   1ee30:	cf 93       	push	r28
   1ee32:	df 93       	push	r29
   1ee34:	00 d0       	rcall	.+0      	; 0x1ee36 <RF24::openReadingPipe(unsigned char, unsigned long long)+0x14>
   1ee36:	00 d0       	rcall	.+0      	; 0x1ee38 <RF24::openReadingPipe(unsigned char, unsigned long long)+0x16>
   1ee38:	1f 92       	push	r1
   1ee3a:	1f 92       	push	r1
   1ee3c:	cd b7       	in	r28, 0x3d	; 61
   1ee3e:	de b7       	in	r29, 0x3e	; 62
   1ee40:	5c 01       	movw	r10, r24
   1ee42:	d6 2e       	mov	r13, r22
   1ee44:	e9 82       	std	Y+1, r14	; 0x01
   1ee46:	fa 82       	std	Y+2, r15	; 0x02
   1ee48:	0b 83       	std	Y+3, r16	; 0x03
   1ee4a:	1c 83       	std	Y+4, r17	; 0x04
   1ee4c:	2d 83       	std	Y+5, r18	; 0x05
   1ee4e:	3e 83       	std	Y+6, r19	; 0x06
   1ee50:	4f 83       	std	Y+7, r20	; 0x07
   1ee52:	58 87       	std	Y+8, r21	; 0x08
   1ee54:	61 11       	cpse	r22, r1
   1ee56:	44 c0       	rjmp	.+136    	; 0x1eee0 <RF24::openReadingPipe(unsigned char, unsigned long long)+0xbe>
   1ee58:	fc 01       	movw	r30, r24
   1ee5a:	46 85       	ldd	r20, Z+14	; 0x0e
   1ee5c:	50 e0       	ldi	r21, 0x00	; 0
   1ee5e:	be 01       	movw	r22, r28
   1ee60:	6f 5f       	subi	r22, 0xFF	; 255
   1ee62:	7f 4f       	sbci	r23, 0xFF	; 255
   1ee64:	09 96       	adiw	r24, 0x09	; 9
   1ee66:	0f 94 2d 1a 	call	0x2345a	; 0x2345a <memcpy>
   1ee6a:	ed 2d       	mov	r30, r13
   1ee6c:	f0 e0       	ldi	r31, 0x00	; 0
   1ee6e:	e4 53       	subi	r30, 0x34	; 52
   1ee70:	f3 47       	sbci	r31, 0x73	; 115
   1ee72:	64 91       	lpm	r22, Z
   1ee74:	f5 01       	movw	r30, r10
   1ee76:	26 85       	ldd	r18, Z+14	; 0x0e
   1ee78:	ae 01       	movw	r20, r28
   1ee7a:	4f 5f       	subi	r20, 0xFF	; 255
   1ee7c:	5f 4f       	sbci	r21, 0xFF	; 255
   1ee7e:	c5 01       	movw	r24, r10
   1ee80:	0e 94 b4 f3 	call	0x1e768	; 0x1e768 <RF24::write_register(unsigned char, unsigned char const*, unsigned char)>
   1ee84:	0d 2d       	mov	r16, r13
   1ee86:	10 e0       	ldi	r17, 0x00	; 0
   1ee88:	f8 01       	movw	r30, r16
   1ee8a:	ea 53       	subi	r30, 0x3A	; 58
   1ee8c:	f3 47       	sbci	r31, 0x73	; 115
   1ee8e:	64 91       	lpm	r22, Z
   1ee90:	f5 01       	movw	r30, r10
   1ee92:	47 81       	ldd	r20, Z+7	; 0x07
   1ee94:	c5 01       	movw	r24, r10
   1ee96:	0e 94 dc f3 	call	0x1e7b8	; 0x1e7b8 <RF24::write_register(unsigned char, unsigned char)>
   1ee9a:	62 e0       	ldi	r22, 0x02	; 2
   1ee9c:	c5 01       	movw	r24, r10
   1ee9e:	0e 94 9d f3 	call	0x1e73a	; 0x1e73a <RF24::read_register(unsigned char)>
   1eea2:	f8 01       	movw	r30, r16
   1eea4:	ee 52       	subi	r30, 0x2E	; 46
   1eea6:	f3 47       	sbci	r31, 0x73	; 115
   1eea8:	e4 91       	lpm	r30, Z
   1eeaa:	41 e0       	ldi	r20, 0x01	; 1
   1eeac:	50 e0       	ldi	r21, 0x00	; 0
   1eeae:	01 c0       	rjmp	.+2      	; 0x1eeb2 <RF24::openReadingPipe(unsigned char, unsigned long long)+0x90>
   1eeb0:	44 0f       	add	r20, r20
   1eeb2:	ea 95       	dec	r30
   1eeb4:	ea f7       	brpl	.-6      	; 0x1eeb0 <RF24::openReadingPipe(unsigned char, unsigned long long)+0x8e>
   1eeb6:	48 2b       	or	r20, r24
   1eeb8:	62 e0       	ldi	r22, 0x02	; 2
   1eeba:	c5 01       	movw	r24, r10
   1eebc:	0e 94 dc f3 	call	0x1e7b8	; 0x1e7b8 <RF24::write_register(unsigned char, unsigned char)>
   1eec0:	28 96       	adiw	r28, 0x08	; 8
   1eec2:	0f b6       	in	r0, 0x3f	; 63
   1eec4:	f8 94       	cli
   1eec6:	de bf       	out	0x3e, r29	; 62
   1eec8:	0f be       	out	0x3f, r0	; 63
   1eeca:	cd bf       	out	0x3d, r28	; 61
   1eecc:	df 91       	pop	r29
   1eece:	cf 91       	pop	r28
   1eed0:	1f 91       	pop	r17
   1eed2:	0f 91       	pop	r16
   1eed4:	ff 90       	pop	r15
   1eed6:	ef 90       	pop	r14
   1eed8:	df 90       	pop	r13
   1eeda:	bf 90       	pop	r11
   1eedc:	af 90       	pop	r10
   1eede:	08 95       	ret
   1eee0:	f6 e0       	ldi	r31, 0x06	; 6
   1eee2:	f6 17       	cp	r31, r22
   1eee4:	68 f3       	brcs	.-38     	; 0x1eec0 <RF24::openReadingPipe(unsigned char, unsigned long long)+0x9e>
   1eee6:	e6 2f       	mov	r30, r22
   1eee8:	f0 e0       	ldi	r31, 0x00	; 0
   1eeea:	e4 53       	subi	r30, 0x34	; 52
   1eeec:	f3 47       	sbci	r31, 0x73	; 115
   1eeee:	81 e0       	ldi	r24, 0x01	; 1
   1eef0:	68 17       	cp	r22, r24
   1eef2:	09 f4       	brne	.+2      	; 0x1eef6 <RF24::openReadingPipe(unsigned char, unsigned long long)+0xd4>
   1eef4:	ba cf       	rjmp	.-140    	; 0x1ee6a <RF24::openReadingPipe(unsigned char, unsigned long long)+0x48>
   1eef6:	64 91       	lpm	r22, Z
   1eef8:	21 e0       	ldi	r18, 0x01	; 1
   1eefa:	be cf       	rjmp	.-132    	; 0x1ee78 <RF24::openReadingPipe(unsigned char, unsigned long long)+0x56>

0001eefc <RF24::closeReadingPipe(unsigned char)>:
_ZN4RF2416closeReadingPipeEh():
   1eefc:	1f 93       	push	r17
   1eefe:	cf 93       	push	r28
   1ef00:	df 93       	push	r29
   1ef02:	ec 01       	movw	r28, r24
   1ef04:	16 2f       	mov	r17, r22
   1ef06:	62 e0       	ldi	r22, 0x02	; 2
   1ef08:	0e 94 9d f3 	call	0x1e73a	; 0x1e73a <RF24::read_register(unsigned char)>
   1ef0c:	e1 2f       	mov	r30, r17
   1ef0e:	f0 e0       	ldi	r31, 0x00	; 0
   1ef10:	ee 52       	subi	r30, 0x2E	; 46
   1ef12:	f3 47       	sbci	r31, 0x73	; 115
   1ef14:	e4 91       	lpm	r30, Z
   1ef16:	21 e0       	ldi	r18, 0x01	; 1
   1ef18:	30 e0       	ldi	r19, 0x00	; 0
   1ef1a:	01 c0       	rjmp	.+2      	; 0x1ef1e <RF24::closeReadingPipe(unsigned char)+0x22>
   1ef1c:	22 0f       	add	r18, r18
   1ef1e:	ea 95       	dec	r30
   1ef20:	ea f7       	brpl	.-6      	; 0x1ef1c <RF24::closeReadingPipe(unsigned char)+0x20>
   1ef22:	20 95       	com	r18
   1ef24:	42 2f       	mov	r20, r18
   1ef26:	48 23       	and	r20, r24
   1ef28:	62 e0       	ldi	r22, 0x02	; 2
   1ef2a:	ce 01       	movw	r24, r28
   1ef2c:	df 91       	pop	r29
   1ef2e:	cf 91       	pop	r28
   1ef30:	1f 91       	pop	r17
   1ef32:	0c 94 dc f3 	jmp	0x1e7b8	; 0x1e7b8 <RF24::write_register(unsigned char, unsigned char)>

0001ef36 <RF24::startListening()>:
_ZN4RF2414startListeningEv():
   1ef36:	cf 93       	push	r28
   1ef38:	df 93       	push	r29
   1ef3a:	ec 01       	movw	r28, r24
   1ef3c:	0e 94 d7 f5 	call	0x1ebae	; 0x1ebae <RF24::powerUp()>
   1ef40:	60 e0       	ldi	r22, 0x00	; 0
   1ef42:	ce 01       	movw	r24, r28
   1ef44:	0e 94 9d f3 	call	0x1e73a	; 0x1e73a <RF24::read_register(unsigned char)>
   1ef48:	48 2f       	mov	r20, r24
   1ef4a:	41 60       	ori	r20, 0x01	; 1
   1ef4c:	60 e0       	ldi	r22, 0x00	; 0
   1ef4e:	ce 01       	movw	r24, r28
   1ef50:	0e 94 dc f3 	call	0x1e7b8	; 0x1e7b8 <RF24::write_register(unsigned char, unsigned char)>
   1ef54:	40 e7       	ldi	r20, 0x70	; 112
   1ef56:	67 e0       	ldi	r22, 0x07	; 7
   1ef58:	ce 01       	movw	r24, r28
   1ef5a:	0e 94 dc f3 	call	0x1e7b8	; 0x1e7b8 <RF24::write_register(unsigned char, unsigned char)>
   1ef5e:	61 e0       	ldi	r22, 0x01	; 1
   1ef60:	ce 01       	movw	r24, r28
   1ef62:	0e 94 63 f3 	call	0x1e6c6	; 0x1e6c6 <RF24::ce(bool)>
   1ef66:	89 85       	ldd	r24, Y+9	; 0x09
   1ef68:	88 23       	and	r24, r24
   1ef6a:	99 f0       	breq	.+38     	; 0x1ef92 <RF24::startListening()+0x5c>
   1ef6c:	2e 85       	ldd	r18, Y+14	; 0x0e
   1ef6e:	ae 01       	movw	r20, r28
   1ef70:	47 5f       	subi	r20, 0xF7	; 247
   1ef72:	5f 4f       	sbci	r21, 0xFF	; 255
   1ef74:	6a e0       	ldi	r22, 0x0A	; 10
   1ef76:	ce 01       	movw	r24, r28
   1ef78:	0e 94 b4 f3 	call	0x1e768	; 0x1e768 <RF24::write_register(unsigned char, unsigned char const*, unsigned char)>
   1ef7c:	6d e1       	ldi	r22, 0x1D	; 29
   1ef7e:	ce 01       	movw	r24, r28
   1ef80:	0e 94 9d f3 	call	0x1e73a	; 0x1e73a <RF24::read_register(unsigned char)>
   1ef84:	81 ff       	sbrs	r24, 1
   1ef86:	0a c0       	rjmp	.+20     	; 0x1ef9c <RF24::startListening()+0x66>
   1ef88:	ce 01       	movw	r24, r28
   1ef8a:	df 91       	pop	r29
   1ef8c:	cf 91       	pop	r28
   1ef8e:	0c 94 87 f4 	jmp	0x1e90e	; 0x1e90e <RF24::flush_tx()>
   1ef92:	60 e0       	ldi	r22, 0x00	; 0
   1ef94:	ce 01       	movw	r24, r28
   1ef96:	0e 94 7e f7 	call	0x1eefc	; 0x1eefc <RF24::closeReadingPipe(unsigned char)>
   1ef9a:	f0 cf       	rjmp	.-32     	; 0x1ef7c <RF24::startListening()+0x46>
   1ef9c:	df 91       	pop	r29
   1ef9e:	cf 91       	pop	r28
   1efa0:	08 95       	ret

0001efa2 <RF24::toggle_features()>:
_ZN4RF2415toggle_featuresEv():
   1efa2:	cf 93       	push	r28
   1efa4:	df 93       	push	r29
   1efa6:	ec 01       	movw	r28, r24
   1efa8:	0e 94 6f f3 	call	0x1e6de	; 0x1e6de <RF24::beginTransaction()>
   1efac:	80 e5       	ldi	r24, 0x50	; 80
   1efae:	0e 94 c8 e1 	call	0x1c390	; 0x1c390 <SPIClass::transfer(unsigned char)>
   1efb2:	83 e7       	ldi	r24, 0x73	; 115
   1efb4:	0e 94 c8 e1 	call	0x1c390	; 0x1c390 <SPIClass::transfer(unsigned char)>
   1efb8:	ce 01       	movw	r24, r28
   1efba:	df 91       	pop	r29
   1efbc:	cf 91       	pop	r28
   1efbe:	0c 94 72 f3 	jmp	0x1e6e4	; 0x1e6e4 <RF24::endTransaction()>

0001efc2 <RF24::enableDynamicPayloads()>:
_ZN4RF2421enableDynamicPayloadsEv():
   1efc2:	cf 93       	push	r28
   1efc4:	df 93       	push	r29
   1efc6:	ec 01       	movw	r28, r24
   1efc8:	6d e1       	ldi	r22, 0x1D	; 29
   1efca:	0e 94 9d f3 	call	0x1e73a	; 0x1e73a <RF24::read_register(unsigned char)>
   1efce:	48 2f       	mov	r20, r24
   1efd0:	44 60       	ori	r20, 0x04	; 4
   1efd2:	6d e1       	ldi	r22, 0x1D	; 29
   1efd4:	ce 01       	movw	r24, r28
   1efd6:	0e 94 dc f3 	call	0x1e7b8	; 0x1e7b8 <RF24::write_register(unsigned char, unsigned char)>
   1efda:	6c e1       	ldi	r22, 0x1C	; 28
   1efdc:	ce 01       	movw	r24, r28
   1efde:	0e 94 9d f3 	call	0x1e73a	; 0x1e73a <RF24::read_register(unsigned char)>
   1efe2:	48 2f       	mov	r20, r24
   1efe4:	4f 63       	ori	r20, 0x3F	; 63
   1efe6:	6c e1       	ldi	r22, 0x1C	; 28
   1efe8:	ce 01       	movw	r24, r28
   1efea:	0e 94 dc f3 	call	0x1e7b8	; 0x1e7b8 <RF24::write_register(unsigned char, unsigned char)>
   1efee:	81 e0       	ldi	r24, 0x01	; 1
   1eff0:	88 87       	std	Y+8, r24	; 0x08
   1eff2:	df 91       	pop	r29
   1eff4:	cf 91       	pop	r28
   1eff6:	08 95       	ret

0001eff8 <RF24::enableAckPayload()>:
_ZN4RF2416enableAckPayloadEv():
   1eff8:	cf 93       	push	r28
   1effa:	df 93       	push	r29
   1effc:	ec 01       	movw	r28, r24
   1effe:	6d e1       	ldi	r22, 0x1D	; 29
   1f000:	0e 94 9d f3 	call	0x1e73a	; 0x1e73a <RF24::read_register(unsigned char)>
   1f004:	48 2f       	mov	r20, r24
   1f006:	46 60       	ori	r20, 0x06	; 6
   1f008:	6d e1       	ldi	r22, 0x1D	; 29
   1f00a:	ce 01       	movw	r24, r28
   1f00c:	0e 94 dc f3 	call	0x1e7b8	; 0x1e7b8 <RF24::write_register(unsigned char, unsigned char)>
   1f010:	6c e1       	ldi	r22, 0x1C	; 28
   1f012:	ce 01       	movw	r24, r28
   1f014:	0e 94 9d f3 	call	0x1e73a	; 0x1e73a <RF24::read_register(unsigned char)>
   1f018:	48 2f       	mov	r20, r24
   1f01a:	43 60       	ori	r20, 0x03	; 3
   1f01c:	6c e1       	ldi	r22, 0x1C	; 28
   1f01e:	ce 01       	movw	r24, r28
   1f020:	0e 94 dc f3 	call	0x1e7b8	; 0x1e7b8 <RF24::write_register(unsigned char, unsigned char)>
   1f024:	81 e0       	ldi	r24, 0x01	; 1
   1f026:	88 87       	std	Y+8, r24	; 0x08
   1f028:	df 91       	pop	r29
   1f02a:	cf 91       	pop	r28
   1f02c:	08 95       	ret

0001f02e <RF24::setAutoAck(unsigned char, bool)>:
_ZN4RF2410setAutoAckEhb():
   1f02e:	0f 93       	push	r16
   1f030:	1f 93       	push	r17
   1f032:	cf 93       	push	r28
   1f034:	df 93       	push	r29
   1f036:	67 30       	cpi	r22, 0x07	; 7
   1f038:	d8 f4       	brcc	.+54     	; 0x1f070 <RF24::setAutoAck(unsigned char, bool)+0x42>
   1f03a:	04 2f       	mov	r16, r20
   1f03c:	16 2f       	mov	r17, r22
   1f03e:	ec 01       	movw	r28, r24
   1f040:	61 e0       	ldi	r22, 0x01	; 1
   1f042:	0e 94 9d f3 	call	0x1e73a	; 0x1e73a <RF24::read_register(unsigned char)>
   1f046:	21 e0       	ldi	r18, 0x01	; 1
   1f048:	30 e0       	ldi	r19, 0x00	; 0
   1f04a:	01 c0       	rjmp	.+2      	; 0x1f04e <RF24::setAutoAck(unsigned char, bool)+0x20>
   1f04c:	22 0f       	add	r18, r18
   1f04e:	1a 95       	dec	r17
   1f050:	ea f7       	brpl	.-6      	; 0x1f04c <RF24::setAutoAck(unsigned char, bool)+0x1e>
   1f052:	00 23       	and	r16, r16
   1f054:	51 f0       	breq	.+20     	; 0x1f06a <RF24::setAutoAck(unsigned char, bool)+0x3c>
   1f056:	28 2b       	or	r18, r24
   1f058:	42 2f       	mov	r20, r18
   1f05a:	61 e0       	ldi	r22, 0x01	; 1
   1f05c:	ce 01       	movw	r24, r28
   1f05e:	df 91       	pop	r29
   1f060:	cf 91       	pop	r28
   1f062:	1f 91       	pop	r17
   1f064:	0f 91       	pop	r16
   1f066:	0c 94 dc f3 	jmp	0x1e7b8	; 0x1e7b8 <RF24::write_register(unsigned char, unsigned char)>
   1f06a:	20 95       	com	r18
   1f06c:	28 23       	and	r18, r24
   1f06e:	f4 cf       	rjmp	.-24     	; 0x1f058 <RF24::setAutoAck(unsigned char, bool)+0x2a>
   1f070:	df 91       	pop	r29
   1f072:	cf 91       	pop	r28
   1f074:	1f 91       	pop	r17
   1f076:	0f 91       	pop	r16
   1f078:	08 95       	ret

0001f07a <RF24::testCarrier()>:
_ZN4RF2411testCarrierEv():
   1f07a:	69 e0       	ldi	r22, 0x09	; 9
   1f07c:	0e 94 9d f3 	call	0x1e73a	; 0x1e73a <RF24::read_register(unsigned char)>
   1f080:	81 70       	andi	r24, 0x01	; 1
   1f082:	08 95       	ret

0001f084 <RF24::setPALevel(unsigned char)>:
_ZN4RF2410setPALevelEh():
   1f084:	0f 93       	push	r16
   1f086:	1f 93       	push	r17
   1f088:	cf 93       	push	r28
   1f08a:	8c 01       	movw	r16, r24
   1f08c:	c6 2f       	mov	r28, r22
   1f08e:	66 e0       	ldi	r22, 0x06	; 6
   1f090:	0e 94 9d f3 	call	0x1e73a	; 0x1e73a <RF24::read_register(unsigned char)>
   1f094:	88 7f       	andi	r24, 0xF8	; 248
   1f096:	c4 30       	cpi	r28, 0x04	; 4
   1f098:	58 f4       	brcc	.+22     	; 0x1f0b0 <RF24::setPALevel(unsigned char)+0x2c>
   1f09a:	cc 0f       	add	r28, r28
   1f09c:	cf 5f       	subi	r28, 0xFF	; 255
   1f09e:	4c 2f       	mov	r20, r28
   1f0a0:	48 2b       	or	r20, r24
   1f0a2:	66 e0       	ldi	r22, 0x06	; 6
   1f0a4:	c8 01       	movw	r24, r16
   1f0a6:	cf 91       	pop	r28
   1f0a8:	1f 91       	pop	r17
   1f0aa:	0f 91       	pop	r16
   1f0ac:	0c 94 dc f3 	jmp	0x1e7b8	; 0x1e7b8 <RF24::write_register(unsigned char, unsigned char)>
   1f0b0:	c7 e0       	ldi	r28, 0x07	; 7
   1f0b2:	f5 cf       	rjmp	.-22     	; 0x1f09e <RF24::setPALevel(unsigned char)+0x1a>

0001f0b4 <RF24::getPALevel()>:
_ZN4RF2410getPALevelEv():
   1f0b4:	66 e0       	ldi	r22, 0x06	; 6
   1f0b6:	0e 94 9d f3 	call	0x1e73a	; 0x1e73a <RF24::read_register(unsigned char)>
   1f0ba:	90 e0       	ldi	r25, 0x00	; 0
   1f0bc:	95 95       	asr	r25
   1f0be:	87 95       	ror	r24
   1f0c0:	83 70       	andi	r24, 0x03	; 3
   1f0c2:	08 95       	ret

0001f0c4 <RF24::setDataRate(rf24_datarate_e)>:
_ZN4RF2411setDataRateE15rf24_datarate_e():
   1f0c4:	ef 92       	push	r14
   1f0c6:	ff 92       	push	r15
   1f0c8:	0f 93       	push	r16
   1f0ca:	1f 93       	push	r17
   1f0cc:	cf 93       	push	r28
   1f0ce:	8c 01       	movw	r16, r24
   1f0d0:	7b 01       	movw	r14, r22
   1f0d2:	66 e0       	ldi	r22, 0x06	; 6
   1f0d4:	0e 94 9d f3 	call	0x1e73a	; 0x1e73a <RF24::read_register(unsigned char)>
   1f0d8:	c8 2f       	mov	r28, r24
   1f0da:	c7 7d       	andi	r28, 0xD7	; 215
   1f0dc:	82 e0       	ldi	r24, 0x02	; 2
   1f0de:	e8 16       	cp	r14, r24
   1f0e0:	f1 04       	cpc	r15, r1
   1f0e2:	e9 f4       	brne	.+58     	; 0x1f11e <RF24::setDataRate(rf24_datarate_e)+0x5a>
   1f0e4:	c0 62       	ori	r28, 0x20	; 32
   1f0e6:	8b e9       	ldi	r24, 0x9B	; 155
   1f0e8:	90 e0       	ldi	r25, 0x00	; 0
   1f0ea:	a0 e0       	ldi	r26, 0x00	; 0
   1f0ec:	b0 e0       	ldi	r27, 0x00	; 0
   1f0ee:	f8 01       	movw	r30, r16
   1f0f0:	80 8b       	std	Z+16, r24	; 0x10
   1f0f2:	91 8b       	std	Z+17, r25	; 0x11
   1f0f4:	a2 8b       	std	Z+18, r26	; 0x12
   1f0f6:	b3 8b       	std	Z+19, r27	; 0x13
   1f0f8:	4c 2f       	mov	r20, r28
   1f0fa:	66 e0       	ldi	r22, 0x06	; 6
   1f0fc:	c8 01       	movw	r24, r16
   1f0fe:	0e 94 dc f3 	call	0x1e7b8	; 0x1e7b8 <RF24::write_register(unsigned char, unsigned char)>
   1f102:	66 e0       	ldi	r22, 0x06	; 6
   1f104:	c8 01       	movw	r24, r16
   1f106:	0e 94 9d f3 	call	0x1e73a	; 0x1e73a <RF24::read_register(unsigned char)>
   1f10a:	91 e0       	ldi	r25, 0x01	; 1
   1f10c:	8c 13       	cpse	r24, r28
   1f10e:	90 e0       	ldi	r25, 0x00	; 0
   1f110:	89 2f       	mov	r24, r25
   1f112:	cf 91       	pop	r28
   1f114:	1f 91       	pop	r17
   1f116:	0f 91       	pop	r16
   1f118:	ff 90       	pop	r15
   1f11a:	ef 90       	pop	r14
   1f11c:	08 95       	ret
   1f11e:	85 e5       	ldi	r24, 0x55	; 85
   1f120:	90 e0       	ldi	r25, 0x00	; 0
   1f122:	a0 e0       	ldi	r26, 0x00	; 0
   1f124:	b0 e0       	ldi	r27, 0x00	; 0
   1f126:	ea 94       	dec	r14
   1f128:	ef 28       	or	r14, r15
   1f12a:	09 f7       	brne	.-62     	; 0x1f0ee <RF24::setDataRate(rf24_datarate_e)+0x2a>
   1f12c:	c8 60       	ori	r28, 0x08	; 8
   1f12e:	81 e4       	ldi	r24, 0x41	; 65
   1f130:	90 e0       	ldi	r25, 0x00	; 0
   1f132:	a0 e0       	ldi	r26, 0x00	; 0
   1f134:	b0 e0       	ldi	r27, 0x00	; 0
   1f136:	db cf       	rjmp	.-74     	; 0x1f0ee <RF24::setDataRate(rf24_datarate_e)+0x2a>

0001f138 <RF24::begin()>:
_ZN4RF245beginEv():
   1f138:	1f 93       	push	r17
   1f13a:	cf 93       	push	r28
   1f13c:	df 93       	push	r29
   1f13e:	ec 01       	movw	r28, r24
   1f140:	88 81       	ld	r24, Y
   1f142:	99 81       	ldd	r25, Y+1	; 0x01
   1f144:	2a 81       	ldd	r18, Y+2	; 0x02
   1f146:	3b 81       	ldd	r19, Y+3	; 0x03
   1f148:	82 17       	cp	r24, r18
   1f14a:	93 07       	cpc	r25, r19
   1f14c:	19 f0       	breq	.+6      	; 0x1f154 <RF24::begin()+0x1c>
   1f14e:	61 e0       	ldi	r22, 0x01	; 1
   1f150:	0f 94 24 10 	call	0x22048	; 0x22048 <pinMode>
   1f154:	8a 81       	ldd	r24, Y+2	; 0x02
   1f156:	9b 81       	ldd	r25, Y+3	; 0x03
   1f158:	28 81       	ld	r18, Y
   1f15a:	39 81       	ldd	r19, Y+1	; 0x01
   1f15c:	28 17       	cp	r18, r24
   1f15e:	39 07       	cpc	r19, r25
   1f160:	19 f0       	breq	.+6      	; 0x1f168 <RF24::begin()+0x30>
   1f162:	61 e0       	ldi	r22, 0x01	; 1
   1f164:	0f 94 24 10 	call	0x22048	; 0x22048 <pinMode>
   1f168:	0e 94 9f d4 	call	0x1a93e	; 0x1a93e <SPIClass::begin()>
   1f16c:	60 e0       	ldi	r22, 0x00	; 0
   1f16e:	ce 01       	movw	r24, r28
   1f170:	0e 94 63 f3 	call	0x1e6c6	; 0x1e6c6 <RF24::ce(bool)>
   1f174:	61 e0       	ldi	r22, 0x01	; 1
   1f176:	ce 01       	movw	r24, r28
   1f178:	0e 94 4b f3 	call	0x1e696	; 0x1e696 <RF24::csn(bool)>
   1f17c:	65 e0       	ldi	r22, 0x05	; 5
   1f17e:	70 e0       	ldi	r23, 0x00	; 0
   1f180:	80 e0       	ldi	r24, 0x00	; 0
   1f182:	90 e0       	ldi	r25, 0x00	; 0
   1f184:	0f 94 33 0f 	call	0x21e66	; 0x21e66 <delay>
   1f188:	4c e0       	ldi	r20, 0x0C	; 12
   1f18a:	60 e0       	ldi	r22, 0x00	; 0
   1f18c:	ce 01       	movw	r24, r28
   1f18e:	0e 94 dc f3 	call	0x1e7b8	; 0x1e7b8 <RF24::write_register(unsigned char, unsigned char)>
_ZN4RF2410setRetriesEhh():
   1f192:	4f e5       	ldi	r20, 0x5F	; 95
   1f194:	64 e0       	ldi	r22, 0x04	; 4
   1f196:	ce 01       	movw	r24, r28
   1f198:	0e 94 dc f3 	call	0x1e7b8	; 0x1e7b8 <RF24::write_register(unsigned char, unsigned char)>
_ZN4RF245beginEv():
   1f19c:	60 e0       	ldi	r22, 0x00	; 0
   1f19e:	ce 01       	movw	r24, r28
   1f1a0:	0e 94 42 f8 	call	0x1f084	; 0x1f084 <RF24::setPALevel(unsigned char)>
   1f1a4:	62 e0       	ldi	r22, 0x02	; 2
   1f1a6:	70 e0       	ldi	r23, 0x00	; 0
   1f1a8:	ce 01       	movw	r24, r28
   1f1aa:	0e 94 62 f8 	call	0x1f0c4	; 0x1f0c4 <RF24::setDataRate(rf24_datarate_e)>
   1f1ae:	88 23       	and	r24, r24
   1f1b0:	11 f0       	breq	.+4      	; 0x1f1b6 <RF24::begin()+0x7e>
   1f1b2:	81 e0       	ldi	r24, 0x01	; 1
   1f1b4:	8e 83       	std	Y+6, r24	; 0x06
   1f1b6:	66 e0       	ldi	r22, 0x06	; 6
   1f1b8:	ce 01       	movw	r24, r28
   1f1ba:	0e 94 9d f3 	call	0x1e73a	; 0x1e73a <RF24::read_register(unsigned char)>
   1f1be:	18 2f       	mov	r17, r24
   1f1c0:	70 e0       	ldi	r23, 0x00	; 0
   1f1c2:	60 e0       	ldi	r22, 0x00	; 0
   1f1c4:	ce 01       	movw	r24, r28
   1f1c6:	0e 94 62 f8 	call	0x1f0c4	; 0x1f0c4 <RF24::setDataRate(rf24_datarate_e)>
   1f1ca:	ce 01       	movw	r24, r28
   1f1cc:	0e 94 d1 f7 	call	0x1efa2	; 0x1efa2 <RF24::toggle_features()>
   1f1d0:	40 e0       	ldi	r20, 0x00	; 0
   1f1d2:	6d e1       	ldi	r22, 0x1D	; 29
   1f1d4:	ce 01       	movw	r24, r28
   1f1d6:	0e 94 dc f3 	call	0x1e7b8	; 0x1e7b8 <RF24::write_register(unsigned char, unsigned char)>
   1f1da:	40 e0       	ldi	r20, 0x00	; 0
   1f1dc:	6c e1       	ldi	r22, 0x1C	; 28
   1f1de:	ce 01       	movw	r24, r28
   1f1e0:	0e 94 dc f3 	call	0x1e7b8	; 0x1e7b8 <RF24::write_register(unsigned char, unsigned char)>
   1f1e4:	18 86       	std	Y+8, r1	; 0x08
   1f1e6:	40 e7       	ldi	r20, 0x70	; 112
   1f1e8:	67 e0       	ldi	r22, 0x07	; 7
   1f1ea:	ce 01       	movw	r24, r28
   1f1ec:	0e 94 dc f3 	call	0x1e7b8	; 0x1e7b8 <RF24::write_register(unsigned char, unsigned char)>
   1f1f0:	6c e4       	ldi	r22, 0x4C	; 76
   1f1f2:	ce 01       	movw	r24, r28
   1f1f4:	0e 94 9b f5 	call	0x1eb36	; 0x1eb36 <RF24::setChannel(unsigned char)>
   1f1f8:	ce 01       	movw	r24, r28
   1f1fa:	0e 94 84 f4 	call	0x1e908	; 0x1e908 <RF24::flush_rx()>
   1f1fe:	ce 01       	movw	r24, r28
   1f200:	0e 94 87 f4 	call	0x1e90e	; 0x1e90e <RF24::flush_tx()>
   1f204:	ce 01       	movw	r24, r28
   1f206:	0e 94 d7 f5 	call	0x1ebae	; 0x1ebae <RF24::powerUp()>
   1f20a:	60 e0       	ldi	r22, 0x00	; 0
   1f20c:	ce 01       	movw	r24, r28
   1f20e:	0e 94 9d f3 	call	0x1e73a	; 0x1e73a <RF24::read_register(unsigned char)>
   1f212:	48 2f       	mov	r20, r24
   1f214:	4e 7f       	andi	r20, 0xFE	; 254
   1f216:	60 e0       	ldi	r22, 0x00	; 0
   1f218:	ce 01       	movw	r24, r28
   1f21a:	0e 94 dc f3 	call	0x1e7b8	; 0x1e7b8 <RF24::write_register(unsigned char, unsigned char)>
   1f21e:	64 e6       	ldi	r22, 0x64	; 100
   1f220:	70 e0       	ldi	r23, 0x00	; 0
   1f222:	80 e0       	ldi	r24, 0x00	; 0
   1f224:	90 e0       	ldi	r25, 0x00	; 0
   1f226:	0f 94 33 0f 	call	0x21e66	; 0x21e66 <delay>
   1f22a:	11 50       	subi	r17, 0x01	; 1
   1f22c:	81 e0       	ldi	r24, 0x01	; 1
   1f22e:	1e 3f       	cpi	r17, 0xFE	; 254
   1f230:	08 f0       	brcs	.+2      	; 0x1f234 <RF24::begin()+0xfc>
   1f232:	80 e0       	ldi	r24, 0x00	; 0
   1f234:	df 91       	pop	r29
   1f236:	cf 91       	pop	r28
   1f238:	1f 91       	pop	r17
   1f23a:	08 95       	ret

0001f23c <RF24::getDataRate()>:
_ZN4RF2411getDataRateEv():
   1f23c:	66 e0       	ldi	r22, 0x06	; 6
   1f23e:	0e 94 9d f3 	call	0x1e73a	; 0x1e73a <RF24::read_register(unsigned char)>
   1f242:	28 2f       	mov	r18, r24
   1f244:	28 72       	andi	r18, 0x28	; 40
   1f246:	20 32       	cpi	r18, 0x20	; 32
   1f248:	31 f0       	breq	.+12     	; 0x1f256 <RF24::getDataRate()+0x1a>
   1f24a:	81 e0       	ldi	r24, 0x01	; 1
   1f24c:	90 e0       	ldi	r25, 0x00	; 0
   1f24e:	28 30       	cpi	r18, 0x08	; 8
   1f250:	21 f0       	breq	.+8      	; 0x1f25a <RF24::getDataRate()+0x1e>
   1f252:	80 e0       	ldi	r24, 0x00	; 0
   1f254:	08 95       	ret
   1f256:	82 e0       	ldi	r24, 0x02	; 2
   1f258:	90 e0       	ldi	r25, 0x00	; 0
   1f25a:	08 95       	ret

0001f25c <RF24::getCRCLength()>:
_ZN4RF2412getCRCLengthEv():
   1f25c:	0f 93       	push	r16
   1f25e:	1f 93       	push	r17
   1f260:	cf 93       	push	r28
   1f262:	8c 01       	movw	r16, r24
   1f264:	60 e0       	ldi	r22, 0x00	; 0
   1f266:	0e 94 9d f3 	call	0x1e73a	; 0x1e73a <RF24::read_register(unsigned char)>
   1f26a:	c8 2f       	mov	r28, r24
   1f26c:	61 e0       	ldi	r22, 0x01	; 1
   1f26e:	c8 01       	movw	r24, r16
   1f270:	0e 94 9d f3 	call	0x1e73a	; 0x1e73a <RF24::read_register(unsigned char)>
   1f274:	c3 fd       	sbrc	r28, 3
   1f276:	02 c0       	rjmp	.+4      	; 0x1f27c <RF24::getCRCLength()+0x20>
   1f278:	88 23       	and	r24, r24
   1f27a:	39 f0       	breq	.+14     	; 0x1f28a <RF24::getCRCLength()+0x2e>
   1f27c:	81 e0       	ldi	r24, 0x01	; 1
   1f27e:	90 e0       	ldi	r25, 0x00	; 0
   1f280:	c2 ff       	sbrs	r28, 2
   1f282:	05 c0       	rjmp	.+10     	; 0x1f28e <RF24::getCRCLength()+0x32>
   1f284:	82 e0       	ldi	r24, 0x02	; 2
   1f286:	90 e0       	ldi	r25, 0x00	; 0
   1f288:	02 c0       	rjmp	.+4      	; 0x1f28e <RF24::getCRCLength()+0x32>
   1f28a:	90 e0       	ldi	r25, 0x00	; 0
   1f28c:	80 e0       	ldi	r24, 0x00	; 0
   1f28e:	cf 91       	pop	r28
   1f290:	1f 91       	pop	r17
   1f292:	0f 91       	pop	r16
   1f294:	08 95       	ret

0001f296 <RF24::printDetails()>:
_ZN4RF2412printDetailsEv():
   1f296:	cf 93       	push	r28
   1f298:	df 93       	push	r29
   1f29a:	ec 01       	movw	r28, r24
   1f29c:	0e 94 8a f4 	call	0x1e914	; 0x1e914 <RF24::get_status()>
   1f2a0:	68 2f       	mov	r22, r24
   1f2a2:	ce 01       	movw	r24, r28
   1f2a4:	0e 94 8d f4 	call	0x1e91a	; 0x1e91a <RF24::print_status(unsigned char)>
   1f2a8:	22 e0       	ldi	r18, 0x02	; 2
   1f2aa:	4a e0       	ldi	r20, 0x0A	; 10
   1f2ac:	65 e7       	ldi	r22, 0x75	; 117
   1f2ae:	7d e8       	ldi	r23, 0x8D	; 141
   1f2b0:	ce 01       	movw	r24, r28
   1f2b2:	0e 94 f8 f4 	call	0x1e9f0	; 0x1e9f0 <RF24::print_address_register(char const*, unsigned char, unsigned char)>
   1f2b6:	24 e0       	ldi	r18, 0x04	; 4
   1f2b8:	4c e0       	ldi	r20, 0x0C	; 12
   1f2ba:	68 e6       	ldi	r22, 0x68	; 104
   1f2bc:	7d e8       	ldi	r23, 0x8D	; 141
   1f2be:	ce 01       	movw	r24, r28
   1f2c0:	0e 94 ba f4 	call	0x1e974	; 0x1e974 <RF24::print_byte_register(char const*, unsigned char, unsigned char)>
   1f2c4:	21 e0       	ldi	r18, 0x01	; 1
   1f2c6:	40 e1       	ldi	r20, 0x10	; 16
   1f2c8:	6f e5       	ldi	r22, 0x5F	; 95
   1f2ca:	7d e8       	ldi	r23, 0x8D	; 141
   1f2cc:	ce 01       	movw	r24, r28
   1f2ce:	0e 94 f8 f4 	call	0x1e9f0	; 0x1e9f0 <RF24::print_address_register(char const*, unsigned char, unsigned char)>
   1f2d2:	26 e0       	ldi	r18, 0x06	; 6
   1f2d4:	41 e1       	ldi	r20, 0x11	; 17
   1f2d6:	64 e5       	ldi	r22, 0x54	; 84
   1f2d8:	7d e8       	ldi	r23, 0x8D	; 141
   1f2da:	ce 01       	movw	r24, r28
   1f2dc:	0e 94 ba f4 	call	0x1e974	; 0x1e974 <RF24::print_byte_register(char const*, unsigned char, unsigned char)>
   1f2e0:	21 e0       	ldi	r18, 0x01	; 1
   1f2e2:	41 e0       	ldi	r20, 0x01	; 1
   1f2e4:	6d e4       	ldi	r22, 0x4D	; 77
   1f2e6:	7d e8       	ldi	r23, 0x8D	; 141
   1f2e8:	ce 01       	movw	r24, r28
   1f2ea:	0e 94 ba f4 	call	0x1e974	; 0x1e974 <RF24::print_byte_register(char const*, unsigned char, unsigned char)>
   1f2ee:	21 e0       	ldi	r18, 0x01	; 1
   1f2f0:	42 e0       	ldi	r20, 0x02	; 2
   1f2f2:	63 e4       	ldi	r22, 0x43	; 67
   1f2f4:	7d e8       	ldi	r23, 0x8D	; 141
   1f2f6:	ce 01       	movw	r24, r28
   1f2f8:	0e 94 ba f4 	call	0x1e974	; 0x1e974 <RF24::print_byte_register(char const*, unsigned char, unsigned char)>
   1f2fc:	21 e0       	ldi	r18, 0x01	; 1
   1f2fe:	45 e0       	ldi	r20, 0x05	; 5
   1f300:	6c e3       	ldi	r22, 0x3C	; 60
   1f302:	7d e8       	ldi	r23, 0x8D	; 141
   1f304:	ce 01       	movw	r24, r28
   1f306:	0e 94 ba f4 	call	0x1e974	; 0x1e974 <RF24::print_byte_register(char const*, unsigned char, unsigned char)>
   1f30a:	21 e0       	ldi	r18, 0x01	; 1
   1f30c:	46 e0       	ldi	r20, 0x06	; 6
   1f30e:	63 e3       	ldi	r22, 0x33	; 51
   1f310:	7d e8       	ldi	r23, 0x8D	; 141
   1f312:	ce 01       	movw	r24, r28
   1f314:	0e 94 ba f4 	call	0x1e974	; 0x1e974 <RF24::print_byte_register(char const*, unsigned char, unsigned char)>
   1f318:	21 e0       	ldi	r18, 0x01	; 1
   1f31a:	40 e0       	ldi	r20, 0x00	; 0
   1f31c:	6b e2       	ldi	r22, 0x2B	; 43
   1f31e:	7d e8       	ldi	r23, 0x8D	; 141
   1f320:	ce 01       	movw	r24, r28
   1f322:	0e 94 ba f4 	call	0x1e974	; 0x1e974 <RF24::print_byte_register(char const*, unsigned char, unsigned char)>
   1f326:	22 e0       	ldi	r18, 0x02	; 2
   1f328:	4c e1       	ldi	r20, 0x1C	; 28
   1f32a:	6d e1       	ldi	r22, 0x1D	; 29
   1f32c:	7d e8       	ldi	r23, 0x8D	; 141
   1f32e:	ce 01       	movw	r24, r28
   1f330:	0e 94 ba f4 	call	0x1e974	; 0x1e974 <RF24::print_byte_register(char const*, unsigned char, unsigned char)>
   1f334:	ce 01       	movw	r24, r28
   1f336:	0e 94 1e f9 	call	0x1f23c	; 0x1f23c <RF24::getDataRate()>
   1f33a:	fc 01       	movw	r30, r24
   1f33c:	ee 0f       	add	r30, r30
   1f33e:	ff 1f       	adc	r31, r31
   1f340:	e4 52       	subi	r30, 0x24	; 36
   1f342:	f2 47       	sbci	r31, 0x72	; 114
   1f344:	85 91       	lpm	r24, Z+
   1f346:	94 91       	lpm	r25, Z
   1f348:	9f 93       	push	r25
   1f34a:	8f 93       	push	r24
   1f34c:	8b e0       	ldi	r24, 0x0B	; 11
   1f34e:	9d e8       	ldi	r25, 0x8D	; 141
   1f350:	9f 93       	push	r25
   1f352:	8f 93       	push	r24
   1f354:	0f 94 54 1b 	call	0x236a8	; 0x236a8 <printf_P>
   1f358:	ee 81       	ldd	r30, Y+6	; 0x06
   1f35a:	f0 e0       	ldi	r31, 0x00	; 0
   1f35c:	ee 0f       	add	r30, r30
   1f35e:	ff 1f       	adc	r31, r31
   1f360:	eb 53       	subi	r30, 0x3B	; 59
   1f362:	f2 47       	sbci	r31, 0x72	; 114
   1f364:	85 91       	lpm	r24, Z+
   1f366:	94 91       	lpm	r25, Z
   1f368:	9f 93       	push	r25
   1f36a:	8f 93       	push	r24
   1f36c:	8c ef       	ldi	r24, 0xFC	; 252
   1f36e:	9c e8       	ldi	r25, 0x8C	; 140
   1f370:	9f 93       	push	r25
   1f372:	8f 93       	push	r24
   1f374:	0f 94 54 1b 	call	0x236a8	; 0x236a8 <printf_P>
   1f378:	ce 01       	movw	r24, r28
   1f37a:	0e 94 2e f9 	call	0x1f25c	; 0x1f25c <RF24::getCRCLength()>
   1f37e:	fc 01       	movw	r30, r24
   1f380:	ee 0f       	add	r30, r30
   1f382:	ff 1f       	adc	r31, r31
   1f384:	e9 55       	subi	r30, 0x59	; 89
   1f386:	f2 47       	sbci	r31, 0x72	; 114
   1f388:	85 91       	lpm	r24, Z+
   1f38a:	94 91       	lpm	r25, Z
   1f38c:	9f 93       	push	r25
   1f38e:	8f 93       	push	r24
   1f390:	89 ee       	ldi	r24, 0xE9	; 233
   1f392:	9c e8       	ldi	r25, 0x8C	; 140
   1f394:	9f 93       	push	r25
   1f396:	8f 93       	push	r24
   1f398:	0f 94 54 1b 	call	0x236a8	; 0x236a8 <printf_P>
   1f39c:	ce 01       	movw	r24, r28
   1f39e:	0e 94 5a f8 	call	0x1f0b4	; 0x1f0b4 <RF24::getPALevel()>
   1f3a2:	e8 2f       	mov	r30, r24
   1f3a4:	f0 e0       	ldi	r31, 0x00	; 0
   1f3a6:	ee 0f       	add	r30, r30
   1f3a8:	ff 1f       	adc	r31, r31
   1f3aa:	ee 57       	subi	r30, 0x7E	; 126
   1f3ac:	f2 47       	sbci	r31, 0x72	; 114
   1f3ae:	85 91       	lpm	r24, Z+
   1f3b0:	94 91       	lpm	r25, Z
   1f3b2:	9f 93       	push	r25
   1f3b4:	8f 93       	push	r24
   1f3b6:	88 ed       	ldi	r24, 0xD8	; 216
   1f3b8:	9c e8       	ldi	r25, 0x8C	; 140
   1f3ba:	9f 93       	push	r25
   1f3bc:	8f 93       	push	r24
   1f3be:	0f 94 54 1b 	call	0x236a8	; 0x236a8 <printf_P>
   1f3c2:	8d b7       	in	r24, 0x3d	; 61
   1f3c4:	9e b7       	in	r25, 0x3e	; 62
   1f3c6:	40 96       	adiw	r24, 0x10	; 16
   1f3c8:	0f b6       	in	r0, 0x3f	; 63
   1f3ca:	f8 94       	cli
   1f3cc:	9e bf       	out	0x3e, r25	; 62
   1f3ce:	0f be       	out	0x3f, r0	; 63
   1f3d0:	8d bf       	out	0x3d, r24	; 61
   1f3d2:	df 91       	pop	r29
   1f3d4:	cf 91       	pop	r28
   1f3d6:	08 95       	ret

0001f3d8 <RF24::setRetries(unsigned char, unsigned char)>:
_ZN4RF2410setRetriesEhh():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1588
}

/****************************************************************************/
void RF24::setRetries(uint8_t delay, uint8_t count)
{
 write_register(SETUP_RETR,(delay&0xf)<<ARD | (count&0xf)<<ARC);
   1f3d8:	20 e1       	ldi	r18, 0x10	; 16
   1f3da:	62 9f       	mul	r22, r18
   1f3dc:	b0 01       	movw	r22, r0
   1f3de:	11 24       	eor	r1, r1
   1f3e0:	4f 70       	andi	r20, 0x0F	; 15
   1f3e2:	46 2b       	or	r20, r22
   1f3e4:	64 e0       	ldi	r22, 0x04	; 4
   1f3e6:	0c 94 dc f3 	jmp	0x1e7b8	; 0x1e7b8 <RF24::write_register(unsigned char, unsigned char)>

0001f3ea <RF24Network::RF24Network(RF24&)>:
_ZN11RF24NetworkC2ER4RF24():
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:1210
{
  // Presumes that this is in fact a child!!
  uint16_t child_mask = ( node_mask << 3 ) | 0x07;
  return node & child_mask;
  
}
   1f3ea:	fc 01       	movw	r30, r24
   1f3ec:	70 ab       	std	Z+48, r23	; 0x30
   1f3ee:	67 a7       	std	Z+47, r22	; 0x2f
   1f3f0:	dc 01       	movw	r26, r24
   1f3f2:	a1 53       	subi	r26, 0x31	; 49
   1f3f4:	bf 4f       	sbci	r27, 0xFF	; 255
   1f3f6:	c5 96       	adiw	r24, 0x35	; 53
   1f3f8:	11 96       	adiw	r26, 0x01	; 1
   1f3fa:	9c 93       	st	X, r25
   1f3fc:	8e 93       	st	-X, r24
   1f3fe:	1c 96       	adiw	r26, 0x0c	; 12
   1f400:	88 55       	subi	r24, 0x58	; 88
   1f402:	9f 4f       	sbci	r25, 0xFF	; 255
   1f404:	8d 93       	st	X+, r24
   1f406:	9c 93       	st	X, r25
   1f408:	0c 97       	sbiw	r24, 0x0c	; 12
   1f40a:	90 a7       	std	Z+40, r25	; 0x28
   1f40c:	87 a3       	std	Z+39, r24	; 0x27
   1f40e:	13 a6       	std	Z+43, r1	; 0x2b
   1f410:	14 a6       	std	Z+44, r1	; 0x2c
   1f412:	15 a6       	std	Z+45, r1	; 0x2d
   1f414:	16 a6       	std	Z+46, r1	; 0x2e
   1f416:	12 a6       	std	Z+42, r1	; 0x2a
   1f418:	11 a6       	std	Z+41, r1	; 0x29
   1f41a:	10 82       	st	Z, r1
   1f41c:	08 95       	ret

0001f41e <RF24Network::enqueue(RF24NetworkHeader*)>:
_ZN11RF24Network7enqueueEP17RF24NetworkHeader():
   1f41e:	8f 92       	push	r8
   1f420:	9f 92       	push	r9
   1f422:	af 92       	push	r10
   1f424:	bf 92       	push	r11
   1f426:	cf 92       	push	r12
   1f428:	df 92       	push	r13
   1f42a:	ef 92       	push	r14
   1f42c:	ff 92       	push	r15
   1f42e:	0f 93       	push	r16
   1f430:	1f 93       	push	r17
   1f432:	cf 93       	push	r28
   1f434:	df 93       	push	r29
   1f436:	ec 01       	movw	r28, r24
   1f438:	7b 01       	movw	r14, r22
   1f43a:	cc a8       	ldd	r12, Y+52	; 0x34
   1f43c:	d1 2c       	mov	r13, r1
   1f43e:	86 01       	movw	r16, r12
   1f440:	08 50       	subi	r16, 0x08	; 8
   1f442:	11 09       	sbc	r17, r1
   1f444:	db 01       	movw	r26, r22
   1f446:	16 96       	adiw	r26, 0x06	; 6
   1f448:	9c 91       	ld	r25, X
   1f44a:	16 97       	sbiw	r26, 0x06	; 6
   1f44c:	8c e6       	ldi	r24, 0x6C	; 108
   1f44e:	89 0f       	add	r24, r25
   1f450:	83 30       	cpi	r24, 0x03	; 3
   1f452:	e8 f0       	brcs	.+58     	; 0x1f48e <RF24Network::enqueue(RF24NetworkHeader*)+0x70>
   1f454:	98 3c       	cpi	r25, 0xC8	; 200
   1f456:	09 f4       	brne	.+2      	; 0x1f45a <RF24Network::enqueue(RF24NetworkHeader*)+0x3c>
   1f458:	7f c0       	rjmp	.+254    	; 0x1f558 <RF24Network::enqueue(RF24NetworkHeader*)+0x13a>
   1f45a:	93 38       	cpi	r25, 0x83	; 131
   1f45c:	09 f0       	breq	.+2      	; 0x1f460 <RF24Network::enqueue(RF24NetworkHeader*)+0x42>
   1f45e:	0f c1       	rjmp	.+542    	; 0x1f67e <RF24Network::enqueue(RF24NetworkHeader*)+0x260>
   1f460:	de 01       	movw	r26, r28
   1f462:	af 52       	subi	r26, 0x2F	; 47
   1f464:	bf 4f       	sbci	r27, 0xFF	; 255
   1f466:	fe 01       	movw	r30, r28
   1f468:	37 96       	adiw	r30, 0x07	; 7
   1f46a:	88 e0       	ldi	r24, 0x08	; 8
   1f46c:	01 90       	ld	r0, Z+
   1f46e:	0d 92       	st	X+, r0
   1f470:	8a 95       	dec	r24
   1f472:	e1 f7       	brne	.-8      	; 0x1f46c <RF24Network::enqueue(RF24NetworkHeader*)+0x4e>
   1f474:	fe 01       	movw	r30, r28
   1f476:	e5 52       	subi	r30, 0x25	; 37
   1f478:	ff 4f       	sbci	r31, 0xFF	; 255
   1f47a:	ce 01       	movw	r24, r28
   1f47c:	0f 96       	adiw	r24, 0x0f	; 15
   1f47e:	91 83       	std	Z+1, r25	; 0x01
   1f480:	80 83       	st	Z, r24
   1f482:	c7 52       	subi	r28, 0x27	; 39
   1f484:	df 4f       	sbci	r29, 0xFF	; 255
   1f486:	19 83       	std	Y+1, r17	; 0x01
   1f488:	08 83       	st	Y, r16
   1f48a:	82 e0       	ldi	r24, 0x02	; 2
   1f48c:	58 c0       	rjmp	.+176    	; 0x1f53e <RF24Network::enqueue(RF24NetworkHeader*)+0x120>
   1f48e:	94 39       	cpi	r25, 0x94	; 148
   1f490:	09 f0       	breq	.+2      	; 0x1f494 <RF24Network::enqueue(RF24NetworkHeader*)+0x76>
   1f492:	62 c0       	rjmp	.+196    	; 0x1f558 <RF24Network::enqueue(RF24NetworkHeader*)+0x13a>
   1f494:	fb 01       	movw	r30, r22
   1f496:	87 81       	ldd	r24, Z+7	; 0x07
   1f498:	87 30       	cpi	r24, 0x07	; 7
   1f49a:	28 f0       	brcs	.+10     	; 0x1f4a6 <RF24Network::enqueue(RF24NetworkHeader*)+0x88>
   1f49c:	c8 52       	subi	r28, 0x28	; 40
   1f49e:	df 4f       	sbci	r29, 0xFF	; 255
   1f4a0:	18 82       	st	Y, r1
   1f4a2:	80 e0       	ldi	r24, 0x00	; 0
   1f4a4:	4c c0       	rjmp	.+152    	; 0x1f53e <RF24Network::enqueue(RF24NetworkHeader*)+0x120>
   1f4a6:	fe 01       	movw	r30, r28
   1f4a8:	eb 52       	subi	r30, 0x2B	; 43
   1f4aa:	ff 4f       	sbci	r31, 0xFF	; 255
   1f4ac:	40 81       	ld	r20, Z
   1f4ae:	51 81       	ldd	r21, Z+1	; 0x01
   1f4b0:	14 96       	adiw	r26, 0x04	; 4
   1f4b2:	2d 91       	ld	r18, X+
   1f4b4:	3c 91       	ld	r19, X
   1f4b6:	15 97       	sbiw	r26, 0x05	; 5
   1f4b8:	34 97       	sbiw	r30, 0x04	; 4
   1f4ba:	6f 01       	movw	r12, r30
   1f4bc:	42 17       	cp	r20, r18
   1f4be:	53 07       	cpc	r21, r19
   1f4c0:	39 f4       	brne	.+14     	; 0x1f4d0 <RF24Network::enqueue(RF24NetworkHeader*)+0xb2>
   1f4c2:	40 81       	ld	r20, Z
   1f4c4:	51 81       	ldd	r21, Z+1	; 0x01
   1f4c6:	2d 91       	ld	r18, X+
   1f4c8:	3c 91       	ld	r19, X
   1f4ca:	42 17       	cp	r20, r18
   1f4cc:	53 07       	cpc	r21, r19
   1f4ce:	b1 f1       	breq	.+108    	; 0x1f53c <RF24Network::enqueue(RF24NetworkHeader*)+0x11e>
   1f4d0:	f8 e1       	ldi	r31, 0x18	; 24
   1f4d2:	8f 9f       	mul	r24, r31
   1f4d4:	c0 01       	movw	r24, r0
   1f4d6:	11 24       	eor	r1, r1
   1f4d8:	fe 01       	movw	r30, r28
   1f4da:	e1 53       	subi	r30, 0x31	; 49
   1f4dc:	ff 4f       	sbci	r31, 0xFF	; 255
   1f4de:	20 81       	ld	r18, Z
   1f4e0:	31 81       	ldd	r19, Z+1	; 0x01
   1f4e2:	ae 01       	movw	r20, r28
   1f4e4:	42 1b       	sub	r20, r18
   1f4e6:	53 0b       	sbc	r21, r19
   1f4e8:	9a 01       	movw	r18, r20
   1f4ea:	2b 53       	subi	r18, 0x3B	; 59
   1f4ec:	3f 4f       	sbci	r19, 0xFF	; 255
   1f4ee:	28 17       	cp	r18, r24
   1f4f0:	39 07       	cpc	r19, r25
   1f4f2:	3c f4       	brge	.+14     	; 0x1f502 <RF24Network::enqueue(RF24NetworkHeader*)+0xe4>
   1f4f4:	8a a5       	ldd	r24, Y+42	; 0x2a
   1f4f6:	81 60       	ori	r24, 0x01	; 1
   1f4f8:	8a a7       	std	Y+42, r24	; 0x2a
   1f4fa:	8f a5       	ldd	r24, Y+47	; 0x2f
   1f4fc:	98 a9       	ldd	r25, Y+48	; 0x30
   1f4fe:	0e 94 a2 f5 	call	0x1eb44	; 0x1eb44 <RF24::stopListening()>
   1f502:	fe 01       	movw	r30, r28
   1f504:	37 96       	adiw	r30, 0x07	; 7
   1f506:	88 e0       	ldi	r24, 0x08	; 8
   1f508:	d6 01       	movw	r26, r12
   1f50a:	01 90       	ld	r0, Z+
   1f50c:	0d 92       	st	X+, r0
   1f50e:	8a 95       	dec	r24
   1f510:	e1 f7       	brne	.-8      	; 0x1f50a <RF24Network::enqueue(RF24NetworkHeader*)+0xec>
   1f512:	fe 01       	movw	r30, r28
   1f514:	e5 52       	subi	r30, 0x25	; 37
   1f516:	ff 4f       	sbci	r31, 0xFF	; 255
   1f518:	be 01       	movw	r22, r28
   1f51a:	61 5f       	subi	r22, 0xF1	; 241
   1f51c:	7f 4f       	sbci	r23, 0xFF	; 255
   1f51e:	a8 01       	movw	r20, r16
   1f520:	80 81       	ld	r24, Z
   1f522:	91 81       	ldd	r25, Z+1	; 0x01
   1f524:	0f 94 2d 1a 	call	0x2345a	; 0x2345a <memcpy>
   1f528:	fe 01       	movw	r30, r28
   1f52a:	e7 52       	subi	r30, 0x27	; 39
   1f52c:	ff 4f       	sbci	r31, 0xFF	; 255
   1f52e:	11 83       	std	Z+1, r17	; 0x01
   1f530:	00 83       	st	Z, r16
   1f532:	c8 52       	subi	r28, 0x28	; 40
   1f534:	df 4f       	sbci	r29, 0xFF	; 255
   1f536:	88 81       	ld	r24, Y
   1f538:	81 50       	subi	r24, 0x01	; 1
   1f53a:	88 83       	st	Y, r24
   1f53c:	81 e0       	ldi	r24, 0x01	; 1
   1f53e:	df 91       	pop	r29
   1f540:	cf 91       	pop	r28
   1f542:	1f 91       	pop	r17
   1f544:	0f 91       	pop	r16
   1f546:	ff 90       	pop	r15
   1f548:	ef 90       	pop	r14
   1f54a:	df 90       	pop	r13
   1f54c:	cf 90       	pop	r12
   1f54e:	bf 90       	pop	r11
   1f550:	af 90       	pop	r10
   1f552:	9f 90       	pop	r9
   1f554:	8f 90       	pop	r8
   1f556:	08 95       	ret
   1f558:	8b e6       	ldi	r24, 0x6B	; 107
   1f55a:	89 0f       	add	r24, r25
   1f55c:	82 30       	cpi	r24, 0x02	; 2
   1f55e:	18 f0       	brcs	.+6      	; 0x1f566 <RF24Network::enqueue(RF24NetworkHeader*)+0x148>
   1f560:	98 3c       	cpi	r25, 0xC8	; 200
   1f562:	09 f0       	breq	.+2      	; 0x1f566 <RF24Network::enqueue(RF24NetworkHeader*)+0x148>
   1f564:	8c c0       	rjmp	.+280    	; 0x1f67e <RF24Network::enqueue(RF24NetworkHeader*)+0x260>
   1f566:	6e 01       	movw	r12, r28
   1f568:	59 ed       	ldi	r21, 0xD9	; 217
   1f56a:	c5 0e       	add	r12, r21
   1f56c:	d1 1c       	adc	r13, r1
   1f56e:	d6 01       	movw	r26, r12
   1f570:	2d 91       	ld	r18, X+
   1f572:	3c 91       	ld	r19, X
   1f574:	a8 01       	movw	r20, r16
   1f576:	42 0f       	add	r20, r18
   1f578:	53 1f       	adc	r21, r19
   1f57a:	41 39       	cpi	r20, 0x91	; 145
   1f57c:	51 05       	cpc	r21, r1
   1f57e:	08 f0       	brcs	.+2      	; 0x1f582 <RF24Network::enqueue(RF24NetworkHeader*)+0x164>
   1f580:	8d cf       	rjmp	.-230    	; 0x1f49c <RF24Network::enqueue(RF24NetworkHeader*)+0x7e>
   1f582:	5e 01       	movw	r10, r28
   1f584:	b8 ed       	ldi	r27, 0xD8	; 216
   1f586:	ab 0e       	add	r10, r27
   1f588:	b1 1c       	adc	r11, r1
   1f58a:	f5 01       	movw	r30, r10
   1f58c:	80 81       	ld	r24, Z
   1f58e:	88 23       	and	r24, r24
   1f590:	09 f4       	brne	.+2      	; 0x1f594 <RF24Network::enqueue(RF24NetworkHeader*)+0x176>
   1f592:	87 cf       	rjmp	.-242    	; 0x1f4a2 <RF24Network::enqueue(RF24NetworkHeader*)+0x84>
   1f594:	96 39       	cpi	r25, 0x96	; 150
   1f596:	29 f0       	breq	.+10     	; 0x1f5a2 <RF24Network::enqueue(RF24NetworkHeader*)+0x184>
   1f598:	d7 01       	movw	r26, r14
   1f59a:	17 96       	adiw	r26, 0x07	; 7
   1f59c:	9c 91       	ld	r25, X
   1f59e:	89 13       	cpse	r24, r25
   1f5a0:	80 cf       	rjmp	.-256    	; 0x1f4a2 <RF24Network::enqueue(RF24NetworkHeader*)+0x84>
   1f5a2:	fe 01       	movw	r30, r28
   1f5a4:	eb 52       	subi	r30, 0x2B	; 43
   1f5a6:	ff 4f       	sbci	r31, 0xFF	; 255
   1f5a8:	40 81       	ld	r20, Z
   1f5aa:	51 81       	ldd	r21, Z+1	; 0x01
   1f5ac:	f7 01       	movw	r30, r14
   1f5ae:	84 81       	ldd	r24, Z+4	; 0x04
   1f5b0:	95 81       	ldd	r25, Z+5	; 0x05
   1f5b2:	48 17       	cp	r20, r24
   1f5b4:	59 07       	cpc	r21, r25
   1f5b6:	09 f0       	breq	.+2      	; 0x1f5ba <RF24Network::enqueue(RF24NetworkHeader*)+0x19c>
   1f5b8:	74 cf       	rjmp	.-280    	; 0x1f4a2 <RF24Network::enqueue(RF24NetworkHeader*)+0x84>
   1f5ba:	4e 01       	movw	r8, r28
   1f5bc:	fb ed       	ldi	r31, 0xDB	; 219
   1f5be:	8f 0e       	add	r8, r31
   1f5c0:	91 1c       	adc	r9, r1
   1f5c2:	d4 01       	movw	r26, r8
   1f5c4:	8d 91       	ld	r24, X+
   1f5c6:	9c 91       	ld	r25, X
   1f5c8:	a8 01       	movw	r20, r16
   1f5ca:	be 01       	movw	r22, r28
   1f5cc:	61 5f       	subi	r22, 0xF1	; 241
   1f5ce:	7f 4f       	sbci	r23, 0xFF	; 255
   1f5d0:	82 0f       	add	r24, r18
   1f5d2:	93 1f       	adc	r25, r19
   1f5d4:	0f 94 2d 1a 	call	0x2345a	; 0x2345a <memcpy>
   1f5d8:	f6 01       	movw	r30, r12
   1f5da:	80 81       	ld	r24, Z
   1f5dc:	91 81       	ldd	r25, Z+1	; 0x01
   1f5de:	08 0f       	add	r16, r24
   1f5e0:	19 1f       	adc	r17, r25
   1f5e2:	11 83       	std	Z+1, r17	; 0x01
   1f5e4:	00 83       	st	Z, r16
   1f5e6:	d7 01       	movw	r26, r14
   1f5e8:	16 96       	adiw	r26, 0x06	; 6
   1f5ea:	8c 91       	ld	r24, X
   1f5ec:	86 39       	cpi	r24, 0x96	; 150
   1f5ee:	29 f0       	breq	.+10     	; 0x1f5fa <RF24Network::enqueue(RF24NetworkHeader*)+0x1dc>
   1f5f0:	f5 01       	movw	r30, r10
   1f5f2:	80 81       	ld	r24, Z
   1f5f4:	81 50       	subi	r24, 0x01	; 1
   1f5f6:	80 83       	st	Z, r24
   1f5f8:	a1 cf       	rjmp	.-190    	; 0x1f53c <RF24Network::enqueue(RF24NetworkHeader*)+0x11e>
   1f5fa:	d5 01       	movw	r26, r10
   1f5fc:	1c 92       	st	X, r1
   1f5fe:	f7 01       	movw	r30, r14
   1f600:	87 81       	ldd	r24, Z+7	; 0x07
   1f602:	fe 01       	movw	r30, r28
   1f604:	e9 52       	subi	r30, 0x29	; 41
   1f606:	ff 4f       	sbci	r31, 0xFF	; 255
   1f608:	80 83       	st	Z, r24
   1f60a:	83 38       	cpi	r24, 0x83	; 131
   1f60c:	09 f4       	brne	.+2      	; 0x1f610 <RF24Network::enqueue(RF24NetworkHeader*)+0x1f2>
   1f60e:	3d cf       	rjmp	.-390    	; 0x1f48a <RF24Network::enqueue(RF24NetworkHeader*)+0x6c>
   1f610:	7e 01       	movw	r14, r28
   1f612:	ff ec       	ldi	r31, 0xCF	; 207
   1f614:	ef 0e       	add	r14, r31
   1f616:	f1 1c       	adc	r15, r1
   1f618:	f7 01       	movw	r30, r14
   1f61a:	a0 81       	ld	r26, Z
   1f61c:	b1 81       	ldd	r27, Z+1	; 0x01
   1f61e:	ce 01       	movw	r24, r28
   1f620:	8a 1b       	sub	r24, r26
   1f622:	9b 0b       	sbc	r25, r27
   1f624:	8b 53       	subi	r24, 0x3B	; 59
   1f626:	9f 4f       	sbci	r25, 0xFF	; 255
   1f628:	80 17       	cp	r24, r16
   1f62a:	91 07       	cpc	r25, r17
   1f62c:	00 f1       	brcs	.+64     	; 0x1f66e <RF24Network::enqueue(RF24NetworkHeader*)+0x250>
   1f62e:	32 96       	adiw	r30, 0x02	; 2
   1f630:	8a e0       	ldi	r24, 0x0A	; 10
   1f632:	01 90       	ld	r0, Z+
   1f634:	0d 92       	st	X+, r0
   1f636:	8a 95       	dec	r24
   1f638:	e1 f7       	brne	.-8      	; 0x1f632 <RF24Network::enqueue(RF24NetworkHeader*)+0x214>
   1f63a:	d7 01       	movw	r26, r14
   1f63c:	8d 91       	ld	r24, X+
   1f63e:	9c 91       	ld	r25, X
   1f640:	f4 01       	movw	r30, r8
   1f642:	60 81       	ld	r22, Z
   1f644:	71 81       	ldd	r23, Z+1	; 0x01
   1f646:	d6 01       	movw	r26, r12
   1f648:	4d 91       	ld	r20, X+
   1f64a:	5c 91       	ld	r21, X
   1f64c:	0a 96       	adiw	r24, 0x0a	; 10
   1f64e:	0f 94 2d 1a 	call	0x2345a	; 0x2345a <memcpy>
   1f652:	f6 01       	movw	r30, r12
   1f654:	20 81       	ld	r18, Z
   1f656:	31 81       	ldd	r19, Z+1	; 0x01
   1f658:	26 5f       	subi	r18, 0xF6	; 246
   1f65a:	3f 4f       	sbci	r19, 0xFF	; 255
   1f65c:	d7 01       	movw	r26, r14
   1f65e:	8d 91       	ld	r24, X+
   1f660:	9c 91       	ld	r25, X
   1f662:	11 97       	sbiw	r26, 0x01	; 1
   1f664:	82 0f       	add	r24, r18
   1f666:	93 1f       	adc	r25, r19
   1f668:	8d 93       	st	X+, r24
   1f66a:	9c 93       	st	X, r25
   1f66c:	67 cf       	rjmp	.-306    	; 0x1f53c <RF24Network::enqueue(RF24NetworkHeader*)+0x11e>
   1f66e:	8f a5       	ldd	r24, Y+47	; 0x2f
   1f670:	98 a9       	ldd	r25, Y+48	; 0x30
   1f672:	0e 94 a2 f5 	call	0x1eb44	; 0x1eb44 <RF24::stopListening()>
   1f676:	8a a5       	ldd	r24, Y+42	; 0x2a
   1f678:	81 60       	ori	r24, 0x01	; 1
   1f67a:	8a a7       	std	Y+42, r24	; 0x2a
   1f67c:	12 cf       	rjmp	.-476    	; 0x1f4a2 <RF24Network::enqueue(RF24NetworkHeader*)+0x84>
   1f67e:	7e 01       	movw	r14, r28
   1f680:	bf ec       	ldi	r27, 0xCF	; 207
   1f682:	eb 0e       	add	r14, r27
   1f684:	f1 1c       	adc	r15, r1
   1f686:	f7 01       	movw	r30, r14
   1f688:	a0 81       	ld	r26, Z
   1f68a:	b1 81       	ldd	r27, Z+1	; 0x01
   1f68c:	ce 01       	movw	r24, r28
   1f68e:	c5 96       	adiw	r24, 0x35	; 53
   1f690:	9d 01       	movw	r18, r26
   1f692:	28 1b       	sub	r18, r24
   1f694:	39 0b       	sbc	r19, r25
   1f696:	c9 01       	movw	r24, r18
   1f698:	80 0f       	add	r24, r16
   1f69a:	91 1f       	adc	r25, r17
   1f69c:	8b 39       	cpi	r24, 0x9B	; 155
   1f69e:	91 05       	cpc	r25, r1
   1f6a0:	08 f0       	brcs	.+2      	; 0x1f6a4 <RF24Network::enqueue(RF24NetworkHeader*)+0x286>
   1f6a2:	ff ce       	rjmp	.-514    	; 0x1f4a2 <RF24Network::enqueue(RF24NetworkHeader*)+0x84>
   1f6a4:	e8 5c       	subi	r30, 0xC8	; 200
   1f6a6:	f1 09       	sbc	r31, r1
   1f6a8:	88 e0       	ldi	r24, 0x08	; 8
   1f6aa:	01 90       	ld	r0, Z+
   1f6ac:	0d 92       	st	X+, r0
   1f6ae:	8a 95       	dec	r24
   1f6b0:	e1 f7       	brne	.-8      	; 0x1f6aa <RF24Network::enqueue(RF24NetworkHeader*)+0x28c>
   1f6b2:	d7 01       	movw	r26, r14
   1f6b4:	ed 91       	ld	r30, X+
   1f6b6:	fc 91       	ld	r31, X
   1f6b8:	11 97       	sbiw	r26, 0x01	; 1
   1f6ba:	11 87       	std	Z+9, r17	; 0x09
   1f6bc:	00 87       	std	Z+8, r16	; 0x08
   1f6be:	8d 91       	ld	r24, X+
   1f6c0:	9c 91       	ld	r25, X
   1f6c2:	be 01       	movw	r22, r28
   1f6c4:	61 5f       	subi	r22, 0xF1	; 241
   1f6c6:	7f 4f       	sbci	r23, 0xFF	; 255
   1f6c8:	a8 01       	movw	r20, r16
   1f6ca:	0a 96       	adiw	r24, 0x0a	; 10
   1f6cc:	0f 94 2d 1a 	call	0x2345a	; 0x2345a <memcpy>
   1f6d0:	b2 e0       	ldi	r27, 0x02	; 2
   1f6d2:	cb 0e       	add	r12, r27
   1f6d4:	d1 1c       	adc	r13, r1
   1f6d6:	f7 01       	movw	r30, r14
   1f6d8:	80 81       	ld	r24, Z
   1f6da:	91 81       	ldd	r25, Z+1	; 0x01
   1f6dc:	c8 0e       	add	r12, r24
   1f6de:	d9 1e       	adc	r13, r25
   1f6e0:	d1 82       	std	Z+1, r13	; 0x01
   1f6e2:	c0 82       	st	Z, r12
   1f6e4:	2b cf       	rjmp	.-426    	; 0x1f53c <RF24Network::enqueue(RF24NetworkHeader*)+0x11e>

0001f6e6 <RF24Network::available()>:
_ZN11RF24Network9availableEv():
   1f6e6:	fc 01       	movw	r30, r24
   1f6e8:	e1 53       	subi	r30, 0x31	; 49
   1f6ea:	ff 4f       	sbci	r31, 0xFF	; 255
   1f6ec:	9c 01       	movw	r18, r24
   1f6ee:	2b 5c       	subi	r18, 0xCB	; 203
   1f6f0:	3f 4f       	sbci	r19, 0xFF	; 255
   1f6f2:	81 e0       	ldi	r24, 0x01	; 1
   1f6f4:	40 81       	ld	r20, Z
   1f6f6:	51 81       	ldd	r21, Z+1	; 0x01
   1f6f8:	24 17       	cp	r18, r20
   1f6fa:	35 07       	cpc	r19, r21
   1f6fc:	08 f0       	brcs	.+2      	; 0x1f700 <RF24Network::available()+0x1a>
   1f6fe:	80 e0       	ldi	r24, 0x00	; 0
   1f700:	08 95       	ret

0001f702 <RF24Network::peek(RF24NetworkHeader&)>:
   1f702:	fc 01       	movw	r30, r24
   1f704:	f5 96       	adiw	r30, 0x35	; 53
   1f706:	dc 01       	movw	r26, r24
   1f708:	a1 53       	subi	r26, 0x31	; 49
   1f70a:	bf 4f       	sbci	r27, 0xFF	; 255
_ZN11RF24Network4peekER17RF24NetworkHeader():
   1f70c:	2d 91       	ld	r18, X+
   1f70e:	3c 91       	ld	r19, X
   1f710:	e2 17       	cp	r30, r18
   1f712:	f3 07       	cpc	r31, r19
   1f714:	50 f4       	brcc	.+20     	; 0x1f72a <RF24Network::peek(RF24NetworkHeader&)+0x28>
   1f716:	28 e0       	ldi	r18, 0x08	; 8
   1f718:	db 01       	movw	r26, r22
   1f71a:	01 90       	ld	r0, Z+
   1f71c:	0d 92       	st	X+, r0
   1f71e:	2a 95       	dec	r18
   1f720:	e1 f7       	brne	.-8      	; 0x1f71a <RF24Network::peek(RF24NetworkHeader&)+0x18>
   1f722:	fc 01       	movw	r30, r24
   1f724:	85 ad       	ldd	r24, Z+61	; 0x3d
   1f726:	96 ad       	ldd	r25, Z+62	; 0x3e
   1f728:	08 95       	ret
   1f72a:	90 e0       	ldi	r25, 0x00	; 0
   1f72c:	80 e0       	ldi	r24, 0x00	; 0
   1f72e:	08 95       	ret

0001f730 <RF24Network::read(RF24NetworkHeader&, void*, unsigned int)>:
_ZN11RF24Network4readER17RF24NetworkHeaderPvj():
   1f730:	ef 92       	push	r14
   1f732:	ff 92       	push	r15
   1f734:	0f 93       	push	r16
   1f736:	1f 93       	push	r17
   1f738:	cf 93       	push	r28
   1f73a:	df 93       	push	r29
   1f73c:	fc 01       	movw	r30, r24
_ZN11RF24Network9availableEv():
   1f73e:	8c 01       	movw	r16, r24
   1f740:	0b 5c       	subi	r16, 0xCB	; 203
   1f742:	1f 4f       	sbci	r17, 0xFF	; 255
   1f744:	7c 01       	movw	r14, r24
   1f746:	8f ec       	ldi	r24, 0xCF	; 207
   1f748:	e8 0e       	add	r14, r24
   1f74a:	f1 1c       	adc	r15, r1
_ZN11RF24Network4readER17RF24NetworkHeaderPvj():
   1f74c:	d7 01       	movw	r26, r14
   1f74e:	8d 91       	ld	r24, X+
   1f750:	9c 91       	ld	r25, X
   1f752:	d0 e0       	ldi	r29, 0x00	; 0
   1f754:	c0 e0       	ldi	r28, 0x00	; 0
   1f756:	08 17       	cp	r16, r24
   1f758:	19 07       	cpc	r17, r25
   1f75a:	80 f5       	brcc	.+96     	; 0x1f7bc <RF24Network::read(RF24NetworkHeader&, void*, unsigned int)+0x8c>
   1f75c:	ca 01       	movw	r24, r20
   1f75e:	db 01       	movw	r26, r22
   1f760:	bf 01       	movw	r22, r30
   1f762:	48 e0       	ldi	r20, 0x08	; 8
   1f764:	f8 01       	movw	r30, r16
   1f766:	01 90       	ld	r0, Z+
   1f768:	0d 92       	st	X+, r0
   1f76a:	4a 95       	dec	r20
   1f76c:	e1 f7       	brne	.-8      	; 0x1f766 <RF24Network::read(RF24NetworkHeader&, void*, unsigned int)+0x36>
   1f76e:	fb 01       	movw	r30, r22
   1f770:	c5 ad       	ldd	r28, Z+61	; 0x3d
   1f772:	d6 ad       	ldd	r29, Z+62	; 0x3e
   1f774:	21 15       	cp	r18, r1
   1f776:	31 05       	cpc	r19, r1
   1f778:	49 f0       	breq	.+18     	; 0x1f78c <RF24Network::read(RF24NetworkHeader&, void*, unsigned int)+0x5c>
   1f77a:	ae 01       	movw	r20, r28
   1f77c:	2c 17       	cp	r18, r28
   1f77e:	3d 07       	cpc	r19, r29
   1f780:	08 f4       	brcc	.+2      	; 0x1f784 <RF24Network::read(RF24NetworkHeader&, void*, unsigned int)+0x54>
   1f782:	a9 01       	movw	r20, r18
   1f784:	61 5c       	subi	r22, 0xC1	; 193
   1f786:	7f 4f       	sbci	r23, 0xFF	; 255
   1f788:	0f 94 2d 1a 	call	0x2345a	; 0x2345a <memcpy>
   1f78c:	26 ef       	ldi	r18, 0xF6	; 246
   1f78e:	3f ef       	ldi	r19, 0xFF	; 255
   1f790:	2c 1b       	sub	r18, r28
   1f792:	3d 0b       	sbc	r19, r29
   1f794:	d7 01       	movw	r26, r14
   1f796:	8d 91       	ld	r24, X+
   1f798:	9c 91       	ld	r25, X
   1f79a:	11 97       	sbiw	r26, 0x01	; 1
   1f79c:	82 0f       	add	r24, r18
   1f79e:	93 1f       	adc	r25, r19
   1f7a0:	8d 93       	st	X+, r24
   1f7a2:	9c 93       	st	X, r25
   1f7a4:	4a e9       	ldi	r20, 0x9A	; 154
   1f7a6:	50 e0       	ldi	r21, 0x00	; 0
   1f7a8:	4c 1b       	sub	r20, r28
   1f7aa:	5d 0b       	sbc	r21, r29
   1f7ac:	be 01       	movw	r22, r28
   1f7ae:	66 5f       	subi	r22, 0xF6	; 246
   1f7b0:	7f 4f       	sbci	r23, 0xFF	; 255
   1f7b2:	60 0f       	add	r22, r16
   1f7b4:	71 1f       	adc	r23, r17
   1f7b6:	c8 01       	movw	r24, r16
   1f7b8:	0f 94 36 1a 	call	0x2346c	; 0x2346c <memmove>
   1f7bc:	ce 01       	movw	r24, r28
   1f7be:	df 91       	pop	r29
   1f7c0:	cf 91       	pop	r28
   1f7c2:	1f 91       	pop	r17
   1f7c4:	0f 91       	pop	r16
   1f7c6:	ff 90       	pop	r15
   1f7c8:	ef 90       	pop	r14
   1f7ca:	08 95       	ret

0001f7cc <RF24Network::is_direct_child(unsigned int)>:
_ZN11RF24Network13is_descendantEj():
   1f7cc:	fc 01       	movw	r30, r24
   1f7ce:	e0 59       	subi	r30, 0x90	; 144
   1f7d0:	fe 4f       	sbci	r31, 0xFE	; 254
   1f7d2:	20 81       	ld	r18, Z
   1f7d4:	31 81       	ldd	r19, Z+1	; 0x01
   1f7d6:	ab 01       	movw	r20, r22
   1f7d8:	42 23       	and	r20, r18
   1f7da:	53 23       	and	r21, r19
_ZN11RF24Network15is_direct_childEj():
   1f7dc:	fc 01       	movw	r30, r24
   1f7de:	82 a9       	ldd	r24, Z+50	; 0x32
   1f7e0:	93 a9       	ldd	r25, Z+51	; 0x33
   1f7e2:	48 17       	cp	r20, r24
   1f7e4:	59 07       	cpc	r21, r25
   1f7e6:	61 f4       	brne	.+24     	; 0x1f800 <RF24Network::is_direct_child(unsigned int)+0x34>
   1f7e8:	20 95       	com	r18
   1f7ea:	30 95       	com	r19
   1f7ec:	83 e0       	ldi	r24, 0x03	; 3
   1f7ee:	22 0f       	add	r18, r18
   1f7f0:	33 1f       	adc	r19, r19
   1f7f2:	8a 95       	dec	r24
   1f7f4:	e1 f7       	brne	.-8      	; 0x1f7ee <RF24Network::is_direct_child(unsigned int)+0x22>
   1f7f6:	62 23       	and	r22, r18
   1f7f8:	73 23       	and	r23, r19
   1f7fa:	81 e0       	ldi	r24, 0x01	; 1
   1f7fc:	67 2b       	or	r22, r23
   1f7fe:	09 f0       	breq	.+2      	; 0x1f802 <RF24Network::is_direct_child(unsigned int)+0x36>
   1f800:	80 e0       	ldi	r24, 0x00	; 0
   1f802:	08 95       	ret

0001f804 <RF24Network::logicalToPhysicalAddress(RF24Network::logicalToPhysicalStruct*)>:
_ZN11RF24Network24logicalToPhysicalAddressEPNS_23logicalToPhysicalStructE():
   1f804:	ef 92       	push	r14
   1f806:	ff 92       	push	r15
   1f808:	0f 93       	push	r16
   1f80a:	1f 93       	push	r17
   1f80c:	cf 93       	push	r28
   1f80e:	df 93       	push	r29
   1f810:	ec 01       	movw	r28, r24
   1f812:	7b 01       	movw	r14, r22
   1f814:	fb 01       	movw	r30, r22
   1f816:	00 81       	ld	r16, Z
   1f818:	11 81       	ldd	r17, Z+1	; 0x01
   1f81a:	82 81       	ldd	r24, Z+2	; 0x02
   1f81c:	82 30       	cpi	r24, 0x02	; 2
   1f81e:	78 f0       	brcs	.+30     	; 0x1f83e <RF24Network::logicalToPhysicalAddress(RF24Network::logicalToPhysicalStruct*)+0x3a>
   1f820:	81 e0       	ldi	r24, 0x01	; 1
   1f822:	83 83       	std	Z+3, r24	; 0x03
   1f824:	80 e0       	ldi	r24, 0x00	; 0
   1f826:	f7 01       	movw	r30, r14
   1f828:	11 83       	std	Z+1, r17	; 0x01
   1f82a:	00 83       	st	Z, r16
   1f82c:	82 83       	std	Z+2, r24	; 0x02
   1f82e:	81 e0       	ldi	r24, 0x01	; 1
   1f830:	df 91       	pop	r29
   1f832:	cf 91       	pop	r28
   1f834:	1f 91       	pop	r17
   1f836:	0f 91       	pop	r16
   1f838:	ff 90       	pop	r15
   1f83a:	ef 90       	pop	r14
   1f83c:	08 95       	ret
   1f83e:	b8 01       	movw	r22, r16
   1f840:	ce 01       	movw	r24, r28
   1f842:	0e 94 e6 fb 	call	0x1f7cc	; 0x1f7cc <RF24Network::is_direct_child(unsigned int)>
   1f846:	81 11       	cpse	r24, r1
   1f848:	1c c0       	rjmp	.+56     	; 0x1f882 <RF24Network::logicalToPhysicalAddress(RF24Network::logicalToPhysicalStruct*)+0x7e>
_ZN11RF24Network13is_descendantEj():
   1f84a:	fe 01       	movw	r30, r28
   1f84c:	e0 59       	subi	r30, 0x90	; 144
   1f84e:	fe 4f       	sbci	r31, 0xFE	; 254
   1f850:	80 81       	ld	r24, Z
   1f852:	91 81       	ldd	r25, Z+1	; 0x01
   1f854:	9c 01       	movw	r18, r24
   1f856:	20 23       	and	r18, r16
   1f858:	31 23       	and	r19, r17
_ZN11RF24Network24logicalToPhysicalAddressEPNS_23logicalToPhysicalStructE():
   1f85a:	4a a9       	ldd	r20, Y+50	; 0x32
   1f85c:	5b a9       	ldd	r21, Y+51	; 0x33
   1f85e:	42 17       	cp	r20, r18
   1f860:	53 07       	cpc	r21, r19
   1f862:	39 f0       	breq	.+14     	; 0x1f872 <RF24Network::logicalToPhysicalAddress(RF24Network::logicalToPhysicalStruct*)+0x6e>
   1f864:	33 97       	sbiw	r30, 0x03	; 3
   1f866:	00 81       	ld	r16, Z
   1f868:	11 81       	ldd	r17, Z+1	; 0x01
   1f86a:	c1 59       	subi	r28, 0x91	; 145
   1f86c:	de 4f       	sbci	r29, 0xFE	; 254
   1f86e:	88 81       	ld	r24, Y
   1f870:	da cf       	rjmp	.-76     	; 0x1f826 <RF24Network::logicalToPhysicalAddress(RF24Network::logicalToPhysicalStruct*)+0x22>
_ZN11RF24Network21direct_child_route_toEj():
   1f872:	23 e0       	ldi	r18, 0x03	; 3
   1f874:	88 0f       	add	r24, r24
   1f876:	99 1f       	adc	r25, r25
   1f878:	2a 95       	dec	r18
   1f87a:	e1 f7       	brne	.-8      	; 0x1f874 <RF24Network::logicalToPhysicalAddress(RF24Network::logicalToPhysicalStruct*)+0x70>
   1f87c:	87 60       	ori	r24, 0x07	; 7
   1f87e:	08 23       	and	r16, r24
   1f880:	19 23       	and	r17, r25
_ZN11RF24Network24logicalToPhysicalAddressEPNS_23logicalToPhysicalStructE():
   1f882:	85 e0       	ldi	r24, 0x05	; 5
   1f884:	d0 cf       	rjmp	.-96     	; 0x1f826 <RF24Network::logicalToPhysicalAddress(RF24Network::logicalToPhysicalStruct*)+0x22>

0001f886 <RF24Network::setup_address()>:
_ZN11RF24Network13setup_addressEv():
   1f886:	fc 01       	movw	r30, r24
   1f888:	42 a9       	ldd	r20, Z+50	; 0x32
   1f88a:	53 a9       	ldd	r21, Z+51	; 0x33
   1f88c:	60 e0       	ldi	r22, 0x00	; 0
   1f88e:	2f ef       	ldi	r18, 0xFF	; 255
   1f890:	3f ef       	ldi	r19, 0xFF	; 255
   1f892:	fa 01       	movw	r30, r20
   1f894:	e2 23       	and	r30, r18
   1f896:	f3 23       	and	r31, r19
   1f898:	ef 2b       	or	r30, r31
   1f89a:	39 f0       	breq	.+14     	; 0x1f8aa <RF24Network::setup_address()+0x24>
   1f89c:	b3 e0       	ldi	r27, 0x03	; 3
   1f89e:	22 0f       	add	r18, r18
   1f8a0:	33 1f       	adc	r19, r19
   1f8a2:	ba 95       	dec	r27
   1f8a4:	e1 f7       	brne	.-8      	; 0x1f89e <RF24Network::setup_address()+0x18>
   1f8a6:	6f 5f       	subi	r22, 0xFF	; 255
   1f8a8:	f4 cf       	rjmp	.-24     	; 0x1f892 <RF24Network::setup_address()+0xc>
   1f8aa:	fc 01       	movw	r30, r24
   1f8ac:	61 ab       	std	Z+49, r22	; 0x31
   1f8ae:	20 95       	com	r18
   1f8b0:	30 95       	com	r19
   1f8b2:	e0 59       	subi	r30, 0x90	; 144
   1f8b4:	fe 4f       	sbci	r31, 0xFE	; 254
   1f8b6:	31 83       	std	Z+1, r19	; 0x01
   1f8b8:	20 83       	st	Z, r18
   1f8ba:	a3 e0       	ldi	r26, 0x03	; 3
   1f8bc:	36 95       	lsr	r19
   1f8be:	27 95       	ror	r18
   1f8c0:	aa 95       	dec	r26
   1f8c2:	e1 f7       	brne	.-8      	; 0x1f8bc <RF24Network::setup_address()+0x36>
   1f8c4:	33 97       	sbiw	r30, 0x03	; 3
   1f8c6:	ba 01       	movw	r22, r20
   1f8c8:	62 23       	and	r22, r18
   1f8ca:	73 23       	and	r23, r19
   1f8cc:	71 83       	std	Z+1, r23	; 0x01
   1f8ce:	60 83       	st	Z, r22
   1f8d0:	21 15       	cp	r18, r1
   1f8d2:	31 05       	cpc	r19, r1
   1f8d4:	59 f0       	breq	.+22     	; 0x1f8ec <RF24Network::setup_address()+0x66>
   1f8d6:	63 e0       	ldi	r22, 0x03	; 3
   1f8d8:	56 95       	lsr	r21
   1f8da:	47 95       	ror	r20
   1f8dc:	6a 95       	dec	r22
   1f8de:	e1 f7       	brne	.-8      	; 0x1f8d8 <RF24Network::setup_address()+0x52>
   1f8e0:	73 e0       	ldi	r23, 0x03	; 3
   1f8e2:	36 95       	lsr	r19
   1f8e4:	27 95       	ror	r18
   1f8e6:	7a 95       	dec	r23
   1f8e8:	e1 f7       	brne	.-8      	; 0x1f8e2 <RF24Network::setup_address()+0x5c>
   1f8ea:	f2 cf       	rjmp	.-28     	; 0x1f8d0 <RF24Network::setup_address()+0x4a>
   1f8ec:	81 59       	subi	r24, 0x91	; 145
   1f8ee:	9e 4f       	sbci	r25, 0xFE	; 254
   1f8f0:	fc 01       	movw	r30, r24
   1f8f2:	40 83       	st	Z, r20
   1f8f4:	08 95       	ret

0001f8f6 <RF24Network::is_valid_address(unsigned int)>:
_ZN11RF24Network16is_valid_addressEj():
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:1234

bool RF24Network::is_valid_address( uint16_t node )
{
  bool result = true;

  while(node)
   1f8f6:	61 15       	cp	r22, r1
   1f8f8:	71 05       	cpc	r23, r1
   1f8fa:	51 f0       	breq	.+20     	; 0x1f910 <RF24Network::is_valid_address(unsigned int)+0x1a>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:1236
  {
    uint8_t digit = node & 0x07;
   1f8fc:	86 2f       	mov	r24, r22
   1f8fe:	87 70       	andi	r24, 0x07	; 7
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:1240
	#if !defined (RF24NetworkMulticast)
    if (digit < 1 || digit > 5)
	#else
	if (digit < 0 || digit > 5)	//Allow our out of range multicast address
   1f900:	86 30       	cpi	r24, 0x06	; 6
   1f902:	40 f4       	brcc	.+16     	; 0x1f914 <RF24Network::is_valid_address(unsigned int)+0x1e>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:1247
    {
      result = false;
      IF_SERIAL_DEBUG_MINIMAL(printf_P(PSTR("*** WARNING *** Invalid address 0%o\n\r"),node););
      break;
    }
    node >>= 3;
   1f904:	83 e0       	ldi	r24, 0x03	; 3
   1f906:	76 95       	lsr	r23
   1f908:	67 95       	ror	r22
   1f90a:	8a 95       	dec	r24
   1f90c:	e1 f7       	brne	.-8      	; 0x1f906 <RF24Network::is_valid_address(unsigned int)+0x10>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:1234

bool RF24Network::is_valid_address( uint16_t node )
{
  bool result = true;

  while(node)
   1f90e:	f3 cf       	rjmp	.-26     	; 0x1f8f6 <RF24Network::is_valid_address(unsigned int)>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:1232

/******************************************************************/

bool RF24Network::is_valid_address( uint16_t node )
{
  bool result = true;
   1f910:	81 e0       	ldi	r24, 0x01	; 1
   1f912:	08 95       	ret
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:1243
    if (digit < 1 || digit > 5)
	#else
	if (digit < 0 || digit > 5)	//Allow our out of range multicast address
	#endif
    {
      result = false;
   1f914:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:1251
    }
    node >>= 3;
  }

  return result;
}
   1f916:	08 95       	ret

0001f918 <levelToAddress(unsigned char)>:
_Z14levelToAddressh():
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:1265
  }
  
uint16_t levelToAddress(uint8_t level){
	
	uint16_t levelAddr = 1;
	if(level){
   1f918:	88 23       	and	r24, r24
   1f91a:	79 f0       	breq	.+30     	; 0x1f93a <levelToAddress(unsigned char)+0x22>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:1266
		levelAddr = levelAddr << ((level-1) * 3);
   1f91c:	81 50       	subi	r24, 0x01	; 1
   1f91e:	99 0b       	sbc	r25, r25
   1f920:	9c 01       	movw	r18, r24
   1f922:	22 0f       	add	r18, r18
   1f924:	33 1f       	adc	r19, r19
   1f926:	28 0f       	add	r18, r24
   1f928:	39 1f       	adc	r19, r25
   1f92a:	81 e0       	ldi	r24, 0x01	; 1
   1f92c:	90 e0       	ldi	r25, 0x00	; 0
   1f92e:	02 c0       	rjmp	.+4      	; 0x1f934 <levelToAddress(unsigned char)+0x1c>
   1f930:	88 0f       	add	r24, r24
   1f932:	99 1f       	adc	r25, r25
   1f934:	2a 95       	dec	r18
   1f936:	e2 f7       	brpl	.-8      	; 0x1f930 <levelToAddress(unsigned char)+0x18>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:1270
	}else{
		return 0;		
	}
	return levelAddr;
   1f938:	08 95       	ret
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:1268
	
	uint16_t levelAddr = 1;
	if(level){
		levelAddr = levelAddr << ((level-1) * 3);
	}else{
		return 0;		
   1f93a:	90 e0       	ldi	r25, 0x00	; 0
   1f93c:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:1271
	}
	return levelAddr;
}  
   1f93e:	08 95       	ret

0001f940 <pipe_address(unsigned int, unsigned char)>:
_Z12pipe_addressjh():
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:1276
#endif
/******************************************************************/

uint64_t pipe_address( uint16_t node, uint8_t pipe )
{
   1f940:	cf 93       	push	r28
   1f942:	df 93       	push	r29
   1f944:	00 d0       	rcall	.+0      	; 0x1f946 <pipe_address(unsigned int, unsigned char)+0x6>
   1f946:	00 d0       	rcall	.+0      	; 0x1f948 <pipe_address(unsigned int, unsigned char)+0x8>
   1f948:	1f 92       	push	r1
   1f94a:	1f 92       	push	r1
   1f94c:	cd b7       	in	r28, 0x3d	; 61
   1f94e:	de b7       	in	r29, 0x3e	; 62
   1f950:	ac 01       	movw	r20, r24
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:1279
  
  static uint8_t address_translation[] = { 0xc3,0x3c,0x33,0xce,0x3e,0xe3,0xec };
  uint64_t result = 0xCCCCCCCCCCLL;
   1f952:	9c ec       	ldi	r25, 0xCC	; 204
   1f954:	99 83       	std	Y+1, r25	; 0x01
   1f956:	9a 83       	std	Y+2, r25	; 0x02
   1f958:	9b 83       	std	Y+3, r25	; 0x03
   1f95a:	9c 83       	std	Y+4, r25	; 0x04
   1f95c:	9d 83       	std	Y+5, r25	; 0x05
   1f95e:	1e 82       	std	Y+6, r1	; 0x06
   1f960:	1f 82       	std	Y+7, r1	; 0x07
   1f962:	18 86       	std	Y+8, r1	; 0x08
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:1283
  uint8_t* out = reinterpret_cast<uint8_t*>(&result);
  
  // Translate the address to use our optimally chosen radio address bytes
	uint8_t count = 1; uint16_t dec = node;
   1f964:	9a 01       	movw	r18, r20
   1f966:	e1 e0       	ldi	r30, 0x01	; 1
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:1285

	while(dec){
   1f968:	21 15       	cp	r18, r1
   1f96a:	31 05       	cpc	r19, r1
   1f96c:	c9 f0       	breq	.+50     	; 0x1f9a0 <pipe_address(unsigned int, unsigned char)+0x60>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:1287
	  #if defined (RF24NetworkMulticast)
	  if(pipe != 0 || !node)
   1f96e:	61 11       	cpse	r22, r1
   1f970:	03 c0       	rjmp	.+6      	; 0x1f978 <pipe_address(unsigned int, unsigned char)+0x38>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:1287 (discriminator 1)
   1f972:	41 15       	cp	r20, r1
   1f974:	51 05       	cpc	r21, r1
   1f976:	69 f4       	brne	.+26     	; 0x1f992 <pipe_address(unsigned int, unsigned char)+0x52>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:1289
      #endif
		out[count]=address_translation[(dec % 8)];		// Convert our decimal values to octal, translate them to address bytes, and set our address
   1f978:	d9 01       	movw	r26, r18
   1f97a:	a7 70       	andi	r26, 0x07	; 7
   1f97c:	bb 27       	eor	r27, r27
   1f97e:	a1 56       	subi	r26, 0x61	; 97
   1f980:	b6 4f       	sbci	r27, 0xF6	; 246
   1f982:	8c 91       	ld	r24, X
   1f984:	a1 e0       	ldi	r26, 0x01	; 1
   1f986:	b0 e0       	ldi	r27, 0x00	; 0
   1f988:	ac 0f       	add	r26, r28
   1f98a:	bd 1f       	adc	r27, r29
   1f98c:	ae 0f       	add	r26, r30
   1f98e:	b1 1d       	adc	r27, r1
   1f990:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:1291
	  
	  dec /= 8;	
   1f992:	83 e0       	ldi	r24, 0x03	; 3
   1f994:	36 95       	lsr	r19
   1f996:	27 95       	ror	r18
   1f998:	8a 95       	dec	r24
   1f99a:	e1 f7       	brne	.-8      	; 0x1f994 <pipe_address(unsigned int, unsigned char)+0x54>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:1292
	  count++;
   1f99c:	ef 5f       	subi	r30, 0xFF	; 255
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:1285
  uint8_t* out = reinterpret_cast<uint8_t*>(&result);
  
  // Translate the address to use our optimally chosen radio address bytes
	uint8_t count = 1; uint16_t dec = node;

	while(dec){
   1f99e:	e4 cf       	rjmp	.-56     	; 0x1f968 <pipe_address(unsigned int, unsigned char)+0x28>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:1296
	  dec /= 8;	
	  count++;
	}
    
	#if defined (RF24NetworkMulticast)
	if(pipe != 0 || !node)
   1f9a0:	61 11       	cpse	r22, r1
   1f9a2:	02 c0       	rjmp	.+4      	; 0x1f9a8 <pipe_address(unsigned int, unsigned char)+0x68>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:1296 (discriminator 1)
   1f9a4:	45 2b       	or	r20, r21
   1f9a6:	b9 f4       	brne	.+46     	; 0x1f9d6 <pipe_address(unsigned int, unsigned char)+0x96>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:1298
	#endif
	  out[0] = address_translation[pipe];
   1f9a8:	e6 2f       	mov	r30, r22
   1f9aa:	f0 e0       	ldi	r31, 0x00	; 0
   1f9ac:	e1 56       	subi	r30, 0x61	; 97
   1f9ae:	f6 4f       	sbci	r31, 0xF6	; 246
   1f9b0:	80 81       	ld	r24, Z
   1f9b2:	89 83       	std	Y+1, r24	; 0x01
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:1312
  IF_SERIAL_DEBUG(uint32_t* top = reinterpret_cast<uint32_t*>(out+1);printf_P(PSTR("%u: NET Pipe %i on node 0%o has address %x%x\n\r"),millis(),pipe,node,*top,*out));
  #else
  IF_SERIAL_DEBUG(uint32_t* top = reinterpret_cast<uint32_t*>(out+1);printf_P(PSTR("%lu: NET Pipe %i on node 0%o has address %lx%x\n\r"),millis(),pipe,node,*top,*out));
  #endif
  
  return result;
   1f9b4:	29 81       	ldd	r18, Y+1	; 0x01
   1f9b6:	3a 81       	ldd	r19, Y+2	; 0x02
   1f9b8:	4b 81       	ldd	r20, Y+3	; 0x03
   1f9ba:	5c 81       	ldd	r21, Y+4	; 0x04
   1f9bc:	6d 81       	ldd	r22, Y+5	; 0x05
   1f9be:	7e 81       	ldd	r23, Y+6	; 0x06
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:1313
}
   1f9c0:	8f 81       	ldd	r24, Y+7	; 0x07
   1f9c2:	98 85       	ldd	r25, Y+8	; 0x08
   1f9c4:	28 96       	adiw	r28, 0x08	; 8
   1f9c6:	0f b6       	in	r0, 0x3f	; 63
   1f9c8:	f8 94       	cli
   1f9ca:	de bf       	out	0x3e, r29	; 62
   1f9cc:	0f be       	out	0x3f, r0	; 63
   1f9ce:	cd bf       	out	0x3d, r28	; 61
   1f9d0:	df 91       	pop	r29
   1f9d2:	cf 91       	pop	r28
   1f9d4:	08 95       	ret
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:1301
	if(pipe != 0 || !node)
	#endif
	  out[0] = address_translation[pipe];
	#if defined (RF24NetworkMulticast)
	else
	  out[1] = address_translation[count-1];
   1f9d6:	f0 e0       	ldi	r31, 0x00	; 0
   1f9d8:	e2 56       	subi	r30, 0x62	; 98
   1f9da:	f6 4f       	sbci	r31, 0xF6	; 246
   1f9dc:	80 81       	ld	r24, Z
   1f9de:	8a 83       	std	Y+2, r24	; 0x02
   1f9e0:	e9 cf       	rjmp	.-46     	; 0x1f9b4 <pipe_address(unsigned int, unsigned char)+0x74>

0001f9e2 <RF24Network::begin(unsigned char, unsigned int)>:
_ZN11RF24Network5beginEhj():
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:84
}
#endif
/******************************************************************/

void RF24Network::begin(uint8_t _channel, uint16_t _node_address )
{
   1f9e2:	8f 92       	push	r8
   1f9e4:	9f 92       	push	r9
   1f9e6:	af 92       	push	r10
   1f9e8:	bf 92       	push	r11
   1f9ea:	df 92       	push	r13
   1f9ec:	ef 92       	push	r14
   1f9ee:	ff 92       	push	r15
   1f9f0:	0f 93       	push	r16
   1f9f2:	1f 93       	push	r17
   1f9f4:	cf 93       	push	r28
   1f9f6:	df 93       	push	r29
   1f9f8:	ec 01       	movw	r28, r24
   1f9fa:	16 2f       	mov	r17, r22
   1f9fc:	5a 01       	movw	r10, r20
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:85
  if (! is_valid_address(_node_address) )
   1f9fe:	ba 01       	movw	r22, r20
   1fa00:	0e 94 7b fc 	call	0x1f8f6	; 0x1f8f6 <RF24Network::is_valid_address(unsigned int)>
   1fa04:	88 23       	and	r24, r24
   1fa06:	09 f4       	brne	.+2      	; 0x1fa0a <RF24Network::begin(unsigned char, unsigned int)+0x28>
   1fa08:	60 c0       	rjmp	.+192    	; 0x1faca <RF24Network::begin(unsigned char, unsigned int)+0xe8>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:88
    return;

  node_address = _node_address;
   1fa0a:	bb aa       	std	Y+51, r11	; 0x33
   1fa0c:	aa aa       	std	Y+50, r10	; 0x32
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:90

  if ( ! radio.isValid() ){
   1fa0e:	8f a5       	ldd	r24, Y+47	; 0x2f
   1fa10:	98 a9       	ldd	r25, Y+48	; 0x30
_ZN4RF247isValidEv():
/home/saric/Arduino/libraries/RF24/RF24.h:649
   * debugging.  Setting either pin to 0xff is the way to
   * indicate that this is not a real radio.
   *
   * @return true if this is a legitimate radio
   */
  bool isValid() { return ce_pin != 0xff && csn_pin != 0xff; }
   1fa12:	fc 01       	movw	r30, r24
   1fa14:	20 81       	ld	r18, Z
   1fa16:	31 81       	ldd	r19, Z+1	; 0x01
   1fa18:	2f 3f       	cpi	r18, 0xFF	; 255
   1fa1a:	31 05       	cpc	r19, r1
   1fa1c:	09 f4       	brne	.+2      	; 0x1fa20 <RF24Network::begin(unsigned char, unsigned int)+0x3e>
   1fa1e:	55 c0       	rjmp	.+170    	; 0x1faca <RF24Network::begin(unsigned char, unsigned int)+0xe8>
   1fa20:	22 81       	ldd	r18, Z+2	; 0x02
   1fa22:	33 81       	ldd	r19, Z+3	; 0x03
   1fa24:	2f 3f       	cpi	r18, 0xFF	; 255
   1fa26:	31 05       	cpc	r19, r1
   1fa28:	09 f4       	brne	.+2      	; 0x1fa2c <RF24Network::begin(unsigned char, unsigned int)+0x4a>
   1fa2a:	4f c0       	rjmp	.+158    	; 0x1faca <RF24Network::begin(unsigned char, unsigned int)+0xe8>
_ZN11RF24Network5beginEhj():
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:95
    return;
  }

  // Set up the radio the way we want it to look
  if(_channel != USE_CURRENT_CHANNEL){
   1fa2c:	1f 3f       	cpi	r17, 0xFF	; 255
   1fa2e:	19 f0       	breq	.+6      	; 0x1fa36 <RF24Network::begin(unsigned char, unsigned int)+0x54>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:96
    radio.setChannel(_channel);
   1fa30:	61 2f       	mov	r22, r17
   1fa32:	0e 94 9b f5 	call	0x1eb36	; 0x1eb36 <RF24::setChannel(unsigned char)>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:99
  }
  //radio.enableDynamicAck();
  radio.setAutoAck(0,0);
   1fa36:	40 e0       	ldi	r20, 0x00	; 0
   1fa38:	60 e0       	ldi	r22, 0x00	; 0
   1fa3a:	8f a5       	ldd	r24, Y+47	; 0x2f
   1fa3c:	98 a9       	ldd	r25, Y+48	; 0x30
   1fa3e:	0e 94 17 f8 	call	0x1f02e	; 0x1f02e <RF24::setAutoAck(unsigned char, bool)>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:102
  
  #if defined (ENABLE_DYNAMIC_PAYLOADS)
  radio.enableDynamicPayloads();
   1fa42:	8f a5       	ldd	r24, Y+47	; 0x2f
   1fa44:	98 a9       	ldd	r25, Y+48	; 0x30
   1fa46:	0e 94 e1 f7 	call	0x1efc2	; 0x1efc2 <RF24::enableDynamicPayloads()>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:106
  #endif
  
  // Use different retry periods to reduce data collisions
  uint8_t retryVar = (((node_address % 6)+1) *2) + 3;
   1fa4a:	8a a9       	ldd	r24, Y+50	; 0x32
   1fa4c:	9b a9       	ldd	r25, Y+51	; 0x33
   1fa4e:	66 e0       	ldi	r22, 0x06	; 6
   1fa50:	70 e0       	ldi	r23, 0x00	; 0
   1fa52:	0f 94 35 16 	call	0x22c6a	; 0x22c6a <__udivmodhi4>
   1fa56:	68 2f       	mov	r22, r24
   1fa58:	66 0f       	add	r22, r22
   1fa5a:	6b 5f       	subi	r22, 0xFB	; 251
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:107
  radio.setRetries(retryVar, 5); // max about 85ms per attempt
   1fa5c:	45 e0       	ldi	r20, 0x05	; 5
   1fa5e:	8f a5       	ldd	r24, Y+47	; 0x2f
   1fa60:	98 a9       	ldd	r25, Y+48	; 0x30
   1fa62:	0e 94 ec f9 	call	0x1f3d8	; 0x1f3d8 <RF24::setRetries(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:108
  txTimeout = 25;
   1fa66:	89 e1       	ldi	r24, 0x19	; 25
   1fa68:	90 e0       	ldi	r25, 0x00	; 0
   1fa6a:	a0 e0       	ldi	r26, 0x00	; 0
   1fa6c:	b0 e0       	ldi	r27, 0x00	; 0
   1fa6e:	89 83       	std	Y+1, r24	; 0x01
   1fa70:	9a 83       	std	Y+2, r25	; 0x02
   1fa72:	ab 83       	std	Y+3, r26	; 0x03
   1fa74:	bc 83       	std	Y+4, r27	; 0x04
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:109
  routeTimeout = txTimeout*3; // Adjust for max delay per node within a single chain
   1fa76:	8b e4       	ldi	r24, 0x4B	; 75
   1fa78:	90 e0       	ldi	r25, 0x00	; 0
   1fa7a:	9e 83       	std	Y+6, r25	; 0x06
   1fa7c:	8d 83       	std	Y+5, r24	; 0x05
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:119
  radio1.enableDynamicAck();
  radio1.enableDynamicPayloads();
#endif

  // Setup our address helper cache
  setup_address();
   1fa7e:	ce 01       	movw	r24, r28
   1fa80:	0e 94 43 fc 	call	0x1f886	; 0x1f886 <RF24Network::setup_address()>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:122

  // Open up all listening pipes
  uint8_t i = 6;
   1fa84:	86 e0       	ldi	r24, 0x06	; 6
   1fa86:	d8 2e       	mov	r13, r24
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:123
  while (i--){
   1fa88:	da 94       	dec	r13
   1fa8a:	8f a4       	ldd	r8, Y+47	; 0x2f
   1fa8c:	98 a8       	ldd	r9, Y+48	; 0x30
   1fa8e:	ff ef       	ldi	r31, 0xFF	; 255
   1fa90:	df 16       	cp	r13, r31
   1fa92:	69 f0       	breq	.+26     	; 0x1faae <RF24Network::begin(unsigned char, unsigned int)+0xcc>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:124
    radio.openReadingPipe(i,pipe_address(_node_address,i));	
   1fa94:	6d 2d       	mov	r22, r13
   1fa96:	c5 01       	movw	r24, r10
   1fa98:	0e 94 a0 fc 	call	0x1f940	; 0x1f940 <pipe_address(unsigned int, unsigned char)>
   1fa9c:	79 01       	movw	r14, r18
   1fa9e:	8a 01       	movw	r16, r20
   1faa0:	9b 01       	movw	r18, r22
   1faa2:	ac 01       	movw	r20, r24
   1faa4:	6d 2d       	mov	r22, r13
   1faa6:	c4 01       	movw	r24, r8
   1faa8:	0e 94 11 f7 	call	0x1ee22	; 0x1ee22 <RF24::openReadingPipe(unsigned char, unsigned long long)>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:123
  // Setup our address helper cache
  setup_address();

  // Open up all listening pipes
  uint8_t i = 6;
  while (i--){
   1faac:	ed cf       	rjmp	.-38     	; 0x1fa88 <RF24Network::begin(unsigned char, unsigned int)+0xa6>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:126
    radio.openReadingPipe(i,pipe_address(_node_address,i));	
  }
  radio.startListening();
   1faae:	c4 01       	movw	r24, r8
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:128

}
   1fab0:	df 91       	pop	r29
   1fab2:	cf 91       	pop	r28
   1fab4:	1f 91       	pop	r17
   1fab6:	0f 91       	pop	r16
   1fab8:	ff 90       	pop	r15
   1faba:	ef 90       	pop	r14
   1fabc:	df 90       	pop	r13
   1fabe:	bf 90       	pop	r11
   1fac0:	af 90       	pop	r10
   1fac2:	9f 90       	pop	r9
   1fac4:	8f 90       	pop	r8
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:126
  // Open up all listening pipes
  uint8_t i = 6;
  while (i--){
    radio.openReadingPipe(i,pipe_address(_node_address,i));	
  }
  radio.startListening();
   1fac6:	0c 94 9b f7 	jmp	0x1ef36	; 0x1ef36 <RF24::startListening()>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:128

}
   1faca:	df 91       	pop	r29
   1facc:	cf 91       	pop	r28
   1face:	1f 91       	pop	r17
   1fad0:	0f 91       	pop	r16
   1fad2:	ff 90       	pop	r15
   1fad4:	ef 90       	pop	r14
   1fad6:	df 90       	pop	r13
   1fad8:	bf 90       	pop	r11
   1fada:	af 90       	pop	r10
   1fadc:	9f 90       	pop	r9
   1fade:	8f 90       	pop	r8
   1fae0:	08 95       	ret

0001fae2 <RF24Network::write_to_pipe(unsigned int, unsigned char, bool)>:
_ZN11RF24Network13write_to_pipeEjhb():
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:1062

/********************************************************/


bool RF24Network::write_to_pipe( uint16_t node, uint8_t pipe, bool multicast )
{
   1fae2:	9f 92       	push	r9
   1fae4:	af 92       	push	r10
   1fae6:	bf 92       	push	r11
   1fae8:	cf 92       	push	r12
   1faea:	df 92       	push	r13
   1faec:	ef 92       	push	r14
   1faee:	ff 92       	push	r15
   1faf0:	0f 93       	push	r16
   1faf2:	1f 93       	push	r17
   1faf4:	cf 93       	push	r28
   1faf6:	df 93       	push	r29
   1faf8:	ec 01       	movw	r28, r24
   1fafa:	cb 01       	movw	r24, r22
   1fafc:	92 2e       	mov	r9, r18
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:1064
  bool ok = false;
  uint64_t out_pipe = pipe_address( node, pipe );
   1fafe:	64 2f       	mov	r22, r20
   1fb00:	0e 94 a0 fc 	call	0x1f940	; 0x1f940 <pipe_address(unsigned int, unsigned char)>
   1fb04:	89 01       	movw	r16, r18
   1fb06:	5a 01       	movw	r10, r20
   1fb08:	6b 01       	movw	r12, r22
   1fb0a:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:1070
  
  #if !defined (DUAL_HEAD_RADIO)
  // Open the correct pipe for writing.
  // First, stop listening so we can talk

  if(!(networkFlags & FLAG_FAST_FRAG)){
   1fb0c:	8a a5       	ldd	r24, Y+42	; 0x2a
   1fb0e:	82 fd       	sbrc	r24, 2
   1fb10:	04 c0       	rjmp	.+8      	; 0x1fb1a <RF24Network::write_to_pipe(unsigned int, unsigned char, bool)+0x38>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:1071
    radio.stopListening();
   1fb12:	8f a5       	ldd	r24, Y+47	; 0x2f
   1fb14:	98 a9       	ldd	r25, Y+48	; 0x30
   1fb16:	0e 94 a2 f5 	call	0x1eb44	; 0x1eb44 <RF24::stopListening()>
   1fb1a:	8f a5       	ldd	r24, Y+47	; 0x2f
   1fb1c:	98 a9       	ldd	r25, Y+48	; 0x30
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:1074
  }
  
  if(multicast){ radio.setAutoAck(0,0);}else{radio.setAutoAck(0,1);}
   1fb1e:	40 e0       	ldi	r20, 0x00	; 0
   1fb20:	91 10       	cpse	r9, r1
   1fb22:	01 c0       	rjmp	.+2      	; 0x1fb26 <RF24Network::write_to_pipe(unsigned int, unsigned char, bool)+0x44>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:1074 (discriminator 2)
   1fb24:	41 e0       	ldi	r20, 0x01	; 1
   1fb26:	60 e0       	ldi	r22, 0x00	; 0
   1fb28:	0e 94 17 f8 	call	0x1f02e	; 0x1f02e <RF24::setAutoAck(unsigned char, bool)>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:1076 (discriminator 2)
  
  radio.openWritingPipe(out_pipe);
   1fb2c:	95 01       	movw	r18, r10
   1fb2e:	a6 01       	movw	r20, r12
   1fb30:	b7 01       	movw	r22, r14
   1fb32:	8f a5       	ldd	r24, Y+47	; 0x2f
   1fb34:	98 a9       	ldd	r25, Y+48	; 0x30
   1fb36:	0e 94 d8 f6 	call	0x1edb0	; 0x1edb0 <RF24::openWritingPipe(unsigned long long)>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:1078 (discriminator 2)

  ok = radio.writeFast(frame_buffer, frame_size,0);
   1fb3a:	20 e0       	ldi	r18, 0x00	; 0
   1fb3c:	4c a9       	ldd	r20, Y+52	; 0x34
   1fb3e:	be 01       	movw	r22, r28
   1fb40:	69 5f       	subi	r22, 0xF9	; 249
   1fb42:	7f 4f       	sbci	r23, 0xFF	; 255
   1fb44:	8f a5       	ldd	r24, Y+47	; 0x2f
   1fb46:	98 a9       	ldd	r25, Y+48	; 0x30
   1fb48:	0e 94 09 f6 	call	0x1ec12	; 0x1ec12 <RF24::writeFast(void const*, unsigned char, bool)>
   1fb4c:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:1080 (discriminator 2)
  
  if(!(networkFlags & FLAG_FAST_FRAG)){
   1fb4e:	8a a5       	ldd	r24, Y+42	; 0x2a
   1fb50:	82 fd       	sbrc	r24, 2
   1fb52:	10 c0       	rjmp	.+32     	; 0x1fb74 <RF24Network::write_to_pipe(unsigned int, unsigned char, bool)+0x92>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:1081
    ok = radio.txStandBy(txTimeout);
   1fb54:	49 81       	ldd	r20, Y+1	; 0x01
   1fb56:	5a 81       	ldd	r21, Y+2	; 0x02
   1fb58:	6b 81       	ldd	r22, Y+3	; 0x03
   1fb5a:	7c 81       	ldd	r23, Y+4	; 0x04
   1fb5c:	20 e0       	ldi	r18, 0x00	; 0
   1fb5e:	8f a5       	ldd	r24, Y+47	; 0x2f
   1fb60:	98 a9       	ldd	r25, Y+48	; 0x30
   1fb62:	0e 94 35 f6 	call	0x1ec6a	; 0x1ec6a <RF24::txStandBy(unsigned long, bool)>
   1fb66:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:1082
    radio.setAutoAck(0,0);
   1fb68:	40 e0       	ldi	r20, 0x00	; 0
   1fb6a:	60 e0       	ldi	r22, 0x00	; 0
   1fb6c:	8f a5       	ldd	r24, Y+47	; 0x2f
   1fb6e:	98 a9       	ldd	r25, Y+48	; 0x30
   1fb70:	0e 94 17 f8 	call	0x1f02e	; 0x1f02e <RF24::setAutoAck(unsigned char, bool)>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:1099
  #else
  IF_SERIAL_DEBUG(printf_P(PSTR("%lu: MAC Sent on %lx %S\n\r"),millis(),(uint32_t)out_pipe,ok?PSTR("ok"):PSTR("failed")));
  #endif
*/  
  return ok;
}
   1fb74:	81 2f       	mov	r24, r17
   1fb76:	df 91       	pop	r29
   1fb78:	cf 91       	pop	r28
   1fb7a:	1f 91       	pop	r17
   1fb7c:	0f 91       	pop	r16
   1fb7e:	ff 90       	pop	r15
   1fb80:	ef 90       	pop	r14
   1fb82:	df 90       	pop	r13
   1fb84:	cf 90       	pop	r12
   1fb86:	bf 90       	pop	r11
   1fb88:	af 90       	pop	r10
   1fb8a:	9f 90       	pop	r9
   1fb8c:	08 95       	ret

0001fb8e <RF24Network::write(unsigned int, unsigned char)>:
_ZN11RF24Network5writeEjh():
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:905
}

/******************************************************************/

bool RF24Network::write(uint16_t to_node, uint8_t directTo)  // Direct To: 0 = First Payload, standard routing, 1=routed payload, 2=directRoute to host, 3=directRoute to Route
{
   1fb8e:	8f 92       	push	r8
   1fb90:	9f 92       	push	r9
   1fb92:	af 92       	push	r10
   1fb94:	bf 92       	push	r11
   1fb96:	cf 92       	push	r12
   1fb98:	df 92       	push	r13
   1fb9a:	ef 92       	push	r14
   1fb9c:	ff 92       	push	r15
   1fb9e:	0f 93       	push	r16
   1fba0:	1f 93       	push	r17
   1fba2:	cf 93       	push	r28
   1fba4:	df 93       	push	r29
   1fba6:	00 d0       	rcall	.+0      	; 0x1fba8 <RF24Network::write(unsigned int, unsigned char)+0x1a>
   1fba8:	1f 92       	push	r1
   1fbaa:	1f 92       	push	r1
   1fbac:	cd b7       	in	r28, 0x3d	; 61
   1fbae:	de b7       	in	r29, 0x3e	; 62
   1fbb0:	8c 01       	movw	r16, r24
   1fbb2:	6b 01       	movw	r12, r22
   1fbb4:	f4 2e       	mov	r15, r20
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:915
  /*if( ( (frame_buffer[7] % 2) && frame_buffer[6] == NETWORK_MORE_FRAGMENTS) ){
	isAckType = 0;
  }*/
  
  // Throw it away if it's not a valid address
  if ( !is_valid_address(to_node) )
   1fbb6:	0e 94 7b fc 	call	0x1f8f6	; 0x1f8f6 <RF24Network::is_valid_address(unsigned int)>
   1fbba:	e8 2e       	mov	r14, r24
   1fbbc:	88 23       	and	r24, r24
   1fbbe:	09 f4       	brne	.+2      	; 0x1fbc2 <RF24Network::write(unsigned int, unsigned char)+0x34>
   1fbc0:	90 c0       	rjmp	.+288    	; 0x1fce2 <RF24Network::write(unsigned int, unsigned char)+0x154>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:908

bool RF24Network::write(uint16_t to_node, uint8_t directTo)  // Direct To: 0 = First Payload, standard routing, 1=routed payload, 2=directRoute to host, 3=directRoute to Route
{
  bool ok = false;
  bool isAckType = false;
  if(frame_buffer[6] > 64 && frame_buffer[6] < 192 ){ isAckType=true; }
   1fbc2:	f8 01       	movw	r30, r16
   1fbc4:	85 85       	ldd	r24, Z+13	; 0x0d
   1fbc6:	81 54       	subi	r24, 0x41	; 65
   1fbc8:	8d 83       	std	Y+5, r24	; 0x05
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:919
  // Throw it away if it's not a valid address
  if ( !is_valid_address(to_node) )
    return false;  
  
  //Load info into our conversion structure, and get the converted address info
  logicalToPhysicalStruct conversion = { to_node,directTo,0};
   1fbca:	1c 82       	std	Y+4, r1	; 0x04
   1fbcc:	1b 82       	std	Y+3, r1	; 0x03
   1fbce:	da 82       	std	Y+2, r13	; 0x02
   1fbd0:	c9 82       	std	Y+1, r12	; 0x01
   1fbd2:	fb 82       	std	Y+3, r15	; 0x03
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:920
  logicalToPhysicalAddress(&conversion);
   1fbd4:	be 01       	movw	r22, r28
   1fbd6:	6f 5f       	subi	r22, 0xFF	; 255
   1fbd8:	7f 4f       	sbci	r23, 0xFF	; 255
   1fbda:	c8 01       	movw	r24, r16
   1fbdc:	0e 94 02 fc 	call	0x1f804	; 0x1f804 <RF24Network::logicalToPhysicalAddress(RF24Network::logicalToPhysicalStruct*)>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:928
  IF_SERIAL_DEBUG(printf_P(PSTR("%u: MAC Sending to 0%o via 0%o on pipe %x\n\r"),millis(),to_node,conversion.send_node,conversion.send_pipe));
  #else
  IF_SERIAL_DEBUG(printf_P(PSTR("%lu: MAC Sending to 0%o via 0%o on pipe %x\n\r"),millis(),to_node,conversion.send_node,conversion.send_pipe));
  #endif
  /**Write it*/
  ok=write_to_pipe(conversion.send_node, conversion.send_pipe, conversion.multicast);  	
   1fbe0:	69 81       	ldd	r22, Y+1	; 0x01
   1fbe2:	7a 81       	ldd	r23, Y+2	; 0x02
   1fbe4:	2c 81       	ldd	r18, Y+4	; 0x04
   1fbe6:	4b 81       	ldd	r20, Y+3	; 0x03
   1fbe8:	c8 01       	movw	r24, r16
   1fbea:	0e 94 71 fd 	call	0x1fae2	; 0x1fae2 <RF24Network::write_to_pipe(unsigned int, unsigned char, bool)>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:940
	#else
	IF_SERIAL_DEBUG_ROUTING( printf_P(PSTR("%lu: MAC Send fail to 0%o via 0%o on pipe %x\n\r"),millis(),to_node,conversion.send_node,conversion.send_pipe););
	}
	#endif
 
	if( directTo == TX_ROUTED && ok && conversion.send_node == to_node && isAckType){
   1fbee:	f1 e0       	ldi	r31, 0x01	; 1
   1fbf0:	ff 12       	cpse	r15, r31
   1fbf2:	6c c0       	rjmp	.+216    	; 0x1fccc <RF24Network::write(unsigned int, unsigned char)+0x13e>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:940 (discriminator 1)
   1fbf4:	88 23       	and	r24, r24
   1fbf6:	09 f4       	brne	.+2      	; 0x1fbfa <RF24Network::write(unsigned int, unsigned char)+0x6c>
   1fbf8:	6b c0       	rjmp	.+214    	; 0x1fcd0 <RF24Network::write(unsigned int, unsigned char)+0x142>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:940 (discriminator 2)
   1fbfa:	89 81       	ldd	r24, Y+1	; 0x01
   1fbfc:	9a 81       	ldd	r25, Y+2	; 0x02
   1fbfe:	8c 15       	cp	r24, r12
   1fc00:	9d 05       	cpc	r25, r13
   1fc02:	f1 f4       	brne	.+60     	; 0x1fc40 <RF24Network::write(unsigned int, unsigned char)+0xb2>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:940 (discriminator 3)
   1fc04:	8d 81       	ldd	r24, Y+5	; 0x05
   1fc06:	8f 37       	cpi	r24, 0x7F	; 127
   1fc08:	d8 f4       	brcc	.+54     	; 0x1fc40 <RF24Network::write(unsigned int, unsigned char)+0xb2>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:943
			
			RF24NetworkHeader* header = (RF24NetworkHeader*)&frame_buffer;
			header->type = NETWORK_ACK;				    // Set the payload type to NETWORK_ACK			
   1fc0a:	81 ec       	ldi	r24, 0xC1	; 193
   1fc0c:	f8 01       	movw	r30, r16
   1fc0e:	85 87       	std	Z+13, r24	; 0x0d
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:944
			header->to_node = header->from_node;          // Change the 'to' address to the 'from' address			
   1fc10:	87 81       	ldd	r24, Z+7	; 0x07
   1fc12:	90 85       	ldd	r25, Z+8	; 0x08
   1fc14:	92 87       	std	Z+10, r25	; 0x0a
   1fc16:	81 87       	std	Z+9, r24	; 0x09
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:946

			conversion.send_node = header->from_node;
   1fc18:	9a 83       	std	Y+2, r25	; 0x02
   1fc1a:	89 83       	std	Y+1, r24	; 0x01
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:947
			conversion.send_pipe = TX_ROUTED;
   1fc1c:	fb 82       	std	Y+3, r15	; 0x03
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:948
			conversion.multicast = 0;
   1fc1e:	1c 82       	std	Y+4, r1	; 0x04
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:949
			logicalToPhysicalAddress(&conversion);
   1fc20:	be 01       	movw	r22, r28
   1fc22:	6f 5f       	subi	r22, 0xFF	; 255
   1fc24:	7f 4f       	sbci	r23, 0xFF	; 255
   1fc26:	c8 01       	movw	r24, r16
   1fc28:	0e 94 02 fc 	call	0x1f804	; 0x1f804 <RF24Network::logicalToPhysicalAddress(RF24Network::logicalToPhysicalStruct*)>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:952
			
			//Write the data using the resulting physical address
			frame_size = sizeof(RF24NetworkHeader);
   1fc2c:	88 e0       	ldi	r24, 0x08	; 8
   1fc2e:	f8 01       	movw	r30, r16
   1fc30:	84 ab       	std	Z+52, r24	; 0x34
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:953
			write_to_pipe(conversion.send_node, conversion.send_pipe, conversion.multicast);
   1fc32:	69 81       	ldd	r22, Y+1	; 0x01
   1fc34:	7a 81       	ldd	r23, Y+2	; 0x02
   1fc36:	2c 81       	ldd	r18, Y+4	; 0x04
   1fc38:	4b 81       	ldd	r20, Y+3	; 0x03
   1fc3a:	c8 01       	movw	r24, r16
   1fc3c:	0e 94 71 fd 	call	0x1fae2	; 0x1fae2 <RF24Network::write_to_pipe(unsigned int, unsigned char, bool)>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:965 (discriminator 1)
			#endif
	}
 


	if( ok && conversion.send_node != to_node && (directTo==0 || directTo==3) && isAckType){
   1fc40:	89 81       	ldd	r24, Y+1	; 0x01
   1fc42:	9a 81       	ldd	r25, Y+2	; 0x02
   1fc44:	8c 15       	cp	r24, r12
   1fc46:	9d 05       	cpc	r25, r13
   1fc48:	09 f4       	brne	.+2      	; 0x1fc4c <RF24Network::write(unsigned int, unsigned char)+0xbe>
   1fc4a:	43 c0       	rjmp	.+134    	; 0x1fcd2 <RF24Network::write(unsigned int, unsigned char)+0x144>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:965 (discriminator 2)
   1fc4c:	ff 20       	and	r15, r15
   1fc4e:	19 f0       	breq	.+6      	; 0x1fc56 <RF24Network::write(unsigned int, unsigned char)+0xc8>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:965 (discriminator 4)
   1fc50:	f3 e0       	ldi	r31, 0x03	; 3
   1fc52:	ff 12       	cpse	r15, r31
   1fc54:	3e c0       	rjmp	.+124    	; 0x1fcd2 <RF24Network::write(unsigned int, unsigned char)+0x144>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:965 (discriminator 5)
   1fc56:	8d 81       	ldd	r24, Y+5	; 0x05
   1fc58:	8f 37       	cpi	r24, 0x7F	; 127
   1fc5a:	d8 f5       	brcc	.+118    	; 0x1fcd2 <RF24Network::write(unsigned int, unsigned char)+0x144>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:968
	    #if !defined (DUAL_HEAD_RADIO)
          // Now, continue listening
		  if(networkFlags & FLAG_FAST_FRAG){
   1fc5c:	f8 01       	movw	r30, r16
   1fc5e:	82 a5       	ldd	r24, Z+42	; 0x2a
   1fc60:	82 ff       	sbrs	r24, 2
   1fc62:	13 c0       	rjmp	.+38     	; 0x1fc8a <RF24Network::write(unsigned int, unsigned char)+0xfc>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:969
			 radio.txStandBy(txTimeout);
   1fc64:	41 81       	ldd	r20, Z+1	; 0x01
   1fc66:	52 81       	ldd	r21, Z+2	; 0x02
   1fc68:	63 81       	ldd	r22, Z+3	; 0x03
   1fc6a:	74 81       	ldd	r23, Z+4	; 0x04
   1fc6c:	20 e0       	ldi	r18, 0x00	; 0
   1fc6e:	87 a5       	ldd	r24, Z+47	; 0x2f
   1fc70:	90 a9       	ldd	r25, Z+48	; 0x30
   1fc72:	0e 94 35 f6 	call	0x1ec6a	; 0x1ec6a <RF24::txStandBy(unsigned long, bool)>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:970
             networkFlags &= ~FLAG_FAST_FRAG;
   1fc76:	f8 01       	movw	r30, r16
   1fc78:	82 a5       	ldd	r24, Z+42	; 0x2a
   1fc7a:	8b 7f       	andi	r24, 0xFB	; 251
   1fc7c:	82 a7       	std	Z+42, r24	; 0x2a
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:971
             radio.setAutoAck(0,0); 
   1fc7e:	40 e0       	ldi	r20, 0x00	; 0
   1fc80:	60 e0       	ldi	r22, 0x00	; 0
   1fc82:	87 a5       	ldd	r24, Z+47	; 0x2f
   1fc84:	90 a9       	ldd	r25, Z+48	; 0x30
   1fc86:	0e 94 17 f8 	call	0x1f02e	; 0x1f02e <RF24::setAutoAck(unsigned char, bool)>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:973
		  }
          radio.startListening();
   1fc8a:	f8 01       	movw	r30, r16
   1fc8c:	87 a5       	ldd	r24, Z+47	; 0x2f
   1fc8e:	90 a9       	ldd	r25, Z+48	; 0x30
   1fc90:	0e 94 9b f7 	call	0x1ef36	; 0x1ef36 <RF24::startListening()>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:975
        #endif
		uint32_t reply_time = millis(); 
   1fc94:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   1fc98:	4b 01       	movw	r8, r22
   1fc9a:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:977

		while( update() != NETWORK_ACK){
   1fc9c:	c8 01       	movw	r24, r16
   1fc9e:	0e 94 84 fe 	call	0x1fd08	; 0x1fd08 <RF24Network::update()>
   1fca2:	81 3c       	cpi	r24, 0xC1	; 193
   1fca4:	b1 f0       	breq	.+44     	; 0x1fcd2 <RF24Network::write(unsigned int, unsigned char)+0x144>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:981
			#if defined (RF24_LINUX)
            delayMicroseconds(900);
            #endif
			if(millis() - reply_time > routeTimeout){
   1fca6:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   1fcaa:	ab 01       	movw	r20, r22
   1fcac:	bc 01       	movw	r22, r24
   1fcae:	48 19       	sub	r20, r8
   1fcb0:	59 09       	sbc	r21, r9
   1fcb2:	6a 09       	sbc	r22, r10
   1fcb4:	7b 09       	sbc	r23, r11
   1fcb6:	f8 01       	movw	r30, r16
   1fcb8:	85 81       	ldd	r24, Z+5	; 0x05
   1fcba:	96 81       	ldd	r25, Z+6	; 0x06
   1fcbc:	b0 e0       	ldi	r27, 0x00	; 0
   1fcbe:	a0 e0       	ldi	r26, 0x00	; 0
   1fcc0:	84 17       	cp	r24, r20
   1fcc2:	95 07       	cpc	r25, r21
   1fcc4:	a6 07       	cpc	r26, r22
   1fcc6:	b7 07       	cpc	r27, r23
   1fcc8:	48 f7       	brcc	.-46     	; 0x1fc9c <RF24Network::write(unsigned int, unsigned char)+0x10e>
   1fcca:	02 c0       	rjmp	.+4      	; 0x1fcd0 <RF24Network::write(unsigned int, unsigned char)+0x142>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:965
			#endif
	}
 


	if( ok && conversion.send_node != to_node && (directTo==0 || directTo==3) && isAckType){
   1fccc:	81 11       	cpse	r24, r1
   1fcce:	b8 cf       	rjmp	.-144    	; 0x1fc40 <RF24Network::write(unsigned int, unsigned char)+0xb2>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:905
}

/******************************************************************/

bool RF24Network::write(uint16_t to_node, uint8_t directTo)  // Direct To: 0 = First Payload, standard routing, 1=routed payload, 2=directRoute to host, 3=directRoute to Route
{
   1fcd0:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:992
				ok=false;
				break;					
			}
		}
    }
    if( !(networkFlags & FLAG_FAST_FRAG) ){
   1fcd2:	f8 01       	movw	r30, r16
   1fcd4:	82 a5       	ldd	r24, Z+42	; 0x2a
   1fcd6:	82 fd       	sbrc	r24, 2
   1fcd8:	04 c0       	rjmp	.+8      	; 0x1fce2 <RF24Network::write(unsigned int, unsigned char)+0x154>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:995
	   #if !defined (DUAL_HEAD_RADIO)
         // Now, continue listening
         radio.startListening();
   1fcda:	87 a5       	ldd	r24, Z+47	; 0x2f
   1fcdc:	90 a9       	ldd	r25, Z+48	; 0x30
   1fcde:	0e 94 9b f7 	call	0x1ef36	; 0x1ef36 <RF24::startListening()>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:1006
			++nOK;
  }else{	++nFails;
  }
#endif
  return ok;
}
   1fce2:	8e 2d       	mov	r24, r14
   1fce4:	0f 90       	pop	r0
   1fce6:	0f 90       	pop	r0
   1fce8:	0f 90       	pop	r0
   1fcea:	0f 90       	pop	r0
   1fcec:	0f 90       	pop	r0
   1fcee:	df 91       	pop	r29
   1fcf0:	cf 91       	pop	r28
   1fcf2:	1f 91       	pop	r17
   1fcf4:	0f 91       	pop	r16
   1fcf6:	ff 90       	pop	r15
   1fcf8:	ef 90       	pop	r14
   1fcfa:	df 90       	pop	r13
   1fcfc:	cf 90       	pop	r12
   1fcfe:	bf 90       	pop	r11
   1fd00:	af 90       	pop	r10
   1fd02:	9f 90       	pop	r9
   1fd04:	8f 90       	pop	r8
   1fd06:	08 95       	ret

0001fd08 <RF24Network::update()>:
_ZN11RF24Network6updateEv():
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:142
#endif

/******************************************************************/

uint8_t RF24Network::update(void)
{
   1fd08:	3f 92       	push	r3
   1fd0a:	4f 92       	push	r4
   1fd0c:	5f 92       	push	r5
   1fd0e:	6f 92       	push	r6
   1fd10:	7f 92       	push	r7
   1fd12:	8f 92       	push	r8
   1fd14:	9f 92       	push	r9
   1fd16:	af 92       	push	r10
   1fd18:	bf 92       	push	r11
   1fd1a:	cf 92       	push	r12
   1fd1c:	df 92       	push	r13
   1fd1e:	ef 92       	push	r14
   1fd20:	ff 92       	push	r15
   1fd22:	0f 93       	push	r16
   1fd24:	1f 93       	push	r17
   1fd26:	cf 93       	push	r28
   1fd28:	df 93       	push	r29
   1fd2a:	00 d0       	rcall	.+0      	; 0x1fd2c <RF24Network::update()+0x24>
   1fd2c:	cd b7       	in	r28, 0x3d	; 61
   1fd2e:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:152
  // If bypass is enabled, continue although incoming user data may be dropped
  // Allows system payloads to be read while user cache is full
  // Incoming Hold prevents data from being read from the radio, preventing incoming payloads from being acked
  
  #if !defined (RF24_LINUX)
  if(!(networkFlags & FLAG_BYPASS_HOLDS)){
   1fd30:	fc 01       	movw	r30, r24
   1fd32:	22 a5       	ldd	r18, Z+42	; 0x2a
   1fd34:	21 fd       	sbrc	r18, 1
   1fd36:	17 c0       	rjmp	.+46     	; 0x1fd66 <RF24Network::update()+0x5e>
   1fd38:	e1 53       	subi	r30, 0x31	; 49
   1fd3a:	ff 4f       	sbci	r31, 0xFF	; 255
   1fd3c:	60 81       	ld	r22, Z
   1fd3e:	71 81       	ldd	r23, Z+1	; 0x01
   1fd40:	ac 01       	movw	r20, r24
   1fd42:	4b 5c       	subi	r20, 0xCB	; 203
   1fd44:	5f 4f       	sbci	r21, 0xFF	; 255
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:153
    if( (networkFlags & FLAG_HOLD_INCOMING) || (next_frame-frame_queue) + 34 > MAIN_BUFFER_SIZE ){
   1fd46:	20 fd       	sbrc	r18, 0
   1fd48:	06 c0       	rjmp	.+12     	; 0x1fd56 <RF24Network::update()+0x4e>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:153 (discriminator 1)
   1fd4a:	fb 01       	movw	r30, r22
   1fd4c:	e4 1b       	sub	r30, r20
   1fd4e:	f5 0b       	sbc	r31, r21
   1fd50:	e9 37       	cpi	r30, 0x79	; 121
   1fd52:	f1 05       	cpc	r31, r1
   1fd54:	44 f0       	brlt	.+16     	; 0x1fd66 <RF24Network::update()+0x5e>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:157
      if(!available()){
        networkFlags &= ~FLAG_HOLD_INCOMING;
      }else{
        return 0;
   1fd56:	31 2c       	mov	r3, r1
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:154
  // Incoming Hold prevents data from being read from the radio, preventing incoming payloads from being acked
  
  #if !defined (RF24_LINUX)
  if(!(networkFlags & FLAG_BYPASS_HOLDS)){
    if( (networkFlags & FLAG_HOLD_INCOMING) || (next_frame-frame_queue) + 34 > MAIN_BUFFER_SIZE ){
      if(!available()){
   1fd58:	46 17       	cp	r20, r22
   1fd5a:	57 07       	cpc	r21, r23
   1fd5c:	08 f4       	brcc	.+2      	; 0x1fd60 <RF24Network::update()+0x58>
   1fd5e:	a7 c0       	rjmp	.+334    	; 0x1feae <RF24Network::update()+0x1a6>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:155
        networkFlags &= ~FLAG_HOLD_INCOMING;
   1fd60:	2e 7f       	andi	r18, 0xFE	; 254
   1fd62:	fc 01       	movw	r30, r24
   1fd64:	22 a7       	std	Z+42, r18	; 0x2a
   1fd66:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:163
      }
    }
  }
  #endif
  
  uint32_t timeout = millis();
   1fd68:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   1fd6c:	2b 01       	movw	r4, r22
   1fd6e:	3c 01       	movw	r6, r24
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:145

uint8_t RF24Network::update(void)
{
  // if there is data ready
  uint8_t pipe_num;
  uint8_t returnVal = 0;
   1fd70:	31 2c       	mov	r3, r1
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:177
    #else
      frame_size=32;
    #endif
      // Dump the payloads until we've gotten everything
      // Fetch the payload, and see if this was the last one.
	  radio.read( frame_buffer, frame_size );
   1fd72:	68 01       	movw	r12, r16
   1fd74:	f7 e0       	ldi	r31, 0x07	; 7
   1fd76:	cf 0e       	add	r12, r31
   1fd78:	d1 1c       	adc	r13, r1
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:263
					IF_SERIAL_DEBUG_ROUTING( printf_P(PSTR("%u MAC: FWD multicast frame from 0%o to level %u\n"),millis(),header->from_node,multicast_level+1); );
					if ((node_address >> 3) != 0) {
					  // for all but the first level of nodes, those not directly connected to the master, we add the total delay per level
					  delayMicroseconds(600*4);
					}
					delayMicroseconds((node_address % 4)*600);
   1fd7a:	48 e5       	ldi	r20, 0x58	; 88
   1fd7c:	a4 2e       	mov	r10, r20
   1fd7e:	42 e0       	ldi	r20, 0x02	; 2
   1fd80:	b4 2e       	mov	r11, r20
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:250

				if(header->type == NETWORK_POLL  ){
                    if( !(networkFlags & FLAG_NO_POLL) && node_address != NETWORK_DEFAULT_ADDRESS ){
					  header->to_node = header->from_node;
					  header->from_node = node_address;			
					  delay(parent_pipe);
   1fd82:	98 01       	movw	r18, r16
   1fd84:	21 59       	subi	r18, 0x91	; 145
   1fd86:	3e 4f       	sbci	r19, 0xFE	; 254
   1fd88:	3b 83       	std	Y+3, r19	; 0x03
   1fd8a:	2a 83       	std	Y+2, r18	; 0x02
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:209
			   continue;
			}
		    if(header->type == NETWORK_ADDR_RESPONSE ){	
			    uint16_t requester = NETWORK_DEFAULT_ADDRESS;
				if(requester != node_address){
					header->to_node = requester;
   1fd8c:	54 e2       	ldi	r21, 0x24	; 36
   1fd8e:	85 2e       	mov	r8, r21
   1fd90:	59 e0       	ldi	r21, 0x09	; 9
   1fd92:	95 2e       	mov	r9, r21
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:165
  }
  #endif
  
  uint32_t timeout = millis();
  
  while ( radio.isValid() && radio.available(&pipe_num) && millis() - timeout < 1000){
   1fd94:	f8 01       	movw	r30, r16
   1fd96:	87 a5       	ldd	r24, Z+47	; 0x2f
   1fd98:	90 a9       	ldd	r25, Z+48	; 0x30
_ZN4RF247isValidEv():
/home/saric/Arduino/libraries/RF24/RF24.h:649
   1fd9a:	fc 01       	movw	r30, r24
   1fd9c:	20 81       	ld	r18, Z
   1fd9e:	31 81       	ldd	r19, Z+1	; 0x01
   1fda0:	2f 3f       	cpi	r18, 0xFF	; 255
   1fda2:	31 05       	cpc	r19, r1
   1fda4:	09 f4       	brne	.+2      	; 0x1fda8 <RF24Network::update()+0xa0>
   1fda6:	83 c0       	rjmp	.+262    	; 0x1feae <RF24Network::update()+0x1a6>
   1fda8:	22 81       	ldd	r18, Z+2	; 0x02
   1fdaa:	33 81       	ldd	r19, Z+3	; 0x03
   1fdac:	2f 3f       	cpi	r18, 0xFF	; 255
   1fdae:	31 05       	cpc	r19, r1
   1fdb0:	09 f4       	brne	.+2      	; 0x1fdb4 <RF24Network::update()+0xac>
   1fdb2:	7d c0       	rjmp	.+250    	; 0x1feae <RF24Network::update()+0x1a6>
_ZN11RF24Network6updateEv():
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:165
   1fdb4:	be 01       	movw	r22, r28
   1fdb6:	6f 5f       	subi	r22, 0xFF	; 255
   1fdb8:	7f 4f       	sbci	r23, 0xFF	; 255
   1fdba:	0e 94 ab f6 	call	0x1ed56	; 0x1ed56 <RF24::available(unsigned char*)>
   1fdbe:	88 23       	and	r24, r24
   1fdc0:	09 f4       	brne	.+2      	; 0x1fdc4 <RF24Network::update()+0xbc>
   1fdc2:	75 c0       	rjmp	.+234    	; 0x1feae <RF24Network::update()+0x1a6>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:165 (discriminator 3)
   1fdc4:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   1fdc8:	64 19       	sub	r22, r4
   1fdca:	75 09       	sbc	r23, r5
   1fdcc:	86 09       	sbc	r24, r6
   1fdce:	97 09       	sbc	r25, r7
   1fdd0:	68 3e       	cpi	r22, 0xE8	; 232
   1fdd2:	73 40       	sbci	r23, 0x03	; 3
   1fdd4:	81 05       	cpc	r24, r1
   1fdd6:	91 05       	cpc	r25, r1
   1fdd8:	08 f0       	brcs	.+2      	; 0x1fddc <RF24Network::update()+0xd4>
   1fdda:	69 c0       	rjmp	.+210    	; 0x1feae <RF24Network::update()+0x1a6>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:168

    #if defined (ENABLE_DYNAMIC_PAYLOADS) && !defined (XMEGA_D3)
      if( (frame_size = radio.getDynamicPayloadSize() ) < sizeof(RF24NetworkHeader)){
   1fddc:	f8 01       	movw	r30, r16
   1fdde:	87 a5       	ldd	r24, Z+47	; 0x2f
   1fde0:	90 a9       	ldd	r25, Z+48	; 0x30
   1fde2:	0e 94 8a f6 	call	0x1ed14	; 0x1ed14 <RF24::getDynamicPayloadSize()>
   1fde6:	f8 01       	movw	r30, r16
   1fde8:	84 ab       	std	Z+52, r24	; 0x34
   1fdea:	88 30       	cpi	r24, 0x08	; 8
   1fdec:	38 f4       	brcc	.+14     	; 0x1fdfc <RF24Network::update()+0xf4>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:169 (discriminator 1)
	    delay(10);
   1fdee:	6a e0       	ldi	r22, 0x0A	; 10
   1fdf0:	70 e0       	ldi	r23, 0x00	; 0
   1fdf2:	80 e0       	ldi	r24, 0x00	; 0
   1fdf4:	90 e0       	ldi	r25, 0x00	; 0
   1fdf6:	0f 94 33 0f 	call	0x21e66	; 0x21e66 <delay>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:170 (discriminator 1)
		continue;
   1fdfa:	cc cf       	rjmp	.-104    	; 0x1fd94 <RF24Network::update()+0x8c>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:177
    #else
      frame_size=32;
    #endif
      // Dump the payloads until we've gotten everything
      // Fetch the payload, and see if this was the last one.
	  radio.read( frame_buffer, frame_size );
   1fdfc:	48 2f       	mov	r20, r24
   1fdfe:	b6 01       	movw	r22, r12
   1fe00:	87 a5       	ldd	r24, Z+47	; 0x2f
   1fe02:	90 a9       	ldd	r25, Z+48	; 0x30
   1fe04:	0e 94 cc f6 	call	0x1ed98	; 0x1ed98 <RF24::read(void*, unsigned char)>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:194
      IF_SERIAL_DEBUG(printf_P(PSTR("%lu: MAC Received on %u %s\n\r"),millis(),pipe_num,header->toString()));
      IF_SERIAL_DEBUG(const uint16_t* i = reinterpret_cast<const uint16_t*>(frame_buffer + sizeof(RF24NetworkHeader));printf_P(PSTR("%lu: NET message %04x\n\r"),millis(),*i));
      #endif
	  
      // Throw it away if it's not a valid address
      if ( !is_valid_address(header->to_node) ){
   1fe08:	f8 01       	movw	r30, r16
   1fe0a:	e1 84       	ldd	r14, Z+9	; 0x09
   1fe0c:	f2 84       	ldd	r15, Z+10	; 0x0a
   1fe0e:	b7 01       	movw	r22, r14
   1fe10:	c8 01       	movw	r24, r16
   1fe12:	0e 94 7b fc 	call	0x1f8f6	; 0x1f8f6 <RF24Network::is_valid_address(unsigned int)>
   1fe16:	88 23       	and	r24, r24
   1fe18:	09 f4       	brne	.+2      	; 0x1fe1c <RF24Network::update()+0x114>
   1fe1a:	bc cf       	rjmp	.-136    	; 0x1fd94 <RF24Network::update()+0x8c>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:198
		continue;
	  }
	  
      returnVal = header->type;
   1fe1c:	f8 01       	movw	r30, r16
   1fe1e:	35 84       	ldd	r3, Z+13	; 0x0d
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:201

	  // Is this for us?
      if ( header->to_node == node_address   ){
   1fe20:	82 a9       	ldd	r24, Z+50	; 0x32
   1fe22:	93 a9       	ldd	r25, Z+51	; 0x33
   1fe24:	e8 16       	cp	r14, r24
   1fe26:	f9 06       	cpc	r15, r25
   1fe28:	09 f0       	breq	.+2      	; 0x1fe2c <RF24Network::update()+0x124>
   1fe2a:	64 c0       	rjmp	.+200    	; 0x1fef4 <RF24Network::update()+0x1ec>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:203
			
			if(header->type == NETWORK_PING){
   1fe2c:	f2 e8       	ldi	r31, 0x82	; 130
   1fe2e:	3f 16       	cp	r3, r31
   1fe30:	09 f4       	brne	.+2      	; 0x1fe34 <RF24Network::update()+0x12c>
   1fe32:	b0 cf       	rjmp	.-160    	; 0x1fd94 <RF24Network::update()+0x8c>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:206
			   continue;
			}
		    if(header->type == NETWORK_ADDR_RESPONSE ){	
   1fe34:	20 e8       	ldi	r18, 0x80	; 128
   1fe36:	32 12       	cpse	r3, r18
   1fe38:	19 c0       	rjmp	.+50     	; 0x1fe6c <RF24Network::update()+0x164>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:208
			    uint16_t requester = NETWORK_DEFAULT_ADDRESS;
				if(requester != node_address){
   1fe3a:	34 e2       	ldi	r19, 0x24	; 36
   1fe3c:	e3 16       	cp	r14, r19
   1fe3e:	39 e0       	ldi	r19, 0x09	; 9
   1fe40:	f3 06       	cpc	r15, r19
   1fe42:	29 f1       	breq	.+74     	; 0x1fe8e <RF24Network::update()+0x186>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:209 (discriminator 1)
					header->to_node = requester;
   1fe44:	f8 01       	movw	r30, r16
   1fe46:	92 86       	std	Z+10, r9	; 0x0a
   1fe48:	81 86       	std	Z+9, r8	; 0x09
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:210 (discriminator 1)
					write(header->to_node,USER_TX_TO_PHYSICAL_ADDRESS);
   1fe4a:	42 e0       	ldi	r20, 0x02	; 2
   1fe4c:	64 e2       	ldi	r22, 0x24	; 36
   1fe4e:	79 e0       	ldi	r23, 0x09	; 9
   1fe50:	c8 01       	movw	r24, r16
   1fe52:	0e 94 c7 fd 	call	0x1fb8e	; 0x1fb8e <RF24Network::write(unsigned int, unsigned char)>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:211 (discriminator 1)
					delay(10);
   1fe56:	6a e0       	ldi	r22, 0x0A	; 10
   1fe58:	70 e0       	ldi	r23, 0x00	; 0
   1fe5a:	80 e0       	ldi	r24, 0x00	; 0
   1fe5c:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:250

				if(header->type == NETWORK_POLL  ){
                    if( !(networkFlags & FLAG_NO_POLL) && node_address != NETWORK_DEFAULT_ADDRESS ){
					  header->to_node = header->from_node;
					  header->from_node = node_address;			
					  delay(parent_pipe);
   1fe5e:	0f 94 33 0f 	call	0x21e66	; 0x21e66 <delay>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:251
                      write(header->to_node,USER_TX_TO_PHYSICAL_ADDRESS);                      
   1fe62:	f8 01       	movw	r30, r16
   1fe64:	61 85       	ldd	r22, Z+9	; 0x09
   1fe66:	72 85       	ldd	r23, Z+10	; 0x0a
   1fe68:	42 e0       	ldi	r20, 0x02	; 2
   1fe6a:	0d c0       	rjmp	.+26     	; 0x1fe86 <RF24Network::update()+0x17e>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:217
                    write(header->to_node,USER_TX_TO_PHYSICAL_ADDRESS);
					//printf("Fwd add response to 0%o\n",requester);
					continue;
				}
			}
			if(header->type == NETWORK_REQ_ADDRESS && node_address){
   1fe6c:	f3 ec       	ldi	r31, 0xC3	; 195
   1fe6e:	3f 12       	cpse	r3, r31
   1fe70:	0e c0       	rjmp	.+28     	; 0x1fe8e <RF24Network::update()+0x186>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:217 (discriminator 1)
   1fe72:	00 97       	sbiw	r24, 0x00	; 0
   1fe74:	61 f0       	breq	.+24     	; 0x1fe8e <RF24Network::update()+0x186>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:219 (discriminator 2)
				//printf("Fwd add req to 0\n");
				header->from_node = node_address;
   1fe76:	f8 01       	movw	r30, r16
   1fe78:	90 87       	std	Z+8, r25	; 0x08
   1fe7a:	87 83       	std	Z+7, r24	; 0x07
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:220 (discriminator 2)
				header->to_node = 0;
   1fe7c:	12 86       	std	Z+10, r1	; 0x0a
   1fe7e:	11 86       	std	Z+9, r1	; 0x09
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:221 (discriminator 2)
				write(header->to_node,TX_NORMAL);
   1fe80:	40 e0       	ldi	r20, 0x00	; 0
   1fe82:	70 e0       	ldi	r23, 0x00	; 0
   1fe84:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:272
				  //Serial.println("ret ext multicast");
					return EXTERNAL_DATA_TYPE;
				}

			}else{
				write(header->to_node,1);	//Send it on, indicate it is a routed payload
   1fe86:	c8 01       	movw	r24, r16
   1fe88:	0e 94 c7 fd 	call	0x1fb8e	; 0x1fb8e <RF24Network::write(unsigned int, unsigned char)>
   1fe8c:	83 cf       	rjmp	.-250    	; 0x1fd94 <RF24Network::update()+0x8c>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:225
				header->to_node = 0;
				write(header->to_node,TX_NORMAL);
				continue;
			}
			
			if( (returnSysMsgs && header->type > 127) || header->type == NETWORK_ACK ){	
   1fe8e:	f8 01       	movw	r30, r16
   1fe90:	81 a5       	ldd	r24, Z+41	; 0x29
   1fe92:	88 23       	and	r24, r24
   1fe94:	11 f1       	breq	.+68     	; 0x1feda <RF24Network::update()+0x1d2>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:225 (discriminator 1)
   1fe96:	37 fe       	sbrs	r3, 7
   1fe98:	23 c0       	rjmp	.+70     	; 0x1fee0 <RF24Network::update()+0x1d8>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:228
				IF_SERIAL_DEBUG_ROUTING( printf_P(PSTR("%lu MAC: System payload rcvd %d\n"),millis(),returnVal); );
				//if( (header->type < 148 || header->type > 150) && header->type != NETWORK_MORE_FRAGMENTS_NACK && header->type != EXTERNAL_DATA_TYPE && header->type!= NETWORK_LAST_FRAGMENT){
				if( header->type != NETWORK_FIRST_FRAGMENT && header->type != NETWORK_MORE_FRAGMENTS && header->type != NETWORK_MORE_FRAGMENTS_NACK && header->type != EXTERNAL_DATA_TYPE && header->type!= NETWORK_LAST_FRAGMENT){
   1fe9a:	8c e6       	ldi	r24, 0x6C	; 108
   1fe9c:	83 0d       	add	r24, r3
   1fe9e:	83 30       	cpi	r24, 0x03	; 3
   1fea0:	f8 f0       	brcs	.+62     	; 0x1fee0 <RF24Network::update()+0x1d8>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:228 (discriminator 1)
   1fea2:	28 ec       	ldi	r18, 0xC8	; 200
   1fea4:	32 16       	cp	r3, r18
   1fea6:	e1 f0       	breq	.+56     	; 0x1fee0 <RF24Network::update()+0x1d8>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:228 (discriminator 2)
   1fea8:	33 e8       	ldi	r19, 0x83	; 131
   1feaa:	33 16       	cp	r3, r19
   1feac:	c9 f0       	breq	.+50     	; 0x1fee0 <RF24Network::update()+0x1d8>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:281
		#endif
	  }
	  
  }
  return returnVal;
}
   1feae:	83 2d       	mov	r24, r3
   1feb0:	0f 90       	pop	r0
   1feb2:	0f 90       	pop	r0
   1feb4:	0f 90       	pop	r0
   1feb6:	df 91       	pop	r29
   1feb8:	cf 91       	pop	r28
   1feba:	1f 91       	pop	r17
   1febc:	0f 91       	pop	r16
   1febe:	ff 90       	pop	r15
   1fec0:	ef 90       	pop	r14
   1fec2:	df 90       	pop	r13
   1fec4:	cf 90       	pop	r12
   1fec6:	bf 90       	pop	r11
   1fec8:	af 90       	pop	r10
   1feca:	9f 90       	pop	r9
   1fecc:	8f 90       	pop	r8
   1fece:	7f 90       	pop	r7
   1fed0:	6f 90       	pop	r6
   1fed2:	5f 90       	pop	r5
   1fed4:	4f 90       	pop	r4
   1fed6:	3f 90       	pop	r3
   1fed8:	08 95       	ret
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:225 (discriminator 3)
				header->to_node = 0;
				write(header->to_node,TX_NORMAL);
				continue;
			}
			
			if( (returnSysMsgs && header->type > 127) || header->type == NETWORK_ACK ){	
   1feda:	f1 ec       	ldi	r31, 0xC1	; 193
   1fedc:	3f 16       	cp	r3, r31
   1fede:	e9 f2       	breq	.-70     	; 0x1fe9a <RF24Network::update()+0x192>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:233
				if( header->type != NETWORK_FIRST_FRAGMENT && header->type != NETWORK_MORE_FRAGMENTS && header->type != NETWORK_MORE_FRAGMENTS_NACK && header->type != EXTERNAL_DATA_TYPE && header->type!= NETWORK_LAST_FRAGMENT){
					return returnVal;
				}
			}

			if( enqueue(header) == 2 ){ //External data received			
   1fee0:	b6 01       	movw	r22, r12
   1fee2:	c8 01       	movw	r24, r16
   1fee4:	0e 94 0f fa 	call	0x1f41e	; 0x1f41e <RF24Network::enqueue(RF24NetworkHeader*)>
   1fee8:	82 30       	cpi	r24, 0x02	; 2
   1feea:	09 f0       	breq	.+2      	; 0x1feee <RF24Network::update()+0x1e6>
   1feec:	53 cf       	rjmp	.-346    	; 0x1fd94 <RF24Network::update()+0x8c>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:237
				#if defined (SERIAL_DEBUG_MINIMAL)
				  printf("ret ext\n");
				#endif
				return EXTERNAL_DATA_TYPE;				
   1feee:	33 e8       	ldi	r19, 0x83	; 131
   1fef0:	33 2e       	mov	r3, r19
   1fef2:	dd cf       	rjmp	.-70     	; 0x1feae <RF24Network::update()+0x1a6>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:243
			}
	  }else{	  

	  #if defined	(RF24NetworkMulticast)	

			if( header->to_node == 0100){
   1fef4:	e0 e4       	ldi	r30, 0x40	; 64
   1fef6:	ee 16       	cp	r14, r30
   1fef8:	f1 04       	cpc	r15, r1
   1fefa:	09 f0       	breq	.+2      	; 0x1fefe <RF24Network::update()+0x1f6>
   1fefc:	51 c0       	rjmp	.+162    	; 0x1ffa0 <RF24Network::update()+0x298>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:246
			

				if(header->type == NETWORK_POLL  ){
   1fefe:	f2 ec       	ldi	r31, 0xC2	; 194
   1ff00:	3f 12       	cpse	r3, r31
   1ff02:	17 c0       	rjmp	.+46     	; 0x1ff32 <RF24Network::update()+0x22a>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:247
                    if( !(networkFlags & FLAG_NO_POLL) && node_address != NETWORK_DEFAULT_ADDRESS ){
   1ff04:	f8 01       	movw	r30, r16
   1ff06:	22 a5       	ldd	r18, Z+42	; 0x2a
   1ff08:	23 fd       	sbrc	r18, 3
   1ff0a:	44 cf       	rjmp	.-376    	; 0x1fd94 <RF24Network::update()+0x8c>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:247 (discriminator 1)
   1ff0c:	84 32       	cpi	r24, 0x24	; 36
   1ff0e:	f9 e0       	ldi	r31, 0x09	; 9
   1ff10:	9f 07       	cpc	r25, r31
   1ff12:	09 f4       	brne	.+2      	; 0x1ff16 <RF24Network::update()+0x20e>
   1ff14:	3f cf       	rjmp	.-386    	; 0x1fd94 <RF24Network::update()+0x8c>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:248
					  header->to_node = header->from_node;
   1ff16:	f8 01       	movw	r30, r16
   1ff18:	27 81       	ldd	r18, Z+7	; 0x07
   1ff1a:	30 85       	ldd	r19, Z+8	; 0x08
   1ff1c:	32 87       	std	Z+10, r19	; 0x0a
   1ff1e:	21 87       	std	Z+9, r18	; 0x09
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:249
					  header->from_node = node_address;			
   1ff20:	90 87       	std	Z+8, r25	; 0x08
   1ff22:	87 83       	std	Z+7, r24	; 0x07
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:250
					  delay(parent_pipe);
   1ff24:	ea 81       	ldd	r30, Y+2	; 0x02
   1ff26:	fb 81       	ldd	r31, Y+3	; 0x03
   1ff28:	60 81       	ld	r22, Z
   1ff2a:	70 e0       	ldi	r23, 0x00	; 0
   1ff2c:	90 e0       	ldi	r25, 0x00	; 0
   1ff2e:	80 e0       	ldi	r24, 0x00	; 0
   1ff30:	96 cf       	rjmp	.-212    	; 0x1fe5e <RF24Network::update()+0x156>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:255
                      write(header->to_node,USER_TX_TO_PHYSICAL_ADDRESS);                      
                    }
					continue;
				}
				uint8_t val = enqueue(header);
   1ff32:	b6 01       	movw	r22, r12
   1ff34:	c8 01       	movw	r24, r16
   1ff36:	0e 94 0f fa 	call	0x1f41e	; 0x1f41e <RF24Network::enqueue(RF24NetworkHeader*)>
   1ff3a:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:257
				
				if(multicastRelay){					
   1ff3c:	f8 01       	movw	r30, r16
   1ff3e:	80 81       	ld	r24, Z
   1ff40:	88 23       	and	r24, r24
   1ff42:	51 f1       	breq	.+84     	; 0x1ff98 <RF24Network::update()+0x290>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:259
					IF_SERIAL_DEBUG_ROUTING( printf_P(PSTR("%u MAC: FWD multicast frame from 0%o to level %u\n"),millis(),header->from_node,multicast_level+1); );
					if ((node_address >> 3) != 0) {
   1ff44:	82 a9       	ldd	r24, Z+50	; 0x32
   1ff46:	93 a9       	ldd	r25, Z+51	; 0x33
   1ff48:	23 e0       	ldi	r18, 0x03	; 3
   1ff4a:	96 95       	lsr	r25
   1ff4c:	87 95       	ror	r24
   1ff4e:	2a 95       	dec	r18
   1ff50:	e1 f7       	brne	.-8      	; 0x1ff4a <RF24Network::update()+0x242>
   1ff52:	89 2b       	or	r24, r25
   1ff54:	21 f0       	breq	.+8      	; 0x1ff5e <RF24Network::update()+0x256>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:261
					  // for all but the first level of nodes, those not directly connected to the master, we add the total delay per level
					  delayMicroseconds(600*4);
   1ff56:	80 e6       	ldi	r24, 0x60	; 96
   1ff58:	99 e0       	ldi	r25, 0x09	; 9
   1ff5a:	0f 94 6c 0f 	call	0x21ed8	; 0x21ed8 <delayMicroseconds>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:263
					}
					delayMicroseconds((node_address % 4)*600);
   1ff5e:	f8 01       	movw	r30, r16
   1ff60:	82 a9       	ldd	r24, Z+50	; 0x32
   1ff62:	93 a9       	ldd	r25, Z+51	; 0x33
   1ff64:	83 70       	andi	r24, 0x03	; 3
   1ff66:	99 27       	eor	r25, r25
   1ff68:	9c 01       	movw	r18, r24
   1ff6a:	2a 9d       	mul	r18, r10
   1ff6c:	c0 01       	movw	r24, r0
   1ff6e:	2b 9d       	mul	r18, r11
   1ff70:	90 0d       	add	r25, r0
   1ff72:	3a 9d       	mul	r19, r10
   1ff74:	90 0d       	add	r25, r0
   1ff76:	11 24       	eor	r1, r1
   1ff78:	0f 94 6c 0f 	call	0x21ed8	; 0x21ed8 <delayMicroseconds>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:264
					write(levelToAddress(multicast_level)<<3,4);
   1ff7c:	f8 01       	movw	r30, r16
   1ff7e:	81 a9       	ldd	r24, Z+49	; 0x31
   1ff80:	0e 94 8c fc 	call	0x1f918	; 0x1f918 <levelToAddress(unsigned char)>
   1ff84:	bc 01       	movw	r22, r24
   1ff86:	83 e0       	ldi	r24, 0x03	; 3
   1ff88:	66 0f       	add	r22, r22
   1ff8a:	77 1f       	adc	r23, r23
   1ff8c:	8a 95       	dec	r24
   1ff8e:	e1 f7       	brne	.-8      	; 0x1ff88 <RF24Network::update()+0x280>
   1ff90:	44 e0       	ldi	r20, 0x04	; 4
   1ff92:	c8 01       	movw	r24, r16
   1ff94:	0e 94 c7 fd 	call	0x1fb8e	; 0x1fb8e <RF24Network::write(unsigned int, unsigned char)>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:266
				}
				if( val == 2 ){ //External data received			
   1ff98:	f2 e0       	ldi	r31, 0x02	; 2
   1ff9a:	ff 12       	cpse	r15, r31
   1ff9c:	fb ce       	rjmp	.-522    	; 0x1fd94 <RF24Network::update()+0x8c>
   1ff9e:	a7 cf       	rjmp	.-178    	; 0x1feee <RF24Network::update()+0x1e6>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:272
				  //Serial.println("ret ext multicast");
					return EXTERNAL_DATA_TYPE;
				}

			}else{
				write(header->to_node,1);	//Send it on, indicate it is a routed payload
   1ffa0:	41 e0       	ldi	r20, 0x01	; 1
   1ffa2:	b7 01       	movw	r22, r14
   1ffa4:	70 cf       	rjmp	.-288    	; 0x1fe86 <RF24Network::update()+0x17e>

0001ffa6 <RF24Network::_write(RF24NetworkHeader&, void const*, unsigned int, unsigned int)>:
_ZN11RF24Network6_writeER17RF24NetworkHeaderPKvjj():
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:849
#endif //Fragmentation enabled
}
/******************************************************************/

bool RF24Network::_write(RF24NetworkHeader& header,const void* message, uint16_t len, uint16_t writeDirect)
{
   1ffa6:	ef 92       	push	r14
   1ffa8:	ff 92       	push	r15
   1ffaa:	0f 93       	push	r16
   1ffac:	1f 93       	push	r17
   1ffae:	cf 93       	push	r28
   1ffb0:	df 93       	push	r29
   1ffb2:	ec 01       	movw	r28, r24
   1ffb4:	7b 01       	movw	r14, r22
   1ffb6:	ba 01       	movw	r22, r20
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:851
  // Fill out the header
  header.from_node = node_address;
   1ffb8:	8a a9       	ldd	r24, Y+50	; 0x32
   1ffba:	9b a9       	ldd	r25, Y+51	; 0x33
   1ffbc:	f7 01       	movw	r30, r14
   1ffbe:	91 83       	std	Z+1, r25	; 0x01
   1ffc0:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:854
  
  // Build the full frame to send
  memcpy(frame_buffer,&header,sizeof(RF24NetworkHeader));
   1ffc2:	de 01       	movw	r26, r28
   1ffc4:	17 96       	adiw	r26, 0x07	; 7
   1ffc6:	88 e0       	ldi	r24, 0x08	; 8
   1ffc8:	01 90       	ld	r0, Z+
   1ffca:	0d 92       	st	X+, r0
   1ffcc:	8a 95       	dec	r24
   1ffce:	e1 f7       	brne	.-8      	; 0x1ffc8 <RF24Network::_write(RF24NetworkHeader&, void const*, unsigned int, unsigned int)+0x22>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:861
  #if defined (RF24_LINUX)
	IF_SERIAL_DEBUG(printf_P(PSTR("%u: NET Sending %s\n\r"),millis(),header.toString()));
  #else
    IF_SERIAL_DEBUG(printf_P(PSTR("%lu: NET Sending %s\n\r"),millis(),header.toString()));
  #endif
  if (len){
   1ffd0:	21 15       	cp	r18, r1
   1ffd2:	31 05       	cpc	r19, r1
   1ffd4:	29 f0       	breq	.+10     	; 0x1ffe0 <RF24Network::_write(RF24NetworkHeader&, void const*, unsigned int, unsigned int)+0x3a>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:868
	memcpy(frame_buffer + sizeof(RF24NetworkHeader),message,rf24_min(frame_size-sizeof(RF24NetworkHeader),len));
    IF_SERIAL_DEBUG(printf("%u: FRG frame size %i\n",millis(),frame_size););
    IF_SERIAL_DEBUG(printf("%u: FRG frame ",millis()); const char* charPtr = reinterpret_cast<const char*>(frame_buffer); for (uint16_t i = 0; i < frame_size; i++) { printf("%02X ", charPtr[i]); }; printf("\n\r"));
	#else
	
    memcpy(frame_buffer + sizeof(RF24NetworkHeader),message,len);
   1ffd6:	a9 01       	movw	r20, r18
   1ffd8:	ce 01       	movw	r24, r28
   1ffda:	0f 96       	adiw	r24, 0x0f	; 15
   1ffdc:	0f 94 2d 1a 	call	0x2345a	; 0x2345a <memcpy>
   1ffe0:	f7 01       	movw	r30, r14
   1ffe2:	62 81       	ldd	r22, Z+2	; 0x02
   1ffe4:	73 81       	ldd	r23, Z+3	; 0x03
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:898
		if(header.to_node == writeDirect){
		  sendType = USER_TX_TO_PHYSICAL_ADDRESS; // Payload is multicast to the first node, which is the recipient
		}
		return write(writeDirect,sendType);				
	}
	return write(header.to_node,TX_NORMAL);
   1ffe6:	40 e0       	ldi	r20, 0x00	; 0
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:887
    return enqueue(frame);
  }*/
    // Otherwise send it out over the air	
	
	
	if(writeDirect != 070){		
   1ffe8:	08 33       	cpi	r16, 0x38	; 56
   1ffea:	11 05       	cpc	r17, r1
   1ffec:	51 f0       	breq	.+20     	; 0x20002 <RF24Network::_write(RF24NetworkHeader&, void const*, unsigned int, unsigned int)+0x5c>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:888
		uint8_t sendType = USER_TX_TO_LOGICAL_ADDRESS; // Payload is multicast to the first node, and routed normally to the next
   1ffee:	43 e0       	ldi	r20, 0x03	; 3
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:890
	    
		if(header.to_node == 0100){
   1fff0:	60 34       	cpi	r22, 0x40	; 64
   1fff2:	71 05       	cpc	r23, r1
   1fff4:	09 f4       	brne	.+2      	; 0x1fff8 <RF24Network::_write(RF24NetworkHeader&, void const*, unsigned int, unsigned int)+0x52>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:891
		  sendType = USER_TX_MULTICAST;
   1fff6:	44 e0       	ldi	r20, 0x04	; 4
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:893
		}
		if(header.to_node == writeDirect){
   1fff8:	06 17       	cp	r16, r22
   1fffa:	17 07       	cpc	r17, r23
   1fffc:	09 f4       	brne	.+2      	; 0x20000 <RF24Network::_write(RF24NetworkHeader&, void const*, unsigned int, unsigned int)+0x5a>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:894
		  sendType = USER_TX_TO_PHYSICAL_ADDRESS; // Payload is multicast to the first node, which is the recipient
   1fffe:	42 e0       	ldi	r20, 0x02	; 2
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:896
		}
		return write(writeDirect,sendType);				
   20000:	b8 01       	movw	r22, r16
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:898
	}
	return write(header.to_node,TX_NORMAL);
   20002:	ce 01       	movw	r24, r28
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:900
	
}
   20004:	df 91       	pop	r29
   20006:	cf 91       	pop	r28
   20008:	1f 91       	pop	r17
   2000a:	0f 91       	pop	r16
   2000c:	ff 90       	pop	r15
   2000e:	ef 90       	pop	r14
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:898
		if(header.to_node == writeDirect){
		  sendType = USER_TX_TO_PHYSICAL_ADDRESS; // Payload is multicast to the first node, which is the recipient
		}
		return write(writeDirect,sendType);				
	}
	return write(header.to_node,TX_NORMAL);
   20010:	0c 94 c7 fd 	jmp	0x1fb8e	; 0x1fb8e <RF24Network::write(unsigned int, unsigned char)>

00020014 <RF24Network::write(RF24NetworkHeader&, void const*, unsigned int, unsigned int)>:
_ZN11RF24Network5writeER17RF24NetworkHeaderPKvjj():
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:728
/******************************************************************/
bool RF24Network::write(RF24NetworkHeader& header,const void* message, uint16_t len){    
	return write(header,message,len,070);
}
/******************************************************************/
bool RF24Network::write(RF24NetworkHeader& header,const void* message, uint16_t len, uint16_t writeDirect){
   20014:	2f 92       	push	r2
   20016:	3f 92       	push	r3
   20018:	4f 92       	push	r4
   2001a:	5f 92       	push	r5
   2001c:	6f 92       	push	r6
   2001e:	7f 92       	push	r7
   20020:	8f 92       	push	r8
   20022:	9f 92       	push	r9
   20024:	af 92       	push	r10
   20026:	bf 92       	push	r11
   20028:	cf 92       	push	r12
   2002a:	df 92       	push	r13
   2002c:	ef 92       	push	r14
   2002e:	ff 92       	push	r15
   20030:	0f 93       	push	r16
   20032:	1f 93       	push	r17
   20034:	cf 93       	push	r28
   20036:	df 93       	push	r29
   20038:	ec 01       	movw	r28, r24
   2003a:	7b 01       	movw	r14, r22
   2003c:	5a 01       	movw	r10, r20
   2003e:	69 01       	movw	r12, r18
   20040:	48 01       	movw	r8, r16
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:731
    
    //Allows time for requests (RF24Mesh) to get through between failed writes on busy nodes
    while(millis()-txTime < 25){ if(update() > 127){break;} }
   20042:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   20046:	4b a4       	ldd	r4, Y+43	; 0x2b
   20048:	5c a4       	ldd	r5, Y+44	; 0x2c
   2004a:	6d a4       	ldd	r6, Y+45	; 0x2d
   2004c:	7e a4       	ldd	r7, Y+46	; 0x2e
   2004e:	64 19       	sub	r22, r4
   20050:	75 09       	sbc	r23, r5
   20052:	86 09       	sbc	r24, r6
   20054:	97 09       	sbc	r25, r7
   20056:	69 31       	cpi	r22, 0x19	; 25
   20058:	71 05       	cpc	r23, r1
   2005a:	81 05       	cpc	r24, r1
   2005c:	91 05       	cpc	r25, r1
   2005e:	28 f4       	brcc	.+10     	; 0x2006a <RF24Network::write(RF24NetworkHeader&, void const*, unsigned int, unsigned int)+0x56>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:731 (discriminator 1)
   20060:	ce 01       	movw	r24, r28
   20062:	0e 94 84 fe 	call	0x1fd08	; 0x1fd08 <RF24Network::update()>
   20066:	87 ff       	sbrs	r24, 7
   20068:	ec cf       	rjmp	.-40     	; 0x20042 <RF24Network::write(RF24NetworkHeader&, void const*, unsigned int, unsigned int)+0x2e>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:732
	delayMicroseconds(200);
   2006a:	88 ec       	ldi	r24, 0xC8	; 200
   2006c:	90 e0       	ldi	r25, 0x00	; 0
   2006e:	0f 94 6c 0f 	call	0x21ed8	; 0x21ed8 <delayMicroseconds>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:738

#if defined (DISABLE_FRAGMENTATION)
    frame_size = rf24_min(len+sizeof(RF24NetworkHeader),MAX_FRAME_SIZE);
	return _write(header,message,rf24_min(len,max_frame_payload_size),writeDirect);
#else  
  if(len <= max_frame_payload_size){
   20072:	89 e1       	ldi	r24, 0x19	; 25
   20074:	c8 16       	cp	r12, r24
   20076:	d1 04       	cpc	r13, r1
   20078:	48 f5       	brcc	.+82     	; 0x200cc <RF24Network::write(RF24NetworkHeader&, void const*, unsigned int, unsigned int)+0xb8>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:740
    //Normal Write (Un-Fragmented)
	frame_size = len + sizeof(RF24NetworkHeader);
   2007a:	88 e0       	ldi	r24, 0x08	; 8
   2007c:	8c 0d       	add	r24, r12
   2007e:	8c ab       	std	Y+52, r24	; 0x34
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:741
    if(_write(header,message,len,writeDirect)){
   20080:	84 01       	movw	r16, r8
   20082:	96 01       	movw	r18, r12
   20084:	a5 01       	movw	r20, r10
   20086:	b7 01       	movw	r22, r14
   20088:	ce 01       	movw	r24, r28
   2008a:	0e 94 d3 ff 	call	0x1ffa6	; 0x1ffa6 <RF24Network::_write(RF24NetworkHeader&, void const*, unsigned int, unsigned int)>
   2008e:	18 2f       	mov	r17, r24
   20090:	88 23       	and	r24, r24
   20092:	a9 f0       	breq	.+42     	; 0x200be <RF24Network::write(RF24NetworkHeader&, void const*, unsigned int, unsigned int)+0xaa>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:742
      return 1;
   20094:	11 e0       	ldi	r17, 0x01	; 1
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:845
	return false;
  }
  return true;
  
#endif //Fragmentation enabled
}
   20096:	81 2f       	mov	r24, r17
   20098:	df 91       	pop	r29
   2009a:	cf 91       	pop	r28
   2009c:	1f 91       	pop	r17
   2009e:	0f 91       	pop	r16
   200a0:	ff 90       	pop	r15
   200a2:	ef 90       	pop	r14
   200a4:	df 90       	pop	r13
   200a6:	cf 90       	pop	r12
   200a8:	bf 90       	pop	r11
   200aa:	af 90       	pop	r10
   200ac:	9f 90       	pop	r9
   200ae:	8f 90       	pop	r8
   200b0:	7f 90       	pop	r7
   200b2:	6f 90       	pop	r6
   200b4:	5f 90       	pop	r5
   200b6:	4f 90       	pop	r4
   200b8:	3f 90       	pop	r3
   200ba:	2f 90       	pop	r2
   200bc:	08 95       	ret
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:744
    //Normal Write (Un-Fragmented)
	frame_size = len + sizeof(RF24NetworkHeader);
    if(_write(header,message,len,writeDirect)){
      return 1;
    }
    txTime = millis();
   200be:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   200c2:	6b a7       	std	Y+43, r22	; 0x2b
   200c4:	7c a7       	std	Y+44, r23	; 0x2c
   200c6:	8d a7       	std	Y+45, r24	; 0x2d
   200c8:	9e a7       	std	Y+46, r25	; 0x2e
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:745
    return 0;
   200ca:	e5 cf       	rjmp	.-54     	; 0x20096 <RF24Network::write(RF24NetworkHeader&, void const*, unsigned int, unsigned int)+0x82>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:748
  }
  //Check payload size
  if (len > MAX_PAYLOAD_SIZE) {
   200cc:	e1 e9       	ldi	r30, 0x91	; 145
   200ce:	ce 16       	cp	r12, r30
   200d0:	d1 04       	cpc	r13, r1
   200d2:	10 f0       	brcs	.+4      	; 0x200d8 <RF24Network::write(RF24NetworkHeader&, void const*, unsigned int, unsigned int)+0xc4>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:840
  //Return true if all the chunks where sent successfully
 
  IF_SERIAL_DEBUG_FRAGMENTATION(printf("%u: FRG total message fragments sent %i. \n",millis(),msgCount); );
  if(fragment_id > 0){
    txTime = millis();
	return false;
   200d4:	10 e0       	ldi	r17, 0x00	; 0
   200d6:	df cf       	rjmp	.-66     	; 0x20096 <RF24Network::write(RF24NetworkHeader&, void const*, unsigned int, unsigned int)+0x82>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:754
    IF_SERIAL_DEBUG(printf("%u: NET write message failed. Given 'len' %d is bigger than the MAX Payload size %i\n\r",millis(),len,MAX_PAYLOAD_SIZE););
    return false;
  }

  //Divide the message payload into chunks of max_frame_payload_size
  uint8_t fragment_id = (len % max_frame_payload_size != 0) + ((len ) / max_frame_payload_size);  //the number of fragments to send = ceil(len/max_frame_payload_size)
   200d8:	c6 01       	movw	r24, r12
   200da:	68 e1       	ldi	r22, 0x18	; 24
   200dc:	70 e0       	ldi	r23, 0x00	; 0
   200de:	0f 94 35 16 	call	0x22c6a	; 0x22c6a <__udivmodhi4>
   200e2:	21 e0       	ldi	r18, 0x01	; 1
   200e4:	89 2b       	or	r24, r25
   200e6:	09 f4       	brne	.+2      	; 0x200ea <RF24Network::write(RF24NetworkHeader&, void const*, unsigned int, unsigned int)+0xd6>
   200e8:	20 e0       	ldi	r18, 0x00	; 0
   200ea:	c6 01       	movw	r24, r12
   200ec:	68 e1       	ldi	r22, 0x18	; 24
   200ee:	70 e0       	ldi	r23, 0x00	; 0
   200f0:	0f 94 35 16 	call	0x22c6a	; 0x22c6a <__udivmodhi4>
   200f4:	72 2e       	mov	r7, r18
   200f6:	76 0e       	add	r7, r22
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:760

  uint8_t msgCount = 0;

  IF_SERIAL_DEBUG_FRAGMENTATION(printf("%lu: FRG Total message fragments %d\n\r",millis(),fragment_id););
  
  if(header.to_node != 0100){
   200f8:	f7 01       	movw	r30, r14
   200fa:	82 81       	ldd	r24, Z+2	; 0x02
   200fc:	93 81       	ldd	r25, Z+3	; 0x03
   200fe:	80 34       	cpi	r24, 0x40	; 64
   20100:	91 05       	cpc	r25, r1
   20102:	39 f0       	breq	.+14     	; 0x20112 <RF24Network::write(RF24NetworkHeader&, void const*, unsigned int, unsigned int)+0xfe>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:761
    networkFlags |= FLAG_FAST_FRAG;
   20104:	8a a5       	ldd	r24, Y+42	; 0x2a
   20106:	84 60       	ori	r24, 0x04	; 4
   20108:	8a a7       	std	Y+42, r24	; 0x2a
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:763
	#if !defined (DUAL_HEAD_RADIO)
	radio.stopListening();
   2010a:	8f a5       	ldd	r24, Y+47	; 0x2f
   2010c:	98 a9       	ldd	r25, Y+48	; 0x30
   2010e:	0e 94 a2 f5 	call	0x1eb44	; 0x1eb44 <RF24::stopListening()>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:768
	#endif
  }

  uint8_t retriesPerFrag = 0;
  uint8_t type = header.type;
   20112:	f7 01       	movw	r30, r14
   20114:	46 80       	ldd	r4, Z+6	; 0x06
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:767
	#if !defined (DUAL_HEAD_RADIO)
	radio.stopListening();
	#endif
  }

  uint8_t retriesPerFrag = 0;
   20116:	51 2c       	mov	r5, r1
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:756
  }

  //Divide the message payload into chunks of max_frame_payload_size
  uint8_t fragment_id = (len % max_frame_payload_size != 0) + ((len ) / max_frame_payload_size);  //the number of fragments to send = ceil(len/max_frame_payload_size)

  uint8_t msgCount = 0;
   20118:	61 2c       	mov	r6, r1
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:782
    if (fragment_id == 1) {
      header.type = NETWORK_LAST_FRAGMENT;  //Set the last fragment flag to indicate the last fragment
      header.reserved = type; //The reserved field is used to transmit the header type
    } else {
      if (msgCount == 0) {
        header.type = NETWORK_FIRST_FRAGMENT;
   2011a:	84 e9       	ldi	r24, 0x94	; 148
   2011c:	28 2e       	mov	r2, r24
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:778
    //Copy and fill out the header
    //RF24NetworkHeader fragmentHeader = header;
   header.reserved = fragment_id;

    if (fragment_id == 1) {
      header.type = NETWORK_LAST_FRAGMENT;  //Set the last fragment flag to indicate the last fragment
   2011e:	96 e9       	ldi	r25, 0x96	; 150
   20120:	39 2e       	mov	r3, r25
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:775
  
  while (fragment_id > 0) {

    //Copy and fill out the header
    //RF24NetworkHeader fragmentHeader = header;
   header.reserved = fragment_id;
   20122:	f7 01       	movw	r30, r14
   20124:	77 82       	std	Z+7, r7	; 0x07
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:777

    if (fragment_id == 1) {
   20126:	f1 e0       	ldi	r31, 0x01	; 1
   20128:	7f 12       	cpse	r7, r31
   2012a:	4f c0       	rjmp	.+158    	; 0x201ca <RF24Network::write(RF24NetworkHeader&, void const*, unsigned int, unsigned int)+0x1b6>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:778
      header.type = NETWORK_LAST_FRAGMENT;  //Set the last fragment flag to indicate the last fragment
   2012c:	f7 01       	movw	r30, r14
   2012e:	36 82       	std	Z+6, r3	; 0x06
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:779
      header.reserved = type; //The reserved field is used to transmit the header type
   20130:	47 82       	std	Z+7, r4	; 0x07
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:788
      }else{
        header.type = NETWORK_MORE_FRAGMENTS; //Set the more fragments flag to indicate a fragmented frame
      }
    }
	
    uint16_t offset = msgCount*max_frame_payload_size;
   20132:	e8 e1       	ldi	r30, 0x18	; 24
   20134:	6e 9e       	mul	r6, r30
   20136:	a0 01       	movw	r20, r0
   20138:	11 24       	eor	r1, r1
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:789
	uint16_t fragmentLen = rf24_min((uint16_t)(len-offset),max_frame_payload_size);
   2013a:	96 01       	movw	r18, r12
   2013c:	24 1b       	sub	r18, r20
   2013e:	35 0b       	sbc	r19, r21
   20140:	29 31       	cpi	r18, 0x19	; 25
   20142:	31 05       	cpc	r19, r1
   20144:	10 f0       	brcs	.+4      	; 0x2014a <RF24Network::write(RF24NetworkHeader&, void const*, unsigned int, unsigned int)+0x136>
   20146:	28 e1       	ldi	r18, 0x18	; 24
   20148:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:792

    //Try to send the payload chunk with the copied header
    frame_size = sizeof(RF24NetworkHeader)+fragmentLen;
   2014a:	88 e0       	ldi	r24, 0x08	; 8
   2014c:	82 0f       	add	r24, r18
   2014e:	8c ab       	std	Y+52, r24	; 0x34
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:793
	ok = _write(header,((char *)message)+offset,fragmentLen,writeDirect);
   20150:	4a 0d       	add	r20, r10
   20152:	5b 1d       	adc	r21, r11
   20154:	84 01       	movw	r16, r8
   20156:	b7 01       	movw	r22, r14
   20158:	ce 01       	movw	r24, r28
   2015a:	0e 94 d3 ff 	call	0x1ffa6	; 0x1ffa6 <RF24Network::_write(RF24NetworkHeader&, void const*, unsigned int, unsigned int)>
   2015e:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:795

	if (!ok) {
   20160:	81 11       	cpse	r24, r1
   20162:	3c c0       	rjmp	.+120    	; 0x201dc <RF24Network::write(RF24NetworkHeader&, void const*, unsigned int, unsigned int)+0x1c8>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:796
	   delay(2);
   20164:	62 e0       	ldi	r22, 0x02	; 2
   20166:	70 e0       	ldi	r23, 0x00	; 0
   20168:	80 e0       	ldi	r24, 0x00	; 0
   2016a:	90 e0       	ldi	r25, 0x00	; 0
   2016c:	0f 94 33 0f 	call	0x21e66	; 0x21e66 <delay>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:797
	   ++retriesPerFrag;
   20170:	53 94       	inc	r5
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:807
      msgCount++;
	}
	
    //if(writeDirect != 070){ delay(2); } //Delay 2ms between sending multicast payloads
 
	if (!ok && retriesPerFrag >= 3) {
   20172:	f2 e0       	ldi	r31, 0x02	; 2
   20174:	f5 15       	cp	r31, r5
   20176:	a8 f6       	brcc	.-86     	; 0x20122 <RF24Network::write(RF24NetworkHeader&, void const*, unsigned int, unsigned int)+0x10e>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:819
    #if defined SERIAL_DEBUG_FRAGMENTATION_L2 
	  printf("%lu: FRG message transmission with fragmentID '%d' sucessfull.\n\r",millis(),fragment_id);
	#endif

  }
  header.type = type;
   20178:	f7 01       	movw	r30, r14
   2017a:	46 82       	std	Z+6, r4	; 0x06
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:821
  #if !defined (DUAL_HEAD_RADIO)
  if(networkFlags & FLAG_FAST_FRAG){	
   2017c:	8a a5       	ldd	r24, Y+42	; 0x2a
   2017e:	82 ff       	sbrs	r24, 2
   20180:	14 c0       	rjmp	.+40     	; 0x201aa <RF24Network::write(RF24NetworkHeader&, void const*, unsigned int, unsigned int)+0x196>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:822
    ok = radio.txStandBy(txTimeout);  
   20182:	49 81       	ldd	r20, Y+1	; 0x01
   20184:	5a 81       	ldd	r21, Y+2	; 0x02
   20186:	6b 81       	ldd	r22, Y+3	; 0x03
   20188:	7c 81       	ldd	r23, Y+4	; 0x04
   2018a:	20 e0       	ldi	r18, 0x00	; 0
   2018c:	8f a5       	ldd	r24, Y+47	; 0x2f
   2018e:	98 a9       	ldd	r25, Y+48	; 0x30
   20190:	0e 94 35 f6 	call	0x1ec6a	; 0x1ec6a <RF24::txStandBy(unsigned long, bool)>
   20194:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:823
    radio.startListening();
   20196:	8f a5       	ldd	r24, Y+47	; 0x2f
   20198:	98 a9       	ldd	r25, Y+48	; 0x30
   2019a:	0e 94 9b f7 	call	0x1ef36	; 0x1ef36 <RF24::startListening()>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:824
    radio.setAutoAck(0,0);
   2019e:	40 e0       	ldi	r20, 0x00	; 0
   201a0:	60 e0       	ldi	r22, 0x00	; 0
   201a2:	8f a5       	ldd	r24, Y+47	; 0x2f
   201a4:	98 a9       	ldd	r25, Y+48	; 0x30
   201a6:	0e 94 17 f8 	call	0x1f02e	; 0x1f02e <RF24::setAutoAck(unsigned char, bool)>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:826
  }  
  networkFlags &= ~FLAG_FAST_FRAG;
   201aa:	8a a5       	ldd	r24, Y+42	; 0x2a
   201ac:	8b 7f       	andi	r24, 0xFB	; 251
   201ae:	8a a7       	std	Y+42, r24	; 0x2a
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:828
  
  if(!ok){
   201b0:	11 23       	and	r17, r17
   201b2:	09 f4       	brne	.+2      	; 0x201b6 <RF24Network::write(RF24NetworkHeader&, void const*, unsigned int, unsigned int)+0x1a2>
   201b4:	8f cf       	rjmp	.-226    	; 0x200d4 <RF24Network::write(RF24NetworkHeader&, void const*, unsigned int, unsigned int)+0xc0>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:838
  //delay( rf24_min(len/48,20));

  //Return true if all the chunks where sent successfully
 
  IF_SERIAL_DEBUG_FRAGMENTATION(printf("%u: FRG total message fragments sent %i. \n",millis(),msgCount); );
  if(fragment_id > 0){
   201b6:	77 20       	and	r7, r7
   201b8:	09 f4       	brne	.+2      	; 0x201bc <RF24Network::write(RF24NetworkHeader&, void const*, unsigned int, unsigned int)+0x1a8>
   201ba:	6c cf       	rjmp	.-296    	; 0x20094 <RF24Network::write(RF24NetworkHeader&, void const*, unsigned int, unsigned int)+0x80>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:839
    txTime = millis();
   201bc:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   201c0:	6b a7       	std	Y+43, r22	; 0x2b
   201c2:	7c a7       	std	Y+44, r23	; 0x2c
   201c4:	8d a7       	std	Y+45, r24	; 0x2d
   201c6:	9e a7       	std	Y+46, r25	; 0x2e
   201c8:	85 cf       	rjmp	.-246    	; 0x200d4 <RF24Network::write(RF24NetworkHeader&, void const*, unsigned int, unsigned int)+0xc0>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:781

    if (fragment_id == 1) {
      header.type = NETWORK_LAST_FRAGMENT;  //Set the last fragment flag to indicate the last fragment
      header.reserved = type; //The reserved field is used to transmit the header type
    } else {
      if (msgCount == 0) {
   201ca:	61 10       	cpse	r6, r1
   201cc:	03 c0       	rjmp	.+6      	; 0x201d4 <RF24Network::write(RF24NetworkHeader&, void const*, unsigned int, unsigned int)+0x1c0>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:782
        header.type = NETWORK_FIRST_FRAGMENT;
   201ce:	f7 01       	movw	r30, r14
   201d0:	26 82       	std	Z+6, r2	; 0x06
   201d2:	af cf       	rjmp	.-162    	; 0x20132 <RF24Network::write(RF24NetworkHeader&, void const*, unsigned int, unsigned int)+0x11e>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:784
      }else{
        header.type = NETWORK_MORE_FRAGMENTS; //Set the more fragments flag to indicate a fragmented frame
   201d4:	85 e9       	ldi	r24, 0x95	; 149
   201d6:	f7 01       	movw	r30, r14
   201d8:	86 83       	std	Z+6, r24	; 0x06
   201da:	ab cf       	rjmp	.-170    	; 0x20132 <RF24Network::write(RF24NetworkHeader&, void const*, unsigned int, unsigned int)+0x11e>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:801
	   delay(2);
	   ++retriesPerFrag;

	}else{
	  retriesPerFrag = 0;
	  fragment_id--;
   201dc:	7a 94       	dec	r7
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:802
      msgCount++;
   201de:	63 94       	inc	r6
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:771

  uint8_t retriesPerFrag = 0;
  uint8_t type = header.type;
  bool ok = 0;
  
  while (fragment_id > 0) {
   201e0:	77 20       	and	r7, r7
   201e2:	51 f2       	breq	.-108    	; 0x20178 <RF24Network::write(RF24NetworkHeader&, void const*, unsigned int, unsigned int)+0x164>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:800
	if (!ok) {
	   delay(2);
	   ++retriesPerFrag;

	}else{
	  retriesPerFrag = 0;
   201e4:	51 2c       	mov	r5, r1
   201e6:	9d cf       	rjmp	.-198    	; 0x20122 <RF24Network::write(RF24NetworkHeader&, void const*, unsigned int, unsigned int)+0x10e>

000201e8 <RF24Network::multicast(RF24NetworkHeader&, void const*, unsigned int, unsigned char)>:
_ZN11RF24Network9multicastER17RF24NetworkHeaderPKvjh():
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:715
}


#if defined RF24NetworkMulticast
/******************************************************************/
bool RF24Network::multicast(RF24NetworkHeader& header,const void* message, uint16_t len, uint8_t level){
   201e8:	af 92       	push	r10
   201ea:	bf 92       	push	r11
   201ec:	cf 92       	push	r12
   201ee:	df 92       	push	r13
   201f0:	ef 92       	push	r14
   201f2:	ff 92       	push	r15
   201f4:	0f 93       	push	r16
   201f6:	1f 93       	push	r17
   201f8:	cf 93       	push	r28
   201fa:	df 93       	push	r29
   201fc:	7c 01       	movw	r14, r24
   201fe:	eb 01       	movw	r28, r22
   20200:	6a 01       	movw	r12, r20
   20202:	59 01       	movw	r10, r18
   20204:	80 2f       	mov	r24, r16
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:717
	// Fill out the header
  header.to_node = 0100;
   20206:	20 e4       	ldi	r18, 0x40	; 64
   20208:	30 e0       	ldi	r19, 0x00	; 0
   2020a:	3b 83       	std	Y+3, r19	; 0x03
   2020c:	2a 83       	std	Y+2, r18	; 0x02
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:718
  header.from_node = node_address;
   2020e:	f7 01       	movw	r30, r14
   20210:	22 a9       	ldd	r18, Z+50	; 0x32
   20212:	33 a9       	ldd	r19, Z+51	; 0x33
   20214:	39 83       	std	Y+1, r19	; 0x01
   20216:	28 83       	st	Y, r18
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:719
  return write(header, message, len, levelToAddress(level));
   20218:	0e 94 8c fc 	call	0x1f918	; 0x1f918 <levelToAddress(unsigned char)>
   2021c:	8c 01       	movw	r16, r24
   2021e:	95 01       	movw	r18, r10
   20220:	a6 01       	movw	r20, r12
   20222:	be 01       	movw	r22, r28
   20224:	c7 01       	movw	r24, r14
   20226:	0f 94 0a 00 	call	0x20014	; 0x20014 <RF24Network::write(RF24NetworkHeader&, void const*, unsigned int, unsigned int)>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:720
}
   2022a:	df 91       	pop	r29
   2022c:	cf 91       	pop	r28
   2022e:	1f 91       	pop	r17
   20230:	0f 91       	pop	r16
   20232:	ff 90       	pop	r15
   20234:	ef 90       	pop	r14
   20236:	df 90       	pop	r13
   20238:	cf 90       	pop	r12
   2023a:	bf 90       	pop	r11
   2023c:	af 90       	pop	r10
   2023e:	08 95       	ret

00020240 <RF24Network::write(RF24NetworkHeader&, void const*, unsigned int)>:
_ZN11RF24Network5writeER17RF24NetworkHeaderPKvj():
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:724
#endif

/******************************************************************/
bool RF24Network::write(RF24NetworkHeader& header,const void* message, uint16_t len){    
   20240:	0f 93       	push	r16
   20242:	1f 93       	push	r17
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:725
	return write(header,message,len,070);
   20244:	08 e3       	ldi	r16, 0x38	; 56
   20246:	10 e0       	ldi	r17, 0x00	; 0
   20248:	0f 94 0a 00 	call	0x20014	; 0x20014 <RF24Network::write(RF24NetworkHeader&, void const*, unsigned int, unsigned int)>
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:726
}
   2024c:	1f 91       	pop	r17
   2024e:	0f 91       	pop	r16
   20250:	08 95       	ret

00020252 <RF24Mesh::RF24Mesh(RF24&, RF24Network&)>:
_ZN8RF24MeshC2ER4RF24R11RF24Network():
/home/saric/Arduino/libraries/RF24Mesh/RF24Mesh.cpp:525
	//for(int i=0; i< addrListTop; i++){
	printf("ID: %d  ADDR: 0%o  \n",aList.nodeID,aList.address);
	//}
	infile.close();*/
#endif
}
   20252:	fc 01       	movw	r30, r24
   20254:	77 83       	std	Z+7, r23	; 0x07
   20256:	66 83       	std	Z+6, r22	; 0x06
   20258:	51 87       	std	Z+9, r21	; 0x09
   2025a:	40 87       	std	Z+8, r20	; 0x08
   2025c:	08 95       	ret

0002025e <RF24Mesh::setChannel(unsigned char)>:
_ZN8RF24Mesh10setChannelEh():
   2025e:	cf 93       	push	r28
   20260:	df 93       	push	r29
   20262:	ec 01       	movw	r28, r24
   20264:	6b 8b       	std	Y+19, r22	; 0x13
   20266:	8e 81       	ldd	r24, Y+6	; 0x06
   20268:	9f 81       	ldd	r25, Y+7	; 0x07
   2026a:	0e 94 9b f5 	call	0x1eb36	; 0x1eb36 <RF24::setChannel(unsigned char)>
   2026e:	8e 81       	ldd	r24, Y+6	; 0x06
   20270:	9f 81       	ldd	r25, Y+7	; 0x07
   20272:	df 91       	pop	r29
   20274:	cf 91       	pop	r28
   20276:	0c 94 9b f7 	jmp	0x1ef36	; 0x1ef36 <RF24::startListening()>

0002027a <RF24Mesh::getAddress(unsigned char)>:
_ZN8RF24Mesh10getAddressEh():
   2027a:	cf 92       	push	r12
   2027c:	df 92       	push	r13
   2027e:	ef 92       	push	r14
   20280:	ff 92       	push	r15
   20282:	0f 93       	push	r16
   20284:	1f 93       	push	r17
   20286:	cf 93       	push	r28
   20288:	df 93       	push	r29
   2028a:	00 d0       	rcall	.+0      	; 0x2028c <RF24Mesh::getAddress(unsigned char)+0x12>
   2028c:	00 d0       	rcall	.+0      	; 0x2028e <RF24Mesh::getAddress(unsigned char)+0x14>
   2028e:	00 d0       	rcall	.+0      	; 0x20290 <RF24Mesh::getAddress(unsigned char)+0x16>
   20290:	cd b7       	in	r28, 0x3d	; 61
   20292:	de b7       	in	r29, 0x3e	; 62
   20294:	fc 01       	movw	r30, r24
   20296:	69 87       	std	Y+9, r22	; 0x09
   20298:	82 81       	ldd	r24, Z+2	; 0x02
   2029a:	81 11       	cpse	r24, r1
   2029c:	26 c0       	rjmp	.+76     	; 0x202ea <RF24Mesh::getAddress(unsigned char)+0x70>
   2029e:	95 81       	ldd	r25, Z+5	; 0x05
   202a0:	46 2f       	mov	r20, r22
   202a2:	30 e0       	ldi	r19, 0x00	; 0
   202a4:	20 e0       	ldi	r18, 0x00	; 0
   202a6:	98 13       	cpse	r25, r24
   202a8:	11 c0       	rjmp	.+34     	; 0x202cc <RF24Mesh::getAddress(unsigned char)+0x52>
   202aa:	8f ef       	ldi	r24, 0xFF	; 255
   202ac:	9f ef       	ldi	r25, 0xFF	; 255
   202ae:	29 96       	adiw	r28, 0x09	; 9
   202b0:	0f b6       	in	r0, 0x3f	; 63
   202b2:	f8 94       	cli
   202b4:	de bf       	out	0x3e, r29	; 62
   202b6:	0f be       	out	0x3f, r0	; 63
   202b8:	cd bf       	out	0x3d, r28	; 61
   202ba:	df 91       	pop	r29
   202bc:	cf 91       	pop	r28
   202be:	1f 91       	pop	r17
   202c0:	0f 91       	pop	r16
   202c2:	ff 90       	pop	r15
   202c4:	ef 90       	pop	r14
   202c6:	df 90       	pop	r13
   202c8:	cf 90       	pop	r12
   202ca:	08 95       	ret
   202cc:	a3 81       	ldd	r26, Z+3	; 0x03
   202ce:	b4 81       	ldd	r27, Z+4	; 0x04
   202d0:	a2 0f       	add	r26, r18
   202d2:	b3 1f       	adc	r27, r19
   202d4:	2d 5f       	subi	r18, 0xFD	; 253
   202d6:	3f 4f       	sbci	r19, 0xFF	; 255
   202d8:	5c 91       	ld	r21, X
   202da:	54 13       	cpse	r21, r20
   202dc:	04 c0       	rjmp	.+8      	; 0x202e6 <RF24Mesh::getAddress(unsigned char)+0x6c>
   202de:	11 96       	adiw	r26, 0x01	; 1
   202e0:	8d 91       	ld	r24, X+
   202e2:	9c 91       	ld	r25, X
   202e4:	e4 cf       	rjmp	.-56     	; 0x202ae <RF24Mesh::getAddress(unsigned char)+0x34>
   202e6:	8f 5f       	subi	r24, 0xFF	; 255
   202e8:	de cf       	rjmp	.-68     	; 0x202a6 <RF24Mesh::getAddress(unsigned char)+0x2c>
   202ea:	80 81       	ld	r24, Z
   202ec:	91 81       	ldd	r25, Z+1	; 0x01
   202ee:	84 32       	cpi	r24, 0x24	; 36
   202f0:	99 40       	sbci	r25, 0x09	; 9
   202f2:	d9 f2       	breq	.-74     	; 0x202aa <RF24Mesh::getAddress(unsigned char)+0x30>
   202f4:	89 85       	ldd	r24, Y+9	; 0x09
   202f6:	88 23       	and	r24, r24
   202f8:	09 f4       	brne	.+2      	; 0x202fc <RF24Mesh::getAddress(unsigned char)+0x82>
   202fa:	44 c0       	rjmp	.+136    	; 0x20384 <RF24Mesh::getAddress(unsigned char)+0x10a>
   202fc:	8f 01       	movw	r16, r30
_ZN17RF24NetworkHeaderC4Ejh():
   202fe:	1c 82       	std	Y+4, r1	; 0x04
   20300:	1b 82       	std	Y+3, r1	; 0x03
   20302:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <RF24NetworkHeader::next_id>
   20306:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <RF24NetworkHeader::next_id+0x1>
   2030a:	9c 01       	movw	r18, r24
   2030c:	2f 5f       	subi	r18, 0xFF	; 255
   2030e:	3f 4f       	sbci	r19, 0xFF	; 255
   20310:	30 93 81 02 	sts	0x0281, r19	; 0x800281 <RF24NetworkHeader::next_id+0x1>
   20314:	20 93 80 02 	sts	0x0280, r18	; 0x800280 <RF24NetworkHeader::next_id>
   20318:	9e 83       	std	Y+6, r25	; 0x06
   2031a:	8d 83       	std	Y+5, r24	; 0x05
   2031c:	84 ec       	ldi	r24, 0xC4	; 196
   2031e:	8f 83       	std	Y+7, r24	; 0x07
_ZN8RF24Mesh10getAddressEh():
   20320:	22 e0       	ldi	r18, 0x02	; 2
   20322:	30 e0       	ldi	r19, 0x00	; 0
   20324:	ae 01       	movw	r20, r28
   20326:	47 5f       	subi	r20, 0xF7	; 247
   20328:	5f 4f       	sbci	r21, 0xFF	; 255
   2032a:	be 01       	movw	r22, r28
   2032c:	6f 5f       	subi	r22, 0xFF	; 255
   2032e:	7f 4f       	sbci	r23, 0xFF	; 255
   20330:	80 85       	ldd	r24, Z+8	; 0x08
   20332:	91 85       	ldd	r25, Z+9	; 0x09
   20334:	0f 94 20 01 	call	0x20240	; 0x20240 <RF24Network::write(RF24NetworkHeader&, void const*, unsigned int)>
   20338:	88 23       	and	r24, r24
   2033a:	09 f4       	brne	.+2      	; 0x2033e <RF24Mesh::getAddress(unsigned char)+0xc4>
   2033c:	b6 cf       	rjmp	.-148    	; 0x202aa <RF24Mesh::getAddress(unsigned char)+0x30>
   2033e:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   20342:	6b 01       	movw	r12, r22
   20344:	7c 01       	movw	r14, r24
   20346:	d8 01       	movw	r26, r16
   20348:	18 96       	adiw	r26, 0x08	; 8
   2034a:	8d 91       	ld	r24, X+
   2034c:	9c 91       	ld	r25, X
   2034e:	0e 94 84 fe 	call	0x1fd08	; 0x1fd08 <RF24Network::update()>
   20352:	84 3c       	cpi	r24, 0xC4	; 196
   20354:	61 f0       	breq	.+24     	; 0x2036e <RF24Mesh::getAddress(unsigned char)+0xf4>
   20356:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   2035a:	6c 19       	sub	r22, r12
   2035c:	7d 09       	sbc	r23, r13
   2035e:	8e 09       	sbc	r24, r14
   20360:	9f 09       	sbc	r25, r15
   20362:	67 39       	cpi	r22, 0x97	; 151
   20364:	71 05       	cpc	r23, r1
   20366:	81 05       	cpc	r24, r1
   20368:	91 05       	cpc	r25, r1
   2036a:	68 f3       	brcs	.-38     	; 0x20346 <RF24Mesh::getAddress(unsigned char)+0xcc>
   2036c:	9e cf       	rjmp	.-196    	; 0x202aa <RF24Mesh::getAddress(unsigned char)+0x30>
   2036e:	d8 01       	movw	r26, r16
   20370:	18 96       	adiw	r26, 0x08	; 8
   20372:	ed 91       	ld	r30, X+
   20374:	fc 91       	ld	r31, X
   20376:	87 85       	ldd	r24, Z+15	; 0x0f
   20378:	90 89       	ldd	r25, Z+16	; 0x10
   2037a:	97 ff       	sbrs	r25, 7
   2037c:	98 cf       	rjmp	.-208    	; 0x202ae <RF24Mesh::getAddress(unsigned char)+0x34>
   2037e:	8e ef       	ldi	r24, 0xFE	; 254
   20380:	9f ef       	ldi	r25, 0xFF	; 255
   20382:	95 cf       	rjmp	.-214    	; 0x202ae <RF24Mesh::getAddress(unsigned char)+0x34>
   20384:	90 e0       	ldi	r25, 0x00	; 0
   20386:	80 e0       	ldi	r24, 0x00	; 0
   20388:	92 cf       	rjmp	.-220    	; 0x202ae <RF24Mesh::getAddress(unsigned char)+0x34>

0002038a <RF24Mesh::getNodeID(unsigned int)>:
_ZN8RF24Mesh9getNodeIDEj():
   2038a:	cf 92       	push	r12
   2038c:	df 92       	push	r13
   2038e:	ef 92       	push	r14
   20390:	ff 92       	push	r15
   20392:	0f 93       	push	r16
   20394:	1f 93       	push	r17
   20396:	cf 93       	push	r28
   20398:	df 93       	push	r29
   2039a:	00 d0       	rcall	.+0      	; 0x2039c <RF24Mesh::getNodeID(unsigned int)+0x12>
   2039c:	00 d0       	rcall	.+0      	; 0x2039e <RF24Mesh::getNodeID(unsigned int)+0x14>
   2039e:	00 d0       	rcall	.+0      	; 0x203a0 <RF24Mesh::getNodeID(unsigned int)+0x16>
   203a0:	1f 92       	push	r1
   203a2:	cd b7       	in	r28, 0x3d	; 61
   203a4:	de b7       	in	r29, 0x3e	; 62
   203a6:	fc 01       	movw	r30, r24
   203a8:	7a 87       	std	Y+10, r23	; 0x0a
   203aa:	69 87       	std	Y+9, r22	; 0x09
   203ac:	86 2f       	mov	r24, r22
   203ae:	97 2f       	mov	r25, r23
   203b0:	8f 3f       	cpi	r24, 0xFF	; 255
   203b2:	98 07       	cpc	r25, r24
   203b4:	89 f4       	brne	.+34     	; 0x203d8 <RF24Mesh::getNodeID(unsigned int)+0x4e>
   203b6:	82 81       	ldd	r24, Z+2	; 0x02
   203b8:	90 e0       	ldi	r25, 0x00	; 0
   203ba:	2a 96       	adiw	r28, 0x0a	; 10
   203bc:	0f b6       	in	r0, 0x3f	; 63
   203be:	f8 94       	cli
   203c0:	de bf       	out	0x3e, r29	; 62
   203c2:	0f be       	out	0x3f, r0	; 63
   203c4:	cd bf       	out	0x3d, r28	; 61
   203c6:	df 91       	pop	r29
   203c8:	cf 91       	pop	r28
   203ca:	1f 91       	pop	r17
   203cc:	0f 91       	pop	r16
   203ce:	ff 90       	pop	r15
   203d0:	ef 90       	pop	r14
   203d2:	df 90       	pop	r13
   203d4:	cf 90       	pop	r12
   203d6:	08 95       	ret
   203d8:	00 97       	sbiw	r24, 0x00	; 0
   203da:	09 f4       	brne	.+2      	; 0x203de <RF24Mesh::getNodeID(unsigned int)+0x54>
   203dc:	61 c0       	rjmp	.+194    	; 0x204a0 <RF24Mesh::getNodeID(unsigned int)+0x116>
   203de:	20 81       	ld	r18, Z
   203e0:	31 81       	ldd	r19, Z+1	; 0x01
   203e2:	21 15       	cp	r18, r1
   203e4:	31 05       	cpc	r19, r1
   203e6:	c1 f4       	brne	.+48     	; 0x20418 <RF24Mesh::getNodeID(unsigned int)+0x8e>
   203e8:	35 81       	ldd	r19, Z+5	; 0x05
   203ea:	50 e0       	ldi	r21, 0x00	; 0
   203ec:	40 e0       	ldi	r20, 0x00	; 0
   203ee:	20 e0       	ldi	r18, 0x00	; 0
   203f0:	32 17       	cp	r19, r18
   203f2:	09 f4       	brne	.+2      	; 0x203f6 <RF24Mesh::getNodeID(unsigned int)+0x6c>
   203f4:	4b c0       	rjmp	.+150    	; 0x2048c <RF24Mesh::getNodeID(unsigned int)+0x102>
   203f6:	a3 81       	ldd	r26, Z+3	; 0x03
   203f8:	b4 81       	ldd	r27, Z+4	; 0x04
   203fa:	a4 0f       	add	r26, r20
   203fc:	b5 1f       	adc	r27, r21
   203fe:	4d 5f       	subi	r20, 0xFD	; 253
   20400:	5f 4f       	sbci	r21, 0xFF	; 255
   20402:	11 96       	adiw	r26, 0x01	; 1
   20404:	6d 91       	ld	r22, X+
   20406:	7c 91       	ld	r23, X
   20408:	12 97       	sbiw	r26, 0x02	; 2
   2040a:	86 17       	cp	r24, r22
   2040c:	97 07       	cpc	r25, r23
   2040e:	11 f4       	brne	.+4      	; 0x20414 <RF24Mesh::getNodeID(unsigned int)+0x8a>
   20410:	8c 91       	ld	r24, X
   20412:	d2 cf       	rjmp	.-92     	; 0x203b8 <RF24Mesh::getNodeID(unsigned int)+0x2e>
   20414:	2f 5f       	subi	r18, 0xFF	; 255
   20416:	ec cf       	rjmp	.-40     	; 0x203f0 <RF24Mesh::getNodeID(unsigned int)+0x66>
   20418:	24 32       	cpi	r18, 0x24	; 36
   2041a:	39 40       	sbci	r19, 0x09	; 9
   2041c:	b9 f1       	breq	.+110    	; 0x2048c <RF24Mesh::getNodeID(unsigned int)+0x102>
   2041e:	8f 01       	movw	r16, r30
_ZN17RF24NetworkHeaderC4Ejh():
   20420:	1c 82       	std	Y+4, r1	; 0x04
   20422:	1b 82       	std	Y+3, r1	; 0x03
   20424:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <RF24NetworkHeader::next_id>
   20428:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <RF24NetworkHeader::next_id+0x1>
   2042c:	9c 01       	movw	r18, r24
   2042e:	2f 5f       	subi	r18, 0xFF	; 255
   20430:	3f 4f       	sbci	r19, 0xFF	; 255
   20432:	30 93 81 02 	sts	0x0281, r19	; 0x800281 <RF24NetworkHeader::next_id+0x1>
   20436:	20 93 80 02 	sts	0x0280, r18	; 0x800280 <RF24NetworkHeader::next_id>
   2043a:	9e 83       	std	Y+6, r25	; 0x06
   2043c:	8d 83       	std	Y+5, r24	; 0x05
   2043e:	86 ec       	ldi	r24, 0xC6	; 198
   20440:	8f 83       	std	Y+7, r24	; 0x07
_ZN8RF24Mesh9getNodeIDEj():
   20442:	22 e0       	ldi	r18, 0x02	; 2
   20444:	30 e0       	ldi	r19, 0x00	; 0
   20446:	ae 01       	movw	r20, r28
   20448:	47 5f       	subi	r20, 0xF7	; 247
   2044a:	5f 4f       	sbci	r21, 0xFF	; 255
   2044c:	be 01       	movw	r22, r28
   2044e:	6f 5f       	subi	r22, 0xFF	; 255
   20450:	7f 4f       	sbci	r23, 0xFF	; 255
   20452:	80 85       	ldd	r24, Z+8	; 0x08
   20454:	91 85       	ldd	r25, Z+9	; 0x09
   20456:	0f 94 20 01 	call	0x20240	; 0x20240 <RF24Network::write(RF24NetworkHeader&, void const*, unsigned int)>
   2045a:	88 23       	and	r24, r24
   2045c:	b9 f0       	breq	.+46     	; 0x2048c <RF24Mesh::getNodeID(unsigned int)+0x102>
   2045e:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   20462:	6b 01       	movw	r12, r22
   20464:	7c 01       	movw	r14, r24
   20466:	d8 01       	movw	r26, r16
   20468:	18 96       	adiw	r26, 0x08	; 8
   2046a:	8d 91       	ld	r24, X+
   2046c:	9c 91       	ld	r25, X
   2046e:	0e 94 84 fe 	call	0x1fd08	; 0x1fd08 <RF24Network::update()>
   20472:	86 3c       	cpi	r24, 0xC6	; 198
   20474:	71 f0       	breq	.+28     	; 0x20492 <RF24Mesh::getNodeID(unsigned int)+0x108>
   20476:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   2047a:	6c 19       	sub	r22, r12
   2047c:	7d 09       	sbc	r23, r13
   2047e:	8e 09       	sbc	r24, r14
   20480:	9f 09       	sbc	r25, r15
   20482:	65 3f       	cpi	r22, 0xF5	; 245
   20484:	71 40       	sbci	r23, 0x01	; 1
   20486:	81 05       	cpc	r24, r1
   20488:	91 05       	cpc	r25, r1
   2048a:	68 f3       	brcs	.-38     	; 0x20466 <RF24Mesh::getNodeID(unsigned int)+0xdc>
   2048c:	8f ef       	ldi	r24, 0xFF	; 255
   2048e:	9f ef       	ldi	r25, 0xFF	; 255
   20490:	94 cf       	rjmp	.-216    	; 0x203ba <RF24Mesh::getNodeID(unsigned int)+0x30>
   20492:	d8 01       	movw	r26, r16
   20494:	18 96       	adiw	r26, 0x08	; 8
   20496:	ed 91       	ld	r30, X+
   20498:	fc 91       	ld	r31, X
   2049a:	87 85       	ldd	r24, Z+15	; 0x0f
   2049c:	90 89       	ldd	r25, Z+16	; 0x10
   2049e:	8d cf       	rjmp	.-230    	; 0x203ba <RF24Mesh::getNodeID(unsigned int)+0x30>
   204a0:	90 e0       	ldi	r25, 0x00	; 0
   204a2:	80 e0       	ldi	r24, 0x00	; 0
   204a4:	8a cf       	rjmp	.-236    	; 0x203ba <RF24Mesh::getNodeID(unsigned int)+0x30>

000204a6 <RF24Mesh::update()>:
_ZN8RF24Mesh6updateEv():
   204a6:	cf 92       	push	r12
   204a8:	df 92       	push	r13
   204aa:	ff 92       	push	r15
   204ac:	0f 93       	push	r16
   204ae:	1f 93       	push	r17
   204b0:	cf 93       	push	r28
   204b2:	df 93       	push	r29
   204b4:	1f 92       	push	r1
   204b6:	1f 92       	push	r1
   204b8:	cd b7       	in	r28, 0x3d	; 61
   204ba:	de b7       	in	r29, 0x3e	; 62
   204bc:	8c 01       	movw	r16, r24
   204be:	dc 01       	movw	r26, r24
   204c0:	18 96       	adiw	r26, 0x08	; 8
   204c2:	8d 91       	ld	r24, X+
   204c4:	9c 91       	ld	r25, X
   204c6:	0e 94 84 fe 	call	0x1fd08	; 0x1fd08 <RF24Network::update()>
   204ca:	f8 2e       	mov	r15, r24
   204cc:	f8 01       	movw	r30, r16
   204ce:	80 81       	ld	r24, Z
   204d0:	91 81       	ldd	r25, Z+1	; 0x01
   204d2:	84 32       	cpi	r24, 0x24	; 36
   204d4:	99 40       	sbci	r25, 0x09	; 9
   204d6:	79 f1       	breq	.+94     	; 0x20536 <RF24Mesh::update()+0x90>
   204d8:	23 ec       	ldi	r18, 0xC3	; 195
   204da:	f2 12       	cpse	r15, r18
   204dc:	04 c0       	rjmp	.+8      	; 0x204e6 <RF24Mesh::update()+0x40>
   204de:	81 e0       	ldi	r24, 0x01	; 1
   204e0:	d8 01       	movw	r26, r16
   204e2:	1a 96       	adiw	r26, 0x0a	; 10
   204e4:	8c 93       	st	X, r24
   204e6:	f8 01       	movw	r30, r16
   204e8:	82 81       	ldd	r24, Z+2	; 0x02
   204ea:	81 11       	cpse	r24, r1
   204ec:	24 c0       	rjmp	.+72     	; 0x20536 <RF24Mesh::update()+0x90>
   204ee:	8f 2d       	mov	r24, r15
   204f0:	8d 7f       	andi	r24, 0xFD	; 253
   204f2:	84 3c       	cpi	r24, 0xC4	; 196
   204f4:	d9 f5       	brne	.+118    	; 0x2056c <RF24Mesh::update()+0xc6>
   204f6:	00 84       	ldd	r0, Z+8	; 0x08
   204f8:	f1 85       	ldd	r31, Z+9	; 0x09
   204fa:	e0 2d       	mov	r30, r0
   204fc:	6f 01       	movw	r12, r30
   204fe:	27 e0       	ldi	r18, 0x07	; 7
   20500:	c2 0e       	add	r12, r18
   20502:	d1 1c       	adc	r13, r1
   20504:	87 81       	ldd	r24, Z+7	; 0x07
   20506:	90 85       	ldd	r25, Z+8	; 0x08
   20508:	92 87       	std	Z+10, r25	; 0x0a
   2050a:	81 87       	std	Z+9, r24	; 0x09
   2050c:	67 85       	ldd	r22, Z+15	; 0x0f
   2050e:	84 ec       	ldi	r24, 0xC4	; 196
   20510:	f8 12       	cpse	r15, r24
   20512:	1c c0       	rjmp	.+56     	; 0x2054c <RF24Mesh::update()+0xa6>
   20514:	c8 01       	movw	r24, r16
   20516:	0f 94 3d 01 	call	0x2027a	; 0x2027a <RF24Mesh::getAddress(unsigned char)>
   2051a:	9a 83       	std	Y+2, r25	; 0x02
   2051c:	89 83       	std	Y+1, r24	; 0x01
   2051e:	22 e0       	ldi	r18, 0x02	; 2
   20520:	30 e0       	ldi	r19, 0x00	; 0
   20522:	ae 01       	movw	r20, r28
   20524:	4f 5f       	subi	r20, 0xFF	; 255
   20526:	5f 4f       	sbci	r21, 0xFF	; 255
   20528:	b6 01       	movw	r22, r12
   2052a:	d8 01       	movw	r26, r16
   2052c:	18 96       	adiw	r26, 0x08	; 8
   2052e:	8d 91       	ld	r24, X+
   20530:	9c 91       	ld	r25, X
   20532:	0f 94 20 01 	call	0x20240	; 0x20240 <RF24Network::write(RF24NetworkHeader&, void const*, unsigned int)>
   20536:	8f 2d       	mov	r24, r15
   20538:	0f 90       	pop	r0
   2053a:	0f 90       	pop	r0
   2053c:	df 91       	pop	r29
   2053e:	cf 91       	pop	r28
   20540:	1f 91       	pop	r17
   20542:	0f 91       	pop	r16
   20544:	ff 90       	pop	r15
   20546:	df 90       	pop	r13
   20548:	cf 90       	pop	r12
   2054a:	08 95       	ret
   2054c:	70 e0       	ldi	r23, 0x00	; 0
   2054e:	c8 01       	movw	r24, r16
   20550:	0f 94 c5 01 	call	0x2038a	; 0x2038a <RF24Mesh::getNodeID(unsigned int)>
   20554:	9a 83       	std	Y+2, r25	; 0x02
   20556:	89 83       	std	Y+1, r24	; 0x01
   20558:	22 e0       	ldi	r18, 0x02	; 2
   2055a:	30 e0       	ldi	r19, 0x00	; 0
   2055c:	ae 01       	movw	r20, r28
   2055e:	4f 5f       	subi	r20, 0xFF	; 255
   20560:	5f 4f       	sbci	r21, 0xFF	; 255
   20562:	b6 01       	movw	r22, r12
   20564:	f8 01       	movw	r30, r16
   20566:	80 85       	ldd	r24, Z+8	; 0x08
   20568:	91 85       	ldd	r25, Z+9	; 0x09
   2056a:	e3 cf       	rjmp	.-58     	; 0x20532 <RF24Mesh::update()+0x8c>
   2056c:	f5 ec       	ldi	r31, 0xC5	; 197
   2056e:	ff 12       	cpse	r15, r31
   20570:	e2 cf       	rjmp	.-60     	; 0x20536 <RF24Mesh::update()+0x90>
   20572:	f8 01       	movw	r30, r16
   20574:	a0 85       	ldd	r26, Z+8	; 0x08
   20576:	b1 85       	ldd	r27, Z+9	; 0x09
   20578:	35 81       	ldd	r19, Z+5	; 0x05
   2057a:	90 e0       	ldi	r25, 0x00	; 0
   2057c:	80 e0       	ldi	r24, 0x00	; 0
   2057e:	20 e0       	ldi	r18, 0x00	; 0
   20580:	32 17       	cp	r19, r18
   20582:	c9 f2       	breq	.-78     	; 0x20536 <RF24Mesh::update()+0x90>
   20584:	f8 01       	movw	r30, r16
   20586:	43 81       	ldd	r20, Z+3	; 0x03
   20588:	54 81       	ldd	r21, Z+4	; 0x04
   2058a:	fa 01       	movw	r30, r20
   2058c:	e8 0f       	add	r30, r24
   2058e:	f9 1f       	adc	r31, r25
   20590:	61 81       	ldd	r22, Z+1	; 0x01
   20592:	72 81       	ldd	r23, Z+2	; 0x02
   20594:	17 96       	adiw	r26, 0x07	; 7
   20596:	4d 91       	ld	r20, X+
   20598:	5c 91       	ld	r21, X
   2059a:	18 97       	sbiw	r26, 0x08	; 8
   2059c:	64 17       	cp	r22, r20
   2059e:	75 07       	cpc	r23, r21
   205a0:	11 f4       	brne	.+4      	; 0x205a6 <RF24Mesh::update()+0x100>
   205a2:	12 82       	std	Z+2, r1	; 0x02
   205a4:	11 82       	std	Z+1, r1	; 0x01
   205a6:	2f 5f       	subi	r18, 0xFF	; 255
   205a8:	03 96       	adiw	r24, 0x03	; 3
   205aa:	ea cf       	rjmp	.-44     	; 0x20580 <RF24Mesh::update()+0xda>

000205ac <RF24Mesh::requestAddress(unsigned char)>:
_ZN8RF24Mesh14requestAddressEh():
   205ac:	4f 92       	push	r4
   205ae:	5f 92       	push	r5
   205b0:	6f 92       	push	r6
   205b2:	7f 92       	push	r7
   205b4:	af 92       	push	r10
   205b6:	bf 92       	push	r11
   205b8:	cf 92       	push	r12
   205ba:	df 92       	push	r13
   205bc:	ef 92       	push	r14
   205be:	ff 92       	push	r15
   205c0:	0f 93       	push	r16
   205c2:	1f 93       	push	r17
   205c4:	cf 93       	push	r28
   205c6:	df 93       	push	r29
   205c8:	cd b7       	in	r28, 0x3d	; 61
   205ca:	de b7       	in	r29, 0x3e	; 62
   205cc:	60 97       	sbiw	r28, 0x10	; 16
   205ce:	0f b6       	in	r0, 0x3f	; 63
   205d0:	f8 94       	cli
   205d2:	de bf       	out	0x3e, r29	; 62
   205d4:	0f be       	out	0x3f, r0	; 63
   205d6:	cd bf       	out	0x3d, r28	; 61
   205d8:	7c 01       	movw	r14, r24
_ZN17RF24NetworkHeaderC4Ejh():
   205da:	80 e4       	ldi	r24, 0x40	; 64
   205dc:	90 e0       	ldi	r25, 0x00	; 0
   205de:	9c 87       	std	Y+12, r25	; 0x0c
   205e0:	8b 87       	std	Y+11, r24	; 0x0b
   205e2:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <RF24NetworkHeader::next_id>
   205e6:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <RF24NetworkHeader::next_id+0x1>
   205ea:	9c 01       	movw	r18, r24
   205ec:	2f 5f       	subi	r18, 0xFF	; 255
   205ee:	3f 4f       	sbci	r19, 0xFF	; 255
   205f0:	30 93 81 02 	sts	0x0281, r19	; 0x800281 <RF24NetworkHeader::next_id+0x1>
   205f4:	20 93 80 02 	sts	0x0280, r18	; 0x800280 <RF24NetworkHeader::next_id>
   205f8:	9e 87       	std	Y+14, r25	; 0x0e
   205fa:	8d 87       	std	Y+13, r24	; 0x0d
   205fc:	82 ec       	ldi	r24, 0xC2	; 194
   205fe:	8f 87       	std	Y+15, r24	; 0x0f
_ZN8RF24Mesh14requestAddressEh():
   20600:	06 2f       	mov	r16, r22
   20602:	30 e0       	ldi	r19, 0x00	; 0
   20604:	20 e0       	ldi	r18, 0x00	; 0
   20606:	50 e0       	ldi	r21, 0x00	; 0
   20608:	40 e0       	ldi	r20, 0x00	; 0
   2060a:	be 01       	movw	r22, r28
   2060c:	67 5f       	subi	r22, 0xF7	; 247
   2060e:	7f 4f       	sbci	r23, 0xFF	; 255
   20610:	d7 01       	movw	r26, r14
   20612:	18 96       	adiw	r26, 0x08	; 8
   20614:	8d 91       	ld	r24, X+
   20616:	9c 91       	ld	r25, X
   20618:	0f 94 f4 00 	call	0x201e8	; 0x201e8 <RF24Network::multicast(RF24NetworkHeader&, void const*, unsigned int, unsigned char)>
   2061c:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   20620:	2b 01       	movw	r4, r22
   20622:	3c 01       	movw	r6, r24
   20624:	d1 2c       	mov	r13, r1
   20626:	f7 01       	movw	r30, r14
   20628:	80 85       	ldd	r24, Z+8	; 0x08
   2062a:	91 85       	ldd	r25, Z+9	; 0x09
   2062c:	0e 94 84 fe 	call	0x1fd08	; 0x1fd08 <RF24Network::update()>
   20630:	82 3c       	cpi	r24, 0xC2	; 194
   20632:	a1 f4       	brne	.+40     	; 0x2065c <RF24Mesh::requestAddress(unsigned char)+0xb0>
   20634:	ed 2d       	mov	r30, r13
   20636:	f0 e0       	ldi	r31, 0x00	; 0
   20638:	ee 0f       	add	r30, r30
   2063a:	ff 1f       	adc	r31, r31
   2063c:	21 e0       	ldi	r18, 0x01	; 1
   2063e:	30 e0       	ldi	r19, 0x00	; 0
   20640:	2c 0f       	add	r18, r28
   20642:	3d 1f       	adc	r19, r29
   20644:	2e 0f       	add	r18, r30
   20646:	3f 1f       	adc	r19, r31
   20648:	f7 01       	movw	r30, r14
   2064a:	a0 85       	ldd	r26, Z+8	; 0x08
   2064c:	b1 85       	ldd	r27, Z+9	; 0x09
   2064e:	17 96       	adiw	r26, 0x07	; 7
   20650:	8d 91       	ld	r24, X+
   20652:	9c 91       	ld	r25, X
   20654:	d9 01       	movw	r26, r18
   20656:	8d 93       	st	X+, r24
   20658:	9c 93       	st	X, r25
   2065a:	d3 94       	inc	r13
   2065c:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   20660:	64 19       	sub	r22, r4
   20662:	75 09       	sbc	r23, r5
   20664:	86 09       	sbc	r24, r6
   20666:	97 09       	sbc	r25, r7
   20668:	68 33       	cpi	r22, 0x38	; 56
   2066a:	71 05       	cpc	r23, r1
   2066c:	81 05       	cpc	r24, r1
   2066e:	91 05       	cpc	r25, r1
   20670:	08 f0       	brcs	.+2      	; 0x20674 <RF24Mesh::requestAddress(unsigned char)+0xc8>
   20672:	ac c0       	rjmp	.+344    	; 0x207cc <RF24Mesh::requestAddress(unsigned char)+0x220>
   20674:	b3 e0       	ldi	r27, 0x03	; 3
   20676:	bd 15       	cp	r27, r13
   20678:	b0 f6       	brcc	.-84     	; 0x20626 <RF24Mesh::requestAddress(unsigned char)+0x7a>
   2067a:	c1 2c       	mov	r12, r1
   2067c:	b1 2c       	mov	r11, r1
   2067e:	93 ec       	ldi	r25, 0xC3	; 195
   20680:	a9 2e       	mov	r10, r25
   20682:	af 86       	std	Y+15, r10	; 0x0f
   20684:	f7 01       	movw	r30, r14
   20686:	82 81       	ldd	r24, Z+2	; 0x02
   20688:	88 8b       	std	Y+16, r24	; 0x10
   2068a:	ec 2d       	mov	r30, r12
   2068c:	f0 e0       	ldi	r31, 0x00	; 0
   2068e:	ee 0f       	add	r30, r30
   20690:	ff 1f       	adc	r31, r31
   20692:	81 e0       	ldi	r24, 0x01	; 1
   20694:	90 e0       	ldi	r25, 0x00	; 0
   20696:	8c 0f       	add	r24, r28
   20698:	9d 1f       	adc	r25, r29
   2069a:	e8 0f       	add	r30, r24
   2069c:	f9 1f       	adc	r31, r25
   2069e:	00 81       	ld	r16, Z
   206a0:	11 81       	ldd	r17, Z+1	; 0x01
   206a2:	1c 87       	std	Y+12, r17	; 0x0c
   206a4:	0b 87       	std	Y+11, r16	; 0x0b
   206a6:	30 e0       	ldi	r19, 0x00	; 0
   206a8:	20 e0       	ldi	r18, 0x00	; 0
   206aa:	50 e0       	ldi	r21, 0x00	; 0
   206ac:	40 e0       	ldi	r20, 0x00	; 0
   206ae:	be 01       	movw	r22, r28
   206b0:	67 5f       	subi	r22, 0xF7	; 247
   206b2:	7f 4f       	sbci	r23, 0xFF	; 255
   206b4:	d7 01       	movw	r26, r14
   206b6:	18 96       	adiw	r26, 0x08	; 8
   206b8:	8d 91       	ld	r24, X+
   206ba:	9c 91       	ld	r25, X
   206bc:	0f 94 0a 00 	call	0x20014	; 0x20014 <RF24Network::write(RF24NetworkHeader&, void const*, unsigned int, unsigned int)>
   206c0:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   206c4:	2b 01       	movw	r4, r22
   206c6:	3c 01       	movw	r6, r24
   206c8:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   206cc:	64 19       	sub	r22, r4
   206ce:	75 09       	sbc	r23, r5
   206d0:	86 09       	sbc	r24, r6
   206d2:	97 09       	sbc	r25, r7
   206d4:	61 3e       	cpi	r22, 0xE1	; 225
   206d6:	71 05       	cpc	r23, r1
   206d8:	81 05       	cpc	r24, r1
   206da:	91 05       	cpc	r25, r1
   206dc:	50 f4       	brcc	.+20     	; 0x206f2 <RF24Mesh::requestAddress(unsigned char)+0x146>
   206de:	f7 01       	movw	r30, r14
   206e0:	80 85       	ldd	r24, Z+8	; 0x08
   206e2:	91 85       	ldd	r25, Z+9	; 0x09
   206e4:	0e 94 84 fe 	call	0x1fd08	; 0x1fd08 <RF24Network::update()>
   206e8:	b8 2e       	mov	r11, r24
   206ea:	f0 e8       	ldi	r31, 0x80	; 128
   206ec:	8f 13       	cpse	r24, r31
   206ee:	ec cf       	rjmp	.-40     	; 0x206c8 <RF24Mesh::requestAddress(unsigned char)+0x11c>
   206f0:	cd 2c       	mov	r12, r13
   206f2:	65 e0       	ldi	r22, 0x05	; 5
   206f4:	70 e0       	ldi	r23, 0x00	; 0
   206f6:	80 e0       	ldi	r24, 0x00	; 0
   206f8:	90 e0       	ldi	r25, 0x00	; 0
   206fa:	0f 94 33 0f 	call	0x21e66	; 0x21e66 <delay>
   206fe:	c3 94       	inc	r12
   20700:	cd 14       	cp	r12, r13
   20702:	08 f4       	brcc	.+2      	; 0x20706 <RF24Mesh::requestAddress(unsigned char)+0x15a>
   20704:	be cf       	rjmp	.-132    	; 0x20682 <RF24Mesh::requestAddress(unsigned char)+0xd6>
   20706:	80 e8       	ldi	r24, 0x80	; 128
   20708:	b8 12       	cpse	r11, r24
   2070a:	62 c0       	rjmp	.+196    	; 0x207d0 <RF24Mesh::requestAddress(unsigned char)+0x224>
   2070c:	d7 01       	movw	r26, r14
   2070e:	18 96       	adiw	r26, 0x08	; 8
   20710:	ed 91       	ld	r30, X+
   20712:	fc 91       	ld	r31, X
   20714:	19 97       	sbiw	r26, 0x09	; 9
   20716:	87 85       	ldd	r24, Z+15	; 0x0f
   20718:	90 89       	ldd	r25, Z+16	; 0x10
   2071a:	00 97       	sbiw	r24, 0x00	; 0
   2071c:	09 f4       	brne	.+2      	; 0x20720 <RF24Mesh::requestAddress(unsigned char)+0x174>
   2071e:	58 c0       	rjmp	.+176    	; 0x207d0 <RF24Mesh::requestAddress(unsigned char)+0x224>
   20720:	36 85       	ldd	r19, Z+14	; 0x0e
   20722:	12 96       	adiw	r26, 0x02	; 2
   20724:	2c 91       	ld	r18, X
   20726:	12 97       	sbiw	r26, 0x02	; 2
   20728:	32 13       	cpse	r19, r18
   2072a:	52 c0       	rjmp	.+164    	; 0x207d0 <RF24Mesh::requestAddress(unsigned char)+0x224>
   2072c:	11 96       	adiw	r26, 0x01	; 1
   2072e:	9c 93       	st	X, r25
   20730:	8e 93       	st	-X, r24
   20732:	16 96       	adiw	r26, 0x06	; 6
   20734:	8d 91       	ld	r24, X+
   20736:	9c 91       	ld	r25, X
   20738:	0e 94 a2 f5 	call	0x1eb44	; 0x1eb44 <RF24::stopListening()>
   2073c:	6a e0       	ldi	r22, 0x0A	; 10
   2073e:	70 e0       	ldi	r23, 0x00	; 0
   20740:	80 e0       	ldi	r24, 0x00	; 0
   20742:	90 e0       	ldi	r25, 0x00	; 0
   20744:	0f 94 33 0f 	call	0x21e66	; 0x21e66 <delay>
_ZN11RF24Network5beginEj():
   20748:	f7 01       	movw	r30, r14
   2074a:	40 81       	ld	r20, Z
   2074c:	51 81       	ldd	r21, Z+1	; 0x01
   2074e:	6f ef       	ldi	r22, 0xFF	; 255
   20750:	80 85       	ldd	r24, Z+8	; 0x08
   20752:	91 85       	ldd	r25, Z+9	; 0x09
   20754:	0e 94 f1 fc 	call	0x1f9e2	; 0x1f9e2 <RF24Network::begin(unsigned char, unsigned int)>
_ZN8RF24Mesh14requestAddressEh():
   20758:	1c 86       	std	Y+12, r1	; 0x0c
   2075a:	1b 86       	std	Y+11, r1	; 0x0b
   2075c:	81 e8       	ldi	r24, 0x81	; 129
   2075e:	8f 87       	std	Y+15, r24	; 0x0f
   20760:	17 e0       	ldi	r17, 0x07	; 7
   20762:	30 e0       	ldi	r19, 0x00	; 0
   20764:	20 e0       	ldi	r18, 0x00	; 0
   20766:	50 e0       	ldi	r21, 0x00	; 0
   20768:	40 e0       	ldi	r20, 0x00	; 0
   2076a:	be 01       	movw	r22, r28
   2076c:	67 5f       	subi	r22, 0xF7	; 247
   2076e:	7f 4f       	sbci	r23, 0xFF	; 255
   20770:	d7 01       	movw	r26, r14
   20772:	18 96       	adiw	r26, 0x08	; 8
   20774:	8d 91       	ld	r24, X+
   20776:	9c 91       	ld	r25, X
   20778:	0f 94 20 01 	call	0x20240	; 0x20240 <RF24Network::write(RF24NetworkHeader&, void const*, unsigned int)>
   2077c:	d8 2e       	mov	r13, r24
   2077e:	81 11       	cpse	r24, r1
   20780:	0f c0       	rjmp	.+30     	; 0x207a0 <RF24Mesh::requestAddress(unsigned char)+0x1f4>
   20782:	11 50       	subi	r17, 0x01	; 1
   20784:	39 f5       	brne	.+78     	; 0x207d4 <RF24Mesh::requestAddress(unsigned char)+0x228>
_ZN11RF24Network5beginEj():
   20786:	44 e2       	ldi	r20, 0x24	; 36
   20788:	59 e0       	ldi	r21, 0x09	; 9
   2078a:	6f ef       	ldi	r22, 0xFF	; 255
   2078c:	f7 01       	movw	r30, r14
   2078e:	80 85       	ldd	r24, Z+8	; 0x08
   20790:	91 85       	ldd	r25, Z+9	; 0x09
   20792:	0e 94 f1 fc 	call	0x1f9e2	; 0x1f9e2 <RF24Network::begin(unsigned char, unsigned int)>
_ZN8RF24Mesh14requestAddressEh():
   20796:	84 e2       	ldi	r24, 0x24	; 36
   20798:	99 e0       	ldi	r25, 0x09	; 9
   2079a:	d7 01       	movw	r26, r14
   2079c:	8d 93       	st	X+, r24
   2079e:	9c 93       	st	X, r25
   207a0:	8d 2d       	mov	r24, r13
   207a2:	60 96       	adiw	r28, 0x10	; 16
   207a4:	0f b6       	in	r0, 0x3f	; 63
   207a6:	f8 94       	cli
   207a8:	de bf       	out	0x3e, r29	; 62
   207aa:	0f be       	out	0x3f, r0	; 63
   207ac:	cd bf       	out	0x3d, r28	; 61
   207ae:	df 91       	pop	r29
   207b0:	cf 91       	pop	r28
   207b2:	1f 91       	pop	r17
   207b4:	0f 91       	pop	r16
   207b6:	ff 90       	pop	r15
   207b8:	ef 90       	pop	r14
   207ba:	df 90       	pop	r13
   207bc:	cf 90       	pop	r12
   207be:	bf 90       	pop	r11
   207c0:	af 90       	pop	r10
   207c2:	7f 90       	pop	r7
   207c4:	6f 90       	pop	r6
   207c6:	5f 90       	pop	r5
   207c8:	4f 90       	pop	r4
   207ca:	08 95       	ret
   207cc:	d1 10       	cpse	r13, r1
   207ce:	55 cf       	rjmp	.-342    	; 0x2067a <RF24Mesh::requestAddress(unsigned char)+0xce>
   207d0:	d1 2c       	mov	r13, r1
   207d2:	e6 cf       	rjmp	.-52     	; 0x207a0 <RF24Mesh::requestAddress(unsigned char)+0x1f4>
   207d4:	63 e0       	ldi	r22, 0x03	; 3
   207d6:	70 e0       	ldi	r23, 0x00	; 0
   207d8:	80 e0       	ldi	r24, 0x00	; 0
   207da:	90 e0       	ldi	r25, 0x00	; 0
   207dc:	0f 94 33 0f 	call	0x21e66	; 0x21e66 <delay>
   207e0:	c0 cf       	rjmp	.-128    	; 0x20762 <RF24Mesh::requestAddress(unsigned char)+0x1b6>

000207e2 <RF24Mesh::renewAddress(unsigned long)>:
_ZN8RF24Mesh12renewAddressEm():
   207e2:	7f 92       	push	r7
   207e4:	8f 92       	push	r8
   207e6:	9f 92       	push	r9
   207e8:	af 92       	push	r10
   207ea:	bf 92       	push	r11
   207ec:	cf 92       	push	r12
   207ee:	df 92       	push	r13
   207f0:	ef 92       	push	r14
   207f2:	ff 92       	push	r15
   207f4:	0f 93       	push	r16
   207f6:	1f 93       	push	r17
   207f8:	cf 93       	push	r28
   207fa:	df 93       	push	r29
   207fc:	ec 01       	movw	r28, r24
   207fe:	4a 01       	movw	r8, r20
   20800:	5b 01       	movw	r10, r22
   20802:	8e 81       	ldd	r24, Y+6	; 0x06
   20804:	9f 81       	ldd	r25, Y+7	; 0x07
   20806:	0e 94 c8 f6 	call	0x1ed90	; 0x1ed90 <RF24::available()>
   2080a:	88 23       	and	r24, r24
   2080c:	81 f0       	breq	.+32     	; 0x2082e <RF24Mesh::renewAddress(unsigned long)+0x4c>
   2080e:	90 e0       	ldi	r25, 0x00	; 0
   20810:	80 e0       	ldi	r24, 0x00	; 0
   20812:	df 91       	pop	r29
   20814:	cf 91       	pop	r28
   20816:	1f 91       	pop	r17
   20818:	0f 91       	pop	r16
   2081a:	ff 90       	pop	r15
   2081c:	ef 90       	pop	r14
   2081e:	df 90       	pop	r13
   20820:	cf 90       	pop	r12
   20822:	bf 90       	pop	r11
   20824:	af 90       	pop	r10
   20826:	9f 90       	pop	r9
   20828:	8f 90       	pop	r8
   2082a:	7f 90       	pop	r7
   2082c:	08 95       	ret
   2082e:	8e 81       	ldd	r24, Y+6	; 0x06
   20830:	9f 81       	ldd	r25, Y+7	; 0x07
   20832:	0e 94 a2 f5 	call	0x1eb44	; 0x1eb44 <RF24::stopListening()>
   20836:	e8 85       	ldd	r30, Y+8	; 0x08
   20838:	f9 85       	ldd	r31, Y+9	; 0x09
   2083a:	82 a5       	ldd	r24, Z+42	; 0x2a
   2083c:	82 60       	ori	r24, 0x02	; 2
   2083e:	82 a7       	std	Z+42, r24	; 0x2a
   20840:	6a e0       	ldi	r22, 0x0A	; 10
   20842:	70 e0       	ldi	r23, 0x00	; 0
   20844:	80 e0       	ldi	r24, 0x00	; 0
   20846:	90 e0       	ldi	r25, 0x00	; 0
   20848:	0f 94 33 0f 	call	0x21e66	; 0x21e66 <delay>
_ZN11RF24Network5beginEj():
   2084c:	44 e2       	ldi	r20, 0x24	; 36
   2084e:	59 e0       	ldi	r21, 0x09	; 9
   20850:	6f ef       	ldi	r22, 0xFF	; 255
   20852:	88 85       	ldd	r24, Y+8	; 0x08
   20854:	99 85       	ldd	r25, Y+9	; 0x09
   20856:	0e 94 f1 fc 	call	0x1f9e2	; 0x1f9e2 <RF24Network::begin(unsigned char, unsigned int)>
_ZN8RF24Mesh12renewAddressEm():
   2085a:	84 e2       	ldi	r24, 0x24	; 36
   2085c:	99 e0       	ldi	r25, 0x09	; 9
   2085e:	99 83       	std	Y+1, r25	; 0x01
   20860:	88 83       	st	Y, r24
   20862:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   20866:	6b 01       	movw	r12, r22
   20868:	7c 01       	movw	r14, r24
   2086a:	00 e0       	ldi	r16, 0x00	; 0
   2086c:	10 e0       	ldi	r17, 0x00	; 0
   2086e:	9a e0       	ldi	r25, 0x0A	; 10
   20870:	79 2e       	mov	r7, r25
   20872:	61 2f       	mov	r22, r17
   20874:	ce 01       	movw	r24, r28
   20876:	0f 94 d6 02 	call	0x205ac	; 0x205ac <RF24Mesh::requestAddress(unsigned char)>
   2087a:	81 11       	cpse	r24, r1
   2087c:	2d c0       	rjmp	.+90     	; 0x208d8 <RF24Mesh::renewAddress(unsigned long)+0xf6>
   2087e:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   20882:	6c 19       	sub	r22, r12
   20884:	7d 09       	sbc	r23, r13
   20886:	8e 09       	sbc	r24, r14
   20888:	9f 09       	sbc	r25, r15
   2088a:	86 16       	cp	r8, r22
   2088c:	97 06       	cpc	r9, r23
   2088e:	a8 06       	cpc	r10, r24
   20890:	b9 06       	cpc	r11, r25
   20892:	08 f4       	brcc	.+2      	; 0x20896 <RF24Mesh::renewAddress(unsigned long)+0xb4>
   20894:	bc cf       	rjmp	.-136    	; 0x2080e <RF24Mesh::renewAddress(unsigned long)+0x2c>
   20896:	20 2f       	mov	r18, r16
   20898:	30 e0       	ldi	r19, 0x00	; 0
   2089a:	2f 5f       	subi	r18, 0xFF	; 255
   2089c:	3f 4f       	sbci	r19, 0xFF	; 255
   2089e:	81 2f       	mov	r24, r17
   208a0:	90 e0       	ldi	r25, 0x00	; 0
   208a2:	01 96       	adiw	r24, 0x01	; 1
   208a4:	28 9f       	mul	r18, r24
   208a6:	b0 01       	movw	r22, r0
   208a8:	29 9f       	mul	r18, r25
   208aa:	70 0d       	add	r23, r0
   208ac:	38 9f       	mul	r19, r24
   208ae:	70 0d       	add	r23, r0
   208b0:	11 24       	eor	r1, r1
   208b2:	67 5e       	subi	r22, 0xE7	; 231
   208b4:	7f 4f       	sbci	r23, 0xFF	; 255
   208b6:	66 0f       	add	r22, r22
   208b8:	77 1f       	adc	r23, r23
   208ba:	07 2e       	mov	r0, r23
   208bc:	00 0c       	add	r0, r0
   208be:	88 0b       	sbc	r24, r24
   208c0:	99 0b       	sbc	r25, r25
   208c2:	0f 94 33 0f 	call	0x21e66	; 0x21e66 <delay>
   208c6:	1f 5f       	subi	r17, 0xFF	; 255
   208c8:	13 70       	andi	r17, 0x03	; 3
   208ca:	81 e0       	ldi	r24, 0x01	; 1
   208cc:	80 0f       	add	r24, r16
   208ce:	67 2d       	mov	r22, r7
   208d0:	0f 94 29 16 	call	0x22c52	; 0x22c52 <__udivmodqi4>
   208d4:	09 2f       	mov	r16, r25
   208d6:	cd cf       	rjmp	.-102    	; 0x20872 <RF24Mesh::renewAddress(unsigned long)+0x90>
   208d8:	e8 85       	ldd	r30, Y+8	; 0x08
   208da:	f9 85       	ldd	r31, Y+9	; 0x09
   208dc:	82 a5       	ldd	r24, Z+42	; 0x2a
   208de:	8d 7f       	andi	r24, 0xFD	; 253
   208e0:	82 a7       	std	Z+42, r24	; 0x2a
   208e2:	88 81       	ld	r24, Y
   208e4:	99 81       	ldd	r25, Y+1	; 0x01
   208e6:	95 cf       	rjmp	.-214    	; 0x20812 <RF24Mesh::renewAddress(unsigned long)+0x30>

000208e8 <RF24Mesh::begin(unsigned char, rf24_datarate_e, unsigned long)>:
_ZN8RF24Mesh5beginEh15rf24_datarate_em():
   208e8:	8f 92       	push	r8
   208ea:	9f 92       	push	r9
   208ec:	af 92       	push	r10
   208ee:	bf 92       	push	r11
   208f0:	cf 92       	push	r12
   208f2:	df 92       	push	r13
   208f4:	ff 92       	push	r15
   208f6:	0f 93       	push	r16
   208f8:	1f 93       	push	r17
   208fa:	cf 93       	push	r28
   208fc:	df 93       	push	r29
   208fe:	ec 01       	movw	r28, r24
   20900:	f6 2e       	mov	r15, r22
   20902:	6a 01       	movw	r12, r20
   20904:	48 01       	movw	r8, r16
   20906:	59 01       	movw	r10, r18
   20908:	8e 81       	ldd	r24, Y+6	; 0x06
   2090a:	9f 81       	ldd	r25, Y+7	; 0x07
   2090c:	0e 94 9c f8 	call	0x1f138	; 0x1f138 <RF24::begin()>
   20910:	8a 81       	ldd	r24, Y+2	; 0x02
   20912:	88 23       	and	r24, r24
   20914:	61 f1       	breq	.+88     	; 0x2096e <RF24Mesh::begin(unsigned char, rf24_datarate_e, unsigned long)+0x86>
   20916:	84 e2       	ldi	r24, 0x24	; 36
   20918:	99 e0       	ldi	r25, 0x09	; 9
   2091a:	99 83       	std	Y+1, r25	; 0x01
   2091c:	88 83       	st	Y, r24
   2091e:	fb 8a       	std	Y+19, r15	; 0x13
   20920:	6f 2d       	mov	r22, r15
   20922:	8e 81       	ldd	r24, Y+6	; 0x06
   20924:	9f 81       	ldd	r25, Y+7	; 0x07
   20926:	0e 94 9b f5 	call	0x1eb36	; 0x1eb36 <RF24::setChannel(unsigned char)>
   2092a:	b6 01       	movw	r22, r12
   2092c:	8e 81       	ldd	r24, Y+6	; 0x06
   2092e:	9f 81       	ldd	r25, Y+7	; 0x07
   20930:	0e 94 62 f8 	call	0x1f0c4	; 0x1f0c4 <RF24::setDataRate(rf24_datarate_e)>
   20934:	e8 85       	ldd	r30, Y+8	; 0x08
   20936:	f9 85       	ldd	r31, Y+9	; 0x09
   20938:	81 e0       	ldi	r24, 0x01	; 1
   2093a:	81 a7       	std	Z+41, r24	; 0x29
   2093c:	8a 81       	ldd	r24, Y+2	; 0x02
   2093e:	88 23       	and	r24, r24
   20940:	01 f1       	breq	.+64     	; 0x20982 <RF24Mesh::begin(unsigned char, rf24_datarate_e, unsigned long)+0x9a>
   20942:	b5 01       	movw	r22, r10
   20944:	a4 01       	movw	r20, r8
   20946:	ce 01       	movw	r24, r28
   20948:	0f 94 f1 03 	call	0x207e2	; 0x207e2 <RF24Mesh::renewAddress(unsigned long)>
   2094c:	21 e0       	ldi	r18, 0x01	; 1
   2094e:	89 2b       	or	r24, r25
   20950:	09 f4       	brne	.+2      	; 0x20954 <RF24Mesh::begin(unsigned char, rf24_datarate_e, unsigned long)+0x6c>
   20952:	20 e0       	ldi	r18, 0x00	; 0
   20954:	82 2f       	mov	r24, r18
   20956:	df 91       	pop	r29
   20958:	cf 91       	pop	r28
   2095a:	1f 91       	pop	r17
   2095c:	0f 91       	pop	r16
   2095e:	ff 90       	pop	r15
   20960:	df 90       	pop	r13
   20962:	cf 90       	pop	r12
   20964:	bf 90       	pop	r11
   20966:	af 90       	pop	r10
   20968:	9f 90       	pop	r9
   2096a:	8f 90       	pop	r8
   2096c:	08 95       	ret
   2096e:	86 e0       	ldi	r24, 0x06	; 6
   20970:	90 e0       	ldi	r25, 0x00	; 0
   20972:	0f 94 de 16 	call	0x22dbc	; 0x22dbc <malloc>
   20976:	9c 83       	std	Y+4, r25	; 0x04
   20978:	8b 83       	std	Y+3, r24	; 0x03
   2097a:	1d 82       	std	Y+5, r1	; 0x05
   2097c:	19 82       	std	Y+1, r1	; 0x01
   2097e:	18 82       	st	Y, r1
   20980:	ce cf       	rjmp	.-100    	; 0x2091e <RF24Mesh::begin(unsigned char, rf24_datarate_e, unsigned long)+0x36>
_ZN11RF24Network5beginEj():
   20982:	48 81       	ld	r20, Y
   20984:	59 81       	ldd	r21, Y+1	; 0x01
   20986:	6f ef       	ldi	r22, 0xFF	; 255
   20988:	88 85       	ldd	r24, Y+8	; 0x08
   2098a:	99 85       	ldd	r25, Y+9	; 0x09
   2098c:	0e 94 f1 fc 	call	0x1f9e2	; 0x1f9e2 <RF24Network::begin(unsigned char, unsigned int)>
_ZN8RF24Mesh5beginEh15rf24_datarate_em():
   20990:	21 e0       	ldi	r18, 0x01	; 1
   20992:	e0 cf       	rjmp	.-64     	; 0x20954 <RF24Mesh::begin(unsigned char, rf24_datarate_e, unsigned long)+0x6c>

00020994 <RF24Mesh::setNodeID(unsigned char)>:
_ZN8RF24Mesh9setNodeIDEh():
   20994:	fc 01       	movw	r30, r24
   20996:	62 83       	std	Z+2, r22	; 0x02
   20998:	08 95       	ret

0002099a <RF24Mesh::setAddress(unsigned char, unsigned int)>:
_ZN8RF24Mesh10setAddressEhj():
   2099a:	cf 93       	push	r28
   2099c:	df 93       	push	r29
   2099e:	ec 01       	movw	r28, r24
   209a0:	8d 81       	ldd	r24, Y+5	; 0x05
   209a2:	2b 81       	ldd	r18, Y+3	; 0x03
   209a4:	3c 81       	ldd	r19, Y+4	; 0x04
   209a6:	f0 e0       	ldi	r31, 0x00	; 0
   209a8:	e0 e0       	ldi	r30, 0x00	; 0
   209aa:	90 e0       	ldi	r25, 0x00	; 0
   209ac:	98 17       	cp	r25, r24
   209ae:	49 f0       	breq	.+18     	; 0x209c2 <RF24Mesh::setAddress(unsigned char, unsigned int)+0x28>
   209b0:	d9 01       	movw	r26, r18
   209b2:	ae 0f       	add	r26, r30
   209b4:	bf 1f       	adc	r27, r31
   209b6:	7c 91       	ld	r23, X
   209b8:	33 96       	adiw	r30, 0x03	; 3
   209ba:	76 17       	cp	r23, r22
   209bc:	11 f0       	breq	.+4      	; 0x209c2 <RF24Mesh::setAddress(unsigned char, unsigned int)+0x28>
   209be:	9f 5f       	subi	r25, 0xFF	; 255
   209c0:	f5 cf       	rjmp	.-22     	; 0x209ac <RF24Mesh::setAddress(unsigned char, unsigned int)+0x12>
   209c2:	f9 01       	movw	r30, r18
   209c4:	73 e0       	ldi	r23, 0x03	; 3
   209c6:	97 9f       	mul	r25, r23
   209c8:	e0 0d       	add	r30, r0
   209ca:	f1 1d       	adc	r31, r1
   209cc:	11 24       	eor	r1, r1
   209ce:	60 83       	st	Z, r22
   209d0:	52 83       	std	Z+2, r21	; 0x02
   209d2:	41 83       	std	Z+1, r20	; 0x01
   209d4:	98 13       	cpse	r25, r24
   209d6:	10 c0       	rjmp	.+32     	; 0x209f8 <RF24Mesh::setAddress(unsigned char, unsigned int)+0x5e>
   209d8:	9f 5f       	subi	r25, 0xFF	; 255
   209da:	9d 83       	std	Y+5, r25	; 0x05
   209dc:	69 2f       	mov	r22, r25
   209de:	70 e0       	ldi	r23, 0x00	; 0
   209e0:	6f 5f       	subi	r22, 0xFF	; 255
   209e2:	7f 4f       	sbci	r23, 0xFF	; 255
   209e4:	cb 01       	movw	r24, r22
   209e6:	88 0f       	add	r24, r24
   209e8:	99 1f       	adc	r25, r25
   209ea:	68 0f       	add	r22, r24
   209ec:	79 1f       	adc	r23, r25
   209ee:	c9 01       	movw	r24, r18
   209f0:	0f 94 03 18 	call	0x23006	; 0x23006 <realloc>
   209f4:	9c 83       	std	Y+4, r25	; 0x04
   209f6:	8b 83       	std	Y+3, r24	; 0x03
   209f8:	df 91       	pop	r29
   209fa:	cf 91       	pop	r28
   209fc:	08 95       	ret

000209fe <RF24Mesh::DHCP()>:
_ZN8RF24Mesh4DHCPEv():
/home/saric/Arduino/libraries/RF24Mesh/RF24Mesh.cpp:531

/*****************************************************/

#if !defined (RF24_TINY) && !defined(MESH_NOMASTER)

void RF24Mesh::DHCP(){
   209fe:	7f 92       	push	r7
   20a00:	8f 92       	push	r8
   20a02:	9f 92       	push	r9
   20a04:	af 92       	push	r10
   20a06:	bf 92       	push	r11
   20a08:	cf 92       	push	r12
   20a0a:	df 92       	push	r13
   20a0c:	ef 92       	push	r14
   20a0e:	ff 92       	push	r15
   20a10:	0f 93       	push	r16
   20a12:	1f 93       	push	r17
   20a14:	cf 93       	push	r28
   20a16:	df 93       	push	r29
   20a18:	00 d0       	rcall	.+0      	; 0x20a1a <RF24Mesh::DHCP()+0x1c>
   20a1a:	00 d0       	rcall	.+0      	; 0x20a1c <RF24Mesh::DHCP()+0x1e>
   20a1c:	00 d0       	rcall	.+0      	; 0x20a1e <RF24Mesh::DHCP()+0x20>
   20a1e:	1f 92       	push	r1
   20a20:	cd b7       	in	r28, 0x3d	; 61
   20a22:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/RF24Mesh/RF24Mesh.cpp:533
  
  if(doDHCP){
   20a24:	dc 01       	movw	r26, r24
   20a26:	1a 96       	adiw	r26, 0x0a	; 10
   20a28:	2c 91       	ld	r18, X
   20a2a:	1a 97       	sbiw	r26, 0x0a	; 10
   20a2c:	22 23       	and	r18, r18
   20a2e:	09 f4       	brne	.+2      	; 0x20a32 <RF24Mesh::DHCP()+0x34>
   20a30:	b8 c0       	rjmp	.+368    	; 0x20ba2 <RF24Mesh::DHCP()+0x1a4>
/home/saric/Arduino/libraries/RF24Mesh/RF24Mesh.cpp:534
		 doDHCP = 0;
   20a32:	1a 96       	adiw	r26, 0x0a	; 10
   20a34:	1c 92       	st	X, r1
   20a36:	1a 97       	sbiw	r26, 0x0a	; 10
/home/saric/Arduino/libraries/RF24Mesh/RF24Mesh.cpp:537
  }else{ return; }
    RF24NetworkHeader header;
	memcpy(&header,network.frame_buffer,sizeof(RF24NetworkHeader));	
   20a38:	18 96       	adiw	r26, 0x08	; 8
   20a3a:	ed 91       	ld	r30, X+
   20a3c:	fc 91       	ld	r31, X
   20a3e:	38 e0       	ldi	r19, 0x08	; 8
   20a40:	37 96       	adiw	r30, 0x07	; 7
   20a42:	de 01       	movw	r26, r28
   20a44:	11 96       	adiw	r26, 0x01	; 1
   20a46:	01 90       	ld	r0, Z+
   20a48:	0d 92       	st	X+, r0
   20a4a:	3a 95       	dec	r19
   20a4c:	e1 f7       	brne	.-8      	; 0x20a46 <RF24Mesh::DHCP()+0x48>
/home/saric/Arduino/libraries/RF24Mesh/RF24Mesh.cpp:542
      
    uint16_t newAddress;

      // Get the unique id of the requester
      uint8_t from_id = header.reserved;
   20a4e:	f8 84       	ldd	r15, Y+8	; 0x08
/home/saric/Arduino/libraries/RF24Mesh/RF24Mesh.cpp:543
      if(!from_id){
   20a50:	ff 20       	and	r15, r15
   20a52:	09 f4       	brne	.+2      	; 0x20a56 <RF24Mesh::DHCP()+0x58>
   20a54:	a6 c0       	rjmp	.+332    	; 0x20ba2 <RF24Mesh::DHCP()+0x1a4>
/home/saric/Arduino/libraries/RF24Mesh/RF24Mesh.cpp:554
     
     uint16_t fwd_by = 0;
     uint8_t shiftVal = 0;
     bool extraChild = 0;
     
     if( header.from_node != MESH_DEFAULT_ADDRESS){
   20a56:	49 81       	ldd	r20, Y+1	; 0x01
   20a58:	5a 81       	ldd	r21, Y+2	; 0x02
/home/saric/Arduino/libraries/RF24Mesh/RF24Mesh.cpp:551
      #endif
	    return;
	  }
     
     uint16_t fwd_by = 0;
     uint8_t shiftVal = 0;
   20a5a:	70 e0       	ldi	r23, 0x00	; 0
/home/saric/Arduino/libraries/RF24Mesh/RF24Mesh.cpp:550
		 printf("MSH: Invalid id 0 rcvd\n");
      #endif
	    return;
	  }
     
     uint16_t fwd_by = 0;
   20a5c:	d1 2c       	mov	r13, r1
   20a5e:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/RF24Mesh/RF24Mesh.cpp:554
     uint8_t shiftVal = 0;
     bool extraChild = 0;
     
     if( header.from_node != MESH_DEFAULT_ADDRESS){
   20a60:	44 32       	cpi	r20, 0x24	; 36
   20a62:	b9 e0       	ldi	r27, 0x09	; 9
   20a64:	5b 07       	cpc	r21, r27
   20a66:	89 f0       	breq	.+34     	; 0x20a8a <RF24Mesh::DHCP()+0x8c>
   20a68:	ba 01       	movw	r22, r20
/home/saric/Arduino/libraries/RF24Mesh/RF24Mesh.cpp:557
       fwd_by = header.from_node;
       uint16_t m = fwd_by;
       uint8_t count = 0;
   20a6a:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/libraries/RF24Mesh/RF24Mesh.cpp:559
       
       while(m){  //Octal addresses convert nicely to binary in threes. Address 03 = B011  Address 033 = B011011
   20a6c:	61 15       	cp	r22, r1
   20a6e:	71 05       	cpc	r23, r1
   20a70:	39 f0       	breq	.+14     	; 0x20a80 <RF24Mesh::DHCP()+0x82>
/home/saric/Arduino/libraries/RF24Mesh/RF24Mesh.cpp:560
         m >>= 3; //Find out how many digits are in the octal address
   20a72:	33 e0       	ldi	r19, 0x03	; 3
   20a74:	76 95       	lsr	r23
   20a76:	67 95       	ror	r22
   20a78:	3a 95       	dec	r19
   20a7a:	e1 f7       	brne	.-8      	; 0x20a74 <RF24Mesh::DHCP()+0x76>
/home/saric/Arduino/libraries/RF24Mesh/RF24Mesh.cpp:561
         count++; 
   20a7c:	2f 5f       	subi	r18, 0xFF	; 255
/home/saric/Arduino/libraries/RF24Mesh/RF24Mesh.cpp:559
     if( header.from_node != MESH_DEFAULT_ADDRESS){
       fwd_by = header.from_node;
       uint16_t m = fwd_by;
       uint8_t count = 0;
       
       while(m){  //Octal addresses convert nicely to binary in threes. Address 03 = B011  Address 033 = B011011
   20a7e:	f6 cf       	rjmp	.-20     	; 0x20a6c <RF24Mesh::DHCP()+0x6e>
/home/saric/Arduino/libraries/RF24Mesh/RF24Mesh.cpp:563
         m >>= 3; //Find out how many digits are in the octal address
         count++; 
       }
       shiftVal = count*3; //Now we know how many bits to shift when adding a child node 1-5 (B001 to B101) to any address         
   20a80:	72 2f       	mov	r23, r18
   20a82:	77 0f       	add	r23, r23
   20a84:	72 0f       	add	r23, r18
   20a86:	6a 01       	movw	r12, r20
/home/saric/Arduino/libraries/RF24Mesh/RF24Mesh.cpp:552
	    return;
	  }
     
     uint16_t fwd_by = 0;
     uint8_t shiftVal = 0;
     bool extraChild = 0;
   20a88:	20 e0       	ldi	r18, 0x00	; 0
   20a8a:	ef ef       	ldi	r30, 0xFF	; 255
   20a8c:	ff ef       	ldi	r31, 0xFF	; 255
   20a8e:	4f 01       	movw	r8, r30
   20a90:	07 2e       	mov	r0, r23
   20a92:	02 c0       	rjmp	.+4      	; 0x20a98 <RF24Mesh::DHCP()+0x9a>
   20a94:	88 0c       	add	r8, r8
   20a96:	99 1c       	adc	r9, r9
   20a98:	0a 94       	dec	r0
   20a9a:	e2 f7       	brpl	.-8      	; 0x20a94 <RF24Mesh::DHCP()+0x96>
/home/saric/Arduino/libraries/RF24Mesh/RF24Mesh.cpp:573

       #ifdef MESH_DEBUG_PRINTF
	   //  printf("%u MSH: Rcv addr req from_id %d \n",millis(),from_id);
	   #endif
       
	   for(int i=MESH_MAX_CHILDREN+extraChild; i> 0; i--){ // For each of the possible addresses (5 max)
   20a9c:	30 e0       	ldi	r19, 0x00	; 0
   20a9e:	f9 01       	movw	r30, r18
   20aa0:	34 96       	adiw	r30, 0x04	; 4
   20aa2:	df 01       	movw	r26, r30
   20aa4:	02 c0       	rjmp	.+4      	; 0x20aaa <RF24Mesh::DHCP()+0xac>
   20aa6:	aa 0f       	add	r26, r26
   20aa8:	bb 1f       	adc	r27, r27
   20aaa:	7a 95       	dec	r23
   20aac:	e2 f7       	brpl	.-8      	; 0x20aa6 <RF24Mesh::DHCP()+0xa8>
   20aae:	bd 01       	movw	r22, r26
/home/saric/Arduino/libraries/RF24Mesh/RF24Mesh.cpp:576
         
        bool found = 0;
        newAddress = fwd_by | (i << shiftVal);
   20ab0:	f6 01       	movw	r30, r12
   20ab2:	e6 2b       	or	r30, r22
   20ab4:	f7 2b       	or	r31, r23
/home/saric/Arduino/libraries/RF24Mesh/RF24Mesh.cpp:577
		if(!newAddress ){ /*printf("dumped 0%o\n",newAddress);*/ continue; }
   20ab6:	30 97       	sbiw	r30, 0x00	; 0
   20ab8:	09 f4       	brne	.+2      	; 0x20abc <RF24Mesh::DHCP()+0xbe>
   20aba:	8e c0       	rjmp	.+284    	; 0x20bd8 <RF24Mesh::DHCP()+0x1da>
/home/saric/Arduino/libraries/RF24Mesh/RF24Mesh.cpp:579

		for(uint8_t i=0; i < addrListTop; i++){
   20abc:	dc 01       	movw	r26, r24
   20abe:	15 96       	adiw	r26, 0x05	; 5
   20ac0:	7c 90       	ld	r7, X
   20ac2:	10 e0       	ldi	r17, 0x00	; 0
   20ac4:	00 e0       	ldi	r16, 0x00	; 0
   20ac6:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/RF24Mesh/RF24Mesh.cpp:579 (discriminator 1)
   20ac8:	7e 14       	cp	r7, r14
   20aca:	09 f4       	brne	.+2      	; 0x20ace <RF24Mesh::DHCP()+0xd0>
   20acc:	8f c0       	rjmp	.+286    	; 0x20bec <RF24Mesh::DHCP()+0x1ee>
/home/saric/Arduino/libraries/RF24Mesh/RF24Mesh.cpp:595
			Serial.println(addr);
			#else
			printf("ID: %d ADDR: 0%o\n", addrList[i].nodeID,addrList[i].address);
			#endif
			#endif
			if(  (addrList[i].address == newAddress && addrList[i].nodeID != from_id ) || newAddress == MESH_DEFAULT_ADDRESS){
   20ace:	dc 01       	movw	r26, r24
   20ad0:	13 96       	adiw	r26, 0x03	; 3
   20ad2:	ad 90       	ld	r10, X+
   20ad4:	bc 90       	ld	r11, X
   20ad6:	d5 01       	movw	r26, r10
   20ad8:	a0 0f       	add	r26, r16
   20ada:	b1 1f       	adc	r27, r17
   20adc:	11 96       	adiw	r26, 0x01	; 1
   20ade:	ad 90       	ld	r10, X+
   20ae0:	bc 90       	ld	r11, X
   20ae2:	12 97       	sbiw	r26, 0x02	; 2
   20ae4:	ea 15       	cp	r30, r10
   20ae6:	fb 05       	cpc	r31, r11
   20ae8:	19 f4       	brne	.+6      	; 0x20af0 <RF24Mesh::DHCP()+0xf2>
/home/saric/Arduino/libraries/RF24Mesh/RF24Mesh.cpp:595 (discriminator 1)
   20aea:	ac 91       	ld	r26, X
   20aec:	af 11       	cpse	r26, r15
   20aee:	74 c0       	rjmp	.+232    	; 0x20bd8 <RF24Mesh::DHCP()+0x1da>
   20af0:	0d 5f       	subi	r16, 0xFD	; 253
   20af2:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/libraries/RF24Mesh/RF24Mesh.cpp:595 (discriminator 3)
   20af4:	e4 32       	cpi	r30, 0x24	; 36
   20af6:	b9 e0       	ldi	r27, 0x09	; 9
   20af8:	fb 07       	cpc	r31, r27
   20afa:	09 f4       	brne	.+2      	; 0x20afe <RF24Mesh::DHCP()+0x100>
   20afc:	6d c0       	rjmp	.+218    	; 0x20bd8 <RF24Mesh::DHCP()+0x1da>
/home/saric/Arduino/libraries/RF24Mesh/RF24Mesh.cpp:579 (discriminator 2)
         
        bool found = 0;
        newAddress = fwd_by | (i << shiftVal);
		if(!newAddress ){ /*printf("dumped 0%o\n",newAddress);*/ continue; }

		for(uint8_t i=0; i < addrListTop; i++){
   20afe:	e3 94       	inc	r14
   20b00:	e3 cf       	rjmp	.-58     	; 0x20ac8 <RF24Mesh::DHCP()+0xca>
/home/saric/Arduino/libraries/RF24Mesh/RF24Mesh.cpp:607
          
          header.type = NETWORK_ADDR_RESPONSE;
          header.to_node = header.from_node;
          //This is a routed request to 00
          if(header.from_node != MESH_DEFAULT_ADDRESS){ //Is NOT node 01 to 05
			delay(2);
   20b02:	62 e0       	ldi	r22, 0x02	; 2
   20b04:	70 e0       	ldi	r23, 0x00	; 0
   20b06:	80 e0       	ldi	r24, 0x00	; 0
   20b08:	90 e0       	ldi	r25, 0x00	; 0
   20b0a:	0f 94 33 0f 	call	0x21e66	; 0x21e66 <delay>
/home/saric/Arduino/libraries/RF24Mesh/RF24Mesh.cpp:608
			if( network.write(header,&newAddress,sizeof(newAddress)) ){
   20b0e:	22 e0       	ldi	r18, 0x02	; 2
   20b10:	30 e0       	ldi	r19, 0x00	; 0
   20b12:	ae 01       	movw	r20, r28
   20b14:	47 5f       	subi	r20, 0xF7	; 247
   20b16:	5f 4f       	sbci	r21, 0xFF	; 255
   20b18:	be 01       	movw	r22, r28
   20b1a:	6f 5f       	subi	r22, 0xFF	; 255
   20b1c:	7f 4f       	sbci	r23, 0xFF	; 255
   20b1e:	f6 01       	movw	r30, r12
   20b20:	80 85       	ldd	r24, Z+8	; 0x08
   20b22:	91 85       	ldd	r25, Z+9	; 0x09
   20b24:	0f 94 20 01 	call	0x20240	; 0x20240 <RF24Network::write(RF24NetworkHeader&, void const*, unsigned int)>
   20b28:	81 11       	cpse	r24, r1
   20b2a:	0e c0       	rjmp	.+28     	; 0x20b48 <RF24Mesh::DHCP()+0x14a>
/home/saric/Arduino/libraries/RF24Mesh/RF24Mesh.cpp:611
				//addrMap[from_id] = newAddress;
			}else{
               network.write(header,&newAddress,sizeof(newAddress));
   20b2c:	22 e0       	ldi	r18, 0x02	; 2
   20b2e:	30 e0       	ldi	r19, 0x00	; 0
   20b30:	ae 01       	movw	r20, r28
   20b32:	47 5f       	subi	r20, 0xF7	; 247
   20b34:	5f 4f       	sbci	r21, 0xFF	; 255
   20b36:	be 01       	movw	r22, r28
   20b38:	6f 5f       	subi	r22, 0xFF	; 255
   20b3a:	7f 4f       	sbci	r23, 0xFF	; 255
   20b3c:	d6 01       	movw	r26, r12
   20b3e:	18 96       	adiw	r26, 0x08	; 8
   20b40:	8d 91       	ld	r24, X+
   20b42:	9c 91       	ld	r25, X
   20b44:	0f 94 20 01 	call	0x20240	; 0x20240 <RF24Network::write(RF24NetworkHeader&, void const*, unsigned int)>
/home/saric/Arduino/libraries/RF24Mesh/RF24Mesh.cpp:619
		    delay(2);
		    network.write(header,&newAddress,sizeof(newAddress),header.to_node);
            
			//addrMap[from_id] = newAddress;
          }
       		uint32_t timer=millis();
   20b48:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   20b4c:	4b 01       	movw	r8, r22
   20b4e:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/RF24Mesh/RF24Mesh.cpp:620
            lastAddress = newAddress;
   20b50:	89 85       	ldd	r24, Y+9	; 0x09
   20b52:	9a 85       	ldd	r25, Y+10	; 0x0a
   20b54:	d6 01       	movw	r26, r12
   20b56:	57 96       	adiw	r26, 0x17	; 23
   20b58:	9c 93       	st	X, r25
   20b5a:	8e 93       	st	-X, r24
   20b5c:	56 97       	sbiw	r26, 0x16	; 22
/home/saric/Arduino/libraries/RF24Mesh/RF24Mesh.cpp:621
            lastID = from_id;
   20b5e:	8f 2d       	mov	r24, r15
   20b60:	90 e0       	ldi	r25, 0x00	; 0
   20b62:	55 96       	adiw	r26, 0x15	; 21
   20b64:	9c 93       	st	X, r25
   20b66:	8e 93       	st	-X, r24
   20b68:	54 97       	sbiw	r26, 0x14	; 20
/home/saric/Arduino/libraries/RF24Mesh/RF24Mesh.cpp:622
            while(network.update() != MESH_ADDR_CONFIRM){
   20b6a:	f6 01       	movw	r30, r12
   20b6c:	80 85       	ldd	r24, Z+8	; 0x08
   20b6e:	91 85       	ldd	r25, Z+9	; 0x09
   20b70:	0e 94 84 fe 	call	0x1fd08	; 0x1fd08 <RF24Network::update()>
   20b74:	81 38       	cpi	r24, 0x81	; 129
   20b76:	49 f1       	breq	.+82     	; 0x20bca <RF24Mesh::DHCP()+0x1cc>
/home/saric/Arduino/libraries/RF24Mesh/RF24Mesh.cpp:623
				if(millis()-timer > network.routeTimeout){
   20b78:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   20b7c:	ab 01       	movw	r20, r22
   20b7e:	bc 01       	movw	r22, r24
   20b80:	48 19       	sub	r20, r8
   20b82:	59 09       	sbc	r21, r9
   20b84:	6a 09       	sbc	r22, r10
   20b86:	7b 09       	sbc	r23, r11
   20b88:	d6 01       	movw	r26, r12
   20b8a:	18 96       	adiw	r26, 0x08	; 8
   20b8c:	ed 91       	ld	r30, X+
   20b8e:	fc 91       	ld	r31, X
   20b90:	85 81       	ldd	r24, Z+5	; 0x05
   20b92:	96 81       	ldd	r25, Z+6	; 0x06
   20b94:	b0 e0       	ldi	r27, 0x00	; 0
   20b96:	a0 e0       	ldi	r26, 0x00	; 0
   20b98:	84 17       	cp	r24, r20
   20b9a:	95 07       	cpc	r25, r21
   20b9c:	a6 07       	cpc	r26, r22
   20b9e:	b7 07       	cpc	r27, r23
   20ba0:	20 f7       	brcc	.-56     	; 0x20b6a <RF24Mesh::DHCP()+0x16c>
/home/saric/Arduino/libraries/RF24Mesh/RF24Mesh.cpp:646

   //}else{
	//break;
   //}

}
   20ba2:	2a 96       	adiw	r28, 0x0a	; 10
   20ba4:	0f b6       	in	r0, 0x3f	; 63
   20ba6:	f8 94       	cli
   20ba8:	de bf       	out	0x3e, r29	; 62
   20baa:	0f be       	out	0x3f, r0	; 63
   20bac:	cd bf       	out	0x3d, r28	; 61
   20bae:	df 91       	pop	r29
   20bb0:	cf 91       	pop	r28
   20bb2:	1f 91       	pop	r17
   20bb4:	0f 91       	pop	r16
   20bb6:	ff 90       	pop	r15
   20bb8:	ef 90       	pop	r14
   20bba:	df 90       	pop	r13
   20bbc:	cf 90       	pop	r12
   20bbe:	bf 90       	pop	r11
   20bc0:	af 90       	pop	r10
   20bc2:	9f 90       	pop	r9
   20bc4:	8f 90       	pop	r8
   20bc6:	7f 90       	pop	r7
   20bc8:	08 95       	ret
/home/saric/Arduino/libraries/RF24Mesh/RF24Mesh.cpp:628
				if(millis()-timer > network.routeTimeout){
					return;
				}
				
			}
          setAddress(from_id,newAddress);
   20bca:	49 85       	ldd	r20, Y+9	; 0x09
   20bcc:	5a 85       	ldd	r21, Y+10	; 0x0a
   20bce:	6f 2d       	mov	r22, r15
   20bd0:	c6 01       	movw	r24, r12
   20bd2:	0f 94 cd 04 	call	0x2099a	; 0x2099a <RF24Mesh::setAddress(unsigned char, unsigned int)>
/home/saric/Arduino/libraries/RF24Mesh/RF24Mesh.cpp:634
          
		  #ifdef MESH_DEBUG_PRINTF
		    printf("Sent to 0%o phys: 0%o new: 0%o id: %d\n", header.to_node,MESH_DEFAULT_ADDRESS,newAddress,header.reserved);
          #endif
		  
		  break;
   20bd6:	e5 cf       	rjmp	.-54     	; 0x20ba2 <RF24Mesh::DHCP()+0x1a4>
   20bd8:	68 0d       	add	r22, r8
   20bda:	79 1d       	adc	r23, r9
   20bdc:	21 50       	subi	r18, 0x01	; 1
   20bde:	31 09       	sbc	r19, r1
/home/saric/Arduino/libraries/RF24Mesh/RF24Mesh.cpp:573 (discriminator 2)

       #ifdef MESH_DEBUG_PRINTF
	   //  printf("%u MSH: Rcv addr req from_id %d \n",millis(),from_id);
	   #endif
       
	   for(int i=MESH_MAX_CHILDREN+extraChild; i> 0; i--){ // For each of the possible addresses (5 max)
   20be0:	2c 3f       	cpi	r18, 0xFC	; 252
   20be2:	bf ef       	ldi	r27, 0xFF	; 255
   20be4:	3b 07       	cpc	r19, r27
   20be6:	09 f0       	breq	.+2      	; 0x20bea <RF24Mesh::DHCP()+0x1ec>
   20be8:	63 cf       	rjmp	.-314    	; 0x20ab0 <RF24Mesh::DHCP()+0xb2>
   20bea:	db cf       	rjmp	.-74     	; 0x20ba2 <RF24Mesh::DHCP()+0x1a4>
   20bec:	6c 01       	movw	r12, r24
   20bee:	fa 87       	std	Y+10, r31	; 0x0a
   20bf0:	e9 87       	std	Y+9, r30	; 0x09
/home/saric/Arduino/libraries/RF24Mesh/RF24Mesh.cpp:603
			}
		}		
        
        if(!found){
          
          header.type = NETWORK_ADDR_RESPONSE;
   20bf2:	80 e8       	ldi	r24, 0x80	; 128
   20bf4:	8f 83       	std	Y+7, r24	; 0x07
/home/saric/Arduino/libraries/RF24Mesh/RF24Mesh.cpp:604
          header.to_node = header.from_node;
   20bf6:	5c 83       	std	Y+4, r21	; 0x04
   20bf8:	4b 83       	std	Y+3, r20	; 0x03
/home/saric/Arduino/libraries/RF24Mesh/RF24Mesh.cpp:606
          //This is a routed request to 00
          if(header.from_node != MESH_DEFAULT_ADDRESS){ //Is NOT node 01 to 05
   20bfa:	44 32       	cpi	r20, 0x24	; 36
   20bfc:	59 40       	sbci	r21, 0x09	; 9
   20bfe:	09 f0       	breq	.+2      	; 0x20c02 <RF24Mesh::DHCP()+0x204>
   20c00:	80 cf       	rjmp	.-256    	; 0x20b02 <RF24Mesh::DHCP()+0x104>
/home/saric/Arduino/libraries/RF24Mesh/RF24Mesh.cpp:614
				//addrMap[from_id] = newAddress;
			}else{
               network.write(header,&newAddress,sizeof(newAddress));
            }
          }else{
		    delay(2);
   20c02:	62 e0       	ldi	r22, 0x02	; 2
   20c04:	70 e0       	ldi	r23, 0x00	; 0
   20c06:	80 e0       	ldi	r24, 0x00	; 0
   20c08:	90 e0       	ldi	r25, 0x00	; 0
   20c0a:	0f 94 33 0f 	call	0x21e66	; 0x21e66 <delay>
/home/saric/Arduino/libraries/RF24Mesh/RF24Mesh.cpp:615
		    network.write(header,&newAddress,sizeof(newAddress),header.to_node);
   20c0e:	0b 81       	ldd	r16, Y+3	; 0x03
   20c10:	1c 81       	ldd	r17, Y+4	; 0x04
   20c12:	22 e0       	ldi	r18, 0x02	; 2
   20c14:	30 e0       	ldi	r19, 0x00	; 0
   20c16:	ae 01       	movw	r20, r28
   20c18:	47 5f       	subi	r20, 0xF7	; 247
   20c1a:	5f 4f       	sbci	r21, 0xFF	; 255
   20c1c:	be 01       	movw	r22, r28
   20c1e:	6f 5f       	subi	r22, 0xFF	; 255
   20c20:	7f 4f       	sbci	r23, 0xFF	; 255
   20c22:	f6 01       	movw	r30, r12
   20c24:	80 85       	ldd	r24, Z+8	; 0x08
   20c26:	91 85       	ldd	r25, Z+9	; 0x09
   20c28:	0f 94 0a 00 	call	0x20014	; 0x20014 <RF24Network::write(RF24NetworkHeader&, void const*, unsigned int, unsigned int)>
   20c2c:	8d cf       	rjmp	.-230    	; 0x20b48 <RF24Mesh::DHCP()+0x14a>

00020c2e <Temperature_LM75_Derived::readIntegerTemperatureRegister(unsigned char)>:
_ZN24Temperature_LM75_Derived30readIntegerTemperatureRegisterEh():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:51
  .default_temperature_frac_width = 8,
  .max_temperature_resolution     = 13,
  .registers                      = &LM75_Compatible_Registers,
};

int16_t Temperature_LM75_Derived::readIntegerTemperatureRegister(uint8_t register_index) {
   20c2e:	0f 93       	push	r16
   20c30:	1f 93       	push	r17
   20c32:	cf 93       	push	r28
   20c34:	df 93       	push	r29
   20c36:	ec 01       	movw	r28, r24
   20c38:	16 2f       	mov	r17, r22
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:53
  // Select the temperature register at register_index.
  bus->beginTransmission(i2c_address);
   20c3a:	6a 81       	ldd	r22, Y+2	; 0x02
   20c3c:	88 81       	ld	r24, Y
   20c3e:	99 81       	ldd	r25, Y+1	; 0x01
   20c40:	0f 94 2e 07 	call	0x20e5c	; 0x20e5c <TwoWire::beginTransmission(unsigned char)>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:54
  bus->write(register_index);
   20c44:	88 81       	ld	r24, Y
   20c46:	99 81       	ldd	r25, Y+1	; 0x01
   20c48:	dc 01       	movw	r26, r24
   20c4a:	ed 91       	ld	r30, X+
   20c4c:	fc 91       	ld	r31, X
   20c4e:	01 90       	ld	r0, Z+
   20c50:	f0 81       	ld	r31, Z
   20c52:	e0 2d       	mov	r30, r0
   20c54:	61 2f       	mov	r22, r17
   20c56:	19 95       	eicall
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:55
  bus->endTransmission();
   20c58:	88 81       	ld	r24, Y
   20c5a:	99 81       	ldd	r25, Y+1	; 0x01
   20c5c:	0f 94 b6 07 	call	0x20f6c	; 0x20f6c <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:58

  // Start a transaction to read the register data.
  bus->requestFrom(i2c_address, (uint8_t) (resolution <= 8 ? 1 : 2));
   20c60:	88 81       	ld	r24, Y
   20c62:	99 81       	ldd	r25, Y+1	; 0x01
   20c64:	2b 81       	ldd	r18, Y+3	; 0x03
   20c66:	42 e0       	ldi	r20, 0x02	; 2
   20c68:	29 30       	cpi	r18, 0x09	; 9
   20c6a:	08 f4       	brcc	.+2      	; 0x20c6e <Temperature_LM75_Derived::readIntegerTemperatureRegister(unsigned char)+0x40>
   20c6c:	41 e0       	ldi	r20, 0x01	; 1
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:58 (discriminator 4)
   20c6e:	6a 81       	ldd	r22, Y+2	; 0x02
   20c70:	0f 94 b0 07 	call	0x20f60	; 0x20f60 <TwoWire::requestFrom(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:61 (discriminator 4)

  // Read the most significant byte of the temperature data.
  uint16_t t = bus->read() << 8;
   20c74:	88 81       	ld	r24, Y
   20c76:	99 81       	ldd	r25, Y+1	; 0x01
   20c78:	dc 01       	movw	r26, r24
   20c7a:	ed 91       	ld	r30, X+
   20c7c:	fc 91       	ld	r31, X
   20c7e:	02 84       	ldd	r0, Z+10	; 0x0a
   20c80:	f3 85       	ldd	r31, Z+11	; 0x0b
   20c82:	e0 2d       	mov	r30, r0
   20c84:	19 95       	eicall
   20c86:	00 e0       	ldi	r16, 0x00	; 0
   20c88:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:64 (discriminator 4)
  
  // Read the least significant byte of the temperature data, if requested.
  if (resolution > 8) {
   20c8a:	8b 81       	ldd	r24, Y+3	; 0x03
   20c8c:	89 30       	cpi	r24, 0x09	; 9
   20c8e:	58 f0       	brcs	.+22     	; 0x20ca6 <Temperature_LM75_Derived::readIntegerTemperatureRegister(unsigned char)+0x78>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:65
    t |= bus->read();
   20c90:	88 81       	ld	r24, Y
   20c92:	99 81       	ldd	r25, Y+1	; 0x01
   20c94:	dc 01       	movw	r26, r24
   20c96:	ed 91       	ld	r30, X+
   20c98:	fc 91       	ld	r31, X
   20c9a:	02 84       	ldd	r0, Z+10	; 0x0a
   20c9c:	f3 85       	ldd	r31, Z+11	; 0x0b
   20c9e:	e0 2d       	mov	r30, r0
   20ca0:	19 95       	eicall
   20ca2:	08 2b       	or	r16, r24
   20ca4:	19 2b       	or	r17, r25
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:69
  }

  // Finished reading the register data.
  bus->endTransmission();
   20ca6:	88 81       	ld	r24, Y
   20ca8:	99 81       	ldd	r25, Y+1	; 0x01
   20caa:	0f 94 b6 07 	call	0x20f6c	; 0x20f6c <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:72

  // Mask out unused/reserved bit from the full 16-bit register.
  t &= resolution_mask;
   20cae:	8c 81       	ldd	r24, Y+4	; 0x04
   20cb0:	9d 81       	ldd	r25, Y+5	; 0x05
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:76

  // Read the raw memory as a 16-bit signed integer and return.
  return *(int16_t *)(&t);
}
   20cb2:	80 23       	and	r24, r16
   20cb4:	91 23       	and	r25, r17
   20cb6:	df 91       	pop	r29
   20cb8:	cf 91       	pop	r28
   20cba:	1f 91       	pop	r17
   20cbc:	0f 91       	pop	r16
   20cbe:	08 95       	ret

00020cc0 <TwoWire::available()>:
_ZN7TwoWire9availableEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:326

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
}
   20cc0:	80 91 ae 12 	lds	r24, 0x12AE	; 0x8012ae <TwoWire::rxBufferLength>
   20cc4:	90 91 af 12 	lds	r25, 0x12AF	; 0x8012af <TwoWire::rxBufferIndex>
   20cc8:	89 1b       	sub	r24, r25
   20cca:	99 0b       	sbc	r25, r25
   20ccc:	08 95       	ret

00020cce <TwoWire::read()>:
_ZN7TwoWire4readEv():
   20cce:	90 91 af 12 	lds	r25, 0x12AF	; 0x8012af <TwoWire::rxBufferIndex>
   20cd2:	80 91 ae 12 	lds	r24, 0x12AE	; 0x8012ae <TwoWire::rxBufferLength>
   20cd6:	2f ef       	ldi	r18, 0xFF	; 255
   20cd8:	3f ef       	ldi	r19, 0xFF	; 255
   20cda:	98 17       	cp	r25, r24
   20cdc:	48 f4       	brcc	.+18     	; 0x20cf0 <TwoWire::read()+0x22>
   20cde:	e9 2f       	mov	r30, r25
   20ce0:	f0 e0       	ldi	r31, 0x00	; 0
   20ce2:	e0 55       	subi	r30, 0x50	; 80
   20ce4:	fd 4e       	sbci	r31, 0xED	; 237
   20ce6:	20 81       	ld	r18, Z
   20ce8:	30 e0       	ldi	r19, 0x00	; 0
   20cea:	9f 5f       	subi	r25, 0xFF	; 255
   20cec:	90 93 af 12 	sts	0x12AF, r25	; 0x8012af <TwoWire::rxBufferIndex>
   20cf0:	c9 01       	movw	r24, r18
   20cf2:	08 95       	ret

00020cf4 <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
   20cf4:	e0 91 af 12 	lds	r30, 0x12AF	; 0x8012af <TwoWire::rxBufferIndex>
   20cf8:	80 91 ae 12 	lds	r24, 0x12AE	; 0x8012ae <TwoWire::rxBufferLength>
   20cfc:	e8 17       	cp	r30, r24
   20cfe:	30 f4       	brcc	.+12     	; 0x20d0c <TwoWire::peek()+0x18>
   20d00:	f0 e0       	ldi	r31, 0x00	; 0
   20d02:	e0 55       	subi	r30, 0x50	; 80
   20d04:	fd 4e       	sbci	r31, 0xED	; 237
   20d06:	80 81       	ld	r24, Z
   20d08:	90 e0       	ldi	r25, 0x00	; 0
   20d0a:	08 95       	ret
   20d0c:	8f ef       	ldi	r24, 0xFF	; 255
   20d0e:	9f ef       	ldi	r25, 0xFF	; 255
   20d10:	08 95       	ret

00020d12 <TwoWire::flush()>:
_ZN7TwoWire5flushEv():
   20d12:	08 95       	ret

00020d14 <TwoWire::onReceiveService(unsigned char*, int)>:
_ZN7TwoWire16onReceiveServiceEPhi():
   20d14:	cf 93       	push	r28
   20d16:	df 93       	push	r29
   20d18:	ec 01       	movw	r28, r24
   20d1a:	e0 91 86 12 	lds	r30, 0x1286	; 0x801286 <TwoWire::user_onReceive>
   20d1e:	f0 91 87 12 	lds	r31, 0x1287	; 0x801287 <TwoWire::user_onReceive+0x1>
   20d22:	30 97       	sbiw	r30, 0x00	; 0
   20d24:	f1 f0       	breq	.+60     	; 0x20d62 <TwoWire::onReceiveService(unsigned char*, int)+0x4e>
   20d26:	90 91 af 12 	lds	r25, 0x12AF	; 0x8012af <TwoWire::rxBufferIndex>
   20d2a:	80 91 ae 12 	lds	r24, 0x12AE	; 0x8012ae <TwoWire::rxBufferLength>
   20d2e:	98 17       	cp	r25, r24
   20d30:	c0 f0       	brcs	.+48     	; 0x20d62 <TwoWire::onReceiveService(unsigned char*, int)+0x4e>
   20d32:	90 e0       	ldi	r25, 0x00	; 0
   20d34:	29 2f       	mov	r18, r25
   20d36:	30 e0       	ldi	r19, 0x00	; 0
   20d38:	26 17       	cp	r18, r22
   20d3a:	37 07       	cpc	r19, r23
   20d3c:	54 f4       	brge	.+20     	; 0x20d52 <TwoWire::onReceiveService(unsigned char*, int)+0x3e>
   20d3e:	de 01       	movw	r26, r28
   20d40:	a2 0f       	add	r26, r18
   20d42:	b3 1f       	adc	r27, r19
   20d44:	4c 91       	ld	r20, X
   20d46:	20 55       	subi	r18, 0x50	; 80
   20d48:	3d 4e       	sbci	r19, 0xED	; 237
   20d4a:	d9 01       	movw	r26, r18
   20d4c:	4c 93       	st	X, r20
   20d4e:	9f 5f       	subi	r25, 0xFF	; 255
   20d50:	f1 cf       	rjmp	.-30     	; 0x20d34 <TwoWire::onReceiveService(unsigned char*, int)+0x20>
   20d52:	10 92 af 12 	sts	0x12AF, r1	; 0x8012af <TwoWire::rxBufferIndex>
   20d56:	60 93 ae 12 	sts	0x12AE, r22	; 0x8012ae <TwoWire::rxBufferLength>
   20d5a:	cb 01       	movw	r24, r22
   20d5c:	df 91       	pop	r29
   20d5e:	cf 91       	pop	r28
   20d60:	19 94       	eijmp
   20d62:	df 91       	pop	r29
   20d64:	cf 91       	pop	r28
   20d66:	08 95       	ret

00020d68 <TwoWire::onRequestService()>:
_ZN7TwoWire16onRequestServiceEv():
   20d68:	e0 91 88 12 	lds	r30, 0x1288	; 0x801288 <TwoWire::user_onRequest>
   20d6c:	f0 91 89 12 	lds	r31, 0x1289	; 0x801289 <TwoWire::user_onRequest+0x1>
   20d70:	30 97       	sbiw	r30, 0x00	; 0
   20d72:	29 f0       	breq	.+10     	; 0x20d7e <TwoWire::onRequestService()+0x16>
   20d74:	10 92 8c 12 	sts	0x128C, r1	; 0x80128c <TwoWire::txBufferIndex>
   20d78:	10 92 8b 12 	sts	0x128B, r1	; 0x80128b <TwoWire::txBufferLength>
   20d7c:	19 94       	eijmp
   20d7e:	08 95       	ret

00020d80 <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
   20d80:	cf 93       	push	r28
   20d82:	df 93       	push	r29
   20d84:	1f 92       	push	r1
   20d86:	cd b7       	in	r28, 0x3d	; 61
   20d88:	de b7       	in	r29, 0x3e	; 62
   20d8a:	69 83       	std	Y+1, r22	; 0x01
   20d8c:	20 91 8a 12 	lds	r18, 0x128A	; 0x80128a <TwoWire::transmitting>
   20d90:	22 23       	and	r18, r18
   20d92:	f9 f0       	breq	.+62     	; 0x20dd2 <TwoWire::write(unsigned char)+0x52>
   20d94:	20 91 8b 12 	lds	r18, 0x128B	; 0x80128b <TwoWire::txBufferLength>
   20d98:	20 32       	cpi	r18, 0x20	; 32
   20d9a:	58 f0       	brcs	.+22     	; 0x20db2 <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
   20d9c:	21 e0       	ldi	r18, 0x01	; 1
   20d9e:	30 e0       	ldi	r19, 0x00	; 0
   20da0:	fc 01       	movw	r30, r24
   20da2:	33 83       	std	Z+3, r19	; 0x03
   20da4:	22 83       	std	Z+2, r18	; 0x02
_ZN7TwoWire5writeEh():
   20da6:	90 e0       	ldi	r25, 0x00	; 0
   20da8:	80 e0       	ldi	r24, 0x00	; 0
   20daa:	0f 90       	pop	r0
   20dac:	df 91       	pop	r29
   20dae:	cf 91       	pop	r28
   20db0:	08 95       	ret
   20db2:	80 91 8c 12 	lds	r24, 0x128C	; 0x80128c <TwoWire::txBufferIndex>
   20db6:	e8 2f       	mov	r30, r24
   20db8:	f0 e0       	ldi	r31, 0x00	; 0
   20dba:	e3 57       	subi	r30, 0x73	; 115
   20dbc:	fd 4e       	sbci	r31, 0xED	; 237
   20dbe:	99 81       	ldd	r25, Y+1	; 0x01
   20dc0:	90 83       	st	Z, r25
   20dc2:	8f 5f       	subi	r24, 0xFF	; 255
   20dc4:	80 93 8c 12 	sts	0x128C, r24	; 0x80128c <TwoWire::txBufferIndex>
   20dc8:	80 93 8b 12 	sts	0x128B, r24	; 0x80128b <TwoWire::txBufferLength>
   20dcc:	81 e0       	ldi	r24, 0x01	; 1
   20dce:	90 e0       	ldi	r25, 0x00	; 0
   20dd0:	ec cf       	rjmp	.-40     	; 0x20daa <TwoWire::write(unsigned char)+0x2a>
   20dd2:	61 e0       	ldi	r22, 0x01	; 1
   20dd4:	ce 01       	movw	r24, r28
   20dd6:	01 96       	adiw	r24, 0x01	; 1
   20dd8:	0f 94 87 08 	call	0x2110e	; 0x2110e <twi_transmit>
   20ddc:	f7 cf       	rjmp	.-18     	; 0x20dcc <TwoWire::write(unsigned char)+0x4c>

00020dde <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
   20dde:	cf 92       	push	r12
   20de0:	df 92       	push	r13
   20de2:	ef 92       	push	r14
   20de4:	ff 92       	push	r15
   20de6:	0f 93       	push	r16
   20de8:	1f 93       	push	r17
   20dea:	cf 93       	push	r28
   20dec:	df 93       	push	r29
   20dee:	7c 01       	movw	r14, r24
   20df0:	cb 01       	movw	r24, r22
   20df2:	8a 01       	movw	r16, r20
   20df4:	20 91 8a 12 	lds	r18, 0x128A	; 0x80128a <TwoWire::transmitting>
   20df8:	22 23       	and	r18, r18
   20dfa:	89 f0       	breq	.+34     	; 0x20e1e <TwoWire::write(unsigned char const*, unsigned int)+0x40>
   20dfc:	eb 01       	movw	r28, r22
   20dfe:	6b 01       	movw	r12, r22
   20e00:	c4 0e       	add	r12, r20
   20e02:	d5 1e       	adc	r13, r21
   20e04:	cc 15       	cp	r28, r12
   20e06:	dd 05       	cpc	r29, r13
   20e08:	69 f0       	breq	.+26     	; 0x20e24 <TwoWire::write(unsigned char const*, unsigned int)+0x46>
   20e0a:	69 91       	ld	r22, Y+
   20e0c:	d7 01       	movw	r26, r14
   20e0e:	ed 91       	ld	r30, X+
   20e10:	fc 91       	ld	r31, X
   20e12:	01 90       	ld	r0, Z+
   20e14:	f0 81       	ld	r31, Z
   20e16:	e0 2d       	mov	r30, r0
   20e18:	c7 01       	movw	r24, r14
   20e1a:	19 95       	eicall
   20e1c:	f3 cf       	rjmp	.-26     	; 0x20e04 <TwoWire::write(unsigned char const*, unsigned int)+0x26>
   20e1e:	64 2f       	mov	r22, r20
   20e20:	0f 94 87 08 	call	0x2110e	; 0x2110e <twi_transmit>
   20e24:	c8 01       	movw	r24, r16
   20e26:	df 91       	pop	r29
   20e28:	cf 91       	pop	r28
   20e2a:	1f 91       	pop	r17
   20e2c:	0f 91       	pop	r16
   20e2e:	ff 90       	pop	r15
   20e30:	ef 90       	pop	r14
   20e32:	df 90       	pop	r13
   20e34:	cf 90       	pop	r12
   20e36:	08 95       	ret

00020e38 <TwoWire::begin()>:
_ZN7TwoWire5beginEv():
   20e38:	10 92 af 12 	sts	0x12AF, r1	; 0x8012af <TwoWire::rxBufferIndex>
   20e3c:	10 92 ae 12 	sts	0x12AE, r1	; 0x8012ae <TwoWire::rxBufferLength>
   20e40:	10 92 8c 12 	sts	0x128C, r1	; 0x80128c <TwoWire::txBufferIndex>
   20e44:	10 92 8b 12 	sts	0x128B, r1	; 0x80128b <TwoWire::txBufferLength>
   20e48:	0f 94 ca 07 	call	0x20f94	; 0x20f94 <twi_init>
   20e4c:	8c e3       	ldi	r24, 0x3C	; 60
   20e4e:	92 e0       	ldi	r25, 0x02	; 2
   20e50:	0f 94 b3 08 	call	0x21166	; 0x21166 <twi_attachSlaveTxEvent>
   20e54:	8e e8       	ldi	r24, 0x8E	; 142
   20e56:	90 e0       	ldi	r25, 0x00	; 0
   20e58:	0d 94 ae 08 	jmp	0x2115c	; 0x2115c <twi_attachSlaveRxEvent>

00020e5c <TwoWire::beginTransmission(unsigned char)>:
_ZN7TwoWire17beginTransmissionEh():
   20e5c:	81 e0       	ldi	r24, 0x01	; 1
   20e5e:	80 93 8a 12 	sts	0x128A, r24	; 0x80128a <TwoWire::transmitting>
   20e62:	60 93 ad 12 	sts	0x12AD, r22	; 0x8012ad <TwoWire::txAddress>
   20e66:	10 92 8c 12 	sts	0x128C, r1	; 0x80128c <TwoWire::txBufferIndex>
   20e6a:	10 92 8b 12 	sts	0x128B, r1	; 0x80128b <TwoWire::txBufferLength>
   20e6e:	08 95       	ret

00020e70 <TwoWire::beginTransmission(int)>:
_ZN7TwoWire17beginTransmissionEi():
   20e70:	0d 94 2e 07 	jmp	0x20e5c	; 0x20e5c <TwoWire::beginTransmission(unsigned char)>

00020e74 <TwoWire::endTransmission(unsigned char)>:
_ZN7TwoWire15endTransmissionEh():
   20e74:	0f 93       	push	r16
   20e76:	06 2f       	mov	r16, r22
   20e78:	21 e0       	ldi	r18, 0x01	; 1
   20e7a:	40 91 8b 12 	lds	r20, 0x128B	; 0x80128b <TwoWire::txBufferLength>
   20e7e:	6d e8       	ldi	r22, 0x8D	; 141
   20e80:	72 e1       	ldi	r23, 0x12	; 18
   20e82:	80 91 ad 12 	lds	r24, 0x12AD	; 0x8012ad <TwoWire::txAddress>
   20e86:	0f 94 30 08 	call	0x21060	; 0x21060 <twi_writeTo>
   20e8a:	10 92 8c 12 	sts	0x128C, r1	; 0x80128c <TwoWire::txBufferIndex>
   20e8e:	10 92 8b 12 	sts	0x128B, r1	; 0x80128b <TwoWire::txBufferLength>
   20e92:	10 92 8a 12 	sts	0x128A, r1	; 0x80128a <TwoWire::transmitting>
   20e96:	0f 91       	pop	r16
   20e98:	08 95       	ret

00020e9a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhhmhh():
   20e9a:	4f 92       	push	r4
   20e9c:	5f 92       	push	r5
   20e9e:	6f 92       	push	r6
   20ea0:	7f 92       	push	r7
   20ea2:	af 92       	push	r10
   20ea4:	bf 92       	push	r11
   20ea6:	cf 92       	push	r12
   20ea8:	ef 92       	push	r14
   20eaa:	ff 92       	push	r15
   20eac:	0f 93       	push	r16
   20eae:	1f 93       	push	r17
   20eb0:	cf 93       	push	r28
   20eb2:	df 93       	push	r29
   20eb4:	5c 01       	movw	r10, r24
   20eb6:	f6 2e       	mov	r15, r22
   20eb8:	d4 2f       	mov	r29, r20
   20eba:	28 01       	movw	r4, r16
   20ebc:	39 01       	movw	r6, r18
   20ebe:	ee 20       	and	r14, r14
   20ec0:	19 f1       	breq	.+70     	; 0x20f08 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x6e>
   20ec2:	0f 94 2e 07 	call	0x20e5c	; 0x20e5c <TwoWire::beginTransmission(unsigned char)>
   20ec6:	ce 2d       	mov	r28, r14
   20ec8:	c4 30       	cpi	r28, 0x04	; 4
   20eca:	08 f0       	brcs	.+2      	; 0x20ece <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x34>
   20ecc:	c3 e0       	ldi	r28, 0x03	; 3
   20ece:	c1 50       	subi	r28, 0x01	; 1
   20ed0:	b8 f0       	brcs	.+46     	; 0x20f00 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x66>
   20ed2:	28 e0       	ldi	r18, 0x08	; 8
   20ed4:	c2 9f       	mul	r28, r18
   20ed6:	c0 01       	movw	r24, r0
   20ed8:	11 24       	eor	r1, r1
   20eda:	a3 01       	movw	r20, r6
   20edc:	92 01       	movw	r18, r4
   20ede:	04 c0       	rjmp	.+8      	; 0x20ee8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x4e>
   20ee0:	56 95       	lsr	r21
   20ee2:	47 95       	ror	r20
   20ee4:	37 95       	ror	r19
   20ee6:	27 95       	ror	r18
   20ee8:	8a 95       	dec	r24
   20eea:	d2 f7       	brpl	.-12     	; 0x20ee0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x46>
   20eec:	b9 01       	movw	r22, r18
   20eee:	d5 01       	movw	r26, r10
   20ef0:	ed 91       	ld	r30, X+
   20ef2:	fc 91       	ld	r31, X
   20ef4:	01 90       	ld	r0, Z+
   20ef6:	f0 81       	ld	r31, Z
   20ef8:	e0 2d       	mov	r30, r0
   20efa:	c5 01       	movw	r24, r10
   20efc:	19 95       	eicall
   20efe:	e7 cf       	rjmp	.-50     	; 0x20ece <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x34>
   20f00:	60 e0       	ldi	r22, 0x00	; 0
   20f02:	c5 01       	movw	r24, r10
   20f04:	0f 94 3a 07 	call	0x20e74	; 0x20e74 <TwoWire::endTransmission(unsigned char)>
   20f08:	4d 2f       	mov	r20, r29
   20f0a:	d1 32       	cpi	r29, 0x21	; 33
   20f0c:	08 f0       	brcs	.+2      	; 0x20f10 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x76>
   20f0e:	40 e2       	ldi	r20, 0x20	; 32
   20f10:	2c 2d       	mov	r18, r12
   20f12:	60 eb       	ldi	r22, 0xB0	; 176
   20f14:	72 e1       	ldi	r23, 0x12	; 18
   20f16:	8f 2d       	mov	r24, r15
   20f18:	0f 94 e8 07 	call	0x20fd0	; 0x20fd0 <twi_readFrom>
   20f1c:	10 92 af 12 	sts	0x12AF, r1	; 0x8012af <TwoWire::rxBufferIndex>
   20f20:	80 93 ae 12 	sts	0x12AE, r24	; 0x8012ae <TwoWire::rxBufferLength>
   20f24:	df 91       	pop	r29
   20f26:	cf 91       	pop	r28
   20f28:	1f 91       	pop	r17
   20f2a:	0f 91       	pop	r16
   20f2c:	ff 90       	pop	r15
   20f2e:	ef 90       	pop	r14
   20f30:	cf 90       	pop	r12
   20f32:	bf 90       	pop	r11
   20f34:	af 90       	pop	r10
   20f36:	7f 90       	pop	r7
   20f38:	6f 90       	pop	r6
   20f3a:	5f 90       	pop	r5
   20f3c:	4f 90       	pop	r4
   20f3e:	08 95       	ret

00020f40 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhhh():
   20f40:	cf 92       	push	r12
   20f42:	ef 92       	push	r14
   20f44:	0f 93       	push	r16
   20f46:	1f 93       	push	r17
   20f48:	c2 2e       	mov	r12, r18
   20f4a:	e1 2c       	mov	r14, r1
   20f4c:	00 e0       	ldi	r16, 0x00	; 0
   20f4e:	10 e0       	ldi	r17, 0x00	; 0
   20f50:	98 01       	movw	r18, r16
   20f52:	0f 94 4d 07 	call	0x20e9a	; 0x20e9a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)>
   20f56:	1f 91       	pop	r17
   20f58:	0f 91       	pop	r16
   20f5a:	ef 90       	pop	r14
   20f5c:	cf 90       	pop	r12
   20f5e:	08 95       	ret

00020f60 <TwoWire::requestFrom(unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhh():
   20f60:	21 e0       	ldi	r18, 0x01	; 1
   20f62:	0d 94 a0 07 	jmp	0x20f40	; 0x20f40 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>

00020f66 <TwoWire::requestFrom(int, int)>:
_ZN7TwoWire11requestFromEii():
   20f66:	21 e0       	ldi	r18, 0x01	; 1
   20f68:	0d 94 a0 07 	jmp	0x20f40	; 0x20f40 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>

00020f6c <TwoWire::endTransmission()>:
_ZN7TwoWire15endTransmissionEv():
   20f6c:	61 e0       	ldi	r22, 0x01	; 1
   20f6e:	0d 94 3a 07 	jmp	0x20e74	; 0x20e74 <TwoWire::endTransmission(unsigned char)>

00020f72 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
_ZN5PrintC4Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:46
   20f72:	ea e7       	ldi	r30, 0x7A	; 122
   20f74:	f2 e1       	ldi	r31, 0x12	; 18
   20f76:	13 82       	std	Z+3, r1	; 0x03
   20f78:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
   20f7a:	88 ee       	ldi	r24, 0xE8	; 232
   20f7c:	93 e0       	ldi	r25, 0x03	; 3
   20f7e:	a0 e0       	ldi	r26, 0x00	; 0
   20f80:	b0 e0       	ldi	r27, 0x00	; 0
   20f82:	84 83       	std	Z+4, r24	; 0x04
   20f84:	95 83       	std	Z+5, r25	; 0x05
   20f86:	a6 83       	std	Z+6, r26	; 0x06
   20f88:	b7 83       	std	Z+7, r27	; 0x07
_ZN7TwoWireC4Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:49
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
   20f8a:	8a ea       	ldi	r24, 0xAA	; 170
   20f8c:	99 e0       	ldi	r25, 0x09	; 9
   20f8e:	91 83       	std	Z+1, r25	; 0x01
   20f90:	80 83       	st	Z, r24
_GLOBAL__sub_I__ZN7TwoWire8rxBufferE():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:330
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
   20f92:	08 95       	ret

00020f94 <twi_init>:
twi_init():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
   20f94:	10 92 3d 13 	sts	0x133D, r1	; 0x80133d <twi_state>
   20f98:	81 e0       	ldi	r24, 0x01	; 1
   20f9a:	80 93 3b 13 	sts	0x133B, r24	; 0x80133b <twi_sendStop>
   20f9e:	10 92 3a 13 	sts	0x133A, r1	; 0x80133a <twi_inRepStart>
   20fa2:	61 e0       	ldi	r22, 0x01	; 1
   20fa4:	83 e1       	ldi	r24, 0x13	; 19
   20fa6:	0f 94 60 10 	call	0x220c0	; 0x220c0 <digitalWrite>
   20faa:	61 e0       	ldi	r22, 0x01	; 1
   20fac:	82 e1       	ldi	r24, 0x12	; 18
   20fae:	0f 94 60 10 	call	0x220c0	; 0x220c0 <digitalWrite>
   20fb2:	e9 eb       	ldi	r30, 0xB9	; 185
   20fb4:	f0 e0       	ldi	r31, 0x00	; 0
   20fb6:	80 81       	ld	r24, Z
   20fb8:	8e 7f       	andi	r24, 0xFE	; 254
   20fba:	80 83       	st	Z, r24
   20fbc:	80 81       	ld	r24, Z
   20fbe:	8d 7f       	andi	r24, 0xFD	; 253
   20fc0:	80 83       	st	Z, r24
   20fc2:	88 e4       	ldi	r24, 0x48	; 72
   20fc4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
   20fc8:	85 e4       	ldi	r24, 0x45	; 69
   20fca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   20fce:	08 95       	ret

00020fd0 <twi_readFrom>:
twi_readFrom():
   20fd0:	41 32       	cpi	r20, 0x21	; 33
   20fd2:	08 f0       	brcs	.+2      	; 0x20fd6 <twi_readFrom+0x6>
   20fd4:	43 c0       	rjmp	.+134    	; 0x2105c <twi_readFrom+0x8c>
   20fd6:	90 91 3d 13 	lds	r25, 0x133D	; 0x80133d <twi_state>
   20fda:	91 11       	cpse	r25, r1
   20fdc:	fc cf       	rjmp	.-8      	; 0x20fd6 <twi_readFrom+0x6>
   20fde:	91 e0       	ldi	r25, 0x01	; 1
   20fe0:	90 93 3d 13 	sts	0x133D, r25	; 0x80133d <twi_state>
   20fe4:	20 93 3b 13 	sts	0x133B, r18	; 0x80133b <twi_sendStop>
   20fe8:	2f ef       	ldi	r18, 0xFF	; 255
   20fea:	20 93 d0 12 	sts	0x12D0, r18	; 0x8012d0 <twi_error>
   20fee:	10 92 15 13 	sts	0x1315, r1	; 0x801315 <twi_masterBufferIndex>
   20ff2:	24 0f       	add	r18, r20
   20ff4:	20 93 14 13 	sts	0x1314, r18	; 0x801314 <twi_masterBufferLength>
   20ff8:	90 93 3c 13 	sts	0x133C, r25	; 0x80133c <twi_slarw>
   20ffc:	90 91 3c 13 	lds	r25, 0x133C	; 0x80133c <twi_slarw>
   21000:	88 0f       	add	r24, r24
   21002:	89 2b       	or	r24, r25
   21004:	80 93 3c 13 	sts	0x133C, r24	; 0x80133c <twi_slarw>
   21008:	80 91 3a 13 	lds	r24, 0x133A	; 0x80133a <twi_inRepStart>
   2100c:	81 30       	cpi	r24, 0x01	; 1
   2100e:	09 f5       	brne	.+66     	; 0x21052 <twi_readFrom+0x82>
   21010:	10 92 3a 13 	sts	0x133A, r1	; 0x80133a <twi_inRepStart>
   21014:	80 91 3c 13 	lds	r24, 0x133C	; 0x80133c <twi_slarw>
   21018:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
   2101c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   21020:	83 fd       	sbrc	r24, 3
   21022:	f8 cf       	rjmp	.-16     	; 0x21014 <twi_readFrom+0x44>
   21024:	85 ec       	ldi	r24, 0xC5	; 197
   21026:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   2102a:	80 91 3d 13 	lds	r24, 0x133D	; 0x80133d <twi_state>
   2102e:	81 30       	cpi	r24, 0x01	; 1
   21030:	e1 f3       	breq	.-8      	; 0x2102a <twi_readFrom+0x5a>
   21032:	80 91 15 13 	lds	r24, 0x1315	; 0x801315 <twi_masterBufferIndex>
   21036:	84 17       	cp	r24, r20
   21038:	10 f4       	brcc	.+4      	; 0x2103e <twi_readFrom+0x6e>
   2103a:	40 91 15 13 	lds	r20, 0x1315	; 0x801315 <twi_masterBufferIndex>
   2103e:	a6 e1       	ldi	r26, 0x16	; 22
   21040:	b3 e1       	ldi	r27, 0x13	; 19
   21042:	96 2f       	mov	r25, r22
   21044:	fb 01       	movw	r30, r22
   21046:	8e 2f       	mov	r24, r30
   21048:	89 1b       	sub	r24, r25
   2104a:	84 17       	cp	r24, r20
   2104c:	20 f0       	brcs	.+8      	; 0x21056 <twi_readFrom+0x86>
   2104e:	84 2f       	mov	r24, r20
   21050:	08 95       	ret
   21052:	85 ee       	ldi	r24, 0xE5	; 229
   21054:	e8 cf       	rjmp	.-48     	; 0x21026 <twi_readFrom+0x56>
   21056:	8d 91       	ld	r24, X+
   21058:	81 93       	st	Z+, r24
   2105a:	f5 cf       	rjmp	.-22     	; 0x21046 <twi_readFrom+0x76>
   2105c:	40 e0       	ldi	r20, 0x00	; 0
   2105e:	f7 cf       	rjmp	.-18     	; 0x2104e <twi_readFrom+0x7e>

00021060 <twi_writeTo>:
twi_writeTo():
   21060:	0f 93       	push	r16
   21062:	41 32       	cpi	r20, 0x21	; 33
   21064:	08 f0       	brcs	.+2      	; 0x21068 <twi_writeTo+0x8>
   21066:	4b c0       	rjmp	.+150    	; 0x210fe <twi_writeTo+0x9e>
   21068:	90 91 3d 13 	lds	r25, 0x133D	; 0x80133d <twi_state>
   2106c:	91 11       	cpse	r25, r1
   2106e:	fc cf       	rjmp	.-8      	; 0x21068 <twi_writeTo+0x8>
   21070:	92 e0       	ldi	r25, 0x02	; 2
   21072:	90 93 3d 13 	sts	0x133D, r25	; 0x80133d <twi_state>
   21076:	00 93 3b 13 	sts	0x133B, r16	; 0x80133b <twi_sendStop>
   2107a:	9f ef       	ldi	r25, 0xFF	; 255
   2107c:	90 93 d0 12 	sts	0x12D0, r25	; 0x8012d0 <twi_error>
   21080:	10 92 15 13 	sts	0x1315, r1	; 0x801315 <twi_masterBufferIndex>
   21084:	40 93 14 13 	sts	0x1314, r20	; 0x801314 <twi_masterBufferLength>
   21088:	36 2f       	mov	r19, r22
   2108a:	a6 e1       	ldi	r26, 0x16	; 22
   2108c:	b3 e1       	ldi	r27, 0x13	; 19
   2108e:	fb 01       	movw	r30, r22
   21090:	9e 2f       	mov	r25, r30
   21092:	93 1b       	sub	r25, r19
   21094:	94 17       	cp	r25, r20
   21096:	70 f1       	brcs	.+92     	; 0x210f4 <twi_writeTo+0x94>
   21098:	10 92 3c 13 	sts	0x133C, r1	; 0x80133c <twi_slarw>
   2109c:	90 91 3c 13 	lds	r25, 0x133C	; 0x80133c <twi_slarw>
   210a0:	88 0f       	add	r24, r24
   210a2:	89 2b       	or	r24, r25
   210a4:	80 93 3c 13 	sts	0x133C, r24	; 0x80133c <twi_slarw>
   210a8:	80 91 3a 13 	lds	r24, 0x133A	; 0x80133a <twi_inRepStart>
   210ac:	81 30       	cpi	r24, 0x01	; 1
   210ae:	29 f5       	brne	.+74     	; 0x210fa <twi_writeTo+0x9a>
   210b0:	10 92 3a 13 	sts	0x133A, r1	; 0x80133a <twi_inRepStart>
   210b4:	80 91 3c 13 	lds	r24, 0x133C	; 0x80133c <twi_slarw>
   210b8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
   210bc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   210c0:	83 fd       	sbrc	r24, 3
   210c2:	f8 cf       	rjmp	.-16     	; 0x210b4 <twi_writeTo+0x54>
   210c4:	85 ec       	ldi	r24, 0xC5	; 197
   210c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   210ca:	22 23       	and	r18, r18
   210cc:	21 f0       	breq	.+8      	; 0x210d6 <twi_writeTo+0x76>
   210ce:	80 91 3d 13 	lds	r24, 0x133D	; 0x80133d <twi_state>
   210d2:	82 30       	cpi	r24, 0x02	; 2
   210d4:	d1 f3       	breq	.-12     	; 0x210ca <twi_writeTo+0x6a>
   210d6:	80 91 d0 12 	lds	r24, 0x12D0	; 0x8012d0 <twi_error>
   210da:	8f 3f       	cpi	r24, 0xFF	; 255
   210dc:	91 f0       	breq	.+36     	; 0x21102 <twi_writeTo+0xa2>
   210de:	80 91 d0 12 	lds	r24, 0x12D0	; 0x8012d0 <twi_error>
   210e2:	80 32       	cpi	r24, 0x20	; 32
   210e4:	81 f0       	breq	.+32     	; 0x21106 <twi_writeTo+0xa6>
   210e6:	80 91 d0 12 	lds	r24, 0x12D0	; 0x8012d0 <twi_error>
   210ea:	80 33       	cpi	r24, 0x30	; 48
   210ec:	71 f0       	breq	.+28     	; 0x2110a <twi_writeTo+0xaa>
   210ee:	84 e0       	ldi	r24, 0x04	; 4
   210f0:	0f 91       	pop	r16
   210f2:	08 95       	ret
   210f4:	91 91       	ld	r25, Z+
   210f6:	9d 93       	st	X+, r25
   210f8:	cb cf       	rjmp	.-106    	; 0x21090 <twi_writeTo+0x30>
   210fa:	85 ee       	ldi	r24, 0xE5	; 229
   210fc:	e4 cf       	rjmp	.-56     	; 0x210c6 <twi_writeTo+0x66>
   210fe:	81 e0       	ldi	r24, 0x01	; 1
   21100:	f7 cf       	rjmp	.-18     	; 0x210f0 <twi_writeTo+0x90>
   21102:	80 e0       	ldi	r24, 0x00	; 0
   21104:	f5 cf       	rjmp	.-22     	; 0x210f0 <twi_writeTo+0x90>
   21106:	82 e0       	ldi	r24, 0x02	; 2
   21108:	f3 cf       	rjmp	.-26     	; 0x210f0 <twi_writeTo+0x90>
   2110a:	83 e0       	ldi	r24, 0x03	; 3
   2110c:	f1 cf       	rjmp	.-30     	; 0x210f0 <twi_writeTo+0x90>

0002110e <twi_transmit>:
twi_transmit():
   2110e:	20 91 f2 12 	lds	r18, 0x12F2	; 0x8012f2 <twi_txBufferLength>
   21112:	26 0f       	add	r18, r22
   21114:	33 27       	eor	r19, r19
   21116:	33 1f       	adc	r19, r19
   21118:	21 32       	cpi	r18, 0x21	; 33
   2111a:	31 05       	cpc	r19, r1
   2111c:	ec f4       	brge	.+58     	; 0x21158 <twi_transmit+0x4a>
   2111e:	20 91 3d 13 	lds	r18, 0x133D	; 0x80133d <twi_state>
   21122:	fc 01       	movw	r30, r24
   21124:	90 e0       	ldi	r25, 0x00	; 0
   21126:	80 e0       	ldi	r24, 0x00	; 0
   21128:	24 30       	cpi	r18, 0x04	; 4
   2112a:	69 f0       	breq	.+26     	; 0x21146 <twi_transmit+0x38>
   2112c:	82 e0       	ldi	r24, 0x02	; 2
   2112e:	08 95       	ret
   21130:	a0 91 f2 12 	lds	r26, 0x12F2	; 0x8012f2 <twi_txBufferLength>
   21134:	21 91       	ld	r18, Z+
   21136:	ac 01       	movw	r20, r24
   21138:	4c 50       	subi	r20, 0x0C	; 12
   2113a:	5d 4e       	sbci	r21, 0xED	; 237
   2113c:	a4 0f       	add	r26, r20
   2113e:	b5 2f       	mov	r27, r21
   21140:	b1 1d       	adc	r27, r1
   21142:	2c 93       	st	X, r18
   21144:	01 96       	adiw	r24, 0x01	; 1
   21146:	86 17       	cp	r24, r22
   21148:	98 f3       	brcs	.-26     	; 0x21130 <twi_transmit+0x22>
   2114a:	80 91 f2 12 	lds	r24, 0x12F2	; 0x8012f2 <twi_txBufferLength>
   2114e:	68 0f       	add	r22, r24
   21150:	60 93 f2 12 	sts	0x12F2, r22	; 0x8012f2 <twi_txBufferLength>
   21154:	80 e0       	ldi	r24, 0x00	; 0
   21156:	08 95       	ret
   21158:	81 e0       	ldi	r24, 0x01	; 1
   2115a:	08 95       	ret

0002115c <twi_attachSlaveRxEvent>:
twi_attachSlaveRxEvent():
   2115c:	90 93 37 13 	sts	0x1337, r25	; 0x801337 <twi_onSlaveReceive+0x1>
   21160:	80 93 36 13 	sts	0x1336, r24	; 0x801336 <twi_onSlaveReceive>
   21164:	08 95       	ret

00021166 <twi_attachSlaveTxEvent>:
twi_attachSlaveTxEvent():
   21166:	90 93 39 13 	sts	0x1339, r25	; 0x801339 <twi_onSlaveTransmit+0x1>
   2116a:	80 93 38 13 	sts	0x1338, r24	; 0x801338 <twi_onSlaveTransmit>
   2116e:	08 95       	ret

00021170 <twi_stop>:
twi_stop():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:372
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
   21170:	85 ed       	ldi	r24, 0xD5	; 213
   21172:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:376

  // wait for stop condition to be executed on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
   21176:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   2117a:	84 fd       	sbrc	r24, 4
   2117c:	fc cf       	rjmp	.-8      	; 0x21176 <twi_stop+0x6>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:381
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
   2117e:	10 92 3d 13 	sts	0x133D, r1	; 0x80133d <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:382
}
   21182:	08 95       	ret

00021184 <twi_releaseBus>:
twi_releaseBus():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:393
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
   21184:	85 ec       	ldi	r24, 0xC5	; 197
   21186:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:396

  // update twi state
  twi_state = TWI_READY;
   2118a:	10 92 3d 13 	sts	0x133D, r1	; 0x80133d <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:397
}
   2118e:	08 95       	ret

00021190 <__vector_39>:
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:400

ISR(TWI_vect)
{
   21190:	1f 92       	push	r1
   21192:	0f 92       	push	r0
   21194:	0f b6       	in	r0, 0x3f	; 63
   21196:	0f 92       	push	r0
   21198:	11 24       	eor	r1, r1
   2119a:	0b b6       	in	r0, 0x3b	; 59
   2119c:	0f 92       	push	r0
   2119e:	2f 93       	push	r18
   211a0:	3f 93       	push	r19
   211a2:	4f 93       	push	r20
   211a4:	5f 93       	push	r21
   211a6:	6f 93       	push	r22
   211a8:	7f 93       	push	r23
   211aa:	8f 93       	push	r24
   211ac:	9f 93       	push	r25
   211ae:	af 93       	push	r26
   211b0:	bf 93       	push	r27
   211b2:	ef 93       	push	r30
   211b4:	ff 93       	push	r31
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  switch(TW_STATUS){
   211b6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
   211ba:	88 7f       	andi	r24, 0xF8	; 248
   211bc:	80 36       	cpi	r24, 0x60	; 96
   211be:	09 f4       	brne	.+2      	; 0x211c2 <__vector_39+0x32>
   211c0:	4e c0       	rjmp	.+156    	; 0x2125e <__vector_39+0xce>
   211c2:	08 f0       	brcs	.+2      	; 0x211c6 <__vector_39+0x36>
   211c4:	41 c0       	rjmp	.+130    	; 0x21248 <__vector_39+0xb8>
   211c6:	88 32       	cpi	r24, 0x28	; 40
   211c8:	09 f4       	brne	.+2      	; 0x211cc <__vector_39+0x3c>
   211ca:	aa c0       	rjmp	.+340    	; 0x21320 <__vector_39+0x190>
   211cc:	28 f5       	brcc	.+74     	; 0x21218 <__vector_39+0x88>
   211ce:	80 31       	cpi	r24, 0x10	; 16
   211d0:	09 f4       	brne	.+2      	; 0x211d4 <__vector_39+0x44>
   211d2:	9e c0       	rjmp	.+316    	; 0x21310 <__vector_39+0x180>
   211d4:	c8 f4       	brcc	.+50     	; 0x21208 <__vector_39+0x78>
   211d6:	88 23       	and	r24, r24
   211d8:	09 f4       	brne	.+2      	; 0x211dc <__vector_39+0x4c>
   211da:	fb c0       	rjmp	.+502    	; 0x213d2 <__vector_39+0x242>
   211dc:	88 30       	cpi	r24, 0x08	; 8
   211de:	09 f4       	brne	.+2      	; 0x211e2 <__vector_39+0x52>
   211e0:	97 c0       	rjmp	.+302    	; 0x21310 <__vector_39+0x180>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:562
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
   211e2:	ff 91       	pop	r31
   211e4:	ef 91       	pop	r30
   211e6:	bf 91       	pop	r27
   211e8:	af 91       	pop	r26
   211ea:	9f 91       	pop	r25
   211ec:	8f 91       	pop	r24
   211ee:	7f 91       	pop	r23
   211f0:	6f 91       	pop	r22
   211f2:	5f 91       	pop	r21
   211f4:	4f 91       	pop	r20
   211f6:	3f 91       	pop	r19
   211f8:	2f 91       	pop	r18
   211fa:	0f 90       	pop	r0
   211fc:	0b be       	out	0x3b, r0	; 59
   211fe:	0f 90       	pop	r0
   21200:	0f be       	out	0x3f, r0	; 63
   21202:	0f 90       	pop	r0
   21204:	1f 90       	pop	r1
   21206:	18 95       	reti
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   21208:	88 31       	cpi	r24, 0x18	; 24
   2120a:	09 f4       	brne	.+2      	; 0x2120e <__vector_39+0x7e>
   2120c:	89 c0       	rjmp	.+274    	; 0x21320 <__vector_39+0x190>
   2120e:	80 32       	cpi	r24, 0x20	; 32
   21210:	41 f7       	brne	.-48     	; 0x211e2 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:436
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
   21212:	80 93 d0 12 	sts	0x12D0, r24	; 0x8012d0 <twi_error>
   21216:	15 c0       	rjmp	.+42     	; 0x21242 <__vector_39+0xb2>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   21218:	80 34       	cpi	r24, 0x40	; 64
   2121a:	09 f4       	brne	.+2      	; 0x2121e <__vector_39+0x8e>
   2121c:	9e c0       	rjmp	.+316    	; 0x2135a <__vector_39+0x1ca>
   2121e:	48 f4       	brcc	.+18     	; 0x21232 <__vector_39+0xa2>
   21220:	80 33       	cpi	r24, 0x30	; 48
   21222:	b9 f3       	breq	.-18     	; 0x21212 <__vector_39+0x82>
   21224:	88 33       	cpi	r24, 0x38	; 56
   21226:	e9 f6       	brne	.-70     	; 0x211e2 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:440
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
   21228:	80 93 d0 12 	sts	0x12D0, r24	; 0x8012d0 <twi_error>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:441
      twi_releaseBus();
   2122c:	0f 94 c2 08 	call	0x21184	; 0x21184 <twi_releaseBus>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:442
      break;
   21230:	d8 cf       	rjmp	.-80     	; 0x211e2 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   21232:	80 35       	cpi	r24, 0x50	; 80
   21234:	09 f4       	brne	.+2      	; 0x21238 <__vector_39+0xa8>
   21236:	85 c0       	rjmp	.+266    	; 0x21342 <__vector_39+0x1b2>
   21238:	88 35       	cpi	r24, 0x58	; 88
   2123a:	09 f4       	brne	.+2      	; 0x2123e <__vector_39+0xae>
   2123c:	96 c0       	rjmp	.+300    	; 0x2136a <__vector_39+0x1da>
   2123e:	88 34       	cpi	r24, 0x48	; 72
   21240:	81 f6       	brne	.-96     	; 0x211e2 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:559
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
   21242:	0f 94 b8 08 	call	0x21170	; 0x21170 <twi_stop>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:562
      break;
  }
}
   21246:	cd cf       	rjmp	.-102    	; 0x211e2 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   21248:	88 39       	cpi	r24, 0x98	; 152
   2124a:	09 f4       	brne	.+2      	; 0x2124e <__vector_39+0xbe>
   2124c:	8c c0       	rjmp	.+280    	; 0x21366 <__vector_39+0x1d6>
   2124e:	38 f5       	brcc	.+78     	; 0x2129e <__vector_39+0x10e>
   21250:	88 37       	cpi	r24, 0x78	; 120
   21252:	29 f0       	breq	.+10     	; 0x2125e <__vector_39+0xce>
   21254:	50 f4       	brcc	.+20     	; 0x2126a <__vector_39+0xda>
   21256:	88 36       	cpi	r24, 0x68	; 104
   21258:	11 f0       	breq	.+4      	; 0x2125e <__vector_39+0xce>
   2125a:	80 37       	cpi	r24, 0x70	; 112
   2125c:	11 f6       	brne	.-124    	; 0x211e2 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:482
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
   2125e:	83 e0       	ldi	r24, 0x03	; 3
   21260:	80 93 3d 13 	sts	0x133D, r24	; 0x80133d <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:484
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
   21264:	10 92 d1 12 	sts	0x12D1, r1	; 0x8012d1 <twi_rxBufferIndex>
   21268:	57 c0       	rjmp	.+174    	; 0x21318 <__vector_39+0x188>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   2126a:	88 38       	cpi	r24, 0x88	; 136
   2126c:	09 f4       	brne	.+2      	; 0x21270 <__vector_39+0xe0>
   2126e:	7b c0       	rjmp	.+246    	; 0x21366 <__vector_39+0x1d6>
   21270:	80 39       	cpi	r24, 0x90	; 144
   21272:	19 f0       	breq	.+6      	; 0x2127a <__vector_39+0xea>
   21274:	80 38       	cpi	r24, 0x80	; 128
   21276:	09 f0       	breq	.+2      	; 0x2127a <__vector_39+0xea>
   21278:	b4 cf       	rjmp	.-152    	; 0x211e2 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:490
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
   2127a:	80 91 d1 12 	lds	r24, 0x12D1	; 0x8012d1 <twi_rxBufferIndex>
   2127e:	80 32       	cpi	r24, 0x20	; 32
   21280:	08 f0       	brcs	.+2      	; 0x21284 <__vector_39+0xf4>
   21282:	71 c0       	rjmp	.+226    	; 0x21366 <__vector_39+0x1d6>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:492
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
   21284:	e0 91 d1 12 	lds	r30, 0x12D1	; 0x8012d1 <twi_rxBufferIndex>
   21288:	81 e0       	ldi	r24, 0x01	; 1
   2128a:	8e 0f       	add	r24, r30
   2128c:	80 93 d1 12 	sts	0x12D1, r24	; 0x8012d1 <twi_rxBufferIndex>
   21290:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
   21294:	f0 e0       	ldi	r31, 0x00	; 0
   21296:	ee 52       	subi	r30, 0x2E	; 46
   21298:	fd 4e       	sbci	r31, 0xED	; 237
   2129a:	80 83       	st	Z, r24
   2129c:	3d c0       	rjmp	.+122    	; 0x21318 <__vector_39+0x188>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   2129e:	80 3b       	cpi	r24, 0xB0	; 176
   212a0:	39 f0       	breq	.+14     	; 0x212b0 <__vector_39+0x120>
   212a2:	e0 f4       	brcc	.+56     	; 0x212dc <__vector_39+0x14c>
   212a4:	80 3a       	cpi	r24, 0xA0	; 160
   212a6:	09 f4       	brne	.+2      	; 0x212aa <__vector_39+0x11a>
   212a8:	79 c0       	rjmp	.+242    	; 0x2139c <__vector_39+0x20c>
   212aa:	88 3a       	cpi	r24, 0xA8	; 168
   212ac:	09 f0       	breq	.+2      	; 0x212b0 <__vector_39+0x120>
   212ae:	99 cf       	rjmp	.-206    	; 0x211e2 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:521

    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
   212b0:	84 e0       	ldi	r24, 0x04	; 4
   212b2:	80 93 3d 13 	sts	0x133D, r24	; 0x80133d <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:523
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
   212b6:	10 92 f3 12 	sts	0x12F3, r1	; 0x8012f3 <twi_txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:525
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
   212ba:	10 92 f2 12 	sts	0x12F2, r1	; 0x8012f2 <twi_txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:528
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
   212be:	e0 91 38 13 	lds	r30, 0x1338	; 0x801338 <twi_onSlaveTransmit>
   212c2:	f0 91 39 13 	lds	r31, 0x1339	; 0x801339 <twi_onSlaveTransmit+0x1>
   212c6:	19 95       	eicall
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:530
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
   212c8:	80 91 f2 12 	lds	r24, 0x12F2	; 0x8012f2 <twi_txBufferLength>
   212cc:	81 11       	cpse	r24, r1
   212ce:	0f c0       	rjmp	.+30     	; 0x212ee <__vector_39+0x15e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:531
        twi_txBufferLength = 1;
   212d0:	81 e0       	ldi	r24, 0x01	; 1
   212d2:	80 93 f2 12 	sts	0x12F2, r24	; 0x8012f2 <twi_txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:532
        twi_txBuffer[0] = 0x00;
   212d6:	10 92 f4 12 	sts	0x12F4, r1	; 0x8012f4 <twi_txBuffer>
   212da:	09 c0       	rjmp	.+18     	; 0x212ee <__vector_39+0x15e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   212dc:	80 3c       	cpi	r24, 0xC0	; 192
   212de:	09 f4       	brne	.+2      	; 0x212e2 <__vector_39+0x152>
   212e0:	76 c0       	rjmp	.+236    	; 0x213ce <__vector_39+0x23e>
   212e2:	88 3c       	cpi	r24, 0xC8	; 200
   212e4:	09 f4       	brne	.+2      	; 0x212e8 <__vector_39+0x158>
   212e6:	73 c0       	rjmp	.+230    	; 0x213ce <__vector_39+0x23e>
   212e8:	88 3b       	cpi	r24, 0xB8	; 184
   212ea:	09 f0       	breq	.+2      	; 0x212ee <__vector_39+0x15e>
   212ec:	7a cf       	rjmp	.-268    	; 0x211e2 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:538
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
   212ee:	e0 91 f3 12 	lds	r30, 0x12F3	; 0x8012f3 <twi_txBufferIndex>
   212f2:	81 e0       	ldi	r24, 0x01	; 1
   212f4:	8e 0f       	add	r24, r30
   212f6:	80 93 f3 12 	sts	0x12F3, r24	; 0x8012f3 <twi_txBufferIndex>
   212fa:	f0 e0       	ldi	r31, 0x00	; 0
   212fc:	ec 50       	subi	r30, 0x0C	; 12
   212fe:	fd 4e       	sbci	r31, 0xED	; 237
   21300:	80 81       	ld	r24, Z
   21302:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:540
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
   21306:	90 91 f3 12 	lds	r25, 0x12F3	; 0x8012f3 <twi_txBufferIndex>
   2130a:	80 91 f2 12 	lds	r24, 0x12F2	; 0x8012f2 <twi_txBufferLength>
   2130e:	29 c0       	rjmp	.+82     	; 0x21362 <__vector_39+0x1d2>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:406
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
   21310:	80 91 3c 13 	lds	r24, 0x133C	; 0x80133c <twi_slarw>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:416
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
   21314:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
   21318:	85 ec       	ldi	r24, 0xC5	; 197
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:359
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
   2131a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   2131e:	61 cf       	rjmp	.-318    	; 0x211e2 <__vector_39+0x52>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:414

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
   21320:	90 91 15 13 	lds	r25, 0x1315	; 0x801315 <twi_masterBufferIndex>
   21324:	80 91 14 13 	lds	r24, 0x1314	; 0x801314 <twi_masterBufferLength>
   21328:	98 17       	cp	r25, r24
   2132a:	58 f5       	brcc	.+86     	; 0x21382 <__vector_39+0x1f2>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:416
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
   2132c:	e0 91 15 13 	lds	r30, 0x1315	; 0x801315 <twi_masterBufferIndex>
   21330:	81 e0       	ldi	r24, 0x01	; 1
   21332:	8e 0f       	add	r24, r30
   21334:	80 93 15 13 	sts	0x1315, r24	; 0x801315 <twi_masterBufferIndex>
   21338:	f0 e0       	ldi	r31, 0x00	; 0
   2133a:	ea 5e       	subi	r30, 0xEA	; 234
   2133c:	fc 4e       	sbci	r31, 0xEC	; 236
   2133e:	80 81       	ld	r24, Z
   21340:	e9 cf       	rjmp	.-46     	; 0x21314 <__vector_39+0x184>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:447
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
   21342:	e0 91 15 13 	lds	r30, 0x1315	; 0x801315 <twi_masterBufferIndex>
   21346:	81 e0       	ldi	r24, 0x01	; 1
   21348:	8e 0f       	add	r24, r30
   2134a:	80 93 15 13 	sts	0x1315, r24	; 0x801315 <twi_masterBufferIndex>
   2134e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
   21352:	f0 e0       	ldi	r31, 0x00	; 0
   21354:	ea 5e       	subi	r30, 0xEA	; 234
   21356:	fc 4e       	sbci	r31, 0xEC	; 236
   21358:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:451
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
   2135a:	90 91 15 13 	lds	r25, 0x1315	; 0x801315 <twi_masterBufferIndex>
   2135e:	80 91 14 13 	lds	r24, 0x1314	; 0x801314 <twi_masterBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:540
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
   21362:	98 17       	cp	r25, r24
   21364:	c8 f2       	brcs	.-78     	; 0x21318 <__vector_39+0x188>
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
   21366:	85 e8       	ldi	r24, 0x85	; 133
   21368:	d8 cf       	rjmp	.-80     	; 0x2131a <__vector_39+0x18a>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:459
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
   2136a:	e0 91 15 13 	lds	r30, 0x1315	; 0x801315 <twi_masterBufferIndex>
   2136e:	81 e0       	ldi	r24, 0x01	; 1
   21370:	8e 0f       	add	r24, r30
   21372:	80 93 15 13 	sts	0x1315, r24	; 0x801315 <twi_masterBufferIndex>
   21376:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
   2137a:	f0 e0       	ldi	r31, 0x00	; 0
   2137c:	ea 5e       	subi	r30, 0xEA	; 234
   2137e:	fc 4e       	sbci	r31, 0xEC	; 236
   21380:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:460
  if (twi_sendStop)
   21382:	80 91 3b 13 	lds	r24, 0x133B	; 0x80133b <twi_sendStop>
   21386:	81 11       	cpse	r24, r1
   21388:	5c cf       	rjmp	.-328    	; 0x21242 <__vector_39+0xb2>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:463
          twi_stop();
  else {
    twi_inRepStart = true;  // we're going to send the START
   2138a:	81 e0       	ldi	r24, 0x01	; 1
   2138c:	80 93 3a 13 	sts	0x133A, r24	; 0x80133a <twi_inRepStart>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:467
    // don't enable the interrupt. We'll generate the start, but we
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
   21390:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
   21392:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:551
    case TW_ST_DATA_NACK: // received nack, we are done
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
   21396:	10 92 3d 13 	sts	0x133D, r1	; 0x80133d <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:552
      break;
   2139a:	23 cf       	rjmp	.-442    	; 0x211e2 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:501
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
   2139c:	0f 94 c2 08 	call	0x21184	; 0x21184 <twi_releaseBus>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:503
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
   213a0:	80 91 d1 12 	lds	r24, 0x12D1	; 0x8012d1 <twi_rxBufferIndex>
   213a4:	80 32       	cpi	r24, 0x20	; 32
   213a6:	30 f4       	brcc	.+12     	; 0x213b4 <__vector_39+0x224>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:504
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
   213a8:	e0 91 d1 12 	lds	r30, 0x12D1	; 0x8012d1 <twi_rxBufferIndex>
   213ac:	f0 e0       	ldi	r31, 0x00	; 0
   213ae:	ee 52       	subi	r30, 0x2E	; 46
   213b0:	fd 4e       	sbci	r31, 0xED	; 237
   213b2:	10 82       	st	Z, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:507
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
   213b4:	60 91 d1 12 	lds	r22, 0x12D1	; 0x8012d1 <twi_rxBufferIndex>
   213b8:	70 e0       	ldi	r23, 0x00	; 0
   213ba:	e0 91 36 13 	lds	r30, 0x1336	; 0x801336 <twi_onSlaveReceive>
   213be:	f0 91 37 13 	lds	r31, 0x1337	; 0x801337 <twi_onSlaveReceive+0x1>
   213c2:	82 ed       	ldi	r24, 0xD2	; 210
   213c4:	92 e1       	ldi	r25, 0x12	; 18
   213c6:	19 95       	eicall
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:509
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
   213c8:	10 92 d1 12 	sts	0x12D1, r1	; 0x8012d1 <twi_rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:510
      break;
   213cc:	0a cf       	rjmp	.-492    	; 0x211e2 <__vector_39+0x52>
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
   213ce:	85 ec       	ldi	r24, 0xC5	; 197
   213d0:	e0 cf       	rjmp	.-64     	; 0x21392 <__vector_39+0x202>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:558

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
   213d2:	10 92 d0 12 	sts	0x12D0, r1	; 0x8012d0 <twi_error>
   213d6:	35 cf       	rjmp	.-406    	; 0x21242 <__vector_39+0xb2>

000213d8 <owWriteBlock(unsigned char, unsigned char*, unsigned char)>:
_Z12owWriteBlockhPhh():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:90
		if(r)
			return r;
	}

	return DS2482_ERR_OK;
}
   213d8:	ff 92       	push	r15
   213da:	0f 93       	push	r16
   213dc:	1f 93       	push	r17
   213de:	cf 93       	push	r28
   213e0:	df 93       	push	r29
   213e2:	f8 2e       	mov	r15, r24
   213e4:	eb 01       	movw	r28, r22
   213e6:	8b 01       	movw	r16, r22
   213e8:	04 0f       	add	r16, r20
   213ea:	11 1d       	adc	r17, r1
   213ec:	c0 17       	cp	r28, r16
   213ee:	d1 07       	cpc	r29, r17
   213f0:	61 f0       	breq	.+24     	; 0x2140a <owWriteBlock(unsigned char, unsigned char*, unsigned char)+0x32>
   213f2:	69 91       	ld	r22, Y+
   213f4:	8f 2d       	mov	r24, r15
   213f6:	0f 94 43 0b 	call	0x21686	; 0x21686 <ds2482owWriteByte(unsigned char, unsigned char)>
   213fa:	88 23       	and	r24, r24
   213fc:	b9 f3       	breq	.-18     	; 0x213ec <owWriteBlock(unsigned char, unsigned char*, unsigned char)+0x14>
   213fe:	df 91       	pop	r29
   21400:	cf 91       	pop	r28
   21402:	1f 91       	pop	r17
   21404:	0f 91       	pop	r16
   21406:	ff 90       	pop	r15
   21408:	08 95       	ret
   2140a:	80 e0       	ldi	r24, 0x00	; 0
   2140c:	f8 cf       	rjmp	.-16     	; 0x213fe <owWriteBlock(unsigned char, unsigned char*, unsigned char)+0x26>

0002140e <owMatchRom(unsigned char, unsigned char*)>:
_Z10owMatchRomhPh():
   2140e:	0f 93       	push	r16
   21410:	1f 93       	push	r17
   21412:	cf 93       	push	r28
   21414:	c8 2f       	mov	r28, r24
   21416:	8b 01       	movw	r16, r22
   21418:	65 e5       	ldi	r22, 0x55	; 85
   2141a:	0f 94 43 0b 	call	0x21686	; 0x21686 <ds2482owWriteByte(unsigned char, unsigned char)>
   2141e:	81 11       	cpse	r24, r1
   21420:	08 c0       	rjmp	.+16     	; 0x21432 <owMatchRom(unsigned char, unsigned char*)+0x24>
   21422:	48 e0       	ldi	r20, 0x08	; 8
   21424:	b8 01       	movw	r22, r16
   21426:	8c 2f       	mov	r24, r28
   21428:	cf 91       	pop	r28
   2142a:	1f 91       	pop	r17
   2142c:	0f 91       	pop	r16
   2142e:	0d 94 ec 09 	jmp	0x213d8	; 0x213d8 <owWriteBlock(unsigned char, unsigned char*, unsigned char)>
   21432:	cf 91       	pop	r28
   21434:	1f 91       	pop	r17
   21436:	0f 91       	pop	r16
   21438:	08 95       	ret

0002143a <owMatchNext(unsigned char, unsigned char*)>:
_Z11owMatchNexthPh():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:123
 * DS2482_ERR_WRITE
 * DS2482_ERR_READ
 * DS2482_ERR_NO_DEVICE
 */
uint8_t owMatchNext(uint8_t ds2482_address, uint8_t *rom)
{
   2143a:	bf 92       	push	r11
   2143c:	cf 92       	push	r12
   2143e:	df 92       	push	r13
   21440:	ef 92       	push	r14
   21442:	ff 92       	push	r15
   21444:	0f 93       	push	r16
   21446:	1f 93       	push	r17
   21448:	cf 93       	push	r28
   2144a:	df 93       	push	r29
   2144c:	1f 92       	push	r1
   2144e:	cd b7       	in	r28, 0x3d	; 61
   21450:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:130
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
	serial_byte_number = 0;

	if(lastDevice)
   21452:	90 91 3e 13 	lds	r25, 0x133E	; 0x80133e <lastDevice>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:131
		return DS2482_ERR_NO_DEVICE;
   21456:	15 e0       	ldi	r17, 0x05	; 5
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:130
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
	serial_byte_number = 0;

	if(lastDevice)
   21458:	91 11       	cpse	r25, r1
   2145a:	12 c0       	rjmp	.+36     	; 0x21480 <owMatchNext(unsigned char, unsigned char*)+0x46>
   2145c:	7b 01       	movw	r14, r22
   2145e:	b8 2e       	mov	r11, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:133
		return DS2482_ERR_NO_DEVICE;

	r = owReset(ds2482_address);
   21460:	0f 94 08 0b 	call	0x21610	; 0x21610 <ds2482owReset(unsigned char)>
   21464:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:134
	if(r)	return r;
   21466:	81 11       	cpse	r24, r1
   21468:	0b c0       	rjmp	.+22     	; 0x21480 <owMatchNext(unsigned char, unsigned char*)+0x46>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:136

	r = owWriteByte(ds2482_address, OW_SEARCH_ROM);
   2146a:	60 ef       	ldi	r22, 0xF0	; 240
   2146c:	8b 2d       	mov	r24, r11
   2146e:	0f 94 43 0b 	call	0x21686	; 0x21686 <ds2482owWriteByte(unsigned char, unsigned char)>
   21472:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:128
{
	uint8_t r, bit_number, last_zero, direction, bit_test, serial_byte_mask, serial_byte_number;
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
	serial_byte_number = 0;
   21474:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:127
uint8_t owMatchNext(uint8_t ds2482_address, uint8_t *rom)
{
	uint8_t r, bit_number, last_zero, direction, bit_test, serial_byte_mask, serial_byte_number;
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
   21476:	01 e0       	ldi	r16, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:125
 * DS2482_ERR_NO_DEVICE
 */
uint8_t owMatchNext(uint8_t ds2482_address, uint8_t *rom)
{
	uint8_t r, bit_number, last_zero, direction, bit_test, serial_byte_mask, serial_byte_number;
	bit_number = 1;
   21478:	dd 24       	eor	r13, r13
   2147a:	d3 94       	inc	r13
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:137

	r = owReset(ds2482_address);
	if(r)	return r;

	r = owWriteByte(ds2482_address, OW_SEARCH_ROM);
	if(r)	return r;
   2147c:	88 23       	and	r24, r24
   2147e:	81 f0       	breq	.+32     	; 0x214a0 <owMatchNext(unsigned char, unsigned char*)+0x66>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:190
	}else
	{
		return DS2482_ERR_NO_DEVICE;
	}
	return DS2482_ERR_OK;
}
   21480:	81 2f       	mov	r24, r17
   21482:	0f 90       	pop	r0
   21484:	df 91       	pop	r29
   21486:	cf 91       	pop	r28
   21488:	1f 91       	pop	r17
   2148a:	0f 91       	pop	r16
   2148c:	ff 90       	pop	r15
   2148e:	ef 90       	pop	r14
   21490:	df 90       	pop	r13
   21492:	cf 90       	pop	r12
   21494:	bf 90       	pop	r11
   21496:	08 95       	ret
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:139
	if(r)	return r;

	r = owWriteByte(ds2482_address, OW_SEARCH_ROM);
	if(r)	return r;
	
	while(serial_byte_number < 8)
   21498:	98 e0       	ldi	r25, 0x08	; 8
   2149a:	c9 16       	cp	r12, r25
   2149c:	09 f4       	brne	.+2      	; 0x214a0 <owMatchNext(unsigned char, unsigned char*)+0x66>
   2149e:	45 c0       	rjmp	.+138    	; 0x2152a <owMatchNext(unsigned char, unsigned char*)+0xf0>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:142
	{
		/* If this discrepancy occurs before the last, use the same bit as we did the last time in this place */
		if(bit_number < lastDiscrepancy)
   214a0:	90 91 3f 13 	lds	r25, 0x133F	; 0x80133f <lastDiscrepancy>
   214a4:	d9 16       	cp	r13, r25
   214a6:	88 f5       	brcc	.+98     	; 0x2150a <owMatchNext(unsigned char, unsigned char*)+0xd0>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:143
			direction = ((rom[serial_byte_number] & serial_byte_mask) > 0);
   214a8:	f7 01       	movw	r30, r14
   214aa:	ec 0d       	add	r30, r12
   214ac:	f1 1d       	adc	r31, r1
   214ae:	80 81       	ld	r24, Z
   214b0:	80 23       	and	r24, r16
   214b2:	91 e0       	ldi	r25, 0x01	; 1
   214b4:	09 f4       	brne	.+2      	; 0x214b8 <owMatchNext(unsigned char, unsigned char*)+0x7e>
   214b6:	90 e0       	ldi	r25, 0x00	; 0
   214b8:	99 83       	std	Y+1, r25	; 0x01
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:148
		else
			/* If same bit as last time, pick 1, else pick 0 */
			direction = (bit_number == lastDiscrepancy);

		r=ds2482owWriteTriplet(ds2482_address, &direction);
   214ba:	be 01       	movw	r22, r28
   214bc:	6f 5f       	subi	r22, 0xFF	; 255
   214be:	7f 4f       	sbci	r23, 0xFF	; 255
   214c0:	8b 2d       	mov	r24, r11
   214c2:	0f 94 81 0b 	call	0x21702	; 0x21702 <ds2482owWriteTriplet(unsigned char, unsigned char*)>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:149
		if(r) return r;
   214c6:	81 11       	cpse	r24, r1
   214c8:	3a c0       	rjmp	.+116    	; 0x2153e <owMatchNext(unsigned char, unsigned char*)+0x104>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:152

		/* Convert direction to bit_test value */
		bit_test = (direction&(DS2482_S_SBR|DS2482_S_TSB)) >> 5;
   214ca:	29 81       	ldd	r18, Y+1	; 0x01
   214cc:	30 e0       	ldi	r19, 0x00	; 0
   214ce:	a9 01       	movw	r20, r18
   214d0:	95 e0       	ldi	r25, 0x05	; 5
   214d2:	55 95       	asr	r21
   214d4:	47 95       	ror	r20
   214d6:	9a 95       	dec	r25
   214d8:	e1 f7       	brne	.-8      	; 0x214d2 <owMatchNext(unsigned char, unsigned char*)+0x98>
   214da:	43 70       	andi	r20, 0x03	; 3
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:153
		direction>>=7;
   214dc:	22 0f       	add	r18, r18
   214de:	23 2f       	mov	r18, r19
   214e0:	22 1f       	adc	r18, r18
   214e2:	33 0b       	sbc	r19, r19
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:154
		if(bit_test == 3)	/* Both bits where 1 */
   214e4:	43 30       	cpi	r20, 0x03	; 3
   214e6:	09 f1       	breq	.+66     	; 0x2152a <owMatchNext(unsigned char, unsigned char*)+0xf0>
   214e8:	ec 2d       	mov	r30, r12
   214ea:	f0 e0       	ldi	r31, 0x00	; 0
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:157
			break;

		if(bit_test == 0)
   214ec:	41 11       	cpse	r20, r1
   214ee:	12 c0       	rjmp	.+36     	; 0x21514 <owMatchNext(unsigned char, unsigned char*)+0xda>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:160
		{
			/* Multiple matches, the DS2482 handled our branching, we brached to direction */ 
			if(!direction)
   214f0:	22 23       	and	r18, r18
   214f2:	c9 f0       	breq	.+50     	; 0x21526 <owMatchNext(unsigned char, unsigned char*)+0xec>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:167
		}
		/* else bit_test > 0 which means the direction was decied automaticly by the DS2482 */

		/* Set or clear the bit in the ROM */
		if(direction)
			rom[serial_byte_number] |= serial_byte_mask;
   214f4:	ee 0d       	add	r30, r14
   214f6:	ff 1d       	adc	r31, r15
   214f8:	90 81       	ld	r25, Z
   214fa:	90 2b       	or	r25, r16
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:169
		else
			rom[serial_byte_number] &= ~serial_byte_mask;
   214fc:	90 83       	st	Z, r25
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:171
			
		bit_number++;
   214fe:	d3 94       	inc	r13
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:172
		serial_byte_mask <<= 1;
   21500:	00 0f       	add	r16, r16
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:174

		if(serial_byte_mask == 0)
   21502:	51 f6       	brne	.-108    	; 0x21498 <owMatchNext(unsigned char, unsigned char*)+0x5e>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:176
		{
			serial_byte_number++;
   21504:	c3 94       	inc	r12
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:177
			serial_byte_mask = 1;
   21506:	01 e0       	ldi	r16, 0x01	; 1
   21508:	c7 cf       	rjmp	.-114    	; 0x21498 <owMatchNext(unsigned char, unsigned char*)+0x5e>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:146
		/* If this discrepancy occurs before the last, use the same bit as we did the last time in this place */
		if(bit_number < lastDiscrepancy)
			direction = ((rom[serial_byte_number] & serial_byte_mask) > 0);
		else
			/* If same bit as last time, pick 1, else pick 0 */
			direction = (bit_number == lastDiscrepancy);
   2150a:	81 e0       	ldi	r24, 0x01	; 1
   2150c:	9d 11       	cpse	r25, r13
   2150e:	80 e0       	ldi	r24, 0x00	; 0
   21510:	89 83       	std	Y+1, r24	; 0x01
   21512:	d3 cf       	rjmp	.-90     	; 0x214ba <owMatchNext(unsigned char, unsigned char*)+0x80>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:166
				last_zero = bit_number;
		}
		/* else bit_test > 0 which means the direction was decied automaticly by the DS2482 */

		/* Set or clear the bit in the ROM */
		if(direction)
   21514:	21 11       	cpse	r18, r1
   21516:	ee cf       	rjmp	.-36     	; 0x214f4 <owMatchNext(unsigned char, unsigned char*)+0xba>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:169
			rom[serial_byte_number] |= serial_byte_mask;
		else
			rom[serial_byte_number] &= ~serial_byte_mask;
   21518:	ee 0d       	add	r30, r14
   2151a:	ff 1d       	adc	r31, r15
   2151c:	90 81       	ld	r25, Z
   2151e:	20 2f       	mov	r18, r16
   21520:	20 95       	com	r18
   21522:	92 23       	and	r25, r18
   21524:	eb cf       	rjmp	.-42     	; 0x214fc <owMatchNext(unsigned char, unsigned char*)+0xc2>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:160
			break;

		if(bit_test == 0)
		{
			/* Multiple matches, the DS2482 handled our branching, we brached to direction */ 
			if(!direction)
   21526:	1d 2d       	mov	r17, r13
   21528:	f7 cf       	rjmp	.-18     	; 0x21518 <owMatchNext(unsigned char, unsigned char*)+0xde>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:181
			serial_byte_number++;
			serial_byte_mask = 1;
		}
	}	/* while */
	
	if(!(bit_number < 65))
   2152a:	90 e4       	ldi	r25, 0x40	; 64
   2152c:	9d 15       	cp	r25, r13
   2152e:	48 f4       	brcc	.+18     	; 0x21542 <owMatchNext(unsigned char, unsigned char*)+0x108>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:183
	{
		lastDiscrepancy = last_zero;
   21530:	10 93 3f 13 	sts	0x133F, r17	; 0x80133f <lastDiscrepancy>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:184
		lastDevice = (lastDiscrepancy == 0);
   21534:	91 e0       	ldi	r25, 0x01	; 1
   21536:	11 11       	cpse	r17, r1
   21538:	90 e0       	ldi	r25, 0x00	; 0
   2153a:	90 93 3e 13 	sts	0x133E, r25	; 0x80133e <lastDevice>
   2153e:	18 2f       	mov	r17, r24
   21540:	9f cf       	rjmp	.-194    	; 0x21480 <owMatchNext(unsigned char, unsigned char*)+0x46>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:187
	}else
	{
		return DS2482_ERR_NO_DEVICE;
   21542:	85 e0       	ldi	r24, 0x05	; 5
   21544:	fc cf       	rjmp	.-8      	; 0x2153e <owMatchNext(unsigned char, unsigned char*)+0x104>

00021546 <owMatchFirst(unsigned char, unsigned char*)>:
_Z12owMatchFirsthPh():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:104
 *
 * Can return anything owMatchLast returns
 */
uint8_t owMatchFirst(uint8_t ds2482_address, uint8_t *rom)
{
	lastDiscrepancy = lastDevice = 0;
   21546:	10 92 3e 13 	sts	0x133E, r1	; 0x80133e <lastDevice>
   2154a:	10 92 3f 13 	sts	0x133F, r1	; 0x80133f <lastDiscrepancy>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:105
	return owMatchNext(ds2482_address, rom);
   2154e:	0d 94 1d 0a 	jmp	0x2143a	; 0x2143a <owMatchNext(unsigned char, unsigned char*)>

00021552 <ds2482reset(unsigned char)>:
_Z11ds2482reseth():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:296
          {
          *config = Wire.read();
          return DS2482_ERR_OK;
          }
        else
          return DS2482_ERR_READ;
   21552:	68 2f       	mov	r22, r24
   21554:	8a e7       	ldi	r24, 0x7A	; 122
   21556:	92 e1       	ldi	r25, 0x12	; 18
   21558:	0f 94 2e 07 	call	0x20e5c	; 0x20e5c <TwoWire::beginTransmission(unsigned char)>
   2155c:	60 ef       	ldi	r22, 0xF0	; 240
   2155e:	70 e0       	ldi	r23, 0x00	; 0
   21560:	8a e7       	ldi	r24, 0x7A	; 122
   21562:	92 e1       	ldi	r25, 0x12	; 18
   21564:	0e 94 92 e5 	call	0x1cb24	; 0x1cb24 <TwoWire::write(int)>
   21568:	8a e7       	ldi	r24, 0x7A	; 122
   2156a:	92 e1       	ldi	r25, 0x12	; 18
   2156c:	0f 94 b6 07 	call	0x20f6c	; 0x20f6c <TwoWire::endTransmission()>
   21570:	81 11       	cpse	r24, r1
   21572:	8a e0       	ldi	r24, 0x0A	; 10
   21574:	08 95       	ret

00021576 <ds2482setReadPointer(unsigned char, unsigned char)>:
_Z20ds2482setReadPointerhh():
   21576:	cf 93       	push	r28
   21578:	c6 2f       	mov	r28, r22
   2157a:	68 2f       	mov	r22, r24
   2157c:	8a e7       	ldi	r24, 0x7A	; 122
   2157e:	92 e1       	ldi	r25, 0x12	; 18
   21580:	0f 94 2e 07 	call	0x20e5c	; 0x20e5c <TwoWire::beginTransmission(unsigned char)>
   21584:	61 ee       	ldi	r22, 0xE1	; 225
   21586:	70 e0       	ldi	r23, 0x00	; 0
   21588:	8a e7       	ldi	r24, 0x7A	; 122
   2158a:	92 e1       	ldi	r25, 0x12	; 18
   2158c:	0e 94 92 e5 	call	0x1cb24	; 0x1cb24 <TwoWire::write(int)>
   21590:	6c 2f       	mov	r22, r28
   21592:	8a e7       	ldi	r24, 0x7A	; 122
   21594:	92 e1       	ldi	r25, 0x12	; 18
   21596:	0f 94 c0 06 	call	0x20d80	; 0x20d80 <TwoWire::write(unsigned char)>
   2159a:	8a e7       	ldi	r24, 0x7A	; 122
   2159c:	92 e1       	ldi	r25, 0x12	; 18
   2159e:	0f 94 b6 07 	call	0x20f6c	; 0x20f6c <TwoWire::endTransmission()>
   215a2:	81 11       	cpse	r24, r1
   215a4:	83 e0       	ldi	r24, 0x03	; 3
   215a6:	cf 91       	pop	r28
   215a8:	08 95       	ret

000215aa <ds2482setConfig(unsigned char, unsigned char)>:
_Z15ds2482setConfighh():
   215aa:	cf 93       	push	r28
   215ac:	c6 2f       	mov	r28, r22
   215ae:	68 2f       	mov	r22, r24
   215b0:	8a e7       	ldi	r24, 0x7A	; 122
   215b2:	92 e1       	ldi	r25, 0x12	; 18
   215b4:	0f 94 2e 07 	call	0x20e5c	; 0x20e5c <TwoWire::beginTransmission(unsigned char)>
   215b8:	62 ed       	ldi	r22, 0xD2	; 210
   215ba:	70 e0       	ldi	r23, 0x00	; 0
   215bc:	8a e7       	ldi	r24, 0x7A	; 122
   215be:	92 e1       	ldi	r25, 0x12	; 18
   215c0:	0e 94 92 e5 	call	0x1cb24	; 0x1cb24 <TwoWire::write(int)>
   215c4:	6c 2f       	mov	r22, r28
   215c6:	8a e7       	ldi	r24, 0x7A	; 122
   215c8:	92 e1       	ldi	r25, 0x12	; 18
   215ca:	0f 94 c0 06 	call	0x20d80	; 0x20d80 <TwoWire::write(unsigned char)>
   215ce:	8a e7       	ldi	r24, 0x7A	; 122
   215d0:	92 e1       	ldi	r25, 0x12	; 18
   215d2:	0f 94 b6 07 	call	0x20f6c	; 0x20f6c <TwoWire::endTransmission()>
   215d6:	81 11       	cpse	r24, r1
   215d8:	83 e0       	ldi	r24, 0x03	; 3
   215da:	cf 91       	pop	r28
   215dc:	08 95       	ret

000215de <ds2482init(unsigned char)>:
_Z10ds2482inith():
   215de:	cf 93       	push	r28
   215e0:	df 93       	push	r29
   215e2:	d8 2f       	mov	r29, r24
   215e4:	68 2f       	mov	r22, r24
   215e6:	8a e7       	ldi	r24, 0x7A	; 122
   215e8:	92 e1       	ldi	r25, 0x12	; 18
   215ea:	0f 94 2e 07 	call	0x20e5c	; 0x20e5c <TwoWire::beginTransmission(unsigned char)>
   215ee:	8a e7       	ldi	r24, 0x7A	; 122
   215f0:	92 e1       	ldi	r25, 0x12	; 18
   215f2:	0f 94 b6 07 	call	0x20f6c	; 0x20f6c <TwoWire::endTransmission()>
   215f6:	c8 2f       	mov	r28, r24
   215f8:	81 11       	cpse	r24, r1
   215fa:	08 c0       	rjmp	.+16     	; 0x2160c <ds2482init(unsigned char)+0x2e>
   215fc:	60 e0       	ldi	r22, 0x00	; 0
   215fe:	8d 2f       	mov	r24, r29
   21600:	0f 94 d5 0a 	call	0x215aa	; 0x215aa <ds2482setConfig(unsigned char, unsigned char)>
   21604:	8c 2f       	mov	r24, r28
   21606:	df 91       	pop	r29
   21608:	cf 91       	pop	r28
   2160a:	08 95       	ret
   2160c:	ca e0       	ldi	r28, 0x0A	; 10
   2160e:	fa cf       	rjmp	.-12     	; 0x21604 <ds2482init(unsigned char)+0x26>

00021610 <ds2482owReset(unsigned char)>:
_Z13ds2482owReseth():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:475
 * DS2482_ERR_WRITE
 * DS2482_ERR_READ
 * DS2482_ERR_NO_DEVICE
 */
uint8_t ds2482owReset(uint8_t address)
{
   21610:	0f 93       	push	r16
   21612:	1f 93       	push	r17
   21614:	cf 93       	push	r28
   21616:	df 93       	push	r29
   21618:	08 2f       	mov	r16, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:493
	i2c_start(address+I2C_WRITE);
	i2c_write(DS2482_C_OWRS);
	i2c_stop();
	*/

	Wire.beginTransmission(address);
   2161a:	68 2f       	mov	r22, r24
   2161c:	8a e7       	ldi	r24, 0x7A	; 122
   2161e:	92 e1       	ldi	r25, 0x12	; 18
   21620:	0f 94 2e 07 	call	0x20e5c	; 0x20e5c <TwoWire::beginTransmission(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:494
        Wire.write(DS2482_C_OWRS);
   21624:	64 eb       	ldi	r22, 0xB4	; 180
   21626:	70 e0       	ldi	r23, 0x00	; 0
   21628:	8a e7       	ldi	r24, 0x7A	; 122
   2162a:	92 e1       	ldi	r25, 0x12	; 18
   2162c:	0e 94 92 e5 	call	0x1cb24	; 0x1cb24 <TwoWire::write(int)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:495
        if (Wire.endTransmission() != I2C_ERROR_OK)
   21630:	8a e7       	ldi	r24, 0x7A	; 122
   21632:	92 e1       	ldi	r25, 0x12	; 18
   21634:	0f 94 b6 07 	call	0x20f6c	; 0x20f6c <TwoWire::endTransmission()>
   21638:	c8 2f       	mov	r28, r24
   2163a:	81 11       	cpse	r24, r1
   2163c:	1b c0       	rjmp	.+54     	; 0x21674 <ds2482owReset(unsigned char)+0x64>
   2163e:	de ef       	ldi	r29, 0xFE	; 254
   21640:	d1 50       	subi	r29, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:520
		//twiReadByte(&byte);
		byte=i2c_readNak();
		i2c_stop();
		*/
		p++;
                if (p>253)
   21642:	f9 f0       	breq	.+62     	; 0x21682 <ds2482owReset(unsigned char)+0x72>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:524
                  return DS2482_ERR_READ;		

		uint8_t cnt = 1;
		Wire.requestFrom(address, cnt);
   21644:	41 e0       	ldi	r20, 0x01	; 1
   21646:	60 2f       	mov	r22, r16
   21648:	8a e7       	ldi	r24, 0x7A	; 122
   2164a:	92 e1       	ldi	r25, 0x12	; 18
   2164c:	0f 94 b0 07 	call	0x20f60	; 0x20f60 <TwoWire::requestFrom(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:525
		if ( Wire.available() >= 1 )
   21650:	8a e7       	ldi	r24, 0x7A	; 122
   21652:	92 e1       	ldi	r25, 0x12	; 18
   21654:	0f 94 60 06 	call	0x20cc0	; 0x20cc0 <TwoWire::available()>
   21658:	18 16       	cp	r1, r24
   2165a:	19 06       	cpc	r1, r25
   2165c:	2c f4       	brge	.+10     	; 0x21668 <ds2482owReset(unsigned char)+0x58>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:526
                   byte = Wire.read();
   2165e:	8a e7       	ldi	r24, 0x7A	; 122
   21660:	92 e1       	ldi	r25, 0x12	; 18
   21662:	0f 94 67 06 	call	0x20cce	; 0x20cce <TwoWire::read()>
   21666:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:528

		if(!(byte & DS2482_S_1WB))
   21668:	10 fd       	sbrc	r17, 0
   2166a:	ea cf       	rjmp	.-44     	; 0x21640 <ds2482owReset(unsigned char)+0x30>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:533
			break;
	}

	/* Check if there is any devices detected */
	if(!(byte & DS2482_S_PPD))
   2166c:	11 fd       	sbrc	r17, 1
   2166e:	03 c0       	rjmp	.+6      	; 0x21676 <ds2482owReset(unsigned char)+0x66>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:534
		return DS2482_ERR_NO_DEVICE;
   21670:	c5 e0       	ldi	r28, 0x05	; 5
   21672:	01 c0       	rjmp	.+2      	; 0x21676 <ds2482owReset(unsigned char)+0x66>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:496
	*/

	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWRS);
        if (Wire.endTransmission() != I2C_ERROR_OK)
          return DS2482_ERR_WRITE;
   21674:	c3 e0       	ldi	r28, 0x03	; 3
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:537
	/* Check if there is any devices detected */
	if(!(byte & DS2482_S_PPD))
		return DS2482_ERR_NO_DEVICE;

	return DS2482_ERR_OK;
}
   21676:	8c 2f       	mov	r24, r28
   21678:	df 91       	pop	r29
   2167a:	cf 91       	pop	r28
   2167c:	1f 91       	pop	r17
   2167e:	0f 91       	pop	r16
   21680:	08 95       	ret
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:521
		byte=i2c_readNak();
		i2c_stop();
		*/
		p++;
                if (p>253)
                  return DS2482_ERR_READ;		
   21682:	c4 e0       	ldi	r28, 0x04	; 4
   21684:	f8 cf       	rjmp	.-16     	; 0x21676 <ds2482owReset(unsigned char)+0x66>

00021686 <ds2482owWriteByte(unsigned char, unsigned char)>:
_Z17ds2482owWriteBytehh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:550
 * DS2482_ERR_START
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 */
uint8_t ds2482owWriteByte(uint8_t address, uint8_t byte)
{
   21686:	0f 93       	push	r16
   21688:	1f 93       	push	r17
   2168a:	cf 93       	push	r28
   2168c:	df 93       	push	r29
   2168e:	08 2f       	mov	r16, r24
   21690:	d6 2f       	mov	r29, r22
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:571
	if(i2c_write(DS2482_C_OWWB)==FALSE){i2c_stop();return DS2482_ERR_WRITE;}
	if(i2c_write(byte)==FALSE){i2c_stop();return DS2482_ERR_WRITE;}
	i2c_stop();
	*/

	Wire.beginTransmission(address);
   21692:	68 2f       	mov	r22, r24
   21694:	8a e7       	ldi	r24, 0x7A	; 122
   21696:	92 e1       	ldi	r25, 0x12	; 18
   21698:	0f 94 2e 07 	call	0x20e5c	; 0x20e5c <TwoWire::beginTransmission(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:572
        Wire.write(DS2482_C_OWWB);
   2169c:	65 ea       	ldi	r22, 0xA5	; 165
   2169e:	70 e0       	ldi	r23, 0x00	; 0
   216a0:	8a e7       	ldi	r24, 0x7A	; 122
   216a2:	92 e1       	ldi	r25, 0x12	; 18
   216a4:	0e 94 92 e5 	call	0x1cb24	; 0x1cb24 <TwoWire::write(int)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:573
	Wire.write(byte);
   216a8:	6d 2f       	mov	r22, r29
   216aa:	8a e7       	ldi	r24, 0x7A	; 122
   216ac:	92 e1       	ldi	r25, 0x12	; 18
   216ae:	0f 94 c0 06 	call	0x20d80	; 0x20d80 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:574
        if (Wire.endTransmission() != I2C_ERROR_OK)
   216b2:	8a e7       	ldi	r24, 0x7A	; 122
   216b4:	92 e1       	ldi	r25, 0x12	; 18
   216b6:	0f 94 b6 07 	call	0x20f6c	; 0x20f6c <TwoWire::endTransmission()>
   216ba:	c8 2f       	mov	r28, r24
   216bc:	81 11       	cpse	r24, r1
   216be:	1d c0       	rjmp	.+58     	; 0x216fa <ds2482owWriteByte(unsigned char, unsigned char)+0x74>
   216c0:	1e ef       	ldi	r17, 0xFE	; 254
   216c2:	11 50       	subi	r17, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:584
	 * Keep reading the status register until the 1WB bit is cleared.
	 */
	while(1)
	{
		p++;
		if (p>253){
   216c4:	e1 f0       	breq	.+56     	; 0x216fe <ds2482owWriteByte(unsigned char, unsigned char)+0x78>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:605
		twiReadByte(&byte);
		i2c_stop();
		*/
		///todo byresit ukazatel
		uint8_t cnt = 1;
                Wire.requestFrom(address, cnt);
   216c6:	41 e0       	ldi	r20, 0x01	; 1
   216c8:	60 2f       	mov	r22, r16
   216ca:	8a e7       	ldi	r24, 0x7A	; 122
   216cc:	92 e1       	ldi	r25, 0x12	; 18
   216ce:	0f 94 b0 07 	call	0x20f60	; 0x20f60 <TwoWire::requestFrom(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:606
                if ( Wire.available() >= 1 )
   216d2:	8a e7       	ldi	r24, 0x7A	; 122
   216d4:	92 e1       	ldi	r25, 0x12	; 18
   216d6:	0f 94 60 06 	call	0x20cc0	; 0x20cc0 <TwoWire::available()>
   216da:	18 16       	cp	r1, r24
   216dc:	19 06       	cpc	r1, r25
   216de:	2c f4       	brge	.+10     	; 0x216ea <ds2482owWriteByte(unsigned char, unsigned char)+0x64>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:607
                   byte = Wire.read();
   216e0:	8a e7       	ldi	r24, 0x7A	; 122
   216e2:	92 e1       	ldi	r25, 0x12	; 18
   216e4:	0f 94 67 06 	call	0x20cce	; 0x20cce <TwoWire::read()>
   216e8:	d8 2f       	mov	r29, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:610


		if(!(byte & DS2482_S_1WB))
   216ea:	d0 fd       	sbrc	r29, 0
   216ec:	ea cf       	rjmp	.-44     	; 0x216c2 <ds2482owWriteByte(unsigned char, unsigned char)+0x3c>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:616
			break;
	}

	
	return DS2482_ERR_OK;
}
   216ee:	8c 2f       	mov	r24, r28
   216f0:	df 91       	pop	r29
   216f2:	cf 91       	pop	r28
   216f4:	1f 91       	pop	r17
   216f6:	0f 91       	pop	r16
   216f8:	08 95       	ret
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:575

	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWWB);
	Wire.write(byte);
        if (Wire.endTransmission() != I2C_ERROR_OK)
          return DS2482_ERR_WRITE;
   216fa:	c3 e0       	ldi	r28, 0x03	; 3
   216fc:	f8 cf       	rjmp	.-16     	; 0x216ee <ds2482owWriteByte(unsigned char, unsigned char)+0x68>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:585
	 */
	while(1)
	{
		p++;
		if (p>253){
			return DS2482_ERR_READ;
   216fe:	c4 e0       	ldi	r28, 0x04	; 4
   21700:	f6 cf       	rjmp	.-20     	; 0x216ee <ds2482owWriteByte(unsigned char, unsigned char)+0x68>

00021702 <ds2482owWriteTriplet(unsigned char, unsigned char*)>:
_Z20ds2482owWriteTriplethPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:645
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 * DS2482_ERR_READ
 */
uint8_t ds2482owWriteTriplet(uint8_t address, uint8_t *direction)
{
   21702:	ff 92       	push	r15
   21704:	0f 93       	push	r16
   21706:	1f 93       	push	r17
   21708:	cf 93       	push	r28
   2170a:	df 93       	push	r29
   2170c:	f8 2e       	mov	r15, r24
   2170e:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:666
	i2c_write(DS2482_C_OWT);
	i2c_write((*direction)?0x80:0x00);
	i2c_stop();
	*/

	Wire.beginTransmission(address);
   21710:	68 2f       	mov	r22, r24
   21712:	8a e7       	ldi	r24, 0x7A	; 122
   21714:	92 e1       	ldi	r25, 0x12	; 18
   21716:	0f 94 2e 07 	call	0x20e5c	; 0x20e5c <TwoWire::beginTransmission(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:667
        Wire.write(DS2482_C_OWT);
   2171a:	68 e7       	ldi	r22, 0x78	; 120
   2171c:	70 e0       	ldi	r23, 0x00	; 0
   2171e:	8a e7       	ldi	r24, 0x7A	; 122
   21720:	92 e1       	ldi	r25, 0x12	; 18
   21722:	0e 94 92 e5 	call	0x1cb24	; 0x1cb24 <TwoWire::write(int)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:668
        Wire.write((*direction)?0x80:0x00);
   21726:	f8 01       	movw	r30, r16
   21728:	80 81       	ld	r24, Z
   2172a:	70 e0       	ldi	r23, 0x00	; 0
   2172c:	60 e0       	ldi	r22, 0x00	; 0
   2172e:	88 23       	and	r24, r24
   21730:	11 f0       	breq	.+4      	; 0x21736 <ds2482owWriteTriplet(unsigned char, unsigned char*)+0x34>
   21732:	60 e8       	ldi	r22, 0x80	; 128
   21734:	70 e0       	ldi	r23, 0x00	; 0
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:668 (discriminator 4)
   21736:	8a e7       	ldi	r24, 0x7A	; 122
   21738:	92 e1       	ldi	r25, 0x12	; 18
   2173a:	0e 94 92 e5 	call	0x1cb24	; 0x1cb24 <TwoWire::write(int)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:669 (discriminator 4)
        if (Wire.endTransmission() != I2C_ERROR_OK)
   2173e:	8a e7       	ldi	r24, 0x7A	; 122
   21740:	92 e1       	ldi	r25, 0x12	; 18
   21742:	0f 94 b6 07 	call	0x20f6c	; 0x20f6c <TwoWire::endTransmission()>
   21746:	c8 2f       	mov	r28, r24
   21748:	81 11       	cpse	r24, r1
   2174a:	21 c0       	rjmp	.+66     	; 0x2178e <ds2482owWriteTriplet(unsigned char, unsigned char*)+0x8c>
   2174c:	de ef       	ldi	r29, 0xFE	; 254
   2174e:	d1 50       	subi	r29, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:679
	 * Keep reading the status register until the 1WB bit is cleared.
	 */
	while(1)
	{
		p++;
		if (p>253)
   21750:	01 f1       	breq	.+64     	; 0x21792 <ds2482owWriteTriplet(unsigned char, unsigned char*)+0x90>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:698
		twiReadByte(direction);
		i2c_stop();
		*/
	
		uint8_t cnt = 1;
                Wire.requestFrom(address, cnt);	
   21752:	41 e0       	ldi	r20, 0x01	; 1
   21754:	6f 2d       	mov	r22, r15
   21756:	8a e7       	ldi	r24, 0x7A	; 122
   21758:	92 e1       	ldi	r25, 0x12	; 18
   2175a:	0f 94 b0 07 	call	0x20f60	; 0x20f60 <TwoWire::requestFrom(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:699
                if ( Wire.available() >= 1 )
   2175e:	8a e7       	ldi	r24, 0x7A	; 122
   21760:	92 e1       	ldi	r25, 0x12	; 18
   21762:	0f 94 60 06 	call	0x20cc0	; 0x20cc0 <TwoWire::available()>
   21766:	18 16       	cp	r1, r24
   21768:	19 06       	cpc	r1, r25
   2176a:	34 f4       	brge	.+12     	; 0x21778 <ds2482owWriteTriplet(unsigned char, unsigned char*)+0x76>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:700
                   *direction = Wire.read();
   2176c:	8a e7       	ldi	r24, 0x7A	; 122
   2176e:	92 e1       	ldi	r25, 0x12	; 18
   21770:	0f 94 67 06 	call	0x20cce	; 0x20cce <TwoWire::read()>
   21774:	f8 01       	movw	r30, r16
   21776:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:702

		if(!((*direction) & DS2482_S_1WB))
   21778:	f8 01       	movw	r30, r16
   2177a:	80 81       	ld	r24, Z
   2177c:	80 fd       	sbrc	r24, 0
   2177e:	e7 cf       	rjmp	.-50     	; 0x2174e <ds2482owWriteTriplet(unsigned char, unsigned char*)+0x4c>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:706
			break;
	}
	return DS2482_ERR_OK;
}
   21780:	8c 2f       	mov	r24, r28
   21782:	df 91       	pop	r29
   21784:	cf 91       	pop	r28
   21786:	1f 91       	pop	r17
   21788:	0f 91       	pop	r16
   2178a:	ff 90       	pop	r15
   2178c:	08 95       	ret
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:670

	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWT);
        Wire.write((*direction)?0x80:0x00);
        if (Wire.endTransmission() != I2C_ERROR_OK)
          return DS2482_ERR_WRITE;
   2178e:	c3 e0       	ldi	r28, 0x03	; 3
   21790:	f7 cf       	rjmp	.-18     	; 0x21780 <ds2482owWriteTriplet(unsigned char, unsigned char*)+0x7e>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:680
	 */
	while(1)
	{
		p++;
		if (p>253)
			return DS2482_ERR_READ;
   21792:	c4 e0       	ldi	r28, 0x04	; 4
   21794:	f5 cf       	rjmp	.-22     	; 0x21780 <ds2482owWriteTriplet(unsigned char, unsigned char*)+0x7e>

00021796 <ds2482owReadByte(unsigned char, unsigned char*)>:
_Z16ds2482owReadBytehPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:720
 * DS2482_ERR_START
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 */
uint8_t ds2482owReadByte(uint8_t address, uint8_t *byte)
{
   21796:	ff 92       	push	r15
   21798:	0f 93       	push	r16
   2179a:	1f 93       	push	r17
   2179c:	cf 93       	push	r28
   2179e:	df 93       	push	r29
   217a0:	d8 2f       	mov	r29, r24
   217a2:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:738
	i2c_start(address+I2C_WRITE);
	i2c_write(DS2482_C_OWRB);
	i2c_stop();
	*/
	
	Wire.beginTransmission(address);
   217a4:	68 2f       	mov	r22, r24
   217a6:	8a e7       	ldi	r24, 0x7A	; 122
   217a8:	92 e1       	ldi	r25, 0x12	; 18
   217aa:	0f 94 2e 07 	call	0x20e5c	; 0x20e5c <TwoWire::beginTransmission(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:739
        Wire.write(DS2482_C_OWRB);
   217ae:	66 e9       	ldi	r22, 0x96	; 150
   217b0:	70 e0       	ldi	r23, 0x00	; 0
   217b2:	8a e7       	ldi	r24, 0x7A	; 122
   217b4:	92 e1       	ldi	r25, 0x12	; 18
   217b6:	0e 94 92 e5 	call	0x1cb24	; 0x1cb24 <TwoWire::write(int)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:740
        if (Wire.endTransmission() != I2C_ERROR_OK)
   217ba:	8a e7       	ldi	r24, 0x7A	; 122
   217bc:	92 e1       	ldi	r25, 0x12	; 18
   217be:	0f 94 b6 07 	call	0x20f6c	; 0x20f6c <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:741
          return DS2482_ERR_WRITE;
   217c2:	c3 e0       	ldi	r28, 0x03	; 3
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:740
	i2c_stop();
	*/
	
	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWRB);
        if (Wire.endTransmission() != I2C_ERROR_OK)
   217c4:	81 11       	cpse	r24, r1
   217c6:	31 c0       	rjmp	.+98     	; 0x2182a <ds2482owReadByte(unsigned char, unsigned char*)+0x94>
   217c8:	ce ef       	ldi	r28, 0xFE	; 254
   217ca:	c1 50       	subi	r28, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:750
	 * Keep reading the status register until the 1WB bit is cleared.
	 */
	while(1)
	{
		p++;
		if (p>253)
   217cc:	a9 f1       	breq	.+106    	; 0x21838 <ds2482owReadByte(unsigned char, unsigned char*)+0xa2>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:770
		//twiReadByte(byte);
		i2c_stop();		
		*/	

		uint8_t cnt = 1;
                Wire.requestFrom(address, cnt);
   217ce:	41 e0       	ldi	r20, 0x01	; 1
   217d0:	6d 2f       	mov	r22, r29
   217d2:	8a e7       	ldi	r24, 0x7A	; 122
   217d4:	92 e1       	ldi	r25, 0x12	; 18
   217d6:	0f 94 b0 07 	call	0x20f60	; 0x20f60 <TwoWire::requestFrom(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:771
                if ( Wire.available() >= 1 )
   217da:	8a e7       	ldi	r24, 0x7A	; 122
   217dc:	92 e1       	ldi	r25, 0x12	; 18
   217de:	0f 94 60 06 	call	0x20cc0	; 0x20cc0 <TwoWire::available()>
   217e2:	18 16       	cp	r1, r24
   217e4:	19 06       	cpc	r1, r25
   217e6:	2c f4       	brge	.+10     	; 0x217f2 <ds2482owReadByte(unsigned char, unsigned char*)+0x5c>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:772
                   t = Wire.read();
   217e8:	8a e7       	ldi	r24, 0x7A	; 122
   217ea:	92 e1       	ldi	r25, 0x12	; 18
   217ec:	0f 94 67 06 	call	0x20cce	; 0x20cce <TwoWire::read()>
   217f0:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:775
		

		if(!(t & DS2482_S_1WB))
   217f2:	f0 fc       	sbrc	r15, 0
   217f4:	ea cf       	rjmp	.-44     	; 0x217ca <ds2482owReadByte(unsigned char, unsigned char*)+0x34>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:780
			break;
	}

	/* Now set read pointer to data register */
	t = ds2482setReadPointer(address, DS2482_P_DATA);
   217f6:	61 ee       	ldi	r22, 0xE1	; 225
   217f8:	8d 2f       	mov	r24, r29
   217fa:	0f 94 bb 0a 	call	0x21576	; 0x21576 <ds2482setReadPointer(unsigned char, unsigned char)>
   217fe:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:781
	if(t)	/* Error? */
   21800:	81 11       	cpse	r24, r1
   21802:	13 c0       	rjmp	.+38     	; 0x2182a <ds2482owReadByte(unsigned char, unsigned char*)+0x94>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:804
	*byte=t;
	i2c_stop();
	*/

	uint8_t cnt = 1;
	Wire.requestFrom(address, cnt);	
   21804:	41 e0       	ldi	r20, 0x01	; 1
   21806:	6d 2f       	mov	r22, r29
   21808:	8a e7       	ldi	r24, 0x7A	; 122
   2180a:	92 e1       	ldi	r25, 0x12	; 18
   2180c:	0f 94 b0 07 	call	0x20f60	; 0x20f60 <TwoWire::requestFrom(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:805
        if ( Wire.available() >= 1 )
   21810:	8a e7       	ldi	r24, 0x7A	; 122
   21812:	92 e1       	ldi	r25, 0x12	; 18
   21814:	0f 94 60 06 	call	0x20cc0	; 0x20cc0 <TwoWire::available()>
   21818:	18 16       	cp	r1, r24
   2181a:	19 06       	cpc	r1, r25
   2181c:	34 f4       	brge	.+12     	; 0x2182a <ds2482owReadByte(unsigned char, unsigned char*)+0x94>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:806
             *byte = Wire.read();	
   2181e:	8a e7       	ldi	r24, 0x7A	; 122
   21820:	92 e1       	ldi	r25, 0x12	; 18
   21822:	0f 94 67 06 	call	0x20cce	; 0x20cce <TwoWire::read()>
   21826:	f8 01       	movw	r30, r16
   21828:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:809

	return DS2482_ERR_OK;
}
   2182a:	8c 2f       	mov	r24, r28
   2182c:	df 91       	pop	r29
   2182e:	cf 91       	pop	r28
   21830:	1f 91       	pop	r17
   21832:	0f 91       	pop	r16
   21834:	ff 90       	pop	r15
   21836:	08 95       	ret
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:751
	 */
	while(1)
	{
		p++;
		if (p>253)
			return DS2482_ERR_READ;
   21838:	c4 e0       	ldi	r28, 0x04	; 4
   2183a:	f7 cf       	rjmp	.-18     	; 0x2182a <ds2482owReadByte(unsigned char, unsigned char*)+0x94>

0002183c <NTPClient::NTPClient(UDP&)>:
_ZN9NTPClientC2ER3UDP():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:177
  this->_timeOffset     = timeOffset;
}

void NTPClient::setUpdateInterval(unsigned long updateInterval) {
  this->_updateInterval = updateInterval;
}
   2183c:	fc 01       	movw	r30, r24
   2183e:	12 82       	std	Z+2, r1	; 0x02
   21840:	88 eb       	ldi	r24, 0xB8	; 184
   21842:	99 e0       	ldi	r25, 0x09	; 9
   21844:	94 83       	std	Z+4, r25	; 0x04
   21846:	83 83       	std	Z+3, r24	; 0x03
   21848:	89 e3       	ldi	r24, 0x39	; 57
   2184a:	95 e0       	ldi	r25, 0x05	; 5
   2184c:	96 83       	std	Z+6, r25	; 0x06
   2184e:	85 83       	std	Z+5, r24	; 0x05
   21850:	17 82       	std	Z+7, r1	; 0x07
   21852:	10 86       	std	Z+8, r1	; 0x08
   21854:	11 86       	std	Z+9, r1	; 0x09
   21856:	12 86       	std	Z+10, r1	; 0x0a
   21858:	80 e6       	ldi	r24, 0x60	; 96
   2185a:	9a ee       	ldi	r25, 0xEA	; 234
   2185c:	a0 e0       	ldi	r26, 0x00	; 0
   2185e:	b0 e0       	ldi	r27, 0x00	; 0
   21860:	83 87       	std	Z+11, r24	; 0x0b
   21862:	94 87       	std	Z+12, r25	; 0x0c
   21864:	a5 87       	std	Z+13, r26	; 0x0d
   21866:	b6 87       	std	Z+14, r27	; 0x0e
   21868:	17 86       	std	Z+15, r1	; 0x0f
   2186a:	10 8a       	std	Z+16, r1	; 0x10
   2186c:	11 8a       	std	Z+17, r1	; 0x11
   2186e:	12 8a       	std	Z+18, r1	; 0x12
   21870:	13 8a       	std	Z+19, r1	; 0x13
   21872:	14 8a       	std	Z+20, r1	; 0x14
   21874:	15 8a       	std	Z+21, r1	; 0x15
   21876:	16 8a       	std	Z+22, r1	; 0x16
   21878:	71 83       	std	Z+1, r23	; 0x01
   2187a:	60 83       	st	Z, r22
   2187c:	08 95       	ret

0002187e <NTPClient::begin(int)>:
_ZN9NTPClient5beginEi():
   2187e:	cf 93       	push	r28
   21880:	df 93       	push	r29
   21882:	ec 01       	movw	r28, r24
   21884:	7e 83       	std	Y+6, r23	; 0x06
   21886:	6d 83       	std	Y+5, r22	; 0x05
   21888:	88 81       	ld	r24, Y
   2188a:	99 81       	ldd	r25, Y+1	; 0x01
   2188c:	dc 01       	movw	r26, r24
   2188e:	ed 91       	ld	r30, X+
   21890:	fc 91       	ld	r31, X
   21892:	06 84       	ldd	r0, Z+14	; 0x0e
   21894:	f7 85       	ldd	r31, Z+15	; 0x0f
   21896:	e0 2d       	mov	r30, r0
   21898:	19 95       	eicall
   2189a:	81 e0       	ldi	r24, 0x01	; 1
   2189c:	8a 83       	std	Y+2, r24	; 0x02
   2189e:	df 91       	pop	r29
   218a0:	cf 91       	pop	r28
   218a2:	08 95       	ret

000218a4 <NTPClient::begin()>:
_ZN9NTPClient5beginEv():
   218a4:	69 e3       	ldi	r22, 0x39	; 57
   218a6:	75 e0       	ldi	r23, 0x05	; 5
   218a8:	0d 94 3f 0c 	jmp	0x2187e	; 0x2187e <NTPClient::begin(int)>

000218ac <NTPClient::getEpochTime() const>:
_ZNK9NTPClient12getEpochTimeEv():
   218ac:	cf 92       	push	r12
   218ae:	df 92       	push	r13
   218b0:	ef 92       	push	r14
   218b2:	ff 92       	push	r15
   218b4:	0f 93       	push	r16
   218b6:	1f 93       	push	r17
   218b8:	cf 93       	push	r28
   218ba:	df 93       	push	r29
   218bc:	ec 01       	movw	r28, r24
   218be:	cf 80       	ldd	r12, Y+7	; 0x07
   218c0:	d8 84       	ldd	r13, Y+8	; 0x08
   218c2:	e9 84       	ldd	r14, Y+9	; 0x09
   218c4:	fa 84       	ldd	r15, Y+10	; 0x0a
   218c6:	8f 85       	ldd	r24, Y+15	; 0x0f
   218c8:	98 89       	ldd	r25, Y+16	; 0x10
   218ca:	a9 89       	ldd	r26, Y+17	; 0x11
   218cc:	ba 89       	ldd	r27, Y+18	; 0x12
   218ce:	c8 0e       	add	r12, r24
   218d0:	d9 1e       	adc	r13, r25
   218d2:	ea 1e       	adc	r14, r26
   218d4:	fb 1e       	adc	r15, r27
   218d6:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   218da:	0b 89       	ldd	r16, Y+19	; 0x13
   218dc:	1c 89       	ldd	r17, Y+20	; 0x14
   218de:	2d 89       	ldd	r18, Y+21	; 0x15
   218e0:	3e 89       	ldd	r19, Y+22	; 0x16
   218e2:	60 1b       	sub	r22, r16
   218e4:	71 0b       	sbc	r23, r17
   218e6:	82 0b       	sbc	r24, r18
   218e8:	93 0b       	sbc	r25, r19
   218ea:	28 ee       	ldi	r18, 0xE8	; 232
   218ec:	33 e0       	ldi	r19, 0x03	; 3
   218ee:	40 e0       	ldi	r20, 0x00	; 0
   218f0:	50 e0       	ldi	r21, 0x00	; 0
   218f2:	0f 94 5d 16 	call	0x22cba	; 0x22cba <__udivmodsi4>
   218f6:	ca 01       	movw	r24, r20
   218f8:	b9 01       	movw	r22, r18
   218fa:	6c 0d       	add	r22, r12
   218fc:	7d 1d       	adc	r23, r13
   218fe:	8e 1d       	adc	r24, r14
   21900:	9f 1d       	adc	r25, r15
   21902:	df 91       	pop	r29
   21904:	cf 91       	pop	r28
   21906:	1f 91       	pop	r17
   21908:	0f 91       	pop	r16
   2190a:	ff 90       	pop	r15
   2190c:	ef 90       	pop	r14
   2190e:	df 90       	pop	r13
   21910:	cf 90       	pop	r12
   21912:	08 95       	ret

00021914 <NTPClient::getYear() const>:
_ZNK9NTPClient7getYearEv():
   21914:	cf 93       	push	r28
   21916:	df 93       	push	r29
   21918:	00 d0       	rcall	.+0      	; 0x2191a <NTPClient::getYear() const+0x6>
   2191a:	1f 92       	push	r1
   2191c:	cd b7       	in	r28, 0x3d	; 61
   2191e:	de b7       	in	r29, 0x3e	; 62
   21920:	0f 94 56 0c 	call	0x218ac	; 0x218ac <NTPClient::getEpochTime() const>
   21924:	69 83       	std	Y+1, r22	; 0x01
   21926:	7a 83       	std	Y+2, r23	; 0x02
   21928:	8b 83       	std	Y+3, r24	; 0x03
   2192a:	9c 83       	std	Y+4, r25	; 0x04
   2192c:	ce 01       	movw	r24, r28
   2192e:	01 96       	adiw	r24, 0x01	; 1
   21930:	0e 94 dd 47 	call	0x8fba	; 0x8fba <localtime>
   21934:	fc 01       	movw	r30, r24
   21936:	86 81       	ldd	r24, Z+6	; 0x06
   21938:	97 81       	ldd	r25, Z+7	; 0x07
   2193a:	82 5b       	subi	r24, 0xB2	; 178
   2193c:	98 4f       	sbci	r25, 0xF8	; 248
   2193e:	0f 90       	pop	r0
   21940:	0f 90       	pop	r0
   21942:	0f 90       	pop	r0
   21944:	0f 90       	pop	r0
   21946:	df 91       	pop	r29
   21948:	cf 91       	pop	r28
   2194a:	08 95       	ret

0002194c <NTPClient::getMonth() const>:
_ZNK9NTPClient8getMonthEv():
   2194c:	cf 93       	push	r28
   2194e:	df 93       	push	r29
   21950:	00 d0       	rcall	.+0      	; 0x21952 <NTPClient::getMonth() const+0x6>
   21952:	1f 92       	push	r1
   21954:	cd b7       	in	r28, 0x3d	; 61
   21956:	de b7       	in	r29, 0x3e	; 62
   21958:	0f 94 56 0c 	call	0x218ac	; 0x218ac <NTPClient::getEpochTime() const>
   2195c:	69 83       	std	Y+1, r22	; 0x01
   2195e:	7a 83       	std	Y+2, r23	; 0x02
   21960:	8b 83       	std	Y+3, r24	; 0x03
   21962:	9c 83       	std	Y+4, r25	; 0x04
   21964:	ce 01       	movw	r24, r28
   21966:	01 96       	adiw	r24, 0x01	; 1
   21968:	0e 94 dd 47 	call	0x8fba	; 0x8fba <localtime>
   2196c:	fc 01       	movw	r30, r24
   2196e:	85 81       	ldd	r24, Z+5	; 0x05
   21970:	08 2e       	mov	r0, r24
   21972:	00 0c       	add	r0, r0
   21974:	99 0b       	sbc	r25, r25
   21976:	01 96       	adiw	r24, 0x01	; 1
   21978:	0f 90       	pop	r0
   2197a:	0f 90       	pop	r0
   2197c:	0f 90       	pop	r0
   2197e:	0f 90       	pop	r0
   21980:	df 91       	pop	r29
   21982:	cf 91       	pop	r28
   21984:	08 95       	ret

00021986 <NTPClient::getDate() const>:
_ZNK9NTPClient7getDateEv():
   21986:	cf 93       	push	r28
   21988:	df 93       	push	r29
   2198a:	00 d0       	rcall	.+0      	; 0x2198c <NTPClient::getDate() const+0x6>
   2198c:	1f 92       	push	r1
   2198e:	cd b7       	in	r28, 0x3d	; 61
   21990:	de b7       	in	r29, 0x3e	; 62
   21992:	0f 94 56 0c 	call	0x218ac	; 0x218ac <NTPClient::getEpochTime() const>
   21996:	69 83       	std	Y+1, r22	; 0x01
   21998:	7a 83       	std	Y+2, r23	; 0x02
   2199a:	8b 83       	std	Y+3, r24	; 0x03
   2199c:	9c 83       	std	Y+4, r25	; 0x04
   2199e:	ce 01       	movw	r24, r28
   219a0:	01 96       	adiw	r24, 0x01	; 1
   219a2:	0e 94 dd 47 	call	0x8fba	; 0x8fba <localtime>
   219a6:	fc 01       	movw	r30, r24
   219a8:	83 81       	ldd	r24, Z+3	; 0x03
   219aa:	08 2e       	mov	r0, r24
   219ac:	00 0c       	add	r0, r0
   219ae:	99 0b       	sbc	r25, r25
   219b0:	0f 90       	pop	r0
   219b2:	0f 90       	pop	r0
   219b4:	0f 90       	pop	r0
   219b6:	0f 90       	pop	r0
   219b8:	df 91       	pop	r29
   219ba:	cf 91       	pop	r28
   219bc:	08 95       	ret

000219be <NTPClient::getHours() const>:
_ZNK9NTPClient8getHoursEv():
   219be:	0f 94 56 0c 	call	0x218ac	; 0x218ac <NTPClient::getEpochTime() const>
   219c2:	20 e8       	ldi	r18, 0x80	; 128
   219c4:	31 e5       	ldi	r19, 0x51	; 81
   219c6:	41 e0       	ldi	r20, 0x01	; 1
   219c8:	50 e0       	ldi	r21, 0x00	; 0
   219ca:	0f 94 5d 16 	call	0x22cba	; 0x22cba <__udivmodsi4>
   219ce:	20 e1       	ldi	r18, 0x10	; 16
   219d0:	3e e0       	ldi	r19, 0x0E	; 14
   219d2:	40 e0       	ldi	r20, 0x00	; 0
   219d4:	50 e0       	ldi	r21, 0x00	; 0
   219d6:	0f 94 5d 16 	call	0x22cba	; 0x22cba <__udivmodsi4>
   219da:	c9 01       	movw	r24, r18
   219dc:	08 95       	ret

000219de <NTPClient::getMinutes() const>:
_ZNK9NTPClient10getMinutesEv():
   219de:	0f 94 56 0c 	call	0x218ac	; 0x218ac <NTPClient::getEpochTime() const>
   219e2:	20 e1       	ldi	r18, 0x10	; 16
   219e4:	3e e0       	ldi	r19, 0x0E	; 14
   219e6:	40 e0       	ldi	r20, 0x00	; 0
   219e8:	50 e0       	ldi	r21, 0x00	; 0
   219ea:	0f 94 5d 16 	call	0x22cba	; 0x22cba <__udivmodsi4>
   219ee:	2c e3       	ldi	r18, 0x3C	; 60
   219f0:	30 e0       	ldi	r19, 0x00	; 0
   219f2:	40 e0       	ldi	r20, 0x00	; 0
   219f4:	50 e0       	ldi	r21, 0x00	; 0
   219f6:	0f 94 5d 16 	call	0x22cba	; 0x22cba <__udivmodsi4>
   219fa:	c9 01       	movw	r24, r18
   219fc:	08 95       	ret

000219fe <NTPClient::getSeconds() const>:
_ZNK9NTPClient10getSecondsEv():
   219fe:	0f 94 56 0c 	call	0x218ac	; 0x218ac <NTPClient::getEpochTime() const>
   21a02:	2c e3       	ldi	r18, 0x3C	; 60
   21a04:	30 e0       	ldi	r19, 0x00	; 0
   21a06:	40 e0       	ldi	r20, 0x00	; 0
   21a08:	50 e0       	ldi	r21, 0x00	; 0
   21a0a:	0f 94 5d 16 	call	0x22cba	; 0x22cba <__udivmodsi4>
   21a0e:	cb 01       	movw	r24, r22
   21a10:	08 95       	ret

00021a12 <NTPClient::end()>:
_ZN9NTPClient3endEv():
   21a12:	cf 93       	push	r28
   21a14:	df 93       	push	r29
   21a16:	ec 01       	movw	r28, r24
   21a18:	88 81       	ld	r24, Y
   21a1a:	99 81       	ldd	r25, Y+1	; 0x01
   21a1c:	dc 01       	movw	r26, r24
   21a1e:	ed 91       	ld	r30, X+
   21a20:	fc 91       	ld	r31, X
   21a22:	02 88       	ldd	r0, Z+18	; 0x12
   21a24:	f3 89       	ldd	r31, Z+19	; 0x13
   21a26:	e0 2d       	mov	r30, r0
   21a28:	19 95       	eicall
   21a2a:	1a 82       	std	Y+2, r1	; 0x02
   21a2c:	df 91       	pop	r29
   21a2e:	cf 91       	pop	r28
   21a30:	08 95       	ret

00021a32 <NTPClient::setTimeOffset(int)>:
_ZN9NTPClient13setTimeOffsetEi():
   21a32:	ab 01       	movw	r20, r22
   21a34:	77 0f       	add	r23, r23
   21a36:	66 0b       	sbc	r22, r22
   21a38:	77 0b       	sbc	r23, r23
   21a3a:	fc 01       	movw	r30, r24
   21a3c:	47 83       	std	Z+7, r20	; 0x07
   21a3e:	50 87       	std	Z+8, r21	; 0x08
   21a40:	61 87       	std	Z+9, r22	; 0x09
   21a42:	72 87       	std	Z+10, r23	; 0x0a
   21a44:	08 95       	ret

00021a46 <NTPClient::setPoolServerName(char const*)>:
_ZN9NTPClient17setPoolServerNameEPKc():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:180

void NTPClient::setPoolServerName(const char* poolServerName) {
    this->_poolServerName = poolServerName;
   21a46:	fc 01       	movw	r30, r24
   21a48:	74 83       	std	Z+4, r23	; 0x04
   21a4a:	63 83       	std	Z+3, r22	; 0x03
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:181
}
   21a4c:	08 95       	ret

00021a4e <NTPClient::sendNTPPacket()>:
_ZN9NTPClient13sendNTPPacketEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:183

void NTPClient::sendNTPPacket() {
   21a4e:	cf 93       	push	r28
   21a50:	df 93       	push	r29
   21a52:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:185
  // set all bytes in the buffer to 0
  memset(this->_packetBuffer, 0, NTP_PACKET_SIZE);
   21a54:	fc 01       	movw	r30, r24
   21a56:	7b 96       	adiw	r30, 0x1b	; 27
   21a58:	8c e2       	ldi	r24, 0x2C	; 44
   21a5a:	df 01       	movw	r26, r30
   21a5c:	1d 92       	st	X+, r1
   21a5e:	8a 95       	dec	r24
   21a60:	e9 f7       	brne	.-6      	; 0x21a5c <NTPClient::sendNTPPacket()+0xe>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:188
  // Initialize values needed to form NTP request
  // (see URL above for details on the packets)
  this->_packetBuffer[0] = 0b11100011;   // LI, Version, Mode
   21a62:	83 ee       	ldi	r24, 0xE3	; 227
   21a64:	8f 8b       	std	Y+23, r24	; 0x17
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:189
  this->_packetBuffer[1] = 0;     // Stratum, or type of clock
   21a66:	18 8e       	std	Y+24, r1	; 0x18
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:190
  this->_packetBuffer[2] = 6;     // Polling Interval
   21a68:	86 e0       	ldi	r24, 0x06	; 6
   21a6a:	89 8f       	std	Y+25, r24	; 0x19
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:191
  this->_packetBuffer[3] = 0xEC;  // Peer Clock Precision
   21a6c:	8c ee       	ldi	r24, 0xEC	; 236
   21a6e:	8a 8f       	std	Y+26, r24	; 0x1a
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:193
  // 8 bytes of zero for Root Delay & Root Dispersion
  this->_packetBuffer[12]  = 49;
   21a70:	81 e3       	ldi	r24, 0x31	; 49
   21a72:	8b a3       	std	Y+35, r24	; 0x23
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:194
  this->_packetBuffer[13]  = 0x4E;
   21a74:	9e e4       	ldi	r25, 0x4E	; 78
   21a76:	9c a3       	std	Y+36, r25	; 0x24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:195
  this->_packetBuffer[14]  = 49;
   21a78:	8d a3       	std	Y+37, r24	; 0x25
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:196
  this->_packetBuffer[15]  = 52;
   21a7a:	84 e3       	ldi	r24, 0x34	; 52
   21a7c:	8e a3       	std	Y+38, r24	; 0x26
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:200

  // all NTP fields have been given values, now
  // you can send a packet requesting a timestamp:
  this->_udp->beginPacket(this->_poolServerName, 123); //NTP requests are to port 123
   21a7e:	88 81       	ld	r24, Y
   21a80:	99 81       	ldd	r25, Y+1	; 0x01
   21a82:	6b 81       	ldd	r22, Y+3	; 0x03
   21a84:	7c 81       	ldd	r23, Y+4	; 0x04
   21a86:	dc 01       	movw	r26, r24
   21a88:	ed 91       	ld	r30, X+
   21a8a:	fc 91       	ld	r31, X
   21a8c:	06 88       	ldd	r0, Z+22	; 0x16
   21a8e:	f7 89       	ldd	r31, Z+23	; 0x17
   21a90:	e0 2d       	mov	r30, r0
   21a92:	4b e7       	ldi	r20, 0x7B	; 123
   21a94:	50 e0       	ldi	r21, 0x00	; 0
   21a96:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:201
  this->_udp->write(this->_packetBuffer, NTP_PACKET_SIZE);
   21a98:	88 81       	ld	r24, Y
   21a9a:	99 81       	ldd	r25, Y+1	; 0x01
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:185
    this->_poolServerName = poolServerName;
}

void NTPClient::sendNTPPacket() {
  // set all bytes in the buffer to 0
  memset(this->_packetBuffer, 0, NTP_PACKET_SIZE);
   21a9c:	be 01       	movw	r22, r28
   21a9e:	69 5e       	subi	r22, 0xE9	; 233
   21aa0:	7f 4f       	sbci	r23, 0xFF	; 255
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:201
  this->_packetBuffer[15]  = 52;

  // all NTP fields have been given values, now
  // you can send a packet requesting a timestamp:
  this->_udp->beginPacket(this->_poolServerName, 123); //NTP requests are to port 123
  this->_udp->write(this->_packetBuffer, NTP_PACKET_SIZE);
   21aa2:	dc 01       	movw	r26, r24
   21aa4:	ed 91       	ld	r30, X+
   21aa6:	fc 91       	ld	r31, X
   21aa8:	02 80       	ldd	r0, Z+2	; 0x02
   21aaa:	f3 81       	ldd	r31, Z+3	; 0x03
   21aac:	e0 2d       	mov	r30, r0
   21aae:	40 e3       	ldi	r20, 0x30	; 48
   21ab0:	50 e0       	ldi	r21, 0x00	; 0
   21ab2:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:202
  this->_udp->endPacket();
   21ab4:	88 81       	ld	r24, Y
   21ab6:	99 81       	ldd	r25, Y+1	; 0x01
   21ab8:	dc 01       	movw	r26, r24
   21aba:	ed 91       	ld	r30, X+
   21abc:	fc 91       	ld	r31, X
   21abe:	00 8c       	ldd	r0, Z+24	; 0x18
   21ac0:	f1 8d       	ldd	r31, Z+25	; 0x19
   21ac2:	e0 2d       	mov	r30, r0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:203
}
   21ac4:	df 91       	pop	r29
   21ac6:	cf 91       	pop	r28
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:202

  // all NTP fields have been given values, now
  // you can send a packet requesting a timestamp:
  this->_udp->beginPacket(this->_poolServerName, 123); //NTP requests are to port 123
  this->_udp->write(this->_packetBuffer, NTP_PACKET_SIZE);
  this->_udp->endPacket();
   21ac8:	19 94       	eijmp

00021aca <NTPClient::forceUpdate()>:
_ZN9NTPClient11forceUpdateEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:64
  this->_udp->begin(this->_port);

  this->_udpSetup = true;
}

bool NTPClient::forceUpdate() {
   21aca:	0f 93       	push	r16
   21acc:	1f 93       	push	r17
   21ace:	cf 93       	push	r28
   21ad0:	df 93       	push	r29
   21ad2:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:69
  #ifdef DEBUG_NTPClient
    Serial.println("Update from NTP Server");
  #endif

  this->sendNTPPacket();
   21ad4:	0f 94 27 0d 	call	0x21a4e	; 0x21a4e <NTPClient::sendNTPPacket()>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:72

  // Wait till data is there or timeout...
  byte timeout = 0;
   21ad8:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:75
  int cb = 0;
  do {
    delay ( 10 );
   21ada:	6a e0       	ldi	r22, 0x0A	; 10
   21adc:	70 e0       	ldi	r23, 0x00	; 0
   21ade:	80 e0       	ldi	r24, 0x00	; 0
   21ae0:	90 e0       	ldi	r25, 0x00	; 0
   21ae2:	0f 94 33 0f 	call	0x21e66	; 0x21e66 <delay>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:76
    cb = this->_udp->parsePacket();
   21ae6:	88 81       	ld	r24, Y
   21ae8:	99 81       	ldd	r25, Y+1	; 0x01
   21aea:	dc 01       	movw	r26, r24
   21aec:	ed 91       	ld	r30, X+
   21aee:	fc 91       	ld	r31, X
   21af0:	02 8c       	ldd	r0, Z+26	; 0x1a
   21af2:	f3 8d       	ldd	r31, Z+27	; 0x1b
   21af4:	e0 2d       	mov	r30, r0
   21af6:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:77
    if (timeout > 100) return false; // timeout after 1000 ms
   21af8:	15 36       	cpi	r17, 0x65	; 101
   21afa:	09 f4       	brne	.+2      	; 0x21afe <NTPClient::forceUpdate()+0x34>
   21afc:	59 c0       	rjmp	.+178    	; 0x21bb0 <NTPClient::forceUpdate()+0xe6>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:78
    timeout++;
   21afe:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:79
  } while (cb == 0);
   21b00:	89 2b       	or	r24, r25
   21b02:	59 f3       	breq	.-42     	; 0x21ada <NTPClient::forceUpdate()+0x10>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:81

  this->_lastUpdate = millis() - (10 * (timeout + 1)); // Account for delay in reading the time
   21b04:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   21b08:	21 2f       	mov	r18, r17
   21b0a:	30 e0       	ldi	r19, 0x00	; 0
   21b0c:	a9 01       	movw	r20, r18
   21b0e:	4f 5f       	subi	r20, 0xFF	; 255
   21b10:	5f 4f       	sbci	r21, 0xFF	; 255
   21b12:	ea e0       	ldi	r30, 0x0A	; 10
   21b14:	e4 9f       	mul	r30, r20
   21b16:	90 01       	movw	r18, r0
   21b18:	e5 9f       	mul	r30, r21
   21b1a:	30 0d       	add	r19, r0
   21b1c:	11 24       	eor	r1, r1
   21b1e:	89 01       	movw	r16, r18
   21b20:	33 0f       	add	r19, r19
   21b22:	22 0b       	sbc	r18, r18
   21b24:	33 0b       	sbc	r19, r19
   21b26:	ab 01       	movw	r20, r22
   21b28:	bc 01       	movw	r22, r24
   21b2a:	40 1b       	sub	r20, r16
   21b2c:	51 0b       	sbc	r21, r17
   21b2e:	62 0b       	sbc	r22, r18
   21b30:	73 0b       	sbc	r23, r19
   21b32:	4b 8b       	std	Y+19, r20	; 0x13
   21b34:	5c 8b       	std	Y+20, r21	; 0x14
   21b36:	6d 8b       	std	Y+21, r22	; 0x15
   21b38:	7e 8b       	std	Y+22, r23	; 0x16
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:83

  this->_udp->read(this->_packetBuffer, NTP_PACKET_SIZE);
   21b3a:	88 81       	ld	r24, Y
   21b3c:	99 81       	ldd	r25, Y+1	; 0x01
   21b3e:	be 01       	movw	r22, r28
   21b40:	69 5e       	subi	r22, 0xE9	; 233
   21b42:	7f 4f       	sbci	r23, 0xFF	; 255
   21b44:	dc 01       	movw	r26, r24
   21b46:	ed 91       	ld	r30, X+
   21b48:	fc 91       	ld	r31, X
   21b4a:	04 8c       	ldd	r0, Z+28	; 0x1c
   21b4c:	f5 8d       	ldd	r31, Z+29	; 0x1d
   21b4e:	e0 2d       	mov	r30, r0
   21b50:	40 e3       	ldi	r20, 0x30	; 48
   21b52:	50 e0       	ldi	r21, 0x00	; 0
   21b54:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:85

  unsigned long highWord = word(this->_packetBuffer[40], this->_packetBuffer[41]);
   21b56:	fe 01       	movw	r30, r28
   21b58:	e0 5c       	subi	r30, 0xC0	; 192
   21b5a:	ff 4f       	sbci	r31, 0xFF	; 255
   21b5c:	60 81       	ld	r22, Z
   21b5e:	8f ad       	ldd	r24, Y+63	; 0x3f
   21b60:	0f 94 3e 13 	call	0x2267c	; 0x2267c <makeWord(unsigned char, unsigned char)>
   21b64:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:86
  unsigned long lowWord = word(this->_packetBuffer[42], this->_packetBuffer[43]);
   21b66:	de 01       	movw	r26, r28
   21b68:	ae 5b       	subi	r26, 0xBE	; 190
   21b6a:	bf 4f       	sbci	r27, 0xFF	; 255
   21b6c:	fe 01       	movw	r30, r28
   21b6e:	ef 5b       	subi	r30, 0xBF	; 191
   21b70:	ff 4f       	sbci	r31, 0xFF	; 255
   21b72:	6c 91       	ld	r22, X
   21b74:	80 81       	ld	r24, Z
   21b76:	0f 94 3e 13 	call	0x2267c	; 0x2267c <makeWord(unsigned char, unsigned char)>
   21b7a:	ac 01       	movw	r20, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:85

  this->_lastUpdate = millis() - (10 * (timeout + 1)); // Account for delay in reading the time

  this->_udp->read(this->_packetBuffer, NTP_PACKET_SIZE);

  unsigned long highWord = word(this->_packetBuffer[40], this->_packetBuffer[41]);
   21b7c:	c8 01       	movw	r24, r16
   21b7e:	b0 e0       	ldi	r27, 0x00	; 0
   21b80:	a0 e0       	ldi	r26, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:89
  unsigned long lowWord = word(this->_packetBuffer[42], this->_packetBuffer[43]);
  // combine the four bytes (two words) into a long integer
  // this is NTP time (seconds since Jan 1 1900):
  unsigned long secsSince1900 = highWord << 16 | lowWord;
   21b82:	dc 01       	movw	r26, r24
   21b84:	99 27       	eor	r25, r25
   21b86:	88 27       	eor	r24, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:86
  this->_lastUpdate = millis() - (10 * (timeout + 1)); // Account for delay in reading the time

  this->_udp->read(this->_packetBuffer, NTP_PACKET_SIZE);

  unsigned long highWord = word(this->_packetBuffer[40], this->_packetBuffer[41]);
  unsigned long lowWord = word(this->_packetBuffer[42], this->_packetBuffer[43]);
   21b88:	70 e0       	ldi	r23, 0x00	; 0
   21b8a:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:89
  // combine the four bytes (two words) into a long integer
  // this is NTP time (seconds since Jan 1 1900):
  unsigned long secsSince1900 = highWord << 16 | lowWord;
   21b8c:	84 2b       	or	r24, r20
   21b8e:	95 2b       	or	r25, r21
   21b90:	a6 2b       	or	r26, r22
   21b92:	b7 2b       	or	r27, r23
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:91

  this->_currentEpoc = secsSince1900 - SEVENZYYEARS;
   21b94:	80 58       	subi	r24, 0x80	; 128
   21b96:	9e 47       	sbci	r25, 0x7E	; 126
   21b98:	aa 4a       	sbci	r26, 0xAA	; 170
   21b9a:	b3 48       	sbci	r27, 0x83	; 131
   21b9c:	8f 87       	std	Y+15, r24	; 0x0f
   21b9e:	98 8b       	std	Y+16, r25	; 0x10
   21ba0:	a9 8b       	std	Y+17, r26	; 0x11
   21ba2:	ba 8b       	std	Y+18, r27	; 0x12
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:93

  return true;
   21ba4:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:94
}
   21ba6:	df 91       	pop	r29
   21ba8:	cf 91       	pop	r28
   21baa:	1f 91       	pop	r17
   21bac:	0f 91       	pop	r16
   21bae:	08 95       	ret
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:77
  byte timeout = 0;
  int cb = 0;
  do {
    delay ( 10 );
    cb = this->_udp->parsePacket();
    if (timeout > 100) return false; // timeout after 1000 ms
   21bb0:	80 e0       	ldi	r24, 0x00	; 0
   21bb2:	f9 cf       	rjmp	.-14     	; 0x21ba6 <NTPClient::forceUpdate()+0xdc>

00021bb4 <NTPClient::update()>:
_ZN9NTPClient6updateEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:96
  this->_currentEpoc = secsSince1900 - SEVENZYYEARS;

  return true;
}

bool NTPClient::update() {
   21bb4:	cf 92       	push	r12
   21bb6:	df 92       	push	r13
   21bb8:	ef 92       	push	r14
   21bba:	ff 92       	push	r15
   21bbc:	0f 93       	push	r16
   21bbe:	1f 93       	push	r17
   21bc0:	cf 93       	push	r28
   21bc2:	df 93       	push	r29
   21bc4:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:97
  if ((millis() - this->_lastUpdate >= this->_updateInterval)     // Update after _updateInterval
   21bc6:	0f 94 02 0f 	call	0x21e04	; 0x21e04 <millis>
   21bca:	0b 89       	ldd	r16, Y+19	; 0x13
   21bcc:	1c 89       	ldd	r17, Y+20	; 0x14
   21bce:	2d 89       	ldd	r18, Y+21	; 0x15
   21bd0:	3e 89       	ldd	r19, Y+22	; 0x16
   21bd2:	60 1b       	sub	r22, r16
   21bd4:	71 0b       	sbc	r23, r17
   21bd6:	82 0b       	sbc	r24, r18
   21bd8:	93 0b       	sbc	r25, r19
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:98
    || this->_lastUpdate == 0) {                                // Update if there was no update yet.
   21bda:	cb 84       	ldd	r12, Y+11	; 0x0b
   21bdc:	dc 84       	ldd	r13, Y+12	; 0x0c
   21bde:	ed 84       	ldd	r14, Y+13	; 0x0d
   21be0:	fe 84       	ldd	r15, Y+14	; 0x0e
   21be2:	6c 15       	cp	r22, r12
   21be4:	7d 05       	cpc	r23, r13
   21be6:	8e 05       	cpc	r24, r14
   21be8:	9f 05       	cpc	r25, r15
   21bea:	20 f4       	brcc	.+8      	; 0x21bf4 <NTPClient::update()+0x40>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:98 (discriminator 2)
   21bec:	01 2b       	or	r16, r17
   21bee:	02 2b       	or	r16, r18
   21bf0:	03 2b       	or	r16, r19
   21bf2:	89 f4       	brne	.+34     	; 0x21c16 <NTPClient::update()+0x62>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:99
    if (!this->_udpSetup) this->begin();                         // setup the UDP client if needed
   21bf4:	8a 81       	ldd	r24, Y+2	; 0x02
   21bf6:	81 11       	cpse	r24, r1
   21bf8:	03 c0       	rjmp	.+6      	; 0x21c00 <NTPClient::update()+0x4c>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:99 (discriminator 1)
   21bfa:	ce 01       	movw	r24, r28
   21bfc:	0f 94 52 0c 	call	0x218a4	; 0x218a4 <NTPClient::begin()>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:100
    return this->forceUpdate();
   21c00:	ce 01       	movw	r24, r28
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:103
  }
  return true;
}
   21c02:	df 91       	pop	r29
   21c04:	cf 91       	pop	r28
   21c06:	1f 91       	pop	r17
   21c08:	0f 91       	pop	r16
   21c0a:	ff 90       	pop	r15
   21c0c:	ef 90       	pop	r14
   21c0e:	df 90       	pop	r13
   21c10:	cf 90       	pop	r12
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:100

bool NTPClient::update() {
  if ((millis() - this->_lastUpdate >= this->_updateInterval)     // Update after _updateInterval
    || this->_lastUpdate == 0) {                                // Update if there was no update yet.
    if (!this->_udpSetup) this->begin();                         // setup the UDP client if needed
    return this->forceUpdate();
   21c12:	0d 94 65 0d 	jmp	0x21aca	; 0x21aca <NTPClient::forceUpdate()>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:103
  }
  return true;
}
   21c16:	81 e0       	ldi	r24, 0x01	; 1
   21c18:	df 91       	pop	r29
   21c1a:	cf 91       	pop	r28
   21c1c:	1f 91       	pop	r17
   21c1e:	0f 91       	pop	r16
   21c20:	ff 90       	pop	r15
   21c22:	ef 90       	pop	r14
   21c24:	df 90       	pop	r13
   21c26:	cf 90       	pop	r12
   21c28:	08 95       	ret

00021c2a <_GLOBAL__sub_I__ZN9NTPClientC2ER3UDP>:
_GLOBAL__sub_I__ZN9NTPClientC2ER3UDP():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:203
  // all NTP fields have been given values, now
  // you can send a packet requesting a timestamp:
  this->_udp->beginPacket(this->_poolServerName, 123); //NTP requests are to port 123
  this->_udp->write(this->_packetBuffer, NTP_PACKET_SIZE);
  this->_udp->endPacket();
}
   21c2a:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
   21c2c:	00 e0       	ldi	r16, 0x00	; 0
   21c2e:	20 e0       	ldi	r18, 0x00	; 0
   21c30:	40 e0       	ldi	r20, 0x00	; 0
   21c32:	60 e0       	ldi	r22, 0x00	; 0
   21c34:	80 e4       	ldi	r24, 0x40	; 64
   21c36:	93 e1       	ldi	r25, 0x13	; 19
   21c38:	0f 94 7a 12 	call	0x224f4	; 0x224f4 <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_GLOBAL__sub_I__ZN9NTPClientC2ER3UDP():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:203
   21c3c:	0f 91       	pop	r16
   21c3e:	08 95       	ret

00021c40 <a2d_handler(void (*)(unsigned char, unsigned int))>:
_Z11a2d_handlerPFvhjE():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:53
/// deinicializace a2d prevodniku ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void deinit_a2d(void)
{
ADCSRA = 0;
ADMUX = 0;
}
   21c40:	90 93 47 13 	sts	0x1347, r25	; 0x801347 <a2d_interupt_func+0x1>
   21c44:	80 93 46 13 	sts	0x1346, r24	; 0x801346 <a2d_interupt_func>
   21c48:	08 95       	ret

00021c4a <init_a2d(unsigned char, unsigned char, unsigned char)>:
_Z8init_a2dhhh():
   21c4a:	80 93 4a 13 	sts	0x134A, r24	; 0x80134a <a2d_enable>
   21c4e:	40 93 49 13 	sts	0x1349, r20	; 0x801349 <a2d_reference>
   21c52:	60 93 48 13 	sts	0x1348, r22	; 0x801348 <a2d_delicka>
   21c56:	10 92 4b 13 	sts	0x134B, r1	; 0x80134b <a2d_index>
   21c5a:	10 92 4e 13 	sts	0x134E, r1	; 0x80134e <a2d_input>
   21c5e:	10 92 4d 13 	sts	0x134D, r1	; 0x80134d <a2d_data+0x1>
   21c62:	10 92 4c 13 	sts	0x134C, r1	; 0x80134c <a2d_data>
   21c66:	67 70       	andi	r22, 0x07	; 7
   21c68:	68 57       	subi	r22, 0x78	; 120
   21c6a:	60 93 7a 00 	sts	0x007A, r22	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
   21c6e:	ec e7       	ldi	r30, 0x7C	; 124
   21c70:	f0 e0       	ldi	r31, 0x00	; 0
   21c72:	10 82       	st	Z, r1
   21c74:	80 91 49 13 	lds	r24, 0x1349	; 0x801349 <a2d_reference>
   21c78:	20 e4       	ldi	r18, 0x40	; 64
   21c7a:	82 9f       	mul	r24, r18
   21c7c:	c0 01       	movw	r24, r0
   21c7e:	11 24       	eor	r1, r1
   21c80:	80 83       	st	Z, r24
   21c82:	08 95       	ret

00021c84 <a2d_start_first(unsigned char)>:
_Z15a2d_start_firsth():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:58


void a2d_start_first(uint8_t vstup)
{
ADMUX = ((a2d_reference & 3) << 6) + (vstup & 7);
   21c84:	90 91 49 13 	lds	r25, 0x1349	; 0x801349 <a2d_reference>
   21c88:	40 e4       	ldi	r20, 0x40	; 64
   21c8a:	94 9f       	mul	r25, r20
   21c8c:	90 01       	movw	r18, r0
   21c8e:	11 24       	eor	r1, r1
   21c90:	98 2f       	mov	r25, r24
   21c92:	97 70       	andi	r25, 0x07	; 7
   21c94:	92 0f       	add	r25, r18
   21c96:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:59
a2d_input = vstup;
   21c9a:	80 93 4e 13 	sts	0x134E, r24	; 0x80134e <a2d_input>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:60
sbi(ADCSRA, ADSC);
   21c9e:	ea e7       	ldi	r30, 0x7A	; 122
   21ca0:	f0 e0       	ldi	r31, 0x00	; 0
   21ca2:	80 81       	ld	r24, Z
   21ca4:	80 64       	ori	r24, 0x40	; 64
   21ca6:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:61
}
   21ca8:	08 95       	ret

00021caa <a2d_start_process()>:
_Z17a2d_start_processv():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:70
uint8_t start = 0;
uint8_t v = 0;
for(uint8_t i = 0; i < 8; i++)	
	{
	v = (1 << i);
	if ( (a2d_enable & v) != 0 ) 
   21caa:	30 91 4a 13 	lds	r19, 0x134A	; 0x80134a <a2d_enable>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:71
		if ( (a2d_index & v) == 0) 
   21cae:	20 91 4b 13 	lds	r18, 0x134B	; 0x80134b <a2d_index>
   21cb2:	90 e0       	ldi	r25, 0x00	; 0
   21cb4:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:69
{
uint8_t start = 0;
uint8_t v = 0;
for(uint8_t i = 0; i < 8; i++)	
	{
	v = (1 << i);
   21cb6:	61 e0       	ldi	r22, 0x01	; 1
   21cb8:	70 e0       	ldi	r23, 0x00	; 0
   21cba:	ab 01       	movw	r20, r22
   21cbc:	08 2e       	mov	r0, r24
   21cbe:	01 c0       	rjmp	.+2      	; 0x21cc2 <a2d_start_process()+0x18>
   21cc0:	44 0f       	add	r20, r20
   21cc2:	0a 94       	dec	r0
   21cc4:	ea f7       	brpl	.-6      	; 0x21cc0 <a2d_start_process()+0x16>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:70
	if ( (a2d_enable & v) != 0 ) 
   21cc6:	e3 2f       	mov	r30, r19
   21cc8:	e4 23       	and	r30, r20
   21cca:	41 f0       	breq	.+16     	; 0x21cdc <a2d_start_process()+0x32>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:71
		if ( (a2d_index & v) == 0) 
   21ccc:	e2 2f       	mov	r30, r18
   21cce:	e4 23       	and	r30, r20
   21cd0:	29 f4       	brne	.+10     	; 0x21cdc <a2d_start_process()+0x32>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:73
			{
			sbi(a2d_index, i);
   21cd2:	24 2b       	or	r18, r20
   21cd4:	20 93 4b 13 	sts	0x134B, r18	; 0x80134b <a2d_index>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:74
			a2d_start_first(i);
   21cd8:	0d 94 42 0e 	jmp	0x21c84	; 0x21c84 <a2d_start_first(unsigned char)>
   21cdc:	01 96       	adiw	r24, 0x01	; 1
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:67 (discriminator 2)
/////////////funkce a2d prevodniku, automaticka spousteni mereni////////////////////////////////////////////////////////
void a2d_start_process(void)
{
uint8_t start = 0;
uint8_t v = 0;
for(uint8_t i = 0; i < 8; i++)	
   21cde:	88 30       	cpi	r24, 0x08	; 8
   21ce0:	91 05       	cpc	r25, r1
   21ce2:	59 f7       	brne	.-42     	; 0x21cba <a2d_start_process()+0x10>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:83
	}

//// pokud jsem jiz zmeril vsechny, tak jedu od zacatku
if (start == 0)
	{
	a2d_index = 0;
   21ce4:	10 92 4b 13 	sts	0x134B, r1	; 0x80134b <a2d_index>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:86
	//a2d_complete_funkce();
	}
}
   21ce8:	08 95       	ret

00021cea <a2d_done()>:
_Z8a2d_donev():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:92
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t a2d_done(void)
{
  return a2d_index;
}
   21cea:	80 91 4b 13 	lds	r24, 0x134B	; 0x80134b <a2d_index>
   21cee:	08 95       	ret

00021cf0 <__vector_29>:
__vector_29():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:95

ISR(ADC_vect)
{
   21cf0:	1f 92       	push	r1
   21cf2:	0f 92       	push	r0
   21cf4:	0f b6       	in	r0, 0x3f	; 63
   21cf6:	0f 92       	push	r0
   21cf8:	11 24       	eor	r1, r1
   21cfa:	0b b6       	in	r0, 0x3b	; 59
   21cfc:	0f 92       	push	r0
   21cfe:	2f 93       	push	r18
   21d00:	3f 93       	push	r19
   21d02:	4f 93       	push	r20
   21d04:	5f 93       	push	r21
   21d06:	6f 93       	push	r22
   21d08:	7f 93       	push	r23
   21d0a:	8f 93       	push	r24
   21d0c:	9f 93       	push	r25
   21d0e:	af 93       	push	r26
   21d10:	bf 93       	push	r27
   21d12:	cf 93       	push	r28
   21d14:	ef 93       	push	r30
   21d16:	ff 93       	push	r31
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:96
  uint8_t back = SREG;
   21d18:	cf b7       	in	r28, 0x3f	; 63
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:97
  a2d_data = ADCL + (ADCH<<8);
   21d1a:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
   21d1e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
   21d22:	68 2f       	mov	r22, r24
   21d24:	70 e0       	ldi	r23, 0x00	; 0
   21d26:	76 2f       	mov	r23, r22
   21d28:	66 27       	eor	r22, r22
   21d2a:	69 0f       	add	r22, r25
   21d2c:	71 1d       	adc	r23, r1
   21d2e:	70 93 4d 13 	sts	0x134D, r23	; 0x80134d <a2d_data+0x1>
   21d32:	60 93 4c 13 	sts	0x134C, r22	; 0x80134c <a2d_data>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:98
  a2d_interupt_func(a2d_input, a2d_data);
   21d36:	e0 91 46 13 	lds	r30, 0x1346	; 0x801346 <a2d_interupt_func>
   21d3a:	f0 91 47 13 	lds	r31, 0x1347	; 0x801347 <a2d_interupt_func+0x1>
   21d3e:	80 91 4e 13 	lds	r24, 0x134E	; 0x80134e <a2d_input>
   21d42:	19 95       	eicall
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:99
  SREG = back;
   21d44:	cf bf       	out	0x3f, r28	; 63
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:100
}
   21d46:	ff 91       	pop	r31
   21d48:	ef 91       	pop	r30
   21d4a:	cf 91       	pop	r28
   21d4c:	bf 91       	pop	r27
   21d4e:	af 91       	pop	r26
   21d50:	9f 91       	pop	r25
   21d52:	8f 91       	pop	r24
   21d54:	7f 91       	pop	r23
   21d56:	6f 91       	pop	r22
   21d58:	5f 91       	pop	r21
   21d5a:	4f 91       	pop	r20
   21d5c:	3f 91       	pop	r19
   21d5e:	2f 91       	pop	r18
   21d60:	0f 90       	pop	r0
   21d62:	0b be       	out	0x3b, r0	; 59
   21d64:	0f 90       	pop	r0
   21d66:	0f be       	out	0x3f, r0	; 63
   21d68:	0f 90       	pop	r0
   21d6a:	1f 90       	pop	r1
   21d6c:	18 95       	reti

00021d6e <yield>:
__empty():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
   21d6e:	08 95       	ret

00021d70 <__vector_23>:
__vector_23():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
   21d70:	1f 92       	push	r1
   21d72:	0f 92       	push	r0
   21d74:	0f b6       	in	r0, 0x3f	; 63
   21d76:	0f 92       	push	r0
   21d78:	11 24       	eor	r1, r1
   21d7a:	2f 93       	push	r18
   21d7c:	3f 93       	push	r19
   21d7e:	8f 93       	push	r24
   21d80:	9f 93       	push	r25
   21d82:	af 93       	push	r26
   21d84:	bf 93       	push	r27
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
   21d86:	80 91 54 13 	lds	r24, 0x1354	; 0x801354 <timer0_millis>
   21d8a:	90 91 55 13 	lds	r25, 0x1355	; 0x801355 <timer0_millis+0x1>
   21d8e:	a0 91 56 13 	lds	r26, 0x1356	; 0x801356 <timer0_millis+0x2>
   21d92:	b0 91 57 13 	lds	r27, 0x1357	; 0x801357 <timer0_millis+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
   21d96:	30 91 53 13 	lds	r19, 0x1353	; 0x801353 <timer0_fract>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
   21d9a:	23 e0       	ldi	r18, 0x03	; 3
   21d9c:	23 0f       	add	r18, r19
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
   21d9e:	2d 37       	cpi	r18, 0x7D	; 125
   21da0:	68 f1       	brcs	.+90     	; 0x21dfc <__vector_23+0x8c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
   21da2:	26 e8       	ldi	r18, 0x86	; 134
   21da4:	23 0f       	add	r18, r19
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
   21da6:	02 96       	adiw	r24, 0x02	; 2
   21da8:	a1 1d       	adc	r26, r1
   21daa:	b1 1d       	adc	r27, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
   21dac:	20 93 53 13 	sts	0x1353, r18	; 0x801353 <timer0_fract>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
   21db0:	80 93 54 13 	sts	0x1354, r24	; 0x801354 <timer0_millis>
   21db4:	90 93 55 13 	sts	0x1355, r25	; 0x801355 <timer0_millis+0x1>
   21db8:	a0 93 56 13 	sts	0x1356, r26	; 0x801356 <timer0_millis+0x2>
   21dbc:	b0 93 57 13 	sts	0x1357, r27	; 0x801357 <timer0_millis+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
   21dc0:	80 91 4f 13 	lds	r24, 0x134F	; 0x80134f <timer0_overflow_count>
   21dc4:	90 91 50 13 	lds	r25, 0x1350	; 0x801350 <timer0_overflow_count+0x1>
   21dc8:	a0 91 51 13 	lds	r26, 0x1351	; 0x801351 <timer0_overflow_count+0x2>
   21dcc:	b0 91 52 13 	lds	r27, 0x1352	; 0x801352 <timer0_overflow_count+0x3>
   21dd0:	01 96       	adiw	r24, 0x01	; 1
   21dd2:	a1 1d       	adc	r26, r1
   21dd4:	b1 1d       	adc	r27, r1
   21dd6:	80 93 4f 13 	sts	0x134F, r24	; 0x80134f <timer0_overflow_count>
   21dda:	90 93 50 13 	sts	0x1350, r25	; 0x801350 <timer0_overflow_count+0x1>
   21dde:	a0 93 51 13 	sts	0x1351, r26	; 0x801351 <timer0_overflow_count+0x2>
   21de2:	b0 93 52 13 	sts	0x1352, r27	; 0x801352 <timer0_overflow_count+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:213
#endif
}
   21de6:	bf 91       	pop	r27
   21de8:	af 91       	pop	r26
   21dea:	9f 91       	pop	r25
   21dec:	8f 91       	pop	r24
   21dee:	3f 91       	pop	r19
   21df0:	2f 91       	pop	r18
   21df2:	0f 90       	pop	r0
   21df4:	0f be       	out	0x3f, r0	; 63
   21df6:	0f 90       	pop	r0
   21df8:	1f 90       	pop	r1
   21dfa:	18 95       	reti
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
   21dfc:	01 96       	adiw	r24, 0x01	; 1
   21dfe:	a1 1d       	adc	r26, r1
   21e00:	b1 1d       	adc	r27, r1
   21e02:	d4 cf       	rjmp	.-88     	; 0x21dac <__vector_23+0x3c>

00021e04 <millis>:
millis():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
   21e04:	2f b7       	in	r18, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
   21e06:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
   21e08:	60 91 54 13 	lds	r22, 0x1354	; 0x801354 <timer0_millis>
   21e0c:	70 91 55 13 	lds	r23, 0x1355	; 0x801355 <timer0_millis+0x1>
   21e10:	80 91 56 13 	lds	r24, 0x1356	; 0x801356 <timer0_millis+0x2>
   21e14:	90 91 57 13 	lds	r25, 0x1357	; 0x801357 <timer0_millis+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
   21e18:	2f bf       	out	0x3f, r18	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:227

  return m;
}
   21e1a:	08 95       	ret

00021e1c <micros>:
micros():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
   21e1c:	3f b7       	in	r19, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
   21e1e:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
   21e20:	80 91 4f 13 	lds	r24, 0x134F	; 0x80134f <timer0_overflow_count>
   21e24:	90 91 50 13 	lds	r25, 0x1350	; 0x801350 <timer0_overflow_count+0x1>
   21e28:	a0 91 51 13 	lds	r26, 0x1351	; 0x801351 <timer0_overflow_count+0x2>
   21e2c:	b0 91 52 13 	lds	r27, 0x1352	; 0x801352 <timer0_overflow_count+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
   21e30:	26 b5       	in	r18, 0x26	; 38
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
   21e32:	a8 9b       	sbis	0x15, 0	; 21
   21e34:	05 c0       	rjmp	.+10     	; 0x21e40 <micros+0x24>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:261 (discriminator 1)
   21e36:	2f 3f       	cpi	r18, 0xFF	; 255
   21e38:	19 f0       	breq	.+6      	; 0x21e40 <micros+0x24>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
   21e3a:	01 96       	adiw	r24, 0x01	; 1
   21e3c:	a1 1d       	adc	r26, r1
   21e3e:	b1 1d       	adc	r27, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
   21e40:	3f bf       	out	0x3f, r19	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
   21e42:	ba 2f       	mov	r27, r26
   21e44:	a9 2f       	mov	r26, r25
   21e46:	98 2f       	mov	r25, r24
   21e48:	88 27       	eor	r24, r24
   21e4a:	bc 01       	movw	r22, r24
   21e4c:	cd 01       	movw	r24, r26
   21e4e:	62 0f       	add	r22, r18
   21e50:	71 1d       	adc	r23, r1
   21e52:	81 1d       	adc	r24, r1
   21e54:	91 1d       	adc	r25, r1
   21e56:	42 e0       	ldi	r20, 0x02	; 2
   21e58:	66 0f       	add	r22, r22
   21e5a:	77 1f       	adc	r23, r23
   21e5c:	88 1f       	adc	r24, r24
   21e5e:	99 1f       	adc	r25, r25
   21e60:	4a 95       	dec	r20
   21e62:	d1 f7       	brne	.-12     	; 0x21e58 <micros+0x3c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
   21e64:	08 95       	ret

00021e66 <delay>:
delay():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
   21e66:	8f 92       	push	r8
   21e68:	9f 92       	push	r9
   21e6a:	af 92       	push	r10
   21e6c:	bf 92       	push	r11
   21e6e:	cf 92       	push	r12
   21e70:	df 92       	push	r13
   21e72:	ef 92       	push	r14
   21e74:	ff 92       	push	r15
   21e76:	6b 01       	movw	r12, r22
   21e78:	7c 01       	movw	r14, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
   21e7a:	0f 94 0e 0f 	call	0x21e1c	; 0x21e1c <micros>
   21e7e:	4b 01       	movw	r8, r22
   21e80:	5c 01       	movw	r10, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:399

  while (ms > 0UL) {
   21e82:	c1 14       	cp	r12, r1
   21e84:	d1 04       	cpc	r13, r1
   21e86:	e1 04       	cpc	r14, r1
   21e88:	f1 04       	cpc	r15, r1
   21e8a:	e9 f0       	breq	.+58     	; 0x21ec6 <delay+0x60>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:400
    yield();
   21e8c:	0f 94 b7 0e 	call	0x21d6e	; 0x21d6e <yield>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:401 (discriminator 1)
    while (ms > 0UL && (micros() - start) >= 1000UL) {
   21e90:	0f 94 0e 0f 	call	0x21e1c	; 0x21e1c <micros>
   21e94:	68 19       	sub	r22, r8
   21e96:	79 09       	sbc	r23, r9
   21e98:	8a 09       	sbc	r24, r10
   21e9a:	9b 09       	sbc	r25, r11
   21e9c:	68 3e       	cpi	r22, 0xE8	; 232
   21e9e:	73 40       	sbci	r23, 0x03	; 3
   21ea0:	81 05       	cpc	r24, r1
   21ea2:	91 05       	cpc	r25, r1
   21ea4:	70 f3       	brcs	.-36     	; 0x21e82 <delay+0x1c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:402
      ms--;
   21ea6:	21 e0       	ldi	r18, 0x01	; 1
   21ea8:	c2 1a       	sub	r12, r18
   21eaa:	d1 08       	sbc	r13, r1
   21eac:	e1 08       	sbc	r14, r1
   21eae:	f1 08       	sbc	r15, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:403
      start += 1000UL;
   21eb0:	88 ee       	ldi	r24, 0xE8	; 232
   21eb2:	88 0e       	add	r8, r24
   21eb4:	83 e0       	ldi	r24, 0x03	; 3
   21eb6:	98 1e       	adc	r9, r24
   21eb8:	a1 1c       	adc	r10, r1
   21eba:	b1 1c       	adc	r11, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
   21ebc:	c1 14       	cp	r12, r1
   21ebe:	d1 04       	cpc	r13, r1
   21ec0:	e1 04       	cpc	r14, r1
   21ec2:	f1 04       	cpc	r15, r1
   21ec4:	29 f7       	brne	.-54     	; 0x21e90 <delay+0x2a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
   21ec6:	ff 90       	pop	r15
   21ec8:	ef 90       	pop	r14
   21eca:	df 90       	pop	r13
   21ecc:	cf 90       	pop	r12
   21ece:	bf 90       	pop	r11
   21ed0:	af 90       	pop	r10
   21ed2:	9f 90       	pop	r9
   21ed4:	8f 90       	pop	r8
   21ed6:	08 95       	ret

00021ed8 <delayMicroseconds>:
delayMicroseconds():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:619
  us -= 7; // = 2 cycles

#elif F_CPU >= 16000000L
  // for a one-microsecond delay, simply return.  the overhead
  // of the function call takes 14 (16) cycles, which is 1 us
  if (us <= 1) return; //  = 3 cycles, (4 when true)
   21ed8:	82 30       	cpi	r24, 0x02	; 2
   21eda:	91 05       	cpc	r25, r1
   21edc:	38 f0       	brcs	.+14     	; 0x21eec <delayMicroseconds+0x14>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:624

  // the following loop takes 1/4 of a microsecond (4 cycles)
  // per iteration, so execute it four times for each microsecond of
  // delay requested.
  us <<= 2; // x4 us, = 4 cycles
   21ede:	88 0f       	add	r24, r24
   21ee0:	99 1f       	adc	r25, r25
   21ee2:	88 0f       	add	r24, r24
   21ee4:	99 1f       	adc	r25, r25
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:629

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // to 2nd us is at least 8 so we can substract 5
  us -= 5; // = 2 cycles,
   21ee6:	05 97       	sbiw	r24, 0x05	; 5
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
   21ee8:	01 97       	sbiw	r24, 0x01	; 1
   21eea:	f1 f7       	brne	.-4      	; 0x21ee8 <delayMicroseconds+0x10>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
   21eec:	08 95       	ret

00021eee <init>:
init():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
   21eee:	78 94       	sei
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
   21ef0:	84 b5       	in	r24, 0x24	; 36
   21ef2:	83 60       	ori	r24, 0x03	; 3
   21ef4:	84 bd       	out	0x24, r24	; 36
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
   21ef6:	85 b5       	in	r24, 0x25	; 37
   21ef8:	83 60       	ori	r24, 0x03	; 3
   21efa:	85 bd       	out	0x25, r24	; 37
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
   21efc:	ee e6       	ldi	r30, 0x6E	; 110
   21efe:	f0 e0       	ldi	r31, 0x00	; 0
   21f00:	80 81       	ld	r24, Z
   21f02:	81 60       	ori	r24, 0x01	; 1
   21f04:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
   21f06:	e1 e8       	ldi	r30, 0x81	; 129
   21f08:	f0 e0       	ldi	r31, 0x00	; 0
   21f0a:	82 e0       	ldi	r24, 0x02	; 2
   21f0c:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
   21f0e:	80 81       	ld	r24, Z
   21f10:	81 60       	ori	r24, 0x01	; 1
   21f12:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
   21f14:	e0 e8       	ldi	r30, 0x80	; 128
   21f16:	f0 e0       	ldi	r31, 0x00	; 0
   21f18:	80 81       	ld	r24, Z
   21f1a:	81 60       	ori	r24, 0x01	; 1
   21f1c:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
   21f1e:	e1 eb       	ldi	r30, 0xB1	; 177
   21f20:	f0 e0       	ldi	r31, 0x00	; 0
   21f22:	80 81       	ld	r24, Z
   21f24:	84 60       	ori	r24, 0x04	; 4
   21f26:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
   21f28:	e0 eb       	ldi	r30, 0xB0	; 176
   21f2a:	f0 e0       	ldi	r31, 0x00	; 0
   21f2c:	80 81       	ld	r24, Z
   21f2e:	81 60       	ori	r24, 0x01	; 1
   21f30:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
   21f32:	e1 e9       	ldi	r30, 0x91	; 145
   21f34:	f0 e0       	ldi	r31, 0x00	; 0
   21f36:	80 81       	ld	r24, Z
   21f38:	83 60       	ori	r24, 0x03	; 3
   21f3a:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
   21f3c:	e0 e9       	ldi	r30, 0x90	; 144
   21f3e:	f0 e0       	ldi	r31, 0x00	; 0
   21f40:	80 81       	ld	r24, Z
   21f42:	81 60       	ori	r24, 0x01	; 1
   21f44:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1038
  TCCR4B |= _BV(CS42) | _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
  TCCR4D |= _BV(WGM40);                        // Put timer 4 in phase- and frequency-correct PWM mode
  TCCR4A |= _BV(PWM4A);                        // Enable PWM mode for comparator OCR4A
  TCCR4C |= _BV(PWM4D);                        // Enable PWM mode for comparator OCR4D
#elif defined(TCCR4B) && defined(CS41) && defined(WGM40)
  TCCR4B |= _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
   21f46:	e1 ea       	ldi	r30, 0xA1	; 161
   21f48:	f0 e0       	ldi	r31, 0x00	; 0
   21f4a:	80 81       	ld	r24, Z
   21f4c:	83 60       	ori	r24, 0x03	; 3
   21f4e:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1039
  TCCR4A |= _BV(WGM40);            // Put timer 4 in 8-bit phase correct pwm mode
   21f50:	e0 ea       	ldi	r30, 0xA0	; 160
   21f52:	f0 e0       	ldi	r31, 0x00	; 0
   21f54:	80 81       	ld	r24, Z
   21f56:	81 60       	ori	r24, 0x01	; 1
   21f58:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1043
#endif

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
  TCCR5B |= _BV(CS51) | _BV(CS50); // Set timer 5 prescale factor to 64
   21f5a:	e1 e2       	ldi	r30, 0x21	; 33
   21f5c:	f1 e0       	ldi	r31, 0x01	; 1
   21f5e:	80 81       	ld	r24, Z
   21f60:	83 60       	ori	r24, 0x03	; 3
   21f62:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1044
  TCCR5A |= _BV(WGM50);            // Put timer 5 in 8-bit phase correct pwm mode
   21f64:	e0 e2       	ldi	r30, 0x20	; 32
   21f66:	f1 e0       	ldi	r31, 0x01	; 1
   21f68:	80 81       	ld	r24, Z
   21f6a:	81 60       	ori	r24, 0x01	; 1
   21f6c:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
   21f6e:	87 e8       	ldi	r24, 0x87	; 135
   21f70:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
   21f74:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1072
#endif
}
   21f78:	08 95       	ret

00021f7a <turnOffPWM>:
turnOffPWM():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
   21f7a:	82 50       	subi	r24, 0x02	; 2
   21f7c:	82 31       	cpi	r24, 0x12	; 18
   21f7e:	08 f0       	brcs	.+2      	; 0x21f82 <turnOffPWM+0x8>
   21f80:	5f c0       	rjmp	.+190    	; 0x22040 <turnOffPWM+0xc6>
   21f82:	e8 2f       	mov	r30, r24
   21f84:	f0 e0       	ldi	r31, 0x00	; 0
   21f86:	88 27       	eor	r24, r24
   21f88:	e7 53       	subi	r30, 0x37	; 55
   21f8a:	f0 4f       	sbci	r31, 0xF0	; 240
   21f8c:	8e 4f       	sbci	r24, 0xFE	; 254
   21f8e:	0d 94 9e 16 	jmp	0x22d3c	; 0x22d3c <__tablejump2__>
   21f92:	74 01       	movw	r14, r8
   21f94:	7e 01       	movw	r14, r28
   21f96:	b2 00       	.word	0x00b2	; ????
   21f98:	f6 01       	movw	r30, r12
   21f9a:	dc 01       	movw	r26, r24
   21f9c:	c0 01       	movw	r24, r0
   21f9e:	18 02       	muls	r17, r24
   21fa0:	6a 00       	.word	0x006a	; ????
   21fa2:	ae 00       	.word	0x00ae	; ????
   21fa4:	e4 01       	movw	r28, r8
   21fa6:	9a 01       	movw	r18, r20
   21fa8:	a2 01       	movw	r20, r4
   21faa:	bc 00       	.word	0x00bc	; ????
   21fac:	52 02       	muls	r21, r18
   21fae:	c0 01       	movw	r24, r0
   21fb0:	28 02       	muls	r18, r24
   21fb2:	84 01       	movw	r16, r8
   21fb4:	8c 01       	movw	r16, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
   21fb6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   21fba:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
   21fbc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:88
        break;
   21fc0:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
   21fc2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   21fc6:	8f 7d       	andi	r24, 0xDF	; 223
   21fc8:	f9 cf       	rjmp	.-14     	; 0x21fbc <turnOffPWM+0x42>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:92
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1C1)
      case TIMER1C:
        TCCR1A &= ~_BV(COM1C1);
   21fca:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   21fce:	87 7f       	andi	r24, 0xF7	; 247
   21fd0:	f5 cf       	rjmp	.-22     	; 0x21fbc <turnOffPWM+0x42>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
   21fd2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
   21fd6:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
   21fd8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:110
        break;
   21fdc:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
   21fde:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
   21fe2:	8f 7d       	andi	r24, 0xDF	; 223
   21fe4:	f9 cf       	rjmp	.-14     	; 0x21fd8 <turnOffPWM+0x5e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
   21fe6:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   21fea:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:126
        TCCR3A &= ~_BV(COM3B1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
   21fec:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:127
        break;
   21ff0:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
   21ff2:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   21ff6:	8f 7d       	andi	r24, 0xDF	; 223
   21ff8:	f9 cf       	rjmp	.-14     	; 0x21fec <turnOffPWM+0x72>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:126
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
   21ffa:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   21ffe:	87 7f       	andi	r24, 0xF7	; 247
   22000:	f5 cf       	rjmp	.-22     	; 0x21fec <turnOffPWM+0x72>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:133
    #endif

    // Timer4
    #if defined(TCCR4A) && defined(COM4A1)
      case TIMER4A:
        TCCR4A &= ~_BV(COM4A1);
   22002:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   22006:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:143
        TCCR4A &= ~_BV(COM4B1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
   22008:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:144
        break;
   2200c:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:138
        TCCR4A &= ~_BV(COM4A1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4B1)
      case  TIMER4B:
        TCCR4A &= ~_BV(COM4B1);
   2200e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   22012:	8f 7d       	andi	r24, 0xDF	; 223
   22014:	f9 cf       	rjmp	.-14     	; 0x22008 <turnOffPWM+0x8e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:143
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
   22016:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   2201a:	87 7f       	andi	r24, 0xF7	; 247
   2201c:	f5 cf       	rjmp	.-22     	; 0x22008 <turnOffPWM+0x8e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:155
    #endif

    // Timer5
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
   2201e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   22022:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
   22024:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:162
        break;
   22028:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:158
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
   2202a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   2202e:	8f 7d       	andi	r24, 0xDF	; 223
   22030:	f9 cf       	rjmp	.-14     	; 0x22024 <turnOffPWM+0xaa>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
   22032:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   22036:	87 7f       	andi	r24, 0xF7	; 247
   22038:	f5 cf       	rjmp	.-22     	; 0x22024 <turnOffPWM+0xaa>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
   2203a:	84 b5       	in	r24, 0x24	; 36
   2203c:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
   2203e:	84 bd       	out	0x24, r24	; 36
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
   22040:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
   22042:	84 b5       	in	r24, 0x24	; 36
   22044:	8f 7d       	andi	r24, 0xDF	; 223
   22046:	fb cf       	rjmp	.-10     	; 0x2203e <turnOffPWM+0xc4>

00022048 <pinMode>:
pinMode():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
   22048:	cf 93       	push	r28
   2204a:	df 93       	push	r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
   2204c:	90 e0       	ldi	r25, 0x00	; 0
   2204e:	fc 01       	movw	r30, r24
   22050:	eb 56       	subi	r30, 0x6B	; 107
   22052:	f1 47       	sbci	r31, 0x71	; 113
   22054:	24 91       	lpm	r18, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
   22056:	85 53       	subi	r24, 0x35	; 53
   22058:	91 47       	sbci	r25, 0x71	; 113
   2205a:	fc 01       	movw	r30, r24
   2205c:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
   2205e:	88 23       	and	r24, r24
   22060:	c9 f0       	breq	.+50     	; 0x22094 <pinMode+0x4c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
   22062:	90 e0       	ldi	r25, 0x00	; 0
   22064:	88 0f       	add	r24, r24
   22066:	99 1f       	adc	r25, r25
   22068:	fc 01       	movw	r30, r24
   2206a:	ef 5d       	subi	r30, 0xDF	; 223
   2206c:	f0 47       	sbci	r31, 0x70	; 112
   2206e:	a5 91       	lpm	r26, Z+
   22070:	b4 91       	lpm	r27, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
   22072:	fc 01       	movw	r30, r24
   22074:	ef 5e       	subi	r30, 0xEF	; 239
   22076:	f0 47       	sbci	r31, 0x70	; 112
   22078:	c5 91       	lpm	r28, Z+
   2207a:	d4 91       	lpm	r29, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
   2207c:	61 11       	cpse	r22, r1
   2207e:	0d c0       	rjmp	.+26     	; 0x2209a <pinMode+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
   22080:	9f b7       	in	r25, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:43
    cli();
   22082:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
   22084:	8c 91       	ld	r24, X
   22086:	20 95       	com	r18
   22088:	82 23       	and	r24, r18
   2208a:	8c 93       	st	X, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
   2208c:	88 81       	ld	r24, Y
   2208e:	28 23       	and	r18, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
   22090:	28 83       	st	Y, r18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
   22092:	9f bf       	out	0x3f, r25	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
   22094:	df 91       	pop	r29
   22096:	cf 91       	pop	r28
   22098:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
   2209a:	62 30       	cpi	r22, 0x02	; 2
   2209c:	51 f4       	brne	.+20     	; 0x220b2 <pinMode+0x6a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
   2209e:	9f b7       	in	r25, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:49
    cli();
   220a0:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
   220a2:	3c 91       	ld	r19, X
   220a4:	82 2f       	mov	r24, r18
   220a6:	80 95       	com	r24
   220a8:	83 23       	and	r24, r19
   220aa:	8c 93       	st	X, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
   220ac:	e8 81       	ld	r30, Y
   220ae:	2e 2b       	or	r18, r30
   220b0:	ef cf       	rjmp	.-34     	; 0x22090 <pinMode+0x48>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
   220b2:	8f b7       	in	r24, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:55
    cli();
   220b4:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
   220b6:	ec 91       	ld	r30, X
   220b8:	2e 2b       	or	r18, r30
   220ba:	2c 93       	st	X, r18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
   220bc:	8f bf       	out	0x3f, r24	; 63
   220be:	ea cf       	rjmp	.-44     	; 0x22094 <pinMode+0x4c>

000220c0 <digitalWrite>:
digitalWrite():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
   220c0:	1f 93       	push	r17
   220c2:	cf 93       	push	r28
   220c4:	df 93       	push	r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
   220c6:	28 2f       	mov	r18, r24
   220c8:	30 e0       	ldi	r19, 0x00	; 0
   220ca:	f9 01       	movw	r30, r18
   220cc:	e1 5a       	subi	r30, 0xA1	; 161
   220ce:	f1 47       	sbci	r31, 0x71	; 113
   220d0:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
   220d2:	f9 01       	movw	r30, r18
   220d4:	eb 56       	subi	r30, 0x6B	; 107
   220d6:	f1 47       	sbci	r31, 0x71	; 113
   220d8:	d4 91       	lpm	r29, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
   220da:	f9 01       	movw	r30, r18
   220dc:	e5 53       	subi	r30, 0x35	; 53
   220de:	f1 47       	sbci	r31, 0x71	; 113
   220e0:	c4 91       	lpm	r28, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
   220e2:	cc 23       	and	r28, r28
   220e4:	a9 f0       	breq	.+42     	; 0x22110 <digitalWrite+0x50>
   220e6:	16 2f       	mov	r17, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
   220e8:	81 11       	cpse	r24, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
   220ea:	0f 94 bd 0f 	call	0x21f7a	; 0x21f7a <turnOffPWM>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
   220ee:	ec 2f       	mov	r30, r28
   220f0:	f0 e0       	ldi	r31, 0x00	; 0
   220f2:	ee 0f       	add	r30, r30
   220f4:	ff 1f       	adc	r31, r31
   220f6:	ef 5e       	subi	r30, 0xEF	; 239
   220f8:	f0 47       	sbci	r31, 0x70	; 112
   220fa:	a5 91       	lpm	r26, Z+
   220fc:	b4 91       	lpm	r27, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
   220fe:	8f b7       	in	r24, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:203
  cli();
   22100:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
   22102:	ec 91       	ld	r30, X
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
   22104:	11 11       	cpse	r17, r1
   22106:	08 c0       	rjmp	.+16     	; 0x22118 <digitalWrite+0x58>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
   22108:	d0 95       	com	r29
   2210a:	de 23       	and	r29, r30
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
   2210c:	dc 93       	st	X, r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
   2210e:	8f bf       	out	0x3f, r24	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:212
}
   22110:	df 91       	pop	r29
   22112:	cf 91       	pop	r28
   22114:	1f 91       	pop	r17
   22116:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
   22118:	de 2b       	or	r29, r30
   2211a:	f8 cf       	rjmp	.-16     	; 0x2210c <digitalWrite+0x4c>

0002211c <digitalRead>:
digitalRead():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
   2211c:	cf 93       	push	r28
   2211e:	df 93       	push	r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
   22120:	28 2f       	mov	r18, r24
   22122:	30 e0       	ldi	r19, 0x00	; 0
   22124:	f9 01       	movw	r30, r18
   22126:	e1 5a       	subi	r30, 0xA1	; 161
   22128:	f1 47       	sbci	r31, 0x71	; 113
   2212a:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
   2212c:	f9 01       	movw	r30, r18
   2212e:	eb 56       	subi	r30, 0x6B	; 107
   22130:	f1 47       	sbci	r31, 0x71	; 113
   22132:	d4 91       	lpm	r29, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
   22134:	f9 01       	movw	r30, r18
   22136:	e5 53       	subi	r30, 0x35	; 53
   22138:	f1 47       	sbci	r31, 0x71	; 113
   2213a:	c4 91       	lpm	r28, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
   2213c:	cc 23       	and	r28, r28
   2213e:	a1 f0       	breq	.+40     	; 0x22168 <digitalRead+0x4c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
   22140:	81 11       	cpse	r24, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:224 (discriminator 1)
   22142:	0f 94 bd 0f 	call	0x21f7a	; 0x21f7a <turnOffPWM>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
   22146:	ec 2f       	mov	r30, r28
   22148:	f0 e0       	ldi	r31, 0x00	; 0
   2214a:	ee 0f       	add	r30, r30
   2214c:	ff 1f       	adc	r31, r31
   2214e:	ef 5f       	subi	r30, 0xFF	; 255
   22150:	f0 47       	sbci	r31, 0x70	; 112
   22152:	a5 91       	lpm	r26, Z+
   22154:	b4 91       	lpm	r27, Z
   22156:	ec 91       	ld	r30, X
   22158:	ed 23       	and	r30, r29
   2215a:	81 e0       	ldi	r24, 0x01	; 1
   2215c:	90 e0       	ldi	r25, 0x00	; 0
   2215e:	09 f4       	brne	.+2      	; 0x22162 <digitalRead+0x46>
   22160:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
   22162:	df 91       	pop	r29
   22164:	cf 91       	pop	r28
   22166:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
   22168:	80 e0       	ldi	r24, 0x00	; 0
   2216a:	90 e0       	ldi	r25, 0x00	; 0
   2216c:	fa cf       	rjmp	.-12     	; 0x22162 <digitalRead+0x46>

0002216e <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:150
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
   2216e:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:151
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
   22170:	91 8d       	ldd	r25, Z+25	; 0x19
   22172:	22 8d       	ldd	r18, Z+26	; 0x1a
   22174:	89 2f       	mov	r24, r25
   22176:	90 e0       	ldi	r25, 0x00	; 0
   22178:	80 5c       	subi	r24, 0xC0	; 192
   2217a:	9f 4f       	sbci	r25, 0xFF	; 255
   2217c:	82 1b       	sub	r24, r18
   2217e:	91 09       	sbc	r25, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:152
}
   22180:	8f 73       	andi	r24, 0x3F	; 63
   22182:	99 27       	eor	r25, r25
   22184:	08 95       	ret

00022186 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:155

int HardwareSerial::peek(void)
{
   22186:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:156
  if (_rx_buffer_head == _rx_buffer_tail) {
   22188:	91 8d       	ldd	r25, Z+25	; 0x19
   2218a:	82 8d       	ldd	r24, Z+26	; 0x1a
   2218c:	98 17       	cp	r25, r24
   2218e:	31 f0       	breq	.+12     	; 0x2219c <HardwareSerial::peek()+0x16>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:159
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
   22190:	82 8d       	ldd	r24, Z+26	; 0x1a
   22192:	e8 0f       	add	r30, r24
   22194:	f1 1d       	adc	r31, r1
   22196:	85 8d       	ldd	r24, Z+29	; 0x1d
   22198:	90 e0       	ldi	r25, 0x00	; 0
   2219a:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:157
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
   2219c:	8f ef       	ldi	r24, 0xFF	; 255
   2219e:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:161
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
   221a0:	08 95       	ret

000221a2 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:164

int HardwareSerial::read(void)
{
   221a2:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:166
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
   221a4:	91 8d       	ldd	r25, Z+25	; 0x19
   221a6:	82 8d       	ldd	r24, Z+26	; 0x1a
   221a8:	98 17       	cp	r25, r24
   221aa:	61 f0       	breq	.+24     	; 0x221c4 <HardwareSerial::read()+0x22>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:169
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
   221ac:	a2 8d       	ldd	r26, Z+26	; 0x1a
   221ae:	ae 0f       	add	r26, r30
   221b0:	bf 2f       	mov	r27, r31
   221b2:	b1 1d       	adc	r27, r1
   221b4:	5d 96       	adiw	r26, 0x1d	; 29
   221b6:	8c 91       	ld	r24, X
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:170
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
   221b8:	92 8d       	ldd	r25, Z+26	; 0x1a
   221ba:	9f 5f       	subi	r25, 0xFF	; 255
   221bc:	9f 73       	andi	r25, 0x3F	; 63
   221be:	92 8f       	std	Z+26, r25	; 0x1a
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:171
    return c;
   221c0:	90 e0       	ldi	r25, 0x00	; 0
   221c2:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:167

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
   221c4:	8f ef       	ldi	r24, 0xFF	; 255
   221c6:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:173
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
   221c8:	08 95       	ret

000221ca <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:181
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
   221ca:	fc 01       	movw	r30, r24
   221cc:	53 8d       	ldd	r21, Z+27	; 0x1b
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:182
  tx_buffer_index_t tail = _tx_buffer_tail;
   221ce:	44 8d       	ldd	r20, Z+28	; 0x1c
   221d0:	25 2f       	mov	r18, r21
   221d2:	30 e0       	ldi	r19, 0x00	; 0
   221d4:	84 2f       	mov	r24, r20
   221d6:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:186
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
   221d8:	82 1b       	sub	r24, r18
   221da:	93 0b       	sbc	r25, r19
   221dc:	54 17       	cp	r21, r20
   221de:	10 f0       	brcs	.+4      	; 0x221e4 <HardwareSerial::availableForWrite()+0x1a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:186 (discriminator 1)
   221e0:	cf 96       	adiw	r24, 0x3f	; 63
   221e2:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:187
  return tail - head - 1;
   221e4:	01 97       	sbiw	r24, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:188
}
   221e6:	08 95       	ret

000221e8 <serialEventRun()>:
_Z14serialEventRunv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:66
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
   221e8:	8c e8       	ldi	r24, 0x8C	; 140
   221ea:	92 e0       	ldi	r25, 0x02	; 2
   221ec:	89 2b       	or	r24, r25
   221ee:	49 f0       	breq	.+18     	; 0x22202 <serialEventRun()+0x1a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 1)
   221f0:	80 e0       	ldi	r24, 0x00	; 0
   221f2:	90 e0       	ldi	r25, 0x00	; 0
   221f4:	89 2b       	or	r24, r25
   221f6:	29 f0       	breq	.+10     	; 0x22202 <serialEventRun()+0x1a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 3)
   221f8:	0f 94 f7 11 	call	0x223ee	; 0x223ee <Serial0_available()>
   221fc:	81 11       	cpse	r24, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:66
   221fe:	0e 94 00 00 	call	0	; 0x0 <__vectors>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:69
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
   22202:	80 e0       	ldi	r24, 0x00	; 0
   22204:	90 e0       	ldi	r25, 0x00	; 0
   22206:	89 2b       	or	r24, r25
   22208:	49 f0       	breq	.+18     	; 0x2221c <serialEventRun()+0x34>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:69 (discriminator 1)
   2220a:	80 e0       	ldi	r24, 0x00	; 0
   2220c:	90 e0       	ldi	r25, 0x00	; 0
   2220e:	89 2b       	or	r24, r25
   22210:	29 f0       	breq	.+10     	; 0x2221c <serialEventRun()+0x34>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:69 (discriminator 3)
   22212:	0e 94 00 00 	call	0	; 0x0 <__vectors>
   22216:	81 11       	cpse	r24, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:69
   22218:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:77
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
   2221c:	08 95       	ret

0002221e <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:82

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
   2221e:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:85
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
   22220:	a4 8d       	ldd	r26, Z+28	; 0x1c
   22222:	a8 0f       	add	r26, r24
   22224:	b9 2f       	mov	r27, r25
   22226:	b1 1d       	adc	r27, r1
   22228:	a3 5a       	subi	r26, 0xA3	; 163
   2222a:	bf 4f       	sbci	r27, 0xFF	; 255
   2222c:	2c 91       	ld	r18, X
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:86
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
   2222e:	84 8d       	ldd	r24, Z+28	; 0x1c
   22230:	90 e0       	ldi	r25, 0x00	; 0
   22232:	01 96       	adiw	r24, 0x01	; 1
   22234:	8f 73       	andi	r24, 0x3F	; 63
   22236:	99 27       	eor	r25, r25
   22238:	84 8f       	std	Z+28, r24	; 0x1c
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:88

  *_udr = c;
   2223a:	a6 89       	ldd	r26, Z+22	; 0x16
   2223c:	b7 89       	ldd	r27, Z+23	; 0x17
   2223e:	2c 93       	st	X, r18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:93

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  *_ucsra |= _BV(TXC0);
   22240:	a0 89       	ldd	r26, Z+16	; 0x10
   22242:	b1 89       	ldd	r27, Z+17	; 0x11
   22244:	8c 91       	ld	r24, X
   22246:	80 64       	ori	r24, 0x40	; 64
   22248:	8c 93       	st	X, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:95

  if (_tx_buffer_head == _tx_buffer_tail) {
   2224a:	93 8d       	ldd	r25, Z+27	; 0x1b
   2224c:	84 8d       	ldd	r24, Z+28	; 0x1c
   2224e:	98 13       	cpse	r25, r24
   22250:	06 c0       	rjmp	.+12     	; 0x2225e <HardwareSerial::_tx_udr_empty_irq()+0x40>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:97
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
   22252:	02 88       	ldd	r0, Z+18	; 0x12
   22254:	f3 89       	ldd	r31, Z+19	; 0x13
   22256:	e0 2d       	mov	r30, r0
   22258:	80 81       	ld	r24, Z
   2225a:	8f 7d       	andi	r24, 0xDF	; 223
   2225c:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:99
  }
}
   2225e:	08 95       	ret

00022260 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:191
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
   22260:	cf 93       	push	r28
   22262:	df 93       	push	r29
   22264:	ec 01       	movw	r28, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:195
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
   22266:	88 8d       	ldd	r24, Y+24	; 0x18
   22268:	88 23       	and	r24, r24
   2226a:	b9 f0       	breq	.+46     	; 0x2229a <HardwareSerial::flush()+0x3a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:198
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
   2226c:	aa 89       	ldd	r26, Y+18	; 0x12
   2226e:	bb 89       	ldd	r27, Y+19	; 0x13
   22270:	e8 89       	ldd	r30, Y+16	; 0x10
   22272:	f9 89       	ldd	r31, Y+17	; 0x11
   22274:	8c 91       	ld	r24, X
   22276:	85 fd       	sbrc	r24, 5
   22278:	03 c0       	rjmp	.+6      	; 0x22280 <HardwareSerial::flush()+0x20>
   2227a:	80 81       	ld	r24, Z
   2227c:	86 fd       	sbrc	r24, 6
   2227e:	0d c0       	rjmp	.+26     	; 0x2229a <HardwareSerial::flush()+0x3a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:199
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
   22280:	0f b6       	in	r0, 0x3f	; 63
   22282:	07 fc       	sbrc	r0, 7
   22284:	f7 cf       	rjmp	.-18     	; 0x22274 <HardwareSerial::flush()+0x14>
   22286:	8c 91       	ld	r24, X
   22288:	85 ff       	sbrs	r24, 5
   2228a:	f2 cf       	rjmp	.-28     	; 0x22270 <HardwareSerial::flush()+0x10>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:203
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
   2228c:	80 81       	ld	r24, Z
   2228e:	85 ff       	sbrs	r24, 5
   22290:	ed cf       	rjmp	.-38     	; 0x2226c <HardwareSerial::flush()+0xc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:204
        _tx_udr_empty_irq();
   22292:	ce 01       	movw	r24, r28
   22294:	0f 94 0f 11 	call	0x2221e	; 0x2221e <HardwareSerial::_tx_udr_empty_irq()>
   22298:	e9 cf       	rjmp	.-46     	; 0x2226c <HardwareSerial::flush()+0xc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:208
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
   2229a:	df 91       	pop	r29
   2229c:	cf 91       	pop	r28
   2229e:	08 95       	ret

000222a0 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:211

size_t HardwareSerial::write(uint8_t c)
{
   222a0:	ef 92       	push	r14
   222a2:	ff 92       	push	r15
   222a4:	0f 93       	push	r16
   222a6:	1f 93       	push	r17
   222a8:	cf 93       	push	r28
   222aa:	df 93       	push	r29
   222ac:	ec 01       	movw	r28, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:212
  _written = true;
   222ae:	81 e0       	ldi	r24, 0x01	; 1
   222b0:	88 8f       	std	Y+24, r24	; 0x18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:217
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
   222b2:	9b 8d       	ldd	r25, Y+27	; 0x1b
   222b4:	8c 8d       	ldd	r24, Y+28	; 0x1c
   222b6:	98 13       	cpse	r25, r24
   222b8:	16 c0       	rjmp	.+44     	; 0x222e6 <HardwareSerial::write(unsigned char)+0x46>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:217 (discriminator 1)
   222ba:	e8 89       	ldd	r30, Y+16	; 0x10
   222bc:	f9 89       	ldd	r31, Y+17	; 0x11
   222be:	80 81       	ld	r24, Z
   222c0:	85 ff       	sbrs	r24, 5
   222c2:	11 c0       	rjmp	.+34     	; 0x222e6 <HardwareSerial::write(unsigned char)+0x46>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:218
    *_udr = c;
   222c4:	ee 89       	ldd	r30, Y+22	; 0x16
   222c6:	ff 89       	ldd	r31, Y+23	; 0x17
   222c8:	60 83       	st	Z, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:219
    *_ucsra |= _BV(TXC0);
   222ca:	e8 89       	ldd	r30, Y+16	; 0x10
   222cc:	f9 89       	ldd	r31, Y+17	; 0x11
   222ce:	80 81       	ld	r24, Z
   222d0:	80 64       	ori	r24, 0x40	; 64
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:242
  }

  _tx_buffer[_tx_buffer_head] = c;
  _tx_buffer_head = i;

  *_ucsrb |= _BV(UDRIE0);
   222d2:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:245
  
  return 1;
}
   222d4:	81 e0       	ldi	r24, 0x01	; 1
   222d6:	90 e0       	ldi	r25, 0x00	; 0
   222d8:	df 91       	pop	r29
   222da:	cf 91       	pop	r28
   222dc:	1f 91       	pop	r17
   222de:	0f 91       	pop	r16
   222e0:	ff 90       	pop	r15
   222e2:	ef 90       	pop	r14
   222e4:	08 95       	ret
   222e6:	f6 2e       	mov	r15, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:222
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    *_ucsra |= _BV(TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
   222e8:	0b 8d       	ldd	r16, Y+27	; 0x1b
   222ea:	10 e0       	ldi	r17, 0x00	; 0
   222ec:	0f 5f       	subi	r16, 0xFF	; 255
   222ee:	1f 4f       	sbci	r17, 0xFF	; 255
   222f0:	0f 73       	andi	r16, 0x3F	; 63
   222f2:	11 27       	eor	r17, r17
   222f4:	e0 2e       	mov	r14, r16
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:226

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
   222f6:	8c 8d       	ldd	r24, Y+28	; 0x1c
   222f8:	8e 11       	cpse	r24, r14
   222fa:	0c c0       	rjmp	.+24     	; 0x22314 <HardwareSerial::write(unsigned char)+0x74>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:227
    if (bit_is_clear(SREG, SREG_I)) {
   222fc:	0f b6       	in	r0, 0x3f	; 63
   222fe:	07 fc       	sbrc	r0, 7
   22300:	fa cf       	rjmp	.-12     	; 0x222f6 <HardwareSerial::write(unsigned char)+0x56>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:232
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
   22302:	e8 89       	ldd	r30, Y+16	; 0x10
   22304:	f9 89       	ldd	r31, Y+17	; 0x11
   22306:	80 81       	ld	r24, Z
   22308:	85 ff       	sbrs	r24, 5
   2230a:	f5 cf       	rjmp	.-22     	; 0x222f6 <HardwareSerial::write(unsigned char)+0x56>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:233
        _tx_udr_empty_irq();
   2230c:	ce 01       	movw	r24, r28
   2230e:	0f 94 0f 11 	call	0x2221e	; 0x2221e <HardwareSerial::_tx_udr_empty_irq()>
   22312:	f1 cf       	rjmp	.-30     	; 0x222f6 <HardwareSerial::write(unsigned char)+0x56>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:239
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
   22314:	eb 8d       	ldd	r30, Y+27	; 0x1b
   22316:	ec 0f       	add	r30, r28
   22318:	fd 2f       	mov	r31, r29
   2231a:	f1 1d       	adc	r31, r1
   2231c:	e3 5a       	subi	r30, 0xA3	; 163
   2231e:	ff 4f       	sbci	r31, 0xFF	; 255
   22320:	f0 82       	st	Z, r15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:240
  _tx_buffer_head = i;
   22322:	0b 8f       	std	Y+27, r16	; 0x1b
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:242

  *_ucsrb |= _BV(UDRIE0);
   22324:	ea 89       	ldd	r30, Y+18	; 0x12
   22326:	fb 89       	ldd	r31, Y+19	; 0x13
   22328:	80 81       	ld	r24, Z
   2232a:	80 62       	ori	r24, 0x20	; 32
   2232c:	d2 cf       	rjmp	.-92     	; 0x222d2 <HardwareSerial::write(unsigned char)+0x32>

0002232e <__vector_25>:
__vector_25():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
   2232e:	1f 92       	push	r1
   22330:	0f 92       	push	r0
   22332:	0f b6       	in	r0, 0x3f	; 63
   22334:	0f 92       	push	r0
   22336:	11 24       	eor	r1, r1
   22338:	0b b6       	in	r0, 0x3b	; 59
   2233a:	0f 92       	push	r0
   2233c:	2f 93       	push	r18
   2233e:	8f 93       	push	r24
   22340:	9f 93       	push	r25
   22342:	ef 93       	push	r30
   22344:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
   22346:	e0 91 68 13 	lds	r30, 0x1368	; 0x801368 <Serial+0x10>
   2234a:	f0 91 69 13 	lds	r31, 0x1369	; 0x801369 <Serial+0x11>
   2234e:	80 81       	ld	r24, Z
   22350:	e0 91 6e 13 	lds	r30, 0x136E	; 0x80136e <Serial+0x16>
   22354:	f0 91 6f 13 	lds	r31, 0x136F	; 0x80136f <Serial+0x17>
   22358:	82 fd       	sbrc	r24, 2
   2235a:	1d c0       	rjmp	.+58     	; 0x22396 <__vector_25+0x68>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
   2235c:	90 81       	ld	r25, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
   2235e:	80 91 71 13 	lds	r24, 0x1371	; 0x801371 <Serial+0x19>
   22362:	8f 5f       	subi	r24, 0xFF	; 255
   22364:	8f 73       	andi	r24, 0x3F	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
   22366:	20 91 72 13 	lds	r18, 0x1372	; 0x801372 <Serial+0x1a>
   2236a:	82 17       	cp	r24, r18
   2236c:	41 f0       	breq	.+16     	; 0x2237e <__vector_25+0x50>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
   2236e:	e0 91 71 13 	lds	r30, 0x1371	; 0x801371 <Serial+0x19>
   22372:	f0 e0       	ldi	r31, 0x00	; 0
   22374:	e8 5a       	subi	r30, 0xA8	; 168
   22376:	fc 4e       	sbci	r31, 0xEC	; 236
   22378:	95 8f       	std	Z+29, r25	; 0x1d
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:115
      _rx_buffer_head = i;
   2237a:	80 93 71 13 	sts	0x1371, r24	; 0x801371 <Serial+0x19>
__vector_25():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
   2237e:	ff 91       	pop	r31
   22380:	ef 91       	pop	r30
   22382:	9f 91       	pop	r25
   22384:	8f 91       	pop	r24
   22386:	2f 91       	pop	r18
   22388:	0f 90       	pop	r0
   2238a:	0b be       	out	0x3b, r0	; 59
   2238c:	0f 90       	pop	r0
   2238e:	0f be       	out	0x3f, r0	; 63
   22390:	0f 90       	pop	r0
   22392:	1f 90       	pop	r1
   22394:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
   22396:	80 81       	ld	r24, Z
__vector_25():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:52
   22398:	f2 cf       	rjmp	.-28     	; 0x2237e <__vector_25+0x50>

0002239a <__vector_26>:
__vector_26():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
   2239a:	1f 92       	push	r1
   2239c:	0f 92       	push	r0
   2239e:	0f b6       	in	r0, 0x3f	; 63
   223a0:	0f 92       	push	r0
   223a2:	11 24       	eor	r1, r1
   223a4:	0b b6       	in	r0, 0x3b	; 59
   223a6:	0f 92       	push	r0
   223a8:	2f 93       	push	r18
   223aa:	3f 93       	push	r19
   223ac:	4f 93       	push	r20
   223ae:	5f 93       	push	r21
   223b0:	6f 93       	push	r22
   223b2:	7f 93       	push	r23
   223b4:	8f 93       	push	r24
   223b6:	9f 93       	push	r25
   223b8:	af 93       	push	r26
   223ba:	bf 93       	push	r27
   223bc:	ef 93       	push	r30
   223be:	ff 93       	push	r31
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
   223c0:	88 e5       	ldi	r24, 0x58	; 88
   223c2:	93 e1       	ldi	r25, 0x13	; 19
   223c4:	0f 94 0f 11 	call	0x2221e	; 0x2221e <HardwareSerial::_tx_udr_empty_irq()>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:65
}
   223c8:	ff 91       	pop	r31
   223ca:	ef 91       	pop	r30
   223cc:	bf 91       	pop	r27
   223ce:	af 91       	pop	r26
   223d0:	9f 91       	pop	r25
   223d2:	8f 91       	pop	r24
   223d4:	7f 91       	pop	r23
   223d6:	6f 91       	pop	r22
   223d8:	5f 91       	pop	r21
   223da:	4f 91       	pop	r20
   223dc:	3f 91       	pop	r19
   223de:	2f 91       	pop	r18
   223e0:	0f 90       	pop	r0
   223e2:	0b be       	out	0x3b, r0	; 59
   223e4:	0f 90       	pop	r0
   223e6:	0f be       	out	0x3f, r0	; 63
   223e8:	0f 90       	pop	r0
   223ea:	1f 90       	pop	r1
   223ec:	18 95       	reti

000223ee <Serial0_available()>:
_Z17Serial0_availablev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
   223ee:	88 e5       	ldi	r24, 0x58	; 88
   223f0:	93 e1       	ldi	r25, 0x13	; 19
   223f2:	0f 94 b7 10 	call	0x2216e	; 0x2216e <HardwareSerial::available()>
   223f6:	21 e0       	ldi	r18, 0x01	; 1
   223f8:	89 2b       	or	r24, r25
   223fa:	09 f4       	brne	.+2      	; 0x223fe <Serial0_available()+0x10>
   223fc:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:77
}
   223fe:	82 2f       	mov	r24, r18
   22400:	08 95       	ret

00022402 <_GLOBAL__sub_I___vector_25>:
_ZN5PrintC4Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:46
   22402:	e8 e5       	ldi	r30, 0x58	; 88
   22404:	f3 e1       	ldi	r31, 0x13	; 19
   22406:	13 82       	std	Z+3, r1	; 0x03
   22408:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
   2240a:	88 ee       	ldi	r24, 0xE8	; 232
   2240c:	93 e0       	ldi	r25, 0x03	; 3
   2240e:	a0 e0       	ldi	r26, 0x00	; 0
   22410:	b0 e0       	ldi	r27, 0x00	; 0
   22412:	84 83       	std	Z+4, r24	; 0x04
   22414:	95 83       	std	Z+5, r25	; 0x05
   22416:	a6 83       	std	Z+6, r26	; 0x06
   22418:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:95
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
   2241a:	89 ec       	ldi	r24, 0xC9	; 201
   2241c:	99 e0       	ldi	r25, 0x09	; 9
   2241e:	91 83       	std	Z+1, r25	; 0x01
   22420:	80 83       	st	Z, r24
   22422:	85 ec       	ldi	r24, 0xC5	; 197
   22424:	90 e0       	ldi	r25, 0x00	; 0
   22426:	95 87       	std	Z+13, r25	; 0x0d
   22428:	84 87       	std	Z+12, r24	; 0x0c
   2242a:	84 ec       	ldi	r24, 0xC4	; 196
   2242c:	90 e0       	ldi	r25, 0x00	; 0
   2242e:	97 87       	std	Z+15, r25	; 0x0f
   22430:	86 87       	std	Z+14, r24	; 0x0e
   22432:	80 ec       	ldi	r24, 0xC0	; 192
   22434:	90 e0       	ldi	r25, 0x00	; 0
   22436:	91 8b       	std	Z+17, r25	; 0x11
   22438:	80 8b       	std	Z+16, r24	; 0x10
   2243a:	81 ec       	ldi	r24, 0xC1	; 193
   2243c:	90 e0       	ldi	r25, 0x00	; 0
   2243e:	93 8b       	std	Z+19, r25	; 0x13
   22440:	82 8b       	std	Z+18, r24	; 0x12
   22442:	82 ec       	ldi	r24, 0xC2	; 194
   22444:	90 e0       	ldi	r25, 0x00	; 0
   22446:	95 8b       	std	Z+21, r25	; 0x15
   22448:	84 8b       	std	Z+20, r24	; 0x14
   2244a:	86 ec       	ldi	r24, 0xC6	; 198
   2244c:	90 e0       	ldi	r25, 0x00	; 0
   2244e:	97 8b       	std	Z+23, r25	; 0x17
   22450:	86 8b       	std	Z+22, r24	; 0x16
   22452:	11 8e       	std	Z+25, r1	; 0x19
   22454:	12 8e       	std	Z+26, r1	; 0x1a
   22456:	13 8e       	std	Z+27, r1	; 0x1b
   22458:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_25():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:77
   2245a:	08 95       	ret

0002245c <IPAddress::printTo(Print&) const>:
_ZNK9IPAddress7printToER5Print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:83
    if (dots != 3) {
        // Too few dots (there must be 3 dots)
        return false;
    }
    _address.bytes[3] = acc;
    return true;
   2245c:	8f 92       	push	r8
   2245e:	9f 92       	push	r9
   22460:	af 92       	push	r10
   22462:	bf 92       	push	r11
   22464:	cf 92       	push	r12
   22466:	df 92       	push	r13
   22468:	ef 92       	push	r14
   2246a:	ff 92       	push	r15
   2246c:	0f 93       	push	r16
   2246e:	1f 93       	push	r17
   22470:	cf 93       	push	r28
   22472:	df 93       	push	r29
   22474:	7c 01       	movw	r14, r24
   22476:	8b 01       	movw	r16, r22
   22478:	4c 01       	movw	r8, r24
   2247a:	82 e0       	ldi	r24, 0x02	; 2
   2247c:	88 0e       	add	r8, r24
   2247e:	91 1c       	adc	r9, r1
   22480:	57 01       	movw	r10, r14
   22482:	e5 e0       	ldi	r30, 0x05	; 5
   22484:	ae 0e       	add	r10, r30
   22486:	b1 1c       	adc	r11, r1
   22488:	d0 e0       	ldi	r29, 0x00	; 0
   2248a:	c0 e0       	ldi	r28, 0x00	; 0
   2248c:	f4 01       	movw	r30, r8
   2248e:	61 91       	ld	r22, Z+
   22490:	4f 01       	movw	r8, r30
   22492:	4a e0       	ldi	r20, 0x0A	; 10
   22494:	50 e0       	ldi	r21, 0x00	; 0
   22496:	c8 01       	movw	r24, r16
   22498:	0f 94 37 13 	call	0x2266e	; 0x2266e <Print::print(unsigned char, int)>
   2249c:	6c 01       	movw	r12, r24
   2249e:	6e e2       	ldi	r22, 0x2E	; 46
   224a0:	c8 01       	movw	r24, r16
   224a2:	0f 94 d7 12 	call	0x225ae	; 0x225ae <Print::print(char)>
   224a6:	8c 0d       	add	r24, r12
   224a8:	9d 1d       	adc	r25, r13
   224aa:	c8 0f       	add	r28, r24
   224ac:	d9 1f       	adc	r29, r25
   224ae:	8a 14       	cp	r8, r10
   224b0:	9b 04       	cpc	r9, r11
   224b2:	61 f7       	brne	.-40     	; 0x2248c <IPAddress::printTo(Print&) const+0x30>
   224b4:	4a e0       	ldi	r20, 0x0A	; 10
   224b6:	50 e0       	ldi	r21, 0x00	; 0
   224b8:	f7 01       	movw	r30, r14
   224ba:	65 81       	ldd	r22, Z+5	; 0x05
   224bc:	c8 01       	movw	r24, r16
   224be:	0f 94 37 13 	call	0x2266e	; 0x2266e <Print::print(unsigned char, int)>
   224c2:	8c 0f       	add	r24, r28
   224c4:	9d 1f       	adc	r25, r29
   224c6:	df 91       	pop	r29
   224c8:	cf 91       	pop	r28
   224ca:	1f 91       	pop	r17
   224cc:	0f 91       	pop	r16
   224ce:	ff 90       	pop	r15
   224d0:	ef 90       	pop	r14
   224d2:	df 90       	pop	r13
   224d4:	cf 90       	pop	r12
   224d6:	bf 90       	pop	r11
   224d8:	af 90       	pop	r10
   224da:	9f 90       	pop	r9
   224dc:	8f 90       	pop	r8
   224de:	08 95       	ret

000224e0 <IPAddress::IPAddress()>:
_ZN9IPAddressC2Ev():
   224e0:	2b ed       	ldi	r18, 0xDB	; 219
   224e2:	39 e0       	ldi	r19, 0x09	; 9
   224e4:	fc 01       	movw	r30, r24
   224e6:	31 83       	std	Z+1, r19	; 0x01
   224e8:	20 83       	st	Z, r18
   224ea:	12 82       	std	Z+2, r1	; 0x02
   224ec:	13 82       	std	Z+3, r1	; 0x03
   224ee:	14 82       	std	Z+4, r1	; 0x04
   224f0:	15 82       	std	Z+5, r1	; 0x05
   224f2:	08 95       	ret

000224f4 <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
_ZN9IPAddressC2Ehhhh():
   224f4:	0f 93       	push	r16
   224f6:	fc 01       	movw	r30, r24
   224f8:	8b ed       	ldi	r24, 0xDB	; 219
   224fa:	99 e0       	ldi	r25, 0x09	; 9
   224fc:	91 83       	std	Z+1, r25	; 0x01
   224fe:	80 83       	st	Z, r24
   22500:	62 83       	std	Z+2, r22	; 0x02
   22502:	43 83       	std	Z+3, r20	; 0x03
   22504:	24 83       	std	Z+4, r18	; 0x04
   22506:	05 83       	std	Z+5, r16	; 0x05
   22508:	0f 91       	pop	r16
   2250a:	08 95       	ret

0002250c <IPAddress::IPAddress(unsigned char const*)>:
_ZN9IPAddressC2EPKh():
   2250c:	dc 01       	movw	r26, r24
   2250e:	8b ed       	ldi	r24, 0xDB	; 219
   22510:	99 e0       	ldi	r25, 0x09	; 9
   22512:	8d 93       	st	X+, r24
   22514:	9d 93       	st	X+, r25
   22516:	84 e0       	ldi	r24, 0x04	; 4
   22518:	fb 01       	movw	r30, r22
   2251a:	01 90       	ld	r0, Z+
   2251c:	0d 92       	st	X+, r0
   2251e:	8a 95       	dec	r24
   22520:	e1 f7       	brne	.-8      	; 0x2251a <IPAddress::IPAddress(unsigned char const*)+0xe>
   22522:	08 95       	ret

00022524 <IPAddress::operator=(unsigned char const*)>:
_ZN9IPAddressaSEPKh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:88
}

IPAddress& IPAddress::operator=(const uint8_t *address)
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
   22524:	dc 01       	movw	r26, r24
   22526:	12 96       	adiw	r26, 0x02	; 2
   22528:	24 e0       	ldi	r18, 0x04	; 4
   2252a:	fb 01       	movw	r30, r22
   2252c:	01 90       	ld	r0, Z+
   2252e:	0d 92       	st	X+, r0
   22530:	2a 95       	dec	r18
   22532:	e1 f7       	brne	.-8      	; 0x2252c <IPAddress::operator=(unsigned char const*)+0x8>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:90
    return *this;
}
   22534:	08 95       	ret

00022536 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:178
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
   22536:	af 92       	push	r10
   22538:	bf 92       	push	r11
   2253a:	cf 92       	push	r12
   2253c:	df 92       	push	r13
   2253e:	ef 92       	push	r14
   22540:	ff 92       	push	r15
   22542:	0f 93       	push	r16
   22544:	1f 93       	push	r17
   22546:	cf 93       	push	r28
   22548:	df 93       	push	r29
   2254a:	6c 01       	movw	r12, r24
   2254c:	7b 01       	movw	r14, r22
   2254e:	8b 01       	movw	r16, r22
   22550:	04 0f       	add	r16, r20
   22552:	15 1f       	adc	r17, r21
   22554:	eb 01       	movw	r28, r22
   22556:	5e 01       	movw	r10, r28
   22558:	ae 18       	sub	r10, r14
   2255a:	bf 08       	sbc	r11, r15
   2255c:	c0 17       	cp	r28, r16
   2255e:	d1 07       	cpc	r29, r17
   22560:	59 f0       	breq	.+22     	; 0x22578 <Print::write(unsigned char const*, unsigned int)+0x42>
   22562:	69 91       	ld	r22, Y+
   22564:	d6 01       	movw	r26, r12
   22566:	ed 91       	ld	r30, X+
   22568:	fc 91       	ld	r31, X
   2256a:	01 90       	ld	r0, Z+
   2256c:	f0 81       	ld	r31, Z
   2256e:	e0 2d       	mov	r30, r0
   22570:	c6 01       	movw	r24, r12
   22572:	19 95       	eicall
   22574:	89 2b       	or	r24, r25
   22576:	79 f7       	brne	.-34     	; 0x22556 <Print::write(unsigned char const*, unsigned int)+0x20>
   22578:	c5 01       	movw	r24, r10
   2257a:	df 91       	pop	r29
   2257c:	cf 91       	pop	r28
   2257e:	1f 91       	pop	r17
   22580:	0f 91       	pop	r16
   22582:	ff 90       	pop	r15
   22584:	ef 90       	pop	r14
   22586:	df 90       	pop	r13
   22588:	cf 90       	pop	r12
   2258a:	bf 90       	pop	r11
   2258c:	af 90       	pop	r10
   2258e:	08 95       	ret

00022590 <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc():
   22590:	fb 01       	movw	r30, r22
   22592:	01 90       	ld	r0, Z+
   22594:	00 20       	and	r0, r0
   22596:	e9 f7       	brne	.-6      	; 0x22592 <Print::write(char const*) [clone .part.2]+0x2>
   22598:	31 97       	sbiw	r30, 0x01	; 1
   2259a:	af 01       	movw	r20, r30
   2259c:	46 1b       	sub	r20, r22
   2259e:	57 0b       	sbc	r21, r23
   225a0:	dc 01       	movw	r26, r24
   225a2:	ed 91       	ld	r30, X+
   225a4:	fc 91       	ld	r31, X
   225a6:	02 80       	ldd	r0, Z+2	; 0x02
   225a8:	f3 81       	ldd	r31, Z+3	; 0x03
   225aa:	e0 2d       	mov	r30, r0
   225ac:	19 94       	eijmp

000225ae <Print::print(char)>:
_ZN5Print5printEc():
   225ae:	dc 01       	movw	r26, r24
   225b0:	ed 91       	ld	r30, X+
   225b2:	fc 91       	ld	r31, X
   225b4:	01 90       	ld	r0, Z+
   225b6:	f0 81       	ld	r31, Z
   225b8:	e0 2d       	mov	r30, r0
   225ba:	19 94       	eijmp

000225bc <Print::printNumber(unsigned long, unsigned char)>:
_ZN5Print11printNumberEmh():
   225bc:	8f 92       	push	r8
   225be:	9f 92       	push	r9
   225c0:	af 92       	push	r10
   225c2:	bf 92       	push	r11
   225c4:	ef 92       	push	r14
   225c6:	ff 92       	push	r15
   225c8:	0f 93       	push	r16
   225ca:	1f 93       	push	r17
   225cc:	cf 93       	push	r28
   225ce:	df 93       	push	r29
   225d0:	cd b7       	in	r28, 0x3d	; 61
   225d2:	de b7       	in	r29, 0x3e	; 62
   225d4:	a1 97       	sbiw	r28, 0x21	; 33
   225d6:	0f b6       	in	r0, 0x3f	; 63
   225d8:	f8 94       	cli
   225da:	de bf       	out	0x3e, r29	; 62
   225dc:	0f be       	out	0x3f, r0	; 63
   225de:	cd bf       	out	0x3d, r28	; 61
   225e0:	7c 01       	movw	r14, r24
   225e2:	fa 01       	movw	r30, r20
   225e4:	cb 01       	movw	r24, r22
   225e6:	19 a2       	std	Y+33, r1	; 0x21
   225e8:	22 30       	cpi	r18, 0x02	; 2
   225ea:	08 f4       	brcc	.+2      	; 0x225ee <Print::printNumber(unsigned long, unsigned char)+0x32>
   225ec:	2a e0       	ldi	r18, 0x0A	; 10
   225ee:	8e 01       	movw	r16, r28
   225f0:	0f 5d       	subi	r16, 0xDF	; 223
   225f2:	1f 4f       	sbci	r17, 0xFF	; 255
   225f4:	82 2e       	mov	r8, r18
   225f6:	91 2c       	mov	r9, r1
   225f8:	b1 2c       	mov	r11, r1
   225fa:	a1 2c       	mov	r10, r1
   225fc:	bf 01       	movw	r22, r30
   225fe:	a5 01       	movw	r20, r10
   22600:	94 01       	movw	r18, r8
   22602:	0f 94 5d 16 	call	0x22cba	; 0x22cba <__udivmodsi4>
   22606:	f9 01       	movw	r30, r18
   22608:	ca 01       	movw	r24, r20
   2260a:	6a 30       	cpi	r22, 0x0A	; 10
   2260c:	0c f5       	brge	.+66     	; 0x22650 <Print::printNumber(unsigned long, unsigned char)+0x94>
   2260e:	60 5d       	subi	r22, 0xD0	; 208
   22610:	d8 01       	movw	r26, r16
   22612:	6e 93       	st	-X, r22
   22614:	8d 01       	movw	r16, r26
   22616:	23 2b       	or	r18, r19
   22618:	24 2b       	or	r18, r20
   2261a:	25 2b       	or	r18, r21
   2261c:	79 f7       	brne	.-34     	; 0x225fc <Print::printNumber(unsigned long, unsigned char)+0x40>
_ZN5Print5writeEPKc():
   2261e:	90 e0       	ldi	r25, 0x00	; 0
   22620:	80 e0       	ldi	r24, 0x00	; 0
   22622:	10 97       	sbiw	r26, 0x00	; 0
   22624:	21 f0       	breq	.+8      	; 0x2262e <Print::printNumber(unsigned long, unsigned char)+0x72>
   22626:	bd 01       	movw	r22, r26
   22628:	c7 01       	movw	r24, r14
   2262a:	0f 94 c8 12 	call	0x22590	; 0x22590 <Print::write(char const*) [clone .part.2]>
_ZN5Print11printNumberEmh():
   2262e:	a1 96       	adiw	r28, 0x21	; 33
   22630:	0f b6       	in	r0, 0x3f	; 63
   22632:	f8 94       	cli
   22634:	de bf       	out	0x3e, r29	; 62
   22636:	0f be       	out	0x3f, r0	; 63
   22638:	cd bf       	out	0x3d, r28	; 61
   2263a:	df 91       	pop	r29
   2263c:	cf 91       	pop	r28
   2263e:	1f 91       	pop	r17
   22640:	0f 91       	pop	r16
   22642:	ff 90       	pop	r15
   22644:	ef 90       	pop	r14
   22646:	bf 90       	pop	r11
   22648:	af 90       	pop	r10
   2264a:	9f 90       	pop	r9
   2264c:	8f 90       	pop	r8
   2264e:	08 95       	ret
   22650:	69 5c       	subi	r22, 0xC9	; 201
   22652:	de cf       	rjmp	.-68     	; 0x22610 <Print::printNumber(unsigned long, unsigned char)+0x54>

00022654 <Print::print(unsigned long, int)>:
_ZN5Print5printEmi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:105
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   22654:	21 15       	cp	r18, r1
   22656:	31 05       	cpc	r19, r1
   22658:	41 f4       	brne	.+16     	; 0x2266a <Print::print(unsigned long, int)+0x16>
   2265a:	dc 01       	movw	r26, r24
   2265c:	ed 91       	ld	r30, X+
   2265e:	fc 91       	ld	r31, X
   22660:	01 90       	ld	r0, Z+
   22662:	f0 81       	ld	r31, Z
   22664:	e0 2d       	mov	r30, r0
   22666:	64 2f       	mov	r22, r20
   22668:	19 94       	eijmp
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:106
  else return printNumber(n, base);
   2266a:	0d 94 de 12 	jmp	0x225bc	; 0x225bc <Print::printNumber(unsigned long, unsigned char)>

0002266e <Print::print(unsigned char, int)>:
_ZN5Print5printEhi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:73
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
   2266e:	9a 01       	movw	r18, r20
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:74
  return print((unsigned long) b, base);
   22670:	46 2f       	mov	r20, r22
   22672:	50 e0       	ldi	r21, 0x00	; 0
   22674:	70 e0       	ldi	r23, 0x00	; 0
   22676:	60 e0       	ldi	r22, 0x00	; 0
   22678:	0d 94 2a 13 	jmp	0x22654	; 0x22654 <Print::print(unsigned long, int)>

0002267c <makeWord(unsigned char, unsigned char)>:
_Z8makeWordhh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WMath.cpp:58
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

unsigned int makeWord(unsigned int w) { return w; }
unsigned int makeWord(unsigned char h, unsigned char l) { return (h << 8) | l; }
   2267c:	98 2f       	mov	r25, r24
   2267e:	86 2f       	mov	r24, r22
   22680:	08 95       	ret

00022682 <String::~String()>:
_ZN6StringD2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  free(buffer);
   22682:	fc 01       	movw	r30, r24
   22684:	80 81       	ld	r24, Z
   22686:	91 81       	ldd	r25, Z+1	; 0x01
   22688:	0d 94 7a 17 	jmp	0x22ef4	; 0x22ef4 <free>

0002268c <String::invalidate()>:
_ZN6String10invalidateEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:139
  capacity = 0;
  len = 0;
}

void String::invalidate(void)
{
   2268c:	cf 93       	push	r28
   2268e:	df 93       	push	r29
   22690:	ec 01       	movw	r28, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:140
  if (buffer) free(buffer);
   22692:	88 81       	ld	r24, Y
   22694:	99 81       	ldd	r25, Y+1	; 0x01
   22696:	00 97       	sbiw	r24, 0x00	; 0
   22698:	11 f0       	breq	.+4      	; 0x2269e <String::invalidate()+0x12>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:140 (discriminator 1)
   2269a:	0f 94 7a 17 	call	0x22ef4	; 0x22ef4 <free>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:141
  buffer = NULL;
   2269e:	19 82       	std	Y+1, r1	; 0x01
   226a0:	18 82       	st	Y, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:142
  capacity = len = 0;
   226a2:	1d 82       	std	Y+5, r1	; 0x05
   226a4:	1c 82       	std	Y+4, r1	; 0x04
   226a6:	1b 82       	std	Y+3, r1	; 0x03
   226a8:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:143
}
   226aa:	df 91       	pop	r29
   226ac:	cf 91       	pop	r28
   226ae:	08 95       	ret

000226b0 <String::changeBuffer(unsigned int)>:
_ZN6String12changeBufferEj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:156
  }
  return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   226b0:	0f 93       	push	r16
   226b2:	1f 93       	push	r17
   226b4:	cf 93       	push	r28
   226b6:	df 93       	push	r29
   226b8:	ec 01       	movw	r28, r24
   226ba:	8b 01       	movw	r16, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:157
  char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   226bc:	6f 5f       	subi	r22, 0xFF	; 255
   226be:	7f 4f       	sbci	r23, 0xFF	; 255
   226c0:	88 81       	ld	r24, Y
   226c2:	99 81       	ldd	r25, Y+1	; 0x01
   226c4:	0f 94 03 18 	call	0x23006	; 0x23006 <realloc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:158
  if (newbuffer) {
   226c8:	00 97       	sbiw	r24, 0x00	; 0
   226ca:	51 f0       	breq	.+20     	; 0x226e0 <String::changeBuffer(unsigned int)+0x30>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:159
    buffer = newbuffer;
   226cc:	99 83       	std	Y+1, r25	; 0x01
   226ce:	88 83       	st	Y, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:160
    capacity = maxStrLen;
   226d0:	1b 83       	std	Y+3, r17	; 0x03
   226d2:	0a 83       	std	Y+2, r16	; 0x02
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:161
    return 1;
   226d4:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:164
  }
  return 0;
}
   226d6:	df 91       	pop	r29
   226d8:	cf 91       	pop	r28
   226da:	1f 91       	pop	r17
   226dc:	0f 91       	pop	r16
   226de:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:163
  if (newbuffer) {
    buffer = newbuffer;
    capacity = maxStrLen;
    return 1;
  }
  return 0;
   226e0:	80 e0       	ldi	r24, 0x00	; 0
   226e2:	f9 cf       	rjmp	.-14     	; 0x226d6 <String::changeBuffer(unsigned int)+0x26>

000226e4 <String::reserve(unsigned int)>:
_ZN6String7reserveEj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:146
  buffer = NULL;
  capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   226e4:	cf 93       	push	r28
   226e6:	df 93       	push	r29
   226e8:	ec 01       	movw	r28, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:147
  if (buffer && capacity >= size) return 1;
   226ea:	88 81       	ld	r24, Y
   226ec:	99 81       	ldd	r25, Y+1	; 0x01
   226ee:	89 2b       	or	r24, r25
   226f0:	49 f0       	breq	.+18     	; 0x22704 <String::reserve(unsigned int)+0x20>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:147 (discriminator 1)
   226f2:	8a 81       	ldd	r24, Y+2	; 0x02
   226f4:	9b 81       	ldd	r25, Y+3	; 0x03
   226f6:	86 17       	cp	r24, r22
   226f8:	97 07       	cpc	r25, r23
   226fa:	20 f0       	brcs	.+8      	; 0x22704 <String::reserve(unsigned int)+0x20>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:149
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
   226fc:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:153
    return 1;
  }
  return 0;
}
   226fe:	df 91       	pop	r29
   22700:	cf 91       	pop	r28
   22702:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:148
}

unsigned char String::reserve(unsigned int size)
{
  if (buffer && capacity >= size) return 1;
  if (changeBuffer(size)) {
   22704:	ce 01       	movw	r24, r28
   22706:	0f 94 58 13 	call	0x226b0	; 0x226b0 <String::changeBuffer(unsigned int)>
   2270a:	88 23       	and	r24, r24
   2270c:	c1 f3       	breq	.-16     	; 0x226fe <String::reserve(unsigned int)+0x1a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:149
    if (len == 0) buffer[0] = 0;
   2270e:	8c 81       	ldd	r24, Y+4	; 0x04
   22710:	9d 81       	ldd	r25, Y+5	; 0x05
   22712:	89 2b       	or	r24, r25
   22714:	99 f7       	brne	.-26     	; 0x226fc <String::reserve(unsigned int)+0x18>
   22716:	e8 81       	ld	r30, Y
   22718:	f9 81       	ldd	r31, Y+1	; 0x01
   2271a:	10 82       	st	Z, r1
   2271c:	ef cf       	rjmp	.-34     	; 0x226fc <String::reserve(unsigned int)+0x18>

0002271e <String::copy(char const*, unsigned int)>:
_ZN6String4copyEPKcj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:171
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   2271e:	ef 92       	push	r14
   22720:	ff 92       	push	r15
   22722:	0f 93       	push	r16
   22724:	1f 93       	push	r17
   22726:	cf 93       	push	r28
   22728:	df 93       	push	r29
   2272a:	ec 01       	movw	r28, r24
   2272c:	7b 01       	movw	r14, r22
   2272e:	8a 01       	movw	r16, r20
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:172
  if (!reserve(length)) {
   22730:	ba 01       	movw	r22, r20
   22732:	0f 94 72 13 	call	0x226e4	; 0x226e4 <String::reserve(unsigned int)>
   22736:	81 11       	cpse	r24, r1
   22738:	0b c0       	rjmp	.+22     	; 0x22750 <String::copy(char const*, unsigned int)+0x32>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:173
    invalidate();
   2273a:	ce 01       	movw	r24, r28
   2273c:	0f 94 46 13 	call	0x2268c	; 0x2268c <String::invalidate()>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:179
    return *this;
  }
  len = length;
  strcpy(buffer, cstr);
  return *this;
}
   22740:	ce 01       	movw	r24, r28
   22742:	df 91       	pop	r29
   22744:	cf 91       	pop	r28
   22746:	1f 91       	pop	r17
   22748:	0f 91       	pop	r16
   2274a:	ff 90       	pop	r15
   2274c:	ef 90       	pop	r14
   2274e:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:176
{
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
   22750:	1d 83       	std	Y+5, r17	; 0x05
   22752:	0c 83       	std	Y+4, r16	; 0x04
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:177
  strcpy(buffer, cstr);
   22754:	b7 01       	movw	r22, r14
   22756:	88 81       	ld	r24, Y
   22758:	99 81       	ldd	r25, Y+1	; 0x01
   2275a:	0f 94 67 1a 	call	0x234ce	; 0x234ce <strcpy>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:178
  return *this;
   2275e:	f0 cf       	rjmp	.-32     	; 0x22740 <String::copy(char const*, unsigned int)+0x22>

00022760 <String::String(char const*)>:
_ZN6String4initEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:133
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
   22760:	fc 01       	movw	r30, r24
   22762:	11 82       	std	Z+1, r1	; 0x01
   22764:	10 82       	st	Z, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:134
  capacity = 0;
   22766:	13 82       	std	Z+3, r1	; 0x03
   22768:	12 82       	std	Z+2, r1	; 0x02
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:135
  len = 0;
   2276a:	15 82       	std	Z+5, r1	; 0x05
   2276c:	14 82       	std	Z+4, r1	; 0x04
_ZN6StringC2EPKc():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:31
/*********************************************/

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
   2276e:	61 15       	cp	r22, r1
   22770:	71 05       	cpc	r23, r1
   22772:	51 f0       	breq	.+20     	; 0x22788 <String::String(char const*)+0x28>
   22774:	fb 01       	movw	r30, r22
   22776:	01 90       	ld	r0, Z+
   22778:	00 20       	and	r0, r0
   2277a:	e9 f7       	brne	.-6      	; 0x22776 <String::String(char const*)+0x16>
   2277c:	31 97       	sbiw	r30, 0x01	; 1
   2277e:	af 01       	movw	r20, r30
   22780:	46 1b       	sub	r20, r22
   22782:	57 0b       	sbc	r21, r23
   22784:	0d 94 8f 13 	jmp	0x2271e	; 0x2271e <String::copy(char const*, unsigned int)>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:32
}
   22788:	08 95       	ret

0002278a <__cxa_pure_virtual>:
__cxa_pure_virtual():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/abi.cpp:27
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
   2278a:	0f 94 e7 19 	call	0x233ce	; 0x233ce <abort>

0002278e <initVariant>:
initVariant():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
   2278e:	08 95       	ret

00022790 <main>:
main():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
   22790:	0f 94 77 0f 	call	0x21eee	; 0x21eee <init>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:37

  initVariant();
   22794:	0f 94 c7 13 	call	0x2278e	; 0x2278e <initVariant>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
   22798:	0e 94 d1 9d 	call	0x13ba2	; 0x13ba2 <setup>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
   2279c:	c4 e7       	ldi	r28, 0x74	; 116
   2279e:	d2 e0       	ldi	r29, 0x02	; 2
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
   227a0:	0e 94 3a a7 	call	0x14e74	; 0x14e74 <loop>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
   227a4:	20 97       	sbiw	r28, 0x00	; 0
   227a6:	e1 f3       	breq	.-8      	; 0x227a0 <main+0x10>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:47 (discriminator 1)
   227a8:	0f 94 f4 10 	call	0x221e8	; 0x221e8 <serialEventRun()>
   227ac:	f9 cf       	rjmp	.-14     	; 0x227a0 <main+0x10>

000227ae <operator new(unsigned int)>:
_Znwj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/new.cpp:22
*/

#include <stdlib.h>

void *operator new(size_t size) {
  return malloc(size);
   227ae:	0d 94 de 16 	jmp	0x22dbc	; 0x22dbc <malloc>

000227b2 <operator new[](unsigned int)>:
_Znaj():
   227b2:	0d 94 de 16 	jmp	0x22dbc	; 0x22dbc <malloc>

000227b6 <__subsf3>:
__subsf3():
   227b6:	50 58       	subi	r21, 0x80	; 128

000227b8 <__addsf3>:
   227b8:	bb 27       	eor	r27, r27
   227ba:	aa 27       	eor	r26, r26
   227bc:	0f 94 f3 13 	call	0x227e6	; 0x227e6 <__addsf3x>
   227c0:	0d 94 6d 15 	jmp	0x22ada	; 0x22ada <__fp_round>
__addsf3():
   227c4:	0f 94 5f 15 	call	0x22abe	; 0x22abe <__fp_pscA>
   227c8:	38 f0       	brcs	.+14     	; 0x227d8 <__addsf3+0x20>
   227ca:	0f 94 66 15 	call	0x22acc	; 0x22acc <__fp_pscB>
   227ce:	20 f0       	brcs	.+8      	; 0x227d8 <__addsf3+0x20>
   227d0:	39 f4       	brne	.+14     	; 0x227e0 <__addsf3+0x28>
   227d2:	9f 3f       	cpi	r25, 0xFF	; 255
   227d4:	19 f4       	brne	.+6      	; 0x227dc <__addsf3+0x24>
   227d6:	26 f4       	brtc	.+8      	; 0x227e0 <__addsf3+0x28>
   227d8:	0d 94 5c 15 	jmp	0x22ab8	; 0x22ab8 <__fp_nan>
   227dc:	0e f4       	brtc	.+2      	; 0x227e0 <__addsf3+0x28>
   227de:	e0 95       	com	r30
   227e0:	e7 fb       	bst	r30, 7
   227e2:	0d 94 56 15 	jmp	0x22aac	; 0x22aac <__fp_inf>

000227e6 <__addsf3x>:
__addsf3x():
   227e6:	e9 2f       	mov	r30, r25
   227e8:	0f 94 7e 15 	call	0x22afc	; 0x22afc <__fp_split3>
   227ec:	58 f3       	brcs	.-42     	; 0x227c4 <__addsf3+0xc>
   227ee:	ba 17       	cp	r27, r26
   227f0:	62 07       	cpc	r22, r18
   227f2:	73 07       	cpc	r23, r19
   227f4:	84 07       	cpc	r24, r20
   227f6:	95 07       	cpc	r25, r21
   227f8:	20 f0       	brcs	.+8      	; 0x22802 <__addsf3x+0x1c>
   227fa:	79 f4       	brne	.+30     	; 0x2281a <__addsf3x+0x34>
   227fc:	a6 f5       	brtc	.+104    	; 0x22866 <__addsf3x+0x80>
   227fe:	0d 94 a0 15 	jmp	0x22b40	; 0x22b40 <__fp_zero>
   22802:	0e f4       	brtc	.+2      	; 0x22806 <__addsf3x+0x20>
   22804:	e0 95       	com	r30
   22806:	0b 2e       	mov	r0, r27
   22808:	ba 2f       	mov	r27, r26
   2280a:	a0 2d       	mov	r26, r0
   2280c:	0b 01       	movw	r0, r22
   2280e:	b9 01       	movw	r22, r18
   22810:	90 01       	movw	r18, r0
   22812:	0c 01       	movw	r0, r24
   22814:	ca 01       	movw	r24, r20
   22816:	a0 01       	movw	r20, r0
   22818:	11 24       	eor	r1, r1
   2281a:	ff 27       	eor	r31, r31
   2281c:	59 1b       	sub	r21, r25
   2281e:	99 f0       	breq	.+38     	; 0x22846 <__addsf3x+0x60>
   22820:	59 3f       	cpi	r21, 0xF9	; 249
   22822:	50 f4       	brcc	.+20     	; 0x22838 <__addsf3x+0x52>
   22824:	50 3e       	cpi	r21, 0xE0	; 224
   22826:	68 f1       	brcs	.+90     	; 0x22882 <__addsf3x+0x9c>
   22828:	1a 16       	cp	r1, r26
   2282a:	f0 40       	sbci	r31, 0x00	; 0
   2282c:	a2 2f       	mov	r26, r18
   2282e:	23 2f       	mov	r18, r19
   22830:	34 2f       	mov	r19, r20
   22832:	44 27       	eor	r20, r20
   22834:	58 5f       	subi	r21, 0xF8	; 248
   22836:	f3 cf       	rjmp	.-26     	; 0x2281e <__addsf3x+0x38>
   22838:	46 95       	lsr	r20
   2283a:	37 95       	ror	r19
   2283c:	27 95       	ror	r18
   2283e:	a7 95       	ror	r26
   22840:	f0 40       	sbci	r31, 0x00	; 0
   22842:	53 95       	inc	r21
   22844:	c9 f7       	brne	.-14     	; 0x22838 <__addsf3x+0x52>
   22846:	7e f4       	brtc	.+30     	; 0x22866 <__addsf3x+0x80>
   22848:	1f 16       	cp	r1, r31
   2284a:	ba 0b       	sbc	r27, r26
   2284c:	62 0b       	sbc	r22, r18
   2284e:	73 0b       	sbc	r23, r19
   22850:	84 0b       	sbc	r24, r20
   22852:	ba f0       	brmi	.+46     	; 0x22882 <__addsf3x+0x9c>
   22854:	91 50       	subi	r25, 0x01	; 1
   22856:	a1 f0       	breq	.+40     	; 0x22880 <__addsf3x+0x9a>
   22858:	ff 0f       	add	r31, r31
   2285a:	bb 1f       	adc	r27, r27
   2285c:	66 1f       	adc	r22, r22
   2285e:	77 1f       	adc	r23, r23
   22860:	88 1f       	adc	r24, r24
   22862:	c2 f7       	brpl	.-16     	; 0x22854 <__addsf3x+0x6e>
   22864:	0e c0       	rjmp	.+28     	; 0x22882 <__addsf3x+0x9c>
   22866:	ba 0f       	add	r27, r26
   22868:	62 1f       	adc	r22, r18
   2286a:	73 1f       	adc	r23, r19
   2286c:	84 1f       	adc	r24, r20
   2286e:	48 f4       	brcc	.+18     	; 0x22882 <__addsf3x+0x9c>
   22870:	87 95       	ror	r24
   22872:	77 95       	ror	r23
   22874:	67 95       	ror	r22
   22876:	b7 95       	ror	r27
   22878:	f7 95       	ror	r31
   2287a:	9e 3f       	cpi	r25, 0xFE	; 254
   2287c:	08 f0       	brcs	.+2      	; 0x22880 <__addsf3x+0x9a>
   2287e:	b0 cf       	rjmp	.-160    	; 0x227e0 <__addsf3+0x28>
   22880:	93 95       	inc	r25
   22882:	88 0f       	add	r24, r24
   22884:	08 f0       	brcs	.+2      	; 0x22888 <__addsf3x+0xa2>
   22886:	99 27       	eor	r25, r25
   22888:	ee 0f       	add	r30, r30
   2288a:	97 95       	ror	r25
   2288c:	87 95       	ror	r24
   2288e:	08 95       	ret

00022890 <__cmpsf2>:
   22890:	0f 94 32 15 	call	0x22a64	; 0x22a64 <__fp_cmp>
   22894:	08 f4       	brcc	.+2      	; 0x22898 <__cmpsf2+0x8>
   22896:	81 e0       	ldi	r24, 0x01	; 1
   22898:	08 95       	ret

0002289a <__divsf3>:
   2289a:	0f 94 61 14 	call	0x228c2	; 0x228c2 <__divsf3x>
   2289e:	0d 94 6d 15 	jmp	0x22ada	; 0x22ada <__fp_round>
   228a2:	0f 94 66 15 	call	0x22acc	; 0x22acc <__fp_pscB>
   228a6:	58 f0       	brcs	.+22     	; 0x228be <__divsf3+0x24>
   228a8:	0f 94 5f 15 	call	0x22abe	; 0x22abe <__fp_pscA>
   228ac:	40 f0       	brcs	.+16     	; 0x228be <__divsf3+0x24>
   228ae:	29 f4       	brne	.+10     	; 0x228ba <__divsf3+0x20>
   228b0:	5f 3f       	cpi	r21, 0xFF	; 255
__divsf3():
   228b2:	29 f0       	breq	.+10     	; 0x228be <__divsf3+0x24>
   228b4:	0d 94 56 15 	jmp	0x22aac	; 0x22aac <__fp_inf>
   228b8:	51 11       	cpse	r21, r1
   228ba:	0d 94 a1 15 	jmp	0x22b42	; 0x22b42 <__fp_szero>
   228be:	0d 94 5c 15 	jmp	0x22ab8	; 0x22ab8 <__fp_nan>

000228c2 <__divsf3x>:
__divsf3x():
   228c2:	0f 94 7e 15 	call	0x22afc	; 0x22afc <__fp_split3>
   228c6:	68 f3       	brcs	.-38     	; 0x228a2 <__divsf3+0x8>

000228c8 <__divsf3_pse>:
   228c8:	99 23       	and	r25, r25
   228ca:	b1 f3       	breq	.-20     	; 0x228b8 <__divsf3+0x1e>
   228cc:	55 23       	and	r21, r21
   228ce:	91 f3       	breq	.-28     	; 0x228b4 <__divsf3+0x1a>
   228d0:	95 1b       	sub	r25, r21
   228d2:	55 0b       	sbc	r21, r21
   228d4:	bb 27       	eor	r27, r27
   228d6:	aa 27       	eor	r26, r26
   228d8:	62 17       	cp	r22, r18
   228da:	73 07       	cpc	r23, r19
   228dc:	84 07       	cpc	r24, r20
   228de:	38 f0       	brcs	.+14     	; 0x228ee <__divsf3_pse+0x26>
   228e0:	9f 5f       	subi	r25, 0xFF	; 255
   228e2:	5f 4f       	sbci	r21, 0xFF	; 255
   228e4:	22 0f       	add	r18, r18
   228e6:	33 1f       	adc	r19, r19
   228e8:	44 1f       	adc	r20, r20
   228ea:	aa 1f       	adc	r26, r26
   228ec:	a9 f3       	breq	.-22     	; 0x228d8 <__divsf3_pse+0x10>
   228ee:	35 d0       	rcall	.+106    	; 0x2295a <__divsf3_pse+0x92>
   228f0:	0e 2e       	mov	r0, r30
   228f2:	3a f0       	brmi	.+14     	; 0x22902 <__divsf3_pse+0x3a>
   228f4:	e0 e8       	ldi	r30, 0x80	; 128
   228f6:	32 d0       	rcall	.+100    	; 0x2295c <__divsf3_pse+0x94>
   228f8:	91 50       	subi	r25, 0x01	; 1
   228fa:	50 40       	sbci	r21, 0x00	; 0
   228fc:	e6 95       	lsr	r30
   228fe:	00 1c       	adc	r0, r0
   22900:	ca f7       	brpl	.-14     	; 0x228f4 <__divsf3_pse+0x2c>
   22902:	2b d0       	rcall	.+86     	; 0x2295a <__divsf3_pse+0x92>
   22904:	fe 2f       	mov	r31, r30
   22906:	29 d0       	rcall	.+82     	; 0x2295a <__divsf3_pse+0x92>
   22908:	66 0f       	add	r22, r22
   2290a:	77 1f       	adc	r23, r23
   2290c:	88 1f       	adc	r24, r24
   2290e:	bb 1f       	adc	r27, r27
   22910:	26 17       	cp	r18, r22
   22912:	37 07       	cpc	r19, r23
   22914:	48 07       	cpc	r20, r24
   22916:	ab 07       	cpc	r26, r27
   22918:	b0 e8       	ldi	r27, 0x80	; 128
   2291a:	09 f0       	breq	.+2      	; 0x2291e <__divsf3_pse+0x56>
   2291c:	bb 0b       	sbc	r27, r27
   2291e:	80 2d       	mov	r24, r0
   22920:	bf 01       	movw	r22, r30
   22922:	ff 27       	eor	r31, r31
   22924:	93 58       	subi	r25, 0x83	; 131
   22926:	5f 4f       	sbci	r21, 0xFF	; 255
   22928:	3a f0       	brmi	.+14     	; 0x22938 <__divsf3_pse+0x70>
   2292a:	9e 3f       	cpi	r25, 0xFE	; 254
   2292c:	51 05       	cpc	r21, r1
   2292e:	78 f0       	brcs	.+30     	; 0x2294e <__divsf3_pse+0x86>
   22930:	0d 94 56 15 	jmp	0x22aac	; 0x22aac <__fp_inf>
   22934:	0d 94 a1 15 	jmp	0x22b42	; 0x22b42 <__fp_szero>
   22938:	5f 3f       	cpi	r21, 0xFF	; 255
   2293a:	e4 f3       	brlt	.-8      	; 0x22934 <__divsf3_pse+0x6c>
   2293c:	98 3e       	cpi	r25, 0xE8	; 232
   2293e:	d4 f3       	brlt	.-12     	; 0x22934 <__divsf3_pse+0x6c>
   22940:	86 95       	lsr	r24
   22942:	77 95       	ror	r23
   22944:	67 95       	ror	r22
   22946:	b7 95       	ror	r27
   22948:	f7 95       	ror	r31
   2294a:	9f 5f       	subi	r25, 0xFF	; 255
   2294c:	c9 f7       	brne	.-14     	; 0x22940 <__divsf3_pse+0x78>
   2294e:	88 0f       	add	r24, r24
   22950:	91 1d       	adc	r25, r1
   22952:	96 95       	lsr	r25
   22954:	87 95       	ror	r24
   22956:	97 f9       	bld	r25, 7
   22958:	08 95       	ret
   2295a:	e1 e0       	ldi	r30, 0x01	; 1
   2295c:	66 0f       	add	r22, r22
   2295e:	77 1f       	adc	r23, r23
   22960:	88 1f       	adc	r24, r24
   22962:	bb 1f       	adc	r27, r27
   22964:	62 17       	cp	r22, r18
   22966:	73 07       	cpc	r23, r19
   22968:	84 07       	cpc	r24, r20
   2296a:	ba 07       	cpc	r27, r26
   2296c:	20 f0       	brcs	.+8      	; 0x22976 <__divsf3_pse+0xae>
   2296e:	62 1b       	sub	r22, r18
   22970:	73 0b       	sbc	r23, r19
   22972:	84 0b       	sbc	r24, r20
   22974:	ba 0b       	sbc	r27, r26
   22976:	ee 1f       	adc	r30, r30
   22978:	88 f7       	brcc	.-30     	; 0x2295c <__divsf3_pse+0x94>
   2297a:	e0 95       	com	r30
   2297c:	08 95       	ret

0002297e <__fixsfsi>:
   2297e:	0f 94 c6 14 	call	0x2298c	; 0x2298c <__fixunssfsi>
   22982:	68 94       	set
   22984:	b1 11       	cpse	r27, r1
   22986:	0d 94 a1 15 	jmp	0x22b42	; 0x22b42 <__fp_szero>
   2298a:	08 95       	ret

0002298c <__fixunssfsi>:
   2298c:	0f 94 86 15 	call	0x22b0c	; 0x22b0c <__fp_splitA>
   22990:	88 f0       	brcs	.+34     	; 0x229b4 <__fixunssfsi+0x28>
   22992:	9f 57       	subi	r25, 0x7F	; 127
   22994:	98 f0       	brcs	.+38     	; 0x229bc <__fixunssfsi+0x30>
   22996:	b9 2f       	mov	r27, r25
   22998:	99 27       	eor	r25, r25
   2299a:	b7 51       	subi	r27, 0x17	; 23
   2299c:	b0 f0       	brcs	.+44     	; 0x229ca <__fixunssfsi+0x3e>
__fixunssfsi():
   2299e:	e1 f0       	breq	.+56     	; 0x229d8 <__fixunssfsi+0x4c>
   229a0:	66 0f       	add	r22, r22
   229a2:	77 1f       	adc	r23, r23
   229a4:	88 1f       	adc	r24, r24
   229a6:	99 1f       	adc	r25, r25
   229a8:	1a f0       	brmi	.+6      	; 0x229b0 <__fixunssfsi+0x24>
   229aa:	ba 95       	dec	r27
   229ac:	c9 f7       	brne	.-14     	; 0x229a0 <__fixunssfsi+0x14>
   229ae:	14 c0       	rjmp	.+40     	; 0x229d8 <__fixunssfsi+0x4c>
   229b0:	b1 30       	cpi	r27, 0x01	; 1
   229b2:	91 f0       	breq	.+36     	; 0x229d8 <__fixunssfsi+0x4c>
   229b4:	0f 94 a0 15 	call	0x22b40	; 0x22b40 <__fp_zero>
   229b8:	b1 e0       	ldi	r27, 0x01	; 1
   229ba:	08 95       	ret
   229bc:	0d 94 a0 15 	jmp	0x22b40	; 0x22b40 <__fp_zero>
   229c0:	67 2f       	mov	r22, r23
   229c2:	78 2f       	mov	r23, r24
   229c4:	88 27       	eor	r24, r24
   229c6:	b8 5f       	subi	r27, 0xF8	; 248
   229c8:	39 f0       	breq	.+14     	; 0x229d8 <__fixunssfsi+0x4c>
   229ca:	b9 3f       	cpi	r27, 0xF9	; 249
   229cc:	cc f3       	brlt	.-14     	; 0x229c0 <__fixunssfsi+0x34>
   229ce:	86 95       	lsr	r24
   229d0:	77 95       	ror	r23
   229d2:	67 95       	ror	r22
   229d4:	b3 95       	inc	r27
   229d6:	d9 f7       	brne	.-10     	; 0x229ce <__fixunssfsi+0x42>
   229d8:	3e f4       	brtc	.+14     	; 0x229e8 <__fixunssfsi+0x5c>
   229da:	90 95       	com	r25
   229dc:	80 95       	com	r24
   229de:	70 95       	com	r23
   229e0:	61 95       	neg	r22
   229e2:	7f 4f       	sbci	r23, 0xFF	; 255
   229e4:	8f 4f       	sbci	r24, 0xFF	; 255
   229e6:	9f 4f       	sbci	r25, 0xFF	; 255
   229e8:	08 95       	ret

000229ea <__floatunsisf>:
__floatunsisf():
   229ea:	e8 94       	clt
   229ec:	09 c0       	rjmp	.+18     	; 0x22a00 <__floatsisf+0x12>

000229ee <__floatsisf>:
   229ee:	97 fb       	bst	r25, 7
   229f0:	3e f4       	brtc	.+14     	; 0x22a00 <__floatsisf+0x12>
   229f2:	90 95       	com	r25
   229f4:	80 95       	com	r24
   229f6:	70 95       	com	r23
   229f8:	61 95       	neg	r22
   229fa:	7f 4f       	sbci	r23, 0xFF	; 255
   229fc:	8f 4f       	sbci	r24, 0xFF	; 255
   229fe:	9f 4f       	sbci	r25, 0xFF	; 255
   22a00:	99 23       	and	r25, r25
   22a02:	a9 f0       	breq	.+42     	; 0x22a2e <__floatsisf+0x40>
   22a04:	f9 2f       	mov	r31, r25
   22a06:	96 e9       	ldi	r25, 0x96	; 150
   22a08:	bb 27       	eor	r27, r27
   22a0a:	93 95       	inc	r25
   22a0c:	f6 95       	lsr	r31
   22a0e:	87 95       	ror	r24
   22a10:	77 95       	ror	r23
   22a12:	67 95       	ror	r22
   22a14:	b7 95       	ror	r27
   22a16:	f1 11       	cpse	r31, r1
   22a18:	f8 cf       	rjmp	.-16     	; 0x22a0a <__floatsisf+0x1c>
   22a1a:	fa f4       	brpl	.+62     	; 0x22a5a <__floatsisf+0x6c>
   22a1c:	bb 0f       	add	r27, r27
   22a1e:	11 f4       	brne	.+4      	; 0x22a24 <__floatsisf+0x36>
   22a20:	60 ff       	sbrs	r22, 0
   22a22:	1b c0       	rjmp	.+54     	; 0x22a5a <__floatsisf+0x6c>
   22a24:	6f 5f       	subi	r22, 0xFF	; 255
   22a26:	7f 4f       	sbci	r23, 0xFF	; 255
   22a28:	8f 4f       	sbci	r24, 0xFF	; 255
   22a2a:	9f 4f       	sbci	r25, 0xFF	; 255
   22a2c:	16 c0       	rjmp	.+44     	; 0x22a5a <__floatsisf+0x6c>
   22a2e:	88 23       	and	r24, r24
   22a30:	11 f0       	breq	.+4      	; 0x22a36 <__floatsisf+0x48>
   22a32:	96 e9       	ldi	r25, 0x96	; 150
   22a34:	11 c0       	rjmp	.+34     	; 0x22a58 <__floatsisf+0x6a>
   22a36:	77 23       	and	r23, r23
   22a38:	21 f0       	breq	.+8      	; 0x22a42 <__floatsisf+0x54>
   22a3a:	9e e8       	ldi	r25, 0x8E	; 142
   22a3c:	87 2f       	mov	r24, r23
   22a3e:	76 2f       	mov	r23, r22
   22a40:	05 c0       	rjmp	.+10     	; 0x22a4c <__floatsisf+0x5e>
   22a42:	66 23       	and	r22, r22
   22a44:	71 f0       	breq	.+28     	; 0x22a62 <__floatsisf+0x74>
   22a46:	96 e8       	ldi	r25, 0x86	; 134
   22a48:	86 2f       	mov	r24, r22
   22a4a:	70 e0       	ldi	r23, 0x00	; 0
   22a4c:	60 e0       	ldi	r22, 0x00	; 0
   22a4e:	2a f0       	brmi	.+10     	; 0x22a5a <__floatsisf+0x6c>
   22a50:	9a 95       	dec	r25
   22a52:	66 0f       	add	r22, r22
   22a54:	77 1f       	adc	r23, r23
   22a56:	88 1f       	adc	r24, r24
   22a58:	da f7       	brpl	.-10     	; 0x22a50 <__floatsisf+0x62>
   22a5a:	88 0f       	add	r24, r24
   22a5c:	96 95       	lsr	r25
   22a5e:	87 95       	ror	r24
   22a60:	97 f9       	bld	r25, 7
   22a62:	08 95       	ret

00022a64 <__fp_cmp>:
__fp_cmp():
   22a64:	99 0f       	add	r25, r25
   22a66:	00 08       	sbc	r0, r0
   22a68:	55 0f       	add	r21, r21
   22a6a:	aa 0b       	sbc	r26, r26
   22a6c:	e0 e8       	ldi	r30, 0x80	; 128
   22a6e:	fe ef       	ldi	r31, 0xFE	; 254
   22a70:	16 16       	cp	r1, r22
   22a72:	17 06       	cpc	r1, r23
   22a74:	e8 07       	cpc	r30, r24
   22a76:	f9 07       	cpc	r31, r25
   22a78:	c0 f0       	brcs	.+48     	; 0x22aaa <__fp_cmp+0x46>
   22a7a:	12 16       	cp	r1, r18
   22a7c:	13 06       	cpc	r1, r19
   22a7e:	e4 07       	cpc	r30, r20
   22a80:	f5 07       	cpc	r31, r21
   22a82:	98 f0       	brcs	.+38     	; 0x22aaa <__fp_cmp+0x46>
   22a84:	62 1b       	sub	r22, r18
   22a86:	73 0b       	sbc	r23, r19
   22a88:	84 0b       	sbc	r24, r20
   22a8a:	95 0b       	sbc	r25, r21
   22a8c:	39 f4       	brne	.+14     	; 0x22a9c <__fp_cmp+0x38>
   22a8e:	0a 26       	eor	r0, r26
   22a90:	61 f0       	breq	.+24     	; 0x22aaa <__fp_cmp+0x46>
   22a92:	23 2b       	or	r18, r19
   22a94:	24 2b       	or	r18, r20
   22a96:	25 2b       	or	r18, r21
   22a98:	21 f4       	brne	.+8      	; 0x22aa2 <__fp_cmp+0x3e>
   22a9a:	08 95       	ret
   22a9c:	0a 26       	eor	r0, r26
   22a9e:	09 f4       	brne	.+2      	; 0x22aa2 <__fp_cmp+0x3e>
   22aa0:	a1 40       	sbci	r26, 0x01	; 1
   22aa2:	a6 95       	lsr	r26
   22aa4:	8f ef       	ldi	r24, 0xFF	; 255
   22aa6:	81 1d       	adc	r24, r1
   22aa8:	81 1d       	adc	r24, r1
   22aaa:	08 95       	ret

00022aac <__fp_inf>:
__fp_inf():
   22aac:	97 f9       	bld	r25, 7
   22aae:	9f 67       	ori	r25, 0x7F	; 127
   22ab0:	80 e8       	ldi	r24, 0x80	; 128
   22ab2:	70 e0       	ldi	r23, 0x00	; 0
   22ab4:	60 e0       	ldi	r22, 0x00	; 0
   22ab6:	08 95       	ret

00022ab8 <__fp_nan>:
__fp_nan():
   22ab8:	9f ef       	ldi	r25, 0xFF	; 255
   22aba:	80 ec       	ldi	r24, 0xC0	; 192
   22abc:	08 95       	ret

00022abe <__fp_pscA>:
__fp_pscA():
   22abe:	00 24       	eor	r0, r0
   22ac0:	0a 94       	dec	r0
   22ac2:	16 16       	cp	r1, r22
   22ac4:	17 06       	cpc	r1, r23
   22ac6:	18 06       	cpc	r1, r24
   22ac8:	09 06       	cpc	r0, r25
   22aca:	08 95       	ret

00022acc <__fp_pscB>:
__fp_pscB():
   22acc:	00 24       	eor	r0, r0
   22ace:	0a 94       	dec	r0
   22ad0:	12 16       	cp	r1, r18
   22ad2:	13 06       	cpc	r1, r19
   22ad4:	14 06       	cpc	r1, r20
   22ad6:	05 06       	cpc	r0, r21
   22ad8:	08 95       	ret

00022ada <__fp_round>:
__fp_round():
   22ada:	09 2e       	mov	r0, r25
   22adc:	03 94       	inc	r0
   22ade:	00 0c       	add	r0, r0
   22ae0:	11 f4       	brne	.+4      	; 0x22ae6 <__fp_round+0xc>
   22ae2:	88 23       	and	r24, r24
   22ae4:	52 f0       	brmi	.+20     	; 0x22afa <__fp_round+0x20>
   22ae6:	bb 0f       	add	r27, r27
   22ae8:	40 f4       	brcc	.+16     	; 0x22afa <__fp_round+0x20>
   22aea:	bf 2b       	or	r27, r31
   22aec:	11 f4       	brne	.+4      	; 0x22af2 <__fp_round+0x18>
   22aee:	60 ff       	sbrs	r22, 0
   22af0:	04 c0       	rjmp	.+8      	; 0x22afa <__fp_round+0x20>
   22af2:	6f 5f       	subi	r22, 0xFF	; 255
   22af4:	7f 4f       	sbci	r23, 0xFF	; 255
   22af6:	8f 4f       	sbci	r24, 0xFF	; 255
   22af8:	9f 4f       	sbci	r25, 0xFF	; 255
   22afa:	08 95       	ret

00022afc <__fp_split3>:
__fp_split3():
   22afc:	57 fd       	sbrc	r21, 7
   22afe:	90 58       	subi	r25, 0x80	; 128
   22b00:	44 0f       	add	r20, r20
   22b02:	55 1f       	adc	r21, r21
   22b04:	59 f0       	breq	.+22     	; 0x22b1c <__fp_splitA+0x10>
   22b06:	5f 3f       	cpi	r21, 0xFF	; 255
   22b08:	71 f0       	breq	.+28     	; 0x22b26 <__fp_splitA+0x1a>
   22b0a:	47 95       	ror	r20

00022b0c <__fp_splitA>:
   22b0c:	88 0f       	add	r24, r24
   22b0e:	97 fb       	bst	r25, 7
   22b10:	99 1f       	adc	r25, r25
   22b12:	61 f0       	breq	.+24     	; 0x22b2c <__fp_splitA+0x20>
   22b14:	9f 3f       	cpi	r25, 0xFF	; 255
   22b16:	79 f0       	breq	.+30     	; 0x22b36 <__fp_splitA+0x2a>
   22b18:	87 95       	ror	r24
   22b1a:	08 95       	ret
   22b1c:	12 16       	cp	r1, r18
   22b1e:	13 06       	cpc	r1, r19
   22b20:	14 06       	cpc	r1, r20
   22b22:	55 1f       	adc	r21, r21
   22b24:	f2 cf       	rjmp	.-28     	; 0x22b0a <__fp_split3+0xe>
   22b26:	46 95       	lsr	r20
   22b28:	f1 df       	rcall	.-30     	; 0x22b0c <__fp_splitA>
   22b2a:	08 c0       	rjmp	.+16     	; 0x22b3c <__fp_splitA+0x30>
   22b2c:	16 16       	cp	r1, r22
   22b2e:	17 06       	cpc	r1, r23
   22b30:	18 06       	cpc	r1, r24
   22b32:	99 1f       	adc	r25, r25
   22b34:	f1 cf       	rjmp	.-30     	; 0x22b18 <__fp_splitA+0xc>
   22b36:	86 95       	lsr	r24
   22b38:	71 05       	cpc	r23, r1
   22b3a:	61 05       	cpc	r22, r1
   22b3c:	08 94       	sec
   22b3e:	08 95       	ret

00022b40 <__fp_zero>:
__fp_zero():
   22b40:	e8 94       	clt

00022b42 <__fp_szero>:
   22b42:	bb 27       	eor	r27, r27
   22b44:	66 27       	eor	r22, r22
   22b46:	77 27       	eor	r23, r23
   22b48:	cb 01       	movw	r24, r22
   22b4a:	97 f9       	bld	r25, 7
   22b4c:	08 95       	ret

00022b4e <__gesf2>:
__gesf2():
   22b4e:	0f 94 32 15 	call	0x22a64	; 0x22a64 <__fp_cmp>
   22b52:	08 f4       	brcc	.+2      	; 0x22b56 <__gesf2+0x8>
   22b54:	8f ef       	ldi	r24, 0xFF	; 255
   22b56:	08 95       	ret

00022b58 <__mulsf3>:
__mulsf3():
   22b58:	0f 94 bf 15 	call	0x22b7e	; 0x22b7e <__mulsf3x>
   22b5c:	0d 94 6d 15 	jmp	0x22ada	; 0x22ada <__fp_round>
   22b60:	0f 94 5f 15 	call	0x22abe	; 0x22abe <__fp_pscA>
   22b64:	38 f0       	brcs	.+14     	; 0x22b74 <__mulsf3+0x1c>
   22b66:	0f 94 66 15 	call	0x22acc	; 0x22acc <__fp_pscB>
   22b6a:	20 f0       	brcs	.+8      	; 0x22b74 <__mulsf3+0x1c>
   22b6c:	95 23       	and	r25, r21
   22b6e:	11 f0       	breq	.+4      	; 0x22b74 <__mulsf3+0x1c>
   22b70:	0d 94 56 15 	jmp	0x22aac	; 0x22aac <__fp_inf>
   22b74:	0d 94 5c 15 	jmp	0x22ab8	; 0x22ab8 <__fp_nan>
   22b78:	11 24       	eor	r1, r1
   22b7a:	0d 94 a1 15 	jmp	0x22b42	; 0x22b42 <__fp_szero>

00022b7e <__mulsf3x>:
__mulsf3x():
   22b7e:	0f 94 7e 15 	call	0x22afc	; 0x22afc <__fp_split3>
   22b82:	70 f3       	brcs	.-36     	; 0x22b60 <__mulsf3+0x8>

00022b84 <__mulsf3_pse>:
   22b84:	95 9f       	mul	r25, r21
   22b86:	c1 f3       	breq	.-16     	; 0x22b78 <__mulsf3+0x20>
   22b88:	95 0f       	add	r25, r21
   22b8a:	50 e0       	ldi	r21, 0x00	; 0
   22b8c:	55 1f       	adc	r21, r21
   22b8e:	62 9f       	mul	r22, r18
   22b90:	f0 01       	movw	r30, r0
   22b92:	72 9f       	mul	r23, r18
   22b94:	bb 27       	eor	r27, r27
   22b96:	f0 0d       	add	r31, r0
   22b98:	b1 1d       	adc	r27, r1
   22b9a:	63 9f       	mul	r22, r19
   22b9c:	aa 27       	eor	r26, r26
   22b9e:	f0 0d       	add	r31, r0
   22ba0:	b1 1d       	adc	r27, r1
   22ba2:	aa 1f       	adc	r26, r26
   22ba4:	64 9f       	mul	r22, r20
   22ba6:	66 27       	eor	r22, r22
   22ba8:	b0 0d       	add	r27, r0
   22baa:	a1 1d       	adc	r26, r1
   22bac:	66 1f       	adc	r22, r22
   22bae:	82 9f       	mul	r24, r18
   22bb0:	22 27       	eor	r18, r18
   22bb2:	b0 0d       	add	r27, r0
   22bb4:	a1 1d       	adc	r26, r1
   22bb6:	62 1f       	adc	r22, r18
   22bb8:	73 9f       	mul	r23, r19
   22bba:	b0 0d       	add	r27, r0
   22bbc:	a1 1d       	adc	r26, r1
   22bbe:	62 1f       	adc	r22, r18
   22bc0:	83 9f       	mul	r24, r19
   22bc2:	a0 0d       	add	r26, r0
   22bc4:	61 1d       	adc	r22, r1
   22bc6:	22 1f       	adc	r18, r18
   22bc8:	74 9f       	mul	r23, r20
   22bca:	33 27       	eor	r19, r19
   22bcc:	a0 0d       	add	r26, r0
   22bce:	61 1d       	adc	r22, r1
   22bd0:	23 1f       	adc	r18, r19
   22bd2:	84 9f       	mul	r24, r20
   22bd4:	60 0d       	add	r22, r0
   22bd6:	21 1d       	adc	r18, r1
   22bd8:	82 2f       	mov	r24, r18
   22bda:	76 2f       	mov	r23, r22
   22bdc:	6a 2f       	mov	r22, r26
   22bde:	11 24       	eor	r1, r1
   22be0:	9f 57       	subi	r25, 0x7F	; 127
   22be2:	50 40       	sbci	r21, 0x00	; 0
   22be4:	9a f0       	brmi	.+38     	; 0x22c0c <__mulsf3_pse+0x88>
   22be6:	f1 f0       	breq	.+60     	; 0x22c24 <__mulsf3_pse+0xa0>
   22be8:	88 23       	and	r24, r24
   22bea:	4a f0       	brmi	.+18     	; 0x22bfe <__mulsf3_pse+0x7a>
   22bec:	ee 0f       	add	r30, r30
   22bee:	ff 1f       	adc	r31, r31
   22bf0:	bb 1f       	adc	r27, r27
   22bf2:	66 1f       	adc	r22, r22
   22bf4:	77 1f       	adc	r23, r23
   22bf6:	88 1f       	adc	r24, r24
   22bf8:	91 50       	subi	r25, 0x01	; 1
   22bfa:	50 40       	sbci	r21, 0x00	; 0
   22bfc:	a9 f7       	brne	.-22     	; 0x22be8 <__mulsf3_pse+0x64>
   22bfe:	9e 3f       	cpi	r25, 0xFE	; 254
   22c00:	51 05       	cpc	r21, r1
   22c02:	80 f0       	brcs	.+32     	; 0x22c24 <__mulsf3_pse+0xa0>
   22c04:	0d 94 56 15 	jmp	0x22aac	; 0x22aac <__fp_inf>
   22c08:	0d 94 a1 15 	jmp	0x22b42	; 0x22b42 <__fp_szero>
   22c0c:	5f 3f       	cpi	r21, 0xFF	; 255
   22c0e:	e4 f3       	brlt	.-8      	; 0x22c08 <__mulsf3_pse+0x84>
   22c10:	98 3e       	cpi	r25, 0xE8	; 232
   22c12:	d4 f3       	brlt	.-12     	; 0x22c08 <__mulsf3_pse+0x84>
   22c14:	86 95       	lsr	r24
   22c16:	77 95       	ror	r23
   22c18:	67 95       	ror	r22
   22c1a:	b7 95       	ror	r27
   22c1c:	f7 95       	ror	r31
   22c1e:	e7 95       	ror	r30
   22c20:	9f 5f       	subi	r25, 0xFF	; 255
   22c22:	c1 f7       	brne	.-16     	; 0x22c14 <__mulsf3_pse+0x90>
   22c24:	fe 2b       	or	r31, r30
   22c26:	88 0f       	add	r24, r24
   22c28:	91 1d       	adc	r25, r1
   22c2a:	96 95       	lsr	r25
   22c2c:	87 95       	ror	r24
   22c2e:	97 f9       	bld	r25, 7
   22c30:	08 95       	ret

00022c32 <__mulsi3>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:648
   22c32:	db 01       	movw	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:649
   22c34:	8f 93       	push	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:650
   22c36:	9f 93       	push	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:651
   22c38:	0f 94 b5 16 	call	0x22d6a	; 0x22d6a <__muluhisi3>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:652
   22c3c:	bf 91       	pop	r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:653
   22c3e:	af 91       	pop	r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:655
   22c40:	a2 9f       	mul	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:656
   22c42:	80 0d       	add	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:657
   22c44:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:658
   22c46:	a3 9f       	mul	r26, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:659
   22c48:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:660
   22c4a:	b2 9f       	mul	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:661
   22c4c:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:662
   22c4e:	11 24       	eor	r1, r1
__mulsi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:663
   22c50:	08 95       	ret

00022c52 <__udivmodqi4>:
__udivmodqi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1346
   22c52:	99 1b       	sub	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1347
   22c54:	79 e0       	ldi	r23, 0x09	; 9
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1348
   22c56:	04 c0       	rjmp	.+8      	; 0x22c60 <__udivmodqi4_ep>

00022c58 <__udivmodqi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1350
   22c58:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1351
   22c5a:	96 17       	cp	r25, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1352
   22c5c:	08 f0       	brcs	.+2      	; 0x22c60 <__udivmodqi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1353
   22c5e:	96 1b       	sub	r25, r22

00022c60 <__udivmodqi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1355
   22c60:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1356
   22c62:	7a 95       	dec	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1357
   22c64:	c9 f7       	brne	.-14     	; 0x22c58 <__udivmodqi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1358
   22c66:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1360
   22c68:	08 95       	ret

00022c6a <__udivmodhi4>:
__udivmodhi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
   22c6a:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
   22c6c:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
   22c6e:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
   22c70:	07 c0       	rjmp	.+14     	; 0x22c80 <__udivmodhi4_ep>

00022c72 <__udivmodhi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
   22c72:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
   22c74:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
   22c76:	a6 17       	cp	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
   22c78:	b7 07       	cpc	r27, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
   22c7a:	10 f0       	brcs	.+4      	; 0x22c80 <__udivmodhi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
   22c7c:	a6 1b       	sub	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
   22c7e:	b7 0b       	sbc	r27, r23

00022c80 <__udivmodhi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
   22c80:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
   22c82:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
   22c84:	5a 95       	dec	r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
   22c86:	a9 f7       	brne	.-22     	; 0x22c72 <__udivmodhi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
   22c88:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
   22c8a:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
   22c8c:	bc 01       	movw	r22, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
   22c8e:	cd 01       	movw	r24, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
   22c90:	08 95       	ret

00022c92 <__divmodhi4>:
__divmodhi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
   22c92:	97 fb       	bst	r25, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
   22c94:	07 2e       	mov	r0, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
   22c96:	16 f4       	brtc	.+4      	; 0x22c9c <__divmodhi4+0xa>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
   22c98:	00 94       	com	r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
   22c9a:	07 d0       	rcall	.+14     	; 0x22caa <__divmodhi4_neg1>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
   22c9c:	77 fd       	sbrc	r23, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
   22c9e:	09 d0       	rcall	.+18     	; 0x22cb2 <__divmodhi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
   22ca0:	0f 94 35 16 	call	0x22c6a	; 0x22c6a <__udivmodhi4>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
   22ca4:	07 fc       	sbrc	r0, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
   22ca6:	05 d0       	rcall	.+10     	; 0x22cb2 <__divmodhi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
   22ca8:	3e f4       	brtc	.+14     	; 0x22cb8 <__divmodhi4_exit>

00022caa <__divmodhi4_neg1>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
   22caa:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
   22cac:	81 95       	neg	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
   22cae:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
   22cb0:	08 95       	ret

00022cb2 <__divmodhi4_neg2>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
   22cb2:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
   22cb4:	61 95       	neg	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
   22cb6:	7f 4f       	sbci	r23, 0xFF	; 255

00022cb8 <__divmodhi4_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
   22cb8:	08 95       	ret

00022cba <__udivmodsi4>:
__udivmodsi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
   22cba:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
   22cbc:	1a 2e       	mov	r1, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
   22cbe:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
   22cc0:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
   22cc2:	fd 01       	movw	r30, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
   22cc4:	0d c0       	rjmp	.+26     	; 0x22ce0 <__udivmodsi4_ep>

00022cc6 <__udivmodsi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
   22cc6:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
   22cc8:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
   22cca:	ee 1f       	adc	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
   22ccc:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
   22cce:	a2 17       	cp	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
   22cd0:	b3 07       	cpc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
   22cd2:	e4 07       	cpc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
   22cd4:	f5 07       	cpc	r31, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
   22cd6:	20 f0       	brcs	.+8      	; 0x22ce0 <__udivmodsi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
   22cd8:	a2 1b       	sub	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
   22cda:	b3 0b       	sbc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
   22cdc:	e4 0b       	sbc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
   22cde:	f5 0b       	sbc	r31, r21

00022ce0 <__udivmodsi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
   22ce0:	66 1f       	adc	r22, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
   22ce2:	77 1f       	adc	r23, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
   22ce4:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
   22ce6:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
   22ce8:	1a 94       	dec	r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
   22cea:	69 f7       	brne	.-38     	; 0x22cc6 <__udivmodsi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
   22cec:	60 95       	com	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
   22cee:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
   22cf0:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
   22cf2:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
   22cf4:	9b 01       	movw	r18, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
   22cf6:	ac 01       	movw	r20, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
   22cf8:	bd 01       	movw	r22, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
   22cfa:	cf 01       	movw	r24, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
   22cfc:	08 95       	ret

00022cfe <__divmodsi4>:
__divmodsi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
   22cfe:	05 2e       	mov	r0, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
   22d00:	97 fb       	bst	r25, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
   22d02:	1e f4       	brtc	.+6      	; 0x22d0a <__divmodsi4+0xc>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
   22d04:	00 94       	com	r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
   22d06:	0f 94 96 16 	call	0x22d2c	; 0x22d2c <__negsi2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
   22d0a:	57 fd       	sbrc	r21, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
   22d0c:	07 d0       	rcall	.+14     	; 0x22d1c <__divmodsi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
   22d0e:	0f 94 5d 16 	call	0x22cba	; 0x22cba <__udivmodsi4>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
   22d12:	07 fc       	sbrc	r0, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
   22d14:	03 d0       	rcall	.+6      	; 0x22d1c <__divmodsi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
   22d16:	4e f4       	brtc	.+18     	; 0x22d2a <__divmodsi4_exit>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
   22d18:	0d 94 96 16 	jmp	0x22d2c	; 0x22d2c <__negsi2>

00022d1c <__divmodsi4_neg2>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
   22d1c:	50 95       	com	r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
   22d1e:	40 95       	com	r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
   22d20:	30 95       	com	r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
   22d22:	21 95       	neg	r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
   22d24:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
   22d26:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
   22d28:	5f 4f       	sbci	r21, 0xFF	; 255

00022d2a <__divmodsi4_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
   22d2a:	08 95       	ret

00022d2c <__negsi2>:
__negsi2():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
   22d2c:	90 95       	com	r25
   22d2e:	80 95       	com	r24
   22d30:	70 95       	com	r23
   22d32:	61 95       	neg	r22
   22d34:	7f 4f       	sbci	r23, 0xFF	; 255
   22d36:	8f 4f       	sbci	r24, 0xFF	; 255
   22d38:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
   22d3a:	08 95       	ret

00022d3c <__tablejump2__>:
__tablejump2__():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
   22d3c:	ee 0f       	add	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
   22d3e:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2300
   22d40:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2301
   22d42:	8b bf       	out	0x3b, r24	; 59
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
   22d44:	07 90       	elpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
   22d46:	f6 91       	elpm	r31, Z
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
   22d48:	e0 2d       	mov	r30, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
   22d4a:	19 94       	eijmp

00022d4c <__umulhisi3>:
__umulhisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
   22d4c:	a2 9f       	mul	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
   22d4e:	b0 01       	movw	r22, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
   22d50:	b3 9f       	mul	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
   22d52:	c0 01       	movw	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
   22d54:	a3 9f       	mul	r26, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
   22d56:	70 0d       	add	r23, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
   22d58:	81 1d       	adc	r24, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
   22d5a:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
   22d5c:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
   22d5e:	b2 9f       	mul	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
   22d60:	70 0d       	add	r23, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
   22d62:	81 1d       	adc	r24, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
   22d64:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
   22d66:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
   22d68:	08 95       	ret

00022d6a <__muluhisi3>:
__muluhisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
   22d6a:	0f 94 a6 16 	call	0x22d4c	; 0x22d4c <__umulhisi3>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
   22d6e:	a5 9f       	mul	r26, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
   22d70:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
   22d72:	b4 9f       	mul	r27, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
   22d74:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
   22d76:	a4 9f       	mul	r26, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
   22d78:	80 0d       	add	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
   22d7a:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
   22d7c:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
   22d7e:	08 95       	ret

00022d80 <dtostrf>:
dtostrf():
   22d80:	ef 92       	push	r14
   22d82:	0f 93       	push	r16
   22d84:	1f 93       	push	r17
   22d86:	cf 93       	push	r28
   22d88:	df 93       	push	r29
   22d8a:	e8 01       	movw	r28, r16
   22d8c:	34 e0       	ldi	r19, 0x04	; 4
   22d8e:	47 fd       	sbrc	r20, 7
   22d90:	34 e1       	ldi	r19, 0x14	; 20
   22d92:	04 2e       	mov	r0, r20
   22d94:	00 0c       	add	r0, r0
   22d96:	55 0b       	sbc	r21, r21
   22d98:	57 ff       	sbrs	r21, 7
   22d9a:	03 c0       	rjmp	.+6      	; 0x22da2 <dtostrf+0x22>
   22d9c:	51 95       	neg	r21
   22d9e:	41 95       	neg	r20
   22da0:	51 09       	sbc	r21, r1
   22da2:	e3 2e       	mov	r14, r19
   22da4:	02 2f       	mov	r16, r18
   22da6:	24 2f       	mov	r18, r20
   22da8:	ae 01       	movw	r20, r28
   22daa:	0f 94 f4 1d 	call	0x23be8	; 0x23be8 <dtoa_prf>
   22dae:	ce 01       	movw	r24, r28
   22db0:	df 91       	pop	r29
   22db2:	cf 91       	pop	r28
   22db4:	1f 91       	pop	r17
   22db6:	0f 91       	pop	r16
   22db8:	ef 90       	pop	r14
   22dba:	08 95       	ret

00022dbc <malloc>:
malloc():
   22dbc:	0f 93       	push	r16
   22dbe:	1f 93       	push	r17
   22dc0:	cf 93       	push	r28
   22dc2:	df 93       	push	r29
   22dc4:	82 30       	cpi	r24, 0x02	; 2
   22dc6:	91 05       	cpc	r25, r1
   22dc8:	10 f4       	brcc	.+4      	; 0x22dce <malloc+0x12>
   22dca:	82 e0       	ldi	r24, 0x02	; 2
   22dcc:	90 e0       	ldi	r25, 0x00	; 0
   22dce:	e0 91 f7 13 	lds	r30, 0x13F7	; 0x8013f7 <__flp>
   22dd2:	f0 91 f8 13 	lds	r31, 0x13F8	; 0x8013f8 <__flp+0x1>
   22dd6:	30 e0       	ldi	r19, 0x00	; 0
   22dd8:	20 e0       	ldi	r18, 0x00	; 0
   22dda:	b0 e0       	ldi	r27, 0x00	; 0
   22ddc:	a0 e0       	ldi	r26, 0x00	; 0
   22dde:	30 97       	sbiw	r30, 0x00	; 0
   22de0:	99 f4       	brne	.+38     	; 0x22e08 <malloc+0x4c>
   22de2:	21 15       	cp	r18, r1
   22de4:	31 05       	cpc	r19, r1
   22de6:	09 f4       	brne	.+2      	; 0x22dea <malloc+0x2e>
   22de8:	4a c0       	rjmp	.+148    	; 0x22e7e <malloc+0xc2>
   22dea:	28 1b       	sub	r18, r24
   22dec:	39 0b       	sbc	r19, r25
   22dee:	24 30       	cpi	r18, 0x04	; 4
   22df0:	31 05       	cpc	r19, r1
   22df2:	d8 f5       	brcc	.+118    	; 0x22e6a <malloc+0xae>
   22df4:	8a 81       	ldd	r24, Y+2	; 0x02
   22df6:	9b 81       	ldd	r25, Y+3	; 0x03
   22df8:	61 15       	cp	r22, r1
   22dfa:	71 05       	cpc	r23, r1
   22dfc:	89 f1       	breq	.+98     	; 0x22e60 <malloc+0xa4>
   22dfe:	fb 01       	movw	r30, r22
   22e00:	93 83       	std	Z+3, r25	; 0x03
   22e02:	82 83       	std	Z+2, r24	; 0x02
   22e04:	fe 01       	movw	r30, r28
   22e06:	11 c0       	rjmp	.+34     	; 0x22e2a <malloc+0x6e>
   22e08:	40 81       	ld	r20, Z
   22e0a:	51 81       	ldd	r21, Z+1	; 0x01
   22e0c:	02 81       	ldd	r16, Z+2	; 0x02
   22e0e:	13 81       	ldd	r17, Z+3	; 0x03
   22e10:	48 17       	cp	r20, r24
   22e12:	59 07       	cpc	r21, r25
   22e14:	e0 f0       	brcs	.+56     	; 0x22e4e <malloc+0x92>
   22e16:	48 17       	cp	r20, r24
   22e18:	59 07       	cpc	r21, r25
   22e1a:	99 f4       	brne	.+38     	; 0x22e42 <malloc+0x86>
   22e1c:	10 97       	sbiw	r26, 0x00	; 0
   22e1e:	61 f0       	breq	.+24     	; 0x22e38 <malloc+0x7c>
   22e20:	12 96       	adiw	r26, 0x02	; 2
   22e22:	0c 93       	st	X, r16
   22e24:	12 97       	sbiw	r26, 0x02	; 2
   22e26:	13 96       	adiw	r26, 0x03	; 3
   22e28:	1c 93       	st	X, r17
   22e2a:	32 96       	adiw	r30, 0x02	; 2
   22e2c:	cf 01       	movw	r24, r30
   22e2e:	df 91       	pop	r29
   22e30:	cf 91       	pop	r28
   22e32:	1f 91       	pop	r17
   22e34:	0f 91       	pop	r16
   22e36:	08 95       	ret
   22e38:	00 93 f7 13 	sts	0x13F7, r16	; 0x8013f7 <__flp>
   22e3c:	10 93 f8 13 	sts	0x13F8, r17	; 0x8013f8 <__flp+0x1>
   22e40:	f4 cf       	rjmp	.-24     	; 0x22e2a <malloc+0x6e>
   22e42:	21 15       	cp	r18, r1
   22e44:	31 05       	cpc	r19, r1
   22e46:	51 f0       	breq	.+20     	; 0x22e5c <malloc+0xa0>
   22e48:	42 17       	cp	r20, r18
   22e4a:	53 07       	cpc	r21, r19
   22e4c:	38 f0       	brcs	.+14     	; 0x22e5c <malloc+0xa0>
   22e4e:	a9 01       	movw	r20, r18
   22e50:	db 01       	movw	r26, r22
   22e52:	9a 01       	movw	r18, r20
   22e54:	bd 01       	movw	r22, r26
   22e56:	df 01       	movw	r26, r30
   22e58:	f8 01       	movw	r30, r16
   22e5a:	c1 cf       	rjmp	.-126    	; 0x22dde <malloc+0x22>
   22e5c:	ef 01       	movw	r28, r30
   22e5e:	f9 cf       	rjmp	.-14     	; 0x22e52 <malloc+0x96>
   22e60:	90 93 f8 13 	sts	0x13F8, r25	; 0x8013f8 <__flp+0x1>
   22e64:	80 93 f7 13 	sts	0x13F7, r24	; 0x8013f7 <__flp>
   22e68:	cd cf       	rjmp	.-102    	; 0x22e04 <malloc+0x48>
   22e6a:	fe 01       	movw	r30, r28
   22e6c:	e2 0f       	add	r30, r18
   22e6e:	f3 1f       	adc	r31, r19
   22e70:	81 93       	st	Z+, r24
   22e72:	91 93       	st	Z+, r25
   22e74:	22 50       	subi	r18, 0x02	; 2
   22e76:	31 09       	sbc	r19, r1
   22e78:	39 83       	std	Y+1, r19	; 0x01
   22e7a:	28 83       	st	Y, r18
   22e7c:	d7 cf       	rjmp	.-82     	; 0x22e2c <malloc+0x70>
   22e7e:	20 91 f5 13 	lds	r18, 0x13F5	; 0x8013f5 <__brkval>
   22e82:	30 91 f6 13 	lds	r19, 0x13F6	; 0x8013f6 <__brkval+0x1>
   22e86:	23 2b       	or	r18, r19
   22e88:	41 f4       	brne	.+16     	; 0x22e9a <malloc+0xde>
   22e8a:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
   22e8e:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
   22e92:	30 93 f6 13 	sts	0x13F6, r19	; 0x8013f6 <__brkval+0x1>
   22e96:	20 93 f5 13 	sts	0x13F5, r18	; 0x8013f5 <__brkval>
   22e9a:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
   22e9e:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
   22ea2:	21 15       	cp	r18, r1
   22ea4:	31 05       	cpc	r19, r1
   22ea6:	41 f4       	brne	.+16     	; 0x22eb8 <malloc+0xfc>
   22ea8:	2d b7       	in	r18, 0x3d	; 61
   22eaa:	3e b7       	in	r19, 0x3e	; 62
   22eac:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
   22eb0:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
   22eb4:	24 1b       	sub	r18, r20
   22eb6:	35 0b       	sbc	r19, r21
   22eb8:	e0 91 f5 13 	lds	r30, 0x13F5	; 0x8013f5 <__brkval>
   22ebc:	f0 91 f6 13 	lds	r31, 0x13F6	; 0x8013f6 <__brkval+0x1>
   22ec0:	e2 17       	cp	r30, r18
   22ec2:	f3 07       	cpc	r31, r19
   22ec4:	a0 f4       	brcc	.+40     	; 0x22eee <malloc+0x132>
   22ec6:	2e 1b       	sub	r18, r30
   22ec8:	3f 0b       	sbc	r19, r31
   22eca:	28 17       	cp	r18, r24
   22ecc:	39 07       	cpc	r19, r25
   22ece:	78 f0       	brcs	.+30     	; 0x22eee <malloc+0x132>
   22ed0:	ac 01       	movw	r20, r24
   22ed2:	4e 5f       	subi	r20, 0xFE	; 254
   22ed4:	5f 4f       	sbci	r21, 0xFF	; 255
   22ed6:	24 17       	cp	r18, r20
   22ed8:	35 07       	cpc	r19, r21
   22eda:	48 f0       	brcs	.+18     	; 0x22eee <malloc+0x132>
   22edc:	4e 0f       	add	r20, r30
   22ede:	5f 1f       	adc	r21, r31
   22ee0:	50 93 f6 13 	sts	0x13F6, r21	; 0x8013f6 <__brkval+0x1>
   22ee4:	40 93 f5 13 	sts	0x13F5, r20	; 0x8013f5 <__brkval>
   22ee8:	81 93       	st	Z+, r24
   22eea:	91 93       	st	Z+, r25
   22eec:	9f cf       	rjmp	.-194    	; 0x22e2c <malloc+0x70>
   22eee:	f0 e0       	ldi	r31, 0x00	; 0
   22ef0:	e0 e0       	ldi	r30, 0x00	; 0
   22ef2:	9c cf       	rjmp	.-200    	; 0x22e2c <malloc+0x70>

00022ef4 <free>:
free():
   22ef4:	cf 93       	push	r28
   22ef6:	df 93       	push	r29
   22ef8:	00 97       	sbiw	r24, 0x00	; 0
   22efa:	e9 f0       	breq	.+58     	; 0x22f36 <free+0x42>
   22efc:	fc 01       	movw	r30, r24
   22efe:	32 97       	sbiw	r30, 0x02	; 2
   22f00:	13 82       	std	Z+3, r1	; 0x03
   22f02:	12 82       	std	Z+2, r1	; 0x02
   22f04:	a0 91 f7 13 	lds	r26, 0x13F7	; 0x8013f7 <__flp>
   22f08:	b0 91 f8 13 	lds	r27, 0x13F8	; 0x8013f8 <__flp+0x1>
   22f0c:	ed 01       	movw	r28, r26
   22f0e:	30 e0       	ldi	r19, 0x00	; 0
   22f10:	20 e0       	ldi	r18, 0x00	; 0
   22f12:	10 97       	sbiw	r26, 0x00	; 0
   22f14:	a1 f4       	brne	.+40     	; 0x22f3e <free+0x4a>
   22f16:	20 81       	ld	r18, Z
   22f18:	31 81       	ldd	r19, Z+1	; 0x01
   22f1a:	82 0f       	add	r24, r18
   22f1c:	93 1f       	adc	r25, r19
   22f1e:	20 91 f5 13 	lds	r18, 0x13F5	; 0x8013f5 <__brkval>
   22f22:	30 91 f6 13 	lds	r19, 0x13F6	; 0x8013f6 <__brkval+0x1>
   22f26:	28 17       	cp	r18, r24
   22f28:	39 07       	cpc	r19, r25
   22f2a:	09 f0       	breq	.+2      	; 0x22f2e <free+0x3a>
   22f2c:	61 c0       	rjmp	.+194    	; 0x22ff0 <free+0xfc>
   22f2e:	f0 93 f6 13 	sts	0x13F6, r31	; 0x8013f6 <__brkval+0x1>
   22f32:	e0 93 f5 13 	sts	0x13F5, r30	; 0x8013f5 <__brkval>
   22f36:	df 91       	pop	r29
   22f38:	cf 91       	pop	r28
   22f3a:	08 95       	ret
   22f3c:	ea 01       	movw	r28, r20
   22f3e:	ce 17       	cp	r28, r30
   22f40:	df 07       	cpc	r29, r31
   22f42:	e8 f5       	brcc	.+122    	; 0x22fbe <free+0xca>
   22f44:	4a 81       	ldd	r20, Y+2	; 0x02
   22f46:	5b 81       	ldd	r21, Y+3	; 0x03
   22f48:	9e 01       	movw	r18, r28
   22f4a:	41 15       	cp	r20, r1
   22f4c:	51 05       	cpc	r21, r1
   22f4e:	b1 f7       	brne	.-20     	; 0x22f3c <free+0x48>
   22f50:	e9 01       	movw	r28, r18
   22f52:	fb 83       	std	Y+3, r31	; 0x03
   22f54:	ea 83       	std	Y+2, r30	; 0x02
   22f56:	49 91       	ld	r20, Y+
   22f58:	59 91       	ld	r21, Y+
   22f5a:	c4 0f       	add	r28, r20
   22f5c:	d5 1f       	adc	r29, r21
   22f5e:	ec 17       	cp	r30, r28
   22f60:	fd 07       	cpc	r31, r29
   22f62:	61 f4       	brne	.+24     	; 0x22f7c <free+0x88>
   22f64:	80 81       	ld	r24, Z
   22f66:	91 81       	ldd	r25, Z+1	; 0x01
   22f68:	02 96       	adiw	r24, 0x02	; 2
   22f6a:	84 0f       	add	r24, r20
   22f6c:	95 1f       	adc	r25, r21
   22f6e:	e9 01       	movw	r28, r18
   22f70:	99 83       	std	Y+1, r25	; 0x01
   22f72:	88 83       	st	Y, r24
   22f74:	82 81       	ldd	r24, Z+2	; 0x02
   22f76:	93 81       	ldd	r25, Z+3	; 0x03
   22f78:	9b 83       	std	Y+3, r25	; 0x03
   22f7a:	8a 83       	std	Y+2, r24	; 0x02
   22f7c:	f0 e0       	ldi	r31, 0x00	; 0
   22f7e:	e0 e0       	ldi	r30, 0x00	; 0
   22f80:	12 96       	adiw	r26, 0x02	; 2
   22f82:	8d 91       	ld	r24, X+
   22f84:	9c 91       	ld	r25, X
   22f86:	13 97       	sbiw	r26, 0x03	; 3
   22f88:	00 97       	sbiw	r24, 0x00	; 0
   22f8a:	b9 f5       	brne	.+110    	; 0x22ffa <free+0x106>
   22f8c:	2d 91       	ld	r18, X+
   22f8e:	3c 91       	ld	r19, X
   22f90:	11 97       	sbiw	r26, 0x01	; 1
   22f92:	cd 01       	movw	r24, r26
   22f94:	02 96       	adiw	r24, 0x02	; 2
   22f96:	82 0f       	add	r24, r18
   22f98:	93 1f       	adc	r25, r19
   22f9a:	20 91 f5 13 	lds	r18, 0x13F5	; 0x8013f5 <__brkval>
   22f9e:	30 91 f6 13 	lds	r19, 0x13F6	; 0x8013f6 <__brkval+0x1>
   22fa2:	28 17       	cp	r18, r24
   22fa4:	39 07       	cpc	r19, r25
   22fa6:	39 f6       	brne	.-114    	; 0x22f36 <free+0x42>
   22fa8:	30 97       	sbiw	r30, 0x00	; 0
   22faa:	51 f5       	brne	.+84     	; 0x23000 <free+0x10c>
   22fac:	10 92 f8 13 	sts	0x13F8, r1	; 0x8013f8 <__flp+0x1>
   22fb0:	10 92 f7 13 	sts	0x13F7, r1	; 0x8013f7 <__flp>
   22fb4:	b0 93 f6 13 	sts	0x13F6, r27	; 0x8013f6 <__brkval+0x1>
   22fb8:	a0 93 f5 13 	sts	0x13F5, r26	; 0x8013f5 <__brkval>
   22fbc:	bc cf       	rjmp	.-136    	; 0x22f36 <free+0x42>
   22fbe:	d3 83       	std	Z+3, r29	; 0x03
   22fc0:	c2 83       	std	Z+2, r28	; 0x02
   22fc2:	40 81       	ld	r20, Z
   22fc4:	51 81       	ldd	r21, Z+1	; 0x01
   22fc6:	84 0f       	add	r24, r20
   22fc8:	95 1f       	adc	r25, r21
   22fca:	c8 17       	cp	r28, r24
   22fcc:	d9 07       	cpc	r29, r25
   22fce:	61 f4       	brne	.+24     	; 0x22fe8 <free+0xf4>
   22fd0:	4e 5f       	subi	r20, 0xFE	; 254
   22fd2:	5f 4f       	sbci	r21, 0xFF	; 255
   22fd4:	88 81       	ld	r24, Y
   22fd6:	99 81       	ldd	r25, Y+1	; 0x01
   22fd8:	48 0f       	add	r20, r24
   22fda:	59 1f       	adc	r21, r25
   22fdc:	51 83       	std	Z+1, r21	; 0x01
   22fde:	40 83       	st	Z, r20
   22fe0:	8a 81       	ldd	r24, Y+2	; 0x02
   22fe2:	9b 81       	ldd	r25, Y+3	; 0x03
   22fe4:	93 83       	std	Z+3, r25	; 0x03
   22fe6:	82 83       	std	Z+2, r24	; 0x02
   22fe8:	21 15       	cp	r18, r1
   22fea:	31 05       	cpc	r19, r1
   22fec:	09 f0       	breq	.+2      	; 0x22ff0 <free+0xfc>
   22fee:	b0 cf       	rjmp	.-160    	; 0x22f50 <free+0x5c>
   22ff0:	f0 93 f8 13 	sts	0x13F8, r31	; 0x8013f8 <__flp+0x1>
   22ff4:	e0 93 f7 13 	sts	0x13F7, r30	; 0x8013f7 <__flp>
   22ff8:	9e cf       	rjmp	.-196    	; 0x22f36 <free+0x42>
   22ffa:	fd 01       	movw	r30, r26
   22ffc:	dc 01       	movw	r26, r24
   22ffe:	c0 cf       	rjmp	.-128    	; 0x22f80 <free+0x8c>
   23000:	13 82       	std	Z+3, r1	; 0x03
   23002:	12 82       	std	Z+2, r1	; 0x02
   23004:	d7 cf       	rjmp	.-82     	; 0x22fb4 <free+0xc0>

00023006 <realloc>:
realloc():
   23006:	4f 92       	push	r4
   23008:	5f 92       	push	r5
   2300a:	6f 92       	push	r6
   2300c:	7f 92       	push	r7
   2300e:	8f 92       	push	r8
   23010:	9f 92       	push	r9
   23012:	af 92       	push	r10
   23014:	bf 92       	push	r11
   23016:	cf 92       	push	r12
   23018:	df 92       	push	r13
   2301a:	ef 92       	push	r14
   2301c:	ff 92       	push	r15
   2301e:	0f 93       	push	r16
   23020:	1f 93       	push	r17
   23022:	cf 93       	push	r28
   23024:	df 93       	push	r29
   23026:	8c 01       	movw	r16, r24
   23028:	00 97       	sbiw	r24, 0x00	; 0
   2302a:	99 f4       	brne	.+38     	; 0x23052 <realloc+0x4c>
   2302c:	cb 01       	movw	r24, r22
   2302e:	df 91       	pop	r29
   23030:	cf 91       	pop	r28
   23032:	1f 91       	pop	r17
   23034:	0f 91       	pop	r16
   23036:	ff 90       	pop	r15
   23038:	ef 90       	pop	r14
   2303a:	df 90       	pop	r13
   2303c:	cf 90       	pop	r12
   2303e:	bf 90       	pop	r11
   23040:	af 90       	pop	r10
   23042:	9f 90       	pop	r9
   23044:	8f 90       	pop	r8
   23046:	7f 90       	pop	r7
   23048:	6f 90       	pop	r6
   2304a:	5f 90       	pop	r5
   2304c:	4f 90       	pop	r4
   2304e:	0d 94 de 16 	jmp	0x22dbc	; 0x22dbc <malloc>
   23052:	fc 01       	movw	r30, r24
   23054:	e6 0f       	add	r30, r22
   23056:	f7 1f       	adc	r31, r23
   23058:	9c 01       	movw	r18, r24
   2305a:	22 50       	subi	r18, 0x02	; 2
   2305c:	31 09       	sbc	r19, r1
   2305e:	e2 17       	cp	r30, r18
   23060:	f3 07       	cpc	r31, r19
   23062:	08 f4       	brcc	.+2      	; 0x23066 <realloc+0x60>
   23064:	ae c0       	rjmp	.+348    	; 0x231c2 <realloc+0x1bc>
   23066:	d9 01       	movw	r26, r18
   23068:	cd 91       	ld	r28, X+
   2306a:	dc 91       	ld	r29, X
   2306c:	11 97       	sbiw	r26, 0x01	; 1
   2306e:	c6 17       	cp	r28, r22
   23070:	d7 07       	cpc	r29, r23
   23072:	20 f1       	brcs	.+72     	; 0x230bc <realloc+0xb6>
   23074:	c5 30       	cpi	r28, 0x05	; 5
   23076:	d1 05       	cpc	r29, r1
   23078:	78 f0       	brcs	.+30     	; 0x23098 <realloc+0x92>
   2307a:	ce 01       	movw	r24, r28
   2307c:	04 97       	sbiw	r24, 0x04	; 4
   2307e:	86 17       	cp	r24, r22
   23080:	97 07       	cpc	r25, r23
   23082:	50 f0       	brcs	.+20     	; 0x23098 <realloc+0x92>
   23084:	c6 1b       	sub	r28, r22
   23086:	d7 0b       	sbc	r29, r23
   23088:	22 97       	sbiw	r28, 0x02	; 2
   2308a:	c1 93       	st	Z+, r28
   2308c:	d1 93       	st	Z+, r29
   2308e:	6d 93       	st	X+, r22
   23090:	7c 93       	st	X, r23
   23092:	cf 01       	movw	r24, r30
   23094:	0f 94 7a 17 	call	0x22ef4	; 0x22ef4 <free>
   23098:	c8 01       	movw	r24, r16
   2309a:	df 91       	pop	r29
   2309c:	cf 91       	pop	r28
   2309e:	1f 91       	pop	r17
   230a0:	0f 91       	pop	r16
   230a2:	ff 90       	pop	r15
   230a4:	ef 90       	pop	r14
   230a6:	df 90       	pop	r13
   230a8:	cf 90       	pop	r12
   230aa:	bf 90       	pop	r11
   230ac:	af 90       	pop	r10
   230ae:	9f 90       	pop	r9
   230b0:	8f 90       	pop	r8
   230b2:	7f 90       	pop	r7
   230b4:	6f 90       	pop	r6
   230b6:	5f 90       	pop	r5
   230b8:	4f 90       	pop	r4
   230ba:	08 95       	ret
   230bc:	5b 01       	movw	r10, r22
   230be:	ac 1a       	sub	r10, r28
   230c0:	bd 0a       	sbc	r11, r29
   230c2:	4c 01       	movw	r8, r24
   230c4:	8c 0e       	add	r8, r28
   230c6:	9d 1e       	adc	r9, r29
   230c8:	a0 91 f7 13 	lds	r26, 0x13F7	; 0x8013f7 <__flp>
   230cc:	b0 91 f8 13 	lds	r27, 0x13F8	; 0x8013f8 <__flp+0x1>
   230d0:	51 2c       	mov	r5, r1
   230d2:	41 2c       	mov	r4, r1
   230d4:	f1 2c       	mov	r15, r1
   230d6:	e1 2c       	mov	r14, r1
   230d8:	10 97       	sbiw	r26, 0x00	; 0
   230da:	31 f5       	brne	.+76     	; 0x23128 <realloc+0x122>
   230dc:	80 91 f5 13 	lds	r24, 0x13F5	; 0x8013f5 <__brkval>
   230e0:	90 91 f6 13 	lds	r25, 0x13F6	; 0x8013f6 <__brkval+0x1>
   230e4:	88 15       	cp	r24, r8
   230e6:	99 05       	cpc	r25, r9
   230e8:	09 f0       	breq	.+2      	; 0x230ec <realloc+0xe6>
   230ea:	5c c0       	rjmp	.+184    	; 0x231a4 <realloc+0x19e>
   230ec:	46 16       	cp	r4, r22
   230ee:	57 06       	cpc	r5, r23
   230f0:	08 f0       	brcs	.+2      	; 0x230f4 <realloc+0xee>
   230f2:	58 c0       	rjmp	.+176    	; 0x231a4 <realloc+0x19e>
   230f4:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
   230f8:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
   230fc:	00 97       	sbiw	r24, 0x00	; 0
   230fe:	41 f4       	brne	.+16     	; 0x23110 <realloc+0x10a>
   23100:	8d b7       	in	r24, 0x3d	; 61
   23102:	9e b7       	in	r25, 0x3e	; 62
   23104:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
   23108:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
   2310c:	84 1b       	sub	r24, r20
   2310e:	95 0b       	sbc	r25, r21
   23110:	e8 17       	cp	r30, r24
   23112:	f9 07       	cpc	r31, r25
   23114:	08 f0       	brcs	.+2      	; 0x23118 <realloc+0x112>
   23116:	55 c0       	rjmp	.+170    	; 0x231c2 <realloc+0x1bc>
   23118:	f0 93 f6 13 	sts	0x13F6, r31	; 0x8013f6 <__brkval+0x1>
   2311c:	e0 93 f5 13 	sts	0x13F5, r30	; 0x8013f5 <__brkval>
   23120:	f9 01       	movw	r30, r18
   23122:	71 83       	std	Z+1, r23	; 0x01
   23124:	60 83       	st	Z, r22
   23126:	b8 cf       	rjmp	.-144    	; 0x23098 <realloc+0x92>
   23128:	8d 91       	ld	r24, X+
   2312a:	9c 91       	ld	r25, X
   2312c:	11 97       	sbiw	r26, 0x01	; 1
   2312e:	12 96       	adiw	r26, 0x02	; 2
   23130:	6c 90       	ld	r6, X
   23132:	12 97       	sbiw	r26, 0x02	; 2
   23134:	13 96       	adiw	r26, 0x03	; 3
   23136:	7c 90       	ld	r7, X
   23138:	13 97       	sbiw	r26, 0x03	; 3
   2313a:	a8 15       	cp	r26, r8
   2313c:	b9 05       	cpc	r27, r9
   2313e:	59 f5       	brne	.+86     	; 0x23196 <realloc+0x190>
   23140:	6c 01       	movw	r12, r24
   23142:	42 e0       	ldi	r20, 0x02	; 2
   23144:	c4 0e       	add	r12, r20
   23146:	d1 1c       	adc	r13, r1
   23148:	ca 14       	cp	r12, r10
   2314a:	db 04       	cpc	r13, r11
   2314c:	20 f1       	brcs	.+72     	; 0x23196 <realloc+0x190>
   2314e:	ac 01       	movw	r20, r24
   23150:	4a 19       	sub	r20, r10
   23152:	5b 09       	sbc	r21, r11
   23154:	da 01       	movw	r26, r20
   23156:	12 96       	adiw	r26, 0x02	; 2
   23158:	15 97       	sbiw	r26, 0x05	; 5
   2315a:	80 f0       	brcs	.+32     	; 0x2317c <realloc+0x176>
   2315c:	62 82       	std	Z+2, r6	; 0x02
   2315e:	73 82       	std	Z+3, r7	; 0x03
   23160:	51 83       	std	Z+1, r21	; 0x01
   23162:	40 83       	st	Z, r20
   23164:	d9 01       	movw	r26, r18
   23166:	6d 93       	st	X+, r22
   23168:	7c 93       	st	X, r23
   2316a:	e1 14       	cp	r14, r1
   2316c:	f1 04       	cpc	r15, r1
   2316e:	71 f0       	breq	.+28     	; 0x2318c <realloc+0x186>
   23170:	d7 01       	movw	r26, r14
   23172:	13 96       	adiw	r26, 0x03	; 3
   23174:	fc 93       	st	X, r31
   23176:	ee 93       	st	-X, r30
   23178:	12 97       	sbiw	r26, 0x02	; 2
   2317a:	8e cf       	rjmp	.-228    	; 0x23098 <realloc+0x92>
   2317c:	22 96       	adiw	r28, 0x02	; 2
   2317e:	8c 0f       	add	r24, r28
   23180:	9d 1f       	adc	r25, r29
   23182:	f9 01       	movw	r30, r18
   23184:	91 83       	std	Z+1, r25	; 0x01
   23186:	80 83       	st	Z, r24
   23188:	f3 01       	movw	r30, r6
   2318a:	ef cf       	rjmp	.-34     	; 0x2316a <realloc+0x164>
   2318c:	f0 93 f8 13 	sts	0x13F8, r31	; 0x8013f8 <__flp+0x1>
   23190:	e0 93 f7 13 	sts	0x13F7, r30	; 0x8013f7 <__flp>
   23194:	81 cf       	rjmp	.-254    	; 0x23098 <realloc+0x92>
   23196:	48 16       	cp	r4, r24
   23198:	59 06       	cpc	r5, r25
   2319a:	08 f4       	brcc	.+2      	; 0x2319e <realloc+0x198>
   2319c:	2c 01       	movw	r4, r24
   2319e:	7d 01       	movw	r14, r26
   231a0:	d3 01       	movw	r26, r6
   231a2:	9a cf       	rjmp	.-204    	; 0x230d8 <realloc+0xd2>
   231a4:	cb 01       	movw	r24, r22
   231a6:	0f 94 de 16 	call	0x22dbc	; 0x22dbc <malloc>
   231aa:	7c 01       	movw	r14, r24
   231ac:	00 97       	sbiw	r24, 0x00	; 0
   231ae:	49 f0       	breq	.+18     	; 0x231c2 <realloc+0x1bc>
   231b0:	ae 01       	movw	r20, r28
   231b2:	b8 01       	movw	r22, r16
   231b4:	0f 94 2d 1a 	call	0x2345a	; 0x2345a <memcpy>
   231b8:	c8 01       	movw	r24, r16
   231ba:	0f 94 7a 17 	call	0x22ef4	; 0x22ef4 <free>
   231be:	87 01       	movw	r16, r14
   231c0:	6b cf       	rjmp	.-298    	; 0x23098 <realloc+0x92>
   231c2:	10 e0       	ldi	r17, 0x00	; 0
   231c4:	00 e0       	ldi	r16, 0x00	; 0
   231c6:	68 cf       	rjmp	.-304    	; 0x23098 <realloc+0x92>

000231c8 <strtoul>:
strtoul():
   231c8:	3f 92       	push	r3
   231ca:	4f 92       	push	r4
   231cc:	5f 92       	push	r5
   231ce:	6f 92       	push	r6
   231d0:	7f 92       	push	r7
   231d2:	8f 92       	push	r8
   231d4:	9f 92       	push	r9
   231d6:	af 92       	push	r10
   231d8:	bf 92       	push	r11
   231da:	cf 92       	push	r12
   231dc:	df 92       	push	r13
   231de:	ef 92       	push	r14
   231e0:	ff 92       	push	r15
   231e2:	0f 93       	push	r16
   231e4:	1f 93       	push	r17
   231e6:	cf 93       	push	r28
   231e8:	df 93       	push	r29
   231ea:	5c 01       	movw	r10, r24
   231ec:	6b 01       	movw	r12, r22
   231ee:	7a 01       	movw	r14, r20
   231f0:	61 15       	cp	r22, r1
   231f2:	71 05       	cpc	r23, r1
   231f4:	19 f0       	breq	.+6      	; 0x231fc <strtoul+0x34>
   231f6:	fb 01       	movw	r30, r22
   231f8:	91 83       	std	Z+1, r25	; 0x01
   231fa:	80 83       	st	Z, r24
   231fc:	e1 14       	cp	r14, r1
   231fe:	f1 04       	cpc	r15, r1
   23200:	49 f0       	breq	.+18     	; 0x23214 <strtoul+0x4c>
   23202:	c7 01       	movw	r24, r14
   23204:	02 97       	sbiw	r24, 0x02	; 2
   23206:	83 97       	sbiw	r24, 0x23	; 35
   23208:	28 f0       	brcs	.+10     	; 0x23214 <strtoul+0x4c>
   2320a:	60 e0       	ldi	r22, 0x00	; 0
   2320c:	70 e0       	ldi	r23, 0x00	; 0
   2320e:	cb 01       	movw	r24, r22
   23210:	9b c0       	rjmp	.+310    	; 0x23348 <strtoul+0x180>
   23212:	5e 01       	movw	r10, r28
   23214:	e5 01       	movw	r28, r10
   23216:	21 96       	adiw	r28, 0x01	; 1
   23218:	f5 01       	movw	r30, r10
   2321a:	10 81       	ld	r17, Z
   2321c:	81 2f       	mov	r24, r17
   2321e:	90 e0       	ldi	r25, 0x00	; 0
   23220:	0f 94 0e 1a 	call	0x2341c	; 0x2341c <isspace>
   23224:	89 2b       	or	r24, r25
   23226:	a9 f7       	brne	.-22     	; 0x23212 <strtoul+0x4a>
   23228:	1d 32       	cpi	r17, 0x2D	; 45
   2322a:	09 f0       	breq	.+2      	; 0x2322e <strtoul+0x66>
   2322c:	5c c0       	rjmp	.+184    	; 0x232e6 <strtoul+0x11e>
   2322e:	21 96       	adiw	r28, 0x01	; 1
   23230:	f5 01       	movw	r30, r10
   23232:	11 81       	ldd	r17, Z+1	; 0x01
   23234:	01 e0       	ldi	r16, 0x01	; 1
   23236:	e1 14       	cp	r14, r1
   23238:	f1 04       	cpc	r15, r1
   2323a:	09 f4       	brne	.+2      	; 0x2323e <strtoul+0x76>
   2323c:	bb c0       	rjmp	.+374    	; 0x233b4 <strtoul+0x1ec>
   2323e:	f0 e1       	ldi	r31, 0x10	; 16
   23240:	ef 16       	cp	r14, r31
   23242:	f1 04       	cpc	r15, r1
   23244:	09 f0       	breq	.+2      	; 0x23248 <strtoul+0x80>
   23246:	9b c0       	rjmp	.+310    	; 0x2337e <strtoul+0x1b6>
   23248:	10 33       	cpi	r17, 0x30	; 48
   2324a:	41 f4       	brne	.+16     	; 0x2325c <strtoul+0x94>
   2324c:	88 81       	ld	r24, Y
   2324e:	8f 7d       	andi	r24, 0xDF	; 223
   23250:	88 35       	cpi	r24, 0x58	; 88
   23252:	09 f0       	breq	.+2      	; 0x23256 <strtoul+0x8e>
   23254:	8f c0       	rjmp	.+286    	; 0x23374 <strtoul+0x1ac>
   23256:	19 81       	ldd	r17, Y+1	; 0x01
   23258:	22 96       	adiw	r28, 0x02	; 2
   2325a:	02 60       	ori	r16, 0x02	; 2
   2325c:	e0 e1       	ldi	r30, 0x10	; 16
   2325e:	ee 2e       	mov	r14, r30
   23260:	f1 2c       	mov	r15, r1
   23262:	88 24       	eor	r8, r8
   23264:	8a 94       	dec	r8
   23266:	98 2c       	mov	r9, r8
   23268:	a8 2c       	mov	r10, r8
   2326a:	ff e0       	ldi	r31, 0x0F	; 15
   2326c:	bf 2e       	mov	r11, r31
   2326e:	20 e0       	ldi	r18, 0x00	; 0
   23270:	60 e0       	ldi	r22, 0x00	; 0
   23272:	70 e0       	ldi	r23, 0x00	; 0
   23274:	cb 01       	movw	r24, r22
   23276:	27 01       	movw	r4, r14
   23278:	0f 2c       	mov	r0, r15
   2327a:	00 0c       	add	r0, r0
   2327c:	66 08       	sbc	r6, r6
   2327e:	77 08       	sbc	r7, r7
   23280:	fe 01       	movw	r30, r28
   23282:	50 ed       	ldi	r21, 0xD0	; 208
   23284:	35 2e       	mov	r3, r21
   23286:	31 0e       	add	r3, r17
   23288:	39 e0       	ldi	r19, 0x09	; 9
   2328a:	33 15       	cp	r19, r3
   2328c:	68 f4       	brcc	.+26     	; 0x232a8 <strtoul+0xe0>
   2328e:	3f eb       	ldi	r19, 0xBF	; 191
   23290:	31 0f       	add	r19, r17
   23292:	49 ec       	ldi	r20, 0xC9	; 201
   23294:	34 2e       	mov	r3, r20
   23296:	3a 31       	cpi	r19, 0x1A	; 26
   23298:	30 f0       	brcs	.+12     	; 0x232a6 <strtoul+0xde>
   2329a:	3f e9       	ldi	r19, 0x9F	; 159
   2329c:	31 0f       	add	r19, r17
   2329e:	3a 31       	cpi	r19, 0x1A	; 26
   232a0:	b0 f5       	brcc	.+108    	; 0x2330e <strtoul+0x146>
   232a2:	39 ea       	ldi	r19, 0xA9	; 169
   232a4:	33 2e       	mov	r3, r19
   232a6:	31 0e       	add	r3, r17
   232a8:	3e 14       	cp	r3, r14
   232aa:	1f 04       	cpc	r1, r15
   232ac:	84 f5       	brge	.+96     	; 0x2330e <strtoul+0x146>
   232ae:	2f 3f       	cpi	r18, 0xFF	; 255
   232b0:	b9 f0       	breq	.+46     	; 0x232e0 <strtoul+0x118>
   232b2:	86 16       	cp	r8, r22
   232b4:	97 06       	cpc	r9, r23
   232b6:	a8 06       	cpc	r10, r24
   232b8:	b9 06       	cpc	r11, r25
   232ba:	38 f1       	brcs	.+78     	; 0x2330a <strtoul+0x142>
   232bc:	a3 01       	movw	r20, r6
   232be:	92 01       	movw	r18, r4
   232c0:	0f 94 19 16 	call	0x22c32	; 0x22c32 <__mulsi3>
   232c4:	23 2d       	mov	r18, r3
   232c6:	30 e0       	ldi	r19, 0x00	; 0
   232c8:	50 e0       	ldi	r21, 0x00	; 0
   232ca:	40 e0       	ldi	r20, 0x00	; 0
   232cc:	62 0f       	add	r22, r18
   232ce:	73 1f       	adc	r23, r19
   232d0:	84 1f       	adc	r24, r20
   232d2:	95 1f       	adc	r25, r21
   232d4:	62 17       	cp	r22, r18
   232d6:	73 07       	cpc	r23, r19
   232d8:	84 07       	cpc	r24, r20
   232da:	95 07       	cpc	r25, r21
   232dc:	b0 f0       	brcs	.+44     	; 0x2330a <strtoul+0x142>
   232de:	21 e0       	ldi	r18, 0x01	; 1
   232e0:	21 96       	adiw	r28, 0x01	; 1
   232e2:	10 81       	ld	r17, Z
   232e4:	cd cf       	rjmp	.-102    	; 0x23280 <strtoul+0xb8>
   232e6:	1b 32       	cpi	r17, 0x2B	; 43
   232e8:	21 f4       	brne	.+8      	; 0x232f2 <strtoul+0x12a>
   232ea:	e5 01       	movw	r28, r10
   232ec:	22 96       	adiw	r28, 0x02	; 2
   232ee:	f5 01       	movw	r30, r10
   232f0:	11 81       	ldd	r17, Z+1	; 0x01
   232f2:	00 e0       	ldi	r16, 0x00	; 0
   232f4:	a0 cf       	rjmp	.-192    	; 0x23236 <strtoul+0x6e>
   232f6:	78 e0       	ldi	r23, 0x08	; 8
   232f8:	e7 2e       	mov	r14, r23
   232fa:	f1 2c       	mov	r15, r1
   232fc:	88 24       	eor	r8, r8
   232fe:	8a 94       	dec	r8
   23300:	98 2c       	mov	r9, r8
   23302:	a8 2c       	mov	r10, r8
   23304:	6f e1       	ldi	r22, 0x1F	; 31
   23306:	b6 2e       	mov	r11, r22
   23308:	b2 cf       	rjmp	.-156    	; 0x2326e <strtoul+0xa6>
   2330a:	2f ef       	ldi	r18, 0xFF	; 255
   2330c:	e9 cf       	rjmp	.-46     	; 0x232e0 <strtoul+0x118>
   2330e:	c1 14       	cp	r12, r1
   23310:	d1 04       	cpc	r13, r1
   23312:	31 f0       	breq	.+12     	; 0x23320 <strtoul+0x158>
   23314:	22 23       	and	r18, r18
   23316:	51 f1       	breq	.+84     	; 0x2336c <strtoul+0x1a4>
   23318:	21 97       	sbiw	r28, 0x01	; 1
   2331a:	f6 01       	movw	r30, r12
   2331c:	d1 83       	std	Z+1, r29	; 0x01
   2331e:	c0 83       	st	Z, r28
   23320:	00 ff       	sbrs	r16, 0
   23322:	07 c0       	rjmp	.+14     	; 0x23332 <strtoul+0x16a>
   23324:	90 95       	com	r25
   23326:	80 95       	com	r24
   23328:	70 95       	com	r23
   2332a:	61 95       	neg	r22
   2332c:	7f 4f       	sbci	r23, 0xFF	; 255
   2332e:	8f 4f       	sbci	r24, 0xFF	; 255
   23330:	9f 4f       	sbci	r25, 0xFF	; 255
   23332:	2f 3f       	cpi	r18, 0xFF	; 255
   23334:	49 f4       	brne	.+18     	; 0x23348 <strtoul+0x180>
   23336:	82 e2       	ldi	r24, 0x22	; 34
   23338:	90 e0       	ldi	r25, 0x00	; 0
   2333a:	90 93 10 14 	sts	0x1410, r25	; 0x801410 <errno+0x1>
   2333e:	80 93 0f 14 	sts	0x140F, r24	; 0x80140f <errno>
   23342:	6f ef       	ldi	r22, 0xFF	; 255
   23344:	7f ef       	ldi	r23, 0xFF	; 255
   23346:	cb 01       	movw	r24, r22
   23348:	df 91       	pop	r29
   2334a:	cf 91       	pop	r28
   2334c:	1f 91       	pop	r17
   2334e:	0f 91       	pop	r16
   23350:	ff 90       	pop	r15
   23352:	ef 90       	pop	r14
   23354:	df 90       	pop	r13
   23356:	cf 90       	pop	r12
   23358:	bf 90       	pop	r11
   2335a:	af 90       	pop	r10
   2335c:	9f 90       	pop	r9
   2335e:	8f 90       	pop	r8
   23360:	7f 90       	pop	r7
   23362:	6f 90       	pop	r6
   23364:	5f 90       	pop	r5
   23366:	4f 90       	pop	r4
   23368:	3f 90       	pop	r3
   2336a:	08 95       	ret
   2336c:	01 ff       	sbrs	r16, 1
   2336e:	d8 cf       	rjmp	.-80     	; 0x23320 <strtoul+0x158>
   23370:	22 97       	sbiw	r28, 0x02	; 2
   23372:	d3 cf       	rjmp	.-90     	; 0x2331a <strtoul+0x152>
   23374:	10 e3       	ldi	r17, 0x30	; 48
   23376:	e1 14       	cp	r14, r1
   23378:	f1 04       	cpc	r15, r1
   2337a:	09 f4       	brne	.+2      	; 0x2337e <strtoul+0x1b6>
   2337c:	bc cf       	rjmp	.-136    	; 0x232f6 <strtoul+0x12e>
   2337e:	3a e0       	ldi	r19, 0x0A	; 10
   23380:	e3 16       	cp	r14, r19
   23382:	f1 04       	cpc	r15, r1
   23384:	e9 f0       	breq	.+58     	; 0x233c0 <strtoul+0x1f8>
   23386:	80 e1       	ldi	r24, 0x10	; 16
   23388:	e8 16       	cp	r14, r24
   2338a:	f1 04       	cpc	r15, r1
   2338c:	09 f4       	brne	.+2      	; 0x23390 <strtoul+0x1c8>
   2338e:	66 cf       	rjmp	.-308    	; 0x2325c <strtoul+0x94>
   23390:	e8 e0       	ldi	r30, 0x08	; 8
   23392:	ee 16       	cp	r14, r30
   23394:	f1 04       	cpc	r15, r1
   23396:	09 f4       	brne	.+2      	; 0x2339a <strtoul+0x1d2>
   23398:	b1 cf       	rjmp	.-158    	; 0x232fc <strtoul+0x134>
   2339a:	6f ef       	ldi	r22, 0xFF	; 255
   2339c:	7f ef       	ldi	r23, 0xFF	; 255
   2339e:	cb 01       	movw	r24, r22
   233a0:	97 01       	movw	r18, r14
   233a2:	0f 2c       	mov	r0, r15
   233a4:	00 0c       	add	r0, r0
   233a6:	44 0b       	sbc	r20, r20
   233a8:	55 0b       	sbc	r21, r21
   233aa:	0f 94 5d 16 	call	0x22cba	; 0x22cba <__udivmodsi4>
   233ae:	49 01       	movw	r8, r18
   233b0:	5a 01       	movw	r10, r20
   233b2:	5d cf       	rjmp	.-326    	; 0x2326e <strtoul+0xa6>
   233b4:	10 33       	cpi	r17, 0x30	; 48
   233b6:	09 f4       	brne	.+2      	; 0x233ba <strtoul+0x1f2>
   233b8:	49 cf       	rjmp	.-366    	; 0x2324c <strtoul+0x84>
   233ba:	9a e0       	ldi	r25, 0x0A	; 10
   233bc:	e9 2e       	mov	r14, r25
   233be:	f1 2c       	mov	r15, r1
   233c0:	89 e9       	ldi	r24, 0x99	; 153
   233c2:	88 2e       	mov	r8, r24
   233c4:	98 2c       	mov	r9, r8
   233c6:	a8 2c       	mov	r10, r8
   233c8:	89 e1       	ldi	r24, 0x19	; 25
   233ca:	b8 2e       	mov	r11, r24
   233cc:	50 cf       	rjmp	.-352    	; 0x2326e <strtoul+0xa6>

000233ce <abort>:
abort():
   233ce:	81 e0       	ldi	r24, 0x01	; 1
   233d0:	90 e0       	ldi	r25, 0x00	; 0
   233d2:	f8 94       	cli
   233d4:	0d 94 84 22 	jmp	0x24508	; 0x24508 <__do_global_dtors>

000233d8 <atof>:
atof():
   233d8:	66 27       	eor	r22, r22
   233da:	77 27       	eor	r23, r23
   233dc:	0d 94 6d 1f 	jmp	0x23eda	; 0x23eda <strtod>

000233e0 <atoi>:
atoi():
   233e0:	fc 01       	movw	r30, r24
   233e2:	88 27       	eor	r24, r24
   233e4:	99 27       	eor	r25, r25
   233e6:	e8 94       	clt
   233e8:	21 91       	ld	r18, Z+
   233ea:	20 32       	cpi	r18, 0x20	; 32
   233ec:	e9 f3       	breq	.-6      	; 0x233e8 <atoi+0x8>
   233ee:	29 30       	cpi	r18, 0x09	; 9
   233f0:	10 f0       	brcs	.+4      	; 0x233f6 <atoi+0x16>
   233f2:	2e 30       	cpi	r18, 0x0E	; 14
   233f4:	c8 f3       	brcs	.-14     	; 0x233e8 <atoi+0x8>
   233f6:	2b 32       	cpi	r18, 0x2B	; 43
   233f8:	41 f0       	breq	.+16     	; 0x2340a <atoi+0x2a>
   233fa:	2d 32       	cpi	r18, 0x2D	; 45
   233fc:	39 f4       	brne	.+14     	; 0x2340c <atoi+0x2c>
   233fe:	68 94       	set
   23400:	04 c0       	rjmp	.+8      	; 0x2340a <atoi+0x2a>
   23402:	0f 94 d3 1a 	call	0x235a6	; 0x235a6 <__mulhi_const_10>
   23406:	82 0f       	add	r24, r18
   23408:	91 1d       	adc	r25, r1
   2340a:	21 91       	ld	r18, Z+
   2340c:	20 53       	subi	r18, 0x30	; 48
   2340e:	2a 30       	cpi	r18, 0x0A	; 10
   23410:	c0 f3       	brcs	.-16     	; 0x23402 <atoi+0x22>
   23412:	1e f4       	brtc	.+6      	; 0x2341a <atoi+0x3a>
   23414:	90 95       	com	r25
   23416:	81 95       	neg	r24
   23418:	9f 4f       	sbci	r25, 0xFF	; 255
   2341a:	08 95       	ret

0002341c <isspace>:
isspace():
   2341c:	91 11       	cpse	r25, r1
   2341e:	0d 94 a3 21 	jmp	0x24346	; 0x24346 <__ctype_isfalse>
   23422:	80 32       	cpi	r24, 0x20	; 32
   23424:	19 f0       	breq	.+6      	; 0x2342c <isspace+0x10>
   23426:	89 50       	subi	r24, 0x09	; 9
   23428:	85 50       	subi	r24, 0x05	; 5
   2342a:	c8 f7       	brcc	.-14     	; 0x2341e <isspace+0x2>
   2342c:	08 95       	ret

0002342e <strcat_P>:
strcat_P():
   2342e:	fb 01       	movw	r30, r22
   23430:	dc 01       	movw	r26, r24
   23432:	0d 90       	ld	r0, X+
   23434:	00 20       	and	r0, r0
   23436:	e9 f7       	brne	.-6      	; 0x23432 <strcat_P+0x4>
   23438:	11 97       	sbiw	r26, 0x01	; 1
   2343a:	05 90       	lpm	r0, Z+
   2343c:	0d 92       	st	X+, r0
   2343e:	00 20       	and	r0, r0
   23440:	e1 f7       	brne	.-8      	; 0x2343a <strcat_P+0xc>
   23442:	08 95       	ret

00023444 <strcpy_P>:
strcpy_P():
   23444:	fb 01       	movw	r30, r22
   23446:	dc 01       	movw	r26, r24
   23448:	05 90       	lpm	r0, Z+
   2344a:	0d 92       	st	X+, r0
   2344c:	00 20       	and	r0, r0
   2344e:	e1 f7       	brne	.-8      	; 0x23448 <strcpy_P+0x4>
   23450:	08 95       	ret

00023452 <strtok>:
strtok():
   23452:	4e ed       	ldi	r20, 0xDE	; 222
   23454:	59 e0       	ldi	r21, 0x09	; 9
   23456:	0d 94 96 1a 	jmp	0x2352c	; 0x2352c <strtok_r>

0002345a <memcpy>:
memcpy():
   2345a:	fb 01       	movw	r30, r22
   2345c:	dc 01       	movw	r26, r24
   2345e:	02 c0       	rjmp	.+4      	; 0x23464 <memcpy+0xa>
   23460:	01 90       	ld	r0, Z+
   23462:	0d 92       	st	X+, r0
   23464:	41 50       	subi	r20, 0x01	; 1
   23466:	50 40       	sbci	r21, 0x00	; 0
   23468:	d8 f7       	brcc	.-10     	; 0x23460 <memcpy+0x6>
   2346a:	08 95       	ret

0002346c <memmove>:
memmove():
   2346c:	68 17       	cp	r22, r24
   2346e:	79 07       	cpc	r23, r25
   23470:	68 f4       	brcc	.+26     	; 0x2348c <memmove+0x20>
   23472:	fb 01       	movw	r30, r22
   23474:	dc 01       	movw	r26, r24
   23476:	e4 0f       	add	r30, r20
   23478:	f5 1f       	adc	r31, r21
   2347a:	a4 0f       	add	r26, r20
   2347c:	b5 1f       	adc	r27, r21
   2347e:	02 c0       	rjmp	.+4      	; 0x23484 <memmove+0x18>
   23480:	02 90       	ld	r0, -Z
   23482:	0e 92       	st	-X, r0
   23484:	41 50       	subi	r20, 0x01	; 1
   23486:	50 40       	sbci	r21, 0x00	; 0
   23488:	d8 f7       	brcc	.-10     	; 0x23480 <memmove+0x14>
   2348a:	08 95       	ret
   2348c:	0d 94 2d 1a 	jmp	0x2345a	; 0x2345a <memcpy>

00023490 <strcat>:
strcat():
   23490:	fb 01       	movw	r30, r22
   23492:	dc 01       	movw	r26, r24
   23494:	0d 90       	ld	r0, X+
   23496:	00 20       	and	r0, r0
   23498:	e9 f7       	brne	.-6      	; 0x23494 <strcat+0x4>
   2349a:	11 97       	sbiw	r26, 0x01	; 1
   2349c:	01 90       	ld	r0, Z+
   2349e:	0d 92       	st	X+, r0
   234a0:	00 20       	and	r0, r0
   234a2:	e1 f7       	brne	.-8      	; 0x2349c <strcat+0xc>
   234a4:	08 95       	ret

000234a6 <strchr>:
strchr():
   234a6:	fc 01       	movw	r30, r24
   234a8:	81 91       	ld	r24, Z+
   234aa:	86 17       	cp	r24, r22
   234ac:	21 f0       	breq	.+8      	; 0x234b6 <strchr+0x10>
   234ae:	88 23       	and	r24, r24
   234b0:	d9 f7       	brne	.-10     	; 0x234a8 <strchr+0x2>
   234b2:	99 27       	eor	r25, r25
   234b4:	08 95       	ret
   234b6:	31 97       	sbiw	r30, 0x01	; 1
   234b8:	cf 01       	movw	r24, r30
   234ba:	08 95       	ret

000234bc <strcmp>:
strcmp():
   234bc:	fb 01       	movw	r30, r22
   234be:	dc 01       	movw	r26, r24
   234c0:	8d 91       	ld	r24, X+
   234c2:	01 90       	ld	r0, Z+
   234c4:	80 19       	sub	r24, r0
   234c6:	01 10       	cpse	r0, r1
   234c8:	d9 f3       	breq	.-10     	; 0x234c0 <strcmp+0x4>
   234ca:	99 0b       	sbc	r25, r25
   234cc:	08 95       	ret

000234ce <strcpy>:
strcpy():
   234ce:	fb 01       	movw	r30, r22
   234d0:	dc 01       	movw	r26, r24
   234d2:	01 90       	ld	r0, Z+
   234d4:	0d 92       	st	X+, r0
   234d6:	00 20       	and	r0, r0
   234d8:	e1 f7       	brne	.-8      	; 0x234d2 <strcpy+0x4>
   234da:	08 95       	ret

000234dc <strncmp>:
strncmp():
   234dc:	fb 01       	movw	r30, r22
   234de:	dc 01       	movw	r26, r24
   234e0:	41 50       	subi	r20, 0x01	; 1
   234e2:	50 40       	sbci	r21, 0x00	; 0
   234e4:	30 f0       	brcs	.+12     	; 0x234f2 <strncmp+0x16>
   234e6:	8d 91       	ld	r24, X+
   234e8:	01 90       	ld	r0, Z+
   234ea:	80 19       	sub	r24, r0
   234ec:	19 f4       	brne	.+6      	; 0x234f4 <strncmp+0x18>
   234ee:	00 20       	and	r0, r0
   234f0:	b9 f7       	brne	.-18     	; 0x234e0 <strncmp+0x4>
   234f2:	88 1b       	sub	r24, r24
   234f4:	99 0b       	sbc	r25, r25
   234f6:	08 95       	ret

000234f8 <strncpy>:
strncpy():
   234f8:	fb 01       	movw	r30, r22
   234fa:	dc 01       	movw	r26, r24
   234fc:	41 50       	subi	r20, 0x01	; 1
   234fe:	50 40       	sbci	r21, 0x00	; 0
   23500:	48 f0       	brcs	.+18     	; 0x23514 <strncpy+0x1c>
   23502:	01 90       	ld	r0, Z+
   23504:	0d 92       	st	X+, r0
   23506:	00 20       	and	r0, r0
   23508:	c9 f7       	brne	.-14     	; 0x234fc <strncpy+0x4>
   2350a:	01 c0       	rjmp	.+2      	; 0x2350e <strncpy+0x16>
   2350c:	1d 92       	st	X+, r1
   2350e:	41 50       	subi	r20, 0x01	; 1
   23510:	50 40       	sbci	r21, 0x00	; 0
   23512:	e0 f7       	brcc	.-8      	; 0x2350c <strncpy+0x14>
   23514:	08 95       	ret

00023516 <strnlen>:
strnlen():
   23516:	fc 01       	movw	r30, r24
   23518:	61 50       	subi	r22, 0x01	; 1
   2351a:	70 40       	sbci	r23, 0x00	; 0
   2351c:	01 90       	ld	r0, Z+
   2351e:	01 10       	cpse	r0, r1
   23520:	d8 f7       	brcc	.-10     	; 0x23518 <strnlen+0x2>
   23522:	80 95       	com	r24
   23524:	90 95       	com	r25
   23526:	8e 0f       	add	r24, r30
   23528:	9f 1f       	adc	r25, r31
   2352a:	08 95       	ret

0002352c <strtok_r>:
strtok_r():
   2352c:	fa 01       	movw	r30, r20
   2352e:	a1 91       	ld	r26, Z+
   23530:	b0 81       	ld	r27, Z
   23532:	00 97       	sbiw	r24, 0x00	; 0
   23534:	19 f4       	brne	.+6      	; 0x2353c <strtok_r+0x10>
   23536:	10 97       	sbiw	r26, 0x00	; 0
   23538:	e1 f0       	breq	.+56     	; 0x23572 <strtok_r+0x46>
   2353a:	cd 01       	movw	r24, r26
   2353c:	dc 01       	movw	r26, r24
   2353e:	cd 01       	movw	r24, r26
   23540:	0d 90       	ld	r0, X+
   23542:	00 20       	and	r0, r0
   23544:	11 f4       	brne	.+4      	; 0x2354a <strtok_r+0x1e>
   23546:	c0 01       	movw	r24, r0
   23548:	13 c0       	rjmp	.+38     	; 0x23570 <strtok_r+0x44>
   2354a:	fb 01       	movw	r30, r22
   2354c:	21 91       	ld	r18, Z+
   2354e:	22 23       	and	r18, r18
   23550:	19 f0       	breq	.+6      	; 0x23558 <strtok_r+0x2c>
   23552:	20 15       	cp	r18, r0
   23554:	d9 f7       	brne	.-10     	; 0x2354c <strtok_r+0x20>
   23556:	f3 cf       	rjmp	.-26     	; 0x2353e <strtok_r+0x12>
   23558:	fb 01       	movw	r30, r22
   2355a:	21 91       	ld	r18, Z+
   2355c:	20 15       	cp	r18, r0
   2355e:	19 f4       	brne	.+6      	; 0x23566 <strtok_r+0x3a>
   23560:	1e 92       	st	-X, r1
   23562:	11 96       	adiw	r26, 0x01	; 1
   23564:	06 c0       	rjmp	.+12     	; 0x23572 <strtok_r+0x46>
   23566:	22 23       	and	r18, r18
   23568:	c1 f7       	brne	.-16     	; 0x2355a <strtok_r+0x2e>
   2356a:	0d 90       	ld	r0, X+
   2356c:	00 20       	and	r0, r0
   2356e:	a1 f7       	brne	.-24     	; 0x23558 <strtok_r+0x2c>
   23570:	d0 01       	movw	r26, r0
   23572:	fa 01       	movw	r30, r20
   23574:	a1 93       	st	Z+, r26
   23576:	b0 83       	st	Z, r27
   23578:	08 95       	ret

0002357a <itoa>:
itoa():
   2357a:	45 32       	cpi	r20, 0x25	; 37
   2357c:	51 05       	cpc	r21, r1
   2357e:	20 f4       	brcc	.+8      	; 0x23588 <itoa+0xe>
   23580:	42 30       	cpi	r20, 0x02	; 2
   23582:	10 f0       	brcs	.+4      	; 0x23588 <itoa+0xe>
   23584:	0d 94 c8 1a 	jmp	0x23590	; 0x23590 <__itoa_ncheck>
   23588:	fb 01       	movw	r30, r22
   2358a:	10 82       	st	Z, r1
   2358c:	cb 01       	movw	r24, r22
   2358e:	08 95       	ret

00023590 <__itoa_ncheck>:
__itoa_ncheck():
   23590:	bb 27       	eor	r27, r27
   23592:	4a 30       	cpi	r20, 0x0A	; 10
   23594:	31 f4       	brne	.+12     	; 0x235a2 <__itoa_ncheck+0x12>
   23596:	99 23       	and	r25, r25
   23598:	22 f4       	brpl	.+8      	; 0x235a2 <__itoa_ncheck+0x12>
   2359a:	bd e2       	ldi	r27, 0x2D	; 45
   2359c:	90 95       	com	r25
   2359e:	81 95       	neg	r24
   235a0:	9f 4f       	sbci	r25, 0xFF	; 255
   235a2:	0d 94 dc 1a 	jmp	0x235b8	; 0x235b8 <__utoa_common>

000235a6 <__mulhi_const_10>:
__mulhi_const_10():
   235a6:	7a e0       	ldi	r23, 0x0A	; 10
   235a8:	97 9f       	mul	r25, r23
   235aa:	90 2d       	mov	r25, r0
   235ac:	87 9f       	mul	r24, r23
   235ae:	80 2d       	mov	r24, r0
   235b0:	91 0d       	add	r25, r1
   235b2:	11 24       	eor	r1, r1
   235b4:	08 95       	ret

000235b6 <__utoa_ncheck>:
__utoa_ncheck():
   235b6:	bb 27       	eor	r27, r27

000235b8 <__utoa_common>:
   235b8:	fb 01       	movw	r30, r22
   235ba:	55 27       	eor	r21, r21
   235bc:	aa 27       	eor	r26, r26
   235be:	88 0f       	add	r24, r24
   235c0:	99 1f       	adc	r25, r25
   235c2:	aa 1f       	adc	r26, r26
   235c4:	a4 17       	cp	r26, r20
   235c6:	10 f0       	brcs	.+4      	; 0x235cc <__utoa_common+0x14>
   235c8:	a4 1b       	sub	r26, r20
   235ca:	83 95       	inc	r24
   235cc:	50 51       	subi	r21, 0x10	; 16
   235ce:	b9 f7       	brne	.-18     	; 0x235be <__utoa_common+0x6>
   235d0:	a0 5d       	subi	r26, 0xD0	; 208
   235d2:	aa 33       	cpi	r26, 0x3A	; 58
   235d4:	08 f0       	brcs	.+2      	; 0x235d8 <__utoa_common+0x20>
   235d6:	a9 5d       	subi	r26, 0xD9	; 217
   235d8:	a1 93       	st	Z+, r26
   235da:	00 97       	sbiw	r24, 0x00	; 0
   235dc:	79 f7       	brne	.-34     	; 0x235bc <__utoa_common+0x4>
   235de:	b1 11       	cpse	r27, r1
   235e0:	b1 93       	st	Z+, r27
   235e2:	11 92       	st	Z+, r1
   235e4:	cb 01       	movw	r24, r22
   235e6:	0d 94 d0 21 	jmp	0x243a0	; 0x243a0 <strrev>

000235ea <fdevopen>:
fdevopen():
   235ea:	0f 93       	push	r16
   235ec:	1f 93       	push	r17
   235ee:	cf 93       	push	r28
   235f0:	df 93       	push	r29
   235f2:	00 97       	sbiw	r24, 0x00	; 0
   235f4:	59 f4       	brne	.+22     	; 0x2360c <fdevopen+0x22>
   235f6:	61 15       	cp	r22, r1
   235f8:	71 05       	cpc	r23, r1
   235fa:	41 f4       	brne	.+16     	; 0x2360c <fdevopen+0x22>
   235fc:	f0 e0       	ldi	r31, 0x00	; 0
   235fe:	e0 e0       	ldi	r30, 0x00	; 0
   23600:	cf 01       	movw	r24, r30
   23602:	df 91       	pop	r29
   23604:	cf 91       	pop	r28
   23606:	1f 91       	pop	r17
   23608:	0f 91       	pop	r16
   2360a:	08 95       	ret
   2360c:	8b 01       	movw	r16, r22
   2360e:	ec 01       	movw	r28, r24
   23610:	6e e0       	ldi	r22, 0x0E	; 14
   23612:	70 e0       	ldi	r23, 0x00	; 0
   23614:	81 e0       	ldi	r24, 0x01	; 1
   23616:	90 e0       	ldi	r25, 0x00	; 0
   23618:	0f 94 d8 1d 	call	0x23bb0	; 0x23bb0 <calloc>
   2361c:	fc 01       	movw	r30, r24
   2361e:	89 2b       	or	r24, r25
   23620:	69 f3       	breq	.-38     	; 0x235fc <fdevopen+0x12>
   23622:	80 e8       	ldi	r24, 0x80	; 128
   23624:	83 83       	std	Z+3, r24	; 0x03
   23626:	01 15       	cp	r16, r1
   23628:	11 05       	cpc	r17, r1
   2362a:	71 f0       	breq	.+28     	; 0x23648 <fdevopen+0x5e>
   2362c:	13 87       	std	Z+11, r17	; 0x0b
   2362e:	02 87       	std	Z+10, r16	; 0x0a
   23630:	81 e8       	ldi	r24, 0x81	; 129
   23632:	83 83       	std	Z+3, r24	; 0x03
   23634:	80 91 f9 13 	lds	r24, 0x13F9	; 0x8013f9 <__iob>
   23638:	90 91 fa 13 	lds	r25, 0x13FA	; 0x8013fa <__iob+0x1>
   2363c:	89 2b       	or	r24, r25
   2363e:	21 f4       	brne	.+8      	; 0x23648 <fdevopen+0x5e>
   23640:	f0 93 fa 13 	sts	0x13FA, r31	; 0x8013fa <__iob+0x1>
   23644:	e0 93 f9 13 	sts	0x13F9, r30	; 0x8013f9 <__iob>
   23648:	20 97       	sbiw	r28, 0x00	; 0
   2364a:	d1 f2       	breq	.-76     	; 0x23600 <fdevopen+0x16>
   2364c:	d1 87       	std	Z+9, r29	; 0x09
   2364e:	c0 87       	std	Z+8, r28	; 0x08
   23650:	83 81       	ldd	r24, Z+3	; 0x03
   23652:	82 60       	ori	r24, 0x02	; 2
   23654:	83 83       	std	Z+3, r24	; 0x03
   23656:	80 91 fb 13 	lds	r24, 0x13FB	; 0x8013fb <__iob+0x2>
   2365a:	90 91 fc 13 	lds	r25, 0x13FC	; 0x8013fc <__iob+0x3>
   2365e:	89 2b       	or	r24, r25
   23660:	79 f6       	brne	.-98     	; 0x23600 <fdevopen+0x16>
   23662:	f0 93 fc 13 	sts	0x13FC, r31	; 0x8013fc <__iob+0x3>
   23666:	e0 93 fb 13 	sts	0x13FB, r30	; 0x8013fb <__iob+0x2>
   2366a:	80 91 fd 13 	lds	r24, 0x13FD	; 0x8013fd <__iob+0x4>
   2366e:	90 91 fe 13 	lds	r25, 0x13FE	; 0x8013fe <__iob+0x5>
   23672:	89 2b       	or	r24, r25
   23674:	29 f6       	brne	.-118    	; 0x23600 <fdevopen+0x16>
   23676:	f0 93 fe 13 	sts	0x13FE, r31	; 0x8013fe <__iob+0x5>
   2367a:	e0 93 fd 13 	sts	0x13FD, r30	; 0x8013fd <__iob+0x4>
   2367e:	c0 cf       	rjmp	.-128    	; 0x23600 <fdevopen+0x16>

00023680 <printf>:
printf():
   23680:	cf 93       	push	r28
   23682:	df 93       	push	r29
   23684:	cd b7       	in	r28, 0x3d	; 61
   23686:	de b7       	in	r29, 0x3e	; 62
   23688:	ae 01       	movw	r20, r28
   2368a:	4a 5f       	subi	r20, 0xFA	; 250
   2368c:	5f 4f       	sbci	r21, 0xFF	; 255
   2368e:	fa 01       	movw	r30, r20
   23690:	61 91       	ld	r22, Z+
   23692:	71 91       	ld	r23, Z+
   23694:	af 01       	movw	r20, r30
   23696:	80 91 fb 13 	lds	r24, 0x13FB	; 0x8013fb <__iob+0x2>
   2369a:	90 91 fc 13 	lds	r25, 0x13FC	; 0x8013fc <__iob+0x3>
   2369e:	0f 94 d6 1b 	call	0x237ac	; 0x237ac <vfprintf>
   236a2:	df 91       	pop	r29
   236a4:	cf 91       	pop	r28
   236a6:	08 95       	ret

000236a8 <printf_P>:
printf_P():
   236a8:	0f 93       	push	r16
   236aa:	1f 93       	push	r17
   236ac:	cf 93       	push	r28
   236ae:	df 93       	push	r29
   236b0:	cd b7       	in	r28, 0x3d	; 61
   236b2:	de b7       	in	r29, 0x3e	; 62
   236b4:	ae 01       	movw	r20, r28
   236b6:	48 5f       	subi	r20, 0xF8	; 248
   236b8:	5f 4f       	sbci	r21, 0xFF	; 255
   236ba:	da 01       	movw	r26, r20
   236bc:	6d 91       	ld	r22, X+
   236be:	7d 91       	ld	r23, X+
   236c0:	ad 01       	movw	r20, r26
   236c2:	09 ef       	ldi	r16, 0xF9	; 249
   236c4:	13 e1       	ldi	r17, 0x13	; 19
   236c6:	f8 01       	movw	r30, r16
   236c8:	82 81       	ldd	r24, Z+2	; 0x02
   236ca:	93 81       	ldd	r25, Z+3	; 0x03
   236cc:	dc 01       	movw	r26, r24
   236ce:	13 96       	adiw	r26, 0x03	; 3
   236d0:	2c 91       	ld	r18, X
   236d2:	13 97       	sbiw	r26, 0x03	; 3
   236d4:	28 60       	ori	r18, 0x08	; 8
   236d6:	13 96       	adiw	r26, 0x03	; 3
   236d8:	2c 93       	st	X, r18
   236da:	0f 94 d6 1b 	call	0x237ac	; 0x237ac <vfprintf>
   236de:	d8 01       	movw	r26, r16
   236e0:	12 96       	adiw	r26, 0x02	; 2
   236e2:	ed 91       	ld	r30, X+
   236e4:	fc 91       	ld	r31, X
   236e6:	23 81       	ldd	r18, Z+3	; 0x03
   236e8:	27 7f       	andi	r18, 0xF7	; 247
   236ea:	23 83       	std	Z+3, r18	; 0x03
   236ec:	df 91       	pop	r29
   236ee:	cf 91       	pop	r28
   236f0:	1f 91       	pop	r17
   236f2:	0f 91       	pop	r16
   236f4:	08 95       	ret

000236f6 <puts>:
puts():
   236f6:	0f 93       	push	r16
   236f8:	1f 93       	push	r17
   236fa:	cf 93       	push	r28
   236fc:	df 93       	push	r29
   236fe:	e0 91 fb 13 	lds	r30, 0x13FB	; 0x8013fb <__iob+0x2>
   23702:	f0 91 fc 13 	lds	r31, 0x13FC	; 0x8013fc <__iob+0x3>
   23706:	23 81       	ldd	r18, Z+3	; 0x03
   23708:	ec 01       	movw	r28, r24
   2370a:	10 e0       	ldi	r17, 0x00	; 0
   2370c:	00 e0       	ldi	r16, 0x00	; 0
   2370e:	21 fd       	sbrc	r18, 1
   23710:	08 c0       	rjmp	.+16     	; 0x23722 <puts+0x2c>
   23712:	0f ef       	ldi	r16, 0xFF	; 255
   23714:	1f ef       	ldi	r17, 0xFF	; 255
   23716:	14 c0       	rjmp	.+40     	; 0x23740 <puts+0x4a>
   23718:	19 95       	eicall
   2371a:	89 2b       	or	r24, r25
   2371c:	11 f0       	breq	.+4      	; 0x23722 <puts+0x2c>
   2371e:	0f ef       	ldi	r16, 0xFF	; 255
   23720:	1f ef       	ldi	r17, 0xFF	; 255
   23722:	89 91       	ld	r24, Y+
   23724:	60 91 fb 13 	lds	r22, 0x13FB	; 0x8013fb <__iob+0x2>
   23728:	70 91 fc 13 	lds	r23, 0x13FC	; 0x8013fc <__iob+0x3>
   2372c:	db 01       	movw	r26, r22
   2372e:	18 96       	adiw	r26, 0x08	; 8
   23730:	ed 91       	ld	r30, X+
   23732:	fc 91       	ld	r31, X
   23734:	81 11       	cpse	r24, r1
   23736:	f0 cf       	rjmp	.-32     	; 0x23718 <puts+0x22>
   23738:	8a e0       	ldi	r24, 0x0A	; 10
   2373a:	19 95       	eicall
   2373c:	89 2b       	or	r24, r25
   2373e:	49 f7       	brne	.-46     	; 0x23712 <puts+0x1c>
   23740:	c8 01       	movw	r24, r16
   23742:	df 91       	pop	r29
   23744:	cf 91       	pop	r28
   23746:	1f 91       	pop	r17
   23748:	0f 91       	pop	r16
   2374a:	08 95       	ret

0002374c <sprintf>:
sprintf():
   2374c:	0f 93       	push	r16
   2374e:	1f 93       	push	r17
   23750:	cf 93       	push	r28
   23752:	df 93       	push	r29
   23754:	cd b7       	in	r28, 0x3d	; 61
   23756:	de b7       	in	r29, 0x3e	; 62
   23758:	2e 97       	sbiw	r28, 0x0e	; 14
   2375a:	0f b6       	in	r0, 0x3f	; 63
   2375c:	f8 94       	cli
   2375e:	de bf       	out	0x3e, r29	; 62
   23760:	0f be       	out	0x3f, r0	; 63
   23762:	cd bf       	out	0x3d, r28	; 61
   23764:	0e 89       	ldd	r16, Y+22	; 0x16
   23766:	1f 89       	ldd	r17, Y+23	; 0x17
   23768:	86 e0       	ldi	r24, 0x06	; 6
   2376a:	8c 83       	std	Y+4, r24	; 0x04
   2376c:	1a 83       	std	Y+2, r17	; 0x02
   2376e:	09 83       	std	Y+1, r16	; 0x01
   23770:	8f ef       	ldi	r24, 0xFF	; 255
   23772:	9f e7       	ldi	r25, 0x7F	; 127
   23774:	9e 83       	std	Y+6, r25	; 0x06
   23776:	8d 83       	std	Y+5, r24	; 0x05
   23778:	ae 01       	movw	r20, r28
   2377a:	46 5e       	subi	r20, 0xE6	; 230
   2377c:	5f 4f       	sbci	r21, 0xFF	; 255
   2377e:	68 8d       	ldd	r22, Y+24	; 0x18
   23780:	79 8d       	ldd	r23, Y+25	; 0x19
   23782:	ce 01       	movw	r24, r28
   23784:	01 96       	adiw	r24, 0x01	; 1
   23786:	0f 94 d6 1b 	call	0x237ac	; 0x237ac <vfprintf>
   2378a:	2f 81       	ldd	r18, Y+7	; 0x07
   2378c:	38 85       	ldd	r19, Y+8	; 0x08
   2378e:	02 0f       	add	r16, r18
   23790:	13 1f       	adc	r17, r19
   23792:	f8 01       	movw	r30, r16
   23794:	10 82       	st	Z, r1
   23796:	2e 96       	adiw	r28, 0x0e	; 14
   23798:	0f b6       	in	r0, 0x3f	; 63
   2379a:	f8 94       	cli
   2379c:	de bf       	out	0x3e, r29	; 62
   2379e:	0f be       	out	0x3f, r0	; 63
   237a0:	cd bf       	out	0x3d, r28	; 61
   237a2:	df 91       	pop	r29
   237a4:	cf 91       	pop	r28
   237a6:	1f 91       	pop	r17
   237a8:	0f 91       	pop	r16
   237aa:	08 95       	ret

000237ac <vfprintf>:
vfprintf():
   237ac:	2f 92       	push	r2
   237ae:	3f 92       	push	r3
   237b0:	4f 92       	push	r4
   237b2:	5f 92       	push	r5
   237b4:	6f 92       	push	r6
   237b6:	7f 92       	push	r7
   237b8:	8f 92       	push	r8
   237ba:	9f 92       	push	r9
   237bc:	af 92       	push	r10
   237be:	bf 92       	push	r11
   237c0:	cf 92       	push	r12
   237c2:	df 92       	push	r13
   237c4:	ef 92       	push	r14
   237c6:	ff 92       	push	r15
   237c8:	0f 93       	push	r16
   237ca:	1f 93       	push	r17
   237cc:	cf 93       	push	r28
   237ce:	df 93       	push	r29
   237d0:	00 d0       	rcall	.+0      	; 0x237d2 <vfprintf+0x26>
   237d2:	00 d0       	rcall	.+0      	; 0x237d4 <vfprintf+0x28>
   237d4:	00 d0       	rcall	.+0      	; 0x237d6 <vfprintf+0x2a>
   237d6:	1f 92       	push	r1
   237d8:	1f 92       	push	r1
   237da:	cd b7       	in	r28, 0x3d	; 61
   237dc:	de b7       	in	r29, 0x3e	; 62
   237de:	7c 01       	movw	r14, r24
   237e0:	3b 01       	movw	r6, r22
   237e2:	8a 01       	movw	r16, r20
   237e4:	fc 01       	movw	r30, r24
   237e6:	17 82       	std	Z+7, r1	; 0x07
   237e8:	16 82       	std	Z+6, r1	; 0x06
   237ea:	83 81       	ldd	r24, Z+3	; 0x03
   237ec:	81 ff       	sbrs	r24, 1
   237ee:	dd c1       	rjmp	.+954    	; 0x23baa <vfprintf+0x3fe>
   237f0:	ce 01       	movw	r24, r28
   237f2:	01 96       	adiw	r24, 0x01	; 1
   237f4:	5c 01       	movw	r10, r24
   237f6:	f7 01       	movw	r30, r14
   237f8:	93 81       	ldd	r25, Z+3	; 0x03
   237fa:	f3 01       	movw	r30, r6
   237fc:	93 fd       	sbrc	r25, 3
   237fe:	85 91       	lpm	r24, Z+
   23800:	93 ff       	sbrs	r25, 3
   23802:	81 91       	ld	r24, Z+
   23804:	3f 01       	movw	r6, r30
   23806:	88 23       	and	r24, r24
   23808:	09 f4       	brne	.+2      	; 0x2380c <vfprintf+0x60>
   2380a:	53 c1       	rjmp	.+678    	; 0x23ab2 <vfprintf+0x306>
   2380c:	85 32       	cpi	r24, 0x25	; 37
   2380e:	39 f4       	brne	.+14     	; 0x2381e <vfprintf+0x72>
   23810:	93 fd       	sbrc	r25, 3
   23812:	85 91       	lpm	r24, Z+
   23814:	93 ff       	sbrs	r25, 3
   23816:	81 91       	ld	r24, Z+
   23818:	3f 01       	movw	r6, r30
   2381a:	85 32       	cpi	r24, 0x25	; 37
   2381c:	29 f4       	brne	.+10     	; 0x23828 <vfprintf+0x7c>
   2381e:	b7 01       	movw	r22, r14
   23820:	90 e0       	ldi	r25, 0x00	; 0
   23822:	0f 94 e0 21 	call	0x243c0	; 0x243c0 <fputc>
   23826:	e7 cf       	rjmp	.-50     	; 0x237f6 <vfprintf+0x4a>
   23828:	91 2c       	mov	r9, r1
   2382a:	21 2c       	mov	r2, r1
   2382c:	31 2c       	mov	r3, r1
   2382e:	ff e1       	ldi	r31, 0x1F	; 31
   23830:	f3 15       	cp	r31, r3
   23832:	38 f0       	brcs	.+14     	; 0x23842 <vfprintf+0x96>
   23834:	8b 32       	cpi	r24, 0x2B	; 43
   23836:	11 f1       	breq	.+68     	; 0x2387c <vfprintf+0xd0>
   23838:	90 f4       	brcc	.+36     	; 0x2385e <vfprintf+0xb2>
   2383a:	80 32       	cpi	r24, 0x20	; 32
   2383c:	09 f1       	breq	.+66     	; 0x23880 <vfprintf+0xd4>
   2383e:	83 32       	cpi	r24, 0x23	; 35
   23840:	29 f1       	breq	.+74     	; 0x2388c <vfprintf+0xe0>
   23842:	37 fc       	sbrc	r3, 7
   23844:	3c c0       	rjmp	.+120    	; 0x238be <vfprintf+0x112>
   23846:	20 ed       	ldi	r18, 0xD0	; 208
   23848:	28 0f       	add	r18, r24
   2384a:	2a 30       	cpi	r18, 0x0A	; 10
   2384c:	50 f5       	brcc	.+84     	; 0x238a2 <vfprintf+0xf6>
   2384e:	36 fe       	sbrs	r3, 6
   23850:	20 c0       	rjmp	.+64     	; 0x23892 <vfprintf+0xe6>
   23852:	8a e0       	ldi	r24, 0x0A	; 10
   23854:	98 9e       	mul	r9, r24
   23856:	20 0d       	add	r18, r0
   23858:	11 24       	eor	r1, r1
   2385a:	92 2e       	mov	r9, r18
   2385c:	06 c0       	rjmp	.+12     	; 0x2386a <vfprintf+0xbe>
   2385e:	8d 32       	cpi	r24, 0x2D	; 45
   23860:	91 f0       	breq	.+36     	; 0x23886 <vfprintf+0xda>
   23862:	80 33       	cpi	r24, 0x30	; 48
   23864:	71 f7       	brne	.-36     	; 0x23842 <vfprintf+0x96>
   23866:	68 94       	set
   23868:	30 f8       	bld	r3, 0
   2386a:	f3 01       	movw	r30, r6
   2386c:	93 fd       	sbrc	r25, 3
   2386e:	85 91       	lpm	r24, Z+
   23870:	93 ff       	sbrs	r25, 3
   23872:	81 91       	ld	r24, Z+
   23874:	3f 01       	movw	r6, r30
   23876:	81 11       	cpse	r24, r1
   23878:	da cf       	rjmp	.-76     	; 0x2382e <vfprintf+0x82>
   2387a:	21 c0       	rjmp	.+66     	; 0x238be <vfprintf+0x112>
   2387c:	68 94       	set
   2387e:	31 f8       	bld	r3, 1
   23880:	68 94       	set
   23882:	32 f8       	bld	r3, 2
   23884:	f2 cf       	rjmp	.-28     	; 0x2386a <vfprintf+0xbe>
   23886:	68 94       	set
   23888:	33 f8       	bld	r3, 3
   2388a:	ef cf       	rjmp	.-34     	; 0x2386a <vfprintf+0xbe>
   2388c:	68 94       	set
   2388e:	34 f8       	bld	r3, 4
   23890:	ec cf       	rjmp	.-40     	; 0x2386a <vfprintf+0xbe>
   23892:	ea e0       	ldi	r30, 0x0A	; 10
   23894:	2e 9e       	mul	r2, r30
   23896:	20 0d       	add	r18, r0
   23898:	11 24       	eor	r1, r1
   2389a:	22 2e       	mov	r2, r18
   2389c:	68 94       	set
   2389e:	35 f8       	bld	r3, 5
   238a0:	e4 cf       	rjmp	.-56     	; 0x2386a <vfprintf+0xbe>
   238a2:	8e 32       	cpi	r24, 0x2E	; 46
   238a4:	29 f4       	brne	.+10     	; 0x238b0 <vfprintf+0x104>
   238a6:	36 fc       	sbrc	r3, 6
   238a8:	04 c1       	rjmp	.+520    	; 0x23ab2 <vfprintf+0x306>
   238aa:	68 94       	set
   238ac:	36 f8       	bld	r3, 6
   238ae:	dd cf       	rjmp	.-70     	; 0x2386a <vfprintf+0xbe>
   238b0:	8c 36       	cpi	r24, 0x6C	; 108
   238b2:	19 f4       	brne	.+6      	; 0x238ba <vfprintf+0x10e>
   238b4:	68 94       	set
   238b6:	37 f8       	bld	r3, 7
   238b8:	d8 cf       	rjmp	.-80     	; 0x2386a <vfprintf+0xbe>
   238ba:	88 36       	cpi	r24, 0x68	; 104
   238bc:	b1 f2       	breq	.-84     	; 0x2386a <vfprintf+0xbe>
   238be:	98 2f       	mov	r25, r24
   238c0:	9f 7d       	andi	r25, 0xDF	; 223
   238c2:	95 54       	subi	r25, 0x45	; 69
   238c4:	93 30       	cpi	r25, 0x03	; 3
   238c6:	e0 f0       	brcs	.+56     	; 0x23900 <vfprintf+0x154>
   238c8:	83 36       	cpi	r24, 0x63	; 99
   238ca:	a1 f1       	breq	.+104    	; 0x23934 <vfprintf+0x188>
   238cc:	83 37       	cpi	r24, 0x73	; 115
   238ce:	c1 f1       	breq	.+112    	; 0x23940 <vfprintf+0x194>
   238d0:	83 35       	cpi	r24, 0x53	; 83
   238d2:	09 f0       	breq	.+2      	; 0x238d6 <vfprintf+0x12a>
   238d4:	63 c0       	rjmp	.+198    	; 0x2399c <vfprintf+0x1f0>
   238d6:	28 01       	movw	r4, r16
   238d8:	f2 e0       	ldi	r31, 0x02	; 2
   238da:	4f 0e       	add	r4, r31
   238dc:	51 1c       	adc	r5, r1
   238de:	f8 01       	movw	r30, r16
   238e0:	c0 80       	ld	r12, Z
   238e2:	d1 80       	ldd	r13, Z+1	; 0x01
   238e4:	69 2d       	mov	r22, r9
   238e6:	70 e0       	ldi	r23, 0x00	; 0
   238e8:	36 fc       	sbrc	r3, 6
   238ea:	02 c0       	rjmp	.+4      	; 0x238f0 <vfprintf+0x144>
   238ec:	6f ef       	ldi	r22, 0xFF	; 255
   238ee:	7f ef       	ldi	r23, 0xFF	; 255
   238f0:	c6 01       	movw	r24, r12
   238f2:	0f 94 be 21 	call	0x2437c	; 0x2437c <strnlen_P>
   238f6:	4c 01       	movw	r8, r24
   238f8:	68 94       	set
   238fa:	37 f8       	bld	r3, 7
   238fc:	82 01       	movw	r16, r4
   238fe:	0a c0       	rjmp	.+20     	; 0x23914 <vfprintf+0x168>
   23900:	0c 5f       	subi	r16, 0xFC	; 252
   23902:	1f 4f       	sbci	r17, 0xFF	; 255
   23904:	ff e3       	ldi	r31, 0x3F	; 63
   23906:	f9 83       	std	Y+1, r31	; 0x01
   23908:	88 24       	eor	r8, r8
   2390a:	83 94       	inc	r8
   2390c:	91 2c       	mov	r9, r1
   2390e:	65 01       	movw	r12, r10
   23910:	e8 94       	clt
   23912:	37 f8       	bld	r3, 7
   23914:	33 fe       	sbrs	r3, 3
   23916:	2d c0       	rjmp	.+90     	; 0x23972 <vfprintf+0x1c6>
   23918:	52 2c       	mov	r5, r2
   2391a:	81 14       	cp	r8, r1
   2391c:	91 04       	cpc	r9, r1
   2391e:	71 f5       	brne	.+92     	; 0x2397c <vfprintf+0x1d0>
   23920:	55 20       	and	r5, r5
   23922:	09 f4       	brne	.+2      	; 0x23926 <vfprintf+0x17a>
   23924:	68 cf       	rjmp	.-304    	; 0x237f6 <vfprintf+0x4a>
   23926:	b7 01       	movw	r22, r14
   23928:	80 e2       	ldi	r24, 0x20	; 32
   2392a:	90 e0       	ldi	r25, 0x00	; 0
   2392c:	0f 94 e0 21 	call	0x243c0	; 0x243c0 <fputc>
   23930:	5a 94       	dec	r5
   23932:	f6 cf       	rjmp	.-20     	; 0x23920 <vfprintf+0x174>
   23934:	f8 01       	movw	r30, r16
   23936:	80 81       	ld	r24, Z
   23938:	89 83       	std	Y+1, r24	; 0x01
   2393a:	0e 5f       	subi	r16, 0xFE	; 254
   2393c:	1f 4f       	sbci	r17, 0xFF	; 255
   2393e:	e4 cf       	rjmp	.-56     	; 0x23908 <vfprintf+0x15c>
   23940:	28 01       	movw	r4, r16
   23942:	f2 e0       	ldi	r31, 0x02	; 2
   23944:	4f 0e       	add	r4, r31
   23946:	51 1c       	adc	r5, r1
   23948:	f8 01       	movw	r30, r16
   2394a:	c0 80       	ld	r12, Z
   2394c:	d1 80       	ldd	r13, Z+1	; 0x01
   2394e:	69 2d       	mov	r22, r9
   23950:	70 e0       	ldi	r23, 0x00	; 0
   23952:	36 fc       	sbrc	r3, 6
   23954:	02 c0       	rjmp	.+4      	; 0x2395a <vfprintf+0x1ae>
   23956:	6f ef       	ldi	r22, 0xFF	; 255
   23958:	7f ef       	ldi	r23, 0xFF	; 255
   2395a:	c6 01       	movw	r24, r12
   2395c:	0f 94 8b 1a 	call	0x23516	; 0x23516 <strnlen>
   23960:	4c 01       	movw	r8, r24
   23962:	82 01       	movw	r16, r4
   23964:	d5 cf       	rjmp	.-86     	; 0x23910 <vfprintf+0x164>
   23966:	b7 01       	movw	r22, r14
   23968:	80 e2       	ldi	r24, 0x20	; 32
   2396a:	90 e0       	ldi	r25, 0x00	; 0
   2396c:	0f 94 e0 21 	call	0x243c0	; 0x243c0 <fputc>
   23970:	2a 94       	dec	r2
   23972:	28 14       	cp	r2, r8
   23974:	19 04       	cpc	r1, r9
   23976:	09 f0       	breq	.+2      	; 0x2397a <vfprintf+0x1ce>
   23978:	b0 f7       	brcc	.-20     	; 0x23966 <vfprintf+0x1ba>
   2397a:	ce cf       	rjmp	.-100    	; 0x23918 <vfprintf+0x16c>
   2397c:	f6 01       	movw	r30, r12
   2397e:	37 fc       	sbrc	r3, 7
   23980:	85 91       	lpm	r24, Z+
   23982:	37 fe       	sbrs	r3, 7
   23984:	81 91       	ld	r24, Z+
   23986:	6f 01       	movw	r12, r30
   23988:	b7 01       	movw	r22, r14
   2398a:	90 e0       	ldi	r25, 0x00	; 0
   2398c:	0f 94 e0 21 	call	0x243c0	; 0x243c0 <fputc>
   23990:	51 10       	cpse	r5, r1
   23992:	5a 94       	dec	r5
   23994:	f1 e0       	ldi	r31, 0x01	; 1
   23996:	8f 1a       	sub	r8, r31
   23998:	91 08       	sbc	r9, r1
   2399a:	bf cf       	rjmp	.-130    	; 0x2391a <vfprintf+0x16e>
   2399c:	84 36       	cpi	r24, 0x64	; 100
   2399e:	19 f0       	breq	.+6      	; 0x239a6 <vfprintf+0x1fa>
   239a0:	89 36       	cpi	r24, 0x69	; 105
   239a2:	09 f0       	breq	.+2      	; 0x239a6 <vfprintf+0x1fa>
   239a4:	77 c0       	rjmp	.+238    	; 0x23a94 <vfprintf+0x2e8>
   239a6:	f8 01       	movw	r30, r16
   239a8:	37 fe       	sbrs	r3, 7
   239aa:	6b c0       	rjmp	.+214    	; 0x23a82 <vfprintf+0x2d6>
   239ac:	60 81       	ld	r22, Z
   239ae:	71 81       	ldd	r23, Z+1	; 0x01
   239b0:	82 81       	ldd	r24, Z+2	; 0x02
   239b2:	93 81       	ldd	r25, Z+3	; 0x03
   239b4:	0c 5f       	subi	r16, 0xFC	; 252
   239b6:	1f 4f       	sbci	r17, 0xFF	; 255
   239b8:	f3 2d       	mov	r31, r3
   239ba:	ff 76       	andi	r31, 0x6F	; 111
   239bc:	3f 2e       	mov	r3, r31
   239be:	97 ff       	sbrs	r25, 7
   239c0:	09 c0       	rjmp	.+18     	; 0x239d4 <vfprintf+0x228>
   239c2:	90 95       	com	r25
   239c4:	80 95       	com	r24
   239c6:	70 95       	com	r23
   239c8:	61 95       	neg	r22
   239ca:	7f 4f       	sbci	r23, 0xFF	; 255
   239cc:	8f 4f       	sbci	r24, 0xFF	; 255
   239ce:	9f 4f       	sbci	r25, 0xFF	; 255
   239d0:	68 94       	set
   239d2:	37 f8       	bld	r3, 7
   239d4:	2a e0       	ldi	r18, 0x0A	; 10
   239d6:	30 e0       	ldi	r19, 0x00	; 0
   239d8:	a5 01       	movw	r20, r10
   239da:	0f 94 10 22 	call	0x24420	; 0x24420 <__ultoa_invert>
   239de:	c8 2e       	mov	r12, r24
   239e0:	ca 18       	sub	r12, r10
   239e2:	8c 2c       	mov	r8, r12
   239e4:	43 2c       	mov	r4, r3
   239e6:	36 fe       	sbrs	r3, 6
   239e8:	0c c0       	rjmp	.+24     	; 0x23a02 <vfprintf+0x256>
   239ea:	e8 94       	clt
   239ec:	40 f8       	bld	r4, 0
   239ee:	c9 14       	cp	r12, r9
   239f0:	40 f4       	brcc	.+16     	; 0x23a02 <vfprintf+0x256>
   239f2:	34 fe       	sbrs	r3, 4
   239f4:	05 c0       	rjmp	.+10     	; 0x23a00 <vfprintf+0x254>
   239f6:	32 fc       	sbrc	r3, 2
   239f8:	03 c0       	rjmp	.+6      	; 0x23a00 <vfprintf+0x254>
   239fa:	f3 2d       	mov	r31, r3
   239fc:	fe 7e       	andi	r31, 0xEE	; 238
   239fe:	4f 2e       	mov	r4, r31
   23a00:	89 2c       	mov	r8, r9
   23a02:	44 fe       	sbrs	r4, 4
   23a04:	aa c0       	rjmp	.+340    	; 0x23b5a <vfprintf+0x3ae>
   23a06:	fe 01       	movw	r30, r28
   23a08:	ec 0d       	add	r30, r12
   23a0a:	f1 1d       	adc	r31, r1
   23a0c:	80 81       	ld	r24, Z
   23a0e:	80 33       	cpi	r24, 0x30	; 48
   23a10:	09 f0       	breq	.+2      	; 0x23a14 <vfprintf+0x268>
   23a12:	9c c0       	rjmp	.+312    	; 0x23b4c <vfprintf+0x3a0>
   23a14:	24 2d       	mov	r18, r4
   23a16:	29 7e       	andi	r18, 0xE9	; 233
   23a18:	42 2e       	mov	r4, r18
   23a1a:	84 2d       	mov	r24, r4
   23a1c:	88 70       	andi	r24, 0x08	; 8
   23a1e:	58 2e       	mov	r5, r24
   23a20:	43 fc       	sbrc	r4, 3
   23a22:	aa c0       	rjmp	.+340    	; 0x23b78 <vfprintf+0x3cc>
   23a24:	40 fe       	sbrs	r4, 0
   23a26:	a4 c0       	rjmp	.+328    	; 0x23b70 <vfprintf+0x3c4>
   23a28:	9c 2c       	mov	r9, r12
   23a2a:	82 14       	cp	r8, r2
   23a2c:	18 f4       	brcc	.+6      	; 0x23a34 <vfprintf+0x288>
   23a2e:	2c 0c       	add	r2, r12
   23a30:	92 2c       	mov	r9, r2
   23a32:	98 18       	sub	r9, r8
   23a34:	44 fe       	sbrs	r4, 4
   23a36:	a6 c0       	rjmp	.+332    	; 0x23b84 <vfprintf+0x3d8>
   23a38:	b7 01       	movw	r22, r14
   23a3a:	80 e3       	ldi	r24, 0x30	; 48
   23a3c:	90 e0       	ldi	r25, 0x00	; 0
   23a3e:	0f 94 e0 21 	call	0x243c0	; 0x243c0 <fputc>
   23a42:	42 fe       	sbrs	r4, 2
   23a44:	09 c0       	rjmp	.+18     	; 0x23a58 <vfprintf+0x2ac>
   23a46:	88 e7       	ldi	r24, 0x78	; 120
   23a48:	90 e0       	ldi	r25, 0x00	; 0
   23a4a:	41 fe       	sbrs	r4, 1
   23a4c:	02 c0       	rjmp	.+4      	; 0x23a52 <vfprintf+0x2a6>
   23a4e:	88 e5       	ldi	r24, 0x58	; 88
   23a50:	90 e0       	ldi	r25, 0x00	; 0
   23a52:	b7 01       	movw	r22, r14
   23a54:	0f 94 e0 21 	call	0x243c0	; 0x243c0 <fputc>
   23a58:	c9 14       	cp	r12, r9
   23a5a:	08 f4       	brcc	.+2      	; 0x23a5e <vfprintf+0x2b2>
   23a5c:	9f c0       	rjmp	.+318    	; 0x23b9c <vfprintf+0x3f0>
   23a5e:	ca 94       	dec	r12
   23a60:	d1 2c       	mov	r13, r1
   23a62:	9f ef       	ldi	r25, 0xFF	; 255
   23a64:	c9 1a       	sub	r12, r25
   23a66:	d9 0a       	sbc	r13, r25
   23a68:	ca 0c       	add	r12, r10
   23a6a:	db 1c       	adc	r13, r11
   23a6c:	f6 01       	movw	r30, r12
   23a6e:	82 91       	ld	r24, -Z
   23a70:	6f 01       	movw	r12, r30
   23a72:	b7 01       	movw	r22, r14
   23a74:	90 e0       	ldi	r25, 0x00	; 0
   23a76:	0f 94 e0 21 	call	0x243c0	; 0x243c0 <fputc>
   23a7a:	ac 14       	cp	r10, r12
   23a7c:	bd 04       	cpc	r11, r13
   23a7e:	b1 f7       	brne	.-20     	; 0x23a6c <vfprintf+0x2c0>
   23a80:	4f cf       	rjmp	.-354    	; 0x23920 <vfprintf+0x174>
   23a82:	60 81       	ld	r22, Z
   23a84:	71 81       	ldd	r23, Z+1	; 0x01
   23a86:	07 2e       	mov	r0, r23
   23a88:	00 0c       	add	r0, r0
   23a8a:	88 0b       	sbc	r24, r24
   23a8c:	99 0b       	sbc	r25, r25
   23a8e:	0e 5f       	subi	r16, 0xFE	; 254
   23a90:	1f 4f       	sbci	r17, 0xFF	; 255
   23a92:	92 cf       	rjmp	.-220    	; 0x239b8 <vfprintf+0x20c>
   23a94:	d3 2c       	mov	r13, r3
   23a96:	e8 94       	clt
   23a98:	d4 f8       	bld	r13, 4
   23a9a:	2a e0       	ldi	r18, 0x0A	; 10
   23a9c:	30 e0       	ldi	r19, 0x00	; 0
   23a9e:	85 37       	cpi	r24, 0x75	; 117
   23aa0:	e1 f1       	breq	.+120    	; 0x23b1a <vfprintf+0x36e>
   23aa2:	23 2d       	mov	r18, r3
   23aa4:	29 7f       	andi	r18, 0xF9	; 249
   23aa6:	d2 2e       	mov	r13, r18
   23aa8:	8f 36       	cpi	r24, 0x6F	; 111
   23aaa:	a9 f1       	breq	.+106    	; 0x23b16 <vfprintf+0x36a>
   23aac:	f0 f4       	brcc	.+60     	; 0x23aea <vfprintf+0x33e>
   23aae:	88 35       	cpi	r24, 0x58	; 88
   23ab0:	51 f1       	breq	.+84     	; 0x23b06 <vfprintf+0x35a>
   23ab2:	f7 01       	movw	r30, r14
   23ab4:	86 81       	ldd	r24, Z+6	; 0x06
   23ab6:	97 81       	ldd	r25, Z+7	; 0x07
   23ab8:	2b 96       	adiw	r28, 0x0b	; 11
   23aba:	0f b6       	in	r0, 0x3f	; 63
   23abc:	f8 94       	cli
   23abe:	de bf       	out	0x3e, r29	; 62
   23ac0:	0f be       	out	0x3f, r0	; 63
   23ac2:	cd bf       	out	0x3d, r28	; 61
   23ac4:	df 91       	pop	r29
   23ac6:	cf 91       	pop	r28
   23ac8:	1f 91       	pop	r17
   23aca:	0f 91       	pop	r16
   23acc:	ff 90       	pop	r15
   23ace:	ef 90       	pop	r14
   23ad0:	df 90       	pop	r13
   23ad2:	cf 90       	pop	r12
   23ad4:	bf 90       	pop	r11
   23ad6:	af 90       	pop	r10
   23ad8:	9f 90       	pop	r9
   23ada:	8f 90       	pop	r8
   23adc:	7f 90       	pop	r7
   23ade:	6f 90       	pop	r6
   23ae0:	5f 90       	pop	r5
   23ae2:	4f 90       	pop	r4
   23ae4:	3f 90       	pop	r3
   23ae6:	2f 90       	pop	r2
   23ae8:	08 95       	ret
   23aea:	80 37       	cpi	r24, 0x70	; 112
   23aec:	49 f0       	breq	.+18     	; 0x23b00 <vfprintf+0x354>
   23aee:	88 37       	cpi	r24, 0x78	; 120
   23af0:	01 f7       	brne	.-64     	; 0x23ab2 <vfprintf+0x306>
   23af2:	d4 fe       	sbrs	r13, 4
   23af4:	02 c0       	rjmp	.+4      	; 0x23afa <vfprintf+0x34e>
   23af6:	68 94       	set
   23af8:	d2 f8       	bld	r13, 2
   23afa:	20 e1       	ldi	r18, 0x10	; 16
   23afc:	30 e0       	ldi	r19, 0x00	; 0
   23afe:	0d c0       	rjmp	.+26     	; 0x23b1a <vfprintf+0x36e>
   23b00:	68 94       	set
   23b02:	d4 f8       	bld	r13, 4
   23b04:	f6 cf       	rjmp	.-20     	; 0x23af2 <vfprintf+0x346>
   23b06:	34 fe       	sbrs	r3, 4
   23b08:	03 c0       	rjmp	.+6      	; 0x23b10 <vfprintf+0x364>
   23b0a:	82 2f       	mov	r24, r18
   23b0c:	86 60       	ori	r24, 0x06	; 6
   23b0e:	d8 2e       	mov	r13, r24
   23b10:	20 e1       	ldi	r18, 0x10	; 16
   23b12:	32 e0       	ldi	r19, 0x02	; 2
   23b14:	02 c0       	rjmp	.+4      	; 0x23b1a <vfprintf+0x36e>
   23b16:	28 e0       	ldi	r18, 0x08	; 8
   23b18:	30 e0       	ldi	r19, 0x00	; 0
   23b1a:	f8 01       	movw	r30, r16
   23b1c:	d7 fe       	sbrs	r13, 7
   23b1e:	0f c0       	rjmp	.+30     	; 0x23b3e <vfprintf+0x392>
   23b20:	60 81       	ld	r22, Z
   23b22:	71 81       	ldd	r23, Z+1	; 0x01
   23b24:	82 81       	ldd	r24, Z+2	; 0x02
   23b26:	93 81       	ldd	r25, Z+3	; 0x03
   23b28:	0c 5f       	subi	r16, 0xFC	; 252
   23b2a:	1f 4f       	sbci	r17, 0xFF	; 255
   23b2c:	a5 01       	movw	r20, r10
   23b2e:	0f 94 10 22 	call	0x24420	; 0x24420 <__ultoa_invert>
   23b32:	c8 2e       	mov	r12, r24
   23b34:	ca 18       	sub	r12, r10
   23b36:	3d 2c       	mov	r3, r13
   23b38:	e8 94       	clt
   23b3a:	37 f8       	bld	r3, 7
   23b3c:	52 cf       	rjmp	.-348    	; 0x239e2 <vfprintf+0x236>
   23b3e:	60 81       	ld	r22, Z
   23b40:	71 81       	ldd	r23, Z+1	; 0x01
   23b42:	90 e0       	ldi	r25, 0x00	; 0
   23b44:	80 e0       	ldi	r24, 0x00	; 0
   23b46:	0e 5f       	subi	r16, 0xFE	; 254
   23b48:	1f 4f       	sbci	r17, 0xFF	; 255
   23b4a:	f0 cf       	rjmp	.-32     	; 0x23b2c <vfprintf+0x380>
   23b4c:	42 fc       	sbrc	r4, 2
   23b4e:	02 c0       	rjmp	.+4      	; 0x23b54 <vfprintf+0x3a8>
   23b50:	83 94       	inc	r8
   23b52:	63 cf       	rjmp	.-314    	; 0x23a1a <vfprintf+0x26e>
   23b54:	83 94       	inc	r8
   23b56:	83 94       	inc	r8
   23b58:	60 cf       	rjmp	.-320    	; 0x23a1a <vfprintf+0x26e>
   23b5a:	84 2d       	mov	r24, r4
   23b5c:	86 78       	andi	r24, 0x86	; 134
   23b5e:	09 f4       	brne	.+2      	; 0x23b62 <vfprintf+0x3b6>
   23b60:	5c cf       	rjmp	.-328    	; 0x23a1a <vfprintf+0x26e>
   23b62:	f6 cf       	rjmp	.-20     	; 0x23b50 <vfprintf+0x3a4>
   23b64:	b7 01       	movw	r22, r14
   23b66:	80 e2       	ldi	r24, 0x20	; 32
   23b68:	90 e0       	ldi	r25, 0x00	; 0
   23b6a:	0f 94 e0 21 	call	0x243c0	; 0x243c0 <fputc>
   23b6e:	83 94       	inc	r8
   23b70:	82 14       	cp	r8, r2
   23b72:	c0 f3       	brcs	.-16     	; 0x23b64 <vfprintf+0x3b8>
   23b74:	51 2c       	mov	r5, r1
   23b76:	5e cf       	rjmp	.-324    	; 0x23a34 <vfprintf+0x288>
   23b78:	52 2c       	mov	r5, r2
   23b7a:	58 18       	sub	r5, r8
   23b7c:	82 14       	cp	r8, r2
   23b7e:	08 f4       	brcc	.+2      	; 0x23b82 <vfprintf+0x3d6>
   23b80:	59 cf       	rjmp	.-334    	; 0x23a34 <vfprintf+0x288>
   23b82:	f8 cf       	rjmp	.-16     	; 0x23b74 <vfprintf+0x3c8>
   23b84:	84 2d       	mov	r24, r4
   23b86:	86 78       	andi	r24, 0x86	; 134
   23b88:	09 f4       	brne	.+2      	; 0x23b8c <vfprintf+0x3e0>
   23b8a:	66 cf       	rjmp	.-308    	; 0x23a58 <vfprintf+0x2ac>
   23b8c:	8b e2       	ldi	r24, 0x2B	; 43
   23b8e:	41 fe       	sbrs	r4, 1
   23b90:	80 e2       	ldi	r24, 0x20	; 32
   23b92:	47 fc       	sbrc	r4, 7
   23b94:	8d e2       	ldi	r24, 0x2D	; 45
   23b96:	b7 01       	movw	r22, r14
   23b98:	90 e0       	ldi	r25, 0x00	; 0
   23b9a:	5c cf       	rjmp	.-328    	; 0x23a54 <vfprintf+0x2a8>
   23b9c:	b7 01       	movw	r22, r14
   23b9e:	80 e3       	ldi	r24, 0x30	; 48
   23ba0:	90 e0       	ldi	r25, 0x00	; 0
   23ba2:	0f 94 e0 21 	call	0x243c0	; 0x243c0 <fputc>
   23ba6:	9a 94       	dec	r9
   23ba8:	57 cf       	rjmp	.-338    	; 0x23a58 <vfprintf+0x2ac>
   23baa:	8f ef       	ldi	r24, 0xFF	; 255
   23bac:	9f ef       	ldi	r25, 0xFF	; 255
   23bae:	84 cf       	rjmp	.-248    	; 0x23ab8 <vfprintf+0x30c>

00023bb0 <calloc>:
calloc():
   23bb0:	0f 93       	push	r16
   23bb2:	1f 93       	push	r17
   23bb4:	cf 93       	push	r28
   23bb6:	df 93       	push	r29
   23bb8:	86 9f       	mul	r24, r22
   23bba:	80 01       	movw	r16, r0
   23bbc:	87 9f       	mul	r24, r23
   23bbe:	10 0d       	add	r17, r0
   23bc0:	96 9f       	mul	r25, r22
   23bc2:	10 0d       	add	r17, r0
   23bc4:	11 24       	eor	r1, r1
   23bc6:	c8 01       	movw	r24, r16
   23bc8:	0f 94 de 16 	call	0x22dbc	; 0x22dbc <malloc>
   23bcc:	ec 01       	movw	r28, r24
   23bce:	00 97       	sbiw	r24, 0x00	; 0
   23bd0:	29 f0       	breq	.+10     	; 0x23bdc <calloc+0x2c>
   23bd2:	a8 01       	movw	r20, r16
   23bd4:	70 e0       	ldi	r23, 0x00	; 0
   23bd6:	60 e0       	ldi	r22, 0x00	; 0
   23bd8:	0f 94 c9 21 	call	0x24392	; 0x24392 <memset>
   23bdc:	ce 01       	movw	r24, r28
   23bde:	df 91       	pop	r29
   23be0:	cf 91       	pop	r28
   23be2:	1f 91       	pop	r17
   23be4:	0f 91       	pop	r16
   23be6:	08 95       	ret

00023be8 <dtoa_prf>:
dtoa_prf():
   23be8:	8f 92       	push	r8
   23bea:	9f 92       	push	r9
   23bec:	af 92       	push	r10
   23bee:	bf 92       	push	r11
   23bf0:	cf 92       	push	r12
   23bf2:	df 92       	push	r13
   23bf4:	ef 92       	push	r14
   23bf6:	ff 92       	push	r15
   23bf8:	0f 93       	push	r16
   23bfa:	1f 93       	push	r17
   23bfc:	cf 93       	push	r28
   23bfe:	df 93       	push	r29
   23c00:	00 d0       	rcall	.+0      	; 0x23c02 <dtoa_prf+0x1a>
   23c02:	00 d0       	rcall	.+0      	; 0x23c04 <dtoa_prf+0x1c>
   23c04:	00 d0       	rcall	.+0      	; 0x23c06 <dtoa_prf+0x1e>
   23c06:	cd b7       	in	r28, 0x3d	; 61
   23c08:	de b7       	in	r29, 0x3e	; 62
   23c0a:	6a 01       	movw	r12, r20
   23c0c:	f2 2e       	mov	r15, r18
   23c0e:	b0 2e       	mov	r11, r16
   23c10:	10 2f       	mov	r17, r16
   23c12:	fb e3       	ldi	r31, 0x3B	; 59
   23c14:	af 2e       	mov	r10, r31
   23c16:	a0 16       	cp	r10, r16
   23c18:	08 f4       	brcc	.+2      	; 0x23c1c <dtoa_prf+0x34>
   23c1a:	1b e3       	ldi	r17, 0x3B	; 59
   23c1c:	1f 5f       	subi	r17, 0xFF	; 255
   23c1e:	01 2f       	mov	r16, r17
   23c20:	27 e0       	ldi	r18, 0x07	; 7
   23c22:	ae 01       	movw	r20, r28
   23c24:	4f 5f       	subi	r20, 0xFF	; 255
   23c26:	5f 4f       	sbci	r21, 0xFF	; 255
   23c28:	0f 94 cb 20 	call	0x24196	; 0x24196 <__ftoa_engine>
   23c2c:	bc 01       	movw	r22, r24
   23c2e:	89 81       	ldd	r24, Y+1	; 0x01
   23c30:	98 2f       	mov	r25, r24
   23c32:	99 70       	andi	r25, 0x09	; 9
   23c34:	91 30       	cpi	r25, 0x01	; 1
   23c36:	09 f4       	brne	.+2      	; 0x23c3a <dtoa_prf+0x52>
   23c38:	4e c0       	rjmp	.+156    	; 0x23cd6 <dtoa_prf+0xee>
   23c3a:	9b e2       	ldi	r25, 0x2B	; 43
   23c3c:	e1 fc       	sbrc	r14, 1
   23c3e:	04 c0       	rjmp	.+8      	; 0x23c48 <dtoa_prf+0x60>
   23c40:	9e 2d       	mov	r25, r14
   23c42:	91 70       	andi	r25, 0x01	; 1
   23c44:	e0 fc       	sbrc	r14, 0
   23c46:	49 c0       	rjmp	.+146    	; 0x23cda <dtoa_prf+0xf2>
   23c48:	5e 2d       	mov	r21, r14
   23c4a:	50 71       	andi	r21, 0x10	; 16
   23c4c:	e8 2f       	mov	r30, r24
   23c4e:	e8 70       	andi	r30, 0x08	; 8
   23c50:	83 ff       	sbrs	r24, 3
   23c52:	55 c0       	rjmp	.+170    	; 0x23cfe <dtoa_prf+0x116>
   23c54:	84 e0       	ldi	r24, 0x04	; 4
   23c56:	91 11       	cpse	r25, r1
   23c58:	01 c0       	rjmp	.+2      	; 0x23c5c <dtoa_prf+0x74>
   23c5a:	83 e0       	ldi	r24, 0x03	; 3
   23c5c:	ef 2d       	mov	r30, r15
   23c5e:	e8 1b       	sub	r30, r24
   23c60:	8f 15       	cp	r24, r15
   23c62:	08 f0       	brcs	.+2      	; 0x23c66 <dtoa_prf+0x7e>
   23c64:	e0 e0       	ldi	r30, 0x00	; 0
   23c66:	d6 01       	movw	r26, r12
   23c68:	8e 2f       	mov	r24, r30
   23c6a:	20 e2       	ldi	r18, 0x20	; 32
   23c6c:	55 23       	and	r21, r21
   23c6e:	c9 f1       	breq	.+114    	; 0x23ce2 <dtoa_prf+0xfa>
   23c70:	99 23       	and	r25, r25
   23c72:	29 f0       	breq	.+10     	; 0x23c7e <dtoa_prf+0x96>
   23c74:	d6 01       	movw	r26, r12
   23c76:	9c 93       	st	X, r25
   23c78:	c6 01       	movw	r24, r12
   23c7a:	01 96       	adiw	r24, 0x01	; 1
   23c7c:	6c 01       	movw	r12, r24
   23c7e:	96 01       	movw	r18, r12
   23c80:	2d 5f       	subi	r18, 0xFD	; 253
   23c82:	3f 4f       	sbci	r19, 0xFF	; 255
   23c84:	e2 fe       	sbrs	r14, 2
   23c86:	33 c0       	rjmp	.+102    	; 0x23cee <dtoa_prf+0x106>
   23c88:	8e e4       	ldi	r24, 0x4E	; 78
   23c8a:	d6 01       	movw	r26, r12
   23c8c:	8c 93       	st	X, r24
   23c8e:	91 e4       	ldi	r25, 0x41	; 65
   23c90:	11 96       	adiw	r26, 0x01	; 1
   23c92:	9c 93       	st	X, r25
   23c94:	11 97       	sbiw	r26, 0x01	; 1
   23c96:	12 96       	adiw	r26, 0x02	; 2
   23c98:	8c 93       	st	X, r24
   23c9a:	d9 01       	movw	r26, r18
   23c9c:	8e 2f       	mov	r24, r30
   23c9e:	90 e2       	ldi	r25, 0x20	; 32
   23ca0:	81 11       	cpse	r24, r1
   23ca2:	2a c0       	rjmp	.+84     	; 0x23cf8 <dtoa_prf+0x110>
   23ca4:	e2 0f       	add	r30, r18
   23ca6:	f3 2f       	mov	r31, r19
   23ca8:	f1 1d       	adc	r31, r1
   23caa:	10 82       	st	Z, r1
   23cac:	8e ef       	ldi	r24, 0xFE	; 254
   23cae:	9f ef       	ldi	r25, 0xFF	; 255
   23cb0:	29 96       	adiw	r28, 0x09	; 9
   23cb2:	0f b6       	in	r0, 0x3f	; 63
   23cb4:	f8 94       	cli
   23cb6:	de bf       	out	0x3e, r29	; 62
   23cb8:	0f be       	out	0x3f, r0	; 63
   23cba:	cd bf       	out	0x3d, r28	; 61
   23cbc:	df 91       	pop	r29
   23cbe:	cf 91       	pop	r28
   23cc0:	1f 91       	pop	r17
   23cc2:	0f 91       	pop	r16
   23cc4:	ff 90       	pop	r15
   23cc6:	ef 90       	pop	r14
   23cc8:	df 90       	pop	r13
   23cca:	cf 90       	pop	r12
   23ccc:	bf 90       	pop	r11
   23cce:	af 90       	pop	r10
   23cd0:	9f 90       	pop	r9
   23cd2:	8f 90       	pop	r8
   23cd4:	08 95       	ret
   23cd6:	9d e2       	ldi	r25, 0x2D	; 45
   23cd8:	b7 cf       	rjmp	.-146    	; 0x23c48 <dtoa_prf+0x60>
   23cda:	90 e2       	ldi	r25, 0x20	; 32
   23cdc:	b5 cf       	rjmp	.-150    	; 0x23c48 <dtoa_prf+0x60>
   23cde:	2d 93       	st	X+, r18
   23ce0:	81 50       	subi	r24, 0x01	; 1
   23ce2:	81 11       	cpse	r24, r1
   23ce4:	fc cf       	rjmp	.-8      	; 0x23cde <dtoa_prf+0xf6>
   23ce6:	ce 0e       	add	r12, r30
   23ce8:	d1 1c       	adc	r13, r1
   23cea:	e0 e0       	ldi	r30, 0x00	; 0
   23cec:	c1 cf       	rjmp	.-126    	; 0x23c70 <dtoa_prf+0x88>
   23cee:	8e e6       	ldi	r24, 0x6E	; 110
   23cf0:	d6 01       	movw	r26, r12
   23cf2:	8c 93       	st	X, r24
   23cf4:	91 e6       	ldi	r25, 0x61	; 97
   23cf6:	cc cf       	rjmp	.-104    	; 0x23c90 <dtoa_prf+0xa8>
   23cf8:	9d 93       	st	X+, r25
   23cfa:	81 50       	subi	r24, 0x01	; 1
   23cfc:	d1 cf       	rjmp	.-94     	; 0x23ca0 <dtoa_prf+0xb8>
   23cfe:	48 2f       	mov	r20, r24
   23d00:	44 70       	andi	r20, 0x04	; 4
   23d02:	82 ff       	sbrs	r24, 2
   23d04:	3d c0       	rjmp	.+122    	; 0x23d80 <dtoa_prf+0x198>
   23d06:	84 e0       	ldi	r24, 0x04	; 4
   23d08:	91 11       	cpse	r25, r1
   23d0a:	01 c0       	rjmp	.+2      	; 0x23d0e <dtoa_prf+0x126>
   23d0c:	83 e0       	ldi	r24, 0x03	; 3
   23d0e:	8f 15       	cp	r24, r15
   23d10:	10 f4       	brcc	.+4      	; 0x23d16 <dtoa_prf+0x12e>
   23d12:	ef 2d       	mov	r30, r15
   23d14:	e8 1b       	sub	r30, r24
   23d16:	d6 01       	movw	r26, r12
   23d18:	8e 2f       	mov	r24, r30
   23d1a:	20 e2       	ldi	r18, 0x20	; 32
   23d1c:	55 23       	and	r21, r21
   23d1e:	09 f1       	breq	.+66     	; 0x23d62 <dtoa_prf+0x17a>
   23d20:	99 23       	and	r25, r25
   23d22:	29 f0       	breq	.+10     	; 0x23d2e <dtoa_prf+0x146>
   23d24:	d6 01       	movw	r26, r12
   23d26:	9c 93       	st	X, r25
   23d28:	c6 01       	movw	r24, r12
   23d2a:	01 96       	adiw	r24, 0x01	; 1
   23d2c:	6c 01       	movw	r12, r24
   23d2e:	96 01       	movw	r18, r12
   23d30:	2d 5f       	subi	r18, 0xFD	; 253
   23d32:	3f 4f       	sbci	r19, 0xFF	; 255
   23d34:	e2 fe       	sbrs	r14, 2
   23d36:	1b c0       	rjmp	.+54     	; 0x23d6e <dtoa_prf+0x186>
   23d38:	89 e4       	ldi	r24, 0x49	; 73
   23d3a:	d6 01       	movw	r26, r12
   23d3c:	8c 93       	st	X, r24
   23d3e:	8e e4       	ldi	r24, 0x4E	; 78
   23d40:	11 96       	adiw	r26, 0x01	; 1
   23d42:	8c 93       	st	X, r24
   23d44:	11 97       	sbiw	r26, 0x01	; 1
   23d46:	86 e4       	ldi	r24, 0x46	; 70
   23d48:	12 96       	adiw	r26, 0x02	; 2
   23d4a:	8c 93       	st	X, r24
   23d4c:	d9 01       	movw	r26, r18
   23d4e:	8e 2f       	mov	r24, r30
   23d50:	90 e2       	ldi	r25, 0x20	; 32
   23d52:	88 23       	and	r24, r24
   23d54:	09 f4       	brne	.+2      	; 0x23d58 <dtoa_prf+0x170>
   23d56:	a6 cf       	rjmp	.-180    	; 0x23ca4 <dtoa_prf+0xbc>
   23d58:	9d 93       	st	X+, r25
   23d5a:	81 50       	subi	r24, 0x01	; 1
   23d5c:	fa cf       	rjmp	.-12     	; 0x23d52 <dtoa_prf+0x16a>
   23d5e:	2d 93       	st	X+, r18
   23d60:	81 50       	subi	r24, 0x01	; 1
   23d62:	81 11       	cpse	r24, r1
   23d64:	fc cf       	rjmp	.-8      	; 0x23d5e <dtoa_prf+0x176>
   23d66:	ce 0e       	add	r12, r30
   23d68:	d1 1c       	adc	r13, r1
   23d6a:	e0 e0       	ldi	r30, 0x00	; 0
   23d6c:	d9 cf       	rjmp	.-78     	; 0x23d20 <dtoa_prf+0x138>
   23d6e:	89 e6       	ldi	r24, 0x69	; 105
   23d70:	d6 01       	movw	r26, r12
   23d72:	8c 93       	st	X, r24
   23d74:	8e e6       	ldi	r24, 0x6E	; 110
   23d76:	11 96       	adiw	r26, 0x01	; 1
   23d78:	8c 93       	st	X, r24
   23d7a:	11 97       	sbiw	r26, 0x01	; 1
   23d7c:	86 e6       	ldi	r24, 0x66	; 102
   23d7e:	e4 cf       	rjmp	.-56     	; 0x23d48 <dtoa_prf+0x160>
   23d80:	9b 01       	movw	r18, r22
   23d82:	77 ff       	sbrs	r23, 7
   23d84:	02 c0       	rjmp	.+4      	; 0x23d8a <dtoa_prf+0x1a2>
   23d86:	30 e0       	ldi	r19, 0x00	; 0
   23d88:	20 e0       	ldi	r18, 0x00	; 0
   23d8a:	a1 e0       	ldi	r26, 0x01	; 1
   23d8c:	b0 e0       	ldi	r27, 0x00	; 0
   23d8e:	91 11       	cpse	r25, r1
   23d90:	02 c0       	rjmp	.+4      	; 0x23d96 <dtoa_prf+0x1ae>
   23d92:	b0 e0       	ldi	r27, 0x00	; 0
   23d94:	a0 e0       	ldi	r26, 0x00	; 0
   23d96:	f9 01       	movw	r30, r18
   23d98:	31 96       	adiw	r30, 0x01	; 1
   23d9a:	ae 0f       	add	r26, r30
   23d9c:	bf 1f       	adc	r27, r31
   23d9e:	8b 2c       	mov	r8, r11
   23da0:	91 2c       	mov	r9, r1
   23da2:	bb 20       	and	r11, r11
   23da4:	09 f4       	brne	.+2      	; 0x23da8 <dtoa_prf+0x1c0>
   23da6:	61 c0       	rjmp	.+194    	; 0x23e6a <dtoa_prf+0x282>
   23da8:	54 01       	movw	r10, r8
   23daa:	ef ef       	ldi	r30, 0xFF	; 255
   23dac:	ae 1a       	sub	r10, r30
   23dae:	be 0a       	sbc	r11, r30
   23db0:	aa 0d       	add	r26, r10
   23db2:	bb 1d       	adc	r27, r11
   23db4:	fa 16       	cp	r15, r26
   23db6:	1b 06       	cpc	r1, r27
   23db8:	19 f0       	breq	.+6      	; 0x23dc0 <dtoa_prf+0x1d8>
   23dba:	14 f0       	brlt	.+4      	; 0x23dc0 <dtoa_prf+0x1d8>
   23dbc:	4f 2d       	mov	r20, r15
   23dbe:	4a 1b       	sub	r20, r26
   23dc0:	51 11       	cpse	r21, r1
   23dc2:	88 c0       	rjmp	.+272    	; 0x23ed4 <dtoa_prf+0x2ec>
   23dc4:	e3 fc       	sbrc	r14, 3
   23dc6:	59 c0       	rjmp	.+178    	; 0x23e7a <dtoa_prf+0x292>
   23dc8:	76 01       	movw	r14, r12
   23dca:	a4 2f       	mov	r26, r20
   23dcc:	b0 e2       	ldi	r27, 0x20	; 32
   23dce:	a1 11       	cpse	r26, r1
   23dd0:	4f c0       	rjmp	.+158    	; 0x23e70 <dtoa_prf+0x288>
   23dd2:	c4 0e       	add	r12, r20
   23dd4:	d1 1c       	adc	r13, r1
   23dd6:	99 23       	and	r25, r25
   23dd8:	09 f4       	brne	.+2      	; 0x23ddc <dtoa_prf+0x1f4>
   23dda:	5b c0       	rjmp	.+182    	; 0x23e92 <dtoa_prf+0x2aa>
   23ddc:	40 e0       	ldi	r20, 0x00	; 0
   23dde:	d6 01       	movw	r26, r12
   23de0:	11 96       	adiw	r26, 0x01	; 1
   23de2:	f6 01       	movw	r30, r12
   23de4:	90 83       	st	Z, r25
   23de6:	6d 01       	movw	r12, r26
   23de8:	55 23       	and	r21, r21
   23dea:	09 f4       	brne	.+2      	; 0x23dee <dtoa_prf+0x206>
   23dec:	48 c0       	rjmp	.+144    	; 0x23e7e <dtoa_prf+0x296>
   23dee:	01 2f       	mov	r16, r17
   23df0:	06 0f       	add	r16, r22
   23df2:	9a 81       	ldd	r25, Y+2	; 0x02
   23df4:	58 2f       	mov	r21, r24
   23df6:	50 71       	andi	r21, 0x10	; 16
   23df8:	84 ff       	sbrs	r24, 4
   23dfa:	03 c0       	rjmp	.+6      	; 0x23e02 <dtoa_prf+0x21a>
   23dfc:	91 33       	cpi	r25, 0x31	; 49
   23dfe:	09 f4       	brne	.+2      	; 0x23e02 <dtoa_prf+0x21a>
   23e00:	01 50       	subi	r16, 0x01	; 1
   23e02:	10 16       	cp	r1, r16
   23e04:	0c f0       	brlt	.+2      	; 0x23e08 <dtoa_prf+0x220>
   23e06:	47 c0       	rjmp	.+142    	; 0x23e96 <dtoa_prf+0x2ae>
   23e08:	09 30       	cpi	r16, 0x09	; 9
   23e0a:	08 f0       	brcs	.+2      	; 0x23e0e <dtoa_prf+0x226>
   23e0c:	08 e0       	ldi	r16, 0x08	; 8
   23e0e:	ee e2       	ldi	r30, 0x2E	; 46
   23e10:	fe 2e       	mov	r15, r30
   23e12:	5b 01       	movw	r10, r22
   23e14:	a0 1a       	sub	r10, r16
   23e16:	b1 08       	sbc	r11, r1
   23e18:	85 01       	movw	r16, r10
   23e1a:	91 94       	neg	r9
   23e1c:	81 94       	neg	r8
   23e1e:	91 08       	sbc	r9, r1
   23e20:	2f 3f       	cpi	r18, 0xFF	; 255
   23e22:	32 07       	cpc	r19, r18
   23e24:	29 f4       	brne	.+10     	; 0x23e30 <dtoa_prf+0x248>
   23e26:	d6 01       	movw	r26, r12
   23e28:	fc 92       	st	X, r15
   23e2a:	f6 01       	movw	r30, r12
   23e2c:	31 96       	adiw	r30, 0x01	; 1
   23e2e:	6f 01       	movw	r12, r30
   23e30:	62 17       	cp	r22, r18
   23e32:	73 07       	cpc	r23, r19
   23e34:	94 f1       	brlt	.+100    	; 0x23e9a <dtoa_prf+0x2b2>
   23e36:	02 17       	cp	r16, r18
   23e38:	13 07       	cpc	r17, r19
   23e3a:	7c f5       	brge	.+94     	; 0x23e9a <dtoa_prf+0x2b2>
   23e3c:	db 01       	movw	r26, r22
   23e3e:	a2 1b       	sub	r26, r18
   23e40:	b3 0b       	sbc	r27, r19
   23e42:	aa 24       	eor	r10, r10
   23e44:	a3 94       	inc	r10
   23e46:	b1 2c       	mov	r11, r1
   23e48:	ac 0e       	add	r10, r28
   23e4a:	bd 1e       	adc	r11, r29
   23e4c:	aa 0d       	add	r26, r10
   23e4e:	bb 1d       	adc	r27, r11
   23e50:	11 96       	adiw	r26, 0x01	; 1
   23e52:	8c 91       	ld	r24, X
   23e54:	21 50       	subi	r18, 0x01	; 1
   23e56:	31 09       	sbc	r19, r1
   23e58:	d6 01       	movw	r26, r12
   23e5a:	11 96       	adiw	r26, 0x01	; 1
   23e5c:	28 15       	cp	r18, r8
   23e5e:	39 05       	cpc	r19, r9
   23e60:	f4 f0       	brlt	.+60     	; 0x23e9e <dtoa_prf+0x2b6>
   23e62:	f6 01       	movw	r30, r12
   23e64:	80 83       	st	Z, r24
   23e66:	6d 01       	movw	r12, r26
   23e68:	db cf       	rjmp	.-74     	; 0x23e20 <dtoa_prf+0x238>
   23e6a:	b1 2c       	mov	r11, r1
   23e6c:	a1 2c       	mov	r10, r1
   23e6e:	a0 cf       	rjmp	.-192    	; 0x23db0 <dtoa_prf+0x1c8>
   23e70:	f7 01       	movw	r30, r14
   23e72:	b1 93       	st	Z+, r27
   23e74:	7f 01       	movw	r14, r30
   23e76:	a1 50       	subi	r26, 0x01	; 1
   23e78:	aa cf       	rjmp	.-172    	; 0x23dce <dtoa_prf+0x1e6>
   23e7a:	91 11       	cpse	r25, r1
   23e7c:	b0 cf       	rjmp	.-160    	; 0x23dde <dtoa_prf+0x1f6>
   23e7e:	d6 01       	movw	r26, r12
   23e80:	94 2f       	mov	r25, r20
   23e82:	50 e3       	ldi	r21, 0x30	; 48
   23e84:	02 c0       	rjmp	.+4      	; 0x23e8a <dtoa_prf+0x2a2>
   23e86:	5d 93       	st	X+, r21
   23e88:	91 50       	subi	r25, 0x01	; 1
   23e8a:	91 11       	cpse	r25, r1
   23e8c:	fc cf       	rjmp	.-8      	; 0x23e86 <dtoa_prf+0x29e>
   23e8e:	c4 0e       	add	r12, r20
   23e90:	d1 1c       	adc	r13, r1
   23e92:	40 e0       	ldi	r20, 0x00	; 0
   23e94:	ac cf       	rjmp	.-168    	; 0x23dee <dtoa_prf+0x206>
   23e96:	01 e0       	ldi	r16, 0x01	; 1
   23e98:	ba cf       	rjmp	.-140    	; 0x23e0e <dtoa_prf+0x226>
   23e9a:	80 e3       	ldi	r24, 0x30	; 48
   23e9c:	db cf       	rjmp	.-74     	; 0x23e54 <dtoa_prf+0x26c>
   23e9e:	62 17       	cp	r22, r18
   23ea0:	73 07       	cpc	r23, r19
   23ea2:	31 f4       	brne	.+12     	; 0x23eb0 <dtoa_prf+0x2c8>
   23ea4:	96 33       	cpi	r25, 0x36	; 54
   23ea6:	88 f4       	brcc	.+34     	; 0x23eca <dtoa_prf+0x2e2>
   23ea8:	95 33       	cpi	r25, 0x35	; 53
   23eaa:	11 f4       	brne	.+4      	; 0x23eb0 <dtoa_prf+0x2c8>
   23eac:	55 23       	and	r21, r21
   23eae:	69 f0       	breq	.+26     	; 0x23eca <dtoa_prf+0x2e2>
   23eb0:	f6 01       	movw	r30, r12
   23eb2:	80 83       	st	Z, r24
   23eb4:	fd 01       	movw	r30, r26
   23eb6:	84 2f       	mov	r24, r20
   23eb8:	90 e2       	ldi	r25, 0x20	; 32
   23eba:	81 11       	cpse	r24, r1
   23ebc:	08 c0       	rjmp	.+16     	; 0x23ece <dtoa_prf+0x2e6>
   23ebe:	a4 0f       	add	r26, r20
   23ec0:	b1 1d       	adc	r27, r1
   23ec2:	1c 92       	st	X, r1
   23ec4:	90 e0       	ldi	r25, 0x00	; 0
   23ec6:	80 e0       	ldi	r24, 0x00	; 0
   23ec8:	f3 ce       	rjmp	.-538    	; 0x23cb0 <dtoa_prf+0xc8>
   23eca:	81 e3       	ldi	r24, 0x31	; 49
   23ecc:	f1 cf       	rjmp	.-30     	; 0x23eb0 <dtoa_prf+0x2c8>
   23ece:	91 93       	st	Z+, r25
   23ed0:	81 50       	subi	r24, 0x01	; 1
   23ed2:	f3 cf       	rjmp	.-26     	; 0x23eba <dtoa_prf+0x2d2>
   23ed4:	91 11       	cpse	r25, r1
   23ed6:	83 cf       	rjmp	.-250    	; 0x23dde <dtoa_prf+0x1f6>
   23ed8:	8a cf       	rjmp	.-236    	; 0x23dee <dtoa_prf+0x206>

00023eda <strtod>:
strtod():
   23eda:	8f 92       	push	r8
   23edc:	9f 92       	push	r9
   23ede:	af 92       	push	r10
   23ee0:	bf 92       	push	r11
   23ee2:	cf 92       	push	r12
   23ee4:	df 92       	push	r13
   23ee6:	ef 92       	push	r14
   23ee8:	ff 92       	push	r15
   23eea:	0f 93       	push	r16
   23eec:	1f 93       	push	r17
   23eee:	cf 93       	push	r28
   23ef0:	df 93       	push	r29
   23ef2:	5c 01       	movw	r10, r24
   23ef4:	7b 01       	movw	r14, r22
   23ef6:	61 15       	cp	r22, r1
   23ef8:	71 05       	cpc	r23, r1
   23efa:	19 f0       	breq	.+6      	; 0x23f02 <strtod+0x28>
   23efc:	db 01       	movw	r26, r22
   23efe:	8d 93       	st	X+, r24
   23f00:	9c 93       	st	X, r25
   23f02:	85 01       	movw	r16, r10
   23f04:	0f 5f       	subi	r16, 0xFF	; 255
   23f06:	1f 4f       	sbci	r17, 0xFF	; 255
   23f08:	f5 01       	movw	r30, r10
   23f0a:	d0 81       	ld	r29, Z
   23f0c:	8d 2f       	mov	r24, r29
   23f0e:	90 e0       	ldi	r25, 0x00	; 0
   23f10:	0f 94 0e 1a 	call	0x2341c	; 0x2341c <isspace>
   23f14:	6c 01       	movw	r12, r24
   23f16:	89 2b       	or	r24, r25
   23f18:	b9 f5       	brne	.+110    	; 0x23f88 <strtod+0xae>
   23f1a:	dd 32       	cpi	r29, 0x2D	; 45
   23f1c:	b9 f5       	brne	.+110    	; 0x23f8c <strtod+0xb2>
   23f1e:	0f 5f       	subi	r16, 0xFF	; 255
   23f20:	1f 4f       	sbci	r17, 0xFF	; 255
   23f22:	d5 01       	movw	r26, r10
   23f24:	11 96       	adiw	r26, 0x01	; 1
   23f26:	dc 91       	ld	r29, X
   23f28:	c1 e0       	ldi	r28, 0x01	; 1
   23f2a:	58 01       	movw	r10, r16
   23f2c:	f1 e0       	ldi	r31, 0x01	; 1
   23f2e:	af 1a       	sub	r10, r31
   23f30:	b1 08       	sbc	r11, r1
   23f32:	43 e0       	ldi	r20, 0x03	; 3
   23f34:	50 e0       	ldi	r21, 0x00	; 0
   23f36:	68 e3       	ldi	r22, 0x38	; 56
   23f38:	75 e0       	ldi	r23, 0x05	; 5
   23f3a:	c5 01       	movw	r24, r10
   23f3c:	0f 94 a6 21 	call	0x2434c	; 0x2434c <strncasecmp_P>
   23f40:	89 2b       	or	r24, r25
   23f42:	69 f5       	brne	.+90     	; 0x23f9e <strtod+0xc4>
   23f44:	68 01       	movw	r12, r16
   23f46:	82 e0       	ldi	r24, 0x02	; 2
   23f48:	c8 0e       	add	r12, r24
   23f4a:	d1 1c       	adc	r13, r1
   23f4c:	45 e0       	ldi	r20, 0x05	; 5
   23f4e:	50 e0       	ldi	r21, 0x00	; 0
   23f50:	63 e3       	ldi	r22, 0x33	; 51
   23f52:	75 e0       	ldi	r23, 0x05	; 5
   23f54:	c6 01       	movw	r24, r12
   23f56:	0f 94 a6 21 	call	0x2434c	; 0x2434c <strncasecmp_P>
   23f5a:	89 2b       	or	r24, r25
   23f5c:	21 f4       	brne	.+8      	; 0x23f66 <strtod+0x8c>
   23f5e:	68 01       	movw	r12, r16
   23f60:	97 e0       	ldi	r25, 0x07	; 7
   23f62:	c9 0e       	add	r12, r25
   23f64:	d1 1c       	adc	r13, r1
   23f66:	e1 14       	cp	r14, r1
   23f68:	f1 04       	cpc	r15, r1
   23f6a:	19 f0       	breq	.+6      	; 0x23f72 <strtod+0x98>
   23f6c:	d7 01       	movw	r26, r14
   23f6e:	cd 92       	st	X+, r12
   23f70:	dc 92       	st	X, r13
   23f72:	60 e0       	ldi	r22, 0x00	; 0
   23f74:	70 e0       	ldi	r23, 0x00	; 0
   23f76:	80 e8       	ldi	r24, 0x80	; 128
   23f78:	9f ef       	ldi	r25, 0xFF	; 255
   23f7a:	c1 11       	cpse	r28, r1
   23f7c:	ff c0       	rjmp	.+510    	; 0x2417c <strtod+0x2a2>
   23f7e:	60 e0       	ldi	r22, 0x00	; 0
   23f80:	70 e0       	ldi	r23, 0x00	; 0
   23f82:	80 e8       	ldi	r24, 0x80	; 128
   23f84:	9f e7       	ldi	r25, 0x7F	; 127
   23f86:	fa c0       	rjmp	.+500    	; 0x2417c <strtod+0x2a2>
   23f88:	58 01       	movw	r10, r16
   23f8a:	bb cf       	rjmp	.-138    	; 0x23f02 <strtod+0x28>
   23f8c:	db 32       	cpi	r29, 0x2B	; 43
   23f8e:	29 f4       	brne	.+10     	; 0x23f9a <strtod+0xc0>
   23f90:	85 01       	movw	r16, r10
   23f92:	0e 5f       	subi	r16, 0xFE	; 254
   23f94:	1f 4f       	sbci	r17, 0xFF	; 255
   23f96:	f5 01       	movw	r30, r10
   23f98:	d1 81       	ldd	r29, Z+1	; 0x01
   23f9a:	c0 e0       	ldi	r28, 0x00	; 0
   23f9c:	c6 cf       	rjmp	.-116    	; 0x23f2a <strtod+0x50>
   23f9e:	43 e0       	ldi	r20, 0x03	; 3
   23fa0:	50 e0       	ldi	r21, 0x00	; 0
   23fa2:	60 e3       	ldi	r22, 0x30	; 48
   23fa4:	75 e0       	ldi	r23, 0x05	; 5
   23fa6:	c5 01       	movw	r24, r10
   23fa8:	0f 94 a6 21 	call	0x2434c	; 0x2434c <strncasecmp_P>
   23fac:	89 2b       	or	r24, r25
   23fae:	e9 f0       	breq	.+58     	; 0x23fea <strtod+0x110>
   23fb0:	f8 01       	movw	r30, r16
   23fb2:	10 e0       	ldi	r17, 0x00	; 0
   23fb4:	00 e0       	ldi	r16, 0x00	; 0
   23fb6:	20 e0       	ldi	r18, 0x00	; 0
   23fb8:	30 e0       	ldi	r19, 0x00	; 0
   23fba:	a9 01       	movw	r20, r18
   23fbc:	5f 01       	movw	r10, r30
   23fbe:	b0 ed       	ldi	r27, 0xD0	; 208
   23fc0:	8b 2e       	mov	r8, r27
   23fc2:	8d 0e       	add	r8, r29
   23fc4:	89 e0       	ldi	r24, 0x09	; 9
   23fc6:	88 15       	cp	r24, r8
   23fc8:	c8 f1       	brcs	.+114    	; 0x2403c <strtod+0x162>
   23fca:	9c 2e       	mov	r9, r28
   23fcc:	68 94       	set
   23fce:	91 f8       	bld	r9, 1
   23fd0:	8c 2f       	mov	r24, r28
   23fd2:	88 70       	andi	r24, 0x08	; 8
   23fd4:	c2 ff       	sbrs	r28, 2
   23fd6:	16 c0       	rjmp	.+44     	; 0x24004 <strtod+0x12a>
   23fd8:	81 11       	cpse	r24, r1
   23fda:	02 c0       	rjmp	.+4      	; 0x23fe0 <strtod+0x106>
   23fdc:	0f 5f       	subi	r16, 0xFF	; 255
   23fde:	1f 4f       	sbci	r17, 0xFF	; 255
   23fe0:	31 96       	adiw	r30, 0x01	; 1
   23fe2:	d5 01       	movw	r26, r10
   23fe4:	dc 91       	ld	r29, X
   23fe6:	c9 2d       	mov	r28, r9
   23fe8:	e9 cf       	rjmp	.-46     	; 0x23fbc <strtod+0xe2>
   23fea:	e1 14       	cp	r14, r1
   23fec:	f1 04       	cpc	r15, r1
   23fee:	29 f0       	breq	.+10     	; 0x23ffa <strtod+0x120>
   23ff0:	0e 5f       	subi	r16, 0xFE	; 254
   23ff2:	1f 4f       	sbci	r17, 0xFF	; 255
   23ff4:	f7 01       	movw	r30, r14
   23ff6:	11 83       	std	Z+1, r17	; 0x01
   23ff8:	00 83       	st	Z, r16
   23ffa:	60 e0       	ldi	r22, 0x00	; 0
   23ffc:	70 e0       	ldi	r23, 0x00	; 0
   23ffe:	80 ec       	ldi	r24, 0xC0	; 192
   24000:	9f e7       	ldi	r25, 0x7F	; 127
   24002:	bc c0       	rjmp	.+376    	; 0x2417c <strtod+0x2a2>
   24004:	88 23       	and	r24, r24
   24006:	11 f0       	breq	.+4      	; 0x2400c <strtod+0x132>
   24008:	01 50       	subi	r16, 0x01	; 1
   2400a:	11 09       	sbc	r17, r1
   2400c:	a5 e0       	ldi	r26, 0x05	; 5
   2400e:	b0 e0       	ldi	r27, 0x00	; 0
   24010:	0f 94 b5 16 	call	0x22d6a	; 0x22d6a <__muluhisi3>
   24014:	9b 01       	movw	r18, r22
   24016:	ac 01       	movw	r20, r24
   24018:	22 0f       	add	r18, r18
   2401a:	33 1f       	adc	r19, r19
   2401c:	44 1f       	adc	r20, r20
   2401e:	55 1f       	adc	r21, r21
   24020:	28 0d       	add	r18, r8
   24022:	31 1d       	adc	r19, r1
   24024:	41 1d       	adc	r20, r1
   24026:	51 1d       	adc	r21, r1
   24028:	28 39       	cpi	r18, 0x98	; 152
   2402a:	99 e9       	ldi	r25, 0x99	; 153
   2402c:	39 07       	cpc	r19, r25
   2402e:	49 07       	cpc	r20, r25
   24030:	99 e1       	ldi	r25, 0x19	; 25
   24032:	59 07       	cpc	r21, r25
   24034:	a8 f2       	brcs	.-86     	; 0x23fe0 <strtod+0x106>
   24036:	c6 60       	ori	r28, 0x06	; 6
   24038:	9c 2e       	mov	r9, r28
   2403a:	d2 cf       	rjmp	.-92     	; 0x23fe0 <strtod+0x106>
   2403c:	ae ef       	ldi	r26, 0xFE	; 254
   2403e:	8a 12       	cpse	r8, r26
   24040:	06 c0       	rjmp	.+12     	; 0x2404e <strtod+0x174>
   24042:	c3 fd       	sbrc	r28, 3
   24044:	3c c0       	rjmp	.+120    	; 0x240be <strtod+0x1e4>
   24046:	9c 2e       	mov	r9, r28
   24048:	68 94       	set
   2404a:	93 f8       	bld	r9, 3
   2404c:	c9 cf       	rjmp	.-110    	; 0x23fe0 <strtod+0x106>
   2404e:	df 7d       	andi	r29, 0xDF	; 223
   24050:	d5 34       	cpi	r29, 0x45	; 69
   24052:	a9 f5       	brne	.+106    	; 0x240be <strtod+0x1e4>
   24054:	80 81       	ld	r24, Z
   24056:	8d 32       	cpi	r24, 0x2D	; 45
   24058:	39 f4       	brne	.+14     	; 0x24068 <strtod+0x18e>
   2405a:	c0 61       	ori	r28, 0x10	; 16
   2405c:	df 01       	movw	r26, r30
   2405e:	12 96       	adiw	r26, 0x02	; 2
   24060:	81 81       	ldd	r24, Z+1	; 0x01
   24062:	62 e0       	ldi	r22, 0x02	; 2
   24064:	70 e0       	ldi	r23, 0x00	; 0
   24066:	06 c0       	rjmp	.+12     	; 0x24074 <strtod+0x19a>
   24068:	df 01       	movw	r26, r30
   2406a:	8b 32       	cpi	r24, 0x2B	; 43
   2406c:	c1 f3       	breq	.-16     	; 0x2405e <strtod+0x184>
   2406e:	11 96       	adiw	r26, 0x01	; 1
   24070:	61 e0       	ldi	r22, 0x01	; 1
   24072:	70 e0       	ldi	r23, 0x00	; 0
   24074:	80 53       	subi	r24, 0x30	; 48
   24076:	5d 01       	movw	r10, r26
   24078:	a6 1a       	sub	r10, r22
   2407a:	b7 0a       	sbc	r11, r23
   2407c:	8a 30       	cpi	r24, 0x0A	; 10
   2407e:	f8 f4       	brcc	.+62     	; 0x240be <strtod+0x1e4>
   24080:	e0 e8       	ldi	r30, 0x80	; 128
   24082:	ce 16       	cp	r12, r30
   24084:	ec e0       	ldi	r30, 0x0C	; 12
   24086:	de 06       	cpc	r13, r30
   24088:	5c f4       	brge	.+22     	; 0x240a0 <strtod+0x1c6>
   2408a:	b6 01       	movw	r22, r12
   2408c:	66 0f       	add	r22, r22
   2408e:	77 1f       	adc	r23, r23
   24090:	66 0f       	add	r22, r22
   24092:	77 1f       	adc	r23, r23
   24094:	c6 0e       	add	r12, r22
   24096:	d7 1e       	adc	r13, r23
   24098:	cc 0c       	add	r12, r12
   2409a:	dd 1c       	adc	r13, r13
   2409c:	c8 0e       	add	r12, r24
   2409e:	d1 1c       	adc	r13, r1
   240a0:	5d 01       	movw	r10, r26
   240a2:	ff ef       	ldi	r31, 0xFF	; 255
   240a4:	af 1a       	sub	r10, r31
   240a6:	bf 0a       	sbc	r11, r31
   240a8:	8c 91       	ld	r24, X
   240aa:	80 53       	subi	r24, 0x30	; 48
   240ac:	8a 30       	cpi	r24, 0x0A	; 10
   240ae:	a8 f1       	brcs	.+106    	; 0x2411a <strtod+0x240>
   240b0:	c4 ff       	sbrs	r28, 4
   240b2:	03 c0       	rjmp	.+6      	; 0x240ba <strtod+0x1e0>
   240b4:	d1 94       	neg	r13
   240b6:	c1 94       	neg	r12
   240b8:	d1 08       	sbc	r13, r1
   240ba:	0c 0d       	add	r16, r12
   240bc:	1d 1d       	adc	r17, r13
   240be:	c1 ff       	sbrs	r28, 1
   240c0:	09 c0       	rjmp	.+18     	; 0x240d4 <strtod+0x1fa>
   240c2:	e1 14       	cp	r14, r1
   240c4:	f1 04       	cpc	r15, r1
   240c6:	31 f0       	breq	.+12     	; 0x240d4 <strtod+0x1fa>
   240c8:	81 e0       	ldi	r24, 0x01	; 1
   240ca:	a8 1a       	sub	r10, r24
   240cc:	b1 08       	sbc	r11, r1
   240ce:	d7 01       	movw	r26, r14
   240d0:	ad 92       	st	X+, r10
   240d2:	bc 92       	st	X, r11
   240d4:	ca 01       	movw	r24, r20
   240d6:	b9 01       	movw	r22, r18
   240d8:	0f 94 f5 14 	call	0x229ea	; 0x229ea <__floatunsisf>
   240dc:	c3 70       	andi	r28, 0x03	; 3
   240de:	c3 30       	cpi	r28, 0x03	; 3
   240e0:	09 f4       	brne	.+2      	; 0x240e4 <strtod+0x20a>
   240e2:	90 58       	subi	r25, 0x80	; 128
   240e4:	4b 01       	movw	r8, r22
   240e6:	5c 01       	movw	r10, r24
   240e8:	20 e0       	ldi	r18, 0x00	; 0
   240ea:	30 e0       	ldi	r19, 0x00	; 0
   240ec:	a9 01       	movw	r20, r18
   240ee:	0f 94 48 14 	call	0x22890	; 0x22890 <__cmpsf2>
   240f2:	88 23       	and	r24, r24
   240f4:	09 f4       	brne	.+2      	; 0x240f8 <strtod+0x21e>
   240f6:	40 c0       	rjmp	.+128    	; 0x24178 <strtod+0x29e>
   240f8:	c7 e6       	ldi	r28, 0x67	; 103
   240fa:	d5 e0       	ldi	r29, 0x05	; 5
   240fc:	17 ff       	sbrs	r17, 7
   240fe:	05 c0       	rjmp	.+10     	; 0x2410a <strtod+0x230>
   24100:	11 95       	neg	r17
   24102:	01 95       	neg	r16
   24104:	11 09       	sbc	r17, r1
   24106:	cf e4       	ldi	r28, 0x4F	; 79
   24108:	d5 e0       	ldi	r29, 0x05	; 5
   2410a:	6e 01       	movw	r12, r28
   2410c:	b8 e1       	ldi	r27, 0x18	; 24
   2410e:	cb 1a       	sub	r12, r27
   24110:	d1 08       	sbc	r13, r1
   24112:	80 e2       	ldi	r24, 0x20	; 32
   24114:	e8 2e       	mov	r14, r24
   24116:	f1 2c       	mov	r15, r1
   24118:	0f c0       	rjmp	.+30     	; 0x24138 <strtod+0x25e>
   2411a:	d5 01       	movw	r26, r10
   2411c:	b1 cf       	rjmp	.-158    	; 0x24080 <strtod+0x1a6>
   2411e:	fe 01       	movw	r30, r28
   24120:	25 91       	lpm	r18, Z+
   24122:	35 91       	lpm	r19, Z+
   24124:	45 91       	lpm	r20, Z+
   24126:	54 91       	lpm	r21, Z
   24128:	0e 19       	sub	r16, r14
   2412a:	1f 09       	sbc	r17, r15
   2412c:	c5 01       	movw	r24, r10
   2412e:	b4 01       	movw	r22, r8
   24130:	0f 94 ac 15 	call	0x22b58	; 0x22b58 <__mulsf3>
   24134:	4b 01       	movw	r8, r22
   24136:	5c 01       	movw	r10, r24
   24138:	d5 01       	movw	r26, r10
   2413a:	c4 01       	movw	r24, r8
   2413c:	0e 15       	cp	r16, r14
   2413e:	1f 05       	cpc	r17, r15
   24140:	74 f7       	brge	.-36     	; 0x2411e <strtod+0x244>
   24142:	24 97       	sbiw	r28, 0x04	; 4
   24144:	f5 94       	asr	r15
   24146:	e7 94       	ror	r14
   24148:	cc 16       	cp	r12, r28
   2414a:	dd 06       	cpc	r13, r29
   2414c:	a9 f7       	brne	.-22     	; 0x24138 <strtod+0x25e>
   2414e:	8a 2f       	mov	r24, r26
   24150:	88 0f       	add	r24, r24
   24152:	8b 2f       	mov	r24, r27
   24154:	88 1f       	adc	r24, r24
   24156:	8f 3f       	cpi	r24, 0xFF	; 255
   24158:	49 f0       	breq	.+18     	; 0x2416c <strtod+0x292>
   2415a:	20 e0       	ldi	r18, 0x00	; 0
   2415c:	30 e0       	ldi	r19, 0x00	; 0
   2415e:	a9 01       	movw	r20, r18
   24160:	c5 01       	movw	r24, r10
   24162:	b4 01       	movw	r22, r8
   24164:	0f 94 48 14 	call	0x22890	; 0x22890 <__cmpsf2>
   24168:	81 11       	cpse	r24, r1
   2416a:	06 c0       	rjmp	.+12     	; 0x24178 <strtod+0x29e>
   2416c:	82 e2       	ldi	r24, 0x22	; 34
   2416e:	90 e0       	ldi	r25, 0x00	; 0
   24170:	90 93 10 14 	sts	0x1410, r25	; 0x801410 <errno+0x1>
   24174:	80 93 0f 14 	sts	0x140F, r24	; 0x80140f <errno>
   24178:	c5 01       	movw	r24, r10
   2417a:	b4 01       	movw	r22, r8
   2417c:	df 91       	pop	r29
   2417e:	cf 91       	pop	r28
   24180:	1f 91       	pop	r17
   24182:	0f 91       	pop	r16
   24184:	ff 90       	pop	r15
   24186:	ef 90       	pop	r14
   24188:	df 90       	pop	r13
   2418a:	cf 90       	pop	r12
   2418c:	bf 90       	pop	r11
   2418e:	af 90       	pop	r10
   24190:	9f 90       	pop	r9
   24192:	8f 90       	pop	r8
   24194:	08 95       	ret

00024196 <__ftoa_engine>:
__ftoa_engine():
   24196:	28 30       	cpi	r18, 0x08	; 8
   24198:	08 f0       	brcs	.+2      	; 0x2419c <__ftoa_engine+0x6>
   2419a:	27 e0       	ldi	r18, 0x07	; 7
   2419c:	33 27       	eor	r19, r19
   2419e:	da 01       	movw	r26, r20
   241a0:	99 0f       	add	r25, r25
   241a2:	31 1d       	adc	r19, r1
   241a4:	87 fd       	sbrc	r24, 7
   241a6:	91 60       	ori	r25, 0x01	; 1
   241a8:	00 96       	adiw	r24, 0x00	; 0
   241aa:	61 05       	cpc	r22, r1
   241ac:	71 05       	cpc	r23, r1
   241ae:	39 f4       	brne	.+14     	; 0x241be <__ftoa_engine+0x28>
   241b0:	32 60       	ori	r19, 0x02	; 2
   241b2:	2e 5f       	subi	r18, 0xFE	; 254
   241b4:	3d 93       	st	X+, r19
   241b6:	30 e3       	ldi	r19, 0x30	; 48
   241b8:	2a 95       	dec	r18
   241ba:	e1 f7       	brne	.-8      	; 0x241b4 <__ftoa_engine+0x1e>
   241bc:	08 95       	ret
   241be:	9f 3f       	cpi	r25, 0xFF	; 255
   241c0:	30 f0       	brcs	.+12     	; 0x241ce <__ftoa_engine+0x38>
   241c2:	80 38       	cpi	r24, 0x80	; 128
   241c4:	71 05       	cpc	r23, r1
   241c6:	61 05       	cpc	r22, r1
   241c8:	09 f0       	breq	.+2      	; 0x241cc <__ftoa_engine+0x36>
   241ca:	3c 5f       	subi	r19, 0xFC	; 252
   241cc:	3c 5f       	subi	r19, 0xFC	; 252
   241ce:	3d 93       	st	X+, r19
   241d0:	91 30       	cpi	r25, 0x01	; 1
   241d2:	08 f0       	brcs	.+2      	; 0x241d6 <__ftoa_engine+0x40>
   241d4:	80 68       	ori	r24, 0x80	; 128
   241d6:	91 1d       	adc	r25, r1
   241d8:	df 93       	push	r29
   241da:	cf 93       	push	r28
   241dc:	1f 93       	push	r17
   241de:	0f 93       	push	r16
   241e0:	ff 92       	push	r15
   241e2:	ef 92       	push	r14
   241e4:	19 2f       	mov	r17, r25
   241e6:	98 7f       	andi	r25, 0xF8	; 248
   241e8:	96 95       	lsr	r25
   241ea:	e9 2f       	mov	r30, r25
   241ec:	96 95       	lsr	r25
   241ee:	96 95       	lsr	r25
   241f0:	e9 0f       	add	r30, r25
   241f2:	ff 27       	eor	r31, r31
   241f4:	eb 53       	subi	r30, 0x3B	; 59
   241f6:	fa 4f       	sbci	r31, 0xFA	; 250
   241f8:	99 27       	eor	r25, r25
   241fa:	33 27       	eor	r19, r19
   241fc:	ee 24       	eor	r14, r14
   241fe:	ff 24       	eor	r15, r15
   24200:	a7 01       	movw	r20, r14
   24202:	e7 01       	movw	r28, r14
   24204:	05 90       	lpm	r0, Z+
   24206:	08 94       	sec
   24208:	07 94       	ror	r0
   2420a:	28 f4       	brcc	.+10     	; 0x24216 <__ftoa_engine+0x80>
   2420c:	36 0f       	add	r19, r22
   2420e:	e7 1e       	adc	r14, r23
   24210:	f8 1e       	adc	r15, r24
   24212:	49 1f       	adc	r20, r25
   24214:	51 1d       	adc	r21, r1
   24216:	66 0f       	add	r22, r22
   24218:	77 1f       	adc	r23, r23
   2421a:	88 1f       	adc	r24, r24
   2421c:	99 1f       	adc	r25, r25
   2421e:	06 94       	lsr	r0
   24220:	a1 f7       	brne	.-24     	; 0x2420a <__ftoa_engine+0x74>
   24222:	05 90       	lpm	r0, Z+
   24224:	07 94       	ror	r0
   24226:	28 f4       	brcc	.+10     	; 0x24232 <__ftoa_engine+0x9c>
   24228:	e7 0e       	add	r14, r23
   2422a:	f8 1e       	adc	r15, r24
   2422c:	49 1f       	adc	r20, r25
   2422e:	56 1f       	adc	r21, r22
   24230:	c1 1d       	adc	r28, r1
   24232:	77 0f       	add	r23, r23
   24234:	88 1f       	adc	r24, r24
   24236:	99 1f       	adc	r25, r25
   24238:	66 1f       	adc	r22, r22
   2423a:	06 94       	lsr	r0
   2423c:	a1 f7       	brne	.-24     	; 0x24226 <__ftoa_engine+0x90>
   2423e:	05 90       	lpm	r0, Z+
   24240:	07 94       	ror	r0
   24242:	28 f4       	brcc	.+10     	; 0x2424e <__ftoa_engine+0xb8>
   24244:	f8 0e       	add	r15, r24
   24246:	49 1f       	adc	r20, r25
   24248:	56 1f       	adc	r21, r22
   2424a:	c7 1f       	adc	r28, r23
   2424c:	d1 1d       	adc	r29, r1
   2424e:	88 0f       	add	r24, r24
   24250:	99 1f       	adc	r25, r25
   24252:	66 1f       	adc	r22, r22
   24254:	77 1f       	adc	r23, r23
   24256:	06 94       	lsr	r0
   24258:	a1 f7       	brne	.-24     	; 0x24242 <__ftoa_engine+0xac>
   2425a:	05 90       	lpm	r0, Z+
   2425c:	07 94       	ror	r0
   2425e:	20 f4       	brcc	.+8      	; 0x24268 <__ftoa_engine+0xd2>
   24260:	49 0f       	add	r20, r25
   24262:	56 1f       	adc	r21, r22
   24264:	c7 1f       	adc	r28, r23
   24266:	d8 1f       	adc	r29, r24
   24268:	99 0f       	add	r25, r25
   2426a:	66 1f       	adc	r22, r22
   2426c:	77 1f       	adc	r23, r23
   2426e:	88 1f       	adc	r24, r24
   24270:	06 94       	lsr	r0
   24272:	a9 f7       	brne	.-22     	; 0x2425e <__ftoa_engine+0xc8>
   24274:	84 91       	lpm	r24, Z
   24276:	10 95       	com	r17
   24278:	17 70       	andi	r17, 0x07	; 7
   2427a:	41 f0       	breq	.+16     	; 0x2428c <__ftoa_engine+0xf6>
   2427c:	d6 95       	lsr	r29
   2427e:	c7 95       	ror	r28
   24280:	57 95       	ror	r21
   24282:	47 95       	ror	r20
   24284:	f7 94       	ror	r15
   24286:	e7 94       	ror	r14
   24288:	1a 95       	dec	r17
   2428a:	c1 f7       	brne	.-16     	; 0x2427c <__ftoa_engine+0xe6>
   2428c:	eb e6       	ldi	r30, 0x6B	; 107
   2428e:	f5 e0       	ldi	r31, 0x05	; 5
   24290:	68 94       	set
   24292:	15 90       	lpm	r1, Z+
   24294:	15 91       	lpm	r17, Z+
   24296:	35 91       	lpm	r19, Z+
   24298:	65 91       	lpm	r22, Z+
   2429a:	95 91       	lpm	r25, Z+
   2429c:	05 90       	lpm	r0, Z+
   2429e:	7f e2       	ldi	r23, 0x2F	; 47
   242a0:	73 95       	inc	r23
   242a2:	e1 18       	sub	r14, r1
   242a4:	f1 0a       	sbc	r15, r17
   242a6:	43 0b       	sbc	r20, r19
   242a8:	56 0b       	sbc	r21, r22
   242aa:	c9 0b       	sbc	r28, r25
   242ac:	d0 09       	sbc	r29, r0
   242ae:	c0 f7       	brcc	.-16     	; 0x242a0 <__ftoa_engine+0x10a>
   242b0:	e1 0c       	add	r14, r1
   242b2:	f1 1e       	adc	r15, r17
   242b4:	43 1f       	adc	r20, r19
   242b6:	56 1f       	adc	r21, r22
   242b8:	c9 1f       	adc	r28, r25
   242ba:	d0 1d       	adc	r29, r0
   242bc:	7e f4       	brtc	.+30     	; 0x242dc <__ftoa_engine+0x146>
   242be:	70 33       	cpi	r23, 0x30	; 48
   242c0:	11 f4       	brne	.+4      	; 0x242c6 <__ftoa_engine+0x130>
   242c2:	8a 95       	dec	r24
   242c4:	e6 cf       	rjmp	.-52     	; 0x24292 <__ftoa_engine+0xfc>
   242c6:	e8 94       	clt
   242c8:	01 50       	subi	r16, 0x01	; 1
   242ca:	30 f0       	brcs	.+12     	; 0x242d8 <__ftoa_engine+0x142>
   242cc:	08 0f       	add	r16, r24
   242ce:	0a f4       	brpl	.+2      	; 0x242d2 <__ftoa_engine+0x13c>
   242d0:	00 27       	eor	r16, r16
   242d2:	02 17       	cp	r16, r18
   242d4:	08 f4       	brcc	.+2      	; 0x242d8 <__ftoa_engine+0x142>
   242d6:	20 2f       	mov	r18, r16
   242d8:	23 95       	inc	r18
   242da:	02 2f       	mov	r16, r18
   242dc:	7a 33       	cpi	r23, 0x3A	; 58
   242de:	28 f0       	brcs	.+10     	; 0x242ea <__ftoa_engine+0x154>
   242e0:	79 e3       	ldi	r23, 0x39	; 57
   242e2:	7d 93       	st	X+, r23
   242e4:	2a 95       	dec	r18
   242e6:	e9 f7       	brne	.-6      	; 0x242e2 <__ftoa_engine+0x14c>
   242e8:	10 c0       	rjmp	.+32     	; 0x2430a <__ftoa_engine+0x174>
   242ea:	7d 93       	st	X+, r23
   242ec:	2a 95       	dec	r18
   242ee:	89 f6       	brne	.-94     	; 0x24292 <__ftoa_engine+0xfc>
   242f0:	06 94       	lsr	r0
   242f2:	97 95       	ror	r25
   242f4:	67 95       	ror	r22
   242f6:	37 95       	ror	r19
   242f8:	17 95       	ror	r17
   242fa:	17 94       	ror	r1
   242fc:	e1 18       	sub	r14, r1
   242fe:	f1 0a       	sbc	r15, r17
   24300:	43 0b       	sbc	r20, r19
   24302:	56 0b       	sbc	r21, r22
   24304:	c9 0b       	sbc	r28, r25
   24306:	d0 09       	sbc	r29, r0
   24308:	98 f0       	brcs	.+38     	; 0x24330 <__ftoa_engine+0x19a>
   2430a:	23 95       	inc	r18
   2430c:	7e 91       	ld	r23, -X
   2430e:	73 95       	inc	r23
   24310:	7a 33       	cpi	r23, 0x3A	; 58
   24312:	08 f0       	brcs	.+2      	; 0x24316 <__ftoa_engine+0x180>
   24314:	70 e3       	ldi	r23, 0x30	; 48
   24316:	7c 93       	st	X, r23
   24318:	20 13       	cpse	r18, r16
   2431a:	b8 f7       	brcc	.-18     	; 0x2430a <__ftoa_engine+0x174>
   2431c:	7e 91       	ld	r23, -X
   2431e:	70 61       	ori	r23, 0x10	; 16
   24320:	7d 93       	st	X+, r23
   24322:	30 f0       	brcs	.+12     	; 0x24330 <__ftoa_engine+0x19a>
   24324:	83 95       	inc	r24
   24326:	71 e3       	ldi	r23, 0x31	; 49
   24328:	7d 93       	st	X+, r23
   2432a:	70 e3       	ldi	r23, 0x30	; 48
   2432c:	2a 95       	dec	r18
   2432e:	e1 f7       	brne	.-8      	; 0x24328 <__ftoa_engine+0x192>
   24330:	11 24       	eor	r1, r1
   24332:	ef 90       	pop	r14
   24334:	ff 90       	pop	r15
   24336:	0f 91       	pop	r16
   24338:	1f 91       	pop	r17
   2433a:	cf 91       	pop	r28
   2433c:	df 91       	pop	r29
   2433e:	99 27       	eor	r25, r25
   24340:	87 fd       	sbrc	r24, 7
   24342:	90 95       	com	r25
   24344:	08 95       	ret

00024346 <__ctype_isfalse>:
__ctype_isfalse():
   24346:	99 27       	eor	r25, r25
   24348:	88 27       	eor	r24, r24

0002434a <__ctype_istrue>:
__ctype_istrue():
   2434a:	08 95       	ret

0002434c <strncasecmp_P>:
strncasecmp_P():
   2434c:	fb 01       	movw	r30, r22
   2434e:	dc 01       	movw	r26, r24
   24350:	41 50       	subi	r20, 0x01	; 1
   24352:	50 40       	sbci	r21, 0x00	; 0
   24354:	88 f0       	brcs	.+34     	; 0x24378 <strncasecmp_P+0x2c>
   24356:	8d 91       	ld	r24, X+
   24358:	81 34       	cpi	r24, 0x41	; 65
   2435a:	1c f0       	brlt	.+6      	; 0x24362 <strncasecmp_P+0x16>
   2435c:	8b 35       	cpi	r24, 0x5B	; 91
   2435e:	0c f4       	brge	.+2      	; 0x24362 <strncasecmp_P+0x16>
   24360:	80 5e       	subi	r24, 0xE0	; 224
   24362:	65 91       	lpm	r22, Z+
   24364:	61 34       	cpi	r22, 0x41	; 65
   24366:	1c f0       	brlt	.+6      	; 0x2436e <strncasecmp_P+0x22>
   24368:	6b 35       	cpi	r22, 0x5B	; 91
   2436a:	0c f4       	brge	.+2      	; 0x2436e <strncasecmp_P+0x22>
   2436c:	60 5e       	subi	r22, 0xE0	; 224
   2436e:	86 1b       	sub	r24, r22
   24370:	61 11       	cpse	r22, r1
   24372:	71 f3       	breq	.-36     	; 0x24350 <strncasecmp_P+0x4>
   24374:	99 0b       	sbc	r25, r25
   24376:	08 95       	ret
   24378:	88 1b       	sub	r24, r24
   2437a:	fc cf       	rjmp	.-8      	; 0x24374 <strncasecmp_P+0x28>

0002437c <strnlen_P>:
strnlen_P():
   2437c:	fc 01       	movw	r30, r24
   2437e:	05 90       	lpm	r0, Z+
   24380:	61 50       	subi	r22, 0x01	; 1
   24382:	70 40       	sbci	r23, 0x00	; 0
   24384:	01 10       	cpse	r0, r1
   24386:	d8 f7       	brcc	.-10     	; 0x2437e <strnlen_P+0x2>
   24388:	80 95       	com	r24
   2438a:	90 95       	com	r25
   2438c:	8e 0f       	add	r24, r30
   2438e:	9f 1f       	adc	r25, r31
   24390:	08 95       	ret

00024392 <memset>:
memset():
   24392:	dc 01       	movw	r26, r24
   24394:	01 c0       	rjmp	.+2      	; 0x24398 <memset+0x6>
   24396:	6d 93       	st	X+, r22
   24398:	41 50       	subi	r20, 0x01	; 1
   2439a:	50 40       	sbci	r21, 0x00	; 0
   2439c:	e0 f7       	brcc	.-8      	; 0x24396 <memset+0x4>
   2439e:	08 95       	ret

000243a0 <strrev>:
strrev():
   243a0:	dc 01       	movw	r26, r24
   243a2:	fc 01       	movw	r30, r24
   243a4:	67 2f       	mov	r22, r23
   243a6:	71 91       	ld	r23, Z+
   243a8:	77 23       	and	r23, r23
   243aa:	e1 f7       	brne	.-8      	; 0x243a4 <strrev+0x4>
   243ac:	32 97       	sbiw	r30, 0x02	; 2
   243ae:	04 c0       	rjmp	.+8      	; 0x243b8 <strrev+0x18>
   243b0:	7c 91       	ld	r23, X
   243b2:	6d 93       	st	X+, r22
   243b4:	70 83       	st	Z, r23
   243b6:	62 91       	ld	r22, -Z
   243b8:	ae 17       	cp	r26, r30
   243ba:	bf 07       	cpc	r27, r31
   243bc:	c8 f3       	brcs	.-14     	; 0x243b0 <strrev+0x10>
   243be:	08 95       	ret

000243c0 <fputc>:
fputc():
   243c0:	0f 93       	push	r16
   243c2:	1f 93       	push	r17
   243c4:	cf 93       	push	r28
   243c6:	df 93       	push	r29
   243c8:	18 2f       	mov	r17, r24
   243ca:	09 2f       	mov	r16, r25
   243cc:	eb 01       	movw	r28, r22
   243ce:	8b 81       	ldd	r24, Y+3	; 0x03
   243d0:	81 fd       	sbrc	r24, 1
   243d2:	09 c0       	rjmp	.+18     	; 0x243e6 <fputc+0x26>
   243d4:	1f ef       	ldi	r17, 0xFF	; 255
   243d6:	0f ef       	ldi	r16, 0xFF	; 255
   243d8:	81 2f       	mov	r24, r17
   243da:	90 2f       	mov	r25, r16
   243dc:	df 91       	pop	r29
   243de:	cf 91       	pop	r28
   243e0:	1f 91       	pop	r17
   243e2:	0f 91       	pop	r16
   243e4:	08 95       	ret
   243e6:	82 ff       	sbrs	r24, 2
   243e8:	14 c0       	rjmp	.+40     	; 0x24412 <fputc+0x52>
   243ea:	2e 81       	ldd	r18, Y+6	; 0x06
   243ec:	3f 81       	ldd	r19, Y+7	; 0x07
   243ee:	8c 81       	ldd	r24, Y+4	; 0x04
   243f0:	9d 81       	ldd	r25, Y+5	; 0x05
   243f2:	28 17       	cp	r18, r24
   243f4:	39 07       	cpc	r19, r25
   243f6:	3c f4       	brge	.+14     	; 0x24406 <fputc+0x46>
   243f8:	e8 81       	ld	r30, Y
   243fa:	f9 81       	ldd	r31, Y+1	; 0x01
   243fc:	cf 01       	movw	r24, r30
   243fe:	01 96       	adiw	r24, 0x01	; 1
   24400:	99 83       	std	Y+1, r25	; 0x01
   24402:	88 83       	st	Y, r24
   24404:	10 83       	st	Z, r17
   24406:	8e 81       	ldd	r24, Y+6	; 0x06
   24408:	9f 81       	ldd	r25, Y+7	; 0x07
   2440a:	01 96       	adiw	r24, 0x01	; 1
   2440c:	9f 83       	std	Y+7, r25	; 0x07
   2440e:	8e 83       	std	Y+6, r24	; 0x06
   24410:	e3 cf       	rjmp	.-58     	; 0x243d8 <fputc+0x18>
   24412:	e8 85       	ldd	r30, Y+8	; 0x08
   24414:	f9 85       	ldd	r31, Y+9	; 0x09
   24416:	81 2f       	mov	r24, r17
   24418:	19 95       	eicall
   2441a:	89 2b       	or	r24, r25
   2441c:	a1 f3       	breq	.-24     	; 0x24406 <fputc+0x46>
   2441e:	da cf       	rjmp	.-76     	; 0x243d4 <fputc+0x14>

00024420 <__ultoa_invert>:
__ultoa_invert():
   24420:	fa 01       	movw	r30, r20
   24422:	aa 27       	eor	r26, r26
   24424:	28 30       	cpi	r18, 0x08	; 8
   24426:	51 f1       	breq	.+84     	; 0x2447c <__ultoa_invert+0x5c>
   24428:	20 31       	cpi	r18, 0x10	; 16
   2442a:	81 f1       	breq	.+96     	; 0x2448c <__ultoa_invert+0x6c>
   2442c:	e8 94       	clt
   2442e:	6f 93       	push	r22
   24430:	6e 7f       	andi	r22, 0xFE	; 254
   24432:	6e 5f       	subi	r22, 0xFE	; 254
   24434:	7f 4f       	sbci	r23, 0xFF	; 255
   24436:	8f 4f       	sbci	r24, 0xFF	; 255
   24438:	9f 4f       	sbci	r25, 0xFF	; 255
   2443a:	af 4f       	sbci	r26, 0xFF	; 255
   2443c:	b1 e0       	ldi	r27, 0x01	; 1
   2443e:	3e d0       	rcall	.+124    	; 0x244bc <__ultoa_invert+0x9c>
   24440:	b4 e0       	ldi	r27, 0x04	; 4
   24442:	3c d0       	rcall	.+120    	; 0x244bc <__ultoa_invert+0x9c>
   24444:	67 0f       	add	r22, r23
   24446:	78 1f       	adc	r23, r24
   24448:	89 1f       	adc	r24, r25
   2444a:	9a 1f       	adc	r25, r26
   2444c:	a1 1d       	adc	r26, r1
   2444e:	68 0f       	add	r22, r24
   24450:	79 1f       	adc	r23, r25
   24452:	8a 1f       	adc	r24, r26
   24454:	91 1d       	adc	r25, r1
   24456:	a1 1d       	adc	r26, r1
   24458:	6a 0f       	add	r22, r26
   2445a:	71 1d       	adc	r23, r1
   2445c:	81 1d       	adc	r24, r1
   2445e:	91 1d       	adc	r25, r1
   24460:	a1 1d       	adc	r26, r1
   24462:	20 d0       	rcall	.+64     	; 0x244a4 <__ultoa_invert+0x84>
   24464:	09 f4       	brne	.+2      	; 0x24468 <__ultoa_invert+0x48>
   24466:	68 94       	set
   24468:	3f 91       	pop	r19
   2446a:	2a e0       	ldi	r18, 0x0A	; 10
   2446c:	26 9f       	mul	r18, r22
   2446e:	11 24       	eor	r1, r1
   24470:	30 19       	sub	r19, r0
   24472:	30 5d       	subi	r19, 0xD0	; 208
   24474:	31 93       	st	Z+, r19
   24476:	de f6       	brtc	.-74     	; 0x2442e <__ultoa_invert+0xe>
   24478:	cf 01       	movw	r24, r30
   2447a:	08 95       	ret
   2447c:	46 2f       	mov	r20, r22
   2447e:	47 70       	andi	r20, 0x07	; 7
   24480:	40 5d       	subi	r20, 0xD0	; 208
   24482:	41 93       	st	Z+, r20
   24484:	b3 e0       	ldi	r27, 0x03	; 3
   24486:	0f d0       	rcall	.+30     	; 0x244a6 <__ultoa_invert+0x86>
   24488:	c9 f7       	brne	.-14     	; 0x2447c <__ultoa_invert+0x5c>
   2448a:	f6 cf       	rjmp	.-20     	; 0x24478 <__ultoa_invert+0x58>
   2448c:	46 2f       	mov	r20, r22
   2448e:	4f 70       	andi	r20, 0x0F	; 15
   24490:	40 5d       	subi	r20, 0xD0	; 208
   24492:	4a 33       	cpi	r20, 0x3A	; 58
   24494:	18 f0       	brcs	.+6      	; 0x2449c <__ultoa_invert+0x7c>
   24496:	49 5d       	subi	r20, 0xD9	; 217
   24498:	31 fd       	sbrc	r19, 1
   2449a:	40 52       	subi	r20, 0x20	; 32
   2449c:	41 93       	st	Z+, r20
   2449e:	02 d0       	rcall	.+4      	; 0x244a4 <__ultoa_invert+0x84>
   244a0:	a9 f7       	brne	.-22     	; 0x2448c <__ultoa_invert+0x6c>
   244a2:	ea cf       	rjmp	.-44     	; 0x24478 <__ultoa_invert+0x58>
   244a4:	b4 e0       	ldi	r27, 0x04	; 4
   244a6:	a6 95       	lsr	r26
   244a8:	97 95       	ror	r25
   244aa:	87 95       	ror	r24
   244ac:	77 95       	ror	r23
   244ae:	67 95       	ror	r22
   244b0:	ba 95       	dec	r27
   244b2:	c9 f7       	brne	.-14     	; 0x244a6 <__ultoa_invert+0x86>
   244b4:	00 97       	sbiw	r24, 0x00	; 0
   244b6:	61 05       	cpc	r22, r1
   244b8:	71 05       	cpc	r23, r1
   244ba:	08 95       	ret
   244bc:	9b 01       	movw	r18, r22
   244be:	ac 01       	movw	r20, r24
   244c0:	0a 2e       	mov	r0, r26
   244c2:	06 94       	lsr	r0
   244c4:	57 95       	ror	r21
   244c6:	47 95       	ror	r20
   244c8:	37 95       	ror	r19
   244ca:	27 95       	ror	r18
   244cc:	ba 95       	dec	r27
   244ce:	c9 f7       	brne	.-14     	; 0x244c2 <__ultoa_invert+0xa2>
   244d0:	62 0f       	add	r22, r18
   244d2:	73 1f       	adc	r23, r19
   244d4:	84 1f       	adc	r24, r20
   244d6:	95 1f       	adc	r25, r21
   244d8:	a0 1d       	adc	r26, r0
   244da:	08 95       	ret

000244dc <eeprom_read_byte>:
eeprom_read_byte():
   244dc:	f9 99       	sbic	0x1f, 1	; 31
   244de:	fe cf       	rjmp	.-4      	; 0x244dc <eeprom_read_byte>
   244e0:	92 bd       	out	0x22, r25	; 34
   244e2:	81 bd       	out	0x21, r24	; 33
   244e4:	f8 9a       	sbi	0x1f, 0	; 31
   244e6:	99 27       	eor	r25, r25
   244e8:	80 b5       	in	r24, 0x20	; 32
   244ea:	08 95       	ret

000244ec <eeprom_write_byte>:
eeprom_write_byte():
   244ec:	26 2f       	mov	r18, r22

000244ee <eeprom_write_r18>:
   244ee:	f9 99       	sbic	0x1f, 1	; 31
   244f0:	fe cf       	rjmp	.-4      	; 0x244ee <eeprom_write_r18>
   244f2:	1f ba       	out	0x1f, r1	; 31
   244f4:	92 bd       	out	0x22, r25	; 34
   244f6:	81 bd       	out	0x21, r24	; 33
   244f8:	20 bd       	out	0x20, r18	; 32
   244fa:	0f b6       	in	r0, 0x3f	; 63
   244fc:	f8 94       	cli
   244fe:	fa 9a       	sbi	0x1f, 2	; 31
   24500:	f9 9a       	sbi	0x1f, 1	; 31
   24502:	0f be       	out	0x3f, r0	; 63
   24504:	01 96       	adiw	r24, 0x01	; 1
   24506:	08 95       	ret

00024508 <__do_global_dtors>:
__do_global_dtors():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
   24508:	17 e4       	ldi	r17, 0x47	; 71
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
   2450a:	c9 ea       	ldi	r28, 0xA9	; 169
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
   2450c:	d7 e4       	ldi	r29, 0x47	; 71
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2500
   2450e:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
   24510:	06 c0       	rjmp	.+12     	; 0x2451e <__do_global_dtors+0x16>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2505
   24512:	80 2f       	mov	r24, r16
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
   24514:	fe 01       	movw	r30, r28
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
   24516:	0f 94 9e 16 	call	0x22d3c	; 0x22d3c <__tablejump2__>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
   2451a:	21 96       	adiw	r28, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2512
   2451c:	01 1d       	adc	r16, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
   2451e:	ca 3a       	cpi	r28, 0xAA	; 170
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
   24520:	d1 07       	cpc	r29, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2518
   24522:	80 e0       	ldi	r24, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2519
   24524:	08 07       	cpc	r16, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
   24526:	a9 f7       	brne	.-22     	; 0x24512 <__do_global_dtors+0xa>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
   24528:	f8 94       	cli

0002452a <__stop_program>:
__stop_program():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
   2452a:	ff cf       	rjmp	.-2      	; 0x2452a <__stop_program>
