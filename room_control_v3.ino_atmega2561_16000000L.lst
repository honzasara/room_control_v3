
/tmp/arduino_build_832911/room_control_v3.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 aa 1a 	jmp	0x3554	; 0x3554 <__ctors_end>
       4:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__bad_interrupt>
       8:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__bad_interrupt>
       c:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__bad_interrupt>
      10:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__bad_interrupt>
      14:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__bad_interrupt>
      18:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__bad_interrupt>
      1c:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__bad_interrupt>
      20:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__bad_interrupt>
      24:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__bad_interrupt>
      28:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__bad_interrupt>
      2c:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__bad_interrupt>
      30:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__bad_interrupt>
      34:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__bad_interrupt>
      38:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__bad_interrupt>
      3c:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__bad_interrupt>
      40:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__bad_interrupt>
      44:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__bad_interrupt>
      48:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__bad_interrupt>
      4c:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__bad_interrupt>
      50:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__bad_interrupt>
      54:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__bad_interrupt>
      58:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__bad_interrupt>
      5c:	0c 94 45 86 	jmp	0x10c8a	; 0x10c8a <__vector_23>
      60:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__bad_interrupt>
      64:	0c 94 b9 86 	jmp	0x10d72	; 0x10d72 <__vector_25>
      68:	0c 94 8f 86 	jmp	0x10d1e	; 0x10d1e <__vector_26>
      6c:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__bad_interrupt>
      70:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__bad_interrupt>
      74:	0c 94 ef 86 	jmp	0x10dde	; 0x10dde <__vector_29>
      78:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__bad_interrupt>
      7c:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__bad_interrupt>
      80:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__bad_interrupt>
      84:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__bad_interrupt>
      88:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__bad_interrupt>
      8c:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__bad_interrupt>
      90:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__bad_interrupt>
      94:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__bad_interrupt>
      98:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__bad_interrupt>
      9c:	0c 94 6d 88 	jmp	0x110da	; 0x110da <__vector_39>
      a0:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__bad_interrupt>
      a4:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__bad_interrupt>
      a8:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__bad_interrupt>
      ac:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__bad_interrupt>
      b0:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__bad_interrupt>
      b4:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__bad_interrupt>
      b8:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__bad_interrupt>
      bc:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__bad_interrupt>
      c0:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__bad_interrupt>
      c4:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__bad_interrupt>
      c8:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__bad_interrupt>

000000cc <__trampolines_start>:
__trampolines_start():
      cc:	0c 94 55 2e 	jmp	0x5caa	; 0x5caa <MenuHistoryPrevMenu()>
      d0:	0c 94 4d 82 	jmp	0x1049a	; 0x1049a <turnOffPWM.lto_priv.232+0xb0>
      d4:	0c 94 fe 22 	jmp	0x45fc	; 0x45fc <returnnullfceargs(unsigned int, unsigned int)>
      d8:	0c 94 94 79 	jmp	0xf328	; 0xf328 <EthernetClient::operator==(EthernetClient const&)>
      dc:	0c 94 9f 79 	jmp	0xf33e	; 0xf33e <EthernetClient::operator bool()>
      e0:	0c 94 4d 22 	jmp	0x449a	; 0x449a <get_function_budik_enabled(unsigned char)>
      e4:	0c 94 01 1b 	jmp	0x3602	; 0x3602 <EthernetUDP::read(char*, unsigned int)>
      e8:	0c 94 a1 52 	jmp	0xa542	; 0xa542 <menu_tds_save_period(unsigned char, unsigned char)>
      ec:	0c 94 be 21 	jmp	0x437c	; 0x437c <function_vertical_slider_dec(unsigned char, unsigned char)>
      f0:	0c 94 18 4e 	jmp	0x9c30	; 0x9c30 <click_function_default_temp(unsigned char, unsigned char)>
      f4:	0c 94 f4 51 	jmp	0xa3e8	; 0xa3e8 <display_menu_tds_set_period(unsigned char, unsigned char)>
      f8:	0c 94 a8 53 	jmp	0xa750	; 0xa750 <get_function_thermostat_default_ring_has_mode(unsigned char)>
      fc:	0c 94 3b 58 	jmp	0xb076	; 0xb076 <mqtt_callback(char*, unsigned char*, unsigned int)>
     100:	0c 94 ca 55 	jmp	0xab94	; 0xab94 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     104:	0c 94 14 92 	jmp	0x12428	; 0x12428 <EthernetUDP::read(unsigned char*, unsigned int)>
     108:	0c 94 8a 28 	jmp	0x5114	; 0x5114 <click_keyboard_alfa(unsigned char, unsigned char)>
     10c:	0c 94 68 2e 	jmp	0x5cd0	; 0x5cd0 <click_dialog_button_yes(unsigned char, unsigned char)>
     110:	0c 94 d0 23 	jmp	0x47a0	; 0x47a0 <get_function_budik_text_state(unsigned char, unsigned char, char*)>
     114:	0c 94 39 82 	jmp	0x10472	; 0x10472 <turnOffPWM.lto_priv.232+0x88>
     118:	0c 94 0c 1b 	jmp	0x3618	; 0x3618 <LCDWIKI_KBV::Get_Width() const>
     11c:	0c 94 43 82 	jmp	0x10486	; 0x10486 <turnOffPWM.lto_priv.232+0x9c>
     120:	0c 94 81 77 	jmp	0xef02	; 0xef02 <HardwareSerial::read()>
     124:	0c 94 f4 1a 	jmp	0x35e8	; 0x35e8 <EthernetClient::operator!=(EthernetClient const&)>
     128:	0c 94 a3 28 	jmp	0x5146	; 0x5146 <click_keyboard_number(unsigned char, unsigned char)>
     12c:	0c 94 18 79 	jmp	0xf230	; 0xf230 <TwoWire::write(unsigned char)>
     130:	0c 94 51 82 	jmp	0x104a2	; 0x104a2 <turnOffPWM.lto_priv.232+0xb8>
     134:	0c 94 47 22 	jmp	0x448e	; 0x448e <get_function_default_temp_max_items(unsigned char, unsigned char)>
     138:	0c 94 10 1b 	jmp	0x3620	; 0x3620 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
     13c:	0c 94 2f 2d 	jmp	0x5a5e	; 0x5a5e <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     140:	0c 94 32 2e 	jmp	0x5c64	; 0x5c64 <click_tds_associate_or_setting_onewire(unsigned char, unsigned char)>
     144:	0c 94 c9 52 	jmp	0xa592	; 0xa592 <menu_tds_save_offset(unsigned char, unsigned char)>
     148:	0c 94 e1 4e 	jmp	0x9dc2	; 0x9dc2 <tds_associate(unsigned char)>
     14c:	0c 94 a3 77 	jmp	0xef46	; 0xef46 <HardwareSerial::available()>
     150:	0c 94 f0 2e 	jmp	0x5de0	; 0x5de0 <EthernetClient::connect(IPAddress, unsigned int)>
     154:	0c 94 01 22 	jmp	0x4402	; 0x4402 <menu_redraw_update_temp(unsigned char, unsigned char)>
     158:	0c 94 7d 4c 	jmp	0x98fa	; 0x98fa <click_thermostat_default_ring_set_mode(unsigned char)>
     15c:	0c 94 43 77 	jmp	0xee86	; 0xee86 <TwoWire::read()>
     160:	0c 94 95 1e 	jmp	0x3d2a	; 0x3d2a <LCDWIKI_KBV::Color_To_565(unsigned char, unsigned char, unsigned char)>
     164:	0c 94 01 23 	jmp	0x4602	; 0x4602 <ArduinoJson::Internals::StaticMemoryPoolBase::alloc(unsigned int)>
     168:	0c 94 0f 32 	jmp	0x641e	; 0x641e <EthernetClient::connect(char const*, unsigned int)>
     16c:	0c 94 bb 51 	jmp	0xa376	; 0xa376 <display_menu_tds_set_name(unsigned char, unsigned char)>
     170:	0c 94 dd 1a 	jmp	0x35ba	; 0x35ba <EthernetClient::flush()>
     174:	0c 94 b6 23 	jmp	0x476c	; 0x476c <EthernetClient::available()>
     178:	0c 94 5f 2e 	jmp	0x5cbe	; 0x5cbe <dialog_set_variable_button_click(unsigned char, unsigned char)>
     17c:	0c 94 38 93 	jmp	0x12670	; 0x12670 <EthernetUDP::stop()>
     180:	0c 94 29 95 	jmp	0x12a52	; 0x12a52 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7003>
     184:	0c 94 fe 1a 	jmp	0x35fc	; 0x35fc <Print::availableForWrite()>
     188:	0c 94 2b 82 	jmp	0x10456	; 0x10456 <turnOffPWM.lto_priv.232+0x6c>
     18c:	0c 94 58 7b 	jmp	0xf6b0	; 0xf6b0 <IPAddress::printTo(Print&) const>
     190:	0c 94 31 82 	jmp	0x10462	; 0x10462 <turnOffPWM.lto_priv.232+0x78>
     194:	0c 94 c3 1c 	jmp	0x3986	; 0x3986 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)>
     198:	0c 94 72 77 	jmp	0xeee4	; 0xeee4 <HardwareSerial::availableForWrite()>
     19c:	0c 94 64 79 	jmp	0xf2c8	; 0xf2c8 <EthernetUDP::write(unsigned char)>
     1a0:	0c 94 2f 91 	jmp	0x1225e	; 0x1225e <EthernetUDP::write(unsigned char const*, unsigned int)>
     1a4:	0c 94 6e 21 	jmp	0x42dc	; 0x42dc <get_function_rtds_last_index_for_menu(unsigned char, unsigned char)>
     1a8:	0c 94 35 82 	jmp	0x1046a	; 0x1046a <turnOffPWM.lto_priv.232+0x80>
     1ac:	0c 94 7e 79 	jmp	0xf2fc	; 0xf2fc <EthernetUDP::remotePort()>
     1b0:	0c 94 0c 22 	jmp	0x4418	; 0x4418 <menu_redraw_time05s(unsigned char, unsigned char)>
     1b4:	0c 94 50 28 	jmp	0x50a0	; 0x50a0 <display_element_dialog_show_text(unsigned int, unsigned int, unsigned int, unsigned int)>
     1b8:	0c 94 72 23 	jmp	0x46e4	; 0x46e4 <EthernetClient::peek()>
     1bc:	0c 94 08 1b 	jmp	0x3610	; 0x3610 <LCDWIKI_KBV::Get_Height() const>
     1c0:	0c 94 3c 50 	jmp	0xa078	; 0xa078 <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     1c4:	0c 94 65 28 	jmp	0x50ca	; 0x50ca <display_element_set_string_del_char(unsigned char, unsigned char)>
     1c8:	0c 94 02 54 	jmp	0xa804	; 0xa804 <click_rtds_add_sensor(unsigned char, unsigned char)>
     1cc:	0c 94 17 78 	jmp	0xf02e	; 0xf02e <HardwareSerial::flush()>
     1d0:	0c 94 38 58 	jmp	0xb070	; 0xb070 <click_rtds_subscribe(unsigned char, unsigned char)>
     1d4:	0c 94 47 82 	jmp	0x1048e	; 0x1048e <turnOffPWM.lto_priv.232+0xa4>
     1d8:	0c 94 9d 57 	jmp	0xaf3a	; 0xaf3a <menu_rtds_update_name(unsigned char, unsigned char)>
     1dc:	0c 94 13 82 	jmp	0x10426	; 0x10426 <turnOffPWM.lto_priv.232+0x3c>
     1e0:	0c 94 1f 2e 	jmp	0x5c3e	; 0x5c3e <MenuHistoryNextMenu(unsigned char, unsigned char)>
     1e4:	0c 94 3b 22 	jmp	0x4476	; 0x4476 <get_function_keyboard_number_char(unsigned char, unsigned char, char*, char*)>
     1e8:	0c 94 fe 33 	jmp	0x67fc	; 0x67fc <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)>
     1ec:	0c 94 91 2c 	jmp	0x5922	; 0x5922 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     1f0:	0c 94 6e 52 	jmp	0xa4dc	; 0xa4dc <menu_tds_save_name(unsigned char, unsigned char)>
     1f4:	0c 94 dc 78 	jmp	0xf1b8	; 0xf1b8 <TwoWire::peek()>
     1f8:	0c 94 7d 78 	jmp	0xf0fa	; 0xf0fa <Print::write(unsigned char const*, unsigned int)>
     1fc:	0c 94 71 53 	jmp	0xa6e2	; 0xa6e2 <printf_via_mqtt(char, __file*)>
     200:	0c 94 45 93 	jmp	0x1268a	; 0x1268a <EthernetUDP::endPacket()>
     204:	0c 94 b0 4f 	jmp	0x9f60	; 0x9f60 <click_tds_deassociate_onewire(unsigned char, unsigned char)>
     208:	0c 94 4c 76 	jmp	0xec98	; 0xec98 <get_function_default_temp(unsigned char, unsigned char, char*, char*)>
     20c:	0c 94 92 79 	jmp	0xf324	; 0xf324 <UDP::beginMulticast(IPAddress, unsigned int)>
     210:	0c 94 cc 76 	jmp	0xed98	; 0xed98 <display_menu_rtds_update_name(unsigned char, unsigned char)>
     214:	0c 94 d4 7b 	jmp	0xf7a8	; 0xf7a8 <EthernetUDP::beginPacket(char const*, unsigned int)>
     218:	0c 94 38 23 	jmp	0x4670	; 0x4670 <EthernetClient::stop()>
     21c:	0c 94 15 22 	jmp	0x442a	; 0x442a <click_keyboard_type(unsigned char, unsigned char)>
     220:	0c 94 15 23 	jmp	0x462a	; 0x462a <EthernetClient::connected()>
     224:	0c 94 ae 92 	jmp	0x1255c	; 0x1255c <EthernetUDP::peek()>
     228:	0c 94 db 21 	jmp	0x43b6	; 0x43b6 <a2d_complete(unsigned char, unsigned int)>
     22c:	0c 94 08 58 	jmp	0xb010	; 0xb010 <menu_rtds_create_name(unsigned char, unsigned char)>
     230:	0c 94 6e 93 	jmp	0x126dc	; 0x126dc <EthernetUDP::beginPacket(IPAddress, unsigned int)>
     234:	0c 94 00 23 	jmp	0x4600	; 0x4600 <nullfce()>
     238:	0c 94 51 51 	jmp	0xa2a2	; 0xa2a2 <display_element_show_tds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     23c:	0c 94 71 77 	jmp	0xeee2	; 0xeee2 <TwoWire::onReceiveService(unsigned char*, int)>
     240:	0c 94 8b 2b 	jmp	0x5716	; 0x5716 <display_element_vertical_slider(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     244:	0c 94 1f 22 	jmp	0x443e	; 0x443e <get_function_keyboard_alfa_char(unsigned char, unsigned char, char*, char*)>
     248:	0c 94 db 78 	jmp	0xf1b6	; 0xf1b6 <TwoWire::flush()>
     24c:	0c 94 0b 2c 	jmp	0x5816	; 0x5816 <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     250:	0c 94 bb 4f 	jmp	0x9f76	; 0x9f76 <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, char*, char*)>
     254:	0c 94 eb 78 	jmp	0xf1d6	; 0xf1d6 <TwoWire::write(unsigned char const*, unsigned int)>
     258:	0c 94 d0 77 	jmp	0xefa0	; 0xefa0 <HardwareSerial::write(unsigned char)>
     25c:	0c 94 64 22 	jmp	0x44c8	; 0x44c8 <display_element_dialog_set_variable_minus()>
     260:	0c 94 b7 29 	jmp	0x536e	; 0x536e <display_element_rectangle(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     264:	0c 94 95 77 	jmp	0xef2a	; 0xef2a <HardwareSerial::peek()>
     268:	0c 94 13 4e 	jmp	0x9c26	; 0x9c26 <click_rtds_deassociate_onewire(unsigned char, unsigned char)>
     26c:	0c 94 cf 53 	jmp	0xa79e	; 0xa79e <click_rtds_setting_sensor(unsigned char, unsigned char)>
     270:	0c 94 33 92 	jmp	0x12466	; 0x12466 <EthernetUDP::read()>
     274:	0c 94 03 22 	jmp	0x4406	; 0x4406 <menu_redraw_change_term_mode(unsigned char, unsigned char)>
     278:	0c 94 1d 82 	jmp	0x1043a	; 0x1043a <turnOffPWM.lto_priv.232+0x50>
     27c:	0c 94 ca 21 	jmp	0x4394	; 0x4394 <function_vertical_slider_inc(unsigned char, unsigned char)>
     280:	0c 94 52 79 	jmp	0xf2a4	; 0xf2a4 <EthernetUDP::flush()>
     284:	0c 94 74 2e 	jmp	0x5ce8	; 0x5ce8 <serial_putc(char, __file*)>
     288:	0c 94 98 23 	jmp	0x4730	; 0x4730 <EthernetClient::read(unsigned char*, unsigned int)>
     28c:	0c 94 89 2e 	jmp	0x5d12	; 0x5d12 <EthernetClient::write(unsigned char const*, unsigned int)>
     290:	0c 94 27 82 	jmp	0x1044e	; 0x1044e <turnOffPWM.lto_priv.232+0x64>
     294:	0c 94 19 82 	jmp	0x10432	; 0x10432 <turnOffPWM.lto_priv.232+0x48>
     298:	0c 94 58 82 	jmp	0x104b0	; 0x104b0 <turnOffPWM.lto_priv.232+0xc6>
     29c:	0c 94 a7 1e 	jmp	0x3d4e	; 0x3d4e <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)>
     2a0:	0c 94 70 77 	jmp	0xeee0	; 0xeee0 <TwoWire::onRequestService()>
     2a4:	0c 94 55 82 	jmp	0x104aa	; 0x104aa <turnOffPWM.lto_priv.232+0xc0>
     2a8:	0c 94 69 77 	jmp	0xeed2	; 0xeed2 <TwoWire::available()>
     2ac:	0c 94 18 22 	jmp	0x4430	; 0x4430 <get_function_keyboard_alfa_max_keys(unsigned char)>
     2b0:	0c 94 0a 93 	jmp	0x12614	; 0x12614 <EthernetUDP::begin(unsigned int)>
     2b4:	0c 94 31 29 	jmp	0x5262	; 0x5262 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     2b8:	0c 94 4f 22 	jmp	0x449e	; 0x449e <display_element_dialog_set_variable_plus()>
     2bc:	0c 94 82 79 	jmp	0xf304	; 0xf304 <EthernetUDP::remoteIP()>
     2c0:	0c 94 74 54 	jmp	0xa8e8	; 0xa8e8 <get_function_rtds_text_button(unsigned char, unsigned char, char*, char*)>
     2c4:	0c 94 9c 23 	jmp	0x4738	; 0x4738 <EthernetClient::read()>
     2c8:	0c 94 3f 82 	jmp	0x1047e	; 0x1047e <turnOffPWM.lto_priv.232+0x94>
     2cc:	0c 94 5d 92 	jmp	0x124ba	; 0x124ba <EthernetUDP::parsePacket()>
     2d0:	0c 94 45 22 	jmp	0x448a	; 0x448a <get_function_keyboard_number_max_keys(unsigned char)>
     2d4:	0c 94 4f 1d 	jmp	0x3a9e	; 0x3a9e <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)>
     2d8:	0c 94 b4 54 	jmp	0xa968	; 0xa968 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     2dc:	0c 94 21 82 	jmp	0x10442	; 0x10442 <turnOffPWM.lto_priv.232+0x58>
     2e0:	0c 94 7a 79 	jmp	0xf2f4	; 0xf2f4 <EthernetUDP::available()>
     2e4:	0c 94 59 82 	jmp	0x104b2	; 0x104b2 <turnOffPWM.lto_priv.232+0xc8>
     2e8:	0c 94 de 1a 	jmp	0x35bc	; 0x35bc <EthernetClient::write(unsigned char)>
     2ec:	0c 94 61 21 	jmp	0x42c2	; 0x42c2 <get_function_one_wire_last_index_for_menu(unsigned char)>
     2f0:	0c 94 31 52 	jmp	0xa462	; 0xa462 <display_menu_tds_set_offset(unsigned char, unsigned char)>

000002f4 <__trampolines_end>:
__trampolines_end():
     2f4:	4e 41       	sbci	r20, 0x1E	; 30
     2f6:	4e 49       	Address 0x00000000000002f6 is out of bounds.
.word	0xffff	; ????

000002f7 <pstr_inity>:
     2f7:	49 4e 49 54 59                                      INITY

000002fc <pstr_inf>:
     2fc:	49 4e 46                                            INF

000002ff <pwr_m10>:
     2ff:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     30f:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000317 <pwr_p10>:
     317:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     327:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     337:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     347:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     357:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     367:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     377:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     387:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     397:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     3a7:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     3b7:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     3c7:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     3d7:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     3e7:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     3f7:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     407:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     417:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     427:	3d 27                                               ='

00000429 <nastaveni_rtds_subscribe>:
     429:	4d 51 54 54 20 70 72 69 68 6c 61 73 65 6e 69 00     MQTT prihlaseni.

00000439 <text_rtds_novy>:
     439:	50 72 69 64 61 74 20 6e 6f 76 65 20 76 7a 64 61     Pridat nove vzda
     449:	6c 65 6e 65 20 63 69 64 6c 6f 00                    lene cidlo.

00000454 <text_no>:
     454:	4e 65 00                                            Ne.

00000457 <text_yes>:
     457:	41 6e 6f 00                                         Ano.

0000045b <text_special_case>:
     45b:	40 00                                               @.

0000045d <text_lower_case>:
     45d:	61 00                                               a.

0000045f <text_upper_case>:
     45f:	41 00                                               A.

00000461 <text_delete_char>:
     461:	53 6d 61 7a 20 7a 6e 61 6b 00                       Smaz znak.

0000046b <text_klavesnice>:
     46b:	4b 6c 61 76 65 73 6e 69 63 65 00                    Klavesnice.

00000476 <text_zrusit>:
     476:	5a 72 75 73 69 74 00                                Zrusit.

0000047d <text_ulozit>:
     47d:	55 6c 6f 7a 69 74 00                                Ulozit.

00000484 <text_upozorneni>:
     484:	55 70 6f 7a 6f 72 6e 65 6e 69 00                    Upozorneni.

0000048f <nastaveni_tds_offset>:
     48f:	4e 61 73 74 61 76 69 74 20 6f 66 66 73 65 74 00     Nastavit offset.

0000049f <nastaveni_name_sensor>:
     49f:	4e 61 73 74 61 76 69 74 20 6e 61 7a 65 76 00        Nastavit nazev.

000004ae <nastaveni_delete_sensor>:
     4ae:	56 79 6d 61 7a 61 74 20 63 69 64 6c 6f 00           Vymazat cidlo.

000004bc <text_tds_sensors>:
     4bc:	56 6c 61 73 74 6e 6f 73 74 69 20 6c 6f 6b 61 6c     Vlastnosti lokal
     4cc:	6e 69 68 6f 20 63 69 64 6c 61 00                    niho cidla.

000004d7 <budik_text>:
     4d7:	42 75 64 69 6b 00                                   Budik.

000004dd <text_select_default_temp>:
     4dd:	56 79 62 65 72 20 7a 6f 62 72 61 7a 65 6e 69 20     Vyber zobrazeni 
     4ed:	74 65 70 6c 6f 6d 65 72 75 00                       teplomeru.

000004f7 <button_zpet>:
     4f7:	5a 70 65 74 00                                      Zpet.

000004fc <nastaveni_default>:
     4fc:	52 65 73 65 74 20 6e 61 73 74 61 76 65 6e 69 00     Reset nastaveni.

0000050c <nastaveni_nrf>:
     50c:	4e 52 46 20 70 72 69 70 6f 6a 65 6e 69 00           NRF pripojeni.

0000051a <nastaveni_site>:
     51a:	4e 61 73 74 61 76 65 6e 69 20 73 69 74 65 00        Nastaveni site.

00000529 <button_term_man>:
     529:	4d 41 4e 00                                         MAN.

0000052d <button_term_prog>:
     52d:	50 52 4f 47 00                                      PROG.

00000532 <button_term_min>:
     532:	4d 49 4e 00                                         MIN.

00000536 <button_term_max>:
     536:	4d 41 58 00                                         MAX.

0000053a <button_term_off>:
     53a:	4f 46 46 00                                         OFF.

0000053e <nastaveni_text>:
     53e:	4e 61 73 74 61 76 65 6e 69 00                       Nastaveni.

00000548 <funkce_text>:
     548:	46 75 6e 6b 63 65 00                                Funkce.

0000054f <regulator_text>:
     54f:	52 65 67 75 6c 61 74 6f 72 00                       Regulator.

00000559 <Menu_All>:
     559:	06 06 01 5a 2e 4f 05 22 01 96 00 aa 00 28 00 02     ...Z.O.".....(..
     569:	05 1f 2e 08 48 05 22 01 5a 00 aa 00 28 00 02 01     ....H.".Z...(...
     579:	1f 2e 08 3e 05 22 01 1e 00 aa 00 28 00 02 02 1f     ...>.".....(....
     589:	2e 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     5f1:	00 00 00 3a 05 0a 00 dc 00 52 00 3c 00 03 9a d6     ...:.....R.<....
     601:	ff ff 00 7d 4c a8 53 0a 36 05 64 00 dc 00 52 00     ...}L.S.6.d...R.
     611:	3c 00 03 00 f8 ff ff 01 7d 4c a8 53 0a 32 05 be     <.......}L.S.2..
     621:	00 dc 00 52 00 3c 00 03 1f 00 ff ff 07 7d 4c a8     ...R.<.......}L.
     631:	53 0a 2d 05 18 01 dc 00 52 00 3c 00 03 e0 ff ff     S.-.....R.<.....
     641:	ff 02 7d 4c a8 53 0a 29 05 72 01 dc 00 52 00 3c     ..}L.S.).r...R.<
     651:	00 03 e0 07 ff ff 08 7d 4c a8 53 0a 0a 00 82 00     .......}L.S.....
     661:	00 ca 55 00 00 00 00 0c 00 00 18 01 22 01 00 2f     ..U........."../
     671:	2d 00 00 00 00 0c 00 00 0a 00 1e 00 00 31 29 00     -............1).
     681:	00 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     75d:	03 05 03 00 00 00 00 00 00 00 00 00 00 e0 01 40     ...............@
     76d:	01 01 ff ff 08 0c 22 03 22 01 22 3e 05 1a 05 0a     ......".".">....
     77d:	00 28 00 be 00 28 00 02 00 00 23 08 0c 05 0a 00     .(...(....#.....
     78d:	64 00 be 00 28 00 02 00 00 23 08 fc 04 0a 00 a0     d...(....#......
     79d:	00 be 00 28 00 02 00 00 23 08 f7 04 0a 00 dc 00     ...(....#.......
     7ad:	be 00 28 00 02 00 55 2e 08 54 2b 18 01 64 00 be     ..(...U..T+..d..
     7bd:	00 28 00 02 06 1f 2e 08 63 2b 18 01 28 00 be 00     .(......c+..(...
     7cd:	28 00 02 03 1f 2e 08 dd 04 18 01 a0 00 be 00 28     (..............(
     7dd:	00 01 08 1f 2e 08 00 00 00 00 00 00 00 00 00 00     ................
	...
     879:	18 01 22 01 00 2f 2d 00 00 00 00 0c 00 00 00 00     .."../-.........
	...
     979:	07 00 01 00 00 00 00 00 02 00 00 00 00 e0 01 40     ...............@
     989:	01 01 ff ff 08 fe 22 fe 22 fe 22 48 05 f7 04 0a     ......"."."H....
     999:	00 dc 00 be 00 28 00 02 00 55 2e 08 00 00 00 00     .....(...U......
	...
     a95:	18 01 22 01 00 2f 2d 00 00 00 00 0c 00 00 00 00     .."../-.........
	...
     abd:	00 00 d7 04 0a 00 28 00 be 00 78 00 02 00 00 00     ......(...x.....
     acd:	00 01 00 23 4d 22 d0 23 08 00 00 00 00 00 00 00     ...#M".#........
	...
     b95:	01 00 01 01 00 00 00 00 01 00 00 00 00 e0 01 40     ...............@
     ba5:	01 01 ff ff 08 fe 22 fe 22 fe 22 63 2b f7 04 0a     ......"."."c+...
     bb5:	00 dc 00 be 00 28 00 02 00 55 2e 08 00 00 00 00     .....(...U......
	...
     cb1:	18 01 22 01 00 2f 2d 00 00 00 00 0c 00 00 9a 01     .."../-.........
     cc1:	48 00 00 8b 2b 28 00 7e 00 08 00 00 dc 00 14 00     H...+(.~........
     cd1:	00 b7 29 f0 00 f0 00 08 00 00 00 00 00 00 00 00     ..).............
	...
     d1d:	00 00 00 e6 00 23 00 aa 00 37 00 01 3c 3c 00 03     .....#...7..<<..
     d2d:	00 01 bb 4f 32 2e 61 21 08 2b 9a 01 1e 00 28 00     ...O2.a!.+....(.
     d3d:	28 00 02 00 be 21 08 2d 9a 01 c8 00 28 00 28 00     (....!.-....(.(.
     d4d:	02 00 ca 21 08 00 00 00 00 00 00 00 00 00 00 00     ...!............
	...
     db1:	01 00 03 00 01 02 00 00 03 00 00 00 00 e0 01 40     ...............@
     dc1:	01 01 ff ff 08 fe 22 fe 22 fe 22 bc 04 f7 04 0a     ......".".".....
     dd1:	00 dc 00 be 00 28 00 02 00 55 2e 08 ae 04 18 01     .....(...U......
     de1:	be 00 be 00 28 00 02 00 b0 4f 08 95 2e 18 01 8c     ....(....O......
     df1:	00 be 00 28 00 02 00 f4 51 08 9f 04 18 01 5a 00     ...(....Q.....Z.
     e01:	be 00 28 00 02 00 bb 51 08 8f 04 18 01 28 00 be     ..(....Q.....(..
     e11:	00 28 00 02 00 31 52 08 00 00 00 00 00 00 00 00     .(...1R.........
	...
     ecd:	18 01 22 01 00 2f 2d 00 00 00 00 0c 00 00 14 00     .."../-.........
     edd:	14 00 00 3c 50 00 00 00 00 08 00 00 14 00 14 00     ...<P...........
     eed:	00 51 51 00 00 00 00 0c 00 00 00 00 00 00 00 00     .QQ.............
	...
     fcd:	05 00 03 00 00 00 00 00 04 00 00 00 00 e0 01 40     ...............@
     fdd:	01 01 ff ff 08 fe 22 fe 22 fe 22 84 04 7d 04 0a     ......"."."..}..
     fed:	00 c8 00 82 00 28 00 02 00 5f 2e 08 76 04 96 00     .....(..._..v...
     ffd:	c8 00 82 00 28 00 02 00 55 2e 08 00 00 00 00 00     ....(...U.......
	...
    10e9:	64 00 2d 00 00 91 2c b4 00 28 00 08 00 00 00 00     d.-...,..(......
	...
    116d:	00 2b 3c 00 2d 00 28 00 28 00 02 00 4f 22 08 2d     .+<.-.(.(...O".-
    117d:	18 01 2d 00 28 00 28 00 02 00 64 22 08 00 00 00     ..-.(.(...d"....
	...
    11e9:	02 00 01 00 00 02 00 00 66 0a 00 0a 00 cc 01 04     ........f.......
    11f9:	01 06 e0 ff 00 fe 22 fe 22 fe 22 6b 04 7d 04 0a     ......"."."k.}..
    1209:	00 c8 00 82 00 28 00 02 00 5f 2e 08 76 04 96 00     .....(..._..v...
    1219:	c8 00 82 00 28 00 02 00 55 2e 08 61 04 2c 01 c8     ....(...U..a.,..
    1229:	00 82 00 28 00 02 00 65 28 08 5f 04 40 01 23 00     ...(...e(._.@.#.
    1239:	28 00 28 00 02 00 15 22 08 5d 04 6d 01 23 00 28     (.(....".].m.#.(
    1249:	00 28 00 02 01 15 22 08 5b 04 9a 01 23 00 28 00     .(....".[...#.(.
    1259:	28 00 02 02 15 22 08 00 00 00 00 00 00 00 00 00     (...."..........
	...
    1305:	0a 00 23 00 00 0b 2c 2c 01 28 00 08 00 00 00 00     ..#...,,.(......
	...
    13a5:	00 0a 00 50 00 1e 00 1e 00 02 28 28 02 0a 00 03     ...P......((....
    13b5:	1f 22 8a 28 18 22 08 00 00 00 00 00 00 00 00 00     .".(."..........
	...
    1405:	06 00 01 00 00 00 01 00 67 0a 00 0a 00 cc 01 04     ........g.......
    1415:	01 06 e0 ff 00 fe 22 fe 22 fe 22 84 04 7d 04 0a     ......"."."..}..
    1425:	00 c8 00 82 00 28 00 02 00 5f 2e 08 76 04 96 00     .....(..._..v...
    1435:	c8 00 82 00 28 00 02 00 55 2e 08 61 04 2c 01 c8     ....(...U..a.,..
    1445:	00 82 00 28 00 02 00 65 28 08 00 00 00 00 00 00     ...(...e(.......
	...
    1521:	0a 00 23 00 00 0b 2c 2c 01 28 00 08 00 00 00 00     ..#...,,.(......
	...
    15c1:	00 0a 00 3c 00 1e 00 1e 00 02 28 28 02 09 00 02     ...<......((....
    15d1:	3b 22 a3 28 45 22 08 00 00 00 00 00 00 00 00 00     ;".(E"..........
	...
    1621:	03 00 01 00 00 00 01 00 65 0a 00 0a 00 cc 01 04     ........e.......
    1631:	01 06 e0 ff 00 fe 22 fe 22 fe 22 84 04 57 04 1e     ......"."."..W..
    1641:	00 3c 00 64 00 28 00 02 00 68 2e 08 54 04 fa 00     .<.d.(...h..T...
    1651:	3c 00 64 00 28 00 02 00 55 2e 08 00 00 00 00 00     <.d.(...U.......
	...
    173d:	14 00 23 00 00 50 28 00 00 00 00 08 00 00 00 00     ..#..P(.........
	...
    183d:	02 00 01 00 00 00 00 00 64 32 00 32 00 7c 01 8c     ........d2.2.|..
    184d:	00 06 e0 ff 00 fe 22 fe 22 fe 22 4f 05 f7 04 0a     ......"."."O....
    185d:	00 dc 00 be 00 28 00 02 00 55 2e 08 00 00 00 00     .....(...U......
	...
    1959:	18 01 22 01 00 2f 2d 00 00 00 00 0c 00 00 00 00     .."../-.........
	...
    1a59:	01 00 01 00 00 00 00 00 05 00 00 00 00 e0 01 40     ...............@
    1a69:	01 01 ff ff 08 fe 22 fe 22 fe 22 54 2b f7 04 0a     ......"."."T+...
    1a79:	00 dc 00 be 00 28 00 02 00 55 2e 08 39 04 0a 00     .....(...U..9...
    1a89:	28 00 be 00 28 00 01 00 02 54 08 00 00 00 00 00     (...(....T......
	...
    1b75:	dc 00 14 00 00 b7 29 f0 00 f0 00 08 00 00 18 01     ......).........
    1b85:	22 01 00 2f 2d 00 00 00 00 0c 00 00 9a 01 48 00     "../-.........H.
    1b95:	01 8b 2b 28 00 7e 00 08 00 00 00 00 00 00 00 00     ..+(.~..........
	...
    1be1:	00 00 00 e6 00 23 00 aa 00 37 00 01 3c 3c 00 03     .....#...7..<<..
    1bf1:	01 04 74 54 cf 53 6e 21 08 2b 9a 01 1e 00 28 00     ..tT.Sn!.+....(.
    1c01:	28 00 02 01 be 21 08 2d 9a 01 c8 00 28 00 28 00     (....!.-....(.(.
    1c11:	02 01 ca 21 08 00 00 00 00 00 00 00 00 00 00 00     ...!............
	...
    1c75:	02 00 03 00 01 02 00 00 06 00 00 00 00 e0 01 40     ...............@
    1c85:	01 01 ff ff 08 fe 22 fe 22 fe 22 54 2b f7 04 0a     ......"."."T+...
    1c95:	00 dc 00 be 00 28 00 02 00 55 2e 08 ae 04 18 01     .....(...U......
    1ca5:	5a 00 be 00 28 00 02 00 13 4e 08 9f 04 18 01 28     Z...(....N.....(
    1cb5:	00 be 00 28 00 02 00 cc 76 08 29 04 18 01 8c 00     ...(....v.).....
    1cc5:	be 00 28 00 02 00 38 58 08 00 00 00 00 00 00 00     ..(...8X........
	...
    1d91:	14 00 14 00 00 b4 54 00 00 00 00 0c 00 00 00 00     ......T.........
	...
    1e91:	04 00 01 00 00 00 00 00 07 00 00 00 00 e0 01 40     ...............@
    1ea1:	01 01 ff ff 08 fe 22 fe 22 fe 22 dd 04 f7 04 0a     ......".".".....
    1eb1:	00 dc 00 be 00 28 00 02 00 55 2e 08 00 00 00 00     .....(...U......
	...
    1fad:	18 01 22 01 00 2f 2d 00 00 00 00 0c 00 00 00 00     .."../-.........
	...
    208d:	00 00 00 0a 00 28 00 82 00 3c 00 01 01 e0 07 ff     .....(...<......
    209d:	ff 8c 50 02 03 02 00 4c 76 18 4e 47 22 fe 22 08     ..P....Lv.NG".".
    20ad:	01 00 01 00 00 00 00 01 08 00 00 00 00 e0 01 40     ...............@
    20bd:	01 01 ff ff 08 fe 22 fe 22 fe 22 00 00 00 00 00     ......".".".....
	...

00002b54 <nastaveni_rtds>:
    2b54:	56 7a 64 61 6c 65 6e 65 20 63 69 64 6c 61 00        Vzdalene cidla.

00002b63 <nastaveni_onewire>:
    2b63:	4c 6f 6b 61 6c 6e 69 20 63 69 64 6c 61 00           Lokalni cidla.

00002b71 <keyboad_number_char_special>:
    2b71:	30 31 32 33 34 35 36 37 38 39 21 40 23 24 25 5e     0123456789!@#$%^
    2b81:	26 2a 7c 2b 2d 5f 3f 2c 2e 2f                       &*|+-_?,./

00002b8b <keyboad_number_char_lower>:
    2b8b:	61 62 63 64 65 66 67 68 69 6a 6b 6c 6d 6e 6f 70     abcdefghijklmnop
    2b9b:	71 72 73 74 75 76 77 78 79 7a                       qrstuvwxyz

00002ba5 <keyboad_number_char_upper>:
    2ba5:	41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f 50     ABCDEFGHIJKLMNOP
    2bb5:	51 52 53 54 55 56 57 58 59 5a                       QRSTUVWXYZ

00002bbf <network_name>:
    2bbf:	6e 65 74 77 6f 72 6b 2f 6e 61 6d 65 00              network/name.

00002bcc <network_mqtt_key>:
    2bcc:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 6b 65 79     network/mqtt_key
	...

00002bdd <network_mqtt_user>:
    2bdd:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 75 73 65     network/mqtt_use
    2bed:	72 00                                               r.

00002bef <network_mqtt_port>:
    2bef:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 70 6f 72     network/mqtt_por
    2bff:	74 00                                               t.

00002c01 <network_mqtt_host>:
    2c01:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 68 6f 73     network/mqtt_hos
    2c11:	74 00                                               t.

00002c13 <network_ntp>:
    2c13:	6e 65 74 77 6f 72 6b 2f 6e 74 70 00                 network/ntp.

00002c1f <network_dns>:
    2c1f:	6e 65 74 77 6f 72 6b 2f 64 6e 73 00                 network/dns.

00002c2b <network_gw>:
    2c2b:	6e 65 74 77 6f 72 6b 2f 67 77 00                    network/gw.

00002c36 <network_netmask>:
    2c36:	6e 65 74 77 6f 72 6b 2f 6e 65 74 6d 61 73 6b 00     network/netmask.

00002c46 <network_mac>:
    2c46:	6e 65 74 77 6f 72 6b 2f 6d 61 63 00                 network/mac.

00002c52 <global_time_offset>:
    2c52:	67 6c 6f 62 61 6c 2f 74 69 6d 65 2f 6e 74 70 5f     global/time/ntp_
    2c62:	6f 66 66 73 65 74 00                                offset.

00002c69 <global_time_ntp>:
    2c69:	67 6c 6f 62 61 6c 2f 74 69 6d 65 2f 6e 74 70 00     global/time/ntp.

00002c79 <global_time_set>:
    2c79:	67 6c 6f 62 61 6c 2f 74 69 6d 65 2f 73 65 74 00     global/time/set.

00002c89 <termbig_header_out>:
    2c89:	2f 74 65 72 6d 62 69 67 2d 6f 75 74 2f 00           /termbig-out/.

00002c97 <termbig_subscribe>:
    2c97:	2f 63 74 6c 2f 74 65 72 6d 62 69 67 2f 73 75 62     /ctl/termbig/sub
    2ca7:	73 63 72 69 62 65 00                                scribe.

00002cae <thermctl_subscribe>:
    2cae:	2f 63 74 6c 2f 74 68 65 72 6d 63 74 6c 2f 73 75     /ctl/thermctl/su
    2cbe:	62 73 63 72 69 62 65 00                             bscribe.

00002cc6 <lightctl_header_out>:
    2cc6:	2f 6c 69 67 68 74 63 74 6c 2d 6f 75 74 2f 00        /lightctl-out/.

00002cd5 <thermctl_header_in>:
    2cd5:	2f 74 68 65 72 6d 63 74 6c 2d 69 6e 2f 00           /thermctl-in/.

00002ce3 <LCDWIKI_KBV::start(unsigned int)::ST7796S_regValues>:
    2ce3:	f0 01 c3 f0 01 96 36 01 68 3a 01 05 b0 01 80 53     ......6.h:.....S
    2cf3:	01 2c 51 01 14 b6 02 20 02 b5 04 02 03 00 04 b1     .,Q.... ........
    2d03:	02 80 10 b4 01 00 b7 01 c6 c5 01 24 e4 01 31 e8     ...........$..1.
    2d13:	08 40 8a 00 00 29 19 a5 33 c2 00 a7 00 e0 0e f0     .@...)..3.......
    2d23:	09 13 12 12 2b 3c 44 4b 1b 18 17 1d 21 e1 0e f0     ....+<DK....!...
    2d33:	09 13 0c 0d 27 3b 44 4d 0b 17 17 1d 21 36 01 ec     ....';DM....!6..
    2d43:	f0 01 c3 f0 01 69 13 00 11 00 29 00                 .....i....).

00002d4f <text_rtc_cas>:
    2d4f:	52 54 43 20 76 6e 69 74 72 6e 69 20 68 6f 64 69     RTC vnitrni hodi
    2d5f:	6e 79 00                                            ny.

00002d62 <text_ntp_cas>:
    2d62:	4e 54 50 20 69 6e 74 65 72 6e 65 74 6f 76 79 20     NTP internetovy 
    2d72:	63 61 73 00                                         cas.

00002d76 <text_pid_regulator>:
    2d76:	50 49 44 20 72 65 67 75 6c 61 74 6f 72 00           PID regulator.

00002d84 <text_nrf_rozhrani>:
    2d84:	4e 52 46 20 72 6f 7a 68 72 61 6e 69 00              NRF rozhrani.

00002d91 <text_rest_rozhrani>:
    2d91:	52 45 53 54 20 41 50 49 20 72 6f 7a 68 72 61 6e     REST API rozhran
    2da1:	69 00                                               i.

00002da3 <thermctl_header_out>:
    2da3:	2f 74 68 65 72 6d 63 74 6c 2d 6f 75 74 2f 00        /thermctl-out/.

00002db2 <text_mqtt_rozhrani>:
    2db2:	4d 51 54 54 20 72 6f 7a 68 72 61 6e 69 00           MQTT rozhrani.

00002dc0 <text_ethernet_rozhrani>:
    2dc0:	45 74 68 65 72 6e 65 74 20 72 6f 7a 68 72 61 6e     Ethernet rozhran
    2dd0:	69 00                                               i.

00002dd2 <text_onewire_hledam>:
    2dd2:	31 77 69 72 65 20 68 6c 65 64 61 6d 00              1wire hledam.

00002ddf <text_onewire_rozhrani>:
    2ddf:	31 77 69 72 65 20 72 6f 7a 68 72 61 6e 69 00        1wire rozhrani.

00002dee <text_touchscreen>:
    2dee:	74 6f 75 63 68 73 63 72 65 65 6e 00                 touchscreen.

00002dfa <text_nastaveni_systemu>:
    2dfa:	6e 61 73 74 61 76 65 6e 69 20 73 79 73 74 65 6d     nastaveni system
    2e0a:	75 00                                               u.

00002e0c <text_test_eeprom>:
    2e0c:	54 65 73 74 20 53 50 49 2d 45 45 50 52 4f 4d 00     Test SPI-EEPROM.

00002e1c <text_ok>:
    2e1c:	4f 4b 00                                            OK.

00002e1f <text_test_ram>:
    2e1f:	54 65 73 74 20 53 50 49 2d 52 41 4d 00              Test SPI-RAM.

00002e2c <text_bezny_start>:
    2e2c:	42 65 7a 6e 79 20 73 74 61 72 74 00                 Bezny start.

00002e38 <text_vychozi_nastaveni>:
    2e38:	56 79 63 68 6f 7a 69 20 6e 61 73 74 61 76 65 6e     Vychozi nastaven
    2e48:	69 00                                               i.

00002e4a <text_vnitrni_ochrany>:
    2e4a:	56 6e 69 74 72 6e 69 20 6f 63 68 72 61 6e 79 00     Vnitrni ochrany.

00002e5a <term_title>:
    2e5a:	50 6f 6b 6f 6a 6f 76 79 20 74 65 72 6d 6f 73 74     Pokojovy termost
    2e6a:	61 74 20 76 33 00                                   at v3.

00002e70 <current_time>:
    2e70:	41 6b 74 75 61 6c 6e 69 20 63 61 73 00              Aktualni cas.

00002e7d <current_temp>:
    2e7d:	41 6b 74 75 61 6c 6e 69 20 74 65 70 6c 6f 74 61     Aktualni teplota
    2e8d:	3a 00                                               :.

00002e8f <text_err>:
    2e8f:	45 72 72 6f 72 00                                   Error.

00002e95 <nastaveni_tds_period>:
    2e95:	4d 65 72 69 63 69 20 70 65 72 69 6f 64 61 00        Merici perioda.

00002ea4 <temp_offset_short>:
    2ea4:	6f 66 66 73 65 74 3a 00                             offset:.

00002eac <text_online>:
    2eac:	4f 6e 6c 69 6e 65 00                                Online.

00002eb3 <text_last_update>:
    2eb3:	50 6f 73 6c 65 64 6e 69 20 61 6b 74 75 61 6c 69     Posledni aktuali
    2ec3:	7a 61 63 65 3a 00                                   zace:.

00002ec9 <current_temp_short>:
    2ec9:	74 65 70 6c 6f 74 61 3a 00                          teplota:.

00002ed2 <text_nazev>:
    2ed2:	4e 61 7a 65 76 3a 00                                Nazev:.

00002ed9 <text_nastavit_tds>:
    2ed9:	4e 61 73 74 61 76 69 74 20 54 44 53 20 63 69 64     Nastavit TDS cid
    2ee9:	6c 6f 00                                            lo.

00002eec <text_not_used>:
    2eec:	4e 65 6e 69 20 70 6f 75 7a 69 74 6f 00              Neni pouzito.

00002ef9 <text_associovat_tds>:
    2ef9:	50 72 69 72 61 64 69 74 20 6e 6f 76 65 20 63 69     Priradit nove ci
    2f09:	64 6c 6f 00                                         dlo.

00002f0d <text_rtds_prefix>:
    2f0d:	2f 00                                               /.

00002f0f <status_know_devices>:
    2f0f:	73 74 61 74 75 73 2f 6b 6e 6f 77 5f 64 65 76 69     status/know_devi
    2f1f:	63 65 73 00                                         ces.

00002f23 <_ZL10network_ip.lto_priv.231>:
    2f23:	6e 65 74 77 6f 72 6b 2f 69 70 00                    network/ip.

00002f2e <status_mqtt_process>:
    2f2e:	73 74 61 74 75 73 2f 6d 71 74 74 2f 70 72 6f 63     status/mqtt/proc
    2f3e:	65 73 73 00                                         ess.

00002f42 <status_mqtt_receive>:
    2f42:	73 74 61 74 75 73 2f 6d 71 74 74 2f 72 65 63 65     status/mqtt/rece
    2f52:	69 76 65 00                                         ive.

00002f56 <status_mqtt_error>:
    2f56:	73 74 61 74 75 73 2f 6d 71 74 74 2f 65 72 72 6f     status/mqtt/erro
    2f66:	72 00                                               r.

00002f68 <status_mqtt_send>:
    2f68:	73 74 61 74 75 73 2f 6d 71 74 74 2f 73 65 6e 64     status/mqtt/send
	...

00002f79 <port_to_mode_PGM>:
    2f79:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.

00002f89 <digital_pin_to_timer_PGM>:
    2f89:	00 00 00 0a 0b 0c 00 00 00 00 00 00 08 04 05 06     ................
	...
    2fbd:	00 03                                               ..

00002fbf <lcd_font>:
    2fbf:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
    2fcf:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
    2fdf:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
    2fef:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
    2fff:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
    300f:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
    301f:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
    302f:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
    303f:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
    304f:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
    305f:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
    306f:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
    307f:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
    308f:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
    309f:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
    30af:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
    30bf:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
    30cf:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
    30df:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
    30ef:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
    30ff:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
    310f:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
    311f:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
    312f:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
    313f:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
    314f:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
    315f:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
    316f:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
    317f:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
    318f:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
    319f:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
    31af:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
    31bf:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
    31cf:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
    31df:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
    31ef:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
    31ff:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
    320f:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
    321f:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
    322f:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
    323f:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
    324f:	55 55 79 41 21 54 54 78 41 21 55 54 78 40 20 54     UUyA!TTxA!UTx@ T
    325f:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
    326f:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
    327f:	42 00 01 45 7c 40 f0 29 24 29 f0 f0 28 25 28 f0     B..E|@.)$)..(%(.
    328f:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
    329f:	49 49 49 32 32 48 48 48 32 32 4a 48 48 30 3a 41     III22HHH22JHH0:A
    32af:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 39 44 44     A!z:B@ x....}9DD
    32bf:	44 39 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     D9=@@@=<$.$$H~IC
    32cf:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
    32df:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
    32ef:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
    32ff:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
    330f:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
    331f:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
    332f:	aa 00 55 00 aa aa 55 aa 55 aa 00 00 00 ff 00 10     ..U...U.U.......
    333f:	10 10 ff 00 14 14 14 ff 00 10 10 ff 00 ff 10 10     ................
    334f:	f0 10 f0 14 14 14 fc 00 14 14 f7 00 ff 00 00 ff     ................
    335f:	00 ff 14 14 f4 04 fc 14 14 17 10 1f 10 10 1f 10     ................
    336f:	1f 14 14 14 1f 00 10 10 10 f0 00 00 00 00 1f 10     ................
    337f:	10 10 10 1f 10 10 10 10 f0 10 00 00 00 ff 10 10     ................
    338f:	10 10 10 10 10 10 10 ff 10 00 00 00 ff 14 00 00     ................
    339f:	ff 00 ff 00 00 1f 10 17 00 00 fc 04 f4 14 14 17     ................
    33af:	10 17 14 14 f4 04 f4 00 00 ff 00 f7 14 14 14 14     ................
    33bf:	14 14 14 f7 00 f7 14 14 14 17 14 10 10 1f 10 1f     ................
    33cf:	14 14 14 f4 14 10 10 f0 10 f0 00 00 1f 10 1f 00     ................
    33df:	00 00 1f 14 00 00 00 fc 14 00 00 f0 10 f0 10 10     ................
    33ef:	ff 10 ff 14 14 14 ff 14 10 10 10 1f 00 00 00 00     ................
    33ff:	f0 10 ff ff ff ff ff f0 f0 f0 f0 f0 ff ff ff 00     ................
    340f:	00 00 00 00 ff ff 0f 0f 0f 0f 0f 38 44 44 38 44     ...........8DD8D
    341f:	7c 2a 2a 3e 14 7e 02 02 06 06 02 7e 02 7e 02 63     |**>.~.....~.~.c
    342f:	55 49 41 63 38 44 44 3c 04 40 7e 20 1e 20 06 02     UIAc8DD<.@~ . ..
    343f:	7e 02 02 99 a5 e7 a5 99 1c 2a 49 2a 1c 4c 72 01     ~........*I*.Lr.
    344f:	72 4c 30 4a 4d 4d 30 30 48 78 48 30 bc 62 5a 46     rL0JMM00HxH0.bZF
    345f:	3d 3e 49 49 49 00 7e 01 01 01 7e 2a 2a 2a 2a 2a     =>III.~...~*****
    346f:	44 44 5f 44 44 40 51 4a 44 40 40 44 4a 51 40 00     DD_DD@QJD@@DJQ@.
    347f:	00 ff 01 03 e0 80 ff 00 00 08 08 6b 6b 08 36 12     ...........kk.6.
    348f:	36 24 36 06 0f 09 0f 06 00 00 18 18 00 00 00 10     6$6.............
    349f:	10 00 30 40 ff 01 01 00 1f 01 01 1e 00 19 1d 17     ..0@............
    34af:	12 00 3c 3c 3c 3c 00 00 00 00 00                    ..<<<<.....

000034ba <port_to_input_PGM>:
    34ba:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.

000034ca <digital_pin_to_bit_mask_PGM>:
    34ca:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
    34da:	08 10 01 02 04 08 10 20 40 80 01 02 01 02 04 08     ....... @.......
    34ea:	10 20 40 80 04 80 40 20 10 08 04 02 01 01 02 04     . @...@ ........
    34fa:	08 10 20 40 80 20                                   .. @. 

00003500 <port_to_output_PGM>:
    3500:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.

00003510 <digital_pin_to_port_PGM>:
    3510:	05 05 05 05 05 05 05 05 02 02 02 02 02 02 02 02     ................
    3520:	07 07 04 04 04 04 04 04 04 04 07 07 03 03 03 03     ................
    3530:	03 03 03 03 07 01 01 01 01 01 01 01 01 06 06 06     ................
    3540:	06 06 06 06 06 07                                   ......

00003546 <daysInMonth>:
    3546:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e 1f                 ............

00003552 <__ctors_start>:
__ctors_start():
    3552:	29 95       	.word	0x9529	; ????

00003554 <__ctors_end>:
__dtors_end():
    3554:	11 24       	eor	r1, r1
    3556:	1f be       	out	0x3f, r1	; 63
    3558:	cf ef       	ldi	r28, 0xFF	; 255
    355a:	d1 e2       	ldi	r29, 0x21	; 33
    355c:	de bf       	out	0x3e, r29	; 62
    355e:	cd bf       	out	0x3d, r28	; 61
    3560:	00 e0       	ldi	r16, 0x00	; 0
    3562:	0c bf       	out	0x3c, r16	; 60

00003564 <__do_copy_data>:
__do_copy_data():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
    3564:	18 e0       	ldi	r17, 0x08	; 8
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
    3566:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
    3568:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
    356a:	ea e0       	ldi	r30, 0x0A	; 10
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
    356c:	f0 e6       	ldi	r31, 0x60	; 96
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
    356e:	01 e0       	ldi	r16, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
    3570:	0b bf       	out	0x3b, r16	; 59
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
    3572:	02 c0       	rjmp	.+4      	; 0x3578 <__do_copy_data+0x14>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
    3574:	07 90       	elpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
    3576:	0d 92       	st	X+, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
    3578:	a8 34       	cpi	r26, 0x48	; 72
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
    357a:	b1 07       	cpc	r27, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
    357c:	d9 f7       	brne	.-10     	; 0x3574 <__do_copy_data+0x10>

0000357e <__do_clear_bss>:
__do_clear_bss():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
    357e:	23 e1       	ldi	r18, 0x13	; 19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
    3580:	a8 e4       	ldi	r26, 0x48	; 72
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
    3582:	b8 e0       	ldi	r27, 0x08	; 8
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
    3584:	01 c0       	rjmp	.+2      	; 0x3588 <.do_clear_bss_start>

00003586 <.do_clear_bss_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
    3586:	1d 92       	st	X+, r1

00003588 <.do_clear_bss_start>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
    3588:	a3 34       	cpi	r26, 0x43	; 67
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
    358a:	b2 07       	cpc	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
    358c:	e1 f7       	brne	.-8      	; 0x3586 <.do_clear_bss_loop>

0000358e <__do_global_ctors>:
__do_global_ctors():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
    358e:	1a e1       	ldi	r17, 0x1A	; 26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
    3590:	ca ea       	ldi	r28, 0xAA	; 170
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
    3592:	da e1       	ldi	r29, 0x1A	; 26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2470
    3594:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
    3596:	06 c0       	rjmp	.+12     	; 0x35a4 <__do_global_ctors+0x16>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
    3598:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2476
    359a:	01 09       	sbc	r16, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2477
    359c:	80 2f       	mov	r24, r16
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
    359e:	fe 01       	movw	r30, r28
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
    35a0:	0e 94 5a ae 	call	0x15cb4	; 0x15cb4 <__tablejump2__>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
    35a4:	c9 3a       	cpi	r28, 0xA9	; 169
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
    35a6:	d1 07       	cpc	r29, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2486
    35a8:	80 e0       	ldi	r24, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2487
    35aa:	08 07       	cpc	r16, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
    35ac:	a9 f7       	brne	.-22     	; 0x3598 <__do_global_ctors+0xa>
    35ae:	0e 94 38 99 	call	0x13270	; 0x13270 <main>
    35b2:	0c 94 03 b0 	jmp	0x16006	; 0x16006 <_exit>

000035b6 <__bad_interrupt>:
__vector_38():
    35b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000035ba <EthernetClient::flush()>:
_ZN14EthernetClient5flushEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:124
  return b;
}

void EthernetClient::flush() {
  ::flush(_sock);
}
    35ba:	08 95       	ret

000035bc <EthernetClient::write(unsigned char)>:
_ZN14EthernetClient5writeEh():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:73
  }

  return 1;
}

size_t EthernetClient::write(uint8_t b) {
    35bc:	cf 93       	push	r28
    35be:	df 93       	push	r29
    35c0:	1f 92       	push	r1
    35c2:	cd b7       	in	r28, 0x3d	; 61
    35c4:	de b7       	in	r29, 0x3e	; 62
    35c6:	69 83       	std	Y+1, r22	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:74
  return write(&b, 1);
    35c8:	dc 01       	movw	r26, r24
    35ca:	ed 91       	ld	r30, X+
    35cc:	fc 91       	ld	r31, X
    35ce:	02 80       	ldd	r0, Z+2	; 0x02
    35d0:	f3 81       	ldd	r31, Z+3	; 0x03
    35d2:	e0 2d       	mov	r30, r0
    35d4:	41 e0       	ldi	r20, 0x01	; 1
    35d6:	50 e0       	ldi	r21, 0x00	; 0
    35d8:	be 01       	movw	r22, r28
    35da:	6f 5f       	subi	r22, 0xFF	; 255
    35dc:	7f 4f       	sbci	r23, 0xFF	; 255
    35de:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:75
}
    35e0:	0f 90       	pop	r0
    35e2:	df 91       	pop	r29
    35e4:	cf 91       	pop	r28
    35e6:	08 95       	ret

000035e8 <EthernetClient::operator!=(EthernetClient const&)>:
_ZN14EthernetClientneERKS_():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.h:28
  virtual void flush();
  virtual void stop();
  virtual uint8_t connected();
  virtual operator bool();
  virtual bool operator==(const EthernetClient&);
  virtual bool operator!=(const EthernetClient& rhs) { return !this->operator==(rhs); };
    35e8:	dc 01       	movw	r26, r24
    35ea:	ed 91       	ld	r30, X+
    35ec:	fc 91       	ld	r31, X
    35ee:	02 8c       	ldd	r0, Z+26	; 0x1a
    35f0:	f3 8d       	ldd	r31, Z+27	; 0x1b
    35f2:	e0 2d       	mov	r30, r0
    35f4:	19 95       	eicall
    35f6:	91 e0       	ldi	r25, 0x01	; 1
    35f8:	89 27       	eor	r24, r25
    35fa:	08 95       	ret

000035fc <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.h:63
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    35fc:	90 e0       	ldi	r25, 0x00	; 0
    35fe:	80 e0       	ldi	r24, 0x00	; 0
    3600:	08 95       	ret

00003602 <EthernetUDP::read(char*, unsigned int)>:
_ZN11EthernetUDP4readEPcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.h:94
  // Read up to len bytes from the current packet and place them into buffer
  // Returns the number of bytes read, or 0 if none are available
  virtual int read(unsigned char* buffer, size_t len);
  // Read up to len characters from the current packet and place them into buffer
  // Returns the number of characters read, or 0 if none are available
  virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
    3602:	dc 01       	movw	r26, r24
    3604:	ed 91       	ld	r30, X+
    3606:	fc 91       	ld	r31, X
    3608:	04 8c       	ldd	r0, Z+28	; 0x1c
    360a:	f5 8d       	ldd	r31, Z+29	; 0x1d
    360c:	e0 2d       	mov	r30, r0
    360e:	19 94       	eijmp

00003610 <LCDWIKI_KBV::Get_Height() const>:
_ZNK11LCDWIKI_KBV10Get_HeightEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:744

//get lcd height
int16_t LCDWIKI_KBV::Get_Height(void) const
{
	return height;
}
    3610:	fc 01       	movw	r30, r24
    3612:	84 89       	ldd	r24, Z+20	; 0x14
    3614:	95 89       	ldd	r25, Z+21	; 0x15
    3616:	08 95       	ret

00003618 <LCDWIKI_KBV::Get_Width() const>:
_ZNK11LCDWIKI_KBV9Get_WidthEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:738

//get lcd width
int16_t LCDWIKI_KBV::Get_Width(void) const
{
	return width;
}
    3618:	fc 01       	movw	r30, r24
    361a:	82 89       	ldd	r24, Z+18	; 0x12
    361c:	93 89       	ldd	r25, Z+19	; 0x13
    361e:	08 95       	ret

00003620 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>:
_ZN11LCDWIKI_KBV9Fill_RectEiiiij():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:623
	CS_IDLE;
}

//fill area from x to x+w,y to y+h
void LCDWIKI_KBV::Fill_Rect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
    3620:	4f 92       	push	r4
    3622:	5f 92       	push	r5
    3624:	6f 92       	push	r6
    3626:	7f 92       	push	r7
    3628:	8f 92       	push	r8
    362a:	9f 92       	push	r9
    362c:	af 92       	push	r10
    362e:	bf 92       	push	r11
    3630:	cf 92       	push	r12
    3632:	df 92       	push	r13
    3634:	ef 92       	push	r14
    3636:	ff 92       	push	r15
    3638:	0f 93       	push	r16
    363a:	1f 93       	push	r17
    363c:	cf 93       	push	r28
    363e:	df 93       	push	r29
    3640:	ec 01       	movw	r28, r24
    3642:	5a 01       	movw	r10, r20
    3644:	27 01       	movw	r4, r14
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:625
	int16_t end;
	if (w < 0) 
    3646:	37 ff       	sbrs	r19, 7
    3648:	05 c0       	rjmp	.+10     	; 0x3654 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x34>
    364a:	62 0f       	add	r22, r18
    364c:	73 1f       	adc	r23, r19
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:627
	{
        w = -w;
    364e:	31 95       	neg	r19
    3650:	21 95       	neg	r18
    3652:	31 09       	sbc	r19, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:630
        x -= w;
    }                           //+ve w
    end = x + w;
    3654:	7b 01       	movw	r14, r22
    3656:	e2 0e       	add	r14, r18
    3658:	f3 1e       	adc	r15, r19
    365a:	6b 01       	movw	r12, r22
    365c:	77 ff       	sbrs	r23, 7
    365e:	02 c0       	rjmp	.+4      	; 0x3664 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x44>
    3660:	d1 2c       	mov	r13, r1
    3662:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:635
    if (x < 0)
    {
        x = 0;
    }
    if (end > Get_Width())
    3664:	e8 81       	ld	r30, Y
    3666:	f9 81       	ldd	r31, Y+1	; 0x01
    3668:	06 84       	ldd	r0, Z+14	; 0x0e
    366a:	f7 85       	ldd	r31, Z+15	; 0x0f
    366c:	e0 2d       	mov	r30, r0
    366e:	ce 01       	movw	r24, r28
    3670:	19 95       	eicall
    3672:	8e 15       	cp	r24, r14
    3674:	9f 05       	cpc	r25, r15
    3676:	44 f4       	brge	.+16     	; 0x3688 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x68>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:637
    {
        end = Get_Width();
    3678:	e8 81       	ld	r30, Y
    367a:	f9 81       	ldd	r31, Y+1	; 0x01
    367c:	06 84       	ldd	r0, Z+14	; 0x0e
    367e:	f7 85       	ldd	r31, Z+15	; 0x0f
    3680:	e0 2d       	mov	r30, r0
    3682:	ce 01       	movw	r24, r28
    3684:	19 95       	eicall
    3686:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:639
    }
    w = end - x;
    3688:	47 01       	movw	r8, r14
    368a:	8c 18       	sub	r8, r12
    368c:	9d 08       	sbc	r9, r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:640
    if (h < 0) 
    368e:	17 ff       	sbrs	r17, 7
    3690:	05 c0       	rjmp	.+10     	; 0x369c <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x7c>
    3692:	a0 0e       	add	r10, r16
    3694:	b1 1e       	adc	r11, r17
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:642
	{
        h = -h;
    3696:	11 95       	neg	r17
    3698:	01 95       	neg	r16
    369a:	11 09       	sbc	r17, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:645
        y -= h;
    }                           //+ve h
    end = y + h;
    369c:	0a 0d       	add	r16, r10
    369e:	1b 1d       	adc	r17, r11
    36a0:	b7 fe       	sbrs	r11, 7
    36a2:	02 c0       	rjmp	.+4      	; 0x36a8 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x88>
    36a4:	b1 2c       	mov	r11, r1
    36a6:	a1 2c       	mov	r10, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:650
    if (y < 0)
    {
        y = 0;
    }
    if (end > Get_Height())
    36a8:	e8 81       	ld	r30, Y
    36aa:	f9 81       	ldd	r31, Y+1	; 0x01
    36ac:	04 84       	ldd	r0, Z+12	; 0x0c
    36ae:	f5 85       	ldd	r31, Z+13	; 0x0d
    36b0:	e0 2d       	mov	r30, r0
    36b2:	ce 01       	movw	r24, r28
    36b4:	19 95       	eicall
    36b6:	80 17       	cp	r24, r16
    36b8:	91 07       	cpc	r25, r17
    36ba:	44 f4       	brge	.+16     	; 0x36cc <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0xac>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:652
    {
        end = Get_Height();
    36bc:	e8 81       	ld	r30, Y
    36be:	f9 81       	ldd	r31, Y+1	; 0x01
    36c0:	04 84       	ldd	r0, Z+12	; 0x0c
    36c2:	f5 85       	ldd	r31, Z+13	; 0x0d
    36c4:	e0 2d       	mov	r30, r0
    36c6:	ce 01       	movw	r24, r28
    36c8:	19 95       	eicall
    36ca:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:654
    }
    h = end - y;
    36cc:	38 01       	movw	r6, r16
    36ce:	6a 18       	sub	r6, r10
    36d0:	7b 08       	sbc	r7, r11
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:655
    Set_Addr_Window(x, y, x + w - 1, y + h - 1);//set area
    36d2:	01 50       	subi	r16, 0x01	; 1
    36d4:	11 09       	sbc	r17, r1
    36d6:	97 01       	movw	r18, r14
    36d8:	21 50       	subi	r18, 0x01	; 1
    36da:	31 09       	sbc	r19, r1
    36dc:	e8 81       	ld	r30, Y
    36de:	f9 81       	ldd	r31, Y+1	; 0x01
    36e0:	06 80       	ldd	r0, Z+6	; 0x06
    36e2:	f7 81       	ldd	r31, Z+7	; 0x07
    36e4:	e0 2d       	mov	r30, r0
    36e6:	a5 01       	movw	r20, r10
    36e8:	b6 01       	movw	r22, r12
    36ea:	ce 01       	movw	r24, r28
    36ec:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:656
	CS_ACTIVE;
    36ee:	ee a5       	ldd	r30, Y+46	; 0x2e
    36f0:	ff a5       	ldd	r31, Y+47	; 0x2f
    36f2:	80 81       	ld	r24, Z
    36f4:	9a ad       	ldd	r25, Y+58	; 0x3a
    36f6:	89 23       	and	r24, r25
    36f8:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:657
    if(lcd_driver == ID_932X)
    36fa:	88 8d       	ldd	r24, Y+24	; 0x18
    36fc:	99 8d       	ldd	r25, Y+25	; 0x19
    36fe:	89 2b       	or	r24, r25
    3700:	c9 f4       	brne	.+50     	; 0x3734 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x114>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:659
	{
		writeCmd8(ILI932X_START_OSC);
    3702:	e8 a9       	ldd	r30, Y+48	; 0x30
    3704:	f9 a9       	ldd	r31, Y+49	; 0x31
    3706:	80 81       	ld	r24, Z
    3708:	9b ad       	ldd	r25, Y+59	; 0x3b
    370a:	89 23       	and	r24, r25
    370c:	80 83       	st	Z, r24
    370e:	12 b8       	out	0x02, r1	; 2
    3710:	ea a9       	ldd	r30, Y+50	; 0x32
    3712:	fb a9       	ldd	r31, Y+51	; 0x33
    3714:	80 81       	ld	r24, Z
    3716:	9c ad       	ldd	r25, Y+60	; 0x3c
    3718:	89 23       	and	r24, r25
    371a:	80 83       	st	Z, r24
    371c:	ea a9       	ldd	r30, Y+50	; 0x32
    371e:	fb a9       	ldd	r31, Y+51	; 0x33
    3720:	80 81       	ld	r24, Z
    3722:	98 ad       	ldd	r25, Y+56	; 0x38
    3724:	89 2b       	or	r24, r25
    3726:	80 83       	st	Z, r24
    3728:	e8 a9       	ldd	r30, Y+48	; 0x30
    372a:	f9 a9       	ldd	r31, Y+49	; 0x31
    372c:	80 81       	ld	r24, Z
    372e:	9f a9       	ldd	r25, Y+55	; 0x37
    3730:	89 2b       	or	r24, r25
    3732:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:662
			
	}
	writeCmd8(CC);	
    3734:	e8 a9       	ldd	r30, Y+48	; 0x30
    3736:	f9 a9       	ldd	r31, Y+49	; 0x31
    3738:	80 81       	ld	r24, Z
    373a:	9b ad       	ldd	r25, Y+59	; 0x3b
    373c:	89 23       	and	r24, r25
    373e:	80 83       	st	Z, r24
    3740:	88 a1       	ldd	r24, Y+32	; 0x20
    3742:	82 b9       	out	0x02, r24	; 2
    3744:	ea a9       	ldd	r30, Y+50	; 0x32
    3746:	fb a9       	ldd	r31, Y+51	; 0x33
    3748:	80 81       	ld	r24, Z
    374a:	9c ad       	ldd	r25, Y+60	; 0x3c
    374c:	89 23       	and	r24, r25
    374e:	80 83       	st	Z, r24
    3750:	ea a9       	ldd	r30, Y+50	; 0x32
    3752:	fb a9       	ldd	r31, Y+51	; 0x33
    3754:	80 81       	ld	r24, Z
    3756:	98 ad       	ldd	r25, Y+56	; 0x38
    3758:	89 2b       	or	r24, r25
    375a:	80 83       	st	Z, r24
    375c:	e8 a9       	ldd	r30, Y+48	; 0x30
    375e:	f9 a9       	ldd	r31, Y+49	; 0x31
    3760:	80 81       	ld	r24, Z
    3762:	9f a9       	ldd	r25, Y+55	; 0x37
    3764:	89 2b       	or	r24, r25
    3766:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:663
	if (h > w) 
    3768:	86 14       	cp	r8, r6
    376a:	97 04       	cpc	r9, r7
    376c:	2c f0       	brlt	.+10     	; 0x3778 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x158>
    376e:	96 2d       	mov	r25, r6
    3770:	87 2d       	mov	r24, r7
    3772:	34 01       	movw	r6, r8
    3774:	89 2e       	mov	r8, r25
    3776:	98 2e       	mov	r9, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:669
	{
        end = h;
        h = w;
        w = end;
    }
	while (h-- > 0) 
    3778:	18 14       	cp	r1, r8
    377a:	19 04       	cpc	r1, r9
    377c:	0c f5       	brge	.+66     	; 0x37c0 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1a0>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:671
	{
		end = w;
    377e:	c3 01       	movw	r24, r6
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:674
		do 
		{
   			writeData16(color);//set color data
    3780:	52 b8       	out	0x02, r5	; 2
    3782:	ea a9       	ldd	r30, Y+50	; 0x32
    3784:	fb a9       	ldd	r31, Y+51	; 0x33
    3786:	20 81       	ld	r18, Z
    3788:	3c ad       	ldd	r19, Y+60	; 0x3c
    378a:	23 23       	and	r18, r19
    378c:	20 83       	st	Z, r18
    378e:	ea a9       	ldd	r30, Y+50	; 0x32
    3790:	fb a9       	ldd	r31, Y+51	; 0x33
    3792:	20 81       	ld	r18, Z
    3794:	38 ad       	ldd	r19, Y+56	; 0x38
    3796:	23 2b       	or	r18, r19
    3798:	20 83       	st	Z, r18
    379a:	42 b8       	out	0x02, r4	; 2
    379c:	ea a9       	ldd	r30, Y+50	; 0x32
    379e:	fb a9       	ldd	r31, Y+51	; 0x33
    37a0:	20 81       	ld	r18, Z
    37a2:	3c ad       	ldd	r19, Y+60	; 0x3c
    37a4:	23 23       	and	r18, r19
    37a6:	20 83       	st	Z, r18
    37a8:	ea a9       	ldd	r30, Y+50	; 0x32
    37aa:	fb a9       	ldd	r31, Y+51	; 0x33
    37ac:	20 81       	ld	r18, Z
    37ae:	38 ad       	ldd	r19, Y+56	; 0x38
    37b0:	23 2b       	or	r18, r19
    37b2:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:675
        } while (--end != 0);
    37b4:	01 97       	sbiw	r24, 0x01	; 1
    37b6:	21 f7       	brne	.-56     	; 0x3780 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x160>
    37b8:	81 e0       	ldi	r24, 0x01	; 1
    37ba:	88 1a       	sub	r8, r24
    37bc:	91 08       	sbc	r9, r1
    37be:	dc cf       	rjmp	.-72     	; 0x3778 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x158>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:677
	}
	if(lcd_driver == ID_932X)
    37c0:	88 8d       	ldd	r24, Y+24	; 0x18
    37c2:	99 8d       	ldd	r25, Y+25	; 0x19
    37c4:	00 97       	sbiw	r24, 0x00	; 0
    37c6:	51 f5       	brne	.+84     	; 0x381c <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1fc>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:679
	{
		Set_Addr_Window(0, 0, width - 1, height - 1);
    37c8:	0c 89       	ldd	r16, Y+20	; 0x14
    37ca:	1d 89       	ldd	r17, Y+21	; 0x15
    37cc:	01 50       	subi	r16, 0x01	; 1
    37ce:	11 09       	sbc	r17, r1
    37d0:	2a 89       	ldd	r18, Y+18	; 0x12
    37d2:	3b 89       	ldd	r19, Y+19	; 0x13
    37d4:	21 50       	subi	r18, 0x01	; 1
    37d6:	31 09       	sbc	r19, r1
    37d8:	e8 81       	ld	r30, Y
    37da:	f9 81       	ldd	r31, Y+1	; 0x01
    37dc:	06 80       	ldd	r0, Z+6	; 0x06
    37de:	f7 81       	ldd	r31, Z+7	; 0x07
    37e0:	e0 2d       	mov	r30, r0
    37e2:	50 e0       	ldi	r21, 0x00	; 0
    37e4:	40 e0       	ldi	r20, 0x00	; 0
    37e6:	70 e0       	ldi	r23, 0x00	; 0
    37e8:	60 e0       	ldi	r22, 0x00	; 0
    37ea:	ce 01       	movw	r24, r28
    37ec:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:685
	}
	else if(lcd_driver == ID_7575)
	{
		Set_LR();
	}
	CS_IDLE;
    37ee:	ee a5       	ldd	r30, Y+46	; 0x2e
    37f0:	ff a5       	ldd	r31, Y+47	; 0x2f
    37f2:	80 81       	ld	r24, Z
    37f4:	9e a9       	ldd	r25, Y+54	; 0x36
    37f6:	89 2b       	or	r24, r25
    37f8:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:686
}
    37fa:	df 91       	pop	r29
    37fc:	cf 91       	pop	r28
    37fe:	1f 91       	pop	r17
    3800:	0f 91       	pop	r16
    3802:	ff 90       	pop	r15
    3804:	ef 90       	pop	r14
    3806:	df 90       	pop	r13
    3808:	cf 90       	pop	r12
    380a:	bf 90       	pop	r11
    380c:	af 90       	pop	r10
    380e:	9f 90       	pop	r9
    3810:	8f 90       	pop	r8
    3812:	7f 90       	pop	r7
    3814:	6f 90       	pop	r6
    3816:	5f 90       	pop	r5
    3818:	4f 90       	pop	r4
    381a:	08 95       	ret
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:681
	}
	if(lcd_driver == ID_932X)
	{
		Set_Addr_Window(0, 0, width - 1, height - 1);
	}
	else if(lcd_driver == ID_7575)
    381c:	01 97       	sbiw	r24, 0x01	; 1
    381e:	39 f7       	brne	.-50     	; 0x37ee <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1ce>
    3820:	ee a5       	ldd	r30, Y+46	; 0x2e
    3822:	ff a5       	ldd	r31, Y+47	; 0x2f
Set_LR():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:408
// to save a few register writes on each pixel drawn, the lower-right
// corner of the address window is reset after most fill operations, so
// that drawPixel only needs to change the upper left each time.
void LCDWIKI_KBV::Set_LR(void)
{
	CS_ACTIVE;
    3824:	80 81       	ld	r24, Z
    3826:	9a ad       	ldd	r25, Y+58	; 0x3a
    3828:	89 23       	and	r24, r25
    382a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:409
	writeCmdData8(HX8347G_COLADDREND_HI,(width -1)>>8);
    382c:	e8 a9       	ldd	r30, Y+48	; 0x30
    382e:	f9 a9       	ldd	r31, Y+49	; 0x31
    3830:	80 81       	ld	r24, Z
    3832:	9b ad       	ldd	r25, Y+59	; 0x3b
    3834:	89 23       	and	r24, r25
    3836:	80 83       	st	Z, r24
    3838:	84 e0       	ldi	r24, 0x04	; 4
    383a:	82 b9       	out	0x02, r24	; 2
    383c:	ea a9       	ldd	r30, Y+50	; 0x32
    383e:	fb a9       	ldd	r31, Y+51	; 0x33
    3840:	80 81       	ld	r24, Z
    3842:	9c ad       	ldd	r25, Y+60	; 0x3c
    3844:	89 23       	and	r24, r25
    3846:	80 83       	st	Z, r24
    3848:	ea a9       	ldd	r30, Y+50	; 0x32
    384a:	fb a9       	ldd	r31, Y+51	; 0x33
    384c:	80 81       	ld	r24, Z
    384e:	98 ad       	ldd	r25, Y+56	; 0x38
    3850:	89 2b       	or	r24, r25
    3852:	80 83       	st	Z, r24
    3854:	e8 a9       	ldd	r30, Y+48	; 0x30
    3856:	f9 a9       	ldd	r31, Y+49	; 0x31
    3858:	80 81       	ld	r24, Z
    385a:	9f a9       	ldd	r25, Y+55	; 0x37
    385c:	89 2b       	or	r24, r25
    385e:	80 83       	st	Z, r24
    3860:	8a 89       	ldd	r24, Y+18	; 0x12
    3862:	9b 89       	ldd	r25, Y+19	; 0x13
    3864:	01 97       	sbiw	r24, 0x01	; 1
    3866:	92 b9       	out	0x02, r25	; 2
    3868:	ea a9       	ldd	r30, Y+50	; 0x32
    386a:	fb a9       	ldd	r31, Y+51	; 0x33
    386c:	80 81       	ld	r24, Z
    386e:	9c ad       	ldd	r25, Y+60	; 0x3c
    3870:	89 23       	and	r24, r25
    3872:	80 83       	st	Z, r24
    3874:	ea a9       	ldd	r30, Y+50	; 0x32
    3876:	fb a9       	ldd	r31, Y+51	; 0x33
    3878:	80 81       	ld	r24, Z
    387a:	98 ad       	ldd	r25, Y+56	; 0x38
    387c:	89 2b       	or	r24, r25
    387e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:410
	writeCmdData8(HX8347G_COLADDREND_LO,width -1);
    3880:	e8 a9       	ldd	r30, Y+48	; 0x30
    3882:	f9 a9       	ldd	r31, Y+49	; 0x31
    3884:	80 81       	ld	r24, Z
    3886:	9b ad       	ldd	r25, Y+59	; 0x3b
    3888:	89 23       	and	r24, r25
    388a:	80 83       	st	Z, r24
    388c:	85 e0       	ldi	r24, 0x05	; 5
    388e:	82 b9       	out	0x02, r24	; 2
    3890:	ea a9       	ldd	r30, Y+50	; 0x32
    3892:	fb a9       	ldd	r31, Y+51	; 0x33
    3894:	80 81       	ld	r24, Z
    3896:	9c ad       	ldd	r25, Y+60	; 0x3c
    3898:	89 23       	and	r24, r25
    389a:	80 83       	st	Z, r24
    389c:	ea a9       	ldd	r30, Y+50	; 0x32
    389e:	fb a9       	ldd	r31, Y+51	; 0x33
    38a0:	80 81       	ld	r24, Z
    38a2:	98 ad       	ldd	r25, Y+56	; 0x38
    38a4:	89 2b       	or	r24, r25
    38a6:	80 83       	st	Z, r24
    38a8:	e8 a9       	ldd	r30, Y+48	; 0x30
    38aa:	f9 a9       	ldd	r31, Y+49	; 0x31
    38ac:	80 81       	ld	r24, Z
    38ae:	9f a9       	ldd	r25, Y+55	; 0x37
    38b0:	89 2b       	or	r24, r25
    38b2:	80 83       	st	Z, r24
    38b4:	8a 89       	ldd	r24, Y+18	; 0x12
    38b6:	81 50       	subi	r24, 0x01	; 1
    38b8:	82 b9       	out	0x02, r24	; 2
    38ba:	ea a9       	ldd	r30, Y+50	; 0x32
    38bc:	fb a9       	ldd	r31, Y+51	; 0x33
    38be:	80 81       	ld	r24, Z
    38c0:	9c ad       	ldd	r25, Y+60	; 0x3c
    38c2:	89 23       	and	r24, r25
    38c4:	80 83       	st	Z, r24
    38c6:	ea a9       	ldd	r30, Y+50	; 0x32
    38c8:	fb a9       	ldd	r31, Y+51	; 0x33
    38ca:	80 81       	ld	r24, Z
    38cc:	98 ad       	ldd	r25, Y+56	; 0x38
    38ce:	89 2b       	or	r24, r25
    38d0:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:411
	writeCmdData8(HX8347G_ROWADDREND_HI,(height -1)>>8);
    38d2:	e8 a9       	ldd	r30, Y+48	; 0x30
    38d4:	f9 a9       	ldd	r31, Y+49	; 0x31
    38d6:	80 81       	ld	r24, Z
    38d8:	9b ad       	ldd	r25, Y+59	; 0x3b
    38da:	89 23       	and	r24, r25
    38dc:	80 83       	st	Z, r24
    38de:	88 e0       	ldi	r24, 0x08	; 8
    38e0:	82 b9       	out	0x02, r24	; 2
    38e2:	ea a9       	ldd	r30, Y+50	; 0x32
    38e4:	fb a9       	ldd	r31, Y+51	; 0x33
    38e6:	80 81       	ld	r24, Z
    38e8:	9c ad       	ldd	r25, Y+60	; 0x3c
    38ea:	89 23       	and	r24, r25
    38ec:	80 83       	st	Z, r24
    38ee:	ea a9       	ldd	r30, Y+50	; 0x32
    38f0:	fb a9       	ldd	r31, Y+51	; 0x33
    38f2:	80 81       	ld	r24, Z
    38f4:	98 ad       	ldd	r25, Y+56	; 0x38
    38f6:	89 2b       	or	r24, r25
    38f8:	80 83       	st	Z, r24
    38fa:	e8 a9       	ldd	r30, Y+48	; 0x30
    38fc:	f9 a9       	ldd	r31, Y+49	; 0x31
    38fe:	80 81       	ld	r24, Z
    3900:	9f a9       	ldd	r25, Y+55	; 0x37
    3902:	89 2b       	or	r24, r25
    3904:	80 83       	st	Z, r24
    3906:	8c 89       	ldd	r24, Y+20	; 0x14
    3908:	9d 89       	ldd	r25, Y+21	; 0x15
    390a:	01 97       	sbiw	r24, 0x01	; 1
    390c:	92 b9       	out	0x02, r25	; 2
    390e:	ea a9       	ldd	r30, Y+50	; 0x32
    3910:	fb a9       	ldd	r31, Y+51	; 0x33
    3912:	80 81       	ld	r24, Z
    3914:	9c ad       	ldd	r25, Y+60	; 0x3c
    3916:	89 23       	and	r24, r25
    3918:	80 83       	st	Z, r24
    391a:	ea a9       	ldd	r30, Y+50	; 0x32
    391c:	fb a9       	ldd	r31, Y+51	; 0x33
    391e:	80 81       	ld	r24, Z
    3920:	98 ad       	ldd	r25, Y+56	; 0x38
    3922:	89 2b       	or	r24, r25
    3924:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:412
	writeCmdData8(HX8347G_ROWADDREND_LO,height -1);
    3926:	e8 a9       	ldd	r30, Y+48	; 0x30
    3928:	f9 a9       	ldd	r31, Y+49	; 0x31
    392a:	80 81       	ld	r24, Z
    392c:	9b ad       	ldd	r25, Y+59	; 0x3b
    392e:	89 23       	and	r24, r25
    3930:	80 83       	st	Z, r24
    3932:	89 e0       	ldi	r24, 0x09	; 9
    3934:	82 b9       	out	0x02, r24	; 2
    3936:	ea a9       	ldd	r30, Y+50	; 0x32
    3938:	fb a9       	ldd	r31, Y+51	; 0x33
    393a:	80 81       	ld	r24, Z
    393c:	9c ad       	ldd	r25, Y+60	; 0x3c
    393e:	89 23       	and	r24, r25
    3940:	80 83       	st	Z, r24
    3942:	ea a9       	ldd	r30, Y+50	; 0x32
    3944:	fb a9       	ldd	r31, Y+51	; 0x33
    3946:	80 81       	ld	r24, Z
    3948:	98 ad       	ldd	r25, Y+56	; 0x38
    394a:	89 2b       	or	r24, r25
    394c:	80 83       	st	Z, r24
    394e:	e8 a9       	ldd	r30, Y+48	; 0x30
    3950:	f9 a9       	ldd	r31, Y+49	; 0x31
    3952:	80 81       	ld	r24, Z
    3954:	9f a9       	ldd	r25, Y+55	; 0x37
    3956:	89 2b       	or	r24, r25
    3958:	80 83       	st	Z, r24
    395a:	8c 89       	ldd	r24, Y+20	; 0x14
    395c:	81 50       	subi	r24, 0x01	; 1
    395e:	82 b9       	out	0x02, r24	; 2
    3960:	ea a9       	ldd	r30, Y+50	; 0x32
    3962:	fb a9       	ldd	r31, Y+51	; 0x33
    3964:	80 81       	ld	r24, Z
    3966:	9c ad       	ldd	r25, Y+60	; 0x3c
    3968:	89 23       	and	r24, r25
    396a:	80 83       	st	Z, r24
    396c:	ea a9       	ldd	r30, Y+50	; 0x32
    396e:	fb a9       	ldd	r31, Y+51	; 0x33
    3970:	80 81       	ld	r24, Z
    3972:	98 ad       	ldd	r25, Y+56	; 0x38
    3974:	89 2b       	or	r24, r25
    3976:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:413
	CS_IDLE;
    3978:	ee a5       	ldd	r30, Y+46	; 0x2e
    397a:	ff a5       	ldd	r31, Y+47	; 0x2f
    397c:	80 81       	ld	r24, Z
    397e:	9e a9       	ldd	r25, Y+54	; 0x36
    3980:	89 2b       	or	r24, r25
    3982:	80 83       	st	Z, r24
    3984:	34 cf       	rjmp	.-408    	; 0x37ee <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1ce>

00003986 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)>:
_ZN11LCDWIKI_KBV9Draw_PixeEiij():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:610
	}
}

//set x,y  coordinate and color to draw a pixel point 
void LCDWIKI_KBV::Draw_Pixe(int16_t x, int16_t y, uint16_t color)
{
    3986:	af 92       	push	r10
    3988:	bf 92       	push	r11
    398a:	cf 92       	push	r12
    398c:	df 92       	push	r13
    398e:	ef 92       	push	r14
    3990:	ff 92       	push	r15
    3992:	0f 93       	push	r16
    3994:	1f 93       	push	r17
    3996:	cf 93       	push	r28
    3998:	df 93       	push	r29
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:611
	if((x < 0) || (y < 0) || (x > Get_Width()) || (y > Get_Height()))
    399a:	77 fd       	sbrc	r23, 7
    399c:	75 c0       	rjmp	.+234    	; 0x3a88 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
    399e:	57 fd       	sbrc	r21, 7
    39a0:	73 c0       	rjmp	.+230    	; 0x3a88 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
    39a2:	c3 2e       	mov	r12, r19
    39a4:	d2 2e       	mov	r13, r18
    39a6:	5a 01       	movw	r10, r20
    39a8:	7b 01       	movw	r14, r22
    39aa:	ec 01       	movw	r28, r24
    39ac:	e8 81       	ld	r30, Y
    39ae:	f9 81       	ldd	r31, Y+1	; 0x01
    39b0:	06 84       	ldd	r0, Z+14	; 0x0e
    39b2:	f7 85       	ldd	r31, Z+15	; 0x0f
    39b4:	e0 2d       	mov	r30, r0
    39b6:	19 95       	eicall
    39b8:	8e 15       	cp	r24, r14
    39ba:	9f 05       	cpc	r25, r15
    39bc:	0c f4       	brge	.+2      	; 0x39c0 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x3a>
    39be:	64 c0       	rjmp	.+200    	; 0x3a88 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
    39c0:	e8 81       	ld	r30, Y
    39c2:	f9 81       	ldd	r31, Y+1	; 0x01
    39c4:	04 84       	ldd	r0, Z+12	; 0x0c
    39c6:	f5 85       	ldd	r31, Z+13	; 0x0d
    39c8:	e0 2d       	mov	r30, r0
    39ca:	ce 01       	movw	r24, r28
    39cc:	19 95       	eicall
    39ce:	8a 15       	cp	r24, r10
    39d0:	9b 05       	cpc	r25, r11
    39d2:	0c f4       	brge	.+2      	; 0x39d6 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x50>
    39d4:	59 c0       	rjmp	.+178    	; 0x3a88 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:615
	{
		return;
	}
	Set_Addr_Window(x, y, x, y);
    39d6:	e8 81       	ld	r30, Y
    39d8:	f9 81       	ldd	r31, Y+1	; 0x01
    39da:	06 80       	ldd	r0, Z+6	; 0x06
    39dc:	f7 81       	ldd	r31, Z+7	; 0x07
    39de:	e0 2d       	mov	r30, r0
    39e0:	85 01       	movw	r16, r10
    39e2:	97 01       	movw	r18, r14
    39e4:	a5 01       	movw	r20, r10
    39e6:	b7 01       	movw	r22, r14
    39e8:	ce 01       	movw	r24, r28
    39ea:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:616
	CS_ACTIVE;
    39ec:	ee a5       	ldd	r30, Y+46	; 0x2e
    39ee:	ff a5       	ldd	r31, Y+47	; 0x2f
    39f0:	80 81       	ld	r24, Z
    39f2:	9a ad       	ldd	r25, Y+58	; 0x3a
    39f4:	89 23       	and	r24, r25
    39f6:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:617
	writeCmdData16(CC, color);
    39f8:	98 a1       	ldd	r25, Y+32	; 0x20
    39fa:	29 a1       	ldd	r18, Y+33	; 0x21
    39fc:	e8 a9       	ldd	r30, Y+48	; 0x30
    39fe:	f9 a9       	ldd	r31, Y+49	; 0x31
    3a00:	80 81       	ld	r24, Z
    3a02:	3b ad       	ldd	r19, Y+59	; 0x3b
    3a04:	83 23       	and	r24, r19
    3a06:	80 83       	st	Z, r24
    3a08:	22 b9       	out	0x02, r18	; 2
    3a0a:	ea a9       	ldd	r30, Y+50	; 0x32
    3a0c:	fb a9       	ldd	r31, Y+51	; 0x33
    3a0e:	80 81       	ld	r24, Z
    3a10:	2c ad       	ldd	r18, Y+60	; 0x3c
    3a12:	82 23       	and	r24, r18
    3a14:	80 83       	st	Z, r24
    3a16:	ea a9       	ldd	r30, Y+50	; 0x32
    3a18:	fb a9       	ldd	r31, Y+51	; 0x33
    3a1a:	80 81       	ld	r24, Z
    3a1c:	28 ad       	ldd	r18, Y+56	; 0x38
    3a1e:	82 2b       	or	r24, r18
    3a20:	80 83       	st	Z, r24
    3a22:	92 b9       	out	0x02, r25	; 2
    3a24:	ea a9       	ldd	r30, Y+50	; 0x32
    3a26:	fb a9       	ldd	r31, Y+51	; 0x33
    3a28:	80 81       	ld	r24, Z
    3a2a:	9c ad       	ldd	r25, Y+60	; 0x3c
    3a2c:	89 23       	and	r24, r25
    3a2e:	80 83       	st	Z, r24
    3a30:	ea a9       	ldd	r30, Y+50	; 0x32
    3a32:	fb a9       	ldd	r31, Y+51	; 0x33
    3a34:	80 81       	ld	r24, Z
    3a36:	98 ad       	ldd	r25, Y+56	; 0x38
    3a38:	89 2b       	or	r24, r25
    3a3a:	80 83       	st	Z, r24
    3a3c:	e8 a9       	ldd	r30, Y+48	; 0x30
    3a3e:	f9 a9       	ldd	r31, Y+49	; 0x31
    3a40:	80 81       	ld	r24, Z
    3a42:	9f a9       	ldd	r25, Y+55	; 0x37
    3a44:	89 2b       	or	r24, r25
    3a46:	80 83       	st	Z, r24
    3a48:	c2 b8       	out	0x02, r12	; 2
    3a4a:	ea a9       	ldd	r30, Y+50	; 0x32
    3a4c:	fb a9       	ldd	r31, Y+51	; 0x33
    3a4e:	80 81       	ld	r24, Z
    3a50:	9c ad       	ldd	r25, Y+60	; 0x3c
    3a52:	89 23       	and	r24, r25
    3a54:	80 83       	st	Z, r24
    3a56:	ea a9       	ldd	r30, Y+50	; 0x32
    3a58:	fb a9       	ldd	r31, Y+51	; 0x33
    3a5a:	80 81       	ld	r24, Z
    3a5c:	98 ad       	ldd	r25, Y+56	; 0x38
    3a5e:	89 2b       	or	r24, r25
    3a60:	80 83       	st	Z, r24
    3a62:	d2 b8       	out	0x02, r13	; 2
    3a64:	ea a9       	ldd	r30, Y+50	; 0x32
    3a66:	fb a9       	ldd	r31, Y+51	; 0x33
    3a68:	80 81       	ld	r24, Z
    3a6a:	9c ad       	ldd	r25, Y+60	; 0x3c
    3a6c:	89 23       	and	r24, r25
    3a6e:	80 83       	st	Z, r24
    3a70:	ea a9       	ldd	r30, Y+50	; 0x32
    3a72:	fb a9       	ldd	r31, Y+51	; 0x33
    3a74:	80 81       	ld	r24, Z
    3a76:	98 ad       	ldd	r25, Y+56	; 0x38
    3a78:	89 2b       	or	r24, r25
    3a7a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:618
	CS_IDLE;
    3a7c:	ee a5       	ldd	r30, Y+46	; 0x2e
    3a7e:	ff a5       	ldd	r31, Y+47	; 0x2f
    3a80:	80 81       	ld	r24, Z
    3a82:	9e a9       	ldd	r25, Y+54	; 0x36
    3a84:	89 2b       	or	r24, r25
    3a86:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:619
}
    3a88:	df 91       	pop	r29
    3a8a:	cf 91       	pop	r28
    3a8c:	1f 91       	pop	r17
    3a8e:	0f 91       	pop	r16
    3a90:	ff 90       	pop	r15
    3a92:	ef 90       	pop	r14
    3a94:	df 90       	pop	r13
    3a96:	cf 90       	pop	r12
    3a98:	bf 90       	pop	r11
    3a9a:	af 90       	pop	r10
    3a9c:	08 95       	ret

00003a9e <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)>:
_ZN11LCDWIKI_KBV9Read_GRAMEiiPjii():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:518
    return ret;
}

//read graph RAM data
int16_t LCDWIKI_KBV::Read_GRAM(int16_t x, int16_t y, uint16_t *block, int16_t w, int16_t h)
{
    3a9e:	7f 92       	push	r7
    3aa0:	8f 92       	push	r8
    3aa2:	9f 92       	push	r9
    3aa4:	af 92       	push	r10
    3aa6:	bf 92       	push	r11
    3aa8:	cf 92       	push	r12
    3aaa:	df 92       	push	r13
    3aac:	ef 92       	push	r14
    3aae:	ff 92       	push	r15
    3ab0:	0f 93       	push	r16
    3ab2:	1f 93       	push	r17
    3ab4:	cf 93       	push	r28
    3ab6:	df 93       	push	r29
    3ab8:	ec 01       	movw	r28, r24
    3aba:	59 01       	movw	r10, r18
    3abc:	98 01       	movw	r18, r16
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:520
	uint16_t ret, dummy;
    int16_t n = w * h;
    3abe:	0e 9d       	mul	r16, r14
    3ac0:	60 01       	movw	r12, r0
    3ac2:	0f 9d       	mul	r16, r15
    3ac4:	d0 0c       	add	r13, r0
    3ac6:	1e 9d       	mul	r17, r14
    3ac8:	d0 0c       	add	r13, r0
    3aca:	11 24       	eor	r1, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:522
    uint8_t r, g, b, tmp;
    Set_Addr_Window(x, y, x + w - 1, y + h - 1);
    3acc:	87 01       	movw	r16, r14
    3ace:	04 0f       	add	r16, r20
    3ad0:	15 1f       	adc	r17, r21
    3ad2:	01 50       	subi	r16, 0x01	; 1
    3ad4:	11 09       	sbc	r17, r1
    3ad6:	26 0f       	add	r18, r22
    3ad8:	37 1f       	adc	r19, r23
    3ada:	21 50       	subi	r18, 0x01	; 1
    3adc:	31 09       	sbc	r19, r1
    3ade:	e8 81       	ld	r30, Y
    3ae0:	f9 81       	ldd	r31, Y+1	; 0x01
    3ae2:	06 80       	ldd	r0, Z+6	; 0x06
    3ae4:	f7 81       	ldd	r31, Z+7	; 0x07
    3ae6:	e0 2d       	mov	r30, r0
    3ae8:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:566
            	n--;
        	}
        }
//        RD_IDLE;
        CS_IDLE;
        setWriteDir();
    3aea:	77 24       	eor	r7, r7
    3aec:	7a 94       	dec	r7
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:523
{
	uint16_t ret, dummy;
    int16_t n = w * h;
    uint8_t r, g, b, tmp;
    Set_Addr_Window(x, y, x + w - 1, y + h - 1);
    while (n > 0) 
    3aee:	1c 14       	cp	r1, r12
    3af0:	1d 04       	cpc	r1, r13
    3af2:	0c f0       	brlt	.+2      	; 0x3af6 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x58>
    3af4:	0a c1       	rjmp	.+532    	; 0x3d0a <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x26c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:525
	{
        CS_ACTIVE;
    3af6:	ee a5       	ldd	r30, Y+46	; 0x2e
    3af8:	ff a5       	ldd	r31, Y+47	; 0x2f
    3afa:	80 81       	ld	r24, Z
    3afc:	9a ad       	ldd	r25, Y+58	; 0x3a
    3afe:	89 23       	and	r24, r25
    3b00:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:526
		writeCmd16(RC);
    3b02:	e8 a9       	ldd	r30, Y+48	; 0x30
    3b04:	f9 a9       	ldd	r31, Y+49	; 0x31
    3b06:	80 81       	ld	r24, Z
    3b08:	9b ad       	ldd	r25, Y+59	; 0x3b
    3b0a:	89 23       	and	r24, r25
    3b0c:	80 83       	st	Z, r24
    3b0e:	9a a1       	ldd	r25, Y+34	; 0x22
    3b10:	8b a1       	ldd	r24, Y+35	; 0x23
    3b12:	82 b9       	out	0x02, r24	; 2
    3b14:	ea a9       	ldd	r30, Y+50	; 0x32
    3b16:	fb a9       	ldd	r31, Y+51	; 0x33
    3b18:	80 81       	ld	r24, Z
    3b1a:	2c ad       	ldd	r18, Y+60	; 0x3c
    3b1c:	82 23       	and	r24, r18
    3b1e:	80 83       	st	Z, r24
    3b20:	ea a9       	ldd	r30, Y+50	; 0x32
    3b22:	fb a9       	ldd	r31, Y+51	; 0x33
    3b24:	80 81       	ld	r24, Z
    3b26:	28 ad       	ldd	r18, Y+56	; 0x38
    3b28:	82 2b       	or	r24, r18
    3b2a:	80 83       	st	Z, r24
    3b2c:	92 b9       	out	0x02, r25	; 2
    3b2e:	ea a9       	ldd	r30, Y+50	; 0x32
    3b30:	fb a9       	ldd	r31, Y+51	; 0x33
    3b32:	80 81       	ld	r24, Z
    3b34:	9c ad       	ldd	r25, Y+60	; 0x3c
    3b36:	89 23       	and	r24, r25
    3b38:	80 83       	st	Z, r24
    3b3a:	ea a9       	ldd	r30, Y+50	; 0x32
    3b3c:	fb a9       	ldd	r31, Y+51	; 0x33
    3b3e:	80 81       	ld	r24, Z
    3b40:	98 ad       	ldd	r25, Y+56	; 0x38
    3b42:	89 2b       	or	r24, r25
    3b44:	80 83       	st	Z, r24
    3b46:	e8 a9       	ldd	r30, Y+48	; 0x30
    3b48:	f9 a9       	ldd	r31, Y+49	; 0x31
    3b4a:	80 81       	ld	r24, Z
    3b4c:	9f a9       	ldd	r25, Y+55	; 0x37
    3b4e:	89 2b       	or	r24, r25
    3b50:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:527
        setReadDir();
    3b52:	81 b1       	in	r24, 0x01	; 1
    3b54:	11 b8       	out	0x01, r1	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:528
		if(lcd_driver == ID_932X)
    3b56:	88 8d       	ldd	r24, Y+24	; 0x18
    3b58:	99 8d       	ldd	r25, Y+25	; 0x19
    3b5a:	89 2b       	or	r24, r25
    3b5c:	09 f0       	breq	.+2      	; 0x3b60 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0xc2>
    3b5e:	67 c0       	rjmp	.+206    	; 0x3c2e <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x190>
    3b60:	f5 01       	movw	r30, r10
    3b62:	c6 01       	movw	r24, r12
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:532
		{
			while(n)
			{
				for(int i =0; i< 2; i++)
    3b64:	42 e0       	ldi	r20, 0x02	; 2
    3b66:	50 e0       	ldi	r21, 0x00	; 0
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:534
				{
					read8(r);
    3b68:	ac a9       	ldd	r26, Y+52	; 0x34
    3b6a:	bd a9       	ldd	r27, Y+53	; 0x35
    3b6c:	2c 91       	ld	r18, X
    3b6e:	3d ad       	ldd	r19, Y+61	; 0x3d
    3b70:	23 23       	and	r18, r19
    3b72:	2c 93       	st	X, r18
    3b74:	20 b1       	in	r18, 0x00	; 0
    3b76:	ac a9       	ldd	r26, Y+52	; 0x34
    3b78:	bd a9       	ldd	r27, Y+53	; 0x35
    3b7a:	2c 91       	ld	r18, X
    3b7c:	39 ad       	ldd	r19, Y+57	; 0x39
    3b7e:	23 2b       	or	r18, r19
    3b80:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:535
					read8(r);
    3b82:	ac a9       	ldd	r26, Y+52	; 0x34
    3b84:	bd a9       	ldd	r27, Y+53	; 0x35
    3b86:	2c 91       	ld	r18, X
    3b88:	3d ad       	ldd	r19, Y+61	; 0x3d
    3b8a:	23 23       	and	r18, r19
    3b8c:	2c 93       	st	X, r18
    3b8e:	20 b1       	in	r18, 0x00	; 0
    3b90:	ac a9       	ldd	r26, Y+52	; 0x34
    3b92:	bd a9       	ldd	r27, Y+53	; 0x35
    3b94:	2c 91       	ld	r18, X
    3b96:	39 ad       	ldd	r19, Y+57	; 0x39
    3b98:	23 2b       	or	r18, r19
    3b9a:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:536
					read8(r);
    3b9c:	ac a9       	ldd	r26, Y+52	; 0x34
    3b9e:	bd a9       	ldd	r27, Y+53	; 0x35
    3ba0:	2c 91       	ld	r18, X
    3ba2:	3d ad       	ldd	r19, Y+61	; 0x3d
    3ba4:	23 23       	and	r18, r19
    3ba6:	2c 93       	st	X, r18
    3ba8:	20 b1       	in	r18, 0x00	; 0
    3baa:	ac a9       	ldd	r26, Y+52	; 0x34
    3bac:	bd a9       	ldd	r27, Y+53	; 0x35
    3bae:	3c 91       	ld	r19, X
    3bb0:	69 ad       	ldd	r22, Y+57	; 0x39
    3bb2:	36 2b       	or	r19, r22
    3bb4:	3c 93       	st	X, r19
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:537
					read8(g);
    3bb6:	ac a9       	ldd	r26, Y+52	; 0x34
    3bb8:	bd a9       	ldd	r27, Y+53	; 0x35
    3bba:	3c 91       	ld	r19, X
    3bbc:	6d ad       	ldd	r22, Y+61	; 0x3d
    3bbe:	36 23       	and	r19, r22
    3bc0:	3c 93       	st	X, r19
    3bc2:	60 b1       	in	r22, 0x00	; 0
    3bc4:	ac a9       	ldd	r26, Y+52	; 0x34
    3bc6:	bd a9       	ldd	r27, Y+53	; 0x35
    3bc8:	3c 91       	ld	r19, X
    3bca:	79 ad       	ldd	r23, Y+57	; 0x39
    3bcc:	37 2b       	or	r19, r23
    3bce:	3c 93       	st	X, r19
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:532
        setReadDir();
		if(lcd_driver == ID_932X)
		{
			while(n)
			{
				for(int i =0; i< 2; i++)
    3bd0:	41 30       	cpi	r20, 0x01	; 1
    3bd2:	51 05       	cpc	r21, r1
    3bd4:	49 f5       	brne	.+82     	; 0x3c28 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x18a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:539
					read8(r);
					read8(r);
					read8(r);
					read8(g);
				}
				*block++ = (r<<8 | g);
    3bd6:	32 2f       	mov	r19, r18
    3bd8:	26 2f       	mov	r18, r22
    3bda:	21 93       	st	Z+, r18
    3bdc:	31 93       	st	Z+, r19
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:540
				n--;
    3bde:	01 97       	sbiw	r24, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:530
        CS_ACTIVE;
		writeCmd16(RC);
        setReadDir();
		if(lcd_driver == ID_932X)
		{
			while(n)
    3be0:	09 f0       	breq	.+2      	; 0x3be4 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x146>
    3be2:	c0 cf       	rjmp	.-128    	; 0x3b64 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0xc6>
    3be4:	cc 0c       	add	r12, r12
    3be6:	dd 1c       	adc	r13, r13
    3be8:	ac 0c       	add	r10, r12
    3bea:	bd 1c       	adc	r11, r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:542
					read8(g);
				}
				*block++ = (r<<8 | g);
				n--;
			}
			Set_Addr_Window(0, 0, width - 1, height - 1);
    3bec:	0c 89       	ldd	r16, Y+20	; 0x14
    3bee:	1d 89       	ldd	r17, Y+21	; 0x15
    3bf0:	01 50       	subi	r16, 0x01	; 1
    3bf2:	11 09       	sbc	r17, r1
    3bf4:	2a 89       	ldd	r18, Y+18	; 0x12
    3bf6:	3b 89       	ldd	r19, Y+19	; 0x13
    3bf8:	21 50       	subi	r18, 0x01	; 1
    3bfa:	31 09       	sbc	r19, r1
    3bfc:	e8 81       	ld	r30, Y
    3bfe:	f9 81       	ldd	r31, Y+1	; 0x01
    3c00:	06 80       	ldd	r0, Z+6	; 0x06
    3c02:	f7 81       	ldd	r31, Z+7	; 0x07
    3c04:	e0 2d       	mov	r30, r0
    3c06:	50 e0       	ldi	r21, 0x00	; 0
    3c08:	40 e0       	ldi	r20, 0x00	; 0
    3c0a:	70 e0       	ldi	r23, 0x00	; 0
    3c0c:	60 e0       	ldi	r22, 0x00	; 0
    3c0e:	ce 01       	movw	r24, r28
    3c10:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:565
            	*block++ = ret;
            	n--;
        	}
        }
//        RD_IDLE;
        CS_IDLE;
    3c12:	ee a5       	ldd	r30, Y+46	; 0x2e
    3c14:	ff a5       	ldd	r31, Y+47	; 0x2f
    3c16:	80 81       	ld	r24, Z
    3c18:	9e a9       	ldd	r25, Y+54	; 0x36
    3c1a:	89 2b       	or	r24, r25
    3c1c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:566
        setWriteDir();
    3c1e:	81 b1       	in	r24, 0x01	; 1
    3c20:	71 b8       	out	0x01, r7	; 1
    3c22:	d1 2c       	mov	r13, r1
    3c24:	c1 2c       	mov	r12, r1
    3c26:	63 cf       	rjmp	.-314    	; 0x3aee <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x50>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:532
        setReadDir();
		if(lcd_driver == ID_932X)
		{
			while(n)
			{
				for(int i =0; i< 2; i++)
    3c28:	41 e0       	ldi	r20, 0x01	; 1
    3c2a:	50 e0       	ldi	r21, 0x00	; 0
    3c2c:	9d cf       	rjmp	.-198    	; 0x3b68 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0xca>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:546
			}
			Set_Addr_Window(0, 0, width - 1, height - 1);
		}
		else 
		{
			read8(r);
    3c2e:	ec a9       	ldd	r30, Y+52	; 0x34
    3c30:	fd a9       	ldd	r31, Y+53	; 0x35
    3c32:	80 81       	ld	r24, Z
    3c34:	9d ad       	ldd	r25, Y+61	; 0x3d
    3c36:	89 23       	and	r24, r25
    3c38:	80 83       	st	Z, r24
    3c3a:	80 b1       	in	r24, 0x00	; 0
    3c3c:	ec a9       	ldd	r30, Y+52	; 0x34
    3c3e:	fd a9       	ldd	r31, Y+53	; 0x35
    3c40:	80 81       	ld	r24, Z
    3c42:	99 ad       	ldd	r25, Y+57	; 0x39
    3c44:	89 2b       	or	r24, r25
    3c46:	80 83       	st	Z, r24
    3c48:	75 01       	movw	r14, r10
    3c4a:	86 01       	movw	r16, r12
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:549
        	while (n) 
			{
				if(R24BIT == 1)
    3c4c:	8c a5       	ldd	r24, Y+44	; 0x2c
    3c4e:	9d a5       	ldd	r25, Y+45	; 0x2d
    3c50:	81 30       	cpi	r24, 0x01	; 1
    3c52:	91 05       	cpc	r25, r1
    3c54:	d9 f5       	brne	.+118    	; 0x3ccc <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x22e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:551
				{
        			read8(r);
    3c56:	ec a9       	ldd	r30, Y+52	; 0x34
    3c58:	fd a9       	ldd	r31, Y+53	; 0x35
    3c5a:	80 81       	ld	r24, Z
    3c5c:	9d ad       	ldd	r25, Y+61	; 0x3d
    3c5e:	89 23       	and	r24, r25
    3c60:	80 83       	st	Z, r24
    3c62:	60 b1       	in	r22, 0x00	; 0
    3c64:	ec a9       	ldd	r30, Y+52	; 0x34
    3c66:	fd a9       	ldd	r31, Y+53	; 0x35
    3c68:	80 81       	ld	r24, Z
    3c6a:	99 ad       	ldd	r25, Y+57	; 0x39
    3c6c:	89 2b       	or	r24, r25
    3c6e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:552
         			read8(g);
    3c70:	ec a9       	ldd	r30, Y+52	; 0x34
    3c72:	fd a9       	ldd	r31, Y+53	; 0x35
    3c74:	80 81       	ld	r24, Z
    3c76:	9d ad       	ldd	r25, Y+61	; 0x3d
    3c78:	89 23       	and	r24, r25
    3c7a:	80 83       	st	Z, r24
    3c7c:	40 b1       	in	r20, 0x00	; 0
    3c7e:	ec a9       	ldd	r30, Y+52	; 0x34
    3c80:	fd a9       	ldd	r31, Y+53	; 0x35
    3c82:	80 81       	ld	r24, Z
    3c84:	99 ad       	ldd	r25, Y+57	; 0x39
    3c86:	89 2b       	or	r24, r25
    3c88:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:553
        			read8(b);
    3c8a:	ec a9       	ldd	r30, Y+52	; 0x34
    3c8c:	fd a9       	ldd	r31, Y+53	; 0x35
    3c8e:	80 81       	ld	r24, Z
    3c90:	9d ad       	ldd	r25, Y+61	; 0x3d
    3c92:	89 23       	and	r24, r25
    3c94:	80 83       	st	Z, r24
    3c96:	20 b1       	in	r18, 0x00	; 0
    3c98:	ec a9       	ldd	r30, Y+52	; 0x34
    3c9a:	fd a9       	ldd	r31, Y+53	; 0x35
    3c9c:	80 81       	ld	r24, Z
    3c9e:	99 ad       	ldd	r25, Y+57	; 0x39
    3ca0:	89 2b       	or	r24, r25
    3ca2:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:554
            		ret = Color_To_565(r, g, b);
    3ca4:	e8 81       	ld	r30, Y
    3ca6:	f9 81       	ldd	r31, Y+1	; 0x01
    3ca8:	01 90       	ld	r0, Z+
    3caa:	f0 81       	ld	r31, Z
    3cac:	e0 2d       	mov	r30, r0
    3cae:	ce 01       	movw	r24, r28
    3cb0:	19 95       	eicall
    3cb2:	4c 01       	movw	r8, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:560
				}
				else if(R24BIT == 0)
				{
					read16(ret);
				}
            	*block++ = ret;
    3cb4:	f7 01       	movw	r30, r14
    3cb6:	81 92       	st	Z+, r8
    3cb8:	91 92       	st	Z+, r9
    3cba:	7f 01       	movw	r14, r30
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:561
            	n--;
    3cbc:	01 50       	subi	r16, 0x01	; 1
    3cbe:	11 09       	sbc	r17, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:547
			Set_Addr_Window(0, 0, width - 1, height - 1);
		}
		else 
		{
			read8(r);
        	while (n) 
    3cc0:	29 f6       	brne	.-118    	; 0x3c4c <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x1ae>
    3cc2:	cc 0c       	add	r12, r12
    3cc4:	dd 1c       	adc	r13, r13
    3cc6:	ac 0c       	add	r10, r12
    3cc8:	bd 1c       	adc	r11, r13
    3cca:	a3 cf       	rjmp	.-186    	; 0x3c12 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x174>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:556
        			read8(r);
         			read8(g);
        			read8(b);
            		ret = Color_To_565(r, g, b);
				}
				else if(R24BIT == 0)
    3ccc:	89 2b       	or	r24, r25
    3cce:	91 f7       	brne	.-28     	; 0x3cb4 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x216>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:558
				{
					read16(ret);
    3cd0:	ec a9       	ldd	r30, Y+52	; 0x34
    3cd2:	fd a9       	ldd	r31, Y+53	; 0x35
    3cd4:	80 81       	ld	r24, Z
    3cd6:	9d ad       	ldd	r25, Y+61	; 0x3d
    3cd8:	89 23       	and	r24, r25
    3cda:	80 83       	st	Z, r24
    3cdc:	80 b0       	in	r8, 0x00	; 0
    3cde:	ec a9       	ldd	r30, Y+52	; 0x34
    3ce0:	fd a9       	ldd	r31, Y+53	; 0x35
    3ce2:	80 81       	ld	r24, Z
    3ce4:	99 ad       	ldd	r25, Y+57	; 0x39
    3ce6:	89 2b       	or	r24, r25
    3ce8:	80 83       	st	Z, r24
    3cea:	ec a9       	ldd	r30, Y+52	; 0x34
    3cec:	fd a9       	ldd	r31, Y+53	; 0x35
    3cee:	80 81       	ld	r24, Z
    3cf0:	9d ad       	ldd	r25, Y+61	; 0x3d
    3cf2:	89 23       	and	r24, r25
    3cf4:	80 83       	st	Z, r24
    3cf6:	90 b1       	in	r25, 0x00	; 0
    3cf8:	ec a9       	ldd	r30, Y+52	; 0x34
    3cfa:	fd a9       	ldd	r31, Y+53	; 0x35
    3cfc:	80 81       	ld	r24, Z
    3cfe:	29 ad       	ldd	r18, Y+57	; 0x39
    3d00:	82 2b       	or	r24, r18
    3d02:	80 83       	st	Z, r24
    3d04:	98 2c       	mov	r9, r8
    3d06:	89 2e       	mov	r8, r25
    3d08:	d5 cf       	rjmp	.-86     	; 0x3cb4 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x216>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:569
//        RD_IDLE;
        CS_IDLE;
        setWriteDir();
    }
	return 0;
}
    3d0a:	90 e0       	ldi	r25, 0x00	; 0
    3d0c:	80 e0       	ldi	r24, 0x00	; 0
    3d0e:	df 91       	pop	r29
    3d10:	cf 91       	pop	r28
    3d12:	1f 91       	pop	r17
    3d14:	0f 91       	pop	r16
    3d16:	ff 90       	pop	r15
    3d18:	ef 90       	pop	r14
    3d1a:	df 90       	pop	r13
    3d1c:	cf 90       	pop	r12
    3d1e:	bf 90       	pop	r11
    3d20:	af 90       	pop	r10
    3d22:	9f 90       	pop	r9
    3d24:	8f 90       	pop	r8
    3d26:	7f 90       	pop	r7
    3d28:	08 95       	ret

00003d2a <LCDWIKI_KBV::Color_To_565(unsigned char, unsigned char, unsigned char)>:
_ZN11LCDWIKI_KBV12Color_To_565Ehhh():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:487
}

//Pass 8-bit (each) R,G,B, get back 16-bit packed color
uint16_t LCDWIKI_KBV::Color_To_565(uint8_t r, uint8_t g, uint8_t b)
{
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3);
    3d2a:	38 e0       	ldi	r19, 0x08	; 8
    3d2c:	43 9f       	mul	r20, r19
    3d2e:	c0 01       	movw	r24, r0
    3d30:	11 24       	eor	r1, r1
    3d32:	80 7e       	andi	r24, 0xE0	; 224
    3d34:	97 70       	andi	r25, 0x07	; 7
    3d36:	26 95       	lsr	r18
    3d38:	26 95       	lsr	r18
    3d3a:	26 95       	lsr	r18
    3d3c:	82 2b       	or	r24, r18
    3d3e:	70 e0       	ldi	r23, 0x00	; 0
    3d40:	76 2f       	mov	r23, r22
    3d42:	66 27       	eor	r22, r22
    3d44:	66 27       	eor	r22, r22
    3d46:	78 7f       	andi	r23, 0xF8	; 248
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:488
}
    3d48:	86 2b       	or	r24, r22
    3d4a:	97 2b       	or	r25, r23
    3d4c:	08 95       	ret

00003d4e <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)>:
_ZN11LCDWIKI_KBV14Push_Any_ColorEPjibh():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:418
	CS_IDLE;
}

//push color table for 16bits
void LCDWIKI_KBV::Push_Any_Color(uint16_t * block, int16_t n, bool first, uint8_t flags)
{
    3d4e:	0f 93       	push	r16
    3d50:	cf 93       	push	r28
    3d52:	df 93       	push	r29
    3d54:	dc 01       	movw	r26, r24
    3d56:	01 70       	andi	r16, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:423
	uint16_t color;
    uint8_t h, l;
	bool isconst = flags & 1;
//	bool isbigend = (flags & 2) != 0;
    CS_ACTIVE;
    3d58:	9e 96       	adiw	r26, 0x2e	; 46
    3d5a:	ed 91       	ld	r30, X+
    3d5c:	fc 91       	ld	r31, X
    3d5e:	9f 97       	sbiw	r26, 0x2f	; 47
    3d60:	80 81       	ld	r24, Z
    3d62:	da 96       	adiw	r26, 0x3a	; 58
    3d64:	9c 91       	ld	r25, X
    3d66:	da 97       	sbiw	r26, 0x3a	; 58
    3d68:	89 23       	and	r24, r25
    3d6a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:424
    if (first) 
    3d6c:	22 23       	and	r18, r18
    3d6e:	09 f4       	brne	.+2      	; 0x3d72 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x24>
    3d70:	5b c0       	rjmp	.+182    	; 0x3e28 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xda>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:426
	{  
		if(lcd_driver == ID_932X)
    3d72:	58 96       	adiw	r26, 0x18	; 24
    3d74:	8d 91       	ld	r24, X+
    3d76:	9c 91       	ld	r25, X
    3d78:	59 97       	sbiw	r26, 0x19	; 25
    3d7a:	89 2b       	or	r24, r25
    3d7c:	49 f5       	brne	.+82     	; 0x3dd0 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x82>
    3d7e:	d0 96       	adiw	r26, 0x30	; 48
    3d80:	ed 91       	ld	r30, X+
    3d82:	fc 91       	ld	r31, X
    3d84:	d1 97       	sbiw	r26, 0x31	; 49
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:428
		{
			writeCmd8(ILI932X_START_OSC);
    3d86:	80 81       	ld	r24, Z
    3d88:	db 96       	adiw	r26, 0x3b	; 59
    3d8a:	9c 91       	ld	r25, X
    3d8c:	db 97       	sbiw	r26, 0x3b	; 59
    3d8e:	89 23       	and	r24, r25
    3d90:	80 83       	st	Z, r24
    3d92:	12 b8       	out	0x02, r1	; 2
    3d94:	d2 96       	adiw	r26, 0x32	; 50
    3d96:	ed 91       	ld	r30, X+
    3d98:	fc 91       	ld	r31, X
    3d9a:	d3 97       	sbiw	r26, 0x33	; 51
    3d9c:	80 81       	ld	r24, Z
    3d9e:	dc 96       	adiw	r26, 0x3c	; 60
    3da0:	9c 91       	ld	r25, X
    3da2:	dc 97       	sbiw	r26, 0x3c	; 60
    3da4:	89 23       	and	r24, r25
    3da6:	80 83       	st	Z, r24
    3da8:	d2 96       	adiw	r26, 0x32	; 50
    3daa:	ed 91       	ld	r30, X+
    3dac:	fc 91       	ld	r31, X
    3dae:	d3 97       	sbiw	r26, 0x33	; 51
    3db0:	80 81       	ld	r24, Z
    3db2:	d8 96       	adiw	r26, 0x38	; 56
    3db4:	9c 91       	ld	r25, X
    3db6:	d8 97       	sbiw	r26, 0x38	; 56
    3db8:	89 2b       	or	r24, r25
    3dba:	80 83       	st	Z, r24
    3dbc:	d0 96       	adiw	r26, 0x30	; 48
    3dbe:	ed 91       	ld	r30, X+
    3dc0:	fc 91       	ld	r31, X
    3dc2:	d1 97       	sbiw	r26, 0x31	; 49
    3dc4:	80 81       	ld	r24, Z
    3dc6:	d7 96       	adiw	r26, 0x37	; 55
    3dc8:	9c 91       	ld	r25, X
    3dca:	d7 97       	sbiw	r26, 0x37	; 55
    3dcc:	89 2b       	or	r24, r25
    3dce:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:431
			
		}
		writeCmd8(CC);			
    3dd0:	d0 96       	adiw	r26, 0x30	; 48
    3dd2:	ed 91       	ld	r30, X+
    3dd4:	fc 91       	ld	r31, X
    3dd6:	d1 97       	sbiw	r26, 0x31	; 49
    3dd8:	80 81       	ld	r24, Z
    3dda:	db 96       	adiw	r26, 0x3b	; 59
    3ddc:	9c 91       	ld	r25, X
    3dde:	db 97       	sbiw	r26, 0x3b	; 59
    3de0:	89 23       	and	r24, r25
    3de2:	80 83       	st	Z, r24
    3de4:	90 96       	adiw	r26, 0x20	; 32
    3de6:	8c 91       	ld	r24, X
    3de8:	90 97       	sbiw	r26, 0x20	; 32
    3dea:	82 b9       	out	0x02, r24	; 2
    3dec:	d2 96       	adiw	r26, 0x32	; 50
    3dee:	ed 91       	ld	r30, X+
    3df0:	fc 91       	ld	r31, X
    3df2:	d3 97       	sbiw	r26, 0x33	; 51
    3df4:	80 81       	ld	r24, Z
    3df6:	dc 96       	adiw	r26, 0x3c	; 60
    3df8:	9c 91       	ld	r25, X
    3dfa:	dc 97       	sbiw	r26, 0x3c	; 60
    3dfc:	89 23       	and	r24, r25
    3dfe:	80 83       	st	Z, r24
    3e00:	d2 96       	adiw	r26, 0x32	; 50
    3e02:	ed 91       	ld	r30, X+
    3e04:	fc 91       	ld	r31, X
    3e06:	d3 97       	sbiw	r26, 0x33	; 51
    3e08:	80 81       	ld	r24, Z
    3e0a:	d8 96       	adiw	r26, 0x38	; 56
    3e0c:	9c 91       	ld	r25, X
    3e0e:	d8 97       	sbiw	r26, 0x38	; 56
    3e10:	89 2b       	or	r24, r25
    3e12:	80 83       	st	Z, r24
    3e14:	d0 96       	adiw	r26, 0x30	; 48
    3e16:	ed 91       	ld	r30, X+
    3e18:	fc 91       	ld	r31, X
    3e1a:	d1 97       	sbiw	r26, 0x31	; 49
    3e1c:	80 81       	ld	r24, Z
    3e1e:	d7 96       	adiw	r26, 0x37	; 55
    3e20:	9c 91       	ld	r25, X
    3e22:	d7 97       	sbiw	r26, 0x37	; 55
    3e24:	89 2b       	or	r24, r25
    3e26:	80 83       	st	Z, r24
    3e28:	eb 01       	movw	r28, r22
    3e2a:	ca 01       	movw	r24, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:433
    }
    while (n-- > 0) 
    3e2c:	18 16       	cp	r1, r24
    3e2e:	19 06       	cpc	r1, r25
    3e30:	bc f5       	brge	.+110    	; 0x3ea0 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x152>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:435
	{
        if (isconst) 
    3e32:	00 23       	and	r16, r16
    3e34:	91 f1       	breq	.+100    	; 0x3e9a <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x14c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:437
		{
			color = pgm_read_word(block++);		
    3e36:	fe 01       	movw	r30, r28
    3e38:	45 91       	lpm	r20, Z+
    3e3a:	54 91       	lpm	r21, Z
    3e3c:	34 2f       	mov	r19, r20
    3e3e:	25 2f       	mov	r18, r21
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:444
		else 
		{
			color = (*block++);			

		}		
        writeData16(color);
    3e40:	22 b9       	out	0x02, r18	; 2
    3e42:	d2 96       	adiw	r26, 0x32	; 50
    3e44:	ed 91       	ld	r30, X+
    3e46:	fc 91       	ld	r31, X
    3e48:	d3 97       	sbiw	r26, 0x33	; 51
    3e4a:	20 81       	ld	r18, Z
    3e4c:	dc 96       	adiw	r26, 0x3c	; 60
    3e4e:	4c 91       	ld	r20, X
    3e50:	dc 97       	sbiw	r26, 0x3c	; 60
    3e52:	24 23       	and	r18, r20
    3e54:	20 83       	st	Z, r18
    3e56:	d2 96       	adiw	r26, 0x32	; 50
    3e58:	ed 91       	ld	r30, X+
    3e5a:	fc 91       	ld	r31, X
    3e5c:	d3 97       	sbiw	r26, 0x33	; 51
    3e5e:	20 81       	ld	r18, Z
    3e60:	d8 96       	adiw	r26, 0x38	; 56
    3e62:	4c 91       	ld	r20, X
    3e64:	d8 97       	sbiw	r26, 0x38	; 56
    3e66:	24 2b       	or	r18, r20
    3e68:	20 83       	st	Z, r18
    3e6a:	32 b9       	out	0x02, r19	; 2
    3e6c:	d2 96       	adiw	r26, 0x32	; 50
    3e6e:	ed 91       	ld	r30, X+
    3e70:	fc 91       	ld	r31, X
    3e72:	d3 97       	sbiw	r26, 0x33	; 51
    3e74:	20 81       	ld	r18, Z
    3e76:	dc 96       	adiw	r26, 0x3c	; 60
    3e78:	3c 91       	ld	r19, X
    3e7a:	dc 97       	sbiw	r26, 0x3c	; 60
    3e7c:	23 23       	and	r18, r19
    3e7e:	20 83       	st	Z, r18
    3e80:	d2 96       	adiw	r26, 0x32	; 50
    3e82:	ed 91       	ld	r30, X+
    3e84:	fc 91       	ld	r31, X
    3e86:	d3 97       	sbiw	r26, 0x33	; 51
    3e88:	20 81       	ld	r18, Z
    3e8a:	d8 96       	adiw	r26, 0x38	; 56
    3e8c:	3c 91       	ld	r19, X
    3e8e:	d8 97       	sbiw	r26, 0x38	; 56
    3e90:	23 2b       	or	r18, r19
    3e92:	20 83       	st	Z, r18
    3e94:	22 96       	adiw	r28, 0x02	; 2
    3e96:	01 97       	sbiw	r24, 0x01	; 1
    3e98:	c9 cf       	rjmp	.-110    	; 0x3e2c <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xde>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:441
		{
			color = pgm_read_word(block++);		
        } 
		else 
		{
			color = (*block++);			
    3e9a:	38 81       	ld	r19, Y
    3e9c:	29 81       	ldd	r18, Y+1	; 0x01
    3e9e:	d0 cf       	rjmp	.-96     	; 0x3e40 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xf2>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:446

		}		
        writeData16(color);
    }
    CS_IDLE;
    3ea0:	9e 96       	adiw	r26, 0x2e	; 46
    3ea2:	ed 91       	ld	r30, X+
    3ea4:	fc 91       	ld	r31, X
    3ea6:	9f 97       	sbiw	r26, 0x2f	; 47
    3ea8:	80 81       	ld	r24, Z
    3eaa:	d6 96       	adiw	r26, 0x36	; 54
    3eac:	9c 91       	ld	r25, X
    3eae:	89 2b       	or	r24, r25
    3eb0:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:447
}
    3eb2:	df 91       	pop	r29
    3eb4:	cf 91       	pop	r28
    3eb6:	0f 91       	pop	r16
    3eb8:	08 95       	ret

00003eba <thermostat_ring_update_pid_parameters(unsigned char)>:
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:219




void thermostat_ring_update_pid_parameters(uint8_t idx)
{
    3eba:	2f 92       	push	r2
    3ebc:	3f 92       	push	r3
    3ebe:	4f 92       	push	r4
    3ec0:	5f 92       	push	r5
    3ec2:	6f 92       	push	r6
    3ec4:	7f 92       	push	r7
    3ec6:	8f 92       	push	r8
    3ec8:	9f 92       	push	r9
    3eca:	af 92       	push	r10
    3ecc:	bf 92       	push	r11
    3ece:	cf 92       	push	r12
    3ed0:	df 92       	push	r13
    3ed2:	ef 92       	push	r14
    3ed4:	ff 92       	push	r15
    3ed6:	0f 93       	push	r16
    3ed8:	1f 93       	push	r17
    3eda:	cf 93       	push	r28
    3edc:	df 93       	push	r29
    3ede:	00 d0       	rcall	.+0      	; 0x3ee0 <thermostat_ring_update_pid_parameters(unsigned char)+0x26>
    3ee0:	00 d0       	rcall	.+0      	; 0x3ee2 <thermostat_ring_update_pid_parameters(unsigned char)+0x28>
    3ee2:	cd b7       	in	r28, 0x3d	; 61
    3ee4:	de b7       	in	r29, 0x3e	; 62
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:220
  array_pids[idx]->SetTunings(PID_p[idx], PID_i[idx], PID_d[idx]);
    3ee6:	28 2e       	mov	r2, r24
    3ee8:	31 2c       	mov	r3, r1
    3eea:	c1 01       	movw	r24, r2
    3eec:	88 0f       	add	r24, r24
    3eee:	99 1f       	adc	r25, r25
    3ef0:	e0 91 1d 0c 	lds	r30, 0x0C1D	; 0x800c1d <array_pids>
    3ef4:	f0 91 1e 0c 	lds	r31, 0x0C1E	; 0x800c1e <array_pids+0x1>
    3ef8:	e8 0f       	add	r30, r24
    3efa:	f9 1f       	adc	r31, r25
    3efc:	80 81       	ld	r24, Z
    3efe:	91 81       	ldd	r25, Z+1	; 0x01
    3f00:	9e 83       	std	Y+6, r25	; 0x06
    3f02:	8d 83       	std	Y+5, r24	; 0x05
    3f04:	81 01       	movw	r16, r2
    3f06:	00 0f       	add	r16, r16
    3f08:	11 1f       	adc	r17, r17
    3f0a:	00 0f       	add	r16, r16
    3f0c:	11 1f       	adc	r17, r17
    3f0e:	f8 01       	movw	r30, r16
    3f10:	e8 59       	subi	r30, 0x98	; 152
    3f12:	f6 4f       	sbci	r31, 0xF6	; 246
    3f14:	40 80       	ld	r4, Z
    3f16:	51 80       	ldd	r5, Z+1	; 0x01
    3f18:	62 80       	ldd	r6, Z+2	; 0x02
    3f1a:	73 80       	ldd	r7, Z+3	; 0x03
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:104
 * it's called automatically from the constructor, but tunings can also
 * be adjusted on the fly during normal operation
 ******************************************************************************/
void PID::SetTunings(double Kp, double Ki, double Kd, int POn)
{
   if (Kp<0 || Ki<0 || Kd<0) return;
    3f1c:	20 e0       	ldi	r18, 0x00	; 0
    3f1e:	30 e0       	ldi	r19, 0x00	; 0
    3f20:	a9 01       	movw	r20, r18
    3f22:	c3 01       	movw	r24, r6
    3f24:	b2 01       	movw	r22, r4
    3f26:	0e 94 67 ab 	call	0x156ce	; 0x156ce <__cmpsf2>
    3f2a:	87 fd       	sbrc	r24, 7
    3f2c:	97 c0       	rjmp	.+302    	; 0x405c <thermostat_ring_update_pid_parameters(unsigned char)+0x1a2>
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:220
    3f2e:	f8 01       	movw	r30, r16
    3f30:	e4 58       	subi	r30, 0x84	; 132
    3f32:	f6 4f       	sbci	r31, 0xF6	; 246
    3f34:	80 80       	ld	r8, Z
    3f36:	91 80       	ldd	r9, Z+1	; 0x01
    3f38:	a2 80       	ldd	r10, Z+2	; 0x02
    3f3a:	b3 80       	ldd	r11, Z+3	; 0x03
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:104
    3f3c:	20 e0       	ldi	r18, 0x00	; 0
    3f3e:	30 e0       	ldi	r19, 0x00	; 0
    3f40:	a9 01       	movw	r20, r18
    3f42:	c5 01       	movw	r24, r10
    3f44:	b4 01       	movw	r22, r8
    3f46:	0e 94 67 ab 	call	0x156ce	; 0x156ce <__cmpsf2>
    3f4a:	87 fd       	sbrc	r24, 7
    3f4c:	87 c0       	rjmp	.+270    	; 0x405c <thermostat_ring_update_pid_parameters(unsigned char)+0x1a2>
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:220
    3f4e:	f8 01       	movw	r30, r16
    3f50:	e0 57       	subi	r30, 0x70	; 112
    3f52:	f6 4f       	sbci	r31, 0xF6	; 246
    3f54:	c0 80       	ld	r12, Z
    3f56:	d1 80       	ldd	r13, Z+1	; 0x01
    3f58:	e2 80       	ldd	r14, Z+2	; 0x02
    3f5a:	f3 80       	ldd	r15, Z+3	; 0x03
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:104
    3f5c:	20 e0       	ldi	r18, 0x00	; 0
    3f5e:	30 e0       	ldi	r19, 0x00	; 0
    3f60:	a9 01       	movw	r20, r18
    3f62:	c7 01       	movw	r24, r14
    3f64:	b6 01       	movw	r22, r12
    3f66:	0e 94 67 ab 	call	0x156ce	; 0x156ce <__cmpsf2>
    3f6a:	87 fd       	sbrc	r24, 7
    3f6c:	77 c0       	rjmp	.+238    	; 0x405c <thermostat_ring_update_pid_parameters(unsigned char)+0x1a2>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:107

   pOn = POn;
   pOnE = POn == P_ON_E;
    3f6e:	81 e0       	ldi	r24, 0x01	; 1
    3f70:	ed 81       	ldd	r30, Y+5	; 0x05
    3f72:	fe 81       	ldd	r31, Y+6	; 0x06
    3f74:	22 8d       	ldd	r18, Z+26	; 0x1a
    3f76:	33 8d       	ldd	r19, Z+27	; 0x1b
    3f78:	21 30       	cpi	r18, 0x01	; 1
    3f7a:	31 05       	cpc	r19, r1
    3f7c:	09 f0       	breq	.+2      	; 0x3f80 <thermostat_ring_update_pid_parameters(unsigned char)+0xc6>
    3f7e:	80 e0       	ldi	r24, 0x00	; 0
    3f80:	ed 81       	ldd	r30, Y+5	; 0x05
    3f82:	fe 81       	ldd	r31, Y+6	; 0x06
    3f84:	83 af       	std	Z+59, r24	; 0x3b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:109

   dispKp = Kp; dispKi = Ki; dispKd = Kd;
    3f86:	40 82       	st	Z, r4
    3f88:	51 82       	std	Z+1, r5	; 0x01
    3f8a:	62 82       	std	Z+2, r6	; 0x02
    3f8c:	73 82       	std	Z+3, r7	; 0x03
    3f8e:	84 82       	std	Z+4, r8	; 0x04
    3f90:	95 82       	std	Z+5, r9	; 0x05
    3f92:	a6 82       	std	Z+6, r10	; 0x06
    3f94:	b7 82       	std	Z+7, r11	; 0x07
    3f96:	c0 86       	std	Z+8, r12	; 0x08
    3f98:	d1 86       	std	Z+9, r13	; 0x09
    3f9a:	e2 86       	std	Z+10, r14	; 0x0a
    3f9c:	f3 86       	std	Z+11, r15	; 0x0b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:111

   double SampleTimeInSec = ((double)SampleTime)/1000;
    3f9e:	66 a5       	ldd	r22, Z+46	; 0x2e
    3fa0:	77 a5       	ldd	r23, Z+47	; 0x2f
    3fa2:	80 a9       	ldd	r24, Z+48	; 0x30
    3fa4:	91 a9       	ldd	r25, Z+49	; 0x31
    3fa6:	0e 94 6c ab 	call	0x156d8	; 0x156d8 <__floatunsisf>
    3faa:	20 e0       	ldi	r18, 0x00	; 0
    3fac:	30 e0       	ldi	r19, 0x00	; 0
    3fae:	4a e7       	ldi	r20, 0x7A	; 122
    3fb0:	54 e4       	ldi	r21, 0x44	; 68
    3fb2:	0e 94 a1 ad 	call	0x15b42	; 0x15b42 <__divsf3>
    3fb6:	69 83       	std	Y+1, r22	; 0x01
    3fb8:	7a 83       	std	Y+2, r23	; 0x02
    3fba:	8b 83       	std	Y+3, r24	; 0x03
    3fbc:	9c 83       	std	Y+4, r25	; 0x04
/home/saric/Arduino/libraries/PID/PID_v1.cpp:112
   kp = Kp;
    3fbe:	ed 81       	ldd	r30, Y+5	; 0x05
    3fc0:	fe 81       	ldd	r31, Y+6	; 0x06
    3fc2:	44 86       	std	Z+12, r4	; 0x0c
    3fc4:	55 86       	std	Z+13, r5	; 0x0d
    3fc6:	66 86       	std	Z+14, r6	; 0x0e
    3fc8:	77 86       	std	Z+15, r7	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:113
   ki = Ki * SampleTimeInSec;
    3fca:	9b 01       	movw	r18, r22
    3fcc:	ac 01       	movw	r20, r24
    3fce:	c5 01       	movw	r24, r10
    3fd0:	b4 01       	movw	r22, r8
    3fd2:	0e 94 cd ab 	call	0x1579a	; 0x1579a <__mulsf3>
    3fd6:	4b 01       	movw	r8, r22
    3fd8:	5c 01       	movw	r10, r24
    3fda:	ed 81       	ldd	r30, Y+5	; 0x05
    3fdc:	fe 81       	ldd	r31, Y+6	; 0x06
    3fde:	80 8a       	std	Z+16, r8	; 0x10
    3fe0:	91 8a       	std	Z+17, r9	; 0x11
    3fe2:	a2 8a       	std	Z+18, r10	; 0x12
    3fe4:	b3 8a       	std	Z+19, r11	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:114
   kd = Kd / SampleTimeInSec;
    3fe6:	29 81       	ldd	r18, Y+1	; 0x01
    3fe8:	3a 81       	ldd	r19, Y+2	; 0x02
    3fea:	4b 81       	ldd	r20, Y+3	; 0x03
    3fec:	5c 81       	ldd	r21, Y+4	; 0x04
    3fee:	c7 01       	movw	r24, r14
    3ff0:	b6 01       	movw	r22, r12
    3ff2:	0e 94 a1 ad 	call	0x15b42	; 0x15b42 <__divsf3>
    3ff6:	6b 01       	movw	r12, r22
    3ff8:	7c 01       	movw	r14, r24
    3ffa:	ed 81       	ldd	r30, Y+5	; 0x05
    3ffc:	fe 81       	ldd	r31, Y+6	; 0x06
    3ffe:	c4 8a       	std	Z+20, r12	; 0x14
    4000:	d5 8a       	std	Z+21, r13	; 0x15
    4002:	e6 8a       	std	Z+22, r14	; 0x16
    4004:	f7 8a       	std	Z+23, r15	; 0x17
/home/saric/Arduino/libraries/PID/PID_v1.cpp:116

  if(controllerDirection == REVERSE)
    4006:	80 8d       	ldd	r24, Z+24	; 0x18
    4008:	91 8d       	ldd	r25, Z+25	; 0x19
    400a:	01 97       	sbiw	r24, 0x01	; 1
    400c:	39 f5       	brne	.+78     	; 0x405c <thermostat_ring_update_pid_parameters(unsigned char)+0x1a2>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:118
   {
      kp = (0 - kp);
    400e:	a3 01       	movw	r20, r6
    4010:	92 01       	movw	r18, r4
    4012:	60 e0       	ldi	r22, 0x00	; 0
    4014:	70 e0       	ldi	r23, 0x00	; 0
    4016:	cb 01       	movw	r24, r22
    4018:	0e 94 34 ad 	call	0x15a68	; 0x15a68 <__subsf3>
    401c:	ed 81       	ldd	r30, Y+5	; 0x05
    401e:	fe 81       	ldd	r31, Y+6	; 0x06
    4020:	64 87       	std	Z+12, r22	; 0x0c
    4022:	75 87       	std	Z+13, r23	; 0x0d
    4024:	86 87       	std	Z+14, r24	; 0x0e
    4026:	97 87       	std	Z+15, r25	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:119
      ki = (0 - ki);
    4028:	a5 01       	movw	r20, r10
    402a:	94 01       	movw	r18, r8
    402c:	60 e0       	ldi	r22, 0x00	; 0
    402e:	70 e0       	ldi	r23, 0x00	; 0
    4030:	cb 01       	movw	r24, r22
    4032:	0e 94 34 ad 	call	0x15a68	; 0x15a68 <__subsf3>
    4036:	ed 81       	ldd	r30, Y+5	; 0x05
    4038:	fe 81       	ldd	r31, Y+6	; 0x06
    403a:	60 8b       	std	Z+16, r22	; 0x10
    403c:	71 8b       	std	Z+17, r23	; 0x11
    403e:	82 8b       	std	Z+18, r24	; 0x12
    4040:	93 8b       	std	Z+19, r25	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:120
      kd = (0 - kd);
    4042:	a7 01       	movw	r20, r14
    4044:	96 01       	movw	r18, r12
    4046:	60 e0       	ldi	r22, 0x00	; 0
    4048:	70 e0       	ldi	r23, 0x00	; 0
    404a:	cb 01       	movw	r24, r22
    404c:	0e 94 34 ad 	call	0x15a68	; 0x15a68 <__subsf3>
    4050:	ed 81       	ldd	r30, Y+5	; 0x05
    4052:	fe 81       	ldd	r31, Y+6	; 0x06
    4054:	64 8b       	std	Z+20, r22	; 0x14
    4056:	75 8b       	std	Z+21, r23	; 0x15
    4058:	86 8b       	std	Z+22, r24	; 0x16
    405a:	97 8b       	std	Z+23, r25	; 0x17
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:221
  array_pids[idx]->SetSampleTime(PID_time[idx]);
    405c:	f1 01       	movw	r30, r2
    405e:	ec 55       	subi	r30, 0x5C	; 92
    4060:	f6 4f       	sbci	r31, 0xF6	; 246
    4062:	10 81       	ld	r17, Z
    4064:	61 2f       	mov	r22, r17
    4066:	70 e0       	ldi	r23, 0x00	; 0
SetSampleTime():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:136
/* SetSampleTime(...) *********************************************************
 * sets the period, in Milliseconds, at which the calculation is performed
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
   if (NewSampleTime > 0)
    4068:	61 15       	cp	r22, r1
    406a:	71 05       	cpc	r23, r1
    406c:	f1 f1       	breq	.+124    	; 0x40ea <thermostat_ring_update_pid_parameters(unsigned char)+0x230>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:138
   {
      double ratio  = (double)NewSampleTime
    406e:	07 2e       	mov	r0, r23
    4070:	00 0c       	add	r0, r0
    4072:	88 0b       	sbc	r24, r24
    4074:	99 0b       	sbc	r25, r25
    4076:	0e 94 6e ab 	call	0x156dc	; 0x156dc <__floatsisf>
    407a:	6b 01       	movw	r12, r22
    407c:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:139
                      / (double)SampleTime;
    407e:	ed 81       	ldd	r30, Y+5	; 0x05
    4080:	fe 81       	ldd	r31, Y+6	; 0x06
    4082:	66 a5       	ldd	r22, Z+46	; 0x2e
    4084:	77 a5       	ldd	r23, Z+47	; 0x2f
    4086:	80 a9       	ldd	r24, Z+48	; 0x30
    4088:	91 a9       	ldd	r25, Z+49	; 0x31
    408a:	0e 94 6c ab 	call	0x156d8	; 0x156d8 <__floatunsisf>
    408e:	9b 01       	movw	r18, r22
    4090:	ac 01       	movw	r20, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:138
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
   if (NewSampleTime > 0)
   {
      double ratio  = (double)NewSampleTime
    4092:	c7 01       	movw	r24, r14
    4094:	b6 01       	movw	r22, r12
    4096:	0e 94 a1 ad 	call	0x15b42	; 0x15b42 <__divsf3>
    409a:	6b 01       	movw	r12, r22
    409c:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:140
                      / (double)SampleTime;
      ki *= ratio;
    409e:	ac 01       	movw	r20, r24
    40a0:	9b 01       	movw	r18, r22
    40a2:	ed 81       	ldd	r30, Y+5	; 0x05
    40a4:	fe 81       	ldd	r31, Y+6	; 0x06
    40a6:	60 89       	ldd	r22, Z+16	; 0x10
    40a8:	71 89       	ldd	r23, Z+17	; 0x11
    40aa:	82 89       	ldd	r24, Z+18	; 0x12
    40ac:	93 89       	ldd	r25, Z+19	; 0x13
    40ae:	0e 94 cd ab 	call	0x1579a	; 0x1579a <__mulsf3>
    40b2:	ed 81       	ldd	r30, Y+5	; 0x05
    40b4:	fe 81       	ldd	r31, Y+6	; 0x06
    40b6:	60 8b       	std	Z+16, r22	; 0x10
    40b8:	71 8b       	std	Z+17, r23	; 0x11
    40ba:	82 8b       	std	Z+18, r24	; 0x12
    40bc:	93 8b       	std	Z+19, r25	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:141
      kd /= ratio;
    40be:	a7 01       	movw	r20, r14
    40c0:	96 01       	movw	r18, r12
    40c2:	64 89       	ldd	r22, Z+20	; 0x14
    40c4:	75 89       	ldd	r23, Z+21	; 0x15
    40c6:	86 89       	ldd	r24, Z+22	; 0x16
    40c8:	97 89       	ldd	r25, Z+23	; 0x17
    40ca:	0e 94 a1 ad 	call	0x15b42	; 0x15b42 <__divsf3>
    40ce:	ed 81       	ldd	r30, Y+5	; 0x05
    40d0:	fe 81       	ldd	r31, Y+6	; 0x06
    40d2:	64 8b       	std	Z+20, r22	; 0x14
    40d4:	75 8b       	std	Z+21, r23	; 0x15
    40d6:	86 8b       	std	Z+22, r24	; 0x16
    40d8:	97 8b       	std	Z+23, r25	; 0x17
/home/saric/Arduino/libraries/PID/PID_v1.cpp:142
      SampleTime = (unsigned long)NewSampleTime;
    40da:	81 2f       	mov	r24, r17
    40dc:	90 e0       	ldi	r25, 0x00	; 0
    40de:	b0 e0       	ldi	r27, 0x00	; 0
    40e0:	a0 e0       	ldi	r26, 0x00	; 0
    40e2:	86 a7       	std	Z+46, r24	; 0x2e
    40e4:	97 a7       	std	Z+47, r25	; 0x2f
    40e6:	a0 ab       	std	Z+48, r26	; 0x30
    40e8:	b1 ab       	std	Z+49, r27	; 0x31
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:222
}
    40ea:	26 96       	adiw	r28, 0x06	; 6
    40ec:	0f b6       	in	r0, 0x3f	; 63
    40ee:	f8 94       	cli
    40f0:	de bf       	out	0x3e, r29	; 62
    40f2:	0f be       	out	0x3f, r0	; 63
    40f4:	cd bf       	out	0x3d, r28	; 61
    40f6:	df 91       	pop	r29
    40f8:	cf 91       	pop	r28
    40fa:	1f 91       	pop	r17
    40fc:	0f 91       	pop	r16
    40fe:	ff 90       	pop	r15
    4100:	ef 90       	pop	r14
    4102:	df 90       	pop	r13
    4104:	cf 90       	pop	r12
    4106:	bf 90       	pop	r11
    4108:	af 90       	pop	r10
    410a:	9f 90       	pop	r9
    410c:	8f 90       	pop	r8
    410e:	7f 90       	pop	r7
    4110:	6f 90       	pop	r6
    4112:	5f 90       	pop	r5
    4114:	4f 90       	pop	r4
    4116:	3f 90       	pop	r3
    4118:	2f 90       	pop	r2
    411a:	08 95       	ret

0000411c <tds_compare_rom(unsigned char*, unsigned char*)>:
_Z15tds_compare_romPhS_():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:163
  }
}

/// funkce pro porovnani rom
bool tds_compare_rom(uint8_t *rom1, uint8_t *rom2)
{
    411c:	fb 01       	movw	r30, r22
    411e:	9c 01       	movw	r18, r24
    4120:	28 5f       	subi	r18, 0xF8	; 248
    4122:	3f 4f       	sbci	r19, 0xFF	; 255
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:166
  bool ret = True;
  for (uint8_t r = 0; r < 8; r++)
    if (rom1[r] != rom2[r])
    4124:	dc 01       	movw	r26, r24
    4126:	5d 91       	ld	r21, X+
    4128:	cd 01       	movw	r24, r26
    412a:	41 91       	ld	r20, Z+
    412c:	54 13       	cpse	r21, r20
    412e:	05 c0       	rjmp	.+10     	; 0x413a <tds_compare_rom(unsigned char*, unsigned char*)+0x1e>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:165

/// funkce pro porovnani rom
bool tds_compare_rom(uint8_t *rom1, uint8_t *rom2)
{
  bool ret = True;
  for (uint8_t r = 0; r < 8; r++)
    4130:	a2 17       	cp	r26, r18
    4132:	b3 07       	cpc	r27, r19
    4134:	b9 f7       	brne	.-18     	; 0x4124 <tds_compare_rom(unsigned char*, unsigned char*)+0x8>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:164
}

/// funkce pro porovnani rom
bool tds_compare_rom(uint8_t *rom1, uint8_t *rom2)
{
  bool ret = True;
    4136:	81 e0       	ldi	r24, 0x01	; 1
    4138:	08 95       	ret
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:168
  for (uint8_t r = 0; r < 8; r++)
    if (rom1[r] != rom2[r])
    {
      ret = False;
    413a:	80 e0       	ldi	r24, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:172
      break;
    }
  return ret;
}
    413c:	08 95       	ret

0000413e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE9isBetweenEccc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:265
    }
    return DeserializationError::Ok;
  }

  static inline bool isBetween(char c, char min, char max) {
    return min <= c && c <= max;
    413e:	80 33       	cpi	r24, 0x30	; 48
    4140:	9c f0       	brlt	.+38     	; 0x4168 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x2a>
    4142:	8a 33       	cpi	r24, 0x3A	; 58
    4144:	24 f0       	brlt	.+8      	; 0x414e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x10>
    4146:	8f 35       	cpi	r24, 0x5F	; 95
    4148:	24 f0       	brlt	.+8      	; 0x4152 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x14>
    414a:	8b 37       	cpi	r24, 0x7B	; 123
    414c:	24 f4       	brge	.+8      	; 0x4156 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x18>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE22canBeInNonQuotedStringEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:270
  }

  static inline bool canBeInNonQuotedString(char c) {
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
    414e:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:271
  }
    4150:	08 95       	ret
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE9isBetweenEccc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:265
    }
    return DeserializationError::Ok;
  }

  static inline bool isBetween(char c, char min, char max) {
    return min <= c && c <= max;
    4152:	81 34       	cpi	r24, 0x41	; 65
    4154:	4c f0       	brlt	.+18     	; 0x4168 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x2a>
    4156:	8b 35       	cpi	r24, 0x5B	; 91
    4158:	d4 f3       	brlt	.-12     	; 0x414e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x10>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE22canBeInNonQuotedStringEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:270
  }

  static inline bool canBeInNonQuotedString(char c) {
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
    415a:	93 ed       	ldi	r25, 0xD3	; 211
    415c:	98 0f       	add	r25, r24
    415e:	81 e0       	ldi	r24, 0x01	; 1
    4160:	92 30       	cpi	r25, 0x02	; 2
    4162:	b0 f3       	brcs	.-20     	; 0x4150 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x12>
    4164:	80 e0       	ldi	r24, 0x00	; 0
    4166:	08 95       	ret
    4168:	8b 32       	cpi	r24, 0x2B	; 43
    416a:	b9 f7       	brne	.-18     	; 0x415a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x1c>
    416c:	f0 cf       	rjmp	.-32     	; 0x414e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x10>

0000416e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE7currentEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:47
  }

 private:
  JsonDeserializer &operator=(const JsonDeserializer &);  // non-copiable

  char current() {
    416e:	fc 01       	movw	r30, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:48
    if (!_loaded) {
    4170:	80 85       	ldd	r24, Z+8	; 0x08
    4172:	81 11       	cpse	r24, r1
    4174:	0a c0       	rjmp	.+20     	; 0x418a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()+0x1c>
_ZN11ArduinoJson9Internals23UnsafeCharPointerReaderIcE4readEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/./CharPointerReader.hpp:19
 public:
  explicit UnsafeCharPointerReader(const TChar* ptr)
      : _ptr(ptr ? ptr : reinterpret_cast<const TChar*>("")) {}

  char read() {
    return static_cast<char>(*_ptr++);
    4176:	a2 81       	ldd	r26, Z+2	; 0x02
    4178:	b3 81       	ldd	r27, Z+3	; 0x03
    417a:	cd 01       	movw	r24, r26
    417c:	01 96       	adiw	r24, 0x01	; 1
    417e:	93 83       	std	Z+3, r25	; 0x03
    4180:	82 83       	std	Z+2, r24	; 0x02
    4182:	8c 91       	ld	r24, X
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE7currentEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:52
      if (_reader.ended())
        _current = 0;
      else
        _current = _reader.read();
    4184:	87 83       	std	Z+7, r24	; 0x07
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:53
      _loaded = true;
    4186:	81 e0       	ldi	r24, 0x01	; 1
    4188:	80 87       	std	Z+8, r24	; 0x08
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:56
    }
    return _current;
  }
    418a:	87 81       	ldd	r24, Z+7	; 0x07
    418c:	08 95       	ret

0000418e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:182
    if (err) return err;
    variant.set(value);
    return DeserializationError::Ok;
  }

  DeserializationError parseQuotedString(const char **result) {
    418e:	df 92       	push	r13
    4190:	ef 92       	push	r14
    4192:	ff 92       	push	r15
    4194:	0f 93       	push	r16
    4196:	1f 93       	push	r17
    4198:	cf 93       	push	r28
    419a:	df 93       	push	r29
    419c:	ec 01       	movw	r28, r24
    419e:	7b 01       	movw	r14, r22
_ZN11ArduinoJson9Internals11StringMoverIcE6StringC2EPPc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:15
template <typename TChar>
class StringMover {
 public:
  class String {
   public:
    String(TChar** ptr) : _writePtr(ptr), _startPtr(*ptr) {}
    41a0:	0c 81       	ldd	r16, Y+4	; 0x04
    41a2:	1d 81       	ldd	r17, Y+5	; 0x05
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:186
    typename remove_reference<TStringStorage>::type::String str =
        _stringStorage.startString();

    char stopChar = current();
    41a4:	0e 94 b7 20 	call	0x416e	; 0x416e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    41a8:	d8 2e       	mov	r13, r24
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    41aa:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:190

    char stopChar = current();

    move();
    for (;;) {
      char c = current();
    41ac:	ce 01       	movw	r24, r28
    41ae:	0e 94 b7 20 	call	0x416e	; 0x416e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    41b2:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:192

    move();
    for (;;) {
      char c = current();
      move();
      if (c == stopChar) break;
    41b4:	d8 16       	cp	r13, r24
    41b6:	89 f1       	breq	.+98     	; 0x421a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x8c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:194

      if (c == '\0') return DeserializationError::IncompleteInput;
    41b8:	81 11       	cpse	r24, r1
    41ba:	0a c0       	rjmp	.+20     	; 0x41d0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x42>
    41bc:	81 e0       	ldi	r24, 0x01	; 1
    41be:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:212
    }

    *result = str.c_str();
    if (*result == NULL) return DeserializationError::NoMemory;
    return DeserializationError::Ok;
  }
    41c0:	df 91       	pop	r29
    41c2:	cf 91       	pop	r28
    41c4:	1f 91       	pop	r17
    41c6:	0f 91       	pop	r16
    41c8:	ff 90       	pop	r15
    41ca:	ef 90       	pop	r14
    41cc:	df 90       	pop	r13
    41ce:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:196
      move();
      if (c == stopChar) break;

      if (c == '\0') return DeserializationError::IncompleteInput;

      if (c == '\\') {
    41d0:	8c 35       	cpi	r24, 0x5C	; 92
    41d2:	d1 f4       	brne	.+52     	; 0x4208 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x7a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:197
        c = current();
    41d4:	ce 01       	movw	r24, r28
    41d6:	0e 94 b7 20 	call	0x416e	; 0x416e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:198
        if (c == '\0') return DeserializationError::IncompleteInput;
    41da:	88 23       	and	r24, r24
    41dc:	79 f3       	breq	.-34     	; 0x41bc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x2e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:199
        if (c == 'u') return DeserializationError::NotSupported;
    41de:	85 37       	cpi	r24, 0x75	; 117
    41e0:	19 f4       	brne	.+6      	; 0x41e8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x5a>
    41e2:	84 e0       	ldi	r24, 0x04	; 4
    41e4:	90 e0       	ldi	r25, 0x00	; 0
    41e6:	ec cf       	rjmp	.-40     	; 0x41c0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:23
    return p[0];
  }

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
    const char *p = escapeTable(true);
    41e8:	e8 ee       	ldi	r30, 0xE8	; 232
    41ea:	f2 e0       	ldi	r31, 0x02	; 2
unescapeChar():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:25
    for (;;) {
      if (p[0] == '\0') return c;
    41ec:	90 81       	ld	r25, Z
    41ee:	99 23       	and	r25, r25
    41f0:	51 f0       	breq	.+20     	; 0x4206 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x78>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:26
      if (p[0] == c) return p[1];
    41f2:	89 13       	cpse	r24, r25
    41f4:	06 c0       	rjmp	.+12     	; 0x4202 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x74>
    41f6:	81 81       	ldd	r24, Z+1	; 0x01
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:202
        // replace char
        c = EscapeSequence::unescapeChar(c);
        if (c == '\0') return DeserializationError::InvalidInput;
    41f8:	81 11       	cpse	r24, r1
    41fa:	05 c0       	rjmp	.+10     	; 0x4206 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x78>
    41fc:	82 e0       	ldi	r24, 0x02	; 2
    41fe:	90 e0       	ldi	r25, 0x00	; 0
    4200:	df cf       	rjmp	.-66     	; 0x41c0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>
unescapeChar():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:27
      p += 2;
    4202:	32 96       	adiw	r30, 0x02	; 2
    4204:	f3 cf       	rjmp	.-26     	; 0x41ec <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x5e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    4206:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals11StringMoverIcE6String6appendEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:18

    void append(char c) {
      *(*_writePtr)++ = TChar(c);
    4208:	ec 81       	ldd	r30, Y+4	; 0x04
    420a:	fd 81       	ldd	r31, Y+5	; 0x05
    420c:	9f 01       	movw	r18, r30
    420e:	2f 5f       	subi	r18, 0xFF	; 255
    4210:	3f 4f       	sbci	r19, 0xFF	; 255
    4212:	3d 83       	std	Y+5, r19	; 0x05
    4214:	2c 83       	std	Y+4, r18	; 0x04
    4216:	80 83       	st	Z, r24
    4218:	c9 cf       	rjmp	.-110    	; 0x41ac <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x1e>
c_str():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:22
    }

    const char* c_str() const {
      *(*_writePtr)++ = 0;
    421a:	ec 81       	ldd	r30, Y+4	; 0x04
    421c:	fd 81       	ldd	r31, Y+5	; 0x05
    421e:	cf 01       	movw	r24, r30
    4220:	01 96       	adiw	r24, 0x01	; 1
    4222:	9d 83       	std	Y+5, r25	; 0x05
    4224:	8c 83       	std	Y+4, r24	; 0x04
    4226:	10 82       	st	Z, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:209
      }

      str.append(c);
    }

    *result = str.c_str();
    4228:	f7 01       	movw	r30, r14
    422a:	11 83       	std	Z+1, r17	; 0x01
    422c:	00 83       	st	Z, r16
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:210
    if (*result == NULL) return DeserializationError::NoMemory;
    422e:	83 e0       	ldi	r24, 0x03	; 3
    4230:	90 e0       	ldi	r25, 0x00	; 0
    4232:	01 2b       	or	r16, r17
    4234:	29 f2       	breq	.-118    	; 0x41c0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:211
    return DeserializationError::Ok;
    4236:	90 e0       	ldi	r25, 0x00	; 0
    4238:	80 e0       	ldi	r24, 0x00	; 0
    423a:	c2 cf       	rjmp	.-124    	; 0x41c0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>

0000423c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:277

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
  }

  DeserializationError skipSpacesAndComments() {
    423c:	1f 93       	push	r17
    423e:	cf 93       	push	r28
    4240:	df 93       	push	r29
    4242:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:279
    for (;;) {
      switch (current()) {
    4244:	ce 01       	movw	r24, r28
    4246:	0e 94 b7 20 	call	0x416e	; 0x416e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    424a:	8b 30       	cpi	r24, 0x0B	; 11
    424c:	3c f4       	brge	.+14     	; 0x425c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x20>
    424e:	89 30       	cpi	r24, 0x09	; 9
    4250:	5c f4       	brge	.+22     	; 0x4268 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x2c>
    4252:	88 23       	and	r24, r24
    4254:	e9 f0       	breq	.+58     	; 0x4290 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x54>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:331
              return DeserializationError::InvalidInput;
          }
          break;

        default:
          return DeserializationError::Ok;
    4256:	90 e0       	ldi	r25, 0x00	; 0
    4258:	80 e0       	ldi	r24, 0x00	; 0
    425a:	1c c0       	rjmp	.+56     	; 0x4294 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x58>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:279
    return c == '\'' || c == '\"';
  }

  DeserializationError skipSpacesAndComments() {
    for (;;) {
      switch (current()) {
    425c:	80 32       	cpi	r24, 0x20	; 32
    425e:	21 f0       	breq	.+8      	; 0x4268 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x2c>
    4260:	8f 32       	cpi	r24, 0x2F	; 47
    4262:	21 f0       	breq	.+8      	; 0x426c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x30>
    4264:	8d 30       	cpi	r24, 0x0D	; 13
    4266:	b9 f7       	brne	.-18     	; 0x4256 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x1a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    4268:	18 86       	std	Y+8, r1	; 0x08
    426a:	ec cf       	rjmp	.-40     	; 0x4244 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x8>
    426c:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:295
          continue;

        // comments
        case '/':
          move();  // skip '/'
          switch (current()) {
    426e:	ce 01       	movw	r24, r28
    4270:	0e 94 b7 20 	call	0x416e	; 0x416e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    4274:	8a 32       	cpi	r24, 0x2A	; 42
    4276:	29 f0       	breq	.+10     	; 0x4282 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x46>
    4278:	8f 32       	cpi	r24, 0x2F	; 47
    427a:	d1 f0       	breq	.+52     	; 0x42b0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x74>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:326
              }
              break;

            // not a comment, just a '/'
            default:
              return DeserializationError::InvalidInput;
    427c:	82 e0       	ldi	r24, 0x02	; 2
    427e:	90 e0       	ldi	r25, 0x00	; 0
    4280:	09 c0       	rjmp	.+18     	; 0x4294 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x58>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    4282:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:299
          move();  // skip '/'
          switch (current()) {
            // block comment
            case '*': {
              move();  // skip '*'
              bool wasStar = false;
    4284:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:301
              for (;;) {
                char c = current();
    4286:	ce 01       	movw	r24, r28
    4288:	0e 94 b7 20 	call	0x416e	; 0x416e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:302
                if (c == '\0') return DeserializationError::IncompleteInput;
    428c:	81 11       	cpse	r24, r1
    428e:	06 c0       	rjmp	.+12     	; 0x429c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x60>
    4290:	81 e0       	ldi	r24, 0x01	; 1
    4292:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:334

        default:
          return DeserializationError::Ok;
      }
    }
  }
    4294:	df 91       	pop	r29
    4296:	cf 91       	pop	r28
    4298:	1f 91       	pop	r17
    429a:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:303
              move();  // skip '*'
              bool wasStar = false;
              for (;;) {
                char c = current();
                if (c == '\0') return DeserializationError::IncompleteInput;
                if (c == '/' && wasStar) {
    429c:	8f 32       	cpi	r24, 0x2F	; 47
    429e:	11 f4       	brne	.+4      	; 0x42a4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x68>
    42a0:	11 11       	cpse	r17, r1
    42a2:	e2 cf       	rjmp	.-60     	; 0x4268 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x2c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:307
                  move();
                  break;
                }
                wasStar = c == '*';
    42a4:	11 e0       	ldi	r17, 0x01	; 1
    42a6:	8a 32       	cpi	r24, 0x2A	; 42
    42a8:	09 f0       	breq	.+2      	; 0x42ac <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x70>
    42aa:	10 e0       	ldi	r17, 0x00	; 0
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    42ac:	18 86       	std	Y+8, r1	; 0x08
    42ae:	eb cf       	rjmp	.-42     	; 0x4286 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x4a>
    42b0:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:318
            // trailing comment
            case '/':
              // no need to skip "//"
              for (;;) {
                move();
                char c = current();
    42b2:	ce 01       	movw	r24, r28
    42b4:	0e 94 b7 20 	call	0x416e	; 0x416e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:319
                if (c == '\0') return DeserializationError::IncompleteInput;
    42b8:	88 23       	and	r24, r24
    42ba:	51 f3       	breq	.-44     	; 0x4290 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x54>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:320
                if (c == '\n') break;
    42bc:	8a 30       	cpi	r24, 0x0A	; 10
    42be:	c1 f7       	brne	.-16     	; 0x42b0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x74>
    42c0:	c1 cf       	rjmp	.-126    	; 0x4244 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x8>

000042c2 <get_function_one_wire_last_index_for_menu(unsigned char)>:
_Z41get_function_one_wire_last_index_for_menuh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4575
  }
}

/// funkce, ktera vraci pocet dynamickych polozek 1w
uint8_t get_function_one_wire_last_index_for_menu(uint8_t idx)
{
    42c2:	e0 ec       	ldi	r30, 0xC0	; 192
    42c4:	f9 e0       	ldi	r31, 0x09	; 9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4576
  uint8_t active = 0;
    42c6:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4578
  for (uint8_t cnt = 0; cnt < HW_ONEWIRE_MAXROMS; cnt++)
    if (w_rom[cnt].used == 1) active++;
    42c8:	91 85       	ldd	r25, Z+9	; 0x09
    42ca:	91 30       	cpi	r25, 0x01	; 1
    42cc:	09 f4       	brne	.+2      	; 0x42d0 <get_function_one_wire_last_index_for_menu(unsigned char)+0xe>
    42ce:	8f 5f       	subi	r24, 0xFF	; 255
    42d0:	3b 96       	adiw	r30, 0x0b	; 11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4577

/// funkce, ktera vraci pocet dynamickych polozek 1w
uint8_t get_function_one_wire_last_index_for_menu(uint8_t idx)
{
  uint8_t active = 0;
  for (uint8_t cnt = 0; cnt < HW_ONEWIRE_MAXROMS; cnt++)
    42d2:	9a e0       	ldi	r25, 0x0A	; 10
    42d4:	e2 30       	cpi	r30, 0x02	; 2
    42d6:	f9 07       	cpc	r31, r25
    42d8:	b9 f7       	brne	.-18     	; 0x42c8 <get_function_one_wire_last_index_for_menu(unsigned char)+0x6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4580
    if (w_rom[cnt].used == 1) active++;
  return active;
}
    42da:	08 95       	ret

000042dc <get_function_rtds_last_index_for_menu(unsigned char, unsigned char)>:
_Z37get_function_rtds_last_index_for_menuhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4492
/// funkce vraci pocet obsazenych rtds snimacu
uint8_t get_function_rtds_last_index_for_menu(uint8_t args1, uint8_t args2)
{
  return MAX_RTDS;
  //return use_rtds;
}
    42dc:	8a e0       	ldi	r24, 0x0A	; 10
    42de:	08 95       	ret

000042e0 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
_Z18button_click_touchjjjjjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4468
  posy = (size_y - tmpy) / 4;
  show_string(str1, x + posx, y + posy, char_size, BLACK, WHITE, 0);
}
/////
bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
    42e0:	ef 92       	push	r14
    42e2:	ff 92       	push	r15
    42e4:	0f 93       	push	r16
    42e6:	1f 93       	push	r17
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1940
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
    42e8:	80 17       	cp	r24, r16
    42ea:	91 07       	cpc	r25, r17
    42ec:	74 f4       	brge	.+28     	; 0x430a <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2a>
_Z18button_click_touchjjjjjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4470
}
/////
bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
  bool ret = false;
  if (is_pressed(x, y, x + size_x, y + size_y, click_x, click_y) == true)
    42ee:	84 0f       	add	r24, r20
    42f0:	95 1f       	adc	r25, r21
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1940
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
    42f2:	08 17       	cp	r16, r24
    42f4:	19 07       	cpc	r17, r25
    42f6:	4c f4       	brge	.+18     	; 0x430a <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2a>
    42f8:	6e 15       	cp	r22, r14
    42fa:	7f 05       	cpc	r23, r15
    42fc:	34 f4       	brge	.+12     	; 0x430a <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2a>
_Z18button_click_touchjjjjjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4470
}
/////
bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
  bool ret = false;
  if (is_pressed(x, y, x + size_x, y + size_y, click_x, click_y) == true)
    42fe:	62 0f       	add	r22, r18
    4300:	73 1f       	adc	r23, r19
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1940
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
    4302:	81 e0       	ldi	r24, 0x01	; 1
    4304:	e6 16       	cp	r14, r22
    4306:	f7 06       	cpc	r15, r23
    4308:	0c f0       	brlt	.+2      	; 0x430c <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2c>
_Z18button_click_touchjjjjjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4469
  show_string(str1, x + posx, y + posy, char_size, BLACK, WHITE, 0);
}
/////
bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
  bool ret = false;
    430a:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4475
  if (is_pressed(x, y, x + size_x, y + size_y, click_x, click_y) == true)
  {
    ret = true;
  }
  return ret;
}
    430c:	1f 91       	pop	r17
    430e:	0f 91       	pop	r16
    4310:	ff 90       	pop	r15
    4312:	ef 90       	pop	r14
    4314:	08 95       	ret

00004316 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>:
_Z30process_display_element_sliderPhS_hh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4336
  if (menu_slider_data_current[args1] > menu_slider_data_min)
    menu_slider_data_current[args1]--;
}
///
void process_display_element_slider(uint8_t *start, uint8_t *stop, uint8_t args, uint8_t max_element)
{
    4316:	cf 93       	push	r28
    4318:	df 93       	push	r29
    431a:	fc 01       	movw	r30, r24
    431c:	eb 01       	movw	r28, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4337
  menu_slider_data_max = *stop;
    431e:	98 81       	ld	r25, Y
    4320:	90 93 ab 08 	sts	0x08AB, r25	; 0x8008ab <menu_slider_data_max>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4338
  menu_slider_data_min = *start;
    4324:	80 81       	ld	r24, Z
    4326:	80 93 aa 08 	sts	0x08AA, r24	; 0x8008aa <menu_slider_data_min>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4339
  menu_slider_data_max_element = max_element;
    432a:	20 93 a9 08 	sts	0x08A9, r18	; 0x8008a9 <menu_slider_data_max_element>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4341
  ///
  *start = menu_slider_data_current[args];
    432e:	a4 2f       	mov	r26, r20
    4330:	b0 e0       	ldi	r27, 0x00	; 0
    4332:	ac 55       	subi	r26, 0x5C	; 92
    4334:	b7 4f       	sbci	r27, 0xF7	; 247
    4336:	3c 91       	ld	r19, X
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4342
  if (*start + max_element > menu_slider_data_max && menu_slider_data_max - menu_slider_data_min > menu_slider_data_max_element)
    4338:	62 2f       	mov	r22, r18
    433a:	70 e0       	ldi	r23, 0x00	; 0
    433c:	49 2f       	mov	r20, r25
    433e:	50 e0       	ldi	r21, 0x00	; 0
    4340:	db 01       	movw	r26, r22
    4342:	a3 0f       	add	r26, r19
    4344:	b1 1d       	adc	r27, r1
    4346:	4a 17       	cp	r20, r26
    4348:	5b 07       	cpc	r21, r27
    434a:	6c f0       	brlt	.+26     	; 0x4366 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x50>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4341
{
  menu_slider_data_max = *stop;
  menu_slider_data_min = *start;
  menu_slider_data_max_element = max_element;
  ///
  *start = menu_slider_data_current[args];
    434c:	30 83       	st	Z, r19
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4344
  if (*start + max_element > menu_slider_data_max && menu_slider_data_max - menu_slider_data_min > menu_slider_data_max_element)
    *start = menu_slider_data_max - max_element;
  if (*start > menu_slider_data_max)
    434e:	80 81       	ld	r24, Z
    4350:	98 17       	cp	r25, r24
    4352:	08 f4       	brcc	.+2      	; 0x4356 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x40>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4345
    *start = menu_slider_data_max;
    4354:	90 83       	st	Z, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4348
  ///
  *stop = *start + max_element;
  if (menu_slider_data_max <= max_element)
    4356:	29 17       	cp	r18, r25
    4358:	78 f4       	brcc	.+30     	; 0x4378 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x62>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4347
  if (*start + max_element > menu_slider_data_max && menu_slider_data_max - menu_slider_data_min > menu_slider_data_max_element)
    *start = menu_slider_data_max - max_element;
  if (*start > menu_slider_data_max)
    *start = menu_slider_data_max;
  ///
  *stop = *start + max_element;
    435a:	80 81       	ld	r24, Z
    435c:	28 0f       	add	r18, r24
    435e:	28 83       	st	Y, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4350
  if (menu_slider_data_max <= max_element)
    *stop = menu_slider_data_max;
}
    4360:	df 91       	pop	r29
    4362:	cf 91       	pop	r28
    4364:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4342
  menu_slider_data_max = *stop;
  menu_slider_data_min = *start;
  menu_slider_data_max_element = max_element;
  ///
  *start = menu_slider_data_current[args];
  if (*start + max_element > menu_slider_data_max && menu_slider_data_max - menu_slider_data_min > menu_slider_data_max_element)
    4366:	48 1b       	sub	r20, r24
    4368:	51 09       	sbc	r21, r1
    436a:	64 17       	cp	r22, r20
    436c:	75 07       	cpc	r23, r21
    436e:	74 f7       	brge	.-36     	; 0x434c <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x36>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4343
    *start = menu_slider_data_max - max_element;
    4370:	89 2f       	mov	r24, r25
    4372:	82 1b       	sub	r24, r18
    4374:	80 83       	st	Z, r24
    4376:	eb cf       	rjmp	.-42     	; 0x434e <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x38>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4349
  if (*start > menu_slider_data_max)
    *start = menu_slider_data_max;
  ///
  *stop = *start + max_element;
  if (menu_slider_data_max <= max_element)
    *stop = menu_slider_data_max;
    4378:	98 83       	st	Y, r25
    437a:	f2 cf       	rjmp	.-28     	; 0x4360 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x4a>

0000437c <function_vertical_slider_dec(unsigned char, unsigned char)>:
_Z28function_vertical_slider_dechh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4331
    menu_slider_data_current[args1]++;
}
///
void function_vertical_slider_dec(uint8_t args1, uint8_t args2)
{
  if (menu_slider_data_current[args1] > menu_slider_data_min)
    437c:	e8 2f       	mov	r30, r24
    437e:	f0 e0       	ldi	r31, 0x00	; 0
    4380:	ec 55       	subi	r30, 0x5C	; 92
    4382:	f7 4f       	sbci	r31, 0xF7	; 247
    4384:	80 81       	ld	r24, Z
    4386:	90 91 aa 08 	lds	r25, 0x08AA	; 0x8008aa <menu_slider_data_min>
    438a:	98 17       	cp	r25, r24
    438c:	10 f4       	brcc	.+4      	; 0x4392 <function_vertical_slider_dec(unsigned char, unsigned char)+0x16>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4332
    menu_slider_data_current[args1]--;
    438e:	81 50       	subi	r24, 0x01	; 1
    4390:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4333
}
    4392:	08 95       	ret

00004394 <function_vertical_slider_inc(unsigned char, unsigned char)>:
_Z28function_vertical_slider_inchh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4325
  menu_slider_data_current[args1] = 0;
}
///
void function_vertical_slider_inc(uint8_t args1, uint8_t args2)
{
  if (menu_slider_data_current[args1] < (menu_slider_data_max - menu_slider_data_max_element))
    4394:	e8 2f       	mov	r30, r24
    4396:	f0 e0       	ldi	r31, 0x00	; 0
    4398:	ec 55       	subi	r30, 0x5C	; 92
    439a:	f7 4f       	sbci	r31, 0xF7	; 247
    439c:	80 81       	ld	r24, Z
    439e:	20 91 ab 08 	lds	r18, 0x08AB	; 0x8008ab <menu_slider_data_max>
    43a2:	90 91 a9 08 	lds	r25, 0x08A9	; 0x8008a9 <menu_slider_data_max_element>
    43a6:	29 1b       	sub	r18, r25
    43a8:	33 0b       	sbc	r19, r19
    43aa:	82 17       	cp	r24, r18
    43ac:	13 06       	cpc	r1, r19
    43ae:	14 f4       	brge	.+4      	; 0x43b4 <function_vertical_slider_inc(unsigned char, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4326
    menu_slider_data_current[args1]++;
    43b0:	8f 5f       	subi	r24, 0xFF	; 255
    43b2:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4327
}
    43b4:	08 95       	ret

000043b6 <a2d_complete(unsigned char, unsigned int)>:
_Z12a2d_completehj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3264
}
/*************************************************************************************************************************/
/////  zde resim, zpracovani zmerenych dat ///////////////////////////////////////////////////
void a2d_complete(uint8_t channel, uint16_t data)
{
  if (channel == A_PROUD) proud = data;
    43b6:	83 30       	cpi	r24, 0x03	; 3
    43b8:	41 f4       	brne	.+16     	; 0x43ca <a2d_complete(unsigned char, unsigned int)+0x14>
    43ba:	70 93 08 0a 	sts	0x0A08, r23	; 0x800a08 <proud+0x1>
    43be:	60 93 07 0a 	sts	0x0A07, r22	; 0x800a07 <proud>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3269
  if (channel == A_TRIV ) tritri = data;
  if (channel == A_PETV) petnula = data;
  if (channel == A_DVANACTV) dvanact = data;
  if (channel == A_LIGHT) light_curr = data;
  a2d_run_now = 1;
    43c2:	81 e0       	ldi	r24, 0x01	; 1
    43c4:	80 93 d3 0a 	sts	0x0AD3, r24	; 0x800ad3 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3270
}
    43c8:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3265
/*************************************************************************************************************************/
/////  zde resim, zpracovani zmerenych dat ///////////////////////////////////////////////////
void a2d_complete(uint8_t channel, uint16_t data)
{
  if (channel == A_PROUD) proud = data;
  if (channel == A_TRIV ) tritri = data;
    43ca:	86 30       	cpi	r24, 0x06	; 6
    43cc:	29 f4       	brne	.+10     	; 0x43d8 <a2d_complete(unsigned char, unsigned int)+0x22>
    43ce:	70 93 0e 0a 	sts	0x0A0E, r23	; 0x800a0e <tritri+0x1>
    43d2:	60 93 0d 0a 	sts	0x0A0D, r22	; 0x800a0d <tritri>
    43d6:	f5 cf       	rjmp	.-22     	; 0x43c2 <a2d_complete(unsigned char, unsigned int)+0xc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3266
  if (channel == A_PETV) petnula = data;
    43d8:	85 30       	cpi	r24, 0x05	; 5
    43da:	29 f4       	brne	.+10     	; 0x43e6 <a2d_complete(unsigned char, unsigned int)+0x30>
    43dc:	70 93 0c 0a 	sts	0x0A0C, r23	; 0x800a0c <petnula+0x1>
    43e0:	60 93 0b 0a 	sts	0x0A0B, r22	; 0x800a0b <petnula>
    43e4:	ee cf       	rjmp	.-36     	; 0x43c2 <a2d_complete(unsigned char, unsigned int)+0xc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3267
  if (channel == A_DVANACTV) dvanact = data;
    43e6:	84 30       	cpi	r24, 0x04	; 4
    43e8:	29 f4       	brne	.+10     	; 0x43f4 <a2d_complete(unsigned char, unsigned int)+0x3e>
    43ea:	70 93 0a 0a 	sts	0x0A0A, r23	; 0x800a0a <dvanact+0x1>
    43ee:	60 93 09 0a 	sts	0x0A09, r22	; 0x800a09 <dvanact>
    43f2:	e7 cf       	rjmp	.-50     	; 0x43c2 <a2d_complete(unsigned char, unsigned int)+0xc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3268
  if (channel == A_LIGHT) light_curr = data;
    43f4:	87 30       	cpi	r24, 0x07	; 7
    43f6:	29 f7       	brne	.-54     	; 0x43c2 <a2d_complete(unsigned char, unsigned int)+0xc>
    43f8:	70 93 d2 0a 	sts	0x0AD2, r23	; 0x800ad2 <light_curr+0x1>
    43fc:	60 93 d1 0a 	sts	0x0AD1, r22	; 0x800ad1 <light_curr>
    4400:	e0 cf       	rjmp	.-64     	; 0x43c2 <a2d_complete(unsigned char, unsigned int)+0xc>

00004402 <menu_redraw_update_temp(unsigned char, unsigned char)>:
_Z23menu_redraw_update_temphh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1903

uint8_t menu_redraw_update_temp(uint8_t args1, uint8_t args2)
{

  return 0;
}
    4402:	80 e0       	ldi	r24, 0x00	; 0
    4404:	08 95       	ret

00004406 <menu_redraw_change_term_mode(unsigned char, unsigned char)>:
_Z28menu_redraw_change_term_modehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1891
  return 0;
}

uint8_t menu_redraw_change_term_mode(uint8_t args1, uint8_t args2)
{
  if (change_term_mode == 1)
    4406:	80 91 59 08 	lds	r24, 0x0859	; 0x800859 <change_term_mode>
    440a:	81 30       	cpi	r24, 0x01	; 1
    440c:	19 f4       	brne	.+6      	; 0x4414 <menu_redraw_change_term_mode(unsigned char, unsigned char)+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1893
  {
    change_term_mode = 0;
    440e:	10 92 59 08 	sts	0x0859, r1	; 0x800859 <change_term_mode>
    4412:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1896
    return 1;
  }
  return 0;
    4414:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1897
}
    4416:	08 95       	ret

00004418 <menu_redraw_time05s(unsigned char, unsigned char)>:
_Z19menu_redraw_time05shh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1881
}


uint8_t menu_redraw_time05s(uint8_t args1, uint8_t args2)
{
  if (menu_redraw05s == 1)
    4418:	80 91 d6 0a 	lds	r24, 0x0AD6	; 0x800ad6 <menu_redraw05s>
    441c:	81 30       	cpi	r24, 0x01	; 1
    441e:	19 f4       	brne	.+6      	; 0x4426 <menu_redraw_time05s(unsigned char, unsigned char)+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1883
  {
    menu_redraw05s = 0;
    4420:	10 92 d6 0a 	sts	0x0AD6, r1	; 0x800ad6 <menu_redraw05s>
    4424:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1886
    return 1;
  }
  return 0;
    4426:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1887
}
    4428:	08 95       	ret

0000442a <click_keyboard_type(unsigned char, unsigned char)>:
_Z19click_keyboard_typehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1846
    return KEYBOARD_SIZE_CHAR_SPECIAL;
}

void click_keyboard_type(uint8_t args1, uint8_t args2)
{
  dialog_set_string_keyboard_type = args1;
    442a:	80 93 58 08 	sts	0x0858, r24	; 0x800858 <dialog_set_string_keyboard_type>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1847
}
    442e:	08 95       	ret

00004430 <get_function_keyboard_alfa_max_keys(unsigned char)>:
_Z35get_function_keyboard_alfa_max_keysh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1836
  display_element_set_string_add_char(znak);
}
/// vraci pocet prvku pro zobrazeni
uint8_t get_function_keyboard_alfa_max_keys(uint8_t idx)
{
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    4430:	80 91 58 08 	lds	r24, 0x0858	; 0x800858 <dialog_set_string_keyboard_type>
    4434:	83 30       	cpi	r24, 0x03	; 3
    4436:	08 f0       	brcs	.+2      	; 0x443a <get_function_keyboard_alfa_max_keys(unsigned char)+0xa>
    4438:	08 95       	ret
    443a:	8a e1       	ldi	r24, 0x1A	; 26
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1842
    return KEYBOARD_SIZE_CHAR_UPPER;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    return KEYBOARD_SIZE_CHAR_LOWER;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    return KEYBOARD_SIZE_CHAR_SPECIAL;
}
    443c:	08 95       	ret

0000443e <get_function_keyboard_alfa_char(unsigned char, unsigned char, char*, char*)>:
_Z31get_function_keyboard_alfa_charhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1808

/////
void get_function_keyboard_alfa_char(uint8_t args1, uint8_t args2, char *line1, char *line2)
{
  char znak;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    443e:	90 91 58 08 	lds	r25, 0x0858	; 0x800858 <dialog_set_string_keyboard_type>
    4442:	91 11       	cpse	r25, r1
    4444:	0a c0       	rjmp	.+20     	; 0x445a <get_function_keyboard_alfa_char(unsigned char, unsigned char, char*, char*)+0x1c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1809
    znak = pgm_read_byte(&keyboad_number_char_upper[args1]);
    4446:	e8 2f       	mov	r30, r24
    4448:	f0 e0       	ldi	r31, 0x00	; 0
    444a:	eb 55       	subi	r30, 0x5B	; 91
    444c:	f4 4d       	sbci	r31, 0xD4	; 212
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1813
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    znak = pgm_read_byte(&keyboad_number_char_lower[args1]);
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    znak = pgm_read_byte(&keyboad_number_char_special[args1]);
    444e:	e4 91       	lpm	r30, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1814
  line1[0] = znak;
    4450:	da 01       	movw	r26, r20
    4452:	ec 93       	st	X, r30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1815
  line2[0] = 0;
    4454:	f9 01       	movw	r30, r18
    4456:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1816
}
    4458:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1810
void get_function_keyboard_alfa_char(uint8_t args1, uint8_t args2, char *line1, char *line2)
{
  char znak;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    znak = pgm_read_byte(&keyboad_number_char_upper[args1]);
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    445a:	91 30       	cpi	r25, 0x01	; 1
    445c:	29 f4       	brne	.+10     	; 0x4468 <get_function_keyboard_alfa_char(unsigned char, unsigned char, char*, char*)+0x2a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1811
    znak = pgm_read_byte(&keyboad_number_char_lower[args1]);
    445e:	e8 2f       	mov	r30, r24
    4460:	f0 e0       	ldi	r31, 0x00	; 0
    4462:	e5 57       	subi	r30, 0x75	; 117
    4464:	f4 4d       	sbci	r31, 0xD4	; 212
    4466:	f3 cf       	rjmp	.-26     	; 0x444e <get_function_keyboard_alfa_char(unsigned char, unsigned char, char*, char*)+0x10>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1812
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    4468:	92 30       	cpi	r25, 0x02	; 2
    446a:	91 f7       	brne	.-28     	; 0x4450 <get_function_keyboard_alfa_char(unsigned char, unsigned char, char*, char*)+0x12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1813
    znak = pgm_read_byte(&keyboad_number_char_special[args1]);
    446c:	e8 2f       	mov	r30, r24
    446e:	f0 e0       	ldi	r31, 0x00	; 0
    4470:	ef 58       	subi	r30, 0x8F	; 143
    4472:	f4 4d       	sbci	r31, 0xD4	; 212
    4474:	ec cf       	rjmp	.-40     	; 0x444e <get_function_keyboard_alfa_char(unsigned char, unsigned char, char*, char*)+0x10>

00004476 <get_function_keyboard_number_char(unsigned char, unsigned char, char*, char*)>:
_Z33get_function_keyboard_number_charhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1800
   args2
*/
void get_function_keyboard_number_char(uint8_t args1, uint8_t args2, char *line1, char *line2)
{
  line1[0] = '0' + args1;
  if (args1 == 10) line1[0] = '.';
    4476:	8a 30       	cpi	r24, 0x0A	; 10
    4478:	31 f0       	breq	.+12     	; 0x4486 <get_function_keyboard_number_char(unsigned char, unsigned char, char*, char*)+0x10>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1799
   args1 - index prvku
   args2
*/
void get_function_keyboard_number_char(uint8_t args1, uint8_t args2, char *line1, char *line2)
{
  line1[0] = '0' + args1;
    447a:	80 5d       	subi	r24, 0xD0	; 208
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1800
  if (args1 == 10) line1[0] = '.';
    447c:	fa 01       	movw	r30, r20
    447e:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1801
  line2[0] = 0;
    4480:	f9 01       	movw	r30, r18
    4482:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1802
}
    4484:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1800
   args2
*/
void get_function_keyboard_number_char(uint8_t args1, uint8_t args2, char *line1, char *line2)
{
  line1[0] = '0' + args1;
  if (args1 == 10) line1[0] = '.';
    4486:	8e e2       	ldi	r24, 0x2E	; 46
    4488:	f9 cf       	rjmp	.-14     	; 0x447c <get_function_keyboard_number_char(unsigned char, unsigned char, char*, char*)+0x6>

0000448a <get_function_keyboard_number_max_keys(unsigned char)>:
_Z37get_function_keyboard_number_max_keysh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1780
//////////////////////////////////////////////////////////////////////////////////////////////////
/// funkce, ktera vraci pocet polozek dynamickeho menu
uint8_t get_function_keyboard_number_max_keys(uint8_t idx)
{
  return 11;
}
    448a:	8b e0       	ldi	r24, 0x0B	; 11
    448c:	08 95       	ret

0000448e <get_function_default_temp_max_items(unsigned char, unsigned char)>:
_Z35get_function_default_temp_max_itemshh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1772
  set_default_show_temp(args2);
}

uint8_t get_function_default_temp_max_items(uint8_t args1, uint8_t args2)
{
  return use_tds + use_rtds;
    448e:	90 91 d4 0a 	lds	r25, 0x0AD4	; 0x800ad4 <use_tds>
    4492:	80 91 d5 0a 	lds	r24, 0x0AD5	; 0x800ad5 <use_rtds>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1773
}
    4496:	89 0f       	add	r24, r25
    4498:	08 95       	ret

0000449a <get_function_budik_enabled(unsigned char)>:
_Z26get_function_budik_enabledh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1709
   funkce pro nastaveni budiku
*/
uint8_t get_function_budik_enabled(uint8_t args)
{
  return 1;
}
    449a:	81 e0       	ldi	r24, 0x01	; 1
    449c:	08 95       	ret

0000449e <display_element_dialog_set_variable_plus()>:
_Z40display_element_dialog_set_variable_plusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1591
    menu_dialog_set_variable_now = menu_dialog_set_variable_now - menu_dialog_set_variable_step;
  }
}
void display_element_dialog_set_variable_plus(void)
{
  if ((menu_dialog_set_variable_now + menu_dialog_set_variable_step) <= menu_dialog_set_variable_max)
    449e:	80 91 53 08 	lds	r24, 0x0853	; 0x800853 <menu_dialog_set_variable_step>
    44a2:	20 91 a2 08 	lds	r18, 0x08A2	; 0x8008a2 <menu_dialog_set_variable_now>
    44a6:	30 91 a3 08 	lds	r19, 0x08A3	; 0x8008a3 <menu_dialog_set_variable_now+0x1>
    44aa:	82 0f       	add	r24, r18
    44ac:	93 2f       	mov	r25, r19
    44ae:	91 1d       	adc	r25, r1
    44b0:	20 91 54 08 	lds	r18, 0x0854	; 0x800854 <menu_dialog_set_variable_max>
    44b4:	30 91 55 08 	lds	r19, 0x0855	; 0x800855 <menu_dialog_set_variable_max+0x1>
    44b8:	28 17       	cp	r18, r24
    44ba:	39 07       	cpc	r19, r25
    44bc:	24 f0       	brlt	.+8      	; 0x44c6 <display_element_dialog_set_variable_plus()+0x28>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1593
  {
    menu_dialog_set_variable_now = menu_dialog_set_variable_now + menu_dialog_set_variable_step;
    44be:	90 93 a3 08 	sts	0x08A3, r25	; 0x8008a3 <menu_dialog_set_variable_now+0x1>
    44c2:	80 93 a2 08 	sts	0x08A2, r24	; 0x8008a2 <menu_dialog_set_variable_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1595
  }
}
    44c6:	08 95       	ret

000044c8 <display_element_dialog_set_variable_minus()>:
_Z41display_element_dialog_set_variable_minusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1584
  return menu_dialog_set_variable_now;
}

void display_element_dialog_set_variable_minus(void)
{
  if (menu_dialog_set_variable_now - menu_dialog_set_variable_step >= menu_dialog_set_variable_min)
    44c8:	20 91 53 08 	lds	r18, 0x0853	; 0x800853 <menu_dialog_set_variable_step>
    44cc:	80 91 a2 08 	lds	r24, 0x08A2	; 0x8008a2 <menu_dialog_set_variable_now>
    44d0:	90 91 a3 08 	lds	r25, 0x08A3	; 0x8008a3 <menu_dialog_set_variable_now+0x1>
    44d4:	82 1b       	sub	r24, r18
    44d6:	91 09       	sbc	r25, r1
    44d8:	20 91 56 08 	lds	r18, 0x0856	; 0x800856 <menu_dialog_set_variable_min>
    44dc:	30 91 57 08 	lds	r19, 0x0857	; 0x800857 <menu_dialog_set_variable_min+0x1>
    44e0:	82 17       	cp	r24, r18
    44e2:	93 07       	cpc	r25, r19
    44e4:	24 f0       	brlt	.+8      	; 0x44ee <display_element_dialog_set_variable_minus()+0x26>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1586
  {
    menu_dialog_set_variable_now = menu_dialog_set_variable_now - menu_dialog_set_variable_step;
    44e6:	90 93 a3 08 	sts	0x08A3, r25	; 0x8008a3 <menu_dialog_set_variable_now+0x1>
    44ea:	80 93 a2 08 	sts	0x08A2, r24	; 0x8008a2 <menu_dialog_set_variable_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1588
  }
}
    44ee:	08 95       	ret

000044f0 <MenuHistoryGetMenu(unsigned char*)>:
_Z18MenuHistoryGetMenuPh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1530
{
  MenuHistory[MenuHistoryIndex] = MENU_DEFAULT_SCREEN;
}
///
Menu1 *MenuHistoryGetMenu(uint8_t *args1)
{
    44f0:	ff 92       	push	r15
    44f2:	0f 93       	push	r16
    44f4:	1f 93       	push	r17
    44f6:	cf 93       	push	r28
    44f8:	df 93       	push	r29
    44fa:	dc 01       	movw	r26, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1535
  Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
  {
    menus = &Menu_All.ListMenu1[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    44fc:	20 91 64 08 	lds	r18, 0x0864	; 0x800864 <MenuHistoryIndex>
    4500:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1532
}
///
Menu1 *MenuHistoryGetMenu(uint8_t *args1)
{
  Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
    4502:	90 e0       	ldi	r25, 0x00	; 0
    4504:	69 e5       	ldi	r22, 0x59	; 89
    4506:	75 e0       	ldi	r23, 0x05	; 5
    4508:	cc e1       	ldi	r28, 0x1C	; 28
    450a:	d2 e0       	ldi	r29, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1535
  {
    menus = &Menu_All.ListMenu1[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    450c:	89 01       	movw	r16, r18
    450e:	06 5a       	subi	r16, 0xA6	; 166
    4510:	17 4f       	sbci	r17, 0xF7	; 247
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1532
}
///
Menu1 *MenuHistoryGetMenu(uint8_t *args1)
{
  Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
    4512:	fb 01       	movw	r30, r22
    4514:	84 91       	lpm	r24, Z
    4516:	98 17       	cp	r25, r24
    4518:	e8 f4       	brcc	.+58     	; 0x4554 <MenuHistoryGetMenu(unsigned char*)+0x64>
    451a:	9c 9f       	mul	r25, r28
    451c:	a0 01       	movw	r20, r0
    451e:	9d 9f       	mul	r25, r29
    4520:	50 0d       	add	r21, r0
    4522:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1535
  {
    menus = &Menu_All.ListMenu1[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    4524:	fa 01       	movw	r30, r20
    4526:	eb 59       	subi	r30, 0x9B	; 155
    4528:	f8 4f       	sbci	r31, 0xF8	; 248
    452a:	f4 90       	lpm	r15, Z
    452c:	f8 01       	movw	r30, r16
    452e:	80 81       	ld	r24, Z
    4530:	8f 11       	cpse	r24, r15
    4532:	0e c0       	rjmp	.+28     	; 0x4550 <MenuHistoryGetMenu(unsigned char*)+0x60>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1534
Menu1 *MenuHistoryGetMenu(uint8_t *args1)
{
  Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
  {
    menus = &Menu_All.ListMenu1[idx];
    4534:	44 5a       	subi	r20, 0xA4	; 164
    4536:	5a 4f       	sbci	r21, 0xFA	; 250
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1556
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu3); idx++)
  {
    menus = &Menu_All.ListMenu3[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    {
      *args1 = Global_menu_args1[MenuHistoryIndex];
    4538:	28 5b       	subi	r18, 0xB8	; 184
    453a:	37 4f       	sbci	r19, 0xF7	; 247
    453c:	f9 01       	movw	r30, r18
    453e:	20 81       	ld	r18, Z
    4540:	2c 93       	st	X, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1562
      return menus;
    }
  }


}
    4542:	ca 01       	movw	r24, r20
    4544:	df 91       	pop	r29
    4546:	cf 91       	pop	r28
    4548:	1f 91       	pop	r17
    454a:	0f 91       	pop	r16
    454c:	ff 90       	pop	r15
    454e:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1532
}
///
Menu1 *MenuHistoryGetMenu(uint8_t *args1)
{
  Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
    4550:	9f 5f       	subi	r25, 0xFF	; 255
    4552:	df cf       	rjmp	.-66     	; 0x4512 <MenuHistoryGetMenu(unsigned char*)+0x22>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1541
    {
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu2); idx++)
    4554:	90 e0       	ldi	r25, 0x00	; 0
    4556:	6a e5       	ldi	r22, 0x5A	; 90
    4558:	75 e0       	ldi	r23, 0x05	; 5
    455a:	cc e1       	ldi	r28, 0x1C	; 28
    455c:	d2 e0       	ldi	r29, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1544
  {
    menus = &Menu_All.ListMenu2[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    455e:	89 01       	movw	r16, r18
    4560:	06 5a       	subi	r16, 0xA6	; 166
    4562:	17 4f       	sbci	r17, 0xF7	; 247
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1541
    {
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu2); idx++)
    4564:	fb 01       	movw	r30, r22
    4566:	84 91       	lpm	r24, Z
    4568:	98 17       	cp	r25, r24
    456a:	90 f4       	brcc	.+36     	; 0x4590 <MenuHistoryGetMenu(unsigned char*)+0xa0>
    456c:	9c 9f       	mul	r25, r28
    456e:	a0 01       	movw	r20, r0
    4570:	9d 9f       	mul	r25, r29
    4572:	50 0d       	add	r21, r0
    4574:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1544
  {
    menus = &Menu_All.ListMenu2[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    4576:	fa 01       	movw	r30, r20
    4578:	e3 5f       	subi	r30, 0xF3	; 243
    457a:	fb 4e       	sbci	r31, 0xEB	; 235
    457c:	f4 90       	lpm	r15, Z
    457e:	f8 01       	movw	r30, r16
    4580:	80 81       	ld	r24, Z
    4582:	8f 11       	cpse	r24, r15
    4584:	03 c0       	rjmp	.+6      	; 0x458c <MenuHistoryGetMenu(unsigned char*)+0x9c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1543
      return menus;
    }
  }
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu2); idx++)
  {
    menus = &Menu_All.ListMenu2[idx];
    4586:	4c 5f       	subi	r20, 0xFC	; 252
    4588:	5d 4e       	sbci	r21, 0xED	; 237
    458a:	d6 cf       	rjmp	.-84     	; 0x4538 <MenuHistoryGetMenu(unsigned char*)+0x48>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1541
    {
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu2); idx++)
    458c:	9f 5f       	subi	r25, 0xFF	; 255
    458e:	ea cf       	rjmp	.-44     	; 0x4564 <MenuHistoryGetMenu(unsigned char*)+0x74>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1551
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu3); idx++)
    4590:	90 e0       	ldi	r25, 0x00	; 0
    4592:	6b e5       	ldi	r22, 0x5B	; 91
    4594:	75 e0       	ldi	r23, 0x05	; 5
    4596:	cc e1       	ldi	r28, 0x1C	; 28
    4598:	d2 e0       	ldi	r29, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1554
  {
    menus = &Menu_All.ListMenu3[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    459a:	89 01       	movw	r16, r18
    459c:	06 5a       	subi	r16, 0xA6	; 166
    459e:	17 4f       	sbci	r17, 0xF7	; 247
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1551
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu3); idx++)
    45a0:	fb 01       	movw	r30, r22
    45a2:	84 91       	lpm	r24, Z
    45a4:	98 17       	cp	r25, r24
    45a6:	68 f6       	brcc	.-102    	; 0x4542 <MenuHistoryGetMenu(unsigned char*)+0x52>
    45a8:	9c 9f       	mul	r25, r28
    45aa:	a0 01       	movw	r20, r0
    45ac:	9d 9f       	mul	r25, r29
    45ae:	50 0d       	add	r21, r0
    45b0:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1554
  {
    menus = &Menu_All.ListMenu3[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    45b2:	fa 01       	movw	r30, r20
    45b4:	eb 54       	subi	r30, 0x4B	; 75
    45b6:	ff 4d       	sbci	r31, 0xDF	; 223
    45b8:	f4 90       	lpm	r15, Z
    45ba:	f8 01       	movw	r30, r16
    45bc:	80 81       	ld	r24, Z
    45be:	8f 11       	cpse	r24, r15
    45c0:	03 c0       	rjmp	.+6      	; 0x45c8 <MenuHistoryGetMenu(unsigned char*)+0xd8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1553
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu3); idx++)
  {
    menus = &Menu_All.ListMenu3[idx];
    45c2:	44 55       	subi	r20, 0x54	; 84
    45c4:	51 4e       	sbci	r21, 0xE1	; 225
    45c6:	b8 cf       	rjmp	.-144    	; 0x4538 <MenuHistoryGetMenu(unsigned char*)+0x48>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1551
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu3); idx++)
    45c8:	9f 5f       	subi	r25, 0xFF	; 255
    45ca:	ea cf       	rjmp	.-44     	; 0x45a0 <MenuHistoryGetMenu(unsigned char*)+0xb0>

000045cc <enable_redraw(unsigned char, unsigned char)>:
_Z13enable_redrawhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:988




bool enable_redraw(uint8_t mask, uint8_t data)
{
    45cc:	30 e0       	ldi	r19, 0x00	; 0
    45ce:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:992
  bool ret = false;
  for (uint8_t i = 0; i < 8; i++)
  {
    uint8_t v = (1 << i);
    45d0:	e1 e0       	ldi	r30, 0x01	; 1
    45d2:	f0 e0       	ldi	r31, 0x00	; 0
    45d4:	af 01       	movw	r20, r30
    45d6:	02 2e       	mov	r0, r18
    45d8:	01 c0       	rjmp	.+2      	; 0x45dc <enable_redraw(unsigned char, unsigned char)+0x10>
    45da:	44 0f       	add	r20, r20
    45dc:	0a 94       	dec	r0
    45de:	ea f7       	brpl	.-6      	; 0x45da <enable_redraw(unsigned char, unsigned char)+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:993
    if ( (mask & v) != 0 )
    45e0:	98 2f       	mov	r25, r24
    45e2:	94 23       	and	r25, r20
    45e4:	11 f0       	breq	.+4      	; 0x45ea <enable_redraw(unsigned char, unsigned char)+0x1e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:994
      if ( (data & v) != 0)
    45e6:	46 23       	and	r20, r22
    45e8:	39 f4       	brne	.+14     	; 0x45f8 <enable_redraw(unsigned char, unsigned char)+0x2c>
    45ea:	2f 5f       	subi	r18, 0xFF	; 255
    45ec:	3f 4f       	sbci	r19, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:990


bool enable_redraw(uint8_t mask, uint8_t data)
{
  bool ret = false;
  for (uint8_t i = 0; i < 8; i++)
    45ee:	28 30       	cpi	r18, 0x08	; 8
    45f0:	31 05       	cpc	r19, r1
    45f2:	81 f7       	brne	.-32     	; 0x45d4 <enable_redraw(unsigned char, unsigned char)+0x8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:989



bool enable_redraw(uint8_t mask, uint8_t data)
{
  bool ret = false;
    45f4:	80 e0       	ldi	r24, 0x00	; 0
    45f6:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:996
  {
    uint8_t v = (1 << i);
    if ( (mask & v) != 0 )
      if ( (data & v) != 0)
      {
        ret = true;
    45f8:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1001
        break;
      }
  }
  return ret;
}
    45fa:	08 95       	ret

000045fc <returnnullfceargs(unsigned int, unsigned int)>:
_Z17returnnullfceargsjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:975

void nullfce(void) {};
void nullfceargs(uint16_t args1, uint16_t args2) {};
uint8_t returnnullfceargs(uint16_t args1, uint16_t args2) {
  return 0;
}
    45fc:	80 e0       	ldi	r24, 0x00	; 0
    45fe:	08 95       	ret

00004600 <nullfce()>:
_Z7nullfcev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:971





void nullfce(void) {};
    4600:	08 95       	ret

00004602 <ArduinoJson::Internals::StaticMemoryPoolBase::alloc(unsigned int)>:
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5allocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:57
  size_t size() const {
    return _size;
  }

  // Allocates the specified amount of bytes in the memoryPool
  virtual void* alloc(size_t bytes) {
    4602:	fc 01       	movw	r30, r24
_ZNK11ArduinoJson9Internals20StaticMemoryPoolBase8canAllocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:82
  void alignNextAlloc() {
    _size = round_size_up(_size);
  }

  bool canAlloc(size_t bytes) const {
    return _size + bytes <= _capacity;
    4604:	86 81       	ldd	r24, Z+6	; 0x06
    4606:	97 81       	ldd	r25, Z+7	; 0x07
    4608:	68 0f       	add	r22, r24
    460a:	79 1f       	adc	r23, r25
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5allocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:59
  }

  // Allocates the specified amount of bytes in the memoryPool
  virtual void* alloc(size_t bytes) {
    alignNextAlloc();
    if (!canAlloc(bytes)) return NULL;
    460c:	24 81       	ldd	r18, Z+4	; 0x04
    460e:	35 81       	ldd	r19, Z+5	; 0x05
    4610:	26 17       	cp	r18, r22
    4612:	37 07       	cpc	r19, r23
    4614:	38 f0       	brcs	.+14     	; 0x4624 <ArduinoJson::Internals::StaticMemoryPoolBase::alloc(unsigned int)+0x22>
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase7doAllocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:86
  bool canAlloc(size_t bytes) const {
    return _size + bytes <= _capacity;
  }

  void* doAlloc(size_t bytes) {
    void* p = &_buffer[_size];
    4616:	22 81       	ldd	r18, Z+2	; 0x02
    4618:	33 81       	ldd	r19, Z+3	; 0x03
    461a:	82 0f       	add	r24, r18
    461c:	93 1f       	adc	r25, r19
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:87
    _size += bytes;
    461e:	77 83       	std	Z+7, r23	; 0x07
    4620:	66 83       	std	Z+6, r22	; 0x06
    4622:	08 95       	ret
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5allocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:59
  }

  // Allocates the specified amount of bytes in the memoryPool
  virtual void* alloc(size_t bytes) {
    alignNextAlloc();
    if (!canAlloc(bytes)) return NULL;
    4624:	90 e0       	ldi	r25, 0x00	; 0
    4626:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:61
    return doAlloc(bytes);
  }
    4628:	08 95       	ret

0000462a <EthernetClient::connected()>:
_ZN14EthernetClient9connectedEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:146

  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
    462a:	cf 93       	push	r28
    462c:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:147
  if (_sock == MAX_SOCK_NUM) return 0;
    462e:	fc 01       	movw	r30, r24
    4630:	24 85       	ldd	r18, Z+12	; 0x0c
    4632:	28 30       	cpi	r18, 0x08	; 8
    4634:	d9 f0       	breq	.+54     	; 0x466c <EthernetClient::connected()+0x42>
    4636:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:149
  
  uint8_t s = status();
    4638:	0e 94 ad 93 	call	0x1275a	; 0x1275a <EthernetClient::status()>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:150
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    463c:	84 31       	cpi	r24, 0x14	; 20
    463e:	89 f0       	breq	.+34     	; 0x4662 <EthernetClient::connected()+0x38>
    4640:	88 23       	and	r24, r24
    4642:	79 f0       	breq	.+30     	; 0x4662 <EthernetClient::connected()+0x38>
    4644:	88 31       	cpi	r24, 0x18	; 24
    4646:	69 f0       	breq	.+26     	; 0x4662 <EthernetClient::connected()+0x38>
    4648:	21 e0       	ldi	r18, 0x01	; 1
    464a:	8c 31       	cpi	r24, 0x1C	; 28
    464c:	59 f4       	brne	.+22     	; 0x4664 <EthernetClient::connected()+0x3a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:151
    (s == SnSR::CLOSE_WAIT && !available()));
    464e:	e8 81       	ld	r30, Y
    4650:	f9 81       	ldd	r31, Y+1	; 0x01
    4652:	00 84       	ldd	r0, Z+8	; 0x08
    4654:	f1 85       	ldd	r31, Z+9	; 0x09
    4656:	e0 2d       	mov	r30, r0
    4658:	ce 01       	movw	r24, r28
    465a:	19 95       	eicall
    465c:	21 e0       	ldi	r18, 0x01	; 1
    465e:	89 2b       	or	r24, r25
    4660:	09 f4       	brne	.+2      	; 0x4664 <EthernetClient::connected()+0x3a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:150

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
  
  uint8_t s = status();
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    4662:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:151
    (s == SnSR::CLOSE_WAIT && !available()));
    4664:	82 2f       	mov	r24, r18
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:152
}
    4666:	df 91       	pop	r29
    4668:	cf 91       	pop	r28
    466a:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:147
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
    466c:	80 e0       	ldi	r24, 0x00	; 0
    466e:	fb cf       	rjmp	.-10     	; 0x4666 <EthernetClient::connected()+0x3c>

00004670 <EthernetClient::stop()>:
_ZN14EthernetClient4stopEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:126

void EthernetClient::flush() {
  ::flush(_sock);
}

void EthernetClient::stop() {
    4670:	cf 92       	push	r12
    4672:	df 92       	push	r13
    4674:	ef 92       	push	r14
    4676:	ff 92       	push	r15
    4678:	cf 93       	push	r28
    467a:	df 93       	push	r29
    467c:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:127
  if (_sock == MAX_SOCK_NUM)
    467e:	8c 85       	ldd	r24, Y+12	; 0x0c
    4680:	88 30       	cpi	r24, 0x08	; 8
    4682:	49 f1       	breq	.+82     	; 0x46d6 <EthernetClient::stop()+0x66>
disconnect():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:94
 * @brief	This function used for disconnect the socket and parameter is "s" which represent the socket number
 * @return	1 for success else 0.
 */
void disconnect(SOCKET s)
{
  w5500.execCmdSn(s, Sock_DISCON);
    4684:	68 e0       	ldi	r22, 0x08	; 8
    4686:	70 e0       	ldi	r23, 0x00	; 0
    4688:	0e 94 61 91 	call	0x122c2	; 0x122c2 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>
_ZN14EthernetClient4stopEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:132
    return;

  // attempt to close the connection gracefully (send a FIN to other side)
  disconnect(_sock);
  unsigned long start = millis();
    468c:	0e 94 1d 85 	call	0x10a3a	; 0x10a3a <millis>
    4690:	6b 01       	movw	r12, r22
    4692:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:135

  // wait a second for the connection to close
  while (status() != SnSR::CLOSED && millis() - start < 1000)
    4694:	ce 01       	movw	r24, r28
    4696:	0e 94 ad 93 	call	0x1275a	; 0x1275a <EthernetClient::status()>
    469a:	88 23       	and	r24, r24
    469c:	91 f0       	breq	.+36     	; 0x46c2 <EthernetClient::stop()+0x52>
    469e:	0e 94 1d 85 	call	0x10a3a	; 0x10a3a <millis>
    46a2:	6c 19       	sub	r22, r12
    46a4:	7d 09       	sbc	r23, r13
    46a6:	8e 09       	sbc	r24, r14
    46a8:	9f 09       	sbc	r25, r15
    46aa:	68 3e       	cpi	r22, 0xE8	; 232
    46ac:	73 40       	sbci	r23, 0x03	; 3
    46ae:	81 05       	cpc	r24, r1
    46b0:	91 05       	cpc	r25, r1
    46b2:	38 f4       	brcc	.+14     	; 0x46c2 <EthernetClient::stop()+0x52>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:136
    delay(1);
    46b4:	61 e0       	ldi	r22, 0x01	; 1
    46b6:	70 e0       	ldi	r23, 0x00	; 0
    46b8:	80 e0       	ldi	r24, 0x00	; 0
    46ba:	90 e0       	ldi	r25, 0x00	; 0
    46bc:	0e 94 f5 83 	call	0x107ea	; 0x107ea <delay>
    46c0:	e9 cf       	rjmp	.-46     	; 0x4694 <EthernetClient::stop()+0x24>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:139

  // if it hasn't closed, close it forcefully
  if (status() != SnSR::CLOSED)
    46c2:	ce 01       	movw	r24, r28
    46c4:	0e 94 ad 93 	call	0x1275a	; 0x1275a <EthernetClient::status()>
    46c8:	88 23       	and	r24, r24
    46ca:	19 f0       	breq	.+6      	; 0x46d2 <EthernetClient::stop()+0x62>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:140
    close(_sock);
    46cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    46ce:	0e 94 c9 92 	call	0x12592	; 0x12592 <close(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:143

  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
    46d2:	88 e0       	ldi	r24, 0x08	; 8
    46d4:	8c 87       	std	Y+12, r24	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:144
}
    46d6:	df 91       	pop	r29
    46d8:	cf 91       	pop	r28
    46da:	ff 90       	pop	r15
    46dc:	ef 90       	pop	r14
    46de:	df 90       	pop	r13
    46e0:	cf 90       	pop	r12
    46e2:	08 95       	ret

000046e4 <EthernetClient::peek()>:
_ZN14EthernetClient4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:113

int EthernetClient::read(uint8_t *buf, size_t size) {
  return recv(_sock, buf, size);
}

int EthernetClient::peek() {
    46e4:	0f 93       	push	r16
    46e6:	1f 93       	push	r17
    46e8:	cf 93       	push	r28
    46ea:	df 93       	push	r29
    46ec:	1f 92       	push	r1
    46ee:	cd b7       	in	r28, 0x3d	; 61
    46f0:	de b7       	in	r29, 0x3e	; 62
    46f2:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:116
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must
  if (!available())
    46f4:	dc 01       	movw	r26, r24
    46f6:	ed 91       	ld	r30, X+
    46f8:	fc 91       	ld	r31, X
    46fa:	00 84       	ldd	r0, Z+8	; 0x08
    46fc:	f1 85       	ldd	r31, Z+9	; 0x09
    46fe:	e0 2d       	mov	r30, r0
    4700:	19 95       	eicall
    4702:	89 2b       	or	r24, r25
    4704:	91 f0       	breq	.+36     	; 0x472a <EthernetClient::peek()+0x46>
peek():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:192
 * 		
 * @return
 */
uint16_t peek(SOCKET s, uint8_t *buf)
{
  w5500.recv_data_processing(s, buf, 1, 1);
    4706:	21 e0       	ldi	r18, 0x01	; 1
    4708:	41 e0       	ldi	r20, 0x01	; 1
    470a:	50 e0       	ldi	r21, 0x00	; 0
    470c:	be 01       	movw	r22, r28
    470e:	6f 5f       	subi	r22, 0xFF	; 255
    4710:	7f 4f       	sbci	r23, 0xFF	; 255
    4712:	f8 01       	movw	r30, r16
    4714:	84 85       	ldd	r24, Z+12	; 0x0c
    4716:	0e 94 71 91 	call	0x122e2	; 0x122e2 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.24]>
_ZN14EthernetClient4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:119
    return -1;
  ::peek(_sock, &b);
  return b;
    471a:	89 81       	ldd	r24, Y+1	; 0x01
    471c:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:120
}
    471e:	0f 90       	pop	r0
    4720:	df 91       	pop	r29
    4722:	cf 91       	pop	r28
    4724:	1f 91       	pop	r17
    4726:	0f 91       	pop	r16
    4728:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:117

int EthernetClient::peek() {
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must
  if (!available())
    return -1;
    472a:	8f ef       	ldi	r24, 0xFF	; 255
    472c:	9f ef       	ldi	r25, 0xFF	; 255
    472e:	f7 cf       	rjmp	.-18     	; 0x471e <EthernetClient::peek()+0x3a>

00004730 <EthernetClient::read(unsigned char*, unsigned int)>:
_ZN14EthernetClient4readEPhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:110
    return -1;
  }
}

int EthernetClient::read(uint8_t *buf, size_t size) {
  return recv(_sock, buf, size);
    4730:	fc 01       	movw	r30, r24
    4732:	84 85       	ldd	r24, Z+12	; 0x0c
    4734:	0c 94 d7 91 	jmp	0x123ae	; 0x123ae <recv(unsigned char, unsigned char*, int)>

00004738 <EthernetClient::read()>:
_ZN14EthernetClient4readEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:95
  if (_sock != MAX_SOCK_NUM)
    return w5500.getRXReceivedSize(_sock);
  return 0;
}

int EthernetClient::read() {
    4738:	cf 93       	push	r28
    473a:	df 93       	push	r29
    473c:	1f 92       	push	r1
    473e:	cd b7       	in	r28, 0x3d	; 61
    4740:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:97
  uint8_t b;
  if ( recv(_sock, &b, 1) > 0 )
    4742:	41 e0       	ldi	r20, 0x01	; 1
    4744:	50 e0       	ldi	r21, 0x00	; 0
    4746:	be 01       	movw	r22, r28
    4748:	6f 5f       	subi	r22, 0xFF	; 255
    474a:	7f 4f       	sbci	r23, 0xFF	; 255
    474c:	fc 01       	movw	r30, r24
    474e:	84 85       	ldd	r24, Z+12	; 0x0c
    4750:	0e 94 d7 91 	call	0x123ae	; 0x123ae <recv(unsigned char, unsigned char*, int)>
    4754:	18 16       	cp	r1, r24
    4756:	19 06       	cpc	r1, r25
    4758:	34 f4       	brge	.+12     	; 0x4766 <EthernetClient::read()+0x2e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:100
  {
    // recv worked
    return b;
    475a:	89 81       	ldd	r24, Y+1	; 0x01
    475c:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:107
  else
  {
    // No data available
    return -1;
  }
}
    475e:	0f 90       	pop	r0
    4760:	df 91       	pop	r29
    4762:	cf 91       	pop	r28
    4764:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:105
    return b;
  }
  else
  {
    // No data available
    return -1;
    4766:	8f ef       	ldi	r24, 0xFF	; 255
    4768:	9f ef       	ldi	r25, 0xFF	; 255
    476a:	f9 cf       	rjmp	.-14     	; 0x475e <EthernetClient::read()+0x26>

0000476c <EthernetClient::available()>:
_ZN14EthernetClient9availableEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:90
  }
  return size;
}

int EthernetClient::available() {
  if (_sock != MAX_SOCK_NUM)
    476c:	fc 01       	movw	r30, r24
    476e:	84 85       	ldd	r24, Z+12	; 0x0c
    4770:	88 30       	cpi	r24, 0x08	; 8
    4772:	11 f0       	breq	.+4      	; 0x4778 <EthernetClient::available()+0xc>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:91
    return w5500.getRXReceivedSize(_sock);
    4774:	0c 94 d9 81 	jmp	0x103b2	; 0x103b2 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.23]>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:93
  return 0;
}
    4778:	90 e0       	ldi	r25, 0x00	; 0
    477a:	80 e0       	ldi	r24, 0x00	; 0
    477c:	08 95       	ret

0000477e <SoftSPIB::begin()>:
_ZN8SoftSPIB5beginEv():
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:15
    _ckp = 0;
    _order = MSBFIRST;
    digitalWrite(_sck, _ckp ? HIGH : LOW);
}

void SoftSPIB::begin() {
    477e:	cf 93       	push	r28
    4780:	df 93       	push	r29
    4782:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:16
    pinMode(_mosi, OUTPUT);
    4784:	61 e0       	ldi	r22, 0x01	; 1
    4786:	8c 81       	ldd	r24, Y+4	; 0x04
    4788:	0e 94 b9 83 	call	0x10772	; 0x10772 <pinMode>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:17
    pinMode(_miso, INPUT);
    478c:	60 e0       	ldi	r22, 0x00	; 0
    478e:	8b 81       	ldd	r24, Y+3	; 0x03
    4790:	0e 94 b9 83 	call	0x10772	; 0x10772 <pinMode>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:18
    pinMode(_sck, OUTPUT);
    4794:	61 e0       	ldi	r22, 0x01	; 1
    4796:	8d 81       	ldd	r24, Y+5	; 0x05
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:19
}
    4798:	df 91       	pop	r29
    479a:	cf 91       	pop	r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:18
}

void SoftSPIB::begin() {
    pinMode(_mosi, OUTPUT);
    pinMode(_miso, INPUT);
    pinMode(_sck, OUTPUT);
    479c:	0c 94 b9 83 	jmp	0x10772	; 0x10772 <pinMode>

000047a0 <get_function_budik_text_state(unsigned char, unsigned char, char*)>:
_Z29get_function_budik_text_statehhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1711
uint8_t get_function_budik_enabled(uint8_t args)
{
  return 1;
}
void get_function_budik_text_state(uint8_t args1, uint8_t args2, char *text)
{
    47a0:	ca 01       	movw	r24, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1712
  strcpy(text, "Zapnuto 06:45");
    47a2:	63 ef       	ldi	r22, 0xF3	; 243
    47a4:	72 e0       	ldi	r23, 0x02	; 2
    47a6:	0c 94 70 af 	jmp	0x15ee0	; 0x15ee0 <strcpy>

000047aa <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.28]>:
_ZN11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_.isra.28():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:294
  template <typename TStringRef>
  FORCE_INLINE JsonObject createNestedObject_impl(TStringRef key);

  // Returns the list node that matches the specified key.
  template <typename TStringRef>
  Internals::Slot* findSlot(TStringRef key) {
    47aa:	0f 93       	push	r16
    47ac:	1f 93       	push	r17
    47ae:	cf 93       	push	r28
    47b0:	df 93       	push	r29
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:295
    if (!_data) return 0;
    47b2:	00 97       	sbiw	r24, 0x00	; 0
    47b4:	01 f1       	breq	.+64     	; 0x47f6 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.28]+0x4c>
    47b6:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:296
    Internals::Slot* slot = _data->head;
    47b8:	fc 01       	movw	r30, r24
    47ba:	c0 81       	ld	r28, Z
    47bc:	d1 81       	ldd	r29, Z+1	; 0x01
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:297
    while (slot) {
    47be:	20 97       	sbiw	r28, 0x00	; 0
    47c0:	d1 f0       	breq	.+52     	; 0x47f6 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.28]+0x4c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:298
      if (Internals::makeString(key).equals(slot->key)) break;
    47c2:	6a 85       	ldd	r22, Y+10	; 0x0a
    47c4:	7b 85       	ldd	r23, Y+11	; 0x0b
equals():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/ZeroTerminatedRamString.hpp:16
 public:
  ZeroTerminatedRamString(const char* str) : _str(str) {}

  bool equals(const char* expected) const {
    const char* actual = reinterpret_cast<const char*>(_str);
    if (!actual || !expected) return actual == expected;
    47c6:	01 15       	cp	r16, r1
    47c8:	11 05       	cpc	r17, r1
    47ca:	19 f0       	breq	.+6      	; 0x47d2 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.28]+0x28>
    47cc:	61 15       	cp	r22, r1
    47ce:	71 05       	cpc	r23, r1
    47d0:	49 f4       	brne	.+18     	; 0x47e4 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.28]+0x3a>
    47d2:	06 17       	cp	r16, r22
    47d4:	17 07       	cpc	r17, r23
    47d6:	59 f4       	brne	.+22     	; 0x47ee <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.28]+0x44>
_ZN11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_.isra.28():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:302
      slot = slot->next;
    }
    return slot;
  }
    47d8:	ce 01       	movw	r24, r28
    47da:	df 91       	pop	r29
    47dc:	cf 91       	pop	r28
    47de:	1f 91       	pop	r17
    47e0:	0f 91       	pop	r16
    47e2:	08 95       	ret
equals():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/ZeroTerminatedRamString.hpp:17
    return strcmp(actual, expected) == 0;
    47e4:	c8 01       	movw	r24, r16
    47e6:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    47ea:	89 2b       	or	r24, r25
    47ec:	a9 f3       	breq	.-22     	; 0x47d8 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.28]+0x2e>
_ZN11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_.isra.28():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:299
  Internals::Slot* findSlot(TStringRef key) {
    if (!_data) return 0;
    Internals::Slot* slot = _data->head;
    while (slot) {
      if (Internals::makeString(key).equals(slot->key)) break;
      slot = slot->next;
    47ee:	0e 80       	ldd	r0, Y+6	; 0x06
    47f0:	df 81       	ldd	r29, Y+7	; 0x07
    47f2:	c0 2d       	mov	r28, r0
    47f4:	e4 cf       	rjmp	.-56     	; 0x47be <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.28]+0x14>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:295
  FORCE_INLINE JsonObject createNestedObject_impl(TStringRef key);

  // Returns the list node that matches the specified key.
  template <typename TStringRef>
  Internals::Slot* findSlot(TStringRef key) {
    if (!_data) return 0;
    47f6:	d0 e0       	ldi	r29, 0x00	; 0
    47f8:	c0 e0       	ldi	r28, 0x00	; 0
    47fa:	ee cf       	rjmp	.-36     	; 0x47d8 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.28]+0x2e>

000047fc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:28
      : _memoryPool(&memoryPool),
        _reader(reader),
        _stringStorage(stringStorage),
        _nestingLimit(nestingLimit),
        _loaded(false) {}
  DeserializationError parse(JsonVariant variant) {
    47fc:	4f 92       	push	r4
    47fe:	5f 92       	push	r5
    4800:	6f 92       	push	r6
    4802:	7f 92       	push	r7
    4804:	8f 92       	push	r8
    4806:	9f 92       	push	r9
    4808:	af 92       	push	r10
    480a:	bf 92       	push	r11
    480c:	df 92       	push	r13
    480e:	ef 92       	push	r14
    4810:	ff 92       	push	r15
    4812:	0f 93       	push	r16
    4814:	1f 93       	push	r17
    4816:	cf 93       	push	r28
    4818:	df 93       	push	r29
    481a:	cd b7       	in	r28, 0x3d	; 61
    481c:	de b7       	in	r29, 0x3e	; 62
    481e:	c4 54       	subi	r28, 0x44	; 68
    4820:	d1 09       	sbc	r29, r1
    4822:	0f b6       	in	r0, 0x3f	; 63
    4824:	f8 94       	cli
    4826:	de bf       	out	0x3e, r29	; 62
    4828:	0f be       	out	0x3f, r0	; 63
    482a:	cd bf       	out	0x3d, r28	; 61
    482c:	8c 01       	movw	r16, r24
    482e:	4a 01       	movw	r8, r20
    4830:	5b 01       	movw	r10, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:29
    DeserializationError err = skipSpacesAndComments();
    4832:	0e 94 1e 21 	call	0x423c	; 0x423c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:30
    if (err) return err;
    4836:	00 97       	sbiw	r24, 0x00	; 0
    4838:	09 f0       	breq	.+2      	; 0x483c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x40>
    483a:	b0 c0       	rjmp	.+352    	; 0x499c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1a0>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:32

    switch (current()) {
    483c:	c8 01       	movw	r24, r16
    483e:	0e 94 b7 20 	call	0x416e	; 0x416e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    4842:	75 01       	movw	r14, r10
    4844:	8b 35       	cpi	r24, 0x5B	; 91
    4846:	49 f1       	breq	.+82     	; 0x489a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x9e>
    4848:	8b 37       	cpi	r24, 0x7B	; 123
    484a:	09 f4       	brne	.+2      	; 0x484e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x52>
    484c:	d2 c0       	rjmp	.+420    	; 0x49f2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1f6>
parseValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:159
      if (err) return err;
    }
  }

  DeserializationError parseValue(JsonVariant variant) {
    if (isQuote(current())) {
    484e:	c8 01       	movw	r24, r16
    4850:	0e 94 b7 20 	call	0x416e	; 0x416e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
isQuote():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:274
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
  }

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
    4854:	87 32       	cpi	r24, 0x27	; 39
    4856:	09 f4       	brne	.+2      	; 0x485a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5e>
    4858:	eb c1       	rjmp	.+982    	; 0x4c30 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x434>
    485a:	82 32       	cpi	r24, 0x22	; 34
    485c:	09 f4       	brne	.+2      	; 0x4860 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x64>
    485e:	e8 c1       	rjmp	.+976    	; 0x4c30 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x434>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:240

  DeserializationError parseNumericValue(JsonVariant result) {
    char buffer[64];
    uint8_t n = 0;

    char c = current();
    4860:	c8 01       	movw	r24, r16
    4862:	0e 94 b7 20 	call	0x416e	; 0x416e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    4866:	b8 2e       	mov	r11, r24
    4868:	ce 01       	movw	r24, r28
    486a:	01 96       	adiw	r24, 0x01	; 1
    486c:	4c 01       	movw	r8, r24
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:238
    return DeserializationError::Ok;
  }

  DeserializationError parseNumericValue(JsonVariant result) {
    char buffer[64];
    uint8_t n = 0;
    486e:	d1 2c       	mov	r13, r1
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:241

    char c = current();
    while (canBeInNonQuotedString(c) && n < 63) {
    4870:	8b 2d       	mov	r24, r11
    4872:	0e 94 9f 20 	call	0x413e	; 0x413e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>
    4876:	88 23       	and	r24, r24
    4878:	09 f4       	brne	.+2      	; 0x487c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x80>
    487a:	f5 c1       	rjmp	.+1002   	; 0x4c66 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x46a>
    487c:	bf e3       	ldi	r27, 0x3F	; 63
    487e:	db 16       	cp	r13, r27
    4880:	09 f4       	brne	.+2      	; 0x4884 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x88>
    4882:	f1 c1       	rjmp	.+994    	; 0x4c66 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x46a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    4884:	f8 01       	movw	r30, r16
    4886:	10 86       	std	Z+8, r1	; 0x08
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:243
    uint8_t n = 0;

    char c = current();
    while (canBeInNonQuotedString(c) && n < 63) {
      move();
      buffer[n++] = c;
    4888:	d3 94       	inc	r13
    488a:	d4 01       	movw	r26, r8
    488c:	bd 92       	st	X+, r11
    488e:	4d 01       	movw	r8, r26
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:244
      c = current();
    4890:	c8 01       	movw	r24, r16
    4892:	0e 94 b7 20 	call	0x416e	; 0x416e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    4896:	b8 2e       	mov	r11, r24
    4898:	eb cf       	rjmp	.-42     	; 0x4870 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x74>
parseArray():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:69
    move();
    return true;
  }

  DeserializationError parseArray(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
    489a:	d8 01       	movw	r26, r16
    489c:	16 96       	adiw	r26, 0x06	; 6
    489e:	8c 91       	ld	r24, X
    48a0:	88 23       	and	r24, r24
    48a2:	09 f4       	brne	.+2      	; 0x48a6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xaa>
    48a4:	c1 c1       	rjmp	.+898    	; 0x4c28 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x42c>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:78

template <typename T>
inline typename Internals::enable_if<Internals::is_same<T, JsonArray>::value,
                                     JsonArray>::type
JsonVariant::to() {
  if (!_data) return JsonArray();
    48a6:	a1 14       	cp	r10, r1
    48a8:	b1 04       	cpc	r11, r1
    48aa:	09 f4       	brne	.+2      	; 0x48ae <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xb2>
    48ac:	2d c1       	rjmp	.+602    	; 0x4b08 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x30c>
_ZN11ArduinoJson9Internals15JsonVariantData7toArrayEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:70
  void setNull() {
    type = JSON_NULL;
  }

  JsonArrayData *toArray() {
    type = JSON_ARRAY;
    48ae:	88 e0       	ldi	r24, 0x08	; 8
    48b0:	90 e0       	ldi	r25, 0x00	; 0
    48b2:	f5 01       	movw	r30, r10
    48b4:	91 83       	std	Z+1, r25	; 0x01
    48b6:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:71
    content.asArray.head = 0;
    48b8:	13 82       	std	Z+3, r1	; 0x03
    48ba:	12 82       	std	Z+2, r1	; 0x02
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:72
    content.asArray.tail = 0;
    48bc:	15 82       	std	Z+5, r1	; 0x05
    48be:	14 82       	std	Z+4, r1	; 0x04
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    48c0:	c8 01       	movw	r24, r16
    48c2:	0e 94 b7 20 	call	0x416e	; 0x416e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    48c6:	8b 35       	cpi	r24, 0x5B	; 91
    48c8:	09 f0       	breq	.+2      	; 0x48cc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xd0>
    48ca:	ef c0       	rjmp	.+478    	; 0x4aaa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    48cc:	d8 01       	movw	r26, r16
    48ce:	18 96       	adiw	r26, 0x08	; 8
    48d0:	1c 92       	st	X, r1
parseArray():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:78

    // Check opening braket
    if (!eat('[')) return DeserializationError::InvalidInput;

    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
    48d2:	c8 01       	movw	r24, r16
    48d4:	0e 94 1e 21 	call	0x423c	; 0x423c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    48d8:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:79
    if (err) return err;
    48da:	89 2b       	or	r24, r25
    48dc:	09 f0       	breq	.+2      	; 0x48e0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xe4>
    48de:	5d c0       	rjmp	.+186    	; 0x499a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    48e0:	c8 01       	movw	r24, r16
    48e2:	0e 94 b7 20 	call	0x416e	; 0x416e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    48e6:	8d 35       	cpi	r24, 0x5D	; 93
    48e8:	09 f4       	brne	.+2      	; 0x48ec <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xf0>
    48ea:	55 c0       	rjmp	.+170    	; 0x4996 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19a>
add():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:57
  }

  JsonVariant add() {
    if (!_data) return JsonVariant();

    Internals::Slot* slot = new (_memoryPool) Internals::Slot();
    48ec:	8c e0       	ldi	r24, 0x0C	; 12
    48ee:	d8 2e       	mov	r13, r24
operator new():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Memory/AllocableInMemoryPool.hpp:15
namespace Internals {

class AllocableInMemoryPool {
 public:
  void *operator new(size_t n, MemoryPool *memoryPool) NOEXCEPT {
    return memoryPool->alloc(n);
    48f0:	d4 01       	movw	r26, r8
    48f2:	ed 91       	ld	r30, X+
    48f4:	fc 91       	ld	r31, X
    48f6:	01 90       	ld	r0, Z+
    48f8:	f0 81       	ld	r31, Z
    48fa:	e0 2d       	mov	r30, r0
    48fc:	6c e0       	ldi	r22, 0x0C	; 12
    48fe:	70 e0       	ldi	r23, 0x00	; 0
    4900:	c4 01       	movw	r24, r8
    4902:	19 95       	eicall
    4904:	fc 01       	movw	r30, r24
add():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:57
    4906:	00 97       	sbiw	r24, 0x00	; 0
    4908:	09 f4       	brne	.+2      	; 0x490c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x110>
    490a:	64 c0       	rjmp	.+200    	; 0x49d4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1d8>
    490c:	dc 01       	movw	r26, r24
    490e:	2d 2d       	mov	r18, r13
    4910:	1d 92       	st	X+, r1
    4912:	2a 95       	dec	r18
    4914:	e9 f7       	brne	.-6      	; 0x4910 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x114>
_ZN11ArduinoJson9Internals15JsonVariantDataC2Ev():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:20
struct JsonVariantData {
  JsonVariantType type;
  JsonVariantContent content;

  JsonVariantData() {
    type = JSON_NULL;
    4916:	11 82       	std	Z+1, r1	; 0x01
    4918:	10 82       	st	Z, r1
add():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:62
    if (!slot) return JsonVariant();

    slot->next = 0;

    if (_data->tail) {
    491a:	d7 01       	movw	r26, r14
    491c:	14 96       	adiw	r26, 0x04	; 4
    491e:	8d 91       	ld	r24, X+
    4920:	9c 91       	ld	r25, X
    4922:	15 97       	sbiw	r26, 0x05	; 5
    4924:	00 97       	sbiw	r24, 0x00	; 0
    4926:	09 f4       	brne	.+2      	; 0x492a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x12e>
    4928:	50 c0       	rjmp	.+160    	; 0x49ca <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1ce>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:63
      slot->prev = _data->tail;
    492a:	91 87       	std	Z+9, r25	; 0x09
    492c:	80 87       	std	Z+8, r24	; 0x08
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:64
      _data->tail->next = slot;
    492e:	14 96       	adiw	r26, 0x04	; 4
    4930:	8d 91       	ld	r24, X+
    4932:	9c 91       	ld	r25, X
    4934:	dc 01       	movw	r26, r24
    4936:	17 96       	adiw	r26, 0x07	; 7
    4938:	fc 93       	st	X, r31
    493a:	ee 93       	st	-X, r30
    493c:	16 97       	sbiw	r26, 0x06	; 6
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:65
      _data->tail = slot;
    493e:	d7 01       	movw	r26, r14
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:69
    } else {
      slot->prev = 0;
      _data->head = slot;
      _data->tail = slot;
    4940:	15 96       	adiw	r26, 0x05	; 5
    4942:	fc 93       	st	X, r31
    4944:	ee 93       	st	-X, r30
    4946:	14 97       	sbiw	r26, 0x04	; 4
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:79
  return JsonArray(_memoryPool, _data->toArray());
    4948:	98 2d       	mov	r25, r8
    494a:	89 2d       	mov	r24, r9
    494c:	49 2e       	mov	r4, r25
    494e:	58 2e       	mov	r5, r24
    4950:	3f 01       	movw	r6, r30
parseArray():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:88

    // Read each value
    for (;;) {
      // Allocate slot in array
      JsonVariant value = array.add();
      if (value.isInvalid()) return DeserializationError::NoMemory;
    4952:	ef 2b       	or	r30, r31
    4954:	09 f4       	brne	.+2      	; 0x4958 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x15c>
    4956:	d8 c0       	rjmp	.+432    	; 0x4b08 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x30c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:91

      // 1 - Parse value
      _nestingLimit--;
    4958:	f8 01       	movw	r30, r16
    495a:	86 81       	ldd	r24, Z+6	; 0x06
    495c:	81 50       	subi	r24, 0x01	; 1
    495e:	86 83       	std	Z+6, r24	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:92
      err = parse(value);
    4960:	b3 01       	movw	r22, r6
    4962:	a2 01       	movw	r20, r4
    4964:	c8 01       	movw	r24, r16
    4966:	0e 94 fe 23 	call	0x47fc	; 0x47fc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>
    496a:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:93
      _nestingLimit++;
    496c:	d8 01       	movw	r26, r16
    496e:	16 96       	adiw	r26, 0x06	; 6
    4970:	8c 91       	ld	r24, X
    4972:	16 97       	sbiw	r26, 0x06	; 6
    4974:	8f 5f       	subi	r24, 0xFF	; 255
    4976:	16 96       	adiw	r26, 0x06	; 6
    4978:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:94
      if (err) return err;
    497a:	a1 14       	cp	r10, r1
    497c:	b1 04       	cpc	r11, r1
    497e:	69 f4       	brne	.+26     	; 0x499a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:97

      // 2 - Skip spaces
      err = skipSpacesAndComments();
    4980:	c8 01       	movw	r24, r16
    4982:	0e 94 1e 21 	call	0x423c	; 0x423c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    4986:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:98
      if (err) return err;
    4988:	89 2b       	or	r24, r25
    498a:	39 f4       	brne	.+14     	; 0x499a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    498c:	c8 01       	movw	r24, r16
    498e:	0e 94 b7 20 	call	0x416e	; 0x416e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    4992:	8d 35       	cpi	r24, 0x5D	; 93
    4994:	21 f5       	brne	.+72     	; 0x49de <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1e2>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    4996:	f8 01       	movw	r30, r16
    4998:	10 86       	std	Z+8, r1	; 0x08
    499a:	c5 01       	movw	r24, r10
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:42
        return parseObject(variant);

      default:
        return parseValue(variant);
    }
  }
    499c:	cc 5b       	subi	r28, 0xBC	; 188
    499e:	df 4f       	sbci	r29, 0xFF	; 255
    49a0:	0f b6       	in	r0, 0x3f	; 63
    49a2:	f8 94       	cli
    49a4:	de bf       	out	0x3e, r29	; 62
    49a6:	0f be       	out	0x3f, r0	; 63
    49a8:	cd bf       	out	0x3d, r28	; 61
    49aa:	df 91       	pop	r29
    49ac:	cf 91       	pop	r28
    49ae:	1f 91       	pop	r17
    49b0:	0f 91       	pop	r16
    49b2:	ff 90       	pop	r15
    49b4:	ef 90       	pop	r14
    49b6:	df 90       	pop	r13
    49b8:	bf 90       	pop	r11
    49ba:	af 90       	pop	r10
    49bc:	9f 90       	pop	r9
    49be:	8f 90       	pop	r8
    49c0:	7f 90       	pop	r7
    49c2:	6f 90       	pop	r6
    49c4:	5f 90       	pop	r5
    49c6:	4f 90       	pop	r4
    49c8:	08 95       	ret
add():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:68
      slot->prev = _data->tail;
      _data->tail->next = slot;
      _data->tail = slot;
    } else {
      slot->prev = 0;
      _data->head = slot;
    49ca:	13 96       	adiw	r26, 0x03	; 3
    49cc:	fc 93       	st	X, r31
    49ce:	ee 93       	st	-X, r30
    49d0:	12 97       	sbiw	r26, 0x02	; 2
    49d2:	b6 cf       	rjmp	.-148    	; 0x4940 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x144>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:58

  JsonVariant add() {
    if (!_data) return JsonVariant();

    Internals::Slot* slot = new (_memoryPool) Internals::Slot();
    if (!slot) return JsonVariant();
    49d4:	f0 e0       	ldi	r31, 0x00	; 0
    49d6:	e0 e0       	ldi	r30, 0x00	; 0
    49d8:	90 e0       	ldi	r25, 0x00	; 0
    49da:	80 e0       	ldi	r24, 0x00	; 0
    49dc:	b7 cf       	rjmp	.-146    	; 0x494c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x150>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    49de:	c8 01       	movw	r24, r16
    49e0:	0e 94 b7 20 	call	0x416e	; 0x416e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    49e4:	8c 32       	cpi	r24, 0x2C	; 44
    49e6:	09 f0       	breq	.+2      	; 0x49ea <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1ee>
    49e8:	60 c0       	rjmp	.+192    	; 0x4aaa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    49ea:	d8 01       	movw	r26, r16
    49ec:	18 96       	adiw	r26, 0x08	; 8
    49ee:	1c 92       	st	X, r1
    49f0:	7f cf       	rjmp	.-258    	; 0x48f0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xf4>
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:107
      if (!eat(',')) return DeserializationError::InvalidInput;
    }
  }

  DeserializationError parseObject(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
    49f2:	f8 01       	movw	r30, r16
    49f4:	86 81       	ldd	r24, Z+6	; 0x06
    49f6:	88 23       	and	r24, r24
    49f8:	09 f4       	brne	.+2      	; 0x49fc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x200>
    49fa:	16 c1       	rjmp	.+556    	; 0x4c28 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x42c>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:86

template <typename T>
typename Internals::enable_if<Internals::is_same<T, JsonObject>::value,
                              JsonObject>::type
JsonVariant::to() {
  if (!_data) return JsonObject();
    49fc:	a1 14       	cp	r10, r1
    49fe:	b1 04       	cpc	r11, r1
    4a00:	09 f4       	brne	.+2      	; 0x4a04 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x208>
    4a02:	82 c0       	rjmp	.+260    	; 0x4b08 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x30c>
    4a04:	34 01       	movw	r6, r8
_ZN11ArduinoJson9Internals15JsonVariantData8toObjectEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:77
    content.asArray.tail = 0;
    return &content.asArray;
  }

  JsonObjectData *toObject() {
    type = JSON_OBJECT;
    4a06:	89 e0       	ldi	r24, 0x09	; 9
    4a08:	90 e0       	ldi	r25, 0x00	; 0
    4a0a:	d5 01       	movw	r26, r10
    4a0c:	11 96       	adiw	r26, 0x01	; 1
    4a0e:	9c 93       	st	X, r25
    4a10:	8e 93       	st	-X, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:78
    content.asObject.head = 0;
    4a12:	13 96       	adiw	r26, 0x03	; 3
    4a14:	1c 92       	st	X, r1
    4a16:	1e 92       	st	-X, r1
    4a18:	12 97       	sbiw	r26, 0x02	; 2
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:79
    content.asObject.tail = 0;
    4a1a:	15 96       	adiw	r26, 0x05	; 5
    4a1c:	1c 92       	st	X, r1
    4a1e:	1e 92       	st	-X, r1
    4a20:	14 97       	sbiw	r26, 0x04	; 4
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:80
    return &content.asObject;
    4a22:	45 01       	movw	r8, r10
    4a24:	b2 e0       	ldi	r27, 0x02	; 2
    4a26:	8b 0e       	add	r8, r27
    4a28:	91 1c       	adc	r9, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    4a2a:	c8 01       	movw	r24, r16
    4a2c:	0e 94 b7 20 	call	0x416e	; 0x416e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    4a30:	8b 37       	cpi	r24, 0x7B	; 123
    4a32:	d9 f5       	brne	.+118    	; 0x4aaa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    4a34:	f8 01       	movw	r30, r16
    4a36:	10 86       	std	Z+8, r1	; 0x08
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:116

    // Check opening brace
    if (!eat('{')) return DeserializationError::InvalidInput;

    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
    4a38:	c8 01       	movw	r24, r16
    4a3a:	0e 94 1e 21 	call	0x423c	; 0x423c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    4a3e:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:117
    if (err) return err;
    4a40:	89 2b       	or	r24, r25
    4a42:	09 f0       	breq	.+2      	; 0x4a46 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x24a>
    4a44:	aa cf       	rjmp	.-172    	; 0x499a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    4a46:	c8 01       	movw	r24, r16
    4a48:	0e 94 b7 20 	call	0x416e	; 0x416e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    4a4c:	8d 37       	cpi	r24, 0x7D	; 125
    4a4e:	09 f4       	brne	.+2      	; 0x4a52 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x256>
    4a50:	9c c0       	rjmp	.+312    	; 0x4b8a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x38e>
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:348

    // search a matching key
    Internals::Slot* slot = findSlot<TStringRef>(key);
    if (!slot) {
      // add the key
      slot = new (_memoryPool) Internals::Slot();
    4a52:	bc e0       	ldi	r27, 0x0C	; 12
    4a54:	5b 2e       	mov	r5, r27
parseKey():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:167
      return parseNumericValue(variant);
    }
  }

  DeserializationError parseKey(const char **key) {
    if (isQuote(current())) {
    4a56:	c8 01       	movw	r24, r16
    4a58:	0e 94 b7 20 	call	0x416e	; 0x416e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
isQuote():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:274
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
  }

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
    4a5c:	87 32       	cpi	r24, 0x27	; 39
    4a5e:	79 f0       	breq	.+30     	; 0x4a7e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x282>
    4a60:	82 32       	cpi	r24, 0x22	; 34
    4a62:	69 f0       	breq	.+26     	; 0x4a7e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x282>
_ZN11ArduinoJson9Internals11StringMoverIcE6StringC2EPPc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:15
template <typename TChar>
class StringMover {
 public:
  class String {
   public:
    String(TChar** ptr) : _writePtr(ptr), _startPtr(*ptr) {}
    4a64:	f8 01       	movw	r30, r16
    4a66:	a4 80       	ldd	r10, Z+4	; 0x04
    4a68:	b5 80       	ldd	r11, Z+5	; 0x05
parseNonQuotedString():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:218

  DeserializationError parseNonQuotedString(const char **result) {
    typename remove_reference<TStringStorage>::type::String str =
        _stringStorage.startString();

    char c = current();
    4a6a:	c8 01       	movw	r24, r16
    4a6c:	0e 94 b7 20 	call	0x416e	; 0x416e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    4a70:	d8 2e       	mov	r13, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:219
    if (c == '\0') return DeserializationError::IncompleteInput;
    4a72:	81 11       	cpse	r24, r1
    4a74:	1e c0       	rjmp	.+60     	; 0x4ab2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2b6>
    4a76:	aa 24       	eor	r10, r10
    4a78:	a3 94       	inc	r10
    4a7a:	b1 2c       	mov	r11, r1
    4a7c:	8e cf       	rjmp	.-228    	; 0x499a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
parseKey():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:168
    }
  }

  DeserializationError parseKey(const char **key) {
    if (isQuote(current())) {
      return parseQuotedString(key);
    4a7e:	be 01       	movw	r22, r28
    4a80:	6f 5f       	subi	r22, 0xFF	; 255
    4a82:	7f 4f       	sbci	r23, 0xFF	; 255
    4a84:	c8 01       	movw	r24, r16
    4a86:	0e 94 c7 20 	call	0x418e	; 0x418e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)>
    4a8a:	5c 01       	movw	r10, r24
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:127
    // Read each key value pair
    for (;;) {
      // Parse key
      const char *key;
      err = parseKey(&key);
      if (err) return err;
    4a8c:	89 2b       	or	r24, r25
    4a8e:	09 f0       	breq	.+2      	; 0x4a92 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x296>
    4a90:	84 cf       	rjmp	.-248    	; 0x499a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:130

      // Skip spaces
      err = skipSpacesAndComments();
    4a92:	c8 01       	movw	r24, r16
    4a94:	0e 94 1e 21 	call	0x423c	; 0x423c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    4a98:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:131
      if (err) return err;  // Colon
    4a9a:	89 2b       	or	r24, r25
    4a9c:	09 f0       	breq	.+2      	; 0x4aa0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2a4>
    4a9e:	7d cf       	rjmp	.-262    	; 0x499a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    4aa0:	c8 01       	movw	r24, r16
    4aa2:	0e 94 b7 20 	call	0x416e	; 0x416e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    4aa6:	8a 33       	cpi	r24, 0x3A	; 58
    4aa8:	99 f1       	breq	.+102    	; 0x4b10 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x314>
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:113

    JsonObject object = variant.to<JsonObject>();
    if (object.isNull()) return DeserializationError::NoMemory;

    // Check opening brace
    if (!eat('{')) return DeserializationError::InvalidInput;
    4aaa:	72 e0       	ldi	r23, 0x02	; 2
    4aac:	a7 2e       	mov	r10, r23
    4aae:	b1 2c       	mov	r11, r1
    4ab0:	74 cf       	rjmp	.-280    	; 0x499a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
parseNonQuotedString():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:221
        _stringStorage.startString();

    char c = current();
    if (c == '\0') return DeserializationError::IncompleteInput;

    if (canBeInNonQuotedString(c)) {  // no quotes
    4ab2:	0e 94 9f 20 	call	0x413e	; 0x413e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>
    4ab6:	88 23       	and	r24, r24
    4ab8:	c1 f3       	breq	.-16     	; 0x4aaa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    4aba:	d8 01       	movw	r26, r16
    4abc:	18 96       	adiw	r26, 0x08	; 8
    4abe:	1c 92       	st	X, r1
    4ac0:	18 97       	sbiw	r26, 0x08	; 8
_ZN11ArduinoJson9Internals11StringMoverIcE6String6appendEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:18

    void append(char c) {
      *(*_writePtr)++ = TChar(c);
    4ac2:	14 96       	adiw	r26, 0x04	; 4
    4ac4:	ed 91       	ld	r30, X+
    4ac6:	fc 91       	ld	r31, X
    4ac8:	15 97       	sbiw	r26, 0x05	; 5
    4aca:	cf 01       	movw	r24, r30
    4acc:	01 96       	adiw	r24, 0x01	; 1
    4ace:	15 96       	adiw	r26, 0x05	; 5
    4ad0:	9c 93       	st	X, r25
    4ad2:	8e 93       	st	-X, r24
    4ad4:	14 97       	sbiw	r26, 0x04	; 4
    4ad6:	d0 82       	st	Z, r13
parseNonQuotedString():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:225

    if (canBeInNonQuotedString(c)) {  // no quotes
      do {
        move();
        str.append(c);
        c = current();
    4ad8:	c8 01       	movw	r24, r16
    4ada:	0e 94 b7 20 	call	0x416e	; 0x416e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    4ade:	d8 2e       	mov	r13, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:226
      } while (canBeInNonQuotedString(c));
    4ae0:	0e 94 9f 20 	call	0x413e	; 0x413e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>
    4ae4:	81 11       	cpse	r24, r1
    4ae6:	e9 cf       	rjmp	.-46     	; 0x4aba <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2be>
c_str():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:22
    }

    const char* c_str() const {
      *(*_writePtr)++ = 0;
    4ae8:	d8 01       	movw	r26, r16
    4aea:	14 96       	adiw	r26, 0x04	; 4
    4aec:	ed 91       	ld	r30, X+
    4aee:	fc 91       	ld	r31, X
    4af0:	15 97       	sbiw	r26, 0x05	; 5
    4af2:	cf 01       	movw	r24, r30
    4af4:	01 96       	adiw	r24, 0x01	; 1
    4af6:	15 96       	adiw	r26, 0x05	; 5
    4af8:	9c 93       	st	X, r25
    4afa:	8e 93       	st	-X, r24
    4afc:	14 97       	sbiw	r26, 0x04	; 4
    4afe:	10 82       	st	Z, r1
parseNonQuotedString():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:231
    } else {
      return DeserializationError::InvalidInput;
    }

    *result = str.c_str();
    4b00:	ba 82       	std	Y+2, r11	; 0x02
    4b02:	a9 82       	std	Y+1, r10	; 0x01
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:232
    if (*result == NULL) return DeserializationError::NoMemory;
    4b04:	ab 28       	or	r10, r11
    4b06:	29 f6       	brne	.-118    	; 0x4a92 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x296>
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:110

  DeserializationError parseObject(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;

    JsonObject object = variant.to<JsonObject>();
    if (object.isNull()) return DeserializationError::NoMemory;
    4b08:	e3 e0       	ldi	r30, 0x03	; 3
    4b0a:	ae 2e       	mov	r10, r30
    4b0c:	b1 2c       	mov	r11, r1
    4b0e:	45 cf       	rjmp	.-374    	; 0x499a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    4b10:	f8 01       	movw	r30, r16
    4b12:	10 86       	std	Z+8, r1	; 0x08
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:135
      err = skipSpacesAndComments();
      if (err) return err;  // Colon
      if (!eat(':')) return DeserializationError::InvalidInput;

      // Allocate slot in object
      JsonVariant value = object.set(key);
    4b14:	a9 80       	ldd	r10, Y+1	; 0x01
    4b16:	ba 80       	ldd	r11, Y+2	; 0x02
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:342
  template <typename TStringRef>
  FORCE_INLINE JsonVariant set_impl(TStringRef key) {
    if (!_data) return JsonVariant();

    // ignore null key
    if (Internals::makeString(key).is_null()) return JsonVariant();
    4b18:	a1 14       	cp	r10, r1
    4b1a:	b1 04       	cpc	r11, r1
    4b1c:	d1 f5       	brne	.+116    	; 0x4b92 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x396>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
    4b1e:	90 e0       	ldi	r25, 0x00	; 0
    4b20:	80 e0       	ldi	r24, 0x00	; 0
    4b22:	30 e0       	ldi	r19, 0x00	; 0
    4b24:	20 e0       	ldi	r18, 0x00	; 0
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:135
    4b26:	22 96       	adiw	r28, 0x02	; 2
    4b28:	3f af       	std	Y+63, r19	; 0x3f
    4b2a:	22 97       	sbiw	r28, 0x02	; 2
    4b2c:	23 96       	adiw	r28, 0x03	; 3
    4b2e:	2f af       	std	Y+63, r18	; 0x3f
    4b30:	23 97       	sbiw	r28, 0x03	; 3
    4b32:	25 96       	adiw	r28, 0x05	; 5
    4b34:	9f af       	std	Y+63, r25	; 0x3f
    4b36:	8e af       	std	Y+62, r24	; 0x3e
    4b38:	25 97       	sbiw	r28, 0x05	; 5
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:136
      if (value.isInvalid()) return DeserializationError::NoMemory;
    4b3a:	89 2b       	or	r24, r25
    4b3c:	29 f3       	breq	.-54     	; 0x4b08 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x30c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:139

      // Parse value
      _nestingLimit--;
    4b3e:	d8 01       	movw	r26, r16
    4b40:	16 96       	adiw	r26, 0x06	; 6
    4b42:	8c 91       	ld	r24, X
    4b44:	16 97       	sbiw	r26, 0x06	; 6
    4b46:	81 50       	subi	r24, 0x01	; 1
    4b48:	16 96       	adiw	r26, 0x06	; 6
    4b4a:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:140
      err = parse(value);
    4b4c:	25 96       	adiw	r28, 0x05	; 5
    4b4e:	4c ad       	ldd	r20, Y+60	; 0x3c
    4b50:	5d ad       	ldd	r21, Y+61	; 0x3d
    4b52:	6e ad       	ldd	r22, Y+62	; 0x3e
    4b54:	7f ad       	ldd	r23, Y+63	; 0x3f
    4b56:	25 97       	sbiw	r28, 0x05	; 5
    4b58:	c8 01       	movw	r24, r16
    4b5a:	0e 94 fe 23 	call	0x47fc	; 0x47fc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>
    4b5e:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:141
      _nestingLimit++;
    4b60:	f8 01       	movw	r30, r16
    4b62:	86 81       	ldd	r24, Z+6	; 0x06
    4b64:	8f 5f       	subi	r24, 0xFF	; 255
    4b66:	86 83       	std	Z+6, r24	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:142
      if (err) return err;
    4b68:	a1 14       	cp	r10, r1
    4b6a:	b1 04       	cpc	r11, r1
    4b6c:	09 f0       	breq	.+2      	; 0x4b70 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x374>
    4b6e:	15 cf       	rjmp	.-470    	; 0x499a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:145

      // Skip spaces
      err = skipSpacesAndComments();
    4b70:	c8 01       	movw	r24, r16
    4b72:	0e 94 1e 21 	call	0x423c	; 0x423c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    4b76:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:146
      if (err) return err;
    4b78:	89 2b       	or	r24, r25
    4b7a:	09 f0       	breq	.+2      	; 0x4b7e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x382>
    4b7c:	0e cf       	rjmp	.-484    	; 0x499a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    4b7e:	c8 01       	movw	r24, r16
    4b80:	0e 94 b7 20 	call	0x416e	; 0x416e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    4b84:	8d 37       	cpi	r24, 0x7D	; 125
    4b86:	09 f0       	breq	.+2      	; 0x4b8a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x38e>
    4b88:	3f c0       	rjmp	.+126    	; 0x4c08 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x40c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    4b8a:	d8 01       	movw	r26, r16
    4b8c:	18 96       	adiw	r26, 0x08	; 8
    4b8e:	1c 92       	st	X, r1
    4b90:	04 cf       	rjmp	.-504    	; 0x499a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:345

    // search a matching key
    Internals::Slot* slot = findSlot<TStringRef>(key);
    4b92:	b5 01       	movw	r22, r10
    4b94:	c4 01       	movw	r24, r8
    4b96:	0e 94 d5 23 	call	0x47aa	; 0x47aa <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.28]>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:346
    if (!slot) {
    4b9a:	00 97       	sbiw	r24, 0x00	; 0
    4b9c:	49 f5       	brne	.+82     	; 0x4bf0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3f4>
operator new():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Memory/AllocableInMemoryPool.hpp:15
    4b9e:	d3 01       	movw	r26, r6
    4ba0:	ed 91       	ld	r30, X+
    4ba2:	fc 91       	ld	r31, X
    4ba4:	01 90       	ld	r0, Z+
    4ba6:	f0 81       	ld	r31, Z
    4ba8:	e0 2d       	mov	r30, r0
    4baa:	6c e0       	ldi	r22, 0x0C	; 12
    4bac:	70 e0       	ldi	r23, 0x00	; 0
    4bae:	c3 01       	movw	r24, r6
    4bb0:	19 95       	eicall
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:348
      // add the key
      slot = new (_memoryPool) Internals::Slot();
    4bb2:	00 97       	sbiw	r24, 0x00	; 0
    4bb4:	09 f4       	brne	.+2      	; 0x4bb8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3bc>
    4bb6:	b3 cf       	rjmp	.-154    	; 0x4b1e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x322>
    4bb8:	fc 01       	movw	r30, r24
    4bba:	25 2d       	mov	r18, r5
    4bbc:	11 92       	st	Z+, r1
    4bbe:	2a 95       	dec	r18
    4bc0:	e9 f7       	brne	.-6      	; 0x4bbc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3c0>
_ZN11ArduinoJson9Internals15JsonVariantDataC2Ev():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:20
struct JsonVariantData {
  JsonVariantType type;
  JsonVariantContent content;

  JsonVariantData() {
    type = JSON_NULL;
    4bc2:	dc 01       	movw	r26, r24
    4bc4:	1d 92       	st	X+, r1
    4bc6:	1c 92       	st	X, r1
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:353
      if (!slot) return JsonVariant();

      slot->next = 0;

      if (_data->tail) {
    4bc8:	d7 01       	movw	r26, r14
    4bca:	14 96       	adiw	r26, 0x04	; 4
    4bcc:	ed 91       	ld	r30, X+
    4bce:	fc 91       	ld	r31, X
    4bd0:	15 97       	sbiw	r26, 0x05	; 5
    4bd2:	30 97       	sbiw	r30, 0x00	; 0
    4bd4:	81 f0       	breq	.+32     	; 0x4bf6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3fa>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:354
        slot->prev = _data->tail;
    4bd6:	dc 01       	movw	r26, r24
    4bd8:	19 96       	adiw	r26, 0x09	; 9
    4bda:	fc 93       	st	X, r31
    4bdc:	ee 93       	st	-X, r30
    4bde:	18 97       	sbiw	r26, 0x08	; 8
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:355
        _data->tail->next = slot;
    4be0:	97 83       	std	Z+7, r25	; 0x07
    4be2:	86 83       	std	Z+6, r24	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:356
        _data->tail = slot;
    4be4:	f7 01       	movw	r30, r14
    4be6:	95 83       	std	Z+5, r25	; 0x05
    4be8:	84 83       	std	Z+4, r24	; 0x04
_ZN11ArduinoJson10JsonObject7set_keyEPNS_9Internals4SlotEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:370

    return JsonVariant(_memoryPool, &slot->value);
  }

  FORCE_INLINE bool set_key(Internals::Slot* slot, const char* key) {
    slot->key = key;
    4bea:	fc 01       	movw	r30, r24
    4bec:	b3 86       	std	Z+11, r11	; 0x0b
    4bee:	a2 86       	std	Z+10, r10	; 0x0a
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:87
  return JsonObject(_memoryPool, _data->toObject());
    4bf0:	36 2d       	mov	r19, r6
    4bf2:	27 2d       	mov	r18, r7
    4bf4:	98 cf       	rjmp	.-208    	; 0x4b26 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x32a>
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:359
        slot->prev = _data->tail;
        _data->tail->next = slot;
        _data->tail = slot;
      } else {
        slot->prev = 0;
        _data->head = slot;
    4bf6:	13 96       	adiw	r26, 0x03	; 3
    4bf8:	9c 93       	st	X, r25
    4bfa:	8e 93       	st	-X, r24
    4bfc:	12 97       	sbiw	r26, 0x02	; 2
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:360
        _data->tail = slot;
    4bfe:	15 96       	adiw	r26, 0x05	; 5
    4c00:	9c 93       	st	X, r25
    4c02:	8e 93       	st	-X, r24
    4c04:	14 97       	sbiw	r26, 0x04	; 4
    4c06:	f1 cf       	rjmp	.-30     	; 0x4bea <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3ee>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    4c08:	c8 01       	movw	r24, r16
    4c0a:	0e 94 b7 20 	call	0x416e	; 0x416e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    4c0e:	8c 32       	cpi	r24, 0x2C	; 44
    4c10:	09 f0       	breq	.+2      	; 0x4c14 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x418>
    4c12:	4b cf       	rjmp	.-362    	; 0x4aaa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    4c14:	f8 01       	movw	r30, r16
    4c16:	10 86       	std	Z+8, r1	; 0x08
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:153
      // More keys/values?
      if (eat('}')) return DeserializationError::Ok;
      if (!eat(',')) return DeserializationError::InvalidInput;

      // Skip spaces
      err = skipSpacesAndComments();
    4c18:	c8 01       	movw	r24, r16
    4c1a:	0e 94 1e 21 	call	0x423c	; 0x423c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    4c1e:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:154
      if (err) return err;
    4c20:	89 2b       	or	r24, r25
    4c22:	09 f4       	brne	.+2      	; 0x4c26 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x42a>
    4c24:	18 cf       	rjmp	.-464    	; 0x4a56 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x25a>
    4c26:	b9 ce       	rjmp	.-654    	; 0x499a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:107
      if (!eat(',')) return DeserializationError::InvalidInput;
    }
  }

  DeserializationError parseObject(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
    4c28:	f5 e0       	ldi	r31, 0x05	; 5
    4c2a:	af 2e       	mov	r10, r31
    4c2c:	b1 2c       	mov	r11, r1
    4c2e:	b5 ce       	rjmp	.-662    	; 0x499a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE16parseStringValueENS_11JsonVariantE.isra.36():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:176
    }
  }

  DeserializationError parseStringValue(JsonVariant variant) {
    const char *value;
    DeserializationError err = parseQuotedString(&value);
    4c30:	be 01       	movw	r22, r28
    4c32:	6f 5f       	subi	r22, 0xFF	; 255
    4c34:	7f 4f       	sbci	r23, 0xFF	; 255
    4c36:	c8 01       	movw	r24, r16
    4c38:	0e 94 c7 20 	call	0x418e	; 0x418e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:177
    if (err) return err;
    4c3c:	00 97       	sbiw	r24, 0x00	; 0
    4c3e:	09 f0       	breq	.+2      	; 0x4c42 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x446>
    4c40:	ad ce       	rjmp	.-678    	; 0x499c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1a0>
_ZN11ArduinoJson11JsonVariant3setEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:154
    }
  }

  // set(const char*);
  FORCE_INLINE bool set(const char *value) {
    if (!_data) return false;
    4c42:	e1 14       	cp	r14, r1
    4c44:	f1 04       	cpc	r15, r1
    4c46:	61 f0       	breq	.+24     	; 0x4c60 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE16parseStringValueENS_11JsonVariantE.isra.36():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:178
    variant.set(value);
    4c48:	89 81       	ldd	r24, Y+1	; 0x01
    4c4a:	9a 81       	ldd	r25, Y+2	; 0x02
_ZN11ArduinoJson9Internals15JsonVariantData15setLinkedStringEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:49
    type = JSON_OWNED_STRING;
    content.asString = value;
  }

  void setLinkedString(const char *value) {
    type = JSON_LINKED_STRING;
    4c4c:	23 e0       	ldi	r18, 0x03	; 3
    4c4e:	30 e0       	ldi	r19, 0x00	; 0
    4c50:	d7 01       	movw	r26, r14
    4c52:	11 96       	adiw	r26, 0x01	; 1
    4c54:	3c 93       	st	X, r19
    4c56:	2e 93       	st	-X, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:50
    content.asString = value;
    4c58:	13 96       	adiw	r26, 0x03	; 3
    4c5a:	9c 93       	st	X, r25
    4c5c:	8e 93       	st	-X, r24
    4c5e:	12 97       	sbiw	r26, 0x02	; 2
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:261
    } else if (!strcmp(buffer, "null")) {
      // already null
    } else {
      return DeserializationError::InvalidInput;
    }
    return DeserializationError::Ok;
    4c60:	90 e0       	ldi	r25, 0x00	; 0
    4c62:	80 e0       	ldi	r24, 0x00	; 0
    4c64:	9b ce       	rjmp	.-714    	; 0x499c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1a0>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:246
    while (canBeInNonQuotedString(c) && n < 63) {
      move();
      buffer[n++] = c;
      c = current();
    }
    buffer[n] = 0;
    4c66:	e1 e0       	ldi	r30, 0x01	; 1
    4c68:	f0 e0       	ldi	r31, 0x00	; 0
    4c6a:	ec 0f       	add	r30, r28
    4c6c:	fd 1f       	adc	r31, r29
    4c6e:	ed 0d       	add	r30, r13
    4c70:	f1 1d       	adc	r31, r1
    4c72:	10 82       	st	Z, r1
isInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:13

namespace ArduinoJson {
namespace Internals {

inline bool isInteger(const char* s) {
  if (!s || !*s) return false;
    4c74:	19 81       	ldd	r17, Y+1	; 0x01
    4c76:	11 23       	and	r17, r17
    4c78:	09 f4       	brne	.+2      	; 0x4c7c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x480>
    4c7a:	51 c0       	rjmp	.+162    	; 0x4d1e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x522>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:14
  if (issign(*s)) s++;
    4c7c:	fe 01       	movw	r30, r28
issign():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:15
inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
}

inline bool issign(char c) {
  return '-' == c || c == '+';
    4c7e:	1d 32       	cpi	r17, 0x2D	; 45
    4c80:	71 f1       	breq	.+92     	; 0x4cde <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4e2>
    4c82:	1b 32       	cpi	r17, 0x2B	; 43
    4c84:	61 f1       	breq	.+88     	; 0x4cde <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4e2>
    4c86:	31 96       	adiw	r30, 0x01	; 1
isInteger():
  while (isdigit(*s)) s++;
    4c88:	81 91       	ld	r24, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11

namespace ArduinoJson {
namespace Internals {

inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
    4c8a:	90 ed       	ldi	r25, 0xD0	; 208
    4c8c:	98 0f       	add	r25, r24
isInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:15
    4c8e:	9a 30       	cpi	r25, 0x0A	; 10
    4c90:	d8 f3       	brcs	.-10     	; 0x4c88 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x48c>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:248

    if (isInteger(buffer)) {
    4c92:	81 11       	cpse	r24, r1
    4c94:	44 c0       	rjmp	.+136    	; 0x4d1e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x522>
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"
    4c96:	14 37       	cpi	r17, 0x74	; 116
    4c98:	09 f4       	brne	.+2      	; 0x4c9c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4a0>
    4c9a:	dd c1       	rjmp	.+954    	; 0x5056 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x85a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  T result = 0;
  bool negative_result = false;

  switch (*s) {
    4c9c:	1b 32       	cpi	r17, 0x2B	; 43
    4c9e:	09 f1       	breq	.+66     	; 0x4ce2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4e6>
    4ca0:	1d 32       	cpi	r17, 0x2D	; 45
    4ca2:	19 f1       	breq	.+70     	; 0x4cea <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4ee>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
    4ca4:	10 e0       	ldi	r17, 0x00	; 0
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  switch (*s) {
    4ca6:	fe 01       	movw	r30, r28
    4ca8:	31 96       	adiw	r30, 0x01	; 1
    4caa:	20 e0       	ldi	r18, 0x00	; 0
    4cac:	30 e0       	ldi	r19, 0x00	; 0
    4cae:	a9 01       	movw	r20, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
    4cb0:	01 91       	ld	r16, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    4cb2:	80 ed       	ldi	r24, 0xD0	; 208
    4cb4:	80 0f       	add	r24, r16
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    4cb6:	8a 30       	cpi	r24, 0x0A	; 10
    4cb8:	d0 f4       	brcc	.+52     	; 0x4cee <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4f2>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
    result = T(result * 10 + T(*s - '0'));
    4cba:	aa e0       	ldi	r26, 0x0A	; 10
    4cbc:	b0 e0       	ldi	r27, 0x00	; 0
    4cbe:	0e 94 1a ad 	call	0x15a34	; 0x15a34 <__muluhisi3>
    4cc2:	20 2f       	mov	r18, r16
    4cc4:	00 0f       	add	r16, r16
    4cc6:	33 0b       	sbc	r19, r19
    4cc8:	20 53       	subi	r18, 0x30	; 48
    4cca:	31 09       	sbc	r19, r1
    4ccc:	03 2e       	mov	r0, r19
    4cce:	00 0c       	add	r0, r0
    4cd0:	44 0b       	sbc	r20, r20
    4cd2:	55 0b       	sbc	r21, r21
    4cd4:	26 0f       	add	r18, r22
    4cd6:	37 1f       	adc	r19, r23
    4cd8:	48 1f       	adc	r20, r24
    4cda:	59 1f       	adc	r21, r25
    4cdc:	e9 cf       	rjmp	.-46     	; 0x4cb0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4b4>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:14
namespace ArduinoJson {
namespace Internals {

inline bool isInteger(const char* s) {
  if (!s || !*s) return false;
  if (issign(*s)) s++;
    4cde:	32 96       	adiw	r30, 0x02	; 2
    4ce0:	d3 cf       	rjmp	.-90     	; 0x4c88 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x48c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
    4ce2:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:26

  switch (*s) {
    case '-':
      negative_result = true;
      s++;
    4ce4:	fe 01       	movw	r30, r28
    4ce6:	32 96       	adiw	r30, 0x02	; 2
    4ce8:	e0 cf       	rjmp	.-64     	; 0x4caa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4ae>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:25
  T result = 0;
  bool negative_result = false;

  switch (*s) {
    case '-':
      negative_result = true;
    4cea:	11 e0       	ldi	r17, 0x01	; 1
    4cec:	fb cf       	rjmp	.-10     	; 0x4ce4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4e8>
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    4cee:	11 23       	and	r17, r17
    4cf0:	09 f4       	brne	.+2      	; 0x4cf4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4f8>
    4cf2:	b5 c1       	rjmp	.+874    	; 0x505e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x862>
_ZN11ArduinoJson11JsonVariant3setIlEEbT_PNS_9Internals9enable_ifIXaasrNS3_11is_integralIS2_EE5valuesrNS3_9is_signedIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:70
  FORCE_INLINE bool set(
      T value,
      typename Internals::enable_if<Internals::is_integral<T>::value &&
                                    Internals::is_signed<T>::value>::type * =
          0) {
    if (!_data) return false;
    4cf4:	e1 14       	cp	r14, r1
    4cf6:	f1 04       	cpc	r15, r1
    4cf8:	09 f4       	brne	.+2      	; 0x4cfc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x500>
    4cfa:	b2 cf       	rjmp	.-156    	; 0x4c60 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals15JsonVariantData18setNegativeIntegerEm():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:34
    type = JSON_FLOAT;
    content.asFloat = value;
  }

  void setNegativeInteger(JsonUInt value) {
    type = JSON_NEGATIVE_INTEGER;
    4cfc:	87 e0       	ldi	r24, 0x07	; 7
    4cfe:	90 e0       	ldi	r25, 0x00	; 0
_ZN11ArduinoJson11JsonVariant3setIlEEbT_PNS_9Internals9enable_ifIXaasrNS3_11is_integralIS2_EE5valuesrNS3_9is_signedIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:71
    if (value >= 0)
    4d00:	21 15       	cp	r18, r1
    4d02:	31 05       	cpc	r19, r1
    4d04:	41 05       	cpc	r20, r1
    4d06:	51 05       	cpc	r21, r1
    4d08:	11 f4       	brne	.+4      	; 0x4d0e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x512>
_ZN11ArduinoJson9Internals15JsonVariantData17setPostiveIntegerEm():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:39
    content.asInteger = value;
  }

  void setPostiveInteger(JsonUInt value) {
    type = JSON_POSITIVE_INTEGER;
    4d0a:	86 e0       	ldi	r24, 0x06	; 6
    4d0c:	90 e0       	ldi	r25, 0x00	; 0
_ZN11ArduinoJson9Internals15JsonVariantData18setNegativeIntegerEm():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:34
    type = JSON_FLOAT;
    content.asFloat = value;
  }

  void setNegativeInteger(JsonUInt value) {
    type = JSON_NEGATIVE_INTEGER;
    4d0e:	f7 01       	movw	r30, r14
    4d10:	91 83       	std	Z+1, r25	; 0x01
    4d12:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:35
    content.asInteger = value;
    4d14:	22 83       	std	Z+2, r18	; 0x02
    4d16:	33 83       	std	Z+3, r19	; 0x03
    4d18:	44 83       	std	Z+4, r20	; 0x04
    4d1a:	55 83       	std	Z+5, r21	; 0x05
    4d1c:	a1 cf       	rjmp	.-190    	; 0x4c60 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:16
namespace Internals {

inline bool isFloat(const char* s) {
  if (!s) return false;

  if (!strcmp(s, "NaN")) return true;
    4d1e:	61 e0       	ldi	r22, 0x01	; 1
    4d20:	73 e0       	ldi	r23, 0x03	; 3
    4d22:	ce 01       	movw	r24, r28
    4d24:	01 96       	adiw	r24, 0x01	; 1
    4d26:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    4d2a:	89 2b       	or	r24, r25
    4d2c:	09 f4       	brne	.+2      	; 0x4d30 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x534>
    4d2e:	46 c0       	rjmp	.+140    	; 0x4dbc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5c0>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:17
  if (issign(*s)) s++;
    4d30:	5e 01       	movw	r10, r28
    4d32:	f2 e0       	ldi	r31, 0x02	; 2
    4d34:	af 0e       	add	r10, r31
    4d36:	b1 1c       	adc	r11, r1
issign():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:15
}

inline bool issign(char c) {
  return '-' == c || c == '+';
    4d38:	1d 32       	cpi	r17, 0x2D	; 45
    4d3a:	49 f0       	breq	.+18     	; 0x4d4e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x552>
    4d3c:	fe 01       	movw	r30, r28
    4d3e:	31 96       	adiw	r30, 0x01	; 1
    4d40:	5f 01       	movw	r10, r30
    4d42:	1b 32       	cpi	r17, 0x2B	; 43
    4d44:	21 f4       	brne	.+8      	; 0x4d4e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x552>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:17
    4d46:	5e 01       	movw	r10, r28
    4d48:	22 e0       	ldi	r18, 0x02	; 2
    4d4a:	a2 0e       	add	r10, r18
    4d4c:	b1 1c       	adc	r11, r1
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:18
  if (!strcmp(s, "Infinity")) return true;
    4d4e:	65 e0       	ldi	r22, 0x05	; 5
    4d50:	73 e0       	ldi	r23, 0x03	; 3
    4d52:	c5 01       	movw	r24, r10
    4d54:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    4d58:	89 2b       	or	r24, r25
    4d5a:	81 f1       	breq	.+96     	; 0x4dbc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5c0>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:19
  if (*s == '\0') return false;
    4d5c:	d5 01       	movw	r26, r10
    4d5e:	8c 91       	ld	r24, X
    4d60:	88 23       	and	r24, r24
    4d62:	09 f4       	brne	.+2      	; 0x4d66 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x56a>
    4d64:	3b c1       	rjmp	.+630    	; 0x4fdc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7e0>
    4d66:	fd 01       	movw	r30, r26
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:21

  while (isdigit(*s)) s++;
    4d68:	8d 91       	ld	r24, X+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11

namespace ArduinoJson {
namespace Internals {

inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
    4d6a:	90 ed       	ldi	r25, 0xD0	; 208
    4d6c:	98 0f       	add	r25, r24
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:21
    4d6e:	9a 30       	cpi	r25, 0x0A	; 10
    4d70:	d0 f3       	brcs	.-12     	; 0x4d66 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x56a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:23

  if (*s == '.') {
    4d72:	8e 32       	cpi	r24, 0x2E	; 46
    4d74:	41 f4       	brne	.+16     	; 0x4d86 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x58a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:24
    s++;
    4d76:	9d 01       	movw	r18, r26
    4d78:	f9 01       	movw	r30, r18
    4d7a:	2f 5f       	subi	r18, 0xFF	; 255
    4d7c:	3f 4f       	sbci	r19, 0xFF	; 255
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    4d7e:	80 81       	ld	r24, Z
    4d80:	80 53       	subi	r24, 0x30	; 48
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:25
    while (isdigit(*s)) s++;
    4d82:	8a 30       	cpi	r24, 0x0A	; 10
    4d84:	c8 f3       	brcs	.-14     	; 0x4d78 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x57c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:28
  }

  if (*s == 'e' || *s == 'E') {
    4d86:	80 81       	ld	r24, Z
    4d88:	8f 7d       	andi	r24, 0xDF	; 223
    4d8a:	85 34       	cpi	r24, 0x45	; 69
    4d8c:	a1 f4       	brne	.+40     	; 0x4db6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5ba>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:30
    s++;
    if (issign(*s)) s++;
    4d8e:	81 81       	ldd	r24, Z+1	; 0x01
issign():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:15
}

inline bool issign(char c) {
  return '-' == c || c == '+';
    4d90:	8d 32       	cpi	r24, 0x2D	; 45
    4d92:	09 f4       	brne	.+2      	; 0x4d96 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x59a>
    4d94:	57 c0       	rjmp	.+174    	; 0x4e44 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x648>
    4d96:	8b 32       	cpi	r24, 0x2B	; 43
    4d98:	09 f4       	brne	.+2      	; 0x4d9c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5a0>
    4d9a:	54 c0       	rjmp	.+168    	; 0x4e44 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x648>
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:29
    s++;
    while (isdigit(*s)) s++;
  }

  if (*s == 'e' || *s == 'E') {
    s++;
    4d9c:	31 96       	adiw	r30, 0x01	; 1
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11

namespace ArduinoJson {
namespace Internals {

inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
    4d9e:	80 81       	ld	r24, Z
    4da0:	80 53       	subi	r24, 0x30	; 48
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:31
    if (issign(*s)) s++;
    if (!isdigit(*s)) return false;
    4da2:	8a 30       	cpi	r24, 0x0A	; 10
    4da4:	08 f0       	brcs	.+2      	; 0x4da8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5ac>
    4da6:	1a c1       	rjmp	.+564    	; 0x4fdc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7e0>
    4da8:	cf 01       	movw	r24, r30
    4daa:	fc 01       	movw	r30, r24
    4dac:	01 96       	adiw	r24, 0x01	; 1
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    4dae:	20 81       	ld	r18, Z
    4db0:	20 53       	subi	r18, 0x30	; 48
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:32
    while (isdigit(*s)) s++;
    4db2:	2a 30       	cpi	r18, 0x0A	; 10
    4db4:	d0 f3       	brcs	.-12     	; 0x4daa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5ae>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:250
      result.set(parseInteger<JsonInteger>(buffer));
    } else if (isFloat(buffer)) {
    4db6:	80 81       	ld	r24, Z
    4db8:	81 11       	cpse	r24, r1
    4dba:	10 c1       	rjmp	.+544    	; 0x4fdc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7e0>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:23
  typedef typename traits::exponent_type exponent_t;

  if (!s) return 0;  // NULL

  bool negative_result = false;
  switch (*s) {
    4dbc:	1b 32       	cpi	r17, 0x2B	; 43
    4dbe:	09 f4       	brne	.+2      	; 0x4dc2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5c6>
    4dc0:	43 c0       	rjmp	.+134    	; 0x4e48 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x64c>
    4dc2:	1d 32       	cpi	r17, 0x2D	; 45
    4dc4:	09 f0       	breq	.+2      	; 0x4dc8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5cc>
    4dc6:	47 c0       	rjmp	.+142    	; 0x4e56 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x65a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:26
    case '-':
      negative_result = true;
      s++;
    4dc8:	1a 81       	ldd	r17, Y+2	; 0x02
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:25
  if (!s) return 0;  // NULL

  bool negative_result = false;
  switch (*s) {
    case '-':
      negative_result = true;
    4dca:	dd 24       	eor	r13, r13
    4dcc:	d3 94       	inc	r13
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:26
      s++;
    4dce:	5e 01       	movw	r10, r28
    4dd0:	b2 e0       	ldi	r27, 0x02	; 2
    4dd2:	ab 0e       	add	r10, r27
    4dd4:	b1 1c       	adc	r11, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:33
    case '+':
      s++;
      break;
  }

  if (*s == 't') return 1;  // true
    4dd6:	60 e0       	ldi	r22, 0x00	; 0
    4dd8:	70 e0       	ldi	r23, 0x00	; 0
    4dda:	80 e8       	ldi	r24, 0x80	; 128
    4ddc:	9f e3       	ldi	r25, 0x3F	; 63
parseFloat():
    4dde:	14 37       	cpi	r17, 0x74	; 116
    4de0:	09 f4       	brne	.+2      	; 0x4de4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5e8>
    4de2:	d2 c0       	rjmp	.+420    	; 0x4f88 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:34
  if (*s == 'n' || *s == 'N') return traits::nan();
    4de4:	1f 7d       	andi	r17, 0xDF	; 223
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
    4de6:	60 e0       	ldi	r22, 0x00	; 0
    4de8:	70 e0       	ldi	r23, 0x00	; 0
    4dea:	80 ec       	ldi	r24, 0xC0	; 192
    4dec:	9f e7       	ldi	r25, 0x7F	; 127
parseFloat():
    4dee:	1e 34       	cpi	r17, 0x4E	; 78
    4df0:	09 f4       	brne	.+2      	; 0x4df4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5f8>
    4df2:	ca c0       	rjmp	.+404    	; 0x4f88 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:35
  if (*s == 'i' || *s == 'I')
    4df4:	19 34       	cpi	r17, 0x49	; 73
    4df6:	09 f4       	brne	.+2      	; 0x4dfa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5fe>
    4df8:	97 c0       	rjmp	.+302    	; 0x4f28 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x72c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:39
    return negative_result ? -traits::inf() : traits::inf();

  mantissa_t mantissa = 0;
  exponent_t exponent_offset = 0;
    4dfa:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:38
  if (*s == 't') return 1;  // true
  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return negative_result ? -traits::inf() : traits::inf();

  mantissa_t mantissa = 0;
    4dfc:	20 e0       	ldi	r18, 0x00	; 0
    4dfe:	30 e0       	ldi	r19, 0x00	; 0
    4e00:	a9 01       	movw	r20, r18
    4e02:	f5 01       	movw	r30, r10
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:41
  exponent_t exponent_offset = 0;

  while (isdigit(*s)) {
    4e04:	d5 01       	movw	r26, r10
    4e06:	1d 91       	ld	r17, X+
    4e08:	5d 01       	movw	r10, r26
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    4e0a:	80 ed       	ldi	r24, 0xD0	; 208
    4e0c:	81 0f       	add	r24, r17
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:41
    4e0e:	8a 30       	cpi	r24, 0x0A	; 10
    4e10:	48 f5       	brcc	.+82     	; 0x4e64 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x668>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:42
    if (mantissa < traits::mantissa_max / 10)
    4e12:	2c 3c       	cpi	r18, 0xCC	; 204
    4e14:	bc ec       	ldi	r27, 0xCC	; 204
    4e16:	3b 07       	cpc	r19, r27
    4e18:	bc e0       	ldi	r27, 0x0C	; 12
    4e1a:	4b 07       	cpc	r20, r27
    4e1c:	51 05       	cpc	r21, r1
    4e1e:	04 f5       	brge	.+64     	; 0x4e60 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x664>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:43
      mantissa = mantissa * 10 + (*s - '0');
    4e20:	aa e0       	ldi	r26, 0x0A	; 10
    4e22:	b0 e0       	ldi	r27, 0x00	; 0
    4e24:	0e 94 1a ad 	call	0x15a34	; 0x15a34 <__muluhisi3>
    4e28:	21 2f       	mov	r18, r17
    4e2a:	11 0f       	add	r17, r17
    4e2c:	33 0b       	sbc	r19, r19
    4e2e:	20 53       	subi	r18, 0x30	; 48
    4e30:	31 09       	sbc	r19, r1
    4e32:	03 2e       	mov	r0, r19
    4e34:	00 0c       	add	r0, r0
    4e36:	44 0b       	sbc	r20, r20
    4e38:	55 0b       	sbc	r21, r21
    4e3a:	26 0f       	add	r18, r22
    4e3c:	37 1f       	adc	r19, r23
    4e3e:	48 1f       	adc	r20, r24
    4e40:	59 1f       	adc	r21, r25
    4e42:	df cf       	rjmp	.-66     	; 0x4e02 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x606>
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:30
    while (isdigit(*s)) s++;
  }

  if (*s == 'e' || *s == 'E') {
    s++;
    if (issign(*s)) s++;
    4e44:	32 96       	adiw	r30, 0x02	; 2
    4e46:	ab cf       	rjmp	.-170    	; 0x4d9e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5a2>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
    4e48:	1a 81       	ldd	r17, Y+2	; 0x02
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:22
  typedef typename traits::mantissa_type mantissa_t;
  typedef typename traits::exponent_type exponent_t;

  if (!s) return 0;  // NULL

  bool negative_result = false;
    4e4a:	d1 2c       	mov	r13, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
    4e4c:	5e 01       	movw	r10, r28
    4e4e:	e2 e0       	ldi	r30, 0x02	; 2
    4e50:	ae 0e       	add	r10, r30
    4e52:	b1 1c       	adc	r11, r1
    4e54:	c0 cf       	rjmp	.-128    	; 0x4dd6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5da>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:22
  typedef typename traits::mantissa_type mantissa_t;
  typedef typename traits::exponent_type exponent_t;

  if (!s) return 0;  // NULL

  bool negative_result = false;
    4e56:	d1 2c       	mov	r13, r1
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:23
  switch (*s) {
    4e58:	ce 01       	movw	r24, r28
    4e5a:	01 96       	adiw	r24, 0x01	; 1
    4e5c:	5c 01       	movw	r10, r24
    4e5e:	bb cf       	rjmp	.-138    	; 0x4dd6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5da>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:45

  while (isdigit(*s)) {
    if (mantissa < traits::mantissa_max / 10)
      mantissa = mantissa * 10 + (*s - '0');
    else
      exponent_offset++;
    4e60:	0f 5f       	subi	r16, 0xFF	; 255
    4e62:	cf cf       	rjmp	.-98     	; 0x4e02 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x606>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:49
    s++;
  }

  if (*s == '.') {
    4e64:	1e 32       	cpi	r17, 0x2E	; 46
    4e66:	31 f5       	brne	.+76     	; 0x4eb4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6b8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:50
    s++;
    4e68:	5f 01       	movw	r10, r30
    4e6a:	8f ef       	ldi	r24, 0xFF	; 255
    4e6c:	a8 1a       	sub	r10, r24
    4e6e:	b8 0a       	sbc	r11, r24
    4e70:	f5 01       	movw	r30, r10
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:51
    while (isdigit(*s)) {
    4e72:	d5 01       	movw	r26, r10
    4e74:	1d 91       	ld	r17, X+
    4e76:	5d 01       	movw	r10, r26
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    4e78:	80 ed       	ldi	r24, 0xD0	; 208
    4e7a:	81 0f       	add	r24, r17
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:51
    4e7c:	8a 30       	cpi	r24, 0x0A	; 10
    4e7e:	d0 f4       	brcc	.+52     	; 0x4eb4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6b8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:52
      if (mantissa < traits::mantissa_max / 10) {
    4e80:	2c 3c       	cpi	r18, 0xCC	; 204
    4e82:	bc ec       	ldi	r27, 0xCC	; 204
    4e84:	3b 07       	cpc	r19, r27
    4e86:	bc e0       	ldi	r27, 0x0C	; 12
    4e88:	4b 07       	cpc	r20, r27
    4e8a:	51 05       	cpc	r21, r1
    4e8c:	8c f7       	brge	.-30     	; 0x4e70 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x674>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:53
        mantissa = mantissa * 10 + (*s - '0');
    4e8e:	aa e0       	ldi	r26, 0x0A	; 10
    4e90:	b0 e0       	ldi	r27, 0x00	; 0
    4e92:	0e 94 1a ad 	call	0x15a34	; 0x15a34 <__muluhisi3>
    4e96:	21 2f       	mov	r18, r17
    4e98:	11 0f       	add	r17, r17
    4e9a:	33 0b       	sbc	r19, r19
    4e9c:	20 53       	subi	r18, 0x30	; 48
    4e9e:	31 09       	sbc	r19, r1
    4ea0:	03 2e       	mov	r0, r19
    4ea2:	00 0c       	add	r0, r0
    4ea4:	44 0b       	sbc	r20, r20
    4ea6:	55 0b       	sbc	r21, r21
    4ea8:	26 0f       	add	r18, r22
    4eaa:	37 1f       	adc	r19, r23
    4eac:	48 1f       	adc	r20, r24
    4eae:	59 1f       	adc	r21, r25
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:54
        exponent_offset--;
    4eb0:	01 50       	subi	r16, 0x01	; 1
    4eb2:	de cf       	rjmp	.-68     	; 0x4e70 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x674>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:61
      s++;
    }
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    4eb4:	80 81       	ld	r24, Z
    4eb6:	8f 7d       	andi	r24, 0xDF	; 223
    4eb8:	00 2e       	mov	r0, r16
    4eba:	00 0c       	add	r0, r0
    4ebc:	11 0b       	sbc	r17, r17
    4ebe:	85 34       	cpi	r24, 0x45	; 69
    4ec0:	09 f0       	breq	.+2      	; 0x4ec4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6c8>
    4ec2:	70 c0       	rjmp	.+224    	; 0x4fa4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7a8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:64
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
    4ec4:	81 81       	ldd	r24, Z+1	; 0x01
    4ec6:	8d 32       	cpi	r24, 0x2D	; 45
    4ec8:	41 f5       	brne	.+80     	; 0x4f1a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x71e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:66
      negative_exponent = true;
      s++;
    4eca:	32 96       	adiw	r30, 0x02	; 2
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:65
  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
      negative_exponent = true;
    4ecc:	b1 e0       	ldi	r27, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:63
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    bool negative_exponent = false;
    4ece:	90 e0       	ldi	r25, 0x00	; 0
    4ed0:	80 e0       	ldi	r24, 0x00	; 0
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:72
    } else if (*s == '+') {
      s++;
    }

    while (isdigit(*s)) {
      exponent = exponent * 10 + (*s - '0');
    4ed2:	6a e0       	ldi	r22, 0x0A	; 10
    4ed4:	b6 2e       	mov	r11, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:71
      s++;
    } else if (*s == '+') {
      s++;
    }

    while (isdigit(*s)) {
    4ed6:	a1 91       	ld	r26, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    4ed8:	60 ed       	ldi	r22, 0xD0	; 208
    4eda:	6a 0f       	add	r22, r26
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:71
    4edc:	6a 30       	cpi	r22, 0x0A	; 10
    4ede:	78 f5       	brcc	.+94     	; 0x4f3e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x742>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:72
      exponent = exponent * 10 + (*s - '0');
    4ee0:	b8 9e       	mul	r11, r24
    4ee2:	b0 01       	movw	r22, r0
    4ee4:	b9 9e       	mul	r11, r25
    4ee6:	70 0d       	add	r23, r0
    4ee8:	11 24       	eor	r1, r1
    4eea:	8a 2f       	mov	r24, r26
    4eec:	aa 0f       	add	r26, r26
    4eee:	99 0b       	sbc	r25, r25
    4ef0:	c0 97       	sbiw	r24, 0x30	; 48
    4ef2:	86 0f       	add	r24, r22
    4ef4:	97 1f       	adc	r25, r23
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:73
      if (exponent + exponent_offset > traits::exponent_max) {
    4ef6:	b8 01       	movw	r22, r16
    4ef8:	68 0f       	add	r22, r24
    4efa:	79 1f       	adc	r23, r25
    4efc:	67 32       	cpi	r22, 0x27	; 39
    4efe:	71 05       	cpc	r23, r1
    4f00:	54 f3       	brlt	.-44     	; 0x4ed6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6da>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:74
        if (negative_exponent)
    4f02:	bb 23       	and	r27, r27
    4f04:	89 f0       	breq	.+34     	; 0x4f28 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x72c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:75
          return negative_result ? -0.0f : 0.0f;
    4f06:	60 e0       	ldi	r22, 0x00	; 0
    4f08:	70 e0       	ldi	r23, 0x00	; 0
    4f0a:	80 e0       	ldi	r24, 0x00	; 0
    4f0c:	90 e8       	ldi	r25, 0x80	; 128
parseFloat():
    4f0e:	d1 10       	cpse	r13, r1
    4f10:	3b c0       	rjmp	.+118    	; 0x4f88 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
    4f12:	60 e0       	ldi	r22, 0x00	; 0
    4f14:	70 e0       	ldi	r23, 0x00	; 0
    4f16:	cb 01       	movw	r24, r22
    4f18:	37 c0       	rjmp	.+110    	; 0x4f88 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:67
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
      negative_exponent = true;
      s++;
    } else if (*s == '+') {
    4f1a:	8b 32       	cpi	r24, 0x2B	; 43
    4f1c:	19 f0       	breq	.+6      	; 0x4f24 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x728>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:62
    }
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    4f1e:	31 96       	adiw	r30, 0x01	; 1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:63
    bool negative_exponent = false;
    4f20:	b0 e0       	ldi	r27, 0x00	; 0
    4f22:	d5 cf       	rjmp	.-86     	; 0x4ece <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6d2>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:68
    if (*s == '-') {
      negative_exponent = true;
      s++;
    } else if (*s == '+') {
      s++;
    4f24:	32 96       	adiw	r30, 0x02	; 2
    4f26:	fc cf       	rjmp	.-8      	; 0x4f20 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x724>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:36
  }

  if (*s == 't') return 1;  // true
  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return negative_result ? -traits::inf() : traits::inf();
    4f28:	60 e0       	ldi	r22, 0x00	; 0
    4f2a:	70 e0       	ldi	r23, 0x00	; 0
    4f2c:	80 e8       	ldi	r24, 0x80	; 128
    4f2e:	9f ef       	ldi	r25, 0xFF	; 255
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:77
      exponent = exponent * 10 + (*s - '0');
      if (exponent + exponent_offset > traits::exponent_max) {
        if (negative_exponent)
          return negative_result ? -0.0f : 0.0f;
        else
          return negative_result ? -traits::inf() : traits::inf();
    4f30:	d1 10       	cpse	r13, r1
    4f32:	2a c0       	rjmp	.+84     	; 0x4f88 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:36
  }

  if (*s == 't') return 1;  // true
  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return negative_result ? -traits::inf() : traits::inf();
    4f34:	60 e0       	ldi	r22, 0x00	; 0
    4f36:	70 e0       	ldi	r23, 0x00	; 0
    4f38:	80 e8       	ldi	r24, 0x80	; 128
    4f3a:	9f e7       	ldi	r25, 0x7F	; 127
    4f3c:	25 c0       	rjmp	.+74     	; 0x4f88 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:81
        else
          return negative_result ? -traits::inf() : traits::inf();
      }
      s++;
    }
    if (negative_exponent) exponent = -exponent;
    4f3e:	bb 23       	and	r27, r27
    4f40:	19 f0       	breq	.+6      	; 0x4f48 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x74c>
    4f42:	91 95       	neg	r25
    4f44:	81 95       	neg	r24
    4f46:	91 09       	sbc	r25, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:83
  }
  exponent += exponent_offset;
    4f48:	08 0f       	add	r16, r24
    4f4a:	19 1f       	adc	r17, r25
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:85

  T result = traits::make_float(static_cast<T>(mantissa), exponent);
    4f4c:	ca 01       	movw	r24, r20
    4f4e:	b9 01       	movw	r22, r18
    4f50:	0e 94 6e ab 	call	0x156dc	; 0x156dc <__floatsisf>
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:123
  typedef int8_t exponent_type;
  static const exponent_type exponent_max = 38;

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
    4f54:	10 16       	cp	r1, r16
    4f56:	11 06       	cpc	r1, r17
    4f58:	44 f5       	brge	.+80     	; 0x4faa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:124
      for (uint8_t index = 0; e != 0; index++) {
    4f5a:	b1 2c       	mov	r11, r1
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:125
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
    4f5c:	00 ff       	sbrs	r16, 0
    4f5e:	0c c0       	rjmp	.+24     	; 0x4f78 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x77c>
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE24positiveBinaryPowerOfTenEi():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:140
    return m;
  }

  static T positiveBinaryPowerOfTen(int index) {
    static T factors[] = {1e1f, 1e2f, 1e4f, 1e8f, 1e16f, 1e32f};
    return factors[index];
    4f60:	24 e0       	ldi	r18, 0x04	; 4
    4f62:	b2 9e       	mul	r11, r18
    4f64:	f0 01       	movw	r30, r0
    4f66:	11 24       	eor	r1, r1
    4f68:	e8 5c       	subi	r30, 0xC8	; 200
    4f6a:	fd 4f       	sbci	r31, 0xFD	; 253
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:125

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
      for (uint8_t index = 0; e != 0; index++) {
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
    4f6c:	20 81       	ld	r18, Z
    4f6e:	31 81       	ldd	r19, Z+1	; 0x01
    4f70:	42 81       	ldd	r20, Z+2	; 0x02
    4f72:	53 81       	ldd	r21, Z+3	; 0x03
    4f74:	0e 94 cd ab 	call	0x1579a	; 0x1579a <__mulsf3>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:126
        e >>= 1;
    4f78:	15 95       	asr	r17
    4f7a:	07 95       	ror	r16
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:124
  static const exponent_type exponent_max = 38;

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
      for (uint8_t index = 0; e != 0; index++) {
    4f7c:	b3 94       	inc	r11
    4f7e:	01 15       	cp	r16, r1
    4f80:	11 05       	cpc	r17, r1
    4f82:	61 f7       	brne	.-40     	; 0x4f5c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x760>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:87

  return negative_result ? -result : result;
    4f84:	d1 10       	cpse	r13, r1
    4f86:	90 58       	subi	r25, 0x80	; 128
_ZN11ArduinoJson11JsonVariant3setIfEEbT_PNS_9Internals9enable_ifIXsrNS3_17is_floating_pointIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:54
  // set(float value);
  template <typename T>
  FORCE_INLINE bool set(
      T value, typename Internals::enable_if<
                   Internals::is_floating_point<T>::value>::type * = 0) {
    if (!_data) return false;
    4f88:	e1 14       	cp	r14, r1
    4f8a:	f1 04       	cpc	r15, r1
    4f8c:	09 f4       	brne	.+2      	; 0x4f90 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x794>
    4f8e:	68 ce       	rjmp	.-816    	; 0x4c60 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals15JsonVariantData8setFloatEf():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:29
    type = JSON_BOOLEAN;
    content.asInteger = static_cast<JsonUInt>(value);
  }

  void setFloat(JsonFloat value) {
    type = JSON_FLOAT;
    4f90:	2a e0       	ldi	r18, 0x0A	; 10
    4f92:	30 e0       	ldi	r19, 0x00	; 0
    4f94:	f7 01       	movw	r30, r14
    4f96:	31 83       	std	Z+1, r19	; 0x01
    4f98:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:30
    content.asFloat = value;
    4f9a:	62 83       	std	Z+2, r22	; 0x02
    4f9c:	73 83       	std	Z+3, r23	; 0x03
    4f9e:	84 83       	std	Z+4, r24	; 0x04
    4fa0:	95 83       	std	Z+5, r25	; 0x05
    4fa2:	5e ce       	rjmp	.-836    	; 0x4c60 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:60
      }
      s++;
    }
  }

  int exponent = 0;
    4fa4:	90 e0       	ldi	r25, 0x00	; 0
    4fa6:	80 e0       	ldi	r24, 0x00	; 0
    4fa8:	cf cf       	rjmp	.-98     	; 0x4f48 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x74c>
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:129
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
        e >>= 1;
      }
    } else {
      e = -e;
    4faa:	11 95       	neg	r17
    4fac:	01 95       	neg	r16
    4fae:	11 09       	sbc	r17, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:130
      for (uint8_t index = 0; e != 0; index++) {
    4fb0:	b1 2c       	mov	r11, r1
make_float():
    4fb2:	01 15       	cp	r16, r1
    4fb4:	11 05       	cpc	r17, r1
    4fb6:	31 f3       	breq	.-52     	; 0x4f84 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x788>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:131
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
    4fb8:	00 ff       	sbrs	r16, 0
    4fba:	0c c0       	rjmp	.+24     	; 0x4fd4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7d8>
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE24negativeBinaryPowerOfTenEi():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:145
    return factors[index];
  }

  static T negativeBinaryPowerOfTen(int index) {
    static T factors[] = {1e-1f, 1e-2f, 1e-4f, 1e-8f, 1e-16f, 1e-32f};
    return factors[index];
    4fbc:	a4 e0       	ldi	r26, 0x04	; 4
    4fbe:	ba 9e       	mul	r11, r26
    4fc0:	f0 01       	movw	r30, r0
    4fc2:	11 24       	eor	r1, r1
    4fc4:	e0 5e       	subi	r30, 0xE0	; 224
    4fc6:	fd 4f       	sbci	r31, 0xFD	; 253
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:131
        e >>= 1;
      }
    } else {
      e = -e;
      for (uint8_t index = 0; e != 0; index++) {
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
    4fc8:	20 81       	ld	r18, Z
    4fca:	31 81       	ldd	r19, Z+1	; 0x01
    4fcc:	42 81       	ldd	r20, Z+2	; 0x02
    4fce:	53 81       	ldd	r21, Z+3	; 0x03
    4fd0:	0e 94 cd ab 	call	0x1579a	; 0x1579a <__mulsf3>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:132
        e >>= 1;
    4fd4:	15 95       	asr	r17
    4fd6:	07 95       	ror	r16
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:130
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
        e >>= 1;
      }
    } else {
      e = -e;
      for (uint8_t index = 0; e != 0; index++) {
    4fd8:	b3 94       	inc	r11
    4fda:	eb cf       	rjmp	.-42     	; 0x4fb2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7b6>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:252
      result.set(parseFloat<JsonFloat>(buffer));
    } else if (!strcmp(buffer, "true")) {
    4fdc:	6e e0       	ldi	r22, 0x0E	; 14
    4fde:	73 e0       	ldi	r23, 0x03	; 3
    4fe0:	ce 01       	movw	r24, r28
    4fe2:	01 96       	adiw	r24, 0x01	; 1
    4fe4:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    4fe8:	89 2b       	or	r24, r25
    4fea:	91 f4       	brne	.+36     	; 0x5010 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x814>
_ZN11ArduinoJson11JsonVariant3setEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:43
  // Creates an uninitialized JsonVariant
  FORCE_INLINE JsonVariant() : _memoryPool(0), _data(0) {}

  // set(bool value)
  FORCE_INLINE bool set(bool value) {
    if (!_data) return false;
    4fec:	e1 14       	cp	r14, r1
    4fee:	f1 04       	cpc	r15, r1
    4ff0:	09 f4       	brne	.+2      	; 0x4ff4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7f8>
    4ff2:	36 ce       	rjmp	.-916    	; 0x4c60 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals15JsonVariantData10setBooleanEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:24
  JsonVariantData() {
    type = JSON_NULL;
  }

  void setBoolean(bool value) {
    type = JSON_BOOLEAN;
    4ff4:	85 e0       	ldi	r24, 0x05	; 5
    4ff6:	90 e0       	ldi	r25, 0x00	; 0
    4ff8:	f7 01       	movw	r30, r14
    4ffa:	91 83       	std	Z+1, r25	; 0x01
    4ffc:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:25
    content.asInteger = static_cast<JsonUInt>(value);
    4ffe:	81 e0       	ldi	r24, 0x01	; 1
    5000:	90 e0       	ldi	r25, 0x00	; 0
    5002:	a0 e0       	ldi	r26, 0x00	; 0
    5004:	b0 e0       	ldi	r27, 0x00	; 0
    5006:	82 83       	std	Z+2, r24	; 0x02
    5008:	93 83       	std	Z+3, r25	; 0x03
    500a:	a4 83       	std	Z+4, r26	; 0x04
    500c:	b5 83       	std	Z+5, r27	; 0x05
    500e:	28 ce       	rjmp	.-944    	; 0x4c60 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:254
      result.set(true);
    } else if (!strcmp(buffer, "false")) {
    5010:	63 e1       	ldi	r22, 0x13	; 19
    5012:	73 e0       	ldi	r23, 0x03	; 3
    5014:	ce 01       	movw	r24, r28
    5016:	01 96       	adiw	r24, 0x01	; 1
    5018:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    501c:	89 2b       	or	r24, r25
    501e:	79 f4       	brne	.+30     	; 0x503e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x842>
_ZN11ArduinoJson11JsonVariant3setEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:43
    5020:	e1 14       	cp	r14, r1
    5022:	f1 04       	cpc	r15, r1
    5024:	09 f4       	brne	.+2      	; 0x5028 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x82c>
    5026:	1c ce       	rjmp	.-968    	; 0x4c60 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals15JsonVariantData10setBooleanEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:24
  JsonVariantData() {
    type = JSON_NULL;
  }

  void setBoolean(bool value) {
    type = JSON_BOOLEAN;
    5028:	85 e0       	ldi	r24, 0x05	; 5
    502a:	90 e0       	ldi	r25, 0x00	; 0
    502c:	d7 01       	movw	r26, r14
    502e:	8d 93       	st	X+, r24
    5030:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:25
    content.asInteger = static_cast<JsonUInt>(value);
    5032:	f7 01       	movw	r30, r14
    5034:	12 82       	std	Z+2, r1	; 0x02
    5036:	13 82       	std	Z+3, r1	; 0x03
    5038:	14 82       	std	Z+4, r1	; 0x04
    503a:	15 82       	std	Z+5, r1	; 0x05
    503c:	11 ce       	rjmp	.-990    	; 0x4c60 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:256
      result.set(false);
    } else if (!strcmp(buffer, "null")) {
    503e:	69 e1       	ldi	r22, 0x19	; 25
    5040:	73 e0       	ldi	r23, 0x03	; 3
    5042:	ce 01       	movw	r24, r28
    5044:	01 96       	adiw	r24, 0x01	; 1
    5046:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    504a:	89 2b       	or	r24, r25
    504c:	09 f4       	brne	.+2      	; 0x5050 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x854>
    504e:	08 ce       	rjmp	.-1008   	; 0x4c60 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:259
      // already null
    } else {
      return DeserializationError::InvalidInput;
    5050:	82 e0       	ldi	r24, 0x02	; 2
    5052:	90 e0       	ldi	r25, 0x00	; 0
    5054:	a3 cc       	rjmp	.-1722   	; 0x499c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1a0>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"
    5056:	21 e0       	ldi	r18, 0x01	; 1
    5058:	30 e0       	ldi	r19, 0x00	; 0
    505a:	40 e0       	ldi	r20, 0x00	; 0
    505c:	50 e0       	ldi	r21, 0x00	; 0
_ZN11ArduinoJson11JsonVariant3setIlEEbT_PNS_9Internals9enable_ifIXaasrNS3_11is_integralIS2_EE5valuesrNS3_9is_signedIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:70
  FORCE_INLINE bool set(
      T value,
      typename Internals::enable_if<Internals::is_integral<T>::value &&
                                    Internals::is_signed<T>::value>::type * =
          0) {
    if (!_data) return false;
    505e:	e1 14       	cp	r14, r1
    5060:	f1 04       	cpc	r15, r1
    5062:	09 f0       	breq	.+2      	; 0x5066 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x86a>
    5064:	52 ce       	rjmp	.-860    	; 0x4d0a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x50e>
    5066:	fc cd       	rjmp	.-1032   	; 0x4c60 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>

00005068 <remote_tds_get_data(unsigned char) [clone .part.20]>:
_Z19remote_tds_get_datah.part.20():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2108
    SRAM.writeByte(ram_remote_tds_store_data_low + (ram_remote_tds_store_size * idx), (temp & 0xff));
    SRAM.writeByte(ram_remote_tds_store_data_high + (ram_remote_tds_store_size * idx), ((temp >> 8) & 0xff));
    SRAM.writeByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx), 0);
  }
}
int remote_tds_get_data(uint8_t idx)
    5068:	cf 93       	push	r28
    506a:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2113
{
  int temp = 0;
  if (idx < MAX_RTDS)
  {
    temp = SRAM.readByte(ram_remote_tds_store_data_high + (ram_remote_tds_store_size * idx)) << 8;
    506c:	93 e0       	ldi	r25, 0x03	; 3
    506e:	89 9f       	mul	r24, r25
    5070:	e0 01       	movw	r28, r0
    5072:	11 24       	eor	r1, r1
    5074:	be 01       	movw	r22, r28
    5076:	6b 59       	subi	r22, 0x9B	; 155
    5078:	7f 4f       	sbci	r23, 0xFF	; 255
    507a:	07 2e       	mov	r0, r23
    507c:	00 0c       	add	r0, r0
    507e:	88 0b       	sbc	r24, r24
    5080:	99 0b       	sbc	r25, r25
    5082:	0e 94 c6 82 	call	0x1058c	; 0x1058c <SRAM_23LC::readByte(unsigned long) [clone .constprop.179]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2114
    temp = temp = SRAM.readByte(ram_remote_tds_store_data_low + (ram_remote_tds_store_size * idx));
    5086:	be 01       	movw	r22, r28
    5088:	6c 59       	subi	r22, 0x9C	; 156
    508a:	7f 4f       	sbci	r23, 0xFF	; 255
    508c:	07 2e       	mov	r0, r23
    508e:	00 0c       	add	r0, r0
    5090:	88 0b       	sbc	r24, r24
    5092:	99 0b       	sbc	r25, r25
    5094:	0e 94 c6 82 	call	0x1058c	; 0x1058c <SRAM_23LC::readByte(unsigned long) [clone .constprop.179]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2117
  }
  return temp;
}
    5098:	90 e0       	ldi	r25, 0x00	; 0
    509a:	df 91       	pop	r29
    509c:	cf 91       	pop	r28
    509e:	08 95       	ret

000050a0 <display_element_dialog_show_text(unsigned int, unsigned int, unsigned int, unsigned int)>:
_Z32display_element_dialog_show_textjjjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4164
  }
  my_lcd.Set_Draw_color(WHITE); my_lcd.Draw_Fast_HLine(x, y, 142); my_lcd.Draw_Fast_HLine(x, y + 1, 142); show_string(str1, x, y + 2, 3, BLACK, WHITE, 0);
}
/////
void display_element_dialog_show_text(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y)
{
    50a0:	ef 92       	push	r14
    50a2:	ff 92       	push	r15
    50a4:	0f 93       	push	r16
    50a6:	1f 93       	push	r17
    50a8:	ab 01       	movw	r20, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4165
  show_string(dialog_text, x, y, 2, BLACK, WHITE, 0);
    50aa:	ee 24       	eor	r14, r14
    50ac:	ea 94       	dec	r14
    50ae:	fe 2c       	mov	r15, r14
    50b0:	10 e0       	ldi	r17, 0x00	; 0
    50b2:	00 e0       	ldi	r16, 0x00	; 0
    50b4:	22 e0       	ldi	r18, 0x02	; 2
    50b6:	bc 01       	movw	r22, r24
    50b8:	8c ea       	ldi	r24, 0xAC	; 172
    50ba:	98 e0       	ldi	r25, 0x08	; 8
    50bc:	0e 94 37 7d 	call	0xfa6e	; 0xfa6e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4166
}
    50c0:	1f 91       	pop	r17
    50c2:	0f 91       	pop	r16
    50c4:	ff 90       	pop	r15
    50c6:	ef 90       	pop	r14
    50c8:	08 95       	ret

000050ca <display_element_set_string_del_char(unsigned char, unsigned char)>:
_Z35display_element_set_string_del_charhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1634
  }
}

void display_element_set_string_del_char(uint8_t args1, uint8_t args2)
{
  uint8_t len = strlen(dialog_set_string);
    50ca:	82 ed       	ldi	r24, 0xD2	; 210
    50cc:	98 e0       	ldi	r25, 0x08	; 8
    50ce:	fc 01       	movw	r30, r24
    50d0:	01 90       	ld	r0, Z+
    50d2:	00 20       	and	r0, r0
    50d4:	e9 f7       	brne	.-6      	; 0x50d0 <display_element_set_string_del_char(unsigned char, unsigned char)+0x6>
    50d6:	cf 01       	movw	r24, r30
    50d8:	83 5d       	subi	r24, 0xD3	; 211
    50da:	98 40       	sbci	r25, 0x08	; 8
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1635
  if (len > 0)
    50dc:	88 23       	and	r24, r24
    50de:	29 f0       	breq	.+10     	; 0x50ea <display_element_set_string_del_char(unsigned char, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1636
    dialog_set_string[len - 1] = 0;
    50e0:	99 27       	eor	r25, r25
    50e2:	fc 01       	movw	r30, r24
    50e4:	ef 52       	subi	r30, 0x2F	; 47
    50e6:	f7 4f       	sbci	r31, 0xF7	; 247
    50e8:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1637
}
    50ea:	08 95       	ret

000050ec <display_element_set_string_add_char(char)>:
_Z35display_element_set_string_add_charc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1624
  strcpy(str, dialog_set_string);
}

void display_element_set_string_add_char(char znak)
{
  uint8_t len = strlen(dialog_set_string);
    50ec:	e2 ed       	ldi	r30, 0xD2	; 210
    50ee:	f8 e0       	ldi	r31, 0x08	; 8
    50f0:	01 90       	ld	r0, Z+
    50f2:	00 20       	and	r0, r0
    50f4:	e9 f7       	brne	.-6      	; 0x50f0 <display_element_set_string_add_char(char)+0x4>
    50f6:	e3 5d       	subi	r30, 0xD3	; 211
    50f8:	f8 40       	sbci	r31, 0x08	; 8
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1625
  if (len  < dialog_set_string_max_length - 1)
    50fa:	ff 27       	eor	r31, r31
    50fc:	20 91 cf 08 	lds	r18, 0x08CF	; 0x8008cf <dialog_set_string_max_length>
    5100:	21 50       	subi	r18, 0x01	; 1
    5102:	33 0b       	sbc	r19, r19
    5104:	e2 17       	cp	r30, r18
    5106:	f3 07       	cpc	r31, r19
    5108:	24 f4       	brge	.+8      	; 0x5112 <display_element_set_string_add_char(char)+0x26>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1627
  {
    dialog_set_string[len] = znak;
    510a:	ee 52       	subi	r30, 0x2E	; 46
    510c:	f7 4f       	sbci	r31, 0xF7	; 247
    510e:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1628
    dialog_set_string[len + 1] = 0;
    5110:	11 82       	std	Z+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1630
  }
}
    5112:	08 95       	ret

00005114 <click_keyboard_alfa(unsigned char, unsigned char)>:
_Z19click_keyboard_alfahh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1824
   args2 ... index prvku
*/
void click_keyboard_alfa(uint8_t args1, uint8_t args2)
{
  char znak;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    5114:	90 91 58 08 	lds	r25, 0x0858	; 0x800858 <dialog_set_string_keyboard_type>
    5118:	91 11       	cpse	r25, r1
    511a:	07 c0       	rjmp	.+14     	; 0x512a <click_keyboard_alfa(unsigned char, unsigned char)+0x16>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1825
    znak = pgm_read_byte(&keyboad_number_char_upper[args2]);
    511c:	e6 2f       	mov	r30, r22
    511e:	f0 e0       	ldi	r31, 0x00	; 0
    5120:	eb 55       	subi	r30, 0x5B	; 91
    5122:	f4 4d       	sbci	r31, 0xD4	; 212
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1829
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    znak = pgm_read_byte(&keyboad_number_char_lower[args2]);
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    znak = pgm_read_byte(&keyboad_number_char_special[args2]);
    5124:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1831
  ///
  display_element_set_string_add_char(znak);
    5126:	0c 94 76 28 	jmp	0x50ec	; 0x50ec <display_element_set_string_add_char(char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1826
void click_keyboard_alfa(uint8_t args1, uint8_t args2)
{
  char znak;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    znak = pgm_read_byte(&keyboad_number_char_upper[args2]);
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    512a:	91 30       	cpi	r25, 0x01	; 1
    512c:	29 f4       	brne	.+10     	; 0x5138 <click_keyboard_alfa(unsigned char, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1827
    znak = pgm_read_byte(&keyboad_number_char_lower[args2]);
    512e:	e6 2f       	mov	r30, r22
    5130:	f0 e0       	ldi	r31, 0x00	; 0
    5132:	e5 57       	subi	r30, 0x75	; 117
    5134:	f4 4d       	sbci	r31, 0xD4	; 212
    5136:	f6 cf       	rjmp	.-20     	; 0x5124 <click_keyboard_alfa(unsigned char, unsigned char)+0x10>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1828
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    5138:	92 30       	cpi	r25, 0x02	; 2
    513a:	a9 f7       	brne	.-22     	; 0x5126 <click_keyboard_alfa(unsigned char, unsigned char)+0x12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1829
    znak = pgm_read_byte(&keyboad_number_char_special[args2]);
    513c:	e6 2f       	mov	r30, r22
    513e:	f0 e0       	ldi	r31, 0x00	; 0
    5140:	ef 58       	subi	r30, 0x8F	; 143
    5142:	f4 4d       	sbci	r31, 0xD4	; 212
    5144:	ef cf       	rjmp	.-34     	; 0x5124 <click_keyboard_alfa(unsigned char, unsigned char)+0x10>

00005146 <click_keyboard_number(unsigned char, unsigned char)>:
_Z21click_keyboard_numberhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1789
*/
void click_keyboard_number(uint8_t args1, uint8_t args2)
{
  char znak;
  znak = '0' + args2;
  if (args1 == 10) znak = '.';
    5146:	8a 30       	cpi	r24, 0x0A	; 10
    5148:	21 f0       	breq	.+8      	; 0x5152 <click_keyboard_number(unsigned char, unsigned char)+0xc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1788
   args2 ... index prvku
*/
void click_keyboard_number(uint8_t args1, uint8_t args2)
{
  char znak;
  znak = '0' + args2;
    514a:	80 e3       	ldi	r24, 0x30	; 48
    514c:	86 0f       	add	r24, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1790
  if (args1 == 10) znak = '.';
  display_element_set_string_add_char(znak);
    514e:	0c 94 76 28 	jmp	0x50ec	; 0x50ec <display_element_set_string_add_char(char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1789
*/
void click_keyboard_number(uint8_t args1, uint8_t args2)
{
  char znak;
  znak = '0' + args2;
  if (args1 == 10) znak = '.';
    5152:	8e e2       	ldi	r24, 0x2E	; 46
    5154:	fc cf       	rjmp	.-8      	; 0x514e <click_keyboard_number(unsigned char, unsigned char)+0x8>

00005156 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)>:
_Z14button_click_3jjjjhc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4452
  show_string(text_value, x + posx, y + (posy * 3), 1, BLACK, WHITE, 0);
}
/////////////////////
/// typ_button_3 ////
void button_click_3(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t char_size, char znak)
{
    5156:	2f 92       	push	r2
    5158:	3f 92       	push	r3
    515a:	4f 92       	push	r4
    515c:	5f 92       	push	r5
    515e:	6f 92       	push	r6
    5160:	7f 92       	push	r7
    5162:	9f 92       	push	r9
    5164:	af 92       	push	r10
    5166:	bf 92       	push	r11
    5168:	cf 92       	push	r12
    516a:	df 92       	push	r13
    516c:	ef 92       	push	r14
    516e:	ff 92       	push	r15
    5170:	0f 93       	push	r16
    5172:	1f 93       	push	r17
    5174:	cf 93       	push	r28
    5176:	df 93       	push	r29
    5178:	00 d0       	rcall	.+0      	; 0x517a <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)+0x24>
    517a:	1f 92       	push	r1
    517c:	1f 92       	push	r1
    517e:	cd b7       	in	r28, 0x3d	; 61
    5180:	de b7       	in	r29, 0x3e	; 62
    5182:	6c 01       	movw	r12, r24
    5184:	5b 01       	movw	r10, r22
    5186:	1a 01       	movw	r2, r20
    5188:	29 01       	movw	r4, r18
    518a:	90 2e       	mov	r9, r16
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
}

//set 16bits draw color
void LCDWIKI_GUI::Set_Draw_color(uint16_t color)
{
	draw_color = color;
    518c:	10 92 c5 0d 	sts	0x0DC5, r1	; 0x800dc5 <my_lcd+0xb>
    5190:	10 92 c4 0d 	sts	0x0DC4, r1	; 0x800dc4 <my_lcd+0xa>
    5194:	10 e0       	ldi	r17, 0x00	; 0
    5196:	00 e0       	ldi	r16, 0x00	; 0
_Z14button_click_3jjjjhc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4457
  uint8_t posx , posy, tmpy, tmpx;
  char str1[3];
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    5198:	3b 01       	movw	r6, r22
    519a:	62 0e       	add	r6, r18
    519c:	73 1e       	adc	r7, r19
    519e:	84 0f       	add	r24, r20
    51a0:	95 1f       	adc	r25, r21
    51a2:	9d 83       	std	Y+5, r25	; 0x05
    51a4:	8c 83       	std	Y+4, r24	; 0x04
    51a6:	93 01       	movw	r18, r6
    51a8:	20 1b       	sub	r18, r16
    51aa:	31 0b       	sbc	r19, r17
    51ac:	4c 81       	ldd	r20, Y+4	; 0x04
    51ae:	5d 81       	ldd	r21, Y+5	; 0x05
    51b0:	40 1b       	sub	r20, r16
    51b2:	51 0b       	sbc	r21, r17
    51b4:	b5 01       	movw	r22, r10
    51b6:	60 0f       	add	r22, r16
    51b8:	71 1f       	adc	r23, r17
    51ba:	c6 01       	movw	r24, r12
    51bc:	80 0f       	add	r24, r16
    51be:	91 1f       	adc	r25, r17
    51c0:	0e 94 5d 7c 	call	0xf8ba	; 0xf8ba <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.188]>
    51c4:	0f 5f       	subi	r16, 0xFF	; 255
    51c6:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4456
void button_click_3(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t char_size, char znak)
{
  uint8_t posx , posy, tmpy, tmpx;
  char str1[3];
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    51c8:	03 30       	cpi	r16, 0x03	; 3
    51ca:	11 05       	cpc	r17, r1
    51cc:	61 f7       	brne	.-40     	; 0x51a6 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)+0x50>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4458
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  str1[0] = znak;
    51ce:	e9 82       	std	Y+1, r14	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4459
  str1[1] = 0;
    51d0:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4461
  tmpy = show_string_size_hight(char_size);
  tmpx = show_string_size_width(strlen(str1), char_size);
    51d2:	ce 01       	movw	r24, r28
    51d4:	01 96       	adiw	r24, 0x01	; 1
    51d6:	fc 01       	movw	r30, r24
    51d8:	01 90       	ld	r0, Z+
    51da:	00 20       	and	r0, r0
    51dc:	e9 f7       	brne	.-6      	; 0x51d8 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)+0x82>
    51de:	31 97       	sbiw	r30, 0x01	; 1
    51e0:	e8 1b       	sub	r30, r24
    51e2:	f9 0b       	sbc	r31, r25
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1934
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
    51e4:	29 2d       	mov	r18, r9
    51e6:	22 0f       	add	r18, r18
    51e8:	29 0d       	add	r18, r9
    51ea:	22 0f       	add	r18, r18
_Z14button_click_3jjjjhc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4463
  str1[0] = znak;
  str1[1] = 0;
  tmpy = show_string_size_hight(char_size);
  tmpx = show_string_size_width(strlen(str1), char_size);
  posx = (size_x - tmpx) / 2;
  posy = (size_y - tmpy) / 4;
    51ec:	a2 01       	movw	r20, r4
    51ee:	42 1b       	sub	r20, r18
    51f0:	51 09       	sbc	r21, r1
    51f2:	56 95       	lsr	r21
    51f4:	47 95       	ror	r20
    51f6:	56 95       	lsr	r21
    51f8:	47 95       	ror	r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4464
  show_string(str1, x + posx, y + posy, char_size, BLACK, WHITE, 0);
    51fa:	4a 0d       	add	r20, r10
    51fc:	5b 2d       	mov	r21, r11
    51fe:	51 1d       	adc	r21, r1
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1929
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    5200:	26 e0       	ldi	r18, 0x06	; 6
    5202:	e2 9f       	mul	r30, r18
    5204:	f0 01       	movw	r30, r0
    5206:	11 24       	eor	r1, r1
    5208:	9e 9e       	mul	r9, r30
    520a:	90 01       	movw	r18, r0
    520c:	9f 9e       	mul	r9, r31
    520e:	30 0d       	add	r19, r0
    5210:	11 24       	eor	r1, r1
_Z14button_click_3jjjjhc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4462
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  str1[0] = znak;
  str1[1] = 0;
  tmpy = show_string_size_hight(char_size);
  tmpx = show_string_size_width(strlen(str1), char_size);
  posx = (size_x - tmpx) / 2;
    5212:	33 27       	eor	r19, r19
    5214:	b1 01       	movw	r22, r2
    5216:	62 1b       	sub	r22, r18
    5218:	73 0b       	sbc	r23, r19
    521a:	76 95       	lsr	r23
    521c:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4464
  posy = (size_y - tmpy) / 4;
  show_string(str1, x + posx, y + posy, char_size, BLACK, WHITE, 0);
    521e:	6c 0d       	add	r22, r12
    5220:	7d 2d       	mov	r23, r13
    5222:	71 1d       	adc	r23, r1
    5224:	ee 24       	eor	r14, r14
    5226:	ea 94       	dec	r14
    5228:	fe 2c       	mov	r15, r14
    522a:	10 e0       	ldi	r17, 0x00	; 0
    522c:	00 e0       	ldi	r16, 0x00	; 0
    522e:	29 2d       	mov	r18, r9
    5230:	0e 94 37 7d 	call	0xfa6e	; 0xfa6e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4465
}
    5234:	0f 90       	pop	r0
    5236:	0f 90       	pop	r0
    5238:	0f 90       	pop	r0
    523a:	0f 90       	pop	r0
    523c:	0f 90       	pop	r0
    523e:	df 91       	pop	r29
    5240:	cf 91       	pop	r28
    5242:	1f 91       	pop	r17
    5244:	0f 91       	pop	r16
    5246:	ff 90       	pop	r15
    5248:	ef 90       	pop	r14
    524a:	df 90       	pop	r13
    524c:	cf 90       	pop	r12
    524e:	bf 90       	pop	r11
    5250:	af 90       	pop	r10
    5252:	9f 90       	pop	r9
    5254:	7f 90       	pop	r7
    5256:	6f 90       	pop	r6
    5258:	5f 90       	pop	r5
    525a:	4f 90       	pop	r4
    525c:	3f 90       	pop	r3
    525e:	2f 90       	pop	r2
    5260:	08 95       	ret

00005262 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z27display_element_show_time_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4101
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// funkce pro zobrazeni casu
void display_element_show_time_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    5262:	8f 92       	push	r8
    5264:	9f 92       	push	r9
    5266:	af 92       	push	r10
    5268:	bf 92       	push	r11
    526a:	cf 92       	push	r12
    526c:	df 92       	push	r13
    526e:	ef 92       	push	r14
    5270:	ff 92       	push	r15
    5272:	0f 93       	push	r16
    5274:	1f 93       	push	r17
    5276:	cf 93       	push	r28
    5278:	df 93       	push	r29
    527a:	cd b7       	in	r28, 0x3d	; 61
    527c:	de b7       	in	r29, 0x3e	; 62
    527e:	68 97       	sbiw	r28, 0x18	; 24
    5280:	0f b6       	in	r0, 0x3f	; 63
    5282:	f8 94       	cli
    5284:	de bf       	out	0x3e, r29	; 62
    5286:	0f be       	out	0x3f, r0	; 63
    5288:	cd bf       	out	0x3d, r28	; 61
    528a:	5c 01       	movw	r10, r24
    528c:	4b 01       	movw	r8, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4104
  char str1[24];
  uint16_t pos = 0;
  strcpy_P(str1, current_time);
    528e:	60 e7       	ldi	r22, 0x70	; 112
    5290:	7e e2       	ldi	r23, 0x2E	; 46
    5292:	ce 01       	movw	r24, r28
    5294:	01 96       	adiw	r24, 0x01	; 1
    5296:	6c 01       	movw	r12, r24
    5298:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4106
  pos = (244 - show_string_size_width(16, 1)) / 2;
  show_string(str1, x + pos + 5, y + 5, 1, BLACK, WHITE, 0);
    529c:	a4 01       	movw	r20, r8
    529e:	4b 5f       	subi	r20, 0xFB	; 251
    52a0:	5f 4f       	sbci	r21, 0xFF	; 255
    52a2:	b5 01       	movw	r22, r10
    52a4:	61 5b       	subi	r22, 0xB1	; 177
    52a6:	7f 4f       	sbci	r23, 0xFF	; 255
    52a8:	ee 24       	eor	r14, r14
    52aa:	ea 94       	dec	r14
    52ac:	fe 2c       	mov	r15, r14
    52ae:	10 e0       	ldi	r17, 0x00	; 0
    52b0:	00 e0       	ldi	r16, 0x00	; 0
    52b2:	21 e0       	ldi	r18, 0x01	; 1
    52b4:	c6 01       	movw	r24, r12
    52b6:	0e 94 37 7d 	call	0xfa6e	; 0xfa6e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]>
selftest_get_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3303
     ... 0 - neni oznacen jako chybny
     ... neni 0 - chybny flag
*/
uint8_t selftest_get_0(uint8_t what)
{
  return selftest_data & (1 << what);
    52ba:	80 91 ce 0a 	lds	r24, 0x0ACE	; 0x800ace <selftest_data>
_Z27display_element_show_time_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4107
  char str1[24];
  uint16_t pos = 0;
  strcpy_P(str1, current_time);
  pos = (244 - show_string_size_width(16, 1)) / 2;
  show_string(str1, x + pos + 5, y + 5, 1, BLACK, WHITE, 0);
  if (selftest_get_0(SELFTEST_ERR_RTC) == 0)
    52be:	80 fd       	sbrc	r24, 0
    52c0:	50 c0       	rjmp	.+160    	; 0x5362 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x100>
    52c2:	90 91 4e 10 	lds	r25, 0x104E	; 0x80104e <now+0x4>
    52c6:	80 91 4d 10 	lds	r24, 0x104D	; 0x80104d <now+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4109
  {
    if (uptime % 2 )
    52ca:	20 91 d7 0a 	lds	r18, 0x0AD7	; 0x800ad7 <uptime>
    52ce:	20 ff       	sbrs	r18, 0
    52d0:	41 c0       	rjmp	.+130    	; 0x5354 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xf2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4110
      sprintf(str1, "%02d:%02d", now.hour(), now.minute());
    52d2:	1f 92       	push	r1
    52d4:	9f 93       	push	r25
    52d6:	1f 92       	push	r1
    52d8:	8f 93       	push	r24
    52da:	8e e1       	ldi	r24, 0x1E	; 30
    52dc:	93 e0       	ldi	r25, 0x03	; 3
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4112
    else
      sprintf(str1, "%02d %02d", now.hour(), now.minute());
    52de:	9f 93       	push	r25
    52e0:	8f 93       	push	r24
    52e2:	df 92       	push	r13
    52e4:	cf 92       	push	r12
    52e6:	0e 94 d3 af 	call	0x15fa6	; 0x15fa6 <sprintf>
    52ea:	0f b6       	in	r0, 0x3f	; 63
    52ec:	f8 94       	cli
    52ee:	de bf       	out	0x3e, r29	; 62
    52f0:	0f be       	out	0x3f, r0	; 63
    52f2:	cd bf       	out	0x3d, r28	; 61
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    52f4:	10 92 c5 0d 	sts	0x0DC5, r1	; 0x800dc5 <my_lcd+0xb>
    52f8:	10 92 c4 0d 	sts	0x0DC4, r1	; 0x800dc4 <my_lcd+0xa>
_Z27display_element_show_time_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4119
  else
  {
    strcpy(str1, "--:--");
  }
  my_lcd.Set_Draw_color(BLACK);
  show_string(str1, x + 4, y + 20, 8, BLACK, WHITE, 0);
    52fc:	a4 01       	movw	r20, r8
    52fe:	4c 5e       	subi	r20, 0xEC	; 236
    5300:	5f 4f       	sbci	r21, 0xFF	; 255
    5302:	b5 01       	movw	r22, r10
    5304:	6c 5f       	subi	r22, 0xFC	; 252
    5306:	7f 4f       	sbci	r23, 0xFF	; 255
    5308:	ee 24       	eor	r14, r14
    530a:	ea 94       	dec	r14
    530c:	fe 2c       	mov	r15, r14
    530e:	10 e0       	ldi	r17, 0x00	; 0
    5310:	00 e0       	ldi	r16, 0x00	; 0
    5312:	28 e0       	ldi	r18, 0x08	; 8
    5314:	c6 01       	movw	r24, r12
    5316:	0e 94 37 7d 	call	0xfa6e	; 0xfa6e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4120
  my_lcd.Draw_Rectangle(x, y, x + 244, y + 84);
    531a:	94 01       	movw	r18, r8
    531c:	2c 5a       	subi	r18, 0xAC	; 172
    531e:	3f 4f       	sbci	r19, 0xFF	; 255
    5320:	a5 01       	movw	r20, r10
    5322:	4c 50       	subi	r20, 0x0C	; 12
    5324:	5f 4f       	sbci	r21, 0xFF	; 255
    5326:	b4 01       	movw	r22, r8
    5328:	c5 01       	movw	r24, r10
    532a:	0e 94 5d 7c 	call	0xf8ba	; 0xf8ba <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.188]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4121
}
    532e:	68 96       	adiw	r28, 0x18	; 24
    5330:	0f b6       	in	r0, 0x3f	; 63
    5332:	f8 94       	cli
    5334:	de bf       	out	0x3e, r29	; 62
    5336:	0f be       	out	0x3f, r0	; 63
    5338:	cd bf       	out	0x3d, r28	; 61
    533a:	df 91       	pop	r29
    533c:	cf 91       	pop	r28
    533e:	1f 91       	pop	r17
    5340:	0f 91       	pop	r16
    5342:	ff 90       	pop	r15
    5344:	ef 90       	pop	r14
    5346:	df 90       	pop	r13
    5348:	cf 90       	pop	r12
    534a:	bf 90       	pop	r11
    534c:	af 90       	pop	r10
    534e:	9f 90       	pop	r9
    5350:	8f 90       	pop	r8
    5352:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4112
  if (selftest_get_0(SELFTEST_ERR_RTC) == 0)
  {
    if (uptime % 2 )
      sprintf(str1, "%02d:%02d", now.hour(), now.minute());
    else
      sprintf(str1, "%02d %02d", now.hour(), now.minute());
    5354:	1f 92       	push	r1
    5356:	9f 93       	push	r25
    5358:	1f 92       	push	r1
    535a:	8f 93       	push	r24
    535c:	88 e2       	ldi	r24, 0x28	; 40
    535e:	93 e0       	ldi	r25, 0x03	; 3
    5360:	be cf       	rjmp	.-132    	; 0x52de <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x7c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4116
  }
  else
  {
    strcpy(str1, "--:--");
    5362:	62 e3       	ldi	r22, 0x32	; 50
    5364:	73 e0       	ldi	r23, 0x03	; 3
    5366:	c6 01       	movw	r24, r12
    5368:	0e 94 70 af 	call	0x15ee0	; 0x15ee0 <strcpy>
    536c:	c3 cf       	rjmp	.-122    	; 0x52f4 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x92>

0000536e <display_element_rectangle(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z25display_element_rectanglejjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4095
}


void display_element_rectangle(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
  my_lcd.Draw_Rectangle(x, y, x + size_x, y + size_y);
    536e:	26 0f       	add	r18, r22
    5370:	37 1f       	adc	r19, r23
    5372:	48 0f       	add	r20, r24
    5374:	59 1f       	adc	r21, r25
    5376:	0c 94 5d 7c 	jmp	0xf8ba	; 0xf8ba <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.188]>

0000537a <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)>:
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4392
  }
}
///////////////////////
/// typ tlacitka 2 ////
void button_click_2(uint16_t x, uint16_t y, uint8_t size_x, uint8_t size_y, uint8_t font_size_1, uint8_t font_size_2, uint16_t color_active , uint16_t color_inactive, uint8_t state, char *line1, char *line2)
{
    537a:	2f 92       	push	r2
    537c:	3f 92       	push	r3
    537e:	4f 92       	push	r4
    5380:	5f 92       	push	r5
    5382:	6f 92       	push	r6
    5384:	7f 92       	push	r7
    5386:	8f 92       	push	r8
    5388:	9f 92       	push	r9
    538a:	af 92       	push	r10
    538c:	bf 92       	push	r11
    538e:	cf 92       	push	r12
    5390:	df 92       	push	r13
    5392:	ef 92       	push	r14
    5394:	ff 92       	push	r15
    5396:	0f 93       	push	r16
    5398:	1f 93       	push	r17
    539a:	cf 93       	push	r28
    539c:	df 93       	push	r29
    539e:	1f 92       	push	r1
    53a0:	1f 92       	push	r1
    53a2:	cd b7       	in	r28, 0x3d	; 61
    53a4:	de b7       	in	r29, 0x3e	; 62
    53a6:	2c 01       	movw	r4, r24
    53a8:	3b 01       	movw	r6, r22
    53aa:	09 83       	std	Y+1, r16	; 0x01
    53ac:	ea 82       	std	Y+2, r14	; 0x02
    53ae:	3a 2c       	mov	r3, r10
    53b0:	2b 2c       	mov	r2, r11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4403
  uint16_t posy2 = 0;
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
  back_color = color_inactive;
  if (state == 1)
    53b2:	31 e0       	ldi	r19, 0x01	; 1
    53b4:	83 12       	cpse	r8, r19
    53b6:	02 c0       	rjmp	.+4      	; 0x53bc <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x42>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4404
    back_color = color_active;
    53b8:	3c 2c       	mov	r3, r12
    53ba:	2d 2c       	mov	r2, r13
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    53bc:	10 92 c5 0d 	sts	0x0DC5, r1	; 0x800dc5 <my_lcd+0xb>
    53c0:	10 92 c4 0d 	sts	0x0DC4, r1	; 0x800dc4 <my_lcd+0xa>
    53c4:	10 e0       	ldi	r17, 0x00	; 0
    53c6:	00 e0       	ldi	r16, 0x00	; 0
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4407
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    53c8:	a2 2e       	mov	r10, r18
    53ca:	b1 2c       	mov	r11, r1
    53cc:	84 2e       	mov	r8, r20
    53ce:	91 2c       	mov	r9, r1
    53d0:	65 01       	movw	r12, r10
    53d2:	c6 0c       	add	r12, r6
    53d4:	d7 1c       	adc	r13, r7
    53d6:	74 01       	movw	r14, r8
    53d8:	e4 0c       	add	r14, r4
    53da:	f5 1c       	adc	r15, r5
    53dc:	96 01       	movw	r18, r12
    53de:	20 1b       	sub	r18, r16
    53e0:	31 0b       	sbc	r19, r17
    53e2:	a7 01       	movw	r20, r14
    53e4:	40 1b       	sub	r20, r16
    53e6:	51 0b       	sbc	r21, r17
    53e8:	b3 01       	movw	r22, r6
    53ea:	60 0f       	add	r22, r16
    53ec:	71 1f       	adc	r23, r17
    53ee:	c2 01       	movw	r24, r4
    53f0:	80 0f       	add	r24, r16
    53f2:	91 1f       	adc	r25, r17
    53f4:	0e 94 5d 7c 	call	0xf8ba	; 0xf8ba <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.188]>
    53f8:	0f 5f       	subi	r16, 0xFF	; 255
    53fa:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4406
  uint8_t num_lines_const = 0;
  back_color = color_inactive;
  if (state == 1)
    back_color = color_active;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    53fc:	03 30       	cpi	r16, 0x03	; 3
    53fe:	11 05       	cpc	r17, r1
    5400:	69 f7       	brne	.-38     	; 0x53dc <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x62>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    5402:	30 92 c4 0d 	sts	0x0DC4, r3	; 0x800dc4 <my_lcd+0xa>
    5406:	20 92 c5 0d 	sts	0x0DC5, r2	; 0x800dc5 <my_lcd+0xb>
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4411
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);


  my_lcd.Set_Draw_color(back_color);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
    540a:	93 01       	movw	r18, r6
    540c:	23 50       	subi	r18, 0x03	; 3
    540e:	31 09       	sbc	r19, r1
    5410:	2a 0d       	add	r18, r10
    5412:	3b 1d       	adc	r19, r11
    5414:	a2 01       	movw	r20, r4
    5416:	43 50       	subi	r20, 0x03	; 3
    5418:	51 09       	sbc	r21, r1
    541a:	48 0d       	add	r20, r8
    541c:	59 1d       	adc	r21, r9
    541e:	b3 01       	movw	r22, r6
    5420:	6d 5f       	subi	r22, 0xFD	; 253
    5422:	7f 4f       	sbci	r23, 0xFF	; 255
    5424:	c2 01       	movw	r24, r4
    5426:	03 96       	adiw	r24, 0x03	; 3
    5428:	0e 94 b6 7c 	call	0xf96c	; 0xf96c <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.187]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4413

  if (strlen(line1) > 0)
    542c:	e8 8d       	ldd	r30, Y+24	; 0x18
    542e:	f9 8d       	ldd	r31, Y+25	; 0x19
    5430:	80 81       	ld	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4401
  uint16_t posy1 = 0;;
  uint16_t posx2 = 0;
  uint16_t posy2 = 0;
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
    5432:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4396
void button_click_2(uint16_t x, uint16_t y, uint8_t size_x, uint8_t size_y, uint8_t font_size_1, uint8_t font_size_2, uint16_t color_active , uint16_t color_inactive, uint8_t state, char *line1, char *line2)
{

  uint16_t back_color;
  uint16_t posx1 = 0;
  uint16_t posy1 = 0;;
    5434:	d1 2c       	mov	r13, r1
    5436:	c1 2c       	mov	r12, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4413


  my_lcd.Set_Draw_color(back_color);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);

  if (strlen(line1) > 0)
    5438:	88 23       	and	r24, r24
    543a:	b1 f1       	breq	.+108    	; 0x54a8 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x12e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4416
  {
    num_lines_const = 2;
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    543c:	01 90       	ld	r0, Z+
    543e:	00 20       	and	r0, r0
    5440:	e9 f7       	brne	.-6      	; 0x543c <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xc2>
    5442:	31 97       	sbiw	r30, 0x01	; 1
    5444:	28 8d       	ldd	r18, Y+24	; 0x18
    5446:	39 8d       	ldd	r19, Y+25	; 0x19
    5448:	e2 1b       	sub	r30, r18
    544a:	f3 0b       	sbc	r31, r19
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1934
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
    544c:	89 81       	ldd	r24, Y+1	; 0x01
    544e:	88 0f       	add	r24, r24
    5450:	39 81       	ldd	r19, Y+1	; 0x01
    5452:	83 0f       	add	r24, r19
    5454:	88 0f       	add	r24, r24
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4418
  if (strlen(line1) > 0)
  {
    num_lines_const = 2;
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    5456:	65 01       	movw	r12, r10
    5458:	c8 1a       	sub	r12, r24
    545a:	d1 08       	sbc	r13, r1
    545c:	d7 fe       	sbrs	r13, 7
    545e:	03 c0       	rjmp	.+6      	; 0x5466 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xec>
    5460:	8f ef       	ldi	r24, 0xFF	; 255
    5462:	c8 1a       	sub	r12, r24
    5464:	d8 0a       	sbc	r13, r24
    5466:	d5 94       	asr	r13
    5468:	c7 94       	ror	r12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4419
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, back_color, 0);
    546a:	a3 01       	movw	r20, r6
    546c:	41 50       	subi	r20, 0x01	; 1
    546e:	51 09       	sbc	r21, r1
    5470:	4c 0d       	add	r20, r12
    5472:	5d 1d       	adc	r21, r13
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1929
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    5474:	96 e0       	ldi	r25, 0x06	; 6
    5476:	e9 9f       	mul	r30, r25
    5478:	f0 01       	movw	r30, r0
    547a:	11 24       	eor	r1, r1
    547c:	29 81       	ldd	r18, Y+1	; 0x01
    547e:	2e 9f       	mul	r18, r30
    5480:	c0 01       	movw	r24, r0
    5482:	2f 9f       	mul	r18, r31
    5484:	90 0d       	add	r25, r0
    5486:	11 24       	eor	r1, r1
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4417

  if (strlen(line1) > 0)
  {
    num_lines_const = 2;
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
    5488:	b4 01       	movw	r22, r8
    548a:	68 1b       	sub	r22, r24
    548c:	79 0b       	sbc	r23, r25
    548e:	76 95       	lsr	r23
    5490:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4419
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, back_color, 0);
    5492:	64 0d       	add	r22, r4
    5494:	75 1d       	adc	r23, r5
    5496:	e3 2c       	mov	r14, r3
    5498:	f2 2c       	mov	r15, r2
    549a:	10 e0       	ldi	r17, 0x00	; 0
    549c:	00 e0       	ldi	r16, 0x00	; 0
    549e:	88 8d       	ldd	r24, Y+24	; 0x18
    54a0:	99 8d       	ldd	r25, Y+25	; 0x19
    54a2:	0e 94 37 7d 	call	0xfa6e	; 0xfa6e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4415
  my_lcd.Set_Draw_color(back_color);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);

  if (strlen(line1) > 0)
  {
    num_lines_const = 2;
    54a6:	62 e0       	ldi	r22, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4421
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, back_color, 0);
  }
  if (strlen(line2) > 0)
    54a8:	ea 8d       	ldd	r30, Y+26	; 0x1a
    54aa:	fb 8d       	ldd	r31, Y+27	; 0x1b
    54ac:	80 81       	ld	r24, Z
    54ae:	88 23       	and	r24, r24
    54b0:	b1 f1       	breq	.+108    	; 0x551e <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x1a4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4424
  {
    num_lines_const = num_lines_const + 2;
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    54b2:	01 90       	ld	r0, Z+
    54b4:	00 20       	and	r0, r0
    54b6:	e9 f7       	brne	.-6      	; 0x54b2 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x138>
    54b8:	31 97       	sbiw	r30, 0x01	; 1
    54ba:	2a 8d       	ldd	r18, Y+26	; 0x1a
    54bc:	3b 8d       	ldd	r19, Y+27	; 0x1b
    54be:	e2 1b       	sub	r30, r18
    54c0:	f3 0b       	sbc	r31, r19
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1934
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
    54c2:	8a 81       	ldd	r24, Y+2	; 0x02
    54c4:	88 0f       	add	r24, r24
    54c6:	3a 81       	ldd	r19, Y+2	; 0x02
    54c8:	83 0f       	add	r24, r19
    54ca:	88 0f       	add	r24, r24
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4426
  if (strlen(line2) > 0)
  {
    num_lines_const = num_lines_const + 2;
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) / num_lines_const);
    54cc:	95 01       	movw	r18, r10
    54ce:	28 1b       	sub	r18, r24
    54d0:	31 09       	sbc	r19, r1
    54d2:	c9 01       	movw	r24, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4423
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, back_color, 0);
  }
  if (strlen(line2) > 0)
  {
    num_lines_const = num_lines_const + 2;
    54d4:	6e 5f       	subi	r22, 0xFE	; 254
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4426
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) / num_lines_const);
    54d6:	70 e0       	ldi	r23, 0x00	; 0
    54d8:	0e 94 c5 ac 	call	0x1598a	; 0x1598a <__divmodhi4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4427
    show_string(line2, x + posx2 , y + posy2 - 1 , font_size_2, BLACK, back_color, 0);
    54dc:	31 e0       	ldi	r19, 0x01	; 1
    54de:	63 1a       	sub	r6, r19
    54e0:	71 08       	sbc	r7, r1
    54e2:	c6 0c       	add	r12, r6
    54e4:	d7 1c       	adc	r13, r7
    54e6:	ab 01       	movw	r20, r22
    54e8:	4c 0d       	add	r20, r12
    54ea:	5d 1d       	adc	r21, r13
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1929
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    54ec:	86 e0       	ldi	r24, 0x06	; 6
    54ee:	e8 9f       	mul	r30, r24
    54f0:	f0 01       	movw	r30, r0
    54f2:	11 24       	eor	r1, r1
    54f4:	2a 81       	ldd	r18, Y+2	; 0x02
    54f6:	2e 9f       	mul	r18, r30
    54f8:	c0 01       	movw	r24, r0
    54fa:	2f 9f       	mul	r18, r31
    54fc:	90 0d       	add	r25, r0
    54fe:	11 24       	eor	r1, r1
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4425
  }
  if (strlen(line2) > 0)
  {
    num_lines_const = num_lines_const + 2;
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
    5500:	b4 01       	movw	r22, r8
    5502:	68 1b       	sub	r22, r24
    5504:	79 0b       	sbc	r23, r25
    5506:	76 95       	lsr	r23
    5508:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4427
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) / num_lines_const);
    show_string(line2, x + posx2 , y + posy2 - 1 , font_size_2, BLACK, back_color, 0);
    550a:	64 0d       	add	r22, r4
    550c:	75 1d       	adc	r23, r5
    550e:	e3 2c       	mov	r14, r3
    5510:	f2 2c       	mov	r15, r2
    5512:	10 e0       	ldi	r17, 0x00	; 0
    5514:	00 e0       	ldi	r16, 0x00	; 0
    5516:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5518:	9b 8d       	ldd	r25, Y+27	; 0x1b
    551a:	0e 94 37 7d 	call	0xfa6e	; 0xfa6e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4429
  }
}
    551e:	0f 90       	pop	r0
    5520:	0f 90       	pop	r0
    5522:	df 91       	pop	r29
    5524:	cf 91       	pop	r28
    5526:	1f 91       	pop	r17
    5528:	0f 91       	pop	r16
    552a:	ff 90       	pop	r15
    552c:	ef 90       	pop	r14
    552e:	df 90       	pop	r13
    5530:	cf 90       	pop	r12
    5532:	bf 90       	pop	r11
    5534:	af 90       	pop	r10
    5536:	9f 90       	pop	r9
    5538:	8f 90       	pop	r8
    553a:	7f 90       	pop	r7
    553c:	6f 90       	pop	r6
    553e:	5f 90       	pop	r5
    5540:	4f 90       	pop	r4
    5542:	3f 90       	pop	r3
    5544:	2f 90       	pop	r2
    5546:	08 95       	ret

00005548 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)>:
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4356

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
/// typ tlacitka 1 ////
void button_click_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t font_size_1, uint8_t font_size_2, char *line1, char *line2, uint8_t clean)
{
    5548:	2f 92       	push	r2
    554a:	3f 92       	push	r3
    554c:	4f 92       	push	r4
    554e:	5f 92       	push	r5
    5550:	6f 92       	push	r6
    5552:	7f 92       	push	r7
    5554:	8f 92       	push	r8
    5556:	9f 92       	push	r9
    5558:	af 92       	push	r10
    555a:	bf 92       	push	r11
    555c:	cf 92       	push	r12
    555e:	df 92       	push	r13
    5560:	ef 92       	push	r14
    5562:	ff 92       	push	r15
    5564:	0f 93       	push	r16
    5566:	1f 93       	push	r17
    5568:	cf 93       	push	r28
    556a:	df 93       	push	r29
    556c:	00 d0       	rcall	.+0      	; 0x556e <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x26>
    556e:	1f 92       	push	r1
    5570:	1f 92       	push	r1
    5572:	cd b7       	in	r28, 0x3d	; 61
    5574:	de b7       	in	r29, 0x3e	; 62
    5576:	2c 01       	movw	r4, r24
    5578:	3b 01       	movw	r6, r22
    557a:	5a 83       	std	Y+2, r21	; 0x02
    557c:	49 83       	std	Y+1, r20	; 0x01
    557e:	19 01       	movw	r2, r18
    5580:	90 2e       	mov	r9, r16
    5582:	eb 82       	std	Y+3, r14	; 0x03
    5584:	dd 82       	std	Y+5, r13	; 0x05
    5586:	cc 82       	std	Y+4, r12	; 0x04
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    5588:	10 92 c5 0d 	sts	0x0DC5, r1	; 0x800dc5 <my_lcd+0xb>
    558c:	10 92 c4 0d 	sts	0x0DC4, r1	; 0x800dc4 <my_lcd+0xa>
    5590:	10 e0       	ldi	r17, 0x00	; 0
    5592:	00 e0       	ldi	r16, 0x00	; 0
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4366
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    5594:	6b 01       	movw	r12, r22
    5596:	c2 0e       	add	r12, r18
    5598:	d3 1e       	adc	r13, r19
    559a:	7a 01       	movw	r14, r20
    559c:	e8 0e       	add	r14, r24
    559e:	f9 1e       	adc	r15, r25
    55a0:	96 01       	movw	r18, r12
    55a2:	20 1b       	sub	r18, r16
    55a4:	31 0b       	sbc	r19, r17
    55a6:	a7 01       	movw	r20, r14
    55a8:	40 1b       	sub	r20, r16
    55aa:	51 0b       	sbc	r21, r17
    55ac:	b8 01       	movw	r22, r16
    55ae:	66 0d       	add	r22, r6
    55b0:	77 1d       	adc	r23, r7
    55b2:	c8 01       	movw	r24, r16
    55b4:	84 0d       	add	r24, r4
    55b6:	95 1d       	adc	r25, r5
    55b8:	0e 94 5d 7c 	call	0xf8ba	; 0xf8ba <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.188]>
    55bc:	0f 5f       	subi	r16, 0xFF	; 255
    55be:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4365
  uint16_t posy2 = 0;
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    55c0:	03 30       	cpi	r16, 0x03	; 3
    55c2:	11 05       	cpc	r17, r1
    55c4:	69 f7       	brne	.-38     	; 0x55a0 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x58>
    55c6:	91 01       	movw	r18, r2
    55c8:	23 50       	subi	r18, 0x03	; 3
    55ca:	31 09       	sbc	r19, r1
    55cc:	49 81       	ldd	r20, Y+1	; 0x01
    55ce:	5a 81       	ldd	r21, Y+2	; 0x02
    55d0:	43 50       	subi	r20, 0x03	; 3
    55d2:	51 09       	sbc	r21, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4367
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  if (clean == 1)
    55d4:	61 e0       	ldi	r22, 0x01	; 1
    55d6:	86 12       	cpse	r8, r22
    55d8:	11 c0       	rjmp	.+34     	; 0x55fc <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0xb4>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    55da:	8f ef       	ldi	r24, 0xFF	; 255
    55dc:	9f ef       	ldi	r25, 0xFF	; 255
    55de:	90 93 c5 0d 	sts	0x0DC5, r25	; 0x800dc5 <my_lcd+0xb>
    55e2:	80 93 c4 0d 	sts	0x0DC4, r24	; 0x800dc4 <my_lcd+0xa>
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4370
  {
    my_lcd.Set_Draw_color(WHITE);
    my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
    55e6:	26 0d       	add	r18, r6
    55e8:	37 1d       	adc	r19, r7
    55ea:	44 0d       	add	r20, r4
    55ec:	55 1d       	adc	r21, r5
    55ee:	b3 01       	movw	r22, r6
    55f0:	6d 5f       	subi	r22, 0xFD	; 253
    55f2:	7f 4f       	sbci	r23, 0xFF	; 255
    55f4:	c2 01       	movw	r24, r4
    55f6:	03 96       	adiw	r24, 0x03	; 3
    55f8:	0e 94 b6 7c 	call	0xf96c	; 0xf96c <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.187]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4372
  }
  if (strlen(line1) > 0)
    55fc:	ec 81       	ldd	r30, Y+4	; 0x04
    55fe:	fd 81       	ldd	r31, Y+5	; 0x05
    5600:	80 81       	ld	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4363
  uint16_t posy1 = 0;;
  uint16_t posx2 = 0;
  uint16_t posy2 = 0;
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
    5602:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4358
//////////////////////////////////////////////////////////
/// typ tlacitka 1 ////
void button_click_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t font_size_1, uint8_t font_size_2, char *line1, char *line2, uint8_t clean)
{
  uint16_t posx1 = 0;
  uint16_t posy1 = 0;;
    5604:	d1 2c       	mov	r13, r1
    5606:	c1 2c       	mov	r12, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4372
  if (clean == 1)
  {
    my_lcd.Set_Draw_color(WHITE);
    my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
  }
  if (strlen(line1) > 0)
    5608:	88 23       	and	r24, r24
    560a:	91 f1       	breq	.+100    	; 0x5670 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x128>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4375
  {
    num_lines_const = 2;
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    560c:	01 90       	ld	r0, Z+
    560e:	00 20       	and	r0, r0
    5610:	e9 f7       	brne	.-6      	; 0x560c <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0xc4>
    5612:	31 97       	sbiw	r30, 0x01	; 1
    5614:	4c 81       	ldd	r20, Y+4	; 0x04
    5616:	5d 81       	ldd	r21, Y+5	; 0x05
    5618:	e4 1b       	sub	r30, r20
    561a:	f5 0b       	sbc	r31, r21
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1934
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
    561c:	89 2d       	mov	r24, r9
    561e:	88 0f       	add	r24, r24
    5620:	89 0d       	add	r24, r9
    5622:	88 0f       	add	r24, r24
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4377
  if (strlen(line1) > 0)
  {
    num_lines_const = 2;
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    5624:	61 01       	movw	r12, r2
    5626:	c8 1a       	sub	r12, r24
    5628:	d1 08       	sbc	r13, r1
    562a:	d6 94       	lsr	r13
    562c:	c7 94       	ror	r12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4378
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, WHITE, 0);
    562e:	a3 01       	movw	r20, r6
    5630:	41 50       	subi	r20, 0x01	; 1
    5632:	51 09       	sbc	r21, r1
    5634:	4c 0d       	add	r20, r12
    5636:	5d 1d       	adc	r21, r13
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1929
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    5638:	66 e0       	ldi	r22, 0x06	; 6
    563a:	e6 9f       	mul	r30, r22
    563c:	f0 01       	movw	r30, r0
    563e:	11 24       	eor	r1, r1
    5640:	9e 9e       	mul	r9, r30
    5642:	c0 01       	movw	r24, r0
    5644:	9f 9e       	mul	r9, r31
    5646:	90 0d       	add	r25, r0
    5648:	11 24       	eor	r1, r1
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4376
  }
  if (strlen(line1) > 0)
  {
    num_lines_const = 2;
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
    564a:	69 81       	ldd	r22, Y+1	; 0x01
    564c:	7a 81       	ldd	r23, Y+2	; 0x02
    564e:	68 1b       	sub	r22, r24
    5650:	79 0b       	sbc	r23, r25
    5652:	76 95       	lsr	r23
    5654:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4378
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, WHITE, 0);
    5656:	64 0d       	add	r22, r4
    5658:	75 1d       	adc	r23, r5
    565a:	ee 24       	eor	r14, r14
    565c:	ea 94       	dec	r14
    565e:	fe 2c       	mov	r15, r14
    5660:	10 e0       	ldi	r17, 0x00	; 0
    5662:	00 e0       	ldi	r16, 0x00	; 0
    5664:	29 2d       	mov	r18, r9
    5666:	8c 81       	ldd	r24, Y+4	; 0x04
    5668:	9d 81       	ldd	r25, Y+5	; 0x05
    566a:	0e 94 37 7d 	call	0xfa6e	; 0xfa6e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4374
    my_lcd.Set_Draw_color(WHITE);
    my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
  }
  if (strlen(line1) > 0)
  {
    num_lines_const = 2;
    566e:	62 e0       	ldi	r22, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4380
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, WHITE, 0);
  }
  if (strlen(line2) > 0)
    5670:	f5 01       	movw	r30, r10
    5672:	80 81       	ld	r24, Z
    5674:	88 23       	and	r24, r24
    5676:	b9 f1       	breq	.+110    	; 0x56e6 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x19e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4383
  {
    num_lines_const = num_lines_const + 2;
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    5678:	01 90       	ld	r0, Z+
    567a:	00 20       	and	r0, r0
    567c:	e9 f7       	brne	.-6      	; 0x5678 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x130>
    567e:	9f 01       	movw	r18, r30
    5680:	21 50       	subi	r18, 0x01	; 1
    5682:	31 09       	sbc	r19, r1
    5684:	2a 19       	sub	r18, r10
    5686:	3b 09       	sbc	r19, r11
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1934
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
    5688:	8b 81       	ldd	r24, Y+3	; 0x03
    568a:	88 0f       	add	r24, r24
    568c:	fb 81       	ldd	r31, Y+3	; 0x03
    568e:	8f 0f       	add	r24, r31
    5690:	88 0f       	add	r24, r24
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4385
  if (strlen(line2) > 0)
  {
    num_lines_const = num_lines_const + 2;
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) / num_lines_const);
    5692:	a1 01       	movw	r20, r2
    5694:	48 1b       	sub	r20, r24
    5696:	51 09       	sbc	r21, r1
    5698:	ca 01       	movw	r24, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4382
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, WHITE, 0);
  }
  if (strlen(line2) > 0)
  {
    num_lines_const = num_lines_const + 2;
    569a:	6e 5f       	subi	r22, 0xFE	; 254
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4385
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) / num_lines_const);
    569c:	70 e0       	ldi	r23, 0x00	; 0
    569e:	0e 94 b1 ac 	call	0x15962	; 0x15962 <__udivmodhi4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4386
    show_string(line2, x + posx2 , y + posy2 - 1 , font_size_2, BLACK, WHITE, 0);
    56a2:	51 e0       	ldi	r21, 0x01	; 1
    56a4:	65 1a       	sub	r6, r21
    56a6:	71 08       	sbc	r7, r1
    56a8:	c6 0c       	add	r12, r6
    56aa:	d7 1c       	adc	r13, r7
    56ac:	ab 01       	movw	r20, r22
    56ae:	4c 0d       	add	r20, r12
    56b0:	5d 1d       	adc	r21, r13
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1929
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    56b2:	66 e0       	ldi	r22, 0x06	; 6
    56b4:	26 9f       	mul	r18, r22
    56b6:	90 01       	movw	r18, r0
    56b8:	11 24       	eor	r1, r1
    56ba:	f2 9f       	mul	r31, r18
    56bc:	c0 01       	movw	r24, r0
    56be:	f3 9f       	mul	r31, r19
    56c0:	90 0d       	add	r25, r0
    56c2:	11 24       	eor	r1, r1
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4384
  }
  if (strlen(line2) > 0)
  {
    num_lines_const = num_lines_const + 2;
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
    56c4:	69 81       	ldd	r22, Y+1	; 0x01
    56c6:	7a 81       	ldd	r23, Y+2	; 0x02
    56c8:	68 1b       	sub	r22, r24
    56ca:	79 0b       	sbc	r23, r25
    56cc:	76 95       	lsr	r23
    56ce:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4386
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) / num_lines_const);
    show_string(line2, x + posx2 , y + posy2 - 1 , font_size_2, BLACK, WHITE, 0);
    56d0:	64 0d       	add	r22, r4
    56d2:	75 1d       	adc	r23, r5
    56d4:	ee 24       	eor	r14, r14
    56d6:	ea 94       	dec	r14
    56d8:	fe 2c       	mov	r15, r14
    56da:	10 e0       	ldi	r17, 0x00	; 0
    56dc:	00 e0       	ldi	r16, 0x00	; 0
    56de:	2f 2f       	mov	r18, r31
    56e0:	c5 01       	movw	r24, r10
    56e2:	0e 94 37 7d 	call	0xfa6e	; 0xfa6e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4388
  }
}
    56e6:	0f 90       	pop	r0
    56e8:	0f 90       	pop	r0
    56ea:	0f 90       	pop	r0
    56ec:	0f 90       	pop	r0
    56ee:	0f 90       	pop	r0
    56f0:	df 91       	pop	r29
    56f2:	cf 91       	pop	r28
    56f4:	1f 91       	pop	r17
    56f6:	0f 91       	pop	r16
    56f8:	ff 90       	pop	r15
    56fa:	ef 90       	pop	r14
    56fc:	df 90       	pop	r13
    56fe:	cf 90       	pop	r12
    5700:	bf 90       	pop	r11
    5702:	af 90       	pop	r10
    5704:	9f 90       	pop	r9
    5706:	8f 90       	pop	r8
    5708:	7f 90       	pop	r7
    570a:	6f 90       	pop	r6
    570c:	5f 90       	pop	r5
    570e:	4f 90       	pop	r4
    5710:	3f 90       	pop	r3
    5712:	2f 90       	pop	r2
    5714:	08 95       	ret

00005716 <display_element_vertical_slider(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z31display_element_vertical_sliderjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4306
/*
   dynamicke posouvani v menu

*/
void display_element_vertical_slider(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    5716:	4f 92       	push	r4
    5718:	5f 92       	push	r5
    571a:	6f 92       	push	r6
    571c:	7f 92       	push	r7
    571e:	8f 92       	push	r8
    5720:	9f 92       	push	r9
    5722:	af 92       	push	r10
    5724:	bf 92       	push	r11
    5726:	cf 92       	push	r12
    5728:	df 92       	push	r13
    572a:	ef 92       	push	r14
    572c:	ff 92       	push	r15
    572e:	0f 93       	push	r16
    5730:	cf 93       	push	r28
    5732:	df 93       	push	r29
    5734:	ec 01       	movw	r28, r24
    5736:	6b 01       	movw	r12, r22
    5738:	2a 01       	movw	r4, r20
    573a:	59 01       	movw	r10, r18
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    573c:	10 92 c5 0d 	sts	0x0DC5, r1	; 0x800dc5 <my_lcd+0xb>
    5740:	10 92 c4 0d 	sts	0x0DC4, r1	; 0x800dc4 <my_lcd+0xa>
    5744:	f1 2c       	mov	r15, r1
    5746:	e1 2c       	mov	r14, r1
_Z31display_element_vertical_sliderjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4310
  uint8_t sy;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    5748:	3b 01       	movw	r6, r22
    574a:	62 0e       	add	r6, r18
    574c:	73 1e       	adc	r7, r19
    574e:	4c 01       	movw	r8, r24
    5750:	84 0e       	add	r8, r20
    5752:	95 1e       	adc	r9, r21
    5754:	93 01       	movw	r18, r6
    5756:	2e 19       	sub	r18, r14
    5758:	3f 09       	sbc	r19, r15
    575a:	a4 01       	movw	r20, r8
    575c:	4e 19       	sub	r20, r14
    575e:	5f 09       	sbc	r21, r15
    5760:	b7 01       	movw	r22, r14
    5762:	6c 0d       	add	r22, r12
    5764:	7d 1d       	adc	r23, r13
    5766:	c7 01       	movw	r24, r14
    5768:	8c 0f       	add	r24, r28
    576a:	9d 1f       	adc	r25, r29
    576c:	0e 94 5d 7c 	call	0xf8ba	; 0xf8ba <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.188]>
    5770:	8f ef       	ldi	r24, 0xFF	; 255
    5772:	e8 1a       	sub	r14, r24
    5774:	f8 0a       	sbc	r15, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4309
*/
void display_element_vertical_slider(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
  uint8_t sy;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    5776:	83 e0       	ldi	r24, 0x03	; 3
    5778:	e8 16       	cp	r14, r24
    577a:	f1 04       	cpc	r15, r1
    577c:	59 f7       	brne	.-42     	; 0x5754 <display_element_vertical_slider(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x3e>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    577e:	8f ef       	ldi	r24, 0xFF	; 255
    5780:	9f ef       	ldi	r25, 0xFF	; 255
    5782:	90 93 c5 0d 	sts	0x0DC5, r25	; 0x800dc5 <my_lcd+0xb>
    5786:	80 93 c4 0d 	sts	0x0DC4, r24	; 0x800dc4 <my_lcd+0xa>
_Z31display_element_vertical_sliderjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4312
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
    578a:	83 e0       	ldi	r24, 0x03	; 3
    578c:	48 1a       	sub	r4, r24
    578e:	51 08       	sbc	r5, r1
    5790:	4c 0e       	add	r4, r28
    5792:	5d 1e       	adc	r5, r29
    5794:	23 96       	adiw	r28, 0x03	; 3
    5796:	95 01       	movw	r18, r10
    5798:	23 50       	subi	r18, 0x03	; 3
    579a:	31 09       	sbc	r19, r1
    579c:	2c 0d       	add	r18, r12
    579e:	3d 1d       	adc	r19, r13
    57a0:	b6 01       	movw	r22, r12
    57a2:	6d 5f       	subi	r22, 0xFD	; 253
    57a4:	7f 4f       	sbci	r23, 0xFF	; 255
    57a6:	a2 01       	movw	r20, r4
    57a8:	ce 01       	movw	r24, r28
    57aa:	0e 94 b6 7c 	call	0xf96c	; 0xf96c <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.187]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4313
  sy = (size_y / (menu_slider_data_max - menu_slider_data_max_element + 1)) * menu_slider_data_current[args1];
    57ae:	60 91 ab 08 	lds	r22, 0x08AB	; 0x8008ab <menu_slider_data_max>
    57b2:	80 91 a9 08 	lds	r24, 0x08A9	; 0x8008a9 <menu_slider_data_max_element>
    57b6:	68 1b       	sub	r22, r24
    57b8:	77 0b       	sbc	r23, r23
    57ba:	6f 5f       	subi	r22, 0xFF	; 255
    57bc:	7f 4f       	sbci	r23, 0xFF	; 255
    57be:	c5 01       	movw	r24, r10
    57c0:	0e 94 b1 ac 	call	0x15962	; 0x15962 <__udivmodhi4>
    57c4:	e0 2f       	mov	r30, r16
    57c6:	f0 e0       	ldi	r31, 0x00	; 0
    57c8:	ec 55       	subi	r30, 0x5C	; 92
    57ca:	f7 4f       	sbci	r31, 0xF7	; 247
    57cc:	80 81       	ld	r24, Z
    57ce:	86 9f       	mul	r24, r22
    57d0:	60 2d       	mov	r22, r0
    57d2:	11 24       	eor	r1, r1
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    57d4:	8a e9       	ldi	r24, 0x9A	; 154
    57d6:	96 ed       	ldi	r25, 0xD6	; 214
    57d8:	90 93 c5 0d 	sts	0x0DC5, r25	; 0x800dc5 <my_lcd+0xb>
    57dc:	80 93 c4 0d 	sts	0x0DC4, r24	; 0x800dc4 <my_lcd+0xa>
_Z31display_element_vertical_sliderjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4315
  my_lcd.Set_Draw_color(GRAY);
  my_lcd.Fill_Rectangle(x + 3, y + sy + 5, x + size_x - 3, y + sy + 10);
    57e0:	6c 0d       	add	r22, r12
    57e2:	7d 2d       	mov	r23, r13
    57e4:	71 1d       	adc	r23, r1
    57e6:	9b 01       	movw	r18, r22
    57e8:	26 5f       	subi	r18, 0xF6	; 246
    57ea:	3f 4f       	sbci	r19, 0xFF	; 255
    57ec:	6b 5f       	subi	r22, 0xFB	; 251
    57ee:	7f 4f       	sbci	r23, 0xFF	; 255
    57f0:	a2 01       	movw	r20, r4
    57f2:	ce 01       	movw	r24, r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4316
}
    57f4:	df 91       	pop	r29
    57f6:	cf 91       	pop	r28
    57f8:	0f 91       	pop	r16
    57fa:	ff 90       	pop	r15
    57fc:	ef 90       	pop	r14
    57fe:	df 90       	pop	r13
    5800:	cf 90       	pop	r12
    5802:	bf 90       	pop	r11
    5804:	af 90       	pop	r10
    5806:	9f 90       	pop	r9
    5808:	8f 90       	pop	r8
    580a:	7f 90       	pop	r7
    580c:	6f 90       	pop	r6
    580e:	5f 90       	pop	r5
    5810:	4f 90       	pop	r4
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4315
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
  sy = (size_y / (menu_slider_data_max - menu_slider_data_max_element + 1)) * menu_slider_data_current[args1];
  my_lcd.Set_Draw_color(GRAY);
  my_lcd.Fill_Rectangle(x + 3, y + sy + 5, x + size_x - 3, y + sy + 10);
    5812:	0c 94 b6 7c 	jmp	0xf96c	; 0xf96c <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.187]>

00005816 <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z33display_element_dialog_set_stringjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4284
  posy1 = (size_y - show_string_size_hight(2)) / 2;
  show_string(line1, x + posx1 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
}
//////////////
void display_element_dialog_set_string(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    5816:	6f 92       	push	r6
    5818:	7f 92       	push	r7
    581a:	8f 92       	push	r8
    581c:	9f 92       	push	r9
    581e:	af 92       	push	r10
    5820:	bf 92       	push	r11
    5822:	cf 92       	push	r12
    5824:	df 92       	push	r13
    5826:	ef 92       	push	r14
    5828:	ff 92       	push	r15
    582a:	0f 93       	push	r16
    582c:	1f 93       	push	r17
    582e:	cf 93       	push	r28
    5830:	df 93       	push	r29
    5832:	6c 01       	movw	r12, r24
    5834:	8b 01       	movw	r16, r22
    5836:	3a 01       	movw	r6, r20
    5838:	e9 01       	movw	r28, r18
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    583a:	10 92 c5 0d 	sts	0x0DC5, r1	; 0x800dc5 <my_lcd+0xb>
    583e:	10 92 c4 0d 	sts	0x0DC4, r1	; 0x800dc4 <my_lcd+0xa>
    5842:	f1 2c       	mov	r15, r1
    5844:	e1 2c       	mov	r14, r1
_Z33display_element_dialog_set_stringjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4288
  uint16_t tmp1, posx1, posy1;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    5846:	4b 01       	movw	r8, r22
    5848:	82 0e       	add	r8, r18
    584a:	93 1e       	adc	r9, r19
    584c:	5c 01       	movw	r10, r24
    584e:	a4 0e       	add	r10, r20
    5850:	b5 1e       	adc	r11, r21
    5852:	94 01       	movw	r18, r8
    5854:	2e 19       	sub	r18, r14
    5856:	3f 09       	sbc	r19, r15
    5858:	a5 01       	movw	r20, r10
    585a:	4e 19       	sub	r20, r14
    585c:	5f 09       	sbc	r21, r15
    585e:	b7 01       	movw	r22, r14
    5860:	60 0f       	add	r22, r16
    5862:	71 1f       	adc	r23, r17
    5864:	c7 01       	movw	r24, r14
    5866:	8c 0d       	add	r24, r12
    5868:	9d 1d       	adc	r25, r13
    586a:	0e 94 5d 7c 	call	0xf8ba	; 0xf8ba <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.188]>
    586e:	2f ef       	ldi	r18, 0xFF	; 255
    5870:	e2 1a       	sub	r14, r18
    5872:	f2 0a       	sbc	r15, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4287
//////////////
void display_element_dialog_set_string(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
  uint16_t tmp1, posx1, posy1;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    5874:	83 e0       	ldi	r24, 0x03	; 3
    5876:	e8 16       	cp	r14, r24
    5878:	f1 04       	cpc	r15, r1
    587a:	59 f7       	brne	.-42     	; 0x5852 <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x3c>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    587c:	8f ef       	ldi	r24, 0xFF	; 255
    587e:	9f ef       	ldi	r25, 0xFF	; 255
    5880:	90 93 c5 0d 	sts	0x0DC5, r25	; 0x800dc5 <my_lcd+0xb>
    5884:	80 93 c4 0d 	sts	0x0DC4, r24	; 0x800dc4 <my_lcd+0xa>
_Z33display_element_dialog_set_stringjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4290
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
    5888:	9e 01       	movw	r18, r28
    588a:	23 50       	subi	r18, 0x03	; 3
    588c:	31 09       	sbc	r19, r1
    588e:	20 0f       	add	r18, r16
    5890:	31 1f       	adc	r19, r17
    5892:	a3 01       	movw	r20, r6
    5894:	43 50       	subi	r20, 0x03	; 3
    5896:	51 09       	sbc	r21, r1
    5898:	4c 0d       	add	r20, r12
    589a:	5d 1d       	adc	r21, r13
    589c:	b8 01       	movw	r22, r16
    589e:	6d 5f       	subi	r22, 0xFD	; 253
    58a0:	7f 4f       	sbci	r23, 0xFF	; 255
    58a2:	c6 01       	movw	r24, r12
    58a4:	03 96       	adiw	r24, 0x03	; 3
    58a6:	0e 94 b6 7c 	call	0xf96c	; 0xf96c <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.187]>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    58aa:	10 92 c5 0d 	sts	0x0DC5, r1	; 0x800dc5 <my_lcd+0xb>
    58ae:	10 92 c4 0d 	sts	0x0DC4, r1	; 0x800dc4 <my_lcd+0xa>
_Z33display_element_dialog_set_stringjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4293

  my_lcd.Set_Draw_color(BLACK);
  tmp1 = show_string_size_width(strlen(dialog_set_string), 2);
    58b2:	82 ed       	ldi	r24, 0xD2	; 210
    58b4:	98 e0       	ldi	r25, 0x08	; 8
    58b6:	fc 01       	movw	r30, r24
    58b8:	01 90       	ld	r0, Z+
    58ba:	00 20       	and	r0, r0
    58bc:	e9 f7       	brne	.-6      	; 0x58b8 <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xa2>
    58be:	cf 01       	movw	r24, r30
    58c0:	83 5d       	subi	r24, 0xD3	; 211
    58c2:	98 40       	sbci	r25, 0x08	; 8
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4295
  posx1 = (size_x - tmp1) / 2;
  posy1 = (size_y - show_string_size_hight(2)) / 2;
    58c4:	ae 01       	movw	r20, r28
    58c6:	4c 50       	subi	r20, 0x0C	; 12
    58c8:	51 09       	sbc	r21, r1
    58ca:	56 95       	lsr	r21
    58cc:	47 95       	ror	r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4296
  show_string(dialog_set_string, x + posx1 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
    58ce:	01 50       	subi	r16, 0x01	; 1
    58d0:	11 09       	sbc	r17, r1
    58d2:	40 0f       	add	r20, r16
    58d4:	51 1f       	adc	r21, r17
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1929
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    58d6:	f6 e0       	ldi	r31, 0x06	; 6
    58d8:	8f 9f       	mul	r24, r31
    58da:	c0 01       	movw	r24, r0
    58dc:	11 24       	eor	r1, r1
    58de:	88 0f       	add	r24, r24
    58e0:	99 1f       	adc	r25, r25
_Z33display_element_dialog_set_stringjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4294
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);

  my_lcd.Set_Draw_color(BLACK);
  tmp1 = show_string_size_width(strlen(dialog_set_string), 2);
  posx1 = (size_x - tmp1) / 2;
    58e2:	b3 01       	movw	r22, r6
    58e4:	68 1b       	sub	r22, r24
    58e6:	79 0b       	sbc	r23, r25
    58e8:	76 95       	lsr	r23
    58ea:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4296
  posy1 = (size_y - show_string_size_hight(2)) / 2;
  show_string(dialog_set_string, x + posx1 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
    58ec:	6c 0d       	add	r22, r12
    58ee:	7d 1d       	adc	r23, r13
    58f0:	ee 24       	eor	r14, r14
    58f2:	ea 94       	dec	r14
    58f4:	fe 2c       	mov	r15, r14
    58f6:	10 e0       	ldi	r17, 0x00	; 0
    58f8:	00 e0       	ldi	r16, 0x00	; 0
    58fa:	22 e0       	ldi	r18, 0x02	; 2
    58fc:	82 ed       	ldi	r24, 0xD2	; 210
    58fe:	98 e0       	ldi	r25, 0x08	; 8
    5900:	0e 94 37 7d 	call	0xfa6e	; 0xfa6e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4297
}
    5904:	df 91       	pop	r29
    5906:	cf 91       	pop	r28
    5908:	1f 91       	pop	r17
    590a:	0f 91       	pop	r16
    590c:	ff 90       	pop	r15
    590e:	ef 90       	pop	r14
    5910:	df 90       	pop	r13
    5912:	cf 90       	pop	r12
    5914:	bf 90       	pop	r11
    5916:	af 90       	pop	r10
    5918:	9f 90       	pop	r9
    591a:	8f 90       	pop	r8
    591c:	7f 90       	pop	r7
    591e:	6f 90       	pop	r6
    5920:	08 95       	ret

00005922 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z35display_element_dialog_set_variablejjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4266
    show_string(str1, x + 5, y + 100 , 2, BLACK, WHITE, 0);
  }
}
////////////////////////////////////////////////////////
void display_element_dialog_set_variable(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    5922:	4f 92       	push	r4
    5924:	5f 92       	push	r5
    5926:	6f 92       	push	r6
    5928:	7f 92       	push	r7
    592a:	8f 92       	push	r8
    592c:	9f 92       	push	r9
    592e:	af 92       	push	r10
    5930:	bf 92       	push	r11
    5932:	cf 92       	push	r12
    5934:	df 92       	push	r13
    5936:	ef 92       	push	r14
    5938:	ff 92       	push	r15
    593a:	0f 93       	push	r16
    593c:	1f 93       	push	r17
    593e:	cf 93       	push	r28
    5940:	df 93       	push	r29
    5942:	00 d0       	rcall	.+0      	; 0x5944 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x22>
    5944:	00 d0       	rcall	.+0      	; 0x5946 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x24>
    5946:	1f 92       	push	r1
    5948:	1f 92       	push	r1
    594a:	cd b7       	in	r28, 0x3d	; 61
    594c:	de b7       	in	r29, 0x3e	; 62
    594e:	6c 01       	movw	r12, r24
    5950:	8b 01       	movw	r16, r22
    5952:	2a 01       	movw	r4, r20
    5954:	39 01       	movw	r6, r18
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    5956:	10 92 c5 0d 	sts	0x0DC5, r1	; 0x800dc5 <my_lcd+0xb>
    595a:	10 92 c4 0d 	sts	0x0DC4, r1	; 0x800dc4 <my_lcd+0xa>
    595e:	f1 2c       	mov	r15, r1
    5960:	e1 2c       	mov	r14, r1
_Z35display_element_dialog_set_variablejjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4271
  uint16_t tmp1, posx1, posy1;
  char line1[8];
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    5962:	4b 01       	movw	r8, r22
    5964:	82 0e       	add	r8, r18
    5966:	93 1e       	adc	r9, r19
    5968:	5c 01       	movw	r10, r24
    596a:	a4 0e       	add	r10, r20
    596c:	b5 1e       	adc	r11, r21
    596e:	94 01       	movw	r18, r8
    5970:	2e 19       	sub	r18, r14
    5972:	3f 09       	sbc	r19, r15
    5974:	a5 01       	movw	r20, r10
    5976:	4e 19       	sub	r20, r14
    5978:	5f 09       	sbc	r21, r15
    597a:	b7 01       	movw	r22, r14
    597c:	60 0f       	add	r22, r16
    597e:	71 1f       	adc	r23, r17
    5980:	c7 01       	movw	r24, r14
    5982:	8c 0d       	add	r24, r12
    5984:	9d 1d       	adc	r25, r13
    5986:	0e 94 5d 7c 	call	0xf8ba	; 0xf8ba <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.188]>
    598a:	8f ef       	ldi	r24, 0xFF	; 255
    598c:	e8 1a       	sub	r14, r24
    598e:	f8 0a       	sbc	r15, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4270
void display_element_dialog_set_variable(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
  uint16_t tmp1, posx1, posy1;
  char line1[8];
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    5990:	93 e0       	ldi	r25, 0x03	; 3
    5992:	e9 16       	cp	r14, r25
    5994:	f1 04       	cpc	r15, r1
    5996:	59 f7       	brne	.-42     	; 0x596e <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x4c>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    5998:	8f ef       	ldi	r24, 0xFF	; 255
    599a:	9f ef       	ldi	r25, 0xFF	; 255
    599c:	90 93 c5 0d 	sts	0x0DC5, r25	; 0x800dc5 <my_lcd+0xb>
    59a0:	80 93 c4 0d 	sts	0x0DC4, r24	; 0x800dc4 <my_lcd+0xa>
_Z35display_element_dialog_set_variablejjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4273
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
    59a4:	93 01       	movw	r18, r6
    59a6:	23 50       	subi	r18, 0x03	; 3
    59a8:	31 09       	sbc	r19, r1
    59aa:	20 0f       	add	r18, r16
    59ac:	31 1f       	adc	r19, r17
    59ae:	a2 01       	movw	r20, r4
    59b0:	43 50       	subi	r20, 0x03	; 3
    59b2:	51 09       	sbc	r21, r1
    59b4:	4c 0d       	add	r20, r12
    59b6:	5d 1d       	adc	r21, r13
    59b8:	b8 01       	movw	r22, r16
    59ba:	6d 5f       	subi	r22, 0xFD	; 253
    59bc:	7f 4f       	sbci	r23, 0xFF	; 255
    59be:	c6 01       	movw	r24, r12
    59c0:	03 96       	adiw	r24, 0x03	; 3
    59c2:	0e 94 b6 7c 	call	0xf96c	; 0xf96c <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.187]>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    59c6:	10 92 c5 0d 	sts	0x0DC5, r1	; 0x800dc5 <my_lcd+0xb>
    59ca:	10 92 c4 0d 	sts	0x0DC4, r1	; 0x800dc4 <my_lcd+0xa>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    59ce:	4a e0       	ldi	r20, 0x0A	; 10
    59d0:	ce 01       	movw	r24, r28
    59d2:	01 96       	adiw	r24, 0x01	; 1
    59d4:	5c 01       	movw	r10, r24
    59d6:	bc 01       	movw	r22, r24
    59d8:	80 91 a2 08 	lds	r24, 0x08A2	; 0x8008a2 <menu_dialog_set_variable_now>
    59dc:	90 91 a3 08 	lds	r25, 0x08A3	; 0x8008a3 <menu_dialog_set_variable_now+0x1>
    59e0:	0e 94 27 a3 	call	0x1464e	; 0x1464e <__itoa_ncheck>
_Z35display_element_dialog_set_variablejjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4277

  my_lcd.Set_Draw_color(BLACK);
  itoa(menu_dialog_set_variable_now, line1, 10);
  tmp1 = show_string_size_width(strlen(line1), 2);
    59e4:	f5 01       	movw	r30, r10
    59e6:	01 90       	ld	r0, Z+
    59e8:	00 20       	and	r0, r0
    59ea:	e9 f7       	brne	.-6      	; 0x59e6 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xc4>
    59ec:	31 97       	sbiw	r30, 0x01	; 1
    59ee:	ea 19       	sub	r30, r10
    59f0:	fb 09       	sbc	r31, r11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4279
  posx1 = (size_x - tmp1) / 2;
  posy1 = (size_y - show_string_size_hight(2)) / 2;
    59f2:	a3 01       	movw	r20, r6
    59f4:	4c 50       	subi	r20, 0x0C	; 12
    59f6:	51 09       	sbc	r21, r1
    59f8:	56 95       	lsr	r21
    59fa:	47 95       	ror	r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4280
  show_string(line1, x + posx1 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
    59fc:	01 50       	subi	r16, 0x01	; 1
    59fe:	11 09       	sbc	r17, r1
    5a00:	40 0f       	add	r20, r16
    5a02:	51 1f       	adc	r21, r17
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1929
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    5a04:	96 e0       	ldi	r25, 0x06	; 6
    5a06:	e9 9f       	mul	r30, r25
    5a08:	f0 01       	movw	r30, r0
    5a0a:	11 24       	eor	r1, r1
    5a0c:	ee 0f       	add	r30, r30
    5a0e:	ff 1f       	adc	r31, r31
_Z35display_element_dialog_set_variablejjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4278
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);

  my_lcd.Set_Draw_color(BLACK);
  itoa(menu_dialog_set_variable_now, line1, 10);
  tmp1 = show_string_size_width(strlen(line1), 2);
  posx1 = (size_x - tmp1) / 2;
    5a10:	b2 01       	movw	r22, r4
    5a12:	6e 1b       	sub	r22, r30
    5a14:	7f 0b       	sbc	r23, r31
    5a16:	76 95       	lsr	r23
    5a18:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4280
  posy1 = (size_y - show_string_size_hight(2)) / 2;
  show_string(line1, x + posx1 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
    5a1a:	6c 0d       	add	r22, r12
    5a1c:	7d 1d       	adc	r23, r13
    5a1e:	ee 24       	eor	r14, r14
    5a20:	ea 94       	dec	r14
    5a22:	fe 2c       	mov	r15, r14
    5a24:	10 e0       	ldi	r17, 0x00	; 0
    5a26:	00 e0       	ldi	r16, 0x00	; 0
    5a28:	22 e0       	ldi	r18, 0x02	; 2
    5a2a:	c5 01       	movw	r24, r10
    5a2c:	0e 94 37 7d 	call	0xfa6e	; 0xfa6e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4281
}
    5a30:	28 96       	adiw	r28, 0x08	; 8
    5a32:	0f b6       	in	r0, 0x3f	; 63
    5a34:	f8 94       	cli
    5a36:	de bf       	out	0x3e, r29	; 62
    5a38:	0f be       	out	0x3f, r0	; 63
    5a3a:	cd bf       	out	0x3d, r28	; 61
    5a3c:	df 91       	pop	r29
    5a3e:	cf 91       	pop	r28
    5a40:	1f 91       	pop	r17
    5a42:	0f 91       	pop	r16
    5a44:	ff 90       	pop	r15
    5a46:	ef 90       	pop	r14
    5a48:	df 90       	pop	r13
    5a4a:	cf 90       	pop	r12
    5a4c:	bf 90       	pop	r11
    5a4e:	af 90       	pop	r10
    5a50:	9f 90       	pop	r9
    5a52:	8f 90       	pop	r8
    5a54:	7f 90       	pop	r7
    5a56:	6f 90       	pop	r6
    5a58:	5f 90       	pop	r5
    5a5a:	4f 90       	pop	r4
    5a5c:	08 95       	ret

00005a5e <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z27display_element_show_date_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4150
  my_lcd.Set_Draw_color(BLACK);
  my_lcd.Draw_Rectangle(x, y, x + 244, y + 84);
}
////////////////////////////////////////////////////
void display_element_show_date_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    5a5e:	af 92       	push	r10
    5a60:	bf 92       	push	r11
    5a62:	cf 92       	push	r12
    5a64:	df 92       	push	r13
    5a66:	ef 92       	push	r14
    5a68:	ff 92       	push	r15
    5a6a:	0f 93       	push	r16
    5a6c:	1f 93       	push	r17
    5a6e:	cf 93       	push	r28
    5a70:	df 93       	push	r29
    5a72:	cd b7       	in	r28, 0x3d	; 61
    5a74:	de b7       	in	r29, 0x3e	; 62
    5a76:	60 97       	sbiw	r28, 0x10	; 16
    5a78:	0f b6       	in	r0, 0x3f	; 63
    5a7a:	f8 94       	cli
    5a7c:	de bf       	out	0x3e, r29	; 62
    5a7e:	0f be       	out	0x3f, r0	; 63
    5a80:	cd bf       	out	0x3d, r28	; 61
    5a82:	5c 01       	movw	r10, r24
    5a84:	8b 01       	movw	r16, r22
selftest_get_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3303
     ... 0 - neni oznacen jako chybny
     ... neni 0 - chybny flag
*/
uint8_t selftest_get_0(uint8_t what)
{
  return selftest_data & (1 << what);
    5a86:	80 91 ce 0a 	lds	r24, 0x0ACE	; 0x800ace <selftest_data>
    5a8a:	9e 01       	movw	r18, r28
    5a8c:	2f 5f       	subi	r18, 0xFF	; 255
    5a8e:	3f 4f       	sbci	r19, 0xFF	; 255
    5a90:	69 01       	movw	r12, r18
_Z27display_element_show_date_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4152
}
////////////////////////////////////////////////////
void display_element_show_date_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
  char str1[16];
  if (selftest_get_0(SELFTEST_ERR_RTC) == 0)
    5a92:	80 fd       	sbrc	r24, 0
    5a94:	4e c0       	rjmp	.+156    	; 0x5b32 <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xd4>
_ZNK8DateTime4yearEv():
/home/saric/Arduino/libraries/RTClib/RTClib.h:38
    DateTime (uint16_t year, uint8_t month, uint8_t day, 
                uint8_t hour =0, uint8_t min =0, uint8_t sec =0);
    DateTime (const DateTime& copy);
    DateTime (const char* date, const char* time);
    DateTime (const __FlashStringHelper* date, const __FlashStringHelper* time);
    uint16_t year() const       { return 2000 + yOff; }
    5a96:	80 91 4a 10 	lds	r24, 0x104A	; 0x80104a <now>
    5a9a:	90 e0       	ldi	r25, 0x00	; 0
    5a9c:	80 53       	subi	r24, 0x30	; 48
    5a9e:	98 4f       	sbci	r25, 0xF8	; 248
_Z27display_element_show_date_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4154
  {
    sprintf(str1, "%02d.%02d.%04d", now.day(), now.month(), now.year());
    5aa0:	9f 93       	push	r25
    5aa2:	8f 93       	push	r24
    5aa4:	80 91 4b 10 	lds	r24, 0x104B	; 0x80104b <now+0x1>
    5aa8:	1f 92       	push	r1
    5aaa:	8f 93       	push	r24
    5aac:	80 91 4c 10 	lds	r24, 0x104C	; 0x80104c <now+0x2>
    5ab0:	1f 92       	push	r1
    5ab2:	8f 93       	push	r24
    5ab4:	88 e3       	ldi	r24, 0x38	; 56
    5ab6:	93 e0       	ldi	r25, 0x03	; 3
    5ab8:	9f 93       	push	r25
    5aba:	8f 93       	push	r24
    5abc:	3f 93       	push	r19
    5abe:	2f 93       	push	r18
    5ac0:	0e 94 d3 af 	call	0x15fa6	; 0x15fa6 <sprintf>
    5ac4:	0f b6       	in	r0, 0x3f	; 63
    5ac6:	f8 94       	cli
    5ac8:	de bf       	out	0x3e, r29	; 62
    5aca:	0f be       	out	0x3f, r0	; 63
    5acc:	cd bf       	out	0x3d, r28	; 61
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    5ace:	8f ef       	ldi	r24, 0xFF	; 255
    5ad0:	9f ef       	ldi	r25, 0xFF	; 255
    5ad2:	90 93 c5 0d 	sts	0x0DC5, r25	; 0x800dc5 <my_lcd+0xb>
    5ad6:	80 93 c4 0d 	sts	0x0DC4, r24	; 0x800dc4 <my_lcd+0xa>
_Z27display_element_show_date_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4160
  }
  else
  {
    strcpy(str1, "--.--.----");
  }
  my_lcd.Set_Draw_color(WHITE); my_lcd.Draw_Fast_HLine(x, y, 142); my_lcd.Draw_Fast_HLine(x, y + 1, 142); show_string(str1, x, y + 2, 3, BLACK, WHITE, 0);
    5ada:	4e e8       	ldi	r20, 0x8E	; 142
    5adc:	50 e0       	ldi	r21, 0x00	; 0
    5ade:	b8 01       	movw	r22, r16
    5ae0:	c5 01       	movw	r24, r10
    5ae2:	0e 94 47 7c 	call	0xf88e	; 0xf88e <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.189]>
    5ae6:	b8 01       	movw	r22, r16
    5ae8:	6f 5f       	subi	r22, 0xFF	; 255
    5aea:	7f 4f       	sbci	r23, 0xFF	; 255
    5aec:	4e e8       	ldi	r20, 0x8E	; 142
    5aee:	50 e0       	ldi	r21, 0x00	; 0
    5af0:	c5 01       	movw	r24, r10
    5af2:	0e 94 47 7c 	call	0xf88e	; 0xf88e <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.189]>
    5af6:	a8 01       	movw	r20, r16
    5af8:	4e 5f       	subi	r20, 0xFE	; 254
    5afa:	5f 4f       	sbci	r21, 0xFF	; 255
    5afc:	ee 24       	eor	r14, r14
    5afe:	ea 94       	dec	r14
    5b00:	fe 2c       	mov	r15, r14
    5b02:	10 e0       	ldi	r17, 0x00	; 0
    5b04:	00 e0       	ldi	r16, 0x00	; 0
    5b06:	23 e0       	ldi	r18, 0x03	; 3
    5b08:	b5 01       	movw	r22, r10
    5b0a:	c6 01       	movw	r24, r12
    5b0c:	0e 94 37 7d 	call	0xfa6e	; 0xfa6e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4161
}
    5b10:	60 96       	adiw	r28, 0x10	; 16
    5b12:	0f b6       	in	r0, 0x3f	; 63
    5b14:	f8 94       	cli
    5b16:	de bf       	out	0x3e, r29	; 62
    5b18:	0f be       	out	0x3f, r0	; 63
    5b1a:	cd bf       	out	0x3d, r28	; 61
    5b1c:	df 91       	pop	r29
    5b1e:	cf 91       	pop	r28
    5b20:	1f 91       	pop	r17
    5b22:	0f 91       	pop	r16
    5b24:	ff 90       	pop	r15
    5b26:	ef 90       	pop	r14
    5b28:	df 90       	pop	r13
    5b2a:	cf 90       	pop	r12
    5b2c:	bf 90       	pop	r11
    5b2e:	af 90       	pop	r10
    5b30:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4158
  {
    sprintf(str1, "%02d.%02d.%04d", now.day(), now.month(), now.year());
  }
  else
  {
    strcpy(str1, "--.--.----");
    5b32:	67 e4       	ldi	r22, 0x47	; 71
    5b34:	73 e0       	ldi	r23, 0x03	; 3
    5b36:	c9 01       	movw	r24, r18
    5b38:	0e 94 70 af 	call	0x15ee0	; 0x15ee0 <strcpy>
    5b3c:	c8 cf       	rjmp	.-112    	; 0x5ace <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x70>

00005b3e <MenuPrepareStyle()>:
_Z16MenuPrepareStylev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1455



/////////////////////////////////////////////////////////////////////////////////////////////
void MenuPrepareStyle(void)
{
    5b3e:	6f 92       	push	r6
    5b40:	7f 92       	push	r7
    5b42:	8f 92       	push	r8
    5b44:	9f 92       	push	r9
    5b46:	af 92       	push	r10
    5b48:	bf 92       	push	r11
    5b4a:	cf 92       	push	r12
    5b4c:	df 92       	push	r13
    5b4e:	ef 92       	push	r14
    5b50:	ff 92       	push	r15
    5b52:	0f 93       	push	r16
    5b54:	1f 93       	push	r17
    5b56:	cf 93       	push	r28
    5b58:	df 93       	push	r29
    5b5a:	1f 92       	push	r1
    5b5c:	cd b7       	in	r28, 0x3d	; 61
    5b5e:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1465
  uint16_t size_y;
  uint16_t color_background;
  uint8_t args1;
  Menu1 *current;

  current = MenuHistoryGetMenu(&args1);
    5b60:	ce 01       	movw	r24, r28
    5b62:	01 96       	adiw	r24, 0x01	; 1
    5b64:	0e 94 78 22 	call	0x44f0	; 0x44f0 <MenuHistoryGetMenu(unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1466
  attr = pgm_read_byte(&current->atributes);
    5b68:	fc 01       	movw	r30, r24
    5b6a:	ee 5e       	subi	r30, 0xEE	; 238
    5b6c:	fd 4f       	sbci	r31, 0xFD	; 253
    5b6e:	74 90       	lpm	r7, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1467
  x = pgm_read_word(&current->x);
    5b70:	38 97       	sbiw	r30, 0x08	; 8
    5b72:	c5 90       	lpm	r12, Z+
    5b74:	d4 90       	lpm	r13, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1468
  y = pgm_read_word(&current->y);
    5b76:	fc 01       	movw	r30, r24
    5b78:	e4 5f       	subi	r30, 0xF4	; 244
    5b7a:	fd 4f       	sbci	r31, 0xFD	; 253
    5b7c:	05 91       	lpm	r16, Z+
    5b7e:	14 91       	lpm	r17, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1469
  size_x = pgm_read_word(&current->size_x);
    5b80:	fc 01       	movw	r30, r24
    5b82:	e2 5f       	subi	r30, 0xF2	; 242
    5b84:	fd 4f       	sbci	r31, 0xFD	; 253
    5b86:	85 90       	lpm	r8, Z+
    5b88:	94 90       	lpm	r9, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1470
  size_y = pgm_read_word(&current->size_y);
    5b8a:	fc 01       	movw	r30, r24
    5b8c:	e0 5f       	subi	r30, 0xF0	; 240
    5b8e:	fd 4f       	sbci	r31, 0xFD	; 253
    5b90:	a5 90       	lpm	r10, Z+
    5b92:	b4 90       	lpm	r11, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1471
  color_background = pgm_read_word(&current->color_background);
    5b94:	8d 5e       	subi	r24, 0xED	; 237
    5b96:	9d 4f       	sbci	r25, 0xFD	; 253
    5b98:	fc 01       	movw	r30, r24
    5b9a:	e5 90       	lpm	r14, Z+
    5b9c:	f4 90       	lpm	r15, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1473

  if ((attr & (1 << MENU_ATTRIBUTES_CLEAN_DISPLAY)) != 0)
    5b9e:	70 fe       	sbrs	r7, 0
    5ba0:	03 c0       	rjmp	.+6      	; 0x5ba8 <MenuPrepareStyle()+0x6a>
DisplayClean():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1566

}
///////////////////////////////////////////////////////////////////////////////////
void DisplayClean(uint16_t color)
{
  my_lcd.Fill_Screen(color);
    5ba2:	c7 01       	movw	r24, r14
    5ba4:	0e 94 20 7d 	call	0xfa40	; 0xfa40 <LCDWIKI_GUI::Fill_Screen(unsigned int) [clone .constprop.162]>
_Z16MenuPrepareStylev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1478
  if ((attr & (1 << MENU_ATTRIBUTES_CLEAN_DISPLAY)) != 0)
  {
    DisplayClean(color_background);
  }

  if ((attr & (1 << MENU_ATTRIBUTES_FILL_COLOR_RECTANGLE)) != 0)
    5ba8:	71 fe       	sbrs	r7, 1
    5baa:	0e c0       	rjmp	.+28     	; 0x5bc8 <MenuPrepareStyle()+0x8a>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    5bac:	f0 92 c5 0d 	sts	0x0DC5, r15	; 0x800dc5 <my_lcd+0xb>
    5bb0:	e0 92 c4 0d 	sts	0x0DC4, r14	; 0x800dc4 <my_lcd+0xa>
_Z16MenuPrepareStylev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1481
  {
    my_lcd.Set_Draw_color(color_background);
    my_lcd.Fill_Rectangle(x, y, x + size_x, y + size_y);
    5bb4:	98 01       	movw	r18, r16
    5bb6:	2a 0d       	add	r18, r10
    5bb8:	3b 1d       	adc	r19, r11
    5bba:	a6 01       	movw	r20, r12
    5bbc:	48 0d       	add	r20, r8
    5bbe:	59 1d       	adc	r21, r9
    5bc0:	b8 01       	movw	r22, r16
    5bc2:	c6 01       	movw	r24, r12
    5bc4:	0e 94 b6 7c 	call	0xf96c	; 0xf96c <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.187]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1484
  }

  if ((attr & (1 << MENU_ATTRIBUTES_DECORATE_MENU)) != 0)
    5bc8:	72 fe       	sbrs	r7, 2
    5bca:	29 c0       	rjmp	.+82     	; 0x5c1e <MenuPrepareStyle()+0xe0>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    5bcc:	10 92 c5 0d 	sts	0x0DC5, r1	; 0x800dc5 <my_lcd+0xb>
    5bd0:	10 92 c4 0d 	sts	0x0DC4, r1	; 0x800dc4 <my_lcd+0xa>
    5bd4:	f1 2c       	mov	r15, r1
    5bd6:	e1 2c       	mov	r14, r1
_Z16MenuPrepareStylev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1489
  {
    my_lcd.Set_Draw_color(BLACK);
    for (uint8_t i = 0; i < 4; i++)
    {
      my_lcd.Draw_Rectangle(x + i, y + i, x + size_x - i, y + size_y - i);
    5bd8:	a0 0e       	add	r10, r16
    5bda:	b1 1e       	adc	r11, r17
    5bdc:	36 01       	movw	r6, r12
    5bde:	68 0c       	add	r6, r8
    5be0:	79 1c       	adc	r7, r9
    5be2:	95 01       	movw	r18, r10
    5be4:	2e 19       	sub	r18, r14
    5be6:	3f 09       	sbc	r19, r15
    5be8:	a3 01       	movw	r20, r6
    5bea:	4e 19       	sub	r20, r14
    5bec:	5f 09       	sbc	r21, r15
    5bee:	b8 01       	movw	r22, r16
    5bf0:	c6 01       	movw	r24, r12
    5bf2:	8e 0d       	add	r24, r14
    5bf4:	9f 1d       	adc	r25, r15
    5bf6:	0e 94 5d 7c 	call	0xf8ba	; 0xf8ba <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.188]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1490
      my_lcd.Draw_Fast_HLine(x, y + 23 + i, size_x - i);
    5bfa:	a4 01       	movw	r20, r8
    5bfc:	4e 19       	sub	r20, r14
    5bfe:	5f 09       	sbc	r21, r15
    5c00:	b8 01       	movw	r22, r16
    5c02:	69 5e       	subi	r22, 0xE9	; 233
    5c04:	7f 4f       	sbci	r23, 0xFF	; 255
    5c06:	c6 01       	movw	r24, r12
    5c08:	0e 94 47 7c 	call	0xf88e	; 0xf88e <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.189]>
    5c0c:	8f ef       	ldi	r24, 0xFF	; 255
    5c0e:	e8 1a       	sub	r14, r24
    5c10:	f8 0a       	sbc	r15, r24
    5c12:	0f 5f       	subi	r16, 0xFF	; 255
    5c14:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1487
  }

  if ((attr & (1 << MENU_ATTRIBUTES_DECORATE_MENU)) != 0)
  {
    my_lcd.Set_Draw_color(BLACK);
    for (uint8_t i = 0; i < 4; i++)
    5c16:	84 e0       	ldi	r24, 0x04	; 4
    5c18:	e8 16       	cp	r14, r24
    5c1a:	f1 04       	cpc	r15, r1
    5c1c:	11 f7       	brne	.-60     	; 0x5be2 <MenuPrepareStyle()+0xa4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1494
      my_lcd.Draw_Rectangle(x + i, y + i, x + size_x - i, y + size_y - i);
      my_lcd.Draw_Fast_HLine(x, y + 23 + i, size_x - i);
    }
  }

}
    5c1e:	0f 90       	pop	r0
    5c20:	df 91       	pop	r29
    5c22:	cf 91       	pop	r28
    5c24:	1f 91       	pop	r17
    5c26:	0f 91       	pop	r16
    5c28:	ff 90       	pop	r15
    5c2a:	ef 90       	pop	r14
    5c2c:	df 90       	pop	r13
    5c2e:	cf 90       	pop	r12
    5c30:	bf 90       	pop	r11
    5c32:	af 90       	pop	r10
    5c34:	9f 90       	pop	r9
    5c36:	8f 90       	pop	r8
    5c38:	7f 90       	pop	r7
    5c3a:	6f 90       	pop	r6
    5c3c:	08 95       	ret

00005c3e <MenuHistoryNextMenu(unsigned char, unsigned char)>:
_Z19MenuHistoryNextMenuhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1515
  }
}
///
void MenuHistoryNextMenu(uint8_t id, uint8_t args1)
{
  if (MenuHistoryIndex < MENU_MAX_HISTORY)
    5c3e:	20 91 64 08 	lds	r18, 0x0864	; 0x800864 <MenuHistoryIndex>
    5c42:	2a 30       	cpi	r18, 0x0A	; 10
    5c44:	70 f4       	brcc	.+28     	; 0x5c62 <MenuHistoryNextMenu(unsigned char, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1517
  {
    MenuHistoryIndex++;
    5c46:	2f 5f       	subi	r18, 0xFF	; 255
    5c48:	20 93 64 08 	sts	0x0864, r18	; 0x800864 <MenuHistoryIndex>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1518
    MenuHistory[MenuHistoryIndex] = id;
    5c4c:	30 e0       	ldi	r19, 0x00	; 0
    5c4e:	f9 01       	movw	r30, r18
    5c50:	e6 5a       	subi	r30, 0xA6	; 166
    5c52:	f7 4f       	sbci	r31, 0xF7	; 247
    5c54:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1519
    Global_menu_args1[MenuHistoryIndex] = args1;
    5c56:	28 5b       	subi	r18, 0xB8	; 184
    5c58:	37 4f       	sbci	r19, 0xF7	; 247
    5c5a:	f9 01       	movw	r30, r18
    5c5c:	60 83       	st	Z, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1520
    MenuPrepareStyle();
    5c5e:	0c 94 9f 2d 	jmp	0x5b3e	; 0x5b3e <MenuPrepareStyle()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1522
  }
}
    5c62:	08 95       	ret

00005c64 <click_tds_associate_or_setting_onewire(unsigned char, unsigned char)>:
_Z38click_tds_associate_or_setting_onewirehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4583
    if (w_rom[cnt].used == 1) active++;
  return active;
}
/// funkce. ktera
void click_tds_associate_or_setting_onewire(uint8_t args1, uint8_t idx)
{
    5c64:	cf 93       	push	r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4585
  //printf("%d %d\n", args1, idx);
  if (w_rom[idx].tds_idx == 255)
    5c66:	8b e0       	ldi	r24, 0x0B	; 11
    5c68:	68 9f       	mul	r22, r24
    5c6a:	f0 01       	movw	r30, r0
    5c6c:	11 24       	eor	r1, r1
    5c6e:	e0 54       	subi	r30, 0x40	; 64
    5c70:	f6 4f       	sbci	r31, 0xF6	; 246
    5c72:	82 85       	ldd	r24, Z+10	; 0x0a
    5c74:	8f 3f       	cpi	r24, 0xFF	; 255
    5c76:	a1 f4       	brne	.+40     	; 0x5ca0 <click_tds_associate_or_setting_onewire(unsigned char, unsigned char)+0x3c>
    5c78:	c6 2f       	mov	r28, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4587
  {
    MenuHistoryNextMenu(MENU_DIALOG_YES_NO, 0);
    5c7a:	60 e0       	ldi	r22, 0x00	; 0
    5c7c:	84 e6       	ldi	r24, 0x64	; 100
    5c7e:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <MenuHistoryNextMenu(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4588
    dialog_yes_function = &tds_associate;
    5c82:	81 ee       	ldi	r24, 0xE1	; 225
    5c84:	9e e4       	ldi	r25, 0x4E	; 78
    5c86:	90 93 ce 08 	sts	0x08CE, r25	; 0x8008ce <dialog_yes_function+0x1>
    5c8a:	80 93 cd 08 	sts	0x08CD, r24	; 0x8008cd <dialog_yes_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4589
    dialog_yes_args1 = idx;
    5c8e:	c0 93 cc 08 	sts	0x08CC, r28	; 0x8008cc <dialog_yes_args1>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4590
    strcpy_P(dialog_text, text_associovat_tds);
    5c92:	69 ef       	ldi	r22, 0xF9	; 249
    5c94:	7e e2       	ldi	r23, 0x2E	; 46
    5c96:	8c ea       	ldi	r24, 0xAC	; 172
    5c98:	98 e0       	ldi	r25, 0x08	; 8
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4596
  }
  else
  {
    MenuHistoryNextMenu(MENU_NASTAVENI_TDS, w_rom[idx].tds_idx);
  }
}
    5c9a:	cf 91       	pop	r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4590
  if (w_rom[idx].tds_idx == 255)
  {
    MenuHistoryNextMenu(MENU_DIALOG_YES_NO, 0);
    dialog_yes_function = &tds_associate;
    dialog_yes_args1 = idx;
    strcpy_P(dialog_text, text_associovat_tds);
    5c9c:	0c 94 ea a2 	jmp	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4594
  }
  else
  {
    MenuHistoryNextMenu(MENU_NASTAVENI_TDS, w_rom[idx].tds_idx);
    5ca0:	68 2f       	mov	r22, r24
    5ca2:	84 e0       	ldi	r24, 0x04	; 4
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4596
  }
}
    5ca4:	cf 91       	pop	r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4594
    dialog_yes_args1 = idx;
    strcpy_P(dialog_text, text_associovat_tds);
  }
  else
  {
    MenuHistoryNextMenu(MENU_NASTAVENI_TDS, w_rom[idx].tds_idx);
    5ca6:	0c 94 1f 2e 	jmp	0x5c3e	; 0x5c3e <MenuHistoryNextMenu(unsigned char, unsigned char)>

00005caa <MenuHistoryPrevMenu()>:
_Z19MenuHistoryPrevMenuv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1505

/////////////////////////////////////////////////////////////////////////////////////
void MenuHistoryPrevMenu(void)
{

  if (MenuHistoryIndex > 0)
    5caa:	80 91 64 08 	lds	r24, 0x0864	; 0x800864 <MenuHistoryIndex>
    5cae:	88 23       	and	r24, r24
    5cb0:	29 f0       	breq	.+10     	; 0x5cbc <MenuHistoryPrevMenu()+0x12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1507
  {
    MenuHistoryIndex--;
    5cb2:	81 50       	subi	r24, 0x01	; 1
    5cb4:	80 93 64 08 	sts	0x0864, r24	; 0x800864 <MenuHistoryIndex>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1508
    MenuPrepareStyle();
    5cb8:	0c 94 9f 2d 	jmp	0x5b3e	; 0x5b3e <MenuPrepareStyle()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1511

  }
}
    5cbc:	08 95       	ret

00005cbe <dialog_set_variable_button_click(unsigned char, unsigned char)>:
_Z32dialog_set_variable_button_clickhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1863
  MenuHistoryPrevMenu();
}

void dialog_set_variable_button_click(uint8_t args1, uint8_t args2)
{
  dialog_save_variable_function(args1, args2);
    5cbe:	70 e0       	ldi	r23, 0x00	; 0
    5cc0:	e0 91 d0 08 	lds	r30, 0x08D0	; 0x8008d0 <dialog_save_variable_function>
    5cc4:	f0 91 d1 08 	lds	r31, 0x08D1	; 0x8008d1 <dialog_save_variable_function+0x1>
    5cc8:	90 e0       	ldi	r25, 0x00	; 0
    5cca:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1864
  MenuHistoryPrevMenu();
    5ccc:	0c 94 55 2e 	jmp	0x5caa	; 0x5caa <MenuHistoryPrevMenu()>

00005cd0 <click_dialog_button_yes(unsigned char, unsigned char)>:
_Z23click_dialog_button_yeshh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1857
   args1 - jsou data z definice funkce
   args2 - jsou globalni data z definice menu
*/
void click_dialog_button_yes(uint8_t args1, uint8_t args2)
{
  dialog_yes_function(dialog_yes_args1, 0);
    5cd0:	80 91 cc 08 	lds	r24, 0x08CC	; 0x8008cc <dialog_yes_args1>
    5cd4:	e0 91 cd 08 	lds	r30, 0x08CD	; 0x8008cd <dialog_yes_function>
    5cd8:	f0 91 ce 08 	lds	r31, 0x08CE	; 0x8008ce <dialog_yes_function+0x1>
    5cdc:	70 e0       	ldi	r23, 0x00	; 0
    5cde:	60 e0       	ldi	r22, 0x00	; 0
    5ce0:	90 e0       	ldi	r25, 0x00	; 0
    5ce2:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1858
  MenuHistoryPrevMenu();
    5ce4:	0c 94 55 2e 	jmp	0x5caa	; 0x5caa <MenuHistoryPrevMenu()>

00005ce8 <serial_putc(char, __file*)>:
_Z11serial_putccP6__file():
/home/saric/Arduino/libraries/RF24/printf.h:23
#define __PRINTF_H__

#if defined (ARDUINO) && !defined (__arm__) && !defined(__ARDUINO_X86__)

int serial_putc( char c, FILE * )
{
    5ce8:	cf 93       	push	r28
    5cea:	c8 2f       	mov	r28, r24
write():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.h:133
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    5cec:	68 2f       	mov	r22, r24
    5cee:	8d e6       	ldi	r24, 0x6D	; 109
    5cf0:	9b e0       	ldi	r25, 0x0B	; 11
    5cf2:	0e 94 d0 77 	call	0xefa0	; 0xefa0 <HardwareSerial::write(unsigned char)>
_Z11serial_putccP6__file():
/home/saric/Arduino/libraries/RF24/printf.h:27
  Serial.write( c );

  return c;
}
    5cf6:	8c 2f       	mov	r24, r28
    5cf8:	cc 0f       	add	r28, r28
    5cfa:	99 0b       	sbc	r25, r25
    5cfc:	cf 91       	pop	r28
    5cfe:	08 95       	ret

00005d00 <W5500Class::readSn(unsigned char, unsigned int)>:
_ZN10W5500Class6readSnEhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:347
  static inline void resetSS() {  digitalWrite(SPI_CS, HIGH); }
};

extern W5500Class w5500;

uint8_t W5500Class::readSn(SOCKET _s, uint16_t _addr) {
    5d00:	9b 01       	movw	r18, r22
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:348
    uint8_t cntl_byte = (_s<<5)+0x08;
    5d02:	82 95       	swap	r24
    5d04:	88 0f       	add	r24, r24
    5d06:	80 7e       	andi	r24, 0xE0	; 224
    5d08:	68 e0       	ldi	r22, 0x08	; 8
    5d0a:	68 0f       	add	r22, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:349
    return read(_addr, cntl_byte);
    5d0c:	c9 01       	movw	r24, r18
    5d0e:	0c 94 13 90 	jmp	0x12026	; 0x12026 <W5500Class::read(unsigned int, unsigned char)>

00005d12 <EthernetClient::write(unsigned char const*, unsigned int)>:
_ZN14EthernetClient5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:77

size_t EthernetClient::write(uint8_t b) {
  return write(&b, 1);
}

size_t EthernetClient::write(const uint8_t *buf, size_t size) {
    5d12:	8f 92       	push	r8
    5d14:	9f 92       	push	r9
    5d16:	af 92       	push	r10
    5d18:	bf 92       	push	r11
    5d1a:	cf 92       	push	r12
    5d1c:	df 92       	push	r13
    5d1e:	ef 92       	push	r14
    5d20:	ff 92       	push	r15
    5d22:	0f 93       	push	r16
    5d24:	1f 93       	push	r17
    5d26:	cf 93       	push	r28
    5d28:	6c 01       	movw	r12, r24
    5d2a:	5b 01       	movw	r10, r22
    5d2c:	7a 01       	movw	r14, r20
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:78
  if (_sock == MAX_SOCK_NUM) {
    5d2e:	fc 01       	movw	r30, r24
    5d30:	c4 85       	ldd	r28, Z+12	; 0x0c
    5d32:	c8 30       	cpi	r28, 0x08	; 8
    5d34:	a1 f4       	brne	.+40     	; 0x5d5e <EthernetClient::write(unsigned char const*, unsigned int)+0x4c>
_ZN5Print13setWriteErrorEi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.h:44
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    5d36:	81 e0       	ldi	r24, 0x01	; 1
    5d38:	90 e0       	ldi	r25, 0x00	; 0
    5d3a:	f6 01       	movw	r30, r12
    5d3c:	93 83       	std	Z+3, r25	; 0x03
    5d3e:	82 83       	std	Z+2, r24	; 0x02
_ZN14EthernetClient5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:80
    setWriteError();
    return 0;
    5d40:	f1 2c       	mov	r15, r1
    5d42:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:87
  if (!send(_sock, buf, size)) {
    setWriteError();
    return 0;
  }
  return size;
}
    5d44:	c7 01       	movw	r24, r14
    5d46:	cf 91       	pop	r28
    5d48:	1f 91       	pop	r17
    5d4a:	0f 91       	pop	r16
    5d4c:	ff 90       	pop	r15
    5d4e:	ef 90       	pop	r14
    5d50:	df 90       	pop	r13
    5d52:	cf 90       	pop	r12
    5d54:	bf 90       	pop	r11
    5d56:	af 90       	pop	r10
    5d58:	9f 90       	pop	r9
    5d5a:	8f 90       	pop	r8
    5d5c:	08 95       	ret
    5d5e:	8a 01       	movw	r16, r20
    5d60:	41 30       	cpi	r20, 0x01	; 1
    5d62:	58 40       	sbci	r21, 0x08	; 8
    5d64:	10 f0       	brcs	.+4      	; 0x5d6a <EthernetClient::write(unsigned char const*, unsigned int)+0x58>
    5d66:	00 e0       	ldi	r16, 0x00	; 0
    5d68:	18 e0       	ldi	r17, 0x08	; 8
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:116
    ret = len;

  // if freebuf is available, start.
  do 
  {
    freesize = w5500.getTXFreeSize(s);
    5d6a:	8c 2f       	mov	r24, r28
    5d6c:	0e 94 bd 81 	call	0x1037a	; 0x1037a <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.27]>
    5d70:	4c 01       	movw	r8, r24
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
    5d72:	63 e0       	ldi	r22, 0x03	; 3
    5d74:	70 e0       	ldi	r23, 0x00	; 0
    5d76:	8c 2f       	mov	r24, r28
    5d78:	0e 94 80 2e 	call	0x5d00	; 0x5d00 <W5500Class::readSn(unsigned char, unsigned int)>
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:118
    status = w5500.readSnSR(s);
    if ((status != SnSR::ESTABLISHED) && (status != SnSR::CLOSE_WAIT))
    5d7c:	87 31       	cpi	r24, 0x17	; 23
    5d7e:	11 f0       	breq	.+4      	; 0x5d84 <EthernetClient::write(unsigned char const*, unsigned int)+0x72>
    5d80:	8c 31       	cpi	r24, 0x1C	; 28
    5d82:	09 f5       	brne	.+66     	; 0x5dc6 <EthernetClient::write(unsigned char const*, unsigned int)+0xb4>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:124
    {
      ret = 0; 
      break;
    }
  } 
  while (freesize < ret);
    5d84:	80 16       	cp	r8, r16
    5d86:	91 06       	cpc	r9, r17
    5d88:	80 f3       	brcs	.-32     	; 0x5d6a <EthernetClient::write(unsigned char const*, unsigned int)+0x58>
send_data_processing():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:70
}

void W5500Class::send_data_processing(SOCKET s, const uint8_t *data, uint16_t len)
{
  // This is same as having no offset in a call to send_data_processing_offset
  send_data_processing_offset(s, 0, data, len);
    5d8a:	98 01       	movw	r18, r16
    5d8c:	a5 01       	movw	r20, r10
    5d8e:	70 e0       	ldi	r23, 0x00	; 0
    5d90:	60 e0       	ldi	r22, 0x00	; 0
    5d92:	8c 2f       	mov	r24, r28
    5d94:	0e 94 ef 90 	call	0x121de	; 0x121de <W5500Class::send_data_processing_offset(unsigned char, unsigned int, unsigned char const*, unsigned int) [clone .constprop.28]>
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:128

  // copy data
  w5500.send_data_processing(s, (uint8_t *)buf, ret);
  w5500.execCmdSn(s, Sock_SEND);
    5d98:	60 e2       	ldi	r22, 0x20	; 32
    5d9a:	70 e0       	ldi	r23, 0x00	; 0
    5d9c:	8c 2f       	mov	r24, r28
    5d9e:	0e 94 61 91 	call	0x122c2	; 0x122c2 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>
readSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
    5da2:	62 e0       	ldi	r22, 0x02	; 2
    5da4:	70 e0       	ldi	r23, 0x00	; 0
    5da6:	8c 2f       	mov	r24, r28
    5da8:	0e 94 80 2e 	call	0x5d00	; 0x5d00 <W5500Class::readSn(unsigned char, unsigned int)>
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:131

  /* +2008.01 bj */
  while ( (w5500.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    5dac:	84 fd       	sbrc	r24, 4
    5dae:	0e c0       	rjmp	.+28     	; 0x5dcc <EthernetClient::write(unsigned char const*, unsigned int)+0xba>
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
    5db0:	63 e0       	ldi	r22, 0x03	; 3
    5db2:	70 e0       	ldi	r23, 0x00	; 0
    5db4:	8c 2f       	mov	r24, r28
    5db6:	0e 94 80 2e 	call	0x5d00	; 0x5d00 <W5500Class::readSn(unsigned char, unsigned int)>
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:134
  {
    /* m2008.01 [bj] : reduce code */
    if ( w5500.readSnSR(s) == SnSR::CLOSED )
    5dba:	81 11       	cpse	r24, r1
    5dbc:	f2 cf       	rjmp	.-28     	; 0x5da2 <EthernetClient::write(unsigned char const*, unsigned int)+0x90>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:136
    {
      close(s);
    5dbe:	8c 2f       	mov	r24, r28
    5dc0:	0e 94 c9 92 	call	0x12592	; 0x12592 <close(unsigned char)>
    5dc4:	b8 cf       	rjmp	.-144    	; 0x5d36 <EthernetClient::write(unsigned char const*, unsigned int)+0x24>
_ZN14EthernetClient5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:120
  {
    freesize = w5500.getTXFreeSize(s);
    status = w5500.readSnSR(s);
    if ((status != SnSR::ESTABLISHED) && (status != SnSR::CLOSE_WAIT))
    {
      ret = 0; 
    5dc6:	10 e0       	ldi	r17, 0x00	; 0
    5dc8:	00 e0       	ldi	r16, 0x00	; 0
    5dca:	df cf       	rjmp	.-66     	; 0x5d8a <EthernetClient::write(unsigned char const*, unsigned int)+0x78>
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
    5dcc:	40 e1       	ldi	r20, 0x10	; 16
    5dce:	62 e0       	ldi	r22, 0x02	; 2
    5dd0:	70 e0       	ldi	r23, 0x00	; 0
    5dd2:	8c 2f       	mov	r24, r28
    5dd4:	0e 94 e6 90 	call	0x121cc	; 0x121cc <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN14EthernetClient5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:82
size_t EthernetClient::write(const uint8_t *buf, size_t size) {
  if (_sock == MAX_SOCK_NUM) {
    setWriteError();
    return 0;
  }
  if (!send(_sock, buf, size)) {
    5dd8:	01 2b       	or	r16, r17
    5dda:	09 f0       	breq	.+2      	; 0x5dde <EthernetClient::write(unsigned char const*, unsigned int)+0xcc>
    5ddc:	b3 cf       	rjmp	.-154    	; 0x5d44 <EthernetClient::write(unsigned char const*, unsigned int)+0x32>
    5dde:	ab cf       	rjmp	.-170    	; 0x5d36 <EthernetClient::write(unsigned char const*, unsigned int)+0x24>

00005de0 <EthernetClient::connect(IPAddress, unsigned int)>:
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:38
  } else {
    return ret;
  }
}

int EthernetClient::connect(IPAddress ip, uint16_t port) {
    5de0:	df 92       	push	r13
    5de2:	ef 92       	push	r14
    5de4:	ff 92       	push	r15
    5de6:	0f 93       	push	r16
    5de8:	1f 93       	push	r17
    5dea:	cf 93       	push	r28
    5dec:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:39
  if (_sock != MAX_SOCK_NUM)
    5dee:	fc 01       	movw	r30, r24
    5df0:	24 85       	ldd	r18, Z+12	; 0x0c
    5df2:	28 30       	cpi	r18, 0x08	; 8
    5df4:	51 f0       	breq	.+20     	; 0x5e0a <EthernetClient::connect(IPAddress, unsigned int)+0x2a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:59
  if (_srcport == 0) _srcport = 1024;
  socket(_sock, SnMR::TCP, _srcport, 0);

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    _sock = MAX_SOCK_NUM;
    return 0;
    5df6:	90 e0       	ldi	r25, 0x00	; 0
    5df8:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:71
      return 0;
    }
  }

  return 1;
}
    5dfa:	df 91       	pop	r29
    5dfc:	cf 91       	pop	r28
    5dfe:	1f 91       	pop	r17
    5e00:	0f 91       	pop	r16
    5e02:	ff 90       	pop	r15
    5e04:	ef 90       	pop	r14
    5e06:	df 90       	pop	r13
    5e08:	08 95       	ret
    5e0a:	7a 01       	movw	r14, r20
    5e0c:	eb 01       	movw	r28, r22
    5e0e:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:39
    return ret;
  }
}

int EthernetClient::connect(IPAddress ip, uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    5e10:	d1 2c       	mov	r13, r1
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
    5e12:	63 e0       	ldi	r22, 0x03	; 3
    5e14:	70 e0       	ldi	r23, 0x00	; 0
    5e16:	8d 2d       	mov	r24, r13
    5e18:	0e 94 80 2e 	call	0x5d00	; 0x5d00 <W5500Class::readSn(unsigned char, unsigned int)>
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:44
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
    5e1c:	81 11       	cpse	r24, r1
    5e1e:	28 c0       	rjmp	.+80     	; 0x5e70 <EthernetClient::connect(IPAddress, unsigned int)+0x90>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:45
      _sock = i;
    5e20:	f8 01       	movw	r30, r16
    5e22:	d4 86       	std	Z+12, r13	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:50
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    5e24:	f8 01       	movw	r30, r16
    5e26:	84 85       	ldd	r24, Z+12	; 0x0c
    5e28:	88 30       	cpi	r24, 0x08	; 8
    5e2a:	29 f3       	breq	.-54     	; 0x5df6 <EthernetClient::connect(IPAddress, unsigned int)+0x16>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:53
    return 0;

  _srcport++;
    5e2c:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    5e30:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    5e34:	2f 5f       	subi	r18, 0xFF	; 255
    5e36:	3f 4f       	sbci	r19, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:54
  if (_srcport == 0) _srcport = 1024;
    5e38:	19 f1       	breq	.+70     	; 0x5e80 <EthernetClient::connect(IPAddress, unsigned int)+0xa0>
    5e3a:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__data_start+0x1>
    5e3e:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__data_start>
socket():
    5e42:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <__data_start>
    5e46:	50 91 01 02 	lds	r21, 0x0201	; 0x800201 <__data_start+0x1>
    5e4a:	61 e0       	ldi	r22, 0x01	; 1
    5e4c:	0e 94 d6 92 	call	0x125ac	; 0x125ac <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.21]>
connect():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:72
 */
uint8_t connect(SOCKET s, uint8_t * addr, uint16_t port)
{
  if 
    (
  ((addr[0] == 0xFF) && (addr[1] == 0xFF) && (addr[2] == 0xFF) && (addr[3] == 0xFF)) ||
    5e50:	8a 81       	ldd	r24, Y+2	; 0x02
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:70
 * 		
 * @return	1 for success else 0.
 */
uint8_t connect(SOCKET s, uint8_t * addr, uint16_t port)
{
  if 
    5e52:	8f 3f       	cpi	r24, 0xFF	; 255
    5e54:	c1 f4       	brne	.+48     	; 0x5e86 <EthernetClient::connect(IPAddress, unsigned int)+0xa6>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:72
    (
  ((addr[0] == 0xFF) && (addr[1] == 0xFF) && (addr[2] == 0xFF) && (addr[3] == 0xFF)) ||
    5e56:	8b 81       	ldd	r24, Y+3	; 0x03
    5e58:	8f 3f       	cpi	r24, 0xFF	; 255
    5e5a:	01 f5       	brne	.+64     	; 0x5e9c <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
    5e5c:	8c 81       	ldd	r24, Y+4	; 0x04
    5e5e:	8f 3f       	cpi	r24, 0xFF	; 255
    5e60:	e9 f4       	brne	.+58     	; 0x5e9c <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
    5e62:	8d 81       	ldd	r24, Y+5	; 0x05
    5e64:	8f 3f       	cpi	r24, 0xFF	; 255
    5e66:	d1 f4       	brne	.+52     	; 0x5e9c <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:58
  socket(_sock, SnMR::TCP, _srcport, 0);

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    _sock = MAX_SOCK_NUM;
    5e68:	88 e0       	ldi	r24, 0x08	; 8
    5e6a:	f8 01       	movw	r30, r16
    5e6c:	84 87       	std	Z+12, r24	; 0x0c
    5e6e:	c3 cf       	rjmp	.-122    	; 0x5df6 <EthernetClient::connect(IPAddress, unsigned int)+0x16>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:44
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
    5e70:	8b 7f       	andi	r24, 0xFB	; 251
    5e72:	88 31       	cpi	r24, 0x18	; 24
    5e74:	a9 f2       	breq	.-86     	; 0x5e20 <EthernetClient::connect(IPAddress, unsigned int)+0x40>
    5e76:	d3 94       	inc	r13
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:42

int EthernetClient::connect(IPAddress ip, uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    5e78:	f8 e0       	ldi	r31, 0x08	; 8
    5e7a:	df 12       	cpse	r13, r31
    5e7c:	ca cf       	rjmp	.-108    	; 0x5e12 <EthernetClient::connect(IPAddress, unsigned int)+0x32>
    5e7e:	d2 cf       	rjmp	.-92     	; 0x5e24 <EthernetClient::connect(IPAddress, unsigned int)+0x44>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:54

  if (_sock == MAX_SOCK_NUM)
    return 0;

  _srcport++;
  if (_srcport == 0) _srcport = 1024;
    5e80:	20 e0       	ldi	r18, 0x00	; 0
    5e82:	34 e0       	ldi	r19, 0x04	; 4
    5e84:	da cf       	rjmp	.-76     	; 0x5e3a <EthernetClient::connect(IPAddress, unsigned int)+0x5a>
connect():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:72
    5e86:	81 11       	cpse	r24, r1
    5e88:	09 c0       	rjmp	.+18     	; 0x5e9c <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:73
    ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
    5e8a:	8b 81       	ldd	r24, Y+3	; 0x03
    5e8c:	81 11       	cpse	r24, r1
    5e8e:	06 c0       	rjmp	.+12     	; 0x5e9c <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
    5e90:	8c 81       	ldd	r24, Y+4	; 0x04
    5e92:	81 11       	cpse	r24, r1
    5e94:	03 c0       	rjmp	.+6      	; 0x5e9c <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
    5e96:	8d 81       	ldd	r24, Y+5	; 0x05
    5e98:	88 23       	and	r24, r24
    5e9a:	31 f3       	breq	.-52     	; 0x5e68 <EthernetClient::connect(IPAddress, unsigned int)+0x88>
    5e9c:	e1 14       	cp	r14, r1
    5e9e:	f1 04       	cpc	r15, r1
    5ea0:	19 f3       	breq	.-58     	; 0x5e68 <EthernetClient::connect(IPAddress, unsigned int)+0x88>
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:57
  socket(_sock, SnMR::TCP, _srcport, 0);

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    5ea2:	f8 01       	movw	r30, r16
    5ea4:	d4 84       	ldd	r13, Z+12	; 0x0c
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    5ea6:	ae 01       	movw	r20, r28
    5ea8:	4e 5f       	subi	r20, 0xFE	; 254
    5eaa:	5f 4f       	sbci	r21, 0xFF	; 255
writeSn():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:363
    uint8_t cntl_byte = (_s<<5)+0x08;
    return read(_addr, cntl_byte, _buf, _len );
}

uint16_t W5500Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {
    uint8_t cntl_byte = (_s<<5)+0x0C;
    5eac:	6d 2d       	mov	r22, r13
    5eae:	62 95       	swap	r22
    5eb0:	66 0f       	add	r22, r22
    5eb2:	60 7e       	andi	r22, 0xE0	; 224
    5eb4:	64 5f       	subi	r22, 0xF4	; 244
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:364
    return write(_addr, cntl_byte, _buf, _len);
    5eb6:	24 e0       	ldi	r18, 0x04	; 4
    5eb8:	30 e0       	ldi	r19, 0x00	; 0
    5eba:	8c e0       	ldi	r24, 0x0C	; 12
    5ebc:	90 e0       	ldi	r25, 0x00	; 0
    5ebe:	0e 94 32 90 	call	0x12064	; 0x12064 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
writeSnDPORT():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:312
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
  __SOCKET_REGISTER16(SnPORT,     0x0004)        // Source Port
  __SOCKET_REGISTER_N(SnDHAR,     0x0006, 6)     // Destination Hardw Addr
  __SOCKET_REGISTER_N(SnDIPR,     0x000C, 4)     // Destination IP Addr
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
    5ec2:	4f 2d       	mov	r20, r15
    5ec4:	60 e1       	ldi	r22, 0x10	; 16
    5ec6:	70 e0       	ldi	r23, 0x00	; 0
    5ec8:	8d 2d       	mov	r24, r13
    5eca:	0e 94 e6 90 	call	0x121cc	; 0x121cc <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
    5ece:	4e 2d       	mov	r20, r14
    5ed0:	61 e1       	ldi	r22, 0x11	; 17
    5ed2:	70 e0       	ldi	r23, 0x00	; 0
    5ed4:	8d 2d       	mov	r24, r13
    5ed6:	0e 94 e6 90 	call	0x121cc	; 0x121cc <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
connect():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:81
    return 0;

  // set destination IP
  w5500.writeSnDIPR(s, addr);
  w5500.writeSnDPORT(s, port);
  w5500.execCmdSn(s, Sock_CONNECT);
    5eda:	64 e0       	ldi	r22, 0x04	; 4
    5edc:	70 e0       	ldi	r23, 0x00	; 0
    5ede:	8d 2d       	mov	r24, r13
    5ee0:	0e 94 61 91 	call	0x122c2	; 0x122c2 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:62
    _sock = MAX_SOCK_NUM;
    return 0;
  }

  while (status() != SnSR::ESTABLISHED) {
    5ee4:	c8 01       	movw	r24, r16
    5ee6:	0e 94 ad 93 	call	0x1275a	; 0x1275a <EthernetClient::status()>
    5eea:	87 31       	cpi	r24, 0x17	; 23
    5eec:	61 f0       	breq	.+24     	; 0x5f06 <EthernetClient::connect(IPAddress, unsigned int)+0x126>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:63
    delay(1);
    5eee:	61 e0       	ldi	r22, 0x01	; 1
    5ef0:	70 e0       	ldi	r23, 0x00	; 0
    5ef2:	80 e0       	ldi	r24, 0x00	; 0
    5ef4:	90 e0       	ldi	r25, 0x00	; 0
    5ef6:	0e 94 f5 83 	call	0x107ea	; 0x107ea <delay>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:64
    if (status() == SnSR::CLOSED) {
    5efa:	c8 01       	movw	r24, r16
    5efc:	0e 94 ad 93 	call	0x1275a	; 0x1275a <EthernetClient::status()>
    5f00:	81 11       	cpse	r24, r1
    5f02:	f0 cf       	rjmp	.-32     	; 0x5ee4 <EthernetClient::connect(IPAddress, unsigned int)+0x104>
    5f04:	b1 cf       	rjmp	.-158    	; 0x5e68 <EthernetClient::connect(IPAddress, unsigned int)+0x88>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:70
      _sock = MAX_SOCK_NUM;
      return 0;
    }
  }

  return 1;
    5f06:	81 e0       	ldi	r24, 0x01	; 1
    5f08:	90 e0       	ldi	r25, 0x00	; 0
    5f0a:	77 cf       	rjmp	.-274    	; 0x5dfa <EthernetClient::connect(IPAddress, unsigned int)+0x1a>

00005f0c <DNSClient::getHostByName(char const*, IPAddress&)>:
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:119
        return 0;
    }
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
    5f0c:	4f 92       	push	r4
    5f0e:	5f 92       	push	r5
    5f10:	6f 92       	push	r6
    5f12:	7f 92       	push	r7
    5f14:	8f 92       	push	r8
    5f16:	9f 92       	push	r9
    5f18:	af 92       	push	r10
    5f1a:	bf 92       	push	r11
    5f1c:	cf 92       	push	r12
    5f1e:	df 92       	push	r13
    5f20:	ef 92       	push	r14
    5f22:	ff 92       	push	r15
    5f24:	0f 93       	push	r16
    5f26:	1f 93       	push	r17
    5f28:	cf 93       	push	r28
    5f2a:	df 93       	push	r29
    5f2c:	cd b7       	in	r28, 0x3d	; 61
    5f2e:	de b7       	in	r29, 0x3e	; 62
    5f30:	63 97       	sbiw	r28, 0x13	; 19
    5f32:	0f b6       	in	r0, 0x3f	; 63
    5f34:	f8 94       	cli
    5f36:	de bf       	out	0x3e, r29	; 62
    5f38:	0f be       	out	0x3f, r0	; 63
    5f3a:	cd bf       	out	0x3d, r28	; 61
    5f3c:	7c 01       	movw	r14, r24
    5f3e:	6b 01       	movw	r12, r22
    5f40:	3a 01       	movw	r6, r20
    5f42:	fb 01       	movw	r30, r22
    5f44:	db 01       	movw	r26, r22
inet_aton():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:62

int DNSClient::inet_aton(const char* aIPAddrString, IPAddress& aResult)
{
    // See if we've been given a valid IP address
    const char* p =aIPAddrString;
    while (*p &&
    5f46:	8d 91       	ld	r24, X+
    5f48:	81 11       	cpse	r24, r1
    5f4a:	fd cf       	rjmp	.-6      	; 0x5f46 <DNSClient::getHostByName(char const*, IPAddress&)+0x3a>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:73
    if (*p == '\0')
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
    5f4c:	30 e0       	ldi	r19, 0x00	; 0
    5f4e:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:72

    if (*p == '\0')
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
    5f50:	90 e0       	ldi	r25, 0x00	; 0
    5f52:	80 e0       	ldi	r24, 0x00	; 0
inet_aton():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:94
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    5f54:	5a e0       	ldi	r21, 0x0A	; 10
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:74
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
        while (*p && (segment < 4))
    5f56:	41 91       	ld	r20, Z+
    5f58:	44 23       	and	r20, r20
    5f5a:	01 f1       	breq	.+64     	; 0x5f9c <DNSClient::getHostByName(char const*, IPAddress&)+0x90>
    5f5c:	84 30       	cpi	r24, 0x04	; 4
    5f5e:	91 05       	cpc	r25, r1
    5f60:	0c f0       	brlt	.+2      	; 0x5f64 <DNSClient::getHostByName(char const*, IPAddress&)+0x58>
    5f62:	42 c0       	rjmp	.+132    	; 0x5fe8 <DNSClient::getHostByName(char const*, IPAddress&)+0xdc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:76
        {
            if (*p == '.')
    5f64:	4e 32       	cpi	r20, 0x2E	; 46
    5f66:	69 f4       	brne	.+26     	; 0x5f82 <DNSClient::getHostByName(char const*, IPAddress&)+0x76>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:79
            {
                // We've reached the end of a segment
                if (segmentValue > 255)
    5f68:	2f 3f       	cpi	r18, 0xFF	; 255
    5f6a:	31 05       	cpc	r19, r1
    5f6c:	09 f0       	breq	.+2      	; 0x5f70 <DNSClient::getHostByName(char const*, IPAddress&)+0x64>
    5f6e:	e4 f5       	brge	.+120    	; 0x5fe8 <DNSClient::getHostByName(char const*, IPAddress&)+0xdc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:86
                    // You can't have IP address segments that don't fit in a byte
                    return 0;
                }
                else
                {
                    aResult[segment] = (byte)segmentValue;
    5f70:	d3 01       	movw	r26, r6
    5f72:	a8 0f       	add	r26, r24
    5f74:	b9 1f       	adc	r27, r25
    5f76:	12 96       	adiw	r26, 0x02	; 2
    5f78:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:87
                    segment++;
    5f7a:	01 96       	adiw	r24, 0x01	; 1
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:88
                    segmentValue = 0;
    5f7c:	30 e0       	ldi	r19, 0x00	; 0
    5f7e:	20 e0       	ldi	r18, 0x00	; 0
    5f80:	ea cf       	rjmp	.-44     	; 0x5f56 <DNSClient::getHostByName(char const*, IPAddress&)+0x4a>
inet_aton():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:94
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    5f82:	52 9f       	mul	r21, r18
    5f84:	b0 01       	movw	r22, r0
    5f86:	53 9f       	mul	r21, r19
    5f88:	70 0d       	add	r23, r0
    5f8a:	11 24       	eor	r1, r1
    5f8c:	24 2f       	mov	r18, r20
    5f8e:	44 0f       	add	r20, r20
    5f90:	33 0b       	sbc	r19, r19
    5f92:	20 53       	subi	r18, 0x30	; 48
    5f94:	31 09       	sbc	r19, r1
    5f96:	26 0f       	add	r18, r22
    5f98:	37 1f       	adc	r19, r23
    5f9a:	dd cf       	rjmp	.-70     	; 0x5f56 <DNSClient::getHostByName(char const*, IPAddress&)+0x4a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:100
            }
            p++;
        }
        // We've reached the end of address, but there'll still be the last
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
    5f9c:	2f 3f       	cpi	r18, 0xFF	; 255
    5f9e:	31 05       	cpc	r19, r1
    5fa0:	09 f0       	breq	.+2      	; 0x5fa4 <DNSClient::getHostByName(char const*, IPAddress&)+0x98>
    5fa2:	14 f5       	brge	.+68     	; 0x5fe8 <DNSClient::getHostByName(char const*, IPAddress&)+0xdc>
    5fa4:	84 30       	cpi	r24, 0x04	; 4
    5fa6:	91 05       	cpc	r25, r1
    5fa8:	fc f4       	brge	.+62     	; 0x5fe8 <DNSClient::getHostByName(char const*, IPAddress&)+0xdc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:108
            // or more than four segments
            return 0;
        }
        else
        {
            aResult[segment] = (byte)segmentValue;
    5faa:	68 0e       	add	r6, r24
    5fac:	79 1e       	adc	r7, r25
    5fae:	f3 01       	movw	r30, r6
    5fb0:	22 83       	std	Z+2, r18	; 0x02
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:126

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    {
        // It is, our work here is done
        return 1;
    5fb2:	cc 24       	eor	r12, r12
    5fb4:	c3 94       	inc	r12
    5fb6:	d1 2c       	mov	r13, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:173
        // We're done with the socket now
        iUdp.stop();
    }

    return ret;
}
    5fb8:	c6 01       	movw	r24, r12
    5fba:	63 96       	adiw	r28, 0x13	; 19
    5fbc:	0f b6       	in	r0, 0x3f	; 63
    5fbe:	f8 94       	cli
    5fc0:	de bf       	out	0x3e, r29	; 62
    5fc2:	0f be       	out	0x3f, r0	; 63
    5fc4:	cd bf       	out	0x3d, r28	; 61
    5fc6:	df 91       	pop	r29
    5fc8:	cf 91       	pop	r28
    5fca:	1f 91       	pop	r17
    5fcc:	0f 91       	pop	r16
    5fce:	ff 90       	pop	r15
    5fd0:	ef 90       	pop	r14
    5fd2:	df 90       	pop	r13
    5fd4:	cf 90       	pop	r12
    5fd6:	bf 90       	pop	r11
    5fd8:	af 90       	pop	r10
    5fda:	9f 90       	pop	r9
    5fdc:	8f 90       	pop	r8
    5fde:	7f 90       	pop	r7
    5fe0:	6f 90       	pop	r6
    5fe2:	5f 90       	pop	r5
    5fe4:	4f 90       	pop	r4
    5fe6:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:130
        // It is, our work here is done
        return 1;
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    5fe8:	f7 01       	movw	r30, r14
    5fea:	42 81       	ldd	r20, Z+2	; 0x02
    5fec:	53 81       	ldd	r21, Z+3	; 0x03
    5fee:	64 81       	ldd	r22, Z+4	; 0x04
    5ff0:	75 81       	ldd	r23, Z+5	; 0x05
    5ff2:	80 91 19 0c 	lds	r24, 0x0C19	; 0x800c19 <_ZL11INADDR_NONE.lto_priv.195+0x2>
    5ff6:	90 91 1a 0c 	lds	r25, 0x0C1A	; 0x800c1a <_ZL11INADDR_NONE.lto_priv.195+0x3>
    5ffa:	a0 91 1b 0c 	lds	r26, 0x0C1B	; 0x800c1b <_ZL11INADDR_NONE.lto_priv.195+0x4>
    5ffe:	b0 91 1c 0c 	lds	r27, 0x0C1C	; 0x800c1c <_ZL11INADDR_NONE.lto_priv.195+0x5>
    6002:	48 17       	cp	r20, r24
    6004:	59 07       	cpc	r21, r25
    6006:	6a 07       	cpc	r22, r26
    6008:	7b 07       	cpc	r23, r27
    600a:	09 f4       	brne	.+2      	; 0x600e <DNSClient::getHostByName(char const*, IPAddress&)+0x102>
    600c:	00 c2       	rjmp	.+1024   	; 0x640e <DNSClient::getHostByName(char const*, IPAddress&)+0x502>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:136
    {
        return INVALID_SERVER;
    }
	
    // Find a socket to use
    if (iUdp.begin(1024+(millis() & 0xF)) == 1)
    600e:	87 01       	movw	r16, r14
    6010:	08 5f       	subi	r16, 0xF8	; 248
    6012:	1f 4f       	sbci	r17, 0xFF	; 255
    6014:	0e 94 1d 85 	call	0x10a3a	; 0x10a3a <millis>
    6018:	6f 70       	andi	r22, 0x0F	; 15
    601a:	77 27       	eor	r23, r23
    601c:	7c 5f       	subi	r23, 0xFC	; 252
    601e:	c8 01       	movw	r24, r16
    6020:	0e 94 0a 93 	call	0x12614	; 0x12614 <EthernetUDP::begin(unsigned int)>
    6024:	81 30       	cpi	r24, 0x01	; 1
    6026:	09 f0       	breq	.+2      	; 0x602a <DNSClient::getHostByName(char const*, IPAddress&)+0x11e>
    6028:	f7 c1       	rjmp	.+1006   	; 0x6418 <DNSClient::getHostByName(char const*, IPAddress&)+0x50c>
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    602a:	82 ee       	ldi	r24, 0xE2	; 226
    602c:	92 e0       	ldi	r25, 0x02	; 2
    602e:	9a 83       	std	Y+2, r25	; 0x02
    6030:	89 83       	std	Y+1, r24	; 0x01
    6032:	f7 01       	movw	r30, r14
    6034:	82 81       	ldd	r24, Z+2	; 0x02
    6036:	93 81       	ldd	r25, Z+3	; 0x03
    6038:	a4 81       	ldd	r26, Z+4	; 0x04
    603a:	b5 81       	ldd	r27, Z+5	; 0x05
    603c:	8b 83       	std	Y+3, r24	; 0x03
    603e:	9c 83       	std	Y+4, r25	; 0x04
    6040:	ad 83       	std	Y+5, r26	; 0x05
    6042:	be 83       	std	Y+6, r27	; 0x06
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:143
        // Try up to three times
        int retries = 0;
//        while ((retries < 3) && (ret <= 0))
        {
            // Send DNS request
            ret = iUdp.beginPacket(iDNSServer, DNS_PORT);
    6044:	45 e3       	ldi	r20, 0x35	; 53
    6046:	50 e0       	ldi	r21, 0x00	; 0
    6048:	be 01       	movw	r22, r28
    604a:	6f 5f       	subi	r22, 0xFF	; 255
    604c:	7f 4f       	sbci	r23, 0xFF	; 255
    604e:	c8 01       	movw	r24, r16
    6050:	0e 94 6e 93 	call	0x126dc	; 0x126dc <EthernetUDP::beginPacket(IPAddress, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:144
            if (ret != 0)
    6054:	89 2b       	or	r24, r25
    6056:	31 f4       	brne	.+12     	; 0x6064 <DNSClient::getHostByName(char const*, IPAddress&)+0x158>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:275
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
        (iUdp.remotePort() != DNS_PORT) )
    {
        // It's not from who we expected
        return INVALID_SERVER;
    6058:	d1 2c       	mov	r13, r1
    605a:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:169
            }
            retries++;
        }

        // We're done with the socket now
        iUdp.stop();
    605c:	c8 01       	movw	r24, r16
    605e:	0e 94 38 93 	call	0x12670	; 0x12670 <EthernetUDP::stop()>
    6062:	aa cf       	rjmp	.-172    	; 0x5fb8 <DNSClient::getHostByName(char const*, IPAddress&)+0xac>
BuildRequest():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:195
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    //    |                    ARCOUNT                    |
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    // As we only support one request at a time at present, we can simplify
    // some of this header
    iRequestId = millis(); // generate a random ID
    6064:	0e 94 1d 85 	call	0x10a3a	; 0x10a3a <millis>
    6068:	f7 01       	movw	r30, r14
    606a:	77 83       	std	Z+7, r23	; 0x07
    606c:	66 83       	std	Z+6, r22	; 0x06
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:200
    uint16_t twoByteBuffer;

    // FIXME We should also check that there's enough space available to write to, rather
    // FIXME than assume there's enough space (as the code does at present)
    iUdp.write((uint8_t*)&iRequestId, sizeof(iRequestId));
    606e:	42 e0       	ldi	r20, 0x02	; 2
    6070:	50 e0       	ldi	r21, 0x00	; 0
    6072:	b7 01       	movw	r22, r14
    6074:	6a 5f       	subi	r22, 0xFA	; 250
    6076:	7f 4f       	sbci	r23, 0xFF	; 255
    6078:	c8 01       	movw	r24, r16
    607a:	0e 94 2f 91 	call	0x1225e	; 0x1225e <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:202

    twoByteBuffer = htons(QUERY_FLAG | OPCODE_STANDARD_QUERY | RECURSION_DESIRED_FLAG);
    607e:	81 e0       	ldi	r24, 0x01	; 1
    6080:	90 e0       	ldi	r25, 0x00	; 0
    6082:	9a 83       	std	Y+2, r25	; 0x02
    6084:	89 83       	std	Y+1, r24	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:203
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    6086:	42 e0       	ldi	r20, 0x02	; 2
    6088:	50 e0       	ldi	r21, 0x00	; 0
    608a:	be 01       	movw	r22, r28
    608c:	6f 5f       	subi	r22, 0xFF	; 255
    608e:	7f 4f       	sbci	r23, 0xFF	; 255
    6090:	c8 01       	movw	r24, r16
    6092:	0e 94 2f 91 	call	0x1225e	; 0x1225e <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:205

    twoByteBuffer = htons(1);  // One question record
    6096:	80 e0       	ldi	r24, 0x00	; 0
    6098:	91 e0       	ldi	r25, 0x01	; 1
    609a:	9a 83       	std	Y+2, r25	; 0x02
    609c:	89 83       	std	Y+1, r24	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:206
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    609e:	42 e0       	ldi	r20, 0x02	; 2
    60a0:	50 e0       	ldi	r21, 0x00	; 0
    60a2:	be 01       	movw	r22, r28
    60a4:	6f 5f       	subi	r22, 0xFF	; 255
    60a6:	7f 4f       	sbci	r23, 0xFF	; 255
    60a8:	c8 01       	movw	r24, r16
    60aa:	0e 94 2f 91 	call	0x1225e	; 0x1225e <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:208

    twoByteBuffer = 0;  // Zero answer records
    60ae:	1a 82       	std	Y+2, r1	; 0x02
    60b0:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:209
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    60b2:	42 e0       	ldi	r20, 0x02	; 2
    60b4:	50 e0       	ldi	r21, 0x00	; 0
    60b6:	be 01       	movw	r22, r28
    60b8:	6f 5f       	subi	r22, 0xFF	; 255
    60ba:	7f 4f       	sbci	r23, 0xFF	; 255
    60bc:	c8 01       	movw	r24, r16
    60be:	0e 94 2f 91 	call	0x1225e	; 0x1225e <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:211

    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    60c2:	42 e0       	ldi	r20, 0x02	; 2
    60c4:	50 e0       	ldi	r21, 0x00	; 0
    60c6:	be 01       	movw	r22, r28
    60c8:	6f 5f       	subi	r22, 0xFF	; 255
    60ca:	7f 4f       	sbci	r23, 0xFF	; 255
    60cc:	c8 01       	movw	r24, r16
    60ce:	0e 94 2f 91 	call	0x1225e	; 0x1225e <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:213
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    60d2:	42 e0       	ldi	r20, 0x02	; 2
    60d4:	50 e0       	ldi	r21, 0x00	; 0
    60d6:	be 01       	movw	r22, r28
    60d8:	6f 5f       	subi	r22, 0xFF	; 255
    60da:	7f 4f       	sbci	r23, 0xFF	; 255
    60dc:	c8 01       	movw	r24, r16
    60de:	0e 94 2f 91 	call	0x1225e	; 0x1225e <EthernetUDP::write(unsigned char const*, unsigned int)>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:216

    // Build question
    const char* start =aName;
    60e2:	56 01       	movw	r10, r12
BuildRequest():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:220
    const char* end =start;
    uint8_t len;
    // Run through the name being requested
    while (*end)
    60e4:	f6 01       	movw	r30, r12
    60e6:	80 81       	ld	r24, Z
    60e8:	88 23       	and	r24, r24
    60ea:	01 f1       	breq	.+64     	; 0x612c <DNSClient::getHostByName(char const*, IPAddress&)+0x220>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:223
    {
        // Find out how long this section of the name is
        end = start;
    60ec:	65 01       	movw	r12, r10
BuildRequest():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:224
        while (*end && (*end != '.') )
    60ee:	f6 01       	movw	r30, r12
    60f0:	81 91       	ld	r24, Z+
    60f2:	2f 01       	movw	r4, r30
    60f4:	88 23       	and	r24, r24
    60f6:	11 f0       	breq	.+4      	; 0x60fc <DNSClient::getHostByName(char const*, IPAddress&)+0x1f0>
    60f8:	8e 32       	cpi	r24, 0x2E	; 46
    60fa:	b1 f4       	brne	.+44     	; 0x6128 <DNSClient::getHostByName(char const*, IPAddress&)+0x21c>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:229
        {
            end++;
        }

        if (end-start > 0)
    60fc:	46 01       	movw	r8, r12
    60fe:	8a 18       	sub	r8, r10
    6100:	9b 08       	sbc	r9, r11
    6102:	18 14       	cp	r1, r8
    6104:	19 04       	cpc	r1, r9
    6106:	74 f4       	brge	.+28     	; 0x6124 <DNSClient::getHostByName(char const*, IPAddress&)+0x218>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:232
        {
            // Write out the size of this section
            len = end-start;
    6108:	8d 86       	std	Y+13, r8	; 0x0d
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:233
            iUdp.write(&len, sizeof(len));
    610a:	41 e0       	ldi	r20, 0x01	; 1
    610c:	50 e0       	ldi	r21, 0x00	; 0
    610e:	be 01       	movw	r22, r28
    6110:	63 5f       	subi	r22, 0xF3	; 243
    6112:	7f 4f       	sbci	r23, 0xFF	; 255
    6114:	c8 01       	movw	r24, r16
    6116:	0e 94 2f 91 	call	0x1225e	; 0x1225e <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:235
            // And then write out the section
            iUdp.write((uint8_t*)start, end-start);
    611a:	a4 01       	movw	r20, r8
    611c:	b5 01       	movw	r22, r10
    611e:	c8 01       	movw	r24, r16
    6120:	0e 94 2f 91 	call	0x1225e	; 0x1225e <EthernetUDP::write(unsigned char const*, unsigned int)>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:216
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));

    // Build question
    const char* start =aName;
    6124:	52 01       	movw	r10, r4
    6126:	de cf       	rjmp	.-68     	; 0x60e4 <DNSClient::getHostByName(char const*, IPAddress&)+0x1d8>
BuildRequest():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:224
    // Run through the name being requested
    while (*end)
    {
        // Find out how long this section of the name is
        end = start;
        while (*end && (*end != '.') )
    6128:	62 01       	movw	r12, r4
    612a:	e1 cf       	rjmp	.-62     	; 0x60ee <DNSClient::getHostByName(char const*, IPAddress&)+0x1e2>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:242
        start = end+1;
    }

    // We've got to the end of the question name, so
    // terminate it with a zero-length section
    len = 0;
    612c:	1d 86       	std	Y+13, r1	; 0x0d
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:243
    iUdp.write(&len, sizeof(len));
    612e:	41 e0       	ldi	r20, 0x01	; 1
    6130:	50 e0       	ldi	r21, 0x00	; 0
    6132:	be 01       	movw	r22, r28
    6134:	63 5f       	subi	r22, 0xF3	; 243
    6136:	7f 4f       	sbci	r23, 0xFF	; 255
    6138:	c8 01       	movw	r24, r16
    613a:	0e 94 2f 91 	call	0x1225e	; 0x1225e <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:245
    // Finally the type and class of question
    twoByteBuffer = htons(TYPE_A);
    613e:	c1 2c       	mov	r12, r1
    6140:	dd 24       	eor	r13, r13
    6142:	d3 94       	inc	r13
    6144:	da 82       	std	Y+2, r13	; 0x02
    6146:	c9 82       	std	Y+1, r12	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:246
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    6148:	42 e0       	ldi	r20, 0x02	; 2
    614a:	50 e0       	ldi	r21, 0x00	; 0
    614c:	be 01       	movw	r22, r28
    614e:	6f 5f       	subi	r22, 0xFF	; 255
    6150:	7f 4f       	sbci	r23, 0xFF	; 255
    6152:	c8 01       	movw	r24, r16
    6154:	0e 94 2f 91 	call	0x1225e	; 0x1225e <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:248

    twoByteBuffer = htons(CLASS_IN);  // Internet class of question
    6158:	da 82       	std	Y+2, r13	; 0x02
    615a:	c9 82       	std	Y+1, r12	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:249
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    615c:	42 e0       	ldi	r20, 0x02	; 2
    615e:	50 e0       	ldi	r21, 0x00	; 0
    6160:	be 01       	movw	r22, r28
    6162:	6f 5f       	subi	r22, 0xFF	; 255
    6164:	7f 4f       	sbci	r23, 0xFF	; 255
    6166:	c8 01       	movw	r24, r16
    6168:	0e 94 2f 91 	call	0x1225e	; 0x1225e <EthernetUDP::write(unsigned char const*, unsigned int)>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:151
                // Now output the request data
                ret = BuildRequest(aHostname);
                if (ret != 0)
                {
                    // And finally send the request
                    ret = iUdp.endPacket();
    616c:	c8 01       	movw	r24, r16
    616e:	0e 94 45 93 	call	0x1268a	; 0x1268a <EthernetUDP::endPacket()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:152
                    if (ret != 0)
    6172:	89 2b       	or	r24, r25
    6174:	09 f4       	brne	.+2      	; 0x6178 <DNSClient::getHostByName(char const*, IPAddress&)+0x26c>
    6176:	70 cf       	rjmp	.-288    	; 0x6058 <DNSClient::getHostByName(char const*, IPAddress&)+0x14c>
    6178:	f3 e0       	ldi	r31, 0x03	; 3
    617a:	af 2e       	mov	r10, r31
    617c:	b1 2c       	mov	r11, r1
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    617e:	23 01       	movw	r4, r6
    6180:	22 e0       	ldi	r18, 0x02	; 2
    6182:	42 0e       	add	r4, r18
    6184:	51 1c       	adc	r5, r1
    6186:	43 c0       	rjmp	.+134    	; 0x620e <DNSClient::getHostByName(char const*, IPAddress&)+0x302>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:271

    // We've had a reply!
    // Read the UDP header
    uint8_t header[DNS_HEADER_SIZE]; // Enough space to reuse for the DNS header
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
    6188:	f7 01       	movw	r30, r14
    618a:	42 81       	ldd	r20, Z+2	; 0x02
    618c:	53 81       	ldd	r21, Z+3	; 0x03
    618e:	64 81       	ldd	r22, Z+4	; 0x04
    6190:	75 81       	ldd	r23, Z+5	; 0x05
    6192:	81 8d       	ldd	r24, Z+25	; 0x19
    6194:	92 8d       	ldd	r25, Z+26	; 0x1a
    6196:	a3 8d       	ldd	r26, Z+27	; 0x1b
    6198:	b4 8d       	ldd	r27, Z+28	; 0x1c
    619a:	48 17       	cp	r20, r24
    619c:	59 07       	cpc	r21, r25
    619e:	6a 07       	cpc	r22, r26
    61a0:	7b 07       	cpc	r23, r27
    61a2:	09 f0       	breq	.+2      	; 0x61a6 <DNSClient::getHostByName(char const*, IPAddress&)+0x29a>
    61a4:	2a c1       	rjmp	.+596    	; 0x63fa <DNSClient::getHostByName(char const*, IPAddress&)+0x4ee>
    61a6:	85 8d       	ldd	r24, Z+29	; 0x1d
    61a8:	96 8d       	ldd	r25, Z+30	; 0x1e
    61aa:	c5 97       	sbiw	r24, 0x35	; 53
    61ac:	09 f0       	breq	.+2      	; 0x61b0 <DNSClient::getHostByName(char const*, IPAddress&)+0x2a4>
    61ae:	25 c1       	rjmp	.+586    	; 0x63fa <DNSClient::getHostByName(char const*, IPAddress&)+0x4ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:279
        // It's not from who we expected
        return INVALID_SERVER;
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    61b0:	81 a1       	ldd	r24, Z+33	; 0x21
    61b2:	92 a1       	ldd	r25, Z+34	; 0x22
    61b4:	0c 97       	sbiw	r24, 0x0c	; 12
    61b6:	0c f4       	brge	.+2      	; 0x61ba <DNSClient::getHostByName(char const*, IPAddress&)+0x2ae>
    61b8:	25 c1       	rjmp	.+586    	; 0x6404 <DNSClient::getHostByName(char const*, IPAddress&)+0x4f8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:283
    {
        return TRUNCATED;
    }
    iUdp.read(header, DNS_HEADER_SIZE);
    61ba:	4c e0       	ldi	r20, 0x0C	; 12
    61bc:	50 e0       	ldi	r21, 0x00	; 0
    61be:	be 01       	movw	r22, r28
    61c0:	6f 5f       	subi	r22, 0xFF	; 255
    61c2:	7f 4f       	sbci	r23, 0xFF	; 255
    61c4:	c8 01       	movw	r24, r16
    61c6:	0e 94 14 92 	call	0x12428	; 0x12428 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:285

    uint16_t header_flags = htons(*((uint16_t*)&header[2]));
    61ca:	8b 81       	ldd	r24, Y+3	; 0x03
    61cc:	9c 81       	ldd	r25, Y+4	; 0x04
    61ce:	98 27       	eor	r25, r24
    61d0:	89 27       	eor	r24, r25
    61d2:	98 27       	eor	r25, r24
    61d4:	9a 8b       	std	Y+18, r25	; 0x12
    61d6:	89 8b       	std	Y+17, r24	; 0x11
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:287
    // Check that it's a response to this request
    if ( ( iRequestId != (*((uint16_t*)&header[0])) ) ||
    61d8:	f7 01       	movw	r30, r14
    61da:	46 81       	ldd	r20, Z+6	; 0x06
    61dc:	57 81       	ldd	r21, Z+7	; 0x07
    61de:	29 81       	ldd	r18, Y+1	; 0x01
    61e0:	3a 81       	ldd	r19, Y+2	; 0x02
    61e2:	42 17       	cp	r20, r18
    61e4:	53 07       	cpc	r21, r19
    61e6:	11 f4       	brne	.+4      	; 0x61ec <DNSClient::getHostByName(char const*, IPAddress&)+0x2e0>
    61e8:	97 fd       	sbrc	r25, 7
    61ea:	2f c0       	rjmp	.+94     	; 0x624a <DNSClient::getHostByName(char const*, IPAddress&)+0x33e>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:291
        ((header_flags & QUERY_RESPONSE_MASK) != (uint16_t)RESPONSE_FLAG) )
    {
        // Mark the entire packet as read
        iUdp.flush();
    61ec:	c8 01       	movw	r24, r16
    61ee:	0e 94 52 79 	call	0xf2a4	; 0xf2a4 <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:292
        return INVALID_RESPONSE;
    61f2:	ec ef       	ldi	r30, 0xFC	; 252
    61f4:	ce 2e       	mov	r12, r30
    61f6:	dd 24       	eor	r13, r13
    61f8:	da 94       	dec	r13
    61fa:	81 e0       	ldi	r24, 0x01	; 1
    61fc:	a8 1a       	sub	r10, r24
    61fe:	b1 08       	sbc	r11, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:157
                    if (ret != 0)
                    {
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
    6200:	09 f4       	brne	.+2      	; 0x6204 <DNSClient::getHostByName(char const*, IPAddress&)+0x2f8>
    6202:	2c cf       	rjmp	.-424    	; 0x605c <DNSClient::getHostByName(char const*, IPAddress&)+0x150>
    6204:	ff ef       	ldi	r31, 0xFF	; 255
    6206:	cf 16       	cp	r12, r31
    6208:	df 06       	cpc	r13, r31
    620a:	09 f0       	breq	.+2      	; 0x620e <DNSClient::getHostByName(char const*, IPAddress&)+0x302>
    620c:	27 cf       	rjmp	.-434    	; 0x605c <DNSClient::getHostByName(char const*, IPAddress&)+0x150>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:257
}


uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();
    620e:	0e 94 1d 85 	call	0x10a3a	; 0x10a3a <millis>
    6212:	3b 01       	movw	r6, r22
    6214:	4c 01       	movw	r8, r24
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:260

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    6216:	c8 01       	movw	r24, r16
    6218:	0e 94 5d 92 	call	0x124ba	; 0x124ba <EthernetUDP::parsePacket()>
    621c:	18 16       	cp	r1, r24
    621e:	19 06       	cpc	r1, r25
    6220:	0c f4       	brge	.+2      	; 0x6224 <DNSClient::getHostByName(char const*, IPAddress&)+0x318>
    6222:	b2 cf       	rjmp	.-156    	; 0x6188 <DNSClient::getHostByName(char const*, IPAddress&)+0x27c>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:262
    {
        if((millis() - startTime) > aTimeout)
    6224:	0e 94 1d 85 	call	0x10a3a	; 0x10a3a <millis>
    6228:	66 19       	sub	r22, r6
    622a:	77 09       	sbc	r23, r7
    622c:	88 09       	sbc	r24, r8
    622e:	99 09       	sbc	r25, r9
    6230:	69 38       	cpi	r22, 0x89	; 137
    6232:	73 41       	sbci	r23, 0x13	; 19
    6234:	81 05       	cpc	r24, r1
    6236:	91 05       	cpc	r25, r1
    6238:	08 f0       	brcs	.+2      	; 0x623c <DNSClient::getHostByName(char const*, IPAddress&)+0x330>
    623a:	db c0       	rjmp	.+438    	; 0x63f2 <DNSClient::getHostByName(char const*, IPAddress&)+0x4e6>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:264
            return TIMED_OUT;
        delay(50);
    623c:	62 e3       	ldi	r22, 0x32	; 50
    623e:	70 e0       	ldi	r23, 0x00	; 0
    6240:	80 e0       	ldi	r24, 0x00	; 0
    6242:	90 e0       	ldi	r25, 0x00	; 0
    6244:	0e 94 f5 83 	call	0x107ea	; 0x107ea <delay>
    6248:	e6 cf       	rjmp	.-52     	; 0x6216 <DNSClient::getHostByName(char const*, IPAddress&)+0x30a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:296
        iUdp.flush();
        return INVALID_RESPONSE;
    }
    // Check for any errors in the response (or in our request)
    // although we don't do anything to get round these
    if ( (header_flags & TRUNCATION_FLAG) || (header_flags & RESP_MASK) )
    624a:	8f 70       	andi	r24, 0x0F	; 15
    624c:	92 70       	andi	r25, 0x02	; 2
    624e:	89 2b       	or	r24, r25
    6250:	41 f0       	breq	.+16     	; 0x6262 <DNSClient::getHostByName(char const*, IPAddress&)+0x356>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:299
    {
        // Mark the entire packet as read
        iUdp.flush();
    6252:	c8 01       	movw	r24, r16
    6254:	0e 94 52 79 	call	0xf2a4	; 0xf2a4 <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:300
        return -5; //INVALID_RESPONSE;
    6258:	7b ef       	ldi	r23, 0xFB	; 251
    625a:	c7 2e       	mov	r12, r23
    625c:	dd 24       	eor	r13, r13
    625e:	da 94       	dec	r13
    6260:	cc cf       	rjmp	.-104    	; 0x61fa <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:304
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
    6262:	6f 80       	ldd	r6, Y+7	; 0x07
    6264:	78 84       	ldd	r7, Y+8	; 0x08
    6266:	76 24       	eor	r7, r6
    6268:	67 24       	eor	r6, r7
    626a:	76 24       	eor	r7, r6
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:313
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    626c:	d1 2c       	mov	r13, r1
    626e:	c1 2c       	mov	r12, r1
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:305
        return -5; //INVALID_RESPONSE;
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
    if (answerCount == 0 )
    6270:	61 14       	cp	r6, r1
    6272:	71 04       	cpc	r7, r1
    6274:	d1 f4       	brne	.+52     	; 0x62aa <DNSClient::getHostByName(char const*, IPAddress&)+0x39e>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:308
    {
        // Mark the entire packet as read
        iUdp.flush();
    6276:	c8 01       	movw	r24, r16
    6278:	0e 94 52 79 	call	0xf2a4	; 0xf2a4 <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:309
        return -6; //INVALID_RESPONSE;
    627c:	6a ef       	ldi	r22, 0xFA	; 250
    627e:	c6 2e       	mov	r12, r22
    6280:	dd 24       	eor	r13, r13
    6282:	da 94       	dec	r13
    6284:	ba cf       	rjmp	.-140    	; 0x61fa <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:329
                while(len--)
                {
                    iUdp.read(); // we don't care about the returned byte
                }
            }
        } while (len != 0);
    6286:	8d 85       	ldd	r24, Y+13	; 0x0d
    6288:	81 11       	cpse	r24, r1
    628a:	17 c0       	rjmp	.+46     	; 0x62ba <DNSClient::getHostByName(char const*, IPAddress&)+0x3ae>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:334

        // Now jump over the type and class
        for (int i =0; i < 4; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    628c:	c8 01       	movw	r24, r16
    628e:	0e 94 33 92 	call	0x12466	; 0x12466 <EthernetUDP::read()>
    6292:	c8 01       	movw	r24, r16
    6294:	0e 94 33 92 	call	0x12466	; 0x12466 <EthernetUDP::read()>
    6298:	c8 01       	movw	r24, r16
    629a:	0e 94 33 92 	call	0x12466	; 0x12466 <EthernetUDP::read()>
    629e:	c8 01       	movw	r24, r16
    62a0:	0e 94 33 92 	call	0x12466	; 0x12466 <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:313
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    62a4:	ff ef       	ldi	r31, 0xFF	; 255
    62a6:	cf 1a       	sub	r12, r31
    62a8:	df 0a       	sbc	r13, r31
    62aa:	8d 81       	ldd	r24, Y+5	; 0x05
    62ac:	9e 81       	ldd	r25, Y+6	; 0x06
    62ae:	98 27       	eor	r25, r24
    62b0:	89 27       	eor	r24, r25
    62b2:	98 27       	eor	r25, r24
    62b4:	c8 16       	cp	r12, r24
    62b6:	d9 06       	cpc	r13, r25
    62b8:	a8 f4       	brcc	.+42     	; 0x62e4 <DNSClient::getHostByName(char const*, IPAddress&)+0x3d8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:319
    {
        // Skip over the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    62ba:	41 e0       	ldi	r20, 0x01	; 1
    62bc:	50 e0       	ldi	r21, 0x00	; 0
    62be:	be 01       	movw	r22, r28
    62c0:	63 5f       	subi	r22, 0xF3	; 243
    62c2:	7f 4f       	sbci	r23, 0xFF	; 255
    62c4:	c8 01       	movw	r24, r16
    62c6:	0e 94 14 92 	call	0x12428	; 0x12428 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:320
            if (len > 0)
    62ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    62cc:	88 23       	and	r24, r24
    62ce:	d9 f2       	breq	.-74     	; 0x6286 <DNSClient::getHostByName(char const*, IPAddress&)+0x37a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:324
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
    62d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    62d2:	9f ef       	ldi	r25, 0xFF	; 255
    62d4:	98 0f       	add	r25, r24
    62d6:	9d 87       	std	Y+13, r25	; 0x0d
    62d8:	88 23       	and	r24, r24
    62da:	a9 f2       	breq	.-86     	; 0x6286 <DNSClient::getHostByName(char const*, IPAddress&)+0x37a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:326
                {
                    iUdp.read(); // we don't care about the returned byte
    62dc:	c8 01       	movw	r24, r16
    62de:	0e 94 33 92 	call	0x12466	; 0x12466 <EthernetUDP::read()>
    62e2:	f6 cf       	rjmp	.-20     	; 0x62d0 <DNSClient::getHostByName(char const*, IPAddress&)+0x3c4>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:343
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
    62e4:	91 2c       	mov	r9, r1
    62e6:	81 2c       	mov	r8, r1
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:349
    {
        // Skip the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    62e8:	41 e0       	ldi	r20, 0x01	; 1
    62ea:	50 e0       	ldi	r21, 0x00	; 0
    62ec:	be 01       	movw	r22, r28
    62ee:	6d 5e       	subi	r22, 0xED	; 237
    62f0:	7f 4f       	sbci	r23, 0xFF	; 255
    62f2:	c8 01       	movw	r24, r16
    62f4:	0e 94 14 92 	call	0x12428	; 0x12428 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:350
            if ((len & LABEL_COMPRESSION_MASK) == 0)
    62f8:	8b 89       	ldd	r24, Y+19	; 0x13
    62fa:	98 2f       	mov	r25, r24
    62fc:	90 7c       	andi	r25, 0xC0	; 192
    62fe:	61 f4       	brne	.+24     	; 0x6318 <DNSClient::getHostByName(char const*, IPAddress&)+0x40c>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:353
            {
                // It's just a normal label
                if (len > 0)
    6300:	88 23       	and	r24, r24
    6302:	89 f0       	breq	.+34     	; 0x6326 <DNSClient::getHostByName(char const*, IPAddress&)+0x41a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:358
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
    6304:	8b 89       	ldd	r24, Y+19	; 0x13
    6306:	9f ef       	ldi	r25, 0xFF	; 255
    6308:	98 0f       	add	r25, r24
    630a:	9b 8b       	std	Y+19, r25	; 0x13
    630c:	88 23       	and	r24, r24
    630e:	41 f0       	breq	.+16     	; 0x6320 <DNSClient::getHostByName(char const*, IPAddress&)+0x414>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:360
                    {
                        iUdp.read(); // we don't care about the returned byte
    6310:	c8 01       	movw	r24, r16
    6312:	0e 94 33 92 	call	0x12466	; 0x12466 <EthernetUDP::read()>
    6316:	f6 cf       	rjmp	.-20     	; 0x6304 <DNSClient::getHostByName(char const*, IPAddress&)+0x3f8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:373
                // says that a name is either a sequence of labels ended with a
                // 0 length octet or a pointer or a sequence of labels ending in
                // a pointer.  Either way, when we get here we're at the end of
                // the name
                // Skip over the pointer
                iUdp.read(); // we don't care about the returned byte
    6318:	c8 01       	movw	r24, r16
    631a:	0e 94 33 92 	call	0x12466	; 0x12466 <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:375
                // And set len so that we drop out of the name loop
                len = 0;
    631e:	1b 8a       	std	Y+19, r1	; 0x13
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:377
            }
        } while (len != 0);
    6320:	8b 89       	ldd	r24, Y+19	; 0x13
    6322:	81 11       	cpse	r24, r1
    6324:	e1 cf       	rjmp	.-62     	; 0x62e8 <DNSClient::getHostByName(char const*, IPAddress&)+0x3dc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:382

        // Check the type and class
        uint16_t answerType;
        uint16_t answerClass;
        iUdp.read((uint8_t*)&answerType, sizeof(answerType));
    6326:	42 e0       	ldi	r20, 0x02	; 2
    6328:	50 e0       	ldi	r21, 0x00	; 0
    632a:	be 01       	movw	r22, r28
    632c:	61 5f       	subi	r22, 0xF1	; 241
    632e:	7f 4f       	sbci	r23, 0xFF	; 255
    6330:	c8 01       	movw	r24, r16
    6332:	0e 94 14 92 	call	0x12428	; 0x12428 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:383
        iUdp.read((uint8_t*)&answerClass, sizeof(answerClass));
    6336:	42 e0       	ldi	r20, 0x02	; 2
    6338:	50 e0       	ldi	r21, 0x00	; 0
    633a:	be 01       	movw	r22, r28
    633c:	63 5f       	subi	r22, 0xF3	; 243
    633e:	7f 4f       	sbci	r23, 0xFF	; 255
    6340:	c8 01       	movw	r24, r16
    6342:	0e 94 14 92 	call	0x12428	; 0x12428 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:388

        // Ignore the Time-To-Live as we don't do any caching
        for (int i =0; i < TTL_SIZE; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    6346:	c8 01       	movw	r24, r16
    6348:	0e 94 33 92 	call	0x12466	; 0x12466 <EthernetUDP::read()>
    634c:	c8 01       	movw	r24, r16
    634e:	0e 94 33 92 	call	0x12466	; 0x12466 <EthernetUDP::read()>
    6352:	c8 01       	movw	r24, r16
    6354:	0e 94 33 92 	call	0x12466	; 0x12466 <EthernetUDP::read()>
    6358:	c8 01       	movw	r24, r16
    635a:	0e 94 33 92 	call	0x12466	; 0x12466 <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:393
        }

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));
    635e:	42 e0       	ldi	r20, 0x02	; 2
    6360:	50 e0       	ldi	r21, 0x00	; 0
    6362:	be 01       	movw	r22, r28
    6364:	6f 5e       	subi	r22, 0xEF	; 239
    6366:	7f 4f       	sbci	r23, 0xFF	; 255
    6368:	c8 01       	movw	r24, r16
    636a:	0e 94 14 92 	call	0x12428	; 0x12428 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:395

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
    636e:	8f 85       	ldd	r24, Y+15	; 0x0f
    6370:	98 89       	ldd	r25, Y+16	; 0x10
    6372:	81 15       	cp	r24, r1
    6374:	91 40       	sbci	r25, 0x01	; 1
    6376:	e9 f4       	brne	.+58     	; 0x63b2 <DNSClient::getHostByName(char const*, IPAddress&)+0x4a6>
    6378:	cd 84       	ldd	r12, Y+13	; 0x0d
    637a:	de 84       	ldd	r13, Y+14	; 0x0e
    637c:	dc 24       	eor	r13, r12
    637e:	cd 24       	eor	r12, r13
    6380:	dc 24       	eor	r13, r12
    6382:	81 e0       	ldi	r24, 0x01	; 1
    6384:	c8 16       	cp	r12, r24
    6386:	d1 04       	cpc	r13, r1
    6388:	a1 f4       	brne	.+40     	; 0x63b2 <DNSClient::getHostByName(char const*, IPAddress&)+0x4a6>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:397
        {
            if (htons(header_flags) != 4)
    638a:	89 89       	ldd	r24, Y+17	; 0x11
    638c:	9a 89       	ldd	r25, Y+18	; 0x12
    638e:	81 15       	cp	r24, r1
    6390:	94 40       	sbci	r25, 0x04	; 4
    6392:	41 f0       	breq	.+16     	; 0x63a4 <DNSClient::getHostByName(char const*, IPAddress&)+0x498>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:401
            {
                // It's a weird size
                // Mark the entire packet as read
                iUdp.flush();
    6394:	c8 01       	movw	r24, r16
    6396:	0e 94 52 79 	call	0xf2a4	; 0xf2a4 <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:402
                return -9;//INVALID_RESPONSE;
    639a:	57 ef       	ldi	r21, 0xF7	; 247
    639c:	c5 2e       	mov	r12, r21
    639e:	dd 24       	eor	r13, r13
    63a0:	da 94       	dec	r13
    63a2:	2b cf       	rjmp	.-426    	; 0x61fa <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:404
            }
            iUdp.read(aAddress.raw_address(), 4);
    63a4:	44 e0       	ldi	r20, 0x04	; 4
    63a6:	50 e0       	ldi	r21, 0x00	; 0
    63a8:	b2 01       	movw	r22, r4
    63aa:	c8 01       	movw	r24, r16
    63ac:	0e 94 14 92 	call	0x12428	; 0x12428 <EthernetUDP::read(unsigned char*, unsigned int)>
    63b0:	24 cf       	rjmp	.-440    	; 0x61fa <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:395

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
    63b2:	d1 2c       	mov	r13, r1
    63b4:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:410
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    63b6:	89 89       	ldd	r24, Y+17	; 0x11
    63b8:	9a 89       	ldd	r25, Y+18	; 0x12
    63ba:	98 27       	eor	r25, r24
    63bc:	89 27       	eor	r24, r25
    63be:	98 27       	eor	r25, r24
    63c0:	c8 16       	cp	r12, r24
    63c2:	d9 06       	cpc	r13, r25
    63c4:	38 f4       	brcc	.+14     	; 0x63d4 <DNSClient::getHostByName(char const*, IPAddress&)+0x4c8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:412
            {
                iUdp.read(); // we don't care about the returned byte
    63c6:	c8 01       	movw	r24, r16
    63c8:	0e 94 33 92 	call	0x12466	; 0x12466 <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:410
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    63cc:	ff ef       	ldi	r31, 0xFF	; 255
    63ce:	cf 1a       	sub	r12, r31
    63d0:	df 0a       	sbc	r13, r31
    63d2:	f1 cf       	rjmp	.-30     	; 0x63b6 <DNSClient::getHostByName(char const*, IPAddress&)+0x4aa>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:343
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
    63d4:	2f ef       	ldi	r18, 0xFF	; 255
    63d6:	82 1a       	sub	r8, r18
    63d8:	92 0a       	sbc	r9, r18
    63da:	68 14       	cp	r6, r8
    63dc:	79 04       	cpc	r7, r9
    63de:	09 f0       	breq	.+2      	; 0x63e2 <DNSClient::getHostByName(char const*, IPAddress&)+0x4d6>
    63e0:	83 cf       	rjmp	.-250    	; 0x62e8 <DNSClient::getHostByName(char const*, IPAddress&)+0x3dc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:418
            }
        }
    }

    // Mark the entire packet as read
    iUdp.flush();
    63e2:	c8 01       	movw	r24, r16
    63e4:	0e 94 52 79 	call	0xf2a4	; 0xf2a4 <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:421

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
    63e8:	46 ef       	ldi	r20, 0xF6	; 246
    63ea:	c4 2e       	mov	r12, r20
    63ec:	dd 24       	eor	r13, r13
    63ee:	da 94       	dec	r13
    63f0:	04 cf       	rjmp	.-504    	; 0x61fa <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:263

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    {
        if((millis() - startTime) > aTimeout)
            return TIMED_OUT;
    63f2:	cc 24       	eor	r12, r12
    63f4:	ca 94       	dec	r12
    63f6:	dc 2c       	mov	r13, r12
    63f8:	00 cf       	rjmp	.-512    	; 0x61fa <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:275
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
        (iUdp.remotePort() != DNS_PORT) )
    {
        // It's not from who we expected
        return INVALID_SERVER;
    63fa:	2e ef       	ldi	r18, 0xFE	; 254
    63fc:	c2 2e       	mov	r12, r18
    63fe:	dd 24       	eor	r13, r13
    6400:	da 94       	dec	r13
    6402:	fb ce       	rjmp	.-522    	; 0x61fa <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:281
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    {
        return TRUNCATED;
    6404:	9d ef       	ldi	r25, 0xFD	; 253
    6406:	c9 2e       	mov	r12, r25
    6408:	dd 24       	eor	r13, r13
    640a:	da 94       	dec	r13
    640c:	f6 ce       	rjmp	.-532    	; 0x61fa <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:132
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    {
        return INVALID_SERVER;
    640e:	8e ef       	ldi	r24, 0xFE	; 254
    6410:	c8 2e       	mov	r12, r24
    6412:	dd 24       	eor	r13, r13
    6414:	da 94       	dec	r13
    6416:	d0 cd       	rjmp	.-1120   	; 0x5fb8 <DNSClient::getHostByName(char const*, IPAddress&)+0xac>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:120
    }
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
    int ret =0;
    6418:	d1 2c       	mov	r13, r1
    641a:	c1 2c       	mov	r12, r1
    641c:	cd cd       	rjmp	.-1126   	; 0x5fb8 <DNSClient::getHostByName(char const*, IPAddress&)+0xac>

0000641e <EthernetClient::connect(char const*, unsigned int)>:
_ZN14EthernetClient7connectEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:23
}

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
}

int EthernetClient::connect(const char* host, uint16_t port) {
    641e:	cf 92       	push	r12
    6420:	df 92       	push	r13
    6422:	ef 92       	push	r14
    6424:	ff 92       	push	r15
    6426:	0f 93       	push	r16
    6428:	1f 93       	push	r17
    642a:	cf 93       	push	r28
    642c:	df 93       	push	r29
    642e:	cd b7       	in	r28, 0x3d	; 61
    6430:	de b7       	in	r29, 0x3e	; 62
    6432:	af 97       	sbiw	r28, 0x2f	; 47
    6434:	0f b6       	in	r0, 0x3f	; 63
    6436:	f8 94       	cli
    6438:	de bf       	out	0x3e, r29	; 62
    643a:	0f be       	out	0x3f, r0	; 63
    643c:	cd bf       	out	0x3d, r28	; 61
    643e:	7c 01       	movw	r14, r24
    6440:	6a 01       	movw	r12, r20
__base_ctor ():
*/

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
    6442:	02 ee       	ldi	r16, 0xE2	; 226
    6444:	12 e0       	ldi	r17, 0x02	; 2
    6446:	1a 83       	std	Y+2, r17	; 0x02
    6448:	09 83       	std	Y+1, r16	; 0x01
_ZN5PrintC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.h:46
  public:
    Print() : write_error(0) {}
    644a:	1c 86       	std	Y+12, r1	; 0x0c
    644c:	1b 86       	std	Y+11, r1	; 0x0b
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    644e:	88 ee       	ldi	r24, 0xE8	; 232
    6450:	93 e0       	ldi	r25, 0x03	; 3
    6452:	a0 e0       	ldi	r26, 0x00	; 0
    6454:	b0 e0       	ldi	r27, 0x00	; 0
    6456:	8d 87       	std	Y+13, r24	; 0x0d
    6458:	9e 87       	std	Y+14, r25	; 0x0e
    645a:	af 87       	std	Y+15, r26	; 0x0f
    645c:	b8 8b       	std	Y+16, r27	; 0x10
__base_ctor ():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:40
#include "Ethernet2.h"
#include "Udp.h"
#include "Dns.h"

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}
    645e:	88 e9       	ldi	r24, 0x98	; 152
    6460:	92 e0       	ldi	r25, 0x02	; 2
    6462:	9a 87       	std	Y+10, r25	; 0x0a
    6464:	89 87       	std	Y+9, r24	; 0x09
    6466:	88 e0       	ldi	r24, 0x08	; 8
    6468:	8d 8b       	std	Y+21, r24	; 0x15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:23
    646a:	19 8f       	std	Y+25, r17	; 0x19
    646c:	08 8f       	std	Y+24, r16	; 0x18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:25
{
    _address.dword = 0;
    646e:	1a 8e       	std	Y+26, r1	; 0x1a
    6470:	1b 8e       	std	Y+27, r1	; 0x1b
    6472:	1c 8e       	std	Y+28, r1	; 0x1c
    6474:	1d 8e       	std	Y+29, r1	; 0x1d
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:23
*/

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
    6476:	1b a7       	std	Y+43, r17	; 0x2b
    6478:	0a a7       	std	Y+42, r16	; 0x2a
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:25
{
    _address.dword = 0;
    647a:	1c a6       	std	Y+44, r1	; 0x2c
    647c:	1d a6       	std	Y+45, r1	; 0x2d
    647e:	1e a6       	std	Y+46, r1	; 0x2e
    6480:	1f a6       	std	Y+47, r1	; 0x2f
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    6482:	80 91 0c 0c 	lds	r24, 0x0C0C	; 0x800c0c <Ethernet+0x2>
    6486:	90 91 0d 0c 	lds	r25, 0x0C0D	; 0x800c0d <Ethernet+0x3>
    648a:	a0 91 0e 0c 	lds	r26, 0x0C0E	; 0x800c0e <Ethernet+0x4>
    648e:	b0 91 0f 0c 	lds	r27, 0x0C0F	; 0x800c0f <Ethernet+0x5>
    6492:	8e a3       	std	Y+38, r24	; 0x26
    6494:	9f a3       	std	Y+39, r25	; 0x27
    6496:	a8 a7       	std	Y+40, r26	; 0x28
    6498:	b9 a7       	std	Y+41, r27	; 0x29
_ZN9IPAddressaSERKS_():
    649a:	8b 83       	std	Y+3, r24	; 0x03
    649c:	9c 83       	std	Y+4, r25	; 0x04
    649e:	ad 83       	std	Y+5, r26	; 0x05
    64a0:	be 83       	std	Y+6, r27	; 0x06
begin():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:54
#define INVALID_RESPONSE -4

void DNSClient::begin(const IPAddress& aDNSServer)
{
    iDNSServer = aDNSServer;
    iRequestId = 0;
    64a2:	18 86       	std	Y+8, r1	; 0x08
    64a4:	1f 82       	std	Y+7, r1	; 0x07
_ZN14EthernetClient7connectEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:30
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;

  dns.begin(Ethernet.dnsServerIP());
  ret = dns.getHostByName(host, remote_addr);
    64a6:	ae 01       	movw	r20, r28
    64a8:	46 5d       	subi	r20, 0xD6	; 214
    64aa:	5f 4f       	sbci	r21, 0xFF	; 255
    64ac:	ce 01       	movw	r24, r28
    64ae:	01 96       	adiw	r24, 0x01	; 1
    64b0:	0e 94 86 2f 	call	0x5f0c	; 0x5f0c <DNSClient::getHostByName(char const*, IPAddress&)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:31
  if (ret == 1) {
    64b4:	81 30       	cpi	r24, 0x01	; 1
    64b6:	91 05       	cpc	r25, r1
    64b8:	b1 f4       	brne	.+44     	; 0x64e6 <EthernetClient::connect(char const*, unsigned int)+0xc8>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:32
    return connect(remote_addr, port);
    64ba:	d7 01       	movw	r26, r14
    64bc:	ed 91       	ld	r30, X+
    64be:	fc 91       	ld	r31, X
    64c0:	06 84       	ldd	r0, Z+14	; 0x0e
    64c2:	f7 85       	ldd	r31, Z+15	; 0x0f
    64c4:	e0 2d       	mov	r30, r0
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
    64c6:	1d a3       	std	Y+37, r17	; 0x25
    64c8:	0c a3       	std	Y+36, r16	; 0x24
    64ca:	8c a5       	ldd	r24, Y+44	; 0x2c
    64cc:	9d a5       	ldd	r25, Y+45	; 0x2d
    64ce:	ae a5       	ldd	r26, Y+46	; 0x2e
    64d0:	bf a5       	ldd	r27, Y+47	; 0x2f
    64d2:	8e a3       	std	Y+38, r24	; 0x26
    64d4:	9f a3       	std	Y+39, r25	; 0x27
    64d6:	a8 a7       	std	Y+40, r26	; 0x28
    64d8:	b9 a7       	std	Y+41, r27	; 0x29
_ZN14EthernetClient7connectEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:32
    64da:	a6 01       	movw	r20, r12
    64dc:	be 01       	movw	r22, r28
    64de:	6c 5d       	subi	r22, 0xDC	; 220
    64e0:	7f 4f       	sbci	r23, 0xFF	; 255
    64e2:	c7 01       	movw	r24, r14
    64e4:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:36
  } else {
    return ret;
  }
}
    64e6:	af 96       	adiw	r28, 0x2f	; 47
    64e8:	0f b6       	in	r0, 0x3f	; 63
    64ea:	f8 94       	cli
    64ec:	de bf       	out	0x3e, r29	; 62
    64ee:	0f be       	out	0x3f, r0	; 63
    64f0:	cd bf       	out	0x3d, r28	; 61
    64f2:	df 91       	pop	r29
    64f4:	cf 91       	pop	r28
    64f6:	1f 91       	pop	r17
    64f8:	0f 91       	pop	r16
    64fa:	ff 90       	pop	r15
    64fc:	ef 90       	pop	r14
    64fe:	df 90       	pop	r13
    6500:	cf 90       	pop	r12
    6502:	08 95       	ret

00006504 <SPIClass::begin()>:
_ZN8SPIClass5beginEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:27
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    6504:	cf 93       	push	r28
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:28
  uint8_t sreg = SREG;
    6506:	cf b7       	in	r28, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:29
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    6508:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:30
  if (!initialized) {
    650a:	80 91 a9 09 	lds	r24, 0x09A9	; 0x8009a9 <SPIClass::initialized>
    650e:	81 11       	cpse	r24, r1
    6510:	27 c0       	rjmp	.+78     	; 0x6560 <SPIClass::begin()+0x5c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:32
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    6512:	e8 e1       	ldi	r30, 0x18	; 24
    6514:	f5 e3       	ldi	r31, 0x35	; 53
    6516:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:33
    uint8_t bit = digitalPinToBitMask(SS);
    6518:	e2 ed       	ldi	r30, 0xD2	; 210
    651a:	f4 e3       	ldi	r31, 0x34	; 52
    651c:	94 91       	lpm	r25, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:34
    volatile uint8_t *reg = portModeRegister(port);
    651e:	e8 2f       	mov	r30, r24
    6520:	f0 e0       	ldi	r31, 0x00	; 0
    6522:	ee 0f       	add	r30, r30
    6524:	ff 1f       	adc	r31, r31
    6526:	e7 58       	subi	r30, 0x87	; 135
    6528:	f0 4d       	sbci	r31, 0xD0	; 208
    652a:	a5 91       	lpm	r26, Z+
    652c:	b4 91       	lpm	r27, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:38

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    652e:	ec 91       	ld	r30, X
    6530:	e9 23       	and	r30, r25
    6532:	21 f4       	brne	.+8      	; 0x653c <SPIClass::begin()+0x38>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:39
      digitalWrite(SS, HIGH);
    6534:	61 e0       	ldi	r22, 0x01	; 1
    6536:	88 e0       	ldi	r24, 0x08	; 8
    6538:	0e 94 5c 82 	call	0x104b8	; 0x104b8 <digitalWrite>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:45
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    653c:	61 e0       	ldi	r22, 0x01	; 1
    653e:	88 e0       	ldi	r24, 0x08	; 8
    6540:	0e 94 b9 83 	call	0x10772	; 0x10772 <pinMode>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:50

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    6544:	8c b5       	in	r24, 0x2c	; 44
    6546:	80 61       	ori	r24, 0x10	; 16
    6548:	8c bd       	out	0x2c, r24	; 44
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:51
    SPCR |= _BV(SPE);
    654a:	8c b5       	in	r24, 0x2c	; 44
    654c:	80 64       	ori	r24, 0x40	; 64
    654e:	8c bd       	out	0x2c, r24	; 44
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:59
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    6550:	61 e0       	ldi	r22, 0x01	; 1
    6552:	89 e0       	ldi	r24, 0x09	; 9
    6554:	0e 94 b9 83 	call	0x10772	; 0x10772 <pinMode>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:60
    pinMode(MOSI, OUTPUT);
    6558:	61 e0       	ldi	r22, 0x01	; 1
    655a:	8a e0       	ldi	r24, 0x0A	; 10
    655c:	0e 94 b9 83 	call	0x10772	; 0x10772 <pinMode>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:62
  }
  initialized++; // reference count
    6560:	80 91 a9 09 	lds	r24, 0x09A9	; 0x8009a9 <SPIClass::initialized>
    6564:	8f 5f       	subi	r24, 0xFF	; 255
    6566:	80 93 a9 09 	sts	0x09A9, r24	; 0x8009a9 <SPIClass::initialized>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:63
  SREG = sreg;
    656a:	cf bf       	out	0x3f, r28	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:64
}
    656c:	cf 91       	pop	r28
    656e:	08 95       	ret

00006570 <SoftSPIB::transfer(unsigned char)>:
_ZN8SoftSPIB8transferEh():
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:76
    val[l] = transfer(val[l]);
    }
}


uint8_t SoftSPIB::transfer(uint8_t val) {
    6570:	7f 92       	push	r7
    6572:	8f 92       	push	r8
    6574:	9f 92       	push	r9
    6576:	af 92       	push	r10
    6578:	bf 92       	push	r11
    657a:	cf 92       	push	r12
    657c:	df 92       	push	r13
    657e:	ef 92       	push	r14
    6580:	ff 92       	push	r15
    6582:	0f 93       	push	r16
    6584:	1f 93       	push	r17
    6586:	cf 93       	push	r28
    6588:	df 93       	push	r29
    658a:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:79

    uint8_t out = 0;
    if (_order == MSBFIRST) {
    658c:	fc 01       	movw	r30, r24
    658e:	86 81       	ldd	r24, Z+6	; 0x06
    6590:	81 11       	cpse	r24, r1
    6592:	35 c0       	rjmp	.+106    	; 0x65fe <SoftSPIB::transfer(unsigned char)+0x8e>
    6594:	86 2f       	mov	r24, r22
    6596:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:81
        uint8_t v2 = 
            ((val & 0x01) << 7) |
    6598:	ec 01       	movw	r28, r24
    659a:	d6 95       	lsr	r29
    659c:	dc 2f       	mov	r29, r28
    659e:	cc 27       	eor	r28, r28
    65a0:	d7 95       	ror	r29
    65a2:	c7 95       	ror	r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:88
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
            ((val & 0x80) >> 7);
    65a4:	66 1f       	adc	r22, r22
    65a6:	66 27       	eor	r22, r22
    65a8:	66 1f       	adc	r22, r22
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
    65aa:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:82

    uint8_t out = 0;
    if (_order == MSBFIRST) {
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
    65ac:	ec 01       	movw	r28, r24
    65ae:	55 e0       	ldi	r21, 0x05	; 5
    65b0:	cc 0f       	add	r28, r28
    65b2:	dd 1f       	adc	r29, r29
    65b4:	5a 95       	dec	r21
    65b6:	e1 f7       	brne	.-8      	; 0x65b0 <SoftSPIB::transfer(unsigned char)+0x40>
    65b8:	c0 74       	andi	r28, 0x40	; 64
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
    65ba:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:83
    uint8_t out = 0;
    if (_order == MSBFIRST) {
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
    65bc:	ec 01       	movw	r28, r24
    65be:	73 e0       	ldi	r23, 0x03	; 3
    65c0:	cc 0f       	add	r28, r28
    65c2:	dd 1f       	adc	r29, r29
    65c4:	7a 95       	dec	r23
    65c6:	e1 f7       	brne	.-8      	; 0x65c0 <SoftSPIB::transfer(unsigned char)+0x50>
    65c8:	c0 72       	andi	r28, 0x20	; 32
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
    65ca:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:84
    if (_order == MSBFIRST) {
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
    65cc:	ec 01       	movw	r28, r24
    65ce:	cc 0f       	add	r28, r28
    65d0:	dd 1f       	adc	r29, r29
    65d2:	c0 71       	andi	r28, 0x10	; 16
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
    65d4:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:85
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
    65d6:	ec 01       	movw	r28, r24
    65d8:	d5 95       	asr	r29
    65da:	c7 95       	ror	r28
    65dc:	c8 70       	andi	r28, 0x08	; 8
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
    65de:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:86
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
    65e0:	ec 01       	movw	r28, r24
    65e2:	a3 e0       	ldi	r26, 0x03	; 3
    65e4:	d5 95       	asr	r29
    65e6:	c7 95       	ror	r28
    65e8:	aa 95       	dec	r26
    65ea:	e1 f7       	brne	.-8      	; 0x65e4 <SoftSPIB::transfer(unsigned char)+0x74>
    65ec:	c4 70       	andi	r28, 0x04	; 4
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x40) >> 5) |
    65ee:	6c 2b       	or	r22, r28
    65f0:	b5 e0       	ldi	r27, 0x05	; 5
    65f2:	95 95       	asr	r25
    65f4:	87 95       	ror	r24
    65f6:	ba 95       	dec	r27
    65f8:	e1 f7       	brne	.-8      	; 0x65f2 <SoftSPIB::transfer(unsigned char)+0x82>
    65fa:	82 70       	andi	r24, 0x02	; 2
    65fc:	68 2b       	or	r22, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:96

    //uint8_t del = _delay >> 1;

    uint8_t bval = 0;

    int sck = (_ckp) ? HIGH : LOW;
    65fe:	91 e0       	ldi	r25, 0x01	; 1
    6600:	80 e0       	ldi	r24, 0x00	; 0
    6602:	f8 01       	movw	r30, r16
    6604:	21 81       	ldd	r18, Z+1	; 0x01
    6606:	21 11       	cpse	r18, r1
    6608:	01 c0       	rjmp	.+2      	; 0x660c <SoftSPIB::transfer(unsigned char)+0x9c>
    660a:	90 e0       	ldi	r25, 0x00	; 0
    660c:	e9 2e       	mov	r14, r25
    660e:	f8 2e       	mov	r15, r24
    6610:	d1 2c       	mov	r13, r1
    6612:	c1 2c       	mov	r12, r1
    6614:	91 2c       	mov	r9, r1
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:107
            digitalWrite(_sck, sck);            
            //wait(del);
        }

        /* ... Write bit */
        digitalWrite(_mosi, ((val & (1<<bit)) ? HIGH : LOW));
    6616:	c6 2f       	mov	r28, r22
    6618:	d0 e0       	ldi	r29, 0x00	; 0
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:100

    int sck = (_ckp) ? HIGH : LOW;

    for (uint8_t bit = 0u; bit < 8u; bit++)
    {
        if (_cke) {
    661a:	f8 01       	movw	r30, r16
    661c:	80 81       	ld	r24, Z
    661e:	88 23       	and	r24, r24
    6620:	39 f0       	breq	.+14     	; 0x6630 <SoftSPIB::transfer(unsigned char)+0xc0>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:101
            sck ^= 1;
    6622:	f1 e0       	ldi	r31, 0x01	; 1
    6624:	ef 26       	eor	r14, r31
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:102
            digitalWrite(_sck, sck);            
    6626:	6e 2d       	mov	r22, r14
    6628:	f8 01       	movw	r30, r16
    662a:	85 81       	ldd	r24, Z+5	; 0x05
    662c:	0e 94 5c 82 	call	0x104b8	; 0x104b8 <digitalWrite>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:107
            //wait(del);
        }

        /* ... Write bit */
        digitalWrite(_mosi, ((val & (1<<bit)) ? HIGH : LOW));
    6630:	be 01       	movw	r22, r28
    6632:	0c 2c       	mov	r0, r12
    6634:	02 c0       	rjmp	.+4      	; 0x663a <SoftSPIB::transfer(unsigned char)+0xca>
    6636:	75 95       	asr	r23
    6638:	67 95       	ror	r22
    663a:	0a 94       	dec	r0
    663c:	e2 f7       	brpl	.-8      	; 0x6636 <SoftSPIB::transfer(unsigned char)+0xc6>
    663e:	61 70       	andi	r22, 0x01	; 1
    6640:	f8 01       	movw	r30, r16
    6642:	84 81       	ldd	r24, Z+4	; 0x04
    6644:	0e 94 5c 82 	call	0x104b8	; 0x104b8 <digitalWrite>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:111

        //wait(del);

        sck ^= 1u; 
    6648:	57 01       	movw	r10, r14
    664a:	f1 e0       	ldi	r31, 0x01	; 1
    664c:	af 26       	eor	r10, r31
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:112
	digitalWrite(_sck, sck);
    664e:	6a 2d       	mov	r22, r10
    6650:	f8 01       	movw	r30, r16
    6652:	85 81       	ldd	r24, Z+5	; 0x05
    6654:	0e 94 5c 82 	call	0x104b8	; 0x104b8 <digitalWrite>
digitalRead():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:216
  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
  uint8_t timer = digitalPinToTimer(pin);
    6658:	f8 01       	movw	r30, r16
    665a:	23 81       	ldd	r18, Z+3	; 0x03
    665c:	30 e0       	ldi	r19, 0x00	; 0
    665e:	f9 01       	movw	r30, r18
    6660:	e7 57       	subi	r30, 0x77	; 119
    6662:	f0 4d       	sbci	r31, 0xD0	; 208
    6664:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
    6666:	f9 01       	movw	r30, r18
    6668:	e6 53       	subi	r30, 0x36	; 54
    666a:	fb 4c       	sbci	r31, 0xCB	; 203
    666c:	84 90       	lpm	r8, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
    666e:	f9 01       	movw	r30, r18
    6670:	e0 5f       	subi	r30, 0xF0	; 240
    6672:	fa 4c       	sbci	r31, 0xCA	; 202
    6674:	74 90       	lpm	r7, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
    6676:	77 20       	and	r7, r7
    6678:	a9 f1       	breq	.+106    	; 0x66e4 <SoftSPIB::transfer(unsigned char)+0x174>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    667a:	81 11       	cpse	r24, r1
    667c:	0e 94 f5 81 	call	0x103ea	; 0x103ea <turnOffPWM.lto_priv.232>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
    6680:	e7 2d       	mov	r30, r7
    6682:	f0 e0       	ldi	r31, 0x00	; 0
    6684:	ee 0f       	add	r30, r30
    6686:	ff 1f       	adc	r31, r31
    6688:	e6 54       	subi	r30, 0x46	; 70
    668a:	fb 4c       	sbci	r31, 0xCB	; 203
    668c:	a5 91       	lpm	r26, Z+
    668e:	b4 91       	lpm	r27, Z
    6690:	ec 91       	ld	r30, X
    6692:	8e 22       	and	r8, r30
    6694:	31 e0       	ldi	r19, 0x01	; 1
    6696:	20 e0       	ldi	r18, 0x00	; 0
    6698:	09 f4       	brne	.+2      	; 0x669c <SoftSPIB::transfer(unsigned char)+0x12c>
    669a:	30 e0       	ldi	r19, 0x00	; 0
_ZN8SoftSPIB8transferEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
    669c:	83 2f       	mov	r24, r19
    669e:	92 2f       	mov	r25, r18
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:118

        /* ... Read bit */
        {
            bval = digitalRead(_miso);

            if (_order == MSBFIRST) {
    66a0:	f8 01       	movw	r30, r16
    66a2:	26 81       	ldd	r18, Z+6	; 0x06
    66a4:	21 11       	cpse	r18, r1
    66a6:	21 c0       	rjmp	.+66     	; 0x66ea <SoftSPIB::transfer(unsigned char)+0x17a>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:119
                out <<= 1;
    66a8:	99 0c       	add	r9, r9
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:123
                out |= bval;
            } else {
                out >>= 1;
                out |= bval << 7;
    66aa:	98 2a       	or	r9, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:129
            }
        }

        //wait(del);

        if (!_cke) {
    66ac:	f8 01       	movw	r30, r16
    66ae:	80 81       	ld	r24, Z
    66b0:	88 23       	and	r24, r24
    66b2:	11 f1       	breq	.+68     	; 0x66f8 <SoftSPIB::transfer(unsigned char)+0x188>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:111
        /* ... Write bit */
        digitalWrite(_mosi, ((val & (1<<bit)) ? HIGH : LOW));

        //wait(del);

        sck ^= 1u; 
    66b4:	75 01       	movw	r14, r10
    66b6:	ff ef       	ldi	r31, 0xFF	; 255
    66b8:	cf 1a       	sub	r12, r31
    66ba:	df 0a       	sbc	r13, r31
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:98

    uint8_t bval = 0;

    int sck = (_ckp) ? HIGH : LOW;

    for (uint8_t bit = 0u; bit < 8u; bit++)
    66bc:	28 e0       	ldi	r18, 0x08	; 8
    66be:	c2 16       	cp	r12, r18
    66c0:	d1 04       	cpc	r13, r1
    66c2:	09 f0       	breq	.+2      	; 0x66c6 <SoftSPIB::transfer(unsigned char)+0x156>
    66c4:	aa cf       	rjmp	.-172    	; 0x661a <SoftSPIB::transfer(unsigned char)+0xaa>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:137
        }
    }

    return out;

}
    66c6:	89 2d       	mov	r24, r9
    66c8:	df 91       	pop	r29
    66ca:	cf 91       	pop	r28
    66cc:	1f 91       	pop	r17
    66ce:	0f 91       	pop	r16
    66d0:	ff 90       	pop	r15
    66d2:	ef 90       	pop	r14
    66d4:	df 90       	pop	r13
    66d6:	cf 90       	pop	r12
    66d8:	bf 90       	pop	r11
    66da:	af 90       	pop	r10
    66dc:	9f 90       	pop	r9
    66de:	8f 90       	pop	r8
    66e0:	7f 90       	pop	r7
    66e2:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:220
    66e4:	90 e0       	ldi	r25, 0x00	; 0
    66e6:	80 e0       	ldi	r24, 0x00	; 0
    66e8:	db cf       	rjmp	.-74     	; 0x66a0 <SoftSPIB::transfer(unsigned char)+0x130>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:123
            if (_order == MSBFIRST) {
                out <<= 1;
                out |= bval;
            } else {
                out >>= 1;
                out |= bval << 7;
    66ea:	96 95       	lsr	r25
    66ec:	98 2f       	mov	r25, r24
    66ee:	88 27       	eor	r24, r24
    66f0:	97 95       	ror	r25
    66f2:	87 95       	ror	r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:122

            if (_order == MSBFIRST) {
                out <<= 1;
                out |= bval;
            } else {
                out >>= 1;
    66f4:	96 94       	lsr	r9
    66f6:	d9 cf       	rjmp	.-78     	; 0x66aa <SoftSPIB::transfer(unsigned char)+0x13a>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:131

        //wait(del);

        if (!_cke) {
            sck ^= 1u;
            digitalWrite(_sck, sck);
    66f8:	6e 2d       	mov	r22, r14
    66fa:	85 81       	ldd	r24, Z+5	; 0x05
    66fc:	0e 94 5c 82 	call	0x104b8	; 0x104b8 <digitalWrite>
    6700:	da cf       	rjmp	.-76     	; 0x66b6 <SoftSPIB::transfer(unsigned char)+0x146>

00006702 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>:
_ZN11LCDWIKI_KBV12Push_CommandEjPha():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:305
	CS_IDLE;
}

//Write a command and N datas
void LCDWIKI_KBV::Push_Command(uint16_t cmd, uint8_t *block, int8_t N)
{
    6702:	cf 93       	push	r28
    6704:	df 93       	push	r29
    6706:	fc 01       	movw	r30, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:306
  	CS_ACTIVE;
    6708:	a6 a5       	ldd	r26, Z+46	; 0x2e
    670a:	b7 a5       	ldd	r27, Z+47	; 0x2f
    670c:	8c 91       	ld	r24, X
    670e:	92 ad       	ldd	r25, Z+58	; 0x3a
    6710:	89 23       	and	r24, r25
    6712:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:307
    writeCmd16(cmd);
    6714:	a0 a9       	ldd	r26, Z+48	; 0x30
    6716:	b1 a9       	ldd	r27, Z+49	; 0x31
    6718:	8c 91       	ld	r24, X
    671a:	93 ad       	ldd	r25, Z+59	; 0x3b
    671c:	89 23       	and	r24, r25
    671e:	8c 93       	st	X, r24
    6720:	72 b9       	out	0x02, r23	; 2
    6722:	a2 a9       	ldd	r26, Z+50	; 0x32
    6724:	b3 a9       	ldd	r27, Z+51	; 0x33
    6726:	8c 91       	ld	r24, X
    6728:	94 ad       	ldd	r25, Z+60	; 0x3c
    672a:	89 23       	and	r24, r25
    672c:	8c 93       	st	X, r24
    672e:	a2 a9       	ldd	r26, Z+50	; 0x32
    6730:	b3 a9       	ldd	r27, Z+51	; 0x33
    6732:	8c 91       	ld	r24, X
    6734:	90 ad       	ldd	r25, Z+56	; 0x38
    6736:	89 2b       	or	r24, r25
    6738:	8c 93       	st	X, r24
    673a:	62 b9       	out	0x02, r22	; 2
    673c:	a2 a9       	ldd	r26, Z+50	; 0x32
    673e:	b3 a9       	ldd	r27, Z+51	; 0x33
    6740:	8c 91       	ld	r24, X
    6742:	94 ad       	ldd	r25, Z+60	; 0x3c
    6744:	89 23       	and	r24, r25
    6746:	8c 93       	st	X, r24
    6748:	a2 a9       	ldd	r26, Z+50	; 0x32
    674a:	b3 a9       	ldd	r27, Z+51	; 0x33
    674c:	8c 91       	ld	r24, X
    674e:	90 ad       	ldd	r25, Z+56	; 0x38
    6750:	89 2b       	or	r24, r25
    6752:	8c 93       	st	X, r24
    6754:	a0 a9       	ldd	r26, Z+48	; 0x30
    6756:	b1 a9       	ldd	r27, Z+49	; 0x31
    6758:	8c 91       	ld	r24, X
    675a:	97 a9       	ldd	r25, Z+55	; 0x37
    675c:	89 2b       	or	r24, r25
    675e:	8c 93       	st	X, r24
    6760:	da 01       	movw	r26, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:308
    while (N-- > 0) 
    6762:	9f ef       	ldi	r25, 0xFF	; 255
    6764:	92 0f       	add	r25, r18
    6766:	12 16       	cp	r1, r18
    6768:	0c f0       	brlt	.+2      	; 0x676c <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0x6a>
    676a:	3f c0       	rjmp	.+126    	; 0x67ea <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0xe8>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:310
	{
        uint8_t u8 = *block++;
    676c:	8d 91       	ld	r24, X+
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:311
        writeData8(u8); 
    676e:	82 b9       	out	0x02, r24	; 2
    6770:	c2 a9       	ldd	r28, Z+50	; 0x32
    6772:	d3 a9       	ldd	r29, Z+51	; 0x33
    6774:	88 81       	ld	r24, Y
    6776:	24 ad       	ldd	r18, Z+60	; 0x3c
    6778:	82 23       	and	r24, r18
    677a:	88 83       	st	Y, r24
    677c:	c2 a9       	ldd	r28, Z+50	; 0x32
    677e:	d3 a9       	ldd	r29, Z+51	; 0x33
    6780:	88 81       	ld	r24, Y
    6782:	20 ad       	ldd	r18, Z+56	; 0x38
    6784:	82 2b       	or	r24, r18
    6786:	88 83       	st	Y, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:312
		if(N && (lcd_driver == ID_7575))
    6788:	99 23       	and	r25, r25
    678a:	69 f1       	breq	.+90     	; 0x67e6 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0xe4>
    678c:	20 8d       	ldd	r18, Z+24	; 0x18
    678e:	31 8d       	ldd	r19, Z+25	; 0x19
    6790:	21 30       	cpi	r18, 0x01	; 1
    6792:	31 05       	cpc	r19, r1
    6794:	41 f5       	brne	.+80     	; 0x67e6 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0xe4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:314
		{
			cmd++;
    6796:	6f 5f       	subi	r22, 0xFF	; 255
    6798:	7f 4f       	sbci	r23, 0xFF	; 255
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:315
			writeCmd16(cmd);
    679a:	c0 a9       	ldd	r28, Z+48	; 0x30
    679c:	d1 a9       	ldd	r29, Z+49	; 0x31
    679e:	88 81       	ld	r24, Y
    67a0:	23 ad       	ldd	r18, Z+59	; 0x3b
    67a2:	82 23       	and	r24, r18
    67a4:	88 83       	st	Y, r24
    67a6:	72 b9       	out	0x02, r23	; 2
    67a8:	c2 a9       	ldd	r28, Z+50	; 0x32
    67aa:	d3 a9       	ldd	r29, Z+51	; 0x33
    67ac:	88 81       	ld	r24, Y
    67ae:	24 ad       	ldd	r18, Z+60	; 0x3c
    67b0:	82 23       	and	r24, r18
    67b2:	88 83       	st	Y, r24
    67b4:	c2 a9       	ldd	r28, Z+50	; 0x32
    67b6:	d3 a9       	ldd	r29, Z+51	; 0x33
    67b8:	88 81       	ld	r24, Y
    67ba:	20 ad       	ldd	r18, Z+56	; 0x38
    67bc:	82 2b       	or	r24, r18
    67be:	88 83       	st	Y, r24
    67c0:	62 b9       	out	0x02, r22	; 2
    67c2:	c2 a9       	ldd	r28, Z+50	; 0x32
    67c4:	d3 a9       	ldd	r29, Z+51	; 0x33
    67c6:	88 81       	ld	r24, Y
    67c8:	24 ad       	ldd	r18, Z+60	; 0x3c
    67ca:	82 23       	and	r24, r18
    67cc:	88 83       	st	Y, r24
    67ce:	c2 a9       	ldd	r28, Z+50	; 0x32
    67d0:	d3 a9       	ldd	r29, Z+51	; 0x33
    67d2:	88 81       	ld	r24, Y
    67d4:	20 ad       	ldd	r18, Z+56	; 0x38
    67d6:	82 2b       	or	r24, r18
    67d8:	88 83       	st	Y, r24
    67da:	c0 a9       	ldd	r28, Z+48	; 0x30
    67dc:	d1 a9       	ldd	r29, Z+49	; 0x31
    67de:	88 81       	ld	r24, Y
    67e0:	27 a9       	ldd	r18, Z+55	; 0x37
    67e2:	82 2b       	or	r24, r18
    67e4:	88 83       	st	Y, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:305
	CS_IDLE;
}

//Write a command and N datas
void LCDWIKI_KBV::Push_Command(uint16_t cmd, uint8_t *block, int8_t N)
{
    67e6:	29 2f       	mov	r18, r25
    67e8:	bc cf       	rjmp	.-136    	; 0x6762 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0x60>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:318
		{
			cmd++;
			writeCmd16(cmd);
		}
    }
    CS_IDLE;
    67ea:	a6 a5       	ldd	r26, Z+46	; 0x2e
    67ec:	b7 a5       	ldd	r27, Z+47	; 0x2f
    67ee:	8c 91       	ld	r24, X
    67f0:	96 a9       	ldd	r25, Z+54	; 0x36
    67f2:	89 2b       	or	r24, r25
    67f4:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:319
}
    67f6:	df 91       	pop	r29
    67f8:	cf 91       	pop	r28
    67fa:	08 95       	ret

000067fc <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)>:
_ZN11LCDWIKI_KBV15Set_Addr_WindowEiiii():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:323

// Sets the LCD address window 
void LCDWIKI_KBV::Set_Addr_Window(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
{
    67fc:	af 92       	push	r10
    67fe:	bf 92       	push	r11
    6800:	cf 92       	push	r12
    6802:	df 92       	push	r13
    6804:	ef 92       	push	r14
    6806:	ff 92       	push	r15
    6808:	0f 93       	push	r16
    680a:	1f 93       	push	r17
    680c:	cf 93       	push	r28
    680e:	df 93       	push	r29
    6810:	00 d0       	rcall	.+0      	; 0x6812 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x16>
    6812:	00 d0       	rcall	.+0      	; 0x6814 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x18>
    6814:	1f 92       	push	r1
    6816:	1f 92       	push	r1
    6818:	cd b7       	in	r28, 0x3d	; 61
    681a:	de b7       	in	r29, 0x3e	; 62
    681c:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:324
	CS_ACTIVE;
    681e:	dc 01       	movw	r26, r24
    6820:	9e 96       	adiw	r26, 0x2e	; 46
    6822:	ed 91       	ld	r30, X+
    6824:	fc 91       	ld	r31, X
    6826:	9f 97       	sbiw	r26, 0x2f	; 47
    6828:	80 81       	ld	r24, Z
    682a:	da 96       	adiw	r26, 0x3a	; 58
    682c:	9c 91       	ld	r25, X
    682e:	da 97       	sbiw	r26, 0x3a	; 58
    6830:	89 23       	and	r24, r25
    6832:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:325
	if(lcd_driver == ID_932X) 
    6834:	58 96       	adiw	r26, 0x18	; 24
    6836:	8d 91       	ld	r24, X+
    6838:	9c 91       	ld	r25, X
    683a:	59 97       	sbiw	r26, 0x19	; 25
    683c:	00 97       	sbiw	r24, 0x00	; 0
    683e:	09 f0       	breq	.+2      	; 0x6842 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x46>
    6840:	44 c3       	rjmp	.+1672   	; 0x6eca <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6ce>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:336
	    // set to the top-left corner -- although fill operations can be
	    // done in any direction, the current screen rotation is applied
	    // because some users find it disconcerting when a fill does not
	    // occur top-to-bottom.
	    int x, y, t;
	    switch(rotation) 
    6842:	56 96       	adiw	r26, 0x16	; 22
    6844:	8d 91       	ld	r24, X+
    6846:	9c 91       	ld	r25, X
    6848:	57 97       	sbiw	r26, 0x17	; 23
    684a:	82 30       	cpi	r24, 0x02	; 2
    684c:	91 05       	cpc	r25, r1
    684e:	09 f4       	brne	.+2      	; 0x6852 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x56>
    6850:	0b c3       	rjmp	.+1558   	; 0x6e68 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x66c>
    6852:	83 30       	cpi	r24, 0x03	; 3
    6854:	91 05       	cpc	r25, r1
    6856:	09 f4       	brne	.+2      	; 0x685a <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x5e>
    6858:	23 c3       	rjmp	.+1606   	; 0x6ea0 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6a4>
    685a:	01 97       	sbiw	r24, 0x01	; 1
    685c:	09 f0       	breq	.+2      	; 0x6860 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x64>
    685e:	32 c3       	rjmp	.+1636   	; 0x6ec4 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6c8>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:345
			      y  = y1;
			      break;
		     case 1:
			      t  = y1;
			      y1 = x1;
			      x1 = WIDTH  - 1 - y2;
    6860:	1e 96       	adiw	r26, 0x0e	; 14
    6862:	0d 90       	ld	r0, X+
    6864:	bc 91       	ld	r27, X
    6866:	a0 2d       	mov	r26, r0
    6868:	68 01       	movw	r12, r16
    686a:	c0 94       	com	r12
    686c:	d0 94       	com	r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:347
			      y2 = x2;
			      x2 = WIDTH  - 1 - t;
    686e:	40 95       	com	r20
    6870:	50 95       	com	r21
    6872:	fa 01       	movw	r30, r20
    6874:	ea 0f       	add	r30, r26
    6876:	fb 1f       	adc	r31, r27
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:349
			      x  = x2;
			      y  = y1;
    6878:	cb 01       	movw	r24, r22
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:346
			      break;
		     case 1:
			      t  = y1;
			      y1 = x1;
			      x1 = WIDTH  - 1 - y2;
			      y2 = x2;
    687a:	89 01       	movw	r16, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:347
			      x2 = WIDTH  - 1 - t;
    687c:	9f 01       	movw	r18, r30
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:344
			      x  = x1;
			      y  = y1;
			      break;
		     case 1:
			      t  = y1;
			      y1 = x1;
    687e:	ab 01       	movw	r20, r22
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:345
			      x1 = WIDTH  - 1 - y2;
    6880:	b6 01       	movw	r22, r12
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:353
			      x  = x2;
			      y  = y1;
		      	  break;
		     case 2:
			      t  = x1;
			      x1 = WIDTH  - 1 - x2;
    6882:	6a 0f       	add	r22, r26
    6884:	7b 1f       	adc	r23, r27
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:371
			      y2 = HEIGHT - 1 - t;
			      x  = x1;
			      y  = y2;
			      break;
    	}
    writeCmdData16(ILI932X_HOR_START_AD, x1); // Set address window
    6886:	d7 01       	movw	r26, r14
    6888:	d0 96       	adiw	r26, 0x30	; 48
    688a:	cd 90       	ld	r12, X+
    688c:	dc 90       	ld	r13, X
    688e:	d6 01       	movw	r26, r12
    6890:	bc 90       	ld	r11, X
    6892:	d7 01       	movw	r26, r14
    6894:	db 96       	adiw	r26, 0x3b	; 59
    6896:	ac 90       	ld	r10, X
    6898:	ba 20       	and	r11, r10
    689a:	d6 01       	movw	r26, r12
    689c:	bc 92       	st	X, r11
    689e:	12 b8       	out	0x02, r1	; 2
    68a0:	d7 01       	movw	r26, r14
    68a2:	d2 96       	adiw	r26, 0x32	; 50
    68a4:	cd 90       	ld	r12, X+
    68a6:	dc 90       	ld	r13, X
    68a8:	d6 01       	movw	r26, r12
    68aa:	bc 90       	ld	r11, X
    68ac:	d7 01       	movw	r26, r14
    68ae:	dc 96       	adiw	r26, 0x3c	; 60
    68b0:	ac 90       	ld	r10, X
    68b2:	ba 20       	and	r11, r10
    68b4:	d6 01       	movw	r26, r12
    68b6:	bc 92       	st	X, r11
    68b8:	d7 01       	movw	r26, r14
    68ba:	d2 96       	adiw	r26, 0x32	; 50
    68bc:	cd 90       	ld	r12, X+
    68be:	dc 90       	ld	r13, X
    68c0:	d6 01       	movw	r26, r12
    68c2:	bc 90       	ld	r11, X
    68c4:	d7 01       	movw	r26, r14
    68c6:	d8 96       	adiw	r26, 0x38	; 56
    68c8:	ac 90       	ld	r10, X
    68ca:	ba 28       	or	r11, r10
    68cc:	d6 01       	movw	r26, r12
    68ce:	bc 92       	st	X, r11
    68d0:	a0 e5       	ldi	r26, 0x50	; 80
    68d2:	a2 b9       	out	0x02, r26	; 2
    68d4:	d7 01       	movw	r26, r14
    68d6:	d2 96       	adiw	r26, 0x32	; 50
    68d8:	cd 90       	ld	r12, X+
    68da:	dc 90       	ld	r13, X
    68dc:	d6 01       	movw	r26, r12
    68de:	bc 90       	ld	r11, X
    68e0:	d7 01       	movw	r26, r14
    68e2:	dc 96       	adiw	r26, 0x3c	; 60
    68e4:	ac 90       	ld	r10, X
    68e6:	ba 20       	and	r11, r10
    68e8:	d6 01       	movw	r26, r12
    68ea:	bc 92       	st	X, r11
    68ec:	d7 01       	movw	r26, r14
    68ee:	d2 96       	adiw	r26, 0x32	; 50
    68f0:	cd 90       	ld	r12, X+
    68f2:	dc 90       	ld	r13, X
    68f4:	d6 01       	movw	r26, r12
    68f6:	bc 90       	ld	r11, X
    68f8:	d7 01       	movw	r26, r14
    68fa:	d8 96       	adiw	r26, 0x38	; 56
    68fc:	ac 90       	ld	r10, X
    68fe:	ba 28       	or	r11, r10
    6900:	d6 01       	movw	r26, r12
    6902:	bc 92       	st	X, r11
    6904:	d7 01       	movw	r26, r14
    6906:	d0 96       	adiw	r26, 0x30	; 48
    6908:	cd 90       	ld	r12, X+
    690a:	dc 90       	ld	r13, X
    690c:	d6 01       	movw	r26, r12
    690e:	bc 90       	ld	r11, X
    6910:	d7 01       	movw	r26, r14
    6912:	d7 96       	adiw	r26, 0x37	; 55
    6914:	ac 90       	ld	r10, X
    6916:	ba 28       	or	r11, r10
    6918:	d6 01       	movw	r26, r12
    691a:	bc 92       	st	X, r11
    691c:	72 b9       	out	0x02, r23	; 2
    691e:	d7 01       	movw	r26, r14
    6920:	d2 96       	adiw	r26, 0x32	; 50
    6922:	ad 90       	ld	r10, X+
    6924:	bc 90       	ld	r11, X
    6926:	d5 01       	movw	r26, r10
    6928:	7c 91       	ld	r23, X
    692a:	d7 01       	movw	r26, r14
    692c:	dc 96       	adiw	r26, 0x3c	; 60
    692e:	dc 90       	ld	r13, X
    6930:	7d 21       	and	r23, r13
    6932:	d5 01       	movw	r26, r10
    6934:	7c 93       	st	X, r23
    6936:	d7 01       	movw	r26, r14
    6938:	d2 96       	adiw	r26, 0x32	; 50
    693a:	ad 90       	ld	r10, X+
    693c:	bc 90       	ld	r11, X
    693e:	d5 01       	movw	r26, r10
    6940:	7c 91       	ld	r23, X
    6942:	d7 01       	movw	r26, r14
    6944:	d8 96       	adiw	r26, 0x38	; 56
    6946:	dc 90       	ld	r13, X
    6948:	7d 29       	or	r23, r13
    694a:	d5 01       	movw	r26, r10
    694c:	7c 93       	st	X, r23
    694e:	62 b9       	out	0x02, r22	; 2
    6950:	d7 01       	movw	r26, r14
    6952:	d2 96       	adiw	r26, 0x32	; 50
    6954:	cd 90       	ld	r12, X+
    6956:	dc 90       	ld	r13, X
    6958:	d6 01       	movw	r26, r12
    695a:	6c 91       	ld	r22, X
    695c:	d7 01       	movw	r26, r14
    695e:	dc 96       	adiw	r26, 0x3c	; 60
    6960:	7c 91       	ld	r23, X
    6962:	67 23       	and	r22, r23
    6964:	d6 01       	movw	r26, r12
    6966:	6c 93       	st	X, r22
    6968:	d7 01       	movw	r26, r14
    696a:	d2 96       	adiw	r26, 0x32	; 50
    696c:	cd 90       	ld	r12, X+
    696e:	dc 90       	ld	r13, X
    6970:	d6 01       	movw	r26, r12
    6972:	6c 91       	ld	r22, X
    6974:	d7 01       	movw	r26, r14
    6976:	d8 96       	adiw	r26, 0x38	; 56
    6978:	7c 91       	ld	r23, X
    697a:	67 2b       	or	r22, r23
    697c:	d6 01       	movw	r26, r12
    697e:	6c 93       	st	X, r22
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:372
    writeCmdData16(ILI932X_HOR_END_AD, x2);
    6980:	d7 01       	movw	r26, r14
    6982:	d0 96       	adiw	r26, 0x30	; 48
    6984:	cd 90       	ld	r12, X+
    6986:	dc 90       	ld	r13, X
    6988:	d6 01       	movw	r26, r12
    698a:	6c 91       	ld	r22, X
    698c:	d7 01       	movw	r26, r14
    698e:	db 96       	adiw	r26, 0x3b	; 59
    6990:	7c 91       	ld	r23, X
    6992:	67 23       	and	r22, r23
    6994:	d6 01       	movw	r26, r12
    6996:	6c 93       	st	X, r22
    6998:	12 b8       	out	0x02, r1	; 2
    699a:	d7 01       	movw	r26, r14
    699c:	d2 96       	adiw	r26, 0x32	; 50
    699e:	cd 90       	ld	r12, X+
    69a0:	dc 90       	ld	r13, X
    69a2:	d6 01       	movw	r26, r12
    69a4:	6c 91       	ld	r22, X
    69a6:	d7 01       	movw	r26, r14
    69a8:	dc 96       	adiw	r26, 0x3c	; 60
    69aa:	7c 91       	ld	r23, X
    69ac:	67 23       	and	r22, r23
    69ae:	d6 01       	movw	r26, r12
    69b0:	6c 93       	st	X, r22
    69b2:	d7 01       	movw	r26, r14
    69b4:	d2 96       	adiw	r26, 0x32	; 50
    69b6:	cd 90       	ld	r12, X+
    69b8:	dc 90       	ld	r13, X
    69ba:	d6 01       	movw	r26, r12
    69bc:	6c 91       	ld	r22, X
    69be:	d7 01       	movw	r26, r14
    69c0:	d8 96       	adiw	r26, 0x38	; 56
    69c2:	7c 91       	ld	r23, X
    69c4:	67 2b       	or	r22, r23
    69c6:	d6 01       	movw	r26, r12
    69c8:	6c 93       	st	X, r22
    69ca:	61 e5       	ldi	r22, 0x51	; 81
    69cc:	62 b9       	out	0x02, r22	; 2
    69ce:	d7 01       	movw	r26, r14
    69d0:	d2 96       	adiw	r26, 0x32	; 50
    69d2:	cd 90       	ld	r12, X+
    69d4:	dc 90       	ld	r13, X
    69d6:	d6 01       	movw	r26, r12
    69d8:	6c 91       	ld	r22, X
    69da:	d7 01       	movw	r26, r14
    69dc:	dc 96       	adiw	r26, 0x3c	; 60
    69de:	7c 91       	ld	r23, X
    69e0:	67 23       	and	r22, r23
    69e2:	d6 01       	movw	r26, r12
    69e4:	6c 93       	st	X, r22
    69e6:	d7 01       	movw	r26, r14
    69e8:	d2 96       	adiw	r26, 0x32	; 50
    69ea:	cd 90       	ld	r12, X+
    69ec:	dc 90       	ld	r13, X
    69ee:	d6 01       	movw	r26, r12
    69f0:	6c 91       	ld	r22, X
    69f2:	d7 01       	movw	r26, r14
    69f4:	d8 96       	adiw	r26, 0x38	; 56
    69f6:	7c 91       	ld	r23, X
    69f8:	67 2b       	or	r22, r23
    69fa:	d6 01       	movw	r26, r12
    69fc:	6c 93       	st	X, r22
    69fe:	d7 01       	movw	r26, r14
    6a00:	d0 96       	adiw	r26, 0x30	; 48
    6a02:	cd 90       	ld	r12, X+
    6a04:	dc 90       	ld	r13, X
    6a06:	d6 01       	movw	r26, r12
    6a08:	6c 91       	ld	r22, X
    6a0a:	d7 01       	movw	r26, r14
    6a0c:	d7 96       	adiw	r26, 0x37	; 55
    6a0e:	7c 91       	ld	r23, X
    6a10:	67 2b       	or	r22, r23
    6a12:	d6 01       	movw	r26, r12
    6a14:	6c 93       	st	X, r22
    6a16:	32 b9       	out	0x02, r19	; 2
    6a18:	d7 01       	movw	r26, r14
    6a1a:	d2 96       	adiw	r26, 0x32	; 50
    6a1c:	cd 90       	ld	r12, X+
    6a1e:	dc 90       	ld	r13, X
    6a20:	d6 01       	movw	r26, r12
    6a22:	3c 91       	ld	r19, X
    6a24:	d7 01       	movw	r26, r14
    6a26:	dc 96       	adiw	r26, 0x3c	; 60
    6a28:	6c 91       	ld	r22, X
    6a2a:	36 23       	and	r19, r22
    6a2c:	d6 01       	movw	r26, r12
    6a2e:	3c 93       	st	X, r19
    6a30:	d7 01       	movw	r26, r14
    6a32:	d2 96       	adiw	r26, 0x32	; 50
    6a34:	cd 90       	ld	r12, X+
    6a36:	dc 90       	ld	r13, X
    6a38:	d6 01       	movw	r26, r12
    6a3a:	3c 91       	ld	r19, X
    6a3c:	d7 01       	movw	r26, r14
    6a3e:	d8 96       	adiw	r26, 0x38	; 56
    6a40:	6c 91       	ld	r22, X
    6a42:	36 2b       	or	r19, r22
    6a44:	d6 01       	movw	r26, r12
    6a46:	3c 93       	st	X, r19
    6a48:	22 b9       	out	0x02, r18	; 2
    6a4a:	d7 01       	movw	r26, r14
    6a4c:	d2 96       	adiw	r26, 0x32	; 50
    6a4e:	6d 91       	ld	r22, X+
    6a50:	7c 91       	ld	r23, X
    6a52:	db 01       	movw	r26, r22
    6a54:	2c 91       	ld	r18, X
    6a56:	d7 01       	movw	r26, r14
    6a58:	dc 96       	adiw	r26, 0x3c	; 60
    6a5a:	3c 91       	ld	r19, X
    6a5c:	23 23       	and	r18, r19
    6a5e:	db 01       	movw	r26, r22
    6a60:	2c 93       	st	X, r18
    6a62:	d7 01       	movw	r26, r14
    6a64:	d2 96       	adiw	r26, 0x32	; 50
    6a66:	6d 91       	ld	r22, X+
    6a68:	7c 91       	ld	r23, X
    6a6a:	db 01       	movw	r26, r22
    6a6c:	2c 91       	ld	r18, X
    6a6e:	d7 01       	movw	r26, r14
    6a70:	d8 96       	adiw	r26, 0x38	; 56
    6a72:	3c 91       	ld	r19, X
    6a74:	23 2b       	or	r18, r19
    6a76:	db 01       	movw	r26, r22
    6a78:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:373
    writeCmdData16(ILI932X_VER_START_AD, y1);
    6a7a:	d7 01       	movw	r26, r14
    6a7c:	d0 96       	adiw	r26, 0x30	; 48
    6a7e:	6d 91       	ld	r22, X+
    6a80:	7c 91       	ld	r23, X
    6a82:	db 01       	movw	r26, r22
    6a84:	2c 91       	ld	r18, X
    6a86:	d7 01       	movw	r26, r14
    6a88:	db 96       	adiw	r26, 0x3b	; 59
    6a8a:	3c 91       	ld	r19, X
    6a8c:	23 23       	and	r18, r19
    6a8e:	db 01       	movw	r26, r22
    6a90:	2c 93       	st	X, r18
    6a92:	12 b8       	out	0x02, r1	; 2
    6a94:	d7 01       	movw	r26, r14
    6a96:	d2 96       	adiw	r26, 0x32	; 50
    6a98:	6d 91       	ld	r22, X+
    6a9a:	7c 91       	ld	r23, X
    6a9c:	db 01       	movw	r26, r22
    6a9e:	2c 91       	ld	r18, X
    6aa0:	d7 01       	movw	r26, r14
    6aa2:	dc 96       	adiw	r26, 0x3c	; 60
    6aa4:	3c 91       	ld	r19, X
    6aa6:	23 23       	and	r18, r19
    6aa8:	db 01       	movw	r26, r22
    6aaa:	2c 93       	st	X, r18
    6aac:	d7 01       	movw	r26, r14
    6aae:	d2 96       	adiw	r26, 0x32	; 50
    6ab0:	6d 91       	ld	r22, X+
    6ab2:	7c 91       	ld	r23, X
    6ab4:	db 01       	movw	r26, r22
    6ab6:	2c 91       	ld	r18, X
    6ab8:	d7 01       	movw	r26, r14
    6aba:	d8 96       	adiw	r26, 0x38	; 56
    6abc:	3c 91       	ld	r19, X
    6abe:	23 2b       	or	r18, r19
    6ac0:	db 01       	movw	r26, r22
    6ac2:	2c 93       	st	X, r18
    6ac4:	22 e5       	ldi	r18, 0x52	; 82
    6ac6:	22 b9       	out	0x02, r18	; 2
    6ac8:	d7 01       	movw	r26, r14
    6aca:	d2 96       	adiw	r26, 0x32	; 50
    6acc:	6d 91       	ld	r22, X+
    6ace:	7c 91       	ld	r23, X
    6ad0:	db 01       	movw	r26, r22
    6ad2:	2c 91       	ld	r18, X
    6ad4:	d7 01       	movw	r26, r14
    6ad6:	dc 96       	adiw	r26, 0x3c	; 60
    6ad8:	3c 91       	ld	r19, X
    6ada:	23 23       	and	r18, r19
    6adc:	db 01       	movw	r26, r22
    6ade:	2c 93       	st	X, r18
    6ae0:	d7 01       	movw	r26, r14
    6ae2:	d2 96       	adiw	r26, 0x32	; 50
    6ae4:	6d 91       	ld	r22, X+
    6ae6:	7c 91       	ld	r23, X
    6ae8:	db 01       	movw	r26, r22
    6aea:	2c 91       	ld	r18, X
    6aec:	d7 01       	movw	r26, r14
    6aee:	d8 96       	adiw	r26, 0x38	; 56
    6af0:	3c 91       	ld	r19, X
    6af2:	23 2b       	or	r18, r19
    6af4:	db 01       	movw	r26, r22
    6af6:	2c 93       	st	X, r18
    6af8:	d7 01       	movw	r26, r14
    6afa:	d0 96       	adiw	r26, 0x30	; 48
    6afc:	6d 91       	ld	r22, X+
    6afe:	7c 91       	ld	r23, X
    6b00:	db 01       	movw	r26, r22
    6b02:	2c 91       	ld	r18, X
    6b04:	d7 01       	movw	r26, r14
    6b06:	d7 96       	adiw	r26, 0x37	; 55
    6b08:	3c 91       	ld	r19, X
    6b0a:	23 2b       	or	r18, r19
    6b0c:	db 01       	movw	r26, r22
    6b0e:	2c 93       	st	X, r18
    6b10:	52 b9       	out	0x02, r21	; 2
    6b12:	d7 01       	movw	r26, r14
    6b14:	d2 96       	adiw	r26, 0x32	; 50
    6b16:	6d 91       	ld	r22, X+
    6b18:	7c 91       	ld	r23, X
    6b1a:	db 01       	movw	r26, r22
    6b1c:	2c 91       	ld	r18, X
    6b1e:	d7 01       	movw	r26, r14
    6b20:	dc 96       	adiw	r26, 0x3c	; 60
    6b22:	3c 91       	ld	r19, X
    6b24:	23 23       	and	r18, r19
    6b26:	db 01       	movw	r26, r22
    6b28:	2c 93       	st	X, r18
    6b2a:	d7 01       	movw	r26, r14
    6b2c:	d2 96       	adiw	r26, 0x32	; 50
    6b2e:	6d 91       	ld	r22, X+
    6b30:	7c 91       	ld	r23, X
    6b32:	db 01       	movw	r26, r22
    6b34:	2c 91       	ld	r18, X
    6b36:	d7 01       	movw	r26, r14
    6b38:	d8 96       	adiw	r26, 0x38	; 56
    6b3a:	3c 91       	ld	r19, X
    6b3c:	23 2b       	or	r18, r19
    6b3e:	db 01       	movw	r26, r22
    6b40:	2c 93       	st	X, r18
    6b42:	42 b9       	out	0x02, r20	; 2
    6b44:	d7 01       	movw	r26, r14
    6b46:	d2 96       	adiw	r26, 0x32	; 50
    6b48:	4d 91       	ld	r20, X+
    6b4a:	5c 91       	ld	r21, X
    6b4c:	da 01       	movw	r26, r20
    6b4e:	2c 91       	ld	r18, X
    6b50:	d7 01       	movw	r26, r14
    6b52:	dc 96       	adiw	r26, 0x3c	; 60
    6b54:	3c 91       	ld	r19, X
    6b56:	23 23       	and	r18, r19
    6b58:	da 01       	movw	r26, r20
    6b5a:	2c 93       	st	X, r18
    6b5c:	d7 01       	movw	r26, r14
    6b5e:	d2 96       	adiw	r26, 0x32	; 50
    6b60:	4d 91       	ld	r20, X+
    6b62:	5c 91       	ld	r21, X
    6b64:	da 01       	movw	r26, r20
    6b66:	2c 91       	ld	r18, X
    6b68:	d7 01       	movw	r26, r14
    6b6a:	d8 96       	adiw	r26, 0x38	; 56
    6b6c:	3c 91       	ld	r19, X
    6b6e:	23 2b       	or	r18, r19
    6b70:	da 01       	movw	r26, r20
    6b72:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:374
    writeCmdData16(ILI932X_VER_END_AD, y2);
    6b74:	d7 01       	movw	r26, r14
    6b76:	d0 96       	adiw	r26, 0x30	; 48
    6b78:	4d 91       	ld	r20, X+
    6b7a:	5c 91       	ld	r21, X
    6b7c:	da 01       	movw	r26, r20
    6b7e:	2c 91       	ld	r18, X
    6b80:	d7 01       	movw	r26, r14
    6b82:	db 96       	adiw	r26, 0x3b	; 59
    6b84:	3c 91       	ld	r19, X
    6b86:	23 23       	and	r18, r19
    6b88:	da 01       	movw	r26, r20
    6b8a:	2c 93       	st	X, r18
    6b8c:	12 b8       	out	0x02, r1	; 2
    6b8e:	d7 01       	movw	r26, r14
    6b90:	d2 96       	adiw	r26, 0x32	; 50
    6b92:	4d 91       	ld	r20, X+
    6b94:	5c 91       	ld	r21, X
    6b96:	da 01       	movw	r26, r20
    6b98:	2c 91       	ld	r18, X
    6b9a:	d7 01       	movw	r26, r14
    6b9c:	dc 96       	adiw	r26, 0x3c	; 60
    6b9e:	3c 91       	ld	r19, X
    6ba0:	23 23       	and	r18, r19
    6ba2:	da 01       	movw	r26, r20
    6ba4:	2c 93       	st	X, r18
    6ba6:	d7 01       	movw	r26, r14
    6ba8:	d2 96       	adiw	r26, 0x32	; 50
    6baa:	4d 91       	ld	r20, X+
    6bac:	5c 91       	ld	r21, X
    6bae:	da 01       	movw	r26, r20
    6bb0:	2c 91       	ld	r18, X
    6bb2:	d7 01       	movw	r26, r14
    6bb4:	d8 96       	adiw	r26, 0x38	; 56
    6bb6:	3c 91       	ld	r19, X
    6bb8:	23 2b       	or	r18, r19
    6bba:	da 01       	movw	r26, r20
    6bbc:	2c 93       	st	X, r18
    6bbe:	23 e5       	ldi	r18, 0x53	; 83
    6bc0:	22 b9       	out	0x02, r18	; 2
    6bc2:	d7 01       	movw	r26, r14
    6bc4:	d2 96       	adiw	r26, 0x32	; 50
    6bc6:	4d 91       	ld	r20, X+
    6bc8:	5c 91       	ld	r21, X
    6bca:	da 01       	movw	r26, r20
    6bcc:	2c 91       	ld	r18, X
    6bce:	d7 01       	movw	r26, r14
    6bd0:	dc 96       	adiw	r26, 0x3c	; 60
    6bd2:	3c 91       	ld	r19, X
    6bd4:	23 23       	and	r18, r19
    6bd6:	da 01       	movw	r26, r20
    6bd8:	2c 93       	st	X, r18
    6bda:	d7 01       	movw	r26, r14
    6bdc:	d2 96       	adiw	r26, 0x32	; 50
    6bde:	4d 91       	ld	r20, X+
    6be0:	5c 91       	ld	r21, X
    6be2:	da 01       	movw	r26, r20
    6be4:	2c 91       	ld	r18, X
    6be6:	d7 01       	movw	r26, r14
    6be8:	d8 96       	adiw	r26, 0x38	; 56
    6bea:	3c 91       	ld	r19, X
    6bec:	23 2b       	or	r18, r19
    6bee:	da 01       	movw	r26, r20
    6bf0:	2c 93       	st	X, r18
    6bf2:	d7 01       	movw	r26, r14
    6bf4:	d0 96       	adiw	r26, 0x30	; 48
    6bf6:	4d 91       	ld	r20, X+
    6bf8:	5c 91       	ld	r21, X
    6bfa:	da 01       	movw	r26, r20
    6bfc:	2c 91       	ld	r18, X
    6bfe:	d7 01       	movw	r26, r14
    6c00:	d7 96       	adiw	r26, 0x37	; 55
    6c02:	3c 91       	ld	r19, X
    6c04:	23 2b       	or	r18, r19
    6c06:	da 01       	movw	r26, r20
    6c08:	2c 93       	st	X, r18
    6c0a:	12 b9       	out	0x02, r17	; 2
    6c0c:	d7 01       	movw	r26, r14
    6c0e:	d2 96       	adiw	r26, 0x32	; 50
    6c10:	4d 91       	ld	r20, X+
    6c12:	5c 91       	ld	r21, X
    6c14:	da 01       	movw	r26, r20
    6c16:	2c 91       	ld	r18, X
    6c18:	d7 01       	movw	r26, r14
    6c1a:	dc 96       	adiw	r26, 0x3c	; 60
    6c1c:	3c 91       	ld	r19, X
    6c1e:	23 23       	and	r18, r19
    6c20:	da 01       	movw	r26, r20
    6c22:	2c 93       	st	X, r18
    6c24:	d7 01       	movw	r26, r14
    6c26:	d2 96       	adiw	r26, 0x32	; 50
    6c28:	4d 91       	ld	r20, X+
    6c2a:	5c 91       	ld	r21, X
    6c2c:	da 01       	movw	r26, r20
    6c2e:	2c 91       	ld	r18, X
    6c30:	d7 01       	movw	r26, r14
    6c32:	d8 96       	adiw	r26, 0x38	; 56
    6c34:	3c 91       	ld	r19, X
    6c36:	23 2b       	or	r18, r19
    6c38:	da 01       	movw	r26, r20
    6c3a:	2c 93       	st	X, r18
    6c3c:	02 b9       	out	0x02, r16	; 2
    6c3e:	d7 01       	movw	r26, r14
    6c40:	d2 96       	adiw	r26, 0x32	; 50
    6c42:	4d 91       	ld	r20, X+
    6c44:	5c 91       	ld	r21, X
    6c46:	da 01       	movw	r26, r20
    6c48:	2c 91       	ld	r18, X
    6c4a:	d7 01       	movw	r26, r14
    6c4c:	dc 96       	adiw	r26, 0x3c	; 60
    6c4e:	3c 91       	ld	r19, X
    6c50:	23 23       	and	r18, r19
    6c52:	da 01       	movw	r26, r20
    6c54:	2c 93       	st	X, r18
    6c56:	d7 01       	movw	r26, r14
    6c58:	d2 96       	adiw	r26, 0x32	; 50
    6c5a:	4d 91       	ld	r20, X+
    6c5c:	5c 91       	ld	r21, X
    6c5e:	da 01       	movw	r26, r20
    6c60:	2c 91       	ld	r18, X
    6c62:	d7 01       	movw	r26, r14
    6c64:	d8 96       	adiw	r26, 0x38	; 56
    6c66:	3c 91       	ld	r19, X
    6c68:	23 2b       	or	r18, r19
    6c6a:	da 01       	movw	r26, r20
    6c6c:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:375
    writeCmdData16(ILI932X_GRAM_HOR_AD, x ); // Set address counter to top left
    6c6e:	d7 01       	movw	r26, r14
    6c70:	d0 96       	adiw	r26, 0x30	; 48
    6c72:	4d 91       	ld	r20, X+
    6c74:	5c 91       	ld	r21, X
    6c76:	da 01       	movw	r26, r20
    6c78:	2c 91       	ld	r18, X
    6c7a:	d7 01       	movw	r26, r14
    6c7c:	db 96       	adiw	r26, 0x3b	; 59
    6c7e:	3c 91       	ld	r19, X
    6c80:	23 23       	and	r18, r19
    6c82:	da 01       	movw	r26, r20
    6c84:	2c 93       	st	X, r18
    6c86:	12 b8       	out	0x02, r1	; 2
    6c88:	d7 01       	movw	r26, r14
    6c8a:	d2 96       	adiw	r26, 0x32	; 50
    6c8c:	4d 91       	ld	r20, X+
    6c8e:	5c 91       	ld	r21, X
    6c90:	da 01       	movw	r26, r20
    6c92:	2c 91       	ld	r18, X
    6c94:	d7 01       	movw	r26, r14
    6c96:	dc 96       	adiw	r26, 0x3c	; 60
    6c98:	3c 91       	ld	r19, X
    6c9a:	23 23       	and	r18, r19
    6c9c:	da 01       	movw	r26, r20
    6c9e:	2c 93       	st	X, r18
    6ca0:	d7 01       	movw	r26, r14
    6ca2:	d2 96       	adiw	r26, 0x32	; 50
    6ca4:	4d 91       	ld	r20, X+
    6ca6:	5c 91       	ld	r21, X
    6ca8:	da 01       	movw	r26, r20
    6caa:	2c 91       	ld	r18, X
    6cac:	d7 01       	movw	r26, r14
    6cae:	d8 96       	adiw	r26, 0x38	; 56
    6cb0:	3c 91       	ld	r19, X
    6cb2:	23 2b       	or	r18, r19
    6cb4:	da 01       	movw	r26, r20
    6cb6:	2c 93       	st	X, r18
    6cb8:	20 e2       	ldi	r18, 0x20	; 32
    6cba:	22 b9       	out	0x02, r18	; 2
    6cbc:	d7 01       	movw	r26, r14
    6cbe:	d2 96       	adiw	r26, 0x32	; 50
    6cc0:	4d 91       	ld	r20, X+
    6cc2:	5c 91       	ld	r21, X
    6cc4:	da 01       	movw	r26, r20
    6cc6:	2c 91       	ld	r18, X
    6cc8:	d7 01       	movw	r26, r14
    6cca:	dc 96       	adiw	r26, 0x3c	; 60
    6ccc:	3c 91       	ld	r19, X
    6cce:	23 23       	and	r18, r19
    6cd0:	da 01       	movw	r26, r20
    6cd2:	2c 93       	st	X, r18
    6cd4:	d7 01       	movw	r26, r14
    6cd6:	d2 96       	adiw	r26, 0x32	; 50
    6cd8:	4d 91       	ld	r20, X+
    6cda:	5c 91       	ld	r21, X
    6cdc:	da 01       	movw	r26, r20
    6cde:	2c 91       	ld	r18, X
    6ce0:	d7 01       	movw	r26, r14
    6ce2:	d8 96       	adiw	r26, 0x38	; 56
    6ce4:	3c 91       	ld	r19, X
    6ce6:	23 2b       	or	r18, r19
    6ce8:	da 01       	movw	r26, r20
    6cea:	2c 93       	st	X, r18
    6cec:	d7 01       	movw	r26, r14
    6cee:	d0 96       	adiw	r26, 0x30	; 48
    6cf0:	4d 91       	ld	r20, X+
    6cf2:	5c 91       	ld	r21, X
    6cf4:	da 01       	movw	r26, r20
    6cf6:	2c 91       	ld	r18, X
    6cf8:	d7 01       	movw	r26, r14
    6cfa:	d7 96       	adiw	r26, 0x37	; 55
    6cfc:	3c 91       	ld	r19, X
    6cfe:	23 2b       	or	r18, r19
    6d00:	da 01       	movw	r26, r20
    6d02:	2c 93       	st	X, r18
    6d04:	f2 b9       	out	0x02, r31	; 2
    6d06:	d7 01       	movw	r26, r14
    6d08:	d2 96       	adiw	r26, 0x32	; 50
    6d0a:	4d 91       	ld	r20, X+
    6d0c:	5c 91       	ld	r21, X
    6d0e:	da 01       	movw	r26, r20
    6d10:	2c 91       	ld	r18, X
    6d12:	d7 01       	movw	r26, r14
    6d14:	dc 96       	adiw	r26, 0x3c	; 60
    6d16:	3c 91       	ld	r19, X
    6d18:	23 23       	and	r18, r19
    6d1a:	da 01       	movw	r26, r20
    6d1c:	2c 93       	st	X, r18
    6d1e:	d7 01       	movw	r26, r14
    6d20:	d2 96       	adiw	r26, 0x32	; 50
    6d22:	4d 91       	ld	r20, X+
    6d24:	5c 91       	ld	r21, X
    6d26:	da 01       	movw	r26, r20
    6d28:	2c 91       	ld	r18, X
    6d2a:	d7 01       	movw	r26, r14
    6d2c:	d8 96       	adiw	r26, 0x38	; 56
    6d2e:	3c 91       	ld	r19, X
    6d30:	23 2b       	or	r18, r19
    6d32:	da 01       	movw	r26, r20
    6d34:	2c 93       	st	X, r18
    6d36:	e2 b9       	out	0x02, r30	; 2
    6d38:	d7 01       	movw	r26, r14
    6d3a:	d2 96       	adiw	r26, 0x32	; 50
    6d3c:	ed 91       	ld	r30, X+
    6d3e:	fc 91       	ld	r31, X
    6d40:	d3 97       	sbiw	r26, 0x33	; 51
    6d42:	20 81       	ld	r18, Z
    6d44:	dc 96       	adiw	r26, 0x3c	; 60
    6d46:	3c 91       	ld	r19, X
    6d48:	dc 97       	sbiw	r26, 0x3c	; 60
    6d4a:	23 23       	and	r18, r19
    6d4c:	20 83       	st	Z, r18
    6d4e:	d2 96       	adiw	r26, 0x32	; 50
    6d50:	ed 91       	ld	r30, X+
    6d52:	fc 91       	ld	r31, X
    6d54:	d3 97       	sbiw	r26, 0x33	; 51
    6d56:	20 81       	ld	r18, Z
    6d58:	d8 96       	adiw	r26, 0x38	; 56
    6d5a:	3c 91       	ld	r19, X
    6d5c:	d8 97       	sbiw	r26, 0x38	; 56
    6d5e:	23 2b       	or	r18, r19
    6d60:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:376
    writeCmdData16(ILI932X_GRAM_VER_AD, y );
    6d62:	d0 96       	adiw	r26, 0x30	; 48
    6d64:	ed 91       	ld	r30, X+
    6d66:	fc 91       	ld	r31, X
    6d68:	d1 97       	sbiw	r26, 0x31	; 49
    6d6a:	20 81       	ld	r18, Z
    6d6c:	db 96       	adiw	r26, 0x3b	; 59
    6d6e:	3c 91       	ld	r19, X
    6d70:	db 97       	sbiw	r26, 0x3b	; 59
    6d72:	23 23       	and	r18, r19
    6d74:	20 83       	st	Z, r18
    6d76:	12 b8       	out	0x02, r1	; 2
    6d78:	d2 96       	adiw	r26, 0x32	; 50
    6d7a:	ed 91       	ld	r30, X+
    6d7c:	fc 91       	ld	r31, X
    6d7e:	d3 97       	sbiw	r26, 0x33	; 51
    6d80:	20 81       	ld	r18, Z
    6d82:	dc 96       	adiw	r26, 0x3c	; 60
    6d84:	3c 91       	ld	r19, X
    6d86:	dc 97       	sbiw	r26, 0x3c	; 60
    6d88:	23 23       	and	r18, r19
    6d8a:	20 83       	st	Z, r18
    6d8c:	d2 96       	adiw	r26, 0x32	; 50
    6d8e:	ed 91       	ld	r30, X+
    6d90:	fc 91       	ld	r31, X
    6d92:	d3 97       	sbiw	r26, 0x33	; 51
    6d94:	20 81       	ld	r18, Z
    6d96:	d8 96       	adiw	r26, 0x38	; 56
    6d98:	3c 91       	ld	r19, X
    6d9a:	d8 97       	sbiw	r26, 0x38	; 56
    6d9c:	23 2b       	or	r18, r19
    6d9e:	20 83       	st	Z, r18
    6da0:	21 e2       	ldi	r18, 0x21	; 33
    6da2:	22 b9       	out	0x02, r18	; 2
    6da4:	d2 96       	adiw	r26, 0x32	; 50
    6da6:	ed 91       	ld	r30, X+
    6da8:	fc 91       	ld	r31, X
    6daa:	d3 97       	sbiw	r26, 0x33	; 51
    6dac:	20 81       	ld	r18, Z
    6dae:	dc 96       	adiw	r26, 0x3c	; 60
    6db0:	3c 91       	ld	r19, X
    6db2:	dc 97       	sbiw	r26, 0x3c	; 60
    6db4:	23 23       	and	r18, r19
    6db6:	20 83       	st	Z, r18
    6db8:	d2 96       	adiw	r26, 0x32	; 50
    6dba:	ed 91       	ld	r30, X+
    6dbc:	fc 91       	ld	r31, X
    6dbe:	d3 97       	sbiw	r26, 0x33	; 51
    6dc0:	20 81       	ld	r18, Z
    6dc2:	d8 96       	adiw	r26, 0x38	; 56
    6dc4:	3c 91       	ld	r19, X
    6dc6:	d8 97       	sbiw	r26, 0x38	; 56
    6dc8:	23 2b       	or	r18, r19
    6dca:	20 83       	st	Z, r18
    6dcc:	d0 96       	adiw	r26, 0x30	; 48
    6dce:	ed 91       	ld	r30, X+
    6dd0:	fc 91       	ld	r31, X
    6dd2:	d1 97       	sbiw	r26, 0x31	; 49
    6dd4:	20 81       	ld	r18, Z
    6dd6:	d7 96       	adiw	r26, 0x37	; 55
    6dd8:	3c 91       	ld	r19, X
    6dda:	d7 97       	sbiw	r26, 0x37	; 55
    6ddc:	23 2b       	or	r18, r19
    6dde:	20 83       	st	Z, r18
    6de0:	92 b9       	out	0x02, r25	; 2
    6de2:	d2 96       	adiw	r26, 0x32	; 50
    6de4:	ed 91       	ld	r30, X+
    6de6:	fc 91       	ld	r31, X
    6de8:	d3 97       	sbiw	r26, 0x33	; 51
    6dea:	90 81       	ld	r25, Z
    6dec:	dc 96       	adiw	r26, 0x3c	; 60
    6dee:	2c 91       	ld	r18, X
    6df0:	dc 97       	sbiw	r26, 0x3c	; 60
    6df2:	92 23       	and	r25, r18
    6df4:	90 83       	st	Z, r25
    6df6:	d2 96       	adiw	r26, 0x32	; 50
    6df8:	ed 91       	ld	r30, X+
    6dfa:	fc 91       	ld	r31, X
    6dfc:	d3 97       	sbiw	r26, 0x33	; 51
    6dfe:	90 81       	ld	r25, Z
    6e00:	d8 96       	adiw	r26, 0x38	; 56
    6e02:	2c 91       	ld	r18, X
    6e04:	d8 97       	sbiw	r26, 0x38	; 56
    6e06:	92 2b       	or	r25, r18
    6e08:	90 83       	st	Z, r25
    6e0a:	82 b9       	out	0x02, r24	; 2
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:387
		writeCmdData8(HX8347G_ROWADDRSTART_HI,y1>>8);
		writeCmdData8(HX8347G_ROWADDRSTART_LO,y1);
		writeCmdData8(HX8347G_COLADDREND_HI,x2>>8);
		writeCmdData8(HX8347G_COLADDREND_LO,x2);
		writeCmdData8(HX8347G_ROWADDREND_HI,y2>>8);
		writeCmdData8(HX8347G_ROWADDREND_LO,y2);
    6e0c:	d2 96       	adiw	r26, 0x32	; 50
    6e0e:	ed 91       	ld	r30, X+
    6e10:	fc 91       	ld	r31, X
    6e12:	d3 97       	sbiw	r26, 0x33	; 51
    6e14:	80 81       	ld	r24, Z
    6e16:	dc 96       	adiw	r26, 0x3c	; 60
    6e18:	9c 91       	ld	r25, X
    6e1a:	dc 97       	sbiw	r26, 0x3c	; 60
    6e1c:	89 23       	and	r24, r25
    6e1e:	80 83       	st	Z, r24
    6e20:	d2 96       	adiw	r26, 0x32	; 50
    6e22:	ed 91       	ld	r30, X+
    6e24:	fc 91       	ld	r31, X
    6e26:	d3 97       	sbiw	r26, 0x33	; 51
    6e28:	80 81       	ld	r24, Z
    6e2a:	d8 96       	adiw	r26, 0x38	; 56
    6e2c:	9c 91       	ld	r25, X
    6e2e:	89 2b       	or	r24, r25
    6e30:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:397
		uint8_t y_buf[] = {y1>>8,y1&0xFF,y2>>8,y2&0xFF}; 
	
		Push_Command(XC, x_buf, 4); //set x address
		Push_Command(YC, y_buf, 4); //set y address
	}
	CS_IDLE;		
    6e32:	d7 01       	movw	r26, r14
    6e34:	9e 96       	adiw	r26, 0x2e	; 46
    6e36:	ed 91       	ld	r30, X+
    6e38:	fc 91       	ld	r31, X
    6e3a:	9f 97       	sbiw	r26, 0x2f	; 47
    6e3c:	80 81       	ld	r24, Z
    6e3e:	d6 96       	adiw	r26, 0x36	; 54
    6e40:	9c 91       	ld	r25, X
    6e42:	89 2b       	or	r24, r25
    6e44:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:398
}
    6e46:	28 96       	adiw	r28, 0x08	; 8
    6e48:	0f b6       	in	r0, 0x3f	; 63
    6e4a:	f8 94       	cli
    6e4c:	de bf       	out	0x3e, r29	; 62
    6e4e:	0f be       	out	0x3f, r0	; 63
    6e50:	cd bf       	out	0x3d, r28	; 61
    6e52:	df 91       	pop	r29
    6e54:	cf 91       	pop	r28
    6e56:	1f 91       	pop	r17
    6e58:	0f 91       	pop	r16
    6e5a:	ff 90       	pop	r15
    6e5c:	ef 90       	pop	r14
    6e5e:	df 90       	pop	r13
    6e60:	cf 90       	pop	r12
    6e62:	bf 90       	pop	r11
    6e64:	af 90       	pop	r10
    6e66:	08 95       	ret
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:353
			      x  = x2;
			      y  = y1;
		      	  break;
		     case 2:
			      t  = x1;
			      x1 = WIDTH  - 1 - x2;
    6e68:	f7 01       	movw	r30, r14
    6e6a:	a6 85       	ldd	r26, Z+14	; 0x0e
    6e6c:	b7 85       	ldd	r27, Z+15	; 0x0f
    6e6e:	59 01       	movw	r10, r18
    6e70:	a0 94       	com	r10
    6e72:	b0 94       	com	r11
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:354
			      x2 = WIDTH  - 1 - t;
    6e74:	9d 01       	movw	r18, r26
    6e76:	26 1b       	sub	r18, r22
    6e78:	37 0b       	sbc	r19, r23
    6e7a:	21 50       	subi	r18, 0x01	; 1
    6e7c:	31 09       	sbc	r19, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:356
			      t  = y1;
			      y1 = HEIGHT - 1 - y2;
    6e7e:	60 89       	ldd	r22, Z+16	; 0x10
    6e80:	71 89       	ldd	r23, Z+17	; 0x11
    6e82:	68 01       	movw	r12, r16
    6e84:	c0 94       	com	r12
    6e86:	d0 94       	com	r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:357
			      y2 = HEIGHT - 1 - t;
    6e88:	8a 01       	movw	r16, r20
    6e8a:	00 95       	com	r16
    6e8c:	10 95       	com	r17
    6e8e:	06 0f       	add	r16, r22
    6e90:	17 1f       	adc	r17, r23
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:359
			      x  = x2;
			      y  = y2;
    6e92:	c8 01       	movw	r24, r16
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:358
			      x1 = WIDTH  - 1 - x2;
			      x2 = WIDTH  - 1 - t;
			      t  = y1;
			      y1 = HEIGHT - 1 - y2;
			      y2 = HEIGHT - 1 - t;
			      x  = x2;
    6e94:	f9 01       	movw	r30, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:356
		     case 2:
			      t  = x1;
			      x1 = WIDTH  - 1 - x2;
			      x2 = WIDTH  - 1 - t;
			      t  = y1;
			      y1 = HEIGHT - 1 - y2;
    6e96:	a6 01       	movw	r20, r12
    6e98:	46 0f       	add	r20, r22
    6e9a:	57 1f       	adc	r21, r23
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:353
			      x  = x2;
			      y  = y1;
		      	  break;
		     case 2:
			      t  = x1;
			      x1 = WIDTH  - 1 - x2;
    6e9c:	b5 01       	movw	r22, r10
    6e9e:	f1 cc       	rjmp	.-1566   	; 0x6882 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x86>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:364
			      y  = y2;
			      break;
		     case 3:
			      t  = x1;
			      x1 = y1;
			      y1 = HEIGHT - 1 - x2;
    6ea0:	f7 01       	movw	r30, r14
    6ea2:	a0 89       	ldd	r26, Z+16	; 0x10
    6ea4:	b1 89       	ldd	r27, Z+17	; 0x11
    6ea6:	69 01       	movw	r12, r18
    6ea8:	c0 94       	com	r12
    6eaa:	d0 94       	com	r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:366
			      x2 = y2;
			      y2 = HEIGHT - 1 - t;
    6eac:	cd 01       	movw	r24, r26
    6eae:	86 1b       	sub	r24, r22
    6eb0:	97 0b       	sbc	r25, r23
    6eb2:	01 97       	sbiw	r24, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:367
			      x  = x1;
    6eb4:	fa 01       	movw	r30, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:365
			      break;
		     case 3:
			      t  = x1;
			      x1 = y1;
			      y1 = HEIGHT - 1 - x2;
			      x2 = y2;
    6eb6:	98 01       	movw	r18, r16
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:366
			      y2 = HEIGHT - 1 - t;
    6eb8:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:363
			      x  = x2;
			      y  = y2;
			      break;
		     case 3:
			      t  = x1;
			      x1 = y1;
    6eba:	ba 01       	movw	r22, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:364
			      y1 = HEIGHT - 1 - x2;
    6ebc:	a6 01       	movw	r20, r12
    6ebe:	4a 0f       	add	r20, r26
    6ec0:	5b 1f       	adc	r21, r27
    6ec2:	e1 cc       	rjmp	.-1598   	; 0x6886 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x8a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:340
	    int x, y, t;
	    switch(rotation) 
		{
		     default:
			      x  = x1;
			      y  = y1;
    6ec4:	ca 01       	movw	r24, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:339
	    // occur top-to-bottom.
	    int x, y, t;
	    switch(rotation) 
		{
		     default:
			      x  = x1;
    6ec6:	fb 01       	movw	r30, r22
    6ec8:	de cc       	rjmp	.-1604   	; 0x6886 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x8a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:378
    writeCmdData16(ILI932X_VER_START_AD, y1);
    writeCmdData16(ILI932X_VER_END_AD, y2);
    writeCmdData16(ILI932X_GRAM_HOR_AD, x ); // Set address counter to top left
    writeCmdData16(ILI932X_GRAM_VER_AD, y );
 	} 
	else if(lcd_driver == ID_7575)
    6eca:	01 97       	sbiw	r24, 0x01	; 1
    6ecc:	09 f0       	breq	.+2      	; 0x6ed0 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6d4>
    6ece:	e5 c1       	rjmp	.+970    	; 0x729a <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0xa9e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:380
	{
		writeCmdData8(HX8347G_COLADDRSTART_HI,x1>>8);
    6ed0:	d0 96       	adiw	r26, 0x30	; 48
    6ed2:	ed 91       	ld	r30, X+
    6ed4:	fc 91       	ld	r31, X
    6ed6:	d1 97       	sbiw	r26, 0x31	; 49
    6ed8:	80 81       	ld	r24, Z
    6eda:	db 96       	adiw	r26, 0x3b	; 59
    6edc:	9c 91       	ld	r25, X
    6ede:	db 97       	sbiw	r26, 0x3b	; 59
    6ee0:	89 23       	and	r24, r25
    6ee2:	80 83       	st	Z, r24
    6ee4:	82 e0       	ldi	r24, 0x02	; 2
    6ee6:	82 b9       	out	0x02, r24	; 2
    6ee8:	d2 96       	adiw	r26, 0x32	; 50
    6eea:	ed 91       	ld	r30, X+
    6eec:	fc 91       	ld	r31, X
    6eee:	d3 97       	sbiw	r26, 0x33	; 51
    6ef0:	80 81       	ld	r24, Z
    6ef2:	dc 96       	adiw	r26, 0x3c	; 60
    6ef4:	9c 91       	ld	r25, X
    6ef6:	dc 97       	sbiw	r26, 0x3c	; 60
    6ef8:	89 23       	and	r24, r25
    6efa:	80 83       	st	Z, r24
    6efc:	d2 96       	adiw	r26, 0x32	; 50
    6efe:	ed 91       	ld	r30, X+
    6f00:	fc 91       	ld	r31, X
    6f02:	d3 97       	sbiw	r26, 0x33	; 51
    6f04:	80 81       	ld	r24, Z
    6f06:	d8 96       	adiw	r26, 0x38	; 56
    6f08:	9c 91       	ld	r25, X
    6f0a:	d8 97       	sbiw	r26, 0x38	; 56
    6f0c:	89 2b       	or	r24, r25
    6f0e:	80 83       	st	Z, r24
    6f10:	d0 96       	adiw	r26, 0x30	; 48
    6f12:	ed 91       	ld	r30, X+
    6f14:	fc 91       	ld	r31, X
    6f16:	d1 97       	sbiw	r26, 0x31	; 49
    6f18:	80 81       	ld	r24, Z
    6f1a:	d7 96       	adiw	r26, 0x37	; 55
    6f1c:	9c 91       	ld	r25, X
    6f1e:	d7 97       	sbiw	r26, 0x37	; 55
    6f20:	89 2b       	or	r24, r25
    6f22:	80 83       	st	Z, r24
    6f24:	72 b9       	out	0x02, r23	; 2
    6f26:	d2 96       	adiw	r26, 0x32	; 50
    6f28:	ed 91       	ld	r30, X+
    6f2a:	fc 91       	ld	r31, X
    6f2c:	d3 97       	sbiw	r26, 0x33	; 51
    6f2e:	80 81       	ld	r24, Z
    6f30:	dc 96       	adiw	r26, 0x3c	; 60
    6f32:	9c 91       	ld	r25, X
    6f34:	dc 97       	sbiw	r26, 0x3c	; 60
    6f36:	89 23       	and	r24, r25
    6f38:	80 83       	st	Z, r24
    6f3a:	d2 96       	adiw	r26, 0x32	; 50
    6f3c:	ed 91       	ld	r30, X+
    6f3e:	fc 91       	ld	r31, X
    6f40:	d3 97       	sbiw	r26, 0x33	; 51
    6f42:	80 81       	ld	r24, Z
    6f44:	d8 96       	adiw	r26, 0x38	; 56
    6f46:	9c 91       	ld	r25, X
    6f48:	d8 97       	sbiw	r26, 0x38	; 56
    6f4a:	89 2b       	or	r24, r25
    6f4c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:381
		writeCmdData8(HX8347G_COLADDRSTART_LO,x1);
    6f4e:	d0 96       	adiw	r26, 0x30	; 48
    6f50:	ed 91       	ld	r30, X+
    6f52:	fc 91       	ld	r31, X
    6f54:	d1 97       	sbiw	r26, 0x31	; 49
    6f56:	80 81       	ld	r24, Z
    6f58:	db 96       	adiw	r26, 0x3b	; 59
    6f5a:	9c 91       	ld	r25, X
    6f5c:	db 97       	sbiw	r26, 0x3b	; 59
    6f5e:	89 23       	and	r24, r25
    6f60:	80 83       	st	Z, r24
    6f62:	83 e0       	ldi	r24, 0x03	; 3
    6f64:	82 b9       	out	0x02, r24	; 2
    6f66:	d2 96       	adiw	r26, 0x32	; 50
    6f68:	ed 91       	ld	r30, X+
    6f6a:	fc 91       	ld	r31, X
    6f6c:	d3 97       	sbiw	r26, 0x33	; 51
    6f6e:	80 81       	ld	r24, Z
    6f70:	dc 96       	adiw	r26, 0x3c	; 60
    6f72:	9c 91       	ld	r25, X
    6f74:	dc 97       	sbiw	r26, 0x3c	; 60
    6f76:	89 23       	and	r24, r25
    6f78:	80 83       	st	Z, r24
    6f7a:	d2 96       	adiw	r26, 0x32	; 50
    6f7c:	ed 91       	ld	r30, X+
    6f7e:	fc 91       	ld	r31, X
    6f80:	d3 97       	sbiw	r26, 0x33	; 51
    6f82:	80 81       	ld	r24, Z
    6f84:	d8 96       	adiw	r26, 0x38	; 56
    6f86:	9c 91       	ld	r25, X
    6f88:	d8 97       	sbiw	r26, 0x38	; 56
    6f8a:	89 2b       	or	r24, r25
    6f8c:	80 83       	st	Z, r24
    6f8e:	d0 96       	adiw	r26, 0x30	; 48
    6f90:	ed 91       	ld	r30, X+
    6f92:	fc 91       	ld	r31, X
    6f94:	d1 97       	sbiw	r26, 0x31	; 49
    6f96:	80 81       	ld	r24, Z
    6f98:	d7 96       	adiw	r26, 0x37	; 55
    6f9a:	9c 91       	ld	r25, X
    6f9c:	d7 97       	sbiw	r26, 0x37	; 55
    6f9e:	89 2b       	or	r24, r25
    6fa0:	80 83       	st	Z, r24
    6fa2:	62 b9       	out	0x02, r22	; 2
    6fa4:	d2 96       	adiw	r26, 0x32	; 50
    6fa6:	ed 91       	ld	r30, X+
    6fa8:	fc 91       	ld	r31, X
    6faa:	d3 97       	sbiw	r26, 0x33	; 51
    6fac:	80 81       	ld	r24, Z
    6fae:	dc 96       	adiw	r26, 0x3c	; 60
    6fb0:	9c 91       	ld	r25, X
    6fb2:	dc 97       	sbiw	r26, 0x3c	; 60
    6fb4:	89 23       	and	r24, r25
    6fb6:	80 83       	st	Z, r24
    6fb8:	d2 96       	adiw	r26, 0x32	; 50
    6fba:	ed 91       	ld	r30, X+
    6fbc:	fc 91       	ld	r31, X
    6fbe:	d3 97       	sbiw	r26, 0x33	; 51
    6fc0:	80 81       	ld	r24, Z
    6fc2:	d8 96       	adiw	r26, 0x38	; 56
    6fc4:	9c 91       	ld	r25, X
    6fc6:	d8 97       	sbiw	r26, 0x38	; 56
    6fc8:	89 2b       	or	r24, r25
    6fca:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:382
		writeCmdData8(HX8347G_ROWADDRSTART_HI,y1>>8);
    6fcc:	d0 96       	adiw	r26, 0x30	; 48
    6fce:	ed 91       	ld	r30, X+
    6fd0:	fc 91       	ld	r31, X
    6fd2:	d1 97       	sbiw	r26, 0x31	; 49
    6fd4:	80 81       	ld	r24, Z
    6fd6:	db 96       	adiw	r26, 0x3b	; 59
    6fd8:	9c 91       	ld	r25, X
    6fda:	db 97       	sbiw	r26, 0x3b	; 59
    6fdc:	89 23       	and	r24, r25
    6fde:	80 83       	st	Z, r24
    6fe0:	86 e0       	ldi	r24, 0x06	; 6
    6fe2:	82 b9       	out	0x02, r24	; 2
    6fe4:	d2 96       	adiw	r26, 0x32	; 50
    6fe6:	ed 91       	ld	r30, X+
    6fe8:	fc 91       	ld	r31, X
    6fea:	d3 97       	sbiw	r26, 0x33	; 51
    6fec:	80 81       	ld	r24, Z
    6fee:	dc 96       	adiw	r26, 0x3c	; 60
    6ff0:	9c 91       	ld	r25, X
    6ff2:	dc 97       	sbiw	r26, 0x3c	; 60
    6ff4:	89 23       	and	r24, r25
    6ff6:	80 83       	st	Z, r24
    6ff8:	d2 96       	adiw	r26, 0x32	; 50
    6ffa:	ed 91       	ld	r30, X+
    6ffc:	fc 91       	ld	r31, X
    6ffe:	d3 97       	sbiw	r26, 0x33	; 51
    7000:	80 81       	ld	r24, Z
    7002:	d8 96       	adiw	r26, 0x38	; 56
    7004:	9c 91       	ld	r25, X
    7006:	d8 97       	sbiw	r26, 0x38	; 56
    7008:	89 2b       	or	r24, r25
    700a:	80 83       	st	Z, r24
    700c:	d0 96       	adiw	r26, 0x30	; 48
    700e:	ed 91       	ld	r30, X+
    7010:	fc 91       	ld	r31, X
    7012:	d1 97       	sbiw	r26, 0x31	; 49
    7014:	80 81       	ld	r24, Z
    7016:	d7 96       	adiw	r26, 0x37	; 55
    7018:	9c 91       	ld	r25, X
    701a:	d7 97       	sbiw	r26, 0x37	; 55
    701c:	89 2b       	or	r24, r25
    701e:	80 83       	st	Z, r24
    7020:	52 b9       	out	0x02, r21	; 2
    7022:	d2 96       	adiw	r26, 0x32	; 50
    7024:	ed 91       	ld	r30, X+
    7026:	fc 91       	ld	r31, X
    7028:	d3 97       	sbiw	r26, 0x33	; 51
    702a:	80 81       	ld	r24, Z
    702c:	dc 96       	adiw	r26, 0x3c	; 60
    702e:	9c 91       	ld	r25, X
    7030:	dc 97       	sbiw	r26, 0x3c	; 60
    7032:	89 23       	and	r24, r25
    7034:	80 83       	st	Z, r24
    7036:	d2 96       	adiw	r26, 0x32	; 50
    7038:	ed 91       	ld	r30, X+
    703a:	fc 91       	ld	r31, X
    703c:	d3 97       	sbiw	r26, 0x33	; 51
    703e:	80 81       	ld	r24, Z
    7040:	d8 96       	adiw	r26, 0x38	; 56
    7042:	9c 91       	ld	r25, X
    7044:	d8 97       	sbiw	r26, 0x38	; 56
    7046:	89 2b       	or	r24, r25
    7048:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:383
		writeCmdData8(HX8347G_ROWADDRSTART_LO,y1);
    704a:	d0 96       	adiw	r26, 0x30	; 48
    704c:	ed 91       	ld	r30, X+
    704e:	fc 91       	ld	r31, X
    7050:	d1 97       	sbiw	r26, 0x31	; 49
    7052:	80 81       	ld	r24, Z
    7054:	db 96       	adiw	r26, 0x3b	; 59
    7056:	9c 91       	ld	r25, X
    7058:	db 97       	sbiw	r26, 0x3b	; 59
    705a:	89 23       	and	r24, r25
    705c:	80 83       	st	Z, r24
    705e:	87 e0       	ldi	r24, 0x07	; 7
    7060:	82 b9       	out	0x02, r24	; 2
    7062:	d2 96       	adiw	r26, 0x32	; 50
    7064:	ed 91       	ld	r30, X+
    7066:	fc 91       	ld	r31, X
    7068:	d3 97       	sbiw	r26, 0x33	; 51
    706a:	80 81       	ld	r24, Z
    706c:	dc 96       	adiw	r26, 0x3c	; 60
    706e:	9c 91       	ld	r25, X
    7070:	dc 97       	sbiw	r26, 0x3c	; 60
    7072:	89 23       	and	r24, r25
    7074:	80 83       	st	Z, r24
    7076:	d2 96       	adiw	r26, 0x32	; 50
    7078:	ed 91       	ld	r30, X+
    707a:	fc 91       	ld	r31, X
    707c:	d3 97       	sbiw	r26, 0x33	; 51
    707e:	80 81       	ld	r24, Z
    7080:	d8 96       	adiw	r26, 0x38	; 56
    7082:	9c 91       	ld	r25, X
    7084:	d8 97       	sbiw	r26, 0x38	; 56
    7086:	89 2b       	or	r24, r25
    7088:	80 83       	st	Z, r24
    708a:	d0 96       	adiw	r26, 0x30	; 48
    708c:	ed 91       	ld	r30, X+
    708e:	fc 91       	ld	r31, X
    7090:	d1 97       	sbiw	r26, 0x31	; 49
    7092:	80 81       	ld	r24, Z
    7094:	d7 96       	adiw	r26, 0x37	; 55
    7096:	9c 91       	ld	r25, X
    7098:	d7 97       	sbiw	r26, 0x37	; 55
    709a:	89 2b       	or	r24, r25
    709c:	80 83       	st	Z, r24
    709e:	42 b9       	out	0x02, r20	; 2
    70a0:	d2 96       	adiw	r26, 0x32	; 50
    70a2:	ed 91       	ld	r30, X+
    70a4:	fc 91       	ld	r31, X
    70a6:	d3 97       	sbiw	r26, 0x33	; 51
    70a8:	80 81       	ld	r24, Z
    70aa:	dc 96       	adiw	r26, 0x3c	; 60
    70ac:	9c 91       	ld	r25, X
    70ae:	dc 97       	sbiw	r26, 0x3c	; 60
    70b0:	89 23       	and	r24, r25
    70b2:	80 83       	st	Z, r24
    70b4:	d2 96       	adiw	r26, 0x32	; 50
    70b6:	ed 91       	ld	r30, X+
    70b8:	fc 91       	ld	r31, X
    70ba:	d3 97       	sbiw	r26, 0x33	; 51
    70bc:	80 81       	ld	r24, Z
    70be:	d8 96       	adiw	r26, 0x38	; 56
    70c0:	9c 91       	ld	r25, X
    70c2:	d8 97       	sbiw	r26, 0x38	; 56
    70c4:	89 2b       	or	r24, r25
    70c6:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:384
		writeCmdData8(HX8347G_COLADDREND_HI,x2>>8);
    70c8:	d0 96       	adiw	r26, 0x30	; 48
    70ca:	ed 91       	ld	r30, X+
    70cc:	fc 91       	ld	r31, X
    70ce:	d1 97       	sbiw	r26, 0x31	; 49
    70d0:	80 81       	ld	r24, Z
    70d2:	db 96       	adiw	r26, 0x3b	; 59
    70d4:	9c 91       	ld	r25, X
    70d6:	db 97       	sbiw	r26, 0x3b	; 59
    70d8:	89 23       	and	r24, r25
    70da:	80 83       	st	Z, r24
    70dc:	84 e0       	ldi	r24, 0x04	; 4
    70de:	82 b9       	out	0x02, r24	; 2
    70e0:	d2 96       	adiw	r26, 0x32	; 50
    70e2:	ed 91       	ld	r30, X+
    70e4:	fc 91       	ld	r31, X
    70e6:	d3 97       	sbiw	r26, 0x33	; 51
    70e8:	80 81       	ld	r24, Z
    70ea:	dc 96       	adiw	r26, 0x3c	; 60
    70ec:	9c 91       	ld	r25, X
    70ee:	dc 97       	sbiw	r26, 0x3c	; 60
    70f0:	89 23       	and	r24, r25
    70f2:	80 83       	st	Z, r24
    70f4:	d2 96       	adiw	r26, 0x32	; 50
    70f6:	ed 91       	ld	r30, X+
    70f8:	fc 91       	ld	r31, X
    70fa:	d3 97       	sbiw	r26, 0x33	; 51
    70fc:	80 81       	ld	r24, Z
    70fe:	d8 96       	adiw	r26, 0x38	; 56
    7100:	9c 91       	ld	r25, X
    7102:	d8 97       	sbiw	r26, 0x38	; 56
    7104:	89 2b       	or	r24, r25
    7106:	80 83       	st	Z, r24
    7108:	d0 96       	adiw	r26, 0x30	; 48
    710a:	ed 91       	ld	r30, X+
    710c:	fc 91       	ld	r31, X
    710e:	d1 97       	sbiw	r26, 0x31	; 49
    7110:	80 81       	ld	r24, Z
    7112:	d7 96       	adiw	r26, 0x37	; 55
    7114:	9c 91       	ld	r25, X
    7116:	d7 97       	sbiw	r26, 0x37	; 55
    7118:	89 2b       	or	r24, r25
    711a:	80 83       	st	Z, r24
    711c:	32 b9       	out	0x02, r19	; 2
    711e:	d2 96       	adiw	r26, 0x32	; 50
    7120:	ed 91       	ld	r30, X+
    7122:	fc 91       	ld	r31, X
    7124:	d3 97       	sbiw	r26, 0x33	; 51
    7126:	80 81       	ld	r24, Z
    7128:	dc 96       	adiw	r26, 0x3c	; 60
    712a:	9c 91       	ld	r25, X
    712c:	dc 97       	sbiw	r26, 0x3c	; 60
    712e:	89 23       	and	r24, r25
    7130:	80 83       	st	Z, r24
    7132:	d2 96       	adiw	r26, 0x32	; 50
    7134:	ed 91       	ld	r30, X+
    7136:	fc 91       	ld	r31, X
    7138:	d3 97       	sbiw	r26, 0x33	; 51
    713a:	80 81       	ld	r24, Z
    713c:	d8 96       	adiw	r26, 0x38	; 56
    713e:	9c 91       	ld	r25, X
    7140:	d8 97       	sbiw	r26, 0x38	; 56
    7142:	89 2b       	or	r24, r25
    7144:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:385
		writeCmdData8(HX8347G_COLADDREND_LO,x2);
    7146:	d0 96       	adiw	r26, 0x30	; 48
    7148:	ed 91       	ld	r30, X+
    714a:	fc 91       	ld	r31, X
    714c:	d1 97       	sbiw	r26, 0x31	; 49
    714e:	80 81       	ld	r24, Z
    7150:	db 96       	adiw	r26, 0x3b	; 59
    7152:	9c 91       	ld	r25, X
    7154:	db 97       	sbiw	r26, 0x3b	; 59
    7156:	89 23       	and	r24, r25
    7158:	80 83       	st	Z, r24
    715a:	85 e0       	ldi	r24, 0x05	; 5
    715c:	82 b9       	out	0x02, r24	; 2
    715e:	d2 96       	adiw	r26, 0x32	; 50
    7160:	ed 91       	ld	r30, X+
    7162:	fc 91       	ld	r31, X
    7164:	d3 97       	sbiw	r26, 0x33	; 51
    7166:	80 81       	ld	r24, Z
    7168:	dc 96       	adiw	r26, 0x3c	; 60
    716a:	9c 91       	ld	r25, X
    716c:	dc 97       	sbiw	r26, 0x3c	; 60
    716e:	89 23       	and	r24, r25
    7170:	80 83       	st	Z, r24
    7172:	d2 96       	adiw	r26, 0x32	; 50
    7174:	ed 91       	ld	r30, X+
    7176:	fc 91       	ld	r31, X
    7178:	d3 97       	sbiw	r26, 0x33	; 51
    717a:	80 81       	ld	r24, Z
    717c:	d8 96       	adiw	r26, 0x38	; 56
    717e:	9c 91       	ld	r25, X
    7180:	d8 97       	sbiw	r26, 0x38	; 56
    7182:	89 2b       	or	r24, r25
    7184:	80 83       	st	Z, r24
    7186:	d0 96       	adiw	r26, 0x30	; 48
    7188:	ed 91       	ld	r30, X+
    718a:	fc 91       	ld	r31, X
    718c:	d1 97       	sbiw	r26, 0x31	; 49
    718e:	80 81       	ld	r24, Z
    7190:	d7 96       	adiw	r26, 0x37	; 55
    7192:	9c 91       	ld	r25, X
    7194:	d7 97       	sbiw	r26, 0x37	; 55
    7196:	89 2b       	or	r24, r25
    7198:	80 83       	st	Z, r24
    719a:	22 b9       	out	0x02, r18	; 2
    719c:	d2 96       	adiw	r26, 0x32	; 50
    719e:	ed 91       	ld	r30, X+
    71a0:	fc 91       	ld	r31, X
    71a2:	d3 97       	sbiw	r26, 0x33	; 51
    71a4:	80 81       	ld	r24, Z
    71a6:	dc 96       	adiw	r26, 0x3c	; 60
    71a8:	9c 91       	ld	r25, X
    71aa:	dc 97       	sbiw	r26, 0x3c	; 60
    71ac:	89 23       	and	r24, r25
    71ae:	80 83       	st	Z, r24
    71b0:	d2 96       	adiw	r26, 0x32	; 50
    71b2:	ed 91       	ld	r30, X+
    71b4:	fc 91       	ld	r31, X
    71b6:	d3 97       	sbiw	r26, 0x33	; 51
    71b8:	80 81       	ld	r24, Z
    71ba:	d8 96       	adiw	r26, 0x38	; 56
    71bc:	9c 91       	ld	r25, X
    71be:	d8 97       	sbiw	r26, 0x38	; 56
    71c0:	89 2b       	or	r24, r25
    71c2:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:386
		writeCmdData8(HX8347G_ROWADDREND_HI,y2>>8);
    71c4:	d0 96       	adiw	r26, 0x30	; 48
    71c6:	ed 91       	ld	r30, X+
    71c8:	fc 91       	ld	r31, X
    71ca:	d1 97       	sbiw	r26, 0x31	; 49
    71cc:	80 81       	ld	r24, Z
    71ce:	db 96       	adiw	r26, 0x3b	; 59
    71d0:	9c 91       	ld	r25, X
    71d2:	db 97       	sbiw	r26, 0x3b	; 59
    71d4:	89 23       	and	r24, r25
    71d6:	80 83       	st	Z, r24
    71d8:	88 e0       	ldi	r24, 0x08	; 8
    71da:	82 b9       	out	0x02, r24	; 2
    71dc:	d2 96       	adiw	r26, 0x32	; 50
    71de:	ed 91       	ld	r30, X+
    71e0:	fc 91       	ld	r31, X
    71e2:	d3 97       	sbiw	r26, 0x33	; 51
    71e4:	80 81       	ld	r24, Z
    71e6:	dc 96       	adiw	r26, 0x3c	; 60
    71e8:	9c 91       	ld	r25, X
    71ea:	dc 97       	sbiw	r26, 0x3c	; 60
    71ec:	89 23       	and	r24, r25
    71ee:	80 83       	st	Z, r24
    71f0:	d2 96       	adiw	r26, 0x32	; 50
    71f2:	ed 91       	ld	r30, X+
    71f4:	fc 91       	ld	r31, X
    71f6:	d3 97       	sbiw	r26, 0x33	; 51
    71f8:	80 81       	ld	r24, Z
    71fa:	d8 96       	adiw	r26, 0x38	; 56
    71fc:	9c 91       	ld	r25, X
    71fe:	d8 97       	sbiw	r26, 0x38	; 56
    7200:	89 2b       	or	r24, r25
    7202:	80 83       	st	Z, r24
    7204:	d0 96       	adiw	r26, 0x30	; 48
    7206:	ed 91       	ld	r30, X+
    7208:	fc 91       	ld	r31, X
    720a:	d1 97       	sbiw	r26, 0x31	; 49
    720c:	80 81       	ld	r24, Z
    720e:	d7 96       	adiw	r26, 0x37	; 55
    7210:	9c 91       	ld	r25, X
    7212:	d7 97       	sbiw	r26, 0x37	; 55
    7214:	89 2b       	or	r24, r25
    7216:	80 83       	st	Z, r24
    7218:	12 b9       	out	0x02, r17	; 2
    721a:	d2 96       	adiw	r26, 0x32	; 50
    721c:	ed 91       	ld	r30, X+
    721e:	fc 91       	ld	r31, X
    7220:	d3 97       	sbiw	r26, 0x33	; 51
    7222:	80 81       	ld	r24, Z
    7224:	dc 96       	adiw	r26, 0x3c	; 60
    7226:	9c 91       	ld	r25, X
    7228:	dc 97       	sbiw	r26, 0x3c	; 60
    722a:	89 23       	and	r24, r25
    722c:	80 83       	st	Z, r24
    722e:	d2 96       	adiw	r26, 0x32	; 50
    7230:	ed 91       	ld	r30, X+
    7232:	fc 91       	ld	r31, X
    7234:	d3 97       	sbiw	r26, 0x33	; 51
    7236:	80 81       	ld	r24, Z
    7238:	d8 96       	adiw	r26, 0x38	; 56
    723a:	9c 91       	ld	r25, X
    723c:	d8 97       	sbiw	r26, 0x38	; 56
    723e:	89 2b       	or	r24, r25
    7240:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:387
		writeCmdData8(HX8347G_ROWADDREND_LO,y2);
    7242:	d0 96       	adiw	r26, 0x30	; 48
    7244:	ed 91       	ld	r30, X+
    7246:	fc 91       	ld	r31, X
    7248:	d1 97       	sbiw	r26, 0x31	; 49
    724a:	80 81       	ld	r24, Z
    724c:	db 96       	adiw	r26, 0x3b	; 59
    724e:	9c 91       	ld	r25, X
    7250:	db 97       	sbiw	r26, 0x3b	; 59
    7252:	89 23       	and	r24, r25
    7254:	80 83       	st	Z, r24
    7256:	89 e0       	ldi	r24, 0x09	; 9
    7258:	82 b9       	out	0x02, r24	; 2
    725a:	d2 96       	adiw	r26, 0x32	; 50
    725c:	ed 91       	ld	r30, X+
    725e:	fc 91       	ld	r31, X
    7260:	d3 97       	sbiw	r26, 0x33	; 51
    7262:	80 81       	ld	r24, Z
    7264:	dc 96       	adiw	r26, 0x3c	; 60
    7266:	9c 91       	ld	r25, X
    7268:	dc 97       	sbiw	r26, 0x3c	; 60
    726a:	89 23       	and	r24, r25
    726c:	80 83       	st	Z, r24
    726e:	d2 96       	adiw	r26, 0x32	; 50
    7270:	ed 91       	ld	r30, X+
    7272:	fc 91       	ld	r31, X
    7274:	d3 97       	sbiw	r26, 0x33	; 51
    7276:	80 81       	ld	r24, Z
    7278:	d8 96       	adiw	r26, 0x38	; 56
    727a:	9c 91       	ld	r25, X
    727c:	d8 97       	sbiw	r26, 0x38	; 56
    727e:	89 2b       	or	r24, r25
    7280:	80 83       	st	Z, r24
    7282:	d0 96       	adiw	r26, 0x30	; 48
    7284:	ed 91       	ld	r30, X+
    7286:	fc 91       	ld	r31, X
    7288:	d1 97       	sbiw	r26, 0x31	; 49
    728a:	80 81       	ld	r24, Z
    728c:	d7 96       	adiw	r26, 0x37	; 55
    728e:	9c 91       	ld	r25, X
    7290:	d7 97       	sbiw	r26, 0x37	; 55
    7292:	89 2b       	or	r24, r25
    7294:	80 83       	st	Z, r24
    7296:	02 b9       	out	0x02, r16	; 2
    7298:	b9 cd       	rjmp	.-1166   	; 0x6e0c <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x610>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:391
	}
	else
	{
		uint8_t x_buf[] = {x1>>8,x1&0xFF,x2>>8,x2&0xFF}; 
    729a:	7d 83       	std	Y+5, r23	; 0x05
    729c:	6e 83       	std	Y+6, r22	; 0x06
    729e:	3f 83       	std	Y+7, r19	; 0x07
    72a0:	28 87       	std	Y+8, r18	; 0x08
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:392
		uint8_t y_buf[] = {y1>>8,y1&0xFF,y2>>8,y2&0xFF}; 
    72a2:	59 83       	std	Y+1, r21	; 0x01
    72a4:	4a 83       	std	Y+2, r20	; 0x02
    72a6:	1b 83       	std	Y+3, r17	; 0x03
    72a8:	0c 83       	std	Y+4, r16	; 0x04
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:394
	
		Push_Command(XC, x_buf, 4); //set x address
    72aa:	f7 01       	movw	r30, r14
    72ac:	64 8d       	ldd	r22, Z+28	; 0x1c
    72ae:	75 8d       	ldd	r23, Z+29	; 0x1d
    72b0:	24 e0       	ldi	r18, 0x04	; 4
    72b2:	ae 01       	movw	r20, r28
    72b4:	4b 5f       	subi	r20, 0xFB	; 251
    72b6:	5f 4f       	sbci	r21, 0xFF	; 255
    72b8:	c7 01       	movw	r24, r14
    72ba:	0e 94 81 33 	call	0x6702	; 0x6702 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:395
		Push_Command(YC, y_buf, 4); //set y address
    72be:	d7 01       	movw	r26, r14
    72c0:	5e 96       	adiw	r26, 0x1e	; 30
    72c2:	6d 91       	ld	r22, X+
    72c4:	7c 91       	ld	r23, X
    72c6:	24 e0       	ldi	r18, 0x04	; 4
    72c8:	ae 01       	movw	r20, r28
    72ca:	4f 5f       	subi	r20, 0xFF	; 255
    72cc:	5f 4f       	sbci	r21, 0xFF	; 255
    72ce:	c7 01       	movw	r24, r14
    72d0:	0e 94 81 33 	call	0x6702	; 0x6702 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
    72d4:	ae cd       	rjmp	.-1188   	; 0x6e32 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x636>

000072d6 <draw_menu(bool)>:
_Z9draw_menub():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1008




bool draw_menu(bool redraw)
{
    72d6:	2f 92       	push	r2
    72d8:	3f 92       	push	r3
    72da:	4f 92       	push	r4
    72dc:	5f 92       	push	r5
    72de:	6f 92       	push	r6
    72e0:	7f 92       	push	r7
    72e2:	8f 92       	push	r8
    72e4:	9f 92       	push	r9
    72e6:	af 92       	push	r10
    72e8:	bf 92       	push	r11
    72ea:	cf 92       	push	r12
    72ec:	df 92       	push	r13
    72ee:	ef 92       	push	r14
    72f0:	ff 92       	push	r15
    72f2:	0f 93       	push	r16
    72f4:	1f 93       	push	r17
    72f6:	cf 93       	push	r28
    72f8:	df 93       	push	r29
    72fa:	cd b7       	in	r28, 0x3d	; 61
    72fc:	de b7       	in	r29, 0x3e	; 62
    72fe:	c5 5e       	subi	r28, 0xE5	; 229
    7300:	d1 09       	sbc	r29, r1
    7302:	0f b6       	in	r0, 0x3f	; 63
    7304:	f8 94       	cli
    7306:	de bf       	out	0x3e, r29	; 62
    7308:	0f be       	out	0x3f, r0	; 63
    730a:	cd bf       	out	0x3d, r28	; 61
    730c:	98 2e       	mov	r9, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1039
  uint8_t rdr;
  uint8_t menu_args1;
  uint8_t redraw_class;
  uint8_t active = 0;

  current = MenuHistoryGetMenu(&menu_args1);
    730e:	ce 01       	movw	r24, r28
    7310:	8d 54       	subi	r24, 0x4D	; 77
    7312:	9f 4f       	sbci	r25, 0xFF	; 255
    7314:	0e 94 78 22 	call	0x44f0	; 0x44f0 <MenuHistoryGetMenu(unsigned char*)>
    7318:	3c 01       	movw	r6, r24
TP_Scan():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:186
  	}        
} 

uint8_t LCDWIKI_TOUCH::TP_Scan(uint8_t mode)
{
	if(TIRQ_STATE==0) 
    731a:	e0 91 b3 0d 	lds	r30, 0x0DB3	; 0x800db3 <my_touch+0x17>
    731e:	f0 91 b4 0d 	lds	r31, 0x0DB4	; 0x800db4 <my_touch+0x18>
    7322:	80 81       	ld	r24, Z
    7324:	90 91 b9 0d 	lds	r25, 0x0DB9	; 0x800db9 <my_touch+0x1d>
    7328:	89 23       	and	r24, r25
    732a:	09 f0       	breq	.+2      	; 0x732e <draw_menu(bool)+0x58>
    732c:	7c c2       	rjmp	.+1272   	; 0x7826 <draw_menu(bool)+0x550>
TP_Read_Coordinate():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:147
} 

uint8_t LCDWIKI_TOUCH::TP_Read_Coordinate(uint16_t *x,uint16_t *y)
{
        uint16_t xtemp,ytemp;                                                    
        xtemp=TP_Read_XY(CMD_RDX);
    732e:	80 ed       	ldi	r24, 0xD0	; 208
    7330:	0e 94 c8 7d 	call	0xfb90	; 0xfb90 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.122]>
    7334:	6c 01       	movw	r12, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:148
        ytemp=TP_Read_XY(CMD_RDY);
    7336:	80 e9       	ldi	r24, 0x90	; 144
    7338:	0e 94 c8 7d 	call	0xfb90	; 0xfb90 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.122]>
    733c:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:147
} 

uint8_t LCDWIKI_TOUCH::TP_Read_Coordinate(uint16_t *x,uint16_t *y)
{
        uint16_t xtemp,ytemp;                                                    
        xtemp=TP_Read_XY(CMD_RDX);
    733e:	80 ed       	ldi	r24, 0xD0	; 208
    7340:	0e 94 c8 7d 	call	0xfb90	; 0xfb90 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.122]>
    7344:	2c 01       	movw	r4, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:148
        ytemp=TP_Read_XY(CMD_RDY);
    7346:	80 e9       	ldi	r24, 0x90	; 144
    7348:	0e 94 c8 7d 	call	0xfb90	; 0xfb90 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.122]>
    734c:	5c 01       	movw	r10, r24
TP_Read_Coordinate2():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:171
	flag=TP_Read_Coordinate(&x2,&y2);
    if(flag==0)
    {
		return 0;   
    }
	if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))//Before and after the two samples are within +- ERR_RANGE.
    734e:	c4 14       	cp	r12, r4
    7350:	d5 04       	cpc	r13, r5
    7352:	48 f0       	brcs	.+18     	; 0x7366 <draw_menu(bool)+0x90>
    7354:	c2 01       	movw	r24, r4
    7356:	c2 96       	adiw	r24, 0x32	; 50
    7358:	c8 16       	cp	r12, r24
    735a:	d9 06       	cpc	r13, r25
    735c:	50 f0       	brcs	.+20     	; 0x7372 <draw_menu(bool)+0x9c>
    735e:	4c 14       	cp	r4, r12
    7360:	5d 04       	cpc	r5, r13
    7362:	08 f4       	brcc	.+2      	; 0x7366 <draw_menu(bool)+0x90>
    7364:	52 c0       	rjmp	.+164    	; 0x740a <draw_menu(bool)+0x134>
    7366:	c6 01       	movw	r24, r12
    7368:	c2 96       	adiw	r24, 0x32	; 50
    736a:	48 16       	cp	r4, r24
    736c:	59 06       	cpc	r5, r25
    736e:	08 f0       	brcs	.+2      	; 0x7372 <draw_menu(bool)+0x9c>
    7370:	4c c0       	rjmp	.+152    	; 0x740a <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:172
    &&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
    7372:	0a 15       	cp	r16, r10
    7374:	1b 05       	cpc	r17, r11
    7376:	48 f0       	brcs	.+18     	; 0x738a <draw_menu(bool)+0xb4>
    7378:	c5 01       	movw	r24, r10
    737a:	c2 96       	adiw	r24, 0x32	; 50
    737c:	08 17       	cp	r16, r24
    737e:	19 07       	cpc	r17, r25
    7380:	48 f0       	brcs	.+18     	; 0x7394 <draw_menu(bool)+0xbe>
    7382:	a0 16       	cp	r10, r16
    7384:	b1 06       	cpc	r11, r17
    7386:	08 f4       	brcc	.+2      	; 0x738a <draw_menu(bool)+0xb4>
    7388:	40 c0       	rjmp	.+128    	; 0x740a <draw_menu(bool)+0x134>
    738a:	c8 01       	movw	r24, r16
    738c:	c2 96       	adiw	r24, 0x32	; 50
    738e:	a8 16       	cp	r10, r24
    7390:	b9 06       	cpc	r11, r25
    7392:	d8 f5       	brcc	.+118    	; 0x740a <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:174
    {
        *x=(x1+x2)/2;
    7394:	c4 0c       	add	r12, r4
    7396:	d5 1c       	adc	r13, r5
    7398:	96 01       	movw	r18, r12
    739a:	36 95       	lsr	r19
    739c:	27 95       	ror	r18
TP_Scan():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:201
			temp = (long)XFAC*x/10000;
			x=temp+XOFFSET;
			temp = (long)YFAC*y/10000;
		    y=temp+YOFFSET;
	   */
			x=((long)XFAC*x)/10000+XOFFSET;
    739e:	a4 e5       	ldi	r26, 0x54	; 84
    73a0:	b3 e0       	ldi	r27, 0x03	; 3
    73a2:	0e 94 25 ad 	call	0x15a4a	; 0x15a4a <__umulhisi3>
    73a6:	20 e1       	ldi	r18, 0x10	; 16
    73a8:	22 2e       	mov	r2, r18
    73aa:	27 e2       	ldi	r18, 0x27	; 39
    73ac:	32 2e       	mov	r3, r18
    73ae:	41 2c       	mov	r4, r1
    73b0:	51 2c       	mov	r5, r1
    73b2:	a2 01       	movw	r20, r4
    73b4:	91 01       	movw	r18, r2
    73b6:	0e 94 fb ac 	call	0x159f6	; 0x159f6 <__divmodsi4>
    73ba:	69 01       	movw	r12, r18
    73bc:	8e e0       	ldi	r24, 0x0E	; 14
    73be:	c8 1a       	sub	r12, r24
    73c0:	d1 08       	sbc	r13, r1
    73c2:	d0 92 a1 0d 	sts	0x0DA1, r13	; 0x800da1 <my_touch+0x5>
    73c6:	c0 92 a0 0d 	sts	0x0DA0, r12	; 0x800da0 <my_touch+0x4>
TP_Read_Coordinate2():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:175
    }
	if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))//Before and after the two samples are within +- ERR_RANGE.
    &&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
    {
        *x=(x1+x2)/2;
        *y=(y1+y2)/2;
    73ca:	0a 0d       	add	r16, r10
    73cc:	1b 1d       	adc	r17, r11
    73ce:	98 01       	movw	r18, r16
    73d0:	36 95       	lsr	r19
    73d2:	27 95       	ror	r18
TP_Scan():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:202
			x=temp+XOFFSET;
			temp = (long)YFAC*y/10000;
		    y=temp+YOFFSET;
	   */
			x=((long)XFAC*x)/10000+XOFFSET;
		    y=((long)YFAC*y)/10000+YOFFSET;
    73d4:	a4 e0       	ldi	r26, 0x04	; 4
    73d6:	b5 e0       	ldi	r27, 0x05	; 5
    73d8:	0e 94 25 ad 	call	0x15a4a	; 0x15a4a <__umulhisi3>
    73dc:	a2 01       	movw	r20, r4
    73de:	91 01       	movw	r18, r2
    73e0:	0e 94 fb ac 	call	0x159f6	; 0x159f6 <__divmodsi4>
    73e4:	2e 51       	subi	r18, 0x1E	; 30
    73e6:	31 09       	sbc	r19, r1
    73e8:	30 93 a3 0d 	sts	0x0DA3, r19	; 0x800da3 <my_touch+0x7>
    73ec:	20 93 a2 0d 	sts	0x0DA2, r18	; 0x800da2 <my_touch+0x6>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:203
			switch(touch_rotation)
    73f0:	80 91 a9 0d 	lds	r24, 0x0DA9	; 0x800da9 <my_touch+0xd>
    73f4:	81 30       	cpi	r24, 0x01	; 1
    73f6:	09 f4       	brne	.+2      	; 0x73fa <draw_menu(bool)+0x124>
    73f8:	cc c1       	rjmp	.+920    	; 0x7792 <draw_menu(bool)+0x4bc>
    73fa:	08 f4       	brcc	.+2      	; 0x73fe <draw_menu(bool)+0x128>
    73fc:	99 c1       	rjmp	.+818    	; 0x7730 <draw_menu(bool)+0x45a>
    73fe:	82 30       	cpi	r24, 0x02	; 2
    7400:	09 f4       	brne	.+2      	; 0x7404 <draw_menu(bool)+0x12e>
    7402:	f8 c1       	rjmp	.+1008   	; 0x77f4 <draw_menu(bool)+0x51e>
    7404:	83 30       	cpi	r24, 0x03	; 3
    7406:	09 f4       	brne	.+2      	; 0x740a <draw_menu(bool)+0x134>
    7408:	01 c2       	rjmp	.+1026   	; 0x780c <draw_menu(bool)+0x536>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:315
					break;
				default:
					break;
			}
	 	}
		if((touch_statue&TP_PRES_DOWN)==0)
    740a:	80 91 a8 0d 	lds	r24, 0x0DA8	; 0x800da8 <my_touch+0xc>
    740e:	87 fd       	sbrc	r24, 7
    7410:	13 c0       	rjmp	.+38     	; 0x7438 <draw_menu(bool)+0x162>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:317
		{		 
			touch_statue=TP_PRES_DOWN|TP_CATH_PRES; 
    7412:	80 ec       	ldi	r24, 0xC0	; 192
    7414:	80 93 a8 0d 	sts	0x0DA8, r24	; 0x800da8 <my_touch+0xc>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:318
			x0=x;
    7418:	80 91 a0 0d 	lds	r24, 0x0DA0	; 0x800da0 <my_touch+0x4>
    741c:	90 91 a1 0d 	lds	r25, 0x0DA1	; 0x800da1 <my_touch+0x5>
    7420:	90 93 9d 0d 	sts	0x0D9D, r25	; 0x800d9d <my_touch+0x1>
    7424:	80 93 9c 0d 	sts	0x0D9C, r24	; 0x800d9c <my_touch>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:319
			y0=y;  	   			 
    7428:	80 91 a2 0d 	lds	r24, 0x0DA2	; 0x800da2 <my_touch+0x6>
    742c:	90 91 a3 0d 	lds	r25, 0x0DA3	; 0x800da3 <my_touch+0x7>
    7430:	90 93 9f 0d 	sts	0x0D9F, r25	; 0x800d9f <my_touch+0x3>
    7434:	80 93 9e 0d 	sts	0x0D9E, r24	; 0x800d9e <my_touch+0x2>
_Z9draw_menub():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1045

  click_x = 0;
  click_y = 0;

  my_touch.TP_Scan(0);
  if (my_touch.TP_Get_State()&TP_PRES_DOWN && redraw == false)
    7438:	80 91 a8 0d 	lds	r24, 0x0DA8	; 0x800da8 <my_touch+0xc>
    743c:	87 ff       	sbrs	r24, 7
    743e:	0e c2       	rjmp	.+1052   	; 0x785c <draw_menu(bool)+0x586>
    7440:	91 10       	cpse	r9, r1
    7442:	0c c2       	rjmp	.+1048   	; 0x785c <draw_menu(bool)+0x586>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1047
  {
    click_x = my_touch.x;
    7444:	e0 91 a0 0d 	lds	r30, 0x0DA0	; 0x800da0 <my_touch+0x4>
    7448:	f0 91 a1 0d 	lds	r31, 0x0DA1	; 0x800da1 <my_touch+0x5>
    744c:	c0 54       	subi	r28, 0x40	; 64
    744e:	df 4f       	sbci	r29, 0xFF	; 255
    7450:	f9 83       	std	Y+1, r31	; 0x01
    7452:	e8 83       	st	Y, r30
    7454:	c0 5c       	subi	r28, 0xC0	; 192
    7456:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1048
    click_y = my_touch.y;
    7458:	20 91 a2 0d 	lds	r18, 0x0DA2	; 0x800da2 <my_touch+0x6>
    745c:	30 91 a3 0d 	lds	r19, 0x0DA3	; 0x800da3 <my_touch+0x7>
    7460:	ce 53       	subi	r28, 0x3E	; 62
    7462:	df 4f       	sbci	r29, 0xFF	; 255
    7464:	39 83       	std	Y+1, r19	; 0x01
    7466:	28 83       	st	Y, r18
    7468:	c2 5c       	subi	r28, 0xC2	; 194
    746a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1051
  }

  global_x = pgm_read_word(&current->x);
    746c:	63 01       	movw	r12, r6
    746e:	36 ef       	ldi	r19, 0xF6	; 246
    7470:	c3 1a       	sub	r12, r19
    7472:	3d ef       	ldi	r19, 0xFD	; 253
    7474:	d3 0a       	sbc	r13, r19
    7476:	f6 01       	movw	r30, r12
    7478:	45 91       	lpm	r20, Z+
    747a:	54 91       	lpm	r21, Z
    747c:	c8 54       	subi	r28, 0x48	; 72
    747e:	df 4f       	sbci	r29, 0xFF	; 255
    7480:	59 83       	std	Y+1, r21	; 0x01
    7482:	48 83       	st	Y, r20
    7484:	c8 5b       	subi	r28, 0xB8	; 184
    7486:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1052
  global_y = pgm_read_word(&current->y);
    7488:	53 01       	movw	r10, r6
    748a:	54 ef       	ldi	r21, 0xF4	; 244
    748c:	a5 1a       	sub	r10, r21
    748e:	5d ef       	ldi	r21, 0xFD	; 253
    7490:	b5 0a       	sbc	r11, r21
    7492:	f5 01       	movw	r30, r10
    7494:	85 91       	lpm	r24, Z+
    7496:	94 91       	lpm	r25, Z
    7498:	c6 54       	subi	r28, 0x46	; 70
    749a:	df 4f       	sbci	r29, 0xFF	; 255
    749c:	99 83       	std	Y+1, r25	; 0x01
    749e:	88 83       	st	Y, r24
    74a0:	ca 5b       	subi	r28, 0xBA	; 186
    74a2:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1055


  rfnt = pgm_read_word(&current->redraw_class_0);
    74a4:	f3 01       	movw	r30, r6
    74a6:	ea 5e       	subi	r30, 0xEA	; 234
    74a8:	fd 4f       	sbci	r31, 0xFD	; 253
    74aa:	25 91       	lpm	r18, Z+
    74ac:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1056
  rdr = (ret_fptr(rfnt))(pgm_read_word(&current->idx), menu_args1);
    74ae:	83 01       	movw	r16, r6
    74b0:	07 5f       	subi	r16, 0xF7	; 247
    74b2:	1d 4f       	sbci	r17, 0xFD	; 253
    74b4:	f8 01       	movw	r30, r16
    74b6:	85 91       	lpm	r24, Z+
    74b8:	94 91       	lpm	r25, Z
    74ba:	cd 54       	subi	r28, 0x4D	; 77
    74bc:	df 4f       	sbci	r29, 0xFF	; 255
    74be:	68 81       	ld	r22, Y
    74c0:	c3 5b       	subi	r28, 0xB3	; 179
    74c2:	d0 40       	sbci	r29, 0x00	; 0
    74c4:	70 e0       	ldi	r23, 0x00	; 0
    74c6:	f9 01       	movw	r30, r18
    74c8:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1058
  if (rdr == 0)
    cbi(redraw_class, 0);
    74ca:	81 2c       	mov	r8, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1057
  global_y = pgm_read_word(&current->y);


  rfnt = pgm_read_word(&current->redraw_class_0);
  rdr = (ret_fptr(rfnt))(pgm_read_word(&current->idx), menu_args1);
  if (rdr == 0)
    74cc:	88 23       	and	r24, r24
    74ce:	11 f0       	breq	.+4      	; 0x74d4 <draw_menu(bool)+0x1fe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1060
    cbi(redraw_class, 0);
  else
    sbi(redraw_class, 0);
    74d0:	88 24       	eor	r8, r8
    74d2:	83 94       	inc	r8
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1062
  ///
  rfnt = pgm_read_word(&current->redraw_class_1);
    74d4:	f3 01       	movw	r30, r6
    74d6:	e8 5e       	subi	r30, 0xE8	; 232
    74d8:	fd 4f       	sbci	r31, 0xFD	; 253
    74da:	25 91       	lpm	r18, Z+
    74dc:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1063
  rdr = (ret_fptr(rfnt))(pgm_read_word(&current->idx), menu_args1);
    74de:	f8 01       	movw	r30, r16
    74e0:	85 91       	lpm	r24, Z+
    74e2:	94 91       	lpm	r25, Z
    74e4:	cd 54       	subi	r28, 0x4D	; 77
    74e6:	df 4f       	sbci	r29, 0xFF	; 255
    74e8:	68 81       	ld	r22, Y
    74ea:	c3 5b       	subi	r28, 0xB3	; 179
    74ec:	d0 40       	sbci	r29, 0x00	; 0
    74ee:	70 e0       	ldi	r23, 0x00	; 0
    74f0:	f9 01       	movw	r30, r18
    74f2:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1064
  if (rdr == 0)
    74f4:	81 11       	cpse	r24, r1
    74f6:	bf c1       	rjmp	.+894    	; 0x7876 <draw_menu(bool)+0x5a0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1065
    cbi(redraw_class, 1);
    74f8:	e8 94       	clt
    74fa:	81 f8       	bld	r8, 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1069
  else
    sbi(redraw_class, 1);
  ///
  rfnt = pgm_read_word(&current->redraw_class_2);
    74fc:	f3 01       	movw	r30, r6
    74fe:	e6 5e       	subi	r30, 0xE6	; 230
    7500:	fd 4f       	sbci	r31, 0xFD	; 253
    7502:	25 91       	lpm	r18, Z+
    7504:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1070
  rdr = (ret_fptr(rfnt))(pgm_read_word(&current->idx), menu_args1);
    7506:	f8 01       	movw	r30, r16
    7508:	85 91       	lpm	r24, Z+
    750a:	94 91       	lpm	r25, Z
    750c:	cd 54       	subi	r28, 0x4D	; 77
    750e:	df 4f       	sbci	r29, 0xFF	; 255
    7510:	68 81       	ld	r22, Y
    7512:	c3 5b       	subi	r28, 0xB3	; 179
    7514:	d0 40       	sbci	r29, 0x00	; 0
    7516:	70 e0       	ldi	r23, 0x00	; 0
    7518:	f9 01       	movw	r30, r18
    751a:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1071
  if (rdr == 0)
    751c:	81 11       	cpse	r24, r1
    751e:	ae c1       	rjmp	.+860    	; 0x787c <draw_menu(bool)+0x5a6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1072
    cbi(redraw_class, 2);
    7520:	88 2d       	mov	r24, r8
    7522:	8b 7f       	andi	r24, 0xFB	; 251
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1076
  else
    sbi(redraw_class, 2);
  ///
  if (redraw == false)
    7524:	91 10       	cpse	r9, r1
    7526:	ad c1       	rjmp	.+858    	; 0x7882 <draw_menu(bool)+0x5ac>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1077
    cbi(redraw_class, 3);
    7528:	87 7f       	andi	r24, 0xF7	; 247
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1079
  else
    sbi(redraw_class, 3);
    752a:	c5 53       	subi	r28, 0x35	; 53
    752c:	df 4f       	sbci	r29, 0xFF	; 255
    752e:	88 83       	st	Y, r24
    7530:	cb 5c       	subi	r28, 0xCB	; 203
    7532:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1082
  /////
  /////
  rdr = pgm_read_byte(&current->redraw_class);
    7534:	f3 01       	movw	r30, r6
    7536:	eb 5e       	subi	r30, 0xEB	; 235
    7538:	fd 4f       	sbci	r31, 0xFD	; 253
    753a:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1083
  if (enable_redraw(rdr, redraw_class) == true)
    753c:	c5 53       	subi	r28, 0x35	; 53
    753e:	df 4f       	sbci	r29, 0xFF	; 255
    7540:	68 81       	ld	r22, Y
    7542:	cb 5c       	subi	r28, 0xCB	; 203
    7544:	d0 40       	sbci	r29, 0x00	; 0
    7546:	0e 94 e6 22 	call	0x45cc	; 0x45cc <enable_redraw(unsigned char, unsigned char)>
    754a:	88 23       	and	r24, r24
    754c:	d9 f0       	breq	.+54     	; 0x7584 <draw_menu(bool)+0x2ae>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1085
  {
    strcpy_P(str1, pgm_read_word(&current->name));
    754e:	f3 01       	movw	r30, r6
    7550:	65 91       	lpm	r22, Z+
    7552:	74 91       	lpm	r23, Z
    7554:	ce 01       	movw	r24, r28
    7556:	01 96       	adiw	r24, 0x01	; 1
    7558:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1086
    show_string(str1, pgm_read_word(&current->x) + 5, pgm_read_word(&current->y) + 5, 2, BLACK, WHITE, 0);
    755c:	f5 01       	movw	r30, r10
    755e:	45 91       	lpm	r20, Z+
    7560:	54 91       	lpm	r21, Z
    7562:	f6 01       	movw	r30, r12
    7564:	65 91       	lpm	r22, Z+
    7566:	74 91       	lpm	r23, Z
    7568:	4b 5f       	subi	r20, 0xFB	; 251
    756a:	5f 4f       	sbci	r21, 0xFF	; 255
    756c:	6b 5f       	subi	r22, 0xFB	; 251
    756e:	7f 4f       	sbci	r23, 0xFF	; 255
    7570:	ee 24       	eor	r14, r14
    7572:	ea 94       	dec	r14
    7574:	fe 2c       	mov	r15, r14
    7576:	10 e0       	ldi	r17, 0x00	; 0
    7578:	00 e0       	ldi	r16, 0x00	; 0
    757a:	22 e0       	ldi	r18, 0x02	; 2
    757c:	ce 01       	movw	r24, r28
    757e:	01 96       	adiw	r24, 0x01	; 1
    7580:	0e 94 37 7d 	call	0xfa6e	; 0xfa6e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1041
  uint8_t redraw_class;
  uint8_t active = 0;

  current = MenuHistoryGetMenu(&menu_args1);

  click_x = 0;
    7584:	31 2c       	mov	r3, r1
    7586:	c8 53       	subi	r28, 0x38	; 56
    7588:	df 4f       	sbci	r29, 0xFF	; 255
    758a:	18 82       	st	Y, r1
    758c:	c8 5c       	subi	r28, 0xC8	; 200
    758e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1090
    strcpy_P(str1, pgm_read_word(&current->name));
    show_string(str1, pgm_read_word(&current->x) + 5, pgm_read_word(&current->y) + 5, 2, BLACK, WHITE, 0);
  }
  /// tlacitko typ 1 se prekresluje s celym menu
  /// tlacitko typ 1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_1); idx++)
    7590:	93 01       	movw	r18, r6
    7592:	2f 5f       	subi	r18, 0xFF	; 255
    7594:	3d 4f       	sbci	r19, 0xFD	; 253
    7596:	ca 54       	subi	r28, 0x4A	; 74
    7598:	df 4f       	sbci	r29, 0xFF	; 255
    759a:	39 83       	std	Y+1, r19	; 0x01
    759c:	28 83       	st	Y, r18
    759e:	c6 5b       	subi	r28, 0xB6	; 182
    75a0:	d0 40       	sbci	r29, 0x00	; 0
    75a2:	1f e0       	ldi	r17, 0x0F	; 15
    75a4:	21 2e       	mov	r2, r17
    75a6:	ca 54       	subi	r28, 0x4A	; 74
    75a8:	df 4f       	sbci	r29, 0xFF	; 255
    75aa:	e8 81       	ld	r30, Y
    75ac:	f9 81       	ldd	r31, Y+1	; 0x01
    75ae:	c6 5b       	subi	r28, 0xB6	; 182
    75b0:	d0 40       	sbci	r29, 0x00	; 0
    75b2:	84 91       	lpm	r24, Z
    75b4:	38 16       	cp	r3, r24
    75b6:	08 f0       	brcs	.+2      	; 0x75ba <draw_menu(bool)+0x2e4>
    75b8:	66 c1       	rjmp	.+716    	; 0x7886 <draw_menu(bool)+0x5b0>
    75ba:	32 9c       	mul	r3, r2
    75bc:	20 01       	movw	r4, r0
    75be:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1093
  {
    button_1 = &current->button_1[idx];
    rdr = pgm_read_byte(&button_1->redraw_class);
    75c0:	f2 01       	movw	r30, r4
    75c2:	70 96       	adiw	r30, 0x10	; 16
    75c4:	e6 0d       	add	r30, r6
    75c6:	f7 1d       	adc	r31, r7
    75c8:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1094
    if (enable_redraw(rdr, redraw_class) == true)
    75ca:	c5 53       	subi	r28, 0x35	; 53
    75cc:	df 4f       	sbci	r29, 0xFF	; 255
    75ce:	68 81       	ld	r22, Y
    75d0:	cb 5c       	subi	r28, 0xCB	; 203
    75d2:	d0 40       	sbci	r29, 0x00	; 0
    75d4:	0e 94 e6 22 	call	0x45cc	; 0x45cc <enable_redraw(unsigned char, unsigned char)>
    75d8:	88 23       	and	r24, r24
    75da:	09 f4       	brne	.+2      	; 0x75de <draw_menu(bool)+0x308>
    75dc:	43 c0       	rjmp	.+134    	; 0x7664 <draw_menu(bool)+0x38e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1096
    {
      strcpy_P(str2, pgm_read_word(&button_1->name));
    75de:	f2 01       	movw	r30, r4
    75e0:	32 96       	adiw	r30, 0x02	; 2
    75e2:	e6 0d       	add	r30, r6
    75e4:	f7 1d       	adc	r31, r7
    75e6:	65 91       	lpm	r22, Z+
    75e8:	74 91       	lpm	r23, Z
    75ea:	ce 01       	movw	r24, r28
    75ec:	8f 57       	subi	r24, 0x7F	; 127
    75ee:	9f 4f       	sbci	r25, 0xFF	; 255
    75f0:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1097
      str1[0] = 0;
    75f4:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1098
      button_click_1(global_x + pgm_read_word(&button_1->x), global_y + pgm_read_word(&button_1->y), pgm_read_word(&button_1->size_x), pgm_read_word(&button_1->size_y), pgm_read_byte(&button_1->font_size), pgm_read_byte(&button_1->font_size), str2, str1, 0);
    75f6:	f2 01       	movw	r30, r4
    75f8:	3c 96       	adiw	r30, 0x0c	; 12
    75fa:	e6 0d       	add	r30, r6
    75fc:	f7 1d       	adc	r31, r7
    75fe:	e4 90       	lpm	r14, Z
    7600:	04 91       	lpm	r16, Z
    7602:	f2 01       	movw	r30, r4
    7604:	3a 96       	adiw	r30, 0x0a	; 10
    7606:	e6 0d       	add	r30, r6
    7608:	f7 1d       	adc	r31, r7
    760a:	25 91       	lpm	r18, Z+
    760c:	34 91       	lpm	r19, Z
    760e:	f2 01       	movw	r30, r4
    7610:	38 96       	adiw	r30, 0x08	; 8
    7612:	e6 0d       	add	r30, r6
    7614:	f7 1d       	adc	r31, r7
    7616:	45 91       	lpm	r20, Z+
    7618:	54 91       	lpm	r21, Z
    761a:	f2 01       	movw	r30, r4
    761c:	36 96       	adiw	r30, 0x06	; 6
    761e:	e6 0d       	add	r30, r6
    7620:	f7 1d       	adc	r31, r7
    7622:	65 91       	lpm	r22, Z+
    7624:	74 91       	lpm	r23, Z
    7626:	f2 01       	movw	r30, r4
    7628:	34 96       	adiw	r30, 0x04	; 4
    762a:	e6 0d       	add	r30, r6
    762c:	f7 1d       	adc	r31, r7
    762e:	85 91       	lpm	r24, Z+
    7630:	94 91       	lpm	r25, Z
    7632:	c6 54       	subi	r28, 0x46	; 70
    7634:	df 4f       	sbci	r29, 0xFF	; 255
    7636:	e8 81       	ld	r30, Y
    7638:	f9 81       	ldd	r31, Y+1	; 0x01
    763a:	ca 5b       	subi	r28, 0xBA	; 186
    763c:	d0 40       	sbci	r29, 0x00	; 0
    763e:	6e 0f       	add	r22, r30
    7640:	7f 1f       	adc	r23, r31
    7642:	81 2c       	mov	r8, r1
    7644:	fe 01       	movw	r30, r28
    7646:	31 96       	adiw	r30, 0x01	; 1
    7648:	5f 01       	movw	r10, r30
    764a:	e0 58       	subi	r30, 0x80	; 128
    764c:	ff 4f       	sbci	r31, 0xFF	; 255
    764e:	6f 01       	movw	r12, r30
    7650:	c8 54       	subi	r28, 0x48	; 72
    7652:	df 4f       	sbci	r29, 0xFF	; 255
    7654:	e8 81       	ld	r30, Y
    7656:	f9 81       	ldd	r31, Y+1	; 0x01
    7658:	c8 5b       	subi	r28, 0xB8	; 184
    765a:	d0 40       	sbci	r29, 0x00	; 0
    765c:	8e 0f       	add	r24, r30
    765e:	9f 1f       	adc	r25, r31
    7660:	0e 94 a4 2a 	call	0x5548	; 0x5548 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1100
    }
    if (click_x > 0 && click_y > 0)
    7664:	c0 54       	subi	r28, 0x40	; 64
    7666:	df 4f       	sbci	r29, 0xFF	; 255
    7668:	28 81       	ld	r18, Y
    766a:	39 81       	ldd	r19, Y+1	; 0x01
    766c:	c0 5c       	subi	r28, 0xC0	; 192
    766e:	d0 40       	sbci	r29, 0x00	; 0
    7670:	23 2b       	or	r18, r19
    7672:	09 f4       	brne	.+2      	; 0x7676 <draw_menu(bool)+0x3a0>
    7674:	5b c0       	rjmp	.+182    	; 0x772c <draw_menu(bool)+0x456>
    7676:	ce 53       	subi	r28, 0x3E	; 62
    7678:	df 4f       	sbci	r29, 0xFF	; 255
    767a:	48 81       	ld	r20, Y
    767c:	59 81       	ldd	r21, Y+1	; 0x01
    767e:	c2 5c       	subi	r28, 0xC2	; 194
    7680:	d0 40       	sbci	r29, 0x00	; 0
    7682:	45 2b       	or	r20, r21
    7684:	09 f4       	brne	.+2      	; 0x7688 <draw_menu(bool)+0x3b2>
    7686:	52 c0       	rjmp	.+164    	; 0x772c <draw_menu(bool)+0x456>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1101
      if (button_click_touch(global_x + pgm_read_word(&button_1->x), global_y + pgm_read_word(&button_1->y), pgm_read_word(&button_1->size_x), pgm_read_word(&button_1->size_y), click_x, click_y) == true)
    7688:	f2 01       	movw	r30, r4
    768a:	3a 96       	adiw	r30, 0x0a	; 10
    768c:	e6 0d       	add	r30, r6
    768e:	f7 1d       	adc	r31, r7
    7690:	25 91       	lpm	r18, Z+
    7692:	34 91       	lpm	r19, Z
    7694:	f2 01       	movw	r30, r4
    7696:	38 96       	adiw	r30, 0x08	; 8
    7698:	e6 0d       	add	r30, r6
    769a:	f7 1d       	adc	r31, r7
    769c:	45 91       	lpm	r20, Z+
    769e:	54 91       	lpm	r21, Z
    76a0:	f2 01       	movw	r30, r4
    76a2:	36 96       	adiw	r30, 0x06	; 6
    76a4:	e6 0d       	add	r30, r6
    76a6:	f7 1d       	adc	r31, r7
    76a8:	65 91       	lpm	r22, Z+
    76aa:	74 91       	lpm	r23, Z
    76ac:	f2 01       	movw	r30, r4
    76ae:	34 96       	adiw	r30, 0x04	; 4
    76b0:	e6 0d       	add	r30, r6
    76b2:	f7 1d       	adc	r31, r7
    76b4:	85 91       	lpm	r24, Z+
    76b6:	94 91       	lpm	r25, Z
    76b8:	c6 54       	subi	r28, 0x46	; 70
    76ba:	df 4f       	sbci	r29, 0xFF	; 255
    76bc:	e8 81       	ld	r30, Y
    76be:	f9 81       	ldd	r31, Y+1	; 0x01
    76c0:	ca 5b       	subi	r28, 0xBA	; 186
    76c2:	d0 40       	sbci	r29, 0x00	; 0
    76c4:	6e 0f       	add	r22, r30
    76c6:	7f 1f       	adc	r23, r31
    76c8:	ce 53       	subi	r28, 0x3E	; 62
    76ca:	df 4f       	sbci	r29, 0xFF	; 255
    76cc:	e8 80       	ld	r14, Y
    76ce:	f9 80       	ldd	r15, Y+1	; 0x01
    76d0:	c2 5c       	subi	r28, 0xC2	; 194
    76d2:	d0 40       	sbci	r29, 0x00	; 0
    76d4:	c0 54       	subi	r28, 0x40	; 64
    76d6:	df 4f       	sbci	r29, 0xFF	; 255
    76d8:	08 81       	ld	r16, Y
    76da:	19 81       	ldd	r17, Y+1	; 0x01
    76dc:	c0 5c       	subi	r28, 0xC0	; 192
    76de:	d0 40       	sbci	r29, 0x00	; 0
    76e0:	c8 54       	subi	r28, 0x48	; 72
    76e2:	df 4f       	sbci	r29, 0xFF	; 255
    76e4:	e8 81       	ld	r30, Y
    76e6:	f9 81       	ldd	r31, Y+1	; 0x01
    76e8:	c8 5b       	subi	r28, 0xB8	; 184
    76ea:	d0 40       	sbci	r29, 0x00	; 0
    76ec:	8e 0f       	add	r24, r30
    76ee:	9f 1f       	adc	r25, r31
    76f0:	0e 94 70 21 	call	0x42e0	; 0x42e0 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    76f4:	18 2f       	mov	r17, r24
    76f6:	88 23       	and	r24, r24
    76f8:	c9 f0       	breq	.+50     	; 0x772c <draw_menu(bool)+0x456>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1104
      {
        //printf("menu args1: %d\n", menu_args1);
        fntargs =  pgm_read_word(&button_1->onclick);
    76fa:	f2 01       	movw	r30, r4
    76fc:	3e 96       	adiw	r30, 0x0e	; 14
    76fe:	e6 0d       	add	r30, r6
    7700:	f7 1d       	adc	r31, r7
    7702:	25 91       	lpm	r18, Z+
    7704:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1105
        ((fptr_args)fntargs)(pgm_read_byte(&button_1->args), menu_args1);
    7706:	f2 01       	movw	r30, r4
    7708:	3d 96       	adiw	r30, 0x0d	; 13
    770a:	e6 0d       	add	r30, r6
    770c:	f7 1d       	adc	r31, r7
    770e:	84 91       	lpm	r24, Z
    7710:	cd 54       	subi	r28, 0x4D	; 77
    7712:	df 4f       	sbci	r29, 0xFF	; 255
    7714:	68 81       	ld	r22, Y
    7716:	c3 5b       	subi	r28, 0xB3	; 179
    7718:	d0 40       	sbci	r29, 0x00	; 0
    771a:	70 e0       	ldi	r23, 0x00	; 0
    771c:	90 e0       	ldi	r25, 0x00	; 0
    771e:	f9 01       	movw	r30, r18
    7720:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1106
        ret = true;
    7722:	c8 53       	subi	r28, 0x38	; 56
    7724:	df 4f       	sbci	r29, 0xFF	; 255
    7726:	18 83       	st	Y, r17
    7728:	c8 5c       	subi	r28, 0xC8	; 200
    772a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1090
    strcpy_P(str1, pgm_read_word(&current->name));
    show_string(str1, pgm_read_word(&current->x) + 5, pgm_read_word(&current->y) + 5, 2, BLACK, WHITE, 0);
  }
  /// tlacitko typ 1 se prekresluje s celym menu
  /// tlacitko typ 1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_1); idx++)
    772c:	33 94       	inc	r3
    772e:	3b cf       	rjmp	.-394    	; 0x75a6 <draw_menu(bool)+0x2d0>
TP_Scan():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:206
			x=((long)XFAC*x)/10000+XOFFSET;
		    y=((long)YFAC*y)/10000+YOFFSET;
			switch(touch_rotation)
			{
				case 0:
					if(lcd_rotation == 0)
    7730:	80 91 aa 0d 	lds	r24, 0x0DAA	; 0x800daa <my_touch+0xe>
    7734:	88 23       	and	r24, r24
    7736:	09 f4       	brne	.+2      	; 0x773a <draw_menu(bool)+0x464>
    7738:	68 ce       	rjmp	.-816    	; 0x740a <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:210
					{
						break;
					}
					else if(lcd_rotation == 1)
    773a:	81 30       	cpi	r24, 0x01	; 1
    773c:	59 f4       	brne	.+22     	; 0x7754 <draw_menu(bool)+0x47e>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:280
					}
					else if(lcd_rotation == 3)
					{
						uint16_t tmp;
						tmp = x;
						x=y;
    773e:	30 93 a1 0d 	sts	0x0DA1, r19	; 0x800da1 <my_touch+0x5>
    7742:	20 93 a0 0d 	sts	0x0DA0, r18	; 0x800da0 <my_touch+0x4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:297
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
						x = wid-x;
						y = heig - y;
    7746:	80 91 a6 0d 	lds	r24, 0x0DA6	; 0x800da6 <my_touch+0xa>
    774a:	90 91 a7 0d 	lds	r25, 0x0DA7	; 0x800da7 <my_touch+0xb>
    774e:	8c 19       	sub	r24, r12
    7750:	9d 09       	sbc	r25, r13
    7752:	3d c0       	rjmp	.+122    	; 0x77ce <draw_menu(bool)+0x4f8>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:218
						tmp = x;
						x=y;
						y=tmp;
						y = heig - y;
					}
					else if(lcd_rotation == 2)
    7754:	82 30       	cpi	r24, 0x02	; 2
    7756:	59 f4       	brne	.+22     	; 0x776e <draw_menu(bool)+0x498>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:261
					}
					break;
				case 2:
					if(lcd_rotation == 0)
					{
						x = wid-x;
    7758:	80 91 a4 0d 	lds	r24, 0x0DA4	; 0x800da4 <my_touch+0x8>
    775c:	90 91 a5 0d 	lds	r25, 0x0DA5	; 0x800da5 <my_touch+0x9>
    7760:	8c 19       	sub	r24, r12
    7762:	9d 09       	sbc	r25, r13
    7764:	90 93 a1 0d 	sts	0x0DA1, r25	; 0x800da1 <my_touch+0x5>
    7768:	80 93 a0 0d 	sts	0x0DA0, r24	; 0x800da0 <my_touch+0x4>
    776c:	2a c0       	rjmp	.+84     	; 0x77c2 <draw_menu(bool)+0x4ec>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:223
					else if(lcd_rotation == 2)
					{
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 3)
    776e:	83 30       	cpi	r24, 0x03	; 3
    7770:	09 f0       	breq	.+2      	; 0x7774 <draw_menu(bool)+0x49e>
    7772:	4b ce       	rjmp	.-874    	; 0x740a <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:269
					else if(lcd_rotation == 1)
					{
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
    7774:	d0 92 a3 0d 	sts	0x0DA3, r13	; 0x800da3 <my_touch+0x7>
    7778:	c0 92 a2 0d 	sts	0x0DA2, r12	; 0x800da2 <my_touch+0x6>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:270
						x = wid-x;
    777c:	80 91 a4 0d 	lds	r24, 0x0DA4	; 0x800da4 <my_touch+0x8>
    7780:	90 91 a5 0d 	lds	r25, 0x0DA5	; 0x800da5 <my_touch+0x9>
    7784:	82 1b       	sub	r24, r18
    7786:	93 0b       	sbc	r25, r19
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:301
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 2)
					{
						x = wid-x;;
    7788:	90 93 a1 0d 	sts	0x0DA1, r25	; 0x800da1 <my_touch+0x5>
    778c:	80 93 a0 0d 	sts	0x0DA0, r24	; 0x800da0 <my_touch+0x4>
    7790:	3c ce       	rjmp	.-904    	; 0x740a <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:233
						y=tmp;
						x = wid-x;
					}
					break;
				case 1:
					if(lcd_rotation == 0)
    7792:	80 91 aa 0d 	lds	r24, 0x0DAA	; 0x800daa <my_touch+0xe>
    7796:	81 11       	cpse	r24, r1
    7798:	07 c0       	rjmp	.+14     	; 0x77a8 <draw_menu(bool)+0x4d2>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:301
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 2)
					{
						x = wid-x;;
    779a:	80 91 a4 0d 	lds	r24, 0x0DA4	; 0x800da4 <my_touch+0x8>
    779e:	90 91 a5 0d 	lds	r25, 0x0DA5	; 0x800da5 <my_touch+0x9>
    77a2:	8c 19       	sub	r24, r12
    77a4:	9d 09       	sbc	r25, r13
    77a6:	f0 cf       	rjmp	.-32     	; 0x7788 <draw_menu(bool)+0x4b2>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:237
				case 1:
					if(lcd_rotation == 0)
					{
						x = wid-x;
					}
					else if(lcd_rotation == 1)
    77a8:	81 30       	cpi	r24, 0x01	; 1
    77aa:	49 f4       	brne	.+18     	; 0x77be <draw_menu(bool)+0x4e8>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:307
					}
					else if(lcd_rotation == 3)
					{
						uint16_t tmp;
						tmp = x;
						x=y;
    77ac:	30 93 a1 0d 	sts	0x0DA1, r19	; 0x800da1 <my_touch+0x5>
    77b0:	20 93 a0 0d 	sts	0x0DA0, r18	; 0x800da0 <my_touch+0x4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:308
						y=tmp;
    77b4:	d0 92 a3 0d 	sts	0x0DA3, r13	; 0x800da3 <my_touch+0x7>
    77b8:	c0 92 a2 0d 	sts	0x0DA2, r12	; 0x800da2 <my_touch+0x6>
    77bc:	26 ce       	rjmp	.-948    	; 0x740a <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:244
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
					}
					else if(lcd_rotation == 2)
    77be:	82 30       	cpi	r24, 0x02	; 2
    77c0:	59 f4       	brne	.+22     	; 0x77d8 <draw_menu(bool)+0x502>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:288
					}
					break;
				case 3:
					if(lcd_rotation == 0)
					{
						y = heig - y;
    77c2:	80 91 a6 0d 	lds	r24, 0x0DA6	; 0x800da6 <my_touch+0xa>
    77c6:	90 91 a7 0d 	lds	r25, 0x0DA7	; 0x800da7 <my_touch+0xb>
    77ca:	82 1b       	sub	r24, r18
    77cc:	93 0b       	sbc	r25, r19
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:297
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
						x = wid-x;
						y = heig - y;
    77ce:	90 93 a3 0d 	sts	0x0DA3, r25	; 0x800da3 <my_touch+0x7>
    77d2:	80 93 a2 0d 	sts	0x0DA2, r24	; 0x800da2 <my_touch+0x6>
    77d6:	19 ce       	rjmp	.-974    	; 0x740a <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:248
					}
					else if(lcd_rotation == 2)
					{
						y = heig - y;
					}
					else if(lcd_rotation == 3)
    77d8:	83 30       	cpi	r24, 0x03	; 3
    77da:	09 f0       	breq	.+2      	; 0x77de <draw_menu(bool)+0x508>
    77dc:	16 ce       	rjmp	.-980    	; 0x740a <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:296
					{
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
						x = wid-x;
    77de:	80 91 a4 0d 	lds	r24, 0x0DA4	; 0x800da4 <my_touch+0x8>
    77e2:	90 91 a5 0d 	lds	r25, 0x0DA5	; 0x800da5 <my_touch+0x9>
    77e6:	82 1b       	sub	r24, r18
    77e8:	93 0b       	sbc	r25, r19
    77ea:	90 93 a1 0d 	sts	0x0DA1, r25	; 0x800da1 <my_touch+0x5>
    77ee:	80 93 a0 0d 	sts	0x0DA0, r24	; 0x800da0 <my_touch+0x4>
    77f2:	a9 cf       	rjmp	.-174    	; 0x7746 <draw_menu(bool)+0x470>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:259
						x = wid-x;
						y = heig - y;
					}
					break;
				case 2:
					if(lcd_rotation == 0)
    77f4:	80 91 aa 0d 	lds	r24, 0x0DAA	; 0x800daa <my_touch+0xe>
    77f8:	88 23       	and	r24, r24
    77fa:	09 f4       	brne	.+2      	; 0x77fe <draw_menu(bool)+0x528>
    77fc:	ad cf       	rjmp	.-166    	; 0x7758 <draw_menu(bool)+0x482>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:264
					{
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 1)
    77fe:	81 30       	cpi	r24, 0x01	; 1
    7800:	09 f4       	brne	.+2      	; 0x7804 <draw_menu(bool)+0x52e>
    7802:	b8 cf       	rjmp	.-144    	; 0x7774 <draw_menu(bool)+0x49e>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:276
					}
					else if(lcd_rotation == 2)
					{
						break;
					}
					else if(lcd_rotation == 3)
    7804:	83 30       	cpi	r24, 0x03	; 3
    7806:	09 f0       	breq	.+2      	; 0x780a <draw_menu(bool)+0x534>
    7808:	00 ce       	rjmp	.-1024   	; 0x740a <draw_menu(bool)+0x134>
    780a:	99 cf       	rjmp	.-206    	; 0x773e <draw_menu(bool)+0x468>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:286
						y=tmp;
						y = heig - y;
					}
					break;
				case 3:
					if(lcd_rotation == 0)
    780c:	80 91 aa 0d 	lds	r24, 0x0DAA	; 0x800daa <my_touch+0xe>
    7810:	88 23       	and	r24, r24
    7812:	b9 f2       	breq	.-82     	; 0x77c2 <draw_menu(bool)+0x4ec>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:290
					{
						y = heig - y;
					}
					else if(lcd_rotation == 1)
    7814:	81 30       	cpi	r24, 0x01	; 1
    7816:	19 f3       	breq	.-58     	; 0x77de <draw_menu(bool)+0x508>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:299
						x=y;
						y=tmp;
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 2)
    7818:	82 30       	cpi	r24, 0x02	; 2
    781a:	09 f4       	brne	.+2      	; 0x781e <draw_menu(bool)+0x548>
    781c:	be cf       	rjmp	.-132    	; 0x779a <draw_menu(bool)+0x4c4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:303
					{
						x = wid-x;;
					}
					else if(lcd_rotation == 3)
    781e:	83 30       	cpi	r24, 0x03	; 3
    7820:	09 f0       	breq	.+2      	; 0x7824 <draw_menu(bool)+0x54e>
    7822:	f3 cd       	rjmp	.-1050   	; 0x740a <draw_menu(bool)+0x134>
    7824:	c3 cf       	rjmp	.-122    	; 0x77ac <draw_menu(bool)+0x4d6>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:324
			y0=y;  	   			 
		}			   
	}
	else
	{
		if(touch_statue&TP_PRES_DOWN)
    7826:	80 91 a8 0d 	lds	r24, 0x0DA8	; 0x800da8 <my_touch+0xc>
    782a:	87 ff       	sbrs	r24, 7
    782c:	04 c0       	rjmp	.+8      	; 0x7836 <draw_menu(bool)+0x560>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:326
		{
			touch_statue&=~(1<<7);
    782e:	8f 77       	andi	r24, 0x7F	; 127
    7830:	80 93 a8 0d 	sts	0x0DA8, r24	; 0x800da8 <my_touch+0xc>
    7834:	01 ce       	rjmp	.-1022   	; 0x7438 <draw_menu(bool)+0x162>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:330
		}
		else
		{
			x0=0;
    7836:	10 92 9d 0d 	sts	0x0D9D, r1	; 0x800d9d <my_touch+0x1>
    783a:	10 92 9c 0d 	sts	0x0D9C, r1	; 0x800d9c <my_touch>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:331
			y0=0;
    783e:	10 92 9f 0d 	sts	0x0D9F, r1	; 0x800d9f <my_touch+0x3>
    7842:	10 92 9e 0d 	sts	0x0D9E, r1	; 0x800d9e <my_touch+0x2>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:332
			x=0xffff;
    7846:	8f ef       	ldi	r24, 0xFF	; 255
    7848:	9f ef       	ldi	r25, 0xFF	; 255
    784a:	90 93 a1 0d 	sts	0x0DA1, r25	; 0x800da1 <my_touch+0x5>
    784e:	80 93 a0 0d 	sts	0x0DA0, r24	; 0x800da0 <my_touch+0x4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:333
			y=0xffff;
    7852:	90 93 a3 0d 	sts	0x0DA3, r25	; 0x800da3 <my_touch+0x7>
    7856:	80 93 a2 0d 	sts	0x0DA2, r24	; 0x800da2 <my_touch+0x6>
    785a:	ee cd       	rjmp	.-1060   	; 0x7438 <draw_menu(bool)+0x162>
_Z9draw_menub():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1042
  uint8_t active = 0;

  current = MenuHistoryGetMenu(&menu_args1);

  click_x = 0;
  click_y = 0;
    785c:	ce 53       	subi	r28, 0x3E	; 62
    785e:	df 4f       	sbci	r29, 0xFF	; 255
    7860:	19 82       	std	Y+1, r1	; 0x01
    7862:	18 82       	st	Y, r1
    7864:	c2 5c       	subi	r28, 0xC2	; 194
    7866:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1041
  uint8_t redraw_class;
  uint8_t active = 0;

  current = MenuHistoryGetMenu(&menu_args1);

  click_x = 0;
    7868:	c0 54       	subi	r28, 0x40	; 64
    786a:	df 4f       	sbci	r29, 0xFF	; 255
    786c:	19 82       	std	Y+1, r1	; 0x01
    786e:	18 82       	st	Y, r1
    7870:	c0 5c       	subi	r28, 0xC0	; 192
    7872:	d0 40       	sbci	r29, 0x00	; 0
    7874:	fb cd       	rjmp	.-1034   	; 0x746c <draw_menu(bool)+0x196>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1067
  rfnt = pgm_read_word(&current->redraw_class_1);
  rdr = (ret_fptr(rfnt))(pgm_read_word(&current->idx), menu_args1);
  if (rdr == 0)
    cbi(redraw_class, 1);
  else
    sbi(redraw_class, 1);
    7876:	68 94       	set
    7878:	81 f8       	bld	r8, 1
    787a:	40 ce       	rjmp	.-896    	; 0x74fc <draw_menu(bool)+0x226>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1074
  rfnt = pgm_read_word(&current->redraw_class_2);
  rdr = (ret_fptr(rfnt))(pgm_read_word(&current->idx), menu_args1);
  if (rdr == 0)
    cbi(redraw_class, 2);
  else
    sbi(redraw_class, 2);
    787c:	88 2d       	mov	r24, r8
    787e:	84 60       	ori	r24, 0x04	; 4
    7880:	51 ce       	rjmp	.-862    	; 0x7524 <draw_menu(bool)+0x24e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1079
  ///
  if (redraw == false)
    cbi(redraw_class, 3);
  else
    sbi(redraw_class, 3);
    7882:	88 60       	ori	r24, 0x08	; 8
    7884:	52 ce       	rjmp	.-860    	; 0x752a <draw_menu(bool)+0x254>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1109
        fntargs =  pgm_read_word(&button_1->onclick);
        ((fptr_args)fntargs)(pgm_read_byte(&button_1->args), menu_args1);
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
    7886:	c8 53       	subi	r28, 0x38	; 56
    7888:	df 4f       	sbci	r29, 0xFF	; 255
    788a:	f8 81       	ld	r31, Y
    788c:	c8 5c       	subi	r28, 0xC8	; 200
    788e:	d0 40       	sbci	r29, 0x00	; 0
    7890:	f1 11       	cpse	r31, r1
    7892:	0c 94 bc 4a 	jmp	0x9578	; 0x9578 <draw_menu(bool)+0x22a2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1111
  /// tlacitko typ 2
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_2); idx++)
    7896:	91 2c       	mov	r9, r1
    7898:	93 01       	movw	r18, r6
    789a:	2e 5f       	subi	r18, 0xFE	; 254
    789c:	3d 4f       	sbci	r19, 0xFD	; 253
    789e:	ca 54       	subi	r28, 0x4A	; 74
    78a0:	df 4f       	sbci	r29, 0xFF	; 255
    78a2:	39 83       	std	Y+1, r19	; 0x01
    78a4:	28 83       	st	Y, r18
    78a6:	c6 5b       	subi	r28, 0xB6	; 182
    78a8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1117
  {
    button_2 = &current->button_2[idx];
    rdr = pgm_read_byte(&button_2->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      strcpy_P(str2, pgm_read_word(&button_2->name));
    78aa:	1e 01       	movw	r2, r28
    78ac:	31 e8       	ldi	r19, 0x81	; 129
    78ae:	23 0e       	add	r2, r19
    78b0:	31 1c       	adc	r3, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1111
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
  /// tlacitko typ 2
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_2); idx++)
    78b2:	ca 54       	subi	r28, 0x4A	; 74
    78b4:	df 4f       	sbci	r29, 0xFF	; 255
    78b6:	e8 81       	ld	r30, Y
    78b8:	f9 81       	ldd	r31, Y+1	; 0x01
    78ba:	c6 5b       	subi	r28, 0xB6	; 182
    78bc:	d0 40       	sbci	r29, 0x00	; 0
    78be:	84 91       	lpm	r24, Z
    78c0:	98 16       	cp	r9, r24
    78c2:	08 f0       	brcs	.+2      	; 0x78c6 <draw_menu(bool)+0x5f0>
    78c4:	f6 c0       	rjmp	.+492    	; 0x7ab2 <draw_menu(bool)+0x7dc>
    78c6:	f5 e1       	ldi	r31, 0x15	; 21
    78c8:	9f 9e       	mul	r9, r31
    78ca:	20 01       	movw	r4, r0
    78cc:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1114
  {
    button_2 = &current->button_2[idx];
    rdr = pgm_read_byte(&button_2->redraw_class);
    78ce:	f2 01       	movw	r30, r4
    78d0:	e4 55       	subi	r30, 0x54	; 84
    78d2:	ff 4f       	sbci	r31, 0xFF	; 255
    78d4:	e6 0d       	add	r30, r6
    78d6:	f7 1d       	adc	r31, r7
    78d8:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1115
    if (enable_redraw(rdr, redraw_class) == true)
    78da:	c5 53       	subi	r28, 0x35	; 53
    78dc:	df 4f       	sbci	r29, 0xFF	; 255
    78de:	68 81       	ld	r22, Y
    78e0:	cb 5c       	subi	r28, 0xCB	; 203
    78e2:	d0 40       	sbci	r29, 0x00	; 0
    78e4:	0e 94 e6 22 	call	0x45cc	; 0x45cc <enable_redraw(unsigned char, unsigned char)>
    78e8:	88 23       	and	r24, r24
    78ea:	09 f4       	brne	.+2      	; 0x78ee <draw_menu(bool)+0x618>
    78ec:	76 c0       	rjmp	.+236    	; 0x79da <draw_menu(bool)+0x704>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1117
    {
      strcpy_P(str2, pgm_read_word(&button_2->name));
    78ee:	f2 01       	movw	r30, r4
    78f0:	e8 56       	subi	r30, 0x68	; 104
    78f2:	ff 4f       	sbci	r31, 0xFF	; 255
    78f4:	e6 0d       	add	r30, r6
    78f6:	f7 1d       	adc	r31, r7
    78f8:	65 91       	lpm	r22, Z+
    78fa:	74 91       	lpm	r23, Z
    78fc:	c1 01       	movw	r24, r2
    78fe:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1118
      rfnt = pgm_read_word(&button_2->get_status_fnt);
    7902:	f2 01       	movw	r30, r4
    7904:	e6 55       	subi	r30, 0x56	; 86
    7906:	ff 4f       	sbci	r31, 0xFF	; 255
    7908:	e6 0d       	add	r30, r6
    790a:	f7 1d       	adc	r31, r7
    790c:	25 91       	lpm	r18, Z+
    790e:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1119
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1);
    7910:	f2 01       	movw	r30, r4
    7912:	e9 55       	subi	r30, 0x59	; 89
    7914:	ff 4f       	sbci	r31, 0xFF	; 255
    7916:	e6 0d       	add	r30, r6
    7918:	f7 1d       	adc	r31, r7
    791a:	84 91       	lpm	r24, Z
    791c:	cd 54       	subi	r28, 0x4D	; 77
    791e:	df 4f       	sbci	r29, 0xFF	; 255
    7920:	68 81       	ld	r22, Y
    7922:	c3 5b       	subi	r28, 0xB3	; 179
    7924:	d0 40       	sbci	r29, 0x00	; 0
    7926:	70 e0       	ldi	r23, 0x00	; 0
    7928:	90 e0       	ldi	r25, 0x00	; 0
    792a:	f9 01       	movw	r30, r18
    792c:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1120
      str1[0] = 0;
    792e:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1125
      button_click_2( global_x + pgm_read_word(&button_2->x), \
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
                      pgm_read_word(&button_2->size_y), pgm_read_byte(&button_2->font_size), 0,  \
                      pgm_read_word(&button_2->color_active), \
                      pgm_read_word(&button_2->color_inactive), state,  str2, str1);
    7930:	f2 01       	movw	r30, r4
    7932:	eb 55       	subi	r30, 0x5B	; 91
    7934:	ff 4f       	sbci	r31, 0xFF	; 255
    7936:	e6 0d       	add	r30, r6
    7938:	f7 1d       	adc	r31, r7
    793a:	a5 90       	lpm	r10, Z+
    793c:	b4 90       	lpm	r11, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1124
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1);
      str1[0] = 0;
      button_click_2( global_x + pgm_read_word(&button_2->x), \
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
                      pgm_read_word(&button_2->size_y), pgm_read_byte(&button_2->font_size), 0,  \
                      pgm_read_word(&button_2->color_active), \
    793e:	f2 01       	movw	r30, r4
    7940:	ed 55       	subi	r30, 0x5D	; 93
    7942:	ff 4f       	sbci	r31, 0xFF	; 255
    7944:	e6 0d       	add	r30, r6
    7946:	f7 1d       	adc	r31, r7
    7948:	c5 90       	lpm	r12, Z+
    794a:	d4 90       	lpm	r13, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1123
      rfnt = pgm_read_word(&button_2->get_status_fnt);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1);
      str1[0] = 0;
      button_click_2( global_x + pgm_read_word(&button_2->x), \
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
                      pgm_read_word(&button_2->size_y), pgm_read_byte(&button_2->font_size), 0,  \
    794c:	82 01       	movw	r16, r4
    794e:	0e 55       	subi	r16, 0x5E	; 94
    7950:	1f 4f       	sbci	r17, 0xFF	; 255
    7952:	06 0d       	add	r16, r6
    7954:	17 1d       	adc	r17, r7
    7956:	f8 01       	movw	r30, r16
    7958:	04 91       	lpm	r16, Z
    795a:	f2 01       	movw	r30, r4
    795c:	e0 56       	subi	r30, 0x60	; 96
    795e:	ff 4f       	sbci	r31, 0xFF	; 255
    7960:	e6 0d       	add	r30, r6
    7962:	f7 1d       	adc	r31, r7
    7964:	25 91       	lpm	r18, Z+
    7966:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1122
      strcpy_P(str2, pgm_read_word(&button_2->name));
      rfnt = pgm_read_word(&button_2->get_status_fnt);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1);
      str1[0] = 0;
      button_click_2( global_x + pgm_read_word(&button_2->x), \
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
    7968:	f2 01       	movw	r30, r4
    796a:	e2 56       	subi	r30, 0x62	; 98
    796c:	ff 4f       	sbci	r31, 0xFF	; 255
    796e:	e6 0d       	add	r30, r6
    7970:	f7 1d       	adc	r31, r7
    7972:	45 91       	lpm	r20, Z+
    7974:	54 91       	lpm	r21, Z
    7976:	f2 01       	movw	r30, r4
    7978:	e4 56       	subi	r30, 0x64	; 100
    797a:	ff 4f       	sbci	r31, 0xFF	; 255
    797c:	e6 0d       	add	r30, r6
    797e:	f7 1d       	adc	r31, r7
    7980:	65 91       	lpm	r22, Z+
    7982:	74 91       	lpm	r23, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1121
    {
      strcpy_P(str2, pgm_read_word(&button_2->name));
      rfnt = pgm_read_word(&button_2->get_status_fnt);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1);
      str1[0] = 0;
      button_click_2( global_x + pgm_read_word(&button_2->x), \
    7984:	f2 01       	movw	r30, r4
    7986:	e6 56       	subi	r30, 0x66	; 102
    7988:	ff 4f       	sbci	r31, 0xFF	; 255
    798a:	e6 0d       	add	r30, r6
    798c:	f7 1d       	adc	r31, r7
    798e:	a5 91       	lpm	r26, Z+
    7990:	b4 91       	lpm	r27, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1119
    rdr = pgm_read_byte(&button_2->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      strcpy_P(str2, pgm_read_word(&button_2->name));
      rfnt = pgm_read_word(&button_2->get_status_fnt);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1);
    7992:	88 24       	eor	r8, r8
    7994:	83 94       	inc	r8
    7996:	81 11       	cpse	r24, r1
    7998:	01 c0       	rjmp	.+2      	; 0x799c <draw_menu(bool)+0x6c6>
    799a:	81 2c       	mov	r8, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1121
      str1[0] = 0;
      button_click_2( global_x + pgm_read_word(&button_2->x), \
    799c:	c6 54       	subi	r28, 0x46	; 70
    799e:	df 4f       	sbci	r29, 0xFF	; 255
    79a0:	88 81       	ld	r24, Y
    79a2:	99 81       	ldd	r25, Y+1	; 0x01
    79a4:	ca 5b       	subi	r28, 0xBA	; 186
    79a6:	d0 40       	sbci	r29, 0x00	; 0
    79a8:	68 0f       	add	r22, r24
    79aa:	79 1f       	adc	r23, r25
    79ac:	e1 e0       	ldi	r30, 0x01	; 1
    79ae:	f0 e0       	ldi	r31, 0x00	; 0
    79b0:	ec 0f       	add	r30, r28
    79b2:	fd 1f       	adc	r31, r29
    79b4:	ff 93       	push	r31
    79b6:	ef 93       	push	r30
    79b8:	3f 92       	push	r3
    79ba:	2f 92       	push	r2
    79bc:	e1 2c       	mov	r14, r1
    79be:	c8 54       	subi	r28, 0x48	; 72
    79c0:	df 4f       	sbci	r29, 0xFF	; 255
    79c2:	88 81       	ld	r24, Y
    79c4:	99 81       	ldd	r25, Y+1	; 0x01
    79c6:	c8 5b       	subi	r28, 0xB8	; 184
    79c8:	d0 40       	sbci	r29, 0x00	; 0
    79ca:	8a 0f       	add	r24, r26
    79cc:	9b 1f       	adc	r25, r27
    79ce:	0e 94 bd 29 	call	0x537a	; 0x537a <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)>
    79d2:	0f 90       	pop	r0
    79d4:	0f 90       	pop	r0
    79d6:	0f 90       	pop	r0
    79d8:	0f 90       	pop	r0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1127
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
                      pgm_read_word(&button_2->size_y), pgm_read_byte(&button_2->font_size), 0,  \
                      pgm_read_word(&button_2->color_active), \
                      pgm_read_word(&button_2->color_inactive), state,  str2, str1);
    }
    if (click_x > 0 && click_y > 0)
    79da:	c0 54       	subi	r28, 0x40	; 64
    79dc:	df 4f       	sbci	r29, 0xFF	; 255
    79de:	28 81       	ld	r18, Y
    79e0:	39 81       	ldd	r19, Y+1	; 0x01
    79e2:	c0 5c       	subi	r28, 0xC0	; 192
    79e4:	d0 40       	sbci	r29, 0x00	; 0
    79e6:	23 2b       	or	r18, r19
    79e8:	09 f4       	brne	.+2      	; 0x79ec <draw_menu(bool)+0x716>
    79ea:	61 c0       	rjmp	.+194    	; 0x7aae <draw_menu(bool)+0x7d8>
    79ec:	ce 53       	subi	r28, 0x3E	; 62
    79ee:	df 4f       	sbci	r29, 0xFF	; 255
    79f0:	48 81       	ld	r20, Y
    79f2:	59 81       	ldd	r21, Y+1	; 0x01
    79f4:	c2 5c       	subi	r28, 0xC2	; 194
    79f6:	d0 40       	sbci	r29, 0x00	; 0
    79f8:	45 2b       	or	r20, r21
    79fa:	09 f4       	brne	.+2      	; 0x79fe <draw_menu(bool)+0x728>
    79fc:	58 c0       	rjmp	.+176    	; 0x7aae <draw_menu(bool)+0x7d8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1128
      if (button_click_touch(global_x + pgm_read_word(&button_2->x), global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), pgm_read_word(&button_2->size_y), click_x, click_y) == true)
    79fe:	f2 01       	movw	r30, r4
    7a00:	e0 56       	subi	r30, 0x60	; 96
    7a02:	ff 4f       	sbci	r31, 0xFF	; 255
    7a04:	e6 0d       	add	r30, r6
    7a06:	f7 1d       	adc	r31, r7
    7a08:	25 91       	lpm	r18, Z+
    7a0a:	34 91       	lpm	r19, Z
    7a0c:	f2 01       	movw	r30, r4
    7a0e:	e2 56       	subi	r30, 0x62	; 98
    7a10:	ff 4f       	sbci	r31, 0xFF	; 255
    7a12:	e6 0d       	add	r30, r6
    7a14:	f7 1d       	adc	r31, r7
    7a16:	45 91       	lpm	r20, Z+
    7a18:	54 91       	lpm	r21, Z
    7a1a:	f2 01       	movw	r30, r4
    7a1c:	e4 56       	subi	r30, 0x64	; 100
    7a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    7a20:	e6 0d       	add	r30, r6
    7a22:	f7 1d       	adc	r31, r7
    7a24:	65 91       	lpm	r22, Z+
    7a26:	74 91       	lpm	r23, Z
    7a28:	f2 01       	movw	r30, r4
    7a2a:	e6 56       	subi	r30, 0x66	; 102
    7a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    7a2e:	e6 0d       	add	r30, r6
    7a30:	f7 1d       	adc	r31, r7
    7a32:	85 91       	lpm	r24, Z+
    7a34:	94 91       	lpm	r25, Z
    7a36:	c6 54       	subi	r28, 0x46	; 70
    7a38:	df 4f       	sbci	r29, 0xFF	; 255
    7a3a:	e8 81       	ld	r30, Y
    7a3c:	f9 81       	ldd	r31, Y+1	; 0x01
    7a3e:	ca 5b       	subi	r28, 0xBA	; 186
    7a40:	d0 40       	sbci	r29, 0x00	; 0
    7a42:	6e 0f       	add	r22, r30
    7a44:	7f 1f       	adc	r23, r31
    7a46:	ce 53       	subi	r28, 0x3E	; 62
    7a48:	df 4f       	sbci	r29, 0xFF	; 255
    7a4a:	e8 80       	ld	r14, Y
    7a4c:	f9 80       	ldd	r15, Y+1	; 0x01
    7a4e:	c2 5c       	subi	r28, 0xC2	; 194
    7a50:	d0 40       	sbci	r29, 0x00	; 0
    7a52:	c0 54       	subi	r28, 0x40	; 64
    7a54:	df 4f       	sbci	r29, 0xFF	; 255
    7a56:	08 81       	ld	r16, Y
    7a58:	19 81       	ldd	r17, Y+1	; 0x01
    7a5a:	c0 5c       	subi	r28, 0xC0	; 192
    7a5c:	d0 40       	sbci	r29, 0x00	; 0
    7a5e:	c8 54       	subi	r28, 0x48	; 72
    7a60:	df 4f       	sbci	r29, 0xFF	; 255
    7a62:	e8 81       	ld	r30, Y
    7a64:	f9 81       	ldd	r31, Y+1	; 0x01
    7a66:	c8 5b       	subi	r28, 0xB8	; 184
    7a68:	d0 40       	sbci	r29, 0x00	; 0
    7a6a:	8e 0f       	add	r24, r30
    7a6c:	9f 1f       	adc	r25, r31
    7a6e:	0e 94 70 21 	call	0x42e0	; 0x42e0 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    7a72:	18 2f       	mov	r17, r24
    7a74:	88 23       	and	r24, r24
    7a76:	d9 f0       	breq	.+54     	; 0x7aae <draw_menu(bool)+0x7d8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1130
      {
        fntargs =  pgm_read_word(&button_2->onclick);
    7a78:	f2 01       	movw	r30, r4
    7a7a:	e8 55       	subi	r30, 0x58	; 88
    7a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    7a7e:	e6 0d       	add	r30, r6
    7a80:	f7 1d       	adc	r31, r7
    7a82:	25 91       	lpm	r18, Z+
    7a84:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1131
        ((fptr_args)fntargs)(pgm_read_byte(&button_2->args), menu_args1);
    7a86:	f2 01       	movw	r30, r4
    7a88:	e9 55       	subi	r30, 0x59	; 89
    7a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    7a8c:	e6 0d       	add	r30, r6
    7a8e:	f7 1d       	adc	r31, r7
    7a90:	84 91       	lpm	r24, Z
    7a92:	cd 54       	subi	r28, 0x4D	; 77
    7a94:	df 4f       	sbci	r29, 0xFF	; 255
    7a96:	68 81       	ld	r22, Y
    7a98:	c3 5b       	subi	r28, 0xB3	; 179
    7a9a:	d0 40       	sbci	r29, 0x00	; 0
    7a9c:	70 e0       	ldi	r23, 0x00	; 0
    7a9e:	90 e0       	ldi	r25, 0x00	; 0
    7aa0:	f9 01       	movw	r30, r18
    7aa2:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1132
        ret = true;
    7aa4:	c8 53       	subi	r28, 0x38	; 56
    7aa6:	df 4f       	sbci	r29, 0xFF	; 255
    7aa8:	18 83       	st	Y, r17
    7aaa:	c8 5c       	subi	r28, 0xC8	; 200
    7aac:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1111
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
  /// tlacitko typ 2
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_2); idx++)
    7aae:	93 94       	inc	r9
    7ab0:	00 cf       	rjmp	.-512    	; 0x78b2 <draw_menu(bool)+0x5dc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1135
        fntargs =  pgm_read_word(&button_2->onclick);
        ((fptr_args)fntargs)(pgm_read_byte(&button_2->args), menu_args1);
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
    7ab2:	c8 53       	subi	r28, 0x38	; 56
    7ab4:	df 4f       	sbci	r29, 0xFF	; 255
    7ab6:	f8 81       	ld	r31, Y
    7ab8:	c8 5c       	subi	r28, 0xC8	; 200
    7aba:	d0 40       	sbci	r29, 0x00	; 0
    7abc:	f1 11       	cpse	r31, r1
    7abe:	0c 94 bc 4a 	jmp	0x9578	; 0x9578 <draw_menu(bool)+0x22a2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1137
  /// menu programy
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_function_1); idx++)
    7ac2:	b1 2c       	mov	r11, r1
    7ac4:	43 01       	movw	r8, r6
    7ac6:	2d ef       	ldi	r18, 0xFD	; 253
    7ac8:	82 1a       	sub	r8, r18
    7aca:	92 0a       	sbc	r9, r18
    7acc:	be e0       	ldi	r27, 0x0E	; 14
    7ace:	ab 2e       	mov	r10, r27
    7ad0:	f4 01       	movw	r30, r8
    7ad2:	84 91       	lpm	r24, Z
    7ad4:	b8 16       	cp	r11, r24
    7ad6:	08 f0       	brcs	.+2      	; 0x7ada <draw_menu(bool)+0x804>
    7ad8:	aa c0       	rjmp	.+340    	; 0x7c2e <draw_menu(bool)+0x958>
    7ada:	ba 9c       	mul	r11, r10
    7adc:	60 01       	movw	r12, r0
    7ade:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1140
  {
    function_1 = &current->function_1[idx];
    rdr = pgm_read_byte(&function_1->redraw_class);
    7ae0:	f6 01       	movw	r30, r12
    7ae2:	e4 5f       	subi	r30, 0xF4	; 244
    7ae4:	fe 4f       	sbci	r31, 0xFE	; 254
    7ae6:	e6 0d       	add	r30, r6
    7ae8:	f7 1d       	adc	r31, r7
    7aea:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1141
    if (enable_redraw(rdr, redraw_class) == true)
    7aec:	c5 53       	subi	r28, 0x35	; 53
    7aee:	df 4f       	sbci	r29, 0xFF	; 255
    7af0:	68 81       	ld	r22, Y
    7af2:	cb 5c       	subi	r28, 0xCB	; 203
    7af4:	d0 40       	sbci	r29, 0x00	; 0
    7af6:	0e 94 e6 22 	call	0x45cc	; 0x45cc <enable_redraw(unsigned char, unsigned char)>
    7afa:	88 23       	and	r24, r24
    7afc:	09 f4       	brne	.+2      	; 0x7b00 <draw_menu(bool)+0x82a>
    7afe:	43 c0       	rjmp	.+134    	; 0x7b86 <draw_menu(bool)+0x8b0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1143
    {
      fnt_coordinate_xy =  pgm_read_dword(&function_1->fnt_coordinate_xy);
    7b00:	f6 01       	movw	r30, r12
    7b02:	ea 5f       	subi	r30, 0xFA	; 250
    7b04:	fe 4f       	sbci	r31, 0xFE	; 254
    7b06:	e6 0d       	add	r30, r6
    7b08:	f7 1d       	adc	r31, r7
    7b0a:	25 90       	lpm	r2, Z+
    7b0c:	35 90       	lpm	r3, Z+
    7b0e:	45 90       	lpm	r4, Z+
    7b10:	54 90       	lpm	r5, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1144
      ((fptr_coordinate_xy)fnt_coordinate_xy)(global_x + pgm_read_word(&function_1->x), global_y + pgm_read_word(&function_1->y), pgm_read_word(&function_1->size_x), pgm_read_word(&function_1->size_y), pgm_read_word(&function_1->args), menu_args1);
    7b12:	f6 01       	movw	r30, r12
    7b14:	eb 5f       	subi	r30, 0xFB	; 251
    7b16:	fe 4f       	sbci	r31, 0xFE	; 254
    7b18:	e6 0d       	add	r30, r6
    7b1a:	f7 1d       	adc	r31, r7
    7b1c:	05 91       	lpm	r16, Z+
    7b1e:	14 91       	lpm	r17, Z
    7b20:	f6 01       	movw	r30, r12
    7b22:	e6 5f       	subi	r30, 0xF6	; 246
    7b24:	fe 4f       	sbci	r31, 0xFE	; 254
    7b26:	e6 0d       	add	r30, r6
    7b28:	f7 1d       	adc	r31, r7
    7b2a:	25 91       	lpm	r18, Z+
    7b2c:	34 91       	lpm	r19, Z
    7b2e:	f6 01       	movw	r30, r12
    7b30:	e8 5f       	subi	r30, 0xF8	; 248
    7b32:	fe 4f       	sbci	r31, 0xFE	; 254
    7b34:	e6 0d       	add	r30, r6
    7b36:	f7 1d       	adc	r31, r7
    7b38:	45 91       	lpm	r20, Z+
    7b3a:	54 91       	lpm	r21, Z
    7b3c:	f6 01       	movw	r30, r12
    7b3e:	ed 5f       	subi	r30, 0xFD	; 253
    7b40:	fe 4f       	sbci	r31, 0xFE	; 254
    7b42:	e6 0d       	add	r30, r6
    7b44:	f7 1d       	adc	r31, r7
    7b46:	65 91       	lpm	r22, Z+
    7b48:	74 91       	lpm	r23, Z
    7b4a:	f6 01       	movw	r30, r12
    7b4c:	ef 5f       	subi	r30, 0xFF	; 255
    7b4e:	fe 4f       	sbci	r31, 0xFE	; 254
    7b50:	e6 0d       	add	r30, r6
    7b52:	f7 1d       	adc	r31, r7
    7b54:	85 91       	lpm	r24, Z+
    7b56:	94 91       	lpm	r25, Z
    7b58:	c6 54       	subi	r28, 0x46	; 70
    7b5a:	df 4f       	sbci	r29, 0xFF	; 255
    7b5c:	e8 81       	ld	r30, Y
    7b5e:	f9 81       	ldd	r31, Y+1	; 0x01
    7b60:	ca 5b       	subi	r28, 0xBA	; 186
    7b62:	d0 40       	sbci	r29, 0x00	; 0
    7b64:	6e 0f       	add	r22, r30
    7b66:	7f 1f       	adc	r23, r31
    7b68:	cd 54       	subi	r28, 0x4D	; 77
    7b6a:	df 4f       	sbci	r29, 0xFF	; 255
    7b6c:	e8 80       	ld	r14, Y
    7b6e:	c3 5b       	subi	r28, 0xB3	; 179
    7b70:	d0 40       	sbci	r29, 0x00	; 0
    7b72:	c8 54       	subi	r28, 0x48	; 72
    7b74:	df 4f       	sbci	r29, 0xFF	; 255
    7b76:	e8 81       	ld	r30, Y
    7b78:	f9 81       	ldd	r31, Y+1	; 0x01
    7b7a:	c8 5b       	subi	r28, 0xB8	; 184
    7b7c:	d0 40       	sbci	r29, 0x00	; 0
    7b7e:	8e 0f       	add	r24, r30
    7b80:	9f 1f       	adc	r25, r31
    7b82:	f1 01       	movw	r30, r2
    7b84:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1146
    }
    if (click_x > 0 && click_y > 0)
    7b86:	c0 54       	subi	r28, 0x40	; 64
    7b88:	df 4f       	sbci	r29, 0xFF	; 255
    7b8a:	28 81       	ld	r18, Y
    7b8c:	39 81       	ldd	r19, Y+1	; 0x01
    7b8e:	c0 5c       	subi	r28, 0xC0	; 192
    7b90:	d0 40       	sbci	r29, 0x00	; 0
    7b92:	23 2b       	or	r18, r19
    7b94:	09 f4       	brne	.+2      	; 0x7b98 <draw_menu(bool)+0x8c2>
    7b96:	49 c0       	rjmp	.+146    	; 0x7c2a <draw_menu(bool)+0x954>
    7b98:	ce 53       	subi	r28, 0x3E	; 62
    7b9a:	df 4f       	sbci	r29, 0xFF	; 255
    7b9c:	48 81       	ld	r20, Y
    7b9e:	59 81       	ldd	r21, Y+1	; 0x01
    7ba0:	c2 5c       	subi	r28, 0xC2	; 194
    7ba2:	d0 40       	sbci	r29, 0x00	; 0
    7ba4:	45 2b       	or	r20, r21
    7ba6:	09 f4       	brne	.+2      	; 0x7baa <draw_menu(bool)+0x8d4>
    7ba8:	40 c0       	rjmp	.+128    	; 0x7c2a <draw_menu(bool)+0x954>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1147
      if (button_click_touch(global_x + pgm_read_word(&function_1->x), global_y + pgm_read_word(&function_1->y), pgm_read_word(&function_1->size_x), pgm_read_word(&function_1->size_y), click_x, click_y) == true)
    7baa:	f6 01       	movw	r30, r12
    7bac:	e6 5f       	subi	r30, 0xF6	; 246
    7bae:	fe 4f       	sbci	r31, 0xFE	; 254
    7bb0:	e6 0d       	add	r30, r6
    7bb2:	f7 1d       	adc	r31, r7
    7bb4:	25 91       	lpm	r18, Z+
    7bb6:	34 91       	lpm	r19, Z
    7bb8:	f6 01       	movw	r30, r12
    7bba:	e8 5f       	subi	r30, 0xF8	; 248
    7bbc:	fe 4f       	sbci	r31, 0xFE	; 254
    7bbe:	e6 0d       	add	r30, r6
    7bc0:	f7 1d       	adc	r31, r7
    7bc2:	45 91       	lpm	r20, Z+
    7bc4:	54 91       	lpm	r21, Z
    7bc6:	f6 01       	movw	r30, r12
    7bc8:	ed 5f       	subi	r30, 0xFD	; 253
    7bca:	fe 4f       	sbci	r31, 0xFE	; 254
    7bcc:	e6 0d       	add	r30, r6
    7bce:	f7 1d       	adc	r31, r7
    7bd0:	65 91       	lpm	r22, Z+
    7bd2:	74 91       	lpm	r23, Z
    7bd4:	f6 01       	movw	r30, r12
    7bd6:	ef 5f       	subi	r30, 0xFF	; 255
    7bd8:	fe 4f       	sbci	r31, 0xFE	; 254
    7bda:	e6 0d       	add	r30, r6
    7bdc:	f7 1d       	adc	r31, r7
    7bde:	85 91       	lpm	r24, Z+
    7be0:	94 91       	lpm	r25, Z
    7be2:	c6 54       	subi	r28, 0x46	; 70
    7be4:	df 4f       	sbci	r29, 0xFF	; 255
    7be6:	e8 81       	ld	r30, Y
    7be8:	f9 81       	ldd	r31, Y+1	; 0x01
    7bea:	ca 5b       	subi	r28, 0xBA	; 186
    7bec:	d0 40       	sbci	r29, 0x00	; 0
    7bee:	6e 0f       	add	r22, r30
    7bf0:	7f 1f       	adc	r23, r31
    7bf2:	ce 53       	subi	r28, 0x3E	; 62
    7bf4:	df 4f       	sbci	r29, 0xFF	; 255
    7bf6:	e8 80       	ld	r14, Y
    7bf8:	f9 80       	ldd	r15, Y+1	; 0x01
    7bfa:	c2 5c       	subi	r28, 0xC2	; 194
    7bfc:	d0 40       	sbci	r29, 0x00	; 0
    7bfe:	c0 54       	subi	r28, 0x40	; 64
    7c00:	df 4f       	sbci	r29, 0xFF	; 255
    7c02:	08 81       	ld	r16, Y
    7c04:	19 81       	ldd	r17, Y+1	; 0x01
    7c06:	c0 5c       	subi	r28, 0xC0	; 192
    7c08:	d0 40       	sbci	r29, 0x00	; 0
    7c0a:	c8 54       	subi	r28, 0x48	; 72
    7c0c:	df 4f       	sbci	r29, 0xFF	; 255
    7c0e:	e8 81       	ld	r30, Y
    7c10:	f9 81       	ldd	r31, Y+1	; 0x01
    7c12:	c8 5b       	subi	r28, 0xB8	; 184
    7c14:	d0 40       	sbci	r29, 0x00	; 0
    7c16:	8e 0f       	add	r24, r30
    7c18:	9f 1f       	adc	r25, r31
    7c1a:	0e 94 70 21 	call	0x42e0	; 0x42e0 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    7c1e:	88 23       	and	r24, r24
    7c20:	21 f0       	breq	.+8      	; 0x7c2a <draw_menu(bool)+0x954>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1152
      {
        //fntargs =  pgm_read_word(&function_1->onclick);
        //((fptr_args)fntargs)(pgm_read_byte(&function_1->args), menu_args1);
        //ret = true;
        printf("mrdka funkce\n");
    7c22:	82 e5       	ldi	r24, 0x52	; 82
    7c24:	93 e0       	ldi	r25, 0x03	; 3
    7c26:	0e 94 a8 af 	call	0x15f50	; 0x15f50 <puts>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1137
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
  /// menu programy
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_function_1); idx++)
    7c2a:	b3 94       	inc	r11
    7c2c:	51 cf       	rjmp	.-350    	; 0x7ad0 <draw_menu(bool)+0x7fa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1158
      }
  }
  if (ret == true)  goto draw_menu_end;
  /////
  /// menu switch_1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_switch_1); idx++)
    7c2e:	ca 54       	subi	r28, 0x4A	; 74
    7c30:	df 4f       	sbci	r29, 0xFF	; 255
    7c32:	18 82       	st	Y, r1
    7c34:	c6 5b       	subi	r28, 0xB6	; 182
    7c36:	d0 40       	sbci	r29, 0x00	; 0
    7c38:	93 01       	movw	r18, r6
    7c3a:	2c 5f       	subi	r18, 0xFC	; 252
    7c3c:	3d 4f       	sbci	r19, 0xFD	; 253
    7c3e:	cc 53       	subi	r28, 0x3C	; 60
    7c40:	df 4f       	sbci	r29, 0xFF	; 255
    7c42:	39 83       	std	Y+1, r19	; 0x01
    7c44:	28 83       	st	Y, r18
    7c46:	c4 5c       	subi	r28, 0xC4	; 196
    7c48:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1164
  {
    switch_1 = &current->switch_1[idx];
    rdr = pgm_read_byte(&switch_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      strcpy_P(str2, pgm_read_word(&switch_1->name));
    7c4a:	4e 01       	movw	r8, r28
    7c4c:	31 e8       	ldi	r19, 0x81	; 129
    7c4e:	83 0e       	add	r8, r19
    7c50:	91 1c       	adc	r9, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1169
      rfnt = pgm_read_word(&switch_1->get_status_fnt);
      gss = pgm_read_word(&switch_1->get_status_string);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1);
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, str1, str3);
    7c52:	ae 01       	movw	r20, r28
    7c54:	4f 5f       	subi	r20, 0xFF	; 255
    7c56:	5f 4f       	sbci	r21, 0xFF	; 255
    7c58:	cc 54       	subi	r28, 0x4C	; 76
    7c5a:	df 4f       	sbci	r29, 0xFF	; 255
    7c5c:	59 83       	std	Y+1, r21	; 0x01
    7c5e:	48 83       	st	Y, r20
    7c60:	c4 5b       	subi	r28, 0xB4	; 180
    7c62:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1158
      }
  }
  if (ret == true)  goto draw_menu_end;
  /////
  /// menu switch_1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_switch_1); idx++)
    7c64:	cc 53       	subi	r28, 0x3C	; 60
    7c66:	df 4f       	sbci	r29, 0xFF	; 255
    7c68:	e8 81       	ld	r30, Y
    7c6a:	f9 81       	ldd	r31, Y+1	; 0x01
    7c6c:	c4 5c       	subi	r28, 0xC4	; 196
    7c6e:	d0 40       	sbci	r29, 0x00	; 0
    7c70:	84 91       	lpm	r24, Z
    7c72:	ca 54       	subi	r28, 0x4A	; 74
    7c74:	df 4f       	sbci	r29, 0xFF	; 255
    7c76:	f8 81       	ld	r31, Y
    7c78:	c6 5b       	subi	r28, 0xB6	; 182
    7c7a:	d0 40       	sbci	r29, 0x00	; 0
    7c7c:	f8 17       	cp	r31, r24
    7c7e:	08 f0       	brcs	.+2      	; 0x7c82 <draw_menu(bool)+0x9ac>
    7c80:	c6 c1       	rjmp	.+908    	; 0x800e <draw_menu(bool)+0xd38>
    7c82:	27 e1       	ldi	r18, 0x17	; 23
    7c84:	f2 9f       	mul	r31, r18
    7c86:	60 01       	movw	r12, r0
    7c88:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1161
  {
    switch_1 = &current->switch_1[idx];
    rdr = pgm_read_byte(&switch_1->redraw_class);
    7c8a:	f6 01       	movw	r30, r12
    7c8c:	ef 5b       	subi	r30, 0xBF	; 191
    7c8e:	fe 4f       	sbci	r31, 0xFE	; 254
    7c90:	e6 0d       	add	r30, r6
    7c92:	f7 1d       	adc	r31, r7
    7c94:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1162
    if (enable_redraw(rdr, redraw_class) == true)
    7c96:	c5 53       	subi	r28, 0x35	; 53
    7c98:	df 4f       	sbci	r29, 0xFF	; 255
    7c9a:	68 81       	ld	r22, Y
    7c9c:	cb 5c       	subi	r28, 0xCB	; 203
    7c9e:	d0 40       	sbci	r29, 0x00	; 0
    7ca0:	0e 94 e6 22 	call	0x45cc	; 0x45cc <enable_redraw(unsigned char, unsigned char)>
    7ca4:	88 23       	and	r24, r24
    7ca6:	09 f4       	brne	.+2      	; 0x7caa <draw_menu(bool)+0x9d4>
    7ca8:	3c c1       	rjmp	.+632    	; 0x7f22 <draw_menu(bool)+0xc4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1164
    {
      strcpy_P(str2, pgm_read_word(&switch_1->name));
    7caa:	f6 01       	movw	r30, r12
    7cac:	e5 5d       	subi	r30, 0xD5	; 213
    7cae:	fe 4f       	sbci	r31, 0xFE	; 254
    7cb0:	e6 0d       	add	r30, r6
    7cb2:	f7 1d       	adc	r31, r7
    7cb4:	65 91       	lpm	r22, Z+
    7cb6:	74 91       	lpm	r23, Z
    7cb8:	c4 01       	movw	r24, r8
    7cba:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1165
      rfnt = pgm_read_word(&switch_1->get_status_fnt);
    7cbe:	f6 01       	movw	r30, r12
    7cc0:	e3 5c       	subi	r30, 0xC3	; 195
    7cc2:	fe 4f       	sbci	r31, 0xFE	; 254
    7cc4:	e6 0d       	add	r30, r6
    7cc6:	f7 1d       	adc	r31, r7
    7cc8:	25 91       	lpm	r18, Z+
    7cca:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1166
      gss = pgm_read_word(&switch_1->get_status_string);
    7ccc:	f6 01       	movw	r30, r12
    7cce:	e1 5c       	subi	r30, 0xC1	; 193
    7cd0:	fe 4f       	sbci	r31, 0xFE	; 254
    7cd2:	e6 0d       	add	r30, r6
    7cd4:	f7 1d       	adc	r31, r7
    7cd6:	e5 90       	lpm	r14, Z+
    7cd8:	f4 90       	lpm	r15, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1167
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1);
    7cda:	86 01       	movw	r16, r12
    7cdc:	06 5c       	subi	r16, 0xC6	; 198
    7cde:	1e 4f       	sbci	r17, 0xFE	; 254
    7ce0:	06 0d       	add	r16, r6
    7ce2:	17 1d       	adc	r17, r7
    7ce4:	f8 01       	movw	r30, r16
    7ce6:	84 91       	lpm	r24, Z
    7ce8:	cd 54       	subi	r28, 0x4D	; 77
    7cea:	df 4f       	sbci	r29, 0xFF	; 255
    7cec:	68 81       	ld	r22, Y
    7cee:	c3 5b       	subi	r28, 0xB3	; 179
    7cf0:	d0 40       	sbci	r29, 0x00	; 0
    7cf2:	70 e0       	ldi	r23, 0x00	; 0
    7cf4:	90 e0       	ldi	r25, 0x00	; 0
    7cf6:	f9 01       	movw	r30, r18
    7cf8:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1168
      str3[0] = 0;
    7cfa:	cf 55       	subi	r28, 0x5F	; 95
    7cfc:	df 4f       	sbci	r29, 0xFF	; 255
    7cfe:	18 82       	st	Y, r1
    7d00:	c1 5a       	subi	r28, 0xA1	; 161
    7d02:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1169
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, str1, str3);
    7d04:	f8 01       	movw	r30, r16
    7d06:	84 91       	lpm	r24, Z
    7d08:	9e 01       	movw	r18, r28
    7d0a:	2f 55       	subi	r18, 0x5F	; 95
    7d0c:	3f 4f       	sbci	r19, 0xFF	; 255
    7d0e:	ae 01       	movw	r20, r28
    7d10:	4f 5f       	subi	r20, 0xFF	; 255
    7d12:	5f 4f       	sbci	r21, 0xFF	; 255
    7d14:	cd 54       	subi	r28, 0x4D	; 77
    7d16:	df 4f       	sbci	r29, 0xFF	; 255
    7d18:	68 81       	ld	r22, Y
    7d1a:	c3 5b       	subi	r28, 0xB3	; 179
    7d1c:	d0 40       	sbci	r29, 0x00	; 0
    7d1e:	f7 01       	movw	r30, r14
    7d20:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1174
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
                      global_y + pgm_read_word(&switch_1->y), \
                      pgm_read_word(&switch_1->size_x), \
                      pgm_read_word(&switch_1->size_y), \
                      pgm_read_word(&switch_1->font_size), state, str2, str1);
    7d22:	f6 01       	movw	r30, r12
    7d24:	eb 5c       	subi	r30, 0xCB	; 203
    7d26:	fe 4f       	sbci	r31, 0xFE	; 254
    7d28:	e6 0d       	add	r30, r6
    7d2a:	f7 1d       	adc	r31, r7
    7d2c:	25 91       	lpm	r18, Z+
    7d2e:	34 91       	lpm	r19, Z
    7d30:	c4 54       	subi	r28, 0x44	; 68
    7d32:	df 4f       	sbci	r29, 0xFF	; 255
    7d34:	39 83       	std	Y+1, r19	; 0x01
    7d36:	28 83       	st	Y, r18
    7d38:	cc 5b       	subi	r28, 0xBC	; 188
    7d3a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1173
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, str1, str3);
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
                      global_y + pgm_read_word(&switch_1->y), \
                      pgm_read_word(&switch_1->size_x), \
                      pgm_read_word(&switch_1->size_y), \
    7d3c:	f6 01       	movw	r30, r12
    7d3e:	ed 5c       	subi	r30, 0xCD	; 205
    7d40:	fe 4f       	sbci	r31, 0xFE	; 254
    7d42:	e6 0d       	add	r30, r6
    7d44:	f7 1d       	adc	r31, r7
    7d46:	45 90       	lpm	r4, Z+
    7d48:	54 90       	lpm	r5, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1172
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1);
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, str1, str3);
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
                      global_y + pgm_read_word(&switch_1->y), \
                      pgm_read_word(&switch_1->size_x), \
    7d4a:	f6 01       	movw	r30, r12
    7d4c:	ef 5c       	subi	r30, 0xCF	; 207
    7d4e:	fe 4f       	sbci	r31, 0xFE	; 254
    7d50:	e6 0d       	add	r30, r6
    7d52:	f7 1d       	adc	r31, r7
    7d54:	85 91       	lpm	r24, Z+
    7d56:	94 91       	lpm	r25, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1171
      gss = pgm_read_word(&switch_1->get_status_string);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1);
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, str1, str3);
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
                      global_y + pgm_read_word(&switch_1->y), \
    7d58:	f6 01       	movw	r30, r12
    7d5a:	e1 5d       	subi	r30, 0xD1	; 209
    7d5c:	fe 4f       	sbci	r31, 0xFE	; 254
    7d5e:	e6 0d       	add	r30, r6
    7d60:	f7 1d       	adc	r31, r7
    7d62:	a5 90       	lpm	r10, Z+
    7d64:	b4 90       	lpm	r11, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1170
      rfnt = pgm_read_word(&switch_1->get_status_fnt);
      gss = pgm_read_word(&switch_1->get_status_string);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1);
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, str1, str3);
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
    7d66:	c6 54       	subi	r28, 0x46	; 70
    7d68:	df 4f       	sbci	r29, 0xFF	; 255
    7d6a:	48 81       	ld	r20, Y
    7d6c:	59 81       	ldd	r21, Y+1	; 0x01
    7d6e:	ca 5b       	subi	r28, 0xBA	; 186
    7d70:	d0 40       	sbci	r29, 0x00	; 0
    7d72:	a4 0e       	add	r10, r20
    7d74:	b5 1e       	adc	r11, r21
    7d76:	f6 01       	movw	r30, r12
    7d78:	e3 5d       	subi	r30, 0xD3	; 211
    7d7a:	fe 4f       	sbci	r31, 0xFE	; 254
    7d7c:	e6 0d       	add	r30, r6
    7d7e:	f7 1d       	adc	r31, r7
    7d80:	25 90       	lpm	r2, Z+
    7d82:	34 90       	lpm	r3, Z
    7d84:	c8 54       	subi	r28, 0x48	; 72
    7d86:	df 4f       	sbci	r29, 0xFF	; 255
    7d88:	e8 81       	ld	r30, Y
    7d8a:	f9 81       	ldd	r31, Y+1	; 0x01
    7d8c:	c8 5b       	subi	r28, 0xB8	; 184
    7d8e:	d0 40       	sbci	r29, 0x00	; 0
    7d90:	2e 0e       	add	r2, r30
    7d92:	3f 1e       	adc	r3, r31
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    7d94:	10 92 c5 0d 	sts	0x0DC5, r1	; 0x800dc5 <my_lcd+0xb>
    7d98:	10 92 c4 0d 	sts	0x0DC4, r1	; 0x800dc4 <my_lcd+0xa>
    7d9c:	10 e0       	ldi	r17, 0x00	; 0
    7d9e:	00 e0       	ldi	r16, 0x00	; 0
    7da0:	55 24       	eor	r5, r5
    7da2:	9c 01       	movw	r18, r24
    7da4:	33 27       	eor	r19, r19
    7da6:	c2 54       	subi	r28, 0x42	; 66
    7da8:	df 4f       	sbci	r29, 0xFF	; 255
    7daa:	39 83       	std	Y+1, r19	; 0x01
    7dac:	28 83       	st	Y, r18
    7dae:	ce 5b       	subi	r28, 0xBE	; 190
    7db0:	d0 40       	sbci	r29, 0x00	; 0
button_switch_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4437
void button_switch_1(uint16_t x, uint16_t y, uint8_t size_x, uint8_t size_y, uint8_t font_size, uint8_t state, char *text, char *text_value)
{
  uint8_t posx , posy, tmpy, tmpx;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    7db2:	a5 01       	movw	r20, r10
    7db4:	44 0d       	add	r20, r4
    7db6:	55 1d       	adc	r21, r5
    7db8:	ca 53       	subi	r28, 0x3A	; 58
    7dba:	df 4f       	sbci	r29, 0xFF	; 255
    7dbc:	59 83       	std	Y+1, r21	; 0x01
    7dbe:	48 83       	st	Y, r20
    7dc0:	c6 5c       	subi	r28, 0xC6	; 198
    7dc2:	d0 40       	sbci	r29, 0x00	; 0
    7dc4:	79 01       	movw	r14, r18
    7dc6:	e2 0c       	add	r14, r2
    7dc8:	f3 1c       	adc	r15, r3
    7dca:	ca 53       	subi	r28, 0x3A	; 58
    7dcc:	df 4f       	sbci	r29, 0xFF	; 255
    7dce:	28 81       	ld	r18, Y
    7dd0:	39 81       	ldd	r19, Y+1	; 0x01
    7dd2:	c6 5c       	subi	r28, 0xC6	; 198
    7dd4:	d0 40       	sbci	r29, 0x00	; 0
    7dd6:	20 1b       	sub	r18, r16
    7dd8:	31 0b       	sbc	r19, r17
    7dda:	a7 01       	movw	r20, r14
    7ddc:	40 1b       	sub	r20, r16
    7dde:	51 0b       	sbc	r21, r17
    7de0:	b5 01       	movw	r22, r10
    7de2:	60 0f       	add	r22, r16
    7de4:	71 1f       	adc	r23, r17
    7de6:	c1 01       	movw	r24, r2
    7de8:	80 0f       	add	r24, r16
    7dea:	91 1f       	adc	r25, r17
    7dec:	0e 94 5d 7c 	call	0xf8ba	; 0xf8ba <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.188]>
    7df0:	0f 5f       	subi	r16, 0xFF	; 255
    7df2:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4436
/// typ button_1 ////
void button_switch_1(uint16_t x, uint16_t y, uint8_t size_x, uint8_t size_y, uint8_t font_size, uint8_t state, char *text, char *text_value)
{
  uint8_t posx , posy, tmpy, tmpx;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    7df4:	03 30       	cpi	r16, 0x03	; 3
    7df6:	11 05       	cpc	r17, r1
    7df8:	41 f7       	brne	.-48     	; 0x7dca <draw_menu(bool)+0xaf4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4439
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  tmpy = show_string_size_hight(font_size);
  tmpx = show_string_size_width(strlen(text), font_size);
    7dfa:	f4 01       	movw	r30, r8
    7dfc:	01 90       	ld	r0, Z+
    7dfe:	00 20       	and	r0, r0
    7e00:	e9 f7       	brne	.-6      	; 0x7dfc <draw_menu(bool)+0xb26>
    7e02:	31 97       	sbiw	r30, 0x01	; 1
    7e04:	e8 19       	sub	r30, r8
    7e06:	f9 09       	sbc	r31, r9
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1934
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
    7e08:	c4 54       	subi	r28, 0x44	; 68
    7e0a:	df 4f       	sbci	r29, 0xFF	; 255
    7e0c:	88 81       	ld	r24, Y
    7e0e:	cc 5b       	subi	r28, 0xBC	; 188
    7e10:	d0 40       	sbci	r29, 0x00	; 0
    7e12:	88 0f       	add	r24, r24
    7e14:	c4 54       	subi	r28, 0x44	; 68
    7e16:	df 4f       	sbci	r29, 0xFF	; 255
    7e18:	58 81       	ld	r21, Y
    7e1a:	cc 5b       	subi	r28, 0xBC	; 188
    7e1c:	d0 40       	sbci	r29, 0x00	; 0
    7e1e:	85 0f       	add	r24, r21
    7e20:	88 0f       	add	r24, r24
button_switch_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4441
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  tmpy = show_string_size_hight(font_size);
  tmpx = show_string_size_width(strlen(text), font_size);
  posx = (size_x - tmpx) / 2;
  posy = (size_y - tmpy) / 4;
    7e22:	a2 01       	movw	r20, r4
    7e24:	48 1b       	sub	r20, r24
    7e26:	51 09       	sbc	r21, r1
    7e28:	57 ff       	sbrs	r21, 7
    7e2a:	02 c0       	rjmp	.+4      	; 0x7e30 <draw_menu(bool)+0xb5a>
    7e2c:	4d 5f       	subi	r20, 0xFD	; 253
    7e2e:	5f 4f       	sbci	r21, 0xFF	; 255
    7e30:	55 95       	asr	r21
    7e32:	47 95       	ror	r20
    7e34:	55 95       	asr	r21
    7e36:	47 95       	ror	r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4442
  show_string(text, x + posx, y + posy, font_size, BLACK, WHITE, 0);
    7e38:	4a 0d       	add	r20, r10
    7e3a:	5b 2d       	mov	r21, r11
    7e3c:	51 1d       	adc	r21, r1
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1929
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    7e3e:	86 e0       	ldi	r24, 0x06	; 6
    7e40:	e8 9f       	mul	r30, r24
    7e42:	f0 01       	movw	r30, r0
    7e44:	11 24       	eor	r1, r1
    7e46:	c4 54       	subi	r28, 0x44	; 68
    7e48:	df 4f       	sbci	r29, 0xFF	; 255
    7e4a:	28 81       	ld	r18, Y
    7e4c:	cc 5b       	subi	r28, 0xBC	; 188
    7e4e:	d0 40       	sbci	r29, 0x00	; 0
    7e50:	2e 9f       	mul	r18, r30
    7e52:	c0 01       	movw	r24, r0
    7e54:	2f 9f       	mul	r18, r31
    7e56:	90 0d       	add	r25, r0
    7e58:	11 24       	eor	r1, r1
button_switch_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4440
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  tmpy = show_string_size_hight(font_size);
  tmpx = show_string_size_width(strlen(text), font_size);
  posx = (size_x - tmpx) / 2;
    7e5a:	99 27       	eor	r25, r25
    7e5c:	c2 54       	subi	r28, 0x42	; 66
    7e5e:	df 4f       	sbci	r29, 0xFF	; 255
    7e60:	68 81       	ld	r22, Y
    7e62:	79 81       	ldd	r23, Y+1	; 0x01
    7e64:	ce 5b       	subi	r28, 0xBE	; 190
    7e66:	d0 40       	sbci	r29, 0x00	; 0
    7e68:	68 1b       	sub	r22, r24
    7e6a:	79 0b       	sbc	r23, r25
    7e6c:	77 ff       	sbrs	r23, 7
    7e6e:	02 c0       	rjmp	.+4      	; 0x7e74 <draw_menu(bool)+0xb9e>
    7e70:	6f 5f       	subi	r22, 0xFF	; 255
    7e72:	7f 4f       	sbci	r23, 0xFF	; 255
    7e74:	75 95       	asr	r23
    7e76:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4442
  posy = (size_y - tmpy) / 4;
  show_string(text, x + posx, y + posy, font_size, BLACK, WHITE, 0);
    7e78:	62 0d       	add	r22, r2
    7e7a:	73 2d       	mov	r23, r3
    7e7c:	71 1d       	adc	r23, r1
    7e7e:	ee 24       	eor	r14, r14
    7e80:	ea 94       	dec	r14
    7e82:	fe 2c       	mov	r15, r14
    7e84:	10 e0       	ldi	r17, 0x00	; 0
    7e86:	00 e0       	ldi	r16, 0x00	; 0
    7e88:	c4 54       	subi	r28, 0x44	; 68
    7e8a:	df 4f       	sbci	r29, 0xFF	; 255
    7e8c:	28 81       	ld	r18, Y
    7e8e:	cc 5b       	subi	r28, 0xBC	; 188
    7e90:	d0 40       	sbci	r29, 0x00	; 0
    7e92:	c4 01       	movw	r24, r8
    7e94:	0e 94 37 7d 	call	0xfa6e	; 0xfa6e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4444
  tmpy = show_string_size_hight(1);
  tmpx = show_string_size_width(strlen(text_value), 1);
    7e98:	cc 54       	subi	r28, 0x4C	; 76
    7e9a:	df 4f       	sbci	r29, 0xFF	; 255
    7e9c:	e8 81       	ld	r30, Y
    7e9e:	f9 81       	ldd	r31, Y+1	; 0x01
    7ea0:	c4 5b       	subi	r28, 0xB4	; 180
    7ea2:	d0 40       	sbci	r29, 0x00	; 0
    7ea4:	01 90       	ld	r0, Z+
    7ea6:	00 20       	and	r0, r0
    7ea8:	e9 f7       	brne	.-6      	; 0x7ea4 <draw_menu(bool)+0xbce>
    7eaa:	31 97       	sbiw	r30, 0x01	; 1
    7eac:	cc 54       	subi	r28, 0x4C	; 76
    7eae:	df 4f       	sbci	r29, 0xFF	; 255
    7eb0:	48 81       	ld	r20, Y
    7eb2:	59 81       	ldd	r21, Y+1	; 0x01
    7eb4:	c4 5b       	subi	r28, 0xB4	; 180
    7eb6:	d0 40       	sbci	r29, 0x00	; 0
    7eb8:	e4 1b       	sub	r30, r20
    7eba:	f5 0b       	sbc	r31, r21
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4446
  posx = (size_x - tmpx) / 2;
  posy = (size_y - tmpy) / 4;
    7ebc:	a2 01       	movw	r20, r4
    7ebe:	46 50       	subi	r20, 0x06	; 6
    7ec0:	51 09       	sbc	r21, r1
    7ec2:	57 ff       	sbrs	r21, 7
    7ec4:	02 c0       	rjmp	.+4      	; 0x7eca <draw_menu(bool)+0xbf4>
    7ec6:	4d 5f       	subi	r20, 0xFD	; 253
    7ec8:	5f 4f       	sbci	r21, 0xFF	; 255
    7eca:	55 95       	asr	r21
    7ecc:	47 95       	ror	r20
    7ece:	55 95       	asr	r21
    7ed0:	47 95       	ror	r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4447
  show_string(text_value, x + posx, y + (posy * 3), 1, BLACK, WHITE, 0);
    7ed2:	55 27       	eor	r21, r21
    7ed4:	ca 01       	movw	r24, r20
    7ed6:	88 0f       	add	r24, r24
    7ed8:	99 1f       	adc	r25, r25
    7eda:	48 0f       	add	r20, r24
    7edc:	59 1f       	adc	r21, r25
    7ede:	4a 0d       	add	r20, r10
    7ee0:	5b 1d       	adc	r21, r11
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1929
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    7ee2:	86 e0       	ldi	r24, 0x06	; 6
    7ee4:	e8 9f       	mul	r30, r24
    7ee6:	f0 01       	movw	r30, r0
    7ee8:	11 24       	eor	r1, r1
button_switch_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4445
  posx = (size_x - tmpx) / 2;
  posy = (size_y - tmpy) / 4;
  show_string(text, x + posx, y + posy, font_size, BLACK, WHITE, 0);
  tmpy = show_string_size_hight(1);
  tmpx = show_string_size_width(strlen(text_value), 1);
  posx = (size_x - tmpx) / 2;
    7eea:	ff 27       	eor	r31, r31
    7eec:	c2 54       	subi	r28, 0x42	; 66
    7eee:	df 4f       	sbci	r29, 0xFF	; 255
    7ef0:	68 81       	ld	r22, Y
    7ef2:	79 81       	ldd	r23, Y+1	; 0x01
    7ef4:	ce 5b       	subi	r28, 0xBE	; 190
    7ef6:	d0 40       	sbci	r29, 0x00	; 0
    7ef8:	6e 1b       	sub	r22, r30
    7efa:	7f 0b       	sbc	r23, r31
    7efc:	77 ff       	sbrs	r23, 7
    7efe:	02 c0       	rjmp	.+4      	; 0x7f04 <draw_menu(bool)+0xc2e>
    7f00:	6f 5f       	subi	r22, 0xFF	; 255
    7f02:	7f 4f       	sbci	r23, 0xFF	; 255
    7f04:	75 95       	asr	r23
    7f06:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4447
  posy = (size_y - tmpy) / 4;
  show_string(text_value, x + posx, y + (posy * 3), 1, BLACK, WHITE, 0);
    7f08:	62 0d       	add	r22, r2
    7f0a:	73 2d       	mov	r23, r3
    7f0c:	71 1d       	adc	r23, r1
    7f0e:	ee 24       	eor	r14, r14
    7f10:	ea 94       	dec	r14
    7f12:	fe 2c       	mov	r15, r14
    7f14:	10 e0       	ldi	r17, 0x00	; 0
    7f16:	00 e0       	ldi	r16, 0x00	; 0
    7f18:	21 e0       	ldi	r18, 0x01	; 1
    7f1a:	ce 01       	movw	r24, r28
    7f1c:	01 96       	adiw	r24, 0x01	; 1
    7f1e:	0e 94 37 7d 	call	0xfa6e	; 0xfa6e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]>
_Z9draw_menub():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1177
                      pgm_read_word(&switch_1->size_x), \
                      pgm_read_word(&switch_1->size_y), \
                      pgm_read_word(&switch_1->font_size), state, str2, str1);

    }
    if (click_x > 0 && click_y > 0)
    7f22:	c0 54       	subi	r28, 0x40	; 64
    7f24:	df 4f       	sbci	r29, 0xFF	; 255
    7f26:	e8 81       	ld	r30, Y
    7f28:	f9 81       	ldd	r31, Y+1	; 0x01
    7f2a:	c0 5c       	subi	r28, 0xC0	; 192
    7f2c:	d0 40       	sbci	r29, 0x00	; 0
    7f2e:	ef 2b       	or	r30, r31
    7f30:	09 f4       	brne	.+2      	; 0x7f34 <draw_menu(bool)+0xc5e>
    7f32:	61 c0       	rjmp	.+194    	; 0x7ff6 <draw_menu(bool)+0xd20>
    7f34:	ce 53       	subi	r28, 0x3E	; 62
    7f36:	df 4f       	sbci	r29, 0xFF	; 255
    7f38:	28 81       	ld	r18, Y
    7f3a:	39 81       	ldd	r19, Y+1	; 0x01
    7f3c:	c2 5c       	subi	r28, 0xC2	; 194
    7f3e:	d0 40       	sbci	r29, 0x00	; 0
    7f40:	23 2b       	or	r18, r19
    7f42:	09 f4       	brne	.+2      	; 0x7f46 <draw_menu(bool)+0xc70>
    7f44:	58 c0       	rjmp	.+176    	; 0x7ff6 <draw_menu(bool)+0xd20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1178
      if (button_click_touch(global_x + pgm_read_word(&switch_1->x), global_y + pgm_read_word(&switch_1->y), pgm_read_word(&switch_1->size_x), pgm_read_word(&switch_1->size_y), click_x, click_y) == true)
    7f46:	f6 01       	movw	r30, r12
    7f48:	ed 5c       	subi	r30, 0xCD	; 205
    7f4a:	fe 4f       	sbci	r31, 0xFE	; 254
    7f4c:	e6 0d       	add	r30, r6
    7f4e:	f7 1d       	adc	r31, r7
    7f50:	25 91       	lpm	r18, Z+
    7f52:	34 91       	lpm	r19, Z
    7f54:	f6 01       	movw	r30, r12
    7f56:	ef 5c       	subi	r30, 0xCF	; 207
    7f58:	fe 4f       	sbci	r31, 0xFE	; 254
    7f5a:	e6 0d       	add	r30, r6
    7f5c:	f7 1d       	adc	r31, r7
    7f5e:	45 91       	lpm	r20, Z+
    7f60:	54 91       	lpm	r21, Z
    7f62:	f6 01       	movw	r30, r12
    7f64:	e1 5d       	subi	r30, 0xD1	; 209
    7f66:	fe 4f       	sbci	r31, 0xFE	; 254
    7f68:	e6 0d       	add	r30, r6
    7f6a:	f7 1d       	adc	r31, r7
    7f6c:	65 91       	lpm	r22, Z+
    7f6e:	74 91       	lpm	r23, Z
    7f70:	f6 01       	movw	r30, r12
    7f72:	e3 5d       	subi	r30, 0xD3	; 211
    7f74:	fe 4f       	sbci	r31, 0xFE	; 254
    7f76:	e6 0d       	add	r30, r6
    7f78:	f7 1d       	adc	r31, r7
    7f7a:	85 91       	lpm	r24, Z+
    7f7c:	94 91       	lpm	r25, Z
    7f7e:	c6 54       	subi	r28, 0x46	; 70
    7f80:	df 4f       	sbci	r29, 0xFF	; 255
    7f82:	e8 81       	ld	r30, Y
    7f84:	f9 81       	ldd	r31, Y+1	; 0x01
    7f86:	ca 5b       	subi	r28, 0xBA	; 186
    7f88:	d0 40       	sbci	r29, 0x00	; 0
    7f8a:	6e 0f       	add	r22, r30
    7f8c:	7f 1f       	adc	r23, r31
    7f8e:	ce 53       	subi	r28, 0x3E	; 62
    7f90:	df 4f       	sbci	r29, 0xFF	; 255
    7f92:	e8 80       	ld	r14, Y
    7f94:	f9 80       	ldd	r15, Y+1	; 0x01
    7f96:	c2 5c       	subi	r28, 0xC2	; 194
    7f98:	d0 40       	sbci	r29, 0x00	; 0
    7f9a:	c0 54       	subi	r28, 0x40	; 64
    7f9c:	df 4f       	sbci	r29, 0xFF	; 255
    7f9e:	08 81       	ld	r16, Y
    7fa0:	19 81       	ldd	r17, Y+1	; 0x01
    7fa2:	c0 5c       	subi	r28, 0xC0	; 192
    7fa4:	d0 40       	sbci	r29, 0x00	; 0
    7fa6:	c8 54       	subi	r28, 0x48	; 72
    7fa8:	df 4f       	sbci	r29, 0xFF	; 255
    7faa:	e8 81       	ld	r30, Y
    7fac:	f9 81       	ldd	r31, Y+1	; 0x01
    7fae:	c8 5b       	subi	r28, 0xB8	; 184
    7fb0:	d0 40       	sbci	r29, 0x00	; 0
    7fb2:	8e 0f       	add	r24, r30
    7fb4:	9f 1f       	adc	r25, r31
    7fb6:	0e 94 70 21 	call	0x42e0	; 0x42e0 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    7fba:	18 2f       	mov	r17, r24
    7fbc:	88 23       	and	r24, r24
    7fbe:	d9 f0       	breq	.+54     	; 0x7ff6 <draw_menu(bool)+0xd20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1180
      {
        fntargs =  pgm_read_word(&switch_1->onclick);
    7fc0:	f6 01       	movw	r30, r12
    7fc2:	e5 5c       	subi	r30, 0xC5	; 197
    7fc4:	fe 4f       	sbci	r31, 0xFE	; 254
    7fc6:	e6 0d       	add	r30, r6
    7fc8:	f7 1d       	adc	r31, r7
    7fca:	25 91       	lpm	r18, Z+
    7fcc:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1181
        ((fptr_args)fntargs)(pgm_read_byte(&switch_1->args), menu_args1);
    7fce:	f6 01       	movw	r30, r12
    7fd0:	e6 5c       	subi	r30, 0xC6	; 198
    7fd2:	fe 4f       	sbci	r31, 0xFE	; 254
    7fd4:	e6 0d       	add	r30, r6
    7fd6:	f7 1d       	adc	r31, r7
    7fd8:	84 91       	lpm	r24, Z
    7fda:	cd 54       	subi	r28, 0x4D	; 77
    7fdc:	df 4f       	sbci	r29, 0xFF	; 255
    7fde:	68 81       	ld	r22, Y
    7fe0:	c3 5b       	subi	r28, 0xB3	; 179
    7fe2:	d0 40       	sbci	r29, 0x00	; 0
    7fe4:	70 e0       	ldi	r23, 0x00	; 0
    7fe6:	90 e0       	ldi	r25, 0x00	; 0
    7fe8:	f9 01       	movw	r30, r18
    7fea:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1182
        ret = true;
    7fec:	c8 53       	subi	r28, 0x38	; 56
    7fee:	df 4f       	sbci	r29, 0xFF	; 255
    7ff0:	18 83       	st	Y, r17
    7ff2:	c8 5c       	subi	r28, 0xC8	; 200
    7ff4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1158
      }
  }
  if (ret == true)  goto draw_menu_end;
  /////
  /// menu switch_1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_switch_1); idx++)
    7ff6:	ca 54       	subi	r28, 0x4A	; 74
    7ff8:	df 4f       	sbci	r29, 0xFF	; 255
    7ffa:	f8 81       	ld	r31, Y
    7ffc:	c6 5b       	subi	r28, 0xB6	; 182
    7ffe:	d0 40       	sbci	r29, 0x00	; 0
    8000:	ff 5f       	subi	r31, 0xFF	; 255
    8002:	ca 54       	subi	r28, 0x4A	; 74
    8004:	df 4f       	sbci	r29, 0xFF	; 255
    8006:	f8 83       	st	Y, r31
    8008:	c6 5b       	subi	r28, 0xB6	; 182
    800a:	d0 40       	sbci	r29, 0x00	; 0
    800c:	2b ce       	rjmp	.-938    	; 0x7c64 <draw_menu(bool)+0x98e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1185
        fntargs =  pgm_read_word(&switch_1->onclick);
        ((fptr_args)fntargs)(pgm_read_byte(&switch_1->args), menu_args1);
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
    800e:	c8 53       	subi	r28, 0x38	; 56
    8010:	df 4f       	sbci	r29, 0xFF	; 255
    8012:	28 81       	ld	r18, Y
    8014:	c8 5c       	subi	r28, 0xC8	; 200
    8016:	d0 40       	sbci	r29, 0x00	; 0
    8018:	21 11       	cpse	r18, r1
    801a:	0c 94 bc 4a 	jmp	0x9578	; 0x9578 <draw_menu(bool)+0x22a2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1187
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_symbol_button_1); idx++)
    801e:	91 2c       	mov	r9, r1
    8020:	53 01       	movw	r10, r6
    8022:	3a ef       	ldi	r19, 0xFA	; 250
    8024:	a3 1a       	sub	r10, r19
    8026:	3d ef       	ldi	r19, 0xFD	; 253
    8028:	b3 0a       	sbc	r11, r19
    802a:	8e e0       	ldi	r24, 0x0E	; 14
    802c:	88 2e       	mov	r8, r24
    802e:	f5 01       	movw	r30, r10
    8030:	84 91       	lpm	r24, Z
    8032:	98 16       	cp	r9, r24
    8034:	08 f0       	brcs	.+2      	; 0x8038 <draw_menu(bool)+0xd62>
    8036:	bb c0       	rjmp	.+374    	; 0x81ae <draw_menu(bool)+0xed8>
    8038:	98 9c       	mul	r9, r8
    803a:	60 01       	movw	r12, r0
    803c:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1190
  {
    symbol_button_1 = &current->symbol_button_1[idx];
    rdr = pgm_read_byte(&symbol_button_1->redraw_class);
    803e:	f6 01       	movw	r30, r12
    8040:	ed 56       	subi	r30, 0x6D	; 109
    8042:	fe 4f       	sbci	r31, 0xFE	; 254
    8044:	e6 0d       	add	r30, r6
    8046:	f7 1d       	adc	r31, r7
    8048:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1191
    if (enable_redraw(rdr, redraw_class) == true)
    804a:	c5 53       	subi	r28, 0x35	; 53
    804c:	df 4f       	sbci	r29, 0xFF	; 255
    804e:	68 81       	ld	r22, Y
    8050:	cb 5c       	subi	r28, 0xCB	; 203
    8052:	d0 40       	sbci	r29, 0x00	; 0
    8054:	0e 94 e6 22 	call	0x45cc	; 0x45cc <enable_redraw(unsigned char, unsigned char)>
    8058:	88 23       	and	r24, r24
    805a:	09 f4       	brne	.+2      	; 0x805e <draw_menu(bool)+0xd88>
    805c:	3c c0       	rjmp	.+120    	; 0x80d6 <draw_menu(bool)+0xe00>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1195
    {
      button_click_3(global_x + pgm_read_word(&symbol_button_1->x), global_y + pgm_read_word(&symbol_button_1->y), \
                     pgm_read_word(&symbol_button_1->size_x), pgm_read_word(&symbol_button_1->size_y), \
                     pgm_read_word(&symbol_button_1->znak_size), pgm_read_word(&symbol_button_1->znak));
    805e:	f6 01       	movw	r30, r12
    8060:	ea 57       	subi	r30, 0x7A	; 122
    8062:	fe 4f       	sbci	r31, 0xFE	; 254
    8064:	e6 0d       	add	r30, r6
    8066:	f7 1d       	adc	r31, r7
    8068:	e5 90       	lpm	r14, Z+
    806a:	f4 90       	lpm	r15, Z
    806c:	f6 01       	movw	r30, r12
    806e:	e1 57       	subi	r30, 0x71	; 113
    8070:	fe 4f       	sbci	r31, 0xFE	; 254
    8072:	e6 0d       	add	r30, r6
    8074:	f7 1d       	adc	r31, r7
    8076:	05 91       	lpm	r16, Z+
    8078:	14 91       	lpm	r17, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1194
    symbol_button_1 = &current->symbol_button_1[idx];
    rdr = pgm_read_byte(&symbol_button_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      button_click_3(global_x + pgm_read_word(&symbol_button_1->x), global_y + pgm_read_word(&symbol_button_1->y), \
                     pgm_read_word(&symbol_button_1->size_x), pgm_read_word(&symbol_button_1->size_y), \
    807a:	f6 01       	movw	r30, r12
    807c:	e3 57       	subi	r30, 0x73	; 115
    807e:	fe 4f       	sbci	r31, 0xFE	; 254
    8080:	e6 0d       	add	r30, r6
    8082:	f7 1d       	adc	r31, r7
    8084:	25 91       	lpm	r18, Z+
    8086:	34 91       	lpm	r19, Z
    8088:	f6 01       	movw	r30, r12
    808a:	e5 57       	subi	r30, 0x75	; 117
    808c:	fe 4f       	sbci	r31, 0xFE	; 254
    808e:	e6 0d       	add	r30, r6
    8090:	f7 1d       	adc	r31, r7
    8092:	45 91       	lpm	r20, Z+
    8094:	54 91       	lpm	r21, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1193
  {
    symbol_button_1 = &current->symbol_button_1[idx];
    rdr = pgm_read_byte(&symbol_button_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      button_click_3(global_x + pgm_read_word(&symbol_button_1->x), global_y + pgm_read_word(&symbol_button_1->y), \
    8096:	f6 01       	movw	r30, r12
    8098:	e7 57       	subi	r30, 0x77	; 119
    809a:	fe 4f       	sbci	r31, 0xFE	; 254
    809c:	e6 0d       	add	r30, r6
    809e:	f7 1d       	adc	r31, r7
    80a0:	65 91       	lpm	r22, Z+
    80a2:	74 91       	lpm	r23, Z
    80a4:	f6 01       	movw	r30, r12
    80a6:	e9 57       	subi	r30, 0x79	; 121
    80a8:	fe 4f       	sbci	r31, 0xFE	; 254
    80aa:	e6 0d       	add	r30, r6
    80ac:	f7 1d       	adc	r31, r7
    80ae:	85 91       	lpm	r24, Z+
    80b0:	94 91       	lpm	r25, Z
    80b2:	c6 54       	subi	r28, 0x46	; 70
    80b4:	df 4f       	sbci	r29, 0xFF	; 255
    80b6:	e8 81       	ld	r30, Y
    80b8:	f9 81       	ldd	r31, Y+1	; 0x01
    80ba:	ca 5b       	subi	r28, 0xBA	; 186
    80bc:	d0 40       	sbci	r29, 0x00	; 0
    80be:	6e 0f       	add	r22, r30
    80c0:	7f 1f       	adc	r23, r31
    80c2:	c8 54       	subi	r28, 0x48	; 72
    80c4:	df 4f       	sbci	r29, 0xFF	; 255
    80c6:	e8 81       	ld	r30, Y
    80c8:	f9 81       	ldd	r31, Y+1	; 0x01
    80ca:	c8 5b       	subi	r28, 0xB8	; 184
    80cc:	d0 40       	sbci	r29, 0x00	; 0
    80ce:	8e 0f       	add	r24, r30
    80d0:	9f 1f       	adc	r25, r31
    80d2:	0e 94 ab 28 	call	0x5156	; 0x5156 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1197
                     pgm_read_word(&symbol_button_1->size_x), pgm_read_word(&symbol_button_1->size_y), \
                     pgm_read_word(&symbol_button_1->znak_size), pgm_read_word(&symbol_button_1->znak));
    }
    if (click_x > 0 && click_y > 0)
    80d6:	c0 54       	subi	r28, 0x40	; 64
    80d8:	df 4f       	sbci	r29, 0xFF	; 255
    80da:	28 81       	ld	r18, Y
    80dc:	39 81       	ldd	r19, Y+1	; 0x01
    80de:	c0 5c       	subi	r28, 0xC0	; 192
    80e0:	d0 40       	sbci	r29, 0x00	; 0
    80e2:	23 2b       	or	r18, r19
    80e4:	09 f4       	brne	.+2      	; 0x80e8 <draw_menu(bool)+0xe12>
    80e6:	61 c0       	rjmp	.+194    	; 0x81aa <draw_menu(bool)+0xed4>
    80e8:	ce 53       	subi	r28, 0x3E	; 62
    80ea:	df 4f       	sbci	r29, 0xFF	; 255
    80ec:	48 81       	ld	r20, Y
    80ee:	59 81       	ldd	r21, Y+1	; 0x01
    80f0:	c2 5c       	subi	r28, 0xC2	; 194
    80f2:	d0 40       	sbci	r29, 0x00	; 0
    80f4:	45 2b       	or	r20, r21
    80f6:	09 f4       	brne	.+2      	; 0x80fa <draw_menu(bool)+0xe24>
    80f8:	58 c0       	rjmp	.+176    	; 0x81aa <draw_menu(bool)+0xed4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1198
      if (button_click_touch(global_x + pgm_read_word(&symbol_button_1->x), global_y + pgm_read_word(&symbol_button_1->y), pgm_read_word(&symbol_button_1->size_x), pgm_read_word(&symbol_button_1->size_y), click_x, click_y) == true)
    80fa:	f6 01       	movw	r30, r12
    80fc:	e3 57       	subi	r30, 0x73	; 115
    80fe:	fe 4f       	sbci	r31, 0xFE	; 254
    8100:	e6 0d       	add	r30, r6
    8102:	f7 1d       	adc	r31, r7
    8104:	25 91       	lpm	r18, Z+
    8106:	34 91       	lpm	r19, Z
    8108:	f6 01       	movw	r30, r12
    810a:	e5 57       	subi	r30, 0x75	; 117
    810c:	fe 4f       	sbci	r31, 0xFE	; 254
    810e:	e6 0d       	add	r30, r6
    8110:	f7 1d       	adc	r31, r7
    8112:	45 91       	lpm	r20, Z+
    8114:	54 91       	lpm	r21, Z
    8116:	f6 01       	movw	r30, r12
    8118:	e7 57       	subi	r30, 0x77	; 119
    811a:	fe 4f       	sbci	r31, 0xFE	; 254
    811c:	e6 0d       	add	r30, r6
    811e:	f7 1d       	adc	r31, r7
    8120:	65 91       	lpm	r22, Z+
    8122:	74 91       	lpm	r23, Z
    8124:	f6 01       	movw	r30, r12
    8126:	e9 57       	subi	r30, 0x79	; 121
    8128:	fe 4f       	sbci	r31, 0xFE	; 254
    812a:	e6 0d       	add	r30, r6
    812c:	f7 1d       	adc	r31, r7
    812e:	85 91       	lpm	r24, Z+
    8130:	94 91       	lpm	r25, Z
    8132:	c6 54       	subi	r28, 0x46	; 70
    8134:	df 4f       	sbci	r29, 0xFF	; 255
    8136:	e8 81       	ld	r30, Y
    8138:	f9 81       	ldd	r31, Y+1	; 0x01
    813a:	ca 5b       	subi	r28, 0xBA	; 186
    813c:	d0 40       	sbci	r29, 0x00	; 0
    813e:	6e 0f       	add	r22, r30
    8140:	7f 1f       	adc	r23, r31
    8142:	ce 53       	subi	r28, 0x3E	; 62
    8144:	df 4f       	sbci	r29, 0xFF	; 255
    8146:	e8 80       	ld	r14, Y
    8148:	f9 80       	ldd	r15, Y+1	; 0x01
    814a:	c2 5c       	subi	r28, 0xC2	; 194
    814c:	d0 40       	sbci	r29, 0x00	; 0
    814e:	c0 54       	subi	r28, 0x40	; 64
    8150:	df 4f       	sbci	r29, 0xFF	; 255
    8152:	08 81       	ld	r16, Y
    8154:	19 81       	ldd	r17, Y+1	; 0x01
    8156:	c0 5c       	subi	r28, 0xC0	; 192
    8158:	d0 40       	sbci	r29, 0x00	; 0
    815a:	c8 54       	subi	r28, 0x48	; 72
    815c:	df 4f       	sbci	r29, 0xFF	; 255
    815e:	e8 81       	ld	r30, Y
    8160:	f9 81       	ldd	r31, Y+1	; 0x01
    8162:	c8 5b       	subi	r28, 0xB8	; 184
    8164:	d0 40       	sbci	r29, 0x00	; 0
    8166:	8e 0f       	add	r24, r30
    8168:	9f 1f       	adc	r25, r31
    816a:	0e 94 70 21 	call	0x42e0	; 0x42e0 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    816e:	18 2f       	mov	r17, r24
    8170:	88 23       	and	r24, r24
    8172:	d9 f0       	breq	.+54     	; 0x81aa <draw_menu(bool)+0xed4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1200
      {
        fntargs =  pgm_read_word(&symbol_button_1->onclick);
    8174:	f6 01       	movw	r30, r12
    8176:	ef 56       	subi	r30, 0x6F	; 111
    8178:	fe 4f       	sbci	r31, 0xFE	; 254
    817a:	e6 0d       	add	r30, r6
    817c:	f7 1d       	adc	r31, r7
    817e:	25 91       	lpm	r18, Z+
    8180:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1202
        //args = pgm_read_byte(pgm_read_word(&current->args));
        ((fptr_args)fntargs)(pgm_read_byte(&symbol_button_1->args), menu_args1);
    8182:	f6 01       	movw	r30, r12
    8184:	e0 57       	subi	r30, 0x70	; 112
    8186:	fe 4f       	sbci	r31, 0xFE	; 254
    8188:	e6 0d       	add	r30, r6
    818a:	f7 1d       	adc	r31, r7
    818c:	84 91       	lpm	r24, Z
    818e:	cd 54       	subi	r28, 0x4D	; 77
    8190:	df 4f       	sbci	r29, 0xFF	; 255
    8192:	68 81       	ld	r22, Y
    8194:	c3 5b       	subi	r28, 0xB3	; 179
    8196:	d0 40       	sbci	r29, 0x00	; 0
    8198:	70 e0       	ldi	r23, 0x00	; 0
    819a:	90 e0       	ldi	r25, 0x00	; 0
    819c:	f9 01       	movw	r30, r18
    819e:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1203
        ret = true;
    81a0:	c8 53       	subi	r28, 0x38	; 56
    81a2:	df 4f       	sbci	r29, 0xFF	; 255
    81a4:	18 83       	st	Y, r17
    81a6:	c8 5c       	subi	r28, 0xC8	; 200
    81a8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1187
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_symbol_button_1); idx++)
    81aa:	93 94       	inc	r9
    81ac:	40 cf       	rjmp	.-384    	; 0x802e <draw_menu(bool)+0xd58>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1206
        //args = pgm_read_byte(pgm_read_word(&current->args));
        ((fptr_args)fntargs)(pgm_read_byte(&symbol_button_1->args), menu_args1);
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
    81ae:	c8 53       	subi	r28, 0x38	; 56
    81b0:	df 4f       	sbci	r29, 0xFF	; 255
    81b2:	f8 81       	ld	r31, Y
    81b4:	c8 5c       	subi	r28, 0xC8	; 200
    81b6:	d0 40       	sbci	r29, 0x00	; 0
    81b8:	f1 11       	cpse	r31, r1
    81ba:	0c 94 bc 4a 	jmp	0x9578	; 0x9578 <draw_menu(bool)+0x22a2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1208
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_symbol_1); idx++)
    81be:	91 2c       	mov	r9, r1
    81c0:	93 01       	movw	r18, r6
    81c2:	29 5f       	subi	r18, 0xF9	; 249
    81c4:	3d 4f       	sbci	r19, 0xFD	; 253
    81c6:	c0 53       	subi	r28, 0x30	; 48
    81c8:	df 4f       	sbci	r29, 0xFF	; 255
    81ca:	39 83       	std	Y+1, r19	; 0x01
    81cc:	28 83       	st	Y, r18
    81ce:	c0 5d       	subi	r28, 0xD0	; 208
    81d0:	d0 40       	sbci	r29, 0x00	; 0
    81d2:	c0 53       	subi	r28, 0x30	; 48
    81d4:	df 4f       	sbci	r29, 0xFF	; 255
    81d6:	e8 81       	ld	r30, Y
    81d8:	f9 81       	ldd	r31, Y+1	; 0x01
    81da:	c0 5d       	subi	r28, 0xD0	; 208
    81dc:	d0 40       	sbci	r29, 0x00	; 0
    81de:	84 91       	lpm	r24, Z
    81e0:	98 16       	cp	r9, r24
    81e2:	08 f0       	brcs	.+2      	; 0x81e6 <draw_menu(bool)+0xf10>
    81e4:	08 c3       	rjmp	.+1552   	; 0x87f6 <draw_menu(bool)+0x1520>
    81e6:	f6 e1       	ldi	r31, 0x16	; 22
    81e8:	9f 9e       	mul	r9, r31
    81ea:	60 01       	movw	r12, r0
    81ec:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1210
  {
    dyn_symbol_1 = &current->dyn_symbol_1[idx];
    81ee:	c6 01       	movw	r24, r12
    81f0:	8e 55       	subi	r24, 0x5E	; 94
    81f2:	9e 4f       	sbci	r25, 0xFE	; 254
    81f4:	93 01       	movw	r18, r6
    81f6:	28 0f       	add	r18, r24
    81f8:	39 1f       	adc	r19, r25
    81fa:	c2 53       	subi	r28, 0x32	; 50
    81fc:	df 4f       	sbci	r29, 0xFF	; 255
    81fe:	39 83       	std	Y+1, r19	; 0x01
    8200:	28 83       	st	Y, r18
    8202:	ce 5c       	subi	r28, 0xCE	; 206
    8204:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1211
    rdr = pgm_read_byte(&dyn_symbol_1->redraw_class);
    8206:	f6 01       	movw	r30, r12
    8208:	e9 54       	subi	r30, 0x49	; 73
    820a:	fe 4f       	sbci	r31, 0xFE	; 254
    820c:	e6 0d       	add	r30, r6
    820e:	f7 1d       	adc	r31, r7
    8210:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1212
    if (enable_redraw(rdr, redraw_class) == true)
    8212:	c5 53       	subi	r28, 0x35	; 53
    8214:	df 4f       	sbci	r29, 0xFF	; 255
    8216:	68 81       	ld	r22, Y
    8218:	cb 5c       	subi	r28, 0xCB	; 203
    821a:	d0 40       	sbci	r29, 0x00	; 0
    821c:	0e 94 e6 22 	call	0x45cc	; 0x45cc <enable_redraw(unsigned char, unsigned char)>
    8220:	88 23       	and	r24, r24
    8222:	09 f4       	brne	.+2      	; 0x8226 <draw_menu(bool)+0xf50>
    8224:	70 c1       	rjmp	.+736    	; 0x8506 <draw_menu(bool)+0x1230>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1214
    {
      loop_i = 0;
    8226:	ce 54       	subi	r28, 0x4E	; 78
    8228:	df 4f       	sbci	r29, 0xFF	; 255
    822a:	18 82       	st	Y, r1
    822c:	c2 5b       	subi	r28, 0xB2	; 178
    822e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1217
      loop_t = 0;
      loop_r = 0;
      rfnt =  pgm_read_word(&dyn_symbol_1->function_for_max_items);
    8230:	f6 01       	movw	r30, r12
    8232:	eb 54       	subi	r30, 0x4B	; 75
    8234:	fe 4f       	sbci	r31, 0xFE	; 254
    8236:	e6 0d       	add	r30, r6
    8238:	f7 1d       	adc	r31, r7
    823a:	25 91       	lpm	r18, Z+
    823c:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1218
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_symbol_1->args), menu_args1);
    823e:	f6 01       	movw	r30, r12
    8240:	e0 55       	subi	r30, 0x50	; 80
    8242:	fe 4f       	sbci	r31, 0xFE	; 254
    8244:	e6 0d       	add	r30, r6
    8246:	f7 1d       	adc	r31, r7
    8248:	85 91       	lpm	r24, Z+
    824a:	94 91       	lpm	r25, Z
    824c:	cd 54       	subi	r28, 0x4D	; 77
    824e:	df 4f       	sbci	r29, 0xFF	; 255
    8250:	68 81       	ld	r22, Y
    8252:	c3 5b       	subi	r28, 0xB3	; 179
    8254:	d0 40       	sbci	r29, 0x00	; 0
    8256:	70 e0       	ldi	r23, 0x00	; 0
    8258:	f9 01       	movw	r30, r18
    825a:	19 95       	eicall
    825c:	cf 54       	subi	r28, 0x4F	; 79
    825e:	df 4f       	sbci	r29, 0xFF	; 255
    8260:	88 83       	st	Y, r24
    8262:	c1 5b       	subi	r28, 0xB1	; 177
    8264:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1219
      gss = pgm_read_word(&dyn_symbol_1->get_status_string);
    8266:	f6 01       	movw	r30, r12
    8268:	ef 54       	subi	r30, 0x4F	; 79
    826a:	fe 4f       	sbci	r31, 0xFE	; 254
    826c:	e6 0d       	add	r30, r6
    826e:	f7 1d       	adc	r31, r7
    8270:	25 91       	lpm	r18, Z+
    8272:	34 91       	lpm	r19, Z
    8274:	ce 52       	subi	r28, 0x2E	; 46
    8276:	df 4f       	sbci	r29, 0xFF	; 255
    8278:	39 83       	std	Y+1, r19	; 0x01
    827a:	28 83       	st	Y, r18
    827c:	c2 5d       	subi	r28, 0xD2	; 210
    827e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1223
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
    8280:	16 01       	movw	r2, r12
    8282:	3c e5       	ldi	r19, 0x5C	; 92
    8284:	23 1a       	sub	r2, r19
    8286:	3e ef       	ldi	r19, 0xFE	; 254
    8288:	33 0a       	sbc	r3, r19
    828a:	26 0c       	add	r2, r6
    828c:	37 1c       	adc	r3, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1224
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
    828e:	c6 01       	movw	r24, r12
    8290:	83 55       	subi	r24, 0x53	; 83
    8292:	9e 4f       	sbci	r25, 0xFE	; 254
    8294:	a3 01       	movw	r20, r6
    8296:	48 0f       	add	r20, r24
    8298:	59 1f       	adc	r21, r25
    829a:	ca 54       	subi	r28, 0x4A	; 74
    829c:	df 4f       	sbci	r29, 0xFF	; 255
    829e:	59 83       	std	Y+1, r21	; 0x01
    82a0:	48 83       	st	Y, r20
    82a2:	c6 5b       	subi	r28, 0xB6	; 182
    82a4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1226
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
    82a6:	01 97       	sbiw	r24, 0x01	; 1
    82a8:	f3 01       	movw	r30, r6
    82aa:	e8 0f       	add	r30, r24
    82ac:	f9 1f       	adc	r31, r25
    82ae:	c4 54       	subi	r28, 0x44	; 68
    82b0:	df 4f       	sbci	r29, 0xFF	; 255
    82b2:	f9 83       	std	Y+1, r31	; 0x01
    82b4:	e8 83       	st	Y, r30
    82b6:	cc 5b       	subi	r28, 0xBC	; 188
    82b8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1231
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
    82ba:	01 97       	sbiw	r24, 0x01	; 1
    82bc:	93 01       	movw	r18, r6
    82be:	28 0f       	add	r18, r24
    82c0:	39 1f       	adc	r19, r25
    82c2:	c2 54       	subi	r28, 0x42	; 66
    82c4:	df 4f       	sbci	r29, 0xFF	; 255
    82c6:	39 83       	std	Y+1, r19	; 0x01
    82c8:	28 83       	st	Y, r18
    82ca:	ce 5b       	subi	r28, 0xBE	; 190
    82cc:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1239
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL_NEW_LINE)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_button_count) - 1))
    82ce:	03 96       	adiw	r24, 0x03	; 3
    82d0:	a3 01       	movw	r20, r6
    82d2:	48 0f       	add	r20, r24
    82d4:	59 1f       	adc	r21, r25
    82d6:	cc 53       	subi	r28, 0x3C	; 60
    82d8:	df 4f       	sbci	r29, 0xFF	; 255
    82da:	59 83       	std	Y+1, r21	; 0x01
    82dc:	48 83       	st	Y, r20
    82de:	c4 5c       	subi	r28, 0xC4	; 196
    82e0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1247
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, str1, str2);
        char z = str1[0];
        button_click_3(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), pgm_read_byte(&dyn_symbol_1->font_size), z);
    82e2:	04 97       	sbiw	r24, 0x04	; 4
    82e4:	f3 01       	movw	r30, r6
    82e6:	e8 0f       	add	r30, r24
    82e8:	f9 1f       	adc	r31, r25
    82ea:	ca 53       	subi	r28, 0x3A	; 58
    82ec:	df 4f       	sbci	r29, 0xFF	; 255
    82ee:	f9 83       	std	Y+1, r31	; 0x01
    82f0:	e8 83       	st	Y, r30
    82f2:	c6 5c       	subi	r28, 0xC6	; 198
    82f4:	d0 40       	sbci	r29, 0x00	; 0
    82f6:	02 97       	sbiw	r24, 0x02	; 2
    82f8:	93 01       	movw	r18, r6
    82fa:	28 0f       	add	r18, r24
    82fc:	39 1f       	adc	r19, r25
    82fe:	c7 53       	subi	r28, 0x37	; 55
    8300:	df 4f       	sbci	r29, 0xFF	; 255
    8302:	39 83       	std	Y+1, r19	; 0x01
    8304:	28 83       	st	Y, r18
    8306:	c9 5c       	subi	r28, 0xC9	; 201
    8308:	d0 40       	sbci	r29, 0x00	; 0
    830a:	02 97       	sbiw	r24, 0x02	; 2
    830c:	a3 01       	movw	r20, r6
    830e:	48 0f       	add	r20, r24
    8310:	59 1f       	adc	r21, r25
    8312:	c4 53       	subi	r28, 0x34	; 52
    8314:	df 4f       	sbci	r29, 0xFF	; 255
    8316:	59 83       	std	Y+1, r21	; 0x01
    8318:	48 83       	st	Y, r20
    831a:	cc 5c       	subi	r28, 0xCC	; 204
    831c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1216
    rdr = pgm_read_byte(&dyn_symbol_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      loop_i = 0;
      loop_t = 0;
      loop_r = 0;
    831e:	81 2c       	mov	r8, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1215
    dyn_symbol_1 = &current->dyn_symbol_1[idx];
    rdr = pgm_read_byte(&dyn_symbol_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      loop_i = 0;
      loop_t = 0;
    8320:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1220
      loop_r = 0;
      rfnt =  pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_symbol_1->args), menu_args1);
      gss = pgm_read_word(&dyn_symbol_1->get_status_string);
      while (loop_i < loop_cnt)
    8322:	ce 54       	subi	r28, 0x4E	; 78
    8324:	df 4f       	sbci	r29, 0xFF	; 255
    8326:	88 81       	ld	r24, Y
    8328:	c2 5b       	subi	r28, 0xB2	; 178
    832a:	d0 40       	sbci	r29, 0x00	; 0
    832c:	cf 54       	subi	r28, 0x4F	; 79
    832e:	df 4f       	sbci	r29, 0xFF	; 255
    8330:	98 81       	ld	r25, Y
    8332:	c1 5b       	subi	r28, 0xB1	; 177
    8334:	d0 40       	sbci	r29, 0x00	; 0
    8336:	89 17       	cp	r24, r25
    8338:	08 f0       	brcs	.+2      	; 0x833c <draw_menu(bool)+0x1066>
    833a:	e5 c0       	rjmp	.+458    	; 0x8506 <draw_menu(bool)+0x1230>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1222
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
    833c:	c2 53       	subi	r28, 0x32	; 50
    833e:	df 4f       	sbci	r29, 0xFF	; 255
    8340:	e8 81       	ld	r30, Y
    8342:	f9 81       	ldd	r31, Y+1	; 0x01
    8344:	ce 5c       	subi	r28, 0xCE	; 206
    8346:	d0 40       	sbci	r29, 0x00	; 0
    8348:	a5 90       	lpm	r10, Z+
    834a:	b4 90       	lpm	r11, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1223
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
    834c:	f1 01       	movw	r30, r2
    834e:	45 90       	lpm	r4, Z+
    8350:	54 90       	lpm	r5, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1224
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
    8352:	ca 54       	subi	r28, 0x4A	; 74
    8354:	df 4f       	sbci	r29, 0xFF	; 255
    8356:	e8 81       	ld	r30, Y
    8358:	f9 81       	ldd	r31, Y+1	; 0x01
    835a:	c6 5b       	subi	r28, 0xB6	; 182
    835c:	d0 40       	sbci	r29, 0x00	; 0
    835e:	94 91       	lpm	r25, Z
    8360:	99 23       	and	r25, r25
    8362:	09 f4       	brne	.+2      	; 0x8366 <draw_menu(bool)+0x1090>
    8364:	9b c0       	rjmp	.+310    	; 0x849c <draw_menu(bool)+0x11c6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1223
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_symbol_1->args), menu_args1);
      gss = pgm_read_word(&dyn_symbol_1->get_status_string);
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
    8366:	c6 54       	subi	r28, 0x46	; 70
    8368:	df 4f       	sbci	r29, 0xFF	; 255
    836a:	28 81       	ld	r18, Y
    836c:	39 81       	ldd	r19, Y+1	; 0x01
    836e:	ca 5b       	subi	r28, 0xBA	; 186
    8370:	d0 40       	sbci	r29, 0x00	; 0
    8372:	42 0e       	add	r4, r18
    8374:	53 1e       	adc	r5, r19
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1229
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
    8376:	ca 54       	subi	r28, 0x4A	; 74
    8378:	df 4f       	sbci	r29, 0xFF	; 255
    837a:	e8 81       	ld	r30, Y
    837c:	f9 81       	ldd	r31, Y+1	; 0x01
    837e:	c6 5b       	subi	r28, 0xB6	; 182
    8380:	d0 40       	sbci	r29, 0x00	; 0
    8382:	94 91       	lpm	r25, Z
    8384:	91 30       	cpi	r25, 0x01	; 1
    8386:	09 f4       	brne	.+2      	; 0x838a <draw_menu(bool)+0x10b4>
    8388:	a1 c0       	rjmp	.+322    	; 0x84cc <draw_menu(bool)+0x11f6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1222
      rfnt =  pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_symbol_1->args), menu_args1);
      gss = pgm_read_word(&dyn_symbol_1->get_status_string);
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
    838a:	c8 54       	subi	r28, 0x48	; 72
    838c:	df 4f       	sbci	r29, 0xFF	; 255
    838e:	28 81       	ld	r18, Y
    8390:	39 81       	ldd	r19, Y+1	; 0x01
    8392:	c8 5b       	subi	r28, 0xB8	; 184
    8394:	d0 40       	sbci	r29, 0x00	; 0
    8396:	a2 0e       	add	r10, r18
    8398:	b3 1e       	adc	r11, r19
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1234
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL_NEW_LINE)
    839a:	ca 54       	subi	r28, 0x4A	; 74
    839c:	df 4f       	sbci	r29, 0xFF	; 255
    839e:	e8 81       	ld	r30, Y
    83a0:	f9 81       	ldd	r31, Y+1	; 0x01
    83a2:	c6 5b       	subi	r28, 0xB6	; 182
    83a4:	d0 40       	sbci	r29, 0x00	; 0
    83a6:	94 91       	lpm	r25, Z
    83a8:	92 30       	cpi	r25, 0x02	; 2
    83aa:	09 f0       	breq	.+2      	; 0x83ae <draw_menu(bool)+0x10d8>
    83ac:	3d c0       	rjmp	.+122    	; 0x8428 <draw_menu(bool)+0x1152>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1236
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
    83ae:	c2 53       	subi	r28, 0x32	; 50
    83b0:	df 4f       	sbci	r29, 0xFF	; 255
    83b2:	e8 81       	ld	r30, Y
    83b4:	f9 81       	ldd	r31, Y+1	; 0x01
    83b6:	ce 5c       	subi	r28, 0xCE	; 206
    83b8:	d0 40       	sbci	r29, 0x00	; 0
    83ba:	a5 90       	lpm	r10, Z+
    83bc:	b4 90       	lpm	r11, Z
    83be:	c2 54       	subi	r28, 0x42	; 66
    83c0:	df 4f       	sbci	r29, 0xFF	; 255
    83c2:	e8 81       	ld	r30, Y
    83c4:	f9 81       	ldd	r31, Y+1	; 0x01
    83c6:	ce 5b       	subi	r28, 0xBE	; 190
    83c8:	d0 40       	sbci	r29, 0x00	; 0
    83ca:	94 91       	lpm	r25, Z
    83cc:	c8 54       	subi	r28, 0x48	; 72
    83ce:	df 4f       	sbci	r29, 0xFF	; 255
    83d0:	28 81       	ld	r18, Y
    83d2:	39 81       	ldd	r19, Y+1	; 0x01
    83d4:	c8 5b       	subi	r28, 0xB8	; 184
    83d6:	d0 40       	sbci	r29, 0x00	; 0
    83d8:	a2 0e       	add	r10, r18
    83da:	b3 1e       	adc	r11, r19
    83dc:	91 9f       	mul	r25, r17
    83de:	a0 0c       	add	r10, r0
    83e0:	b1 1c       	adc	r11, r1
    83e2:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1237
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
    83e4:	f1 01       	movw	r30, r2
    83e6:	45 90       	lpm	r4, Z+
    83e8:	54 90       	lpm	r5, Z
    83ea:	c4 54       	subi	r28, 0x44	; 68
    83ec:	df 4f       	sbci	r29, 0xFF	; 255
    83ee:	e8 81       	ld	r30, Y
    83f0:	f9 81       	ldd	r31, Y+1	; 0x01
    83f2:	cc 5b       	subi	r28, 0xBC	; 188
    83f4:	d0 40       	sbci	r29, 0x00	; 0
    83f6:	94 91       	lpm	r25, Z
    83f8:	c6 54       	subi	r28, 0x46	; 70
    83fa:	df 4f       	sbci	r29, 0xFF	; 255
    83fc:	28 81       	ld	r18, Y
    83fe:	39 81       	ldd	r19, Y+1	; 0x01
    8400:	ca 5b       	subi	r28, 0xBA	; 186
    8402:	d0 40       	sbci	r29, 0x00	; 0
    8404:	42 0e       	add	r4, r18
    8406:	53 1e       	adc	r5, r19
    8408:	98 9d       	mul	r25, r8
    840a:	40 0c       	add	r4, r0
    840c:	51 1c       	adc	r5, r1
    840e:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1238
          loop_t++;
    8410:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1239
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_button_count) - 1))
    8412:	cc 53       	subi	r28, 0x3C	; 60
    8414:	df 4f       	sbci	r29, 0xFF	; 255
    8416:	e8 81       	ld	r30, Y
    8418:	f9 81       	ldd	r31, Y+1	; 0x01
    841a:	c4 5c       	subi	r28, 0xC4	; 196
    841c:	d0 40       	sbci	r29, 0x00	; 0
    841e:	94 91       	lpm	r25, Z
    8420:	19 17       	cp	r17, r25
    8422:	10 f0       	brcs	.+4      	; 0x8428 <draw_menu(bool)+0x1152>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1242
          {
            loop_t = 0;
            loop_r++;
    8424:	83 94       	inc	r8
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1241
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_button_count) - 1))
          {
            loop_t = 0;
    8426:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1245
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, str1, str2);
    8428:	9e 01       	movw	r18, r28
    842a:	2f 57       	subi	r18, 0x7F	; 127
    842c:	3f 4f       	sbci	r19, 0xFF	; 255
    842e:	ae 01       	movw	r20, r28
    8430:	4f 5f       	subi	r20, 0xFF	; 255
    8432:	5f 4f       	sbci	r21, 0xFF	; 255
    8434:	cd 54       	subi	r28, 0x4D	; 77
    8436:	df 4f       	sbci	r29, 0xFF	; 255
    8438:	68 81       	ld	r22, Y
    843a:	c3 5b       	subi	r28, 0xB3	; 179
    843c:	d0 40       	sbci	r29, 0x00	; 0
    843e:	ce 52       	subi	r28, 0x2E	; 46
    8440:	df 4f       	sbci	r29, 0xFF	; 255
    8442:	e8 81       	ld	r30, Y
    8444:	f9 81       	ldd	r31, Y+1	; 0x01
    8446:	c2 5d       	subi	r28, 0xD2	; 210
    8448:	d0 40       	sbci	r29, 0x00	; 0
    844a:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1247
        char z = str1[0];
        button_click_3(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), pgm_read_byte(&dyn_symbol_1->font_size), z);
    844c:	ca 53       	subi	r28, 0x3A	; 58
    844e:	df 4f       	sbci	r29, 0xFF	; 255
    8450:	e8 81       	ld	r30, Y
    8452:	f9 81       	ldd	r31, Y+1	; 0x01
    8454:	c6 5c       	subi	r28, 0xC6	; 198
    8456:	d0 40       	sbci	r29, 0x00	; 0
    8458:	04 91       	lpm	r16, Z
    845a:	c7 53       	subi	r28, 0x37	; 55
    845c:	df 4f       	sbci	r29, 0xFF	; 255
    845e:	e8 81       	ld	r30, Y
    8460:	f9 81       	ldd	r31, Y+1	; 0x01
    8462:	c9 5c       	subi	r28, 0xC9	; 201
    8464:	d0 40       	sbci	r29, 0x00	; 0
    8466:	25 91       	lpm	r18, Z+
    8468:	34 91       	lpm	r19, Z
    846a:	c4 53       	subi	r28, 0x34	; 52
    846c:	df 4f       	sbci	r29, 0xFF	; 255
    846e:	e8 81       	ld	r30, Y
    8470:	f9 81       	ldd	r31, Y+1	; 0x01
    8472:	cc 5c       	subi	r28, 0xCC	; 204
    8474:	d0 40       	sbci	r29, 0x00	; 0
    8476:	45 91       	lpm	r20, Z+
    8478:	54 91       	lpm	r21, Z
    847a:	e9 80       	ldd	r14, Y+1	; 0x01
    847c:	b2 01       	movw	r22, r4
    847e:	c5 01       	movw	r24, r10
    8480:	0e 94 ab 28 	call	0x5156	; 0x5156 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1248
        loop_i++;
    8484:	ce 54       	subi	r28, 0x4E	; 78
    8486:	df 4f       	sbci	r29, 0xFF	; 255
    8488:	88 81       	ld	r24, Y
    848a:	c2 5b       	subi	r28, 0xB2	; 178
    848c:	d0 40       	sbci	r29, 0x00	; 0
    848e:	8f 5f       	subi	r24, 0xFF	; 255
    8490:	ce 54       	subi	r28, 0x4E	; 78
    8492:	df 4f       	sbci	r29, 0xFF	; 255
    8494:	88 83       	st	Y, r24
    8496:	c2 5b       	subi	r28, 0xB2	; 178
    8498:	d0 40       	sbci	r29, 0x00	; 0
    849a:	43 cf       	rjmp	.-378    	; 0x8322 <draw_menu(bool)+0x104c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1226
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
    849c:	f1 01       	movw	r30, r2
    849e:	45 90       	lpm	r4, Z+
    84a0:	54 90       	lpm	r5, Z
    84a2:	c4 54       	subi	r28, 0x44	; 68
    84a4:	df 4f       	sbci	r29, 0xFF	; 255
    84a6:	e8 81       	ld	r30, Y
    84a8:	f9 81       	ldd	r31, Y+1	; 0x01
    84aa:	cc 5b       	subi	r28, 0xBC	; 188
    84ac:	d0 40       	sbci	r29, 0x00	; 0
    84ae:	94 91       	lpm	r25, Z
    84b0:	c6 54       	subi	r28, 0x46	; 70
    84b2:	df 4f       	sbci	r29, 0xFF	; 255
    84b4:	28 81       	ld	r18, Y
    84b6:	39 81       	ldd	r19, Y+1	; 0x01
    84b8:	ca 5b       	subi	r28, 0xBA	; 186
    84ba:	d0 40       	sbci	r29, 0x00	; 0
    84bc:	42 0e       	add	r4, r18
    84be:	53 1e       	adc	r5, r19
    84c0:	91 9f       	mul	r25, r17
    84c2:	40 0c       	add	r4, r0
    84c4:	51 1c       	adc	r5, r1
    84c6:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1227
          loop_t++;
    84c8:	1f 5f       	subi	r17, 0xFF	; 255
    84ca:	55 cf       	rjmp	.-342    	; 0x8376 <draw_menu(bool)+0x10a0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1231
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
    84cc:	c2 53       	subi	r28, 0x32	; 50
    84ce:	df 4f       	sbci	r29, 0xFF	; 255
    84d0:	e8 81       	ld	r30, Y
    84d2:	f9 81       	ldd	r31, Y+1	; 0x01
    84d4:	ce 5c       	subi	r28, 0xCE	; 206
    84d6:	d0 40       	sbci	r29, 0x00	; 0
    84d8:	a5 90       	lpm	r10, Z+
    84da:	b4 90       	lpm	r11, Z
    84dc:	c2 54       	subi	r28, 0x42	; 66
    84de:	df 4f       	sbci	r29, 0xFF	; 255
    84e0:	e8 81       	ld	r30, Y
    84e2:	f9 81       	ldd	r31, Y+1	; 0x01
    84e4:	ce 5b       	subi	r28, 0xBE	; 190
    84e6:	d0 40       	sbci	r29, 0x00	; 0
    84e8:	94 91       	lpm	r25, Z
    84ea:	c8 54       	subi	r28, 0x48	; 72
    84ec:	df 4f       	sbci	r29, 0xFF	; 255
    84ee:	28 81       	ld	r18, Y
    84f0:	39 81       	ldd	r19, Y+1	; 0x01
    84f2:	c8 5b       	subi	r28, 0xB8	; 184
    84f4:	d0 40       	sbci	r29, 0x00	; 0
    84f6:	a2 0e       	add	r10, r18
    84f8:	b3 1e       	adc	r11, r19
    84fa:	91 9f       	mul	r25, r17
    84fc:	a0 0c       	add	r10, r0
    84fe:	b1 1c       	adc	r11, r1
    8500:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1232
          loop_t++;
    8502:	1f 5f       	subi	r17, 0xFF	; 255
    8504:	4a cf       	rjmp	.-364    	; 0x839a <draw_menu(bool)+0x10c4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1251
        char z = str1[0];
        button_click_3(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), pgm_read_byte(&dyn_symbol_1->font_size), z);
        loop_i++;
      }
    }
    if (click_x > 0 && click_y > 0)
    8506:	c0 54       	subi	r28, 0x40	; 64
    8508:	df 4f       	sbci	r29, 0xFF	; 255
    850a:	28 81       	ld	r18, Y
    850c:	39 81       	ldd	r19, Y+1	; 0x01
    850e:	c0 5c       	subi	r28, 0xC0	; 192
    8510:	d0 40       	sbci	r29, 0x00	; 0
    8512:	23 2b       	or	r18, r19
    8514:	09 f4       	brne	.+2      	; 0x8518 <draw_menu(bool)+0x1242>
    8516:	36 c1       	rjmp	.+620    	; 0x8784 <draw_menu(bool)+0x14ae>
    8518:	ce 53       	subi	r28, 0x3E	; 62
    851a:	df 4f       	sbci	r29, 0xFF	; 255
    851c:	48 81       	ld	r20, Y
    851e:	59 81       	ldd	r21, Y+1	; 0x01
    8520:	c2 5c       	subi	r28, 0xC2	; 194
    8522:	d0 40       	sbci	r29, 0x00	; 0
    8524:	45 2b       	or	r20, r21
    8526:	09 f4       	brne	.+2      	; 0x852a <draw_menu(bool)+0x1254>
    8528:	2d c1       	rjmp	.+602    	; 0x8784 <draw_menu(bool)+0x14ae>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1253
    {
      loop_i = 0;
    852a:	ce 54       	subi	r28, 0x4E	; 78
    852c:	df 4f       	sbci	r29, 0xFF	; 255
    852e:	18 82       	st	Y, r1
    8530:	c2 5b       	subi	r28, 0xB2	; 178
    8532:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1256
      loop_t = 0;
      loop_r = 0;
      rfnt =  pgm_read_word(&dyn_symbol_1->function_for_max_items);
    8534:	f6 01       	movw	r30, r12
    8536:	eb 54       	subi	r30, 0x4B	; 75
    8538:	fe 4f       	sbci	r31, 0xFE	; 254
    853a:	e6 0d       	add	r30, r6
    853c:	f7 1d       	adc	r31, r7
    853e:	25 91       	lpm	r18, Z+
    8540:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1257
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_symbol_1->args), menu_args1);
    8542:	c6 01       	movw	r24, r12
    8544:	80 55       	subi	r24, 0x50	; 80
    8546:	9e 4f       	sbci	r25, 0xFE	; 254
    8548:	f3 01       	movw	r30, r6
    854a:	e8 0f       	add	r30, r24
    854c:	f9 1f       	adc	r31, r25
    854e:	c4 54       	subi	r28, 0x44	; 68
    8550:	df 4f       	sbci	r29, 0xFF	; 255
    8552:	f9 83       	std	Y+1, r31	; 0x01
    8554:	e8 83       	st	Y, r30
    8556:	cc 5b       	subi	r28, 0xBC	; 188
    8558:	d0 40       	sbci	r29, 0x00	; 0
    855a:	85 91       	lpm	r24, Z+
    855c:	94 91       	lpm	r25, Z
    855e:	cd 54       	subi	r28, 0x4D	; 77
    8560:	df 4f       	sbci	r29, 0xFF	; 255
    8562:	68 81       	ld	r22, Y
    8564:	c3 5b       	subi	r28, 0xB3	; 179
    8566:	d0 40       	sbci	r29, 0x00	; 0
    8568:	70 e0       	ldi	r23, 0x00	; 0
    856a:	f9 01       	movw	r30, r18
    856c:	19 95       	eicall
    856e:	48 2e       	mov	r4, r24
    8570:	cf 54       	subi	r28, 0x4F	; 79
    8572:	df 4f       	sbci	r29, 0xFF	; 255
    8574:	88 83       	st	Y, r24
    8576:	c1 5b       	subi	r28, 0xB1	; 177
    8578:	d0 40       	sbci	r29, 0x00	; 0
    857a:	ce 54       	subi	r28, 0x4E	; 78
    857c:	df 4f       	sbci	r29, 0xFF	; 255
    857e:	58 80       	ld	r5, Y
    8580:	c2 5b       	subi	r28, 0xB2	; 178
    8582:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1261
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
    8584:	16 01       	movw	r2, r12
    8586:	fc e5       	ldi	r31, 0x5C	; 92
    8588:	2f 1a       	sub	r2, r31
    858a:	fe ef       	ldi	r31, 0xFE	; 254
    858c:	3f 0a       	sbc	r3, r31
    858e:	26 0c       	add	r2, r6
    8590:	37 1c       	adc	r3, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1262
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
    8592:	c6 01       	movw	r24, r12
    8594:	83 55       	subi	r24, 0x53	; 83
    8596:	9e 4f       	sbci	r25, 0xFE	; 254
    8598:	93 01       	movw	r18, r6
    859a:	28 0f       	add	r18, r24
    859c:	39 1f       	adc	r19, r25
    859e:	ca 54       	subi	r28, 0x4A	; 74
    85a0:	df 4f       	sbci	r29, 0xFF	; 255
    85a2:	39 83       	std	Y+1, r19	; 0x01
    85a4:	28 83       	st	Y, r18
    85a6:	c6 5b       	subi	r28, 0xB6	; 182
    85a8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1264
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
    85aa:	01 97       	sbiw	r24, 0x01	; 1
    85ac:	a3 01       	movw	r20, r6
    85ae:	48 0f       	add	r20, r24
    85b0:	59 1f       	adc	r21, r25
    85b2:	c2 54       	subi	r28, 0x42	; 66
    85b4:	df 4f       	sbci	r29, 0xFF	; 255
    85b6:	59 83       	std	Y+1, r21	; 0x01
    85b8:	48 83       	st	Y, r20
    85ba:	ce 5b       	subi	r28, 0xBE	; 190
    85bc:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1269
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
    85be:	01 97       	sbiw	r24, 0x01	; 1
    85c0:	f3 01       	movw	r30, r6
    85c2:	e8 0f       	add	r30, r24
    85c4:	f9 1f       	adc	r31, r25
    85c6:	cc 53       	subi	r28, 0x3C	; 60
    85c8:	df 4f       	sbci	r29, 0xFF	; 255
    85ca:	f9 83       	std	Y+1, r31	; 0x01
    85cc:	e8 83       	st	Y, r30
    85ce:	c4 5c       	subi	r28, 0xC4	; 196
    85d0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1277
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL_NEW_LINE)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_button_count) - 1))
    85d2:	03 96       	adiw	r24, 0x03	; 3
    85d4:	93 01       	movw	r18, r6
    85d6:	28 0f       	add	r18, r24
    85d8:	39 1f       	adc	r19, r25
    85da:	ca 53       	subi	r28, 0x3A	; 58
    85dc:	df 4f       	sbci	r29, 0xFF	; 255
    85de:	39 83       	std	Y+1, r19	; 0x01
    85e0:	28 83       	st	Y, r18
    85e2:	c6 5c       	subi	r28, 0xC6	; 198
    85e4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1283
          {
            loop_t = 0;
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), click_x, click_y) == true)
    85e6:	06 97       	sbiw	r24, 0x06	; 6
    85e8:	a3 01       	movw	r20, r6
    85ea:	48 0f       	add	r20, r24
    85ec:	59 1f       	adc	r21, r25
    85ee:	c7 53       	subi	r28, 0x37	; 55
    85f0:	df 4f       	sbci	r29, 0xFF	; 255
    85f2:	59 83       	std	Y+1, r21	; 0x01
    85f4:	48 83       	st	Y, r20
    85f6:	c9 5c       	subi	r28, 0xC9	; 201
    85f8:	d0 40       	sbci	r29, 0x00	; 0
    85fa:	02 97       	sbiw	r24, 0x02	; 2
    85fc:	f3 01       	movw	r30, r6
    85fe:	e8 0f       	add	r30, r24
    8600:	f9 1f       	adc	r31, r25
    8602:	c4 53       	subi	r28, 0x34	; 52
    8604:	df 4f       	sbci	r29, 0xFF	; 255
    8606:	f9 83       	std	Y+1, r31	; 0x01
    8608:	e8 83       	st	Y, r30
    860a:	cc 5c       	subi	r28, 0xCC	; 204
    860c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1255
    }
    if (click_x > 0 && click_y > 0)
    {
      loop_i = 0;
      loop_t = 0;
      loop_r = 0;
    860e:	a1 2c       	mov	r10, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1254
      }
    }
    if (click_x > 0 && click_y > 0)
    {
      loop_i = 0;
      loop_t = 0;
    8610:	b1 2c       	mov	r11, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1258
      loop_r = 0;
      rfnt =  pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_symbol_1->args), menu_args1);
      while (loop_i < loop_cnt)
    8612:	54 14       	cp	r5, r4
    8614:	08 f0       	brcs	.+2      	; 0x8618 <draw_menu(bool)+0x1342>
    8616:	b6 c0       	rjmp	.+364    	; 0x8784 <draw_menu(bool)+0x14ae>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1260
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
    8618:	c2 53       	subi	r28, 0x32	; 50
    861a:	df 4f       	sbci	r29, 0xFF	; 255
    861c:	e8 81       	ld	r30, Y
    861e:	f9 81       	ldd	r31, Y+1	; 0x01
    8620:	ce 5c       	subi	r28, 0xCE	; 206
    8622:	d0 40       	sbci	r29, 0x00	; 0
    8624:	85 91       	lpm	r24, Z+
    8626:	94 91       	lpm	r25, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1261
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
    8628:	f1 01       	movw	r30, r2
    862a:	65 91       	lpm	r22, Z+
    862c:	74 91       	lpm	r23, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1262
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
    862e:	ca 54       	subi	r28, 0x4A	; 74
    8630:	df 4f       	sbci	r29, 0xFF	; 255
    8632:	e8 81       	ld	r30, Y
    8634:	f9 81       	ldd	r31, Y+1	; 0x01
    8636:	c6 5b       	subi	r28, 0xB6	; 182
    8638:	d0 40       	sbci	r29, 0x00	; 0
    863a:	24 91       	lpm	r18, Z
    863c:	22 23       	and	r18, r18
    863e:	09 f4       	brne	.+2      	; 0x8642 <draw_menu(bool)+0x136c>
    8640:	a5 c0       	rjmp	.+330    	; 0x878c <draw_menu(bool)+0x14b6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1261
      rfnt =  pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_symbol_1->args), menu_args1);
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
    8642:	c6 54       	subi	r28, 0x46	; 70
    8644:	df 4f       	sbci	r29, 0xFF	; 255
    8646:	28 81       	ld	r18, Y
    8648:	39 81       	ldd	r19, Y+1	; 0x01
    864a:	ca 5b       	subi	r28, 0xBA	; 186
    864c:	d0 40       	sbci	r29, 0x00	; 0
    864e:	62 0f       	add	r22, r18
    8650:	73 1f       	adc	r23, r19
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1267
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
    8652:	ca 54       	subi	r28, 0x4A	; 74
    8654:	df 4f       	sbci	r29, 0xFF	; 255
    8656:	e8 81       	ld	r30, Y
    8658:	f9 81       	ldd	r31, Y+1	; 0x01
    865a:	c6 5b       	subi	r28, 0xB6	; 182
    865c:	d0 40       	sbci	r29, 0x00	; 0
    865e:	24 91       	lpm	r18, Z
    8660:	21 30       	cpi	r18, 0x01	; 1
    8662:	09 f4       	brne	.+2      	; 0x8666 <draw_menu(bool)+0x1390>
    8664:	ab c0       	rjmp	.+342    	; 0x87bc <draw_menu(bool)+0x14e6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1260
      loop_r = 0;
      rfnt =  pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_symbol_1->args), menu_args1);
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
    8666:	c8 54       	subi	r28, 0x48	; 72
    8668:	df 4f       	sbci	r29, 0xFF	; 255
    866a:	28 81       	ld	r18, Y
    866c:	39 81       	ldd	r19, Y+1	; 0x01
    866e:	c8 5b       	subi	r28, 0xB8	; 184
    8670:	d0 40       	sbci	r29, 0x00	; 0
    8672:	82 0f       	add	r24, r18
    8674:	93 1f       	adc	r25, r19
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1272
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL_NEW_LINE)
    8676:	ca 54       	subi	r28, 0x4A	; 74
    8678:	df 4f       	sbci	r29, 0xFF	; 255
    867a:	e8 81       	ld	r30, Y
    867c:	f9 81       	ldd	r31, Y+1	; 0x01
    867e:	c6 5b       	subi	r28, 0xB6	; 182
    8680:	d0 40       	sbci	r29, 0x00	; 0
    8682:	24 91       	lpm	r18, Z
    8684:	22 30       	cpi	r18, 0x02	; 2
    8686:	09 f0       	breq	.+2      	; 0x868a <draw_menu(bool)+0x13b4>
    8688:	3d c0       	rjmp	.+122    	; 0x8704 <draw_menu(bool)+0x142e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1274
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
    868a:	c2 53       	subi	r28, 0x32	; 50
    868c:	df 4f       	sbci	r29, 0xFF	; 255
    868e:	e8 81       	ld	r30, Y
    8690:	f9 81       	ldd	r31, Y+1	; 0x01
    8692:	ce 5c       	subi	r28, 0xCE	; 206
    8694:	d0 40       	sbci	r29, 0x00	; 0
    8696:	85 91       	lpm	r24, Z+
    8698:	94 91       	lpm	r25, Z
    869a:	cc 53       	subi	r28, 0x3C	; 60
    869c:	df 4f       	sbci	r29, 0xFF	; 255
    869e:	e8 81       	ld	r30, Y
    86a0:	f9 81       	ldd	r31, Y+1	; 0x01
    86a2:	c4 5c       	subi	r28, 0xC4	; 196
    86a4:	d0 40       	sbci	r29, 0x00	; 0
    86a6:	24 91       	lpm	r18, Z
    86a8:	c8 54       	subi	r28, 0x48	; 72
    86aa:	df 4f       	sbci	r29, 0xFF	; 255
    86ac:	48 81       	ld	r20, Y
    86ae:	59 81       	ldd	r21, Y+1	; 0x01
    86b0:	c8 5b       	subi	r28, 0xB8	; 184
    86b2:	d0 40       	sbci	r29, 0x00	; 0
    86b4:	84 0f       	add	r24, r20
    86b6:	95 1f       	adc	r25, r21
    86b8:	2b 9d       	mul	r18, r11
    86ba:	80 0d       	add	r24, r0
    86bc:	91 1d       	adc	r25, r1
    86be:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1275
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
    86c0:	f1 01       	movw	r30, r2
    86c2:	65 91       	lpm	r22, Z+
    86c4:	74 91       	lpm	r23, Z
    86c6:	c2 54       	subi	r28, 0x42	; 66
    86c8:	df 4f       	sbci	r29, 0xFF	; 255
    86ca:	e8 81       	ld	r30, Y
    86cc:	f9 81       	ldd	r31, Y+1	; 0x01
    86ce:	ce 5b       	subi	r28, 0xBE	; 190
    86d0:	d0 40       	sbci	r29, 0x00	; 0
    86d2:	24 91       	lpm	r18, Z
    86d4:	c6 54       	subi	r28, 0x46	; 70
    86d6:	df 4f       	sbci	r29, 0xFF	; 255
    86d8:	48 81       	ld	r20, Y
    86da:	59 81       	ldd	r21, Y+1	; 0x01
    86dc:	ca 5b       	subi	r28, 0xBA	; 186
    86de:	d0 40       	sbci	r29, 0x00	; 0
    86e0:	64 0f       	add	r22, r20
    86e2:	75 1f       	adc	r23, r21
    86e4:	2a 9d       	mul	r18, r10
    86e6:	60 0d       	add	r22, r0
    86e8:	71 1d       	adc	r23, r1
    86ea:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1276
          loop_t++;
    86ec:	b3 94       	inc	r11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1277
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_button_count) - 1))
    86ee:	ca 53       	subi	r28, 0x3A	; 58
    86f0:	df 4f       	sbci	r29, 0xFF	; 255
    86f2:	e8 81       	ld	r30, Y
    86f4:	f9 81       	ldd	r31, Y+1	; 0x01
    86f6:	c6 5c       	subi	r28, 0xC6	; 198
    86f8:	d0 40       	sbci	r29, 0x00	; 0
    86fa:	24 91       	lpm	r18, Z
    86fc:	b2 16       	cp	r11, r18
    86fe:	10 f0       	brcs	.+4      	; 0x8704 <draw_menu(bool)+0x142e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1280
          {
            loop_t = 0;
            loop_r++;
    8700:	a3 94       	inc	r10
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1279
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_button_count) - 1))
          {
            loop_t = 0;
    8702:	b1 2c       	mov	r11, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1283
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), click_x, click_y) == true)
    8704:	c7 53       	subi	r28, 0x37	; 55
    8706:	df 4f       	sbci	r29, 0xFF	; 255
    8708:	e8 81       	ld	r30, Y
    870a:	f9 81       	ldd	r31, Y+1	; 0x01
    870c:	c9 5c       	subi	r28, 0xC9	; 201
    870e:	d0 40       	sbci	r29, 0x00	; 0
    8710:	25 91       	lpm	r18, Z+
    8712:	34 91       	lpm	r19, Z
    8714:	c4 53       	subi	r28, 0x34	; 52
    8716:	df 4f       	sbci	r29, 0xFF	; 255
    8718:	e8 81       	ld	r30, Y
    871a:	f9 81       	ldd	r31, Y+1	; 0x01
    871c:	cc 5c       	subi	r28, 0xCC	; 204
    871e:	d0 40       	sbci	r29, 0x00	; 0
    8720:	45 91       	lpm	r20, Z+
    8722:	54 91       	lpm	r21, Z
    8724:	ce 53       	subi	r28, 0x3E	; 62
    8726:	df 4f       	sbci	r29, 0xFF	; 255
    8728:	e8 80       	ld	r14, Y
    872a:	f9 80       	ldd	r15, Y+1	; 0x01
    872c:	c2 5c       	subi	r28, 0xC2	; 194
    872e:	d0 40       	sbci	r29, 0x00	; 0
    8730:	c0 54       	subi	r28, 0x40	; 64
    8732:	df 4f       	sbci	r29, 0xFF	; 255
    8734:	08 81       	ld	r16, Y
    8736:	19 81       	ldd	r17, Y+1	; 0x01
    8738:	c0 5c       	subi	r28, 0xC0	; 192
    873a:	d0 40       	sbci	r29, 0x00	; 0
    873c:	0e 94 70 21 	call	0x42e0	; 0x42e0 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    8740:	18 2f       	mov	r17, r24
    8742:	81 e0       	ldi	r24, 0x01	; 1
    8744:	85 0d       	add	r24, r5
    8746:	11 23       	and	r17, r17
    8748:	f9 f0       	breq	.+62     	; 0x8788 <draw_menu(bool)+0x14b2>
    874a:	ce 54       	subi	r28, 0x4E	; 78
    874c:	df 4f       	sbci	r29, 0xFF	; 255
    874e:	58 82       	st	Y, r5
    8750:	c2 5b       	subi	r28, 0xB2	; 178
    8752:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1285
        {
          fntargs =  pgm_read_word(&dyn_symbol_1->dyn_symbol_onclick);
    8754:	f6 01       	movw	r30, r12
    8756:	ed 54       	subi	r30, 0x4D	; 77
    8758:	fe 4f       	sbci	r31, 0xFE	; 254
    875a:	e6 0d       	add	r30, r6
    875c:	f7 1d       	adc	r31, r7
    875e:	25 91       	lpm	r18, Z+
    8760:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1286
          ((fptr_args)fntargs)(pgm_read_byte(&dyn_symbol_1->args), loop_i);
    8762:	c4 54       	subi	r28, 0x44	; 68
    8764:	df 4f       	sbci	r29, 0xFF	; 255
    8766:	e8 81       	ld	r30, Y
    8768:	f9 81       	ldd	r31, Y+1	; 0x01
    876a:	cc 5b       	subi	r28, 0xBC	; 188
    876c:	d0 40       	sbci	r29, 0x00	; 0
    876e:	84 91       	lpm	r24, Z
    8770:	65 2d       	mov	r22, r5
    8772:	70 e0       	ldi	r23, 0x00	; 0
    8774:	90 e0       	ldi	r25, 0x00	; 0
    8776:	f9 01       	movw	r30, r18
    8778:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1287
          ret = true;
    877a:	c8 53       	subi	r28, 0x38	; 56
    877c:	df 4f       	sbci	r29, 0xFF	; 255
    877e:	18 83       	st	Y, r17
    8780:	c8 5c       	subi	r28, 0xC8	; 200
    8782:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1208
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_symbol_1); idx++)
    8784:	93 94       	inc	r9
    8786:	25 cd       	rjmp	.-1462   	; 0x81d2 <draw_menu(bool)+0xefc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1283
          {
            loop_t = 0;
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), click_x, click_y) == true)
    8788:	58 2e       	mov	r5, r24
    878a:	43 cf       	rjmp	.-378    	; 0x8612 <draw_menu(bool)+0x133c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1264
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
    878c:	f1 01       	movw	r30, r2
    878e:	65 91       	lpm	r22, Z+
    8790:	74 91       	lpm	r23, Z
    8792:	c2 54       	subi	r28, 0x42	; 66
    8794:	df 4f       	sbci	r29, 0xFF	; 255
    8796:	e8 81       	ld	r30, Y
    8798:	f9 81       	ldd	r31, Y+1	; 0x01
    879a:	ce 5b       	subi	r28, 0xBE	; 190
    879c:	d0 40       	sbci	r29, 0x00	; 0
    879e:	24 91       	lpm	r18, Z
    87a0:	c6 54       	subi	r28, 0x46	; 70
    87a2:	df 4f       	sbci	r29, 0xFF	; 255
    87a4:	48 81       	ld	r20, Y
    87a6:	59 81       	ldd	r21, Y+1	; 0x01
    87a8:	ca 5b       	subi	r28, 0xBA	; 186
    87aa:	d0 40       	sbci	r29, 0x00	; 0
    87ac:	64 0f       	add	r22, r20
    87ae:	75 1f       	adc	r23, r21
    87b0:	2b 9d       	mul	r18, r11
    87b2:	60 0d       	add	r22, r0
    87b4:	71 1d       	adc	r23, r1
    87b6:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1265
          loop_t++;
    87b8:	b3 94       	inc	r11
    87ba:	4b cf       	rjmp	.-362    	; 0x8652 <draw_menu(bool)+0x137c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1269
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
    87bc:	c2 53       	subi	r28, 0x32	; 50
    87be:	df 4f       	sbci	r29, 0xFF	; 255
    87c0:	e8 81       	ld	r30, Y
    87c2:	f9 81       	ldd	r31, Y+1	; 0x01
    87c4:	ce 5c       	subi	r28, 0xCE	; 206
    87c6:	d0 40       	sbci	r29, 0x00	; 0
    87c8:	85 91       	lpm	r24, Z+
    87ca:	94 91       	lpm	r25, Z
    87cc:	cc 53       	subi	r28, 0x3C	; 60
    87ce:	df 4f       	sbci	r29, 0xFF	; 255
    87d0:	e8 81       	ld	r30, Y
    87d2:	f9 81       	ldd	r31, Y+1	; 0x01
    87d4:	c4 5c       	subi	r28, 0xC4	; 196
    87d6:	d0 40       	sbci	r29, 0x00	; 0
    87d8:	24 91       	lpm	r18, Z
    87da:	c8 54       	subi	r28, 0x48	; 72
    87dc:	df 4f       	sbci	r29, 0xFF	; 255
    87de:	48 81       	ld	r20, Y
    87e0:	59 81       	ldd	r21, Y+1	; 0x01
    87e2:	c8 5b       	subi	r28, 0xB8	; 184
    87e4:	d0 40       	sbci	r29, 0x00	; 0
    87e6:	84 0f       	add	r24, r20
    87e8:	95 1f       	adc	r25, r21
    87ea:	2b 9d       	mul	r18, r11
    87ec:	80 0d       	add	r24, r0
    87ee:	91 1d       	adc	r25, r1
    87f0:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1270
          loop_t++;
    87f2:	b3 94       	inc	r11
    87f4:	40 cf       	rjmp	.-384    	; 0x8676 <draw_menu(bool)+0x13a0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1294
        }
        loop_i++;
      }
    }
  }
  if (ret == true)  goto draw_menu_end;
    87f6:	c8 53       	subi	r28, 0x38	; 56
    87f8:	df 4f       	sbci	r29, 0xFF	; 255
    87fa:	f8 81       	ld	r31, Y
    87fc:	c8 5c       	subi	r28, 0xC8	; 200
    87fe:	d0 40       	sbci	r29, 0x00	; 0
    8800:	f1 11       	cpse	r31, r1
    8802:	ba c6       	rjmp	.+3444   	; 0x9578 <draw_menu(bool)+0x22a2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1296
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_button_1); idx++)
    8804:	91 2c       	mov	r9, r1
    8806:	93 01       	movw	r18, r6
    8808:	2b 5f       	subi	r18, 0xFB	; 251
    880a:	3d 4f       	sbci	r19, 0xFD	; 253
    880c:	cc 52       	subi	r28, 0x2C	; 44
    880e:	df 4f       	sbci	r29, 0xFF	; 255
    8810:	39 83       	std	Y+1, r19	; 0x01
    8812:	28 83       	st	Y, r18
    8814:	c4 5d       	subi	r28, 0xD4	; 212
    8816:	d0 40       	sbci	r29, 0x00	; 0
    8818:	cc 52       	subi	r28, 0x2C	; 44
    881a:	df 4f       	sbci	r29, 0xFF	; 255
    881c:	e8 81       	ld	r30, Y
    881e:	f9 81       	ldd	r31, Y+1	; 0x01
    8820:	c4 5d       	subi	r28, 0xD4	; 212
    8822:	d0 40       	sbci	r29, 0x00	; 0
    8824:	84 91       	lpm	r24, Z
    8826:	98 16       	cp	r9, r24
    8828:	08 f0       	brcs	.+2      	; 0x882c <draw_menu(bool)+0x1556>
    882a:	c1 c2       	rjmp	.+1410   	; 0x8dae <draw_menu(bool)+0x1ad8>
    882c:	f6 e1       	ldi	r31, 0x16	; 22
    882e:	9f 9e       	mul	r9, r31
    8830:	20 01       	movw	r4, r0
    8832:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1299
  {
    dyn_button_1 = &current->dyn_button[idx];
    rdr = pgm_read_byte(&dyn_button_1->redraw_class);
    8834:	f2 01       	movw	r30, r4
    8836:	eb 57       	subi	r30, 0x7B	; 123
    8838:	fe 4f       	sbci	r31, 0xFE	; 254
    883a:	e6 0d       	add	r30, r6
    883c:	f7 1d       	adc	r31, r7
    883e:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1300
    if (enable_redraw(rdr, redraw_class) == true)
    8840:	c5 53       	subi	r28, 0x35	; 53
    8842:	df 4f       	sbci	r29, 0xFF	; 255
    8844:	68 81       	ld	r22, Y
    8846:	cb 5c       	subi	r28, 0xCB	; 203
    8848:	d0 40       	sbci	r29, 0x00	; 0
    884a:	0e 94 e6 22 	call	0x45cc	; 0x45cc <enable_redraw(unsigned char, unsigned char)>
    884e:	88 23       	and	r24, r24
    8850:	09 f4       	brne	.+2      	; 0x8854 <draw_menu(bool)+0x157e>
    8852:	63 c1       	rjmp	.+710    	; 0x8b1a <draw_menu(bool)+0x1844>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1302
    {
      loop_i = 0;
    8854:	ce 54       	subi	r28, 0x4E	; 78
    8856:	df 4f       	sbci	r29, 0xFF	; 255
    8858:	18 82       	st	Y, r1
    885a:	c2 5b       	subi	r28, 0xB2	; 178
    885c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1304
      loop_t = 0;
      rfnt =  pgm_read_word(&dyn_button_1->function_for_max_items);
    885e:	f2 01       	movw	r30, r4
    8860:	ed 57       	subi	r30, 0x7D	; 125
    8862:	fe 4f       	sbci	r31, 0xFE	; 254
    8864:	e6 0d       	add	r30, r6
    8866:	f7 1d       	adc	r31, r7
    8868:	25 91       	lpm	r18, Z+
    886a:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1305
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_button_1->args), menu_args1);
    886c:	f2 01       	movw	r30, r4
    886e:	e2 58       	subi	r30, 0x82	; 130
    8870:	fe 4f       	sbci	r31, 0xFE	; 254
    8872:	e6 0d       	add	r30, r6
    8874:	f7 1d       	adc	r31, r7
    8876:	85 91       	lpm	r24, Z+
    8878:	94 91       	lpm	r25, Z
    887a:	cd 54       	subi	r28, 0x4D	; 77
    887c:	df 4f       	sbci	r29, 0xFF	; 255
    887e:	68 81       	ld	r22, Y
    8880:	c3 5b       	subi	r28, 0xB3	; 179
    8882:	d0 40       	sbci	r29, 0x00	; 0
    8884:	70 e0       	ldi	r23, 0x00	; 0
    8886:	f9 01       	movw	r30, r18
    8888:	19 95       	eicall
    888a:	cf 54       	subi	r28, 0x4F	; 79
    888c:	df 4f       	sbci	r29, 0xFF	; 255
    888e:	88 83       	st	Y, r24
    8890:	c1 5b       	subi	r28, 0xB1	; 177
    8892:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1306
      gss = pgm_read_word(&dyn_button_1->get_status_string);
    8894:	f2 01       	movw	r30, r4
    8896:	e1 58       	subi	r30, 0x81	; 129
    8898:	fe 4f       	sbci	r31, 0xFE	; 254
    889a:	e6 0d       	add	r30, r6
    889c:	f7 1d       	adc	r31, r7
    889e:	25 91       	lpm	r18, Z+
    88a0:	34 91       	lpm	r19, Z
    88a2:	ca 52       	subi	r28, 0x2A	; 42
    88a4:	df 4f       	sbci	r29, 0xFF	; 255
    88a6:	39 83       	std	Y+1, r19	; 0x01
    88a8:	28 83       	st	Y, r18
    88aa:	c6 5d       	subi	r28, 0xD6	; 214
    88ac:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1307
      process_display_element_slider(&loop_i, &loop_cnt, pgm_read_byte(&dyn_button_1->slider_args), pgm_read_byte(&dyn_button_1->max_button_count));
    88ae:	f2 01       	movw	r30, r4
    88b0:	e4 58       	subi	r30, 0x84	; 132
    88b2:	fe 4f       	sbci	r31, 0xFE	; 254
    88b4:	e6 0d       	add	r30, r6
    88b6:	f7 1d       	adc	r31, r7
    88b8:	24 91       	lpm	r18, Z
    88ba:	f2 01       	movw	r30, r4
    88bc:	e3 58       	subi	r30, 0x83	; 131
    88be:	fe 4f       	sbci	r31, 0xFE	; 254
    88c0:	e6 0d       	add	r30, r6
    88c2:	f7 1d       	adc	r31, r7
    88c4:	44 91       	lpm	r20, Z
    88c6:	be 01       	movw	r22, r28
    88c8:	6f 54       	subi	r22, 0x4F	; 79
    88ca:	7f 4f       	sbci	r23, 0xFF	; 255
    88cc:	ce 01       	movw	r24, r28
    88ce:	8e 54       	subi	r24, 0x4E	; 78
    88d0:	9f 4f       	sbci	r25, 0xFF	; 255
    88d2:	0e 94 8b 21 	call	0x4316	; 0x4316 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1310
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
    88d6:	c2 01       	movw	r24, r4
    88d8:	80 59       	subi	r24, 0x90	; 144
    88da:	9e 4f       	sbci	r25, 0xFE	; 254
    88dc:	a3 01       	movw	r20, r6
    88de:	48 0f       	add	r20, r24
    88e0:	59 1f       	adc	r21, r25
    88e2:	c4 54       	subi	r28, 0x44	; 68
    88e4:	df 4f       	sbci	r29, 0xFF	; 255
    88e6:	59 83       	std	Y+1, r21	; 0x01
    88e8:	48 83       	st	Y, r20
    88ea:	cc 5b       	subi	r28, 0xBC	; 188
    88ec:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1311
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
    88ee:	02 96       	adiw	r24, 0x02	; 2
    88f0:	f3 01       	movw	r30, r6
    88f2:	e8 0f       	add	r30, r24
    88f4:	f9 1f       	adc	r31, r25
    88f6:	c2 54       	subi	r28, 0x42	; 66
    88f8:	df 4f       	sbci	r29, 0xFF	; 255
    88fa:	f9 83       	std	Y+1, r31	; 0x01
    88fc:	e8 83       	st	Y, r30
    88fe:	ce 5b       	subi	r28, 0xBE	; 190
    8900:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1312
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
    8902:	09 96       	adiw	r24, 0x09	; 9
    8904:	93 01       	movw	r18, r6
    8906:	28 0f       	add	r18, r24
    8908:	39 1f       	adc	r19, r25
    890a:	cc 53       	subi	r28, 0x3C	; 60
    890c:	df 4f       	sbci	r29, 0xFF	; 255
    890e:	39 83       	std	Y+1, r19	; 0x01
    8910:	28 83       	st	Y, r18
    8912:	c4 5c       	subi	r28, 0xC4	; 196
    8914:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1313
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
    8916:	01 97       	sbiw	r24, 0x01	; 1
    8918:	a3 01       	movw	r20, r6
    891a:	48 0f       	add	r20, r24
    891c:	59 1f       	adc	r21, r25
    891e:	c7 53       	subi	r28, 0x37	; 55
    8920:	df 4f       	sbci	r29, 0xFF	; 255
    8922:	59 83       	std	Y+1, r21	; 0x01
    8924:	48 83       	st	Y, r20
    8926:	c9 5c       	subi	r28, 0xC9	; 201
    8928:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1315
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_x) * loop_t);
    892a:	01 97       	sbiw	r24, 0x01	; 1
    892c:	f3 01       	movw	r30, r6
    892e:	e8 0f       	add	r30, r24
    8930:	f9 1f       	adc	r31, r25
    8932:	c4 53       	subi	r28, 0x34	; 52
    8934:	df 4f       	sbci	r29, 0xFF	; 255
    8936:	f9 83       	std	Y+1, r31	; 0x01
    8938:	e8 83       	st	Y, r30
    893a:	cc 5c       	subi	r28, 0xCC	; 204
    893c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1317
        ((ret_string_fptr)gss)(loop_i, menu_args1, str1, str2);
        button_click_1(new_x, new_y , pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), pgm_read_byte(&dyn_button_1->font_size), pgm_read_byte(&dyn_button_1->font_size), str1, str2, 1);
    893e:	01 97       	sbiw	r24, 0x01	; 1
    8940:	93 01       	movw	r18, r6
    8942:	28 0f       	add	r18, r24
    8944:	39 1f       	adc	r19, r25
    8946:	ca 53       	subi	r28, 0x3A	; 58
    8948:	df 4f       	sbci	r29, 0xFF	; 255
    894a:	39 83       	std	Y+1, r19	; 0x01
    894c:	28 83       	st	Y, r18
    894e:	c6 5c       	subi	r28, 0xC6	; 198
    8950:	d0 40       	sbci	r29, 0x00	; 0
    8952:	02 97       	sbiw	r24, 0x02	; 2
    8954:	a3 01       	movw	r20, r6
    8956:	48 0f       	add	r20, r24
    8958:	59 1f       	adc	r21, r25
    895a:	c0 53       	subi	r28, 0x30	; 48
    895c:	df 4f       	sbci	r29, 0xFF	; 255
    895e:	59 83       	std	Y+1, r21	; 0x01
    8960:	48 83       	st	Y, r20
    8962:	c0 5d       	subi	r28, 0xD0	; 208
    8964:	d0 40       	sbci	r29, 0x00	; 0
    8966:	02 97       	sbiw	r24, 0x02	; 2
    8968:	f3 01       	movw	r30, r6
    896a:	e8 0f       	add	r30, r24
    896c:	f9 1f       	adc	r31, r25
    896e:	ce 52       	subi	r28, 0x2E	; 46
    8970:	df 4f       	sbci	r29, 0xFF	; 255
    8972:	f9 83       	std	Y+1, r31	; 0x01
    8974:	e8 83       	st	Y, r30
    8976:	c2 5d       	subi	r28, 0xD2	; 210
    8978:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1303
    dyn_button_1 = &current->dyn_button[idx];
    rdr = pgm_read_byte(&dyn_button_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      loop_i = 0;
      loop_t = 0;
    897a:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1308
      rfnt =  pgm_read_word(&dyn_button_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_button_1->args), menu_args1);
      gss = pgm_read_word(&dyn_button_1->get_status_string);
      process_display_element_slider(&loop_i, &loop_cnt, pgm_read_byte(&dyn_button_1->slider_args), pgm_read_byte(&dyn_button_1->max_button_count));
      while (loop_i < loop_cnt)
    897c:	ce 54       	subi	r28, 0x4E	; 78
    897e:	df 4f       	sbci	r29, 0xFF	; 255
    8980:	88 81       	ld	r24, Y
    8982:	c2 5b       	subi	r28, 0xB2	; 178
    8984:	d0 40       	sbci	r29, 0x00	; 0
    8986:	cf 54       	subi	r28, 0x4F	; 79
    8988:	df 4f       	sbci	r29, 0xFF	; 255
    898a:	98 81       	ld	r25, Y
    898c:	c1 5b       	subi	r28, 0xB1	; 177
    898e:	d0 40       	sbci	r29, 0x00	; 0
    8990:	89 17       	cp	r24, r25
    8992:	08 f0       	brcs	.+2      	; 0x8996 <draw_menu(bool)+0x16c0>
    8994:	c2 c0       	rjmp	.+388    	; 0x8b1a <draw_menu(bool)+0x1844>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1310
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
    8996:	c4 54       	subi	r28, 0x44	; 68
    8998:	df 4f       	sbci	r29, 0xFF	; 255
    899a:	e8 81       	ld	r30, Y
    899c:	f9 81       	ldd	r31, Y+1	; 0x01
    899e:	cc 5b       	subi	r28, 0xBC	; 188
    89a0:	d0 40       	sbci	r29, 0x00	; 0
    89a2:	25 90       	lpm	r2, Z+
    89a4:	34 90       	lpm	r3, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1311
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
    89a6:	c2 54       	subi	r28, 0x42	; 66
    89a8:	df 4f       	sbci	r29, 0xFF	; 255
    89aa:	e8 81       	ld	r30, Y
    89ac:	f9 81       	ldd	r31, Y+1	; 0x01
    89ae:	ce 5b       	subi	r28, 0xBE	; 190
    89b0:	d0 40       	sbci	r29, 0x00	; 0
    89b2:	25 91       	lpm	r18, Z+
    89b4:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1312
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
    89b6:	cc 53       	subi	r28, 0x3C	; 60
    89b8:	df 4f       	sbci	r29, 0xFF	; 255
    89ba:	e8 81       	ld	r30, Y
    89bc:	f9 81       	ldd	r31, Y+1	; 0x01
    89be:	c4 5c       	subi	r28, 0xC4	; 196
    89c0:	d0 40       	sbci	r29, 0x00	; 0
    89c2:	94 91       	lpm	r25, Z
    89c4:	99 23       	and	r25, r25
    89c6:	09 f4       	brne	.+2      	; 0x89ca <draw_menu(bool)+0x16f4>
    89c8:	69 c0       	rjmp	.+210    	; 0x8a9c <draw_menu(bool)+0x17c6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1311
      gss = pgm_read_word(&dyn_button_1->get_status_string);
      process_display_element_slider(&loop_i, &loop_cnt, pgm_read_byte(&dyn_button_1->slider_args), pgm_read_byte(&dyn_button_1->max_button_count));
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
    89ca:	c6 54       	subi	r28, 0x46	; 70
    89cc:	df 4f       	sbci	r29, 0xFF	; 255
    89ce:	48 81       	ld	r20, Y
    89d0:	59 81       	ldd	r21, Y+1	; 0x01
    89d2:	ca 5b       	subi	r28, 0xBA	; 186
    89d4:	d0 40       	sbci	r29, 0x00	; 0
    89d6:	42 0f       	add	r20, r18
    89d8:	53 1f       	adc	r21, r19
    89da:	ca 54       	subi	r28, 0x4A	; 74
    89dc:	df 4f       	sbci	r29, 0xFF	; 255
    89de:	59 83       	std	Y+1, r21	; 0x01
    89e0:	48 83       	st	Y, r20
    89e2:	c6 5b       	subi	r28, 0xB6	; 182
    89e4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1314
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
    89e6:	cc 53       	subi	r28, 0x3C	; 60
    89e8:	df 4f       	sbci	r29, 0xFF	; 255
    89ea:	e8 81       	ld	r30, Y
    89ec:	f9 81       	ldd	r31, Y+1	; 0x01
    89ee:	c4 5c       	subi	r28, 0xC4	; 196
    89f0:	d0 40       	sbci	r29, 0x00	; 0
    89f2:	94 91       	lpm	r25, Z
    89f4:	91 30       	cpi	r25, 0x01	; 1
    89f6:	09 f4       	brne	.+2      	; 0x89fa <draw_menu(bool)+0x1724>
    89f8:	74 c0       	rjmp	.+232    	; 0x8ae2 <draw_menu(bool)+0x180c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1310
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_button_1->args), menu_args1);
      gss = pgm_read_word(&dyn_button_1->get_status_string);
      process_display_element_slider(&loop_i, &loop_cnt, pgm_read_byte(&dyn_button_1->slider_args), pgm_read_byte(&dyn_button_1->max_button_count));
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
    89fa:	c8 54       	subi	r28, 0x48	; 72
    89fc:	df 4f       	sbci	r29, 0xFF	; 255
    89fe:	28 81       	ld	r18, Y
    8a00:	39 81       	ldd	r19, Y+1	; 0x01
    8a02:	c8 5b       	subi	r28, 0xB8	; 184
    8a04:	d0 40       	sbci	r29, 0x00	; 0
    8a06:	22 0e       	add	r2, r18
    8a08:	33 1e       	adc	r3, r19
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1316
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_x) * loop_t);
        ((ret_string_fptr)gss)(loop_i, menu_args1, str1, str2);
    8a0a:	9e 01       	movw	r18, r28
    8a0c:	2f 57       	subi	r18, 0x7F	; 127
    8a0e:	3f 4f       	sbci	r19, 0xFF	; 255
    8a10:	ae 01       	movw	r20, r28
    8a12:	4f 5f       	subi	r20, 0xFF	; 255
    8a14:	5f 4f       	sbci	r21, 0xFF	; 255
    8a16:	cd 54       	subi	r28, 0x4D	; 77
    8a18:	df 4f       	sbci	r29, 0xFF	; 255
    8a1a:	68 81       	ld	r22, Y
    8a1c:	c3 5b       	subi	r28, 0xB3	; 179
    8a1e:	d0 40       	sbci	r29, 0x00	; 0
    8a20:	ca 52       	subi	r28, 0x2A	; 42
    8a22:	df 4f       	sbci	r29, 0xFF	; 255
    8a24:	e8 81       	ld	r30, Y
    8a26:	f9 81       	ldd	r31, Y+1	; 0x01
    8a28:	c6 5d       	subi	r28, 0xD6	; 214
    8a2a:	d0 40       	sbci	r29, 0x00	; 0
    8a2c:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1317
        button_click_1(new_x, new_y , pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), pgm_read_byte(&dyn_button_1->font_size), pgm_read_byte(&dyn_button_1->font_size), str1, str2, 1);
    8a2e:	ca 53       	subi	r28, 0x3A	; 58
    8a30:	df 4f       	sbci	r29, 0xFF	; 255
    8a32:	e8 81       	ld	r30, Y
    8a34:	f9 81       	ldd	r31, Y+1	; 0x01
    8a36:	c6 5c       	subi	r28, 0xC6	; 198
    8a38:	d0 40       	sbci	r29, 0x00	; 0
    8a3a:	e4 90       	lpm	r14, Z
    8a3c:	04 91       	lpm	r16, Z
    8a3e:	c0 53       	subi	r28, 0x30	; 48
    8a40:	df 4f       	sbci	r29, 0xFF	; 255
    8a42:	e8 81       	ld	r30, Y
    8a44:	f9 81       	ldd	r31, Y+1	; 0x01
    8a46:	c0 5d       	subi	r28, 0xD0	; 208
    8a48:	d0 40       	sbci	r29, 0x00	; 0
    8a4a:	25 91       	lpm	r18, Z+
    8a4c:	34 91       	lpm	r19, Z
    8a4e:	ce 52       	subi	r28, 0x2E	; 46
    8a50:	df 4f       	sbci	r29, 0xFF	; 255
    8a52:	e8 81       	ld	r30, Y
    8a54:	f9 81       	ldd	r31, Y+1	; 0x01
    8a56:	c2 5d       	subi	r28, 0xD2	; 210
    8a58:	d0 40       	sbci	r29, 0x00	; 0
    8a5a:	45 91       	lpm	r20, Z+
    8a5c:	54 91       	lpm	r21, Z
    8a5e:	88 24       	eor	r8, r8
    8a60:	83 94       	inc	r8
    8a62:	ce 01       	movw	r24, r28
    8a64:	8f 57       	subi	r24, 0x7F	; 127
    8a66:	9f 4f       	sbci	r25, 0xFF	; 255
    8a68:	5c 01       	movw	r10, r24
    8a6a:	fe 01       	movw	r30, r28
    8a6c:	31 96       	adiw	r30, 0x01	; 1
    8a6e:	6f 01       	movw	r12, r30
    8a70:	ca 54       	subi	r28, 0x4A	; 74
    8a72:	df 4f       	sbci	r29, 0xFF	; 255
    8a74:	68 81       	ld	r22, Y
    8a76:	79 81       	ldd	r23, Y+1	; 0x01
    8a78:	c6 5b       	subi	r28, 0xB6	; 182
    8a7a:	d0 40       	sbci	r29, 0x00	; 0
    8a7c:	c1 01       	movw	r24, r2
    8a7e:	0e 94 a4 2a 	call	0x5548	; 0x5548 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1318
        loop_t++;
    8a82:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1319
        loop_i++;
    8a84:	ce 54       	subi	r28, 0x4E	; 78
    8a86:	df 4f       	sbci	r29, 0xFF	; 255
    8a88:	88 81       	ld	r24, Y
    8a8a:	c2 5b       	subi	r28, 0xB2	; 178
    8a8c:	d0 40       	sbci	r29, 0x00	; 0
    8a8e:	8f 5f       	subi	r24, 0xFF	; 255
    8a90:	ce 54       	subi	r28, 0x4E	; 78
    8a92:	df 4f       	sbci	r29, 0xFF	; 255
    8a94:	88 83       	st	Y, r24
    8a96:	c2 5b       	subi	r28, 0xB2	; 178
    8a98:	d0 40       	sbci	r29, 0x00	; 0
    8a9a:	70 cf       	rjmp	.-288    	; 0x897c <draw_menu(bool)+0x16a6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1313
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
    8a9c:	c2 54       	subi	r28, 0x42	; 66
    8a9e:	df 4f       	sbci	r29, 0xFF	; 255
    8aa0:	e8 81       	ld	r30, Y
    8aa2:	f9 81       	ldd	r31, Y+1	; 0x01
    8aa4:	ce 5b       	subi	r28, 0xBE	; 190
    8aa6:	d0 40       	sbci	r29, 0x00	; 0
    8aa8:	25 91       	lpm	r18, Z+
    8aaa:	34 91       	lpm	r19, Z
    8aac:	c7 53       	subi	r28, 0x37	; 55
    8aae:	df 4f       	sbci	r29, 0xFF	; 255
    8ab0:	e8 81       	ld	r30, Y
    8ab2:	f9 81       	ldd	r31, Y+1	; 0x01
    8ab4:	c9 5c       	subi	r28, 0xC9	; 201
    8ab6:	d0 40       	sbci	r29, 0x00	; 0
    8ab8:	94 91       	lpm	r25, Z
    8aba:	c6 54       	subi	r28, 0x46	; 70
    8abc:	df 4f       	sbci	r29, 0xFF	; 255
    8abe:	48 81       	ld	r20, Y
    8ac0:	59 81       	ldd	r21, Y+1	; 0x01
    8ac2:	ca 5b       	subi	r28, 0xBA	; 186
    8ac4:	d0 40       	sbci	r29, 0x00	; 0
    8ac6:	24 0f       	add	r18, r20
    8ac8:	35 1f       	adc	r19, r21
    8aca:	f9 01       	movw	r30, r18
    8acc:	91 9f       	mul	r25, r17
    8ace:	e0 0d       	add	r30, r0
    8ad0:	f1 1d       	adc	r31, r1
    8ad2:	11 24       	eor	r1, r1
    8ad4:	ca 54       	subi	r28, 0x4A	; 74
    8ad6:	df 4f       	sbci	r29, 0xFF	; 255
    8ad8:	f9 83       	std	Y+1, r31	; 0x01
    8ada:	e8 83       	st	Y, r30
    8adc:	c6 5b       	subi	r28, 0xB6	; 182
    8ade:	d0 40       	sbci	r29, 0x00	; 0
    8ae0:	82 cf       	rjmp	.-252    	; 0x89e6 <draw_menu(bool)+0x1710>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1315
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_x) * loop_t);
    8ae2:	c4 54       	subi	r28, 0x44	; 68
    8ae4:	df 4f       	sbci	r29, 0xFF	; 255
    8ae6:	e8 81       	ld	r30, Y
    8ae8:	f9 81       	ldd	r31, Y+1	; 0x01
    8aea:	cc 5b       	subi	r28, 0xBC	; 188
    8aec:	d0 40       	sbci	r29, 0x00	; 0
    8aee:	25 90       	lpm	r2, Z+
    8af0:	34 90       	lpm	r3, Z
    8af2:	c4 53       	subi	r28, 0x34	; 52
    8af4:	df 4f       	sbci	r29, 0xFF	; 255
    8af6:	e8 81       	ld	r30, Y
    8af8:	f9 81       	ldd	r31, Y+1	; 0x01
    8afa:	cc 5c       	subi	r28, 0xCC	; 204
    8afc:	d0 40       	sbci	r29, 0x00	; 0
    8afe:	94 91       	lpm	r25, Z
    8b00:	c8 54       	subi	r28, 0x48	; 72
    8b02:	df 4f       	sbci	r29, 0xFF	; 255
    8b04:	28 81       	ld	r18, Y
    8b06:	39 81       	ldd	r19, Y+1	; 0x01
    8b08:	c8 5b       	subi	r28, 0xB8	; 184
    8b0a:	d0 40       	sbci	r29, 0x00	; 0
    8b0c:	22 0e       	add	r2, r18
    8b0e:	33 1e       	adc	r3, r19
    8b10:	91 9f       	mul	r25, r17
    8b12:	20 0c       	add	r2, r0
    8b14:	31 1c       	adc	r3, r1
    8b16:	11 24       	eor	r1, r1
    8b18:	78 cf       	rjmp	.-272    	; 0x8a0a <draw_menu(bool)+0x1734>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1322
        button_click_1(new_x, new_y , pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), pgm_read_byte(&dyn_button_1->font_size), pgm_read_byte(&dyn_button_1->font_size), str1, str2, 1);
        loop_t++;
        loop_i++;
      }
    }
    if (click_x > 0 && click_y > 0)
    8b1a:	c0 54       	subi	r28, 0x40	; 64
    8b1c:	df 4f       	sbci	r29, 0xFF	; 255
    8b1e:	28 81       	ld	r18, Y
    8b20:	39 81       	ldd	r19, Y+1	; 0x01
    8b22:	c0 5c       	subi	r28, 0xC0	; 192
    8b24:	d0 40       	sbci	r29, 0x00	; 0
    8b26:	23 2b       	or	r18, r19
    8b28:	09 f4       	brne	.+2      	; 0x8b2c <draw_menu(bool)+0x1856>
    8b2a:	09 c1       	rjmp	.+530    	; 0x8d3e <draw_menu(bool)+0x1a68>
    8b2c:	ce 53       	subi	r28, 0x3E	; 62
    8b2e:	df 4f       	sbci	r29, 0xFF	; 255
    8b30:	48 81       	ld	r20, Y
    8b32:	59 81       	ldd	r21, Y+1	; 0x01
    8b34:	c2 5c       	subi	r28, 0xC2	; 194
    8b36:	d0 40       	sbci	r29, 0x00	; 0
    8b38:	45 2b       	or	r20, r21
    8b3a:	09 f4       	brne	.+2      	; 0x8b3e <draw_menu(bool)+0x1868>
    8b3c:	00 c1       	rjmp	.+512    	; 0x8d3e <draw_menu(bool)+0x1a68>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1324
    {
      loop_i = 0;
    8b3e:	ce 54       	subi	r28, 0x4E	; 78
    8b40:	df 4f       	sbci	r29, 0xFF	; 255
    8b42:	18 82       	st	Y, r1
    8b44:	c2 5b       	subi	r28, 0xB2	; 178
    8b46:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1326
      loop_t = 0;
      rfnt =  pgm_read_word(&dyn_button_1->function_for_max_items);
    8b48:	f2 01       	movw	r30, r4
    8b4a:	ed 57       	subi	r30, 0x7D	; 125
    8b4c:	fe 4f       	sbci	r31, 0xFE	; 254
    8b4e:	e6 0d       	add	r30, r6
    8b50:	f7 1d       	adc	r31, r7
    8b52:	85 91       	lpm	r24, Z+
    8b54:	94 91       	lpm	r25, Z
    8b56:	c4 54       	subi	r28, 0x44	; 68
    8b58:	df 4f       	sbci	r29, 0xFF	; 255
    8b5a:	99 83       	std	Y+1, r25	; 0x01
    8b5c:	88 83       	st	Y, r24
    8b5e:	cc 5b       	subi	r28, 0xBC	; 188
    8b60:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1327
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_button_1->args), menu_args1);
    8b62:	52 01       	movw	r10, r4
    8b64:	92 e8       	ldi	r25, 0x82	; 130
    8b66:	a9 1a       	sub	r10, r25
    8b68:	9e ef       	ldi	r25, 0xFE	; 254
    8b6a:	b9 0a       	sbc	r11, r25
    8b6c:	a6 0c       	add	r10, r6
    8b6e:	b7 1c       	adc	r11, r7
    8b70:	f5 01       	movw	r30, r10
    8b72:	85 91       	lpm	r24, Z+
    8b74:	94 91       	lpm	r25, Z
    8b76:	cd 54       	subi	r28, 0x4D	; 77
    8b78:	df 4f       	sbci	r29, 0xFF	; 255
    8b7a:	68 81       	ld	r22, Y
    8b7c:	c3 5b       	subi	r28, 0xB3	; 179
    8b7e:	d0 40       	sbci	r29, 0x00	; 0
    8b80:	70 e0       	ldi	r23, 0x00	; 0
    8b82:	c4 54       	subi	r28, 0x44	; 68
    8b84:	df 4f       	sbci	r29, 0xFF	; 255
    8b86:	e8 81       	ld	r30, Y
    8b88:	f9 81       	ldd	r31, Y+1	; 0x01
    8b8a:	cc 5b       	subi	r28, 0xBC	; 188
    8b8c:	d0 40       	sbci	r29, 0x00	; 0
    8b8e:	19 95       	eicall
    8b90:	cf 54       	subi	r28, 0x4F	; 79
    8b92:	df 4f       	sbci	r29, 0xFF	; 255
    8b94:	88 83       	st	Y, r24
    8b96:	c1 5b       	subi	r28, 0xB1	; 177
    8b98:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1328
      process_display_element_slider(&loop_i, &loop_cnt, pgm_read_byte(&dyn_button_1->slider_args), pgm_read_byte(&dyn_button_1->max_button_count));
    8b9a:	f2 01       	movw	r30, r4
    8b9c:	e4 58       	subi	r30, 0x84	; 132
    8b9e:	fe 4f       	sbci	r31, 0xFE	; 254
    8ba0:	e6 0d       	add	r30, r6
    8ba2:	f7 1d       	adc	r31, r7
    8ba4:	24 91       	lpm	r18, Z
    8ba6:	f2 01       	movw	r30, r4
    8ba8:	e3 58       	subi	r30, 0x83	; 131
    8baa:	fe 4f       	sbci	r31, 0xFE	; 254
    8bac:	e6 0d       	add	r30, r6
    8bae:	f7 1d       	adc	r31, r7
    8bb0:	44 91       	lpm	r20, Z
    8bb2:	be 01       	movw	r22, r28
    8bb4:	6f 54       	subi	r22, 0x4F	; 79
    8bb6:	7f 4f       	sbci	r23, 0xFF	; 255
    8bb8:	ce 01       	movw	r24, r28
    8bba:	8e 54       	subi	r24, 0x4E	; 78
    8bbc:	9f 4f       	sbci	r25, 0xFF	; 255
    8bbe:	0e 94 8b 21 	call	0x4316	; 0x4316 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1332
      while (loop_i < loop_cnt)
      {
        active = ((ret_fptr)rfnt)(pgm_read_word(&dyn_button_1->args), loop_i);
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
    8bc2:	62 01       	movw	r12, r4
    8bc4:	f0 e9       	ldi	r31, 0x90	; 144
    8bc6:	cf 1a       	sub	r12, r31
    8bc8:	fe ef       	ldi	r31, 0xFE	; 254
    8bca:	df 0a       	sbc	r13, r31
    8bcc:	c6 0c       	add	r12, r6
    8bce:	d7 1c       	adc	r13, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1333
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
    8bd0:	12 01       	movw	r2, r4
    8bd2:	2e e8       	ldi	r18, 0x8E	; 142
    8bd4:	22 1a       	sub	r2, r18
    8bd6:	2e ef       	ldi	r18, 0xFE	; 254
    8bd8:	32 0a       	sbc	r3, r18
    8bda:	26 0c       	add	r2, r6
    8bdc:	37 1c       	adc	r3, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1334
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
    8bde:	c2 01       	movw	r24, r4
    8be0:	85 58       	subi	r24, 0x85	; 133
    8be2:	9e 4f       	sbci	r25, 0xFE	; 254
    8be4:	a3 01       	movw	r20, r6
    8be6:	48 0f       	add	r20, r24
    8be8:	59 1f       	adc	r21, r25
    8bea:	ca 54       	subi	r28, 0x4A	; 74
    8bec:	df 4f       	sbci	r29, 0xFF	; 255
    8bee:	59 83       	std	Y+1, r21	; 0x01
    8bf0:	48 83       	st	Y, r20
    8bf2:	c6 5b       	subi	r28, 0xB6	; 182
    8bf4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1335
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
    8bf6:	01 97       	sbiw	r24, 0x01	; 1
    8bf8:	f3 01       	movw	r30, r6
    8bfa:	e8 0f       	add	r30, r24
    8bfc:	f9 1f       	adc	r31, r25
    8bfe:	c2 54       	subi	r28, 0x42	; 66
    8c00:	df 4f       	sbci	r29, 0xFF	; 255
    8c02:	f9 83       	std	Y+1, r31	; 0x01
    8c04:	e8 83       	st	Y, r30
    8c06:	ce 5b       	subi	r28, 0xBE	; 190
    8c08:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1337
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_x) * loop_t);
    8c0a:	01 97       	sbiw	r24, 0x01	; 1
    8c0c:	93 01       	movw	r18, r6
    8c0e:	28 0f       	add	r18, r24
    8c10:	39 1f       	adc	r19, r25
    8c12:	cc 53       	subi	r28, 0x3C	; 60
    8c14:	df 4f       	sbci	r29, 0xFF	; 255
    8c16:	39 83       	std	Y+1, r19	; 0x01
    8c18:	28 83       	st	Y, r18
    8c1a:	c4 5c       	subi	r28, 0xC4	; 196
    8c1c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1338
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), click_x, click_y) == true)
    8c1e:	03 97       	sbiw	r24, 0x03	; 3
    8c20:	a3 01       	movw	r20, r6
    8c22:	48 0f       	add	r20, r24
    8c24:	59 1f       	adc	r21, r25
    8c26:	ca 53       	subi	r28, 0x3A	; 58
    8c28:	df 4f       	sbci	r29, 0xFF	; 255
    8c2a:	59 83       	std	Y+1, r21	; 0x01
    8c2c:	48 83       	st	Y, r20
    8c2e:	c6 5c       	subi	r28, 0xC6	; 198
    8c30:	d0 40       	sbci	r29, 0x00	; 0
    8c32:	02 97       	sbiw	r24, 0x02	; 2
    8c34:	f3 01       	movw	r30, r6
    8c36:	e8 0f       	add	r30, r24
    8c38:	f9 1f       	adc	r31, r25
    8c3a:	c7 53       	subi	r28, 0x37	; 55
    8c3c:	df 4f       	sbci	r29, 0xFF	; 255
    8c3e:	f9 83       	std	Y+1, r31	; 0x01
    8c40:	e8 83       	st	Y, r30
    8c42:	c9 5c       	subi	r28, 0xC9	; 201
    8c44:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1325
      }
    }
    if (click_x > 0 && click_y > 0)
    {
      loop_i = 0;
      loop_t = 0;
    8c46:	81 2c       	mov	r8, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1329
      rfnt =  pgm_read_word(&dyn_button_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_button_1->args), menu_args1);
      process_display_element_slider(&loop_i, &loop_cnt, pgm_read_byte(&dyn_button_1->slider_args), pgm_read_byte(&dyn_button_1->max_button_count));
      while (loop_i < loop_cnt)
    8c48:	ce 54       	subi	r28, 0x4E	; 78
    8c4a:	df 4f       	sbci	r29, 0xFF	; 255
    8c4c:	68 81       	ld	r22, Y
    8c4e:	c2 5b       	subi	r28, 0xB2	; 178
    8c50:	d0 40       	sbci	r29, 0x00	; 0
    8c52:	cf 54       	subi	r28, 0x4F	; 79
    8c54:	df 4f       	sbci	r29, 0xFF	; 255
    8c56:	88 81       	ld	r24, Y
    8c58:	c1 5b       	subi	r28, 0xB1	; 177
    8c5a:	d0 40       	sbci	r29, 0x00	; 0
    8c5c:	68 17       	cp	r22, r24
    8c5e:	08 f0       	brcs	.+2      	; 0x8c62 <draw_menu(bool)+0x198c>
    8c60:	6e c0       	rjmp	.+220    	; 0x8d3e <draw_menu(bool)+0x1a68>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1331
      {
        active = ((ret_fptr)rfnt)(pgm_read_word(&dyn_button_1->args), loop_i);
    8c62:	f5 01       	movw	r30, r10
    8c64:	85 91       	lpm	r24, Z+
    8c66:	94 91       	lpm	r25, Z
    8c68:	70 e0       	ldi	r23, 0x00	; 0
    8c6a:	c4 54       	subi	r28, 0x44	; 68
    8c6c:	df 4f       	sbci	r29, 0xFF	; 255
    8c6e:	e8 81       	ld	r30, Y
    8c70:	f9 81       	ldd	r31, Y+1	; 0x01
    8c72:	cc 5b       	subi	r28, 0xBC	; 188
    8c74:	d0 40       	sbci	r29, 0x00	; 0
    8c76:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1332
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
    8c78:	f6 01       	movw	r30, r12
    8c7a:	85 91       	lpm	r24, Z+
    8c7c:	94 91       	lpm	r25, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1333
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
    8c7e:	f1 01       	movw	r30, r2
    8c80:	65 91       	lpm	r22, Z+
    8c82:	74 91       	lpm	r23, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1334
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
    8c84:	ca 54       	subi	r28, 0x4A	; 74
    8c86:	df 4f       	sbci	r29, 0xFF	; 255
    8c88:	e8 81       	ld	r30, Y
    8c8a:	f9 81       	ldd	r31, Y+1	; 0x01
    8c8c:	c6 5b       	subi	r28, 0xB6	; 182
    8c8e:	d0 40       	sbci	r29, 0x00	; 0
    8c90:	24 91       	lpm	r18, Z
    8c92:	22 23       	and	r18, r18
    8c94:	09 f4       	brne	.+2      	; 0x8c98 <draw_menu(bool)+0x19c2>
    8c96:	55 c0       	rjmp	.+170    	; 0x8d42 <draw_menu(bool)+0x1a6c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1333
      process_display_element_slider(&loop_i, &loop_cnt, pgm_read_byte(&dyn_button_1->slider_args), pgm_read_byte(&dyn_button_1->max_button_count));
      while (loop_i < loop_cnt)
      {
        active = ((ret_fptr)rfnt)(pgm_read_word(&dyn_button_1->args), loop_i);
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
    8c98:	c6 54       	subi	r28, 0x46	; 70
    8c9a:	df 4f       	sbci	r29, 0xFF	; 255
    8c9c:	28 81       	ld	r18, Y
    8c9e:	39 81       	ldd	r19, Y+1	; 0x01
    8ca0:	ca 5b       	subi	r28, 0xBA	; 186
    8ca2:	d0 40       	sbci	r29, 0x00	; 0
    8ca4:	62 0f       	add	r22, r18
    8ca6:	73 1f       	adc	r23, r19
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1336
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
    8ca8:	ca 54       	subi	r28, 0x4A	; 74
    8caa:	df 4f       	sbci	r29, 0xFF	; 255
    8cac:	e8 81       	ld	r30, Y
    8cae:	f9 81       	ldd	r31, Y+1	; 0x01
    8cb0:	c6 5b       	subi	r28, 0xB6	; 182
    8cb2:	d0 40       	sbci	r29, 0x00	; 0
    8cb4:	24 91       	lpm	r18, Z
    8cb6:	21 30       	cpi	r18, 0x01	; 1
    8cb8:	09 f4       	brne	.+2      	; 0x8cbc <draw_menu(bool)+0x19e6>
    8cba:	5a c0       	rjmp	.+180    	; 0x8d70 <draw_menu(bool)+0x1a9a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1332
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_button_1->args), menu_args1);
      process_display_element_slider(&loop_i, &loop_cnt, pgm_read_byte(&dyn_button_1->slider_args), pgm_read_byte(&dyn_button_1->max_button_count));
      while (loop_i < loop_cnt)
      {
        active = ((ret_fptr)rfnt)(pgm_read_word(&dyn_button_1->args), loop_i);
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
    8cbc:	c8 54       	subi	r28, 0x48	; 72
    8cbe:	df 4f       	sbci	r29, 0xFF	; 255
    8cc0:	28 81       	ld	r18, Y
    8cc2:	39 81       	ldd	r19, Y+1	; 0x01
    8cc4:	c8 5b       	subi	r28, 0xB8	; 184
    8cc6:	d0 40       	sbci	r29, 0x00	; 0
    8cc8:	82 0f       	add	r24, r18
    8cca:	93 1f       	adc	r25, r19
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1338
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_x) * loop_t);
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), click_x, click_y) == true)
    8ccc:	ca 53       	subi	r28, 0x3A	; 58
    8cce:	df 4f       	sbci	r29, 0xFF	; 255
    8cd0:	e8 81       	ld	r30, Y
    8cd2:	f9 81       	ldd	r31, Y+1	; 0x01
    8cd4:	c6 5c       	subi	r28, 0xC6	; 198
    8cd6:	d0 40       	sbci	r29, 0x00	; 0
    8cd8:	25 91       	lpm	r18, Z+
    8cda:	34 91       	lpm	r19, Z
    8cdc:	c7 53       	subi	r28, 0x37	; 55
    8cde:	df 4f       	sbci	r29, 0xFF	; 255
    8ce0:	e8 81       	ld	r30, Y
    8ce2:	f9 81       	ldd	r31, Y+1	; 0x01
    8ce4:	c9 5c       	subi	r28, 0xC9	; 201
    8ce6:	d0 40       	sbci	r29, 0x00	; 0
    8ce8:	45 91       	lpm	r20, Z+
    8cea:	54 91       	lpm	r21, Z
    8cec:	ce 53       	subi	r28, 0x3E	; 62
    8cee:	df 4f       	sbci	r29, 0xFF	; 255
    8cf0:	e8 80       	ld	r14, Y
    8cf2:	f9 80       	ldd	r15, Y+1	; 0x01
    8cf4:	c2 5c       	subi	r28, 0xC2	; 194
    8cf6:	d0 40       	sbci	r29, 0x00	; 0
    8cf8:	c0 54       	subi	r28, 0x40	; 64
    8cfa:	df 4f       	sbci	r29, 0xFF	; 255
    8cfc:	08 81       	ld	r16, Y
    8cfe:	19 81       	ldd	r17, Y+1	; 0x01
    8d00:	c0 5c       	subi	r28, 0xC0	; 192
    8d02:	d0 40       	sbci	r29, 0x00	; 0
    8d04:	0e 94 70 21 	call	0x42e0	; 0x42e0 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    8d08:	18 2f       	mov	r17, r24
    8d0a:	ce 54       	subi	r28, 0x4E	; 78
    8d0c:	df 4f       	sbci	r29, 0xFF	; 255
    8d0e:	68 81       	ld	r22, Y
    8d10:	c2 5b       	subi	r28, 0xB2	; 178
    8d12:	d0 40       	sbci	r29, 0x00	; 0
    8d14:	88 23       	and	r24, r24
    8d16:	09 f4       	brne	.+2      	; 0x8d1a <draw_menu(bool)+0x1a44>
    8d18:	42 c0       	rjmp	.+132    	; 0x8d9e <draw_menu(bool)+0x1ac8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1340
        {
          fntargs =  pgm_read_word(&dyn_button_1->dyn_button_onclick);
    8d1a:	f2 01       	movw	r30, r4
    8d1c:	ef 57       	subi	r30, 0x7F	; 127
    8d1e:	fe 4f       	sbci	r31, 0xFE	; 254
    8d20:	e6 0d       	add	r30, r6
    8d22:	f7 1d       	adc	r31, r7
    8d24:	25 91       	lpm	r18, Z+
    8d26:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1341
          ((fptr_args)fntargs)(pgm_read_byte(&dyn_button_1->args), loop_i);
    8d28:	f5 01       	movw	r30, r10
    8d2a:	84 91       	lpm	r24, Z
    8d2c:	70 e0       	ldi	r23, 0x00	; 0
    8d2e:	90 e0       	ldi	r25, 0x00	; 0
    8d30:	f9 01       	movw	r30, r18
    8d32:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1342
          ret = true;
    8d34:	c8 53       	subi	r28, 0x38	; 56
    8d36:	df 4f       	sbci	r29, 0xFF	; 255
    8d38:	18 83       	st	Y, r17
    8d3a:	c8 5c       	subi	r28, 0xC8	; 200
    8d3c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1296
      }
    }
  }
  if (ret == true)  goto draw_menu_end;
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_button_1); idx++)
    8d3e:	93 94       	inc	r9
    8d40:	6b cd       	rjmp	.-1322   	; 0x8818 <draw_menu(bool)+0x1542>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1335
      {
        active = ((ret_fptr)rfnt)(pgm_read_word(&dyn_button_1->args), loop_i);
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
    8d42:	f1 01       	movw	r30, r2
    8d44:	65 91       	lpm	r22, Z+
    8d46:	74 91       	lpm	r23, Z
    8d48:	c2 54       	subi	r28, 0x42	; 66
    8d4a:	df 4f       	sbci	r29, 0xFF	; 255
    8d4c:	e8 81       	ld	r30, Y
    8d4e:	f9 81       	ldd	r31, Y+1	; 0x01
    8d50:	ce 5b       	subi	r28, 0xBE	; 190
    8d52:	d0 40       	sbci	r29, 0x00	; 0
    8d54:	24 91       	lpm	r18, Z
    8d56:	c6 54       	subi	r28, 0x46	; 70
    8d58:	df 4f       	sbci	r29, 0xFF	; 255
    8d5a:	48 81       	ld	r20, Y
    8d5c:	59 81       	ldd	r21, Y+1	; 0x01
    8d5e:	ca 5b       	subi	r28, 0xBA	; 186
    8d60:	d0 40       	sbci	r29, 0x00	; 0
    8d62:	64 0f       	add	r22, r20
    8d64:	75 1f       	adc	r23, r21
    8d66:	28 9d       	mul	r18, r8
    8d68:	60 0d       	add	r22, r0
    8d6a:	71 1d       	adc	r23, r1
    8d6c:	11 24       	eor	r1, r1
    8d6e:	9c cf       	rjmp	.-200    	; 0x8ca8 <draw_menu(bool)+0x19d2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1337
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_x) * loop_t);
    8d70:	f6 01       	movw	r30, r12
    8d72:	85 91       	lpm	r24, Z+
    8d74:	94 91       	lpm	r25, Z
    8d76:	cc 53       	subi	r28, 0x3C	; 60
    8d78:	df 4f       	sbci	r29, 0xFF	; 255
    8d7a:	e8 81       	ld	r30, Y
    8d7c:	f9 81       	ldd	r31, Y+1	; 0x01
    8d7e:	c4 5c       	subi	r28, 0xC4	; 196
    8d80:	d0 40       	sbci	r29, 0x00	; 0
    8d82:	24 91       	lpm	r18, Z
    8d84:	c8 54       	subi	r28, 0x48	; 72
    8d86:	df 4f       	sbci	r29, 0xFF	; 255
    8d88:	48 81       	ld	r20, Y
    8d8a:	59 81       	ldd	r21, Y+1	; 0x01
    8d8c:	c8 5b       	subi	r28, 0xB8	; 184
    8d8e:	d0 40       	sbci	r29, 0x00	; 0
    8d90:	84 0f       	add	r24, r20
    8d92:	95 1f       	adc	r25, r21
    8d94:	28 9d       	mul	r18, r8
    8d96:	80 0d       	add	r24, r0
    8d98:	91 1d       	adc	r25, r1
    8d9a:	11 24       	eor	r1, r1
    8d9c:	97 cf       	rjmp	.-210    	; 0x8ccc <draw_menu(bool)+0x19f6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1345
          fntargs =  pgm_read_word(&dyn_button_1->dyn_button_onclick);
          ((fptr_args)fntargs)(pgm_read_byte(&dyn_button_1->args), loop_i);
          ret = true;
          break;
        }
        loop_t++;
    8d9e:	83 94       	inc	r8
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1346
        loop_i++;
    8da0:	6f 5f       	subi	r22, 0xFF	; 255
    8da2:	ce 54       	subi	r28, 0x4E	; 78
    8da4:	df 4f       	sbci	r29, 0xFF	; 255
    8da6:	68 83       	st	Y, r22
    8da8:	c2 5b       	subi	r28, 0xB2	; 178
    8daa:	d0 40       	sbci	r29, 0x00	; 0
    8dac:	4d cf       	rjmp	.-358    	; 0x8c48 <draw_menu(bool)+0x1972>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1350
      }
    }
  }
  if (ret == true)  goto draw_menu_end;
    8dae:	c8 53       	subi	r28, 0x38	; 56
    8db0:	df 4f       	sbci	r29, 0xFF	; 255
    8db2:	f8 81       	ld	r31, Y
    8db4:	c8 5c       	subi	r28, 0xC8	; 200
    8db6:	d0 40       	sbci	r29, 0x00	; 0
    8db8:	f1 11       	cpse	r31, r1
    8dba:	de c3       	rjmp	.+1980   	; 0x9578 <draw_menu(bool)+0x22a2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1351
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_select_box_1); idx++)
    8dbc:	ca 54       	subi	r28, 0x4A	; 74
    8dbe:	df 4f       	sbci	r29, 0xFF	; 255
    8dc0:	18 82       	st	Y, r1
    8dc2:	c6 5b       	subi	r28, 0xB6	; 182
    8dc4:	d0 40       	sbci	r29, 0x00	; 0
    8dc6:	93 01       	movw	r18, r6
    8dc8:	28 5f       	subi	r18, 0xF8	; 248
    8dca:	3d 4f       	sbci	r19, 0xFD	; 253
    8dcc:	ce 51       	subi	r28, 0x1E	; 30
    8dce:	df 4f       	sbci	r29, 0xFF	; 255
    8dd0:	39 83       	std	Y+1, r19	; 0x01
    8dd2:	28 83       	st	Y, r18
    8dd4:	c2 5e       	subi	r28, 0xE2	; 226
    8dd6:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1389
          {
            loop_t = 0;
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, str1, str2);
    8dd8:	ae 01       	movw	r20, r28
    8dda:	4f 57       	subi	r20, 0x7F	; 127
    8ddc:	5f 4f       	sbci	r21, 0xFF	; 255
    8dde:	cc 54       	subi	r28, 0x4C	; 76
    8de0:	df 4f       	sbci	r29, 0xFF	; 255
    8de2:	59 83       	std	Y+1, r21	; 0x01
    8de4:	48 83       	st	Y, r20
    8de6:	c4 5b       	subi	r28, 0xB4	; 180
    8de8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1410
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_select_box_1->args), menu_args1);
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y);
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
    8dea:	c2 53       	subi	r28, 0x32	; 50
    8dec:	df 4f       	sbci	r29, 0xFF	; 255
    8dee:	88 81       	ld	r24, Y
    8df0:	99 81       	ldd	r25, Y+1	; 0x01
    8df2:	ce 5c       	subi	r28, 0xCE	; 206
    8df4:	d0 40       	sbci	r29, 0x00	; 0
    8df6:	0b 96       	adiw	r24, 0x0b	; 11
    8df8:	c2 53       	subi	r28, 0x32	; 50
    8dfa:	df 4f       	sbci	r29, 0xFF	; 255
    8dfc:	99 83       	std	Y+1, r25	; 0x01
    8dfe:	88 83       	st	Y, r24
    8e00:	ce 5c       	subi	r28, 0xCE	; 206
    8e02:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1351
        loop_i++;
      }
    }
  }
  if (ret == true)  goto draw_menu_end;
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_select_box_1); idx++)
    8e04:	ce 51       	subi	r28, 0x1E	; 30
    8e06:	df 4f       	sbci	r29, 0xFF	; 255
    8e08:	e8 81       	ld	r30, Y
    8e0a:	f9 81       	ldd	r31, Y+1	; 0x01
    8e0c:	c2 5e       	subi	r28, 0xE2	; 226
    8e0e:	d0 40       	sbci	r29, 0x00	; 0
    8e10:	84 91       	lpm	r24, Z
    8e12:	ca 54       	subi	r28, 0x4A	; 74
    8e14:	df 4f       	sbci	r29, 0xFF	; 255
    8e16:	f8 81       	ld	r31, Y
    8e18:	c6 5b       	subi	r28, 0xB6	; 182
    8e1a:	d0 40       	sbci	r29, 0x00	; 0
    8e1c:	f8 17       	cp	r31, r24
    8e1e:	08 f0       	brcs	.+2      	; 0x8e22 <draw_menu(bool)+0x1b4c>
    8e20:	b1 c3       	rjmp	.+1890   	; 0x9584 <draw_menu(bool)+0x22ae>
    8e22:	2d e1       	ldi	r18, 0x1D	; 29
    8e24:	f2 9f       	mul	r31, r18
    8e26:	20 01       	movw	r4, r0
    8e28:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1354
  {
    dyn_select_box_1 = &current->dyn_select_box_1[idx];
    rdr = pgm_read_byte(&dyn_select_box_1->redraw_class);
    8e2a:	f2 01       	movw	r30, r4
    8e2c:	fe 5f       	subi	r31, 0xFE	; 254
    8e2e:	e6 0d       	add	r30, r6
    8e30:	f7 1d       	adc	r31, r7
    8e32:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1355
    if (enable_redraw(rdr, redraw_class) == true)
    8e34:	c5 53       	subi	r28, 0x35	; 53
    8e36:	df 4f       	sbci	r29, 0xFF	; 255
    8e38:	68 81       	ld	r22, Y
    8e3a:	cb 5c       	subi	r28, 0xCB	; 203
    8e3c:	d0 40       	sbci	r29, 0x00	; 0
    8e3e:	0e 94 e6 22 	call	0x45cc	; 0x45cc <enable_redraw(unsigned char, unsigned char)>
    8e42:	88 23       	and	r24, r24
    8e44:	09 f4       	brne	.+2      	; 0x8e48 <draw_menu(bool)+0x1b72>
    8e46:	1e c2       	rjmp	.+1084   	; 0x9284 <draw_menu(bool)+0x1fae>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1357
    {
      loop_i = 0;
    8e48:	ce 54       	subi	r28, 0x4E	; 78
    8e4a:	df 4f       	sbci	r29, 0xFF	; 255
    8e4c:	18 82       	st	Y, r1
    8e4e:	c2 5b       	subi	r28, 0xB2	; 178
    8e50:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1360
      loop_t = 0;
      loop_r = 0;
      rfnt =  pgm_read_word(&dyn_select_box_1->function_for_max_items);
    8e52:	f2 01       	movw	r30, r4
    8e54:	e4 50       	subi	r30, 0x04	; 4
    8e56:	fe 4f       	sbci	r31, 0xFE	; 254
    8e58:	e6 0d       	add	r30, r6
    8e5a:	f7 1d       	adc	r31, r7
    8e5c:	25 91       	lpm	r18, Z+
    8e5e:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1361
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_select_box_1->args), menu_args1);
    8e60:	c2 01       	movw	r24, r4
    8e62:	89 50       	subi	r24, 0x09	; 9
    8e64:	9e 4f       	sbci	r25, 0xFE	; 254
    8e66:	a3 01       	movw	r20, r6
    8e68:	48 0f       	add	r20, r24
    8e6a:	59 1f       	adc	r21, r25
    8e6c:	c7 53       	subi	r28, 0x37	; 55
    8e6e:	df 4f       	sbci	r29, 0xFF	; 255
    8e70:	59 83       	std	Y+1, r21	; 0x01
    8e72:	48 83       	st	Y, r20
    8e74:	c9 5c       	subi	r28, 0xC9	; 201
    8e76:	d0 40       	sbci	r29, 0x00	; 0
    8e78:	fa 01       	movw	r30, r20
    8e7a:	85 91       	lpm	r24, Z+
    8e7c:	94 91       	lpm	r25, Z
    8e7e:	cd 54       	subi	r28, 0x4D	; 77
    8e80:	df 4f       	sbci	r29, 0xFF	; 255
    8e82:	68 81       	ld	r22, Y
    8e84:	c3 5b       	subi	r28, 0xB3	; 179
    8e86:	d0 40       	sbci	r29, 0x00	; 0
    8e88:	70 e0       	ldi	r23, 0x00	; 0
    8e8a:	f9 01       	movw	r30, r18
    8e8c:	19 95       	eicall
    8e8e:	cf 54       	subi	r28, 0x4F	; 79
    8e90:	df 4f       	sbci	r29, 0xFF	; 255
    8e92:	88 83       	st	Y, r24
    8e94:	c1 5b       	subi	r28, 0xB1	; 177
    8e96:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1362
      gss = pgm_read_word(&dyn_select_box_1->get_status_string);
    8e98:	f2 01       	movw	r30, r4
    8e9a:	e8 50       	subi	r30, 0x08	; 8
    8e9c:	fe 4f       	sbci	r31, 0xFE	; 254
    8e9e:	e6 0d       	add	r30, r6
    8ea0:	f7 1d       	adc	r31, r7
    8ea2:	25 91       	lpm	r18, Z+
    8ea4:	34 91       	lpm	r19, Z
    8ea6:	cc 51       	subi	r28, 0x1C	; 28
    8ea8:	df 4f       	sbci	r29, 0xFF	; 255
    8eaa:	39 83       	std	Y+1, r19	; 0x01
    8eac:	28 83       	st	Y, r18
    8eae:	c4 5e       	subi	r28, 0xE4	; 228
    8eb0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1366
      //process_display_element_slider(&loop_i, &loop_cnt, pgm_read_byte(&dyn_select_box_1->slider_args), pgm_read_byte(&dyn_select_box_1->max_button_count));
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x);
    8eb2:	c2 01       	movw	r24, r4
    8eb4:	8c 51       	subi	r24, 0x1C	; 28
    8eb6:	9e 4f       	sbci	r25, 0xFE	; 254
    8eb8:	a3 01       	movw	r20, r6
    8eba:	48 0f       	add	r20, r24
    8ebc:	59 1f       	adc	r21, r25
    8ebe:	c2 54       	subi	r28, 0x42	; 66
    8ec0:	df 4f       	sbci	r29, 0xFF	; 255
    8ec2:	59 83       	std	Y+1, r21	; 0x01
    8ec4:	48 83       	st	Y, r20
    8ec6:	ce 5b       	subi	r28, 0xBE	; 190
    8ec8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1367
        new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y);
    8eca:	02 96       	adiw	r24, 0x02	; 2
    8ecc:	f3 01       	movw	r30, r6
    8ece:	e8 0f       	add	r30, r24
    8ed0:	f9 1f       	adc	r31, r25
    8ed2:	cc 53       	subi	r28, 0x3C	; 60
    8ed4:	df 4f       	sbci	r29, 0xFF	; 255
    8ed6:	f9 83       	std	Y+1, r31	; 0x01
    8ed8:	e8 83       	st	Y, r30
    8eda:	c4 5c       	subi	r28, 0xC4	; 196
    8edc:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1368
        if (pgm_read_byte(&dyn_select_box_1->direction) == VERTICAL)
    8ede:	0e 96       	adiw	r24, 0x0e	; 14
    8ee0:	93 01       	movw	r18, r6
    8ee2:	28 0f       	add	r18, r24
    8ee4:	39 1f       	adc	r19, r25
    8ee6:	ca 53       	subi	r28, 0x3A	; 58
    8ee8:	df 4f       	sbci	r29, 0xFF	; 255
    8eea:	39 83       	std	Y+1, r19	; 0x01
    8eec:	28 83       	st	Y, r18
    8eee:	c6 5c       	subi	r28, 0xC6	; 198
    8ef0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1370
        {
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_t);
    8ef2:	01 97       	sbiw	r24, 0x01	; 1
    8ef4:	a3 01       	movw	r20, r6
    8ef6:	48 0f       	add	r20, r24
    8ef8:	59 1f       	adc	r21, r25
    8efa:	c4 53       	subi	r28, 0x34	; 52
    8efc:	df 4f       	sbci	r29, 0xFF	; 255
    8efe:	59 83       	std	Y+1, r21	; 0x01
    8f00:	48 83       	st	Y, r20
    8f02:	cc 5c       	subi	r28, 0xCC	; 204
    8f04:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1375
          loop_t++;
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
    8f06:	01 97       	sbiw	r24, 0x01	; 1
    8f08:	f3 01       	movw	r30, r6
    8f0a:	e8 0f       	add	r30, r24
    8f0c:	f9 1f       	adc	r31, r25
    8f0e:	c0 53       	subi	r28, 0x30	; 48
    8f10:	df 4f       	sbci	r29, 0xFF	; 255
    8f12:	f9 83       	std	Y+1, r31	; 0x01
    8f14:	e8 83       	st	Y, r30
    8f16:	c0 5d       	subi	r28, 0xD0	; 208
    8f18:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1383
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL_NEW_LINE)
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_select_box_1->max_items_count) - 1))
    8f1a:	03 96       	adiw	r24, 0x03	; 3
    8f1c:	93 01       	movw	r18, r6
    8f1e:	28 0f       	add	r18, r24
    8f20:	39 1f       	adc	r19, r25
    8f22:	ce 52       	subi	r28, 0x2E	; 46
    8f24:	df 4f       	sbci	r29, 0xFF	; 255
    8f26:	39 83       	std	Y+1, r19	; 0x01
    8f28:	28 83       	st	Y, r18
    8f2a:	c2 5d       	subi	r28, 0xD2	; 210
    8f2c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1390
            loop_t = 0;
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, str1, str2);
        rfnt = pgm_read_word(&dyn_select_box_1->get_status_fnt);
    8f2e:	09 96       	adiw	r24, 0x09	; 9
    8f30:	a3 01       	movw	r20, r6
    8f32:	48 0f       	add	r20, r24
    8f34:	59 1f       	adc	r21, r25
    8f36:	cc 52       	subi	r28, 0x2C	; 44
    8f38:	df 4f       	sbci	r29, 0xFF	; 255
    8f3a:	59 83       	std	Y+1, r21	; 0x01
    8f3c:	48 83       	st	Y, r20
    8f3e:	c4 5d       	subi	r28, 0xD4	; 212
    8f40:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1395
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1);
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
                       pgm_read_word(&dyn_select_box_1->color_active), \
                       pgm_read_word(&dyn_select_box_1->color_inactive), state,  str1, str2);
    8f42:	0e 97       	sbiw	r24, 0x0e	; 14
    8f44:	f3 01       	movw	r30, r6
    8f46:	e8 0f       	add	r30, r24
    8f48:	f9 1f       	adc	r31, r25
    8f4a:	ca 52       	subi	r28, 0x2A	; 42
    8f4c:	df 4f       	sbci	r29, 0xFF	; 255
    8f4e:	f9 83       	std	Y+1, r31	; 0x01
    8f50:	e8 83       	st	Y, r30
    8f52:	c6 5d       	subi	r28, 0xD6	; 214
    8f54:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1394
        ((ret_string_fptr)gss)(loop_i, menu_args1, str1, str2);
        rfnt = pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1);
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
                       pgm_read_word(&dyn_select_box_1->color_active), \
    8f56:	02 97       	sbiw	r24, 0x02	; 2
    8f58:	93 01       	movw	r18, r6
    8f5a:	28 0f       	add	r18, r24
    8f5c:	39 1f       	adc	r19, r25
    8f5e:	c8 52       	subi	r28, 0x28	; 40
    8f60:	df 4f       	sbci	r29, 0xFF	; 255
    8f62:	39 83       	std	Y+1, r19	; 0x01
    8f64:	28 83       	st	Y, r18
    8f66:	c8 5d       	subi	r28, 0xD8	; 216
    8f68:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1393
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, str1, str2);
        rfnt = pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1);
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
    8f6a:	01 97       	sbiw	r24, 0x01	; 1
    8f6c:	a3 01       	movw	r20, r6
    8f6e:	48 0f       	add	r20, r24
    8f70:	59 1f       	adc	r21, r25
    8f72:	c6 52       	subi	r28, 0x26	; 38
    8f74:	df 4f       	sbci	r29, 0xFF	; 255
    8f76:	59 83       	std	Y+1, r21	; 0x01
    8f78:	48 83       	st	Y, r20
    8f7a:	ca 5d       	subi	r28, 0xDA	; 218
    8f7c:	d0 40       	sbci	r29, 0x00	; 0
    8f7e:	01 97       	sbiw	r24, 0x01	; 1
    8f80:	f3 01       	movw	r30, r6
    8f82:	e8 0f       	add	r30, r24
    8f84:	f9 1f       	adc	r31, r25
    8f86:	c4 52       	subi	r28, 0x24	; 36
    8f88:	df 4f       	sbci	r29, 0xFF	; 255
    8f8a:	f9 83       	std	Y+1, r31	; 0x01
    8f8c:	e8 83       	st	Y, r30
    8f8e:	cc 5d       	subi	r28, 0xDC	; 220
    8f90:	d0 40       	sbci	r29, 0x00	; 0
    8f92:	02 97       	sbiw	r24, 0x02	; 2
    8f94:	93 01       	movw	r18, r6
    8f96:	28 0f       	add	r18, r24
    8f98:	39 1f       	adc	r19, r25
    8f9a:	c2 52       	subi	r28, 0x22	; 34
    8f9c:	df 4f       	sbci	r29, 0xFF	; 255
    8f9e:	39 83       	std	Y+1, r19	; 0x01
    8fa0:	28 83       	st	Y, r18
    8fa2:	ce 5d       	subi	r28, 0xDE	; 222
    8fa4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1392
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, str1, str2);
        rfnt = pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1);
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
    8fa6:	02 97       	sbiw	r24, 0x02	; 2
    8fa8:	a3 01       	movw	r20, r6
    8faa:	48 0f       	add	r20, r24
    8fac:	59 1f       	adc	r21, r25
    8fae:	c0 52       	subi	r28, 0x20	; 32
    8fb0:	df 4f       	sbci	r29, 0xFF	; 255
    8fb2:	59 83       	std	Y+1, r21	; 0x01
    8fb4:	48 83       	st	Y, r20
    8fb6:	c0 5e       	subi	r28, 0xE0	; 224
    8fb8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1359
    rdr = pgm_read_byte(&dyn_select_box_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      loop_i = 0;
      loop_t = 0;
      loop_r = 0;
    8fba:	91 2c       	mov	r9, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1358
    dyn_select_box_1 = &current->dyn_select_box_1[idx];
    rdr = pgm_read_byte(&dyn_select_box_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      loop_i = 0;
      loop_t = 0;
    8fbc:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1364
      loop_r = 0;
      rfnt =  pgm_read_word(&dyn_select_box_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_select_box_1->args), menu_args1);
      gss = pgm_read_word(&dyn_select_box_1->get_status_string);
      //process_display_element_slider(&loop_i, &loop_cnt, pgm_read_byte(&dyn_select_box_1->slider_args), pgm_read_byte(&dyn_select_box_1->max_button_count));
      while (loop_i < loop_cnt)
    8fbe:	ce 54       	subi	r28, 0x4E	; 78
    8fc0:	df 4f       	sbci	r29, 0xFF	; 255
    8fc2:	88 81       	ld	r24, Y
    8fc4:	c2 5b       	subi	r28, 0xB2	; 178
    8fc6:	d0 40       	sbci	r29, 0x00	; 0
    8fc8:	cf 54       	subi	r28, 0x4F	; 79
    8fca:	df 4f       	sbci	r29, 0xFF	; 255
    8fcc:	98 81       	ld	r25, Y
    8fce:	c1 5b       	subi	r28, 0xB1	; 177
    8fd0:	d0 40       	sbci	r29, 0x00	; 0
    8fd2:	89 17       	cp	r24, r25
    8fd4:	08 f0       	brcs	.+2      	; 0x8fd8 <draw_menu(bool)+0x1d02>
    8fd6:	56 c1       	rjmp	.+684    	; 0x9284 <draw_menu(bool)+0x1fae>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1366
      {
        new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x);
    8fd8:	c2 54       	subi	r28, 0x42	; 66
    8fda:	df 4f       	sbci	r29, 0xFF	; 255
    8fdc:	e8 81       	ld	r30, Y
    8fde:	f9 81       	ldd	r31, Y+1	; 0x01
    8fe0:	ce 5b       	subi	r28, 0xBE	; 190
    8fe2:	d0 40       	sbci	r29, 0x00	; 0
    8fe4:	25 90       	lpm	r2, Z+
    8fe6:	34 90       	lpm	r3, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1367
        new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y);
    8fe8:	cc 53       	subi	r28, 0x3C	; 60
    8fea:	df 4f       	sbci	r29, 0xFF	; 255
    8fec:	e8 81       	ld	r30, Y
    8fee:	f9 81       	ldd	r31, Y+1	; 0x01
    8ff0:	c4 5c       	subi	r28, 0xC4	; 196
    8ff2:	d0 40       	sbci	r29, 0x00	; 0
    8ff4:	25 91       	lpm	r18, Z+
    8ff6:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1368
        if (pgm_read_byte(&dyn_select_box_1->direction) == VERTICAL)
    8ff8:	ca 53       	subi	r28, 0x3A	; 58
    8ffa:	df 4f       	sbci	r29, 0xFF	; 255
    8ffc:	e8 81       	ld	r30, Y
    8ffe:	f9 81       	ldd	r31, Y+1	; 0x01
    9000:	c6 5c       	subi	r28, 0xC6	; 198
    9002:	d0 40       	sbci	r29, 0x00	; 0
    9004:	94 91       	lpm	r25, Z
    9006:	99 23       	and	r25, r25
    9008:	09 f4       	brne	.+2      	; 0x900c <draw_menu(bool)+0x1d36>
    900a:	fb c0       	rjmp	.+502    	; 0x9202 <draw_menu(bool)+0x1f2c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1367
      gss = pgm_read_word(&dyn_select_box_1->get_status_string);
      //process_display_element_slider(&loop_i, &loop_cnt, pgm_read_byte(&dyn_select_box_1->slider_args), pgm_read_byte(&dyn_select_box_1->max_button_count));
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y);
    900c:	c6 54       	subi	r28, 0x46	; 70
    900e:	df 4f       	sbci	r29, 0xFF	; 255
    9010:	48 81       	ld	r20, Y
    9012:	59 81       	ldd	r21, Y+1	; 0x01
    9014:	ca 5b       	subi	r28, 0xBA	; 186
    9016:	d0 40       	sbci	r29, 0x00	; 0
    9018:	42 0f       	add	r20, r18
    901a:	53 1f       	adc	r21, r19
    901c:	c4 54       	subi	r28, 0x44	; 68
    901e:	df 4f       	sbci	r29, 0xFF	; 255
    9020:	59 83       	std	Y+1, r21	; 0x01
    9022:	48 83       	st	Y, r20
    9024:	cc 5b       	subi	r28, 0xBC	; 188
    9026:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1373
        if (pgm_read_byte(&dyn_select_box_1->direction) == VERTICAL)
        {
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_t);
          loop_t++;
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL)
    9028:	ca 53       	subi	r28, 0x3A	; 58
    902a:	df 4f       	sbci	r29, 0xFF	; 255
    902c:	e8 81       	ld	r30, Y
    902e:	f9 81       	ldd	r31, Y+1	; 0x01
    9030:	c6 5c       	subi	r28, 0xC6	; 198
    9032:	d0 40       	sbci	r29, 0x00	; 0
    9034:	94 91       	lpm	r25, Z
    9036:	91 30       	cpi	r25, 0x01	; 1
    9038:	09 f4       	brne	.+2      	; 0x903c <draw_menu(bool)+0x1d66>
    903a:	07 c1       	rjmp	.+526    	; 0x924a <draw_menu(bool)+0x1f74>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1366
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_select_box_1->args), menu_args1);
      gss = pgm_read_word(&dyn_select_box_1->get_status_string);
      //process_display_element_slider(&loop_i, &loop_cnt, pgm_read_byte(&dyn_select_box_1->slider_args), pgm_read_byte(&dyn_select_box_1->max_button_count));
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x);
    903c:	c8 54       	subi	r28, 0x48	; 72
    903e:	df 4f       	sbci	r29, 0xFF	; 255
    9040:	28 81       	ld	r18, Y
    9042:	39 81       	ldd	r19, Y+1	; 0x01
    9044:	c8 5b       	subi	r28, 0xB8	; 184
    9046:	d0 40       	sbci	r29, 0x00	; 0
    9048:	22 0e       	add	r2, r18
    904a:	33 1e       	adc	r3, r19
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1378
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
          loop_t++;
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL_NEW_LINE)
    904c:	ca 53       	subi	r28, 0x3A	; 58
    904e:	df 4f       	sbci	r29, 0xFF	; 255
    9050:	e8 81       	ld	r30, Y
    9052:	f9 81       	ldd	r31, Y+1	; 0x01
    9054:	c6 5c       	subi	r28, 0xC6	; 198
    9056:	d0 40       	sbci	r29, 0x00	; 0
    9058:	94 91       	lpm	r25, Z
    905a:	92 30       	cpi	r25, 0x02	; 2
    905c:	09 f0       	breq	.+2      	; 0x9060 <draw_menu(bool)+0x1d8a>
    905e:	49 c0       	rjmp	.+146    	; 0x90f2 <draw_menu(bool)+0x1e1c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1380
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
    9060:	c2 54       	subi	r28, 0x42	; 66
    9062:	df 4f       	sbci	r29, 0xFF	; 255
    9064:	e8 81       	ld	r30, Y
    9066:	f9 81       	ldd	r31, Y+1	; 0x01
    9068:	ce 5b       	subi	r28, 0xBE	; 190
    906a:	d0 40       	sbci	r29, 0x00	; 0
    906c:	25 90       	lpm	r2, Z+
    906e:	34 90       	lpm	r3, Z
    9070:	c0 53       	subi	r28, 0x30	; 48
    9072:	df 4f       	sbci	r29, 0xFF	; 255
    9074:	e8 81       	ld	r30, Y
    9076:	f9 81       	ldd	r31, Y+1	; 0x01
    9078:	c0 5d       	subi	r28, 0xD0	; 208
    907a:	d0 40       	sbci	r29, 0x00	; 0
    907c:	94 91       	lpm	r25, Z
    907e:	c8 54       	subi	r28, 0x48	; 72
    9080:	df 4f       	sbci	r29, 0xFF	; 255
    9082:	28 81       	ld	r18, Y
    9084:	39 81       	ldd	r19, Y+1	; 0x01
    9086:	c8 5b       	subi	r28, 0xB8	; 184
    9088:	d0 40       	sbci	r29, 0x00	; 0
    908a:	22 0e       	add	r2, r18
    908c:	33 1e       	adc	r3, r19
    908e:	91 9f       	mul	r25, r17
    9090:	20 0c       	add	r2, r0
    9092:	31 1c       	adc	r3, r1
    9094:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1381
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_r);
    9096:	cc 53       	subi	r28, 0x3C	; 60
    9098:	df 4f       	sbci	r29, 0xFF	; 255
    909a:	e8 81       	ld	r30, Y
    909c:	f9 81       	ldd	r31, Y+1	; 0x01
    909e:	c4 5c       	subi	r28, 0xC4	; 196
    90a0:	d0 40       	sbci	r29, 0x00	; 0
    90a2:	25 91       	lpm	r18, Z+
    90a4:	34 91       	lpm	r19, Z
    90a6:	c4 53       	subi	r28, 0x34	; 52
    90a8:	df 4f       	sbci	r29, 0xFF	; 255
    90aa:	e8 81       	ld	r30, Y
    90ac:	f9 81       	ldd	r31, Y+1	; 0x01
    90ae:	cc 5c       	subi	r28, 0xCC	; 204
    90b0:	d0 40       	sbci	r29, 0x00	; 0
    90b2:	94 91       	lpm	r25, Z
    90b4:	c6 54       	subi	r28, 0x46	; 70
    90b6:	df 4f       	sbci	r29, 0xFF	; 255
    90b8:	48 81       	ld	r20, Y
    90ba:	59 81       	ldd	r21, Y+1	; 0x01
    90bc:	ca 5b       	subi	r28, 0xBA	; 186
    90be:	d0 40       	sbci	r29, 0x00	; 0
    90c0:	24 0f       	add	r18, r20
    90c2:	35 1f       	adc	r19, r21
    90c4:	f9 01       	movw	r30, r18
    90c6:	99 9d       	mul	r25, r9
    90c8:	e0 0d       	add	r30, r0
    90ca:	f1 1d       	adc	r31, r1
    90cc:	11 24       	eor	r1, r1
    90ce:	c4 54       	subi	r28, 0x44	; 68
    90d0:	df 4f       	sbci	r29, 0xFF	; 255
    90d2:	f9 83       	std	Y+1, r31	; 0x01
    90d4:	e8 83       	st	Y, r30
    90d6:	cc 5b       	subi	r28, 0xBC	; 188
    90d8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1382
          loop_t++;
    90da:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1383
          if (loop_t > (pgm_read_byte(&dyn_select_box_1->max_items_count) - 1))
    90dc:	ce 52       	subi	r28, 0x2E	; 46
    90de:	df 4f       	sbci	r29, 0xFF	; 255
    90e0:	e8 81       	ld	r30, Y
    90e2:	f9 81       	ldd	r31, Y+1	; 0x01
    90e4:	c2 5d       	subi	r28, 0xD2	; 210
    90e6:	d0 40       	sbci	r29, 0x00	; 0
    90e8:	94 91       	lpm	r25, Z
    90ea:	19 17       	cp	r17, r25
    90ec:	10 f0       	brcs	.+4      	; 0x90f2 <draw_menu(bool)+0x1e1c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1386
          {
            loop_t = 0;
            loop_r++;
    90ee:	93 94       	inc	r9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1385
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_select_box_1->max_items_count) - 1))
          {
            loop_t = 0;
    90f0:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1389
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, str1, str2);
    90f2:	9e 01       	movw	r18, r28
    90f4:	2f 57       	subi	r18, 0x7F	; 127
    90f6:	3f 4f       	sbci	r19, 0xFF	; 255
    90f8:	ae 01       	movw	r20, r28
    90fa:	4f 5f       	subi	r20, 0xFF	; 255
    90fc:	5f 4f       	sbci	r21, 0xFF	; 255
    90fe:	cd 54       	subi	r28, 0x4D	; 77
    9100:	df 4f       	sbci	r29, 0xFF	; 255
    9102:	68 81       	ld	r22, Y
    9104:	c3 5b       	subi	r28, 0xB3	; 179
    9106:	d0 40       	sbci	r29, 0x00	; 0
    9108:	cc 51       	subi	r28, 0x1C	; 28
    910a:	df 4f       	sbci	r29, 0xFF	; 255
    910c:	e8 81       	ld	r30, Y
    910e:	f9 81       	ldd	r31, Y+1	; 0x01
    9110:	c4 5e       	subi	r28, 0xE4	; 228
    9112:	d0 40       	sbci	r29, 0x00	; 0
    9114:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1390
        rfnt = pgm_read_word(&dyn_select_box_1->get_status_fnt);
    9116:	cc 52       	subi	r28, 0x2C	; 44
    9118:	df 4f       	sbci	r29, 0xFF	; 255
    911a:	e8 81       	ld	r30, Y
    911c:	f9 81       	ldd	r31, Y+1	; 0x01
    911e:	c4 5d       	subi	r28, 0xD4	; 212
    9120:	d0 40       	sbci	r29, 0x00	; 0
    9122:	25 91       	lpm	r18, Z+
    9124:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1391
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1);
    9126:	c7 53       	subi	r28, 0x37	; 55
    9128:	df 4f       	sbci	r29, 0xFF	; 255
    912a:	e8 81       	ld	r30, Y
    912c:	f9 81       	ldd	r31, Y+1	; 0x01
    912e:	c9 5c       	subi	r28, 0xC9	; 201
    9130:	d0 40       	sbci	r29, 0x00	; 0
    9132:	84 91       	lpm	r24, Z
    9134:	cd 54       	subi	r28, 0x4D	; 77
    9136:	df 4f       	sbci	r29, 0xFF	; 255
    9138:	68 81       	ld	r22, Y
    913a:	c3 5b       	subi	r28, 0xB3	; 179
    913c:	d0 40       	sbci	r29, 0x00	; 0
    913e:	70 e0       	ldi	r23, 0x00	; 0
    9140:	90 e0       	ldi	r25, 0x00	; 0
    9142:	f9 01       	movw	r30, r18
    9144:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1395
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
                       pgm_read_word(&dyn_select_box_1->color_active), \
                       pgm_read_word(&dyn_select_box_1->color_inactive), state,  str1, str2);
    9146:	ca 52       	subi	r28, 0x2A	; 42
    9148:	df 4f       	sbci	r29, 0xFF	; 255
    914a:	e8 81       	ld	r30, Y
    914c:	f9 81       	ldd	r31, Y+1	; 0x01
    914e:	c6 5d       	subi	r28, 0xD6	; 214
    9150:	d0 40       	sbci	r29, 0x00	; 0
    9152:	a5 90       	lpm	r10, Z+
    9154:	b4 90       	lpm	r11, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1394
        ((ret_string_fptr)gss)(loop_i, menu_args1, str1, str2);
        rfnt = pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1);
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
                       pgm_read_word(&dyn_select_box_1->color_active), \
    9156:	c8 52       	subi	r28, 0x28	; 40
    9158:	df 4f       	sbci	r29, 0xFF	; 255
    915a:	e8 81       	ld	r30, Y
    915c:	f9 81       	ldd	r31, Y+1	; 0x01
    915e:	c8 5d       	subi	r28, 0xD8	; 216
    9160:	d0 40       	sbci	r29, 0x00	; 0
    9162:	c5 90       	lpm	r12, Z+
    9164:	d4 90       	lpm	r13, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1393
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, str1, str2);
        rfnt = pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1);
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
    9166:	c6 52       	subi	r28, 0x26	; 38
    9168:	df 4f       	sbci	r29, 0xFF	; 255
    916a:	e8 81       	ld	r30, Y
    916c:	f9 81       	ldd	r31, Y+1	; 0x01
    916e:	ca 5d       	subi	r28, 0xDA	; 218
    9170:	d0 40       	sbci	r29, 0x00	; 0
    9172:	e4 90       	lpm	r14, Z
    9174:	c4 52       	subi	r28, 0x24	; 36
    9176:	df 4f       	sbci	r29, 0xFF	; 255
    9178:	e8 81       	ld	r30, Y
    917a:	f9 81       	ldd	r31, Y+1	; 0x01
    917c:	cc 5d       	subi	r28, 0xDC	; 220
    917e:	d0 40       	sbci	r29, 0x00	; 0
    9180:	04 91       	lpm	r16, Z
    9182:	c2 52       	subi	r28, 0x22	; 34
    9184:	df 4f       	sbci	r29, 0xFF	; 255
    9186:	e8 81       	ld	r30, Y
    9188:	f9 81       	ldd	r31, Y+1	; 0x01
    918a:	ce 5d       	subi	r28, 0xDE	; 222
    918c:	d0 40       	sbci	r29, 0x00	; 0
    918e:	25 91       	lpm	r18, Z+
    9190:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1392
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, str1, str2);
        rfnt = pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1);
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
    9192:	c0 52       	subi	r28, 0x20	; 32
    9194:	df 4f       	sbci	r29, 0xFF	; 255
    9196:	e8 81       	ld	r30, Y
    9198:	f9 81       	ldd	r31, Y+1	; 0x01
    919a:	c0 5e       	subi	r28, 0xE0	; 224
    919c:	d0 40       	sbci	r29, 0x00	; 0
    919e:	45 91       	lpm	r20, Z+
    91a0:	54 91       	lpm	r21, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1391
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, str1, str2);
        rfnt = pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1);
    91a2:	88 24       	eor	r8, r8
    91a4:	83 94       	inc	r8
    91a6:	81 11       	cpse	r24, r1
    91a8:	01 c0       	rjmp	.+2      	; 0x91ac <draw_menu(bool)+0x1ed6>
    91aa:	81 2c       	mov	r8, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1392
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
    91ac:	cb 54       	subi	r28, 0x4B	; 75
    91ae:	df 4f       	sbci	r29, 0xFF	; 255
    91b0:	f8 81       	ld	r31, Y
    91b2:	c5 5b       	subi	r28, 0xB5	; 181
    91b4:	d0 40       	sbci	r29, 0x00	; 0
    91b6:	ff 93       	push	r31
    91b8:	cc 54       	subi	r28, 0x4C	; 76
    91ba:	df 4f       	sbci	r29, 0xFF	; 255
    91bc:	88 81       	ld	r24, Y
    91be:	c4 5b       	subi	r28, 0xB4	; 180
    91c0:	d0 40       	sbci	r29, 0x00	; 0
    91c2:	8f 93       	push	r24
    91c4:	e1 e0       	ldi	r30, 0x01	; 1
    91c6:	f0 e0       	ldi	r31, 0x00	; 0
    91c8:	ec 0f       	add	r30, r28
    91ca:	fd 1f       	adc	r31, r29
    91cc:	ff 93       	push	r31
    91ce:	ef 93       	push	r30
    91d0:	c4 54       	subi	r28, 0x44	; 68
    91d2:	df 4f       	sbci	r29, 0xFF	; 255
    91d4:	68 81       	ld	r22, Y
    91d6:	79 81       	ldd	r23, Y+1	; 0x01
    91d8:	cc 5b       	subi	r28, 0xBC	; 188
    91da:	d0 40       	sbci	r29, 0x00	; 0
    91dc:	c1 01       	movw	r24, r2
    91de:	0e 94 bd 29 	call	0x537a	; 0x537a <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1396
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
                       pgm_read_word(&dyn_select_box_1->color_active), \
                       pgm_read_word(&dyn_select_box_1->color_inactive), state,  str1, str2);
        loop_i++;
    91e2:	ce 54       	subi	r28, 0x4E	; 78
    91e4:	df 4f       	sbci	r29, 0xFF	; 255
    91e6:	88 81       	ld	r24, Y
    91e8:	c2 5b       	subi	r28, 0xB2	; 178
    91ea:	d0 40       	sbci	r29, 0x00	; 0
    91ec:	8f 5f       	subi	r24, 0xFF	; 255
    91ee:	ce 54       	subi	r28, 0x4E	; 78
    91f0:	df 4f       	sbci	r29, 0xFF	; 255
    91f2:	88 83       	st	Y, r24
    91f4:	c2 5b       	subi	r28, 0xB2	; 178
    91f6:	d0 40       	sbci	r29, 0x00	; 0
    91f8:	0f 90       	pop	r0
    91fa:	0f 90       	pop	r0
    91fc:	0f 90       	pop	r0
    91fe:	0f 90       	pop	r0
    9200:	de ce       	rjmp	.-580    	; 0x8fbe <draw_menu(bool)+0x1ce8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1370
      {
        new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y);
        if (pgm_read_byte(&dyn_select_box_1->direction) == VERTICAL)
        {
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_t);
    9202:	cc 53       	subi	r28, 0x3C	; 60
    9204:	df 4f       	sbci	r29, 0xFF	; 255
    9206:	e8 81       	ld	r30, Y
    9208:	f9 81       	ldd	r31, Y+1	; 0x01
    920a:	c4 5c       	subi	r28, 0xC4	; 196
    920c:	d0 40       	sbci	r29, 0x00	; 0
    920e:	25 91       	lpm	r18, Z+
    9210:	34 91       	lpm	r19, Z
    9212:	c4 53       	subi	r28, 0x34	; 52
    9214:	df 4f       	sbci	r29, 0xFF	; 255
    9216:	e8 81       	ld	r30, Y
    9218:	f9 81       	ldd	r31, Y+1	; 0x01
    921a:	cc 5c       	subi	r28, 0xCC	; 204
    921c:	d0 40       	sbci	r29, 0x00	; 0
    921e:	94 91       	lpm	r25, Z
    9220:	c6 54       	subi	r28, 0x46	; 70
    9222:	df 4f       	sbci	r29, 0xFF	; 255
    9224:	48 81       	ld	r20, Y
    9226:	59 81       	ldd	r21, Y+1	; 0x01
    9228:	ca 5b       	subi	r28, 0xBA	; 186
    922a:	d0 40       	sbci	r29, 0x00	; 0
    922c:	24 0f       	add	r18, r20
    922e:	35 1f       	adc	r19, r21
    9230:	f9 01       	movw	r30, r18
    9232:	91 9f       	mul	r25, r17
    9234:	e0 0d       	add	r30, r0
    9236:	f1 1d       	adc	r31, r1
    9238:	11 24       	eor	r1, r1
    923a:	c4 54       	subi	r28, 0x44	; 68
    923c:	df 4f       	sbci	r29, 0xFF	; 255
    923e:	f9 83       	std	Y+1, r31	; 0x01
    9240:	e8 83       	st	Y, r30
    9242:	cc 5b       	subi	r28, 0xBC	; 188
    9244:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1371
          loop_t++;
    9246:	1f 5f       	subi	r17, 0xFF	; 255
    9248:	ef ce       	rjmp	.-546    	; 0x9028 <draw_menu(bool)+0x1d52>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1375
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
    924a:	c2 54       	subi	r28, 0x42	; 66
    924c:	df 4f       	sbci	r29, 0xFF	; 255
    924e:	e8 81       	ld	r30, Y
    9250:	f9 81       	ldd	r31, Y+1	; 0x01
    9252:	ce 5b       	subi	r28, 0xBE	; 190
    9254:	d0 40       	sbci	r29, 0x00	; 0
    9256:	25 90       	lpm	r2, Z+
    9258:	34 90       	lpm	r3, Z
    925a:	c0 53       	subi	r28, 0x30	; 48
    925c:	df 4f       	sbci	r29, 0xFF	; 255
    925e:	e8 81       	ld	r30, Y
    9260:	f9 81       	ldd	r31, Y+1	; 0x01
    9262:	c0 5d       	subi	r28, 0xD0	; 208
    9264:	d0 40       	sbci	r29, 0x00	; 0
    9266:	94 91       	lpm	r25, Z
    9268:	c8 54       	subi	r28, 0x48	; 72
    926a:	df 4f       	sbci	r29, 0xFF	; 255
    926c:	28 81       	ld	r18, Y
    926e:	39 81       	ldd	r19, Y+1	; 0x01
    9270:	c8 5b       	subi	r28, 0xB8	; 184
    9272:	d0 40       	sbci	r29, 0x00	; 0
    9274:	22 0e       	add	r2, r18
    9276:	33 1e       	adc	r3, r19
    9278:	91 9f       	mul	r25, r17
    927a:	20 0c       	add	r2, r0
    927c:	31 1c       	adc	r3, r1
    927e:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1376
          loop_t++;
    9280:	1f 5f       	subi	r17, 0xFF	; 255
    9282:	e4 ce       	rjmp	.-568    	; 0x904c <draw_menu(bool)+0x1d76>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1399
                       pgm_read_word(&dyn_select_box_1->color_active), \
                       pgm_read_word(&dyn_select_box_1->color_inactive), state,  str1, str2);
        loop_i++;
      }
    }
    if (click_x > 0 && click_y > 0)
    9284:	c0 54       	subi	r28, 0x40	; 64
    9286:	df 4f       	sbci	r29, 0xFF	; 255
    9288:	28 81       	ld	r18, Y
    928a:	39 81       	ldd	r19, Y+1	; 0x01
    928c:	c0 5c       	subi	r28, 0xC0	; 192
    928e:	d0 40       	sbci	r29, 0x00	; 0
    9290:	23 2b       	or	r18, r19
    9292:	09 f4       	brne	.+2      	; 0x9296 <draw_menu(bool)+0x1fc0>
    9294:	33 c1       	rjmp	.+614    	; 0x94fc <draw_menu(bool)+0x2226>
    9296:	ce 53       	subi	r28, 0x3E	; 62
    9298:	df 4f       	sbci	r29, 0xFF	; 255
    929a:	48 81       	ld	r20, Y
    929c:	59 81       	ldd	r21, Y+1	; 0x01
    929e:	c2 5c       	subi	r28, 0xC2	; 194
    92a0:	d0 40       	sbci	r29, 0x00	; 0
    92a2:	45 2b       	or	r20, r21
    92a4:	09 f4       	brne	.+2      	; 0x92a8 <draw_menu(bool)+0x1fd2>
    92a6:	2a c1       	rjmp	.+596    	; 0x94fc <draw_menu(bool)+0x2226>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1401
    {
      loop_i = 0;
    92a8:	ce 54       	subi	r28, 0x4E	; 78
    92aa:	df 4f       	sbci	r29, 0xFF	; 255
    92ac:	18 82       	st	Y, r1
    92ae:	c2 5b       	subi	r28, 0xB2	; 178
    92b0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1404
      loop_t = 0;
      loop_r = 0;
      rfnt =  pgm_read_word(&dyn_select_box_1->function_for_max_items);
    92b2:	f2 01       	movw	r30, r4
    92b4:	e4 50       	subi	r30, 0x04	; 4
    92b6:	fe 4f       	sbci	r31, 0xFE	; 254
    92b8:	e6 0d       	add	r30, r6
    92ba:	f7 1d       	adc	r31, r7
    92bc:	25 91       	lpm	r18, Z+
    92be:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1405
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_select_box_1->args), menu_args1);
    92c0:	c2 01       	movw	r24, r4
    92c2:	89 50       	subi	r24, 0x09	; 9
    92c4:	9e 4f       	sbci	r25, 0xFE	; 254
    92c6:	f3 01       	movw	r30, r6
    92c8:	e8 0f       	add	r30, r24
    92ca:	f9 1f       	adc	r31, r25
    92cc:	c4 54       	subi	r28, 0x44	; 68
    92ce:	df 4f       	sbci	r29, 0xFF	; 255
    92d0:	f9 83       	std	Y+1, r31	; 0x01
    92d2:	e8 83       	st	Y, r30
    92d4:	cc 5b       	subi	r28, 0xBC	; 188
    92d6:	d0 40       	sbci	r29, 0x00	; 0
    92d8:	85 91       	lpm	r24, Z+
    92da:	94 91       	lpm	r25, Z
    92dc:	cd 54       	subi	r28, 0x4D	; 77
    92de:	df 4f       	sbci	r29, 0xFF	; 255
    92e0:	68 81       	ld	r22, Y
    92e2:	c3 5b       	subi	r28, 0xB3	; 179
    92e4:	d0 40       	sbci	r29, 0x00	; 0
    92e6:	70 e0       	ldi	r23, 0x00	; 0
    92e8:	f9 01       	movw	r30, r18
    92ea:	19 95       	eicall
    92ec:	b8 2e       	mov	r11, r24
    92ee:	cf 54       	subi	r28, 0x4F	; 79
    92f0:	df 4f       	sbci	r29, 0xFF	; 255
    92f2:	88 83       	st	Y, r24
    92f4:	c1 5b       	subi	r28, 0xB1	; 177
    92f6:	d0 40       	sbci	r29, 0x00	; 0
    92f8:	ce 54       	subi	r28, 0x4E	; 78
    92fa:	df 4f       	sbci	r29, 0xFF	; 255
    92fc:	c8 80       	ld	r12, Y
    92fe:	c2 5b       	subi	r28, 0xB2	; 178
    9300:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1408
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x);
    9302:	12 01       	movw	r2, r4
    9304:	fc e1       	ldi	r31, 0x1C	; 28
    9306:	2f 1a       	sub	r2, r31
    9308:	fe ef       	ldi	r31, 0xFE	; 254
    930a:	3f 0a       	sbc	r3, r31
    930c:	26 0c       	add	r2, r6
    930e:	37 1c       	adc	r3, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1409
        new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y);
    9310:	42 01       	movw	r8, r4
    9312:	2a e1       	ldi	r18, 0x1A	; 26
    9314:	82 1a       	sub	r8, r18
    9316:	2e ef       	ldi	r18, 0xFE	; 254
    9318:	92 0a       	sbc	r9, r18
    931a:	86 0c       	add	r8, r6
    931c:	97 1c       	adc	r9, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1412
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
        {
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_t);
    931e:	c2 01       	movw	r24, r4
    9320:	8d 50       	subi	r24, 0x0D	; 13
    9322:	9e 4f       	sbci	r25, 0xFE	; 254
    9324:	a3 01       	movw	r20, r6
    9326:	48 0f       	add	r20, r24
    9328:	59 1f       	adc	r21, r25
    932a:	c2 54       	subi	r28, 0x42	; 66
    932c:	df 4f       	sbci	r29, 0xFF	; 255
    932e:	59 83       	std	Y+1, r21	; 0x01
    9330:	48 83       	st	Y, r20
    9332:	ce 5b       	subi	r28, 0xBE	; 190
    9334:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1415
          loop_t++;
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL)
    9336:	01 96       	adiw	r24, 0x01	; 1
    9338:	f3 01       	movw	r30, r6
    933a:	e8 0f       	add	r30, r24
    933c:	f9 1f       	adc	r31, r25
    933e:	cc 53       	subi	r28, 0x3C	; 60
    9340:	df 4f       	sbci	r29, 0xFF	; 255
    9342:	f9 83       	std	Y+1, r31	; 0x01
    9344:	e8 83       	st	Y, r30
    9346:	c4 5c       	subi	r28, 0xC4	; 196
    9348:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1417
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
    934a:	02 97       	sbiw	r24, 0x02	; 2
    934c:	93 01       	movw	r18, r6
    934e:	28 0f       	add	r18, r24
    9350:	39 1f       	adc	r19, r25
    9352:	ca 53       	subi	r28, 0x3A	; 58
    9354:	df 4f       	sbci	r29, 0xFF	; 255
    9356:	39 83       	std	Y+1, r19	; 0x01
    9358:	28 83       	st	Y, r18
    935a:	c6 5c       	subi	r28, 0xC6	; 198
    935c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1425
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL_NEW_LINE)
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_select_box_1->max_items_count) - 1) )
    935e:	03 96       	adiw	r24, 0x03	; 3
    9360:	a3 01       	movw	r20, r6
    9362:	48 0f       	add	r20, r24
    9364:	59 1f       	adc	r21, r25
    9366:	c7 53       	subi	r28, 0x37	; 55
    9368:	df 4f       	sbci	r29, 0xFF	; 255
    936a:	59 83       	std	Y+1, r21	; 0x01
    936c:	48 83       	st	Y, r20
    936e:	c9 5c       	subi	r28, 0xC9	; 201
    9370:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1431
          {
            loop_t = 0;
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), pgm_read_word(&dyn_select_box_1->size_y), click_x, click_y) == true)
    9372:	0b 97       	sbiw	r24, 0x0b	; 11
    9374:	f3 01       	movw	r30, r6
    9376:	e8 0f       	add	r30, r24
    9378:	f9 1f       	adc	r31, r25
    937a:	c4 53       	subi	r28, 0x34	; 52
    937c:	df 4f       	sbci	r29, 0xFF	; 255
    937e:	f9 83       	std	Y+1, r31	; 0x01
    9380:	e8 83       	st	Y, r30
    9382:	cc 5c       	subi	r28, 0xCC	; 204
    9384:	d0 40       	sbci	r29, 0x00	; 0
    9386:	02 97       	sbiw	r24, 0x02	; 2
    9388:	93 01       	movw	r18, r6
    938a:	28 0f       	add	r18, r24
    938c:	39 1f       	adc	r19, r25
    938e:	c0 53       	subi	r28, 0x30	; 48
    9390:	df 4f       	sbci	r29, 0xFF	; 255
    9392:	39 83       	std	Y+1, r19	; 0x01
    9394:	28 83       	st	Y, r18
    9396:	c0 5d       	subi	r28, 0xD0	; 208
    9398:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1403
    }
    if (click_x > 0 && click_y > 0)
    {
      loop_i = 0;
      loop_t = 0;
      loop_r = 0;
    939a:	a1 2c       	mov	r10, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1402
      }
    }
    if (click_x > 0 && click_y > 0)
    {
      loop_i = 0;
      loop_t = 0;
    939c:	d1 2c       	mov	r13, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1406
      loop_r = 0;
      rfnt =  pgm_read_word(&dyn_select_box_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_select_box_1->args), menu_args1);
      while (loop_i < loop_cnt)
    939e:	cb 14       	cp	r12, r11
    93a0:	08 f0       	brcs	.+2      	; 0x93a4 <draw_menu(bool)+0x20ce>
    93a2:	ac c0       	rjmp	.+344    	; 0x94fc <draw_menu(bool)+0x2226>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1408
      {
        new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x);
    93a4:	f1 01       	movw	r30, r2
    93a6:	85 91       	lpm	r24, Z+
    93a8:	94 91       	lpm	r25, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1409
        new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y);
    93aa:	f4 01       	movw	r30, r8
    93ac:	65 91       	lpm	r22, Z+
    93ae:	74 91       	lpm	r23, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1410
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
    93b0:	c2 53       	subi	r28, 0x32	; 50
    93b2:	df 4f       	sbci	r29, 0xFF	; 255
    93b4:	e8 81       	ld	r30, Y
    93b6:	f9 81       	ldd	r31, Y+1	; 0x01
    93b8:	ce 5c       	subi	r28, 0xCE	; 206
    93ba:	d0 40       	sbci	r29, 0x00	; 0
    93bc:	24 91       	lpm	r18, Z
    93be:	22 23       	and	r18, r18
    93c0:	09 f4       	brne	.+2      	; 0x93c4 <draw_menu(bool)+0x20ee>
    93c2:	aa c0       	rjmp	.+340    	; 0x9518 <draw_menu(bool)+0x2242>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1409
      rfnt =  pgm_read_word(&dyn_select_box_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_select_box_1->args), menu_args1);
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y);
    93c4:	c6 54       	subi	r28, 0x46	; 70
    93c6:	df 4f       	sbci	r29, 0xFF	; 255
    93c8:	28 81       	ld	r18, Y
    93ca:	39 81       	ldd	r19, Y+1	; 0x01
    93cc:	ca 5b       	subi	r28, 0xBA	; 186
    93ce:	d0 40       	sbci	r29, 0x00	; 0
    93d0:	62 0f       	add	r22, r18
    93d2:	73 1f       	adc	r23, r19
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1415
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
        {
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_t);
          loop_t++;
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL)
    93d4:	cc 53       	subi	r28, 0x3C	; 60
    93d6:	df 4f       	sbci	r29, 0xFF	; 255
    93d8:	e8 81       	ld	r30, Y
    93da:	f9 81       	ldd	r31, Y+1	; 0x01
    93dc:	c4 5c       	subi	r28, 0xC4	; 196
    93de:	d0 40       	sbci	r29, 0x00	; 0
    93e0:	24 91       	lpm	r18, Z
    93e2:	21 30       	cpi	r18, 0x01	; 1
    93e4:	09 f4       	brne	.+2      	; 0x93e8 <draw_menu(bool)+0x2112>
    93e6:	b0 c0       	rjmp	.+352    	; 0x9548 <draw_menu(bool)+0x2272>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1408
      loop_r = 0;
      rfnt =  pgm_read_word(&dyn_select_box_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_select_box_1->args), menu_args1);
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x);
    93e8:	c8 54       	subi	r28, 0x48	; 72
    93ea:	df 4f       	sbci	r29, 0xFF	; 255
    93ec:	28 81       	ld	r18, Y
    93ee:	39 81       	ldd	r19, Y+1	; 0x01
    93f0:	c8 5b       	subi	r28, 0xB8	; 184
    93f2:	d0 40       	sbci	r29, 0x00	; 0
    93f4:	82 0f       	add	r24, r18
    93f6:	93 1f       	adc	r25, r19
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1420
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
          loop_t++;
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL_NEW_LINE)
    93f8:	cc 53       	subi	r28, 0x3C	; 60
    93fa:	df 4f       	sbci	r29, 0xFF	; 255
    93fc:	e8 81       	ld	r30, Y
    93fe:	f9 81       	ldd	r31, Y+1	; 0x01
    9400:	c4 5c       	subi	r28, 0xC4	; 196
    9402:	d0 40       	sbci	r29, 0x00	; 0
    9404:	24 91       	lpm	r18, Z
    9406:	22 30       	cpi	r18, 0x02	; 2
    9408:	09 f0       	breq	.+2      	; 0x940c <draw_menu(bool)+0x2136>
    940a:	38 c0       	rjmp	.+112    	; 0x947c <draw_menu(bool)+0x21a6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1422
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
    940c:	f1 01       	movw	r30, r2
    940e:	85 91       	lpm	r24, Z+
    9410:	94 91       	lpm	r25, Z
    9412:	ca 53       	subi	r28, 0x3A	; 58
    9414:	df 4f       	sbci	r29, 0xFF	; 255
    9416:	e8 81       	ld	r30, Y
    9418:	f9 81       	ldd	r31, Y+1	; 0x01
    941a:	c6 5c       	subi	r28, 0xC6	; 198
    941c:	d0 40       	sbci	r29, 0x00	; 0
    941e:	24 91       	lpm	r18, Z
    9420:	c8 54       	subi	r28, 0x48	; 72
    9422:	df 4f       	sbci	r29, 0xFF	; 255
    9424:	48 81       	ld	r20, Y
    9426:	59 81       	ldd	r21, Y+1	; 0x01
    9428:	c8 5b       	subi	r28, 0xB8	; 184
    942a:	d0 40       	sbci	r29, 0x00	; 0
    942c:	84 0f       	add	r24, r20
    942e:	95 1f       	adc	r25, r21
    9430:	2d 9d       	mul	r18, r13
    9432:	80 0d       	add	r24, r0
    9434:	91 1d       	adc	r25, r1
    9436:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1423
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_r);
    9438:	f4 01       	movw	r30, r8
    943a:	65 91       	lpm	r22, Z+
    943c:	74 91       	lpm	r23, Z
    943e:	c2 54       	subi	r28, 0x42	; 66
    9440:	df 4f       	sbci	r29, 0xFF	; 255
    9442:	e8 81       	ld	r30, Y
    9444:	f9 81       	ldd	r31, Y+1	; 0x01
    9446:	ce 5b       	subi	r28, 0xBE	; 190
    9448:	d0 40       	sbci	r29, 0x00	; 0
    944a:	24 91       	lpm	r18, Z
    944c:	c6 54       	subi	r28, 0x46	; 70
    944e:	df 4f       	sbci	r29, 0xFF	; 255
    9450:	48 81       	ld	r20, Y
    9452:	59 81       	ldd	r21, Y+1	; 0x01
    9454:	ca 5b       	subi	r28, 0xBA	; 186
    9456:	d0 40       	sbci	r29, 0x00	; 0
    9458:	64 0f       	add	r22, r20
    945a:	75 1f       	adc	r23, r21
    945c:	2a 9d       	mul	r18, r10
    945e:	60 0d       	add	r22, r0
    9460:	71 1d       	adc	r23, r1
    9462:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1424
          loop_t++;
    9464:	d3 94       	inc	r13
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1425
          if (loop_t > (pgm_read_byte(&dyn_select_box_1->max_items_count) - 1) )
    9466:	c7 53       	subi	r28, 0x37	; 55
    9468:	df 4f       	sbci	r29, 0xFF	; 255
    946a:	e8 81       	ld	r30, Y
    946c:	f9 81       	ldd	r31, Y+1	; 0x01
    946e:	c9 5c       	subi	r28, 0xC9	; 201
    9470:	d0 40       	sbci	r29, 0x00	; 0
    9472:	24 91       	lpm	r18, Z
    9474:	d2 16       	cp	r13, r18
    9476:	10 f0       	brcs	.+4      	; 0x947c <draw_menu(bool)+0x21a6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1428
          {
            loop_t = 0;
            loop_r++;
    9478:	a3 94       	inc	r10
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1427
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_select_box_1->max_items_count) - 1) )
          {
            loop_t = 0;
    947a:	d1 2c       	mov	r13, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1431
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), pgm_read_word(&dyn_select_box_1->size_y), click_x, click_y) == true)
    947c:	c4 53       	subi	r28, 0x34	; 52
    947e:	df 4f       	sbci	r29, 0xFF	; 255
    9480:	e8 81       	ld	r30, Y
    9482:	f9 81       	ldd	r31, Y+1	; 0x01
    9484:	cc 5c       	subi	r28, 0xCC	; 204
    9486:	d0 40       	sbci	r29, 0x00	; 0
    9488:	25 91       	lpm	r18, Z+
    948a:	34 91       	lpm	r19, Z
    948c:	c0 53       	subi	r28, 0x30	; 48
    948e:	df 4f       	sbci	r29, 0xFF	; 255
    9490:	e8 81       	ld	r30, Y
    9492:	f9 81       	ldd	r31, Y+1	; 0x01
    9494:	c0 5d       	subi	r28, 0xD0	; 208
    9496:	d0 40       	sbci	r29, 0x00	; 0
    9498:	45 91       	lpm	r20, Z+
    949a:	54 91       	lpm	r21, Z
    949c:	ce 53       	subi	r28, 0x3E	; 62
    949e:	df 4f       	sbci	r29, 0xFF	; 255
    94a0:	e8 80       	ld	r14, Y
    94a2:	f9 80       	ldd	r15, Y+1	; 0x01
    94a4:	c2 5c       	subi	r28, 0xC2	; 194
    94a6:	d0 40       	sbci	r29, 0x00	; 0
    94a8:	c0 54       	subi	r28, 0x40	; 64
    94aa:	df 4f       	sbci	r29, 0xFF	; 255
    94ac:	08 81       	ld	r16, Y
    94ae:	19 81       	ldd	r17, Y+1	; 0x01
    94b0:	c0 5c       	subi	r28, 0xC0	; 192
    94b2:	d0 40       	sbci	r29, 0x00	; 0
    94b4:	0e 94 70 21 	call	0x42e0	; 0x42e0 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    94b8:	18 2f       	mov	r17, r24
    94ba:	81 e0       	ldi	r24, 0x01	; 1
    94bc:	8c 0d       	add	r24, r12
    94be:	11 23       	and	r17, r17
    94c0:	49 f1       	breq	.+82     	; 0x9514 <draw_menu(bool)+0x223e>
    94c2:	ce 54       	subi	r28, 0x4E	; 78
    94c4:	df 4f       	sbci	r29, 0xFF	; 255
    94c6:	c8 82       	st	Y, r12
    94c8:	c2 5b       	subi	r28, 0xB2	; 178
    94ca:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1433
        {
          fntargs =  pgm_read_word(&dyn_select_box_1->dyn_symbol_onclick);
    94cc:	f2 01       	movw	r30, r4
    94ce:	e6 50       	subi	r30, 0x06	; 6
    94d0:	fe 4f       	sbci	r31, 0xFE	; 254
    94d2:	e6 0d       	add	r30, r6
    94d4:	f7 1d       	adc	r31, r7
    94d6:	25 91       	lpm	r18, Z+
    94d8:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1434
          ((fptr_args)fntargs)(pgm_read_byte(&dyn_select_box_1->args), loop_i);
    94da:	c4 54       	subi	r28, 0x44	; 68
    94dc:	df 4f       	sbci	r29, 0xFF	; 255
    94de:	e8 81       	ld	r30, Y
    94e0:	f9 81       	ldd	r31, Y+1	; 0x01
    94e2:	cc 5b       	subi	r28, 0xBC	; 188
    94e4:	d0 40       	sbci	r29, 0x00	; 0
    94e6:	84 91       	lpm	r24, Z
    94e8:	6c 2d       	mov	r22, r12
    94ea:	70 e0       	ldi	r23, 0x00	; 0
    94ec:	90 e0       	ldi	r25, 0x00	; 0
    94ee:	f9 01       	movw	r30, r18
    94f0:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1435
          ret = true;
    94f2:	c8 53       	subi	r28, 0x38	; 56
    94f4:	df 4f       	sbci	r29, 0xFF	; 255
    94f6:	18 83       	st	Y, r17
    94f8:	c8 5c       	subi	r28, 0xC8	; 200
    94fa:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1351
        loop_i++;
      }
    }
  }
  if (ret == true)  goto draw_menu_end;
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_select_box_1); idx++)
    94fc:	ca 54       	subi	r28, 0x4A	; 74
    94fe:	df 4f       	sbci	r29, 0xFF	; 255
    9500:	f8 81       	ld	r31, Y
    9502:	c6 5b       	subi	r28, 0xB6	; 182
    9504:	d0 40       	sbci	r29, 0x00	; 0
    9506:	ff 5f       	subi	r31, 0xFF	; 255
    9508:	ca 54       	subi	r28, 0x4A	; 74
    950a:	df 4f       	sbci	r29, 0xFF	; 255
    950c:	f8 83       	st	Y, r31
    950e:	c6 5b       	subi	r28, 0xB6	; 182
    9510:	d0 40       	sbci	r29, 0x00	; 0
    9512:	78 cc       	rjmp	.-1808   	; 0x8e04 <draw_menu(bool)+0x1b2e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1431
          {
            loop_t = 0;
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), pgm_read_word(&dyn_select_box_1->size_y), click_x, click_y) == true)
    9514:	c8 2e       	mov	r12, r24
    9516:	43 cf       	rjmp	.-378    	; 0x939e <draw_menu(bool)+0x20c8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1412
      {
        new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y);
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
        {
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_t);
    9518:	f4 01       	movw	r30, r8
    951a:	65 91       	lpm	r22, Z+
    951c:	74 91       	lpm	r23, Z
    951e:	c2 54       	subi	r28, 0x42	; 66
    9520:	df 4f       	sbci	r29, 0xFF	; 255
    9522:	e8 81       	ld	r30, Y
    9524:	f9 81       	ldd	r31, Y+1	; 0x01
    9526:	ce 5b       	subi	r28, 0xBE	; 190
    9528:	d0 40       	sbci	r29, 0x00	; 0
    952a:	24 91       	lpm	r18, Z
    952c:	c6 54       	subi	r28, 0x46	; 70
    952e:	df 4f       	sbci	r29, 0xFF	; 255
    9530:	48 81       	ld	r20, Y
    9532:	59 81       	ldd	r21, Y+1	; 0x01
    9534:	ca 5b       	subi	r28, 0xBA	; 186
    9536:	d0 40       	sbci	r29, 0x00	; 0
    9538:	64 0f       	add	r22, r20
    953a:	75 1f       	adc	r23, r21
    953c:	2d 9d       	mul	r18, r13
    953e:	60 0d       	add	r22, r0
    9540:	71 1d       	adc	r23, r1
    9542:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1413
          loop_t++;
    9544:	d3 94       	inc	r13
    9546:	46 cf       	rjmp	.-372    	; 0x93d4 <draw_menu(bool)+0x20fe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1417
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
    9548:	f1 01       	movw	r30, r2
    954a:	85 91       	lpm	r24, Z+
    954c:	94 91       	lpm	r25, Z
    954e:	ca 53       	subi	r28, 0x3A	; 58
    9550:	df 4f       	sbci	r29, 0xFF	; 255
    9552:	e8 81       	ld	r30, Y
    9554:	f9 81       	ldd	r31, Y+1	; 0x01
    9556:	c6 5c       	subi	r28, 0xC6	; 198
    9558:	d0 40       	sbci	r29, 0x00	; 0
    955a:	24 91       	lpm	r18, Z
    955c:	c8 54       	subi	r28, 0x48	; 72
    955e:	df 4f       	sbci	r29, 0xFF	; 255
    9560:	48 81       	ld	r20, Y
    9562:	59 81       	ldd	r21, Y+1	; 0x01
    9564:	c8 5b       	subi	r28, 0xB8	; 184
    9566:	d0 40       	sbci	r29, 0x00	; 0
    9568:	84 0f       	add	r24, r20
    956a:	95 1f       	adc	r25, r21
    956c:	2d 9d       	mul	r18, r13
    956e:	80 0d       	add	r24, r0
    9570:	91 1d       	adc	r25, r1
    9572:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1418
          loop_t++;
    9574:	d3 94       	inc	r13
    9576:	40 cf       	rjmp	.-384    	; 0x93f8 <draw_menu(bool)+0x2122>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1435
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), pgm_read_word(&dyn_select_box_1->size_y), click_x, click_y) == true)
        {
          fntargs =  pgm_read_word(&dyn_select_box_1->dyn_symbol_onclick);
          ((fptr_args)fntargs)(pgm_read_byte(&dyn_select_box_1->args), loop_i);
          ret = true;
    9578:	21 e0       	ldi	r18, 0x01	; 1
    957a:	c8 53       	subi	r28, 0x38	; 56
    957c:	df 4f       	sbci	r29, 0xFF	; 255
    957e:	28 83       	st	Y, r18
    9580:	c8 5c       	subi	r28, 0xC8	; 200
    9582:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1446
  }


draw_menu_end:
  return ret;
}
    9584:	c8 53       	subi	r28, 0x38	; 56
    9586:	df 4f       	sbci	r29, 0xFF	; 255
    9588:	88 81       	ld	r24, Y
    958a:	c8 5c       	subi	r28, 0xC8	; 200
    958c:	d0 40       	sbci	r29, 0x00	; 0
    958e:	cb 51       	subi	r28, 0x1B	; 27
    9590:	df 4f       	sbci	r29, 0xFF	; 255
    9592:	0f b6       	in	r0, 0x3f	; 63
    9594:	f8 94       	cli
    9596:	de bf       	out	0x3e, r29	; 62
    9598:	0f be       	out	0x3f, r0	; 63
    959a:	cd bf       	out	0x3d, r28	; 61
    959c:	df 91       	pop	r29
    959e:	cf 91       	pop	r28
    95a0:	1f 91       	pop	r17
    95a2:	0f 91       	pop	r16
    95a4:	ff 90       	pop	r15
    95a6:	ef 90       	pop	r14
    95a8:	df 90       	pop	r13
    95aa:	cf 90       	pop	r12
    95ac:	bf 90       	pop	r11
    95ae:	af 90       	pop	r10
    95b0:	9f 90       	pop	r9
    95b2:	8f 90       	pop	r8
    95b4:	7f 90       	pop	r7
    95b6:	6f 90       	pop	r6
    95b8:	5f 90       	pop	r5
    95ba:	4f 90       	pop	r4
    95bc:	3f 90       	pop	r3
    95be:	2f 90       	pop	r2
    95c0:	08 95       	ret

000095c2 <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>:
_Z27thermostat_program_set_weekhhh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:372
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day );
}
//// nastavi jaky v jakych dnech program plati
void thermostat_program_set_week(uint8_t program_id, uint8_t interval_id, uint8_t week)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day, week);
    95c2:	2d e4       	ldi	r18, 0x4D	; 77
    95c4:	82 9f       	mul	r24, r18
    95c6:	c0 01       	movw	r24, r0
    95c8:	11 24       	eor	r1, r1
    95ca:	26 e0       	ldi	r18, 0x06	; 6
    95cc:	62 9f       	mul	r22, r18
    95ce:	80 0d       	add	r24, r0
    95d0:	91 1d       	adc	r25, r1
    95d2:	11 24       	eor	r1, r1
    95d4:	64 2f       	mov	r22, r20
    95d6:	8e 50       	subi	r24, 0x0E	; 14
    95d8:	9e 4f       	sbci	r25, 0xFE	; 254
    95da:	0c 94 47 8f 	jmp	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>

000095de <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>:
_Z32thermostat_program_set_thresholdhhj():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:331
  ret = (EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1) << 8)  + EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1);
  return ret;
}
//// nastavi rozhodovaci uroven termostatu
void thermostat_program_set_threshold(uint8_t program_id, uint8_t interval_id, uint16_t threshold)
{
    95de:	1f 93       	push	r17
    95e0:	cf 93       	push	r28
    95e2:	df 93       	push	r29
    95e4:	14 2f       	mov	r17, r20
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:332
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1, ((threshold >> 8) & 0xff));
    95e6:	9d e4       	ldi	r25, 0x4D	; 77
    95e8:	89 9f       	mul	r24, r25
    95ea:	e0 01       	movw	r28, r0
    95ec:	11 24       	eor	r1, r1
    95ee:	cf 50       	subi	r28, 0x0F	; 15
    95f0:	de 4f       	sbci	r29, 0xFE	; 254
    95f2:	86 e0       	ldi	r24, 0x06	; 6
    95f4:	68 9f       	mul	r22, r24
    95f6:	c0 0d       	add	r28, r0
    95f8:	d1 1d       	adc	r29, r1
    95fa:	11 24       	eor	r1, r1
    95fc:	65 2f       	mov	r22, r21
    95fe:	ce 01       	movw	r24, r28
    9600:	05 96       	adiw	r24, 0x05	; 5
    9602:	0e 94 47 8f 	call	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:333
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1, (threshold & 0xff));
    9606:	61 2f       	mov	r22, r17
    9608:	ce 01       	movw	r24, r28
    960a:	04 96       	adiw	r24, 0x04	; 4
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:334
}
    960c:	df 91       	pop	r29
    960e:	cf 91       	pop	r28
    9610:	1f 91       	pop	r17
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:333
}
//// nastavi rozhodovaci uroven termostatu
void thermostat_program_set_threshold(uint8_t program_id, uint8_t interval_id, uint16_t threshold)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1, ((threshold >> 8) & 0xff));
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1, (threshold & 0xff));
    9612:	0c 94 47 8f 	jmp	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>

00009616 <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
_Z27thermostat_program_set_timehhhhhhh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:313
  *stop_min = (stop & 0b00000011) * 15;
  *active = start & 0b00000001;
}
//// nastavi cas termostatu
void thermostat_program_set_time(uint8_t program_id, uint8_t interval_id, uint8_t start_hour, uint8_t start_min, uint8_t stop_hour, uint8_t stop_min, uint8_t active)
{
    9616:	cf 92       	push	r12
    9618:	ef 92       	push	r14
    961a:	0f 93       	push	r16
    961c:	1f 93       	push	r17
    961e:	cf 93       	push	r28
    9620:	df 93       	push	r29
    9622:	c8 2f       	mov	r28, r24
    9624:	56 2f       	mov	r21, r22
    9626:	8e 2d       	mov	r24, r14
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:316
  uint8_t start, stop;
  start = ((start_hour << 3) & 0b11111000) + (((start_min / 15) << 1) & 0b00000110 ) + (active & 0b00000001);
  stop = ((stop_hour << 3) & 0b11111000) + ((stop_min / 15) & 0b00000011);
    9628:	3f e0       	ldi	r19, 0x0F	; 15
    962a:	63 2f       	mov	r22, r19
    962c:	0e 94 4e ae 	call	0x15c9c	; 0x15c9c <__udivmodqi4>
    9630:	83 70       	andi	r24, 0x03	; 3
    9632:	98 e0       	ldi	r25, 0x08	; 8
    9634:	09 9f       	mul	r16, r25
    9636:	80 01       	movw	r16, r0
    9638:	11 24       	eor	r1, r1
    963a:	08 0f       	add	r16, r24
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:317
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1, start);
    963c:	8d e4       	ldi	r24, 0x4D	; 77
    963e:	c8 9f       	mul	r28, r24
    9640:	e0 01       	movw	r28, r0
    9642:	11 24       	eor	r1, r1
    9644:	cf 50       	subi	r28, 0x0F	; 15
    9646:	de 4f       	sbci	r29, 0xFE	; 254
    9648:	96 e0       	ldi	r25, 0x06	; 6
    964a:	59 9f       	mul	r21, r25
    964c:	c0 0d       	add	r28, r0
    964e:	d1 1d       	adc	r29, r1
    9650:	11 24       	eor	r1, r1
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:315
}
//// nastavi cas termostatu
void thermostat_program_set_time(uint8_t program_id, uint8_t interval_id, uint8_t start_hour, uint8_t start_min, uint8_t stop_hour, uint8_t stop_min, uint8_t active)
{
  uint8_t start, stop;
  start = ((start_hour << 3) & 0b11111000) + (((start_min / 15) << 1) & 0b00000110 ) + (active & 0b00000001);
    9652:	82 2f       	mov	r24, r18
    9654:	0e 94 4e ae 	call	0x15c9c	; 0x15c9c <__udivmodqi4>
    9658:	68 2f       	mov	r22, r24
    965a:	66 0f       	add	r22, r22
    965c:	66 70       	andi	r22, 0x06	; 6
    965e:	88 e0       	ldi	r24, 0x08	; 8
    9660:	48 9f       	mul	r20, r24
    9662:	a0 01       	movw	r20, r0
    9664:	11 24       	eor	r1, r1
    9666:	9c 2d       	mov	r25, r12
    9668:	91 70       	andi	r25, 0x01	; 1
    966a:	c9 2e       	mov	r12, r25
    966c:	c4 0e       	add	r12, r20
    966e:	6c 0d       	add	r22, r12
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:317
  stop = ((stop_hour << 3) & 0b11111000) + ((stop_min / 15) & 0b00000011);
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1, start);
    9670:	ce 01       	movw	r24, r28
    9672:	02 96       	adiw	r24, 0x02	; 2
    9674:	0e 94 47 8f 	call	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:318
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1, stop);
    9678:	60 2f       	mov	r22, r16
    967a:	ce 01       	movw	r24, r28
    967c:	03 96       	adiw	r24, 0x03	; 3
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:319
}
    967e:	df 91       	pop	r29
    9680:	cf 91       	pop	r28
    9682:	1f 91       	pop	r17
    9684:	0f 91       	pop	r16
    9686:	ef 90       	pop	r14
    9688:	cf 90       	pop	r12
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:318
{
  uint8_t start, stop;
  start = ((start_hour << 3) & 0b11111000) + (((start_min / 15) << 1) & 0b00000110 ) + (active & 0b00000001);
  stop = ((stop_hour << 3) & 0b11111000) + ((stop_min / 15) & 0b00000011);
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1, start);
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1, stop);
    968a:	0c 94 47 8f 	jmp	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>

0000968e <thermostat_program_set_name(unsigned char, char*)>:
_Z27thermostat_program_set_namehPc():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:282
    if (t == 0) break;
  }
}
//// nastavi pojmenovani programu
void thermostat_program_set_name(uint8_t program_id, char *name)
{
    968e:	ef 92       	push	r14
    9690:	ff 92       	push	r15
    9692:	0f 93       	push	r16
    9694:	1f 93       	push	r17
    9696:	cf 93       	push	r28
    9698:	df 93       	push	r29
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:285
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
  {
    EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + i + eeprom_thermostat_program_name, name[i]);
    969a:	9d e4       	ldi	r25, 0x4D	; 77
    969c:	89 9f       	mul	r24, r25
    969e:	80 01       	movw	r16, r0
    96a0:	11 24       	eor	r1, r1
    96a2:	eb 01       	movw	r28, r22
    96a4:	78 01       	movw	r14, r16
    96a6:	8c ec       	ldi	r24, 0xCC	; 204
    96a8:	e8 1a       	sub	r14, r24
    96aa:	8d ef       	ldi	r24, 0xFD	; 253
    96ac:	f8 0a       	sbc	r15, r24
    96ae:	02 5c       	subi	r16, 0xC2	; 194
    96b0:	1d 4f       	sbci	r17, 0xFD	; 253
    96b2:	69 91       	ld	r22, Y+
    96b4:	c7 01       	movw	r24, r14
    96b6:	0e 94 47 8f 	call	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:286
    if (name[i] == 0) break;
    96ba:	fe 01       	movw	r30, r28
    96bc:	31 97       	sbiw	r30, 0x01	; 1
    96be:	80 81       	ld	r24, Z
    96c0:	88 23       	and	r24, r24
    96c2:	31 f0       	breq	.+12     	; 0x96d0 <thermostat_program_set_name(unsigned char, char*)+0x42>
    96c4:	9f ef       	ldi	r25, 0xFF	; 255
    96c6:	e9 1a       	sub	r14, r25
    96c8:	f9 0a       	sbc	r15, r25
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:283
  }
}
//// nastavi pojmenovani programu
void thermostat_program_set_name(uint8_t program_id, char *name)
{
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
    96ca:	e0 16       	cp	r14, r16
    96cc:	f1 06       	cpc	r15, r17
    96ce:	89 f7       	brne	.-30     	; 0x96b2 <thermostat_program_set_name(unsigned char, char*)+0x24>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:288
  {
    EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + i + eeprom_thermostat_program_name, name[i]);
    if (name[i] == 0) break;
  }
}
    96d0:	df 91       	pop	r29
    96d2:	cf 91       	pop	r28
    96d4:	1f 91       	pop	r17
    96d6:	0f 91       	pop	r16
    96d8:	ff 90       	pop	r15
    96da:	ef 90       	pop	r14
    96dc:	08 95       	ret

000096de <thermostat_ring_set_pid_eeprom(unsigned char)>:
_Z30thermostat_ring_set_pid_eepromh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:233
  PID_d[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d);
  PID_time[idx] = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer);
}

void thermostat_ring_set_pid_eeprom(uint8_t idx)
{
    96de:	ef 92       	push	r14
    96e0:	ff 92       	push	r15
    96e2:	0f 93       	push	r16
    96e4:	1f 93       	push	r17
    96e6:	cf 93       	push	r28
    96e8:	df 93       	push	r29
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:234
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_p, PID_p[idx]);
    96ea:	e8 2e       	mov	r14, r24
    96ec:	f1 2c       	mov	r15, r1
    96ee:	91 e2       	ldi	r25, 0x21	; 33
    96f0:	89 9f       	mul	r24, r25
    96f2:	e0 01       	movw	r28, r0
    96f4:	11 24       	eor	r1, r1
    96f6:	87 01       	movw	r16, r14
    96f8:	00 0f       	add	r16, r16
    96fa:	11 1f       	adc	r17, r17
    96fc:	00 0f       	add	r16, r16
    96fe:	11 1f       	adc	r17, r17
    9700:	f8 01       	movw	r30, r16
    9702:	e8 59       	subi	r30, 0x98	; 152
    9704:	f6 4f       	sbci	r31, 0xF6	; 246
    9706:	40 81       	ld	r20, Z
    9708:	51 81       	ldd	r21, Z+1	; 0x01
    970a:	62 81       	ldd	r22, Z+2	; 0x02
    970c:	73 81       	ldd	r23, Z+3	; 0x03
    970e:	ce 01       	movw	r24, r28
    9710:	80 5a       	subi	r24, 0xA0	; 160
    9712:	9e 4f       	sbci	r25, 0xFE	; 254
    9714:	0e 94 b1 8f 	call	0x11f62	; 0x11f62 <EEPROMwriteFloat(unsigned int, float)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:235
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_i, PID_i[idx]);
    9718:	f8 01       	movw	r30, r16
    971a:	e4 58       	subi	r30, 0x84	; 132
    971c:	f6 4f       	sbci	r31, 0xF6	; 246
    971e:	40 81       	ld	r20, Z
    9720:	51 81       	ldd	r21, Z+1	; 0x01
    9722:	62 81       	ldd	r22, Z+2	; 0x02
    9724:	73 81       	ldd	r23, Z+3	; 0x03
    9726:	ce 01       	movw	r24, r28
    9728:	8c 59       	subi	r24, 0x9C	; 156
    972a:	9e 4f       	sbci	r25, 0xFE	; 254
    972c:	0e 94 b1 8f 	call	0x11f62	; 0x11f62 <EEPROMwriteFloat(unsigned int, float)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:236
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d, PID_d[idx]);
    9730:	f8 01       	movw	r30, r16
    9732:	e0 57       	subi	r30, 0x70	; 112
    9734:	f6 4f       	sbci	r31, 0xF6	; 246
    9736:	40 81       	ld	r20, Z
    9738:	51 81       	ldd	r21, Z+1	; 0x01
    973a:	62 81       	ldd	r22, Z+2	; 0x02
    973c:	73 81       	ldd	r23, Z+3	; 0x03
    973e:	ce 01       	movw	r24, r28
    9740:	88 59       	subi	r24, 0x98	; 152
    9742:	9e 4f       	sbci	r25, 0xFE	; 254
    9744:	0e 94 b1 8f 	call	0x11f62	; 0x11f62 <EEPROMwriteFloat(unsigned int, float)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:237
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
    9748:	f7 01       	movw	r30, r14
    974a:	ec 55       	subi	r30, 0x5C	; 92
    974c:	f6 4f       	sbci	r31, 0xF6	; 246
    974e:	60 81       	ld	r22, Z
    9750:	ce 01       	movw	r24, r28
    9752:	84 59       	subi	r24, 0x94	; 148
    9754:	9e 4f       	sbci	r25, 0xFE	; 254
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:238
}
    9756:	df 91       	pop	r29
    9758:	cf 91       	pop	r28
    975a:	1f 91       	pop	r17
    975c:	0f 91       	pop	r16
    975e:	ff 90       	pop	r15
    9760:	ef 90       	pop	r14
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:237
void thermostat_ring_set_pid_eeprom(uint8_t idx)
{
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_p, PID_p[idx]);
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_i, PID_i[idx]);
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d, PID_d[idx]);
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
    9762:	0c 94 47 8f 	jmp	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>

00009766 <thermostat_ring_set_mezni(unsigned char, int)>:
_Z25thermostat_ring_set_meznihi():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:157
int thermostat_ring_get_mezni(uint8_t idx)
{
  return (EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni) << 8) + EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1);
}
void thermostat_ring_set_mezni(uint8_t idx, int temp)
{
    9766:	1f 93       	push	r17
    9768:	cf 93       	push	r28
    976a:	df 93       	push	r29
    976c:	16 2f       	mov	r17, r22
    976e:	67 2f       	mov	r22, r23
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:158
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni, temp >> 8);
    9770:	91 e2       	ldi	r25, 0x21	; 33
    9772:	89 9f       	mul	r24, r25
    9774:	e0 01       	movw	r28, r0
    9776:	11 24       	eor	r1, r1
    9778:	ce 01       	movw	r24, r28
    977a:	8a 5a       	subi	r24, 0xAA	; 170
    977c:	9e 4f       	sbci	r25, 0xFE	; 254
    977e:	0e 94 47 8f 	call	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:159
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1, temp & 0xff);
    9782:	61 2f       	mov	r22, r17
    9784:	ce 01       	movw	r24, r28
    9786:	89 5a       	subi	r24, 0xA9	; 169
    9788:	9e 4f       	sbci	r25, 0xFE	; 254
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:160
}
    978a:	df 91       	pop	r29
    978c:	cf 91       	pop	r28
    978e:	1f 91       	pop	r17
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:159
  return (EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni) << 8) + EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1);
}
void thermostat_ring_set_mezni(uint8_t idx, int temp)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni, temp >> 8);
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1, temp & 0xff);
    9790:	0c 94 47 8f 	jmp	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>

00009794 <thermostat_ring_set_name(unsigned char, char*)>:
_Z24thermostat_ring_set_namehPc():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:110
    name[i] = t;
    if (t == 0) break;
  }
}
void thermostat_ring_set_name(uint8_t idx, char *name)
{
    9794:	df 92       	push	r13
    9796:	ef 92       	push	r14
    9798:	ff 92       	push	r15
    979a:	0f 93       	push	r16
    979c:	1f 93       	push	r17
    979e:	cf 93       	push	r28
    97a0:	df 93       	push	r29
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:115
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = name[i];
    EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i, t);
    97a2:	91 e2       	ldi	r25, 0x21	; 33
    97a4:	89 9f       	mul	r24, r25
    97a6:	e0 01       	movw	r28, r0
    97a8:	11 24       	eor	r1, r1
    97aa:	7b 01       	movw	r14, r22
    97ac:	8e 01       	movw	r16, r28
    97ae:	04 5b       	subi	r16, 0xB4	; 180
    97b0:	1e 4f       	sbci	r17, 0xFE	; 254
    97b2:	cb 5a       	subi	r28, 0xAB	; 171
    97b4:	de 4f       	sbci	r29, 0xFE	; 254
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:114
void thermostat_ring_set_name(uint8_t idx, char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = name[i];
    97b6:	f7 01       	movw	r30, r14
    97b8:	d1 90       	ld	r13, Z+
    97ba:	7f 01       	movw	r14, r30
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:115
    EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i, t);
    97bc:	6d 2d       	mov	r22, r13
    97be:	c8 01       	movw	r24, r16
    97c0:	0e 94 47 8f 	call	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:116
    if (t == 0) break;
    97c4:	dd 20       	and	r13, r13
    97c6:	29 f0       	breq	.+10     	; 0x97d2 <thermostat_ring_set_name(unsigned char, char*)+0x3e>
    97c8:	0f 5f       	subi	r16, 0xFF	; 255
    97ca:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:112
  }
}
void thermostat_ring_set_name(uint8_t idx, char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
    97cc:	0c 17       	cp	r16, r28
    97ce:	1d 07       	cpc	r17, r29
    97d0:	91 f7       	brne	.-28     	; 0x97b6 <thermostat_ring_set_name(unsigned char, char*)+0x22>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:118
  {
    t = name[i];
    EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i, t);
    if (t == 0) break;
  }
}
    97d2:	df 91       	pop	r29
    97d4:	cf 91       	pop	r28
    97d6:	1f 91       	pop	r17
    97d8:	0f 91       	pop	r16
    97da:	ff 90       	pop	r15
    97dc:	ef 90       	pop	r14
    97de:	df 90       	pop	r13
    97e0:	08 95       	ret

000097e2 <thermostat_ring_clear(unsigned char)>:
_Z21thermostat_ring_clearh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:419
  return ret;
}


void thermostat_ring_clear(uint8_t idx)
{
    97e2:	8f 92       	push	r8
    97e4:	9f 92       	push	r9
    97e6:	af 92       	push	r10
    97e8:	bf 92       	push	r11
    97ea:	ef 92       	push	r14
    97ec:	ff 92       	push	r15
    97ee:	0f 93       	push	r16
    97f0:	1f 93       	push	r17
    97f2:	cf 93       	push	r28
    97f4:	c8 2f       	mov	r28, r24
thermostat_ring_pid_set_kp():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:242
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
}

void thermostat_ring_pid_set_kp(uint8_t id, float x)
{
  PID_p[id] = x;
    97f6:	e8 2e       	mov	r14, r24
    97f8:	f1 2c       	mov	r15, r1
    97fa:	87 01       	movw	r16, r14
    97fc:	00 0f       	add	r16, r16
    97fe:	11 1f       	adc	r17, r17
    9800:	00 0f       	add	r16, r16
    9802:	11 1f       	adc	r17, r17
    9804:	f8 01       	movw	r30, r16
    9806:	e8 59       	subi	r30, 0x98	; 152
    9808:	f6 4f       	sbci	r31, 0xF6	; 246
    980a:	81 2c       	mov	r8, r1
    980c:	91 2c       	mov	r9, r1
    980e:	90 e8       	ldi	r25, 0x80	; 128
    9810:	a9 2e       	mov	r10, r25
    9812:	9f e3       	ldi	r25, 0x3F	; 63
    9814:	b9 2e       	mov	r11, r25
    9816:	80 82       	st	Z, r8
    9818:	91 82       	std	Z+1, r9	; 0x01
    981a:	a2 82       	std	Z+2, r10	; 0x02
    981c:	b3 82       	std	Z+3, r11	; 0x03
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:243
  thermostat_ring_update_pid_parameters(id);
    981e:	8c 2f       	mov	r24, r28
    9820:	0e 94 5d 1f 	call	0x3eba	; 0x3eba <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:244
  thermostat_ring_set_pid_eeprom(id);
    9824:	8c 2f       	mov	r24, r28
    9826:	0e 94 6f 4b 	call	0x96de	; 0x96de <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_pid_set_ki():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:248
}
void thermostat_ring_pid_set_ki(uint8_t id, float x)
{
  PID_i[id] = x;
    982a:	f8 01       	movw	r30, r16
    982c:	e4 58       	subi	r30, 0x84	; 132
    982e:	f6 4f       	sbci	r31, 0xF6	; 246
    9830:	80 e0       	ldi	r24, 0x00	; 0
    9832:	90 e0       	ldi	r25, 0x00	; 0
    9834:	a0 e0       	ldi	r26, 0x00	; 0
    9836:	bf e3       	ldi	r27, 0x3F	; 63
    9838:	80 83       	st	Z, r24
    983a:	91 83       	std	Z+1, r25	; 0x01
    983c:	a2 83       	std	Z+2, r26	; 0x02
    983e:	b3 83       	std	Z+3, r27	; 0x03
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:249
  thermostat_ring_update_pid_parameters(id);
    9840:	8c 2f       	mov	r24, r28
    9842:	0e 94 5d 1f 	call	0x3eba	; 0x3eba <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:250
  thermostat_ring_set_pid_eeprom(id);
    9846:	8c 2f       	mov	r24, r28
    9848:	0e 94 6f 4b 	call	0x96de	; 0x96de <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_pid_set_kd():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:254
}
void thermostat_ring_pid_set_kd(uint8_t id, float x)
{
  PID_d[id] = x;
    984c:	f8 01       	movw	r30, r16
    984e:	e0 57       	subi	r30, 0x70	; 112
    9850:	f6 4f       	sbci	r31, 0xF6	; 246
    9852:	80 82       	st	Z, r8
    9854:	91 82       	std	Z+1, r9	; 0x01
    9856:	a2 82       	std	Z+2, r10	; 0x02
    9858:	b3 82       	std	Z+3, r11	; 0x03
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:255
  thermostat_ring_update_pid_parameters(id);
    985a:	8c 2f       	mov	r24, r28
    985c:	0e 94 5d 1f 	call	0x3eba	; 0x3eba <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:256
  thermostat_ring_set_pid_eeprom(id);
    9860:	8c 2f       	mov	r24, r28
    9862:	0e 94 6f 4b 	call	0x96de	; 0x96de <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_pid_set_time():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:261
}

void thermostat_ring_pid_set_time(uint8_t id, uint8_t timer)
{
  PID_time[id] = timer;
    9866:	f7 01       	movw	r30, r14
    9868:	ec 55       	subi	r30, 0x5C	; 92
    986a:	f6 4f       	sbci	r31, 0xF6	; 246
    986c:	8c e3       	ldi	r24, 0x3C	; 60
    986e:	80 83       	st	Z, r24
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:262
  thermostat_ring_update_pid_parameters(id);
    9870:	8c 2f       	mov	r24, r28
    9872:	0e 94 5d 1f 	call	0x3eba	; 0x3eba <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:263
  thermostat_ring_set_pid_eeprom(id);
    9876:	8c 2f       	mov	r24, r28
    9878:	0e 94 6f 4b 	call	0x96de	; 0x96de <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_set_asociate_tds():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:170
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
}
void thermostat_ring_set_asociate_tds(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds, id);
    987c:	81 e2       	ldi	r24, 0x21	; 33
    987e:	c8 9f       	mul	r28, r24
    9880:	80 01       	movw	r16, r0
    9882:	11 24       	eor	r1, r1
    9884:	6f ef       	ldi	r22, 0xFF	; 255
    9886:	c8 01       	movw	r24, r16
    9888:	84 5a       	subi	r24, 0xA4	; 164
    988a:	9e 4f       	sbci	r25, 0xFE	; 254
    988c:	0e 94 47 8f 	call	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
_Z21thermostat_ring_clearh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:425
  thermostat_ring_pid_set_kp(idx, 1);
  thermostat_ring_pid_set_ki(idx, 0.5);
  thermostat_ring_pid_set_kd(idx, 1);
  thermostat_ring_pid_set_time(idx, 60);
  thermostat_ring_set_asociate_tds(idx, 255);
  thermostat_ring_set_mezni(idx, 220);
    9890:	6c ed       	ldi	r22, 0xDC	; 220
    9892:	70 e0       	ldi	r23, 0x00	; 0
    9894:	8c 2f       	mov	r24, r28
    9896:	0e 94 b3 4b 	call	0x9766	; 0x9766 <thermostat_ring_set_mezni(unsigned char, int)>
thermostat_ring_set_program_id():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:148
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
}
void thermostat_ring_set_program_id(uint8_t idx, uint8_t id)
{
  return EEPROM.write((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program, id);
    989a:	6f ef       	ldi	r22, 0xFF	; 255
    989c:	c8 01       	movw	r24, r16
    989e:	85 5a       	subi	r24, 0xA5	; 165
    98a0:	9e 4f       	sbci	r25, 0xFE	; 254
    98a2:	0e 94 47 8f 	call	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
thermostat_ring_set_state():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:23
{
  return therm_stav[idx];
}
void thermostat_ring_set_state(uint8_t idx, uint8_t stav)
{
  therm_stav[idx] = stav;
    98a6:	f7 01       	movw	r30, r14
    98a8:	e0 5f       	subi	r30, 0xF0	; 240
    98aa:	f5 4f       	sbci	r31, 0xF5	; 245
    98ac:	10 82       	st	Z, r1
thermostat_ring_set_active():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:137
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active);
}
void thermostat_ring_set_active(uint8_t idx, uint8_t ready)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active, ready);
    98ae:	6f ef       	ldi	r22, 0xFF	; 255
    98b0:	c8 01       	movw	r24, r16
    98b2:	83 5a       	subi	r24, 0xA3	; 163
    98b4:	9e 4f       	sbci	r25, 0xFE	; 254
    98b6:	0e 94 47 8f 	call	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
thermostat_ring_set_output():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:127
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
}
void thermostat_ring_set_output(uint8_t idx, uint8_t output)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output, output);
    98ba:	6f ef       	ldi	r22, 0xFF	; 255
    98bc:	c8 01       	movw	r24, r16
    98be:	81 5a       	subi	r24, 0xA1	; 161
    98c0:	9e 4f       	sbci	r25, 0xFE	; 254
    98c2:	0e 94 47 8f 	call	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
thermostat_ring_set_mode():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:180
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_mode);
}
void thermostat_ring_set_mode(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mode, id);
    98c6:	60 e0       	ldi	r22, 0x00	; 0
    98c8:	c8 01       	movw	r24, r16
    98ca:	82 5a       	subi	r24, 0xA2	; 162
    98cc:	9e 4f       	sbci	r25, 0xFE	; 254
    98ce:	0e 94 47 8f 	call	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
_Z21thermostat_ring_clearh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:432
  thermostat_ring_set_state(idx, 0);
  thermostat_ring_set_power(idx, 0);
  thermostat_ring_set_active(idx, RING_FREE);
  thermostat_ring_set_output(idx, 255);
  thermostat_ring_set_mode(idx, 0);
  thermostat_ring_set_name(idx, "FREE");
    98d2:	6f e5       	ldi	r22, 0x5F	; 95
    98d4:	73 e0       	ldi	r23, 0x03	; 3
    98d6:	8c 2f       	mov	r24, r28
    98d8:	0e 94 ca 4b 	call	0x9794	; 0x9794 <thermostat_ring_set_name(unsigned char, char*)>
thermostat_ring_set_status_bites():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:202
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
    98dc:	60 e0       	ldi	r22, 0x00	; 0
    98de:	c8 01       	movw	r24, r16
    98e0:	88 5a       	subi	r24, 0xA8	; 168
    98e2:	9e 4f       	sbci	r25, 0xFE	; 254
_Z21thermostat_ring_clearh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:434
  thermostat_ring_set_active(idx, RING_FREE);
  thermostat_ring_set_output(idx, 255);
  thermostat_ring_set_mode(idx, 0);
  thermostat_ring_set_name(idx, "FREE");
  thermostat_ring_set_status_bites(idx, 0);
}
    98e4:	cf 91       	pop	r28
    98e6:	1f 91       	pop	r17
    98e8:	0f 91       	pop	r16
    98ea:	ff 90       	pop	r15
    98ec:	ef 90       	pop	r14
    98ee:	bf 90       	pop	r11
    98f0:	af 90       	pop	r10
    98f2:	9f 90       	pop	r9
    98f4:	8f 90       	pop	r8
thermostat_ring_set_status_bites():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:202
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
    98f6:	0c 94 47 8f 	jmp	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>

000098fa <click_thermostat_default_ring_set_mode(unsigned char)>:
_Z38click_thermostat_default_ring_set_modeh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:180
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_mode);
}
void thermostat_ring_set_mode(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mode, id);
    98fa:	20 91 0f 0a 	lds	r18, 0x0A0F	; 0x800a0f <default_ring>
    98fe:	91 e2       	ldi	r25, 0x21	; 33
    9900:	29 9f       	mul	r18, r25
    9902:	90 01       	movw	r18, r0
    9904:	11 24       	eor	r1, r1
    9906:	68 2f       	mov	r22, r24
    9908:	c9 01       	movw	r24, r18
    990a:	82 5a       	subi	r24, 0xA2	; 162
    990c:	9e 4f       	sbci	r25, 0xFE	; 254
    990e:	0e 94 47 8f 	call	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2208
  return ret;
}
uint8_t click_thermostat_default_ring_set_mode(uint8_t args)
{
  thermostat_ring_set_mode(default_ring, args);
  change_term_mode = 1;
    9912:	81 e0       	ldi	r24, 0x01	; 1
    9914:	80 93 59 08 	sts	0x0859, r24	; 0x800859 <change_term_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2209
}
    9918:	08 95       	ret

0000991a <set_tds18s20(unsigned char, struct_DDS18s20*)>:
_Z12set_tds18s20hP15struct_DDS18s20():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:55
  }
  return ret;
}
/// nastavi strukturu tds
void set_tds18s20(uint8_t idx, struct_DDS18s20 *tds)
{
    991a:	af 92       	push	r10
    991c:	bf 92       	push	r11
    991e:	cf 92       	push	r12
    9920:	df 92       	push	r13
    9922:	ef 92       	push	r14
    9924:	ff 92       	push	r15
    9926:	0f 93       	push	r16
    9928:	1f 93       	push	r17
    992a:	cf 93       	push	r28
    992c:	df 93       	push	r29
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:56
  if (idx < HW_ONEWIRE_MAXROMS)
    992e:	86 30       	cpi	r24, 0x06	; 6
    9930:	08 f0       	brcs	.+2      	; 0x9934 <set_tds18s20(unsigned char, struct_DDS18s20*)+0x1a>
    9932:	49 c0       	rjmp	.+146    	; 0x99c6 <set_tds18s20(unsigned char, struct_DDS18s20*)+0xac>
    9934:	6b 01       	movw	r12, r22
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:58
  {
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used, tds->used);
    9936:	96 e1       	ldi	r25, 0x16	; 22
    9938:	89 9f       	mul	r24, r25
    993a:	e0 01       	movw	r28, r0
    993c:	11 24       	eor	r1, r1
    993e:	f6 01       	movw	r30, r12
    9940:	61 91       	ld	r22, Z+
    9942:	7f 01       	movw	r14, r30
    9944:	ce 01       	movw	r24, r28
    9946:	88 53       	subi	r24, 0x38	; 56
    9948:	9f 4f       	sbci	r25, 0xFF	; 255
    994a:	0e 94 47 8f 	call	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
    994e:	8e 01       	movw	r16, r28
    9950:	07 53       	subi	r16, 0x37	; 55
    9952:	1f 4f       	sbci	r17, 0xFF	; 255
    9954:	5e 01       	movw	r10, r28
    9956:	f1 ed       	ldi	r31, 0xD1	; 209
    9958:	af 0e       	add	r10, r31
    995a:	b1 1c       	adc	r11, r1
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:61
    for (uint8_t m = 0; m < 8; m++)
    {
      EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_rom + m, tds->rom[m]);
    995c:	f7 01       	movw	r30, r14
    995e:	61 91       	ld	r22, Z+
    9960:	7f 01       	movw	r14, r30
    9962:	c8 01       	movw	r24, r16
    9964:	0e 94 47 8f 	call	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:62
      EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m, tds->name[m]);
    9968:	f7 01       	movw	r30, r14
    996a:	62 85       	ldd	r22, Z+10	; 0x0a
    996c:	c8 01       	movw	r24, r16
    996e:	0b 96       	adiw	r24, 0x0b	; 11
    9970:	0e 94 47 8f 	call	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
    9974:	0f 5f       	subi	r16, 0xFF	; 255
    9976:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:59
void set_tds18s20(uint8_t idx, struct_DDS18s20 *tds)
{
  if (idx < HW_ONEWIRE_MAXROMS)
  {
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used, tds->used);
    for (uint8_t m = 0; m < 8; m++)
    9978:	0a 15       	cp	r16, r10
    997a:	1b 05       	cpc	r17, r11
    997c:	79 f7       	brne	.-34     	; 0x995c <set_tds18s20(unsigned char, struct_DDS18s20*)+0x42>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:64
    {
      EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_rom + m, tds->rom[m]);
      EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m, tds->name[m]);
    }
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_assigned, tds->assigned_ds2482 );
    997e:	f6 01       	movw	r30, r12
    9980:	61 85       	ldd	r22, Z+9	; 0x09
    9982:	c8 01       	movw	r24, r16
    9984:	0e 94 47 8f 	call	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:65
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_high, (tds->offset >> 8) & 0xff);
    9988:	f6 01       	movw	r30, r12
    998a:	63 85       	ldd	r22, Z+11	; 0x0b
    998c:	ce 01       	movw	r24, r28
    998e:	8e 52       	subi	r24, 0x2E	; 46
    9990:	9f 4f       	sbci	r25, 0xFF	; 255
    9992:	0e 94 47 8f 	call	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:66
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_low, (tds->offset) & 0xff);
    9996:	f6 01       	movw	r30, r12
    9998:	62 85       	ldd	r22, Z+10	; 0x0a
    999a:	ce 01       	movw	r24, r28
    999c:	8d 52       	subi	r24, 0x2D	; 45
    999e:	9f 4f       	sbci	r25, 0xFF	; 255
    99a0:	0e 94 47 8f 	call	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:67
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_period , tds->period);
    99a4:	f6 01       	movw	r30, r12
    99a6:	64 89       	ldd	r22, Z+20	; 0x14
    99a8:	ce 01       	movw	r24, r28
    99aa:	84 52       	subi	r24, 0x24	; 36
    99ac:	9f 4f       	sbci	r25, 0xFF	; 255
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:69
  }
}
    99ae:	df 91       	pop	r29
    99b0:	cf 91       	pop	r28
    99b2:	1f 91       	pop	r17
    99b4:	0f 91       	pop	r16
    99b6:	ff 90       	pop	r15
    99b8:	ef 90       	pop	r14
    99ba:	df 90       	pop	r13
    99bc:	cf 90       	pop	r12
    99be:	bf 90       	pop	r11
    99c0:	af 90       	pop	r10
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:67
      EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m, tds->name[m]);
    }
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_assigned, tds->assigned_ds2482 );
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_high, (tds->offset >> 8) & 0xff);
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_low, (tds->offset) & 0xff);
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_period , tds->period);
    99c2:	0c 94 47 8f 	jmp	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:69
  }
}
    99c6:	df 91       	pop	r29
    99c8:	cf 91       	pop	r28
    99ca:	1f 91       	pop	r17
    99cc:	0f 91       	pop	r16
    99ce:	ff 90       	pop	r15
    99d0:	ef 90       	pop	r14
    99d2:	df 90       	pop	r13
    99d4:	cf 90       	pop	r12
    99d6:	bf 90       	pop	r11
    99d8:	af 90       	pop	r10
    99da:	08 95       	ret

000099dc <device_set_name(char*)>:
_Z15device_set_namePc():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:74
    }
  }
}
//// ulozi nazev zarizeni
void device_set_name(char *name)
{
    99dc:	ff 92       	push	r15
    99de:	0f 93       	push	r16
    99e0:	1f 93       	push	r17
    99e2:	cf 93       	push	r28
    99e4:	df 93       	push	r29
    99e6:	8c 01       	movw	r16, r24
    99e8:	d0 e0       	ldi	r29, 0x00	; 0
    99ea:	c0 e0       	ldi	r28, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:78
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = name[i];
    99ec:	f8 01       	movw	r30, r16
    99ee:	f1 90       	ld	r15, Z+
    99f0:	8f 01       	movw	r16, r30
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:79
    EEPROM.write(device_nazev +  i, t);
    99f2:	6f 2d       	mov	r22, r15
    99f4:	ce 01       	movw	r24, r28
    99f6:	8c 59       	subi	r24, 0x9C	; 156
    99f8:	9f 4f       	sbci	r25, 0xFF	; 255
    99fa:	0e 94 47 8f 	call	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:80
    if (t == 0)
    99fe:	f1 10       	cpse	r15, r1
    9a00:	0b c0       	rjmp	.+22     	; 0x9a18 <device_set_name(char*)+0x3c>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:82
    {
      EEPROM.write(device_nazev +  i + 1, 0);
    9a02:	60 e0       	ldi	r22, 0x00	; 0
    9a04:	ce 01       	movw	r24, r28
    9a06:	8b 59       	subi	r24, 0x9B	; 155
    9a08:	9f 4f       	sbci	r25, 0xFF	; 255
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:86
      break;
    }
  }
}
    9a0a:	df 91       	pop	r29
    9a0c:	cf 91       	pop	r28
    9a0e:	1f 91       	pop	r17
    9a10:	0f 91       	pop	r16
    9a12:	ff 90       	pop	r15
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:82
  {
    t = name[i];
    EEPROM.write(device_nazev +  i, t);
    if (t == 0)
    {
      EEPROM.write(device_nazev +  i + 1, 0);
    9a14:	0c 94 47 8f 	jmp	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
    9a18:	21 96       	adiw	r28, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:76
}
//// ulozi nazev zarizeni
void device_set_name(char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
    9a1a:	c9 30       	cpi	r28, 0x09	; 9
    9a1c:	d1 05       	cpc	r29, r1
    9a1e:	31 f7       	brne	.-52     	; 0x99ec <device_set_name(char*)+0x10>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:86
    {
      EEPROM.write(device_nazev +  i + 1, 0);
      break;
    }
  }
}
    9a20:	df 91       	pop	r29
    9a22:	cf 91       	pop	r28
    9a24:	1f 91       	pop	r17
    9a26:	0f 91       	pop	r16
    9a28:	ff 90       	pop	r15
    9a2a:	08 95       	ret

00009a2c <save_setup_network()>:
_Z18save_setup_networkv():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:41
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// ulozi nastaveni site
void save_setup_network(void)
{
    9a2c:	ef 92       	push	r14
    9a2e:	ff 92       	push	r15
    9a30:	0f 93       	push	r16
    9a32:	1f 93       	push	r17
    9a34:	cf 93       	push	r28
    9a36:	df 93       	push	r29
    9a38:	0f e1       	ldi	r16, 0x1F	; 31
    9a3a:	1c e0       	ldi	r17, 0x0C	; 12
    9a3c:	ce e6       	ldi	r28, 0x6E	; 110
    9a3e:	d0 e0       	ldi	r29, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:42
  for (uint8_t m = 0; m < 6; m++) EEPROM.write(device_mac + m, device.mac[m]);
    9a40:	f8 01       	movw	r30, r16
    9a42:	61 91       	ld	r22, Z+
    9a44:	8f 01       	movw	r16, r30
    9a46:	ce 01       	movw	r24, r28
    9a48:	0e 94 47 8f 	call	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
    9a4c:	21 96       	adiw	r28, 0x01	; 1
    9a4e:	c4 37       	cpi	r28, 0x74	; 116
    9a50:	d1 05       	cpc	r29, r1
    9a52:	b1 f7       	brne	.-20     	; 0x9a40 <save_setup_network()+0x14>
    9a54:	05 e2       	ldi	r16, 0x25	; 37
    9a56:	1c e0       	ldi	r17, 0x0C	; 12
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:43
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_ip + m, device.myIP[m]);
    9a58:	f8 01       	movw	r30, r16
    9a5a:	61 91       	ld	r22, Z+
    9a5c:	8f 01       	movw	r16, r30
    9a5e:	ce 01       	movw	r24, r28
    9a60:	0e 94 47 8f 	call	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
    9a64:	21 96       	adiw	r28, 0x01	; 1
    9a66:	c8 37       	cpi	r28, 0x78	; 120
    9a68:	d1 05       	cpc	r29, r1
    9a6a:	b1 f7       	brne	.-20     	; 0x9a58 <save_setup_network()+0x2c>
    9a6c:	09 e2       	ldi	r16, 0x29	; 41
    9a6e:	1c e0       	ldi	r17, 0x0C	; 12
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:44
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_mask + m, device.myMASK[m]);
    9a70:	f8 01       	movw	r30, r16
    9a72:	61 91       	ld	r22, Z+
    9a74:	8f 01       	movw	r16, r30
    9a76:	ce 01       	movw	r24, r28
    9a78:	0e 94 47 8f 	call	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
    9a7c:	21 96       	adiw	r28, 0x01	; 1
    9a7e:	cc 37       	cpi	r28, 0x7C	; 124
    9a80:	d1 05       	cpc	r29, r1
    9a82:	b1 f7       	brne	.-20     	; 0x9a70 <save_setup_network()+0x44>
    9a84:	21 e3       	ldi	r18, 0x31	; 49
    9a86:	e2 2e       	mov	r14, r18
    9a88:	2c e0       	ldi	r18, 0x0C	; 12
    9a8a:	f2 2e       	mov	r15, r18
    9a8c:	00 e8       	ldi	r16, 0x80	; 128
    9a8e:	10 e0       	ldi	r17, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:45
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_gw + m, device.myGW[m]);
    9a90:	f7 01       	movw	r30, r14
    9a92:	61 91       	ld	r22, Z+
    9a94:	7f 01       	movw	r14, r30
    9a96:	c8 01       	movw	r24, r16
    9a98:	0e 94 47 8f 	call	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
    9a9c:	0f 5f       	subi	r16, 0xFF	; 255
    9a9e:	1f 4f       	sbci	r17, 0xFF	; 255
    9aa0:	04 38       	cpi	r16, 0x84	; 132
    9aa2:	11 05       	cpc	r17, r1
    9aa4:	a9 f7       	brne	.-22     	; 0x9a90 <save_setup_network()+0x64>
    9aa6:	9d e2       	ldi	r25, 0x2D	; 45
    9aa8:	e9 2e       	mov	r14, r25
    9aaa:	9c e0       	ldi	r25, 0x0C	; 12
    9aac:	f9 2e       	mov	r15, r25
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:46
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_dns + m, device.myDNS[m]);
    9aae:	f7 01       	movw	r30, r14
    9ab0:	61 91       	ld	r22, Z+
    9ab2:	7f 01       	movw	r14, r30
    9ab4:	ce 01       	movw	r24, r28
    9ab6:	0e 94 47 8f 	call	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
    9aba:	21 96       	adiw	r28, 0x01	; 1
    9abc:	c0 38       	cpi	r28, 0x80	; 128
    9abe:	d1 05       	cpc	r29, r1
    9ac0:	b1 f7       	brne	.-20     	; 0x9aae <save_setup_network()+0x82>
    9ac2:	85 e3       	ldi	r24, 0x35	; 53
    9ac4:	e8 2e       	mov	r14, r24
    9ac6:	8c e0       	ldi	r24, 0x0C	; 12
    9ac8:	f8 2e       	mov	r15, r24
    9aca:	c4 e6       	ldi	r28, 0x64	; 100
    9acc:	d0 e0       	ldi	r29, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:47
  for (uint8_t m = 0; m < 9; m++) EEPROM.write(device_nazev + m, device.nazev[m]);
    9ace:	f7 01       	movw	r30, r14
    9ad0:	61 91       	ld	r22, Z+
    9ad2:	7f 01       	movw	r14, r30
    9ad4:	ce 01       	movw	r24, r28
    9ad6:	0e 94 47 8f 	call	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
    9ada:	21 96       	adiw	r28, 0x01	; 1
    9adc:	cd 36       	cpi	r28, 0x6D	; 109
    9ade:	d1 05       	cpc	r29, r1
    9ae0:	b1 f7       	brne	.-20     	; 0x9ace <save_setup_network()+0xa2>
    9ae2:	cf e3       	ldi	r28, 0x3F	; 63
    9ae4:	dc e0       	ldi	r29, 0x0C	; 12
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:48
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_mqtt_server + m, device.mqtt_server[m]);
    9ae6:	69 91       	ld	r22, Y+
    9ae8:	c8 01       	movw	r24, r16
    9aea:	0e 94 47 8f 	call	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
    9aee:	0f 5f       	subi	r16, 0xFF	; 255
    9af0:	1f 4f       	sbci	r17, 0xFF	; 255
    9af2:	08 38       	cpi	r16, 0x88	; 136
    9af4:	11 05       	cpc	r17, r1
    9af6:	b9 f7       	brne	.-18     	; 0x9ae6 <save_setup_network()+0xba>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:49
  EEPROM.write(device_mqtt_port, device.mqtt_port >> 8);
    9af8:	60 91 44 0c 	lds	r22, 0x0C44	; 0x800c44 <device+0x25>
    9afc:	88 e8       	ldi	r24, 0x88	; 136
    9afe:	90 e0       	ldi	r25, 0x00	; 0
    9b00:	0e 94 47 8f 	call	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:50
  EEPROM.write(device_mqtt_port + 1, device.mqtt_port & 0xff);
    9b04:	60 91 43 0c 	lds	r22, 0x0C43	; 0x800c43 <device+0x24>
    9b08:	89 e8       	ldi	r24, 0x89	; 137
    9b0a:	90 e0       	ldi	r25, 0x00	; 0
    9b0c:	0e 94 47 8f 	call	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
    9b10:	05 e4       	ldi	r16, 0x45	; 69
    9b12:	1c e0       	ldi	r17, 0x0C	; 12
    9b14:	ca e8       	ldi	r28, 0x8A	; 138
    9b16:	d0 e0       	ldi	r29, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:51
  for (uint8_t m = 0; m < 20; m++) EEPROM.write(device_mqtt_user + m, device.mqtt_user[m]);
    9b18:	f8 01       	movw	r30, r16
    9b1a:	61 91       	ld	r22, Z+
    9b1c:	8f 01       	movw	r16, r30
    9b1e:	ce 01       	movw	r24, r28
    9b20:	0e 94 47 8f 	call	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
    9b24:	21 96       	adiw	r28, 0x01	; 1
    9b26:	ce 39       	cpi	r28, 0x9E	; 158
    9b28:	d1 05       	cpc	r29, r1
    9b2a:	b1 f7       	brne	.-20     	; 0x9b18 <save_setup_network()+0xec>
    9b2c:	09 e5       	ldi	r16, 0x59	; 89
    9b2e:	1c e0       	ldi	r17, 0x0C	; 12
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:52
  for (uint8_t m = 0; m < 20; m++) EEPROM.write(device_mqtt_key + m, device.mqtt_key[m]);
    9b30:	f8 01       	movw	r30, r16
    9b32:	61 91       	ld	r22, Z+
    9b34:	8f 01       	movw	r16, r30
    9b36:	ce 01       	movw	r24, r28
    9b38:	0e 94 47 8f 	call	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
    9b3c:	21 96       	adiw	r28, 0x01	; 1
    9b3e:	c2 3b       	cpi	r28, 0xB2	; 178
    9b40:	d1 05       	cpc	r29, r1
    9b42:	b1 f7       	brne	.-20     	; 0x9b30 <save_setup_network()+0x104>
    9b44:	0d e6       	ldi	r16, 0x6D	; 109
    9b46:	1c e0       	ldi	r17, 0x0C	; 12
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:53
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_ntp_server + m, device.ntp_server[m]);
    9b48:	f8 01       	movw	r30, r16
    9b4a:	61 91       	ld	r22, Z+
    9b4c:	8f 01       	movw	r16, r30
    9b4e:	ce 01       	movw	r24, r28
    9b50:	0e 94 47 8f 	call	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
    9b54:	21 96       	adiw	r28, 0x01	; 1
    9b56:	c6 3b       	cpi	r28, 0xB6	; 182
    9b58:	d1 05       	cpc	r29, r1
    9b5a:	b1 f7       	brne	.-20     	; 0x9b48 <save_setup_network()+0x11c>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:54
}
    9b5c:	df 91       	pop	r29
    9b5e:	cf 91       	pop	r28
    9b60:	1f 91       	pop	r17
    9b62:	0f 91       	pop	r16
    9b64:	ff 90       	pop	r15
    9b66:	ef 90       	pop	r14
    9b68:	08 95       	ret

00009b6a <remote_tds_set_name(unsigned char, char*) [clone .part.16]>:
_Z19remote_tds_set_namehPc.part.16():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1994
{
  remote_tds_set_name(idx, name);
  remote_tds_set_active(idx, active);
}
/// nastavi topic
void remote_tds_set_name(uint8_t idx,  char *name)
    9b6a:	df 92       	push	r13
    9b6c:	ef 92       	push	r14
    9b6e:	ff 92       	push	r15
    9b70:	0f 93       	push	r16
    9b72:	1f 93       	push	r17
    9b74:	cf 93       	push	r28
    9b76:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2001
  char t;
  if (idx < MAX_RTDS)
    for (uint8_t i = 0; i < (RTDS_DEVICE_STRING_LEN); i++)
    {
      t = name[i];
      EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i, t);
    9b78:	94 e1       	ldi	r25, 0x14	; 20
    9b7a:	89 9f       	mul	r24, r25
    9b7c:	e0 01       	movw	r28, r0
    9b7e:	11 24       	eor	r1, r1
    9b80:	7b 01       	movw	r14, r22
    9b82:	8e 01       	movw	r16, r28
    9b84:	06 55       	subi	r16, 0x56	; 86
    9b86:	1a 4f       	sbci	r17, 0xFA	; 250
    9b88:	c4 54       	subi	r28, 0x44	; 68
    9b8a:	da 4f       	sbci	r29, 0xFA	; 250
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2000
{
  char t;
  if (idx < MAX_RTDS)
    for (uint8_t i = 0; i < (RTDS_DEVICE_STRING_LEN); i++)
    {
      t = name[i];
    9b8c:	f7 01       	movw	r30, r14
    9b8e:	d1 90       	ld	r13, Z+
    9b90:	7f 01       	movw	r14, r30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2001
      EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i, t);
    9b92:	6d 2d       	mov	r22, r13
    9b94:	c8 01       	movw	r24, r16
    9b96:	0e 94 47 8f 	call	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2002
      if (t == 0) break;
    9b9a:	dd 20       	and	r13, r13
    9b9c:	29 f0       	breq	.+10     	; 0x9ba8 <remote_tds_set_name(unsigned char, char*) [clone .part.16]+0x3e>
    9b9e:	0f 5f       	subi	r16, 0xFF	; 255
    9ba0:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1998
/// nastavi topic
void remote_tds_set_name(uint8_t idx,  char *name)
{
  char t;
  if (idx < MAX_RTDS)
    for (uint8_t i = 0; i < (RTDS_DEVICE_STRING_LEN); i++)
    9ba2:	0c 17       	cp	r16, r28
    9ba4:	1d 07       	cpc	r17, r29
    9ba6:	91 f7       	brne	.-28     	; 0x9b8c <remote_tds_set_name(unsigned char, char*) [clone .part.16]+0x22>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2004
    {
      t = name[i];
      EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i, t);
      if (t == 0) break;
    }
}
    9ba8:	df 91       	pop	r29
    9baa:	cf 91       	pop	r28
    9bac:	1f 91       	pop	r17
    9bae:	0f 91       	pop	r16
    9bb0:	ff 90       	pop	r15
    9bb2:	ef 90       	pop	r14
    9bb4:	df 90       	pop	r13
    9bb6:	08 95       	ret

00009bb8 <remote_tds_set_complete(unsigned char, unsigned char, char*)>:
_Z23remote_tds_set_completehhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1989
    *active = 255;
  }
}
///
void remote_tds_set_complete(uint8_t idx, uint8_t active, char *name)
{
    9bb8:	cf 93       	push	r28
    9bba:	df 93       	push	r29
    9bbc:	d6 2f       	mov	r29, r22
remote_tds_set_name():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1997
}
/// nastavi topic
void remote_tds_set_name(uint8_t idx,  char *name)
{
  char t;
  if (idx < MAX_RTDS)
    9bbe:	8a 30       	cpi	r24, 0x0A	; 10
    9bc0:	78 f4       	brcc	.+30     	; 0x9be0 <remote_tds_set_complete(unsigned char, unsigned char, char*)+0x28>
    9bc2:	ba 01       	movw	r22, r20
    9bc4:	c8 2f       	mov	r28, r24
    9bc6:	0e 94 b5 4d 	call	0x9b6a	; 0x9b6a <remote_tds_set_name(unsigned char, char*) [clone .part.16]>
remote_tds_set_active():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2020
}

void remote_tds_set_active(uint8_t idx, uint8_t active)
{
  if (idx <  MAX_RTDS)
    EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS, active);
    9bca:	24 e1       	ldi	r18, 0x14	; 20
    9bcc:	c2 9f       	mul	r28, r18
    9bce:	c0 01       	movw	r24, r0
    9bd0:	11 24       	eor	r1, r1
    9bd2:	6d 2f       	mov	r22, r29
    9bd4:	83 54       	subi	r24, 0x43	; 67
    9bd6:	9a 4f       	sbci	r25, 0xFA	; 250
_Z23remote_tds_set_completehhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1992
///
void remote_tds_set_complete(uint8_t idx, uint8_t active, char *name)
{
  remote_tds_set_name(idx, name);
  remote_tds_set_active(idx, active);
}
    9bd8:	df 91       	pop	r29
    9bda:	cf 91       	pop	r28
remote_tds_set_active():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2020
}

void remote_tds_set_active(uint8_t idx, uint8_t active)
{
  if (idx <  MAX_RTDS)
    EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS, active);
    9bdc:	0c 94 47 8f 	jmp	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
_Z23remote_tds_set_completehhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1992
///
void remote_tds_set_complete(uint8_t idx, uint8_t active, char *name)
{
  remote_tds_set_name(idx, name);
  remote_tds_set_active(idx, active);
}
    9be0:	df 91       	pop	r29
    9be2:	cf 91       	pop	r28
    9be4:	08 95       	ret

00009be6 <remote_tds_clear(unsigned char)>:
_Z16remote_tds_clearh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2024
  if (idx <  MAX_RTDS)
    EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS, active);
}
///
void remote_tds_clear(uint8_t idx)
{
    9be6:	cf 93       	push	r28
    9be8:	df 93       	push	r29
    9bea:	cd b7       	in	r28, 0x3d	; 61
    9bec:	de b7       	in	r29, 0x3e	; 62
    9bee:	62 97       	sbiw	r28, 0x12	; 18
    9bf0:	0f b6       	in	r0, 0x3f	; 63
    9bf2:	f8 94       	cli
    9bf4:	de bf       	out	0x3e, r29	; 62
    9bf6:	0f be       	out	0x3f, r0	; 63
    9bf8:	cd bf       	out	0x3d, r28	; 61
    9bfa:	e1 e0       	ldi	r30, 0x01	; 1
    9bfc:	f0 e0       	ldi	r31, 0x00	; 0
    9bfe:	ec 0f       	add	r30, r28
    9c00:	fd 1f       	adc	r31, r29
    9c02:	e8 0f       	add	r30, r24
    9c04:	f1 1d       	adc	r31, r1
    9c06:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2028
  char rtds_name[RTDS_DEVICE_STRING_LEN];
  for (uint8_t i = 0; i < RTDS_DEVICE_STRING_LEN; i++)
    rtds_name[idx] = 0;
  remote_tds_set_complete(idx, 0, rtds_name);
    9c08:	ae 01       	movw	r20, r28
    9c0a:	4f 5f       	subi	r20, 0xFF	; 255
    9c0c:	5f 4f       	sbci	r21, 0xFF	; 255
    9c0e:	60 e0       	ldi	r22, 0x00	; 0
    9c10:	0e 94 dc 4d 	call	0x9bb8	; 0x9bb8 <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2029
}
    9c14:	62 96       	adiw	r28, 0x12	; 18
    9c16:	0f b6       	in	r0, 0x3f	; 63
    9c18:	f8 94       	cli
    9c1a:	de bf       	out	0x3e, r29	; 62
    9c1c:	0f be       	out	0x3f, r0	; 63
    9c1e:	cd bf       	out	0x3d, r28	; 61
    9c20:	df 91       	pop	r29
    9c22:	cf 91       	pop	r28
    9c24:	08 95       	ret

00009c26 <click_rtds_deassociate_onewire(unsigned char, unsigned char)>:
_Z30click_rtds_deassociate_onewirehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4527
/*
   args1 --- atributy z nastaveni tlacitka
   args2 --- index polozky z menu
*/
void click_rtds_deassociate_onewire(uint8_t args1, uint8_t args2)
{
    9c26:	86 2f       	mov	r24, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4529
  //printf("mazu rtds args1:%d args2:%d\n", args1, args2);
  remote_tds_clear(args2);
    9c28:	0e 94 f3 4d 	call	0x9be6	; 0x9be6 <remote_tds_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4530
  MenuHistoryPrevMenu();
    9c2c:	0c 94 55 2e 	jmp	0x5caa	; 0x5caa <MenuHistoryPrevMenu()>

00009c30 <click_function_default_temp(unsigned char, unsigned char)>:
_Z27click_function_default_temphh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1764
  cri = 0;
}
/////

void click_function_default_temp(uint8_t args1, uint8_t args2)
{
    9c30:	cf 93       	push	r28
    9c32:	c6 2f       	mov	r28, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1765
  printf("click %d, %d\n", args1, args2);
    9c34:	1f 92       	push	r1
    9c36:	6f 93       	push	r22
    9c38:	1f 92       	push	r1
    9c3a:	8f 93       	push	r24
    9c3c:	84 e6       	ldi	r24, 0x64	; 100
    9c3e:	93 e0       	ldi	r25, 0x03	; 3
    9c40:	9f 93       	push	r25
    9c42:	8f 93       	push	r24
    9c44:	0e 94 94 af 	call	0x15f28	; 0x15f28 <printf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1766
  default_show_temp = args2;
    9c48:	c0 93 a1 08 	sts	0x08A1, r28	; 0x8008a1 <default_show_temp>
set_default_show_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2180
}
//////////////////////////
/// funkce pro nastaveni vychoziho zobrazeni zdroje teploty
void set_default_show_temp(uint8_t default_temp)
{
  EEPROM.write(my_default_show_temp, default_temp);
    9c4c:	0f 90       	pop	r0
    9c4e:	0f 90       	pop	r0
    9c50:	0f 90       	pop	r0
    9c52:	0f 90       	pop	r0
    9c54:	0f 90       	pop	r0
    9c56:	0f 90       	pop	r0
    9c58:	6c 2f       	mov	r22, r28
    9c5a:	8d e5       	ldi	r24, 0x5D	; 93
    9c5c:	90 e0       	ldi	r25, 0x00	; 0
_Z27click_function_default_temphh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1768
void click_function_default_temp(uint8_t args1, uint8_t args2)
{
  printf("click %d, %d\n", args1, args2);
  default_show_temp = args2;
  set_default_show_temp(args2);
}
    9c5e:	cf 91       	pop	r28
set_default_show_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2180
}
//////////////////////////
/// funkce pro nastaveni vychoziho zobrazeni zdroje teploty
void set_default_show_temp(uint8_t default_temp)
{
  EEPROM.write(my_default_show_temp, default_temp);
    9c60:	0c 94 47 8f 	jmp	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>

00009c64 <get_tds18s20(unsigned char, struct_DDS18s20*)>:
_Z12get_tds18s20hP15struct_DDS18s20():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:35
  }
}

/// ziska strikturu tds
uint8_t get_tds18s20(uint8_t idx, struct_DDS18s20 *tds)
{
    9c64:	af 92       	push	r10
    9c66:	bf 92       	push	r11
    9c68:	cf 92       	push	r12
    9c6a:	df 92       	push	r13
    9c6c:	ef 92       	push	r14
    9c6e:	ff 92       	push	r15
    9c70:	0f 93       	push	r16
    9c72:	1f 93       	push	r17
    9c74:	cf 93       	push	r28
    9c76:	df 93       	push	r29
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:37
  uint8_t ret = 0;
  if (idx < HW_ONEWIRE_MAXROMS)
    9c78:	86 30       	cpi	r24, 0x06	; 6
    9c7a:	08 f0       	brcs	.+2      	; 0x9c7e <get_tds18s20(unsigned char, struct_DDS18s20*)+0x1a>
    9c7c:	56 c0       	rjmp	.+172    	; 0x9d2a <get_tds18s20(unsigned char, struct_DDS18s20*)+0xc6>
    9c7e:	8b 01       	movw	r16, r22
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:39
  {
    tds->used = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used);
    9c80:	96 e1       	ldi	r25, 0x16	; 22
    9c82:	89 9f       	mul	r24, r25
    9c84:	e0 01       	movw	r28, r0
    9c86:	11 24       	eor	r1, r1
    9c88:	ce 01       	movw	r24, r28
    9c8a:	88 53       	subi	r24, 0x38	; 56
    9c8c:	9f 4f       	sbci	r25, 0xFF	; 255
    9c8e:	0e 94 49 8f 	call	0x11e92	; 0x11e92 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
    9c92:	f8 01       	movw	r30, r16
    9c94:	81 93       	st	Z+, r24
    9c96:	6f 01       	movw	r12, r30
    9c98:	7e 01       	movw	r14, r28
    9c9a:	f9 ec       	ldi	r31, 0xC9	; 201
    9c9c:	ef 0e       	add	r14, r31
    9c9e:	f1 1c       	adc	r15, r1
    9ca0:	5e 01       	movw	r10, r28
    9ca2:	81 ed       	ldi	r24, 0xD1	; 209
    9ca4:	a8 0e       	add	r10, r24
    9ca6:	b1 1c       	adc	r11, r1
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:42
    for (uint8_t m = 0; m < 8; m++)
    {
      tds->rom[m] = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_rom + m);
    9ca8:	c7 01       	movw	r24, r14
    9caa:	0e 94 49 8f 	call	0x11e92	; 0x11e92 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
    9cae:	f6 01       	movw	r30, r12
    9cb0:	81 93       	st	Z+, r24
    9cb2:	6f 01       	movw	r12, r30
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:43
      tds->name[m] = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m);
    9cb4:	c7 01       	movw	r24, r14
    9cb6:	0b 96       	adiw	r24, 0x0b	; 11
    9cb8:	0e 94 49 8f 	call	0x11e92	; 0x11e92 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
    9cbc:	f6 01       	movw	r30, r12
    9cbe:	82 87       	std	Z+10, r24	; 0x0a
    9cc0:	ff ef       	ldi	r31, 0xFF	; 255
    9cc2:	ef 1a       	sub	r14, r31
    9cc4:	ff 0a       	sbc	r15, r31
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:40
{
  uint8_t ret = 0;
  if (idx < HW_ONEWIRE_MAXROMS)
  {
    tds->used = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used);
    for (uint8_t m = 0; m < 8; m++)
    9cc6:	ea 14       	cp	r14, r10
    9cc8:	fb 04       	cpc	r15, r11
    9cca:	71 f7       	brne	.-36     	; 0x9ca8 <get_tds18s20(unsigned char, struct_DDS18s20*)+0x44>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:45
    {
      tds->rom[m] = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_rom + m);
      tds->name[m] = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m);
    }
    tds->name[7] = 0;
    9ccc:	f8 01       	movw	r30, r16
    9cce:	13 8a       	std	Z+19, r1	; 0x13
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:46
    tds->assigned_ds2482 = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_assigned);
    9cd0:	c7 01       	movw	r24, r14
    9cd2:	0e 94 49 8f 	call	0x11e92	; 0x11e92 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
    9cd6:	f8 01       	movw	r30, r16
    9cd8:	81 87       	std	Z+9, r24	; 0x09
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:47
    tds->offset = (EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_high) << 8) + EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_low);
    9cda:	ce 01       	movw	r24, r28
    9cdc:	8e 52       	subi	r24, 0x2E	; 46
    9cde:	9f 4f       	sbci	r25, 0xFF	; 255
    9ce0:	0e 94 49 8f 	call	0x11e92	; 0x11e92 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
    9ce4:	f8 2e       	mov	r15, r24
    9ce6:	ce 01       	movw	r24, r28
    9ce8:	8d 52       	subi	r24, 0x2D	; 45
    9cea:	9f 4f       	sbci	r25, 0xFF	; 255
    9cec:	0e 94 49 8f 	call	0x11e92	; 0x11e92 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
    9cf0:	2f 2d       	mov	r18, r15
    9cf2:	30 e0       	ldi	r19, 0x00	; 0
    9cf4:	32 2f       	mov	r19, r18
    9cf6:	22 27       	eor	r18, r18
    9cf8:	82 0f       	add	r24, r18
    9cfa:	93 2f       	mov	r25, r19
    9cfc:	91 1d       	adc	r25, r1
    9cfe:	f8 01       	movw	r30, r16
    9d00:	93 87       	std	Z+11, r25	; 0x0b
    9d02:	82 87       	std	Z+10, r24	; 0x0a
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:48
    tds->period = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_period);
    9d04:	ce 01       	movw	r24, r28
    9d06:	84 52       	subi	r24, 0x24	; 36
    9d08:	9f 4f       	sbci	r25, 0xFF	; 255
    9d0a:	0e 94 49 8f 	call	0x11e92	; 0x11e92 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
    9d0e:	f8 01       	movw	r30, r16
    9d10:	84 8b       	std	Z+20, r24	; 0x14
    9d12:	81 e0       	ldi	r24, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:52
    ret = 1;
  }
  return ret;
}
    9d14:	df 91       	pop	r29
    9d16:	cf 91       	pop	r28
    9d18:	1f 91       	pop	r17
    9d1a:	0f 91       	pop	r16
    9d1c:	ff 90       	pop	r15
    9d1e:	ef 90       	pop	r14
    9d20:	df 90       	pop	r13
    9d22:	cf 90       	pop	r12
    9d24:	bf 90       	pop	r11
    9d26:	af 90       	pop	r10
    9d28:	08 95       	ret
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:36
}

/// ziska strikturu tds
uint8_t get_tds18s20(uint8_t idx, struct_DDS18s20 *tds)
{
  uint8_t ret = 0;
    9d2a:	80 e0       	ldi	r24, 0x00	; 0
    9d2c:	f3 cf       	rjmp	.-26     	; 0x9d14 <get_tds18s20(unsigned char, struct_DDS18s20*)+0xb0>

00009d2e <tds_update_associate()>:
_Z20tds_update_associatev():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:141
  tds_set_clear(w_rom[idx].tds_idx);
}

//// funkce, ktera zpetne nastavi do w_rom tds_idx, do jake realne tds je to assiciovano
void tds_update_associate(void)
{
    9d2e:	ef 92       	push	r14
    9d30:	ff 92       	push	r15
    9d32:	0f 93       	push	r16
    9d34:	1f 93       	push	r17
    9d36:	cf 93       	push	r28
    9d38:	df 93       	push	r29
    9d3a:	cd b7       	in	r28, 0x3d	; 61
    9d3c:	de b7       	in	r29, 0x3e	; 62
    9d3e:	6e 97       	sbiw	r28, 0x1e	; 30
    9d40:	0f b6       	in	r0, 0x3f	; 63
    9d42:	f8 94       	cli
    9d44:	de bf       	out	0x3e, r29	; 62
    9d46:	0f be       	out	0x3f, r0	; 63
    9d48:	cd bf       	out	0x3d, r28	; 61
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:144
  struct_DDS18s20 tds;
  uint8_t tmp_rom[8];
  for (uint8_t r = 0; r < 8; r++) tmp_rom[r] = 0;
    9d4a:	1f 8a       	std	Y+23, r1	; 0x17
    9d4c:	18 8e       	std	Y+24, r1	; 0x18
    9d4e:	19 8e       	std	Y+25, r1	; 0x19
    9d50:	1a 8e       	std	Y+26, r1	; 0x1a
    9d52:	1b 8e       	std	Y+27, r1	; 0x1b
    9d54:	1c 8e       	std	Y+28, r1	; 0x1c
    9d56:	1d 8e       	std	Y+29, r1	; 0x1d
    9d58:	1e 8e       	std	Y+30, r1	; 0x1e
    9d5a:	00 ec       	ldi	r16, 0xC0	; 192
    9d5c:	19 e0       	ldi	r17, 0x09	; 9
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:148

  for (uint8_t wrom_id = 0; wrom_id < HW_ONEWIRE_MAXROMS; wrom_id++)
  {
    w_rom[wrom_id].tds_idx = 255;
    9d5e:	ee 24       	eor	r14, r14
    9d60:	ea 94       	dec	r14
    9d62:	f8 01       	movw	r30, r16
    9d64:	e2 86       	std	Z+10, r14	; 0x0a
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:149
    if (tds_compare_rom(tmp_rom, w_rom[wrom_id].rom) == true)
    9d66:	b8 01       	movw	r22, r16
    9d68:	ce 01       	movw	r24, r28
    9d6a:	47 96       	adiw	r24, 0x17	; 23
    9d6c:	0e 94 8e 20 	call	0x411c	; 0x411c <tds_compare_rom(unsigned char*, unsigned char*)>
    9d70:	81 11       	cpse	r24, r1
    9d72:	14 c0       	rjmp	.+40     	; 0x9d9c <tds_update_associate()+0x6e>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:152
      continue;

    for (uint8_t tds_id = 0; tds_id < HW_ONEWIRE_MAXROMS; tds_id++)
    9d74:	f1 2c       	mov	r15, r1
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:154
    {
      get_tds18s20(tds_id, &tds);
    9d76:	be 01       	movw	r22, r28
    9d78:	6f 5f       	subi	r22, 0xFF	; 255
    9d7a:	7f 4f       	sbci	r23, 0xFF	; 255
    9d7c:	8f 2d       	mov	r24, r15
    9d7e:	0e 94 32 4e 	call	0x9c64	; 0x9c64 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:155
      if (tds_compare_rom(tds.rom, w_rom[wrom_id].rom) == true)
    9d82:	b8 01       	movw	r22, r16
    9d84:	ce 01       	movw	r24, r28
    9d86:	02 96       	adiw	r24, 0x02	; 2
    9d88:	0e 94 8e 20 	call	0x411c	; 0x411c <tds_compare_rom(unsigned char*, unsigned char*)>
    9d8c:	88 23       	and	r24, r24
    9d8e:	11 f0       	breq	.+4      	; 0x9d94 <tds_update_associate()+0x66>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:156
        w_rom[wrom_id].tds_idx = tds_id;
    9d90:	f8 01       	movw	r30, r16
    9d92:	f2 86       	std	Z+10, r15	; 0x0a
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:152
  {
    w_rom[wrom_id].tds_idx = 255;
    if (tds_compare_rom(tmp_rom, w_rom[wrom_id].rom) == true)
      continue;

    for (uint8_t tds_id = 0; tds_id < HW_ONEWIRE_MAXROMS; tds_id++)
    9d94:	f3 94       	inc	r15
    9d96:	f6 e0       	ldi	r31, 0x06	; 6
    9d98:	ff 12       	cpse	r15, r31
    9d9a:	ed cf       	rjmp	.-38     	; 0x9d76 <tds_update_associate()+0x48>
    9d9c:	05 5f       	subi	r16, 0xF5	; 245
    9d9e:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:146
{
  struct_DDS18s20 tds;
  uint8_t tmp_rom[8];
  for (uint8_t r = 0; r < 8; r++) tmp_rom[r] = 0;

  for (uint8_t wrom_id = 0; wrom_id < HW_ONEWIRE_MAXROMS; wrom_id++)
    9da0:	8a e0       	ldi	r24, 0x0A	; 10
    9da2:	02 30       	cpi	r16, 0x02	; 2
    9da4:	18 07       	cpc	r17, r24
    9da6:	e9 f6       	brne	.-70     	; 0x9d62 <tds_update_associate()+0x34>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:159
      get_tds18s20(tds_id, &tds);
      if (tds_compare_rom(tds.rom, w_rom[wrom_id].rom) == true)
        w_rom[wrom_id].tds_idx = tds_id;
    }
  }
}
    9da8:	6e 96       	adiw	r28, 0x1e	; 30
    9daa:	0f b6       	in	r0, 0x3f	; 63
    9dac:	f8 94       	cli
    9dae:	de bf       	out	0x3e, r29	; 62
    9db0:	0f be       	out	0x3f, r0	; 63
    9db2:	cd bf       	out	0x3d, r28	; 61
    9db4:	df 91       	pop	r29
    9db6:	cf 91       	pop	r28
    9db8:	1f 91       	pop	r17
    9dba:	0f 91       	pop	r16
    9dbc:	ff 90       	pop	r15
    9dbe:	ef 90       	pop	r14
    9dc0:	08 95       	ret

00009dc2 <tds_associate(unsigned char)>:
_Z13tds_associateh():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:202
{
  return w_rom[id].tds_idx;
}

uint8_t tds_associate(uint8_t id)
{
    9dc2:	af 92       	push	r10
    9dc4:	bf 92       	push	r11
    9dc6:	cf 92       	push	r12
    9dc8:	df 92       	push	r13
    9dca:	ef 92       	push	r14
    9dcc:	ff 92       	push	r15
    9dce:	1f 93       	push	r17
    9dd0:	cf 93       	push	r28
    9dd2:	df 93       	push	r29
    9dd4:	cd b7       	in	r28, 0x3d	; 61
    9dd6:	de b7       	in	r29, 0x3e	; 62
    9dd8:	66 97       	sbiw	r28, 0x16	; 22
    9dda:	0f b6       	in	r0, 0x3f	; 63
    9ddc:	f8 94       	cli
    9dde:	de bf       	out	0x3e, r29	; 62
    9de0:	0f be       	out	0x3f, r0	; 63
    9de2:	cd bf       	out	0x3d, r28	; 61
tds_check_associate():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:179
/// funkce overeni associace
uint8_t tds_check_associate(uint8_t id)
{
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if ( id < Global_HWwirenum)
    9de4:	90 91 02 0a 	lds	r25, 0x0A02	; 0x800a02 <Global_HWwirenum>
    9de8:	89 17       	cp	r24, r25
    9dea:	a0 f0       	brcs	.+40     	; 0x9e14 <tds_associate(unsigned char)+0x52>
_Z13tds_associateh():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:203
  return w_rom[id].tds_idx;
}

uint8_t tds_associate(uint8_t id)
{
  uint8_t ret = 255;
    9dec:	1f ef       	ldi	r17, 0xFF	; 255
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:224
        ret = idx;
        break;
      }
    }
  }
  tds_update_associate();
    9dee:	0e 94 97 4e 	call	0x9d2e	; 0x9d2e <tds_update_associate()>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:226
  return ret;
}
    9df2:	81 2f       	mov	r24, r17
    9df4:	66 96       	adiw	r28, 0x16	; 22
    9df6:	0f b6       	in	r0, 0x3f	; 63
    9df8:	f8 94       	cli
    9dfa:	de bf       	out	0x3e, r29	; 62
    9dfc:	0f be       	out	0x3f, r0	; 63
    9dfe:	cd bf       	out	0x3d, r28	; 61
    9e00:	df 91       	pop	r29
    9e02:	cf 91       	pop	r28
    9e04:	1f 91       	pop	r17
    9e06:	ff 90       	pop	r15
    9e08:	ef 90       	pop	r14
    9e0a:	df 90       	pop	r13
    9e0c:	cf 90       	pop	r12
    9e0e:	bf 90       	pop	r11
    9e10:	af 90       	pop	r10
    9e12:	08 95       	ret
tds_check_associate():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:184
  if ( id < Global_HWwirenum)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    {
      get_tds18s20(idx, &tds);
      if (tds_compare_rom(tds.rom, w_rom[id].rom) == True)
    9e14:	a8 2e       	mov	r10, r24
    9e16:	b1 2c       	mov	r11, r1
    9e18:	2b e0       	ldi	r18, 0x0B	; 11
    9e1a:	82 9f       	mul	r24, r18
    9e1c:	c0 01       	movw	r24, r0
    9e1e:	11 24       	eor	r1, r1
    9e20:	fc 01       	movw	r30, r24
    9e22:	e0 54       	subi	r30, 0x40	; 64
    9e24:	f6 4f       	sbci	r31, 0xF6	; 246
    9e26:	7f 01       	movw	r14, r30
_Z13tds_associateh():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:181
{
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if ( id < Global_HWwirenum)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    9e28:	10 e0       	ldi	r17, 0x00	; 0
tds_check_associate():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:183
    {
      get_tds18s20(idx, &tds);
    9e2a:	be 01       	movw	r22, r28
    9e2c:	6f 5f       	subi	r22, 0xFF	; 255
    9e2e:	7f 4f       	sbci	r23, 0xFF	; 255
    9e30:	81 2f       	mov	r24, r17
    9e32:	0e 94 32 4e 	call	0x9c64	; 0x9c64 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:184
      if (tds_compare_rom(tds.rom, w_rom[id].rom) == True)
    9e36:	b7 01       	movw	r22, r14
    9e38:	ce 01       	movw	r24, r28
    9e3a:	02 96       	adiw	r24, 0x02	; 2
    9e3c:	0e 94 8e 20 	call	0x411c	; 0x411c <tds_compare_rom(unsigned char*, unsigned char*)>
    9e40:	81 11       	cpse	r24, r1
    9e42:	d4 cf       	rjmp	.-88     	; 0x9dec <tds_associate(unsigned char)+0x2a>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:181
{
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if ( id < Global_HWwirenum)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    9e44:	1f 5f       	subi	r17, 0xFF	; 255
    9e46:	16 30       	cpi	r17, 0x06	; 6
    9e48:	81 f7       	brne	.-32     	; 0x9e2a <tds_associate(unsigned char)+0x68>
    9e4a:	10 e0       	ldi	r17, 0x00	; 0
_Z13tds_associateh():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:210
  if (tds_check_associate(id) == 255)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    {
      get_tds18s20(idx, &tds);
      if (tds.used == 0 && w_rom[id].used == 1)
    9e4c:	2b e0       	ldi	r18, 0x0B	; 11
    9e4e:	2a 9d       	mul	r18, r10
    9e50:	c0 01       	movw	r24, r0
    9e52:	2b 9d       	mul	r18, r11
    9e54:	90 0d       	add	r25, r0
    9e56:	11 24       	eor	r1, r1
    9e58:	fc 01       	movw	r30, r24
    9e5a:	e7 53       	subi	r30, 0x37	; 55
    9e5c:	f6 4f       	sbci	r31, 0xF6	; 246
    9e5e:	6f 01       	movw	r12, r30
    9e60:	03 c0       	rjmp	.+6      	; 0x9e68 <tds_associate(unsigned char)+0xa6>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:207
{
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if (tds_check_associate(id) == 255)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    9e62:	1f 5f       	subi	r17, 0xFF	; 255
    9e64:	16 30       	cpi	r17, 0x06	; 6
    9e66:	11 f2       	breq	.-124    	; 0x9dec <tds_associate(unsigned char)+0x2a>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:209
    {
      get_tds18s20(idx, &tds);
    9e68:	be 01       	movw	r22, r28
    9e6a:	6f 5f       	subi	r22, 0xFF	; 255
    9e6c:	7f 4f       	sbci	r23, 0xFF	; 255
    9e6e:	81 2f       	mov	r24, r17
    9e70:	0e 94 32 4e 	call	0x9c64	; 0x9c64 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:210
      if (tds.used == 0 && w_rom[id].used == 1)
    9e74:	89 81       	ldd	r24, Y+1	; 0x01
    9e76:	81 11       	cpse	r24, r1
    9e78:	f4 cf       	rjmp	.-24     	; 0x9e62 <tds_associate(unsigned char)+0xa0>
    9e7a:	f6 01       	movw	r30, r12
    9e7c:	80 81       	ld	r24, Z
    9e7e:	81 30       	cpi	r24, 0x01	; 1
    9e80:	81 f7       	brne	.-32     	; 0x9e62 <tds_associate(unsigned char)+0xa0>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:212
      {
        tds.used = 1;
    9e82:	89 83       	std	Y+1, r24	; 0x01
    9e84:	fe 01       	movw	r30, r28
    9e86:	32 96       	adiw	r30, 0x02	; 2
    9e88:	90 e0       	ldi	r25, 0x00	; 0
    9e8a:	80 e0       	ldi	r24, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:214
        for (uint8_t i = 0; i < 8; i++)
          tds.rom[i] = w_rom[id].rom[i];
    9e8c:	d7 01       	movw	r26, r14
    9e8e:	a8 0f       	add	r26, r24
    9e90:	b9 1f       	adc	r27, r25
    9e92:	2c 91       	ld	r18, X
    9e94:	21 93       	st	Z+, r18
    9e96:	01 96       	adiw	r24, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:213
    {
      get_tds18s20(idx, &tds);
      if (tds.used == 0 && w_rom[id].used == 1)
      {
        tds.used = 1;
        for (uint8_t i = 0; i < 8; i++)
    9e98:	88 30       	cpi	r24, 0x08	; 8
    9e9a:	91 05       	cpc	r25, r1
    9e9c:	b9 f7       	brne	.-18     	; 0x9e8c <tds_associate(unsigned char)+0xca>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:215
          tds.rom[i] = w_rom[id].rom[i];
        tds.assigned_ds2482 = ds2482_address[w_rom[idx].assigned_ds2482].i2c_addr;
    9e9e:	2b e0       	ldi	r18, 0x0B	; 11
    9ea0:	12 9f       	mul	r17, r18
    9ea2:	f0 01       	movw	r30, r0
    9ea4:	11 24       	eor	r1, r1
    9ea6:	e0 54       	subi	r30, 0x40	; 64
    9ea8:	f6 4f       	sbci	r31, 0xF6	; 246
    9eaa:	e0 85       	ldd	r30, Z+8	; 0x08
    9eac:	f0 e0       	ldi	r31, 0x00	; 0
    9eae:	ee 0f       	add	r30, r30
    9eb0:	ff 1f       	adc	r31, r31
    9eb2:	ea 59       	subi	r30, 0x9A	; 154
    9eb4:	f6 4f       	sbci	r31, 0xF6	; 246
    9eb6:	80 81       	ld	r24, Z
    9eb8:	8a 87       	std	Y+10, r24	; 0x0a
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:216
        set_tds18s20(idx, &tds);
    9eba:	be 01       	movw	r22, r28
    9ebc:	6f 5f       	subi	r22, 0xFF	; 255
    9ebe:	7f 4f       	sbci	r23, 0xFF	; 255
    9ec0:	81 2f       	mov	r24, r17
    9ec2:	0e 94 8d 4c 	call	0x991a	; 0x991a <set_tds18s20(unsigned char, struct_DDS18s20*)>
    9ec6:	3e e1       	ldi	r19, 0x1E	; 30
    9ec8:	13 9f       	mul	r17, r19
    9eca:	a0 01       	movw	r20, r0
    9ecc:	11 24       	eor	r1, r1
    9ece:	90 e0       	ldi	r25, 0x00	; 0
    9ed0:	80 e0       	ldi	r24, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:218
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
          status_tds18s20[idx].average_temp[cnt] = 20000;
    9ed2:	20 e2       	ldi	r18, 0x20	; 32
    9ed4:	3e e4       	ldi	r19, 0x4E	; 78
    9ed6:	fc 01       	movw	r30, r24
    9ed8:	ee 0f       	add	r30, r30
    9eda:	ff 1f       	adc	r31, r31
    9edc:	e4 0f       	add	r30, r20
    9ede:	f5 1f       	adc	r31, r21
    9ee0:	e6 5e       	subi	r30, 0xE6	; 230
    9ee2:	f5 4f       	sbci	r31, 0xF5	; 245
    9ee4:	30 87       	std	Z+8, r19	; 0x08
    9ee6:	27 83       	std	Z+7, r18	; 0x07
    9ee8:	01 96       	adiw	r24, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:217
        tds.used = 1;
        for (uint8_t i = 0; i < 8; i++)
          tds.rom[i] = w_rom[id].rom[i];
        tds.assigned_ds2482 = ds2482_address[w_rom[idx].assigned_ds2482].i2c_addr;
        set_tds18s20(idx, &tds);
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
    9eea:	8a 30       	cpi	r24, 0x0A	; 10
    9eec:	91 05       	cpc	r25, r1
    9eee:	99 f7       	brne	.-26     	; 0x9ed6 <tds_associate(unsigned char)+0x114>
    9ef0:	7e cf       	rjmp	.-260    	; 0x9dee <tds_associate(unsigned char)+0x2c>

00009ef2 <tds_set_clear(unsigned char)>:
_Z13tds_set_clearh():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:120
  return tds.period;
}

//// funkce vymaze associovane 1wire -> tds
void tds_set_clear(uint8_t idx)
{
    9ef2:	1f 93       	push	r17
    9ef4:	cf 93       	push	r28
    9ef6:	df 93       	push	r29
    9ef8:	cd b7       	in	r28, 0x3d	; 61
    9efa:	de b7       	in	r29, 0x3e	; 62
    9efc:	66 97       	sbiw	r28, 0x16	; 22
    9efe:	0f b6       	in	r0, 0x3f	; 63
    9f00:	f8 94       	cli
    9f02:	de bf       	out	0x3e, r29	; 62
    9f04:	0f be       	out	0x3f, r0	; 63
    9f06:	cd bf       	out	0x3d, r28	; 61
    9f08:	18 2f       	mov	r17, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:122
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    9f0a:	be 01       	movw	r22, r28
    9f0c:	6f 5f       	subi	r22, 0xFF	; 255
    9f0e:	7f 4f       	sbci	r23, 0xFF	; 255
    9f10:	0e 94 32 4e 	call	0x9c64	; 0x9c64 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:123
  tds.used = 0;
    9f14:	19 82       	std	Y+1, r1	; 0x01
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:124
  strcpy(tds.name, "FREE");
    9f16:	6f e5       	ldi	r22, 0x5F	; 95
    9f18:	73 e0       	ldi	r23, 0x03	; 3
    9f1a:	ce 01       	movw	r24, r28
    9f1c:	0d 96       	adiw	r24, 0x0d	; 13
    9f1e:	0e 94 70 af 	call	0x15ee0	; 0x15ee0 <strcpy>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:125
  tds.offset = 0;
    9f22:	1c 86       	std	Y+12, r1	; 0x0c
    9f24:	1b 86       	std	Y+11, r1	; 0x0b
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:126
  tds.period = 10;
    9f26:	8a e0       	ldi	r24, 0x0A	; 10
    9f28:	8d 8b       	std	Y+21, r24	; 0x15
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:128
  for (uint8_t i = 0; i < 8; i++)
    tds.rom[i] = 0;
    9f2a:	1a 82       	std	Y+2, r1	; 0x02
    9f2c:	1b 82       	std	Y+3, r1	; 0x03
    9f2e:	1c 82       	std	Y+4, r1	; 0x04
    9f30:	1d 82       	std	Y+5, r1	; 0x05
    9f32:	1e 82       	std	Y+6, r1	; 0x06
    9f34:	1f 82       	std	Y+7, r1	; 0x07
    9f36:	18 86       	std	Y+8, r1	; 0x08
    9f38:	19 86       	std	Y+9, r1	; 0x09
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:129
  tds.assigned_ds2482 = 0;
    9f3a:	1a 86       	std	Y+10, r1	; 0x0a
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:130
  set_tds18s20(idx, &tds);
    9f3c:	be 01       	movw	r22, r28
    9f3e:	6f 5f       	subi	r22, 0xFF	; 255
    9f40:	7f 4f       	sbci	r23, 0xFF	; 255
    9f42:	81 2f       	mov	r24, r17
    9f44:	0e 94 8d 4c 	call	0x991a	; 0x991a <set_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:131
  tds_update_associate();
    9f48:	0e 94 97 4e 	call	0x9d2e	; 0x9d2e <tds_update_associate()>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:132
}
    9f4c:	66 96       	adiw	r28, 0x16	; 22
    9f4e:	0f b6       	in	r0, 0x3f	; 63
    9f50:	f8 94       	cli
    9f52:	de bf       	out	0x3e, r29	; 62
    9f54:	0f be       	out	0x3f, r0	; 63
    9f56:	cd bf       	out	0x3d, r28	; 61
    9f58:	df 91       	pop	r29
    9f5a:	cf 91       	pop	r28
    9f5c:	1f 91       	pop	r17
    9f5e:	08 95       	ret

00009f60 <click_tds_deassociate_onewire(unsigned char, unsigned char)>:
_Z29click_tds_deassociate_onewirehh():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:136

void tds_set_clear_wrom_id(uint8_t idx)
{
  tds_set_clear(w_rom[idx].tds_idx);
    9f60:	8b e0       	ldi	r24, 0x0B	; 11
    9f62:	68 9f       	mul	r22, r24
    9f64:	f0 01       	movw	r30, r0
    9f66:	11 24       	eor	r1, r1
    9f68:	e0 54       	subi	r30, 0x40	; 64
    9f6a:	f6 4f       	sbci	r31, 0xF6	; 246
    9f6c:	82 85       	ldd	r24, Z+10	; 0x0a
    9f6e:	0e 94 79 4f 	call	0x9ef2	; 0x9ef2 <tds_set_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4602
/// zruseni associace
void click_tds_deassociate_onewire(uint8_t args1, uint8_t idx)
{

  tds_set_clear_wrom_id(idx);
  MenuHistoryPrevMenu();
    9f72:	0c 94 55 2e 	jmp	0x5caa	; 0x5caa <MenuHistoryPrevMenu()>

00009f76 <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, char*, char*)>:
_Z54get_function_one_wire_associate_or_setting_text_buttonhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4552
   args2 parametr ... definece z globalniho nastaveni menu, zde v nasem pripade je to index 1w cidla na sbernici
 * *line1 - vraci ROM adresu
 * *line2 - vraci akci associovat/nastavit
*/
void get_function_one_wire_associate_or_setting_text_button(uint8_t args1, uint8_t args2 , char *line1, char *line2)
{
    9f76:	8f 92       	push	r8
    9f78:	9f 92       	push	r9
    9f7a:	af 92       	push	r10
    9f7c:	bf 92       	push	r11
    9f7e:	cf 92       	push	r12
    9f80:	df 92       	push	r13
    9f82:	ef 92       	push	r14
    9f84:	ff 92       	push	r15
    9f86:	0f 93       	push	r16
    9f88:	1f 93       	push	r17
    9f8a:	cf 93       	push	r28
    9f8c:	df 93       	push	r29
    9f8e:	cd b7       	in	r28, 0x3d	; 61
    9f90:	de b7       	in	r29, 0x3e	; 62
    9f92:	e0 97       	sbiw	r28, 0x30	; 48
    9f94:	0f b6       	in	r0, 0x3f	; 63
    9f96:	f8 94       	cli
    9f98:	de bf       	out	0x3e, r29	; 62
    9f9a:	0f be       	out	0x3f, r0	; 63
    9f9c:	cd bf       	out	0x3d, r28	; 61
    9f9e:	18 2f       	mov	r17, r24
    9fa0:	94 2e       	mov	r9, r20
    9fa2:	85 2e       	mov	r8, r21
    9fa4:	79 01       	movw	r14, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4554
  char str2[26];
  strcpy_P(line1, text_not_used);
    9fa6:	6c ee       	ldi	r22, 0xEC	; 236
    9fa8:	7e e2       	ldi	r23, 0x2E	; 46
    9faa:	84 2f       	mov	r24, r20
    9fac:	95 2f       	mov	r25, r21
    9fae:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4555
  strcpy(line2, "-");
    9fb2:	60 e5       	ldi	r22, 0x50	; 80
    9fb4:	73 e0       	ldi	r23, 0x03	; 3
    9fb6:	c7 01       	movw	r24, r14
    9fb8:	0e 94 70 af 	call	0x15ee0	; 0x15ee0 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4556
  if (w_rom[args1].used == 1)
    9fbc:	4b e0       	ldi	r20, 0x0B	; 11
    9fbe:	41 9f       	mul	r20, r17
    9fc0:	c0 01       	movw	r24, r0
    9fc2:	11 24       	eor	r1, r1
    9fc4:	9c 01       	movw	r18, r24
    9fc6:	20 54       	subi	r18, 0x40	; 64
    9fc8:	36 4f       	sbci	r19, 0xF6	; 246
    9fca:	69 01       	movw	r12, r18
    9fcc:	f9 01       	movw	r30, r18
    9fce:	81 85       	ldd	r24, Z+9	; 0x09
    9fd0:	81 30       	cpi	r24, 0x01	; 1
    9fd2:	c9 f5       	brne	.+114    	; 0xa046 <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, char*, char*)+0xd0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4558
  {
    createString(str2, ':', w_rom[args1].rom, 8, 16);
    9fd4:	a9 01       	movw	r20, r18
    9fd6:	00 e1       	ldi	r16, 0x10	; 16
    9fd8:	28 e0       	ldi	r18, 0x08	; 8
    9fda:	6a e3       	ldi	r22, 0x3A	; 58
    9fdc:	ce 01       	movw	r24, r28
    9fde:	01 96       	adiw	r24, 0x01	; 1
    9fe0:	5c 01       	movw	r10, r24
    9fe2:	0e 94 4b 8f 	call	0x11e96	; 0x11e96 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4559
    sprintf(line1, "%d: %s", args1, str2);
    9fe6:	bf 92       	push	r11
    9fe8:	af 92       	push	r10
    9fea:	1f 92       	push	r1
    9fec:	1f 93       	push	r17
    9fee:	82 e7       	ldi	r24, 0x72	; 114
    9ff0:	93 e0       	ldi	r25, 0x03	; 3
    9ff2:	9f 93       	push	r25
    9ff4:	8f 93       	push	r24
    9ff6:	8f 92       	push	r8
    9ff8:	9f 92       	push	r9
    9ffa:	0e 94 d3 af 	call	0x15fa6	; 0x15fa6 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4561

    if (w_rom[args1].tds_idx != 255)
    9ffe:	0f b6       	in	r0, 0x3f	; 63
    a000:	f8 94       	cli
    a002:	de bf       	out	0x3e, r29	; 62
    a004:	0f be       	out	0x3f, r0	; 63
    a006:	cd bf       	out	0x3d, r28	; 61
    a008:	f6 01       	movw	r30, r12
    a00a:	82 85       	ldd	r24, Z+10	; 0x0a
    a00c:	8f 3f       	cpi	r24, 0xFF	; 255
    a00e:	71 f1       	breq	.+92     	; 0xa06c <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, char*, char*)+0xf6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4563
    {
      strcpy_P(line2, text_nastavit_tds);
    a010:	69 ed       	ldi	r22, 0xD9	; 217
    a012:	7e e2       	ldi	r23, 0x2E	; 46
    a014:	c7 01       	movw	r24, r14
    a016:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
tds_get_name():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:75

//// ziska nazev tds cidla
void tds_get_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    a01a:	be 01       	movw	r22, r28
    a01c:	65 5e       	subi	r22, 0xE5	; 229
    a01e:	7f 4f       	sbci	r23, 0xFF	; 255
    a020:	f6 01       	movw	r30, r12
    a022:	82 85       	ldd	r24, Z+10	; 0x0a
    a024:	0e 94 32 4e 	call	0x9c64	; 0x9c64 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:76
  strcpy(name, tds.name);
    a028:	be 01       	movw	r22, r28
    a02a:	69 5d       	subi	r22, 0xD9	; 217
    a02c:	7f 4f       	sbci	r23, 0xFF	; 255
    a02e:	c5 01       	movw	r24, r10
    a030:	0e 94 70 af 	call	0x15ee0	; 0x15ee0 <strcpy>
_Z54get_function_one_wire_associate_or_setting_text_buttonhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4565
      tds_get_name(w_rom[args1].tds_idx, str2);
      strcat(line2, " ");
    a034:	6a e1       	ldi	r22, 0x1A	; 26
    a036:	76 e0       	ldi	r23, 0x06	; 6
    a038:	c7 01       	movw	r24, r14
    a03a:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4566
      strcat(line2, str2);
    a03e:	b5 01       	movw	r22, r10
    a040:	c7 01       	movw	r24, r14
    a042:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4571
    }
    else
      strcpy_P(line2, text_associovat_tds);
  }
}
    a046:	e0 96       	adiw	r28, 0x30	; 48
    a048:	0f b6       	in	r0, 0x3f	; 63
    a04a:	f8 94       	cli
    a04c:	de bf       	out	0x3e, r29	; 62
    a04e:	0f be       	out	0x3f, r0	; 63
    a050:	cd bf       	out	0x3d, r28	; 61
    a052:	df 91       	pop	r29
    a054:	cf 91       	pop	r28
    a056:	1f 91       	pop	r17
    a058:	0f 91       	pop	r16
    a05a:	ff 90       	pop	r15
    a05c:	ef 90       	pop	r14
    a05e:	df 90       	pop	r13
    a060:	cf 90       	pop	r12
    a062:	bf 90       	pop	r11
    a064:	af 90       	pop	r10
    a066:	9f 90       	pop	r9
    a068:	8f 90       	pop	r8
    a06a:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4569
      tds_get_name(w_rom[args1].tds_idx, str2);
      strcat(line2, " ");
      strcat(line2, str2);
    }
    else
      strcpy_P(line2, text_associovat_tds);
    a06c:	69 ef       	ldi	r22, 0xF9	; 249
    a06e:	7e e2       	ldi	r23, 0x2E	; 46
    a070:	c7 01       	movw	r24, r14
    a072:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
    a076:	e7 cf       	rjmp	.-50     	; 0xa046 <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, char*, char*)+0xd0>

0000a078 <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z36display_element_show_tds_info_staticjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4187
    show_string(str2, x + 10, y + 140 , 2, BLACK, WHITE, 0);
  }
}
////
void display_element_show_tds_info_static(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    a078:	3f 92       	push	r3
    a07a:	4f 92       	push	r4
    a07c:	5f 92       	push	r5
    a07e:	6f 92       	push	r6
    a080:	7f 92       	push	r7
    a082:	8f 92       	push	r8
    a084:	9f 92       	push	r9
    a086:	af 92       	push	r10
    a088:	bf 92       	push	r11
    a08a:	cf 92       	push	r12
    a08c:	df 92       	push	r13
    a08e:	ef 92       	push	r14
    a090:	ff 92       	push	r15
    a092:	0f 93       	push	r16
    a094:	1f 93       	push	r17
    a096:	cf 93       	push	r28
    a098:	df 93       	push	r29
    a09a:	cd b7       	in	r28, 0x3d	; 61
    a09c:	de b7       	in	r29, 0x3e	; 62
    a09e:	ca 54       	subi	r28, 0x4A	; 74
    a0a0:	d1 09       	sbc	r29, r1
    a0a2:	0f b6       	in	r0, 0x3f	; 63
    a0a4:	f8 94       	cli
    a0a6:	de bf       	out	0x3e, r29	; 62
    a0a8:	0f be       	out	0x3f, r0	; 63
    a0aa:	cd bf       	out	0x3d, r28	; 61
    a0ac:	4c 01       	movw	r8, r24
    a0ae:	3b 01       	movw	r6, r22
    a0b0:	3e 2c       	mov	r3, r14
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    a0b2:	10 92 c5 0d 	sts	0x0DC5, r1	; 0x800dc5 <my_lcd+0xb>
    a0b6:	10 92 c4 0d 	sts	0x0DC4, r1	; 0x800dc4 <my_lcd+0xa>
_Z36display_element_show_tds_info_staticjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4193
  struct_DDS18s20 tds;
  char str1[26];
  char str2[26];
  float te;
  my_lcd.Set_Draw_color(BLACK);
  my_lcd.Draw_Rectangle(x, y, x + size_x , y + size_y);
    a0ba:	26 0f       	add	r18, r22
    a0bc:	37 1f       	adc	r19, r23
    a0be:	48 0f       	add	r20, r24
    a0c0:	59 1f       	adc	r21, r25
    a0c2:	0e 94 5d 7c 	call	0xf8ba	; 0xf8ba <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.188]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4194
  if (get_tds18s20(args2, &tds) == 1)
    a0c6:	be 01       	movw	r22, r28
    a0c8:	6b 5c       	subi	r22, 0xCB	; 203
    a0ca:	7f 4f       	sbci	r23, 0xFF	; 255
    a0cc:	8e 2d       	mov	r24, r14
    a0ce:	0e 94 32 4e 	call	0x9c64	; 0x9c64 <get_tds18s20(unsigned char, struct_DDS18s20*)>
    a0d2:	23 01       	movw	r4, r6
    a0d4:	28 e2       	ldi	r18, 0x28	; 40
    a0d6:	42 0e       	add	r4, r18
    a0d8:	51 1c       	adc	r5, r1
    a0da:	9e 01       	movw	r18, r28
    a0dc:	2f 5f       	subi	r18, 0xFF	; 255
    a0de:	3f 4f       	sbci	r19, 0xFF	; 255
    a0e0:	59 01       	movw	r10, r18
    a0e2:	81 30       	cpi	r24, 0x01	; 1
    a0e4:	09 f0       	breq	.+2      	; 0xa0e8 <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x70>
    a0e6:	ca c0       	rjmp	.+404    	; 0xa27c <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x204>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4196
  {
    createString(str2, ':', tds.rom, 8, 16);
    a0e8:	6e 01       	movw	r12, r28
    a0ea:	3b e1       	ldi	r19, 0x1B	; 27
    a0ec:	c3 0e       	add	r12, r19
    a0ee:	d1 1c       	adc	r13, r1
    a0f0:	00 e1       	ldi	r16, 0x10	; 16
    a0f2:	28 e0       	ldi	r18, 0x08	; 8
    a0f4:	ae 01       	movw	r20, r28
    a0f6:	4a 5c       	subi	r20, 0xCA	; 202
    a0f8:	5f 4f       	sbci	r21, 0xFF	; 255
    a0fa:	6a e3       	ldi	r22, 0x3A	; 58
    a0fc:	c6 01       	movw	r24, r12
    a0fe:	0e 94 4b 8f 	call	0x11e96	; 0x11e96 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4197
    sprintf(str1, "rom: %s", str2);
    a102:	df 92       	push	r13
    a104:	cf 92       	push	r12
    a106:	89 e7       	ldi	r24, 0x79	; 121
    a108:	93 e0       	ldi	r25, 0x03	; 3
    a10a:	9f 93       	push	r25
    a10c:	8f 93       	push	r24
    a10e:	bf 92       	push	r11
    a110:	af 92       	push	r10
    a112:	0e 94 d3 af 	call	0x15fa6	; 0x15fa6 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4198
    show_string(str1, x + 10, y + 85, 1, BLACK, WHITE, 0);
    a116:	8a e0       	ldi	r24, 0x0A	; 10
    a118:	88 0e       	add	r8, r24
    a11a:	91 1c       	adc	r9, r1
    a11c:	a3 01       	movw	r20, r6
    a11e:	4b 5a       	subi	r20, 0xAB	; 171
    a120:	5f 4f       	sbci	r21, 0xFF	; 255
    a122:	ee 24       	eor	r14, r14
    a124:	ea 94       	dec	r14
    a126:	fe 2c       	mov	r15, r14
    a128:	10 e0       	ldi	r17, 0x00	; 0
    a12a:	00 e0       	ldi	r16, 0x00	; 0
    a12c:	21 e0       	ldi	r18, 0x01	; 1
    a12e:	b4 01       	movw	r22, r8
    a130:	c5 01       	movw	r24, r10
    a132:	0e 94 37 7d 	call	0xfa6e	; 0xfa6e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4200
    ///
    strcpy_P(str2, text_nazev);
    a136:	62 ed       	ldi	r22, 0xD2	; 210
    a138:	7e e2       	ldi	r23, 0x2E	; 46
    a13a:	c6 01       	movw	r24, r12
    a13c:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4201
    sprintf(str1, "%s: %s", str2, tds.name);
    a140:	85 e3       	ldi	r24, 0x35	; 53
    a142:	90 e0       	ldi	r25, 0x00	; 0
    a144:	8c 0f       	add	r24, r28
    a146:	9d 1f       	adc	r25, r29
    a148:	0c 96       	adiw	r24, 0x0c	; 12
    a14a:	9f 93       	push	r25
    a14c:	8f 93       	push	r24
    a14e:	df 92       	push	r13
    a150:	cf 92       	push	r12
    a152:	81 e8       	ldi	r24, 0x81	; 129
    a154:	93 e0       	ldi	r25, 0x03	; 3
    a156:	9f 93       	push	r25
    a158:	8f 93       	push	r24
    a15a:	bf 92       	push	r11
    a15c:	af 92       	push	r10
    a15e:	0e 94 d3 af 	call	0x15fa6	; 0x15fa6 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4202
    show_string(str1, x + 10, y + 40, 2, BLACK, WHITE, 0);
    a162:	22 e0       	ldi	r18, 0x02	; 2
    a164:	a2 01       	movw	r20, r4
    a166:	b4 01       	movw	r22, r8
    a168:	c5 01       	movw	r24, r10
    a16a:	0e 94 37 7d 	call	0xfa6e	; 0xfa6e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4204
    /// zobrazeni offsetu
    te = tds.offset / 1000.0;
    a16e:	21 96       	adiw	r28, 0x01	; 1
    a170:	6e ad       	ldd	r22, Y+62	; 0x3e
    a172:	7f ad       	ldd	r23, Y+63	; 0x3f
    a174:	21 97       	sbiw	r28, 0x01	; 1
    a176:	07 2e       	mov	r0, r23
    a178:	00 0c       	add	r0, r0
    a17a:	88 0b       	sbc	r24, r24
    a17c:	99 0b       	sbc	r25, r25
    a17e:	0e 94 6e ab 	call	0x156dc	; 0x156dc <__floatsisf>
    a182:	20 e0       	ldi	r18, 0x00	; 0
    a184:	30 e0       	ldi	r19, 0x00	; 0
    a186:	4a e7       	ldi	r20, 0x7A	; 122
    a188:	54 e4       	ldi	r21, 0x44	; 68
    a18a:	0e 94 a1 ad 	call	0x15b42	; 0x15b42 <__divsf3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4205
    dtostrf(te, 4, 2, str1);
    a18e:	85 01       	movw	r16, r10
    a190:	22 e0       	ldi	r18, 0x02	; 2
    a192:	44 e0       	ldi	r20, 0x04	; 4
    a194:	0e 94 93 a1 	call	0x14326	; 0x14326 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4206
    strcat(str1, "C");
    a198:	62 ec       	ldi	r22, 0xC2	; 194
    a19a:	76 e0       	ldi	r23, 0x06	; 6
    a19c:	c5 01       	movw	r24, r10
    a19e:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4207
    strcpy_P(str2, temp_offset_short);
    a1a2:	64 ea       	ldi	r22, 0xA4	; 164
    a1a4:	7e e2       	ldi	r23, 0x2E	; 46
    a1a6:	c6 01       	movw	r24, r12
    a1a8:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4208
    strcat(str2, str1);
    a1ac:	b5 01       	movw	r22, r10
    a1ae:	c6 01       	movw	r24, r12
    a1b0:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4209
    show_string(str2, x + 10, y + 60 , 2, BLACK, WHITE, 0);
    a1b4:	a3 01       	movw	r20, r6
    a1b6:	44 5c       	subi	r20, 0xC4	; 196
    a1b8:	5f 4f       	sbci	r21, 0xFF	; 255
    a1ba:	10 e0       	ldi	r17, 0x00	; 0
    a1bc:	00 e0       	ldi	r16, 0x00	; 0
    a1be:	22 e0       	ldi	r18, 0x02	; 2
    a1c0:	b4 01       	movw	r22, r8
    a1c2:	c6 01       	movw	r24, r12
    a1c4:	0e 94 37 7d 	call	0xfa6e	; 0xfa6e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4211
    ///
    strcpy_P(str2, nastaveni_tds_period);
    a1c8:	65 e9       	ldi	r22, 0x95	; 149
    a1ca:	7e e2       	ldi	r23, 0x2E	; 46
    a1cc:	c6 01       	movw	r24, r12
    a1ce:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4212
    sprintf(str1, "%s: %ds", str2, tds.period);
    a1d2:	2a 96       	adiw	r28, 0x0a	; 10
    a1d4:	8f ad       	ldd	r24, Y+63	; 0x3f
    a1d6:	2a 97       	sbiw	r28, 0x0a	; 10
    a1d8:	1f 92       	push	r1
    a1da:	8f 93       	push	r24
    a1dc:	df 92       	push	r13
    a1de:	cf 92       	push	r12
    a1e0:	88 e8       	ldi	r24, 0x88	; 136
    a1e2:	93 e0       	ldi	r25, 0x03	; 3
    a1e4:	9f 93       	push	r25
    a1e6:	8f 93       	push	r24
    a1e8:	bf 92       	push	r11
    a1ea:	af 92       	push	r10
    a1ec:	0e 94 d3 af 	call	0x15fa6	; 0x15fa6 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4213
    show_string(str1, x + 10, y + 100 , 2, BLACK, WHITE, 0);
    a1f0:	a3 01       	movw	r20, r6
    a1f2:	4c 59       	subi	r20, 0x9C	; 156
    a1f4:	5f 4f       	sbci	r21, 0xFF	; 255
    a1f6:	22 e0       	ldi	r18, 0x02	; 2
    a1f8:	b4 01       	movw	r22, r8
    a1fa:	c5 01       	movw	r24, r10
    a1fc:	0e 94 37 7d 	call	0xfa6e	; 0xfa6e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4216

    ///
    strcpy_P(str2, text_online);
    a200:	6c ea       	ldi	r22, 0xAC	; 172
    a202:	7e e2       	ldi	r23, 0x2E	; 46
    a204:	c6 01       	movw	r24, r12
    a206:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4217
    sprintf(str1, "%s: %d", str2, status_tds18s20[args2].online);
    a20a:	9e e1       	ldi	r25, 0x1E	; 30
    a20c:	39 9e       	mul	r3, r25
    a20e:	f0 01       	movw	r30, r0
    a210:	11 24       	eor	r1, r1
    a212:	e6 5e       	subi	r30, 0xE6	; 230
    a214:	f5 4f       	sbci	r31, 0xF5	; 245
    a216:	83 8d       	ldd	r24, Z+27	; 0x1b
    a218:	1f 92       	push	r1
    a21a:	8f 93       	push	r24
    a21c:	df 92       	push	r13
    a21e:	cf 92       	push	r12
    a220:	80 e9       	ldi	r24, 0x90	; 144
    a222:	93 e0       	ldi	r25, 0x03	; 3
    a224:	9f 93       	push	r25
    a226:	8f 93       	push	r24
    a228:	bf 92       	push	r11
    a22a:	af 92       	push	r10
    a22c:	0e 94 d3 af 	call	0x15fa6	; 0x15fa6 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4218
    show_string(str1, x + 10, y + 120 , 2, BLACK, WHITE, 0);
    a230:	a3 01       	movw	r20, r6
    a232:	48 58       	subi	r20, 0x88	; 136
    a234:	5f 4f       	sbci	r21, 0xFF	; 255
    a236:	22 e0       	ldi	r18, 0x02	; 2
    a238:	b4 01       	movw	r22, r8
    a23a:	c5 01       	movw	r24, r10
    a23c:	0e 94 37 7d 	call	0xfa6e	; 0xfa6e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]>
    a240:	0f b6       	in	r0, 0x3f	; 63
    a242:	f8 94       	cli
    a244:	de bf       	out	0x3e, r29	; 62
    a246:	0f be       	out	0x3f, r0	; 63
    a248:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4225
  else
  {
    strcpy_P(str1, text_err);
    show_string(str1, x + 25, y + 40, 4, RED, WHITE, 0);
  }
}
    a24a:	c6 5b       	subi	r28, 0xB6	; 182
    a24c:	df 4f       	sbci	r29, 0xFF	; 255
    a24e:	0f b6       	in	r0, 0x3f	; 63
    a250:	f8 94       	cli
    a252:	de bf       	out	0x3e, r29	; 62
    a254:	0f be       	out	0x3f, r0	; 63
    a256:	cd bf       	out	0x3d, r28	; 61
    a258:	df 91       	pop	r29
    a25a:	cf 91       	pop	r28
    a25c:	1f 91       	pop	r17
    a25e:	0f 91       	pop	r16
    a260:	ff 90       	pop	r15
    a262:	ef 90       	pop	r14
    a264:	df 90       	pop	r13
    a266:	cf 90       	pop	r12
    a268:	bf 90       	pop	r11
    a26a:	af 90       	pop	r10
    a26c:	9f 90       	pop	r9
    a26e:	8f 90       	pop	r8
    a270:	7f 90       	pop	r7
    a272:	6f 90       	pop	r6
    a274:	5f 90       	pop	r5
    a276:	4f 90       	pop	r4
    a278:	3f 90       	pop	r3
    a27a:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4222
    sprintf(str1, "%s: %d", str2, status_tds18s20[args2].online);
    show_string(str1, x + 10, y + 120 , 2, BLACK, WHITE, 0);
  }
  else
  {
    strcpy_P(str1, text_err);
    a27c:	6f e8       	ldi	r22, 0x8F	; 143
    a27e:	7e e2       	ldi	r23, 0x2E	; 46
    a280:	c9 01       	movw	r24, r18
    a282:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4223
    show_string(str1, x + 25, y + 40, 4, RED, WHITE, 0);
    a286:	b4 01       	movw	r22, r8
    a288:	67 5e       	subi	r22, 0xE7	; 231
    a28a:	7f 4f       	sbci	r23, 0xFF	; 255
    a28c:	ee 24       	eor	r14, r14
    a28e:	ea 94       	dec	r14
    a290:	fe 2c       	mov	r15, r14
    a292:	00 e0       	ldi	r16, 0x00	; 0
    a294:	18 ef       	ldi	r17, 0xF8	; 248
    a296:	24 e0       	ldi	r18, 0x04	; 4
    a298:	a2 01       	movw	r20, r4
    a29a:	c5 01       	movw	r24, r10
    a29c:	0e 94 37 7d 	call	0xfa6e	; 0xfa6e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]>
    a2a0:	d4 cf       	rjmp	.-88     	; 0xa24a <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x1d2>

0000a2a2 <display_element_show_tds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z38display_element_show_tds_info_dynamicsjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4169
{
  show_string(dialog_text, x, y, 2, BLACK, WHITE, 0);
}
//////////////////////////////////////////////
void display_element_show_tds_info_dynamics(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    a2a2:	af 92       	push	r10
    a2a4:	bf 92       	push	r11
    a2a6:	cf 92       	push	r12
    a2a8:	df 92       	push	r13
    a2aa:	ef 92       	push	r14
    a2ac:	ff 92       	push	r15
    a2ae:	0f 93       	push	r16
    a2b0:	1f 93       	push	r17
    a2b2:	cf 93       	push	r28
    a2b4:	df 93       	push	r29
    a2b6:	cd b7       	in	r28, 0x3d	; 61
    a2b8:	de b7       	in	r29, 0x3e	; 62
    a2ba:	ca 54       	subi	r28, 0x4A	; 74
    a2bc:	d1 09       	sbc	r29, r1
    a2be:	0f b6       	in	r0, 0x3f	; 63
    a2c0:	f8 94       	cli
    a2c2:	de bf       	out	0x3e, r29	; 62
    a2c4:	0f be       	out	0x3f, r0	; 63
    a2c6:	cd bf       	out	0x3d, r28	; 61
    a2c8:	6c 01       	movw	r12, r24
    a2ca:	5b 01       	movw	r10, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4174
  struct_DDS18s20 tds;
  char str1[26];
  char str2[26];
  float te;
  if (get_tds18s20(args2, &tds) == 1)
    a2cc:	be 01       	movw	r22, r28
    a2ce:	6b 5c       	subi	r22, 0xCB	; 203
    a2d0:	7f 4f       	sbci	r23, 0xFF	; 255
    a2d2:	8e 2d       	mov	r24, r14
    a2d4:	0e 94 32 4e 	call	0x9c64	; 0x9c64 <get_tds18s20(unsigned char, struct_DDS18s20*)>
    a2d8:	81 30       	cpi	r24, 0x01	; 1
    a2da:	d9 f5       	brne	.+118    	; 0xa352 <display_element_show_tds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xb0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4177
  {
    /// zobrazeni teploty
    te = status_tds18s20[args2].temp / 1000.0;
    a2dc:	8e e1       	ldi	r24, 0x1E	; 30
    a2de:	e8 9e       	mul	r14, r24
    a2e0:	f0 01       	movw	r30, r0
    a2e2:	11 24       	eor	r1, r1
    a2e4:	e6 5e       	subi	r30, 0xE6	; 230
    a2e6:	f5 4f       	sbci	r31, 0xF5	; 245
    a2e8:	65 81       	ldd	r22, Z+5	; 0x05
    a2ea:	76 81       	ldd	r23, Z+6	; 0x06
    a2ec:	07 2e       	mov	r0, r23
    a2ee:	00 0c       	add	r0, r0
    a2f0:	88 0b       	sbc	r24, r24
    a2f2:	99 0b       	sbc	r25, r25
    a2f4:	0e 94 6e ab 	call	0x156dc	; 0x156dc <__floatsisf>
    a2f8:	20 e0       	ldi	r18, 0x00	; 0
    a2fa:	30 e0       	ldi	r19, 0x00	; 0
    a2fc:	4a e7       	ldi	r20, 0x7A	; 122
    a2fe:	54 e4       	ldi	r21, 0x44	; 68
    a300:	0e 94 a1 ad 	call	0x15b42	; 0x15b42 <__divsf3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4178
    dtostrf(te, 4, 2, str1);
    a304:	8e 01       	movw	r16, r28
    a306:	05 5e       	subi	r16, 0xE5	; 229
    a308:	1f 4f       	sbci	r17, 0xFF	; 255
    a30a:	22 e0       	ldi	r18, 0x02	; 2
    a30c:	44 e0       	ldi	r20, 0x04	; 4
    a30e:	0e 94 93 a1 	call	0x14326	; 0x14326 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4179
    strcat(str1, "C");
    a312:	62 ec       	ldi	r22, 0xC2	; 194
    a314:	76 e0       	ldi	r23, 0x06	; 6
    a316:	c8 01       	movw	r24, r16
    a318:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4180
    strcpy_P(str2, current_temp_short);
    a31c:	69 ec       	ldi	r22, 0xC9	; 201
    a31e:	7e e2       	ldi	r23, 0x2E	; 46
    a320:	ce 01       	movw	r24, r28
    a322:	01 96       	adiw	r24, 0x01	; 1
    a324:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4181
    strcat(str2, str1);
    a328:	b8 01       	movw	r22, r16
    a32a:	ce 01       	movw	r24, r28
    a32c:	01 96       	adiw	r24, 0x01	; 1
    a32e:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4182
    show_string(str2, x + 10, y + 140 , 2, BLACK, WHITE, 0);
    a332:	a5 01       	movw	r20, r10
    a334:	44 57       	subi	r20, 0x74	; 116
    a336:	5f 4f       	sbci	r21, 0xFF	; 255
    a338:	b6 01       	movw	r22, r12
    a33a:	66 5f       	subi	r22, 0xF6	; 246
    a33c:	7f 4f       	sbci	r23, 0xFF	; 255
    a33e:	ee 24       	eor	r14, r14
    a340:	ea 94       	dec	r14
    a342:	fe 2c       	mov	r15, r14
    a344:	10 e0       	ldi	r17, 0x00	; 0
    a346:	00 e0       	ldi	r16, 0x00	; 0
    a348:	22 e0       	ldi	r18, 0x02	; 2
    a34a:	ce 01       	movw	r24, r28
    a34c:	01 96       	adiw	r24, 0x01	; 1
    a34e:	0e 94 37 7d 	call	0xfa6e	; 0xfa6e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4184
  }
}
    a352:	c6 5b       	subi	r28, 0xB6	; 182
    a354:	df 4f       	sbci	r29, 0xFF	; 255
    a356:	0f b6       	in	r0, 0x3f	; 63
    a358:	f8 94       	cli
    a35a:	de bf       	out	0x3e, r29	; 62
    a35c:	0f be       	out	0x3f, r0	; 63
    a35e:	cd bf       	out	0x3d, r28	; 61
    a360:	df 91       	pop	r29
    a362:	cf 91       	pop	r28
    a364:	1f 91       	pop	r17
    a366:	0f 91       	pop	r16
    a368:	ff 90       	pop	r15
    a36a:	ef 90       	pop	r14
    a36c:	df 90       	pop	r13
    a36e:	cf 90       	pop	r12
    a370:	bf 90       	pop	r11
    a372:	af 90       	pop	r10
    a374:	08 95       	ret

0000a376 <display_menu_tds_set_name(unsigned char, unsigned char)>:
_Z25display_menu_tds_set_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1684
  dialog_save_variable_function = &menu_tds_save_period;
}

/// funkce pro nastaveni nazvu cidla
void display_menu_tds_set_name(uint8_t args1, uint8_t args2)
{
    a376:	1f 93       	push	r17
    a378:	cf 93       	push	r28
    a37a:	df 93       	push	r29
    a37c:	cd b7       	in	r28, 0x3d	; 61
    a37e:	de b7       	in	r29, 0x3e	; 62
    a380:	a0 97       	sbiw	r28, 0x20	; 32
    a382:	0f b6       	in	r0, 0x3f	; 63
    a384:	f8 94       	cli
    a386:	de bf       	out	0x3e, r29	; 62
    a388:	0f be       	out	0x3f, r0	; 63
    a38a:	cd bf       	out	0x3d, r28	; 61
    a38c:	16 2f       	mov	r17, r22
tds_get_name():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:75

//// ziska nazev tds cidla
void tds_get_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    a38e:	be 01       	movw	r22, r28
    a390:	6f 5f       	subi	r22, 0xFF	; 255
    a392:	7f 4f       	sbci	r23, 0xFF	; 255
    a394:	81 2f       	mov	r24, r17
    a396:	0e 94 32 4e 	call	0x9c64	; 0x9c64 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:76
  strcpy(name, tds.name);
    a39a:	be 01       	movw	r22, r28
    a39c:	63 5f       	subi	r22, 0xF3	; 243
    a39e:	7f 4f       	sbci	r23, 0xFF	; 255
    a3a0:	ce 01       	movw	r24, r28
    a3a2:	47 96       	adiw	r24, 0x17	; 23
    a3a4:	0e 94 70 af 	call	0x15ee0	; 0x15ee0 <strcpy>
_Z25display_menu_tds_set_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1687
  char name[10];
  tds_get_name(args2, name);
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0);
    a3a8:	60 e0       	ldi	r22, 0x00	; 0
    a3aa:	87 e6       	ldi	r24, 0x67	; 103
    a3ac:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <MenuHistoryNextMenu(unsigned char, unsigned char)>
display_element_set_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1607
  menu_dialog_set_variable_args = idx;
}
/////
void display_element_set_string(char *str, uint8_t max_length, uint8_t idx)
{
  strcpy(dialog_set_string, str);
    a3b0:	be 01       	movw	r22, r28
    a3b2:	69 5e       	subi	r22, 0xE9	; 233
    a3b4:	7f 4f       	sbci	r23, 0xFF	; 255
    a3b6:	82 ed       	ldi	r24, 0xD2	; 210
    a3b8:	98 e0       	ldi	r25, 0x08	; 8
    a3ba:	0e 94 70 af 	call	0x15ee0	; 0x15ee0 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1608
  dialog_set_string_max_length = max_length;
    a3be:	88 e0       	ldi	r24, 0x08	; 8
    a3c0:	80 93 cf 08 	sts	0x08CF, r24	; 0x8008cf <dialog_set_string_max_length>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1609
  dialog_set_string_args = idx;
    a3c4:	10 93 e2 08 	sts	0x08E2, r17	; 0x8008e2 <dialog_set_string_args>
_Z25display_menu_tds_set_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1689
{
  char name[10];
  tds_get_name(args2, name);
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0);
  display_element_set_string(name, 8, args2);
  dialog_save_variable_function = &menu_tds_save_name;
    a3c8:	8e e6       	ldi	r24, 0x6E	; 110
    a3ca:	92 e5       	ldi	r25, 0x52	; 82
    a3cc:	90 93 d1 08 	sts	0x08D1, r25	; 0x8008d1 <dialog_save_variable_function+0x1>
    a3d0:	80 93 d0 08 	sts	0x08D0, r24	; 0x8008d0 <dialog_save_variable_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1690
}
    a3d4:	a0 96       	adiw	r28, 0x20	; 32
    a3d6:	0f b6       	in	r0, 0x3f	; 63
    a3d8:	f8 94       	cli
    a3da:	de bf       	out	0x3e, r29	; 62
    a3dc:	0f be       	out	0x3f, r0	; 63
    a3de:	cd bf       	out	0x3d, r28	; 61
    a3e0:	df 91       	pop	r29
    a3e2:	cf 91       	pop	r28
    a3e4:	1f 91       	pop	r17
    a3e6:	08 95       	ret

0000a3e8 <display_menu_tds_set_period(unsigned char, unsigned char)>:
_Z27display_menu_tds_set_periodhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1676
  dialog_save_variable_function = &menu_tds_save_offset;
}

/// funkce pro nastaveni merici periody
void display_menu_tds_set_period(uint8_t args1, uint8_t args2)
{
    a3e8:	1f 93       	push	r17
    a3ea:	cf 93       	push	r28
    a3ec:	df 93       	push	r29
    a3ee:	cd b7       	in	r28, 0x3d	; 61
    a3f0:	de b7       	in	r29, 0x3e	; 62
    a3f2:	66 97       	sbiw	r28, 0x16	; 22
    a3f4:	0f b6       	in	r0, 0x3f	; 63
    a3f6:	f8 94       	cli
    a3f8:	de bf       	out	0x3e, r29	; 62
    a3fa:	0f be       	out	0x3f, r0	; 63
    a3fc:	cd bf       	out	0x3d, r28	; 61
    a3fe:	16 2f       	mov	r17, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1677
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0);
    a400:	60 e0       	ldi	r22, 0x00	; 0
    a402:	86 e6       	ldi	r24, 0x66	; 102
    a404:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <MenuHistoryNextMenu(unsigned char, unsigned char)>
tds_get_period():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:114
}
//// funkce ziska periodu mereni
int tds_get_period(uint8_t idx)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    a408:	be 01       	movw	r22, r28
    a40a:	6f 5f       	subi	r22, 0xFF	; 255
    a40c:	7f 4f       	sbci	r23, 0xFF	; 255
    a40e:	81 2f       	mov	r24, r17
    a410:	0e 94 32 4e 	call	0x9c64	; 0x9c64 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:115
  return tds.period;
    a414:	8d 89       	ldd	r24, Y+21	; 0x15
    a416:	90 e0       	ldi	r25, 0x00	; 0
display_element_dialog_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1598
    menu_dialog_set_variable_now = menu_dialog_set_variable_now + menu_dialog_set_variable_step;
  }
}
void display_element_dialog_set_variable(uint16_t now, uint16_t min, uint16_t max, uint8_t step, uint8_t idx)
{
  menu_dialog_set_variable_now = now;
    a418:	90 93 a3 08 	sts	0x08A3, r25	; 0x8008a3 <menu_dialog_set_variable_now+0x1>
    a41c:	80 93 a2 08 	sts	0x08A2, r24	; 0x8008a2 <menu_dialog_set_variable_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1599
  menu_dialog_set_variable_min = min;
    a420:	81 e0       	ldi	r24, 0x01	; 1
    a422:	90 e0       	ldi	r25, 0x00	; 0
    a424:	90 93 57 08 	sts	0x0857, r25	; 0x800857 <menu_dialog_set_variable_min+0x1>
    a428:	80 93 56 08 	sts	0x0856, r24	; 0x800856 <menu_dialog_set_variable_min>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1600
  menu_dialog_set_variable_max = max;
    a42c:	8f ef       	ldi	r24, 0xFF	; 255
    a42e:	90 e0       	ldi	r25, 0x00	; 0
    a430:	90 93 55 08 	sts	0x0855, r25	; 0x800855 <menu_dialog_set_variable_max+0x1>
    a434:	80 93 54 08 	sts	0x0854, r24	; 0x800854 <menu_dialog_set_variable_max>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1601
  menu_dialog_set_variable_step = step;
    a438:	81 e0       	ldi	r24, 0x01	; 1
    a43a:	80 93 53 08 	sts	0x0853, r24	; 0x800853 <menu_dialog_set_variable_step>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1602
  menu_dialog_set_variable_args = idx;
    a43e:	10 93 52 08 	sts	0x0852, r17	; 0x800852 <menu_dialog_set_variable_args>
_Z27display_menu_tds_set_periodhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1679
/// funkce pro nastaveni merici periody
void display_menu_tds_set_period(uint8_t args1, uint8_t args2)
{
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0);
  display_element_dialog_set_variable(tds_get_period(args2), 1, 255, 1, args2);
  dialog_save_variable_function = &menu_tds_save_period;
    a442:	81 ea       	ldi	r24, 0xA1	; 161
    a444:	92 e5       	ldi	r25, 0x52	; 82
    a446:	90 93 d1 08 	sts	0x08D1, r25	; 0x8008d1 <dialog_save_variable_function+0x1>
    a44a:	80 93 d0 08 	sts	0x08D0, r24	; 0x8008d0 <dialog_save_variable_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1680
}
    a44e:	66 96       	adiw	r28, 0x16	; 22
    a450:	0f b6       	in	r0, 0x3f	; 63
    a452:	f8 94       	cli
    a454:	de bf       	out	0x3e, r29	; 62
    a456:	0f be       	out	0x3f, r0	; 63
    a458:	cd bf       	out	0x3d, r28	; 61
    a45a:	df 91       	pop	r29
    a45c:	cf 91       	pop	r28
    a45e:	1f 91       	pop	r17
    a460:	08 95       	ret

0000a462 <display_menu_tds_set_offset(unsigned char, unsigned char)>:
_Z27display_menu_tds_set_offsethh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1668
   args2 ... je dynamicky parametr nastaveni menu

*/
/// funkce pro nastaveni offsetu tds
void display_menu_tds_set_offset(uint8_t args1, uint8_t args2)
{
    a462:	1f 93       	push	r17
    a464:	cf 93       	push	r28
    a466:	df 93       	push	r29
    a468:	cd b7       	in	r28, 0x3d	; 61
    a46a:	de b7       	in	r29, 0x3e	; 62
    a46c:	66 97       	sbiw	r28, 0x16	; 22
    a46e:	0f b6       	in	r0, 0x3f	; 63
    a470:	f8 94       	cli
    a472:	de bf       	out	0x3e, r29	; 62
    a474:	0f be       	out	0x3f, r0	; 63
    a476:	cd bf       	out	0x3d, r28	; 61
    a478:	16 2f       	mov	r17, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1669
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0);
    a47a:	60 e0       	ldi	r22, 0x00	; 0
    a47c:	86 e6       	ldi	r24, 0x66	; 102
    a47e:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <MenuHistoryNextMenu(unsigned char, unsigned char)>
tds_get_offset():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:98
}
//// funkce ziska offset cidlu tds
int tds_get_offset(uint8_t idx)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    a482:	be 01       	movw	r22, r28
    a484:	6f 5f       	subi	r22, 0xFF	; 255
    a486:	7f 4f       	sbci	r23, 0xFF	; 255
    a488:	81 2f       	mov	r24, r17
    a48a:	0e 94 32 4e 	call	0x9c64	; 0x9c64 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:99
  return tds.offset;
    a48e:	8b 85       	ldd	r24, Y+11	; 0x0b
    a490:	9c 85       	ldd	r25, Y+12	; 0x0c
display_element_dialog_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1598
    menu_dialog_set_variable_now = menu_dialog_set_variable_now + menu_dialog_set_variable_step;
  }
}
void display_element_dialog_set_variable(uint16_t now, uint16_t min, uint16_t max, uint8_t step, uint8_t idx)
{
  menu_dialog_set_variable_now = now;
    a492:	90 93 a3 08 	sts	0x08A3, r25	; 0x8008a3 <menu_dialog_set_variable_now+0x1>
    a496:	80 93 a2 08 	sts	0x08A2, r24	; 0x8008a2 <menu_dialog_set_variable_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1599
  menu_dialog_set_variable_min = min;
    a49a:	80 ef       	ldi	r24, 0xF0	; 240
    a49c:	98 ed       	ldi	r25, 0xD8	; 216
    a49e:	90 93 57 08 	sts	0x0857, r25	; 0x800857 <menu_dialog_set_variable_min+0x1>
    a4a2:	80 93 56 08 	sts	0x0856, r24	; 0x800856 <menu_dialog_set_variable_min>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1600
  menu_dialog_set_variable_max = max;
    a4a6:	80 e1       	ldi	r24, 0x10	; 16
    a4a8:	97 e2       	ldi	r25, 0x27	; 39
    a4aa:	90 93 55 08 	sts	0x0855, r25	; 0x800855 <menu_dialog_set_variable_max+0x1>
    a4ae:	80 93 54 08 	sts	0x0854, r24	; 0x800854 <menu_dialog_set_variable_max>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1601
  menu_dialog_set_variable_step = step;
    a4b2:	84 e6       	ldi	r24, 0x64	; 100
    a4b4:	80 93 53 08 	sts	0x0853, r24	; 0x800853 <menu_dialog_set_variable_step>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1602
  menu_dialog_set_variable_args = idx;
    a4b8:	10 93 52 08 	sts	0x0852, r17	; 0x800852 <menu_dialog_set_variable_args>
_Z27display_menu_tds_set_offsethh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1671
/// funkce pro nastaveni offsetu tds
void display_menu_tds_set_offset(uint8_t args1, uint8_t args2)
{
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0);
  display_element_dialog_set_variable(tds_get_offset(args2), -10000, 10000, 100, args2);
  dialog_save_variable_function = &menu_tds_save_offset;
    a4bc:	89 ec       	ldi	r24, 0xC9	; 201
    a4be:	92 e5       	ldi	r25, 0x52	; 82
    a4c0:	90 93 d1 08 	sts	0x08D1, r25	; 0x8008d1 <dialog_save_variable_function+0x1>
    a4c4:	80 93 d0 08 	sts	0x08D0, r24	; 0x8008d0 <dialog_save_variable_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1672
}
    a4c8:	66 96       	adiw	r28, 0x16	; 22
    a4ca:	0f b6       	in	r0, 0x3f	; 63
    a4cc:	f8 94       	cli
    a4ce:	de bf       	out	0x3e, r29	; 62
    a4d0:	0f be       	out	0x3f, r0	; 63
    a4d2:	cd bf       	out	0x3d, r28	; 61
    a4d4:	df 91       	pop	r29
    a4d6:	cf 91       	pop	r28
    a4d8:	1f 91       	pop	r17
    a4da:	08 95       	ret

0000a4dc <menu_tds_save_name(unsigned char, unsigned char)>:
_Z18menu_tds_save_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1651
{
  tds_set_period(display_element_get_variable_args(), display_element_get_variable());
}
/////
void menu_tds_save_name(uint8_t args1, uint8_t args2)
{
    a4dc:	1f 93       	push	r17
    a4de:	cf 93       	push	r28
    a4e0:	df 93       	push	r29
    a4e2:	cd b7       	in	r28, 0x3d	; 61
    a4e4:	de b7       	in	r29, 0x3e	; 62
    a4e6:	a0 97       	sbiw	r28, 0x20	; 32
    a4e8:	0f b6       	in	r0, 0x3f	; 63
    a4ea:	f8 94       	cli
    a4ec:	de bf       	out	0x3e, r29	; 62
    a4ee:	0f be       	out	0x3f, r0	; 63
    a4f0:	cd bf       	out	0x3d, r28	; 61
display_element_get_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1619
  return dialog_set_string_args;
}

void display_element_get_string(char *str)
{
  strcpy(str, dialog_set_string);
    a4f2:	62 ed       	ldi	r22, 0xD2	; 210
    a4f4:	78 e0       	ldi	r23, 0x08	; 8
    a4f6:	ce 01       	movw	r24, r28
    a4f8:	47 96       	adiw	r24, 0x17	; 23
    a4fa:	0e 94 70 af 	call	0x15ee0	; 0x15ee0 <strcpy>
_Z18menu_tds_save_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1654
/////
void menu_tds_save_name(uint8_t args1, uint8_t args2)
{
  char name[10];
  display_element_get_string(name);
  if (strlen(name) > 0)
    a4fe:	8f 89       	ldd	r24, Y+23	; 0x17
    a500:	88 23       	and	r24, r24
    a502:	a9 f0       	breq	.+42     	; 0xa52e <menu_tds_save_name(unsigned char, unsigned char)+0x52>
display_element_get_string_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1614
  dialog_set_string_args = idx;
}

uint8_t display_element_get_string_args(void)
{
  return dialog_set_string_args;
    a504:	10 91 e2 08 	lds	r17, 0x08E2	; 0x8008e2 <dialog_set_string_args>
tds_set_name():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:82
}
//// nastavi nazev k tds cidlu
void tds_set_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    a508:	be 01       	movw	r22, r28
    a50a:	6f 5f       	subi	r22, 0xFF	; 255
    a50c:	7f 4f       	sbci	r23, 0xFF	; 255
    a50e:	81 2f       	mov	r24, r17
    a510:	0e 94 32 4e 	call	0x9c64	; 0x9c64 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:83
  strcpy(tds.name, name);
    a514:	be 01       	movw	r22, r28
    a516:	69 5e       	subi	r22, 0xE9	; 233
    a518:	7f 4f       	sbci	r23, 0xFF	; 255
    a51a:	ce 01       	movw	r24, r28
    a51c:	0d 96       	adiw	r24, 0x0d	; 13
    a51e:	0e 94 70 af 	call	0x15ee0	; 0x15ee0 <strcpy>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:84
  set_tds18s20(idx, &tds);
    a522:	be 01       	movw	r22, r28
    a524:	6f 5f       	subi	r22, 0xFF	; 255
    a526:	7f 4f       	sbci	r23, 0xFF	; 255
    a528:	81 2f       	mov	r24, r17
    a52a:	0e 94 8d 4c 	call	0x991a	; 0x991a <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z18menu_tds_save_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1656
{
  char name[10];
  display_element_get_string(name);
  if (strlen(name) > 0)
    tds_set_name(display_element_get_string_args(), name);
}
    a52e:	a0 96       	adiw	r28, 0x20	; 32
    a530:	0f b6       	in	r0, 0x3f	; 63
    a532:	f8 94       	cli
    a534:	de bf       	out	0x3e, r29	; 62
    a536:	0f be       	out	0x3f, r0	; 63
    a538:	cd bf       	out	0x3d, r28	; 61
    a53a:	df 91       	pop	r29
    a53c:	cf 91       	pop	r28
    a53e:	1f 91       	pop	r17
    a540:	08 95       	ret

0000a542 <menu_tds_save_period(unsigned char, unsigned char)>:
_Z20menu_tds_save_periodhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1646
{
  tds_set_offset(display_element_get_variable_args(), display_element_get_variable());
}

void menu_tds_save_period(uint8_t args1, uint8_t args2)
{
    a542:	0f 93       	push	r16
    a544:	1f 93       	push	r17
    a546:	cf 93       	push	r28
    a548:	df 93       	push	r29
    a54a:	cd b7       	in	r28, 0x3d	; 61
    a54c:	de b7       	in	r29, 0x3e	; 62
    a54e:	66 97       	sbiw	r28, 0x16	; 22
    a550:	0f b6       	in	r0, 0x3f	; 63
    a552:	f8 94       	cli
    a554:	de bf       	out	0x3e, r29	; 62
    a556:	0f be       	out	0x3f, r0	; 63
    a558:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1647
  tds_set_period(display_element_get_variable_args(), display_element_get_variable());
    a55a:	00 91 a2 08 	lds	r16, 0x08A2	; 0x8008a2 <menu_dialog_set_variable_now>
display_element_get_variable_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1574



uint8_t display_element_get_variable_args(void)
{
  return menu_dialog_set_variable_args;
    a55e:	10 91 52 08 	lds	r17, 0x0852	; 0x800852 <menu_dialog_set_variable_args>
tds_set_period():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:106
///////
//// funkce nastavi periodu mereni
void tds_set_period(uint8_t idx, uint8_t period)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    a562:	be 01       	movw	r22, r28
    a564:	6f 5f       	subi	r22, 0xFF	; 255
    a566:	7f 4f       	sbci	r23, 0xFF	; 255
    a568:	81 2f       	mov	r24, r17
    a56a:	0e 94 32 4e 	call	0x9c64	; 0x9c64 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:107
  tds.period = period;
    a56e:	0d 8b       	std	Y+21, r16	; 0x15
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:108
  set_tds18s20(idx, &tds);
    a570:	be 01       	movw	r22, r28
    a572:	6f 5f       	subi	r22, 0xFF	; 255
    a574:	7f 4f       	sbci	r23, 0xFF	; 255
    a576:	81 2f       	mov	r24, r17
    a578:	0e 94 8d 4c 	call	0x991a	; 0x991a <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z20menu_tds_save_periodhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1648
}

void menu_tds_save_period(uint8_t args1, uint8_t args2)
{
  tds_set_period(display_element_get_variable_args(), display_element_get_variable());
}
    a57c:	66 96       	adiw	r28, 0x16	; 22
    a57e:	0f b6       	in	r0, 0x3f	; 63
    a580:	f8 94       	cli
    a582:	de bf       	out	0x3e, r29	; 62
    a584:	0f be       	out	0x3f, r0	; 63
    a586:	cd bf       	out	0x3d, r28	; 61
    a588:	df 91       	pop	r29
    a58a:	cf 91       	pop	r28
    a58c:	1f 91       	pop	r17
    a58e:	0f 91       	pop	r16
    a590:	08 95       	ret

0000a592 <menu_tds_save_offset(unsigned char, unsigned char)>:
_Z20menu_tds_save_offsethh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1641
    dialog_set_string[len - 1] = 0;
}

/////
void menu_tds_save_offset(uint8_t args1, uint8_t args2)
{
    a592:	ef 92       	push	r14
    a594:	ff 92       	push	r15
    a596:	1f 93       	push	r17
    a598:	cf 93       	push	r28
    a59a:	df 93       	push	r29
    a59c:	cd b7       	in	r28, 0x3d	; 61
    a59e:	de b7       	in	r29, 0x3e	; 62
    a5a0:	66 97       	sbiw	r28, 0x16	; 22
    a5a2:	0f b6       	in	r0, 0x3f	; 63
    a5a4:	f8 94       	cli
    a5a6:	de bf       	out	0x3e, r29	; 62
    a5a8:	0f be       	out	0x3f, r0	; 63
    a5aa:	cd bf       	out	0x3d, r28	; 61
display_element_get_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1579
  return menu_dialog_set_variable_args;
}

uint16_t display_element_get_variable(void)
{
  return menu_dialog_set_variable_now;
    a5ac:	e0 90 a2 08 	lds	r14, 0x08A2	; 0x8008a2 <menu_dialog_set_variable_now>
    a5b0:	f0 90 a3 08 	lds	r15, 0x08A3	; 0x8008a3 <menu_dialog_set_variable_now+0x1>
display_element_get_variable_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1574



uint8_t display_element_get_variable_args(void)
{
  return menu_dialog_set_variable_args;
    a5b4:	10 91 52 08 	lds	r17, 0x0852	; 0x800852 <menu_dialog_set_variable_args>
tds_set_offset():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:90
}
//// funkce nastavi offset cidlu tds
void tds_set_offset(uint8_t idx, int offset)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    a5b8:	be 01       	movw	r22, r28
    a5ba:	6f 5f       	subi	r22, 0xFF	; 255
    a5bc:	7f 4f       	sbci	r23, 0xFF	; 255
    a5be:	81 2f       	mov	r24, r17
    a5c0:	0e 94 32 4e 	call	0x9c64	; 0x9c64 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:91
  tds.offset = offset;
    a5c4:	fc 86       	std	Y+12, r15	; 0x0c
    a5c6:	eb 86       	std	Y+11, r14	; 0x0b
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:92
  set_tds18s20(idx, &tds);
    a5c8:	be 01       	movw	r22, r28
    a5ca:	6f 5f       	subi	r22, 0xFF	; 255
    a5cc:	7f 4f       	sbci	r23, 0xFF	; 255
    a5ce:	81 2f       	mov	r24, r17
    a5d0:	0e 94 8d 4c 	call	0x991a	; 0x991a <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z20menu_tds_save_offsethh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1643

/////
void menu_tds_save_offset(uint8_t args1, uint8_t args2)
{
  tds_set_offset(display_element_get_variable_args(), display_element_get_variable());
}
    a5d4:	66 96       	adiw	r28, 0x16	; 22
    a5d6:	0f b6       	in	r0, 0x3f	; 63
    a5d8:	f8 94       	cli
    a5da:	de bf       	out	0x3e, r29	; 62
    a5dc:	0f be       	out	0x3f, r0	; 63
    a5de:	cd bf       	out	0x3d, r28	; 61
    a5e0:	df 91       	pop	r29
    a5e2:	cf 91       	pop	r28
    a5e4:	1f 91       	pop	r17
    a5e6:	ff 90       	pop	r15
    a5e8:	ef 90       	pop	r14
    a5ea:	08 95       	ret

0000a5ec <device_get_name(char*)>:
_Z15device_get_namePc():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:59

//////////////////////////
//// nacte nazev zarizeni
void device_get_name(char *name)
{
    a5ec:	0f 93       	push	r16
    a5ee:	1f 93       	push	r17
    a5f0:	cf 93       	push	r28
    a5f2:	df 93       	push	r29
    a5f4:	8c 01       	movw	r16, r24
    a5f6:	c4 e6       	ldi	r28, 0x64	; 100
    a5f8:	d0 e0       	ldi	r29, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:63
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = EEPROM.read(device_nazev  + i);
    a5fa:	ce 01       	movw	r24, r28
    a5fc:	0e 94 49 8f 	call	0x11e92	; 0x11e92 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:64
    name[i] = t;
    a600:	f8 01       	movw	r30, r16
    a602:	81 93       	st	Z+, r24
    a604:	8f 01       	movw	r16, r30
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:65
    name[i + 1] = 0;
    a606:	10 82       	st	Z, r1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:66
    if (t == 0)
    a608:	88 23       	and	r24, r24
    a60a:	21 f0       	breq	.+8      	; 0xa614 <device_get_name(char*)+0x28>
    a60c:	21 96       	adiw	r28, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:61
//////////////////////////
//// nacte nazev zarizeni
void device_get_name(char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
    a60e:	cd 36       	cpi	r28, 0x6D	; 109
    a610:	d1 05       	cpc	r29, r1
    a612:	99 f7       	brne	.-26     	; 0xa5fa <device_get_name(char*)+0xe>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:71
    if (t == 0)
    {
      break;
    }
  }
}
    a614:	df 91       	pop	r29
    a616:	cf 91       	pop	r28
    a618:	1f 91       	pop	r17
    a61a:	0f 91       	pop	r16
    a61c:	08 95       	ret

0000a61e <send_mqtt_general_payload(PubSubClient*, char*, char const*)>:
_Z25send_mqtt_general_payloadP12PubSubClientPcPKc():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:217
  else
    mqtt_error++;
}
///
void send_mqtt_general_payload(PubSubClient *mqtt_client, char *topic, const char *payload)
{
    a61e:	cf 92       	push	r12
    a620:	df 92       	push	r13
    a622:	ef 92       	push	r14
    a624:	ff 92       	push	r15
    a626:	0f 93       	push	r16
    a628:	1f 93       	push	r17
    a62a:	cf 93       	push	r28
    a62c:	df 93       	push	r29
    a62e:	cd b7       	in	r28, 0x3d	; 61
    a630:	de b7       	in	r29, 0x3e	; 62
    a632:	ca 54       	subi	r28, 0x4A	; 74
    a634:	d1 09       	sbc	r29, r1
    a636:	0f b6       	in	r0, 0x3f	; 63
    a638:	f8 94       	cli
    a63a:	de bf       	out	0x3e, r29	; 62
    a63c:	0f be       	out	0x3f, r0	; 63
    a63e:	cd bf       	out	0x3d, r28	; 61
    a640:	8c 01       	movw	r16, r24
    a642:	6b 01       	movw	r12, r22
    a644:	7a 01       	movw	r14, r20
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:220
  const char str_topic[64];
  char hostname[10];
  if (mqtt_client->connected())
    a646:	0e 94 14 8c 	call	0x11828	; 0x11828 <PubSubClient::connected()>
    a64a:	88 23       	and	r24, r24
    a64c:	89 f1       	breq	.+98     	; 0xa6b0 <send_mqtt_general_payload(PubSubClient*, char*, char const*)+0x92>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:222
  {
    mqtt_send_message++;
    a64e:	80 91 69 0b 	lds	r24, 0x0B69	; 0x800b69 <mqtt_send_message>
    a652:	90 91 6a 0b 	lds	r25, 0x0B6A	; 0x800b6a <mqtt_send_message+0x1>
    a656:	01 96       	adiw	r24, 0x01	; 1
    a658:	90 93 6a 0b 	sts	0x0B6A, r25	; 0x800b6a <mqtt_send_message+0x1>
    a65c:	80 93 69 0b 	sts	0x0B69, r24	; 0x800b69 <mqtt_send_message>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:223
    device_get_name(hostname);
    a660:	ce 01       	movw	r24, r28
    a662:	8f 5b       	subi	r24, 0xBF	; 191
    a664:	9f 4f       	sbci	r25, 0xFF	; 255
    a666:	0e 94 f6 52 	call	0xa5ec	; 0xa5ec <device_get_name(char*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:224
    strcpy_P(str_topic, header_out);
    a66a:	60 91 67 0b 	lds	r22, 0x0B67	; 0x800b67 <header_out>
    a66e:	70 91 68 0b 	lds	r23, 0x0B68	; 0x800b68 <header_out+0x1>
    a672:	ce 01       	movw	r24, r28
    a674:	01 96       	adiw	r24, 0x01	; 1
    a676:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:225
    strcat(str_topic, hostname);
    a67a:	be 01       	movw	r22, r28
    a67c:	6f 5b       	subi	r22, 0xBF	; 191
    a67e:	7f 4f       	sbci	r23, 0xFF	; 255
    a680:	ce 01       	movw	r24, r28
    a682:	01 96       	adiw	r24, 0x01	; 1
    a684:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:226
    strcat(str_topic, "/");
    a688:	6f ec       	ldi	r22, 0xCF	; 207
    a68a:	73 e0       	ldi	r23, 0x03	; 3
    a68c:	ce 01       	movw	r24, r28
    a68e:	01 96       	adiw	r24, 0x01	; 1
    a690:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:227
    strcat(str_topic, topic);
    a694:	b6 01       	movw	r22, r12
    a696:	ce 01       	movw	r24, r28
    a698:	01 96       	adiw	r24, 0x01	; 1
    a69a:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:228
    if (mqtt_client->publish(str_topic, payload) == false) mqtt_error++;
    a69e:	a7 01       	movw	r20, r14
    a6a0:	be 01       	movw	r22, r28
    a6a2:	6f 5f       	subi	r22, 0xFF	; 255
    a6a4:	7f 4f       	sbci	r23, 0xFF	; 255
    a6a6:	c8 01       	movw	r24, r16
    a6a8:	0e 94 61 8e 	call	0x11cc2	; 0x11cc2 <PubSubClient::publish(char const*, char const*)>
    a6ac:	81 11       	cpse	r24, r1
    a6ae:	09 c0       	rjmp	.+18     	; 0xa6c2 <send_mqtt_general_payload(PubSubClient*, char*, char const*)+0xa4>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:231
  }
  else
    mqtt_error++;
    a6b0:	80 91 6b 0b 	lds	r24, 0x0B6B	; 0x800b6b <mqtt_error>
    a6b4:	90 91 6c 0b 	lds	r25, 0x0B6C	; 0x800b6c <mqtt_error+0x1>
    a6b8:	01 96       	adiw	r24, 0x01	; 1
    a6ba:	90 93 6c 0b 	sts	0x0B6C, r25	; 0x800b6c <mqtt_error+0x1>
    a6be:	80 93 6b 0b 	sts	0x0B6B, r24	; 0x800b6b <mqtt_error>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:232
}
    a6c2:	c6 5b       	subi	r28, 0xB6	; 182
    a6c4:	df 4f       	sbci	r29, 0xFF	; 255
    a6c6:	0f b6       	in	r0, 0x3f	; 63
    a6c8:	f8 94       	cli
    a6ca:	de bf       	out	0x3e, r29	; 62
    a6cc:	0f be       	out	0x3f, r0	; 63
    a6ce:	cd bf       	out	0x3d, r28	; 61
    a6d0:	df 91       	pop	r29
    a6d2:	cf 91       	pop	r28
    a6d4:	1f 91       	pop	r17
    a6d6:	0f 91       	pop	r16
    a6d8:	ff 90       	pop	r15
    a6da:	ef 90       	pop	r14
    a6dc:	df 90       	pop	r13
    a6de:	cf 90       	pop	r12
    a6e0:	08 95       	ret

0000a6e2 <printf_via_mqtt(char, __file*)>:
_Z15printf_via_mqttcP6__file():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:437
  return ret;
}
//////////////////////////////////////////////////////////////////////
/// servisni logovatko pres mqtt ///
int printf_via_mqtt(char c, FILE * t)
{
    a6e2:	cf 93       	push	r28
    a6e4:	df 93       	push	r29
    a6e6:	cd b7       	in	r28, 0x3d	; 61
    a6e8:	de b7       	in	r29, 0x3e	; 62
    a6ea:	60 97       	sbiw	r28, 0x10	; 16
    a6ec:	0f b6       	in	r0, 0x3f	; 63
    a6ee:	f8 94       	cli
    a6f0:	de bf       	out	0x3e, r29	; 62
    a6f2:	0f be       	out	0x3f, r0	; 63
    a6f4:	cd bf       	out	0x3d, r28	; 61
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:439
  char topic[16];
  mqtt_log[mqtt_log_cnt] = c;
    a6f6:	90 91 65 09 	lds	r25, 0x0965	; 0x800965 <mqtt_log_cnt>
    a6fa:	e9 2f       	mov	r30, r25
    a6fc:	f0 e0       	ldi	r31, 0x00	; 0
    a6fe:	eb 51       	subi	r30, 0x1B	; 27
    a700:	f7 4f       	sbci	r31, 0xF7	; 247
    a702:	80 83       	st	Z, r24
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:440
  mqtt_log[mqtt_log_cnt + 1] = 0;
    a704:	11 82       	std	Z+1, r1	; 0x01
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:441
  mqtt_log_cnt++;
    a706:	9f 5f       	subi	r25, 0xFF	; 255
    a708:	90 93 65 09 	sts	0x0965, r25	; 0x800965 <mqtt_log_cnt>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:442
  if (mqtt_log_cnt > 127 || c == '\n' || c == 0)
    a70c:	97 fd       	sbrc	r25, 7
    a70e:	04 c0       	rjmp	.+8      	; 0xa718 <printf_via_mqtt(char, __file*)+0x36>
    a710:	8a 30       	cpi	r24, 0x0A	; 10
    a712:	11 f0       	breq	.+4      	; 0xa718 <printf_via_mqtt(char, __file*)+0x36>
    a714:	81 11       	cpse	r24, r1
    a716:	13 c0       	rjmp	.+38     	; 0xa73e <printf_via_mqtt(char, __file*)+0x5c>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:444
  {
    strcpy(topic, "log-printf");
    a718:	67 e9       	ldi	r22, 0x97	; 151
    a71a:	73 e0       	ldi	r23, 0x03	; 3
    a71c:	ce 01       	movw	r24, r28
    a71e:	01 96       	adiw	r24, 0x01	; 1
    a720:	0e 94 70 af 	call	0x15ee0	; 0x15ee0 <strcpy>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:445
    send_mqtt_general_payload(mqtt_get_public_mqtt_client(), topic, mqtt_log);
    a724:	45 ee       	ldi	r20, 0xE5	; 229
    a726:	58 e0       	ldi	r21, 0x08	; 8
    a728:	be 01       	movw	r22, r28
    a72a:	6f 5f       	subi	r22, 0xFF	; 255
    a72c:	7f 4f       	sbci	r23, 0xFF	; 255
    a72e:	80 91 e3 08 	lds	r24, 0x08E3	; 0x8008e3 <pub_mqtt_client>
    a732:	90 91 e4 08 	lds	r25, 0x08E4	; 0x8008e4 <pub_mqtt_client+0x1>
    a736:	0e 94 0f 53 	call	0xa61e	; 0xa61e <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:446
    mqtt_log_cnt = 0;
    a73a:	10 92 65 09 	sts	0x0965, r1	; 0x800965 <mqtt_log_cnt>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:448
  }
}
    a73e:	60 96       	adiw	r28, 0x10	; 16
    a740:	0f b6       	in	r0, 0x3f	; 63
    a742:	f8 94       	cli
    a744:	de bf       	out	0x3e, r29	; 62
    a746:	0f be       	out	0x3f, r0	; 63
    a748:	cd bf       	out	0x3d, r28	; 61
    a74a:	df 91       	pop	r29
    a74c:	cf 91       	pop	r28
    a74e:	08 95       	ret

0000a750 <get_function_thermostat_default_ring_has_mode(unsigned char)>:
_Z45get_function_thermostat_default_ring_has_modeh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2199
   funkce pro zjisteni, zda mode v args je aktivni a nebo ne
   return
     - uint8_t 1... activni, 0... neaktivni
*/
uint8_t get_function_thermostat_default_ring_has_mode(uint8_t args)
{
    a750:	cf 93       	push	r28
    a752:	c8 2f       	mov	r28, r24
thermostat_ring_get_mode():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:176
}
//////////////////////////////////////////////////////////////////////////////////////////////////////
//// nastaveni/ziska modu k ringu termostatu
uint8_t thermostat_ring_get_mode(uint8_t idx)
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_mode);
    a754:	80 91 0f 0a 	lds	r24, 0x0A0F	; 0x800a0f <default_ring>
    a758:	21 e2       	ldi	r18, 0x21	; 33
    a75a:	82 9f       	mul	r24, r18
    a75c:	c0 01       	movw	r24, r0
    a75e:	11 24       	eor	r1, r1
    a760:	82 5a       	subi	r24, 0xA2	; 162
    a762:	9e 4f       	sbci	r25, 0xFE	; 254
    a764:	0e 94 49 8f 	call	0x11e92	; 0x11e92 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
thermostat_ring_get_mode_1():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:185
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mode, id);
}
bool thermostat_ring_get_mode_1(uint8_t idx, uint8_t args)
{
  bool ret = false;
  if (thermostat_ring_get_mode(idx) == args)
    a768:	91 e0       	ldi	r25, 0x01	; 1
    a76a:	c8 13       	cpse	r28, r24
    a76c:	90 e0       	ldi	r25, 0x00	; 0
_Z45get_function_thermostat_default_ring_has_modeh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2204
  uint8_t ret = 0;
  if (thermostat_ring_get_mode_1(default_ring, args) == true)
    ret = 1;
  return ret;
}
    a76e:	89 2f       	mov	r24, r25
    a770:	cf 91       	pop	r28
    a772:	08 95       	ret

0000a774 <remote_tds_get_active(unsigned char, unsigned char*)>:
_Z21remote_tds_get_activehPh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2008
    }
}
///
/// je aktivni
void remote_tds_get_active(uint8_t idx, uint8_t *active)
{
    a774:	cf 93       	push	r28
    a776:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2009
  if (idx < MAX_RTDS)
    a778:	8a 30       	cpi	r24, 0x0A	; 10
    a77a:	68 f4       	brcc	.+26     	; 0xa796 <remote_tds_get_active(unsigned char, unsigned char*)+0x22>
    a77c:	eb 01       	movw	r28, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2011
  {
    *active = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS);
    a77e:	24 e1       	ldi	r18, 0x14	; 20
    a780:	82 9f       	mul	r24, r18
    a782:	c0 01       	movw	r24, r0
    a784:	11 24       	eor	r1, r1
    a786:	83 54       	subi	r24, 0x43	; 67
    a788:	9a 4f       	sbci	r25, 0xFA	; 250
    a78a:	0e 94 49 8f 	call	0x11e92	; 0x11e92 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
    a78e:	88 83       	st	Y, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2015
  }
  else
    *active = 255;
}
    a790:	df 91       	pop	r29
    a792:	cf 91       	pop	r28
    a794:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2014
  if (idx < MAX_RTDS)
  {
    *active = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS);
  }
  else
    *active = 255;
    a796:	8f ef       	ldi	r24, 0xFF	; 255
    a798:	fb 01       	movw	r30, r22
    a79a:	80 83       	st	Z, r24
    a79c:	f9 cf       	rjmp	.-14     	; 0xa790 <remote_tds_get_active(unsigned char, unsigned char*)+0x1c>

0000a79e <click_rtds_setting_sensor(unsigned char, unsigned char)>:
_Z25click_rtds_setting_sensorhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4669
/*
    args1 - parametr z globalniho nastaveni tlacitek
    loop_idx - polozka z menu
*/
void click_rtds_setting_sensor(uint8_t args1, uint8_t loop_idx)
{
    a79e:	1f 93       	push	r17
    a7a0:	cf 93       	push	r28
    a7a2:	df 93       	push	r29
    a7a4:	1f 92       	push	r1
    a7a6:	cd b7       	in	r28, 0x3d	; 61
    a7a8:	de b7       	in	r29, 0x3e	; 62
    a7aa:	16 2f       	mov	r17, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4672
  char name[RTDS_DEVICE_STRING_LEN];
  uint8_t active;
  remote_tds_get_active(loop_idx, &active);
    a7ac:	be 01       	movw	r22, r28
    a7ae:	6f 5f       	subi	r22, 0xFF	; 255
    a7b0:	7f 4f       	sbci	r23, 0xFF	; 255
    a7b2:	81 2f       	mov	r24, r17
    a7b4:	0e 94 ba 53 	call	0xa774	; 0xa774 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4673
  if (active == 1)
    a7b8:	89 81       	ldd	r24, Y+1	; 0x01
    a7ba:	81 30       	cpi	r24, 0x01	; 1
    a7bc:	21 f4       	brne	.+8      	; 0xa7c6 <click_rtds_setting_sensor(unsigned char, unsigned char)+0x28>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4675
  {
    MenuHistoryNextMenu(MENU_NASTAVENI_RTDS_DETAIL, loop_idx);
    a7be:	61 2f       	mov	r22, r17
    a7c0:	87 e0       	ldi	r24, 0x07	; 7
    a7c2:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <MenuHistoryNextMenu(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4677
  }
}
    a7c6:	0f 90       	pop	r0
    a7c8:	df 91       	pop	r29
    a7ca:	cf 91       	pop	r28
    a7cc:	1f 91       	pop	r17
    a7ce:	08 95       	ret

0000a7d0 <remote_tds_find_free()>:
_Z20remote_tds_find_freev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2065
  }
}
///
/// vrati prvni idx banky ktera neni aktivni
uint8_t remote_tds_find_free(void)
{
    a7d0:	1f 93       	push	r17
    a7d2:	cf 93       	push	r28
    a7d4:	df 93       	push	r29
    a7d6:	1f 92       	push	r1
    a7d8:	cd b7       	in	r28, 0x3d	; 61
    a7da:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2068
  uint8_t ret = 255;
  uint8_t active;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    a7dc:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2070
  {
    remote_tds_get_active(idx, &active);
    a7de:	be 01       	movw	r22, r28
    a7e0:	6f 5f       	subi	r22, 0xFF	; 255
    a7e2:	7f 4f       	sbci	r23, 0xFF	; 255
    a7e4:	81 2f       	mov	r24, r17
    a7e6:	0e 94 ba 53 	call	0xa774	; 0xa774 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2071
    if (active == 0)
    a7ea:	89 81       	ldd	r24, Y+1	; 0x01
    a7ec:	88 23       	and	r24, r24
    a7ee:	21 f0       	breq	.+8      	; 0xa7f8 <remote_tds_find_free()+0x28>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2068
/// vrati prvni idx banky ktera neni aktivni
uint8_t remote_tds_find_free(void)
{
  uint8_t ret = 255;
  uint8_t active;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    a7f0:	1f 5f       	subi	r17, 0xFF	; 255
    a7f2:	1a 30       	cpi	r17, 0x0A	; 10
    a7f4:	a1 f7       	brne	.-24     	; 0xa7de <remote_tds_find_free()+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2066
}
///
/// vrati prvni idx banky ktera neni aktivni
uint8_t remote_tds_find_free(void)
{
  uint8_t ret = 255;
    a7f6:	1f ef       	ldi	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2078
      ret = idx;
      break;
    }
  }
  return ret;
}
    a7f8:	81 2f       	mov	r24, r17
    a7fa:	0f 90       	pop	r0
    a7fc:	df 91       	pop	r29
    a7fe:	cf 91       	pop	r28
    a800:	1f 91       	pop	r17
    a802:	08 95       	ret

0000a804 <click_rtds_add_sensor(unsigned char, unsigned char)>:
_Z21click_rtds_add_sensorhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4621
  }
  return cnt;
}

void click_rtds_add_sensor(uint8_t args1, uint8_t args)
{
    a804:	1f 93       	push	r17
    a806:	cf 93       	push	r28
    a808:	df 93       	push	r29
    a80a:	00 d0       	rcall	.+0      	; 0xa80c <click_rtds_add_sensor(unsigned char, unsigned char)+0x8>
    a80c:	1f 92       	push	r1
    a80e:	1f 92       	push	r1
    a810:	cd b7       	in	r28, 0x3d	; 61
    a812:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4624
  char rtds_topic[5];
  uint8_t idx;
  idx = remote_tds_find_free();
    a814:	0e 94 e8 53 	call	0xa7d0	; 0xa7d0 <remote_tds_find_free()>
    a818:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4625
  if (idx != 255)
    a81a:	8f 3f       	cpi	r24, 0xFF	; 255
    a81c:	e1 f0       	breq	.+56     	; 0xa856 <click_rtds_add_sensor(unsigned char, unsigned char)+0x52>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4627
  {
    strcpy_P(rtds_topic, text_rtds_prefix);
    a81e:	6d e0       	ldi	r22, 0x0D	; 13
    a820:	7f e2       	ldi	r23, 0x2F	; 47
    a822:	ce 01       	movw	r24, r28
    a824:	01 96       	adiw	r24, 0x01	; 1
    a826:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4628
    MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0);
    a82a:	60 e0       	ldi	r22, 0x00	; 0
    a82c:	87 e6       	ldi	r24, 0x67	; 103
    a82e:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <MenuHistoryNextMenu(unsigned char, unsigned char)>
display_element_set_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1607
  menu_dialog_set_variable_args = idx;
}
/////
void display_element_set_string(char *str, uint8_t max_length, uint8_t idx)
{
  strcpy(dialog_set_string, str);
    a832:	be 01       	movw	r22, r28
    a834:	6f 5f       	subi	r22, 0xFF	; 255
    a836:	7f 4f       	sbci	r23, 0xFF	; 255
    a838:	82 ed       	ldi	r24, 0xD2	; 210
    a83a:	98 e0       	ldi	r25, 0x08	; 8
    a83c:	0e 94 70 af 	call	0x15ee0	; 0x15ee0 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1608
  dialog_set_string_max_length = max_length;
    a840:	82 e1       	ldi	r24, 0x12	; 18
    a842:	80 93 cf 08 	sts	0x08CF, r24	; 0x8008cf <dialog_set_string_max_length>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1609
  dialog_set_string_args = idx;
    a846:	10 93 e2 08 	sts	0x08E2, r17	; 0x8008e2 <dialog_set_string_args>
_Z21click_rtds_add_sensorhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4630
  if (idx != 255)
  {
    strcpy_P(rtds_topic, text_rtds_prefix);
    MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0);
    display_element_set_string(rtds_topic, RTDS_DEVICE_STRING_LEN, idx);
    dialog_save_variable_function = &menu_rtds_create_name;
    a84a:	88 e0       	ldi	r24, 0x08	; 8
    a84c:	98 e5       	ldi	r25, 0x58	; 88
    a84e:	90 93 d1 08 	sts	0x08D1, r25	; 0x8008d1 <dialog_save_variable_function+0x1>
    a852:	80 93 d0 08 	sts	0x08D0, r24	; 0x8008d0 <dialog_save_variable_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4633
  }

}
    a856:	0f 90       	pop	r0
    a858:	0f 90       	pop	r0
    a85a:	0f 90       	pop	r0
    a85c:	0f 90       	pop	r0
    a85e:	0f 90       	pop	r0
    a860:	df 91       	pop	r29
    a862:	cf 91       	pop	r28
    a864:	1f 91       	pop	r17
    a866:	08 95       	ret

0000a868 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>:
_Z23remote_tds_get_completehPhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1969
  active - ukazatel na promenou active
  name - ukazatel na nazev topicu
*/
/// ziska nazev topicu
void remote_tds_get_complete(uint8_t idx, uint8_t *active, char *name)
{
    a868:	af 92       	push	r10
    a86a:	bf 92       	push	r11
    a86c:	cf 92       	push	r12
    a86e:	df 92       	push	r13
    a870:	ef 92       	push	r14
    a872:	ff 92       	push	r15
    a874:	0f 93       	push	r16
    a876:	1f 93       	push	r17
    a878:	cf 93       	push	r28
    a87a:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1971
  char t;
  if (idx < MAX_RTDS)
    a87c:	8a 30       	cpi	r24, 0x0A	; 10
    a87e:	88 f5       	brcc	.+98     	; 0xa8e2 <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x7a>
    a880:	7b 01       	movw	r14, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1975
  {
    for (uint8_t i = 0; i < RTDS_DEVICE_STRING_LEN; i++)
    {
      t = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i);
    a882:	94 e1       	ldi	r25, 0x14	; 20
    a884:	89 9f       	mul	r24, r25
    a886:	e0 01       	movw	r28, r0
    a888:	11 24       	eor	r1, r1
    a88a:	6e 01       	movw	r12, r28
    a88c:	e6 e5       	ldi	r30, 0x56	; 86
    a88e:	ce 1a       	sub	r12, r30
    a890:	ea ef       	ldi	r30, 0xFA	; 250
    a892:	de 0a       	sbc	r13, r30
    a894:	8a 01       	movw	r16, r20
    a896:	5e 01       	movw	r10, r28
    a898:	f4 e4       	ldi	r31, 0x44	; 68
    a89a:	af 1a       	sub	r10, r31
    a89c:	fa ef       	ldi	r31, 0xFA	; 250
    a89e:	bf 0a       	sbc	r11, r31
    a8a0:	c6 01       	movw	r24, r12
    a8a2:	0e 94 49 8f 	call	0x11e92	; 0x11e92 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1976
      name[i] = t;
    a8a6:	f8 01       	movw	r30, r16
    a8a8:	81 93       	st	Z+, r24
    a8aa:	8f 01       	movw	r16, r30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1977
      name[i + 1] = 0;
    a8ac:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1978
      if (t == 0) break;
    a8ae:	88 23       	and	r24, r24
    a8b0:	31 f0       	breq	.+12     	; 0xa8be <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x56>
    a8b2:	ff ef       	ldi	r31, 0xFF	; 255
    a8b4:	cf 1a       	sub	r12, r31
    a8b6:	df 0a       	sbc	r13, r31
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1973
void remote_tds_get_complete(uint8_t idx, uint8_t *active, char *name)
{
  char t;
  if (idx < MAX_RTDS)
  {
    for (uint8_t i = 0; i < RTDS_DEVICE_STRING_LEN; i++)
    a8b8:	ca 14       	cp	r12, r10
    a8ba:	db 04       	cpc	r13, r11
    a8bc:	89 f7       	brne	.-30     	; 0xa8a0 <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x38>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1980
      t = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i);
      name[i] = t;
      name[i + 1] = 0;
      if (t == 0) break;
    }
    *active = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS);
    a8be:	ce 01       	movw	r24, r28
    a8c0:	83 54       	subi	r24, 0x43	; 67
    a8c2:	9a 4f       	sbci	r25, 0xFA	; 250
    a8c4:	0e 94 49 8f 	call	0x11e92	; 0x11e92 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
    a8c8:	f7 01       	movw	r30, r14
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1984
  }
  else
  {
    *active = 255;
    a8ca:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1986
  }
}
    a8cc:	df 91       	pop	r29
    a8ce:	cf 91       	pop	r28
    a8d0:	1f 91       	pop	r17
    a8d2:	0f 91       	pop	r16
    a8d4:	ff 90       	pop	r15
    a8d6:	ef 90       	pop	r14
    a8d8:	df 90       	pop	r13
    a8da:	cf 90       	pop	r12
    a8dc:	bf 90       	pop	r11
    a8de:	af 90       	pop	r10
    a8e0:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1984
    }
    *active = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS);
  }
  else
  {
    *active = 255;
    a8e2:	8f ef       	ldi	r24, 0xFF	; 255
    a8e4:	fb 01       	movw	r30, r22
    a8e6:	f1 cf       	rjmp	.-30     	; 0xa8ca <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x62>

0000a8e8 <get_function_rtds_text_button(unsigned char, unsigned char, char*, char*)>:
_Z29get_function_rtds_text_buttonhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4511
  return active;
  }
*/

void get_function_rtds_text_button(uint8_t args1, uint8_t args2, char *line1, char *line2)
{
    a8e8:	cf 92       	push	r12
    a8ea:	df 92       	push	r13
    a8ec:	ef 92       	push	r14
    a8ee:	ff 92       	push	r15
    a8f0:	0f 93       	push	r16
    a8f2:	1f 93       	push	r17
    a8f4:	cf 93       	push	r28
    a8f6:	df 93       	push	r29
    a8f8:	1f 92       	push	r1
    a8fa:	cd b7       	in	r28, 0x3d	; 61
    a8fc:	de b7       	in	r29, 0x3e	; 62
    a8fe:	18 2f       	mov	r17, r24
    a900:	c6 2e       	mov	r12, r22
    a902:	7a 01       	movw	r14, r20
    a904:	02 2f       	mov	r16, r18
    a906:	d3 2e       	mov	r13, r19
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4513
  uint8_t active;
  strcpy_P(line1, text_not_used);
    a908:	6c ee       	ldi	r22, 0xEC	; 236
    a90a:	7e e2       	ldi	r23, 0x2E	; 46
    a90c:	ca 01       	movw	r24, r20
    a90e:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4514
  sprintf(line2, "%d %d", args1, args2);
    a912:	1f 92       	push	r1
    a914:	cf 92       	push	r12
    a916:	1f 92       	push	r1
    a918:	1f 93       	push	r17
    a91a:	82 ea       	ldi	r24, 0xA2	; 162
    a91c:	93 e0       	ldi	r25, 0x03	; 3
    a91e:	9f 93       	push	r25
    a920:	8f 93       	push	r24
    a922:	df 92       	push	r13
    a924:	0f 93       	push	r16
    a926:	0e 94 d3 af 	call	0x15fa6	; 0x15fa6 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4515
  remote_tds_get_active(args1, &active);
    a92a:	be 01       	movw	r22, r28
    a92c:	6f 5f       	subi	r22, 0xFF	; 255
    a92e:	7f 4f       	sbci	r23, 0xFF	; 255
    a930:	81 2f       	mov	r24, r17
    a932:	0e 94 ba 53 	call	0xa774	; 0xa774 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4516
  if (active == 1)
    a936:	0f b6       	in	r0, 0x3f	; 63
    a938:	f8 94       	cli
    a93a:	de bf       	out	0x3e, r29	; 62
    a93c:	0f be       	out	0x3f, r0	; 63
    a93e:	cd bf       	out	0x3d, r28	; 61
    a940:	89 81       	ldd	r24, Y+1	; 0x01
    a942:	81 30       	cpi	r24, 0x01	; 1
    a944:	39 f4       	brne	.+14     	; 0xa954 <get_function_rtds_text_button(unsigned char, unsigned char, char*, char*)+0x6c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4518
  {
    remote_tds_get_complete(args1, &active, line1);
    a946:	a7 01       	movw	r20, r14
    a948:	be 01       	movw	r22, r28
    a94a:	6f 5f       	subi	r22, 0xFF	; 255
    a94c:	7f 4f       	sbci	r23, 0xFF	; 255
    a94e:	81 2f       	mov	r24, r17
    a950:	0e 94 34 54 	call	0xa868	; 0xa868 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4520
  }
}
    a954:	0f 90       	pop	r0
    a956:	df 91       	pop	r29
    a958:	cf 91       	pop	r28
    a95a:	1f 91       	pop	r17
    a95c:	0f 91       	pop	r16
    a95e:	ff 90       	pop	r15
    a960:	ef 90       	pop	r14
    a962:	df 90       	pop	r13
    a964:	cf 90       	pop	r12
    a966:	08 95       	ret

0000a968 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z39display_element_show_rtds_info_dynamicsjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4228
    show_string(str1, x + 25, y + 40, 4, RED, WHITE, 0);
  }
}
/////
void display_element_show_rtds_info_dynamics(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    a968:	5f 92       	push	r5
    a96a:	6f 92       	push	r6
    a96c:	7f 92       	push	r7
    a96e:	8f 92       	push	r8
    a970:	9f 92       	push	r9
    a972:	af 92       	push	r10
    a974:	bf 92       	push	r11
    a976:	cf 92       	push	r12
    a978:	df 92       	push	r13
    a97a:	ef 92       	push	r14
    a97c:	ff 92       	push	r15
    a97e:	0f 93       	push	r16
    a980:	1f 93       	push	r17
    a982:	cf 93       	push	r28
    a984:	df 93       	push	r29
    a986:	cd b7       	in	r28, 0x3d	; 61
    a988:	de b7       	in	r29, 0x3e	; 62
    a98a:	cd 54       	subi	r28, 0x4D	; 77
    a98c:	d1 09       	sbc	r29, r1
    a98e:	0f b6       	in	r0, 0x3f	; 63
    a990:	f8 94       	cli
    a992:	de bf       	out	0x3e, r29	; 62
    a994:	0f be       	out	0x3f, r0	; 63
    a996:	cd bf       	out	0x3d, r28	; 61
    a998:	4c 01       	movw	r8, r24
    a99a:	5b 01       	movw	r10, r22
    a99c:	5e 2c       	mov	r5, r14
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    a99e:	10 92 c5 0d 	sts	0x0DC5, r1	; 0x800dc5 <my_lcd+0xb>
    a9a2:	10 92 c4 0d 	sts	0x0DC4, r1	; 0x800dc4 <my_lcd+0xa>
_Z39display_element_show_rtds_info_dynamicsjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4236
  char name[RTDS_DEVICE_STRING_LEN];
  float te;
  uint8_t last_update;
  uint8_t active;
  my_lcd.Set_Draw_color(BLACK);
  my_lcd.Draw_Rectangle(x, y, x + size_x , y + size_y);
    a9a6:	26 0f       	add	r18, r22
    a9a8:	37 1f       	adc	r19, r23
    a9aa:	48 0f       	add	r20, r24
    a9ac:	59 1f       	adc	r21, r25
    a9ae:	0e 94 5d 7c 	call	0xf8ba	; 0xf8ba <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.188]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4237
  remote_tds_get_complete(args2, &active, name);
    a9b2:	ae 01       	movw	r20, r28
    a9b4:	45 5c       	subi	r20, 0xC5	; 197
    a9b6:	5f 4f       	sbci	r21, 0xFF	; 255
    a9b8:	be 01       	movw	r22, r28
    a9ba:	63 5b       	subi	r22, 0xB3	; 179
    a9bc:	7f 4f       	sbci	r23, 0xFF	; 255
    a9be:	8e 2d       	mov	r24, r14
    a9c0:	0e 94 34 54 	call	0xa868	; 0xa868 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4238
  if (active == 1)
    a9c4:	2e 96       	adiw	r28, 0x0e	; 14
    a9c6:	8f ad       	ldd	r24, Y+63	; 0x3f
    a9c8:	2e 97       	sbiw	r28, 0x0e	; 14
    a9ca:	81 30       	cpi	r24, 0x01	; 1
    a9cc:	09 f0       	breq	.+2      	; 0xa9d0 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x68>
    a9ce:	c1 c0       	rjmp	.+386    	; 0xab52 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x1ea>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4241
  {
    /// nazev
    strcpy_P(str1, text_nazev);
    a9d0:	62 ed       	ldi	r22, 0xD2	; 210
    a9d2:	7e e2       	ldi	r23, 0x2E	; 46
    a9d4:	ce 01       	movw	r24, r28
    a9d6:	01 96       	adiw	r24, 0x01	; 1
    a9d8:	6c 01       	movw	r12, r24
    a9da:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4242
    show_string(str1, x + 5 , y + 10 , 2, BLACK, WHITE, 0);
    a9de:	34 01       	movw	r6, r8
    a9e0:	95 e0       	ldi	r25, 0x05	; 5
    a9e2:	69 0e       	add	r6, r25
    a9e4:	71 1c       	adc	r7, r1
    a9e6:	ee 24       	eor	r14, r14
    a9e8:	ea 94       	dec	r14
    a9ea:	fe 2c       	mov	r15, r14
    a9ec:	10 e0       	ldi	r17, 0x00	; 0
    a9ee:	00 e0       	ldi	r16, 0x00	; 0
    a9f0:	22 e0       	ldi	r18, 0x02	; 2
    a9f2:	a5 01       	movw	r20, r10
    a9f4:	46 5f       	subi	r20, 0xF6	; 246
    a9f6:	5f 4f       	sbci	r21, 0xFF	; 255
    a9f8:	b3 01       	movw	r22, r6
    a9fa:	c6 01       	movw	r24, r12
    a9fc:	0e 94 37 7d 	call	0xfa6e	; 0xfa6e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4243
    strcpy(str1, name);
    aa00:	be 01       	movw	r22, r28
    aa02:	65 5c       	subi	r22, 0xC5	; 197
    aa04:	7f 4f       	sbci	r23, 0xFF	; 255
    aa06:	c6 01       	movw	r24, r12
    aa08:	0e 94 70 af 	call	0x15ee0	; 0x15ee0 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4244
    show_string(str1, x + 20 , y + 30 , 2 , BLACK, WHITE, 0);
    aa0c:	b4 01       	movw	r22, r8
    aa0e:	6c 5e       	subi	r22, 0xEC	; 236
    aa10:	7f 4f       	sbci	r23, 0xFF	; 255
    aa12:	22 e0       	ldi	r18, 0x02	; 2
    aa14:	a5 01       	movw	r20, r10
    aa16:	42 5e       	subi	r20, 0xE2	; 226
    aa18:	5f 4f       	sbci	r21, 0xFF	; 255
    aa1a:	c6 01       	movw	r24, r12
    aa1c:	0e 94 37 7d 	call	0xfa6e	; 0xfa6e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]>
remote_tds_get_data():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2111
  }
}
int remote_tds_get_data(uint8_t idx)
{
  int temp = 0;
  if (idx < MAX_RTDS)
    aa20:	89 e0       	ldi	r24, 0x09	; 9
    aa22:	85 15       	cp	r24, r5
    aa24:	08 f4       	brcc	.+2      	; 0xaa28 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xc0>
    aa26:	ac c0       	rjmp	.+344    	; 0xab80 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x218>
    aa28:	85 2d       	mov	r24, r5
    aa2a:	0e 94 34 28 	call	0x5068	; 0x5068 <remote_tds_get_data(unsigned char) [clone .part.20]>
_Z39display_element_show_rtds_info_dynamicsjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4246
    strcpy_P(str1, text_nazev);
    show_string(str1, x + 5 , y + 10 , 2, BLACK, WHITE, 0);
    strcpy(str1, name);
    show_string(str1, x + 20 , y + 30 , 2 , BLACK, WHITE, 0);
    /// teplota
    te = remote_tds_get_data(args2) / 1000.0;
    aa2e:	bc 01       	movw	r22, r24
    aa30:	99 0f       	add	r25, r25
    aa32:	88 0b       	sbc	r24, r24
    aa34:	99 0b       	sbc	r25, r25
    aa36:	0e 94 6e ab 	call	0x156dc	; 0x156dc <__floatsisf>
    aa3a:	20 e0       	ldi	r18, 0x00	; 0
    aa3c:	30 e0       	ldi	r19, 0x00	; 0
    aa3e:	4a e7       	ldi	r20, 0x7A	; 122
    aa40:	54 e4       	ldi	r21, 0x44	; 68
    aa42:	0e 94 a1 ad 	call	0x15b42	; 0x15b42 <__divsf3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4247
    dtostrf(te, 4, 2, str1);
    aa46:	86 01       	movw	r16, r12
    aa48:	22 e0       	ldi	r18, 0x02	; 2
    aa4a:	44 e0       	ldi	r20, 0x04	; 4
    aa4c:	0e 94 93 a1 	call	0x14326	; 0x14326 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4248
    strcat(str1, "C");
    aa50:	62 ec       	ldi	r22, 0xC2	; 194
    aa52:	76 e0       	ldi	r23, 0x06	; 6
    aa54:	c6 01       	movw	r24, r12
    aa56:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4249
    strcpy_P(str2, current_temp_short);
    aa5a:	4e 01       	movw	r8, r28
    aa5c:	91 e2       	ldi	r25, 0x21	; 33
    aa5e:	89 0e       	add	r8, r25
    aa60:	91 1c       	adc	r9, r1
    aa62:	69 ec       	ldi	r22, 0xC9	; 201
    aa64:	7e e2       	ldi	r23, 0x2E	; 46
    aa66:	c4 01       	movw	r24, r8
    aa68:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4250
    strcat(str2, str1);
    aa6c:	b6 01       	movw	r22, r12
    aa6e:	c4 01       	movw	r24, r8
    aa70:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4251
    show_string(str2, x + 5, y + 60 , 2, BLACK, WHITE, 0);
    aa74:	ee 24       	eor	r14, r14
    aa76:	ea 94       	dec	r14
    aa78:	fe 2c       	mov	r15, r14
    aa7a:	10 e0       	ldi	r17, 0x00	; 0
    aa7c:	00 e0       	ldi	r16, 0x00	; 0
    aa7e:	22 e0       	ldi	r18, 0x02	; 2
    aa80:	a5 01       	movw	r20, r10
    aa82:	44 5c       	subi	r20, 0xC4	; 196
    aa84:	5f 4f       	sbci	r21, 0xFF	; 255
    aa86:	b3 01       	movw	r22, r6
    aa88:	c4 01       	movw	r24, r8
    aa8a:	0e 94 37 7d 	call	0xfa6e	; 0xfa6e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]>
remote_tds_get_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2121
  return temp;
}
uint8_t remote_tds_get_last_update(uint8_t idx)
{
  uint8_t last = 255;
  if (idx < MAX_RTDS)
    aa8e:	89 e0       	ldi	r24, 0x09	; 9
    aa90:	85 15       	cp	r24, r5
    aa92:	08 f4       	brcc	.+2      	; 0xaa96 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x12e>
    aa94:	78 c0       	rjmp	.+240    	; 0xab86 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x21e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2123
  {
    last = SRAM.readByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx));
    aa96:	93 e0       	ldi	r25, 0x03	; 3
    aa98:	59 9e       	mul	r5, r25
    aa9a:	b0 01       	movw	r22, r0
    aa9c:	11 24       	eor	r1, r1
    aa9e:	6a 59       	subi	r22, 0x9A	; 154
    aaa0:	7f 4f       	sbci	r23, 0xFF	; 255
    aaa2:	07 2e       	mov	r0, r23
    aaa4:	00 0c       	add	r0, r0
    aaa6:	88 0b       	sbc	r24, r24
    aaa8:	99 0b       	sbc	r25, r25
    aaaa:	0e 94 c6 82 	call	0x1058c	; 0x1058c <SRAM_23LC::readByte(unsigned long) [clone .constprop.179]>
    aaae:	58 2e       	mov	r5, r24
_Z39display_element_show_rtds_info_dynamicsjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4254
    strcpy_P(str2, current_temp_short);
    strcat(str2, str1);
    show_string(str2, x + 5, y + 60 , 2, BLACK, WHITE, 0);
    /// posledni aktualizace
    last_update = remote_tds_get_last_update(args2);
    strcpy_P(str2, text_last_update);
    aab0:	63 eb       	ldi	r22, 0xB3	; 179
    aab2:	7e e2       	ldi	r23, 0x2E	; 46
    aab4:	c4 01       	movw	r24, r8
    aab6:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4255
    sprintf(str1, "%s: %d", str2, last_update);
    aaba:	1f 92       	push	r1
    aabc:	5f 92       	push	r5
    aabe:	9f 92       	push	r9
    aac0:	8f 92       	push	r8
    aac2:	80 e9       	ldi	r24, 0x90	; 144
    aac4:	93 e0       	ldi	r25, 0x03	; 3
    aac6:	9f 93       	push	r25
    aac8:	8f 93       	push	r24
    aaca:	df 92       	push	r13
    aacc:	cf 92       	push	r12
    aace:	0e 94 d3 af 	call	0x15fa6	; 0x15fa6 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4256
    show_string(str1, x + 5, y + 80 , 1, BLACK, WHITE, 0);
    aad2:	ee 24       	eor	r14, r14
    aad4:	ea 94       	dec	r14
    aad6:	fe 2c       	mov	r15, r14
    aad8:	10 e0       	ldi	r17, 0x00	; 0
    aada:	00 e0       	ldi	r16, 0x00	; 0
    aadc:	21 e0       	ldi	r18, 0x01	; 1
    aade:	a5 01       	movw	r20, r10
    aae0:	40 5b       	subi	r20, 0xB0	; 176
    aae2:	5f 4f       	sbci	r21, 0xFF	; 255
    aae4:	b3 01       	movw	r22, r6
    aae6:	c6 01       	movw	r24, r12
    aae8:	0e 94 37 7d 	call	0xfa6e	; 0xfa6e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4258
    active = 1;
    if (last_update >= 250) active = 0;
    aaec:	0f b6       	in	r0, 0x3f	; 63
    aaee:	f8 94       	cli
    aaf0:	de bf       	out	0x3e, r29	; 62
    aaf2:	0f be       	out	0x3f, r0	; 63
    aaf4:	cd bf       	out	0x3d, r28	; 61
    aaf6:	99 ef       	ldi	r25, 0xF9	; 249
    aaf8:	95 15       	cp	r25, r5
    aafa:	08 f4       	brcc	.+2      	; 0xaafe <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x196>
    aafc:	47 c0       	rjmp	.+142    	; 0xab8c <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x224>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4257
    /// posledni aktualizace
    last_update = remote_tds_get_last_update(args2);
    strcpy_P(str2, text_last_update);
    sprintf(str1, "%s: %d", str2, last_update);
    show_string(str1, x + 5, y + 80 , 1, BLACK, WHITE, 0);
    active = 1;
    aafe:	81 e0       	ldi	r24, 0x01	; 1
    ab00:	2e 96       	adiw	r28, 0x0e	; 14
    ab02:	8f af       	std	Y+63, r24	; 0x3f
    ab04:	2e 97       	sbiw	r28, 0x0e	; 14
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4259
    if (last_update >= 250) active = 0;
    strcpy_P(str2, text_online);
    ab06:	6c ea       	ldi	r22, 0xAC	; 172
    ab08:	7e e2       	ldi	r23, 0x2E	; 46
    ab0a:	c4 01       	movw	r24, r8
    ab0c:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4260
    sprintf(str1, "%s: %d", str2, active);
    ab10:	2e 96       	adiw	r28, 0x0e	; 14
    ab12:	8f ad       	ldd	r24, Y+63	; 0x3f
    ab14:	2e 97       	sbiw	r28, 0x0e	; 14
    ab16:	1f 92       	push	r1
    ab18:	8f 93       	push	r24
    ab1a:	9f 92       	push	r9
    ab1c:	8f 92       	push	r8
    ab1e:	80 e9       	ldi	r24, 0x90	; 144
    ab20:	93 e0       	ldi	r25, 0x03	; 3
    ab22:	9f 93       	push	r25
    ab24:	8f 93       	push	r24
    ab26:	df 92       	push	r13
    ab28:	cf 92       	push	r12
    ab2a:	0e 94 d3 af 	call	0x15fa6	; 0x15fa6 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4261
    show_string(str1, x + 5, y + 100 , 2, BLACK, WHITE, 0);
    ab2e:	a5 01       	movw	r20, r10
    ab30:	4c 59       	subi	r20, 0x9C	; 156
    ab32:	5f 4f       	sbci	r21, 0xFF	; 255
    ab34:	ee 24       	eor	r14, r14
    ab36:	ea 94       	dec	r14
    ab38:	fe 2c       	mov	r15, r14
    ab3a:	10 e0       	ldi	r17, 0x00	; 0
    ab3c:	00 e0       	ldi	r16, 0x00	; 0
    ab3e:	22 e0       	ldi	r18, 0x02	; 2
    ab40:	b3 01       	movw	r22, r6
    ab42:	c6 01       	movw	r24, r12
    ab44:	0e 94 37 7d 	call	0xfa6e	; 0xfa6e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]>
    ab48:	0f b6       	in	r0, 0x3f	; 63
    ab4a:	f8 94       	cli
    ab4c:	de bf       	out	0x3e, r29	; 62
    ab4e:	0f be       	out	0x3f, r0	; 63
    ab50:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4263
  }
}
    ab52:	c3 5b       	subi	r28, 0xB3	; 179
    ab54:	df 4f       	sbci	r29, 0xFF	; 255
    ab56:	0f b6       	in	r0, 0x3f	; 63
    ab58:	f8 94       	cli
    ab5a:	de bf       	out	0x3e, r29	; 62
    ab5c:	0f be       	out	0x3f, r0	; 63
    ab5e:	cd bf       	out	0x3d, r28	; 61
    ab60:	df 91       	pop	r29
    ab62:	cf 91       	pop	r28
    ab64:	1f 91       	pop	r17
    ab66:	0f 91       	pop	r16
    ab68:	ff 90       	pop	r15
    ab6a:	ef 90       	pop	r14
    ab6c:	df 90       	pop	r13
    ab6e:	cf 90       	pop	r12
    ab70:	bf 90       	pop	r11
    ab72:	af 90       	pop	r10
    ab74:	9f 90       	pop	r9
    ab76:	8f 90       	pop	r8
    ab78:	7f 90       	pop	r7
    ab7a:	6f 90       	pop	r6
    ab7c:	5f 90       	pop	r5
    ab7e:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2110
    SRAM.writeByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx), 0);
  }
}
int remote_tds_get_data(uint8_t idx)
{
  int temp = 0;
    ab80:	90 e0       	ldi	r25, 0x00	; 0
    ab82:	80 e0       	ldi	r24, 0x00	; 0
    ab84:	54 cf       	rjmp	.-344    	; 0xaa2e <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xc6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2120
  }
  return temp;
}
uint8_t remote_tds_get_last_update(uint8_t idx)
{
  uint8_t last = 255;
    ab86:	55 24       	eor	r5, r5
    ab88:	5a 94       	dec	r5
    ab8a:	92 cf       	rjmp	.-220    	; 0xaab0 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x148>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4258
    last_update = remote_tds_get_last_update(args2);
    strcpy_P(str2, text_last_update);
    sprintf(str1, "%s: %d", str2, last_update);
    show_string(str1, x + 5, y + 80 , 1, BLACK, WHITE, 0);
    active = 1;
    if (last_update >= 250) active = 0;
    ab8c:	2e 96       	adiw	r28, 0x0e	; 14
    ab8e:	1f ae       	std	Y+63, r1	; 0x3f
    ab90:	2e 97       	sbiw	r28, 0x0e	; 14
    ab92:	b9 cf       	rjmp	.-142    	; 0xab06 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x19e>

0000ab94 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z27display_element_show_temp_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4125
  my_lcd.Draw_Rectangle(x, y, x + 244, y + 84);
}
///
/// funkce pro zobrazeni teploty
void display_element_show_temp_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    ab94:	2f 92       	push	r2
    ab96:	3f 92       	push	r3
    ab98:	4f 92       	push	r4
    ab9a:	5f 92       	push	r5
    ab9c:	6f 92       	push	r6
    ab9e:	7f 92       	push	r7
    aba0:	8f 92       	push	r8
    aba2:	9f 92       	push	r9
    aba4:	af 92       	push	r10
    aba6:	bf 92       	push	r11
    aba8:	cf 92       	push	r12
    abaa:	df 92       	push	r13
    abac:	ef 92       	push	r14
    abae:	ff 92       	push	r15
    abb0:	0f 93       	push	r16
    abb2:	1f 93       	push	r17
    abb4:	cf 93       	push	r28
    abb6:	df 93       	push	r29
    abb8:	cd b7       	in	r28, 0x3d	; 61
    abba:	de b7       	in	r29, 0x3e	; 62
    abbc:	cc 54       	subi	r28, 0x4C	; 76
    abbe:	d1 09       	sbc	r29, r1
    abc0:	0f b6       	in	r0, 0x3f	; 63
    abc2:	f8 94       	cli
    abc4:	de bf       	out	0x3e, r29	; 62
    abc6:	0f be       	out	0x3f, r0	; 63
    abc8:	cd bf       	out	0x3d, r28	; 61
    abca:	6c 01       	movw	r12, r24
    abcc:	5b 01       	movw	r10, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4130
  char str1[32];
  char str2[20];
  float te;
  uint8_t stat;
  strcpy_P(str1, current_temp);
    abce:	6d e7       	ldi	r22, 0x7D	; 125
    abd0:	7e e2       	ldi	r23, 0x2E	; 46
    abd2:	ce 01       	movw	r24, r28
    abd4:	01 96       	adiw	r24, 0x01	; 1
    abd6:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4131
  stat = get_global_temp(default_show_temp, str2, &te);
    abda:	30 90 a1 08 	lds	r3, 0x08A1	; 0x8008a1 <default_show_temp>
get_global_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4691
{
  struct_DDS18s20 tds;
  uint8_t cri = 0;
  uint8_t ret = 0;
  uint8_t active;
  strcpy_P(name, text_err);
    abde:	6f e8       	ldi	r22, 0x8F	; 143
    abe0:	7e e2       	ldi	r23, 0x2E	; 46
    abe2:	ce 01       	movw	r24, r28
    abe4:	c7 96       	adiw	r24, 0x37	; 55
    abe6:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
    abea:	71 2c       	mov	r7, r1
    abec:	61 2c       	mov	r6, r1
_Z27display_element_show_temp_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4688


uint8_t  get_global_temp(uint8_t device, char*name, float *temp)
{
  struct_DDS18s20 tds;
  uint8_t cri = 0;
    abee:	91 2c       	mov	r9, r1
get_global_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4701
      if (tds.used == 1)
      {
        if (cri == device)
        {
          strcpy(name, tds.name);
          if (status_tds18s20[idx].online == True)
    abf0:	1e e1       	ldi	r17, 0x1E	; 30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4695
  uint8_t active;
  strcpy_P(name, text_err);
  *temp = 0.0;

  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    if (get_tds18s20(idx, &tds) == 1)
    abf2:	be 01       	movw	r22, r28
    abf4:	6f 5d       	subi	r22, 0xDF	; 223
    abf6:	7f 4f       	sbci	r23, 0xFF	; 255
    abf8:	86 2d       	mov	r24, r6
    abfa:	0e 94 32 4e 	call	0x9c64	; 0x9c64 <get_tds18s20(unsigned char, struct_DDS18s20*)>
    abfe:	81 30       	cpi	r24, 0x01	; 1
    ac00:	09 f0       	breq	.+2      	; 0xac04 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x70>
    ac02:	90 c0       	rjmp	.+288    	; 0xad24 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x190>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4696
      if (tds.used == 1)
    ac04:	89 a1       	ldd	r24, Y+33	; 0x21
    ac06:	81 30       	cpi	r24, 0x01	; 1
    ac08:	09 f0       	breq	.+2      	; 0xac0c <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x78>
    ac0a:	8c c0       	rjmp	.+280    	; 0xad24 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x190>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4698
      {
        if (cri == device)
    ac0c:	39 10       	cpse	r3, r9
    ac0e:	89 c0       	rjmp	.+274    	; 0xad22 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x18e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4700
        {
          strcpy(name, tds.name);
    ac10:	be 01       	movw	r22, r28
    ac12:	63 5d       	subi	r22, 0xD3	; 211
    ac14:	7f 4f       	sbci	r23, 0xFF	; 255
    ac16:	ce 01       	movw	r24, r28
    ac18:	c7 96       	adiw	r24, 0x37	; 55
    ac1a:	0e 94 70 af 	call	0x15ee0	; 0x15ee0 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4701
          if (status_tds18s20[idx].online == True)
    ac1e:	16 9d       	mul	r17, r6
    ac20:	f0 01       	movw	r30, r0
    ac22:	17 9d       	mul	r17, r7
    ac24:	f0 0d       	add	r31, r0
    ac26:	11 24       	eor	r1, r1
    ac28:	e6 5e       	subi	r30, 0xE6	; 230
    ac2a:	f5 4f       	sbci	r31, 0xF5	; 245
    ac2c:	83 8d       	ldd	r24, Z+27	; 0x1b
    ac2e:	2d 96       	adiw	r28, 0x0d	; 13
    ac30:	8f af       	std	Y+63, r24	; 0x3f
    ac32:	2d 97       	sbiw	r28, 0x0d	; 13
    ac34:	81 30       	cpi	r24, 0x01	; 1
    ac36:	09 f0       	breq	.+2      	; 0xac3a <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xa6>
    ac38:	74 c0       	rjmp	.+232    	; 0xad22 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x18e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4703
          {
            *temp = status_tds18s20[idx].temp / 1000.0;
    ac3a:	65 81       	ldd	r22, Z+5	; 0x05
    ac3c:	76 81       	ldd	r23, Z+6	; 0x06
    ac3e:	07 2e       	mov	r0, r23
    ac40:	00 0c       	add	r0, r0
    ac42:	88 0b       	sbc	r24, r24
    ac44:	99 0b       	sbc	r25, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4721
      if (cri == device)
      {
        remote_tds_get_complete(idx, &active, name);
        if (remote_tds_get_last_update(idx) < 250)
        {
          *temp = remote_tds_get_data(idx) / 1000.0;
    ac46:	0e 94 6e ab 	call	0x156dc	; 0x156dc <__floatsisf>
    ac4a:	20 e0       	ldi	r18, 0x00	; 0
    ac4c:	30 e0       	ldi	r19, 0x00	; 0
    ac4e:	4a e7       	ldi	r20, 0x7A	; 122
    ac50:	54 e4       	ldi	r21, 0x44	; 68
    ac52:	0e 94 a1 ad 	call	0x15b42	; 0x15b42 <__divsf3>
    ac56:	1b 01       	movw	r2, r22
    ac58:	2c 01       	movw	r4, r24
_Z27display_element_show_temp_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4132
  char str2[20];
  float te;
  uint8_t stat;
  strcpy_P(str1, current_temp);
  stat = get_global_temp(default_show_temp, str2, &te);
  strcat(str1, str2);
    ac5a:	be 01       	movw	r22, r28
    ac5c:	69 5c       	subi	r22, 0xC9	; 201
    ac5e:	7f 4f       	sbci	r23, 0xFF	; 255
    ac60:	ce 01       	movw	r24, r28
    ac62:	01 96       	adiw	r24, 0x01	; 1
    ac64:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4133
  show_string(str1, x + 5, y + 5, 1, BLACK, WHITE, 0);
    ac68:	ee 24       	eor	r14, r14
    ac6a:	ea 94       	dec	r14
    ac6c:	fe 2c       	mov	r15, r14
    ac6e:	10 e0       	ldi	r17, 0x00	; 0
    ac70:	00 e0       	ldi	r16, 0x00	; 0
    ac72:	21 e0       	ldi	r18, 0x01	; 1
    ac74:	a5 01       	movw	r20, r10
    ac76:	4b 5f       	subi	r20, 0xFB	; 251
    ac78:	5f 4f       	sbci	r21, 0xFF	; 255
    ac7a:	b6 01       	movw	r22, r12
    ac7c:	6b 5f       	subi	r22, 0xFB	; 251
    ac7e:	7f 4f       	sbci	r23, 0xFF	; 255
    ac80:	ce 01       	movw	r24, r28
    ac82:	01 96       	adiw	r24, 0x01	; 1
    ac84:	0e 94 37 7d 	call	0xfa6e	; 0xfa6e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]>
    ac88:	35 01       	movw	r6, r10
    ac8a:	84 e1       	ldi	r24, 0x14	; 20
    ac8c:	68 0e       	add	r6, r24
    ac8e:	71 1c       	adc	r7, r1
    ac90:	46 01       	movw	r8, r12
    ac92:	84 e0       	ldi	r24, 0x04	; 4
    ac94:	88 0e       	add	r8, r24
    ac96:	91 1c       	adc	r9, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4134
  if (stat == 1)
    ac98:	2d 96       	adiw	r28, 0x0d	; 13
    ac9a:	8f ad       	ldd	r24, Y+63	; 0x3f
    ac9c:	2d 97       	sbiw	r28, 0x0d	; 13
    ac9e:	81 30       	cpi	r24, 0x01	; 1
    aca0:	09 f0       	breq	.+2      	; 0xaca4 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x110>
    aca2:	89 c0       	rjmp	.+274    	; 0xadb6 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x222>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4136
  {
    dtostrf(te, 4, 1, str1);
    aca4:	8e 01       	movw	r16, r28
    aca6:	0f 5f       	subi	r16, 0xFF	; 255
    aca8:	1f 4f       	sbci	r17, 0xFF	; 255
    acaa:	21 e0       	ldi	r18, 0x01	; 1
    acac:	44 e0       	ldi	r20, 0x04	; 4
    acae:	c2 01       	movw	r24, r4
    acb0:	b1 01       	movw	r22, r2
    acb2:	0e 94 93 a1 	call	0x14326	; 0x14326 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4137
    strcat(str1, "C");
    acb6:	62 ec       	ldi	r22, 0xC2	; 194
    acb8:	76 e0       	ldi	r23, 0x06	; 6
    acba:	c8 01       	movw	r24, r16
    acbc:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4138
    show_string(str1, x + 4, y + 20, 8, BLACK, WHITE, 0);
    acc0:	10 e0       	ldi	r17, 0x00	; 0
    acc2:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4143
  }
  else
  {
    strcpy_P(str1, text_err);
    show_string(str1, x + 4, y + 20, 8, RED, WHITE, 0);
    acc4:	28 e0       	ldi	r18, 0x08	; 8
    acc6:	a3 01       	movw	r20, r6
    acc8:	b4 01       	movw	r22, r8
    acca:	ce 01       	movw	r24, r28
    accc:	01 96       	adiw	r24, 0x01	; 1
    acce:	0e 94 37 7d 	call	0xfa6e	; 0xfa6e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    acd2:	10 92 c5 0d 	sts	0x0DC5, r1	; 0x800dc5 <my_lcd+0xb>
    acd6:	10 92 c4 0d 	sts	0x0DC4, r1	; 0x800dc4 <my_lcd+0xa>
_Z27display_element_show_temp_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4146
  }
  my_lcd.Set_Draw_color(BLACK);
  my_lcd.Draw_Rectangle(x, y, x + 244, y + 84);
    acda:	95 01       	movw	r18, r10
    acdc:	2c 5a       	subi	r18, 0xAC	; 172
    acde:	3f 4f       	sbci	r19, 0xFF	; 255
    ace0:	a6 01       	movw	r20, r12
    ace2:	4c 50       	subi	r20, 0x0C	; 12
    ace4:	5f 4f       	sbci	r21, 0xFF	; 255
    ace6:	b5 01       	movw	r22, r10
    ace8:	c6 01       	movw	r24, r12
    acea:	0e 94 5d 7c 	call	0xf8ba	; 0xf8ba <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.188]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4147
}
    acee:	c4 5b       	subi	r28, 0xB4	; 180
    acf0:	df 4f       	sbci	r29, 0xFF	; 255
    acf2:	0f b6       	in	r0, 0x3f	; 63
    acf4:	f8 94       	cli
    acf6:	de bf       	out	0x3e, r29	; 62
    acf8:	0f be       	out	0x3f, r0	; 63
    acfa:	cd bf       	out	0x3d, r28	; 61
    acfc:	df 91       	pop	r29
    acfe:	cf 91       	pop	r28
    ad00:	1f 91       	pop	r17
    ad02:	0f 91       	pop	r16
    ad04:	ff 90       	pop	r15
    ad06:	ef 90       	pop	r14
    ad08:	df 90       	pop	r13
    ad0a:	cf 90       	pop	r12
    ad0c:	bf 90       	pop	r11
    ad0e:	af 90       	pop	r10
    ad10:	9f 90       	pop	r9
    ad12:	8f 90       	pop	r8
    ad14:	7f 90       	pop	r7
    ad16:	6f 90       	pop	r6
    ad18:	5f 90       	pop	r5
    ad1a:	4f 90       	pop	r4
    ad1c:	3f 90       	pop	r3
    ad1e:	2f 90       	pop	r2
    ad20:	08 95       	ret
get_global_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4708
            *temp = status_tds18s20[idx].temp / 1000.0;
            ret = 1;
            goto get_global_temp_end;
          }
        }
        cri++;
    ad22:	93 94       	inc	r9
    ad24:	8f ef       	ldi	r24, 0xFF	; 255
    ad26:	68 1a       	sub	r6, r24
    ad28:	78 0a       	sbc	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4694
  uint8_t ret = 0;
  uint8_t active;
  strcpy_P(name, text_err);
  *temp = 0.0;

  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    ad2a:	86 e0       	ldi	r24, 0x06	; 6
    ad2c:	68 16       	cp	r6, r24
    ad2e:	71 04       	cpc	r7, r1
    ad30:	09 f0       	breq	.+2      	; 0xad34 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x1a0>
    ad32:	5f cf       	rjmp	.-322    	; 0xabf2 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x5e>
    ad34:	26 e6       	ldi	r18, 0x66	; 102
    ad36:	42 2e       	mov	r4, r18
    ad38:	51 2c       	mov	r5, r1
    ad3a:	61 2c       	mov	r6, r1
    ad3c:	71 2c       	mov	r7, r1
_Z27display_element_show_temp_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4711
          }
        }
        cri++;
      }

  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    ad3e:	81 2c       	mov	r8, r1
get_global_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4713
  {
    remote_tds_get_active(idx, &active);
    ad40:	be 01       	movw	r22, r28
    ad42:	65 5b       	subi	r22, 0xB5	; 181
    ad44:	7f 4f       	sbci	r23, 0xFF	; 255
    ad46:	88 2d       	mov	r24, r8
    ad48:	0e 94 ba 53 	call	0xa774	; 0xa774 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4714
    if (active == 1)
    ad4c:	2c 96       	adiw	r28, 0x0c	; 12
    ad4e:	8f ad       	ldd	r24, Y+63	; 0x3f
    ad50:	2c 97       	sbiw	r28, 0x0c	; 12
    ad52:	2d 96       	adiw	r28, 0x0d	; 13
    ad54:	8f af       	std	Y+63, r24	; 0x3f
    ad56:	2d 97       	sbiw	r28, 0x0d	; 13
    ad58:	81 30       	cpi	r24, 0x01	; 1
    ad5a:	d1 f4       	brne	.+52     	; 0xad90 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x1fc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4716
    {
      if (cri == device)
    ad5c:	39 10       	cpse	r3, r9
    ad5e:	17 c0       	rjmp	.+46     	; 0xad8e <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x1fa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4718
      {
        remote_tds_get_complete(idx, &active, name);
    ad60:	ae 01       	movw	r20, r28
    ad62:	49 5c       	subi	r20, 0xC9	; 201
    ad64:	5f 4f       	sbci	r21, 0xFF	; 255
    ad66:	be 01       	movw	r22, r28
    ad68:	65 5b       	subi	r22, 0xB5	; 181
    ad6a:	7f 4f       	sbci	r23, 0xFF	; 255
    ad6c:	88 2d       	mov	r24, r8
    ad6e:	0e 94 34 54 	call	0xa868	; 0xa868 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
remote_tds_get_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2123
uint8_t remote_tds_get_last_update(uint8_t idx)
{
  uint8_t last = 255;
  if (idx < MAX_RTDS)
  {
    last = SRAM.readByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx));
    ad72:	c3 01       	movw	r24, r6
    ad74:	b2 01       	movw	r22, r4
    ad76:	0e 94 c6 82 	call	0x1058c	; 0x1058c <SRAM_23LC::readByte(unsigned long) [clone .constprop.179]>
get_global_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4719
    if (active == 1)
    {
      if (cri == device)
      {
        remote_tds_get_complete(idx, &active, name);
        if (remote_tds_get_last_update(idx) < 250)
    ad7a:	8a 3f       	cpi	r24, 0xFA	; 250
    ad7c:	40 f4       	brcc	.+16     	; 0xad8e <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x1fa>
remote_tds_get_data():
    ad7e:	88 2d       	mov	r24, r8
    ad80:	0e 94 34 28 	call	0x5068	; 0x5068 <remote_tds_get_data(unsigned char) [clone .part.20]>
get_global_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4721
        {
          *temp = remote_tds_get_data(idx) / 1000.0;
    ad84:	bc 01       	movw	r22, r24
    ad86:	99 0f       	add	r25, r25
    ad88:	88 0b       	sbc	r24, r24
    ad8a:	99 0b       	sbc	r25, r25
    ad8c:	5c cf       	rjmp	.-328    	; 0xac46 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xb2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4726
          ret = 1;
          goto get_global_temp_end;
        }
      }
      cri++;
    ad8e:	93 94       	inc	r9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4711
          }
        }
        cri++;
      }

  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    ad90:	83 94       	inc	r8
    ad92:	83 e0       	ldi	r24, 0x03	; 3
    ad94:	48 0e       	add	r4, r24
    ad96:	51 1c       	adc	r5, r1
    ad98:	61 1c       	adc	r6, r1
    ad9a:	71 1c       	adc	r7, r1
    ad9c:	84 e8       	ldi	r24, 0x84	; 132
    ad9e:	48 16       	cp	r4, r24
    ada0:	51 04       	cpc	r5, r1
    ada2:	61 04       	cpc	r6, r1
    ada4:	71 04       	cpc	r7, r1
    ada6:	61 f6       	brne	.-104    	; 0xad40 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x1ac>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4692
  struct_DDS18s20 tds;
  uint8_t cri = 0;
  uint8_t ret = 0;
  uint8_t active;
  strcpy_P(name, text_err);
  *temp = 0.0;
    ada8:	21 2c       	mov	r2, r1
    adaa:	31 2c       	mov	r3, r1
    adac:	21 01       	movw	r4, r2
_Z27display_element_show_temp_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4689

uint8_t  get_global_temp(uint8_t device, char*name, float *temp)
{
  struct_DDS18s20 tds;
  uint8_t cri = 0;
  uint8_t ret = 0;
    adae:	2d 96       	adiw	r28, 0x0d	; 13
    adb0:	1f ae       	std	Y+63, r1	; 0x3f
    adb2:	2d 97       	sbiw	r28, 0x0d	; 13
    adb4:	52 cf       	rjmp	.-348    	; 0xac5a <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xc6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4142
    strcat(str1, "C");
    show_string(str1, x + 4, y + 20, 8, BLACK, WHITE, 0);
  }
  else
  {
    strcpy_P(str1, text_err);
    adb6:	6f e8       	ldi	r22, 0x8F	; 143
    adb8:	7e e2       	ldi	r23, 0x2E	; 46
    adba:	ce 01       	movw	r24, r28
    adbc:	01 96       	adiw	r24, 0x01	; 1
    adbe:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4143
    show_string(str1, x + 4, y + 20, 8, RED, WHITE, 0);
    adc2:	ee 24       	eor	r14, r14
    adc4:	ea 94       	dec	r14
    adc6:	fe 2c       	mov	r15, r14
    adc8:	00 e0       	ldi	r16, 0x00	; 0
    adca:	18 ef       	ldi	r17, 0xF8	; 248
    adcc:	7b cf       	rjmp	.-266    	; 0xacc4 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x130>

0000adce <send_mqtt_remote_tds_status()>:
_Z27send_mqtt_remote_tds_statusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3197
  }
*/
///
///
void send_mqtt_remote_tds_status(void)
{
    adce:	cf 92       	push	r12
    add0:	df 92       	push	r13
    add2:	ef 92       	push	r14
    add4:	ff 92       	push	r15
    add6:	1f 93       	push	r17
    add8:	cf 93       	push	r28
    adda:	df 93       	push	r29
    addc:	cd b7       	in	r28, 0x3d	; 61
    adde:	de b7       	in	r29, 0x3e	; 62
    ade0:	63 97       	sbiw	r28, 0x13	; 19
    ade2:	0f b6       	in	r0, 0x3f	; 63
    ade4:	f8 94       	cli
    ade6:	de bf       	out	0x3e, r29	; 62
    ade8:	0f be       	out	0x3f, r0	; 63
    adea:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3198
  uint8_t active = 0;
    adec:	1b 8a       	std	Y+19, r1	; 0x13
    adee:	86 e6       	ldi	r24, 0x66	; 102
    adf0:	c8 2e       	mov	r12, r24
    adf2:	d1 2c       	mov	r13, r1
    adf4:	e1 2c       	mov	r14, r1
    adf6:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3200
  char payload[RTDS_DEVICE_STRING_LEN];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    adf8:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3202
  {
    remote_tds_get_complete(idx, &active, payload);
    adfa:	ae 01       	movw	r20, r28
    adfc:	4f 5f       	subi	r20, 0xFF	; 255
    adfe:	5f 4f       	sbci	r21, 0xFF	; 255
    ae00:	be 01       	movw	r22, r28
    ae02:	6d 5e       	subi	r22, 0xED	; 237
    ae04:	7f 4f       	sbci	r23, 0xFF	; 255
    ae06:	81 2f       	mov	r24, r17
    ae08:	0e 94 34 54 	call	0xa868	; 0xa868 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3204
    /// odeslu pouze pokud je neco aktivni, jinak ne
    if (active == 1)
    ae0c:	8b 89       	ldd	r24, Y+19	; 0x13
    ae0e:	81 30       	cpi	r24, 0x01	; 1
    ae10:	09 f0       	breq	.+2      	; 0xae14 <send_mqtt_remote_tds_status()+0x46>
    ae12:	44 c0       	rjmp	.+136    	; 0xae9c <send_mqtt_remote_tds_status()+0xce>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3206
    {
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "name", payload);
    ae14:	9e 01       	movw	r18, r28
    ae16:	2f 5f       	subi	r18, 0xFF	; 255
    ae18:	3f 4f       	sbci	r19, 0xFF	; 255
    ae1a:	48 ea       	ldi	r20, 0xA8	; 168
    ae1c:	53 e0       	ldi	r21, 0x03	; 3
    ae1e:	61 2f       	mov	r22, r17
    ae20:	8d ea       	ldi	r24, 0xAD	; 173
    ae22:	93 e0       	ldi	r25, 0x03	; 3
    ae24:	0e 94 be 8e 	call	0x11d7c	; 0x11d7c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.132]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3207
      itoa(active, payload, 10);
    ae28:	8b 89       	ldd	r24, Y+19	; 0x13
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    ae2a:	4a e0       	ldi	r20, 0x0A	; 10
    ae2c:	be 01       	movw	r22, r28
    ae2e:	6f 5f       	subi	r22, 0xFF	; 255
    ae30:	7f 4f       	sbci	r23, 0xFF	; 255
    ae32:	90 e0       	ldi	r25, 0x00	; 0
    ae34:	0e 94 27 a3 	call	0x1464e	; 0x1464e <__itoa_ncheck>
_Z27send_mqtt_remote_tds_statusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3208
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "active", payload);
    ae38:	9e 01       	movw	r18, r28
    ae3a:	2f 5f       	subi	r18, 0xFF	; 255
    ae3c:	3f 4f       	sbci	r19, 0xFF	; 255
    ae3e:	42 eb       	ldi	r20, 0xB2	; 178
    ae40:	53 e0       	ldi	r21, 0x03	; 3
    ae42:	61 2f       	mov	r22, r17
    ae44:	8d ea       	ldi	r24, 0xAD	; 173
    ae46:	93 e0       	ldi	r25, 0x03	; 3
    ae48:	0e 94 be 8e 	call	0x11d7c	; 0x11d7c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.132]>
remote_tds_get_data():
    ae4c:	81 2f       	mov	r24, r17
    ae4e:	0e 94 34 28 	call	0x5068	; 0x5068 <remote_tds_get_data(unsigned char) [clone .part.20]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    ae52:	4a e0       	ldi	r20, 0x0A	; 10
    ae54:	be 01       	movw	r22, r28
    ae56:	6f 5f       	subi	r22, 0xFF	; 255
    ae58:	7f 4f       	sbci	r23, 0xFF	; 255
    ae5a:	0e 94 27 a3 	call	0x1464e	; 0x1464e <__itoa_ncheck>
_Z27send_mqtt_remote_tds_statusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3210
      itoa(remote_tds_get_data(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "temp", payload);
    ae5e:	9e 01       	movw	r18, r28
    ae60:	2f 5f       	subi	r18, 0xFF	; 255
    ae62:	3f 4f       	sbci	r19, 0xFF	; 255
    ae64:	49 eb       	ldi	r20, 0xB9	; 185
    ae66:	53 e0       	ldi	r21, 0x03	; 3
    ae68:	61 2f       	mov	r22, r17
    ae6a:	8d ea       	ldi	r24, 0xAD	; 173
    ae6c:	93 e0       	ldi	r25, 0x03	; 3
    ae6e:	0e 94 be 8e 	call	0x11d7c	; 0x11d7c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.132]>
remote_tds_get_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2123
uint8_t remote_tds_get_last_update(uint8_t idx)
{
  uint8_t last = 255;
  if (idx < MAX_RTDS)
  {
    last = SRAM.readByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx));
    ae72:	c7 01       	movw	r24, r14
    ae74:	b6 01       	movw	r22, r12
    ae76:	0e 94 c6 82 	call	0x1058c	; 0x1058c <SRAM_23LC::readByte(unsigned long) [clone .constprop.179]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    ae7a:	4a e0       	ldi	r20, 0x0A	; 10
    ae7c:	be 01       	movw	r22, r28
    ae7e:	6f 5f       	subi	r22, 0xFF	; 255
    ae80:	7f 4f       	sbci	r23, 0xFF	; 255
    ae82:	90 e0       	ldi	r25, 0x00	; 0
    ae84:	0e 94 27 a3 	call	0x1464e	; 0x1464e <__itoa_ncheck>
_Z27send_mqtt_remote_tds_statusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3212
      itoa(active, payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "active", payload);
      itoa(remote_tds_get_data(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "temp", payload);
      itoa(remote_tds_get_last_update(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "last_update", payload);
    ae88:	9e 01       	movw	r18, r28
    ae8a:	2f 5f       	subi	r18, 0xFF	; 255
    ae8c:	3f 4f       	sbci	r19, 0xFF	; 255
    ae8e:	4e eb       	ldi	r20, 0xBE	; 190
    ae90:	53 e0       	ldi	r21, 0x03	; 3
    ae92:	61 2f       	mov	r22, r17
    ae94:	8d ea       	ldi	r24, 0xAD	; 173
    ae96:	93 e0       	ldi	r25, 0x03	; 3
    ae98:	0e 94 be 8e 	call	0x11d7c	; 0x11d7c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.132]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3200
///
void send_mqtt_remote_tds_status(void)
{
  uint8_t active = 0;
  char payload[RTDS_DEVICE_STRING_LEN];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    ae9c:	1f 5f       	subi	r17, 0xFF	; 255
    ae9e:	83 e0       	ldi	r24, 0x03	; 3
    aea0:	c8 0e       	add	r12, r24
    aea2:	d1 1c       	adc	r13, r1
    aea4:	e1 1c       	adc	r14, r1
    aea6:	f1 1c       	adc	r15, r1
    aea8:	84 e8       	ldi	r24, 0x84	; 132
    aeaa:	c8 16       	cp	r12, r24
    aeac:	d1 04       	cpc	r13, r1
    aeae:	e1 04       	cpc	r14, r1
    aeb0:	f1 04       	cpc	r15, r1
    aeb2:	09 f0       	breq	.+2      	; 0xaeb6 <send_mqtt_remote_tds_status()+0xe8>
    aeb4:	a2 cf       	rjmp	.-188    	; 0xadfa <send_mqtt_remote_tds_status()+0x2c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3215
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "temp", payload);
      itoa(remote_tds_get_last_update(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "last_update", payload);
    }
  }
}
    aeb6:	63 96       	adiw	r28, 0x13	; 19
    aeb8:	0f b6       	in	r0, 0x3f	; 63
    aeba:	f8 94       	cli
    aebc:	de bf       	out	0x3e, r29	; 62
    aebe:	0f be       	out	0x3f, r0	; 63
    aec0:	cd bf       	out	0x3d, r28	; 61
    aec2:	df 91       	pop	r29
    aec4:	cf 91       	pop	r28
    aec6:	1f 91       	pop	r17
    aec8:	ff 90       	pop	r15
    aeca:	ef 90       	pop	r14
    aecc:	df 90       	pop	r13
    aece:	cf 90       	pop	r12
    aed0:	08 95       	ret

0000aed2 <remote_tds_name_exist(char*)>:
_Z21remote_tds_name_existPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2086
   navratove hodnoty
   255 ... nenalezeno
   1..MAX_RTDS je idx bunky, kde mame tento nazev ulozen
*/
uint8_t remote_tds_name_exist(char *name)
{
    aed2:	ef 92       	push	r14
    aed4:	ff 92       	push	r15
    aed6:	0f 93       	push	r16
    aed8:	1f 93       	push	r17
    aeda:	cf 93       	push	r28
    aedc:	df 93       	push	r29
    aede:	cd b7       	in	r28, 0x3d	; 61
    aee0:	de b7       	in	r29, 0x3e	; 62
    aee2:	63 97       	sbiw	r28, 0x13	; 19
    aee4:	0f b6       	in	r0, 0x3f	; 63
    aee6:	f8 94       	cli
    aee8:	de bf       	out	0x3e, r29	; 62
    aeea:	0f be       	out	0x3f, r0	; 63
    aeec:	cd bf       	out	0x3d, r28	; 61
    aeee:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2090
  uint8_t active;
  uint8_t found = 255;
  char tmp_name[RTDS_DEVICE_STRING_LEN];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    aef0:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2088
   1..MAX_RTDS je idx bunky, kde mame tento nazev ulozen
*/
uint8_t remote_tds_name_exist(char *name)
{
  uint8_t active;
  uint8_t found = 255;
    aef2:	0f ef       	ldi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2092
  char tmp_name[RTDS_DEVICE_STRING_LEN];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
  {
    remote_tds_get_complete(idx, &active, tmp_name);
    aef4:	ae 01       	movw	r20, r28
    aef6:	4f 5f       	subi	r20, 0xFF	; 255
    aef8:	5f 4f       	sbci	r21, 0xFF	; 255
    aefa:	be 01       	movw	r22, r28
    aefc:	6d 5e       	subi	r22, 0xED	; 237
    aefe:	7f 4f       	sbci	r23, 0xFF	; 255
    af00:	81 2f       	mov	r24, r17
    af02:	0e 94 34 54 	call	0xa868	; 0xa868 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2093
    if (strcmp(name, tmp_name) == 0)
    af06:	be 01       	movw	r22, r28
    af08:	6f 5f       	subi	r22, 0xFF	; 255
    af0a:	7f 4f       	sbci	r23, 0xFF	; 255
    af0c:	c7 01       	movw	r24, r14
    af0e:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    af12:	89 2b       	or	r24, r25
    af14:	09 f4       	brne	.+2      	; 0xaf18 <remote_tds_name_exist(char*)+0x46>
    af16:	01 2f       	mov	r16, r17
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2090
uint8_t remote_tds_name_exist(char *name)
{
  uint8_t active;
  uint8_t found = 255;
  char tmp_name[RTDS_DEVICE_STRING_LEN];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    af18:	1f 5f       	subi	r17, 0xFF	; 255
    af1a:	1a 30       	cpi	r17, 0x0A	; 10
    af1c:	59 f7       	brne	.-42     	; 0xaef4 <remote_tds_name_exist(char*)+0x22>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2097
    remote_tds_get_complete(idx, &active, tmp_name);
    if (strcmp(name, tmp_name) == 0)
      found = idx;
  }
  return found;
}
    af1e:	80 2f       	mov	r24, r16
    af20:	63 96       	adiw	r28, 0x13	; 19
    af22:	0f b6       	in	r0, 0x3f	; 63
    af24:	f8 94       	cli
    af26:	de bf       	out	0x3e, r29	; 62
    af28:	0f be       	out	0x3f, r0	; 63
    af2a:	cd bf       	out	0x3d, r28	; 61
    af2c:	df 91       	pop	r29
    af2e:	cf 91       	pop	r28
    af30:	1f 91       	pop	r17
    af32:	0f 91       	pop	r16
    af34:	ff 90       	pop	r15
    af36:	ef 90       	pop	r14
    af38:	08 95       	ret

0000af3a <menu_rtds_update_name(unsigned char, unsigned char)>:
_Z21menu_rtds_update_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4652
      remote_tds_subscibe_topic(idx);
    }
}

void menu_rtds_update_name(uint8_t args1, uint8_t args2)
{
    af3a:	1f 93       	push	r17
    af3c:	cf 93       	push	r28
    af3e:	df 93       	push	r29
    af40:	cd b7       	in	r28, 0x3d	; 61
    af42:	de b7       	in	r29, 0x3e	; 62
    af44:	62 97       	sbiw	r28, 0x12	; 18
    af46:	0f b6       	in	r0, 0x3f	; 63
    af48:	f8 94       	cli
    af4a:	de bf       	out	0x3e, r29	; 62
    af4c:	0f be       	out	0x3f, r0	; 63
    af4e:	cd bf       	out	0x3d, r28	; 61
display_element_get_string_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1614
  dialog_set_string_args = idx;
}

uint8_t display_element_get_string_args(void)
{
  return dialog_set_string_args;
    af50:	10 91 e2 08 	lds	r17, 0x08E2	; 0x8008e2 <dialog_set_string_args>
display_element_get_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1619
}

void display_element_get_string(char *str)
{
  strcpy(str, dialog_set_string);
    af54:	62 ed       	ldi	r22, 0xD2	; 210
    af56:	78 e0       	ldi	r23, 0x08	; 8
    af58:	ce 01       	movw	r24, r28
    af5a:	01 96       	adiw	r24, 0x01	; 1
    af5c:	0e 94 70 af 	call	0x15ee0	; 0x15ee0 <strcpy>
_Z21menu_rtds_update_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4657
{
  char name[RTDS_DEVICE_STRING_LEN];
  uint8_t idx = display_element_get_string_args();
  display_element_get_string(name);
  //printf("update %s, %d\n", name, idx);
  if (strlen(name) > 0)
    af60:	89 81       	ldd	r24, Y+1	; 0x01
    af62:	88 23       	and	r24, r24
    af64:	71 f0       	breq	.+28     	; 0xaf82 <menu_rtds_update_name(unsigned char, unsigned char)+0x48>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4659
  {
    if (remote_tds_name_exist(name) == 255)
    af66:	ce 01       	movw	r24, r28
    af68:	01 96       	adiw	r24, 0x01	; 1
    af6a:	0e 94 69 57 	call	0xaed2	; 0xaed2 <remote_tds_name_exist(char*)>
    af6e:	8f 3f       	cpi	r24, 0xFF	; 255
    af70:	41 f4       	brne	.+16     	; 0xaf82 <menu_rtds_update_name(unsigned char, unsigned char)+0x48>
remote_tds_set_name():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1997
}
/// nastavi topic
void remote_tds_set_name(uint8_t idx,  char *name)
{
  char t;
  if (idx < MAX_RTDS)
    af72:	1a 30       	cpi	r17, 0x0A	; 10
    af74:	30 f4       	brcc	.+12     	; 0xaf82 <menu_rtds_update_name(unsigned char, unsigned char)+0x48>
    af76:	be 01       	movw	r22, r28
    af78:	6f 5f       	subi	r22, 0xFF	; 255
    af7a:	7f 4f       	sbci	r23, 0xFF	; 255
    af7c:	81 2f       	mov	r24, r17
    af7e:	0e 94 b5 4d 	call	0x9b6a	; 0x9b6a <remote_tds_set_name(unsigned char, char*) [clone .part.16]>
_Z21menu_rtds_update_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4662
  if (strlen(name) > 0)
  {
    if (remote_tds_name_exist(name) == 255)
      remote_tds_set_name(idx, name);
  }
}
    af82:	62 96       	adiw	r28, 0x12	; 18
    af84:	0f b6       	in	r0, 0x3f	; 63
    af86:	f8 94       	cli
    af88:	de bf       	out	0x3e, r29	; 62
    af8a:	0f be       	out	0x3f, r0	; 63
    af8c:	cd bf       	out	0x3d, r28	; 61
    af8e:	df 91       	pop	r29
    af90:	cf 91       	pop	r28
    af92:	1f 91       	pop	r17
    af94:	08 95       	ret

0000af96 <remote_tds_subscibe_topic(unsigned char)>:
_Z25remote_tds_subscibe_topich():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2035
/// funkce pro nastaveni odebirani topicu vzdalenych cidel
/*
  idx - index nazvu topicu, ktery si chci subscribnout/unsubscribnout
*/
void remote_tds_subscibe_topic(uint8_t idx)
{
    af96:	cf 93       	push	r28
    af98:	df 93       	push	r29
    af9a:	cd b7       	in	r28, 0x3d	; 61
    af9c:	de b7       	in	r29, 0x3e	; 62
    af9e:	c1 58       	subi	r28, 0x81	; 129
    afa0:	d1 09       	sbc	r29, r1
    afa2:	0f b6       	in	r0, 0x3f	; 63
    afa4:	f8 94       	cli
    afa6:	de bf       	out	0x3e, r29	; 62
    afa8:	0f be       	out	0x3f, r0	; 63
    afaa:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2038
  char tmp1[64];
  char tmp2[64];
  uint8_t active = 0;
    afac:	cf 57       	subi	r28, 0x7F	; 127
    afae:	df 4f       	sbci	r29, 0xFF	; 255
    afb0:	18 82       	st	Y, r1
    afb2:	c1 58       	subi	r28, 0x81	; 129
    afb4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2039
  remote_tds_get_complete(idx, &active, tmp1);
    afb6:	ae 01       	movw	r20, r28
    afb8:	4f 5f       	subi	r20, 0xFF	; 255
    afba:	5f 4f       	sbci	r21, 0xFF	; 255
    afbc:	be 01       	movw	r22, r28
    afbe:	6f 57       	subi	r22, 0x7F	; 127
    afc0:	7f 4f       	sbci	r23, 0xFF	; 255
    afc2:	0e 94 34 54 	call	0xa868	; 0xa868 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2040
  if (active == 1)
    afc6:	cf 57       	subi	r28, 0x7F	; 127
    afc8:	df 4f       	sbci	r29, 0xFF	; 255
    afca:	88 81       	ld	r24, Y
    afcc:	c1 58       	subi	r28, 0x81	; 129
    afce:	d0 40       	sbci	r29, 0x00	; 0
    afd0:	81 30       	cpi	r24, 0x01	; 1
    afd2:	a1 f4       	brne	.+40     	; 0xaffc <remote_tds_subscibe_topic(unsigned char)+0x66>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2042
  {
    strcpy(tmp2, "/rtds/");
    afd4:	6a ec       	ldi	r22, 0xCA	; 202
    afd6:	73 e0       	ldi	r23, 0x03	; 3
    afd8:	ce 01       	movw	r24, r28
    afda:	8f 5b       	subi	r24, 0xBF	; 191
    afdc:	9f 4f       	sbci	r25, 0xFF	; 255
    afde:	0e 94 70 af 	call	0x15ee0	; 0x15ee0 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2043
    strcat(tmp2, tmp1);
    afe2:	be 01       	movw	r22, r28
    afe4:	6f 5f       	subi	r22, 0xFF	; 255
    afe6:	7f 4f       	sbci	r23, 0xFF	; 255
    afe8:	ce 01       	movw	r24, r28
    afea:	8f 5b       	subi	r24, 0xBF	; 191
    afec:	9f 4f       	sbci	r25, 0xFF	; 255
    afee:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2044
    mqtt_client.subscribe(tmp2);
    aff2:	ce 01       	movw	r24, r28
    aff4:	8f 5b       	subi	r24, 0xBF	; 191
    aff6:	9f 4f       	sbci	r25, 0xFF	; 255
    aff8:	0e 94 1c 8e 	call	0x11c38	; 0x11c38 <PubSubClient::subscribe(char const*) [clone .constprop.146]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2046
  }
}
    affc:	cf 57       	subi	r28, 0x7F	; 127
    affe:	df 4f       	sbci	r29, 0xFF	; 255
    b000:	0f b6       	in	r0, 0x3f	; 63
    b002:	f8 94       	cli
    b004:	de bf       	out	0x3e, r29	; 62
    b006:	0f be       	out	0x3f, r0	; 63
    b008:	cd bf       	out	0x3d, r28	; 61
    b00a:	df 91       	pop	r29
    b00c:	cf 91       	pop	r28
    b00e:	08 95       	ret

0000b010 <menu_rtds_create_name(unsigned char, unsigned char)>:
_Z21menu_rtds_create_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4637

}


void menu_rtds_create_name(uint8_t args1, uint8_t args2)
{
    b010:	1f 93       	push	r17
    b012:	cf 93       	push	r28
    b014:	df 93       	push	r29
    b016:	cd b7       	in	r28, 0x3d	; 61
    b018:	de b7       	in	r29, 0x3e	; 62
    b01a:	62 97       	sbiw	r28, 0x12	; 18
    b01c:	0f b6       	in	r0, 0x3f	; 63
    b01e:	f8 94       	cli
    b020:	de bf       	out	0x3e, r29	; 62
    b022:	0f be       	out	0x3f, r0	; 63
    b024:	cd bf       	out	0x3d, r28	; 61
display_element_get_string_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1614
  dialog_set_string_args = idx;
}

uint8_t display_element_get_string_args(void)
{
  return dialog_set_string_args;
    b026:	10 91 e2 08 	lds	r17, 0x08E2	; 0x8008e2 <dialog_set_string_args>
display_element_get_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1619
}

void display_element_get_string(char *str)
{
  strcpy(str, dialog_set_string);
    b02a:	62 ed       	ldi	r22, 0xD2	; 210
    b02c:	78 e0       	ldi	r23, 0x08	; 8
    b02e:	ce 01       	movw	r24, r28
    b030:	01 96       	adiw	r24, 0x01	; 1
    b032:	0e 94 70 af 	call	0x15ee0	; 0x15ee0 <strcpy>
_Z21menu_rtds_create_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4643
  char name[RTDS_DEVICE_STRING_LEN];
  uint8_t active = 1;
  uint8_t idx = display_element_get_string_args();
  display_element_get_string(name);
  //printf("create %s, %d\n", name, idx);
  if (strlen(name) > 0)
    b036:	89 81       	ldd	r24, Y+1	; 0x01
    b038:	88 23       	and	r24, r24
    b03a:	81 f0       	breq	.+32     	; 0xb05c <menu_rtds_create_name(unsigned char, unsigned char)+0x4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4644
    if (remote_tds_name_exist(name) == 255)
    b03c:	ce 01       	movw	r24, r28
    b03e:	01 96       	adiw	r24, 0x01	; 1
    b040:	0e 94 69 57 	call	0xaed2	; 0xaed2 <remote_tds_name_exist(char*)>
    b044:	8f 3f       	cpi	r24, 0xFF	; 255
    b046:	51 f4       	brne	.+20     	; 0xb05c <menu_rtds_create_name(unsigned char, unsigned char)+0x4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4646
    {
      remote_tds_set_complete(idx, active, name);
    b048:	ae 01       	movw	r20, r28
    b04a:	4f 5f       	subi	r20, 0xFF	; 255
    b04c:	5f 4f       	sbci	r21, 0xFF	; 255
    b04e:	61 e0       	ldi	r22, 0x01	; 1
    b050:	81 2f       	mov	r24, r17
    b052:	0e 94 dc 4d 	call	0x9bb8	; 0x9bb8 <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4647
      remote_tds_subscibe_topic(idx);
    b056:	81 2f       	mov	r24, r17
    b058:	0e 94 cb 57 	call	0xaf96	; 0xaf96 <remote_tds_subscibe_topic(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4649
    }
}
    b05c:	62 96       	adiw	r28, 0x12	; 18
    b05e:	0f b6       	in	r0, 0x3f	; 63
    b060:	f8 94       	cli
    b062:	de bf       	out	0x3e, r29	; 62
    b064:	0f be       	out	0x3f, r0	; 63
    b066:	cd bf       	out	0x3d, r28	; 61
    b068:	df 91       	pop	r29
    b06a:	cf 91       	pop	r28
    b06c:	1f 91       	pop	r17
    b06e:	08 95       	ret

0000b070 <click_rtds_subscribe(unsigned char, unsigned char)>:
_Z20click_rtds_subscribehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4534
  remote_tds_clear(args2);
  MenuHistoryPrevMenu();
}
////
void click_rtds_subscribe(uint8_t args1, uint8_t idx)
{
    b070:	86 2f       	mov	r24, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4536
  //printf("prihlasuji %d %d\n", args1, idx);
  remote_tds_subscibe_topic(idx);
    b072:	0c 94 cb 57 	jmp	0xaf96	; 0xaf96 <remote_tds_subscibe_topic(unsigned char)>

0000b076 <mqtt_callback(char*, unsigned char*, unsigned int)>:
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2236
   topic - ukazatel na nazev topicu
   payload - ukazatel na pole prichozich dat
   length - pocet prichozich dat
*/
void mqtt_callback(char* topic, byte * payload, unsigned int length)
{
    b076:	2f 92       	push	r2
    b078:	3f 92       	push	r3
    b07a:	4f 92       	push	r4
    b07c:	5f 92       	push	r5
    b07e:	6f 92       	push	r6
    b080:	7f 92       	push	r7
    b082:	8f 92       	push	r8
    b084:	9f 92       	push	r9
    b086:	af 92       	push	r10
    b088:	bf 92       	push	r11
    b08a:	cf 92       	push	r12
    b08c:	df 92       	push	r13
    b08e:	ef 92       	push	r14
    b090:	ff 92       	push	r15
    b092:	0f 93       	push	r16
    b094:	1f 93       	push	r17
    b096:	cf 93       	push	r28
    b098:	df 93       	push	r29
    b09a:	cd b7       	in	r28, 0x3d	; 61
    b09c:	de b7       	in	r29, 0x3e	; 62
    b09e:	cc 52       	subi	r28, 0x2C	; 44
    b0a0:	d1 40       	sbci	r29, 0x01	; 1
    b0a2:	0f b6       	in	r0, 0x3f	; 63
    b0a4:	f8 94       	cli
    b0a6:	de bf       	out	0x3e, r29	; 62
    b0a8:	0f be       	out	0x3f, r0	; 63
    b0aa:	cd bf       	out	0x3d, r28	; 61
    b0ac:	4c 01       	movw	r8, r24
__base_ctor ():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:25
 */

#include "NTPClient.h"
#include "time.h"

NTPClient::NTPClient(UDP& udp) {
    b0ae:	1b 82       	std	Y+3, r1	; 0x03
    b0b0:	81 ed       	ldi	r24, 0xD1	; 209
    b0b2:	93 e0       	ldi	r25, 0x03	; 3
    b0b4:	9d 83       	std	Y+5, r25	; 0x05
    b0b6:	8c 83       	std	Y+4, r24	; 0x04
    b0b8:	89 e3       	ldi	r24, 0x39	; 57
    b0ba:	95 e0       	ldi	r25, 0x05	; 5
    b0bc:	9f 83       	std	Y+7, r25	; 0x07
    b0be:	8e 83       	std	Y+6, r24	; 0x06
    b0c0:	18 86       	std	Y+8, r1	; 0x08
    b0c2:	19 86       	std	Y+9, r1	; 0x09
    b0c4:	1a 86       	std	Y+10, r1	; 0x0a
    b0c6:	1b 86       	std	Y+11, r1	; 0x0b
    b0c8:	80 e6       	ldi	r24, 0x60	; 96
    b0ca:	9a ee       	ldi	r25, 0xEA	; 234
    b0cc:	a0 e0       	ldi	r26, 0x00	; 0
    b0ce:	b0 e0       	ldi	r27, 0x00	; 0
    b0d0:	8c 87       	std	Y+12, r24	; 0x0c
    b0d2:	9d 87       	std	Y+13, r25	; 0x0d
    b0d4:	ae 87       	std	Y+14, r26	; 0x0e
    b0d6:	bf 87       	std	Y+15, r27	; 0x0f
    b0d8:	18 8a       	std	Y+16, r1	; 0x10
    b0da:	19 8a       	std	Y+17, r1	; 0x11
    b0dc:	1a 8a       	std	Y+18, r1	; 0x12
    b0de:	1b 8a       	std	Y+19, r1	; 0x13
    b0e0:	1c 8a       	std	Y+20, r1	; 0x14
    b0e2:	1d 8a       	std	Y+21, r1	; 0x15
    b0e4:	1e 8a       	std	Y+22, r1	; 0x16
    b0e6:	1f 8a       	std	Y+23, r1	; 0x17
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:26
  this->_udp            = &udp;
    b0e8:	8f e2       	ldi	r24, 0x2F	; 47
    b0ea:	90 e1       	ldi	r25, 0x10	; 16
    b0ec:	9a 83       	std	Y+2, r25	; 0x02
    b0ee:	89 83       	std	Y+1, r24	; 0x01
    b0f0:	eb ed       	ldi	r30, 0xDB	; 219
    b0f2:	fa e0       	ldi	r31, 0x0A	; 10
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2250
  struct_DDS18s20 tds;
  char *pch;
  uint8_t active;
  NTPClient timeClient(udpClient);

  for (uint8_t j = 0; j < 128; j++) my_payload[j] = 0;
    b0f4:	80 e0       	ldi	r24, 0x00	; 0
    b0f6:	11 92       	st	Z+, r1
    b0f8:	8f 5f       	subi	r24, 0xFF	; 255
    b0fa:	80 38       	cpi	r24, 0x80	; 128
    b0fc:	e1 f7       	brne	.-8      	; 0xb0f6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x80>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2252
  ////
  mqtt_receive_message++; /// inkrementuji promenou celkovy pocet prijatych zprav
    b0fe:	80 91 05 0a 	lds	r24, 0x0A05	; 0x800a05 <mqtt_receive_message>
    b102:	90 91 06 0a 	lds	r25, 0x0A06	; 0x800a06 <mqtt_receive_message+0x1>
    b106:	01 96       	adiw	r24, 0x01	; 1
    b108:	90 93 06 0a 	sts	0x0A06, r25	; 0x800a06 <mqtt_receive_message+0x1>
    b10c:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <mqtt_receive_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2253
  strncpy(my_payload, (char*) payload, length);
    b110:	8b ed       	ldi	r24, 0xDB	; 219
    b112:	9a e0       	ldi	r25, 0x0A	; 10
    b114:	0e 94 85 af 	call	0x15f0a	; 0x15f0a <strncpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2256
  ///
  /// kamarad discovery
  strcpy_P(str1, termbig_subscribe);
    b118:	5e 01       	movw	r10, r28
    b11a:	28 ec       	ldi	r18, 0xC8	; 200
    b11c:	a2 0e       	add	r10, r18
    b11e:	b1 1c       	adc	r11, r1
    b120:	67 e9       	ldi	r22, 0x97	; 151
    b122:	7c e2       	ldi	r23, 0x2C	; 44
    b124:	c5 01       	movw	r24, r10
    b126:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2257
  if (strcmp(str1, topic) == 0)
    b12a:	b4 01       	movw	r22, r8
    b12c:	c5 01       	movw	r24, r10
    b12e:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    b132:	89 2b       	or	r24, r25
    b134:	49 f4       	brne	.+18     	; 0xb148 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2259
  {
    mqtt_process_message++; /// inkrementuji promenou celkovy pocet zpracovanych zprav
    b136:	80 91 03 0a 	lds	r24, 0x0A03	; 0x800a03 <mqtt_process_message>
    b13a:	90 91 04 0a 	lds	r25, 0x0A04	; 0x800a04 <mqtt_process_message+0x1>
    b13e:	01 96       	adiw	r24, 0x01	; 1
    b140:	90 93 04 0a 	sts	0x0A04, r25	; 0x800a04 <mqtt_process_message+0x1>
    b144:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2262
    know_mqtt_create_or_update(my_payload, TYPE_TERMBIG);
  }
  strcpy_P(str1, thermctl_subscribe);
    b148:	6e ea       	ldi	r22, 0xAE	; 174
    b14a:	7c e2       	ldi	r23, 0x2C	; 44
    b14c:	c5 01       	movw	r24, r10
    b14e:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2263
  if (strcmp(str1, topic) == 0)
    b152:	b4 01       	movw	r22, r8
    b154:	c5 01       	movw	r24, r10
    b156:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    b15a:	89 2b       	or	r24, r25
    b15c:	49 f4       	brne	.+18     	; 0xb170 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2265
  {
    mqtt_process_message++;
    b15e:	80 91 03 0a 	lds	r24, 0x0A03	; 0x800a03 <mqtt_process_message>
    b162:	90 91 04 0a 	lds	r25, 0x0A04	; 0x800a04 <mqtt_process_message+0x1>
    b166:	01 96       	adiw	r24, 0x01	; 1
    b168:	90 93 04 0a 	sts	0x0A04, r25	; 0x800a04 <mqtt_process_message+0x1>
    b16c:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2271
    know_mqtt_create_or_update(my_payload, TYPE_THERMCTL);
  }
  ///
  /// nastavovani casu
  //// /thermctl-in/global/time/set - nastaveni casu. payload json
  strcpy_P(str1, thermctl_header_in);
    b170:	65 ed       	ldi	r22, 0xD5	; 213
    b172:	7c e2       	ldi	r23, 0x2C	; 44
    b174:	c5 01       	movw	r24, r10
    b176:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2272
  strcat_P(str1, global_time_set);
    b17a:	69 e7       	ldi	r22, 0x79	; 121
    b17c:	7c e2       	ldi	r23, 0x2C	; 44
    b17e:	c5 01       	movw	r24, r10
    b180:	0e 94 df a2 	call	0x145be	; 0x145be <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2273
  if (strcmp(str1, topic) == 0)
    b184:	b4 01       	movw	r22, r8
    b186:	c5 01       	movw	r24, r10
    b188:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    b18c:	89 2b       	or	r24, r25
    b18e:	09 f0       	breq	.+2      	; 0xb192 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11c>
    b190:	bb c0       	rjmp	.+374    	; 0xb308 <mqtt_callback(char*, unsigned char*, unsigned int)+0x292>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2275
  {
    mqtt_process_message++;
    b192:	80 91 03 0a 	lds	r24, 0x0A03	; 0x800a03 <mqtt_process_message>
    b196:	90 91 04 0a 	lds	r25, 0x0A04	; 0x800a04 <mqtt_process_message+0x1>
    b19a:	01 96       	adiw	r24, 0x01	; 1
    b19c:	90 93 04 0a 	sts	0x0A04, r25	; 0x800a04 <mqtt_process_message+0x1>
    b1a0:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <mqtt_process_message>
deserialize():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/deserialize.hpp:49
// TChar* = char*, const char*, const FlashStringHelper*
template <template <typename, typename> class TDeserializer, typename TDocument,
          typename TChar>
DeserializationError deserialize(TDocument &doc, TChar *input) {
  using namespace Internals;
  return makeDeserializer<TDeserializer>(
    b1a4:	20 91 8d 0c 	lds	r18, 0x0C8D	; 0x800c8d <doc>
_ZN11ArduinoJson9Internals23UnsafeCharPointerReaderIcEC2EPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/./CharPointerReader.hpp:16
class UnsafeCharPointerReader {
  const TChar* _ptr;

 public:
  explicit UnsafeCharPointerReader(const TChar* ptr)
      : _ptr(ptr ? ptr : reinterpret_cast<const TChar*>("")) {}
    b1a8:	8b ed       	ldi	r24, 0xDB	; 219
    b1aa:	9a e0       	ldi	r25, 0x0A	; 10
    b1ac:	89 2b       	or	r24, r25
    b1ae:	09 f0       	breq	.+2      	; 0xb1b2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x13c>
    b1b0:	3a c2       	rjmp	.+1140   	; 0xb626 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5b0>
_Z13mqtt_callbackPcPhj():
    b1b2:	82 ef       	ldi	r24, 0xF2	; 242
    b1b4:	92 e0       	ldi	r25, 0x02	; 2
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEEC2ERNS0_10MemoryPoolES3_S5_h():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:27
                   TStringStorage stringStorage, uint8_t nestingLimit)
      : _memoryPool(&memoryPool),
        _reader(reader),
        _stringStorage(stringStorage),
        _nestingLimit(nestingLimit),
        _loaded(false) {}
    b1b6:	4e e8       	ldi	r20, 0x8E	; 142
    b1b8:	5c e0       	ldi	r21, 0x0C	; 12
    b1ba:	2a 96       	adiw	r28, 0x0a	; 10
    b1bc:	5f af       	std	Y+63, r21	; 0x3f
    b1be:	4e af       	std	Y+62, r20	; 0x3e
    b1c0:	2a 97       	sbiw	r28, 0x0a	; 10
    b1c2:	2c 96       	adiw	r28, 0x0c	; 12
    b1c4:	9f af       	std	Y+63, r25	; 0x3f
    b1c6:	8e af       	std	Y+62, r24	; 0x3e
    b1c8:	2c 97       	sbiw	r28, 0x0c	; 12
    b1ca:	8b ed       	ldi	r24, 0xDB	; 219
    b1cc:	9a e0       	ldi	r25, 0x0A	; 10
    b1ce:	2e 96       	adiw	r28, 0x0e	; 14
    b1d0:	9f af       	std	Y+63, r25	; 0x3f
    b1d2:	8e af       	std	Y+62, r24	; 0x3e
    b1d4:	2e 97       	sbiw	r28, 0x0e	; 14
    b1d6:	2f 96       	adiw	r28, 0x0f	; 15
    b1d8:	2f af       	std	Y+63, r18	; 0x3f
    b1da:	2f 97       	sbiw	r28, 0x0f	; 15
    b1dc:	61 96       	adiw	r28, 0x11	; 17
    b1de:	1f ae       	std	Y+63, r1	; 0x3f
    b1e0:	61 97       	sbiw	r28, 0x11	; 17
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5clearEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:66

  // Resets the memoryPool.
  // USE WITH CAUTION: this invalidates all previously allocated data
  void clear() {
    _size = 0;
    b1e2:	10 92 95 0c 	sts	0x0C95, r1	; 0x800c95 <doc+0x8>
    b1e6:	10 92 94 0c 	sts	0x0C94, r1	; 0x800c94 <doc+0x7>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:94

template <typename T>
typename Internals::enable_if<Internals::is_same<T, JsonVariant>::value,
                              JsonVariant>::type
JsonVariant::to() {
  if (!_data) return JsonVariant();
    b1ea:	86 e9       	ldi	r24, 0x96	; 150
    b1ec:	9d e0       	ldi	r25, 0x0D	; 13
    b1ee:	89 2b       	or	r24, r25
    b1f0:	09 f4       	brne	.+2      	; 0xb1f4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x17e>
    b1f2:	1c c2       	rjmp	.+1080   	; 0xb62c <mqtt_callback(char*, unsigned char*, unsigned int)+0x5b6>
_ZN11ArduinoJson9Internals15JsonVariantData7setNullEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:66
    content.asRaw.data = data;
    content.asRaw.size = size;
  }

  void setNull() {
    type = JSON_NULL;
    b1f4:	10 92 97 0d 	sts	0x0D97, r1	; 0x800d97 <doc+0x10a>
    b1f8:	10 92 96 0d 	sts	0x0D96, r1	; 0x800d96 <doc+0x109>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:96
  _data->setNull();
  return *this;
    b1fc:	ca 01       	movw	r24, r20
    b1fe:	ac 01       	movw	r20, r24
    b200:	66 e9       	ldi	r22, 0x96	; 150
    b202:	7d e0       	ldi	r23, 0x0D	; 13
deserialize():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/deserialize.hpp:52
             doc.memoryPool(), makeReader(input),
             makeStringStorage(doc.memoryPool(), input), doc.nestingLimit)
      .parse(doc.template to<JsonVariant>());
    b204:	ce 01       	movw	r24, r28
    b206:	88 5b       	subi	r24, 0xB8	; 184
    b208:	9f 4f       	sbci	r25, 0xFF	; 255
    b20a:	0e 94 fe 23 	call	0x47fc	; 0x47fc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>
_ZNK11ArduinoJson11JsonVariant2asINS_10JsonObjectEEENS_9Internals9enable_ifIXsrNS3_7is_sameINS3_12remove_constIT_E4typeES2_EE5valueES7_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:71
inline typename Internals::enable_if<
    Internals::is_same<typename Internals::remove_const<T>::type,
                       JsonObject>::value,
    T>::type
JsonVariant::as() const {
  return _data ? JsonObject(_memoryPool, _data->asObject()) : JsonObject();
    b20e:	86 e9       	ldi	r24, 0x96	; 150
    b210:	9d e0       	ldi	r25, 0x0D	; 13
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:22
  friend class JsonVariant;

 public:
  typedef JsonObjectIterator iterator;

  FORCE_INLINE JsonObject() : _memoryPool(0), _data(0) {}
    b212:	06 e9       	ldi	r16, 0x96	; 150
    b214:	1d e0       	ldi	r17, 0x0D	; 13
_ZNK11ArduinoJson11JsonVariant2asINS_10JsonObjectEEENS_9Internals9enable_ifIXsrNS3_7is_sameINS3_12remove_constIT_E4typeES2_EE5valueES7_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:71
    b216:	89 2b       	or	r24, r25
    b218:	51 f0       	breq	.+20     	; 0xb22e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b8>
_ZN11ArduinoJson9Internals15JsonVariantData8asObjectEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:88
  JsonArrayData *asArray() {
    return type == JSON_ARRAY ? &content.asArray : 0;
  }

  JsonObjectData *asObject() {
    return type == JSON_OBJECT ? &content.asObject : 0;
    b21a:	80 91 96 0d 	lds	r24, 0x0D96	; 0x800d96 <doc+0x109>
    b21e:	90 91 97 0d 	lds	r25, 0x0D97	; 0x800d97 <doc+0x10a>
_Z13mqtt_callbackPcPhj():
    b222:	08 e9       	ldi	r16, 0x98	; 152
    b224:	1d e0       	ldi	r17, 0x0D	; 13
_ZN11ArduinoJson9Internals15JsonVariantData8asObjectEv():
    b226:	09 97       	sbiw	r24, 0x09	; 9
    b228:	11 f0       	breq	.+4      	; 0xb22e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b8>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:22
    b22a:	10 e0       	ldi	r17, 0x00	; 0
    b22c:	00 e0       	ldi	r16, 0x00	; 0
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    }
    return slot;
  }
  template <typename TStringRef>
  FORCE_INLINE Internals::Slot* findSlot(TStringRef key) const {
    return const_cast<JsonObject*>(this)->findSlot<TStringRef>(key);
    b22e:	6e ed       	ldi	r22, 0xDE	; 222
    b230:	73 e0       	ldi	r23, 0x03	; 3
    b232:	c8 01       	movw	r24, r16
    b234:	0e 94 d5 23 	call	0x47aa	; 0x47aa <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.28]>
    b238:	7c 01       	movw	r14, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2278
    deserializeJson(doc, my_payload);
    JsonObject root = doc.as<JsonObject>();
    if (root.containsKey("year") && root.containsKey("month") && root.containsKey("month") && root.containsKey("hour") && root.containsKey("minute") && root.containsKey("second"))
    b23a:	89 2b       	or	r24, r25
    b23c:	09 f4       	brne	.+2      	; 0xb240 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ca>
    b23e:	64 c0       	rjmp	.+200    	; 0xb308 <mqtt_callback(char*, unsigned char*, unsigned int)+0x292>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    b240:	63 ee       	ldi	r22, 0xE3	; 227
    b242:	73 e0       	ldi	r23, 0x03	; 3
    b244:	c8 01       	movw	r24, r16
    b246:	0e 94 d5 23 	call	0x47aa	; 0x47aa <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.28]>
    b24a:	2c 01       	movw	r4, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2278
    b24c:	89 2b       	or	r24, r25
    b24e:	09 f4       	brne	.+2      	; 0xb252 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1dc>
    b250:	5b c0       	rjmp	.+182    	; 0xb308 <mqtt_callback(char*, unsigned char*, unsigned int)+0x292>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    b252:	69 ee       	ldi	r22, 0xE9	; 233
    b254:	73 e0       	ldi	r23, 0x03	; 3
    b256:	c8 01       	movw	r24, r16
    b258:	0e 94 d5 23 	call	0x47aa	; 0x47aa <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.28]>
    b25c:	3c 01       	movw	r6, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2278
    b25e:	89 2b       	or	r24, r25
    b260:	09 f4       	brne	.+2      	; 0xb264 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ee>
    b262:	52 c0       	rjmp	.+164    	; 0xb308 <mqtt_callback(char*, unsigned char*, unsigned int)+0x292>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    b264:	6e ee       	ldi	r22, 0xEE	; 238
    b266:	73 e0       	ldi	r23, 0x03	; 3
    b268:	c8 01       	movw	r24, r16
    b26a:	0e 94 d5 23 	call	0x47aa	; 0x47aa <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.28]>
    b26e:	6c 01       	movw	r12, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2278
    b270:	89 2b       	or	r24, r25
    b272:	09 f4       	brne	.+2      	; 0xb276 <mqtt_callback(char*, unsigned char*, unsigned int)+0x200>
    b274:	49 c0       	rjmp	.+146    	; 0xb308 <mqtt_callback(char*, unsigned char*, unsigned int)+0x292>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    b276:	65 ef       	ldi	r22, 0xF5	; 245
    b278:	73 e0       	ldi	r23, 0x03	; 3
    b27a:	c8 01       	movw	r24, r16
    b27c:	0e 94 d5 23 	call	0x47aa	; 0x47aa <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.28]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2278
    b280:	00 97       	sbiw	r24, 0x00	; 0
    b282:	09 f4       	brne	.+2      	; 0xb286 <mqtt_callback(char*, unsigned char*, unsigned int)+0x210>
    b284:	41 c0       	rjmp	.+130    	; 0xb308 <mqtt_callback(char*, unsigned char*, unsigned int)+0x292>
_ZNK11ArduinoJson11JsonVariant2asIhEEKNS_9Internals9enable_ifIXsrNS2_11is_integralIT_EE5valueES5_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:182
  // unsigned long as<unsigned long>() const;
  template <typename T>
  FORCE_INLINE const typename Internals::enable_if<
      Internals::is_integral<T>::value, T>::type
  as() const {
    return _data ? _data->asInteger<T>() : T();
    b286:	0e 94 e7 94 	call	0x129ce	; 0x129ce <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    b28a:	38 2e       	mov	r3, r24
    b28c:	c6 01       	movw	r24, r12
    b28e:	0e 94 e7 94 	call	0x129ce	; 0x129ce <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    b292:	d8 2e       	mov	r13, r24
    b294:	c3 01       	movw	r24, r6
    b296:	0e 94 e7 94 	call	0x129ce	; 0x129ce <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    b29a:	c8 2e       	mov	r12, r24
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    b29c:	6c ef       	ldi	r22, 0xFC	; 252
    b29e:	73 e0       	ldi	r23, 0x03	; 3
    b2a0:	c8 01       	movw	r24, r16
    b2a2:	0e 94 d5 23 	call	0x47aa	; 0x47aa <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.28]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:312

  template <typename TStringRef, typename TValue>
  FORCE_INLINE typename Internals::JsonVariantAs<TValue>::type get_impl(
      TStringRef key) const {
    Internals::Slot* slot = findSlot<TStringRef>(key);
    return slot ? JsonVariant(_memoryPool, &slot->value).as<TValue>()
    b2a6:	10 e0       	ldi	r17, 0x00	; 0
_ZNK11ArduinoJson10JsonObject8get_implIPKchEENS_9Internals13JsonVariantAsIT0_E4typeET_():
    b2a8:	00 97       	sbiw	r24, 0x00	; 0
    b2aa:	19 f0       	breq	.+6      	; 0xb2b2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x23c>
_ZNK11ArduinoJson11JsonVariant2asIhEEKNS_9Internals9enable_ifIXsrNS2_11is_integralIT_EE5valueES5_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:182
    b2ac:	0e 94 e7 94 	call	0x129ce	; 0x129ce <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    b2b0:	18 2f       	mov	r17, r24
    b2b2:	c2 01       	movw	r24, r4
    b2b4:	0e 94 e7 94 	call	0x129ce	; 0x129ce <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    b2b8:	08 2f       	mov	r16, r24
asInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
  }

  template <typename T>
  T asInteger() const {
    switch (type) {
    b2ba:	d7 01       	movw	r26, r14
    b2bc:	8d 91       	ld	r24, X+
    b2be:	9c 91       	ld	r25, X
    b2c0:	11 97       	sbiw	r26, 0x01	; 1
    b2c2:	87 30       	cpi	r24, 0x07	; 7
    b2c4:	91 05       	cpc	r25, r1
    b2c6:	08 f0       	brcs	.+2      	; 0xb2ca <mqtt_callback(char*, unsigned char*, unsigned int)+0x254>
    b2c8:	b4 c1       	rjmp	.+872    	; 0xb632 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5bc>
    b2ca:	85 30       	cpi	r24, 0x05	; 5
    b2cc:	91 05       	cpc	r25, r1
    b2ce:	08 f0       	brcs	.+2      	; 0xb2d2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x25c>
    b2d0:	be c1       	rjmp	.+892    	; 0xb64e <mqtt_callback(char*, unsigned char*, unsigned int)+0x5d8>
    b2d2:	03 97       	sbiw	r24, 0x03	; 3
    b2d4:	08 f0       	brcs	.+2      	; 0xb2d8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x262>
    b2d6:	cd c1       	rjmp	.+922    	; 0xb672 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5fc>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
    b2d8:	60 e0       	ldi	r22, 0x00	; 0
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
    yOff = year;
    b2da:	29 96       	adiw	r28, 0x09	; 9
    b2dc:	6f af       	std	Y+63, r22	; 0x3f
    b2de:	29 97       	sbiw	r28, 0x09	; 9
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:105
    m = month;
    b2e0:	2a 96       	adiw	r28, 0x0a	; 10
    b2e2:	0f af       	std	Y+63, r16	; 0x3f
    b2e4:	2a 97       	sbiw	r28, 0x0a	; 10
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:106
    d = day;
    b2e6:	2b 96       	adiw	r28, 0x0b	; 11
    b2e8:	1f af       	std	Y+63, r17	; 0x3f
    b2ea:	2b 97       	sbiw	r28, 0x0b	; 11
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:107
    hh = hour;
    b2ec:	2c 96       	adiw	r28, 0x0c	; 12
    b2ee:	cf ae       	std	Y+63, r12	; 0x3f
    b2f0:	2c 97       	sbiw	r28, 0x0c	; 12
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:108
    mm = min;
    b2f2:	2d 96       	adiw	r28, 0x0d	; 13
    b2f4:	df ae       	std	Y+63, r13	; 0x3f
    b2f6:	2d 97       	sbiw	r28, 0x0d	; 13
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:109
    ss = sec;
    b2f8:	2e 96       	adiw	r28, 0x0e	; 14
    b2fa:	3f ae       	std	Y+63, r3	; 0x3f
    b2fc:	2e 97       	sbiw	r28, 0x0e	; 14
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2279
      rtc.adjust(DateTime(root["year"], root["month"], root["day"], root["hour"], root["minute"], root["second"]));
    b2fe:	ce 01       	movw	r24, r28
    b300:	88 5b       	subi	r24, 0xB8	; 184
    b302:	9f 4f       	sbci	r25, 0xFF	; 255
    b304:	0e 94 a7 8b 	call	0x1174e	; 0x1174e <RTC_DS1307::adjust(DateTime const&)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2282
  }
  //// /thermctl-in/global/time/ntp - jednorazova aktualizace casu z ntp serveru
  strcpy_P(str1, thermctl_header_in);
    b308:	65 ed       	ldi	r22, 0xD5	; 213
    b30a:	7c e2       	ldi	r23, 0x2C	; 44
    b30c:	c5 01       	movw	r24, r10
    b30e:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2283
  strcat_P(str1, global_time_ntp);
    b312:	69 e6       	ldi	r22, 0x69	; 105
    b314:	7c e2       	ldi	r23, 0x2C	; 44
    b316:	c5 01       	movw	r24, r10
    b318:	0e 94 df a2 	call	0x145be	; 0x145be <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2284
  if (strcmp(str1, topic) == 0)
    b31c:	b4 01       	movw	r22, r8
    b31e:	c5 01       	movw	r24, r10
    b320:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    b324:	89 2b       	or	r24, r25
    b326:	09 f0       	breq	.+2      	; 0xb32a <mqtt_callback(char*, unsigned char*, unsigned int)+0x2b4>
    b328:	e5 c0       	rjmp	.+458    	; 0xb4f4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x47e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2286
  {
    mqtt_process_message++;
    b32a:	80 91 03 0a 	lds	r24, 0x0A03	; 0x800a03 <mqtt_process_message>
    b32e:	90 91 04 0a 	lds	r25, 0x0A04	; 0x800a04 <mqtt_process_message+0x1>
    b332:	01 96       	adiw	r24, 0x01	; 1
    b334:	90 93 04 0a 	sts	0x0A04, r25	; 0x800a04 <mqtt_process_message+0x1>
    b338:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <mqtt_process_message>
time_get_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3347
///
/////////////// Casove funkce ///////////////////////////////////////////////////////////////////
/// time_get_offset - ziska casovy offset, letni/zimni cas
uint8_t time_get_offset(void)
{
  return EEPROM.read(time_offset);
    b33c:	81 e0       	ldi	r24, 0x01	; 1
    b33e:	90 e0       	ldi	r25, 0x00	; 0
    b340:	0e 94 49 8f 	call	0x11e92	; 0x11e92 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
    b344:	18 2f       	mov	r17, r24
ntp_update():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:402
//////////////////////////////////////////////////////////////////////
uint8_t ntp_update(NTPClient *timeClient, RTC_DS1307 *rtc, uint8_t offset)
{
  char tmp1[20];
  uint8_t ret = 0;
  tmp1[0] = 0;
    b346:	7e 01       	movw	r14, r28
    b348:	28 e4       	ldi	r18, 0x48	; 72
    b34a:	e2 0e       	add	r14, r18
    b34c:	f1 1c       	adc	r15, r1
    b34e:	d7 01       	movw	r26, r14
    b350:	1c 92       	st	X, r1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:403
  createString(tmp1, '.', device.ntp_server, 4, 10);
    b352:	0a e0       	ldi	r16, 0x0A	; 10
    b354:	24 e0       	ldi	r18, 0x04	; 4
    b356:	4d e6       	ldi	r20, 0x6D	; 109
    b358:	5c e0       	ldi	r21, 0x0C	; 12
    b35a:	6e e2       	ldi	r22, 0x2E	; 46
    b35c:	c7 01       	movw	r24, r14
    b35e:	0e 94 4b 8f 	call	0x11e96	; 0x11e96 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:404
  timeClient->begin();
    b362:	ce 01       	movw	r24, r28
    b364:	01 96       	adiw	r24, 0x01	; 1
    b366:	0e 94 8b 87 	call	0x10f16	; 0x10f16 <NTPClient::begin()>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:405
  timeClient->setTimeOffset(3600 * offset);
    b36a:	20 e1       	ldi	r18, 0x10	; 16
    b36c:	3e e0       	ldi	r19, 0x0E	; 14
    b36e:	12 9f       	mul	r17, r18
    b370:	c0 01       	movw	r24, r0
    b372:	13 9f       	mul	r17, r19
    b374:	90 0d       	add	r25, r0
    b376:	11 24       	eor	r1, r1
setTimeOffset():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:172

  this->_udpSetup = false;
}

void NTPClient::setTimeOffset(int timeOffset) {
  this->_timeOffset     = timeOffset;
    b378:	09 2e       	mov	r0, r25
    b37a:	00 0c       	add	r0, r0
    b37c:	aa 0b       	sbc	r26, r26
    b37e:	bb 0b       	sbc	r27, r27
    b380:	88 87       	std	Y+8, r24	; 0x08
    b382:	99 87       	std	Y+9, r25	; 0x09
    b384:	aa 87       	std	Y+10, r26	; 0x0a
    b386:	bb 87       	std	Y+11, r27	; 0x0b
setPoolServerName():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:180
void NTPClient::setUpdateInterval(unsigned long updateInterval) {
  this->_updateInterval = updateInterval;
}

void NTPClient::setPoolServerName(const char* poolServerName) {
    this->_poolServerName = poolServerName;
    b388:	fd 82       	std	Y+5, r15	; 0x05
    b38a:	ec 82       	std	Y+4, r14	; 0x04
ntp_update():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:407
  timeClient->setPoolServerName(tmp1);
  if (timeClient->update() == true)
    b38c:	ce 01       	movw	r24, r28
    b38e:	01 96       	adiw	r24, 0x01	; 1
    b390:	0e 94 a2 87 	call	0x10f44	; 0x10f44 <NTPClient::update()>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:401

//////////////////////////////////////////////////////////////////////
uint8_t ntp_update(NTPClient *timeClient, RTC_DS1307 *rtc, uint8_t offset)
{
  char tmp1[20];
  uint8_t ret = 0;
    b394:	10 e0       	ldi	r17, 0x00	; 0
ntp_update():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:407
  tmp1[0] = 0;
  createString(tmp1, '.', device.ntp_server, 4, 10);
  timeClient->begin();
  timeClient->setTimeOffset(3600 * offset);
  timeClient->setPoolServerName(tmp1);
  if (timeClient->update() == true)
    b396:	88 23       	and	r24, r24
    b398:	09 f4       	brne	.+2      	; 0xb39c <mqtt_callback(char*, unsigned char*, unsigned int)+0x326>
    b39a:	9a c0       	rjmp	.+308    	; 0xb4d0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x45a>
getSeconds():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:148
}
int NTPClient::getMinutes() const {
  return ((this->getEpochTime() % 3600) / 60);
}
int NTPClient::getSeconds() const {
  return (this->getEpochTime() % 60);
    b39c:	ce 01       	movw	r24, r28
    b39e:	01 96       	adiw	r24, 0x01	; 1
    b3a0:	0e 94 3b 87 	call	0x10e76	; 0x10e76 <NTPClient::getEpochTime() const>
    b3a4:	2c e3       	ldi	r18, 0x3C	; 60
    b3a6:	c2 2e       	mov	r12, r18
    b3a8:	d1 2c       	mov	r13, r1
    b3aa:	e1 2c       	mov	r14, r1
    b3ac:	f1 2c       	mov	r15, r1
    b3ae:	a7 01       	movw	r20, r14
    b3b0:	96 01       	movw	r18, r12
    b3b2:	0e 94 d9 ac 	call	0x159b2	; 0x159b2 <__udivmodsi4>
    b3b6:	36 2e       	mov	r3, r22
getMinutes():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:145
}
int NTPClient::getHours() const {
  return ((this->getEpochTime()  % 86400L) / 3600);
}
int NTPClient::getMinutes() const {
  return ((this->getEpochTime() % 3600) / 60);
    b3b8:	ce 01       	movw	r24, r28
    b3ba:	01 96       	adiw	r24, 0x01	; 1
    b3bc:	0e 94 3b 87 	call	0x10e76	; 0x10e76 <NTPClient::getEpochTime() const>
    b3c0:	30 e1       	ldi	r19, 0x10	; 16
    b3c2:	43 2e       	mov	r4, r19
    b3c4:	3e e0       	ldi	r19, 0x0E	; 14
    b3c6:	53 2e       	mov	r5, r19
    b3c8:	61 2c       	mov	r6, r1
    b3ca:	71 2c       	mov	r7, r1
    b3cc:	a3 01       	movw	r20, r6
    b3ce:	92 01       	movw	r18, r4
    b3d0:	0e 94 d9 ac 	call	0x159b2	; 0x159b2 <__udivmodsi4>
    b3d4:	a7 01       	movw	r20, r14
    b3d6:	96 01       	movw	r18, r12
    b3d8:	0e 94 d9 ac 	call	0x159b2	; 0x159b2 <__udivmodsi4>
    b3dc:	e2 2e       	mov	r14, r18
getHours():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:142

int NTPClient::getDay() const {
  return (((this->getEpochTime()  / 86400L) + 4 ) % 7); //0 is Sunday
}
int NTPClient::getHours() const {
  return ((this->getEpochTime()  % 86400L) / 3600);
    b3de:	ce 01       	movw	r24, r28
    b3e0:	01 96       	adiw	r24, 0x01	; 1
    b3e2:	0e 94 3b 87 	call	0x10e76	; 0x10e76 <NTPClient::getEpochTime() const>
    b3e6:	20 e8       	ldi	r18, 0x80	; 128
    b3e8:	31 e5       	ldi	r19, 0x51	; 81
    b3ea:	41 e0       	ldi	r20, 0x01	; 1
    b3ec:	50 e0       	ldi	r21, 0x00	; 0
    b3ee:	0e 94 d9 ac 	call	0x159b2	; 0x159b2 <__udivmodsi4>
    b3f2:	a3 01       	movw	r20, r6
    b3f4:	92 01       	movw	r18, r4
    b3f6:	0e 94 d9 ac 	call	0x159b2	; 0x159b2 <__udivmodsi4>
    b3fa:	d2 2e       	mov	r13, r18
getDate():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:130

  return month;
}

int NTPClient::getDate() const {
  time_t rawtime = this->getEpochTime();
    b3fc:	ce 01       	movw	r24, r28
    b3fe:	01 96       	adiw	r24, 0x01	; 1
    b400:	0e 94 3b 87 	call	0x10e76	; 0x10e76 <NTPClient::getEpochTime() const>
    b404:	c8 57       	subi	r28, 0x78	; 120
    b406:	df 4f       	sbci	r29, 0xFF	; 255
    b408:	68 83       	st	Y, r22
    b40a:	79 83       	std	Y+1, r23	; 0x01
    b40c:	8a 83       	std	Y+2, r24	; 0x02
    b40e:	9b 83       	std	Y+3, r25	; 0x03
    b410:	c8 58       	subi	r28, 0x88	; 136
    b412:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:132
  struct tm * ti;
  ti = localtime (&rawtime);
    b414:	ce 01       	movw	r24, r28
    b416:	88 57       	subi	r24, 0x78	; 120
    b418:	9f 4f       	sbci	r25, 0xFF	; 255
    b41a:	0e 94 b7 93 	call	0x1276e	; 0x1276e <localtime>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:133
  int month = (ti->tm_mday) < 10 ? 0 + (ti->tm_mday) : (ti->tm_mday);
    b41e:	fc 01       	movw	r30, r24
    b420:	c3 80       	ldd	r12, Z+3	; 0x03
getMonth():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:121

  return year;
}

int NTPClient::getMonth() const {
  time_t rawtime = this->getEpochTime();
    b422:	ce 01       	movw	r24, r28
    b424:	01 96       	adiw	r24, 0x01	; 1
    b426:	0e 94 3b 87 	call	0x10e76	; 0x10e76 <NTPClient::getEpochTime() const>
    b42a:	c8 57       	subi	r28, 0x78	; 120
    b42c:	df 4f       	sbci	r29, 0xFF	; 255
    b42e:	68 83       	st	Y, r22
    b430:	79 83       	std	Y+1, r23	; 0x01
    b432:	8a 83       	std	Y+2, r24	; 0x02
    b434:	9b 83       	std	Y+3, r25	; 0x03
    b436:	c8 58       	subi	r28, 0x88	; 136
    b438:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:123
  struct tm * ti;
  ti = localtime (&rawtime);
    b43a:	ce 01       	movw	r24, r28
    b43c:	88 57       	subi	r24, 0x78	; 120
    b43e:	9f 4f       	sbci	r25, 0xFF	; 255
    b440:	0e 94 b7 93 	call	0x1276e	; 0x1276e <localtime>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:124
  int month = (ti->tm_mon + 1) < 10 ? 0 + (ti->tm_mon + 1) : (ti->tm_mon + 1);
    b444:	dc 01       	movw	r26, r24
    b446:	15 96       	adiw	r26, 0x05	; 5
    b448:	0c 91       	ld	r16, X
    b44a:	00 2e       	mov	r0, r16
    b44c:	00 0c       	add	r0, r0
    b44e:	11 0b       	sbc	r17, r17
    b450:	0f 5f       	subi	r16, 0xFF	; 255
    b452:	1f 4f       	sbci	r17, 0xFF	; 255
ntp_update():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:409
  {
    rtc->adjust(DateTime((uint16_t)timeClient->getYear(), timeClient->getMonth() , timeClient->getDate(), timeClient->getHours(), timeClient->getMinutes(), timeClient->getSeconds()));
    b454:	ce 01       	movw	r24, r28
    b456:	01 96       	adiw	r24, 0x01	; 1
    b458:	0e 94 6f 87 	call	0x10ede	; 0x10ede <NTPClient::getYear() const>
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:102
    }
    d = days + 1;
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
    b45c:	80 3d       	cpi	r24, 0xD0	; 208
    b45e:	b7 e0       	ldi	r27, 0x07	; 7
    b460:	9b 07       	cpc	r25, r27
    b462:	10 f0       	brcs	.+4      	; 0xb468 <mqtt_callback(char*, unsigned char*, unsigned int)+0x3f2>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:103
        year -= 2000;
    b464:	80 5d       	subi	r24, 0xD0	; 208
    b466:	97 40       	sbci	r25, 0x07	; 7
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
    yOff = year;
    b468:	c8 57       	subi	r28, 0x78	; 120
    b46a:	df 4f       	sbci	r29, 0xFF	; 255
    b46c:	88 83       	st	Y, r24
    b46e:	c8 58       	subi	r28, 0x88	; 136
    b470:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:105
    m = month;
    b472:	c7 57       	subi	r28, 0x77	; 119
    b474:	df 4f       	sbci	r29, 0xFF	; 255
    b476:	08 83       	st	Y, r16
    b478:	c9 58       	subi	r28, 0x89	; 137
    b47a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:106
    d = day;
    b47c:	c6 57       	subi	r28, 0x76	; 118
    b47e:	df 4f       	sbci	r29, 0xFF	; 255
    b480:	c8 82       	st	Y, r12
    b482:	ca 58       	subi	r28, 0x8A	; 138
    b484:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:107
    hh = hour;
    b486:	c5 57       	subi	r28, 0x75	; 117
    b488:	df 4f       	sbci	r29, 0xFF	; 255
    b48a:	d8 82       	st	Y, r13
    b48c:	cb 58       	subi	r28, 0x8B	; 139
    b48e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:108
    mm = min;
    b490:	c4 57       	subi	r28, 0x74	; 116
    b492:	df 4f       	sbci	r29, 0xFF	; 255
    b494:	e8 82       	st	Y, r14
    b496:	cc 58       	subi	r28, 0x8C	; 140
    b498:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:109
    ss = sec;
    b49a:	c3 57       	subi	r28, 0x73	; 115
    b49c:	df 4f       	sbci	r29, 0xFF	; 255
    b49e:	38 82       	st	Y, r3
    b4a0:	cd 58       	subi	r28, 0x8D	; 141
    b4a2:	d0 40       	sbci	r29, 0x00	; 0
ntp_update():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:409
    b4a4:	ce 01       	movw	r24, r28
    b4a6:	88 57       	subi	r24, 0x78	; 120
    b4a8:	9f 4f       	sbci	r25, 0xFF	; 255
    b4aa:	0e 94 a7 8b 	call	0x1174e	; 0x1174e <RTC_DS1307::adjust(DateTime const&)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:411
    ret = 1;
    printf("y%d\n", timeClient->getYear());
    b4ae:	ce 01       	movw	r24, r28
    b4b0:	01 96       	adiw	r24, 0x01	; 1
    b4b2:	0e 94 6f 87 	call	0x10ede	; 0x10ede <NTPClient::getYear() const>
    b4b6:	9f 93       	push	r25
    b4b8:	8f 93       	push	r24
    b4ba:	80 e0       	ldi	r24, 0x00	; 0
    b4bc:	94 e0       	ldi	r25, 0x04	; 4
    b4be:	9f 93       	push	r25
    b4c0:	8f 93       	push	r24
    b4c2:	0e 94 94 af 	call	0x15f28	; 0x15f28 <printf>
    b4c6:	0f 90       	pop	r0
    b4c8:	0f 90       	pop	r0
    b4ca:	0f 90       	pop	r0
    b4cc:	0f 90       	pop	r0
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:410
  timeClient->setTimeOffset(3600 * offset);
  timeClient->setPoolServerName(tmp1);
  if (timeClient->update() == true)
  {
    rtc->adjust(DateTime((uint16_t)timeClient->getYear(), timeClient->getMonth() , timeClient->getDate(), timeClient->getHours(), timeClient->getMinutes(), timeClient->getSeconds()));
    ret = 1;
    b4ce:	11 e0       	ldi	r17, 0x01	; 1
end():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:166

  return hoursStr + ":" + minuteStr + ":" + secondStr;
}

void NTPClient::end() {
  this->_udp->stop();
    b4d0:	89 81       	ldd	r24, Y+1	; 0x01
    b4d2:	9a 81       	ldd	r25, Y+2	; 0x02
    b4d4:	dc 01       	movw	r26, r24
    b4d6:	ed 91       	ld	r30, X+
    b4d8:	fc 91       	ld	r31, X
    b4da:	02 88       	ldd	r0, Z+18	; 0x12
    b4dc:	f3 89       	ldd	r31, Z+19	; 0x13
    b4de:	e0 2d       	mov	r30, r0
    b4e0:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:168

  this->_udpSetup = false;
    b4e2:	1b 82       	std	Y+3, r1	; 0x03
    b4e4:	80 91 ce 0a 	lds	r24, 0x0ACE	; 0x800ace <selftest_data>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2287
  strcpy_P(str1, thermctl_header_in);
  strcat_P(str1, global_time_ntp);
  if (strcmp(str1, topic) == 0)
  {
    mqtt_process_message++;
    if (ntp_update(&timeClient, &rtc, time_get_offset()) == 1)
    b4e8:	11 30       	cpi	r17, 0x01	; 1
    b4ea:	09 f0       	breq	.+2      	; 0xb4ee <mqtt_callback(char*, unsigned char*, unsigned int)+0x478>
    b4ec:	ef c0       	rjmp	.+478    	; 0xb6cc <mqtt_callback(char*, unsigned char*, unsigned int)+0x656>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2288
      cbi(selftest_data, SELFTEST_ERR_NTP); //TODO predelat na volani funkce
    b4ee:	8d 7f       	andi	r24, 0xFD	; 253
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2290
    else
      sbi(selftest_data, SELFTEST_ERR_NTP); //TODO predelat na volani funkce
    b4f0:	80 93 ce 0a 	sts	0x0ACE, r24	; 0x800ace <selftest_data>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2293
  }
  //// /termbig-in/global/time/offset - nastaveni offsetu casu
  strcpy_P(str1, thermctl_header_in);
    b4f4:	65 ed       	ldi	r22, 0xD5	; 213
    b4f6:	7c e2       	ldi	r23, 0x2C	; 44
    b4f8:	c5 01       	movw	r24, r10
    b4fa:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2294
  strcat_P(str1, global_time_offset);
    b4fe:	62 e5       	ldi	r22, 0x52	; 82
    b500:	7c e2       	ldi	r23, 0x2C	; 44
    b502:	c5 01       	movw	r24, r10
    b504:	0e 94 df a2 	call	0x145be	; 0x145be <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2295
  if (strcmp(str1, topic) == 0)
    b508:	b4 01       	movw	r22, r8
    b50a:	c5 01       	movw	r24, r10
    b50c:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    b510:	89 2b       	or	r24, r25
    b512:	91 f4       	brne	.+36     	; 0xb538 <mqtt_callback(char*, unsigned char*, unsigned int)+0x4c2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2297
  {
    mqtt_process_message++;
    b514:	80 91 03 0a 	lds	r24, 0x0A03	; 0x800a03 <mqtt_process_message>
    b518:	90 91 04 0a 	lds	r25, 0x0A04	; 0x800a04 <mqtt_process_message+0x1>
    b51c:	01 96       	adiw	r24, 0x01	; 1
    b51e:	90 93 04 0a 	sts	0x0A04, r25	; 0x800a04 <mqtt_process_message+0x1>
    b522:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2298
    time_set_offset(atoi(my_payload));
    b526:	8b ed       	ldi	r24, 0xDB	; 219
    b528:	9a e0       	ldi	r25, 0x0A	; 10
    b52a:	0e 94 b8 a2 	call	0x14570	; 0x14570 <atoi>
time_set_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3352
  return EEPROM.read(time_offset);
}
/// time_set_offset - nastavi casovy offset letni/zimni
void time_set_offset(uint8_t offset)
{
  EEPROM.write(time_offset, offset);
    b52e:	68 2f       	mov	r22, r24
    b530:	81 e0       	ldi	r24, 0x01	; 1
    b532:	90 e0       	ldi	r25, 0x00	; 0
    b534:	0e 94 47 8f 	call	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2302
    mqtt_process_message++;
    time_set_offset(atoi(my_payload));
  }
  /// nastavovani vlastnosti TDS
  //// /thermctl-in/XXXX/tds/associate - asociace do tds si pridam mac 1wire - odpoved je pod jakem ID to mam ulozeno
  strcpy_P(str1, thermctl_header_in);
    b538:	65 ed       	ldi	r22, 0xD5	; 213
    b53a:	7c e2       	ldi	r23, 0x2C	; 44
    b53c:	c5 01       	movw	r24, r10
    b53e:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2303
  strcat(str1, device.nazev);
    b542:	65 e3       	ldi	r22, 0x35	; 53
    b544:	7c e0       	ldi	r23, 0x0C	; 12
    b546:	c5 01       	movw	r24, r10
    b548:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2304
  strcat(str1, "/tds/associate");
    b54c:	65 e0       	ldi	r22, 0x05	; 5
    b54e:	74 e0       	ldi	r23, 0x04	; 4
    b550:	c5 01       	movw	r24, r10
    b552:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2305
  if (strcmp(str1, topic) == 0)
    b556:	b4 01       	movw	r22, r8
    b558:	c5 01       	movw	r24, r10
    b55a:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2243
  const char tmp1[16];
  char tmp2[32];
  static char my_payload[128];
  boolean ret = 0;
  uint8_t cnt = 0;
  uint8_t id = 0;
    b55e:	71 2c       	mov	r7, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2305
  /// nastavovani vlastnosti TDS
  //// /thermctl-in/XXXX/tds/associate - asociace do tds si pridam mac 1wire - odpoved je pod jakem ID to mam ulozeno
  strcpy_P(str1, thermctl_header_in);
  strcat(str1, device.nazev);
  strcat(str1, "/tds/associate");
  if (strcmp(str1, topic) == 0)
    b560:	89 2b       	or	r24, r25
    b562:	b1 f4       	brne	.+44     	; 0xb590 <mqtt_callback(char*, unsigned char*, unsigned int)+0x51a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2307
  {
    mqtt_process_message++;
    b564:	80 91 03 0a 	lds	r24, 0x0A03	; 0x800a03 <mqtt_process_message>
    b568:	90 91 04 0a 	lds	r25, 0x0A04	; 0x800a04 <mqtt_process_message+0x1>
    b56c:	01 96       	adiw	r24, 0x01	; 1
    b56e:	90 93 04 0a 	sts	0x0A04, r25	; 0x800a04 <mqtt_process_message+0x1>
    b572:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2308
    id = atoi(my_payload);
    b576:	8b ed       	ldi	r24, 0xDB	; 219
    b578:	9a e0       	ldi	r25, 0x0A	; 10
    b57a:	0e 94 b8 a2 	call	0x14570	; 0x14570 <atoi>
    b57e:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2309
    if (tds_associate(id) == 255)
    b580:	0e 94 e1 4e 	call	0x9dc2	; 0x9dc2 <tds_associate(unsigned char)>
    b584:	8f 3f       	cpi	r24, 0xFF	; 255
    b586:	21 f4       	brne	.+8      	; 0xb590 <mqtt_callback(char*, unsigned char*, unsigned int)+0x51a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2310
      log_error(&mqtt_client, "tds/associate full or bad id");
    b588:	84 e1       	ldi	r24, 0x14	; 20
    b58a:	94 e0       	ldi	r25, 0x04	; 4
    b58c:	0e 94 64 81 	call	0x102c8	; 0x102c8 <log_error(PubSubClient*, char*) [clone .constprop.61]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2316
  }
  ///
  //// /thermctl-in/XXXX/tds/set/IDcko/name - nastavi cidlu nazev
  //// /thermctl-in/XXXX/tds/set/IDcko/offset
  //// /thermctl-in/XXXX/tds/set/IDcko/period
  strcpy_P(str1, thermctl_header_in);
    b590:	65 ed       	ldi	r22, 0xD5	; 213
    b592:	7c e2       	ldi	r23, 0x2C	; 44
    b594:	c5 01       	movw	r24, r10
    b596:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2317
  strcat(str1, device.nazev);
    b59a:	65 e3       	ldi	r22, 0x35	; 53
    b59c:	7c e0       	ldi	r23, 0x0C	; 12
    b59e:	c5 01       	movw	r24, r10
    b5a0:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2318
  strcat(str1, "/tds/set/");
    b5a4:	61 e3       	ldi	r22, 0x31	; 49
    b5a6:	74 e0       	ldi	r23, 0x04	; 4
    b5a8:	c5 01       	movw	r24, r10
    b5aa:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2319
  if (strncmp(str1, topic, strlen(str1)) == 0)
    b5ae:	f5 01       	movw	r30, r10
    b5b0:	01 90       	ld	r0, Z+
    b5b2:	00 20       	and	r0, r0
    b5b4:	e9 f7       	brne	.-6      	; 0xb5b0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x53a>
    b5b6:	31 97       	sbiw	r30, 0x01	; 1
    b5b8:	af 01       	movw	r20, r30
    b5ba:	4a 19       	sub	r20, r10
    b5bc:	5b 09       	sbc	r21, r11
    b5be:	b4 01       	movw	r22, r8
    b5c0:	c5 01       	movw	r24, r10
    b5c2:	0e 94 77 af 	call	0x15eee	; 0x15eee <strncmp>
    b5c6:	89 2b       	or	r24, r25
    b5c8:	09 f0       	breq	.+2      	; 0xb5cc <mqtt_callback(char*, unsigned char*, unsigned int)+0x556>
    b5ca:	02 c1       	rjmp	.+516    	; 0xb7d0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x75a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2321
  {
    mqtt_process_message++;
    b5cc:	80 91 03 0a 	lds	r24, 0x0A03	; 0x800a03 <mqtt_process_message>
    b5d0:	90 91 04 0a 	lds	r25, 0x0A04	; 0x800a04 <mqtt_process_message+0x1>
    b5d4:	01 96       	adiw	r24, 0x01	; 1
    b5d6:	90 93 04 0a 	sts	0x0A04, r25	; 0x800a04 <mqtt_process_message+0x1>
    b5da:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2323
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    b5de:	f5 01       	movw	r30, r10
    b5e0:	01 90       	ld	r0, Z+
    b5e2:	00 20       	and	r0, r0
    b5e4:	e9 f7       	brne	.-6      	; 0xb5e0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x56a>
    b5e6:	31 97       	sbiw	r30, 0x01	; 1
    b5e8:	ea 19       	sub	r30, r10
    b5ea:	fb 09       	sbc	r31, r11
    b5ec:	9e 2f       	mov	r25, r30
    b5ee:	4e 2f       	mov	r20, r30
    b5f0:	84 2f       	mov	r24, r20
    b5f2:	89 1b       	sub	r24, r25
    b5f4:	24 2f       	mov	r18, r20
    b5f6:	30 e0       	ldi	r19, 0x00	; 0
    b5f8:	d4 01       	movw	r26, r8
    b5fa:	0d 90       	ld	r0, X+
    b5fc:	00 20       	and	r0, r0
    b5fe:	e9 f7       	brne	.-6      	; 0xb5fa <mqtt_callback(char*, unsigned char*, unsigned int)+0x584>
    b600:	11 97       	sbiw	r26, 0x01	; 1
    b602:	a8 19       	sub	r26, r8
    b604:	b9 09       	sbc	r27, r9
    b606:	2a 17       	cp	r18, r26
    b608:	3b 07       	cpc	r19, r27
    b60a:	08 f0       	brcs	.+2      	; 0xb60e <mqtt_callback(char*, unsigned char*, unsigned int)+0x598>
    b60c:	61 c0       	rjmp	.+194    	; 0xb6d0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x65a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2325
    {
      str1[cnt] = topic[f];
    b60e:	d5 01       	movw	r26, r10
    b610:	a8 0f       	add	r26, r24
    b612:	b1 1d       	adc	r27, r1
    b614:	28 0d       	add	r18, r8
    b616:	39 1d       	adc	r19, r9
    b618:	f9 01       	movw	r30, r18
    b61a:	80 81       	ld	r24, Z
    b61c:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2326
      str1[cnt + 1] = 0;
    b61e:	11 96       	adiw	r26, 0x01	; 1
    b620:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2323
  strcat(str1, "/tds/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    b622:	4f 5f       	subi	r20, 0xFF	; 255
    b624:	e5 cf       	rjmp	.-54     	; 0xb5f0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x57a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/./CharPointerReader.hpp:16
    b626:	8b ed       	ldi	r24, 0xDB	; 219
    b628:	9a e0       	ldi	r25, 0x0A	; 10
    b62a:	c5 cd       	rjmp	.-1142   	; 0xb1b6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x140>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:94

template <typename T>
typename Internals::enable_if<Internals::is_same<T, JsonVariant>::value,
                              JsonVariant>::type
JsonVariant::to() {
  if (!_data) return JsonVariant();
    b62c:	86 e9       	ldi	r24, 0x96	; 150
    b62e:	9d e0       	ldi	r25, 0x0D	; 13
    b630:	e6 cd       	rjmp	.-1076   	; 0xb1fe <mqtt_callback(char*, unsigned char*, unsigned int)+0x188>
asInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
    b632:	87 30       	cpi	r24, 0x07	; 7
    b634:	91 05       	cpc	r25, r1
    b636:	b1 f0       	breq	.+44     	; 0xb664 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5ee>
    b638:	0a 97       	sbiw	r24, 0x0a	; 10
    b63a:	09 f0       	breq	.+2      	; 0xb63e <mqtt_callback(char*, unsigned char*, unsigned int)+0x5c8>
    b63c:	4d ce       	rjmp	.-870    	; 0xb2d8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x262>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:103
        return T(~content.asInteger + 1);
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
      case JSON_FLOAT:
        return T(content.asFloat);
    b63e:	f7 01       	movw	r30, r14
    b640:	62 81       	ldd	r22, Z+2	; 0x02
    b642:	73 81       	ldd	r23, Z+3	; 0x03
    b644:	84 81       	ldd	r24, Z+4	; 0x04
    b646:	95 81       	ldd	r25, Z+5	; 0x05
    b648:	0e 94 1a ae 	call	0x15c34	; 0x15c34 <__fixunssfsi>
    b64c:	03 c0       	rjmp	.+6      	; 0xb654 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5de>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:96
  template <typename T>
  T asInteger() const {
    switch (type) {
      case JSON_POSITIVE_INTEGER:
      case JSON_BOOLEAN:
        return T(content.asInteger);
    b64e:	f7 01       	movw	r30, r14
    b650:	62 81       	ldd	r22, Z+2	; 0x02
    b652:	73 81       	ldd	r23, Z+3	; 0x03
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:102
    }
    d = days + 1;
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
    b654:	60 3d       	cpi	r22, 0xD0	; 208
    b656:	f7 e0       	ldi	r31, 0x07	; 7
    b658:	7f 07       	cpc	r23, r31
    b65a:	08 f4       	brcc	.+2      	; 0xb65e <mqtt_callback(char*, unsigned char*, unsigned int)+0x5e8>
    b65c:	3e ce       	rjmp	.-900    	; 0xb2da <mqtt_callback(char*, unsigned char*, unsigned int)+0x264>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:103
        year -= 2000;
    b65e:	60 5d       	subi	r22, 0xD0	; 208
    b660:	77 40       	sbci	r23, 0x07	; 7
    b662:	3b ce       	rjmp	.-906    	; 0xb2da <mqtt_callback(char*, unsigned char*, unsigned int)+0x264>
asInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:98
      case JSON_NEGATIVE_INTEGER:
        return T(~content.asInteger + 1);
    b664:	12 96       	adiw	r26, 0x02	; 2
    b666:	6d 91       	ld	r22, X+
    b668:	7c 91       	ld	r23, X
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    b66a:	71 95       	neg	r23
    b66c:	61 95       	neg	r22
    b66e:	71 09       	sbc	r23, r1
    b670:	f1 cf       	rjmp	.-30     	; 0xb654 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5de>
asInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:101
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
    b672:	12 96       	adiw	r26, 0x02	; 2
    b674:	ed 91       	ld	r30, X+
    b676:	fc 91       	ld	r31, X
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
    b678:	30 97       	sbiw	r30, 0x00	; 0
    b67a:	09 f4       	brne	.+2      	; 0xb67e <mqtt_callback(char*, unsigned char*, unsigned int)+0x608>
    b67c:	2d ce       	rjmp	.-934    	; 0xb2d8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x262>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18

  if (*s == 't') return 1;  // "true"
    b67e:	80 81       	ld	r24, Z
_Z13mqtt_callbackPcPhj():
    b680:	61 e0       	ldi	r22, 0x01	; 1
    b682:	70 e0       	ldi	r23, 0x00	; 0
parseInteger():
    b684:	84 37       	cpi	r24, 0x74	; 116
    b686:	09 f4       	brne	.+2      	; 0xb68a <mqtt_callback(char*, unsigned char*, unsigned int)+0x614>
    b688:	28 ce       	rjmp	.-944    	; 0xb2da <mqtt_callback(char*, unsigned char*, unsigned int)+0x264>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  T result = 0;
  bool negative_result = false;

  switch (*s) {
    b68a:	8b 32       	cpi	r24, 0x2B	; 43
    b68c:	c9 f0       	breq	.+50     	; 0xb6c0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x64a>
    b68e:	8d 32       	cpi	r24, 0x2D	; 45
    b690:	c1 f4       	brne	.+48     	; 0xb6c2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x64c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:26
    case '-':
      negative_result = true;
      s++;
    b692:	31 96       	adiw	r30, 0x01	; 1
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:25
  T result = 0;
  bool negative_result = false;

  switch (*s) {
    case '-':
      negative_result = true;
    b694:	81 e0       	ldi	r24, 0x01	; 1
parseInteger():
    b696:	70 e0       	ldi	r23, 0x00	; 0
    b698:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
      s++;
      break;
  }

  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    b69a:	4a e0       	ldi	r20, 0x0A	; 10
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
    b69c:	91 91       	ld	r25, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    b69e:	20 ed       	ldi	r18, 0xD0	; 208
    b6a0:	29 0f       	add	r18, r25
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    b6a2:	2a 30       	cpi	r18, 0x0A	; 10
    b6a4:	80 f4       	brcc	.+32     	; 0xb6c6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x650>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
    result = T(result * 10 + T(*s - '0'));
    b6a6:	46 9f       	mul	r20, r22
    b6a8:	90 01       	movw	r18, r0
    b6aa:	47 9f       	mul	r20, r23
    b6ac:	30 0d       	add	r19, r0
    b6ae:	11 24       	eor	r1, r1
    b6b0:	b9 01       	movw	r22, r18
    b6b2:	60 53       	subi	r22, 0x30	; 48
    b6b4:	71 09       	sbc	r23, r1
    b6b6:	69 0f       	add	r22, r25
    b6b8:	71 1d       	adc	r23, r1
    b6ba:	97 fd       	sbrc	r25, 7
    b6bc:	7a 95       	dec	r23
    b6be:	ee cf       	rjmp	.-36     	; 0xb69c <mqtt_callback(char*, unsigned char*, unsigned int)+0x626>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
    b6c0:	31 96       	adiw	r30, 0x01	; 1
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
    b6c2:	80 e0       	ldi	r24, 0x00	; 0
    b6c4:	e8 cf       	rjmp	.-48     	; 0xb696 <mqtt_callback(char*, unsigned char*, unsigned int)+0x620>
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    b6c6:	81 11       	cpse	r24, r1
    b6c8:	d0 cf       	rjmp	.-96     	; 0xb66a <mqtt_callback(char*, unsigned char*, unsigned int)+0x5f4>
    b6ca:	c4 cf       	rjmp	.-120    	; 0xb654 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5de>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2290
  {
    mqtt_process_message++;
    if (ntp_update(&timeClient, &rtc, time_get_offset()) == 1)
      cbi(selftest_data, SELFTEST_ERR_NTP); //TODO predelat na volani funkce
    else
      sbi(selftest_data, SELFTEST_ERR_NTP); //TODO predelat na volani funkce
    b6cc:	82 60       	ori	r24, 0x02	; 2
    b6ce:	10 cf       	rjmp	.-480    	; 0xb4f0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x47a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2330
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    b6d0:	6f ec       	ldi	r22, 0xCF	; 207
    b6d2:	73 e0       	ldi	r23, 0x03	; 3
    b6d4:	c5 01       	movw	r24, r10
    b6d6:	0e 94 f1 a2 	call	0x145e2	; 0x145e2 <strtok>
    b6da:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2329
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    b6dc:	61 2c       	mov	r6, r1
tds_set_name():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:83
//// nastavi nazev k tds cidlu
void tds_set_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
  strcpy(tds.name, name);
    b6de:	88 e4       	ldi	r24, 0x48	; 72
    b6e0:	e8 2e       	mov	r14, r24
    b6e2:	f1 2c       	mov	r15, r1
    b6e4:	ec 0e       	add	r14, r28
    b6e6:	fd 1e       	adc	r15, r29
    b6e8:	fc e0       	ldi	r31, 0x0C	; 12
    b6ea:	ef 0e       	add	r14, r31
    b6ec:	f1 1c       	adc	r15, r1
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2331
    pch = strtok (str1, "/");
    while (pch != NULL)
    b6ee:	01 15       	cp	r16, r1
    b6f0:	11 05       	cpc	r17, r1
    b6f2:	09 f4       	brne	.+2      	; 0xb6f6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x680>
    b6f4:	6d c0       	rjmp	.+218    	; 0xb7d0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x75a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2333
    {
      if (cnt == 0) id = atoi(pch);
    b6f6:	61 10       	cpse	r6, r1
    b6f8:	0d c0       	rjmp	.+26     	; 0xb714 <mqtt_callback(char*, unsigned char*, unsigned int)+0x69e>
    b6fa:	c8 01       	movw	r24, r16
    b6fc:	0e 94 b8 a2 	call	0x14570	; 0x14570 <atoi>
    b700:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2334
      if (id < HW_ONEWIRE_MAXROMS)
    b702:	25 e0       	ldi	r18, 0x05	; 5
    b704:	28 17       	cp	r18, r24
    b706:	08 f0       	brcs	.+2      	; 0xb70a <mqtt_callback(char*, unsigned char*, unsigned int)+0x694>
    b708:	5a c0       	rjmp	.+180    	; 0xb7be <mqtt_callback(char*, unsigned char*, unsigned int)+0x748>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2342
        if ((cnt == 1) && (strcmp(pch, "offset") == 0)) tds_set_offset(id, atoi(my_payload));
        if ((cnt == 1) && (strcmp(pch, "period") == 0)) tds_set_period(id, atoi(my_payload));
      }
      else
      {
        log_error(&mqtt_client, "tds/set bad id");
    b70a:	82 e7       	ldi	r24, 0x72	; 114
    b70c:	94 e0       	ldi	r25, 0x04	; 4
    b70e:	0e 94 64 81 	call	0x102c8	; 0x102c8 <log_error(PubSubClient*, char*) [clone .constprop.61]>
    b712:	55 c0       	rjmp	.+170    	; 0xb7be <mqtt_callback(char*, unsigned char*, unsigned int)+0x748>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2334
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < HW_ONEWIRE_MAXROMS)
    b714:	85 e0       	ldi	r24, 0x05	; 5
    b716:	87 15       	cp	r24, r7
    b718:	c0 f3       	brcs	.-16     	; 0xb70a <mqtt_callback(char*, unsigned char*, unsigned int)+0x694>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2336
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0)) tds_set_name(id, my_payload);
    b71a:	a1 e0       	ldi	r26, 0x01	; 1
    b71c:	6a 12       	cpse	r6, r26
    b71e:	4f c0       	rjmp	.+158    	; 0xb7be <mqtt_callback(char*, unsigned char*, unsigned int)+0x748>
    b720:	68 ea       	ldi	r22, 0xA8	; 168
    b722:	73 e0       	ldi	r23, 0x03	; 3
    b724:	c8 01       	movw	r24, r16
    b726:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    b72a:	89 2b       	or	r24, r25
    b72c:	89 f4       	brne	.+34     	; 0xb750 <mqtt_callback(char*, unsigned char*, unsigned int)+0x6da>
tds_set_name():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:82
}
//// nastavi nazev k tds cidlu
void tds_set_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    b72e:	be 01       	movw	r22, r28
    b730:	68 5b       	subi	r22, 0xB8	; 184
    b732:	7f 4f       	sbci	r23, 0xFF	; 255
    b734:	87 2d       	mov	r24, r7
    b736:	0e 94 32 4e 	call	0x9c64	; 0x9c64 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:83
  strcpy(tds.name, name);
    b73a:	6b ed       	ldi	r22, 0xDB	; 219
    b73c:	7a e0       	ldi	r23, 0x0A	; 10
    b73e:	c7 01       	movw	r24, r14
    b740:	0e 94 70 af 	call	0x15ee0	; 0x15ee0 <strcpy>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:84
  set_tds18s20(idx, &tds);
    b744:	be 01       	movw	r22, r28
    b746:	68 5b       	subi	r22, 0xB8	; 184
    b748:	7f 4f       	sbci	r23, 0xFF	; 255
    b74a:	87 2d       	mov	r24, r7
    b74c:	0e 94 8d 4c 	call	0x991a	; 0x991a <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2337
        if ((cnt == 1) && (strcmp(pch, "offset") == 0)) tds_set_offset(id, atoi(my_payload));
    b750:	61 eb       	ldi	r22, 0xB1	; 177
    b752:	77 e0       	ldi	r23, 0x07	; 7
    b754:	c8 01       	movw	r24, r16
    b756:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    b75a:	89 2b       	or	r24, r25
    b75c:	a9 f4       	brne	.+42     	; 0xb788 <mqtt_callback(char*, unsigned char*, unsigned int)+0x712>
    b75e:	8b ed       	ldi	r24, 0xDB	; 219
    b760:	9a e0       	ldi	r25, 0x0A	; 10
    b762:	0e 94 b8 a2 	call	0x14570	; 0x14570 <atoi>
    b766:	6c 01       	movw	r12, r24
tds_set_offset():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:90
}
//// funkce nastavi offset cidlu tds
void tds_set_offset(uint8_t idx, int offset)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    b768:	be 01       	movw	r22, r28
    b76a:	68 5b       	subi	r22, 0xB8	; 184
    b76c:	7f 4f       	sbci	r23, 0xFF	; 255
    b76e:	87 2d       	mov	r24, r7
    b770:	0e 94 32 4e 	call	0x9c64	; 0x9c64 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:91
  tds.offset = offset;
    b774:	64 96       	adiw	r28, 0x14	; 20
    b776:	df ae       	std	Y+63, r13	; 0x3f
    b778:	ce ae       	std	Y+62, r12	; 0x3e
    b77a:	64 97       	sbiw	r28, 0x14	; 20
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:92
  set_tds18s20(idx, &tds);
    b77c:	be 01       	movw	r22, r28
    b77e:	68 5b       	subi	r22, 0xB8	; 184
    b780:	7f 4f       	sbci	r23, 0xFF	; 255
    b782:	87 2d       	mov	r24, r7
    b784:	0e 94 8d 4c 	call	0x991a	; 0x991a <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2338
        if ((cnt == 1) && (strcmp(pch, "period") == 0)) tds_set_period(id, atoi(my_payload));
    b788:	6a e3       	ldi	r22, 0x3A	; 58
    b78a:	76 e0       	ldi	r23, 0x06	; 6
    b78c:	c8 01       	movw	r24, r16
    b78e:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    b792:	89 2b       	or	r24, r25
    b794:	a1 f4       	brne	.+40     	; 0xb7be <mqtt_callback(char*, unsigned char*, unsigned int)+0x748>
    b796:	8b ed       	ldi	r24, 0xDB	; 219
    b798:	9a e0       	ldi	r25, 0x0A	; 10
    b79a:	0e 94 b8 a2 	call	0x14570	; 0x14570 <atoi>
    b79e:	18 2f       	mov	r17, r24
tds_set_period():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:106
///////
//// funkce nastavi periodu mereni
void tds_set_period(uint8_t idx, uint8_t period)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    b7a0:	be 01       	movw	r22, r28
    b7a2:	68 5b       	subi	r22, 0xB8	; 184
    b7a4:	7f 4f       	sbci	r23, 0xFF	; 255
    b7a6:	87 2d       	mov	r24, r7
    b7a8:	0e 94 32 4e 	call	0x9c64	; 0x9c64 <get_tds18s20(unsigned char, struct_DDS18s20*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2338
    b7ac:	6d 96       	adiw	r28, 0x1d	; 29
    b7ae:	1f af       	std	Y+63, r17	; 0x3f
    b7b0:	6d 97       	sbiw	r28, 0x1d	; 29
tds_set_period():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:108
  tds.period = period;
  set_tds18s20(idx, &tds);
    b7b2:	be 01       	movw	r22, r28
    b7b4:	68 5b       	subi	r22, 0xB8	; 184
    b7b6:	7f 4f       	sbci	r23, 0xFF	; 255
    b7b8:	87 2d       	mov	r24, r7
    b7ba:	0e 94 8d 4c 	call	0x991a	; 0x991a <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2344
      }
      else
      {
        log_error(&mqtt_client, "tds/set bad id");
      }
      pch = strtok (NULL, "/");
    b7be:	6f ec       	ldi	r22, 0xCF	; 207
    b7c0:	73 e0       	ldi	r23, 0x03	; 3
    b7c2:	90 e0       	ldi	r25, 0x00	; 0
    b7c4:	80 e0       	ldi	r24, 0x00	; 0
    b7c6:	0e 94 f1 a2 	call	0x145e2	; 0x145e2 <strtok>
    b7ca:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2345
      cnt++;
    b7cc:	63 94       	inc	r6
    b7ce:	8f cf       	rjmp	.-226    	; 0xb6ee <mqtt_callback(char*, unsigned char*, unsigned int)+0x678>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2350
    }
  }
  ////
  //// /thermctl-in/XXXX/tds/clear
  strcpy_P(str1, thermctl_header_in);
    b7d0:	65 ed       	ldi	r22, 0xD5	; 213
    b7d2:	7c e2       	ldi	r23, 0x2C	; 44
    b7d4:	c5 01       	movw	r24, r10
    b7d6:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2351
  strcat(str1, device.nazev);
    b7da:	65 e3       	ldi	r22, 0x35	; 53
    b7dc:	7c e0       	ldi	r23, 0x0C	; 12
    b7de:	c5 01       	movw	r24, r10
    b7e0:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2352
  strcat(str1, "/tds/clear");
    b7e4:	6b e3       	ldi	r22, 0x3B	; 59
    b7e6:	74 e0       	ldi	r23, 0x04	; 4
    b7e8:	c5 01       	movw	r24, r10
    b7ea:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2353
  if (strncmp(str1, topic, strlen(str1)) == 0)
    b7ee:	f5 01       	movw	r30, r10
    b7f0:	01 90       	ld	r0, Z+
    b7f2:	00 20       	and	r0, r0
    b7f4:	e9 f7       	brne	.-6      	; 0xb7f0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x77a>
    b7f6:	31 97       	sbiw	r30, 0x01	; 1
    b7f8:	af 01       	movw	r20, r30
    b7fa:	4a 19       	sub	r20, r10
    b7fc:	5b 09       	sbc	r21, r11
    b7fe:	b4 01       	movw	r22, r8
    b800:	c5 01       	movw	r24, r10
    b802:	0e 94 77 af 	call	0x15eee	; 0x15eee <strncmp>
    b806:	89 2b       	or	r24, r25
    b808:	a1 f4       	brne	.+40     	; 0xb832 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7bc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2355
  {
    mqtt_process_message++;
    b80a:	80 91 03 0a 	lds	r24, 0x0A03	; 0x800a03 <mqtt_process_message>
    b80e:	90 91 04 0a 	lds	r25, 0x0A04	; 0x800a04 <mqtt_process_message+0x1>
    b812:	01 96       	adiw	r24, 0x01	; 1
    b814:	90 93 04 0a 	sts	0x0A04, r25	; 0x800a04 <mqtt_process_message+0x1>
    b818:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2356
    id = atoi(my_payload);
    b81c:	8b ed       	ldi	r24, 0xDB	; 219
    b81e:	9a e0       	ldi	r25, 0x0A	; 10
    b820:	0e 94 b8 a2 	call	0x14570	; 0x14570 <atoi>
    b824:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2357
    if (id < HW_ONEWIRE_MAXROMS)
    b826:	b5 e0       	ldi	r27, 0x05	; 5
    b828:	b8 17       	cp	r27, r24
    b82a:	08 f4       	brcc	.+2      	; 0xb82e <mqtt_callback(char*, unsigned char*, unsigned int)+0x7b8>
    b82c:	83 c0       	rjmp	.+262    	; 0xb934 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8be>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2358
      tds_set_clear(id);
    b82e:	0e 94 79 4f 	call	0x9ef2	; 0x9ef2 <tds_set_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2367
  ////////
  ////////
  /// nastavovani vlastnosti RTDS ///

  //// thermctl-in/XXXXX/rtds/register - registruje nove vzdalene cidlo
  strcpy_P(str1, thermctl_header_in);
    b832:	65 ed       	ldi	r22, 0xD5	; 213
    b834:	7c e2       	ldi	r23, 0x2C	; 44
    b836:	c5 01       	movw	r24, r10
    b838:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2368
  strcat(str1, device.nazev);
    b83c:	65 e3       	ldi	r22, 0x35	; 53
    b83e:	7c e0       	ldi	r23, 0x0C	; 12
    b840:	c5 01       	movw	r24, r10
    b842:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2369
  strcat(str1, "/rtds/register");
    b846:	67 e5       	ldi	r22, 0x57	; 87
    b848:	74 e0       	ldi	r23, 0x04	; 4
    b84a:	c5 01       	movw	r24, r10
    b84c:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2370
  if (strncmp(str1, topic, strlen(str1)) == 0)
    b850:	f5 01       	movw	r30, r10
    b852:	01 90       	ld	r0, Z+
    b854:	00 20       	and	r0, r0
    b856:	e9 f7       	brne	.-6      	; 0xb852 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7dc>
    b858:	31 97       	sbiw	r30, 0x01	; 1
    b85a:	af 01       	movw	r20, r30
    b85c:	4a 19       	sub	r20, r10
    b85e:	5b 09       	sbc	r21, r11
    b860:	b4 01       	movw	r22, r8
    b862:	c5 01       	movw	r24, r10
    b864:	0e 94 77 af 	call	0x15eee	; 0x15eee <strncmp>
    b868:	89 2b       	or	r24, r25
    b86a:	d1 f4       	brne	.+52     	; 0xb8a0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x82a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2372
  {
    mqtt_process_message++;
    b86c:	80 91 03 0a 	lds	r24, 0x0A03	; 0x800a03 <mqtt_process_message>
    b870:	90 91 04 0a 	lds	r25, 0x0A04	; 0x800a04 <mqtt_process_message+0x1>
    b874:	01 96       	adiw	r24, 0x01	; 1
    b876:	90 93 04 0a 	sts	0x0A04, r25	; 0x800a04 <mqtt_process_message+0x1>
    b87a:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2373
    if (remote_tds_name_exist(my_payload) == 255)
    b87e:	8b ed       	ldi	r24, 0xDB	; 219
    b880:	9a e0       	ldi	r25, 0x0A	; 10
    b882:	0e 94 69 57 	call	0xaed2	; 0xaed2 <remote_tds_name_exist(char*)>
    b886:	8f 3f       	cpi	r24, 0xFF	; 255
    b888:	59 f4       	brne	.+22     	; 0xb8a0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x82a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2375
    {
      id = remote_tds_find_free();
    b88a:	0e 94 e8 53 	call	0xa7d0	; 0xa7d0 <remote_tds_find_free()>
    b88e:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2376
      remote_tds_set_complete(id, 1, my_payload);
    b890:	4b ed       	ldi	r20, 0xDB	; 219
    b892:	5a e0       	ldi	r21, 0x0A	; 10
    b894:	61 e0       	ldi	r22, 0x01	; 1
    b896:	0e 94 dc 4d 	call	0x9bb8	; 0x9bb8 <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2377
      remote_tds_subscibe_topic(id);
    b89a:	87 2d       	mov	r24, r7
    b89c:	0e 94 cb 57 	call	0xaf96	; 0xaf96 <remote_tds_subscibe_topic(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2383
    }
    ///TODO - vratit ze jiz existuje
  }

  //// thermctl-in/XXXXX/rtds/set/IDX/name - nastavi a udela prihlaseni
  strcpy_P(str1, thermctl_header_in);
    b8a0:	65 ed       	ldi	r22, 0xD5	; 213
    b8a2:	7c e2       	ldi	r23, 0x2C	; 44
    b8a4:	c5 01       	movw	r24, r10
    b8a6:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2384
  strcat(str1, device.nazev);
    b8aa:	65 e3       	ldi	r22, 0x35	; 53
    b8ac:	7c e0       	ldi	r23, 0x0C	; 12
    b8ae:	c5 01       	movw	r24, r10
    b8b0:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2385
  strcat(str1, "/rtds/set/");
    b8b4:	66 e6       	ldi	r22, 0x66	; 102
    b8b6:	74 e0       	ldi	r23, 0x04	; 4
    b8b8:	c5 01       	movw	r24, r10
    b8ba:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2386
  if (strncmp(str1, topic, strlen(str1)) == 0)
    b8be:	f5 01       	movw	r30, r10
    b8c0:	01 90       	ld	r0, Z+
    b8c2:	00 20       	and	r0, r0
    b8c4:	e9 f7       	brne	.-6      	; 0xb8c0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x84a>
    b8c6:	31 97       	sbiw	r30, 0x01	; 1
    b8c8:	af 01       	movw	r20, r30
    b8ca:	4a 19       	sub	r20, r10
    b8cc:	5b 09       	sbc	r21, r11
    b8ce:	b4 01       	movw	r22, r8
    b8d0:	c5 01       	movw	r24, r10
    b8d2:	0e 94 77 af 	call	0x15eee	; 0x15eee <strncmp>
    b8d6:	89 2b       	or	r24, r25
    b8d8:	09 f0       	breq	.+2      	; 0xb8dc <mqtt_callback(char*, unsigned char*, unsigned int)+0x866>
    b8da:	6a c0       	rjmp	.+212    	; 0xb9b0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x93a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2388
  {
    mqtt_process_message++;
    b8dc:	80 91 03 0a 	lds	r24, 0x0A03	; 0x800a03 <mqtt_process_message>
    b8e0:	90 91 04 0a 	lds	r25, 0x0A04	; 0x800a04 <mqtt_process_message+0x1>
    b8e4:	01 96       	adiw	r24, 0x01	; 1
    b8e6:	90 93 04 0a 	sts	0x0A04, r25	; 0x800a04 <mqtt_process_message+0x1>
    b8ea:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2390
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    b8ee:	f5 01       	movw	r30, r10
    b8f0:	01 90       	ld	r0, Z+
    b8f2:	00 20       	and	r0, r0
    b8f4:	e9 f7       	brne	.-6      	; 0xb8f0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x87a>
    b8f6:	31 97       	sbiw	r30, 0x01	; 1
    b8f8:	ea 19       	sub	r30, r10
    b8fa:	fb 09       	sbc	r31, r11
    b8fc:	9e 2f       	mov	r25, r30
    b8fe:	4e 2f       	mov	r20, r30
    b900:	84 2f       	mov	r24, r20
    b902:	89 1b       	sub	r24, r25
    b904:	24 2f       	mov	r18, r20
    b906:	30 e0       	ldi	r19, 0x00	; 0
    b908:	d4 01       	movw	r26, r8
    b90a:	0d 90       	ld	r0, X+
    b90c:	00 20       	and	r0, r0
    b90e:	e9 f7       	brne	.-6      	; 0xb90a <mqtt_callback(char*, unsigned char*, unsigned int)+0x894>
    b910:	11 97       	sbiw	r26, 0x01	; 1
    b912:	a8 19       	sub	r26, r8
    b914:	b9 09       	sbc	r27, r9
    b916:	2a 17       	cp	r18, r26
    b918:	3b 07       	cpc	r19, r27
    b91a:	88 f4       	brcc	.+34     	; 0xb93e <mqtt_callback(char*, unsigned char*, unsigned int)+0x8c8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2392
    {
      str1[cnt] = topic[f];
    b91c:	d5 01       	movw	r26, r10
    b91e:	a8 0f       	add	r26, r24
    b920:	b1 1d       	adc	r27, r1
    b922:	28 0d       	add	r18, r8
    b924:	39 1d       	adc	r19, r9
    b926:	f9 01       	movw	r30, r18
    b928:	80 81       	ld	r24, Z
    b92a:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2393
      str1[cnt + 1] = 0;
    b92c:	11 96       	adiw	r26, 0x01	; 1
    b92e:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2390
  strcat(str1, "/rtds/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    b930:	4f 5f       	subi	r20, 0xFF	; 255
    b932:	e6 cf       	rjmp	.-52     	; 0xb900 <mqtt_callback(char*, unsigned char*, unsigned int)+0x88a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2360
    mqtt_process_message++;
    id = atoi(my_payload);
    if (id < HW_ONEWIRE_MAXROMS)
      tds_set_clear(id);
    else
      log_error(&mqtt_client, "tds/clear bad id");
    b934:	86 e4       	ldi	r24, 0x46	; 70
    b936:	94 e0       	ldi	r25, 0x04	; 4
    b938:	0e 94 64 81 	call	0x102c8	; 0x102c8 <log_error(PubSubClient*, char*) [clone .constprop.61]>
    b93c:	7a cf       	rjmp	.-268    	; 0xb832 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7bc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2397
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    b93e:	6f ec       	ldi	r22, 0xCF	; 207
    b940:	73 e0       	ldi	r23, 0x03	; 3
    b942:	c5 01       	movw	r24, r10
    b944:	0e 94 f1 a2 	call	0x145e2	; 0x145e2 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2396
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    b948:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2398
    pch = strtok (str1, "/");
    while (pch != NULL)
    b94a:	00 97       	sbiw	r24, 0x00	; 0
    b94c:	89 f1       	breq	.+98     	; 0xb9b0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x93a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2400
    {
      if (cnt == 0) id = atoi(pch);
    b94e:	11 11       	cpse	r17, r1
    b950:	0b c0       	rjmp	.+22     	; 0xb968 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8f2>
    b952:	0e 94 b8 a2 	call	0x14570	; 0x14570 <atoi>
    b956:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2414
        else
        {
          log_error(&mqtt_client, "rtds/set bad id");
        }
      }
      pch = strtok (NULL, "/");
    b958:	6f ec       	ldi	r22, 0xCF	; 207
    b95a:	73 e0       	ldi	r23, 0x03	; 3
    b95c:	90 e0       	ldi	r25, 0x00	; 0
    b95e:	80 e0       	ldi	r24, 0x00	; 0
    b960:	0e 94 f1 a2 	call	0x145e2	; 0x145e2 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2415
      cnt++;
    b964:	1f 5f       	subi	r17, 0xFF	; 255
    b966:	f1 cf       	rjmp	.-30     	; 0xb94a <mqtt_callback(char*, unsigned char*, unsigned int)+0x8d4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2401
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if ((cnt == 1) && (strcmp(pch, "name") == 0))
    b968:	11 30       	cpi	r17, 0x01	; 1
    b96a:	b1 f7       	brne	.-20     	; 0xb958 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8e2>
    b96c:	68 ea       	ldi	r22, 0xA8	; 168
    b96e:	73 e0       	ldi	r23, 0x03	; 3
    b970:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    b974:	89 2b       	or	r24, r25
    b976:	81 f7       	brne	.-32     	; 0xb958 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2403
      {
        remote_tds_get_active(id, &active);
    b978:	be 01       	movw	r22, r28
    b97a:	64 5d       	subi	r22, 0xD4	; 212
    b97c:	7e 4f       	sbci	r23, 0xFE	; 254
    b97e:	87 2d       	mov	r24, r7
    b980:	0e 94 ba 53 	call	0xa774	; 0xa774 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2404
        if (active == 0)
    b984:	c4 5d       	subi	r28, 0xD4	; 212
    b986:	de 4f       	sbci	r29, 0xFE	; 254
    b988:	88 81       	ld	r24, Y
    b98a:	cc 52       	subi	r28, 0x2C	; 44
    b98c:	d1 40       	sbci	r29, 0x01	; 1
    b98e:	81 11       	cpse	r24, r1
    b990:	0a c0       	rjmp	.+20     	; 0xb9a6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x930>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2406
        {
          remote_tds_set_complete(id, 1, my_payload);
    b992:	4b ed       	ldi	r20, 0xDB	; 219
    b994:	5a e0       	ldi	r21, 0x0A	; 10
    b996:	61 e0       	ldi	r22, 0x01	; 1
    b998:	87 2d       	mov	r24, r7
    b99a:	0e 94 dc 4d 	call	0x9bb8	; 0x9bb8 <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2407
          remote_tds_subscibe_topic(id);
    b99e:	87 2d       	mov	r24, r7
    b9a0:	0e 94 cb 57 	call	0xaf96	; 0xaf96 <remote_tds_subscibe_topic(unsigned char)>
    b9a4:	d9 cf       	rjmp	.-78     	; 0xb958 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2411
        }
        else
        {
          log_error(&mqtt_client, "rtds/set bad id");
    b9a6:	81 e7       	ldi	r24, 0x71	; 113
    b9a8:	94 e0       	ldi	r25, 0x04	; 4
    b9aa:	0e 94 64 81 	call	0x102c8	; 0x102c8 <log_error(PubSubClient*, char*) [clone .constprop.61]>
    b9ae:	d4 cf       	rjmp	.-88     	; 0xb958 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2421
    }
  }

  ////
  //// /thermctl-in/XXXX/rtds/clear index vymaze a odhlasi
  strcpy_P(str1, thermctl_header_in);
    b9b0:	65 ed       	ldi	r22, 0xD5	; 213
    b9b2:	7c e2       	ldi	r23, 0x2C	; 44
    b9b4:	c5 01       	movw	r24, r10
    b9b6:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2422
  strcat(str1, device.nazev);
    b9ba:	65 e3       	ldi	r22, 0x35	; 53
    b9bc:	7c e0       	ldi	r23, 0x0C	; 12
    b9be:	c5 01       	movw	r24, r10
    b9c0:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2423
  strcat(str1, "/rtds/clear");
    b9c4:	61 e8       	ldi	r22, 0x81	; 129
    b9c6:	74 e0       	ldi	r23, 0x04	; 4
    b9c8:	c5 01       	movw	r24, r10
    b9ca:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2424
  if (strncmp(str1, topic, strlen(str1)) == 0)
    b9ce:	f5 01       	movw	r30, r10
    b9d0:	01 90       	ld	r0, Z+
    b9d2:	00 20       	and	r0, r0
    b9d4:	e9 f7       	brne	.-6      	; 0xb9d0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x95a>
    b9d6:	31 97       	sbiw	r30, 0x01	; 1
    b9d8:	af 01       	movw	r20, r30
    b9da:	4a 19       	sub	r20, r10
    b9dc:	5b 09       	sbc	r21, r11
    b9de:	b4 01       	movw	r22, r8
    b9e0:	c5 01       	movw	r24, r10
    b9e2:	0e 94 77 af 	call	0x15eee	; 0x15eee <strncmp>
    b9e6:	89 2b       	or	r24, r25
    b9e8:	09 f0       	breq	.+2      	; 0xb9ec <mqtt_callback(char*, unsigned char*, unsigned int)+0x976>
    b9ea:	6f c0       	rjmp	.+222    	; 0xbaca <mqtt_callback(char*, unsigned char*, unsigned int)+0xa54>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2426
  {
    mqtt_process_message++;
    b9ec:	80 91 03 0a 	lds	r24, 0x0A03	; 0x800a03 <mqtt_process_message>
    b9f0:	90 91 04 0a 	lds	r25, 0x0A04	; 0x800a04 <mqtt_process_message+0x1>
    b9f4:	01 96       	adiw	r24, 0x01	; 1
    b9f6:	90 93 04 0a 	sts	0x0A04, r25	; 0x800a04 <mqtt_process_message+0x1>
    b9fa:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2427
    id = atoi(my_payload);
    b9fe:	8b ed       	ldi	r24, 0xDB	; 219
    ba00:	9a e0       	ldi	r25, 0x0A	; 10
    ba02:	0e 94 b8 a2 	call	0x14570	; 0x14570 <atoi>
    ba06:	78 2e       	mov	r7, r24
remote_tds_unsubscibe_topic():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2053
/// funkce pro zruseni odebirani topicu vzdalenych cidel
void remote_tds_unsubscibe_topic(uint8_t idx)
{
  char tmp1[64];
  char tmp2[64];
  uint8_t active = 0;
    ba08:	c8 5f       	subi	r28, 0xF8	; 248
    ba0a:	de 4f       	sbci	r29, 0xFE	; 254
    ba0c:	18 82       	st	Y, r1
    ba0e:	c8 50       	subi	r28, 0x08	; 8
    ba10:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2054
  remote_tds_get_complete(idx, &active, tmp1);
    ba12:	ae 01       	movw	r20, r28
    ba14:	48 57       	subi	r20, 0x78	; 120
    ba16:	5f 4f       	sbci	r21, 0xFF	; 255
    ba18:	be 01       	movw	r22, r28
    ba1a:	68 5f       	subi	r22, 0xF8	; 248
    ba1c:	7e 4f       	sbci	r23, 0xFE	; 254
    ba1e:	0e 94 34 54 	call	0xa868	; 0xa868 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2055
  if (active == 1)
    ba22:	c8 5f       	subi	r28, 0xF8	; 248
    ba24:	de 4f       	sbci	r29, 0xFE	; 254
    ba26:	88 81       	ld	r24, Y
    ba28:	c8 50       	subi	r28, 0x08	; 8
    ba2a:	d1 40       	sbci	r29, 0x01	; 1
    ba2c:	81 30       	cpi	r24, 0x01	; 1
    ba2e:	09 f0       	breq	.+2      	; 0xba32 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9bc>
    ba30:	49 c0       	rjmp	.+146    	; 0xbac4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa4e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2057
  {
    strcpy(tmp2, "/rtds/");
    ba32:	8e 01       	movw	r16, r28
    ba34:	08 5b       	subi	r16, 0xB8	; 184
    ba36:	1f 4f       	sbci	r17, 0xFF	; 255
    ba38:	6a ec       	ldi	r22, 0xCA	; 202
    ba3a:	73 e0       	ldi	r23, 0x03	; 3
    ba3c:	c8 01       	movw	r24, r16
    ba3e:	0e 94 70 af 	call	0x15ee0	; 0x15ee0 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2058
    strcat(tmp2, tmp1);
    ba42:	be 01       	movw	r22, r28
    ba44:	68 57       	subi	r22, 0x78	; 120
    ba46:	7f 4f       	sbci	r23, 0xFF	; 255
    ba48:	c8 01       	movw	r24, r16
    ba4a:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
unsubscribe():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:497
    }
    return false;
}

boolean PubSubClient::unsubscribe(const char* topic) {
    if (MQTT_MAX_PACKET_SIZE < 9 + strlen(topic)) {
    ba4e:	d8 01       	movw	r26, r16
    ba50:	0d 90       	ld	r0, X+
    ba52:	00 20       	and	r0, r0
    ba54:	e9 f7       	brne	.-6      	; 0xba50 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9da>
    ba56:	cd 01       	movw	r24, r26
    ba58:	80 1b       	sub	r24, r16
    ba5a:	91 0b       	sbc	r25, r17
    ba5c:	08 96       	adiw	r24, 0x08	; 8
    ba5e:	81 30       	cpi	r24, 0x01	; 1
    ba60:	92 40       	sbci	r25, 0x02	; 2
    ba62:	80 f5       	brcc	.+96     	; 0xbac4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa4e>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:501
        // Too long
        return false;
    }
    if (connected()) {
    ba64:	82 e1       	ldi	r24, 0x12	; 18
    ba66:	9e e0       	ldi	r25, 0x0E	; 14
    ba68:	0e 94 14 8c 	call	0x11828	; 0x11828 <PubSubClient::connected()>
    ba6c:	88 23       	and	r24, r24
    ba6e:	51 f1       	breq	.+84     	; 0xbac4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa4e>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:503
        uint16_t length = 5;
        nextMsgId++;
    ba70:	80 91 14 10 	lds	r24, 0x1014	; 0x801014 <mqtt_client+0x202>
    ba74:	90 91 15 10 	lds	r25, 0x1015	; 0x801015 <mqtt_client+0x203>
    ba78:	01 96       	adiw	r24, 0x01	; 1
    ba7a:	90 93 15 10 	sts	0x1015, r25	; 0x801015 <mqtt_client+0x203>
    ba7e:	80 93 14 10 	sts	0x1014, r24	; 0x801014 <mqtt_client+0x202>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:504
        if (nextMsgId == 0) {
    ba82:	89 2b       	or	r24, r25
    ba84:	31 f4       	brne	.+12     	; 0xba92 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa1c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:505
            nextMsgId = 1;
    ba86:	81 e0       	ldi	r24, 0x01	; 1
    ba88:	90 e0       	ldi	r25, 0x00	; 0
    ba8a:	90 93 15 10 	sts	0x1015, r25	; 0x801015 <mqtt_client+0x203>
    ba8e:	80 93 14 10 	sts	0x1014, r24	; 0x801014 <mqtt_client+0x202>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:507
        }
        buffer[length++] = (nextMsgId >> 8);
    ba92:	80 91 14 10 	lds	r24, 0x1014	; 0x801014 <mqtt_client+0x202>
    ba96:	90 91 15 10 	lds	r25, 0x1015	; 0x801015 <mqtt_client+0x203>
    ba9a:	90 93 19 0e 	sts	0x0E19, r25	; 0x800e19 <mqtt_client+0x7>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:508
        buffer[length++] = (nextMsgId & 0xFF);
    ba9e:	80 93 1a 0e 	sts	0x0E1A, r24	; 0x800e1a <mqtt_client+0x8>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:509
        length = writeString(topic, buffer,length);
    baa2:	47 e0       	ldi	r20, 0x07	; 7
    baa4:	50 e0       	ldi	r21, 0x00	; 0
    baa6:	64 e1       	ldi	r22, 0x14	; 20
    baa8:	7e e0       	ldi	r23, 0x0E	; 14
    baaa:	c8 01       	movw	r24, r16
    baac:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.149]>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:510
        return write(MQTTUNSUBSCRIBE|MQTTQOS1,buffer,length-5);
    bab0:	9c 01       	movw	r18, r24
    bab2:	25 50       	subi	r18, 0x05	; 5
    bab4:	31 09       	sbc	r19, r1
    bab6:	44 e1       	ldi	r20, 0x14	; 20
    bab8:	5e e0       	ldi	r21, 0x0E	; 14
    baba:	62 ea       	ldi	r22, 0xA2	; 162
    babc:	82 e1       	ldi	r24, 0x12	; 18
    babe:	9e e0       	ldi	r25, 0x0E	; 14
    bac0:	0e 94 ae 8d 	call	0x11b5c	; 0x11b5c <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2430
  {
    mqtt_process_message++;
    id = atoi(my_payload);
    remote_tds_unsubscibe_topic(id);
    /// TODO dodelat navratovou chybu
    remote_tds_clear(id);
    bac4:	87 2d       	mov	r24, r7
    bac6:	0e 94 f3 4d 	call	0x9be6	; 0x9be6 <remote_tds_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2434
  }
  ///
  //// ziska nastaveni remote_tds
  strcpy_P(str1, thermctl_header_in);
    baca:	65 ed       	ldi	r22, 0xD5	; 213
    bacc:	7c e2       	ldi	r23, 0x2C	; 44
    bace:	c5 01       	movw	r24, r10
    bad0:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2435
  strcat(str1, device.nazev);
    bad4:	65 e3       	ldi	r22, 0x35	; 53
    bad6:	7c e0       	ldi	r23, 0x0C	; 12
    bad8:	c5 01       	movw	r24, r10
    bada:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2436
  strcat(str1, "/rtds/get");
    bade:	6d e8       	ldi	r22, 0x8D	; 141
    bae0:	74 e0       	ldi	r23, 0x04	; 4
    bae2:	c5 01       	movw	r24, r10
    bae4:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2437
  if (strncmp(str1, topic, strlen(str1)) == 0)
    bae8:	f5 01       	movw	r30, r10
    baea:	01 90       	ld	r0, Z+
    baec:	00 20       	and	r0, r0
    baee:	e9 f7       	brne	.-6      	; 0xbaea <mqtt_callback(char*, unsigned char*, unsigned int)+0xa74>
    baf0:	31 97       	sbiw	r30, 0x01	; 1
    baf2:	af 01       	movw	r20, r30
    baf4:	4a 19       	sub	r20, r10
    baf6:	5b 09       	sbc	r21, r11
    baf8:	b4 01       	movw	r22, r8
    bafa:	c5 01       	movw	r24, r10
    bafc:	0e 94 77 af 	call	0x15eee	; 0x15eee <strncmp>
    bb00:	89 2b       	or	r24, r25
    bb02:	11 f4       	brne	.+4      	; 0xbb08 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa92>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2439
  {
    send_mqtt_remote_tds_status();
    bb04:	0e 94 e7 56 	call	0xadce	; 0xadce <send_mqtt_remote_tds_status()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2443
  }
  ////
  //// rtds/NAME - hodnota, kde NAME je nazev cidla
  strcpy(str1, "/rtds/");
    bb08:	6a ec       	ldi	r22, 0xCA	; 202
    bb0a:	73 e0       	ldi	r23, 0x03	; 3
    bb0c:	c5 01       	movw	r24, r10
    bb0e:	0e 94 70 af 	call	0x15ee0	; 0x15ee0 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2444
  if (strncmp(str1, topic, strlen(str1)) == 0)
    bb12:	f5 01       	movw	r30, r10
    bb14:	01 90       	ld	r0, Z+
    bb16:	00 20       	and	r0, r0
    bb18:	e9 f7       	brne	.-6      	; 0xbb14 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa9e>
    bb1a:	31 97       	sbiw	r30, 0x01	; 1
    bb1c:	af 01       	movw	r20, r30
    bb1e:	4a 19       	sub	r20, r10
    bb20:	5b 09       	sbc	r21, r11
    bb22:	b4 01       	movw	r22, r8
    bb24:	c5 01       	movw	r24, r10
    bb26:	0e 94 77 af 	call	0x15eee	; 0x15eee <strncmp>
    bb2a:	89 2b       	or	r24, r25
    bb2c:	09 f0       	breq	.+2      	; 0xbb30 <mqtt_callback(char*, unsigned char*, unsigned int)+0xaba>
    bb2e:	74 c0       	rjmp	.+232    	; 0xbc18 <mqtt_callback(char*, unsigned char*, unsigned int)+0xba2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2446
  {
    mqtt_process_message++;
    bb30:	80 91 03 0a 	lds	r24, 0x0A03	; 0x800a03 <mqtt_process_message>
    bb34:	90 91 04 0a 	lds	r25, 0x0A04	; 0x800a04 <mqtt_process_message+0x1>
    bb38:	01 96       	adiw	r24, 0x01	; 1
    bb3a:	90 93 04 0a 	sts	0x0A04, r25	; 0x800a04 <mqtt_process_message+0x1>
    bb3e:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2448
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    bb42:	f5 01       	movw	r30, r10
    bb44:	01 90       	ld	r0, Z+
    bb46:	00 20       	and	r0, r0
    bb48:	e9 f7       	brne	.-6      	; 0xbb44 <mqtt_callback(char*, unsigned char*, unsigned int)+0xace>
    bb4a:	31 97       	sbiw	r30, 0x01	; 1
    bb4c:	ea 19       	sub	r30, r10
    bb4e:	fb 09       	sbc	r31, r11
    bb50:	9e 2f       	mov	r25, r30
    bb52:	4e 2f       	mov	r20, r30
    bb54:	84 2f       	mov	r24, r20
    bb56:	89 1b       	sub	r24, r25
    bb58:	24 2f       	mov	r18, r20
    bb5a:	30 e0       	ldi	r19, 0x00	; 0
    bb5c:	d4 01       	movw	r26, r8
    bb5e:	0d 90       	ld	r0, X+
    bb60:	00 20       	and	r0, r0
    bb62:	e9 f7       	brne	.-6      	; 0xbb5e <mqtt_callback(char*, unsigned char*, unsigned int)+0xae8>
    bb64:	11 97       	sbiw	r26, 0x01	; 1
    bb66:	a8 19       	sub	r26, r8
    bb68:	b9 09       	sbc	r27, r9
    bb6a:	2a 17       	cp	r18, r26
    bb6c:	3b 07       	cpc	r19, r27
    bb6e:	60 f4       	brcc	.+24     	; 0xbb88 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2450
    {
      str1[cnt] = topic[f];
    bb70:	d5 01       	movw	r26, r10
    bb72:	a8 0f       	add	r26, r24
    bb74:	b1 1d       	adc	r27, r1
    bb76:	28 0d       	add	r18, r8
    bb78:	39 1d       	adc	r19, r9
    bb7a:	f9 01       	movw	r30, r18
    bb7c:	80 81       	ld	r24, Z
    bb7e:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2451
      str1[cnt + 1] = 0;
    bb80:	11 96       	adiw	r26, 0x01	; 1
    bb82:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2448
  strcpy(str1, "/rtds/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    bb84:	4f 5f       	subi	r20, 0xFF	; 255
    bb86:	e6 cf       	rjmp	.-52     	; 0xbb54 <mqtt_callback(char*, unsigned char*, unsigned int)+0xade>
    bb88:	b4 e6       	ldi	r27, 0x64	; 100
    bb8a:	cb 2e       	mov	r12, r27
    bb8c:	d1 2c       	mov	r13, r1
    bb8e:	e1 2c       	mov	r14, r1
    bb90:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2454
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    bb92:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2456
    {
      uint8_t active = 0;
    bb94:	29 96       	adiw	r28, 0x09	; 9
    bb96:	1f ae       	std	Y+63, r1	; 0x3f
    bb98:	29 97       	sbiw	r28, 0x09	; 9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2457
      remote_tds_get_complete(idx, &active, tmp1);
    bb9a:	ae 01       	movw	r20, r28
    bb9c:	44 5e       	subi	r20, 0xE4	; 228
    bb9e:	5e 4f       	sbci	r21, 0xFE	; 254
    bba0:	be 01       	movw	r22, r28
    bba2:	68 5b       	subi	r22, 0xB8	; 184
    bba4:	7f 4f       	sbci	r23, 0xFF	; 255
    bba6:	81 2f       	mov	r24, r17
    bba8:	0e 94 34 54 	call	0xa868	; 0xa868 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2458
      if (active == 1 && strcmp(tmp1, str1) == 0)
    bbac:	29 96       	adiw	r28, 0x09	; 9
    bbae:	8f ad       	ldd	r24, Y+63	; 0x3f
    bbb0:	29 97       	sbiw	r28, 0x09	; 9
    bbb2:	81 30       	cpi	r24, 0x01	; 1
    bbb4:	21 f5       	brne	.+72     	; 0xbbfe <mqtt_callback(char*, unsigned char*, unsigned int)+0xb88>
    bbb6:	b5 01       	movw	r22, r10
    bbb8:	ce 01       	movw	r24, r28
    bbba:	84 5e       	subi	r24, 0xE4	; 228
    bbbc:	9e 4f       	sbci	r25, 0xFE	; 254
    bbbe:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    bbc2:	89 2b       	or	r24, r25
    bbc4:	e1 f4       	brne	.+56     	; 0xbbfe <mqtt_callback(char*, unsigned char*, unsigned int)+0xb88>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2460
      {
        remote_tds_set_data(idx, atoi(my_payload));
    bbc6:	8b ed       	ldi	r24, 0xDB	; 219
    bbc8:	9a e0       	ldi	r25, 0x0A	; 10
    bbca:	0e 94 b8 a2 	call	0x14570	; 0x14570 <atoi>
    bbce:	09 2f       	mov	r16, r25
remote_tds_set_data():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2103
///
void remote_tds_set_data(uint8_t idx, int temp)
{
  if (idx < MAX_RTDS)
  {
    SRAM.writeByte(ram_remote_tds_store_data_low + (ram_remote_tds_store_size * idx), (temp & 0xff));
    bbd0:	48 2f       	mov	r20, r24
    bbd2:	c7 01       	movw	r24, r14
    bbd4:	b6 01       	movw	r22, r12
    bbd6:	0e 94 8a 82 	call	0x10514	; 0x10514 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.181]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2104
    SRAM.writeByte(ram_remote_tds_store_data_high + (ram_remote_tds_store_size * idx), ((temp >> 8) & 0xff));
    bbda:	40 2f       	mov	r20, r16
    bbdc:	c7 01       	movw	r24, r14
    bbde:	b6 01       	movw	r22, r12
    bbe0:	6f 5f       	subi	r22, 0xFF	; 255
    bbe2:	7f 4f       	sbci	r23, 0xFF	; 255
    bbe4:	8f 4f       	sbci	r24, 0xFF	; 255
    bbe6:	9f 4f       	sbci	r25, 0xFF	; 255
    bbe8:	0e 94 8a 82 	call	0x10514	; 0x10514 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.181]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2105
    SRAM.writeByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx), 0);
    bbec:	40 e0       	ldi	r20, 0x00	; 0
    bbee:	c7 01       	movw	r24, r14
    bbf0:	b6 01       	movw	r22, r12
    bbf2:	6e 5f       	subi	r22, 0xFE	; 254
    bbf4:	7f 4f       	sbci	r23, 0xFF	; 255
    bbf6:	8f 4f       	sbci	r24, 0xFF	; 255
    bbf8:	9f 4f       	sbci	r25, 0xFF	; 255
    bbfa:	0e 94 8a 82 	call	0x10514	; 0x10514 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.181]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2454
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    bbfe:	1f 5f       	subi	r17, 0xFF	; 255
    bc00:	f3 e0       	ldi	r31, 0x03	; 3
    bc02:	cf 0e       	add	r12, r31
    bc04:	d1 1c       	adc	r13, r1
    bc06:	e1 1c       	adc	r14, r1
    bc08:	f1 1c       	adc	r15, r1
    bc0a:	22 e8       	ldi	r18, 0x82	; 130
    bc0c:	c2 16       	cp	r12, r18
    bc0e:	d1 04       	cpc	r13, r1
    bc10:	e1 04       	cpc	r14, r1
    bc12:	f1 04       	cpc	r15, r1
    bc14:	09 f0       	breq	.+2      	; 0xbc18 <mqtt_callback(char*, unsigned char*, unsigned int)+0xba2>
    bc16:	be cf       	rjmp	.-132    	; 0xbb94 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb1e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2464
      {
        remote_tds_set_data(idx, atoi(my_payload));
      }
    }
  }
  strcpy(str1, "/rtds/list");
    bc18:	67 e9       	ldi	r22, 0x97	; 151
    bc1a:	74 e0       	ldi	r23, 0x04	; 4
    bc1c:	c5 01       	movw	r24, r10
    bc1e:	0e 94 70 af 	call	0x15ee0	; 0x15ee0 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2479
  //// thermctl-in/XXXXX/prog/set/IDX/active  - 0-off, 1-heat, 2-cool,3.....
  //// thermctl-in/XXXXX/prog_interval/set/IDX/IDcko/theshold - pro jednotlive casove useky ruzne teploty
  //// thermctl-in/XXXXX/prog_interval/set/IDX/IDcko/active - pro jednotlivy usek povoleni zakazani
  //// thermctl-in/XXXXX/prog_interval/set/IDX/IDcko/time - nastavi cas pro jednotlive intervaly
  //// thermctl-in/XXXXX/prog/clear - IDX
  strcpy_P(str1, thermctl_header_in);
    bc22:	65 ed       	ldi	r22, 0xD5	; 213
    bc24:	7c e2       	ldi	r23, 0x2C	; 44
    bc26:	c5 01       	movw	r24, r10
    bc28:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2480
  strcat(str1, device.nazev);
    bc2c:	65 e3       	ldi	r22, 0x35	; 53
    bc2e:	7c e0       	ldi	r23, 0x0C	; 12
    bc30:	c5 01       	movw	r24, r10
    bc32:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2481
  strcat(str1, "/prog/set/");
    bc36:	62 ea       	ldi	r22, 0xA2	; 162
    bc38:	74 e0       	ldi	r23, 0x04	; 4
    bc3a:	c5 01       	movw	r24, r10
    bc3c:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2482
  if (strncmp(str1, topic, strlen(str1)) == 0)
    bc40:	f5 01       	movw	r30, r10
    bc42:	01 90       	ld	r0, Z+
    bc44:	00 20       	and	r0, r0
    bc46:	e9 f7       	brne	.-6      	; 0xbc42 <mqtt_callback(char*, unsigned char*, unsigned int)+0xbcc>
    bc48:	31 97       	sbiw	r30, 0x01	; 1
    bc4a:	af 01       	movw	r20, r30
    bc4c:	4a 19       	sub	r20, r10
    bc4e:	5b 09       	sbc	r21, r11
    bc50:	b4 01       	movw	r22, r8
    bc52:	c5 01       	movw	r24, r10
    bc54:	0e 94 77 af 	call	0x15eee	; 0x15eee <strncmp>
    bc58:	89 2b       	or	r24, r25
    bc5a:	09 f0       	breq	.+2      	; 0xbc5e <mqtt_callback(char*, unsigned char*, unsigned int)+0xbe8>
    bc5c:	75 c0       	rjmp	.+234    	; 0xbd48 <mqtt_callback(char*, unsigned char*, unsigned int)+0xcd2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2484
  {
    mqtt_process_message++;
    bc5e:	80 91 03 0a 	lds	r24, 0x0A03	; 0x800a03 <mqtt_process_message>
    bc62:	90 91 04 0a 	lds	r25, 0x0A04	; 0x800a04 <mqtt_process_message+0x1>
    bc66:	01 96       	adiw	r24, 0x01	; 1
    bc68:	90 93 04 0a 	sts	0x0A04, r25	; 0x800a04 <mqtt_process_message+0x1>
    bc6c:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2486
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    bc70:	f5 01       	movw	r30, r10
    bc72:	01 90       	ld	r0, Z+
    bc74:	00 20       	and	r0, r0
    bc76:	e9 f7       	brne	.-6      	; 0xbc72 <mqtt_callback(char*, unsigned char*, unsigned int)+0xbfc>
    bc78:	31 97       	sbiw	r30, 0x01	; 1
    bc7a:	ea 19       	sub	r30, r10
    bc7c:	fb 09       	sbc	r31, r11
    bc7e:	9e 2f       	mov	r25, r30
    bc80:	4e 2f       	mov	r20, r30
    bc82:	84 2f       	mov	r24, r20
    bc84:	89 1b       	sub	r24, r25
    bc86:	24 2f       	mov	r18, r20
    bc88:	30 e0       	ldi	r19, 0x00	; 0
    bc8a:	d4 01       	movw	r26, r8
    bc8c:	0d 90       	ld	r0, X+
    bc8e:	00 20       	and	r0, r0
    bc90:	e9 f7       	brne	.-6      	; 0xbc8c <mqtt_callback(char*, unsigned char*, unsigned int)+0xc16>
    bc92:	11 97       	sbiw	r26, 0x01	; 1
    bc94:	a8 19       	sub	r26, r8
    bc96:	b9 09       	sbc	r27, r9
    bc98:	2a 17       	cp	r18, r26
    bc9a:	3b 07       	cpc	r19, r27
    bc9c:	60 f4       	brcc	.+24     	; 0xbcb6 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc40>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2488
    {
      str1[cnt] = topic[f];
    bc9e:	d5 01       	movw	r26, r10
    bca0:	a8 0f       	add	r26, r24
    bca2:	b1 1d       	adc	r27, r1
    bca4:	28 0d       	add	r18, r8
    bca6:	39 1d       	adc	r19, r9
    bca8:	f9 01       	movw	r30, r18
    bcaa:	80 81       	ld	r24, Z
    bcac:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2489
      str1[cnt + 1] = 0;
    bcae:	11 96       	adiw	r26, 0x01	; 1
    bcb0:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2486
  strcat(str1, "/prog/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    bcb2:	4f 5f       	subi	r20, 0xFF	; 255
    bcb4:	e6 cf       	rjmp	.-52     	; 0xbc82 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc0c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2493
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    bcb6:	6f ec       	ldi	r22, 0xCF	; 207
    bcb8:	73 e0       	ldi	r23, 0x03	; 3
    bcba:	c5 01       	movw	r24, r10
    bcbc:	0e 94 f1 a2 	call	0x145e2	; 0x145e2 <strtok>
    bcc0:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2492
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    bcc2:	f1 2c       	mov	r15, r1
thermostat_program_set_active():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:296
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active);
}
void thermostat_program_set_active(uint8_t program_id, uint8_t active)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active, active);
    bcc4:	ad e4       	ldi	r26, 0x4D	; 77
    bcc6:	ea 2e       	mov	r14, r26
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2494
    pch = strtok (str1, "/");
    while (pch != NULL)
    bcc8:	01 15       	cp	r16, r1
    bcca:	11 05       	cpc	r17, r1
    bccc:	e9 f1       	breq	.+122    	; 0xbd48 <mqtt_callback(char*, unsigned char*, unsigned int)+0xcd2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2496
    {
      if (cnt == 0) id = atoi(pch);
    bcce:	f1 10       	cpse	r15, r1
    bcd0:	0c c0       	rjmp	.+24     	; 0xbcea <mqtt_callback(char*, unsigned char*, unsigned int)+0xc74>
    bcd2:	c8 01       	movw	r24, r16
    bcd4:	0e 94 b8 a2 	call	0x14570	; 0x14570 <atoi>
    bcd8:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2497
      if (id < AVAILABLE_PROGRAM)
    bcda:	f7 e0       	ldi	r31, 0x07	; 7
    bcdc:	f8 17       	cp	r31, r24
    bcde:	58 f5       	brcc	.+86     	; 0xbd36 <mqtt_callback(char*, unsigned char*, unsigned int)+0xcc0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2504
        if ((cnt == 1) && (strcmp(pch, "name") == 0))  thermostat_program_set_name(id, my_payload);
        if ((cnt == 1) && (strcmp(pch, "active") == 0))  thermostat_program_set_active(id, atoi(my_payload));
      }
      else
      {
        log_error(&mqtt_client, "prog/set bad id");
    bce0:	8d ea       	ldi	r24, 0xAD	; 173
    bce2:	94 e0       	ldi	r25, 0x04	; 4
    bce4:	0e 94 64 81 	call	0x102c8	; 0x102c8 <log_error(PubSubClient*, char*) [clone .constprop.61]>
    bce8:	26 c0       	rjmp	.+76     	; 0xbd36 <mqtt_callback(char*, unsigned char*, unsigned int)+0xcc0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2497
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < AVAILABLE_PROGRAM)
    bcea:	27 e0       	ldi	r18, 0x07	; 7
    bcec:	27 15       	cp	r18, r7
    bcee:	c0 f3       	brcs	.-16     	; 0xbce0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc6a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2499
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0))  thermostat_program_set_name(id, my_payload);
    bcf0:	81 e0       	ldi	r24, 0x01	; 1
    bcf2:	f8 12       	cpse	r15, r24
    bcf4:	20 c0       	rjmp	.+64     	; 0xbd36 <mqtt_callback(char*, unsigned char*, unsigned int)+0xcc0>
    bcf6:	68 ea       	ldi	r22, 0xA8	; 168
    bcf8:	73 e0       	ldi	r23, 0x03	; 3
    bcfa:	c8 01       	movw	r24, r16
    bcfc:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    bd00:	89 2b       	or	r24, r25
    bd02:	29 f4       	brne	.+10     	; 0xbd0e <mqtt_callback(char*, unsigned char*, unsigned int)+0xc98>
    bd04:	6b ed       	ldi	r22, 0xDB	; 219
    bd06:	7a e0       	ldi	r23, 0x0A	; 10
    bd08:	87 2d       	mov	r24, r7
    bd0a:	0e 94 47 4b 	call	0x968e	; 0x968e <thermostat_program_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2500
        if ((cnt == 1) && (strcmp(pch, "active") == 0))  thermostat_program_set_active(id, atoi(my_payload));
    bd0e:	62 eb       	ldi	r22, 0xB2	; 178
    bd10:	73 e0       	ldi	r23, 0x03	; 3
    bd12:	c8 01       	movw	r24, r16
    bd14:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    bd18:	89 2b       	or	r24, r25
    bd1a:	69 f4       	brne	.+26     	; 0xbd36 <mqtt_callback(char*, unsigned char*, unsigned int)+0xcc0>
    bd1c:	8b ed       	ldi	r24, 0xDB	; 219
    bd1e:	9a e0       	ldi	r25, 0x0A	; 10
    bd20:	0e 94 b8 a2 	call	0x14570	; 0x14570 <atoi>
thermostat_program_set_active():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:296
    bd24:	7e 9c       	mul	r7, r14
    bd26:	90 01       	movw	r18, r0
    bd28:	11 24       	eor	r1, r1
    bd2a:	68 2f       	mov	r22, r24
    bd2c:	c9 01       	movw	r24, r18
    bd2e:	8f 50       	subi	r24, 0x0F	; 15
    bd30:	9e 4f       	sbci	r25, 0xFE	; 254
    bd32:	0e 94 47 8f 	call	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2506
      }
      else
      {
        log_error(&mqtt_client, "prog/set bad id");
      }
      pch = strtok (NULL, "/");
    bd36:	6f ec       	ldi	r22, 0xCF	; 207
    bd38:	73 e0       	ldi	r23, 0x03	; 3
    bd3a:	90 e0       	ldi	r25, 0x00	; 0
    bd3c:	80 e0       	ldi	r24, 0x00	; 0
    bd3e:	0e 94 f1 a2 	call	0x145e2	; 0x145e2 <strtok>
    bd42:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2507
      cnt++;
    bd44:	f3 94       	inc	r15
    bd46:	c0 cf       	rjmp	.-128    	; 0xbcc8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc52>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2511
    }
  }
  ////
  strcpy_P(str1, thermctl_header_in);
    bd48:	65 ed       	ldi	r22, 0xD5	; 213
    bd4a:	7c e2       	ldi	r23, 0x2C	; 44
    bd4c:	c5 01       	movw	r24, r10
    bd4e:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2512
  strcat(str1, device.nazev);
    bd52:	65 e3       	ldi	r22, 0x35	; 53
    bd54:	7c e0       	ldi	r23, 0x0C	; 12
    bd56:	c5 01       	movw	r24, r10
    bd58:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2513
  strcat(str1, "/prog/clear");
    bd5c:	6d eb       	ldi	r22, 0xBD	; 189
    bd5e:	74 e0       	ldi	r23, 0x04	; 4
    bd60:	c5 01       	movw	r24, r10
    bd62:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2514
  if (strncmp(str1, topic, strlen(str1)) == 0)
    bd66:	f5 01       	movw	r30, r10
    bd68:	01 90       	ld	r0, Z+
    bd6a:	00 20       	and	r0, r0
    bd6c:	e9 f7       	brne	.-6      	; 0xbd68 <mqtt_callback(char*, unsigned char*, unsigned int)+0xcf2>
    bd6e:	31 97       	sbiw	r30, 0x01	; 1
    bd70:	af 01       	movw	r20, r30
    bd72:	4a 19       	sub	r20, r10
    bd74:	5b 09       	sbc	r21, r11
    bd76:	b4 01       	movw	r22, r8
    bd78:	c5 01       	movw	r24, r10
    bd7a:	0e 94 77 af 	call	0x15eee	; 0x15eee <strncmp>
    bd7e:	89 2b       	or	r24, r25
    bd80:	09 f0       	breq	.+2      	; 0xbd84 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd0e>
    bd82:	52 c0       	rjmp	.+164    	; 0xbe28 <mqtt_callback(char*, unsigned char*, unsigned int)+0xdb2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2516
  {
    mqtt_process_message++;
    bd84:	80 91 03 0a 	lds	r24, 0x0A03	; 0x800a03 <mqtt_process_message>
    bd88:	90 91 04 0a 	lds	r25, 0x0A04	; 0x800a04 <mqtt_process_message+0x1>
    bd8c:	01 96       	adiw	r24, 0x01	; 1
    bd8e:	90 93 04 0a 	sts	0x0A04, r25	; 0x800a04 <mqtt_process_message+0x1>
    bd92:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2517
    id = atoi(my_payload);
    bd96:	8b ed       	ldi	r24, 0xDB	; 219
    bd98:	9a e0       	ldi	r25, 0x0A	; 10
    bd9a:	0e 94 b8 a2 	call	0x14570	; 0x14570 <atoi>
    bd9e:	18 2f       	mov	r17, r24
    bda0:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2518
    if (id < AVAILABLE_PROGRAM)
    bda2:	a7 e0       	ldi	r26, 0x07	; 7
    bda4:	a8 17       	cp	r26, r24
    bda6:	08 f4       	brcc	.+2      	; 0xbdaa <mqtt_callback(char*, unsigned char*, unsigned int)+0xd34>
    bda8:	89 c0       	rjmp	.+274    	; 0xbebc <mqtt_callback(char*, unsigned char*, unsigned int)+0xe46>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2520
    {
      strcpy(tmp2, "PROG");
    bdaa:	69 ec       	ldi	r22, 0xC9	; 201
    bdac:	74 e0       	ldi	r23, 0x04	; 4
    bdae:	ce 01       	movw	r24, r28
    bdb0:	88 57       	subi	r24, 0x78	; 120
    bdb2:	9f 4f       	sbci	r25, 0xFF	; 255
    bdb4:	0e 94 70 af 	call	0x15ee0	; 0x15ee0 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2521
      thermostat_program_set_name(id, tmp2);
    bdb8:	be 01       	movw	r22, r28
    bdba:	68 57       	subi	r22, 0x78	; 120
    bdbc:	7f 4f       	sbci	r23, 0xFF	; 255
    bdbe:	81 2f       	mov	r24, r17
    bdc0:	0e 94 47 4b 	call	0x968e	; 0x968e <thermostat_program_set_name(unsigned char, char*)>
thermostat_program_set_active():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:296
    bdc4:	bd e4       	ldi	r27, 0x4D	; 77
    bdc6:	1b 9f       	mul	r17, r27
    bdc8:	c0 01       	movw	r24, r0
    bdca:	11 24       	eor	r1, r1
    bdcc:	60 e0       	ldi	r22, 0x00	; 0
    bdce:	8f 50       	subi	r24, 0x0F	; 15
    bdd0:	9e 4f       	sbci	r25, 0xFE	; 254
    bdd2:	0e 94 47 8f 	call	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2523
      thermostat_program_set_active(id, 0);
      for (uint8_t progid = 0; progid < MAX_PROGRAM_INTERVAL; progid++)
    bdd6:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2525
      {
        thermostat_program_set_time(id, progid, 0, 0, 0, 0, 0);
    bdd8:	c1 2c       	mov	r12, r1
    bdda:	e1 2c       	mov	r14, r1
    bddc:	00 e0       	ldi	r16, 0x00	; 0
    bdde:	20 e0       	ldi	r18, 0x00	; 0
    bde0:	40 e0       	ldi	r20, 0x00	; 0
    bde2:	61 2f       	mov	r22, r17
    bde4:	87 2d       	mov	r24, r7
    bde6:	0e 94 0b 4b 	call	0x9616	; 0x9616 <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2526
        thermostat_program_set_threshold(id, progid, 220);
    bdea:	4c ed       	ldi	r20, 0xDC	; 220
    bdec:	50 e0       	ldi	r21, 0x00	; 0
    bdee:	61 2f       	mov	r22, r17
    bdf0:	87 2d       	mov	r24, r7
    bdf2:	0e 94 ef 4a 	call	0x95de	; 0x95de <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2527
        thermostat_program_set_week(id, progid, 0);
    bdf6:	40 e0       	ldi	r20, 0x00	; 0
    bdf8:	61 2f       	mov	r22, r17
    bdfa:	87 2d       	mov	r24, r7
    bdfc:	0e 94 e1 4a 	call	0x95c2	; 0x95c2 <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2523
    if (id < AVAILABLE_PROGRAM)
    {
      strcpy(tmp2, "PROG");
      thermostat_program_set_name(id, tmp2);
      thermostat_program_set_active(id, 0);
      for (uint8_t progid = 0; progid < MAX_PROGRAM_INTERVAL; progid++)
    be00:	1f 5f       	subi	r17, 0xFF	; 255
    be02:	1b 30       	cpi	r17, 0x0B	; 11
    be04:	49 f7       	brne	.-46     	; 0xbdd8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd62>
    be06:	0b e5       	ldi	r16, 0x5B	; 91
    be08:	11 e0       	ldi	r17, 0x01	; 1
thermostat_ring_get_program_id():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:144


//// nastaveni programu k ringu termostatu
uint8_t thermostat_ring_get_program_id(uint8_t idx)
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
    be0a:	c8 01       	movw	r24, r16
    be0c:	0e 94 49 8f 	call	0x11e92	; 0x11e92 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2531
        thermostat_program_set_threshold(id, progid, 220);
        thermostat_program_set_week(id, progid, 0);
      }
      for (uint8_t tix = 0; tix < MAX_THERMOSTAT; tix++)
      {
        if (thermostat_ring_get_program_id(tix) == id)
    be10:	78 12       	cpse	r7, r24
    be12:	04 c0       	rjmp	.+8      	; 0xbe1c <mqtt_callback(char*, unsigned char*, unsigned int)+0xda6>
thermostat_ring_set_program_id():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:148
}
void thermostat_ring_set_program_id(uint8_t idx, uint8_t id)
{
  return EEPROM.write((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program, id);
    be14:	6f ef       	ldi	r22, 0xFF	; 255
    be16:	c8 01       	movw	r24, r16
    be18:	0e 94 47 8f 	call	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
    be1c:	0f 5d       	subi	r16, 0xDF	; 223
    be1e:	1f 4f       	sbci	r17, 0xFF	; 255
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2529
      {
        thermostat_program_set_time(id, progid, 0, 0, 0, 0, 0);
        thermostat_program_set_threshold(id, progid, 220);
        thermostat_program_set_week(id, progid, 0);
      }
      for (uint8_t tix = 0; tix < MAX_THERMOSTAT; tix++)
    be20:	01 15       	cp	r16, r1
    be22:	e2 e0       	ldi	r30, 0x02	; 2
    be24:	1e 07       	cpc	r17, r30
    be26:	89 f7       	brne	.-30     	; 0xbe0a <mqtt_callback(char*, unsigned char*, unsigned int)+0xd94>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2543
    {
      log_error(&mqtt_client, "prog/clear bad id");
    }
  }
  /////
  strcpy_P(str1, thermctl_header_in);
    be28:	65 ed       	ldi	r22, 0xD5	; 213
    be2a:	7c e2       	ldi	r23, 0x2C	; 44
    be2c:	c5 01       	movw	r24, r10
    be2e:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2544
  strcat(str1, device.nazev);
    be32:	65 e3       	ldi	r22, 0x35	; 53
    be34:	7c e0       	ldi	r23, 0x0C	; 12
    be36:	c5 01       	movw	r24, r10
    be38:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2545
  strcat(str1, "/prog_interval/set/");
    be3c:	60 ee       	ldi	r22, 0xE0	; 224
    be3e:	74 e0       	ldi	r23, 0x04	; 4
    be40:	c5 01       	movw	r24, r10
    be42:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2546
  if (strncmp(str1, topic, strlen(str1)) == 0)
    be46:	f5 01       	movw	r30, r10
    be48:	01 90       	ld	r0, Z+
    be4a:	00 20       	and	r0, r0
    be4c:	e9 f7       	brne	.-6      	; 0xbe48 <mqtt_callback(char*, unsigned char*, unsigned int)+0xdd2>
    be4e:	31 97       	sbiw	r30, 0x01	; 1
    be50:	af 01       	movw	r20, r30
    be52:	4a 19       	sub	r20, r10
    be54:	5b 09       	sbc	r21, r11
    be56:	b4 01       	movw	r22, r8
    be58:	c5 01       	movw	r24, r10
    be5a:	0e 94 77 af 	call	0x15eee	; 0x15eee <strncmp>
    be5e:	89 2b       	or	r24, r25
    be60:	09 f0       	breq	.+2      	; 0xbe64 <mqtt_callback(char*, unsigned char*, unsigned int)+0xdee>
    be62:	04 c1       	rjmp	.+520    	; 0xc06c <mqtt_callback(char*, unsigned char*, unsigned int)+0xff6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2548
  {
    mqtt_process_message++;
    be64:	80 91 03 0a 	lds	r24, 0x0A03	; 0x800a03 <mqtt_process_message>
    be68:	90 91 04 0a 	lds	r25, 0x0A04	; 0x800a04 <mqtt_process_message+0x1>
    be6c:	01 96       	adiw	r24, 0x01	; 1
    be6e:	90 93 04 0a 	sts	0x0A04, r25	; 0x800a04 <mqtt_process_message+0x1>
    be72:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2550
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    be76:	f5 01       	movw	r30, r10
    be78:	01 90       	ld	r0, Z+
    be7a:	00 20       	and	r0, r0
    be7c:	e9 f7       	brne	.-6      	; 0xbe78 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe02>
    be7e:	31 97       	sbiw	r30, 0x01	; 1
    be80:	ea 19       	sub	r30, r10
    be82:	fb 09       	sbc	r31, r11
    be84:	9e 2f       	mov	r25, r30
    be86:	4e 2f       	mov	r20, r30
    be88:	84 2f       	mov	r24, r20
    be8a:	89 1b       	sub	r24, r25
    be8c:	24 2f       	mov	r18, r20
    be8e:	30 e0       	ldi	r19, 0x00	; 0
    be90:	d4 01       	movw	r26, r8
    be92:	0d 90       	ld	r0, X+
    be94:	00 20       	and	r0, r0
    be96:	e9 f7       	brne	.-6      	; 0xbe92 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe1c>
    be98:	11 97       	sbiw	r26, 0x01	; 1
    be9a:	a8 19       	sub	r26, r8
    be9c:	b9 09       	sbc	r27, r9
    be9e:	2a 17       	cp	r18, r26
    bea0:	3b 07       	cpc	r19, r27
    bea2:	88 f4       	brcc	.+34     	; 0xbec6 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe50>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2552
    {
      str1[cnt] = topic[f];
    bea4:	d5 01       	movw	r26, r10
    bea6:	a8 0f       	add	r26, r24
    bea8:	b1 1d       	adc	r27, r1
    beaa:	28 0d       	add	r18, r8
    beac:	39 1d       	adc	r19, r9
    beae:	f9 01       	movw	r30, r18
    beb0:	80 81       	ld	r24, Z
    beb2:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2553
      str1[cnt + 1] = 0;
    beb4:	11 96       	adiw	r26, 0x01	; 1
    beb6:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2550
  strcat(str1, "/prog_interval/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    beb8:	4f 5f       	subi	r20, 0xFF	; 255
    beba:	e6 cf       	rjmp	.-52     	; 0xbe88 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2539
        }
      }
    }
    else
    {
      log_error(&mqtt_client, "prog/clear bad id");
    bebc:	8e ec       	ldi	r24, 0xCE	; 206
    bebe:	94 e0       	ldi	r25, 0x04	; 4
    bec0:	0e 94 64 81 	call	0x102c8	; 0x102c8 <log_error(PubSubClient*, char*) [clone .constprop.61]>
    bec4:	b1 cf       	rjmp	.-158    	; 0xbe28 <mqtt_callback(char*, unsigned char*, unsigned int)+0xdb2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2557
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    bec6:	6f ec       	ldi	r22, 0xCF	; 207
    bec8:	73 e0       	ldi	r23, 0x03	; 3
    beca:	c5 01       	movw	r24, r10
    becc:	0e 94 f1 a2 	call	0x145e2	; 0x145e2 <strtok>
    bed0:	2c 01       	movw	r4, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2244
  char tmp2[32];
  static char my_payload[128];
  boolean ret = 0;
  uint8_t cnt = 0;
  uint8_t id = 0;
  uint8_t id_interval = 0;
    bed2:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2556
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    bed4:	d1 2c       	mov	r13, r1
thermostat_program_get_time():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:303


//// ziska cas termostatu
void thermostat_program_get_time(uint8_t program_id, uint8_t interval_id, uint8_t *start_hour, uint8_t *start_min, uint8_t *stop_hour, uint8_t *stop_min, uint8_t *active)
{
  uint8_t start = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1);
    bed6:	e6 e0       	ldi	r30, 0x06	; 6
    bed8:	3e 2e       	mov	r3, r30
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:306
  uint8_t stop = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size)  + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1);
  *start_hour = (start >> 3) & 0b00011111;
  *start_min = (start >> 1 & 0b00000011) * 15;
    beda:	ff e0       	ldi	r31, 0x0F	; 15
    bedc:	6f 2e       	mov	r6, r31
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2558
    pch = strtok (str1, "/");
    while (pch != NULL)
    bede:	41 14       	cp	r4, r1
    bee0:	51 04       	cpc	r5, r1
    bee2:	09 f4       	brne	.+2      	; 0xbee6 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe70>
    bee4:	c3 c0       	rjmp	.+390    	; 0xc06c <mqtt_callback(char*, unsigned char*, unsigned int)+0xff6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2560
    {
      if (cnt == 0) id = atoi(pch);
    bee6:	d1 10       	cpse	r13, r1
    bee8:	7f c0       	rjmp	.+254    	; 0xbfe8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf72>
    beea:	c2 01       	movw	r24, r4
    beec:	0e 94 b8 a2 	call	0x14570	; 0x14570 <atoi>
    bef0:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2562
      if (cnt == 1) id_interval = atoi(pch);
      if (id < AVAILABLE_PROGRAM && id_interval < MAX_PROGRAM_INTERVAL)
    bef2:	27 e0       	ldi	r18, 0x07	; 7
    bef4:	27 15       	cp	r18, r7
    bef6:	08 f4       	brcc	.+2      	; 0xbefa <mqtt_callback(char*, unsigned char*, unsigned int)+0xe84>
    bef8:	b4 c0       	rjmp	.+360    	; 0xc062 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfec>
    befa:	1b 30       	cpi	r17, 0x0B	; 11
    befc:	08 f0       	brcs	.+2      	; 0xbf00 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe8a>
    befe:	b1 c0       	rjmp	.+354    	; 0xc062 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfec>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2564
      {
        if ((cnt == 2) && (strcmp(pch, "active") == 0))  thermostat_program_set_interval_active(id, id_interval, atoi(my_payload));
    bf00:	82 e0       	ldi	r24, 0x02	; 2
    bf02:	d8 12       	cpse	r13, r24
    bf04:	a5 c0       	rjmp	.+330    	; 0xc050 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfda>
    bf06:	62 eb       	ldi	r22, 0xB2	; 178
    bf08:	73 e0       	ldi	r23, 0x03	; 3
    bf0a:	c2 01       	movw	r24, r4
    bf0c:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    bf10:	89 2b       	or	r24, r25
    bf12:	b1 f5       	brne	.+108    	; 0xbf80 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf0a>
    bf14:	8b ed       	ldi	r24, 0xDB	; 219
    bf16:	9a e0       	ldi	r25, 0x0A	; 10
    bf18:	0e 94 b8 a2 	call	0x14570	; 0x14570 <atoi>
    bf1c:	c8 2e       	mov	r12, r24
thermostat_program_get_time():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:303


//// ziska cas termostatu
void thermostat_program_get_time(uint8_t program_id, uint8_t interval_id, uint8_t *start_hour, uint8_t *start_min, uint8_t *stop_hour, uint8_t *stop_min, uint8_t *active)
{
  uint8_t start = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1);
    bf1e:	ad e4       	ldi	r26, 0x4D	; 77
    bf20:	7a 9e       	mul	r7, r26
    bf22:	70 01       	movw	r14, r0
    bf24:	11 24       	eor	r1, r1
    bf26:	bf e0       	ldi	r27, 0x0F	; 15
    bf28:	eb 1a       	sub	r14, r27
    bf2a:	be ef       	ldi	r27, 0xFE	; 254
    bf2c:	fb 0a       	sbc	r15, r27
    bf2e:	13 9d       	mul	r17, r3
    bf30:	e0 0c       	add	r14, r0
    bf32:	f1 1c       	adc	r15, r1
    bf34:	11 24       	eor	r1, r1
    bf36:	c7 01       	movw	r24, r14
    bf38:	02 96       	adiw	r24, 0x02	; 2
    bf3a:	0e 94 49 8f 	call	0x11e92	; 0x11e92 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
    bf3e:	28 2e       	mov	r2, r24
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:304
  uint8_t stop = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size)  + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1);
    bf40:	c7 01       	movw	r24, r14
    bf42:	03 96       	adiw	r24, 0x03	; 3
    bf44:	0e 94 49 8f 	call	0x11e92	; 0x11e92 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:305
  *start_hour = (start >> 3) & 0b00011111;
    bf48:	42 2d       	mov	r20, r2
    bf4a:	46 95       	lsr	r20
    bf4c:	46 95       	lsr	r20
    bf4e:	46 95       	lsr	r20
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:306
  *start_min = (start >> 1 & 0b00000011) * 15;
    bf50:	22 2d       	mov	r18, r2
    bf52:	30 e0       	ldi	r19, 0x00	; 0
    bf54:	35 95       	asr	r19
    bf56:	27 95       	ror	r18
    bf58:	23 70       	andi	r18, 0x03	; 3
    bf5a:	26 9d       	mul	r18, r6
    bf5c:	20 2d       	mov	r18, r0
    bf5e:	11 24       	eor	r1, r1
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:307
  *stop_hour = (stop >> 3) & 0b00011111;
    bf60:	08 2f       	mov	r16, r24
    bf62:	06 95       	lsr	r16
    bf64:	06 95       	lsr	r16
    bf66:	06 95       	lsr	r16
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:308
  *stop_min = (stop & 0b00000011) * 15;
    bf68:	83 70       	andi	r24, 0x03	; 3
    bf6a:	86 9d       	mul	r24, r6
    bf6c:	e0 2c       	mov	r14, r0
    bf6e:	11 24       	eor	r1, r1
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:309
  *active = start & 0b00000001;
    bf70:	82 2d       	mov	r24, r2
    bf72:	81 70       	andi	r24, 0x01	; 1
thermostat_program_set_interval_active():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:381
/***************************************************************************************************************/
void thermostat_program_set_interval_active(uint8_t program_id, uint8_t interval_id, uint8_t set_active)
{
  uint8_t start_hour, start_min, stop_hour, stop_min, active;
  thermostat_program_get_time(program_id, interval_id, &start_hour, &start_min, &stop_hour, &stop_min, &active);
  if (active != set_active)
    bf74:	c8 16       	cp	r12, r24
    bf76:	21 f0       	breq	.+8      	; 0xbf80 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf0a>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:382
    thermostat_program_set_time(program_id, interval_id, start_hour, start_min, stop_hour, stop_min, set_active);
    bf78:	61 2f       	mov	r22, r17
    bf7a:	87 2d       	mov	r24, r7
    bf7c:	0e 94 0b 4b 	call	0x9616	; 0x9616 <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2565
        if ((cnt == 2) && (strcmp(pch, "threshold") == 0))  thermostat_program_set_threshold(id, id_interval , atoi(my_payload));
    bf80:	61 e4       	ldi	r22, 0x41	; 65
    bf82:	76 e0       	ldi	r23, 0x06	; 6
    bf84:	c2 01       	movw	r24, r4
    bf86:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    bf8a:	89 2b       	or	r24, r25
    bf8c:	49 f4       	brne	.+18     	; 0xbfa0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf2a>
    bf8e:	8b ed       	ldi	r24, 0xDB	; 219
    bf90:	9a e0       	ldi	r25, 0x0A	; 10
    bf92:	0e 94 b8 a2 	call	0x14570	; 0x14570 <atoi>
    bf96:	ac 01       	movw	r20, r24
    bf98:	61 2f       	mov	r22, r17
    bf9a:	87 2d       	mov	r24, r7
    bf9c:	0e 94 ef 4a 	call	0x95de	; 0x95de <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2566
        if ((cnt == 2) && (strcmp(pch, "time") == 0)) thermostat_program_set_parse_interval(id, id_interval, my_payload);
    bfa0:	69 e8       	ldi	r22, 0x89	; 137
    bfa2:	76 e0       	ldi	r23, 0x06	; 6
    bfa4:	c2 01       	movw	r24, r4
    bfa6:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    bfaa:	89 2b       	or	r24, r25
    bfac:	09 f0       	breq	.+2      	; 0xbfb0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf3a>
    bfae:	50 c0       	rjmp	.+160    	; 0xc050 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfda>
thermostat_program_set_parse_interval():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:344
{
  uint8_t cnt;
  uint8_t start_hour = 0, start_min = 0, stop_hour = 0, stop_min = 0, active = 0, week = 0;
  char *pch;
  cnt = 0;
  pch = strtok (str, ",");
    bfb0:	64 ef       	ldi	r22, 0xF4	; 244
    bfb2:	74 e0       	ldi	r23, 0x04	; 4
    bfb4:	8b ed       	ldi	r24, 0xDB	; 219
    bfb6:	9a e0       	ldi	r25, 0x0A	; 10
    bfb8:	0e 94 f1 a2 	call	0x145e2	; 0x145e2 <strtok>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:341

//// rozparsuje casovy format start_hour,start_min,stop_hour,stop_min,active a ulozi jej
void thermostat_program_set_parse_interval(uint8_t program_id, uint8_t interval_id,  char *str)
{
  uint8_t cnt;
  uint8_t start_hour = 0, start_min = 0, stop_hour = 0, stop_min = 0, active = 0, week = 0;
    bfbc:	f1 2c       	mov	r15, r1
    bfbe:	c1 2c       	mov	r12, r1
    bfc0:	e1 2c       	mov	r14, r1
    bfc2:	21 2c       	mov	r2, r1
    bfc4:	41 2c       	mov	r4, r1
    bfc6:	51 2c       	mov	r5, r1
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:343
  char *pch;
  cnt = 0;
    bfc8:	00 e0       	ldi	r16, 0x00	; 0
thermostat_program_set_parse_interval():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:345
  pch = strtok (str, ",");
  while (pch != NULL)
    bfca:	00 97       	sbiw	r24, 0x00	; 0
    bfcc:	99 f1       	breq	.+102    	; 0xc034 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfbe>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:347
  {
    if (cnt == 0) start_hour = atoi(pch);
    bfce:	01 11       	cpse	r16, r1
    bfd0:	13 c0       	rjmp	.+38     	; 0xbff8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf82>
    bfd2:	0e 94 b8 a2 	call	0x14570	; 0x14570 <atoi>
    bfd6:	58 2e       	mov	r5, r24
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:354
    if (cnt == 2) stop_hour = atoi(pch);
    if (cnt == 3) stop_min = atoi(pch);
    if (cnt == 4) week = atoi(pch);
    if (cnt == 5) active = atoi(pch);

    pch = strtok (NULL, ",");
    bfd8:	64 ef       	ldi	r22, 0xF4	; 244
    bfda:	74 e0       	ldi	r23, 0x04	; 4
    bfdc:	90 e0       	ldi	r25, 0x00	; 0
    bfde:	80 e0       	ldi	r24, 0x00	; 0
    bfe0:	0e 94 f1 a2 	call	0x145e2	; 0x145e2 <strtok>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:355
    cnt++;
    bfe4:	0f 5f       	subi	r16, 0xFF	; 255
    bfe6:	f1 cf       	rjmp	.-30     	; 0xbfca <mqtt_callback(char*, unsigned char*, unsigned int)+0xf54>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2561
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1) id_interval = atoi(pch);
    bfe8:	f1 e0       	ldi	r31, 0x01	; 1
    bfea:	df 12       	cpse	r13, r31
    bfec:	82 cf       	rjmp	.-252    	; 0xbef2 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe7c>
    bfee:	c2 01       	movw	r24, r4
    bff0:	0e 94 b8 a2 	call	0x14570	; 0x14570 <atoi>
    bff4:	18 2f       	mov	r17, r24
    bff6:	7d cf       	rjmp	.-262    	; 0xbef2 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe7c>
thermostat_program_set_parse_interval():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:348
  cnt = 0;
  pch = strtok (str, ",");
  while (pch != NULL)
  {
    if (cnt == 0) start_hour = atoi(pch);
    if (cnt == 1) start_min = atoi(pch);
    bff8:	01 30       	cpi	r16, 0x01	; 1
    bffa:	21 f4       	brne	.+8      	; 0xc004 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf8e>
    bffc:	0e 94 b8 a2 	call	0x14570	; 0x14570 <atoi>
    c000:	48 2e       	mov	r4, r24
    c002:	ea cf       	rjmp	.-44     	; 0xbfd8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf62>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:349
    if (cnt == 2) stop_hour = atoi(pch);
    c004:	02 30       	cpi	r16, 0x02	; 2
    c006:	21 f4       	brne	.+8      	; 0xc010 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf9a>
    c008:	0e 94 b8 a2 	call	0x14570	; 0x14570 <atoi>
    c00c:	28 2e       	mov	r2, r24
    c00e:	e4 cf       	rjmp	.-56     	; 0xbfd8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf62>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:350
    if (cnt == 3) stop_min = atoi(pch);
    c010:	03 30       	cpi	r16, 0x03	; 3
    c012:	21 f4       	brne	.+8      	; 0xc01c <mqtt_callback(char*, unsigned char*, unsigned int)+0xfa6>
    c014:	0e 94 b8 a2 	call	0x14570	; 0x14570 <atoi>
    c018:	e8 2e       	mov	r14, r24
    c01a:	de cf       	rjmp	.-68     	; 0xbfd8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf62>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:351
    if (cnt == 4) week = atoi(pch);
    c01c:	04 30       	cpi	r16, 0x04	; 4
    c01e:	21 f4       	brne	.+8      	; 0xc028 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfb2>
    c020:	0e 94 b8 a2 	call	0x14570	; 0x14570 <atoi>
    c024:	f8 2e       	mov	r15, r24
    c026:	d8 cf       	rjmp	.-80     	; 0xbfd8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf62>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:352
    if (cnt == 5) active = atoi(pch);
    c028:	05 30       	cpi	r16, 0x05	; 5
    c02a:	b1 f6       	brne	.-84     	; 0xbfd8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf62>
    c02c:	0e 94 b8 a2 	call	0x14570	; 0x14570 <atoi>
    c030:	c8 2e       	mov	r12, r24
    c032:	d2 cf       	rjmp	.-92     	; 0xbfd8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf62>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:357

    pch = strtok (NULL, ",");
    cnt++;
  }
  if (cnt == 6)
    c034:	06 30       	cpi	r16, 0x06	; 6
    c036:	61 f4       	brne	.+24     	; 0xc050 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfda>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:359
  {
    thermostat_program_set_time(program_id, interval_id, start_hour, start_min, stop_hour, stop_min, active);
    c038:	02 2d       	mov	r16, r2
    c03a:	24 2d       	mov	r18, r4
    c03c:	45 2d       	mov	r20, r5
    c03e:	61 2f       	mov	r22, r17
    c040:	87 2d       	mov	r24, r7
    c042:	0e 94 0b 4b 	call	0x9616	; 0x9616 <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:360
    thermostat_program_set_week(program_id, interval_id, week);
    c046:	4f 2d       	mov	r20, r15
    c048:	61 2f       	mov	r22, r17
    c04a:	87 2d       	mov	r24, r7
    c04c:	0e 94 e1 4a 	call	0x95c2	; 0x95c2 <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2572
      }
      else
      {
        log_error(&mqtt_client, "prog_interval/set bad id");
      }
      pch = strtok (NULL, "/");
    c050:	6f ec       	ldi	r22, 0xCF	; 207
    c052:	73 e0       	ldi	r23, 0x03	; 3
    c054:	90 e0       	ldi	r25, 0x00	; 0
    c056:	80 e0       	ldi	r24, 0x00	; 0
    c058:	0e 94 f1 a2 	call	0x145e2	; 0x145e2 <strtok>
    c05c:	2c 01       	movw	r4, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2573
      cnt++;
    c05e:	d3 94       	inc	r13
    c060:	3e cf       	rjmp	.-388    	; 0xbede <mqtt_callback(char*, unsigned char*, unsigned int)+0xe68>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2570
        if ((cnt == 2) && (strcmp(pch, "threshold") == 0))  thermostat_program_set_threshold(id, id_interval , atoi(my_payload));
        if ((cnt == 2) && (strcmp(pch, "time") == 0)) thermostat_program_set_parse_interval(id, id_interval, my_payload);
      }
      else
      {
        log_error(&mqtt_client, "prog_interval/set bad id");
    c062:	86 ef       	ldi	r24, 0xF6	; 246
    c064:	94 e0       	ldi	r25, 0x04	; 4
    c066:	0e 94 64 81 	call	0x102c8	; 0x102c8 <log_error(PubSubClient*, char*) [clone .constprop.61]>
    c06a:	f2 cf       	rjmp	.-28     	; 0xc050 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfda>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2578
      cnt++;
    }
  }
  ///
  //// thermctl-in/XXXXX/ring/default, nastavi vychozi ring na displaji
  strcpy_P(str1, thermctl_header_in);
    c06c:	65 ed       	ldi	r22, 0xD5	; 213
    c06e:	7c e2       	ldi	r23, 0x2C	; 44
    c070:	c5 01       	movw	r24, r10
    c072:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2579
  strcat(str1, device.nazev);
    c076:	65 e3       	ldi	r22, 0x35	; 53
    c078:	7c e0       	ldi	r23, 0x0C	; 12
    c07a:	c5 01       	movw	r24, r10
    c07c:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2580
  strcat(str1, "/ring/default");
    c080:	6f e0       	ldi	r22, 0x0F	; 15
    c082:	75 e0       	ldi	r23, 0x05	; 5
    c084:	c5 01       	movw	r24, r10
    c086:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2581
  if (strcmp(str1, topic) == 0)
    c08a:	b4 01       	movw	r22, r8
    c08c:	c5 01       	movw	r24, r10
    c08e:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    c092:	89 2b       	or	r24, r25
    c094:	a1 f4       	brne	.+40     	; 0xc0be <mqtt_callback(char*, unsigned char*, unsigned int)+0x1048>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2583
  {
    mqtt_process_message++;
    c096:	80 91 03 0a 	lds	r24, 0x0A03	; 0x800a03 <mqtt_process_message>
    c09a:	90 91 04 0a 	lds	r25, 0x0A04	; 0x800a04 <mqtt_process_message+0x1>
    c09e:	01 96       	adiw	r24, 0x01	; 1
    c0a0:	90 93 04 0a 	sts	0x0A04, r25	; 0x800a04 <mqtt_process_message+0x1>
    c0a4:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2584
    default_ring = atoi(my_payload);
    c0a8:	8b ed       	ldi	r24, 0xDB	; 219
    c0aa:	9a e0       	ldi	r25, 0x0A	; 10
    c0ac:	0e 94 b8 a2 	call	0x14570	; 0x14570 <atoi>
    c0b0:	80 93 0f 0a 	sts	0x0A0F, r24	; 0x800a0f <default_ring>
set_default_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2165
/*
   ring - cislo aktivniho ringu
*/
void set_default_ring(uint8_t ring)
{
  EEPROM.write(my_default_ring, ring);
    c0b4:	68 2f       	mov	r22, r24
    c0b6:	8c e5       	ldi	r24, 0x5C	; 92
    c0b8:	90 e0       	ldi	r25, 0x00	; 0
    c0ba:	0e 94 47 8f 	call	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2589
    default_ring = atoi(my_payload);
    set_default_ring(default_ring);
  }
  ///
  //// thermctl-in/XXXXX/ring/get/IDcko/pid
  strcpy_P(str1, thermctl_header_in);
    c0be:	65 ed       	ldi	r22, 0xD5	; 213
    c0c0:	7c e2       	ldi	r23, 0x2C	; 44
    c0c2:	c5 01       	movw	r24, r10
    c0c4:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2590
  strcat(str1, device.nazev);
    c0c8:	65 e3       	ldi	r22, 0x35	; 53
    c0ca:	7c e0       	ldi	r23, 0x0C	; 12
    c0cc:	c5 01       	movw	r24, r10
    c0ce:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2591
  strcat(str1, "/ring/get/");
    c0d2:	6d e1       	ldi	r22, 0x1D	; 29
    c0d4:	75 e0       	ldi	r23, 0x05	; 5
    c0d6:	c5 01       	movw	r24, r10
    c0d8:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2592
  if (strncmp(str1, topic, strlen(str1)) == 0)
    c0dc:	f5 01       	movw	r30, r10
    c0de:	01 90       	ld	r0, Z+
    c0e0:	00 20       	and	r0, r0
    c0e2:	e9 f7       	brne	.-6      	; 0xc0de <mqtt_callback(char*, unsigned char*, unsigned int)+0x1068>
    c0e4:	31 97       	sbiw	r30, 0x01	; 1
    c0e6:	8f 01       	movw	r16, r30
    c0e8:	0a 19       	sub	r16, r10
    c0ea:	1b 09       	sbc	r17, r11
    c0ec:	a8 01       	movw	r20, r16
    c0ee:	b4 01       	movw	r22, r8
    c0f0:	c5 01       	movw	r24, r10
    c0f2:	0e 94 77 af 	call	0x15eee	; 0x15eee <strncmp>
    c0f6:	89 2b       	or	r24, r25
    c0f8:	09 f0       	breq	.+2      	; 0xc0fc <mqtt_callback(char*, unsigned char*, unsigned int)+0x1086>
    c0fa:	9c c0       	rjmp	.+312    	; 0xc234 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11be>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2595
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    c0fc:	90 2f       	mov	r25, r16
    c0fe:	80 2f       	mov	r24, r16
    c100:	89 1b       	sub	r24, r25
    c102:	20 2f       	mov	r18, r16
    c104:	30 e0       	ldi	r19, 0x00	; 0
    c106:	f4 01       	movw	r30, r8
    c108:	01 90       	ld	r0, Z+
    c10a:	00 20       	and	r0, r0
    c10c:	e9 f7       	brne	.-6      	; 0xc108 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1092>
    c10e:	31 97       	sbiw	r30, 0x01	; 1
    c110:	e8 19       	sub	r30, r8
    c112:	f9 09       	sbc	r31, r9
    c114:	2e 17       	cp	r18, r30
    c116:	3f 07       	cpc	r19, r31
    c118:	58 f4       	brcc	.+22     	; 0xc130 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10ba>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2597
    {
      str1[cnt] = topic[f];
    c11a:	f5 01       	movw	r30, r10
    c11c:	e8 0f       	add	r30, r24
    c11e:	f1 1d       	adc	r31, r1
    c120:	28 0d       	add	r18, r8
    c122:	39 1d       	adc	r19, r9
    c124:	d9 01       	movw	r26, r18
    c126:	8c 91       	ld	r24, X
    c128:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2598
      str1[cnt + 1] = 0;
    c12a:	11 82       	std	Z+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2595
  strcat(str1, device.nazev);
  strcat(str1, "/ring/get/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    c12c:	0f 5f       	subi	r16, 0xFF	; 255
    c12e:	e7 cf       	rjmp	.-50     	; 0xc0fe <mqtt_callback(char*, unsigned char*, unsigned int)+0x1088>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2602
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    c130:	6f ec       	ldi	r22, 0xCF	; 207
    c132:	73 e0       	ldi	r23, 0x03	; 3
    c134:	c5 01       	movw	r24, r10
    c136:	0e 94 f1 a2 	call	0x145e2	; 0x145e2 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2601
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    c13a:	61 2c       	mov	r6, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2603
    pch = strtok (str1, "/");
    while (pch != NULL)
    c13c:	00 97       	sbiw	r24, 0x00	; 0
    c13e:	09 f4       	brne	.+2      	; 0xc142 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10cc>
    c140:	79 c0       	rjmp	.+242    	; 0xc234 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11be>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2605
    {
      if (cnt == 0) id = atoi(my_payload);
    c142:	61 10       	cpse	r6, r1
    c144:	0e c0       	rjmp	.+28     	; 0xc162 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10ec>
    c146:	8b ed       	ldi	r24, 0xDB	; 219
    c148:	9a e0       	ldi	r25, 0x0A	; 10
    c14a:	0e 94 b8 a2 	call	0x14570	; 0x14570 <atoi>
    c14e:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2606
      if (id < MAX_THERMOSTAT)
    c150:	b4 e0       	ldi	r27, 0x04	; 4
    c152:	b8 17       	cp	r27, r24
    c154:	08 f0       	brcs	.+2      	; 0xc158 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10e2>
    c156:	66 c0       	rjmp	.+204    	; 0xc224 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11ae>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2612
      {
        if ((cnt == 1) && (strcmp(pch, "pid") == 0))  mqtt_send_pid_variable(id);
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
    c158:	8c e2       	ldi	r24, 0x2C	; 44
    c15a:	95 e0       	ldi	r25, 0x05	; 5
    c15c:	0e 94 64 81 	call	0x102c8	; 0x102c8 <log_error(PubSubClient*, char*) [clone .constprop.61]>
    c160:	61 c0       	rjmp	.+194    	; 0xc224 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11ae>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2606
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(my_payload);
      if (id < MAX_THERMOSTAT)
    c162:	e4 e0       	ldi	r30, 0x04	; 4
    c164:	e7 15       	cp	r30, r7
    c166:	c0 f3       	brcs	.-16     	; 0xc158 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2608
      {
        if ((cnt == 1) && (strcmp(pch, "pid") == 0))  mqtt_send_pid_variable(id);
    c168:	f1 e0       	ldi	r31, 0x01	; 1
    c16a:	6f 12       	cpse	r6, r31
    c16c:	5b c0       	rjmp	.+182    	; 0xc224 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11ae>
    c16e:	68 e2       	ldi	r22, 0x28	; 40
    c170:	75 e0       	ldi	r23, 0x05	; 5
    c172:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    c176:	89 2b       	or	r24, r25
    c178:	09 f0       	breq	.+2      	; 0xc17c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1106>
    c17a:	54 c0       	rjmp	.+168    	; 0xc224 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11ae>
thermostat_get_pid_p():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:65
  array_pids[idx]->Compute();
}

float thermostat_get_pid_p(uint8_t idx)
{
  return PID_p[idx];
    c17c:	c7 2c       	mov	r12, r7
    c17e:	d1 2c       	mov	r13, r1
    c180:	76 01       	movw	r14, r12
    c182:	ee 0c       	add	r14, r14
    c184:	ff 1c       	adc	r15, r15
    c186:	ee 0c       	add	r14, r14
    c188:	ff 1c       	adc	r15, r15
    c18a:	f7 01       	movw	r30, r14
    c18c:	e8 59       	subi	r30, 0x98	; 152
    c18e:	f6 4f       	sbci	r31, 0xF6	; 246
mqtt_send_pid_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3164
   /thermctl-out/XXXXX/pid/IDX/kd
*/
void mqtt_send_pid_variable(uint8_t idx)
{
  char payload[32];
  dtostrf(thermostat_get_pid_p(idx), 7, 2, payload);
    c190:	60 81       	ld	r22, Z
    c192:	71 81       	ldd	r23, Z+1	; 0x01
    c194:	82 81       	ldd	r24, Z+2	; 0x02
    c196:	93 81       	ldd	r25, Z+3	; 0x03
    c198:	8e 01       	movw	r16, r28
    c19a:	08 5b       	subi	r16, 0xB8	; 184
    c19c:	1f 4f       	sbci	r17, 0xFF	; 255
    c19e:	22 e0       	ldi	r18, 0x02	; 2
    c1a0:	47 e0       	ldi	r20, 0x07	; 7
    c1a2:	0e 94 93 a1 	call	0x14326	; 0x14326 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3165
  send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "pid", idx, "kp", payload);
    c1a6:	98 01       	movw	r18, r16
    c1a8:	44 e7       	ldi	r20, 0x74	; 116
    c1aa:	56 e0       	ldi	r21, 0x06	; 6
    c1ac:	67 2d       	mov	r22, r7
    c1ae:	88 e2       	ldi	r24, 0x28	; 40
    c1b0:	95 e0       	ldi	r25, 0x05	; 5
    c1b2:	0e 94 be 8e 	call	0x11d7c	; 0x11d7c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.132]>
thermostat_get_pid_i():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:85
  return PID_Output[idx];
}

float thermostat_get_pid_i(uint8_t idx)
{
  return PID_i[idx];
    c1b6:	f7 01       	movw	r30, r14
    c1b8:	e4 58       	subi	r30, 0x84	; 132
    c1ba:	f6 4f       	sbci	r31, 0xF6	; 246
mqtt_send_pid_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3166
  dtostrf(thermostat_get_pid_i(idx), 7, 2, payload);
    c1bc:	60 81       	ld	r22, Z
    c1be:	71 81       	ldd	r23, Z+1	; 0x01
    c1c0:	82 81       	ldd	r24, Z+2	; 0x02
    c1c2:	93 81       	ldd	r25, Z+3	; 0x03
    c1c4:	22 e0       	ldi	r18, 0x02	; 2
    c1c6:	47 e0       	ldi	r20, 0x07	; 7
    c1c8:	0e 94 93 a1 	call	0x14326	; 0x14326 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3167
  send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "pid", idx, "ki", payload);
    c1cc:	98 01       	movw	r18, r16
    c1ce:	4b e7       	ldi	r20, 0x7B	; 123
    c1d0:	56 e0       	ldi	r21, 0x06	; 6
    c1d2:	67 2d       	mov	r22, r7
    c1d4:	88 e2       	ldi	r24, 0x28	; 40
    c1d6:	95 e0       	ldi	r25, 0x05	; 5
    c1d8:	0e 94 be 8e 	call	0x11d7c	; 0x11d7c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.132]>
thermostat_get_pid_d():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:90
}

float thermostat_get_pid_d(uint8_t idx)
{
  return PID_d[idx];
    c1dc:	f7 01       	movw	r30, r14
    c1de:	e0 57       	subi	r30, 0x70	; 112
    c1e0:	f6 4f       	sbci	r31, 0xF6	; 246
mqtt_send_pid_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3168
  dtostrf(thermostat_get_pid_d(idx), 7, 2, payload);
    c1e2:	60 81       	ld	r22, Z
    c1e4:	71 81       	ldd	r23, Z+1	; 0x01
    c1e6:	82 81       	ldd	r24, Z+2	; 0x02
    c1e8:	93 81       	ldd	r25, Z+3	; 0x03
    c1ea:	22 e0       	ldi	r18, 0x02	; 2
    c1ec:	47 e0       	ldi	r20, 0x07	; 7
    c1ee:	0e 94 93 a1 	call	0x14326	; 0x14326 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3169
  send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "pid", idx, "kd", payload);
    c1f2:	98 01       	movw	r18, r16
    c1f4:	42 e8       	ldi	r20, 0x82	; 130
    c1f6:	56 e0       	ldi	r21, 0x06	; 6
    c1f8:	67 2d       	mov	r22, r7
    c1fa:	88 e2       	ldi	r24, 0x28	; 40
    c1fc:	95 e0       	ldi	r25, 0x05	; 5
    c1fe:	0e 94 be 8e 	call	0x11d7c	; 0x11d7c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.132]>
thermostat_get_pid_time():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:95
}

uint8_t thermostat_get_pid_time(uint8_t idx)
{
  return PID_time[idx];
    c202:	f6 01       	movw	r30, r12
    c204:	ec 55       	subi	r30, 0x5C	; 92
    c206:	f6 4f       	sbci	r31, 0xF6	; 246
mqtt_send_pid_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3170
  itoa(thermostat_get_pid_time(idx), payload, 10);
    c208:	80 81       	ld	r24, Z
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    c20a:	4a e0       	ldi	r20, 0x0A	; 10
    c20c:	b8 01       	movw	r22, r16
    c20e:	90 e0       	ldi	r25, 0x00	; 0
    c210:	0e 94 27 a3 	call	0x1464e	; 0x1464e <__itoa_ncheck>
mqtt_send_pid_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3171
  send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "pid", idx, "time", payload);
    c214:	98 01       	movw	r18, r16
    c216:	49 e8       	ldi	r20, 0x89	; 137
    c218:	56 e0       	ldi	r21, 0x06	; 6
    c21a:	67 2d       	mov	r22, r7
    c21c:	88 e2       	ldi	r24, 0x28	; 40
    c21e:	95 e0       	ldi	r25, 0x05	; 5
    c220:	0e 94 be 8e 	call	0x11d7c	; 0x11d7c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.132]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2614
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
      }
      pch = strtok (NULL, "/");
    c224:	6f ec       	ldi	r22, 0xCF	; 207
    c226:	73 e0       	ldi	r23, 0x03	; 3
    c228:	90 e0       	ldi	r25, 0x00	; 0
    c22a:	80 e0       	ldi	r24, 0x00	; 0
    c22c:	0e 94 f1 a2 	call	0x145e2	; 0x145e2 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2615
      cnt++;
    c230:	63 94       	inc	r6
    c232:	84 cf       	rjmp	.-248    	; 0xc13c <mqtt_callback(char*, unsigned char*, unsigned int)+0x10c6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2634
  //// thermctl-in/XXXXX/ring/set/IDcko/output
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_kp
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_ki
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_kd
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_time
  strcpy_P(str1, thermctl_header_in);
    c234:	65 ed       	ldi	r22, 0xD5	; 213
    c236:	7c e2       	ldi	r23, 0x2C	; 44
    c238:	c5 01       	movw	r24, r10
    c23a:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2635
  strcat(str1, device.nazev);
    c23e:	65 e3       	ldi	r22, 0x35	; 53
    c240:	7c e0       	ldi	r23, 0x0C	; 12
    c242:	c5 01       	movw	r24, r10
    c244:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2636
  strcat(str1, "/ring/set/");
    c248:	6c e3       	ldi	r22, 0x3C	; 60
    c24a:	75 e0       	ldi	r23, 0x05	; 5
    c24c:	c5 01       	movw	r24, r10
    c24e:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2637
  if (strncmp(str1, topic, strlen(str1)) == 0)
    c252:	f5 01       	movw	r30, r10
    c254:	01 90       	ld	r0, Z+
    c256:	00 20       	and	r0, r0
    c258:	e9 f7       	brne	.-6      	; 0xc254 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11de>
    c25a:	31 97       	sbiw	r30, 0x01	; 1
    c25c:	8f 01       	movw	r16, r30
    c25e:	0a 19       	sub	r16, r10
    c260:	1b 09       	sbc	r17, r11
    c262:	a8 01       	movw	r20, r16
    c264:	b4 01       	movw	r22, r8
    c266:	c5 01       	movw	r24, r10
    c268:	0e 94 77 af 	call	0x15eee	; 0x15eee <strncmp>
    c26c:	89 2b       	or	r24, r25
    c26e:	09 f0       	breq	.+2      	; 0xc272 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11fc>
    c270:	d1 c1       	rjmp	.+930    	; 0xc614 <mqtt_callback(char*, unsigned char*, unsigned int)+0x159e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2640
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    c272:	90 2f       	mov	r25, r16
    c274:	80 2f       	mov	r24, r16
    c276:	89 1b       	sub	r24, r25
    c278:	20 2f       	mov	r18, r16
    c27a:	30 e0       	ldi	r19, 0x00	; 0
    c27c:	f4 01       	movw	r30, r8
    c27e:	01 90       	ld	r0, Z+
    c280:	00 20       	and	r0, r0
    c282:	e9 f7       	brne	.-6      	; 0xc27e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1208>
    c284:	31 97       	sbiw	r30, 0x01	; 1
    c286:	e8 19       	sub	r30, r8
    c288:	f9 09       	sbc	r31, r9
    c28a:	2e 17       	cp	r18, r30
    c28c:	3f 07       	cpc	r19, r31
    c28e:	58 f4       	brcc	.+22     	; 0xc2a6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1230>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2642
    {
      str1[cnt] = topic[f];
    c290:	f5 01       	movw	r30, r10
    c292:	e8 0f       	add	r30, r24
    c294:	f1 1d       	adc	r31, r1
    c296:	28 0d       	add	r18, r8
    c298:	39 1d       	adc	r19, r9
    c29a:	d9 01       	movw	r26, r18
    c29c:	8c 91       	ld	r24, X
    c29e:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2643
      str1[cnt + 1] = 0;
    c2a0:	11 82       	std	Z+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2640
  strcat(str1, device.nazev);
  strcat(str1, "/ring/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    c2a2:	0f 5f       	subi	r16, 0xFF	; 255
    c2a4:	e7 cf       	rjmp	.-50     	; 0xc274 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11fe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2647
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    c2a6:	6f ec       	ldi	r22, 0xCF	; 207
    c2a8:	73 e0       	ldi	r23, 0x03	; 3
    c2aa:	c5 01       	movw	r24, r10
    c2ac:	0e 94 f1 a2 	call	0x145e2	; 0x145e2 <strtok>
    c2b0:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2646
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    c2b2:	d1 2c       	mov	r13, r1
thermostat_ring_set_output():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:127
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
}
void thermostat_ring_set_output(uint8_t idx, uint8_t output)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output, output);
    c2b4:	51 e2       	ldi	r21, 0x21	; 33
    c2b6:	e5 2e       	mov	r14, r21
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2648
    pch = strtok (str1, "/");
    while (pch != NULL)
    c2b8:	01 15       	cp	r16, r1
    c2ba:	11 05       	cpc	r17, r1
    c2bc:	09 f4       	brne	.+2      	; 0xc2c0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x124a>
    c2be:	aa c1       	rjmp	.+852    	; 0xc614 <mqtt_callback(char*, unsigned char*, unsigned int)+0x159e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2650
    {
      if (cnt == 0) id = atoi(pch);
    c2c0:	d1 10       	cpse	r13, r1
    c2c2:	0d c0       	rjmp	.+26     	; 0xc2de <mqtt_callback(char*, unsigned char*, unsigned int)+0x1268>
    c2c4:	c8 01       	movw	r24, r16
    c2c6:	0e 94 b8 a2 	call	0x14570	; 0x14570 <atoi>
    c2ca:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2651
      if (id < MAX_THERMOSTAT)
    c2cc:	b4 e0       	ldi	r27, 0x04	; 4
    c2ce:	b8 17       	cp	r27, r24
    c2d0:	08 f0       	brcs	.+2      	; 0xc2d4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x125e>
    c2d2:	97 c1       	rjmp	.+814    	; 0xc602 <mqtt_callback(char*, unsigned char*, unsigned int)+0x158c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2688
        if ((cnt == 1) && (strcmp(pch, "pid_kd") == 0)) thermostat_ring_pid_set_kd(id, atof(my_payload));
        if ((cnt == 1) && (strcmp(pch, "pid_time") == 0)) thermostat_ring_pid_set_time(id, atoi(my_payload));
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
    c2d4:	8c e2       	ldi	r24, 0x2C	; 44
    c2d6:	95 e0       	ldi	r25, 0x05	; 5
    c2d8:	0e 94 64 81 	call	0x102c8	; 0x102c8 <log_error(PubSubClient*, char*) [clone .constprop.61]>
    c2dc:	92 c1       	rjmp	.+804    	; 0xc602 <mqtt_callback(char*, unsigned char*, unsigned int)+0x158c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2651
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < MAX_THERMOSTAT)
    c2de:	e4 e0       	ldi	r30, 0x04	; 4
    c2e0:	e7 15       	cp	r30, r7
    c2e2:	c0 f3       	brcs	.-16     	; 0xc2d4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x125e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2653
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0)) thermostat_ring_set_name(id, my_payload);
    c2e4:	f1 e0       	ldi	r31, 0x01	; 1
    c2e6:	df 12       	cpse	r13, r31
    c2e8:	8c c1       	rjmp	.+792    	; 0xc602 <mqtt_callback(char*, unsigned char*, unsigned int)+0x158c>
    c2ea:	68 ea       	ldi	r22, 0xA8	; 168
    c2ec:	73 e0       	ldi	r23, 0x03	; 3
    c2ee:	c8 01       	movw	r24, r16
    c2f0:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    c2f4:	89 2b       	or	r24, r25
    c2f6:	29 f4       	brne	.+10     	; 0xc302 <mqtt_callback(char*, unsigned char*, unsigned int)+0x128c>
    c2f8:	6b ed       	ldi	r22, 0xDB	; 219
    c2fa:	7a e0       	ldi	r23, 0x0A	; 10
    c2fc:	87 2d       	mov	r24, r7
    c2fe:	0e 94 ca 4b 	call	0x9794	; 0x9794 <thermostat_ring_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2654
        if ((cnt == 1) && (strcmp(pch, "program") == 0))
    c302:	6b e4       	ldi	r22, 0x4B	; 75
    c304:	76 e0       	ldi	r23, 0x06	; 6
    c306:	c8 01       	movw	r24, r16
    c308:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    c30c:	89 2b       	or	r24, r25
    c30e:	81 f4       	brne	.+32     	; 0xc330 <mqtt_callback(char*, unsigned char*, unsigned int)+0x12ba>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2655
          if (atoi(my_payload) < AVAILABLE_PROGRAM)
    c310:	8b ed       	ldi	r24, 0xDB	; 219
    c312:	9a e0       	ldi	r25, 0x0A	; 10
    c314:	0e 94 b8 a2 	call	0x14570	; 0x14570 <atoi>
    c318:	88 30       	cpi	r24, 0x08	; 8
    c31a:	91 05       	cpc	r25, r1
    c31c:	4c f4       	brge	.+18     	; 0xc330 <mqtt_callback(char*, unsigned char*, unsigned int)+0x12ba>
thermostat_ring_set_program_id():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:148
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
}
void thermostat_ring_set_program_id(uint8_t idx, uint8_t id)
{
  return EEPROM.write((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program, id);
    c31e:	7e 9c       	mul	r7, r14
    c320:	90 01       	movw	r18, r0
    c322:	11 24       	eor	r1, r1
    c324:	68 2f       	mov	r22, r24
    c326:	c9 01       	movw	r24, r18
    c328:	85 5a       	subi	r24, 0xA5	; 165
    c32a:	9e 4f       	sbci	r25, 0xFE	; 254
    c32c:	0e 94 47 8f 	call	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2657
            thermostat_ring_set_program_id(id, atoi(my_payload));
        if ((cnt == 1) && (strcmp(pch, "threshold-f") == 0)) thermostat_ring_set_mezni(id, atof(my_payload) * 10); /// thereshold hodnota presne ve floatu * 10
    c330:	63 e5       	ldi	r22, 0x53	; 83
    c332:	76 e0       	ldi	r23, 0x06	; 6
    c334:	c8 01       	movw	r24, r16
    c336:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    c33a:	89 2b       	or	r24, r25
    c33c:	79 f4       	brne	.+30     	; 0xc35c <mqtt_callback(char*, unsigned char*, unsigned int)+0x12e6>
    c33e:	8b ed       	ldi	r24, 0xDB	; 219
    c340:	9a e0       	ldi	r25, 0x0A	; 10
    c342:	0e 94 b4 a2 	call	0x14568	; 0x14568 <atof>
    c346:	20 e0       	ldi	r18, 0x00	; 0
    c348:	30 e0       	ldi	r19, 0x00	; 0
    c34a:	40 e2       	ldi	r20, 0x20	; 32
    c34c:	51 e4       	ldi	r21, 0x41	; 65
    c34e:	0e 94 cd ab 	call	0x1579a	; 0x1579a <__mulsf3>
    c352:	0e 94 13 ae 	call	0x15c26	; 0x15c26 <__fixsfsi>
    c356:	87 2d       	mov	r24, r7
    c358:	0e 94 b3 4b 	call	0x9766	; 0x9766 <thermostat_ring_set_mezni(unsigned char, int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2658
        if ((cnt == 1) && (strcmp(pch, "threshold") == 0)) thermostat_ring_set_mezni(id, atoi(my_payload));
    c35c:	61 e4       	ldi	r22, 0x41	; 65
    c35e:	76 e0       	ldi	r23, 0x06	; 6
    c360:	c8 01       	movw	r24, r16
    c362:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    c366:	89 2b       	or	r24, r25
    c368:	41 f4       	brne	.+16     	; 0xc37a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1304>
    c36a:	8b ed       	ldi	r24, 0xDB	; 219
    c36c:	9a e0       	ldi	r25, 0x0A	; 10
    c36e:	0e 94 b8 a2 	call	0x14570	; 0x14570 <atoi>
    c372:	bc 01       	movw	r22, r24
    c374:	87 2d       	mov	r24, r7
    c376:	0e 94 b3 4b 	call	0x9766	; 0x9766 <thermostat_ring_set_mezni(unsigned char, int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2659
        if ((cnt == 1) && (strcmp(pch, "text_mode") == 0))
    c37a:	6f e5       	ldi	r22, 0x5F	; 95
    c37c:	76 e0       	ldi	r23, 0x06	; 6
    c37e:	c8 01       	movw	r24, r16
    c380:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    c384:	89 2b       	or	r24, r25
    c386:	09 f0       	breq	.+2      	; 0xc38a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1314>
    c388:	56 c0       	rjmp	.+172    	; 0xc436 <mqtt_callback(char*, unsigned char*, unsigned int)+0x13c0>
convert_text_mode():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3381
/// funkce prevadi ciselnou hodnotu na skutecne pojmenovani
uint8_t convert_text_mode(char *str2)
{
  uint8_t mode = 0;
  if (strcmp(str2, "off") == 0) mode = TERM_MODE_OFF;
  if (strcmp(str2, "heat") == 0) mode = TERM_MODE_MAX;
    c38a:	67 e4       	ldi	r22, 0x47	; 71
    c38c:	75 e0       	ldi	r23, 0x05	; 5
    c38e:	8b ed       	ldi	r24, 0xDB	; 219
    c390:	9a e0       	ldi	r25, 0x0A	; 10
    c392:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    c396:	ff 24       	eor	r15, r15
    c398:	f3 94       	inc	r15
    c39a:	89 2b       	or	r24, r25
    c39c:	09 f0       	breq	.+2      	; 0xc3a0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x132a>
    c39e:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3382
  if (strcmp(str2, "manual") == 0) mode = TERM_MODE_MAN_HEAT;
    c3a0:	6c e4       	ldi	r22, 0x4C	; 76
    c3a2:	75 e0       	ldi	r23, 0x05	; 5
    c3a4:	8b ed       	ldi	r24, 0xDB	; 219
    c3a6:	9a e0       	ldi	r25, 0x0A	; 10
    c3a8:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    c3ac:	89 2b       	or	r24, r25
    c3ae:	11 f4       	brne	.+4      	; 0xc3b4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x133e>
_Z13mqtt_callbackPcPhj():
    c3b0:	43 e0       	ldi	r20, 0x03	; 3
    c3b2:	f4 2e       	mov	r15, r20
convert_text_mode():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3383
  if (strcmp(str2, "auto") == 0) mode = TERM_MODE_PROG;
    c3b4:	63 e5       	ldi	r22, 0x53	; 83
    c3b6:	75 e0       	ldi	r23, 0x05	; 5
    c3b8:	8b ed       	ldi	r24, 0xDB	; 219
    c3ba:	9a e0       	ldi	r25, 0x0A	; 10
    c3bc:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    c3c0:	89 2b       	or	r24, r25
    c3c2:	11 f4       	brne	.+4      	; 0xc3c8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1352>
_Z13mqtt_callbackPcPhj():
    c3c4:	32 e0       	ldi	r19, 0x02	; 2
    c3c6:	f3 2e       	mov	r15, r19
convert_text_mode():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3384
  if (strcmp(str2, "cool") == 0) mode = TERM_MODE_CLIMATE_MAX;
    c3c8:	68 e5       	ldi	r22, 0x58	; 88
    c3ca:	75 e0       	ldi	r23, 0x05	; 5
    c3cc:	8b ed       	ldi	r24, 0xDB	; 219
    c3ce:	9a e0       	ldi	r25, 0x0A	; 10
    c3d0:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    c3d4:	89 2b       	or	r24, r25
    c3d6:	11 f4       	brne	.+4      	; 0xc3dc <mqtt_callback(char*, unsigned char*, unsigned int)+0x1366>
_Z13mqtt_callbackPcPhj():
    c3d8:	24 e0       	ldi	r18, 0x04	; 4
    c3da:	f2 2e       	mov	r15, r18
convert_text_mode():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3385
  if (strcmp(str2, "fan_only") == 0) mode = TERM_MODE_FAN;
    c3dc:	6d e5       	ldi	r22, 0x5D	; 93
    c3de:	75 e0       	ldi	r23, 0x05	; 5
    c3e0:	8b ed       	ldi	r24, 0xDB	; 219
    c3e2:	9a e0       	ldi	r25, 0x0A	; 10
    c3e4:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    c3e8:	89 2b       	or	r24, r25
    c3ea:	11 f4       	brne	.+4      	; 0xc3f0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x137a>
_Z13mqtt_callbackPcPhj():
    c3ec:	96 e0       	ldi	r25, 0x06	; 6
    c3ee:	f9 2e       	mov	r15, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2661
            thermostat_ring_set_program_id(id, atoi(my_payload));
        if ((cnt == 1) && (strcmp(pch, "threshold-f") == 0)) thermostat_ring_set_mezni(id, atof(my_payload) * 10); /// thereshold hodnota presne ve floatu * 10
        if ((cnt == 1) && (strcmp(pch, "threshold") == 0)) thermostat_ring_set_mezni(id, atoi(my_payload));
        if ((cnt == 1) && (strcmp(pch, "text_mode") == 0))
        {
          active = convert_text_mode(my_payload);
    c3f0:	c4 5d       	subi	r28, 0xD4	; 212
    c3f2:	de 4f       	sbci	r29, 0xFE	; 254
    c3f4:	f8 82       	st	Y, r15
    c3f6:	cc 52       	subi	r28, 0x2C	; 44
    c3f8:	d1 40       	sbci	r29, 0x01	; 1
thermostat_ring_set_mode():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:180
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_mode);
}
void thermostat_ring_set_mode(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mode, id);
    c3fa:	7e 9c       	mul	r7, r14
    c3fc:	c0 01       	movw	r24, r0
    c3fe:	11 24       	eor	r1, r1
    c400:	6f 2d       	mov	r22, r15
    c402:	82 5a       	subi	r24, 0xA2	; 162
    c404:	9e 4f       	sbci	r25, 0xFE	; 254
    c406:	0e 94 47 8f 	call	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2663
          thermostat_ring_set_mode(id, active);
          if (active == TERM_MODE_MAN_HEAT)
    c40a:	c4 5d       	subi	r28, 0xD4	; 212
    c40c:	de 4f       	sbci	r29, 0xFE	; 254
    c40e:	88 81       	ld	r24, Y
    c410:	cc 52       	subi	r28, 0x2C	; 44
    c412:	d1 40       	sbci	r29, 0x01	; 1
    c414:	83 30       	cpi	r24, 0x03	; 3
    c416:	21 f4       	brne	.+8      	; 0xc420 <mqtt_callback(char*, unsigned char*, unsigned int)+0x13aa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2664
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 0);
    c418:	60 e0       	ldi	r22, 0x00	; 0
    c41a:	87 2d       	mov	r24, r7
    c41c:	0e 94 7a a1 	call	0x142f4	; 0x142f4 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.57]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2665
          if (active == TERM_MODE_MAN_COOL)
    c420:	c4 5d       	subi	r28, 0xD4	; 212
    c422:	de 4f       	sbci	r29, 0xFE	; 254
    c424:	88 81       	ld	r24, Y
    c426:	cc 52       	subi	r28, 0x2C	; 44
    c428:	d1 40       	sbci	r29, 0x01	; 1
    c42a:	85 30       	cpi	r24, 0x05	; 5
    c42c:	21 f4       	brne	.+8      	; 0xc436 <mqtt_callback(char*, unsigned char*, unsigned int)+0x13c0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2666
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 1);
    c42e:	61 e0       	ldi	r22, 0x01	; 1
    c430:	87 2d       	mov	r24, r7
    c432:	0e 94 7a a1 	call	0x142f4	; 0x142f4 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.57]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2668
        }
        if ((cnt == 1) && (strcmp(pch, "mode") == 0))
    c436:	64 e6       	ldi	r22, 0x64	; 100
    c438:	76 e0       	ldi	r23, 0x06	; 6
    c43a:	c8 01       	movw	r24, r16
    c43c:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    c440:	89 2b       	or	r24, r25
    c442:	41 f5       	brne	.+80     	; 0xc494 <mqtt_callback(char*, unsigned char*, unsigned int)+0x141e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2670
        {
          active = atoi(my_payload);
    c444:	8b ed       	ldi	r24, 0xDB	; 219
    c446:	9a e0       	ldi	r25, 0x0A	; 10
    c448:	0e 94 b8 a2 	call	0x14570	; 0x14570 <atoi>
    c44c:	c4 5d       	subi	r28, 0xD4	; 212
    c44e:	de 4f       	sbci	r29, 0xFE	; 254
    c450:	88 83       	st	Y, r24
    c452:	cc 52       	subi	r28, 0x2C	; 44
    c454:	d1 40       	sbci	r29, 0x01	; 1
thermostat_ring_set_mode():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:180
    c456:	7e 9c       	mul	r7, r14
    c458:	90 01       	movw	r18, r0
    c45a:	11 24       	eor	r1, r1
    c45c:	68 2f       	mov	r22, r24
    c45e:	c9 01       	movw	r24, r18
    c460:	82 5a       	subi	r24, 0xA2	; 162
    c462:	9e 4f       	sbci	r25, 0xFE	; 254
    c464:	0e 94 47 8f 	call	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2672
          thermostat_ring_set_mode(id, active);
          if (active == TERM_MODE_MAN_HEAT)
    c468:	c4 5d       	subi	r28, 0xD4	; 212
    c46a:	de 4f       	sbci	r29, 0xFE	; 254
    c46c:	88 81       	ld	r24, Y
    c46e:	cc 52       	subi	r28, 0x2C	; 44
    c470:	d1 40       	sbci	r29, 0x01	; 1
    c472:	83 30       	cpi	r24, 0x03	; 3
    c474:	21 f4       	brne	.+8      	; 0xc47e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1408>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2673
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 0);
    c476:	60 e0       	ldi	r22, 0x00	; 0
    c478:	87 2d       	mov	r24, r7
    c47a:	0e 94 7a a1 	call	0x142f4	; 0x142f4 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.57]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2674
          if (active == TERM_MODE_MAN_COOL)
    c47e:	c4 5d       	subi	r28, 0xD4	; 212
    c480:	de 4f       	sbci	r29, 0xFE	; 254
    c482:	88 81       	ld	r24, Y
    c484:	cc 52       	subi	r28, 0x2C	; 44
    c486:	d1 40       	sbci	r29, 0x01	; 1
    c488:	85 30       	cpi	r24, 0x05	; 5
    c48a:	21 f4       	brne	.+8      	; 0xc494 <mqtt_callback(char*, unsigned char*, unsigned int)+0x141e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2675
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 1);
    c48c:	61 e0       	ldi	r22, 0x01	; 1
    c48e:	87 2d       	mov	r24, r7
    c490:	0e 94 7a a1 	call	0x142f4	; 0x142f4 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.57]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2677
        }
        if ((cnt == 1) && (strcmp(pch, "tds") == 0)) thermostat_ring_set_asociate_tds(id, atoi(my_payload));
    c494:	6e ea       	ldi	r22, 0xAE	; 174
    c496:	73 e0       	ldi	r23, 0x03	; 3
    c498:	c8 01       	movw	r24, r16
    c49a:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    c49e:	89 2b       	or	r24, r25
    c4a0:	69 f4       	brne	.+26     	; 0xc4bc <mqtt_callback(char*, unsigned char*, unsigned int)+0x1446>
    c4a2:	8b ed       	ldi	r24, 0xDB	; 219
    c4a4:	9a e0       	ldi	r25, 0x0A	; 10
    c4a6:	0e 94 b8 a2 	call	0x14570	; 0x14570 <atoi>
thermostat_ring_set_asociate_tds():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:170
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
}
void thermostat_ring_set_asociate_tds(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds, id);
    c4aa:	7e 9c       	mul	r7, r14
    c4ac:	90 01       	movw	r18, r0
    c4ae:	11 24       	eor	r1, r1
    c4b0:	68 2f       	mov	r22, r24
    c4b2:	c9 01       	movw	r24, r18
    c4b4:	84 5a       	subi	r24, 0xA4	; 164
    c4b6:	9e 4f       	sbci	r25, 0xFE	; 254
    c4b8:	0e 94 47 8f 	call	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2678
        if ((cnt == 1) && (strcmp(pch, "rtds") == 0)) thermostat_ring_set_asociate_tds(id, atoi(my_payload) + TDS_MEMORY_MAP_RTDS);
    c4bc:	6d ea       	ldi	r22, 0xAD	; 173
    c4be:	73 e0       	ldi	r23, 0x03	; 3
    c4c0:	c8 01       	movw	r24, r16
    c4c2:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    c4c6:	89 2b       	or	r24, r25
    c4c8:	69 f4       	brne	.+26     	; 0xc4e4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x146e>
    c4ca:	8b ed       	ldi	r24, 0xDB	; 219
    c4cc:	9a e0       	ldi	r25, 0x0A	; 10
    c4ce:	0e 94 b8 a2 	call	0x14570	; 0x14570 <atoi>
    c4d2:	60 e1       	ldi	r22, 0x10	; 16
    c4d4:	68 0f       	add	r22, r24
thermostat_ring_set_asociate_tds():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:170
    c4d6:	7e 9c       	mul	r7, r14
    c4d8:	c0 01       	movw	r24, r0
    c4da:	11 24       	eor	r1, r1
    c4dc:	84 5a       	subi	r24, 0xA4	; 164
    c4de:	9e 4f       	sbci	r25, 0xFE	; 254
    c4e0:	0e 94 47 8f 	call	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2679
        if ((cnt == 1) && (strcmp(pch, "active") == 0)) thermostat_ring_set_active(id, atoi(my_payload));
    c4e4:	62 eb       	ldi	r22, 0xB2	; 178
    c4e6:	73 e0       	ldi	r23, 0x03	; 3
    c4e8:	c8 01       	movw	r24, r16
    c4ea:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    c4ee:	89 2b       	or	r24, r25
    c4f0:	69 f4       	brne	.+26     	; 0xc50c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1496>
    c4f2:	8b ed       	ldi	r24, 0xDB	; 219
    c4f4:	9a e0       	ldi	r25, 0x0A	; 10
    c4f6:	0e 94 b8 a2 	call	0x14570	; 0x14570 <atoi>
thermostat_ring_set_active():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:137
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active);
}
void thermostat_ring_set_active(uint8_t idx, uint8_t ready)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active, ready);
    c4fa:	7e 9c       	mul	r7, r14
    c4fc:	90 01       	movw	r18, r0
    c4fe:	11 24       	eor	r1, r1
    c500:	68 2f       	mov	r22, r24
    c502:	c9 01       	movw	r24, r18
    c504:	83 5a       	subi	r24, 0xA3	; 163
    c506:	9e 4f       	sbci	r25, 0xFE	; 254
    c508:	0e 94 47 8f 	call	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2680
        if ((cnt == 1) && (strcmp(pch, "output") == 0)) thermostat_ring_set_output(id, atoi(my_payload));
    c50c:	69 e6       	ldi	r22, 0x69	; 105
    c50e:	76 e0       	ldi	r23, 0x06	; 6
    c510:	c8 01       	movw	r24, r16
    c512:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    c516:	89 2b       	or	r24, r25
    c518:	69 f4       	brne	.+26     	; 0xc534 <mqtt_callback(char*, unsigned char*, unsigned int)+0x14be>
    c51a:	8b ed       	ldi	r24, 0xDB	; 219
    c51c:	9a e0       	ldi	r25, 0x0A	; 10
    c51e:	0e 94 b8 a2 	call	0x14570	; 0x14570 <atoi>
thermostat_ring_set_output():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:127
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
}
void thermostat_ring_set_output(uint8_t idx, uint8_t output)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output, output);
    c522:	7e 9c       	mul	r7, r14
    c524:	90 01       	movw	r18, r0
    c526:	11 24       	eor	r1, r1
    c528:	68 2f       	mov	r22, r24
    c52a:	c9 01       	movw	r24, r18
    c52c:	81 5a       	subi	r24, 0xA1	; 161
    c52e:	9e 4f       	sbci	r25, 0xFE	; 254
    c530:	0e 94 47 8f 	call	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2681
        if ((cnt == 1) && (strcmp(pch, "pid_kp") == 0)) thermostat_ring_pid_set_kp(id, atof(my_payload));
    c534:	60 e7       	ldi	r22, 0x70	; 112
    c536:	76 e0       	ldi	r23, 0x06	; 6
    c538:	c8 01       	movw	r24, r16
    c53a:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    c53e:	89 2b       	or	r24, r25
    c540:	a1 f4       	brne	.+40     	; 0xc56a <mqtt_callback(char*, unsigned char*, unsigned int)+0x14f4>
    c542:	8b ed       	ldi	r24, 0xDB	; 219
    c544:	9a e0       	ldi	r25, 0x0A	; 10
    c546:	0e 94 b4 a2 	call	0x14568	; 0x14568 <atof>
thermostat_ring_pid_set_kp():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:242
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
}

void thermostat_ring_pid_set_kp(uint8_t id, float x)
{
  PID_p[id] = x;
    c54a:	24 e0       	ldi	r18, 0x04	; 4
    c54c:	72 9e       	mul	r7, r18
    c54e:	f0 01       	movw	r30, r0
    c550:	11 24       	eor	r1, r1
    c552:	e8 59       	subi	r30, 0x98	; 152
    c554:	f6 4f       	sbci	r31, 0xF6	; 246
    c556:	60 83       	st	Z, r22
    c558:	71 83       	std	Z+1, r23	; 0x01
    c55a:	82 83       	std	Z+2, r24	; 0x02
    c55c:	93 83       	std	Z+3, r25	; 0x03
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:243
  thermostat_ring_update_pid_parameters(id);
    c55e:	87 2d       	mov	r24, r7
    c560:	0e 94 5d 1f 	call	0x3eba	; 0x3eba <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:244
  thermostat_ring_set_pid_eeprom(id);
    c564:	87 2d       	mov	r24, r7
    c566:	0e 94 6f 4b 	call	0x96de	; 0x96de <thermostat_ring_set_pid_eeprom(unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2682
        if ((cnt == 1) && (strcmp(pch, "pid_ki") == 0)) thermostat_ring_pid_set_ki(id, atof(my_payload));
    c56a:	67 e7       	ldi	r22, 0x77	; 119
    c56c:	76 e0       	ldi	r23, 0x06	; 6
    c56e:	c8 01       	movw	r24, r16
    c570:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    c574:	89 2b       	or	r24, r25
    c576:	a1 f4       	brne	.+40     	; 0xc5a0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x152a>
    c578:	8b ed       	ldi	r24, 0xDB	; 219
    c57a:	9a e0       	ldi	r25, 0x0A	; 10
    c57c:	0e 94 b4 a2 	call	0x14568	; 0x14568 <atof>
thermostat_ring_pid_set_ki():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:248
}
void thermostat_ring_pid_set_ki(uint8_t id, float x)
{
  PID_i[id] = x;
    c580:	a4 e0       	ldi	r26, 0x04	; 4
    c582:	7a 9e       	mul	r7, r26
    c584:	f0 01       	movw	r30, r0
    c586:	11 24       	eor	r1, r1
    c588:	e4 58       	subi	r30, 0x84	; 132
    c58a:	f6 4f       	sbci	r31, 0xF6	; 246
    c58c:	60 83       	st	Z, r22
    c58e:	71 83       	std	Z+1, r23	; 0x01
    c590:	82 83       	std	Z+2, r24	; 0x02
    c592:	93 83       	std	Z+3, r25	; 0x03
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:249
  thermostat_ring_update_pid_parameters(id);
    c594:	87 2d       	mov	r24, r7
    c596:	0e 94 5d 1f 	call	0x3eba	; 0x3eba <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:250
  thermostat_ring_set_pid_eeprom(id);
    c59a:	87 2d       	mov	r24, r7
    c59c:	0e 94 6f 4b 	call	0x96de	; 0x96de <thermostat_ring_set_pid_eeprom(unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2683
        if ((cnt == 1) && (strcmp(pch, "pid_kd") == 0)) thermostat_ring_pid_set_kd(id, atof(my_payload));
    c5a0:	6e e7       	ldi	r22, 0x7E	; 126
    c5a2:	76 e0       	ldi	r23, 0x06	; 6
    c5a4:	c8 01       	movw	r24, r16
    c5a6:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    c5aa:	89 2b       	or	r24, r25
    c5ac:	a1 f4       	brne	.+40     	; 0xc5d6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1560>
    c5ae:	8b ed       	ldi	r24, 0xDB	; 219
    c5b0:	9a e0       	ldi	r25, 0x0A	; 10
    c5b2:	0e 94 b4 a2 	call	0x14568	; 0x14568 <atof>
thermostat_ring_pid_set_kd():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:254
}
void thermostat_ring_pid_set_kd(uint8_t id, float x)
{
  PID_d[id] = x;
    c5b6:	b4 e0       	ldi	r27, 0x04	; 4
    c5b8:	7b 9e       	mul	r7, r27
    c5ba:	f0 01       	movw	r30, r0
    c5bc:	11 24       	eor	r1, r1
    c5be:	e0 57       	subi	r30, 0x70	; 112
    c5c0:	f6 4f       	sbci	r31, 0xF6	; 246
    c5c2:	60 83       	st	Z, r22
    c5c4:	71 83       	std	Z+1, r23	; 0x01
    c5c6:	82 83       	std	Z+2, r24	; 0x02
    c5c8:	93 83       	std	Z+3, r25	; 0x03
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:255
  thermostat_ring_update_pid_parameters(id);
    c5ca:	87 2d       	mov	r24, r7
    c5cc:	0e 94 5d 1f 	call	0x3eba	; 0x3eba <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:256
  thermostat_ring_set_pid_eeprom(id);
    c5d0:	87 2d       	mov	r24, r7
    c5d2:	0e 94 6f 4b 	call	0x96de	; 0x96de <thermostat_ring_set_pid_eeprom(unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2684
        if ((cnt == 1) && (strcmp(pch, "pid_time") == 0)) thermostat_ring_pid_set_time(id, atoi(my_payload));
    c5d6:	65 e8       	ldi	r22, 0x85	; 133
    c5d8:	76 e0       	ldi	r23, 0x06	; 6
    c5da:	c8 01       	movw	r24, r16
    c5dc:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    c5e0:	89 2b       	or	r24, r25
    c5e2:	79 f4       	brne	.+30     	; 0xc602 <mqtt_callback(char*, unsigned char*, unsigned int)+0x158c>
    c5e4:	8b ed       	ldi	r24, 0xDB	; 219
    c5e6:	9a e0       	ldi	r25, 0x0A	; 10
    c5e8:	0e 94 b8 a2 	call	0x14570	; 0x14570 <atoi>
thermostat_ring_pid_set_time():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:261
}

void thermostat_ring_pid_set_time(uint8_t id, uint8_t timer)
{
  PID_time[id] = timer;
    c5ec:	e7 2d       	mov	r30, r7
    c5ee:	f0 e0       	ldi	r31, 0x00	; 0
    c5f0:	ec 55       	subi	r30, 0x5C	; 92
    c5f2:	f6 4f       	sbci	r31, 0xF6	; 246
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2684
    c5f4:	80 83       	st	Z, r24
thermostat_ring_pid_set_time():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:262
  thermostat_ring_update_pid_parameters(id);
    c5f6:	87 2d       	mov	r24, r7
    c5f8:	0e 94 5d 1f 	call	0x3eba	; 0x3eba <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:263
  thermostat_ring_set_pid_eeprom(id);
    c5fc:	87 2d       	mov	r24, r7
    c5fe:	0e 94 6f 4b 	call	0x96de	; 0x96de <thermostat_ring_set_pid_eeprom(unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2690
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
      }
      pch = strtok (NULL, "/");
    c602:	6f ec       	ldi	r22, 0xCF	; 207
    c604:	73 e0       	ldi	r23, 0x03	; 3
    c606:	90 e0       	ldi	r25, 0x00	; 0
    c608:	80 e0       	ldi	r24, 0x00	; 0
    c60a:	0e 94 f1 a2 	call	0x145e2	; 0x145e2 <strtok>
    c60e:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2691
      cnt++;
    c610:	d3 94       	inc	r13
    c612:	52 ce       	rjmp	.-860    	; 0xc2b8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1242>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2696
    }

  }
  //// nastaveni ringu do vychoziho stavu
  strcpy_P(str1, thermctl_header_in);
    c614:	65 ed       	ldi	r22, 0xD5	; 213
    c616:	7c e2       	ldi	r23, 0x2C	; 44
    c618:	c5 01       	movw	r24, r10
    c61a:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2697
  strcat(str1, device.nazev);
    c61e:	65 e3       	ldi	r22, 0x35	; 53
    c620:	7c e0       	ldi	r23, 0x0C	; 12
    c622:	c5 01       	movw	r24, r10
    c624:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2698
  strcat(str1, "/ring/clear");
    c628:	66 e6       	ldi	r22, 0x66	; 102
    c62a:	75 e0       	ldi	r23, 0x05	; 5
    c62c:	c5 01       	movw	r24, r10
    c62e:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2699
  if (strncmp(str1, topic, strlen(str1)) == 0)
    c632:	f5 01       	movw	r30, r10
    c634:	01 90       	ld	r0, Z+
    c636:	00 20       	and	r0, r0
    c638:	e9 f7       	brne	.-6      	; 0xc634 <mqtt_callback(char*, unsigned char*, unsigned int)+0x15be>
    c63a:	31 97       	sbiw	r30, 0x01	; 1
    c63c:	af 01       	movw	r20, r30
    c63e:	4a 19       	sub	r20, r10
    c640:	5b 09       	sbc	r21, r11
    c642:	b4 01       	movw	r22, r8
    c644:	c5 01       	movw	r24, r10
    c646:	0e 94 77 af 	call	0x15eee	; 0x15eee <strncmp>
    c64a:	89 2b       	or	r24, r25
    c64c:	a1 f4       	brne	.+40     	; 0xc676 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1600>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2701
  {
    mqtt_process_message++;
    c64e:	80 91 03 0a 	lds	r24, 0x0A03	; 0x800a03 <mqtt_process_message>
    c652:	90 91 04 0a 	lds	r25, 0x0A04	; 0x800a04 <mqtt_process_message+0x1>
    c656:	01 96       	adiw	r24, 0x01	; 1
    c658:	90 93 04 0a 	sts	0x0A04, r25	; 0x800a04 <mqtt_process_message+0x1>
    c65c:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2702
    id = atoi(my_payload);
    c660:	8b ed       	ldi	r24, 0xDB	; 219
    c662:	9a e0       	ldi	r25, 0x0A	; 10
    c664:	0e 94 b8 a2 	call	0x14570	; 0x14570 <atoi>
    c668:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2703
    if (id < MAX_THERMOSTAT)
    c66a:	e4 e0       	ldi	r30, 0x04	; 4
    c66c:	e8 17       	cp	r30, r24
    c66e:	08 f4       	brcc	.+2      	; 0xc672 <mqtt_callback(char*, unsigned char*, unsigned int)+0x15fc>
    c670:	99 c1       	rjmp	.+818    	; 0xc9a4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x192e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2705
    {
      thermostat_ring_clear(id);
    c672:	0e 94 f1 4b 	call	0x97e2	; 0x97e2 <thermostat_ring_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2716
  }
  ////////
  ////////
  //// nastavovani vlastnosti site
  //// ziskani nastaveni site
  strcpy_P(str1, thermctl_header_in);
    c676:	65 ed       	ldi	r22, 0xD5	; 213
    c678:	7c e2       	ldi	r23, 0x2C	; 44
    c67a:	c5 01       	movw	r24, r10
    c67c:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2717
  strcat(str1, device.nazev);
    c680:	65 e3       	ldi	r22, 0x35	; 53
    c682:	7c e0       	ldi	r23, 0x0C	; 12
    c684:	c5 01       	movw	r24, r10
    c686:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2718
  strcat(str1, "/network/get/config");
    c68a:	64 e8       	ldi	r22, 0x84	; 132
    c68c:	75 e0       	ldi	r23, 0x05	; 5
    c68e:	c5 01       	movw	r24, r10
    c690:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2719
  if (strncmp(str1, topic, strlen(str1)) == 0)
    c694:	f5 01       	movw	r30, r10
    c696:	01 90       	ld	r0, Z+
    c698:	00 20       	and	r0, r0
    c69a:	e9 f7       	brne	.-6      	; 0xc696 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1620>
    c69c:	31 97       	sbiw	r30, 0x01	; 1
    c69e:	af 01       	movw	r20, r30
    c6a0:	4a 19       	sub	r20, r10
    c6a2:	5b 09       	sbc	r21, r11
    c6a4:	b4 01       	movw	r22, r8
    c6a6:	c5 01       	movw	r24, r10
    c6a8:	0e 94 77 af 	call	0x15eee	; 0x15eee <strncmp>
    c6ac:	89 2b       	or	r24, r25
    c6ae:	09 f0       	breq	.+2      	; 0xc6b2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x163c>
    c6b0:	2f c1       	rjmp	.+606    	; 0xc910 <mqtt_callback(char*, unsigned char*, unsigned int)+0x189a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2721
  {
    mqtt_process_message++;
    c6b2:	80 91 03 0a 	lds	r24, 0x0A03	; 0x800a03 <mqtt_process_message>
    c6b6:	90 91 04 0a 	lds	r25, 0x0A04	; 0x800a04 <mqtt_process_message+0x1>
    c6ba:	01 96       	adiw	r24, 0x01	; 1
    c6bc:	90 93 04 0a 	sts	0x0A04, r25	; 0x800a04 <mqtt_process_message+0x1>
    c6c0:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <mqtt_process_message>
send_network_config():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:262
//// thermctl-out/XXXXX/network/name
void send_network_config(PubSubClient *mqtt_client)
{
  char payload[20];
  char str_topic[32];
  payload[0] = 0;
    c6c4:	c8 5f       	subi	r28, 0xF8	; 248
    c6c6:	de 4f       	sbci	r29, 0xFE	; 254
    c6c8:	18 82       	st	Y, r1
    c6ca:	c8 50       	subi	r28, 0x08	; 8
    c6cc:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:263
  createString(payload, ':', device.mac, 6, 16);
    c6ce:	00 e1       	ldi	r16, 0x10	; 16
    c6d0:	26 e0       	ldi	r18, 0x06	; 6
    c6d2:	4f e1       	ldi	r20, 0x1F	; 31
    c6d4:	5c e0       	ldi	r21, 0x0C	; 12
    c6d6:	6a e3       	ldi	r22, 0x3A	; 58
    c6d8:	ce 01       	movw	r24, r28
    c6da:	88 5f       	subi	r24, 0xF8	; 248
    c6dc:	9e 4f       	sbci	r25, 0xFE	; 254
    c6de:	0e 94 4b 8f 	call	0x11e96	; 0x11e96 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:264
  strcpy_P(str_topic, network_mac);
    c6e2:	66 e4       	ldi	r22, 0x46	; 70
    c6e4:	7c e2       	ldi	r23, 0x2C	; 44
    c6e6:	ce 01       	movw	r24, r28
    c6e8:	88 5b       	subi	r24, 0xB8	; 184
    c6ea:	9f 4f       	sbci	r25, 0xFF	; 255
    c6ec:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:265
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
    c6f0:	ae 01       	movw	r20, r28
    c6f2:	48 5f       	subi	r20, 0xF8	; 248
    c6f4:	5e 4f       	sbci	r21, 0xFE	; 254
    c6f6:	be 01       	movw	r22, r28
    c6f8:	68 5b       	subi	r22, 0xB8	; 184
    c6fa:	7f 4f       	sbci	r23, 0xFF	; 255
    c6fc:	82 e1       	ldi	r24, 0x12	; 18
    c6fe:	9e e0       	ldi	r25, 0x0E	; 14
    c700:	0e 94 0f 53 	call	0xa61e	; 0xa61e <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:267
  ///
  payload[0] = 0;
    c704:	c8 5f       	subi	r28, 0xF8	; 248
    c706:	de 4f       	sbci	r29, 0xFE	; 254
    c708:	18 82       	st	Y, r1
    c70a:	c8 50       	subi	r28, 0x08	; 8
    c70c:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:268
  createString(payload, '.', device.myIP, 4, 10);
    c70e:	0a e0       	ldi	r16, 0x0A	; 10
    c710:	24 e0       	ldi	r18, 0x04	; 4
    c712:	45 e2       	ldi	r20, 0x25	; 37
    c714:	5c e0       	ldi	r21, 0x0C	; 12
    c716:	6e e2       	ldi	r22, 0x2E	; 46
    c718:	ce 01       	movw	r24, r28
    c71a:	88 5f       	subi	r24, 0xF8	; 248
    c71c:	9e 4f       	sbci	r25, 0xFE	; 254
    c71e:	0e 94 4b 8f 	call	0x11e96	; 0x11e96 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:269
  strcpy_P(str_topic, network_ip);
    c722:	63 e2       	ldi	r22, 0x23	; 35
    c724:	7f e2       	ldi	r23, 0x2F	; 47
    c726:	ce 01       	movw	r24, r28
    c728:	88 5b       	subi	r24, 0xB8	; 184
    c72a:	9f 4f       	sbci	r25, 0xFF	; 255
    c72c:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:270
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
    c730:	ae 01       	movw	r20, r28
    c732:	48 5f       	subi	r20, 0xF8	; 248
    c734:	5e 4f       	sbci	r21, 0xFE	; 254
    c736:	be 01       	movw	r22, r28
    c738:	68 5b       	subi	r22, 0xB8	; 184
    c73a:	7f 4f       	sbci	r23, 0xFF	; 255
    c73c:	82 e1       	ldi	r24, 0x12	; 18
    c73e:	9e e0       	ldi	r25, 0x0E	; 14
    c740:	0e 94 0f 53 	call	0xa61e	; 0xa61e <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:272
  ///
  payload[0] = 0;
    c744:	c8 5f       	subi	r28, 0xF8	; 248
    c746:	de 4f       	sbci	r29, 0xFE	; 254
    c748:	18 82       	st	Y, r1
    c74a:	c8 50       	subi	r28, 0x08	; 8
    c74c:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:273
  createString(payload, '.', device.myMASK, 4, 10);
    c74e:	24 e0       	ldi	r18, 0x04	; 4
    c750:	49 e2       	ldi	r20, 0x29	; 41
    c752:	5c e0       	ldi	r21, 0x0C	; 12
    c754:	6e e2       	ldi	r22, 0x2E	; 46
    c756:	ce 01       	movw	r24, r28
    c758:	88 5f       	subi	r24, 0xF8	; 248
    c75a:	9e 4f       	sbci	r25, 0xFE	; 254
    c75c:	0e 94 4b 8f 	call	0x11e96	; 0x11e96 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:274
  strcpy_P(str_topic, network_netmask);
    c760:	66 e3       	ldi	r22, 0x36	; 54
    c762:	7c e2       	ldi	r23, 0x2C	; 44
    c764:	ce 01       	movw	r24, r28
    c766:	88 5b       	subi	r24, 0xB8	; 184
    c768:	9f 4f       	sbci	r25, 0xFF	; 255
    c76a:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:275
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
    c76e:	ae 01       	movw	r20, r28
    c770:	48 5f       	subi	r20, 0xF8	; 248
    c772:	5e 4f       	sbci	r21, 0xFE	; 254
    c774:	be 01       	movw	r22, r28
    c776:	68 5b       	subi	r22, 0xB8	; 184
    c778:	7f 4f       	sbci	r23, 0xFF	; 255
    c77a:	82 e1       	ldi	r24, 0x12	; 18
    c77c:	9e e0       	ldi	r25, 0x0E	; 14
    c77e:	0e 94 0f 53 	call	0xa61e	; 0xa61e <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:277
  ///
  payload[0] = 0;
    c782:	c8 5f       	subi	r28, 0xF8	; 248
    c784:	de 4f       	sbci	r29, 0xFE	; 254
    c786:	18 82       	st	Y, r1
    c788:	c8 50       	subi	r28, 0x08	; 8
    c78a:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:278
  createString(payload, '.', device.myGW, 4, 10);
    c78c:	24 e0       	ldi	r18, 0x04	; 4
    c78e:	41 e3       	ldi	r20, 0x31	; 49
    c790:	5c e0       	ldi	r21, 0x0C	; 12
    c792:	6e e2       	ldi	r22, 0x2E	; 46
    c794:	ce 01       	movw	r24, r28
    c796:	88 5f       	subi	r24, 0xF8	; 248
    c798:	9e 4f       	sbci	r25, 0xFE	; 254
    c79a:	0e 94 4b 8f 	call	0x11e96	; 0x11e96 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:279
  strcpy_P(str_topic, network_gw);
    c79e:	6b e2       	ldi	r22, 0x2B	; 43
    c7a0:	7c e2       	ldi	r23, 0x2C	; 44
    c7a2:	ce 01       	movw	r24, r28
    c7a4:	88 5b       	subi	r24, 0xB8	; 184
    c7a6:	9f 4f       	sbci	r25, 0xFF	; 255
    c7a8:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:280
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
    c7ac:	ae 01       	movw	r20, r28
    c7ae:	48 5f       	subi	r20, 0xF8	; 248
    c7b0:	5e 4f       	sbci	r21, 0xFE	; 254
    c7b2:	be 01       	movw	r22, r28
    c7b4:	68 5b       	subi	r22, 0xB8	; 184
    c7b6:	7f 4f       	sbci	r23, 0xFF	; 255
    c7b8:	82 e1       	ldi	r24, 0x12	; 18
    c7ba:	9e e0       	ldi	r25, 0x0E	; 14
    c7bc:	0e 94 0f 53 	call	0xa61e	; 0xa61e <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:282
  ///
  payload[0] = 0;
    c7c0:	c8 5f       	subi	r28, 0xF8	; 248
    c7c2:	de 4f       	sbci	r29, 0xFE	; 254
    c7c4:	18 82       	st	Y, r1
    c7c6:	c8 50       	subi	r28, 0x08	; 8
    c7c8:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:283
  createString(payload, '.', device.myDNS, 4, 10);
    c7ca:	24 e0       	ldi	r18, 0x04	; 4
    c7cc:	4d e2       	ldi	r20, 0x2D	; 45
    c7ce:	5c e0       	ldi	r21, 0x0C	; 12
    c7d0:	6e e2       	ldi	r22, 0x2E	; 46
    c7d2:	ce 01       	movw	r24, r28
    c7d4:	88 5f       	subi	r24, 0xF8	; 248
    c7d6:	9e 4f       	sbci	r25, 0xFE	; 254
    c7d8:	0e 94 4b 8f 	call	0x11e96	; 0x11e96 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:284
  strcpy_P(str_topic, network_dns);
    c7dc:	6f e1       	ldi	r22, 0x1F	; 31
    c7de:	7c e2       	ldi	r23, 0x2C	; 44
    c7e0:	ce 01       	movw	r24, r28
    c7e2:	88 5b       	subi	r24, 0xB8	; 184
    c7e4:	9f 4f       	sbci	r25, 0xFF	; 255
    c7e6:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:285
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
    c7ea:	ae 01       	movw	r20, r28
    c7ec:	48 5f       	subi	r20, 0xF8	; 248
    c7ee:	5e 4f       	sbci	r21, 0xFE	; 254
    c7f0:	be 01       	movw	r22, r28
    c7f2:	68 5b       	subi	r22, 0xB8	; 184
    c7f4:	7f 4f       	sbci	r23, 0xFF	; 255
    c7f6:	82 e1       	ldi	r24, 0x12	; 18
    c7f8:	9e e0       	ldi	r25, 0x0E	; 14
    c7fa:	0e 94 0f 53 	call	0xa61e	; 0xa61e <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:287
  ///
  payload[0] = 0;
    c7fe:	c8 5f       	subi	r28, 0xF8	; 248
    c800:	de 4f       	sbci	r29, 0xFE	; 254
    c802:	18 82       	st	Y, r1
    c804:	c8 50       	subi	r28, 0x08	; 8
    c806:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:288
  createString(payload, '.', device.ntp_server, 4, 10);
    c808:	24 e0       	ldi	r18, 0x04	; 4
    c80a:	4d e6       	ldi	r20, 0x6D	; 109
    c80c:	5c e0       	ldi	r21, 0x0C	; 12
    c80e:	6e e2       	ldi	r22, 0x2E	; 46
    c810:	ce 01       	movw	r24, r28
    c812:	88 5f       	subi	r24, 0xF8	; 248
    c814:	9e 4f       	sbci	r25, 0xFE	; 254
    c816:	0e 94 4b 8f 	call	0x11e96	; 0x11e96 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:289
  strcpy_P(str_topic, network_ntp);
    c81a:	63 e1       	ldi	r22, 0x13	; 19
    c81c:	7c e2       	ldi	r23, 0x2C	; 44
    c81e:	ce 01       	movw	r24, r28
    c820:	88 5b       	subi	r24, 0xB8	; 184
    c822:	9f 4f       	sbci	r25, 0xFF	; 255
    c824:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:290
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
    c828:	ae 01       	movw	r20, r28
    c82a:	48 5f       	subi	r20, 0xF8	; 248
    c82c:	5e 4f       	sbci	r21, 0xFE	; 254
    c82e:	be 01       	movw	r22, r28
    c830:	68 5b       	subi	r22, 0xB8	; 184
    c832:	7f 4f       	sbci	r23, 0xFF	; 255
    c834:	82 e1       	ldi	r24, 0x12	; 18
    c836:	9e e0       	ldi	r25, 0x0E	; 14
    c838:	0e 94 0f 53 	call	0xa61e	; 0xa61e <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:292
  ///
  payload[0] = 0;
    c83c:	c8 5f       	subi	r28, 0xF8	; 248
    c83e:	de 4f       	sbci	r29, 0xFE	; 254
    c840:	18 82       	st	Y, r1
    c842:	c8 50       	subi	r28, 0x08	; 8
    c844:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:293
  createString(payload, '.', device.mqtt_server, 4, 10);
    c846:	24 e0       	ldi	r18, 0x04	; 4
    c848:	4f e3       	ldi	r20, 0x3F	; 63
    c84a:	5c e0       	ldi	r21, 0x0C	; 12
    c84c:	6e e2       	ldi	r22, 0x2E	; 46
    c84e:	ce 01       	movw	r24, r28
    c850:	88 5f       	subi	r24, 0xF8	; 248
    c852:	9e 4f       	sbci	r25, 0xFE	; 254
    c854:	0e 94 4b 8f 	call	0x11e96	; 0x11e96 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:294
  strcpy_P(str_topic, network_mqtt_host);
    c858:	61 e0       	ldi	r22, 0x01	; 1
    c85a:	7c e2       	ldi	r23, 0x2C	; 44
    c85c:	ce 01       	movw	r24, r28
    c85e:	88 5b       	subi	r24, 0xB8	; 184
    c860:	9f 4f       	sbci	r25, 0xFF	; 255
    c862:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:295
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
    c866:	ae 01       	movw	r20, r28
    c868:	48 5f       	subi	r20, 0xF8	; 248
    c86a:	5e 4f       	sbci	r21, 0xFE	; 254
    c86c:	be 01       	movw	r22, r28
    c86e:	68 5b       	subi	r22, 0xB8	; 184
    c870:	7f 4f       	sbci	r23, 0xFF	; 255
    c872:	82 e1       	ldi	r24, 0x12	; 18
    c874:	9e e0       	ldi	r25, 0x0E	; 14
    c876:	0e 94 0f 53 	call	0xa61e	; 0xa61e <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    c87a:	4a e0       	ldi	r20, 0x0A	; 10
    c87c:	be 01       	movw	r22, r28
    c87e:	68 5f       	subi	r22, 0xF8	; 248
    c880:	7e 4f       	sbci	r23, 0xFE	; 254
    c882:	80 91 43 0c 	lds	r24, 0x0C43	; 0x800c43 <device+0x24>
    c886:	90 91 44 0c 	lds	r25, 0x0C44	; 0x800c44 <device+0x25>
    c88a:	0e 94 27 a3 	call	0x1464e	; 0x1464e <__itoa_ncheck>
send_network_config():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:298
  ///
  itoa(device.mqtt_port, payload, 10);
  strcpy_P(str_topic, network_mqtt_port);
    c88e:	6f ee       	ldi	r22, 0xEF	; 239
    c890:	7b e2       	ldi	r23, 0x2B	; 43
    c892:	ce 01       	movw	r24, r28
    c894:	88 5b       	subi	r24, 0xB8	; 184
    c896:	9f 4f       	sbci	r25, 0xFF	; 255
    c898:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:299
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
    c89c:	ae 01       	movw	r20, r28
    c89e:	48 5f       	subi	r20, 0xF8	; 248
    c8a0:	5e 4f       	sbci	r21, 0xFE	; 254
    c8a2:	be 01       	movw	r22, r28
    c8a4:	68 5b       	subi	r22, 0xB8	; 184
    c8a6:	7f 4f       	sbci	r23, 0xFF	; 255
    c8a8:	82 e1       	ldi	r24, 0x12	; 18
    c8aa:	9e e0       	ldi	r25, 0x0E	; 14
    c8ac:	0e 94 0f 53 	call	0xa61e	; 0xa61e <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:301
  ///
  strcpy_P(str_topic, network_mqtt_user);
    c8b0:	6d ed       	ldi	r22, 0xDD	; 221
    c8b2:	7b e2       	ldi	r23, 0x2B	; 43
    c8b4:	ce 01       	movw	r24, r28
    c8b6:	88 5b       	subi	r24, 0xB8	; 184
    c8b8:	9f 4f       	sbci	r25, 0xFF	; 255
    c8ba:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:302
  send_mqtt_general_payload(mqtt_client, str_topic, device.mqtt_user);
    c8be:	45 e4       	ldi	r20, 0x45	; 69
    c8c0:	5c e0       	ldi	r21, 0x0C	; 12
    c8c2:	be 01       	movw	r22, r28
    c8c4:	68 5b       	subi	r22, 0xB8	; 184
    c8c6:	7f 4f       	sbci	r23, 0xFF	; 255
    c8c8:	82 e1       	ldi	r24, 0x12	; 18
    c8ca:	9e e0       	ldi	r25, 0x0E	; 14
    c8cc:	0e 94 0f 53 	call	0xa61e	; 0xa61e <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:304
  ///
  strcpy_P(str_topic, network_mqtt_key);
    c8d0:	6c ec       	ldi	r22, 0xCC	; 204
    c8d2:	7b e2       	ldi	r23, 0x2B	; 43
    c8d4:	ce 01       	movw	r24, r28
    c8d6:	88 5b       	subi	r24, 0xB8	; 184
    c8d8:	9f 4f       	sbci	r25, 0xFF	; 255
    c8da:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:305
  send_mqtt_general_payload(mqtt_client, str_topic, device.mqtt_key);
    c8de:	49 e5       	ldi	r20, 0x59	; 89
    c8e0:	5c e0       	ldi	r21, 0x0C	; 12
    c8e2:	be 01       	movw	r22, r28
    c8e4:	68 5b       	subi	r22, 0xB8	; 184
    c8e6:	7f 4f       	sbci	r23, 0xFF	; 255
    c8e8:	82 e1       	ldi	r24, 0x12	; 18
    c8ea:	9e e0       	ldi	r25, 0x0E	; 14
    c8ec:	0e 94 0f 53 	call	0xa61e	; 0xa61e <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:307
  ///
  strcpy_P(str_topic, network_name);
    c8f0:	6f eb       	ldi	r22, 0xBF	; 191
    c8f2:	7b e2       	ldi	r23, 0x2B	; 43
    c8f4:	ce 01       	movw	r24, r28
    c8f6:	88 5b       	subi	r24, 0xB8	; 184
    c8f8:	9f 4f       	sbci	r25, 0xFF	; 255
    c8fa:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:308
  send_mqtt_general_payload(mqtt_client, str_topic, device.nazev);
    c8fe:	45 e3       	ldi	r20, 0x35	; 53
    c900:	5c e0       	ldi	r21, 0x0C	; 12
    c902:	be 01       	movw	r22, r28
    c904:	68 5b       	subi	r22, 0xB8	; 184
    c906:	7f 4f       	sbci	r23, 0xFF	; 255
    c908:	82 e1       	ldi	r24, 0x12	; 18
    c90a:	9e e0       	ldi	r25, 0x0E	; 14
    c90c:	0e 94 0f 53 	call	0xa61e	; 0xa61e <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2736
  //// thermctl-in/XXXXX/network/set/mqtt_host
  //// thermctl-in/XXXXX/network/set/mqtt_port
  //// thermctl-in/XXXXX/network/set/mqtt_user
  //// thermctl-in/XXXXX/network/set/mqtt_key
  //// thermctl-in/XXXXX/network/set/name
  strcpy_P(str1, thermctl_header_in);
    c910:	65 ed       	ldi	r22, 0xD5	; 213
    c912:	7c e2       	ldi	r23, 0x2C	; 44
    c914:	c5 01       	movw	r24, r10
    c916:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2737
  strcat(str1, device.nazev);
    c91a:	65 e3       	ldi	r22, 0x35	; 53
    c91c:	7c e0       	ldi	r23, 0x0C	; 12
    c91e:	c5 01       	movw	r24, r10
    c920:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2738
  strcat(str1, "/network/set/");
    c924:	68 e9       	ldi	r22, 0x98	; 152
    c926:	75 e0       	ldi	r23, 0x05	; 5
    c928:	c5 01       	movw	r24, r10
    c92a:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2739
  if (strncmp(str1, topic, strlen(str1)) == 0)
    c92e:	f5 01       	movw	r30, r10
    c930:	01 90       	ld	r0, Z+
    c932:	00 20       	and	r0, r0
    c934:	e9 f7       	brne	.-6      	; 0xc930 <mqtt_callback(char*, unsigned char*, unsigned int)+0x18ba>
    c936:	31 97       	sbiw	r30, 0x01	; 1
    c938:	af 01       	movw	r20, r30
    c93a:	4a 19       	sub	r20, r10
    c93c:	5b 09       	sbc	r21, r11
    c93e:	b4 01       	movw	r22, r8
    c940:	c5 01       	movw	r24, r10
    c942:	0e 94 77 af 	call	0x15eee	; 0x15eee <strncmp>
    c946:	89 2b       	or	r24, r25
    c948:	09 f0       	breq	.+2      	; 0xc94c <mqtt_callback(char*, unsigned char*, unsigned int)+0x18d6>
    c94a:	f1 c0       	rjmp	.+482    	; 0xcb2e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ab8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2741
  {
    mqtt_process_message++;
    c94c:	80 91 03 0a 	lds	r24, 0x0A03	; 0x800a03 <mqtt_process_message>
    c950:	90 91 04 0a 	lds	r25, 0x0A04	; 0x800a04 <mqtt_process_message+0x1>
    c954:	01 96       	adiw	r24, 0x01	; 1
    c956:	90 93 04 0a 	sts	0x0A04, r25	; 0x800a04 <mqtt_process_message+0x1>
    c95a:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2743
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    c95e:	f5 01       	movw	r30, r10
    c960:	01 90       	ld	r0, Z+
    c962:	00 20       	and	r0, r0
    c964:	e9 f7       	brne	.-6      	; 0xc960 <mqtt_callback(char*, unsigned char*, unsigned int)+0x18ea>
    c966:	31 97       	sbiw	r30, 0x01	; 1
    c968:	ea 19       	sub	r30, r10
    c96a:	fb 09       	sbc	r31, r11
    c96c:	9e 2f       	mov	r25, r30
    c96e:	4e 2f       	mov	r20, r30
    c970:	84 2f       	mov	r24, r20
    c972:	89 1b       	sub	r24, r25
    c974:	24 2f       	mov	r18, r20
    c976:	30 e0       	ldi	r19, 0x00	; 0
    c978:	d4 01       	movw	r26, r8
    c97a:	0d 90       	ld	r0, X+
    c97c:	00 20       	and	r0, r0
    c97e:	e9 f7       	brne	.-6      	; 0xc97a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1904>
    c980:	11 97       	sbiw	r26, 0x01	; 1
    c982:	a8 19       	sub	r26, r8
    c984:	b9 09       	sbc	r27, r9
    c986:	2a 17       	cp	r18, r26
    c988:	3b 07       	cpc	r19, r27
    c98a:	88 f4       	brcc	.+34     	; 0xc9ae <mqtt_callback(char*, unsigned char*, unsigned int)+0x1938>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2745
    {
      str1[cnt] = topic[f];
    c98c:	d5 01       	movw	r26, r10
    c98e:	a8 0f       	add	r26, r24
    c990:	b1 1d       	adc	r27, r1
    c992:	28 0d       	add	r18, r8
    c994:	39 1d       	adc	r19, r9
    c996:	f9 01       	movw	r30, r18
    c998:	80 81       	ld	r24, Z
    c99a:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2746
      str1[cnt + 1] = 0;
    c99c:	11 96       	adiw	r26, 0x01	; 1
    c99e:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2743
  strcat(str1, "/network/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    c9a0:	4f 5f       	subi	r20, 0xFF	; 255
    c9a2:	e6 cf       	rjmp	.-52     	; 0xc970 <mqtt_callback(char*, unsigned char*, unsigned int)+0x18fa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2709
    {
      thermostat_ring_clear(id);
    }
    else
    {
      log_error(&mqtt_client, "ring/clear bad id");
    c9a4:	82 e7       	ldi	r24, 0x72	; 114
    c9a6:	95 e0       	ldi	r25, 0x05	; 5
    c9a8:	0e 94 64 81 	call	0x102c8	; 0x102c8 <log_error(PubSubClient*, char*) [clone .constprop.61]>
    c9ac:	64 ce       	rjmp	.-824    	; 0xc676 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1600>
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:94
{
  uint8_t cnt;
  uint8_t ret = 0;
  char *pch;
  cnt = 0;
  pch = strtok (data, "/");
    c9ae:	6f ec       	ldi	r22, 0xCF	; 207
    c9b0:	73 e0       	ldi	r23, 0x03	; 3
    c9b2:	c5 01       	movw	r24, r10
    c9b4:	0e 94 f1 a2 	call	0x145e2	; 0x145e2 <strtok>
    c9b8:	7c 01       	movw	r14, r24
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:93
uint8_t setting_network(char *data, char *my_payload)
{
  uint8_t cnt;
  uint8_t ret = 0;
  char *pch;
  cnt = 0;
    c9ba:	10 e0       	ldi	r17, 0x00	; 0
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:95
  pch = strtok (data, "/");
  while (pch != NULL)
    c9bc:	e1 14       	cp	r14, r1
    c9be:	f1 04       	cpc	r15, r1
    c9c0:	09 f4       	brne	.+2      	; 0xc9c4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x194e>
    c9c2:	a9 c0       	rjmp	.+338    	; 0xcb16 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1aa0>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:97
  {
    if (strcmp(pch, "mac") == 0)
    c9c4:	66 ea       	ldi	r22, 0xA6	; 166
    c9c6:	75 e0       	ldi	r23, 0x05	; 5
    c9c8:	c7 01       	movw	r24, r14
    c9ca:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    c9ce:	89 2b       	or	r24, r25
    c9d0:	41 f4       	brne	.+16     	; 0xc9e2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x196c>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:99
    {
      parseBytes(my_payload, ':', device.mac, 6, 10);
    c9d2:	46 e0       	ldi	r20, 0x06	; 6
    c9d4:	50 e0       	ldi	r21, 0x00	; 0
    c9d6:	6f e1       	ldi	r22, 0x1F	; 31
    c9d8:	7c e0       	ldi	r23, 0x0C	; 12
    c9da:	8a e3       	ldi	r24, 0x3A	; 58
    c9dc:	0e 94 8a 81 	call	0x10314	; 0x10314 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.60]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:100
      cnt = 1;
    c9e0:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:102
    }
    if (strcmp(pch, "ip") == 0)
    c9e2:	6a ea       	ldi	r22, 0xAA	; 170
    c9e4:	75 e0       	ldi	r23, 0x05	; 5
    c9e6:	c7 01       	movw	r24, r14
    c9e8:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    c9ec:	89 2b       	or	r24, r25
    c9ee:	41 f4       	brne	.+16     	; 0xca00 <mqtt_callback(char*, unsigned char*, unsigned int)+0x198a>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:104
    {
      parseBytes(my_payload, '.', device.myIP, 4, 10);
    c9f0:	44 e0       	ldi	r20, 0x04	; 4
    c9f2:	50 e0       	ldi	r21, 0x00	; 0
    c9f4:	65 e2       	ldi	r22, 0x25	; 37
    c9f6:	7c e0       	ldi	r23, 0x0C	; 12
    c9f8:	8e e2       	ldi	r24, 0x2E	; 46
    c9fa:	0e 94 8a 81 	call	0x10314	; 0x10314 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.60]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:105
      cnt = 1;
    c9fe:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:107
    }
    if (strcmp(pch, "netmask") == 0)
    ca00:	6d ea       	ldi	r22, 0xAD	; 173
    ca02:	75 e0       	ldi	r23, 0x05	; 5
    ca04:	c7 01       	movw	r24, r14
    ca06:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    ca0a:	89 2b       	or	r24, r25
    ca0c:	41 f4       	brne	.+16     	; 0xca1e <mqtt_callback(char*, unsigned char*, unsigned int)+0x19a8>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:109
    {
      parseBytes(my_payload, '.', device.myMASK, 4, 10);
    ca0e:	44 e0       	ldi	r20, 0x04	; 4
    ca10:	50 e0       	ldi	r21, 0x00	; 0
    ca12:	69 e2       	ldi	r22, 0x29	; 41
    ca14:	7c e0       	ldi	r23, 0x0C	; 12
    ca16:	8e e2       	ldi	r24, 0x2E	; 46
    ca18:	0e 94 8a 81 	call	0x10314	; 0x10314 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.60]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:110
      cnt = 1;
    ca1c:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:112
    }
    if (strcmp(pch, "gw") == 0)
    ca1e:	65 eb       	ldi	r22, 0xB5	; 181
    ca20:	75 e0       	ldi	r23, 0x05	; 5
    ca22:	c7 01       	movw	r24, r14
    ca24:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    ca28:	89 2b       	or	r24, r25
    ca2a:	41 f4       	brne	.+16     	; 0xca3c <mqtt_callback(char*, unsigned char*, unsigned int)+0x19c6>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:114
    {
      parseBytes(my_payload, '.', device.myGW, 4, 10);
    ca2c:	44 e0       	ldi	r20, 0x04	; 4
    ca2e:	50 e0       	ldi	r21, 0x00	; 0
    ca30:	61 e3       	ldi	r22, 0x31	; 49
    ca32:	7c e0       	ldi	r23, 0x0C	; 12
    ca34:	8e e2       	ldi	r24, 0x2E	; 46
    ca36:	0e 94 8a 81 	call	0x10314	; 0x10314 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.60]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:115
      cnt = 1;
    ca3a:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:117
    }
    if (strcmp(pch, "dns") == 0)
    ca3c:	68 eb       	ldi	r22, 0xB8	; 184
    ca3e:	75 e0       	ldi	r23, 0x05	; 5
    ca40:	c7 01       	movw	r24, r14
    ca42:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    ca46:	89 2b       	or	r24, r25
    ca48:	41 f4       	brne	.+16     	; 0xca5a <mqtt_callback(char*, unsigned char*, unsigned int)+0x19e4>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:119
    {
      parseBytes(my_payload, '.', device.myDNS, 4, 10);
    ca4a:	44 e0       	ldi	r20, 0x04	; 4
    ca4c:	50 e0       	ldi	r21, 0x00	; 0
    ca4e:	6d e2       	ldi	r22, 0x2D	; 45
    ca50:	7c e0       	ldi	r23, 0x0C	; 12
    ca52:	8e e2       	ldi	r24, 0x2E	; 46
    ca54:	0e 94 8a 81 	call	0x10314	; 0x10314 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.60]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:120
      cnt = 1;
    ca58:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:122
    }
    if (strcmp(pch, "ntp") == 0)
    ca5a:	6c eb       	ldi	r22, 0xBC	; 188
    ca5c:	75 e0       	ldi	r23, 0x05	; 5
    ca5e:	c7 01       	movw	r24, r14
    ca60:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    ca64:	89 2b       	or	r24, r25
    ca66:	41 f4       	brne	.+16     	; 0xca78 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a02>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:124
    {
      parseBytes(my_payload, '.', device.ntp_server, 4, 10);
    ca68:	44 e0       	ldi	r20, 0x04	; 4
    ca6a:	50 e0       	ldi	r21, 0x00	; 0
    ca6c:	6d e6       	ldi	r22, 0x6D	; 109
    ca6e:	7c e0       	ldi	r23, 0x0C	; 12
    ca70:	8e e2       	ldi	r24, 0x2E	; 46
    ca72:	0e 94 8a 81 	call	0x10314	; 0x10314 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.60]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:125
      cnt = 1;
    ca76:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:127
    }
    if (strcmp(pch, "mqtt_host") == 0)
    ca78:	60 ec       	ldi	r22, 0xC0	; 192
    ca7a:	75 e0       	ldi	r23, 0x05	; 5
    ca7c:	c7 01       	movw	r24, r14
    ca7e:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    ca82:	89 2b       	or	r24, r25
    ca84:	41 f4       	brne	.+16     	; 0xca96 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a20>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:129
    {
      parseBytes(my_payload, '.', device.mqtt_server, 4, 10);
    ca86:	44 e0       	ldi	r20, 0x04	; 4
    ca88:	50 e0       	ldi	r21, 0x00	; 0
    ca8a:	6f e3       	ldi	r22, 0x3F	; 63
    ca8c:	7c e0       	ldi	r23, 0x0C	; 12
    ca8e:	8e e2       	ldi	r24, 0x2E	; 46
    ca90:	0e 94 8a 81 	call	0x10314	; 0x10314 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.60]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:130
      cnt = 1;
    ca94:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:132
    }
    if (strcmp(pch, "mqtt_port") == 0)
    ca96:	6a ec       	ldi	r22, 0xCA	; 202
    ca98:	75 e0       	ldi	r23, 0x05	; 5
    ca9a:	c7 01       	movw	r24, r14
    ca9c:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    caa0:	89 2b       	or	r24, r25
    caa2:	49 f4       	brne	.+18     	; 0xcab6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a40>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:134
    {
      device.mqtt_port = atoi(my_payload);
    caa4:	8b ed       	ldi	r24, 0xDB	; 219
    caa6:	9a e0       	ldi	r25, 0x0A	; 10
    caa8:	0e 94 b8 a2 	call	0x14570	; 0x14570 <atoi>
    caac:	90 93 44 0c 	sts	0x0C44, r25	; 0x800c44 <device+0x25>
    cab0:	80 93 43 0c 	sts	0x0C43, r24	; 0x800c43 <device+0x24>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:135
      cnt = 1;
    cab4:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:137
    }
    if (strcmp(pch, "mqtt_user") == 0)
    cab6:	64 ed       	ldi	r22, 0xD4	; 212
    cab8:	75 e0       	ldi	r23, 0x05	; 5
    caba:	c7 01       	movw	r24, r14
    cabc:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    cac0:	89 2b       	or	r24, r25
    cac2:	39 f4       	brne	.+14     	; 0xcad2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a5c>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:139
    {
      strcpy(device.mqtt_user, my_payload);
    cac4:	6b ed       	ldi	r22, 0xDB	; 219
    cac6:	7a e0       	ldi	r23, 0x0A	; 10
    cac8:	85 e4       	ldi	r24, 0x45	; 69
    caca:	9c e0       	ldi	r25, 0x0C	; 12
    cacc:	0e 94 70 af 	call	0x15ee0	; 0x15ee0 <strcpy>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:140
      cnt = 1;
    cad0:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:142
    }
    if (strcmp(pch, "mqtt_pass") == 0)
    cad2:	6e ed       	ldi	r22, 0xDE	; 222
    cad4:	75 e0       	ldi	r23, 0x05	; 5
    cad6:	c7 01       	movw	r24, r14
    cad8:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    cadc:	89 2b       	or	r24, r25
    cade:	39 f4       	brne	.+14     	; 0xcaee <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a78>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:144
    {
      strcpy(device.mqtt_key, my_payload);
    cae0:	6b ed       	ldi	r22, 0xDB	; 219
    cae2:	7a e0       	ldi	r23, 0x0A	; 10
    cae4:	89 e5       	ldi	r24, 0x59	; 89
    cae6:	9c e0       	ldi	r25, 0x0C	; 12
    cae8:	0e 94 70 af 	call	0x15ee0	; 0x15ee0 <strcpy>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:145
      cnt = 1;
    caec:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:147
    }
    if (strcmp(pch, "name") == 0)
    caee:	68 ea       	ldi	r22, 0xA8	; 168
    caf0:	73 e0       	ldi	r23, 0x03	; 3
    caf2:	c7 01       	movw	r24, r14
    caf4:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    caf8:	89 2b       	or	r24, r25
    cafa:	29 f4       	brne	.+10     	; 0xcb06 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a90>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:149
    {
      device_set_name(my_payload);
    cafc:	8b ed       	ldi	r24, 0xDB	; 219
    cafe:	9a e0       	ldi	r25, 0x0A	; 10
    cb00:	0e 94 ee 4c 	call	0x99dc	; 0x99dc <device_set_name(char*)>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:150
      cnt = 2;
    cb04:	12 e0       	ldi	r17, 0x02	; 2
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:152
    }
    pch = strtok (NULL, "/");
    cb06:	6f ec       	ldi	r22, 0xCF	; 207
    cb08:	73 e0       	ldi	r23, 0x03	; 3
    cb0a:	90 e0       	ldi	r25, 0x00	; 0
    cb0c:	80 e0       	ldi	r24, 0x00	; 0
    cb0e:	0e 94 f1 a2 	call	0x145e2	; 0x145e2 <strtok>
    cb12:	7c 01       	movw	r14, r24
    cb14:	53 cf       	rjmp	.-346    	; 0xc9bc <mqtt_callback(char*, unsigned char*, unsigned int)+0x1946>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2750
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = setting_network(str1, my_payload);
    if (cnt == 1)
    cb16:	11 30       	cpi	r17, 0x01	; 1
    cb18:	41 f4       	brne	.+16     	; 0xcb2a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ab4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2752
    {
      save_setup_network();
    cb1a:	0e 94 16 4d 	call	0x9a2c	; 0x9a2c <save_setup_network()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2757
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    }
    if (cnt == 2)
    {
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    cb1e:	80 91 ce 0a 	lds	r24, 0x0ACE	; 0x800ace <selftest_data>
    cb22:	80 68       	ori	r24, 0x80	; 128
    cb24:	80 93 ce 0a 	sts	0x0ACE, r24	; 0x800ace <selftest_data>
    cb28:	02 c0       	rjmp	.+4      	; 0xcb2e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ab8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2755
    if (cnt == 1)
    {
      save_setup_network();
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    }
    if (cnt == 2)
    cb2a:	12 30       	cpi	r17, 0x02	; 2
    cb2c:	c1 f3       	breq	.-16     	; 0xcb1e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1aa8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2762
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    }
  }
  //// priradi k menu pro rizeni intezity svetla vystup
  //// thermctl-in/XXXXX//light/set/IDX/output
  strcpy_P(str1, thermctl_header_in);
    cb2e:	65 ed       	ldi	r22, 0xD5	; 213
    cb30:	7c e2       	ldi	r23, 0x2C	; 44
    cb32:	c5 01       	movw	r24, r10
    cb34:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2763
  strcat(str1, device.nazev);
    cb38:	65 e3       	ldi	r22, 0x35	; 53
    cb3a:	7c e0       	ldi	r23, 0x0C	; 12
    cb3c:	c5 01       	movw	r24, r10
    cb3e:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2764
  strcat(str1, "/light/set/");
    cb42:	68 ee       	ldi	r22, 0xE8	; 232
    cb44:	75 e0       	ldi	r23, 0x05	; 5
    cb46:	c5 01       	movw	r24, r10
    cb48:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2765
  if (strncmp(str1, topic, strlen(str1)) == 0)
    cb4c:	f5 01       	movw	r30, r10
    cb4e:	01 90       	ld	r0, Z+
    cb50:	00 20       	and	r0, r0
    cb52:	e9 f7       	brne	.-6      	; 0xcb4e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ad8>
    cb54:	31 97       	sbiw	r30, 0x01	; 1
    cb56:	af 01       	movw	r20, r30
    cb58:	4a 19       	sub	r20, r10
    cb5a:	5b 09       	sbc	r21, r11
    cb5c:	b4 01       	movw	r22, r8
    cb5e:	c5 01       	movw	r24, r10
    cb60:	0e 94 77 af 	call	0x15eee	; 0x15eee <strncmp>
    cb64:	89 2b       	or	r24, r25
    cb66:	09 f0       	breq	.+2      	; 0xcb6a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1af4>
    cb68:	41 c0       	rjmp	.+130    	; 0xcbec <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b76>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2767
  {
    mqtt_process_message++;
    cb6a:	80 91 03 0a 	lds	r24, 0x0A03	; 0x800a03 <mqtt_process_message>
    cb6e:	90 91 04 0a 	lds	r25, 0x0A04	; 0x800a04 <mqtt_process_message+0x1>
    cb72:	01 96       	adiw	r24, 0x01	; 1
    cb74:	90 93 04 0a 	sts	0x0A04, r25	; 0x800a04 <mqtt_process_message+0x1>
    cb78:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2770
    //strncpy(str2, payload, length);
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    cb7c:	f5 01       	movw	r30, r10
    cb7e:	01 90       	ld	r0, Z+
    cb80:	00 20       	and	r0, r0
    cb82:	e9 f7       	brne	.-6      	; 0xcb7e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b08>
    cb84:	31 97       	sbiw	r30, 0x01	; 1
    cb86:	ea 19       	sub	r30, r10
    cb88:	fb 09       	sbc	r31, r11
    cb8a:	9e 2f       	mov	r25, r30
    cb8c:	4e 2f       	mov	r20, r30
    cb8e:	84 2f       	mov	r24, r20
    cb90:	89 1b       	sub	r24, r25
    cb92:	24 2f       	mov	r18, r20
    cb94:	30 e0       	ldi	r19, 0x00	; 0
    cb96:	d4 01       	movw	r26, r8
    cb98:	0d 90       	ld	r0, X+
    cb9a:	00 20       	and	r0, r0
    cb9c:	e9 f7       	brne	.-6      	; 0xcb98 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b22>
    cb9e:	11 97       	sbiw	r26, 0x01	; 1
    cba0:	a8 19       	sub	r26, r8
    cba2:	b9 09       	sbc	r27, r9
    cba4:	2a 17       	cp	r18, r26
    cba6:	3b 07       	cpc	r19, r27
    cba8:	60 f4       	brcc	.+24     	; 0xcbc2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2772
    {
      str1[cnt] = topic[f];
    cbaa:	d5 01       	movw	r26, r10
    cbac:	a8 0f       	add	r26, r24
    cbae:	b1 1d       	adc	r27, r1
    cbb0:	28 0d       	add	r18, r8
    cbb2:	39 1d       	adc	r19, r9
    cbb4:	f9 01       	movw	r30, r18
    cbb6:	80 81       	ld	r24, Z
    cbb8:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2773
      str1[cnt + 1] = 0;
    cbba:	11 96       	adiw	r26, 0x01	; 1
    cbbc:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2770
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    //strncpy(str2, payload, length);
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    cbbe:	4f 5f       	subi	r20, 0xFF	; 255
    cbc0:	e6 cf       	rjmp	.-52     	; 0xcb8e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b18>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2777
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    cbc2:	6f ec       	ldi	r22, 0xCF	; 207
    cbc4:	73 e0       	ldi	r23, 0x03	; 3
    cbc6:	c5 01       	movw	r24, r10
    cbc8:	0e 94 f1 a2 	call	0x145e2	; 0x145e2 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2776
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    cbcc:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2778
    pch = strtok (str1, "/");
    while (pch != NULL)
    cbce:	00 97       	sbiw	r24, 0x00	; 0
    cbd0:	69 f0       	breq	.+26     	; 0xcbec <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b76>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2780
    {
      if (cnt == 0) id = atoi(pch);
    cbd2:	11 11       	cpse	r17, r1
    cbd4:	03 c0       	rjmp	.+6      	; 0xcbdc <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b66>
    cbd6:	0e 94 b8 a2 	call	0x14570	; 0x14570 <atoi>
    cbda:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2783
      //if ((cnt == 1) && (strcmp(pch, "output") == 0)) light_set_output(id, atoi(my_payload));
      //if ((cnt == 1) && (strcmp(pch, "value") == 0)) light_value[id] = atoi(my_payload);
      pch = strtok (NULL, "/");
    cbdc:	6f ec       	ldi	r22, 0xCF	; 207
    cbde:	73 e0       	ldi	r23, 0x03	; 3
    cbe0:	90 e0       	ldi	r25, 0x00	; 0
    cbe2:	80 e0       	ldi	r24, 0x00	; 0
    cbe4:	0e 94 f1 a2 	call	0x145e2	; 0x145e2 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2784
      cnt++;
    cbe8:	1f 5f       	subi	r17, 0xFF	; 255
    cbea:	f1 cf       	rjmp	.-30     	; 0xcbce <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b58>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2789
    }
  }
  ///
  /// zpetna vazba od vystupu
  strcpy_P(str1, termbig_header_out);
    cbec:	69 e8       	ldi	r22, 0x89	; 137
    cbee:	7c e2       	ldi	r23, 0x2C	; 44
    cbf0:	c5 01       	movw	r24, r10
    cbf2:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2790
  strcat(str1, "output/");
    cbf6:	64 ef       	ldi	r22, 0xF4	; 244
    cbf8:	75 e0       	ldi	r23, 0x05	; 5
    cbfa:	c5 01       	movw	r24, r10
    cbfc:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2791
  if (strncmp(str1, topic, strlen(str1)) == 0)
    cc00:	f5 01       	movw	r30, r10
    cc02:	01 90       	ld	r0, Z+
    cc04:	00 20       	and	r0, r0
    cc06:	e9 f7       	brne	.-6      	; 0xcc02 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b8c>
    cc08:	31 97       	sbiw	r30, 0x01	; 1
    cc0a:	af 01       	movw	r20, r30
    cc0c:	4a 19       	sub	r20, r10
    cc0e:	5b 09       	sbc	r21, r11
    cc10:	b4 01       	movw	r22, r8
    cc12:	c5 01       	movw	r24, r10
    cc14:	0e 94 77 af 	call	0x15eee	; 0x15eee <strncmp>
    cc18:	89 2b       	or	r24, r25
    cc1a:	09 f0       	breq	.+2      	; 0xcc1e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ba8>
    cc1c:	73 c0       	rjmp	.+230    	; 0xcd04 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c8e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2793
  {
    mqtt_process_message++;
    cc1e:	80 91 03 0a 	lds	r24, 0x0A03	; 0x800a03 <mqtt_process_message>
    cc22:	90 91 04 0a 	lds	r25, 0x0A04	; 0x800a04 <mqtt_process_message+0x1>
    cc26:	01 96       	adiw	r24, 0x01	; 1
    cc28:	90 93 04 0a 	sts	0x0A04, r25	; 0x800a04 <mqtt_process_message+0x1>
    cc2c:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2795
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    cc30:	f5 01       	movw	r30, r10
    cc32:	01 90       	ld	r0, Z+
    cc34:	00 20       	and	r0, r0
    cc36:	e9 f7       	brne	.-6      	; 0xcc32 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1bbc>
    cc38:	31 97       	sbiw	r30, 0x01	; 1
    cc3a:	ea 19       	sub	r30, r10
    cc3c:	fb 09       	sbc	r31, r11
    cc3e:	9e 2f       	mov	r25, r30
    cc40:	4e 2f       	mov	r20, r30
    cc42:	84 2f       	mov	r24, r20
    cc44:	89 1b       	sub	r24, r25
    cc46:	24 2f       	mov	r18, r20
    cc48:	30 e0       	ldi	r19, 0x00	; 0
    cc4a:	d4 01       	movw	r26, r8
    cc4c:	0d 90       	ld	r0, X+
    cc4e:	00 20       	and	r0, r0
    cc50:	e9 f7       	brne	.-6      	; 0xcc4c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1bd6>
    cc52:	11 97       	sbiw	r26, 0x01	; 1
    cc54:	a8 19       	sub	r26, r8
    cc56:	b9 09       	sbc	r27, r9
    cc58:	2a 17       	cp	r18, r26
    cc5a:	3b 07       	cpc	r19, r27
    cc5c:	60 f4       	brcc	.+24     	; 0xcc76 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c00>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2797
    {
      str1[cnt] = topic[f];
    cc5e:	d5 01       	movw	r26, r10
    cc60:	a8 0f       	add	r26, r24
    cc62:	b1 1d       	adc	r27, r1
    cc64:	28 0d       	add	r18, r8
    cc66:	39 1d       	adc	r19, r9
    cc68:	f9 01       	movw	r30, r18
    cc6a:	80 81       	ld	r24, Z
    cc6c:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2798
      str1[cnt + 1] = 0;
    cc6e:	11 96       	adiw	r26, 0x01	; 1
    cc70:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2795
  strcat(str1, "output/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    cc72:	4f 5f       	subi	r20, 0xFF	; 255
    cc74:	e6 cf       	rjmp	.-52     	; 0xcc42 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1bcc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2802
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    cc76:	6f ec       	ldi	r22, 0xCF	; 207
    cc78:	73 e0       	ldi	r23, 0x03	; 3
    cc7a:	c5 01       	movw	r24, r10
    cc7c:	0e 94 f1 a2 	call	0x145e2	; 0x145e2 <strtok>
    cc80:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2801
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    cc82:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2803
    pch = strtok (str1, "/");
    while (pch != NULL)
    cc84:	01 15       	cp	r16, r1
    cc86:	11 05       	cpc	r17, r1
    cc88:	e9 f1       	breq	.+122    	; 0xcd04 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c8e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2805
    {
      if (cnt == 0) id = atoi(pch);
    cc8a:	f1 10       	cpse	r15, r1
    cc8c:	0d c0       	rjmp	.+26     	; 0xcca8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c32>
    cc8e:	c8 01       	movw	r24, r16
    cc90:	0e 94 b8 a2 	call	0x14570	; 0x14570 <atoi>
    cc94:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2816
            if (strcmp(pch, "pwm")) last_output_update[id] = 0;
            if (strcmp(pch, "state")) last_output_update[id] = 0;
            break;
          }
      }
      pch = strtok (NULL, "/");
    cc96:	6f ec       	ldi	r22, 0xCF	; 207
    cc98:	73 e0       	ldi	r23, 0x03	; 3
    cc9a:	90 e0       	ldi	r25, 0x00	; 0
    cc9c:	80 e0       	ldi	r24, 0x00	; 0
    cc9e:	0e 94 f1 a2 	call	0x145e2	; 0x145e2 <strtok>
    cca2:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2817
      cnt++;
    cca4:	f3 94       	inc	r15
    cca6:	ee cf       	rjmp	.-36     	; 0xcc84 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c0e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2806
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1)
    cca8:	f1 e0       	ldi	r31, 0x01	; 1
    ccaa:	ff 12       	cpse	r15, r31
    ccac:	f4 cf       	rjmp	.-24     	; 0xcc96 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c20>
    ccae:	8f e5       	ldi	r24, 0x5F	; 95
    ccb0:	c8 2e       	mov	r12, r24
    ccb2:	dd 24       	eor	r13, r13
    ccb4:	d3 94       	inc	r13
thermostat_ring_get_output():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:123
}

/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_output(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
    ccb6:	c6 01       	movw	r24, r12
    ccb8:	0e 94 49 8f 	call	0x11e92	; 0x11e92 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2809
      {
        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
          if (thermostat_ring_get_output(idx) == id)
    ccbc:	78 12       	cpse	r7, r24
    ccbe:	19 c0       	rjmp	.+50     	; 0xccf2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c7c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2811
          {
            if (strcmp(pch, "pwm")) last_output_update[id] = 0;
    ccc0:	6c ef       	ldi	r22, 0xFC	; 252
    ccc2:	75 e0       	ldi	r23, 0x05	; 5
    ccc4:	c8 01       	movw	r24, r16
    ccc6:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    ccca:	89 2b       	or	r24, r25
    cccc:	29 f0       	breq	.+10     	; 0xccd8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c62>
    ccce:	e7 2d       	mov	r30, r7
    ccd0:	f0 e0       	ldi	r31, 0x00	; 0
    ccd2:	eb 5e       	subi	r30, 0xEB	; 235
    ccd4:	f5 4f       	sbci	r31, 0xF5	; 245
    ccd6:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2812
            if (strcmp(pch, "state")) last_output_update[id] = 0;
    ccd8:	60 e0       	ldi	r22, 0x00	; 0
    ccda:	76 e0       	ldi	r23, 0x06	; 6
    ccdc:	c8 01       	movw	r24, r16
    ccde:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    cce2:	89 2b       	or	r24, r25
    cce4:	c1 f2       	breq	.-80     	; 0xcc96 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c20>
    cce6:	e7 2d       	mov	r30, r7
    cce8:	f0 e0       	ldi	r31, 0x00	; 0
    ccea:	eb 5e       	subi	r30, 0xEB	; 235
    ccec:	f5 4f       	sbci	r31, 0xF5	; 245
    ccee:	10 82       	st	Z, r1
    ccf0:	d2 cf       	rjmp	.-92     	; 0xcc96 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c20>
    ccf2:	21 e2       	ldi	r18, 0x21	; 33
    ccf4:	c2 0e       	add	r12, r18
    ccf6:	d1 1c       	adc	r13, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2808
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1)
      {
        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
    ccf8:	84 e0       	ldi	r24, 0x04	; 4
    ccfa:	c8 16       	cp	r12, r24
    ccfc:	82 e0       	ldi	r24, 0x02	; 2
    ccfe:	d8 06       	cpc	r13, r24
    cd00:	d1 f6       	brne	.-76     	; 0xccb6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c40>
    cd02:	c9 cf       	rjmp	.-110    	; 0xcc96 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2822
      cnt++;
    }
  }

  //// thermctl-in/XXXXX/reload
  strcpy_P(str1, thermctl_header_in);
    cd04:	65 ed       	ldi	r22, 0xD5	; 213
    cd06:	7c e2       	ldi	r23, 0x2C	; 44
    cd08:	c5 01       	movw	r24, r10
    cd0a:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2823
  strcat(str1, device.nazev);
    cd0e:	65 e3       	ldi	r22, 0x35	; 53
    cd10:	7c e0       	ldi	r23, 0x0C	; 12
    cd12:	c5 01       	movw	r24, r10
    cd14:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2824
  strcat(str1, "/reload");
    cd18:	66 e0       	ldi	r22, 0x06	; 6
    cd1a:	76 e0       	ldi	r23, 0x06	; 6
    cd1c:	c5 01       	movw	r24, r10
    cd1e:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2825
  if (strcmp(str1, topic) == 0)
    cd22:	b4 01       	movw	r22, r8
    cd24:	c5 01       	movw	r24, r10
    cd26:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    cd2a:	8c 01       	movw	r16, r24
    cd2c:	89 2b       	or	r24, r25
    cd2e:	79 f4       	brne	.+30     	; 0xcd4e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1cd8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2827
  {
    mqtt_process_message++;
    cd30:	80 91 03 0a 	lds	r24, 0x0A03	; 0x800a03 <mqtt_process_message>
    cd34:	90 91 04 0a 	lds	r25, 0x0A04	; 0x800a04 <mqtt_process_message+0x1>
    cd38:	01 96       	adiw	r24, 0x01	; 1
    cd3a:	90 93 04 0a 	sts	0x0A04, r25	; 0x800a04 <mqtt_process_message+0x1>
    cd3e:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2828
    log_error(&mqtt_client, "reload ..... ");
    cd42:	8e e0       	ldi	r24, 0x0E	; 14
    cd44:	96 e0       	ldi	r25, 0x06	; 6
    cd46:	0e 94 64 81 	call	0x102c8	; 0x102c8 <log_error(PubSubClient*, char*) [clone .constprop.61]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2829
    resetFunc();
    cd4a:	f8 01       	movw	r30, r16
    cd4c:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2833
  }

  //// thermctl-in/XXXXX/reload
  strcpy_P(str1, thermctl_header_in);
    cd4e:	65 ed       	ldi	r22, 0xD5	; 213
    cd50:	7c e2       	ldi	r23, 0x2C	; 44
    cd52:	c5 01       	movw	r24, r10
    cd54:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2834
  strcat(str1, device.nazev);
    cd58:	65 e3       	ldi	r22, 0x35	; 53
    cd5a:	7c e0       	ldi	r23, 0x0C	; 12
    cd5c:	c5 01       	movw	r24, r10
    cd5e:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2835
  strcat(str1, "/bootloader");
    cd62:	6c e1       	ldi	r22, 0x1C	; 28
    cd64:	76 e0       	ldi	r23, 0x06	; 6
    cd66:	c5 01       	movw	r24, r10
    cd68:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2836
  if (strcmp(str1, topic) == 0)
    cd6c:	b4 01       	movw	r22, r8
    cd6e:	c5 01       	movw	r24, r10
    cd70:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    cd74:	89 2b       	or	r24, r25
    cd76:	e9 f4       	brne	.+58     	; 0xcdb2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1d3c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2838
  {
    mqtt_process_message++;
    cd78:	80 91 03 0a 	lds	r24, 0x0A03	; 0x800a03 <mqtt_process_message>
    cd7c:	90 91 04 0a 	lds	r25, 0x0A04	; 0x800a04 <mqtt_process_message+0x1>
    cd80:	01 96       	adiw	r24, 0x01	; 1
    cd82:	90 93 04 0a 	sts	0x0A04, r25	; 0x800a04 <mqtt_process_message+0x1>
    cd86:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2839
    log_error(&mqtt_client, "bootloader ..... ");
    cd8a:	88 e2       	ldi	r24, 0x28	; 40
    cd8c:	96 e0       	ldi	r25, 0x06	; 6
    cd8e:	0e 94 64 81 	call	0x102c8	; 0x102c8 <log_error(PubSubClient*, char*) [clone .constprop.61]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2840
    EEPROM.write(bootloader_tag, 255);
    cd92:	6f ef       	ldi	r22, 0xFF	; 255
    cd94:	90 e0       	ldi	r25, 0x00	; 0
    cd96:	80 e0       	ldi	r24, 0x00	; 0
    cd98:	0e 94 47 8f 	call	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
wdt_enable():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/avr/wdt.h:486
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
    cd9c:	88 e1       	ldi	r24, 0x18	; 24
    cd9e:	9e e0       	ldi	r25, 0x0E	; 14
    cda0:	0f b6       	in	r0, 0x3f	; 63
    cda2:	f8 94       	cli
    cda4:	a8 95       	wdr
    cda6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    cdaa:	0f be       	out	0x3f, r0	; 63
    cdac:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    cdb0:	ff cf       	rjmp	.-2      	; 0xcdb0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1d3a>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2846
    wdt_enable(WDTO_1S);
    while (1);
  }

  //// /thermctl-in/XXXXX/reset_default
  strcpy_P(str1, thermctl_header_in);
    cdb2:	65 ed       	ldi	r22, 0xD5	; 213
    cdb4:	7c e2       	ldi	r23, 0x2C	; 44
    cdb6:	c5 01       	movw	r24, r10
    cdb8:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2847
  strcat(str1, device.nazev);
    cdbc:	65 e3       	ldi	r22, 0x35	; 53
    cdbe:	7c e0       	ldi	r23, 0x0C	; 12
    cdc0:	c5 01       	movw	r24, r10
    cdc2:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2848
  strcat(str1, "/default");
    cdc6:	64 e1       	ldi	r22, 0x14	; 20
    cdc8:	75 e0       	ldi	r23, 0x05	; 5
    cdca:	c5 01       	movw	r24, r10
    cdcc:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2849
  if (strcmp(str1, topic) == 0)
    cdd0:	b4 01       	movw	r22, r8
    cdd2:	c5 01       	movw	r24, r10
    cdd4:	0e 94 67 af 	call	0x15ece	; 0x15ece <strcmp>
    cdd8:	89 2b       	or	r24, r25
    cdda:	91 f4       	brne	.+36     	; 0xce00 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1d8a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2851
  {
    mqtt_process_message++;
    cddc:	80 91 03 0a 	lds	r24, 0x0A03	; 0x800a03 <mqtt_process_message>
    cde0:	90 91 04 0a 	lds	r25, 0x0A04	; 0x800a04 <mqtt_process_message+0x1>
    cde4:	01 96       	adiw	r24, 0x01	; 1
    cde6:	90 93 04 0a 	sts	0x0A04, r25	; 0x800a04 <mqtt_process_message+0x1>
    cdea:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2853
    //strncpy(str2, payload, length);
    EEPROM.write(set_default_values, atoi(my_payload));
    cdee:	8b ed       	ldi	r24, 0xDB	; 219
    cdf0:	9a e0       	ldi	r25, 0x0A	; 10
    cdf2:	0e 94 b8 a2 	call	0x14570	; 0x14570 <atoi>
    cdf6:	68 2f       	mov	r22, r24
    cdf8:	8a e5       	ldi	r24, 0x5A	; 90
    cdfa:	90 e0       	ldi	r25, 0x00	; 0
    cdfc:	0e 94 47 8f 	call	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2856
  }

}
    ce00:	c4 5d       	subi	r28, 0xD4	; 212
    ce02:	de 4f       	sbci	r29, 0xFE	; 254
    ce04:	0f b6       	in	r0, 0x3f	; 63
    ce06:	f8 94       	cli
    ce08:	de bf       	out	0x3e, r29	; 62
    ce0a:	0f be       	out	0x3f, r0	; 63
    ce0c:	cd bf       	out	0x3d, r28	; 61
    ce0e:	df 91       	pop	r29
    ce10:	cf 91       	pop	r28
    ce12:	1f 91       	pop	r17
    ce14:	0f 91       	pop	r16
    ce16:	ff 90       	pop	r15
    ce18:	ef 90       	pop	r14
    ce1a:	df 90       	pop	r13
    ce1c:	cf 90       	pop	r12
    ce1e:	bf 90       	pop	r11
    ce20:	af 90       	pop	r10
    ce22:	9f 90       	pop	r9
    ce24:	8f 90       	pop	r8
    ce26:	7f 90       	pop	r7
    ce28:	6f 90       	pop	r6
    ce2a:	5f 90       	pop	r5
    ce2c:	4f 90       	pop	r4
    ce2e:	3f 90       	pop	r3
    ce30:	2f 90       	pop	r2
    ce32:	08 95       	ret

0000ce34 <mqtt_reconnect()>:
_Z14mqtt_reconnectv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2860
/*************************************************************************************************************************/
/// mqtt_reconent - funkce pro prihlaseni k MQTT topicum
byte mqtt_reconnect(void)
{
    ce34:	0f 93       	push	r16
    ce36:	1f 93       	push	r17
    ce38:	cf 93       	push	r28
    ce3a:	df 93       	push	r29
    ce3c:	cd b7       	in	r28, 0x3d	; 61
    ce3e:	de b7       	in	r29, 0x3e	; 62
    ce40:	a5 97       	sbiw	r28, 0x25	; 37
    ce42:	0f b6       	in	r0, 0x3f	; 63
    ce44:	f8 94       	cli
    ce46:	de bf       	out	0x3e, r29	; 62
    ce48:	0f be       	out	0x3f, r0	; 63
    ce4a:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2866
  char nazev[10];
  char topic[26];
  byte ret = MQTT_DISCONNECTED;
  ///  /thermctl/xxxxxxxx/#
  ///  /thermctl/global/#
  device_get_name(nazev);
    ce4c:	ce 01       	movw	r24, r28
    ce4e:	4b 96       	adiw	r24, 0x1b	; 27
    ce50:	0e 94 f6 52 	call	0xa5ec	; 0xa5ec <device_get_name(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2867
  if (!mqtt_client.connected())
    ce54:	82 e1       	ldi	r24, 0x12	; 18
    ce56:	9e e0       	ldi	r25, 0x0E	; 14
    ce58:	0e 94 14 8c 	call	0x11828	; 0x11828 <PubSubClient::connected()>
    ce5c:	81 11       	cpse	r24, r1
    ce5e:	97 c0       	rjmp	.+302    	; 0xcf8e <mqtt_reconnect()+0x15a>
connect():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:117
boolean PubSubClient::connect(const char *id, const char* willTopic, uint8_t willQos, boolean willRetain, const char* willMessage) {
    return connect(id,NULL,NULL,willTopic,willQos,willRetain,willMessage);
}

boolean PubSubClient::connect(const char *id, const char *user, const char *pass, const char* willTopic, uint8_t willQos, boolean willRetain, const char* willMessage) {
    if (!connected()) {
    ce60:	82 e1       	ldi	r24, 0x12	; 18
    ce62:	9e e0       	ldi	r25, 0x0E	; 14
    ce64:	0e 94 14 8c 	call	0x11828	; 0x11828 <PubSubClient::connected()>
    ce68:	81 11       	cpse	r24, r1
    ce6a:	d0 c0       	rjmp	.+416    	; 0xd00c <mqtt_reconnect()+0x1d8>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:120
        int result = 0;

        if (domain != NULL) {
    ce6c:	60 91 27 10 	lds	r22, 0x1027	; 0x801027 <mqtt_client+0x215>
    ce70:	70 91 28 10 	lds	r23, 0x1028	; 0x801028 <mqtt_client+0x216>
    ce74:	80 91 12 0e 	lds	r24, 0x0E12	; 0x800e12 <mqtt_client>
    ce78:	90 91 13 0e 	lds	r25, 0x0E13	; 0x800e13 <mqtt_client+0x1>
    ce7c:	dc 01       	movw	r26, r24
    ce7e:	ed 91       	ld	r30, X+
    ce80:	fc 91       	ld	r31, X
    ce82:	40 91 29 10 	lds	r20, 0x1029	; 0x801029 <mqtt_client+0x217>
    ce86:	50 91 2a 10 	lds	r21, 0x102A	; 0x80102a <mqtt_client+0x218>
    ce8a:	61 15       	cp	r22, r1
    ce8c:	71 05       	cpc	r23, r1
    ce8e:	09 f4       	brne	.+2      	; 0xce92 <mqtt_reconnect()+0x5e>
    ce90:	8b c0       	rjmp	.+278    	; 0xcfa8 <mqtt_reconnect()+0x174>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:121
            result = _client->connect(this->domain, this->port);
    ce92:	00 88       	ldd	r0, Z+16	; 0x10
    ce94:	f1 89       	ldd	r31, Z+17	; 0x11
    ce96:	e0 2d       	mov	r30, r0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:123
        } else {
            result = _client->connect(this->ip, this->port);
    ce98:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:125
        }
        if (result == 1) {
    ce9a:	81 30       	cpi	r24, 0x01	; 1
    ce9c:	91 05       	cpc	r25, r1
    ce9e:	09 f0       	breq	.+2      	; 0xcea2 <mqtt_reconnect()+0x6e>
    cea0:	12 c1       	rjmp	.+548    	; 0xd0c6 <mqtt_reconnect()+0x292>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:126
            nextMsgId = 1;
    cea2:	90 93 15 10 	sts	0x1015, r25	; 0x801015 <mqtt_client+0x203>
    cea6:	80 93 14 10 	sts	0x1014, r24	; 0x801014 <mqtt_client+0x202>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:135

#if MQTT_VERSION == MQTT_VERSION_3_1
            uint8_t d[9] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_VERSION};
#define MQTT_HEADER_VERSION_LENGTH 9
#elif MQTT_VERSION == MQTT_VERSION_3_1_1
            uint8_t d[7] = {0x00,0x04,'M','Q','T','T',MQTT_VERSION};
    ceaa:	87 e0       	ldi	r24, 0x07	; 7
    ceac:	e6 e1       	ldi	r30, 0x16	; 22
    ceae:	f2 e0       	ldi	r31, 0x02	; 2
    ceb0:	de 01       	movw	r26, r28
    ceb2:	11 96       	adiw	r26, 0x01	; 1
    ceb4:	01 90       	ld	r0, Z+
    ceb6:	0d 92       	st	X+, r0
    ceb8:	8a 95       	dec	r24
    ceba:	e1 f7       	brne	.-8      	; 0xceb4 <mqtt_reconnect()+0x80>
    cebc:	fe 01       	movw	r30, r28
    cebe:	31 96       	adiw	r30, 0x01	; 1
    cec0:	a9 e1       	ldi	r26, 0x19	; 25
    cec2:	be e0       	ldi	r27, 0x0E	; 14
    cec4:	ce 01       	movw	r24, r28
    cec6:	08 96       	adiw	r24, 0x08	; 8
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:139
#define MQTT_HEADER_VERSION_LENGTH 7
#endif
            for (j = 0;j<MQTT_HEADER_VERSION_LENGTH;j++) {
                buffer[length++] = d[j];
    cec8:	21 91       	ld	r18, Z+
    ceca:	2d 93       	st	X+, r18
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:138
#define MQTT_HEADER_VERSION_LENGTH 9
#elif MQTT_VERSION == MQTT_VERSION_3_1_1
            uint8_t d[7] = {0x00,0x04,'M','Q','T','T',MQTT_VERSION};
#define MQTT_HEADER_VERSION_LENGTH 7
#endif
            for (j = 0;j<MQTT_HEADER_VERSION_LENGTH;j++) {
    cecc:	8e 17       	cp	r24, r30
    cece:	9f 07       	cpc	r25, r31
    ced0:	d9 f7       	brne	.-10     	; 0xcec8 <mqtt_reconnect()+0x94>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:157
                if(pass != NULL) {
                    v = v|(0x80>>1);
                }
            }

            buffer[length++] = v;
    ced2:	82 e0       	ldi	r24, 0x02	; 2
    ced4:	80 93 20 0e 	sts	0x0E20, r24	; 0x800e20 <mqtt_client+0xe>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:159

            buffer[length++] = ((MQTT_KEEPALIVE) >> 8);
    ced8:	10 92 21 0e 	sts	0x0E21, r1	; 0x800e21 <mqtt_client+0xf>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:160
            buffer[length++] = ((MQTT_KEEPALIVE) & 0xFF);
    cedc:	8f e0       	ldi	r24, 0x0F	; 15
    cede:	80 93 22 0e 	sts	0x0E22, r24	; 0x800e22 <mqtt_client+0x10>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:161
            length = writeString(id,buffer,length);
    cee2:	4f e0       	ldi	r20, 0x0F	; 15
    cee4:	50 e0       	ldi	r21, 0x00	; 0
    cee6:	64 e1       	ldi	r22, 0x14	; 20
    cee8:	7e e0       	ldi	r23, 0x0E	; 14
    ceea:	ce 01       	movw	r24, r28
    ceec:	4b 96       	adiw	r24, 0x1b	; 27
    ceee:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.149]>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:174
                if(pass != NULL) {
                    length = writeString(pass,buffer,length);
                }
            }

            write(MQTTCONNECT,buffer,length-5);
    cef2:	9c 01       	movw	r18, r24
    cef4:	25 50       	subi	r18, 0x05	; 5
    cef6:	31 09       	sbc	r19, r1
    cef8:	44 e1       	ldi	r20, 0x14	; 20
    cefa:	5e e0       	ldi	r21, 0x0E	; 14
    cefc:	60 e1       	ldi	r22, 0x10	; 16
    cefe:	82 e1       	ldi	r24, 0x12	; 18
    cf00:	9e e0       	ldi	r25, 0x0E	; 14
    cf02:	0e 94 ae 8d 	call	0x11b5c	; 0x11b5c <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:176

            lastInActivity = lastOutActivity = millis();
    cf06:	0e 94 1d 85 	call	0x10a3a	; 0x10a3a <millis>
    cf0a:	60 93 16 10 	sts	0x1016, r22	; 0x801016 <mqtt_client+0x204>
    cf0e:	70 93 17 10 	sts	0x1017, r23	; 0x801017 <mqtt_client+0x205>
    cf12:	80 93 18 10 	sts	0x1018, r24	; 0x801018 <mqtt_client+0x206>
    cf16:	90 93 19 10 	sts	0x1019, r25	; 0x801019 <mqtt_client+0x207>
    cf1a:	60 93 1a 10 	sts	0x101A, r22	; 0x80101a <mqtt_client+0x208>
    cf1e:	70 93 1b 10 	sts	0x101B, r23	; 0x80101b <mqtt_client+0x209>
    cf22:	80 93 1c 10 	sts	0x101C, r24	; 0x80101c <mqtt_client+0x20a>
    cf26:	90 93 1d 10 	sts	0x101D, r25	; 0x80101d <mqtt_client+0x20b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:178

            while (!_client->available()) {
    cf2a:	80 91 12 0e 	lds	r24, 0x0E12	; 0x800e12 <mqtt_client>
    cf2e:	90 91 13 0e 	lds	r25, 0x0E13	; 0x800e13 <mqtt_client+0x1>
    cf32:	dc 01       	movw	r26, r24
    cf34:	ed 91       	ld	r30, X+
    cf36:	fc 91       	ld	r31, X
    cf38:	00 84       	ldd	r0, Z+8	; 0x08
    cf3a:	f1 85       	ldd	r31, Z+9	; 0x09
    cf3c:	e0 2d       	mov	r30, r0
    cf3e:	19 95       	eicall
    cf40:	89 2b       	or	r24, r25
    cf42:	09 f0       	breq	.+2      	; 0xcf46 <mqtt_reconnect()+0x112>
    cf44:	48 c0       	rjmp	.+144    	; 0xcfd6 <mqtt_reconnect()+0x1a2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:179
                unsigned long t = millis();
    cf46:	0e 94 1d 85 	call	0x10a3a	; 0x10a3a <millis>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:180
                if (t-lastInActivity >= ((int32_t) MQTT_SOCKET_TIMEOUT*100)) {
    cf4a:	00 91 1a 10 	lds	r16, 0x101A	; 0x80101a <mqtt_client+0x208>
    cf4e:	10 91 1b 10 	lds	r17, 0x101B	; 0x80101b <mqtt_client+0x209>
    cf52:	20 91 1c 10 	lds	r18, 0x101C	; 0x80101c <mqtt_client+0x20a>
    cf56:	30 91 1d 10 	lds	r19, 0x101D	; 0x80101d <mqtt_client+0x20b>
    cf5a:	60 1b       	sub	r22, r16
    cf5c:	71 0b       	sbc	r23, r17
    cf5e:	82 0b       	sbc	r24, r18
    cf60:	93 0b       	sbc	r25, r19
    cf62:	64 36       	cpi	r22, 0x64	; 100
    cf64:	71 05       	cpc	r23, r1
    cf66:	81 05       	cpc	r24, r1
    cf68:	91 05       	cpc	r25, r1
    cf6a:	f8 f2       	brcs	.-66     	; 0xcf2a <mqtt_reconnect()+0xf6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:181
                    _state = MQTT_CONNECTION_TIMEOUT;
    cf6c:	8c ef       	ldi	r24, 0xFC	; 252
    cf6e:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:196
                    lastInActivity = millis();
                    pingOutstanding = false;
                    _state = MQTT_CONNECTED;
                    return true;
                } else {
                    _state = buffer[3];
    cf70:	90 93 2e 10 	sts	0x102E, r25	; 0x80102e <mqtt_client+0x21c>
    cf74:	80 93 2d 10 	sts	0x102D, r24	; 0x80102d <mqtt_client+0x21b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:199
                }
            }
            _client->stop();
    cf78:	80 91 12 0e 	lds	r24, 0x0E12	; 0x800e12 <mqtt_client>
    cf7c:	90 91 13 0e 	lds	r25, 0x0E13	; 0x800e13 <mqtt_client+0x1>
    cf80:	dc 01       	movw	r26, r24
    cf82:	ed 91       	ld	r30, X+
    cf84:	fc 91       	ld	r31, X
    cf86:	04 88       	ldd	r0, Z+20	; 0x14
    cf88:	f5 89       	ldd	r31, Z+21	; 0x15
    cf8a:	e0 2d       	mov	r30, r0
    cf8c:	19 95       	eicall
_Z14mqtt_reconnectv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2896
      strcpy_P(topic, termbig_header_out);
      mqtt_client.subscribe(topic);
    }
  ret = mqtt_client.state();
  return ret;
}
    cf8e:	80 91 2d 10 	lds	r24, 0x102D	; 0x80102d <mqtt_client+0x21b>
    cf92:	a5 96       	adiw	r28, 0x25	; 37
    cf94:	0f b6       	in	r0, 0x3f	; 63
    cf96:	f8 94       	cli
    cf98:	de bf       	out	0x3e, r29	; 62
    cf9a:	0f be       	out	0x3f, r0	; 63
    cf9c:	cd bf       	out	0x3d, r28	; 61
    cf9e:	df 91       	pop	r29
    cfa0:	cf 91       	pop	r28
    cfa2:	1f 91       	pop	r17
    cfa4:	0f 91       	pop	r16
    cfa6:	08 95       	ret
connect():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:123
        int result = 0;

        if (domain != NULL) {
            result = _client->connect(this->domain, this->port);
        } else {
            result = _client->connect(this->ip, this->port);
    cfa8:	06 84       	ldd	r0, Z+14	; 0x0e
    cfaa:	f7 85       	ldd	r31, Z+15	; 0x0f
    cfac:	e0 2d       	mov	r30, r0
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
    cfae:	22 ee       	ldi	r18, 0xE2	; 226
    cfb0:	32 e0       	ldi	r19, 0x02	; 2
    cfb2:	3a 83       	std	Y+2, r19	; 0x02
    cfb4:	29 83       	std	Y+1, r18	; 0x01
    cfb6:	00 91 23 10 	lds	r16, 0x1023	; 0x801023 <mqtt_client+0x211>
    cfba:	10 91 24 10 	lds	r17, 0x1024	; 0x801024 <mqtt_client+0x212>
    cfbe:	20 91 25 10 	lds	r18, 0x1025	; 0x801025 <mqtt_client+0x213>
    cfc2:	30 91 26 10 	lds	r19, 0x1026	; 0x801026 <mqtt_client+0x214>
    cfc6:	0b 83       	std	Y+3, r16	; 0x03
    cfc8:	1c 83       	std	Y+4, r17	; 0x04
    cfca:	2d 83       	std	Y+5, r18	; 0x05
    cfcc:	3e 83       	std	Y+6, r19	; 0x06
connect():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:123
    cfce:	be 01       	movw	r22, r28
    cfd0:	6f 5f       	subi	r22, 0xFF	; 255
    cfd2:	7f 4f       	sbci	r23, 0xFF	; 255
    cfd4:	61 cf       	rjmp	.-318    	; 0xce98 <mqtt_reconnect()+0x64>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:187
                    _client->stop();
                    return false;
                }
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);
    cfd6:	ce 01       	movw	r24, r28
    cfd8:	85 96       	adiw	r24, 0x25	; 37
    cfda:	0e 94 62 85 	call	0x10ac4	; 0x10ac4 <PubSubClient::readPacket(unsigned char*) [clone .constprop.139]>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:189

            if (len == 4) {
    cfde:	04 97       	sbiw	r24, 0x04	; 4
    cfe0:	59 f6       	brne	.-106    	; 0xcf78 <mqtt_reconnect()+0x144>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:190
                if (buffer[3] == 0) {
    cfe2:	80 91 17 0e 	lds	r24, 0x0E17	; 0x800e17 <mqtt_client+0x5>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:196
                    lastInActivity = millis();
                    pingOutstanding = false;
                    _state = MQTT_CONNECTED;
                    return true;
                } else {
                    _state = buffer[3];
    cfe6:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:190
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);

            if (len == 4) {
                if (buffer[3] == 0) {
    cfe8:	81 11       	cpse	r24, r1
    cfea:	c2 cf       	rjmp	.-124    	; 0xcf70 <mqtt_reconnect()+0x13c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:191
                    lastInActivity = millis();
    cfec:	0e 94 1d 85 	call	0x10a3a	; 0x10a3a <millis>
    cff0:	60 93 1a 10 	sts	0x101A, r22	; 0x80101a <mqtt_client+0x208>
    cff4:	70 93 1b 10 	sts	0x101B, r23	; 0x80101b <mqtt_client+0x209>
    cff8:	80 93 1c 10 	sts	0x101C, r24	; 0x80101c <mqtt_client+0x20a>
    cffc:	90 93 1d 10 	sts	0x101D, r25	; 0x80101d <mqtt_client+0x20b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:192
                    pingOutstanding = false;
    d000:	10 92 1e 10 	sts	0x101E, r1	; 0x80101e <mqtt_client+0x20c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:193
                    _state = MQTT_CONNECTED;
    d004:	10 92 2e 10 	sts	0x102E, r1	; 0x80102e <mqtt_client+0x21c>
    d008:	10 92 2d 10 	sts	0x102D, r1	; 0x80102d <mqtt_client+0x21b>
_Z14mqtt_reconnectv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2870
  ///  /thermctl/global/#
  device_get_name(nazev);
  if (!mqtt_client.connected())
    if (mqtt_client.connect(nazev))
    {
      strcpy_P(topic, thermctl_header_in);
    d00c:	65 ed       	ldi	r22, 0xD5	; 213
    d00e:	7c e2       	ldi	r23, 0x2C	; 44
    d010:	ce 01       	movw	r24, r28
    d012:	01 96       	adiw	r24, 0x01	; 1
    d014:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2871
      strcat(topic, nazev);
    d018:	be 01       	movw	r22, r28
    d01a:	65 5e       	subi	r22, 0xE5	; 229
    d01c:	7f 4f       	sbci	r23, 0xFF	; 255
    d01e:	ce 01       	movw	r24, r28
    d020:	01 96       	adiw	r24, 0x01	; 1
    d022:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2872
      strcat(topic, "/#");
    d026:	64 e9       	ldi	r22, 0x94	; 148
    d028:	76 e0       	ldi	r23, 0x06	; 6
    d02a:	ce 01       	movw	r24, r28
    d02c:	01 96       	adiw	r24, 0x01	; 1
    d02e:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2873
      mqtt_client.subscribe(topic);
    d032:	ce 01       	movw	r24, r28
    d034:	01 96       	adiw	r24, 0x01	; 1
    d036:	0e 94 1c 8e 	call	0x11c38	; 0x11c38 <PubSubClient::subscribe(char const*) [clone .constprop.146]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2874
      strcpy_P(topic, thermctl_header_in);
    d03a:	65 ed       	ldi	r22, 0xD5	; 213
    d03c:	7c e2       	ldi	r23, 0x2C	; 44
    d03e:	ce 01       	movw	r24, r28
    d040:	01 96       	adiw	r24, 0x01	; 1
    d042:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2875
      strcat(topic, "global/#");
    d046:	6e e8       	ldi	r22, 0x8E	; 142
    d048:	76 e0       	ldi	r23, 0x06	; 6
    d04a:	ce 01       	movw	r24, r28
    d04c:	01 96       	adiw	r24, 0x01	; 1
    d04e:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2876
      mqtt_client.subscribe(topic);
    d052:	ce 01       	movw	r24, r28
    d054:	01 96       	adiw	r24, 0x01	; 1
    d056:	0e 94 1c 8e 	call	0x11c38	; 0x11c38 <PubSubClient::subscribe(char const*) [clone .constprop.146]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2878
      //// /rtds/xxxxx
      for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    d05a:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2879
        remote_tds_subscibe_topic(idx);
    d05c:	81 2f       	mov	r24, r17
    d05e:	0e 94 cb 57 	call	0xaf96	; 0xaf96 <remote_tds_subscibe_topic(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2878
      mqtt_client.subscribe(topic);
      strcpy_P(topic, thermctl_header_in);
      strcat(topic, "global/#");
      mqtt_client.subscribe(topic);
      //// /rtds/xxxxx
      for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    d062:	1f 5f       	subi	r17, 0xFF	; 255
    d064:	1a 30       	cpi	r17, 0x0A	; 10
    d066:	d1 f7       	brne	.-12     	; 0xd05c <mqtt_reconnect()+0x228>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2881
        remote_tds_subscibe_topic(idx);
      //// svetelny controller
      strcpy_P(topic, lightctl_header_out);
    d068:	66 ec       	ldi	r22, 0xC6	; 198
    d06a:	7c e2       	ldi	r23, 0x2C	; 44
    d06c:	ce 01       	movw	r24, r28
    d06e:	01 96       	adiw	r24, 0x01	; 1
    d070:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2882
      strcat(topic, "/#");
    d074:	64 e9       	ldi	r22, 0x94	; 148
    d076:	76 e0       	ldi	r23, 0x06	; 6
    d078:	ce 01       	movw	r24, r28
    d07a:	01 96       	adiw	r24, 0x01	; 1
    d07c:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2883
      mqtt_client.subscribe(topic);
    d080:	ce 01       	movw	r24, r28
    d082:	01 96       	adiw	r24, 0x01	; 1
    d084:	0e 94 1c 8e 	call	0x11c38	; 0x11c38 <PubSubClient::subscribe(char const*) [clone .constprop.146]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2885
      /// zpetna vazba od ostatnich room controleru
      strcpy_P(topic, thermctl_subscribe);
    d088:	6e ea       	ldi	r22, 0xAE	; 174
    d08a:	7c e2       	ldi	r23, 0x2C	; 44
    d08c:	ce 01       	movw	r24, r28
    d08e:	01 96       	adiw	r24, 0x01	; 1
    d090:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2886
      mqtt_client.subscribe(topic);
    d094:	ce 01       	movw	r24, r28
    d096:	01 96       	adiw	r24, 0x01	; 1
    d098:	0e 94 1c 8e 	call	0x11c38	; 0x11c38 <PubSubClient::subscribe(char const*) [clone .constprop.146]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2888
      /// zpetna vazba od ostatnich term controlleru
      strcpy_P(topic, termbig_subscribe);
    d09c:	67 e9       	ldi	r22, 0x97	; 151
    d09e:	7c e2       	ldi	r23, 0x2C	; 44
    d0a0:	ce 01       	movw	r24, r28
    d0a2:	01 96       	adiw	r24, 0x01	; 1
    d0a4:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2889
      mqtt_client.subscribe(topic);
    d0a8:	ce 01       	movw	r24, r28
    d0aa:	01 96       	adiw	r24, 0x01	; 1
    d0ac:	0e 94 1c 8e 	call	0x11c38	; 0x11c38 <PubSubClient::subscribe(char const*) [clone .constprop.146]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2891
      /// zpetna vazba od vystupu
      strcpy_P(topic, termbig_header_out);
    d0b0:	69 e8       	ldi	r22, 0x89	; 137
    d0b2:	7c e2       	ldi	r23, 0x2C	; 44
    d0b4:	ce 01       	movw	r24, r28
    d0b6:	01 96       	adiw	r24, 0x01	; 1
    d0b8:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2892
      mqtt_client.subscribe(topic);
    d0bc:	ce 01       	movw	r24, r28
    d0be:	01 96       	adiw	r24, 0x01	; 1
    d0c0:	0e 94 1c 8e 	call	0x11c38	; 0x11c38 <PubSubClient::subscribe(char const*) [clone .constprop.146]>
    d0c4:	64 cf       	rjmp	.-312    	; 0xcf8e <mqtt_reconnect()+0x15a>
connect():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:201
                    _state = buffer[3];
                }
            }
            _client->stop();
        } else {
            _state = MQTT_CONNECT_FAILED;
    d0c6:	8e ef       	ldi	r24, 0xFE	; 254
    d0c8:	9f ef       	ldi	r25, 0xFF	; 255
    d0ca:	90 93 2e 10 	sts	0x102E, r25	; 0x80102e <mqtt_client+0x21c>
    d0ce:	80 93 2d 10 	sts	0x102D, r24	; 0x80102d <mqtt_client+0x21b>
    d0d2:	5d cf       	rjmp	.-326    	; 0xcf8e <mqtt_reconnect()+0x15a>

0000d0d4 <setup>:
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3558
/*************************************************************************************************************************/


/// setup - zakladni nastaveni - vola se pouze 1x
void setup()
{
    d0d4:	2f 92       	push	r2
    d0d6:	3f 92       	push	r3
    d0d8:	4f 92       	push	r4
    d0da:	5f 92       	push	r5
    d0dc:	6f 92       	push	r6
    d0de:	7f 92       	push	r7
    d0e0:	8f 92       	push	r8
    d0e2:	9f 92       	push	r9
    d0e4:	af 92       	push	r10
    d0e6:	bf 92       	push	r11
    d0e8:	cf 92       	push	r12
    d0ea:	df 92       	push	r13
    d0ec:	ef 92       	push	r14
    d0ee:	ff 92       	push	r15
    d0f0:	0f 93       	push	r16
    d0f2:	1f 93       	push	r17
    d0f4:	cf 93       	push	r28
    d0f6:	df 93       	push	r29
    d0f8:	cd b7       	in	r28, 0x3d	; 61
    d0fa:	de b7       	in	r29, 0x3e	; 62
    d0fc:	cd 54       	subi	r28, 0x4D	; 77
    d0fe:	d1 40       	sbci	r29, 0x01	; 1
    d100:	0f b6       	in	r0, 0x3f	; 63
    d102:	f8 94       	cli
    d104:	de bf       	out	0x3e, r29	; 62
    d106:	0f be       	out	0x3f, r0	; 63
    d108:	cd bf       	out	0x3d, r28	; 61
__base_ctor ():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:25
 */

#include "NTPClient.h"
#include "time.h"

NTPClient::NTPClient(UDP& udp) {
    d10a:	1b 82       	std	Y+3, r1	; 0x03
    d10c:	81 ed       	ldi	r24, 0xD1	; 209
    d10e:	93 e0       	ldi	r25, 0x03	; 3
    d110:	9d 83       	std	Y+5, r25	; 0x05
    d112:	8c 83       	std	Y+4, r24	; 0x04
    d114:	89 e3       	ldi	r24, 0x39	; 57
    d116:	95 e0       	ldi	r25, 0x05	; 5
    d118:	9f 83       	std	Y+7, r25	; 0x07
    d11a:	8e 83       	std	Y+6, r24	; 0x06
    d11c:	18 86       	std	Y+8, r1	; 0x08
    d11e:	19 86       	std	Y+9, r1	; 0x09
    d120:	1a 86       	std	Y+10, r1	; 0x0a
    d122:	1b 86       	std	Y+11, r1	; 0x0b
    d124:	80 e6       	ldi	r24, 0x60	; 96
    d126:	9a ee       	ldi	r25, 0xEA	; 234
    d128:	a0 e0       	ldi	r26, 0x00	; 0
    d12a:	b0 e0       	ldi	r27, 0x00	; 0
    d12c:	8c 87       	std	Y+12, r24	; 0x0c
    d12e:	9d 87       	std	Y+13, r25	; 0x0d
    d130:	ae 87       	std	Y+14, r26	; 0x0e
    d132:	bf 87       	std	Y+15, r27	; 0x0f
    d134:	18 8a       	std	Y+16, r1	; 0x10
    d136:	19 8a       	std	Y+17, r1	; 0x11
    d138:	1a 8a       	std	Y+18, r1	; 0x12
    d13a:	1b 8a       	std	Y+19, r1	; 0x13
    d13c:	1c 8a       	std	Y+20, r1	; 0x14
    d13e:	1d 8a       	std	Y+21, r1	; 0x15
    d140:	1e 8a       	std	Y+22, r1	; 0x16
    d142:	1f 8a       	std	Y+23, r1	; 0x17
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:26
  this->_udp            = &udp;
    d144:	8f e2       	ldi	r24, 0x2F	; 47
    d146:	90 e1       	ldi	r25, 0x10	; 16
    d148:	9a 83       	std	Y+2, r25	; 0x02
    d14a:	89 83       	std	Y+1, r24	; 0x01
setup_io_pin():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3359
/////////////// HW funkce ///////////////////////////////////////////////////////////////////////

/// setup_io_pin - nastaveni IO pinu
void setup_io_pin(void)
{
  pinMode(ETH_RST, OUTPUT);
    d14c:	61 e0       	ldi	r22, 0x01	; 1
    d14e:	86 e0       	ldi	r24, 0x06	; 6
    d150:	0e 94 b9 83 	call	0x10772	; 0x10772 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3360
  pinMode(ETH_CS, OUTPUT);
    d154:	61 e0       	ldi	r22, 0x01	; 1
    d156:	8f e0       	ldi	r24, 0x0F	; 15
    d158:	0e 94 b9 83 	call	0x10772	; 0x10772 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3361
  pinMode(LED, OUTPUT);
    d15c:	61 e0       	ldi	r22, 0x01	; 1
    d15e:	88 e0       	ldi	r24, 0x08	; 8
    d160:	0e 94 b9 83 	call	0x10772	; 0x10772 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3362
  pinMode(PIEZO, OUTPUT);
    d164:	61 e0       	ldi	r22, 0x01	; 1
    d166:	8c e0       	ldi	r24, 0x0C	; 12
    d168:	0e 94 b9 83 	call	0x10772	; 0x10772 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3363
  pinMode(STORAGE_RAM_CS, OUTPUT);
    d16c:	61 e0       	ldi	r22, 0x01	; 1
    d16e:	86 e1       	ldi	r24, 0x16	; 22
    d170:	0e 94 b9 83 	call	0x10772	; 0x10772 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3364
  pinMode(STORAGE_EEPROM_CS, OUTPUT);
    d174:	61 e0       	ldi	r22, 0x01	; 1
    d176:	87 e1       	ldi	r24, 0x17	; 23
    d178:	0e 94 b9 83 	call	0x10772	; 0x10772 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3365
  pinMode(JUMPER, INPUT_PULLUP);
    d17c:	62 e0       	ldi	r22, 0x02	; 2
    d17e:	8e e0       	ldi	r24, 0x0E	; 14
    d180:	0e 94 b9 83 	call	0x10772	; 0x10772 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3367

  digitalWrite(PIEZO, LOW);
    d184:	60 e0       	ldi	r22, 0x00	; 0
    d186:	8c e0       	ldi	r24, 0x0C	; 12
    d188:	0e 94 5c 82 	call	0x104b8	; 0x104b8 <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3368
  delay(1000);
    d18c:	68 ee       	ldi	r22, 0xE8	; 232
    d18e:	73 e0       	ldi	r23, 0x03	; 3
    d190:	80 e0       	ldi	r24, 0x00	; 0
    d192:	90 e0       	ldi	r25, 0x00	; 0
    d194:	0e 94 f5 83 	call	0x107ea	; 0x107ea <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3369
  digitalWrite(PIEZO, HIGH);
    d198:	61 e0       	ldi	r22, 0x01	; 1
    d19a:	8c e0       	ldi	r24, 0x0C	; 12
    d19c:	0e 94 5c 82 	call	0x104b8	; 0x104b8 <digitalWrite>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3574

  NTPClient timeClient(udpClient);

  setup_io_pin();

  interrupts();             // enable all interrupts
    d1a0:	78 94       	sei
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3575
  SPI.begin();
    d1a2:	0e 94 82 32 	call	0x6504	; 0x6504 <SPIClass::begin()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3576
  Wire.begin();
    d1a6:	0e 94 5c 83 	call	0x106b8	; 0x106b8 <TwoWire::begin() [clone .constprop.64]>
begin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:240

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }

boolean RTC_DS1307::begin(void) {
  Wire.begin();
    d1aa:	0e 94 5c 83 	call	0x106b8	; 0x106b8 <TwoWire::begin() [clone .constprop.64]>
mqtt_set_public_mqtt_client():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:459
  send_mqtt_general_payload(mqtt_client, topic, log);
}
///////////////////////////////////////////////////////////////////////////
void mqtt_set_public_mqtt_client(PubSubClient *mqtt_client)
{
  pub_mqtt_client = mqtt_client;
    d1ae:	82 e1       	ldi	r24, 0x12	; 18
    d1b0:	9e e0       	ldi	r25, 0x0E	; 14
    d1b2:	90 93 e4 08 	sts	0x08E4, r25	; 0x8008e4 <pub_mqtt_client+0x1>
    d1b6:	80 93 e3 08 	sts	0x08E3, r24	; 0x8008e3 <pub_mqtt_client>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3580
  rtc.begin();

  mqtt_set_public_mqtt_client(&mqtt_client);
  fdevopen( &printf_via_mqtt, 0);
    d1ba:	70 e0       	ldi	r23, 0x00	; 0
    d1bc:	60 e0       	ldi	r22, 0x00	; 0
    d1be:	81 e7       	ldi	r24, 0x71	; 113
    d1c0:	93 e5       	ldi	r25, 0x53	; 83
    d1c2:	0e 94 54 a3 	call	0x146a8	; 0x146a8 <fdevopen>
printf_begin():
/home/saric/Arduino/libraries/RF24/printf.h:31

void printf_begin(void)
{
  fdevopen( &serial_putc, 0 );
    d1c6:	70 e0       	ldi	r23, 0x00	; 0
    d1c8:	60 e0       	ldi	r22, 0x00	; 0
    d1ca:	84 e7       	ldi	r24, 0x74	; 116
    d1cc:	9e e2       	ldi	r25, 0x2E	; 46
    d1ce:	0e 94 54 a3 	call	0x146a8	; 0x146a8 <fdevopen>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3583
  printf_begin();

  swSPI.begin();
    d1d2:	81 e5       	ldi	r24, 0x51	; 81
    d1d4:	90 e1       	ldi	r25, 0x10	; 16
    d1d6:	0e 94 bf 23 	call	0x477e	; 0x477e <SoftSPIB::begin()>
MenuHistoryInit():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1526
  }
}
///
void MenuHistoryInit(void)
{
  MenuHistory[MenuHistoryIndex] = MENU_DEFAULT_SCREEN;
    d1da:	e0 91 64 08 	lds	r30, 0x0864	; 0x800864 <MenuHistoryIndex>
    d1de:	f0 e0       	ldi	r31, 0x00	; 0
    d1e0:	e6 5a       	subi	r30, 0xA6	; 166
    d1e2:	f7 4f       	sbci	r31, 0xF7	; 247
    d1e4:	10 82       	st	Z, r1
Init_LCD():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:234
*/

// Initialization lcd modules
void LCDWIKI_KBV::Init_LCD(void)
{
	reset();
    d1e6:	0e 94 28 84 	call	0x10850	; 0x10850 <LCDWIKI_KBV::reset() [clone .constprop.72]>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:235
	if(lcd_model == 0xFFFF)
    d1ea:	80 91 d4 0d 	lds	r24, 0x0DD4	; 0x800dd4 <my_lcd+0x1a>
    d1ee:	90 91 d5 0d 	lds	r25, 0x0DD5	; 0x800dd5 <my_lcd+0x1b>
    d1f2:	01 96       	adiw	r24, 0x01	; 1
    d1f4:	09 f0       	breq	.+2      	; 0xd1f8 <setup+0x124>
    d1f6:	4c c0       	rjmp	.+152    	; 0xd290 <setup+0x1bc>
Read_ID():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:575

//read LCD controller chip ID 
uint16_t LCDWIKI_KBV::Read_ID(void)
{
	uint16_t ret;
	if ((Read_Reg(0x04,0) == 0x00)&&(Read_Reg(0x04,1) == 0x8000))
    d1f8:	60 e0       	ldi	r22, 0x00	; 0
    d1fa:	84 e0       	ldi	r24, 0x04	; 4
    d1fc:	90 e0       	ldi	r25, 0x00	; 0
    d1fe:	0e 94 99 84 	call	0x10932	; 0x10932 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.70]>
    d202:	89 2b       	or	r24, r25
    d204:	39 f5       	brne	.+78     	; 0xd254 <setup+0x180>
    d206:	61 e0       	ldi	r22, 0x01	; 1
    d208:	84 e0       	ldi	r24, 0x04	; 4
    d20a:	90 e0       	ldi	r25, 0x00	; 0
    d20c:	0e 94 99 84 	call	0x10932	; 0x10932 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.70]>
    d210:	81 15       	cp	r24, r1
    d212:	90 48       	sbci	r25, 0x80	; 128
    d214:	f9 f4       	brne	.+62     	; 0xd254 <setup+0x180>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:577
	{
		uint8_t buf[] = {0xFF, 0x83, 0x57};
    d216:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <__malloc_margin+0x9>
    d21a:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <__malloc_margin+0xa>
    d21e:	a0 91 1f 02 	lds	r26, 0x021F	; 0x80021f <__malloc_margin+0xb>
    d222:	2b 96       	adiw	r28, 0x0b	; 11
    d224:	8d af       	std	Y+61, r24	; 0x3d
    d226:	9e af       	std	Y+62, r25	; 0x3e
    d228:	af af       	std	Y+63, r26	; 0x3f
    d22a:	2b 97       	sbiw	r28, 0x0b	; 11
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:578
		Push_Command(HX8357D_SETC, buf, sizeof(buf));
    d22c:	23 e0       	ldi	r18, 0x03	; 3
    d22e:	ae 01       	movw	r20, r28
    d230:	48 5b       	subi	r20, 0xB8	; 184
    d232:	5f 4f       	sbci	r21, 0xFF	; 255
    d234:	69 eb       	ldi	r22, 0xB9	; 185
    d236:	70 e0       	ldi	r23, 0x00	; 0
    d238:	8a eb       	ldi	r24, 0xBA	; 186
    d23a:	9d e0       	ldi	r25, 0x0D	; 13
    d23c:	0e 94 81 33 	call	0x6702	; 0x6702 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:579
		ret = (Read_Reg(0xD0,0) << 16) | Read_Reg(0xD0,1);
    d240:	60 e0       	ldi	r22, 0x00	; 0
    d242:	80 ed       	ldi	r24, 0xD0	; 208
    d244:	90 e0       	ldi	r25, 0x00	; 0
    d246:	0e 94 99 84 	call	0x10932	; 0x10932 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.70]>
    d24a:	61 e0       	ldi	r22, 0x01	; 1
    d24c:	80 ed       	ldi	r24, 0xD0	; 208
    d24e:	90 e0       	ldi	r25, 0x00	; 0
    d250:	0e 94 99 84 	call	0x10932	; 0x10932 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.70]>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:585
		if((ret == 0x990000) || (ret == 0x900000))
		{
			return 0x9090;
		}
	}
	ret = Read_Reg(0xD3,1); //0x9341 0x9486
    d254:	61 e0       	ldi	r22, 0x01	; 1
    d256:	83 ed       	ldi	r24, 0xD3	; 211
    d258:	90 e0       	ldi	r25, 0x00	; 0
    d25a:	0e 94 99 84 	call	0x10932	; 0x10932 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.70]>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:586
	if(ret == 0x9341)
    d25e:	81 34       	cpi	r24, 0x41	; 65
    d260:	a3 e9       	ldi	r26, 0x93	; 147
    d262:	9a 07       	cpc	r25, r26
    d264:	89 f0       	breq	.+34     	; 0xd288 <setup+0x1b4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:590
	{
		return 0x9341;
	}
	else if(ret == 0x9486)
    d266:	86 38       	cpi	r24, 0x86	; 134
    d268:	b4 e9       	ldi	r27, 0x94	; 148
    d26a:	9b 07       	cpc	r25, r27
    d26c:	69 f0       	breq	.+26     	; 0xd288 <setup+0x1b4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:594
	{
		return 0x9486;
	}
	else if(ret == 0x9488)
    d26e:	88 38       	cpi	r24, 0x88	; 136
    d270:	e4 e9       	ldi	r30, 0x94	; 148
    d272:	9e 07       	cpc	r25, r30
    d274:	49 f0       	breq	.+18     	; 0xd288 <setup+0x1b4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:598
	{
		return 0x9488;
	}
	else if(ret == 0x7796)
    d276:	86 39       	cpi	r24, 0x96	; 150
    d278:	f7 e7       	ldi	r31, 0x77	; 119
    d27a:	9f 07       	cpc	r25, r31
    d27c:	29 f0       	breq	.+10     	; 0xd288 <setup+0x1b4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:604
	{
		return 0x7796;
	}
	else
	{
		return Read_Reg(0, 0); //others
    d27e:	60 e0       	ldi	r22, 0x00	; 0
    d280:	90 e0       	ldi	r25, 0x00	; 0
    d282:	80 e0       	ldi	r24, 0x00	; 0
    d284:	0e 94 99 84 	call	0x10932	; 0x10932 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.70]>
Init_LCD():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:237
void LCDWIKI_KBV::Init_LCD(void)
{
	reset();
	if(lcd_model == 0xFFFF)
	{
		lcd_model = Read_ID(); 
    d288:	90 93 d5 0d 	sts	0x0DD5, r25	; 0x800dd5 <my_lcd+0x1b>
    d28c:	80 93 d4 0d 	sts	0x0DD4, r24	; 0x800dd4 <my_lcd+0x1a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:240
	}
//	uint16_t ID = Read_ID(); 
	start(lcd_model);
    d290:	00 91 d4 0d 	lds	r16, 0x0DD4	; 0x800dd4 <my_lcd+0x1a>
    d294:	10 91 d5 0d 	lds	r17, 0x0DD5	; 0x800dd5 <my_lcd+0x1b>
start():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:955
    }
}

void LCDWIKI_KBV::start(uint16_t ID)
{
	reset();
    d298:	0e 94 28 84 	call	0x10850	; 0x10850 <LCDWIKI_KBV::reset() [clone .constprop.72]>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:956
	delay(200);
    d29c:	68 ec       	ldi	r22, 0xC8	; 200
    d29e:	70 e0       	ldi	r23, 0x00	; 0
    d2a0:	80 e0       	ldi	r24, 0x00	; 0
    d2a2:	90 e0       	ldi	r25, 0x00	; 0
    d2a4:	0e 94 f5 83 	call	0x107ea	; 0x107ea <delay>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:957
	switch(ID)
    d2a8:	06 39       	cpi	r16, 0x96	; 150
    d2aa:	17 47       	sbci	r17, 0x77	; 119
    d2ac:	09 f0       	breq	.+2      	; 0xd2b0 <setup+0x1dc>
    d2ae:	34 c3       	rjmp	.+1640   	; 0xd918 <setup+0x844>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:962
	{
		

		case 0x7796:
			lcd_driver = ID_7796;
    d2b0:	89 e0       	ldi	r24, 0x09	; 9
    d2b2:	90 e0       	ldi	r25, 0x00	; 0
    d2b4:	90 93 d3 0d 	sts	0x0DD3, r25	; 0x800dd3 <my_lcd+0x19>
    d2b8:	80 93 d2 0d 	sts	0x0DD2, r24	; 0x800dd2 <my_lcd+0x18>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:965
			//WIDTH = 128,HEIGHT = 160;
			//width = WIDTH, height = HEIGHT;
			XC=ILI9341_COLADDRSET,YC=ILI9341_PAGEADDRSET,CC=ILI9341_MEMORYWRITE,RC=HX8357_RAMRD,SC1=0x33,SC2=0x37,MD=ILI9341_MADCTL,VL=0,R24BIT=0;
    d2bc:	8a e2       	ldi	r24, 0x2A	; 42
    d2be:	90 e0       	ldi	r25, 0x00	; 0
    d2c0:	90 93 d7 0d 	sts	0x0DD7, r25	; 0x800dd7 <my_lcd+0x1d>
    d2c4:	80 93 d6 0d 	sts	0x0DD6, r24	; 0x800dd6 <my_lcd+0x1c>
    d2c8:	8b e2       	ldi	r24, 0x2B	; 43
    d2ca:	90 e0       	ldi	r25, 0x00	; 0
    d2cc:	90 93 d9 0d 	sts	0x0DD9, r25	; 0x800dd9 <my_lcd+0x1f>
    d2d0:	80 93 d8 0d 	sts	0x0DD8, r24	; 0x800dd8 <my_lcd+0x1e>
    d2d4:	8c e2       	ldi	r24, 0x2C	; 44
    d2d6:	90 e0       	ldi	r25, 0x00	; 0
    d2d8:	90 93 db 0d 	sts	0x0DDB, r25	; 0x800ddb <my_lcd+0x21>
    d2dc:	80 93 da 0d 	sts	0x0DDA, r24	; 0x800dda <my_lcd+0x20>
    d2e0:	8e e2       	ldi	r24, 0x2E	; 46
    d2e2:	90 e0       	ldi	r25, 0x00	; 0
    d2e4:	90 93 dd 0d 	sts	0x0DDD, r25	; 0x800ddd <my_lcd+0x23>
    d2e8:	80 93 dc 0d 	sts	0x0DDC, r24	; 0x800ddc <my_lcd+0x22>
    d2ec:	83 e3       	ldi	r24, 0x33	; 51
    d2ee:	90 e0       	ldi	r25, 0x00	; 0
    d2f0:	90 93 df 0d 	sts	0x0DDF, r25	; 0x800ddf <my_lcd+0x25>
    d2f4:	80 93 de 0d 	sts	0x0DDE, r24	; 0x800dde <my_lcd+0x24>
    d2f8:	87 e3       	ldi	r24, 0x37	; 55
    d2fa:	90 e0       	ldi	r25, 0x00	; 0
    d2fc:	90 93 e1 0d 	sts	0x0DE1, r25	; 0x800de1 <my_lcd+0x27>
    d300:	80 93 e0 0d 	sts	0x0DE0, r24	; 0x800de0 <my_lcd+0x26>
    d304:	86 e3       	ldi	r24, 0x36	; 54
    d306:	90 e0       	ldi	r25, 0x00	; 0
    d308:	90 93 e3 0d 	sts	0x0DE3, r25	; 0x800de3 <my_lcd+0x29>
    d30c:	80 93 e2 0d 	sts	0x0DE2, r24	; 0x800de2 <my_lcd+0x28>
    d310:	10 92 e5 0d 	sts	0x0DE5, r1	; 0x800de5 <my_lcd+0x2b>
    d314:	10 92 e4 0d 	sts	0x0DE4, r1	; 0x800de4 <my_lcd+0x2a>
    d318:	10 92 e7 0d 	sts	0x0DE7, r1	; 0x800de7 <my_lcd+0x2d>
    d31c:	10 92 e6 0d 	sts	0x0DE6, r1	; 0x800de6 <my_lcd+0x2c>
setup():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:912
}

void LCDWIKI_KBV:: init_table8(const void *table, int16_t size)
{
	uint8_t i;
    uint8_t *p = (uint8_t *) table, dat[MAX_REG_NUM];            //R61526 has GAMMA[22] 
    d320:	23 ee       	ldi	r18, 0xE3	; 227
    d322:	e2 2e       	mov	r14, r18
    d324:	2c e2       	ldi	r18, 0x2C	; 44
    d326:	f2 2e       	mov	r15, r18
start():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:965

		case 0x7796:
			lcd_driver = ID_7796;
			//WIDTH = 128,HEIGHT = 160;
			//width = WIDTH, height = HEIGHT;
			XC=ILI9341_COLADDRSET,YC=ILI9341_PAGEADDRSET,CC=ILI9341_MEMORYWRITE,RC=HX8357_RAMRD,SC1=0x33,SC2=0x37,MD=ILI9341_MADCTL,VL=0,R24BIT=0;
    d328:	3c e6       	ldi	r19, 0x6C	; 108
    d32a:	c3 2e       	mov	r12, r19
    d32c:	d1 2c       	mov	r13, r1
init_table8():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:915
{
	uint8_t i;
    uint8_t *p = (uint8_t *) table, dat[MAX_REG_NUM];            //R61526 has GAMMA[22] 
    while (size > 0) 
	{
        uint8_t cmd = pgm_read_byte(p++);
    d32e:	f7 01       	movw	r30, r14
    d330:	64 91       	lpm	r22, Z
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:916
        uint8_t len = pgm_read_byte(p++);
    d332:	31 96       	adiw	r30, 0x01	; 1
    d334:	14 91       	lpm	r17, Z
    d336:	f2 e0       	ldi	r31, 0x02	; 2
    d338:	ef 0e       	add	r14, r31
    d33a:	f1 1c       	adc	r15, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:917
        if (cmd == TFTLCD_DELAY8) 
    d33c:	6f 37       	cpi	r22, 0x7F	; 127
    d33e:	89 f0       	breq	.+34     	; 0xd362 <setup+0x28e>
    d340:	de 01       	movw	r26, r28
    d342:	a8 5b       	subi	r26, 0xB8	; 184
    d344:	bf 4f       	sbci	r27, 0xFF	; 255
    d346:	30 e0       	ldi	r19, 0x00	; 0
    d348:	20 e0       	ldi	r18, 0x00	; 0
    d34a:	ad 01       	movw	r20, r26
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:924
            delay(len);
            len = 0;
        } 
		else 
		{
            for (i = 0; i < len; i++)
    d34c:	21 17       	cp	r18, r17
    d34e:	08 f0       	brcs	.+2      	; 0xd352 <setup+0x27e>
    d350:	da c2       	rjmp	.+1460   	; 0xd906 <setup+0x832>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:926
            {
                dat[i] = pgm_read_byte(p++);
    d352:	f7 01       	movw	r30, r14
    d354:	e2 0f       	add	r30, r18
    d356:	f3 1f       	adc	r31, r19
    d358:	e4 91       	lpm	r30, Z
    d35a:	ed 93       	st	X+, r30
    d35c:	2f 5f       	subi	r18, 0xFF	; 255
    d35e:	3f 4f       	sbci	r19, 0xFF	; 255
    d360:	f5 cf       	rjmp	.-22     	; 0xd34c <setup+0x278>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:919
	{
        uint8_t cmd = pgm_read_byte(p++);
        uint8_t len = pgm_read_byte(p++);
        if (cmd == TFTLCD_DELAY8) 
		{
            delay(len);
    d362:	61 2f       	mov	r22, r17
    d364:	70 e0       	ldi	r23, 0x00	; 0
    d366:	90 e0       	ldi	r25, 0x00	; 0
    d368:	80 e0       	ldi	r24, 0x00	; 0
    d36a:	0e 94 f5 83 	call	0x107ea	; 0x107ea <delay>
setup():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:920
            len = 0;
    d36e:	10 e0       	ldi	r17, 0x00	; 0
init_table8():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:930
            {
                dat[i] = pgm_read_byte(p++);
            }
			Push_Command(cmd,dat,len);
        }
        size -= len + 2;
    d370:	61 2f       	mov	r22, r17
    d372:	70 e0       	ldi	r23, 0x00	; 0
    d374:	6e 5f       	subi	r22, 0xFE	; 254
    d376:	7f 4f       	sbci	r23, 0xFF	; 255
    d378:	c6 1a       	sub	r12, r22
    d37a:	d7 0a       	sbc	r13, r23
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:913

void LCDWIKI_KBV:: init_table8(const void *table, int16_t size)
{
	uint8_t i;
    uint8_t *p = (uint8_t *) table, dat[MAX_REG_NUM];            //R61526 has GAMMA[22] 
    while (size > 0) 
    d37c:	1c 14       	cp	r1, r12
    d37e:	1d 04       	cpc	r1, r13
    d380:	b4 f2       	brlt	.-84     	; 0xd32e <setup+0x25a>
start():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:1002
			break;
		default:
			lcd_driver = ID_UNKNOWN;
			break;		
	}
	Set_Rotation(rotation); 
    d382:	80 91 d0 0d 	lds	r24, 0x0DD0	; 0x800dd0 <my_lcd+0x16>
    d386:	0e 94 c3 7e 	call	0xfd86	; 0xfd86 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.75]>
Invert_Display():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:892
}

//Anti color display 
void LCDWIKI_KBV::Invert_Display(boolean i)
{
	CS_ACTIVE;
    d38a:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x2e>
    d38e:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x2f>
    d392:	80 81       	ld	r24, Z
    d394:	90 91 f4 0d 	lds	r25, 0x0DF4	; 0x800df4 <my_lcd+0x3a>
    d398:	89 23       	and	r24, r25
    d39a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:893
	uint8_t val = VL^i;
    d39c:	90 91 e4 0d 	lds	r25, 0x0DE4	; 0x800de4 <my_lcd+0x2a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:894
	if(lcd_driver == ID_932X)
    d3a0:	20 91 d2 0d 	lds	r18, 0x0DD2	; 0x800dd2 <my_lcd+0x18>
    d3a4:	30 91 d3 0d 	lds	r19, 0x0DD3	; 0x800dd3 <my_lcd+0x19>
    d3a8:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x30>
    d3ac:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x31>
    d3b0:	80 91 f5 0d 	lds	r24, 0x0DF5	; 0x800df5 <my_lcd+0x3b>
    d3b4:	21 15       	cp	r18, r1
    d3b6:	31 05       	cpc	r19, r1
    d3b8:	09 f0       	breq	.+2      	; 0xd3bc <setup+0x2e8>
    d3ba:	b5 c2       	rjmp	.+1386   	; 0xd926 <setup+0x852>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:896
	{
		writeCmdData8(0x61, val);
    d3bc:	20 81       	ld	r18, Z
    d3be:	82 23       	and	r24, r18
    d3c0:	80 83       	st	Z, r24
    d3c2:	81 e6       	ldi	r24, 0x61	; 97
    d3c4:	82 b9       	out	0x02, r24	; 2
    d3c6:	e0 91 ec 0d 	lds	r30, 0x0DEC	; 0x800dec <my_lcd+0x32>
    d3ca:	f0 91 ed 0d 	lds	r31, 0x0DED	; 0x800ded <my_lcd+0x33>
    d3ce:	80 81       	ld	r24, Z
    d3d0:	20 91 f6 0d 	lds	r18, 0x0DF6	; 0x800df6 <my_lcd+0x3c>
    d3d4:	82 23       	and	r24, r18
    d3d6:	80 83       	st	Z, r24
    d3d8:	e0 91 ec 0d 	lds	r30, 0x0DEC	; 0x800dec <my_lcd+0x32>
    d3dc:	f0 91 ed 0d 	lds	r31, 0x0DED	; 0x800ded <my_lcd+0x33>
    d3e0:	80 81       	ld	r24, Z
    d3e2:	20 91 f2 0d 	lds	r18, 0x0DF2	; 0x800df2 <my_lcd+0x38>
    d3e6:	82 2b       	or	r24, r18
    d3e8:	80 83       	st	Z, r24
    d3ea:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x30>
    d3ee:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x31>
    d3f2:	80 81       	ld	r24, Z
    d3f4:	20 91 f1 0d 	lds	r18, 0x0DF1	; 0x800df1 <my_lcd+0x37>
    d3f8:	82 2b       	or	r24, r18
    d3fa:	80 83       	st	Z, r24
    d3fc:	92 b9       	out	0x02, r25	; 2
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:900
	}
	else if(lcd_driver == ID_7575)
	{
		writeCmdData8(0x01, val ? 8 : 10);
    d3fe:	e0 91 ec 0d 	lds	r30, 0x0DEC	; 0x800dec <my_lcd+0x32>
    d402:	f0 91 ed 0d 	lds	r31, 0x0DED	; 0x800ded <my_lcd+0x33>
    d406:	80 81       	ld	r24, Z
    d408:	90 91 f6 0d 	lds	r25, 0x0DF6	; 0x800df6 <my_lcd+0x3c>
    d40c:	89 23       	and	r24, r25
    d40e:	80 83       	st	Z, r24
    d410:	e0 91 ec 0d 	lds	r30, 0x0DEC	; 0x800dec <my_lcd+0x32>
    d414:	f0 91 ed 0d 	lds	r31, 0x0DED	; 0x800ded <my_lcd+0x33>
    d418:	80 81       	ld	r24, Z
    d41a:	90 91 f2 0d 	lds	r25, 0x0DF2	; 0x800df2 <my_lcd+0x38>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:904
	}
	else
	{
		writeCmd8(val ? 0x21 : 0x20);
    d41e:	89 2b       	or	r24, r25
    d420:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:906
	}
	CS_IDLE;
    d422:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x2e>
    d426:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x2f>
    d42a:	80 81       	ld	r24, Z
    d42c:	90 91 f0 0d 	lds	r25, 0x0DF0	; 0x800df0 <my_lcd+0x36>
    d430:	89 2b       	or	r24, r25
    d432:	80 83       	st	Z, r24
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3588
  swSPI.begin();

  MenuHistoryInit();

  my_lcd.Init_LCD();
  my_lcd.Set_Rotation(3);
    d434:	83 e0       	ldi	r24, 0x03	; 3
    d436:	0e 94 c3 7e 	call	0xfd86	; 0xfd86 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.75]>
TP_Set_Rotation():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:341
	return touch_statue&TP_PRES_DOWN;
}

void LCDWIKI_TOUCH::TP_Set_Rotation(uint8_t val)
{
	touch_rotation = val;
    d43a:	83 e0       	ldi	r24, 0x03	; 3
    d43c:	80 93 a9 0d 	sts	0x0DA9, r24	; 0x800da9 <my_touch+0xd>
_ZNK11LCDWIKI_KBV10Get_HeightEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:743
}

//get lcd height
int16_t LCDWIKI_KBV::Get_Height(void) const
{
	return height;
    d440:	20 91 ce 0d 	lds	r18, 0x0DCE	; 0x800dce <my_lcd+0x14>
    d444:	30 91 cf 0d 	lds	r19, 0x0DCF	; 0x800dcf <my_lcd+0x15>
_ZNK11LCDWIKI_KBV9Get_WidthEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:737
}

//get lcd width
int16_t LCDWIKI_KBV::Get_Width(void) const
{
	return width;
    d448:	40 91 cc 0d 	lds	r20, 0x0DCC	; 0x800dcc <my_lcd+0x12>
    d44c:	50 91 cd 0d 	lds	r21, 0x0DCD	; 0x800dcd <my_lcd+0x13>
Get_Rotation():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:886
//1  :  90 degree
//2  :  180 degree
//3  :  270 degree
uint8_t LCDWIKI_KBV::Get_Rotation(void) const
{
	return rotation;
    d450:	90 91 d0 0d 	lds	r25, 0x0DD0	; 0x800dd0 <my_lcd+0x16>
TP_Init():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:53
	y=0xffff;
}

void LCDWIKI_TOUCH::TP_Init(uint8_t r,uint16_t w, uint16_t h)
{
	TDIN_HIGH;
    d454:	e0 91 b1 0d 	lds	r30, 0x0DB1	; 0x800db1 <my_touch+0x15>
    d458:	f0 91 b2 0d 	lds	r31, 0x0DB2	; 0x800db2 <my_touch+0x16>
    d45c:	80 81       	ld	r24, Z
    d45e:	60 91 b8 0d 	lds	r22, 0x0DB8	; 0x800db8 <my_touch+0x1c>
    d462:	86 2b       	or	r24, r22
    d464:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:54
	TCLK_HIGH; 
    d466:	e0 91 ad 0d 	lds	r30, 0x0DAD	; 0x800dad <my_touch+0x11>
    d46a:	f0 91 ae 0d 	lds	r31, 0x0DAE	; 0x800dae <my_touch+0x12>
    d46e:	80 81       	ld	r24, Z
    d470:	60 91 b6 0d 	lds	r22, 0x0DB6	; 0x800db6 <my_touch+0x1a>
    d474:	86 2b       	or	r24, r22
    d476:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:55
	TCS_HIGH;
    d478:	e0 91 ab 0d 	lds	r30, 0x0DAB	; 0x800dab <my_touch+0xf>
    d47c:	f0 91 ac 0d 	lds	r31, 0x0DAC	; 0x800dac <my_touch+0x10>
    d480:	80 81       	ld	r24, Z
    d482:	60 91 b5 0d 	lds	r22, 0x0DB5	; 0x800db5 <my_touch+0x19>
    d486:	86 2b       	or	r24, r22
    d488:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:56
	wid = w;
    d48a:	50 93 a5 0d 	sts	0x0DA5, r21	; 0x800da5 <my_touch+0x9>
    d48e:	40 93 a4 0d 	sts	0x0DA4, r20	; 0x800da4 <my_touch+0x8>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:57
	heig = h;	
    d492:	30 93 a7 0d 	sts	0x0DA7, r19	; 0x800da7 <my_touch+0xb>
    d496:	20 93 a6 0d 	sts	0x0DA6, r18	; 0x800da6 <my_touch+0xa>
LCD_Set_Rotation():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:351
	return touch_rotation;
}

void LCDWIKI_TOUCH::LCD_Set_Rotation(uint8_t val)
{
	lcd_rotation = val;
    d49a:	90 93 aa 0d 	sts	0x0DAA, r25	; 0x800daa <my_touch+0xe>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3591
  my_touch.TP_Set_Rotation(3);
  my_touch.TP_Init(my_lcd.Get_Rotation(), my_lcd.Get_Display_Width(), my_lcd.Get_Display_Height());
  my_lcd.Fill_Screen(WHITE);
    d49e:	8f ef       	ldi	r24, 0xFF	; 255
    d4a0:	9f ef       	ldi	r25, 0xFF	; 255
    d4a2:	0e 94 20 7d 	call	0xfa40	; 0xfa40 <LCDWIKI_GUI::Fill_Screen(unsigned int) [clone .constprop.162]>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    d4a6:	8f e1       	ldi	r24, 0x1F	; 31
    d4a8:	90 e0       	ldi	r25, 0x00	; 0
    d4aa:	90 93 c5 0d 	sts	0x0DC5, r25	; 0x800dc5 <my_lcd+0xb>
    d4ae:	80 93 c4 0d 	sts	0x0DC4, r24	; 0x800dc4 <my_lcd+0xa>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3593
  my_lcd.Set_Draw_color(BLUE);
  strcpy_P(str1, term_title);
    d4b2:	1e 01       	movw	r2, r28
    d4b4:	28 e4       	ldi	r18, 0x48	; 72
    d4b6:	22 0e       	add	r2, r18
    d4b8:	31 1c       	adc	r3, r1
    d4ba:	6a e5       	ldi	r22, 0x5A	; 90
    d4bc:	7e e2       	ldi	r23, 0x2E	; 46
    d4be:	c1 01       	movw	r24, r2
    d4c0:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3594
  show_string(str1, 30, 10, 2, BLUE, WHITE, 0);
    d4c4:	ee 24       	eor	r14, r14
    d4c6:	ea 94       	dec	r14
    d4c8:	fe 2c       	mov	r15, r14
    d4ca:	0f e1       	ldi	r16, 0x1F	; 31
    d4cc:	10 e0       	ldi	r17, 0x00	; 0
    d4ce:	22 e0       	ldi	r18, 0x02	; 2
    d4d0:	4a e0       	ldi	r20, 0x0A	; 10
    d4d2:	50 e0       	ldi	r21, 0x00	; 0
    d4d4:	6e e1       	ldi	r22, 0x1E	; 30
    d4d6:	70 e0       	ldi	r23, 0x00	; 0
    d4d8:	c1 01       	movw	r24, r2
    d4da:	0e 94 37 7d 	call	0xfa6e	; 0xfa6e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]>
    d4de:	8e e1       	ldi	r24, 0x1E	; 30
    d4e0:	90 e0       	ldi	r25, 0x00	; 0
    d4e2:	c4 5c       	subi	r28, 0xC4	; 196
    d4e4:	de 4f       	sbci	r29, 0xFE	; 254
    d4e6:	99 83       	std	Y+1, r25	; 0x01
    d4e8:	88 83       	st	Y, r24
    d4ea:	cc 53       	subi	r28, 0x3C	; 60
    d4ec:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3596
  ///
  for (uint8_t init = 0;  init < 16; init++)
    d4ee:	a1 2c       	mov	r10, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3959
    }
    ///
    /// inicializace RTC casu
    if (init == 15)
    {
      strcpy_P(str1, text_rtc_cas);
    d4f0:	d2 2c       	mov	r13, r2
    d4f2:	b3 2c       	mov	r11, r3
__base_ctor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:43
    _address.dword = address;
}

IPAddress::IPAddress(const uint8_t *address)
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
    d4f4:	a2 e3       	ldi	r26, 0x32	; 50
    d4f6:	b1 e0       	ldi	r27, 0x01	; 1
    d4f8:	ac 0f       	add	r26, r28
    d4fa:	bd 1f       	adc	r27, r29
    d4fc:	12 96       	adiw	r26, 0x02	; 2
    d4fe:	cc 5b       	subi	r28, 0xBC	; 188
    d500:	de 4f       	sbci	r29, 0xFE	; 254
    d502:	b9 83       	std	Y+1, r27	; 0x01
    d504:	a8 83       	st	Y, r26
    d506:	c4 54       	subi	r28, 0x44	; 68
    d508:	d1 40       	sbci	r29, 0x01	; 1
    d50a:	ec e2       	ldi	r30, 0x2C	; 44
    d50c:	f1 e0       	ldi	r31, 0x01	; 1
    d50e:	ec 0f       	add	r30, r28
    d510:	fd 1f       	adc	r31, r29
    d512:	32 96       	adiw	r30, 0x02	; 2
    d514:	ca 5b       	subi	r28, 0xBA	; 186
    d516:	de 4f       	sbci	r29, 0xFE	; 254
    d518:	f9 83       	std	Y+1, r31	; 0x01
    d51a:	e8 83       	st	Y, r30
    d51c:	c6 54       	subi	r28, 0x46	; 70
    d51e:	d1 40       	sbci	r29, 0x01	; 1
    d520:	26 e2       	ldi	r18, 0x26	; 38
    d522:	31 e0       	ldi	r19, 0x01	; 1
    d524:	2c 0f       	add	r18, r28
    d526:	3d 1f       	adc	r19, r29
    d528:	2e 5f       	subi	r18, 0xFE	; 254
    d52a:	3f 4f       	sbci	r19, 0xFF	; 255
    d52c:	c8 5b       	subi	r28, 0xB8	; 184
    d52e:	de 4f       	sbci	r29, 0xFE	; 254
    d530:	39 83       	std	Y+1, r19	; 0x01
    d532:	28 83       	st	Y, r18
    d534:	c8 54       	subi	r28, 0x48	; 72
    d536:	d1 40       	sbci	r29, 0x01	; 1
    d538:	8e ed       	ldi	r24, 0xDE	; 222
    d53a:	90 e0       	ldi	r25, 0x00	; 0
    d53c:	8c 0f       	add	r24, r28
    d53e:	9d 1f       	adc	r25, r29
    d540:	02 96       	adiw	r24, 0x02	; 2
    d542:	c6 5b       	subi	r28, 0xB6	; 182
    d544:	de 4f       	sbci	r29, 0xFE	; 254
    d546:	99 83       	std	Y+1, r25	; 0x01
    d548:	88 83       	st	Y, r24
    d54a:	ca 54       	subi	r28, 0x4A	; 74
    d54c:	d1 40       	sbci	r29, 0x01	; 1
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3698
        }
        ///
        for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
        {
          get_tds18s20(idx, &tds);
          strcpy(tds.name, "FREE");
    d54e:	a8 ec       	ldi	r26, 0xC8	; 200
    d550:	b0 e0       	ldi	r27, 0x00	; 0
    d552:	ac 0f       	add	r26, r28
    d554:	bd 1f       	adc	r27, r29
    d556:	1c 96       	adiw	r26, 0x0c	; 12
    d558:	c4 5b       	subi	r28, 0xB4	; 180
    d55a:	de 4f       	sbci	r29, 0xFE	; 254
    d55c:	b9 83       	std	Y+1, r27	; 0x01
    d55e:	a8 83       	st	Y, r26
    d560:	cc 54       	subi	r28, 0x4C	; 76
    d562:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3598
  strcpy_P(str1, term_title);
  show_string(str1, 30, 10, 2, BLUE, WHITE, 0);
  ///
  for (uint8_t init = 0;  init < 16; init++)
  {
    show_string("X", 30 + (init * 15), 30, 1, RED, WHITE, 0);
    d564:	ee 24       	eor	r14, r14
    d566:	ea 94       	dec	r14
    d568:	fe 2c       	mov	r15, r14
    d56a:	00 e0       	ldi	r16, 0x00	; 0
    d56c:	18 ef       	ldi	r17, 0xF8	; 248
    d56e:	21 e0       	ldi	r18, 0x01	; 1
    d570:	4e e1       	ldi	r20, 0x1E	; 30
    d572:	50 e0       	ldi	r21, 0x00	; 0
    d574:	c4 5c       	subi	r28, 0xC4	; 196
    d576:	de 4f       	sbci	r29, 0xFE	; 254
    d578:	68 81       	ld	r22, Y
    d57a:	79 81       	ldd	r23, Y+1	; 0x01
    d57c:	cc 53       	subi	r28, 0x3C	; 60
    d57e:	d1 40       	sbci	r29, 0x01	; 1
    d580:	87 e9       	ldi	r24, 0x97	; 151
    d582:	96 e0       	ldi	r25, 0x06	; 6
    d584:	0e 94 37 7d 	call	0xfa6e	; 0xfa6e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3600
    /// inicalizace vnitrniho ADC prevodniku
    if (init == 0)
    d588:	a1 10       	cpse	r10, r1
    d58a:	18 c2       	rjmp	.+1072   	; 0xd9bc <setup+0x8e8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3602
    {
      strcpy_P(str1, text_vnitrni_ochrany);
    d58c:	6a e4       	ldi	r22, 0x4A	; 74
    d58e:	7e e2       	ldi	r23, 0x2E	; 46
    d590:	c1 01       	movw	r24, r2
    d592:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3603
      strcat(str1, ":1");
    d596:	69 e9       	ldi	r22, 0x99	; 153
    d598:	76 e0       	ldi	r23, 0x06	; 6
    d59a:	c1 01       	movw	r24, r2
    d59c:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3604
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    d5a0:	00 ee       	ldi	r16, 0xE0	; 224
    d5a2:	17 e0       	ldi	r17, 0x07	; 7
    d5a4:	21 e0       	ldi	r18, 0x01	; 1
    d5a6:	42 e3       	ldi	r20, 0x32	; 50
    d5a8:	50 e0       	ldi	r21, 0x00	; 0
    d5aa:	6e e1       	ldi	r22, 0x1E	; 30
    d5ac:	70 e0       	ldi	r23, 0x00	; 0
    d5ae:	c1 01       	movw	r24, r2
    d5b0:	0e 94 37 7d 	call	0xfa6e	; 0xfa6e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3606

      tritri = 0;
    d5b4:	10 92 0e 0a 	sts	0x0A0E, r1	; 0x800a0e <tritri+0x1>
    d5b8:	10 92 0d 0a 	sts	0x0A0D, r1	; 0x800a0d <tritri>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3607
      petnula = 0;
    d5bc:	10 92 0c 0a 	sts	0x0A0C, r1	; 0x800a0c <petnula+0x1>
    d5c0:	10 92 0b 0a 	sts	0x0A0B, r1	; 0x800a0b <petnula>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3608
      dvanact = 0;
    d5c4:	10 92 0a 0a 	sts	0x0A0A, r1	; 0x800a0a <dvanact+0x1>
    d5c8:	10 92 09 0a 	sts	0x0A09, r1	; 0x800a09 <dvanact>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3610
      dvanact = 0;
      light_curr = 0;
    d5cc:	10 92 d2 0a 	sts	0x0AD2, r1	; 0x800ad2 <light_curr+0x1>
    d5d0:	10 92 d1 0a 	sts	0x0AD1, r1	; 0x800ad1 <light_curr>
init_a2d():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:35

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// inicializace a2d prevodniku //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void init_a2d(uint8_t enable_channel, uint8_t delicka, uint8_t reference)
{
a2d_enable = enable_channel;
    d5d4:	88 ef       	ldi	r24, 0xF8	; 248
    d5d6:	80 93 cf 0a 	sts	0x0ACF, r24	; 0x800acf <a2d_enable>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:36
a2d_reference = reference;
    d5da:	83 e0       	ldi	r24, 0x03	; 3
    d5dc:	80 93 ba 09 	sts	0x09BA, r24	; 0x8009ba <a2d_reference>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:38
a2d_delicka = delicka;
a2d_index = 0;
    d5e0:	10 92 d0 0a 	sts	0x0AD0, r1	; 0x800ad0 <a2d_index>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:39
a2d_input = 0;
    d5e4:	10 92 bb 09 	sts	0x09BB, r1	; 0x8009bb <a2d_input>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:41
a2d_data = 0;
ADCSRA = ((1<<ADEN|1<<ADIE) + (a2d_delicka & 7));
    d5e8:	8e e8       	ldi	r24, 0x8E	; 142
    d5ea:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:42
ADMUX = 0;
    d5ee:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:43
ADMUX = ((a2d_reference & 3) << 6) ;
    d5f2:	80 91 ba 09 	lds	r24, 0x09BA	; 0x8009ba <a2d_reference>
    d5f6:	b0 e4       	ldi	r27, 0x40	; 64
    d5f8:	8b 9f       	mul	r24, r27
    d5fa:	c0 01       	movw	r24, r0
    d5fc:	11 24       	eor	r1, r1
    d5fe:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
a2d_handler():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:18
typedef void (*a2d_interupt)(uint8_t, uint16_t);
volatile static a2d_interupt a2d_interupt_func;

void a2d_handler(void (*a2d_command)(uint8_t channel, uint16_t data))
{
a2d_interupt_func = a2d_command;
    d602:	8b ed       	ldi	r24, 0xDB	; 219
    d604:	91 e2       	ldi	r25, 0x21	; 33
    d606:	90 93 bd 09 	sts	0x09BD, r25	; 0x8009bd <_ZL17a2d_interupt_func.lto_priv.227+0x1>
    d60a:	80 93 bc 09 	sts	0x09BC, r24	; 0x8009bc <_ZL17a2d_interupt_func.lto_priv.227>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3616
      /// inicializace prevodniku
      init_a2d((1 << A_PROUD | 1 << A_TRIV | 1 << A_PETV | 1 << A_DVANACTV | 1 << A_LIGHT), 6, 3);
      a2d_handler(a2d_complete);
      ///
      /// spotreba proudu
      a2d_run_now = 0;
    d60e:	10 92 d3 0a 	sts	0x0AD3, r1	; 0x800ad3 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3617
      a2d_start_first(A_PROUD);
    d612:	83 e0       	ldi	r24, 0x03	; 3
    d614:	0e 94 2a 87 	call	0x10e54	; 0x10e54 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3618
      milis = millis();
    d618:	0e 94 1d 85 	call	0x10a3a	; 0x10a3a <millis>
    d61c:	2b 01       	movw	r4, r22
    d61e:	3c 01       	movw	r6, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3619
      while (a2d_run_now == 0 && millis() - milis < 10);
    d620:	80 91 d3 0a 	lds	r24, 0x0AD3	; 0x800ad3 <a2d_run_now>
    d624:	81 11       	cpse	r24, r1
    d626:	0b c0       	rjmp	.+22     	; 0xd63e <setup+0x56a>
    d628:	0e 94 1d 85 	call	0x10a3a	; 0x10a3a <millis>
    d62c:	64 19       	sub	r22, r4
    d62e:	75 09       	sbc	r23, r5
    d630:	86 09       	sbc	r24, r6
    d632:	97 09       	sbc	r25, r7
    d634:	6a 30       	cpi	r22, 0x0A	; 10
    d636:	71 05       	cpc	r23, r1
    d638:	81 05       	cpc	r24, r1
    d63a:	91 05       	cpc	r25, r1
    d63c:	88 f3       	brcs	.-30     	; 0xd620 <setup+0x54c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3621
      /// regulator 3.3V
      a2d_run_now = 0;
    d63e:	10 92 d3 0a 	sts	0x0AD3, r1	; 0x800ad3 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3622
      a2d_start_first(A_TRIV);
    d642:	86 e0       	ldi	r24, 0x06	; 6
    d644:	0e 94 2a 87 	call	0x10e54	; 0x10e54 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3623
      milis = millis();
    d648:	0e 94 1d 85 	call	0x10a3a	; 0x10a3a <millis>
    d64c:	2b 01       	movw	r4, r22
    d64e:	3c 01       	movw	r6, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3624
      while (a2d_run_now == 0 && millis() - milis < 10);
    d650:	80 91 d3 0a 	lds	r24, 0x0AD3	; 0x800ad3 <a2d_run_now>
    d654:	81 11       	cpse	r24, r1
    d656:	0b c0       	rjmp	.+22     	; 0xd66e <setup+0x59a>
    d658:	0e 94 1d 85 	call	0x10a3a	; 0x10a3a <millis>
    d65c:	64 19       	sub	r22, r4
    d65e:	75 09       	sbc	r23, r5
    d660:	86 09       	sbc	r24, r6
    d662:	97 09       	sbc	r25, r7
    d664:	6a 30       	cpi	r22, 0x0A	; 10
    d666:	71 05       	cpc	r23, r1
    d668:	81 05       	cpc	r24, r1
    d66a:	91 05       	cpc	r25, r1
    d66c:	88 f3       	brcs	.-30     	; 0xd650 <setup+0x57c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3626
      /// regulator 5.0V
      a2d_run_now = 0;
    d66e:	10 92 d3 0a 	sts	0x0AD3, r1	; 0x800ad3 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3627
      a2d_start_first(A_PETV);
    d672:	85 e0       	ldi	r24, 0x05	; 5
    d674:	0e 94 2a 87 	call	0x10e54	; 0x10e54 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3628
      milis = millis();
    d678:	0e 94 1d 85 	call	0x10a3a	; 0x10a3a <millis>
    d67c:	2b 01       	movw	r4, r22
    d67e:	3c 01       	movw	r6, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3629
      while (a2d_run_now == 0 && millis() - milis < 10);
    d680:	80 91 d3 0a 	lds	r24, 0x0AD3	; 0x800ad3 <a2d_run_now>
    d684:	81 11       	cpse	r24, r1
    d686:	0b c0       	rjmp	.+22     	; 0xd69e <setup+0x5ca>
    d688:	0e 94 1d 85 	call	0x10a3a	; 0x10a3a <millis>
    d68c:	64 19       	sub	r22, r4
    d68e:	75 09       	sbc	r23, r5
    d690:	86 09       	sbc	r24, r6
    d692:	97 09       	sbc	r25, r7
    d694:	6a 30       	cpi	r22, 0x0A	; 10
    d696:	71 05       	cpc	r23, r1
    d698:	81 05       	cpc	r24, r1
    d69a:	91 05       	cpc	r25, r1
    d69c:	88 f3       	brcs	.-30     	; 0xd680 <setup+0x5ac>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3631
      /// vstupni napeti 12V
      a2d_run_now = 0;
    d69e:	10 92 d3 0a 	sts	0x0AD3, r1	; 0x800ad3 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3632
      a2d_start_first(A_DVANACTV);
    d6a2:	84 e0       	ldi	r24, 0x04	; 4
    d6a4:	0e 94 2a 87 	call	0x10e54	; 0x10e54 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3633
      milis = millis();
    d6a8:	0e 94 1d 85 	call	0x10a3a	; 0x10a3a <millis>
    d6ac:	2b 01       	movw	r4, r22
    d6ae:	3c 01       	movw	r6, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3634
      while (a2d_run_now == 0 && millis() - milis < 10);
    d6b0:	80 91 d3 0a 	lds	r24, 0x0AD3	; 0x800ad3 <a2d_run_now>
    d6b4:	81 11       	cpse	r24, r1
    d6b6:	0b c0       	rjmp	.+22     	; 0xd6ce <setup+0x5fa>
    d6b8:	0e 94 1d 85 	call	0x10a3a	; 0x10a3a <millis>
    d6bc:	64 19       	sub	r22, r4
    d6be:	75 09       	sbc	r23, r5
    d6c0:	86 09       	sbc	r24, r6
    d6c2:	97 09       	sbc	r25, r7
    d6c4:	6a 30       	cpi	r22, 0x0A	; 10
    d6c6:	71 05       	cpc	r23, r1
    d6c8:	81 05       	cpc	r24, r1
    d6ca:	91 05       	cpc	r25, r1
    d6cc:	88 f3       	brcs	.-30     	; 0xd6b0 <setup+0x5dc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3636
      /// aktualni intenzita svetla
      a2d_run_now = 0;
    d6ce:	10 92 d3 0a 	sts	0x0AD3, r1	; 0x800ad3 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3637
      a2d_start_first(A_LIGHT);
    d6d2:	87 e0       	ldi	r24, 0x07	; 7
    d6d4:	0e 94 2a 87 	call	0x10e54	; 0x10e54 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3638
      milis = millis();
    d6d8:	0e 94 1d 85 	call	0x10a3a	; 0x10a3a <millis>
    d6dc:	2b 01       	movw	r4, r22
    d6de:	3c 01       	movw	r6, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3639
      while (a2d_run_now == 0 && millis() - milis < 10);
    d6e0:	80 91 d3 0a 	lds	r24, 0x0AD3	; 0x800ad3 <a2d_run_now>
    d6e4:	81 11       	cpse	r24, r1
    d6e6:	0b c0       	rjmp	.+22     	; 0xd6fe <setup+0x62a>
    d6e8:	0e 94 1d 85 	call	0x10a3a	; 0x10a3a <millis>
    d6ec:	64 19       	sub	r22, r4
    d6ee:	75 09       	sbc	r23, r5
    d6f0:	86 09       	sbc	r24, r6
    d6f2:	97 09       	sbc	r25, r7
    d6f4:	6a 30       	cpi	r22, 0x0A	; 10
    d6f6:	71 05       	cpc	r23, r1
    d6f8:	81 05       	cpc	r24, r1
    d6fa:	91 05       	cpc	r25, r1
    d6fc:	88 f3       	brcs	.-30     	; 0xd6e0 <setup+0x60c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3641
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
    d6fe:	10 92 d3 0a 	sts	0x0AD3, r1	; 0x800ad3 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3643
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
    d702:	4e 01       	movw	r8, r28
    d704:	ea ef       	ldi	r30, 0xFA	; 250
    d706:	8e 1a       	sub	r8, r30
    d708:	ee ef       	ldi	r30, 0xFE	; 254
    d70a:	9e 0a       	sbc	r9, r30
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3325
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
    d70c:	80 91 0d 0a 	lds	r24, 0x0A0D	; 0x800a0d <tritri>
    d710:	90 91 0e 0a 	lds	r25, 0x0A0E	; 0x800a0e <tritri+0x1>
    d714:	25 e0       	ldi	r18, 0x05	; 5
    d716:	28 9f       	mul	r18, r24
    d718:	b0 01       	movw	r22, r0
    d71a:	29 9f       	mul	r18, r25
    d71c:	70 0d       	add	r23, r0
    d71e:	11 24       	eor	r1, r1
    d720:	90 e0       	ldi	r25, 0x00	; 0
    d722:	80 e0       	ldi	r24, 0x00	; 0
    d724:	0e 94 6c ab 	call	0x156d8	; 0x156d8 <__floatunsisf>
    d728:	20 e0       	ldi	r18, 0x00	; 0
    d72a:	30 e0       	ldi	r19, 0x00	; 0
    d72c:	4a e7       	ldi	r20, 0x7A	; 122
    d72e:	54 e4       	ldi	r21, 0x44	; 68
    d730:	0e 94 a1 ad 	call	0x15b42	; 0x15b42 <__divsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3643
      milis = millis();
      while (a2d_run_now == 0 && millis() - milis < 10);
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
    d734:	84 01       	movw	r16, r8
    d736:	22 e0       	ldi	r18, 0x02	; 2
    d738:	44 e0       	ldi	r20, 0x04	; 4
    d73a:	0e 94 93 a1 	call	0x14326	; 0x14326 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3644
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
    d73e:	7e 01       	movw	r14, r28
    d740:	f2 ef       	ldi	r31, 0xF2	; 242
    d742:	ef 1a       	sub	r14, r31
    d744:	fe ef       	ldi	r31, 0xFE	; 254
    d746:	ff 0a       	sbc	r15, r31
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3325
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
    d748:	60 91 0b 0a 	lds	r22, 0x0A0B	; 0x800a0b <petnula>
    d74c:	70 91 0c 0a 	lds	r23, 0x0A0C	; 0x800a0c <petnula+0x1>
    d750:	13 e0       	ldi	r17, 0x03	; 3
    d752:	66 0f       	add	r22, r22
    d754:	77 1f       	adc	r23, r23
    d756:	1a 95       	dec	r17
    d758:	e1 f7       	brne	.-8      	; 0xd752 <setup+0x67e>
    d75a:	90 e0       	ldi	r25, 0x00	; 0
    d75c:	80 e0       	ldi	r24, 0x00	; 0
    d75e:	0e 94 6c ab 	call	0x156d8	; 0x156d8 <__floatunsisf>
    d762:	20 e0       	ldi	r18, 0x00	; 0
    d764:	30 e0       	ldi	r19, 0x00	; 0
    d766:	4a e7       	ldi	r20, 0x7A	; 122
    d768:	54 e4       	ldi	r21, 0x44	; 68
    d76a:	0e 94 a1 ad 	call	0x15b42	; 0x15b42 <__divsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3644
      while (a2d_run_now == 0 && millis() - milis < 10);
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
    d76e:	87 01       	movw	r16, r14
    d770:	22 e0       	ldi	r18, 0x02	; 2
    d772:	44 e0       	ldi	r20, 0x04	; 4
    d774:	0e 94 93 a1 	call	0x14326	; 0x14326 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3645
      dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, s_dvanact);
    d778:	3e 01       	movw	r6, r28
    d77a:	2a ee       	ldi	r18, 0xEA	; 234
    d77c:	62 1a       	sub	r6, r18
    d77e:	2e ef       	ldi	r18, 0xFE	; 254
    d780:	72 0a       	sbc	r7, r18
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3325
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
    d782:	80 91 09 0a 	lds	r24, 0x0A09	; 0x800a09 <dvanact>
    d786:	90 91 0a 0a 	lds	r25, 0x0A0A	; 0x800a0a <dvanact+0x1>
    d78a:	29 e3       	ldi	r18, 0x39	; 57
    d78c:	28 9f       	mul	r18, r24
    d78e:	b0 01       	movw	r22, r0
    d790:	29 9f       	mul	r18, r25
    d792:	70 0d       	add	r23, r0
    d794:	11 24       	eor	r1, r1
    d796:	90 e0       	ldi	r25, 0x00	; 0
    d798:	80 e0       	ldi	r24, 0x00	; 0
    d79a:	0e 94 6c ab 	call	0x156d8	; 0x156d8 <__floatunsisf>
    d79e:	20 e0       	ldi	r18, 0x00	; 0
    d7a0:	30 e0       	ldi	r19, 0x00	; 0
    d7a2:	4a e7       	ldi	r20, 0x7A	; 122
    d7a4:	54 e4       	ldi	r21, 0x44	; 68
    d7a6:	0e 94 a1 ad 	call	0x15b42	; 0x15b42 <__divsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3645
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
      dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, s_dvanact);
    d7aa:	83 01       	movw	r16, r6
    d7ac:	22 e0       	ldi	r18, 0x02	; 2
    d7ae:	44 e0       	ldi	r20, 0x04	; 4
    d7b0:	0e 94 93 a1 	call	0x14326	; 0x14326 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3646
      dtostrf(prepocet_proudu(proud), 4, 2, s_current);
    d7b4:	2e 01       	movw	r4, r28
    d7b6:	32 ee       	ldi	r19, 0xE2	; 226
    d7b8:	43 1a       	sub	r4, r19
    d7ba:	3e ef       	ldi	r19, 0xFE	; 254
    d7bc:	53 0a       	sbc	r5, r19
prepocet_proudu():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3340
*/
float prepocet_proudu(uint16_t vstup)
{
#define proud_constanta  470
  float proud = (vstup - proud_constanta) * 5 / 185;
  return vstup;
    d7be:	60 91 07 0a 	lds	r22, 0x0A07	; 0x800a07 <proud>
    d7c2:	70 91 08 0a 	lds	r23, 0x0A08	; 0x800a08 <proud+0x1>
    d7c6:	90 e0       	ldi	r25, 0x00	; 0
    d7c8:	80 e0       	ldi	r24, 0x00	; 0
    d7ca:	0e 94 6c ab 	call	0x156d8	; 0x156d8 <__floatunsisf>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3646
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
      dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, s_dvanact);
      dtostrf(prepocet_proudu(proud), 4, 2, s_current);
    d7ce:	82 01       	movw	r16, r4
    d7d0:	22 e0       	ldi	r18, 0x02	; 2
    d7d2:	44 e0       	ldi	r20, 0x04	; 4
    d7d4:	0e 94 93 a1 	call	0x14326	; 0x14326 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3647
      sprintf(str2, "3.3V=%s; 5.0V=%s; IN=%s; I=%s", s_tritri, s_petnula, s_dvanact, s_current);
    d7d8:	5f 92       	push	r5
    d7da:	4f 92       	push	r4
    d7dc:	7f 92       	push	r7
    d7de:	6f 92       	push	r6
    d7e0:	ff 92       	push	r15
    d7e2:	ef 92       	push	r14
    d7e4:	9f 92       	push	r9
    d7e6:	8f 92       	push	r8
    d7e8:	8c e9       	ldi	r24, 0x9C	; 156
    d7ea:	96 e0       	ldi	r25, 0x06	; 6
    d7ec:	9f 93       	push	r25
    d7ee:	8f 93       	push	r24
    d7f0:	4e 01       	movw	r8, r28
    d7f2:	88 e8       	ldi	r24, 0x88	; 136
    d7f4:	88 0e       	add	r8, r24
    d7f6:	91 1c       	adc	r9, r1
    d7f8:	9f 92       	push	r9
    d7fa:	8f 92       	push	r8
    d7fc:	0e 94 d3 af 	call	0x15fa6	; 0x15fa6 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3648
      show_string(str2, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    d800:	ee 24       	eor	r14, r14
    d802:	ea 94       	dec	r14
    d804:	fe 2c       	mov	r15, r14
    d806:	00 ee       	ldi	r16, 0xE0	; 224
    d808:	17 e0       	ldi	r17, 0x07	; 7
    d80a:	21 e0       	ldi	r18, 0x01	; 1
    d80c:	42 e3       	ldi	r20, 0x32	; 50
    d80e:	50 e0       	ldi	r21, 0x00	; 0
    d810:	60 ea       	ldi	r22, 0xA0	; 160
    d812:	70 e0       	ldi	r23, 0x00	; 0
    d814:	c4 01       	movw	r24, r8
    d816:	0e 94 37 7d 	call	0xfa6e	; 0xfa6e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]>
    d81a:	0f b6       	in	r0, 0x3f	; 63
    d81c:	f8 94       	cli
    d81e:	de bf       	out	0x3e, r29	; 62
    d820:	0f be       	out	0x3f, r0	; 63
    d822:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3938
      default_ring = get_default_ring();
      default_show_temp = get_default_show_temp();
    }
    ///
    /// kontrola NTP serveru
    if (init == 14)
    d824:	2e e0       	ldi	r18, 0x0E	; 14
    d826:	a2 12       	cpse	r10, r18
    d828:	0c 94 4a 74 	jmp	0xe894	; 0xe894 <setup+0x17c0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3940
    {
      strcpy_P(str1, text_ntp_cas);
    d82c:	62 e6       	ldi	r22, 0x62	; 98
    d82e:	7d e2       	ldi	r23, 0x2D	; 45
    d830:	c1 01       	movw	r24, r2
    d832:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3941
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    d836:	ee 24       	eor	r14, r14
    d838:	ea 94       	dec	r14
    d83a:	fe 2c       	mov	r15, r14
    d83c:	00 ee       	ldi	r16, 0xE0	; 224
    d83e:	17 e0       	ldi	r17, 0x07	; 7
    d840:	21 e0       	ldi	r18, 0x01	; 1
    d842:	4e eb       	ldi	r20, 0xBE	; 190
    d844:	50 e0       	ldi	r21, 0x00	; 0
    d846:	6e e1       	ldi	r22, 0x1E	; 30
    d848:	70 e0       	ldi	r23, 0x00	; 0
    d84a:	c1 01       	movw	r24, r2
    d84c:	0e 94 37 7d 	call	0xfa6e	; 0xfa6e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]>
ntp_check():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:421

uint8_t ntp_check(NTPClient *timeClient)
{
  char tmp1[20];
  uint8_t ret = 0;
  tmp1[0] = 0;
    d850:	c2 52       	subi	r28, 0x22	; 34
    d852:	df 4f       	sbci	r29, 0xFF	; 255
    d854:	18 82       	st	Y, r1
    d856:	ce 5d       	subi	r28, 0xDE	; 222
    d858:	d0 40       	sbci	r29, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:422
  createString(tmp1, '.', device.ntp_server, 4, 10);
    d85a:	0a e0       	ldi	r16, 0x0A	; 10
    d85c:	24 e0       	ldi	r18, 0x04	; 4
    d85e:	4d e6       	ldi	r20, 0x6D	; 109
    d860:	5c e0       	ldi	r21, 0x0C	; 12
    d862:	6e e2       	ldi	r22, 0x2E	; 46
    d864:	ce 01       	movw	r24, r28
    d866:	82 52       	subi	r24, 0x22	; 34
    d868:	9f 4f       	sbci	r25, 0xFF	; 255
    d86a:	0e 94 4b 8f 	call	0x11e96	; 0x11e96 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
begin():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:57
void NTPClient::begin() {
  this->begin(NTP_DEFAULT_LOCAL_PORT);
}

void NTPClient::begin(int port) {
  this->_port = port;
    d86e:	89 e3       	ldi	r24, 0x39	; 57
    d870:	95 e0       	ldi	r25, 0x05	; 5
    d872:	9f 83       	std	Y+7, r25	; 0x07
    d874:	8e 83       	std	Y+6, r24	; 0x06
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:59

  this->_udp->begin(this->_port);
    d876:	89 81       	ldd	r24, Y+1	; 0x01
    d878:	9a 81       	ldd	r25, Y+2	; 0x02
    d87a:	dc 01       	movw	r26, r24
    d87c:	ed 91       	ld	r30, X+
    d87e:	fc 91       	ld	r31, X
    d880:	06 84       	ldd	r0, Z+14	; 0x0e
    d882:	f7 85       	ldd	r31, Z+15	; 0x0f
    d884:	e0 2d       	mov	r30, r0
    d886:	69 e3       	ldi	r22, 0x39	; 57
    d888:	75 e0       	ldi	r23, 0x05	; 5
    d88a:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:61

  this->_udpSetup = true;
    d88c:	81 e0       	ldi	r24, 0x01	; 1
    d88e:	8b 83       	std	Y+3, r24	; 0x03
setTimeOffset():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:172

  this->_udpSetup = false;
}

void NTPClient::setTimeOffset(int timeOffset) {
  this->_timeOffset     = timeOffset;
    d890:	80 e1       	ldi	r24, 0x10	; 16
    d892:	9e e0       	ldi	r25, 0x0E	; 14
    d894:	a0 e0       	ldi	r26, 0x00	; 0
    d896:	b0 e0       	ldi	r27, 0x00	; 0
    d898:	88 87       	std	Y+8, r24	; 0x08
    d89a:	99 87       	std	Y+9, r25	; 0x09
    d89c:	aa 87       	std	Y+10, r26	; 0x0a
    d89e:	bb 87       	std	Y+11, r27	; 0x0b
setPoolServerName():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:180
void NTPClient::setUpdateInterval(unsigned long updateInterval) {
  this->_updateInterval = updateInterval;
}

void NTPClient::setPoolServerName(const char* poolServerName) {
    this->_poolServerName = poolServerName;
    d8a0:	ee ed       	ldi	r30, 0xDE	; 222
    d8a2:	f0 e0       	ldi	r31, 0x00	; 0
    d8a4:	ec 0f       	add	r30, r28
    d8a6:	fd 1f       	adc	r31, r29
    d8a8:	fd 83       	std	Y+5, r31	; 0x05
    d8aa:	ec 83       	std	Y+4, r30	; 0x04
setUpdateInterval():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:176
void NTPClient::setTimeOffset(int timeOffset) {
  this->_timeOffset     = timeOffset;
}

void NTPClient::setUpdateInterval(unsigned long updateInterval) {
  this->_updateInterval = updateInterval;
    d8ac:	81 e0       	ldi	r24, 0x01	; 1
    d8ae:	90 e0       	ldi	r25, 0x00	; 0
    d8b0:	a0 e0       	ldi	r26, 0x00	; 0
    d8b2:	b0 e0       	ldi	r27, 0x00	; 0
    d8b4:	8c 87       	std	Y+12, r24	; 0x0c
    d8b6:	9d 87       	std	Y+13, r25	; 0x0d
    d8b8:	ae 87       	std	Y+14, r26	; 0x0e
    d8ba:	bf 87       	std	Y+15, r27	; 0x0f
ntp_check():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:427
  timeClient->begin();
  timeClient->setTimeOffset(3600);
  timeClient->setPoolServerName(tmp1);
  timeClient->setUpdateInterval(1);
  if (timeClient->update() == true)
    d8bc:	ce 01       	movw	r24, r28
    d8be:	01 96       	adiw	r24, 0x01	; 1
    d8c0:	0e 94 a2 87 	call	0x10f44	; 0x10f44 <NTPClient::update()>
    d8c4:	18 2f       	mov	r17, r24
end():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:166

  return hoursStr + ":" + minuteStr + ":" + secondStr;
}

void NTPClient::end() {
  this->_udp->stop();
    d8c6:	89 81       	ldd	r24, Y+1	; 0x01
    d8c8:	9a 81       	ldd	r25, Y+2	; 0x02
    d8ca:	dc 01       	movw	r26, r24
    d8cc:	ed 91       	ld	r30, X+
    d8ce:	fc 91       	ld	r31, X
    d8d0:	02 88       	ldd	r0, Z+18	; 0x12
    d8d2:	f3 89       	ldd	r31, Z+19	; 0x13
    d8d4:	e0 2d       	mov	r30, r0
    d8d6:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:168

  this->_udpSetup = false;
    d8d8:	1b 82       	std	Y+3, r1	; 0x03
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3942
      if (ntp_check(&timeClient) == 0)
    d8da:	11 11       	cpse	r17, r1
    d8dc:	c5 c7       	rjmp	.+3978   	; 0xe868 <setup+0x1794>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3944
      {
        strcpy_P(str1, text_err);
    d8de:	6f e8       	ldi	r22, 0x8F	; 143
    d8e0:	7e e2       	ldi	r23, 0x2E	; 46
    d8e2:	c1 01       	movw	r24, r2
    d8e4:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3945
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
    d8e8:	00 e0       	ldi	r16, 0x00	; 0
    d8ea:	18 ef       	ldi	r17, 0xF8	; 248
    d8ec:	21 e0       	ldi	r18, 0x01	; 1
    d8ee:	4e eb       	ldi	r20, 0xBE	; 190
    d8f0:	50 e0       	ldi	r21, 0x00	; 0
    d8f2:	60 ea       	ldi	r22, 0xA0	; 160
    d8f4:	70 e0       	ldi	r23, 0x00	; 0
    d8f6:	c1 01       	movw	r24, r2
    d8f8:	0e 94 37 7d 	call	0xfa6e	; 0xfa6e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]>
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3281
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
    d8fc:	80 91 ce 0a 	lds	r24, 0x0ACE	; 0x800ace <selftest_data>
    d900:	82 60       	ori	r24, 0x02	; 2
    d902:	0c 94 e2 74 	jmp	0xe9c4	; 0xe9c4 <setup+0x18f0>
    d906:	e1 0e       	add	r14, r17
    d908:	f1 1c       	adc	r15, r1
init_table8():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:928
		{
            for (i = 0; i < len; i++)
            {
                dat[i] = pgm_read_byte(p++);
            }
			Push_Command(cmd,dat,len);
    d90a:	70 e0       	ldi	r23, 0x00	; 0
    d90c:	21 2f       	mov	r18, r17
    d90e:	8a eb       	ldi	r24, 0xBA	; 186
    d910:	9d e0       	ldi	r25, 0x0D	; 13
    d912:	0e 94 81 33 	call	0x6702	; 0x6702 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
    d916:	2c cd       	rjmp	.-1448   	; 0xd370 <setup+0x29c>
start():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:999
            	0x29, 0
			};
			init_table8(ST7796S_regValues, sizeof(ST7796S_regValues));
			break;
		default:
			lcd_driver = ID_UNKNOWN;
    d918:	8f ef       	ldi	r24, 0xFF	; 255
    d91a:	90 e0       	ldi	r25, 0x00	; 0
    d91c:	90 93 d3 0d 	sts	0x0DD3, r25	; 0x800dd3 <my_lcd+0x19>
    d920:	80 93 d2 0d 	sts	0x0DD2, r24	; 0x800dd2 <my_lcd+0x18>
    d924:	2e cd       	rjmp	.-1444   	; 0xd382 <setup+0x2ae>
Invert_Display():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:898
	uint8_t val = VL^i;
	if(lcd_driver == ID_932X)
	{
		writeCmdData8(0x61, val);
	}
	else if(lcd_driver == ID_7575)
    d926:	21 30       	cpi	r18, 0x01	; 1
    d928:	31 05       	cpc	r19, r1
    d92a:	31 f5       	brne	.+76     	; 0xd978 <setup+0x8a4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:900
	{
		writeCmdData8(0x01, val ? 8 : 10);
    d92c:	20 81       	ld	r18, Z
    d92e:	82 23       	and	r24, r18
    d930:	80 83       	st	Z, r24
    d932:	81 e0       	ldi	r24, 0x01	; 1
    d934:	82 b9       	out	0x02, r24	; 2
    d936:	e0 91 ec 0d 	lds	r30, 0x0DEC	; 0x800dec <my_lcd+0x32>
    d93a:	f0 91 ed 0d 	lds	r31, 0x0DED	; 0x800ded <my_lcd+0x33>
    d93e:	80 81       	ld	r24, Z
    d940:	20 91 f6 0d 	lds	r18, 0x0DF6	; 0x800df6 <my_lcd+0x3c>
    d944:	82 23       	and	r24, r18
    d946:	80 83       	st	Z, r24
    d948:	e0 91 ec 0d 	lds	r30, 0x0DEC	; 0x800dec <my_lcd+0x32>
    d94c:	f0 91 ed 0d 	lds	r31, 0x0DED	; 0x800ded <my_lcd+0x33>
    d950:	80 81       	ld	r24, Z
    d952:	20 91 f2 0d 	lds	r18, 0x0DF2	; 0x800df2 <my_lcd+0x38>
    d956:	82 2b       	or	r24, r18
    d958:	80 83       	st	Z, r24
    d95a:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x30>
    d95e:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x31>
    d962:	80 81       	ld	r24, Z
    d964:	20 91 f1 0d 	lds	r18, 0x0DF1	; 0x800df1 <my_lcd+0x37>
    d968:	82 2b       	or	r24, r18
    d96a:	80 83       	st	Z, r24
setup():
    d96c:	88 e0       	ldi	r24, 0x08	; 8
Invert_Display():
    d96e:	91 11       	cpse	r25, r1
    d970:	01 c0       	rjmp	.+2      	; 0xd974 <setup+0x8a0>
setup():
    d972:	8a e0       	ldi	r24, 0x0A	; 10
Invert_Display():
    d974:	82 b9       	out	0x02, r24	; 2
    d976:	43 cd       	rjmp	.-1402   	; 0xd3fe <setup+0x32a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:904
	}
	else
	{
		writeCmd8(val ? 0x21 : 0x20);
    d978:	20 81       	ld	r18, Z
    d97a:	82 23       	and	r24, r18
    d97c:	80 83       	st	Z, r24
setup():
    d97e:	81 e2       	ldi	r24, 0x21	; 33
Invert_Display():
    d980:	91 11       	cpse	r25, r1
    d982:	01 c0       	rjmp	.+2      	; 0xd986 <setup+0x8b2>
setup():
    d984:	80 e2       	ldi	r24, 0x20	; 32
Invert_Display():
    d986:	82 b9       	out	0x02, r24	; 2
    d988:	e0 91 ec 0d 	lds	r30, 0x0DEC	; 0x800dec <my_lcd+0x32>
    d98c:	f0 91 ed 0d 	lds	r31, 0x0DED	; 0x800ded <my_lcd+0x33>
    d990:	80 81       	ld	r24, Z
    d992:	90 91 f6 0d 	lds	r25, 0x0DF6	; 0x800df6 <my_lcd+0x3c>
    d996:	89 23       	and	r24, r25
    d998:	80 83       	st	Z, r24
    d99a:	e0 91 ec 0d 	lds	r30, 0x0DEC	; 0x800dec <my_lcd+0x32>
    d99e:	f0 91 ed 0d 	lds	r31, 0x0DED	; 0x800ded <my_lcd+0x33>
    d9a2:	80 81       	ld	r24, Z
    d9a4:	90 91 f2 0d 	lds	r25, 0x0DF2	; 0x800df2 <my_lcd+0x38>
    d9a8:	89 2b       	or	r24, r25
    d9aa:	80 83       	st	Z, r24
    d9ac:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x30>
    d9b0:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x31>
    d9b4:	80 81       	ld	r24, Z
    d9b6:	90 91 f1 0d 	lds	r25, 0x0DF1	; 0x800df1 <my_lcd+0x37>
    d9ba:	31 cd       	rjmp	.-1438   	; 0xd41e <setup+0x34a>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3652
      sprintf(str2, "3.3V=%s; 5.0V=%s; IN=%s; I=%s", s_tritri, s_petnula, s_dvanact, s_current);
      show_string(str2, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    }
    ///
    /// inicializace vnitrniho teplomeru LM75B
    if (init == 1)
    d9bc:	b1 e0       	ldi	r27, 0x01	; 1
    d9be:	ab 12       	cpse	r10, r27
    d9c0:	c3 c0       	rjmp	.+390    	; 0xdb48 <setup+0xa74>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3654
    {
      strcpy_P(str1, text_vnitrni_ochrany);
    d9c2:	6a e4       	ldi	r22, 0x4A	; 74
    d9c4:	7e e2       	ldi	r23, 0x2E	; 46
    d9c6:	c1 01       	movw	r24, r2
    d9c8:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3655
      strcat(str1, ":2");
    d9cc:	6a eb       	ldi	r22, 0xBA	; 186
    d9ce:	76 e0       	ldi	r23, 0x06	; 6
    d9d0:	c1 01       	movw	r24, r2
    d9d2:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3656
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    d9d6:	ee 24       	eor	r14, r14
    d9d8:	ea 94       	dec	r14
    d9da:	fe 2c       	mov	r15, r14
    d9dc:	00 ee       	ldi	r16, 0xE0	; 224
    d9de:	17 e0       	ldi	r17, 0x07	; 7
    d9e0:	21 e0       	ldi	r18, 0x01	; 1
    d9e2:	4c e3       	ldi	r20, 0x3C	; 60
    d9e4:	50 e0       	ldi	r21, 0x00	; 0
    d9e6:	6e e1       	ldi	r22, 0x1E	; 30
    d9e8:	70 e0       	ldi	r23, 0x00	; 0
    d9ea:	c1 01       	movw	r24, r2
    d9ec:	0e 94 37 7d 	call	0xfa6e	; 0xfa6e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]>
readTemperatureC():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:83
  inline int16_t convertFloatTemperature(float value) {
    return (int16_t)(value / temperature_frac_factor);
  }

  float readTemperatureC() {
    return convertIntegerTemperature(readIntegerTemperatureRegister(attributes->registers->temperature));
    d9f0:	e0 91 10 0e 	lds	r30, 0x0E10	; 0x800e10 <lm75_temp+0xb>
    d9f4:	f0 91 11 0e 	lds	r31, 0x0E11	; 0x800e11 <lm75_temp+0xc>
    d9f8:	04 80       	ldd	r0, Z+4	; 0x04
    d9fa:	f5 81       	ldd	r31, Z+5	; 0x05
    d9fc:	e0 2d       	mov	r30, r0
    d9fe:	10 81       	ld	r17, Z
readIntegerTemperatureRegister():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:53
  .registers                      = &LM75_Compatible_Registers,
};

int16_t Temperature_LM75_Derived::readIntegerTemperatureRegister(uint8_t register_index) {
  // Select the temperature register at register_index.
  bus->beginTransmission(i2c_address);
    da00:	80 91 07 0e 	lds	r24, 0x0E07	; 0x800e07 <lm75_temp+0x2>
    da04:	0e 94 16 7d 	call	0xfa2c	; 0xfa2c <TwoWire::beginTransmission(unsigned char) [clone .constprop.168]>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:54
  bus->write(register_index);
    da08:	80 91 05 0e 	lds	r24, 0x0E05	; 0x800e05 <lm75_temp>
    da0c:	90 91 06 0e 	lds	r25, 0x0E06	; 0x800e06 <lm75_temp+0x1>
    da10:	dc 01       	movw	r26, r24
    da12:	ed 91       	ld	r30, X+
    da14:	fc 91       	ld	r31, X
    da16:	01 90       	ld	r0, Z+
    da18:	f0 81       	ld	r31, Z
    da1a:	e0 2d       	mov	r30, r0
    da1c:	61 2f       	mov	r22, r17
    da1e:	19 95       	eicall
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:55
  bus->endTransmission();
    da20:	80 91 05 0e 	lds	r24, 0x0E05	; 0x800e05 <lm75_temp>
    da24:	90 91 06 0e 	lds	r25, 0x0E06	; 0x800e06 <lm75_temp+0x1>
    da28:	0e 94 91 89 	call	0x11322	; 0x11322 <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:58

  // Start a transaction to read the register data.
  bus->requestFrom(i2c_address, (uint8_t) (resolution <= 8 ? 1 : 2));
    da2c:	80 91 05 0e 	lds	r24, 0x0E05	; 0x800e05 <lm75_temp>
    da30:	90 91 06 0e 	lds	r25, 0x0E06	; 0x800e06 <lm75_temp+0x1>
    da34:	20 91 08 0e 	lds	r18, 0x0E08	; 0x800e08 <lm75_temp+0x3>
setup():
    da38:	41 e0       	ldi	r20, 0x01	; 1
readIntegerTemperatureRegister():
    da3a:	29 30       	cpi	r18, 0x09	; 9
    da3c:	08 f0       	brcs	.+2      	; 0xda40 <setup+0x96c>
setup():
    da3e:	42 e0       	ldi	r20, 0x02	; 2
readIntegerTemperatureRegister():
    da40:	60 91 07 0e 	lds	r22, 0x0E07	; 0x800e07 <lm75_temp+0x2>
    da44:	0e 94 12 8a 	call	0x11424	; 0x11424 <TwoWire::requestFrom(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:61

  // Read the most significant byte of the temperature data.
  uint16_t t = bus->read() << 8;
    da48:	80 91 05 0e 	lds	r24, 0x0E05	; 0x800e05 <lm75_temp>
    da4c:	90 91 06 0e 	lds	r25, 0x0E06	; 0x800e06 <lm75_temp+0x1>
    da50:	dc 01       	movw	r26, r24
    da52:	ed 91       	ld	r30, X+
    da54:	fc 91       	ld	r31, X
    da56:	02 84       	ldd	r0, Z+10	; 0x0a
    da58:	f3 85       	ldd	r31, Z+11	; 0x0b
    da5a:	e0 2d       	mov	r30, r0
    da5c:	19 95       	eicall
    da5e:	c1 5c       	subi	r28, 0xC1	; 193
    da60:	de 4f       	sbci	r29, 0xFE	; 254
    da62:	88 83       	st	Y, r24
    da64:	cf 53       	subi	r28, 0x3F	; 63
    da66:	d1 40       	sbci	r29, 0x01	; 1
    da68:	c2 5c       	subi	r28, 0xC2	; 194
    da6a:	de 4f       	sbci	r29, 0xFE	; 254
    da6c:	18 82       	st	Y, r1
    da6e:	ce 53       	subi	r28, 0x3E	; 62
    da70:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:64
  
  // Read the least significant byte of the temperature data, if requested.
  if (resolution > 8) {
    da72:	80 91 08 0e 	lds	r24, 0x0E08	; 0x800e08 <lm75_temp+0x3>
    da76:	89 30       	cpi	r24, 0x09	; 9
    da78:	c8 f0       	brcs	.+50     	; 0xdaac <setup+0x9d8>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:65
    t |= bus->read();
    da7a:	80 91 05 0e 	lds	r24, 0x0E05	; 0x800e05 <lm75_temp>
    da7e:	90 91 06 0e 	lds	r25, 0x0E06	; 0x800e06 <lm75_temp+0x1>
    da82:	dc 01       	movw	r26, r24
    da84:	ed 91       	ld	r30, X+
    da86:	fc 91       	ld	r31, X
    da88:	02 84       	ldd	r0, Z+10	; 0x0a
    da8a:	f3 85       	ldd	r31, Z+11	; 0x0b
    da8c:	e0 2d       	mov	r30, r0
    da8e:	19 95       	eicall
    da90:	c2 5c       	subi	r28, 0xC2	; 194
    da92:	de 4f       	sbci	r29, 0xFE	; 254
    da94:	e8 81       	ld	r30, Y
    da96:	f9 81       	ldd	r31, Y+1	; 0x01
    da98:	ce 53       	subi	r28, 0x3E	; 62
    da9a:	d1 40       	sbci	r29, 0x01	; 1
    da9c:	e8 2b       	or	r30, r24
    da9e:	f9 2b       	or	r31, r25
    daa0:	c2 5c       	subi	r28, 0xC2	; 194
    daa2:	de 4f       	sbci	r29, 0xFE	; 254
    daa4:	f9 83       	std	Y+1, r31	; 0x01
    daa6:	e8 83       	st	Y, r30
    daa8:	ce 53       	subi	r28, 0x3E	; 62
    daaa:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:69
  }

  // Finished reading the register data.
  bus->endTransmission();
    daac:	80 91 05 0e 	lds	r24, 0x0E05	; 0x800e05 <lm75_temp>
    dab0:	90 91 06 0e 	lds	r25, 0x0E06	; 0x800e06 <lm75_temp+0x1>
    dab4:	0e 94 91 89 	call	0x11322	; 0x11322 <TwoWire::endTransmission()>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3657
      dtostrf(lm75_temp.readTemperatureC(), 4, 2, s_current);
    dab8:	7e 01       	movw	r14, r28
    daba:	f2 ee       	ldi	r31, 0xE2	; 226
    dabc:	ef 1a       	sub	r14, r31
    dabe:	fe ef       	ldi	r31, 0xFE	; 254
    dac0:	ff 0a       	sbc	r15, r31
readIntegerTemperatureRegister():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:72

  // Mask out unused/reserved bit from the full 16-bit register.
  t &= resolution_mask;
    dac2:	60 91 09 0e 	lds	r22, 0x0E09	; 0x800e09 <lm75_temp+0x4>
    dac6:	70 91 0a 0e 	lds	r23, 0x0E0A	; 0x800e0a <lm75_temp+0x5>
    daca:	c2 5c       	subi	r28, 0xC2	; 194
    dacc:	de 4f       	sbci	r29, 0xFE	; 254
    dace:	28 81       	ld	r18, Y
    dad0:	39 81       	ldd	r19, Y+1	; 0x01
    dad2:	ce 53       	subi	r28, 0x3E	; 62
    dad4:	d1 40       	sbci	r29, 0x01	; 1
    dad6:	62 23       	and	r22, r18
    dad8:	73 23       	and	r23, r19
_ZN24Temperature_LM75_Derived25convertIntegerTemperatureEi():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:75
    setInternalResolution(attributes->default_temperature_resolution);
    setInternalTemperatureFracWidth(attributes->default_temperature_frac_width);
  }

  inline float convertIntegerTemperature(int16_t value) {
    return (float)value * temperature_frac_factor;
    dada:	07 2e       	mov	r0, r23
    dadc:	00 0c       	add	r0, r0
    dade:	88 0b       	sbc	r24, r24
    dae0:	99 0b       	sbc	r25, r25
    dae2:	0e 94 6e ab 	call	0x156dc	; 0x156dc <__floatsisf>
    dae6:	20 91 0c 0e 	lds	r18, 0x0E0C	; 0x800e0c <lm75_temp+0x7>
    daea:	30 91 0d 0e 	lds	r19, 0x0E0D	; 0x800e0d <lm75_temp+0x8>
    daee:	40 91 0e 0e 	lds	r20, 0x0E0E	; 0x800e0e <lm75_temp+0x9>
    daf2:	50 91 0f 0e 	lds	r21, 0x0E0F	; 0x800e0f <lm75_temp+0xa>
    daf6:	0e 94 cd ab 	call	0x1579a	; 0x1579a <__mulsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3657
    dafa:	87 01       	movw	r16, r14
    dafc:	22 e0       	ldi	r18, 0x02	; 2
    dafe:	44 e0       	ldi	r20, 0x04	; 4
    db00:	0e 94 93 a1 	call	0x14326	; 0x14326 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3658
      sprintf(str2, "iT=%sC", s_current);
    db04:	ff 92       	push	r15
    db06:	ef 92       	push	r14
    db08:	8d eb       	ldi	r24, 0xBD	; 189
    db0a:	96 e0       	ldi	r25, 0x06	; 6
    db0c:	9f 93       	push	r25
    db0e:	8f 93       	push	r24
    db10:	4e 01       	movw	r8, r28
    db12:	38 e8       	ldi	r19, 0x88	; 136
    db14:	83 0e       	add	r8, r19
    db16:	91 1c       	adc	r9, r1
    db18:	9f 92       	push	r9
    db1a:	8f 92       	push	r8
    db1c:	0e 94 d3 af 	call	0x15fa6	; 0x15fa6 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3659
      show_string(str2, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    db20:	ee 24       	eor	r14, r14
    db22:	ea 94       	dec	r14
    db24:	fe 2c       	mov	r15, r14
    db26:	00 ee       	ldi	r16, 0xE0	; 224
    db28:	17 e0       	ldi	r17, 0x07	; 7
    db2a:	21 e0       	ldi	r18, 0x01	; 1
    db2c:	4c e3       	ldi	r20, 0x3C	; 60
    db2e:	50 e0       	ldi	r21, 0x00	; 0
    db30:	60 ea       	ldi	r22, 0xA0	; 160
    db32:	70 e0       	ldi	r23, 0x00	; 0
    db34:	c4 01       	movw	r24, r8
    db36:	0e 94 37 7d 	call	0xfa6e	; 0xfa6e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]>
    db3a:	0f 90       	pop	r0
    db3c:	0f 90       	pop	r0
    db3e:	0f 90       	pop	r0
    db40:	0f 90       	pop	r0
    db42:	0f 90       	pop	r0
    db44:	0f 90       	pop	r0
    db46:	6e ce       	rjmp	.-804    	; 0xd824 <setup+0x750>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3663
    }
    ///
    //// nastaveni vychozich hodnot systemu
    if (init == 2)
    db48:	82 e0       	ldi	r24, 0x02	; 2
    db4a:	a8 12       	cpse	r10, r24
    db4c:	8c c1       	rjmp	.+792    	; 0xde66 <setup+0xd92>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3665
    {
      if (EEPROM.read(set_default_values) == 255)
    db4e:	8a e5       	ldi	r24, 0x5A	; 90
    db50:	90 e0       	ldi	r25, 0x00	; 0
    db52:	0e 94 49 8f 	call	0x11e92	; 0x11e92 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
    db56:	8f 3f       	cpi	r24, 0xFF	; 255
    db58:	09 f0       	breq	.+2      	; 0xdb5c <setup+0xa88>
    db5a:	74 c1       	rjmp	.+744    	; 0xde44 <setup+0xd70>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3667
      {
        EEPROM.write(set_default_values, 0);
    db5c:	60 e0       	ldi	r22, 0x00	; 0
    db5e:	8a e5       	ldi	r24, 0x5A	; 90
    db60:	90 e0       	ldi	r25, 0x00	; 0
    db62:	0e 94 47 8f 	call	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3668
        strcpy_P(str1, text_vychozi_nastaveni);
    db66:	68 e3       	ldi	r22, 0x38	; 56
    db68:	7e e2       	ldi	r23, 0x2E	; 46
    db6a:	8d 2d       	mov	r24, r13
    db6c:	9b 2d       	mov	r25, r11
    db6e:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3669
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    db72:	ee 24       	eor	r14, r14
    db74:	ea 94       	dec	r14
    db76:	fe 2c       	mov	r15, r14
    db78:	00 e0       	ldi	r16, 0x00	; 0
    db7a:	18 ef       	ldi	r17, 0xF8	; 248
    db7c:	21 e0       	ldi	r18, 0x01	; 1
    db7e:	46 e4       	ldi	r20, 0x46	; 70
    db80:	50 e0       	ldi	r21, 0x00	; 0
    db82:	6e e1       	ldi	r22, 0x1E	; 30
    db84:	70 e0       	ldi	r23, 0x00	; 0
    db86:	8d 2d       	mov	r24, r13
    db88:	9b 2d       	mov	r25, r11
    db8a:	0e 94 37 7d 	call	0xfa6e	; 0xfa6e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]>
set_default_show_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2180
}
//////////////////////////
/// funkce pro nastaveni vychoziho zobrazeni zdroje teploty
void set_default_show_temp(uint8_t default_temp)
{
  EEPROM.write(my_default_show_temp, default_temp);
    db8e:	6f ef       	ldi	r22, 0xFF	; 255
    db90:	8d e5       	ldi	r24, 0x5D	; 93
    db92:	90 e0       	ldi	r25, 0x00	; 0
    db94:	0e 94 47 8f 	call	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3674
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );

        set_default_show_temp(255);

        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
          thermostat_ring_clear(idx);
    db98:	80 e0       	ldi	r24, 0x00	; 0
    db9a:	0e 94 f1 4b 	call	0x97e2	; 0x97e2 <thermostat_ring_clear(unsigned char)>
    db9e:	81 e0       	ldi	r24, 0x01	; 1
    dba0:	0e 94 f1 4b 	call	0x97e2	; 0x97e2 <thermostat_ring_clear(unsigned char)>
    dba4:	82 e0       	ldi	r24, 0x02	; 2
    dba6:	0e 94 f1 4b 	call	0x97e2	; 0x97e2 <thermostat_ring_clear(unsigned char)>
    dbaa:	83 e0       	ldi	r24, 0x03	; 3
    dbac:	0e 94 f1 4b 	call	0x97e2	; 0x97e2 <thermostat_ring_clear(unsigned char)>
    dbb0:	84 e0       	ldi	r24, 0x04	; 4
    dbb2:	0e 94 f1 4b 	call	0x97e2	; 0x97e2 <thermostat_ring_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3676
        ///
        for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    dbb6:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3678
        {
          strcpy(tmp1, "");
    dbb8:	62 ef       	ldi	r22, 0xF2	; 242
    dbba:	72 e0       	ldi	r23, 0x02	; 2
    dbbc:	ce 01       	movw	r24, r28
    dbbe:	8e 50       	subi	r24, 0x0E	; 14
    dbc0:	9f 4f       	sbci	r25, 0xFF	; 255
    dbc2:	0e 94 70 af 	call	0x15ee0	; 0x15ee0 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3679
          remote_tds_clear(idx);
    dbc6:	81 2f       	mov	r24, r17
    dbc8:	0e 94 f3 4d 	call	0x9be6	; 0x9be6 <remote_tds_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3676
        set_default_show_temp(255);

        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
          thermostat_ring_clear(idx);
        ///
        for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    dbcc:	1f 5f       	subi	r17, 0xFF	; 255
    dbce:	1a 30       	cpi	r17, 0x0A	; 10
    dbd0:	99 f7       	brne	.-26     	; 0xdbb8 <setup+0xae4>
    dbd2:	e1 ef       	ldi	r30, 0xF1	; 241
    dbd4:	8e 2e       	mov	r8, r30
    dbd6:	99 24       	eor	r9, r9
    dbd8:	93 94       	inc	r9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3682
        {
          strcpy(tmp1, "");
          remote_tds_clear(idx);
        }
        ///
        for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
    dbda:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3684
        {
          strcpy(str2, "PROG");
    dbdc:	69 ec       	ldi	r22, 0xC9	; 201
    dbde:	74 e0       	ldi	r23, 0x04	; 4
    dbe0:	ce 01       	movw	r24, r28
    dbe2:	88 57       	subi	r24, 0x78	; 120
    dbe4:	9f 4f       	sbci	r25, 0xFF	; 255
    dbe6:	0e 94 70 af 	call	0x15ee0	; 0x15ee0 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3685
          thermostat_program_set_name(idx, str2);
    dbea:	be 01       	movw	r22, r28
    dbec:	68 57       	subi	r22, 0x78	; 120
    dbee:	7f 4f       	sbci	r23, 0xFF	; 255
    dbf0:	81 2f       	mov	r24, r17
    dbf2:	0e 94 47 4b 	call	0x968e	; 0x968e <thermostat_program_set_name(unsigned char, char*)>
thermostat_program_set_active():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:296
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active);
}
void thermostat_program_set_active(uint8_t program_id, uint8_t active)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active, active);
    dbf6:	60 e0       	ldi	r22, 0x00	; 0
    dbf8:	c4 01       	movw	r24, r8
    dbfa:	0e 94 47 8f 	call	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3687
          thermostat_program_set_active(idx, 0);
          for (uint8_t interval_id = 0; interval_id < MAX_PROGRAM_INTERVAL; interval_id++)
    dbfe:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3689
          {
            thermostat_program_set_time(idx, interval_id, 0, 0, 0, 0, 0);
    dc00:	c1 2c       	mov	r12, r1
    dc02:	e1 2c       	mov	r14, r1
    dc04:	00 e0       	ldi	r16, 0x00	; 0
    dc06:	20 e0       	ldi	r18, 0x00	; 0
    dc08:	40 e0       	ldi	r20, 0x00	; 0
    dc0a:	6f 2d       	mov	r22, r15
    dc0c:	81 2f       	mov	r24, r17
    dc0e:	0e 94 0b 4b 	call	0x9616	; 0x9616 <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3690
            thermostat_program_set_threshold(idx, interval_id, 220);
    dc12:	4c ed       	ldi	r20, 0xDC	; 220
    dc14:	50 e0       	ldi	r21, 0x00	; 0
    dc16:	6f 2d       	mov	r22, r15
    dc18:	81 2f       	mov	r24, r17
    dc1a:	0e 94 ef 4a 	call	0x95de	; 0x95de <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3691
            thermostat_program_set_week(idx, interval_id, 0);
    dc1e:	40 e0       	ldi	r20, 0x00	; 0
    dc20:	6f 2d       	mov	r22, r15
    dc22:	81 2f       	mov	r24, r17
    dc24:	0e 94 e1 4a 	call	0x95c2	; 0x95c2 <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3687
        for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
        {
          strcpy(str2, "PROG");
          thermostat_program_set_name(idx, str2);
          thermostat_program_set_active(idx, 0);
          for (uint8_t interval_id = 0; interval_id < MAX_PROGRAM_INTERVAL; interval_id++)
    dc28:	f3 94       	inc	r15
    dc2a:	9b e0       	ldi	r25, 0x0B	; 11
    dc2c:	f9 12       	cpse	r15, r25
    dc2e:	e8 cf       	rjmp	.-48     	; 0xdc00 <setup+0xb2c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3682
        {
          strcpy(tmp1, "");
          remote_tds_clear(idx);
        }
        ///
        for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
    dc30:	1f 5f       	subi	r17, 0xFF	; 255
    dc32:	ad e4       	ldi	r26, 0x4D	; 77
    dc34:	8a 0e       	add	r8, r26
    dc36:	91 1c       	adc	r9, r1
    dc38:	18 30       	cpi	r17, 0x08	; 8
    dc3a:	81 f6       	brne	.-96     	; 0xdbdc <setup+0xb08>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3702
          get_tds18s20(idx, &tds);
          strcpy(tds.name, "FREE");
          tds.used = 0;
          tds.offset = 0;
          tds.assigned_ds2482 = 0;
          tds.period = 10;
    dc3c:	7a e0       	ldi	r23, 0x0A	; 10
    dc3e:	f7 2e       	mov	r15, r23
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3703
          for (uint8_t m = 0; m < 8; m++) tds.rom[m] = 0xff;
    dc40:	1f ef       	ldi	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3697
          }
        }
        ///
        for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
        {
          get_tds18s20(idx, &tds);
    dc42:	be 01       	movw	r22, r28
    dc44:	68 53       	subi	r22, 0x38	; 56
    dc46:	7f 4f       	sbci	r23, 0xFF	; 255
    dc48:	80 2f       	mov	r24, r16
    dc4a:	0e 94 32 4e 	call	0x9c64	; 0x9c64 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3698
          strcpy(tds.name, "FREE");
    dc4e:	6f e5       	ldi	r22, 0x5F	; 95
    dc50:	73 e0       	ldi	r23, 0x03	; 3
    dc52:	c4 5b       	subi	r28, 0xB4	; 180
    dc54:	de 4f       	sbci	r29, 0xFE	; 254
    dc56:	88 81       	ld	r24, Y
    dc58:	99 81       	ldd	r25, Y+1	; 0x01
    dc5a:	cc 54       	subi	r28, 0x4C	; 76
    dc5c:	d1 40       	sbci	r29, 0x01	; 1
    dc5e:	0e 94 70 af 	call	0x15ee0	; 0x15ee0 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3699
          tds.used = 0;
    dc62:	c8 53       	subi	r28, 0x38	; 56
    dc64:	df 4f       	sbci	r29, 0xFF	; 255
    dc66:	18 82       	st	Y, r1
    dc68:	c8 5c       	subi	r28, 0xC8	; 200
    dc6a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3700
          tds.offset = 0;
    dc6c:	ce 52       	subi	r28, 0x2E	; 46
    dc6e:	df 4f       	sbci	r29, 0xFF	; 255
    dc70:	19 82       	std	Y+1, r1	; 0x01
    dc72:	18 82       	st	Y, r1
    dc74:	c2 5d       	subi	r28, 0xD2	; 210
    dc76:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3701
          tds.assigned_ds2482 = 0;
    dc78:	cf 52       	subi	r28, 0x2F	; 47
    dc7a:	df 4f       	sbci	r29, 0xFF	; 255
    dc7c:	18 82       	st	Y, r1
    dc7e:	c1 5d       	subi	r28, 0xD1	; 209
    dc80:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3702
          tds.period = 10;
    dc82:	c4 52       	subi	r28, 0x24	; 36
    dc84:	df 4f       	sbci	r29, 0xFF	; 255
    dc86:	f8 82       	st	Y, r15
    dc88:	cc 5d       	subi	r28, 0xDC	; 220
    dc8a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3703
          for (uint8_t m = 0; m < 8; m++) tds.rom[m] = 0xff;
    dc8c:	c7 53       	subi	r28, 0x37	; 55
    dc8e:	df 4f       	sbci	r29, 0xFF	; 255
    dc90:	18 83       	st	Y, r17
    dc92:	c9 5c       	subi	r28, 0xC9	; 201
    dc94:	d0 40       	sbci	r29, 0x00	; 0
    dc96:	c6 53       	subi	r28, 0x36	; 54
    dc98:	df 4f       	sbci	r29, 0xFF	; 255
    dc9a:	18 83       	st	Y, r17
    dc9c:	ca 5c       	subi	r28, 0xCA	; 202
    dc9e:	d0 40       	sbci	r29, 0x00	; 0
    dca0:	c5 53       	subi	r28, 0x35	; 53
    dca2:	df 4f       	sbci	r29, 0xFF	; 255
    dca4:	18 83       	st	Y, r17
    dca6:	cb 5c       	subi	r28, 0xCB	; 203
    dca8:	d0 40       	sbci	r29, 0x00	; 0
    dcaa:	c4 53       	subi	r28, 0x34	; 52
    dcac:	df 4f       	sbci	r29, 0xFF	; 255
    dcae:	18 83       	st	Y, r17
    dcb0:	cc 5c       	subi	r28, 0xCC	; 204
    dcb2:	d0 40       	sbci	r29, 0x00	; 0
    dcb4:	c3 53       	subi	r28, 0x33	; 51
    dcb6:	df 4f       	sbci	r29, 0xFF	; 255
    dcb8:	18 83       	st	Y, r17
    dcba:	cd 5c       	subi	r28, 0xCD	; 205
    dcbc:	d0 40       	sbci	r29, 0x00	; 0
    dcbe:	c2 53       	subi	r28, 0x32	; 50
    dcc0:	df 4f       	sbci	r29, 0xFF	; 255
    dcc2:	18 83       	st	Y, r17
    dcc4:	ce 5c       	subi	r28, 0xCE	; 206
    dcc6:	d0 40       	sbci	r29, 0x00	; 0
    dcc8:	c1 53       	subi	r28, 0x31	; 49
    dcca:	df 4f       	sbci	r29, 0xFF	; 255
    dccc:	18 83       	st	Y, r17
    dcce:	cf 5c       	subi	r28, 0xCF	; 207
    dcd0:	d0 40       	sbci	r29, 0x00	; 0
    dcd2:	c0 53       	subi	r28, 0x30	; 48
    dcd4:	df 4f       	sbci	r29, 0xFF	; 255
    dcd6:	18 83       	st	Y, r17
    dcd8:	c0 5d       	subi	r28, 0xD0	; 208
    dcda:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3704
          set_tds18s20(idx, &tds);
    dcdc:	be 01       	movw	r22, r28
    dcde:	68 53       	subi	r22, 0x38	; 56
    dce0:	7f 4f       	sbci	r23, 0xFF	; 255
    dce2:	80 2f       	mov	r24, r16
    dce4:	0e 94 8d 4c 	call	0x991a	; 0x991a <set_tds18s20(unsigned char, struct_DDS18s20*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3695
            thermostat_program_set_threshold(idx, interval_id, 220);
            thermostat_program_set_week(idx, interval_id, 0);
          }
        }
        ///
        for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    dce8:	0f 5f       	subi	r16, 0xFF	; 255
    dcea:	06 30       	cpi	r16, 0x06	; 6
    dcec:	09 f0       	breq	.+2      	; 0xdcf0 <setup+0xc1c>
    dcee:	a9 cf       	rjmp	.-174    	; 0xdc42 <setup+0xb6e>
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
    yOff = year;
    dcf0:	84 e1       	ldi	r24, 0x14	; 20
    dcf2:	c2 52       	subi	r28, 0x22	; 34
    dcf4:	df 4f       	sbci	r29, 0xFF	; 255
    dcf6:	88 83       	st	Y, r24
    dcf8:	ce 5d       	subi	r28, 0xDE	; 222
    dcfa:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:105
    m = month;
    dcfc:	8c e0       	ldi	r24, 0x0C	; 12
    dcfe:	c1 52       	subi	r28, 0x21	; 33
    dd00:	df 4f       	sbci	r29, 0xFF	; 255
    dd02:	88 83       	st	Y, r24
    dd04:	cf 5d       	subi	r28, 0xDF	; 223
    dd06:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:106
    d = day;
    dd08:	8e e0       	ldi	r24, 0x0E	; 14
    dd0a:	c0 52       	subi	r28, 0x20	; 32
    dd0c:	df 4f       	sbci	r29, 0xFF	; 255
    dd0e:	88 83       	st	Y, r24
    dd10:	c0 5e       	subi	r28, 0xE0	; 224
    dd12:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:107
    hh = hour;
    dd14:	91 e1       	ldi	r25, 0x11	; 17
    dd16:	cf 51       	subi	r28, 0x1F	; 31
    dd18:	df 4f       	sbci	r29, 0xFF	; 255
    dd1a:	98 83       	st	Y, r25
    dd1c:	c1 5e       	subi	r28, 0xE1	; 225
    dd1e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:108
    mm = min;
    dd20:	ce 51       	subi	r28, 0x1E	; 30
    dd22:	df 4f       	sbci	r29, 0xFF	; 255
    dd24:	88 83       	st	Y, r24
    dd26:	c2 5e       	subi	r28, 0xE2	; 226
    dd28:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:109
    ss = sec;
    dd2a:	cd 51       	subi	r28, 0x1D	; 29
    dd2c:	df 4f       	sbci	r29, 0xFF	; 255
    dd2e:	18 82       	st	Y, r1
    dd30:	c3 5e       	subi	r28, 0xE3	; 227
    dd32:	d0 40       	sbci	r29, 0x00	; 0
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3707
          tds.period = 10;
          for (uint8_t m = 0; m < 8; m++) tds.rom[m] = 0xff;
          set_tds18s20(idx, &tds);
        }

        rtc.adjust(DateTime(2020, 12, 14, 17, 14, 0));
    dd34:	ce 01       	movw	r24, r28
    dd36:	82 52       	subi	r24, 0x22	; 34
    dd38:	9f 4f       	sbci	r25, 0xFF	; 255
    dd3a:	0e 94 a7 8b 	call	0x1174e	; 0x1174e <RTC_DS1307::adjust(DateTime const&)>
time_set_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3352
  return EEPROM.read(time_offset);
}
/// time_set_offset - nastavi casovy offset letni/zimni
void time_set_offset(uint8_t offset)
{
  EEPROM.write(time_offset, offset);
    dd3e:	61 e0       	ldi	r22, 0x01	; 1
    dd40:	81 e0       	ldi	r24, 0x01	; 1
    dd42:	90 e0       	ldi	r25, 0x00	; 0
    dd44:	0e 94 47 8f 	call	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3710
        }

        rtc.adjust(DateTime(2020, 12, 14, 17, 14, 0));
        time_set_offset(1);
        /// pokus o vetsi random
        device.mac[0] = 2; device.mac[1] = 1; device.mac[2] = 2; device.mac[3] = dvanact >> 1; device.mac[4] = light_curr >> 1; device.mac[5] = proud >> 1;
    dd48:	82 e0       	ldi	r24, 0x02	; 2
    dd4a:	80 93 1f 0c 	sts	0x0C1F, r24	; 0x800c1f <device>
    dd4e:	91 e0       	ldi	r25, 0x01	; 1
    dd50:	90 93 20 0c 	sts	0x0C20, r25	; 0x800c20 <device+0x1>
    dd54:	80 93 21 0c 	sts	0x0C21, r24	; 0x800c21 <device+0x2>
    dd58:	20 91 09 0a 	lds	r18, 0x0A09	; 0x800a09 <dvanact>
    dd5c:	30 91 0a 0a 	lds	r19, 0x0A0A	; 0x800a0a <dvanact+0x1>
    dd60:	36 95       	lsr	r19
    dd62:	27 95       	ror	r18
    dd64:	20 93 22 0c 	sts	0x0C22, r18	; 0x800c22 <device+0x3>
    dd68:	20 91 d1 0a 	lds	r18, 0x0AD1	; 0x800ad1 <light_curr>
    dd6c:	30 91 d2 0a 	lds	r19, 0x0AD2	; 0x800ad2 <light_curr+0x1>
    dd70:	36 95       	lsr	r19
    dd72:	27 95       	ror	r18
    dd74:	20 93 23 0c 	sts	0x0C23, r18	; 0x800c23 <device+0x4>
    dd78:	20 91 07 0a 	lds	r18, 0x0A07	; 0x800a07 <proud>
    dd7c:	30 91 08 0a 	lds	r19, 0x0A08	; 0x800a08 <proud+0x1>
    dd80:	36 95       	lsr	r19
    dd82:	27 95       	ror	r18
    dd84:	20 93 24 0c 	sts	0x0C24, r18	; 0x800c24 <device+0x5>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3711
        device.myIP[0] = 192; device.myIP[1] = 168; device.myIP[2] = 2; device.myIP[3] = 110;
    dd88:	30 ec       	ldi	r19, 0xC0	; 192
    dd8a:	30 93 25 0c 	sts	0x0C25, r19	; 0x800c25 <device+0x6>
    dd8e:	28 ea       	ldi	r18, 0xA8	; 168
    dd90:	20 93 26 0c 	sts	0x0C26, r18	; 0x800c26 <device+0x7>
    dd94:	80 93 27 0c 	sts	0x0C27, r24	; 0x800c27 <device+0x8>
    dd98:	4e e6       	ldi	r20, 0x6E	; 110
    dd9a:	40 93 28 0c 	sts	0x0C28, r20	; 0x800c28 <device+0x9>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3712
        device.myMASK[0] = 255; device.myMASK[1] = 255; device.myMASK[2] = 255; device.myMASK[3] = 0;
    dd9e:	10 93 29 0c 	sts	0x0C29, r17	; 0x800c29 <device+0xa>
    dda2:	10 93 2a 0c 	sts	0x0C2A, r17	; 0x800c2a <device+0xb>
    dda6:	10 93 2b 0c 	sts	0x0C2B, r17	; 0x800c2b <device+0xc>
    ddaa:	10 92 2c 0c 	sts	0x0C2C, r1	; 0x800c2c <device+0xd>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3714

        device.myGW[0] = 192; device.myGW[1] = 168; device.myGW[2] = 2; device.myGW[3] = 1;
    ddae:	30 93 31 0c 	sts	0x0C31, r19	; 0x800c31 <device+0x12>
    ddb2:	20 93 32 0c 	sts	0x0C32, r18	; 0x800c32 <device+0x13>
    ddb6:	80 93 33 0c 	sts	0x0C33, r24	; 0x800c33 <device+0x14>
    ddba:	90 93 34 0c 	sts	0x0C34, r25	; 0x800c34 <device+0x15>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3715
        device.myDNS[0] = 192; device.myDNS[1] = 168; device.myDNS[2] = 2; device.myDNS[3] = 1;
    ddbe:	30 93 2d 0c 	sts	0x0C2D, r19	; 0x800c2d <device+0xe>
    ddc2:	20 93 2e 0c 	sts	0x0C2E, r18	; 0x800c2e <device+0xf>
    ddc6:	80 93 2f 0c 	sts	0x0C2F, r24	; 0x800c2f <device+0x10>
    ddca:	90 93 30 0c 	sts	0x0C30, r25	; 0x800c30 <device+0x11>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3716
        device.mqtt_server[0] = 192; device.mqtt_server[1] = 168; device.mqtt_server[2] = 2; device.mqtt_server[3] = 1;
    ddce:	30 93 3f 0c 	sts	0x0C3F, r19	; 0x800c3f <device+0x20>
    ddd2:	20 93 40 0c 	sts	0x0C40, r18	; 0x800c40 <device+0x21>
    ddd6:	80 93 41 0c 	sts	0x0C41, r24	; 0x800c41 <device+0x22>
    ddda:	90 93 42 0c 	sts	0x0C42, r25	; 0x800c42 <device+0x23>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3717
        device.ntp_server[0] = 192; device.ntp_server[1] = 168; device.ntp_server[2] = 2; device.ntp_server[3] = 1;
    ddde:	30 93 6d 0c 	sts	0x0C6D, r19	; 0x800c6d <device+0x4e>
    dde2:	20 93 6e 0c 	sts	0x0C6E, r18	; 0x800c6e <device+0x4f>
    dde6:	80 93 6f 0c 	sts	0x0C6F, r24	; 0x800c6f <device+0x50>
    ddea:	90 93 70 0c 	sts	0x0C70, r25	; 0x800c70 <device+0x51>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3718
        device.mqtt_port = 1883;
    ddee:	8b e5       	ldi	r24, 0x5B	; 91
    ddf0:	97 e0       	ldi	r25, 0x07	; 7
    ddf2:	90 93 44 0c 	sts	0x0C44, r25	; 0x800c44 <device+0x25>
    ddf6:	80 93 43 0c 	sts	0x0C43, r24	; 0x800c43 <device+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3719
        strcpy(device.mqtt_user, "saric");
    ddfa:	64 ec       	ldi	r22, 0xC4	; 196
    ddfc:	76 e0       	ldi	r23, 0x06	; 6
    ddfe:	85 e4       	ldi	r24, 0x45	; 69
    de00:	9c e0       	ldi	r25, 0x0C	; 12
    de02:	0e 94 70 af 	call	0x15ee0	; 0x15ee0 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3720
        strcpy(device.mqtt_key, "no");
    de06:	6a ec       	ldi	r22, 0xCA	; 202
    de08:	76 e0       	ldi	r23, 0x06	; 6
    de0a:	89 e5       	ldi	r24, 0x59	; 89
    de0c:	9c e0       	ldi	r25, 0x0C	; 12
    de0e:	0e 94 70 af 	call	0x15ee0	; 0x15ee0 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3721
        save_setup_network();
    de12:	0e 94 16 4d 	call	0x9a2c	; 0x9a2c <save_setup_network()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3722
        strcpy(str1, "TERM D1");
    de16:	6d ec       	ldi	r22, 0xCD	; 205
    de18:	76 e0       	ldi	r23, 0x06	; 6
    de1a:	8d 2d       	mov	r24, r13
    de1c:	9b 2d       	mov	r25, r11
    de1e:	0e 94 70 af 	call	0x15ee0	; 0x15ee0 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3723
        device_set_name(str1);
    de22:	8d 2d       	mov	r24, r13
    de24:	9b 2d       	mov	r25, r11
    de26:	0e 94 ee 4c 	call	0x99dc	; 0x99dc <device_set_name(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3725
        char hostname[10];
        device_get_name(hostname);
    de2a:	ce 01       	movw	r24, r28
    de2c:	82 52       	subi	r24, 0x22	; 34
    de2e:	9f 4f       	sbci	r25, 0xFF	; 255
    de30:	0e 94 f6 52 	call	0xa5ec	; 0xa5ec <device_get_name(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3726
        default_ring = 0;
    de34:	10 92 0f 0a 	sts	0x0A0F, r1	; 0x800a0f <default_ring>
set_default_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2165
/*
   ring - cislo aktivniho ringu
*/
void set_default_ring(uint8_t ring)
{
  EEPROM.write(my_default_ring, ring);
    de38:	60 e0       	ldi	r22, 0x00	; 0
    de3a:	8c e5       	ldi	r24, 0x5C	; 92
    de3c:	90 e0       	ldi	r25, 0x00	; 0
    de3e:	0e 94 47 8f 	call	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
    de42:	f0 cc       	rjmp	.-1568   	; 0xd824 <setup+0x750>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3731
        default_ring = 0;
        set_default_ring(default_ring);
      }
      else
      {
        strcpy_P(str1, text_bezny_start);
    de44:	6c e2       	ldi	r22, 0x2C	; 44
    de46:	7e e2       	ldi	r23, 0x2E	; 46
    de48:	8d 2d       	mov	r24, r13
    de4a:	9b 2d       	mov	r25, r11
    de4c:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3732
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    de50:	ee 24       	eor	r14, r14
    de52:	ea 94       	dec	r14
    de54:	fe 2c       	mov	r15, r14
    de56:	00 ee       	ldi	r16, 0xE0	; 224
    de58:	17 e0       	ldi	r17, 0x07	; 7
    de5a:	21 e0       	ldi	r18, 0x01	; 1
    de5c:	46 e4       	ldi	r20, 0x46	; 70
    de5e:	50 e0       	ldi	r21, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3765
      }
      else
      {
        strcpy_P(str1, text_test_ram);
        strcat_P(str1, text_err);
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    de60:	6e e1       	ldi	r22, 0x1E	; 30
    de62:	70 e0       	ldi	r23, 0x00	; 0
    de64:	5d c0       	rjmp	.+186    	; 0xdf20 <setup+0xe4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3737
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      }
    }
    ///
    /// test SRAM
    if (init == 3)
    de66:	b3 e0       	ldi	r27, 0x03	; 3
    de68:	ab 12       	cpse	r10, r27
    de6a:	72 c0       	rjmp	.+228    	; 0xdf50 <setup+0xe7c>
begin():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:50



void SRAM_23LC::begin(void)
{
  digitalWrite(_chipSelect, HIGH);
    de6c:	61 e0       	ldi	r22, 0x01	; 1
    de6e:	80 91 88 0c 	lds	r24, 0x0C88	; 0x800c88 <SRAM+0x8>
    de72:	0e 94 5c 82 	call	0x104b8	; 0x104b8 <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:51
  pinMode(_chipSelect, OUTPUT);
    de76:	61 e0       	ldi	r22, 0x01	; 1
    de78:	80 91 88 0c 	lds	r24, 0x0C88	; 0x800c88 <SRAM+0x8>
    de7c:	0e 94 b9 83 	call	0x10772	; 0x10772 <pinMode>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:53

  _spi->begin();
    de80:	80 91 80 0c 	lds	r24, 0x0C80	; 0x800c80 <SRAM>
    de84:	90 91 81 0c 	lds	r25, 0x0C81	; 0x800c81 <SRAM+0x1>
    de88:	0e 94 bf 23 	call	0x477e	; 0x477e <SoftSPIB::begin()>
startCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:125
}

void SRAM_23LC::startCommand(const uint8_t command, const uint32_t address)
{
  //_spi->beginTransaction(_spiSettings);
  digitalWrite(_chipSelect, LOW);
    de8c:	60 e0       	ldi	r22, 0x00	; 0
    de8e:	80 91 88 0c 	lds	r24, 0x0C88	; 0x800c88 <SRAM+0x8>
    de92:	0e 94 5c 82 	call	0x104b8	; 0x104b8 <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:127

  _spi->transfer(command);
    de96:	61 e0       	ldi	r22, 0x01	; 1
    de98:	80 91 80 0c 	lds	r24, 0x0C80	; 0x800c80 <SRAM>
    de9c:	90 91 81 0c 	lds	r25, 0x0C81	; 0x800c81 <SRAM+0x1>
    dea0:	0e 94 b8 32 	call	0x6570	; 0x6570 <SoftSPIB::transfer(unsigned char)>
begin():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:56
  pinMode(_chipSelect, OUTPUT);

  _spi->begin();

  startCommand(SRAM_23LC_COMMAND_WRMR, 0);
  _spi->transfer(SRAM_23LC_MODE_SEQUENTIAL);
    dea4:	60 e4       	ldi	r22, 0x40	; 64
    dea6:	80 91 80 0c 	lds	r24, 0x0C80	; 0x800c80 <SRAM>
    deaa:	90 91 81 0c 	lds	r25, 0x0C81	; 0x800c81 <SRAM+0x1>
    deae:	0e 94 b8 32 	call	0x6570	; 0x6570 <SoftSPIB::transfer(unsigned char)>
endCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:144
  _spi->transfer((uint8_t)(address & 0xFF));
}

void SRAM_23LC::endCommand(void)
{
  digitalWrite(_chipSelect, HIGH);
    deb2:	61 e0       	ldi	r22, 0x01	; 1
    deb4:	80 91 88 0c 	lds	r24, 0x0C88	; 0x800c88 <SRAM+0x8>
    deb8:	0e 94 5c 82 	call	0x104b8	; 0x104b8 <digitalWrite>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3740
    {
      SRAM.begin();
      SRAM.writeByte(0, 0xAB);
    debc:	4b ea       	ldi	r20, 0xAB	; 171
    debe:	60 e0       	ldi	r22, 0x00	; 0
    dec0:	70 e0       	ldi	r23, 0x00	; 0
    dec2:	cb 01       	movw	r24, r22
    dec4:	0e 94 8a 82 	call	0x10514	; 0x10514 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.181]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3741
      if (SRAM.readByte(0) == 0xAB)
    dec8:	60 e0       	ldi	r22, 0x00	; 0
    deca:	70 e0       	ldi	r23, 0x00	; 0
    decc:	cb 01       	movw	r24, r22
    dece:	0e 94 c6 82 	call	0x1058c	; 0x1058c <SRAM_23LC::readByte(unsigned long) [clone .constprop.179]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3743
      {
        strcpy_P(str1, text_test_ram);
    ded2:	6f e1       	ldi	r22, 0x1F	; 31
    ded4:	7e e2       	ldi	r23, 0x2E	; 46
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3741
    /// test SRAM
    if (init == 3)
    {
      SRAM.begin();
      SRAM.writeByte(0, 0xAB);
      if (SRAM.readByte(0) == 0xAB)
    ded6:	8b 3a       	cpi	r24, 0xAB	; 171
    ded8:	41 f5       	brne	.+80     	; 0xdf2a <setup+0xe56>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3743
      {
        strcpy_P(str1, text_test_ram);
    deda:	8d 2d       	mov	r24, r13
    dedc:	9b 2d       	mov	r25, r11
    dede:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3744
        strcat(str1, " init ...");
    dee2:	65 ed       	ldi	r22, 0xD5	; 213
    dee4:	76 e0       	ldi	r23, 0x06	; 6
    dee6:	8d 2d       	mov	r24, r13
    dee8:	9b 2d       	mov	r25, r11
    deea:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3745
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    deee:	ee 24       	eor	r14, r14
    def0:	ea 94       	dec	r14
    def2:	fe 2c       	mov	r15, r14
    def4:	00 ee       	ldi	r16, 0xE0	; 224
    def6:	17 e0       	ldi	r17, 0x07	; 7
    def8:	21 e0       	ldi	r18, 0x01	; 1
    defa:	40 e5       	ldi	r20, 0x50	; 80
    defc:	50 e0       	ldi	r21, 0x00	; 0
    defe:	6e e1       	ldi	r22, 0x1E	; 30
    df00:	70 e0       	ldi	r23, 0x00	; 0
    df02:	8d 2d       	mov	r24, r13
    df04:	9b 2d       	mov	r25, r11
    df06:	0e 94 37 7d 	call	0xfa6e	; 0xfa6e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3758
            sprintf(str1, "%d/2048", p);
            show_string(str1, 180, 50 + (init * 10), 1, GREEN, WHITE, 0 );
          }
          }
        */
        strcpy_P(str1, text_ok);
    df0a:	6c e1       	ldi	r22, 0x1C	; 28
    df0c:	7e e2       	ldi	r23, 0x2E	; 46
    df0e:	8d 2d       	mov	r24, r13
    df10:	9b 2d       	mov	r25, r11
    df12:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3759
        show_string(str1, 210, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    df16:	21 e0       	ldi	r18, 0x01	; 1
    df18:	40 e5       	ldi	r20, 0x50	; 80
    df1a:	50 e0       	ldi	r21, 0x00	; 0
    df1c:	62 ed       	ldi	r22, 0xD2	; 210
    df1e:	70 e0       	ldi	r23, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3765
      }
      else
      {
        strcpy_P(str1, text_test_ram);
        strcat_P(str1, text_err);
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    df20:	8d 2d       	mov	r24, r13
    df22:	9b 2d       	mov	r25, r11
    df24:	0e 94 37 7d 	call	0xfa6e	; 0xfa6e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]>
    df28:	7d cc       	rjmp	.-1798   	; 0xd824 <setup+0x750>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3763
        strcpy_P(str1, text_ok);
        show_string(str1, 210, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_test_ram);
    df2a:	8d 2d       	mov	r24, r13
    df2c:	9b 2d       	mov	r25, r11
    df2e:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3764
        strcat_P(str1, text_err);
    df32:	6f e8       	ldi	r22, 0x8F	; 143
    df34:	7e e2       	ldi	r23, 0x2E	; 46
    df36:	8d 2d       	mov	r24, r13
    df38:	9b 2d       	mov	r25, r11
    df3a:	0e 94 df a2 	call	0x145be	; 0x145be <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3765
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    df3e:	ee 24       	eor	r14, r14
    df40:	ea 94       	dec	r14
    df42:	fe 2c       	mov	r15, r14
    df44:	00 e0       	ldi	r16, 0x00	; 0
    df46:	18 ef       	ldi	r17, 0xF8	; 248
    df48:	21 e0       	ldi	r18, 0x01	; 1
    df4a:	40 e5       	ldi	r20, 0x50	; 80
    df4c:	50 e0       	ldi	r21, 0x00	; 0
    df4e:	88 cf       	rjmp	.-240    	; 0xde60 <setup+0xd8c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3770
      }
    }

    //// init EEPROMKY
    if (init == 4)
    df50:	e4 e0       	ldi	r30, 0x04	; 4
    df52:	ae 12       	cpse	r10, r30
    df54:	e5 c4       	rjmp	.+2506   	; 0xe920 <setup+0x184c>
begin():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:31
}


void EEPROM_CAT25::begin(void)
{
  digitalWrite(_chipSelect, HIGH);
    df56:	61 e0       	ldi	r22, 0x01	; 1
    df58:	80 91 7b 0c 	lds	r24, 0x0C7B	; 0x800c7b <SROM+0xa>
    df5c:	0e 94 5c 82 	call	0x104b8	; 0x104b8 <digitalWrite>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:32
  pinMode(_chipSelect, OUTPUT);
    df60:	61 e0       	ldi	r22, 0x01	; 1
    df62:	80 91 7b 0c 	lds	r24, 0x0C7B	; 0x800c7b <SROM+0xa>
    df66:	0e 94 b9 83 	call	0x10772	; 0x10772 <pinMode>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:34

  _spi->begin();
    df6a:	80 91 71 0c 	lds	r24, 0x0C71	; 0x800c71 <SROM>
    df6e:	90 91 72 0c 	lds	r25, 0x0C72	; 0x800c72 <SROM+0x1>
    df72:	0e 94 bf 23 	call	0x477e	; 0x477e <SoftSPIB::begin()>
writeByte():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:90
}

size_t EEPROM_CAT25::writeByte(const uint32_t address, const uint8_t byte)
{

  if (address >= _capacity) {
    df76:	80 91 75 0c 	lds	r24, 0x0C75	; 0x800c75 <SROM+0x4>
    df7a:	90 91 76 0c 	lds	r25, 0x0C76	; 0x800c76 <SROM+0x5>
    df7e:	a0 91 77 0c 	lds	r26, 0x0C77	; 0x800c77 <SROM+0x6>
    df82:	b0 91 78 0c 	lds	r27, 0x0C78	; 0x800c78 <SROM+0x7>
    df86:	89 2b       	or	r24, r25
    df88:	8a 2b       	or	r24, r26
    df8a:	8b 2b       	or	r24, r27
    df8c:	a9 f0       	breq	.+42     	; 0xdfb8 <setup+0xee4>
isReady():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:52
  return(ret);
}

bool EEPROM_CAT25::isReady(void)
{
  if ((getStatusRegister() & EEPROM_CAT25_RDY_Msk) == EEPROM_CAT25_RDY_BUSY) {
    df8e:	0e 94 4b 83 	call	0x10696	; 0x10696 <EEPROM_CAT25::getStatusRegister() [clone .constprop.88]>
    df92:	80 fd       	sbrc	r24, 0
    df94:	fc cf       	rjmp	.-8      	; 0xdf8e <setup+0xeba>
enableWrite():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:60
  return(true);
}

void EEPROM_CAT25::enableWrite(void)
{
  startCommand(EEPROM_CAT25_COMMAND_WREN, 0);
    df96:	86 e0       	ldi	r24, 0x06	; 6
    df98:	0e 94 03 83 	call	0x10606	; 0x10606 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.89]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:61
  endCommand();
    df9c:	0e 94 fe 82 	call	0x105fc	; 0x105fc <EEPROM_CAT25::endCommand() [clone .constprop.91]>
writeByte():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:100
  while (!isReady()) {
    yield();
  }

  enableWrite();
  startCommand(EEPROM_CAT25_COMMAND_WRITE, address);
    dfa0:	82 e0       	ldi	r24, 0x02	; 2
    dfa2:	0e 94 03 83 	call	0x10606	; 0x10606 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.89]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:101
  _spi->transfer(byte);
    dfa6:	6a eb       	ldi	r22, 0xBA	; 186
    dfa8:	80 91 71 0c 	lds	r24, 0x0C71	; 0x800c71 <SROM>
    dfac:	90 91 72 0c 	lds	r25, 0x0C72	; 0x800c72 <SROM+0x1>
    dfb0:	0e 94 b8 32 	call	0x6570	; 0x6570 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:102
  endCommand();
    dfb4:	0e 94 fe 82 	call	0x105fc	; 0x105fc <EEPROM_CAT25::endCommand() [clone .constprop.91]>
readByte():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:72
  endCommand();
}

uint8_t EEPROM_CAT25::readByte(const uint32_t address)
{
  if (address >= _capacity) {
    dfb8:	80 91 75 0c 	lds	r24, 0x0C75	; 0x800c75 <SROM+0x4>
    dfbc:	90 91 76 0c 	lds	r25, 0x0C76	; 0x800c76 <SROM+0x5>
    dfc0:	a0 91 77 0c 	lds	r26, 0x0C77	; 0x800c77 <SROM+0x6>
    dfc4:	b0 91 78 0c 	lds	r27, 0x0C78	; 0x800c78 <SROM+0x7>
    dfc8:	89 2b       	or	r24, r25
    dfca:	8a 2b       	or	r24, r26
    dfcc:	8b 2b       	or	r24, r27
    dfce:	71 f1       	breq	.+92     	; 0xe02c <setup+0xf58>
isReady():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:52
  return(ret);
}

bool EEPROM_CAT25::isReady(void)
{
  if ((getStatusRegister() & EEPROM_CAT25_RDY_Msk) == EEPROM_CAT25_RDY_BUSY) {
    dfd0:	0e 94 4b 83 	call	0x10696	; 0x10696 <EEPROM_CAT25::getStatusRegister() [clone .constprop.88]>
    dfd4:	80 fd       	sbrc	r24, 0
    dfd6:	fc cf       	rjmp	.-8      	; 0xdfd0 <setup+0xefc>
readByte():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:80

  while (!isReady()) {
    yield();
  }

  startCommand(EEPROM_CAT25_COMMAND_READ, address);
    dfd8:	83 e0       	ldi	r24, 0x03	; 3
    dfda:	0e 94 03 83 	call	0x10606	; 0x10606 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.89]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:81
  uint8_t ret = _spi->transfer(EEPROM_CAT25_DUMMY_BYTE);
    dfde:	6f ef       	ldi	r22, 0xFF	; 255
    dfe0:	80 91 71 0c 	lds	r24, 0x0C71	; 0x800c71 <SROM>
    dfe4:	90 91 72 0c 	lds	r25, 0x0C72	; 0x800c72 <SROM+0x1>
    dfe8:	0e 94 b8 32 	call	0x6570	; 0x6570 <SoftSPIB::transfer(unsigned char)>
    dfec:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:82
  endCommand();
    dfee:	0e 94 fe 82 	call	0x105fc	; 0x105fc <EEPROM_CAT25::endCommand() [clone .constprop.91]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3774
    {
      SROM.begin();
      SROM.writeByte(0, 0xBA);
      if (SROM.readByte(0) == 0xBA)
    dff2:	1a 3b       	cpi	r17, 0xBA	; 186
    dff4:	d9 f4       	brne	.+54     	; 0xe02c <setup+0xf58>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3777

      {
        strcpy_P(str1, text_test_eeprom);
    dff6:	6c e0       	ldi	r22, 0x0C	; 12
    dff8:	7e e2       	ldi	r23, 0x2E	; 46
    dffa:	8d 2d       	mov	r24, r13
    dffc:	9b 2d       	mov	r25, r11
    dffe:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3778
        strcat_P(str1, text_ok);
    e002:	6c e1       	ldi	r22, 0x1C	; 28
    e004:	7e e2       	ldi	r23, 0x2E	; 46
    e006:	8d 2d       	mov	r24, r13
    e008:	9b 2d       	mov	r25, r11
    e00a:	0e 94 df a2 	call	0x145be	; 0x145be <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3779
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    e00e:	ee 24       	eor	r14, r14
    e010:	ea 94       	dec	r14
    e012:	fe 2c       	mov	r15, r14
    e014:	00 ee       	ldi	r16, 0xE0	; 224
    e016:	17 e0       	ldi	r17, 0x07	; 7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3785
      }
      else
      {
        strcpy_P(str1, text_test_eeprom);
        strcat_P(str1, text_err);
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    e018:	21 e0       	ldi	r18, 0x01	; 1
    e01a:	4a e5       	ldi	r20, 0x5A	; 90
    e01c:	50 e0       	ldi	r21, 0x00	; 0
    e01e:	6e e1       	ldi	r22, 0x1E	; 30
    e020:	70 e0       	ldi	r23, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3900
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_ok);
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    e022:	8d 2d       	mov	r24, r13
    e024:	9b 2d       	mov	r25, r11
    e026:	0e 94 37 7d 	call	0xfa6e	; 0xfa6e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]>
    e02a:	fc c0       	rjmp	.+504    	; 0xe224 <setup+0x1150>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3783
        strcat_P(str1, text_ok);
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_test_eeprom);
    e02c:	6c e0       	ldi	r22, 0x0C	; 12
    e02e:	7e e2       	ldi	r23, 0x2E	; 46
    e030:	8d 2d       	mov	r24, r13
    e032:	9b 2d       	mov	r25, r11
    e034:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3784
        strcat_P(str1, text_err);
    e038:	6f e8       	ldi	r22, 0x8F	; 143
    e03a:	7e e2       	ldi	r23, 0x2E	; 46
    e03c:	8d 2d       	mov	r24, r13
    e03e:	9b 2d       	mov	r25, r11
    e040:	0e 94 df a2 	call	0x145be	; 0x145be <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3785
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    e044:	ee 24       	eor	r14, r14
    e046:	ea 94       	dec	r14
    e048:	fe 2c       	mov	r15, r14
    e04a:	00 e0       	ldi	r16, 0x00	; 0
    e04c:	18 ef       	ldi	r17, 0xF8	; 248
    e04e:	e4 cf       	rjmp	.-56     	; 0xe018 <setup+0xf44>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3792
    }

    ///  nacteni provoznich parametru
    if (init == 5)
    {
      strcpy_P(str1, text_nastaveni_systemu);
    e050:	6a ef       	ldi	r22, 0xFA	; 250
    e052:	7d e2       	ldi	r23, 0x2D	; 45
    e054:	8d 2d       	mov	r24, r13
    e056:	9b 2d       	mov	r25, r11
    e058:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3793
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    e05c:	ee 24       	eor	r14, r14
    e05e:	ea 94       	dec	r14
    e060:	fe 2c       	mov	r15, r14
    e062:	00 ee       	ldi	r16, 0xE0	; 224
    e064:	17 e0       	ldi	r17, 0x07	; 7
    e066:	21 e0       	ldi	r18, 0x01	; 1
    e068:	44 e6       	ldi	r20, 0x64	; 100
    e06a:	50 e0       	ldi	r21, 0x00	; 0
    e06c:	6e e1       	ldi	r22, 0x1E	; 30
    e06e:	70 e0       	ldi	r23, 0x00	; 0
    e070:	8d 2d       	mov	r24, r13
    e072:	9b 2d       	mov	r25, r11
    e074:	0e 94 37 7d 	call	0xfa6e	; 0xfa6e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]>
    e078:	af e1       	ldi	r26, 0x1F	; 31
    e07a:	ea 2e       	mov	r14, r26
    e07c:	ac e0       	ldi	r26, 0x0C	; 12
    e07e:	fa 2e       	mov	r15, r26
    e080:	0e e6       	ldi	r16, 0x6E	; 110
    e082:	10 e0       	ldi	r17, 0x00	; 0
load_setup_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:25

///////////////////////////////////////// MQTT network funkce //////////////////////////////////////////////////////
//
void load_setup_network(void)
{
  for (uint8_t m = 0; m < 6; m++) device.mac[m] = EEPROM.read(device_mac + m);
    e084:	c8 01       	movw	r24, r16
    e086:	0e 94 49 8f 	call	0x11e92	; 0x11e92 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
    e08a:	d7 01       	movw	r26, r14
    e08c:	8d 93       	st	X+, r24
    e08e:	7d 01       	movw	r14, r26
    e090:	0f 5f       	subi	r16, 0xFF	; 255
    e092:	1f 4f       	sbci	r17, 0xFF	; 255
    e094:	04 37       	cpi	r16, 0x74	; 116
    e096:	11 05       	cpc	r17, r1
    e098:	a9 f7       	brne	.-22     	; 0xe084 <setup+0xfb0>
    e09a:	e5 e2       	ldi	r30, 0x25	; 37
    e09c:	ee 2e       	mov	r14, r30
    e09e:	ec e0       	ldi	r30, 0x0C	; 12
    e0a0:	fe 2e       	mov	r15, r30
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:26
  for (uint8_t m = 0; m < 4; m++) device.myIP[m] = EEPROM.read(device_ip + m);
    e0a2:	c8 01       	movw	r24, r16
    e0a4:	0e 94 49 8f 	call	0x11e92	; 0x11e92 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
    e0a8:	f7 01       	movw	r30, r14
    e0aa:	81 93       	st	Z+, r24
    e0ac:	7f 01       	movw	r14, r30
    e0ae:	0f 5f       	subi	r16, 0xFF	; 255
    e0b0:	1f 4f       	sbci	r17, 0xFF	; 255
    e0b2:	08 37       	cpi	r16, 0x78	; 120
    e0b4:	11 05       	cpc	r17, r1
    e0b6:	a9 f7       	brne	.-22     	; 0xe0a2 <setup+0xfce>
    e0b8:	79 e2       	ldi	r23, 0x29	; 41
    e0ba:	e7 2e       	mov	r14, r23
    e0bc:	7c e0       	ldi	r23, 0x0C	; 12
    e0be:	f7 2e       	mov	r15, r23
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:27
  for (uint8_t m = 0; m < 4; m++) device.myMASK[m] = EEPROM.read(device_mask + m);
    e0c0:	c8 01       	movw	r24, r16
    e0c2:	0e 94 49 8f 	call	0x11e92	; 0x11e92 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
    e0c6:	d7 01       	movw	r26, r14
    e0c8:	8d 93       	st	X+, r24
    e0ca:	7d 01       	movw	r14, r26
    e0cc:	0f 5f       	subi	r16, 0xFF	; 255
    e0ce:	1f 4f       	sbci	r17, 0xFF	; 255
    e0d0:	0c 37       	cpi	r16, 0x7C	; 124
    e0d2:	11 05       	cpc	r17, r1
    e0d4:	a9 f7       	brne	.-22     	; 0xe0c0 <setup+0xfec>
    e0d6:	51 e3       	ldi	r21, 0x31	; 49
    e0d8:	85 2e       	mov	r8, r21
    e0da:	5c e0       	ldi	r21, 0x0C	; 12
    e0dc:	95 2e       	mov	r9, r21
    e0de:	60 e8       	ldi	r22, 0x80	; 128
    e0e0:	e6 2e       	mov	r14, r22
    e0e2:	f1 2c       	mov	r15, r1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:28
  for (uint8_t m = 0; m < 4; m++) device.myGW[m] = EEPROM.read(device_gw + m);
    e0e4:	c7 01       	movw	r24, r14
    e0e6:	0e 94 49 8f 	call	0x11e92	; 0x11e92 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
    e0ea:	f4 01       	movw	r30, r8
    e0ec:	81 93       	st	Z+, r24
    e0ee:	4f 01       	movw	r8, r30
    e0f0:	ff ef       	ldi	r31, 0xFF	; 255
    e0f2:	ef 1a       	sub	r14, r31
    e0f4:	ff 0a       	sbc	r15, r31
    e0f6:	24 e8       	ldi	r18, 0x84	; 132
    e0f8:	e2 16       	cp	r14, r18
    e0fa:	f1 04       	cpc	r15, r1
    e0fc:	99 f7       	brne	.-26     	; 0xe0e4 <setup+0x1010>
    e0fe:	4d e2       	ldi	r20, 0x2D	; 45
    e100:	84 2e       	mov	r8, r20
    e102:	4c e0       	ldi	r20, 0x0C	; 12
    e104:	94 2e       	mov	r9, r20
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:29
  for (uint8_t m = 0; m < 4; m++) device.myDNS[m] = EEPROM.read(device_dns + m);
    e106:	c8 01       	movw	r24, r16
    e108:	0e 94 49 8f 	call	0x11e92	; 0x11e92 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
    e10c:	d4 01       	movw	r26, r8
    e10e:	8d 93       	st	X+, r24
    e110:	4d 01       	movw	r8, r26
    e112:	0f 5f       	subi	r16, 0xFF	; 255
    e114:	1f 4f       	sbci	r17, 0xFF	; 255
    e116:	00 38       	cpi	r16, 0x80	; 128
    e118:	11 05       	cpc	r17, r1
    e11a:	a9 f7       	brne	.-22     	; 0xe106 <setup+0x1032>
    e11c:	35 e3       	ldi	r19, 0x35	; 53
    e11e:	83 2e       	mov	r8, r19
    e120:	3c e0       	ldi	r19, 0x0C	; 12
    e122:	93 2e       	mov	r9, r19
    e124:	04 e6       	ldi	r16, 0x64	; 100
    e126:	10 e0       	ldi	r17, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:30
  for (uint8_t m = 0; m < 9; m++) device.nazev[m] = EEPROM.read(device_nazev + m);
    e128:	c8 01       	movw	r24, r16
    e12a:	0e 94 49 8f 	call	0x11e92	; 0x11e92 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
    e12e:	f4 01       	movw	r30, r8
    e130:	81 93       	st	Z+, r24
    e132:	4f 01       	movw	r8, r30
    e134:	0f 5f       	subi	r16, 0xFF	; 255
    e136:	1f 4f       	sbci	r17, 0xFF	; 255
    e138:	0d 36       	cpi	r16, 0x6D	; 109
    e13a:	11 05       	cpc	r17, r1
    e13c:	a9 f7       	brne	.-22     	; 0xe128 <setup+0x1054>
    e13e:	0f e3       	ldi	r16, 0x3F	; 63
    e140:	1c e0       	ldi	r17, 0x0C	; 12
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:31
  for (uint8_t m = 0; m < 4; m++) device.mqtt_server[m] = EEPROM.read(device_mqtt_server + m);
    e142:	c7 01       	movw	r24, r14
    e144:	0e 94 49 8f 	call	0x11e92	; 0x11e92 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
    e148:	d8 01       	movw	r26, r16
    e14a:	8d 93       	st	X+, r24
    e14c:	8d 01       	movw	r16, r26
    e14e:	bf ef       	ldi	r27, 0xFF	; 255
    e150:	eb 1a       	sub	r14, r27
    e152:	fb 0a       	sbc	r15, r27
    e154:	e8 e8       	ldi	r30, 0x88	; 136
    e156:	ee 16       	cp	r14, r30
    e158:	f1 04       	cpc	r15, r1
    e15a:	99 f7       	brne	.-26     	; 0xe142 <setup+0x106e>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:32
  device.mqtt_port = (EEPROM.read(device_mqtt_port) << 8) + EEPROM.read(device_mqtt_port + 1);
    e15c:	88 e8       	ldi	r24, 0x88	; 136
    e15e:	90 e0       	ldi	r25, 0x00	; 0
    e160:	0e 94 49 8f 	call	0x11e92	; 0x11e92 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
    e164:	18 2f       	mov	r17, r24
    e166:	89 e8       	ldi	r24, 0x89	; 137
    e168:	90 e0       	ldi	r25, 0x00	; 0
    e16a:	0e 94 49 8f 	call	0x11e92	; 0x11e92 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
    e16e:	21 2f       	mov	r18, r17
    e170:	30 e0       	ldi	r19, 0x00	; 0
    e172:	32 2f       	mov	r19, r18
    e174:	22 27       	eor	r18, r18
    e176:	82 0f       	add	r24, r18
    e178:	93 2f       	mov	r25, r19
    e17a:	91 1d       	adc	r25, r1
    e17c:	90 93 44 0c 	sts	0x0C44, r25	; 0x800c44 <device+0x25>
    e180:	80 93 43 0c 	sts	0x0C43, r24	; 0x800c43 <device+0x24>
    e184:	25 e4       	ldi	r18, 0x45	; 69
    e186:	e2 2e       	mov	r14, r18
    e188:	2c e0       	ldi	r18, 0x0C	; 12
    e18a:	f2 2e       	mov	r15, r18
    e18c:	0a e8       	ldi	r16, 0x8A	; 138
    e18e:	10 e0       	ldi	r17, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:33
  for (uint8_t m = 0; m < 20; m++) device.mqtt_user[m] = EEPROM.read(device_mqtt_user + m);
    e190:	c8 01       	movw	r24, r16
    e192:	0e 94 49 8f 	call	0x11e92	; 0x11e92 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
    e196:	d7 01       	movw	r26, r14
    e198:	8d 93       	st	X+, r24
    e19a:	7d 01       	movw	r14, r26
    e19c:	0f 5f       	subi	r16, 0xFF	; 255
    e19e:	1f 4f       	sbci	r17, 0xFF	; 255
    e1a0:	0e 39       	cpi	r16, 0x9E	; 158
    e1a2:	11 05       	cpc	r17, r1
    e1a4:	a9 f7       	brne	.-22     	; 0xe190 <setup+0x10bc>
    e1a6:	89 e5       	ldi	r24, 0x59	; 89
    e1a8:	e8 2e       	mov	r14, r24
    e1aa:	8c e0       	ldi	r24, 0x0C	; 12
    e1ac:	f8 2e       	mov	r15, r24
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:34
  for (uint8_t m = 0; m < 20; m++) device.mqtt_key[m] = EEPROM.read(device_mqtt_key + m);
    e1ae:	c8 01       	movw	r24, r16
    e1b0:	0e 94 49 8f 	call	0x11e92	; 0x11e92 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
    e1b4:	f7 01       	movw	r30, r14
    e1b6:	81 93       	st	Z+, r24
    e1b8:	7f 01       	movw	r14, r30
    e1ba:	0f 5f       	subi	r16, 0xFF	; 255
    e1bc:	1f 4f       	sbci	r17, 0xFF	; 255
    e1be:	02 3b       	cpi	r16, 0xB2	; 178
    e1c0:	11 05       	cpc	r17, r1
    e1c2:	a9 f7       	brne	.-22     	; 0xe1ae <setup+0x10da>
    e1c4:	bd e6       	ldi	r27, 0x6D	; 109
    e1c6:	eb 2e       	mov	r14, r27
    e1c8:	bc e0       	ldi	r27, 0x0C	; 12
    e1ca:	fb 2e       	mov	r15, r27
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:35
  for (uint8_t m = 0; m < 4; m++) device.ntp_server[m] = EEPROM.read(device_ntp_server + m);
    e1cc:	c8 01       	movw	r24, r16
    e1ce:	0e 94 49 8f 	call	0x11e92	; 0x11e92 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
    e1d2:	d7 01       	movw	r26, r14
    e1d4:	8d 93       	st	X+, r24
    e1d6:	7d 01       	movw	r14, r26
    e1d8:	0f 5f       	subi	r16, 0xFF	; 255
    e1da:	1f 4f       	sbci	r17, 0xFF	; 255
    e1dc:	06 3b       	cpi	r16, 0xB6	; 182
    e1de:	11 05       	cpc	r17, r1
    e1e0:	a9 f7       	brne	.-22     	; 0xe1cc <setup+0x10f8>
    e1e2:	4a e1       	ldi	r20, 0x1A	; 26
    e1e4:	5a e0       	ldi	r21, 0x0A	; 10
    e1e6:	26 e0       	ldi	r18, 0x06	; 6
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3799
      /// nactu nastaveni site
      load_setup_network();
      //// kvuli lepsimu nabehu pocitani nastavim vychozi hodnotu na 2000 = 20 stupnu
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
          status_tds18s20[idx].average_temp[cnt] = 20000;
    e1e8:	60 e2       	ldi	r22, 0x20	; 32
    e1ea:	7e e4       	ldi	r23, 0x4E	; 78
load_setup_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:35
    e1ec:	90 e0       	ldi	r25, 0x00	; 0
    e1ee:	80 e0       	ldi	r24, 0x00	; 0
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3799
    e1f0:	fc 01       	movw	r30, r24
    e1f2:	ee 0f       	add	r30, r30
    e1f4:	ff 1f       	adc	r31, r31
    e1f6:	e4 0f       	add	r30, r20
    e1f8:	f5 1f       	adc	r31, r21
    e1fa:	70 87       	std	Z+8, r23	; 0x08
    e1fc:	67 83       	std	Z+7, r22	; 0x07
    e1fe:	01 96       	adiw	r24, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3798
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      /// nactu nastaveni site
      load_setup_network();
      //// kvuli lepsimu nabehu pocitani nastavim vychozi hodnotu na 2000 = 20 stupnu
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
    e200:	8a 30       	cpi	r24, 0x0A	; 10
    e202:	91 05       	cpc	r25, r1
    e204:	a9 f7       	brne	.-22     	; 0xe1f0 <setup+0x111c>
    e206:	21 50       	subi	r18, 0x01	; 1
    e208:	42 5e       	subi	r20, 0xE2	; 226
    e20a:	5f 4f       	sbci	r21, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3797
      strcpy_P(str1, text_nastaveni_systemu);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      /// nactu nastaveni site
      load_setup_network();
      //// kvuli lepsimu nabehu pocitani nastavim vychozi hodnotu na 2000 = 20 stupnu
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    e20c:	21 11       	cpse	r18, r1
    e20e:	ee cf       	rjmp	.-36     	; 0xe1ec <setup+0x1118>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3802
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
          status_tds18s20[idx].average_temp[cnt] = 20000;
      ///
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
        last_output_update[idx] = 0;
    e210:	10 92 15 0a 	sts	0x0A15, r1	; 0x800a15 <last_output_update>
    e214:	10 92 16 0a 	sts	0x0A16, r1	; 0x800a16 <last_output_update+0x1>
    e218:	10 92 17 0a 	sts	0x0A17, r1	; 0x800a17 <last_output_update+0x2>
    e21c:	10 92 18 0a 	sts	0x0A18, r1	; 0x800a18 <last_output_update+0x3>
    e220:	10 92 19 0a 	sts	0x0A19, r1	; 0x800a19 <last_output_update+0x4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3596
  my_lcd.Fill_Screen(WHITE);
  my_lcd.Set_Draw_color(BLUE);
  strcpy_P(str1, term_title);
  show_string(str1, 30, 10, 2, BLUE, WHITE, 0);
  ///
  for (uint8_t init = 0;  init < 16; init++)
    e224:	a3 94       	inc	r10
    e226:	c4 5c       	subi	r28, 0xC4	; 196
    e228:	de 4f       	sbci	r29, 0xFE	; 254
    e22a:	e8 81       	ld	r30, Y
    e22c:	f9 81       	ldd	r31, Y+1	; 0x01
    e22e:	cc 53       	subi	r28, 0x3C	; 60
    e230:	d1 40       	sbci	r29, 0x01	; 1
    e232:	3f 96       	adiw	r30, 0x0f	; 15
    e234:	c4 5c       	subi	r28, 0xC4	; 196
    e236:	de 4f       	sbci	r29, 0xFE	; 254
    e238:	f9 83       	std	Y+1, r31	; 0x01
    e23a:	e8 83       	st	Y, r30
    e23c:	cc 53       	subi	r28, 0x3C	; 60
    e23e:	d1 40       	sbci	r29, 0x01	; 1
    e240:	f0 e1       	ldi	r31, 0x10	; 16
    e242:	af 12       	cpse	r10, r31
    e244:	8f c9       	rjmp	.-3298   	; 0xd564 <setup+0x490>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3976
        selftest_set_0(SELFTEST_ERR_RTC);
      }
    }

  }
  delay(500);
    e246:	64 ef       	ldi	r22, 0xF4	; 244
    e248:	71 e0       	ldi	r23, 0x01	; 1
    e24a:	80 e0       	ldi	r24, 0x00	; 0
    e24c:	90 e0       	ldi	r25, 0x00	; 0
    e24e:	0e 94 f5 83 	call	0x107ea	; 0x107ea <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3977
  MenuPrepareStyle();
    e252:	0e 94 9f 2d 	call	0x5b3e	; 0x5b3e <MenuPrepareStyle()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3978
  draw_menu(true);
    e256:	81 e0       	ldi	r24, 0x01	; 1
    e258:	0e 94 6b 39 	call	0x72d6	; 0x72d6 <draw_menu(bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3979
  a2d_run_now = 1;
    e25c:	81 e0       	ldi	r24, 0x01	; 1
    e25e:	80 93 d3 0a 	sts	0x0AD3, r24	; 0x800ad3 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3981

}
    e262:	c3 5b       	subi	r28, 0xB3	; 179
    e264:	de 4f       	sbci	r29, 0xFE	; 254
    e266:	0f b6       	in	r0, 0x3f	; 63
    e268:	f8 94       	cli
    e26a:	de bf       	out	0x3e, r29	; 62
    e26c:	0f be       	out	0x3f, r0	; 63
    e26e:	cd bf       	out	0x3d, r28	; 61
    e270:	df 91       	pop	r29
    e272:	cf 91       	pop	r28
    e274:	1f 91       	pop	r17
    e276:	0f 91       	pop	r16
    e278:	ff 90       	pop	r15
    e27a:	ef 90       	pop	r14
    e27c:	df 90       	pop	r13
    e27e:	cf 90       	pop	r12
    e280:	bf 90       	pop	r11
    e282:	af 90       	pop	r10
    e284:	9f 90       	pop	r9
    e286:	8f 90       	pop	r8
    e288:	7f 90       	pop	r7
    e28a:	6f 90       	pop	r6
    e28c:	5f 90       	pop	r5
    e28e:	4f 90       	pop	r4
    e290:	3f 90       	pop	r3
    e292:	2f 90       	pop	r2
    e294:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3808
    }
    ///
    /// zobrazeni kalibracnich informaci touchscreenu
    if (init == 6)
    {
      strcpy_P(str1, text_touchscreen);
    e296:	6e ee       	ldi	r22, 0xEE	; 238
    e298:	7d e2       	ldi	r23, 0x2D	; 45
    e29a:	c1 01       	movw	r24, r2
    e29c:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3809
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    e2a0:	ee 24       	eor	r14, r14
    e2a2:	ea 94       	dec	r14
    e2a4:	fe 2c       	mov	r15, r14
    e2a6:	00 ee       	ldi	r16, 0xE0	; 224
    e2a8:	17 e0       	ldi	r17, 0x07	; 7
    e2aa:	21 e0       	ldi	r18, 0x01	; 1
    e2ac:	4e e6       	ldi	r20, 0x6E	; 110
    e2ae:	50 e0       	ldi	r21, 0x00	; 0
    e2b0:	6e e1       	ldi	r22, 0x1E	; 30
    e2b2:	70 e0       	ldi	r23, 0x00	; 0
    e2b4:	c1 01       	movw	r24, r2
    e2b6:	0e 94 37 7d 	call	0xfa6e	; 0xfa6e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]>
_ZNK11LCDWIKI_KBV10Get_HeightEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:743
}

//get lcd height
int16_t LCDWIKI_KBV::Get_Height(void) const
{
	return height;
    e2ba:	20 91 ce 0d 	lds	r18, 0x0DCE	; 0x800dce <my_lcd+0x14>
    e2be:	30 91 cf 0d 	lds	r19, 0x0DCF	; 0x800dcf <my_lcd+0x15>
_ZNK11LCDWIKI_KBV9Get_WidthEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:737
}

//get lcd width
int16_t LCDWIKI_KBV::Get_Width(void) const
{
	return width;
    e2c2:	40 91 cc 0d 	lds	r20, 0x0DCC	; 0x800dcc <my_lcd+0x12>
    e2c6:	50 91 cd 0d 	lds	r21, 0x0DCD	; 0x800dcd <my_lcd+0x13>
Get_Rotation():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:886
//1  :  90 degree
//2  :  180 degree
//3  :  270 degree
uint8_t LCDWIKI_KBV::Get_Rotation(void) const
{
	return rotation;
    e2ca:	90 91 d0 0d 	lds	r25, 0x0DD0	; 0x800dd0 <my_lcd+0x16>
TP_Init():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:53
	y=0xffff;
}

void LCDWIKI_TOUCH::TP_Init(uint8_t r,uint16_t w, uint16_t h)
{
	TDIN_HIGH;
    e2ce:	e0 91 b1 0d 	lds	r30, 0x0DB1	; 0x800db1 <my_touch+0x15>
    e2d2:	f0 91 b2 0d 	lds	r31, 0x0DB2	; 0x800db2 <my_touch+0x16>
    e2d6:	80 81       	ld	r24, Z
    e2d8:	60 91 b8 0d 	lds	r22, 0x0DB8	; 0x800db8 <my_touch+0x1c>
    e2dc:	86 2b       	or	r24, r22
    e2de:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:54
	TCLK_HIGH; 
    e2e0:	e0 91 ad 0d 	lds	r30, 0x0DAD	; 0x800dad <my_touch+0x11>
    e2e4:	f0 91 ae 0d 	lds	r31, 0x0DAE	; 0x800dae <my_touch+0x12>
    e2e8:	80 81       	ld	r24, Z
    e2ea:	60 91 b6 0d 	lds	r22, 0x0DB6	; 0x800db6 <my_touch+0x1a>
    e2ee:	86 2b       	or	r24, r22
    e2f0:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:55
	TCS_HIGH;
    e2f2:	e0 91 ab 0d 	lds	r30, 0x0DAB	; 0x800dab <my_touch+0xf>
    e2f6:	f0 91 ac 0d 	lds	r31, 0x0DAC	; 0x800dac <my_touch+0x10>
    e2fa:	80 81       	ld	r24, Z
    e2fc:	60 91 b5 0d 	lds	r22, 0x0DB5	; 0x800db5 <my_touch+0x19>
    e300:	86 2b       	or	r24, r22
    e302:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:56
	wid = w;
    e304:	50 93 a5 0d 	sts	0x0DA5, r21	; 0x800da5 <my_touch+0x9>
    e308:	40 93 a4 0d 	sts	0x0DA4, r20	; 0x800da4 <my_touch+0x8>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:57
	heig = h;	
    e30c:	30 93 a7 0d 	sts	0x0DA7, r19	; 0x800da7 <my_touch+0xb>
    e310:	20 93 a6 0d 	sts	0x0DA6, r18	; 0x800da6 <my_touch+0xa>
LCD_Set_Rotation():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:351
	return touch_rotation;
}

void LCDWIKI_TOUCH::LCD_Set_Rotation(uint8_t val)
{
	lcd_rotation = val;
    e314:	90 93 aa 0d 	sts	0x0DAA, r25	; 0x800daa <my_touch+0xe>
    e318:	85 cf       	rjmp	.-246    	; 0xe224 <setup+0x1150>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3835
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
        selftest_clear_0(SELFTEST_ERR_ONEWIRE);
      }
      else
      {
        strcpy_P(str1, text_err);
    e31a:	6f e8       	ldi	r22, 0x8F	; 143
    e31c:	7e e2       	ldi	r23, 0x2E	; 46
    e31e:	8d 2d       	mov	r24, r13
    e320:	9b 2d       	mov	r25, r11
    e322:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3836
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
    e326:	ee 24       	eor	r14, r14
    e328:	ea 94       	dec	r14
    e32a:	fe 2c       	mov	r15, r14
    e32c:	00 e0       	ldi	r16, 0x00	; 0
    e32e:	18 ef       	ldi	r17, 0xF8	; 248
    e330:	21 e0       	ldi	r18, 0x01	; 1
    e332:	48 e7       	ldi	r20, 0x78	; 120
    e334:	50 e0       	ldi	r21, 0x00	; 0
    e336:	60 ea       	ldi	r22, 0xA0	; 160
    e338:	70 e0       	ldi	r23, 0x00	; 0
    e33a:	8d 2d       	mov	r24, r13
    e33c:	9b 2d       	mov	r25, r11
    e33e:	0e 94 37 7d 	call	0xfa6e	; 0xfa6e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]>
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3281
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
    e342:	80 91 ce 0a 	lds	r24, 0x0ACE	; 0x800ace <selftest_data>
    e346:	84 60       	ori	r24, 0x04	; 4
    e348:	3d c3       	rjmp	.+1658   	; 0xe9c4 <setup+0x18f0>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3842
        selftest_set_0(SELFTEST_ERR_ONEWIRE);
      }
    }
    ///
    /// hledani zarizeni na 1wire sbernici
    if (init == 8)
    e34a:	e8 e0       	ldi	r30, 0x08	; 8
    e34c:	ae 12       	cpse	r10, r30
    e34e:	9d c0       	rjmp	.+314    	; 0xe48a <setup+0x13b6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3844
    {
      strcpy_P(str1, text_onewire_hledam);
    e350:	62 ed       	ldi	r22, 0xD2	; 210
    e352:	7d e2       	ldi	r23, 0x2D	; 45
    e354:	8d 2d       	mov	r24, r13
    e356:	9b 2d       	mov	r25, r11
    e358:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3845
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    e35c:	ee 24       	eor	r14, r14
    e35e:	ea 94       	dec	r14
    e360:	fe 2c       	mov	r15, r14
    e362:	00 ee       	ldi	r16, 0xE0	; 224
    e364:	17 e0       	ldi	r17, 0x07	; 7
    e366:	21 e0       	ldi	r18, 0x01	; 1
    e368:	42 e8       	ldi	r20, 0x82	; 130
    e36a:	50 e0       	ldi	r21, 0x00	; 0
    e36c:	6e e1       	ldi	r22, 0x1E	; 30
    e36e:	70 e0       	ldi	r23, 0x00	; 0
    e370:	8d 2d       	mov	r24, r13
    e372:	9b 2d       	mov	r25, r11
    e374:	0e 94 37 7d 	call	0xfa6e	; 0xfa6e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3846
      Global_HWwirenum = 0;
    e378:	10 92 02 0a 	sts	0x0A02, r1	; 0x800a02 <Global_HWwirenum>
one_hw_search_device():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:234
//*************************************************************************************************************//
/////vyhledani zarizeni na hw 1wire sbernici////////
uint8_t one_hw_search_device(uint8_t idx)
{
  uint8_t r;
  ds2482_address[idx].HWwirenum = 0;
    e37c:	10 92 67 09 	sts	0x0967, r1	; 0x800967 <ds2482_address+0x1>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:235
  ds2482init(ds2482_address[idx].i2c_addr);
    e380:	10 91 66 09 	lds	r17, 0x0966	; 0x800966 <ds2482_address>
ds2482init():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:186
 * Initialize TWI, this routine is designed for 8Mhz operation.
 */
uint8_t ds2482init(uint8_t addr)
{

	Wire.beginTransmission(addr);
    e384:	81 2f       	mov	r24, r17
    e386:	0e 94 16 7d 	call	0xfa2c	; 0xfa2c <TwoWire::beginTransmission(unsigned char) [clone .constprop.168]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:187
        if (Wire.endTransmission() == I2C_ERROR_OK)
    e38a:	89 ef       	ldi	r24, 0xF9	; 249
    e38c:	9d e0       	ldi	r25, 0x0D	; 13
    e38e:	0e 94 91 89 	call	0x11322	; 0x11322 <TwoWire::endTransmission()>
    e392:	81 11       	cpse	r24, r1
    e394:	10 c0       	rjmp	.+32     	; 0xe3b6 <setup+0x12e2>
ds2482setConfig():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:352
	//	return DS2482_ERR_WRITE;

	return DS2482_ERR_OK;
	*/

        Wire.beginTransmission(address);
    e396:	81 2f       	mov	r24, r17
    e398:	0e 94 16 7d 	call	0xfa2c	; 0xfa2c <TwoWire::beginTransmission(unsigned char) [clone .constprop.168]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:353
        Wire.write(DS2482_C_WCFG);
    e39c:	82 ed       	ldi	r24, 0xD2	; 210
    e39e:	90 e0       	ldi	r25, 0x00	; 0
    e3a0:	0e 94 be 7e 	call	0xfd7c	; 0xfd7c <TwoWire::write(int) [clone .constprop.100]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:354
        Wire.write(config);
    e3a4:	60 e0       	ldi	r22, 0x00	; 0
    e3a6:	89 ef       	ldi	r24, 0xF9	; 249
    e3a8:	9d e0       	ldi	r25, 0x0D	; 13
    e3aa:	0e 94 18 79 	call	0xf230	; 0xf230 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:355
        if (Wire.endTransmission() == I2C_ERROR_OK)
    e3ae:	89 ef       	ldi	r24, 0xF9	; 249
    e3b0:	9d e0       	ldi	r25, 0x0D	; 13
    e3b2:	0e 94 91 89 	call	0x11322	; 0x11322 <TwoWire::endTransmission()>
one_hw_search_device():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:236
  ds2482reset(ds2482_address[idx].i2c_addr);
    e3b6:	80 91 66 09 	lds	r24, 0x0966	; 0x800966 <ds2482_address>
    e3ba:	0e 94 05 8a 	call	0x1140a	; 0x1140a <ds2482reset(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:237
  ds2482owReset(ds2482_address[idx].i2c_addr);
    e3be:	80 91 66 09 	lds	r24, 0x0966	; 0x800966 <ds2482_address>
    e3c2:	0e 94 cf 8a 	call	0x1159e	; 0x1159e <ds2482owReset(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:238
  r = owMatchFirst(ds2482_address[idx].i2c_addr, tmp_rom);
    e3c6:	80 91 66 09 	lds	r24, 0x0966	; 0x800966 <ds2482_address>
owMatchFirst():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:104
 *
 * Can return anything owMatchLast returns
 */
uint8_t owMatchFirst(uint8_t ds2482_address, uint8_t *rom)
{
	lastDiscrepancy = lastDevice = 0;
    e3ca:	10 92 64 0b 	sts	0x0B64, r1	; 0x800b64 <lastDevice>
    e3ce:	10 92 5b 0b 	sts	0x0B5B, r1	; 0x800b5b <lastDiscrepancy>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:105
	return owMatchNext(ds2482_address, rom);
    e3d2:	0e 94 05 8b 	call	0x1160a	; 0x1160a <owMatchNext(unsigned char, unsigned char*) [clone .constprop.98]>
one_hw_search_device():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:246
  }
  if (r) {
    /*jina chyba*/
  }
  ///
  if (r == DS2482_ERR_OK)
    e3d6:	81 11       	cpse	r24, r1
    e3d8:	35 c0       	rjmp	.+106    	; 0xe444 <setup+0x1370>
    e3da:	1b e0       	ldi	r17, 0x0B	; 11
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:251
    while (1) {
      if (ds2482_address[idx].HWwirenum > HW_ONEWIRE_MAXDEVICES - 1) break;
      for (uint8_t a = 0; a < 8; a++)  w_rom[Global_HWwirenum].rom[a] = tmp_rom[a];
      w_rom[Global_HWwirenum].assigned_ds2482 = idx;
      w_rom[Global_HWwirenum].used = 1;
    e3dc:	01 e0       	ldi	r16, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:248
    /*jina chyba*/
  }
  ///
  if (r == DS2482_ERR_OK)
    while (1) {
      if (ds2482_address[idx].HWwirenum > HW_ONEWIRE_MAXDEVICES - 1) break;
    e3de:	80 91 67 09 	lds	r24, 0x0967	; 0x800967 <ds2482_address+0x1>
    e3e2:	86 30       	cpi	r24, 0x06	; 6
    e3e4:	78 f5       	brcc	.+94     	; 0xe444 <setup+0x1370>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:249
      for (uint8_t a = 0; a < 8; a++)  w_rom[Global_HWwirenum].rom[a] = tmp_rom[a];
    e3e6:	20 91 02 0a 	lds	r18, 0x0A02	; 0x800a02 <Global_HWwirenum>
    e3ea:	42 2f       	mov	r20, r18
    e3ec:	50 e0       	ldi	r21, 0x00	; 0
    e3ee:	ac e5       	ldi	r26, 0x5C	; 92
    e3f0:	bb e0       	ldi	r27, 0x0B	; 11
    e3f2:	21 9f       	mul	r18, r17
    e3f4:	90 01       	movw	r18, r0
    e3f6:	11 24       	eor	r1, r1
    e3f8:	90 e0       	ldi	r25, 0x00	; 0
    e3fa:	80 e0       	ldi	r24, 0x00	; 0
    e3fc:	6d 91       	ld	r22, X+
    e3fe:	fc 01       	movw	r30, r24
    e400:	e2 0f       	add	r30, r18
    e402:	f3 1f       	adc	r31, r19
    e404:	e0 54       	subi	r30, 0x40	; 64
    e406:	f6 4f       	sbci	r31, 0xF6	; 246
    e408:	60 83       	st	Z, r22
    e40a:	01 96       	adiw	r24, 0x01	; 1
    e40c:	88 30       	cpi	r24, 0x08	; 8
    e40e:	91 05       	cpc	r25, r1
    e410:	a9 f7       	brne	.-22     	; 0xe3fc <setup+0x1328>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:250
      w_rom[Global_HWwirenum].assigned_ds2482 = idx;
    e412:	14 9f       	mul	r17, r20
    e414:	f0 01       	movw	r30, r0
    e416:	15 9f       	mul	r17, r21
    e418:	f0 0d       	add	r31, r0
    e41a:	11 24       	eor	r1, r1
    e41c:	e0 54       	subi	r30, 0x40	; 64
    e41e:	f6 4f       	sbci	r31, 0xF6	; 246
    e420:	10 86       	std	Z+8, r1	; 0x08
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:251
      w_rom[Global_HWwirenum].used = 1;
    e422:	01 87       	std	Z+9, r16	; 0x09
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:252
      r = owMatchNext(ds2482_address[idx].i2c_addr, tmp_rom);
    e424:	80 91 66 09 	lds	r24, 0x0966	; 0x800966 <ds2482_address>
    e428:	0e 94 05 8b 	call	0x1160a	; 0x1160a <owMatchNext(unsigned char, unsigned char*) [clone .constprop.98]>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:254
      /// celkovy pocet detekovanych roms
      ds2482_address[idx].HWwirenum++;
    e42c:	90 91 67 09 	lds	r25, 0x0967	; 0x800967 <ds2482_address+0x1>
    e430:	9f 5f       	subi	r25, 0xFF	; 255
    e432:	90 93 67 09 	sts	0x0967, r25	; 0x800967 <ds2482_address+0x1>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:255
      Global_HWwirenum++;
    e436:	90 91 02 0a 	lds	r25, 0x0A02	; 0x800a02 <Global_HWwirenum>
    e43a:	9f 5f       	subi	r25, 0xFF	; 255
    e43c:	90 93 02 0a 	sts	0x0A02, r25	; 0x800a02 <Global_HWwirenum>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:256
      if (r == DS2482_ERR_NO_DEVICE)
    e440:	85 30       	cpi	r24, 0x05	; 5
    e442:	69 f6       	brne	.-102    	; 0xe3de <setup+0x130a>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3848
      one_hw_search_device(0);
      tds_update_associate();
    e444:	0e 94 97 4e 	call	0x9d2e	; 0x9d2e <tds_update_associate()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3849
      strcpy (str1, "Nalezeno: ");
    e448:	6f ed       	ldi	r22, 0xDF	; 223
    e44a:	76 e0       	ldi	r23, 0x06	; 6
    e44c:	8d 2d       	mov	r24, r13
    e44e:	9b 2d       	mov	r25, r11
    e450:	0e 94 70 af 	call	0x15ee0	; 0x15ee0 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3850
      itoa(Global_HWwirenum, str2, 10);
    e454:	80 91 02 0a 	lds	r24, 0x0A02	; 0x800a02 <Global_HWwirenum>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    e458:	4a e0       	ldi	r20, 0x0A	; 10
    e45a:	be 01       	movw	r22, r28
    e45c:	68 57       	subi	r22, 0x78	; 120
    e45e:	7f 4f       	sbci	r23, 0xFF	; 255
    e460:	90 e0       	ldi	r25, 0x00	; 0
    e462:	0e 94 27 a3 	call	0x1464e	; 0x1464e <__itoa_ncheck>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3851
      strcat(str1, str2);
    e466:	be 01       	movw	r22, r28
    e468:	68 57       	subi	r22, 0x78	; 120
    e46a:	7f 4f       	sbci	r23, 0xFF	; 255
    e46c:	8d 2d       	mov	r24, r13
    e46e:	9b 2d       	mov	r25, r11
    e470:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3852
      show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    e474:	ee 24       	eor	r14, r14
    e476:	ea 94       	dec	r14
    e478:	fe 2c       	mov	r15, r14
    e47a:	00 ee       	ldi	r16, 0xE0	; 224
    e47c:	17 e0       	ldi	r17, 0x07	; 7
    e47e:	21 e0       	ldi	r18, 0x01	; 1
    e480:	42 e8       	ldi	r20, 0x82	; 130
    e482:	50 e0       	ldi	r21, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3900
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_ok);
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    e484:	60 ea       	ldi	r22, 0xA0	; 160
    e486:	70 e0       	ldi	r23, 0x00	; 0
    e488:	cc cd       	rjmp	.-1128   	; 0xe022 <setup+0xf4e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3856
      strcat(str1, str2);
      show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    }
    ///
    /// inicializace wiznet w5500
    if (init == 9)
    e48a:	f9 e0       	ldi	r31, 0x09	; 9
    e48c:	af 12       	cpse	r10, r31
    e48e:	9d c2       	rjmp	.+1338   	; 0xe9ca <setup+0x18f6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3858
    {
      digitalWrite(ETH_RST, HIGH);
    e490:	61 e0       	ldi	r22, 0x01	; 1
    e492:	86 e0       	ldi	r24, 0x06	; 6
    e494:	0e 94 5c 82 	call	0x104b8	; 0x104b8 <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3859
      delay(10);
    e498:	6a e0       	ldi	r22, 0x0A	; 10
    e49a:	70 e0       	ldi	r23, 0x00	; 0
    e49c:	80 e0       	ldi	r24, 0x00	; 0
    e49e:	90 e0       	ldi	r25, 0x00	; 0
    e4a0:	0e 94 f5 83 	call	0x107ea	; 0x107ea <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3860
      digitalWrite(ETH_RST, LOW);
    e4a4:	60 e0       	ldi	r22, 0x00	; 0
    e4a6:	86 e0       	ldi	r24, 0x06	; 6
    e4a8:	0e 94 5c 82 	call	0x104b8	; 0x104b8 <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3861
      delay(10);
    e4ac:	6a e0       	ldi	r22, 0x0A	; 10
    e4ae:	70 e0       	ldi	r23, 0x00	; 0
    e4b0:	80 e0       	ldi	r24, 0x00	; 0
    e4b2:	90 e0       	ldi	r25, 0x00	; 0
    e4b4:	0e 94 f5 83 	call	0x107ea	; 0x107ea <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3862
      digitalWrite(ETH_RST, HIGH);
    e4b8:	61 e0       	ldi	r22, 0x01	; 1
    e4ba:	86 e0       	ldi	r24, 0x06	; 6
    e4bc:	0e 94 5c 82 	call	0x104b8	; 0x104b8 <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3863
      delay(100);
    e4c0:	64 e6       	ldi	r22, 0x64	; 100
    e4c2:	70 e0       	ldi	r23, 0x00	; 0
    e4c4:	80 e0       	ldi	r24, 0x00	; 0
    e4c6:	90 e0       	ldi	r25, 0x00	; 0
    e4c8:	0e 94 f5 83 	call	0x107ea	; 0x107ea <delay>
_ZN13EthernetClass4initEh():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.h:35

  static uint8_t _state[MAX_SOCK_NUM];
  static uint16_t _server_port[MAX_SOCK_NUM];

  EthernetClass() { _dhcp = NULL; w5500_cspin = 10; }
  void init(uint8_t _cspin = 10) { w5500_cspin = _cspin; }
    e4cc:	8f e0       	ldi	r24, 0x0F	; 15
    e4ce:	80 93 16 0c 	sts	0x0C16, r24	; 0x800c16 <Ethernet+0xc>
__base_ctor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:41
IPAddress::IPAddress(uint32_t address)
{
    _address.dword = address;
}

IPAddress::IPAddress(const uint8_t *address)
    e4d2:	82 ee       	ldi	r24, 0xE2	; 226
    e4d4:	92 e0       	ldi	r25, 0x02	; 2
    e4d6:	ce 5c       	subi	r28, 0xCE	; 206
    e4d8:	de 4f       	sbci	r29, 0xFE	; 254
    e4da:	99 83       	std	Y+1, r25	; 0x01
    e4dc:	88 83       	st	Y, r24
    e4de:	c2 53       	subi	r28, 0x32	; 50
    e4e0:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:43
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
    e4e2:	24 e0       	ldi	r18, 0x04	; 4
    e4e4:	e9 e2       	ldi	r30, 0x29	; 41
    e4e6:	fc e0       	ldi	r31, 0x0C	; 12
    e4e8:	cc 5b       	subi	r28, 0xBC	; 188
    e4ea:	de 4f       	sbci	r29, 0xFE	; 254
    e4ec:	a8 81       	ld	r26, Y
    e4ee:	b9 81       	ldd	r27, Y+1	; 0x01
    e4f0:	c4 54       	subi	r28, 0x44	; 68
    e4f2:	d1 40       	sbci	r29, 0x01	; 1
    e4f4:	01 90       	ld	r0, Z+
    e4f6:	0d 92       	st	X+, r0
    e4f8:	2a 95       	dec	r18
    e4fa:	e1 f7       	brne	.-8      	; 0xe4f4 <setup+0x1420>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:41
IPAddress::IPAddress(uint32_t address)
{
    _address.dword = address;
}

IPAddress::IPAddress(const uint8_t *address)
    e4fc:	c4 5d       	subi	r28, 0xD4	; 212
    e4fe:	de 4f       	sbci	r29, 0xFE	; 254
    e500:	99 83       	std	Y+1, r25	; 0x01
    e502:	88 83       	st	Y, r24
    e504:	cc 52       	subi	r28, 0x2C	; 44
    e506:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:43
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
    e508:	24 e0       	ldi	r18, 0x04	; 4
    e50a:	e1 e3       	ldi	r30, 0x31	; 49
    e50c:	fc e0       	ldi	r31, 0x0C	; 12
    e50e:	ca 5b       	subi	r28, 0xBA	; 186
    e510:	de 4f       	sbci	r29, 0xFE	; 254
    e512:	a8 81       	ld	r26, Y
    e514:	b9 81       	ldd	r27, Y+1	; 0x01
    e516:	c6 54       	subi	r28, 0x46	; 70
    e518:	d1 40       	sbci	r29, 0x01	; 1
    e51a:	01 90       	ld	r0, Z+
    e51c:	0d 92       	st	X+, r0
    e51e:	2a 95       	dec	r18
    e520:	e1 f7       	brne	.-8      	; 0xe51a <setup+0x1446>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:41
IPAddress::IPAddress(uint32_t address)
{
    _address.dword = address;
}

IPAddress::IPAddress(const uint8_t *address)
    e522:	ca 5d       	subi	r28, 0xDA	; 218
    e524:	de 4f       	sbci	r29, 0xFE	; 254
    e526:	99 83       	std	Y+1, r25	; 0x01
    e528:	88 83       	st	Y, r24
    e52a:	c6 52       	subi	r28, 0x26	; 38
    e52c:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:43
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
    e52e:	24 e0       	ldi	r18, 0x04	; 4
    e530:	ed e2       	ldi	r30, 0x2D	; 45
    e532:	fc e0       	ldi	r31, 0x0C	; 12
    e534:	c8 5b       	subi	r28, 0xB8	; 184
    e536:	de 4f       	sbci	r29, 0xFE	; 254
    e538:	a8 81       	ld	r26, Y
    e53a:	b9 81       	ldd	r27, Y+1	; 0x01
    e53c:	c8 54       	subi	r28, 0x48	; 72
    e53e:	d1 40       	sbci	r29, 0x01	; 1
    e540:	01 90       	ld	r0, Z+
    e542:	0d 92       	st	X+, r0
    e544:	2a 95       	dec	r18
    e546:	e1 f7       	brne	.-8      	; 0xe540 <setup+0x146c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:41
IPAddress::IPAddress(uint32_t address)
{
    _address.dword = address;
}

IPAddress::IPAddress(const uint8_t *address)
    e548:	c2 52       	subi	r28, 0x22	; 34
    e54a:	df 4f       	sbci	r29, 0xFF	; 255
    e54c:	99 83       	std	Y+1, r25	; 0x01
    e54e:	88 83       	st	Y, r24
    e550:	ce 5d       	subi	r28, 0xDE	; 222
    e552:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:43
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
    e554:	84 e0       	ldi	r24, 0x04	; 4
    e556:	e5 e2       	ldi	r30, 0x25	; 37
    e558:	fc e0       	ldi	r31, 0x0C	; 12
    e55a:	c6 5b       	subi	r28, 0xB6	; 182
    e55c:	de 4f       	sbci	r29, 0xFE	; 254
    e55e:	a8 81       	ld	r26, Y
    e560:	b9 81       	ldd	r27, Y+1	; 0x01
    e562:	ca 54       	subi	r28, 0x4A	; 74
    e564:	d1 40       	sbci	r29, 0x01	; 1
    e566:	01 90       	ld	r0, Z+
    e568:	0d 92       	st	X+, r0
    e56a:	8a 95       	dec	r24
    e56c:	e1 f7       	brne	.-8      	; 0xe566 <setup+0x1492>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3865
      Ethernet.init(ETH_CS);
      Ethernet.begin(device.mac, device.myIP, device.myDNS, device.myGW, device.myMASK);
    e56e:	9e 01       	movw	r18, r28
    e570:	2e 5c       	subi	r18, 0xCE	; 206
    e572:	3e 4f       	sbci	r19, 0xFE	; 254
    e574:	ae 01       	movw	r20, r28
    e576:	44 5d       	subi	r20, 0xD4	; 212
    e578:	5e 4f       	sbci	r21, 0xFE	; 254
    e57a:	be 01       	movw	r22, r28
    e57c:	6a 5d       	subi	r22, 0xDA	; 218
    e57e:	7e 4f       	sbci	r23, 0xFE	; 254
    e580:	ce 01       	movw	r24, r28
    e582:	82 52       	subi	r24, 0x22	; 34
    e584:	9f 4f       	sbci	r25, 0xFF	; 255
    e586:	0e 94 64 90 	call	0x120c8	; 0x120c8 <EthernetClass::begin(unsigned char*, IPAddress, IPAddress, IPAddress, IPAddress) [clone .constprop.101]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3866
      strcpy_P(str1, text_ethernet_rozhrani);
    e58a:	60 ec       	ldi	r22, 0xC0	; 192
    e58c:	7d e2       	ldi	r23, 0x2D	; 45
    e58e:	8d 2d       	mov	r24, r13
    e590:	9b 2d       	mov	r25, r11
    e592:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3867
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    e596:	ee 24       	eor	r14, r14
    e598:	ea 94       	dec	r14
    e59a:	fe 2c       	mov	r15, r14
    e59c:	00 ee       	ldi	r16, 0xE0	; 224
    e59e:	17 e0       	ldi	r17, 0x07	; 7
    e5a0:	21 e0       	ldi	r18, 0x01	; 1
    e5a2:	4c e8       	ldi	r20, 0x8C	; 140
    e5a4:	50 e0       	ldi	r21, 0x00	; 0
    e5a6:	6e e1       	ldi	r22, 0x1E	; 30
    e5a8:	70 e0       	ldi	r23, 0x00	; 0
    e5aa:	8d 2d       	mov	r24, r13
    e5ac:	9b 2d       	mov	r25, r11
    e5ae:	0e 94 37 7d 	call	0xfa6e	; 0xfa6e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3868
      delay(100);
    e5b2:	64 e6       	ldi	r22, 0x64	; 100
    e5b4:	70 e0       	ldi	r23, 0x00	; 0
    e5b6:	80 e0       	ldi	r24, 0x00	; 0
    e5b8:	90 e0       	ldi	r25, 0x00	; 0
    e5ba:	0e 94 f5 83 	call	0x107ea	; 0x107ea <delay>
    e5be:	32 ce       	rjmp	.-924    	; 0xe224 <setup+0x1150>
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3281
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
    e5c0:	90 62       	ori	r25, 0x20	; 32
    e5c2:	90 93 ce 0a 	sts	0x0ACE, r25	; 0x800ace <selftest_data>
    e5c6:	42 c2       	rjmp	.+1156   	; 0xea4c <setup+0x1978>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3899
        strcpy_P(str1, text_err);
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_ok);
    e5c8:	6c e1       	ldi	r22, 0x1C	; 28
    e5ca:	7e e2       	ldi	r23, 0x2E	; 46
    e5cc:	8d 2d       	mov	r24, r13
    e5ce:	9b 2d       	mov	r25, r11
    e5d0:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3900
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    e5d4:	ee 24       	eor	r14, r14
    e5d6:	ea 94       	dec	r14
    e5d8:	fe 2c       	mov	r15, r14
    e5da:	00 ee       	ldi	r16, 0xE0	; 224
    e5dc:	17 e0       	ldi	r17, 0x07	; 7
    e5de:	5b c2       	rjmp	.+1206   	; 0xea96 <setup+0x19c2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3906
      }

    }
    ///
    /// inicializace rest api rozhrani
    if (init == 11)
    e5e0:	3b e0       	ldi	r19, 0x0B	; 11
    e5e2:	a3 12       	cpse	r10, r19
    e5e4:	0f c0       	rjmp	.+30     	; 0xe604 <setup+0x1530>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3908
    {
      strcpy_P(str1, text_rest_rozhrani);
    e5e6:	61 e9       	ldi	r22, 0x91	; 145
    e5e8:	7d e2       	ldi	r23, 0x2D	; 45
    e5ea:	8d 2d       	mov	r24, r13
    e5ec:	9b 2d       	mov	r25, r11
    e5ee:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3909
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    e5f2:	ee 24       	eor	r14, r14
    e5f4:	ea 94       	dec	r14
    e5f6:	fe 2c       	mov	r15, r14
    e5f8:	00 ee       	ldi	r16, 0xE0	; 224
    e5fa:	17 e0       	ldi	r17, 0x07	; 7
    e5fc:	21 e0       	ldi	r18, 0x01	; 1
    e5fe:	40 ea       	ldi	r20, 0xA0	; 160
    e600:	50 e0       	ldi	r21, 0x00	; 0
    e602:	0d cd       	rjmp	.-1510   	; 0xe01e <setup+0xf4a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3913
    }
    ///
    /// inicializace nrf
    if (init == 12)
    e604:	8c e0       	ldi	r24, 0x0C	; 12
    e606:	a8 12       	cpse	r10, r24
    e608:	4a c2       	rjmp	.+1172   	; 0xea9e <setup+0x19ca>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3915
    {
      strcpy_P(str1, text_nrf_rozhrani);
    e60a:	64 e8       	ldi	r22, 0x84	; 132
    e60c:	7d e2       	ldi	r23, 0x2D	; 45
    e60e:	8d 2d       	mov	r24, r13
    e610:	9b 2d       	mov	r25, r11
    e612:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3916
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    e616:	ee 24       	eor	r14, r14
    e618:	ea 94       	dec	r14
    e61a:	fe 2c       	mov	r15, r14
    e61c:	00 ee       	ldi	r16, 0xE0	; 224
    e61e:	17 e0       	ldi	r17, 0x07	; 7
    e620:	21 e0       	ldi	r18, 0x01	; 1
    e622:	4a ea       	ldi	r20, 0xAA	; 170
    e624:	50 e0       	ldi	r21, 0x00	; 0
    e626:	fb cc       	rjmp	.-1546   	; 0xe01e <setup+0xf4a>
Initialize():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:194
void PID::Initialize()
{
   outputSum = *myOutput;
   lastInput = *myInput;
   if(outputSum > outMax) outputSum = outMax;
   else if(outputSum < outMin) outputSum = outMin;
    e628:	d8 01       	movw	r26, r16
    e62a:	d2 96       	adiw	r26, 0x32	; 50
    e62c:	8d 91       	ld	r24, X+
    e62e:	9d 91       	ld	r25, X+
    e630:	0d 90       	ld	r0, X+
    e632:	bc 91       	ld	r27, X
    e634:	a0 2d       	mov	r26, r0
    e636:	c8 5c       	subi	r28, 0xC8	; 200
    e638:	de 4f       	sbci	r29, 0xFE	; 254
    e63a:	88 83       	st	Y, r24
    e63c:	99 83       	std	Y+1, r25	; 0x01
    e63e:	aa 83       	std	Y+2, r26	; 0x02
    e640:	bb 83       	std	Y+3, r27	; 0x03
    e642:	c8 53       	subi	r28, 0x38	; 56
    e644:	d1 40       	sbci	r29, 0x01	; 1
    e646:	9c 01       	movw	r18, r24
    e648:	ad 01       	movw	r20, r26
    e64a:	c3 01       	movw	r24, r6
    e64c:	b2 01       	movw	r22, r4
    e64e:	0e 94 67 ab 	call	0x156ce	; 0x156ce <__cmpsf2>
    e652:	87 fd       	sbrc	r24, 7
    e654:	13 c3       	rjmp	.+1574   	; 0xec7c <setup+0x1ba8>
SetMode():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:182
    bool newAuto = (Mode == AUTOMATIC);
    if(newAuto && !inAuto)
    {  /*we just went from manual to auto*/
        PID::Initialize();
    }
    inAuto = newAuto;
    e656:	d8 01       	movw	r26, r16
    e658:	da 96       	adiw	r26, 0x3a	; 58
    e65a:	cc 92       	st	X, r12
SetOutputLimits():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:157
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   if(Min >= Max) return;
   outMin = Min;
    e65c:	f8 01       	movw	r30, r16
    e65e:	12 aa       	std	Z+50, r1	; 0x32
    e660:	13 aa       	std	Z+51, r1	; 0x33
    e662:	14 aa       	std	Z+52, r1	; 0x34
    e664:	15 aa       	std	Z+53, r1	; 0x35
/home/saric/Arduino/libraries/PID/PID_v1.cpp:158
   outMax = Max;
    e666:	80 e0       	ldi	r24, 0x00	; 0
    e668:	90 e0       	ldi	r25, 0x00	; 0
    e66a:	af e7       	ldi	r26, 0x7F	; 127
    e66c:	b3 e4       	ldi	r27, 0x43	; 67
    e66e:	86 ab       	std	Z+54, r24	; 0x36
    e670:	97 ab       	std	Z+55, r25	; 0x37
    e672:	a0 af       	std	Z+56, r26	; 0x38
    e674:	b1 af       	std	Z+57, r27	; 0x39
/home/saric/Arduino/libraries/PID/PID_v1.cpp:162

   if(inAuto)
   {
	   if(*myOutput > outMax) *myOutput = outMax;
    e676:	26 8d       	ldd	r18, Z+30	; 0x1e
    e678:	37 8d       	ldd	r19, Z+31	; 0x1f
    e67a:	c8 5c       	subi	r28, 0xC8	; 200
    e67c:	de 4f       	sbci	r29, 0xFE	; 254
    e67e:	39 83       	std	Y+1, r19	; 0x01
    e680:	28 83       	st	Y, r18
    e682:	c8 53       	subi	r28, 0x38	; 56
    e684:	d1 40       	sbci	r29, 0x01	; 1
    e686:	d9 01       	movw	r26, r18
    e688:	4d 90       	ld	r4, X+
    e68a:	5d 90       	ld	r5, X+
    e68c:	6d 90       	ld	r6, X+
    e68e:	7c 90       	ld	r7, X
    e690:	20 e0       	ldi	r18, 0x00	; 0
    e692:	30 e0       	ldi	r19, 0x00	; 0
    e694:	4f e7       	ldi	r20, 0x7F	; 127
    e696:	53 e4       	ldi	r21, 0x43	; 67
    e698:	c3 01       	movw	r24, r6
    e69a:	b2 01       	movw	r22, r4
    e69c:	0e 94 49 ae 	call	0x15c92	; 0x15c92 <__gesf2>
    e6a0:	18 16       	cp	r1, r24
    e6a2:	94 f5       	brge	.+100    	; 0xe708 <setup+0x1634>
    e6a4:	80 e0       	ldi	r24, 0x00	; 0
    e6a6:	90 e0       	ldi	r25, 0x00	; 0
    e6a8:	af e7       	ldi	r26, 0x7F	; 127
    e6aa:	b3 e4       	ldi	r27, 0x43	; 67
    e6ac:	c8 5c       	subi	r28, 0xC8	; 200
    e6ae:	de 4f       	sbci	r29, 0xFE	; 254
    e6b0:	e8 81       	ld	r30, Y
    e6b2:	f9 81       	ldd	r31, Y+1	; 0x01
    e6b4:	c8 53       	subi	r28, 0x38	; 56
    e6b6:	d1 40       	sbci	r29, 0x01	; 1
    e6b8:	80 83       	st	Z, r24
    e6ba:	91 83       	std	Z+1, r25	; 0x01
    e6bc:	a2 83       	std	Z+2, r26	; 0x02
    e6be:	b3 83       	std	Z+3, r27	; 0x03
/home/saric/Arduino/libraries/PID/PID_v1.cpp:165
	   else if(*myOutput < outMin) *myOutput = outMin;

	   if(outputSum > outMax) outputSum= outMax;
    e6c0:	d8 01       	movw	r26, r16
    e6c2:	96 96       	adiw	r26, 0x26	; 38
    e6c4:	8d 91       	ld	r24, X+
    e6c6:	9d 91       	ld	r25, X+
    e6c8:	0d 90       	ld	r0, X+
    e6ca:	bc 91       	ld	r27, X
    e6cc:	a0 2d       	mov	r26, r0
    e6ce:	c8 5c       	subi	r28, 0xC8	; 200
    e6d0:	de 4f       	sbci	r29, 0xFE	; 254
    e6d2:	88 83       	st	Y, r24
    e6d4:	99 83       	std	Y+1, r25	; 0x01
    e6d6:	aa 83       	std	Y+2, r26	; 0x02
    e6d8:	bb 83       	std	Y+3, r27	; 0x03
    e6da:	c8 53       	subi	r28, 0x38	; 56
    e6dc:	d1 40       	sbci	r29, 0x01	; 1
    e6de:	f8 01       	movw	r30, r16
    e6e0:	46 a8       	ldd	r4, Z+54	; 0x36
    e6e2:	57 a8       	ldd	r5, Z+55	; 0x37
    e6e4:	60 ac       	ldd	r6, Z+56	; 0x38
    e6e6:	71 ac       	ldd	r7, Z+57	; 0x39
    e6e8:	a3 01       	movw	r20, r6
    e6ea:	92 01       	movw	r18, r4
    e6ec:	bc 01       	movw	r22, r24
    e6ee:	cd 01       	movw	r24, r26
    e6f0:	0e 94 49 ae 	call	0x15c92	; 0x15c92 <__gesf2>
    e6f4:	18 16       	cp	r1, r24
    e6f6:	ec f4       	brge	.+58     	; 0xe732 <setup+0x165e>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:166
	   else if(outputSum < outMin) outputSum= outMin;
    e6f8:	d8 01       	movw	r26, r16
    e6fa:	96 96       	adiw	r26, 0x26	; 38
    e6fc:	4d 92       	st	X+, r4
    e6fe:	5d 92       	st	X+, r5
    e700:	6d 92       	st	X+, r6
    e702:	7c 92       	st	X, r7
    e704:	99 97       	sbiw	r26, 0x29	; 41
    e706:	28 c0       	rjmp	.+80     	; 0xe758 <setup+0x1684>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:163
   outMax = Max;

   if(inAuto)
   {
	   if(*myOutput > outMax) *myOutput = outMax;
	   else if(*myOutput < outMin) *myOutput = outMin;
    e708:	20 e0       	ldi	r18, 0x00	; 0
    e70a:	30 e0       	ldi	r19, 0x00	; 0
    e70c:	a9 01       	movw	r20, r18
    e70e:	c3 01       	movw	r24, r6
    e710:	b2 01       	movw	r22, r4
    e712:	0e 94 67 ab 	call	0x156ce	; 0x156ce <__cmpsf2>
    e716:	87 ff       	sbrs	r24, 7
    e718:	d3 cf       	rjmp	.-90     	; 0xe6c0 <setup+0x15ec>
    e71a:	c8 5c       	subi	r28, 0xC8	; 200
    e71c:	de 4f       	sbci	r29, 0xFE	; 254
    e71e:	a8 81       	ld	r26, Y
    e720:	b9 81       	ldd	r27, Y+1	; 0x01
    e722:	c8 53       	subi	r28, 0x38	; 56
    e724:	d1 40       	sbci	r29, 0x01	; 1
    e726:	1d 92       	st	X+, r1
    e728:	1d 92       	st	X+, r1
    e72a:	1d 92       	st	X+, r1
    e72c:	1c 92       	st	X, r1
    e72e:	13 97       	sbiw	r26, 0x03	; 3
    e730:	c7 cf       	rjmp	.-114    	; 0xe6c0 <setup+0x15ec>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:166

	   if(outputSum > outMax) outputSum= outMax;
	   else if(outputSum < outMin) outputSum= outMin;
    e732:	f8 01       	movw	r30, r16
    e734:	42 a8       	ldd	r4, Z+50	; 0x32
    e736:	53 a8       	ldd	r5, Z+51	; 0x33
    e738:	64 a8       	ldd	r6, Z+52	; 0x34
    e73a:	75 a8       	ldd	r7, Z+53	; 0x35
    e73c:	a3 01       	movw	r20, r6
    e73e:	92 01       	movw	r18, r4
    e740:	c8 5c       	subi	r28, 0xC8	; 200
    e742:	de 4f       	sbci	r29, 0xFE	; 254
    e744:	68 81       	ld	r22, Y
    e746:	79 81       	ldd	r23, Y+1	; 0x01
    e748:	8a 81       	ldd	r24, Y+2	; 0x02
    e74a:	9b 81       	ldd	r25, Y+3	; 0x03
    e74c:	c8 53       	subi	r28, 0x38	; 56
    e74e:	d1 40       	sbci	r29, 0x01	; 1
    e750:	0e 94 67 ab 	call	0x156ce	; 0x156ce <__cmpsf2>
    e754:	87 fd       	sbrc	r24, 7
    e756:	d0 cf       	rjmp	.-96     	; 0xe6f8 <setup+0x1624>
    e758:	c0 5c       	subi	r28, 0xC0	; 192
    e75a:	de 4f       	sbci	r29, 0xFE	; 254
    e75c:	e8 81       	ld	r30, Y
    e75e:	f9 81       	ldd	r31, Y+1	; 0x01
    e760:	c0 54       	subi	r28, 0x40	; 64
    e762:	d1 40       	sbci	r29, 0x01	; 1
    e764:	34 96       	adiw	r30, 0x04	; 4
    e766:	c0 5c       	subi	r28, 0xC0	; 192
    e768:	de 4f       	sbci	r29, 0xFE	; 254
    e76a:	f9 83       	std	Y+1, r31	; 0x01
    e76c:	e8 83       	st	Y, r30
    e76e:	c0 54       	subi	r28, 0x40	; 64
    e770:	d1 40       	sbci	r29, 0x01	; 1
    e772:	ce 5b       	subi	r28, 0xBE	; 190
    e774:	de 4f       	sbci	r29, 0xFE	; 254
    e776:	28 81       	ld	r18, Y
    e778:	39 81       	ldd	r19, Y+1	; 0x01
    e77a:	c2 54       	subi	r28, 0x42	; 66
    e77c:	d1 40       	sbci	r29, 0x01	; 1
    e77e:	2c 5f       	subi	r18, 0xFC	; 252
    e780:	3f 4f       	sbci	r19, 0xFF	; 255
    e782:	ce 5b       	subi	r28, 0xBE	; 190
    e784:	de 4f       	sbci	r29, 0xFE	; 254
    e786:	39 83       	std	Y+1, r19	; 0x01
    e788:	28 83       	st	Y, r18
    e78a:	c2 54       	subi	r28, 0x42	; 66
    e78c:	d1 40       	sbci	r29, 0x01	; 1
    e78e:	34 e0       	ldi	r19, 0x04	; 4
    e790:	e3 0e       	add	r14, r19
    e792:	f1 1c       	adc	r15, r1
    e794:	82 e0       	ldi	r24, 0x02	; 2
    e796:	88 0e       	add	r8, r24
    e798:	91 1c       	adc	r9, r1
thermostat_init_pid():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:40

PID** array_pids = new PID*[MAX_THERMOSTAT];

void thermostat_init_pid(void)
{
  for (uint8_t p = 0; p < MAX_THERMOSTAT; p++)
    e79a:	9a e0       	ldi	r25, 0x0A	; 10
    e79c:	89 16       	cp	r8, r25
    e79e:	91 04       	cpc	r9, r1
    e7a0:	09 f0       	breq	.+2      	; 0xe7a4 <setup+0x16d0>
    e7a2:	ad c1       	rjmp	.+858    	; 0xeafe <setup+0x1a2a>
    e7a4:	a0 e1       	ldi	r26, 0x10	; 16
    e7a6:	ba e0       	ldi	r27, 0x0A	; 10
    e7a8:	c8 5c       	subi	r28, 0xC8	; 200
    e7aa:	de 4f       	sbci	r29, 0xFE	; 254
    e7ac:	b9 83       	std	Y+1, r27	; 0x01
    e7ae:	a8 83       	st	Y, r26
    e7b0:	c8 53       	subi	r28, 0x38	; 56
    e7b2:	d1 40       	sbci	r29, 0x01	; 1
    e7b4:	48 e6       	ldi	r20, 0x68	; 104
    e7b6:	44 2e       	mov	r4, r20
    e7b8:	49 e0       	ldi	r20, 0x09	; 9
    e7ba:	54 2e       	mov	r5, r20
    e7bc:	5c e7       	ldi	r21, 0x7C	; 124
    e7be:	65 2e       	mov	r6, r21
    e7c0:	59 e0       	ldi	r21, 0x09	; 9
    e7c2:	75 2e       	mov	r7, r21
    e7c4:	60 e9       	ldi	r22, 0x90	; 144
    e7c6:	86 2e       	mov	r8, r22
    e7c8:	69 e0       	ldi	r22, 0x09	; 9
    e7ca:	96 2e       	mov	r9, r22
    e7cc:	74 ea       	ldi	r23, 0xA4	; 164
    e7ce:	e7 2e       	mov	r14, r23
    e7d0:	79 e0       	ldi	r23, 0x09	; 9
    e7d2:	f7 2e       	mov	r15, r23
    e7d4:	00 e6       	ldi	r16, 0x60	; 96
    e7d6:	11 e0       	ldi	r17, 0x01	; 1
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3926
    {
      strcpy_P(str1, text_pid_regulator);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      thermostat_init_pid();
      /// nastaveni vychozich hodnot pro regulator
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
    e7d8:	c1 2c       	mov	r12, r1
thermostat_ring_set_state():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:23
{
  return therm_stav[idx];
}
void thermostat_ring_set_state(uint8_t idx, uint8_t stav)
{
  therm_stav[idx] = stav;
    e7da:	c8 5c       	subi	r28, 0xC8	; 200
    e7dc:	de 4f       	sbci	r29, 0xFE	; 254
    e7de:	e8 81       	ld	r30, Y
    e7e0:	f9 81       	ldd	r31, Y+1	; 0x01
    e7e2:	c8 53       	subi	r28, 0x38	; 56
    e7e4:	d1 40       	sbci	r29, 0x01	; 1
    e7e6:	11 92       	st	Z+, r1
    e7e8:	c8 5c       	subi	r28, 0xC8	; 200
    e7ea:	de 4f       	sbci	r29, 0xFE	; 254
    e7ec:	f9 83       	std	Y+1, r31	; 0x01
    e7ee:	e8 83       	st	Y, r30
    e7f0:	c8 53       	subi	r28, 0x38	; 56
    e7f2:	d1 40       	sbci	r29, 0x01	; 1
thermostat_ring_get_pid_eeprom():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:226
  array_pids[idx]->SetSampleTime(PID_time[idx]);
}

void thermostat_ring_get_pid_eeprom(uint8_t idx)
{
  PID_p[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_p);
    e7f4:	c8 01       	movw	r24, r16
    e7f6:	0e 94 e1 8f 	call	0x11fc2	; 0x11fc2 <EEPROMreadFloat(unsigned int)>
    e7fa:	d2 01       	movw	r26, r4
    e7fc:	6d 93       	st	X+, r22
    e7fe:	7d 93       	st	X+, r23
    e800:	8d 93       	st	X+, r24
    e802:	9d 93       	st	X+, r25
    e804:	2d 01       	movw	r4, r26
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:227
  PID_i[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_i);
    e806:	c8 01       	movw	r24, r16
    e808:	04 96       	adiw	r24, 0x04	; 4
    e80a:	0e 94 e1 8f 	call	0x11fc2	; 0x11fc2 <EEPROMreadFloat(unsigned int)>
    e80e:	f3 01       	movw	r30, r6
    e810:	61 93       	st	Z+, r22
    e812:	71 93       	st	Z+, r23
    e814:	81 93       	st	Z+, r24
    e816:	91 93       	st	Z+, r25
    e818:	3f 01       	movw	r6, r30
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:228
  PID_d[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d);
    e81a:	c8 01       	movw	r24, r16
    e81c:	08 96       	adiw	r24, 0x08	; 8
    e81e:	0e 94 e1 8f 	call	0x11fc2	; 0x11fc2 <EEPROMreadFloat(unsigned int)>
    e822:	d4 01       	movw	r26, r8
    e824:	6d 93       	st	X+, r22
    e826:	7d 93       	st	X+, r23
    e828:	8d 93       	st	X+, r24
    e82a:	9d 93       	st	X+, r25
    e82c:	4d 01       	movw	r8, r26
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:229
  PID_time[idx] = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer);
    e82e:	c8 01       	movw	r24, r16
    e830:	0c 96       	adiw	r24, 0x0c	; 12
    e832:	0e 94 49 8f 	call	0x11e92	; 0x11e92 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
    e836:	f7 01       	movw	r30, r14
    e838:	81 93       	st	Z+, r24
    e83a:	7f 01       	movw	r14, r30
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3931
      {
        thermostat_ring_set_state(idx, 0);
        thermostat_ring_set_power(idx, 0);
        thermostat_ring_get_pid_eeprom(idx);
        thermostat_ring_update_pid_parameters(idx);
    e83c:	8c 2d       	mov	r24, r12
    e83e:	0e 94 5d 1f 	call	0x3eba	; 0x3eba <thermostat_ring_update_pid_parameters(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3926
    {
      strcpy_P(str1, text_pid_regulator);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      thermostat_init_pid();
      /// nastaveni vychozich hodnot pro regulator
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
    e842:	c3 94       	inc	r12
    e844:	0f 5d       	subi	r16, 0xDF	; 223
    e846:	1f 4f       	sbci	r17, 0xFF	; 255
    e848:	f5 e0       	ldi	r31, 0x05	; 5
    e84a:	cf 12       	cpse	r12, r31
    e84c:	c6 cf       	rjmp	.-116    	; 0xe7da <setup+0x1706>
get_default_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2174
   return
     - uint8_t s id ringu
*/
uint8_t get_default_ring(void)
{
  return EEPROM.read(my_default_ring);
    e84e:	8c e5       	ldi	r24, 0x5C	; 92
    e850:	90 e0       	ldi	r25, 0x00	; 0
    e852:	0e 94 49 8f 	call	0x11e92	; 0x11e92 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3933
        thermostat_ring_set_state(idx, 0);
        thermostat_ring_set_power(idx, 0);
        thermostat_ring_get_pid_eeprom(idx);
        thermostat_ring_update_pid_parameters(idx);
      }
      default_ring = get_default_ring();
    e856:	80 93 0f 0a 	sts	0x0A0F, r24	; 0x800a0f <default_ring>
get_default_show_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2189
   return
     - uint8_t s id cislo cidla
*/
uint8_t get_default_show_temp(void)
{
  return EEPROM.read(my_default_show_temp);
    e85a:	8d e5       	ldi	r24, 0x5D	; 93
    e85c:	90 e0       	ldi	r25, 0x00	; 0
    e85e:	0e 94 49 8f 	call	0x11e92	; 0x11e92 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3934
        thermostat_ring_set_power(idx, 0);
        thermostat_ring_get_pid_eeprom(idx);
        thermostat_ring_update_pid_parameters(idx);
      }
      default_ring = get_default_ring();
      default_show_temp = get_default_show_temp();
    e862:	80 93 a1 08 	sts	0x08A1, r24	; 0x8008a1 <default_show_temp>
    e866:	de cc       	rjmp	.-1604   	; 0xe224 <setup+0x1150>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3950
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
        selftest_set_0(SELFTEST_ERR_NTP);
      }
      else
      {
        strcpy_P(str1, text_ok);
    e868:	6c e1       	ldi	r22, 0x1C	; 28
    e86a:	7e e2       	ldi	r23, 0x2E	; 46
    e86c:	c1 01       	movw	r24, r2
    e86e:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3951
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    e872:	ee 24       	eor	r14, r14
    e874:	ea 94       	dec	r14
    e876:	fe 2c       	mov	r15, r14
    e878:	00 ee       	ldi	r16, 0xE0	; 224
    e87a:	17 e0       	ldi	r17, 0x07	; 7
    e87c:	21 e0       	ldi	r18, 0x01	; 1
    e87e:	4e eb       	ldi	r20, 0xBE	; 190
    e880:	50 e0       	ldi	r21, 0x00	; 0
    e882:	60 ea       	ldi	r22, 0xA0	; 160
    e884:	70 e0       	ldi	r23, 0x00	; 0
    e886:	c1 01       	movw	r24, r2
    e888:	0e 94 37 7d 	call	0xfa6e	; 0xfa6e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3290
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
    e88c:	80 91 ce 0a 	lds	r24, 0x0ACE	; 0x800ace <selftest_data>
    e890:	8d 7f       	andi	r24, 0xFD	; 253
    e892:	98 c0       	rjmp	.+304    	; 0xe9c4 <setup+0x18f0>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3957
        selftest_clear_0(SELFTEST_ERR_NTP);
      }
    }
    ///
    /// inicializace RTC casu
    if (init == 15)
    e894:	bf e0       	ldi	r27, 0x0F	; 15
    e896:	ab 12       	cpse	r10, r27
    e898:	c5 cc       	rjmp	.-1654   	; 0xe224 <setup+0x1150>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3959
    {
      strcpy_P(str1, text_rtc_cas);
    e89a:	6f e4       	ldi	r22, 0x4F	; 79
    e89c:	7d e2       	ldi	r23, 0x2D	; 45
    e89e:	8d 2d       	mov	r24, r13
    e8a0:	9b 2d       	mov	r25, r11
    e8a2:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3960
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    e8a6:	ee 24       	eor	r14, r14
    e8a8:	ea 94       	dec	r14
    e8aa:	fe 2c       	mov	r15, r14
    e8ac:	00 ee       	ldi	r16, 0xE0	; 224
    e8ae:	17 e0       	ldi	r17, 0x07	; 7
    e8b0:	21 e0       	ldi	r18, 0x01	; 1
    e8b2:	48 ec       	ldi	r20, 0xC8	; 200
    e8b4:	50 e0       	ldi	r21, 0x00	; 0
    e8b6:	6e e1       	ldi	r22, 0x1E	; 30
    e8b8:	70 e0       	ldi	r23, 0x00	; 0
    e8ba:	8d 2d       	mov	r24, r13
    e8bc:	9b 2d       	mov	r25, r11
    e8be:	0e 94 37 7d 	call	0xfa6e	; 0xfa6e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3961
      if (rtc.isrunning())
    e8c2:	0e 94 ee 89 	call	0x113dc	; 0x113dc <RTC_DS1307::isrunning() [clone .constprop.128]>
    e8c6:	88 23       	and	r24, r24
    e8c8:	99 f0       	breq	.+38     	; 0xe8f0 <setup+0x181c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3963
      {
        strcpy_P(str1, text_ok);
    e8ca:	6c e1       	ldi	r22, 0x1C	; 28
    e8cc:	7e e2       	ldi	r23, 0x2E	; 46
    e8ce:	8d 2d       	mov	r24, r13
    e8d0:	9b 2d       	mov	r25, r11
    e8d2:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3964
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    e8d6:	21 e0       	ldi	r18, 0x01	; 1
    e8d8:	48 ec       	ldi	r20, 0xC8	; 200
    e8da:	50 e0       	ldi	r21, 0x00	; 0
    e8dc:	60 ea       	ldi	r22, 0xA0	; 160
    e8de:	70 e0       	ldi	r23, 0x00	; 0
    e8e0:	8d 2d       	mov	r24, r13
    e8e2:	9b 2d       	mov	r25, r11
    e8e4:	0e 94 37 7d 	call	0xfa6e	; 0xfa6e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3290
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
    e8e8:	80 91 ce 0a 	lds	r24, 0x0ACE	; 0x800ace <selftest_data>
    e8ec:	8e 7f       	andi	r24, 0xFE	; 254
    e8ee:	6a c0       	rjmp	.+212    	; 0xe9c4 <setup+0x18f0>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3969
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
        selftest_clear_0(SELFTEST_ERR_RTC);
      }
      else
      {
        strcpy_P(str1, text_err);
    e8f0:	6f e8       	ldi	r22, 0x8F	; 143
    e8f2:	7e e2       	ldi	r23, 0x2E	; 46
    e8f4:	8d 2d       	mov	r24, r13
    e8f6:	9b 2d       	mov	r25, r11
    e8f8:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3970
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
    e8fc:	ee 24       	eor	r14, r14
    e8fe:	ea 94       	dec	r14
    e900:	fe 2c       	mov	r15, r14
    e902:	00 e0       	ldi	r16, 0x00	; 0
    e904:	18 ef       	ldi	r17, 0xF8	; 248
    e906:	21 e0       	ldi	r18, 0x01	; 1
    e908:	48 ec       	ldi	r20, 0xC8	; 200
    e90a:	50 e0       	ldi	r21, 0x00	; 0
    e90c:	60 ea       	ldi	r22, 0xA0	; 160
    e90e:	70 e0       	ldi	r23, 0x00	; 0
    e910:	8d 2d       	mov	r24, r13
    e912:	9b 2d       	mov	r25, r11
    e914:	0e 94 37 7d 	call	0xfa6e	; 0xfa6e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]>
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3281
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
    e918:	80 91 ce 0a 	lds	r24, 0x0ACE	; 0x800ace <selftest_data>
    e91c:	81 60       	ori	r24, 0x01	; 1
    e91e:	52 c0       	rjmp	.+164    	; 0xe9c4 <setup+0x18f0>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3790
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
    }

    ///  nacteni provoznich parametru
    if (init == 5)
    e920:	25 e0       	ldi	r18, 0x05	; 5
    e922:	a2 16       	cp	r10, r18
    e924:	09 f4       	brne	.+2      	; 0xe928 <setup+0x1854>
    e926:	94 cb       	rjmp	.-2264   	; 0xe050 <setup+0xf7c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3806
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
        last_output_update[idx] = 0;
    }
    ///
    /// zobrazeni kalibracnich informaci touchscreenu
    if (init == 6)
    e928:	36 e0       	ldi	r19, 0x06	; 6
    e92a:	a3 16       	cp	r10, r19
    e92c:	09 f4       	brne	.+2      	; 0xe930 <setup+0x185c>
    e92e:	b3 cc       	rjmp	.-1690   	; 0xe296 <setup+0x11c2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3814
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      my_touch.TP_Init(my_lcd.Get_Rotation(), my_lcd.Get_Display_Width(), my_lcd.Get_Display_Height());
    }
    ///
    /// inicializace ds2482
    if (init == 7)
    e930:	87 e0       	ldi	r24, 0x07	; 7
    e932:	a8 12       	cpse	r10, r24
    e934:	0a cd       	rjmp	.-1516   	; 0xe34a <setup+0x1276>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3816
    {
      strcpy_P(str1, text_onewire_rozhrani);
    e936:	6f ed       	ldi	r22, 0xDF	; 223
    e938:	7d e2       	ldi	r23, 0x2D	; 45
    e93a:	8d 2d       	mov	r24, r13
    e93c:	9b 2d       	mov	r25, r11
    e93e:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3817
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    e942:	ee 24       	eor	r14, r14
    e944:	ea 94       	dec	r14
    e946:	fe 2c       	mov	r15, r14
    e948:	00 ee       	ldi	r16, 0xE0	; 224
    e94a:	17 e0       	ldi	r17, 0x07	; 7
    e94c:	21 e0       	ldi	r18, 0x01	; 1
    e94e:	48 e7       	ldi	r20, 0x78	; 120
    e950:	50 e0       	ldi	r21, 0x00	; 0
    e952:	6e e1       	ldi	r22, 0x1E	; 30
    e954:	70 e0       	ldi	r23, 0x00	; 0
    e956:	8d 2d       	mov	r24, r13
    e958:	9b 2d       	mov	r25, r11
    e95a:	0e 94 37 7d 	call	0xfa6e	; 0xfa6e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3818
      ds2482_address[0].i2c_addr = 0b0011000;
    e95e:	88 e1       	ldi	r24, 0x18	; 24
    e960:	80 93 66 09 	sts	0x0966, r24	; 0x800966 <ds2482_address>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3819
      ds2482_address[0].HWwirenum = 0;
    e964:	10 92 67 09 	sts	0x0967, r1	; 0x800967 <ds2482_address+0x1>
    e968:	ea e1       	ldi	r30, 0x1A	; 26
    e96a:	fa e0       	ldi	r31, 0x0A	; 10
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3823
      ///
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++ )
      {
        status_tds18s20[idx].wait = false;
    e96c:	15 8e       	std	Z+29, r1	; 0x1d
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3824
        status_tds18s20[idx].period_now = 0;
    e96e:	14 8e       	std	Z+28, r1	; 0x1c
    e970:	7e 96       	adiw	r30, 0x1e	; 30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3821
      strcpy_P(str1, text_onewire_rozhrani);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      ds2482_address[0].i2c_addr = 0b0011000;
      ds2482_address[0].HWwirenum = 0;
      ///
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++ )
    e972:	ba e0       	ldi	r27, 0x0A	; 10
    e974:	ee 3c       	cpi	r30, 0xCE	; 206
    e976:	fb 07       	cpc	r31, r27
    e978:	c9 f7       	brne	.-14     	; 0xe96c <setup+0x1898>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    e97a:	4a e0       	ldi	r20, 0x0A	; 10
    e97c:	be 01       	movw	r22, r28
    e97e:	6e 50       	subi	r22, 0x0E	; 14
    e980:	7f 4f       	sbci	r23, 0xFF	; 255
    e982:	88 e1       	ldi	r24, 0x18	; 24
    e984:	90 e0       	ldi	r25, 0x00	; 0
    e986:	0e 94 27 a3 	call	0x1464e	; 0x1464e <__itoa_ncheck>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3827
      {
        status_tds18s20[idx].wait = false;
        status_tds18s20[idx].period_now = 0;
      }
      itoa(ds2482_address[0].i2c_addr, tmp1, 10);
      if (ds2482reset(ds2482_address[0].i2c_addr) == DS2482_ERR_OK)
    e98a:	80 91 66 09 	lds	r24, 0x0966	; 0x800966 <ds2482_address>
    e98e:	0e 94 05 8a 	call	0x1140a	; 0x1140a <ds2482reset(unsigned char)>
    e992:	81 11       	cpse	r24, r1
    e994:	c2 cc       	rjmp	.-1660   	; 0xe31a <setup+0x1246>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3829
      {
        strcpy_P(str1, text_ok);
    e996:	6c e1       	ldi	r22, 0x1C	; 28
    e998:	7e e2       	ldi	r23, 0x2E	; 46
    e99a:	8d 2d       	mov	r24, r13
    e99c:	9b 2d       	mov	r25, r11
    e99e:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3830
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    e9a2:	ee 24       	eor	r14, r14
    e9a4:	ea 94       	dec	r14
    e9a6:	fe 2c       	mov	r15, r14
    e9a8:	00 ee       	ldi	r16, 0xE0	; 224
    e9aa:	17 e0       	ldi	r17, 0x07	; 7
    e9ac:	21 e0       	ldi	r18, 0x01	; 1
    e9ae:	48 e7       	ldi	r20, 0x78	; 120
    e9b0:	50 e0       	ldi	r21, 0x00	; 0
    e9b2:	60 ea       	ldi	r22, 0xA0	; 160
    e9b4:	70 e0       	ldi	r23, 0x00	; 0
    e9b6:	8d 2d       	mov	r24, r13
    e9b8:	9b 2d       	mov	r25, r11
    e9ba:	0e 94 37 7d 	call	0xfa6e	; 0xfa6e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3290
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
    e9be:	80 91 ce 0a 	lds	r24, 0x0ACE	; 0x800ace <selftest_data>
    e9c2:	8b 7f       	andi	r24, 0xFB	; 251
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3281
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
    e9c4:	80 93 ce 0a 	sts	0x0ACE, r24	; 0x800ace <selftest_data>
    e9c8:	2d cc       	rjmp	.-1958   	; 0xe224 <setup+0x1150>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3872
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      delay(100);
    }
    ///
    ///inicializace mqtt rozhrani
    if (init == 10)
    e9ca:	9a e0       	ldi	r25, 0x0A	; 10
    e9cc:	a9 12       	cpse	r10, r25
    e9ce:	08 ce       	rjmp	.-1008   	; 0xe5e0 <setup+0x150c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3874
    {
      strcpy_P(str1, text_mqtt_rozhrani);
    e9d0:	62 eb       	ldi	r22, 0xB2	; 178
    e9d2:	7d e2       	ldi	r23, 0x2D	; 45
    e9d4:	c1 01       	movw	r24, r2
    e9d6:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3875
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    e9da:	ee 24       	eor	r14, r14
    e9dc:	ea 94       	dec	r14
    e9de:	fe 2c       	mov	r15, r14
    e9e0:	00 ee       	ldi	r16, 0xE0	; 224
    e9e2:	17 e0       	ldi	r17, 0x07	; 7
    e9e4:	21 e0       	ldi	r18, 0x01	; 1
    e9e6:	46 e9       	ldi	r20, 0x96	; 150
    e9e8:	50 e0       	ldi	r21, 0x00	; 0
    e9ea:	6e e1       	ldi	r22, 0x1E	; 30
    e9ec:	70 e0       	ldi	r23, 0x00	; 0
    e9ee:	c1 01       	movw	r24, r2
    e9f0:	0e 94 37 7d 	call	0xfa6e	; 0xfa6e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3876
      mqtt_client.setServer(device.mqtt_server, device.mqtt_port);
    e9f4:	80 91 43 0c 	lds	r24, 0x0C43	; 0x800c43 <device+0x24>
    e9f8:	90 91 44 0c 	lds	r25, 0x0C44	; 0x800c44 <device+0x25>
setServer():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:556
    }
    return rc;
}

PubSubClient& PubSubClient::setServer(uint8_t * ip, uint16_t port) {
    IPAddress addr(ip[0],ip[1],ip[2],ip[3]);
    e9fc:	20 91 42 0c 	lds	r18, 0x0C42	; 0x800c42 <device+0x23>
    ea00:	30 91 41 0c 	lds	r19, 0x0C41	; 0x800c41 <device+0x22>
    ea04:	40 91 40 0c 	lds	r20, 0x0C40	; 0x800c40 <device+0x21>
_ZN9IPAddressaSERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
    ea08:	50 91 3f 0c 	lds	r21, 0x0C3F	; 0x800c3f <device+0x20>
    ea0c:	50 93 23 10 	sts	0x1023, r21	; 0x801023 <mqtt_client+0x211>
    ea10:	40 93 24 10 	sts	0x1024, r20	; 0x801024 <mqtt_client+0x212>
    ea14:	30 93 25 10 	sts	0x1025, r19	; 0x801025 <mqtt_client+0x213>
    ea18:	20 93 26 10 	sts	0x1026, r18	; 0x801026 <mqtt_client+0x214>
setServer():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:562
    return setServer(addr,port);
}

PubSubClient& PubSubClient::setServer(IPAddress ip, uint16_t port) {
    this->ip = ip;
    this->port = port;
    ea1c:	90 93 2a 10 	sts	0x102A, r25	; 0x80102a <mqtt_client+0x218>
    ea20:	80 93 29 10 	sts	0x1029, r24	; 0x801029 <mqtt_client+0x217>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:563
    this->domain = NULL;
    ea24:	10 92 28 10 	sts	0x1028, r1	; 0x801028 <mqtt_client+0x216>
    ea28:	10 92 27 10 	sts	0x1027, r1	; 0x801027 <mqtt_client+0x215>
setCallback():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:574
    this->port = port;
    return *this;
}

PubSubClient& PubSubClient::setCallback(MQTT_CALLBACK_SIGNATURE) {
    this->callback = callback;
    ea2c:	8b e3       	ldi	r24, 0x3B	; 59
    ea2e:	98 e5       	ldi	r25, 0x58	; 88
    ea30:	90 93 20 10 	sts	0x1020, r25	; 0x801020 <mqtt_client+0x20e>
    ea34:	80 93 1f 10 	sts	0x101F, r24	; 0x80101f <mqtt_client+0x20d>
send_mqtt_set_header():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:162

////////////////////////////////////////////////////////////////////////////////////////////////////////
//****************************************************************************************************//
void send_mqtt_set_header(char* header)
{
  header_out = header;
    ea38:	83 ea       	ldi	r24, 0xA3	; 163
    ea3a:	9d e2       	ldi	r25, 0x2D	; 45
    ea3c:	90 93 68 0b 	sts	0x0B68, r25	; 0x800b68 <header_out+0x1>
    ea40:	80 93 67 0b 	sts	0x0B67, r24	; 0x800b67 <header_out>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3879
      mqtt_client.setCallback(mqtt_callback);
      send_mqtt_set_header(thermctl_header_out);
      milis = millis();
    ea44:	0e 94 1d 85 	call	0x10a3a	; 0x10a3a <millis>
    ea48:	2b 01       	movw	r4, r22
    ea4a:	3c 01       	movw	r6, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3880
      while ((millis() - milis) < 3000 )
    ea4c:	0e 94 1d 85 	call	0x10a3a	; 0x10a3a <millis>
    ea50:	64 19       	sub	r22, r4
    ea52:	75 09       	sbc	r23, r5
    ea54:	86 09       	sbc	r24, r6
    ea56:	97 09       	sbc	r25, r7
    ea58:	68 3b       	cpi	r22, 0xB8	; 184
    ea5a:	7b 40       	sbci	r23, 0x0B	; 11
    ea5c:	81 05       	cpc	r24, r1
    ea5e:	91 05       	cpc	r25, r1
    ea60:	58 f4       	brcc	.+22     	; 0xea78 <setup+0x19a4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3882
      {
        mqtt_client.loop();
    ea62:	0e 94 4a 8c 	call	0x11894	; 0x11894 <PubSubClient::loop() [clone .constprop.107]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3883
        if (mqtt_reconnect() == 0)
    ea66:	0e 94 1a 67 	call	0xce34	; 0xce34 <mqtt_reconnect()>
    ea6a:	90 91 ce 0a 	lds	r25, 0x0ACE	; 0x800ace <selftest_data>
    ea6e:	81 11       	cpse	r24, r1
    ea70:	a7 cd       	rjmp	.-1202   	; 0xe5c0 <setup+0x14ec>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3290
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
    ea72:	9f 7d       	andi	r25, 0xDF	; 223
    ea74:	90 93 ce 0a 	sts	0x0ACE, r25	; 0x800ace <selftest_data>
selftest_get_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3303
     ... 0 - neni oznacen jako chybny
     ... neni 0 - chybny flag
*/
uint8_t selftest_get_0(uint8_t what)
{
  return selftest_data & (1 << what);
    ea78:	80 91 ce 0a 	lds	r24, 0x0ACE	; 0x800ace <selftest_data>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3892
        }
        else
          selftest_set_0(SELFTEST_MQTT_LINK);
      }

      if (selftest_get_0(SELFTEST_MQTT_LINK) != 0)
    ea7c:	85 ff       	sbrs	r24, 5
    ea7e:	a4 cd       	rjmp	.-1208   	; 0xe5c8 <setup+0x14f4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3894
      {
        strcpy_P(str1, text_err);
    ea80:	6f e8       	ldi	r22, 0x8F	; 143
    ea82:	7e e2       	ldi	r23, 0x2E	; 46
    ea84:	8d 2d       	mov	r24, r13
    ea86:	9b 2d       	mov	r25, r11
    ea88:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3895
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
    ea8c:	ee 24       	eor	r14, r14
    ea8e:	ea 94       	dec	r14
    ea90:	fe 2c       	mov	r15, r14
    ea92:	00 e0       	ldi	r16, 0x00	; 0
    ea94:	18 ef       	ldi	r17, 0xF8	; 248
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3900
      }
      else
      {
        strcpy_P(str1, text_ok);
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    ea96:	21 e0       	ldi	r18, 0x01	; 1
    ea98:	46 e9       	ldi	r20, 0x96	; 150
    ea9a:	50 e0       	ldi	r21, 0x00	; 0
    ea9c:	f3 cc       	rjmp	.-1562   	; 0xe484 <setup+0x13b0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3920
      strcpy_P(str1, text_nrf_rozhrani);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    }
    ///
    /// inicializace termostatu
    if (init == 13)
    ea9e:	ad e0       	ldi	r26, 0x0D	; 13
    eaa0:	aa 12       	cpse	r10, r26
    eaa2:	0c 94 12 6c 	jmp	0xd824	; 0xd824 <setup+0x750>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3922
    {
      strcpy_P(str1, text_pid_regulator);
    eaa6:	66 e7       	ldi	r22, 0x76	; 118
    eaa8:	7d e2       	ldi	r23, 0x2D	; 45
    eaaa:	8d 2d       	mov	r24, r13
    eaac:	9b 2d       	mov	r25, r11
    eaae:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3923
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    eab2:	ee 24       	eor	r14, r14
    eab4:	ea 94       	dec	r14
    eab6:	fe 2c       	mov	r15, r14
    eab8:	00 ee       	ldi	r16, 0xE0	; 224
    eaba:	17 e0       	ldi	r17, 0x07	; 7
    eabc:	21 e0       	ldi	r18, 0x01	; 1
    eabe:	44 eb       	ldi	r20, 0xB4	; 180
    eac0:	50 e0       	ldi	r21, 0x00	; 0
    eac2:	6e e1       	ldi	r22, 0x1E	; 30
    eac4:	70 e0       	ldi	r23, 0x00	; 0
    eac6:	8d 2d       	mov	r24, r13
    eac8:	9b 2d       	mov	r25, r11
    eaca:	0e 94 37 7d 	call	0xfa6e	; 0xfa6e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]>
    eace:	a9 e7       	ldi	r26, 0x79	; 121
    ead0:	b8 e0       	ldi	r27, 0x08	; 8
    ead2:	c0 5c       	subi	r28, 0xC0	; 192
    ead4:	de 4f       	sbci	r29, 0xFE	; 254
    ead6:	b9 83       	std	Y+1, r27	; 0x01
    ead8:	a8 83       	st	Y, r26
    eada:	c0 54       	subi	r28, 0x40	; 64
    eadc:	d1 40       	sbci	r29, 0x01	; 1
    eade:	e5 e6       	ldi	r30, 0x65	; 101
    eae0:	f8 e0       	ldi	r31, 0x08	; 8
    eae2:	ce 5b       	subi	r28, 0xBE	; 190
    eae4:	de 4f       	sbci	r29, 0xFE	; 254
    eae6:	f9 83       	std	Y+1, r31	; 0x01
    eae8:	e8 83       	st	Y, r30
    eaea:	c2 54       	subi	r28, 0x42	; 66
    eaec:	d1 40       	sbci	r29, 0x01	; 1
    eaee:	fd e8       	ldi	r31, 0x8D	; 141
    eaf0:	ef 2e       	mov	r14, r31
    eaf2:	f8 e0       	ldi	r31, 0x08	; 8
    eaf4:	ff 2e       	mov	r15, r31
    eaf6:	91 2c       	mov	r9, r1
    eaf8:	81 2c       	mov	r8, r1
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:107
void PID::SetTunings(double Kp, double Ki, double Kd, int POn)
{
   if (Kp<0 || Ki<0 || Kd<0) return;

   pOn = POn;
   pOnE = POn == P_ON_E;
    eafa:	cc 24       	eor	r12, r12
    eafc:	c3 94       	inc	r12
operator new():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/new.cpp:22
*/

#include <stdlib.h>

void *operator new(size_t size) {
  return malloc(size);
    eafe:	8c e3       	ldi	r24, 0x3C	; 60
    eb00:	90 e0       	ldi	r25, 0x00	; 0
    eb02:	0e 94 36 a7 	call	0x14e6c	; 0x14e6c <malloc>
    eb06:	8c 01       	movw	r16, r24
__base_ctor ():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:23
 *    reliable defaults, so we need to have the user set them.
 ***************************************************************************/
PID::PID(double* Input, double* Output, double* Setpoint,
        double Kp, double Ki, double Kd, int POn, int ControllerDirection)
{
    myOutput = Output;
    eb08:	c0 5c       	subi	r28, 0xC0	; 192
    eb0a:	de 4f       	sbci	r29, 0xFE	; 254
    eb0c:	e8 81       	ld	r30, Y
    eb0e:	f9 81       	ldd	r31, Y+1	; 0x01
    eb10:	c0 54       	subi	r28, 0x40	; 64
    eb12:	d1 40       	sbci	r29, 0x01	; 1
    eb14:	dc 01       	movw	r26, r24
    eb16:	5f 96       	adiw	r26, 0x1f	; 31
    eb18:	fc 93       	st	X, r31
    eb1a:	ee 93       	st	-X, r30
    eb1c:	5e 97       	sbiw	r26, 0x1e	; 30
/home/saric/Arduino/libraries/PID/PID_v1.cpp:24
    myInput = Input;
    eb1e:	ce 5b       	subi	r28, 0xBE	; 190
    eb20:	de 4f       	sbci	r29, 0xFE	; 254
    eb22:	28 81       	ld	r18, Y
    eb24:	39 81       	ldd	r19, Y+1	; 0x01
    eb26:	c2 54       	subi	r28, 0x42	; 66
    eb28:	d1 40       	sbci	r29, 0x01	; 1
    eb2a:	5d 96       	adiw	r26, 0x1d	; 29
    eb2c:	3c 93       	st	X, r19
    eb2e:	2e 93       	st	-X, r18
    eb30:	5c 97       	sbiw	r26, 0x1c	; 28
/home/saric/Arduino/libraries/PID/PID_v1.cpp:25
    mySetpoint = Setpoint;
    eb32:	91 96       	adiw	r26, 0x21	; 33
    eb34:	fc 92       	st	X, r15
    eb36:	ee 92       	st	-X, r14
    eb38:	90 97       	sbiw	r26, 0x20	; 32
/home/saric/Arduino/libraries/PID/PID_v1.cpp:26
    inAuto = false;
    eb3a:	da 96       	adiw	r26, 0x3a	; 58
    eb3c:	1c 92       	st	X, r1
    eb3e:	da 97       	sbiw	r26, 0x3a	; 58
SetOutputLimits():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:157
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   if(Min >= Max) return;
   outMin = Min;
    eb40:	d2 96       	adiw	r26, 0x32	; 50
    eb42:	1d 92       	st	X+, r1
    eb44:	1d 92       	st	X+, r1
    eb46:	1d 92       	st	X+, r1
    eb48:	1c 92       	st	X, r1
    eb4a:	d5 97       	sbiw	r26, 0x35	; 53
/home/saric/Arduino/libraries/PID/PID_v1.cpp:158
   outMax = Max;
    eb4c:	80 e0       	ldi	r24, 0x00	; 0
    eb4e:	90 e0       	ldi	r25, 0x00	; 0
    eb50:	af e7       	ldi	r26, 0x7F	; 127
    eb52:	b3 e4       	ldi	r27, 0x43	; 67
    eb54:	f8 01       	movw	r30, r16
    eb56:	86 ab       	std	Z+54, r24	; 0x36
    eb58:	97 ab       	std	Z+55, r25	; 0x37
    eb5a:	a0 af       	std	Z+56, r26	; 0x38
    eb5c:	b1 af       	std	Z+57, r27	; 0x39
__base_ctor ():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:31
    inAuto = false;

    PID::SetOutputLimits(0, 255);				//default output limit corresponds to
												//the arduino pwm limits

    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds
    eb5e:	84 e6       	ldi	r24, 0x64	; 100
    eb60:	90 e0       	ldi	r25, 0x00	; 0
    eb62:	a0 e0       	ldi	r26, 0x00	; 0
    eb64:	b0 e0       	ldi	r27, 0x00	; 0
    eb66:	86 a7       	std	Z+46, r24	; 0x2e
    eb68:	97 a7       	std	Z+47, r25	; 0x2f
    eb6a:	a0 ab       	std	Z+48, r26	; 0x30
    eb6c:	b1 ab       	std	Z+49, r27	; 0x31
SetControllerDirection():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:211
   {
	    kp = (0 - kp);
      ki = (0 - ki);
      kd = (0 - kd);
   }
   controllerDirection = Direction;
    eb6e:	11 8e       	std	Z+25, r1	; 0x19
    eb70:	10 8e       	std	Z+24, r1	; 0x18
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:106
 ******************************************************************************/
void PID::SetTunings(double Kp, double Ki, double Kd, int POn)
{
   if (Kp<0 || Ki<0 || Kd<0) return;

   pOn = POn;
    eb72:	21 e0       	ldi	r18, 0x01	; 1
    eb74:	30 e0       	ldi	r19, 0x00	; 0
    eb76:	33 8f       	std	Z+27, r19	; 0x1b
    eb78:	22 8f       	std	Z+26, r18	; 0x1a
/home/saric/Arduino/libraries/PID/PID_v1.cpp:107
   pOnE = POn == P_ON_E;
    eb7a:	c3 ae       	std	Z+59, r12	; 0x3b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:109

   dispKp = Kp; dispKi = Ki; dispKd = Kd;
    eb7c:	80 e0       	ldi	r24, 0x00	; 0
    eb7e:	90 e0       	ldi	r25, 0x00	; 0
    eb80:	a0 e0       	ldi	r26, 0x00	; 0
    eb82:	b0 e4       	ldi	r27, 0x40	; 64
    eb84:	80 83       	st	Z, r24
    eb86:	91 83       	std	Z+1, r25	; 0x01
    eb88:	a2 83       	std	Z+2, r26	; 0x02
    eb8a:	b3 83       	std	Z+3, r27	; 0x03
    eb8c:	80 e0       	ldi	r24, 0x00	; 0
    eb8e:	90 e0       	ldi	r25, 0x00	; 0
    eb90:	a0 ea       	ldi	r26, 0xA0	; 160
    eb92:	b0 e4       	ldi	r27, 0x40	; 64
    eb94:	84 83       	std	Z+4, r24	; 0x04
    eb96:	95 83       	std	Z+5, r25	; 0x05
    eb98:	a6 83       	std	Z+6, r26	; 0x06
    eb9a:	b7 83       	std	Z+7, r27	; 0x07
    eb9c:	80 e0       	ldi	r24, 0x00	; 0
    eb9e:	90 e0       	ldi	r25, 0x00	; 0
    eba0:	a0 e8       	ldi	r26, 0x80	; 128
    eba2:	bf e3       	ldi	r27, 0x3F	; 63
    eba4:	80 87       	std	Z+8, r24	; 0x08
    eba6:	91 87       	std	Z+9, r25	; 0x09
    eba8:	a2 87       	std	Z+10, r26	; 0x0a
    ebaa:	b3 87       	std	Z+11, r27	; 0x0b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:112

   double SampleTimeInSec = ((double)SampleTime)/1000;
   kp = Kp;
    ebac:	80 e0       	ldi	r24, 0x00	; 0
    ebae:	90 e0       	ldi	r25, 0x00	; 0
    ebb0:	a0 e0       	ldi	r26, 0x00	; 0
    ebb2:	b0 e4       	ldi	r27, 0x40	; 64
    ebb4:	84 87       	std	Z+12, r24	; 0x0c
    ebb6:	95 87       	std	Z+13, r25	; 0x0d
    ebb8:	a6 87       	std	Z+14, r26	; 0x0e
    ebba:	b7 87       	std	Z+15, r27	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:113
   ki = Ki * SampleTimeInSec;
    ebbc:	80 e0       	ldi	r24, 0x00	; 0
    ebbe:	90 e0       	ldi	r25, 0x00	; 0
    ebc0:	a0 e0       	ldi	r26, 0x00	; 0
    ebc2:	bf e3       	ldi	r27, 0x3F	; 63
    ebc4:	80 8b       	std	Z+16, r24	; 0x10
    ebc6:	91 8b       	std	Z+17, r25	; 0x11
    ebc8:	a2 8b       	std	Z+18, r26	; 0x12
    ebca:	b3 8b       	std	Z+19, r27	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:114
   kd = Kd / SampleTimeInSec;
    ebcc:	80 e0       	ldi	r24, 0x00	; 0
    ebce:	90 e0       	ldi	r25, 0x00	; 0
    ebd0:	a0 e2       	ldi	r26, 0x20	; 32
    ebd2:	b1 e4       	ldi	r27, 0x41	; 65
    ebd4:	84 8b       	std	Z+20, r24	; 0x14
    ebd6:	95 8b       	std	Z+21, r25	; 0x15
    ebd8:	a6 8b       	std	Z+22, r26	; 0x16
    ebda:	b7 8b       	std	Z+23, r27	; 0x17
__base_ctor ():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:36
    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds

    PID::SetControllerDirection(ControllerDirection);
    PID::SetTunings(Kp, Ki, Kd, POn);

    lastTime = (millis() / 1000) - SampleTime;
    ebdc:	0e 94 1d 85 	call	0x10a3a	; 0x10a3a <millis>
    ebe0:	28 ee       	ldi	r18, 0xE8	; 232
    ebe2:	33 e0       	ldi	r19, 0x03	; 3
    ebe4:	40 e0       	ldi	r20, 0x00	; 0
    ebe6:	50 e0       	ldi	r21, 0x00	; 0
    ebe8:	0e 94 d9 ac 	call	0x159b2	; 0x159b2 <__udivmodsi4>
    ebec:	f8 01       	movw	r30, r16
    ebee:	86 a5       	ldd	r24, Z+46	; 0x2e
    ebf0:	97 a5       	ldd	r25, Z+47	; 0x2f
    ebf2:	a0 a9       	ldd	r26, Z+48	; 0x30
    ebf4:	b1 a9       	ldd	r27, Z+49	; 0x31
    ebf6:	28 1b       	sub	r18, r24
    ebf8:	39 0b       	sbc	r19, r25
    ebfa:	4a 0b       	sbc	r20, r26
    ebfc:	5b 0b       	sbc	r21, r27
    ebfe:	d8 01       	movw	r26, r16
    ec00:	22 a3       	std	Z+34, r18	; 0x22
    ec02:	33 a3       	std	Z+35, r19	; 0x23
    ec04:	44 a3       	std	Z+36, r20	; 0x24
    ec06:	55 a3       	std	Z+37, r21	; 0x25
thermostat_init_pid():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:42

void thermostat_init_pid(void)
{
  for (uint8_t p = 0; p < MAX_THERMOSTAT; p++)
  {
    array_pids[p] = new PID(&PID_Input[p], &PID_Output[p], &PID_Setpoint[p], 2, 5, 1, DIRECT);
    ec08:	e0 91 1d 0c 	lds	r30, 0x0C1D	; 0x800c1d <array_pids>
    ec0c:	f0 91 1e 0c 	lds	r31, 0x0C1E	; 0x800c1e <array_pids+0x1>
    ec10:	e8 0d       	add	r30, r8
    ec12:	f9 1d       	adc	r31, r9
    ec14:	11 83       	std	Z+1, r17	; 0x01
    ec16:	00 83       	st	Z, r16
SetMode():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:178
 * automatically initialized
 ******************************************************************************/
void PID::SetMode(int Mode)
{
    bool newAuto = (Mode == AUTOMATIC);
    if(newAuto && !inAuto)
    ec18:	da 96       	adiw	r26, 0x3a	; 58
    ec1a:	8c 91       	ld	r24, X
    ec1c:	da 97       	sbiw	r26, 0x3a	; 58
    ec1e:	81 11       	cpse	r24, r1
    ec20:	1a cd       	rjmp	.-1484   	; 0xe656 <setup+0x1582>
Initialize():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:191
 *	does all the things that need to happen to ensure a bumpless transfer
 *  from manual to automatic mode.
 ******************************************************************************/
void PID::Initialize()
{
   outputSum = *myOutput;
    ec22:	5e 96       	adiw	r26, 0x1e	; 30
    ec24:	ed 91       	ld	r30, X+
    ec26:	fc 91       	ld	r31, X
    ec28:	40 80       	ld	r4, Z
    ec2a:	51 80       	ldd	r5, Z+1	; 0x01
    ec2c:	62 80       	ldd	r6, Z+2	; 0x02
    ec2e:	73 80       	ldd	r7, Z+3	; 0x03
    ec30:	f8 01       	movw	r30, r16
    ec32:	46 a2       	std	Z+38, r4	; 0x26
    ec34:	57 a2       	std	Z+39, r5	; 0x27
    ec36:	60 a6       	std	Z+40, r6	; 0x28
    ec38:	71 a6       	std	Z+41, r7	; 0x29
/home/saric/Arduino/libraries/PID/PID_v1.cpp:192
   lastInput = *myInput;
    ec3a:	04 8c       	ldd	r0, Z+28	; 0x1c
    ec3c:	f5 8d       	ldd	r31, Z+29	; 0x1d
    ec3e:	e0 2d       	mov	r30, r0
    ec40:	80 81       	ld	r24, Z
    ec42:	91 81       	ldd	r25, Z+1	; 0x01
    ec44:	a2 81       	ldd	r26, Z+2	; 0x02
    ec46:	b3 81       	ldd	r27, Z+3	; 0x03
    ec48:	f8 01       	movw	r30, r16
    ec4a:	82 a7       	std	Z+42, r24	; 0x2a
    ec4c:	93 a7       	std	Z+43, r25	; 0x2b
    ec4e:	a4 a7       	std	Z+44, r26	; 0x2c
    ec50:	b5 a7       	std	Z+45, r27	; 0x2d
/home/saric/Arduino/libraries/PID/PID_v1.cpp:193
   if(outputSum > outMax) outputSum = outMax;
    ec52:	86 a9       	ldd	r24, Z+54	; 0x36
    ec54:	97 a9       	ldd	r25, Z+55	; 0x37
    ec56:	a0 ad       	ldd	r26, Z+56	; 0x38
    ec58:	b1 ad       	ldd	r27, Z+57	; 0x39
    ec5a:	c8 5c       	subi	r28, 0xC8	; 200
    ec5c:	de 4f       	sbci	r29, 0xFE	; 254
    ec5e:	88 83       	st	Y, r24
    ec60:	99 83       	std	Y+1, r25	; 0x01
    ec62:	aa 83       	std	Y+2, r26	; 0x02
    ec64:	bb 83       	std	Y+3, r27	; 0x03
    ec66:	c8 53       	subi	r28, 0x38	; 56
    ec68:	d1 40       	sbci	r29, 0x01	; 1
    ec6a:	9c 01       	movw	r18, r24
    ec6c:	ad 01       	movw	r20, r26
    ec6e:	c3 01       	movw	r24, r6
    ec70:	b2 01       	movw	r22, r4
    ec72:	0e 94 49 ae 	call	0x15c92	; 0x15c92 <__gesf2>
    ec76:	18 16       	cp	r1, r24
    ec78:	0c f0       	brlt	.+2      	; 0xec7c <setup+0x1ba8>
    ec7a:	d6 cc       	rjmp	.-1620   	; 0xe628 <setup+0x1554>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:194
   else if(outputSum < outMin) outputSum = outMin;
    ec7c:	c8 5c       	subi	r28, 0xC8	; 200
    ec7e:	de 4f       	sbci	r29, 0xFE	; 254
    ec80:	88 81       	ld	r24, Y
    ec82:	99 81       	ldd	r25, Y+1	; 0x01
    ec84:	aa 81       	ldd	r26, Y+2	; 0x02
    ec86:	bb 81       	ldd	r27, Y+3	; 0x03
    ec88:	c8 53       	subi	r28, 0x38	; 56
    ec8a:	d1 40       	sbci	r29, 0x01	; 1
    ec8c:	f8 01       	movw	r30, r16
    ec8e:	86 a3       	std	Z+38, r24	; 0x26
    ec90:	97 a3       	std	Z+39, r25	; 0x27
    ec92:	a0 a7       	std	Z+40, r26	; 0x28
    ec94:	b1 a7       	std	Z+41, r27	; 0x29
    ec96:	df cc       	rjmp	.-1602   	; 0xe656 <setup+0x1582>

0000ec98 <get_function_default_temp(unsigned char, unsigned char, char*, char*)>:
_Z25get_function_default_temphhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1720


////////////////////////////////////////////////////////////

void get_function_default_temp(uint8_t args1, uint8_t args2, char *line1, char *line2)
{
    ec98:	9f 92       	push	r9
    ec9a:	af 92       	push	r10
    ec9c:	bf 92       	push	r11
    ec9e:	cf 92       	push	r12
    eca0:	df 92       	push	r13
    eca2:	ef 92       	push	r14
    eca4:	ff 92       	push	r15
    eca6:	0f 93       	push	r16
    eca8:	1f 93       	push	r17
    ecaa:	cf 93       	push	r28
    ecac:	df 93       	push	r29
    ecae:	cd b7       	in	r28, 0x3d	; 61
    ecb0:	de b7       	in	r29, 0x3e	; 62
    ecb2:	aa 97       	sbiw	r28, 0x2a	; 42
    ecb4:	0f b6       	in	r0, 0x3f	; 63
    ecb6:	f8 94       	cli
    ecb8:	de bf       	out	0x3e, r29	; 62
    ecba:	0f be       	out	0x3f, r0	; 63
    ecbc:	cd bf       	out	0x3d, r28	; 61
    ecbe:	98 2e       	mov	r9, r24
    ecc0:	7a 01       	movw	r14, r20
    ecc2:	69 01       	movw	r12, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1724
  char name[20];
  uint8_t cri = 0;
  uint8_t active;
  strcpy(line1, "");
    ecc4:	62 ef       	ldi	r22, 0xF2	; 242
    ecc6:	72 e0       	ldi	r23, 0x02	; 2
    ecc8:	ca 01       	movw	r24, r20
    ecca:	0e 94 70 af 	call	0x15ee0	; 0x15ee0 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1725
  strcpy(line2, "");
    ecce:	62 ef       	ldi	r22, 0xF2	; 242
    ecd0:	72 e0       	ldi	r23, 0x02	; 2
    ecd2:	c6 01       	movw	r24, r12
    ecd4:	0e 94 70 af 	call	0x15ee0	; 0x15ee0 <strcpy>
    ecd8:	88 ec       	ldi	r24, 0xC8	; 200
    ecda:	a8 2e       	mov	r10, r24
    ecdc:	b1 2c       	mov	r11, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1727
  ///
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    ecde:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1722
////////////////////////////////////////////////////////////

void get_function_default_temp(uint8_t args1, uint8_t args2, char *line1, char *line2)
{
  char name[20];
  uint8_t cri = 0;
    ece0:	10 e0       	ldi	r17, 0x00	; 0
tds_used():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:29

uint8_t tds_used(uint8_t idx)
{
  if (idx < HW_ONEWIRE_MAXROMS)
  {
    return EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used);
    ece2:	c5 01       	movw	r24, r10
    ece4:	0e 94 49 8f 	call	0x11e92	; 0x11e92 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
_Z25get_function_default_temphhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1729
  strcpy(line1, "");
  strcpy(line2, "");
  ///
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
  {
    if (tds_used(idx) == 1)
    ece8:	81 30       	cpi	r24, 0x01	; 1
    ecea:	69 f5       	brne	.+90     	; 0xed46 <get_function_default_temp(unsigned char, unsigned char, char*, char*)+0xae>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1731
    {
      if (cri == args1)
    ecec:	91 12       	cpse	r9, r17
    ecee:	2a c0       	rjmp	.+84     	; 0xed44 <get_function_default_temp(unsigned char, unsigned char, char*, char*)+0xac>
tds_get_name():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:75

//// ziska nazev tds cidla
void tds_get_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    ecf0:	be 01       	movw	r22, r28
    ecf2:	6f 5f       	subi	r22, 0xFF	; 255
    ecf4:	7f 4f       	sbci	r23, 0xFF	; 255
    ecf6:	80 2f       	mov	r24, r16
    ecf8:	0e 94 32 4e 	call	0x9c64	; 0x9c64 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:76
  strcpy(name, tds.name);
    ecfc:	be 01       	movw	r22, r28
    ecfe:	63 5f       	subi	r22, 0xF3	; 243
    ed00:	7f 4f       	sbci	r23, 0xFF	; 255
    ed02:	ce 01       	movw	r24, r28
    ed04:	47 96       	adiw	r24, 0x17	; 23
    ed06:	0e 94 70 af 	call	0x15ee0	; 0x15ee0 <strcpy>
_Z25get_function_default_temphhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1734
      {
        tds_get_name(idx, name);
        strcpy(line2, name);
    ed0a:	be 01       	movw	r22, r28
    ed0c:	69 5e       	subi	r22, 0xE9	; 233
    ed0e:	7f 4f       	sbci	r23, 0xFF	; 255
    ed10:	c6 01       	movw	r24, r12
    ed12:	0e 94 70 af 	call	0x15ee0	; 0x15ee0 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1735
        strcpy_P(line1, nastaveni_onewire);
    ed16:	63 e6       	ldi	r22, 0x63	; 99
    ed18:	7b e2       	ldi	r23, 0x2B	; 43
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1751
    {
      if (cri == args1)
      {
        remote_tds_get_complete(idx, &active, name);
        strcpy(line2, name);
        strcpy_P(line1, nastaveni_rtds);
    ed1a:	c7 01       	movw	r24, r14
    ed1c:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1760
    }
  }
get_function_default_temp_end:
  /// hack kvuli goto
  cri = 0;
}
    ed20:	aa 96       	adiw	r28, 0x2a	; 42
    ed22:	0f b6       	in	r0, 0x3f	; 63
    ed24:	f8 94       	cli
    ed26:	de bf       	out	0x3e, r29	; 62
    ed28:	0f be       	out	0x3f, r0	; 63
    ed2a:	cd bf       	out	0x3d, r28	; 61
    ed2c:	df 91       	pop	r29
    ed2e:	cf 91       	pop	r28
    ed30:	1f 91       	pop	r17
    ed32:	0f 91       	pop	r16
    ed34:	ff 90       	pop	r15
    ed36:	ef 90       	pop	r14
    ed38:	df 90       	pop	r13
    ed3a:	cf 90       	pop	r12
    ed3c:	bf 90       	pop	r11
    ed3e:	af 90       	pop	r10
    ed40:	9f 90       	pop	r9
    ed42:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1738
        tds_get_name(idx, name);
        strcpy(line2, name);
        strcpy_P(line1, nastaveni_onewire);
        goto get_function_default_temp_end;
      }
      cri++;
    ed44:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1727
  uint8_t cri = 0;
  uint8_t active;
  strcpy(line1, "");
  strcpy(line2, "");
  ///
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    ed46:	0f 5f       	subi	r16, 0xFF	; 255
    ed48:	86 e1       	ldi	r24, 0x16	; 22
    ed4a:	a8 0e       	add	r10, r24
    ed4c:	b1 1c       	adc	r11, r1
    ed4e:	06 30       	cpi	r16, 0x06	; 6
    ed50:	41 f6       	brne	.-112    	; 0xece2 <get_function_default_temp(unsigned char, unsigned char, char*, char*)+0x4a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1742
      }
      cri++;
    }
  }
  ///
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    ed52:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1744
  {
    remote_tds_get_active(idx, &active);
    ed54:	be 01       	movw	r22, r28
    ed56:	6f 5f       	subi	r22, 0xFF	; 255
    ed58:	7f 4f       	sbci	r23, 0xFF	; 255
    ed5a:	80 2f       	mov	r24, r16
    ed5c:	0e 94 ba 53 	call	0xa774	; 0xa774 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1745
    if (active == 1)
    ed60:	89 81       	ldd	r24, Y+1	; 0x01
    ed62:	81 30       	cpi	r24, 0x01	; 1
    ed64:	a9 f4       	brne	.+42     	; 0xed90 <get_function_default_temp(unsigned char, unsigned char, char*, char*)+0xf8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1747
    {
      if (cri == args1)
    ed66:	91 12       	cpse	r9, r17
    ed68:	12 c0       	rjmp	.+36     	; 0xed8e <get_function_default_temp(unsigned char, unsigned char, char*, char*)+0xf6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1749
      {
        remote_tds_get_complete(idx, &active, name);
    ed6a:	ae 01       	movw	r20, r28
    ed6c:	49 5e       	subi	r20, 0xE9	; 233
    ed6e:	5f 4f       	sbci	r21, 0xFF	; 255
    ed70:	be 01       	movw	r22, r28
    ed72:	6f 5f       	subi	r22, 0xFF	; 255
    ed74:	7f 4f       	sbci	r23, 0xFF	; 255
    ed76:	80 2f       	mov	r24, r16
    ed78:	0e 94 34 54 	call	0xa868	; 0xa868 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1750
        strcpy(line2, name);
    ed7c:	be 01       	movw	r22, r28
    ed7e:	69 5e       	subi	r22, 0xE9	; 233
    ed80:	7f 4f       	sbci	r23, 0xFF	; 255
    ed82:	c6 01       	movw	r24, r12
    ed84:	0e 94 70 af 	call	0x15ee0	; 0x15ee0 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1751
        strcpy_P(line1, nastaveni_rtds);
    ed88:	64 e5       	ldi	r22, 0x54	; 84
    ed8a:	7b e2       	ldi	r23, 0x2B	; 43
    ed8c:	c6 cf       	rjmp	.-116    	; 0xed1a <get_function_default_temp(unsigned char, unsigned char, char*, char*)+0x82>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1754
        goto get_function_default_temp_end;
      }
      cri++;
    ed8e:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1742
      }
      cri++;
    }
  }
  ///
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    ed90:	0f 5f       	subi	r16, 0xFF	; 255
    ed92:	0a 30       	cpi	r16, 0x0A	; 10
    ed94:	f9 f6       	brne	.-66     	; 0xed54 <get_function_default_temp(unsigned char, unsigned char, char*, char*)+0xbc>
    ed96:	c4 cf       	rjmp	.-120    	; 0xed20 <get_function_default_temp(unsigned char, unsigned char, char*, char*)+0x88>

0000ed98 <display_menu_rtds_update_name(unsigned char, unsigned char)>:
_Z29display_menu_rtds_update_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1693
  display_element_set_string(name, 8, args2);
  dialog_save_variable_function = &menu_tds_save_name;
}
/// funkce pro nastaveni nazvu rtds
void display_menu_rtds_update_name(uint8_t args1, uint8_t args2)
{
    ed98:	1f 93       	push	r17
    ed9a:	cf 93       	push	r28
    ed9c:	df 93       	push	r29
    ed9e:	cd b7       	in	r28, 0x3d	; 61
    eda0:	de b7       	in	r29, 0x3e	; 62
    eda2:	63 97       	sbiw	r28, 0x13	; 19
    eda4:	0f b6       	in	r0, 0x3f	; 63
    eda6:	f8 94       	cli
    eda8:	de bf       	out	0x3e, r29	; 62
    edaa:	0f be       	out	0x3f, r0	; 63
    edac:	cd bf       	out	0x3d, r28	; 61
    edae:	16 2f       	mov	r17, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1696
  char name[RTDS_DEVICE_STRING_LEN];
  uint8_t active;
  remote_tds_get_complete(args2, &active, name);
    edb0:	ae 01       	movw	r20, r28
    edb2:	4f 5f       	subi	r20, 0xFF	; 255
    edb4:	5f 4f       	sbci	r21, 0xFF	; 255
    edb6:	be 01       	movw	r22, r28
    edb8:	6d 5e       	subi	r22, 0xED	; 237
    edba:	7f 4f       	sbci	r23, 0xFF	; 255
    edbc:	81 2f       	mov	r24, r17
    edbe:	0e 94 34 54 	call	0xa868	; 0xa868 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1697
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0);
    edc2:	60 e0       	ldi	r22, 0x00	; 0
    edc4:	87 e6       	ldi	r24, 0x67	; 103
    edc6:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <MenuHistoryNextMenu(unsigned char, unsigned char)>
display_element_set_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1607
  menu_dialog_set_variable_args = idx;
}
/////
void display_element_set_string(char *str, uint8_t max_length, uint8_t idx)
{
  strcpy(dialog_set_string, str);
    edca:	be 01       	movw	r22, r28
    edcc:	6f 5f       	subi	r22, 0xFF	; 255
    edce:	7f 4f       	sbci	r23, 0xFF	; 255
    edd0:	82 ed       	ldi	r24, 0xD2	; 210
    edd2:	98 e0       	ldi	r25, 0x08	; 8
    edd4:	0e 94 70 af 	call	0x15ee0	; 0x15ee0 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1608
  dialog_set_string_max_length = max_length;
    edd8:	82 e1       	ldi	r24, 0x12	; 18
    edda:	80 93 cf 08 	sts	0x08CF, r24	; 0x8008cf <dialog_set_string_max_length>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1609
  dialog_set_string_args = idx;
    edde:	10 93 e2 08 	sts	0x08E2, r17	; 0x8008e2 <dialog_set_string_args>
_Z29display_menu_rtds_update_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1699
  char name[RTDS_DEVICE_STRING_LEN];
  uint8_t active;
  remote_tds_get_complete(args2, &active, name);
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0);
  display_element_set_string(name, RTDS_DEVICE_STRING_LEN, args2);
  dialog_save_variable_function = &menu_rtds_update_name;
    ede2:	8d e9       	ldi	r24, 0x9D	; 157
    ede4:	97 e5       	ldi	r25, 0x57	; 87
    ede6:	90 93 d1 08 	sts	0x08D1, r25	; 0x8008d1 <dialog_save_variable_function+0x1>
    edea:	80 93 d0 08 	sts	0x08D0, r24	; 0x8008d0 <dialog_save_variable_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1700
}
    edee:	63 96       	adiw	r28, 0x13	; 19
    edf0:	0f b6       	in	r0, 0x3f	; 63
    edf2:	f8 94       	cli
    edf4:	de bf       	out	0x3e, r29	; 62
    edf6:	0f be       	out	0x3f, r0	; 63
    edf8:	cd bf       	out	0x3d, r28	; 61
    edfa:	df 91       	pop	r29
    edfc:	cf 91       	pop	r28
    edfe:	1f 91       	pop	r17
    ee00:	08 95       	ret

0000ee02 <twi_readFrom.part.0.constprop.170>:
twi_readFrom.part.0.constprop.170():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:157
  if(TWI_BUFFER_SIZE < length){
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    ee02:	90 91 2f 11 	lds	r25, 0x112F	; 0x80112f <twi_state>
    ee06:	91 11       	cpse	r25, r1
    ee08:	fc cf       	rjmp	.-8      	; 0xee02 <twi_readFrom.part.0.constprop.170>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:160
    continue;
  }
  twi_state = TWI_MRX;
    ee0a:	91 e0       	ldi	r25, 0x01	; 1
    ee0c:	90 93 2f 11 	sts	0x112F, r25	; 0x80112f <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:161
  twi_sendStop = sendStop;
    ee10:	90 93 2e 11 	sts	0x112E, r25	; 0x80112e <twi_sendStop>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:163
  // reset error state (0xFF.. no error occurred)
  twi_error = 0xFF;
    ee14:	2f ef       	ldi	r18, 0xFF	; 255
    ee16:	20 93 2d 11 	sts	0x112D, r18	; 0x80112d <twi_error>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:166

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    ee1a:	10 92 2c 11 	sts	0x112C, r1	; 0x80112c <twi_masterBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:167
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    ee1e:	26 0f       	add	r18, r22
    ee20:	20 93 2b 11 	sts	0x112B, r18	; 0x80112b <twi_masterBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:175
  // Therefore we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    ee24:	90 93 2a 11 	sts	0x112A, r25	; 0x80112a <twi_slarw>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:176
  twi_slarw |= address << 1;
    ee28:	90 91 2a 11 	lds	r25, 0x112A	; 0x80112a <twi_slarw>
    ee2c:	88 0f       	add	r24, r24
    ee2e:	89 2b       	or	r24, r25
    ee30:	80 93 2a 11 	sts	0x112A, r24	; 0x80112a <twi_slarw>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:178

  if (true == twi_inRepStart) {
    ee34:	80 91 29 11 	lds	r24, 0x1129	; 0x801129 <twi_inRepStart>
    ee38:	81 30       	cpi	r24, 0x01	; 1
    ee3a:	f9 f4       	brne	.+62     	; 0xee7a <twi_readFrom.part.0.constprop.170+0x78>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:185
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // Remember, we're dealing with an ASYNC ISR
    ee3c:	10 92 29 11 	sts	0x1129, r1	; 0x801129 <twi_inRepStart>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:187
    do {
      TWDR = twi_slarw;
    ee40:	80 91 2a 11 	lds	r24, 0x112A	; 0x80112a <twi_slarw>
    ee44:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:188
    } while(TWCR & _BV(TWWC));
    ee48:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    ee4c:	83 fd       	sbrc	r24, 3
    ee4e:	f8 cf       	rjmp	.-16     	; 0xee40 <twi_readFrom.part.0.constprop.170+0x3e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:189
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
    ee50:	85 ec       	ldi	r24, 0xC5	; 197
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:193
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    ee52:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:196

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    ee56:	80 91 2f 11 	lds	r24, 0x112F	; 0x80112f <twi_state>
    ee5a:	81 30       	cpi	r24, 0x01	; 1
    ee5c:	e1 f3       	breq	.-8      	; 0xee56 <twi_readFrom.part.0.constprop.170+0x54>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:200
    continue;
  }

  if (twi_masterBufferIndex < length)
    ee5e:	80 91 2c 11 	lds	r24, 0x112C	; 0x80112c <twi_masterBufferIndex>
    ee62:	86 17       	cp	r24, r22
    ee64:	10 f4       	brcc	.+4      	; 0xee6a <twi_readFrom.part.0.constprop.170+0x68>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:201
    length = twi_masterBufferIndex;
    ee66:	60 91 2c 11 	lds	r22, 0x112C	; 0x80112c <twi_masterBufferIndex>
    ee6a:	a9 e0       	ldi	r26, 0x09	; 9
    ee6c:	b1 e1       	ldi	r27, 0x11	; 17
    ee6e:	e9 ee       	ldi	r30, 0xE9	; 233
    ee70:	f0 e1       	ldi	r31, 0x10	; 16
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:204

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    ee72:	80 e0       	ldi	r24, 0x00	; 0
    ee74:	86 13       	cpse	r24, r22
    ee76:	03 c0       	rjmp	.+6      	; 0xee7e <twi_readFrom.part.0.constprop.170+0x7c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:209
    data[i] = twi_masterBuffer[i];
  }

  return length;
}
    ee78:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:193
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    ee7a:	85 ee       	ldi	r24, 0xE5	; 229
    ee7c:	ea cf       	rjmp	.-44     	; 0xee52 <twi_readFrom.part.0.constprop.170+0x50>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:205
  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
    ee7e:	9d 91       	ld	r25, X+
    ee80:	91 93       	st	Z+, r25
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:204

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    ee82:	8f 5f       	subi	r24, 0xFF	; 255
    ee84:	f7 cf       	rjmp	.-18     	; 0xee74 <twi_readFrom.part.0.constprop.170+0x72>

0000ee86 <TwoWire::read()>:
_ZN7TwoWire4readEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:249
int TwoWire::read(void)
{
  int value = -1;

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    ee86:	90 91 e4 10 	lds	r25, 0x10E4	; 0x8010e4 <TwoWire::rxBufferIndex>
    ee8a:	80 91 e3 10 	lds	r24, 0x10E3	; 0x8010e3 <TwoWire::rxBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:246
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
    ee8e:	2f ef       	ldi	r18, 0xFF	; 255
    ee90:	3f ef       	ldi	r19, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:249

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    ee92:	98 17       	cp	r25, r24
    ee94:	48 f4       	brcc	.+18     	; 0xeea8 <TwoWire::read()+0x22>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:250
    value = rxBuffer[rxBufferIndex];
    ee96:	e9 2f       	mov	r30, r25
    ee98:	f0 e0       	ldi	r31, 0x00	; 0
    ee9a:	e7 51       	subi	r30, 0x17	; 23
    ee9c:	ff 4e       	sbci	r31, 0xEF	; 239
    ee9e:	20 81       	ld	r18, Z
    eea0:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:251
    ++rxBufferIndex;
    eea2:	9f 5f       	subi	r25, 0xFF	; 255
    eea4:	90 93 e4 10 	sts	0x10E4, r25	; 0x8010e4 <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:255
  }

  return value;
}
    eea8:	c9 01       	movw	r24, r18
    eeaa:	08 95       	ret

0000eeac <TwoWire::read() [clone .constprop.131]>:
_ZN7TwoWire4readEv.constprop.131():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:249
int TwoWire::read(void)
{
  int value = -1;

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    eeac:	90 91 e4 10 	lds	r25, 0x10E4	; 0x8010e4 <TwoWire::rxBufferIndex>
    eeb0:	80 91 e3 10 	lds	r24, 0x10E3	; 0x8010e3 <TwoWire::rxBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:246
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
    eeb4:	2f ef       	ldi	r18, 0xFF	; 255
    eeb6:	3f ef       	ldi	r19, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:249

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    eeb8:	98 17       	cp	r25, r24
    eeba:	48 f4       	brcc	.+18     	; 0xeece <TwoWire::read() [clone .constprop.131]+0x22>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:250
    value = rxBuffer[rxBufferIndex];
    eebc:	e9 2f       	mov	r30, r25
    eebe:	f0 e0       	ldi	r31, 0x00	; 0
    eec0:	e7 51       	subi	r30, 0x17	; 23
    eec2:	ff 4e       	sbci	r31, 0xEF	; 239
    eec4:	20 81       	ld	r18, Z
    eec6:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:251
    ++rxBufferIndex;
    eec8:	9f 5f       	subi	r25, 0xFF	; 255
    eeca:	90 93 e4 10 	sts	0x10E4, r25	; 0x8010e4 <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:255
  }

  return value;
}
    eece:	c9 01       	movw	r24, r18
    eed0:	08 95       	ret

0000eed2 <TwoWire::available()>:
_ZN7TwoWire9availableEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:238
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
    eed2:	80 91 e3 10 	lds	r24, 0x10E3	; 0x8010e3 <TwoWire::rxBufferLength>
    eed6:	90 91 e4 10 	lds	r25, 0x10E4	; 0x8010e4 <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:239
}
    eeda:	89 1b       	sub	r24, r25
    eedc:	99 0b       	sbc	r25, r25
    eede:	08 95       	ret

0000eee0 <TwoWire::onRequestService()>:
_ZN7TwoWire16onRequestServiceEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:314
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
  txBufferLength = 0;
  // alert user program
  user_onRequest();
}
    eee0:	08 95       	ret

0000eee2 <TwoWire::onReceiveService(unsigned char*, int)>:
_ZN7TwoWire16onReceiveServiceEPhi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:299
  // set rx iterator vars
  rxBufferIndex = 0;
  rxBufferLength = numBytes;
  // alert user program
  user_onReceive(numBytes);
}
    eee2:	08 95       	ret

0000eee4 <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:181
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    eee4:	fc 01       	movw	r30, r24
    eee6:	53 8d       	ldd	r21, Z+27	; 0x1b
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:182
  tx_buffer_index_t tail = _tx_buffer_tail;
    eee8:	44 8d       	ldd	r20, Z+28	; 0x1c
    eeea:	25 2f       	mov	r18, r21
    eeec:	30 e0       	ldi	r19, 0x00	; 0
    eeee:	84 2f       	mov	r24, r20
    eef0:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:186
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    eef2:	82 1b       	sub	r24, r18
    eef4:	93 0b       	sbc	r25, r19
    eef6:	54 17       	cp	r21, r20
    eef8:	10 f0       	brcs	.+4      	; 0xeefe <HardwareSerial::availableForWrite()+0x1a>
    eefa:	cf 96       	adiw	r24, 0x3f	; 63
    eefc:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:187
  return tail - head - 1;
    eefe:	01 97       	sbiw	r24, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:188
}
    ef00:	08 95       	ret

0000ef02 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:164
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{
    ef02:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:166
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    ef04:	91 8d       	ldd	r25, Z+25	; 0x19
    ef06:	82 8d       	ldd	r24, Z+26	; 0x1a
    ef08:	98 17       	cp	r25, r24
    ef0a:	61 f0       	breq	.+24     	; 0xef24 <HardwareSerial::read()+0x22>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:169
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    ef0c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    ef0e:	ae 0f       	add	r26, r30
    ef10:	bf 2f       	mov	r27, r31
    ef12:	b1 1d       	adc	r27, r1
    ef14:	5d 96       	adiw	r26, 0x1d	; 29
    ef16:	8c 91       	ld	r24, X
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:170
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    ef18:	92 8d       	ldd	r25, Z+26	; 0x1a
    ef1a:	9f 5f       	subi	r25, 0xFF	; 255
    ef1c:	9f 73       	andi	r25, 0x3F	; 63
    ef1e:	92 8f       	std	Z+26, r25	; 0x1a
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:171
    return c;
    ef20:	90 e0       	ldi	r25, 0x00	; 0
    ef22:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:167

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    ef24:	8f ef       	ldi	r24, 0xFF	; 255
    ef26:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:173
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    ef28:	08 95       	ret

0000ef2a <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:155
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
    ef2a:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:156
  if (_rx_buffer_head == _rx_buffer_tail) {
    ef2c:	91 8d       	ldd	r25, Z+25	; 0x19
    ef2e:	82 8d       	ldd	r24, Z+26	; 0x1a
    ef30:	98 17       	cp	r25, r24
    ef32:	31 f0       	breq	.+12     	; 0xef40 <HardwareSerial::peek()+0x16>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:159
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    ef34:	82 8d       	ldd	r24, Z+26	; 0x1a
    ef36:	e8 0f       	add	r30, r24
    ef38:	f1 1d       	adc	r31, r1
    ef3a:	85 8d       	ldd	r24, Z+29	; 0x1d
    ef3c:	90 e0       	ldi	r25, 0x00	; 0
    ef3e:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:157
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    ef40:	8f ef       	ldi	r24, 0xFF	; 255
    ef42:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:161
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    ef44:	08 95       	ret

0000ef46 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:150
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    ef46:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:151
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    ef48:	91 8d       	ldd	r25, Z+25	; 0x19
    ef4a:	22 8d       	ldd	r18, Z+26	; 0x1a
    ef4c:	89 2f       	mov	r24, r25
    ef4e:	90 e0       	ldi	r25, 0x00	; 0
    ef50:	80 5c       	subi	r24, 0xC0	; 192
    ef52:	9f 4f       	sbci	r25, 0xFF	; 255
    ef54:	82 1b       	sub	r24, r18
    ef56:	91 09       	sbc	r25, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:152
}
    ef58:	8f 73       	andi	r24, 0x3F	; 63
    ef5a:	99 27       	eor	r25, r25
    ef5c:	08 95       	ret

0000ef5e <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:82
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    ef5e:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:85
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    ef60:	a4 8d       	ldd	r26, Z+28	; 0x1c
    ef62:	a8 0f       	add	r26, r24
    ef64:	b9 2f       	mov	r27, r25
    ef66:	b1 1d       	adc	r27, r1
    ef68:	a3 5a       	subi	r26, 0xA3	; 163
    ef6a:	bf 4f       	sbci	r27, 0xFF	; 255
    ef6c:	2c 91       	ld	r18, X
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:86
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    ef6e:	84 8d       	ldd	r24, Z+28	; 0x1c
    ef70:	90 e0       	ldi	r25, 0x00	; 0
    ef72:	01 96       	adiw	r24, 0x01	; 1
    ef74:	8f 73       	andi	r24, 0x3F	; 63
    ef76:	99 27       	eor	r25, r25
    ef78:	84 8f       	std	Z+28, r24	; 0x1c
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:88

  *_udr = c;
    ef7a:	a6 89       	ldd	r26, Z+22	; 0x16
    ef7c:	b7 89       	ldd	r27, Z+23	; 0x17
    ef7e:	2c 93       	st	X, r18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:93

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  *_ucsra |= _BV(TXC0);
    ef80:	a0 89       	ldd	r26, Z+16	; 0x10
    ef82:	b1 89       	ldd	r27, Z+17	; 0x11
    ef84:	8c 91       	ld	r24, X
    ef86:	80 64       	ori	r24, 0x40	; 64
    ef88:	8c 93       	st	X, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:95

  if (_tx_buffer_head == _tx_buffer_tail) {
    ef8a:	93 8d       	ldd	r25, Z+27	; 0x1b
    ef8c:	84 8d       	ldd	r24, Z+28	; 0x1c
    ef8e:	98 13       	cpse	r25, r24
    ef90:	06 c0       	rjmp	.+12     	; 0xef9e <HardwareSerial::_tx_udr_empty_irq()+0x40>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:97
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
    ef92:	02 88       	ldd	r0, Z+18	; 0x12
    ef94:	f3 89       	ldd	r31, Z+19	; 0x13
    ef96:	e0 2d       	mov	r30, r0
    ef98:	80 81       	ld	r24, Z
    ef9a:	8f 7d       	andi	r24, 0xDF	; 223
    ef9c:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:99
  }
}
    ef9e:	08 95       	ret

0000efa0 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:211
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    efa0:	ef 92       	push	r14
    efa2:	ff 92       	push	r15
    efa4:	0f 93       	push	r16
    efa6:	1f 93       	push	r17
    efa8:	cf 93       	push	r28
    efaa:	df 93       	push	r29
    efac:	ec 01       	movw	r28, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:212
  _written = true;
    efae:	81 e0       	ldi	r24, 0x01	; 1
    efb0:	88 8f       	std	Y+24, r24	; 0x18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:217
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    efb2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    efb4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    efb6:	98 13       	cpse	r25, r24
    efb8:	16 c0       	rjmp	.+44     	; 0xefe6 <HardwareSerial::write(unsigned char)+0x46>
    efba:	e8 89       	ldd	r30, Y+16	; 0x10
    efbc:	f9 89       	ldd	r31, Y+17	; 0x11
    efbe:	80 81       	ld	r24, Z
    efc0:	85 ff       	sbrs	r24, 5
    efc2:	11 c0       	rjmp	.+34     	; 0xefe6 <HardwareSerial::write(unsigned char)+0x46>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:218
    *_udr = c;
    efc4:	ee 89       	ldd	r30, Y+22	; 0x16
    efc6:	ff 89       	ldd	r31, Y+23	; 0x17
    efc8:	60 83       	st	Z, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:219
    *_ucsra |= _BV(TXC0);
    efca:	e8 89       	ldd	r30, Y+16	; 0x10
    efcc:	f9 89       	ldd	r31, Y+17	; 0x11
    efce:	80 81       	ld	r24, Z
    efd0:	80 64       	ori	r24, 0x40	; 64
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:242
  }

  _tx_buffer[_tx_buffer_head] = c;
  _tx_buffer_head = i;

  *_ucsrb |= _BV(UDRIE0);
    efd2:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:245
  
  return 1;
}
    efd4:	81 e0       	ldi	r24, 0x01	; 1
    efd6:	90 e0       	ldi	r25, 0x00	; 0
    efd8:	df 91       	pop	r29
    efda:	cf 91       	pop	r28
    efdc:	1f 91       	pop	r17
    efde:	0f 91       	pop	r16
    efe0:	ff 90       	pop	r15
    efe2:	ef 90       	pop	r14
    efe4:	08 95       	ret
    efe6:	f6 2e       	mov	r15, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:222
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    *_ucsra |= _BV(TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    efe8:	0b 8d       	ldd	r16, Y+27	; 0x1b
    efea:	10 e0       	ldi	r17, 0x00	; 0
    efec:	0f 5f       	subi	r16, 0xFF	; 255
    efee:	1f 4f       	sbci	r17, 0xFF	; 255
    eff0:	0f 73       	andi	r16, 0x3F	; 63
    eff2:	11 27       	eor	r17, r17
    eff4:	e0 2e       	mov	r14, r16
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:226

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    eff6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    eff8:	8e 11       	cpse	r24, r14
    effa:	0c c0       	rjmp	.+24     	; 0xf014 <HardwareSerial::write(unsigned char)+0x74>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:227
    if (bit_is_clear(SREG, SREG_I)) {
    effc:	0f b6       	in	r0, 0x3f	; 63
    effe:	07 fc       	sbrc	r0, 7
    f000:	fa cf       	rjmp	.-12     	; 0xeff6 <HardwareSerial::write(unsigned char)+0x56>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:232
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    f002:	e8 89       	ldd	r30, Y+16	; 0x10
    f004:	f9 89       	ldd	r31, Y+17	; 0x11
    f006:	80 81       	ld	r24, Z
    f008:	85 ff       	sbrs	r24, 5
    f00a:	f5 cf       	rjmp	.-22     	; 0xeff6 <HardwareSerial::write(unsigned char)+0x56>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:233
        _tx_udr_empty_irq();
    f00c:	ce 01       	movw	r24, r28
    f00e:	0e 94 af 77 	call	0xef5e	; 0xef5e <HardwareSerial::_tx_udr_empty_irq()>
    f012:	f1 cf       	rjmp	.-30     	; 0xeff6 <HardwareSerial::write(unsigned char)+0x56>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:239
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    f014:	eb 8d       	ldd	r30, Y+27	; 0x1b
    f016:	ec 0f       	add	r30, r28
    f018:	fd 2f       	mov	r31, r29
    f01a:	f1 1d       	adc	r31, r1
    f01c:	e3 5a       	subi	r30, 0xA3	; 163
    f01e:	ff 4f       	sbci	r31, 0xFF	; 255
    f020:	f0 82       	st	Z, r15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:240
  _tx_buffer_head = i;
    f022:	0b 8f       	std	Y+27, r16	; 0x1b
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:242

  *_ucsrb |= _BV(UDRIE0);
    f024:	ea 89       	ldd	r30, Y+18	; 0x12
    f026:	fb 89       	ldd	r31, Y+19	; 0x13
    f028:	80 81       	ld	r24, Z
    f02a:	80 62       	ori	r24, 0x20	; 32
    f02c:	d2 cf       	rjmp	.-92     	; 0xefd2 <HardwareSerial::write(unsigned char)+0x32>

0000f02e <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:191
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    f02e:	cf 93       	push	r28
    f030:	df 93       	push	r29
    f032:	ec 01       	movw	r28, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:195
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    f034:	88 8d       	ldd	r24, Y+24	; 0x18
    f036:	88 23       	and	r24, r24
    f038:	b9 f0       	breq	.+46     	; 0xf068 <HardwareSerial::flush()+0x3a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:198
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    f03a:	aa 89       	ldd	r26, Y+18	; 0x12
    f03c:	bb 89       	ldd	r27, Y+19	; 0x13
    f03e:	e8 89       	ldd	r30, Y+16	; 0x10
    f040:	f9 89       	ldd	r31, Y+17	; 0x11
    f042:	8c 91       	ld	r24, X
    f044:	85 fd       	sbrc	r24, 5
    f046:	03 c0       	rjmp	.+6      	; 0xf04e <HardwareSerial::flush()+0x20>
    f048:	80 81       	ld	r24, Z
    f04a:	86 fd       	sbrc	r24, 6
    f04c:	0d c0       	rjmp	.+26     	; 0xf068 <HardwareSerial::flush()+0x3a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:199
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    f04e:	0f b6       	in	r0, 0x3f	; 63
    f050:	07 fc       	sbrc	r0, 7
    f052:	f7 cf       	rjmp	.-18     	; 0xf042 <HardwareSerial::flush()+0x14>
    f054:	8c 91       	ld	r24, X
    f056:	85 ff       	sbrs	r24, 5
    f058:	f2 cf       	rjmp	.-28     	; 0xf03e <HardwareSerial::flush()+0x10>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:203
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
    f05a:	80 81       	ld	r24, Z
    f05c:	85 ff       	sbrs	r24, 5
    f05e:	ed cf       	rjmp	.-38     	; 0xf03a <HardwareSerial::flush()+0xc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:204
        _tx_udr_empty_irq();
    f060:	ce 01       	movw	r24, r28
    f062:	0e 94 af 77 	call	0xef5e	; 0xef5e <HardwareSerial::_tx_udr_empty_irq()>
    f066:	e9 cf       	rjmp	.-46     	; 0xf03a <HardwareSerial::flush()+0xc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:208
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    f068:	df 91       	pop	r29
    f06a:	cf 91       	pop	r28
    f06c:	08 95       	ret

0000f06e <Serial0_available()>:
_Z17Serial0_availablev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    f06e:	8d e6       	ldi	r24, 0x6D	; 109
    f070:	9b e0       	ldi	r25, 0x0B	; 11
    f072:	0e 94 a3 77 	call	0xef46	; 0xef46 <HardwareSerial::available()>
    f076:	21 e0       	ldi	r18, 0x01	; 1
    f078:	89 2b       	or	r24, r25
    f07a:	09 f4       	brne	.+2      	; 0xf07e <Serial0_available()+0x10>
    f07c:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial0.cpp:77
}
    f07e:	82 2f       	mov	r24, r18
    f080:	08 95       	ret

0000f082 <serialEventRun()>:
_Z14serialEventRunv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:66
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    f082:	80 e0       	ldi	r24, 0x00	; 0
    f084:	90 e0       	ldi	r25, 0x00	; 0
    f086:	89 2b       	or	r24, r25
    f088:	29 f0       	breq	.+10     	; 0xf094 <serialEventRun()+0x12>
    f08a:	0e 94 37 78 	call	0xf06e	; 0xf06e <Serial0_available()>
    f08e:	81 11       	cpse	r24, r1
    f090:	0e 94 00 00 	call	0	; 0x0 <__vectors>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:69
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    f094:	80 e0       	ldi	r24, 0x00	; 0
    f096:	90 e0       	ldi	r25, 0x00	; 0
    f098:	89 2b       	or	r24, r25
    f09a:	49 f0       	breq	.+18     	; 0xf0ae <serialEventRun()+0x2c>
    f09c:	80 e0       	ldi	r24, 0x00	; 0
    f09e:	90 e0       	ldi	r25, 0x00	; 0
    f0a0:	89 2b       	or	r24, r25
    f0a2:	29 f0       	breq	.+10     	; 0xf0ae <serialEventRun()+0x2c>
    f0a4:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    f0a8:	81 11       	cpse	r24, r1
    f0aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:77
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
    f0ae:	08 95       	ret

0000f0b0 <micros>:
micros():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:91
  return m;
}

unsigned long micros() {
  unsigned long m;
  uint8_t oldSREG = SREG;
    f0b0:	3f b7       	in	r19, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:96
  // t will be the number where the timer0 counter stopped
  uint8_t t;

  // Stop all interrupts
  cli();
    f0b2:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:97
  m = timer0_overflow_count;
    f0b4:	80 91 d8 10 	lds	r24, 0x10D8	; 0x8010d8 <timer0_overflow_count>
    f0b8:	90 91 d9 10 	lds	r25, 0x10D9	; 0x8010d9 <timer0_overflow_count+0x1>
    f0bc:	a0 91 da 10 	lds	r26, 0x10DA	; 0x8010da <timer0_overflow_count+0x2>
    f0c0:	b0 91 db 10 	lds	r27, 0x10DB	; 0x8010db <timer0_overflow_count+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:101

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
    f0c4:	26 b5       	in	r18, 0x26	; 38
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:110
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
    f0c6:	a8 9b       	sbis	0x15, 0	; 21
    f0c8:	05 c0       	rjmp	.+10     	; 0xf0d4 <micros+0x24>
    f0ca:	2f 3f       	cpi	r18, 0xFF	; 255
    f0cc:	19 f0       	breq	.+6      	; 0xf0d4 <micros+0x24>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:111
    m++;
    f0ce:	01 96       	adiw	r24, 0x01	; 1
    f0d0:	a1 1d       	adc	r26, r1
    f0d2:	b1 1d       	adc	r27, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:117
#else
  if ((TIFR & _BV(TOV0)) && (t < 255))
    m++;
#endif
  // Restore SREG
  SREG = oldSREG;
    f0d4:	3f bf       	out	0x3f, r19	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:169
#else
  // 32 MHz, 24 MHz, 16 MHz, 8 MHz, 4 MHz, 1 MHz
  // Shift by 8 to the left (multiply by 256) so t (which is 1 byte in size) can fit in 
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    f0d6:	ba 2f       	mov	r27, r26
    f0d8:	a9 2f       	mov	r26, r25
    f0da:	98 2f       	mov	r25, r24
    f0dc:	88 27       	eor	r24, r24
    f0de:	bc 01       	movw	r22, r24
    f0e0:	cd 01       	movw	r24, r26
    f0e2:	62 0f       	add	r22, r18
    f0e4:	71 1d       	adc	r23, r1
    f0e6:	81 1d       	adc	r24, r1
    f0e8:	91 1d       	adc	r25, r1
    f0ea:	42 e0       	ldi	r20, 0x02	; 2
    f0ec:	66 0f       	add	r22, r22
    f0ee:	77 1f       	adc	r23, r23
    f0f0:	88 1f       	adc	r24, r24
    f0f2:	99 1f       	adc	r25, r25
    f0f4:	4a 95       	dec	r20
    f0f6:	d1 f7       	brne	.-12     	; 0xf0ec <micros+0x3c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:171
#endif
}
    f0f8:	08 95       	ret

0000f0fa <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    f0fa:	af 92       	push	r10
    f0fc:	bf 92       	push	r11
    f0fe:	cf 92       	push	r12
    f100:	df 92       	push	r13
    f102:	ef 92       	push	r14
    f104:	ff 92       	push	r15
    f106:	0f 93       	push	r16
    f108:	1f 93       	push	r17
    f10a:	cf 93       	push	r28
    f10c:	df 93       	push	r29
    f10e:	6c 01       	movw	r12, r24
    f110:	7b 01       	movw	r14, r22
    f112:	8b 01       	movw	r16, r22
    f114:	04 0f       	add	r16, r20
    f116:	15 1f       	adc	r17, r21
    f118:	eb 01       	movw	r28, r22
    f11a:	5e 01       	movw	r10, r28
    f11c:	ae 18       	sub	r10, r14
    f11e:	bf 08       	sbc	r11, r15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
    f120:	c0 17       	cp	r28, r16
    f122:	d1 07       	cpc	r29, r17
    f124:	59 f0       	breq	.+22     	; 0xf13c <Print::write(unsigned char const*, unsigned int)+0x42>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
    f126:	69 91       	ld	r22, Y+
    f128:	d6 01       	movw	r26, r12
    f12a:	ed 91       	ld	r30, X+
    f12c:	fc 91       	ld	r31, X
    f12e:	01 90       	ld	r0, Z+
    f130:	f0 81       	ld	r31, Z
    f132:	e0 2d       	mov	r30, r0
    f134:	c6 01       	movw	r24, r12
    f136:	19 95       	eicall
    f138:	89 2b       	or	r24, r25
    f13a:	79 f7       	brne	.-34     	; 0xf11a <Print::write(unsigned char const*, unsigned int)+0x20>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
    f13c:	c5 01       	movw	r24, r10
    f13e:	df 91       	pop	r29
    f140:	cf 91       	pop	r28
    f142:	1f 91       	pop	r17
    f144:	0f 91       	pop	r16
    f146:	ff 90       	pop	r15
    f148:	ef 90       	pop	r14
    f14a:	df 90       	pop	r13
    f14c:	cf 90       	pop	r12
    f14e:	bf 90       	pop	r11
    f150:	af 90       	pop	r10
    f152:	08 95       	ret

0000f154 <twi_stop>:
twi_stop():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:372
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    f154:	85 ed       	ldi	r24, 0xD5	; 213
    f156:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:376

  // wait for stop condition to be executed on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    f15a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    f15e:	84 fd       	sbrc	r24, 4
    f160:	fc cf       	rjmp	.-8      	; 0xf15a <twi_stop+0x6>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:381
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    f162:	10 92 2f 11 	sts	0x112F, r1	; 0x80112f <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:382
}
    f166:	08 95       	ret

0000f168 <twi_transmit>:
twi_transmit():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:307
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    f168:	20 91 98 10 	lds	r18, 0x1098	; 0x801098 <twi_txBufferLength>
    f16c:	26 0f       	add	r18, r22
    f16e:	33 27       	eor	r19, r19
    f170:	33 1f       	adc	r19, r19
    f172:	21 32       	cpi	r18, 0x21	; 33
    f174:	31 05       	cpc	r19, r1
    f176:	ec f4       	brge	.+58     	; 0xf1b2 <twi_transmit+0x4a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:312
    return 1;
  }

  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    f178:	20 91 2f 11 	lds	r18, 0x112F	; 0x80112f <twi_state>
    f17c:	fc 01       	movw	r30, r24
    f17e:	90 e0       	ldi	r25, 0x00	; 0
    f180:	80 e0       	ldi	r24, 0x00	; 0
    f182:	24 30       	cpi	r18, 0x04	; 4
    f184:	69 f0       	breq	.+26     	; 0xf1a0 <twi_transmit+0x38>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:313
    return 2;
    f186:	82 e0       	ldi	r24, 0x02	; 2
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:323
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;

  return 0;
}
    f188:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:318
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    twi_txBuffer[twi_txBufferLength+i] = data[i];
    f18a:	a0 91 98 10 	lds	r26, 0x1098	; 0x801098 <twi_txBufferLength>
    f18e:	21 91       	ld	r18, Z+
    f190:	ac 01       	movw	r20, r24
    f192:	48 58       	subi	r20, 0x88	; 136
    f194:	5f 4e       	sbci	r21, 0xEF	; 239
    f196:	a4 0f       	add	r26, r20
    f198:	b5 2f       	mov	r27, r21
    f19a:	b1 1d       	adc	r27, r1
    f19c:	2c 93       	st	X, r18
    f19e:	01 96       	adiw	r24, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:317
  if(TWI_STX != twi_state){
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    f1a0:	86 17       	cp	r24, r22
    f1a2:	98 f3       	brcs	.-26     	; 0xf18a <twi_transmit+0x22>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:320
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
    f1a4:	80 91 98 10 	lds	r24, 0x1098	; 0x801098 <twi_txBufferLength>
    f1a8:	68 0f       	add	r22, r24
    f1aa:	60 93 98 10 	sts	0x1098, r22	; 0x801098 <twi_txBufferLength>
    f1ae:	80 e0       	ldi	r24, 0x00	; 0
    f1b0:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:308
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    return 1;
    f1b2:	81 e0       	ldi	r24, 0x01	; 1
    f1b4:	08 95       	ret

0000f1b6 <TwoWire::flush()>:
_ZN7TwoWire5flushEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:274
}

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
    f1b6:	08 95       	ret

0000f1b8 <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:264
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;

  if(rxBufferIndex < rxBufferLength){
    f1b8:	e0 91 e4 10 	lds	r30, 0x10E4	; 0x8010e4 <TwoWire::rxBufferIndex>
    f1bc:	80 91 e3 10 	lds	r24, 0x10E3	; 0x8010e3 <TwoWire::rxBufferLength>
    f1c0:	e8 17       	cp	r30, r24
    f1c2:	30 f4       	brcc	.+12     	; 0xf1d0 <TwoWire::peek()+0x18>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:265
    value = rxBuffer[rxBufferIndex];
    f1c4:	f0 e0       	ldi	r31, 0x00	; 0
    f1c6:	e7 51       	subi	r30, 0x17	; 23
    f1c8:	ff 4e       	sbci	r31, 0xEF	; 239
    f1ca:	80 81       	ld	r24, Z
    f1cc:	90 e0       	ldi	r25, 0x00	; 0
    f1ce:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:262
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
    f1d0:	8f ef       	ldi	r24, 0xFF	; 255
    f1d2:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:269
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
    f1d4:	08 95       	ret

0000f1d6 <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:219

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    f1d6:	cf 92       	push	r12
    f1d8:	df 92       	push	r13
    f1da:	ef 92       	push	r14
    f1dc:	ff 92       	push	r15
    f1de:	0f 93       	push	r16
    f1e0:	1f 93       	push	r17
    f1e2:	cf 93       	push	r28
    f1e4:	df 93       	push	r29
    f1e6:	7c 01       	movw	r14, r24
    f1e8:	cb 01       	movw	r24, r22
    f1ea:	8a 01       	movw	r16, r20
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:220
  if(transmitting){
    f1ec:	20 91 e8 10 	lds	r18, 0x10E8	; 0x8010e8 <TwoWire::transmitting>
    f1f0:	22 23       	and	r18, r18
    f1f2:	89 f0       	breq	.+34     	; 0xf216 <TwoWire::write(unsigned char const*, unsigned int)+0x40>
    f1f4:	eb 01       	movw	r28, r22
    f1f6:	6b 01       	movw	r12, r22
    f1f8:	c4 0e       	add	r12, r20
    f1fa:	d5 1e       	adc	r13, r21
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:222
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    f1fc:	cc 15       	cp	r28, r12
    f1fe:	dd 05       	cpc	r29, r13
    f200:	69 f0       	breq	.+26     	; 0xf21c <TwoWire::write(unsigned char const*, unsigned int)+0x46>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:223
      write(data[i]);
    f202:	69 91       	ld	r22, Y+
    f204:	d7 01       	movw	r26, r14
    f206:	ed 91       	ld	r30, X+
    f208:	fc 91       	ld	r31, X
    f20a:	01 90       	ld	r0, Z+
    f20c:	f0 81       	ld	r31, Z
    f20e:	e0 2d       	mov	r30, r0
    f210:	c7 01       	movw	r24, r14
    f212:	19 95       	eicall
    f214:	f3 cf       	rjmp	.-26     	; 0xf1fc <TwoWire::write(unsigned char const*, unsigned int)+0x26>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:228
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    f216:	64 2f       	mov	r22, r20
    f218:	0e 94 b4 78 	call	0xf168	; 0xf168 <twi_transmit>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:231
  }
  return quantity;
}
    f21c:	c8 01       	movw	r24, r16
    f21e:	df 91       	pop	r29
    f220:	cf 91       	pop	r28
    f222:	1f 91       	pop	r17
    f224:	0f 91       	pop	r16
    f226:	ff 90       	pop	r15
    f228:	ef 90       	pop	r14
    f22a:	df 90       	pop	r13
    f22c:	cf 90       	pop	r12
    f22e:	08 95       	ret

0000f230 <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:194

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
    f230:	cf 93       	push	r28
    f232:	df 93       	push	r29
    f234:	1f 92       	push	r1
    f236:	cd b7       	in	r28, 0x3d	; 61
    f238:	de b7       	in	r29, 0x3e	; 62
    f23a:	69 83       	std	Y+1, r22	; 0x01
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:195
  if(transmitting){
    f23c:	20 91 e8 10 	lds	r18, 0x10E8	; 0x8010e8 <TwoWire::transmitting>
    f240:	22 23       	and	r18, r18
    f242:	f9 f0       	breq	.+62     	; 0xf282 <TwoWire::write(unsigned char)+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:198
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= TWI_BUFFER_SIZE){
    f244:	20 91 e5 10 	lds	r18, 0x10E5	; 0x8010e5 <TwoWire::txBufferLength>
    f248:	20 32       	cpi	r18, 0x20	; 32
    f24a:	58 f0       	brcs	.+22     	; 0xf262 <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.h:44
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    f24c:	21 e0       	ldi	r18, 0x01	; 1
    f24e:	30 e0       	ldi	r19, 0x00	; 0
    f250:	fc 01       	movw	r30, r24
    f252:	33 83       	std	Z+3, r19	; 0x03
    f254:	22 83       	std	Z+2, r18	; 0x02
_ZN7TwoWire5writeEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:200
      setWriteError();
      return 0;
    f256:	90 e0       	ldi	r25, 0x00	; 0
    f258:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:213
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
}
    f25a:	0f 90       	pop	r0
    f25c:	df 91       	pop	r29
    f25e:	cf 91       	pop	r28
    f260:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:203
    if(txBufferLength >= TWI_BUFFER_SIZE){
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    f262:	80 91 e6 10 	lds	r24, 0x10E6	; 0x8010e6 <TwoWire::txBufferIndex>
    f266:	e8 2f       	mov	r30, r24
    f268:	f0 e0       	ldi	r31, 0x00	; 0
    f26a:	e8 5a       	subi	r30, 0xA8	; 168
    f26c:	ff 4e       	sbci	r31, 0xEF	; 239
    f26e:	99 81       	ldd	r25, Y+1	; 0x01
    f270:	90 83       	st	Z, r25
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:204
    ++txBufferIndex;
    f272:	8f 5f       	subi	r24, 0xFF	; 255
    f274:	80 93 e6 10 	sts	0x10E6, r24	; 0x8010e6 <TwoWire::txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:206
    // update amount in buffer
    txBufferLength = txBufferIndex;
    f278:	80 93 e5 10 	sts	0x10E5, r24	; 0x8010e5 <TwoWire::txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:212
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
    f27c:	81 e0       	ldi	r24, 0x01	; 1
    f27e:	90 e0       	ldi	r25, 0x00	; 0
    f280:	ec cf       	rjmp	.-40     	; 0xf25a <TwoWire::write(unsigned char)+0x2a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:210
    // update amount in buffer
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    f282:	61 e0       	ldi	r22, 0x01	; 1
    f284:	ce 01       	movw	r24, r28
    f286:	01 96       	adiw	r24, 0x01	; 1
    f288:	0e 94 b4 78 	call	0xf168	; 0xf168 <twi_transmit>
    f28c:	f7 cf       	rjmp	.-18     	; 0xf27c <TwoWire::write(unsigned char)+0x4c>

0000f28e <SPIClass::endTransaction()>:
_ZN8SPIClass14endTransactionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:287
      #endif
      {
        SREG = interruptSave;
      }
    }
  }
    f28e:	08 95       	ret

0000f290 <SPIClass::transfer(unsigned char)>:
_ZN8SPIClass8transferEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:212
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
    f290:	8e bd       	out	0x2e, r24	; 46
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:219
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
    f292:	00 00       	nop
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:220
    while (!(SPSR & _BV(SPIF))) ; // wait
    f294:	0d b4       	in	r0, 0x2d	; 45
    f296:	07 fe       	sbrs	r0, 7
    f298:	fd cf       	rjmp	.-6      	; 0xf294 <SPIClass::transfer(unsigned char)+0x4>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:221
    return SPDR;
    f29a:	8e b5       	in	r24, 0x2e	; 46
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:222
  }
    f29c:	08 95       	ret

0000f29e <SPIClass::beginTransaction(SPISettings)>:
_ZN8SPIClass16beginTransactionE11SPISettings():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:206
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
    f29e:	8c bd       	out	0x2c, r24	; 44
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:207
    SPSR = settings.spsr;
    f2a0:	9d bd       	out	0x2d, r25	; 45
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:208
  }
    f2a2:	08 95       	ret

0000f2a4 <EthernetUDP::flush()>:
_ZN11EthernetUDP5flushEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:212
  ::peek(_sock, &b);
  return b;
}

void EthernetUDP::flush()
{
    f2a4:	cf 93       	push	r28
    f2a6:	df 93       	push	r29
    f2a8:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:217
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5500 always behaves :)

  while (_remaining)
    f2aa:	89 8d       	ldd	r24, Y+25	; 0x19
    f2ac:	9a 8d       	ldd	r25, Y+26	; 0x1a
    f2ae:	89 2b       	or	r24, r25
    f2b0:	41 f0       	breq	.+16     	; 0xf2c2 <EthernetUDP::flush()+0x1e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:219
  {
    read();
    f2b2:	e8 81       	ld	r30, Y
    f2b4:	f9 81       	ldd	r31, Y+1	; 0x01
    f2b6:	02 84       	ldd	r0, Z+10	; 0x0a
    f2b8:	f3 85       	ldd	r31, Z+11	; 0x0b
    f2ba:	e0 2d       	mov	r30, r0
    f2bc:	ce 01       	movw	r24, r28
    f2be:	19 95       	eicall
    f2c0:	f4 cf       	rjmp	.-24     	; 0xf2aa <EthernetUDP::flush()+0x6>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:221
  }
}
    f2c2:	df 91       	pop	r29
    f2c4:	cf 91       	pop	r28
    f2c6:	08 95       	ret

0000f2c8 <EthernetUDP::write(unsigned char)>:
_ZN11EthernetUDP5writeEh():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:111
{
  return sendUDP(_sock);
}

size_t EthernetUDP::write(uint8_t byte)
{
    f2c8:	cf 93       	push	r28
    f2ca:	df 93       	push	r29
    f2cc:	1f 92       	push	r1
    f2ce:	cd b7       	in	r28, 0x3d	; 61
    f2d0:	de b7       	in	r29, 0x3e	; 62
    f2d2:	69 83       	std	Y+1, r22	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:112
  return write(&byte, 1);
    f2d4:	dc 01       	movw	r26, r24
    f2d6:	ed 91       	ld	r30, X+
    f2d8:	fc 91       	ld	r31, X
    f2da:	02 80       	ldd	r0, Z+2	; 0x02
    f2dc:	f3 81       	ldd	r31, Z+3	; 0x03
    f2de:	e0 2d       	mov	r30, r0
    f2e0:	41 e0       	ldi	r20, 0x01	; 1
    f2e2:	50 e0       	ldi	r21, 0x00	; 0
    f2e4:	be 01       	movw	r22, r28
    f2e6:	6f 5f       	subi	r22, 0xFF	; 255
    f2e8:	7f 4f       	sbci	r23, 0xFF	; 255
    f2ea:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:113
}
    f2ec:	0f 90       	pop	r0
    f2ee:	df 91       	pop	r29
    f2f0:	cf 91       	pop	r28
    f2f2:	08 95       	ret

0000f2f4 <EthernetUDP::available()>:
_ZN11EthernetUDP9availableEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:69

/* return number of bytes available in the current packet,
   will return zero if parsePacket hasn't been called yet */
int EthernetUDP::available() {
  return _remaining;
}
    f2f4:	fc 01       	movw	r30, r24
    f2f6:	81 8d       	ldd	r24, Z+25	; 0x19
    f2f8:	92 8d       	ldd	r25, Z+26	; 0x1a
    f2fa:	08 95       	ret

0000f2fc <EthernetUDP::remotePort()>:
_ZN11EthernetUDP10remotePortEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.h:102
  virtual void flush();	// Finish reading the current packet

  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() { return _remoteIP; };
  // Return the port of the host who sent the current incoming packet
  virtual uint16_t remotePort() { return _remotePort; };
    f2fc:	fc 01       	movw	r30, r24
    f2fe:	85 89       	ldd	r24, Z+21	; 0x15
    f300:	96 89       	ldd	r25, Z+22	; 0x16
    f302:	08 95       	ret

0000f304 <EthernetUDP::remoteIP()>:
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
    f304:	22 ee       	ldi	r18, 0xE2	; 226
    f306:	32 e0       	ldi	r19, 0x02	; 2
    f308:	fc 01       	movw	r30, r24
    f30a:	31 83       	std	Z+1, r19	; 0x01
    f30c:	20 83       	st	Z, r18
    f30e:	fb 01       	movw	r30, r22
    f310:	41 89       	ldd	r20, Z+17	; 0x11
    f312:	52 89       	ldd	r21, Z+18	; 0x12
    f314:	63 89       	ldd	r22, Z+19	; 0x13
    f316:	74 89       	ldd	r23, Z+20	; 0x14
    f318:	fc 01       	movw	r30, r24
    f31a:	42 83       	std	Z+2, r20	; 0x02
    f31c:	53 83       	std	Z+3, r21	; 0x03
    f31e:	64 83       	std	Z+4, r22	; 0x04
    f320:	75 83       	std	Z+5, r23	; 0x05
_ZN11EthernetUDP8remoteIPEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.h:100
  // Return the next byte from the current packet without moving on to the next byte
  virtual int peek();
  virtual void flush();	// Finish reading the current packet

  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() { return _remoteIP; };
    f322:	08 95       	ret

0000f324 <UDP::beginMulticast(IPAddress, unsigned int)>:
_ZN3UDP14beginMulticastE9IPAddressj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Udp.h:45

class UDP : public Stream {

public:
  virtual uint8_t begin(uint16_t) =0;  // initialize, start listening on specified port. Returns 1 if successful, 0 if there are no sockets available to use
  virtual uint8_t beginMulticast(IPAddress, uint16_t) { return 0; }  // initialize, start listening on specified multicast IP address and port. Returns 1 if successful, 0 on failure
    f324:	80 e0       	ldi	r24, 0x00	; 0
    f326:	08 95       	ret

0000f328 <EthernetClient::operator==(EthernetClient const&)>:
_ZN14EthernetClienteqERKS_():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:167
EthernetClient::operator bool() {
  return _sock != MAX_SOCK_NUM;
}

bool EthernetClient::operator==(const EthernetClient& rhs) {
  return _sock == rhs._sock && _sock != MAX_SOCK_NUM && rhs._sock != MAX_SOCK_NUM;
    f328:	fc 01       	movw	r30, r24
    f32a:	94 85       	ldd	r25, Z+12	; 0x0c
    f32c:	fb 01       	movw	r30, r22
    f32e:	84 85       	ldd	r24, Z+12	; 0x0c
    f330:	98 13       	cpse	r25, r24
    f332:	03 c0       	rjmp	.+6      	; 0xf33a <EthernetClient::operator==(EthernetClient const&)+0x12>
    f334:	81 e0       	ldi	r24, 0x01	; 1
    f336:	98 30       	cpi	r25, 0x08	; 8
    f338:	09 f4       	brne	.+2      	; 0xf33c <EthernetClient::operator==(EthernetClient const&)+0x14>
    f33a:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:168
}
    f33c:	08 95       	ret

0000f33e <EthernetClient::operator bool()>:
_ZN14EthernetClientcvbEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:163

// the next function allows us to use the client returned by
// EthernetServer::available() as the condition in an if-statement.

EthernetClient::operator bool() {
  return _sock != MAX_SOCK_NUM;
    f33e:	21 e0       	ldi	r18, 0x01	; 1
    f340:	fc 01       	movw	r30, r24
    f342:	84 85       	ldd	r24, Z+12	; 0x0c
    f344:	88 30       	cpi	r24, 0x08	; 8
    f346:	09 f4       	brne	.+2      	; 0xf34a <EthernetClient::operator bool()+0xc>
    f348:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:164
}
    f34a:	82 2f       	mov	r24, r18
    f34c:	08 95       	ret

0000f34e <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.155]>:
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.155():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:657
{
	Print(st, x, y);
}

//print string
void LCDWIKI_GUI::Print_String(String st, int16_t x, int16_t y)
    f34e:	2f 92       	push	r2
    f350:	3f 92       	push	r3
    f352:	4f 92       	push	r4
    f354:	5f 92       	push	r5
    f356:	6f 92       	push	r6
    f358:	7f 92       	push	r7
    f35a:	8f 92       	push	r8
    f35c:	9f 92       	push	r9
    f35e:	af 92       	push	r10
    f360:	bf 92       	push	r11
    f362:	cf 92       	push	r12
    f364:	df 92       	push	r13
    f366:	ef 92       	push	r14
    f368:	ff 92       	push	r15
    f36a:	0f 93       	push	r16
    f36c:	1f 93       	push	r17
    f36e:	cf 93       	push	r28
    f370:	df 93       	push	r29
    f372:	cd b7       	in	r28, 0x3d	; 61
    f374:	de b7       	in	r29, 0x3e	; 62
    f376:	2d 97       	sbiw	r28, 0x0d	; 13
    f378:	0f b6       	in	r0, 0x3f	; 63
    f37a:	f8 94       	cli
    f37c:	de bf       	out	0x3e, r29	; 62
    f37e:	0f be       	out	0x3f, r0	; 63
    f380:	cd bf       	out	0x3d, r28	; 61
    f382:	fc 01       	movw	r30, r24
    f384:	a0 81       	ld	r26, Z
    f386:	b1 81       	ldd	r27, Z+1	; 0x01
Print():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:611
{
	int16_t pos;
	uint16_t len;
	const char * p = (const char *)st;
	size_t n = 0;
	if (x == CENTER || x == RIGHT) 
    f388:	cb 01       	movw	r24, r22
    f38a:	8e 50       	subi	r24, 0x0E	; 14
    f38c:	97 42       	sbci	r25, 0x27	; 39
    f38e:	02 97       	sbiw	r24, 0x02	; 2
    f390:	20 f5       	brcc	.+72     	; 0xf3da <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.155]+0x8c>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:613
	{
		len = strlen((const char *)st) * 6 * text_size;		
    f392:	fd 01       	movw	r30, r26
    f394:	01 90       	ld	r0, Z+
    f396:	00 20       	and	r0, r0
    f398:	e9 f7       	brne	.-6      	; 0xf394 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.155]+0x46>
    f39a:	31 97       	sbiw	r30, 0x01	; 1
    f39c:	ea 1b       	sub	r30, r26
    f39e:	fb 0b       	sbc	r31, r27
    f3a0:	80 91 c6 0d 	lds	r24, 0x0DC6	; 0x800dc6 <my_lcd+0xc>
    f3a4:	26 e0       	ldi	r18, 0x06	; 6
    f3a6:	82 9f       	mul	r24, r18
    f3a8:	c0 01       	movw	r24, r0
    f3aa:	11 24       	eor	r1, r1
    f3ac:	8e 9f       	mul	r24, r30
    f3ae:	90 01       	movw	r18, r0
    f3b0:	8f 9f       	mul	r24, r31
    f3b2:	30 0d       	add	r19, r0
    f3b4:	9e 9f       	mul	r25, r30
    f3b6:	30 0d       	add	r19, r0
    f3b8:	11 24       	eor	r1, r1
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:614
		pos = (Get_Display_Width() - len); 
    f3ba:	80 91 cc 0d 	lds	r24, 0x0DCC	; 0x800dcc <my_lcd+0x12>
    f3be:	90 91 cd 0d 	lds	r25, 0x0DCD	; 0x800dcd <my_lcd+0x13>
    f3c2:	82 1b       	sub	r24, r18
    f3c4:	93 0b       	sbc	r25, r19
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:615
		if (x == CENTER)
    f3c6:	6e 30       	cpi	r22, 0x0E	; 14
    f3c8:	77 42       	sbci	r23, 0x27	; 39
    f3ca:	89 f5       	brne	.+98     	; 0xf42e <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.155]+0xe0>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:617
		{
			x = pos/2;
    f3cc:	bc 01       	movw	r22, r24
    f3ce:	97 ff       	sbrs	r25, 7
    f3d0:	02 c0       	rjmp	.+4      	; 0xf3d6 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.155]+0x88>
    f3d2:	6f 5f       	subi	r22, 0xFF	; 255
    f3d4:	7f 4f       	sbci	r23, 0xFF	; 255
    f3d6:	75 95       	asr	r23
    f3d8:	67 95       	ror	r22
Set_Text_Cousur():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:474
}

//set text coordinate
void LCDWIKI_GUI::Set_Text_Cousur(int16_t x, int16_t y)
{
	text_x = x;
    f3da:	70 93 bd 0d 	sts	0x0DBD, r23	; 0x800dbd <my_lcd+0x3>
    f3de:	60 93 bc 0d 	sts	0x0DBC, r22	; 0x800dbc <my_lcd+0x2>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:475
	text_y = y;
    f3e2:	50 93 bf 0d 	sts	0x0DBF, r21	; 0x800dbf <my_lcd+0x5>
    f3e6:	40 93 be 0d 	sts	0x0DBE, r20	; 0x800dbe <my_lcd+0x4>
    f3ea:	be 83       	std	Y+6, r27	; 0x06
    f3ec:	ad 83       	std	Y+5, r26	; 0x05
Print():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:627
		}
	}
    Set_Text_Cousur(x, y);
	while(1)
	{
		unsigned char ch = *(p++);//pgm_read_byte(p++);
    f3ee:	ed 81       	ldd	r30, Y+5	; 0x05
    f3f0:	fe 81       	ldd	r31, Y+6	; 0x06
    f3f2:	91 91       	ld	r25, Z+
    f3f4:	fe 83       	std	Y+6, r31	; 0x06
    f3f6:	ed 83       	std	Y+5, r30	; 0x05
    f3f8:	89 2f       	mov	r24, r25
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:628
		if(ch == 0)
    f3fa:	99 23       	and	r25, r25
    f3fc:	09 f4       	brne	.+2      	; 0xf400 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.155]+0xb2>
    f3fe:	dd c0       	rjmp	.+442    	; 0xf5ba <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.155]+0x26c>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:792
}

//write a char
size_t LCDWIKI_GUI::write(uint8_t c) 
{
	if (c == '\n') 
    f400:	9a 30       	cpi	r25, 0x0A	; 10
    f402:	c9 f4       	brne	.+50     	; 0xf436 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.155]+0xe8>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:794
	{
    	text_y += text_size*8;
    f404:	80 91 c6 0d 	lds	r24, 0x0DC6	; 0x800dc6 <my_lcd+0xc>
    f408:	f8 e0       	ldi	r31, 0x08	; 8
    f40a:	8f 9f       	mul	r24, r31
    f40c:	c0 01       	movw	r24, r0
    f40e:	11 24       	eor	r1, r1
    f410:	20 91 be 0d 	lds	r18, 0x0DBE	; 0x800dbe <my_lcd+0x4>
    f414:	30 91 bf 0d 	lds	r19, 0x0DBF	; 0x800dbf <my_lcd+0x5>
    f418:	82 0f       	add	r24, r18
    f41a:	93 1f       	adc	r25, r19
    f41c:	90 93 bf 0d 	sts	0x0DBF, r25	; 0x800dbf <my_lcd+0x5>
    f420:	80 93 be 0d 	sts	0x0DBE, r24	; 0x800dbe <my_lcd+0x4>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:795
    	text_x  = 0;
    f424:	10 92 bd 0d 	sts	0x0DBD, r1	; 0x800dbd <my_lcd+0x3>
    f428:	10 92 bc 0d 	sts	0x0DBC, r1	; 0x800dbc <my_lcd+0x2>
    f42c:	e0 cf       	rjmp	.-64     	; 0xf3ee <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.155]+0xa0>
Print():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:621
		{
			x = pos/2;
		}
		else
		{
			x = pos - 1;
    f42e:	bc 01       	movw	r22, r24
    f430:	61 50       	subi	r22, 0x01	; 1
    f432:	71 09       	sbc	r23, r1
    f434:	d2 cf       	rjmp	.-92     	; 0xf3da <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.155]+0x8c>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:797
	if (c == '\n') 
	{
    	text_y += text_size*8;
    	text_x  = 0;
 	} 
	else if(c == '\r')
    f436:	9d 30       	cpi	r25, 0x0D	; 13
    f438:	d1 f2       	breq	.-76     	; 0xf3ee <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.155]+0xa0>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:802
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
    f43a:	20 91 bc 0d 	lds	r18, 0x0DBC	; 0x800dbc <my_lcd+0x2>
    f43e:	30 91 bd 0d 	lds	r19, 0x0DBD	; 0x800dbd <my_lcd+0x3>
    f442:	39 87       	std	Y+9, r19	; 0x09
    f444:	28 87       	std	Y+8, r18	; 0x08
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:553
}

//draw a char
void LCDWIKI_GUI::Draw_Char(int16_t x, int16_t y, uint8_t c, uint16_t color,uint16_t bg, uint8_t size, boolean mode)
{
	if((x >= Get_Width()) || (y >= Get_Height()) || ((x + 6 * size - 1) < 0) || ((y + 8 * size - 1) < 0))
    f446:	20 91 cc 0d 	lds	r18, 0x0DCC	; 0x800dcc <my_lcd+0x12>
    f44a:	30 91 cd 0d 	lds	r19, 0x0DCD	; 0x800dcd <my_lcd+0x13>
    f44e:	48 85       	ldd	r20, Y+8	; 0x08
    f450:	59 85       	ldd	r21, Y+9	; 0x09
    f452:	42 17       	cp	r20, r18
    f454:	53 07       	cpc	r21, r19
    f456:	0c f0       	brlt	.+2      	; 0xf45a <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.155]+0x10c>
    f458:	88 c0       	rjmp	.+272    	; 0xf56a <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.155]+0x21c>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:802
	else if(c == '\r')
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
    f45a:	60 90 be 0d 	lds	r6, 0x0DBE	; 0x800dbe <my_lcd+0x4>
    f45e:	70 90 bf 0d 	lds	r7, 0x0DBF	; 0x800dbf <my_lcd+0x5>
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:553
}

//draw a char
void LCDWIKI_GUI::Draw_Char(int16_t x, int16_t y, uint8_t c, uint16_t color,uint16_t bg, uint8_t size, boolean mode)
{
	if((x >= Get_Width()) || (y >= Get_Height()) || ((x + 6 * size - 1) < 0) || ((y + 8 * size - 1) < 0))
    f462:	20 91 ce 0d 	lds	r18, 0x0DCE	; 0x800dce <my_lcd+0x14>
    f466:	30 91 cf 0d 	lds	r19, 0x0DCF	; 0x800dcf <my_lcd+0x15>
    f46a:	62 16       	cp	r6, r18
    f46c:	73 06       	cpc	r7, r19
    f46e:	0c f0       	brlt	.+2      	; 0xf472 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.155]+0x124>
    f470:	7c c0       	rjmp	.+248    	; 0xf56a <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.155]+0x21c>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:802
	else if(c == '\r')
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
    f472:	50 91 c6 0d 	lds	r21, 0x0DC6	; 0x800dc6 <my_lcd+0xc>
    f476:	5a 83       	std	Y+2, r21	; 0x02
    f478:	c5 2e       	mov	r12, r21
    f47a:	d1 2c       	mov	r13, r1
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:553
}

//draw a char
void LCDWIKI_GUI::Draw_Char(int16_t x, int16_t y, uint8_t c, uint16_t color,uint16_t bg, uint8_t size, boolean mode)
{
	if((x >= Get_Width()) || (y >= Get_Height()) || ((x + 6 * size - 1) < 0) || ((y + 8 * size - 1) < 0))
    f47c:	28 85       	ldd	r18, Y+8	; 0x08
    f47e:	39 85       	ldd	r19, Y+9	; 0x09
    f480:	e6 e0       	ldi	r30, 0x06	; 6
    f482:	5e 9f       	mul	r21, r30
    f484:	20 0d       	add	r18, r0
    f486:	31 1d       	adc	r19, r1
    f488:	11 24       	eor	r1, r1
    f48a:	12 16       	cp	r1, r18
    f48c:	13 06       	cpc	r1, r19
    f48e:	0c f0       	brlt	.+2      	; 0xf492 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.155]+0x144>
    f490:	6c c0       	rjmp	.+216    	; 0xf56a <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.155]+0x21c>
    f492:	96 01       	movw	r18, r12
    f494:	93 e0       	ldi	r25, 0x03	; 3
    f496:	22 0f       	add	r18, r18
    f498:	33 1f       	adc	r19, r19
    f49a:	9a 95       	dec	r25
    f49c:	e1 f7       	brne	.-8      	; 0xf496 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.155]+0x148>
    f49e:	26 0d       	add	r18, r6
    f4a0:	37 1d       	adc	r19, r7
    f4a2:	12 16       	cp	r1, r18
    f4a4:	13 06       	cpc	r1, r19
    f4a6:	0c f0       	brlt	.+2      	; 0xf4aa <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.155]+0x15c>
    f4a8:	60 c0       	rjmp	.+192    	; 0xf56a <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.155]+0x21c>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:557
	{
    	return;
	}		
  	if(c >= 176)
    f4aa:	80 3b       	cpi	r24, 0xB0	; 176
    f4ac:	08 f0       	brcs	.+2      	; 0xf4b0 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.155]+0x162>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:559
  	{
		c++; 
    f4ae:	8f 5f       	subi	r24, 0xFF	; 255
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:802
	else if(c == '\r')
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
    f4b0:	f0 91 c7 0d 	lds	r31, 0x0DC7	; 0x800dc7 <my_lcd+0xd>
    f4b4:	ff 83       	std	Y+7, r31	; 0x07
    f4b6:	20 90 c2 0d 	lds	r2, 0x0DC2	; 0x800dc2 <my_lcd+0x8>
    f4ba:	30 90 c3 0d 	lds	r3, 0x0DC3	; 0x800dc3 <my_lcd+0x9>
    f4be:	20 91 c0 0d 	lds	r18, 0x0DC0	; 0x800dc0 <my_lcd+0x6>
    f4c2:	30 91 c1 0d 	lds	r19, 0x0DC1	; 0x800dc1 <my_lcd+0x7>
    f4c6:	3c 83       	std	Y+4, r19	; 0x04
    f4c8:	2b 83       	std	Y+3, r18	; 0x03
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:570
    	{
      		line = 0x0;
    	}
    	else
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
    f4ca:	48 85       	ldd	r20, Y+8	; 0x08
    f4cc:	59 85       	ldd	r21, Y+9	; 0x09
    f4ce:	5d 87       	std	Y+13, r21	; 0x0d
    f4d0:	4c 87       	std	Y+12, r20	; 0x0c
    f4d2:	5a 01       	movw	r10, r20
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.155():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:561
	}		
  	if(c >= 176)
  	{
		c++; 
  	}
	for (int8_t i=0; i<6; i++) 
    f4d4:	19 82       	std	Y+1, r1	; 0x01
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:570
    	{
      		line = 0x0;
    	}
    	else
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
    f4d6:	2f eb       	ldi	r18, 0xBF	; 191
    f4d8:	3f e2       	ldi	r19, 0x2F	; 47
    f4da:	24 1b       	sub	r18, r20
    f4dc:	35 0b       	sbc	r19, r21
    f4de:	f9 01       	movw	r30, r18
    f4e0:	45 e0       	ldi	r20, 0x05	; 5
    f4e2:	84 9f       	mul	r24, r20
    f4e4:	e0 0d       	add	r30, r0
    f4e6:	f1 1d       	adc	r31, r1
    f4e8:	11 24       	eor	r1, r1
    f4ea:	fb 87       	std	Y+11, r31	; 0x0b
    f4ec:	ea 87       	std	Y+10, r30	; 0x0a
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:564
		c++; 
  	}
	for (int8_t i=0; i<6; i++) 
	{
    	uint8_t line;
    	if (i == 5)
    f4ee:	59 81       	ldd	r21, Y+1	; 0x01
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.155():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:566
    	{
      		line = 0x0;
    f4f0:	e0 e0       	ldi	r30, 0x00	; 0
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:564
		c++; 
  	}
	for (int8_t i=0; i<6; i++) 
	{
    	uint8_t line;
    	if (i == 5)
    f4f2:	55 30       	cpi	r21, 0x05	; 5
    f4f4:	29 f0       	breq	.+10     	; 0xf500 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.155]+0x1b2>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:570
    	{
      		line = 0x0;
    	}
    	else
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
    f4f6:	ea 85       	ldd	r30, Y+10	; 0x0a
    f4f8:	fb 85       	ldd	r31, Y+11	; 0x0b
    f4fa:	ea 0d       	add	r30, r10
    f4fc:	fb 1d       	adc	r31, r11
    f4fe:	e4 91       	lpm	r30, Z
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.155():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:566
	for (int8_t i=0; i<6; i++) 
	{
    	uint8_t line;
    	if (i == 5)
    	{
      		line = 0x0;
    f500:	23 01       	movw	r4, r6
    f502:	91 2c       	mov	r9, r1
    f504:	81 2c       	mov	r8, r1
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:574
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
    	}
    	for (int8_t j = 0; j<8; j++) 
		{
      		if (line & 0x1) 
    f506:	8e 2f       	mov	r24, r30
    f508:	90 e0       	ldi	r25, 0x00	; 0
    f50a:	99 87       	std	Y+9, r25	; 0x09
    f50c:	88 87       	std	Y+8, r24	; 0x08
    f50e:	e0 ff       	sbrs	r30, 0
    f510:	3c c0       	rjmp	.+120    	; 0xf58a <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.155]+0x23c>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:576
			{
        		if (size == 1)
    f512:	9a 81       	ldd	r25, Y+2	; 0x02
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:578
        		{
        			Draw_Pixe(x+i, y+j, color);
    f514:	2b 81       	ldd	r18, Y+3	; 0x03
    f516:	3c 81       	ldd	r19, Y+4	; 0x04
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:582
        		}
        		else 
				{  
					Fill_Rect(x+(i*size), y+(j*size), size, size, color);
    f518:	eb 80       	ldd	r14, Y+3	; 0x03
    f51a:	fc 80       	ldd	r15, Y+4	; 0x04
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:576
    	}
    	for (int8_t j = 0; j<8; j++) 
		{
      		if (line & 0x1) 
			{
        		if (size == 1)
    f51c:	91 30       	cpi	r25, 0x01	; 1
    f51e:	09 f0       	breq	.+2      	; 0xf522 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.155]+0x1d4>
    f520:	42 c0       	rjmp	.+132    	; 0xf5a6 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.155]+0x258>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:591
			{
				if(!mode)
				{
	        		if (size == 1) 
	        		{
	        			Draw_Pixe(x+i, y+j, bg);
    f522:	a3 01       	movw	r20, r6
    f524:	48 0d       	add	r20, r8
    f526:	59 1d       	adc	r21, r9
    f528:	b5 01       	movw	r22, r10
    f52a:	8a eb       	ldi	r24, 0xBA	; 186
    f52c:	9d e0       	ldi	r25, 0x0D	; 13
    f52e:	0e 94 c3 1c 	call	0x3986	; 0x3986 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:599
					{  
						Fill_Rect(x+i*size, y+j*size, size, size, bg);
					}
				}
			}
      		line >>= 1;
    f532:	e8 85       	ldd	r30, Y+8	; 0x08
    f534:	f9 85       	ldd	r31, Y+9	; 0x09
    f536:	f5 95       	asr	r31
    f538:	e7 95       	ror	r30
    f53a:	3f ef       	ldi	r19, 0xFF	; 255
    f53c:	83 1a       	sub	r8, r19
    f53e:	93 0a       	sbc	r9, r19
    f540:	4c 0c       	add	r4, r12
    f542:	5d 1c       	adc	r5, r13
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:572
    	}
    	else
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
    	}
    	for (int8_t j = 0; j<8; j++) 
    f544:	48 e0       	ldi	r20, 0x08	; 8
    f546:	84 16       	cp	r8, r20
    f548:	91 04       	cpc	r9, r1
    f54a:	e9 f6       	brne	.-70     	; 0xf506 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.155]+0x1b8>
    f54c:	5f ef       	ldi	r21, 0xFF	; 255
    f54e:	a5 1a       	sub	r10, r21
    f550:	b5 0a       	sbc	r11, r21
    f552:	8c 85       	ldd	r24, Y+12	; 0x0c
    f554:	9d 85       	ldd	r25, Y+13	; 0x0d
    f556:	8c 0d       	add	r24, r12
    f558:	9d 1d       	adc	r25, r13
    f55a:	9d 87       	std	Y+13, r25	; 0x0d
    f55c:	8c 87       	std	Y+12, r24	; 0x0c
    f55e:	99 81       	ldd	r25, Y+1	; 0x01
    f560:	9f 5f       	subi	r25, 0xFF	; 255
    f562:	99 83       	std	Y+1, r25	; 0x01
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:561
	}		
  	if(c >= 176)
  	{
		c++; 
  	}
	for (int8_t i=0; i<6; i++) 
    f564:	96 30       	cpi	r25, 0x06	; 6
    f566:	09 f0       	breq	.+2      	; 0xf56a <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.155]+0x21c>
    f568:	c2 cf       	rjmp	.-124    	; 0xf4ee <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.155]+0x1a0>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:803
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
    	text_x += text_size*6;		
    f56a:	20 91 c6 0d 	lds	r18, 0x0DC6	; 0x800dc6 <my_lcd+0xc>
    f56e:	80 91 bc 0d 	lds	r24, 0x0DBC	; 0x800dbc <my_lcd+0x2>
    f572:	90 91 bd 0d 	lds	r25, 0x0DBD	; 0x800dbd <my_lcd+0x3>
    f576:	e6 e0       	ldi	r30, 0x06	; 6
    f578:	2e 9f       	mul	r18, r30
    f57a:	80 0d       	add	r24, r0
    f57c:	91 1d       	adc	r25, r1
    f57e:	11 24       	eor	r1, r1
    f580:	90 93 bd 0d 	sts	0x0DBD, r25	; 0x800dbd <my_lcd+0x3>
    f584:	80 93 bc 0d 	sts	0x0DBC, r24	; 0x800dbc <my_lcd+0x2>
    f588:	32 cf       	rjmp	.-412    	; 0xf3ee <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.155]+0xa0>
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:585
        		else 
				{  
					Fill_Rect(x+(i*size), y+(j*size), size, size, color);
        		}
        	} 
			else if (bg != color) 				
    f58a:	eb 81       	ldd	r30, Y+3	; 0x03
    f58c:	fc 81       	ldd	r31, Y+4	; 0x04
    f58e:	2e 16       	cp	r2, r30
    f590:	3f 06       	cpc	r3, r31
    f592:	79 f2       	breq	.-98     	; 0xf532 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.155]+0x1e4>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:587
			{
				if(!mode)
    f594:	ff 81       	ldd	r31, Y+7	; 0x07
    f596:	f1 11       	cpse	r31, r1
    f598:	cc cf       	rjmp	.-104    	; 0xf532 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.155]+0x1e4>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:589
				{
	        		if (size == 1) 
    f59a:	2a 81       	ldd	r18, Y+2	; 0x02
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:595
	        		{
	        			Draw_Pixe(x+i, y+j, bg);
	        		}
	        		else 
					{  
						Fill_Rect(x+i*size, y+j*size, size, size, bg);
    f59c:	71 01       	movw	r14, r2
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:589
        	} 
			else if (bg != color) 				
			{
				if(!mode)
				{
	        		if (size == 1) 
    f59e:	21 30       	cpi	r18, 0x01	; 1
    f5a0:	11 f4       	brne	.+4      	; 0xf5a6 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.155]+0x258>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:591
	        		{
	        			Draw_Pixe(x+i, y+j, bg);
    f5a2:	91 01       	movw	r18, r2
    f5a4:	be cf       	rjmp	.-132    	; 0xf522 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.155]+0x1d4>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:595
	        		}
	        		else 
					{  
						Fill_Rect(x+i*size, y+j*size, size, size, bg);
    f5a6:	86 01       	movw	r16, r12
    f5a8:	96 01       	movw	r18, r12
    f5aa:	a2 01       	movw	r20, r4
    f5ac:	6c 85       	ldd	r22, Y+12	; 0x0c
    f5ae:	7d 85       	ldd	r23, Y+13	; 0x0d
    f5b0:	8a eb       	ldi	r24, 0xBA	; 186
    f5b2:	9d e0       	ldi	r25, 0x0D	; 13
    f5b4:	0e 94 10 1b 	call	0x3620	; 0x3620 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
    f5b8:	bc cf       	rjmp	.-136    	; 0xf532 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.155]+0x1e4>
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.155():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:660

//print string
void LCDWIKI_GUI::Print_String(String st, int16_t x, int16_t y)
{
	Print((uint8_t *)(st.c_str()), x, y);
}
    f5ba:	2d 96       	adiw	r28, 0x0d	; 13
    f5bc:	0f b6       	in	r0, 0x3f	; 63
    f5be:	f8 94       	cli
    f5c0:	de bf       	out	0x3e, r29	; 62
    f5c2:	0f be       	out	0x3f, r0	; 63
    f5c4:	cd bf       	out	0x3d, r28	; 61
    f5c6:	df 91       	pop	r29
    f5c8:	cf 91       	pop	r28
    f5ca:	1f 91       	pop	r17
    f5cc:	0f 91       	pop	r16
    f5ce:	ff 90       	pop	r15
    f5d0:	ef 90       	pop	r14
    f5d2:	df 90       	pop	r13
    f5d4:	cf 90       	pop	r12
    f5d6:	bf 90       	pop	r11
    f5d8:	af 90       	pop	r10
    f5da:	9f 90       	pop	r9
    f5dc:	8f 90       	pop	r8
    f5de:	7f 90       	pop	r7
    f5e0:	6f 90       	pop	r6
    f5e2:	5f 90       	pop	r5
    f5e4:	4f 90       	pop	r4
    f5e6:	3f 90       	pop	r3
    f5e8:	2f 90       	pop	r2
    f5ea:	08 95       	ret

0000f5ec <Print::printNumber(unsigned long, unsigned char)>:
_ZN5Print11printNumberEmh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:233
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    f5ec:	8f 92       	push	r8
    f5ee:	9f 92       	push	r9
    f5f0:	af 92       	push	r10
    f5f2:	bf 92       	push	r11
    f5f4:	ef 92       	push	r14
    f5f6:	ff 92       	push	r15
    f5f8:	0f 93       	push	r16
    f5fa:	1f 93       	push	r17
    f5fc:	cf 93       	push	r28
    f5fe:	df 93       	push	r29
    f600:	cd b7       	in	r28, 0x3d	; 61
    f602:	de b7       	in	r29, 0x3e	; 62
    f604:	a1 97       	sbiw	r28, 0x21	; 33
    f606:	0f b6       	in	r0, 0x3f	; 63
    f608:	f8 94       	cli
    f60a:	de bf       	out	0x3e, r29	; 62
    f60c:	0f be       	out	0x3f, r0	; 63
    f60e:	cd bf       	out	0x3d, r28	; 61
    f610:	7c 01       	movw	r14, r24
    f612:	fa 01       	movw	r30, r20
    f614:	cb 01       	movw	r24, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:237
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    f616:	19 a2       	std	Y+33, r1	; 0x21
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:240

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    f618:	22 30       	cpi	r18, 0x02	; 2
    f61a:	08 f4       	brcc	.+2      	; 0xf61e <Print::printNumber(unsigned long, unsigned char)+0x32>
    f61c:	2a e0       	ldi	r18, 0x0A	; 10
    f61e:	8e 01       	movw	r16, r28
    f620:	0f 5d       	subi	r16, 0xDF	; 223
    f622:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:243

  do {
    char c = n % base;
    f624:	82 2e       	mov	r8, r18
    f626:	91 2c       	mov	r9, r1
    f628:	b1 2c       	mov	r11, r1
    f62a:	a1 2c       	mov	r10, r1
    f62c:	bf 01       	movw	r22, r30
    f62e:	a5 01       	movw	r20, r10
    f630:	94 01       	movw	r18, r8
    f632:	0e 94 d9 ac 	call	0x159b2	; 0x159b2 <__udivmodsi4>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:244
    n /= base;
    f636:	f9 01       	movw	r30, r18
    f638:	ca 01       	movw	r24, r20
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:246

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    f63a:	6a 30       	cpi	r22, 0x0A	; 10
    f63c:	74 f5       	brge	.+92     	; 0xf69a <Print::printNumber(unsigned long, unsigned char)+0xae>
    f63e:	60 5d       	subi	r22, 0xD0	; 208
    f640:	d8 01       	movw	r26, r16
    f642:	6e 93       	st	-X, r22
    f644:	8d 01       	movw	r16, r26
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:247
  } while(n);
    f646:	23 2b       	or	r18, r19
    f648:	24 2b       	or	r18, r20
    f64a:	25 2b       	or	r18, r21
    f64c:	79 f7       	brne	.-34     	; 0xf62c <Print::printNumber(unsigned long, unsigned char)+0x40>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    f64e:	90 e0       	ldi	r25, 0x00	; 0
    f650:	80 e0       	ldi	r24, 0x00	; 0
write():
    f652:	10 97       	sbiw	r26, 0x00	; 0
    f654:	89 f0       	breq	.+34     	; 0xf678 <Print::printNumber(unsigned long, unsigned char)+0x8c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.h:54
      return write((const uint8_t *)str, strlen(str));
    f656:	fd 01       	movw	r30, r26
    f658:	01 90       	ld	r0, Z+
    f65a:	00 20       	and	r0, r0
    f65c:	e9 f7       	brne	.-6      	; 0xf658 <Print::printNumber(unsigned long, unsigned char)+0x6c>
    f65e:	31 97       	sbiw	r30, 0x01	; 1
    f660:	af 01       	movw	r20, r30
    f662:	4a 1b       	sub	r20, r26
    f664:	5b 0b       	sbc	r21, r27
    f666:	d7 01       	movw	r26, r14
    f668:	ed 91       	ld	r30, X+
    f66a:	fc 91       	ld	r31, X
    f66c:	02 80       	ldd	r0, Z+2	; 0x02
    f66e:	f3 81       	ldd	r31, Z+3	; 0x03
    f670:	e0 2d       	mov	r30, r0
    f672:	b8 01       	movw	r22, r16
    f674:	c7 01       	movw	r24, r14
    f676:	19 95       	eicall
_ZN5Print11printNumberEmh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:250

  return write(str);
}
    f678:	a1 96       	adiw	r28, 0x21	; 33
    f67a:	0f b6       	in	r0, 0x3f	; 63
    f67c:	f8 94       	cli
    f67e:	de bf       	out	0x3e, r29	; 62
    f680:	0f be       	out	0x3f, r0	; 63
    f682:	cd bf       	out	0x3d, r28	; 61
    f684:	df 91       	pop	r29
    f686:	cf 91       	pop	r28
    f688:	1f 91       	pop	r17
    f68a:	0f 91       	pop	r16
    f68c:	ff 90       	pop	r15
    f68e:	ef 90       	pop	r14
    f690:	bf 90       	pop	r11
    f692:	af 90       	pop	r10
    f694:	9f 90       	pop	r9
    f696:	8f 90       	pop	r8
    f698:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:246

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    f69a:	69 5c       	subi	r22, 0xC9	; 201
    f69c:	d1 cf       	rjmp	.-94     	; 0xf640 <Print::printNumber(unsigned long, unsigned char)+0x54>

0000f69e <TwoWire::requestFrom(int, int) [clone .constprop.130]>:
_ZN7TwoWire11requestFromEii.constprop.130():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:131
uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
    f69e:	68 2f       	mov	r22, r24
    f6a0:	88 e6       	ldi	r24, 0x68	; 104
    f6a2:	0e 94 01 77 	call	0xee02	; 0xee02 <twi_readFrom.part.0.constprop.170>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:116
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    f6a6:	10 92 e4 10 	sts	0x10E4, r1	; 0x8010e4 <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:117
  rxBufferLength = read;
    f6aa:	80 93 e3 10 	sts	0x10E3, r24	; 0x8010e3 <TwoWire::rxBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:134
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}
    f6ae:	08 95       	ret

0000f6b0 <IPAddress::printTo(Print&) const>:
_ZNK9IPAddress7printToER5Print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:104
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
    f6b0:	8f 92       	push	r8
    f6b2:	9f 92       	push	r9
    f6b4:	af 92       	push	r10
    f6b6:	bf 92       	push	r11
    f6b8:	cf 92       	push	r12
    f6ba:	df 92       	push	r13
    f6bc:	ef 92       	push	r14
    f6be:	ff 92       	push	r15
    f6c0:	0f 93       	push	r16
    f6c2:	1f 93       	push	r17
    f6c4:	cf 93       	push	r28
    f6c6:	df 93       	push	r29
    f6c8:	7c 01       	movw	r14, r24
    f6ca:	eb 01       	movw	r28, r22
    f6cc:	6c 01       	movw	r12, r24
    f6ce:	82 e0       	ldi	r24, 0x02	; 2
    f6d0:	c8 0e       	add	r12, r24
    f6d2:	d1 1c       	adc	r13, r1
    f6d4:	47 01       	movw	r8, r14
    f6d6:	e5 e0       	ldi	r30, 0x05	; 5
    f6d8:	8e 0e       	add	r8, r30
    f6da:	91 1c       	adc	r9, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:105
    size_t n = 0;
    f6dc:	10 e0       	ldi	r17, 0x00	; 0
    f6de:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:108
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address.bytes[i], DEC);
    f6e0:	f6 01       	movw	r30, r12
    f6e2:	41 91       	ld	r20, Z+
    f6e4:	6f 01       	movw	r12, r30
print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:74
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    f6e6:	50 e0       	ldi	r21, 0x00	; 0
    f6e8:	70 e0       	ldi	r23, 0x00	; 0
    f6ea:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    f6ec:	2a e0       	ldi	r18, 0x0A	; 10
    f6ee:	ce 01       	movw	r24, r28
    f6f0:	0e 94 f6 7a 	call	0xf5ec	; 0xf5ec <Print::printNumber(unsigned long, unsigned char)>
    f6f4:	5c 01       	movw	r10, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:69
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    f6f6:	e8 81       	ld	r30, Y
    f6f8:	f9 81       	ldd	r31, Y+1	; 0x01
    f6fa:	01 90       	ld	r0, Z+
    f6fc:	f0 81       	ld	r31, Z
    f6fe:	e0 2d       	mov	r30, r0
    f700:	6e e2       	ldi	r22, 0x2E	; 46
    f702:	ce 01       	movw	r24, r28
    f704:	19 95       	eicall
_ZNK9IPAddress7printToER5Print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:109
        n += p.print('.');
    f706:	8a 0d       	add	r24, r10
    f708:	9b 1d       	adc	r25, r11
    f70a:	08 0f       	add	r16, r24
    f70c:	19 1f       	adc	r17, r25
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:106
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    f70e:	c8 14       	cp	r12, r8
    f710:	d9 04       	cpc	r13, r9
    f712:	31 f7       	brne	.-52     	; 0xf6e0 <IPAddress::printTo(Print&) const+0x30>
print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:74
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    f714:	f7 01       	movw	r30, r14
    f716:	45 81       	ldd	r20, Z+5	; 0x05
    f718:	50 e0       	ldi	r21, 0x00	; 0
    f71a:	70 e0       	ldi	r23, 0x00	; 0
    f71c:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    f71e:	2a e0       	ldi	r18, 0x0A	; 10
    f720:	ce 01       	movw	r24, r28
    f722:	0e 94 f6 7a 	call	0xf5ec	; 0xf5ec <Print::printNumber(unsigned long, unsigned char)>
_ZNK9IPAddress7printToER5Print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:113
        n += p.print(_address.bytes[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address.bytes[3], DEC);
    return n;
}
    f726:	80 0f       	add	r24, r16
    f728:	91 1f       	adc	r25, r17
    f72a:	df 91       	pop	r29
    f72c:	cf 91       	pop	r28
    f72e:	1f 91       	pop	r17
    f730:	0f 91       	pop	r16
    f732:	ff 90       	pop	r15
    f734:	ef 90       	pop	r14
    f736:	df 90       	pop	r13
    f738:	cf 90       	pop	r12
    f73a:	bf 90       	pop	r11
    f73c:	af 90       	pop	r10
    f73e:	9f 90       	pop	r9
    f740:	8f 90       	pop	r8
    f742:	08 95       	ret

0000f744 <W5500Class::readSnRX_RSR(unsigned char)>:
_ZN10W5500Class12readSnRX_RSREh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:320
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
  __SOCKET_REGISTER16(SnRX_RSR,   0x0026)        // RX Free Size
    f744:	1f 93       	push	r17
    f746:	cf 93       	push	r28
    f748:	df 93       	push	r29
    f74a:	18 2f       	mov	r17, r24
    f74c:	66 e2       	ldi	r22, 0x26	; 38
    f74e:	70 e0       	ldi	r23, 0x00	; 0
    f750:	0e 94 80 2e 	call	0x5d00	; 0x5d00 <W5500Class::readSn(unsigned char, unsigned int)>
    f754:	c8 2f       	mov	r28, r24
    f756:	d0 e0       	ldi	r29, 0x00	; 0
    f758:	dc 2f       	mov	r29, r28
    f75a:	cc 27       	eor	r28, r28
    f75c:	67 e2       	ldi	r22, 0x27	; 39
    f75e:	70 e0       	ldi	r23, 0x00	; 0
    f760:	81 2f       	mov	r24, r17
    f762:	0e 94 80 2e 	call	0x5d00	; 0x5d00 <W5500Class::readSn(unsigned char, unsigned int)>
    f766:	8c 0f       	add	r24, r28
    f768:	9d 2f       	mov	r25, r29
    f76a:	91 1d       	adc	r25, r1
    f76c:	df 91       	pop	r29
    f76e:	cf 91       	pop	r28
    f770:	1f 91       	pop	r17
    f772:	08 95       	ret

0000f774 <W5500Class::readSnTX_FSR(unsigned char)>:
_ZN10W5500Class12readSnTX_FSREh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:317
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
  __SOCKET_REGISTER16(SnMSSR,     0x0012)        // Max Segment Size
  __SOCKET_REGISTER8(SnPROTO,     0x0014)        // Protocol in IP RAW Mode
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
    f774:	1f 93       	push	r17
    f776:	cf 93       	push	r28
    f778:	df 93       	push	r29
    f77a:	18 2f       	mov	r17, r24
    f77c:	60 e2       	ldi	r22, 0x20	; 32
    f77e:	70 e0       	ldi	r23, 0x00	; 0
    f780:	0e 94 80 2e 	call	0x5d00	; 0x5d00 <W5500Class::readSn(unsigned char, unsigned int)>
    f784:	c8 2f       	mov	r28, r24
    f786:	d0 e0       	ldi	r29, 0x00	; 0
    f788:	dc 2f       	mov	r29, r28
    f78a:	cc 27       	eor	r28, r28
    f78c:	61 e2       	ldi	r22, 0x21	; 33
    f78e:	70 e0       	ldi	r23, 0x00	; 0
    f790:	81 2f       	mov	r24, r17
    f792:	0e 94 80 2e 	call	0x5d00	; 0x5d00 <W5500Class::readSn(unsigned char, unsigned int)>
    f796:	8c 0f       	add	r24, r28
    f798:	9d 2f       	mov	r25, r29
    f79a:	91 1d       	adc	r25, r1
    f79c:	df 91       	pop	r29
    f79e:	cf 91       	pop	r28
    f7a0:	1f 91       	pop	r17
    f7a2:	08 95       	ret

0000f7a4 <__cxa_pure_virtual>:
__cxa_pure_virtual():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/abi.cpp:27
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
    f7a4:	0e 94 43 af 	call	0x15e86	; 0x15e86 <abort>

0000f7a8 <EthernetUDP::beginPacket(char const*, unsigned int)>:
_ZN11EthernetUDP11beginPacketEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:84
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

int EthernetUDP::beginPacket(const char *host, uint16_t port)
{
    f7a8:	cf 92       	push	r12
    f7aa:	df 92       	push	r13
    f7ac:	ef 92       	push	r14
    f7ae:	ff 92       	push	r15
    f7b0:	0f 93       	push	r16
    f7b2:	1f 93       	push	r17
    f7b4:	cf 93       	push	r28
    f7b6:	df 93       	push	r29
    f7b8:	cd b7       	in	r28, 0x3d	; 61
    f7ba:	de b7       	in	r29, 0x3e	; 62
    f7bc:	af 97       	sbiw	r28, 0x2f	; 47
    f7be:	0f b6       	in	r0, 0x3f	; 63
    f7c0:	f8 94       	cli
    f7c2:	de bf       	out	0x3e, r29	; 62
    f7c4:	0f be       	out	0x3f, r0	; 63
    f7c6:	cd bf       	out	0x3d, r28	; 61
    f7c8:	7c 01       	movw	r14, r24
    f7ca:	6a 01       	movw	r12, r20
__base_ctor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:23
*/

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
    f7cc:	02 ee       	ldi	r16, 0xE2	; 226
    f7ce:	12 e0       	ldi	r17, 0x02	; 2
    f7d0:	1a 83       	std	Y+2, r17	; 0x02
    f7d2:	09 83       	std	Y+1, r16	; 0x01
_ZN5PrintC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    f7d4:	1c 86       	std	Y+12, r1	; 0x0c
    f7d6:	1b 86       	std	Y+11, r1	; 0x0b
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Stream.h:63
    f7d8:	88 ee       	ldi	r24, 0xE8	; 232
    f7da:	93 e0       	ldi	r25, 0x03	; 3
    f7dc:	a0 e0       	ldi	r26, 0x00	; 0
    f7de:	b0 e0       	ldi	r27, 0x00	; 0
    f7e0:	8d 87       	std	Y+13, r24	; 0x0d
    f7e2:	9e 87       	std	Y+14, r25	; 0x0e
    f7e4:	af 87       	std	Y+15, r26	; 0x0f
    f7e6:	b8 8b       	std	Y+16, r27	; 0x10
__base_ctor ():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:40
#include "Ethernet2.h"
#include "Udp.h"
#include "Dns.h"

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}
    f7e8:	88 e9       	ldi	r24, 0x98	; 152
    f7ea:	92 e0       	ldi	r25, 0x02	; 2
    f7ec:	9a 87       	std	Y+10, r25	; 0x0a
    f7ee:	89 87       	std	Y+9, r24	; 0x09
    f7f0:	88 e0       	ldi	r24, 0x08	; 8
    f7f2:	8d 8b       	std	Y+21, r24	; 0x15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:23
    f7f4:	19 8f       	std	Y+25, r17	; 0x19
    f7f6:	08 8f       	std	Y+24, r16	; 0x18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:25
{
    _address.dword = 0;
    f7f8:	1a 8e       	std	Y+26, r1	; 0x1a
    f7fa:	1b 8e       	std	Y+27, r1	; 0x1b
    f7fc:	1c 8e       	std	Y+28, r1	; 0x1c
    f7fe:	1d 8e       	std	Y+29, r1	; 0x1d
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:23
*/

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
    f800:	1b a7       	std	Y+43, r17	; 0x2b
    f802:	0a a7       	std	Y+42, r16	; 0x2a
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:25
{
    _address.dword = 0;
    f804:	1c a6       	std	Y+44, r1	; 0x2c
    f806:	1d a6       	std	Y+45, r1	; 0x2d
    f808:	1e a6       	std	Y+46, r1	; 0x2e
    f80a:	1f a6       	std	Y+47, r1	; 0x2f
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
    f80c:	80 91 0c 0c 	lds	r24, 0x0C0C	; 0x800c0c <Ethernet+0x2>
    f810:	90 91 0d 0c 	lds	r25, 0x0C0D	; 0x800c0d <Ethernet+0x3>
    f814:	a0 91 0e 0c 	lds	r26, 0x0C0E	; 0x800c0e <Ethernet+0x4>
    f818:	b0 91 0f 0c 	lds	r27, 0x0C0F	; 0x800c0f <Ethernet+0x5>
    f81c:	8e a3       	std	Y+38, r24	; 0x26
    f81e:	9f a3       	std	Y+39, r25	; 0x27
    f820:	a8 a7       	std	Y+40, r26	; 0x28
    f822:	b9 a7       	std	Y+41, r27	; 0x29
_ZN9IPAddressaSERKS_():
    f824:	8b 83       	std	Y+3, r24	; 0x03
    f826:	9c 83       	std	Y+4, r25	; 0x04
    f828:	ad 83       	std	Y+5, r26	; 0x05
    f82a:	be 83       	std	Y+6, r27	; 0x06
begin():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:54
    f82c:	18 86       	std	Y+8, r1	; 0x08
    f82e:	1f 82       	std	Y+7, r1	; 0x07
_ZN11EthernetUDP11beginPacketEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:91
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;

  dns.begin(Ethernet.dnsServerIP());
  ret = dns.getHostByName(host, remote_addr);
    f830:	ae 01       	movw	r20, r28
    f832:	46 5d       	subi	r20, 0xD6	; 214
    f834:	5f 4f       	sbci	r21, 0xFF	; 255
    f836:	ce 01       	movw	r24, r28
    f838:	01 96       	adiw	r24, 0x01	; 1
    f83a:	0e 94 86 2f 	call	0x5f0c	; 0x5f0c <DNSClient::getHostByName(char const*, IPAddress&)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:92
  if (ret == 1) {
    f83e:	81 30       	cpi	r24, 0x01	; 1
    f840:	91 05       	cpc	r25, r1
    f842:	b1 f4       	brne	.+44     	; 0xf870 <EthernetUDP::beginPacket(char const*, unsigned int)+0xc8>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:93
    return beginPacket(remote_addr, port);
    f844:	d7 01       	movw	r26, r14
    f846:	ed 91       	ld	r30, X+
    f848:	fc 91       	ld	r31, X
    f84a:	04 88       	ldd	r0, Z+20	; 0x14
    f84c:	f5 89       	ldd	r31, Z+21	; 0x15
    f84e:	e0 2d       	mov	r30, r0
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
    f850:	1d a3       	std	Y+37, r17	; 0x25
    f852:	0c a3       	std	Y+36, r16	; 0x24
    f854:	8c a5       	ldd	r24, Y+44	; 0x2c
    f856:	9d a5       	ldd	r25, Y+45	; 0x2d
    f858:	ae a5       	ldd	r26, Y+46	; 0x2e
    f85a:	bf a5       	ldd	r27, Y+47	; 0x2f
    f85c:	8e a3       	std	Y+38, r24	; 0x26
    f85e:	9f a3       	std	Y+39, r25	; 0x27
    f860:	a8 a7       	std	Y+40, r26	; 0x28
    f862:	b9 a7       	std	Y+41, r27	; 0x29
_ZN11EthernetUDP11beginPacketEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:93
    f864:	a6 01       	movw	r20, r12
    f866:	be 01       	movw	r22, r28
    f868:	6c 5d       	subi	r22, 0xDC	; 220
    f86a:	7f 4f       	sbci	r23, 0xFF	; 255
    f86c:	c7 01       	movw	r24, r14
    f86e:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:97
  } else {
    return ret;
  }
}
    f870:	af 96       	adiw	r28, 0x2f	; 47
    f872:	0f b6       	in	r0, 0x3f	; 63
    f874:	f8 94       	cli
    f876:	de bf       	out	0x3e, r29	; 62
    f878:	0f be       	out	0x3f, r0	; 63
    f87a:	cd bf       	out	0x3d, r28	; 61
    f87c:	df 91       	pop	r29
    f87e:	cf 91       	pop	r28
    f880:	1f 91       	pop	r17
    f882:	0f 91       	pop	r16
    f884:	ff 90       	pop	r15
    f886:	ef 90       	pop	r14
    f888:	df 90       	pop	r13
    f88a:	cf 90       	pop	r12
    f88c:	08 95       	ret

0000f88e <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.189]>:
_ZN11LCDWIKI_GUI15Draw_Fast_HLineEiii.constprop.189():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:93
{
	Fill_Rect(x, y, 1, h, draw_color);
}

//draw a horizontal line
void LCDWIKI_GUI::Draw_Fast_HLine(int16_t x, int16_t y, int16_t w)
    f88e:	ef 92       	push	r14
    f890:	ff 92       	push	r15
    f892:	0f 93       	push	r16
    f894:	1f 93       	push	r17
    f896:	9a 01       	movw	r18, r20
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:95
{
	Fill_Rect(x, y, w, 1, draw_color);
    f898:	e0 90 c4 0d 	lds	r14, 0x0DC4	; 0x800dc4 <my_lcd+0xa>
    f89c:	f0 90 c5 0d 	lds	r15, 0x0DC5	; 0x800dc5 <my_lcd+0xb>
    f8a0:	01 e0       	ldi	r16, 0x01	; 1
    f8a2:	10 e0       	ldi	r17, 0x00	; 0
    f8a4:	ab 01       	movw	r20, r22
    f8a6:	bc 01       	movw	r22, r24
    f8a8:	8a eb       	ldi	r24, 0xBA	; 186
    f8aa:	9d e0       	ldi	r25, 0x0D	; 13
    f8ac:	0e 94 10 1b 	call	0x3620	; 0x3620 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:96
}
    f8b0:	1f 91       	pop	r17
    f8b2:	0f 91       	pop	r16
    f8b4:	ff 90       	pop	r15
    f8b6:	ef 90       	pop	r14
    f8b8:	08 95       	ret

0000f8ba <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.188]>:
_ZN11LCDWIKI_GUI14Draw_RectangleEiiii.constprop.188():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:162
    	}
  	}
}

//draw a rectangle
void LCDWIKI_GUI::Draw_Rectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
    f8ba:	8f 92       	push	r8
    f8bc:	9f 92       	push	r9
    f8be:	af 92       	push	r10
    f8c0:	bf 92       	push	r11
    f8c2:	cf 92       	push	r12
    f8c4:	df 92       	push	r13
    f8c6:	ef 92       	push	r14
    f8c8:	ff 92       	push	r15
    f8ca:	0f 93       	push	r16
    f8cc:	1f 93       	push	r17
    f8ce:	cf 93       	push	r28
    f8d0:	df 93       	push	r29
    f8d2:	6c 01       	movw	r12, r24
    f8d4:	eb 01       	movw	r28, r22
    f8d6:	4a 01       	movw	r8, r20
    f8d8:	79 01       	movw	r14, r18
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:164
{ 
	int16_t w = x2 - x1 + 1, h = y2 - y1 + 1;
    f8da:	9a 01       	movw	r18, r20
    f8dc:	28 1b       	sub	r18, r24
    f8de:	39 0b       	sbc	r19, r25
    f8e0:	89 01       	movw	r16, r18
    f8e2:	0f 5f       	subi	r16, 0xFF	; 255
    f8e4:	1f 4f       	sbci	r17, 0xFF	; 255
    f8e6:	c7 01       	movw	r24, r14
    f8e8:	86 1b       	sub	r24, r22
    f8ea:	97 0b       	sbc	r25, r23
    f8ec:	5c 01       	movw	r10, r24
    f8ee:	4f ef       	ldi	r20, 0xFF	; 255
    f8f0:	a4 1a       	sub	r10, r20
    f8f2:	b4 0a       	sbc	r11, r20
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:165
	if (w < 0) 
    f8f4:	17 ff       	sbrs	r17, 7
    f8f6:	04 c0       	rjmp	.+8      	; 0xf900 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.188]+0x46>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:168
	{ 
		x1 = x2; 
		w = -w; 
    f8f8:	89 01       	movw	r16, r18
    f8fa:	00 95       	com	r16
    f8fc:	10 95       	com	r17
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:167
void LCDWIKI_GUI::Draw_Rectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
{ 
	int16_t w = x2 - x1 + 1, h = y2 - y1 + 1;
	if (w < 0) 
	{ 
		x1 = x2; 
    f8fe:	64 01       	movw	r12, r8
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:170
		w = -w; 
	}
	if (h < 0) 
    f900:	b7 fe       	sbrs	r11, 7
    f902:	04 c0       	rjmp	.+8      	; 0xf90c <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.188]+0x52>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:173
	{ 
		y1 = y2; 
		h = -h; 
    f904:	5c 01       	movw	r10, r24
    f906:	a0 94       	com	r10
    f908:	b0 94       	com	r11
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:172
		x1 = x2; 
		w = -w; 
	}
	if (h < 0) 
	{ 
		y1 = y2; 
    f90a:	e7 01       	movw	r28, r14
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:175
		h = -h; 
	}
	Draw_Fast_HLine(x1, y1, w);
    f90c:	a8 01       	movw	r20, r16
    f90e:	be 01       	movw	r22, r28
    f910:	c6 01       	movw	r24, r12
    f912:	0e 94 47 7c 	call	0xf88e	; 0xf88e <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.189]>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:176
  	Draw_Fast_HLine(x1, y2, w);
    f916:	a8 01       	movw	r20, r16
    f918:	b7 01       	movw	r22, r14
    f91a:	c6 01       	movw	r24, r12
    f91c:	0e 94 47 7c 	call	0xf88e	; 0xf88e <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.189]>
Draw_Fast_VLine():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:89
}

//draw a vertical line 
void LCDWIKI_GUI::Draw_Fast_VLine(int16_t x, int16_t y, int16_t h)
{
	Fill_Rect(x, y, 1, h, draw_color);
    f920:	e0 90 c4 0d 	lds	r14, 0x0DC4	; 0x800dc4 <my_lcd+0xa>
    f924:	f0 90 c5 0d 	lds	r15, 0x0DC5	; 0x800dc5 <my_lcd+0xb>
    f928:	85 01       	movw	r16, r10
    f92a:	21 e0       	ldi	r18, 0x01	; 1
    f92c:	30 e0       	ldi	r19, 0x00	; 0
    f92e:	ae 01       	movw	r20, r28
    f930:	b6 01       	movw	r22, r12
    f932:	8a eb       	ldi	r24, 0xBA	; 186
    f934:	9d e0       	ldi	r25, 0x0D	; 13
    f936:	0e 94 10 1b 	call	0x3620	; 0x3620 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
    f93a:	e0 90 c4 0d 	lds	r14, 0x0DC4	; 0x800dc4 <my_lcd+0xa>
    f93e:	f0 90 c5 0d 	lds	r15, 0x0DC5	; 0x800dc5 <my_lcd+0xb>
    f942:	21 e0       	ldi	r18, 0x01	; 1
    f944:	30 e0       	ldi	r19, 0x00	; 0
    f946:	ae 01       	movw	r20, r28
    f948:	b4 01       	movw	r22, r8
    f94a:	8a eb       	ldi	r24, 0xBA	; 186
    f94c:	9d e0       	ldi	r25, 0x0D	; 13
    f94e:	0e 94 10 1b 	call	0x3620	; 0x3620 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
_ZN11LCDWIKI_GUI14Draw_RectangleEiiii.constprop.188():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:179
	}
	Draw_Fast_HLine(x1, y1, w);
  	Draw_Fast_HLine(x1, y2, w);
	Draw_Fast_VLine(x1, y1, h);
	Draw_Fast_VLine(x2, y1, h);
}
    f952:	df 91       	pop	r29
    f954:	cf 91       	pop	r28
    f956:	1f 91       	pop	r17
    f958:	0f 91       	pop	r16
    f95a:	ff 90       	pop	r15
    f95c:	ef 90       	pop	r14
    f95e:	df 90       	pop	r13
    f960:	cf 90       	pop	r12
    f962:	bf 90       	pop	r11
    f964:	af 90       	pop	r10
    f966:	9f 90       	pop	r9
    f968:	8f 90       	pop	r8
    f96a:	08 95       	ret

0000f96c <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.187]>:
_ZN11LCDWIKI_GUI14Fill_RectangleEiiii.constprop.187():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:70
	Read_GRAM(x, y, &colour, 1, 1);
	return colour;
}

//fill a rectangle
void LCDWIKI_GUI::Fill_Rectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
    f96c:	ef 92       	push	r14
    f96e:	ff 92       	push	r15
    f970:	0f 93       	push	r16
    f972:	1f 93       	push	r17
    f974:	cf 93       	push	r28
    f976:	df 93       	push	r29
    f978:	f9 01       	movw	r30, r18
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:72
{
	int w = x2 - x1 + 1, h = y2 - y1 + 1;
    f97a:	ea 01       	movw	r28, r20
    f97c:	c8 1b       	sub	r28, r24
    f97e:	d9 0b       	sbc	r29, r25
    f980:	9e 01       	movw	r18, r28
    f982:	2f 5f       	subi	r18, 0xFF	; 255
    f984:	3f 4f       	sbci	r19, 0xFF	; 255
    f986:	df 01       	movw	r26, r30
    f988:	a6 1b       	sub	r26, r22
    f98a:	b7 0b       	sbc	r27, r23
    f98c:	8d 01       	movw	r16, r26
    f98e:	0f 5f       	subi	r16, 0xFF	; 255
    f990:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:73
   	if (w < 0) 
    f992:	37 ff       	sbrs	r19, 7
    f994:	04 c0       	rjmp	.+8      	; 0xf99e <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.187]+0x32>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:76
	{ 
		x1 = x2; 
		w = -w; 
    f996:	9e 01       	movw	r18, r28
    f998:	20 95       	com	r18
    f99a:	30 95       	com	r19
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:75
void LCDWIKI_GUI::Fill_Rectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
{
	int w = x2 - x1 + 1, h = y2 - y1 + 1;
   	if (w < 0) 
	{ 
		x1 = x2; 
    f99c:	ca 01       	movw	r24, r20
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:78
		w = -w; 
	}
	if (h < 0) 
    f99e:	17 ff       	sbrs	r17, 7
    f9a0:	04 c0       	rjmp	.+8      	; 0xf9aa <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.187]+0x3e>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:81
	{ 
		y1 = y2; 
		h = -h; 
    f9a2:	8d 01       	movw	r16, r26
    f9a4:	00 95       	com	r16
    f9a6:	10 95       	com	r17
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:80
		x1 = x2; 
		w = -w; 
	}
	if (h < 0) 
	{ 
		y1 = y2; 
    f9a8:	bf 01       	movw	r22, r30
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:83
		h = -h; 
	}
	Fill_Rect(x1, y1, w, h, draw_color);
    f9aa:	e0 90 c4 0d 	lds	r14, 0x0DC4	; 0x800dc4 <my_lcd+0xa>
    f9ae:	f0 90 c5 0d 	lds	r15, 0x0DC5	; 0x800dc5 <my_lcd+0xb>
    f9b2:	ab 01       	movw	r20, r22
    f9b4:	bc 01       	movw	r22, r24
    f9b6:	8a eb       	ldi	r24, 0xBA	; 186
    f9b8:	9d e0       	ldi	r25, 0x0D	; 13
    f9ba:	0e 94 10 1b 	call	0x3620	; 0x3620 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:84
}
    f9be:	df 91       	pop	r29
    f9c0:	cf 91       	pop	r28
    f9c2:	1f 91       	pop	r17
    f9c4:	0f 91       	pop	r16
    f9c6:	ff 90       	pop	r15
    f9c8:	ef 90       	pop	r14
    f9ca:	08 95       	ret

0000f9cc <SRAM_23LC::sendAddressBytes(unsigned long) [clone .constprop.185]>:
_ZN9SRAM_23LC16sendAddressBytesEm.constprop.185():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:133
  if (command == SRAM_23LC_COMMAND_READ || command == SRAM_23LC_COMMAND_WRITE) {
    sendAddressBytes(address);
  }
}

void SRAM_23LC::sendAddressBytes(const uint32_t address)
    f9cc:	cf 92       	push	r12
    f9ce:	df 92       	push	r13
    f9d0:	ef 92       	push	r14
    f9d2:	ff 92       	push	r15
    f9d4:	6b 01       	movw	r12, r22
    f9d6:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:135
{
  if (_capacity > 0x10000) {
    f9d8:	80 91 84 0c 	lds	r24, 0x0C84	; 0x800c84 <SRAM+0x4>
    f9dc:	90 91 85 0c 	lds	r25, 0x0C85	; 0x800c85 <SRAM+0x5>
    f9e0:	a0 91 86 0c 	lds	r26, 0x0C86	; 0x800c86 <SRAM+0x6>
    f9e4:	b0 91 87 0c 	lds	r27, 0x0C87	; 0x800c87 <SRAM+0x7>
    f9e8:	01 97       	sbiw	r24, 0x01	; 1
    f9ea:	a1 40       	sbci	r26, 0x01	; 1
    f9ec:	b1 05       	cpc	r27, r1
    f9ee:	48 f0       	brcs	.+18     	; 0xfa02 <SRAM_23LC::sendAddressBytes(unsigned long) [clone .constprop.185]+0x36>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:136
    _spi->transfer((uint8_t)((address >> 16) & 0xFF));
    f9f0:	b7 01       	movw	r22, r14
    f9f2:	88 27       	eor	r24, r24
    f9f4:	99 27       	eor	r25, r25
    f9f6:	80 91 80 0c 	lds	r24, 0x0C80	; 0x800c80 <SRAM>
    f9fa:	90 91 81 0c 	lds	r25, 0x0C81	; 0x800c81 <SRAM+0x1>
    f9fe:	0e 94 b8 32 	call	0x6570	; 0x6570 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:138
  }
  _spi->transfer((uint8_t)((address >> 8) & 0xFF));
    fa02:	99 27       	eor	r25, r25
    fa04:	8f 2d       	mov	r24, r15
    fa06:	7e 2d       	mov	r23, r14
    fa08:	6d 2d       	mov	r22, r13
    fa0a:	80 91 80 0c 	lds	r24, 0x0C80	; 0x800c80 <SRAM>
    fa0e:	90 91 81 0c 	lds	r25, 0x0C81	; 0x800c81 <SRAM+0x1>
    fa12:	0e 94 b8 32 	call	0x6570	; 0x6570 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:139
  _spi->transfer((uint8_t)(address & 0xFF));
    fa16:	6c 2d       	mov	r22, r12
    fa18:	80 91 80 0c 	lds	r24, 0x0C80	; 0x800c80 <SRAM>
    fa1c:	90 91 81 0c 	lds	r25, 0x0C81	; 0x800c81 <SRAM+0x1>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:140
}
    fa20:	ff 90       	pop	r15
    fa22:	ef 90       	pop	r14
    fa24:	df 90       	pop	r13
    fa26:	cf 90       	pop	r12
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:139
{
  if (_capacity > 0x10000) {
    _spi->transfer((uint8_t)((address >> 16) & 0xFF));
  }
  _spi->transfer((uint8_t)((address >> 8) & 0xFF));
  _spi->transfer((uint8_t)(address & 0xFF));
    fa28:	0c 94 b8 32 	jmp	0x6570	; 0x6570 <SoftSPIB::transfer(unsigned char)>

0000fa2c <TwoWire::beginTransmission(unsigned char) [clone .constprop.168]>:
_ZN7TwoWire17beginTransmissionEh.constprop.168():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:144
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    fa2c:	91 e0       	ldi	r25, 0x01	; 1
    fa2e:	90 93 e8 10 	sts	0x10E8, r25	; 0x8010e8 <TwoWire::transmitting>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:146
  // set address of targeted slave
  txAddress = address;
    fa32:	80 93 e7 10 	sts	0x10E7, r24	; 0x8010e7 <TwoWire::txAddress>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:148
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    fa36:	10 92 e6 10 	sts	0x10E6, r1	; 0x8010e6 <TwoWire::txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:149
  txBufferLength = 0;
    fa3a:	10 92 e5 10 	sts	0x10E5, r1	; 0x8010e5 <TwoWire::txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:150
}
    fa3e:	08 95       	ret

0000fa40 <LCDWIKI_GUI::Fill_Screen(unsigned int) [clone .constprop.162]>:
_ZN11LCDWIKI_GUI11Fill_ScreenEj.constprop.162():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:99
{
	Fill_Rect(x, y, w, 1, draw_color);
}

//Fill the full screen with color
void LCDWIKI_GUI::Fill_Screen(uint16_t color)
    fa40:	ef 92       	push	r14
    fa42:	ff 92       	push	r15
    fa44:	0f 93       	push	r16
    fa46:	1f 93       	push	r17
_ZNK11LCDWIKI_KBV10Get_HeightEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:743
}

//get lcd height
int16_t LCDWIKI_KBV::Get_Height(void) const
{
	return height;
    fa48:	ea eb       	ldi	r30, 0xBA	; 186
    fa4a:	fd e0       	ldi	r31, 0x0D	; 13
_ZN11LCDWIKI_GUI11Fill_ScreenEj.constprop.162():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:101
{
	Fill_Rect(0, 0, Get_Width(), Get_Height(), color);
    fa4c:	04 89       	ldd	r16, Z+20	; 0x14
    fa4e:	15 89       	ldd	r17, Z+21	; 0x15
    fa50:	22 89       	ldd	r18, Z+18	; 0x12
    fa52:	33 89       	ldd	r19, Z+19	; 0x13
    fa54:	7c 01       	movw	r14, r24
    fa56:	50 e0       	ldi	r21, 0x00	; 0
    fa58:	40 e0       	ldi	r20, 0x00	; 0
    fa5a:	70 e0       	ldi	r23, 0x00	; 0
    fa5c:	60 e0       	ldi	r22, 0x00	; 0
    fa5e:	cf 01       	movw	r24, r30
    fa60:	0e 94 10 1b 	call	0x3620	; 0x3620 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:102
}
    fa64:	1f 91       	pop	r17
    fa66:	0f 91       	pop	r16
    fa68:	ff 90       	pop	r15
    fa6a:	ef 90       	pop	r14
    fa6c:	08 95       	ret

0000fa6e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]>:
_Z11show_stringPciihjjb.constprop.150():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1918
    csize - velikost pisma
    fc - foreground color
    bc - backgroud color
    mode - ?
*/
void show_string(char *str, int16_t x, int16_t y, uint8_t csize, uint16_t fc, uint16_t bc, boolean mode)
    fa6e:	8f 92       	push	r8
    fa70:	9f 92       	push	r9
    fa72:	af 92       	push	r10
    fa74:	bf 92       	push	r11
    fa76:	cf 92       	push	r12
    fa78:	df 92       	push	r13
    fa7a:	ef 92       	push	r14
    fa7c:	ff 92       	push	r15
    fa7e:	0f 93       	push	r16
    fa80:	1f 93       	push	r17
    fa82:	cf 93       	push	r28
    fa84:	df 93       	push	r29
    fa86:	00 d0       	rcall	.+0      	; 0xfa88 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]+0x1a>
    fa88:	00 d0       	rcall	.+0      	; 0xfa8a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]+0x1c>
    fa8a:	cd b7       	in	r28, 0x3d	; 61
    fa8c:	de b7       	in	r29, 0x3e	; 62
    fa8e:	6c 01       	movw	r12, r24
    fa90:	5b 01       	movw	r10, r22
    fa92:	4a 01       	movw	r8, r20
Set_Text_Mode():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:541
}

//set text mode
void LCDWIKI_GUI::Set_Text_Mode(boolean mode)
{
	text_mode = mode;
    fa94:	10 92 c7 0d 	sts	0x0DC7, r1	; 0x800dc7 <my_lcd+0xd>
Set_Text_Size():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:529
}

//set text size
void LCDWIKI_GUI::Set_Text_Size(uint8_t s)
{
	text_size = s;
    fa98:	20 93 c6 0d 	sts	0x0DC6, r18	; 0x800dc6 <my_lcd+0xc>
Set_Text_colour():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:493
}

//set text colour with 16bit color
void LCDWIKI_GUI::Set_Text_colour(uint16_t color)
{
	text_color = color;
    fa9c:	10 93 c1 0d 	sts	0x0DC1, r17	; 0x800dc1 <my_lcd+0x7>
    faa0:	00 93 c0 0d 	sts	0x0DC0, r16	; 0x800dc0 <my_lcd+0x6>
Set_Text_Back_colour():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:511
}

//set text background colour with 16bits color
void LCDWIKI_GUI::Set_Text_Back_colour(uint16_t color)
{
	text_bgcolor = color;	
    faa4:	f0 92 c3 0d 	sts	0x0DC3, r15	; 0x800dc3 <my_lcd+0x9>
    faa8:	e0 92 c2 0d 	sts	0x0DC2, r14	; 0x800dc2 <my_lcd+0x8>
_ZN6String4initEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:133
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
    faac:	1a 82       	std	Y+2, r1	; 0x02
    faae:	19 82       	std	Y+1, r1	; 0x01
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:134
  capacity = 0;
    fab0:	1c 82       	std	Y+4, r1	; 0x04
    fab2:	1b 82       	std	Y+3, r1	; 0x03
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:135
  len = 0;
    fab4:	1e 82       	std	Y+6, r1	; 0x06
    fab6:	1d 82       	std	Y+5, r1	; 0x05
__base_ctor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:31
/*********************************************/

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
    fab8:	fc 01       	movw	r30, r24
    faba:	01 90       	ld	r0, Z+
    fabc:	00 20       	and	r0, r0
    fabe:	e9 f7       	brne	.-6      	; 0xfaba <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]+0x4c>
    fac0:	31 97       	sbiw	r30, 0x01	; 1
    fac2:	8f 01       	movw	r16, r30
    fac4:	08 1b       	sub	r16, r24
    fac6:	19 0b       	sbc	r17, r25
changeBuffer():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:157
  return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
  char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    fac8:	b8 01       	movw	r22, r16
    faca:	6f 5f       	subi	r22, 0xFF	; 255
    facc:	7f 4f       	sbci	r23, 0xFF	; 255
    face:	90 e0       	ldi	r25, 0x00	; 0
    fad0:	80 e0       	ldi	r24, 0x00	; 0
    fad2:	0e 94 62 ae 	call	0x15cc4	; 0x15cc4 <realloc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:158
  if (newbuffer) {
    fad6:	00 97       	sbiw	r24, 0x00	; 0
    fad8:	81 f0       	breq	.+32     	; 0xfafa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]+0x8c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:159
    buffer = newbuffer;
    fada:	9a 83       	std	Y+2, r25	; 0x02
    fadc:	89 83       	std	Y+1, r24	; 0x01
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:160
    capacity = maxStrLen;
    fade:	1c 83       	std	Y+4, r17	; 0x04
    fae0:	0b 83       	std	Y+3, r16	; 0x03
reserve():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:149

unsigned char String::reserve(unsigned int size)
{
  if (buffer && capacity >= size) return 1;
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
    fae2:	2d 81       	ldd	r18, Y+5	; 0x05
    fae4:	3e 81       	ldd	r19, Y+6	; 0x06
    fae6:	23 2b       	or	r18, r19
    fae8:	11 f4       	brne	.+4      	; 0xfaee <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]+0x80>
    faea:	fc 01       	movw	r30, r24
    faec:	10 82       	st	Z, r1
copy():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:176
{
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
    faee:	1e 83       	std	Y+6, r17	; 0x06
    faf0:	0d 83       	std	Y+5, r16	; 0x05
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:177
  strcpy(buffer, cstr);
    faf2:	b6 01       	movw	r22, r12
    faf4:	0e 94 70 af 	call	0x15ee0	; 0x15ee0 <strcpy>
    faf8:	0c c0       	rjmp	.+24     	; 0xfb12 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]+0xa4>
invalidate():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:140
  len = 0;
}

void String::invalidate(void)
{
  if (buffer) free(buffer);
    fafa:	89 81       	ldd	r24, Y+1	; 0x01
    fafc:	9a 81       	ldd	r25, Y+2	; 0x02
    fafe:	00 97       	sbiw	r24, 0x00	; 0
    fb00:	11 f0       	breq	.+4      	; 0xfb06 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.150]+0x98>
    fb02:	0e 94 d2 a7 	call	0x14fa4	; 0x14fa4 <free>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:141
  buffer = NULL;
    fb06:	1a 82       	std	Y+2, r1	; 0x02
    fb08:	19 82       	std	Y+1, r1	; 0x01
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:142
  capacity = len = 0;
    fb0a:	1e 82       	std	Y+6, r1	; 0x06
    fb0c:	1d 82       	std	Y+5, r1	; 0x05
    fb0e:	1c 82       	std	Y+4, r1	; 0x04
    fb10:	1b 82       	std	Y+3, r1	; 0x03
_Z11show_stringPciihjjb.constprop.150():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1924
{
  my_lcd.Set_Text_Mode(mode);
  my_lcd.Set_Text_Size(csize);
  my_lcd.Set_Text_colour(fc);
  my_lcd.Set_Text_Back_colour(bc);
  my_lcd.Print_String(str, x, y);
    fb12:	a4 01       	movw	r20, r8
    fb14:	b5 01       	movw	r22, r10
    fb16:	ce 01       	movw	r24, r28
    fb18:	01 96       	adiw	r24, 0x01	; 1
    fb1a:	0e 94 a7 79 	call	0xf34e	; 0xf34e <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.155]>
__base_dtor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  free(buffer);
    fb1e:	89 81       	ldd	r24, Y+1	; 0x01
    fb20:	9a 81       	ldd	r25, Y+2	; 0x02
    fb22:	0e 94 d2 a7 	call	0x14fa4	; 0x14fa4 <free>
_Z11show_stringPciihjjb.constprop.150():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1925
}
    fb26:	26 96       	adiw	r28, 0x06	; 6
    fb28:	0f b6       	in	r0, 0x3f	; 63
    fb2a:	f8 94       	cli
    fb2c:	de bf       	out	0x3e, r29	; 62
    fb2e:	0f be       	out	0x3f, r0	; 63
    fb30:	cd bf       	out	0x3d, r28	; 61
    fb32:	df 91       	pop	r29
    fb34:	cf 91       	pop	r28
    fb36:	1f 91       	pop	r17
    fb38:	0f 91       	pop	r16
    fb3a:	ff 90       	pop	r15
    fb3c:	ef 90       	pop	r14
    fb3e:	df 90       	pop	r13
    fb40:	cf 90       	pop	r12
    fb42:	bf 90       	pop	r11
    fb44:	af 90       	pop	r10
    fb46:	9f 90       	pop	r9
    fb48:	8f 90       	pop	r8
    fb4a:	08 95       	ret

0000fb4c <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.149]>:
_ZN12PubSubClient11writeStringEPKcPhj.constprop.149():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:524
    _state = MQTT_DISCONNECTED;
    _client->stop();
    lastInActivity = lastOutActivity = millis();
}

uint16_t PubSubClient::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    fb4c:	cf 93       	push	r28
    fb4e:	df 93       	push	r29
    fb50:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:527
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
    fb52:	fa 01       	movw	r30, r20
    fb54:	32 96       	adiw	r30, 0x02	; 2
    fb56:	e6 0f       	add	r30, r22
    fb58:	f7 1f       	adc	r31, r23
    fb5a:	dc 01       	movw	r26, r24
    fb5c:	9d 01       	movw	r18, r26
    fb5e:	2c 1b       	sub	r18, r28
    fb60:	3d 0b       	sbc	r19, r29
    fb62:	cf 01       	movw	r24, r30
    fb64:	86 1b       	sub	r24, r22
    fb66:	97 0b       	sbc	r25, r23
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:528
    while (*idp) {
    fb68:	4d 91       	ld	r20, X+
    fb6a:	44 23       	and	r20, r20
    fb6c:	11 f0       	breq	.+4      	; 0xfb72 <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.149]+0x26>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:529
        buf[pos++] = *idp++;
    fb6e:	41 93       	st	Z+, r20
    fb70:	f5 cf       	rjmp	.-22     	; 0xfb5c <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.149]+0x10>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:532
        i++;
    }
    buf[pos-i-2] = (i >> 8);
    fb72:	ac 01       	movw	r20, r24
    fb74:	42 1b       	sub	r20, r18
    fb76:	53 0b       	sbc	r21, r19
    fb78:	64 0f       	add	r22, r20
    fb7a:	75 1f       	adc	r23, r21
    fb7c:	fb 01       	movw	r30, r22
    fb7e:	32 97       	sbiw	r30, 0x02	; 2
    fb80:	30 83       	st	Z, r19
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:533
    buf[pos-i-1] = (i & 0xFF);
    fb82:	61 50       	subi	r22, 0x01	; 1
    fb84:	71 09       	sbc	r23, r1
    fb86:	fb 01       	movw	r30, r22
    fb88:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:535
    return pos;
}
    fb8a:	df 91       	pop	r29
    fb8c:	cf 91       	pop	r28
    fb8e:	08 95       	ret

0000fb90 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.122]>:
_ZN13LCDWIKI_TOUCH10TP_Read_XYEh.constprop.122():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:114
   	return num; 
}

#define READ_TIMES 5 //the times for read
#define LOST_VAL 1          //
uint16_t LCDWIKI_TOUCH::TP_Read_XY(uint8_t xy)
    fb90:	ef 92       	push	r14
    fb92:	ff 92       	push	r15
    fb94:	0f 93       	push	r16
    fb96:	1f 93       	push	r17
    fb98:	cf 93       	push	r28
    fb9a:	df 93       	push	r29
    fb9c:	00 d0       	rcall	.+0      	; 0xfb9e <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.122]+0xe>
    fb9e:	00 d0       	rcall	.+0      	; 0xfba0 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.122]+0x10>
    fba0:	00 d0       	rcall	.+0      	; 0xfba2 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.122]+0x12>
    fba2:	1f 92       	push	r1
    fba4:	cd b7       	in	r28, 0x3d	; 61
    fba6:	de b7       	in	r29, 0x3e	; 62
    fba8:	fe 01       	movw	r30, r28
    fbaa:	31 96       	adiw	r30, 0x01	; 1
    fbac:	ae 01       	movw	r20, r28
    fbae:	45 5f       	subi	r20, 0xF5	; 245
    fbb0:	5f 4f       	sbci	r21, 0xFF	; 255
    fbb2:	7f 01       	movw	r14, r30
TP_Read_ADC():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:84

uint16_t LCDWIKI_TOUCH::TP_Read_ADC(uint8_t cmd)
{
	uint16_t num=0; 
	uint8_t count=0; 
	TCS_LOW; 
    fbb4:	20 91 ab 0d 	lds	r18, 0x0DAB	; 0x800dab <my_touch+0xf>
    fbb8:	30 91 ac 0d 	lds	r19, 0x0DAC	; 0x800dac <my_touch+0x10>
    fbbc:	d9 01       	movw	r26, r18
    fbbe:	6c 91       	ld	r22, X
    fbc0:	90 91 b5 0d 	lds	r25, 0x0DB5	; 0x800db5 <my_touch+0x19>
    fbc4:	90 95       	com	r25
    fbc6:	96 23       	and	r25, r22
    fbc8:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:85
	TCLK_LOW;           
    fbca:	20 91 ad 0d 	lds	r18, 0x0DAD	; 0x800dad <my_touch+0x11>
    fbce:	30 91 ae 0d 	lds	r19, 0x0DAE	; 0x800dae <my_touch+0x12>
    fbd2:	d9 01       	movw	r26, r18
    fbd4:	6c 91       	ld	r22, X
    fbd6:	90 91 b6 0d 	lds	r25, 0x0DB6	; 0x800db6 <my_touch+0x1a>
    fbda:	90 95       	com	r25
    fbdc:	96 23       	and	r25, r22
    fbde:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:86
	TDIN_LOW;
    fbe0:	20 91 b1 0d 	lds	r18, 0x0DB1	; 0x800db1 <my_touch+0x15>
    fbe4:	30 91 b2 0d 	lds	r19, 0x0DB2	; 0x800db2 <my_touch+0x16>
    fbe8:	d9 01       	movw	r26, r18
    fbea:	6c 91       	ld	r22, X
    fbec:	90 91 b8 0d 	lds	r25, 0x0DB8	; 0x800db8 <my_touch+0x1c>
    fbf0:	90 95       	com	r25
    fbf2:	96 23       	and	r25, r22
    fbf4:	9c 93       	st	X, r25
    fbf6:	28 e0       	ldi	r18, 0x08	; 8
    fbf8:	30 e0       	ldi	r19, 0x00	; 0
_ZN13LCDWIKI_TOUCH10TP_Read_XYEh.constprop.122():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:63
	LCD_Set_Rotation(r);
}

void LCDWIKI_TOUCH::TP_Write_Byte(uint8_t data)
{
	uint8_t val = 0x80;
    fbfa:	10 e8       	ldi	r17, 0x80	; 128
    fbfc:	60 91 b1 0d 	lds	r22, 0x0DB1	; 0x800db1 <my_touch+0x15>
    fc00:	70 91 b2 0d 	lds	r23, 0x0DB2	; 0x800db2 <my_touch+0x16>
    fc04:	90 91 b8 0d 	lds	r25, 0x0DB8	; 0x800db8 <my_touch+0x1c>
TP_Write_Byte():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:66
	while(val)
	{
		if(data&val)
    fc08:	08 2f       	mov	r16, r24
    fc0a:	01 23       	and	r16, r17
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:68
		{
			TDIN_HIGH; 
    fc0c:	db 01       	movw	r26, r22
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:66
void LCDWIKI_TOUCH::TP_Write_Byte(uint8_t data)
{
	uint8_t val = 0x80;
	while(val)
	{
		if(data&val)
    fc0e:	09 f4       	brne	.+2      	; 0xfc12 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.122]+0x82>
    fc10:	b1 c0       	rjmp	.+354    	; 0xfd74 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.122]+0x1e4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:68
		{
			TDIN_HIGH; 
    fc12:	0c 91       	ld	r16, X
    fc14:	90 2b       	or	r25, r16
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:72
		}
		else
		{
			TDIN_LOW;
    fc16:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:74
		}
		TCLK_LOW;
    fc18:	60 91 ad 0d 	lds	r22, 0x0DAD	; 0x800dad <my_touch+0x11>
    fc1c:	70 91 ae 0d 	lds	r23, 0x0DAE	; 0x800dae <my_touch+0x12>
    fc20:	db 01       	movw	r26, r22
    fc22:	0c 91       	ld	r16, X
    fc24:	90 91 b6 0d 	lds	r25, 0x0DB6	; 0x800db6 <my_touch+0x1a>
    fc28:	90 95       	com	r25
    fc2a:	90 23       	and	r25, r16
    fc2c:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:75
		TCLK_HIGH;
    fc2e:	60 91 ad 0d 	lds	r22, 0x0DAD	; 0x800dad <my_touch+0x11>
    fc32:	70 91 ae 0d 	lds	r23, 0x0DAE	; 0x800dae <my_touch+0x12>
    fc36:	db 01       	movw	r26, r22
    fc38:	9c 91       	ld	r25, X
    fc3a:	00 91 b6 0d 	lds	r16, 0x0DB6	; 0x800db6 <my_touch+0x1a>
    fc3e:	90 2b       	or	r25, r16
    fc40:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:76
		val >>= 1;
    fc42:	16 95       	lsr	r17
    fc44:	21 50       	subi	r18, 0x01	; 1
    fc46:	31 09       	sbc	r19, r1
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:64
}

void LCDWIKI_TOUCH::TP_Write_Byte(uint8_t data)
{
	uint8_t val = 0x80;
	while(val)
    fc48:	c9 f6       	brne	.-78     	; 0xfbfc <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.122]+0x6c>
TP_Read_ADC():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:89
	TCS_LOW; 
	TCLK_LOW;           
	TDIN_LOW;
	TP_Write_Byte(cmd);
	//delay_us(6);              
	TCLK_LOW; 
    fc4a:	20 91 ad 0d 	lds	r18, 0x0DAD	; 0x800dad <my_touch+0x11>
    fc4e:	30 91 ae 0d 	lds	r19, 0x0DAE	; 0x800dae <my_touch+0x12>
    fc52:	d9 01       	movw	r26, r18
    fc54:	6c 91       	ld	r22, X
    fc56:	90 91 b6 0d 	lds	r25, 0x0DB6	; 0x800db6 <my_touch+0x1a>
    fc5a:	90 95       	com	r25
    fc5c:	96 23       	and	r25, r22
    fc5e:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:91
	delay_us(1); 
	TCLK_HIGH;
    fc60:	20 91 ad 0d 	lds	r18, 0x0DAD	; 0x800dad <my_touch+0x11>
    fc64:	30 91 ae 0d 	lds	r19, 0x0DAE	; 0x800dae <my_touch+0x12>
    fc68:	d9 01       	movw	r26, r18
    fc6a:	9c 91       	ld	r25, X
    fc6c:	60 91 b6 0d 	lds	r22, 0x0DB6	; 0x800db6 <my_touch+0x1a>
    fc70:	96 2b       	or	r25, r22
    fc72:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:92
	TCLK_LOW;
    fc74:	20 91 ad 0d 	lds	r18, 0x0DAD	; 0x800dad <my_touch+0x11>
    fc78:	30 91 ae 0d 	lds	r19, 0x0DAE	; 0x800dae <my_touch+0x12>
    fc7c:	d9 01       	movw	r26, r18
    fc7e:	6c 91       	ld	r22, X
    fc80:	90 91 b6 0d 	lds	r25, 0x0DB6	; 0x800db6 <my_touch+0x1a>
    fc84:	90 95       	com	r25
    fc86:	96 23       	and	r25, r22
    fc88:	9c 93       	st	X, r25
    fc8a:	60 e1       	ldi	r22, 0x10	; 16
_ZN13LCDWIKI_TOUCH10TP_Read_XYEh.constprop.122():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:82
	}
}

uint16_t LCDWIKI_TOUCH::TP_Read_ADC(uint8_t cmd)
{
	uint16_t num=0; 
    fc8c:	30 e0       	ldi	r19, 0x00	; 0
    fc8e:	20 e0       	ldi	r18, 0x00	; 0
TP_Read_ADC():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:95
	delay_us(1); 
	TCLK_HIGH;
	TCLK_LOW;
	for(count=0;count<16;count++)  
	{   
	    num<<=1;          
    fc90:	22 0f       	add	r18, r18
    fc92:	33 1f       	adc	r19, r19
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:96
	    TCLK_LOW;                         
    fc94:	00 91 ad 0d 	lds	r16, 0x0DAD	; 0x800dad <my_touch+0x11>
    fc98:	10 91 ae 0d 	lds	r17, 0x0DAE	; 0x800dae <my_touch+0x12>
    fc9c:	d8 01       	movw	r26, r16
    fc9e:	7c 91       	ld	r23, X
    fca0:	90 91 b6 0d 	lds	r25, 0x0DB6	; 0x800db6 <my_touch+0x1a>
    fca4:	90 95       	com	r25
    fca6:	97 23       	and	r25, r23
    fca8:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:97
	    TCLK_HIGH;
    fcaa:	00 91 ad 0d 	lds	r16, 0x0DAD	; 0x800dad <my_touch+0x11>
    fcae:	10 91 ae 0d 	lds	r17, 0x0DAE	; 0x800dae <my_touch+0x12>
    fcb2:	d8 01       	movw	r26, r16
    fcb4:	9c 91       	ld	r25, X
    fcb6:	70 91 b6 0d 	lds	r23, 0x0DB6	; 0x800db6 <my_touch+0x1a>
    fcba:	97 2b       	or	r25, r23
    fcbc:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:98
	    if(TDOUT_STATE)
    fcbe:	00 91 af 0d 	lds	r16, 0x0DAF	; 0x800daf <my_touch+0x13>
    fcc2:	10 91 b0 0d 	lds	r17, 0x0DB0	; 0x800db0 <my_touch+0x14>
    fcc6:	d8 01       	movw	r26, r16
    fcc8:	9c 91       	ld	r25, X
    fcca:	70 91 b7 0d 	lds	r23, 0x0DB7	; 0x800db7 <my_touch+0x1b>
    fcce:	97 23       	and	r25, r23
    fcd0:	11 f0       	breq	.+4      	; 0xfcd6 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.122]+0x146>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:100
	    {
	         num += 1;                  
    fcd2:	2f 5f       	subi	r18, 0xFF	; 255
    fcd4:	3f 4f       	sbci	r19, 0xFF	; 255
    fcd6:	61 50       	subi	r22, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:93
	//delay_us(6);              
	TCLK_LOW; 
	delay_us(1); 
	TCLK_HIGH;
	TCLK_LOW;
	for(count=0;count<16;count++)  
    fcd8:	d9 f6       	brne	.-74     	; 0xfc90 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.122]+0x100>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:108
		{
			num += 0; 
		}
	}
	num>>=4;   // the high 12 bits is valid
    TCS_HIGH;   
    fcda:	60 91 ab 0d 	lds	r22, 0x0DAB	; 0x800dab <my_touch+0xf>
    fcde:	70 91 ac 0d 	lds	r23, 0x0DAC	; 0x800dac <my_touch+0x10>
    fce2:	db 01       	movw	r26, r22
    fce4:	9c 91       	ld	r25, X
    fce6:	10 91 b5 0d 	lds	r17, 0x0DB5	; 0x800db5 <my_touch+0x19>
    fcea:	91 2b       	or	r25, r17
    fcec:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:107
		else
		{
			num += 0; 
		}
	}
	num>>=4;   // the high 12 bits is valid
    fcee:	94 e0       	ldi	r25, 0x04	; 4
    fcf0:	36 95       	lsr	r19
    fcf2:	27 95       	ror	r18
    fcf4:	9a 95       	dec	r25
    fcf6:	e1 f7       	brne	.-8      	; 0xfcf0 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.122]+0x160>
_ZN13LCDWIKI_TOUCH10TP_Read_XYEh.constprop.122():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:122
 	uint16_t buf[READ_TIMES];
 	uint16_t sum=0;
 	uint16_t temp;    
 	for(i=0;i<READ_TIMES;i++)
 	{                                 
  		buf[i]=TP_Read_ADC(xy);            
    fcf8:	d7 01       	movw	r26, r14
    fcfa:	2d 93       	st	X+, r18
    fcfc:	3d 93       	st	X+, r19
    fcfe:	7d 01       	movw	r14, r26
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:120
{
 	uint16_t i, j;
 	uint16_t buf[READ_TIMES];
 	uint16_t sum=0;
 	uint16_t temp;    
 	for(i=0;i<READ_TIMES;i++)
    fd00:	a4 17       	cp	r26, r20
    fd02:	b5 07       	cpc	r27, r21
    fd04:	09 f0       	breq	.+2      	; 0xfd08 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.122]+0x178>
    fd06:	56 cf       	rjmp	.-340    	; 0xfbb4 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.122]+0x24>
    fd08:	cf 01       	movw	r24, r30
    fd0a:	08 96       	adiw	r24, 0x08	; 8
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:82
	}
}

uint16_t LCDWIKI_TOUCH::TP_Read_ADC(uint8_t cmd)
{
	uint16_t num=0; 
    fd0c:	df 01       	movw	r26, r30
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:128
    }                                    
	for(i=0;i<READ_TIMES-1; i++)//Sort in ascending order
 	{
  		for(j=i+1;j<READ_TIMES;j++)
       	{
        	if(buf[i]>buf[j])
    fd0e:	20 81       	ld	r18, Z
    fd10:	31 81       	ldd	r19, Z+1	; 0x01
    fd12:	12 96       	adiw	r26, 0x02	; 2
    fd14:	4d 91       	ld	r20, X+
    fd16:	5c 91       	ld	r21, X
    fd18:	13 97       	sbiw	r26, 0x03	; 3
    fd1a:	42 17       	cp	r20, r18
    fd1c:	53 07       	cpc	r21, r19
    fd1e:	30 f4       	brcc	.+12     	; 0xfd2c <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.122]+0x19c>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:131
            {
             	temp=buf[i];
             	buf[i]=buf[j];
    fd20:	51 83       	std	Z+1, r21	; 0x01
    fd22:	40 83       	st	Z, r20
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:132
             	buf[j]=temp;
    fd24:	13 96       	adiw	r26, 0x03	; 3
    fd26:	3c 93       	st	X, r19
    fd28:	2e 93       	st	-X, r18
    fd2a:	12 97       	sbiw	r26, 0x02	; 2
    fd2c:	12 96       	adiw	r26, 0x02	; 2
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:126
 	{                                 
  		buf[i]=TP_Read_ADC(xy);            
    }                                    
	for(i=0;i<READ_TIMES-1; i++)//Sort in ascending order
 	{
  		for(j=i+1;j<READ_TIMES;j++)
    fd2e:	8a 17       	cp	r24, r26
    fd30:	9b 07       	cpc	r25, r27
    fd32:	69 f7       	brne	.-38     	; 0xfd0e <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.122]+0x17e>
    fd34:	32 96       	adiw	r30, 0x02	; 2
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:124
 	uint16_t temp;    
 	for(i=0;i<READ_TIMES;i++)
 	{                                 
  		buf[i]=TP_Read_ADC(xy);            
    }                                    
	for(i=0;i<READ_TIMES-1; i++)//Sort in ascending order
    fd36:	e8 17       	cp	r30, r24
    fd38:	f9 07       	cpc	r31, r25
    fd3a:	41 f7       	brne	.-48     	; 0xfd0c <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.122]+0x17c>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:138
          	}
      	}
  	}          
	for(i=LOST_VAL;i<READ_TIMES-LOST_VAL;i++) //Remove maximum and minimum values
	{
		sum+=buf[i];
    fd3c:	8b 81       	ldd	r24, Y+3	; 0x03
    fd3e:	9c 81       	ldd	r25, Y+4	; 0x04
    fd40:	2d 81       	ldd	r18, Y+5	; 0x05
    fd42:	3e 81       	ldd	r19, Y+6	; 0x06
    fd44:	82 0f       	add	r24, r18
    fd46:	93 1f       	adc	r25, r19
    fd48:	2f 81       	ldd	r18, Y+7	; 0x07
    fd4a:	38 85       	ldd	r19, Y+8	; 0x08
    fd4c:	82 0f       	add	r24, r18
    fd4e:	93 1f       	adc	r25, r19
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:140
	}
	temp=sum/(READ_TIMES-2*LOST_VAL);
    fd50:	63 e0       	ldi	r22, 0x03	; 3
    fd52:	70 e0       	ldi	r23, 0x00	; 0
    fd54:	0e 94 b1 ac 	call	0x15962	; 0x15962 <__udivmodhi4>
    fd58:	cb 01       	movw	r24, r22
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:142
	return temp;   
} 
    fd5a:	2a 96       	adiw	r28, 0x0a	; 10
    fd5c:	0f b6       	in	r0, 0x3f	; 63
    fd5e:	f8 94       	cli
    fd60:	de bf       	out	0x3e, r29	; 62
    fd62:	0f be       	out	0x3f, r0	; 63
    fd64:	cd bf       	out	0x3d, r28	; 61
    fd66:	df 91       	pop	r29
    fd68:	cf 91       	pop	r28
    fd6a:	1f 91       	pop	r17
    fd6c:	0f 91       	pop	r16
    fd6e:	ff 90       	pop	r15
    fd70:	ef 90       	pop	r14
    fd72:	08 95       	ret
TP_Write_Byte():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:72
		{
			TDIN_HIGH; 
		}
		else
		{
			TDIN_LOW;
    fd74:	0c 91       	ld	r16, X
    fd76:	90 95       	com	r25
    fd78:	90 23       	and	r25, r16
    fd7a:	4d cf       	rjmp	.-358    	; 0xfc16 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.122]+0x86>

0000fd7c <TwoWire::write(int) [clone .constprop.100]>:
_ZN7TwoWire5writeEi.constprop.100():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.h:78
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    fd7c:	68 2f       	mov	r22, r24
    fd7e:	89 ef       	ldi	r24, 0xF9	; 249
    fd80:	9d e0       	ldi	r25, 0x0D	; 13
    fd82:	0c 94 18 79 	jmp	0xf230	; 0xf230 <TwoWire::write(unsigned char)>

0000fd86 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.75]>:
_ZN11LCDWIKI_KBV12Set_RotationEh.constprop.75():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:747
}

//set clockwise rotation
void LCDWIKI_KBV::Set_Rotation(uint8_t r)
    fd86:	0f 93       	push	r16
    fd88:	1f 93       	push	r17
    fd8a:	cf 93       	push	r28
    fd8c:	df 93       	push	r29
    fd8e:	00 d0       	rcall	.+0      	; 0xfd90 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.75]+0xa>
    fd90:	00 d0       	rcall	.+0      	; 0xfd92 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.75]+0xc>
    fd92:	cd b7       	in	r28, 0x3d	; 61
    fd94:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:749
{
    rotation = r & 3;           // just perform the operation ourselves on the protected variables
    fd96:	48 2f       	mov	r20, r24
    fd98:	43 70       	andi	r20, 0x03	; 3
    fd9a:	50 e0       	ldi	r21, 0x00	; 0
    fd9c:	50 93 d1 0d 	sts	0x0DD1, r21	; 0x800dd1 <my_lcd+0x17>
    fda0:	40 93 d0 0d 	sts	0x0DD0, r20	; 0x800dd0 <my_lcd+0x16>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:750
    width = (rotation & 1) ? HEIGHT : WIDTH;
    fda4:	28 2f       	mov	r18, r24
    fda6:	21 70       	andi	r18, 0x01	; 1
    fda8:	80 ff       	sbrs	r24, 0
    fdaa:	3d c1       	rjmp	.+634    	; 0x10026 <__EEPROM_REGION_LENGTH__+0x26>
    fdac:	80 91 ca 0d 	lds	r24, 0x0DCA	; 0x800dca <my_lcd+0x10>
    fdb0:	90 91 cb 0d 	lds	r25, 0x0DCB	; 0x800dcb <my_lcd+0x11>
    fdb4:	90 93 cd 0d 	sts	0x0DCD, r25	; 0x800dcd <my_lcd+0x13>
    fdb8:	80 93 cc 0d 	sts	0x0DCC, r24	; 0x800dcc <my_lcd+0x12>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:751
    height = (rotation & 1) ? WIDTH : HEIGHT;
    fdbc:	80 91 c8 0d 	lds	r24, 0x0DC8	; 0x800dc8 <my_lcd+0xe>
    fdc0:	90 91 c9 0d 	lds	r25, 0x0DC9	; 0x800dc9 <my_lcd+0xf>
    fdc4:	21 11       	cpse	r18, r1
    fdc6:	04 c0       	rjmp	.+8      	; 0xfdd0 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.75]+0x4a>
    fdc8:	80 91 ca 0d 	lds	r24, 0x0DCA	; 0x800dca <my_lcd+0x10>
    fdcc:	90 91 cb 0d 	lds	r25, 0x0DCB	; 0x800dcb <my_lcd+0x11>
    fdd0:	90 93 cf 0d 	sts	0x0DCF, r25	; 0x800dcf <my_lcd+0x15>
    fdd4:	80 93 ce 0d 	sts	0x0DCE, r24	; 0x800dce <my_lcd+0x14>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:752
	CS_ACTIVE;
    fdd8:	a0 91 e8 0d 	lds	r26, 0x0DE8	; 0x800de8 <my_lcd+0x2e>
    fddc:	b0 91 e9 0d 	lds	r27, 0x0DE9	; 0x800de9 <my_lcd+0x2f>
    fde0:	8c 91       	ld	r24, X
    fde2:	90 91 f4 0d 	lds	r25, 0x0DF4	; 0x800df4 <my_lcd+0x3a>
    fde6:	89 23       	and	r24, r25
    fde8:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:753
	if(lcd_driver == ID_932X)
    fdea:	40 91 d2 0d 	lds	r20, 0x0DD2	; 0x800dd2 <my_lcd+0x18>
    fdee:	50 91 d3 0d 	lds	r21, 0x0DD3	; 0x800dd3 <my_lcd+0x19>
    fdf2:	80 91 d0 0d 	lds	r24, 0x0DD0	; 0x800dd0 <my_lcd+0x16>
    fdf6:	90 91 d1 0d 	lds	r25, 0x0DD1	; 0x800dd1 <my_lcd+0x17>
    fdfa:	a0 91 ea 0d 	lds	r26, 0x0DEA	; 0x800dea <my_lcd+0x30>
    fdfe:	b0 91 eb 0d 	lds	r27, 0x0DEB	; 0x800deb <my_lcd+0x31>
    fe02:	20 91 f5 0d 	lds	r18, 0x0DF5	; 0x800df5 <my_lcd+0x3b>
    fe06:	41 15       	cp	r20, r1
    fe08:	51 05       	cpc	r21, r1
    fe0a:	09 f0       	breq	.+2      	; 0xfe0e <__DATA_REGION_LENGTH__+0xe>
    fe0c:	13 c1       	rjmp	.+550    	; 0x10034 <__EEPROM_REGION_LENGTH__+0x34>
    fe0e:	01 97       	sbiw	r24, 0x01	; 1
    fe10:	83 30       	cpi	r24, 0x03	; 3
    fe12:	91 05       	cpc	r25, r1
    fe14:	08 f0       	brcs	.+2      	; 0xfe18 <__DATA_REGION_LENGTH__+0x18>
    fe16:	0c c1       	rjmp	.+536    	; 0x10030 <__EEPROM_REGION_LENGTH__+0x30>
    fe18:	88 0f       	add	r24, r24
    fe1a:	99 1f       	adc	r25, r25
    fe1c:	fc 01       	movw	r30, r24
    fe1e:	e0 5b       	subi	r30, 0xB0	; 176
    fe20:	fd 4f       	sbci	r31, 0xFD	; 253
    fe22:	90 81       	ld	r25, Z
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:771
				break;
		 	case 3 : 
				val = 0x1018;  //270 degree 
				break;
		}
		writeCmdData16(MD, val); 
    fe24:	30 91 e2 0d 	lds	r19, 0x0DE2	; 0x800de2 <my_lcd+0x28>
    fe28:	40 91 e3 0d 	lds	r20, 0x0DE3	; 0x800de3 <my_lcd+0x29>
    fe2c:	8c 91       	ld	r24, X
    fe2e:	28 23       	and	r18, r24
    fe30:	2c 93       	st	X, r18
    fe32:	42 b9       	out	0x02, r20	; 2
    fe34:	e0 91 ec 0d 	lds	r30, 0x0DEC	; 0x800dec <my_lcd+0x32>
    fe38:	f0 91 ed 0d 	lds	r31, 0x0DED	; 0x800ded <my_lcd+0x33>
    fe3c:	80 81       	ld	r24, Z
    fe3e:	20 91 f6 0d 	lds	r18, 0x0DF6	; 0x800df6 <my_lcd+0x3c>
    fe42:	82 23       	and	r24, r18
    fe44:	80 83       	st	Z, r24
    fe46:	e0 91 ec 0d 	lds	r30, 0x0DEC	; 0x800dec <my_lcd+0x32>
    fe4a:	f0 91 ed 0d 	lds	r31, 0x0DED	; 0x800ded <my_lcd+0x33>
    fe4e:	80 81       	ld	r24, Z
    fe50:	20 91 f2 0d 	lds	r18, 0x0DF2	; 0x800df2 <my_lcd+0x38>
    fe54:	82 2b       	or	r24, r18
    fe56:	80 83       	st	Z, r24
    fe58:	32 b9       	out	0x02, r19	; 2
    fe5a:	e0 91 ec 0d 	lds	r30, 0x0DEC	; 0x800dec <my_lcd+0x32>
    fe5e:	f0 91 ed 0d 	lds	r31, 0x0DED	; 0x800ded <my_lcd+0x33>
    fe62:	80 81       	ld	r24, Z
    fe64:	20 91 f6 0d 	lds	r18, 0x0DF6	; 0x800df6 <my_lcd+0x3c>
    fe68:	82 23       	and	r24, r18
    fe6a:	80 83       	st	Z, r24
    fe6c:	e0 91 ec 0d 	lds	r30, 0x0DEC	; 0x800dec <my_lcd+0x32>
    fe70:	f0 91 ed 0d 	lds	r31, 0x0DED	; 0x800ded <my_lcd+0x33>
    fe74:	80 81       	ld	r24, Z
    fe76:	20 91 f2 0d 	lds	r18, 0x0DF2	; 0x800df2 <my_lcd+0x38>
    fe7a:	82 2b       	or	r24, r18
    fe7c:	80 83       	st	Z, r24
    fe7e:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x30>
    fe82:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x31>
    fe86:	80 81       	ld	r24, Z
    fe88:	20 91 f1 0d 	lds	r18, 0x0DF1	; 0x800df1 <my_lcd+0x37>
    fe8c:	82 2b       	or	r24, r18
    fe8e:	80 83       	st	Z, r24
    fe90:	80 e1       	ldi	r24, 0x10	; 16
    fe92:	82 b9       	out	0x02, r24	; 2
    fe94:	e0 91 ec 0d 	lds	r30, 0x0DEC	; 0x800dec <my_lcd+0x32>
    fe98:	f0 91 ed 0d 	lds	r31, 0x0DED	; 0x800ded <my_lcd+0x33>
    fe9c:	80 81       	ld	r24, Z
    fe9e:	20 91 f6 0d 	lds	r18, 0x0DF6	; 0x800df6 <my_lcd+0x3c>
    fea2:	82 23       	and	r24, r18
    fea4:	80 83       	st	Z, r24
    fea6:	e0 91 ec 0d 	lds	r30, 0x0DEC	; 0x800dec <my_lcd+0x32>
    feaa:	f0 91 ed 0d 	lds	r31, 0x0DED	; 0x800ded <my_lcd+0x33>
    feae:	80 81       	ld	r24, Z
    feb0:	20 91 f2 0d 	lds	r18, 0x0DF2	; 0x800df2 <my_lcd+0x38>
    feb4:	82 2b       	or	r24, r18
    feb6:	80 83       	st	Z, r24
    feb8:	92 b9       	out	0x02, r25	; 2
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:872
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY| ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
    feba:	e0 91 ec 0d 	lds	r30, 0x0DEC	; 0x800dec <my_lcd+0x32>
    febe:	f0 91 ed 0d 	lds	r31, 0x0DED	; 0x800ded <my_lcd+0x33>
    fec2:	80 81       	ld	r24, Z
    fec4:	90 91 f6 0d 	lds	r25, 0x0DF6	; 0x800df6 <my_lcd+0x3c>
    fec8:	89 23       	and	r24, r25
    feca:	80 83       	st	Z, r24
    fecc:	e0 91 ec 0d 	lds	r30, 0x0DEC	; 0x800dec <my_lcd+0x32>
    fed0:	f0 91 ed 0d 	lds	r31, 0x0DED	; 0x800ded <my_lcd+0x33>
    fed4:	80 81       	ld	r24, Z
    fed6:	90 91 f2 0d 	lds	r25, 0x0DF2	; 0x800df2 <my_lcd+0x38>
    feda:	89 2b       	or	r24, r25
    fedc:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:874
	}
 	Set_Addr_Window(0, 0, width - 1, height - 1);
    fede:	00 91 ce 0d 	lds	r16, 0x0DCE	; 0x800dce <my_lcd+0x14>
    fee2:	10 91 cf 0d 	lds	r17, 0x0DCF	; 0x800dcf <my_lcd+0x15>
    fee6:	01 50       	subi	r16, 0x01	; 1
    fee8:	11 09       	sbc	r17, r1
    feea:	20 91 cc 0d 	lds	r18, 0x0DCC	; 0x800dcc <my_lcd+0x12>
    feee:	30 91 cd 0d 	lds	r19, 0x0DCD	; 0x800dcd <my_lcd+0x13>
    fef2:	21 50       	subi	r18, 0x01	; 1
    fef4:	31 09       	sbc	r19, r1
    fef6:	50 e0       	ldi	r21, 0x00	; 0
    fef8:	40 e0       	ldi	r20, 0x00	; 0
    fefa:	70 e0       	ldi	r23, 0x00	; 0
    fefc:	60 e0       	ldi	r22, 0x00	; 0
    fefe:	8a eb       	ldi	r24, 0xBA	; 186
    ff00:	9d e0       	ldi	r25, 0x0D	; 13
    ff02:	0e 94 fe 33 	call	0x67fc	; 0x67fc <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)>
Vert_Scroll():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:704
    if (offset < 0)
    {
        vsp += scrollines;          //keep in unsigned range
    }
    sea = top + scrollines - 1;
	if(lcd_driver == ID_932X)
    ff06:	80 91 d2 0d 	lds	r24, 0x0DD2	; 0x800dd2 <my_lcd+0x18>
    ff0a:	90 91 d3 0d 	lds	r25, 0x0DD3	; 0x800dd3 <my_lcd+0x19>
    ff0e:	89 2b       	or	r24, r25
    ff10:	09 f0       	breq	.+2      	; 0xff14 <__DATA_REGION_LENGTH__+0x114>
    ff12:	9e c1       	rjmp	.+828    	; 0x10250 <__EEPROM_REGION_LENGTH__+0x250>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:706
	{
		writeCmdData8(SC1, (1 << 1) | 0x1);        //!NDL, VLE, REV
    ff14:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x30>
    ff18:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x31>
    ff1c:	80 81       	ld	r24, Z
    ff1e:	90 91 f5 0d 	lds	r25, 0x0DF5	; 0x800df5 <my_lcd+0x3b>
    ff22:	89 23       	and	r24, r25
    ff24:	80 83       	st	Z, r24
    ff26:	80 91 de 0d 	lds	r24, 0x0DDE	; 0x800dde <my_lcd+0x24>
    ff2a:	82 b9       	out	0x02, r24	; 2
    ff2c:	e0 91 ec 0d 	lds	r30, 0x0DEC	; 0x800dec <my_lcd+0x32>
    ff30:	f0 91 ed 0d 	lds	r31, 0x0DED	; 0x800ded <my_lcd+0x33>
    ff34:	80 81       	ld	r24, Z
    ff36:	90 91 f6 0d 	lds	r25, 0x0DF6	; 0x800df6 <my_lcd+0x3c>
    ff3a:	89 23       	and	r24, r25
    ff3c:	80 83       	st	Z, r24
    ff3e:	e0 91 ec 0d 	lds	r30, 0x0DEC	; 0x800dec <my_lcd+0x32>
    ff42:	f0 91 ed 0d 	lds	r31, 0x0DED	; 0x800ded <my_lcd+0x33>
    ff46:	80 81       	ld	r24, Z
    ff48:	90 91 f2 0d 	lds	r25, 0x0DF2	; 0x800df2 <my_lcd+0x38>
    ff4c:	89 2b       	or	r24, r25
    ff4e:	80 83       	st	Z, r24
    ff50:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x30>
    ff54:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x31>
    ff58:	80 81       	ld	r24, Z
    ff5a:	90 91 f1 0d 	lds	r25, 0x0DF1	; 0x800df1 <my_lcd+0x37>
    ff5e:	89 2b       	or	r24, r25
    ff60:	80 83       	st	Z, r24
    ff62:	83 e0       	ldi	r24, 0x03	; 3
    ff64:	82 b9       	out	0x02, r24	; 2
    ff66:	e0 91 ec 0d 	lds	r30, 0x0DEC	; 0x800dec <my_lcd+0x32>
    ff6a:	f0 91 ed 0d 	lds	r31, 0x0DED	; 0x800ded <my_lcd+0x33>
    ff6e:	80 81       	ld	r24, Z
    ff70:	90 91 f6 0d 	lds	r25, 0x0DF6	; 0x800df6 <my_lcd+0x3c>
    ff74:	89 23       	and	r24, r25
    ff76:	80 83       	st	Z, r24
    ff78:	e0 91 ec 0d 	lds	r30, 0x0DEC	; 0x800dec <my_lcd+0x32>
    ff7c:	f0 91 ed 0d 	lds	r31, 0x0DED	; 0x800ded <my_lcd+0x33>
    ff80:	80 81       	ld	r24, Z
    ff82:	90 91 f2 0d 	lds	r25, 0x0DF2	; 0x800df2 <my_lcd+0x38>
    ff86:	89 2b       	or	r24, r25
    ff88:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:707
        writeCmdData8(SC2, vsp);        //VL#
    ff8a:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x30>
    ff8e:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x31>
    ff92:	80 81       	ld	r24, Z
    ff94:	90 91 f5 0d 	lds	r25, 0x0DF5	; 0x800df5 <my_lcd+0x3b>
    ff98:	89 23       	and	r24, r25
    ff9a:	80 83       	st	Z, r24
    ff9c:	80 91 e0 0d 	lds	r24, 0x0DE0	; 0x800de0 <my_lcd+0x26>
    ffa0:	82 b9       	out	0x02, r24	; 2
    ffa2:	e0 91 ec 0d 	lds	r30, 0x0DEC	; 0x800dec <my_lcd+0x32>
    ffa6:	f0 91 ed 0d 	lds	r31, 0x0DED	; 0x800ded <my_lcd+0x33>
    ffaa:	80 81       	ld	r24, Z
    ffac:	90 91 f6 0d 	lds	r25, 0x0DF6	; 0x800df6 <my_lcd+0x3c>
    ffb0:	89 23       	and	r24, r25
    ffb2:	80 83       	st	Z, r24
    ffb4:	e0 91 ec 0d 	lds	r30, 0x0DEC	; 0x800dec <my_lcd+0x32>
    ffb8:	f0 91 ed 0d 	lds	r31, 0x0DED	; 0x800ded <my_lcd+0x33>
    ffbc:	80 81       	ld	r24, Z
    ffbe:	90 91 f2 0d 	lds	r25, 0x0DF2	; 0x800df2 <my_lcd+0x38>
    ffc2:	89 2b       	or	r24, r25
    ffc4:	80 83       	st	Z, r24
    ffc6:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x30>
    ffca:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x31>
    ffce:	80 81       	ld	r24, Z
    ffd0:	90 91 f1 0d 	lds	r25, 0x0DF1	; 0x800df1 <my_lcd+0x37>
    ffd4:	89 2b       	or	r24, r25
    ffd6:	80 83       	st	Z, r24
    ffd8:	12 b8       	out	0x02, r1	; 2
    ffda:	e0 91 ec 0d 	lds	r30, 0x0DEC	; 0x800dec <my_lcd+0x32>
    ffde:	f0 91 ed 0d 	lds	r31, 0x0DED	; 0x800ded <my_lcd+0x33>
    ffe2:	80 81       	ld	r24, Z
    ffe4:	90 91 f6 0d 	lds	r25, 0x0DF6	; 0x800df6 <my_lcd+0x3c>
    ffe8:	89 23       	and	r24, r25
    ffea:	80 83       	st	Z, r24
    ffec:	e0 91 ec 0d 	lds	r30, 0x0DEC	; 0x800dec <my_lcd+0x32>
    fff0:	f0 91 ed 0d 	lds	r31, 0x0DED	; 0x800ded <my_lcd+0x33>
    fff4:	80 81       	ld	r24, Z
    fff6:	90 91 f2 0d 	lds	r25, 0x0DF2	; 0x800df2 <my_lcd+0x38>
    fffa:	89 2b       	or	r24, r25
    fffc:	80 83       	st	Z, r24
_ZN11LCDWIKI_KBV12Set_RotationEh.constprop.75():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:876
		 }
		 writeCmdData8(MD, val); 
	}
 	Set_Addr_Window(0, 0, width - 1, height - 1);
	Vert_Scroll(0, HEIGHT, 0);
	CS_IDLE;
    fffe:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x2e>
   10002:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x2f>
   10006:	80 81       	ld	r24, Z
   10008:	90 91 f0 0d 	lds	r25, 0x0DF0	; 0x800df0 <my_lcd+0x36>
   1000c:	89 2b       	or	r24, r25
   1000e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:877
}
   10010:	26 96       	adiw	r28, 0x06	; 6
   10012:	0f b6       	in	r0, 0x3f	; 63
   10014:	f8 94       	cli
   10016:	de bf       	out	0x3e, r29	; 62
   10018:	0f be       	out	0x3f, r0	; 63
   1001a:	cd bf       	out	0x3d, r28	; 61
   1001c:	df 91       	pop	r29
   1001e:	cf 91       	pop	r28
   10020:	1f 91       	pop	r17
   10022:	0f 91       	pop	r16
   10024:	08 95       	ret
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:750

//set clockwise rotation
void LCDWIKI_KBV::Set_Rotation(uint8_t r)
{
    rotation = r & 3;           // just perform the operation ourselves on the protected variables
    width = (rotation & 1) ? HEIGHT : WIDTH;
   10026:	80 91 c8 0d 	lds	r24, 0x0DC8	; 0x800dc8 <my_lcd+0xe>
   1002a:	90 91 c9 0d 	lds	r25, 0x0DC9	; 0x800dc9 <my_lcd+0xf>
   1002e:	c2 ce       	rjmp	.-636    	; 0xfdb4 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.75]+0x2e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:756
    height = (rotation & 1) ? WIDTH : HEIGHT;
	CS_ACTIVE;
	if(lcd_driver == ID_932X)
	{
		uint16_t val;
		switch(rotation) 
   10030:	90 e3       	ldi	r25, 0x30	; 48
   10032:	f8 ce       	rjmp	.-528    	; 0xfe24 <__DATA_REGION_LENGTH__+0x24>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:773
				val = 0x1018;  //270 degree 
				break;
		}
		writeCmdData16(MD, val); 
	}
	else if(lcd_driver == ID_7735)
   10034:	46 30       	cpi	r20, 0x06	; 6
   10036:	51 05       	cpc	r21, r1
   10038:	99 f5       	brne	.+102    	; 0x100a0 <__EEPROM_REGION_LENGTH__+0xa0>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:782
		{
			case 0: 
				val = 0xD0; //0 degree 
				break;
		 	case 1: 
				val = 0xA0; //90 degree 
   1003a:	f0 ea       	ldi	r31, 0xA0	; 160
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:776
		writeCmdData16(MD, val); 
	}
	else if(lcd_driver == ID_7735)
	{
		uint8_t val;
		switch(rotation)
   1003c:	81 30       	cpi	r24, 0x01	; 1
   1003e:	91 05       	cpc	r25, r1
   10040:	51 f0       	breq	.+20     	; 0x10056 <__EEPROM_REGION_LENGTH__+0x56>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:779
		{
			case 0: 
				val = 0xD0; //0 degree 
   10042:	f0 ed       	ldi	r31, 0xD0	; 208
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:776
		writeCmdData16(MD, val); 
	}
	else if(lcd_driver == ID_7735)
	{
		uint8_t val;
		switch(rotation)
   10044:	81 30       	cpi	r24, 0x01	; 1
   10046:	91 05       	cpc	r25, r1
   10048:	30 f0       	brcs	.+12     	; 0x10056 <__EEPROM_REGION_LENGTH__+0x56>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:785
				break;
		 	case 1: 
				val = 0xA0; //90 degree 
				break;
		 	case 2: 
				val = 0x00; //180 degree 
   1004a:	f0 e0       	ldi	r31, 0x00	; 0
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:776
		writeCmdData16(MD, val); 
	}
	else if(lcd_driver == ID_7735)
	{
		uint8_t val;
		switch(rotation)
   1004c:	82 30       	cpi	r24, 0x02	; 2
   1004e:	91 05       	cpc	r25, r1
   10050:	11 f0       	breq	.+4      	; 0x10056 <__EEPROM_REGION_LENGTH__+0x56>
   10052:	03 97       	sbiw	r24, 0x03	; 3
   10054:	19 f1       	breq	.+70     	; 0x1009c <__EEPROM_REGION_LENGTH__+0x9c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:791
				break;
		 	case 3: 
				val = 0x60; //270 degree
				break;			
		}
		writeCmdData8(MD, val);
   10056:	8c 91       	ld	r24, X
   10058:	28 23       	and	r18, r24
   1005a:	2c 93       	st	X, r18
   1005c:	80 91 e2 0d 	lds	r24, 0x0DE2	; 0x800de2 <my_lcd+0x28>
   10060:	82 b9       	out	0x02, r24	; 2
   10062:	a0 91 ec 0d 	lds	r26, 0x0DEC	; 0x800dec <my_lcd+0x32>
   10066:	b0 91 ed 0d 	lds	r27, 0x0DED	; 0x800ded <my_lcd+0x33>
   1006a:	8c 91       	ld	r24, X
   1006c:	90 91 f6 0d 	lds	r25, 0x0DF6	; 0x800df6 <my_lcd+0x3c>
   10070:	89 23       	and	r24, r25
   10072:	8c 93       	st	X, r24
   10074:	a0 91 ec 0d 	lds	r26, 0x0DEC	; 0x800dec <my_lcd+0x32>
   10078:	b0 91 ed 0d 	lds	r27, 0x0DED	; 0x800ded <my_lcd+0x33>
   1007c:	8c 91       	ld	r24, X
   1007e:	90 91 f2 0d 	lds	r25, 0x0DF2	; 0x800df2 <my_lcd+0x38>
   10082:	89 2b       	or	r24, r25
   10084:	8c 93       	st	X, r24
   10086:	a0 91 ea 0d 	lds	r26, 0x0DEA	; 0x800dea <my_lcd+0x30>
   1008a:	b0 91 eb 0d 	lds	r27, 0x0DEB	; 0x800deb <my_lcd+0x31>
   1008e:	8c 91       	ld	r24, X
   10090:	90 91 f1 0d 	lds	r25, 0x0DF1	; 0x800df1 <my_lcd+0x37>
   10094:	89 2b       	or	r24, r25
   10096:	8c 93       	st	X, r24
   10098:	f2 b9       	out	0x02, r31	; 2
   1009a:	0f cf       	rjmp	.-482    	; 0xfeba <__DATA_REGION_LENGTH__+0xba>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:788
				break;
		 	case 2: 
				val = 0x00; //180 degree 
				break;
		 	case 3: 
				val = 0x60; //270 degree
   1009c:	f0 e6       	ldi	r31, 0x60	; 96
   1009e:	db cf       	rjmp	.-74     	; 0x10056 <__EEPROM_REGION_LENGTH__+0x56>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:793
				break;			
		}
		writeCmdData8(MD, val);
	}
	else if(lcd_driver == ID_9481)
   100a0:	48 30       	cpi	r20, 0x08	; 8
   100a2:	51 05       	cpc	r21, r1
   100a4:	99 f5       	brne	.+102    	; 0x1010c <__EEPROM_REGION_LENGTH__+0x10c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:802
		{
		   	case 0:
		     	val = 0x09; //0 degree PAO=0,CAO=0,P/CO=0,VO=0,RGBO=1,DO=0,HF=0,VF=1
		     	break;
		   	case 1:
		     	val = 0x2B; //90 degree PAO=0,CAO=0,P/CO=1,VO=0,RGBO=1,DO=0,HF=1,VF=1
   100a6:	eb e2       	ldi	r30, 0x2B	; 43
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:796
		writeCmdData8(MD, val);
	}
	else if(lcd_driver == ID_9481)
	{
		uint8_t val;
		switch (rotation) 
   100a8:	81 30       	cpi	r24, 0x01	; 1
   100aa:	91 05       	cpc	r25, r1
   100ac:	51 f0       	breq	.+20     	; 0x100c2 <__EEPROM_REGION_LENGTH__+0xc2>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:799
		{
		   	case 0:
		     	val = 0x09; //0 degree PAO=0,CAO=0,P/CO=0,VO=0,RGBO=1,DO=0,HF=0,VF=1
   100ae:	e9 e0       	ldi	r30, 0x09	; 9
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:796
		writeCmdData8(MD, val);
	}
	else if(lcd_driver == ID_9481)
	{
		uint8_t val;
		switch (rotation) 
   100b0:	81 30       	cpi	r24, 0x01	; 1
   100b2:	91 05       	cpc	r25, r1
   100b4:	30 f0       	brcs	.+12     	; 0x100c2 <__EEPROM_REGION_LENGTH__+0xc2>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:805
		     	break;
		   	case 1:
		     	val = 0x2B; //90 degree PAO=0,CAO=0,P/CO=1,VO=0,RGBO=1,DO=0,HF=1,VF=1
		     	break;
		 	case 2:
		    	val = 0x0A; //180 degree PAO=0,CAO=0,P/CO=0,VO=0,RGBO=1,DO=0,HF=1,VF=0
   100b6:	ea e0       	ldi	r30, 0x0A	; 10
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:796
		writeCmdData8(MD, val);
	}
	else if(lcd_driver == ID_9481)
	{
		uint8_t val;
		switch (rotation) 
   100b8:	82 30       	cpi	r24, 0x02	; 2
   100ba:	91 05       	cpc	r25, r1
   100bc:	11 f0       	breq	.+4      	; 0x100c2 <__EEPROM_REGION_LENGTH__+0xc2>
   100be:	03 97       	sbiw	r24, 0x03	; 3
   100c0:	19 f1       	breq	.+70     	; 0x10108 <__EEPROM_REGION_LENGTH__+0x108>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:811
		    	break;
		   	case 3:
		     	val = 0x28; //270 degree PAO=0,CAO=0,P/CO=1,VO=0,RGBO=1,DO=0,HF=0,VF=0
		     	break;
		 }
		 writeCmdData8(MD, val); 
   100c2:	8c 91       	ld	r24, X
   100c4:	28 23       	and	r18, r24
   100c6:	2c 93       	st	X, r18
   100c8:	80 91 e2 0d 	lds	r24, 0x0DE2	; 0x800de2 <my_lcd+0x28>
   100cc:	82 b9       	out	0x02, r24	; 2
   100ce:	a0 91 ec 0d 	lds	r26, 0x0DEC	; 0x800dec <my_lcd+0x32>
   100d2:	b0 91 ed 0d 	lds	r27, 0x0DED	; 0x800ded <my_lcd+0x33>
   100d6:	8c 91       	ld	r24, X
   100d8:	90 91 f6 0d 	lds	r25, 0x0DF6	; 0x800df6 <my_lcd+0x3c>
   100dc:	89 23       	and	r24, r25
   100de:	8c 93       	st	X, r24
   100e0:	a0 91 ec 0d 	lds	r26, 0x0DEC	; 0x800dec <my_lcd+0x32>
   100e4:	b0 91 ed 0d 	lds	r27, 0x0DED	; 0x800ded <my_lcd+0x33>
   100e8:	8c 91       	ld	r24, X
   100ea:	90 91 f2 0d 	lds	r25, 0x0DF2	; 0x800df2 <my_lcd+0x38>
   100ee:	89 2b       	or	r24, r25
   100f0:	8c 93       	st	X, r24
   100f2:	a0 91 ea 0d 	lds	r26, 0x0DEA	; 0x800dea <my_lcd+0x30>
   100f6:	b0 91 eb 0d 	lds	r27, 0x0DEB	; 0x800deb <my_lcd+0x31>
   100fa:	8c 91       	ld	r24, X
   100fc:	90 91 f1 0d 	lds	r25, 0x0DF1	; 0x800df1 <my_lcd+0x37>
   10100:	89 2b       	or	r24, r25
   10102:	8c 93       	st	X, r24
   10104:	e2 b9       	out	0x02, r30	; 2
   10106:	d9 ce       	rjmp	.-590    	; 0xfeba <__DATA_REGION_LENGTH__+0xba>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:808
		     	break;
		 	case 2:
		    	val = 0x0A; //180 degree PAO=0,CAO=0,P/CO=0,VO=0,RGBO=1,DO=0,HF=1,VF=0
		    	break;
		   	case 3:
		     	val = 0x28; //270 degree PAO=0,CAO=0,P/CO=1,VO=0,RGBO=1,DO=0,HF=0,VF=0
   10108:	e8 e2       	ldi	r30, 0x28	; 40
   1010a:	db cf       	rjmp	.-74     	; 0x100c2 <__EEPROM_REGION_LENGTH__+0xc2>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:814
		     	break;
		 }
		 writeCmdData8(MD, val); 

	}
	else if(lcd_driver == ID_9486)
   1010c:	45 30       	cpi	r20, 0x05	; 5
   1010e:	51 05       	cpc	r21, r1
   10110:	a1 f5       	brne	.+104    	; 0x1017a <__EEPROM_REGION_LENGTH__+0x17a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:817
	{
		uint8_t val;
		switch (rotation) 
   10112:	81 30       	cpi	r24, 0x01	; 1
   10114:	91 05       	cpc	r25, r1
   10116:	49 f1       	breq	.+82     	; 0x1016a <__EEPROM_REGION_LENGTH__+0x16a>
   10118:	70 f1       	brcs	.+92     	; 0x10176 <__EEPROM_REGION_LENGTH__+0x176>
   1011a:	82 30       	cpi	r24, 0x02	; 2
   1011c:	91 05       	cpc	r25, r1
   1011e:	39 f1       	breq	.+78     	; 0x1016e <__EEPROM_REGION_LENGTH__+0x16e>
   10120:	03 97       	sbiw	r24, 0x03	; 3
   10122:	39 f1       	breq	.+78     	; 0x10172 <__EEPROM_REGION_LENGTH__+0x172>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:832
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
   10124:	8c 91       	ld	r24, X
   10126:	28 23       	and	r18, r24
   10128:	2c 93       	st	X, r18
   1012a:	80 91 e2 0d 	lds	r24, 0x0DE2	; 0x800de2 <my_lcd+0x28>
   1012e:	82 b9       	out	0x02, r24	; 2
   10130:	e0 91 ec 0d 	lds	r30, 0x0DEC	; 0x800dec <my_lcd+0x32>
   10134:	f0 91 ed 0d 	lds	r31, 0x0DED	; 0x800ded <my_lcd+0x33>
   10138:	80 81       	ld	r24, Z
   1013a:	90 91 f6 0d 	lds	r25, 0x0DF6	; 0x800df6 <my_lcd+0x3c>
   1013e:	89 23       	and	r24, r25
   10140:	80 83       	st	Z, r24
   10142:	e0 91 ec 0d 	lds	r30, 0x0DEC	; 0x800dec <my_lcd+0x32>
   10146:	f0 91 ed 0d 	lds	r31, 0x0DED	; 0x800ded <my_lcd+0x33>
   1014a:	80 81       	ld	r24, Z
   1014c:	90 91 f2 0d 	lds	r25, 0x0DF2	; 0x800df2 <my_lcd+0x38>
   10150:	89 2b       	or	r24, r25
   10152:	80 83       	st	Z, r24
   10154:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x30>
   10158:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x31>
   1015c:	80 81       	ld	r24, Z
   1015e:	90 91 f1 0d 	lds	r25, 0x0DF1	; 0x800df1 <my_lcd+0x37>
   10162:	89 2b       	or	r24, r25
   10164:	80 83       	st	Z, r24
   10166:	72 b9       	out	0x02, r23	; 2
   10168:	a8 ce       	rjmp	.-688    	; 0xfeba <__DATA_REGION_LENGTH__+0xba>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:823
		{
		   	case 0:
		     	val = ILI9341_MADCTL_BGR; //0 degree 
		     	break;
		   	case 1:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MV | ILI9341_MADCTL_ML | ILI9341_MADCTL_BGR ; //90 degree 
   1016a:	78 e7       	ldi	r23, 0x78	; 120
   1016c:	db cf       	rjmp	.-74     	; 0x10124 <__EEPROM_REGION_LENGTH__+0x124>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:826
		     	break;
		 	case 2:
		    	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_MX |ILI9341_MADCTL_BGR; //180 degree 
   1016e:	78 ec       	ldi	r23, 0xC8	; 200
   10170:	d9 cf       	rjmp	.-78     	; 0x10124 <__EEPROM_REGION_LENGTH__+0x124>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:829
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
   10172:	78 ea       	ldi	r23, 0xA8	; 168
   10174:	d7 cf       	rjmp	.-82     	; 0x10124 <__EEPROM_REGION_LENGTH__+0x124>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:820
	{
		uint8_t val;
		switch (rotation) 
		{
		   	case 0:
		     	val = ILI9341_MADCTL_BGR; //0 degree 
   10176:	78 e0       	ldi	r23, 0x08	; 8
   10178:	d5 cf       	rjmp	.-86     	; 0x10124 <__EEPROM_REGION_LENGTH__+0x124>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:834
		     	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
	}
	else if(lcd_driver == ID_9488)
   1017a:	47 30       	cpi	r20, 0x07	; 7
   1017c:	51 05       	cpc	r21, r1
   1017e:	a1 f5       	brne	.+104    	; 0x101e8 <__EEPROM_REGION_LENGTH__+0x1e8>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:837
	{
		uint8_t val;
		switch (rotation) 
   10180:	81 30       	cpi	r24, 0x01	; 1
   10182:	91 05       	cpc	r25, r1
   10184:	49 f1       	breq	.+82     	; 0x101d8 <__EEPROM_REGION_LENGTH__+0x1d8>
   10186:	70 f1       	brcs	.+92     	; 0x101e4 <__EEPROM_REGION_LENGTH__+0x1e4>
   10188:	82 30       	cpi	r24, 0x02	; 2
   1018a:	91 05       	cpc	r25, r1
   1018c:	39 f1       	breq	.+78     	; 0x101dc <__EEPROM_REGION_LENGTH__+0x1dc>
   1018e:	03 97       	sbiw	r24, 0x03	; 3
   10190:	39 f1       	breq	.+78     	; 0x101e0 <__EEPROM_REGION_LENGTH__+0x1e0>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:852
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
   10192:	8c 91       	ld	r24, X
   10194:	28 23       	and	r18, r24
   10196:	2c 93       	st	X, r18
   10198:	80 91 e2 0d 	lds	r24, 0x0DE2	; 0x800de2 <my_lcd+0x28>
   1019c:	82 b9       	out	0x02, r24	; 2
   1019e:	e0 91 ec 0d 	lds	r30, 0x0DEC	; 0x800dec <my_lcd+0x32>
   101a2:	f0 91 ed 0d 	lds	r31, 0x0DED	; 0x800ded <my_lcd+0x33>
   101a6:	80 81       	ld	r24, Z
   101a8:	90 91 f6 0d 	lds	r25, 0x0DF6	; 0x800df6 <my_lcd+0x3c>
   101ac:	89 23       	and	r24, r25
   101ae:	80 83       	st	Z, r24
   101b0:	e0 91 ec 0d 	lds	r30, 0x0DEC	; 0x800dec <my_lcd+0x32>
   101b4:	f0 91 ed 0d 	lds	r31, 0x0DED	; 0x800ded <my_lcd+0x33>
   101b8:	80 81       	ld	r24, Z
   101ba:	90 91 f2 0d 	lds	r25, 0x0DF2	; 0x800df2 <my_lcd+0x38>
   101be:	89 2b       	or	r24, r25
   101c0:	80 83       	st	Z, r24
   101c2:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x30>
   101c6:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x31>
   101ca:	80 81       	ld	r24, Z
   101cc:	90 91 f1 0d 	lds	r25, 0x0DF1	; 0x800df1 <my_lcd+0x37>
   101d0:	89 2b       	or	r24, r25
   101d2:	80 83       	st	Z, r24
   101d4:	62 b9       	out	0x02, r22	; 2
   101d6:	71 ce       	rjmp	.-798    	; 0xfeba <__DATA_REGION_LENGTH__+0xba>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:843
		{			
			case 0:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR ; //0 degree 
		     	break;
		   	case 1:
		     	val = ILI9341_MADCTL_MV | ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR ; //90 degree 
   101d8:	68 ea       	ldi	r22, 0xA8	; 168
   101da:	db cf       	rjmp	.-74     	; 0x10192 <__EEPROM_REGION_LENGTH__+0x192>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:846
		     	break;
		 	case 2:
		    	val = ILI9341_MADCTL_ML | ILI9341_MADCTL_BGR; //180 degree 
   101dc:	68 e1       	ldi	r22, 0x18	; 24
   101de:	d9 cf       	rjmp	.-78     	; 0x10192 <__EEPROM_REGION_LENGTH__+0x192>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:849
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
   101e0:	68 e7       	ldi	r22, 0x78	; 120
   101e2:	d7 cf       	rjmp	.-82     	; 0x10192 <__EEPROM_REGION_LENGTH__+0x192>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:840
	{
		uint8_t val;
		switch (rotation) 
		{			
			case 0:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR ; //0 degree 
   101e4:	68 ec       	ldi	r22, 0xC8	; 200
   101e6:	d5 cf       	rjmp	.-86     	; 0x10192 <__EEPROM_REGION_LENGTH__+0x192>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:857
		 writeCmdData8(MD, val); 
	}
	else
	{
		uint8_t val;
		switch (rotation) 
   101e8:	81 30       	cpi	r24, 0x01	; 1
   101ea:	91 05       	cpc	r25, r1
   101ec:	49 f1       	breq	.+82     	; 0x10240 <__EEPROM_REGION_LENGTH__+0x240>
   101ee:	70 f1       	brcs	.+92     	; 0x1024c <__EEPROM_REGION_LENGTH__+0x24c>
   101f0:	82 30       	cpi	r24, 0x02	; 2
   101f2:	91 05       	cpc	r25, r1
   101f4:	39 f1       	breq	.+78     	; 0x10244 <__EEPROM_REGION_LENGTH__+0x244>
   101f6:	03 97       	sbiw	r24, 0x03	; 3
   101f8:	39 f1       	breq	.+78     	; 0x10248 <__EEPROM_REGION_LENGTH__+0x248>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:872
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY| ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
   101fa:	8c 91       	ld	r24, X
   101fc:	28 23       	and	r18, r24
   101fe:	2c 93       	st	X, r18
   10200:	80 91 e2 0d 	lds	r24, 0x0DE2	; 0x800de2 <my_lcd+0x28>
   10204:	82 b9       	out	0x02, r24	; 2
   10206:	e0 91 ec 0d 	lds	r30, 0x0DEC	; 0x800dec <my_lcd+0x32>
   1020a:	f0 91 ed 0d 	lds	r31, 0x0DED	; 0x800ded <my_lcd+0x33>
   1020e:	80 81       	ld	r24, Z
   10210:	90 91 f6 0d 	lds	r25, 0x0DF6	; 0x800df6 <my_lcd+0x3c>
   10214:	89 23       	and	r24, r25
   10216:	80 83       	st	Z, r24
   10218:	e0 91 ec 0d 	lds	r30, 0x0DEC	; 0x800dec <my_lcd+0x32>
   1021c:	f0 91 ed 0d 	lds	r31, 0x0DED	; 0x800ded <my_lcd+0x33>
   10220:	80 81       	ld	r24, Z
   10222:	90 91 f2 0d 	lds	r25, 0x0DF2	; 0x800df2 <my_lcd+0x38>
   10226:	89 2b       	or	r24, r25
   10228:	80 83       	st	Z, r24
   1022a:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x30>
   1022e:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x31>
   10232:	80 81       	ld	r24, Z
   10234:	90 91 f1 0d 	lds	r25, 0x0DF1	; 0x800df1 <my_lcd+0x37>
   10238:	89 2b       	or	r24, r25
   1023a:	80 83       	st	Z, r24
   1023c:	32 b9       	out	0x02, r19	; 2
   1023e:	3d ce       	rjmp	.-902    	; 0xfeba <__DATA_REGION_LENGTH__+0xba>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:863
		{
		   	case 0:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR; //0 degree 
		     	break;
		   	case 1:
		     	val = ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //90 degree 
   10240:	38 e2       	ldi	r19, 0x28	; 40
   10242:	db cf       	rjmp	.-74     	; 0x101fa <__EEPROM_REGION_LENGTH__+0x1fa>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:866
		     	break;
		 	case 2:
		    	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_ML |ILI9341_MADCTL_BGR; //180 degree 
   10244:	38 e9       	ldi	r19, 0x98	; 152
   10246:	d9 cf       	rjmp	.-78     	; 0x101fa <__EEPROM_REGION_LENGTH__+0x1fa>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:869
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY| ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
   10248:	38 ef       	ldi	r19, 0xF8	; 248
   1024a:	d7 cf       	rjmp	.-82     	; 0x101fa <__EEPROM_REGION_LENGTH__+0x1fa>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:860
	{
		uint8_t val;
		switch (rotation) 
		{
		   	case 0:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR; //0 degree 
   1024c:	38 e4       	ldi	r19, 0x48	; 72
   1024e:	d5 cf       	rjmp	.-86     	; 0x101fa <__EEPROM_REGION_LENGTH__+0x1fa>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:875
		     	break;
		 }
		 writeCmdData8(MD, val); 
	}
 	Set_Addr_Window(0, 0, width - 1, height - 1);
	Vert_Scroll(0, HEIGHT, 0);
   10250:	80 91 ca 0d 	lds	r24, 0x0DCA	; 0x800dca <my_lcd+0x10>
   10254:	90 91 cb 0d 	lds	r25, 0x0DCB	; 0x800dcb <my_lcd+0x11>
Vert_Scroll():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:712
        writeCmdData8(SC2, vsp);        //VL#
	}
	else
	{
  		uint8_t d[6];           // for multi-byte parameters
  		d[0] = top >> 8;        //TFA
   10258:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:713
  		d[1] = top;
   1025a:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:714
  		d[2] = scrollines >> 8; //VSA
   1025c:	9b 83       	std	Y+3, r25	; 0x03
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:715
  		d[3] = scrollines;
   1025e:	8c 83       	std	Y+4, r24	; 0x04
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:716
  		d[4] = bfa >> 8;        //BFA
   10260:	1d 82       	std	Y+5, r1	; 0x05
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:717
  		d[5] = bfa;
   10262:	1e 82       	std	Y+6, r1	; 0x06
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:718
		Push_Command(SC1, d, 6);
   10264:	60 91 de 0d 	lds	r22, 0x0DDE	; 0x800dde <my_lcd+0x24>
   10268:	70 91 df 0d 	lds	r23, 0x0DDF	; 0x800ddf <my_lcd+0x25>
   1026c:	26 e0       	ldi	r18, 0x06	; 6
   1026e:	ae 01       	movw	r20, r28
   10270:	4f 5f       	subi	r20, 0xFF	; 255
   10272:	5f 4f       	sbci	r21, 0xFF	; 255
   10274:	8a eb       	ldi	r24, 0xBA	; 186
   10276:	9d e0       	ldi	r25, 0x0D	; 13
   10278:	0e 94 81 33 	call	0x6702	; 0x6702 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:719
		d[0] = vsp >> 8;        //VSP
   1027c:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:720
  		d[1] = vsp;
   1027e:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:721
		Push_Command(SC2, d, 2);
   10280:	60 91 e0 0d 	lds	r22, 0x0DE0	; 0x800de0 <my_lcd+0x26>
   10284:	70 91 e1 0d 	lds	r23, 0x0DE1	; 0x800de1 <my_lcd+0x27>
   10288:	22 e0       	ldi	r18, 0x02	; 2
   1028a:	ae 01       	movw	r20, r28
   1028c:	4f 5f       	subi	r20, 0xFF	; 255
   1028e:	5f 4f       	sbci	r21, 0xFF	; 255
   10290:	8a eb       	ldi	r24, 0xBA	; 186
   10292:	9d e0       	ldi	r25, 0x0D	; 13
   10294:	0e 94 81 33 	call	0x6702	; 0x6702 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:722
		if(lcd_driver == ID_7575)
   10298:	80 91 d2 0d 	lds	r24, 0x0DD2	; 0x800dd2 <my_lcd+0x18>
   1029c:	90 91 d3 0d 	lds	r25, 0x0DD3	; 0x800dd3 <my_lcd+0x19>
   102a0:	01 97       	sbiw	r24, 0x01	; 1
   102a2:	61 f4       	brne	.+24     	; 0x102bc <__EEPROM_REGION_LENGTH__+0x2bc>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:724
		{
			d[0] = (offset != 0) ? 0x08:0;
   102a4:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:725
			Push_Command(0x01, d, 1);
   102a6:	21 e0       	ldi	r18, 0x01	; 1
   102a8:	ae 01       	movw	r20, r28
   102aa:	4f 5f       	subi	r20, 0xFF	; 255
   102ac:	5f 4f       	sbci	r21, 0xFF	; 255
   102ae:	61 e0       	ldi	r22, 0x01	; 1
   102b0:	70 e0       	ldi	r23, 0x00	; 0
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:729
		}
		else if (offset == 0) 
		{
			Push_Command(0x13, NULL, 0);
   102b2:	8a eb       	ldi	r24, 0xBA	; 186
   102b4:	9d e0       	ldi	r25, 0x0D	; 13
   102b6:	0e 94 81 33 	call	0x6702	; 0x6702 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   102ba:	a1 ce       	rjmp	.-702    	; 0xfffe <__DATA_REGION_LENGTH__+0x1fe>
   102bc:	20 e0       	ldi	r18, 0x00	; 0
   102be:	50 e0       	ldi	r21, 0x00	; 0
   102c0:	40 e0       	ldi	r20, 0x00	; 0
   102c2:	63 e1       	ldi	r22, 0x13	; 19
   102c4:	70 e0       	ldi	r23, 0x00	; 0
   102c6:	f5 cf       	rjmp	.-22     	; 0x102b2 <__EEPROM_REGION_LENGTH__+0x2b2>

000102c8 <log_error(PubSubClient*, char*) [clone .constprop.61]>:
_Z9log_errorP12PubSubClientPc.constprop.61():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:450
    send_mqtt_general_payload(mqtt_get_public_mqtt_client(), topic, mqtt_log);
    mqtt_log_cnt = 0;
  }
}
///////////////////////////////////////////////////////////////////////////
void log_error(PubSubClient *mqtt_client, char *log)
   102c8:	0f 93       	push	r16
   102ca:	1f 93       	push	r17
   102cc:	cf 93       	push	r28
   102ce:	df 93       	push	r29
   102d0:	cd b7       	in	r28, 0x3d	; 61
   102d2:	de b7       	in	r29, 0x3e	; 62
   102d4:	60 97       	sbiw	r28, 0x10	; 16
   102d6:	0f b6       	in	r0, 0x3f	; 63
   102d8:	f8 94       	cli
   102da:	de bf       	out	0x3e, r29	; 62
   102dc:	0f be       	out	0x3f, r0	; 63
   102de:	cd bf       	out	0x3d, r28	; 61
   102e0:	8c 01       	movw	r16, r24
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:453
{
  char topic[16];
  strcpy(topic, "log-app");
   102e2:	6a ee       	ldi	r22, 0xEA	; 234
   102e4:	76 e0       	ldi	r23, 0x06	; 6
   102e6:	ce 01       	movw	r24, r28
   102e8:	01 96       	adiw	r24, 0x01	; 1
   102ea:	0e 94 70 af 	call	0x15ee0	; 0x15ee0 <strcpy>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:454
  send_mqtt_general_payload(mqtt_client, topic, log);
   102ee:	a8 01       	movw	r20, r16
   102f0:	be 01       	movw	r22, r28
   102f2:	6f 5f       	subi	r22, 0xFF	; 255
   102f4:	7f 4f       	sbci	r23, 0xFF	; 255
   102f6:	82 e1       	ldi	r24, 0x12	; 18
   102f8:	9e e0       	ldi	r25, 0x0E	; 14
   102fa:	0e 94 0f 53 	call	0xa61e	; 0xa61e <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:455
}
   102fe:	60 96       	adiw	r28, 0x10	; 16
   10300:	0f b6       	in	r0, 0x3f	; 63
   10302:	f8 94       	cli
   10304:	de bf       	out	0x3e, r29	; 62
   10306:	0f be       	out	0x3f, r0	; 63
   10308:	cd bf       	out	0x3d, r28	; 61
   1030a:	df 91       	pop	r29
   1030c:	cf 91       	pop	r28
   1030e:	1f 91       	pop	r17
   10310:	0f 91       	pop	r16
   10312:	08 95       	ret

00010314 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.60]>:
_Z10parseBytesPKccPhii.constprop.60():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:100
  data.f = x;
  for (int i = 0; i < 4; i++) ar[i] = data.b[i];
}


void parseBytes(const char* str, char sep, uint8_t* bytes, int maxBytes, int base) {
   10314:	cf 92       	push	r12
   10316:	df 92       	push	r13
   10318:	ef 92       	push	r14
   1031a:	ff 92       	push	r15
   1031c:	0f 93       	push	r16
   1031e:	1f 93       	push	r17
   10320:	cf 93       	push	r28
   10322:	df 93       	push	r29
   10324:	8b 01       	movw	r16, r22
   10326:	7b 01       	movw	r14, r22
   10328:	e4 0e       	add	r14, r20
   1032a:	f5 1e       	adc	r15, r21
   1032c:	cb ed       	ldi	r28, 0xDB	; 219
   1032e:	da e0       	ldi	r29, 0x0A	; 10
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:103
  for (int i = 0; i < maxBytes; i++) {
    bytes[i] = strtoul(str, NULL, base);  // Convert byte
    str = strchr(str, sep);               // Find next separator
   10330:	c8 2e       	mov	r12, r24
   10332:	88 0f       	add	r24, r24
   10334:	dd 08       	sbc	r13, r13
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:102
}


void parseBytes(const char* str, char sep, uint8_t* bytes, int maxBytes, int base) {
  for (int i = 0; i < maxBytes; i++) {
    bytes[i] = strtoul(str, NULL, base);  // Convert byte
   10336:	4a e0       	ldi	r20, 0x0A	; 10
   10338:	50 e0       	ldi	r21, 0x00	; 0
   1033a:	70 e0       	ldi	r23, 0x00	; 0
   1033c:	60 e0       	ldi	r22, 0x00	; 0
   1033e:	ce 01       	movw	r24, r28
   10340:	0e 94 b1 a1 	call	0x14362	; 0x14362 <strtoul>
   10344:	f8 01       	movw	r30, r16
   10346:	61 93       	st	Z+, r22
   10348:	8f 01       	movw	r16, r30
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:103
    str = strchr(str, sep);               // Find next separator
   1034a:	b6 01       	movw	r22, r12
   1034c:	ce 01       	movw	r24, r28
   1034e:	0e 94 5c af 	call	0x15eb8	; 0x15eb8 <strchr>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:104
    if (str == NULL || *str == '\0') {
   10352:	00 97       	sbiw	r24, 0x00	; 0
   10354:	49 f0       	breq	.+18     	; 0x10368 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.60]+0x54>
   10356:	fc 01       	movw	r30, r24
   10358:	20 81       	ld	r18, Z
   1035a:	22 23       	and	r18, r18
   1035c:	29 f0       	breq	.+10     	; 0x10368 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.60]+0x54>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:107
      break;                            // No more separators, exit
    }
    str++;                                // Point to next character after separator
   1035e:	ec 01       	movw	r28, r24
   10360:	21 96       	adiw	r28, 0x01	; 1
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:101
  for (int i = 0; i < 4; i++) ar[i] = data.b[i];
}


void parseBytes(const char* str, char sep, uint8_t* bytes, int maxBytes, int base) {
  for (int i = 0; i < maxBytes; i++) {
   10362:	0e 15       	cp	r16, r14
   10364:	1f 05       	cpc	r17, r15
   10366:	39 f7       	brne	.-50     	; 0x10336 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.60]+0x22>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:109
    if (str == NULL || *str == '\0') {
      break;                            // No more separators, exit
    }
    str++;                                // Point to next character after separator
  }
}
   10368:	df 91       	pop	r29
   1036a:	cf 91       	pop	r28
   1036c:	1f 91       	pop	r17
   1036e:	0f 91       	pop	r16
   10370:	ff 90       	pop	r15
   10372:	ef 90       	pop	r14
   10374:	df 90       	pop	r13
   10376:	cf 90       	pop	r12
   10378:	08 95       	ret

0001037a <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.27]>:
_ZN10W5500Class13getTXFreeSizeEh.constprop.27():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:43
    write( 0x1E, cntl_byte, 2); //0x1E - Sn_RXBUF_SIZE
    write( 0x1F, cntl_byte, 2); //0x1F - Sn_TXBUF_SIZE
  }
}

uint16_t W5500Class::getTXFreeSize(SOCKET s)
   1037a:	ff 92       	push	r15
   1037c:	0f 93       	push	r16
   1037e:	1f 93       	push	r17
   10380:	cf 93       	push	r28
   10382:	df 93       	push	r29
   10384:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:45
{
    uint16_t val=0, val1=0;
   10386:	10 e0       	ldi	r17, 0x00	; 0
   10388:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:47
    do {
        val1 = readSnTX_FSR(s);
   1038a:	8f 2d       	mov	r24, r15
   1038c:	0e 94 ba 7b 	call	0xf774	; 0xf774 <W5500Class::readSnTX_FSR(unsigned char)>
   10390:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:48
        if (val1 != 0)
   10392:	89 2b       	or	r24, r25
   10394:	21 f0       	breq	.+8      	; 0x1039e <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.27]+0x24>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:49
            val = readSnTX_FSR(s);
   10396:	8f 2d       	mov	r24, r15
   10398:	0e 94 ba 7b 	call	0xf774	; 0xf774 <W5500Class::readSnTX_FSR(unsigned char)>
   1039c:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:51
    } 
    while (val != val1);
   1039e:	c0 17       	cp	r28, r16
   103a0:	d1 07       	cpc	r29, r17
   103a2:	99 f7       	brne	.-26     	; 0x1038a <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.27]+0x10>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:53
    return val;
}
   103a4:	ce 01       	movw	r24, r28
   103a6:	df 91       	pop	r29
   103a8:	cf 91       	pop	r28
   103aa:	1f 91       	pop	r17
   103ac:	0f 91       	pop	r16
   103ae:	ff 90       	pop	r15
   103b0:	08 95       	ret

000103b2 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.23]>:
_ZN10W5500Class17getRXReceivedSizeEh.constprop.23():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:55

uint16_t W5500Class::getRXReceivedSize(SOCKET s)
   103b2:	ff 92       	push	r15
   103b4:	0f 93       	push	r16
   103b6:	1f 93       	push	r17
   103b8:	cf 93       	push	r28
   103ba:	df 93       	push	r29
   103bc:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:57
{
    uint16_t val=0,val1=0;
   103be:	10 e0       	ldi	r17, 0x00	; 0
   103c0:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:59
    do {
        val1 = readSnRX_RSR(s);
   103c2:	8f 2d       	mov	r24, r15
   103c4:	0e 94 a2 7b 	call	0xf744	; 0xf744 <W5500Class::readSnRX_RSR(unsigned char)>
   103c8:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:60
        if (val1 != 0)
   103ca:	89 2b       	or	r24, r25
   103cc:	21 f0       	breq	.+8      	; 0x103d6 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.23]+0x24>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:61
            val = readSnRX_RSR(s);
   103ce:	8f 2d       	mov	r24, r15
   103d0:	0e 94 a2 7b 	call	0xf744	; 0xf744 <W5500Class::readSnRX_RSR(unsigned char)>
   103d4:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:63
    } 
    while (val != val1);
   103d6:	c0 17       	cp	r28, r16
   103d8:	d1 07       	cpc	r29, r17
   103da:	99 f7       	brne	.-26     	; 0x103c2 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.23]+0x10>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:65
    return val;
}
   103dc:	ce 01       	movw	r24, r28
   103de:	df 91       	pop	r29
   103e0:	cf 91       	pop	r28
   103e2:	1f 91       	pop	r17
   103e4:	0f 91       	pop	r16
   103e6:	ff 90       	pop	r15
   103e8:	08 95       	ret

000103ea <turnOffPWM.lto_priv.232>:
turnOffPWM.lto_priv.232():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
   103ea:	82 50       	subi	r24, 0x02	; 2
   103ec:	82 31       	cpi	r24, 0x12	; 18
   103ee:	08 f0       	brcs	.+2      	; 0x103f2 <turnOffPWM.lto_priv.232+0x8>
   103f0:	5f c0       	rjmp	.+190    	; 0x104b0 <turnOffPWM.lto_priv.232+0xc6>
   103f2:	e8 2f       	mov	r30, r24
   103f4:	f0 e0       	ldi	r31, 0x00	; 0
   103f6:	88 27       	eor	r24, r24
   103f8:	ef 5f       	subi	r30, 0xFF	; 255
   103fa:	fd 47       	sbci	r31, 0x7D	; 125
   103fc:	8f 4f       	sbci	r24, 0xFF	; 255
   103fe:	0c 94 5a ae 	jmp	0x15cb4	; 0x15cb4 <__tablejump2__>
   10402:	55 82       	std	Z+5, r5	; 0x05
   10404:	59 82       	std	Y+1, r5	; 0x01
   10406:	13 82       	std	Z+3, r1	; 0x03
   10408:	19 82       	std	Y+1, r1	; 0x01
   1040a:	1d 82       	std	Y+5, r1	; 0x05
   1040c:	58 82       	st	Y, r5
   1040e:	21 82       	std	Z+1, r2	; 0x01
   10410:	27 82       	std	Z+7, r2	; 0x07
   10412:	2b 82       	std	Y+3, r2	; 0x03
   10414:	31 82       	std	Z+1, r3	; 0x01
   10416:	35 82       	std	Z+5, r3	; 0x05
   10418:	39 82       	std	Y+1, r3	; 0x01
   1041a:	3f 82       	std	Y+7, r3	; 0x07
   1041c:	43 82       	std	Z+3, r4	; 0x03
   1041e:	58 82       	st	Y, r5
   10420:	47 82       	std	Z+7, r4	; 0x07
   10422:	4d 82       	std	Y+5, r4	; 0x05
   10424:	51 82       	std	Z+1, r5	; 0x01
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
   10426:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   1042a:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
   1042c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   10430:	08 95       	ret
   10432:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   10436:	8f 7d       	andi	r24, 0xDF	; 223
   10438:	f9 cf       	rjmp	.-14     	; 0x1042c <turnOffPWM.lto_priv.232+0x42>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:92
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1C1)
      case TIMER1C:
        TCCR1A &= ~_BV(COM1C1);
   1043a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   1043e:	87 7f       	andi	r24, 0xF7	; 247
   10440:	f5 cf       	rjmp	.-22     	; 0x1042c <turnOffPWM.lto_priv.232+0x42>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
   10442:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
   10446:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
   10448:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
   1044c:	08 95       	ret
   1044e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
   10452:	8f 7d       	andi	r24, 0xDF	; 223
   10454:	f9 cf       	rjmp	.-14     	; 0x10448 <turnOffPWM.lto_priv.232+0x5e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
   10456:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   1045a:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:126
        TCCR3A &= ~_BV(COM3B1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
   1045c:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   10460:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
   10462:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   10466:	8f 7d       	andi	r24, 0xDF	; 223
   10468:	f9 cf       	rjmp	.-14     	; 0x1045c <turnOffPWM.lto_priv.232+0x72>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:126
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
   1046a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   1046e:	87 7f       	andi	r24, 0xF7	; 247
   10470:	f5 cf       	rjmp	.-22     	; 0x1045c <turnOffPWM.lto_priv.232+0x72>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:133
    #endif

    // Timer4
    #if defined(TCCR4A) && defined(COM4A1)
      case TIMER4A:
        TCCR4A &= ~_BV(COM4A1);
   10472:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   10476:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:143
        TCCR4A &= ~_BV(COM4B1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
   10478:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   1047c:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:138
        TCCR4A &= ~_BV(COM4A1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4B1)
      case  TIMER4B:
        TCCR4A &= ~_BV(COM4B1);
   1047e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   10482:	8f 7d       	andi	r24, 0xDF	; 223
   10484:	f9 cf       	rjmp	.-14     	; 0x10478 <turnOffPWM.lto_priv.232+0x8e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:143
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
   10486:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   1048a:	87 7f       	andi	r24, 0xF7	; 247
   1048c:	f5 cf       	rjmp	.-22     	; 0x10478 <turnOffPWM.lto_priv.232+0x8e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:155
    #endif

    // Timer5
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
   1048e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   10492:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
   10494:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   10498:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:158
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
   1049a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   1049e:	8f 7d       	andi	r24, 0xDF	; 223
   104a0:	f9 cf       	rjmp	.-14     	; 0x10494 <turnOffPWM.lto_priv.232+0xaa>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
   104a2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   104a6:	87 7f       	andi	r24, 0xF7	; 247
   104a8:	f5 cf       	rjmp	.-22     	; 0x10494 <turnOffPWM.lto_priv.232+0xaa>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
   104aa:	84 b5       	in	r24, 0x24	; 36
   104ac:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
   104ae:	84 bd       	out	0x24, r24	; 36
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
   104b0:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
   104b2:	84 b5       	in	r24, 0x24	; 36
   104b4:	8f 7d       	andi	r24, 0xDF	; 223
   104b6:	fb cf       	rjmp	.-10     	; 0x104ae <turnOffPWM.lto_priv.232+0xc4>

000104b8 <digitalWrite>:
digitalWrite():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
   104b8:	1f 93       	push	r17
   104ba:	cf 93       	push	r28
   104bc:	df 93       	push	r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
   104be:	28 2f       	mov	r18, r24
   104c0:	30 e0       	ldi	r19, 0x00	; 0
   104c2:	f9 01       	movw	r30, r18
   104c4:	e7 57       	subi	r30, 0x77	; 119
   104c6:	f0 4d       	sbci	r31, 0xD0	; 208
   104c8:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
   104ca:	f9 01       	movw	r30, r18
   104cc:	e6 53       	subi	r30, 0x36	; 54
   104ce:	fb 4c       	sbci	r31, 0xCB	; 203
   104d0:	d4 91       	lpm	r29, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
   104d2:	f9 01       	movw	r30, r18
   104d4:	e0 5f       	subi	r30, 0xF0	; 240
   104d6:	fa 4c       	sbci	r31, 0xCA	; 202
   104d8:	c4 91       	lpm	r28, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
   104da:	cc 23       	and	r28, r28
   104dc:	a9 f0       	breq	.+42     	; 0x10508 <digitalWrite+0x50>
   104de:	16 2f       	mov	r17, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
   104e0:	81 11       	cpse	r24, r1
   104e2:	0e 94 f5 81 	call	0x103ea	; 0x103ea <turnOffPWM.lto_priv.232>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
   104e6:	ec 2f       	mov	r30, r28
   104e8:	f0 e0       	ldi	r31, 0x00	; 0
   104ea:	ee 0f       	add	r30, r30
   104ec:	ff 1f       	adc	r31, r31
   104ee:	e0 50       	subi	r30, 0x00	; 0
   104f0:	fb 4c       	sbci	r31, 0xCB	; 203
   104f2:	a5 91       	lpm	r26, Z+
   104f4:	b4 91       	lpm	r27, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
   104f6:	8f b7       	in	r24, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:203
  cli();
   104f8:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
   104fa:	ec 91       	ld	r30, X
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
   104fc:	11 11       	cpse	r17, r1
   104fe:	08 c0       	rjmp	.+16     	; 0x10510 <digitalWrite+0x58>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
   10500:	d0 95       	com	r29
   10502:	de 23       	and	r29, r30
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
   10504:	dc 93       	st	X, r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
   10506:	8f bf       	out	0x3f, r24	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:212
}
   10508:	df 91       	pop	r29
   1050a:	cf 91       	pop	r28
   1050c:	1f 91       	pop	r17
   1050e:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
   10510:	de 2b       	or	r29, r30
   10512:	f8 cf       	rjmp	.-16     	; 0x10504 <digitalWrite+0x4c>

00010514 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.181]>:
_ZN9SRAM_23LC9writeByteEmh.constprop.181():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:78
  endCommand();

  return(ret);
}

size_t SRAM_23LC::writeByte(const uint32_t address, const uint8_t byte)
   10514:	cf 92       	push	r12
   10516:	df 92       	push	r13
   10518:	ef 92       	push	r14
   1051a:	ff 92       	push	r15
   1051c:	cf 93       	push	r28
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:80
{
  if (address >= _capacity) {
   1051e:	c0 90 84 0c 	lds	r12, 0x0C84	; 0x800c84 <SRAM+0x4>
   10522:	d0 90 85 0c 	lds	r13, 0x0C85	; 0x800c85 <SRAM+0x5>
   10526:	e0 90 86 0c 	lds	r14, 0x0C86	; 0x800c86 <SRAM+0x6>
   1052a:	f0 90 87 0c 	lds	r15, 0x0C87	; 0x800c87 <SRAM+0x7>
   1052e:	6c 15       	cp	r22, r12
   10530:	7d 05       	cpc	r23, r13
   10532:	8e 05       	cpc	r24, r14
   10534:	9f 05       	cpc	r25, r15
   10536:	38 f5       	brcc	.+78     	; 0x10586 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.181]+0x72>
   10538:	c4 2f       	mov	r28, r20
   1053a:	6b 01       	movw	r12, r22
   1053c:	7c 01       	movw	r14, r24
startCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:125
}

void SRAM_23LC::startCommand(const uint8_t command, const uint32_t address)
{
  //_spi->beginTransaction(_spiSettings);
  digitalWrite(_chipSelect, LOW);
   1053e:	60 e0       	ldi	r22, 0x00	; 0
   10540:	80 91 88 0c 	lds	r24, 0x0C88	; 0x800c88 <SRAM+0x8>
   10544:	0e 94 5c 82 	call	0x104b8	; 0x104b8 <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:127

  _spi->transfer(command);
   10548:	62 e0       	ldi	r22, 0x02	; 2
   1054a:	80 91 80 0c 	lds	r24, 0x0C80	; 0x800c80 <SRAM>
   1054e:	90 91 81 0c 	lds	r25, 0x0C81	; 0x800c81 <SRAM+0x1>
   10552:	0e 94 b8 32 	call	0x6570	; 0x6570 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:129
  if (command == SRAM_23LC_COMMAND_READ || command == SRAM_23LC_COMMAND_WRITE) {
    sendAddressBytes(address);
   10556:	c7 01       	movw	r24, r14
   10558:	b6 01       	movw	r22, r12
   1055a:	0e 94 e6 7c 	call	0xf9cc	; 0xf9cc <SRAM_23LC::sendAddressBytes(unsigned long) [clone .constprop.185]>
_ZN9SRAM_23LC9writeByteEmh.constprop.181():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:85
  if (address >= _capacity) {
    return(0);
  }

  startCommand(SRAM_23LC_COMMAND_WRITE, address);
  _spi->transfer(byte);
   1055e:	6c 2f       	mov	r22, r28
   10560:	80 91 80 0c 	lds	r24, 0x0C80	; 0x800c80 <SRAM>
   10564:	90 91 81 0c 	lds	r25, 0x0C81	; 0x800c81 <SRAM+0x1>
   10568:	0e 94 b8 32 	call	0x6570	; 0x6570 <SoftSPIB::transfer(unsigned char)>
endCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:144
  _spi->transfer((uint8_t)(address & 0xFF));
}

void SRAM_23LC::endCommand(void)
{
  digitalWrite(_chipSelect, HIGH);
   1056c:	61 e0       	ldi	r22, 0x01	; 1
   1056e:	80 91 88 0c 	lds	r24, 0x0C88	; 0x800c88 <SRAM+0x8>
   10572:	0e 94 5c 82 	call	0x104b8	; 0x104b8 <digitalWrite>
   10576:	81 e0       	ldi	r24, 0x01	; 1
   10578:	90 e0       	ldi	r25, 0x00	; 0
_ZN9SRAM_23LC9writeByteEmh.constprop.181():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:88

  startCommand(SRAM_23LC_COMMAND_WRITE, address);
  _spi->transfer(byte);
  endCommand();
  return(1);
}
   1057a:	cf 91       	pop	r28
   1057c:	ff 90       	pop	r15
   1057e:	ef 90       	pop	r14
   10580:	df 90       	pop	r13
   10582:	cf 90       	pop	r12
   10584:	08 95       	ret
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:81
}

size_t SRAM_23LC::writeByte(const uint32_t address, const uint8_t byte)
{
  if (address >= _capacity) {
    return(0);
   10586:	90 e0       	ldi	r25, 0x00	; 0
   10588:	80 e0       	ldi	r24, 0x00	; 0
   1058a:	f7 cf       	rjmp	.-18     	; 0x1057a <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.181]+0x66>

0001058c <SRAM_23LC::readByte(unsigned long) [clone .constprop.179]>:
_ZN9SRAM_23LC8readByteEm.constprop.179():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:65
void SRAM_23LC::end(void)
{
  pinMode(_chipSelect, INPUT);
}

uint8_t SRAM_23LC::readByte(const uint32_t address)
   1058c:	cf 92       	push	r12
   1058e:	df 92       	push	r13
   10590:	ef 92       	push	r14
   10592:	ff 92       	push	r15
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:67
{
  if (address >= _capacity) {
   10594:	c0 90 84 0c 	lds	r12, 0x0C84	; 0x800c84 <SRAM+0x4>
   10598:	d0 90 85 0c 	lds	r13, 0x0C85	; 0x800c85 <SRAM+0x5>
   1059c:	e0 90 86 0c 	lds	r14, 0x0C86	; 0x800c86 <SRAM+0x6>
   105a0:	f0 90 87 0c 	lds	r15, 0x0C87	; 0x800c87 <SRAM+0x7>
   105a4:	6c 15       	cp	r22, r12
   105a6:	7d 05       	cpc	r23, r13
   105a8:	8e 05       	cpc	r24, r14
   105aa:	9f 05       	cpc	r25, r15
   105ac:	28 f5       	brcc	.+74     	; 0x105f8 <SRAM_23LC::readByte(unsigned long) [clone .constprop.179]+0x6c>
   105ae:	6b 01       	movw	r12, r22
   105b0:	7c 01       	movw	r14, r24
startCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:125
}

void SRAM_23LC::startCommand(const uint8_t command, const uint32_t address)
{
  //_spi->beginTransaction(_spiSettings);
  digitalWrite(_chipSelect, LOW);
   105b2:	60 e0       	ldi	r22, 0x00	; 0
   105b4:	80 91 88 0c 	lds	r24, 0x0C88	; 0x800c88 <SRAM+0x8>
   105b8:	0e 94 5c 82 	call	0x104b8	; 0x104b8 <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:127

  _spi->transfer(command);
   105bc:	63 e0       	ldi	r22, 0x03	; 3
   105be:	80 91 80 0c 	lds	r24, 0x0C80	; 0x800c80 <SRAM>
   105c2:	90 91 81 0c 	lds	r25, 0x0C81	; 0x800c81 <SRAM+0x1>
   105c6:	0e 94 b8 32 	call	0x6570	; 0x6570 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:129
  if (command == SRAM_23LC_COMMAND_READ || command == SRAM_23LC_COMMAND_WRITE) {
    sendAddressBytes(address);
   105ca:	c7 01       	movw	r24, r14
   105cc:	b6 01       	movw	r22, r12
   105ce:	0e 94 e6 7c 	call	0xf9cc	; 0xf9cc <SRAM_23LC::sendAddressBytes(unsigned long) [clone .constprop.185]>
_ZN9SRAM_23LC8readByteEm.constprop.179():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:72
  if (address >= _capacity) {
    return(0);
  }

  startCommand(SRAM_23LC_COMMAND_READ, address);
  uint8_t ret = _spi->transfer(SRAM_23LC_DUMMY_BYTE);
   105d2:	6f ef       	ldi	r22, 0xFF	; 255
   105d4:	80 91 80 0c 	lds	r24, 0x0C80	; 0x800c80 <SRAM>
   105d8:	90 91 81 0c 	lds	r25, 0x0C81	; 0x800c81 <SRAM+0x1>
   105dc:	0e 94 b8 32 	call	0x6570	; 0x6570 <SoftSPIB::transfer(unsigned char)>
   105e0:	f8 2e       	mov	r15, r24
endCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:144
  _spi->transfer((uint8_t)(address & 0xFF));
}

void SRAM_23LC::endCommand(void)
{
  digitalWrite(_chipSelect, HIGH);
   105e2:	61 e0       	ldi	r22, 0x01	; 1
   105e4:	80 91 88 0c 	lds	r24, 0x0C88	; 0x800c88 <SRAM+0x8>
   105e8:	0e 94 5c 82 	call	0x104b8	; 0x104b8 <digitalWrite>
_ZN9SRAM_23LC8readByteEm.constprop.179():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:76
  startCommand(SRAM_23LC_COMMAND_READ, address);
  uint8_t ret = _spi->transfer(SRAM_23LC_DUMMY_BYTE);
  endCommand();

  return(ret);
}
   105ec:	8f 2d       	mov	r24, r15
   105ee:	ff 90       	pop	r15
   105f0:	ef 90       	pop	r14
   105f2:	df 90       	pop	r13
   105f4:	cf 90       	pop	r12
   105f6:	08 95       	ret
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:68
}

uint8_t SRAM_23LC::readByte(const uint32_t address)
{
  if (address >= _capacity) {
    return(0);
   105f8:	f1 2c       	mov	r15, r1
   105fa:	f8 cf       	rjmp	.-16     	; 0x105ec <SRAM_23LC::readByte(unsigned long) [clone .constprop.179]+0x60>

000105fc <EEPROM_CAT25::endCommand() [clone .constprop.91]>:
_ZN12EEPROM_CAT2510endCommandEv.constprop.91():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:215
  _spi->transfer((uint8_t)(address & 0xFF));
}

void EEPROM_CAT25::endCommand(void)
{
  digitalWrite(_chipSelect, HIGH);
   105fc:	61 e0       	ldi	r22, 0x01	; 1
   105fe:	80 91 7b 0c 	lds	r24, 0x0C7B	; 0x800c7b <SROM+0xa>
   10602:	0c 94 5c 82 	jmp	0x104b8	; 0x104b8 <digitalWrite>

00010606 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.89]>:
_ZN12EEPROM_CAT2512startCommandEhm.constprop.89():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:180
  endCommand();

  return(length);
}

void EEPROM_CAT25::startCommand(uint8_t command, const uint32_t address)
   10606:	cf 93       	push	r28
   10608:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:183
{
  //_spi->beginTransaction();
  digitalWrite(_chipSelect, LOW);
   1060a:	60 e0       	ldi	r22, 0x00	; 0
   1060c:	80 91 7b 0c 	lds	r24, 0x0C7B	; 0x800c7b <SROM+0xa>
   10610:	0e 94 5c 82 	call	0x104b8	; 0x104b8 <digitalWrite>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:193
    } else if (command == EEPROM_CAT25_COMMAND_WRITE) {
      command = EEPROM_CAT25_COMMAND_WRITE_A8_HIGH;
    }
  }

  _spi->transfer(command);
   10614:	6c 2f       	mov	r22, r28
   10616:	80 91 71 0c 	lds	r24, 0x0C71	; 0x800c71 <SROM>
   1061a:	90 91 72 0c 	lds	r25, 0x0C72	; 0x800c72 <SROM+0x1>
   1061e:	0e 94 b8 32 	call	0x6570	; 0x6570 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:195

  if (command == EEPROM_CAT25_COMMAND_READ || command == EEPROM_CAT25_COMMAND_WRITE) {
   10622:	c2 50       	subi	r28, 0x02	; 2
   10624:	c2 30       	cpi	r28, 0x02	; 2
   10626:	a8 f5       	brcc	.+106    	; 0x10692 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.89]+0x8c>
sendAddressBytes():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:202
  }
}

void EEPROM_CAT25::sendAddressBytes(const uint32_t address)
{
  if (_capacity > 0x10000) {
   10628:	80 91 75 0c 	lds	r24, 0x0C75	; 0x800c75 <SROM+0x4>
   1062c:	90 91 76 0c 	lds	r25, 0x0C76	; 0x800c76 <SROM+0x5>
   10630:	a0 91 77 0c 	lds	r26, 0x0C77	; 0x800c77 <SROM+0x6>
   10634:	b0 91 78 0c 	lds	r27, 0x0C78	; 0x800c78 <SROM+0x7>
   10638:	01 97       	sbiw	r24, 0x01	; 1
   1063a:	a1 40       	sbci	r26, 0x01	; 1
   1063c:	b1 05       	cpc	r27, r1
   1063e:	38 f0       	brcs	.+14     	; 0x1064e <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.89]+0x48>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:203
    _spi->transfer((uint8_t)((address >> 16) & 0xFF));
   10640:	60 e0       	ldi	r22, 0x00	; 0
   10642:	80 91 71 0c 	lds	r24, 0x0C71	; 0x800c71 <SROM>
   10646:	90 91 72 0c 	lds	r25, 0x0C72	; 0x800c72 <SROM+0x1>
   1064a:	0e 94 b8 32 	call	0x6570	; 0x6570 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:206
  }

  if ((_capacity > 0x100) && (_device != CAT25040)) {
   1064e:	80 91 75 0c 	lds	r24, 0x0C75	; 0x800c75 <SROM+0x4>
   10652:	90 91 76 0c 	lds	r25, 0x0C76	; 0x800c76 <SROM+0x5>
   10656:	a0 91 77 0c 	lds	r26, 0x0C77	; 0x800c77 <SROM+0x6>
   1065a:	b0 91 78 0c 	lds	r27, 0x0C78	; 0x800c78 <SROM+0x7>
   1065e:	81 30       	cpi	r24, 0x01	; 1
   10660:	91 40       	sbci	r25, 0x01	; 1
   10662:	a1 05       	cpc	r26, r1
   10664:	b1 05       	cpc	r27, r1
   10666:	68 f0       	brcs	.+26     	; 0x10682 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.89]+0x7c>
   10668:	80 91 73 0c 	lds	r24, 0x0C73	; 0x800c73 <SROM+0x2>
   1066c:	90 91 74 0c 	lds	r25, 0x0C74	; 0x800c74 <SROM+0x3>
   10670:	0b 97       	sbiw	r24, 0x0b	; 11
   10672:	39 f0       	breq	.+14     	; 0x10682 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.89]+0x7c>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:207
    _spi->transfer((uint8_t)((address >> 8) & 0xFF));
   10674:	60 e0       	ldi	r22, 0x00	; 0
   10676:	80 91 71 0c 	lds	r24, 0x0C71	; 0x800c71 <SROM>
   1067a:	90 91 72 0c 	lds	r25, 0x0C72	; 0x800c72 <SROM+0x1>
   1067e:	0e 94 b8 32 	call	0x6570	; 0x6570 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:210
  }

  _spi->transfer((uint8_t)(address & 0xFF));
   10682:	60 e0       	ldi	r22, 0x00	; 0
   10684:	80 91 71 0c 	lds	r24, 0x0C71	; 0x800c71 <SROM>
   10688:	90 91 72 0c 	lds	r25, 0x0C72	; 0x800c72 <SROM+0x1>
_ZN12EEPROM_CAT2512startCommandEhm.constprop.89():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:198
  _spi->transfer(command);

  if (command == EEPROM_CAT25_COMMAND_READ || command == EEPROM_CAT25_COMMAND_WRITE) {
    sendAddressBytes(address);
  }
}
   1068c:	cf 91       	pop	r28
sendAddressBytes():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:210

  if ((_capacity > 0x100) && (_device != CAT25040)) {
    _spi->transfer((uint8_t)((address >> 8) & 0xFF));
  }

  _spi->transfer((uint8_t)(address & 0xFF));
   1068e:	0c 94 b8 32 	jmp	0x6570	; 0x6570 <SoftSPIB::transfer(unsigned char)>
_ZN12EEPROM_CAT2512startCommandEhm.constprop.89():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:198
  _spi->transfer(command);

  if (command == EEPROM_CAT25_COMMAND_READ || command == EEPROM_CAT25_COMMAND_WRITE) {
    sendAddressBytes(address);
  }
}
   10692:	cf 91       	pop	r28
   10694:	08 95       	ret

00010696 <EEPROM_CAT25::getStatusRegister() [clone .constprop.88]>:
_ZN12EEPROM_CAT2517getStatusRegisterEv.constprop.88():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:42
void EEPROM_CAT25::end(void)
{
  pinMode(_chipSelect, INPUT);
}

uint8_t EEPROM_CAT25::getStatusRegister(void)
   10696:	cf 93       	push	r28
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:44
{
  startCommand(EEPROM_CAT25_COMMAND_RDSR, 0);
   10698:	85 e0       	ldi	r24, 0x05	; 5
   1069a:	0e 94 03 83 	call	0x10606	; 0x10606 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.89]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:45
  uint8_t ret = _spi->transfer(EEPROM_CAT25_DUMMY_BYTE);
   1069e:	6f ef       	ldi	r22, 0xFF	; 255
   106a0:	80 91 71 0c 	lds	r24, 0x0C71	; 0x800c71 <SROM>
   106a4:	90 91 72 0c 	lds	r25, 0x0C72	; 0x800c72 <SROM+0x1>
   106a8:	0e 94 b8 32 	call	0x6570	; 0x6570 <SoftSPIB::transfer(unsigned char)>
   106ac:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:46
  endCommand();
   106ae:	0e 94 fe 82 	call	0x105fc	; 0x105fc <EEPROM_CAT25::endCommand() [clone .constprop.91]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:48
  return(ret);
}
   106b2:	8c 2f       	mov	r24, r28
   106b4:	cf 91       	pop	r28
   106b6:	08 95       	ret

000106b8 <TwoWire::begin() [clone .constprop.64]>:
_ZN7TwoWire5beginEv.constprop.64():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:57

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
   106b8:	10 92 e4 10 	sts	0x10E4, r1	; 0x8010e4 <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:58
  rxBufferLength = 0;
   106bc:	10 92 e3 10 	sts	0x10E3, r1	; 0x8010e3 <TwoWire::rxBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:60

  txBufferIndex = 0;
   106c0:	10 92 e6 10 	sts	0x10E6, r1	; 0x8010e6 <TwoWire::txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:61
  txBufferLength = 0;
   106c4:	10 92 e5 10 	sts	0x10E5, r1	; 0x8010e5 <TwoWire::txBufferLength>
twi_init():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:71
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
   106c8:	10 92 2f 11 	sts	0x112F, r1	; 0x80112f <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:72
  twi_sendStop = true; // default value
   106cc:	81 e0       	ldi	r24, 0x01	; 1
   106ce:	80 93 2e 11 	sts	0x112E, r24	; 0x80112e <twi_sendStop>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:73
  twi_inRepStart = false;
   106d2:	10 92 29 11 	sts	0x1129, r1	; 0x801129 <twi_inRepStart>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:76

  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
   106d6:	61 e0       	ldi	r22, 0x01	; 1
   106d8:	83 e1       	ldi	r24, 0x13	; 19
   106da:	0e 94 5c 82 	call	0x104b8	; 0x104b8 <digitalWrite>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:77
  digitalWrite(SCL, 1);
   106de:	61 e0       	ldi	r22, 0x01	; 1
   106e0:	82 e1       	ldi	r24, 0x12	; 18
   106e2:	0e 94 5c 82 	call	0x104b8	; 0x104b8 <digitalWrite>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:80

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
   106e6:	e9 eb       	ldi	r30, 0xB9	; 185
   106e8:	f0 e0       	ldi	r31, 0x00	; 0
   106ea:	80 81       	ld	r24, Z
   106ec:	8e 7f       	andi	r24, 0xFE	; 254
   106ee:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:81
  cbi(TWSR, TWPS1);
   106f0:	80 81       	ld	r24, Z
   106f2:	8d 7f       	andi	r24, 0xFD	; 253
   106f4:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:82
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
   106f6:	88 e4       	ldi	r24, 0x48	; 72
   106f8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:90
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
   106fc:	85 e4       	ldi	r24, 0x45	; 69
   106fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
twi_attachSlaveTxEvent():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:344
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
   10702:	80 e7       	ldi	r24, 0x70	; 112
   10704:	97 e7       	ldi	r25, 0x77	; 119
   10706:	90 93 e1 10 	sts	0x10E1, r25	; 0x8010e1 <twi_onSlaveTransmit+0x1>
   1070a:	80 93 e0 10 	sts	0x10E0, r24	; 0x8010e0 <twi_onSlaveTransmit>
twi_attachSlaveRxEvent():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:333
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
  twi_onSlaveReceive = function;
   1070e:	81 e7       	ldi	r24, 0x71	; 113
   10710:	97 e7       	ldi	r25, 0x77	; 119
   10712:	90 93 df 10 	sts	0x10DF, r25	; 0x8010df <twi_onSlaveReceive+0x1>
   10716:	80 93 de 10 	sts	0x10DE, r24	; 0x8010de <twi_onSlaveReceive>
_ZN7TwoWire5beginEv.constprop.64():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:66

  twi_init();
  twi_attachSlaveTxEvent(onRequestService); // default callback must exist
  twi_attachSlaveRxEvent(onReceiveService); // default callback must exist
}
   1071a:	08 95       	ret

0001071c <W5500Class::resetSS()>:
_ZN10W5500Class7resetSSEv():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:342

private:
  // could do inline optimizations
  static inline void initSS()  { pinMode(SPI_CS, OUTPUT); }
  static inline void setSS()   {  digitalWrite(SPI_CS, LOW); }
  static inline void resetSS() {  digitalWrite(SPI_CS, HIGH); }
   1071c:	61 e0       	ldi	r22, 0x01	; 1
   1071e:	80 91 e2 10 	lds	r24, 0x10E2	; 0x8010e2 <SPI_CS>
   10722:	0c 94 5c 82 	jmp	0x104b8	; 0x104b8 <digitalWrite>

00010726 <W5500Class::setSS()>:
_ZN10W5500Class5setSSEv():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:341
  static const uint16_t RSIZE = 2048; // Max Rx buffer size

private:
  // could do inline optimizations
  static inline void initSS()  { pinMode(SPI_CS, OUTPUT); }
  static inline void setSS()   {  digitalWrite(SPI_CS, LOW); }
   10726:	60 e0       	ldi	r22, 0x00	; 0
   10728:	80 91 e2 10 	lds	r24, 0x10E2	; 0x8010e2 <SPI_CS>
   1072c:	0c 94 5c 82 	jmp	0x104b8	; 0x104b8 <digitalWrite>

00010730 <W5500Class::write(unsigned int, unsigned char, unsigned char)>:
_ZN10W5500Class5writeEjhh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:104
    uint8_t cntl_byte = (0x18+(s<<5));
    read((uint16_t)src , cntl_byte, (uint8_t *)dst, len);
}

uint8_t W5500Class::write(uint16_t _addr, uint8_t _cb, uint8_t _data)
{
   10730:	1f 93       	push	r17
   10732:	cf 93       	push	r28
   10734:	df 93       	push	r29
   10736:	18 2f       	mov	r17, r24
   10738:	d6 2f       	mov	r29, r22
   1073a:	c4 2f       	mov	r28, r20
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:105
    SPI.beginTransaction(wiznet_SPI_settings);
   1073c:	80 91 3c 11 	lds	r24, 0x113C	; 0x80113c <wiznet_SPI_settings>
   10740:	90 91 3d 11 	lds	r25, 0x113D	; 0x80113d <wiznet_SPI_settings+0x1>
   10744:	0e 94 4f 79 	call	0xf29e	; 0xf29e <SPIClass::beginTransaction(SPISettings)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:106
    setSS();  
   10748:	0e 94 93 83 	call	0x10726	; 0x10726 <W5500Class::setSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:107
    SPI.transfer(_addr >> 8);
   1074c:	80 e0       	ldi	r24, 0x00	; 0
   1074e:	0e 94 48 79 	call	0xf290	; 0xf290 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:108
    SPI.transfer(_addr & 0xFF);
   10752:	81 2f       	mov	r24, r17
   10754:	0e 94 48 79 	call	0xf290	; 0xf290 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:109
    SPI.transfer(_cb);
   10758:	8d 2f       	mov	r24, r29
   1075a:	0e 94 48 79 	call	0xf290	; 0xf290 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:110
    SPI.transfer(_data);
   1075e:	8c 2f       	mov	r24, r28
   10760:	0e 94 48 79 	call	0xf290	; 0xf290 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:111
    resetSS();
   10764:	0e 94 8e 83 	call	0x1071c	; 0x1071c <W5500Class::resetSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:115
    SPI.endTransaction();

    return 1;
}
   10768:	81 e0       	ldi	r24, 0x01	; 1
   1076a:	df 91       	pop	r29
   1076c:	cf 91       	pop	r28
   1076e:	1f 91       	pop	r17
   10770:	08 95       	ret

00010772 <pinMode>:
pinMode():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
   10772:	cf 93       	push	r28
   10774:	df 93       	push	r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
   10776:	90 e0       	ldi	r25, 0x00	; 0
   10778:	fc 01       	movw	r30, r24
   1077a:	e6 53       	subi	r30, 0x36	; 54
   1077c:	fb 4c       	sbci	r31, 0xCB	; 203
   1077e:	24 91       	lpm	r18, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
   10780:	80 5f       	subi	r24, 0xF0	; 240
   10782:	9a 4c       	sbci	r25, 0xCA	; 202
   10784:	fc 01       	movw	r30, r24
   10786:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
   10788:	88 23       	and	r24, r24
   1078a:	c9 f0       	breq	.+50     	; 0x107be <pinMode+0x4c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
   1078c:	90 e0       	ldi	r25, 0x00	; 0
   1078e:	88 0f       	add	r24, r24
   10790:	99 1f       	adc	r25, r25
   10792:	fc 01       	movw	r30, r24
   10794:	e7 58       	subi	r30, 0x87	; 135
   10796:	f0 4d       	sbci	r31, 0xD0	; 208
   10798:	a5 91       	lpm	r26, Z+
   1079a:	b4 91       	lpm	r27, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
   1079c:	fc 01       	movw	r30, r24
   1079e:	e0 50       	subi	r30, 0x00	; 0
   107a0:	fb 4c       	sbci	r31, 0xCB	; 203
   107a2:	c5 91       	lpm	r28, Z+
   107a4:	d4 91       	lpm	r29, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
   107a6:	61 11       	cpse	r22, r1
   107a8:	0d c0       	rjmp	.+26     	; 0x107c4 <pinMode+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
   107aa:	9f b7       	in	r25, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:43
    cli();
   107ac:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
   107ae:	8c 91       	ld	r24, X
   107b0:	20 95       	com	r18
   107b2:	82 23       	and	r24, r18
   107b4:	8c 93       	st	X, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
   107b6:	88 81       	ld	r24, Y
   107b8:	28 23       	and	r18, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
   107ba:	28 83       	st	Y, r18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
   107bc:	9f bf       	out	0x3f, r25	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
   107be:	df 91       	pop	r29
   107c0:	cf 91       	pop	r28
   107c2:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
   107c4:	62 30       	cpi	r22, 0x02	; 2
   107c6:	51 f4       	brne	.+20     	; 0x107dc <pinMode+0x6a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
   107c8:	9f b7       	in	r25, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:49
    cli();
   107ca:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
   107cc:	3c 91       	ld	r19, X
   107ce:	82 2f       	mov	r24, r18
   107d0:	80 95       	com	r24
   107d2:	83 23       	and	r24, r19
   107d4:	8c 93       	st	X, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
   107d6:	e8 81       	ld	r30, Y
   107d8:	2e 2b       	or	r18, r30
   107da:	ef cf       	rjmp	.-34     	; 0x107ba <pinMode+0x48>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
   107dc:	8f b7       	in	r24, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:55
    cli();
   107de:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
   107e0:	ec 91       	ld	r30, X
   107e2:	2e 2b       	or	r18, r30
   107e4:	2c 93       	st	X, r18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
   107e6:	8f bf       	out	0x3f, r24	; 63
   107e8:	ea cf       	rjmp	.-44     	; 0x107be <pinMode+0x4c>

000107ea <delay>:
delay():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:174

void delay(unsigned long ms)
{
   107ea:	8f 92       	push	r8
   107ec:	9f 92       	push	r9
   107ee:	af 92       	push	r10
   107f0:	bf 92       	push	r11
   107f2:	cf 92       	push	r12
   107f4:	df 92       	push	r13
   107f6:	ef 92       	push	r14
   107f8:	ff 92       	push	r15
   107fa:	6b 01       	movw	r12, r22
   107fc:	7c 01       	movw	r14, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:175
  uint32_t start = micros();
   107fe:	0e 94 58 78 	call	0xf0b0	; 0xf0b0 <micros>
   10802:	4b 01       	movw	r8, r22
   10804:	5c 01       	movw	r10, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:179

  while (ms > 0) {
    yield();
    while ( ms > 0 && (micros() - start) >= 1000) {
   10806:	c1 14       	cp	r12, r1
   10808:	d1 04       	cpc	r13, r1
   1080a:	e1 04       	cpc	r14, r1
   1080c:	f1 04       	cpc	r15, r1
   1080e:	b9 f0       	breq	.+46     	; 0x1083e <delay+0x54>
   10810:	0e 94 58 78 	call	0xf0b0	; 0xf0b0 <micros>
   10814:	68 19       	sub	r22, r8
   10816:	79 09       	sbc	r23, r9
   10818:	8a 09       	sbc	r24, r10
   1081a:	9b 09       	sbc	r25, r11
   1081c:	68 3e       	cpi	r22, 0xE8	; 232
   1081e:	73 40       	sbci	r23, 0x03	; 3
   10820:	81 05       	cpc	r24, r1
   10822:	91 05       	cpc	r25, r1
   10824:	80 f3       	brcs	.-32     	; 0x10806 <delay+0x1c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:180
      ms--;
   10826:	21 e0       	ldi	r18, 0x01	; 1
   10828:	c2 1a       	sub	r12, r18
   1082a:	d1 08       	sbc	r13, r1
   1082c:	e1 08       	sbc	r14, r1
   1082e:	f1 08       	sbc	r15, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:181
      start += 1000;
   10830:	88 ee       	ldi	r24, 0xE8	; 232
   10832:	88 0e       	add	r8, r24
   10834:	83 e0       	ldi	r24, 0x03	; 3
   10836:	98 1e       	adc	r9, r24
   10838:	a1 1c       	adc	r10, r1
   1083a:	b1 1c       	adc	r11, r1
   1083c:	e4 cf       	rjmp	.-56     	; 0x10806 <delay+0x1c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:184
    }
  }
}
   1083e:	ff 90       	pop	r15
   10840:	ef 90       	pop	r14
   10842:	df 90       	pop	r13
   10844:	cf 90       	pop	r12
   10846:	bf 90       	pop	r11
   10848:	af 90       	pop	r10
   1084a:	9f 90       	pop	r9
   1084c:	8f 90       	pop	r8
   1084e:	08 95       	ret

00010850 <LCDWIKI_KBV::reset() [clone .constprop.72]>:
_ZN11LCDWIKI_KBV5resetEv.constprop.72():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:250
void LCDWIKI_KBV::reset(void)
{
//	have_reset = 1;
//    setWriteDir();
//Set all control bits to idle state
    CS_IDLE;
   10850:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x2e>
   10854:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x2f>
   10858:	80 81       	ld	r24, Z
   1085a:	90 91 f0 0d 	lds	r25, 0x0DF0	; 0x800df0 <my_lcd+0x36>
   1085e:	89 2b       	or	r24, r25
   10860:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:251
    RD_IDLE;
   10862:	e0 91 ee 0d 	lds	r30, 0x0DEE	; 0x800dee <my_lcd+0x34>
   10866:	f0 91 ef 0d 	lds	r31, 0x0DEF	; 0x800def <my_lcd+0x35>
   1086a:	80 81       	ld	r24, Z
   1086c:	90 91 f3 0d 	lds	r25, 0x0DF3	; 0x800df3 <my_lcd+0x39>
   10870:	89 2b       	or	r24, r25
   10872:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:252
    WR_IDLE;
   10874:	e0 91 ec 0d 	lds	r30, 0x0DEC	; 0x800dec <my_lcd+0x32>
   10878:	f0 91 ed 0d 	lds	r31, 0x0DED	; 0x800ded <my_lcd+0x33>
   1087c:	80 81       	ld	r24, Z
   1087e:	90 91 f2 0d 	lds	r25, 0x0DF2	; 0x800df2 <my_lcd+0x38>
   10882:	89 2b       	or	r24, r25
   10884:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:262
  digitalWrite(5, HIGH);
//  delay(100);
  //digitalWrite(5, LOW);
 // delay(100);
#else
  if(_reset) 
   10886:	80 91 f8 0d 	lds	r24, 0x0DF8	; 0x800df8 <my_lcd+0x3e>
   1088a:	88 23       	and	r24, r24
   1088c:	71 f0       	breq	.+28     	; 0x108aa <LCDWIKI_KBV::reset() [clone .constprop.72]+0x5a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:264
  {
    digitalWrite(_reset, LOW);
   1088e:	60 e0       	ldi	r22, 0x00	; 0
   10890:	0e 94 5c 82 	call	0x104b8	; 0x104b8 <digitalWrite>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:265
    delay(2);
   10894:	62 e0       	ldi	r22, 0x02	; 2
   10896:	70 e0       	ldi	r23, 0x00	; 0
   10898:	80 e0       	ldi	r24, 0x00	; 0
   1089a:	90 e0       	ldi	r25, 0x00	; 0
   1089c:	0e 94 f5 83 	call	0x107ea	; 0x107ea <delay>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:266
    digitalWrite(_reset, HIGH);
   108a0:	61 e0       	ldi	r22, 0x01	; 1
   108a2:	80 91 f8 0d 	lds	r24, 0x0DF8	; 0x800df8 <my_lcd+0x3e>
   108a6:	0e 94 5c 82 	call	0x104b8	; 0x104b8 <digitalWrite>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:272
//	delay(100);
	//digitalWrite(_reset, LOW);
	//delay(100);
  }
#endif
  CS_ACTIVE;
   108aa:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x2e>
   108ae:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x2f>
   108b2:	80 81       	ld	r24, Z
   108b4:	90 91 f4 0d 	lds	r25, 0x0DF4	; 0x800df4 <my_lcd+0x3a>
   108b8:	89 23       	and	r24, r25
   108ba:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:273
  CD_COMMAND;
   108bc:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x30>
   108c0:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x31>
   108c4:	80 81       	ld	r24, Z
   108c6:	90 91 f5 0d 	lds	r25, 0x0DF5	; 0x800df5 <my_lcd+0x3b>
   108ca:	89 23       	and	r24, r25
   108cc:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:274
  write8(0x00);
   108ce:	12 b8       	out	0x02, r1	; 2
   108d0:	e0 91 ec 0d 	lds	r30, 0x0DEC	; 0x800dec <my_lcd+0x32>
   108d4:	f0 91 ed 0d 	lds	r31, 0x0DED	; 0x800ded <my_lcd+0x33>
   108d8:	80 81       	ld	r24, Z
   108da:	90 91 f6 0d 	lds	r25, 0x0DF6	; 0x800df6 <my_lcd+0x3c>
   108de:	89 23       	and	r24, r25
   108e0:	80 83       	st	Z, r24
   108e2:	e0 91 ec 0d 	lds	r30, 0x0DEC	; 0x800dec <my_lcd+0x32>
   108e6:	f0 91 ed 0d 	lds	r31, 0x0DED	; 0x800ded <my_lcd+0x33>
   108ea:	80 81       	ld	r24, Z
   108ec:	90 91 f2 0d 	lds	r25, 0x0DF2	; 0x800df2 <my_lcd+0x38>
   108f0:	89 2b       	or	r24, r25
   108f2:	80 83       	st	Z, r24
   108f4:	83 e0       	ldi	r24, 0x03	; 3
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:277
  for(uint8_t i=0; i<3; i++)
  {
  	WR_STROBE; // Three extra 0x00s
   108f6:	e0 91 ec 0d 	lds	r30, 0x0DEC	; 0x800dec <my_lcd+0x32>
   108fa:	f0 91 ed 0d 	lds	r31, 0x0DED	; 0x800ded <my_lcd+0x33>
   108fe:	90 81       	ld	r25, Z
   10900:	20 91 f6 0d 	lds	r18, 0x0DF6	; 0x800df6 <my_lcd+0x3c>
   10904:	92 23       	and	r25, r18
   10906:	90 83       	st	Z, r25
   10908:	e0 91 ec 0d 	lds	r30, 0x0DEC	; 0x800dec <my_lcd+0x32>
   1090c:	f0 91 ed 0d 	lds	r31, 0x0DED	; 0x800ded <my_lcd+0x33>
   10910:	90 81       	ld	r25, Z
   10912:	20 91 f2 0d 	lds	r18, 0x0DF2	; 0x800df2 <my_lcd+0x38>
   10916:	92 2b       	or	r25, r18
   10918:	90 83       	st	Z, r25
   1091a:	81 50       	subi	r24, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:275
  }
#endif
  CS_ACTIVE;
  CD_COMMAND;
  write8(0x00);
  for(uint8_t i=0; i<3; i++)
   1091c:	61 f7       	brne	.-40     	; 0x108f6 <LCDWIKI_KBV::reset() [clone .constprop.72]+0xa6>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:279
  {
  	WR_STROBE; // Three extra 0x00s
  }
  CS_IDLE;
   1091e:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x2e>
   10922:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x2f>
   10926:	80 81       	ld	r24, Z
   10928:	90 91 f0 0d 	lds	r25, 0x0DF0	; 0x800df0 <my_lcd+0x36>
   1092c:	89 2b       	or	r24, r25
   1092e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:280
}
   10930:	08 95       	ret

00010932 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.70]>:
_ZN11LCDWIKI_KBV8Read_RegEja.constprop.70():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:491
{
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3);
}

//read value from lcd register 
uint16_t LCDWIKI_KBV::Read_Reg(uint16_t reg, int8_t index)
   10932:	cf 93       	push	r28
   10934:	c6 2f       	mov	r28, r22
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:499
    uint8_t low;
//  if (!have_reset)
 // {
 //     reset();
//  }
	CS_ACTIVE;
   10936:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x2e>
   1093a:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x2f>
   1093e:	90 81       	ld	r25, Z
   10940:	20 91 f4 0d 	lds	r18, 0x0DF4	; 0x800df4 <my_lcd+0x3a>
   10944:	92 23       	and	r25, r18
   10946:	90 83       	st	Z, r25
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:500
    writeCmd16(reg);
   10948:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x30>
   1094c:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x31>
   10950:	90 81       	ld	r25, Z
   10952:	20 91 f5 0d 	lds	r18, 0x0DF5	; 0x800df5 <my_lcd+0x3b>
   10956:	92 23       	and	r25, r18
   10958:	90 83       	st	Z, r25
   1095a:	12 b8       	out	0x02, r1	; 2
   1095c:	e0 91 ec 0d 	lds	r30, 0x0DEC	; 0x800dec <my_lcd+0x32>
   10960:	f0 91 ed 0d 	lds	r31, 0x0DED	; 0x800ded <my_lcd+0x33>
   10964:	90 81       	ld	r25, Z
   10966:	20 91 f6 0d 	lds	r18, 0x0DF6	; 0x800df6 <my_lcd+0x3c>
   1096a:	92 23       	and	r25, r18
   1096c:	90 83       	st	Z, r25
   1096e:	e0 91 ec 0d 	lds	r30, 0x0DEC	; 0x800dec <my_lcd+0x32>
   10972:	f0 91 ed 0d 	lds	r31, 0x0DED	; 0x800ded <my_lcd+0x33>
   10976:	90 81       	ld	r25, Z
   10978:	20 91 f2 0d 	lds	r18, 0x0DF2	; 0x800df2 <my_lcd+0x38>
   1097c:	92 2b       	or	r25, r18
   1097e:	90 83       	st	Z, r25
   10980:	82 b9       	out	0x02, r24	; 2
   10982:	e0 91 ec 0d 	lds	r30, 0x0DEC	; 0x800dec <my_lcd+0x32>
   10986:	f0 91 ed 0d 	lds	r31, 0x0DED	; 0x800ded <my_lcd+0x33>
   1098a:	80 81       	ld	r24, Z
   1098c:	90 91 f6 0d 	lds	r25, 0x0DF6	; 0x800df6 <my_lcd+0x3c>
   10990:	89 23       	and	r24, r25
   10992:	80 83       	st	Z, r24
   10994:	e0 91 ec 0d 	lds	r30, 0x0DEC	; 0x800dec <my_lcd+0x32>
   10998:	f0 91 ed 0d 	lds	r31, 0x0DED	; 0x800ded <my_lcd+0x33>
   1099c:	80 81       	ld	r24, Z
   1099e:	90 91 f2 0d 	lds	r25, 0x0DF2	; 0x800df2 <my_lcd+0x38>
   109a2:	89 2b       	or	r24, r25
   109a4:	80 83       	st	Z, r24
   109a6:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x30>
   109aa:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x31>
   109ae:	80 81       	ld	r24, Z
   109b0:	90 91 f1 0d 	lds	r25, 0x0DF1	; 0x800df1 <my_lcd+0x37>
   109b4:	89 2b       	or	r24, r25
   109b6:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:501
    setReadDir();
   109b8:	81 b1       	in	r24, 0x01	; 1
   109ba:	11 b8       	out	0x01, r1	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:502
    delay(1); 
   109bc:	61 e0       	ldi	r22, 0x01	; 1
   109be:	70 e0       	ldi	r23, 0x00	; 0
   109c0:	80 e0       	ldi	r24, 0x00	; 0
   109c2:	90 e0       	ldi	r25, 0x00	; 0
   109c4:	0e 94 f5 83 	call	0x107ea	; 0x107ea <delay>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:508
	do 
	{ 
	//ead8(high);
	//ead8(low);
	//et = (high << 8) | lowc
		read16(ret);  //read 16bits
   109c8:	e0 91 ee 0d 	lds	r30, 0x0DEE	; 0x800dee <my_lcd+0x34>
   109cc:	f0 91 ef 0d 	lds	r31, 0x0DEF	; 0x800def <my_lcd+0x35>
   109d0:	80 81       	ld	r24, Z
   109d2:	90 91 f7 0d 	lds	r25, 0x0DF7	; 0x800df7 <my_lcd+0x3d>
   109d6:	89 23       	and	r24, r25
   109d8:	80 83       	st	Z, r24
   109da:	20 b1       	in	r18, 0x00	; 0
   109dc:	e0 91 ee 0d 	lds	r30, 0x0DEE	; 0x800dee <my_lcd+0x34>
   109e0:	f0 91 ef 0d 	lds	r31, 0x0DEF	; 0x800def <my_lcd+0x35>
   109e4:	90 81       	ld	r25, Z
   109e6:	80 91 f3 0d 	lds	r24, 0x0DF3	; 0x800df3 <my_lcd+0x39>
   109ea:	98 2b       	or	r25, r24
   109ec:	90 83       	st	Z, r25
   109ee:	e0 91 ee 0d 	lds	r30, 0x0DEE	; 0x800dee <my_lcd+0x34>
   109f2:	f0 91 ef 0d 	lds	r31, 0x0DEF	; 0x800def <my_lcd+0x35>
   109f6:	90 81       	ld	r25, Z
   109f8:	80 91 f7 0d 	lds	r24, 0x0DF7	; 0x800df7 <my_lcd+0x3d>
   109fc:	98 23       	and	r25, r24
   109fe:	90 83       	st	Z, r25
   10a00:	80 b1       	in	r24, 0x00	; 0
   10a02:	e0 91 ee 0d 	lds	r30, 0x0DEE	; 0x800dee <my_lcd+0x34>
   10a06:	f0 91 ef 0d 	lds	r31, 0x0DEF	; 0x800def <my_lcd+0x35>
   10a0a:	90 81       	ld	r25, Z
   10a0c:	30 91 f3 0d 	lds	r19, 0x0DF3	; 0x800df3 <my_lcd+0x39>
   10a10:	93 2b       	or	r25, r19
   10a12:	90 83       	st	Z, r25
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:509
	}while (--index >= 0);   
   10a14:	c1 30       	cpi	r28, 0x01	; 1
   10a16:	79 f0       	breq	.+30     	; 0x10a36 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.70]+0x104>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:511
//    RD_IDLE;
    CS_IDLE;
   10a18:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x2e>
   10a1c:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x2f>
   10a20:	90 81       	ld	r25, Z
   10a22:	30 91 f0 0d 	lds	r19, 0x0DF0	; 0x800df0 <my_lcd+0x36>
   10a26:	93 2b       	or	r25, r19
   10a28:	90 83       	st	Z, r25
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:512
    setWriteDir();
   10a2a:	91 b1       	in	r25, 0x01	; 1
   10a2c:	9f ef       	ldi	r25, 0xFF	; 255
   10a2e:	91 b9       	out	0x01, r25	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:514
    return ret;
}
   10a30:	92 2f       	mov	r25, r18
   10a32:	cf 91       	pop	r28
   10a34:	08 95       	ret
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:509
	{ 
	//ead8(high);
	//ead8(low);
	//et = (high << 8) | lowc
		read16(ret);  //read 16bits
	}while (--index >= 0);   
   10a36:	c0 e0       	ldi	r28, 0x00	; 0
   10a38:	c7 cf       	rjmp	.-114    	; 0x109c8 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.70]+0x96>

00010a3a <millis>:
millis():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:78
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
   10a3a:	2f b7       	in	r18, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:82

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
   10a3c:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:83
  m = timer0_millis;
   10a3e:	60 91 d4 10 	lds	r22, 0x10D4	; 0x8010d4 <timer0_millis>
   10a42:	70 91 d5 10 	lds	r23, 0x10D5	; 0x8010d5 <timer0_millis+0x1>
   10a46:	80 91 d6 10 	lds	r24, 0x10D6	; 0x8010d6 <timer0_millis+0x2>
   10a4a:	90 91 d7 10 	lds	r25, 0x10D7	; 0x8010d7 <timer0_millis+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:84
  SREG = oldSREG;
   10a4e:	2f bf       	out	0x3f, r18	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:87

  return m;
}
   10a50:	08 95       	ret

00010a52 <PubSubClient::readByte(unsigned char*) [clone .constprop.141]>:
_ZN12PubSubClient8readByteEPh.constprop.141():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:209
    }
    return true;
}

// reads a byte into result
boolean PubSubClient::readByte(uint8_t * result) {
   10a52:	cf 92       	push	r12
   10a54:	df 92       	push	r13
   10a56:	ef 92       	push	r14
   10a58:	ff 92       	push	r15
   10a5a:	cf 93       	push	r28
   10a5c:	df 93       	push	r29
   10a5e:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:210
   uint32_t previousMillis = millis();
   10a60:	0e 94 1d 85 	call	0x10a3a	; 0x10a3a <millis>
   10a64:	6b 01       	movw	r12, r22
   10a66:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:211
   while(!_client->available()) {
   10a68:	80 91 12 0e 	lds	r24, 0x0E12	; 0x800e12 <mqtt_client>
   10a6c:	90 91 13 0e 	lds	r25, 0x0E13	; 0x800e13 <mqtt_client+0x1>
   10a70:	dc 01       	movw	r26, r24
   10a72:	ed 91       	ld	r30, X+
   10a74:	fc 91       	ld	r31, X
   10a76:	00 84       	ldd	r0, Z+8	; 0x08
   10a78:	f1 85       	ldd	r31, Z+9	; 0x09
   10a7a:	e0 2d       	mov	r30, r0
   10a7c:	19 95       	eicall
   10a7e:	89 2b       	or	r24, r25
   10a80:	69 f4       	brne	.+26     	; 0x10a9c <PubSubClient::readByte(unsigned char*) [clone .constprop.141]+0x4a>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:212
     uint32_t currentMillis = millis();
   10a82:	0e 94 1d 85 	call	0x10a3a	; 0x10a3a <millis>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:213
     if(currentMillis - previousMillis >= ((int32_t) MQTT_SOCKET_TIMEOUT * 100)){
   10a86:	6c 19       	sub	r22, r12
   10a88:	7d 09       	sbc	r23, r13
   10a8a:	8e 09       	sbc	r24, r14
   10a8c:	9f 09       	sbc	r25, r15
   10a8e:	64 36       	cpi	r22, 0x64	; 100
   10a90:	71 05       	cpc	r23, r1
   10a92:	81 05       	cpc	r24, r1
   10a94:	91 05       	cpc	r25, r1
   10a96:	40 f3       	brcs	.-48     	; 0x10a68 <PubSubClient::readByte(unsigned char*) [clone .constprop.141]+0x16>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:214
       return false;
   10a98:	80 e0       	ldi	r24, 0x00	; 0
   10a9a:	0d c0       	rjmp	.+26     	; 0x10ab6 <PubSubClient::readByte(unsigned char*) [clone .constprop.141]+0x64>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:217
     }
   }
   *result = _client->read();
   10a9c:	80 91 12 0e 	lds	r24, 0x0E12	; 0x800e12 <mqtt_client>
   10aa0:	90 91 13 0e 	lds	r25, 0x0E13	; 0x800e13 <mqtt_client+0x1>
   10aa4:	dc 01       	movw	r26, r24
   10aa6:	ed 91       	ld	r30, X+
   10aa8:	fc 91       	ld	r31, X
   10aaa:	02 84       	ldd	r0, Z+10	; 0x0a
   10aac:	f3 85       	ldd	r31, Z+11	; 0x0b
   10aae:	e0 2d       	mov	r30, r0
   10ab0:	19 95       	eicall
   10ab2:	88 83       	st	Y, r24
   10ab4:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:219
   return true;
}
   10ab6:	df 91       	pop	r29
   10ab8:	cf 91       	pop	r28
   10aba:	ff 90       	pop	r15
   10abc:	ef 90       	pop	r14
   10abe:	df 90       	pop	r13
   10ac0:	cf 90       	pop	r12
   10ac2:	08 95       	ret

00010ac4 <PubSubClient::readPacket(unsigned char*) [clone .constprop.139]>:
_ZN12PubSubClient10readPacketEPh.constprop.139():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:232
    return true;
  }
  return false;
}

uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
   10ac4:	3f 92       	push	r3
   10ac6:	4f 92       	push	r4
   10ac8:	5f 92       	push	r5
   10aca:	6f 92       	push	r6
   10acc:	7f 92       	push	r7
   10ace:	8f 92       	push	r8
   10ad0:	9f 92       	push	r9
   10ad2:	af 92       	push	r10
   10ad4:	bf 92       	push	r11
   10ad6:	cf 92       	push	r12
   10ad8:	df 92       	push	r13
   10ada:	ef 92       	push	r14
   10adc:	ff 92       	push	r15
   10ade:	0f 93       	push	r16
   10ae0:	1f 93       	push	r17
   10ae2:	cf 93       	push	r28
   10ae4:	df 93       	push	r29
   10ae6:	1f 92       	push	r1
   10ae8:	cd b7       	in	r28, 0x3d	; 61
   10aea:	de b7       	in	r29, 0x3e	; 62
   10aec:	5c 01       	movw	r10, r24
readByte():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:225

// reads a byte into result[*index] and increments index
boolean PubSubClient::readByte(uint8_t * result, uint16_t * index){
  uint16_t current_index = *index;
  uint8_t * write_address = &(result[current_index]);
  if(readByte(write_address)){
   10aee:	84 e1       	ldi	r24, 0x14	; 20
   10af0:	9e e0       	ldi	r25, 0x0E	; 14
   10af2:	0e 94 29 85 	call	0x10a52	; 0x10a52 <PubSubClient::readByte(unsigned char*) [clone .constprop.141]>
   10af6:	81 11       	cpse	r24, r1
   10af8:	16 c0       	rjmp	.+44     	; 0x10b26 <PubSubClient::readPacket(unsigned char*) [clone .constprop.139]+0x62>
_ZN12PubSubClient10readPacketEPh.constprop.139():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:234
  return false;
}

uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    if(!readByte(buffer, &len)) return 0;
   10afa:	10 e0       	ldi	r17, 0x00	; 0
   10afc:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:280
    if (!this->stream && len > MQTT_MAX_PACKET_SIZE) {
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   10afe:	c8 01       	movw	r24, r16
   10b00:	0f 90       	pop	r0
   10b02:	df 91       	pop	r29
   10b04:	cf 91       	pop	r28
   10b06:	1f 91       	pop	r17
   10b08:	0f 91       	pop	r16
   10b0a:	ff 90       	pop	r15
   10b0c:	ef 90       	pop	r14
   10b0e:	df 90       	pop	r13
   10b10:	cf 90       	pop	r12
   10b12:	bf 90       	pop	r11
   10b14:	af 90       	pop	r10
   10b16:	9f 90       	pop	r9
   10b18:	8f 90       	pop	r8
   10b1a:	7f 90       	pop	r7
   10b1c:	6f 90       	pop	r6
   10b1e:	5f 90       	pop	r5
   10b20:	4f 90       	pop	r4
   10b22:	3f 90       	pop	r3
   10b24:	08 95       	ret
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:235
}

uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    if(!readByte(buffer, &len)) return 0;
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   10b26:	30 90 14 0e 	lds	r3, 0x0E14	; 0x800e14 <mqtt_client+0x2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:238
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
   10b2a:	19 82       	std	Y+1, r1	; 0x01
   10b2c:	35 e1       	ldi	r19, 0x15	; 21
   10b2e:	83 2e       	mov	r8, r19
   10b30:	3e e0       	ldi	r19, 0x0E	; 14
   10b32:	93 2e       	mov	r9, r19
readByte():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:226
// reads a byte into result[*index] and increments index
boolean PubSubClient::readByte(uint8_t * result, uint16_t * index){
  uint16_t current_index = *index;
  uint8_t * write_address = &(result[current_index]);
  if(readByte(write_address)){
    *index = current_index + 1;
   10b34:	ee 24       	eor	r14, r14
   10b36:	e3 94       	inc	r14
   10b38:	f1 2c       	mov	r15, r1
_ZN12PubSubClient10readPacketEPh.constprop.139():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:237
uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    if(!readByte(buffer, &len)) return 0;
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
   10b3a:	d1 2c       	mov	r13, r1
   10b3c:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:236

uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    if(!readByte(buffer, &len)) return 0;
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
   10b3e:	41 2c       	mov	r4, r1
   10b40:	51 2c       	mov	r5, r1
   10b42:	32 01       	movw	r6, r4
   10b44:	43 94       	inc	r4
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:243
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        if(!readByte(&digit)) return 0;
   10b46:	ce 01       	movw	r24, r28
   10b48:	01 96       	adiw	r24, 0x01	; 1
   10b4a:	0e 94 29 85 	call	0x10a52	; 0x10a52 <PubSubClient::readByte(unsigned char*) [clone .constprop.141]>
   10b4e:	88 23       	and	r24, r24
   10b50:	a1 f2       	breq	.-88     	; 0x10afa <PubSubClient::readPacket(unsigned char*) [clone .constprop.139]+0x36>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:244
        buffer[len++] = digit;
   10b52:	87 01       	movw	r16, r14
   10b54:	0f 5f       	subi	r16, 0xFF	; 255
   10b56:	1f 4f       	sbci	r17, 0xFF	; 255
   10b58:	89 81       	ldd	r24, Y+1	; 0x01
   10b5a:	d4 01       	movw	r26, r8
   10b5c:	8d 93       	st	X+, r24
   10b5e:	4d 01       	movw	r8, r26
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:245
        length += (digit & 127) * multiplier;
   10b60:	28 2f       	mov	r18, r24
   10b62:	2f 77       	andi	r18, 0x7F	; 127
   10b64:	30 e0       	ldi	r19, 0x00	; 0
   10b66:	24 9d       	mul	r18, r4
   10b68:	a0 01       	movw	r20, r0
   10b6a:	25 9d       	mul	r18, r5
   10b6c:	50 0d       	add	r21, r0
   10b6e:	34 9d       	mul	r19, r4
   10b70:	50 0d       	add	r21, r0
   10b72:	11 24       	eor	r1, r1
   10b74:	c4 0e       	add	r12, r20
   10b76:	d5 1e       	adc	r13, r21
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:246
        multiplier *= 128;
   10b78:	27 e0       	ldi	r18, 0x07	; 7
   10b7a:	44 0c       	add	r4, r4
   10b7c:	55 1c       	adc	r5, r5
   10b7e:	66 1c       	adc	r6, r6
   10b80:	77 1c       	adc	r7, r7
   10b82:	2a 95       	dec	r18
   10b84:	d1 f7       	brne	.-12     	; 0x10b7a <PubSubClient::readPacket(unsigned char*) [clone .constprop.139]+0xb6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:247
    } while ((digit & 128) != 0);
   10b86:	87 fd       	sbrc	r24, 7
   10b88:	31 c0       	rjmp	.+98     	; 0x10bec <PubSubClient::readPacket(unsigned char*) [clone .constprop.139]+0x128>
   10b8a:	b3 2d       	mov	r27, r3
   10b8c:	b0 7f       	andi	r27, 0xF0	; 240
   10b8e:	3b 2e       	mov	r3, r27
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:248
    *lengthLength = len-1;
   10b90:	8f ef       	ldi	r24, 0xFF	; 255
   10b92:	80 0f       	add	r24, r16
   10b94:	f5 01       	movw	r30, r10
   10b96:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:250

    if (isPublish) {
   10b98:	f0 e3       	ldi	r31, 0x30	; 48
   10b9a:	bf 13       	cpse	r27, r31
   10b9c:	29 c0       	rjmp	.+82     	; 0x10bf0 <PubSubClient::readPacket(unsigned char*) [clone .constprop.139]+0x12c>
readByte():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:225

// reads a byte into result[*index] and increments index
boolean PubSubClient::readByte(uint8_t * result, uint16_t * index){
  uint16_t current_index = *index;
  uint8_t * write_address = &(result[current_index]);
  if(readByte(write_address)){
   10b9e:	c8 01       	movw	r24, r16
   10ba0:	8c 5e       	subi	r24, 0xEC	; 236
   10ba2:	91 4f       	sbci	r25, 0xF1	; 241
   10ba4:	0e 94 29 85 	call	0x10a52	; 0x10a52 <PubSubClient::readByte(unsigned char*) [clone .constprop.141]>
   10ba8:	88 23       	and	r24, r24
   10baa:	09 f4       	brne	.+2      	; 0x10bae <PubSubClient::readPacket(unsigned char*) [clone .constprop.139]+0xea>
   10bac:	a6 cf       	rjmp	.-180    	; 0x10afa <PubSubClient::readPacket(unsigned char*) [clone .constprop.139]+0x36>
   10bae:	c7 01       	movw	r24, r14
   10bb0:	8a 5e       	subi	r24, 0xEA	; 234
   10bb2:	91 4f       	sbci	r25, 0xF1	; 241
   10bb4:	0e 94 29 85 	call	0x10a52	; 0x10a52 <PubSubClient::readByte(unsigned char*) [clone .constprop.141]>
   10bb8:	88 23       	and	r24, r24
   10bba:	09 f4       	brne	.+2      	; 0x10bbe <PubSubClient::readPacket(unsigned char*) [clone .constprop.139]+0xfa>
   10bbc:	9e cf       	rjmp	.-196    	; 0x10afa <PubSubClient::readPacket(unsigned char*) [clone .constprop.139]+0x36>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:226
    *index = current_index + 1;
   10bbe:	0e 5f       	subi	r16, 0xFE	; 254
   10bc0:	1f 4f       	sbci	r17, 0xFF	; 255
_ZN12PubSubClient10readPacketEPh.constprop.139():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:254

    if (isPublish) {
        // Read in topic length to calculate bytes to skip over for Stream writing
        if(!readByte(buffer, &len)) return 0;
        if(!readByte(buffer, &len)) return 0;
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
   10bc2:	d5 01       	movw	r26, r10
   10bc4:	ec 91       	ld	r30, X
   10bc6:	f0 e0       	ldi	r31, 0x00	; 0
   10bc8:	ee 5e       	subi	r30, 0xEE	; 238
   10bca:	f1 4f       	sbci	r31, 0xF1	; 241
   10bcc:	e3 80       	ldd	r14, Z+3	; 0x03
   10bce:	f1 2c       	mov	r15, r1
   10bd0:	fe 2c       	mov	r15, r14
   10bd2:	ee 24       	eor	r14, r14
   10bd4:	84 81       	ldd	r24, Z+4	; 0x04
   10bd6:	e8 0e       	add	r14, r24
   10bd8:	f1 1c       	adc	r15, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:256
        start = 2;
        if (buffer[0]&MQTTQOS1) {
   10bda:	80 91 14 0e 	lds	r24, 0x0E14	; 0x800e14 <mqtt_client+0x2>
   10bde:	81 ff       	sbrs	r24, 1
   10be0:	03 c0       	rjmp	.+6      	; 0x10be8 <PubSubClient::readPacket(unsigned char*) [clone .constprop.139]+0x124>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:258
            // skip message id
            skip += 2;
   10be2:	b2 e0       	ldi	r27, 0x02	; 2
   10be4:	eb 0e       	add	r14, r27
   10be6:	f1 1c       	adc	r15, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:255
    if (isPublish) {
        // Read in topic length to calculate bytes to skip over for Stream writing
        if(!readByte(buffer, &len)) return 0;
        if(!readByte(buffer, &len)) return 0;
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   10be8:	92 e0       	ldi	r25, 0x02	; 2
   10bea:	05 c0       	rjmp	.+10     	; 0x10bf6 <PubSubClient::readPacket(unsigned char*) [clone .constprop.139]+0x132>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:244
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        if(!readByte(&digit)) return 0;
        buffer[len++] = digit;
   10bec:	78 01       	movw	r14, r16
   10bee:	ab cf       	rjmp	.-170    	; 0x10b46 <PubSubClient::readPacket(unsigned char*) [clone .constprop.139]+0x82>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:240
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;
   10bf0:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:239
    if(!readByte(buffer, &len)) return 0;
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
   10bf2:	f1 2c       	mov	r15, r1
   10bf4:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:262
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   10bf6:	69 2e       	mov	r6, r25
   10bf8:	71 2c       	mov	r7, r1
   10bfa:	60 1a       	sub	r6, r16
   10bfc:	71 0a       	sbc	r7, r17
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:265
        if(!readByte(&digit)) return 0;
        if (this->stream) {
            if (isPublish && len-*lengthLength-2>skip) {
   10bfe:	8e ef       	ldi	r24, 0xFE	; 254
   10c00:	88 2e       	mov	r8, r24
   10c02:	99 24       	eor	r9, r9
   10c04:	9a 94       	dec	r9
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:262
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   10c06:	c3 01       	movw	r24, r6
   10c08:	80 0f       	add	r24, r16
   10c0a:	91 1f       	adc	r25, r17
   10c0c:	8c 15       	cp	r24, r12
   10c0e:	9d 05       	cpc	r25, r13
   10c10:	78 f5       	brcc	.+94     	; 0x10c70 <PubSubClient::readPacket(unsigned char*) [clone .constprop.139]+0x1ac>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:263
        if(!readByte(&digit)) return 0;
   10c12:	ce 01       	movw	r24, r28
   10c14:	01 96       	adiw	r24, 0x01	; 1
   10c16:	0e 94 29 85 	call	0x10a52	; 0x10a52 <PubSubClient::readByte(unsigned char*) [clone .constprop.141]>
   10c1a:	88 23       	and	r24, r24
   10c1c:	09 f4       	brne	.+2      	; 0x10c20 <PubSubClient::readPacket(unsigned char*) [clone .constprop.139]+0x15c>
   10c1e:	6d cf       	rjmp	.-294    	; 0x10afa <PubSubClient::readPacket(unsigned char*) [clone .constprop.139]+0x36>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:264
        if (this->stream) {
   10c20:	80 91 2b 10 	lds	r24, 0x102B	; 0x80102b <mqtt_client+0x219>
   10c24:	90 91 2c 10 	lds	r25, 0x102C	; 0x80102c <mqtt_client+0x21a>
   10c28:	00 97       	sbiw	r24, 0x00	; 0
   10c2a:	b1 f0       	breq	.+44     	; 0x10c58 <PubSubClient::readPacket(unsigned char*) [clone .constprop.139]+0x194>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:265
            if (isPublish && len-*lengthLength-2>skip) {
   10c2c:	e0 e3       	ldi	r30, 0x30	; 48
   10c2e:	3e 12       	cpse	r3, r30
   10c30:	13 c0       	rjmp	.+38     	; 0x10c58 <PubSubClient::readPacket(unsigned char*) [clone .constprop.139]+0x194>
   10c32:	d5 01       	movw	r26, r10
   10c34:	2c 91       	ld	r18, X
   10c36:	f4 01       	movw	r30, r8
   10c38:	e2 1b       	sub	r30, r18
   10c3a:	f1 09       	sbc	r31, r1
   10c3c:	9f 01       	movw	r18, r30
   10c3e:	20 0f       	add	r18, r16
   10c40:	31 1f       	adc	r19, r17
   10c42:	e2 16       	cp	r14, r18
   10c44:	f3 06       	cpc	r15, r19
   10c46:	40 f4       	brcc	.+16     	; 0x10c58 <PubSubClient::readPacket(unsigned char*) [clone .constprop.139]+0x194>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:266
                this->stream->write(digit);
   10c48:	dc 01       	movw	r26, r24
   10c4a:	ed 91       	ld	r30, X+
   10c4c:	fc 91       	ld	r31, X
   10c4e:	01 90       	ld	r0, Z+
   10c50:	f0 81       	ld	r31, Z
   10c52:	e0 2d       	mov	r30, r0
   10c54:	69 81       	ldd	r22, Y+1	; 0x01
   10c56:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:269
            }
        }
        if (len < MQTT_MAX_PACKET_SIZE) {
   10c58:	01 15       	cp	r16, r1
   10c5a:	b2 e0       	ldi	r27, 0x02	; 2
   10c5c:	1b 07       	cpc	r17, r27
   10c5e:	28 f4       	brcc	.+10     	; 0x10c6a <PubSubClient::readPacket(unsigned char*) [clone .constprop.139]+0x1a6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:270
            buffer[len] = digit;
   10c60:	89 81       	ldd	r24, Y+1	; 0x01
   10c62:	f8 01       	movw	r30, r16
   10c64:	ee 5e       	subi	r30, 0xEE	; 238
   10c66:	f1 4f       	sbci	r31, 0xF1	; 241
   10c68:	82 83       	std	Z+2, r24	; 0x02
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:272
        }
        len++;
   10c6a:	0f 5f       	subi	r16, 0xFF	; 255
   10c6c:	1f 4f       	sbci	r17, 0xFF	; 255
   10c6e:	cb cf       	rjmp	.-106    	; 0x10c06 <PubSubClient::readPacket(unsigned char*) [clone .constprop.139]+0x142>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:275
    }

    if (!this->stream && len > MQTT_MAX_PACKET_SIZE) {
   10c70:	80 91 2b 10 	lds	r24, 0x102B	; 0x80102b <mqtt_client+0x219>
   10c74:	90 91 2c 10 	lds	r25, 0x102C	; 0x80102c <mqtt_client+0x21a>
   10c78:	89 2b       	or	r24, r25
   10c7a:	09 f0       	breq	.+2      	; 0x10c7e <PubSubClient::readPacket(unsigned char*) [clone .constprop.139]+0x1ba>
   10c7c:	40 cf       	rjmp	.-384    	; 0x10afe <PubSubClient::readPacket(unsigned char*) [clone .constprop.139]+0x3a>
   10c7e:	01 30       	cpi	r16, 0x01	; 1
   10c80:	e2 e0       	ldi	r30, 0x02	; 2
   10c82:	1e 07       	cpc	r17, r30
   10c84:	08 f0       	brcs	.+2      	; 0x10c88 <PubSubClient::readPacket(unsigned char*) [clone .constprop.139]+0x1c4>
   10c86:	39 cf       	rjmp	.-398    	; 0x10afa <PubSubClient::readPacket(unsigned char*) [clone .constprop.139]+0x36>
   10c88:	3a cf       	rjmp	.-396    	; 0x10afe <PubSubClient::readPacket(unsigned char*) [clone .constprop.139]+0x3a>

00010c8a <__vector_23>:
__vector_23():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:57
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
   10c8a:	1f 92       	push	r1
   10c8c:	0f 92       	push	r0
   10c8e:	0f b6       	in	r0, 0x3f	; 63
   10c90:	0f 92       	push	r0
   10c92:	11 24       	eor	r1, r1
   10c94:	2f 93       	push	r18
   10c96:	3f 93       	push	r19
   10c98:	8f 93       	push	r24
   10c9a:	9f 93       	push	r25
   10c9c:	af 93       	push	r26
   10c9e:	bf 93       	push	r27
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:60
  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
   10ca0:	80 91 d4 10 	lds	r24, 0x10D4	; 0x8010d4 <timer0_millis>
   10ca4:	90 91 d5 10 	lds	r25, 0x10D5	; 0x8010d5 <timer0_millis+0x1>
   10ca8:	a0 91 d6 10 	lds	r26, 0x10D6	; 0x8010d6 <timer0_millis+0x2>
   10cac:	b0 91 d7 10 	lds	r27, 0x10D7	; 0x8010d7 <timer0_millis+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:61
  unsigned char f = timer0_fract;
   10cb0:	30 91 d3 10 	lds	r19, 0x10D3	; 0x8010d3 <timer0_fract>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:64

  m += MILLIS_INC;
  f += FRACT_INC;
   10cb4:	23 e0       	ldi	r18, 0x03	; 3
   10cb6:	23 0f       	add	r18, r19
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:65
  if (f >= FRACT_MAX) {
   10cb8:	2d 37       	cpi	r18, 0x7D	; 125
   10cba:	58 f5       	brcc	.+86     	; 0x10d12 <__vector_23+0x88>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:63
  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
  unsigned char f = timer0_fract;

  m += MILLIS_INC;
   10cbc:	01 96       	adiw	r24, 0x01	; 1
   10cbe:	a1 1d       	adc	r26, r1
   10cc0:	b1 1d       	adc	r27, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:70
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += 1;
  }

  timer0_fract = f;
   10cc2:	20 93 d3 10 	sts	0x10D3, r18	; 0x8010d3 <timer0_fract>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:71
  timer0_millis = m;
   10cc6:	80 93 d4 10 	sts	0x10D4, r24	; 0x8010d4 <timer0_millis>
   10cca:	90 93 d5 10 	sts	0x10D5, r25	; 0x8010d5 <timer0_millis+0x1>
   10cce:	a0 93 d6 10 	sts	0x10D6, r26	; 0x8010d6 <timer0_millis+0x2>
   10cd2:	b0 93 d7 10 	sts	0x10D7, r27	; 0x8010d7 <timer0_millis+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:72
  timer0_overflow_count++;
   10cd6:	80 91 d8 10 	lds	r24, 0x10D8	; 0x8010d8 <timer0_overflow_count>
   10cda:	90 91 d9 10 	lds	r25, 0x10D9	; 0x8010d9 <timer0_overflow_count+0x1>
   10cde:	a0 91 da 10 	lds	r26, 0x10DA	; 0x8010da <timer0_overflow_count+0x2>
   10ce2:	b0 91 db 10 	lds	r27, 0x10DB	; 0x8010db <timer0_overflow_count+0x3>
   10ce6:	01 96       	adiw	r24, 0x01	; 1
   10ce8:	a1 1d       	adc	r26, r1
   10cea:	b1 1d       	adc	r27, r1
   10cec:	80 93 d8 10 	sts	0x10D8, r24	; 0x8010d8 <timer0_overflow_count>
   10cf0:	90 93 d9 10 	sts	0x10D9, r25	; 0x8010d9 <timer0_overflow_count+0x1>
   10cf4:	a0 93 da 10 	sts	0x10DA, r26	; 0x8010da <timer0_overflow_count+0x2>
   10cf8:	b0 93 db 10 	sts	0x10DB, r27	; 0x8010db <timer0_overflow_count+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:73
}
   10cfc:	bf 91       	pop	r27
   10cfe:	af 91       	pop	r26
   10d00:	9f 91       	pop	r25
   10d02:	8f 91       	pop	r24
   10d04:	3f 91       	pop	r19
   10d06:	2f 91       	pop	r18
   10d08:	0f 90       	pop	r0
   10d0a:	0f be       	out	0x3f, r0	; 63
   10d0c:	0f 90       	pop	r0
   10d0e:	1f 90       	pop	r1
   10d10:	18 95       	reti
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:66
  unsigned char f = timer0_fract;

  m += MILLIS_INC;
  f += FRACT_INC;
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
   10d12:	26 e8       	ldi	r18, 0x86	; 134
   10d14:	23 0f       	add	r18, r19
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:67
    m += 1;
   10d16:	02 96       	adiw	r24, 0x02	; 2
   10d18:	a1 1d       	adc	r26, r1
   10d1a:	b1 1d       	adc	r27, r1
   10d1c:	d2 cf       	rjmp	.-92     	; 0x10cc2 <__vector_23+0x38>

00010d1e <__vector_26>:
__vector_26():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
   10d1e:	1f 92       	push	r1
   10d20:	0f 92       	push	r0
   10d22:	0f b6       	in	r0, 0x3f	; 63
   10d24:	0f 92       	push	r0
   10d26:	11 24       	eor	r1, r1
   10d28:	0b b6       	in	r0, 0x3b	; 59
   10d2a:	0f 92       	push	r0
   10d2c:	2f 93       	push	r18
   10d2e:	3f 93       	push	r19
   10d30:	4f 93       	push	r20
   10d32:	5f 93       	push	r21
   10d34:	6f 93       	push	r22
   10d36:	7f 93       	push	r23
   10d38:	8f 93       	push	r24
   10d3a:	9f 93       	push	r25
   10d3c:	af 93       	push	r26
   10d3e:	bf 93       	push	r27
   10d40:	ef 93       	push	r30
   10d42:	ff 93       	push	r31
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
   10d44:	8d e6       	ldi	r24, 0x6D	; 109
   10d46:	9b e0       	ldi	r25, 0x0B	; 11
   10d48:	0e 94 af 77 	call	0xef5e	; 0xef5e <HardwareSerial::_tx_udr_empty_irq()>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial0.cpp:65
}
   10d4c:	ff 91       	pop	r31
   10d4e:	ef 91       	pop	r30
   10d50:	bf 91       	pop	r27
   10d52:	af 91       	pop	r26
   10d54:	9f 91       	pop	r25
   10d56:	8f 91       	pop	r24
   10d58:	7f 91       	pop	r23
   10d5a:	6f 91       	pop	r22
   10d5c:	5f 91       	pop	r21
   10d5e:	4f 91       	pop	r20
   10d60:	3f 91       	pop	r19
   10d62:	2f 91       	pop	r18
   10d64:	0f 90       	pop	r0
   10d66:	0b be       	out	0x3b, r0	; 59
   10d68:	0f 90       	pop	r0
   10d6a:	0f be       	out	0x3f, r0	; 63
   10d6c:	0f 90       	pop	r0
   10d6e:	1f 90       	pop	r1
   10d70:	18 95       	reti

00010d72 <__vector_25>:
__vector_25():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
   10d72:	1f 92       	push	r1
   10d74:	0f 92       	push	r0
   10d76:	0f b6       	in	r0, 0x3f	; 63
   10d78:	0f 92       	push	r0
   10d7a:	11 24       	eor	r1, r1
   10d7c:	0b b6       	in	r0, 0x3b	; 59
   10d7e:	0f 92       	push	r0
   10d80:	2f 93       	push	r18
   10d82:	8f 93       	push	r24
   10d84:	9f 93       	push	r25
   10d86:	ef 93       	push	r30
   10d88:	ff 93       	push	r31
_rx_complete_irq():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
   10d8a:	e0 91 7d 0b 	lds	r30, 0x0B7D	; 0x800b7d <Serial+0x10>
   10d8e:	f0 91 7e 0b 	lds	r31, 0x0B7E	; 0x800b7e <Serial+0x11>
   10d92:	80 81       	ld	r24, Z
   10d94:	e0 91 83 0b 	lds	r30, 0x0B83	; 0x800b83 <Serial+0x16>
   10d98:	f0 91 84 0b 	lds	r31, 0x0B84	; 0x800b84 <Serial+0x17>
   10d9c:	82 fd       	sbrc	r24, 2
   10d9e:	1d c0       	rjmp	.+58     	; 0x10dda <__vector_25+0x68>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
   10da0:	90 81       	ld	r25, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
   10da2:	80 91 86 0b 	lds	r24, 0x0B86	; 0x800b86 <Serial+0x19>
   10da6:	8f 5f       	subi	r24, 0xFF	; 255
   10da8:	8f 73       	andi	r24, 0x3F	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
   10daa:	20 91 87 0b 	lds	r18, 0x0B87	; 0x800b87 <Serial+0x1a>
   10dae:	82 17       	cp	r24, r18
   10db0:	41 f0       	breq	.+16     	; 0x10dc2 <__vector_25+0x50>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
   10db2:	e0 91 86 0b 	lds	r30, 0x0B86	; 0x800b86 <Serial+0x19>
   10db6:	f0 e0       	ldi	r31, 0x00	; 0
   10db8:	e3 59       	subi	r30, 0x93	; 147
   10dba:	f4 4f       	sbci	r31, 0xF4	; 244
   10dbc:	95 8f       	std	Z+29, r25	; 0x1d
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial_private.h:115
      _rx_buffer_head = i;
   10dbe:	80 93 86 0b 	sts	0x0B86, r24	; 0x800b86 <Serial+0x19>
__vector_25():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
   10dc2:	ff 91       	pop	r31
   10dc4:	ef 91       	pop	r30
   10dc6:	9f 91       	pop	r25
   10dc8:	8f 91       	pop	r24
   10dca:	2f 91       	pop	r18
   10dcc:	0f 90       	pop	r0
   10dce:	0b be       	out	0x3b, r0	; 59
   10dd0:	0f 90       	pop	r0
   10dd2:	0f be       	out	0x3f, r0	; 63
   10dd4:	0f 90       	pop	r0
   10dd6:	1f 90       	pop	r1
   10dd8:	18 95       	reti
_rx_complete_irq():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
   10dda:	80 81       	ld	r24, Z
   10ddc:	f2 cf       	rjmp	.-28     	; 0x10dc2 <__vector_25+0x50>

00010dde <__vector_29>:
__vector_29():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:95
{
  return a2d_index;
}

ISR(ADC_vect)
{
   10dde:	1f 92       	push	r1
   10de0:	0f 92       	push	r0
   10de2:	0f b6       	in	r0, 0x3f	; 63
   10de4:	0f 92       	push	r0
   10de6:	11 24       	eor	r1, r1
   10de8:	0b b6       	in	r0, 0x3b	; 59
   10dea:	0f 92       	push	r0
   10dec:	2f 93       	push	r18
   10dee:	3f 93       	push	r19
   10df0:	4f 93       	push	r20
   10df2:	5f 93       	push	r21
   10df4:	6f 93       	push	r22
   10df6:	7f 93       	push	r23
   10df8:	8f 93       	push	r24
   10dfa:	9f 93       	push	r25
   10dfc:	af 93       	push	r26
   10dfe:	bf 93       	push	r27
   10e00:	cf 93       	push	r28
   10e02:	ef 93       	push	r30
   10e04:	ff 93       	push	r31
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:96
  uint8_t back = SREG;
   10e06:	cf b7       	in	r28, 0x3f	; 63
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:97
  a2d_data = ADCL + (ADCH<<8);
   10e08:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
   10e0c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:98
  a2d_interupt_func(a2d_input, a2d_data);
   10e10:	e0 91 bc 09 	lds	r30, 0x09BC	; 0x8009bc <_ZL17a2d_interupt_func.lto_priv.227>
   10e14:	f0 91 bd 09 	lds	r31, 0x09BD	; 0x8009bd <_ZL17a2d_interupt_func.lto_priv.227+0x1>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:97
}

ISR(ADC_vect)
{
  uint8_t back = SREG;
  a2d_data = ADCL + (ADCH<<8);
   10e18:	68 2f       	mov	r22, r24
   10e1a:	70 e0       	ldi	r23, 0x00	; 0
   10e1c:	76 2f       	mov	r23, r22
   10e1e:	66 27       	eor	r22, r22
   10e20:	69 0f       	add	r22, r25
   10e22:	71 1d       	adc	r23, r1
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:98
  a2d_interupt_func(a2d_input, a2d_data);
   10e24:	80 91 bb 09 	lds	r24, 0x09BB	; 0x8009bb <a2d_input>
   10e28:	19 95       	eicall
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:99
  SREG = back;
   10e2a:	cf bf       	out	0x3f, r28	; 63
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:100
}
   10e2c:	ff 91       	pop	r31
   10e2e:	ef 91       	pop	r30
   10e30:	cf 91       	pop	r28
   10e32:	bf 91       	pop	r27
   10e34:	af 91       	pop	r26
   10e36:	9f 91       	pop	r25
   10e38:	8f 91       	pop	r24
   10e3a:	7f 91       	pop	r23
   10e3c:	6f 91       	pop	r22
   10e3e:	5f 91       	pop	r21
   10e40:	4f 91       	pop	r20
   10e42:	3f 91       	pop	r19
   10e44:	2f 91       	pop	r18
   10e46:	0f 90       	pop	r0
   10e48:	0b be       	out	0x3b, r0	; 59
   10e4a:	0f 90       	pop	r0
   10e4c:	0f be       	out	0x3f, r0	; 63
   10e4e:	0f 90       	pop	r0
   10e50:	1f 90       	pop	r1
   10e52:	18 95       	reti

00010e54 <a2d_start_first(unsigned char)>:
_Z15a2d_start_firsth():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:58
}


void a2d_start_first(uint8_t vstup)
{
ADMUX = ((a2d_reference & 3) << 6) + (vstup & 7);
   10e54:	20 91 ba 09 	lds	r18, 0x09BA	; 0x8009ba <a2d_reference>
   10e58:	90 e4       	ldi	r25, 0x40	; 64
   10e5a:	29 9f       	mul	r18, r25
   10e5c:	90 01       	movw	r18, r0
   10e5e:	11 24       	eor	r1, r1
   10e60:	28 0f       	add	r18, r24
   10e62:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:59
a2d_input = vstup;
   10e66:	80 93 bb 09 	sts	0x09BB, r24	; 0x8009bb <a2d_input>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:60
sbi(ADCSRA, ADSC);
   10e6a:	ea e7       	ldi	r30, 0x7A	; 122
   10e6c:	f0 e0       	ldi	r31, 0x00	; 0
   10e6e:	80 81       	ld	r24, Z
   10e70:	80 64       	ori	r24, 0x40	; 64
   10e72:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:61
}
   10e74:	08 95       	ret

00010e76 <NTPClient::getEpochTime() const>:
_ZNK9NTPClient12getEpochTimeEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:105
    return this->forceUpdate();
  }
  return true;
}

unsigned long NTPClient::getEpochTime() const {
   10e76:	cf 92       	push	r12
   10e78:	df 92       	push	r13
   10e7a:	ef 92       	push	r14
   10e7c:	ff 92       	push	r15
   10e7e:	0f 93       	push	r16
   10e80:	1f 93       	push	r17
   10e82:	cf 93       	push	r28
   10e84:	df 93       	push	r29
   10e86:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:106
  return this->_timeOffset + // User offset
   10e88:	cf 80       	ldd	r12, Y+7	; 0x07
   10e8a:	d8 84       	ldd	r13, Y+8	; 0x08
   10e8c:	e9 84       	ldd	r14, Y+9	; 0x09
   10e8e:	fa 84       	ldd	r15, Y+10	; 0x0a
   10e90:	8f 85       	ldd	r24, Y+15	; 0x0f
   10e92:	98 89       	ldd	r25, Y+16	; 0x10
   10e94:	a9 89       	ldd	r26, Y+17	; 0x11
   10e96:	ba 89       	ldd	r27, Y+18	; 0x12
   10e98:	c8 0e       	add	r12, r24
   10e9a:	d9 1e       	adc	r13, r25
   10e9c:	ea 1e       	adc	r14, r26
   10e9e:	fb 1e       	adc	r15, r27
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:108
         this->_currentEpoc + // Epoc returned by the NTP server
         ((millis() - this->_lastUpdate) / 1000); // Time since last update
   10ea0:	0e 94 1d 85 	call	0x10a3a	; 0x10a3a <millis>
   10ea4:	0b 89       	ldd	r16, Y+19	; 0x13
   10ea6:	1c 89       	ldd	r17, Y+20	; 0x14
   10ea8:	2d 89       	ldd	r18, Y+21	; 0x15
   10eaa:	3e 89       	ldd	r19, Y+22	; 0x16
   10eac:	60 1b       	sub	r22, r16
   10eae:	71 0b       	sbc	r23, r17
   10eb0:	82 0b       	sbc	r24, r18
   10eb2:	93 0b       	sbc	r25, r19
   10eb4:	28 ee       	ldi	r18, 0xE8	; 232
   10eb6:	33 e0       	ldi	r19, 0x03	; 3
   10eb8:	40 e0       	ldi	r20, 0x00	; 0
   10eba:	50 e0       	ldi	r21, 0x00	; 0
   10ebc:	0e 94 d9 ac 	call	0x159b2	; 0x159b2 <__udivmodsi4>
   10ec0:	ca 01       	movw	r24, r20
   10ec2:	b9 01       	movw	r22, r18
   10ec4:	6c 0d       	add	r22, r12
   10ec6:	7d 1d       	adc	r23, r13
   10ec8:	8e 1d       	adc	r24, r14
   10eca:	9f 1d       	adc	r25, r15
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:109
}
   10ecc:	df 91       	pop	r29
   10ece:	cf 91       	pop	r28
   10ed0:	1f 91       	pop	r17
   10ed2:	0f 91       	pop	r16
   10ed4:	ff 90       	pop	r15
   10ed6:	ef 90       	pop	r14
   10ed8:	df 90       	pop	r13
   10eda:	cf 90       	pop	r12
   10edc:	08 95       	ret

00010ede <NTPClient::getYear() const>:
_ZNK9NTPClient7getYearEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:111

int NTPClient::getYear() const {
   10ede:	cf 93       	push	r28
   10ee0:	df 93       	push	r29
   10ee2:	00 d0       	rcall	.+0      	; 0x10ee4 <NTPClient::getYear() const+0x6>
   10ee4:	1f 92       	push	r1
   10ee6:	cd b7       	in	r28, 0x3d	; 61
   10ee8:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:112
  time_t rawtime = this->getEpochTime();
   10eea:	0e 94 3b 87 	call	0x10e76	; 0x10e76 <NTPClient::getEpochTime() const>
   10eee:	69 83       	std	Y+1, r22	; 0x01
   10ef0:	7a 83       	std	Y+2, r23	; 0x02
   10ef2:	8b 83       	std	Y+3, r24	; 0x03
   10ef4:	9c 83       	std	Y+4, r25	; 0x04
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:114
  struct tm * ti;
  ti = localtime (&rawtime);
   10ef6:	ce 01       	movw	r24, r28
   10ef8:	01 96       	adiw	r24, 0x01	; 1
   10efa:	0e 94 b7 93 	call	0x1276e	; 0x1276e <localtime>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:115
  int year = ti->tm_year + 1900;
   10efe:	fc 01       	movw	r30, r24
   10f00:	86 81       	ldd	r24, Z+6	; 0x06
   10f02:	97 81       	ldd	r25, Z+7	; 0x07
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:118

  return year;
}
   10f04:	84 59       	subi	r24, 0x94	; 148
   10f06:	98 4f       	sbci	r25, 0xF8	; 248
   10f08:	0f 90       	pop	r0
   10f0a:	0f 90       	pop	r0
   10f0c:	0f 90       	pop	r0
   10f0e:	0f 90       	pop	r0
   10f10:	df 91       	pop	r29
   10f12:	cf 91       	pop	r28
   10f14:	08 95       	ret

00010f16 <NTPClient::begin()>:
_ZN9NTPClient5beginEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:52
  this->_timeOffset     = timeOffset;
  this->_poolServerName = poolServerName;
  this->_updateInterval = updateInterval;
}

void NTPClient::begin() {
   10f16:	cf 93       	push	r28
   10f18:	df 93       	push	r29
   10f1a:	ec 01       	movw	r28, r24
begin():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:57
  this->begin(NTP_DEFAULT_LOCAL_PORT);
}

void NTPClient::begin(int port) {
  this->_port = port;
   10f1c:	89 e3       	ldi	r24, 0x39	; 57
   10f1e:	95 e0       	ldi	r25, 0x05	; 5
   10f20:	9e 83       	std	Y+6, r25	; 0x06
   10f22:	8d 83       	std	Y+5, r24	; 0x05
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:59

  this->_udp->begin(this->_port);
   10f24:	88 81       	ld	r24, Y
   10f26:	99 81       	ldd	r25, Y+1	; 0x01
   10f28:	dc 01       	movw	r26, r24
   10f2a:	ed 91       	ld	r30, X+
   10f2c:	fc 91       	ld	r31, X
   10f2e:	06 84       	ldd	r0, Z+14	; 0x0e
   10f30:	f7 85       	ldd	r31, Z+15	; 0x0f
   10f32:	e0 2d       	mov	r30, r0
   10f34:	69 e3       	ldi	r22, 0x39	; 57
   10f36:	75 e0       	ldi	r23, 0x05	; 5
   10f38:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:61

  this->_udpSetup = true;
   10f3a:	81 e0       	ldi	r24, 0x01	; 1
   10f3c:	8a 83       	std	Y+2, r24	; 0x02
_ZN9NTPClient5beginEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:54
  this->_updateInterval = updateInterval;
}

void NTPClient::begin() {
  this->begin(NTP_DEFAULT_LOCAL_PORT);
}
   10f3e:	df 91       	pop	r29
   10f40:	cf 91       	pop	r28
   10f42:	08 95       	ret

00010f44 <NTPClient::update()>:
_ZN9NTPClient6updateEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:96
  this->_currentEpoc = secsSince1900 - SEVENZYYEARS;

  return true;
}

bool NTPClient::update() {
   10f44:	cf 92       	push	r12
   10f46:	df 92       	push	r13
   10f48:	ef 92       	push	r14
   10f4a:	ff 92       	push	r15
   10f4c:	0f 93       	push	r16
   10f4e:	1f 93       	push	r17
   10f50:	cf 93       	push	r28
   10f52:	df 93       	push	r29
   10f54:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:97
  if ((millis() - this->_lastUpdate >= this->_updateInterval)     // Update after _updateInterval
   10f56:	0e 94 1d 85 	call	0x10a3a	; 0x10a3a <millis>
   10f5a:	0b 89       	ldd	r16, Y+19	; 0x13
   10f5c:	1c 89       	ldd	r17, Y+20	; 0x14
   10f5e:	2d 89       	ldd	r18, Y+21	; 0x15
   10f60:	3e 89       	ldd	r19, Y+22	; 0x16
   10f62:	60 1b       	sub	r22, r16
   10f64:	71 0b       	sbc	r23, r17
   10f66:	82 0b       	sbc	r24, r18
   10f68:	93 0b       	sbc	r25, r19
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:98
    || this->_lastUpdate == 0) {                                // Update if there was no update yet.
   10f6a:	cb 84       	ldd	r12, Y+11	; 0x0b
   10f6c:	dc 84       	ldd	r13, Y+12	; 0x0c
   10f6e:	ed 84       	ldd	r14, Y+13	; 0x0d
   10f70:	fe 84       	ldd	r15, Y+14	; 0x0e
   10f72:	6c 15       	cp	r22, r12
   10f74:	7d 05       	cpc	r23, r13
   10f76:	8e 05       	cpc	r24, r14
   10f78:	9f 05       	cpc	r25, r15
   10f7a:	28 f4       	brcc	.+10     	; 0x10f86 <NTPClient::update()+0x42>
   10f7c:	01 2b       	or	r16, r17
   10f7e:	02 2b       	or	r16, r18
   10f80:	03 2b       	or	r16, r19
   10f82:	09 f0       	breq	.+2      	; 0x10f86 <NTPClient::update()+0x42>
   10f84:	9e c0       	rjmp	.+316    	; 0x110c2 <NTPClient::update()+0x17e>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:99
    if (!this->_udpSetup) this->begin();                         // setup the UDP client if needed
   10f86:	8a 81       	ldd	r24, Y+2	; 0x02
   10f88:	81 11       	cpse	r24, r1
   10f8a:	03 c0       	rjmp	.+6      	; 0x10f92 <NTPClient::update()+0x4e>
   10f8c:	ce 01       	movw	r24, r28
   10f8e:	0e 94 8b 87 	call	0x10f16	; 0x10f16 <NTPClient::begin()>
sendNTPPacket():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:185
    this->_poolServerName = poolServerName;
}

void NTPClient::sendNTPPacket() {
  // set all bytes in the buffer to 0
  memset(this->_packetBuffer, 0, NTP_PACKET_SIZE);
   10f92:	7e 01       	movw	r14, r28
   10f94:	87 e1       	ldi	r24, 0x17	; 23
   10f96:	e8 0e       	add	r14, r24
   10f98:	f1 1c       	adc	r15, r1
   10f9a:	8c e2       	ldi	r24, 0x2C	; 44
   10f9c:	fe 01       	movw	r30, r28
   10f9e:	7b 96       	adiw	r30, 0x1b	; 27
   10fa0:	df 01       	movw	r26, r30
   10fa2:	1d 92       	st	X+, r1
   10fa4:	8a 95       	dec	r24
   10fa6:	e9 f7       	brne	.-6      	; 0x10fa2 <NTPClient::update()+0x5e>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:188
  // Initialize values needed to form NTP request
  // (see URL above for details on the packets)
  this->_packetBuffer[0] = 0b11100011;   // LI, Version, Mode
   10fa8:	83 ee       	ldi	r24, 0xE3	; 227
   10faa:	8f 8b       	std	Y+23, r24	; 0x17
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:189
  this->_packetBuffer[1] = 0;     // Stratum, or type of clock
   10fac:	18 8e       	std	Y+24, r1	; 0x18
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:190
  this->_packetBuffer[2] = 6;     // Polling Interval
   10fae:	86 e0       	ldi	r24, 0x06	; 6
   10fb0:	89 8f       	std	Y+25, r24	; 0x19
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:191
  this->_packetBuffer[3] = 0xEC;  // Peer Clock Precision
   10fb2:	8c ee       	ldi	r24, 0xEC	; 236
   10fb4:	8a 8f       	std	Y+26, r24	; 0x1a
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:193
  // 8 bytes of zero for Root Delay & Root Dispersion
  this->_packetBuffer[12]  = 49;
   10fb6:	81 e3       	ldi	r24, 0x31	; 49
   10fb8:	8b a3       	std	Y+35, r24	; 0x23
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:194
  this->_packetBuffer[13]  = 0x4E;
   10fba:	9e e4       	ldi	r25, 0x4E	; 78
   10fbc:	9c a3       	std	Y+36, r25	; 0x24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:195
  this->_packetBuffer[14]  = 49;
   10fbe:	8d a3       	std	Y+37, r24	; 0x25
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:196
  this->_packetBuffer[15]  = 52;
   10fc0:	84 e3       	ldi	r24, 0x34	; 52
   10fc2:	8e a3       	std	Y+38, r24	; 0x26
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:200

  // all NTP fields have been given values, now
  // you can send a packet requesting a timestamp:
  this->_udp->beginPacket(this->_poolServerName, 123); //NTP requests are to port 123
   10fc4:	88 81       	ld	r24, Y
   10fc6:	99 81       	ldd	r25, Y+1	; 0x01
   10fc8:	6b 81       	ldd	r22, Y+3	; 0x03
   10fca:	7c 81       	ldd	r23, Y+4	; 0x04
   10fcc:	dc 01       	movw	r26, r24
   10fce:	ed 91       	ld	r30, X+
   10fd0:	fc 91       	ld	r31, X
   10fd2:	06 88       	ldd	r0, Z+22	; 0x16
   10fd4:	f7 89       	ldd	r31, Z+23	; 0x17
   10fd6:	e0 2d       	mov	r30, r0
   10fd8:	4b e7       	ldi	r20, 0x7B	; 123
   10fda:	50 e0       	ldi	r21, 0x00	; 0
   10fdc:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:201
  this->_udp->write(this->_packetBuffer, NTP_PACKET_SIZE);
   10fde:	88 81       	ld	r24, Y
   10fe0:	99 81       	ldd	r25, Y+1	; 0x01
   10fe2:	dc 01       	movw	r26, r24
   10fe4:	ed 91       	ld	r30, X+
   10fe6:	fc 91       	ld	r31, X
   10fe8:	02 80       	ldd	r0, Z+2	; 0x02
   10fea:	f3 81       	ldd	r31, Z+3	; 0x03
   10fec:	e0 2d       	mov	r30, r0
   10fee:	40 e3       	ldi	r20, 0x30	; 48
   10ff0:	50 e0       	ldi	r21, 0x00	; 0
   10ff2:	b7 01       	movw	r22, r14
   10ff4:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:202
  this->_udp->endPacket();
   10ff6:	88 81       	ld	r24, Y
   10ff8:	99 81       	ldd	r25, Y+1	; 0x01
   10ffa:	dc 01       	movw	r26, r24
   10ffc:	ed 91       	ld	r30, X+
   10ffe:	fc 91       	ld	r31, X
   11000:	00 8c       	ldd	r0, Z+24	; 0x18
   11002:	f1 8d       	ldd	r31, Z+25	; 0x19
   11004:	e0 2d       	mov	r30, r0
   11006:	19 95       	eicall
_ZN9NTPClient6updateEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:72
  #endif

  this->sendNTPPacket();

  // Wait till data is there or timeout...
  byte timeout = 0;
   11008:	10 e0       	ldi	r17, 0x00	; 0
forceUpdate():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:75
  int cb = 0;
  do {
    delay ( 10 );
   1100a:	6a e0       	ldi	r22, 0x0A	; 10
   1100c:	70 e0       	ldi	r23, 0x00	; 0
   1100e:	80 e0       	ldi	r24, 0x00	; 0
   11010:	90 e0       	ldi	r25, 0x00	; 0
   11012:	0e 94 f5 83 	call	0x107ea	; 0x107ea <delay>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:76
    cb = this->_udp->parsePacket();
   11016:	88 81       	ld	r24, Y
   11018:	99 81       	ldd	r25, Y+1	; 0x01
   1101a:	dc 01       	movw	r26, r24
   1101c:	ed 91       	ld	r30, X+
   1101e:	fc 91       	ld	r31, X
   11020:	02 8c       	ldd	r0, Z+26	; 0x1a
   11022:	f3 8d       	ldd	r31, Z+27	; 0x1b
   11024:	e0 2d       	mov	r30, r0
   11026:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:77
    if (timeout > 100) return false; // timeout after 1000 ms
   11028:	15 36       	cpi	r17, 0x65	; 101
   1102a:	09 f4       	brne	.+2      	; 0x1102e <NTPClient::update()+0xea>
   1102c:	54 c0       	rjmp	.+168    	; 0x110d6 <NTPClient::update()+0x192>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:78
    timeout++;
   1102e:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:79
  } while (cb == 0);
   11030:	89 2b       	or	r24, r25
   11032:	59 f3       	breq	.-42     	; 0x1100a <NTPClient::update()+0xc6>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:81

  this->_lastUpdate = millis() - (10 * (timeout + 1)); // Account for delay in reading the time
   11034:	0e 94 1d 85 	call	0x10a3a	; 0x10a3a <millis>
   11038:	21 2f       	mov	r18, r17
   1103a:	30 e0       	ldi	r19, 0x00	; 0
   1103c:	a9 01       	movw	r20, r18
   1103e:	4f 5f       	subi	r20, 0xFF	; 255
   11040:	5f 4f       	sbci	r21, 0xFF	; 255
   11042:	ea e0       	ldi	r30, 0x0A	; 10
   11044:	e4 9f       	mul	r30, r20
   11046:	90 01       	movw	r18, r0
   11048:	e5 9f       	mul	r30, r21
   1104a:	30 0d       	add	r19, r0
   1104c:	11 24       	eor	r1, r1
   1104e:	89 01       	movw	r16, r18
   11050:	33 0f       	add	r19, r19
   11052:	22 0b       	sbc	r18, r18
   11054:	33 0b       	sbc	r19, r19
   11056:	ab 01       	movw	r20, r22
   11058:	bc 01       	movw	r22, r24
   1105a:	40 1b       	sub	r20, r16
   1105c:	51 0b       	sbc	r21, r17
   1105e:	62 0b       	sbc	r22, r18
   11060:	73 0b       	sbc	r23, r19
   11062:	4b 8b       	std	Y+19, r20	; 0x13
   11064:	5c 8b       	std	Y+20, r21	; 0x14
   11066:	6d 8b       	std	Y+21, r22	; 0x15
   11068:	7e 8b       	std	Y+22, r23	; 0x16
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:83

  this->_udp->read(this->_packetBuffer, NTP_PACKET_SIZE);
   1106a:	88 81       	ld	r24, Y
   1106c:	99 81       	ldd	r25, Y+1	; 0x01
   1106e:	dc 01       	movw	r26, r24
   11070:	ed 91       	ld	r30, X+
   11072:	fc 91       	ld	r31, X
   11074:	04 8c       	ldd	r0, Z+28	; 0x1c
   11076:	f5 8d       	ldd	r31, Z+29	; 0x1d
   11078:	e0 2d       	mov	r30, r0
   1107a:	40 e3       	ldi	r20, 0x30	; 48
   1107c:	50 e0       	ldi	r21, 0x00	; 0
   1107e:	b7 01       	movw	r22, r14
   11080:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:85

  unsigned long highWord = word(this->_packetBuffer[40], this->_packetBuffer[41]);
   11082:	fe 01       	movw	r30, r28
   11084:	ff 96       	adiw	r30, 0x3f	; 63
   11086:	80 81       	ld	r24, Z
   11088:	91 81       	ldd	r25, Z+1	; 0x01
   1108a:	98 27       	eor	r25, r24
   1108c:	89 27       	eor	r24, r25
   1108e:	98 27       	eor	r25, r24
   11090:	b0 e0       	ldi	r27, 0x00	; 0
   11092:	a0 e0       	ldi	r26, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:89
  unsigned long lowWord = word(this->_packetBuffer[42], this->_packetBuffer[43]);
  // combine the four bytes (two words) into a long integer
  // this is NTP time (seconds since Jan 1 1900):
  unsigned long secsSince1900 = highWord << 16 | lowWord;
   11094:	dc 01       	movw	r26, r24
   11096:	99 27       	eor	r25, r25
   11098:	88 27       	eor	r24, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:86
  this->_lastUpdate = millis() - (10 * (timeout + 1)); // Account for delay in reading the time

  this->_udp->read(this->_packetBuffer, NTP_PACKET_SIZE);

  unsigned long highWord = word(this->_packetBuffer[40], this->_packetBuffer[41]);
  unsigned long lowWord = word(this->_packetBuffer[42], this->_packetBuffer[43]);
   1109a:	32 96       	adiw	r30, 0x02	; 2
   1109c:	40 81       	ld	r20, Z
   1109e:	51 81       	ldd	r21, Z+1	; 0x01
   110a0:	54 27       	eor	r21, r20
   110a2:	45 27       	eor	r20, r21
   110a4:	54 27       	eor	r21, r20
   110a6:	70 e0       	ldi	r23, 0x00	; 0
   110a8:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:89
  // combine the four bytes (two words) into a long integer
  // this is NTP time (seconds since Jan 1 1900):
  unsigned long secsSince1900 = highWord << 16 | lowWord;
   110aa:	84 2b       	or	r24, r20
   110ac:	95 2b       	or	r25, r21
   110ae:	a6 2b       	or	r26, r22
   110b0:	b7 2b       	or	r27, r23
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:91

  this->_currentEpoc = secsSince1900 - SEVENZYYEARS;
   110b2:	80 58       	subi	r24, 0x80	; 128
   110b4:	9e 47       	sbci	r25, 0x7E	; 126
   110b6:	aa 4a       	sbci	r26, 0xAA	; 170
   110b8:	b3 48       	sbci	r27, 0x83	; 131
   110ba:	8f 87       	std	Y+15, r24	; 0x0f
   110bc:	98 8b       	std	Y+16, r25	; 0x10
   110be:	a9 8b       	std	Y+17, r26	; 0x11
   110c0:	ba 8b       	std	Y+18, r27	; 0x12
_ZN9NTPClient6updateEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:102
  if ((millis() - this->_lastUpdate >= this->_updateInterval)     // Update after _updateInterval
    || this->_lastUpdate == 0) {                                // Update if there was no update yet.
    if (!this->_udpSetup) this->begin();                         // setup the UDP client if needed
    return this->forceUpdate();
  }
  return true;
   110c2:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:103
}
   110c4:	df 91       	pop	r29
   110c6:	cf 91       	pop	r28
   110c8:	1f 91       	pop	r17
   110ca:	0f 91       	pop	r16
   110cc:	ff 90       	pop	r15
   110ce:	ef 90       	pop	r14
   110d0:	df 90       	pop	r13
   110d2:	cf 90       	pop	r12
   110d4:	08 95       	ret
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:77
  byte timeout = 0;
  int cb = 0;
  do {
    delay ( 10 );
    cb = this->_udp->parsePacket();
    if (timeout > 100) return false; // timeout after 1000 ms
   110d6:	80 e0       	ldi	r24, 0x00	; 0
   110d8:	f5 cf       	rjmp	.-22     	; 0x110c4 <NTPClient::update()+0x180>

000110da <__vector_39>:
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:400
  // update twi state
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
   110da:	1f 92       	push	r1
   110dc:	0f 92       	push	r0
   110de:	0f b6       	in	r0, 0x3f	; 63
   110e0:	0f 92       	push	r0
   110e2:	11 24       	eor	r1, r1
   110e4:	0b b6       	in	r0, 0x3b	; 59
   110e6:	0f 92       	push	r0
   110e8:	2f 93       	push	r18
   110ea:	3f 93       	push	r19
   110ec:	4f 93       	push	r20
   110ee:	5f 93       	push	r21
   110f0:	6f 93       	push	r22
   110f2:	7f 93       	push	r23
   110f4:	8f 93       	push	r24
   110f6:	9f 93       	push	r25
   110f8:	af 93       	push	r26
   110fa:	bf 93       	push	r27
   110fc:	ef 93       	push	r30
   110fe:	ff 93       	push	r31
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  switch(TW_STATUS){
   11100:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
   11104:	88 7f       	andi	r24, 0xF8	; 248
   11106:	80 36       	cpi	r24, 0x60	; 96
   11108:	09 f4       	brne	.+2      	; 0x1110c <__vector_39+0x32>
   1110a:	4d c0       	rjmp	.+154    	; 0x111a6 <__vector_39+0xcc>
   1110c:	08 f0       	brcs	.+2      	; 0x11110 <__vector_39+0x36>
   1110e:	40 c0       	rjmp	.+128    	; 0x11190 <__vector_39+0xb6>
   11110:	88 32       	cpi	r24, 0x28	; 40
   11112:	09 f4       	brne	.+2      	; 0x11116 <__vector_39+0x3c>
   11114:	a9 c0       	rjmp	.+338    	; 0x11268 <__vector_39+0x18e>
   11116:	28 f5       	brcc	.+74     	; 0x11162 <__vector_39+0x88>
   11118:	80 31       	cpi	r24, 0x10	; 16
   1111a:	09 f4       	brne	.+2      	; 0x1111e <__vector_39+0x44>
   1111c:	9d c0       	rjmp	.+314    	; 0x11258 <__vector_39+0x17e>
   1111e:	c8 f4       	brcc	.+50     	; 0x11152 <__vector_39+0x78>
   11120:	88 23       	and	r24, r24
   11122:	09 f4       	brne	.+2      	; 0x11126 <__vector_39+0x4c>
   11124:	fb c0       	rjmp	.+502    	; 0x1131c <__vector_39+0x242>
   11126:	88 30       	cpi	r24, 0x08	; 8
   11128:	09 f4       	brne	.+2      	; 0x1112c <__vector_39+0x52>
   1112a:	96 c0       	rjmp	.+300    	; 0x11258 <__vector_39+0x17e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:562
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
   1112c:	ff 91       	pop	r31
   1112e:	ef 91       	pop	r30
   11130:	bf 91       	pop	r27
   11132:	af 91       	pop	r26
   11134:	9f 91       	pop	r25
   11136:	8f 91       	pop	r24
   11138:	7f 91       	pop	r23
   1113a:	6f 91       	pop	r22
   1113c:	5f 91       	pop	r21
   1113e:	4f 91       	pop	r20
   11140:	3f 91       	pop	r19
   11142:	2f 91       	pop	r18
   11144:	0f 90       	pop	r0
   11146:	0b be       	out	0x3b, r0	; 59
   11148:	0f 90       	pop	r0
   1114a:	0f be       	out	0x3f, r0	; 63
   1114c:	0f 90       	pop	r0
   1114e:	1f 90       	pop	r1
   11150:	18 95       	reti
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   11152:	88 31       	cpi	r24, 0x18	; 24
   11154:	09 f4       	brne	.+2      	; 0x11158 <__vector_39+0x7e>
   11156:	88 c0       	rjmp	.+272    	; 0x11268 <__vector_39+0x18e>
   11158:	80 32       	cpi	r24, 0x20	; 32
   1115a:	41 f7       	brne	.-48     	; 0x1112c <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:436
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
   1115c:	80 93 2d 11 	sts	0x112D, r24	; 0x80112d <twi_error>
   11160:	14 c0       	rjmp	.+40     	; 0x1118a <__vector_39+0xb0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   11162:	80 34       	cpi	r24, 0x40	; 64
   11164:	09 f4       	brne	.+2      	; 0x11168 <__vector_39+0x8e>
   11166:	9d c0       	rjmp	.+314    	; 0x112a2 <__vector_39+0x1c8>
   11168:	40 f4       	brcc	.+16     	; 0x1117a <__vector_39+0xa0>
   1116a:	80 33       	cpi	r24, 0x30	; 48
   1116c:	b9 f3       	breq	.-18     	; 0x1115c <__vector_39+0x82>
   1116e:	88 33       	cpi	r24, 0x38	; 56
   11170:	e9 f6       	brne	.-70     	; 0x1112c <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:440
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
   11172:	80 93 2d 11 	sts	0x112D, r24	; 0x80112d <twi_error>
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
   11176:	85 ec       	ldi	r24, 0xC5	; 197
   11178:	b0 c0       	rjmp	.+352    	; 0x112da <__vector_39+0x200>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   1117a:	80 35       	cpi	r24, 0x50	; 80
   1117c:	09 f4       	brne	.+2      	; 0x11180 <__vector_39+0xa6>
   1117e:	85 c0       	rjmp	.+266    	; 0x1128a <__vector_39+0x1b0>
   11180:	88 35       	cpi	r24, 0x58	; 88
   11182:	09 f4       	brne	.+2      	; 0x11186 <__vector_39+0xac>
   11184:	96 c0       	rjmp	.+300    	; 0x112b2 <__vector_39+0x1d8>
   11186:	88 34       	cpi	r24, 0x48	; 72
   11188:	89 f6       	brne	.-94     	; 0x1112c <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:559
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
   1118a:	0e 94 aa 78 	call	0xf154	; 0xf154 <twi_stop>
   1118e:	ce cf       	rjmp	.-100    	; 0x1112c <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   11190:	88 39       	cpi	r24, 0x98	; 152
   11192:	09 f4       	brne	.+2      	; 0x11196 <__vector_39+0xbc>
   11194:	8c c0       	rjmp	.+280    	; 0x112ae <__vector_39+0x1d4>
   11196:	38 f5       	brcc	.+78     	; 0x111e6 <__vector_39+0x10c>
   11198:	88 37       	cpi	r24, 0x78	; 120
   1119a:	29 f0       	breq	.+10     	; 0x111a6 <__vector_39+0xcc>
   1119c:	50 f4       	brcc	.+20     	; 0x111b2 <__vector_39+0xd8>
   1119e:	88 36       	cpi	r24, 0x68	; 104
   111a0:	11 f0       	breq	.+4      	; 0x111a6 <__vector_39+0xcc>
   111a2:	80 37       	cpi	r24, 0x70	; 112
   111a4:	19 f6       	brne	.-122    	; 0x1112c <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:482
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
   111a6:	83 e0       	ldi	r24, 0x03	; 3
   111a8:	80 93 2f 11 	sts	0x112F, r24	; 0x80112f <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:484
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
   111ac:	10 92 ba 10 	sts	0x10BA, r1	; 0x8010ba <twi_rxBufferIndex>
   111b0:	57 c0       	rjmp	.+174    	; 0x11260 <__vector_39+0x186>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   111b2:	88 38       	cpi	r24, 0x88	; 136
   111b4:	09 f4       	brne	.+2      	; 0x111b8 <__vector_39+0xde>
   111b6:	7b c0       	rjmp	.+246    	; 0x112ae <__vector_39+0x1d4>
   111b8:	80 39       	cpi	r24, 0x90	; 144
   111ba:	19 f0       	breq	.+6      	; 0x111c2 <__vector_39+0xe8>
   111bc:	80 38       	cpi	r24, 0x80	; 128
   111be:	09 f0       	breq	.+2      	; 0x111c2 <__vector_39+0xe8>
   111c0:	b5 cf       	rjmp	.-150    	; 0x1112c <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:490
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
   111c2:	80 91 ba 10 	lds	r24, 0x10BA	; 0x8010ba <twi_rxBufferIndex>
   111c6:	80 32       	cpi	r24, 0x20	; 32
   111c8:	08 f0       	brcs	.+2      	; 0x111cc <__vector_39+0xf2>
   111ca:	71 c0       	rjmp	.+226    	; 0x112ae <__vector_39+0x1d4>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:492
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
   111cc:	e0 91 ba 10 	lds	r30, 0x10BA	; 0x8010ba <twi_rxBufferIndex>
   111d0:	81 e0       	ldi	r24, 0x01	; 1
   111d2:	8e 0f       	add	r24, r30
   111d4:	80 93 ba 10 	sts	0x10BA, r24	; 0x8010ba <twi_rxBufferIndex>
   111d8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
   111dc:	f0 e0       	ldi	r31, 0x00	; 0
   111de:	e6 56       	subi	r30, 0x66	; 102
   111e0:	ff 4e       	sbci	r31, 0xEF	; 239
   111e2:	80 83       	st	Z, r24
   111e4:	3d c0       	rjmp	.+122    	; 0x11260 <__vector_39+0x186>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   111e6:	80 3b       	cpi	r24, 0xB0	; 176
   111e8:	39 f0       	breq	.+14     	; 0x111f8 <__vector_39+0x11e>
   111ea:	e0 f4       	brcc	.+56     	; 0x11224 <__vector_39+0x14a>
   111ec:	80 3a       	cpi	r24, 0xA0	; 160
   111ee:	09 f4       	brne	.+2      	; 0x111f2 <__vector_39+0x118>
   111f0:	79 c0       	rjmp	.+242    	; 0x112e4 <__vector_39+0x20a>
   111f2:	88 3a       	cpi	r24, 0xA8	; 168
   111f4:	09 f0       	breq	.+2      	; 0x111f8 <__vector_39+0x11e>
   111f6:	9a cf       	rjmp	.-204    	; 0x1112c <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:521

    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
   111f8:	84 e0       	ldi	r24, 0x04	; 4
   111fa:	80 93 2f 11 	sts	0x112F, r24	; 0x80112f <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:523
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
   111fe:	10 92 99 10 	sts	0x1099, r1	; 0x801099 <twi_txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:525
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
   11202:	10 92 98 10 	sts	0x1098, r1	; 0x801098 <twi_txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:528
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
   11206:	e0 91 e0 10 	lds	r30, 0x10E0	; 0x8010e0 <twi_onSlaveTransmit>
   1120a:	f0 91 e1 10 	lds	r31, 0x10E1	; 0x8010e1 <twi_onSlaveTransmit+0x1>
   1120e:	19 95       	eicall
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:530
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
   11210:	80 91 98 10 	lds	r24, 0x1098	; 0x801098 <twi_txBufferLength>
   11214:	81 11       	cpse	r24, r1
   11216:	0f c0       	rjmp	.+30     	; 0x11236 <__vector_39+0x15c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:531
        twi_txBufferLength = 1;
   11218:	81 e0       	ldi	r24, 0x01	; 1
   1121a:	80 93 98 10 	sts	0x1098, r24	; 0x801098 <twi_txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:532
        twi_txBuffer[0] = 0x00;
   1121e:	10 92 78 10 	sts	0x1078, r1	; 0x801078 <twi_txBuffer>
   11222:	09 c0       	rjmp	.+18     	; 0x11236 <__vector_39+0x15c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   11224:	80 3c       	cpi	r24, 0xC0	; 192
   11226:	09 f4       	brne	.+2      	; 0x1122a <__vector_39+0x150>
   11228:	a6 cf       	rjmp	.-180    	; 0x11176 <__vector_39+0x9c>
   1122a:	88 3c       	cpi	r24, 0xC8	; 200
   1122c:	09 f4       	brne	.+2      	; 0x11230 <__vector_39+0x156>
   1122e:	a3 cf       	rjmp	.-186    	; 0x11176 <__vector_39+0x9c>
   11230:	88 3b       	cpi	r24, 0xB8	; 184
   11232:	09 f0       	breq	.+2      	; 0x11236 <__vector_39+0x15c>
   11234:	7b cf       	rjmp	.-266    	; 0x1112c <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:538
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
   11236:	e0 91 99 10 	lds	r30, 0x1099	; 0x801099 <twi_txBufferIndex>
   1123a:	81 e0       	ldi	r24, 0x01	; 1
   1123c:	8e 0f       	add	r24, r30
   1123e:	80 93 99 10 	sts	0x1099, r24	; 0x801099 <twi_txBufferIndex>
   11242:	f0 e0       	ldi	r31, 0x00	; 0
   11244:	e8 58       	subi	r30, 0x88	; 136
   11246:	ff 4e       	sbci	r31, 0xEF	; 239
   11248:	80 81       	ld	r24, Z
   1124a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:540
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
   1124e:	90 91 99 10 	lds	r25, 0x1099	; 0x801099 <twi_txBufferIndex>
   11252:	80 91 98 10 	lds	r24, 0x1098	; 0x801098 <twi_txBufferLength>
   11256:	29 c0       	rjmp	.+82     	; 0x112aa <__vector_39+0x1d0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:406
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
   11258:	80 91 2a 11 	lds	r24, 0x112A	; 0x80112a <twi_slarw>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:416
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
   1125c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
   11260:	85 ec       	ldi	r24, 0xC5	; 197
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:359
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
   11262:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   11266:	62 cf       	rjmp	.-316    	; 0x1112c <__vector_39+0x52>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:414

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
   11268:	90 91 2c 11 	lds	r25, 0x112C	; 0x80112c <twi_masterBufferIndex>
   1126c:	80 91 2b 11 	lds	r24, 0x112B	; 0x80112b <twi_masterBufferLength>
   11270:	98 17       	cp	r25, r24
   11272:	58 f5       	brcc	.+86     	; 0x112ca <__vector_39+0x1f0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:416
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
   11274:	e0 91 2c 11 	lds	r30, 0x112C	; 0x80112c <twi_masterBufferIndex>
   11278:	81 e0       	ldi	r24, 0x01	; 1
   1127a:	8e 0f       	add	r24, r30
   1127c:	80 93 2c 11 	sts	0x112C, r24	; 0x80112c <twi_masterBufferIndex>
   11280:	f0 e0       	ldi	r31, 0x00	; 0
   11282:	e7 5f       	subi	r30, 0xF7	; 247
   11284:	fe 4e       	sbci	r31, 0xEE	; 238
   11286:	80 81       	ld	r24, Z
   11288:	e9 cf       	rjmp	.-46     	; 0x1125c <__vector_39+0x182>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:447
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
   1128a:	e0 91 2c 11 	lds	r30, 0x112C	; 0x80112c <twi_masterBufferIndex>
   1128e:	81 e0       	ldi	r24, 0x01	; 1
   11290:	8e 0f       	add	r24, r30
   11292:	80 93 2c 11 	sts	0x112C, r24	; 0x80112c <twi_masterBufferIndex>
   11296:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
   1129a:	f0 e0       	ldi	r31, 0x00	; 0
   1129c:	e7 5f       	subi	r30, 0xF7	; 247
   1129e:	fe 4e       	sbci	r31, 0xEE	; 238
   112a0:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:451
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
   112a2:	90 91 2c 11 	lds	r25, 0x112C	; 0x80112c <twi_masterBufferIndex>
   112a6:	80 91 2b 11 	lds	r24, 0x112B	; 0x80112b <twi_masterBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:540
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
   112aa:	98 17       	cp	r25, r24
   112ac:	c8 f2       	brcs	.-78     	; 0x11260 <__vector_39+0x186>
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
   112ae:	85 e8       	ldi	r24, 0x85	; 133
   112b0:	d8 cf       	rjmp	.-80     	; 0x11262 <__vector_39+0x188>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:459
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
   112b2:	e0 91 2c 11 	lds	r30, 0x112C	; 0x80112c <twi_masterBufferIndex>
   112b6:	81 e0       	ldi	r24, 0x01	; 1
   112b8:	8e 0f       	add	r24, r30
   112ba:	80 93 2c 11 	sts	0x112C, r24	; 0x80112c <twi_masterBufferIndex>
   112be:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
   112c2:	f0 e0       	ldi	r31, 0x00	; 0
   112c4:	e7 5f       	subi	r30, 0xF7	; 247
   112c6:	fe 4e       	sbci	r31, 0xEE	; 238
   112c8:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:460
  if (twi_sendStop)
   112ca:	80 91 2e 11 	lds	r24, 0x112E	; 0x80112e <twi_sendStop>
   112ce:	81 11       	cpse	r24, r1
   112d0:	5c cf       	rjmp	.-328    	; 0x1118a <__vector_39+0xb0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:463
          twi_stop();
  else {
    twi_inRepStart = true;  // we're going to send the START
   112d2:	81 e0       	ldi	r24, 0x01	; 1
   112d4:	80 93 29 11 	sts	0x1129, r24	; 0x801129 <twi_inRepStart>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:467
    // don't enable the interrupt. We'll generate the start, but we
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
   112d8:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
   112da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:551
    case TW_ST_DATA_NACK: // received nack, we are done
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
   112de:	10 92 2f 11 	sts	0x112F, r1	; 0x80112f <twi_state>
   112e2:	24 cf       	rjmp	.-440    	; 0x1112c <__vector_39+0x52>
twi_releaseBus():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:393
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
   112e4:	85 ec       	ldi	r24, 0xC5	; 197
   112e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:396

  // update twi state
  twi_state = TWI_READY;
   112ea:	10 92 2f 11 	sts	0x112F, r1	; 0x80112f <twi_state>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:503
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
   112ee:	80 91 ba 10 	lds	r24, 0x10BA	; 0x8010ba <twi_rxBufferIndex>
   112f2:	80 32       	cpi	r24, 0x20	; 32
   112f4:	30 f4       	brcc	.+12     	; 0x11302 <__vector_39+0x228>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:504
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
   112f6:	e0 91 ba 10 	lds	r30, 0x10BA	; 0x8010ba <twi_rxBufferIndex>
   112fa:	f0 e0       	ldi	r31, 0x00	; 0
   112fc:	e6 56       	subi	r30, 0x66	; 102
   112fe:	ff 4e       	sbci	r31, 0xEF	; 239
   11300:	10 82       	st	Z, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:507
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
   11302:	60 91 ba 10 	lds	r22, 0x10BA	; 0x8010ba <twi_rxBufferIndex>
   11306:	70 e0       	ldi	r23, 0x00	; 0
   11308:	e0 91 de 10 	lds	r30, 0x10DE	; 0x8010de <twi_onSlaveReceive>
   1130c:	f0 91 df 10 	lds	r31, 0x10DF	; 0x8010df <twi_onSlaveReceive+0x1>
   11310:	8a e9       	ldi	r24, 0x9A	; 154
   11312:	90 e1       	ldi	r25, 0x10	; 16
   11314:	19 95       	eicall
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:509
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
   11316:	10 92 ba 10 	sts	0x10BA, r1	; 0x8010ba <twi_rxBufferIndex>
   1131a:	08 cf       	rjmp	.-496    	; 0x1112c <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:558

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
   1131c:	10 92 2d 11 	sts	0x112D, r1	; 0x80112d <twi_error>
   11320:	34 cf       	rjmp	.-408    	; 0x1118a <__vector_39+0xb0>

00011322 <TwoWire::endTransmission()>:
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:173
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
  // transmit buffer (blocking)
  uint8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
   11322:	20 91 e5 10 	lds	r18, 0x10E5	; 0x8010e5 <TwoWire::txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:232
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    return 1;
   11326:	81 e0       	ldi	r24, 0x01	; 1
twi_writeTo():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:231
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
   11328:	21 32       	cpi	r18, 0x21	; 33
   1132a:	08 f0       	brcs	.+2      	; 0x1132e <TwoWire::endTransmission()+0xc>
   1132c:	44 c0       	rjmp	.+136    	; 0x113b6 <TwoWire::endTransmission()+0x94>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:236
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
   1132e:	80 91 2f 11 	lds	r24, 0x112F	; 0x80112f <twi_state>
   11332:	81 11       	cpse	r24, r1
   11334:	fc cf       	rjmp	.-8      	; 0x1132e <TwoWire::endTransmission()+0xc>
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:173
   11336:	80 91 e7 10 	lds	r24, 0x10E7	; 0x8010e7 <TwoWire::txAddress>
twi_writeTo():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:239
    continue;
  }
  twi_state = TWI_MTX;
   1133a:	92 e0       	ldi	r25, 0x02	; 2
   1133c:	90 93 2f 11 	sts	0x112F, r25	; 0x80112f <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:240
  twi_sendStop = sendStop;
   11340:	91 e0       	ldi	r25, 0x01	; 1
   11342:	90 93 2e 11 	sts	0x112E, r25	; 0x80112e <twi_sendStop>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:242
  // reset error state (0xFF.. no error occurred)
  twi_error = 0xFF;
   11346:	9f ef       	ldi	r25, 0xFF	; 255
   11348:	90 93 2d 11 	sts	0x112D, r25	; 0x80112d <twi_error>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:245

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
   1134c:	10 92 2c 11 	sts	0x112C, r1	; 0x80112c <twi_masterBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:246
  twi_masterBufferLength = length;
   11350:	20 93 2b 11 	sts	0x112B, r18	; 0x80112b <twi_masterBufferLength>
   11354:	a8 e5       	ldi	r26, 0x58	; 88
   11356:	b0 e1       	ldi	r27, 0x10	; 16
   11358:	e9 e0       	ldi	r30, 0x09	; 9
   1135a:	f1 e1       	ldi	r31, 0x11	; 17
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:249

  // copy data to twi buffer
  for(i = 0; i < length; ++i){
   1135c:	90 e0       	ldi	r25, 0x00	; 0
twi_writeTo():
   1135e:	29 13       	cpse	r18, r25
   11360:	31 c0       	rjmp	.+98     	; 0x113c4 <TwoWire::endTransmission()+0xa2>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:254
    twi_masterBuffer[i] = data[i];
  }

  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
   11362:	10 92 2a 11 	sts	0x112A, r1	; 0x80112a <twi_slarw>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:255
  twi_slarw |= address << 1;
   11366:	90 91 2a 11 	lds	r25, 0x112A	; 0x80112a <twi_slarw>
   1136a:	88 0f       	add	r24, r24
   1136c:	89 2b       	or	r24, r25
   1136e:	80 93 2a 11 	sts	0x112A, r24	; 0x80112a <twi_slarw>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:260

  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
   11372:	80 91 29 11 	lds	r24, 0x1129	; 0x801129 <twi_inRepStart>
   11376:	81 30       	cpi	r24, 0x01	; 1
   11378:	49 f5       	brne	.+82     	; 0x113cc <TwoWire::endTransmission()+0xaa>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:267
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // Remember, we're dealing with an ASYNC ISR
   1137a:	10 92 29 11 	sts	0x1129, r1	; 0x801129 <twi_inRepStart>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:269
    do {
      TWDR = twi_slarw;
   1137e:	80 91 2a 11 	lds	r24, 0x112A	; 0x80112a <twi_slarw>
   11382:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:270
    } while(TWCR & _BV(TWWC));
   11386:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   1138a:	83 fd       	sbrc	r24, 3
   1138c:	f8 cf       	rjmp	.-16     	; 0x1137e <TwoWire::endTransmission()+0x5c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:271
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
   1138e:	85 ec       	ldi	r24, 0xC5	; 197
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:275
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
   11390:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:278

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
   11394:	80 91 2f 11 	lds	r24, 0x112F	; 0x80112f <twi_state>
   11398:	82 30       	cpi	r24, 0x02	; 2
   1139a:	e1 f3       	breq	.-8      	; 0x11394 <TwoWire::endTransmission()+0x72>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:282
    continue;
  }

  if (twi_error == 0xFF)
   1139c:	80 91 2d 11 	lds	r24, 0x112D	; 0x80112d <twi_error>
   113a0:	8f 3f       	cpi	r24, 0xFF	; 255
   113a2:	b1 f0       	breq	.+44     	; 0x113d0 <TwoWire::endTransmission()+0xae>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:284
    return 0; // success
  else if (twi_error == TW_MT_SLA_NACK)
   113a4:	80 91 2d 11 	lds	r24, 0x112D	; 0x80112d <twi_error>
   113a8:	80 32       	cpi	r24, 0x20	; 32
   113aa:	a1 f0       	breq	.+40     	; 0x113d4 <TwoWire::endTransmission()+0xb2>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:286
    return 2; // error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
   113ac:	80 91 2d 11 	lds	r24, 0x112D	; 0x80112d <twi_error>
   113b0:	80 33       	cpi	r24, 0x30	; 48
   113b2:	91 f0       	breq	.+36     	; 0x113d8 <TwoWire::endTransmission()+0xb6>
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:289
    return 3; // error: data send, nack received
  else
    return 4; // other twi error
   113b4:	84 e0       	ldi	r24, 0x04	; 4
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:175
  // reset tx buffer iterator vars
  txBufferIndex = 0;
   113b6:	10 92 e6 10 	sts	0x10E6, r1	; 0x8010e6 <TwoWire::txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:176
  txBufferLength = 0;
   113ba:	10 92 e5 10 	sts	0x10E5, r1	; 0x8010e5 <TwoWire::txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:178
  // indicate that we are done transmitting
  transmitting = 0;
   113be:	10 92 e8 10 	sts	0x10E8, r1	; 0x8010e8 <TwoWire::transmitting>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:188
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
}
   113c2:	08 95       	ret
twi_writeTo():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:250
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;

  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    twi_masterBuffer[i] = data[i];
   113c4:	3d 91       	ld	r19, X+
   113c6:	31 93       	st	Z+, r19
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:249
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;

  // copy data to twi buffer
  for(i = 0; i < length; ++i){
   113c8:	9f 5f       	subi	r25, 0xFF	; 255
   113ca:	c9 cf       	rjmp	.-110    	; 0x1135e <TwoWire::endTransmission()+0x3c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:275
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
   113cc:	85 ee       	ldi	r24, 0xE5	; 229
   113ce:	e0 cf       	rjmp	.-64     	; 0x11390 <TwoWire::endTransmission()+0x6e>
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:283
  while(wait && (TWI_MTX == twi_state)){
    continue;
  }

  if (twi_error == 0xFF)
    return 0; // success
   113d0:	80 e0       	ldi	r24, 0x00	; 0
   113d2:	f1 cf       	rjmp	.-30     	; 0x113b6 <TwoWire::endTransmission()+0x94>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:285
  else if (twi_error == TW_MT_SLA_NACK)
    return 2; // error: address send, nack received
   113d4:	82 e0       	ldi	r24, 0x02	; 2
   113d6:	ef cf       	rjmp	.-34     	; 0x113b6 <TwoWire::endTransmission()+0x94>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:287
  else if (twi_error == TW_MT_DATA_NACK)
    return 3; // error: data send, nack received
   113d8:	83 e0       	ldi	r24, 0x03	; 3
   113da:	ed cf       	rjmp	.-38     	; 0x113b6 <TwoWire::endTransmission()+0x94>

000113dc <RTC_DS1307::isrunning() [clone .constprop.128]>:
_ZN10RTC_DS13079isrunningEv.constprop.128():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:154
  txBufferLength = 0;
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   113dc:	88 e6       	ldi	r24, 0x68	; 104
   113de:	0e 94 16 7d 	call	0xfa2c	; 0xfa2c <TwoWire::beginTransmission(unsigned char) [clone .constprop.168]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:246
  return true;
}

uint8_t RTC_DS1307::isrunning(void) {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0);
   113e2:	60 e0       	ldi	r22, 0x00	; 0
   113e4:	89 ef       	ldi	r24, 0xF9	; 249
   113e6:	9d e0       	ldi	r25, 0x0D	; 13
   113e8:	0e 94 18 79 	call	0xf230	; 0xf230 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:247
  Wire.endTransmission();
   113ec:	89 ef       	ldi	r24, 0xF9	; 249
   113ee:	9d e0       	ldi	r25, 0x0D	; 13
   113f0:	0e 94 91 89 	call	0x11322	; 0x11322 <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:249

  Wire.requestFrom(DS1307_ADDRESS, 1);
   113f4:	81 e0       	ldi	r24, 0x01	; 1
   113f6:	90 e0       	ldi	r25, 0x00	; 0
   113f8:	0e 94 4f 7b 	call	0xf69e	; 0xf69e <TwoWire::requestFrom(int, int) [clone .constprop.130]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:250
  uint8_t ss = Wire._I2C_READ();
   113fc:	0e 94 56 77 	call	0xeeac	; 0xeeac <TwoWire::read() [clone .constprop.131]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:251
  return !(ss>>7);
   11400:	80 58       	subi	r24, 0x80	; 128
   11402:	87 fb       	bst	r24, 7
   11404:	88 27       	eor	r24, r24
   11406:	80 f9       	bld	r24, 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:252
}
   11408:	08 95       	ret

0001140a <ds2482reset(unsigned char)>:
_Z11ds2482reseth():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:170
	if(i2c_write(DS2482_C_DRST)==FALSE) { i2c_stop();return DS2482_ERR_WRITE; }
	i2c_stop();
	return DS2482_ERR_OK;
	*/        

        Wire.beginTransmission(address);
   1140a:	0e 94 16 7d 	call	0xfa2c	; 0xfa2c <TwoWire::beginTransmission(unsigned char) [clone .constprop.168]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:171
        Wire.write(DS2482_C_DRST);
   1140e:	80 ef       	ldi	r24, 0xF0	; 240
   11410:	90 e0       	ldi	r25, 0x00	; 0
   11412:	0e 94 be 7e 	call	0xfd7c	; 0xfd7c <TwoWire::write(int) [clone .constprop.100]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:172
        if (Wire.endTransmission() == I2C_ERROR_OK)
   11416:	89 ef       	ldi	r24, 0xF9	; 249
   11418:	9d e0       	ldi	r25, 0x0D	; 13
   1141a:	0e 94 91 89 	call	0x11322	; 0x11322 <TwoWire::endTransmission()>
   1141e:	81 11       	cpse	r24, r1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:175
          return DS2482_ERR_OK;
        else
          return DS2482_ERR_I2C_DEVICE;        
   11420:	8a e0       	ldi	r24, 0x0A	; 10
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:177

}
   11422:	08 95       	ret

00011424 <TwoWire::requestFrom(unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:127
uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop) {
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint32_t)0, (uint8_t)0, (uint8_t)sendStop);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
   11424:	86 2f       	mov	r24, r22
twi_readFrom():
   11426:	64 2f       	mov	r22, r20
   11428:	0e 94 01 77 	call	0xee02	; 0xee02 <twi_readFrom.part.0.constprop.170>
requestFrom():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:116
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
   1142c:	10 92 e4 10 	sts	0x10E4, r1	; 0x8010e4 <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:117
  rxBufferLength = read;
   11430:	80 93 e3 10 	sts	0x10E3, r24	; 0x8010e3 <TwoWire::rxBufferLength>
_ZN7TwoWire11requestFromEhh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:129
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}
   11434:	08 95       	ret

00011436 <ds2482owReadByte(unsigned char, unsigned char*)>:
_Z16ds2482owReadBytehPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:720
 * DS2482_ERR_START
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 */
uint8_t ds2482owReadByte(uint8_t address, uint8_t *byte)
{
   11436:	ff 92       	push	r15
   11438:	0f 93       	push	r16
   1143a:	1f 93       	push	r17
   1143c:	cf 93       	push	r28
   1143e:	df 93       	push	r29
   11440:	d8 2f       	mov	r29, r24
   11442:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:738
	i2c_start(address+I2C_WRITE);
	i2c_write(DS2482_C_OWRB);
	i2c_stop();
	*/
	
	Wire.beginTransmission(address);
   11444:	0e 94 16 7d 	call	0xfa2c	; 0xfa2c <TwoWire::beginTransmission(unsigned char) [clone .constprop.168]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:739
        Wire.write(DS2482_C_OWRB);
   11448:	86 e9       	ldi	r24, 0x96	; 150
   1144a:	90 e0       	ldi	r25, 0x00	; 0
   1144c:	0e 94 be 7e 	call	0xfd7c	; 0xfd7c <TwoWire::write(int) [clone .constprop.100]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:740
        if (Wire.endTransmission() != I2C_ERROR_OK)
   11450:	89 ef       	ldi	r24, 0xF9	; 249
   11452:	9d e0       	ldi	r25, 0x0D	; 13
   11454:	0e 94 91 89 	call	0x11322	; 0x11322 <TwoWire::endTransmission()>
   11458:	ce ef       	ldi	r28, 0xFE	; 254
   1145a:	88 23       	and	r24, r24
   1145c:	41 f0       	breq	.+16     	; 0x1146e <ds2482owReadByte(unsigned char, unsigned char*)+0x38>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:741
          return DS2482_ERR_WRITE;
   1145e:	c3 e0       	ldi	r28, 0x03	; 3
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:809
	Wire.requestFrom(address, cnt);	
        if ( Wire.available() >= 1 )
             *byte = Wire.read();	

	return DS2482_ERR_OK;
}
   11460:	8c 2f       	mov	r24, r28
   11462:	df 91       	pop	r29
   11464:	cf 91       	pop	r28
   11466:	1f 91       	pop	r17
   11468:	0f 91       	pop	r16
   1146a:	ff 90       	pop	r15
   1146c:	08 95       	ret
   1146e:	c1 50       	subi	r28, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:750
	 * Keep reading the status register until the 1WB bit is cleared.
	 */
	while(1)
	{
		p++;
		if (p>253)
   11470:	e1 f1       	breq	.+120    	; 0x114ea <ds2482owReadByte(unsigned char, unsigned char*)+0xb4>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:770
		//twiReadByte(byte);
		i2c_stop();		
		*/	

		uint8_t cnt = 1;
                Wire.requestFrom(address, cnt);
   11472:	41 e0       	ldi	r20, 0x01	; 1
   11474:	6d 2f       	mov	r22, r29
   11476:	89 ef       	ldi	r24, 0xF9	; 249
   11478:	9d e0       	ldi	r25, 0x0D	; 13
   1147a:	0e 94 12 8a 	call	0x11424	; 0x11424 <TwoWire::requestFrom(unsigned char, unsigned char)>
available():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:238
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
   1147e:	80 91 e3 10 	lds	r24, 0x10E3	; 0x8010e3 <TwoWire::rxBufferLength>
   11482:	90 91 e4 10 	lds	r25, 0x10E4	; 0x8010e4 <TwoWire::rxBufferIndex>
   11486:	89 1b       	sub	r24, r25
   11488:	99 0b       	sbc	r25, r25
_Z16ds2482owReadBytehPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:771
                if ( Wire.available() >= 1 )
   1148a:	18 16       	cp	r1, r24
   1148c:	19 06       	cpc	r1, r25
   1148e:	1c f4       	brge	.+6      	; 0x11496 <ds2482owReadByte(unsigned char, unsigned char*)+0x60>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:772
                   t = Wire.read();
   11490:	0e 94 56 77 	call	0xeeac	; 0xeeac <TwoWire::read() [clone .constprop.131]>
   11494:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:775
		

		if(!(t & DS2482_S_1WB))
   11496:	f0 fc       	sbrc	r15, 0
   11498:	ea cf       	rjmp	.-44     	; 0x1146e <ds2482owReadByte(unsigned char, unsigned char*)+0x38>
ds2482setReadPointer():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:258
	if(i2c_write(pointer)==FALSE){i2c_stop(); return DS2482_ERR_WRITE;}
	i2c_stop();
	return DS2482_ERR_OK;
	*/

        Wire.beginTransmission(address);
   1149a:	8d 2f       	mov	r24, r29
   1149c:	0e 94 16 7d 	call	0xfa2c	; 0xfa2c <TwoWire::beginTransmission(unsigned char) [clone .constprop.168]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:259
        Wire.write(DS2482_C_SRP);
   114a0:	81 ee       	ldi	r24, 0xE1	; 225
   114a2:	90 e0       	ldi	r25, 0x00	; 0
   114a4:	0e 94 be 7e 	call	0xfd7c	; 0xfd7c <TwoWire::write(int) [clone .constprop.100]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:260
        Wire.write(pointer);
   114a8:	61 ee       	ldi	r22, 0xE1	; 225
   114aa:	89 ef       	ldi	r24, 0xF9	; 249
   114ac:	9d e0       	ldi	r25, 0x0D	; 13
   114ae:	0e 94 18 79 	call	0xf230	; 0xf230 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:261
        if (Wire.endTransmission() == I2C_ERROR_OK)
   114b2:	89 ef       	ldi	r24, 0xF9	; 249
   114b4:	9d e0       	ldi	r25, 0x0D	; 13
   114b6:	0e 94 91 89 	call	0x11322	; 0x11322 <TwoWire::endTransmission()>
   114ba:	c8 2f       	mov	r28, r24
   114bc:	81 11       	cpse	r24, r1
   114be:	cf cf       	rjmp	.-98     	; 0x1145e <ds2482owReadByte(unsigned char, unsigned char*)+0x28>
_Z16ds2482owReadBytehPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:804
	*byte=t;
	i2c_stop();
	*/

	uint8_t cnt = 1;
	Wire.requestFrom(address, cnt);	
   114c0:	41 e0       	ldi	r20, 0x01	; 1
   114c2:	6d 2f       	mov	r22, r29
   114c4:	89 ef       	ldi	r24, 0xF9	; 249
   114c6:	9d e0       	ldi	r25, 0x0D	; 13
   114c8:	0e 94 12 8a 	call	0x11424	; 0x11424 <TwoWire::requestFrom(unsigned char, unsigned char)>
available():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:238
   114cc:	80 91 e3 10 	lds	r24, 0x10E3	; 0x8010e3 <TwoWire::rxBufferLength>
   114d0:	90 91 e4 10 	lds	r25, 0x10E4	; 0x8010e4 <TwoWire::rxBufferIndex>
   114d4:	89 1b       	sub	r24, r25
   114d6:	99 0b       	sbc	r25, r25
_Z16ds2482owReadBytehPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:805
        if ( Wire.available() >= 1 )
   114d8:	18 16       	cp	r1, r24
   114da:	19 06       	cpc	r1, r25
   114dc:	0c f0       	brlt	.+2      	; 0x114e0 <ds2482owReadByte(unsigned char, unsigned char*)+0xaa>
   114de:	c0 cf       	rjmp	.-128    	; 0x11460 <ds2482owReadByte(unsigned char, unsigned char*)+0x2a>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:806
             *byte = Wire.read();	
   114e0:	0e 94 56 77 	call	0xeeac	; 0xeeac <TwoWire::read() [clone .constprop.131]>
   114e4:	f8 01       	movw	r30, r16
   114e6:	80 83       	st	Z, r24
   114e8:	bb cf       	rjmp	.-138    	; 0x11460 <ds2482owReadByte(unsigned char, unsigned char*)+0x2a>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:751
	 */
	while(1)
	{
		p++;
		if (p>253)
			return DS2482_ERR_READ;
   114ea:	c4 e0       	ldi	r28, 0x04	; 4
   114ec:	b9 cf       	rjmp	.-142    	; 0x11460 <ds2482owReadByte(unsigned char, unsigned char*)+0x2a>

000114ee <ds2482owWriteByte(unsigned char, unsigned char)>:
_Z17ds2482owWriteBytehh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:550
 * DS2482_ERR_START
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 */
uint8_t ds2482owWriteByte(uint8_t address, uint8_t byte)
{
   114ee:	0f 93       	push	r16
   114f0:	1f 93       	push	r17
   114f2:	cf 93       	push	r28
   114f4:	df 93       	push	r29
   114f6:	08 2f       	mov	r16, r24
   114f8:	d6 2f       	mov	r29, r22
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:571
	if(i2c_write(DS2482_C_OWWB)==FALSE){i2c_stop();return DS2482_ERR_WRITE;}
	if(i2c_write(byte)==FALSE){i2c_stop();return DS2482_ERR_WRITE;}
	i2c_stop();
	*/

	Wire.beginTransmission(address);
   114fa:	0e 94 16 7d 	call	0xfa2c	; 0xfa2c <TwoWire::beginTransmission(unsigned char) [clone .constprop.168]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:572
        Wire.write(DS2482_C_OWWB);
   114fe:	85 ea       	ldi	r24, 0xA5	; 165
   11500:	90 e0       	ldi	r25, 0x00	; 0
   11502:	0e 94 be 7e 	call	0xfd7c	; 0xfd7c <TwoWire::write(int) [clone .constprop.100]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:573
	Wire.write(byte);
   11506:	6d 2f       	mov	r22, r29
   11508:	89 ef       	ldi	r24, 0xF9	; 249
   1150a:	9d e0       	ldi	r25, 0x0D	; 13
   1150c:	0e 94 18 79 	call	0xf230	; 0xf230 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:574
        if (Wire.endTransmission() != I2C_ERROR_OK)
   11510:	89 ef       	ldi	r24, 0xF9	; 249
   11512:	9d e0       	ldi	r25, 0x0D	; 13
   11514:	0e 94 91 89 	call	0x11322	; 0x11322 <TwoWire::endTransmission()>
   11518:	c8 2f       	mov	r28, r24
   1151a:	81 11       	cpse	r24, r1
   1151c:	1d c0       	rjmp	.+58     	; 0x11558 <ds2482owWriteByte(unsigned char, unsigned char)+0x6a>
   1151e:	1e ef       	ldi	r17, 0xFE	; 254
   11520:	11 50       	subi	r17, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:584
	 * Keep reading the status register until the 1WB bit is cleared.
	 */
	while(1)
	{
		p++;
		if (p>253){
   11522:	e1 f0       	breq	.+56     	; 0x1155c <ds2482owWriteByte(unsigned char, unsigned char)+0x6e>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:605
		twiReadByte(&byte);
		i2c_stop();
		*/
		///todo byresit ukazatel
		uint8_t cnt = 1;
                Wire.requestFrom(address, cnt);
   11524:	41 e0       	ldi	r20, 0x01	; 1
   11526:	60 2f       	mov	r22, r16
   11528:	89 ef       	ldi	r24, 0xF9	; 249
   1152a:	9d e0       	ldi	r25, 0x0D	; 13
   1152c:	0e 94 12 8a 	call	0x11424	; 0x11424 <TwoWire::requestFrom(unsigned char, unsigned char)>
available():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:238
   11530:	80 91 e3 10 	lds	r24, 0x10E3	; 0x8010e3 <TwoWire::rxBufferLength>
   11534:	90 91 e4 10 	lds	r25, 0x10E4	; 0x8010e4 <TwoWire::rxBufferIndex>
   11538:	89 1b       	sub	r24, r25
   1153a:	99 0b       	sbc	r25, r25
_Z17ds2482owWriteBytehh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:606
                if ( Wire.available() >= 1 )
   1153c:	18 16       	cp	r1, r24
   1153e:	19 06       	cpc	r1, r25
   11540:	1c f4       	brge	.+6      	; 0x11548 <ds2482owWriteByte(unsigned char, unsigned char)+0x5a>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:607
                   byte = Wire.read();
   11542:	0e 94 56 77 	call	0xeeac	; 0xeeac <TwoWire::read() [clone .constprop.131]>
   11546:	d8 2f       	mov	r29, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:610


		if(!(byte & DS2482_S_1WB))
   11548:	d0 fd       	sbrc	r29, 0
   1154a:	ea cf       	rjmp	.-44     	; 0x11520 <ds2482owWriteByte(unsigned char, unsigned char)+0x32>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:616
			break;
	}

	
	return DS2482_ERR_OK;
}
   1154c:	8c 2f       	mov	r24, r28
   1154e:	df 91       	pop	r29
   11550:	cf 91       	pop	r28
   11552:	1f 91       	pop	r17
   11554:	0f 91       	pop	r16
   11556:	08 95       	ret
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:575

	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWWB);
	Wire.write(byte);
        if (Wire.endTransmission() != I2C_ERROR_OK)
          return DS2482_ERR_WRITE;
   11558:	c3 e0       	ldi	r28, 0x03	; 3
   1155a:	f8 cf       	rjmp	.-16     	; 0x1154c <ds2482owWriteByte(unsigned char, unsigned char)+0x5e>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:585
	 */
	while(1)
	{
		p++;
		if (p>253){
			return DS2482_ERR_READ;
   1155c:	c4 e0       	ldi	r28, 0x04	; 4
   1155e:	f6 cf       	rjmp	.-20     	; 0x1154c <ds2482owWriteByte(unsigned char, unsigned char)+0x5e>

00011560 <owMatchRom(unsigned char, unsigned char*)>:
_Z10owMatchRomhPh():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:48
 * DS2482_ERR_START
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 */
uint8_t owMatchRom(uint8_t ds2482_address, uint8_t *rom)
{
   11560:	ef 92       	push	r14
   11562:	ff 92       	push	r15
   11564:	1f 93       	push	r17
   11566:	cf 93       	push	r28
   11568:	df 93       	push	r29
   1156a:	18 2f       	mov	r17, r24
   1156c:	7b 01       	movw	r14, r22
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:50
	uint8_t r;
	r = ds2482owWriteByte(ds2482_address, OW_MATCH_ROM);
   1156e:	65 e5       	ldi	r22, 0x55	; 85
   11570:	0e 94 77 8a 	call	0x114ee	; 0x114ee <ds2482owWriteByte(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:51
	if(r)
   11574:	81 11       	cpse	r24, r1
   11576:	0d c0       	rjmp	.+26     	; 0x11592 <owMatchRom(unsigned char, unsigned char*)+0x32>
   11578:	e7 01       	movw	r28, r14
   1157a:	88 e0       	ldi	r24, 0x08	; 8
   1157c:	e8 0e       	add	r14, r24
   1157e:	f1 1c       	adc	r15, r1
owWriteBlock():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:29
{
	uint8_t r, c;
	
	for(c=0;c<length;c++)
	{
		r = ds2482owWriteByte(ds2482_address, *(block+c));
   11580:	69 91       	ld	r22, Y+
   11582:	81 2f       	mov	r24, r17
   11584:	0e 94 77 8a 	call	0x114ee	; 0x114ee <ds2482owWriteByte(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:30
		if(r)
   11588:	81 11       	cpse	r24, r1
   1158a:	03 c0       	rjmp	.+6      	; 0x11592 <owMatchRom(unsigned char, unsigned char*)+0x32>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:27
 */
uint8_t owWriteBlock(uint8_t ds2482_address, uint8_t *block, uint8_t length)
{
	uint8_t r, c;
	
	for(c=0;c<length;c++)
   1158c:	ec 16       	cp	r14, r28
   1158e:	fd 06       	cpc	r15, r29
   11590:	b9 f7       	brne	.-18     	; 0x11580 <owMatchRom(unsigned char, unsigned char*)+0x20>
_Z10owMatchRomhPh():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:59
	r = owWriteBlock(ds2482_address, rom, 8);
	if(r)
		return r;
	
	return DS2482_ERR_OK;
}
   11592:	df 91       	pop	r29
   11594:	cf 91       	pop	r28
   11596:	1f 91       	pop	r17
   11598:	ff 90       	pop	r15
   1159a:	ef 90       	pop	r14
   1159c:	08 95       	ret

0001159e <ds2482owReset(unsigned char)>:
_Z13ds2482owReseth():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:475
 * DS2482_ERR_WRITE
 * DS2482_ERR_READ
 * DS2482_ERR_NO_DEVICE
 */
uint8_t ds2482owReset(uint8_t address)
{
   1159e:	0f 93       	push	r16
   115a0:	1f 93       	push	r17
   115a2:	cf 93       	push	r28
   115a4:	df 93       	push	r29
   115a6:	08 2f       	mov	r16, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:493
	i2c_start(address+I2C_WRITE);
	i2c_write(DS2482_C_OWRS);
	i2c_stop();
	*/

	Wire.beginTransmission(address);
   115a8:	0e 94 16 7d 	call	0xfa2c	; 0xfa2c <TwoWire::beginTransmission(unsigned char) [clone .constprop.168]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:494
        Wire.write(DS2482_C_OWRS);
   115ac:	84 eb       	ldi	r24, 0xB4	; 180
   115ae:	90 e0       	ldi	r25, 0x00	; 0
   115b0:	0e 94 be 7e 	call	0xfd7c	; 0xfd7c <TwoWire::write(int) [clone .constprop.100]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:495
        if (Wire.endTransmission() != I2C_ERROR_OK)
   115b4:	89 ef       	ldi	r24, 0xF9	; 249
   115b6:	9d e0       	ldi	r25, 0x0D	; 13
   115b8:	0e 94 91 89 	call	0x11322	; 0x11322 <TwoWire::endTransmission()>
   115bc:	c8 2f       	mov	r28, r24
   115be:	81 11       	cpse	r24, r1
   115c0:	1b c0       	rjmp	.+54     	; 0x115f8 <ds2482owReset(unsigned char)+0x5a>
   115c2:	de ef       	ldi	r29, 0xFE	; 254
   115c4:	d1 50       	subi	r29, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:520
		//twiReadByte(&byte);
		byte=i2c_readNak();
		i2c_stop();
		*/
		p++;
                if (p>253)
   115c6:	f9 f0       	breq	.+62     	; 0x11606 <ds2482owReset(unsigned char)+0x68>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:524
                  return DS2482_ERR_READ;		

		uint8_t cnt = 1;
		Wire.requestFrom(address, cnt);
   115c8:	41 e0       	ldi	r20, 0x01	; 1
   115ca:	60 2f       	mov	r22, r16
   115cc:	89 ef       	ldi	r24, 0xF9	; 249
   115ce:	9d e0       	ldi	r25, 0x0D	; 13
   115d0:	0e 94 12 8a 	call	0x11424	; 0x11424 <TwoWire::requestFrom(unsigned char, unsigned char)>
available():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:238
   115d4:	80 91 e3 10 	lds	r24, 0x10E3	; 0x8010e3 <TwoWire::rxBufferLength>
   115d8:	90 91 e4 10 	lds	r25, 0x10E4	; 0x8010e4 <TwoWire::rxBufferIndex>
   115dc:	89 1b       	sub	r24, r25
   115de:	99 0b       	sbc	r25, r25
_Z13ds2482owReseth():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:525
		if ( Wire.available() >= 1 )
   115e0:	18 16       	cp	r1, r24
   115e2:	19 06       	cpc	r1, r25
   115e4:	1c f4       	brge	.+6      	; 0x115ec <ds2482owReset(unsigned char)+0x4e>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:526
                   byte = Wire.read();
   115e6:	0e 94 56 77 	call	0xeeac	; 0xeeac <TwoWire::read() [clone .constprop.131]>
   115ea:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:528

		if(!(byte & DS2482_S_1WB))
   115ec:	10 fd       	sbrc	r17, 0
   115ee:	ea cf       	rjmp	.-44     	; 0x115c4 <ds2482owReset(unsigned char)+0x26>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:533
			break;
	}

	/* Check if there is any devices detected */
	if(!(byte & DS2482_S_PPD))
   115f0:	11 fd       	sbrc	r17, 1
   115f2:	03 c0       	rjmp	.+6      	; 0x115fa <ds2482owReset(unsigned char)+0x5c>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:534
		return DS2482_ERR_NO_DEVICE;
   115f4:	c5 e0       	ldi	r28, 0x05	; 5
   115f6:	01 c0       	rjmp	.+2      	; 0x115fa <ds2482owReset(unsigned char)+0x5c>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:496
	*/

	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWRS);
        if (Wire.endTransmission() != I2C_ERROR_OK)
          return DS2482_ERR_WRITE;
   115f8:	c3 e0       	ldi	r28, 0x03	; 3
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:537
	/* Check if there is any devices detected */
	if(!(byte & DS2482_S_PPD))
		return DS2482_ERR_NO_DEVICE;

	return DS2482_ERR_OK;
}
   115fa:	8c 2f       	mov	r24, r28
   115fc:	df 91       	pop	r29
   115fe:	cf 91       	pop	r28
   11600:	1f 91       	pop	r17
   11602:	0f 91       	pop	r16
   11604:	08 95       	ret
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:521
		byte=i2c_readNak();
		i2c_stop();
		*/
		p++;
                if (p>253)
                  return DS2482_ERR_READ;		
   11606:	c4 e0       	ldi	r28, 0x04	; 4
   11608:	f8 cf       	rjmp	.-16     	; 0x115fa <ds2482owReset(unsigned char)+0x5c>

0001160a <owMatchNext(unsigned char, unsigned char*) [clone .constprop.98]>:
_Z11owMatchNexthPh.constprop.98():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:122
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 * DS2482_ERR_READ
 * DS2482_ERR_NO_DEVICE
 */
uint8_t owMatchNext(uint8_t ds2482_address, uint8_t *rom)
   1160a:	df 92       	push	r13
   1160c:	ef 92       	push	r14
   1160e:	ff 92       	push	r15
   11610:	0f 93       	push	r16
   11612:	1f 93       	push	r17
   11614:	cf 93       	push	r28
   11616:	df 93       	push	r29
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:130
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
	serial_byte_number = 0;

	if(lastDevice)
   11618:	90 91 64 0b 	lds	r25, 0x0B64	; 0x800b64 <lastDevice>
   1161c:	99 23       	and	r25, r25
   1161e:	51 f0       	breq	.+20     	; 0x11634 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.98]+0x2a>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:131
		return DS2482_ERR_NO_DEVICE;
   11620:	d5 e0       	ldi	r29, 0x05	; 5
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:190
	}else
	{
		return DS2482_ERR_NO_DEVICE;
	}
	return DS2482_ERR_OK;
}
   11622:	8d 2f       	mov	r24, r29
   11624:	df 91       	pop	r29
   11626:	cf 91       	pop	r28
   11628:	1f 91       	pop	r17
   1162a:	0f 91       	pop	r16
   1162c:	ff 90       	pop	r15
   1162e:	ef 90       	pop	r14
   11630:	df 90       	pop	r13
   11632:	08 95       	ret
   11634:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:133
	serial_byte_number = 0;

	if(lastDevice)
		return DS2482_ERR_NO_DEVICE;

	r = owReset(ds2482_address);
   11636:	0e 94 cf 8a 	call	0x1159e	; 0x1159e <ds2482owReset(unsigned char)>
   1163a:	d8 2f       	mov	r29, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:134
	if(r)	return r;
   1163c:	81 11       	cpse	r24, r1
   1163e:	f1 cf       	rjmp	.-30     	; 0x11622 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.98]+0x18>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:136

	r = owWriteByte(ds2482_address, OW_SEARCH_ROM);
   11640:	60 ef       	ldi	r22, 0xF0	; 240
   11642:	8f 2d       	mov	r24, r15
   11644:	0e 94 77 8a 	call	0x114ee	; 0x114ee <ds2482owWriteByte(unsigned char, unsigned char)>
   11648:	d8 2f       	mov	r29, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:128
{
	uint8_t r, bit_number, last_zero, direction, bit_test, serial_byte_mask, serial_byte_number;
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
	serial_byte_number = 0;
   1164a:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:127
uint8_t owMatchNext(uint8_t ds2482_address, uint8_t *rom)
{
	uint8_t r, bit_number, last_zero, direction, bit_test, serial_byte_mask, serial_byte_number;
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
   1164c:	11 e0       	ldi	r17, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:125
 * DS2482_ERR_NO_DEVICE
 */
uint8_t owMatchNext(uint8_t ds2482_address, uint8_t *rom)
{
	uint8_t r, bit_number, last_zero, direction, bit_test, serial_byte_mask, serial_byte_number;
	bit_number = 1;
   1164e:	01 e0       	ldi	r16, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:137

	r = owReset(ds2482_address);
	if(r)	return r;

	r = owWriteByte(ds2482_address, OW_SEARCH_ROM);
	if(r)	return r;
   11650:	81 11       	cpse	r24, r1
   11652:	e7 cf       	rjmp	.-50     	; 0x11622 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.98]+0x18>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:142
	
	while(serial_byte_number < 8)
	{
		/* If this discrepancy occurs before the last, use the same bit as we did the last time in this place */
		if(bit_number < lastDiscrepancy)
   11654:	80 91 5b 0b 	lds	r24, 0x0B5B	; 0x800b5b <lastDiscrepancy>
   11658:	08 17       	cp	r16, r24
   1165a:	50 f4       	brcc	.+20     	; 0x11670 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.98]+0x66>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:143
			direction = ((rom[serial_byte_number] & serial_byte_mask) > 0);
   1165c:	ee 2d       	mov	r30, r14
   1165e:	f0 e0       	ldi	r31, 0x00	; 0
   11660:	e4 5a       	subi	r30, 0xA4	; 164
   11662:	f4 4f       	sbci	r31, 0xF4	; 244
   11664:	80 81       	ld	r24, Z
   11666:	81 23       	and	r24, r17
   11668:	c1 e0       	ldi	r28, 0x01	; 1
   1166a:	29 f4       	brne	.+10     	; 0x11676 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.98]+0x6c>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:146
		else
			/* If same bit as last time, pick 1, else pick 0 */
			direction = (bit_number == lastDiscrepancy);
   1166c:	c0 e0       	ldi	r28, 0x00	; 0
   1166e:	03 c0       	rjmp	.+6      	; 0x11676 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.98]+0x6c>
   11670:	c1 e0       	ldi	r28, 0x01	; 1
   11672:	80 13       	cpse	r24, r16
   11674:	fb cf       	rjmp	.-10     	; 0x1166c <owMatchNext(unsigned char, unsigned char*) [clone .constprop.98]+0x62>
ds2482owWriteTriplet():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:666
	i2c_write(DS2482_C_OWT);
	i2c_write((*direction)?0x80:0x00);
	i2c_stop();
	*/

	Wire.beginTransmission(address);
   11676:	8f 2d       	mov	r24, r15
   11678:	0e 94 16 7d 	call	0xfa2c	; 0xfa2c <TwoWire::beginTransmission(unsigned char) [clone .constprop.168]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:667
        Wire.write(DS2482_C_OWT);
   1167c:	88 e7       	ldi	r24, 0x78	; 120
   1167e:	90 e0       	ldi	r25, 0x00	; 0
   11680:	0e 94 be 7e 	call	0xfd7c	; 0xfd7c <TwoWire::write(int) [clone .constprop.100]>
_Z11owMatchNexthPh.constprop.98():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:668
        Wire.write((*direction)?0x80:0x00);
   11684:	90 e0       	ldi	r25, 0x00	; 0
   11686:	80 e0       	ldi	r24, 0x00	; 0
ds2482owWriteTriplet():
   11688:	cc 23       	and	r28, r28
   1168a:	11 f0       	breq	.+4      	; 0x11690 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.98]+0x86>
_Z11owMatchNexthPh.constprop.98():
   1168c:	80 e8       	ldi	r24, 0x80	; 128
   1168e:	90 e0       	ldi	r25, 0x00	; 0
ds2482owWriteTriplet():
   11690:	0e 94 be 7e 	call	0xfd7c	; 0xfd7c <TwoWire::write(int) [clone .constprop.100]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:669
        if (Wire.endTransmission() != I2C_ERROR_OK)
   11694:	89 ef       	ldi	r24, 0xF9	; 249
   11696:	9d e0       	ldi	r25, 0x0D	; 13
   11698:	0e 94 91 89 	call	0x11322	; 0x11322 <TwoWire::endTransmission()>
   1169c:	81 11       	cpse	r24, r1
   1169e:	53 c0       	rjmp	.+166    	; 0x11746 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.98]+0x13c>
   116a0:	6e ef       	ldi	r22, 0xFE	; 254
   116a2:	d6 2e       	mov	r13, r22
   116a4:	da 94       	dec	r13
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:679
	 * Keep reading the status register until the 1WB bit is cleared.
	 */
	while(1)
	{
		p++;
		if (p>253)
   116a6:	dd 20       	and	r13, r13
   116a8:	09 f4       	brne	.+2      	; 0x116ac <owMatchNext(unsigned char, unsigned char*) [clone .constprop.98]+0xa2>
   116aa:	4f c0       	rjmp	.+158    	; 0x1174a <owMatchNext(unsigned char, unsigned char*) [clone .constprop.98]+0x140>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:698
		twiReadByte(direction);
		i2c_stop();
		*/
	
		uint8_t cnt = 1;
                Wire.requestFrom(address, cnt);	
   116ac:	41 e0       	ldi	r20, 0x01	; 1
   116ae:	6f 2d       	mov	r22, r15
   116b0:	89 ef       	ldi	r24, 0xF9	; 249
   116b2:	9d e0       	ldi	r25, 0x0D	; 13
   116b4:	0e 94 12 8a 	call	0x11424	; 0x11424 <TwoWire::requestFrom(unsigned char, unsigned char)>
available():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:238
   116b8:	80 91 e3 10 	lds	r24, 0x10E3	; 0x8010e3 <TwoWire::rxBufferLength>
   116bc:	90 91 e4 10 	lds	r25, 0x10E4	; 0x8010e4 <TwoWire::rxBufferIndex>
   116c0:	89 1b       	sub	r24, r25
   116c2:	99 0b       	sbc	r25, r25
ds2482owWriteTriplet():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:699
                if ( Wire.available() >= 1 )
   116c4:	18 16       	cp	r1, r24
   116c6:	19 06       	cpc	r1, r25
   116c8:	1c f4       	brge	.+6      	; 0x116d0 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.98]+0xc6>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:700
                   *direction = Wire.read();
   116ca:	0e 94 56 77 	call	0xeeac	; 0xeeac <TwoWire::read() [clone .constprop.131]>
   116ce:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:702

		if(!((*direction) & DS2482_S_1WB))
   116d0:	c0 fd       	sbrc	r28, 0
   116d2:	e8 cf       	rjmp	.-48     	; 0x116a4 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.98]+0x9a>
_Z11owMatchNexthPh.constprop.98():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:152

		r=ds2482owWriteTriplet(ds2482_address, &direction);
		if(r) return r;

		/* Convert direction to bit_test value */
		bit_test = (direction&(DS2482_S_SBR|DS2482_S_TSB)) >> 5;
   116d4:	2c 2f       	mov	r18, r28
   116d6:	30 e0       	ldi	r19, 0x00	; 0
   116d8:	c9 01       	movw	r24, r18
   116da:	45 e0       	ldi	r20, 0x05	; 5
   116dc:	95 95       	asr	r25
   116de:	87 95       	ror	r24
   116e0:	4a 95       	dec	r20
   116e2:	e1 f7       	brne	.-8      	; 0x116dc <owMatchNext(unsigned char, unsigned char*) [clone .constprop.98]+0xd2>
   116e4:	83 70       	andi	r24, 0x03	; 3
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:153
		direction>>=7;
   116e6:	22 0f       	add	r18, r18
   116e8:	23 2f       	mov	r18, r19
   116ea:	22 1f       	adc	r18, r18
   116ec:	33 0b       	sbc	r19, r19
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:154
		if(bit_test == 3)	/* Both bits where 1 */
   116ee:	83 30       	cpi	r24, 0x03	; 3
   116f0:	99 f0       	breq	.+38     	; 0x11718 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.98]+0x10e>
   116f2:	ee 2d       	mov	r30, r14
   116f4:	f0 e0       	ldi	r31, 0x00	; 0
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:157
			break;

		if(bit_test == 0)
   116f6:	81 11       	cpse	r24, r1
   116f8:	1b c0       	rjmp	.+54     	; 0x11730 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.98]+0x126>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:160
		{
			/* Multiple matches, the DS2482 handled our branching, we brached to direction */ 
			if(!direction)
   116fa:	22 23       	and	r18, r18
   116fc:	11 f1       	breq	.+68     	; 0x11742 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.98]+0x138>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:167
		}
		/* else bit_test > 0 which means the direction was decied automaticly by the DS2482 */

		/* Set or clear the bit in the ROM */
		if(direction)
			rom[serial_byte_number] |= serial_byte_mask;
   116fe:	e4 5a       	subi	r30, 0xA4	; 164
   11700:	f4 4f       	sbci	r31, 0xF4	; 244
   11702:	80 81       	ld	r24, Z
   11704:	81 2b       	or	r24, r17
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:169
		else
			rom[serial_byte_number] &= ~serial_byte_mask;
   11706:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:171
			
		bit_number++;
   11708:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:172
		serial_byte_mask <<= 1;
   1170a:	11 0f       	add	r17, r17
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:174

		if(serial_byte_mask == 0)
   1170c:	11 f4       	brne	.+4      	; 0x11712 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.98]+0x108>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:176
		{
			serial_byte_number++;
   1170e:	e3 94       	inc	r14
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:177
			serial_byte_mask = 1;
   11710:	11 e0       	ldi	r17, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:139
	if(r)	return r;

	r = owWriteByte(ds2482_address, OW_SEARCH_ROM);
	if(r)	return r;
	
	while(serial_byte_number < 8)
   11712:	88 e0       	ldi	r24, 0x08	; 8
   11714:	e8 12       	cpse	r14, r24
   11716:	9e cf       	rjmp	.-196    	; 0x11654 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.98]+0x4a>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:181
			serial_byte_number++;
			serial_byte_mask = 1;
		}
	}	/* while */
	
	if(!(bit_number < 65))
   11718:	01 34       	cpi	r16, 0x41	; 65
   1171a:	08 f4       	brcc	.+2      	; 0x1171e <owMatchNext(unsigned char, unsigned char*) [clone .constprop.98]+0x114>
   1171c:	81 cf       	rjmp	.-254    	; 0x11620 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.98]+0x16>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:183
	{
		lastDiscrepancy = last_zero;
   1171e:	d0 93 5b 0b 	sts	0x0B5B, r29	; 0x800b5b <lastDiscrepancy>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:184
		lastDevice = (lastDiscrepancy == 0);
   11722:	81 e0       	ldi	r24, 0x01	; 1
   11724:	d1 11       	cpse	r29, r1
   11726:	80 e0       	ldi	r24, 0x00	; 0
   11728:	80 93 64 0b 	sts	0x0B64, r24	; 0x800b64 <lastDevice>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:189
	}else
	{
		return DS2482_ERR_NO_DEVICE;
	}
	return DS2482_ERR_OK;
   1172c:	d0 e0       	ldi	r29, 0x00	; 0
   1172e:	79 cf       	rjmp	.-270    	; 0x11622 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.98]+0x18>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:166
				last_zero = bit_number;
		}
		/* else bit_test > 0 which means the direction was decied automaticly by the DS2482 */

		/* Set or clear the bit in the ROM */
		if(direction)
   11730:	21 11       	cpse	r18, r1
   11732:	e5 cf       	rjmp	.-54     	; 0x116fe <owMatchNext(unsigned char, unsigned char*) [clone .constprop.98]+0xf4>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:169
			rom[serial_byte_number] |= serial_byte_mask;
		else
			rom[serial_byte_number] &= ~serial_byte_mask;
   11734:	e4 5a       	subi	r30, 0xA4	; 164
   11736:	f4 4f       	sbci	r31, 0xF4	; 244
   11738:	80 81       	ld	r24, Z
   1173a:	91 2f       	mov	r25, r17
   1173c:	90 95       	com	r25
   1173e:	89 23       	and	r24, r25
   11740:	e2 cf       	rjmp	.-60     	; 0x11706 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.98]+0xfc>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:160
			break;

		if(bit_test == 0)
		{
			/* Multiple matches, the DS2482 handled our branching, we brached to direction */ 
			if(!direction)
   11742:	d0 2f       	mov	r29, r16
   11744:	f7 cf       	rjmp	.-18     	; 0x11734 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.98]+0x12a>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:670

	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWT);
        Wire.write((*direction)?0x80:0x00);
        if (Wire.endTransmission() != I2C_ERROR_OK)
          return DS2482_ERR_WRITE;
   11746:	d3 e0       	ldi	r29, 0x03	; 3
   11748:	6c cf       	rjmp	.-296    	; 0x11622 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.98]+0x18>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:680
	 */
	while(1)
	{
		p++;
		if (p>253)
			return DS2482_ERR_READ;
   1174a:	d4 e0       	ldi	r29, 0x04	; 4
   1174c:	6a cf       	rjmp	.-300    	; 0x11622 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.98]+0x18>

0001174e <RTC_DS1307::adjust(DateTime const&)>:
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:254

void RTC_DS1307::adjust(const DateTime& dt) {
   1174e:	1f 93       	push	r17
   11750:	cf 93       	push	r28
   11752:	df 93       	push	r29
   11754:	ec 01       	movw	r28, r24
beginTransmission():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:154
  txBufferLength = 0;
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   11756:	88 e6       	ldi	r24, 0x68	; 104
   11758:	0e 94 16 7d 	call	0xfa2c	; 0xfa2c <TwoWire::beginTransmission(unsigned char) [clone .constprop.168]>
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:256
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
   1175c:	60 e0       	ldi	r22, 0x00	; 0
   1175e:	89 ef       	ldi	r24, 0xF9	; 249
   11760:	9d e0       	ldi	r25, 0x0D	; 13
   11762:	0e 94 18 79 	call	0xf230	; 0xf230 <TwoWire::write(unsigned char)>
   11766:	2d 81       	ldd	r18, Y+5	; 0x05
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
   11768:	1a e0       	ldi	r17, 0x0A	; 10
   1176a:	82 2f       	mov	r24, r18
   1176c:	61 2f       	mov	r22, r17
   1176e:	0e 94 4e ae 	call	0x15c9c	; 0x15c9c <__udivmodqi4>
   11772:	68 2f       	mov	r22, r24
   11774:	66 0f       	add	r22, r22
   11776:	68 0f       	add	r22, r24
   11778:	66 0f       	add	r22, r22
   1177a:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:258

void RTC_DS1307::adjust(const DateTime& dt) {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
  //Wire._I2C_WRITE(0x80);
  Wire._I2C_WRITE(bin2bcd(dt.second()));
   1177c:	89 ef       	ldi	r24, 0xF9	; 249
   1177e:	9d e0       	ldi	r25, 0x0D	; 13
   11780:	0e 94 18 79 	call	0xf230	; 0xf230 <TwoWire::write(unsigned char)>
   11784:	2c 81       	ldd	r18, Y+4	; 0x04
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
   11786:	82 2f       	mov	r24, r18
   11788:	61 2f       	mov	r22, r17
   1178a:	0e 94 4e ae 	call	0x15c9c	; 0x15c9c <__udivmodqi4>
   1178e:	68 2f       	mov	r22, r24
   11790:	66 0f       	add	r22, r22
   11792:	68 0f       	add	r22, r24
   11794:	66 0f       	add	r22, r22
   11796:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:259
void RTC_DS1307::adjust(const DateTime& dt) {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
  //Wire._I2C_WRITE(0x80);
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
   11798:	89 ef       	ldi	r24, 0xF9	; 249
   1179a:	9d e0       	ldi	r25, 0x0D	; 13
   1179c:	0e 94 18 79 	call	0xf230	; 0xf230 <TwoWire::write(unsigned char)>
   117a0:	2b 81       	ldd	r18, Y+3	; 0x03
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
   117a2:	82 2f       	mov	r24, r18
   117a4:	61 2f       	mov	r22, r17
   117a6:	0e 94 4e ae 	call	0x15c9c	; 0x15c9c <__udivmodqi4>
   117aa:	68 2f       	mov	r22, r24
   117ac:	66 0f       	add	r22, r22
   117ae:	68 0f       	add	r22, r24
   117b0:	66 0f       	add	r22, r22
   117b2:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:260
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
  //Wire._I2C_WRITE(0x80);
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
   117b4:	89 ef       	ldi	r24, 0xF9	; 249
   117b6:	9d e0       	ldi	r25, 0x0D	; 13
   117b8:	0e 94 18 79 	call	0xf230	; 0xf230 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:261
  Wire._I2C_WRITE(bin2bcd(0));
   117bc:	60 e0       	ldi	r22, 0x00	; 0
   117be:	89 ef       	ldi	r24, 0xF9	; 249
   117c0:	9d e0       	ldi	r25, 0x0D	; 13
   117c2:	0e 94 18 79 	call	0xf230	; 0xf230 <TwoWire::write(unsigned char)>
   117c6:	2a 81       	ldd	r18, Y+2	; 0x02
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
   117c8:	82 2f       	mov	r24, r18
   117ca:	61 2f       	mov	r22, r17
   117cc:	0e 94 4e ae 	call	0x15c9c	; 0x15c9c <__udivmodqi4>
   117d0:	68 2f       	mov	r22, r24
   117d2:	66 0f       	add	r22, r22
   117d4:	68 0f       	add	r22, r24
   117d6:	66 0f       	add	r22, r22
   117d8:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:262
  //Wire._I2C_WRITE(0x80);
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
   117da:	89 ef       	ldi	r24, 0xF9	; 249
   117dc:	9d e0       	ldi	r25, 0x0D	; 13
   117de:	0e 94 18 79 	call	0xf230	; 0xf230 <TwoWire::write(unsigned char)>
   117e2:	29 81       	ldd	r18, Y+1	; 0x01
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
   117e4:	82 2f       	mov	r24, r18
   117e6:	61 2f       	mov	r22, r17
   117e8:	0e 94 4e ae 	call	0x15c9c	; 0x15c9c <__udivmodqi4>
   117ec:	68 2f       	mov	r22, r24
   117ee:	66 0f       	add	r22, r22
   117f0:	68 0f       	add	r22, r24
   117f2:	66 0f       	add	r22, r22
   117f4:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:263
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
  Wire._I2C_WRITE(bin2bcd(dt.month()));
   117f6:	89 ef       	ldi	r24, 0xF9	; 249
   117f8:	9d e0       	ldi	r25, 0x0D	; 13
   117fa:	0e 94 18 79 	call	0xf230	; 0xf230 <TwoWire::write(unsigned char)>
   117fe:	28 81       	ld	r18, Y
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
   11800:	82 2f       	mov	r24, r18
   11802:	61 2f       	mov	r22, r17
   11804:	0e 94 4e ae 	call	0x15c9c	; 0x15c9c <__udivmodqi4>
   11808:	68 2f       	mov	r22, r24
   1180a:	66 0f       	add	r22, r22
   1180c:	68 0f       	add	r22, r24
   1180e:	66 0f       	add	r22, r22
   11810:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:264
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
  Wire._I2C_WRITE(bin2bcd(dt.month()));
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000));
   11812:	89 ef       	ldi	r24, 0xF9	; 249
   11814:	9d e0       	ldi	r25, 0x0D	; 13
   11816:	0e 94 18 79 	call	0xf230	; 0xf230 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:265
  Wire.endTransmission();
   1181a:	89 ef       	ldi	r24, 0xF9	; 249
   1181c:	9d e0       	ldi	r25, 0x0D	; 13
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:266
}
   1181e:	df 91       	pop	r29
   11820:	cf 91       	pop	r28
   11822:	1f 91       	pop	r17
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:265
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
  Wire._I2C_WRITE(bin2bcd(dt.month()));
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000));
  Wire.endTransmission();
   11824:	0c 94 91 89 	jmp	0x11322	; 0x11322 <TwoWire::endTransmission()>

00011828 <PubSubClient::connected()>:
_ZN12PubSubClient9connectedEv():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:538
    buf[pos-i-1] = (i & 0xFF);
    return pos;
}


boolean PubSubClient::connected() {
   11828:	cf 93       	push	r28
   1182a:	df 93       	push	r29
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:540
    boolean rc;
    if (_client == NULL ) {
   1182c:	fc 01       	movw	r30, r24
   1182e:	a0 81       	ld	r26, Z
   11830:	b1 81       	ldd	r27, Z+1	; 0x01
   11832:	10 97       	sbiw	r26, 0x00	; 0
   11834:	21 f4       	brne	.+8      	; 0x1183e <PubSubClient::connected()+0x16>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:543
        rc = false;
    } else {
        rc = (int)_client->connected();
   11836:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:553
                _client->stop();
            }
        }
    }
    return rc;
}
   11838:	df 91       	pop	r29
   1183a:	cf 91       	pop	r28
   1183c:	08 95       	ret
   1183e:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:543
boolean PubSubClient::connected() {
    boolean rc;
    if (_client == NULL ) {
        rc = false;
    } else {
        rc = (int)_client->connected();
   11840:	ed 91       	ld	r30, X+
   11842:	fc 91       	ld	r31, X
   11844:	11 97       	sbiw	r26, 0x01	; 1
   11846:	06 88       	ldd	r0, Z+22	; 0x16
   11848:	f7 89       	ldd	r31, Z+23	; 0x17
   1184a:	e0 2d       	mov	r30, r0
   1184c:	cd 01       	movw	r24, r26
   1184e:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:544
        if (!rc) {
   11850:	81 11       	cpse	r24, r1
   11852:	1e c0       	rjmp	.+60     	; 0x11890 <PubSubClient::connected()+0x68>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:545
            if (this->_state == MQTT_CONNECTED) {
   11854:	fe 01       	movw	r30, r28
   11856:	e5 5e       	subi	r30, 0xE5	; 229
   11858:	fd 4f       	sbci	r31, 0xFD	; 253
   1185a:	80 81       	ld	r24, Z
   1185c:	91 81       	ldd	r25, Z+1	; 0x01
   1185e:	89 2b       	or	r24, r25
   11860:	51 f7       	brne	.-44     	; 0x11836 <PubSubClient::connected()+0xe>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:546
                this->_state = MQTT_CONNECTION_LOST;
   11862:	8d ef       	ldi	r24, 0xFD	; 253
   11864:	9f ef       	ldi	r25, 0xFF	; 255
   11866:	91 83       	std	Z+1, r25	; 0x01
   11868:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:547
                _client->flush();
   1186a:	88 81       	ld	r24, Y
   1186c:	99 81       	ldd	r25, Y+1	; 0x01
   1186e:	dc 01       	movw	r26, r24
   11870:	ed 91       	ld	r30, X+
   11872:	fc 91       	ld	r31, X
   11874:	06 80       	ldd	r0, Z+6	; 0x06
   11876:	f7 81       	ldd	r31, Z+7	; 0x07
   11878:	e0 2d       	mov	r30, r0
   1187a:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:548
                _client->stop();
   1187c:	88 81       	ld	r24, Y
   1187e:	99 81       	ldd	r25, Y+1	; 0x01
   11880:	dc 01       	movw	r26, r24
   11882:	ed 91       	ld	r30, X+
   11884:	fc 91       	ld	r31, X
   11886:	04 88       	ldd	r0, Z+20	; 0x14
   11888:	f5 89       	ldd	r31, Z+21	; 0x15
   1188a:	e0 2d       	mov	r30, r0
   1188c:	19 95       	eicall
   1188e:	d3 cf       	rjmp	.-90     	; 0x11836 <PubSubClient::connected()+0xe>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:543
boolean PubSubClient::connected() {
    boolean rc;
    if (_client == NULL ) {
        rc = false;
    } else {
        rc = (int)_client->connected();
   11890:	81 e0       	ldi	r24, 0x01	; 1
   11892:	d2 cf       	rjmp	.-92     	; 0x11838 <PubSubClient::connected()+0x10>

00011894 <PubSubClient::loop() [clone .constprop.107]>:
_ZN12PubSubClient4loopEv.constprop.107():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:282
    }

    return len;
}

boolean PubSubClient::loop() {
   11894:	3f 92       	push	r3
   11896:	4f 92       	push	r4
   11898:	5f 92       	push	r5
   1189a:	6f 92       	push	r6
   1189c:	7f 92       	push	r7
   1189e:	8f 92       	push	r8
   118a0:	9f 92       	push	r9
   118a2:	af 92       	push	r10
   118a4:	bf 92       	push	r11
   118a6:	cf 92       	push	r12
   118a8:	df 92       	push	r13
   118aa:	ef 92       	push	r14
   118ac:	ff 92       	push	r15
   118ae:	0f 93       	push	r16
   118b0:	1f 93       	push	r17
   118b2:	cf 93       	push	r28
   118b4:	df 93       	push	r29
   118b6:	1f 92       	push	r1
   118b8:	cd b7       	in	r28, 0x3d	; 61
   118ba:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:345
            }
        }
        return true;
    }
    return false;
}
   118bc:	4d b6       	in	r4, 0x3d	; 61
   118be:	5e b6       	in	r5, 0x3e	; 62
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:283

    return len;
}

boolean PubSubClient::loop() {
    if (connected()) {
   118c0:	82 e1       	ldi	r24, 0x12	; 18
   118c2:	9e e0       	ldi	r25, 0x0E	; 14
   118c4:	0e 94 14 8c 	call	0x11828	; 0x11828 <PubSubClient::connected()>
   118c8:	98 2e       	mov	r9, r24
   118ca:	88 23       	and	r24, r24
   118cc:	09 f4       	brne	.+2      	; 0x118d0 <PubSubClient::loop() [clone .constprop.107]+0x3c>
   118ce:	45 c0       	rjmp	.+138    	; 0x1195a <PubSubClient::loop() [clone .constprop.107]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:284
        unsigned long t = millis();
   118d0:	0e 94 1d 85 	call	0x10a3a	; 0x10a3a <millis>
   118d4:	6b 01       	movw	r12, r22
   118d6:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:285
        if ((t - lastInActivity > MQTT_KEEPALIVE*1000UL) || (t - lastOutActivity > MQTT_KEEPALIVE*1000UL)) {
   118d8:	80 91 1a 10 	lds	r24, 0x101A	; 0x80101a <mqtt_client+0x208>
   118dc:	90 91 1b 10 	lds	r25, 0x101B	; 0x80101b <mqtt_client+0x209>
   118e0:	a0 91 1c 10 	lds	r26, 0x101C	; 0x80101c <mqtt_client+0x20a>
   118e4:	b0 91 1d 10 	lds	r27, 0x101D	; 0x80101d <mqtt_client+0x20b>
   118e8:	a7 01       	movw	r20, r14
   118ea:	96 01       	movw	r18, r12
   118ec:	28 1b       	sub	r18, r24
   118ee:	39 0b       	sbc	r19, r25
   118f0:	4a 0b       	sbc	r20, r26
   118f2:	5b 0b       	sbc	r21, r27
   118f4:	da 01       	movw	r26, r20
   118f6:	c9 01       	movw	r24, r18
   118f8:	89 39       	cpi	r24, 0x99	; 153
   118fa:	9a 43       	sbci	r25, 0x3A	; 58
   118fc:	a1 05       	cpc	r26, r1
   118fe:	b1 05       	cpc	r27, r1
   11900:	b0 f4       	brcc	.+44     	; 0x1192e <PubSubClient::loop() [clone .constprop.107]+0x9a>
   11902:	80 91 16 10 	lds	r24, 0x1016	; 0x801016 <mqtt_client+0x204>
   11906:	90 91 17 10 	lds	r25, 0x1017	; 0x801017 <mqtt_client+0x205>
   1190a:	a0 91 18 10 	lds	r26, 0x1018	; 0x801018 <mqtt_client+0x206>
   1190e:	b0 91 19 10 	lds	r27, 0x1019	; 0x801019 <mqtt_client+0x207>
   11912:	a7 01       	movw	r20, r14
   11914:	96 01       	movw	r18, r12
   11916:	28 1b       	sub	r18, r24
   11918:	39 0b       	sbc	r19, r25
   1191a:	4a 0b       	sbc	r20, r26
   1191c:	5b 0b       	sbc	r21, r27
   1191e:	da 01       	movw	r26, r20
   11920:	c9 01       	movw	r24, r18
   11922:	89 39       	cpi	r24, 0x99	; 153
   11924:	9a 43       	sbci	r25, 0x3A	; 58
   11926:	a1 05       	cpc	r26, r1
   11928:	b1 05       	cpc	r27, r1
   1192a:	08 f4       	brcc	.+2      	; 0x1192e <PubSubClient::loop() [clone .constprop.107]+0x9a>
   1192c:	52 c0       	rjmp	.+164    	; 0x119d2 <PubSubClient::loop() [clone .constprop.107]+0x13e>
   1192e:	80 91 12 0e 	lds	r24, 0x0E12	; 0x800e12 <mqtt_client>
   11932:	90 91 13 0e 	lds	r25, 0x0E13	; 0x800e13 <mqtt_client+0x1>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:286
            if (pingOutstanding) {
   11936:	20 91 1e 10 	lds	r18, 0x101E	; 0x80101e <mqtt_client+0x20c>
   1193a:	22 23       	and	r18, r18
   1193c:	39 f1       	breq	.+78     	; 0x1198c <PubSubClient::loop() [clone .constprop.107]+0xf8>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:287
                this->_state = MQTT_CONNECTION_TIMEOUT;
   1193e:	2c ef       	ldi	r18, 0xFC	; 252
   11940:	3f ef       	ldi	r19, 0xFF	; 255
   11942:	30 93 2e 10 	sts	0x102E, r19	; 0x80102e <mqtt_client+0x21c>
   11946:	20 93 2d 10 	sts	0x102D, r18	; 0x80102d <mqtt_client+0x21b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:288
                _client->stop();
   1194a:	dc 01       	movw	r26, r24
   1194c:	ed 91       	ld	r30, X+
   1194e:	fc 91       	ld	r31, X
   11950:	04 88       	ldd	r0, Z+20	; 0x14
   11952:	f5 89       	ldd	r31, Z+21	; 0x15
   11954:	e0 2d       	mov	r30, r0
   11956:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:289
                return false;
   11958:	91 2c       	mov	r9, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:345
            }
        }
        return true;
    }
    return false;
}
   1195a:	89 2d       	mov	r24, r9
   1195c:	0f b6       	in	r0, 0x3f	; 63
   1195e:	f8 94       	cli
   11960:	5e be       	out	0x3e, r5	; 62
   11962:	0f be       	out	0x3f, r0	; 63
   11964:	4d be       	out	0x3d, r4	; 61
   11966:	0f 90       	pop	r0
   11968:	df 91       	pop	r29
   1196a:	cf 91       	pop	r28
   1196c:	1f 91       	pop	r17
   1196e:	0f 91       	pop	r16
   11970:	ff 90       	pop	r15
   11972:	ef 90       	pop	r14
   11974:	df 90       	pop	r13
   11976:	cf 90       	pop	r12
   11978:	bf 90       	pop	r11
   1197a:	af 90       	pop	r10
   1197c:	9f 90       	pop	r9
   1197e:	8f 90       	pop	r8
   11980:	7f 90       	pop	r7
   11982:	6f 90       	pop	r6
   11984:	5f 90       	pop	r5
   11986:	4f 90       	pop	r4
   11988:	3f 90       	pop	r3
   1198a:	08 95       	ret
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:291
            if (pingOutstanding) {
                this->_state = MQTT_CONNECTION_TIMEOUT;
                _client->stop();
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
   1198c:	20 ec       	ldi	r18, 0xC0	; 192
   1198e:	20 93 14 0e 	sts	0x0E14, r18	; 0x800e14 <mqtt_client+0x2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:292
                buffer[1] = 0;
   11992:	10 92 15 0e 	sts	0x0E15, r1	; 0x800e15 <mqtt_client+0x3>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:293
                _client->write(buffer,2);
   11996:	dc 01       	movw	r26, r24
   11998:	ed 91       	ld	r30, X+
   1199a:	fc 91       	ld	r31, X
   1199c:	02 80       	ldd	r0, Z+2	; 0x02
   1199e:	f3 81       	ldd	r31, Z+3	; 0x03
   119a0:	e0 2d       	mov	r30, r0
   119a2:	42 e0       	ldi	r20, 0x02	; 2
   119a4:	50 e0       	ldi	r21, 0x00	; 0
   119a6:	64 e1       	ldi	r22, 0x14	; 20
   119a8:	7e e0       	ldi	r23, 0x0E	; 14
   119aa:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:294
                lastOutActivity = t;
   119ac:	c0 92 16 10 	sts	0x1016, r12	; 0x801016 <mqtt_client+0x204>
   119b0:	d0 92 17 10 	sts	0x1017, r13	; 0x801017 <mqtt_client+0x205>
   119b4:	e0 92 18 10 	sts	0x1018, r14	; 0x801018 <mqtt_client+0x206>
   119b8:	f0 92 19 10 	sts	0x1019, r15	; 0x801019 <mqtt_client+0x207>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:295
                lastInActivity = t;
   119bc:	c0 92 1a 10 	sts	0x101A, r12	; 0x80101a <mqtt_client+0x208>
   119c0:	d0 92 1b 10 	sts	0x101B, r13	; 0x80101b <mqtt_client+0x209>
   119c4:	e0 92 1c 10 	sts	0x101C, r14	; 0x80101c <mqtt_client+0x20a>
   119c8:	f0 92 1d 10 	sts	0x101D, r15	; 0x80101d <mqtt_client+0x20b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:296
                pingOutstanding = true;
   119cc:	81 e0       	ldi	r24, 0x01	; 1
   119ce:	80 93 1e 10 	sts	0x101E, r24	; 0x80101e <mqtt_client+0x20c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:299
            }
        }
        if (_client->available()) {
   119d2:	80 91 12 0e 	lds	r24, 0x0E12	; 0x800e12 <mqtt_client>
   119d6:	90 91 13 0e 	lds	r25, 0x0E13	; 0x800e13 <mqtt_client+0x1>
   119da:	dc 01       	movw	r26, r24
   119dc:	ed 91       	ld	r30, X+
   119de:	fc 91       	ld	r31, X
   119e0:	00 84       	ldd	r0, Z+8	; 0x08
   119e2:	f1 85       	ldd	r31, Z+9	; 0x09
   119e4:	e0 2d       	mov	r30, r0
   119e6:	19 95       	eicall
   119e8:	89 2b       	or	r24, r25
   119ea:	09 f4       	brne	.+2      	; 0x119ee <PubSubClient::loop() [clone .constprop.107]+0x15a>
   119ec:	b6 cf       	rjmp	.-148    	; 0x1195a <PubSubClient::loop() [clone .constprop.107]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:301
            uint8_t llen;
            uint16_t len = readPacket(&llen);
   119ee:	ce 01       	movw	r24, r28
   119f0:	01 96       	adiw	r24, 0x01	; 1
   119f2:	0e 94 62 85 	call	0x10ac4	; 0x10ac4 <PubSubClient::readPacket(unsigned char*) [clone .constprop.139]>
   119f6:	ac 01       	movw	r20, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:304
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
   119f8:	89 2b       	or	r24, r25
   119fa:	09 f4       	brne	.+2      	; 0x119fe <PubSubClient::loop() [clone .constprop.107]+0x16a>
   119fc:	ae cf       	rjmp	.-164    	; 0x1195a <PubSubClient::loop() [clone .constprop.107]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:305
                lastInActivity = t;
   119fe:	c0 92 1a 10 	sts	0x101A, r12	; 0x80101a <mqtt_client+0x208>
   11a02:	d0 92 1b 10 	sts	0x101B, r13	; 0x80101b <mqtt_client+0x209>
   11a06:	e0 92 1c 10 	sts	0x101C, r14	; 0x80101c <mqtt_client+0x20a>
   11a0a:	f0 92 1d 10 	sts	0x101D, r15	; 0x80101d <mqtt_client+0x20b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:306
                uint8_t type = buffer[0]&0xF0;
   11a0e:	80 90 14 0e 	lds	r8, 0x0E14	; 0x800e14 <mqtt_client+0x2>
   11a12:	88 2d       	mov	r24, r8
   11a14:	80 7f       	andi	r24, 0xF0	; 240
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:307
                if (type == MQTTPUBLISH) {
   11a16:	80 33       	cpi	r24, 0x30	; 48
   11a18:	09 f0       	breq	.+2      	; 0x11a1c <PubSubClient::loop() [clone .constprop.107]+0x188>
   11a1a:	83 c0       	rjmp	.+262    	; 0x11b22 <PubSubClient::loop() [clone .constprop.107]+0x28e>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:308
                    if (callback) {
   11a1c:	a0 90 1f 10 	lds	r10, 0x101F	; 0x80101f <mqtt_client+0x20d>
   11a20:	b0 90 20 10 	lds	r11, 0x1020	; 0x801020 <mqtt_client+0x20e>
   11a24:	a1 14       	cp	r10, r1
   11a26:	b1 04       	cpc	r11, r1
   11a28:	09 f4       	brne	.+2      	; 0x11a2c <PubSubClient::loop() [clone .constprop.107]+0x198>
   11a2a:	97 cf       	rjmp	.-210    	; 0x1195a <PubSubClient::loop() [clone .constprop.107]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:331
                            lastOutActivity = t;

                        } else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
                        }
   11a2c:	6d b6       	in	r6, 0x3d	; 61
   11a2e:	7e b6       	in	r7, 0x3e	; 62
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:309
            if (len > 0) {
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2];
   11a30:	69 81       	ldd	r22, Y+1	; 0x01
   11a32:	70 e0       	ldi	r23, 0x00	; 0
   11a34:	fb 01       	movw	r30, r22
   11a36:	ee 5e       	subi	r30, 0xEE	; 238
   11a38:	f1 4f       	sbci	r31, 0xF1	; 241
   11a3a:	23 81       	ldd	r18, Z+3	; 0x03
   11a3c:	30 e0       	ldi	r19, 0x00	; 0
   11a3e:	32 2f       	mov	r19, r18
   11a40:	22 27       	eor	r18, r18
   11a42:	84 81       	ldd	r24, Z+4	; 0x04
   11a44:	28 0f       	add	r18, r24
   11a46:	31 1d       	adc	r19, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:310
                        char topic[tl+1];
   11a48:	c9 01       	movw	r24, r18
   11a4a:	01 96       	adiw	r24, 0x01	; 1
   11a4c:	ed b7       	in	r30, 0x3d	; 61
   11a4e:	fe b7       	in	r31, 0x3e	; 62
   11a50:	e8 1b       	sub	r30, r24
   11a52:	f9 0b       	sbc	r31, r25
   11a54:	0f b6       	in	r0, 0x3f	; 63
   11a56:	f8 94       	cli
   11a58:	fe bf       	out	0x3e, r31	; 62
   11a5a:	0f be       	out	0x3f, r0	; 63
   11a5c:	ed bf       	out	0x3d, r30	; 61
   11a5e:	8d b7       	in	r24, 0x3d	; 61
   11a60:	9e b7       	in	r25, 0x3e	; 62
   11a62:	01 96       	adiw	r24, 0x01	; 1
   11a64:	db 01       	movw	r26, r22
   11a66:	a9 5e       	subi	r26, 0xE9	; 233
   11a68:	b1 4f       	sbci	r27, 0xF1	; 241
   11a6a:	fc 01       	movw	r30, r24
   11a6c:	8c 01       	movw	r16, r24
   11a6e:	02 0f       	add	r16, r18
   11a70:	13 1f       	adc	r17, r19
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:311
                        for (uint16_t i=0;i<tl;i++) {
   11a72:	e0 17       	cp	r30, r16
   11a74:	f1 07       	cpc	r31, r17
   11a76:	19 f0       	breq	.+6      	; 0x11a7e <PubSubClient::loop() [clone .constprop.107]+0x1ea>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:312
                            topic[i] = buffer[llen+3+i];
   11a78:	3d 90       	ld	r3, X+
   11a7a:	31 92       	st	Z+, r3
   11a7c:	fa cf       	rjmp	.-12     	; 0x11a72 <PubSubClient::loop() [clone .constprop.107]+0x1de>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:314
                        }
                        topic[tl] = 0;
   11a7e:	10 82       	st	Z, r1
   11a80:	da 01       	movw	r26, r20
   11a82:	a6 1b       	sub	r26, r22
   11a84:	b7 0b       	sbc	r27, r23
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:316
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1) {
   11a86:	f8 2d       	mov	r31, r8
   11a88:	f6 70       	andi	r31, 0x06	; 6
   11a8a:	8f 2e       	mov	r8, r31
   11a8c:	42 e0       	ldi	r20, 0x02	; 2
   11a8e:	f4 13       	cpse	r31, r20
   11a90:	3c c0       	rjmp	.+120    	; 0x11b0a <PubSubClient::loop() [clone .constprop.107]+0x276>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:317
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   11a92:	62 0f       	add	r22, r18
   11a94:	73 1f       	adc	r23, r19
   11a96:	fb 01       	movw	r30, r22
   11a98:	ee 5e       	subi	r30, 0xEE	; 238
   11a9a:	f1 4f       	sbci	r31, 0xF1	; 241
   11a9c:	45 81       	ldd	r20, Z+5	; 0x05
   11a9e:	50 e0       	ldi	r21, 0x00	; 0
   11aa0:	54 2f       	mov	r21, r20
   11aa2:	44 27       	eor	r20, r20
   11aa4:	06 81       	ldd	r16, Z+6	; 0x06
   11aa6:	04 0f       	add	r16, r20
   11aa8:	15 2f       	mov	r17, r21
   11aaa:	11 1d       	adc	r17, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:319
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   11aac:	ad 01       	movw	r20, r26
   11aae:	42 1b       	sub	r20, r18
   11ab0:	53 0b       	sbc	r21, r19
   11ab2:	45 50       	subi	r20, 0x05	; 5
   11ab4:	51 09       	sbc	r21, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:318
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1) {
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
                            payload = buffer+llen+3+tl+2;
   11ab6:	67 5e       	subi	r22, 0xE7	; 231
   11ab8:	71 4f       	sbci	r23, 0xF1	; 241
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:319
                            callback(topic,payload,len-llen-3-tl-2);
   11aba:	f5 01       	movw	r30, r10
   11abc:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:321

                            buffer[0] = MQTTPUBACK;
   11abe:	80 e4       	ldi	r24, 0x40	; 64
   11ac0:	80 93 14 0e 	sts	0x0E14, r24	; 0x800e14 <mqtt_client+0x2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:322
                            buffer[1] = 2;
   11ac4:	80 92 15 0e 	sts	0x0E15, r8	; 0x800e15 <mqtt_client+0x3>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:323
                            buffer[2] = (msgId >> 8);
   11ac8:	10 93 16 0e 	sts	0x0E16, r17	; 0x800e16 <mqtt_client+0x4>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:324
                            buffer[3] = (msgId & 0xFF);
   11acc:	00 93 17 0e 	sts	0x0E17, r16	; 0x800e17 <mqtt_client+0x5>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:325
                            _client->write(buffer,4);
   11ad0:	80 91 12 0e 	lds	r24, 0x0E12	; 0x800e12 <mqtt_client>
   11ad4:	90 91 13 0e 	lds	r25, 0x0E13	; 0x800e13 <mqtt_client+0x1>
   11ad8:	dc 01       	movw	r26, r24
   11ada:	ed 91       	ld	r30, X+
   11adc:	fc 91       	ld	r31, X
   11ade:	02 80       	ldd	r0, Z+2	; 0x02
   11ae0:	f3 81       	ldd	r31, Z+3	; 0x03
   11ae2:	e0 2d       	mov	r30, r0
   11ae4:	44 e0       	ldi	r20, 0x04	; 4
   11ae6:	50 e0       	ldi	r21, 0x00	; 0
   11ae8:	64 e1       	ldi	r22, 0x14	; 20
   11aea:	7e e0       	ldi	r23, 0x0E	; 14
   11aec:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:326
                            lastOutActivity = t;
   11aee:	c0 92 16 10 	sts	0x1016, r12	; 0x801016 <mqtt_client+0x204>
   11af2:	d0 92 17 10 	sts	0x1017, r13	; 0x801017 <mqtt_client+0x205>
   11af6:	e0 92 18 10 	sts	0x1018, r14	; 0x801018 <mqtt_client+0x206>
   11afa:	f0 92 19 10 	sts	0x1019, r15	; 0x801019 <mqtt_client+0x207>
   11afe:	0f b6       	in	r0, 0x3f	; 63
   11b00:	f8 94       	cli
   11b02:	7e be       	out	0x3e, r7	; 62
   11b04:	0f be       	out	0x3f, r0	; 63
   11b06:	6d be       	out	0x3d, r6	; 61
   11b08:	28 cf       	rjmp	.-432    	; 0x1195a <PubSubClient::loop() [clone .constprop.107]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:330

                        } else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
   11b0a:	ad 01       	movw	r20, r26
   11b0c:	42 1b       	sub	r20, r18
   11b0e:	53 0b       	sbc	r21, r19
   11b10:	43 50       	subi	r20, 0x03	; 3
   11b12:	51 09       	sbc	r21, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:329
                            buffer[3] = (msgId & 0xFF);
                            _client->write(buffer,4);
                            lastOutActivity = t;

                        } else {
                            payload = buffer+llen+3+tl;
   11b14:	62 0f       	add	r22, r18
   11b16:	73 1f       	adc	r23, r19
   11b18:	69 5e       	subi	r22, 0xE9	; 233
   11b1a:	71 4f       	sbci	r23, 0xF1	; 241
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:330
                            callback(topic,payload,len-llen-3-tl);
   11b1c:	f5 01       	movw	r30, r10
   11b1e:	19 95       	eicall
   11b20:	ee cf       	rjmp	.-36     	; 0x11afe <PubSubClient::loop() [clone .constprop.107]+0x26a>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:333
                        }
                    }
                } else if (type == MQTTPINGREQ) {
   11b22:	80 3c       	cpi	r24, 0xC0	; 192
   11b24:	a9 f4       	brne	.+42     	; 0x11b50 <PubSubClient::loop() [clone .constprop.107]+0x2bc>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:334
                    buffer[0] = MQTTPINGRESP;
   11b26:	80 ed       	ldi	r24, 0xD0	; 208
   11b28:	80 93 14 0e 	sts	0x0E14, r24	; 0x800e14 <mqtt_client+0x2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:335
                    buffer[1] = 0;
   11b2c:	10 92 15 0e 	sts	0x0E15, r1	; 0x800e15 <mqtt_client+0x3>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:336
                    _client->write(buffer,2);
   11b30:	80 91 12 0e 	lds	r24, 0x0E12	; 0x800e12 <mqtt_client>
   11b34:	90 91 13 0e 	lds	r25, 0x0E13	; 0x800e13 <mqtt_client+0x1>
   11b38:	dc 01       	movw	r26, r24
   11b3a:	ed 91       	ld	r30, X+
   11b3c:	fc 91       	ld	r31, X
   11b3e:	02 80       	ldd	r0, Z+2	; 0x02
   11b40:	f3 81       	ldd	r31, Z+3	; 0x03
   11b42:	e0 2d       	mov	r30, r0
   11b44:	42 e0       	ldi	r20, 0x02	; 2
   11b46:	50 e0       	ldi	r21, 0x00	; 0
   11b48:	64 e1       	ldi	r22, 0x14	; 20
   11b4a:	7e e0       	ldi	r23, 0x0E	; 14
   11b4c:	19 95       	eicall
   11b4e:	05 cf       	rjmp	.-502    	; 0x1195a <PubSubClient::loop() [clone .constprop.107]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:337
                } else if (type == MQTTPINGRESP) {
   11b50:	80 3d       	cpi	r24, 0xD0	; 208
   11b52:	09 f0       	breq	.+2      	; 0x11b56 <PubSubClient::loop() [clone .constprop.107]+0x2c2>
   11b54:	02 cf       	rjmp	.-508    	; 0x1195a <PubSubClient::loop() [clone .constprop.107]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:338
                    pingOutstanding = false;
   11b56:	10 92 1e 10 	sts	0x101E, r1	; 0x80101e <mqtt_client+0x20c>
   11b5a:	ff ce       	rjmp	.-514    	; 0x1195a <PubSubClient::loop() [clone .constprop.107]+0xc6>

00011b5c <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>:
_ZN12PubSubClient5writeEhPhj():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:426
    lastOutActivity = millis();

    return rc == tlen + 4 + plength;
}

boolean PubSubClient::write(uint8_t header, uint8_t* buf, uint16_t length) {
   11b5c:	bf 92       	push	r11
   11b5e:	cf 92       	push	r12
   11b60:	df 92       	push	r13
   11b62:	ef 92       	push	r14
   11b64:	ff 92       	push	r15
   11b66:	0f 93       	push	r16
   11b68:	1f 93       	push	r17
   11b6a:	cf 93       	push	r28
   11b6c:	df 93       	push	r29
   11b6e:	00 d0       	rcall	.+0      	; 0x11b70 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x14>
   11b70:	1f 92       	push	r1
   11b72:	cd b7       	in	r28, 0x3d	; 61
   11b74:	de b7       	in	r29, 0x3e	; 62
   11b76:	7c 01       	movw	r14, r24
   11b78:	b6 2e       	mov	r11, r22
   11b7a:	89 01       	movw	r16, r18
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:432
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   11b7c:	c9 01       	movw	r24, r18
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:428
    return rc == tlen + 4 + plength;
}

boolean PubSubClient::write(uint8_t header, uint8_t* buf, uint16_t length) {
    uint8_t lenBuf[4];
    uint8_t llen = 0;
   11b7e:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:439
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   11b80:	be 01       	movw	r22, r28
   11b82:	6f 5f       	subi	r22, 0xFF	; 255
   11b84:	7f 4f       	sbci	r23, 0xFF	; 255
   11b86:	6b 01       	movw	r12, r22
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:434
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
   11b88:	28 2f       	mov	r18, r24
   11b8a:	2f 77       	andi	r18, 0x7F	; 127
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:435
        len = len / 128;
   11b8c:	88 0f       	add	r24, r24
   11b8e:	89 2f       	mov	r24, r25
   11b90:	88 1f       	adc	r24, r24
   11b92:	99 0b       	sbc	r25, r25
   11b94:	91 95       	neg	r25
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:436
        if (len > 0) {
   11b96:	00 97       	sbiw	r24, 0x00	; 0
   11b98:	09 f0       	breq	.+2      	; 0x11b9c <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x40>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:437
            digit |= 0x80;
   11b9a:	20 68       	ori	r18, 0x80	; 128
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:439
        }
        lenBuf[pos++] = digit;
   11b9c:	f6 01       	movw	r30, r12
   11b9e:	e3 0f       	add	r30, r19
   11ba0:	f1 1d       	adc	r31, r1
   11ba2:	20 83       	st	Z, r18
   11ba4:	3f 5f       	subi	r19, 0xFF	; 255
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:441
        llen++;
    } while(len>0);
   11ba6:	00 97       	sbiw	r24, 0x00	; 0
   11ba8:	79 f7       	brne	.-34     	; 0x11b88 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x2c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:443

    buf[4-llen] = header;
   11baa:	e3 2f       	mov	r30, r19
   11bac:	f0 e0       	ldi	r31, 0x00	; 0
   11bae:	ba 01       	movw	r22, r20
   11bb0:	6e 1b       	sub	r22, r30
   11bb2:	7f 0b       	sbc	r23, r31
   11bb4:	6c 5f       	subi	r22, 0xFC	; 252
   11bb6:	7f 4f       	sbci	r23, 0xFF	; 255
   11bb8:	db 01       	movw	r26, r22
   11bba:	bc 92       	st	X, r11
   11bbc:	4e 1b       	sub	r20, r30
   11bbe:	5f 0b       	sbc	r21, r31
   11bc0:	4b 5f       	subi	r20, 0xFB	; 251
   11bc2:	5f 4f       	sbci	r21, 0xFF	; 255
   11bc4:	c6 01       	movw	r24, r12
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:444
    for (int i=0;i<llen;i++) {
   11bc6:	9c 01       	movw	r18, r24
   11bc8:	2c 19       	sub	r18, r12
   11bca:	3d 09       	sbc	r19, r13
   11bcc:	2e 17       	cp	r18, r30
   11bce:	3f 07       	cpc	r19, r31
   11bd0:	3c f4       	brge	.+14     	; 0x11be0 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x84>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:445
        buf[5-llen+i] = lenBuf[i];
   11bd2:	dc 01       	movw	r26, r24
   11bd4:	2d 91       	ld	r18, X+
   11bd6:	cd 01       	movw	r24, r26
   11bd8:	da 01       	movw	r26, r20
   11bda:	2d 93       	st	X+, r18
   11bdc:	ad 01       	movw	r20, r26
   11bde:	f3 cf       	rjmp	.-26     	; 0x11bc6 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x6a>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:462
        bytesRemaining -= rc;
        writeBuf += rc;
    }
    return result;
#else
    rc = _client->write(buf+(4-llen),length+1+llen);
   11be0:	d7 01       	movw	r26, r14
   11be2:	8d 91       	ld	r24, X+
   11be4:	9c 91       	ld	r25, X
   11be6:	0f 5f       	subi	r16, 0xFF	; 255
   11be8:	1f 4f       	sbci	r17, 0xFF	; 255
   11bea:	0e 0f       	add	r16, r30
   11bec:	1f 1f       	adc	r17, r31
   11bee:	dc 01       	movw	r26, r24
   11bf0:	ed 91       	ld	r30, X+
   11bf2:	fc 91       	ld	r31, X
   11bf4:	02 80       	ldd	r0, Z+2	; 0x02
   11bf6:	f3 81       	ldd	r31, Z+3	; 0x03
   11bf8:	e0 2d       	mov	r30, r0
   11bfa:	a8 01       	movw	r20, r16
   11bfc:	19 95       	eicall
   11bfe:	6c 01       	movw	r12, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:463
    lastOutActivity = millis();
   11c00:	0e 94 1d 85 	call	0x10a3a	; 0x10a3a <millis>
   11c04:	f7 01       	movw	r30, r14
   11c06:	ec 5f       	subi	r30, 0xFC	; 252
   11c08:	fd 4f       	sbci	r31, 0xFD	; 253
   11c0a:	60 83       	st	Z, r22
   11c0c:	71 83       	std	Z+1, r23	; 0x01
   11c0e:	82 83       	std	Z+2, r24	; 0x02
   11c10:	93 83       	std	Z+3, r25	; 0x03
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:464
    return (rc == 1+llen+length);
   11c12:	81 e0       	ldi	r24, 0x01	; 1
   11c14:	0c 15       	cp	r16, r12
   11c16:	1d 05       	cpc	r17, r13
   11c18:	09 f0       	breq	.+2      	; 0x11c1c <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0xc0>
   11c1a:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:466
#endif
}
   11c1c:	0f 90       	pop	r0
   11c1e:	0f 90       	pop	r0
   11c20:	0f 90       	pop	r0
   11c22:	0f 90       	pop	r0
   11c24:	df 91       	pop	r29
   11c26:	cf 91       	pop	r28
   11c28:	1f 91       	pop	r17
   11c2a:	0f 91       	pop	r16
   11c2c:	ff 90       	pop	r15
   11c2e:	ef 90       	pop	r14
   11c30:	df 90       	pop	r13
   11c32:	cf 90       	pop	r12
   11c34:	bf 90       	pop	r11
   11c36:	08 95       	ret

00011c38 <PubSubClient::subscribe(char const*) [clone .constprop.146]>:
_ZN12PubSubClient9subscribeEPKc.constprop.146():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:468

boolean PubSubClient::subscribe(const char* topic) {
   11c38:	cf 93       	push	r28
   11c3a:	df 93       	push	r29
subscribe():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:476

boolean PubSubClient::subscribe(const char* topic, uint8_t qos) {
    if (qos < 0 || qos > 1) {
        return false;
    }
    if (MQTT_MAX_PACKET_SIZE < 9 + strlen(topic)) {
   11c3c:	fc 01       	movw	r30, r24
   11c3e:	01 90       	ld	r0, Z+
   11c40:	00 20       	and	r0, r0
   11c42:	e9 f7       	brne	.-6      	; 0x11c3e <PubSubClient::subscribe(char const*) [clone .constprop.146]+0x6>
   11c44:	9f 01       	movw	r18, r30
   11c46:	28 1b       	sub	r18, r24
   11c48:	39 0b       	sbc	r19, r25
   11c4a:	28 5f       	subi	r18, 0xF8	; 248
   11c4c:	3f 4f       	sbci	r19, 0xFF	; 255
   11c4e:	21 30       	cpi	r18, 0x01	; 1
   11c50:	32 40       	sbci	r19, 0x02	; 2
   11c52:	98 f5       	brcc	.+102    	; 0x11cba <PubSubClient::subscribe(char const*) [clone .constprop.146]+0x82>
   11c54:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:480
        // Too long
        return false;
    }
    if (connected()) {
   11c56:	82 e1       	ldi	r24, 0x12	; 18
   11c58:	9e e0       	ldi	r25, 0x0E	; 14
   11c5a:	0e 94 14 8c 	call	0x11828	; 0x11828 <PubSubClient::connected()>
   11c5e:	88 23       	and	r24, r24
   11c60:	61 f1       	breq	.+88     	; 0x11cba <PubSubClient::subscribe(char const*) [clone .constprop.146]+0x82>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:483
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        nextMsgId++;
   11c62:	80 91 14 10 	lds	r24, 0x1014	; 0x801014 <mqtt_client+0x202>
   11c66:	90 91 15 10 	lds	r25, 0x1015	; 0x801015 <mqtt_client+0x203>
   11c6a:	01 96       	adiw	r24, 0x01	; 1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:484
        if (nextMsgId == 0) {
   11c6c:	19 f1       	breq	.+70     	; 0x11cb4 <PubSubClient::subscribe(char const*) [clone .constprop.146]+0x7c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:485
            nextMsgId = 1;
   11c6e:	90 93 15 10 	sts	0x1015, r25	; 0x801015 <mqtt_client+0x203>
   11c72:	80 93 14 10 	sts	0x1014, r24	; 0x801014 <mqtt_client+0x202>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:487
        }
        buffer[length++] = (nextMsgId >> 8);
   11c76:	80 91 14 10 	lds	r24, 0x1014	; 0x801014 <mqtt_client+0x202>
   11c7a:	90 91 15 10 	lds	r25, 0x1015	; 0x801015 <mqtt_client+0x203>
   11c7e:	90 93 19 0e 	sts	0x0E19, r25	; 0x800e19 <mqtt_client+0x7>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:488
        buffer[length++] = (nextMsgId & 0xFF);
   11c82:	80 93 1a 0e 	sts	0x0E1A, r24	; 0x800e1a <mqtt_client+0x8>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:489
        length = writeString((char*)topic, buffer,length);
   11c86:	47 e0       	ldi	r20, 0x07	; 7
   11c88:	50 e0       	ldi	r21, 0x00	; 0
   11c8a:	64 e1       	ldi	r22, 0x14	; 20
   11c8c:	7e e0       	ldi	r23, 0x0E	; 14
   11c8e:	ce 01       	movw	r24, r28
   11c90:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.149]>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:490
        buffer[length++] = qos;
   11c94:	fc 01       	movw	r30, r24
   11c96:	ee 5e       	subi	r30, 0xEE	; 238
   11c98:	f1 4f       	sbci	r31, 0xF1	; 241
   11c9a:	12 82       	std	Z+2, r1	; 0x02
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:491
        return write(MQTTSUBSCRIBE|MQTTQOS1,buffer,length-5);
   11c9c:	9c 01       	movw	r18, r24
   11c9e:	24 50       	subi	r18, 0x04	; 4
   11ca0:	31 09       	sbc	r19, r1
   11ca2:	44 e1       	ldi	r20, 0x14	; 20
   11ca4:	5e e0       	ldi	r21, 0x0E	; 14
   11ca6:	62 e8       	ldi	r22, 0x82	; 130
   11ca8:	82 e1       	ldi	r24, 0x12	; 18
   11caa:	9e e0       	ldi	r25, 0x0E	; 14
_ZN12PubSubClient9subscribeEPKc.constprop.146():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:470
#endif
}

boolean PubSubClient::subscribe(const char* topic) {
    return subscribe(topic, 0);
}
   11cac:	df 91       	pop	r29
   11cae:	cf 91       	pop	r28
subscribe():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:491
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
        length = writeString((char*)topic, buffer,length);
        buffer[length++] = qos;
        return write(MQTTSUBSCRIBE|MQTTQOS1,buffer,length-5);
   11cb0:	0c 94 ae 8d 	jmp	0x11b5c	; 0x11b5c <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:485
    if (connected()) {
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        nextMsgId++;
        if (nextMsgId == 0) {
            nextMsgId = 1;
   11cb4:	81 e0       	ldi	r24, 0x01	; 1
   11cb6:	90 e0       	ldi	r25, 0x00	; 0
   11cb8:	da cf       	rjmp	.-76     	; 0x11c6e <PubSubClient::subscribe(char const*) [clone .constprop.146]+0x36>
_ZN12PubSubClient9subscribeEPKc.constprop.146():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:470
#endif
}

boolean PubSubClient::subscribe(const char* topic) {
    return subscribe(topic, 0);
}
   11cba:	80 e0       	ldi	r24, 0x00	; 0
   11cbc:	df 91       	pop	r29
   11cbe:	cf 91       	pop	r28
   11cc0:	08 95       	ret

00011cc2 <PubSubClient::publish(char const*, char const*)>:
_ZN12PubSubClient7publishEPKcS1_():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:347
        return true;
    }
    return false;
}

boolean PubSubClient::publish(const char* topic, const char* payload) {
   11cc2:	af 92       	push	r10
   11cc4:	bf 92       	push	r11
   11cc6:	cf 92       	push	r12
   11cc8:	df 92       	push	r13
   11cca:	ef 92       	push	r14
   11ccc:	ff 92       	push	r15
   11cce:	0f 93       	push	r16
   11cd0:	1f 93       	push	r17
   11cd2:	cf 93       	push	r28
   11cd4:	df 93       	push	r29
   11cd6:	7c 01       	movw	r14, r24
   11cd8:	5b 01       	movw	r10, r22
   11cda:	8a 01       	movw	r16, r20
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:348
    return publish(topic,(const uint8_t*)payload,strlen(payload),false);
   11cdc:	ea 01       	movw	r28, r20
   11cde:	09 90       	ld	r0, Y+
   11ce0:	00 20       	and	r0, r0
   11ce2:	e9 f7       	brne	.-6      	; 0x11cde <PubSubClient::publish(char const*, char const*)+0x1c>
   11ce4:	21 97       	sbiw	r28, 0x01	; 1
   11ce6:	c4 1b       	sub	r28, r20
   11ce8:	d5 0b       	sbc	r29, r21
publish():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:360
boolean PubSubClient::publish(const char* topic, const uint8_t* payload, unsigned int plength) {
    return publish(topic, payload, plength, false);
}

boolean PubSubClient::publish(const char* topic, const uint8_t* payload, unsigned int plength, boolean retained) {
    if (connected()) {
   11cea:	0e 94 14 8c 	call	0x11828	; 0x11828 <PubSubClient::connected()>
   11cee:	88 23       	and	r24, r24
   11cf0:	c9 f1       	breq	.+114    	; 0x11d64 <PubSubClient::publish(char const*, char const*)+0xa2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:361
        if (MQTT_MAX_PACKET_SIZE < 5 + 2+strlen(topic) + plength) {
   11cf2:	f5 01       	movw	r30, r10
   11cf4:	01 90       	ld	r0, Z+
   11cf6:	00 20       	and	r0, r0
   11cf8:	e9 f7       	brne	.-6      	; 0x11cf4 <PubSubClient::publish(char const*, char const*)+0x32>
   11cfa:	31 97       	sbiw	r30, 0x01	; 1
   11cfc:	ea 19       	sub	r30, r10
   11cfe:	fb 09       	sbc	r31, r11
   11d00:	ce 01       	movw	r24, r28
   11d02:	07 96       	adiw	r24, 0x07	; 7
   11d04:	e8 0f       	add	r30, r24
   11d06:	f9 1f       	adc	r31, r25
   11d08:	e1 30       	cpi	r30, 0x01	; 1
   11d0a:	f2 40       	sbci	r31, 0x02	; 2
   11d0c:	58 f5       	brcc	.+86     	; 0x11d64 <PubSubClient::publish(char const*, char const*)+0xa2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:367
            // Too long
            return false;
        }
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        length = writeString(topic,buffer,length);
   11d0e:	67 01       	movw	r12, r14
   11d10:	82 e0       	ldi	r24, 0x02	; 2
   11d12:	c8 0e       	add	r12, r24
   11d14:	d1 1c       	adc	r13, r1
   11d16:	45 e0       	ldi	r20, 0x05	; 5
   11d18:	50 e0       	ldi	r21, 0x00	; 0
   11d1a:	b6 01       	movw	r22, r12
   11d1c:	c5 01       	movw	r24, r10
   11d1e:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.149]>
   11d22:	f8 01       	movw	r30, r16
   11d24:	dc 01       	movw	r26, r24
   11d26:	12 96       	adiw	r26, 0x02	; 2
   11d28:	ae 0d       	add	r26, r14
   11d2a:	bf 1d       	adc	r27, r15
   11d2c:	a8 01       	movw	r20, r16
   11d2e:	4c 0f       	add	r20, r28
   11d30:	5d 1f       	adc	r21, r29
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:369
        uint16_t i;
        for (i=0;i<plength;i++) {
   11d32:	e4 17       	cp	r30, r20
   11d34:	f5 07       	cpc	r31, r21
   11d36:	19 f0       	breq	.+6      	; 0x11d3e <PubSubClient::publish(char const*, char const*)+0x7c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:370
            buffer[length++] = payload[i];
   11d38:	21 91       	ld	r18, Z+
   11d3a:	2d 93       	st	X+, r18
   11d3c:	fa cf       	rjmp	.-12     	; 0x11d32 <PubSubClient::publish(char const*, char const*)+0x70>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:376
        }
        uint8_t header = MQTTPUBLISH;
        if (retained) {
            header |= 1;
        }
        return write(header,buffer,length-5);
   11d3e:	25 97       	sbiw	r28, 0x05	; 5
   11d40:	9e 01       	movw	r18, r28
   11d42:	28 0f       	add	r18, r24
   11d44:	39 1f       	adc	r19, r25
   11d46:	a6 01       	movw	r20, r12
   11d48:	60 e3       	ldi	r22, 0x30	; 48
   11d4a:	c7 01       	movw	r24, r14
_ZN12PubSubClient7publishEPKcS1_():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:349
    return false;
}

boolean PubSubClient::publish(const char* topic, const char* payload) {
    return publish(topic,(const uint8_t*)payload,strlen(payload),false);
}
   11d4c:	df 91       	pop	r29
   11d4e:	cf 91       	pop	r28
   11d50:	1f 91       	pop	r17
   11d52:	0f 91       	pop	r16
   11d54:	ff 90       	pop	r15
   11d56:	ef 90       	pop	r14
   11d58:	df 90       	pop	r13
   11d5a:	cf 90       	pop	r12
   11d5c:	bf 90       	pop	r11
   11d5e:	af 90       	pop	r10
publish():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:376
        }
        uint8_t header = MQTTPUBLISH;
        if (retained) {
            header |= 1;
        }
        return write(header,buffer,length-5);
   11d60:	0c 94 ae 8d 	jmp	0x11b5c	; 0x11b5c <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
_ZN12PubSubClient7publishEPKcS1_():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:349
    return false;
}

boolean PubSubClient::publish(const char* topic, const char* payload) {
    return publish(topic,(const uint8_t*)payload,strlen(payload),false);
}
   11d64:	80 e0       	ldi	r24, 0x00	; 0
   11d66:	df 91       	pop	r29
   11d68:	cf 91       	pop	r28
   11d6a:	1f 91       	pop	r17
   11d6c:	0f 91       	pop	r16
   11d6e:	ff 90       	pop	r15
   11d70:	ef 90       	pop	r14
   11d72:	df 90       	pop	r13
   11d74:	cf 90       	pop	r12
   11d76:	bf 90       	pop	r11
   11d78:	af 90       	pop	r10
   11d7a:	08 95       	ret

00011d7c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.132]>:
_Z41send_mqtt_message_prefix_id_topic_payloadP12PubSubClientPchS1_S1_.constprop.132():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:165
void send_mqtt_set_header(char* header)
{
  header_out = header;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
void send_mqtt_message_prefix_id_topic_payload(PubSubClient *mqtt_client, char *prefix, uint8_t id, char *topic, char *payload)
   11d7c:	af 92       	push	r10
   11d7e:	bf 92       	push	r11
   11d80:	df 92       	push	r13
   11d82:	ef 92       	push	r14
   11d84:	ff 92       	push	r15
   11d86:	0f 93       	push	r16
   11d88:	1f 93       	push	r17
   11d8a:	cf 93       	push	r28
   11d8c:	df 93       	push	r29
   11d8e:	cd b7       	in	r28, 0x3d	; 61
   11d90:	de b7       	in	r29, 0x3e	; 62
   11d92:	c6 55       	subi	r28, 0x56	; 86
   11d94:	d1 09       	sbc	r29, r1
   11d96:	0f b6       	in	r0, 0x3f	; 63
   11d98:	f8 94       	cli
   11d9a:	de bf       	out	0x3e, r29	; 62
   11d9c:	0f be       	out	0x3f, r0	; 63
   11d9e:	cd bf       	out	0x3d, r28	; 61
   11da0:	5c 01       	movw	r10, r24
   11da2:	d6 2e       	mov	r13, r22
   11da4:	7a 01       	movw	r14, r20
   11da6:	89 01       	movw	r16, r18
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:170
{
  char str_topic[64];
  char hostname[10];
  char tmp1[12];
  if (mqtt_client->connected())
   11da8:	82 e1       	ldi	r24, 0x12	; 18
   11daa:	9e e0       	ldi	r25, 0x0E	; 14
   11dac:	0e 94 14 8c 	call	0x11828	; 0x11828 <PubSubClient::connected()>
   11db0:	88 23       	and	r24, r24
   11db2:	09 f4       	brne	.+2      	; 0x11db6 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.132]+0x3a>
   11db4:	52 c0       	rjmp	.+164    	; 0x11e5a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.132]+0xde>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:172
  {
    mqtt_send_message++;
   11db6:	80 91 69 0b 	lds	r24, 0x0B69	; 0x800b69 <mqtt_send_message>
   11dba:	90 91 6a 0b 	lds	r25, 0x0B6A	; 0x800b6a <mqtt_send_message+0x1>
   11dbe:	01 96       	adiw	r24, 0x01	; 1
   11dc0:	90 93 6a 0b 	sts	0x0B6A, r25	; 0x800b6a <mqtt_send_message+0x1>
   11dc4:	80 93 69 0b 	sts	0x0B69, r24	; 0x800b69 <mqtt_send_message>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:173
    device_get_name(hostname);
   11dc8:	ce 01       	movw	r24, r28
   11dca:	83 5b       	subi	r24, 0xB3	; 179
   11dcc:	9f 4f       	sbci	r25, 0xFF	; 255
   11dce:	0e 94 f6 52 	call	0xa5ec	; 0xa5ec <device_get_name(char*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:174
    strcpy_P(str_topic, header_out);
   11dd2:	60 91 67 0b 	lds	r22, 0x0B67	; 0x800b67 <header_out>
   11dd6:	70 91 68 0b 	lds	r23, 0x0B68	; 0x800b68 <header_out+0x1>
   11dda:	ce 01       	movw	r24, r28
   11ddc:	01 96       	adiw	r24, 0x01	; 1
   11dde:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:175
    strcat(str_topic, hostname);
   11de2:	be 01       	movw	r22, r28
   11de4:	63 5b       	subi	r22, 0xB3	; 179
   11de6:	7f 4f       	sbci	r23, 0xFF	; 255
   11de8:	ce 01       	movw	r24, r28
   11dea:	01 96       	adiw	r24, 0x01	; 1
   11dec:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:176
    strcat(str_topic, "/");
   11df0:	6f ec       	ldi	r22, 0xCF	; 207
   11df2:	73 e0       	ldi	r23, 0x03	; 3
   11df4:	ce 01       	movw	r24, r28
   11df6:	01 96       	adiw	r24, 0x01	; 1
   11df8:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:177
    strcat(str_topic, prefix);
   11dfc:	b5 01       	movw	r22, r10
   11dfe:	ce 01       	movw	r24, r28
   11e00:	01 96       	adiw	r24, 0x01	; 1
   11e02:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:178
    strcat(str_topic, "/");
   11e06:	6f ec       	ldi	r22, 0xCF	; 207
   11e08:	73 e0       	ldi	r23, 0x03	; 3
   11e0a:	ce 01       	movw	r24, r28
   11e0c:	01 96       	adiw	r24, 0x01	; 1
   11e0e:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   11e12:	4a e0       	ldi	r20, 0x0A	; 10
   11e14:	be 01       	movw	r22, r28
   11e16:	6f 5b       	subi	r22, 0xBF	; 191
   11e18:	7f 4f       	sbci	r23, 0xFF	; 255
   11e1a:	8d 2d       	mov	r24, r13
   11e1c:	90 e0       	ldi	r25, 0x00	; 0
   11e1e:	0e 94 27 a3 	call	0x1464e	; 0x1464e <__itoa_ncheck>
_Z41send_mqtt_message_prefix_id_topic_payloadP12PubSubClientPchS1_S1_.constprop.132():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:180
    itoa(id, tmp1, 10);
    strcat(str_topic, tmp1);
   11e22:	be 01       	movw	r22, r28
   11e24:	6f 5b       	subi	r22, 0xBF	; 191
   11e26:	7f 4f       	sbci	r23, 0xFF	; 255
   11e28:	ce 01       	movw	r24, r28
   11e2a:	01 96       	adiw	r24, 0x01	; 1
   11e2c:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:181
    strcat(str_topic, "/");
   11e30:	6f ec       	ldi	r22, 0xCF	; 207
   11e32:	73 e0       	ldi	r23, 0x03	; 3
   11e34:	ce 01       	movw	r24, r28
   11e36:	01 96       	adiw	r24, 0x01	; 1
   11e38:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:182
    strcat(str_topic, topic);
   11e3c:	b7 01       	movw	r22, r14
   11e3e:	ce 01       	movw	r24, r28
   11e40:	01 96       	adiw	r24, 0x01	; 1
   11e42:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:183
    if (mqtt_client->publish(str_topic, payload) == false) mqtt_error++;
   11e46:	a8 01       	movw	r20, r16
   11e48:	be 01       	movw	r22, r28
   11e4a:	6f 5f       	subi	r22, 0xFF	; 255
   11e4c:	7f 4f       	sbci	r23, 0xFF	; 255
   11e4e:	82 e1       	ldi	r24, 0x12	; 18
   11e50:	9e e0       	ldi	r25, 0x0E	; 14
   11e52:	0e 94 61 8e 	call	0x11cc2	; 0x11cc2 <PubSubClient::publish(char const*, char const*)>
   11e56:	81 11       	cpse	r24, r1
   11e58:	09 c0       	rjmp	.+18     	; 0x11e6c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.132]+0xf0>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:186
  }
  else
    mqtt_error++;
   11e5a:	80 91 6b 0b 	lds	r24, 0x0B6B	; 0x800b6b <mqtt_error>
   11e5e:	90 91 6c 0b 	lds	r25, 0x0B6C	; 0x800b6c <mqtt_error+0x1>
   11e62:	01 96       	adiw	r24, 0x01	; 1
   11e64:	90 93 6c 0b 	sts	0x0B6C, r25	; 0x800b6c <mqtt_error+0x1>
   11e68:	80 93 6b 0b 	sts	0x0B6B, r24	; 0x800b6b <mqtt_error>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:187
}
   11e6c:	ca 5a       	subi	r28, 0xAA	; 170
   11e6e:	df 4f       	sbci	r29, 0xFF	; 255
   11e70:	0f b6       	in	r0, 0x3f	; 63
   11e72:	f8 94       	cli
   11e74:	de bf       	out	0x3e, r29	; 62
   11e76:	0f be       	out	0x3f, r0	; 63
   11e78:	cd bf       	out	0x3d, r28	; 61
   11e7a:	df 91       	pop	r29
   11e7c:	cf 91       	pop	r28
   11e7e:	1f 91       	pop	r17
   11e80:	0f 91       	pop	r16
   11e82:	ff 90       	pop	r15
   11e84:	ef 90       	pop	r14
   11e86:	df 90       	pop	r13
   11e88:	bf 90       	pop	r11
   11e8a:	af 90       	pop	r10
   11e8c:	08 95       	ret

00011e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>:
_ZN11EEPROMClass5writeEih.isra.1.lto_priv.222():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/EEPROM/src/EEPROM.h:47
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
   11e8e:	0c 94 93 ac 	jmp	0x15926	; 0x15926 <eeprom_write_byte>

00011e92 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>:
_ZN11EEPROMClass4readEi.isra.0.lto_priv.226():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/EEPROM/src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
   11e92:	0c 94 8b ac 	jmp	0x15916	; 0x15916 <eeprom_read_byte>

00011e96 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>:
_Z12createStringPccPhhh():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:114



void createString(char* str, char sep, uint8_t* bytes, uint8_t maxBytes, uint8_t base)
{
   11e96:	4f 92       	push	r4
   11e98:	5f 92       	push	r5
   11e9a:	6f 92       	push	r6
   11e9c:	7f 92       	push	r7
   11e9e:	8f 92       	push	r8
   11ea0:	9f 92       	push	r9
   11ea2:	af 92       	push	r10
   11ea4:	bf 92       	push	r11
   11ea6:	cf 92       	push	r12
   11ea8:	df 92       	push	r13
   11eaa:	ef 92       	push	r14
   11eac:	ff 92       	push	r15
   11eae:	0f 93       	push	r16
   11eb0:	1f 93       	push	r17
   11eb2:	cf 93       	push	r28
   11eb4:	df 93       	push	r29
   11eb6:	00 d0       	rcall	.+0      	; 0x11eb8 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x22>
   11eb8:	00 d0       	rcall	.+0      	; 0x11eba <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x24>
   11eba:	1f 92       	push	r1
   11ebc:	1f 92       	push	r1
   11ebe:	cd b7       	in	r28, 0x3d	; 61
   11ec0:	de b7       	in	r29, 0x3e	; 62
   11ec2:	6c 01       	movw	r12, r24
   11ec4:	46 2e       	mov	r4, r22
   11ec6:	52 2e       	mov	r5, r18
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:116
  char tmp1[8];
  str[0] = 0;
   11ec8:	fc 01       	movw	r30, r24
   11eca:	10 82       	st	Z, r1
   11ecc:	3a 01       	movw	r6, r20
   11ece:	f1 2c       	mov	r15, r1
   11ed0:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:119
  for (uint8_t a = 0; a < maxBytes; a++ )
  {
    itoa(bytes[a], tmp1, base);
   11ed2:	a0 2e       	mov	r10, r16
   11ed4:	b1 2c       	mov	r11, r1
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:433
extern __inline__ __ATTR_GNU_INLINE__
char *itoa (int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__itoa (int, char *, int);
	return __itoa (__val, __s, __radix);
   11ed6:	8e 01       	movw	r16, r28
   11ed8:	0f 5f       	subi	r16, 0xFF	; 255
   11eda:	1f 4f       	sbci	r17, 0xFF	; 255
_Z12createStringPccPhhh():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:123
    if (strlen(tmp1) < 2)
      strcat(str, "0");
    strcat(str, tmp1); 
    if (a < maxBytes - 1)
   11edc:	82 2f       	mov	r24, r18
   11ede:	81 50       	subi	r24, 0x01	; 1
   11ee0:	99 0b       	sbc	r25, r25
   11ee2:	4c 01       	movw	r8, r24
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:119
{
  char tmp1[8];
  str[0] = 0;
  for (uint8_t a = 0; a < maxBytes; a++ )
  {
    itoa(bytes[a], tmp1, base);
   11ee4:	f3 01       	movw	r30, r6
   11ee6:	81 91       	ld	r24, Z+
   11ee8:	3f 01       	movw	r6, r30
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:433
   11eea:	a5 01       	movw	r20, r10
   11eec:	b8 01       	movw	r22, r16
   11eee:	90 e0       	ldi	r25, 0x00	; 0
   11ef0:	0e 94 1c a3 	call	0x14638	; 0x14638 <itoa>
_Z12createStringPccPhhh():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:120
    if (strlen(tmp1) < 2)
   11ef4:	f8 01       	movw	r30, r16
   11ef6:	01 90       	ld	r0, Z+
   11ef8:	00 20       	and	r0, r0
   11efa:	e9 f7       	brne	.-6      	; 0x11ef6 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x60>
   11efc:	31 97       	sbiw	r30, 0x01	; 1
   11efe:	e0 1b       	sub	r30, r16
   11f00:	f1 0b       	sbc	r31, r17
   11f02:	32 97       	sbiw	r30, 0x02	; 2
   11f04:	28 f4       	brcc	.+10     	; 0x11f10 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x7a>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:121
      strcat(str, "0");
   11f06:	62 ef       	ldi	r22, 0xF2	; 242
   11f08:	76 e0       	ldi	r23, 0x06	; 6
   11f0a:	c6 01       	movw	r24, r12
   11f0c:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:122
    strcat(str, tmp1); 
   11f10:	b8 01       	movw	r22, r16
   11f12:	c6 01       	movw	r24, r12
   11f14:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:123
    if (a < maxBytes - 1)
   11f18:	e8 14       	cp	r14, r8
   11f1a:	f9 04       	cpc	r15, r9
   11f1c:	34 f4       	brge	.+12     	; 0x11f2a <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x94>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:125
    {
      tmp1[0] = sep;
   11f1e:	49 82       	std	Y+1, r4	; 0x01
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:126
      tmp1[1] = 0;
   11f20:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:127
      strcat(str, tmp1);
   11f22:	b8 01       	movw	r22, r16
   11f24:	c6 01       	movw	r24, r12
   11f26:	0e 94 51 af 	call	0x15ea2	; 0x15ea2 <strcat>
   11f2a:	ff ef       	ldi	r31, 0xFF	; 255
   11f2c:	ef 1a       	sub	r14, r31
   11f2e:	ff 0a       	sbc	r15, r31
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:117

void createString(char* str, char sep, uint8_t* bytes, uint8_t maxBytes, uint8_t base)
{
  char tmp1[8];
  str[0] = 0;
  for (uint8_t a = 0; a < maxBytes; a++ )
   11f30:	e5 14       	cp	r14, r5
   11f32:	c0 f2       	brcs	.-80     	; 0x11ee4 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x4e>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:130
      tmp1[0] = sep;
      tmp1[1] = 0;
      strcat(str, tmp1);
    }
  }
}
   11f34:	28 96       	adiw	r28, 0x08	; 8
   11f36:	0f b6       	in	r0, 0x3f	; 63
   11f38:	f8 94       	cli
   11f3a:	de bf       	out	0x3e, r29	; 62
   11f3c:	0f be       	out	0x3f, r0	; 63
   11f3e:	cd bf       	out	0x3d, r28	; 61
   11f40:	df 91       	pop	r29
   11f42:	cf 91       	pop	r28
   11f44:	1f 91       	pop	r17
   11f46:	0f 91       	pop	r16
   11f48:	ff 90       	pop	r15
   11f4a:	ef 90       	pop	r14
   11f4c:	df 90       	pop	r13
   11f4e:	cf 90       	pop	r12
   11f50:	bf 90       	pop	r11
   11f52:	af 90       	pop	r10
   11f54:	9f 90       	pop	r9
   11f56:	8f 90       	pop	r8
   11f58:	7f 90       	pop	r7
   11f5a:	6f 90       	pop	r6
   11f5c:	5f 90       	pop	r5
   11f5e:	4f 90       	pop	r4
   11f60:	08 95       	ret

00011f62 <EEPROMwriteFloat(unsigned int, float)>:
_Z16EEPROMwriteFloatjf():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:69
  return data.f;
}


void EEPROMwriteFloat(unsigned int addr, float x)
{
   11f62:	cf 92       	push	r12
   11f64:	df 92       	push	r13
   11f66:	ef 92       	push	r14
   11f68:	ff 92       	push	r15
   11f6a:	0f 93       	push	r16
   11f6c:	1f 93       	push	r17
   11f6e:	cf 93       	push	r28
   11f70:	df 93       	push	r29
   11f72:	00 d0       	rcall	.+0      	; 0x11f74 <EEPROMwriteFloat(unsigned int, float)+0x12>
   11f74:	1f 92       	push	r1
   11f76:	cd b7       	in	r28, 0x3d	; 61
   11f78:	de b7       	in	r29, 0x3e	; 62
   11f7a:	6c 01       	movw	r12, r24
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:74
  union {
    uint8_t b[4];
    float f;
  } data;
  data.f = x;
   11f7c:	49 83       	std	Y+1, r20	; 0x01
   11f7e:	5a 83       	std	Y+2, r21	; 0x02
   11f80:	6b 83       	std	Y+3, r22	; 0x03
   11f82:	7c 83       	std	Y+4, r23	; 0x04
   11f84:	ce 01       	movw	r24, r28
   11f86:	01 96       	adiw	r24, 0x01	; 1
   11f88:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:75
  for (int i = 0; i < 4; i++) EEPROM.write(addr + i, data.b[i]);
   11f8a:	10 e0       	ldi	r17, 0x00	; 0
   11f8c:	00 e0       	ldi	r16, 0x00	; 0
   11f8e:	f7 01       	movw	r30, r14
   11f90:	61 91       	ld	r22, Z+
   11f92:	7f 01       	movw	r14, r30
   11f94:	c8 01       	movw	r24, r16
   11f96:	8c 0d       	add	r24, r12
   11f98:	9d 1d       	adc	r25, r13
   11f9a:	0e 94 47 8f 	call	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
   11f9e:	0f 5f       	subi	r16, 0xFF	; 255
   11fa0:	1f 4f       	sbci	r17, 0xFF	; 255
   11fa2:	04 30       	cpi	r16, 0x04	; 4
   11fa4:	11 05       	cpc	r17, r1
   11fa6:	99 f7       	brne	.-26     	; 0x11f8e <EEPROMwriteFloat(unsigned int, float)+0x2c>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:76
}
   11fa8:	0f 90       	pop	r0
   11faa:	0f 90       	pop	r0
   11fac:	0f 90       	pop	r0
   11fae:	0f 90       	pop	r0
   11fb0:	df 91       	pop	r29
   11fb2:	cf 91       	pop	r28
   11fb4:	1f 91       	pop	r17
   11fb6:	0f 91       	pop	r16
   11fb8:	ff 90       	pop	r15
   11fba:	ef 90       	pop	r14
   11fbc:	df 90       	pop	r13
   11fbe:	cf 90       	pop	r12
   11fc0:	08 95       	ret

00011fc2 <EEPROMreadFloat(unsigned int)>:
_Z15EEPROMreadFloatj():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:58
}


//// cteni zapis eeprom float datovy typ
float EEPROMreadFloat(unsigned int addr)
{
   11fc2:	cf 92       	push	r12
   11fc4:	df 92       	push	r13
   11fc6:	ef 92       	push	r14
   11fc8:	ff 92       	push	r15
   11fca:	0f 93       	push	r16
   11fcc:	1f 93       	push	r17
   11fce:	cf 93       	push	r28
   11fd0:	df 93       	push	r29
   11fd2:	00 d0       	rcall	.+0      	; 0x11fd4 <EEPROMreadFloat(unsigned int)+0x12>
   11fd4:	1f 92       	push	r1
   11fd6:	cd b7       	in	r28, 0x3d	; 61
   11fd8:	de b7       	in	r29, 0x3e	; 62
   11fda:	7e 01       	movw	r14, r28
   11fdc:	25 e0       	ldi	r18, 0x05	; 5
   11fde:	e2 0e       	add	r14, r18
   11fe0:	f1 1c       	adc	r15, r1
   11fe2:	8e 01       	movw	r16, r28
   11fe4:	0f 5f       	subi	r16, 0xFF	; 255
   11fe6:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:63
  union {
    uint8_t b[4];
    float f;
  } data;
  for (int i = 0; i < 4; i++) data.b[i] = EEPROM.read(addr + i);
   11fe8:	6c 01       	movw	r12, r24
   11fea:	c0 1a       	sub	r12, r16
   11fec:	d1 0a       	sbc	r13, r17
   11fee:	c6 01       	movw	r24, r12
   11ff0:	80 0f       	add	r24, r16
   11ff2:	91 1f       	adc	r25, r17
   11ff4:	0e 94 49 8f 	call	0x11e92	; 0x11e92 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
   11ff8:	f8 01       	movw	r30, r16
   11ffa:	81 93       	st	Z+, r24
   11ffc:	8f 01       	movw	r16, r30
   11ffe:	ee 15       	cp	r30, r14
   12000:	ff 05       	cpc	r31, r15
   12002:	a9 f7       	brne	.-22     	; 0x11fee <EEPROMreadFloat(unsigned int)+0x2c>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:64
  return data.f;
   12004:	69 81       	ldd	r22, Y+1	; 0x01
   12006:	7a 81       	ldd	r23, Y+2	; 0x02
   12008:	8b 81       	ldd	r24, Y+3	; 0x03
   1200a:	9c 81       	ldd	r25, Y+4	; 0x04
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:65
}
   1200c:	0f 90       	pop	r0
   1200e:	0f 90       	pop	r0
   12010:	0f 90       	pop	r0
   12012:	0f 90       	pop	r0
   12014:	df 91       	pop	r29
   12016:	cf 91       	pop	r28
   12018:	1f 91       	pop	r17
   1201a:	0f 91       	pop	r16
   1201c:	ff 90       	pop	r15
   1201e:	ef 90       	pop	r14
   12020:	df 90       	pop	r13
   12022:	cf 90       	pop	r12
   12024:	08 95       	ret

00012026 <W5500Class::read(unsigned int, unsigned char)>:
_ZN10W5500Class4readEjh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:134

    return _len;
}

uint8_t W5500Class::read(uint16_t _addr, uint8_t _cb)
{
   12026:	cf 93       	push	r28
   12028:	df 93       	push	r29
   1202a:	d8 2f       	mov	r29, r24
   1202c:	c6 2f       	mov	r28, r22
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:135
    SPI.beginTransaction(wiznet_SPI_settings);
   1202e:	80 91 3c 11 	lds	r24, 0x113C	; 0x80113c <wiznet_SPI_settings>
   12032:	90 91 3d 11 	lds	r25, 0x113D	; 0x80113d <wiznet_SPI_settings+0x1>
   12036:	0e 94 4f 79 	call	0xf29e	; 0xf29e <SPIClass::beginTransaction(SPISettings)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:136
    setSS();
   1203a:	0e 94 93 83 	call	0x10726	; 0x10726 <W5500Class::setSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:137
    SPI.transfer(_addr >> 8);
   1203e:	80 e0       	ldi	r24, 0x00	; 0
   12040:	0e 94 48 79 	call	0xf290	; 0xf290 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:138
    SPI.transfer(_addr & 0xFF);
   12044:	8d 2f       	mov	r24, r29
   12046:	0e 94 48 79 	call	0xf290	; 0xf290 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:139
    SPI.transfer(_cb);
   1204a:	8c 2f       	mov	r24, r28
   1204c:	0e 94 48 79 	call	0xf290	; 0xf290 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:140
    uint8_t _data = SPI.transfer(0);
   12050:	80 e0       	ldi	r24, 0x00	; 0
   12052:	0e 94 48 79 	call	0xf290	; 0xf290 <SPIClass::transfer(unsigned char)>
   12056:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:141
    resetSS();
   12058:	0e 94 8e 83 	call	0x1071c	; 0x1071c <W5500Class::resetSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:145
    SPI.endTransaction();

    return _data;
}
   1205c:	8c 2f       	mov	r24, r28
   1205e:	df 91       	pop	r29
   12060:	cf 91       	pop	r28
   12062:	08 95       	ret

00012064 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>:
_ZN10W5500Class5writeEjhPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:118

    return 1;
}

uint16_t W5500Class::write(uint16_t _addr, uint8_t _cb, const uint8_t *_buf, uint16_t _len)
{
   12064:	df 92       	push	r13
   12066:	ef 92       	push	r14
   12068:	ff 92       	push	r15
   1206a:	0f 93       	push	r16
   1206c:	1f 93       	push	r17
   1206e:	cf 93       	push	r28
   12070:	df 93       	push	r29
   12072:	d8 2f       	mov	r29, r24
   12074:	d9 2e       	mov	r13, r25
   12076:	c6 2f       	mov	r28, r22
   12078:	7a 01       	movw	r14, r20
   1207a:	89 01       	movw	r16, r18
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:119
    SPI.beginTransaction(wiznet_SPI_settings);
   1207c:	80 91 3c 11 	lds	r24, 0x113C	; 0x80113c <wiznet_SPI_settings>
   12080:	90 91 3d 11 	lds	r25, 0x113D	; 0x80113d <wiznet_SPI_settings+0x1>
   12084:	0e 94 4f 79 	call	0xf29e	; 0xf29e <SPIClass::beginTransaction(SPISettings)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:120
    setSS();
   12088:	0e 94 93 83 	call	0x10726	; 0x10726 <W5500Class::setSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:121
    SPI.transfer(_addr >> 8);
   1208c:	8d 2d       	mov	r24, r13
   1208e:	0e 94 48 79 	call	0xf290	; 0xf290 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:122
    SPI.transfer(_addr & 0xFF);
   12092:	8d 2f       	mov	r24, r29
   12094:	0e 94 48 79 	call	0xf290	; 0xf290 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:123
    SPI.transfer(_cb);
   12098:	8c 2f       	mov	r24, r28
   1209a:	0e 94 48 79 	call	0xf290	; 0xf290 <SPIClass::transfer(unsigned char)>
   1209e:	e7 01       	movw	r28, r14
   120a0:	e0 0e       	add	r14, r16
   120a2:	f1 1e       	adc	r15, r17
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:124
    for (uint16_t i=0; i<_len; i++){
   120a4:	ce 15       	cp	r28, r14
   120a6:	df 05       	cpc	r29, r15
   120a8:	21 f0       	breq	.+8      	; 0x120b2 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)+0x4e>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:125
        SPI.transfer(_buf[i]);
   120aa:	89 91       	ld	r24, Y+
   120ac:	0e 94 48 79 	call	0xf290	; 0xf290 <SPIClass::transfer(unsigned char)>
   120b0:	f9 cf       	rjmp	.-14     	; 0x120a4 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)+0x40>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:127
    }
    resetSS();
   120b2:	0e 94 8e 83 	call	0x1071c	; 0x1071c <W5500Class::resetSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:131
    SPI.endTransaction();

    return _len;
}
   120b6:	c8 01       	movw	r24, r16
   120b8:	df 91       	pop	r29
   120ba:	cf 91       	pop	r28
   120bc:	1f 91       	pop	r17
   120be:	0f 91       	pop	r16
   120c0:	ff 90       	pop	r15
   120c2:	ef 90       	pop	r14
   120c4:	df 90       	pop	r13
   120c6:	08 95       	ret

000120c8 <EthernetClass::begin(unsigned char*, IPAddress, IPAddress, IPAddress, IPAddress) [clone .constprop.101]>:
_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_.constprop.101():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.cpp:136
{
  IPAddress subnet(255, 255, 255, 0);
  begin(mac_address, local_ip, dns_server, gateway, subnet);
}

void EthernetClass::begin(uint8_t *mac, IPAddress local_ip, IPAddress dns_server, IPAddress gateway, IPAddress subnet)
   120c8:	8f 92       	push	r8
   120ca:	9f 92       	push	r9
   120cc:	af 92       	push	r10
   120ce:	bf 92       	push	r11
   120d0:	cf 92       	push	r12
   120d2:	df 92       	push	r13
   120d4:	ef 92       	push	r14
   120d6:	ff 92       	push	r15
   120d8:	0f 93       	push	r16
   120da:	1f 93       	push	r17
   120dc:	cf 93       	push	r28
   120de:	5c 01       	movw	r10, r24
   120e0:	6b 01       	movw	r12, r22
   120e2:	7a 01       	movw	r14, r20
   120e4:	89 01       	movw	r16, r18
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.cpp:138
{
  w5500.init(w5500_cspin);
   120e6:	c0 91 16 0c 	lds	r28, 0x0C16	; 0x800c16 <Ethernet+0xc>
init():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:30
SPISettings wiznet_SPI_settings(8000000, MSBFIRST, SPI_MODE0);
uint8_t SPI_CS;

void W5500Class::init(uint8_t ss_pin)
{
  SPI_CS = ss_pin;
   120ea:	c0 93 e2 10 	sts	0x10E2, r28	; 0x8010e2 <SPI_CS>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:32

  delay(1000);
   120ee:	68 ee       	ldi	r22, 0xE8	; 232
   120f0:	73 e0       	ldi	r23, 0x03	; 3
   120f2:	80 e0       	ldi	r24, 0x00	; 0
   120f4:	90 e0       	ldi	r25, 0x00	; 0
   120f6:	0e 94 f5 83 	call	0x107ea	; 0x107ea <delay>
initSS():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:340
private:
  static const uint16_t RSIZE = 2048; // Max Rx buffer size

private:
  // could do inline optimizations
  static inline void initSS()  { pinMode(SPI_CS, OUTPUT); }
   120fa:	61 e0       	ldi	r22, 0x01	; 1
   120fc:	8c 2f       	mov	r24, r28
   120fe:	0e 94 b9 83 	call	0x10772	; 0x10772 <pinMode>
init():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:34
  initSS();
  SPI.begin();
   12102:	0e 94 82 32 	call	0x6504	; 0x6504 <SPIClass::begin()>
readMR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:234
  static uint16_t read##name(uint8_t *_buff) {    \
    return read(address, 0x00, _buff, size);      \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
   12106:	60 e0       	ldi	r22, 0x00	; 0
   12108:	90 e0       	ldi	r25, 0x00	; 0
   1210a:	80 e0       	ldi	r24, 0x00	; 0
   1210c:	0e 94 13 90 	call	0x12026	; 0x12026 <W5500Class::read(unsigned int, unsigned char)>
_ZN10W5500Class7swResetEv.isra.1():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:417
//  readPHYCFGR();
  return read(0x002E, 0x00);
}

void W5500Class::swReset() {
  writeMR( (readMR() | 0x80) );
   12110:	48 2f       	mov	r20, r24
   12112:	40 68       	ori	r20, 0x80	; 128
writeMR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:234
  static uint16_t read##name(uint8_t *_buff) {    \
    return read(address, 0x00, _buff, size);      \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
   12114:	64 e0       	ldi	r22, 0x04	; 4
   12116:	90 e0       	ldi	r25, 0x00	; 0
   12118:	80 e0       	ldi	r24, 0x00	; 0
   1211a:	0e 94 98 83 	call	0x10730	; 0x10730 <W5500Class::write(unsigned int, unsigned char, unsigned char)>
   1211e:	cc e0       	ldi	r28, 0x0C	; 12
   12120:	88 e0       	ldi	r24, 0x08	; 8
   12122:	88 2e       	mov	r8, r24
   12124:	91 2c       	mov	r9, r1
init():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:38
  w5500.swReset();
  for (int i=0; i<MAX_SOCK_NUM; i++) {
    uint8_t cntl_byte = (0x0C + (i<<5));
    write( 0x1E, cntl_byte, 2); //0x1E - Sn_RXBUF_SIZE
   12126:	42 e0       	ldi	r20, 0x02	; 2
   12128:	6c 2f       	mov	r22, r28
   1212a:	8e e1       	ldi	r24, 0x1E	; 30
   1212c:	90 e0       	ldi	r25, 0x00	; 0
   1212e:	0e 94 98 83 	call	0x10730	; 0x10730 <W5500Class::write(unsigned int, unsigned char, unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:39
    write( 0x1F, cntl_byte, 2); //0x1F - Sn_TXBUF_SIZE
   12132:	42 e0       	ldi	r20, 0x02	; 2
   12134:	6c 2f       	mov	r22, r28
   12136:	8f e1       	ldi	r24, 0x1F	; 31
   12138:	90 e0       	ldi	r25, 0x00	; 0
   1213a:	0e 94 98 83 	call	0x10730	; 0x10730 <W5500Class::write(unsigned int, unsigned char, unsigned char)>
   1213e:	81 e0       	ldi	r24, 0x01	; 1
   12140:	88 1a       	sub	r8, r24
   12142:	91 08       	sbc	r9, r1
   12144:	c0 5e       	subi	r28, 0xE0	; 224
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:36

  delay(1000);
  initSS();
  SPI.begin();
  w5500.swReset();
  for (int i=0; i<MAX_SOCK_NUM; i++) {
   12146:	81 14       	cp	r8, r1
   12148:	91 04       	cpc	r9, r1
   1214a:	69 f7       	brne	.-38     	; 0x12126 <EthernetClass::begin(unsigned char*, IPAddress, IPAddress, IPAddress, IPAddress) [clone .constprop.101]+0x5e>
writeSHAR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:237
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
  __GP_REGISTER_N(SHAR,   0x0009, 6); // Source MAC address
   1214c:	26 e0       	ldi	r18, 0x06	; 6
   1214e:	30 e0       	ldi	r19, 0x00	; 0
   12150:	4f e1       	ldi	r20, 0x1F	; 31
   12152:	5c e0       	ldi	r21, 0x0C	; 12
   12154:	64 e0       	ldi	r22, 0x04	; 4
   12156:	89 e0       	ldi	r24, 0x09	; 9
   12158:	90 e0       	ldi	r25, 0x00	; 0
   1215a:	0e 94 32 90 	call	0x12064	; 0x12064 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
   1215e:	a5 01       	movw	r20, r10
   12160:	4e 5f       	subi	r20, 0xFE	; 254
   12162:	5f 4f       	sbci	r21, 0xFF	; 255
writeSIPR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:238
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
   12164:	24 e0       	ldi	r18, 0x04	; 4
   12166:	30 e0       	ldi	r19, 0x00	; 0
   12168:	64 e0       	ldi	r22, 0x04	; 4
   1216a:	8f e0       	ldi	r24, 0x0F	; 15
   1216c:	90 e0       	ldi	r25, 0x00	; 0
   1216e:	0e 94 32 90 	call	0x12064	; 0x12064 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:40
   12172:	a7 01       	movw	r20, r14
   12174:	4e 5f       	subi	r20, 0xFE	; 254
   12176:	5f 4f       	sbci	r21, 0xFF	; 255
writeGAR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:235
    return read(address, 0x00, _buff, size);      \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
   12178:	24 e0       	ldi	r18, 0x04	; 4
   1217a:	30 e0       	ldi	r19, 0x00	; 0
   1217c:	64 e0       	ldi	r22, 0x04	; 4
   1217e:	81 e0       	ldi	r24, 0x01	; 1
   12180:	90 e0       	ldi	r25, 0x00	; 0
   12182:	0e 94 32 90 	call	0x12064	; 0x12064 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:40
   12186:	a8 01       	movw	r20, r16
   12188:	4e 5f       	subi	r20, 0xFE	; 254
   1218a:	5f 4f       	sbci	r21, 0xFF	; 255
writeSUBR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:236
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
   1218c:	24 e0       	ldi	r18, 0x04	; 4
   1218e:	30 e0       	ldi	r19, 0x00	; 0
   12190:	64 e0       	ldi	r22, 0x04	; 4
   12192:	85 e0       	ldi	r24, 0x05	; 5
   12194:	90 e0       	ldi	r25, 0x00	; 0
   12196:	0e 94 32 90 	call	0x12064	; 0x12064 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
_ZN9IPAddressaSERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
   1219a:	f6 01       	movw	r30, r12
   1219c:	82 81       	ldd	r24, Z+2	; 0x02
   1219e:	93 81       	ldd	r25, Z+3	; 0x03
   121a0:	a4 81       	ldd	r26, Z+4	; 0x04
   121a2:	b5 81       	ldd	r27, Z+5	; 0x05
   121a4:	80 93 0c 0c 	sts	0x0C0C, r24	; 0x800c0c <Ethernet+0x2>
   121a8:	90 93 0d 0c 	sts	0x0C0D, r25	; 0x800c0d <Ethernet+0x3>
   121ac:	a0 93 0e 0c 	sts	0x0C0E, r26	; 0x800c0e <Ethernet+0x4>
   121b0:	b0 93 0f 0c 	sts	0x0C0F, r27	; 0x800c0f <Ethernet+0x5>
_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_.constprop.101():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.cpp:144
  w5500.setMACAddress(mac);
  w5500.setIPAddress(local_ip.raw_address());
  w5500.setGatewayIp(gateway.raw_address());
  w5500.setSubnetMask(subnet.raw_address());
  _dnsServerAddress = dns_server;
}
   121b4:	cf 91       	pop	r28
   121b6:	1f 91       	pop	r17
   121b8:	0f 91       	pop	r16
   121ba:	ff 90       	pop	r15
   121bc:	ef 90       	pop	r14
   121be:	df 90       	pop	r13
   121c0:	cf 90       	pop	r12
   121c2:	bf 90       	pop	r11
   121c4:	af 90       	pop	r10
   121c6:	9f 90       	pop	r9
   121c8:	8f 90       	pop	r8
   121ca:	08 95       	ret

000121cc <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>:
_ZN10W5500Class7writeSnEhjh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:352
uint8_t W5500Class::readSn(SOCKET _s, uint16_t _addr) {
    uint8_t cntl_byte = (_s<<5)+0x08;
    return read(_addr, cntl_byte);
}

uint8_t W5500Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
   121cc:	9b 01       	movw	r18, r22
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:353
    uint8_t cntl_byte = (_s<<5)+0x0C;
   121ce:	82 95       	swap	r24
   121d0:	88 0f       	add	r24, r24
   121d2:	80 7e       	andi	r24, 0xE0	; 224
   121d4:	6c e0       	ldi	r22, 0x0C	; 12
   121d6:	68 0f       	add	r22, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:354
    return write(_addr, cntl_byte, _data);
   121d8:	c9 01       	movw	r24, r18
   121da:	0c 94 98 83 	jmp	0x10730	; 0x10730 <W5500Class::write(unsigned int, unsigned char, unsigned char)>

000121de <W5500Class::send_data_processing_offset(unsigned char, unsigned int, unsigned char const*, unsigned int) [clone .constprop.28]>:
_ZN10W5500Class27send_data_processing_offsetEhjPKhj.constprop.28():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:74
  // This is same as having no offset in a call to send_data_processing_offset
  send_data_processing_offset(s, 0, data, len);

}

void W5500Class::send_data_processing_offset(SOCKET s, uint16_t data_offset, const uint8_t *data, uint16_t len)
   121de:	bf 92       	push	r11
   121e0:	cf 92       	push	r12
   121e2:	df 92       	push	r13
   121e4:	ef 92       	push	r14
   121e6:	ff 92       	push	r15
   121e8:	0f 93       	push	r16
   121ea:	1f 93       	push	r17
   121ec:	cf 93       	push	r28
   121ee:	df 93       	push	r29
   121f0:	b8 2e       	mov	r11, r24
   121f2:	6b 01       	movw	r12, r22
   121f4:	7a 01       	movw	r14, r20
   121f6:	89 01       	movw	r16, r18
readSnTX_WR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:319
  __SOCKET_REGISTER8(SnPROTO,     0x0014)        // Protocol in IP RAW Mode
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
   121f8:	64 e2       	ldi	r22, 0x24	; 36
   121fa:	70 e0       	ldi	r23, 0x00	; 0
   121fc:	0e 94 80 2e 	call	0x5d00	; 0x5d00 <W5500Class::readSn(unsigned char, unsigned int)>
   12200:	c8 2f       	mov	r28, r24
   12202:	65 e2       	ldi	r22, 0x25	; 37
   12204:	70 e0       	ldi	r23, 0x00	; 0
   12206:	8b 2d       	mov	r24, r11
   12208:	0e 94 80 2e 	call	0x5d00	; 0x5d00 <W5500Class::readSn(unsigned char, unsigned int)>
   1220c:	d0 e0       	ldi	r29, 0x00	; 0
   1220e:	dc 2f       	mov	r29, r28
   12210:	cc 27       	eor	r28, r28
_ZN10W5500Class27send_data_processing_offsetEhjPKhj.constprop.28():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:78
{
    uint16_t ptr = readSnTX_WR(s);
    uint8_t cntl_byte = (0x14+(s<<5));
    ptr += data_offset;
   12212:	8c 0d       	add	r24, r12
   12214:	9d 2d       	mov	r25, r13
   12216:	91 1d       	adc	r25, r1
   12218:	c8 0f       	add	r28, r24
   1221a:	d9 1f       	adc	r29, r25
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:77
}

void W5500Class::send_data_processing_offset(SOCKET s, uint16_t data_offset, const uint8_t *data, uint16_t len)
{
    uint16_t ptr = readSnTX_WR(s);
    uint8_t cntl_byte = (0x14+(s<<5));
   1221c:	6b 2d       	mov	r22, r11
   1221e:	62 95       	swap	r22
   12220:	66 0f       	add	r22, r22
   12222:	60 7e       	andi	r22, 0xE0	; 224
   12224:	6c 5e       	subi	r22, 0xEC	; 236
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:79
    ptr += data_offset;
    write(ptr, cntl_byte, data, len);
   12226:	98 01       	movw	r18, r16
   12228:	a7 01       	movw	r20, r14
   1222a:	ce 01       	movw	r24, r28
   1222c:	0e 94 32 90 	call	0x12064	; 0x12064 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:80
    ptr += len;
   12230:	c0 0f       	add	r28, r16
   12232:	d1 1f       	adc	r29, r17
writeSnTX_WR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:319
   12234:	4d 2f       	mov	r20, r29
   12236:	64 e2       	ldi	r22, 0x24	; 36
   12238:	70 e0       	ldi	r23, 0x00	; 0
   1223a:	8b 2d       	mov	r24, r11
   1223c:	0e 94 e6 90 	call	0x121cc	; 0x121cc <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   12240:	4c 2f       	mov	r20, r28
   12242:	65 e2       	ldi	r22, 0x25	; 37
   12244:	70 e0       	ldi	r23, 0x00	; 0
   12246:	8b 2d       	mov	r24, r11
_ZN10W5500Class27send_data_processing_offsetEhjPKhj.constprop.28():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:82
    writeSnTX_WR(s, ptr);
}
   12248:	df 91       	pop	r29
   1224a:	cf 91       	pop	r28
   1224c:	1f 91       	pop	r17
   1224e:	0f 91       	pop	r16
   12250:	ff 90       	pop	r15
   12252:	ef 90       	pop	r14
   12254:	df 90       	pop	r13
   12256:	cf 90       	pop	r12
   12258:	bf 90       	pop	r11
writeSnTX_WR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:319
   1225a:	0c 94 e6 90 	jmp	0x121cc	; 0x121cc <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>

0001225e <EthernetUDP::write(unsigned char const*, unsigned int)>:
_ZN11EthernetUDP5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:116
{
  return write(&byte, 1);
}

size_t EthernetUDP::write(const uint8_t *buffer, size_t size)
{
   1225e:	af 92       	push	r10
   12260:	bf 92       	push	r11
   12262:	cf 92       	push	r12
   12264:	df 92       	push	r13
   12266:	ff 92       	push	r15
   12268:	0f 93       	push	r16
   1226a:	1f 93       	push	r17
   1226c:	cf 93       	push	r28
   1226e:	df 93       	push	r29
   12270:	8c 01       	movw	r16, r24
   12272:	5b 01       	movw	r10, r22
   12274:	ea 01       	movw	r28, r20
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:117
  uint16_t bytes_written = bufferData(_sock, _offset, buffer, size);
   12276:	fc 01       	movw	r30, r24
   12278:	c7 88       	ldd	r12, Z+23	; 0x17
   1227a:	d0 8c       	ldd	r13, Z+24	; 0x18
   1227c:	f4 84       	ldd	r15, Z+12	; 0x0c
bufferData():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:361
}

uint16_t bufferData(SOCKET s, uint16_t offset, const uint8_t* buf, uint16_t len)
{
  uint16_t ret =0;
  if (len > w5500.getTXFreeSize(s))
   1227e:	8f 2d       	mov	r24, r15
   12280:	0e 94 bd 81 	call	0x1037a	; 0x1037a <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.27]>
   12284:	8c 17       	cp	r24, r28
   12286:	9d 07       	cpc	r25, r29
   12288:	20 f4       	brcc	.+8      	; 0x12292 <EthernetUDP::write(unsigned char const*, unsigned int)+0x34>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:363
  {
    ret = w5500.getTXFreeSize(s); // check size not to exceed MAX size.
   1228a:	8f 2d       	mov	r24, r15
   1228c:	0e 94 bd 81 	call	0x1037a	; 0x1037a <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.27]>
   12290:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:369
  }
  else
  {
    ret = len;
  }
  w5500.send_data_processing_offset(s, offset, buf, ret);
   12292:	9e 01       	movw	r18, r28
   12294:	a5 01       	movw	r20, r10
   12296:	b6 01       	movw	r22, r12
   12298:	8f 2d       	mov	r24, r15
   1229a:	0e 94 ef 90 	call	0x121de	; 0x121de <W5500Class::send_data_processing_offset(unsigned char, unsigned int, unsigned char const*, unsigned int) [clone .constprop.28]>
_ZN11EthernetUDP5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:118
  _offset += bytes_written;
   1229e:	f8 01       	movw	r30, r16
   122a0:	87 89       	ldd	r24, Z+23	; 0x17
   122a2:	90 8d       	ldd	r25, Z+24	; 0x18
   122a4:	8c 0f       	add	r24, r28
   122a6:	9d 1f       	adc	r25, r29
   122a8:	90 8f       	std	Z+24, r25	; 0x18
   122aa:	87 8b       	std	Z+23, r24	; 0x17
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:120
  return bytes_written;
}
   122ac:	ce 01       	movw	r24, r28
   122ae:	df 91       	pop	r29
   122b0:	cf 91       	pop	r28
   122b2:	1f 91       	pop	r17
   122b4:	0f 91       	pop	r16
   122b6:	ff 90       	pop	r15
   122b8:	df 90       	pop	r13
   122ba:	cf 90       	pop	r12
   122bc:	bf 90       	pop	r11
   122be:	af 90       	pop	r10
   122c0:	08 95       	ret

000122c2 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>:
_ZN10W5500Class9execCmdSnEh7SockCMD.constprop.26():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:163
    SPI.endTransaction();

    return _len;
}

void W5500Class::execCmdSn(SOCKET s, SockCMD _cmd) {
   122c2:	cf 93       	push	r28
   122c4:	c8 2f       	mov	r28, r24
   122c6:	46 2f       	mov	r20, r22
writeSnCR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:306
    return readSn(_s, address, _buff, size);                 \
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
   122c8:	61 e0       	ldi	r22, 0x01	; 1
   122ca:	70 e0       	ldi	r23, 0x00	; 0
   122cc:	0e 94 e6 90 	call	0x121cc	; 0x121cc <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
readSnCR():
   122d0:	61 e0       	ldi	r22, 0x01	; 1
   122d2:	70 e0       	ldi	r23, 0x00	; 0
   122d4:	8c 2f       	mov	r24, r28
   122d6:	0e 94 80 2e 	call	0x5d00	; 0x5d00 <W5500Class::readSn(unsigned char, unsigned int)>
_ZN10W5500Class9execCmdSnEh7SockCMD.constprop.26():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:167
    // Send command to socket
    writeSnCR(s, _cmd);
    // Wait for command to complete
    while (readSnCR(s))
   122da:	81 11       	cpse	r24, r1
   122dc:	f9 cf       	rjmp	.-14     	; 0x122d0 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]+0xe>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:169
    ;
}
   122de:	cf 91       	pop	r28
   122e0:	08 95       	ret

000122e2 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.24]>:
_ZN10W5500Class20recv_data_processingEhPhjh.constprop.24():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:84
    write(ptr, cntl_byte, data, len);
    ptr += len;
    writeSnTX_WR(s, ptr);
}

void W5500Class::recv_data_processing(SOCKET s, uint8_t *data, uint16_t len, uint8_t peek)
   122e2:	af 92       	push	r10
   122e4:	bf 92       	push	r11
   122e6:	cf 92       	push	r12
   122e8:	df 92       	push	r13
   122ea:	ef 92       	push	r14
   122ec:	ff 92       	push	r15
   122ee:	0f 93       	push	r16
   122f0:	1f 93       	push	r17
   122f2:	cf 93       	push	r28
   122f4:	df 93       	push	r29
   122f6:	f8 2e       	mov	r15, r24
   122f8:	5b 01       	movw	r10, r22
   122fa:	6a 01       	movw	r12, r20
   122fc:	e2 2e       	mov	r14, r18
readSnRX_RD():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:321
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
  __SOCKET_REGISTER16(SnRX_RSR,   0x0026)        // RX Free Size
  __SOCKET_REGISTER16(SnRX_RD,    0x0028)        // RX Read Pointer
   122fe:	68 e2       	ldi	r22, 0x28	; 40
   12300:	70 e0       	ldi	r23, 0x00	; 0
   12302:	0e 94 80 2e 	call	0x5d00	; 0x5d00 <W5500Class::readSn(unsigned char, unsigned int)>
   12306:	08 2f       	mov	r16, r24
   12308:	10 e0       	ldi	r17, 0x00	; 0
   1230a:	10 2f       	mov	r17, r16
   1230c:	00 27       	eor	r16, r16
   1230e:	69 e2       	ldi	r22, 0x29	; 41
   12310:	70 e0       	ldi	r23, 0x00	; 0
   12312:	8f 2d       	mov	r24, r15
   12314:	0e 94 80 2e 	call	0x5d00	; 0x5d00 <W5500Class::readSn(unsigned char, unsigned int)>
   12318:	e8 01       	movw	r28, r16
   1231a:	c8 0f       	add	r28, r24
   1231c:	d1 1d       	adc	r29, r1
read():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:149
    return _data;
}

uint16_t W5500Class::read(uint16_t _addr, uint8_t _cb, uint8_t *_buf, uint16_t _len)
{ 
    SPI.beginTransaction(wiznet_SPI_settings);
   1231e:	80 91 3c 11 	lds	r24, 0x113C	; 0x80113c <wiznet_SPI_settings>
   12322:	90 91 3d 11 	lds	r25, 0x113D	; 0x80113d <wiznet_SPI_settings+0x1>
   12326:	0e 94 4f 79 	call	0xf29e	; 0xf29e <SPIClass::beginTransaction(SPISettings)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:150
    setSS();
   1232a:	0e 94 93 83 	call	0x10726	; 0x10726 <W5500Class::setSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:151
    SPI.transfer(_addr >> 8);
   1232e:	8d 2f       	mov	r24, r29
   12330:	0e 94 48 79 	call	0xf290	; 0xf290 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:152
    SPI.transfer(_addr & 0xFF);
   12334:	8c 2f       	mov	r24, r28
   12336:	0e 94 48 79 	call	0xf290	; 0xf290 <SPIClass::transfer(unsigned char)>
read_data():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:99
    }
}

void W5500Class::read_data(SOCKET s, volatile uint16_t src, volatile uint8_t *dst, uint16_t len)
{
    uint8_t cntl_byte = (0x18+(s<<5));
   1233a:	8f 2d       	mov	r24, r15
   1233c:	82 95       	swap	r24
   1233e:	88 0f       	add	r24, r24
   12340:	80 7e       	andi	r24, 0xE0	; 224
read():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:153
{ 
    SPI.beginTransaction(wiznet_SPI_settings);
    setSS();
    SPI.transfer(_addr >> 8);
    SPI.transfer(_addr & 0xFF);
    SPI.transfer(_cb);
   12342:	88 5e       	subi	r24, 0xE8	; 232
   12344:	0e 94 48 79 	call	0xf290	; 0xf290 <SPIClass::transfer(unsigned char)>
   12348:	85 01       	movw	r16, r10
   1234a:	ac 0c       	add	r10, r12
   1234c:	bd 1c       	adc	r11, r13
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:155
    for (uint16_t i=0; i<_len; i++){
        _buf[i] = SPI.transfer(0);
   1234e:	80 e0       	ldi	r24, 0x00	; 0
   12350:	0e 94 48 79 	call	0xf290	; 0xf290 <SPIClass::transfer(unsigned char)>
   12354:	f8 01       	movw	r30, r16
   12356:	81 93       	st	Z+, r24
   12358:	8f 01       	movw	r16, r30
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:154
    SPI.beginTransaction(wiznet_SPI_settings);
    setSS();
    SPI.transfer(_addr >> 8);
    SPI.transfer(_addr & 0xFF);
    SPI.transfer(_cb);
    for (uint16_t i=0; i<_len; i++){
   1235a:	ea 15       	cp	r30, r10
   1235c:	fb 05       	cpc	r31, r11
   1235e:	b9 f7       	brne	.-18     	; 0x1234e <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.24]+0x6c>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:157
        _buf[i] = SPI.transfer(0);
    }
    resetSS();
   12360:	0e 94 8e 83 	call	0x1071c	; 0x1071c <W5500Class::resetSS()>
_ZN10W5500Class20recv_data_processingEhPhjh.constprop.24():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:90
{
    uint16_t ptr;
    ptr = readSnRX_RD(s);

    read_data(s, ptr, data, len);
    if (!peek)
   12364:	e1 10       	cpse	r14, r1
   12366:	18 c0       	rjmp	.+48     	; 0x12398 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.24]+0xb6>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:92
    {
        ptr += len;
   12368:	cc 0d       	add	r28, r12
   1236a:	dd 1d       	adc	r29, r13
writeSnRX_RD():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:321
   1236c:	4d 2f       	mov	r20, r29
   1236e:	68 e2       	ldi	r22, 0x28	; 40
   12370:	70 e0       	ldi	r23, 0x00	; 0
   12372:	8f 2d       	mov	r24, r15
   12374:	0e 94 e6 90 	call	0x121cc	; 0x121cc <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   12378:	4c 2f       	mov	r20, r28
   1237a:	69 e2       	ldi	r22, 0x29	; 41
   1237c:	70 e0       	ldi	r23, 0x00	; 0
   1237e:	8f 2d       	mov	r24, r15
_ZN10W5500Class20recv_data_processingEhPhjh.constprop.24():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:95
        writeSnRX_RD(s, ptr);
    }
}
   12380:	df 91       	pop	r29
   12382:	cf 91       	pop	r28
   12384:	1f 91       	pop	r17
   12386:	0f 91       	pop	r16
   12388:	ff 90       	pop	r15
   1238a:	ef 90       	pop	r14
   1238c:	df 90       	pop	r13
   1238e:	cf 90       	pop	r12
   12390:	bf 90       	pop	r11
   12392:	af 90       	pop	r10
writeSnRX_RD():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:321
   12394:	0c 94 e6 90 	jmp	0x121cc	; 0x121cc <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN10W5500Class20recv_data_processingEhPhjh.constprop.24():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:95
   12398:	df 91       	pop	r29
   1239a:	cf 91       	pop	r28
   1239c:	1f 91       	pop	r17
   1239e:	0f 91       	pop	r16
   123a0:	ff 90       	pop	r15
   123a2:	ef 90       	pop	r14
   123a4:	df 90       	pop	r13
   123a6:	cf 90       	pop	r12
   123a8:	bf 90       	pop	r11
   123aa:	af 90       	pop	r10
   123ac:	08 95       	ret

000123ae <recv(unsigned char, unsigned char*, int)>:
_Z4recvhPhi():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:153
 * 		It continues to wait for data as much as the application wants to receive.
 * 		
 * @return	received data size for success else -1.
 */
int16_t recv(SOCKET s, uint8_t *buf, int16_t len)
{
   123ae:	cf 92       	push	r12
   123b0:	df 92       	push	r13
   123b2:	ef 92       	push	r14
   123b4:	ff 92       	push	r15
   123b6:	1f 93       	push	r17
   123b8:	cf 93       	push	r28
   123ba:	df 93       	push	r29
   123bc:	18 2f       	mov	r17, r24
   123be:	6b 01       	movw	r12, r22
   123c0:	7a 01       	movw	r14, r20
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:155
  // Check how much data is available
  int16_t ret = w5500.getRXReceivedSize(s);
   123c2:	0e 94 d9 81 	call	0x103b2	; 0x103b2 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.23]>
   123c6:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:156
  if ( ret == 0 )
   123c8:	00 97       	sbiw	r24, 0x00	; 0
   123ca:	d9 f4       	brne	.+54     	; 0x12402 <recv(unsigned char, unsigned char*, int)+0x54>
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
   123cc:	63 e0       	ldi	r22, 0x03	; 3
   123ce:	70 e0       	ldi	r23, 0x00	; 0
   123d0:	81 2f       	mov	r24, r17
   123d2:	0e 94 80 2e 	call	0x5d00	; 0x5d00 <W5500Class::readSn(unsigned char, unsigned int)>
_Z4recvhPhi():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:160
  {
    // No data available.
    uint8_t status = w5500.readSnSR(s);
    if ( status == SnSR::LISTEN || status == SnSR::CLOSED || status == SnSR::CLOSE_WAIT )
   123d6:	84 31       	cpi	r24, 0x14	; 20
   123d8:	59 f0       	breq	.+22     	; 0x123f0 <recv(unsigned char, unsigned char*, int)+0x42>
   123da:	88 23       	and	r24, r24
   123dc:	49 f0       	breq	.+18     	; 0x123f0 <recv(unsigned char, unsigned char*, int)+0x42>
   123de:	c1 e0       	ldi	r28, 0x01	; 1
   123e0:	d0 e0       	ldi	r29, 0x00	; 0
   123e2:	8c 31       	cpi	r24, 0x1C	; 28
   123e4:	11 f4       	brne	.+4      	; 0x123ea <recv(unsigned char, unsigned char*, int)+0x3c>
   123e6:	d0 e0       	ldi	r29, 0x00	; 0
   123e8:	c0 e0       	ldi	r28, 0x00	; 0
   123ea:	d1 95       	neg	r29
   123ec:	c1 95       	neg	r28
   123ee:	d1 09       	sbc	r29, r1
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:182
  {
    w5500.recv_data_processing(s, buf, ret);
    w5500.execCmdSn(s, Sock_RECV);
  }
  return ret;
}
   123f0:	ce 01       	movw	r24, r28
   123f2:	df 91       	pop	r29
   123f4:	cf 91       	pop	r28
   123f6:	1f 91       	pop	r17
   123f8:	ff 90       	pop	r15
   123fa:	ef 90       	pop	r14
   123fc:	df 90       	pop	r13
   123fe:	cf 90       	pop	r12
   12400:	08 95       	ret
   12402:	e8 16       	cp	r14, r24
   12404:	f9 06       	cpc	r15, r25
   12406:	0c f4       	brge	.+2      	; 0x1240a <recv(unsigned char, unsigned char*, int)+0x5c>
   12408:	e7 01       	movw	r28, r14
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:176
  else if (ret > len)
  {
    ret = len;
  }

  if ( ret > 0 )
   1240a:	1c 16       	cp	r1, r28
   1240c:	1d 06       	cpc	r1, r29
   1240e:	84 f7       	brge	.-32     	; 0x123f0 <recv(unsigned char, unsigned char*, int)+0x42>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:178
  {
    w5500.recv_data_processing(s, buf, ret);
   12410:	20 e0       	ldi	r18, 0x00	; 0
   12412:	ae 01       	movw	r20, r28
   12414:	b6 01       	movw	r22, r12
   12416:	81 2f       	mov	r24, r17
   12418:	0e 94 71 91 	call	0x122e2	; 0x122e2 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.24]>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:179
    w5500.execCmdSn(s, Sock_RECV);
   1241c:	60 e4       	ldi	r22, 0x40	; 64
   1241e:	70 e0       	ldi	r23, 0x00	; 0
   12420:	81 2f       	mov	r24, r17
   12422:	0e 94 61 91 	call	0x122c2	; 0x122c2 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>
   12426:	e4 cf       	rjmp	.-56     	; 0x123f0 <recv(unsigned char, unsigned char*, int)+0x42>

00012428 <EthernetUDP::read(unsigned char*, unsigned int)>:
_ZN11EthernetUDP4readEPhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:167
  // If we get here, there's no data available
  return -1;
}

int EthernetUDP::read(unsigned char* buffer, size_t len)
{
   12428:	cf 93       	push	r28
   1242a:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:169

  if (_remaining > 0)
   1242c:	fc 01       	movw	r30, r24
   1242e:	21 8d       	ldd	r18, Z+25	; 0x19
   12430:	32 8d       	ldd	r19, Z+26	; 0x1a
   12432:	21 15       	cp	r18, r1
   12434:	31 05       	cpc	r19, r1
   12436:	29 f4       	brne	.+10     	; 0x12442 <EthernetUDP::read(unsigned char*, unsigned int)+0x1a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:195
    }

  }

  // If we get here, there's no data available or recv failed
  return -1;
   12438:	8f ef       	ldi	r24, 0xFF	; 255
   1243a:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:197

}
   1243c:	df 91       	pop	r29
   1243e:	cf 91       	pop	r28
   12440:	08 95       	ret
   12442:	ec 01       	movw	r28, r24
   12444:	84 85       	ldd	r24, Z+12	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:174
  if (_remaining > 0)
  {

    int got;

    if (_remaining <= len)
   12446:	42 17       	cp	r20, r18
   12448:	53 07       	cpc	r21, r19
   1244a:	08 f0       	brcs	.+2      	; 0x1244e <EthernetUDP::read(unsigned char*, unsigned int)+0x26>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:177
    {
      // data should fit in the buffer
      got = recv(_sock, buffer, _remaining);
   1244c:	a9 01       	movw	r20, r18
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:183
    }
    else
    {
      // too much data for the buffer, 
      // grab as much as will fit
      got = recv(_sock, buffer, len);
   1244e:	0e 94 d7 91 	call	0x123ae	; 0x123ae <recv(unsigned char, unsigned char*, int)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:186
    }

    if (got > 0)
   12452:	18 16       	cp	r1, r24
   12454:	19 06       	cpc	r1, r25
   12456:	84 f7       	brge	.-32     	; 0x12438 <EthernetUDP::read(unsigned char*, unsigned int)+0x10>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:188
    {
      _remaining -= got;
   12458:	29 8d       	ldd	r18, Y+25	; 0x19
   1245a:	3a 8d       	ldd	r19, Y+26	; 0x1a
   1245c:	28 1b       	sub	r18, r24
   1245e:	39 0b       	sbc	r19, r25
   12460:	3a 8f       	std	Y+26, r19	; 0x1a
   12462:	29 8f       	std	Y+25, r18	; 0x19
   12464:	eb cf       	rjmp	.-42     	; 0x1243c <EthernetUDP::read(unsigned char*, unsigned int)+0x14>

00012466 <EthernetUDP::read()>:
_ZN11EthernetUDP4readEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:152
  // There aren't any packets available
  return 0;
}

int EthernetUDP::read()
{
   12466:	0f 93       	push	r16
   12468:	1f 93       	push	r17
   1246a:	cf 93       	push	r28
   1246c:	df 93       	push	r29
   1246e:	1f 92       	push	r1
   12470:	cd b7       	in	r28, 0x3d	; 61
   12472:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:155
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
   12474:	fc 01       	movw	r30, r24
   12476:	21 8d       	ldd	r18, Z+25	; 0x19
   12478:	32 8d       	ldd	r19, Z+26	; 0x1a
   1247a:	23 2b       	or	r18, r19
   1247c:	41 f4       	brne	.+16     	; 0x1248e <EthernetUDP::read()+0x28>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:163
    _remaining--;
    return byte;
  }

  // If we get here, there's no data available
  return -1;
   1247e:	8f ef       	ldi	r24, 0xFF	; 255
   12480:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:164
}
   12482:	0f 90       	pop	r0
   12484:	df 91       	pop	r29
   12486:	cf 91       	pop	r28
   12488:	1f 91       	pop	r17
   1248a:	0f 91       	pop	r16
   1248c:	08 95       	ret
   1248e:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:155

int EthernetUDP::read()
{
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
   12490:	41 e0       	ldi	r20, 0x01	; 1
   12492:	50 e0       	ldi	r21, 0x00	; 0
   12494:	be 01       	movw	r22, r28
   12496:	6f 5f       	subi	r22, 0xFF	; 255
   12498:	7f 4f       	sbci	r23, 0xFF	; 255
   1249a:	fc 01       	movw	r30, r24
   1249c:	84 85       	ldd	r24, Z+12	; 0x0c
   1249e:	0e 94 d7 91 	call	0x123ae	; 0x123ae <recv(unsigned char, unsigned char*, int)>
   124a2:	18 16       	cp	r1, r24
   124a4:	19 06       	cpc	r1, r25
   124a6:	5c f7       	brge	.-42     	; 0x1247e <EthernetUDP::read()+0x18>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:158
  {
    // We read things without any problems
    _remaining--;
   124a8:	f8 01       	movw	r30, r16
   124aa:	81 8d       	ldd	r24, Z+25	; 0x19
   124ac:	92 8d       	ldd	r25, Z+26	; 0x1a
   124ae:	01 97       	sbiw	r24, 0x01	; 1
   124b0:	92 8f       	std	Z+26, r25	; 0x1a
   124b2:	81 8f       	std	Z+25, r24	; 0x19
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:159
    return byte;
   124b4:	89 81       	ldd	r24, Y+1	; 0x01
   124b6:	90 e0       	ldi	r25, 0x00	; 0
   124b8:	e4 cf       	rjmp	.-56     	; 0x12482 <EthernetUDP::read()+0x1c>

000124ba <EthernetUDP::parsePacket()>:
_ZN11EthernetUDP11parsePacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:123
  _offset += bytes_written;
  return bytes_written;
}

int EthernetUDP::parsePacket()
{
   124ba:	0f 93       	push	r16
   124bc:	1f 93       	push	r17
   124be:	cf 93       	push	r28
   124c0:	df 93       	push	r29
   124c2:	00 d0       	rcall	.+0      	; 0x124c4 <EthernetUDP::parsePacket()+0xa>
   124c4:	00 d0       	rcall	.+0      	; 0x124c6 <EthernetUDP::parsePacket()+0xc>
   124c6:	1f 92       	push	r1
   124c8:	1f 92       	push	r1
   124ca:	cd b7       	in	r28, 0x3d	; 61
   124cc:	de b7       	in	r29, 0x3e	; 62
   124ce:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:125
  // discard any remaining bytes in the last packet
  flush();
   124d0:	dc 01       	movw	r26, r24
   124d2:	ed 91       	ld	r30, X+
   124d4:	fc 91       	ld	r31, X
   124d6:	06 80       	ldd	r0, Z+6	; 0x06
   124d8:	f7 81       	ldd	r31, Z+7	; 0x07
   124da:	e0 2d       	mov	r30, r0
   124dc:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:127

  if (w5500.getRXReceivedSize(_sock) > 0)
   124de:	f8 01       	movw	r30, r16
   124e0:	84 85       	ldd	r24, Z+12	; 0x0c
   124e2:	0e 94 d9 81 	call	0x103b2	; 0x103b2 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.23]>
   124e6:	89 2b       	or	r24, r25
   124e8:	b1 f1       	breq	.+108    	; 0x12556 <EthernetUDP::parsePacket()+0x9c>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:133
  {
    //HACK - hand-parse the UDP packet using TCP recv method
    uint8_t tmpBuf[8];
    int ret =0; 
    //read 8 header bytes and get IP and port from it
    ret = recv(_sock,tmpBuf,8);
   124ea:	48 e0       	ldi	r20, 0x08	; 8
   124ec:	50 e0       	ldi	r21, 0x00	; 0
   124ee:	be 01       	movw	r22, r28
   124f0:	6f 5f       	subi	r22, 0xFF	; 255
   124f2:	7f 4f       	sbci	r23, 0xFF	; 255
   124f4:	d8 01       	movw	r26, r16
   124f6:	1c 96       	adiw	r26, 0x0c	; 12
   124f8:	8c 91       	ld	r24, X
   124fa:	0e 94 d7 91 	call	0x123ae	; 0x123ae <recv(unsigned char, unsigned char*, int)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:134
    if (ret > 0)
   124fe:	18 16       	cp	r1, r24
   12500:	19 06       	cpc	r1, r25
   12502:	f4 f4       	brge	.+60     	; 0x12540 <EthernetUDP::parsePacket()+0x86>
operator=():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:88
    return true;
}

IPAddress& IPAddress::operator=(const uint8_t *address)
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
   12504:	d8 01       	movw	r26, r16
   12506:	51 96       	adiw	r26, 0x11	; 17
   12508:	84 e0       	ldi	r24, 0x04	; 4
   1250a:	fe 01       	movw	r30, r28
   1250c:	31 96       	adiw	r30, 0x01	; 1
   1250e:	01 90       	ld	r0, Z+
   12510:	0d 92       	st	X+, r0
   12512:	8a 95       	dec	r24
   12514:	e1 f7       	brne	.-8      	; 0x1250e <EthernetUDP::parsePacket()+0x54>
_ZN11EthernetUDP11parsePacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:137
    {
      _remoteIP = tmpBuf;
      _remotePort = tmpBuf[4];
   12516:	8d 81       	ldd	r24, Y+5	; 0x05
   12518:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:138
      _remotePort = (_remotePort << 8) + tmpBuf[5];
   1251a:	98 2f       	mov	r25, r24
   1251c:	88 27       	eor	r24, r24
   1251e:	2e 81       	ldd	r18, Y+6	; 0x06
   12520:	82 0f       	add	r24, r18
   12522:	91 1d       	adc	r25, r1
   12524:	f8 01       	movw	r30, r16
   12526:	96 8b       	std	Z+22, r25	; 0x16
   12528:	85 8b       	std	Z+21, r24	; 0x15
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:139
      _remaining = tmpBuf[6];
   1252a:	8f 81       	ldd	r24, Y+7	; 0x07
   1252c:	28 2f       	mov	r18, r24
   1252e:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:140
      _remaining = (_remaining << 8) + tmpBuf[7];
   12530:	32 2f       	mov	r19, r18
   12532:	22 27       	eor	r18, r18
   12534:	88 85       	ldd	r24, Y+8	; 0x08
   12536:	82 0f       	add	r24, r18
   12538:	93 2f       	mov	r25, r19
   1253a:	91 1d       	adc	r25, r1
   1253c:	92 8f       	std	Z+26, r25	; 0x1a
   1253e:	81 8f       	std	Z+25, r24	; 0x19
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:149
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
}
   12540:	28 96       	adiw	r28, 0x08	; 8
   12542:	0f b6       	in	r0, 0x3f	; 63
   12544:	f8 94       	cli
   12546:	de bf       	out	0x3e, r29	; 62
   12548:	0f be       	out	0x3f, r0	; 63
   1254a:	cd bf       	out	0x3d, r28	; 61
   1254c:	df 91       	pop	r29
   1254e:	cf 91       	pop	r28
   12550:	1f 91       	pop	r17
   12552:	0f 91       	pop	r16
   12554:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:148
      ret = _remaining;
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
   12556:	90 e0       	ldi	r25, 0x00	; 0
   12558:	80 e0       	ldi	r24, 0x00	; 0
   1255a:	f2 cf       	rjmp	.-28     	; 0x12540 <EthernetUDP::parsePacket()+0x86>

0001255c <EthernetUDP::peek()>:
_ZN11EthernetUDP4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:200
  return -1;

}

int EthernetUDP::peek()
{
   1255c:	cf 93       	push	r28
   1255e:	df 93       	push	r29
   12560:	1f 92       	push	r1
   12562:	cd b7       	in	r28, 0x3d	; 61
   12564:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:205
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
   12566:	fc 01       	movw	r30, r24
   12568:	21 8d       	ldd	r18, Z+25	; 0x19
   1256a:	32 8d       	ldd	r19, Z+26	; 0x1a
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:206
    return -1;
   1256c:	8f ef       	ldi	r24, 0xFF	; 255
   1256e:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:205
{
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
   12570:	23 2b       	or	r18, r19
   12572:	59 f0       	breq	.+22     	; 0x1258a <EthernetUDP::peek()+0x2e>
peek():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:192
 * 		
 * @return
 */
uint16_t peek(SOCKET s, uint8_t *buf)
{
  w5500.recv_data_processing(s, buf, 1, 1);
   12574:	21 e0       	ldi	r18, 0x01	; 1
   12576:	41 e0       	ldi	r20, 0x01	; 1
   12578:	50 e0       	ldi	r21, 0x00	; 0
   1257a:	be 01       	movw	r22, r28
   1257c:	6f 5f       	subi	r22, 0xFF	; 255
   1257e:	7f 4f       	sbci	r23, 0xFF	; 255
   12580:	84 85       	ldd	r24, Z+12	; 0x0c
   12582:	0e 94 71 91 	call	0x122e2	; 0x122e2 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.24]>
_ZN11EthernetUDP4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:208
    return -1;
  ::peek(_sock, &b);
  return b;
   12586:	89 81       	ldd	r24, Y+1	; 0x01
   12588:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:209
}
   1258a:	0f 90       	pop	r0
   1258c:	df 91       	pop	r29
   1258e:	cf 91       	pop	r28
   12590:	08 95       	ret

00012592 <close(unsigned char)>:
_Z5closeh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:43

/**
 * @brief	This function close the socket and parameter is "s" which represent the socket number
 */
void close(SOCKET s)
{
   12592:	cf 93       	push	r28
   12594:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:44
  w5500.execCmdSn(s, Sock_CLOSE);
   12596:	60 e1       	ldi	r22, 0x10	; 16
   12598:	70 e0       	ldi	r23, 0x00	; 0
   1259a:	0e 94 61 91 	call	0x122c2	; 0x122c2 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
   1259e:	4f ef       	ldi	r20, 0xFF	; 255
   125a0:	62 e0       	ldi	r22, 0x02	; 2
   125a2:	70 e0       	ldi	r23, 0x00	; 0
   125a4:	8c 2f       	mov	r24, r28
_Z5closeh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:46
  w5500.writeSnIR(s, 0xFF);
}
   125a6:	cf 91       	pop	r28
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
   125a8:	0c 94 e6 90 	jmp	0x121cc	; 0x121cc <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>

000125ac <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.21]>:
_Z6sockethhjh.part.0.constprop.21():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:16

/**
 * @brief	This Socket function initialize the channel in perticular mode, and set the port and wait for w5500 done it.
 * @return 	1 for success else 0.
 */
uint8_t socket(SOCKET s, uint8_t protocol, uint16_t port, uint8_t flag)
   125ac:	0f 93       	push	r16
   125ae:	1f 93       	push	r17
   125b0:	cf 93       	push	r28
   125b2:	df 93       	push	r29
   125b4:	c8 2f       	mov	r28, r24
   125b6:	d6 2f       	mov	r29, r22
   125b8:	8a 01       	movw	r16, r20
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:20
{
  if ((protocol == SnMR::TCP) || (protocol == SnMR::UDP) || (protocol == SnMR::IPRAW) || (protocol == SnMR::MACRAW) || (protocol == SnMR::PPPOE))
  {
    close(s);
   125ba:	0e 94 c9 92 	call	0x12592	; 0x12592 <close(unsigned char)>
writeSnMR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:305
  static uint16_t read##name(SOCKET _s, uint8_t *_buff) {    \
    return readSn(_s, address, _buff, size);                 \
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
   125be:	4d 2f       	mov	r20, r29
   125c0:	70 e0       	ldi	r23, 0x00	; 0
   125c2:	60 e0       	ldi	r22, 0x00	; 0
   125c4:	8c 2f       	mov	r24, r28
   125c6:	0e 94 e6 90 	call	0x121cc	; 0x121cc <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_Z6sockethhjh.part.0.constprop.21():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:22
    w5500.writeSnMR(s, protocol | flag);
    if (port != 0) {
   125ca:	01 15       	cp	r16, r1
   125cc:	11 05       	cpc	r17, r1
   125ce:	b9 f0       	breq	.+46     	; 0x125fe <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.21]+0x52>
writeSnPORT():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:309
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
  __SOCKET_REGISTER16(SnPORT,     0x0004)        // Source Port
   125d0:	41 2f       	mov	r20, r17
   125d2:	64 e0       	ldi	r22, 0x04	; 4
   125d4:	70 e0       	ldi	r23, 0x00	; 0
   125d6:	8c 2f       	mov	r24, r28
   125d8:	0e 94 e6 90 	call	0x121cc	; 0x121cc <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   125dc:	40 2f       	mov	r20, r16
   125de:	65 e0       	ldi	r22, 0x05	; 5
   125e0:	70 e0       	ldi	r23, 0x00	; 0
   125e2:	8c 2f       	mov	r24, r28
   125e4:	0e 94 e6 90 	call	0x121cc	; 0x121cc <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_Z6sockethhjh.part.0.constprop.21():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:30
    else {
      local_port++; // if don't set the source port, set local_port number.
      w5500.writeSnPORT(s, local_port);
    }

    w5500.execCmdSn(s, Sock_OPEN);
   125e8:	61 e0       	ldi	r22, 0x01	; 1
   125ea:	70 e0       	ldi	r23, 0x00	; 0
   125ec:	8c 2f       	mov	r24, r28
   125ee:	0e 94 61 91 	call	0x122c2	; 0x122c2 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:36
    
    return 1;
  }

  return 0;
}
   125f2:	81 e0       	ldi	r24, 0x01	; 1
   125f4:	df 91       	pop	r29
   125f6:	cf 91       	pop	r28
   125f8:	1f 91       	pop	r17
   125fa:	0f 91       	pop	r16
   125fc:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:26
    w5500.writeSnMR(s, protocol | flag);
    if (port != 0) {
      w5500.writeSnPORT(s, port);
    } 
    else {
      local_port++; // if don't set the source port, set local_port number.
   125fe:	00 91 dc 10 	lds	r16, 0x10DC	; 0x8010dc <local_port>
   12602:	10 91 dd 10 	lds	r17, 0x10DD	; 0x8010dd <local_port+0x1>
   12606:	0f 5f       	subi	r16, 0xFF	; 255
   12608:	1f 4f       	sbci	r17, 0xFF	; 255
   1260a:	10 93 dd 10 	sts	0x10DD, r17	; 0x8010dd <local_port+0x1>
   1260e:	00 93 dc 10 	sts	0x10DC, r16	; 0x8010dc <local_port>
   12612:	de cf       	rjmp	.-68     	; 0x125d0 <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.21]+0x24>

00012614 <EthernetUDP::begin(unsigned int)>:
_ZN11EthernetUDP5beginEj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:43

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
   12614:	ef 92       	push	r14
   12616:	ff 92       	push	r15
   12618:	1f 93       	push	r17
   1261a:	cf 93       	push	r28
   1261c:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:44
  if (_sock != MAX_SOCK_NUM)
   1261e:	fc 01       	movw	r30, r24
   12620:	24 85       	ldd	r18, Z+12	; 0x0c
   12622:	28 30       	cpi	r18, 0x08	; 8
   12624:	39 f0       	breq	.+14     	; 0x12634 <EthernetUDP::begin(unsigned int)+0x20>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:45
    return 0;
   12626:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:63
  _port = port;
  _remaining = 0;
  socket(_sock, SnMR::UDP, _port, 0);

  return 1;
}
   12628:	df 91       	pop	r29
   1262a:	cf 91       	pop	r28
   1262c:	1f 91       	pop	r17
   1262e:	ff 90       	pop	r15
   12630:	ef 90       	pop	r14
   12632:	08 95       	ret
   12634:	7b 01       	movw	r14, r22
   12636:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:44
/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
   12638:	10 e0       	ldi	r17, 0x00	; 0
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
   1263a:	63 e0       	ldi	r22, 0x03	; 3
   1263c:	70 e0       	ldi	r23, 0x00	; 0
   1263e:	81 2f       	mov	r24, r17
   12640:	0e 94 80 2e 	call	0x5d00	; 0x5d00 <W5500Class::readSn(unsigned char, unsigned int)>
_ZN11EthernetUDP5beginEj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:49
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
   12644:	81 11       	cpse	r24, r1
   12646:	0e c0       	rjmp	.+28     	; 0x12664 <EthernetUDP::begin(unsigned int)+0x50>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:50
      _sock = i;
   12648:	1c 87       	std	Y+12, r17	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:55
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
   1264a:	8c 85       	ldd	r24, Y+12	; 0x0c
   1264c:	88 30       	cpi	r24, 0x08	; 8
   1264e:	59 f3       	breq	.-42     	; 0x12626 <EthernetUDP::begin(unsigned int)+0x12>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:58
    return 0;

  _port = port;
   12650:	fe 86       	std	Y+14, r15	; 0x0e
   12652:	ed 86       	std	Y+13, r14	; 0x0d
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:59
  _remaining = 0;
   12654:	1a 8e       	std	Y+26, r1	; 0x1a
   12656:	19 8e       	std	Y+25, r1	; 0x19
socket():
   12658:	a7 01       	movw	r20, r14
   1265a:	62 e0       	ldi	r22, 0x02	; 2
   1265c:	0e 94 d6 92 	call	0x125ac	; 0x125ac <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.21]>
_ZN11EthernetUDP5beginEj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:62
  socket(_sock, SnMR::UDP, _port, 0);

  return 1;
   12660:	81 e0       	ldi	r24, 0x01	; 1
   12662:	e2 cf       	rjmp	.-60     	; 0x12628 <EthernetUDP::begin(unsigned int)+0x14>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:49
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
   12664:	88 31       	cpi	r24, 0x18	; 24
   12666:	81 f3       	breq	.-32     	; 0x12648 <EthernetUDP::begin(unsigned int)+0x34>
   12668:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:47
/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
   1266a:	18 30       	cpi	r17, 0x08	; 8
   1266c:	31 f7       	brne	.-52     	; 0x1263a <EthernetUDP::begin(unsigned int)+0x26>
   1266e:	ed cf       	rjmp	.-38     	; 0x1264a <EthernetUDP::begin(unsigned int)+0x36>

00012670 <EthernetUDP::stop()>:
_ZN11EthernetUDP4stopEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:73
  return _remaining;
}

/* Release any resources being used by this EthernetUDP instance */
void EthernetUDP::stop()
{
   12670:	cf 93       	push	r28
   12672:	df 93       	push	r29
   12674:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:74
  if (_sock == MAX_SOCK_NUM)
   12676:	8c 85       	ldd	r24, Y+12	; 0x0c
   12678:	88 30       	cpi	r24, 0x08	; 8
   1267a:	21 f0       	breq	.+8      	; 0x12684 <EthernetUDP::stop()+0x14>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:77
    return;

  close(_sock);
   1267c:	0e 94 c9 92 	call	0x12592	; 0x12592 <close(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:80

  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
   12680:	88 e0       	ldi	r24, 0x08	; 8
   12682:	8c 87       	std	Y+12, r24	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:81
}
   12684:	df 91       	pop	r29
   12686:	cf 91       	pop	r28
   12688:	08 95       	ret

0001268a <EthernetUDP::endPacket()>:
_ZN11EthernetUDP9endPacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:106
  _offset = 0;
  return startUDP(_sock, rawIPAddress(ip), port);
}

int EthernetUDP::endPacket()
{
   1268a:	cf 93       	push	r28
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:107
  return sendUDP(_sock);
   1268c:	fc 01       	movw	r30, r24
   1268e:	c4 85       	ldd	r28, Z+12	; 0x0c
sendUDP():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:393
  }
}

int sendUDP(SOCKET s)
{
  w5500.execCmdSn(s, Sock_SEND);
   12690:	60 e2       	ldi	r22, 0x20	; 32
   12692:	70 e0       	ldi	r23, 0x00	; 0
   12694:	8c 2f       	mov	r24, r28
   12696:	0e 94 61 91 	call	0x122c2	; 0x122c2 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>
readSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
   1269a:	62 e0       	ldi	r22, 0x02	; 2
   1269c:	70 e0       	ldi	r23, 0x00	; 0
   1269e:	8c 2f       	mov	r24, r28
   126a0:	0e 94 80 2e 	call	0x5d00	; 0x5d00 <W5500Class::readSn(unsigned char, unsigned int)>
sendUDP():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:396
		
  /* +2008.01 bj */
  while ( (w5500.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
   126a4:	84 fd       	sbrc	r24, 4
   126a6:	11 c0       	rjmp	.+34     	; 0x126ca <EthernetUDP::endPacket()+0x40>
readSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
   126a8:	62 e0       	ldi	r22, 0x02	; 2
   126aa:	70 e0       	ldi	r23, 0x00	; 0
   126ac:	8c 2f       	mov	r24, r28
   126ae:	0e 94 80 2e 	call	0x5d00	; 0x5d00 <W5500Class::readSn(unsigned char, unsigned int)>
sendUDP():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:398
  {
    if (w5500.readSnIR(s) & SnIR::TIMEOUT)
   126b2:	83 ff       	sbrs	r24, 3
   126b4:	f2 cf       	rjmp	.-28     	; 0x1269a <EthernetUDP::endPacket()+0x10>
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
   126b6:	48 e1       	ldi	r20, 0x18	; 24
   126b8:	62 e0       	ldi	r22, 0x02	; 2
   126ba:	70 e0       	ldi	r23, 0x00	; 0
   126bc:	8c 2f       	mov	r24, r28
   126be:	0e 94 e6 90 	call	0x121cc	; 0x121cc <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN11EthernetUDP9endPacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:402
    {
      /* +2008.01 [bj]: clear interrupt */
      w5500.writeSnIR(s, (SnIR::SEND_OK|SnIR::TIMEOUT));
      return 0;
   126c2:	90 e0       	ldi	r25, 0x00	; 0
   126c4:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:108
}
   126c6:	cf 91       	pop	r28
   126c8:	08 95       	ret
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
   126ca:	40 e1       	ldi	r20, 0x10	; 16
   126cc:	62 e0       	ldi	r22, 0x02	; 2
   126ce:	70 e0       	ldi	r23, 0x00	; 0
   126d0:	8c 2f       	mov	r24, r28
   126d2:	0e 94 e6 90 	call	0x121cc	; 0x121cc <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN11EthernetUDP9endPacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:410

  /* +2008.01 bj */	
  w5500.writeSnIR(s, SnIR::SEND_OK);

  /* Sent ok */
  return 1;
   126d6:	81 e0       	ldi	r24, 0x01	; 1
   126d8:	90 e0       	ldi	r25, 0x00	; 0
   126da:	f5 cf       	rjmp	.-22     	; 0x126c6 <EthernetUDP::endPacket()+0x3c>

000126dc <EthernetUDP::beginPacket(IPAddress, unsigned int)>:
_ZN11EthernetUDP11beginPacketE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:100
    return ret;
  }
}

int EthernetUDP::beginPacket(IPAddress ip, uint16_t port)
{
   126dc:	1f 93       	push	r17
   126de:	cf 93       	push	r28
   126e0:	df 93       	push	r29
   126e2:	fb 01       	movw	r30, r22
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:101
  _offset = 0;
   126e4:	dc 01       	movw	r26, r24
   126e6:	58 96       	adiw	r26, 0x18	; 24
   126e8:	1c 92       	st	X, r1
   126ea:	1e 92       	st	-X, r1
   126ec:	57 97       	sbiw	r26, 0x17	; 23
startUDP():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:375
  return ret;
}

int startUDP(SOCKET s, uint8_t* addr, uint16_t port)
{
  if
   126ee:	22 81       	ldd	r18, Z+2	; 0x02
   126f0:	21 11       	cpse	r18, r1
   126f2:	09 c0       	rjmp	.+18     	; 0x12706 <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x2a>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:377
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
   126f4:	23 81       	ldd	r18, Z+3	; 0x03
   126f6:	21 11       	cpse	r18, r1
   126f8:	06 c0       	rjmp	.+12     	; 0x12706 <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x2a>
   126fa:	24 81       	ldd	r18, Z+4	; 0x04
   126fc:	21 11       	cpse	r18, r1
   126fe:	03 c0       	rjmp	.+6      	; 0x12706 <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x2a>
   12700:	25 81       	ldd	r18, Z+5	; 0x05
   12702:	22 23       	and	r18, r18
   12704:	39 f1       	breq	.+78     	; 0x12754 <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x78>
   12706:	41 15       	cp	r20, r1
   12708:	51 05       	cpc	r21, r1
   1270a:	21 f1       	breq	.+72     	; 0x12754 <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x78>
   1270c:	ea 01       	movw	r28, r20
_ZN11EthernetUDP11beginPacketE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:102
  return startUDP(_sock, rawIPAddress(ip), port);
   1270e:	dc 01       	movw	r26, r24
   12710:	1c 96       	adiw	r26, 0x0c	; 12
   12712:	1c 91       	ld	r17, X
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
   12714:	af 01       	movw	r20, r30
   12716:	4e 5f       	subi	r20, 0xFE	; 254
   12718:	5f 4f       	sbci	r21, 0xFF	; 255
writeSn():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:363
    uint8_t cntl_byte = (_s<<5)+0x08;
    return read(_addr, cntl_byte, _buf, _len );
}

uint16_t W5500Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {
    uint8_t cntl_byte = (_s<<5)+0x0C;
   1271a:	61 2f       	mov	r22, r17
   1271c:	62 95       	swap	r22
   1271e:	66 0f       	add	r22, r22
   12720:	60 7e       	andi	r22, 0xE0	; 224
   12722:	64 5f       	subi	r22, 0xF4	; 244
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:364
    return write(_addr, cntl_byte, _buf, _len);
   12724:	24 e0       	ldi	r18, 0x04	; 4
   12726:	30 e0       	ldi	r19, 0x00	; 0
   12728:	8c e0       	ldi	r24, 0x0C	; 12
   1272a:	90 e0       	ldi	r25, 0x00	; 0
   1272c:	0e 94 32 90 	call	0x12064	; 0x12064 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
writeSnDPORT():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:312
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
  __SOCKET_REGISTER16(SnPORT,     0x0004)        // Source Port
  __SOCKET_REGISTER_N(SnDHAR,     0x0006, 6)     // Destination Hardw Addr
  __SOCKET_REGISTER_N(SnDIPR,     0x000C, 4)     // Destination IP Addr
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
   12730:	4d 2f       	mov	r20, r29
   12732:	60 e1       	ldi	r22, 0x10	; 16
   12734:	70 e0       	ldi	r23, 0x00	; 0
   12736:	81 2f       	mov	r24, r17
   12738:	0e 94 e6 90 	call	0x121cc	; 0x121cc <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   1273c:	4c 2f       	mov	r20, r28
   1273e:	61 e1       	ldi	r22, 0x11	; 17
   12740:	70 e0       	ldi	r23, 0x00	; 0
   12742:	81 2f       	mov	r24, r17
   12744:	0e 94 e6 90 	call	0x121cc	; 0x121cc <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   12748:	81 e0       	ldi	r24, 0x01	; 1
   1274a:	90 e0       	ldi	r25, 0x00	; 0
_ZN11EthernetUDP11beginPacketE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:103
}
   1274c:	df 91       	pop	r29
   1274e:	cf 91       	pop	r28
   12750:	1f 91       	pop	r17
   12752:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:381
     ((port == 0x00))
    ) 
  {
    return 0;
   12754:	90 e0       	ldi	r25, 0x00	; 0
   12756:	80 e0       	ldi	r24, 0x00	; 0
   12758:	f9 cf       	rjmp	.-14     	; 0x1274c <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x70>

0001275a <EthernetClient::status()>:
_ZN14EthernetClient6statusEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:155
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
}

uint8_t EthernetClient::status() {
  if (_sock == MAX_SOCK_NUM) return SnSR::CLOSED;
   1275a:	fc 01       	movw	r30, r24
   1275c:	84 85       	ldd	r24, Z+12	; 0x0c
   1275e:	88 30       	cpi	r24, 0x08	; 8
   12760:	21 f0       	breq	.+8      	; 0x1276a <EthernetClient::status()+0x10>
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
   12762:	63 e0       	ldi	r22, 0x03	; 3
   12764:	70 e0       	ldi	r23, 0x00	; 0
   12766:	0c 94 80 2e 	jmp	0x5d00	; 0x5d00 <W5500Class::readSn(unsigned char, unsigned int)>
_ZN14EthernetClient6statusEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:157
  return w5500.readSnSR(_sock);
}
   1276a:	80 e0       	ldi	r24, 0x00	; 0
   1276c:	08 95       	ret

0001276e <localtime>:
localtime():
   1276e:	6b e2       	ldi	r22, 0x2B	; 43
   12770:	73 e1       	ldi	r23, 0x13	; 19
   12772:	0e 94 be 93 	call	0x1277c	; 0x1277c <localtime_r>
   12776:	8b e2       	ldi	r24, 0x2B	; 43
   12778:	93 e1       	ldi	r25, 0x13	; 19
   1277a:	08 95       	ret

0001277c <localtime_r>:
localtime_r():
   1277c:	cf 92       	push	r12
   1277e:	df 92       	push	r13
   12780:	ef 92       	push	r14
   12782:	ff 92       	push	r15
   12784:	0f 93       	push	r16
   12786:	1f 93       	push	r17
   12788:	cf 93       	push	r28
   1278a:	df 93       	push	r29
   1278c:	00 d0       	rcall	.+0      	; 0x1278e <localtime_r+0x12>
   1278e:	1f 92       	push	r1
   12790:	cd b7       	in	r28, 0x3d	; 61
   12792:	de b7       	in	r29, 0x3e	; 62
   12794:	6c 01       	movw	r12, r24
   12796:	7b 01       	movw	r14, r22
   12798:	e0 91 41 13 	lds	r30, 0x1341	; 0x801341 <__dst_ptr>
   1279c:	f0 91 42 13 	lds	r31, 0x1342	; 0x801342 <__dst_ptr+0x1>
   127a0:	0f ef       	ldi	r16, 0xFF	; 255
   127a2:	1f ef       	ldi	r17, 0xFF	; 255
   127a4:	30 97       	sbiw	r30, 0x00	; 0
   127a6:	21 f0       	breq	.+8      	; 0x127b0 <localtime_r+0x34>
   127a8:	67 e3       	ldi	r22, 0x37	; 55
   127aa:	73 e1       	ldi	r23, 0x13	; 19
   127ac:	19 95       	eicall
   127ae:	8c 01       	movw	r16, r24
   127b0:	f6 01       	movw	r30, r12
   127b2:	80 81       	ld	r24, Z
   127b4:	91 81       	ldd	r25, Z+1	; 0x01
   127b6:	a2 81       	ldd	r26, Z+2	; 0x02
   127b8:	b3 81       	ldd	r27, Z+3	; 0x03
   127ba:	40 91 37 13 	lds	r20, 0x1337	; 0x801337 <__utc_offset>
   127be:	50 91 38 13 	lds	r21, 0x1338	; 0x801338 <__utc_offset+0x1>
   127c2:	60 91 39 13 	lds	r22, 0x1339	; 0x801339 <__utc_offset+0x2>
   127c6:	70 91 3a 13 	lds	r23, 0x133A	; 0x80133a <__utc_offset+0x3>
   127ca:	84 0f       	add	r24, r20
   127cc:	95 1f       	adc	r25, r21
   127ce:	a6 1f       	adc	r26, r22
   127d0:	b7 1f       	adc	r27, r23
   127d2:	10 16       	cp	r1, r16
   127d4:	11 06       	cpc	r1, r17
   127d6:	cc f0       	brlt	.+50     	; 0x1280a <localtime_r+0x8e>
   127d8:	89 83       	std	Y+1, r24	; 0x01
   127da:	9a 83       	std	Y+2, r25	; 0x02
   127dc:	ab 83       	std	Y+3, r26	; 0x03
   127de:	bc 83       	std	Y+4, r27	; 0x04
   127e0:	b7 01       	movw	r22, r14
   127e2:	ce 01       	movw	r24, r28
   127e4:	01 96       	adiw	r24, 0x01	; 1
   127e6:	0e 94 0f 94 	call	0x1281e	; 0x1281e <gmtime_r>
   127ea:	f7 01       	movw	r30, r14
   127ec:	13 87       	std	Z+11, r17	; 0x0b
   127ee:	02 87       	std	Z+10, r16	; 0x0a
   127f0:	0f 90       	pop	r0
   127f2:	0f 90       	pop	r0
   127f4:	0f 90       	pop	r0
   127f6:	0f 90       	pop	r0
   127f8:	df 91       	pop	r29
   127fa:	cf 91       	pop	r28
   127fc:	1f 91       	pop	r17
   127fe:	0f 91       	pop	r16
   12800:	ff 90       	pop	r15
   12802:	ef 90       	pop	r14
   12804:	df 90       	pop	r13
   12806:	cf 90       	pop	r12
   12808:	08 95       	ret
   1280a:	a8 01       	movw	r20, r16
   1280c:	01 2e       	mov	r0, r17
   1280e:	00 0c       	add	r0, r0
   12810:	66 0b       	sbc	r22, r22
   12812:	77 0b       	sbc	r23, r23
   12814:	84 0f       	add	r24, r20
   12816:	95 1f       	adc	r25, r21
   12818:	a6 1f       	adc	r26, r22
   1281a:	b7 1f       	adc	r27, r23
   1281c:	dd cf       	rjmp	.-70     	; 0x127d8 <localtime_r+0x5c>

0001281e <gmtime_r>:
gmtime_r():
   1281e:	cf 92       	push	r12
   12820:	df 92       	push	r13
   12822:	ef 92       	push	r14
   12824:	ff 92       	push	r15
   12826:	0f 93       	push	r16
   12828:	1f 93       	push	r17
   1282a:	cf 93       	push	r28
   1282c:	df 93       	push	r29
   1282e:	00 d0       	rcall	.+0      	; 0x12830 <gmtime_r+0x12>
   12830:	00 d0       	rcall	.+0      	; 0x12832 <gmtime_r+0x14>
   12832:	1f 92       	push	r1
   12834:	1f 92       	push	r1
   12836:	cd b7       	in	r28, 0x3d	; 61
   12838:	de b7       	in	r29, 0x3e	; 62
   1283a:	8b 01       	movw	r16, r22
   1283c:	fc 01       	movw	r30, r24
   1283e:	60 81       	ld	r22, Z
   12840:	71 81       	ldd	r23, Z+1	; 0x01
   12842:	82 81       	ldd	r24, Z+2	; 0x02
   12844:	93 81       	ldd	r25, Z+3	; 0x03
   12846:	20 e8       	ldi	r18, 0x80	; 128
   12848:	31 e5       	ldi	r19, 0x51	; 81
   1284a:	41 e0       	ldi	r20, 0x01	; 1
   1284c:	50 e0       	ldi	r21, 0x00	; 0
   1284e:	0e 94 d9 ac 	call	0x159b2	; 0x159b2 <__udivmodsi4>
   12852:	69 01       	movw	r12, r18
   12854:	7a 01       	movw	r14, r20
   12856:	2c e3       	ldi	r18, 0x3C	; 60
   12858:	30 e0       	ldi	r19, 0x00	; 0
   1285a:	40 e0       	ldi	r20, 0x00	; 0
   1285c:	50 e0       	ldi	r21, 0x00	; 0
   1285e:	0e 94 fb ac 	call	0x159f6	; 0x159f6 <__divmodsi4>
   12862:	29 83       	std	Y+1, r18	; 0x01
   12864:	3a 83       	std	Y+2, r19	; 0x02
   12866:	4b 83       	std	Y+3, r20	; 0x03
   12868:	5c 83       	std	Y+4, r21	; 0x04
   1286a:	89 81       	ldd	r24, Y+1	; 0x01
   1286c:	9a 81       	ldd	r25, Y+2	; 0x02
   1286e:	ab 81       	ldd	r26, Y+3	; 0x03
   12870:	bc 81       	ldd	r27, Y+4	; 0x04
   12872:	f8 01       	movw	r30, r16
   12874:	60 83       	st	Z, r22
   12876:	6c e3       	ldi	r22, 0x3C	; 60
   12878:	70 e0       	ldi	r23, 0x00	; 0
   1287a:	0e 94 c5 ac 	call	0x1598a	; 0x1598a <__divmodhi4>
   1287e:	dc 01       	movw	r26, r24
   12880:	f8 01       	movw	r30, r16
   12882:	a1 83       	std	Z+1, r26	; 0x01
   12884:	62 83       	std	Z+2, r22	; 0x02
   12886:	c6 01       	movw	r24, r12
   12888:	06 96       	adiw	r24, 0x06	; 6
   1288a:	67 e0       	ldi	r22, 0x07	; 7
   1288c:	70 e0       	ldi	r23, 0x00	; 0
   1288e:	0e 94 b1 ac 	call	0x15962	; 0x15962 <__udivmodhi4>
   12892:	84 83       	std	Z+4, r24	; 0x04
   12894:	2d ea       	ldi	r18, 0xAD	; 173
   12896:	3e e8       	ldi	r19, 0x8E	; 142
   12898:	40 e0       	ldi	r20, 0x00	; 0
   1289a:	50 e0       	ldi	r21, 0x00	; 0
   1289c:	c7 01       	movw	r24, r14
   1289e:	b6 01       	movw	r22, r12
   128a0:	0e 94 fb ac 	call	0x159f6	; 0x159f6 <__divmodsi4>
   128a4:	29 83       	std	Y+1, r18	; 0x01
   128a6:	3a 83       	std	Y+2, r19	; 0x02
   128a8:	6d 83       	std	Y+5, r22	; 0x05
   128aa:	7e 83       	std	Y+6, r23	; 0x06
   128ac:	8f 83       	std	Y+7, r24	; 0x07
   128ae:	98 87       	std	Y+8, r25	; 0x08
   128b0:	89 81       	ldd	r24, Y+1	; 0x01
   128b2:	9a 81       	ldd	r25, Y+2	; 0x02
   128b4:	24 e6       	ldi	r18, 0x64	; 100
   128b6:	28 9f       	mul	r18, r24
   128b8:	60 01       	movw	r12, r0
   128ba:	29 9f       	mul	r18, r25
   128bc:	d0 0c       	add	r13, r0
   128be:	11 24       	eor	r1, r1
   128c0:	6d 81       	ldd	r22, Y+5	; 0x05
   128c2:	7e 81       	ldd	r23, Y+6	; 0x06
   128c4:	8f 81       	ldd	r24, Y+7	; 0x07
   128c6:	98 85       	ldd	r25, Y+8	; 0x08
   128c8:	25 eb       	ldi	r18, 0xB5	; 181
   128ca:	35 e0       	ldi	r19, 0x05	; 5
   128cc:	40 e0       	ldi	r20, 0x00	; 0
   128ce:	50 e0       	ldi	r21, 0x00	; 0
   128d0:	0e 94 fb ac 	call	0x159f6	; 0x159f6 <__divmodsi4>
   128d4:	29 83       	std	Y+1, r18	; 0x01
   128d6:	3a 83       	std	Y+2, r19	; 0x02
   128d8:	6d 83       	std	Y+5, r22	; 0x05
   128da:	7e 83       	std	Y+6, r23	; 0x06
   128dc:	e9 80       	ldd	r14, Y+1	; 0x01
   128de:	fa 80       	ldd	r15, Y+2	; 0x02
   128e0:	ee 0c       	add	r14, r14
   128e2:	ff 1c       	adc	r15, r15
   128e4:	ee 0c       	add	r14, r14
   128e6:	ff 1c       	adc	r15, r15
   128e8:	ec 0c       	add	r14, r12
   128ea:	fd 1c       	adc	r15, r13
   128ec:	8d 81       	ldd	r24, Y+5	; 0x05
   128ee:	9e 81       	ldd	r25, Y+6	; 0x06
   128f0:	f5 e6       	ldi	r31, 0x65	; 101
   128f2:	ef 16       	cp	r14, r31
   128f4:	f1 04       	cpc	r15, r1
   128f6:	08 f4       	brcc	.+2      	; 0x128fa <gmtime_r+0xdc>
   128f8:	3f c0       	rjmp	.+126    	; 0x12978 <gmtime_r+0x15a>
   128fa:	01 96       	adiw	r24, 0x01	; 1
   128fc:	21 e0       	ldi	r18, 0x01	; 1
   128fe:	30 e0       	ldi	r19, 0x00	; 0
   12900:	a9 01       	movw	r20, r18
   12902:	44 59       	subi	r20, 0x94	; 148
   12904:	5e 4f       	sbci	r21, 0xFE	; 254
   12906:	48 17       	cp	r20, r24
   12908:	59 07       	cpc	r21, r25
   1290a:	60 f4       	brcc	.+24     	; 0x12924 <gmtime_r+0x106>
   1290c:	6d e6       	ldi	r22, 0x6D	; 109
   1290e:	71 e0       	ldi	r23, 0x01	; 1
   12910:	82 1b       	sub	r24, r18
   12912:	93 0b       	sbc	r25, r19
   12914:	0e 94 c5 ac 	call	0x1598a	; 0x1598a <__divmodhi4>
   12918:	dc 01       	movw	r26, r24
   1291a:	e6 0e       	add	r14, r22
   1291c:	f7 1e       	adc	r15, r23
   1291e:	cd 01       	movw	r24, r26
   12920:	30 e0       	ldi	r19, 0x00	; 0
   12922:	20 e0       	ldi	r18, 0x00	; 0
   12924:	44 e6       	ldi	r20, 0x64	; 100
   12926:	e4 0e       	add	r14, r20
   12928:	f1 1c       	adc	r15, r1
   1292a:	f8 01       	movw	r30, r16
   1292c:	f7 82       	std	Z+7, r15	; 0x07
   1292e:	e6 82       	std	Z+6, r14	; 0x06
   12930:	91 87       	std	Z+9, r25	; 0x09
   12932:	80 87       	std	Z+8, r24	; 0x08
   12934:	25 5c       	subi	r18, 0xC5	; 197
   12936:	3f 4f       	sbci	r19, 0xFF	; 255
   12938:	82 17       	cp	r24, r18
   1293a:	93 07       	cpc	r25, r19
   1293c:	38 f5       	brcc	.+78     	; 0x1298c <gmtime_r+0x16e>
   1293e:	6f e1       	ldi	r22, 0x1F	; 31
   12940:	70 e0       	ldi	r23, 0x00	; 0
   12942:	0e 94 c5 ac 	call	0x1598a	; 0x1598a <__divmodhi4>
   12946:	dc 01       	movw	r26, r24
   12948:	f8 01       	movw	r30, r16
   1294a:	65 83       	std	Z+5, r22	; 0x05
   1294c:	a3 83       	std	Z+3, r26	; 0x03
   1294e:	f8 01       	movw	r30, r16
   12950:	13 86       	std	Z+11, r1	; 0x0b
   12952:	12 86       	std	Z+10, r1	; 0x0a
   12954:	83 81       	ldd	r24, Z+3	; 0x03
   12956:	8f 5f       	subi	r24, 0xFF	; 255
   12958:	83 83       	std	Z+3, r24	; 0x03
   1295a:	28 96       	adiw	r28, 0x08	; 8
   1295c:	0f b6       	in	r0, 0x3f	; 63
   1295e:	f8 94       	cli
   12960:	de bf       	out	0x3e, r29	; 62
   12962:	0f be       	out	0x3f, r0	; 63
   12964:	cd bf       	out	0x3d, r28	; 61
   12966:	df 91       	pop	r29
   12968:	cf 91       	pop	r28
   1296a:	1f 91       	pop	r17
   1296c:	0f 91       	pop	r16
   1296e:	ff 90       	pop	r15
   12970:	ef 90       	pop	r14
   12972:	df 90       	pop	r13
   12974:	cf 90       	pop	r12
   12976:	08 95       	ret
   12978:	51 e0       	ldi	r21, 0x01	; 1
   1297a:	40 e0       	ldi	r20, 0x00	; 0
   1297c:	24 e6       	ldi	r18, 0x64	; 100
   1297e:	e2 16       	cp	r14, r18
   12980:	f1 04       	cpc	r15, r1
   12982:	09 f4       	brne	.+2      	; 0x12986 <gmtime_r+0x168>
   12984:	50 e0       	ldi	r21, 0x00	; 0
   12986:	25 2f       	mov	r18, r21
   12988:	34 2f       	mov	r19, r20
   1298a:	ba cf       	rjmp	.-140    	; 0x12900 <gmtime_r+0xe2>
   1298c:	69 e9       	ldi	r22, 0x99	; 153
   1298e:	70 e0       	ldi	r23, 0x00	; 0
   12990:	82 1b       	sub	r24, r18
   12992:	93 0b       	sbc	r25, r19
   12994:	0e 94 c5 ac 	call	0x1598a	; 0x1598a <__divmodhi4>
   12998:	dc 01       	movw	r26, r24
   1299a:	26 2f       	mov	r18, r22
   1299c:	22 0f       	add	r18, r18
   1299e:	22 0f       	add	r18, r18
   129a0:	f2 2e       	mov	r15, r18
   129a2:	f6 0e       	add	r15, r22
   129a4:	6d e3       	ldi	r22, 0x3D	; 61
   129a6:	70 e0       	ldi	r23, 0x00	; 0
   129a8:	cd 01       	movw	r24, r26
   129aa:	0e 94 c5 ac 	call	0x1598a	; 0x1598a <__divmodhi4>
   129ae:	dc 01       	movw	r26, r24
   129b0:	e6 2e       	mov	r14, r22
   129b2:	ee 0c       	add	r14, r14
   129b4:	6f e1       	ldi	r22, 0x1F	; 31
   129b6:	70 e0       	ldi	r23, 0x00	; 0
   129b8:	cd 01       	movw	r24, r26
   129ba:	0e 94 c5 ac 	call	0x1598a	; 0x1598a <__divmodhi4>
   129be:	dc 01       	movw	r26, r24
   129c0:	22 e0       	ldi	r18, 0x02	; 2
   129c2:	26 0f       	add	r18, r22
   129c4:	2f 0d       	add	r18, r15
   129c6:	2e 0d       	add	r18, r14
   129c8:	f8 01       	movw	r30, r16
   129ca:	25 83       	std	Z+5, r18	; 0x05
   129cc:	bf cf       	rjmp	.-130    	; 0x1294c <gmtime_r+0x12e>

000129ce <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>:
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:92
  JsonObjectData *asObject() {
    return type == JSON_OBJECT ? &content.asObject : 0;
  }

  template <typename T>
  T asInteger() const {
   129ce:	fc 01       	movw	r30, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
    switch (type) {
   129d0:	80 81       	ld	r24, Z
   129d2:	91 81       	ldd	r25, Z+1	; 0x01
   129d4:	87 30       	cpi	r24, 0x07	; 7
   129d6:	91 05       	cpc	r25, r1
   129d8:	38 f4       	brcc	.+14     	; 0x129e8 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x1a>
   129da:	85 30       	cpi	r24, 0x05	; 5
   129dc:	91 05       	cpc	r25, r1
   129de:	88 f4       	brcc	.+34     	; 0x12a02 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x34>
   129e0:	03 97       	sbiw	r24, 0x03	; 3
   129e2:	a0 f4       	brcc	.+40     	; 0x12a0c <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x3e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
   129e4:	80 e0       	ldi	r24, 0x00	; 0
   129e6:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
   129e8:	87 30       	cpi	r24, 0x07	; 7
   129ea:	91 05       	cpc	r25, r1
   129ec:	61 f0       	breq	.+24     	; 0x12a06 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x38>
   129ee:	0a 97       	sbiw	r24, 0x0a	; 10
   129f0:	c9 f7       	brne	.-14     	; 0x129e4 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x16>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:103
        return T(~content.asInteger + 1);
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
      case JSON_FLOAT:
        return T(content.asFloat);
   129f2:	62 81       	ldd	r22, Z+2	; 0x02
   129f4:	73 81       	ldd	r23, Z+3	; 0x03
   129f6:	84 81       	ldd	r24, Z+4	; 0x04
   129f8:	95 81       	ldd	r25, Z+5	; 0x05
   129fa:	0e 94 1a ae 	call	0x15c34	; 0x15c34 <__fixunssfsi>
   129fe:	86 2f       	mov	r24, r22
   12a00:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:96
  template <typename T>
  T asInteger() const {
    switch (type) {
      case JSON_POSITIVE_INTEGER:
      case JSON_BOOLEAN:
        return T(content.asInteger);
   12a02:	82 81       	ldd	r24, Z+2	; 0x02
   12a04:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:98
      case JSON_NEGATIVE_INTEGER:
        return T(~content.asInteger + 1);
   12a06:	82 81       	ldd	r24, Z+2	; 0x02
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
   12a08:	81 95       	neg	r24
   12a0a:	08 95       	ret
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:101
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
   12a0c:	02 80       	ldd	r0, Z+2	; 0x02
   12a0e:	f3 81       	ldd	r31, Z+3	; 0x03
   12a10:	e0 2d       	mov	r30, r0
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
   12a12:	30 97       	sbiw	r30, 0x00	; 0
   12a14:	39 f3       	breq	.-50     	; 0x129e4 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x16>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18

  if (*s == 't') return 1;  // "true"
   12a16:	80 81       	ld	r24, Z
   12a18:	84 37       	cpi	r24, 0x74	; 116
   12a1a:	c9 f0       	breq	.+50     	; 0x12a4e <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x80>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  T result = 0;
  bool negative_result = false;

  switch (*s) {
   12a1c:	8b 32       	cpi	r24, 0x2B	; 43
   12a1e:	89 f0       	breq	.+34     	; 0x12a42 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x74>
   12a20:	8d 32       	cpi	r24, 0x2D	; 45
   12a22:	81 f4       	brne	.+32     	; 0x12a44 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x76>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:26
    case '-':
      negative_result = true;
      s++;
   12a24:	31 96       	adiw	r30, 0x01	; 1
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:25
  T result = 0;
  bool negative_result = false;

  switch (*s) {
    case '-':
      negative_result = true;
   12a26:	91 e0       	ldi	r25, 0x01	; 1
parseInteger():
   12a28:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
      s++;
      break;
  }

  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
   12a2a:	2a e0       	ldi	r18, 0x0A	; 10
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
   12a2c:	61 91       	ld	r22, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
   12a2e:	30 ed       	ldi	r19, 0xD0	; 208
   12a30:	36 0f       	add	r19, r22
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
   12a32:	3a 30       	cpi	r19, 0x0A	; 10
   12a34:	48 f4       	brcc	.+18     	; 0x12a48 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x7a>
   12a36:	82 9f       	mul	r24, r18
   12a38:	60 0d       	add	r22, r0
   12a3a:	11 24       	eor	r1, r1
   12a3c:	86 2f       	mov	r24, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
    result = T(result * 10 + T(*s - '0'));
   12a3e:	80 53       	subi	r24, 0x30	; 48
   12a40:	f5 cf       	rjmp	.-22     	; 0x12a2c <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x5e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
   12a42:	31 96       	adiw	r30, 0x01	; 1
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
   12a44:	90 e0       	ldi	r25, 0x00	; 0
   12a46:	f0 cf       	rjmp	.-32     	; 0x12a28 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x5a>
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
   12a48:	91 11       	cpse	r25, r1
   12a4a:	de cf       	rjmp	.-68     	; 0x12a08 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x3a>
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:107
      case JSON_FLOAT:
        return T(content.asFloat);
      default:
        return 0;
    }
  }
   12a4c:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"
   12a4e:	81 e0       	ldi	r24, 0x01	; 1
   12a50:	fd cf       	rjmp	.-6      	; 0x12a4c <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x7e>

00012a52 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7003>:
_GLOBAL__I_65535_0_room_control_v3.ino.cpp.o.7003():
   12a52:	0f 93       	push	r16
   12a54:	1f 93       	push	r17
   12a56:	cf 93       	push	r28
   12a58:	df 93       	push	r29
   12a5a:	10 92 70 0b 	sts	0x0B70, r1	; 0x800b70 <Serial+0x3>
   12a5e:	10 92 6f 0b 	sts	0x0B6F, r1	; 0x800b6f <Serial+0x2>
   12a62:	88 ee       	ldi	r24, 0xE8	; 232
   12a64:	93 e0       	ldi	r25, 0x03	; 3
   12a66:	a0 e0       	ldi	r26, 0x00	; 0
   12a68:	b0 e0       	ldi	r27, 0x00	; 0
   12a6a:	80 93 71 0b 	sts	0x0B71, r24	; 0x800b71 <Serial+0x4>
   12a6e:	90 93 72 0b 	sts	0x0B72, r25	; 0x800b72 <Serial+0x5>
   12a72:	a0 93 73 0b 	sts	0x0B73, r26	; 0x800b73 <Serial+0x6>
   12a76:	b0 93 74 0b 	sts	0x0B74, r27	; 0x800b74 <Serial+0x7>
   12a7a:	2a e5       	ldi	r18, 0x5A	; 90
   12a7c:	32 e0       	ldi	r19, 0x02	; 2
   12a7e:	30 93 6e 0b 	sts	0x0B6E, r19	; 0x800b6e <Serial+0x1>
   12a82:	20 93 6d 0b 	sts	0x0B6D, r18	; 0x800b6d <Serial>
   12a86:	25 ec       	ldi	r18, 0xC5	; 197
   12a88:	30 e0       	ldi	r19, 0x00	; 0
   12a8a:	30 93 7a 0b 	sts	0x0B7A, r19	; 0x800b7a <Serial+0xd>
   12a8e:	20 93 79 0b 	sts	0x0B79, r18	; 0x800b79 <Serial+0xc>
   12a92:	24 ec       	ldi	r18, 0xC4	; 196
   12a94:	30 e0       	ldi	r19, 0x00	; 0
   12a96:	30 93 7c 0b 	sts	0x0B7C, r19	; 0x800b7c <Serial+0xf>
   12a9a:	20 93 7b 0b 	sts	0x0B7B, r18	; 0x800b7b <Serial+0xe>
   12a9e:	20 ec       	ldi	r18, 0xC0	; 192
   12aa0:	30 e0       	ldi	r19, 0x00	; 0
   12aa2:	30 93 7e 0b 	sts	0x0B7E, r19	; 0x800b7e <Serial+0x11>
   12aa6:	20 93 7d 0b 	sts	0x0B7D, r18	; 0x800b7d <Serial+0x10>
   12aaa:	21 ec       	ldi	r18, 0xC1	; 193
   12aac:	30 e0       	ldi	r19, 0x00	; 0
   12aae:	30 93 80 0b 	sts	0x0B80, r19	; 0x800b80 <Serial+0x13>
   12ab2:	20 93 7f 0b 	sts	0x0B7F, r18	; 0x800b7f <Serial+0x12>
   12ab6:	22 ec       	ldi	r18, 0xC2	; 194
   12ab8:	30 e0       	ldi	r19, 0x00	; 0
   12aba:	30 93 82 0b 	sts	0x0B82, r19	; 0x800b82 <Serial+0x15>
   12abe:	20 93 81 0b 	sts	0x0B81, r18	; 0x800b81 <Serial+0x14>
   12ac2:	26 ec       	ldi	r18, 0xC6	; 198
   12ac4:	30 e0       	ldi	r19, 0x00	; 0
   12ac6:	30 93 84 0b 	sts	0x0B84, r19	; 0x800b84 <Serial+0x17>
   12aca:	20 93 83 0b 	sts	0x0B83, r18	; 0x800b83 <Serial+0x16>
   12ace:	10 92 86 0b 	sts	0x0B86, r1	; 0x800b86 <Serial+0x19>
   12ad2:	10 92 87 0b 	sts	0x0B87, r1	; 0x800b87 <Serial+0x1a>
   12ad6:	10 92 88 0b 	sts	0x0B88, r1	; 0x800b88 <Serial+0x1b>
   12ada:	10 92 89 0b 	sts	0x0B89, r1	; 0x800b89 <Serial+0x1c>
   12ade:	c2 ee       	ldi	r28, 0xE2	; 226
   12ae0:	d2 e0       	ldi	r29, 0x02	; 2
   12ae2:	d0 93 31 11 	sts	0x1131, r29	; 0x801131 <_ZL11INADDR_NONE.lto_priv.202+0x1>
   12ae6:	c0 93 30 11 	sts	0x1130, r28	; 0x801130 <_ZL11INADDR_NONE.lto_priv.202>
   12aea:	10 92 32 11 	sts	0x1132, r1	; 0x801132 <_ZL11INADDR_NONE.lto_priv.202+0x2>
   12aee:	10 92 33 11 	sts	0x1133, r1	; 0x801133 <_ZL11INADDR_NONE.lto_priv.202+0x3>
   12af2:	10 92 34 11 	sts	0x1134, r1	; 0x801134 <_ZL11INADDR_NONE.lto_priv.202+0x4>
   12af6:	10 92 35 11 	sts	0x1135, r1	; 0x801135 <_ZL11INADDR_NONE.lto_priv.202+0x5>
   12afa:	10 92 fc 0d 	sts	0x0DFC, r1	; 0x800dfc <Wire+0x3>
   12afe:	10 92 fb 0d 	sts	0x0DFB, r1	; 0x800dfb <Wire+0x2>
   12b02:	80 93 fd 0d 	sts	0x0DFD, r24	; 0x800dfd <Wire+0x4>
   12b06:	90 93 fe 0d 	sts	0x0DFE, r25	; 0x800dfe <Wire+0x5>
   12b0a:	a0 93 ff 0d 	sts	0x0DFF, r26	; 0x800dff <Wire+0x6>
   12b0e:	b0 93 00 0e 	sts	0x0E00, r27	; 0x800e00 <Wire+0x7>
   12b12:	8c e6       	ldi	r24, 0x6C	; 108
   12b14:	92 e0       	ldi	r25, 0x02	; 2
   12b16:	90 93 fa 0d 	sts	0x0DFA, r25	; 0x800dfa <Wire+0x1>
   12b1a:	80 93 f9 0d 	sts	0x0DF9, r24	; 0x800df9 <Wire>
   12b1e:	d0 93 37 11 	sts	0x1137, r29	; 0x801137 <_ZL11INADDR_NONE.lto_priv.201+0x1>
   12b22:	c0 93 36 11 	sts	0x1136, r28	; 0x801136 <_ZL11INADDR_NONE.lto_priv.201>
   12b26:	10 92 38 11 	sts	0x1138, r1	; 0x801138 <_ZL11INADDR_NONE.lto_priv.201+0x2>
   12b2a:	10 92 39 11 	sts	0x1139, r1	; 0x801139 <_ZL11INADDR_NONE.lto_priv.201+0x3>
   12b2e:	10 92 3a 11 	sts	0x113A, r1	; 0x80113a <_ZL11INADDR_NONE.lto_priv.201+0x4>
   12b32:	10 92 3b 11 	sts	0x113B, r1	; 0x80113b <_ZL11INADDR_NONE.lto_priv.201+0x5>
   12b36:	80 e5       	ldi	r24, 0x50	; 80
   12b38:	80 93 3c 11 	sts	0x113C, r24	; 0x80113c <wiznet_SPI_settings>
   12b3c:	81 e0       	ldi	r24, 0x01	; 1
   12b3e:	80 93 3d 11 	sts	0x113D, r24	; 0x80113d <wiznet_SPI_settings+0x1>
   12b42:	d0 93 3f 11 	sts	0x113F, r29	; 0x80113f <_ZL11INADDR_NONE.lto_priv.200+0x1>
   12b46:	c0 93 3e 11 	sts	0x113E, r28	; 0x80113e <_ZL11INADDR_NONE.lto_priv.200>
   12b4a:	10 92 40 11 	sts	0x1140, r1	; 0x801140 <_ZL11INADDR_NONE.lto_priv.200+0x2>
   12b4e:	10 92 41 11 	sts	0x1141, r1	; 0x801141 <_ZL11INADDR_NONE.lto_priv.200+0x3>
   12b52:	10 92 42 11 	sts	0x1142, r1	; 0x801142 <_ZL11INADDR_NONE.lto_priv.200+0x4>
   12b56:	10 92 43 11 	sts	0x1143, r1	; 0x801143 <_ZL11INADDR_NONE.lto_priv.200+0x5>
   12b5a:	d0 93 45 11 	sts	0x1145, r29	; 0x801145 <_ZL11INADDR_NONE.lto_priv.199+0x1>
   12b5e:	c0 93 44 11 	sts	0x1144, r28	; 0x801144 <_ZL11INADDR_NONE.lto_priv.199>
   12b62:	10 92 46 11 	sts	0x1146, r1	; 0x801146 <_ZL11INADDR_NONE.lto_priv.199+0x2>
   12b66:	10 92 47 11 	sts	0x1147, r1	; 0x801147 <_ZL11INADDR_NONE.lto_priv.199+0x3>
   12b6a:	10 92 48 11 	sts	0x1148, r1	; 0x801148 <_ZL11INADDR_NONE.lto_priv.199+0x4>
   12b6e:	10 92 49 11 	sts	0x1149, r1	; 0x801149 <_ZL11INADDR_NONE.lto_priv.199+0x5>
   12b72:	d0 93 4b 11 	sts	0x114B, r29	; 0x80114b <_ZL11INADDR_NONE.lto_priv.198+0x1>
   12b76:	c0 93 4a 11 	sts	0x114A, r28	; 0x80114a <_ZL11INADDR_NONE.lto_priv.198>
   12b7a:	10 92 4c 11 	sts	0x114C, r1	; 0x80114c <_ZL11INADDR_NONE.lto_priv.198+0x2>
   12b7e:	10 92 4d 11 	sts	0x114D, r1	; 0x80114d <_ZL11INADDR_NONE.lto_priv.198+0x3>
   12b82:	10 92 4e 11 	sts	0x114E, r1	; 0x80114e <_ZL11INADDR_NONE.lto_priv.198+0x4>
   12b86:	10 92 4f 11 	sts	0x114F, r1	; 0x80114f <_ZL11INADDR_NONE.lto_priv.198+0x5>
   12b8a:	d0 93 51 11 	sts	0x1151, r29	; 0x801151 <_ZL11INADDR_NONE.lto_priv.197+0x1>
   12b8e:	c0 93 50 11 	sts	0x1150, r28	; 0x801150 <_ZL11INADDR_NONE.lto_priv.197>
   12b92:	10 92 52 11 	sts	0x1152, r1	; 0x801152 <_ZL11INADDR_NONE.lto_priv.197+0x2>
   12b96:	10 92 53 11 	sts	0x1153, r1	; 0x801153 <_ZL11INADDR_NONE.lto_priv.197+0x3>
   12b9a:	10 92 54 11 	sts	0x1154, r1	; 0x801154 <_ZL11INADDR_NONE.lto_priv.197+0x4>
   12b9e:	10 92 55 11 	sts	0x1155, r1	; 0x801155 <_ZL11INADDR_NONE.lto_priv.197+0x5>
   12ba2:	d0 93 57 11 	sts	0x1157, r29	; 0x801157 <_ZL11INADDR_NONE.lto_priv.196+0x1>
   12ba6:	c0 93 56 11 	sts	0x1156, r28	; 0x801156 <_ZL11INADDR_NONE.lto_priv.196>
   12baa:	10 92 58 11 	sts	0x1158, r1	; 0x801158 <_ZL11INADDR_NONE.lto_priv.196+0x2>
   12bae:	10 92 59 11 	sts	0x1159, r1	; 0x801159 <_ZL11INADDR_NONE.lto_priv.196+0x3>
   12bb2:	10 92 5a 11 	sts	0x115A, r1	; 0x80115a <_ZL11INADDR_NONE.lto_priv.196+0x4>
   12bb6:	10 92 5b 11 	sts	0x115B, r1	; 0x80115b <_ZL11INADDR_NONE.lto_priv.196+0x5>
   12bba:	d0 93 0b 0c 	sts	0x0C0B, r29	; 0x800c0b <Ethernet+0x1>
   12bbe:	c0 93 0a 0c 	sts	0x0C0A, r28	; 0x800c0a <Ethernet>
   12bc2:	10 92 0c 0c 	sts	0x0C0C, r1	; 0x800c0c <Ethernet+0x2>
   12bc6:	10 92 0d 0c 	sts	0x0C0D, r1	; 0x800c0d <Ethernet+0x3>
   12bca:	10 92 0e 0c 	sts	0x0C0E, r1	; 0x800c0e <Ethernet+0x4>
   12bce:	10 92 0f 0c 	sts	0x0C0F, r1	; 0x800c0f <Ethernet+0x5>
   12bd2:	10 92 15 0c 	sts	0x0C15, r1	; 0x800c15 <Ethernet+0xb>
   12bd6:	10 92 14 0c 	sts	0x0C14, r1	; 0x800c14 <Ethernet+0xa>
   12bda:	8a e0       	ldi	r24, 0x0A	; 10
   12bdc:	80 93 16 0c 	sts	0x0C16, r24	; 0x800c16 <Ethernet+0xc>
   12be0:	d0 93 18 0c 	sts	0x0C18, r29	; 0x800c18 <_ZL11INADDR_NONE.lto_priv.195+0x1>
   12be4:	c0 93 17 0c 	sts	0x0C17, r28	; 0x800c17 <_ZL11INADDR_NONE.lto_priv.195>
   12be8:	10 92 19 0c 	sts	0x0C19, r1	; 0x800c19 <_ZL11INADDR_NONE.lto_priv.195+0x2>
   12bec:	10 92 1a 0c 	sts	0x0C1A, r1	; 0x800c1a <_ZL11INADDR_NONE.lto_priv.195+0x3>
   12bf0:	10 92 1b 0c 	sts	0x0C1B, r1	; 0x800c1b <_ZL11INADDR_NONE.lto_priv.195+0x4>
   12bf4:	10 92 1c 0c 	sts	0x0C1C, r1	; 0x800c1c <_ZL11INADDR_NONE.lto_priv.195+0x5>
   12bf8:	d0 93 5d 11 	sts	0x115D, r29	; 0x80115d <_ZL11INADDR_NONE.lto_priv.194+0x1>
   12bfc:	c0 93 5c 11 	sts	0x115C, r28	; 0x80115c <_ZL11INADDR_NONE.lto_priv.194>
   12c00:	10 92 5e 11 	sts	0x115E, r1	; 0x80115e <_ZL11INADDR_NONE.lto_priv.194+0x2>
   12c04:	10 92 5f 11 	sts	0x115F, r1	; 0x80115f <_ZL11INADDR_NONE.lto_priv.194+0x3>
   12c08:	10 92 60 11 	sts	0x1160, r1	; 0x801160 <_ZL11INADDR_NONE.lto_priv.194+0x4>
   12c0c:	10 92 61 11 	sts	0x1161, r1	; 0x801161 <_ZL11INADDR_NONE.lto_priv.194+0x5>
   12c10:	8a e0       	ldi	r24, 0x0A	; 10
   12c12:	90 e0       	ldi	r25, 0x00	; 0
   12c14:	0e 94 36 a7 	call	0x14e6c	; 0x14e6c <malloc>
   12c18:	90 93 1e 0c 	sts	0x0C1E, r25	; 0x800c1e <array_pids+0x1>
   12c1c:	80 93 1d 0c 	sts	0x0C1D, r24	; 0x800c1d <array_pids>
   12c20:	d0 93 63 11 	sts	0x1163, r29	; 0x801163 <_ZL11INADDR_NONE.lto_priv.193+0x1>
   12c24:	c0 93 62 11 	sts	0x1162, r28	; 0x801162 <_ZL11INADDR_NONE.lto_priv.193>
   12c28:	10 92 64 11 	sts	0x1164, r1	; 0x801164 <_ZL11INADDR_NONE.lto_priv.193+0x2>
   12c2c:	10 92 65 11 	sts	0x1165, r1	; 0x801165 <_ZL11INADDR_NONE.lto_priv.193+0x3>
   12c30:	10 92 66 11 	sts	0x1166, r1	; 0x801166 <_ZL11INADDR_NONE.lto_priv.193+0x4>
   12c34:	10 92 67 11 	sts	0x1167, r1	; 0x801167 <_ZL11INADDR_NONE.lto_priv.193+0x5>
   12c38:	d0 93 69 11 	sts	0x1169, r29	; 0x801169 <_ZL11INADDR_NONE.lto_priv.192+0x1>
   12c3c:	c0 93 68 11 	sts	0x1168, r28	; 0x801168 <_ZL11INADDR_NONE.lto_priv.192>
   12c40:	10 92 6a 11 	sts	0x116A, r1	; 0x80116a <_ZL11INADDR_NONE.lto_priv.192+0x2>
   12c44:	10 92 6b 11 	sts	0x116B, r1	; 0x80116b <_ZL11INADDR_NONE.lto_priv.192+0x3>
   12c48:	10 92 6c 11 	sts	0x116C, r1	; 0x80116c <_ZL11INADDR_NONE.lto_priv.192+0x4>
   12c4c:	10 92 6d 11 	sts	0x116D, r1	; 0x80116d <_ZL11INADDR_NONE.lto_priv.192+0x5>
   12c50:	8b e5       	ldi	r24, 0x5B	; 91
   12c52:	97 e0       	ldi	r25, 0x07	; 7
   12c54:	90 93 44 0c 	sts	0x0C44, r25	; 0x800c44 <device+0x25>
   12c58:	80 93 43 0c 	sts	0x0C43, r24	; 0x800c43 <device+0x24>
   12c5c:	d0 93 1e 13 	sts	0x131E, r29	; 0x80131e <_ZL11INADDR_NONE.lto_priv.191+0x1>
   12c60:	c0 93 1d 13 	sts	0x131D, r28	; 0x80131d <_ZL11INADDR_NONE.lto_priv.191>
   12c64:	10 92 1f 13 	sts	0x131F, r1	; 0x80131f <_ZL11INADDR_NONE.lto_priv.191+0x2>
   12c68:	10 92 20 13 	sts	0x1320, r1	; 0x801320 <_ZL11INADDR_NONE.lto_priv.191+0x3>
   12c6c:	10 92 21 13 	sts	0x1321, r1	; 0x801321 <_ZL11INADDR_NONE.lto_priv.191+0x4>
   12c70:	10 92 22 13 	sts	0x1322, r1	; 0x801322 <_ZL11INADDR_NONE.lto_priv.191+0x5>
   12c74:	88 e1       	ldi	r24, 0x18	; 24
   12c76:	80 93 55 10 	sts	0x1055, r24	; 0x801055 <swSPI+0x4>
   12c7a:	8a e1       	ldi	r24, 0x1A	; 26
   12c7c:	80 93 54 10 	sts	0x1054, r24	; 0x801054 <swSPI+0x3>
   12c80:	89 e1       	ldi	r24, 0x19	; 25
   12c82:	80 93 56 10 	sts	0x1056, r24	; 0x801056 <swSPI+0x5>
   12c86:	82 e0       	ldi	r24, 0x02	; 2
   12c88:	80 93 53 10 	sts	0x1053, r24	; 0x801053 <swSPI+0x2>
   12c8c:	10 92 51 10 	sts	0x1051, r1	; 0x801051 <swSPI>
   12c90:	10 92 52 10 	sts	0x1052, r1	; 0x801052 <swSPI+0x1>
   12c94:	10 92 57 10 	sts	0x1057, r1	; 0x801057 <swSPI+0x6>
   12c98:	60 e0       	ldi	r22, 0x00	; 0
   12c9a:	89 e1       	ldi	r24, 0x19	; 25
   12c9c:	0e 94 5c 82 	call	0x104b8	; 0x104b8 <digitalWrite>
   12ca0:	80 e1       	ldi	r24, 0x10	; 16
   12ca2:	80 93 4f 10 	sts	0x104F, r24	; 0x80104f <now+0x5>
   12ca6:	8c e1       	ldi	r24, 0x1C	; 28
   12ca8:	80 93 4e 10 	sts	0x104E, r24	; 0x80104e <now+0x4>
   12cac:	86 e0       	ldi	r24, 0x06	; 6
   12cae:	80 93 4d 10 	sts	0x104D, r24	; 0x80104d <now+0x3>
   12cb2:	40 e0       	ldi	r20, 0x00	; 0
   12cb4:	81 e6       	ldi	r24, 0x61	; 97
   12cb6:	97 e9       	ldi	r25, 0x97	; 151
   12cb8:	e3 e9       	ldi	r30, 0x93	; 147
   12cba:	fe ef       	ldi	r31, 0xFE	; 254
   12cbc:	54 2f       	mov	r21, r20
   12cbe:	53 70       	andi	r21, 0x03	; 3
   12cc0:	21 e0       	ldi	r18, 0x01	; 1
   12cc2:	09 f0       	breq	.+2      	; 0x12cc6 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7003+0x274>
   12cc4:	20 e0       	ldi	r18, 0x00	; 0
   12cc6:	61 e0       	ldi	r22, 0x01	; 1
   12cc8:	64 0f       	add	r22, r20
   12cca:	30 e0       	ldi	r19, 0x00	; 0
   12ccc:	d9 01       	movw	r26, r18
   12cce:	a3 59       	subi	r26, 0x93	; 147
   12cd0:	be 4f       	sbci	r27, 0xFE	; 254
   12cd2:	8a 17       	cp	r24, r26
   12cd4:	9b 07       	cpc	r25, r27
   12cd6:	38 f0       	brcs	.+14     	; 0x12ce6 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7003+0x294>
   12cd8:	af 01       	movw	r20, r30
   12cda:	42 1b       	sub	r20, r18
   12cdc:	53 0b       	sbc	r21, r19
   12cde:	84 0f       	add	r24, r20
   12ce0:	95 1f       	adc	r25, r21
   12ce2:	46 2f       	mov	r20, r22
   12ce4:	eb cf       	rjmp	.-42     	; 0x12cbc <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7003+0x26a>
   12ce6:	40 93 4a 10 	sts	0x104A, r20	; 0x80104a <now>
   12cea:	21 e0       	ldi	r18, 0x01	; 1
   12cec:	62 2f       	mov	r22, r18
   12cee:	61 50       	subi	r22, 0x01	; 1
   12cf0:	77 0b       	sbc	r23, r23
   12cf2:	fb 01       	movw	r30, r22
   12cf4:	ea 5b       	subi	r30, 0xBA	; 186
   12cf6:	fa 4c       	sbci	r31, 0xCA	; 202
   12cf8:	e4 91       	lpm	r30, Z
   12cfa:	51 11       	cpse	r21, r1
   12cfc:	03 c0       	rjmp	.+6      	; 0x12d04 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7003+0x2b2>
   12cfe:	22 30       	cpi	r18, 0x02	; 2
   12d00:	09 f4       	brne	.+2      	; 0x12d04 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7003+0x2b2>
   12d02:	ef 5f       	subi	r30, 0xFF	; 255
   12d04:	f0 e0       	ldi	r31, 0x00	; 0
   12d06:	31 e0       	ldi	r19, 0x01	; 1
   12d08:	32 0f       	add	r19, r18
   12d0a:	8e 17       	cp	r24, r30
   12d0c:	9f 07       	cpc	r25, r31
   12d0e:	20 f0       	brcs	.+8      	; 0x12d18 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7003+0x2c6>
   12d10:	8e 1b       	sub	r24, r30
   12d12:	9f 0b       	sbc	r25, r31
   12d14:	23 2f       	mov	r18, r19
   12d16:	ea cf       	rjmp	.-44     	; 0x12cec <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7003+0x29a>
   12d18:	20 93 4b 10 	sts	0x104B, r18	; 0x80104b <now+0x1>
   12d1c:	8f 5f       	subi	r24, 0xFF	; 255
   12d1e:	80 93 4c 10 	sts	0x104C, r24	; 0x80104c <now+0x2>
   12d22:	10 92 13 13 	sts	0x1313, r1	; 0x801313 <ethClient+0x3>
   12d26:	10 92 12 13 	sts	0x1312, r1	; 0x801312 <ethClient+0x2>
   12d2a:	48 ee       	ldi	r20, 0xE8	; 232
   12d2c:	53 e0       	ldi	r21, 0x03	; 3
   12d2e:	60 e0       	ldi	r22, 0x00	; 0
   12d30:	70 e0       	ldi	r23, 0x00	; 0
   12d32:	40 93 14 13 	sts	0x1314, r20	; 0x801314 <ethClient+0x4>
   12d36:	50 93 15 13 	sts	0x1315, r21	; 0x801315 <ethClient+0x5>
   12d3a:	60 93 16 13 	sts	0x1316, r22	; 0x801316 <ethClient+0x6>
   12d3e:	70 93 17 13 	sts	0x1317, r23	; 0x801317 <ethClient+0x7>
   12d42:	80 ec       	ldi	r24, 0xC0	; 192
   12d44:	92 e0       	ldi	r25, 0x02	; 2
   12d46:	90 93 11 13 	sts	0x1311, r25	; 0x801311 <ethClient+0x1>
   12d4a:	80 93 10 13 	sts	0x1310, r24	; 0x801310 <ethClient>
   12d4e:	88 e0       	ldi	r24, 0x08	; 8
   12d50:	80 93 1c 13 	sts	0x131C, r24	; 0x80131c <ethClient+0xc>
   12d54:	10 92 32 10 	sts	0x1032, r1	; 0x801032 <udpClient+0x3>
   12d58:	10 92 31 10 	sts	0x1031, r1	; 0x801031 <udpClient+0x2>
   12d5c:	40 93 33 10 	sts	0x1033, r20	; 0x801033 <udpClient+0x4>
   12d60:	50 93 34 10 	sts	0x1034, r21	; 0x801034 <udpClient+0x5>
   12d64:	60 93 35 10 	sts	0x1035, r22	; 0x801035 <udpClient+0x6>
   12d68:	70 93 36 10 	sts	0x1036, r23	; 0x801036 <udpClient+0x7>
   12d6c:	28 e9       	ldi	r18, 0x98	; 152
   12d6e:	32 e0       	ldi	r19, 0x02	; 2
   12d70:	30 93 30 10 	sts	0x1030, r19	; 0x801030 <udpClient+0x1>
   12d74:	20 93 2f 10 	sts	0x102F, r18	; 0x80102f <udpClient>
   12d78:	80 93 3b 10 	sts	0x103B, r24	; 0x80103b <udpClient+0xc>
   12d7c:	82 ee       	ldi	r24, 0xE2	; 226
   12d7e:	92 e0       	ldi	r25, 0x02	; 2
   12d80:	90 93 3f 10 	sts	0x103F, r25	; 0x80103f <udpClient+0x10>
   12d84:	80 93 3e 10 	sts	0x103E, r24	; 0x80103e <udpClient+0xf>
   12d88:	10 92 40 10 	sts	0x1040, r1	; 0x801040 <udpClient+0x11>
   12d8c:	10 92 41 10 	sts	0x1041, r1	; 0x801041 <udpClient+0x12>
   12d90:	10 92 42 10 	sts	0x1042, r1	; 0x801042 <udpClient+0x13>
   12d94:	10 92 43 10 	sts	0x1043, r1	; 0x801043 <udpClient+0x14>
   12d98:	90 93 22 10 	sts	0x1022, r25	; 0x801022 <mqtt_client+0x210>
   12d9c:	80 93 21 10 	sts	0x1021, r24	; 0x801021 <mqtt_client+0x20f>
   12da0:	10 92 23 10 	sts	0x1023, r1	; 0x801023 <mqtt_client+0x211>
   12da4:	10 92 24 10 	sts	0x1024, r1	; 0x801024 <mqtt_client+0x212>
   12da8:	10 92 25 10 	sts	0x1025, r1	; 0x801025 <mqtt_client+0x213>
   12dac:	10 92 26 10 	sts	0x1026, r1	; 0x801026 <mqtt_client+0x214>
   12db0:	0f ef       	ldi	r16, 0xFF	; 255
   12db2:	1f ef       	ldi	r17, 0xFF	; 255
   12db4:	10 93 2e 10 	sts	0x102E, r17	; 0x80102e <mqtt_client+0x21c>
   12db8:	00 93 2d 10 	sts	0x102D, r16	; 0x80102d <mqtt_client+0x21b>
   12dbc:	80 e1       	ldi	r24, 0x10	; 16
   12dbe:	93 e1       	ldi	r25, 0x13	; 19
   12dc0:	90 93 13 0e 	sts	0x0E13, r25	; 0x800e13 <mqtt_client+0x1>
   12dc4:	80 93 12 0e 	sts	0x0E12, r24	; 0x800e12 <mqtt_client>
   12dc8:	10 92 2c 10 	sts	0x102C, r1	; 0x80102c <mqtt_client+0x21a>
   12dcc:	10 92 2b 10 	sts	0x102B, r1	; 0x80102b <mqtt_client+0x219>
   12dd0:	88 ef       	ldi	r24, 0xF8	; 248
   12dd2:	92 e1       	ldi	r25, 0x12	; 18
   12dd4:	23 e0       	ldi	r18, 0x03	; 3
   12dd6:	30 e0       	ldi	r19, 0x00	; 0
   12dd8:	30 93 f9 12 	sts	0x12F9, r19	; 0x8012f9 <radio+0x1>
   12ddc:	20 93 f8 12 	sts	0x12F8, r18	; 0x8012f8 <radio>
   12de0:	22 e0       	ldi	r18, 0x02	; 2
   12de2:	30 e0       	ldi	r19, 0x00	; 0
   12de4:	30 93 fb 12 	sts	0x12FB, r19	; 0x8012fb <radio+0x3>
   12de8:	20 93 fa 12 	sts	0x12FA, r18	; 0x8012fa <radio+0x2>
   12dec:	10 92 fe 12 	sts	0x12FE, r1	; 0x8012fe <radio+0x6>
   12df0:	20 e2       	ldi	r18, 0x20	; 32
   12df2:	20 93 ff 12 	sts	0x12FF, r18	; 0x8012ff <radio+0x7>
   12df6:	10 92 00 13 	sts	0x1300, r1	; 0x801300 <radio+0x8>
   12dfa:	25 e0       	ldi	r18, 0x05	; 5
   12dfc:	20 93 06 13 	sts	0x1306, r18	; 0x801306 <radio+0xe>
   12e00:	45 e0       	ldi	r20, 0x05	; 5
   12e02:	50 e0       	ldi	r21, 0x00	; 0
   12e04:	60 e0       	ldi	r22, 0x00	; 0
   12e06:	70 e0       	ldi	r23, 0x00	; 0
   12e08:	40 93 0c 13 	sts	0x130C, r20	; 0x80130c <radio+0x14>
   12e0c:	50 93 0d 13 	sts	0x130D, r21	; 0x80130d <radio+0x15>
   12e10:	60 93 0e 13 	sts	0x130E, r22	; 0x80130e <radio+0x16>
   12e14:	70 93 0f 13 	sts	0x130F, r23	; 0x80130f <radio+0x17>
   12e18:	10 92 01 13 	sts	0x1301, r1	; 0x801301 <radio+0x9>
   12e1c:	90 93 b6 11 	sts	0x11B6, r25	; 0x8011b6 <network+0x30>
   12e20:	80 93 b5 11 	sts	0x11B5, r24	; 0x8011b5 <network+0x2f>
   12e24:	2b eb       	ldi	r18, 0xBB	; 187
   12e26:	31 e1       	ldi	r19, 0x11	; 17
   12e28:	30 93 56 12 	sts	0x1256, r19	; 0x801256 <network+0xd0>
   12e2c:	20 93 55 12 	sts	0x1255, r18	; 0x801255 <network+0xcf>
   12e30:	23 e6       	ldi	r18, 0x63	; 99
   12e32:	32 e1       	ldi	r19, 0x12	; 18
   12e34:	30 93 62 12 	sts	0x1262, r19	; 0x801262 <network+0xdc>
   12e38:	20 93 61 12 	sts	0x1261, r18	; 0x801261 <network+0xdb>
   12e3c:	27 e5       	ldi	r18, 0x57	; 87
   12e3e:	32 e1       	ldi	r19, 0x12	; 18
   12e40:	30 93 ae 11 	sts	0x11AE, r19	; 0x8011ae <network+0x28>
   12e44:	20 93 ad 11 	sts	0x11AD, r18	; 0x8011ad <network+0x27>
   12e48:	10 92 b1 11 	sts	0x11B1, r1	; 0x8011b1 <network+0x2b>
   12e4c:	10 92 b2 11 	sts	0x11B2, r1	; 0x8011b2 <network+0x2c>
   12e50:	10 92 b3 11 	sts	0x11B3, r1	; 0x8011b3 <network+0x2d>
   12e54:	10 92 b4 11 	sts	0x11B4, r1	; 0x8011b4 <network+0x2e>
   12e58:	10 92 b0 11 	sts	0x11B0, r1	; 0x8011b0 <network+0x2a>
   12e5c:	10 92 af 11 	sts	0x11AF, r1	; 0x8011af <network+0x29>
   12e60:	10 92 86 11 	sts	0x1186, r1	; 0x801186 <network>
   12e64:	90 93 75 11 	sts	0x1175, r25	; 0x801175 <mesh+0x7>
   12e68:	80 93 74 11 	sts	0x1174, r24	; 0x801174 <mesh+0x6>
   12e6c:	86 e8       	ldi	r24, 0x86	; 134
   12e6e:	91 e1       	ldi	r25, 0x11	; 17
   12e70:	90 93 77 11 	sts	0x1177, r25	; 0x801177 <mesh+0x9>
   12e74:	80 93 76 11 	sts	0x1176, r24	; 0x801176 <mesh+0x8>
   12e78:	89 ef       	ldi	r24, 0xF9	; 249
   12e7a:	9d e0       	ldi	r25, 0x0D	; 13
   12e7c:	90 93 06 0e 	sts	0x0E06, r25	; 0x800e06 <lm75_temp+0x1>
   12e80:	80 93 05 0e 	sts	0x0E05, r24	; 0x800e05 <lm75_temp>
   12e84:	88 e4       	ldi	r24, 0x48	; 72
   12e86:	80 93 07 0e 	sts	0x0E07, r24	; 0x800e07 <lm75_temp+0x2>
   12e8a:	8a e0       	ldi	r24, 0x0A	; 10
   12e8c:	92 e0       	ldi	r25, 0x02	; 2
   12e8e:	90 93 11 0e 	sts	0x0E11, r25	; 0x800e11 <lm75_temp+0xc>
   12e92:	80 93 10 0e 	sts	0x0E10, r24	; 0x800e10 <lm75_temp+0xb>
   12e96:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <Generic_LM75_11Bit_Attributes+0x1>
   12e9a:	90 93 08 0e 	sts	0x0E08, r25	; 0x800e08 <lm75_temp+0x3>
   12e9e:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <Generic_LM75_11Bit_Attributes>
   12ea2:	89 1b       	sub	r24, r25
   12ea4:	99 0b       	sbc	r25, r25
   12ea6:	c1 e0       	ldi	r28, 0x01	; 1
   12ea8:	d0 e0       	ldi	r29, 0x00	; 0
   12eaa:	9e 01       	movw	r18, r28
   12eac:	02 c0       	rjmp	.+4      	; 0x12eb2 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7003+0x460>
   12eae:	22 0f       	add	r18, r18
   12eb0:	33 1f       	adc	r19, r19
   12eb2:	8a 95       	dec	r24
   12eb4:	e2 f7       	brpl	.-8      	; 0x12eae <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7003+0x45c>
   12eb6:	c9 01       	movw	r24, r18
   12eb8:	91 95       	neg	r25
   12eba:	81 95       	neg	r24
   12ebc:	91 09       	sbc	r25, r1
   12ebe:	90 93 0a 0e 	sts	0x0E0A, r25	; 0x800e0a <lm75_temp+0x5>
   12ec2:	80 93 09 0e 	sts	0x0E09, r24	; 0x800e09 <lm75_temp+0x4>
   12ec6:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <Generic_LM75_11Bit_Attributes+0x2>
   12eca:	80 93 0b 0e 	sts	0x0E0B, r24	; 0x800e0b <lm75_temp+0x6>
   12ece:	be 01       	movw	r22, r28
   12ed0:	02 c0       	rjmp	.+4      	; 0x12ed6 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7003+0x484>
   12ed2:	66 0f       	add	r22, r22
   12ed4:	77 1f       	adc	r23, r23
   12ed6:	8a 95       	dec	r24
   12ed8:	e2 f7       	brpl	.-8      	; 0x12ed2 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7003+0x480>
   12eda:	07 2e       	mov	r0, r23
   12edc:	00 0c       	add	r0, r0
   12ede:	88 0b       	sbc	r24, r24
   12ee0:	99 0b       	sbc	r25, r25
   12ee2:	0e 94 6e ab 	call	0x156dc	; 0x156dc <__floatsisf>
   12ee6:	9b 01       	movw	r18, r22
   12ee8:	ac 01       	movw	r20, r24
   12eea:	60 e0       	ldi	r22, 0x00	; 0
   12eec:	70 e0       	ldi	r23, 0x00	; 0
   12eee:	80 e8       	ldi	r24, 0x80	; 128
   12ef0:	9f e3       	ldi	r25, 0x3F	; 63
   12ef2:	0e 94 a1 ad 	call	0x15b42	; 0x15b42 <__divsf3>
   12ef6:	60 93 0c 0e 	sts	0x0E0C, r22	; 0x800e0c <lm75_temp+0x7>
   12efa:	70 93 0d 0e 	sts	0x0E0D, r23	; 0x800e0d <lm75_temp+0x8>
   12efe:	80 93 0e 0e 	sts	0x0E0E, r24	; 0x800e0e <lm75_temp+0x9>
   12f02:	90 93 0f 0e 	sts	0x0E0F, r25	; 0x800e0f <lm75_temp+0xa>
   12f06:	80 e0       	ldi	r24, 0x00	; 0
   12f08:	98 ef       	ldi	r25, 0xF8	; 248
   12f0a:	90 93 c3 0d 	sts	0x0DC3, r25	; 0x800dc3 <my_lcd+0x9>
   12f0e:	80 93 c2 0d 	sts	0x0DC2, r24	; 0x800dc2 <my_lcd+0x8>
   12f12:	20 ee       	ldi	r18, 0xE0	; 224
   12f14:	37 e0       	ldi	r19, 0x07	; 7
   12f16:	30 93 c1 0d 	sts	0x0DC1, r19	; 0x800dc1 <my_lcd+0x7>
   12f1a:	20 93 c0 0d 	sts	0x0DC0, r18	; 0x800dc0 <my_lcd+0x6>
   12f1e:	90 93 c5 0d 	sts	0x0DC5, r25	; 0x800dc5 <my_lcd+0xb>
   12f22:	80 93 c4 0d 	sts	0x0DC4, r24	; 0x800dc4 <my_lcd+0xa>
   12f26:	81 e0       	ldi	r24, 0x01	; 1
   12f28:	80 93 c6 0d 	sts	0x0DC6, r24	; 0x800dc6 <my_lcd+0xc>
   12f2c:	10 92 c7 0d 	sts	0x0DC7, r1	; 0x800dc7 <my_lcd+0xd>
   12f30:	84 e8       	ldi	r24, 0x84	; 132
   12f32:	92 e0       	ldi	r25, 0x02	; 2
   12f34:	90 93 bb 0d 	sts	0x0DBB, r25	; 0x800dbb <my_lcd+0x1>
   12f38:	80 93 ba 0d 	sts	0x0DBA, r24	; 0x800dba <my_lcd>
   12f3c:	82 e2       	ldi	r24, 0x22	; 34
   12f3e:	80 93 f8 0d 	sts	0x0DF8, r24	; 0x800df8 <my_lcd+0x3e>
   12f42:	e1 e3       	ldi	r30, 0x31	; 49
   12f44:	f5 e3       	ldi	r31, 0x35	; 53
   12f46:	e4 91       	lpm	r30, Z
   12f48:	f0 e0       	ldi	r31, 0x00	; 0
   12f4a:	ee 0f       	add	r30, r30
   12f4c:	ff 1f       	adc	r31, r31
   12f4e:	e0 50       	subi	r30, 0x00	; 0
   12f50:	fb 4c       	sbci	r31, 0xCB	; 203
   12f52:	a5 91       	lpm	r26, Z+
   12f54:	b4 91       	lpm	r27, Z
   12f56:	b0 93 e9 0d 	sts	0x0DE9, r27	; 0x800de9 <my_lcd+0x2f>
   12f5a:	a0 93 e8 0d 	sts	0x0DE8, r26	; 0x800de8 <my_lcd+0x2e>
   12f5e:	e3 e3       	ldi	r30, 0x33	; 51
   12f60:	f5 e3       	ldi	r31, 0x35	; 53
   12f62:	e4 91       	lpm	r30, Z
   12f64:	f0 e0       	ldi	r31, 0x00	; 0
   12f66:	ee 0f       	add	r30, r30
   12f68:	ff 1f       	adc	r31, r31
   12f6a:	e0 50       	subi	r30, 0x00	; 0
   12f6c:	fb 4c       	sbci	r31, 0xCB	; 203
   12f6e:	85 91       	lpm	r24, Z+
   12f70:	94 91       	lpm	r25, Z
   12f72:	90 93 eb 0d 	sts	0x0DEB, r25	; 0x800deb <my_lcd+0x31>
   12f76:	80 93 ea 0d 	sts	0x0DEA, r24	; 0x800dea <my_lcd+0x30>
   12f7a:	e4 e3       	ldi	r30, 0x34	; 52
   12f7c:	f5 e3       	ldi	r31, 0x35	; 53
   12f7e:	e4 91       	lpm	r30, Z
   12f80:	f0 e0       	ldi	r31, 0x00	; 0
   12f82:	ee 0f       	add	r30, r30
   12f84:	ff 1f       	adc	r31, r31
   12f86:	e0 50       	subi	r30, 0x00	; 0
   12f88:	fb 4c       	sbci	r31, 0xCB	; 203
   12f8a:	85 91       	lpm	r24, Z+
   12f8c:	94 91       	lpm	r25, Z
   12f8e:	90 93 ed 0d 	sts	0x0DED, r25	; 0x800ded <my_lcd+0x33>
   12f92:	80 93 ec 0d 	sts	0x0DEC, r24	; 0x800dec <my_lcd+0x32>
   12f96:	e0 e3       	ldi	r30, 0x30	; 48
   12f98:	f5 e3       	ldi	r31, 0x35	; 53
   12f9a:	e4 91       	lpm	r30, Z
   12f9c:	f0 e0       	ldi	r31, 0x00	; 0
   12f9e:	ee 0f       	add	r30, r30
   12fa0:	ff 1f       	adc	r31, r31
   12fa2:	e0 50       	subi	r30, 0x00	; 0
   12fa4:	fb 4c       	sbci	r31, 0xCB	; 203
   12fa6:	85 91       	lpm	r24, Z+
   12fa8:	94 91       	lpm	r25, Z
   12faa:	90 93 ef 0d 	sts	0x0DEF, r25	; 0x800def <my_lcd+0x35>
   12fae:	80 93 ee 0d 	sts	0x0DEE, r24	; 0x800dee <my_lcd+0x34>
   12fb2:	eb ee       	ldi	r30, 0xEB	; 235
   12fb4:	f4 e3       	ldi	r31, 0x34	; 52
   12fb6:	84 91       	lpm	r24, Z
   12fb8:	80 93 f0 0d 	sts	0x0DF0, r24	; 0x800df0 <my_lcd+0x36>
   12fbc:	ed ee       	ldi	r30, 0xED	; 237
   12fbe:	f4 e3       	ldi	r31, 0x34	; 52
   12fc0:	24 91       	lpm	r18, Z
   12fc2:	20 93 f1 0d 	sts	0x0DF1, r18	; 0x800df1 <my_lcd+0x37>
   12fc6:	ee ee       	ldi	r30, 0xEE	; 238
   12fc8:	f4 e3       	ldi	r31, 0x34	; 52
   12fca:	94 91       	lpm	r25, Z
   12fcc:	90 93 f2 0d 	sts	0x0DF2, r25	; 0x800df2 <my_lcd+0x38>
   12fd0:	ea ee       	ldi	r30, 0xEA	; 234
   12fd2:	f4 e3       	ldi	r31, 0x34	; 52
   12fd4:	e4 91       	lpm	r30, Z
   12fd6:	e0 93 f3 0d 	sts	0x0DF3, r30	; 0x800df3 <my_lcd+0x39>
   12fda:	38 2f       	mov	r19, r24
   12fdc:	30 95       	com	r19
   12fde:	30 93 f4 0d 	sts	0x0DF4, r19	; 0x800df4 <my_lcd+0x3a>
   12fe2:	20 95       	com	r18
   12fe4:	20 93 f5 0d 	sts	0x0DF5, r18	; 0x800df5 <my_lcd+0x3b>
   12fe8:	90 95       	com	r25
   12fea:	90 93 f6 0d 	sts	0x0DF6, r25	; 0x800df6 <my_lcd+0x3c>
   12fee:	e0 95       	com	r30
   12ff0:	e0 93 f7 0d 	sts	0x0DF7, r30	; 0x800df7 <my_lcd+0x3d>
   12ff4:	ec 91       	ld	r30, X
   12ff6:	e8 2b       	or	r30, r24
   12ff8:	ec 93       	st	X, r30
   12ffa:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x30>
   12ffe:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x31>
   13002:	80 81       	ld	r24, Z
   13004:	90 91 f1 0d 	lds	r25, 0x0DF1	; 0x800df1 <my_lcd+0x37>
   13008:	89 2b       	or	r24, r25
   1300a:	80 83       	st	Z, r24
   1300c:	e0 91 ec 0d 	lds	r30, 0x0DEC	; 0x800dec <my_lcd+0x32>
   13010:	f0 91 ed 0d 	lds	r31, 0x0DED	; 0x800ded <my_lcd+0x33>
   13014:	80 81       	ld	r24, Z
   13016:	90 91 f2 0d 	lds	r25, 0x0DF2	; 0x800df2 <my_lcd+0x38>
   1301a:	89 2b       	or	r24, r25
   1301c:	80 83       	st	Z, r24
   1301e:	e0 91 ee 0d 	lds	r30, 0x0DEE	; 0x800dee <my_lcd+0x34>
   13022:	f0 91 ef 0d 	lds	r31, 0x0DEF	; 0x800def <my_lcd+0x35>
   13026:	80 81       	ld	r24, Z
   13028:	90 91 f3 0d 	lds	r25, 0x0DF3	; 0x800df3 <my_lcd+0x39>
   1302c:	89 2b       	or	r24, r25
   1302e:	80 83       	st	Z, r24
   13030:	61 e0       	ldi	r22, 0x01	; 1
   13032:	81 e2       	ldi	r24, 0x21	; 33
   13034:	0e 94 b9 83 	call	0x10772	; 0x10772 <pinMode>
   13038:	61 e0       	ldi	r22, 0x01	; 1
   1303a:	83 e2       	ldi	r24, 0x23	; 35
   1303c:	0e 94 b9 83 	call	0x10772	; 0x10772 <pinMode>
   13040:	61 e0       	ldi	r22, 0x01	; 1
   13042:	84 e2       	ldi	r24, 0x24	; 36
   13044:	0e 94 b9 83 	call	0x10772	; 0x10772 <pinMode>
   13048:	61 e0       	ldi	r22, 0x01	; 1
   1304a:	80 e2       	ldi	r24, 0x20	; 32
   1304c:	0e 94 b9 83 	call	0x10772	; 0x10772 <pinMode>
   13050:	61 e0       	ldi	r22, 0x01	; 1
   13052:	82 e2       	ldi	r24, 0x22	; 34
   13054:	0e 94 5c 82 	call	0x104b8	; 0x104b8 <digitalWrite>
   13058:	61 e0       	ldi	r22, 0x01	; 1
   1305a:	82 e2       	ldi	r24, 0x22	; 34
   1305c:	0e 94 b9 83 	call	0x10772	; 0x10772 <pinMode>
   13060:	10 92 d1 0d 	sts	0x0DD1, r1	; 0x800dd1 <my_lcd+0x17>
   13064:	10 92 d0 0d 	sts	0x0DD0, r1	; 0x800dd0 <my_lcd+0x16>
   13068:	86 e9       	ldi	r24, 0x96	; 150
   1306a:	97 e7       	ldi	r25, 0x77	; 119
   1306c:	90 93 d5 0d 	sts	0x0DD5, r25	; 0x800dd5 <my_lcd+0x1b>
   13070:	80 93 d4 0d 	sts	0x0DD4, r24	; 0x800dd4 <my_lcd+0x1a>
   13074:	20 e4       	ldi	r18, 0x40	; 64
   13076:	31 e0       	ldi	r19, 0x01	; 1
   13078:	30 93 c9 0d 	sts	0x0DC9, r19	; 0x800dc9 <my_lcd+0xf>
   1307c:	20 93 c8 0d 	sts	0x0DC8, r18	; 0x800dc8 <my_lcd+0xe>
   13080:	80 ee       	ldi	r24, 0xE0	; 224
   13082:	91 e0       	ldi	r25, 0x01	; 1
   13084:	90 93 cb 0d 	sts	0x0DCB, r25	; 0x800dcb <my_lcd+0x11>
   13088:	80 93 ca 0d 	sts	0x0DCA, r24	; 0x800dca <my_lcd+0x10>
   1308c:	41 b1       	in	r20, 0x01	; 1
   1308e:	4f ef       	ldi	r20, 0xFF	; 255
   13090:	41 b9       	out	0x01, r20	; 1
   13092:	30 93 cd 0d 	sts	0x0DCD, r19	; 0x800dcd <my_lcd+0x13>
   13096:	20 93 cc 0d 	sts	0x0DCC, r18	; 0x800dcc <my_lcd+0x12>
   1309a:	90 93 cf 0d 	sts	0x0DCF, r25	; 0x800dcf <my_lcd+0x15>
   1309e:	80 93 ce 0d 	sts	0x0DCE, r24	; 0x800dce <my_lcd+0x14>
   130a2:	ec e2       	ldi	r30, 0x2C	; 44
   130a4:	f5 e3       	ldi	r31, 0x35	; 53
   130a6:	e4 91       	lpm	r30, Z
   130a8:	f0 e0       	ldi	r31, 0x00	; 0
   130aa:	ee 0f       	add	r30, r30
   130ac:	ff 1f       	adc	r31, r31
   130ae:	e0 50       	subi	r30, 0x00	; 0
   130b0:	fb 4c       	sbci	r31, 0xCB	; 203
   130b2:	85 91       	lpm	r24, Z+
   130b4:	94 91       	lpm	r25, Z
   130b6:	90 93 ac 0d 	sts	0x0DAC, r25	; 0x800dac <my_touch+0x10>
   130ba:	80 93 ab 0d 	sts	0x0DAB, r24	; 0x800dab <my_touch+0xf>
   130be:	eb e2       	ldi	r30, 0x2B	; 43
   130c0:	f5 e3       	ldi	r31, 0x35	; 53
   130c2:	e4 91       	lpm	r30, Z
   130c4:	f0 e0       	ldi	r31, 0x00	; 0
   130c6:	ee 0f       	add	r30, r30
   130c8:	ff 1f       	adc	r31, r31
   130ca:	e0 50       	subi	r30, 0x00	; 0
   130cc:	fb 4c       	sbci	r31, 0xCB	; 203
   130ce:	85 91       	lpm	r24, Z+
   130d0:	94 91       	lpm	r25, Z
   130d2:	90 93 ae 0d 	sts	0x0DAE, r25	; 0x800dae <my_touch+0x12>
   130d6:	80 93 ad 0d 	sts	0x0DAD, r24	; 0x800dad <my_touch+0x11>
   130da:	ed e2       	ldi	r30, 0x2D	; 45
   130dc:	f5 e3       	ldi	r31, 0x35	; 53
   130de:	e4 91       	lpm	r30, Z
   130e0:	f0 e0       	ldi	r31, 0x00	; 0
   130e2:	ee 0f       	add	r30, r30
   130e4:	ff 1f       	adc	r31, r31
   130e6:	e6 54       	subi	r30, 0x46	; 70
   130e8:	fb 4c       	sbci	r31, 0xCB	; 203
   130ea:	85 91       	lpm	r24, Z+
   130ec:	94 91       	lpm	r25, Z
   130ee:	90 93 b0 0d 	sts	0x0DB0, r25	; 0x800db0 <my_touch+0x14>
   130f2:	80 93 af 0d 	sts	0x0DAF, r24	; 0x800daf <my_touch+0x13>
   130f6:	ee e2       	ldi	r30, 0x2E	; 46
   130f8:	f5 e3       	ldi	r31, 0x35	; 53
   130fa:	e4 91       	lpm	r30, Z
   130fc:	f0 e0       	ldi	r31, 0x00	; 0
   130fe:	ee 0f       	add	r30, r30
   13100:	ff 1f       	adc	r31, r31
   13102:	e0 50       	subi	r30, 0x00	; 0
   13104:	fb 4c       	sbci	r31, 0xCB	; 203
   13106:	85 91       	lpm	r24, Z+
   13108:	94 91       	lpm	r25, Z
   1310a:	90 93 b2 0d 	sts	0x0DB2, r25	; 0x800db2 <my_touch+0x16>
   1310e:	80 93 b1 0d 	sts	0x0DB1, r24	; 0x800db1 <my_touch+0x15>
   13112:	e7 e1       	ldi	r30, 0x17	; 23
   13114:	f5 e3       	ldi	r31, 0x35	; 53
   13116:	e4 91       	lpm	r30, Z
   13118:	f0 e0       	ldi	r31, 0x00	; 0
   1311a:	ee 0f       	add	r30, r30
   1311c:	ff 1f       	adc	r31, r31
   1311e:	e6 54       	subi	r30, 0x46	; 70
   13120:	fb 4c       	sbci	r31, 0xCB	; 203
   13122:	85 91       	lpm	r24, Z+
   13124:	94 91       	lpm	r25, Z
   13126:	90 93 b4 0d 	sts	0x0DB4, r25	; 0x800db4 <my_touch+0x18>
   1312a:	80 93 b3 0d 	sts	0x0DB3, r24	; 0x800db3 <my_touch+0x17>
   1312e:	e6 ee       	ldi	r30, 0xE6	; 230
   13130:	f4 e3       	ldi	r31, 0x34	; 52
   13132:	e4 91       	lpm	r30, Z
   13134:	e0 93 b5 0d 	sts	0x0DB5, r30	; 0x800db5 <my_touch+0x19>
   13138:	e5 ee       	ldi	r30, 0xE5	; 229
   1313a:	f4 e3       	ldi	r31, 0x34	; 52
   1313c:	e4 91       	lpm	r30, Z
   1313e:	e0 93 b6 0d 	sts	0x0DB6, r30	; 0x800db6 <my_touch+0x1a>
   13142:	e7 ee       	ldi	r30, 0xE7	; 231
   13144:	f4 e3       	ldi	r31, 0x34	; 52
   13146:	e4 91       	lpm	r30, Z
   13148:	e0 93 b7 0d 	sts	0x0DB7, r30	; 0x800db7 <my_touch+0x1b>
   1314c:	e8 ee       	ldi	r30, 0xE8	; 232
   1314e:	f4 e3       	ldi	r31, 0x34	; 52
   13150:	e4 91       	lpm	r30, Z
   13152:	e0 93 b8 0d 	sts	0x0DB8, r30	; 0x800db8 <my_touch+0x1c>
   13156:	e1 ed       	ldi	r30, 0xD1	; 209
   13158:	f4 e3       	ldi	r31, 0x34	; 52
   1315a:	e4 91       	lpm	r30, Z
   1315c:	e0 93 b9 0d 	sts	0x0DB9, r30	; 0x800db9 <my_touch+0x1d>
   13160:	61 e0       	ldi	r22, 0x01	; 1
   13162:	8c e1       	ldi	r24, 0x1C	; 28
   13164:	0e 94 b9 83 	call	0x10772	; 0x10772 <pinMode>
   13168:	61 e0       	ldi	r22, 0x01	; 1
   1316a:	8b e1       	ldi	r24, 0x1B	; 27
   1316c:	0e 94 b9 83 	call	0x10772	; 0x10772 <pinMode>
   13170:	60 e0       	ldi	r22, 0x00	; 0
   13172:	8d e1       	ldi	r24, 0x1D	; 29
   13174:	0e 94 b9 83 	call	0x10772	; 0x10772 <pinMode>
   13178:	61 e0       	ldi	r22, 0x01	; 1
   1317a:	8e e1       	ldi	r24, 0x1E	; 30
   1317c:	0e 94 b9 83 	call	0x10772	; 0x10772 <pinMode>
   13180:	60 e0       	ldi	r22, 0x00	; 0
   13182:	87 e0       	ldi	r24, 0x07	; 7
   13184:	0e 94 b9 83 	call	0x10772	; 0x10772 <pinMode>
   13188:	10 92 a8 0d 	sts	0x0DA8, r1	; 0x800da8 <my_touch+0xc>
   1318c:	10 92 a9 0d 	sts	0x0DA9, r1	; 0x800da9 <my_touch+0xd>
   13190:	10 92 aa 0d 	sts	0x0DAA, r1	; 0x800daa <my_touch+0xe>
   13194:	10 92 a5 0d 	sts	0x0DA5, r1	; 0x800da5 <my_touch+0x9>
   13198:	10 92 a4 0d 	sts	0x0DA4, r1	; 0x800da4 <my_touch+0x8>
   1319c:	10 92 a7 0d 	sts	0x0DA7, r1	; 0x800da7 <my_touch+0xb>
   131a0:	10 92 a6 0d 	sts	0x0DA6, r1	; 0x800da6 <my_touch+0xa>
   131a4:	10 92 9d 0d 	sts	0x0D9D, r1	; 0x800d9d <my_touch+0x1>
   131a8:	10 92 9c 0d 	sts	0x0D9C, r1	; 0x800d9c <my_touch>
   131ac:	10 92 9f 0d 	sts	0x0D9F, r1	; 0x800d9f <my_touch+0x3>
   131b0:	10 92 9e 0d 	sts	0x0D9E, r1	; 0x800d9e <my_touch+0x2>
   131b4:	10 93 a1 0d 	sts	0x0DA1, r17	; 0x800da1 <my_touch+0x5>
   131b8:	00 93 a0 0d 	sts	0x0DA0, r16	; 0x800da0 <my_touch+0x4>
   131bc:	10 93 a3 0d 	sts	0x0DA3, r17	; 0x800da3 <my_touch+0x7>
   131c0:	00 93 a2 0d 	sts	0x0DA2, r16	; 0x800da2 <my_touch+0x6>
   131c4:	8a e0       	ldi	r24, 0x0A	; 10
   131c6:	80 93 8d 0c 	sts	0x0C8D, r24	; 0x800c8d <doc>
   131ca:	86 e9       	ldi	r24, 0x96	; 150
   131cc:	9c e0       	ldi	r25, 0x0C	; 12
   131ce:	90 93 91 0c 	sts	0x0C91, r25	; 0x800c91 <doc+0x4>
   131d2:	80 93 90 0c 	sts	0x0C90, r24	; 0x800c90 <doc+0x3>
   131d6:	20 e0       	ldi	r18, 0x00	; 0
   131d8:	31 e0       	ldi	r19, 0x01	; 1
   131da:	30 93 93 0c 	sts	0x0C93, r19	; 0x800c93 <doc+0x6>
   131de:	20 93 92 0c 	sts	0x0C92, r18	; 0x800c92 <doc+0x5>
   131e2:	10 92 95 0c 	sts	0x0C95, r1	; 0x800c95 <doc+0x8>
   131e6:	10 92 94 0c 	sts	0x0C94, r1	; 0x800c94 <doc+0x7>
   131ea:	8e e7       	ldi	r24, 0x7E	; 126
   131ec:	92 e0       	ldi	r25, 0x02	; 2
   131ee:	90 93 8f 0c 	sts	0x0C8F, r25	; 0x800c8f <doc+0x2>
   131f2:	80 93 8e 0c 	sts	0x0C8E, r24	; 0x800c8e <doc+0x1>
   131f6:	10 92 97 0d 	sts	0x0D97, r1	; 0x800d97 <doc+0x10a>
   131fa:	10 92 96 0d 	sts	0x0D96, r1	; 0x800d96 <doc+0x109>
   131fe:	80 e0       	ldi	r24, 0x00	; 0
   13200:	90 e0       	ldi	r25, 0x00	; 0
   13202:	a2 e0       	ldi	r26, 0x02	; 2
   13204:	b0 e0       	ldi	r27, 0x00	; 0
   13206:	80 93 84 0c 	sts	0x0C84, r24	; 0x800c84 <SRAM+0x4>
   1320a:	90 93 85 0c 	sts	0x0C85, r25	; 0x800c85 <SRAM+0x5>
   1320e:	a0 93 86 0c 	sts	0x0C86, r26	; 0x800c86 <SRAM+0x6>
   13212:	b0 93 87 0c 	sts	0x0C87, r27	; 0x800c87 <SRAM+0x7>
   13216:	d0 93 83 0c 	sts	0x0C83, r29	; 0x800c83 <SRAM+0x3>
   1321a:	c0 93 82 0c 	sts	0x0C82, r28	; 0x800c82 <SRAM+0x2>
   1321e:	81 e5       	ldi	r24, 0x51	; 81
   13220:	90 e1       	ldi	r25, 0x10	; 16
   13222:	90 93 81 0c 	sts	0x0C81, r25	; 0x800c81 <SRAM+0x1>
   13226:	80 93 80 0c 	sts	0x0C80, r24	; 0x800c80 <SRAM>
   1322a:	46 e1       	ldi	r20, 0x16	; 22
   1322c:	40 93 88 0c 	sts	0x0C88, r20	; 0x800c88 <SRAM+0x8>
   13230:	40 e0       	ldi	r20, 0x00	; 0
   13232:	50 e0       	ldi	r21, 0x00	; 0
   13234:	64 e0       	ldi	r22, 0x04	; 4
   13236:	70 e0       	ldi	r23, 0x00	; 0
   13238:	40 93 75 0c 	sts	0x0C75, r20	; 0x800c75 <SROM+0x4>
   1323c:	50 93 76 0c 	sts	0x0C76, r21	; 0x800c76 <SROM+0x5>
   13240:	60 93 77 0c 	sts	0x0C77, r22	; 0x800c77 <SROM+0x6>
   13244:	70 93 78 0c 	sts	0x0C78, r23	; 0x800c78 <SROM+0x7>
   13248:	30 93 7a 0c 	sts	0x0C7A, r19	; 0x800c7a <SROM+0x9>
   1324c:	20 93 79 0c 	sts	0x0C79, r18	; 0x800c79 <SROM+0x8>
   13250:	10 92 74 0c 	sts	0x0C74, r1	; 0x800c74 <SROM+0x3>
   13254:	10 92 73 0c 	sts	0x0C73, r1	; 0x800c73 <SROM+0x2>
   13258:	90 93 72 0c 	sts	0x0C72, r25	; 0x800c72 <SROM+0x1>
   1325c:	80 93 71 0c 	sts	0x0C71, r24	; 0x800c71 <SROM>
   13260:	87 e1       	ldi	r24, 0x17	; 23
   13262:	80 93 7b 0c 	sts	0x0C7B, r24	; 0x800c7b <SROM+0xa>
   13266:	df 91       	pop	r29
   13268:	cf 91       	pop	r28
   1326a:	1f 91       	pop	r17
   1326c:	0f 91       	pop	r16
   1326e:	08 95       	ret

00013270 <main>:
main():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/main.cpp:34

//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
   13270:	cf 93       	push	r28
   13272:	df 93       	push	r29
   13274:	cd b7       	in	r28, 0x3d	; 61
   13276:	de b7       	in	r29, 0x3e	; 62
   13278:	c7 58       	subi	r28, 0x87	; 135
   1327a:	d1 09       	sbc	r29, r1
   1327c:	0f b6       	in	r0, 0x3f	; 63
   1327e:	f8 94       	cli
   13280:	de bf       	out	0x3e, r29	; 62
   13282:	0f be       	out	0x3f, r0	; 63
   13284:	cd bf       	out	0x3d, r28	; 61
init():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:612

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
   13286:	78 94       	sei
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:624

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
   13288:	84 b5       	in	r24, 0x24	; 36
   1328a:	83 60       	ori	r24, 0x03	; 3
   1328c:	84 bd       	out	0x24, r24	; 36
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:639
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
   1328e:	85 b5       	in	r24, 0x25	; 37
   13290:	83 60       	ori	r24, 0x03	; 3
   13292:	85 bd       	out	0x25, r24	; 37
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:651

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
   13294:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
   13298:	81 60       	ori	r24, 0x01	; 1
   1329a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:662
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
   1329e:	82 e0       	ldi	r24, 0x02	; 2
   132a0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:664
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
   132a4:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
   132a8:	81 60       	ori	r24, 0x01	; 1
   132aa:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:673
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
   132ae:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   132b2:	81 60       	ori	r24, 0x01	; 1
   132b4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:680

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
   132b8:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
   132bc:	84 60       	ori	r24, 0x04	; 4
   132be:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:689

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
   132c2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
   132c6:	81 60       	ori	r24, 0x01	; 1
   132c8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:695
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
   132cc:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
   132d0:	83 60       	ori	r24, 0x03	; 3
   132d2:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:696
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
   132d6:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   132da:	81 60       	ori	r24, 0x01	; 1
   132dc:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:705
  TCCR4B |= _BV(CS42) | _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
  TCCR4D |= _BV(WGM40);                        // Put timer 4 in phase- and frequency-correct PWM mode 
  TCCR4A |= _BV(PWM4A);                        // Enable PWM mode for comparator OCR4A
  TCCR4C |= _BV(PWM4D);                        // Enable PWM mode for comparator OCR4D 
#elif defined(TCCR4B) && defined(CS41) && defined(WGM40)
  TCCR4B |= _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
   132e0:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
   132e4:	83 60       	ori	r24, 0x03	; 3
   132e6:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:706
  TCCR4A |= _BV(WGM40);            // Put timer 4 in 8-bit phase correct pwm mode
   132ea:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   132ee:	81 60       	ori	r24, 0x01	; 1
   132f0:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:710
#endif

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
  TCCR5B |= _BV(CS51) | _BV(CS50); // Set timer 5 prescale factor to 64
   132f4:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
   132f8:	83 60       	ori	r24, 0x03	; 3
   132fa:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:711
  TCCR5A |= _BV(WGM50);            // Put timer 5 in 8-bit phase correct pwm mode
   132fe:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   13302:	81 60       	ori	r24, 0x01	; 1
   13304:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:717
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
   13308:	87 e8       	ldi	r24, 0x87	; 135
   1330a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:737
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
   1330e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
main():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
   13312:	0e 94 6a 68 	call	0xd0d4	; 0xd0d4 <setup>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3080
          avg = avg / MAX_AVG_TEMP;
          avg = avg / 10;
          itoa(avg, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "temp_avg", payload);

          strcpy(payload, tds.name);
   13316:	21 e4       	ldi	r18, 0x41	; 65
   13318:	30 e0       	ldi	r19, 0x00	; 0
   1331a:	2c 0f       	add	r18, r28
   1331c:	3d 1f       	adc	r19, r29
   1331e:	24 5f       	subi	r18, 0xF4	; 244
   13320:	3f 4f       	sbci	r19, 0xFF	; 255
   13322:	cc 57       	subi	r28, 0x7C	; 124
   13324:	df 4f       	sbci	r29, 0xFF	; 255
   13326:	39 83       	std	Y+1, r19	; 0x01
   13328:	28 83       	st	Y, r18
   1332a:	c4 58       	subi	r28, 0x84	; 132
   1332c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3089
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "offset", payload);
          tt = status_tds18s20[id].online;
          itoa(tt, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "online", payload);
          payload[0] = 0;
          createString(payload, ':', tds.rom, 8, 16);
   1332e:	41 e4       	ldi	r20, 0x41	; 65
   13330:	50 e0       	ldi	r21, 0x00	; 0
   13332:	4c 0f       	add	r20, r28
   13334:	5d 1f       	adc	r21, r29
   13336:	4f 5f       	subi	r20, 0xFF	; 255
   13338:	5f 4f       	sbci	r21, 0xFF	; 255
   1333a:	ca 57       	subi	r28, 0x7A	; 122
   1333c:	df 4f       	sbci	r29, 0xFF	; 255
   1333e:	59 83       	std	Y+1, r21	; 0x01
   13340:	48 83       	st	Y, r20
   13342:	c6 58       	subi	r28, 0x86	; 134
   13344:	d0 40       	sbci	r29, 0x00	; 0
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3995
  char str1[16];
  unsigned long load_now;



  load_now = millis();
   13346:	0e 94 1d 85 	call	0x10a3a	; 0x10a3a <millis>
   1334a:	1b 01       	movw	r2, r22
   1334c:	2c 01       	movw	r4, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3996
  if (mqtt_reconnect() == 0)
   1334e:	0e 94 1a 67 	call	0xce34	; 0xce34 <mqtt_reconnect()>
   13352:	90 91 ce 0a 	lds	r25, 0x0ACE	; 0x800ace <selftest_data>
   13356:	81 11       	cpse	r24, r1
   13358:	87 c0       	rjmp	.+270    	; 0x13468 <main+0x1f8>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3290
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
   1335a:	9f 7d       	andi	r25, 0xDF	; 223
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3281
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
   1335c:	90 93 ce 0a 	sts	0x0ACE, r25	; 0x800ace <selftest_data>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4001
  if (mqtt_reconnect() == 0)
    selftest_clear_0(SELFTEST_MQTT_LINK);
  else
    selftest_set_0(SELFTEST_MQTT_LINK);

  mqtt_client.loop();
   13360:	0e 94 4a 8c 	call	0x11894	; 0x11894 <PubSubClient::loop() [clone .constprop.107]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4004


  if (draw_menu(false) == true)
   13364:	80 e0       	ldi	r24, 0x00	; 0
   13366:	0e 94 6b 39 	call	0x72d6	; 0x72d6 <draw_menu(bool)>
   1336a:	88 23       	and	r24, r24
   1336c:	19 f0       	breq	.+6      	; 0x13374 <main+0x104>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4005
    draw_menu(true);
   1336e:	81 e0       	ldi	r24, 0x01	; 1
   13370:	0e 94 6b 39 	call	0x72d6	; 0x72d6 <draw_menu(bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4009

  ////////////////////
  /// kazdych 10sec
  if ((millis() - milis_10s) > 10000)
   13374:	0e 94 1d 85 	call	0x10a3a	; 0x10a3a <millis>
   13378:	00 91 cf 10 	lds	r16, 0x10CF	; 0x8010cf <milis_10s>
   1337c:	10 91 d0 10 	lds	r17, 0x10D0	; 0x8010d0 <milis_10s+0x1>
   13380:	20 91 d1 10 	lds	r18, 0x10D1	; 0x8010d1 <milis_10s+0x2>
   13384:	30 91 d2 10 	lds	r19, 0x10D2	; 0x8010d2 <milis_10s+0x3>
   13388:	60 1b       	sub	r22, r16
   1338a:	71 0b       	sbc	r23, r17
   1338c:	82 0b       	sbc	r24, r18
   1338e:	93 0b       	sbc	r25, r19
   13390:	61 31       	cpi	r22, 0x11	; 17
   13392:	77 42       	sbci	r23, 0x27	; 39
   13394:	81 05       	cpc	r24, r1
   13396:	91 05       	cpc	r25, r1
   13398:	08 f4       	brcc	.+2      	; 0x1339c <main+0x12c>
   1339a:	c6 c4       	rjmp	.+2444   	; 0x13d28 <main+0xab8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4011
  {
    milis_10s = millis();
   1339c:	0e 94 1d 85 	call	0x10a3a	; 0x10a3a <millis>
   133a0:	60 93 cf 10 	sts	0x10CF, r22	; 0x8010cf <milis_10s>
   133a4:	70 93 d0 10 	sts	0x10D0, r23	; 0x8010d0 <milis_10s+0x1>
   133a8:	80 93 d1 10 	sts	0x10D1, r24	; 0x8010d1 <milis_10s+0x2>
   133ac:	90 93 d2 10 	sts	0x10D2, r25	; 0x8010d2 <milis_10s+0x3>
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2910
{
  char str_topic[64];
  char hostname[10];
  char payload[64];
  char tmp1[4];
  itoa(Global_HWwirenum, payload, 10);
   133b0:	80 91 02 0a 	lds	r24, 0x0A02	; 0x800a02 <Global_HWwirenum>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
   133b4:	4a e0       	ldi	r20, 0x0A	; 10
   133b6:	be 01       	movw	r22, r28
   133b8:	6f 5f       	subi	r22, 0xFF	; 255
   133ba:	7f 4f       	sbci	r23, 0xFF	; 255
   133bc:	90 e0       	ldi	r25, 0x00	; 0
   133be:	0e 94 27 a3 	call	0x1464e	; 0x1464e <__itoa_ncheck>
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2911
  send_mqtt_general_payload(&mqtt_client, "1wire/count", payload);
   133c2:	ae 01       	movw	r20, r28
   133c4:	4f 5f       	subi	r20, 0xFF	; 255
   133c6:	5f 4f       	sbci	r21, 0xFF	; 255
   133c8:	64 ef       	ldi	r22, 0xF4	; 244
   133ca:	76 e0       	ldi	r23, 0x06	; 6
   133cc:	82 e1       	ldi	r24, 0x12	; 18
   133ce:	9e e0       	ldi	r25, 0x0E	; 14
   133d0:	0e 94 0f 53 	call	0xa61e	; 0xa61e <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2912
  for (uint8_t i = 0; i < Global_HWwirenum; i++)
   133d4:	10 e0       	ldi	r17, 0x00	; 0
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2914
  {
    createString(payload, ':', w_rom[i].rom, 8, 16);
   133d6:	ab e0       	ldi	r26, 0x0B	; 11
   133d8:	da 2e       	mov	r13, r26
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2912
  char hostname[10];
  char payload[64];
  char tmp1[4];
  itoa(Global_HWwirenum, payload, 10);
  send_mqtt_general_payload(&mqtt_client, "1wire/count", payload);
  for (uint8_t i = 0; i < Global_HWwirenum; i++)
   133da:	80 91 02 0a 	lds	r24, 0x0A02	; 0x800a02 <Global_HWwirenum>
   133de:	18 17       	cp	r17, r24
   133e0:	08 f0       	brcs	.+2      	; 0x133e4 <main+0x174>
   133e2:	44 c0       	rjmp	.+136    	; 0x1346c <main+0x1fc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2914
  {
    createString(payload, ':', w_rom[i].rom, 8, 16);
   133e4:	1d 9d       	mul	r17, r13
   133e6:	c0 01       	movw	r24, r0
   133e8:	11 24       	eor	r1, r1
   133ea:	dc 01       	movw	r26, r24
   133ec:	a0 54       	subi	r26, 0x40	; 64
   133ee:	b6 4f       	sbci	r27, 0xF6	; 246
   133f0:	7d 01       	movw	r14, r26
   133f2:	00 e1       	ldi	r16, 0x10	; 16
   133f4:	28 e0       	ldi	r18, 0x08	; 8
   133f6:	ad 01       	movw	r20, r26
   133f8:	6a e3       	ldi	r22, 0x3A	; 58
   133fa:	ce 01       	movw	r24, r28
   133fc:	01 96       	adiw	r24, 0x01	; 1
   133fe:	0e 94 4b 8f 	call	0x11e96	; 0x11e96 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2915
    send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "1wire", i, "rom", payload);
   13402:	9e 01       	movw	r18, r28
   13404:	2f 5f       	subi	r18, 0xFF	; 255
   13406:	3f 4f       	sbci	r19, 0xFF	; 255
   13408:	40 e0       	ldi	r20, 0x00	; 0
   1340a:	57 e0       	ldi	r21, 0x07	; 7
   1340c:	61 2f       	mov	r22, r17
   1340e:	84 e0       	ldi	r24, 0x04	; 4
   13410:	97 e0       	ldi	r25, 0x07	; 7
   13412:	0e 94 be 8e 	call	0x11d7c	; 0x11d7c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.132]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2917
    ///
    itoa(w_rom[i].assigned_ds2482, payload, 10);
   13416:	f7 01       	movw	r30, r14
   13418:	80 85       	ldd	r24, Z+8	; 0x08
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   1341a:	4a e0       	ldi	r20, 0x0A	; 10
   1341c:	be 01       	movw	r22, r28
   1341e:	6f 5f       	subi	r22, 0xFF	; 255
   13420:	7f 4f       	sbci	r23, 0xFF	; 255
   13422:	90 e0       	ldi	r25, 0x00	; 0
   13424:	0e 94 27 a3 	call	0x1464e	; 0x1464e <__itoa_ncheck>
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2918
    send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "1wire", i, "assigned", payload);
   13428:	9e 01       	movw	r18, r28
   1342a:	2f 5f       	subi	r18, 0xFF	; 255
   1342c:	3f 4f       	sbci	r19, 0xFF	; 255
   1342e:	4a e0       	ldi	r20, 0x0A	; 10
   13430:	57 e0       	ldi	r21, 0x07	; 7
   13432:	61 2f       	mov	r22, r17
   13434:	84 e0       	ldi	r24, 0x04	; 4
   13436:	97 e0       	ldi	r25, 0x07	; 7
   13438:	0e 94 be 8e 	call	0x11d7c	; 0x11d7c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.132]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2920
    ///
    itoa(w_rom[i].tds_idx, payload, 10);
   1343c:	d7 01       	movw	r26, r14
   1343e:	1a 96       	adiw	r26, 0x0a	; 10
   13440:	8c 91       	ld	r24, X
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   13442:	4a e0       	ldi	r20, 0x0A	; 10
   13444:	be 01       	movw	r22, r28
   13446:	6f 5f       	subi	r22, 0xFF	; 255
   13448:	7f 4f       	sbci	r23, 0xFF	; 255
   1344a:	90 e0       	ldi	r25, 0x00	; 0
   1344c:	0e 94 27 a3 	call	0x1464e	; 0x1464e <__itoa_ncheck>
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2921
    send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "1wire", i, "tds_idx", payload);
   13450:	9e 01       	movw	r18, r28
   13452:	2f 5f       	subi	r18, 0xFF	; 255
   13454:	3f 4f       	sbci	r19, 0xFF	; 255
   13456:	43 e1       	ldi	r20, 0x13	; 19
   13458:	57 e0       	ldi	r21, 0x07	; 7
   1345a:	61 2f       	mov	r22, r17
   1345c:	84 e0       	ldi	r24, 0x04	; 4
   1345e:	97 e0       	ldi	r25, 0x07	; 7
   13460:	0e 94 be 8e 	call	0x11d7c	; 0x11d7c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.132]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2912
  char hostname[10];
  char payload[64];
  char tmp1[4];
  itoa(Global_HWwirenum, payload, 10);
  send_mqtt_general_payload(&mqtt_client, "1wire/count", payload);
  for (uint8_t i = 0; i < Global_HWwirenum; i++)
   13464:	1f 5f       	subi	r17, 0xFF	; 255
   13466:	b9 cf       	rjmp	.-142    	; 0x133da <main+0x16a>
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3281
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
   13468:	90 62       	ori	r25, 0x20	; 32
   1346a:	78 cf       	rjmp	.-272    	; 0x1335c <main+0xec>
send_mqtt_status():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:318
void send_mqtt_status(PubSubClient *mqtt_client)
{
  char str_topic[64];
  char hostname[10];
  char payload[64];
  if (mqtt_client->connected())
   1346c:	82 e1       	ldi	r24, 0x12	; 18
   1346e:	9e e0       	ldi	r25, 0x0E	; 14
   13470:	0e 94 14 8c 	call	0x11828	; 0x11828 <PubSubClient::connected()>
   13474:	88 23       	and	r24, r24
   13476:	09 f4       	brne	.+2      	; 0x1347a <main+0x20a>
   13478:	ac c0       	rjmp	.+344    	; 0x135d2 <main+0x362>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:320
  {
    strcpy_P(str_topic, status_mqtt_send);
   1347a:	68 e6       	ldi	r22, 0x68	; 104
   1347c:	7f e2       	ldi	r23, 0x2F	; 47
   1347e:	ce 01       	movw	r24, r28
   13480:	8f 5b       	subi	r24, 0xBF	; 191
   13482:	9f 4f       	sbci	r25, 0xFF	; 255
   13484:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   13488:	4a e0       	ldi	r20, 0x0A	; 10
   1348a:	be 01       	movw	r22, r28
   1348c:	6f 5f       	subi	r22, 0xFF	; 255
   1348e:	7f 4f       	sbci	r23, 0xFF	; 255
   13490:	80 91 69 0b 	lds	r24, 0x0B69	; 0x800b69 <mqtt_send_message>
   13494:	90 91 6a 0b 	lds	r25, 0x0B6A	; 0x800b6a <mqtt_send_message+0x1>
   13498:	0e 94 27 a3 	call	0x1464e	; 0x1464e <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:322
    itoa(mqtt_send_message, payload, 10);
    mqtt_send_message = 0;
   1349c:	10 92 6a 0b 	sts	0x0B6A, r1	; 0x800b6a <mqtt_send_message+0x1>
   134a0:	10 92 69 0b 	sts	0x0B69, r1	; 0x800b69 <mqtt_send_message>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:323
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   134a4:	ae 01       	movw	r20, r28
   134a6:	4f 5f       	subi	r20, 0xFF	; 255
   134a8:	5f 4f       	sbci	r21, 0xFF	; 255
   134aa:	be 01       	movw	r22, r28
   134ac:	6f 5b       	subi	r22, 0xBF	; 191
   134ae:	7f 4f       	sbci	r23, 0xFF	; 255
   134b0:	82 e1       	ldi	r24, 0x12	; 18
   134b2:	9e e0       	ldi	r25, 0x0E	; 14
   134b4:	0e 94 0f 53 	call	0xa61e	; 0xa61e <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:325
    ///
    strcpy_P(str_topic, status_mqtt_error);
   134b8:	66 e5       	ldi	r22, 0x56	; 86
   134ba:	7f e2       	ldi	r23, 0x2F	; 47
   134bc:	ce 01       	movw	r24, r28
   134be:	8f 5b       	subi	r24, 0xBF	; 191
   134c0:	9f 4f       	sbci	r25, 0xFF	; 255
   134c2:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   134c6:	4a e0       	ldi	r20, 0x0A	; 10
   134c8:	be 01       	movw	r22, r28
   134ca:	6f 5f       	subi	r22, 0xFF	; 255
   134cc:	7f 4f       	sbci	r23, 0xFF	; 255
   134ce:	80 91 6b 0b 	lds	r24, 0x0B6B	; 0x800b6b <mqtt_error>
   134d2:	90 91 6c 0b 	lds	r25, 0x0B6C	; 0x800b6c <mqtt_error+0x1>
   134d6:	0e 94 27 a3 	call	0x1464e	; 0x1464e <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:327
    itoa(mqtt_error, payload, 10);
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   134da:	ae 01       	movw	r20, r28
   134dc:	4f 5f       	subi	r20, 0xFF	; 255
   134de:	5f 4f       	sbci	r21, 0xFF	; 255
   134e0:	be 01       	movw	r22, r28
   134e2:	6f 5b       	subi	r22, 0xBF	; 191
   134e4:	7f 4f       	sbci	r23, 0xFF	; 255
   134e6:	82 e1       	ldi	r24, 0x12	; 18
   134e8:	9e e0       	ldi	r25, 0x0E	; 14
   134ea:	0e 94 0f 53 	call	0xa61e	; 0xa61e <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:329
    ///
    strcpy_P(str_topic, status_mqtt_receive);
   134ee:	62 e4       	ldi	r22, 0x42	; 66
   134f0:	7f e2       	ldi	r23, 0x2F	; 47
   134f2:	ce 01       	movw	r24, r28
   134f4:	8f 5b       	subi	r24, 0xBF	; 191
   134f6:	9f 4f       	sbci	r25, 0xFF	; 255
   134f8:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   134fc:	4a e0       	ldi	r20, 0x0A	; 10
   134fe:	be 01       	movw	r22, r28
   13500:	6f 5f       	subi	r22, 0xFF	; 255
   13502:	7f 4f       	sbci	r23, 0xFF	; 255
   13504:	80 91 05 0a 	lds	r24, 0x0A05	; 0x800a05 <mqtt_receive_message>
   13508:	90 91 06 0a 	lds	r25, 0x0A06	; 0x800a06 <mqtt_receive_message+0x1>
   1350c:	0e 94 27 a3 	call	0x1464e	; 0x1464e <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:331
    itoa(mqtt_receive_message, payload, 10);
    mqtt_receive_message = 0;
   13510:	10 92 06 0a 	sts	0x0A06, r1	; 0x800a06 <mqtt_receive_message+0x1>
   13514:	10 92 05 0a 	sts	0x0A05, r1	; 0x800a05 <mqtt_receive_message>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:332
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   13518:	ae 01       	movw	r20, r28
   1351a:	4f 5f       	subi	r20, 0xFF	; 255
   1351c:	5f 4f       	sbci	r21, 0xFF	; 255
   1351e:	be 01       	movw	r22, r28
   13520:	6f 5b       	subi	r22, 0xBF	; 191
   13522:	7f 4f       	sbci	r23, 0xFF	; 255
   13524:	82 e1       	ldi	r24, 0x12	; 18
   13526:	9e e0       	ldi	r25, 0x0E	; 14
   13528:	0e 94 0f 53 	call	0xa61e	; 0xa61e <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:334
    ///
    strcpy_P(str_topic, status_mqtt_process);
   1352c:	6e e2       	ldi	r22, 0x2E	; 46
   1352e:	7f e2       	ldi	r23, 0x2F	; 47
   13530:	ce 01       	movw	r24, r28
   13532:	8f 5b       	subi	r24, 0xBF	; 191
   13534:	9f 4f       	sbci	r25, 0xFF	; 255
   13536:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   1353a:	4a e0       	ldi	r20, 0x0A	; 10
   1353c:	be 01       	movw	r22, r28
   1353e:	6f 5f       	subi	r22, 0xFF	; 255
   13540:	7f 4f       	sbci	r23, 0xFF	; 255
   13542:	80 91 03 0a 	lds	r24, 0x0A03	; 0x800a03 <mqtt_process_message>
   13546:	90 91 04 0a 	lds	r25, 0x0A04	; 0x800a04 <mqtt_process_message+0x1>
   1354a:	0e 94 27 a3 	call	0x1464e	; 0x1464e <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:336
    itoa(mqtt_process_message, payload, 10);
    mqtt_process_message = 0;
   1354e:	10 92 04 0a 	sts	0x0A04, r1	; 0x800a04 <mqtt_process_message+0x1>
   13552:	10 92 03 0a 	sts	0x0A03, r1	; 0x800a03 <mqtt_process_message>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:337
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   13556:	ae 01       	movw	r20, r28
   13558:	4f 5f       	subi	r20, 0xFF	; 255
   1355a:	5f 4f       	sbci	r21, 0xFF	; 255
   1355c:	be 01       	movw	r22, r28
   1355e:	6f 5b       	subi	r22, 0xBF	; 191
   13560:	7f 4f       	sbci	r23, 0xFF	; 255
   13562:	82 e1       	ldi	r24, 0x12	; 18
   13564:	9e e0       	ldi	r25, 0x0E	; 14
   13566:	0e 94 0f 53 	call	0xa61e	; 0xa61e <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:339

    payload[0] = 0;
   1356a:	19 82       	std	Y+1, r1	; 0x01
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:340
    createString(payload, '.', device.myIP, 4, 10);
   1356c:	0a e0       	ldi	r16, 0x0A	; 10
   1356e:	24 e0       	ldi	r18, 0x04	; 4
   13570:	45 e2       	ldi	r20, 0x25	; 37
   13572:	5c e0       	ldi	r21, 0x0C	; 12
   13574:	6e e2       	ldi	r22, 0x2E	; 46
   13576:	ce 01       	movw	r24, r28
   13578:	01 96       	adiw	r24, 0x01	; 1
   1357a:	0e 94 4b 8f 	call	0x11e96	; 0x11e96 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:341
    strcpy_P(str_topic, network_ip);
   1357e:	63 e2       	ldi	r22, 0x23	; 35
   13580:	7f e2       	ldi	r23, 0x2F	; 47
   13582:	ce 01       	movw	r24, r28
   13584:	8f 5b       	subi	r24, 0xBF	; 191
   13586:	9f 4f       	sbci	r25, 0xFF	; 255
   13588:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:342
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   1358c:	ae 01       	movw	r20, r28
   1358e:	4f 5f       	subi	r20, 0xFF	; 255
   13590:	5f 4f       	sbci	r21, 0xFF	; 255
   13592:	be 01       	movw	r22, r28
   13594:	6f 5b       	subi	r22, 0xBF	; 191
   13596:	7f 4f       	sbci	r23, 0xFF	; 255
   13598:	82 e1       	ldi	r24, 0x12	; 18
   1359a:	9e e0       	ldi	r25, 0x0E	; 14
   1359c:	0e 94 0f 53 	call	0xa61e	; 0xa61e <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:344

    strcpy_P(str_topic, status_know_devices);
   135a0:	6f e0       	ldi	r22, 0x0F	; 15
   135a2:	7f e2       	ldi	r23, 0x2F	; 47
   135a4:	ce 01       	movw	r24, r28
   135a6:	8f 5b       	subi	r24, 0xBF	; 191
   135a8:	9f 4f       	sbci	r25, 0xFF	; 255
   135aa:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   135ae:	4a e0       	ldi	r20, 0x0A	; 10
   135b0:	be 01       	movw	r22, r28
   135b2:	6f 5f       	subi	r22, 0xFF	; 255
   135b4:	7f 4f       	sbci	r23, 0xFF	; 255
   135b6:	90 e0       	ldi	r25, 0x00	; 0
   135b8:	80 e0       	ldi	r24, 0x00	; 0
   135ba:	0e 94 27 a3 	call	0x1464e	; 0x1464e <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:346
    itoa(count_know_mqtt, payload, 10);
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   135be:	ae 01       	movw	r20, r28
   135c0:	4f 5f       	subi	r20, 0xFF	; 255
   135c2:	5f 4f       	sbci	r21, 0xFF	; 255
   135c4:	be 01       	movw	r22, r28
   135c6:	6f 5b       	subi	r22, 0xBF	; 191
   135c8:	7f 4f       	sbci	r23, 0xFF	; 255
   135ca:	82 e1       	ldi	r24, 0x12	; 18
   135cc:	9e e0       	ldi	r25, 0x0E	; 14
   135ce:	0e 94 0f 53 	call	0xa61e	; 0xa61e <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:348
  }
  mqtt_error = 0;
   135d2:	10 92 6c 0b 	sts	0x0B6C, r1	; 0x800b6c <mqtt_error+0x1>
   135d6:	10 92 6b 0b 	sts	0x0B6B, r1	; 0x800b6b <mqtt_error>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2930
/// funkce pro odeslani zakladnich informaci o tomto zarizeni
void send_device_status(void)
{
  char str_topic[64];
  char payload[64];
  if (mqtt_client.connected())
   135da:	82 e1       	ldi	r24, 0x12	; 18
   135dc:	9e e0       	ldi	r25, 0x0E	; 14
   135de:	0e 94 14 8c 	call	0x11828	; 0x11828 <PubSubClient::connected()>
   135e2:	88 23       	and	r24, r24
   135e4:	09 f4       	brne	.+2      	; 0x135e8 <main+0x378>
   135e6:	6c c1       	rjmp	.+728    	; 0x138c0 <main+0x650>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2932
  {
    strcpy(str_topic, "status/uptime");
   135e8:	6b e1       	ldi	r22, 0x1B	; 27
   135ea:	77 e0       	ldi	r23, 0x07	; 7
   135ec:	ce 01       	movw	r24, r28
   135ee:	8f 5b       	subi	r24, 0xBF	; 191
   135f0:	9f 4f       	sbci	r25, 0xFF	; 255
   135f2:	0e 94 70 af 	call	0x15ee0	; 0x15ee0 <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   135f6:	4a e0       	ldi	r20, 0x0A	; 10
   135f8:	be 01       	movw	r22, r28
   135fa:	6f 5f       	subi	r22, 0xFF	; 255
   135fc:	7f 4f       	sbci	r23, 0xFF	; 255
   135fe:	80 91 d7 0a 	lds	r24, 0x0AD7	; 0x800ad7 <uptime>
   13602:	90 91 d8 0a 	lds	r25, 0x0AD8	; 0x800ad8 <uptime+0x1>
   13606:	0e 94 27 a3 	call	0x1464e	; 0x1464e <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2934
    itoa(uptime, payload, 10);
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   1360a:	ae 01       	movw	r20, r28
   1360c:	4f 5f       	subi	r20, 0xFF	; 255
   1360e:	5f 4f       	sbci	r21, 0xFF	; 255
   13610:	be 01       	movw	r22, r28
   13612:	6f 5b       	subi	r22, 0xBF	; 191
   13614:	7f 4f       	sbci	r23, 0xFF	; 255
   13616:	82 e1       	ldi	r24, 0x12	; 18
   13618:	9e e0       	ldi	r25, 0x0E	; 14
   1361a:	0e 94 0f 53 	call	0xa61e	; 0xa61e <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2936
    ///
    strcpy(str_topic, "status/brigthness");
   1361e:	69 e2       	ldi	r22, 0x29	; 41
   13620:	77 e0       	ldi	r23, 0x07	; 7
   13622:	ce 01       	movw	r24, r28
   13624:	8f 5b       	subi	r24, 0xBF	; 191
   13626:	9f 4f       	sbci	r25, 0xFF	; 255
   13628:	0e 94 70 af 	call	0x15ee0	; 0x15ee0 <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   1362c:	4a e0       	ldi	r20, 0x0A	; 10
   1362e:	be 01       	movw	r22, r28
   13630:	6f 5f       	subi	r22, 0xFF	; 255
   13632:	7f 4f       	sbci	r23, 0xFF	; 255
   13634:	80 91 d1 0a 	lds	r24, 0x0AD1	; 0x800ad1 <light_curr>
   13638:	90 91 d2 0a 	lds	r25, 0x0AD2	; 0x800ad2 <light_curr+0x1>
   1363c:	0e 94 27 a3 	call	0x1464e	; 0x1464e <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2938
    itoa(light_curr, payload, 10);
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   13640:	ae 01       	movw	r20, r28
   13642:	4f 5f       	subi	r20, 0xFF	; 255
   13644:	5f 4f       	sbci	r21, 0xFF	; 255
   13646:	be 01       	movw	r22, r28
   13648:	6f 5b       	subi	r22, 0xBF	; 191
   1364a:	7f 4f       	sbci	r23, 0xFF	; 255
   1364c:	82 e1       	ldi	r24, 0x12	; 18
   1364e:	9e e0       	ldi	r25, 0x0E	; 14
   13650:	0e 94 0f 53 	call	0xa61e	; 0xa61e <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2944
    ///
    //strcpy(str_topic, "status/light");
    //itoa(jas_disp, payload, 10);
    //send_mqtt_general_payload(&mqtt_client, str_topic, payload);
    ///
    strcpy(str_topic, "status/auto_brigthness");
   13654:	6b e3       	ldi	r22, 0x3B	; 59
   13656:	77 e0       	ldi	r23, 0x07	; 7
   13658:	ce 01       	movw	r24, r28
   1365a:	8f 5b       	subi	r24, 0xBF	; 191
   1365c:	9f 4f       	sbci	r25, 0xFF	; 255
   1365e:	0e 94 70 af 	call	0x15ee0	; 0x15ee0 <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   13662:	4a e0       	ldi	r20, 0x0A	; 10
   13664:	be 01       	movw	r22, r28
   13666:	6f 5f       	subi	r22, 0xFF	; 255
   13668:	7f 4f       	sbci	r23, 0xFF	; 255
   1366a:	90 e0       	ldi	r25, 0x00	; 0
   1366c:	80 e0       	ldi	r24, 0x00	; 0
   1366e:	0e 94 27 a3 	call	0x1464e	; 0x1464e <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2946
    itoa(auto_jas, payload, 10);
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   13672:	ae 01       	movw	r20, r28
   13674:	4f 5f       	subi	r20, 0xFF	; 255
   13676:	5f 4f       	sbci	r21, 0xFF	; 255
   13678:	be 01       	movw	r22, r28
   1367a:	6f 5b       	subi	r22, 0xBF	; 191
   1367c:	7f 4f       	sbci	r23, 0xFF	; 255
   1367e:	82 e1       	ldi	r24, 0x12	; 18
   13680:	9e e0       	ldi	r25, 0x0E	; 14
   13682:	0e 94 0f 53 	call	0xa61e	; 0xa61e <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2948
    ///
    strcpy(str_topic, "status/load_min");
   13686:	62 e5       	ldi	r22, 0x52	; 82
   13688:	77 e0       	ldi	r23, 0x07	; 7
   1368a:	ce 01       	movw	r24, r28
   1368c:	8f 5b       	subi	r24, 0xBF	; 191
   1368e:	9f 4f       	sbci	r25, 0xFF	; 255
   13690:	0e 94 70 af 	call	0x15ee0	; 0x15ee0 <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   13694:	4a e0       	ldi	r20, 0x0A	; 10
   13696:	be 01       	movw	r22, r28
   13698:	6f 5f       	subi	r22, 0xFF	; 255
   1369a:	7f 4f       	sbci	r23, 0xFF	; 255
   1369c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <load_min>
   136a0:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <load_min+0x1>
   136a4:	0e 94 27 a3 	call	0x1464e	; 0x1464e <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2950
    itoa(load_min, payload, 10);
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   136a8:	ae 01       	movw	r20, r28
   136aa:	4f 5f       	subi	r20, 0xFF	; 255
   136ac:	5f 4f       	sbci	r21, 0xFF	; 255
   136ae:	be 01       	movw	r22, r28
   136b0:	6f 5b       	subi	r22, 0xBF	; 191
   136b2:	7f 4f       	sbci	r23, 0xFF	; 255
   136b4:	82 e1       	ldi	r24, 0x12	; 18
   136b6:	9e e0       	ldi	r25, 0x0E	; 14
   136b8:	0e 94 0f 53 	call	0xa61e	; 0xa61e <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2952
    ///
    strcpy(str_topic, "status/load_max");
   136bc:	62 e6       	ldi	r22, 0x62	; 98
   136be:	77 e0       	ldi	r23, 0x07	; 7
   136c0:	ce 01       	movw	r24, r28
   136c2:	8f 5b       	subi	r24, 0xBF	; 191
   136c4:	9f 4f       	sbci	r25, 0xFF	; 255
   136c6:	0e 94 70 af 	call	0x15ee0	; 0x15ee0 <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   136ca:	4a e0       	ldi	r20, 0x0A	; 10
   136cc:	be 01       	movw	r22, r28
   136ce:	6f 5f       	subi	r22, 0xFF	; 255
   136d0:	7f 4f       	sbci	r23, 0xFF	; 255
   136d2:	80 91 bf 10 	lds	r24, 0x10BF	; 0x8010bf <load_max>
   136d6:	90 91 c0 10 	lds	r25, 0x10C0	; 0x8010c0 <load_max+0x1>
   136da:	0e 94 27 a3 	call	0x1464e	; 0x1464e <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2954
    itoa(load_max, payload, 10);
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   136de:	ae 01       	movw	r20, r28
   136e0:	4f 5f       	subi	r20, 0xFF	; 255
   136e2:	5f 4f       	sbci	r21, 0xFF	; 255
   136e4:	be 01       	movw	r22, r28
   136e6:	6f 5b       	subi	r22, 0xBF	; 191
   136e8:	7f 4f       	sbci	r23, 0xFF	; 255
   136ea:	82 e1       	ldi	r24, 0x12	; 18
   136ec:	9e e0       	ldi	r25, 0x0E	; 14
   136ee:	0e 94 0f 53 	call	0xa61e	; 0xa61e <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2956
    ///
    load_max = 0;
   136f2:	10 92 bf 10 	sts	0x10BF, r1	; 0x8010bf <load_max>
   136f6:	10 92 c0 10 	sts	0x10C0, r1	; 0x8010c0 <load_max+0x1>
   136fa:	10 92 c1 10 	sts	0x10C1, r1	; 0x8010c1 <load_max+0x2>
   136fe:	10 92 c2 10 	sts	0x10C2, r1	; 0x8010c2 <load_max+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2957
    load_min = 0xffffffff;
   13702:	2f ef       	ldi	r18, 0xFF	; 255
   13704:	3f ef       	ldi	r19, 0xFF	; 255
   13706:	a9 01       	movw	r20, r18
   13708:	20 93 06 02 	sts	0x0206, r18	; 0x800206 <load_min>
   1370c:	30 93 07 02 	sts	0x0207, r19	; 0x800207 <load_min+0x1>
   13710:	40 93 08 02 	sts	0x0208, r20	; 0x800208 <load_min+0x2>
   13714:	50 93 09 02 	sts	0x0209, r21	; 0x800209 <load_min+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2959
    ///
    strcpy(str_topic, "status/default_ring");
   13718:	62 e7       	ldi	r22, 0x72	; 114
   1371a:	77 e0       	ldi	r23, 0x07	; 7
   1371c:	ce 01       	movw	r24, r28
   1371e:	8f 5b       	subi	r24, 0xBF	; 191
   13720:	9f 4f       	sbci	r25, 0xFF	; 255
   13722:	0e 94 70 af 	call	0x15ee0	; 0x15ee0 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2960
    itoa(default_ring, payload, 10);
   13726:	80 91 0f 0a 	lds	r24, 0x0A0F	; 0x800a0f <default_ring>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   1372a:	4a e0       	ldi	r20, 0x0A	; 10
   1372c:	be 01       	movw	r22, r28
   1372e:	6f 5f       	subi	r22, 0xFF	; 255
   13730:	7f 4f       	sbci	r23, 0xFF	; 255
   13732:	90 e0       	ldi	r25, 0x00	; 0
   13734:	0e 94 27 a3 	call	0x1464e	; 0x1464e <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2961
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   13738:	ae 01       	movw	r20, r28
   1373a:	4f 5f       	subi	r20, 0xFF	; 255
   1373c:	5f 4f       	sbci	r21, 0xFF	; 255
   1373e:	be 01       	movw	r22, r28
   13740:	6f 5b       	subi	r22, 0xBF	; 191
   13742:	7f 4f       	sbci	r23, 0xFF	; 255
   13744:	82 e1       	ldi	r24, 0x12	; 18
   13746:	9e e0       	ldi	r25, 0x0E	; 14
   13748:	0e 94 0f 53 	call	0xa61e	; 0xa61e <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2963
    ///
    strcpy(str_topic, "status/selftest");
   1374c:	66 e8       	ldi	r22, 0x86	; 134
   1374e:	77 e0       	ldi	r23, 0x07	; 7
   13750:	ce 01       	movw	r24, r28
   13752:	8f 5b       	subi	r24, 0xBF	; 191
   13754:	9f 4f       	sbci	r25, 0xFF	; 255
   13756:	0e 94 70 af 	call	0x15ee0	; 0x15ee0 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2964
    itoa(selftest_data, payload, 10);
   1375a:	80 91 ce 0a 	lds	r24, 0x0ACE	; 0x800ace <selftest_data>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   1375e:	4a e0       	ldi	r20, 0x0A	; 10
   13760:	be 01       	movw	r22, r28
   13762:	6f 5f       	subi	r22, 0xFF	; 255
   13764:	7f 4f       	sbci	r23, 0xFF	; 255
   13766:	90 e0       	ldi	r25, 0x00	; 0
   13768:	0e 94 27 a3 	call	0x1464e	; 0x1464e <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2965
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   1376c:	ae 01       	movw	r20, r28
   1376e:	4f 5f       	subi	r20, 0xFF	; 255
   13770:	5f 4f       	sbci	r21, 0xFF	; 255
   13772:	be 01       	movw	r22, r28
   13774:	6f 5b       	subi	r22, 0xBF	; 191
   13776:	7f 4f       	sbci	r23, 0xFF	; 255
   13778:	82 e1       	ldi	r24, 0x12	; 18
   1377a:	9e e0       	ldi	r25, 0x0E	; 14
   1377c:	0e 94 0f 53 	call	0xa61e	; 0xa61e <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2967

    strcpy(str_topic, "status/rtds/count");
   13780:	66 e9       	ldi	r22, 0x96	; 150
   13782:	77 e0       	ldi	r23, 0x07	; 7
   13784:	ce 01       	movw	r24, r28
   13786:	8f 5b       	subi	r24, 0xBF	; 191
   13788:	9f 4f       	sbci	r25, 0xFF	; 255
   1378a:	0e 94 70 af 	call	0x15ee0	; 0x15ee0 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2968
    itoa(use_rtds, payload, 10);
   1378e:	80 91 d5 0a 	lds	r24, 0x0AD5	; 0x800ad5 <use_rtds>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   13792:	4a e0       	ldi	r20, 0x0A	; 10
   13794:	be 01       	movw	r22, r28
   13796:	6f 5f       	subi	r22, 0xFF	; 255
   13798:	7f 4f       	sbci	r23, 0xFF	; 255
   1379a:	90 e0       	ldi	r25, 0x00	; 0
   1379c:	0e 94 27 a3 	call	0x1464e	; 0x1464e <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2969
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   137a0:	ae 01       	movw	r20, r28
   137a2:	4f 5f       	subi	r20, 0xFF	; 255
   137a4:	5f 4f       	sbci	r21, 0xFF	; 255
   137a6:	be 01       	movw	r22, r28
   137a8:	6f 5b       	subi	r22, 0xBF	; 191
   137aa:	7f 4f       	sbci	r23, 0xFF	; 255
   137ac:	82 e1       	ldi	r24, 0x12	; 18
   137ae:	9e e0       	ldi	r25, 0x0E	; 14
   137b0:	0e 94 0f 53 	call	0xa61e	; 0xa61e <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
time_get_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3347
///
/////////////// Casove funkce ///////////////////////////////////////////////////////////////////
/// time_get_offset - ziska casovy offset, letni/zimni cas
uint8_t time_get_offset(void)
{
  return EEPROM.read(time_offset);
   137b4:	81 e0       	ldi	r24, 0x01	; 1
   137b6:	90 e0       	ldi	r25, 0x00	; 0
   137b8:	0e 94 49 8f 	call	0x11e92	; 0x11e92 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   137bc:	4a e0       	ldi	r20, 0x0A	; 10
   137be:	be 01       	movw	r22, r28
   137c0:	6f 5f       	subi	r22, 0xFF	; 255
   137c2:	7f 4f       	sbci	r23, 0xFF	; 255
   137c4:	90 e0       	ldi	r25, 0x00	; 0
   137c6:	0e 94 27 a3 	call	0x1464e	; 0x1464e <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2976
      strcpy(str_topic, "status/light/count");
      itoa(use_light_curr, payload, 10);
      send_mqtt_general_payload(&mqtt_client, str_topic, payload);
    */
    itoa(time_get_offset(), payload, 10);
    send_mqtt_general_payload(&mqtt_client, "time/ntp_offset", payload);
   137ca:	ae 01       	movw	r20, r28
   137cc:	4f 5f       	subi	r20, 0xFF	; 255
   137ce:	5f 4f       	sbci	r21, 0xFF	; 255
   137d0:	68 ea       	ldi	r22, 0xA8	; 168
   137d2:	77 e0       	ldi	r23, 0x07	; 7
   137d4:	82 e1       	ldi	r24, 0x12	; 18
   137d6:	9e e0       	ldi	r25, 0x0E	; 14
   137d8:	0e 94 0f 53 	call	0xa61e	; 0xa61e <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3325
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
   137dc:	80 91 0d 0a 	lds	r24, 0x0A0D	; 0x800a0d <tritri>
   137e0:	90 91 0e 0a 	lds	r25, 0x0A0E	; 0x800a0e <tritri+0x1>
   137e4:	25 e0       	ldi	r18, 0x05	; 5
   137e6:	28 9f       	mul	r18, r24
   137e8:	b0 01       	movw	r22, r0
   137ea:	29 9f       	mul	r18, r25
   137ec:	70 0d       	add	r23, r0
   137ee:	11 24       	eor	r1, r1
   137f0:	90 e0       	ldi	r25, 0x00	; 0
   137f2:	80 e0       	ldi	r24, 0x00	; 0
   137f4:	0e 94 6c ab 	call	0x156d8	; 0x156d8 <__floatunsisf>
   137f8:	20 e0       	ldi	r18, 0x00	; 0
   137fa:	30 e0       	ldi	r19, 0x00	; 0
   137fc:	4a e7       	ldi	r20, 0x7A	; 122
   137fe:	54 e4       	ldi	r21, 0x44	; 68
   13800:	0e 94 a1 ad 	call	0x15b42	; 0x15b42 <__divsf3>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2978
      send_mqtt_general_payload(&mqtt_client, str_topic, payload);
    */
    itoa(time_get_offset(), payload, 10);
    send_mqtt_general_payload(&mqtt_client, "time/ntp_offset", payload);
    ///
    dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, payload);
   13804:	8e 01       	movw	r16, r28
   13806:	0f 5f       	subi	r16, 0xFF	; 255
   13808:	1f 4f       	sbci	r17, 0xFF	; 255
   1380a:	22 e0       	ldi	r18, 0x02	; 2
   1380c:	44 e0       	ldi	r20, 0x04	; 4
   1380e:	0e 94 93 a1 	call	0x14326	; 0x14326 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2979
    send_mqtt_general_payload(&mqtt_client, "status/voltage/33V", payload);
   13812:	a8 01       	movw	r20, r16
   13814:	68 eb       	ldi	r22, 0xB8	; 184
   13816:	77 e0       	ldi	r23, 0x07	; 7
   13818:	82 e1       	ldi	r24, 0x12	; 18
   1381a:	9e e0       	ldi	r25, 0x0E	; 14
   1381c:	0e 94 0f 53 	call	0xa61e	; 0xa61e <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3325
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
   13820:	60 91 0b 0a 	lds	r22, 0x0A0B	; 0x800a0b <petnula>
   13824:	70 91 0c 0a 	lds	r23, 0x0A0C	; 0x800a0c <petnula+0x1>
   13828:	f3 e0       	ldi	r31, 0x03	; 3
   1382a:	66 0f       	add	r22, r22
   1382c:	77 1f       	adc	r23, r23
   1382e:	fa 95       	dec	r31
   13830:	e1 f7       	brne	.-8      	; 0x1382a <main+0x5ba>
   13832:	90 e0       	ldi	r25, 0x00	; 0
   13834:	80 e0       	ldi	r24, 0x00	; 0
   13836:	0e 94 6c ab 	call	0x156d8	; 0x156d8 <__floatunsisf>
   1383a:	20 e0       	ldi	r18, 0x00	; 0
   1383c:	30 e0       	ldi	r19, 0x00	; 0
   1383e:	4a e7       	ldi	r20, 0x7A	; 122
   13840:	54 e4       	ldi	r21, 0x44	; 68
   13842:	0e 94 a1 ad 	call	0x15b42	; 0x15b42 <__divsf3>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2981
    send_mqtt_general_payload(&mqtt_client, "time/ntp_offset", payload);
    ///
    dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, payload);
    send_mqtt_general_payload(&mqtt_client, "status/voltage/33V", payload);
    ///
    dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, payload);
   13846:	22 e0       	ldi	r18, 0x02	; 2
   13848:	44 e0       	ldi	r20, 0x04	; 4
   1384a:	0e 94 93 a1 	call	0x14326	; 0x14326 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2982
    send_mqtt_general_payload(&mqtt_client, "status/voltage/50V", payload);
   1384e:	a8 01       	movw	r20, r16
   13850:	6b ec       	ldi	r22, 0xCB	; 203
   13852:	77 e0       	ldi	r23, 0x07	; 7
   13854:	82 e1       	ldi	r24, 0x12	; 18
   13856:	9e e0       	ldi	r25, 0x0E	; 14
   13858:	0e 94 0f 53 	call	0xa61e	; 0xa61e <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3325
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
   1385c:	80 91 09 0a 	lds	r24, 0x0A09	; 0x800a09 <dvanact>
   13860:	90 91 0a 0a 	lds	r25, 0x0A0A	; 0x800a0a <dvanact+0x1>
   13864:	29 e3       	ldi	r18, 0x39	; 57
   13866:	28 9f       	mul	r18, r24
   13868:	b0 01       	movw	r22, r0
   1386a:	29 9f       	mul	r18, r25
   1386c:	70 0d       	add	r23, r0
   1386e:	11 24       	eor	r1, r1
   13870:	90 e0       	ldi	r25, 0x00	; 0
   13872:	80 e0       	ldi	r24, 0x00	; 0
   13874:	0e 94 6c ab 	call	0x156d8	; 0x156d8 <__floatunsisf>
   13878:	20 e0       	ldi	r18, 0x00	; 0
   1387a:	30 e0       	ldi	r19, 0x00	; 0
   1387c:	4a e7       	ldi	r20, 0x7A	; 122
   1387e:	54 e4       	ldi	r21, 0x44	; 68
   13880:	0e 94 a1 ad 	call	0x15b42	; 0x15b42 <__divsf3>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2984
    send_mqtt_general_payload(&mqtt_client, "status/voltage/33V", payload);
    ///
    dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, payload);
    send_mqtt_general_payload(&mqtt_client, "status/voltage/50V", payload);
    ///
    dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, payload);
   13884:	22 e0       	ldi	r18, 0x02	; 2
   13886:	44 e0       	ldi	r20, 0x04	; 4
   13888:	0e 94 93 a1 	call	0x14326	; 0x14326 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2985
    send_mqtt_general_payload(&mqtt_client, "status/voltage/12V", payload);
   1388c:	a8 01       	movw	r20, r16
   1388e:	6e ed       	ldi	r22, 0xDE	; 222
   13890:	77 e0       	ldi	r23, 0x07	; 7
   13892:	82 e1       	ldi	r24, 0x12	; 18
   13894:	9e e0       	ldi	r25, 0x0E	; 14
   13896:	0e 94 0f 53 	call	0xa61e	; 0xa61e <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
prepocet_proudu():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3340
*/
float prepocet_proudu(uint16_t vstup)
{
#define proud_constanta  470
  float proud = (vstup - proud_constanta) * 5 / 185;
  return vstup;
   1389a:	60 91 07 0a 	lds	r22, 0x0A07	; 0x800a07 <proud>
   1389e:	70 91 08 0a 	lds	r23, 0x0A08	; 0x800a08 <proud+0x1>
   138a2:	90 e0       	ldi	r25, 0x00	; 0
   138a4:	80 e0       	ldi	r24, 0x00	; 0
   138a6:	0e 94 6c ab 	call	0x156d8	; 0x156d8 <__floatunsisf>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2987
    send_mqtt_general_payload(&mqtt_client, "status/voltage/50V", payload);
    ///
    dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, payload);
    send_mqtt_general_payload(&mqtt_client, "status/voltage/12V", payload);
    ///
    dtostrf(prepocet_proudu(proud), 4, 2, payload);
   138aa:	22 e0       	ldi	r18, 0x02	; 2
   138ac:	44 e0       	ldi	r20, 0x04	; 4
   138ae:	0e 94 93 a1 	call	0x14326	; 0x14326 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2988
    send_mqtt_general_payload(&mqtt_client, "status/current/consume", payload);
   138b2:	a8 01       	movw	r20, r16
   138b4:	61 ef       	ldi	r22, 0xF1	; 241
   138b6:	77 e0       	ldi	r23, 0x07	; 7
   138b8:	82 e1       	ldi	r24, 0x12	; 18
   138ba:	9e e0       	ldi	r25, 0x0E	; 14
   138bc:	0e 94 0f 53 	call	0xa61e	; 0xa61e <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2912
  char hostname[10];
  char payload[64];
  char tmp1[4];
  itoa(Global_HWwirenum, payload, 10);
  send_mqtt_general_payload(&mqtt_client, "1wire/count", payload);
  for (uint8_t i = 0; i < Global_HWwirenum; i++)
   138c0:	0d e5       	ldi	r16, 0x5D	; 93
   138c2:	11 e0       	ldi	r17, 0x01	; 1
   138c4:	d1 2c       	mov	r13, r1
   138c6:	c1 2c       	mov	r12, r1
   138c8:	fc 2c       	mov	r15, r12
thermostat_ring_get_active():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:133
}
////////////////////////////////////////////////////////////////////////////////////////////////////////
/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_active(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active);
   138ca:	c8 01       	movw	r24, r16
   138cc:	0e 94 49 8f 	call	0x11e92	; 0x11e92 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3013
  uint8_t tdsid;
  //char tmp1[12];
  //device_get_name(hostname);
  for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
    //// odeslu pouze pokud je ring pripraveny
    if (thermostat_ring_get_active(idx) != RING_FREE)
   138d0:	8f 3f       	cpi	r24, 0xFF	; 255
   138d2:	09 f4       	brne	.+2      	; 0x138d6 <main+0x666>
   138d4:	33 c1       	rjmp	.+614    	; 0x13b3c <main+0x8cc>
   138d6:	38 01       	movw	r6, r16
   138d8:	31 e1       	ldi	r19, 0x11	; 17
   138da:	63 1a       	sub	r6, r19
   138dc:	71 08       	sbc	r7, r1
   138de:	ae 01       	movw	r20, r28
   138e0:	4f 5f       	subi	r20, 0xFF	; 255
   138e2:	5f 4f       	sbci	r21, 0xFF	; 255
   138e4:	5a 01       	movw	r10, r20
   138e6:	48 01       	movw	r8, r16
   138e8:	58 e0       	ldi	r21, 0x08	; 8
   138ea:	85 1a       	sub	r8, r21
   138ec:	91 08       	sbc	r9, r1
thermostat_ring_get_name():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:104
void thermostat_ring_get_name(uint8_t idx, char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i);
   138ee:	c3 01       	movw	r24, r6
   138f0:	0e 94 49 8f 	call	0x11e92	; 0x11e92 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:105
    name[i] = t;
   138f4:	d5 01       	movw	r26, r10
   138f6:	8d 93       	st	X+, r24
   138f8:	5d 01       	movw	r10, r26
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:106
    if (t == 0) break;
   138fa:	88 23       	and	r24, r24
   138fc:	31 f0       	breq	.+12     	; 0x1390a <main+0x69a>
   138fe:	bf ef       	ldi	r27, 0xFF	; 255
   13900:	6b 1a       	sub	r6, r27
   13902:	7b 0a       	sbc	r7, r27
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:102

/// ziska/nastavi nazev termostatu
void thermostat_ring_get_name(uint8_t idx, char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
   13904:	86 14       	cp	r8, r6
   13906:	97 04       	cpc	r9, r7
   13908:	91 f7       	brne	.-28     	; 0x138ee <main+0x67e>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3016
    {
      thermostat_ring_get_name(idx, payload);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "name", payload);
   1390a:	9e 01       	movw	r18, r28
   1390c:	2f 5f       	subi	r18, 0xFF	; 255
   1390e:	3f 4f       	sbci	r19, 0xFF	; 255
   13910:	48 ea       	ldi	r20, 0xA8	; 168
   13912:	53 e0       	ldi	r21, 0x03	; 3
   13914:	6f 2d       	mov	r22, r15
   13916:	81 e8       	ldi	r24, 0x81	; 129
   13918:	97 e0       	ldi	r25, 0x07	; 7
   1391a:	0e 94 be 8e 	call	0x11d7c	; 0x11d7c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.132]>
thermostat_ring_get_active():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:133
}
////////////////////////////////////////////////////////////////////////////////////////////////////////
/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_active(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active);
   1391e:	c8 01       	movw	r24, r16
   13920:	0e 94 49 8f 	call	0x11e92	; 0x11e92 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   13924:	4a e0       	ldi	r20, 0x0A	; 10
   13926:	be 01       	movw	r22, r28
   13928:	6f 5f       	subi	r22, 0xFF	; 255
   1392a:	7f 4f       	sbci	r23, 0xFF	; 255
   1392c:	90 e0       	ldi	r25, 0x00	; 0
   1392e:	0e 94 27 a3 	call	0x1464e	; 0x1464e <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3018
      itoa(thermostat_ring_get_active(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "active", payload);
   13932:	9e 01       	movw	r18, r28
   13934:	2f 5f       	subi	r18, 0xFF	; 255
   13936:	3f 4f       	sbci	r19, 0xFF	; 255
   13938:	42 eb       	ldi	r20, 0xB2	; 178
   1393a:	53 e0       	ldi	r21, 0x03	; 3
   1393c:	6f 2d       	mov	r22, r15
   1393e:	81 e8       	ldi	r24, 0x81	; 129
   13940:	97 e0       	ldi	r25, 0x07	; 7
   13942:	0e 94 be 8e 	call	0x11d7c	; 0x11d7c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.132]>
thermostat_ring_get_program_id():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:144


//// nastaveni programu k ringu termostatu
uint8_t thermostat_ring_get_program_id(uint8_t idx)
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
   13946:	c8 01       	movw	r24, r16
   13948:	02 97       	sbiw	r24, 0x02	; 2
   1394a:	0e 94 49 8f 	call	0x11e92	; 0x11e92 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   1394e:	4a e0       	ldi	r20, 0x0A	; 10
   13950:	be 01       	movw	r22, r28
   13952:	6f 5f       	subi	r22, 0xFF	; 255
   13954:	7f 4f       	sbci	r23, 0xFF	; 255
   13956:	90 e0       	ldi	r25, 0x00	; 0
   13958:	0e 94 27 a3 	call	0x1464e	; 0x1464e <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3020
      itoa(thermostat_ring_get_program_id(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "program", payload);
   1395c:	9e 01       	movw	r18, r28
   1395e:	2f 5f       	subi	r18, 0xFF	; 255
   13960:	3f 4f       	sbci	r19, 0xFF	; 255
   13962:	4b e4       	ldi	r20, 0x4B	; 75
   13964:	56 e0       	ldi	r21, 0x06	; 6
   13966:	6f 2d       	mov	r22, r15
   13968:	81 e8       	ldi	r24, 0x81	; 129
   1396a:	97 e0       	ldi	r25, 0x07	; 7
   1396c:	0e 94 be 8e 	call	0x11d7c	; 0x11d7c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.132]>
thermostat_ring_get_mezni():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:154
}
///////////////////////////////////////////////////////////////////////////////////////////////////////
///mezni rozhodovaci teplota
int thermostat_ring_get_mezni(uint8_t idx)
{
  return (EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni) << 8) + EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1);
   13970:	c8 01       	movw	r24, r16
   13972:	07 97       	sbiw	r24, 0x07	; 7
   13974:	0e 94 49 8f 	call	0x11e92	; 0x11e92 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
   13978:	e8 2e       	mov	r14, r24
   1397a:	c8 01       	movw	r24, r16
   1397c:	06 97       	sbiw	r24, 0x06	; 6
   1397e:	0e 94 49 8f 	call	0x11e92	; 0x11e92 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
   13982:	2e 2d       	mov	r18, r14
   13984:	30 e0       	ldi	r19, 0x00	; 0
   13986:	32 2f       	mov	r19, r18
   13988:	22 27       	eor	r18, r18
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   1398a:	4a e0       	ldi	r20, 0x0A	; 10
   1398c:	be 01       	movw	r22, r28
   1398e:	6f 5f       	subi	r22, 0xFF	; 255
   13990:	7f 4f       	sbci	r23, 0xFF	; 255
   13992:	82 0f       	add	r24, r18
   13994:	93 2f       	mov	r25, r19
   13996:	91 1d       	adc	r25, r1
   13998:	0e 94 27 a3 	call	0x1464e	; 0x1464e <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3022
      itoa(thermostat_ring_get_mezni(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "threshold", payload);
   1399c:	9e 01       	movw	r18, r28
   1399e:	2f 5f       	subi	r18, 0xFF	; 255
   139a0:	3f 4f       	sbci	r19, 0xFF	; 255
   139a2:	41 e4       	ldi	r20, 0x41	; 65
   139a4:	56 e0       	ldi	r21, 0x06	; 6
   139a6:	6f 2d       	mov	r22, r15
   139a8:	81 e8       	ldi	r24, 0x81	; 129
   139aa:	97 e0       	ldi	r25, 0x07	; 7
   139ac:	0e 94 be 8e 	call	0x11d7c	; 0x11d7c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.132]>
   139b0:	58 01       	movw	r10, r16
   139b2:	ef ef       	ldi	r30, 0xFF	; 255
   139b4:	ae 1a       	sub	r10, r30
   139b6:	be 0a       	sbc	r11, r30
thermostat_ring_get_mode():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:176
}
//////////////////////////////////////////////////////////////////////////////////////////////////////
//// nastaveni/ziska modu k ringu termostatu
uint8_t thermostat_ring_get_mode(uint8_t idx)
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_mode);
   139b8:	c5 01       	movw	r24, r10
   139ba:	0e 94 49 8f 	call	0x11e92	; 0x11e92 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   139be:	4a e0       	ldi	r20, 0x0A	; 10
   139c0:	be 01       	movw	r22, r28
   139c2:	6f 5f       	subi	r22, 0xFF	; 255
   139c4:	7f 4f       	sbci	r23, 0xFF	; 255
   139c6:	90 e0       	ldi	r25, 0x00	; 0
   139c8:	0e 94 27 a3 	call	0x1464e	; 0x1464e <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3024
      itoa(thermostat_ring_get_mode(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "mode", payload);
   139cc:	9e 01       	movw	r18, r28
   139ce:	2f 5f       	subi	r18, 0xFF	; 255
   139d0:	3f 4f       	sbci	r19, 0xFF	; 255
   139d2:	44 e6       	ldi	r20, 0x64	; 100
   139d4:	56 e0       	ldi	r21, 0x06	; 6
   139d6:	6f 2d       	mov	r22, r15
   139d8:	81 e8       	ldi	r24, 0x81	; 129
   139da:	97 e0       	ldi	r25, 0x07	; 7
   139dc:	0e 94 be 8e 	call	0x11d7c	; 0x11d7c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.132]>
thermostat_ring_get_mode():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:176
   139e0:	c5 01       	movw	r24, r10
   139e2:	0e 94 49 8f 	call	0x11e92	; 0x11e92 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
convert_mode_text():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3391
  return mode;
}

void convert_mode_text(uint8_t mode, char *str)
{
  if (mode == TERM_MODE_OFF)   strcpy(str, "off");
   139e6:	68 e0       	ldi	r22, 0x08	; 8
   139e8:	78 e0       	ldi	r23, 0x08	; 8
   139ea:	88 23       	and	r24, r24
   139ec:	a1 f0       	breq	.+40     	; 0x13a16 <main+0x7a6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3392
  if (mode == TERM_MODE_MAX)   strcpy(str, "heat");
   139ee:	67 e4       	ldi	r22, 0x47	; 71
   139f0:	75 e0       	ldi	r23, 0x05	; 5
   139f2:	81 30       	cpi	r24, 0x01	; 1
   139f4:	81 f0       	breq	.+32     	; 0x13a16 <main+0x7a6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3393
  if (mode == TERM_MODE_MAN_HEAT)   strcpy(str, "manual");
   139f6:	6c e4       	ldi	r22, 0x4C	; 76
   139f8:	75 e0       	ldi	r23, 0x05	; 5
   139fa:	83 30       	cpi	r24, 0x03	; 3
   139fc:	61 f0       	breq	.+24     	; 0x13a16 <main+0x7a6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3394
  if (mode == TERM_MODE_PROG)   strcpy(str, "auto");
   139fe:	63 e5       	ldi	r22, 0x53	; 83
   13a00:	75 e0       	ldi	r23, 0x05	; 5
   13a02:	82 30       	cpi	r24, 0x02	; 2
   13a04:	41 f0       	breq	.+16     	; 0x13a16 <main+0x7a6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3395
  if (mode == TERM_MODE_CLIMATE_MAX)   strcpy(str, "cool");
   13a06:	68 e5       	ldi	r22, 0x58	; 88
   13a08:	75 e0       	ldi	r23, 0x05	; 5
   13a0a:	84 30       	cpi	r24, 0x04	; 4
   13a0c:	21 f0       	breq	.+8      	; 0x13a16 <main+0x7a6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3396
  if (mode == TERM_MODE_FAN)   strcpy(str, "fan_only");
   13a0e:	86 30       	cpi	r24, 0x06	; 6
   13a10:	31 f4       	brne	.+12     	; 0x13a1e <main+0x7ae>
   13a12:	6d e5       	ldi	r22, 0x5D	; 93
   13a14:	75 e0       	ldi	r23, 0x05	; 5
   13a16:	ce 01       	movw	r24, r28
   13a18:	01 96       	adiw	r24, 0x01	; 1
   13a1a:	0e 94 70 af 	call	0x15ee0	; 0x15ee0 <strcpy>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3026
      itoa(thermostat_ring_get_mezni(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "threshold", payload);
      itoa(thermostat_ring_get_mode(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "mode", payload);
      convert_mode_text(thermostat_ring_get_mode(idx), payload);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "text_mode", payload);
   13a1e:	9e 01       	movw	r18, r28
   13a20:	2f 5f       	subi	r18, 0xFF	; 255
   13a22:	3f 4f       	sbci	r19, 0xFF	; 255
   13a24:	4f e5       	ldi	r20, 0x5F	; 95
   13a26:	56 e0       	ldi	r21, 0x06	; 6
   13a28:	6f 2d       	mov	r22, r15
   13a2a:	81 e8       	ldi	r24, 0x81	; 129
   13a2c:	97 e0       	ldi	r25, 0x07	; 7
   13a2e:	0e 94 be 8e 	call	0x11d7c	; 0x11d7c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.132]>
thermostat_ring_get_state():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:19
uint8_t therm_power[MAX_THERMOSTAT];

/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_state(uint8_t idx)
{
  return therm_stav[idx];
   13a32:	f6 01       	movw	r30, r12
   13a34:	e0 5f       	subi	r30, 0xF0	; 240
   13a36:	f5 4f       	sbci	r31, 0xF5	; 245
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3027
      itoa(thermostat_ring_get_state(idx), payload, 10);
   13a38:	80 81       	ld	r24, Z
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   13a3a:	4a e0       	ldi	r20, 0x0A	; 10
   13a3c:	be 01       	movw	r22, r28
   13a3e:	6f 5f       	subi	r22, 0xFF	; 255
   13a40:	7f 4f       	sbci	r23, 0xFF	; 255
   13a42:	90 e0       	ldi	r25, 0x00	; 0
   13a44:	0e 94 27 a3 	call	0x1464e	; 0x1464e <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3028
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "status", payload);
   13a48:	9e 01       	movw	r18, r28
   13a4a:	2f 5f       	subi	r18, 0xFF	; 255
   13a4c:	3f 4f       	sbci	r19, 0xFF	; 255
   13a4e:	4c e0       	ldi	r20, 0x0C	; 12
   13a50:	58 e0       	ldi	r21, 0x08	; 8
   13a52:	6f 2d       	mov	r22, r15
   13a54:	81 e8       	ldi	r24, 0x81	; 129
   13a56:	97 e0       	ldi	r25, 0x07	; 7
   13a58:	0e 94 be 8e 	call	0x11d7c	; 0x11d7c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.132]>
thermostat_ring_get_asociate_tds():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:166


/// ziska/nastavi cislo tds k ringu termostatu
uint8_t thermostat_ring_get_asociate_tds(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
   13a5c:	c8 01       	movw	r24, r16
   13a5e:	01 97       	sbiw	r24, 0x01	; 1
   13a60:	0e 94 49 8f 	call	0x11e92	; 0x11e92 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
   13a64:	e8 2e       	mov	r14, r24
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3030
      tdsid = thermostat_ring_get_asociate_tds(idx);
      if (tdsid >= TDS_MEMORY_MAP_TDS && tdsid < TDS_MEMORY_MAP_RTDS)
   13a66:	ff e0       	ldi	r31, 0x0F	; 15
   13a68:	f8 17       	cp	r31, r24
   13a6a:	88 f0       	brcs	.+34     	; 0x13a8e <main+0x81e>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   13a6c:	4a e0       	ldi	r20, 0x0A	; 10
   13a6e:	be 01       	movw	r22, r28
   13a70:	6f 5f       	subi	r22, 0xFF	; 255
   13a72:	7f 4f       	sbci	r23, 0xFF	; 255
   13a74:	90 e0       	ldi	r25, 0x00	; 0
   13a76:	0e 94 27 a3 	call	0x1464e	; 0x1464e <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3033
      {
        itoa(tdsid, payload, 10);
        send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "tds", payload);
   13a7a:	9e 01       	movw	r18, r28
   13a7c:	2f 5f       	subi	r18, 0xFF	; 255
   13a7e:	3f 4f       	sbci	r19, 0xFF	; 255
   13a80:	4e ea       	ldi	r20, 0xAE	; 174
   13a82:	53 e0       	ldi	r21, 0x03	; 3
   13a84:	6f 2d       	mov	r22, r15
   13a86:	81 e8       	ldi	r24, 0x81	; 129
   13a88:	97 e0       	ldi	r25, 0x07	; 7
   13a8a:	0e 94 be 8e 	call	0x11d7c	; 0x11d7c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.132]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3035
      }
      if (tdsid >= TDS_MEMORY_MAP_RTDS && tdsid < 127)
   13a8e:	80 ef       	ldi	r24, 0xF0	; 240
   13a90:	8e 0d       	add	r24, r14
   13a92:	8f 36       	cpi	r24, 0x6F	; 111
   13a94:	a0 f4       	brcc	.+40     	; 0x13abe <main+0x84e>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   13a96:	4a e0       	ldi	r20, 0x0A	; 10
   13a98:	be 01       	movw	r22, r28
   13a9a:	6f 5f       	subi	r22, 0xFF	; 255
   13a9c:	7f 4f       	sbci	r23, 0xFF	; 255
   13a9e:	2e 2d       	mov	r18, r14
   13aa0:	20 51       	subi	r18, 0x10	; 16
   13aa2:	33 0b       	sbc	r19, r19
   13aa4:	c9 01       	movw	r24, r18
   13aa6:	0e 94 27 a3 	call	0x1464e	; 0x1464e <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3038
      {
        itoa(tdsid - TDS_MEMORY_MAP_RTDS, payload, 10);
        send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "rtds", payload);
   13aaa:	9e 01       	movw	r18, r28
   13aac:	2f 5f       	subi	r18, 0xFF	; 255
   13aae:	3f 4f       	sbci	r19, 0xFF	; 255
   13ab0:	4d ea       	ldi	r20, 0xAD	; 173
   13ab2:	53 e0       	ldi	r21, 0x03	; 3
   13ab4:	6f 2d       	mov	r22, r15
   13ab6:	81 e8       	ldi	r24, 0x81	; 129
   13ab8:	97 e0       	ldi	r25, 0x07	; 7
   13aba:	0e 94 be 8e 	call	0x11d7c	; 0x11d7c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.132]>
thermostat_ring_get_output():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:123
}

/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_output(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
   13abe:	c8 01       	movw	r24, r16
   13ac0:	02 96       	adiw	r24, 0x02	; 2
   13ac2:	0e 94 49 8f 	call	0x11e92	; 0x11e92 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   13ac6:	4a e0       	ldi	r20, 0x0A	; 10
   13ac8:	be 01       	movw	r22, r28
   13aca:	6f 5f       	subi	r22, 0xFF	; 255
   13acc:	7f 4f       	sbci	r23, 0xFF	; 255
   13ace:	90 e0       	ldi	r25, 0x00	; 0
   13ad0:	0e 94 27 a3 	call	0x1464e	; 0x1464e <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3041
      }
      itoa(thermostat_ring_get_output(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "output", payload);
   13ad4:	9e 01       	movw	r18, r28
   13ad6:	2f 5f       	subi	r18, 0xFF	; 255
   13ad8:	3f 4f       	sbci	r19, 0xFF	; 255
   13ada:	49 e6       	ldi	r20, 0x69	; 105
   13adc:	56 e0       	ldi	r21, 0x06	; 6
   13ade:	6f 2d       	mov	r22, r15
   13ae0:	81 e8       	ldi	r24, 0x81	; 129
   13ae2:	97 e0       	ldi	r25, 0x07	; 7
   13ae4:	0e 94 be 8e 	call	0x11d7c	; 0x11d7c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.132]>
thermostat_ring_get_status_data():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:193
}
//////////////////////////////////////
//// nastaveni/ziska modu k ringu termostatu
uint8_t thermostat_ring_get_status_data(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites);
   13ae8:	c8 01       	movw	r24, r16
   13aea:	05 97       	sbiw	r24, 0x05	; 5
   13aec:	0e 94 49 8f 	call	0x11e92	; 0x11e92 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   13af0:	4a e0       	ldi	r20, 0x0A	; 10
   13af2:	be 01       	movw	r22, r28
   13af4:	6f 5f       	subi	r22, 0xFF	; 255
   13af6:	7f 4f       	sbci	r23, 0xFF	; 255
   13af8:	90 e0       	ldi	r25, 0x00	; 0
   13afa:	0e 94 27 a3 	call	0x1464e	; 0x1464e <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3044

      itoa(thermostat_ring_get_status_data(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "status_bites", payload);
   13afe:	9e 01       	movw	r18, r28
   13b00:	2f 5f       	subi	r18, 0xFF	; 255
   13b02:	3f 4f       	sbci	r19, 0xFF	; 255
   13b04:	43 e1       	ldi	r20, 0x13	; 19
   13b06:	58 e0       	ldi	r21, 0x08	; 8
   13b08:	6f 2d       	mov	r22, r15
   13b0a:	81 e8       	ldi	r24, 0x81	; 129
   13b0c:	97 e0       	ldi	r25, 0x07	; 7
   13b0e:	0e 94 be 8e 	call	0x11d7c	; 0x11d7c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.132]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3046

      itoa(last_output_update[idx], payload, 10);
   13b12:	f6 01       	movw	r30, r12
   13b14:	eb 5e       	subi	r30, 0xEB	; 235
   13b16:	f5 4f       	sbci	r31, 0xF5	; 245
   13b18:	80 81       	ld	r24, Z
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   13b1a:	4a e0       	ldi	r20, 0x0A	; 10
   13b1c:	be 01       	movw	r22, r28
   13b1e:	6f 5f       	subi	r22, 0xFF	; 255
   13b20:	7f 4f       	sbci	r23, 0xFF	; 255
   13b22:	90 e0       	ldi	r25, 0x00	; 0
   13b24:	0e 94 27 a3 	call	0x1464e	; 0x1464e <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3047
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "output_update", payload);
   13b28:	9e 01       	movw	r18, r28
   13b2a:	2f 5f       	subi	r18, 0xFF	; 255
   13b2c:	3f 4f       	sbci	r19, 0xFF	; 255
   13b2e:	40 e2       	ldi	r20, 0x20	; 32
   13b30:	58 e0       	ldi	r21, 0x08	; 8
   13b32:	6f 2d       	mov	r22, r15
   13b34:	81 e8       	ldi	r24, 0x81	; 129
   13b36:	97 e0       	ldi	r25, 0x07	; 7
   13b38:	0e 94 be 8e 	call	0x11d7c	; 0x11d7c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.132]>
   13b3c:	3f ef       	ldi	r19, 0xFF	; 255
   13b3e:	c3 1a       	sub	r12, r19
   13b40:	d3 0a       	sbc	r13, r19
   13b42:	0f 5d       	subi	r16, 0xDF	; 223
   13b44:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3011
  //char hostname[10];
  char payload[64];
  uint8_t tdsid;
  //char tmp1[12];
  //device_get_name(hostname);
  for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
   13b46:	45 e0       	ldi	r20, 0x05	; 5
   13b48:	c4 16       	cp	r12, r20
   13b4a:	d1 04       	cpc	r13, r1
   13b4c:	09 f0       	breq	.+2      	; 0x13b50 <main+0x8e0>
   13b4e:	bc ce       	rjmp	.-648    	; 0x138c8 <main+0x658>
   13b50:	6a e1       	ldi	r22, 0x1A	; 26
   13b52:	e6 2e       	mov	r14, r22
   13b54:	6a e0       	ldi	r22, 0x0A	; 10
   13b56:	f6 2e       	mov	r15, r22
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3066
  struct_DDS18s20 tds;
  char payload[64];
  char tmp1[4];
  int tt;
  long avg = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
   13b58:	10 e0       	ldi	r17, 0x00	; 0
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3070
    if (get_tds18s20(id, &tds) == 1)
      if (tds.used == 1) if (status_tds18s20[id].online == True)
        {
          tt = status_tds18s20[id].temp / 10;
   13b5a:	7a e0       	ldi	r23, 0x0A	; 10
   13b5c:	c7 2e       	mov	r12, r23
   13b5e:	d1 2c       	mov	r13, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3067
  char payload[64];
  char tmp1[4];
  int tt;
  long avg = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
    if (get_tds18s20(id, &tds) == 1)
   13b60:	be 01       	movw	r22, r28
   13b62:	6f 5b       	subi	r22, 0xBF	; 191
   13b64:	7f 4f       	sbci	r23, 0xFF	; 255
   13b66:	81 2f       	mov	r24, r17
   13b68:	0e 94 32 4e 	call	0x9c64	; 0x9c64 <get_tds18s20(unsigned char, struct_DDS18s20*)>
   13b6c:	81 30       	cpi	r24, 0x01	; 1
   13b6e:	09 f0       	breq	.+2      	; 0x13b72 <main+0x902>
   13b70:	d2 c0       	rjmp	.+420    	; 0x13d16 <main+0xaa6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3068
      if (tds.used == 1) if (status_tds18s20[id].online == True)
   13b72:	22 96       	adiw	r28, 0x02	; 2
   13b74:	8f ad       	ldd	r24, Y+63	; 0x3f
   13b76:	22 97       	sbiw	r28, 0x02	; 2
   13b78:	81 30       	cpi	r24, 0x01	; 1
   13b7a:	09 f0       	breq	.+2      	; 0x13b7e <main+0x90e>
   13b7c:	cc c0       	rjmp	.+408    	; 0x13d16 <main+0xaa6>
   13b7e:	d7 01       	movw	r26, r14
   13b80:	5b 96       	adiw	r26, 0x1b	; 27
   13b82:	8c 91       	ld	r24, X
   13b84:	5b 97       	sbiw	r26, 0x1b	; 27
   13b86:	81 30       	cpi	r24, 0x01	; 1
   13b88:	09 f0       	breq	.+2      	; 0x13b8c <main+0x91c>
   13b8a:	c5 c0       	rjmp	.+394    	; 0x13d16 <main+0xaa6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3070
        {
          tt = status_tds18s20[id].temp / 10;
   13b8c:	15 96       	adiw	r26, 0x05	; 5
   13b8e:	8d 91       	ld	r24, X+
   13b90:	9c 91       	ld	r25, X
   13b92:	b6 01       	movw	r22, r12
   13b94:	0e 94 c5 ac 	call	0x1598a	; 0x1598a <__divmodhi4>
   13b98:	cb 01       	movw	r24, r22
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   13b9a:	4a e0       	ldi	r20, 0x0A	; 10
   13b9c:	be 01       	movw	r22, r28
   13b9e:	6f 5f       	subi	r22, 0xFF	; 255
   13ba0:	7f 4f       	sbci	r23, 0xFF	; 255
   13ba2:	0e 94 27 a3 	call	0x1464e	; 0x1464e <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3072
          itoa(tt, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "temp", payload);
   13ba6:	9e 01       	movw	r18, r28
   13ba8:	2f 5f       	subi	r18, 0xFF	; 255
   13baa:	3f 4f       	sbci	r19, 0xFF	; 255
   13bac:	49 eb       	ldi	r20, 0xB9	; 185
   13bae:	53 e0       	ldi	r21, 0x03	; 3
   13bb0:	61 2f       	mov	r22, r17
   13bb2:	8e ea       	ldi	r24, 0xAE	; 174
   13bb4:	93 e0       	ldi	r25, 0x03	; 3
   13bb6:	0e 94 be 8e 	call	0x11d7c	; 0x11d7c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.132]>
   13bba:	30 e0       	ldi	r19, 0x00	; 0
   13bbc:	20 e0       	ldi	r18, 0x00	; 0
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3073
          avg = 0;
   13bbe:	60 e0       	ldi	r22, 0x00	; 0
   13bc0:	70 e0       	ldi	r23, 0x00	; 0
   13bc2:	cb 01       	movw	r24, r22
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3074
          for (uint8_t c = 0; c < MAX_AVG_TEMP; c++) avg = avg + status_tds18s20[id].average_temp[c];
   13bc4:	f9 01       	movw	r30, r18
   13bc6:	ee 0f       	add	r30, r30
   13bc8:	ff 1f       	adc	r31, r31
   13bca:	ee 0d       	add	r30, r14
   13bcc:	ff 1d       	adc	r31, r15
   13bce:	87 80       	ldd	r8, Z+7	; 0x07
   13bd0:	90 84       	ldd	r9, Z+8	; 0x08
   13bd2:	09 2c       	mov	r0, r9
   13bd4:	00 0c       	add	r0, r0
   13bd6:	aa 08       	sbc	r10, r10
   13bd8:	bb 08       	sbc	r11, r11
   13bda:	68 0d       	add	r22, r8
   13bdc:	79 1d       	adc	r23, r9
   13bde:	8a 1d       	adc	r24, r10
   13be0:	9b 1d       	adc	r25, r11
   13be2:	2f 5f       	subi	r18, 0xFF	; 255
   13be4:	3f 4f       	sbci	r19, 0xFF	; 255
   13be6:	2a 30       	cpi	r18, 0x0A	; 10
   13be8:	31 05       	cpc	r19, r1
   13bea:	61 f7       	brne	.-40     	; 0x13bc4 <main+0x954>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3076
          avg = avg / MAX_AVG_TEMP;
          avg = avg / 10;
   13bec:	24 e6       	ldi	r18, 0x64	; 100
   13bee:	30 e0       	ldi	r19, 0x00	; 0
   13bf0:	40 e0       	ldi	r20, 0x00	; 0
   13bf2:	50 e0       	ldi	r21, 0x00	; 0
   13bf4:	0e 94 fb ac 	call	0x159f6	; 0x159f6 <__divmodsi4>
   13bf8:	c9 01       	movw	r24, r18
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   13bfa:	4a e0       	ldi	r20, 0x0A	; 10
   13bfc:	be 01       	movw	r22, r28
   13bfe:	6f 5f       	subi	r22, 0xFF	; 255
   13c00:	7f 4f       	sbci	r23, 0xFF	; 255
   13c02:	0e 94 27 a3 	call	0x1464e	; 0x1464e <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3078
          itoa(avg, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "temp_avg", payload);
   13c06:	9e 01       	movw	r18, r28
   13c08:	2f 5f       	subi	r18, 0xFF	; 255
   13c0a:	3f 4f       	sbci	r19, 0xFF	; 255
   13c0c:	4e e2       	ldi	r20, 0x2E	; 46
   13c0e:	58 e0       	ldi	r21, 0x08	; 8
   13c10:	61 2f       	mov	r22, r17
   13c12:	8e ea       	ldi	r24, 0xAE	; 174
   13c14:	93 e0       	ldi	r25, 0x03	; 3
   13c16:	0e 94 be 8e 	call	0x11d7c	; 0x11d7c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.132]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3080

          strcpy(payload, tds.name);
   13c1a:	cc 57       	subi	r28, 0x7C	; 124
   13c1c:	df 4f       	sbci	r29, 0xFF	; 255
   13c1e:	68 81       	ld	r22, Y
   13c20:	79 81       	ldd	r23, Y+1	; 0x01
   13c22:	c4 58       	subi	r28, 0x84	; 132
   13c24:	d0 40       	sbci	r29, 0x00	; 0
   13c26:	ce 01       	movw	r24, r28
   13c28:	01 96       	adiw	r24, 0x01	; 1
   13c2a:	0e 94 70 af 	call	0x15ee0	; 0x15ee0 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3081
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "name", payload);
   13c2e:	9e 01       	movw	r18, r28
   13c30:	2f 5f       	subi	r18, 0xFF	; 255
   13c32:	3f 4f       	sbci	r19, 0xFF	; 255
   13c34:	48 ea       	ldi	r20, 0xA8	; 168
   13c36:	53 e0       	ldi	r21, 0x03	; 3
   13c38:	61 2f       	mov	r22, r17
   13c3a:	8e ea       	ldi	r24, 0xAE	; 174
   13c3c:	93 e0       	ldi	r25, 0x03	; 3
   13c3e:	0e 94 be 8e 	call	0x11d7c	; 0x11d7c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.132]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   13c42:	4a e0       	ldi	r20, 0x0A	; 10
   13c44:	be 01       	movw	r22, r28
   13c46:	6f 5f       	subi	r22, 0xFF	; 255
   13c48:	7f 4f       	sbci	r23, 0xFF	; 255
   13c4a:	2d 96       	adiw	r28, 0x0d	; 13
   13c4c:	8e ad       	ldd	r24, Y+62	; 0x3e
   13c4e:	9f ad       	ldd	r25, Y+63	; 0x3f
   13c50:	2d 97       	sbiw	r28, 0x0d	; 13
   13c52:	0e 94 27 a3 	call	0x1464e	; 0x1464e <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3084
          tt = tds.offset;
          itoa(tt, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "offset", payload);
   13c56:	9e 01       	movw	r18, r28
   13c58:	2f 5f       	subi	r18, 0xFF	; 255
   13c5a:	3f 4f       	sbci	r19, 0xFF	; 255
   13c5c:	41 eb       	ldi	r20, 0xB1	; 177
   13c5e:	57 e0       	ldi	r21, 0x07	; 7
   13c60:	61 2f       	mov	r22, r17
   13c62:	8e ea       	ldi	r24, 0xAE	; 174
   13c64:	93 e0       	ldi	r25, 0x03	; 3
   13c66:	0e 94 be 8e 	call	0x11d7c	; 0x11d7c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.132]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3085
          tt = status_tds18s20[id].online;
   13c6a:	f7 01       	movw	r30, r14
   13c6c:	83 8d       	ldd	r24, Z+27	; 0x1b
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   13c6e:	4a e0       	ldi	r20, 0x0A	; 10
   13c70:	be 01       	movw	r22, r28
   13c72:	6f 5f       	subi	r22, 0xFF	; 255
   13c74:	7f 4f       	sbci	r23, 0xFF	; 255
   13c76:	90 e0       	ldi	r25, 0x00	; 0
   13c78:	0e 94 27 a3 	call	0x1464e	; 0x1464e <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3087
          itoa(tt, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "online", payload);
   13c7c:	9e 01       	movw	r18, r28
   13c7e:	2f 5f       	subi	r18, 0xFF	; 255
   13c80:	3f 4f       	sbci	r19, 0xFF	; 255
   13c82:	47 e3       	ldi	r20, 0x37	; 55
   13c84:	58 e0       	ldi	r21, 0x08	; 8
   13c86:	61 2f       	mov	r22, r17
   13c88:	8e ea       	ldi	r24, 0xAE	; 174
   13c8a:	93 e0       	ldi	r25, 0x03	; 3
   13c8c:	0e 94 be 8e 	call	0x11d7c	; 0x11d7c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.132]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3088
          payload[0] = 0;
   13c90:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3089
          createString(payload, ':', tds.rom, 8, 16);
   13c92:	00 e1       	ldi	r16, 0x10	; 16
   13c94:	28 e0       	ldi	r18, 0x08	; 8
   13c96:	ca 57       	subi	r28, 0x7A	; 122
   13c98:	df 4f       	sbci	r29, 0xFF	; 255
   13c9a:	48 81       	ld	r20, Y
   13c9c:	59 81       	ldd	r21, Y+1	; 0x01
   13c9e:	c6 58       	subi	r28, 0x86	; 134
   13ca0:	d0 40       	sbci	r29, 0x00	; 0
   13ca2:	6a e3       	ldi	r22, 0x3A	; 58
   13ca4:	ce 01       	movw	r24, r28
   13ca6:	01 96       	adiw	r24, 0x01	; 1
   13ca8:	0e 94 4b 8f 	call	0x11e96	; 0x11e96 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3090
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "rom", payload);
   13cac:	9e 01       	movw	r18, r28
   13cae:	2f 5f       	subi	r18, 0xFF	; 255
   13cb0:	3f 4f       	sbci	r19, 0xFF	; 255
   13cb2:	40 e0       	ldi	r20, 0x00	; 0
   13cb4:	57 e0       	ldi	r21, 0x07	; 7
   13cb6:	61 2f       	mov	r22, r17
   13cb8:	8e ea       	ldi	r24, 0xAE	; 174
   13cba:	93 e0       	ldi	r25, 0x03	; 3
   13cbc:	0e 94 be 8e 	call	0x11d7c	; 0x11d7c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.132]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3091
          tt = tds.period;
   13cc0:	66 96       	adiw	r28, 0x16	; 22
   13cc2:	8f ad       	ldd	r24, Y+63	; 0x3f
   13cc4:	66 97       	sbiw	r28, 0x16	; 22
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   13cc6:	4a e0       	ldi	r20, 0x0A	; 10
   13cc8:	be 01       	movw	r22, r28
   13cca:	6f 5f       	subi	r22, 0xFF	; 255
   13ccc:	7f 4f       	sbci	r23, 0xFF	; 255
   13cce:	90 e0       	ldi	r25, 0x00	; 0
   13cd0:	0e 94 27 a3 	call	0x1464e	; 0x1464e <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3093
          itoa(tt, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "period", payload);
   13cd4:	9e 01       	movw	r18, r28
   13cd6:	2f 5f       	subi	r18, 0xFF	; 255
   13cd8:	3f 4f       	sbci	r19, 0xFF	; 255
   13cda:	4a e3       	ldi	r20, 0x3A	; 58
   13cdc:	56 e0       	ldi	r21, 0x06	; 6
   13cde:	61 2f       	mov	r22, r17
   13ce0:	8e ea       	ldi	r24, 0xAE	; 174
   13ce2:	93 e0       	ldi	r25, 0x03	; 3
   13ce4:	0e 94 be 8e 	call	0x11d7c	; 0x11d7c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.132]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3095

          tt = (uptime & 0xff) - status_tds18s20[id].period_now;
   13ce8:	80 91 d7 0a 	lds	r24, 0x0AD7	; 0x800ad7 <uptime>
   13cec:	d7 01       	movw	r26, r14
   13cee:	5c 96       	adiw	r26, 0x1c	; 28
   13cf0:	9c 91       	ld	r25, X
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   13cf2:	4a e0       	ldi	r20, 0x0A	; 10
   13cf4:	be 01       	movw	r22, r28
   13cf6:	6f 5f       	subi	r22, 0xFF	; 255
   13cf8:	7f 4f       	sbci	r23, 0xFF	; 255
   13cfa:	89 1b       	sub	r24, r25
   13cfc:	99 0b       	sbc	r25, r25
   13cfe:	0e 94 27 a3 	call	0x1464e	; 0x1464e <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3097
          itoa(tt, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "start_at", payload);
   13d02:	9e 01       	movw	r18, r28
   13d04:	2f 5f       	subi	r18, 0xFF	; 255
   13d06:	3f 4f       	sbci	r19, 0xFF	; 255
   13d08:	4e e3       	ldi	r20, 0x3E	; 62
   13d0a:	58 e0       	ldi	r21, 0x08	; 8
   13d0c:	61 2f       	mov	r22, r17
   13d0e:	8e ea       	ldi	r24, 0xAE	; 174
   13d10:	93 e0       	ldi	r25, 0x03	; 3
   13d12:	0e 94 be 8e 	call	0x11d7c	; 0x11d7c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.132]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3066
  struct_DDS18s20 tds;
  char payload[64];
  char tmp1[4];
  int tt;
  long avg = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
   13d16:	1f 5f       	subi	r17, 0xFF	; 255
   13d18:	be e1       	ldi	r27, 0x1E	; 30
   13d1a:	eb 0e       	add	r14, r27
   13d1c:	f1 1c       	adc	r15, r1
   13d1e:	16 30       	cpi	r17, 0x06	; 6
   13d20:	09 f0       	breq	.+2      	; 0x13d24 <main+0xab4>
   13d22:	1e cf       	rjmp	.-452    	; 0x13b60 <main+0x8f0>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4023
    send_mqtt_tds();

    //send_mqtt_program();
    ///thermostat();
    //mqtt_send_pid_variable();
    send_mqtt_remote_tds_status();
   13d24:	0e 94 e7 56 	call	0xadce	; 0xadce <send_mqtt_remote_tds_status()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4032
    //send_mesh_status();


  }

  if ((millis() - milis_1s) > 1000)
   13d28:	0e 94 1d 85 	call	0x10a3a	; 0x10a3a <millis>
   13d2c:	00 91 cb 10 	lds	r16, 0x10CB	; 0x8010cb <milis_1s>
   13d30:	10 91 cc 10 	lds	r17, 0x10CC	; 0x8010cc <milis_1s+0x1>
   13d34:	20 91 cd 10 	lds	r18, 0x10CD	; 0x8010cd <milis_1s+0x2>
   13d38:	30 91 ce 10 	lds	r19, 0x10CE	; 0x8010ce <milis_1s+0x3>
   13d3c:	60 1b       	sub	r22, r16
   13d3e:	71 0b       	sbc	r23, r17
   13d40:	82 0b       	sbc	r24, r18
   13d42:	93 0b       	sbc	r25, r19
   13d44:	69 3e       	cpi	r22, 0xE9	; 233
   13d46:	73 40       	sbci	r23, 0x03	; 3
   13d48:	81 05       	cpc	r24, r1
   13d4a:	91 05       	cpc	r25, r1
   13d4c:	08 f4       	brcc	.+2      	; 0x13d50 <main+0xae0>
   13d4e:	62 c1       	rjmp	.+708    	; 0x14014 <main+0xda4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4034
  {
    milis_1s = millis();
   13d50:	0e 94 1d 85 	call	0x10a3a	; 0x10a3a <millis>
   13d54:	60 93 cb 10 	sts	0x10CB, r22	; 0x8010cb <milis_1s>
   13d58:	70 93 cc 10 	sts	0x10CC, r23	; 0x8010cc <milis_1s+0x1>
   13d5c:	80 93 cd 10 	sts	0x10CD, r24	; 0x8010cd <milis_1s+0x2>
   13d60:	90 93 ce 10 	sts	0x10CE, r25	; 0x8010ce <milis_1s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4035
    uptime++;
   13d64:	80 90 d7 0a 	lds	r8, 0x0AD7	; 0x800ad7 <uptime>
   13d68:	90 90 d8 0a 	lds	r9, 0x0AD8	; 0x800ad8 <uptime+0x1>
   13d6c:	a0 90 d9 0a 	lds	r10, 0x0AD9	; 0x800ad9 <uptime+0x2>
   13d70:	b0 90 da 0a 	lds	r11, 0x0ADA	; 0x800ada <uptime+0x3>
   13d74:	ff ef       	ldi	r31, 0xFF	; 255
   13d76:	8f 1a       	sub	r8, r31
   13d78:	9f 0a       	sbc	r9, r31
   13d7a:	af 0a       	sbc	r10, r31
   13d7c:	bf 0a       	sbc	r11, r31
   13d7e:	80 92 d7 0a 	sts	0x0AD7, r8	; 0x800ad7 <uptime>
   13d82:	90 92 d8 0a 	sts	0x0AD8, r9	; 0x800ad8 <uptime+0x1>
   13d86:	a0 92 d9 0a 	sts	0x0AD9, r10	; 0x800ad9 <uptime+0x2>
   13d8a:	b0 92 da 0a 	sts	0x0ADA, r11	; 0x800ada <uptime+0x3>
   13d8e:	0a e1       	ldi	r16, 0x1A	; 26
   13d90:	1a e0       	ldi	r17, 0x0A	; 10
main():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:270
uint8_t mereni_hwwire(uint16_t uptime)
{
  uint8_t status = 0;
  uint8_t t, e;
  struct_DDS18s20 tds;
  for (uint8_t w = 0; w < HW_ONEWIRE_MAXROMS; w++)
   13d92:	f1 2c       	mov	r15, r1
mereni_hwwire():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:273
  {
    get_tds18s20(w, &tds);
    if ((tds.used == 1) && (((uptime & 0xff) - status_tds18s20[w].period_now) > tds.period))
   13d94:	94 01       	movw	r18, r8
   13d96:	33 27       	eor	r19, r19
   13d98:	ce 57       	subi	r28, 0x7E	; 126
   13d9a:	df 4f       	sbci	r29, 0xFF	; 255
   13d9c:	39 83       	std	Y+1, r19	; 0x01
   13d9e:	28 83       	st	Y, r18
   13da0:	c2 58       	subi	r28, 0x82	; 130
   13da2:	d0 40       	sbci	r29, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:272
  uint8_t status = 0;
  uint8_t t, e;
  struct_DDS18s20 tds;
  for (uint8_t w = 0; w < HW_ONEWIRE_MAXROMS; w++)
  {
    get_tds18s20(w, &tds);
   13da4:	be 01       	movw	r22, r28
   13da6:	6f 5f       	subi	r22, 0xFF	; 255
   13da8:	7f 4f       	sbci	r23, 0xFF	; 255
   13daa:	8f 2d       	mov	r24, r15
   13dac:	0e 94 32 4e 	call	0x9c64	; 0x9c64 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:273
    if ((tds.used == 1) && (((uptime & 0xff) - status_tds18s20[w].period_now) > tds.period))
   13db0:	e9 80       	ldd	r14, Y+1	; 0x01
   13db2:	31 e0       	ldi	r19, 0x01	; 1
   13db4:	e3 12       	cpse	r14, r19
   13db6:	f7 c0       	rjmp	.+494    	; 0x13fa6 <main+0xd36>
   13db8:	d8 01       	movw	r26, r16
   13dba:	5c 96       	adiw	r26, 0x1c	; 28
   13dbc:	8c 91       	ld	r24, X
   13dbe:	5c 97       	sbiw	r26, 0x1c	; 28
   13dc0:	ce 57       	subi	r28, 0x7E	; 126
   13dc2:	df 4f       	sbci	r29, 0xFF	; 255
   13dc4:	e8 81       	ld	r30, Y
   13dc6:	f9 81       	ldd	r31, Y+1	; 0x01
   13dc8:	c2 58       	subi	r28, 0x82	; 130
   13dca:	d0 40       	sbci	r29, 0x00	; 0
   13dcc:	e8 1b       	sub	r30, r24
   13dce:	f1 09       	sbc	r31, r1
   13dd0:	2d 89       	ldd	r18, Y+21	; 0x15
   13dd2:	2e 17       	cp	r18, r30
   13dd4:	1f 06       	cpc	r1, r31
   13dd6:	08 f0       	brcs	.+2      	; 0x13dda <main+0xb6a>
   13dd8:	e6 c0       	rjmp	.+460    	; 0x13fa6 <main+0xd36>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:275
    {
      if (status_tds18s20[w].wait == false)
   13dda:	5d 96       	adiw	r26, 0x1d	; 29
   13ddc:	8c 91       	ld	r24, X
   13dde:	81 11       	cpse	r24, r1
   13de0:	10 c0       	rjmp	.+32     	; 0x13e02 <main+0xb92>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:277
      {
        owReset(tds.assigned_ds2482);
   13de2:	8a 85       	ldd	r24, Y+10	; 0x0a
   13de4:	0e 94 cf 8a 	call	0x1159e	; 0x1159e <ds2482owReset(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:278
        owMatchRom(tds.assigned_ds2482, tds.rom);
   13de8:	be 01       	movw	r22, r28
   13dea:	6e 5f       	subi	r22, 0xFE	; 254
   13dec:	7f 4f       	sbci	r23, 0xFF	; 255
   13dee:	8a 85       	ldd	r24, Y+10	; 0x0a
   13df0:	0e 94 b0 8a 	call	0x11560	; 0x11560 <owMatchRom(unsigned char, unsigned char*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:279
        owWriteByte(tds.assigned_ds2482, OW_CONVERT_T);
   13df4:	64 e4       	ldi	r22, 0x44	; 68
   13df6:	8a 85       	ldd	r24, Y+10	; 0x0a
   13df8:	0e 94 77 8a 	call	0x114ee	; 0x114ee <ds2482owWriteByte(unsigned char, unsigned char)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:280
        status_tds18s20[w].wait = true;
   13dfc:	d8 01       	movw	r26, r16
   13dfe:	5d 96       	adiw	r26, 0x1d	; 29
   13e00:	ec 92       	st	X, r14
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:282
      }
      if (status_tds18s20[w].wait == true)
   13e02:	f8 01       	movw	r30, r16
   13e04:	d5 8c       	ldd	r13, Z+29	; 0x1d
   13e06:	f1 e0       	ldi	r31, 0x01	; 1
   13e08:	df 12       	cpse	r13, r31
   13e0a:	cd c0       	rjmp	.+410    	; 0x13fa6 <main+0xd36>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:284
      {
        owReset(tds.assigned_ds2482);
   13e0c:	8a 85       	ldd	r24, Y+10	; 0x0a
   13e0e:	0e 94 cf 8a 	call	0x1159e	; 0x1159e <ds2482owReset(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:285
        owMatchRom(tds.assigned_ds2482, tds.rom);
   13e12:	be 01       	movw	r22, r28
   13e14:	6e 5f       	subi	r22, 0xFE	; 254
   13e16:	7f 4f       	sbci	r23, 0xFF	; 255
   13e18:	8a 85       	ldd	r24, Y+10	; 0x0a
   13e1a:	0e 94 b0 8a 	call	0x11560	; 0x11560 <owMatchRom(unsigned char, unsigned char*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:286
        owReadByte(tds.assigned_ds2482, &t);
   13e1e:	be 01       	movw	r22, r28
   13e20:	6f 57       	subi	r22, 0x7F	; 127
   13e22:	7f 4f       	sbci	r23, 0xFF	; 255
   13e24:	8a 85       	ldd	r24, Y+10	; 0x0a
   13e26:	0e 94 1b 8a 	call	0x11436	; 0x11436 <ds2482owReadByte(unsigned char, unsigned char*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:287
        if (t != 0)
   13e2a:	cf 57       	subi	r28, 0x7F	; 127
   13e2c:	df 4f       	sbci	r29, 0xFF	; 255
   13e2e:	88 81       	ld	r24, Y
   13e30:	c1 58       	subi	r28, 0x81	; 129
   13e32:	d0 40       	sbci	r29, 0x00	; 0
   13e34:	88 23       	and	r24, r24
   13e36:	09 f4       	brne	.+2      	; 0x13e3a <main+0xbca>
   13e38:	b6 c0       	rjmp	.+364    	; 0x13fa6 <main+0xd36>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:289
        {
          status_tds18s20[w].wait = false;
   13e3a:	d8 01       	movw	r26, r16
   13e3c:	5d 96       	adiw	r26, 0x1d	; 29
   13e3e:	1c 92       	st	X, r1
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:290
          status = owReset(tds.assigned_ds2482);
   13e40:	8a 85       	ldd	r24, Y+10	; 0x0a
   13e42:	0e 94 cf 8a 	call	0x1159e	; 0x1159e <ds2482owReset(unsigned char)>
   13e46:	68 2e       	mov	r6, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:291
          status = status + owMatchRom(tds.assigned_ds2482, tds.rom );
   13e48:	be 01       	movw	r22, r28
   13e4a:	6e 5f       	subi	r22, 0xFE	; 254
   13e4c:	7f 4f       	sbci	r23, 0xFF	; 255
   13e4e:	8a 85       	ldd	r24, Y+10	; 0x0a
   13e50:	0e 94 b0 8a 	call	0x11560	; 0x11560 <owMatchRom(unsigned char, unsigned char*)>
   13e54:	68 0e       	add	r6, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:292
          status = status + owWriteByte(tds.assigned_ds2482, OW_READ_SCRATCHPAD);
   13e56:	6e eb       	ldi	r22, 0xBE	; 190
   13e58:	8a 85       	ldd	r24, Y+10	; 0x0a
   13e5a:	0e 94 77 8a 	call	0x114ee	; 0x114ee <ds2482owWriteByte(unsigned char, unsigned char)>
   13e5e:	68 0e       	add	r6, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:293
          status = status + owReadByte(tds.assigned_ds2482, &e);     //0byte
   13e60:	be 01       	movw	r22, r28
   13e62:	6f 5b       	subi	r22, 0xBF	; 191
   13e64:	7f 4f       	sbci	r23, 0xFF	; 255
   13e66:	8a 85       	ldd	r24, Y+10	; 0x0a
   13e68:	0e 94 1b 8a 	call	0x11436	; 0x11436 <ds2482owReadByte(unsigned char, unsigned char*)>
   13e6c:	68 0e       	add	r6, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:294
          status_tds18s20[w].tempL = e;
   13e6e:	22 96       	adiw	r28, 0x02	; 2
   13e70:	cf ac       	ldd	r12, Y+63	; 0x3f
   13e72:	22 97       	sbiw	r28, 0x02	; 2
   13e74:	f8 01       	movw	r30, r16
   13e76:	c0 82       	st	Z, r12
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:295
          status = status + owReadByte(tds.assigned_ds2482, &e);     //1byte
   13e78:	be 01       	movw	r22, r28
   13e7a:	6f 5b       	subi	r22, 0xBF	; 191
   13e7c:	7f 4f       	sbci	r23, 0xFF	; 255
   13e7e:	8a 85       	ldd	r24, Y+10	; 0x0a
   13e80:	0e 94 1b 8a 	call	0x11436	; 0x11436 <ds2482owReadByte(unsigned char, unsigned char*)>
   13e84:	68 0e       	add	r6, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:296
          status_tds18s20[w].tempH = e;
   13e86:	22 96       	adiw	r28, 0x02	; 2
   13e88:	7f ac       	ldd	r7, Y+63	; 0x3f
   13e8a:	22 97       	sbiw	r28, 0x02	; 2
   13e8c:	d8 01       	movw	r26, r16
   13e8e:	11 96       	adiw	r26, 0x01	; 1
   13e90:	7c 92       	st	X, r7
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:297
          status = status + owReadByte(tds.assigned_ds2482, &e); //2byte
   13e92:	be 01       	movw	r22, r28
   13e94:	6f 5b       	subi	r22, 0xBF	; 191
   13e96:	7f 4f       	sbci	r23, 0xFF	; 255
   13e98:	8a 85       	ldd	r24, Y+10	; 0x0a
   13e9a:	0e 94 1b 8a 	call	0x11436	; 0x11436 <ds2482owReadByte(unsigned char, unsigned char*)>
   13e9e:	68 0e       	add	r6, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:298
          status = status + owReadByte(tds.assigned_ds2482, &e); //3byte
   13ea0:	be 01       	movw	r22, r28
   13ea2:	6f 5b       	subi	r22, 0xBF	; 191
   13ea4:	7f 4f       	sbci	r23, 0xFF	; 255
   13ea6:	8a 85       	ldd	r24, Y+10	; 0x0a
   13ea8:	0e 94 1b 8a 	call	0x11436	; 0x11436 <ds2482owReadByte(unsigned char, unsigned char*)>
   13eac:	68 0e       	add	r6, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:299
          status = status + owReadByte(tds.assigned_ds2482, &e); //4byte
   13eae:	be 01       	movw	r22, r28
   13eb0:	6f 5b       	subi	r22, 0xBF	; 191
   13eb2:	7f 4f       	sbci	r23, 0xFF	; 255
   13eb4:	8a 85       	ldd	r24, Y+10	; 0x0a
   13eb6:	0e 94 1b 8a 	call	0x11436	; 0x11436 <ds2482owReadByte(unsigned char, unsigned char*)>
   13eba:	68 0e       	add	r6, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:300
          status = status + owReadByte(tds.assigned_ds2482, &e); //5byte
   13ebc:	be 01       	movw	r22, r28
   13ebe:	6f 5b       	subi	r22, 0xBF	; 191
   13ec0:	7f 4f       	sbci	r23, 0xFF	; 255
   13ec2:	8a 85       	ldd	r24, Y+10	; 0x0a
   13ec4:	0e 94 1b 8a 	call	0x11436	; 0x11436 <ds2482owReadByte(unsigned char, unsigned char*)>
   13ec8:	68 0e       	add	r6, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:301
          status = status + owReadByte(tds.assigned_ds2482, &e); //6byte
   13eca:	be 01       	movw	r22, r28
   13ecc:	6f 5b       	subi	r22, 0xBF	; 191
   13ece:	7f 4f       	sbci	r23, 0xFF	; 255
   13ed0:	8a 85       	ldd	r24, Y+10	; 0x0a
   13ed2:	0e 94 1b 8a 	call	0x11436	; 0x11436 <ds2482owReadByte(unsigned char, unsigned char*)>
   13ed6:	68 0e       	add	r6, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:302
          status_tds18s20[w].CR = e; //count remain
   13ed8:	22 96       	adiw	r28, 0x02	; 2
   13eda:	8f ad       	ldd	r24, Y+63	; 0x3f
   13edc:	22 97       	sbiw	r28, 0x02	; 2
   13ede:	f8 01       	movw	r30, r16
   13ee0:	82 83       	std	Z+2, r24	; 0x02
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:303
          status = status + owReadByte(tds.assigned_ds2482, &e); //7byte
   13ee2:	be 01       	movw	r22, r28
   13ee4:	6f 5b       	subi	r22, 0xBF	; 191
   13ee6:	7f 4f       	sbci	r23, 0xFF	; 255
   13ee8:	8a 85       	ldd	r24, Y+10	; 0x0a
   13eea:	0e 94 1b 8a 	call	0x11436	; 0x11436 <ds2482owReadByte(unsigned char, unsigned char*)>
   13eee:	68 0e       	add	r6, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:304
          status_tds18s20[w].CP = e; // count per
   13ef0:	22 96       	adiw	r28, 0x02	; 2
   13ef2:	ef ac       	ldd	r14, Y+63	; 0x3f
   13ef4:	22 97       	sbiw	r28, 0x02	; 2
   13ef6:	d8 01       	movw	r26, r16
   13ef8:	13 96       	adiw	r26, 0x03	; 3
   13efa:	ec 92       	st	X, r14
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:305
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
   13efc:	be 01       	movw	r22, r28
   13efe:	6f 5b       	subi	r22, 0xBF	; 191
   13f00:	7f 4f       	sbci	r23, 0xFF	; 255
   13f02:	8a 85       	ldd	r24, Y+10	; 0x0a
   13f04:	0e 94 1b 8a 	call	0x11436	; 0x11436 <ds2482owReadByte(unsigned char, unsigned char*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:306
          status_tds18s20[w].CRC = e; // crc soucet
   13f08:	22 96       	adiw	r28, 0x02	; 2
   13f0a:	9f ad       	ldd	r25, Y+63	; 0x3f
   13f0c:	22 97       	sbiw	r28, 0x02	; 2
   13f0e:	f8 01       	movw	r30, r16
   13f10:	94 83       	std	Z+4, r25	; 0x04
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:305
          status = status + owReadByte(tds.assigned_ds2482, &e); //5byte
          status = status + owReadByte(tds.assigned_ds2482, &e); //6byte
          status_tds18s20[w].CR = e; //count remain
          status = status + owReadByte(tds.assigned_ds2482, &e); //7byte
          status_tds18s20[w].CP = e; // count per
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
   13f12:	86 0d       	add	r24, r6
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:307
          status_tds18s20[w].CRC = e; // crc soucet
          if (status == 0)
   13f14:	09 f0       	breq	.+2      	; 0x13f18 <main+0xca8>
   13f16:	e2 c1       	rjmp	.+964    	; 0x142dc <main+0x106c>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:310
          {
            int temp = (int) status_tds18s20[w].tempH << 11 | (int) status_tds18s20[w].tempL << 3;
            status_tds18s20[w].temp = ((temp & 0xfff0) << 3) -  16 + (  (  (status_tds18s20[w].CP - (status_tds18s20[t].CR) << 7) ) / status_tds18s20[w].CP ) + tds.offset;
   13f18:	6e 2d       	mov	r22, r14
   13f1a:	70 e0       	ldi	r23, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:309
          status_tds18s20[w].CP = e; // count per
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
          status_tds18s20[w].CRC = e; // crc soucet
          if (status == 0)
          {
            int temp = (int) status_tds18s20[w].tempH << 11 | (int) status_tds18s20[w].tempL << 3;
   13f1c:	27 2d       	mov	r18, r7
   13f1e:	30 e0       	ldi	r19, 0x00	; 0
   13f20:	32 2f       	mov	r19, r18
   13f22:	22 27       	eor	r18, r18
   13f24:	33 0f       	add	r19, r19
   13f26:	33 0f       	add	r19, r19
   13f28:	33 0f       	add	r19, r19
   13f2a:	f8 e0       	ldi	r31, 0x08	; 8
   13f2c:	cf 9e       	mul	r12, r31
   13f2e:	c0 01       	movw	r24, r0
   13f30:	11 24       	eor	r1, r1
   13f32:	28 2b       	or	r18, r24
   13f34:	39 2b       	or	r19, r25
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:310
            status_tds18s20[w].temp = ((temp & 0xfff0) << 3) -  16 + (  (  (status_tds18s20[w].CP - (status_tds18s20[t].CR) << 7) ) / status_tds18s20[w].CP ) + tds.offset;
   13f36:	b3 e0       	ldi	r27, 0x03	; 3
   13f38:	22 0f       	add	r18, r18
   13f3a:	33 1f       	adc	r19, r19
   13f3c:	ba 95       	dec	r27
   13f3e:	e1 f7       	brne	.-8      	; 0x13f38 <main+0xcc8>
   13f40:	20 78       	andi	r18, 0x80	; 128
   13f42:	8b 85       	ldd	r24, Y+11	; 0x0b
   13f44:	9c 85       	ldd	r25, Y+12	; 0x0c
   13f46:	40 97       	sbiw	r24, 0x10	; 16
   13f48:	28 0f       	add	r18, r24
   13f4a:	39 1f       	adc	r19, r25
   13f4c:	cf 57       	subi	r28, 0x7F	; 127
   13f4e:	df 4f       	sbci	r29, 0xFF	; 255
   13f50:	e8 81       	ld	r30, Y
   13f52:	c1 58       	subi	r28, 0x81	; 129
   13f54:	d0 40       	sbci	r29, 0x00	; 0
   13f56:	4e e1       	ldi	r20, 0x1E	; 30
   13f58:	4e 9f       	mul	r20, r30
   13f5a:	f0 01       	movw	r30, r0
   13f5c:	11 24       	eor	r1, r1
   13f5e:	e6 5e       	subi	r30, 0xE6	; 230
   13f60:	f5 4f       	sbci	r31, 0xF5	; 245
   13f62:	82 81       	ldd	r24, Z+2	; 0x02
   13f64:	db 01       	movw	r26, r22
   13f66:	a8 1b       	sub	r26, r24
   13f68:	b1 09       	sbc	r27, r1
   13f6a:	cd 01       	movw	r24, r26
   13f6c:	96 95       	lsr	r25
   13f6e:	98 2f       	mov	r25, r24
   13f70:	88 27       	eor	r24, r24
   13f72:	97 95       	ror	r25
   13f74:	87 95       	ror	r24
   13f76:	0e 94 c5 ac 	call	0x1598a	; 0x1598a <__divmodhi4>
   13f7a:	26 0f       	add	r18, r22
   13f7c:	37 1f       	adc	r19, r23
   13f7e:	f8 01       	movw	r30, r16
   13f80:	36 83       	std	Z+6, r19	; 0x06
   13f82:	25 83       	std	Z+5, r18	; 0x05
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:311
            status_tds18s20[w].online = True;
   13f84:	d3 8e       	std	Z+27, r13	; 0x1b
   13f86:	49 e0       	ldi	r20, 0x09	; 9
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:312
            for (uint8_t av = 9; av > 0; av--) status_tds18s20[w].average_temp[av] = status_tds18s20[w].average_temp[av - 1];
   13f88:	87 89       	ldd	r24, Z+23	; 0x17
   13f8a:	90 8d       	ldd	r25, Z+24	; 0x18
   13f8c:	92 8f       	std	Z+26, r25	; 0x1a
   13f8e:	81 8f       	std	Z+25, r24	; 0x19
   13f90:	41 50       	subi	r20, 0x01	; 1
   13f92:	32 97       	sbiw	r30, 0x02	; 2
   13f94:	41 11       	cpse	r20, r1
   13f96:	f8 cf       	rjmp	.-16     	; 0x13f88 <main+0xd18>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:313
            status_tds18s20[w].average_temp[0] = status_tds18s20[w].temp;
   13f98:	d8 01       	movw	r26, r16
   13f9a:	18 96       	adiw	r26, 0x08	; 8
   13f9c:	3c 93       	st	X, r19
   13f9e:	2e 93       	st	-X, r18
   13fa0:	17 97       	sbiw	r26, 0x07	; 7
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:314
            status_tds18s20[w].period_now = uptime & 0xff;
   13fa2:	5c 96       	adiw	r26, 0x1c	; 28
   13fa4:	8c 92       	st	X, r8
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:270
uint8_t mereni_hwwire(uint16_t uptime)
{
  uint8_t status = 0;
  uint8_t t, e;
  struct_DDS18s20 tds;
  for (uint8_t w = 0; w < HW_ONEWIRE_MAXROMS; w++)
   13fa6:	f3 94       	inc	r15
   13fa8:	02 5e       	subi	r16, 0xE2	; 226
   13faa:	1f 4f       	sbci	r17, 0xFF	; 255
   13fac:	f6 e0       	ldi	r31, 0x06	; 6
   13fae:	ff 12       	cpse	r15, r31
   13fb0:	f9 ce       	rjmp	.-526    	; 0x13da4 <main+0xb34>
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2217
{
  struct_DDS18s20 tds;
  int tt;
  uint16_t active = 0;
  uint16_t pos = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
   13fb2:	10 e0       	ldi	r17, 0x00	; 0
tds_extended_memory_store():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2218
    if (get_tds18s20(id, &tds) == 1)
   13fb4:	be 01       	movw	r22, r28
   13fb6:	6f 5f       	subi	r22, 0xFF	; 255
   13fb8:	7f 4f       	sbci	r23, 0xFF	; 255
   13fba:	81 2f       	mov	r24, r17
   13fbc:	0e 94 32 4e 	call	0x9c64	; 0x9c64 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2217
{
  struct_DDS18s20 tds;
  int tt;
  uint16_t active = 0;
  uint16_t pos = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
   13fc0:	1f 5f       	subi	r17, 0xFF	; 255
   13fc2:	16 30       	cpi	r17, 0x06	; 6
   13fc4:	b9 f7       	brne	.-18     	; 0x13fb4 <main+0xd44>
   13fc6:	f6 e6       	ldi	r31, 0x66	; 102
   13fc8:	cf 2e       	mov	r12, r31
   13fca:	d1 2c       	mov	r13, r1
   13fcc:	e1 2c       	mov	r14, r1
   13fce:	f1 2c       	mov	r15, r1
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2149
}

void remote_tds_update_last_update(void)
{
  uint8_t active;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   13fd0:	10 e0       	ldi	r17, 0x00	; 0
remote_tds_update_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2151
  {
    remote_tds_get_active(idx, &active);
   13fd2:	be 01       	movw	r22, r28
   13fd4:	6f 5f       	subi	r22, 0xFF	; 255
   13fd6:	7f 4f       	sbci	r23, 0xFF	; 255
   13fd8:	81 2f       	mov	r24, r17
   13fda:	0e 94 ba 53 	call	0xa774	; 0xa774 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2152
    if (active == 1)
   13fde:	89 81       	ldd	r24, Y+1	; 0x01
   13fe0:	81 30       	cpi	r24, 0x01	; 1
   13fe2:	61 f4       	brne	.+24     	; 0x13ffc <main+0xd8c>
remote_tds_inc_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2139
uint8_t remote_tds_inc_last_update(uint8_t idx)
{
  uint8_t last = 255;
  if (idx < MAX_RTDS)
  {
    last = SRAM.readByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx));
   13fe4:	c7 01       	movw	r24, r14
   13fe6:	b6 01       	movw	r22, r12
   13fe8:	0e 94 c6 82 	call	0x1058c	; 0x1058c <SRAM_23LC::readByte(unsigned long) [clone .constprop.179]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2140
    if (last < 250)
   13fec:	8a 3f       	cpi	r24, 0xFA	; 250
   13fee:	08 f4       	brcc	.+2      	; 0x13ff2 <main+0xd82>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2141
      last++;
   13ff0:	8f 5f       	subi	r24, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2142
    SRAM.writeByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx), last);
   13ff2:	48 2f       	mov	r20, r24
   13ff4:	c7 01       	movw	r24, r14
   13ff6:	b6 01       	movw	r22, r12
   13ff8:	0e 94 8a 82 	call	0x10514	; 0x10514 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.181]>
remote_tds_update_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2149
}

void remote_tds_update_last_update(void)
{
  uint8_t active;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   13ffc:	1f 5f       	subi	r17, 0xFF	; 255
   13ffe:	23 e0       	ldi	r18, 0x03	; 3
   14000:	c2 0e       	add	r12, r18
   14002:	d1 1c       	adc	r13, r1
   14004:	e1 1c       	adc	r14, r1
   14006:	f1 1c       	adc	r15, r1
   14008:	34 e8       	ldi	r19, 0x84	; 132
   1400a:	c3 16       	cp	r12, r19
   1400c:	d1 04       	cpc	r13, r1
   1400e:	e1 04       	cpc	r14, r1
   14010:	f1 04       	cpc	r15, r1
   14012:	f9 f6       	brne	.-66     	; 0x13fd2 <main+0xd62>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4042
    tds_extended_memory_store();
    remote_tds_update_last_update();
  }

  //digitalWrite(LED, LOW);
  if ((millis() - milis_05s) > 500)
   14014:	0e 94 1d 85 	call	0x10a3a	; 0x10a3a <millis>
   14018:	00 91 c7 10 	lds	r16, 0x10C7	; 0x8010c7 <milis_05s>
   1401c:	10 91 c8 10 	lds	r17, 0x10C8	; 0x8010c8 <milis_05s+0x1>
   14020:	20 91 c9 10 	lds	r18, 0x10C9	; 0x8010c9 <milis_05s+0x2>
   14024:	30 91 ca 10 	lds	r19, 0x10CA	; 0x8010ca <milis_05s+0x3>
   14028:	60 1b       	sub	r22, r16
   1402a:	71 0b       	sbc	r23, r17
   1402c:	82 0b       	sbc	r24, r18
   1402e:	93 0b       	sbc	r25, r19
   14030:	65 3f       	cpi	r22, 0xF5	; 245
   14032:	71 40       	sbci	r23, 0x01	; 1
   14034:	81 05       	cpc	r24, r1
   14036:	91 05       	cpc	r25, r1
   14038:	08 f4       	brcc	.+2      	; 0x1403c <main+0xdcc>
   1403a:	bc c0       	rjmp	.+376    	; 0x141b4 <main+0xf44>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4044
  {
    milis_05s = millis();
   1403c:	0e 94 1d 85 	call	0x10a3a	; 0x10a3a <millis>
   14040:	60 93 c7 10 	sts	0x10C7, r22	; 0x8010c7 <milis_05s>
   14044:	70 93 c8 10 	sts	0x10C8, r23	; 0x8010c8 <milis_05s+0x1>
   14048:	80 93 c9 10 	sts	0x10C9, r24	; 0x8010c9 <milis_05s+0x2>
   1404c:	90 93 ca 10 	sts	0x10CA, r25	; 0x8010ca <milis_05s+0x3>
beginTransmission():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:154
   14050:	88 e6       	ldi	r24, 0x68	; 104
   14052:	0e 94 16 7d 	call	0xfa2c	; 0xfa2c <TwoWire::beginTransmission(unsigned char) [clone .constprop.168]>
now():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:270
}

DateTime RTC_DS1307::now() {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0);	
   14056:	60 e0       	ldi	r22, 0x00	; 0
   14058:	89 ef       	ldi	r24, 0xF9	; 249
   1405a:	9d e0       	ldi	r25, 0x0D	; 13
   1405c:	0e 94 18 79 	call	0xf230	; 0xf230 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:271
  Wire.endTransmission();
   14060:	89 ef       	ldi	r24, 0xF9	; 249
   14062:	9d e0       	ldi	r25, 0x0D	; 13
   14064:	0e 94 91 89 	call	0x11322	; 0x11322 <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:273

  Wire.requestFrom(DS1307_ADDRESS, 7);
   14068:	87 e0       	ldi	r24, 0x07	; 7
   1406a:	90 e0       	ldi	r25, 0x00	; 0
   1406c:	0e 94 4f 7b 	call	0xf69e	; 0xf69e <TwoWire::requestFrom(int, int) [clone .constprop.130]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:274
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
   14070:	0e 94 56 77 	call	0xeeac	; 0xeeac <TwoWire::read() [clone .constprop.131]>
   14074:	8f 77       	andi	r24, 0x7F	; 127
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   14076:	28 2f       	mov	r18, r24
   14078:	30 e0       	ldi	r19, 0x00	; 0
   1407a:	94 e0       	ldi	r25, 0x04	; 4
   1407c:	35 95       	asr	r19
   1407e:	27 95       	ror	r18
   14080:	9a 95       	dec	r25
   14082:	e1 f7       	brne	.-8      	; 0x1407c <main+0xe0c>
   14084:	92 2f       	mov	r25, r18
   14086:	99 0f       	add	r25, r25
   14088:	99 0f       	add	r25, r25
   1408a:	12 2f       	mov	r17, r18
   1408c:	19 1b       	sub	r17, r25
   1408e:	11 0f       	add	r17, r17
   14090:	18 0f       	add	r17, r24
now():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:275
  Wire._I2C_WRITE((byte)0);	
  Wire.endTransmission();

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
   14092:	0e 94 56 77 	call	0xeeac	; 0xeeac <TwoWire::read() [clone .constprop.131]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   14096:	9c 01       	movw	r18, r24
   14098:	44 e0       	ldi	r20, 0x04	; 4
   1409a:	35 95       	asr	r19
   1409c:	27 95       	ror	r18
   1409e:	4a 95       	dec	r20
   140a0:	e1 f7       	brne	.-8      	; 0x1409a <main+0xe2a>
   140a2:	2f 70       	andi	r18, 0x0F	; 15
   140a4:	33 27       	eor	r19, r19
   140a6:	92 2f       	mov	r25, r18
   140a8:	99 0f       	add	r25, r25
   140aa:	99 0f       	add	r25, r25
   140ac:	02 2f       	mov	r16, r18
   140ae:	09 1b       	sub	r16, r25
   140b0:	00 0f       	add	r16, r16
   140b2:	08 0f       	add	r16, r24
now():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:276
  Wire.endTransmission();

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
   140b4:	0e 94 56 77 	call	0xeeac	; 0xeeac <TwoWire::read() [clone .constprop.131]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   140b8:	9c 01       	movw	r18, r24
   140ba:	54 e0       	ldi	r21, 0x04	; 4
   140bc:	35 95       	asr	r19
   140be:	27 95       	ror	r18
   140c0:	5a 95       	dec	r21
   140c2:	e1 f7       	brne	.-8      	; 0x140bc <main+0xe4c>
   140c4:	2f 70       	andi	r18, 0x0F	; 15
   140c6:	33 27       	eor	r19, r19
   140c8:	92 2f       	mov	r25, r18
   140ca:	99 0f       	add	r25, r25
   140cc:	99 0f       	add	r25, r25
   140ce:	f2 2e       	mov	r15, r18
   140d0:	f9 1a       	sub	r15, r25
   140d2:	ff 0c       	add	r15, r15
   140d4:	f8 0e       	add	r15, r24
now():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:277

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
   140d6:	0e 94 56 77 	call	0xeeac	; 0xeeac <TwoWire::read() [clone .constprop.131]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:278
  uint8_t d = bcd2bin(Wire._I2C_READ());
   140da:	0e 94 56 77 	call	0xeeac	; 0xeeac <TwoWire::read() [clone .constprop.131]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   140de:	9c 01       	movw	r18, r24
   140e0:	64 e0       	ldi	r22, 0x04	; 4
   140e2:	35 95       	asr	r19
   140e4:	27 95       	ror	r18
   140e6:	6a 95       	dec	r22
   140e8:	e1 f7       	brne	.-8      	; 0x140e2 <main+0xe72>
   140ea:	2f 70       	andi	r18, 0x0F	; 15
   140ec:	33 27       	eor	r19, r19
   140ee:	92 2f       	mov	r25, r18
   140f0:	99 0f       	add	r25, r25
   140f2:	99 0f       	add	r25, r25
   140f4:	e2 2e       	mov	r14, r18
   140f6:	e9 1a       	sub	r14, r25
   140f8:	ee 0c       	add	r14, r14
   140fa:	e8 0e       	add	r14, r24
now():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:279
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
   140fc:	0e 94 56 77 	call	0xeeac	; 0xeeac <TwoWire::read() [clone .constprop.131]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   14100:	9c 01       	movw	r18, r24
   14102:	74 e0       	ldi	r23, 0x04	; 4
   14104:	35 95       	asr	r19
   14106:	27 95       	ror	r18
   14108:	7a 95       	dec	r23
   1410a:	e1 f7       	brne	.-8      	; 0x14104 <main+0xe94>
   1410c:	2f 70       	andi	r18, 0x0F	; 15
   1410e:	33 27       	eor	r19, r19
   14110:	92 2f       	mov	r25, r18
   14112:	99 0f       	add	r25, r25
   14114:	99 0f       	add	r25, r25
   14116:	d2 2e       	mov	r13, r18
   14118:	d9 1a       	sub	r13, r25
   1411a:	dd 0c       	add	r13, r13
   1411c:	d8 0e       	add	r13, r24
now():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:280
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
  uint16_t y = bcd2bin(Wire._I2C_READ()) + 2000;
   1411e:	0e 94 56 77 	call	0xeeac	; 0xeeac <TwoWire::read() [clone .constprop.131]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   14122:	9c 01       	movw	r18, r24
   14124:	e4 e0       	ldi	r30, 0x04	; 4
   14126:	35 95       	asr	r19
   14128:	27 95       	ror	r18
   1412a:	ea 95       	dec	r30
   1412c:	e1 f7       	brne	.-8      	; 0x14126 <main+0xeb6>
   1412e:	2f 70       	andi	r18, 0x0F	; 15
   14130:	33 27       	eor	r19, r19
   14132:	92 2f       	mov	r25, r18
   14134:	99 0f       	add	r25, r25
   14136:	99 0f       	add	r25, r25
   14138:	29 1b       	sub	r18, r25
   1413a:	22 0f       	add	r18, r18
   1413c:	82 0f       	add	r24, r18
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
    yOff = year;
   1413e:	80 93 4a 10 	sts	0x104A, r24	; 0x80104a <now>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4045
    now = rtc.now();
   14142:	d0 92 4b 10 	sts	0x104B, r13	; 0x80104b <now+0x1>
   14146:	e0 92 4c 10 	sts	0x104C, r14	; 0x80104c <now+0x2>
   1414a:	f0 92 4d 10 	sts	0x104D, r15	; 0x80104d <now+0x3>
   1414e:	00 93 4e 10 	sts	0x104E, r16	; 0x80104e <now+0x4>
   14152:	10 93 4f 10 	sts	0x104F, r17	; 0x80104f <now+0x5>
selftest():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3309
}
///
/// selftest - pusteni skupiny vlastnich selftestu
void selftest(void)
{
  if (!rtc.isrunning())
   14156:	0e 94 ee 89 	call	0x113dc	; 0x113dc <RTC_DS1307::isrunning() [clone .constprop.128]>
   1415a:	90 91 ce 0a 	lds	r25, 0x0ACE	; 0x800ace <selftest_data>
   1415e:	81 11       	cpse	r24, r1
   14160:	bf c0       	rjmp	.+382    	; 0x142e0 <main+0x1070>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3310
    sbi(selftest_data, SELFTEST_ERR_RTC);
   14162:	91 60       	ori	r25, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3312
  else
    cbi(selftest_data, SELFTEST_ERR_RTC);
   14164:	90 93 ce 0a 	sts	0x0ACE, r25	; 0x800ace <selftest_data>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4047
  if ((millis() - milis_05s) > 500)
  {
    milis_05s = millis();
    now = rtc.now();
    selftest();
    menu_redraw05s = 1;
   14168:	81 e0       	ldi	r24, 0x01	; 1
   1416a:	80 93 d6 0a 	sts	0x0AD6, r24	; 0x800ad6 <menu_redraw05s>
count_use_rtds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4611
///////////////////////////////////////////////////////////////////////////////////////////////////////////
//// vraci pocet pouzitych vzdalenych mqtt tds cidel
uint8_t count_use_rtds(void)
{
  uint8_t cnt = 0;
  uint8_t active = 0;
   1416e:	19 82       	std	Y+1, r1	; 0x01
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4610

///////////////////////////////////////////////////////////////////////////////////////////////////////////
//// vraci pocet pouzitych vzdalenych mqtt tds cidel
uint8_t count_use_rtds(void)
{
  uint8_t cnt = 0;
   14170:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4612
  uint8_t active = 0;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   14172:	10 e0       	ldi	r17, 0x00	; 0
count_use_rtds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4614
  {
    remote_tds_get_active(idx, &active);
   14174:	be 01       	movw	r22, r28
   14176:	6f 5f       	subi	r22, 0xFF	; 255
   14178:	7f 4f       	sbci	r23, 0xFF	; 255
   1417a:	81 2f       	mov	r24, r17
   1417c:	0e 94 ba 53 	call	0xa774	; 0xa774 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4615
    if (active == 1) cnt++;
   14180:	89 81       	ldd	r24, Y+1	; 0x01
   14182:	81 30       	cpi	r24, 0x01	; 1
   14184:	09 f4       	brne	.+2      	; 0x14188 <main+0xf18>
   14186:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4612
//// vraci pocet pouzitych vzdalenych mqtt tds cidel
uint8_t count_use_rtds(void)
{
  uint8_t cnt = 0;
  uint8_t active = 0;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   14188:	1f 5f       	subi	r17, 0xFF	; 255
   1418a:	1a 30       	cpi	r17, 0x0A	; 10
   1418c:	99 f7       	brne	.-26     	; 0x14174 <main+0xf04>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4050
    now = rtc.now();
    selftest();
    menu_redraw05s = 1;


    use_rtds = count_use_rtds();
   1418e:	00 93 d5 0a 	sts	0x0AD5, r16	; 0x800ad5 <use_rtds>
   14192:	08 ec       	ldi	r16, 0xC8	; 200
   14194:	10 e0       	ldi	r17, 0x00	; 0
main():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:19
struct_ds2482 ds2482_address[DS2482_COUNT];

/// vraci pocet alokovanych k pouziti 1w cidel
uint8_t count_use_tds(void)
{
  uint8_t cnt = 0;
   14196:	f1 2c       	mov	r15, r1
count_use_tds():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:21
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    if ( EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used) == 1) cnt++;
   14198:	c8 01       	movw	r24, r16
   1419a:	0e 94 49 8f 	call	0x11e92	; 0x11e92 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
   1419e:	81 30       	cpi	r24, 0x01	; 1
   141a0:	09 f4       	brne	.+2      	; 0x141a4 <main+0xf34>
   141a2:	f3 94       	inc	r15
   141a4:	0a 5e       	subi	r16, 0xEA	; 234
   141a6:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:20

/// vraci pocet alokovanych k pouziti 1w cidel
uint8_t count_use_tds(void)
{
  uint8_t cnt = 0;
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
   141a8:	0c 34       	cpi	r16, 0x4C	; 76
   141aa:	51 e0       	ldi	r21, 0x01	; 1
   141ac:	15 07       	cpc	r17, r21
   141ae:	a1 f7       	brne	.-24     	; 0x14198 <main+0xf28>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4051
    use_tds = count_use_tds();
   141b0:	f0 92 d4 0a 	sts	0x0AD4, r15	; 0x800ad4 <use_tds>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4060




  /// kazdych 50ms
  if ((millis() - milis_005s) > 50)
   141b4:	0e 94 1d 85 	call	0x10a3a	; 0x10a3a <millis>
   141b8:	00 91 c3 10 	lds	r16, 0x10C3	; 0x8010c3 <milis_005s>
   141bc:	10 91 c4 10 	lds	r17, 0x10C4	; 0x8010c4 <milis_005s+0x1>
   141c0:	20 91 c5 10 	lds	r18, 0x10C5	; 0x8010c5 <milis_005s+0x2>
   141c4:	30 91 c6 10 	lds	r19, 0x10C6	; 0x8010c6 <milis_005s+0x3>
   141c8:	60 1b       	sub	r22, r16
   141ca:	71 0b       	sbc	r23, r17
   141cc:	82 0b       	sbc	r24, r18
   141ce:	93 0b       	sbc	r25, r19
   141d0:	63 33       	cpi	r22, 0x33	; 51
   141d2:	71 05       	cpc	r23, r1
   141d4:	81 05       	cpc	r24, r1
   141d6:	91 05       	cpc	r25, r1
   141d8:	90 f1       	brcs	.+100    	; 0x1423e <main+0xfce>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4062
  {
    milis_005s = millis();
   141da:	0e 94 1d 85 	call	0x10a3a	; 0x10a3a <millis>
   141de:	60 93 c3 10 	sts	0x10C3, r22	; 0x8010c3 <milis_005s>
   141e2:	70 93 c4 10 	sts	0x10C4, r23	; 0x8010c4 <milis_005s+0x1>
   141e6:	80 93 c5 10 	sts	0x10C5, r24	; 0x8010c5 <milis_005s+0x2>
   141ea:	90 93 c6 10 	sts	0x10C6, r25	; 0x8010c6 <milis_005s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4065

    /// obsluha adc prevodniku
    if (a2d_run_now == 1)
   141ee:	80 91 d3 0a 	lds	r24, 0x0AD3	; 0x800ad3 <a2d_run_now>
   141f2:	81 30       	cpi	r24, 0x01	; 1
   141f4:	21 f5       	brne	.+72     	; 0x1423e <main+0xfce>
a2d_start_process():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:70
uint8_t start = 0;
uint8_t v = 0;
for(uint8_t i = 0; i < 8; i++)	
	{
	v = (1 << i);
	if ( (a2d_enable & v) != 0 ) 
   141f6:	30 91 cf 0a 	lds	r19, 0x0ACF	; 0x800acf <a2d_enable>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:71
		if ( (a2d_index & v) == 0) 
   141fa:	20 91 d0 0a 	lds	r18, 0x0AD0	; 0x800ad0 <a2d_index>
   141fe:	90 e0       	ldi	r25, 0x00	; 0
   14200:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:69
{
uint8_t start = 0;
uint8_t v = 0;
for(uint8_t i = 0; i < 8; i++)	
	{
	v = (1 << i);
   14202:	61 e0       	ldi	r22, 0x01	; 1
   14204:	70 e0       	ldi	r23, 0x00	; 0
   14206:	ab 01       	movw	r20, r22
   14208:	08 2e       	mov	r0, r24
   1420a:	01 c0       	rjmp	.+2      	; 0x1420e <main+0xf9e>
   1420c:	44 0f       	add	r20, r20
   1420e:	0a 94       	dec	r0
   14210:	ea f7       	brpl	.-6      	; 0x1420c <main+0xf9c>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:70
	if ( (a2d_enable & v) != 0 ) 
   14212:	e3 2f       	mov	r30, r19
   14214:	e4 23       	and	r30, r20
   14216:	09 f4       	brne	.+2      	; 0x1421a <main+0xfaa>
   14218:	65 c0       	rjmp	.+202    	; 0x142e4 <main+0x1074>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:71
		if ( (a2d_index & v) == 0) 
   1421a:	e2 2f       	mov	r30, r18
   1421c:	e4 23       	and	r30, r20
   1421e:	09 f0       	breq	.+2      	; 0x14222 <main+0xfb2>
   14220:	61 c0       	rjmp	.+194    	; 0x142e4 <main+0x1074>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:73
			{
			sbi(a2d_index, i);
   14222:	24 2b       	or	r18, r20
   14224:	20 93 d0 0a 	sts	0x0AD0, r18	; 0x800ad0 <a2d_index>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:74
			a2d_start_first(i);
   14228:	0e 94 2a 87 	call	0x10e54	; 0x10e54 <a2d_start_first(unsigned char)>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4068
    {
      a2d_start_process();
      a2d_run_now = 0;
   1422c:	10 92 d3 0a 	sts	0x0AD3, r1	; 0x800ad3 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4069
      if (a2d_done() == 0) a2d_run_now = 1;
   14230:	80 91 d0 0a 	lds	r24, 0x0AD0	; 0x800ad0 <a2d_index>
   14234:	81 11       	cpse	r24, r1
   14236:	03 c0       	rjmp	.+6      	; 0x1423e <main+0xfce>
   14238:	81 e0       	ldi	r24, 0x01	; 1
   1423a:	80 93 d3 0a 	sts	0x0AD3, r24	; 0x800ad3 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4073
    }
  }

  load = millis() - load_now;
   1423e:	0e 94 1d 85 	call	0x10a3a	; 0x10a3a <millis>
   14242:	dc 01       	movw	r26, r24
   14244:	cb 01       	movw	r24, r22
   14246:	82 19       	sub	r24, r2
   14248:	93 09       	sbc	r25, r3
   1424a:	a4 09       	sbc	r26, r4
   1424c:	b5 09       	sbc	r27, r5
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4074
  if (load < load_min) load_min = load;
   1424e:	00 91 06 02 	lds	r16, 0x0206	; 0x800206 <load_min>
   14252:	10 91 07 02 	lds	r17, 0x0207	; 0x800207 <load_min+0x1>
   14256:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <load_min+0x2>
   1425a:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <load_min+0x3>
   1425e:	80 17       	cp	r24, r16
   14260:	91 07       	cpc	r25, r17
   14262:	a2 07       	cpc	r26, r18
   14264:	b3 07       	cpc	r27, r19
   14266:	40 f4       	brcc	.+16     	; 0x14278 <main+0x1008>
   14268:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <load_min>
   1426c:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <load_min+0x1>
   14270:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <load_min+0x2>
   14274:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <load_min+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4075
  if (load > load_max) load_max = load;
   14278:	00 91 bf 10 	lds	r16, 0x10BF	; 0x8010bf <load_max>
   1427c:	10 91 c0 10 	lds	r17, 0x10C0	; 0x8010c0 <load_max+0x1>
   14280:	20 91 c1 10 	lds	r18, 0x10C1	; 0x8010c1 <load_max+0x2>
   14284:	30 91 c2 10 	lds	r19, 0x10C2	; 0x8010c2 <load_max+0x3>
   14288:	08 17       	cp	r16, r24
   1428a:	19 07       	cpc	r17, r25
   1428c:	2a 07       	cpc	r18, r26
   1428e:	3b 07       	cpc	r19, r27
   14290:	40 f4       	brcc	.+16     	; 0x142a2 <main+0x1032>
   14292:	80 93 bf 10 	sts	0x10BF, r24	; 0x8010bf <load_max>
   14296:	90 93 c0 10 	sts	0x10C0, r25	; 0x8010c0 <load_max+0x1>
   1429a:	a0 93 c1 10 	sts	0x10C1, r26	; 0x8010c1 <load_max+0x2>
   1429e:	b0 93 c2 10 	sts	0x10C2, r27	; 0x8010c2 <load_max+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4078

  /// automaticke nastaveni jasu displaye
  if (light_curr < light_min) light_min = light_curr;
   142a2:	80 91 d1 0a 	lds	r24, 0x0AD1	; 0x800ad1 <light_curr>
   142a6:	90 91 d2 0a 	lds	r25, 0x0AD2	; 0x800ad2 <light_curr+0x1>
   142aa:	20 91 bd 10 	lds	r18, 0x10BD	; 0x8010bd <light_min>
   142ae:	30 91 be 10 	lds	r19, 0x10BE	; 0x8010be <light_min+0x1>
   142b2:	82 17       	cp	r24, r18
   142b4:	93 07       	cpc	r25, r19
   142b6:	20 f4       	brcc	.+8      	; 0x142c0 <main+0x1050>
   142b8:	90 93 be 10 	sts	0x10BE, r25	; 0x8010be <light_min+0x1>
   142bc:	80 93 bd 10 	sts	0x10BD, r24	; 0x8010bd <light_min>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4079
  if (light_curr > light_max) light_max = light_curr;
   142c0:	20 91 bb 10 	lds	r18, 0x10BB	; 0x8010bb <light_max>
   142c4:	30 91 bc 10 	lds	r19, 0x10BC	; 0x8010bc <light_max+0x1>
   142c8:	28 17       	cp	r18, r24
   142ca:	39 07       	cpc	r19, r25
   142cc:	20 f4       	brcc	.+8      	; 0x142d6 <main+0x1066>
   142ce:	90 93 bc 10 	sts	0x10BC, r25	; 0x8010bc <light_max+0x1>
   142d2:	80 93 bb 10 	sts	0x10BB, r24	; 0x8010bb <light_max>
main():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
   142d6:	0e 94 41 78 	call	0xf082	; 0xf082 <serialEventRun()>
   142da:	35 c8       	rjmp	.-3990   	; 0x13346 <main+0xd6>
mereni_hwwire():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:318
            status_tds18s20[w].average_temp[0] = status_tds18s20[w].temp;
            status_tds18s20[w].period_now = uptime & 0xff;
          }
          else
          {
            status_tds18s20[w].online = False;
   142dc:	13 8e       	std	Z+27, r1	; 0x1b
   142de:	63 ce       	rjmp	.-826    	; 0x13fa6 <main+0xd36>
selftest():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3312
void selftest(void)
{
  if (!rtc.isrunning())
    sbi(selftest_data, SELFTEST_ERR_RTC);
  else
    cbi(selftest_data, SELFTEST_ERR_RTC);
   142e0:	9e 7f       	andi	r25, 0xFE	; 254
   142e2:	40 cf       	rjmp	.-384    	; 0x14164 <main+0xef4>
   142e4:	01 96       	adiw	r24, 0x01	; 1
a2d_start_process():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:67
/////////////funkce a2d prevodniku, automaticka spousteni mereni////////////////////////////////////////////////////////
void a2d_start_process(void)
{
uint8_t start = 0;
uint8_t v = 0;
for(uint8_t i = 0; i < 8; i++)	
   142e6:	88 30       	cpi	r24, 0x08	; 8
   142e8:	91 05       	cpc	r25, r1
   142ea:	09 f0       	breq	.+2      	; 0x142ee <main+0x107e>
   142ec:	8c cf       	rjmp	.-232    	; 0x14206 <main+0xf96>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:83
	}

//// pokud jsem jiz zmeril vsechny, tak jedu od zacatku
if (start == 0)
	{
	a2d_index = 0;
   142ee:	10 92 d0 0a 	sts	0x0AD0, r1	; 0x800ad0 <a2d_index>
   142f2:	9c cf       	rjmp	.-200    	; 0x1422c <main+0xfbc>

000142f4 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.57]>:
_Z28thermostat_ring_update_biteshhh.constprop.57():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:204
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
}
void thermostat_ring_update_bites(uint8_t idx, uint8_t bits, uint8_t sets)
   142f4:	1f 93       	push	r17
   142f6:	cf 93       	push	r28
   142f8:	df 93       	push	r29
   142fa:	16 2f       	mov	r17, r22
thermostat_ring_get_status_data():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:193
}
//////////////////////////////////////
//// nastaveni/ziska modu k ringu termostatu
uint8_t thermostat_ring_get_status_data(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites);
   142fc:	91 e2       	ldi	r25, 0x21	; 33
   142fe:	89 9f       	mul	r24, r25
   14300:	e0 01       	movw	r28, r0
   14302:	11 24       	eor	r1, r1
   14304:	c8 5a       	subi	r28, 0xA8	; 168
   14306:	de 4f       	sbci	r29, 0xFE	; 254
   14308:	ce 01       	movw	r24, r28
   1430a:	0e 94 49 8f 	call	0x11e92	; 0x11e92 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
   1430e:	68 2f       	mov	r22, r24
_Z28thermostat_ring_update_biteshhh.constprop.57():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:207
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
}
void thermostat_ring_update_bites(uint8_t idx, uint8_t bits, uint8_t sets)
{
  uint8_t b = thermostat_ring_get_status_data(idx);
  if (sets == 0) cbi(b, bits);
   14310:	11 11       	cpse	r17, r1
   14312:	07 c0       	rjmp	.+14     	; 0x14322 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.57]+0x2e>
   14314:	6e 7f       	andi	r22, 0xFE	; 254
thermostat_ring_set_status_bites():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:202
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
   14316:	ce 01       	movw	r24, r28
_Z28thermostat_ring_update_biteshhh.constprop.57():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:210
{
  uint8_t b = thermostat_ring_get_status_data(idx);
  if (sets == 0) cbi(b, bits);
  else sbi(b, bits);
  thermostat_ring_set_status_bites(idx, b);
}
   14318:	df 91       	pop	r29
   1431a:	cf 91       	pop	r28
   1431c:	1f 91       	pop	r17
thermostat_ring_set_status_bites():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:202
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
   1431e:	0c 94 47 8f 	jmp	0x11e8e	; 0x11e8e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
_Z28thermostat_ring_update_biteshhh.constprop.57():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:208
}
void thermostat_ring_update_bites(uint8_t idx, uint8_t bits, uint8_t sets)
{
  uint8_t b = thermostat_ring_get_status_data(idx);
  if (sets == 0) cbi(b, bits);
  else sbi(b, bits);
   14322:	61 60       	ori	r22, 0x01	; 1
   14324:	f8 cf       	rjmp	.-16     	; 0x14316 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.57]+0x22>

00014326 <dtostrf>:
dtostrf():
   14326:	ef 92       	push	r14
   14328:	0f 93       	push	r16
   1432a:	1f 93       	push	r17
   1432c:	cf 93       	push	r28
   1432e:	df 93       	push	r29
   14330:	e8 01       	movw	r28, r16
   14332:	34 e0       	ldi	r19, 0x04	; 4
   14334:	47 fd       	sbrc	r20, 7
   14336:	34 e1       	ldi	r19, 0x14	; 20
   14338:	04 2e       	mov	r0, r20
   1433a:	00 0c       	add	r0, r0
   1433c:	55 0b       	sbc	r21, r21
   1433e:	57 ff       	sbrs	r21, 7
   14340:	03 c0       	rjmp	.+6      	; 0x14348 <dtostrf+0x22>
   14342:	51 95       	neg	r21
   14344:	41 95       	neg	r20
   14346:	51 09       	sbc	r21, r1
   14348:	e3 2e       	mov	r14, r19
   1434a:	02 2f       	mov	r16, r18
   1434c:	24 2f       	mov	r18, r20
   1434e:	ae 01       	movw	r20, r28
   14350:	0e 94 bd a5 	call	0x14b7a	; 0x14b7a <dtoa_prf>
   14354:	ce 01       	movw	r24, r28
   14356:	df 91       	pop	r29
   14358:	cf 91       	pop	r28
   1435a:	1f 91       	pop	r17
   1435c:	0f 91       	pop	r16
   1435e:	ef 90       	pop	r14
   14360:	08 95       	ret

00014362 <strtoul>:
strtoul():
   14362:	3f 92       	push	r3
   14364:	4f 92       	push	r4
   14366:	5f 92       	push	r5
   14368:	6f 92       	push	r6
   1436a:	7f 92       	push	r7
   1436c:	8f 92       	push	r8
   1436e:	9f 92       	push	r9
   14370:	af 92       	push	r10
   14372:	bf 92       	push	r11
   14374:	cf 92       	push	r12
   14376:	df 92       	push	r13
   14378:	ef 92       	push	r14
   1437a:	ff 92       	push	r15
   1437c:	0f 93       	push	r16
   1437e:	1f 93       	push	r17
   14380:	cf 93       	push	r28
   14382:	df 93       	push	r29
   14384:	5c 01       	movw	r10, r24
   14386:	6b 01       	movw	r12, r22
   14388:	7a 01       	movw	r14, r20
   1438a:	61 15       	cp	r22, r1
   1438c:	71 05       	cpc	r23, r1
   1438e:	19 f0       	breq	.+6      	; 0x14396 <strtoul+0x34>
   14390:	fb 01       	movw	r30, r22
   14392:	91 83       	std	Z+1, r25	; 0x01
   14394:	80 83       	st	Z, r24
   14396:	e1 14       	cp	r14, r1
   14398:	f1 04       	cpc	r15, r1
   1439a:	49 f0       	breq	.+18     	; 0x143ae <strtoul+0x4c>
   1439c:	c7 01       	movw	r24, r14
   1439e:	02 97       	sbiw	r24, 0x02	; 2
   143a0:	83 97       	sbiw	r24, 0x23	; 35
   143a2:	28 f0       	brcs	.+10     	; 0x143ae <strtoul+0x4c>
   143a4:	60 e0       	ldi	r22, 0x00	; 0
   143a6:	70 e0       	ldi	r23, 0x00	; 0
   143a8:	cb 01       	movw	r24, r22
   143aa:	9b c0       	rjmp	.+310    	; 0x144e2 <strtoul+0x180>
   143ac:	5e 01       	movw	r10, r28
   143ae:	e5 01       	movw	r28, r10
   143b0:	21 96       	adiw	r28, 0x01	; 1
   143b2:	f5 01       	movw	r30, r10
   143b4:	10 81       	ld	r17, Z
   143b6:	81 2f       	mov	r24, r17
   143b8:	90 e0       	ldi	r25, 0x00	; 0
   143ba:	0e 94 d6 a2 	call	0x145ac	; 0x145ac <isspace>
   143be:	89 2b       	or	r24, r25
   143c0:	a9 f7       	brne	.-22     	; 0x143ac <strtoul+0x4a>
   143c2:	1d 32       	cpi	r17, 0x2D	; 45
   143c4:	09 f0       	breq	.+2      	; 0x143c8 <strtoul+0x66>
   143c6:	5c c0       	rjmp	.+184    	; 0x14480 <strtoul+0x11e>
   143c8:	21 96       	adiw	r28, 0x01	; 1
   143ca:	f5 01       	movw	r30, r10
   143cc:	11 81       	ldd	r17, Z+1	; 0x01
   143ce:	01 e0       	ldi	r16, 0x01	; 1
   143d0:	e1 14       	cp	r14, r1
   143d2:	f1 04       	cpc	r15, r1
   143d4:	09 f4       	brne	.+2      	; 0x143d8 <strtoul+0x76>
   143d6:	bb c0       	rjmp	.+374    	; 0x1454e <strtoul+0x1ec>
   143d8:	f0 e1       	ldi	r31, 0x10	; 16
   143da:	ef 16       	cp	r14, r31
   143dc:	f1 04       	cpc	r15, r1
   143de:	09 f0       	breq	.+2      	; 0x143e2 <strtoul+0x80>
   143e0:	9b c0       	rjmp	.+310    	; 0x14518 <strtoul+0x1b6>
   143e2:	10 33       	cpi	r17, 0x30	; 48
   143e4:	41 f4       	brne	.+16     	; 0x143f6 <strtoul+0x94>
   143e6:	88 81       	ld	r24, Y
   143e8:	8f 7d       	andi	r24, 0xDF	; 223
   143ea:	88 35       	cpi	r24, 0x58	; 88
   143ec:	09 f0       	breq	.+2      	; 0x143f0 <strtoul+0x8e>
   143ee:	8f c0       	rjmp	.+286    	; 0x1450e <strtoul+0x1ac>
   143f0:	19 81       	ldd	r17, Y+1	; 0x01
   143f2:	22 96       	adiw	r28, 0x02	; 2
   143f4:	02 60       	ori	r16, 0x02	; 2
   143f6:	e0 e1       	ldi	r30, 0x10	; 16
   143f8:	ee 2e       	mov	r14, r30
   143fa:	f1 2c       	mov	r15, r1
   143fc:	88 24       	eor	r8, r8
   143fe:	8a 94       	dec	r8
   14400:	98 2c       	mov	r9, r8
   14402:	a8 2c       	mov	r10, r8
   14404:	ff e0       	ldi	r31, 0x0F	; 15
   14406:	bf 2e       	mov	r11, r31
   14408:	20 e0       	ldi	r18, 0x00	; 0
   1440a:	60 e0       	ldi	r22, 0x00	; 0
   1440c:	70 e0       	ldi	r23, 0x00	; 0
   1440e:	cb 01       	movw	r24, r22
   14410:	27 01       	movw	r4, r14
   14412:	0f 2c       	mov	r0, r15
   14414:	00 0c       	add	r0, r0
   14416:	66 08       	sbc	r6, r6
   14418:	77 08       	sbc	r7, r7
   1441a:	fe 01       	movw	r30, r28
   1441c:	50 ed       	ldi	r21, 0xD0	; 208
   1441e:	35 2e       	mov	r3, r21
   14420:	31 0e       	add	r3, r17
   14422:	39 e0       	ldi	r19, 0x09	; 9
   14424:	33 15       	cp	r19, r3
   14426:	68 f4       	brcc	.+26     	; 0x14442 <strtoul+0xe0>
   14428:	3f eb       	ldi	r19, 0xBF	; 191
   1442a:	31 0f       	add	r19, r17
   1442c:	49 ec       	ldi	r20, 0xC9	; 201
   1442e:	34 2e       	mov	r3, r20
   14430:	3a 31       	cpi	r19, 0x1A	; 26
   14432:	30 f0       	brcs	.+12     	; 0x14440 <strtoul+0xde>
   14434:	3f e9       	ldi	r19, 0x9F	; 159
   14436:	31 0f       	add	r19, r17
   14438:	3a 31       	cpi	r19, 0x1A	; 26
   1443a:	b0 f5       	brcc	.+108    	; 0x144a8 <strtoul+0x146>
   1443c:	39 ea       	ldi	r19, 0xA9	; 169
   1443e:	33 2e       	mov	r3, r19
   14440:	31 0e       	add	r3, r17
   14442:	3e 14       	cp	r3, r14
   14444:	1f 04       	cpc	r1, r15
   14446:	84 f5       	brge	.+96     	; 0x144a8 <strtoul+0x146>
   14448:	2f 3f       	cpi	r18, 0xFF	; 255
   1444a:	b9 f0       	breq	.+46     	; 0x1447a <strtoul+0x118>
   1444c:	86 16       	cp	r8, r22
   1444e:	97 06       	cpc	r9, r23
   14450:	a8 06       	cpc	r10, r24
   14452:	b9 06       	cpc	r11, r25
   14454:	38 f1       	brcs	.+78     	; 0x144a4 <strtoul+0x142>
   14456:	a3 01       	movw	r20, r6
   14458:	92 01       	movw	r18, r4
   1445a:	0e 94 a1 ac 	call	0x15942	; 0x15942 <__mulsi3>
   1445e:	23 2d       	mov	r18, r3
   14460:	30 e0       	ldi	r19, 0x00	; 0
   14462:	50 e0       	ldi	r21, 0x00	; 0
   14464:	40 e0       	ldi	r20, 0x00	; 0
   14466:	62 0f       	add	r22, r18
   14468:	73 1f       	adc	r23, r19
   1446a:	84 1f       	adc	r24, r20
   1446c:	95 1f       	adc	r25, r21
   1446e:	62 17       	cp	r22, r18
   14470:	73 07       	cpc	r23, r19
   14472:	84 07       	cpc	r24, r20
   14474:	95 07       	cpc	r25, r21
   14476:	b0 f0       	brcs	.+44     	; 0x144a4 <strtoul+0x142>
   14478:	21 e0       	ldi	r18, 0x01	; 1
   1447a:	21 96       	adiw	r28, 0x01	; 1
   1447c:	10 81       	ld	r17, Z
   1447e:	cd cf       	rjmp	.-102    	; 0x1441a <strtoul+0xb8>
   14480:	1b 32       	cpi	r17, 0x2B	; 43
   14482:	21 f4       	brne	.+8      	; 0x1448c <strtoul+0x12a>
   14484:	e5 01       	movw	r28, r10
   14486:	22 96       	adiw	r28, 0x02	; 2
   14488:	f5 01       	movw	r30, r10
   1448a:	11 81       	ldd	r17, Z+1	; 0x01
   1448c:	00 e0       	ldi	r16, 0x00	; 0
   1448e:	a0 cf       	rjmp	.-192    	; 0x143d0 <strtoul+0x6e>
   14490:	78 e0       	ldi	r23, 0x08	; 8
   14492:	e7 2e       	mov	r14, r23
   14494:	f1 2c       	mov	r15, r1
   14496:	88 24       	eor	r8, r8
   14498:	8a 94       	dec	r8
   1449a:	98 2c       	mov	r9, r8
   1449c:	a8 2c       	mov	r10, r8
   1449e:	6f e1       	ldi	r22, 0x1F	; 31
   144a0:	b6 2e       	mov	r11, r22
   144a2:	b2 cf       	rjmp	.-156    	; 0x14408 <strtoul+0xa6>
   144a4:	2f ef       	ldi	r18, 0xFF	; 255
   144a6:	e9 cf       	rjmp	.-46     	; 0x1447a <strtoul+0x118>
   144a8:	c1 14       	cp	r12, r1
   144aa:	d1 04       	cpc	r13, r1
   144ac:	31 f0       	breq	.+12     	; 0x144ba <strtoul+0x158>
   144ae:	22 23       	and	r18, r18
   144b0:	51 f1       	breq	.+84     	; 0x14506 <strtoul+0x1a4>
   144b2:	21 97       	sbiw	r28, 0x01	; 1
   144b4:	f6 01       	movw	r30, r12
   144b6:	d1 83       	std	Z+1, r29	; 0x01
   144b8:	c0 83       	st	Z, r28
   144ba:	00 ff       	sbrs	r16, 0
   144bc:	07 c0       	rjmp	.+14     	; 0x144cc <strtoul+0x16a>
   144be:	90 95       	com	r25
   144c0:	80 95       	com	r24
   144c2:	70 95       	com	r23
   144c4:	61 95       	neg	r22
   144c6:	7f 4f       	sbci	r23, 0xFF	; 255
   144c8:	8f 4f       	sbci	r24, 0xFF	; 255
   144ca:	9f 4f       	sbci	r25, 0xFF	; 255
   144cc:	2f 3f       	cpi	r18, 0xFF	; 255
   144ce:	49 f4       	brne	.+18     	; 0x144e2 <strtoul+0x180>
   144d0:	82 e2       	ldi	r24, 0x22	; 34
   144d2:	90 e0       	ldi	r25, 0x00	; 0
   144d4:	90 93 3c 13 	sts	0x133C, r25	; 0x80133c <errno+0x1>
   144d8:	80 93 3b 13 	sts	0x133B, r24	; 0x80133b <errno>
   144dc:	6f ef       	ldi	r22, 0xFF	; 255
   144de:	7f ef       	ldi	r23, 0xFF	; 255
   144e0:	cb 01       	movw	r24, r22
   144e2:	df 91       	pop	r29
   144e4:	cf 91       	pop	r28
   144e6:	1f 91       	pop	r17
   144e8:	0f 91       	pop	r16
   144ea:	ff 90       	pop	r15
   144ec:	ef 90       	pop	r14
   144ee:	df 90       	pop	r13
   144f0:	cf 90       	pop	r12
   144f2:	bf 90       	pop	r11
   144f4:	af 90       	pop	r10
   144f6:	9f 90       	pop	r9
   144f8:	8f 90       	pop	r8
   144fa:	7f 90       	pop	r7
   144fc:	6f 90       	pop	r6
   144fe:	5f 90       	pop	r5
   14500:	4f 90       	pop	r4
   14502:	3f 90       	pop	r3
   14504:	08 95       	ret
   14506:	01 ff       	sbrs	r16, 1
   14508:	d8 cf       	rjmp	.-80     	; 0x144ba <strtoul+0x158>
   1450a:	22 97       	sbiw	r28, 0x02	; 2
   1450c:	d3 cf       	rjmp	.-90     	; 0x144b4 <strtoul+0x152>
   1450e:	10 e3       	ldi	r17, 0x30	; 48
   14510:	e1 14       	cp	r14, r1
   14512:	f1 04       	cpc	r15, r1
   14514:	09 f4       	brne	.+2      	; 0x14518 <strtoul+0x1b6>
   14516:	bc cf       	rjmp	.-136    	; 0x14490 <strtoul+0x12e>
   14518:	3a e0       	ldi	r19, 0x0A	; 10
   1451a:	e3 16       	cp	r14, r19
   1451c:	f1 04       	cpc	r15, r1
   1451e:	e9 f0       	breq	.+58     	; 0x1455a <strtoul+0x1f8>
   14520:	80 e1       	ldi	r24, 0x10	; 16
   14522:	e8 16       	cp	r14, r24
   14524:	f1 04       	cpc	r15, r1
   14526:	09 f4       	brne	.+2      	; 0x1452a <strtoul+0x1c8>
   14528:	66 cf       	rjmp	.-308    	; 0x143f6 <strtoul+0x94>
   1452a:	e8 e0       	ldi	r30, 0x08	; 8
   1452c:	ee 16       	cp	r14, r30
   1452e:	f1 04       	cpc	r15, r1
   14530:	09 f4       	brne	.+2      	; 0x14534 <strtoul+0x1d2>
   14532:	b1 cf       	rjmp	.-158    	; 0x14496 <strtoul+0x134>
   14534:	6f ef       	ldi	r22, 0xFF	; 255
   14536:	7f ef       	ldi	r23, 0xFF	; 255
   14538:	cb 01       	movw	r24, r22
   1453a:	97 01       	movw	r18, r14
   1453c:	0f 2c       	mov	r0, r15
   1453e:	00 0c       	add	r0, r0
   14540:	44 0b       	sbc	r20, r20
   14542:	55 0b       	sbc	r21, r21
   14544:	0e 94 d9 ac 	call	0x159b2	; 0x159b2 <__udivmodsi4>
   14548:	49 01       	movw	r8, r18
   1454a:	5a 01       	movw	r10, r20
   1454c:	5d cf       	rjmp	.-326    	; 0x14408 <strtoul+0xa6>
   1454e:	10 33       	cpi	r17, 0x30	; 48
   14550:	09 f4       	brne	.+2      	; 0x14554 <strtoul+0x1f2>
   14552:	49 cf       	rjmp	.-366    	; 0x143e6 <strtoul+0x84>
   14554:	9a e0       	ldi	r25, 0x0A	; 10
   14556:	e9 2e       	mov	r14, r25
   14558:	f1 2c       	mov	r15, r1
   1455a:	89 e9       	ldi	r24, 0x99	; 153
   1455c:	88 2e       	mov	r8, r24
   1455e:	98 2c       	mov	r9, r8
   14560:	a8 2c       	mov	r10, r8
   14562:	89 e1       	ldi	r24, 0x19	; 25
   14564:	b8 2e       	mov	r11, r24
   14566:	50 cf       	rjmp	.-352    	; 0x14408 <strtoul+0xa6>

00014568 <atof>:
atof():
   14568:	66 27       	eor	r22, r22
   1456a:	77 27       	eor	r23, r23
   1456c:	0c 94 5b a8 	jmp	0x150b6	; 0x150b6 <strtod>

00014570 <atoi>:
atoi():
   14570:	fc 01       	movw	r30, r24
   14572:	88 27       	eor	r24, r24
   14574:	99 27       	eor	r25, r25
   14576:	e8 94       	clt
   14578:	21 91       	ld	r18, Z+
   1457a:	20 32       	cpi	r18, 0x20	; 32
   1457c:	e9 f3       	breq	.-6      	; 0x14578 <atoi+0x8>
   1457e:	29 30       	cpi	r18, 0x09	; 9
   14580:	10 f0       	brcs	.+4      	; 0x14586 <atoi+0x16>
   14582:	2e 30       	cpi	r18, 0x0E	; 14
   14584:	c8 f3       	brcs	.-14     	; 0x14578 <atoi+0x8>
   14586:	2b 32       	cpi	r18, 0x2B	; 43
   14588:	41 f0       	breq	.+16     	; 0x1459a <atoi+0x2a>
   1458a:	2d 32       	cpi	r18, 0x2D	; 45
   1458c:	39 f4       	brne	.+14     	; 0x1459c <atoi+0x2c>
   1458e:	68 94       	set
   14590:	04 c0       	rjmp	.+8      	; 0x1459a <atoi+0x2a>
   14592:	0e 94 32 a3 	call	0x14664	; 0x14664 <__mulhi_const_10>
   14596:	82 0f       	add	r24, r18
   14598:	91 1d       	adc	r25, r1
   1459a:	21 91       	ld	r18, Z+
   1459c:	20 53       	subi	r18, 0x30	; 48
   1459e:	2a 30       	cpi	r18, 0x0A	; 10
   145a0:	c0 f3       	brcs	.-16     	; 0x14592 <atoi+0x22>
   145a2:	1e f4       	brtc	.+6      	; 0x145aa <atoi+0x3a>
   145a4:	90 95       	com	r25
   145a6:	81 95       	neg	r24
   145a8:	9f 4f       	sbci	r25, 0xFF	; 255
   145aa:	08 95       	ret

000145ac <isspace>:
isspace():
   145ac:	91 11       	cpse	r25, r1
   145ae:	0c 94 91 aa 	jmp	0x15522	; 0x15522 <__ctype_isfalse>
   145b2:	80 32       	cpi	r24, 0x20	; 32
   145b4:	19 f0       	breq	.+6      	; 0x145bc <isspace+0x10>
   145b6:	89 50       	subi	r24, 0x09	; 9
   145b8:	85 50       	subi	r24, 0x05	; 5
   145ba:	c8 f7       	brcc	.-14     	; 0x145ae <isspace+0x2>
   145bc:	08 95       	ret

000145be <strcat_P>:
strcat_P():
   145be:	fb 01       	movw	r30, r22
   145c0:	dc 01       	movw	r26, r24
   145c2:	0d 90       	ld	r0, X+
   145c4:	00 20       	and	r0, r0
   145c6:	e9 f7       	brne	.-6      	; 0x145c2 <strcat_P+0x4>
   145c8:	11 97       	sbiw	r26, 0x01	; 1
   145ca:	05 90       	lpm	r0, Z+
   145cc:	0d 92       	st	X+, r0
   145ce:	00 20       	and	r0, r0
   145d0:	e1 f7       	brne	.-8      	; 0x145ca <strcat_P+0xc>
   145d2:	08 95       	ret

000145d4 <strcpy_P>:
strcpy_P():
   145d4:	fb 01       	movw	r30, r22
   145d6:	dc 01       	movw	r26, r24
   145d8:	05 90       	lpm	r0, Z+
   145da:	0d 92       	st	X+, r0
   145dc:	00 20       	and	r0, r0
   145de:	e1 f7       	brne	.-8      	; 0x145d8 <strcpy_P+0x4>
   145e0:	08 95       	ret

000145e2 <strtok>:
strtok():
   145e2:	43 e2       	ldi	r20, 0x23	; 35
   145e4:	53 e1       	ldi	r21, 0x13	; 19
   145e6:	0c 94 f5 a2 	jmp	0x145ea	; 0x145ea <strtok_r>

000145ea <strtok_r>:
strtok_r():
   145ea:	fa 01       	movw	r30, r20
   145ec:	a1 91       	ld	r26, Z+
   145ee:	b0 81       	ld	r27, Z
   145f0:	00 97       	sbiw	r24, 0x00	; 0
   145f2:	19 f4       	brne	.+6      	; 0x145fa <strtok_r+0x10>
   145f4:	10 97       	sbiw	r26, 0x00	; 0
   145f6:	e1 f0       	breq	.+56     	; 0x14630 <strtok_r+0x46>
   145f8:	cd 01       	movw	r24, r26
   145fa:	dc 01       	movw	r26, r24
   145fc:	cd 01       	movw	r24, r26
   145fe:	0d 90       	ld	r0, X+
   14600:	00 20       	and	r0, r0
   14602:	11 f4       	brne	.+4      	; 0x14608 <strtok_r+0x1e>
   14604:	c0 01       	movw	r24, r0
   14606:	13 c0       	rjmp	.+38     	; 0x1462e <strtok_r+0x44>
   14608:	fb 01       	movw	r30, r22
   1460a:	21 91       	ld	r18, Z+
   1460c:	22 23       	and	r18, r18
   1460e:	19 f0       	breq	.+6      	; 0x14616 <strtok_r+0x2c>
   14610:	20 15       	cp	r18, r0
   14612:	d9 f7       	brne	.-10     	; 0x1460a <strtok_r+0x20>
   14614:	f3 cf       	rjmp	.-26     	; 0x145fc <strtok_r+0x12>
   14616:	fb 01       	movw	r30, r22
   14618:	21 91       	ld	r18, Z+
   1461a:	20 15       	cp	r18, r0
   1461c:	19 f4       	brne	.+6      	; 0x14624 <strtok_r+0x3a>
   1461e:	1e 92       	st	-X, r1
   14620:	11 96       	adiw	r26, 0x01	; 1
   14622:	06 c0       	rjmp	.+12     	; 0x14630 <strtok_r+0x46>
   14624:	22 23       	and	r18, r18
   14626:	c1 f7       	brne	.-16     	; 0x14618 <strtok_r+0x2e>
   14628:	0d 90       	ld	r0, X+
   1462a:	00 20       	and	r0, r0
   1462c:	a1 f7       	brne	.-24     	; 0x14616 <strtok_r+0x2c>
   1462e:	d0 01       	movw	r26, r0
   14630:	fa 01       	movw	r30, r20
   14632:	a1 93       	st	Z+, r26
   14634:	b0 83       	st	Z, r27
   14636:	08 95       	ret

00014638 <itoa>:
itoa():
   14638:	45 32       	cpi	r20, 0x25	; 37
   1463a:	51 05       	cpc	r21, r1
   1463c:	20 f4       	brcc	.+8      	; 0x14646 <itoa+0xe>
   1463e:	42 30       	cpi	r20, 0x02	; 2
   14640:	10 f0       	brcs	.+4      	; 0x14646 <itoa+0xe>
   14642:	0c 94 27 a3 	jmp	0x1464e	; 0x1464e <__itoa_ncheck>
   14646:	fb 01       	movw	r30, r22
   14648:	10 82       	st	Z, r1
   1464a:	cb 01       	movw	r24, r22
   1464c:	08 95       	ret

0001464e <__itoa_ncheck>:
__itoa_ncheck():
   1464e:	bb 27       	eor	r27, r27
   14650:	4a 30       	cpi	r20, 0x0A	; 10
   14652:	31 f4       	brne	.+12     	; 0x14660 <__itoa_ncheck+0x12>
   14654:	99 23       	and	r25, r25
   14656:	22 f4       	brpl	.+8      	; 0x14660 <__itoa_ncheck+0x12>
   14658:	bd e2       	ldi	r27, 0x2D	; 45
   1465a:	90 95       	com	r25
   1465c:	81 95       	neg	r24
   1465e:	9f 4f       	sbci	r25, 0xFF	; 255
   14660:	0c 94 3b a3 	jmp	0x14676	; 0x14676 <__utoa_common>

00014664 <__mulhi_const_10>:
__mulhi_const_10():
   14664:	7a e0       	ldi	r23, 0x0A	; 10
   14666:	97 9f       	mul	r25, r23
   14668:	90 2d       	mov	r25, r0
   1466a:	87 9f       	mul	r24, r23
   1466c:	80 2d       	mov	r24, r0
   1466e:	91 0d       	add	r25, r1
   14670:	11 24       	eor	r1, r1
   14672:	08 95       	ret

00014674 <__utoa_ncheck>:
__utoa_ncheck():
   14674:	bb 27       	eor	r27, r27

00014676 <__utoa_common>:
   14676:	fb 01       	movw	r30, r22
   14678:	55 27       	eor	r21, r21
   1467a:	aa 27       	eor	r26, r26
   1467c:	88 0f       	add	r24, r24
   1467e:	99 1f       	adc	r25, r25
   14680:	aa 1f       	adc	r26, r26
   14682:	a4 17       	cp	r26, r20
   14684:	10 f0       	brcs	.+4      	; 0x1468a <__utoa_common+0x14>
   14686:	a4 1b       	sub	r26, r20
   14688:	83 95       	inc	r24
   1468a:	50 51       	subi	r21, 0x10	; 16
   1468c:	b9 f7       	brne	.-18     	; 0x1467c <__utoa_common+0x6>
   1468e:	a0 5d       	subi	r26, 0xD0	; 208
   14690:	aa 33       	cpi	r26, 0x3A	; 58
   14692:	08 f0       	brcs	.+2      	; 0x14696 <__utoa_common+0x20>
   14694:	a9 5d       	subi	r26, 0xD9	; 217
   14696:	a1 93       	st	Z+, r26
   14698:	00 97       	sbiw	r24, 0x00	; 0
   1469a:	79 f7       	brne	.-34     	; 0x1467a <__utoa_common+0x4>
   1469c:	b1 11       	cpse	r27, r1
   1469e:	b1 93       	st	Z+, r27
   146a0:	11 92       	st	Z+, r1
   146a2:	cb 01       	movw	r24, r22
   146a4:	0c 94 c9 aa 	jmp	0x15592	; 0x15592 <strrev>

000146a8 <fdevopen>:
fdevopen():
   146a8:	0f 93       	push	r16
   146aa:	1f 93       	push	r17
   146ac:	cf 93       	push	r28
   146ae:	df 93       	push	r29
   146b0:	00 97       	sbiw	r24, 0x00	; 0
   146b2:	59 f4       	brne	.+22     	; 0x146ca <fdevopen+0x22>
   146b4:	61 15       	cp	r22, r1
   146b6:	71 05       	cpc	r23, r1
   146b8:	41 f4       	brne	.+16     	; 0x146ca <fdevopen+0x22>
   146ba:	f0 e0       	ldi	r31, 0x00	; 0
   146bc:	e0 e0       	ldi	r30, 0x00	; 0
   146be:	cf 01       	movw	r24, r30
   146c0:	df 91       	pop	r29
   146c2:	cf 91       	pop	r28
   146c4:	1f 91       	pop	r17
   146c6:	0f 91       	pop	r16
   146c8:	08 95       	ret
   146ca:	8b 01       	movw	r16, r22
   146cc:	ec 01       	movw	r28, r24
   146ce:	6e e0       	ldi	r22, 0x0E	; 14
   146d0:	70 e0       	ldi	r23, 0x00	; 0
   146d2:	81 e0       	ldi	r24, 0x01	; 1
   146d4:	90 e0       	ldi	r25, 0x00	; 0
   146d6:	0e 94 a1 a5 	call	0x14b42	; 0x14b42 <calloc>
   146da:	fc 01       	movw	r30, r24
   146dc:	89 2b       	or	r24, r25
   146de:	69 f3       	breq	.-38     	; 0x146ba <fdevopen+0x12>
   146e0:	80 e8       	ldi	r24, 0x80	; 128
   146e2:	83 83       	std	Z+3, r24	; 0x03
   146e4:	01 15       	cp	r16, r1
   146e6:	11 05       	cpc	r17, r1
   146e8:	71 f0       	breq	.+28     	; 0x14706 <fdevopen+0x5e>
   146ea:	13 87       	std	Z+11, r17	; 0x0b
   146ec:	02 87       	std	Z+10, r16	; 0x0a
   146ee:	81 e8       	ldi	r24, 0x81	; 129
   146f0:	83 83       	std	Z+3, r24	; 0x03
   146f2:	80 91 25 13 	lds	r24, 0x1325	; 0x801325 <__iob>
   146f6:	90 91 26 13 	lds	r25, 0x1326	; 0x801326 <__iob+0x1>
   146fa:	89 2b       	or	r24, r25
   146fc:	21 f4       	brne	.+8      	; 0x14706 <fdevopen+0x5e>
   146fe:	f0 93 26 13 	sts	0x1326, r31	; 0x801326 <__iob+0x1>
   14702:	e0 93 25 13 	sts	0x1325, r30	; 0x801325 <__iob>
   14706:	20 97       	sbiw	r28, 0x00	; 0
   14708:	d1 f2       	breq	.-76     	; 0x146be <fdevopen+0x16>
   1470a:	d1 87       	std	Z+9, r29	; 0x09
   1470c:	c0 87       	std	Z+8, r28	; 0x08
   1470e:	83 81       	ldd	r24, Z+3	; 0x03
   14710:	82 60       	ori	r24, 0x02	; 2
   14712:	83 83       	std	Z+3, r24	; 0x03
   14714:	80 91 27 13 	lds	r24, 0x1327	; 0x801327 <__iob+0x2>
   14718:	90 91 28 13 	lds	r25, 0x1328	; 0x801328 <__iob+0x3>
   1471c:	89 2b       	or	r24, r25
   1471e:	79 f6       	brne	.-98     	; 0x146be <fdevopen+0x16>
   14720:	f0 93 28 13 	sts	0x1328, r31	; 0x801328 <__iob+0x3>
   14724:	e0 93 27 13 	sts	0x1327, r30	; 0x801327 <__iob+0x2>
   14728:	80 91 29 13 	lds	r24, 0x1329	; 0x801329 <__iob+0x4>
   1472c:	90 91 2a 13 	lds	r25, 0x132A	; 0x80132a <__iob+0x5>
   14730:	89 2b       	or	r24, r25
   14732:	29 f6       	brne	.-118    	; 0x146be <fdevopen+0x16>
   14734:	f0 93 2a 13 	sts	0x132A, r31	; 0x80132a <__iob+0x5>
   14738:	e0 93 29 13 	sts	0x1329, r30	; 0x801329 <__iob+0x4>
   1473c:	c0 cf       	rjmp	.-128    	; 0x146be <fdevopen+0x16>

0001473e <vfprintf>:
vfprintf():
   1473e:	2f 92       	push	r2
   14740:	3f 92       	push	r3
   14742:	4f 92       	push	r4
   14744:	5f 92       	push	r5
   14746:	6f 92       	push	r6
   14748:	7f 92       	push	r7
   1474a:	8f 92       	push	r8
   1474c:	9f 92       	push	r9
   1474e:	af 92       	push	r10
   14750:	bf 92       	push	r11
   14752:	cf 92       	push	r12
   14754:	df 92       	push	r13
   14756:	ef 92       	push	r14
   14758:	ff 92       	push	r15
   1475a:	0f 93       	push	r16
   1475c:	1f 93       	push	r17
   1475e:	cf 93       	push	r28
   14760:	df 93       	push	r29
   14762:	00 d0       	rcall	.+0      	; 0x14764 <vfprintf+0x26>
   14764:	00 d0       	rcall	.+0      	; 0x14766 <vfprintf+0x28>
   14766:	00 d0       	rcall	.+0      	; 0x14768 <vfprintf+0x2a>
   14768:	1f 92       	push	r1
   1476a:	1f 92       	push	r1
   1476c:	cd b7       	in	r28, 0x3d	; 61
   1476e:	de b7       	in	r29, 0x3e	; 62
   14770:	7c 01       	movw	r14, r24
   14772:	3b 01       	movw	r6, r22
   14774:	8a 01       	movw	r16, r20
   14776:	fc 01       	movw	r30, r24
   14778:	17 82       	std	Z+7, r1	; 0x07
   1477a:	16 82       	std	Z+6, r1	; 0x06
   1477c:	83 81       	ldd	r24, Z+3	; 0x03
   1477e:	81 ff       	sbrs	r24, 1
   14780:	dd c1       	rjmp	.+954    	; 0x14b3c <vfprintf+0x3fe>
   14782:	ce 01       	movw	r24, r28
   14784:	01 96       	adiw	r24, 0x01	; 1
   14786:	5c 01       	movw	r10, r24
   14788:	f7 01       	movw	r30, r14
   1478a:	93 81       	ldd	r25, Z+3	; 0x03
   1478c:	f3 01       	movw	r30, r6
   1478e:	93 fd       	sbrc	r25, 3
   14790:	85 91       	lpm	r24, Z+
   14792:	93 ff       	sbrs	r25, 3
   14794:	81 91       	ld	r24, Z+
   14796:	3f 01       	movw	r6, r30
   14798:	88 23       	and	r24, r24
   1479a:	09 f4       	brne	.+2      	; 0x1479e <vfprintf+0x60>
   1479c:	53 c1       	rjmp	.+678    	; 0x14a44 <vfprintf+0x306>
   1479e:	85 32       	cpi	r24, 0x25	; 37
   147a0:	39 f4       	brne	.+14     	; 0x147b0 <vfprintf+0x72>
   147a2:	93 fd       	sbrc	r25, 3
   147a4:	85 91       	lpm	r24, Z+
   147a6:	93 ff       	sbrs	r25, 3
   147a8:	81 91       	ld	r24, Z+
   147aa:	3f 01       	movw	r6, r30
   147ac:	85 32       	cpi	r24, 0x25	; 37
   147ae:	29 f4       	brne	.+10     	; 0x147ba <vfprintf+0x7c>
   147b0:	b7 01       	movw	r22, r14
   147b2:	90 e0       	ldi	r25, 0x00	; 0
   147b4:	0e 94 d9 aa 	call	0x155b2	; 0x155b2 <fputc>
   147b8:	e7 cf       	rjmp	.-50     	; 0x14788 <vfprintf+0x4a>
   147ba:	91 2c       	mov	r9, r1
   147bc:	21 2c       	mov	r2, r1
   147be:	31 2c       	mov	r3, r1
   147c0:	ff e1       	ldi	r31, 0x1F	; 31
   147c2:	f3 15       	cp	r31, r3
   147c4:	38 f0       	brcs	.+14     	; 0x147d4 <vfprintf+0x96>
   147c6:	8b 32       	cpi	r24, 0x2B	; 43
   147c8:	11 f1       	breq	.+68     	; 0x1480e <vfprintf+0xd0>
   147ca:	90 f4       	brcc	.+36     	; 0x147f0 <vfprintf+0xb2>
   147cc:	80 32       	cpi	r24, 0x20	; 32
   147ce:	09 f1       	breq	.+66     	; 0x14812 <vfprintf+0xd4>
   147d0:	83 32       	cpi	r24, 0x23	; 35
   147d2:	29 f1       	breq	.+74     	; 0x1481e <vfprintf+0xe0>
   147d4:	37 fc       	sbrc	r3, 7
   147d6:	3c c0       	rjmp	.+120    	; 0x14850 <vfprintf+0x112>
   147d8:	20 ed       	ldi	r18, 0xD0	; 208
   147da:	28 0f       	add	r18, r24
   147dc:	2a 30       	cpi	r18, 0x0A	; 10
   147de:	50 f5       	brcc	.+84     	; 0x14834 <vfprintf+0xf6>
   147e0:	36 fe       	sbrs	r3, 6
   147e2:	20 c0       	rjmp	.+64     	; 0x14824 <vfprintf+0xe6>
   147e4:	8a e0       	ldi	r24, 0x0A	; 10
   147e6:	98 9e       	mul	r9, r24
   147e8:	20 0d       	add	r18, r0
   147ea:	11 24       	eor	r1, r1
   147ec:	92 2e       	mov	r9, r18
   147ee:	06 c0       	rjmp	.+12     	; 0x147fc <vfprintf+0xbe>
   147f0:	8d 32       	cpi	r24, 0x2D	; 45
   147f2:	91 f0       	breq	.+36     	; 0x14818 <vfprintf+0xda>
   147f4:	80 33       	cpi	r24, 0x30	; 48
   147f6:	71 f7       	brne	.-36     	; 0x147d4 <vfprintf+0x96>
   147f8:	68 94       	set
   147fa:	30 f8       	bld	r3, 0
   147fc:	f3 01       	movw	r30, r6
   147fe:	93 fd       	sbrc	r25, 3
   14800:	85 91       	lpm	r24, Z+
   14802:	93 ff       	sbrs	r25, 3
   14804:	81 91       	ld	r24, Z+
   14806:	3f 01       	movw	r6, r30
   14808:	81 11       	cpse	r24, r1
   1480a:	da cf       	rjmp	.-76     	; 0x147c0 <vfprintf+0x82>
   1480c:	21 c0       	rjmp	.+66     	; 0x14850 <vfprintf+0x112>
   1480e:	68 94       	set
   14810:	31 f8       	bld	r3, 1
   14812:	68 94       	set
   14814:	32 f8       	bld	r3, 2
   14816:	f2 cf       	rjmp	.-28     	; 0x147fc <vfprintf+0xbe>
   14818:	68 94       	set
   1481a:	33 f8       	bld	r3, 3
   1481c:	ef cf       	rjmp	.-34     	; 0x147fc <vfprintf+0xbe>
   1481e:	68 94       	set
   14820:	34 f8       	bld	r3, 4
   14822:	ec cf       	rjmp	.-40     	; 0x147fc <vfprintf+0xbe>
   14824:	ea e0       	ldi	r30, 0x0A	; 10
   14826:	2e 9e       	mul	r2, r30
   14828:	20 0d       	add	r18, r0
   1482a:	11 24       	eor	r1, r1
   1482c:	22 2e       	mov	r2, r18
   1482e:	68 94       	set
   14830:	35 f8       	bld	r3, 5
   14832:	e4 cf       	rjmp	.-56     	; 0x147fc <vfprintf+0xbe>
   14834:	8e 32       	cpi	r24, 0x2E	; 46
   14836:	29 f4       	brne	.+10     	; 0x14842 <vfprintf+0x104>
   14838:	36 fc       	sbrc	r3, 6
   1483a:	04 c1       	rjmp	.+520    	; 0x14a44 <vfprintf+0x306>
   1483c:	68 94       	set
   1483e:	36 f8       	bld	r3, 6
   14840:	dd cf       	rjmp	.-70     	; 0x147fc <vfprintf+0xbe>
   14842:	8c 36       	cpi	r24, 0x6C	; 108
   14844:	19 f4       	brne	.+6      	; 0x1484c <vfprintf+0x10e>
   14846:	68 94       	set
   14848:	37 f8       	bld	r3, 7
   1484a:	d8 cf       	rjmp	.-80     	; 0x147fc <vfprintf+0xbe>
   1484c:	88 36       	cpi	r24, 0x68	; 104
   1484e:	b1 f2       	breq	.-84     	; 0x147fc <vfprintf+0xbe>
   14850:	98 2f       	mov	r25, r24
   14852:	9f 7d       	andi	r25, 0xDF	; 223
   14854:	95 54       	subi	r25, 0x45	; 69
   14856:	93 30       	cpi	r25, 0x03	; 3
   14858:	e0 f0       	brcs	.+56     	; 0x14892 <vfprintf+0x154>
   1485a:	83 36       	cpi	r24, 0x63	; 99
   1485c:	a1 f1       	breq	.+104    	; 0x148c6 <vfprintf+0x188>
   1485e:	83 37       	cpi	r24, 0x73	; 115
   14860:	c1 f1       	breq	.+112    	; 0x148d2 <vfprintf+0x194>
   14862:	83 35       	cpi	r24, 0x53	; 83
   14864:	09 f0       	breq	.+2      	; 0x14868 <vfprintf+0x12a>
   14866:	63 c0       	rjmp	.+198    	; 0x1492e <vfprintf+0x1f0>
   14868:	28 01       	movw	r4, r16
   1486a:	f2 e0       	ldi	r31, 0x02	; 2
   1486c:	4f 0e       	add	r4, r31
   1486e:	51 1c       	adc	r5, r1
   14870:	f8 01       	movw	r30, r16
   14872:	c0 80       	ld	r12, Z
   14874:	d1 80       	ldd	r13, Z+1	; 0x01
   14876:	69 2d       	mov	r22, r9
   14878:	70 e0       	ldi	r23, 0x00	; 0
   1487a:	36 fc       	sbrc	r3, 6
   1487c:	02 c0       	rjmp	.+4      	; 0x14882 <vfprintf+0x144>
   1487e:	6f ef       	ldi	r22, 0xFF	; 255
   14880:	7f ef       	ldi	r23, 0xFF	; 255
   14882:	c6 01       	movw	r24, r12
   14884:	0e 94 ac aa 	call	0x15558	; 0x15558 <strnlen_P>
   14888:	4c 01       	movw	r8, r24
   1488a:	68 94       	set
   1488c:	37 f8       	bld	r3, 7
   1488e:	82 01       	movw	r16, r4
   14890:	0a c0       	rjmp	.+20     	; 0x148a6 <vfprintf+0x168>
   14892:	0c 5f       	subi	r16, 0xFC	; 252
   14894:	1f 4f       	sbci	r17, 0xFF	; 255
   14896:	ff e3       	ldi	r31, 0x3F	; 63
   14898:	f9 83       	std	Y+1, r31	; 0x01
   1489a:	88 24       	eor	r8, r8
   1489c:	83 94       	inc	r8
   1489e:	91 2c       	mov	r9, r1
   148a0:	65 01       	movw	r12, r10
   148a2:	e8 94       	clt
   148a4:	37 f8       	bld	r3, 7
   148a6:	33 fe       	sbrs	r3, 3
   148a8:	2d c0       	rjmp	.+90     	; 0x14904 <vfprintf+0x1c6>
   148aa:	52 2c       	mov	r5, r2
   148ac:	81 14       	cp	r8, r1
   148ae:	91 04       	cpc	r9, r1
   148b0:	71 f5       	brne	.+92     	; 0x1490e <vfprintf+0x1d0>
   148b2:	55 20       	and	r5, r5
   148b4:	09 f4       	brne	.+2      	; 0x148b8 <vfprintf+0x17a>
   148b6:	68 cf       	rjmp	.-304    	; 0x14788 <vfprintf+0x4a>
   148b8:	b7 01       	movw	r22, r14
   148ba:	80 e2       	ldi	r24, 0x20	; 32
   148bc:	90 e0       	ldi	r25, 0x00	; 0
   148be:	0e 94 d9 aa 	call	0x155b2	; 0x155b2 <fputc>
   148c2:	5a 94       	dec	r5
   148c4:	f6 cf       	rjmp	.-20     	; 0x148b2 <vfprintf+0x174>
   148c6:	f8 01       	movw	r30, r16
   148c8:	80 81       	ld	r24, Z
   148ca:	89 83       	std	Y+1, r24	; 0x01
   148cc:	0e 5f       	subi	r16, 0xFE	; 254
   148ce:	1f 4f       	sbci	r17, 0xFF	; 255
   148d0:	e4 cf       	rjmp	.-56     	; 0x1489a <vfprintf+0x15c>
   148d2:	28 01       	movw	r4, r16
   148d4:	f2 e0       	ldi	r31, 0x02	; 2
   148d6:	4f 0e       	add	r4, r31
   148d8:	51 1c       	adc	r5, r1
   148da:	f8 01       	movw	r30, r16
   148dc:	c0 80       	ld	r12, Z
   148de:	d1 80       	ldd	r13, Z+1	; 0x01
   148e0:	69 2d       	mov	r22, r9
   148e2:	70 e0       	ldi	r23, 0x00	; 0
   148e4:	36 fc       	sbrc	r3, 6
   148e6:	02 c0       	rjmp	.+4      	; 0x148ec <vfprintf+0x1ae>
   148e8:	6f ef       	ldi	r22, 0xFF	; 255
   148ea:	7f ef       	ldi	r23, 0xFF	; 255
   148ec:	c6 01       	movw	r24, r12
   148ee:	0e 94 be aa 	call	0x1557c	; 0x1557c <strnlen>
   148f2:	4c 01       	movw	r8, r24
   148f4:	82 01       	movw	r16, r4
   148f6:	d5 cf       	rjmp	.-86     	; 0x148a2 <vfprintf+0x164>
   148f8:	b7 01       	movw	r22, r14
   148fa:	80 e2       	ldi	r24, 0x20	; 32
   148fc:	90 e0       	ldi	r25, 0x00	; 0
   148fe:	0e 94 d9 aa 	call	0x155b2	; 0x155b2 <fputc>
   14902:	2a 94       	dec	r2
   14904:	28 14       	cp	r2, r8
   14906:	19 04       	cpc	r1, r9
   14908:	09 f0       	breq	.+2      	; 0x1490c <vfprintf+0x1ce>
   1490a:	b0 f7       	brcc	.-20     	; 0x148f8 <vfprintf+0x1ba>
   1490c:	ce cf       	rjmp	.-100    	; 0x148aa <vfprintf+0x16c>
   1490e:	f6 01       	movw	r30, r12
   14910:	37 fc       	sbrc	r3, 7
   14912:	85 91       	lpm	r24, Z+
   14914:	37 fe       	sbrs	r3, 7
   14916:	81 91       	ld	r24, Z+
   14918:	6f 01       	movw	r12, r30
   1491a:	b7 01       	movw	r22, r14
   1491c:	90 e0       	ldi	r25, 0x00	; 0
   1491e:	0e 94 d9 aa 	call	0x155b2	; 0x155b2 <fputc>
   14922:	51 10       	cpse	r5, r1
   14924:	5a 94       	dec	r5
   14926:	f1 e0       	ldi	r31, 0x01	; 1
   14928:	8f 1a       	sub	r8, r31
   1492a:	91 08       	sbc	r9, r1
   1492c:	bf cf       	rjmp	.-130    	; 0x148ac <vfprintf+0x16e>
   1492e:	84 36       	cpi	r24, 0x64	; 100
   14930:	19 f0       	breq	.+6      	; 0x14938 <vfprintf+0x1fa>
   14932:	89 36       	cpi	r24, 0x69	; 105
   14934:	09 f0       	breq	.+2      	; 0x14938 <vfprintf+0x1fa>
   14936:	77 c0       	rjmp	.+238    	; 0x14a26 <vfprintf+0x2e8>
   14938:	f8 01       	movw	r30, r16
   1493a:	37 fe       	sbrs	r3, 7
   1493c:	6b c0       	rjmp	.+214    	; 0x14a14 <vfprintf+0x2d6>
   1493e:	60 81       	ld	r22, Z
   14940:	71 81       	ldd	r23, Z+1	; 0x01
   14942:	82 81       	ldd	r24, Z+2	; 0x02
   14944:	93 81       	ldd	r25, Z+3	; 0x03
   14946:	0c 5f       	subi	r16, 0xFC	; 252
   14948:	1f 4f       	sbci	r17, 0xFF	; 255
   1494a:	f3 2d       	mov	r31, r3
   1494c:	ff 76       	andi	r31, 0x6F	; 111
   1494e:	3f 2e       	mov	r3, r31
   14950:	97 ff       	sbrs	r25, 7
   14952:	09 c0       	rjmp	.+18     	; 0x14966 <vfprintf+0x228>
   14954:	90 95       	com	r25
   14956:	80 95       	com	r24
   14958:	70 95       	com	r23
   1495a:	61 95       	neg	r22
   1495c:	7f 4f       	sbci	r23, 0xFF	; 255
   1495e:	8f 4f       	sbci	r24, 0xFF	; 255
   14960:	9f 4f       	sbci	r25, 0xFF	; 255
   14962:	68 94       	set
   14964:	37 f8       	bld	r3, 7
   14966:	2a e0       	ldi	r18, 0x0A	; 10
   14968:	30 e0       	ldi	r19, 0x00	; 0
   1496a:	a5 01       	movw	r20, r10
   1496c:	0e 94 09 ab 	call	0x15612	; 0x15612 <__ultoa_invert>
   14970:	c8 2e       	mov	r12, r24
   14972:	ca 18       	sub	r12, r10
   14974:	8c 2c       	mov	r8, r12
   14976:	43 2c       	mov	r4, r3
   14978:	36 fe       	sbrs	r3, 6
   1497a:	0c c0       	rjmp	.+24     	; 0x14994 <vfprintf+0x256>
   1497c:	e8 94       	clt
   1497e:	40 f8       	bld	r4, 0
   14980:	c9 14       	cp	r12, r9
   14982:	40 f4       	brcc	.+16     	; 0x14994 <vfprintf+0x256>
   14984:	34 fe       	sbrs	r3, 4
   14986:	05 c0       	rjmp	.+10     	; 0x14992 <vfprintf+0x254>
   14988:	32 fc       	sbrc	r3, 2
   1498a:	03 c0       	rjmp	.+6      	; 0x14992 <vfprintf+0x254>
   1498c:	f3 2d       	mov	r31, r3
   1498e:	fe 7e       	andi	r31, 0xEE	; 238
   14990:	4f 2e       	mov	r4, r31
   14992:	89 2c       	mov	r8, r9
   14994:	44 fe       	sbrs	r4, 4
   14996:	aa c0       	rjmp	.+340    	; 0x14aec <vfprintf+0x3ae>
   14998:	fe 01       	movw	r30, r28
   1499a:	ec 0d       	add	r30, r12
   1499c:	f1 1d       	adc	r31, r1
   1499e:	80 81       	ld	r24, Z
   149a0:	80 33       	cpi	r24, 0x30	; 48
   149a2:	09 f0       	breq	.+2      	; 0x149a6 <vfprintf+0x268>
   149a4:	9c c0       	rjmp	.+312    	; 0x14ade <vfprintf+0x3a0>
   149a6:	24 2d       	mov	r18, r4
   149a8:	29 7e       	andi	r18, 0xE9	; 233
   149aa:	42 2e       	mov	r4, r18
   149ac:	84 2d       	mov	r24, r4
   149ae:	88 70       	andi	r24, 0x08	; 8
   149b0:	58 2e       	mov	r5, r24
   149b2:	43 fc       	sbrc	r4, 3
   149b4:	aa c0       	rjmp	.+340    	; 0x14b0a <vfprintf+0x3cc>
   149b6:	40 fe       	sbrs	r4, 0
   149b8:	a4 c0       	rjmp	.+328    	; 0x14b02 <vfprintf+0x3c4>
   149ba:	9c 2c       	mov	r9, r12
   149bc:	82 14       	cp	r8, r2
   149be:	18 f4       	brcc	.+6      	; 0x149c6 <vfprintf+0x288>
   149c0:	2c 0c       	add	r2, r12
   149c2:	92 2c       	mov	r9, r2
   149c4:	98 18       	sub	r9, r8
   149c6:	44 fe       	sbrs	r4, 4
   149c8:	a6 c0       	rjmp	.+332    	; 0x14b16 <vfprintf+0x3d8>
   149ca:	b7 01       	movw	r22, r14
   149cc:	80 e3       	ldi	r24, 0x30	; 48
   149ce:	90 e0       	ldi	r25, 0x00	; 0
   149d0:	0e 94 d9 aa 	call	0x155b2	; 0x155b2 <fputc>
   149d4:	42 fe       	sbrs	r4, 2
   149d6:	09 c0       	rjmp	.+18     	; 0x149ea <vfprintf+0x2ac>
   149d8:	88 e7       	ldi	r24, 0x78	; 120
   149da:	90 e0       	ldi	r25, 0x00	; 0
   149dc:	41 fe       	sbrs	r4, 1
   149de:	02 c0       	rjmp	.+4      	; 0x149e4 <vfprintf+0x2a6>
   149e0:	88 e5       	ldi	r24, 0x58	; 88
   149e2:	90 e0       	ldi	r25, 0x00	; 0
   149e4:	b7 01       	movw	r22, r14
   149e6:	0e 94 d9 aa 	call	0x155b2	; 0x155b2 <fputc>
   149ea:	c9 14       	cp	r12, r9
   149ec:	08 f4       	brcc	.+2      	; 0x149f0 <vfprintf+0x2b2>
   149ee:	9f c0       	rjmp	.+318    	; 0x14b2e <vfprintf+0x3f0>
   149f0:	ca 94       	dec	r12
   149f2:	d1 2c       	mov	r13, r1
   149f4:	9f ef       	ldi	r25, 0xFF	; 255
   149f6:	c9 1a       	sub	r12, r25
   149f8:	d9 0a       	sbc	r13, r25
   149fa:	ca 0c       	add	r12, r10
   149fc:	db 1c       	adc	r13, r11
   149fe:	f6 01       	movw	r30, r12
   14a00:	82 91       	ld	r24, -Z
   14a02:	6f 01       	movw	r12, r30
   14a04:	b7 01       	movw	r22, r14
   14a06:	90 e0       	ldi	r25, 0x00	; 0
   14a08:	0e 94 d9 aa 	call	0x155b2	; 0x155b2 <fputc>
   14a0c:	ac 14       	cp	r10, r12
   14a0e:	bd 04       	cpc	r11, r13
   14a10:	b1 f7       	brne	.-20     	; 0x149fe <vfprintf+0x2c0>
   14a12:	4f cf       	rjmp	.-354    	; 0x148b2 <vfprintf+0x174>
   14a14:	60 81       	ld	r22, Z
   14a16:	71 81       	ldd	r23, Z+1	; 0x01
   14a18:	07 2e       	mov	r0, r23
   14a1a:	00 0c       	add	r0, r0
   14a1c:	88 0b       	sbc	r24, r24
   14a1e:	99 0b       	sbc	r25, r25
   14a20:	0e 5f       	subi	r16, 0xFE	; 254
   14a22:	1f 4f       	sbci	r17, 0xFF	; 255
   14a24:	92 cf       	rjmp	.-220    	; 0x1494a <vfprintf+0x20c>
   14a26:	d3 2c       	mov	r13, r3
   14a28:	e8 94       	clt
   14a2a:	d4 f8       	bld	r13, 4
   14a2c:	2a e0       	ldi	r18, 0x0A	; 10
   14a2e:	30 e0       	ldi	r19, 0x00	; 0
   14a30:	85 37       	cpi	r24, 0x75	; 117
   14a32:	e1 f1       	breq	.+120    	; 0x14aac <vfprintf+0x36e>
   14a34:	23 2d       	mov	r18, r3
   14a36:	29 7f       	andi	r18, 0xF9	; 249
   14a38:	d2 2e       	mov	r13, r18
   14a3a:	8f 36       	cpi	r24, 0x6F	; 111
   14a3c:	a9 f1       	breq	.+106    	; 0x14aa8 <vfprintf+0x36a>
   14a3e:	f0 f4       	brcc	.+60     	; 0x14a7c <vfprintf+0x33e>
   14a40:	88 35       	cpi	r24, 0x58	; 88
   14a42:	51 f1       	breq	.+84     	; 0x14a98 <vfprintf+0x35a>
   14a44:	f7 01       	movw	r30, r14
   14a46:	86 81       	ldd	r24, Z+6	; 0x06
   14a48:	97 81       	ldd	r25, Z+7	; 0x07
   14a4a:	2b 96       	adiw	r28, 0x0b	; 11
   14a4c:	0f b6       	in	r0, 0x3f	; 63
   14a4e:	f8 94       	cli
   14a50:	de bf       	out	0x3e, r29	; 62
   14a52:	0f be       	out	0x3f, r0	; 63
   14a54:	cd bf       	out	0x3d, r28	; 61
   14a56:	df 91       	pop	r29
   14a58:	cf 91       	pop	r28
   14a5a:	1f 91       	pop	r17
   14a5c:	0f 91       	pop	r16
   14a5e:	ff 90       	pop	r15
   14a60:	ef 90       	pop	r14
   14a62:	df 90       	pop	r13
   14a64:	cf 90       	pop	r12
   14a66:	bf 90       	pop	r11
   14a68:	af 90       	pop	r10
   14a6a:	9f 90       	pop	r9
   14a6c:	8f 90       	pop	r8
   14a6e:	7f 90       	pop	r7
   14a70:	6f 90       	pop	r6
   14a72:	5f 90       	pop	r5
   14a74:	4f 90       	pop	r4
   14a76:	3f 90       	pop	r3
   14a78:	2f 90       	pop	r2
   14a7a:	08 95       	ret
   14a7c:	80 37       	cpi	r24, 0x70	; 112
   14a7e:	49 f0       	breq	.+18     	; 0x14a92 <vfprintf+0x354>
   14a80:	88 37       	cpi	r24, 0x78	; 120
   14a82:	01 f7       	brne	.-64     	; 0x14a44 <vfprintf+0x306>
   14a84:	d4 fe       	sbrs	r13, 4
   14a86:	02 c0       	rjmp	.+4      	; 0x14a8c <vfprintf+0x34e>
   14a88:	68 94       	set
   14a8a:	d2 f8       	bld	r13, 2
   14a8c:	20 e1       	ldi	r18, 0x10	; 16
   14a8e:	30 e0       	ldi	r19, 0x00	; 0
   14a90:	0d c0       	rjmp	.+26     	; 0x14aac <vfprintf+0x36e>
   14a92:	68 94       	set
   14a94:	d4 f8       	bld	r13, 4
   14a96:	f6 cf       	rjmp	.-20     	; 0x14a84 <vfprintf+0x346>
   14a98:	34 fe       	sbrs	r3, 4
   14a9a:	03 c0       	rjmp	.+6      	; 0x14aa2 <vfprintf+0x364>
   14a9c:	82 2f       	mov	r24, r18
   14a9e:	86 60       	ori	r24, 0x06	; 6
   14aa0:	d8 2e       	mov	r13, r24
   14aa2:	20 e1       	ldi	r18, 0x10	; 16
   14aa4:	32 e0       	ldi	r19, 0x02	; 2
   14aa6:	02 c0       	rjmp	.+4      	; 0x14aac <vfprintf+0x36e>
   14aa8:	28 e0       	ldi	r18, 0x08	; 8
   14aaa:	30 e0       	ldi	r19, 0x00	; 0
   14aac:	f8 01       	movw	r30, r16
   14aae:	d7 fe       	sbrs	r13, 7
   14ab0:	0f c0       	rjmp	.+30     	; 0x14ad0 <vfprintf+0x392>
   14ab2:	60 81       	ld	r22, Z
   14ab4:	71 81       	ldd	r23, Z+1	; 0x01
   14ab6:	82 81       	ldd	r24, Z+2	; 0x02
   14ab8:	93 81       	ldd	r25, Z+3	; 0x03
   14aba:	0c 5f       	subi	r16, 0xFC	; 252
   14abc:	1f 4f       	sbci	r17, 0xFF	; 255
   14abe:	a5 01       	movw	r20, r10
   14ac0:	0e 94 09 ab 	call	0x15612	; 0x15612 <__ultoa_invert>
   14ac4:	c8 2e       	mov	r12, r24
   14ac6:	ca 18       	sub	r12, r10
   14ac8:	3d 2c       	mov	r3, r13
   14aca:	e8 94       	clt
   14acc:	37 f8       	bld	r3, 7
   14ace:	52 cf       	rjmp	.-348    	; 0x14974 <vfprintf+0x236>
   14ad0:	60 81       	ld	r22, Z
   14ad2:	71 81       	ldd	r23, Z+1	; 0x01
   14ad4:	90 e0       	ldi	r25, 0x00	; 0
   14ad6:	80 e0       	ldi	r24, 0x00	; 0
   14ad8:	0e 5f       	subi	r16, 0xFE	; 254
   14ada:	1f 4f       	sbci	r17, 0xFF	; 255
   14adc:	f0 cf       	rjmp	.-32     	; 0x14abe <vfprintf+0x380>
   14ade:	42 fc       	sbrc	r4, 2
   14ae0:	02 c0       	rjmp	.+4      	; 0x14ae6 <vfprintf+0x3a8>
   14ae2:	83 94       	inc	r8
   14ae4:	63 cf       	rjmp	.-314    	; 0x149ac <vfprintf+0x26e>
   14ae6:	83 94       	inc	r8
   14ae8:	83 94       	inc	r8
   14aea:	60 cf       	rjmp	.-320    	; 0x149ac <vfprintf+0x26e>
   14aec:	84 2d       	mov	r24, r4
   14aee:	86 78       	andi	r24, 0x86	; 134
   14af0:	09 f4       	brne	.+2      	; 0x14af4 <vfprintf+0x3b6>
   14af2:	5c cf       	rjmp	.-328    	; 0x149ac <vfprintf+0x26e>
   14af4:	f6 cf       	rjmp	.-20     	; 0x14ae2 <vfprintf+0x3a4>
   14af6:	b7 01       	movw	r22, r14
   14af8:	80 e2       	ldi	r24, 0x20	; 32
   14afa:	90 e0       	ldi	r25, 0x00	; 0
   14afc:	0e 94 d9 aa 	call	0x155b2	; 0x155b2 <fputc>
   14b00:	83 94       	inc	r8
   14b02:	82 14       	cp	r8, r2
   14b04:	c0 f3       	brcs	.-16     	; 0x14af6 <vfprintf+0x3b8>
   14b06:	51 2c       	mov	r5, r1
   14b08:	5e cf       	rjmp	.-324    	; 0x149c6 <vfprintf+0x288>
   14b0a:	52 2c       	mov	r5, r2
   14b0c:	58 18       	sub	r5, r8
   14b0e:	82 14       	cp	r8, r2
   14b10:	08 f4       	brcc	.+2      	; 0x14b14 <vfprintf+0x3d6>
   14b12:	59 cf       	rjmp	.-334    	; 0x149c6 <vfprintf+0x288>
   14b14:	f8 cf       	rjmp	.-16     	; 0x14b06 <vfprintf+0x3c8>
   14b16:	84 2d       	mov	r24, r4
   14b18:	86 78       	andi	r24, 0x86	; 134
   14b1a:	09 f4       	brne	.+2      	; 0x14b1e <vfprintf+0x3e0>
   14b1c:	66 cf       	rjmp	.-308    	; 0x149ea <vfprintf+0x2ac>
   14b1e:	8b e2       	ldi	r24, 0x2B	; 43
   14b20:	41 fe       	sbrs	r4, 1
   14b22:	80 e2       	ldi	r24, 0x20	; 32
   14b24:	47 fc       	sbrc	r4, 7
   14b26:	8d e2       	ldi	r24, 0x2D	; 45
   14b28:	b7 01       	movw	r22, r14
   14b2a:	90 e0       	ldi	r25, 0x00	; 0
   14b2c:	5c cf       	rjmp	.-328    	; 0x149e6 <vfprintf+0x2a8>
   14b2e:	b7 01       	movw	r22, r14
   14b30:	80 e3       	ldi	r24, 0x30	; 48
   14b32:	90 e0       	ldi	r25, 0x00	; 0
   14b34:	0e 94 d9 aa 	call	0x155b2	; 0x155b2 <fputc>
   14b38:	9a 94       	dec	r9
   14b3a:	57 cf       	rjmp	.-338    	; 0x149ea <vfprintf+0x2ac>
   14b3c:	8f ef       	ldi	r24, 0xFF	; 255
   14b3e:	9f ef       	ldi	r25, 0xFF	; 255
   14b40:	84 cf       	rjmp	.-248    	; 0x14a4a <vfprintf+0x30c>

00014b42 <calloc>:
calloc():
   14b42:	0f 93       	push	r16
   14b44:	1f 93       	push	r17
   14b46:	cf 93       	push	r28
   14b48:	df 93       	push	r29
   14b4a:	86 9f       	mul	r24, r22
   14b4c:	80 01       	movw	r16, r0
   14b4e:	87 9f       	mul	r24, r23
   14b50:	10 0d       	add	r17, r0
   14b52:	96 9f       	mul	r25, r22
   14b54:	10 0d       	add	r17, r0
   14b56:	11 24       	eor	r1, r1
   14b58:	c8 01       	movw	r24, r16
   14b5a:	0e 94 36 a7 	call	0x14e6c	; 0x14e6c <malloc>
   14b5e:	ec 01       	movw	r28, r24
   14b60:	00 97       	sbiw	r24, 0x00	; 0
   14b62:	29 f0       	breq	.+10     	; 0x14b6e <calloc+0x2c>
   14b64:	a8 01       	movw	r20, r16
   14b66:	70 e0       	ldi	r23, 0x00	; 0
   14b68:	60 e0       	ldi	r22, 0x00	; 0
   14b6a:	0e 94 b7 aa 	call	0x1556e	; 0x1556e <memset>
   14b6e:	ce 01       	movw	r24, r28
   14b70:	df 91       	pop	r29
   14b72:	cf 91       	pop	r28
   14b74:	1f 91       	pop	r17
   14b76:	0f 91       	pop	r16
   14b78:	08 95       	ret

00014b7a <dtoa_prf>:
dtoa_prf():
   14b7a:	8f 92       	push	r8
   14b7c:	9f 92       	push	r9
   14b7e:	af 92       	push	r10
   14b80:	bf 92       	push	r11
   14b82:	cf 92       	push	r12
   14b84:	df 92       	push	r13
   14b86:	ef 92       	push	r14
   14b88:	ff 92       	push	r15
   14b8a:	0f 93       	push	r16
   14b8c:	1f 93       	push	r17
   14b8e:	cf 93       	push	r28
   14b90:	df 93       	push	r29
   14b92:	00 d0       	rcall	.+0      	; 0x14b94 <dtoa_prf+0x1a>
   14b94:	00 d0       	rcall	.+0      	; 0x14b96 <dtoa_prf+0x1c>
   14b96:	00 d0       	rcall	.+0      	; 0x14b98 <dtoa_prf+0x1e>
   14b98:	cd b7       	in	r28, 0x3d	; 61
   14b9a:	de b7       	in	r29, 0x3e	; 62
   14b9c:	6a 01       	movw	r12, r20
   14b9e:	f2 2e       	mov	r15, r18
   14ba0:	b0 2e       	mov	r11, r16
   14ba2:	10 2f       	mov	r17, r16
   14ba4:	fb e3       	ldi	r31, 0x3B	; 59
   14ba6:	af 2e       	mov	r10, r31
   14ba8:	a0 16       	cp	r10, r16
   14baa:	08 f4       	brcc	.+2      	; 0x14bae <dtoa_prf+0x34>
   14bac:	1b e3       	ldi	r17, 0x3B	; 59
   14bae:	1f 5f       	subi	r17, 0xFF	; 255
   14bb0:	01 2f       	mov	r16, r17
   14bb2:	27 e0       	ldi	r18, 0x07	; 7
   14bb4:	ae 01       	movw	r20, r28
   14bb6:	4f 5f       	subi	r20, 0xFF	; 255
   14bb8:	5f 4f       	sbci	r21, 0xFF	; 255
   14bba:	0e 94 b9 a9 	call	0x15372	; 0x15372 <__ftoa_engine>
   14bbe:	bc 01       	movw	r22, r24
   14bc0:	89 81       	ldd	r24, Y+1	; 0x01
   14bc2:	98 2f       	mov	r25, r24
   14bc4:	99 70       	andi	r25, 0x09	; 9
   14bc6:	91 30       	cpi	r25, 0x01	; 1
   14bc8:	09 f4       	brne	.+2      	; 0x14bcc <dtoa_prf+0x52>
   14bca:	4e c0       	rjmp	.+156    	; 0x14c68 <dtoa_prf+0xee>
   14bcc:	9b e2       	ldi	r25, 0x2B	; 43
   14bce:	e1 fc       	sbrc	r14, 1
   14bd0:	04 c0       	rjmp	.+8      	; 0x14bda <dtoa_prf+0x60>
   14bd2:	9e 2d       	mov	r25, r14
   14bd4:	91 70       	andi	r25, 0x01	; 1
   14bd6:	e0 fc       	sbrc	r14, 0
   14bd8:	49 c0       	rjmp	.+146    	; 0x14c6c <dtoa_prf+0xf2>
   14bda:	5e 2d       	mov	r21, r14
   14bdc:	50 71       	andi	r21, 0x10	; 16
   14bde:	e8 2f       	mov	r30, r24
   14be0:	e8 70       	andi	r30, 0x08	; 8
   14be2:	83 ff       	sbrs	r24, 3
   14be4:	55 c0       	rjmp	.+170    	; 0x14c90 <dtoa_prf+0x116>
   14be6:	84 e0       	ldi	r24, 0x04	; 4
   14be8:	91 11       	cpse	r25, r1
   14bea:	01 c0       	rjmp	.+2      	; 0x14bee <dtoa_prf+0x74>
   14bec:	83 e0       	ldi	r24, 0x03	; 3
   14bee:	ef 2d       	mov	r30, r15
   14bf0:	e8 1b       	sub	r30, r24
   14bf2:	8f 15       	cp	r24, r15
   14bf4:	08 f0       	brcs	.+2      	; 0x14bf8 <dtoa_prf+0x7e>
   14bf6:	e0 e0       	ldi	r30, 0x00	; 0
   14bf8:	d6 01       	movw	r26, r12
   14bfa:	8e 2f       	mov	r24, r30
   14bfc:	20 e2       	ldi	r18, 0x20	; 32
   14bfe:	55 23       	and	r21, r21
   14c00:	c9 f1       	breq	.+114    	; 0x14c74 <dtoa_prf+0xfa>
   14c02:	99 23       	and	r25, r25
   14c04:	29 f0       	breq	.+10     	; 0x14c10 <dtoa_prf+0x96>
   14c06:	d6 01       	movw	r26, r12
   14c08:	9c 93       	st	X, r25
   14c0a:	c6 01       	movw	r24, r12
   14c0c:	01 96       	adiw	r24, 0x01	; 1
   14c0e:	6c 01       	movw	r12, r24
   14c10:	96 01       	movw	r18, r12
   14c12:	2d 5f       	subi	r18, 0xFD	; 253
   14c14:	3f 4f       	sbci	r19, 0xFF	; 255
   14c16:	e2 fe       	sbrs	r14, 2
   14c18:	33 c0       	rjmp	.+102    	; 0x14c80 <dtoa_prf+0x106>
   14c1a:	8e e4       	ldi	r24, 0x4E	; 78
   14c1c:	d6 01       	movw	r26, r12
   14c1e:	8c 93       	st	X, r24
   14c20:	91 e4       	ldi	r25, 0x41	; 65
   14c22:	11 96       	adiw	r26, 0x01	; 1
   14c24:	9c 93       	st	X, r25
   14c26:	11 97       	sbiw	r26, 0x01	; 1
   14c28:	12 96       	adiw	r26, 0x02	; 2
   14c2a:	8c 93       	st	X, r24
   14c2c:	d9 01       	movw	r26, r18
   14c2e:	8e 2f       	mov	r24, r30
   14c30:	90 e2       	ldi	r25, 0x20	; 32
   14c32:	81 11       	cpse	r24, r1
   14c34:	2a c0       	rjmp	.+84     	; 0x14c8a <dtoa_prf+0x110>
   14c36:	e2 0f       	add	r30, r18
   14c38:	f3 2f       	mov	r31, r19
   14c3a:	f1 1d       	adc	r31, r1
   14c3c:	10 82       	st	Z, r1
   14c3e:	8e ef       	ldi	r24, 0xFE	; 254
   14c40:	9f ef       	ldi	r25, 0xFF	; 255
   14c42:	29 96       	adiw	r28, 0x09	; 9
   14c44:	0f b6       	in	r0, 0x3f	; 63
   14c46:	f8 94       	cli
   14c48:	de bf       	out	0x3e, r29	; 62
   14c4a:	0f be       	out	0x3f, r0	; 63
   14c4c:	cd bf       	out	0x3d, r28	; 61
   14c4e:	df 91       	pop	r29
   14c50:	cf 91       	pop	r28
   14c52:	1f 91       	pop	r17
   14c54:	0f 91       	pop	r16
   14c56:	ff 90       	pop	r15
   14c58:	ef 90       	pop	r14
   14c5a:	df 90       	pop	r13
   14c5c:	cf 90       	pop	r12
   14c5e:	bf 90       	pop	r11
   14c60:	af 90       	pop	r10
   14c62:	9f 90       	pop	r9
   14c64:	8f 90       	pop	r8
   14c66:	08 95       	ret
   14c68:	9d e2       	ldi	r25, 0x2D	; 45
   14c6a:	b7 cf       	rjmp	.-146    	; 0x14bda <dtoa_prf+0x60>
   14c6c:	90 e2       	ldi	r25, 0x20	; 32
   14c6e:	b5 cf       	rjmp	.-150    	; 0x14bda <dtoa_prf+0x60>
   14c70:	2d 93       	st	X+, r18
   14c72:	81 50       	subi	r24, 0x01	; 1
   14c74:	81 11       	cpse	r24, r1
   14c76:	fc cf       	rjmp	.-8      	; 0x14c70 <dtoa_prf+0xf6>
   14c78:	ce 0e       	add	r12, r30
   14c7a:	d1 1c       	adc	r13, r1
   14c7c:	e0 e0       	ldi	r30, 0x00	; 0
   14c7e:	c1 cf       	rjmp	.-126    	; 0x14c02 <dtoa_prf+0x88>
   14c80:	8e e6       	ldi	r24, 0x6E	; 110
   14c82:	d6 01       	movw	r26, r12
   14c84:	8c 93       	st	X, r24
   14c86:	91 e6       	ldi	r25, 0x61	; 97
   14c88:	cc cf       	rjmp	.-104    	; 0x14c22 <dtoa_prf+0xa8>
   14c8a:	9d 93       	st	X+, r25
   14c8c:	81 50       	subi	r24, 0x01	; 1
   14c8e:	d1 cf       	rjmp	.-94     	; 0x14c32 <dtoa_prf+0xb8>
   14c90:	48 2f       	mov	r20, r24
   14c92:	44 70       	andi	r20, 0x04	; 4
   14c94:	82 ff       	sbrs	r24, 2
   14c96:	3d c0       	rjmp	.+122    	; 0x14d12 <dtoa_prf+0x198>
   14c98:	84 e0       	ldi	r24, 0x04	; 4
   14c9a:	91 11       	cpse	r25, r1
   14c9c:	01 c0       	rjmp	.+2      	; 0x14ca0 <dtoa_prf+0x126>
   14c9e:	83 e0       	ldi	r24, 0x03	; 3
   14ca0:	8f 15       	cp	r24, r15
   14ca2:	10 f4       	brcc	.+4      	; 0x14ca8 <dtoa_prf+0x12e>
   14ca4:	ef 2d       	mov	r30, r15
   14ca6:	e8 1b       	sub	r30, r24
   14ca8:	d6 01       	movw	r26, r12
   14caa:	8e 2f       	mov	r24, r30
   14cac:	20 e2       	ldi	r18, 0x20	; 32
   14cae:	55 23       	and	r21, r21
   14cb0:	09 f1       	breq	.+66     	; 0x14cf4 <dtoa_prf+0x17a>
   14cb2:	99 23       	and	r25, r25
   14cb4:	29 f0       	breq	.+10     	; 0x14cc0 <dtoa_prf+0x146>
   14cb6:	d6 01       	movw	r26, r12
   14cb8:	9c 93       	st	X, r25
   14cba:	c6 01       	movw	r24, r12
   14cbc:	01 96       	adiw	r24, 0x01	; 1
   14cbe:	6c 01       	movw	r12, r24
   14cc0:	96 01       	movw	r18, r12
   14cc2:	2d 5f       	subi	r18, 0xFD	; 253
   14cc4:	3f 4f       	sbci	r19, 0xFF	; 255
   14cc6:	e2 fe       	sbrs	r14, 2
   14cc8:	1b c0       	rjmp	.+54     	; 0x14d00 <dtoa_prf+0x186>
   14cca:	89 e4       	ldi	r24, 0x49	; 73
   14ccc:	d6 01       	movw	r26, r12
   14cce:	8c 93       	st	X, r24
   14cd0:	8e e4       	ldi	r24, 0x4E	; 78
   14cd2:	11 96       	adiw	r26, 0x01	; 1
   14cd4:	8c 93       	st	X, r24
   14cd6:	11 97       	sbiw	r26, 0x01	; 1
   14cd8:	86 e4       	ldi	r24, 0x46	; 70
   14cda:	12 96       	adiw	r26, 0x02	; 2
   14cdc:	8c 93       	st	X, r24
   14cde:	d9 01       	movw	r26, r18
   14ce0:	8e 2f       	mov	r24, r30
   14ce2:	90 e2       	ldi	r25, 0x20	; 32
   14ce4:	88 23       	and	r24, r24
   14ce6:	09 f4       	brne	.+2      	; 0x14cea <dtoa_prf+0x170>
   14ce8:	a6 cf       	rjmp	.-180    	; 0x14c36 <dtoa_prf+0xbc>
   14cea:	9d 93       	st	X+, r25
   14cec:	81 50       	subi	r24, 0x01	; 1
   14cee:	fa cf       	rjmp	.-12     	; 0x14ce4 <dtoa_prf+0x16a>
   14cf0:	2d 93       	st	X+, r18
   14cf2:	81 50       	subi	r24, 0x01	; 1
   14cf4:	81 11       	cpse	r24, r1
   14cf6:	fc cf       	rjmp	.-8      	; 0x14cf0 <dtoa_prf+0x176>
   14cf8:	ce 0e       	add	r12, r30
   14cfa:	d1 1c       	adc	r13, r1
   14cfc:	e0 e0       	ldi	r30, 0x00	; 0
   14cfe:	d9 cf       	rjmp	.-78     	; 0x14cb2 <dtoa_prf+0x138>
   14d00:	89 e6       	ldi	r24, 0x69	; 105
   14d02:	d6 01       	movw	r26, r12
   14d04:	8c 93       	st	X, r24
   14d06:	8e e6       	ldi	r24, 0x6E	; 110
   14d08:	11 96       	adiw	r26, 0x01	; 1
   14d0a:	8c 93       	st	X, r24
   14d0c:	11 97       	sbiw	r26, 0x01	; 1
   14d0e:	86 e6       	ldi	r24, 0x66	; 102
   14d10:	e4 cf       	rjmp	.-56     	; 0x14cda <dtoa_prf+0x160>
   14d12:	9b 01       	movw	r18, r22
   14d14:	77 ff       	sbrs	r23, 7
   14d16:	02 c0       	rjmp	.+4      	; 0x14d1c <dtoa_prf+0x1a2>
   14d18:	30 e0       	ldi	r19, 0x00	; 0
   14d1a:	20 e0       	ldi	r18, 0x00	; 0
   14d1c:	a1 e0       	ldi	r26, 0x01	; 1
   14d1e:	b0 e0       	ldi	r27, 0x00	; 0
   14d20:	91 11       	cpse	r25, r1
   14d22:	02 c0       	rjmp	.+4      	; 0x14d28 <dtoa_prf+0x1ae>
   14d24:	b0 e0       	ldi	r27, 0x00	; 0
   14d26:	a0 e0       	ldi	r26, 0x00	; 0
   14d28:	f9 01       	movw	r30, r18
   14d2a:	31 96       	adiw	r30, 0x01	; 1
   14d2c:	ae 0f       	add	r26, r30
   14d2e:	bf 1f       	adc	r27, r31
   14d30:	8b 2c       	mov	r8, r11
   14d32:	91 2c       	mov	r9, r1
   14d34:	bb 20       	and	r11, r11
   14d36:	09 f4       	brne	.+2      	; 0x14d3a <dtoa_prf+0x1c0>
   14d38:	61 c0       	rjmp	.+194    	; 0x14dfc <dtoa_prf+0x282>
   14d3a:	54 01       	movw	r10, r8
   14d3c:	ef ef       	ldi	r30, 0xFF	; 255
   14d3e:	ae 1a       	sub	r10, r30
   14d40:	be 0a       	sbc	r11, r30
   14d42:	aa 0d       	add	r26, r10
   14d44:	bb 1d       	adc	r27, r11
   14d46:	fa 16       	cp	r15, r26
   14d48:	1b 06       	cpc	r1, r27
   14d4a:	19 f0       	breq	.+6      	; 0x14d52 <dtoa_prf+0x1d8>
   14d4c:	14 f0       	brlt	.+4      	; 0x14d52 <dtoa_prf+0x1d8>
   14d4e:	4f 2d       	mov	r20, r15
   14d50:	4a 1b       	sub	r20, r26
   14d52:	51 11       	cpse	r21, r1
   14d54:	88 c0       	rjmp	.+272    	; 0x14e66 <dtoa_prf+0x2ec>
   14d56:	e3 fc       	sbrc	r14, 3
   14d58:	59 c0       	rjmp	.+178    	; 0x14e0c <dtoa_prf+0x292>
   14d5a:	76 01       	movw	r14, r12
   14d5c:	a4 2f       	mov	r26, r20
   14d5e:	b0 e2       	ldi	r27, 0x20	; 32
   14d60:	a1 11       	cpse	r26, r1
   14d62:	4f c0       	rjmp	.+158    	; 0x14e02 <dtoa_prf+0x288>
   14d64:	c4 0e       	add	r12, r20
   14d66:	d1 1c       	adc	r13, r1
   14d68:	99 23       	and	r25, r25
   14d6a:	09 f4       	brne	.+2      	; 0x14d6e <dtoa_prf+0x1f4>
   14d6c:	5b c0       	rjmp	.+182    	; 0x14e24 <dtoa_prf+0x2aa>
   14d6e:	40 e0       	ldi	r20, 0x00	; 0
   14d70:	d6 01       	movw	r26, r12
   14d72:	11 96       	adiw	r26, 0x01	; 1
   14d74:	f6 01       	movw	r30, r12
   14d76:	90 83       	st	Z, r25
   14d78:	6d 01       	movw	r12, r26
   14d7a:	55 23       	and	r21, r21
   14d7c:	09 f4       	brne	.+2      	; 0x14d80 <dtoa_prf+0x206>
   14d7e:	48 c0       	rjmp	.+144    	; 0x14e10 <dtoa_prf+0x296>
   14d80:	01 2f       	mov	r16, r17
   14d82:	06 0f       	add	r16, r22
   14d84:	9a 81       	ldd	r25, Y+2	; 0x02
   14d86:	58 2f       	mov	r21, r24
   14d88:	50 71       	andi	r21, 0x10	; 16
   14d8a:	84 ff       	sbrs	r24, 4
   14d8c:	03 c0       	rjmp	.+6      	; 0x14d94 <dtoa_prf+0x21a>
   14d8e:	91 33       	cpi	r25, 0x31	; 49
   14d90:	09 f4       	brne	.+2      	; 0x14d94 <dtoa_prf+0x21a>
   14d92:	01 50       	subi	r16, 0x01	; 1
   14d94:	10 16       	cp	r1, r16
   14d96:	0c f0       	brlt	.+2      	; 0x14d9a <dtoa_prf+0x220>
   14d98:	47 c0       	rjmp	.+142    	; 0x14e28 <dtoa_prf+0x2ae>
   14d9a:	09 30       	cpi	r16, 0x09	; 9
   14d9c:	08 f0       	brcs	.+2      	; 0x14da0 <dtoa_prf+0x226>
   14d9e:	08 e0       	ldi	r16, 0x08	; 8
   14da0:	ee e2       	ldi	r30, 0x2E	; 46
   14da2:	fe 2e       	mov	r15, r30
   14da4:	5b 01       	movw	r10, r22
   14da6:	a0 1a       	sub	r10, r16
   14da8:	b1 08       	sbc	r11, r1
   14daa:	85 01       	movw	r16, r10
   14dac:	91 94       	neg	r9
   14dae:	81 94       	neg	r8
   14db0:	91 08       	sbc	r9, r1
   14db2:	2f 3f       	cpi	r18, 0xFF	; 255
   14db4:	32 07       	cpc	r19, r18
   14db6:	29 f4       	brne	.+10     	; 0x14dc2 <dtoa_prf+0x248>
   14db8:	d6 01       	movw	r26, r12
   14dba:	fc 92       	st	X, r15
   14dbc:	f6 01       	movw	r30, r12
   14dbe:	31 96       	adiw	r30, 0x01	; 1
   14dc0:	6f 01       	movw	r12, r30
   14dc2:	62 17       	cp	r22, r18
   14dc4:	73 07       	cpc	r23, r19
   14dc6:	94 f1       	brlt	.+100    	; 0x14e2c <dtoa_prf+0x2b2>
   14dc8:	02 17       	cp	r16, r18
   14dca:	13 07       	cpc	r17, r19
   14dcc:	7c f5       	brge	.+94     	; 0x14e2c <dtoa_prf+0x2b2>
   14dce:	db 01       	movw	r26, r22
   14dd0:	a2 1b       	sub	r26, r18
   14dd2:	b3 0b       	sbc	r27, r19
   14dd4:	aa 24       	eor	r10, r10
   14dd6:	a3 94       	inc	r10
   14dd8:	b1 2c       	mov	r11, r1
   14dda:	ac 0e       	add	r10, r28
   14ddc:	bd 1e       	adc	r11, r29
   14dde:	aa 0d       	add	r26, r10
   14de0:	bb 1d       	adc	r27, r11
   14de2:	11 96       	adiw	r26, 0x01	; 1
   14de4:	8c 91       	ld	r24, X
   14de6:	21 50       	subi	r18, 0x01	; 1
   14de8:	31 09       	sbc	r19, r1
   14dea:	d6 01       	movw	r26, r12
   14dec:	11 96       	adiw	r26, 0x01	; 1
   14dee:	28 15       	cp	r18, r8
   14df0:	39 05       	cpc	r19, r9
   14df2:	f4 f0       	brlt	.+60     	; 0x14e30 <dtoa_prf+0x2b6>
   14df4:	f6 01       	movw	r30, r12
   14df6:	80 83       	st	Z, r24
   14df8:	6d 01       	movw	r12, r26
   14dfa:	db cf       	rjmp	.-74     	; 0x14db2 <dtoa_prf+0x238>
   14dfc:	b1 2c       	mov	r11, r1
   14dfe:	a1 2c       	mov	r10, r1
   14e00:	a0 cf       	rjmp	.-192    	; 0x14d42 <dtoa_prf+0x1c8>
   14e02:	f7 01       	movw	r30, r14
   14e04:	b1 93       	st	Z+, r27
   14e06:	7f 01       	movw	r14, r30
   14e08:	a1 50       	subi	r26, 0x01	; 1
   14e0a:	aa cf       	rjmp	.-172    	; 0x14d60 <dtoa_prf+0x1e6>
   14e0c:	91 11       	cpse	r25, r1
   14e0e:	b0 cf       	rjmp	.-160    	; 0x14d70 <dtoa_prf+0x1f6>
   14e10:	d6 01       	movw	r26, r12
   14e12:	94 2f       	mov	r25, r20
   14e14:	50 e3       	ldi	r21, 0x30	; 48
   14e16:	02 c0       	rjmp	.+4      	; 0x14e1c <dtoa_prf+0x2a2>
   14e18:	5d 93       	st	X+, r21
   14e1a:	91 50       	subi	r25, 0x01	; 1
   14e1c:	91 11       	cpse	r25, r1
   14e1e:	fc cf       	rjmp	.-8      	; 0x14e18 <dtoa_prf+0x29e>
   14e20:	c4 0e       	add	r12, r20
   14e22:	d1 1c       	adc	r13, r1
   14e24:	40 e0       	ldi	r20, 0x00	; 0
   14e26:	ac cf       	rjmp	.-168    	; 0x14d80 <dtoa_prf+0x206>
   14e28:	01 e0       	ldi	r16, 0x01	; 1
   14e2a:	ba cf       	rjmp	.-140    	; 0x14da0 <dtoa_prf+0x226>
   14e2c:	80 e3       	ldi	r24, 0x30	; 48
   14e2e:	db cf       	rjmp	.-74     	; 0x14de6 <dtoa_prf+0x26c>
   14e30:	62 17       	cp	r22, r18
   14e32:	73 07       	cpc	r23, r19
   14e34:	31 f4       	brne	.+12     	; 0x14e42 <dtoa_prf+0x2c8>
   14e36:	96 33       	cpi	r25, 0x36	; 54
   14e38:	88 f4       	brcc	.+34     	; 0x14e5c <dtoa_prf+0x2e2>
   14e3a:	95 33       	cpi	r25, 0x35	; 53
   14e3c:	11 f4       	brne	.+4      	; 0x14e42 <dtoa_prf+0x2c8>
   14e3e:	55 23       	and	r21, r21
   14e40:	69 f0       	breq	.+26     	; 0x14e5c <dtoa_prf+0x2e2>
   14e42:	f6 01       	movw	r30, r12
   14e44:	80 83       	st	Z, r24
   14e46:	fd 01       	movw	r30, r26
   14e48:	84 2f       	mov	r24, r20
   14e4a:	90 e2       	ldi	r25, 0x20	; 32
   14e4c:	81 11       	cpse	r24, r1
   14e4e:	08 c0       	rjmp	.+16     	; 0x14e60 <dtoa_prf+0x2e6>
   14e50:	a4 0f       	add	r26, r20
   14e52:	b1 1d       	adc	r27, r1
   14e54:	1c 92       	st	X, r1
   14e56:	90 e0       	ldi	r25, 0x00	; 0
   14e58:	80 e0       	ldi	r24, 0x00	; 0
   14e5a:	f3 ce       	rjmp	.-538    	; 0x14c42 <dtoa_prf+0xc8>
   14e5c:	81 e3       	ldi	r24, 0x31	; 49
   14e5e:	f1 cf       	rjmp	.-30     	; 0x14e42 <dtoa_prf+0x2c8>
   14e60:	91 93       	st	Z+, r25
   14e62:	81 50       	subi	r24, 0x01	; 1
   14e64:	f3 cf       	rjmp	.-26     	; 0x14e4c <dtoa_prf+0x2d2>
   14e66:	91 11       	cpse	r25, r1
   14e68:	83 cf       	rjmp	.-250    	; 0x14d70 <dtoa_prf+0x1f6>
   14e6a:	8a cf       	rjmp	.-236    	; 0x14d80 <dtoa_prf+0x206>

00014e6c <malloc>:
malloc():
   14e6c:	0f 93       	push	r16
   14e6e:	1f 93       	push	r17
   14e70:	cf 93       	push	r28
   14e72:	df 93       	push	r29
   14e74:	82 30       	cpi	r24, 0x02	; 2
   14e76:	91 05       	cpc	r25, r1
   14e78:	10 f4       	brcc	.+4      	; 0x14e7e <malloc+0x12>
   14e7a:	82 e0       	ldi	r24, 0x02	; 2
   14e7c:	90 e0       	ldi	r25, 0x00	; 0
   14e7e:	e0 91 3f 13 	lds	r30, 0x133F	; 0x80133f <__flp>
   14e82:	f0 91 40 13 	lds	r31, 0x1340	; 0x801340 <__flp+0x1>
   14e86:	30 e0       	ldi	r19, 0x00	; 0
   14e88:	20 e0       	ldi	r18, 0x00	; 0
   14e8a:	b0 e0       	ldi	r27, 0x00	; 0
   14e8c:	a0 e0       	ldi	r26, 0x00	; 0
   14e8e:	30 97       	sbiw	r30, 0x00	; 0
   14e90:	99 f4       	brne	.+38     	; 0x14eb8 <malloc+0x4c>
   14e92:	21 15       	cp	r18, r1
   14e94:	31 05       	cpc	r19, r1
   14e96:	09 f4       	brne	.+2      	; 0x14e9a <malloc+0x2e>
   14e98:	4a c0       	rjmp	.+148    	; 0x14f2e <malloc+0xc2>
   14e9a:	28 1b       	sub	r18, r24
   14e9c:	39 0b       	sbc	r19, r25
   14e9e:	24 30       	cpi	r18, 0x04	; 4
   14ea0:	31 05       	cpc	r19, r1
   14ea2:	d8 f5       	brcc	.+118    	; 0x14f1a <malloc+0xae>
   14ea4:	8a 81       	ldd	r24, Y+2	; 0x02
   14ea6:	9b 81       	ldd	r25, Y+3	; 0x03
   14ea8:	61 15       	cp	r22, r1
   14eaa:	71 05       	cpc	r23, r1
   14eac:	89 f1       	breq	.+98     	; 0x14f10 <malloc+0xa4>
   14eae:	fb 01       	movw	r30, r22
   14eb0:	93 83       	std	Z+3, r25	; 0x03
   14eb2:	82 83       	std	Z+2, r24	; 0x02
   14eb4:	fe 01       	movw	r30, r28
   14eb6:	11 c0       	rjmp	.+34     	; 0x14eda <malloc+0x6e>
   14eb8:	40 81       	ld	r20, Z
   14eba:	51 81       	ldd	r21, Z+1	; 0x01
   14ebc:	02 81       	ldd	r16, Z+2	; 0x02
   14ebe:	13 81       	ldd	r17, Z+3	; 0x03
   14ec0:	48 17       	cp	r20, r24
   14ec2:	59 07       	cpc	r21, r25
   14ec4:	e0 f0       	brcs	.+56     	; 0x14efe <malloc+0x92>
   14ec6:	48 17       	cp	r20, r24
   14ec8:	59 07       	cpc	r21, r25
   14eca:	99 f4       	brne	.+38     	; 0x14ef2 <malloc+0x86>
   14ecc:	10 97       	sbiw	r26, 0x00	; 0
   14ece:	61 f0       	breq	.+24     	; 0x14ee8 <malloc+0x7c>
   14ed0:	12 96       	adiw	r26, 0x02	; 2
   14ed2:	0c 93       	st	X, r16
   14ed4:	12 97       	sbiw	r26, 0x02	; 2
   14ed6:	13 96       	adiw	r26, 0x03	; 3
   14ed8:	1c 93       	st	X, r17
   14eda:	32 96       	adiw	r30, 0x02	; 2
   14edc:	cf 01       	movw	r24, r30
   14ede:	df 91       	pop	r29
   14ee0:	cf 91       	pop	r28
   14ee2:	1f 91       	pop	r17
   14ee4:	0f 91       	pop	r16
   14ee6:	08 95       	ret
   14ee8:	00 93 3f 13 	sts	0x133F, r16	; 0x80133f <__flp>
   14eec:	10 93 40 13 	sts	0x1340, r17	; 0x801340 <__flp+0x1>
   14ef0:	f4 cf       	rjmp	.-24     	; 0x14eda <malloc+0x6e>
   14ef2:	21 15       	cp	r18, r1
   14ef4:	31 05       	cpc	r19, r1
   14ef6:	51 f0       	breq	.+20     	; 0x14f0c <malloc+0xa0>
   14ef8:	42 17       	cp	r20, r18
   14efa:	53 07       	cpc	r21, r19
   14efc:	38 f0       	brcs	.+14     	; 0x14f0c <malloc+0xa0>
   14efe:	a9 01       	movw	r20, r18
   14f00:	db 01       	movw	r26, r22
   14f02:	9a 01       	movw	r18, r20
   14f04:	bd 01       	movw	r22, r26
   14f06:	df 01       	movw	r26, r30
   14f08:	f8 01       	movw	r30, r16
   14f0a:	c1 cf       	rjmp	.-126    	; 0x14e8e <malloc+0x22>
   14f0c:	ef 01       	movw	r28, r30
   14f0e:	f9 cf       	rjmp	.-14     	; 0x14f02 <malloc+0x96>
   14f10:	90 93 40 13 	sts	0x1340, r25	; 0x801340 <__flp+0x1>
   14f14:	80 93 3f 13 	sts	0x133F, r24	; 0x80133f <__flp>
   14f18:	cd cf       	rjmp	.-102    	; 0x14eb4 <malloc+0x48>
   14f1a:	fe 01       	movw	r30, r28
   14f1c:	e2 0f       	add	r30, r18
   14f1e:	f3 1f       	adc	r31, r19
   14f20:	81 93       	st	Z+, r24
   14f22:	91 93       	st	Z+, r25
   14f24:	22 50       	subi	r18, 0x02	; 2
   14f26:	31 09       	sbc	r19, r1
   14f28:	39 83       	std	Y+1, r19	; 0x01
   14f2a:	28 83       	st	Y, r18
   14f2c:	d7 cf       	rjmp	.-82     	; 0x14edc <malloc+0x70>
   14f2e:	20 91 3d 13 	lds	r18, 0x133D	; 0x80133d <__brkval>
   14f32:	30 91 3e 13 	lds	r19, 0x133E	; 0x80133e <__brkval+0x1>
   14f36:	23 2b       	or	r18, r19
   14f38:	41 f4       	brne	.+16     	; 0x14f4a <malloc+0xde>
   14f3a:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <__malloc_heap_start>
   14f3e:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <__malloc_heap_start+0x1>
   14f42:	30 93 3e 13 	sts	0x133E, r19	; 0x80133e <__brkval+0x1>
   14f46:	20 93 3d 13 	sts	0x133D, r18	; 0x80133d <__brkval>
   14f4a:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <__malloc_heap_end>
   14f4e:	30 91 11 02 	lds	r19, 0x0211	; 0x800211 <__malloc_heap_end+0x1>
   14f52:	21 15       	cp	r18, r1
   14f54:	31 05       	cpc	r19, r1
   14f56:	41 f4       	brne	.+16     	; 0x14f68 <malloc+0xfc>
   14f58:	2d b7       	in	r18, 0x3d	; 61
   14f5a:	3e b7       	in	r19, 0x3e	; 62
   14f5c:	40 91 14 02 	lds	r20, 0x0214	; 0x800214 <__malloc_margin>
   14f60:	50 91 15 02 	lds	r21, 0x0215	; 0x800215 <__malloc_margin+0x1>
   14f64:	24 1b       	sub	r18, r20
   14f66:	35 0b       	sbc	r19, r21
   14f68:	e0 91 3d 13 	lds	r30, 0x133D	; 0x80133d <__brkval>
   14f6c:	f0 91 3e 13 	lds	r31, 0x133E	; 0x80133e <__brkval+0x1>
   14f70:	e2 17       	cp	r30, r18
   14f72:	f3 07       	cpc	r31, r19
   14f74:	a0 f4       	brcc	.+40     	; 0x14f9e <malloc+0x132>
   14f76:	2e 1b       	sub	r18, r30
   14f78:	3f 0b       	sbc	r19, r31
   14f7a:	28 17       	cp	r18, r24
   14f7c:	39 07       	cpc	r19, r25
   14f7e:	78 f0       	brcs	.+30     	; 0x14f9e <malloc+0x132>
   14f80:	ac 01       	movw	r20, r24
   14f82:	4e 5f       	subi	r20, 0xFE	; 254
   14f84:	5f 4f       	sbci	r21, 0xFF	; 255
   14f86:	24 17       	cp	r18, r20
   14f88:	35 07       	cpc	r19, r21
   14f8a:	48 f0       	brcs	.+18     	; 0x14f9e <malloc+0x132>
   14f8c:	4e 0f       	add	r20, r30
   14f8e:	5f 1f       	adc	r21, r31
   14f90:	50 93 3e 13 	sts	0x133E, r21	; 0x80133e <__brkval+0x1>
   14f94:	40 93 3d 13 	sts	0x133D, r20	; 0x80133d <__brkval>
   14f98:	81 93       	st	Z+, r24
   14f9a:	91 93       	st	Z+, r25
   14f9c:	9f cf       	rjmp	.-194    	; 0x14edc <malloc+0x70>
   14f9e:	f0 e0       	ldi	r31, 0x00	; 0
   14fa0:	e0 e0       	ldi	r30, 0x00	; 0
   14fa2:	9c cf       	rjmp	.-200    	; 0x14edc <malloc+0x70>

00014fa4 <free>:
free():
   14fa4:	cf 93       	push	r28
   14fa6:	df 93       	push	r29
   14fa8:	00 97       	sbiw	r24, 0x00	; 0
   14faa:	e9 f0       	breq	.+58     	; 0x14fe6 <free+0x42>
   14fac:	fc 01       	movw	r30, r24
   14fae:	32 97       	sbiw	r30, 0x02	; 2
   14fb0:	13 82       	std	Z+3, r1	; 0x03
   14fb2:	12 82       	std	Z+2, r1	; 0x02
   14fb4:	a0 91 3f 13 	lds	r26, 0x133F	; 0x80133f <__flp>
   14fb8:	b0 91 40 13 	lds	r27, 0x1340	; 0x801340 <__flp+0x1>
   14fbc:	ed 01       	movw	r28, r26
   14fbe:	30 e0       	ldi	r19, 0x00	; 0
   14fc0:	20 e0       	ldi	r18, 0x00	; 0
   14fc2:	10 97       	sbiw	r26, 0x00	; 0
   14fc4:	a1 f4       	brne	.+40     	; 0x14fee <free+0x4a>
   14fc6:	20 81       	ld	r18, Z
   14fc8:	31 81       	ldd	r19, Z+1	; 0x01
   14fca:	82 0f       	add	r24, r18
   14fcc:	93 1f       	adc	r25, r19
   14fce:	20 91 3d 13 	lds	r18, 0x133D	; 0x80133d <__brkval>
   14fd2:	30 91 3e 13 	lds	r19, 0x133E	; 0x80133e <__brkval+0x1>
   14fd6:	28 17       	cp	r18, r24
   14fd8:	39 07       	cpc	r19, r25
   14fda:	09 f0       	breq	.+2      	; 0x14fde <free+0x3a>
   14fdc:	61 c0       	rjmp	.+194    	; 0x150a0 <free+0xfc>
   14fde:	f0 93 3e 13 	sts	0x133E, r31	; 0x80133e <__brkval+0x1>
   14fe2:	e0 93 3d 13 	sts	0x133D, r30	; 0x80133d <__brkval>
   14fe6:	df 91       	pop	r29
   14fe8:	cf 91       	pop	r28
   14fea:	08 95       	ret
   14fec:	ea 01       	movw	r28, r20
   14fee:	ce 17       	cp	r28, r30
   14ff0:	df 07       	cpc	r29, r31
   14ff2:	e8 f5       	brcc	.+122    	; 0x1506e <free+0xca>
   14ff4:	4a 81       	ldd	r20, Y+2	; 0x02
   14ff6:	5b 81       	ldd	r21, Y+3	; 0x03
   14ff8:	9e 01       	movw	r18, r28
   14ffa:	41 15       	cp	r20, r1
   14ffc:	51 05       	cpc	r21, r1
   14ffe:	b1 f7       	brne	.-20     	; 0x14fec <free+0x48>
   15000:	e9 01       	movw	r28, r18
   15002:	fb 83       	std	Y+3, r31	; 0x03
   15004:	ea 83       	std	Y+2, r30	; 0x02
   15006:	49 91       	ld	r20, Y+
   15008:	59 91       	ld	r21, Y+
   1500a:	c4 0f       	add	r28, r20
   1500c:	d5 1f       	adc	r29, r21
   1500e:	ec 17       	cp	r30, r28
   15010:	fd 07       	cpc	r31, r29
   15012:	61 f4       	brne	.+24     	; 0x1502c <free+0x88>
   15014:	80 81       	ld	r24, Z
   15016:	91 81       	ldd	r25, Z+1	; 0x01
   15018:	02 96       	adiw	r24, 0x02	; 2
   1501a:	84 0f       	add	r24, r20
   1501c:	95 1f       	adc	r25, r21
   1501e:	e9 01       	movw	r28, r18
   15020:	99 83       	std	Y+1, r25	; 0x01
   15022:	88 83       	st	Y, r24
   15024:	82 81       	ldd	r24, Z+2	; 0x02
   15026:	93 81       	ldd	r25, Z+3	; 0x03
   15028:	9b 83       	std	Y+3, r25	; 0x03
   1502a:	8a 83       	std	Y+2, r24	; 0x02
   1502c:	f0 e0       	ldi	r31, 0x00	; 0
   1502e:	e0 e0       	ldi	r30, 0x00	; 0
   15030:	12 96       	adiw	r26, 0x02	; 2
   15032:	8d 91       	ld	r24, X+
   15034:	9c 91       	ld	r25, X
   15036:	13 97       	sbiw	r26, 0x03	; 3
   15038:	00 97       	sbiw	r24, 0x00	; 0
   1503a:	b9 f5       	brne	.+110    	; 0x150aa <free+0x106>
   1503c:	2d 91       	ld	r18, X+
   1503e:	3c 91       	ld	r19, X
   15040:	11 97       	sbiw	r26, 0x01	; 1
   15042:	cd 01       	movw	r24, r26
   15044:	02 96       	adiw	r24, 0x02	; 2
   15046:	82 0f       	add	r24, r18
   15048:	93 1f       	adc	r25, r19
   1504a:	20 91 3d 13 	lds	r18, 0x133D	; 0x80133d <__brkval>
   1504e:	30 91 3e 13 	lds	r19, 0x133E	; 0x80133e <__brkval+0x1>
   15052:	28 17       	cp	r18, r24
   15054:	39 07       	cpc	r19, r25
   15056:	39 f6       	brne	.-114    	; 0x14fe6 <free+0x42>
   15058:	30 97       	sbiw	r30, 0x00	; 0
   1505a:	51 f5       	brne	.+84     	; 0x150b0 <free+0x10c>
   1505c:	10 92 40 13 	sts	0x1340, r1	; 0x801340 <__flp+0x1>
   15060:	10 92 3f 13 	sts	0x133F, r1	; 0x80133f <__flp>
   15064:	b0 93 3e 13 	sts	0x133E, r27	; 0x80133e <__brkval+0x1>
   15068:	a0 93 3d 13 	sts	0x133D, r26	; 0x80133d <__brkval>
   1506c:	bc cf       	rjmp	.-136    	; 0x14fe6 <free+0x42>
   1506e:	d3 83       	std	Z+3, r29	; 0x03
   15070:	c2 83       	std	Z+2, r28	; 0x02
   15072:	40 81       	ld	r20, Z
   15074:	51 81       	ldd	r21, Z+1	; 0x01
   15076:	84 0f       	add	r24, r20
   15078:	95 1f       	adc	r25, r21
   1507a:	c8 17       	cp	r28, r24
   1507c:	d9 07       	cpc	r29, r25
   1507e:	61 f4       	brne	.+24     	; 0x15098 <free+0xf4>
   15080:	4e 5f       	subi	r20, 0xFE	; 254
   15082:	5f 4f       	sbci	r21, 0xFF	; 255
   15084:	88 81       	ld	r24, Y
   15086:	99 81       	ldd	r25, Y+1	; 0x01
   15088:	48 0f       	add	r20, r24
   1508a:	59 1f       	adc	r21, r25
   1508c:	51 83       	std	Z+1, r21	; 0x01
   1508e:	40 83       	st	Z, r20
   15090:	8a 81       	ldd	r24, Y+2	; 0x02
   15092:	9b 81       	ldd	r25, Y+3	; 0x03
   15094:	93 83       	std	Z+3, r25	; 0x03
   15096:	82 83       	std	Z+2, r24	; 0x02
   15098:	21 15       	cp	r18, r1
   1509a:	31 05       	cpc	r19, r1
   1509c:	09 f0       	breq	.+2      	; 0x150a0 <free+0xfc>
   1509e:	b0 cf       	rjmp	.-160    	; 0x15000 <free+0x5c>
   150a0:	f0 93 40 13 	sts	0x1340, r31	; 0x801340 <__flp+0x1>
   150a4:	e0 93 3f 13 	sts	0x133F, r30	; 0x80133f <__flp>
   150a8:	9e cf       	rjmp	.-196    	; 0x14fe6 <free+0x42>
   150aa:	fd 01       	movw	r30, r26
   150ac:	dc 01       	movw	r26, r24
   150ae:	c0 cf       	rjmp	.-128    	; 0x15030 <free+0x8c>
   150b0:	13 82       	std	Z+3, r1	; 0x03
   150b2:	12 82       	std	Z+2, r1	; 0x02
   150b4:	d7 cf       	rjmp	.-82     	; 0x15064 <free+0xc0>

000150b6 <strtod>:
strtod():
   150b6:	8f 92       	push	r8
   150b8:	9f 92       	push	r9
   150ba:	af 92       	push	r10
   150bc:	bf 92       	push	r11
   150be:	cf 92       	push	r12
   150c0:	df 92       	push	r13
   150c2:	ef 92       	push	r14
   150c4:	ff 92       	push	r15
   150c6:	0f 93       	push	r16
   150c8:	1f 93       	push	r17
   150ca:	cf 93       	push	r28
   150cc:	df 93       	push	r29
   150ce:	5c 01       	movw	r10, r24
   150d0:	7b 01       	movw	r14, r22
   150d2:	61 15       	cp	r22, r1
   150d4:	71 05       	cpc	r23, r1
   150d6:	19 f0       	breq	.+6      	; 0x150de <strtod+0x28>
   150d8:	db 01       	movw	r26, r22
   150da:	8d 93       	st	X+, r24
   150dc:	9c 93       	st	X, r25
   150de:	85 01       	movw	r16, r10
   150e0:	0f 5f       	subi	r16, 0xFF	; 255
   150e2:	1f 4f       	sbci	r17, 0xFF	; 255
   150e4:	f5 01       	movw	r30, r10
   150e6:	d0 81       	ld	r29, Z
   150e8:	8d 2f       	mov	r24, r29
   150ea:	90 e0       	ldi	r25, 0x00	; 0
   150ec:	0e 94 d6 a2 	call	0x145ac	; 0x145ac <isspace>
   150f0:	6c 01       	movw	r12, r24
   150f2:	89 2b       	or	r24, r25
   150f4:	b9 f5       	brne	.+110    	; 0x15164 <strtod+0xae>
   150f6:	dd 32       	cpi	r29, 0x2D	; 45
   150f8:	b9 f5       	brne	.+110    	; 0x15168 <strtod+0xb2>
   150fa:	0f 5f       	subi	r16, 0xFF	; 255
   150fc:	1f 4f       	sbci	r17, 0xFF	; 255
   150fe:	d5 01       	movw	r26, r10
   15100:	11 96       	adiw	r26, 0x01	; 1
   15102:	dc 91       	ld	r29, X
   15104:	c1 e0       	ldi	r28, 0x01	; 1
   15106:	58 01       	movw	r10, r16
   15108:	f1 e0       	ldi	r31, 0x01	; 1
   1510a:	af 1a       	sub	r10, r31
   1510c:	b1 08       	sbc	r11, r1
   1510e:	43 e0       	ldi	r20, 0x03	; 3
   15110:	50 e0       	ldi	r21, 0x00	; 0
   15112:	6c ef       	ldi	r22, 0xFC	; 252
   15114:	72 e0       	ldi	r23, 0x02	; 2
   15116:	c5 01       	movw	r24, r10
   15118:	0e 94 94 aa 	call	0x15528	; 0x15528 <strncasecmp_P>
   1511c:	89 2b       	or	r24, r25
   1511e:	69 f5       	brne	.+90     	; 0x1517a <strtod+0xc4>
   15120:	68 01       	movw	r12, r16
   15122:	82 e0       	ldi	r24, 0x02	; 2
   15124:	c8 0e       	add	r12, r24
   15126:	d1 1c       	adc	r13, r1
   15128:	45 e0       	ldi	r20, 0x05	; 5
   1512a:	50 e0       	ldi	r21, 0x00	; 0
   1512c:	67 ef       	ldi	r22, 0xF7	; 247
   1512e:	72 e0       	ldi	r23, 0x02	; 2
   15130:	c6 01       	movw	r24, r12
   15132:	0e 94 94 aa 	call	0x15528	; 0x15528 <strncasecmp_P>
   15136:	89 2b       	or	r24, r25
   15138:	21 f4       	brne	.+8      	; 0x15142 <strtod+0x8c>
   1513a:	68 01       	movw	r12, r16
   1513c:	97 e0       	ldi	r25, 0x07	; 7
   1513e:	c9 0e       	add	r12, r25
   15140:	d1 1c       	adc	r13, r1
   15142:	e1 14       	cp	r14, r1
   15144:	f1 04       	cpc	r15, r1
   15146:	19 f0       	breq	.+6      	; 0x1514e <strtod+0x98>
   15148:	d7 01       	movw	r26, r14
   1514a:	cd 92       	st	X+, r12
   1514c:	dc 92       	st	X, r13
   1514e:	60 e0       	ldi	r22, 0x00	; 0
   15150:	70 e0       	ldi	r23, 0x00	; 0
   15152:	80 e8       	ldi	r24, 0x80	; 128
   15154:	9f ef       	ldi	r25, 0xFF	; 255
   15156:	c1 11       	cpse	r28, r1
   15158:	ff c0       	rjmp	.+510    	; 0x15358 <strtod+0x2a2>
   1515a:	60 e0       	ldi	r22, 0x00	; 0
   1515c:	70 e0       	ldi	r23, 0x00	; 0
   1515e:	80 e8       	ldi	r24, 0x80	; 128
   15160:	9f e7       	ldi	r25, 0x7F	; 127
   15162:	fa c0       	rjmp	.+500    	; 0x15358 <strtod+0x2a2>
   15164:	58 01       	movw	r10, r16
   15166:	bb cf       	rjmp	.-138    	; 0x150de <strtod+0x28>
   15168:	db 32       	cpi	r29, 0x2B	; 43
   1516a:	29 f4       	brne	.+10     	; 0x15176 <strtod+0xc0>
   1516c:	85 01       	movw	r16, r10
   1516e:	0e 5f       	subi	r16, 0xFE	; 254
   15170:	1f 4f       	sbci	r17, 0xFF	; 255
   15172:	f5 01       	movw	r30, r10
   15174:	d1 81       	ldd	r29, Z+1	; 0x01
   15176:	c0 e0       	ldi	r28, 0x00	; 0
   15178:	c6 cf       	rjmp	.-116    	; 0x15106 <strtod+0x50>
   1517a:	43 e0       	ldi	r20, 0x03	; 3
   1517c:	50 e0       	ldi	r21, 0x00	; 0
   1517e:	64 ef       	ldi	r22, 0xF4	; 244
   15180:	72 e0       	ldi	r23, 0x02	; 2
   15182:	c5 01       	movw	r24, r10
   15184:	0e 94 94 aa 	call	0x15528	; 0x15528 <strncasecmp_P>
   15188:	89 2b       	or	r24, r25
   1518a:	e9 f0       	breq	.+58     	; 0x151c6 <strtod+0x110>
   1518c:	f8 01       	movw	r30, r16
   1518e:	10 e0       	ldi	r17, 0x00	; 0
   15190:	00 e0       	ldi	r16, 0x00	; 0
   15192:	20 e0       	ldi	r18, 0x00	; 0
   15194:	30 e0       	ldi	r19, 0x00	; 0
   15196:	a9 01       	movw	r20, r18
   15198:	5f 01       	movw	r10, r30
   1519a:	b0 ed       	ldi	r27, 0xD0	; 208
   1519c:	8b 2e       	mov	r8, r27
   1519e:	8d 0e       	add	r8, r29
   151a0:	89 e0       	ldi	r24, 0x09	; 9
   151a2:	88 15       	cp	r24, r8
   151a4:	c8 f1       	brcs	.+114    	; 0x15218 <strtod+0x162>
   151a6:	9c 2e       	mov	r9, r28
   151a8:	68 94       	set
   151aa:	91 f8       	bld	r9, 1
   151ac:	8c 2f       	mov	r24, r28
   151ae:	88 70       	andi	r24, 0x08	; 8
   151b0:	c2 ff       	sbrs	r28, 2
   151b2:	16 c0       	rjmp	.+44     	; 0x151e0 <strtod+0x12a>
   151b4:	81 11       	cpse	r24, r1
   151b6:	02 c0       	rjmp	.+4      	; 0x151bc <strtod+0x106>
   151b8:	0f 5f       	subi	r16, 0xFF	; 255
   151ba:	1f 4f       	sbci	r17, 0xFF	; 255
   151bc:	31 96       	adiw	r30, 0x01	; 1
   151be:	d5 01       	movw	r26, r10
   151c0:	dc 91       	ld	r29, X
   151c2:	c9 2d       	mov	r28, r9
   151c4:	e9 cf       	rjmp	.-46     	; 0x15198 <strtod+0xe2>
   151c6:	e1 14       	cp	r14, r1
   151c8:	f1 04       	cpc	r15, r1
   151ca:	29 f0       	breq	.+10     	; 0x151d6 <strtod+0x120>
   151cc:	0e 5f       	subi	r16, 0xFE	; 254
   151ce:	1f 4f       	sbci	r17, 0xFF	; 255
   151d0:	f7 01       	movw	r30, r14
   151d2:	11 83       	std	Z+1, r17	; 0x01
   151d4:	00 83       	st	Z, r16
   151d6:	60 e0       	ldi	r22, 0x00	; 0
   151d8:	70 e0       	ldi	r23, 0x00	; 0
   151da:	80 ec       	ldi	r24, 0xC0	; 192
   151dc:	9f e7       	ldi	r25, 0x7F	; 127
   151de:	bc c0       	rjmp	.+376    	; 0x15358 <strtod+0x2a2>
   151e0:	88 23       	and	r24, r24
   151e2:	11 f0       	breq	.+4      	; 0x151e8 <strtod+0x132>
   151e4:	01 50       	subi	r16, 0x01	; 1
   151e6:	11 09       	sbc	r17, r1
   151e8:	a5 e0       	ldi	r26, 0x05	; 5
   151ea:	b0 e0       	ldi	r27, 0x00	; 0
   151ec:	0e 94 1a ad 	call	0x15a34	; 0x15a34 <__muluhisi3>
   151f0:	9b 01       	movw	r18, r22
   151f2:	ac 01       	movw	r20, r24
   151f4:	22 0f       	add	r18, r18
   151f6:	33 1f       	adc	r19, r19
   151f8:	44 1f       	adc	r20, r20
   151fa:	55 1f       	adc	r21, r21
   151fc:	28 0d       	add	r18, r8
   151fe:	31 1d       	adc	r19, r1
   15200:	41 1d       	adc	r20, r1
   15202:	51 1d       	adc	r21, r1
   15204:	28 39       	cpi	r18, 0x98	; 152
   15206:	99 e9       	ldi	r25, 0x99	; 153
   15208:	39 07       	cpc	r19, r25
   1520a:	49 07       	cpc	r20, r25
   1520c:	99 e1       	ldi	r25, 0x19	; 25
   1520e:	59 07       	cpc	r21, r25
   15210:	a8 f2       	brcs	.-86     	; 0x151bc <strtod+0x106>
   15212:	c6 60       	ori	r28, 0x06	; 6
   15214:	9c 2e       	mov	r9, r28
   15216:	d2 cf       	rjmp	.-92     	; 0x151bc <strtod+0x106>
   15218:	ae ef       	ldi	r26, 0xFE	; 254
   1521a:	8a 12       	cpse	r8, r26
   1521c:	06 c0       	rjmp	.+12     	; 0x1522a <strtod+0x174>
   1521e:	c3 fd       	sbrc	r28, 3
   15220:	3c c0       	rjmp	.+120    	; 0x1529a <strtod+0x1e4>
   15222:	9c 2e       	mov	r9, r28
   15224:	68 94       	set
   15226:	93 f8       	bld	r9, 3
   15228:	c9 cf       	rjmp	.-110    	; 0x151bc <strtod+0x106>
   1522a:	df 7d       	andi	r29, 0xDF	; 223
   1522c:	d5 34       	cpi	r29, 0x45	; 69
   1522e:	a9 f5       	brne	.+106    	; 0x1529a <strtod+0x1e4>
   15230:	80 81       	ld	r24, Z
   15232:	8d 32       	cpi	r24, 0x2D	; 45
   15234:	39 f4       	brne	.+14     	; 0x15244 <strtod+0x18e>
   15236:	c0 61       	ori	r28, 0x10	; 16
   15238:	df 01       	movw	r26, r30
   1523a:	12 96       	adiw	r26, 0x02	; 2
   1523c:	81 81       	ldd	r24, Z+1	; 0x01
   1523e:	62 e0       	ldi	r22, 0x02	; 2
   15240:	70 e0       	ldi	r23, 0x00	; 0
   15242:	06 c0       	rjmp	.+12     	; 0x15250 <strtod+0x19a>
   15244:	df 01       	movw	r26, r30
   15246:	8b 32       	cpi	r24, 0x2B	; 43
   15248:	c1 f3       	breq	.-16     	; 0x1523a <strtod+0x184>
   1524a:	11 96       	adiw	r26, 0x01	; 1
   1524c:	61 e0       	ldi	r22, 0x01	; 1
   1524e:	70 e0       	ldi	r23, 0x00	; 0
   15250:	80 53       	subi	r24, 0x30	; 48
   15252:	5d 01       	movw	r10, r26
   15254:	a6 1a       	sub	r10, r22
   15256:	b7 0a       	sbc	r11, r23
   15258:	8a 30       	cpi	r24, 0x0A	; 10
   1525a:	f8 f4       	brcc	.+62     	; 0x1529a <strtod+0x1e4>
   1525c:	e0 e8       	ldi	r30, 0x80	; 128
   1525e:	ce 16       	cp	r12, r30
   15260:	ec e0       	ldi	r30, 0x0C	; 12
   15262:	de 06       	cpc	r13, r30
   15264:	5c f4       	brge	.+22     	; 0x1527c <strtod+0x1c6>
   15266:	b6 01       	movw	r22, r12
   15268:	66 0f       	add	r22, r22
   1526a:	77 1f       	adc	r23, r23
   1526c:	66 0f       	add	r22, r22
   1526e:	77 1f       	adc	r23, r23
   15270:	c6 0e       	add	r12, r22
   15272:	d7 1e       	adc	r13, r23
   15274:	cc 0c       	add	r12, r12
   15276:	dd 1c       	adc	r13, r13
   15278:	c8 0e       	add	r12, r24
   1527a:	d1 1c       	adc	r13, r1
   1527c:	5d 01       	movw	r10, r26
   1527e:	ff ef       	ldi	r31, 0xFF	; 255
   15280:	af 1a       	sub	r10, r31
   15282:	bf 0a       	sbc	r11, r31
   15284:	8c 91       	ld	r24, X
   15286:	80 53       	subi	r24, 0x30	; 48
   15288:	8a 30       	cpi	r24, 0x0A	; 10
   1528a:	a8 f1       	brcs	.+106    	; 0x152f6 <strtod+0x240>
   1528c:	c4 ff       	sbrs	r28, 4
   1528e:	03 c0       	rjmp	.+6      	; 0x15296 <strtod+0x1e0>
   15290:	d1 94       	neg	r13
   15292:	c1 94       	neg	r12
   15294:	d1 08       	sbc	r13, r1
   15296:	0c 0d       	add	r16, r12
   15298:	1d 1d       	adc	r17, r13
   1529a:	c1 ff       	sbrs	r28, 1
   1529c:	09 c0       	rjmp	.+18     	; 0x152b0 <strtod+0x1fa>
   1529e:	e1 14       	cp	r14, r1
   152a0:	f1 04       	cpc	r15, r1
   152a2:	31 f0       	breq	.+12     	; 0x152b0 <strtod+0x1fa>
   152a4:	81 e0       	ldi	r24, 0x01	; 1
   152a6:	a8 1a       	sub	r10, r24
   152a8:	b1 08       	sbc	r11, r1
   152aa:	d7 01       	movw	r26, r14
   152ac:	ad 92       	st	X+, r10
   152ae:	bc 92       	st	X, r11
   152b0:	ca 01       	movw	r24, r20
   152b2:	b9 01       	movw	r22, r18
   152b4:	0e 94 6c ab 	call	0x156d8	; 0x156d8 <__floatunsisf>
   152b8:	c3 70       	andi	r28, 0x03	; 3
   152ba:	c3 30       	cpi	r28, 0x03	; 3
   152bc:	09 f4       	brne	.+2      	; 0x152c0 <strtod+0x20a>
   152be:	90 58       	subi	r25, 0x80	; 128
   152c0:	4b 01       	movw	r8, r22
   152c2:	5c 01       	movw	r10, r24
   152c4:	20 e0       	ldi	r18, 0x00	; 0
   152c6:	30 e0       	ldi	r19, 0x00	; 0
   152c8:	a9 01       	movw	r20, r18
   152ca:	0e 94 67 ab 	call	0x156ce	; 0x156ce <__cmpsf2>
   152ce:	88 23       	and	r24, r24
   152d0:	09 f4       	brne	.+2      	; 0x152d4 <strtod+0x21e>
   152d2:	40 c0       	rjmp	.+128    	; 0x15354 <strtod+0x29e>
   152d4:	cb e2       	ldi	r28, 0x2B	; 43
   152d6:	d3 e0       	ldi	r29, 0x03	; 3
   152d8:	17 ff       	sbrs	r17, 7
   152da:	05 c0       	rjmp	.+10     	; 0x152e6 <strtod+0x230>
   152dc:	11 95       	neg	r17
   152de:	01 95       	neg	r16
   152e0:	11 09       	sbc	r17, r1
   152e2:	c3 e1       	ldi	r28, 0x13	; 19
   152e4:	d3 e0       	ldi	r29, 0x03	; 3
   152e6:	6e 01       	movw	r12, r28
   152e8:	b8 e1       	ldi	r27, 0x18	; 24
   152ea:	cb 1a       	sub	r12, r27
   152ec:	d1 08       	sbc	r13, r1
   152ee:	80 e2       	ldi	r24, 0x20	; 32
   152f0:	e8 2e       	mov	r14, r24
   152f2:	f1 2c       	mov	r15, r1
   152f4:	0f c0       	rjmp	.+30     	; 0x15314 <strtod+0x25e>
   152f6:	d5 01       	movw	r26, r10
   152f8:	b1 cf       	rjmp	.-158    	; 0x1525c <strtod+0x1a6>
   152fa:	fe 01       	movw	r30, r28
   152fc:	25 91       	lpm	r18, Z+
   152fe:	35 91       	lpm	r19, Z+
   15300:	45 91       	lpm	r20, Z+
   15302:	54 91       	lpm	r21, Z
   15304:	0e 19       	sub	r16, r14
   15306:	1f 09       	sbc	r17, r15
   15308:	c5 01       	movw	r24, r10
   1530a:	b4 01       	movw	r22, r8
   1530c:	0e 94 cd ab 	call	0x1579a	; 0x1579a <__mulsf3>
   15310:	4b 01       	movw	r8, r22
   15312:	5c 01       	movw	r10, r24
   15314:	d5 01       	movw	r26, r10
   15316:	c4 01       	movw	r24, r8
   15318:	0e 15       	cp	r16, r14
   1531a:	1f 05       	cpc	r17, r15
   1531c:	74 f7       	brge	.-36     	; 0x152fa <strtod+0x244>
   1531e:	24 97       	sbiw	r28, 0x04	; 4
   15320:	f5 94       	asr	r15
   15322:	e7 94       	ror	r14
   15324:	cc 16       	cp	r12, r28
   15326:	dd 06       	cpc	r13, r29
   15328:	a9 f7       	brne	.-22     	; 0x15314 <strtod+0x25e>
   1532a:	8a 2f       	mov	r24, r26
   1532c:	88 0f       	add	r24, r24
   1532e:	8b 2f       	mov	r24, r27
   15330:	88 1f       	adc	r24, r24
   15332:	8f 3f       	cpi	r24, 0xFF	; 255
   15334:	49 f0       	breq	.+18     	; 0x15348 <strtod+0x292>
   15336:	20 e0       	ldi	r18, 0x00	; 0
   15338:	30 e0       	ldi	r19, 0x00	; 0
   1533a:	a9 01       	movw	r20, r18
   1533c:	c5 01       	movw	r24, r10
   1533e:	b4 01       	movw	r22, r8
   15340:	0e 94 67 ab 	call	0x156ce	; 0x156ce <__cmpsf2>
   15344:	81 11       	cpse	r24, r1
   15346:	06 c0       	rjmp	.+12     	; 0x15354 <strtod+0x29e>
   15348:	82 e2       	ldi	r24, 0x22	; 34
   1534a:	90 e0       	ldi	r25, 0x00	; 0
   1534c:	90 93 3c 13 	sts	0x133C, r25	; 0x80133c <errno+0x1>
   15350:	80 93 3b 13 	sts	0x133B, r24	; 0x80133b <errno>
   15354:	c5 01       	movw	r24, r10
   15356:	b4 01       	movw	r22, r8
   15358:	df 91       	pop	r29
   1535a:	cf 91       	pop	r28
   1535c:	1f 91       	pop	r17
   1535e:	0f 91       	pop	r16
   15360:	ff 90       	pop	r15
   15362:	ef 90       	pop	r14
   15364:	df 90       	pop	r13
   15366:	cf 90       	pop	r12
   15368:	bf 90       	pop	r11
   1536a:	af 90       	pop	r10
   1536c:	9f 90       	pop	r9
   1536e:	8f 90       	pop	r8
   15370:	08 95       	ret

00015372 <__ftoa_engine>:
__ftoa_engine():
   15372:	28 30       	cpi	r18, 0x08	; 8
   15374:	08 f0       	brcs	.+2      	; 0x15378 <__ftoa_engine+0x6>
   15376:	27 e0       	ldi	r18, 0x07	; 7
   15378:	33 27       	eor	r19, r19
   1537a:	da 01       	movw	r26, r20
   1537c:	99 0f       	add	r25, r25
   1537e:	31 1d       	adc	r19, r1
   15380:	87 fd       	sbrc	r24, 7
   15382:	91 60       	ori	r25, 0x01	; 1
   15384:	00 96       	adiw	r24, 0x00	; 0
   15386:	61 05       	cpc	r22, r1
   15388:	71 05       	cpc	r23, r1
   1538a:	39 f4       	brne	.+14     	; 0x1539a <__ftoa_engine+0x28>
   1538c:	32 60       	ori	r19, 0x02	; 2
   1538e:	2e 5f       	subi	r18, 0xFE	; 254
   15390:	3d 93       	st	X+, r19
   15392:	30 e3       	ldi	r19, 0x30	; 48
   15394:	2a 95       	dec	r18
   15396:	e1 f7       	brne	.-8      	; 0x15390 <__ftoa_engine+0x1e>
   15398:	08 95       	ret
   1539a:	9f 3f       	cpi	r25, 0xFF	; 255
   1539c:	30 f0       	brcs	.+12     	; 0x153aa <__ftoa_engine+0x38>
   1539e:	80 38       	cpi	r24, 0x80	; 128
   153a0:	71 05       	cpc	r23, r1
   153a2:	61 05       	cpc	r22, r1
   153a4:	09 f0       	breq	.+2      	; 0x153a8 <__ftoa_engine+0x36>
   153a6:	3c 5f       	subi	r19, 0xFC	; 252
   153a8:	3c 5f       	subi	r19, 0xFC	; 252
   153aa:	3d 93       	st	X+, r19
   153ac:	91 30       	cpi	r25, 0x01	; 1
   153ae:	08 f0       	brcs	.+2      	; 0x153b2 <__ftoa_engine+0x40>
   153b0:	80 68       	ori	r24, 0x80	; 128
   153b2:	91 1d       	adc	r25, r1
   153b4:	df 93       	push	r29
   153b6:	cf 93       	push	r28
   153b8:	1f 93       	push	r17
   153ba:	0f 93       	push	r16
   153bc:	ff 92       	push	r15
   153be:	ef 92       	push	r14
   153c0:	19 2f       	mov	r17, r25
   153c2:	98 7f       	andi	r25, 0xF8	; 248
   153c4:	96 95       	lsr	r25
   153c6:	e9 2f       	mov	r30, r25
   153c8:	96 95       	lsr	r25
   153ca:	96 95       	lsr	r25
   153cc:	e9 0f       	add	r30, r25
   153ce:	ff 27       	eor	r31, r31
   153d0:	e7 57       	subi	r30, 0x77	; 119
   153d2:	fc 4f       	sbci	r31, 0xFC	; 252
   153d4:	99 27       	eor	r25, r25
   153d6:	33 27       	eor	r19, r19
   153d8:	ee 24       	eor	r14, r14
   153da:	ff 24       	eor	r15, r15
   153dc:	a7 01       	movw	r20, r14
   153de:	e7 01       	movw	r28, r14
   153e0:	05 90       	lpm	r0, Z+
   153e2:	08 94       	sec
   153e4:	07 94       	ror	r0
   153e6:	28 f4       	brcc	.+10     	; 0x153f2 <__ftoa_engine+0x80>
   153e8:	36 0f       	add	r19, r22
   153ea:	e7 1e       	adc	r14, r23
   153ec:	f8 1e       	adc	r15, r24
   153ee:	49 1f       	adc	r20, r25
   153f0:	51 1d       	adc	r21, r1
   153f2:	66 0f       	add	r22, r22
   153f4:	77 1f       	adc	r23, r23
   153f6:	88 1f       	adc	r24, r24
   153f8:	99 1f       	adc	r25, r25
   153fa:	06 94       	lsr	r0
   153fc:	a1 f7       	brne	.-24     	; 0x153e6 <__ftoa_engine+0x74>
   153fe:	05 90       	lpm	r0, Z+
   15400:	07 94       	ror	r0
   15402:	28 f4       	brcc	.+10     	; 0x1540e <__ftoa_engine+0x9c>
   15404:	e7 0e       	add	r14, r23
   15406:	f8 1e       	adc	r15, r24
   15408:	49 1f       	adc	r20, r25
   1540a:	56 1f       	adc	r21, r22
   1540c:	c1 1d       	adc	r28, r1
   1540e:	77 0f       	add	r23, r23
   15410:	88 1f       	adc	r24, r24
   15412:	99 1f       	adc	r25, r25
   15414:	66 1f       	adc	r22, r22
   15416:	06 94       	lsr	r0
   15418:	a1 f7       	brne	.-24     	; 0x15402 <__ftoa_engine+0x90>
   1541a:	05 90       	lpm	r0, Z+
   1541c:	07 94       	ror	r0
   1541e:	28 f4       	brcc	.+10     	; 0x1542a <__ftoa_engine+0xb8>
   15420:	f8 0e       	add	r15, r24
   15422:	49 1f       	adc	r20, r25
   15424:	56 1f       	adc	r21, r22
   15426:	c7 1f       	adc	r28, r23
   15428:	d1 1d       	adc	r29, r1
   1542a:	88 0f       	add	r24, r24
   1542c:	99 1f       	adc	r25, r25
   1542e:	66 1f       	adc	r22, r22
   15430:	77 1f       	adc	r23, r23
   15432:	06 94       	lsr	r0
   15434:	a1 f7       	brne	.-24     	; 0x1541e <__ftoa_engine+0xac>
   15436:	05 90       	lpm	r0, Z+
   15438:	07 94       	ror	r0
   1543a:	20 f4       	brcc	.+8      	; 0x15444 <__ftoa_engine+0xd2>
   1543c:	49 0f       	add	r20, r25
   1543e:	56 1f       	adc	r21, r22
   15440:	c7 1f       	adc	r28, r23
   15442:	d8 1f       	adc	r29, r24
   15444:	99 0f       	add	r25, r25
   15446:	66 1f       	adc	r22, r22
   15448:	77 1f       	adc	r23, r23
   1544a:	88 1f       	adc	r24, r24
   1544c:	06 94       	lsr	r0
   1544e:	a9 f7       	brne	.-22     	; 0x1543a <__ftoa_engine+0xc8>
   15450:	84 91       	lpm	r24, Z
   15452:	10 95       	com	r17
   15454:	17 70       	andi	r17, 0x07	; 7
   15456:	41 f0       	breq	.+16     	; 0x15468 <__ftoa_engine+0xf6>
   15458:	d6 95       	lsr	r29
   1545a:	c7 95       	ror	r28
   1545c:	57 95       	ror	r21
   1545e:	47 95       	ror	r20
   15460:	f7 94       	ror	r15
   15462:	e7 94       	ror	r14
   15464:	1a 95       	dec	r17
   15466:	c1 f7       	brne	.-16     	; 0x15458 <__ftoa_engine+0xe6>
   15468:	ef e2       	ldi	r30, 0x2F	; 47
   1546a:	f3 e0       	ldi	r31, 0x03	; 3
   1546c:	68 94       	set
   1546e:	15 90       	lpm	r1, Z+
   15470:	15 91       	lpm	r17, Z+
   15472:	35 91       	lpm	r19, Z+
   15474:	65 91       	lpm	r22, Z+
   15476:	95 91       	lpm	r25, Z+
   15478:	05 90       	lpm	r0, Z+
   1547a:	7f e2       	ldi	r23, 0x2F	; 47
   1547c:	73 95       	inc	r23
   1547e:	e1 18       	sub	r14, r1
   15480:	f1 0a       	sbc	r15, r17
   15482:	43 0b       	sbc	r20, r19
   15484:	56 0b       	sbc	r21, r22
   15486:	c9 0b       	sbc	r28, r25
   15488:	d0 09       	sbc	r29, r0
   1548a:	c0 f7       	brcc	.-16     	; 0x1547c <__ftoa_engine+0x10a>
   1548c:	e1 0c       	add	r14, r1
   1548e:	f1 1e       	adc	r15, r17
   15490:	43 1f       	adc	r20, r19
   15492:	56 1f       	adc	r21, r22
   15494:	c9 1f       	adc	r28, r25
   15496:	d0 1d       	adc	r29, r0
   15498:	7e f4       	brtc	.+30     	; 0x154b8 <__ftoa_engine+0x146>
   1549a:	70 33       	cpi	r23, 0x30	; 48
   1549c:	11 f4       	brne	.+4      	; 0x154a2 <__ftoa_engine+0x130>
   1549e:	8a 95       	dec	r24
   154a0:	e6 cf       	rjmp	.-52     	; 0x1546e <__ftoa_engine+0xfc>
   154a2:	e8 94       	clt
   154a4:	01 50       	subi	r16, 0x01	; 1
   154a6:	30 f0       	brcs	.+12     	; 0x154b4 <__ftoa_engine+0x142>
   154a8:	08 0f       	add	r16, r24
   154aa:	0a f4       	brpl	.+2      	; 0x154ae <__ftoa_engine+0x13c>
   154ac:	00 27       	eor	r16, r16
   154ae:	02 17       	cp	r16, r18
   154b0:	08 f4       	brcc	.+2      	; 0x154b4 <__ftoa_engine+0x142>
   154b2:	20 2f       	mov	r18, r16
   154b4:	23 95       	inc	r18
   154b6:	02 2f       	mov	r16, r18
   154b8:	7a 33       	cpi	r23, 0x3A	; 58
   154ba:	28 f0       	brcs	.+10     	; 0x154c6 <__ftoa_engine+0x154>
   154bc:	79 e3       	ldi	r23, 0x39	; 57
   154be:	7d 93       	st	X+, r23
   154c0:	2a 95       	dec	r18
   154c2:	e9 f7       	brne	.-6      	; 0x154be <__ftoa_engine+0x14c>
   154c4:	10 c0       	rjmp	.+32     	; 0x154e6 <__ftoa_engine+0x174>
   154c6:	7d 93       	st	X+, r23
   154c8:	2a 95       	dec	r18
   154ca:	89 f6       	brne	.-94     	; 0x1546e <__ftoa_engine+0xfc>
   154cc:	06 94       	lsr	r0
   154ce:	97 95       	ror	r25
   154d0:	67 95       	ror	r22
   154d2:	37 95       	ror	r19
   154d4:	17 95       	ror	r17
   154d6:	17 94       	ror	r1
   154d8:	e1 18       	sub	r14, r1
   154da:	f1 0a       	sbc	r15, r17
   154dc:	43 0b       	sbc	r20, r19
   154de:	56 0b       	sbc	r21, r22
   154e0:	c9 0b       	sbc	r28, r25
   154e2:	d0 09       	sbc	r29, r0
   154e4:	98 f0       	brcs	.+38     	; 0x1550c <__ftoa_engine+0x19a>
   154e6:	23 95       	inc	r18
   154e8:	7e 91       	ld	r23, -X
   154ea:	73 95       	inc	r23
   154ec:	7a 33       	cpi	r23, 0x3A	; 58
   154ee:	08 f0       	brcs	.+2      	; 0x154f2 <__ftoa_engine+0x180>
   154f0:	70 e3       	ldi	r23, 0x30	; 48
   154f2:	7c 93       	st	X, r23
   154f4:	20 13       	cpse	r18, r16
   154f6:	b8 f7       	brcc	.-18     	; 0x154e6 <__ftoa_engine+0x174>
   154f8:	7e 91       	ld	r23, -X
   154fa:	70 61       	ori	r23, 0x10	; 16
   154fc:	7d 93       	st	X+, r23
   154fe:	30 f0       	brcs	.+12     	; 0x1550c <__ftoa_engine+0x19a>
   15500:	83 95       	inc	r24
   15502:	71 e3       	ldi	r23, 0x31	; 49
   15504:	7d 93       	st	X+, r23
   15506:	70 e3       	ldi	r23, 0x30	; 48
   15508:	2a 95       	dec	r18
   1550a:	e1 f7       	brne	.-8      	; 0x15504 <__ftoa_engine+0x192>
   1550c:	11 24       	eor	r1, r1
   1550e:	ef 90       	pop	r14
   15510:	ff 90       	pop	r15
   15512:	0f 91       	pop	r16
   15514:	1f 91       	pop	r17
   15516:	cf 91       	pop	r28
   15518:	df 91       	pop	r29
   1551a:	99 27       	eor	r25, r25
   1551c:	87 fd       	sbrc	r24, 7
   1551e:	90 95       	com	r25
   15520:	08 95       	ret

00015522 <__ctype_isfalse>:
__ctype_isfalse():
   15522:	99 27       	eor	r25, r25
   15524:	88 27       	eor	r24, r24

00015526 <__ctype_istrue>:
__ctype_istrue():
   15526:	08 95       	ret

00015528 <strncasecmp_P>:
strncasecmp_P():
   15528:	fb 01       	movw	r30, r22
   1552a:	dc 01       	movw	r26, r24
   1552c:	41 50       	subi	r20, 0x01	; 1
   1552e:	50 40       	sbci	r21, 0x00	; 0
   15530:	88 f0       	brcs	.+34     	; 0x15554 <strncasecmp_P+0x2c>
   15532:	8d 91       	ld	r24, X+
   15534:	81 34       	cpi	r24, 0x41	; 65
   15536:	1c f0       	brlt	.+6      	; 0x1553e <strncasecmp_P+0x16>
   15538:	8b 35       	cpi	r24, 0x5B	; 91
   1553a:	0c f4       	brge	.+2      	; 0x1553e <strncasecmp_P+0x16>
   1553c:	80 5e       	subi	r24, 0xE0	; 224
   1553e:	65 91       	lpm	r22, Z+
   15540:	61 34       	cpi	r22, 0x41	; 65
   15542:	1c f0       	brlt	.+6      	; 0x1554a <strncasecmp_P+0x22>
   15544:	6b 35       	cpi	r22, 0x5B	; 91
   15546:	0c f4       	brge	.+2      	; 0x1554a <strncasecmp_P+0x22>
   15548:	60 5e       	subi	r22, 0xE0	; 224
   1554a:	86 1b       	sub	r24, r22
   1554c:	61 11       	cpse	r22, r1
   1554e:	71 f3       	breq	.-36     	; 0x1552c <strncasecmp_P+0x4>
   15550:	99 0b       	sbc	r25, r25
   15552:	08 95       	ret
   15554:	88 1b       	sub	r24, r24
   15556:	fc cf       	rjmp	.-8      	; 0x15550 <strncasecmp_P+0x28>

00015558 <strnlen_P>:
strnlen_P():
   15558:	fc 01       	movw	r30, r24
   1555a:	05 90       	lpm	r0, Z+
   1555c:	61 50       	subi	r22, 0x01	; 1
   1555e:	70 40       	sbci	r23, 0x00	; 0
   15560:	01 10       	cpse	r0, r1
   15562:	d8 f7       	brcc	.-10     	; 0x1555a <strnlen_P+0x2>
   15564:	80 95       	com	r24
   15566:	90 95       	com	r25
   15568:	8e 0f       	add	r24, r30
   1556a:	9f 1f       	adc	r25, r31
   1556c:	08 95       	ret

0001556e <memset>:
memset():
   1556e:	dc 01       	movw	r26, r24
   15570:	01 c0       	rjmp	.+2      	; 0x15574 <memset+0x6>
   15572:	6d 93       	st	X+, r22
   15574:	41 50       	subi	r20, 0x01	; 1
   15576:	50 40       	sbci	r21, 0x00	; 0
   15578:	e0 f7       	brcc	.-8      	; 0x15572 <memset+0x4>
   1557a:	08 95       	ret

0001557c <strnlen>:
strnlen():
   1557c:	fc 01       	movw	r30, r24
   1557e:	61 50       	subi	r22, 0x01	; 1
   15580:	70 40       	sbci	r23, 0x00	; 0
   15582:	01 90       	ld	r0, Z+
   15584:	01 10       	cpse	r0, r1
   15586:	d8 f7       	brcc	.-10     	; 0x1557e <strnlen+0x2>
   15588:	80 95       	com	r24
   1558a:	90 95       	com	r25
   1558c:	8e 0f       	add	r24, r30
   1558e:	9f 1f       	adc	r25, r31
   15590:	08 95       	ret

00015592 <strrev>:
strrev():
   15592:	dc 01       	movw	r26, r24
   15594:	fc 01       	movw	r30, r24
   15596:	67 2f       	mov	r22, r23
   15598:	71 91       	ld	r23, Z+
   1559a:	77 23       	and	r23, r23
   1559c:	e1 f7       	brne	.-8      	; 0x15596 <strrev+0x4>
   1559e:	32 97       	sbiw	r30, 0x02	; 2
   155a0:	04 c0       	rjmp	.+8      	; 0x155aa <strrev+0x18>
   155a2:	7c 91       	ld	r23, X
   155a4:	6d 93       	st	X+, r22
   155a6:	70 83       	st	Z, r23
   155a8:	62 91       	ld	r22, -Z
   155aa:	ae 17       	cp	r26, r30
   155ac:	bf 07       	cpc	r27, r31
   155ae:	c8 f3       	brcs	.-14     	; 0x155a2 <strrev+0x10>
   155b0:	08 95       	ret

000155b2 <fputc>:
fputc():
   155b2:	0f 93       	push	r16
   155b4:	1f 93       	push	r17
   155b6:	cf 93       	push	r28
   155b8:	df 93       	push	r29
   155ba:	18 2f       	mov	r17, r24
   155bc:	09 2f       	mov	r16, r25
   155be:	eb 01       	movw	r28, r22
   155c0:	8b 81       	ldd	r24, Y+3	; 0x03
   155c2:	81 fd       	sbrc	r24, 1
   155c4:	09 c0       	rjmp	.+18     	; 0x155d8 <fputc+0x26>
   155c6:	1f ef       	ldi	r17, 0xFF	; 255
   155c8:	0f ef       	ldi	r16, 0xFF	; 255
   155ca:	81 2f       	mov	r24, r17
   155cc:	90 2f       	mov	r25, r16
   155ce:	df 91       	pop	r29
   155d0:	cf 91       	pop	r28
   155d2:	1f 91       	pop	r17
   155d4:	0f 91       	pop	r16
   155d6:	08 95       	ret
   155d8:	82 ff       	sbrs	r24, 2
   155da:	14 c0       	rjmp	.+40     	; 0x15604 <fputc+0x52>
   155dc:	2e 81       	ldd	r18, Y+6	; 0x06
   155de:	3f 81       	ldd	r19, Y+7	; 0x07
   155e0:	8c 81       	ldd	r24, Y+4	; 0x04
   155e2:	9d 81       	ldd	r25, Y+5	; 0x05
   155e4:	28 17       	cp	r18, r24
   155e6:	39 07       	cpc	r19, r25
   155e8:	3c f4       	brge	.+14     	; 0x155f8 <fputc+0x46>
   155ea:	e8 81       	ld	r30, Y
   155ec:	f9 81       	ldd	r31, Y+1	; 0x01
   155ee:	cf 01       	movw	r24, r30
   155f0:	01 96       	adiw	r24, 0x01	; 1
   155f2:	99 83       	std	Y+1, r25	; 0x01
   155f4:	88 83       	st	Y, r24
   155f6:	10 83       	st	Z, r17
   155f8:	8e 81       	ldd	r24, Y+6	; 0x06
   155fa:	9f 81       	ldd	r25, Y+7	; 0x07
   155fc:	01 96       	adiw	r24, 0x01	; 1
   155fe:	9f 83       	std	Y+7, r25	; 0x07
   15600:	8e 83       	std	Y+6, r24	; 0x06
   15602:	e3 cf       	rjmp	.-58     	; 0x155ca <fputc+0x18>
   15604:	e8 85       	ldd	r30, Y+8	; 0x08
   15606:	f9 85       	ldd	r31, Y+9	; 0x09
   15608:	81 2f       	mov	r24, r17
   1560a:	19 95       	eicall
   1560c:	89 2b       	or	r24, r25
   1560e:	a1 f3       	breq	.-24     	; 0x155f8 <fputc+0x46>
   15610:	da cf       	rjmp	.-76     	; 0x155c6 <fputc+0x14>

00015612 <__ultoa_invert>:
__ultoa_invert():
   15612:	fa 01       	movw	r30, r20
   15614:	aa 27       	eor	r26, r26
   15616:	28 30       	cpi	r18, 0x08	; 8
   15618:	51 f1       	breq	.+84     	; 0x1566e <__ultoa_invert+0x5c>
   1561a:	20 31       	cpi	r18, 0x10	; 16
   1561c:	81 f1       	breq	.+96     	; 0x1567e <__ultoa_invert+0x6c>
   1561e:	e8 94       	clt
   15620:	6f 93       	push	r22
   15622:	6e 7f       	andi	r22, 0xFE	; 254
   15624:	6e 5f       	subi	r22, 0xFE	; 254
   15626:	7f 4f       	sbci	r23, 0xFF	; 255
   15628:	8f 4f       	sbci	r24, 0xFF	; 255
   1562a:	9f 4f       	sbci	r25, 0xFF	; 255
   1562c:	af 4f       	sbci	r26, 0xFF	; 255
   1562e:	b1 e0       	ldi	r27, 0x01	; 1
   15630:	3e d0       	rcall	.+124    	; 0x156ae <__ultoa_invert+0x9c>
   15632:	b4 e0       	ldi	r27, 0x04	; 4
   15634:	3c d0       	rcall	.+120    	; 0x156ae <__ultoa_invert+0x9c>
   15636:	67 0f       	add	r22, r23
   15638:	78 1f       	adc	r23, r24
   1563a:	89 1f       	adc	r24, r25
   1563c:	9a 1f       	adc	r25, r26
   1563e:	a1 1d       	adc	r26, r1
   15640:	68 0f       	add	r22, r24
   15642:	79 1f       	adc	r23, r25
   15644:	8a 1f       	adc	r24, r26
   15646:	91 1d       	adc	r25, r1
   15648:	a1 1d       	adc	r26, r1
   1564a:	6a 0f       	add	r22, r26
   1564c:	71 1d       	adc	r23, r1
   1564e:	81 1d       	adc	r24, r1
   15650:	91 1d       	adc	r25, r1
   15652:	a1 1d       	adc	r26, r1
   15654:	20 d0       	rcall	.+64     	; 0x15696 <__ultoa_invert+0x84>
   15656:	09 f4       	brne	.+2      	; 0x1565a <__ultoa_invert+0x48>
   15658:	68 94       	set
   1565a:	3f 91       	pop	r19
   1565c:	2a e0       	ldi	r18, 0x0A	; 10
   1565e:	26 9f       	mul	r18, r22
   15660:	11 24       	eor	r1, r1
   15662:	30 19       	sub	r19, r0
   15664:	30 5d       	subi	r19, 0xD0	; 208
   15666:	31 93       	st	Z+, r19
   15668:	de f6       	brtc	.-74     	; 0x15620 <__ultoa_invert+0xe>
   1566a:	cf 01       	movw	r24, r30
   1566c:	08 95       	ret
   1566e:	46 2f       	mov	r20, r22
   15670:	47 70       	andi	r20, 0x07	; 7
   15672:	40 5d       	subi	r20, 0xD0	; 208
   15674:	41 93       	st	Z+, r20
   15676:	b3 e0       	ldi	r27, 0x03	; 3
   15678:	0f d0       	rcall	.+30     	; 0x15698 <__ultoa_invert+0x86>
   1567a:	c9 f7       	brne	.-14     	; 0x1566e <__ultoa_invert+0x5c>
   1567c:	f6 cf       	rjmp	.-20     	; 0x1566a <__ultoa_invert+0x58>
   1567e:	46 2f       	mov	r20, r22
   15680:	4f 70       	andi	r20, 0x0F	; 15
   15682:	40 5d       	subi	r20, 0xD0	; 208
   15684:	4a 33       	cpi	r20, 0x3A	; 58
   15686:	18 f0       	brcs	.+6      	; 0x1568e <__ultoa_invert+0x7c>
   15688:	49 5d       	subi	r20, 0xD9	; 217
   1568a:	31 fd       	sbrc	r19, 1
   1568c:	40 52       	subi	r20, 0x20	; 32
   1568e:	41 93       	st	Z+, r20
   15690:	02 d0       	rcall	.+4      	; 0x15696 <__ultoa_invert+0x84>
   15692:	a9 f7       	brne	.-22     	; 0x1567e <__ultoa_invert+0x6c>
   15694:	ea cf       	rjmp	.-44     	; 0x1566a <__ultoa_invert+0x58>
   15696:	b4 e0       	ldi	r27, 0x04	; 4
   15698:	a6 95       	lsr	r26
   1569a:	97 95       	ror	r25
   1569c:	87 95       	ror	r24
   1569e:	77 95       	ror	r23
   156a0:	67 95       	ror	r22
   156a2:	ba 95       	dec	r27
   156a4:	c9 f7       	brne	.-14     	; 0x15698 <__ultoa_invert+0x86>
   156a6:	00 97       	sbiw	r24, 0x00	; 0
   156a8:	61 05       	cpc	r22, r1
   156aa:	71 05       	cpc	r23, r1
   156ac:	08 95       	ret
   156ae:	9b 01       	movw	r18, r22
   156b0:	ac 01       	movw	r20, r24
   156b2:	0a 2e       	mov	r0, r26
   156b4:	06 94       	lsr	r0
   156b6:	57 95       	ror	r21
   156b8:	47 95       	ror	r20
   156ba:	37 95       	ror	r19
   156bc:	27 95       	ror	r18
   156be:	ba 95       	dec	r27
   156c0:	c9 f7       	brne	.-14     	; 0x156b4 <__ultoa_invert+0xa2>
   156c2:	62 0f       	add	r22, r18
   156c4:	73 1f       	adc	r23, r19
   156c6:	84 1f       	adc	r24, r20
   156c8:	95 1f       	adc	r25, r21
   156ca:	a0 1d       	adc	r26, r0
   156cc:	08 95       	ret

000156ce <__cmpsf2>:
__cmpsf2():
   156ce:	0e 94 a9 ab 	call	0x15752	; 0x15752 <__fp_cmp>
   156d2:	08 f4       	brcc	.+2      	; 0x156d6 <__cmpsf2+0x8>
   156d4:	81 e0       	ldi	r24, 0x01	; 1
   156d6:	08 95       	ret

000156d8 <__floatunsisf>:
__floatunsisf():
   156d8:	e8 94       	clt
   156da:	09 c0       	rjmp	.+18     	; 0x156ee <__floatsisf+0x12>

000156dc <__floatsisf>:
   156dc:	97 fb       	bst	r25, 7
   156de:	3e f4       	brtc	.+14     	; 0x156ee <__floatsisf+0x12>
   156e0:	90 95       	com	r25
   156e2:	80 95       	com	r24
   156e4:	70 95       	com	r23
   156e6:	61 95       	neg	r22
   156e8:	7f 4f       	sbci	r23, 0xFF	; 255
   156ea:	8f 4f       	sbci	r24, 0xFF	; 255
   156ec:	9f 4f       	sbci	r25, 0xFF	; 255
   156ee:	99 23       	and	r25, r25
   156f0:	a9 f0       	breq	.+42     	; 0x1571c <__floatsisf+0x40>
   156f2:	f9 2f       	mov	r31, r25
   156f4:	96 e9       	ldi	r25, 0x96	; 150
   156f6:	bb 27       	eor	r27, r27
   156f8:	93 95       	inc	r25
   156fa:	f6 95       	lsr	r31
   156fc:	87 95       	ror	r24
   156fe:	77 95       	ror	r23
   15700:	67 95       	ror	r22
   15702:	b7 95       	ror	r27
   15704:	f1 11       	cpse	r31, r1
   15706:	f8 cf       	rjmp	.-16     	; 0x156f8 <__floatsisf+0x1c>
   15708:	fa f4       	brpl	.+62     	; 0x15748 <__floatsisf+0x6c>
   1570a:	bb 0f       	add	r27, r27
   1570c:	11 f4       	brne	.+4      	; 0x15712 <__floatsisf+0x36>
   1570e:	60 ff       	sbrs	r22, 0
   15710:	1b c0       	rjmp	.+54     	; 0x15748 <__floatsisf+0x6c>
   15712:	6f 5f       	subi	r22, 0xFF	; 255
   15714:	7f 4f       	sbci	r23, 0xFF	; 255
   15716:	8f 4f       	sbci	r24, 0xFF	; 255
   15718:	9f 4f       	sbci	r25, 0xFF	; 255
   1571a:	16 c0       	rjmp	.+44     	; 0x15748 <__floatsisf+0x6c>
   1571c:	88 23       	and	r24, r24
   1571e:	11 f0       	breq	.+4      	; 0x15724 <__floatsisf+0x48>
   15720:	96 e9       	ldi	r25, 0x96	; 150
   15722:	11 c0       	rjmp	.+34     	; 0x15746 <__floatsisf+0x6a>
   15724:	77 23       	and	r23, r23
   15726:	21 f0       	breq	.+8      	; 0x15730 <__floatsisf+0x54>
   15728:	9e e8       	ldi	r25, 0x8E	; 142
   1572a:	87 2f       	mov	r24, r23
   1572c:	76 2f       	mov	r23, r22
   1572e:	05 c0       	rjmp	.+10     	; 0x1573a <__floatsisf+0x5e>
   15730:	66 23       	and	r22, r22
   15732:	71 f0       	breq	.+28     	; 0x15750 <__floatsisf+0x74>
   15734:	96 e8       	ldi	r25, 0x86	; 134
   15736:	86 2f       	mov	r24, r22
   15738:	70 e0       	ldi	r23, 0x00	; 0
   1573a:	60 e0       	ldi	r22, 0x00	; 0
   1573c:	2a f0       	brmi	.+10     	; 0x15748 <__floatsisf+0x6c>
   1573e:	9a 95       	dec	r25
   15740:	66 0f       	add	r22, r22
   15742:	77 1f       	adc	r23, r23
   15744:	88 1f       	adc	r24, r24
   15746:	da f7       	brpl	.-10     	; 0x1573e <__floatsisf+0x62>
   15748:	88 0f       	add	r24, r24
   1574a:	96 95       	lsr	r25
   1574c:	87 95       	ror	r24
   1574e:	97 f9       	bld	r25, 7
   15750:	08 95       	ret

00015752 <__fp_cmp>:
__fp_cmp():
   15752:	99 0f       	add	r25, r25
   15754:	00 08       	sbc	r0, r0
   15756:	55 0f       	add	r21, r21
   15758:	aa 0b       	sbc	r26, r26
   1575a:	e0 e8       	ldi	r30, 0x80	; 128
   1575c:	fe ef       	ldi	r31, 0xFE	; 254
   1575e:	16 16       	cp	r1, r22
   15760:	17 06       	cpc	r1, r23
   15762:	e8 07       	cpc	r30, r24
   15764:	f9 07       	cpc	r31, r25
   15766:	c0 f0       	brcs	.+48     	; 0x15798 <__fp_cmp+0x46>
   15768:	12 16       	cp	r1, r18
   1576a:	13 06       	cpc	r1, r19
   1576c:	e4 07       	cpc	r30, r20
   1576e:	f5 07       	cpc	r31, r21
   15770:	98 f0       	brcs	.+38     	; 0x15798 <__fp_cmp+0x46>
   15772:	62 1b       	sub	r22, r18
   15774:	73 0b       	sbc	r23, r19
   15776:	84 0b       	sbc	r24, r20
   15778:	95 0b       	sbc	r25, r21
   1577a:	39 f4       	brne	.+14     	; 0x1578a <__fp_cmp+0x38>
   1577c:	0a 26       	eor	r0, r26
   1577e:	61 f0       	breq	.+24     	; 0x15798 <__fp_cmp+0x46>
   15780:	23 2b       	or	r18, r19
   15782:	24 2b       	or	r18, r20
   15784:	25 2b       	or	r18, r21
   15786:	21 f4       	brne	.+8      	; 0x15790 <__fp_cmp+0x3e>
   15788:	08 95       	ret
   1578a:	0a 26       	eor	r0, r26
   1578c:	09 f4       	brne	.+2      	; 0x15790 <__fp_cmp+0x3e>
   1578e:	a1 40       	sbci	r26, 0x01	; 1
   15790:	a6 95       	lsr	r26
   15792:	8f ef       	ldi	r24, 0xFF	; 255
   15794:	81 1d       	adc	r24, r1
   15796:	81 1d       	adc	r24, r1
   15798:	08 95       	ret

0001579a <__mulsf3>:
__mulsf3():
   1579a:	0e 94 e0 ab 	call	0x157c0	; 0x157c0 <__mulsf3x>
   1579e:	0c 94 51 ac 	jmp	0x158a2	; 0x158a2 <__fp_round>
   157a2:	0e 94 43 ac 	call	0x15886	; 0x15886 <__fp_pscA>
   157a6:	38 f0       	brcs	.+14     	; 0x157b6 <__mulsf3+0x1c>
   157a8:	0e 94 4a ac 	call	0x15894	; 0x15894 <__fp_pscB>
   157ac:	20 f0       	brcs	.+8      	; 0x157b6 <__mulsf3+0x1c>
   157ae:	95 23       	and	r25, r21
   157b0:	11 f0       	breq	.+4      	; 0x157b6 <__mulsf3+0x1c>
   157b2:	0c 94 3a ac 	jmp	0x15874	; 0x15874 <__fp_inf>
   157b6:	0c 94 40 ac 	jmp	0x15880	; 0x15880 <__fp_nan>
   157ba:	11 24       	eor	r1, r1
   157bc:	0c 94 85 ac 	jmp	0x1590a	; 0x1590a <__fp_szero>

000157c0 <__mulsf3x>:
__mulsf3x():
   157c0:	0e 94 62 ac 	call	0x158c4	; 0x158c4 <__fp_split3>
   157c4:	70 f3       	brcs	.-36     	; 0x157a2 <__mulsf3+0x8>

000157c6 <__mulsf3_pse>:
   157c6:	95 9f       	mul	r25, r21
   157c8:	c1 f3       	breq	.-16     	; 0x157ba <__mulsf3+0x20>
   157ca:	95 0f       	add	r25, r21
   157cc:	50 e0       	ldi	r21, 0x00	; 0
   157ce:	55 1f       	adc	r21, r21
   157d0:	62 9f       	mul	r22, r18
   157d2:	f0 01       	movw	r30, r0
   157d4:	72 9f       	mul	r23, r18
   157d6:	bb 27       	eor	r27, r27
   157d8:	f0 0d       	add	r31, r0
   157da:	b1 1d       	adc	r27, r1
   157dc:	63 9f       	mul	r22, r19
   157de:	aa 27       	eor	r26, r26
   157e0:	f0 0d       	add	r31, r0
   157e2:	b1 1d       	adc	r27, r1
   157e4:	aa 1f       	adc	r26, r26
   157e6:	64 9f       	mul	r22, r20
   157e8:	66 27       	eor	r22, r22
   157ea:	b0 0d       	add	r27, r0
   157ec:	a1 1d       	adc	r26, r1
   157ee:	66 1f       	adc	r22, r22
   157f0:	82 9f       	mul	r24, r18
   157f2:	22 27       	eor	r18, r18
   157f4:	b0 0d       	add	r27, r0
   157f6:	a1 1d       	adc	r26, r1
   157f8:	62 1f       	adc	r22, r18
   157fa:	73 9f       	mul	r23, r19
   157fc:	b0 0d       	add	r27, r0
   157fe:	a1 1d       	adc	r26, r1
   15800:	62 1f       	adc	r22, r18
   15802:	83 9f       	mul	r24, r19
   15804:	a0 0d       	add	r26, r0
   15806:	61 1d       	adc	r22, r1
   15808:	22 1f       	adc	r18, r18
   1580a:	74 9f       	mul	r23, r20
   1580c:	33 27       	eor	r19, r19
   1580e:	a0 0d       	add	r26, r0
   15810:	61 1d       	adc	r22, r1
   15812:	23 1f       	adc	r18, r19
   15814:	84 9f       	mul	r24, r20
   15816:	60 0d       	add	r22, r0
   15818:	21 1d       	adc	r18, r1
   1581a:	82 2f       	mov	r24, r18
   1581c:	76 2f       	mov	r23, r22
   1581e:	6a 2f       	mov	r22, r26
   15820:	11 24       	eor	r1, r1
   15822:	9f 57       	subi	r25, 0x7F	; 127
   15824:	50 40       	sbci	r21, 0x00	; 0
   15826:	9a f0       	brmi	.+38     	; 0x1584e <__mulsf3_pse+0x88>
   15828:	f1 f0       	breq	.+60     	; 0x15866 <__mulsf3_pse+0xa0>
   1582a:	88 23       	and	r24, r24
   1582c:	4a f0       	brmi	.+18     	; 0x15840 <__mulsf3_pse+0x7a>
   1582e:	ee 0f       	add	r30, r30
   15830:	ff 1f       	adc	r31, r31
   15832:	bb 1f       	adc	r27, r27
   15834:	66 1f       	adc	r22, r22
   15836:	77 1f       	adc	r23, r23
   15838:	88 1f       	adc	r24, r24
   1583a:	91 50       	subi	r25, 0x01	; 1
   1583c:	50 40       	sbci	r21, 0x00	; 0
   1583e:	a9 f7       	brne	.-22     	; 0x1582a <__mulsf3_pse+0x64>
   15840:	9e 3f       	cpi	r25, 0xFE	; 254
   15842:	51 05       	cpc	r21, r1
   15844:	80 f0       	brcs	.+32     	; 0x15866 <__mulsf3_pse+0xa0>
   15846:	0c 94 3a ac 	jmp	0x15874	; 0x15874 <__fp_inf>
   1584a:	0c 94 85 ac 	jmp	0x1590a	; 0x1590a <__fp_szero>
   1584e:	5f 3f       	cpi	r21, 0xFF	; 255
   15850:	e4 f3       	brlt	.-8      	; 0x1584a <__mulsf3_pse+0x84>
   15852:	98 3e       	cpi	r25, 0xE8	; 232
   15854:	d4 f3       	brlt	.-12     	; 0x1584a <__mulsf3_pse+0x84>
   15856:	86 95       	lsr	r24
   15858:	77 95       	ror	r23
   1585a:	67 95       	ror	r22
   1585c:	b7 95       	ror	r27
   1585e:	f7 95       	ror	r31
   15860:	e7 95       	ror	r30
   15862:	9f 5f       	subi	r25, 0xFF	; 255
   15864:	c1 f7       	brne	.-16     	; 0x15856 <__mulsf3_pse+0x90>
   15866:	fe 2b       	or	r31, r30
   15868:	88 0f       	add	r24, r24
   1586a:	91 1d       	adc	r25, r1
   1586c:	96 95       	lsr	r25
   1586e:	87 95       	ror	r24
   15870:	97 f9       	bld	r25, 7
   15872:	08 95       	ret

00015874 <__fp_inf>:
   15874:	97 f9       	bld	r25, 7
   15876:	9f 67       	ori	r25, 0x7F	; 127
   15878:	80 e8       	ldi	r24, 0x80	; 128
   1587a:	70 e0       	ldi	r23, 0x00	; 0
   1587c:	60 e0       	ldi	r22, 0x00	; 0
   1587e:	08 95       	ret

00015880 <__fp_nan>:
   15880:	9f ef       	ldi	r25, 0xFF	; 255
   15882:	80 ec       	ldi	r24, 0xC0	; 192
   15884:	08 95       	ret

00015886 <__fp_pscA>:
   15886:	00 24       	eor	r0, r0
   15888:	0a 94       	dec	r0
   1588a:	16 16       	cp	r1, r22
   1588c:	17 06       	cpc	r1, r23
   1588e:	18 06       	cpc	r1, r24
   15890:	09 06       	cpc	r0, r25
__fp_pscA():
   15892:	08 95       	ret

00015894 <__fp_pscB>:
__fp_pscB():
   15894:	00 24       	eor	r0, r0
   15896:	0a 94       	dec	r0
   15898:	12 16       	cp	r1, r18
   1589a:	13 06       	cpc	r1, r19
   1589c:	14 06       	cpc	r1, r20
   1589e:	05 06       	cpc	r0, r21
   158a0:	08 95       	ret

000158a2 <__fp_round>:
__fp_round():
   158a2:	09 2e       	mov	r0, r25
   158a4:	03 94       	inc	r0
   158a6:	00 0c       	add	r0, r0
   158a8:	11 f4       	brne	.+4      	; 0x158ae <__fp_round+0xc>
   158aa:	88 23       	and	r24, r24
   158ac:	52 f0       	brmi	.+20     	; 0x158c2 <__fp_round+0x20>
   158ae:	bb 0f       	add	r27, r27
   158b0:	40 f4       	brcc	.+16     	; 0x158c2 <__fp_round+0x20>
   158b2:	bf 2b       	or	r27, r31
   158b4:	11 f4       	brne	.+4      	; 0x158ba <__fp_round+0x18>
   158b6:	60 ff       	sbrs	r22, 0
   158b8:	04 c0       	rjmp	.+8      	; 0x158c2 <__fp_round+0x20>
   158ba:	6f 5f       	subi	r22, 0xFF	; 255
   158bc:	7f 4f       	sbci	r23, 0xFF	; 255
   158be:	8f 4f       	sbci	r24, 0xFF	; 255
   158c0:	9f 4f       	sbci	r25, 0xFF	; 255
   158c2:	08 95       	ret

000158c4 <__fp_split3>:
__fp_split3():
   158c4:	57 fd       	sbrc	r21, 7
   158c6:	90 58       	subi	r25, 0x80	; 128
   158c8:	44 0f       	add	r20, r20
   158ca:	55 1f       	adc	r21, r21
   158cc:	59 f0       	breq	.+22     	; 0x158e4 <__fp_splitA+0x10>
   158ce:	5f 3f       	cpi	r21, 0xFF	; 255
   158d0:	71 f0       	breq	.+28     	; 0x158ee <__fp_splitA+0x1a>
   158d2:	47 95       	ror	r20

000158d4 <__fp_splitA>:
   158d4:	88 0f       	add	r24, r24
   158d6:	97 fb       	bst	r25, 7
   158d8:	99 1f       	adc	r25, r25
   158da:	61 f0       	breq	.+24     	; 0x158f4 <__fp_splitA+0x20>
   158dc:	9f 3f       	cpi	r25, 0xFF	; 255
   158de:	79 f0       	breq	.+30     	; 0x158fe <__fp_splitA+0x2a>
   158e0:	87 95       	ror	r24
   158e2:	08 95       	ret
   158e4:	12 16       	cp	r1, r18
   158e6:	13 06       	cpc	r1, r19
   158e8:	14 06       	cpc	r1, r20
   158ea:	55 1f       	adc	r21, r21
   158ec:	f2 cf       	rjmp	.-28     	; 0x158d2 <__fp_split3+0xe>
   158ee:	46 95       	lsr	r20
   158f0:	f1 df       	rcall	.-30     	; 0x158d4 <__fp_splitA>
   158f2:	08 c0       	rjmp	.+16     	; 0x15904 <__fp_splitA+0x30>
   158f4:	16 16       	cp	r1, r22
   158f6:	17 06       	cpc	r1, r23
   158f8:	18 06       	cpc	r1, r24
   158fa:	99 1f       	adc	r25, r25
   158fc:	f1 cf       	rjmp	.-30     	; 0x158e0 <__fp_splitA+0xc>
   158fe:	86 95       	lsr	r24
   15900:	71 05       	cpc	r23, r1
   15902:	61 05       	cpc	r22, r1
   15904:	08 94       	sec
   15906:	08 95       	ret

00015908 <__fp_zero>:
__fp_zero():
   15908:	e8 94       	clt

0001590a <__fp_szero>:
   1590a:	bb 27       	eor	r27, r27
   1590c:	66 27       	eor	r22, r22
   1590e:	77 27       	eor	r23, r23
   15910:	cb 01       	movw	r24, r22
   15912:	97 f9       	bld	r25, 7
   15914:	08 95       	ret

00015916 <eeprom_read_byte>:
eeprom_read_byte():
   15916:	f9 99       	sbic	0x1f, 1	; 31
   15918:	fe cf       	rjmp	.-4      	; 0x15916 <eeprom_read_byte>
   1591a:	92 bd       	out	0x22, r25	; 34
   1591c:	81 bd       	out	0x21, r24	; 33
   1591e:	f8 9a       	sbi	0x1f, 0	; 31
   15920:	99 27       	eor	r25, r25
   15922:	80 b5       	in	r24, 0x20	; 32
   15924:	08 95       	ret

00015926 <eeprom_write_byte>:
eeprom_write_byte():
   15926:	26 2f       	mov	r18, r22

00015928 <eeprom_write_r18>:
   15928:	f9 99       	sbic	0x1f, 1	; 31
   1592a:	fe cf       	rjmp	.-4      	; 0x15928 <eeprom_write_r18>
   1592c:	1f ba       	out	0x1f, r1	; 31
   1592e:	92 bd       	out	0x22, r25	; 34
   15930:	81 bd       	out	0x21, r24	; 33
   15932:	20 bd       	out	0x20, r18	; 32
   15934:	0f b6       	in	r0, 0x3f	; 63
   15936:	f8 94       	cli
   15938:	fa 9a       	sbi	0x1f, 2	; 31
   1593a:	f9 9a       	sbi	0x1f, 1	; 31
   1593c:	0f be       	out	0x3f, r0	; 63
   1593e:	01 96       	adiw	r24, 0x01	; 1
   15940:	08 95       	ret

00015942 <__mulsi3>:
__mulsi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:648
   15942:	db 01       	movw	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:649
   15944:	8f 93       	push	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:650
   15946:	9f 93       	push	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:651
   15948:	0e 94 1a ad 	call	0x15a34	; 0x15a34 <__muluhisi3>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:652
   1594c:	bf 91       	pop	r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:653
   1594e:	af 91       	pop	r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:655
   15950:	a2 9f       	mul	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:656
   15952:	80 0d       	add	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:657
   15954:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:658
   15956:	a3 9f       	mul	r26, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:659
   15958:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:660
   1595a:	b2 9f       	mul	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:661
   1595c:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:662
   1595e:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:663
   15960:	08 95       	ret

00015962 <__udivmodhi4>:
__udivmodhi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
   15962:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
   15964:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
   15966:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
   15968:	07 c0       	rjmp	.+14     	; 0x15978 <__udivmodhi4_ep>

0001596a <__udivmodhi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
   1596a:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
   1596c:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
   1596e:	a6 17       	cp	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
   15970:	b7 07       	cpc	r27, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
   15972:	10 f0       	brcs	.+4      	; 0x15978 <__udivmodhi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
   15974:	a6 1b       	sub	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
   15976:	b7 0b       	sbc	r27, r23

00015978 <__udivmodhi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
   15978:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
   1597a:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
   1597c:	5a 95       	dec	r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
   1597e:	a9 f7       	brne	.-22     	; 0x1596a <__udivmodhi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
   15980:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
   15982:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
   15984:	bc 01       	movw	r22, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
   15986:	cd 01       	movw	r24, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
   15988:	08 95       	ret

0001598a <__divmodhi4>:
__divmodhi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
   1598a:	97 fb       	bst	r25, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
   1598c:	07 2e       	mov	r0, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
   1598e:	16 f4       	brtc	.+4      	; 0x15994 <__divmodhi4+0xa>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
   15990:	00 94       	com	r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
   15992:	07 d0       	rcall	.+14     	; 0x159a2 <__divmodhi4_neg1>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
   15994:	77 fd       	sbrc	r23, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
   15996:	09 d0       	rcall	.+18     	; 0x159aa <__divmodhi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
   15998:	0e 94 b1 ac 	call	0x15962	; 0x15962 <__udivmodhi4>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
   1599c:	07 fc       	sbrc	r0, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
   1599e:	05 d0       	rcall	.+10     	; 0x159aa <__divmodhi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
   159a0:	3e f4       	brtc	.+14     	; 0x159b0 <__divmodhi4_exit>

000159a2 <__divmodhi4_neg1>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
   159a2:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
   159a4:	81 95       	neg	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
   159a6:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
   159a8:	08 95       	ret

000159aa <__divmodhi4_neg2>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
   159aa:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
   159ac:	61 95       	neg	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
   159ae:	7f 4f       	sbci	r23, 0xFF	; 255

000159b0 <__divmodhi4_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
   159b0:	08 95       	ret

000159b2 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
   159b2:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
   159b4:	1a 2e       	mov	r1, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
   159b6:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
   159b8:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
   159ba:	fd 01       	movw	r30, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
   159bc:	0d c0       	rjmp	.+26     	; 0x159d8 <__udivmodsi4_ep>

000159be <__udivmodsi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
   159be:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
   159c0:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
   159c2:	ee 1f       	adc	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
   159c4:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
   159c6:	a2 17       	cp	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
   159c8:	b3 07       	cpc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
   159ca:	e4 07       	cpc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
   159cc:	f5 07       	cpc	r31, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
   159ce:	20 f0       	brcs	.+8      	; 0x159d8 <__udivmodsi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
   159d0:	a2 1b       	sub	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
   159d2:	b3 0b       	sbc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
   159d4:	e4 0b       	sbc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
   159d6:	f5 0b       	sbc	r31, r21

000159d8 <__udivmodsi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
   159d8:	66 1f       	adc	r22, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
   159da:	77 1f       	adc	r23, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
   159dc:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
   159de:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
   159e0:	1a 94       	dec	r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
   159e2:	69 f7       	brne	.-38     	; 0x159be <__udivmodsi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
   159e4:	60 95       	com	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
   159e6:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
   159e8:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
   159ea:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
   159ec:	9b 01       	movw	r18, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
   159ee:	ac 01       	movw	r20, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
   159f0:	bd 01       	movw	r22, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
   159f2:	cf 01       	movw	r24, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
   159f4:	08 95       	ret

000159f6 <__divmodsi4>:
__divmodsi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
   159f6:	05 2e       	mov	r0, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
   159f8:	97 fb       	bst	r25, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
   159fa:	1e f4       	brtc	.+6      	; 0x15a02 <__divmodsi4+0xc>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
   159fc:	00 94       	com	r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
   159fe:	0e 94 12 ad 	call	0x15a24	; 0x15a24 <__negsi2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
   15a02:	57 fd       	sbrc	r21, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
   15a04:	07 d0       	rcall	.+14     	; 0x15a14 <__divmodsi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
   15a06:	0e 94 d9 ac 	call	0x159b2	; 0x159b2 <__udivmodsi4>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
   15a0a:	07 fc       	sbrc	r0, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
   15a0c:	03 d0       	rcall	.+6      	; 0x15a14 <__divmodsi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
   15a0e:	4e f4       	brtc	.+18     	; 0x15a22 <__divmodsi4_exit>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
   15a10:	0c 94 12 ad 	jmp	0x15a24	; 0x15a24 <__negsi2>

00015a14 <__divmodsi4_neg2>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
   15a14:	50 95       	com	r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
   15a16:	40 95       	com	r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
   15a18:	30 95       	com	r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
   15a1a:	21 95       	neg	r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
   15a1c:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
   15a1e:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
   15a20:	5f 4f       	sbci	r21, 0xFF	; 255

00015a22 <__divmodsi4_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
   15a22:	08 95       	ret

00015a24 <__negsi2>:
__negsi2():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
   15a24:	90 95       	com	r25
   15a26:	80 95       	com	r24
   15a28:	70 95       	com	r23
   15a2a:	61 95       	neg	r22
   15a2c:	7f 4f       	sbci	r23, 0xFF	; 255
   15a2e:	8f 4f       	sbci	r24, 0xFF	; 255
   15a30:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
   15a32:	08 95       	ret

00015a34 <__muluhisi3>:
__muluhisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
   15a34:	0e 94 25 ad 	call	0x15a4a	; 0x15a4a <__umulhisi3>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
   15a38:	a5 9f       	mul	r26, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
   15a3a:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
   15a3c:	b4 9f       	mul	r27, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
   15a3e:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
   15a40:	a4 9f       	mul	r26, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
   15a42:	80 0d       	add	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
   15a44:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
   15a46:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
   15a48:	08 95       	ret

00015a4a <__umulhisi3>:
__umulhisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
   15a4a:	a2 9f       	mul	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
   15a4c:	b0 01       	movw	r22, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
   15a4e:	b3 9f       	mul	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
   15a50:	c0 01       	movw	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
   15a52:	a3 9f       	mul	r26, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
   15a54:	70 0d       	add	r23, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
   15a56:	81 1d       	adc	r24, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
   15a58:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
   15a5a:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
   15a5c:	b2 9f       	mul	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
   15a5e:	70 0d       	add	r23, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
   15a60:	81 1d       	adc	r24, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
   15a62:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
   15a64:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
   15a66:	08 95       	ret

00015a68 <__subsf3>:
__subsf3():
   15a68:	50 58       	subi	r21, 0x80	; 128

00015a6a <__addsf3>:
   15a6a:	bb 27       	eor	r27, r27
   15a6c:	aa 27       	eor	r26, r26
   15a6e:	0e 94 4c ad 	call	0x15a98	; 0x15a98 <__addsf3x>
   15a72:	0c 94 51 ac 	jmp	0x158a2	; 0x158a2 <__fp_round>
__addsf3():
   15a76:	0e 94 43 ac 	call	0x15886	; 0x15886 <__fp_pscA>
   15a7a:	38 f0       	brcs	.+14     	; 0x15a8a <__addsf3+0x20>
   15a7c:	0e 94 4a ac 	call	0x15894	; 0x15894 <__fp_pscB>
   15a80:	20 f0       	brcs	.+8      	; 0x15a8a <__addsf3+0x20>
   15a82:	39 f4       	brne	.+14     	; 0x15a92 <__addsf3+0x28>
   15a84:	9f 3f       	cpi	r25, 0xFF	; 255
   15a86:	19 f4       	brne	.+6      	; 0x15a8e <__addsf3+0x24>
   15a88:	26 f4       	brtc	.+8      	; 0x15a92 <__addsf3+0x28>
   15a8a:	0c 94 40 ac 	jmp	0x15880	; 0x15880 <__fp_nan>
   15a8e:	0e f4       	brtc	.+2      	; 0x15a92 <__addsf3+0x28>
   15a90:	e0 95       	com	r30
   15a92:	e7 fb       	bst	r30, 7
   15a94:	0c 94 3a ac 	jmp	0x15874	; 0x15874 <__fp_inf>

00015a98 <__addsf3x>:
__addsf3x():
   15a98:	e9 2f       	mov	r30, r25
   15a9a:	0e 94 62 ac 	call	0x158c4	; 0x158c4 <__fp_split3>
   15a9e:	58 f3       	brcs	.-42     	; 0x15a76 <__addsf3+0xc>
   15aa0:	ba 17       	cp	r27, r26
   15aa2:	62 07       	cpc	r22, r18
   15aa4:	73 07       	cpc	r23, r19
   15aa6:	84 07       	cpc	r24, r20
   15aa8:	95 07       	cpc	r25, r21
   15aaa:	20 f0       	brcs	.+8      	; 0x15ab4 <__addsf3x+0x1c>
   15aac:	79 f4       	brne	.+30     	; 0x15acc <__addsf3x+0x34>
   15aae:	a6 f5       	brtc	.+104    	; 0x15b18 <__addsf3x+0x80>
   15ab0:	0c 94 84 ac 	jmp	0x15908	; 0x15908 <__fp_zero>
   15ab4:	0e f4       	brtc	.+2      	; 0x15ab8 <__addsf3x+0x20>
   15ab6:	e0 95       	com	r30
   15ab8:	0b 2e       	mov	r0, r27
   15aba:	ba 2f       	mov	r27, r26
   15abc:	a0 2d       	mov	r26, r0
   15abe:	0b 01       	movw	r0, r22
   15ac0:	b9 01       	movw	r22, r18
   15ac2:	90 01       	movw	r18, r0
   15ac4:	0c 01       	movw	r0, r24
   15ac6:	ca 01       	movw	r24, r20
   15ac8:	a0 01       	movw	r20, r0
   15aca:	11 24       	eor	r1, r1
   15acc:	ff 27       	eor	r31, r31
   15ace:	59 1b       	sub	r21, r25
   15ad0:	99 f0       	breq	.+38     	; 0x15af8 <__addsf3x+0x60>
   15ad2:	59 3f       	cpi	r21, 0xF9	; 249
   15ad4:	50 f4       	brcc	.+20     	; 0x15aea <__addsf3x+0x52>
   15ad6:	50 3e       	cpi	r21, 0xE0	; 224
   15ad8:	68 f1       	brcs	.+90     	; 0x15b34 <__addsf3x+0x9c>
   15ada:	1a 16       	cp	r1, r26
   15adc:	f0 40       	sbci	r31, 0x00	; 0
   15ade:	a2 2f       	mov	r26, r18
   15ae0:	23 2f       	mov	r18, r19
   15ae2:	34 2f       	mov	r19, r20
   15ae4:	44 27       	eor	r20, r20
   15ae6:	58 5f       	subi	r21, 0xF8	; 248
   15ae8:	f3 cf       	rjmp	.-26     	; 0x15ad0 <__addsf3x+0x38>
   15aea:	46 95       	lsr	r20
   15aec:	37 95       	ror	r19
   15aee:	27 95       	ror	r18
   15af0:	a7 95       	ror	r26
   15af2:	f0 40       	sbci	r31, 0x00	; 0
   15af4:	53 95       	inc	r21
   15af6:	c9 f7       	brne	.-14     	; 0x15aea <__addsf3x+0x52>
   15af8:	7e f4       	brtc	.+30     	; 0x15b18 <__addsf3x+0x80>
   15afa:	1f 16       	cp	r1, r31
   15afc:	ba 0b       	sbc	r27, r26
   15afe:	62 0b       	sbc	r22, r18
   15b00:	73 0b       	sbc	r23, r19
   15b02:	84 0b       	sbc	r24, r20
   15b04:	ba f0       	brmi	.+46     	; 0x15b34 <__addsf3x+0x9c>
   15b06:	91 50       	subi	r25, 0x01	; 1
   15b08:	a1 f0       	breq	.+40     	; 0x15b32 <__addsf3x+0x9a>
   15b0a:	ff 0f       	add	r31, r31
   15b0c:	bb 1f       	adc	r27, r27
   15b0e:	66 1f       	adc	r22, r22
   15b10:	77 1f       	adc	r23, r23
   15b12:	88 1f       	adc	r24, r24
   15b14:	c2 f7       	brpl	.-16     	; 0x15b06 <__addsf3x+0x6e>
   15b16:	0e c0       	rjmp	.+28     	; 0x15b34 <__addsf3x+0x9c>
   15b18:	ba 0f       	add	r27, r26
   15b1a:	62 1f       	adc	r22, r18
   15b1c:	73 1f       	adc	r23, r19
   15b1e:	84 1f       	adc	r24, r20
   15b20:	48 f4       	brcc	.+18     	; 0x15b34 <__addsf3x+0x9c>
   15b22:	87 95       	ror	r24
   15b24:	77 95       	ror	r23
   15b26:	67 95       	ror	r22
   15b28:	b7 95       	ror	r27
   15b2a:	f7 95       	ror	r31
   15b2c:	9e 3f       	cpi	r25, 0xFE	; 254
   15b2e:	08 f0       	brcs	.+2      	; 0x15b32 <__addsf3x+0x9a>
   15b30:	b0 cf       	rjmp	.-160    	; 0x15a92 <__addsf3+0x28>
   15b32:	93 95       	inc	r25
   15b34:	88 0f       	add	r24, r24
   15b36:	08 f0       	brcs	.+2      	; 0x15b3a <__addsf3x+0xa2>
   15b38:	99 27       	eor	r25, r25
   15b3a:	ee 0f       	add	r30, r30
   15b3c:	97 95       	ror	r25
   15b3e:	87 95       	ror	r24
   15b40:	08 95       	ret

00015b42 <__divsf3>:
   15b42:	0e 94 b5 ad 	call	0x15b6a	; 0x15b6a <__divsf3x>
   15b46:	0c 94 51 ac 	jmp	0x158a2	; 0x158a2 <__fp_round>
   15b4a:	0e 94 4a ac 	call	0x15894	; 0x15894 <__fp_pscB>
   15b4e:	58 f0       	brcs	.+22     	; 0x15b66 <__divsf3+0x24>
   15b50:	0e 94 43 ac 	call	0x15886	; 0x15886 <__fp_pscA>
   15b54:	40 f0       	brcs	.+16     	; 0x15b66 <__divsf3+0x24>
   15b56:	29 f4       	brne	.+10     	; 0x15b62 <__divsf3+0x20>
   15b58:	5f 3f       	cpi	r21, 0xFF	; 255
   15b5a:	29 f0       	breq	.+10     	; 0x15b66 <__divsf3+0x24>
   15b5c:	0c 94 3a ac 	jmp	0x15874	; 0x15874 <__fp_inf>
   15b60:	51 11       	cpse	r21, r1
   15b62:	0c 94 85 ac 	jmp	0x1590a	; 0x1590a <__fp_szero>
__divsf3():
   15b66:	0c 94 40 ac 	jmp	0x15880	; 0x15880 <__fp_nan>

00015b6a <__divsf3x>:
__divsf3x():
   15b6a:	0e 94 62 ac 	call	0x158c4	; 0x158c4 <__fp_split3>
   15b6e:	68 f3       	brcs	.-38     	; 0x15b4a <__divsf3+0x8>

00015b70 <__divsf3_pse>:
   15b70:	99 23       	and	r25, r25
   15b72:	b1 f3       	breq	.-20     	; 0x15b60 <__divsf3+0x1e>
   15b74:	55 23       	and	r21, r21
   15b76:	91 f3       	breq	.-28     	; 0x15b5c <__divsf3+0x1a>
   15b78:	95 1b       	sub	r25, r21
   15b7a:	55 0b       	sbc	r21, r21
   15b7c:	bb 27       	eor	r27, r27
   15b7e:	aa 27       	eor	r26, r26
   15b80:	62 17       	cp	r22, r18
   15b82:	73 07       	cpc	r23, r19
   15b84:	84 07       	cpc	r24, r20
   15b86:	38 f0       	brcs	.+14     	; 0x15b96 <__divsf3_pse+0x26>
   15b88:	9f 5f       	subi	r25, 0xFF	; 255
   15b8a:	5f 4f       	sbci	r21, 0xFF	; 255
   15b8c:	22 0f       	add	r18, r18
   15b8e:	33 1f       	adc	r19, r19
   15b90:	44 1f       	adc	r20, r20
   15b92:	aa 1f       	adc	r26, r26
   15b94:	a9 f3       	breq	.-22     	; 0x15b80 <__divsf3_pse+0x10>
   15b96:	35 d0       	rcall	.+106    	; 0x15c02 <__divsf3_pse+0x92>
   15b98:	0e 2e       	mov	r0, r30
   15b9a:	3a f0       	brmi	.+14     	; 0x15baa <__divsf3_pse+0x3a>
   15b9c:	e0 e8       	ldi	r30, 0x80	; 128
   15b9e:	32 d0       	rcall	.+100    	; 0x15c04 <__divsf3_pse+0x94>
   15ba0:	91 50       	subi	r25, 0x01	; 1
   15ba2:	50 40       	sbci	r21, 0x00	; 0
   15ba4:	e6 95       	lsr	r30
   15ba6:	00 1c       	adc	r0, r0
   15ba8:	ca f7       	brpl	.-14     	; 0x15b9c <__divsf3_pse+0x2c>
   15baa:	2b d0       	rcall	.+86     	; 0x15c02 <__divsf3_pse+0x92>
   15bac:	fe 2f       	mov	r31, r30
   15bae:	29 d0       	rcall	.+82     	; 0x15c02 <__divsf3_pse+0x92>
   15bb0:	66 0f       	add	r22, r22
   15bb2:	77 1f       	adc	r23, r23
   15bb4:	88 1f       	adc	r24, r24
   15bb6:	bb 1f       	adc	r27, r27
   15bb8:	26 17       	cp	r18, r22
   15bba:	37 07       	cpc	r19, r23
   15bbc:	48 07       	cpc	r20, r24
   15bbe:	ab 07       	cpc	r26, r27
   15bc0:	b0 e8       	ldi	r27, 0x80	; 128
   15bc2:	09 f0       	breq	.+2      	; 0x15bc6 <__divsf3_pse+0x56>
   15bc4:	bb 0b       	sbc	r27, r27
   15bc6:	80 2d       	mov	r24, r0
   15bc8:	bf 01       	movw	r22, r30
   15bca:	ff 27       	eor	r31, r31
   15bcc:	93 58       	subi	r25, 0x83	; 131
   15bce:	5f 4f       	sbci	r21, 0xFF	; 255
   15bd0:	3a f0       	brmi	.+14     	; 0x15be0 <__divsf3_pse+0x70>
   15bd2:	9e 3f       	cpi	r25, 0xFE	; 254
   15bd4:	51 05       	cpc	r21, r1
   15bd6:	78 f0       	brcs	.+30     	; 0x15bf6 <__divsf3_pse+0x86>
   15bd8:	0c 94 3a ac 	jmp	0x15874	; 0x15874 <__fp_inf>
   15bdc:	0c 94 85 ac 	jmp	0x1590a	; 0x1590a <__fp_szero>
   15be0:	5f 3f       	cpi	r21, 0xFF	; 255
   15be2:	e4 f3       	brlt	.-8      	; 0x15bdc <__divsf3_pse+0x6c>
   15be4:	98 3e       	cpi	r25, 0xE8	; 232
   15be6:	d4 f3       	brlt	.-12     	; 0x15bdc <__divsf3_pse+0x6c>
   15be8:	86 95       	lsr	r24
   15bea:	77 95       	ror	r23
   15bec:	67 95       	ror	r22
   15bee:	b7 95       	ror	r27
   15bf0:	f7 95       	ror	r31
   15bf2:	9f 5f       	subi	r25, 0xFF	; 255
   15bf4:	c9 f7       	brne	.-14     	; 0x15be8 <__divsf3_pse+0x78>
   15bf6:	88 0f       	add	r24, r24
   15bf8:	91 1d       	adc	r25, r1
   15bfa:	96 95       	lsr	r25
   15bfc:	87 95       	ror	r24
   15bfe:	97 f9       	bld	r25, 7
   15c00:	08 95       	ret
   15c02:	e1 e0       	ldi	r30, 0x01	; 1
   15c04:	66 0f       	add	r22, r22
   15c06:	77 1f       	adc	r23, r23
   15c08:	88 1f       	adc	r24, r24
   15c0a:	bb 1f       	adc	r27, r27
   15c0c:	62 17       	cp	r22, r18
   15c0e:	73 07       	cpc	r23, r19
   15c10:	84 07       	cpc	r24, r20
   15c12:	ba 07       	cpc	r27, r26
   15c14:	20 f0       	brcs	.+8      	; 0x15c1e <__divsf3_pse+0xae>
   15c16:	62 1b       	sub	r22, r18
   15c18:	73 0b       	sbc	r23, r19
   15c1a:	84 0b       	sbc	r24, r20
   15c1c:	ba 0b       	sbc	r27, r26
   15c1e:	ee 1f       	adc	r30, r30
   15c20:	88 f7       	brcc	.-30     	; 0x15c04 <__divsf3_pse+0x94>
   15c22:	e0 95       	com	r30
   15c24:	08 95       	ret

00015c26 <__fixsfsi>:
   15c26:	0e 94 1a ae 	call	0x15c34	; 0x15c34 <__fixunssfsi>
   15c2a:	68 94       	set
   15c2c:	b1 11       	cpse	r27, r1
   15c2e:	0c 94 85 ac 	jmp	0x1590a	; 0x1590a <__fp_szero>
   15c32:	08 95       	ret

00015c34 <__fixunssfsi>:
   15c34:	0e 94 6a ac 	call	0x158d4	; 0x158d4 <__fp_splitA>
   15c38:	88 f0       	brcs	.+34     	; 0x15c5c <__fixunssfsi+0x28>
   15c3a:	9f 57       	subi	r25, 0x7F	; 127
   15c3c:	98 f0       	brcs	.+38     	; 0x15c64 <__fixunssfsi+0x30>
   15c3e:	b9 2f       	mov	r27, r25
   15c40:	99 27       	eor	r25, r25
   15c42:	b7 51       	subi	r27, 0x17	; 23
   15c44:	b0 f0       	brcs	.+44     	; 0x15c72 <__fixunssfsi+0x3e>
__fixunssfsi():
   15c46:	e1 f0       	breq	.+56     	; 0x15c80 <__fixunssfsi+0x4c>
   15c48:	66 0f       	add	r22, r22
   15c4a:	77 1f       	adc	r23, r23
   15c4c:	88 1f       	adc	r24, r24
   15c4e:	99 1f       	adc	r25, r25
   15c50:	1a f0       	brmi	.+6      	; 0x15c58 <__fixunssfsi+0x24>
   15c52:	ba 95       	dec	r27
   15c54:	c9 f7       	brne	.-14     	; 0x15c48 <__fixunssfsi+0x14>
   15c56:	14 c0       	rjmp	.+40     	; 0x15c80 <__fixunssfsi+0x4c>
   15c58:	b1 30       	cpi	r27, 0x01	; 1
   15c5a:	91 f0       	breq	.+36     	; 0x15c80 <__fixunssfsi+0x4c>
   15c5c:	0e 94 84 ac 	call	0x15908	; 0x15908 <__fp_zero>
   15c60:	b1 e0       	ldi	r27, 0x01	; 1
   15c62:	08 95       	ret
   15c64:	0c 94 84 ac 	jmp	0x15908	; 0x15908 <__fp_zero>
   15c68:	67 2f       	mov	r22, r23
   15c6a:	78 2f       	mov	r23, r24
   15c6c:	88 27       	eor	r24, r24
   15c6e:	b8 5f       	subi	r27, 0xF8	; 248
   15c70:	39 f0       	breq	.+14     	; 0x15c80 <__fixunssfsi+0x4c>
   15c72:	b9 3f       	cpi	r27, 0xF9	; 249
   15c74:	cc f3       	brlt	.-14     	; 0x15c68 <__fixunssfsi+0x34>
   15c76:	86 95       	lsr	r24
   15c78:	77 95       	ror	r23
   15c7a:	67 95       	ror	r22
   15c7c:	b3 95       	inc	r27
   15c7e:	d9 f7       	brne	.-10     	; 0x15c76 <__fixunssfsi+0x42>
   15c80:	3e f4       	brtc	.+14     	; 0x15c90 <__fixunssfsi+0x5c>
   15c82:	90 95       	com	r25
   15c84:	80 95       	com	r24
   15c86:	70 95       	com	r23
   15c88:	61 95       	neg	r22
   15c8a:	7f 4f       	sbci	r23, 0xFF	; 255
   15c8c:	8f 4f       	sbci	r24, 0xFF	; 255
   15c8e:	9f 4f       	sbci	r25, 0xFF	; 255
   15c90:	08 95       	ret

00015c92 <__gesf2>:
__gesf2():
   15c92:	0e 94 a9 ab 	call	0x15752	; 0x15752 <__fp_cmp>
   15c96:	08 f4       	brcc	.+2      	; 0x15c9a <__gesf2+0x8>
   15c98:	8f ef       	ldi	r24, 0xFF	; 255
   15c9a:	08 95       	ret

00015c9c <__udivmodqi4>:
__udivmodqi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1346
   15c9c:	99 1b       	sub	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1347
   15c9e:	79 e0       	ldi	r23, 0x09	; 9
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1348
   15ca0:	04 c0       	rjmp	.+8      	; 0x15caa <__udivmodqi4_ep>

00015ca2 <__udivmodqi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1350
   15ca2:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1351
   15ca4:	96 17       	cp	r25, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1352
   15ca6:	08 f0       	brcs	.+2      	; 0x15caa <__udivmodqi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1353
   15ca8:	96 1b       	sub	r25, r22

00015caa <__udivmodqi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1355
   15caa:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1356
   15cac:	7a 95       	dec	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1357
   15cae:	c9 f7       	brne	.-14     	; 0x15ca2 <__udivmodqi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1358
   15cb0:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1360
   15cb2:	08 95       	ret

00015cb4 <__tablejump2__>:
__tablejump2__():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
   15cb4:	ee 0f       	add	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
   15cb6:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2300
   15cb8:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2301
   15cba:	8b bf       	out	0x3b, r24	; 59
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
   15cbc:	07 90       	elpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
   15cbe:	f6 91       	elpm	r31, Z
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
   15cc0:	e0 2d       	mov	r30, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
   15cc2:	19 94       	eijmp

00015cc4 <realloc>:
realloc():
   15cc4:	4f 92       	push	r4
   15cc6:	5f 92       	push	r5
   15cc8:	6f 92       	push	r6
   15cca:	7f 92       	push	r7
   15ccc:	8f 92       	push	r8
   15cce:	9f 92       	push	r9
   15cd0:	af 92       	push	r10
   15cd2:	bf 92       	push	r11
   15cd4:	cf 92       	push	r12
   15cd6:	df 92       	push	r13
   15cd8:	ef 92       	push	r14
   15cda:	ff 92       	push	r15
   15cdc:	0f 93       	push	r16
   15cde:	1f 93       	push	r17
   15ce0:	cf 93       	push	r28
   15ce2:	df 93       	push	r29
   15ce4:	8c 01       	movw	r16, r24
   15ce6:	00 97       	sbiw	r24, 0x00	; 0
   15ce8:	99 f4       	brne	.+38     	; 0x15d10 <realloc+0x4c>
   15cea:	cb 01       	movw	r24, r22
   15cec:	df 91       	pop	r29
   15cee:	cf 91       	pop	r28
   15cf0:	1f 91       	pop	r17
   15cf2:	0f 91       	pop	r16
   15cf4:	ff 90       	pop	r15
   15cf6:	ef 90       	pop	r14
   15cf8:	df 90       	pop	r13
   15cfa:	cf 90       	pop	r12
   15cfc:	bf 90       	pop	r11
   15cfe:	af 90       	pop	r10
   15d00:	9f 90       	pop	r9
   15d02:	8f 90       	pop	r8
   15d04:	7f 90       	pop	r7
   15d06:	6f 90       	pop	r6
   15d08:	5f 90       	pop	r5
   15d0a:	4f 90       	pop	r4
   15d0c:	0c 94 36 a7 	jmp	0x14e6c	; 0x14e6c <malloc>
   15d10:	fc 01       	movw	r30, r24
   15d12:	e6 0f       	add	r30, r22
   15d14:	f7 1f       	adc	r31, r23
   15d16:	9c 01       	movw	r18, r24
   15d18:	22 50       	subi	r18, 0x02	; 2
   15d1a:	31 09       	sbc	r19, r1
   15d1c:	e2 17       	cp	r30, r18
   15d1e:	f3 07       	cpc	r31, r19
   15d20:	08 f4       	brcc	.+2      	; 0x15d24 <realloc+0x60>
   15d22:	ae c0       	rjmp	.+348    	; 0x15e80 <realloc+0x1bc>
   15d24:	d9 01       	movw	r26, r18
   15d26:	cd 91       	ld	r28, X+
   15d28:	dc 91       	ld	r29, X
   15d2a:	11 97       	sbiw	r26, 0x01	; 1
   15d2c:	c6 17       	cp	r28, r22
   15d2e:	d7 07       	cpc	r29, r23
   15d30:	20 f1       	brcs	.+72     	; 0x15d7a <realloc+0xb6>
   15d32:	c5 30       	cpi	r28, 0x05	; 5
   15d34:	d1 05       	cpc	r29, r1
   15d36:	78 f0       	brcs	.+30     	; 0x15d56 <realloc+0x92>
   15d38:	ce 01       	movw	r24, r28
   15d3a:	04 97       	sbiw	r24, 0x04	; 4
   15d3c:	86 17       	cp	r24, r22
   15d3e:	97 07       	cpc	r25, r23
   15d40:	50 f0       	brcs	.+20     	; 0x15d56 <realloc+0x92>
   15d42:	c6 1b       	sub	r28, r22
   15d44:	d7 0b       	sbc	r29, r23
   15d46:	22 97       	sbiw	r28, 0x02	; 2
   15d48:	c1 93       	st	Z+, r28
   15d4a:	d1 93       	st	Z+, r29
   15d4c:	6d 93       	st	X+, r22
   15d4e:	7c 93       	st	X, r23
   15d50:	cf 01       	movw	r24, r30
   15d52:	0e 94 d2 a7 	call	0x14fa4	; 0x14fa4 <free>
   15d56:	c8 01       	movw	r24, r16
   15d58:	df 91       	pop	r29
   15d5a:	cf 91       	pop	r28
   15d5c:	1f 91       	pop	r17
   15d5e:	0f 91       	pop	r16
   15d60:	ff 90       	pop	r15
   15d62:	ef 90       	pop	r14
   15d64:	df 90       	pop	r13
   15d66:	cf 90       	pop	r12
   15d68:	bf 90       	pop	r11
   15d6a:	af 90       	pop	r10
   15d6c:	9f 90       	pop	r9
   15d6e:	8f 90       	pop	r8
   15d70:	7f 90       	pop	r7
   15d72:	6f 90       	pop	r6
   15d74:	5f 90       	pop	r5
   15d76:	4f 90       	pop	r4
   15d78:	08 95       	ret
   15d7a:	5b 01       	movw	r10, r22
   15d7c:	ac 1a       	sub	r10, r28
   15d7e:	bd 0a       	sbc	r11, r29
   15d80:	4c 01       	movw	r8, r24
   15d82:	8c 0e       	add	r8, r28
   15d84:	9d 1e       	adc	r9, r29
   15d86:	a0 91 3f 13 	lds	r26, 0x133F	; 0x80133f <__flp>
   15d8a:	b0 91 40 13 	lds	r27, 0x1340	; 0x801340 <__flp+0x1>
   15d8e:	51 2c       	mov	r5, r1
   15d90:	41 2c       	mov	r4, r1
   15d92:	f1 2c       	mov	r15, r1
   15d94:	e1 2c       	mov	r14, r1
   15d96:	10 97       	sbiw	r26, 0x00	; 0
   15d98:	31 f5       	brne	.+76     	; 0x15de6 <realloc+0x122>
   15d9a:	80 91 3d 13 	lds	r24, 0x133D	; 0x80133d <__brkval>
   15d9e:	90 91 3e 13 	lds	r25, 0x133E	; 0x80133e <__brkval+0x1>
   15da2:	88 15       	cp	r24, r8
   15da4:	99 05       	cpc	r25, r9
   15da6:	09 f0       	breq	.+2      	; 0x15daa <realloc+0xe6>
   15da8:	5c c0       	rjmp	.+184    	; 0x15e62 <realloc+0x19e>
   15daa:	46 16       	cp	r4, r22
   15dac:	57 06       	cpc	r5, r23
   15dae:	08 f0       	brcs	.+2      	; 0x15db2 <realloc+0xee>
   15db0:	58 c0       	rjmp	.+176    	; 0x15e62 <realloc+0x19e>
   15db2:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <__malloc_heap_end>
   15db6:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <__malloc_heap_end+0x1>
   15dba:	00 97       	sbiw	r24, 0x00	; 0
   15dbc:	41 f4       	brne	.+16     	; 0x15dce <realloc+0x10a>
   15dbe:	8d b7       	in	r24, 0x3d	; 61
   15dc0:	9e b7       	in	r25, 0x3e	; 62
   15dc2:	40 91 14 02 	lds	r20, 0x0214	; 0x800214 <__malloc_margin>
   15dc6:	50 91 15 02 	lds	r21, 0x0215	; 0x800215 <__malloc_margin+0x1>
   15dca:	84 1b       	sub	r24, r20
   15dcc:	95 0b       	sbc	r25, r21
   15dce:	e8 17       	cp	r30, r24
   15dd0:	f9 07       	cpc	r31, r25
   15dd2:	08 f0       	brcs	.+2      	; 0x15dd6 <realloc+0x112>
   15dd4:	55 c0       	rjmp	.+170    	; 0x15e80 <realloc+0x1bc>
   15dd6:	f0 93 3e 13 	sts	0x133E, r31	; 0x80133e <__brkval+0x1>
   15dda:	e0 93 3d 13 	sts	0x133D, r30	; 0x80133d <__brkval>
   15dde:	f9 01       	movw	r30, r18
   15de0:	71 83       	std	Z+1, r23	; 0x01
   15de2:	60 83       	st	Z, r22
   15de4:	b8 cf       	rjmp	.-144    	; 0x15d56 <realloc+0x92>
   15de6:	8d 91       	ld	r24, X+
   15de8:	9c 91       	ld	r25, X
   15dea:	11 97       	sbiw	r26, 0x01	; 1
   15dec:	12 96       	adiw	r26, 0x02	; 2
   15dee:	6c 90       	ld	r6, X
   15df0:	12 97       	sbiw	r26, 0x02	; 2
   15df2:	13 96       	adiw	r26, 0x03	; 3
   15df4:	7c 90       	ld	r7, X
   15df6:	13 97       	sbiw	r26, 0x03	; 3
   15df8:	a8 15       	cp	r26, r8
   15dfa:	b9 05       	cpc	r27, r9
   15dfc:	59 f5       	brne	.+86     	; 0x15e54 <realloc+0x190>
   15dfe:	6c 01       	movw	r12, r24
   15e00:	42 e0       	ldi	r20, 0x02	; 2
   15e02:	c4 0e       	add	r12, r20
   15e04:	d1 1c       	adc	r13, r1
   15e06:	ca 14       	cp	r12, r10
   15e08:	db 04       	cpc	r13, r11
   15e0a:	20 f1       	brcs	.+72     	; 0x15e54 <realloc+0x190>
   15e0c:	ac 01       	movw	r20, r24
   15e0e:	4a 19       	sub	r20, r10
   15e10:	5b 09       	sbc	r21, r11
   15e12:	da 01       	movw	r26, r20
   15e14:	12 96       	adiw	r26, 0x02	; 2
   15e16:	15 97       	sbiw	r26, 0x05	; 5
   15e18:	80 f0       	brcs	.+32     	; 0x15e3a <realloc+0x176>
   15e1a:	62 82       	std	Z+2, r6	; 0x02
   15e1c:	73 82       	std	Z+3, r7	; 0x03
   15e1e:	51 83       	std	Z+1, r21	; 0x01
   15e20:	40 83       	st	Z, r20
   15e22:	d9 01       	movw	r26, r18
   15e24:	6d 93       	st	X+, r22
   15e26:	7c 93       	st	X, r23
   15e28:	e1 14       	cp	r14, r1
   15e2a:	f1 04       	cpc	r15, r1
   15e2c:	71 f0       	breq	.+28     	; 0x15e4a <realloc+0x186>
   15e2e:	d7 01       	movw	r26, r14
   15e30:	13 96       	adiw	r26, 0x03	; 3
   15e32:	fc 93       	st	X, r31
   15e34:	ee 93       	st	-X, r30
   15e36:	12 97       	sbiw	r26, 0x02	; 2
   15e38:	8e cf       	rjmp	.-228    	; 0x15d56 <realloc+0x92>
   15e3a:	22 96       	adiw	r28, 0x02	; 2
   15e3c:	8c 0f       	add	r24, r28
   15e3e:	9d 1f       	adc	r25, r29
   15e40:	f9 01       	movw	r30, r18
   15e42:	91 83       	std	Z+1, r25	; 0x01
   15e44:	80 83       	st	Z, r24
   15e46:	f3 01       	movw	r30, r6
   15e48:	ef cf       	rjmp	.-34     	; 0x15e28 <realloc+0x164>
   15e4a:	f0 93 40 13 	sts	0x1340, r31	; 0x801340 <__flp+0x1>
   15e4e:	e0 93 3f 13 	sts	0x133F, r30	; 0x80133f <__flp>
   15e52:	81 cf       	rjmp	.-254    	; 0x15d56 <realloc+0x92>
   15e54:	48 16       	cp	r4, r24
   15e56:	59 06       	cpc	r5, r25
   15e58:	08 f4       	brcc	.+2      	; 0x15e5c <realloc+0x198>
   15e5a:	2c 01       	movw	r4, r24
   15e5c:	7d 01       	movw	r14, r26
   15e5e:	d3 01       	movw	r26, r6
   15e60:	9a cf       	rjmp	.-204    	; 0x15d96 <realloc+0xd2>
   15e62:	cb 01       	movw	r24, r22
   15e64:	0e 94 36 a7 	call	0x14e6c	; 0x14e6c <malloc>
   15e68:	7c 01       	movw	r14, r24
   15e6a:	00 97       	sbiw	r24, 0x00	; 0
   15e6c:	49 f0       	breq	.+18     	; 0x15e80 <realloc+0x1bc>
   15e6e:	ae 01       	movw	r20, r28
   15e70:	b8 01       	movw	r22, r16
   15e72:	0e 94 48 af 	call	0x15e90	; 0x15e90 <memcpy>
   15e76:	c8 01       	movw	r24, r16
   15e78:	0e 94 d2 a7 	call	0x14fa4	; 0x14fa4 <free>
   15e7c:	87 01       	movw	r16, r14
   15e7e:	6b cf       	rjmp	.-298    	; 0x15d56 <realloc+0x92>
   15e80:	10 e0       	ldi	r17, 0x00	; 0
   15e82:	00 e0       	ldi	r16, 0x00	; 0
   15e84:	68 cf       	rjmp	.-304    	; 0x15d56 <realloc+0x92>

00015e86 <abort>:
abort():
   15e86:	81 e0       	ldi	r24, 0x01	; 1
   15e88:	90 e0       	ldi	r25, 0x00	; 0
   15e8a:	f8 94       	cli
   15e8c:	0c 94 03 b0 	jmp	0x16006	; 0x16006 <_exit>

00015e90 <memcpy>:
memcpy():
   15e90:	fb 01       	movw	r30, r22
   15e92:	dc 01       	movw	r26, r24
   15e94:	02 c0       	rjmp	.+4      	; 0x15e9a <memcpy+0xa>
   15e96:	01 90       	ld	r0, Z+
   15e98:	0d 92       	st	X+, r0
   15e9a:	41 50       	subi	r20, 0x01	; 1
   15e9c:	50 40       	sbci	r21, 0x00	; 0
   15e9e:	d8 f7       	brcc	.-10     	; 0x15e96 <memcpy+0x6>
   15ea0:	08 95       	ret

00015ea2 <strcat>:
strcat():
   15ea2:	fb 01       	movw	r30, r22
   15ea4:	dc 01       	movw	r26, r24
   15ea6:	0d 90       	ld	r0, X+
   15ea8:	00 20       	and	r0, r0
   15eaa:	e9 f7       	brne	.-6      	; 0x15ea6 <strcat+0x4>
   15eac:	11 97       	sbiw	r26, 0x01	; 1
   15eae:	01 90       	ld	r0, Z+
   15eb0:	0d 92       	st	X+, r0
   15eb2:	00 20       	and	r0, r0
   15eb4:	e1 f7       	brne	.-8      	; 0x15eae <strcat+0xc>
   15eb6:	08 95       	ret

00015eb8 <strchr>:
strchr():
   15eb8:	fc 01       	movw	r30, r24
   15eba:	81 91       	ld	r24, Z+
   15ebc:	86 17       	cp	r24, r22
   15ebe:	21 f0       	breq	.+8      	; 0x15ec8 <strchr+0x10>
   15ec0:	88 23       	and	r24, r24
   15ec2:	d9 f7       	brne	.-10     	; 0x15eba <strchr+0x2>
   15ec4:	99 27       	eor	r25, r25
   15ec6:	08 95       	ret
   15ec8:	31 97       	sbiw	r30, 0x01	; 1
   15eca:	cf 01       	movw	r24, r30
   15ecc:	08 95       	ret

00015ece <strcmp>:
strcmp():
   15ece:	fb 01       	movw	r30, r22
   15ed0:	dc 01       	movw	r26, r24
   15ed2:	8d 91       	ld	r24, X+
   15ed4:	01 90       	ld	r0, Z+
   15ed6:	80 19       	sub	r24, r0
   15ed8:	01 10       	cpse	r0, r1
   15eda:	d9 f3       	breq	.-10     	; 0x15ed2 <strcmp+0x4>
   15edc:	99 0b       	sbc	r25, r25
   15ede:	08 95       	ret

00015ee0 <strcpy>:
strcpy():
   15ee0:	fb 01       	movw	r30, r22
   15ee2:	dc 01       	movw	r26, r24
   15ee4:	01 90       	ld	r0, Z+
   15ee6:	0d 92       	st	X+, r0
   15ee8:	00 20       	and	r0, r0
   15eea:	e1 f7       	brne	.-8      	; 0x15ee4 <strcpy+0x4>
   15eec:	08 95       	ret

00015eee <strncmp>:
strncmp():
   15eee:	fb 01       	movw	r30, r22
   15ef0:	dc 01       	movw	r26, r24
   15ef2:	41 50       	subi	r20, 0x01	; 1
   15ef4:	50 40       	sbci	r21, 0x00	; 0
   15ef6:	30 f0       	brcs	.+12     	; 0x15f04 <strncmp+0x16>
   15ef8:	8d 91       	ld	r24, X+
   15efa:	01 90       	ld	r0, Z+
   15efc:	80 19       	sub	r24, r0
   15efe:	19 f4       	brne	.+6      	; 0x15f06 <strncmp+0x18>
   15f00:	00 20       	and	r0, r0
   15f02:	b9 f7       	brne	.-18     	; 0x15ef2 <strncmp+0x4>
   15f04:	88 1b       	sub	r24, r24
   15f06:	99 0b       	sbc	r25, r25
   15f08:	08 95       	ret

00015f0a <strncpy>:
strncpy():
   15f0a:	fb 01       	movw	r30, r22
   15f0c:	dc 01       	movw	r26, r24
   15f0e:	41 50       	subi	r20, 0x01	; 1
   15f10:	50 40       	sbci	r21, 0x00	; 0
   15f12:	48 f0       	brcs	.+18     	; 0x15f26 <strncpy+0x1c>
   15f14:	01 90       	ld	r0, Z+
   15f16:	0d 92       	st	X+, r0
   15f18:	00 20       	and	r0, r0
   15f1a:	c9 f7       	brne	.-14     	; 0x15f0e <strncpy+0x4>
   15f1c:	01 c0       	rjmp	.+2      	; 0x15f20 <strncpy+0x16>
   15f1e:	1d 92       	st	X+, r1
   15f20:	41 50       	subi	r20, 0x01	; 1
   15f22:	50 40       	sbci	r21, 0x00	; 0
   15f24:	e0 f7       	brcc	.-8      	; 0x15f1e <strncpy+0x14>
   15f26:	08 95       	ret

00015f28 <printf>:
printf():
   15f28:	cf 93       	push	r28
   15f2a:	df 93       	push	r29
   15f2c:	cd b7       	in	r28, 0x3d	; 61
   15f2e:	de b7       	in	r29, 0x3e	; 62
   15f30:	ae 01       	movw	r20, r28
   15f32:	4a 5f       	subi	r20, 0xFA	; 250
   15f34:	5f 4f       	sbci	r21, 0xFF	; 255
   15f36:	fa 01       	movw	r30, r20
   15f38:	61 91       	ld	r22, Z+
   15f3a:	71 91       	ld	r23, Z+
   15f3c:	af 01       	movw	r20, r30
   15f3e:	80 91 27 13 	lds	r24, 0x1327	; 0x801327 <__iob+0x2>
   15f42:	90 91 28 13 	lds	r25, 0x1328	; 0x801328 <__iob+0x3>
   15f46:	0e 94 9f a3 	call	0x1473e	; 0x1473e <vfprintf>
   15f4a:	df 91       	pop	r29
   15f4c:	cf 91       	pop	r28
   15f4e:	08 95       	ret

00015f50 <puts>:
puts():
   15f50:	0f 93       	push	r16
   15f52:	1f 93       	push	r17
   15f54:	cf 93       	push	r28
   15f56:	df 93       	push	r29
   15f58:	e0 91 27 13 	lds	r30, 0x1327	; 0x801327 <__iob+0x2>
   15f5c:	f0 91 28 13 	lds	r31, 0x1328	; 0x801328 <__iob+0x3>
   15f60:	23 81       	ldd	r18, Z+3	; 0x03
   15f62:	ec 01       	movw	r28, r24
   15f64:	10 e0       	ldi	r17, 0x00	; 0
   15f66:	00 e0       	ldi	r16, 0x00	; 0
   15f68:	21 fd       	sbrc	r18, 1
   15f6a:	08 c0       	rjmp	.+16     	; 0x15f7c <puts+0x2c>
   15f6c:	0f ef       	ldi	r16, 0xFF	; 255
   15f6e:	1f ef       	ldi	r17, 0xFF	; 255
   15f70:	14 c0       	rjmp	.+40     	; 0x15f9a <puts+0x4a>
   15f72:	19 95       	eicall
   15f74:	89 2b       	or	r24, r25
   15f76:	11 f0       	breq	.+4      	; 0x15f7c <puts+0x2c>
   15f78:	0f ef       	ldi	r16, 0xFF	; 255
   15f7a:	1f ef       	ldi	r17, 0xFF	; 255
   15f7c:	89 91       	ld	r24, Y+
   15f7e:	60 91 27 13 	lds	r22, 0x1327	; 0x801327 <__iob+0x2>
   15f82:	70 91 28 13 	lds	r23, 0x1328	; 0x801328 <__iob+0x3>
   15f86:	db 01       	movw	r26, r22
   15f88:	18 96       	adiw	r26, 0x08	; 8
   15f8a:	ed 91       	ld	r30, X+
   15f8c:	fc 91       	ld	r31, X
   15f8e:	81 11       	cpse	r24, r1
   15f90:	f0 cf       	rjmp	.-32     	; 0x15f72 <puts+0x22>
   15f92:	8a e0       	ldi	r24, 0x0A	; 10
   15f94:	19 95       	eicall
   15f96:	89 2b       	or	r24, r25
   15f98:	49 f7       	brne	.-46     	; 0x15f6c <puts+0x1c>
   15f9a:	c8 01       	movw	r24, r16
   15f9c:	df 91       	pop	r29
   15f9e:	cf 91       	pop	r28
   15fa0:	1f 91       	pop	r17
   15fa2:	0f 91       	pop	r16
   15fa4:	08 95       	ret

00015fa6 <sprintf>:
sprintf():
   15fa6:	0f 93       	push	r16
   15fa8:	1f 93       	push	r17
   15faa:	cf 93       	push	r28
   15fac:	df 93       	push	r29
   15fae:	cd b7       	in	r28, 0x3d	; 61
   15fb0:	de b7       	in	r29, 0x3e	; 62
   15fb2:	2e 97       	sbiw	r28, 0x0e	; 14
   15fb4:	0f b6       	in	r0, 0x3f	; 63
   15fb6:	f8 94       	cli
   15fb8:	de bf       	out	0x3e, r29	; 62
   15fba:	0f be       	out	0x3f, r0	; 63
   15fbc:	cd bf       	out	0x3d, r28	; 61
   15fbe:	0e 89       	ldd	r16, Y+22	; 0x16
   15fc0:	1f 89       	ldd	r17, Y+23	; 0x17
   15fc2:	86 e0       	ldi	r24, 0x06	; 6
   15fc4:	8c 83       	std	Y+4, r24	; 0x04
   15fc6:	1a 83       	std	Y+2, r17	; 0x02
   15fc8:	09 83       	std	Y+1, r16	; 0x01
   15fca:	8f ef       	ldi	r24, 0xFF	; 255
   15fcc:	9f e7       	ldi	r25, 0x7F	; 127
   15fce:	9e 83       	std	Y+6, r25	; 0x06
   15fd0:	8d 83       	std	Y+5, r24	; 0x05
   15fd2:	ae 01       	movw	r20, r28
   15fd4:	46 5e       	subi	r20, 0xE6	; 230
   15fd6:	5f 4f       	sbci	r21, 0xFF	; 255
   15fd8:	68 8d       	ldd	r22, Y+24	; 0x18
   15fda:	79 8d       	ldd	r23, Y+25	; 0x19
   15fdc:	ce 01       	movw	r24, r28
   15fde:	01 96       	adiw	r24, 0x01	; 1
   15fe0:	0e 94 9f a3 	call	0x1473e	; 0x1473e <vfprintf>
   15fe4:	2f 81       	ldd	r18, Y+7	; 0x07
   15fe6:	38 85       	ldd	r19, Y+8	; 0x08
   15fe8:	02 0f       	add	r16, r18
   15fea:	13 1f       	adc	r17, r19
   15fec:	f8 01       	movw	r30, r16
   15fee:	10 82       	st	Z, r1
   15ff0:	2e 96       	adiw	r28, 0x0e	; 14
   15ff2:	0f b6       	in	r0, 0x3f	; 63
   15ff4:	f8 94       	cli
   15ff6:	de bf       	out	0x3e, r29	; 62
   15ff8:	0f be       	out	0x3f, r0	; 63
   15ffa:	cd bf       	out	0x3d, r28	; 61
   15ffc:	df 91       	pop	r29
   15ffe:	cf 91       	pop	r28
   16000:	1f 91       	pop	r17
   16002:	0f 91       	pop	r16
   16004:	08 95       	ret

00016006 <_exit>:
exit():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
   16006:	f8 94       	cli

00016008 <__stop_program>:
__stop_program():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
   16008:	ff cf       	rjmp	.-2      	; 0x16008 <__stop_program>
