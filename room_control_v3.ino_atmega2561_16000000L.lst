
/tmp/arduino_build_695434/room_control_v3.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 1f 0e 	jmp	0x1c3e	; 0x1c3e <__ctors_end>
       4:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__bad_interrupt>
       8:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__bad_interrupt>
       c:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__bad_interrupt>
      10:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__bad_interrupt>
      14:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__bad_interrupt>
      18:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__bad_interrupt>
      1c:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__bad_interrupt>
      20:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__bad_interrupt>
      24:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__bad_interrupt>
      28:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__bad_interrupt>
      2c:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__bad_interrupt>
      30:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__bad_interrupt>
      34:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__bad_interrupt>
      38:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__bad_interrupt>
      3c:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__bad_interrupt>
      40:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__bad_interrupt>
      44:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__bad_interrupt>
      48:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__bad_interrupt>
      4c:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__bad_interrupt>
      50:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__bad_interrupt>
      54:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__bad_interrupt>
      58:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__bad_interrupt>
      5c:	0c 94 77 6f 	jmp	0xdeee	; 0xdeee <__vector_23>
      60:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__bad_interrupt>
      64:	0c 94 eb 6f 	jmp	0xdfd6	; 0xdfd6 <__vector_25>
      68:	0c 94 c1 6f 	jmp	0xdf82	; 0xdf82 <__vector_26>
      6c:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__bad_interrupt>
      70:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__bad_interrupt>
      74:	0c 94 21 70 	jmp	0xe042	; 0xe042 <__vector_29>
      78:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__bad_interrupt>
      7c:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__bad_interrupt>
      80:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__bad_interrupt>
      84:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__bad_interrupt>
      88:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__bad_interrupt>
      8c:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__bad_interrupt>
      90:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__bad_interrupt>
      94:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__bad_interrupt>
      98:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__bad_interrupt>
      9c:	0c 94 5c 70 	jmp	0xe0b8	; 0xe0b8 <__vector_39>
      a0:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__bad_interrupt>
      a4:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__bad_interrupt>
      a8:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__bad_interrupt>
      ac:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__bad_interrupt>
      b0:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__bad_interrupt>
      b4:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__bad_interrupt>
      b8:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__bad_interrupt>
      bc:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__bad_interrupt>
      c0:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__bad_interrupt>
      c4:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__bad_interrupt>
      c8:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__bad_interrupt>

000000cc <__trampolines_start>:
__trampolines_start():
      cc:	0c 94 be 19 	jmp	0x337c	; 0x337c <EthernetClient::available()>
      d0:	0c 94 f5 0e 	jmp	0x1dea	; 0x1dea <TwoWire::onRequestService()>
      d4:	0c 94 fb 10 	jmp	0x21f6	; 0x21f6 <turnOffPWM+0x50>
      d8:	0c 94 1b 18 	jmp	0x3036	; 0x3036 <EthernetClient::flush()>
      dc:	0c 94 a2 1e 	jmp	0x3d44	; 0x3d44 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
      e0:	0c 94 d7 47 	jmp	0x8fae	; 0x8fae <thermostat_default_ring_has_mode(unsigned char)>
      e4:	0c 94 8f 1c 	jmp	0x391e	; 0x391e <EthernetUDP::read(char*, unsigned int)>
      e8:	0c 94 49 19 	jmp	0x3292	; 0x3292 <EthernetClient::peek()>
      ec:	0c 94 f6 0e 	jmp	0x1dec	; 0x1dec <TwoWire::onReceiveService(unsigned char*, int)>
      f0:	0c 94 fc 0f 	jmp	0x1ff8	; 0x1ff8 <HardwareSerial::read()>
      f4:	0c 94 98 17 	jmp	0x2f30	; 0x2f30 <EthernetUDP::write(unsigned char)>
      f8:	0c 94 4a 2e 	jmp	0x5c94	; 0x5c94 <nullfce()>
      fc:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <EthernetClient::stop()>
     100:	0c 94 0b 73 	jmp	0xe616	; 0xe616 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.6788>
     104:	0c 94 33 11 	jmp	0x2266	; 0x2266 <__stack+0x67>
     108:	0c 94 92 4f 	jmp	0x9f24	; 0x9f24 <display_element_show_date_1(unsigned int, unsigned int)>
     10c:	0c 94 ac 4e 	jmp	0x9d58	; 0x9d58 <EthernetUDP::beginPacket(char const*, unsigned int)>
     110:	0c 94 10 10 	jmp	0x2020	; 0x2020 <HardwareSerial::peek()>
     114:	0c 94 9e 0e 	jmp	0x1d3c	; 0x1d3c <LCDWIKI_KBV::Get_Width() const>
     118:	0c 94 ee 0e 	jmp	0x1ddc	; 0x1ddc <TwoWire::available()>
     11c:	0c 94 4f 46 	jmp	0x8c9e	; 0x8c9e <thermostat_default_ring_set_mode(unsigned char)>
     120:	0c 94 05 11 	jmp	0x220a	; 0x220a <__stack+0xb>
     124:	0c 94 37 1a 	jmp	0x346e	; 0x346e <EthernetClient::connected()>
     128:	0c 94 93 51 	jmp	0xa326	; 0xa326 <mqtt_callback(char*, unsigned char*, unsigned int)>
     12c:	0c 94 05 18 	jmp	0x300a	; 0x300a <UDP::beginMulticast(IPAddress, unsigned int)>
     130:	0c 94 8c 1c 	jmp	0x3918	; 0x3918 <Print::availableForWrite()>
     134:	0c 94 2b 11 	jmp	0x2256	; 0x2256 <__stack+0x57>
     138:	0c 94 ed 0f 	jmp	0x1fda	; 0x1fda <HardwareSerial::availableForWrite()>
     13c:	0c 94 0f 11 	jmp	0x221e	; 0x221e <__stack+0x1f>
     140:	0c 94 6f 19 	jmp	0x32de	; 0x32de <EthernetUDP::peek()>
     144:	0c 94 d1 1a 	jmp	0x35a2	; 0x35a2 <EthernetUDP::read(unsigned char*, unsigned int)>
     148:	0c 94 1c 18 	jmp	0x3038	; 0x3038 <EthernetClient::write(unsigned char)>
     14c:	0c 94 8f 1b 	jmp	0x371e	; 0x371e <EthernetClient::write(unsigned char const*, unsigned int)>
     150:	0c 94 21 11 	jmp	0x2242	; 0x2242 <__stack+0x43>
     154:	0c 94 1a 1b 	jmp	0x3634	; 0x3634 <EthernetClient::read(unsigned char*, unsigned int)>
     158:	0c 94 1a 18 	jmp	0x3034	; 0x3034 <dialog_yes_button_click(unsigned char)>
     15c:	0c 94 02 50 	jmp	0xa004	; 0xa004 <display_element_show_time_1(unsigned int, unsigned int)>
     160:	0c 94 47 15 	jmp	0x2a8e	; 0x2a8e <TwoWire::write(unsigned char)>
     164:	0c 94 0b 15 	jmp	0x2a16	; 0x2a16 <TwoWire::peek()>
     168:	0c 94 38 1b 	jmp	0x3670	; 0x3670 <EthernetUDP::endPacket()>
     16c:	0c 94 88 50 	jmp	0xa110	; 0xa110 <one_wire_associate_text_button(unsigned char, char*, char*)>
     170:	0c 94 db 20 	jmp	0x41b6	; 0x41b6 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)>
     174:	0c 94 1e 1b 	jmp	0x363c	; 0x363c <EthernetClient::read()>
     178:	0c 94 4b 2e 	jmp	0x5c96	; 0x5c96 <button_redraw(unsigned char)>
     17c:	0c 94 50 14 	jmp	0x28a0	; 0x28a0 <Print::write(unsigned char const*, unsigned int)>
     180:	0c 94 bf 22 	jmp	0x457e	; 0x457e <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)>
     184:	0c 94 6d 6f 	jmp	0xdeda	; 0xdeda <MenuHistoryPrevMenu()>
     188:	0c 94 07 18 	jmp	0x300e	; 0x300e <EthernetClient::operator==(EthernetClient const&)>
     18c:	0c 94 36 11 	jmp	0x226c	; 0x226c <__stack+0x6d>
     190:	0c 94 1a 15 	jmp	0x2a34	; 0x2a34 <TwoWire::write(unsigned char const*, unsigned int)>
     194:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <EthernetUDP::write(unsigned char const*, unsigned int)>
     198:	0c 94 13 11 	jmp	0x2226	; 0x2226 <__stack+0x27>
     19c:	0c 94 ed 17 	jmp	0x2fda	; 0x2fda <EthernetUDP::available()>
     1a0:	0c 94 c8 0e 	jmp	0x1d90	; 0x1d90 <TwoWire::read()>
     1a4:	0c 94 4f 2e 	jmp	0x5c9e	; 0x5c9e <budik_enabled(unsigned char)>
     1a8:	0c 94 d2 4b 	jmp	0x97a4	; 0x97a4 <EthernetUDP::parsePacket()>
     1ac:	0c 94 0a 15 	jmp	0x2a14	; 0x2a14 <TwoWire::flush()>
     1b0:	0c 94 37 11 	jmp	0x226e	; 0x226e <__stack+0x6f>
     1b4:	0c 94 bb 30 	jmp	0x6176	; 0x6176 <budik_text_state(unsigned char, char*)>
     1b8:	0c 94 4d 2e 	jmp	0x5c9a	; 0x5c9a <one_wire_last_index_for_menu(unsigned char)>
     1bc:	0c 94 1e 10 	jmp	0x203c	; 0x203c <HardwareSerial::available()>
     1c0:	0c 94 25 11 	jmp	0x224a	; 0x224a <__stack+0x4b>
     1c4:	0c 94 a2 0e 	jmp	0x1d44	; 0x1d44 <LCDWIKI_KBV::Get_Height() const>
     1c8:	0c 94 1d 11 	jmp	0x223a	; 0x223a <__stack+0x3b>
     1cc:	0c 94 f6 1b 	jmp	0x37ec	; 0x37ec <EthernetClient::connect(IPAddress, unsigned int)>
     1d0:	0c 94 a9 33 	jmp	0x6752	; 0x6752 <IPAddress::printTo(Print&) const>
     1d4:	0c 94 61 1b 	jmp	0x36c2	; 0x36c2 <EthernetUDP::begin(unsigned int)>
     1d8:	0c 94 d2 50 	jmp	0xa1a4	; 0xa1a4 <display_element_show_temp_1(unsigned int, unsigned int)>
     1dc:	0c 94 12 18 	jmp	0x3024	; 0x3024 <EthernetClient::operator bool()>
     1e0:	0c 94 4b 10 	jmp	0x2096	; 0x2096 <HardwareSerial::write(unsigned char)>
     1e4:	0c 94 5a 6f 	jmp	0xdeb4	; 0xdeb4 <associate_onewire(unsigned char, unsigned char)>
     1e8:	0c 94 ad 22 	jmp	0x455a	; 0x455a <LCDWIKI_KBV::Color_To_565(unsigned char, unsigned char, unsigned char)>
     1ec:	0c 94 f2 23 	jmp	0x47e4	; 0x47e4 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)>
     1f0:	0c 94 f1 10 	jmp	0x21e2	; 0x21e2 <turnOffPWM+0x3c>
     1f4:	0c 94 17 11 	jmp	0x222e	; 0x222e <__stack+0x2f>
     1f8:	0c 94 09 11 	jmp	0x2212	; 0x2212 <__stack+0x13>
     1fc:	0c 94 5d 2e 	jmp	0x5cba	; 0x5cba <ArduinoJson::Internals::StaticMemoryPoolBase::alloc(unsigned int)>
     200:	0c 94 f7 10 	jmp	0x21ee	; 0x21ee <turnOffPWM+0x48>
     204:	0c 94 ae 17 	jmp	0x2f5c	; 0x2f5c <EthernetUDP::beginPacket(IPAddress, unsigned int)>
     208:	0c 94 86 17 	jmp	0x2f0c	; 0x2f0c <EthernetUDP::flush()>
     20c:	0c 94 92 10 	jmp	0x2124	; 0x2124 <HardwareSerial::flush()>
     210:	0c 94 04 2e 	jmp	0x5c08	; 0x5c08 <a2d_complete(unsigned char, unsigned int)>
     214:	0c 94 2f 11 	jmp	0x225e	; 0x225e <__stack+0x5f>
     218:	0c 94 f5 17 	jmp	0x2fea	; 0x2fea <EthernetUDP::remoteIP()>
     21c:	0c 94 be 49 	jmp	0x937c	; 0x937c <printf_via_mqtt(char, __file*)>
     220:	0c 94 51 2e 	jmp	0x5ca2	; 0x5ca2 <serial_putc(char, __file*)>
     224:	0c 94 67 21 	jmp	0x42ce	; 0x42ce <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)>
     228:	0c 94 f1 17 	jmp	0x2fe2	; 0x2fe2 <EthernetUDP::remotePort()>
     22c:	0c 94 d6 18 	jmp	0x31ac	; 0x31ac <EthernetUDP::stop()>
     230:	0c 94 4c 6f 	jmp	0xde98	; 0xde98 <MenuHistoryNextMenu(unsigned char)>
     234:	0c 94 1f 4f 	jmp	0x9e3e	; 0x9e3e <EthernetClient::connect(char const*, unsigned int)>
     238:	0c 94 32 18 	jmp	0x3064	; 0x3064 <EthernetClient::operator!=(EthernetClient const&)>
     23c:	0c 94 ff 10 	jmp	0x21fe	; 0x21fe <turnOffPWM+0x58>
     240:	0c 94 f0 1a 	jmp	0x35e0	; 0x35e0 <EthernetUDP::read()>

00000244 <__trampolines_end>:
__trampolines_end():
     244:	4e 41       	sbci	r20, 0x1E	; 30
     246:	4e 49       	Address 0x0000000000000246 is out of bounds.
.word	0xffff	; ????

00000247 <pstr_inity>:
     247:	49 4e 49 54 59                                      INITY

0000024c <pstr_inf>:
     24c:	49 4e 46                                            INF

0000024f <pwr_m10>:
     24f:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     25f:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000267 <pwr_p10>:
     267:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     277:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     287:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     297:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     2a7:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     2b7:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     2c7:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     2d7:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     2e7:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     2f7:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     307:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     317:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     327:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     337:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     347:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     357:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     367:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     377:	3d 27                                               ='

00000379 <text_no>:
     379:	4e 65 00                                            Ne.

0000037c <text_yes>:
     37c:	41 6e 6f 00                                         Ano.

00000380 <text_upozorneni>:
     380:	55 70 6f 7a 6f 72 6e 65 6e 69 00                    Upozorneni.

0000038b <budik_text>:
     38b:	42 75 64 69 6b 00                                   Budik.

00000391 <nastaveni_onewire>:
     391:	4c 6f 6b 61 6c 6e 69 20 63 69 64 6c 61 00           Lokalni cidla.

0000039f <nastaveni_rtds>:
     39f:	56 7a 64 61 6c 65 6e 65 20 63 69 64 6c 61 00        Vzdalene cidla.

000003ae <button_zpet>:
     3ae:	5a 70 65 74 00                                      Zpet.

000003b3 <nastaveni_default>:
     3b3:	52 65 73 65 74 20 6e 61 73 74 61 76 65 6e 69 00     Reset nastaveni.

000003c3 <nastaveni_nrf>:
     3c3:	4e 52 46 20 70 72 69 70 6f 6a 65 6e 69 00           NRF pripojeni.

000003d1 <nastaveni_site>:
     3d1:	4e 61 73 74 61 76 65 6e 69 20 73 69 74 65 00        Nastaveni site.

000003e0 <button_term_man>:
     3e0:	4d 41 4e 00                                         MAN.

000003e4 <button_term_prog>:
     3e4:	50 52 4f 47 00                                      PROG.

000003e9 <button_term_min>:
     3e9:	4d 49 4e 00                                         MIN.

000003ed <button_term_max>:
     3ed:	4d 41 58 00                                         MAX.

000003f1 <button_term_off>:
     3f1:	4f 46 46 00                                         OFF.

000003f5 <nastaveni_text>:
     3f5:	4e 61 73 74 61 76 65 6e 69 00                       Nastaveni.

000003ff <funkce_text>:
     3ff:	46 75 6e 6b 63 65 00                                Funkce.

00000406 <regulator_text>:
     406:	52 65 67 75 6c 61 74 6f 72 00                       Regulator.

00000410 <Menu_All>:
     410:	05 2e 16 06 04 22 01 96 00 aa 00 28 00 02 00 4a     .....".....(...J
     420:	2e 4b 2e ff 03 22 01 5a 00 aa 00 28 00 02 01 4c     .K...".Z...(...L
     430:	6f 4b 2e f5 03 22 01 1e 00 aa 00 28 00 02 02 4c     oK...".....(...L
     440:	6f 4b 2e 00 00 00 00 00 00 00 00 00 00 00 00 00     oK..............
	...
     4b0:	00 00 00 f1 03 0a 00 dc 00 52 00 3c 00 03 9a d6     .........R.<....
     4c0:	ff ff 00 4f 46 d7 47 4b 2e ed 03 64 00 dc 00 52     ...OF.GK...d...R
     4d0:	00 3c 00 03 00 f8 ff ff 01 4f 46 d7 47 4b 2e e9     .<.......OF.GK..
     4e0:	03 be 00 dc 00 52 00 3c 00 03 1f 00 ff ff 07 4f     .....R.<.......O
     4f0:	46 d7 47 4b 2e e4 03 18 01 dc 00 52 00 3c 00 03     F.GK.......R.<..
     500:	e0 ff ff ff 02 4f 46 d7 47 4b 2e e0 03 72 01 dc     .....OF.GK...r..
     510:	00 52 00 3c 00 03 e0 07 ff ff 08 4f 46 d7 47 4b     .R.<.......OF.GK
     520:	2e 0a 00 82 00 00 d2 50 4b 2e 0a 00 1e 00 00 02     .......PK.......
     530:	50 4b 2e 18 01 22 01 00 92 4f 4b 2e 00 00 00 00     PK..."...OK.....
	...
     598:	00 00 03 05 03 00 00 00 00 00 00 00 e0 01 40 01     ..............@.
     5a8:	01 ff ff 4b 2e f5 03 d1 03 0a 00 28 00 be 00 28     ...K.......(...(
     5b8:	00 02 00 4a 2e 4b 2e c3 03 0a 00 64 00 be 00 28     ...J.K.....d...(
     5c8:	00 02 00 4a 2e 4b 2e b3 03 0a 00 a0 00 be 00 28     ...J.K.........(
     5d8:	00 02 00 4a 2e 4b 2e ae 03 0a 00 dc 00 be 00 28     ...J.K.........(
     5e8:	00 02 00 6d 6f 4b 2e 9f 03 18 01 64 00 be 00 28     ...moK.....d...(
     5f8:	00 02 00 4a 2e 4b 2e 91 03 18 01 28 00 be 00 28     ...J.K.....(...(
     608:	00 02 03 4c 6f 4b 2e 00 00 00 00 00 00 00 00 00     ...LoK..........
	...
     6bc:	00 18 01 22 01 00 92 4f 4b 2e 00 00 00 00 00 00     ..."...OK.......
	...
     734:	00 00 06 00 01 00 00 02 00 00 00 00 e0 01 40 01     ..............@.
     744:	01 ff ff 4b 2e ff 03 ae 03 0a 00 dc 00 be 00 28     ...K...........(
     754:	00 02 00 6d 6f 4b 2e 00 00 00 00 00 00 00 00 00     ...moK..........
	...
     858:	00 18 01 22 01 00 92 4f 4b 2e 00 00 00 00 00 00     ..."...OK.......
	...
     874:	8b 03 0a 00 28 00 be 00 78 00 02 00 00 00 00 01     ....(...x.......
     884:	4a 2e 4f 2e bb 30 4b 2e 00 00 00 00 00 00 00 00     J.O..0K.........
	...
     8d0:	00 00 01 00 01 01 00 01 00 00 00 00 e0 01 40 01     ..............@.
     8e0:	01 ff ff 4b 2e 91 03 ae 03 0a 00 dc 00 be 00 28     ...K...........(
     8f0:	00 02 00 6d 6f 4b 2e 00 00 00 00 00 00 00 00 00     ...moK..........
	...
     9f4:	00 18 01 22 01 00 92 4f 4b 2e 00 00 00 00 00 00     ..."...OK.......
	...
     a58:	1e 00 23 00 c8 00 37 00 01 3c 00 dc 00 01 88 50     ..#...7..<.....P
     a68:	5a 6f 4d 2e 4b 2e 01 00 01 00 01 03 00 00 00 00     ZoM.K...........
     a78:	e0 01 40 01 01 ff ff 4b 2e 80 03 7c 03 64 00 6e     ..@....K...|.d.n
     a88:	00 64 00 28 00 02 00 1a 18 4b 2e 79 03 f0 00 6e     .d.(.....K.y...n
     a98:	00 64 00 28 00 02 00 6d 6f 4b 2e 00 00 00 00 00     .d.(...moK......
	...
     c08:	00 00 02 00 00 00 00 64 32 00 32 00 7c 01 8c 00     .......d2.2.|...
     c18:	06 e0 ff 4b 2e 00 00 00 00 00 00 00 00 00 00 00     ...K............
	...

00001429 <global_time_offset>:
    1429:	67 6c 6f 62 61 6c 2f 74 69 6d 65 2f 6e 74 70 5f     global/time/ntp_
    1439:	6f 66 66 73 65 74 00                                offset.

00001440 <global_time_ntp>:
    1440:	67 6c 6f 62 61 6c 2f 74 69 6d 65 2f 6e 74 70 00     global/time/ntp.

00001450 <global_time_set>:
    1450:	67 6c 6f 62 61 6c 2f 74 69 6d 65 2f 73 65 74 00     global/time/set.

00001460 <termbig_header_out>:
    1460:	2f 74 65 72 6d 62 69 67 2d 6f 75 74 2f 00           /termbig-out/.

0000146e <termbig_subscribe>:
    146e:	2f 63 74 6c 2f 74 65 72 6d 62 69 67 2f 73 75 62     /ctl/termbig/sub
    147e:	73 63 72 69 62 65 00                                scribe.

00001485 <thermctl_subscribe>:
    1485:	2f 63 74 6c 2f 74 68 65 72 6d 63 74 6c 2f 73 75     /ctl/thermctl/su
    1495:	62 73 63 72 69 62 65 00                             bscribe.

0000149d <lightctl_header_out>:
    149d:	2f 6c 69 67 68 74 63 74 6c 2d 6f 75 74 2f 00        /lightctl-out/.

000014ac <thermctl_header_in>:
    14ac:	2f 74 68 65 72 6d 63 74 6c 2d 69 6e 2f 00           /thermctl-in/.

000014ba <LCDWIKI_KBV::start(unsigned int)::ST7796S_regValues>:
    14ba:	f0 01 c3 f0 01 96 36 01 68 3a 01 05 b0 01 80 53     ......6.h:.....S
    14ca:	01 2c 51 01 14 b6 02 20 02 b5 04 02 03 00 04 b1     .,Q.... ........
    14da:	02 80 10 b4 01 00 b7 01 c6 c5 01 24 e4 01 31 e8     ...........$..1.
    14ea:	08 40 8a 00 00 29 19 a5 33 c2 00 a7 00 e0 0e f0     .@...)..3.......
    14fa:	09 13 12 12 2b 3c 44 4b 1b 18 17 1d 21 e1 0e f0     ....+<DK....!...
    150a:	09 13 0c 0d 27 3b 44 4d 0b 17 17 1d 21 36 01 ec     ....';DM....!6..
    151a:	f0 01 c3 f0 01 69 13 00 11 00 29 00                 .....i....).

00001526 <text_rtc_cas>:
    1526:	52 54 43 20 76 6e 69 74 72 6e 69 20 68 6f 64 69     RTC vnitrni hodi
    1536:	6e 79 00                                            ny.

00001539 <text_ntp_cas>:
    1539:	4e 54 50 20 69 6e 74 65 72 6e 65 74 6f 76 79 20     NTP internetovy 
    1549:	63 61 73 00                                         cas.

0000154d <text_pid_regulator>:
    154d:	50 49 44 20 72 65 67 75 6c 61 74 6f 72 00           PID regulator.

0000155b <text_nrf_rozhrani>:
    155b:	4e 52 46 20 72 6f 7a 68 72 61 6e 69 00              NRF rozhrani.

00001568 <text_rest_rozhrani>:
    1568:	52 45 53 54 20 41 50 49 20 72 6f 7a 68 72 61 6e     REST API rozhran
    1578:	69 00                                               i.

0000157a <thermctl_header_out>:
    157a:	2f 74 68 65 72 6d 63 74 6c 2d 6f 75 74 2f 00        /thermctl-out/.

00001589 <text_mqtt_rozhrani>:
    1589:	4d 51 54 54 20 72 6f 7a 68 72 61 6e 69 00           MQTT rozhrani.

00001597 <text_ethernet_rozhrani>:
    1597:	45 74 68 65 72 6e 65 74 20 72 6f 7a 68 72 61 6e     Ethernet rozhran
    15a7:	69 00                                               i.

000015a9 <text_onewire_hledam>:
    15a9:	31 77 69 72 65 20 68 6c 65 64 61 6d 00              1wire hledam.

000015b6 <text_onewire_rozhrani>:
    15b6:	31 77 69 72 65 20 72 6f 7a 68 72 61 6e 69 00        1wire rozhrani.

000015c5 <text_touchscreen>:
    15c5:	74 6f 75 63 68 73 63 72 65 65 6e 00                 touchscreen.

000015d1 <text_nastaveni_systemu>:
    15d1:	6e 61 73 74 61 76 65 6e 69 20 73 79 73 74 65 6d     nastaveni system
    15e1:	75 00                                               u.

000015e3 <text_test_eeprom>:
    15e3:	54 65 73 74 20 53 50 49 2d 45 45 50 52 4f 4d 00     Test SPI-EEPROM.

000015f3 <text_test_ram>:
    15f3:	54 65 73 74 20 53 50 49 2d 52 41 4d 00              Test SPI-RAM.

00001600 <text_bezny_start>:
    1600:	42 65 7a 6e 79 20 73 74 61 72 74 00                 Bezny start.

0000160c <text_vychozi_nastaveni>:
    160c:	56 79 63 68 6f 7a 69 20 6e 61 73 74 61 76 65 6e     Vychozi nastaven
    161c:	69 00                                               i.

0000161e <text_vnitrni_ochrany>:
    161e:	56 6e 69 74 72 6e 69 20 6f 63 68 72 61 6e 79 00     Vnitrni ochrany.

0000162e <term_title>:
    162e:	50 6f 6b 6f 6a 6f 76 79 20 74 65 72 6d 6f 73 74     Pokojovy termost
    163e:	61 74 20 76 33 00                                   at v3.

00001644 <current_time>:
    1644:	41 6b 74 75 61 6c 6e 69 20 63 61 73 00              Aktualni cas.

00001651 <current_temp>:
    1651:	41 6b 74 75 61 6c 6e 69 20 74 65 70 6c 6f 74 61     Aktualni teplota
    1661:	3a 00                                               :.

00001663 <port_to_mode_PGM>:
    1663:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.

00001673 <digital_pin_to_timer_PGM>:
    1673:	00 00 00 0a 0b 0c 00 00 00 00 00 00 08 04 05 06     ................
	...
    16a7:	00 03                                               ..

000016a9 <lcd_font>:
    16a9:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
    16b9:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
    16c9:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
    16d9:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
    16e9:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
    16f9:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
    1709:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
    1719:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
    1729:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
    1739:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
    1749:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
    1759:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
    1769:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
    1779:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
    1789:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
    1799:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
    17a9:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
    17b9:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
    17c9:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
    17d9:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
    17e9:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
    17f9:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
    1809:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
    1819:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
    1829:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
    1839:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
    1849:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
    1859:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
    1869:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
    1879:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
    1889:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
    1899:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
    18a9:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
    18b9:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
    18c9:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
    18d9:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
    18e9:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
    18f9:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
    1909:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
    1919:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
    1929:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
    1939:	55 55 79 41 21 54 54 78 41 21 55 54 78 40 20 54     UUyA!TTxA!UTx@ T
    1949:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
    1959:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
    1969:	42 00 01 45 7c 40 f0 29 24 29 f0 f0 28 25 28 f0     B..E|@.)$)..(%(.
    1979:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
    1989:	49 49 49 32 32 48 48 48 32 32 4a 48 48 30 3a 41     III22HHH22JHH0:A
    1999:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 39 44 44     A!z:B@ x....}9DD
    19a9:	44 39 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     D9=@@@=<$.$$H~IC
    19b9:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
    19c9:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
    19d9:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
    19e9:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
    19f9:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
    1a09:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
    1a19:	aa 00 55 00 aa aa 55 aa 55 aa 00 00 00 ff 00 10     ..U...U.U.......
    1a29:	10 10 ff 00 14 14 14 ff 00 10 10 ff 00 ff 10 10     ................
    1a39:	f0 10 f0 14 14 14 fc 00 14 14 f7 00 ff 00 00 ff     ................
    1a49:	00 ff 14 14 f4 04 fc 14 14 17 10 1f 10 10 1f 10     ................
    1a59:	1f 14 14 14 1f 00 10 10 10 f0 00 00 00 00 1f 10     ................
    1a69:	10 10 10 1f 10 10 10 10 f0 10 00 00 00 ff 10 10     ................
    1a79:	10 10 10 10 10 10 10 ff 10 00 00 00 ff 14 00 00     ................
    1a89:	ff 00 ff 00 00 1f 10 17 00 00 fc 04 f4 14 14 17     ................
    1a99:	10 17 14 14 f4 04 f4 00 00 ff 00 f7 14 14 14 14     ................
    1aa9:	14 14 14 f7 00 f7 14 14 14 17 14 10 10 1f 10 1f     ................
    1ab9:	14 14 14 f4 14 10 10 f0 10 f0 00 00 1f 10 1f 00     ................
    1ac9:	00 00 1f 14 00 00 00 fc 14 00 00 f0 10 f0 10 10     ................
    1ad9:	ff 10 ff 14 14 14 ff 14 10 10 10 1f 00 00 00 00     ................
    1ae9:	f0 10 ff ff ff ff ff f0 f0 f0 f0 f0 ff ff ff 00     ................
    1af9:	00 00 00 00 ff ff 0f 0f 0f 0f 0f 38 44 44 38 44     ...........8DD8D
    1b09:	7c 2a 2a 3e 14 7e 02 02 06 06 02 7e 02 7e 02 63     |**>.~.....~.~.c
    1b19:	55 49 41 63 38 44 44 3c 04 40 7e 20 1e 20 06 02     UIAc8DD<.@~ . ..
    1b29:	7e 02 02 99 a5 e7 a5 99 1c 2a 49 2a 1c 4c 72 01     ~........*I*.Lr.
    1b39:	72 4c 30 4a 4d 4d 30 30 48 78 48 30 bc 62 5a 46     rL0JMM00HxH0.bZF
    1b49:	3d 3e 49 49 49 00 7e 01 01 01 7e 2a 2a 2a 2a 2a     =>III.~...~*****
    1b59:	44 44 5f 44 44 40 51 4a 44 40 40 44 4a 51 40 00     DD_DD@QJD@@DJQ@.
    1b69:	00 ff 01 03 e0 80 ff 00 00 08 08 6b 6b 08 36 12     ...........kk.6.
    1b79:	36 24 36 06 0f 09 0f 06 00 00 18 18 00 00 00 10     6$6.............
    1b89:	10 00 30 40 ff 01 01 00 1f 01 01 1e 00 19 1d 17     ..0@............
    1b99:	12 00 3c 3c 3c 3c 00 00 00 00 00                    ..<<<<.....

00001ba4 <port_to_input_PGM>:
    1ba4:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.

00001bb4 <digital_pin_to_bit_mask_PGM>:
    1bb4:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
    1bc4:	08 10 01 02 04 08 10 20 40 80 01 02 01 02 04 08     ....... @.......
    1bd4:	10 20 40 80 04 80 40 20 10 08 04 02 01 01 02 04     . @...@ ........
    1be4:	08 10 20 40 80 20                                   .. @. 

00001bea <port_to_output_PGM>:
    1bea:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.

00001bfa <digital_pin_to_port_PGM>:
    1bfa:	05 05 05 05 05 05 05 05 02 02 02 02 02 02 02 02     ................
    1c0a:	07 07 04 04 04 04 04 04 04 04 07 07 03 03 03 03     ................
    1c1a:	03 03 03 03 07 01 01 01 01 01 01 01 01 06 06 06     ................
    1c2a:	06 06 06 06 06 07                                   ......

00001c30 <daysInMonth>:
    1c30:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e 1f                 ............

00001c3c <__ctors_start>:
__ctors_start():
    1c3c:	0b 73       	andi	r16, 0x3B	; 59

00001c3e <__ctors_end>:
__dtors_end():
    1c3e:	11 24       	eor	r1, r1
    1c40:	1f be       	out	0x3f, r1	; 63
    1c42:	cf ef       	ldi	r28, 0xFF	; 255
    1c44:	d1 e2       	ldi	r29, 0x21	; 33
    1c46:	de bf       	out	0x3e, r29	; 62
    1c48:	cd bf       	out	0x3d, r28	; 61
    1c4a:	00 e0       	ldi	r16, 0x00	; 0
    1c4c:	0c bf       	out	0x3c, r16	; 60

00001c4e <__do_copy_data>:
__do_copy_data():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
    1c4e:	19 e0       	ldi	r17, 0x09	; 9
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
    1c50:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
    1c52:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
    1c54:	ea ed       	ldi	r30, 0xDA	; 218
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
    1c56:	fa e1       	ldi	r31, 0x1A	; 26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
    1c58:	01 e0       	ldi	r16, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
    1c5a:	0b bf       	out	0x3b, r16	; 59
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
    1c5c:	02 c0       	rjmp	.+4      	; 0x1c62 <__do_copy_data+0x14>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
    1c5e:	07 90       	elpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
    1c60:	0d 92       	st	X+, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
    1c62:	ac 30       	cpi	r26, 0x0C	; 12
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
    1c64:	b1 07       	cpc	r27, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
    1c66:	d9 f7       	brne	.-10     	; 0x1c5e <__do_copy_data+0x10>

00001c68 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
    1c68:	26 e1       	ldi	r18, 0x16	; 22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
    1c6a:	ac e0       	ldi	r26, 0x0C	; 12
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
    1c6c:	b9 e0       	ldi	r27, 0x09	; 9
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
    1c6e:	01 c0       	rjmp	.+2      	; 0x1c72 <.do_clear_bss_start>

00001c70 <.do_clear_bss_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
    1c70:	1d 92       	st	X+, r1

00001c72 <.do_clear_bss_start>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
    1c72:	aa 32       	cpi	r26, 0x2A	; 42
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
    1c74:	b2 07       	cpc	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
    1c76:	e1 f7       	brne	.-8      	; 0x1c70 <.do_clear_bss_loop>

00001c78 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
    1c78:	1e e0       	ldi	r17, 0x0E	; 14
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
    1c7a:	cf e1       	ldi	r28, 0x1F	; 31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
    1c7c:	de e0       	ldi	r29, 0x0E	; 14
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2470
    1c7e:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
    1c80:	06 c0       	rjmp	.+12     	; 0x1c8e <__do_global_ctors+0x16>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
    1c82:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2476
    1c84:	01 09       	sbc	r16, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2477
    1c86:	80 2f       	mov	r24, r16
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
    1c88:	fe 01       	movw	r30, r28
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
    1c8a:	0e 94 b2 8b 	call	0x11764	; 0x11764 <__tablejump2__>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
    1c8e:	ce 31       	cpi	r28, 0x1E	; 30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
    1c90:	d1 07       	cpc	r29, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2486
    1c92:	80 e0       	ldi	r24, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2487
    1c94:	08 07       	cpc	r16, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
    1c96:	a9 f7       	brne	.-22     	; 0x1c82 <__do_global_ctors+0xa>
    1c98:	0e 94 1a 77 	call	0xee34	; 0xee34 <main>
    1c9c:	0c 94 6b 8d 	jmp	0x11ad6	; 0x11ad6 <_exit>

00001ca0 <__bad_interrupt>:
__vector_38():
    1ca0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001ca4 <twi_readFrom.part.0.constprop.183>:
twi_readFrom.part.0.constprop.183():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:157
  if(TWI_BUFFER_SIZE < length){
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    1ca4:	90 91 2b 0f 	lds	r25, 0x0F2B	; 0x800f2b <twi_state>
    1ca8:	91 11       	cpse	r25, r1
    1caa:	fc cf       	rjmp	.-8      	; 0x1ca4 <twi_readFrom.part.0.constprop.183>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:160
    continue;
  }
  twi_state = TWI_MRX;
    1cac:	91 e0       	ldi	r25, 0x01	; 1
    1cae:	90 93 2b 0f 	sts	0x0F2B, r25	; 0x800f2b <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:161
  twi_sendStop = sendStop;
    1cb2:	90 93 2a 0f 	sts	0x0F2A, r25	; 0x800f2a <twi_sendStop>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:163
  // reset error state (0xFF.. no error occurred)
  twi_error = 0xFF;
    1cb6:	2f ef       	ldi	r18, 0xFF	; 255
    1cb8:	20 93 29 0f 	sts	0x0F29, r18	; 0x800f29 <twi_error>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:166

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    1cbc:	10 92 28 0f 	sts	0x0F28, r1	; 0x800f28 <twi_masterBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:167
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    1cc0:	26 0f       	add	r18, r22
    1cc2:	20 93 27 0f 	sts	0x0F27, r18	; 0x800f27 <twi_masterBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:175
  // Therefore we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    1cc6:	90 93 26 0f 	sts	0x0F26, r25	; 0x800f26 <twi_slarw>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:176
  twi_slarw |= address << 1;
    1cca:	90 91 26 0f 	lds	r25, 0x0F26	; 0x800f26 <twi_slarw>
    1cce:	88 0f       	add	r24, r24
    1cd0:	89 2b       	or	r24, r25
    1cd2:	80 93 26 0f 	sts	0x0F26, r24	; 0x800f26 <twi_slarw>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:178

  if (true == twi_inRepStart) {
    1cd6:	80 91 25 0f 	lds	r24, 0x0F25	; 0x800f25 <twi_inRepStart>
    1cda:	81 30       	cpi	r24, 0x01	; 1
    1cdc:	f9 f4       	brne	.+62     	; 0x1d1c <twi_readFrom.part.0.constprop.183+0x78>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:185
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // Remember, we're dealing with an ASYNC ISR
    1cde:	10 92 25 0f 	sts	0x0F25, r1	; 0x800f25 <twi_inRepStart>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:187
    do {
      TWDR = twi_slarw;
    1ce2:	80 91 26 0f 	lds	r24, 0x0F26	; 0x800f26 <twi_slarw>
    1ce6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:188
    } while(TWCR & _BV(TWWC));
    1cea:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1cee:	83 fd       	sbrc	r24, 3
    1cf0:	f8 cf       	rjmp	.-16     	; 0x1ce2 <twi_readFrom.part.0.constprop.183+0x3e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:189
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
    1cf2:	85 ec       	ldi	r24, 0xC5	; 197
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:193
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    1cf4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:196

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    1cf8:	80 91 2b 0f 	lds	r24, 0x0F2B	; 0x800f2b <twi_state>
    1cfc:	81 30       	cpi	r24, 0x01	; 1
    1cfe:	e1 f3       	breq	.-8      	; 0x1cf8 <twi_readFrom.part.0.constprop.183+0x54>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:200
    continue;
  }

  if (twi_masterBufferIndex < length)
    1d00:	80 91 28 0f 	lds	r24, 0x0F28	; 0x800f28 <twi_masterBufferIndex>
    1d04:	86 17       	cp	r24, r22
    1d06:	10 f4       	brcc	.+4      	; 0x1d0c <twi_readFrom.part.0.constprop.183+0x68>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:201
    length = twi_masterBufferIndex;
    1d08:	60 91 28 0f 	lds	r22, 0x0F28	; 0x800f28 <twi_masterBufferIndex>
    1d0c:	a5 e0       	ldi	r26, 0x05	; 5
    1d0e:	bf e0       	ldi	r27, 0x0F	; 15
    1d10:	e5 ee       	ldi	r30, 0xE5	; 229
    1d12:	fe e0       	ldi	r31, 0x0E	; 14
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:204

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    1d14:	80 e0       	ldi	r24, 0x00	; 0
    1d16:	86 13       	cpse	r24, r22
    1d18:	03 c0       	rjmp	.+6      	; 0x1d20 <twi_readFrom.part.0.constprop.183+0x7c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:209
    data[i] = twi_masterBuffer[i];
  }

  return length;
}
    1d1a:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:193
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    1d1c:	85 ee       	ldi	r24, 0xE5	; 229
    1d1e:	ea cf       	rjmp	.-44     	; 0x1cf4 <twi_readFrom.part.0.constprop.183+0x50>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:205
  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
    1d20:	9d 91       	ld	r25, X+
    1d22:	91 93       	st	Z+, r25
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:204

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    1d24:	8f 5f       	subi	r24, 0xFF	; 255
    1d26:	f7 cf       	rjmp	.-18     	; 0x1d16 <twi_readFrom.part.0.constprop.183+0x72>

00001d28 <TwoWire::beginTransmission(unsigned char) [clone .constprop.181]>:
_ZN7TwoWire17beginTransmissionEh.constprop.181():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:144
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    1d28:	91 e0       	ldi	r25, 0x01	; 1
    1d2a:	90 93 e4 0e 	sts	0x0EE4, r25	; 0x800ee4 <TwoWire::transmitting>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:146
  // set address of targeted slave
  txAddress = address;
    1d2e:	80 93 e3 0e 	sts	0x0EE3, r24	; 0x800ee3 <TwoWire::txAddress>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:148
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    1d32:	10 92 e2 0e 	sts	0x0EE2, r1	; 0x800ee2 <TwoWire::txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:149
  txBufferLength = 0;
    1d36:	10 92 e1 0e 	sts	0x0EE1, r1	; 0x800ee1 <TwoWire::txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:150
}
    1d3a:	08 95       	ret

00001d3c <LCDWIKI_KBV::Get_Width() const>:
_ZNK11LCDWIKI_KBV9Get_WidthEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:738

//get lcd width
int16_t LCDWIKI_KBV::Get_Width(void) const
{
	return width;
}
    1d3c:	fc 01       	movw	r30, r24
    1d3e:	82 89       	ldd	r24, Z+18	; 0x12
    1d40:	93 89       	ldd	r25, Z+19	; 0x13
    1d42:	08 95       	ret

00001d44 <LCDWIKI_KBV::Get_Height() const>:
_ZNK11LCDWIKI_KBV10Get_HeightEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:744

//get lcd height
int16_t LCDWIKI_KBV::Get_Height(void) const
{
	return height;
}
    1d44:	fc 01       	movw	r30, r24
    1d46:	84 89       	ldd	r24, Z+20	; 0x14
    1d48:	95 89       	ldd	r25, Z+21	; 0x15
    1d4a:	08 95       	ret

00001d4c <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.157]>:
_ZN12PubSubClient11writeStringEPKcPhj.constprop.157():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:524
    _state = MQTT_DISCONNECTED;
    _client->stop();
    lastInActivity = lastOutActivity = millis();
}

uint16_t PubSubClient::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    1d4c:	cf 93       	push	r28
    1d4e:	df 93       	push	r29
    1d50:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:527
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
    1d52:	fa 01       	movw	r30, r20
    1d54:	32 96       	adiw	r30, 0x02	; 2
    1d56:	e6 0f       	add	r30, r22
    1d58:	f7 1f       	adc	r31, r23
    1d5a:	dc 01       	movw	r26, r24
    1d5c:	9d 01       	movw	r18, r26
    1d5e:	2c 1b       	sub	r18, r28
    1d60:	3d 0b       	sbc	r19, r29
    1d62:	cf 01       	movw	r24, r30
    1d64:	86 1b       	sub	r24, r22
    1d66:	97 0b       	sbc	r25, r23
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:528
    while (*idp) {
    1d68:	4d 91       	ld	r20, X+
    1d6a:	44 23       	and	r20, r20
    1d6c:	11 f0       	breq	.+4      	; 0x1d72 <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.157]+0x26>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:529
        buf[pos++] = *idp++;
    1d6e:	41 93       	st	Z+, r20
    1d70:	f5 cf       	rjmp	.-22     	; 0x1d5c <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.157]+0x10>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:532
        i++;
    }
    buf[pos-i-2] = (i >> 8);
    1d72:	ac 01       	movw	r20, r24
    1d74:	42 1b       	sub	r20, r18
    1d76:	53 0b       	sbc	r21, r19
    1d78:	64 0f       	add	r22, r20
    1d7a:	75 1f       	adc	r23, r21
    1d7c:	fb 01       	movw	r30, r22
    1d7e:	32 97       	sbiw	r30, 0x02	; 2
    1d80:	30 83       	st	Z, r19
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:533
    buf[pos-i-1] = (i & 0xFF);
    1d82:	61 50       	subi	r22, 0x01	; 1
    1d84:	71 09       	sbc	r23, r1
    1d86:	fb 01       	movw	r30, r22
    1d88:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:535
    return pos;
}
    1d8a:	df 91       	pop	r29
    1d8c:	cf 91       	pop	r28
    1d8e:	08 95       	ret

00001d90 <TwoWire::read()>:
_ZN7TwoWire4readEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:249
int TwoWire::read(void)
{
  int value = -1;

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    1d90:	90 91 da 0e 	lds	r25, 0x0EDA	; 0x800eda <TwoWire::rxBufferIndex>
    1d94:	80 91 d9 0e 	lds	r24, 0x0ED9	; 0x800ed9 <TwoWire::rxBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:246
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
    1d98:	2f ef       	ldi	r18, 0xFF	; 255
    1d9a:	3f ef       	ldi	r19, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:249

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    1d9c:	98 17       	cp	r25, r24
    1d9e:	48 f4       	brcc	.+18     	; 0x1db2 <TwoWire::read()+0x22>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:250
    value = rxBuffer[rxBufferIndex];
    1da0:	e9 2f       	mov	r30, r25
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	eb 51       	subi	r30, 0x1B	; 27
    1da6:	f1 4f       	sbci	r31, 0xF1	; 241
    1da8:	20 81       	ld	r18, Z
    1daa:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:251
    ++rxBufferIndex;
    1dac:	9f 5f       	subi	r25, 0xFF	; 255
    1dae:	90 93 da 0e 	sts	0x0EDA, r25	; 0x800eda <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:255
  }

  return value;
}
    1db2:	c9 01       	movw	r24, r18
    1db4:	08 95       	ret

00001db6 <TwoWire::read() [clone .constprop.139]>:
_ZN7TwoWire4readEv.constprop.139():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:249
int TwoWire::read(void)
{
  int value = -1;

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    1db6:	90 91 da 0e 	lds	r25, 0x0EDA	; 0x800eda <TwoWire::rxBufferIndex>
    1dba:	80 91 d9 0e 	lds	r24, 0x0ED9	; 0x800ed9 <TwoWire::rxBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:246
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
    1dbe:	2f ef       	ldi	r18, 0xFF	; 255
    1dc0:	3f ef       	ldi	r19, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:249

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    1dc2:	98 17       	cp	r25, r24
    1dc4:	48 f4       	brcc	.+18     	; 0x1dd8 <TwoWire::read() [clone .constprop.139]+0x22>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:250
    value = rxBuffer[rxBufferIndex];
    1dc6:	e9 2f       	mov	r30, r25
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	eb 51       	subi	r30, 0x1B	; 27
    1dcc:	f1 4f       	sbci	r31, 0xF1	; 241
    1dce:	20 81       	ld	r18, Z
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:251
    ++rxBufferIndex;
    1dd2:	9f 5f       	subi	r25, 0xFF	; 255
    1dd4:	90 93 da 0e 	sts	0x0EDA, r25	; 0x800eda <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:255
  }

  return value;
}
    1dd8:	c9 01       	movw	r24, r18
    1dda:	08 95       	ret

00001ddc <TwoWire::available()>:
_ZN7TwoWire9availableEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:238
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
    1ddc:	80 91 d9 0e 	lds	r24, 0x0ED9	; 0x800ed9 <TwoWire::rxBufferLength>
    1de0:	90 91 da 0e 	lds	r25, 0x0EDA	; 0x800eda <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:239
}
    1de4:	89 1b       	sub	r24, r25
    1de6:	99 0b       	sbc	r25, r25
    1de8:	08 95       	ret

00001dea <TwoWire::onRequestService()>:
_ZN7TwoWire16onRequestServiceEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:314
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
  txBufferLength = 0;
  // alert user program
  user_onRequest();
}
    1dea:	08 95       	ret

00001dec <TwoWire::onReceiveService(unsigned char*, int)>:
_ZN7TwoWire16onReceiveServiceEPhi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:299
  // set rx iterator vars
  rxBufferIndex = 0;
  rxBufferLength = numBytes;
  // alert user program
  user_onReceive(numBytes);
}
    1dec:	08 95       	ret

00001dee <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.40]>:
_ZN13LCDWIKI_TOUCH10TP_Read_XYEh.constprop.40():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:114
   	return num; 
}

#define READ_TIMES 5 //the times for read
#define LOST_VAL 1          //
uint16_t LCDWIKI_TOUCH::TP_Read_XY(uint8_t xy)
    1dee:	ef 92       	push	r14
    1df0:	ff 92       	push	r15
    1df2:	0f 93       	push	r16
    1df4:	1f 93       	push	r17
    1df6:	cf 93       	push	r28
    1df8:	df 93       	push	r29
    1dfa:	00 d0       	rcall	.+0      	; 0x1dfc <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.40]+0xe>
    1dfc:	00 d0       	rcall	.+0      	; 0x1dfe <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.40]+0x10>
    1dfe:	00 d0       	rcall	.+0      	; 0x1e00 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.40]+0x12>
    1e00:	1f 92       	push	r1
    1e02:	cd b7       	in	r28, 0x3d	; 61
    1e04:	de b7       	in	r29, 0x3e	; 62
    1e06:	fe 01       	movw	r30, r28
    1e08:	31 96       	adiw	r30, 0x01	; 1
    1e0a:	ae 01       	movw	r20, r28
    1e0c:	45 5f       	subi	r20, 0xF5	; 245
    1e0e:	5f 4f       	sbci	r21, 0xFF	; 255
    1e10:	7f 01       	movw	r14, r30
TP_Read_ADC():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:84

uint16_t LCDWIKI_TOUCH::TP_Read_ADC(uint8_t cmd)
{
	uint16_t num=0; 
	uint8_t count=0; 
	TCS_LOW; 
    1e12:	20 91 a8 11 	lds	r18, 0x11A8	; 0x8011a8 <my_touch+0xf>
    1e16:	30 91 a9 11 	lds	r19, 0x11A9	; 0x8011a9 <my_touch+0x10>
    1e1a:	d9 01       	movw	r26, r18
    1e1c:	6c 91       	ld	r22, X
    1e1e:	90 91 b2 11 	lds	r25, 0x11B2	; 0x8011b2 <my_touch+0x19>
    1e22:	90 95       	com	r25
    1e24:	96 23       	and	r25, r22
    1e26:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:85
	TCLK_LOW;           
    1e28:	20 91 aa 11 	lds	r18, 0x11AA	; 0x8011aa <my_touch+0x11>
    1e2c:	30 91 ab 11 	lds	r19, 0x11AB	; 0x8011ab <my_touch+0x12>
    1e30:	d9 01       	movw	r26, r18
    1e32:	6c 91       	ld	r22, X
    1e34:	90 91 b3 11 	lds	r25, 0x11B3	; 0x8011b3 <my_touch+0x1a>
    1e38:	90 95       	com	r25
    1e3a:	96 23       	and	r25, r22
    1e3c:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:86
	TDIN_LOW;
    1e3e:	20 91 ae 11 	lds	r18, 0x11AE	; 0x8011ae <my_touch+0x15>
    1e42:	30 91 af 11 	lds	r19, 0x11AF	; 0x8011af <my_touch+0x16>
    1e46:	d9 01       	movw	r26, r18
    1e48:	6c 91       	ld	r22, X
    1e4a:	90 91 b5 11 	lds	r25, 0x11B5	; 0x8011b5 <my_touch+0x1c>
    1e4e:	90 95       	com	r25
    1e50:	96 23       	and	r25, r22
    1e52:	9c 93       	st	X, r25
    1e54:	28 e0       	ldi	r18, 0x08	; 8
    1e56:	30 e0       	ldi	r19, 0x00	; 0
_ZN13LCDWIKI_TOUCH10TP_Read_XYEh.constprop.40():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:63
	LCD_Set_Rotation(r);
}

void LCDWIKI_TOUCH::TP_Write_Byte(uint8_t data)
{
	uint8_t val = 0x80;
    1e58:	10 e8       	ldi	r17, 0x80	; 128
    1e5a:	60 91 ae 11 	lds	r22, 0x11AE	; 0x8011ae <my_touch+0x15>
    1e5e:	70 91 af 11 	lds	r23, 0x11AF	; 0x8011af <my_touch+0x16>
    1e62:	90 91 b5 11 	lds	r25, 0x11B5	; 0x8011b5 <my_touch+0x1c>
TP_Write_Byte():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:66
	while(val)
	{
		if(data&val)
    1e66:	08 2f       	mov	r16, r24
    1e68:	01 23       	and	r16, r17
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:68
		{
			TDIN_HIGH; 
    1e6a:	db 01       	movw	r26, r22
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:66
void LCDWIKI_TOUCH::TP_Write_Byte(uint8_t data)
{
	uint8_t val = 0x80;
	while(val)
	{
		if(data&val)
    1e6c:	09 f4       	brne	.+2      	; 0x1e70 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.40]+0x82>
    1e6e:	b1 c0       	rjmp	.+354    	; 0x1fd2 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.40]+0x1e4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:68
		{
			TDIN_HIGH; 
    1e70:	0c 91       	ld	r16, X
    1e72:	90 2b       	or	r25, r16
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:72
		}
		else
		{
			TDIN_LOW;
    1e74:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:74
		}
		TCLK_LOW;
    1e76:	60 91 aa 11 	lds	r22, 0x11AA	; 0x8011aa <my_touch+0x11>
    1e7a:	70 91 ab 11 	lds	r23, 0x11AB	; 0x8011ab <my_touch+0x12>
    1e7e:	db 01       	movw	r26, r22
    1e80:	0c 91       	ld	r16, X
    1e82:	90 91 b3 11 	lds	r25, 0x11B3	; 0x8011b3 <my_touch+0x1a>
    1e86:	90 95       	com	r25
    1e88:	90 23       	and	r25, r16
    1e8a:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:75
		TCLK_HIGH;
    1e8c:	60 91 aa 11 	lds	r22, 0x11AA	; 0x8011aa <my_touch+0x11>
    1e90:	70 91 ab 11 	lds	r23, 0x11AB	; 0x8011ab <my_touch+0x12>
    1e94:	db 01       	movw	r26, r22
    1e96:	9c 91       	ld	r25, X
    1e98:	00 91 b3 11 	lds	r16, 0x11B3	; 0x8011b3 <my_touch+0x1a>
    1e9c:	90 2b       	or	r25, r16
    1e9e:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:76
		val >>= 1;
    1ea0:	16 95       	lsr	r17
    1ea2:	21 50       	subi	r18, 0x01	; 1
    1ea4:	31 09       	sbc	r19, r1
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:64
}

void LCDWIKI_TOUCH::TP_Write_Byte(uint8_t data)
{
	uint8_t val = 0x80;
	while(val)
    1ea6:	c9 f6       	brne	.-78     	; 0x1e5a <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.40]+0x6c>
TP_Read_ADC():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:89
	TCS_LOW; 
	TCLK_LOW;           
	TDIN_LOW;
	TP_Write_Byte(cmd);
	//delay_us(6);              
	TCLK_LOW; 
    1ea8:	20 91 aa 11 	lds	r18, 0x11AA	; 0x8011aa <my_touch+0x11>
    1eac:	30 91 ab 11 	lds	r19, 0x11AB	; 0x8011ab <my_touch+0x12>
    1eb0:	d9 01       	movw	r26, r18
    1eb2:	6c 91       	ld	r22, X
    1eb4:	90 91 b3 11 	lds	r25, 0x11B3	; 0x8011b3 <my_touch+0x1a>
    1eb8:	90 95       	com	r25
    1eba:	96 23       	and	r25, r22
    1ebc:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:91
	delay_us(1); 
	TCLK_HIGH;
    1ebe:	20 91 aa 11 	lds	r18, 0x11AA	; 0x8011aa <my_touch+0x11>
    1ec2:	30 91 ab 11 	lds	r19, 0x11AB	; 0x8011ab <my_touch+0x12>
    1ec6:	d9 01       	movw	r26, r18
    1ec8:	9c 91       	ld	r25, X
    1eca:	60 91 b3 11 	lds	r22, 0x11B3	; 0x8011b3 <my_touch+0x1a>
    1ece:	96 2b       	or	r25, r22
    1ed0:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:92
	TCLK_LOW;
    1ed2:	20 91 aa 11 	lds	r18, 0x11AA	; 0x8011aa <my_touch+0x11>
    1ed6:	30 91 ab 11 	lds	r19, 0x11AB	; 0x8011ab <my_touch+0x12>
    1eda:	d9 01       	movw	r26, r18
    1edc:	6c 91       	ld	r22, X
    1ede:	90 91 b3 11 	lds	r25, 0x11B3	; 0x8011b3 <my_touch+0x1a>
    1ee2:	90 95       	com	r25
    1ee4:	96 23       	and	r25, r22
    1ee6:	9c 93       	st	X, r25
    1ee8:	60 e1       	ldi	r22, 0x10	; 16
_ZN13LCDWIKI_TOUCH10TP_Read_XYEh.constprop.40():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:82
	}
}

uint16_t LCDWIKI_TOUCH::TP_Read_ADC(uint8_t cmd)
{
	uint16_t num=0; 
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	20 e0       	ldi	r18, 0x00	; 0
TP_Read_ADC():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:95
	delay_us(1); 
	TCLK_HIGH;
	TCLK_LOW;
	for(count=0;count<16;count++)  
	{   
	    num<<=1;          
    1eee:	22 0f       	add	r18, r18
    1ef0:	33 1f       	adc	r19, r19
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:96
	    TCLK_LOW;                         
    1ef2:	00 91 aa 11 	lds	r16, 0x11AA	; 0x8011aa <my_touch+0x11>
    1ef6:	10 91 ab 11 	lds	r17, 0x11AB	; 0x8011ab <my_touch+0x12>
    1efa:	d8 01       	movw	r26, r16
    1efc:	7c 91       	ld	r23, X
    1efe:	90 91 b3 11 	lds	r25, 0x11B3	; 0x8011b3 <my_touch+0x1a>
    1f02:	90 95       	com	r25
    1f04:	97 23       	and	r25, r23
    1f06:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:97
	    TCLK_HIGH;
    1f08:	00 91 aa 11 	lds	r16, 0x11AA	; 0x8011aa <my_touch+0x11>
    1f0c:	10 91 ab 11 	lds	r17, 0x11AB	; 0x8011ab <my_touch+0x12>
    1f10:	d8 01       	movw	r26, r16
    1f12:	9c 91       	ld	r25, X
    1f14:	70 91 b3 11 	lds	r23, 0x11B3	; 0x8011b3 <my_touch+0x1a>
    1f18:	97 2b       	or	r25, r23
    1f1a:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:98
	    if(TDOUT_STATE)
    1f1c:	00 91 ac 11 	lds	r16, 0x11AC	; 0x8011ac <my_touch+0x13>
    1f20:	10 91 ad 11 	lds	r17, 0x11AD	; 0x8011ad <my_touch+0x14>
    1f24:	d8 01       	movw	r26, r16
    1f26:	9c 91       	ld	r25, X
    1f28:	70 91 b4 11 	lds	r23, 0x11B4	; 0x8011b4 <my_touch+0x1b>
    1f2c:	97 23       	and	r25, r23
    1f2e:	11 f0       	breq	.+4      	; 0x1f34 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.40]+0x146>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:100
	    {
	         num += 1;                  
    1f30:	2f 5f       	subi	r18, 0xFF	; 255
    1f32:	3f 4f       	sbci	r19, 0xFF	; 255
    1f34:	61 50       	subi	r22, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:93
	//delay_us(6);              
	TCLK_LOW; 
	delay_us(1); 
	TCLK_HIGH;
	TCLK_LOW;
	for(count=0;count<16;count++)  
    1f36:	d9 f6       	brne	.-74     	; 0x1eee <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.40]+0x100>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:108
		{
			num += 0; 
		}
	}
	num>>=4;   // the high 12 bits is valid
    TCS_HIGH;   
    1f38:	60 91 a8 11 	lds	r22, 0x11A8	; 0x8011a8 <my_touch+0xf>
    1f3c:	70 91 a9 11 	lds	r23, 0x11A9	; 0x8011a9 <my_touch+0x10>
    1f40:	db 01       	movw	r26, r22
    1f42:	9c 91       	ld	r25, X
    1f44:	10 91 b2 11 	lds	r17, 0x11B2	; 0x8011b2 <my_touch+0x19>
    1f48:	91 2b       	or	r25, r17
    1f4a:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:107
		else
		{
			num += 0; 
		}
	}
	num>>=4;   // the high 12 bits is valid
    1f4c:	94 e0       	ldi	r25, 0x04	; 4
    1f4e:	36 95       	lsr	r19
    1f50:	27 95       	ror	r18
    1f52:	9a 95       	dec	r25
    1f54:	e1 f7       	brne	.-8      	; 0x1f4e <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.40]+0x160>
_ZN13LCDWIKI_TOUCH10TP_Read_XYEh.constprop.40():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:122
 	uint16_t buf[READ_TIMES];
 	uint16_t sum=0;
 	uint16_t temp;    
 	for(i=0;i<READ_TIMES;i++)
 	{                                 
  		buf[i]=TP_Read_ADC(xy);            
    1f56:	d7 01       	movw	r26, r14
    1f58:	2d 93       	st	X+, r18
    1f5a:	3d 93       	st	X+, r19
    1f5c:	7d 01       	movw	r14, r26
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:120
{
 	uint16_t i, j;
 	uint16_t buf[READ_TIMES];
 	uint16_t sum=0;
 	uint16_t temp;    
 	for(i=0;i<READ_TIMES;i++)
    1f5e:	a4 17       	cp	r26, r20
    1f60:	b5 07       	cpc	r27, r21
    1f62:	09 f0       	breq	.+2      	; 0x1f66 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.40]+0x178>
    1f64:	56 cf       	rjmp	.-340    	; 0x1e12 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.40]+0x24>
    1f66:	cf 01       	movw	r24, r30
    1f68:	08 96       	adiw	r24, 0x08	; 8
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:82
	}
}

uint16_t LCDWIKI_TOUCH::TP_Read_ADC(uint8_t cmd)
{
	uint16_t num=0; 
    1f6a:	df 01       	movw	r26, r30
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:128
    }                                    
	for(i=0;i<READ_TIMES-1; i++)//Sort in ascending order
 	{
  		for(j=i+1;j<READ_TIMES;j++)
       	{
        	if(buf[i]>buf[j])
    1f6c:	20 81       	ld	r18, Z
    1f6e:	31 81       	ldd	r19, Z+1	; 0x01
    1f70:	12 96       	adiw	r26, 0x02	; 2
    1f72:	4d 91       	ld	r20, X+
    1f74:	5c 91       	ld	r21, X
    1f76:	13 97       	sbiw	r26, 0x03	; 3
    1f78:	42 17       	cp	r20, r18
    1f7a:	53 07       	cpc	r21, r19
    1f7c:	30 f4       	brcc	.+12     	; 0x1f8a <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.40]+0x19c>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:131
            {
             	temp=buf[i];
             	buf[i]=buf[j];
    1f7e:	51 83       	std	Z+1, r21	; 0x01
    1f80:	40 83       	st	Z, r20
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:132
             	buf[j]=temp;
    1f82:	13 96       	adiw	r26, 0x03	; 3
    1f84:	3c 93       	st	X, r19
    1f86:	2e 93       	st	-X, r18
    1f88:	12 97       	sbiw	r26, 0x02	; 2
    1f8a:	12 96       	adiw	r26, 0x02	; 2
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:126
 	{                                 
  		buf[i]=TP_Read_ADC(xy);            
    }                                    
	for(i=0;i<READ_TIMES-1; i++)//Sort in ascending order
 	{
  		for(j=i+1;j<READ_TIMES;j++)
    1f8c:	8a 17       	cp	r24, r26
    1f8e:	9b 07       	cpc	r25, r27
    1f90:	69 f7       	brne	.-38     	; 0x1f6c <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.40]+0x17e>
    1f92:	32 96       	adiw	r30, 0x02	; 2
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:124
 	uint16_t temp;    
 	for(i=0;i<READ_TIMES;i++)
 	{                                 
  		buf[i]=TP_Read_ADC(xy);            
    }                                    
	for(i=0;i<READ_TIMES-1; i++)//Sort in ascending order
    1f94:	e8 17       	cp	r30, r24
    1f96:	f9 07       	cpc	r31, r25
    1f98:	41 f7       	brne	.-48     	; 0x1f6a <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.40]+0x17c>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:138
          	}
      	}
  	}          
	for(i=LOST_VAL;i<READ_TIMES-LOST_VAL;i++) //Remove maximum and minimum values
	{
		sum+=buf[i];
    1f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f9e:	2d 81       	ldd	r18, Y+5	; 0x05
    1fa0:	3e 81       	ldd	r19, Y+6	; 0x06
    1fa2:	82 0f       	add	r24, r18
    1fa4:	93 1f       	adc	r25, r19
    1fa6:	2f 81       	ldd	r18, Y+7	; 0x07
    1fa8:	38 85       	ldd	r19, Y+8	; 0x08
    1faa:	82 0f       	add	r24, r18
    1fac:	93 1f       	adc	r25, r19
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:140
	}
	temp=sum/(READ_TIMES-2*LOST_VAL);
    1fae:	63 e0       	ldi	r22, 0x03	; 3
    1fb0:	70 e0       	ldi	r23, 0x00	; 0
    1fb2:	0e 94 09 8a 	call	0x11412	; 0x11412 <__udivmodhi4>
    1fb6:	cb 01       	movw	r24, r22
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:142
	return temp;   
} 
    1fb8:	2a 96       	adiw	r28, 0x0a	; 10
    1fba:	0f b6       	in	r0, 0x3f	; 63
    1fbc:	f8 94       	cli
    1fbe:	de bf       	out	0x3e, r29	; 62
    1fc0:	0f be       	out	0x3f, r0	; 63
    1fc2:	cd bf       	out	0x3d, r28	; 61
    1fc4:	df 91       	pop	r29
    1fc6:	cf 91       	pop	r28
    1fc8:	1f 91       	pop	r17
    1fca:	0f 91       	pop	r16
    1fcc:	ff 90       	pop	r15
    1fce:	ef 90       	pop	r14
    1fd0:	08 95       	ret
TP_Write_Byte():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:72
		{
			TDIN_HIGH; 
		}
		else
		{
			TDIN_LOW;
    1fd2:	0c 91       	ld	r16, X
    1fd4:	90 95       	com	r25
    1fd6:	90 23       	and	r25, r16
    1fd8:	4d cf       	rjmp	.-358    	; 0x1e74 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.40]+0x86>

00001fda <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:181
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    1fda:	fc 01       	movw	r30, r24
    1fdc:	53 8d       	ldd	r21, Z+27	; 0x1b
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:182
  tx_buffer_index_t tail = _tx_buffer_tail;
    1fde:	44 8d       	ldd	r20, Z+28	; 0x1c
    1fe0:	25 2f       	mov	r18, r21
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	84 2f       	mov	r24, r20
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:186
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    1fe8:	82 1b       	sub	r24, r18
    1fea:	93 0b       	sbc	r25, r19
    1fec:	54 17       	cp	r21, r20
    1fee:	10 f0       	brcs	.+4      	; 0x1ff4 <HardwareSerial::availableForWrite()+0x1a>
    1ff0:	cf 96       	adiw	r24, 0x3f	; 63
    1ff2:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:187
  return tail - head - 1;
    1ff4:	01 97       	sbiw	r24, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:188
}
    1ff6:	08 95       	ret

00001ff8 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:164
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{
    1ff8:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:166
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1ffa:	91 8d       	ldd	r25, Z+25	; 0x19
    1ffc:	82 8d       	ldd	r24, Z+26	; 0x1a
    1ffe:	98 17       	cp	r25, r24
    2000:	61 f0       	breq	.+24     	; 0x201a <HardwareSerial::read()+0x22>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:169
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    2002:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2004:	ae 0f       	add	r26, r30
    2006:	bf 2f       	mov	r27, r31
    2008:	b1 1d       	adc	r27, r1
    200a:	5d 96       	adiw	r26, 0x1d	; 29
    200c:	8c 91       	ld	r24, X
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:170
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    200e:	92 8d       	ldd	r25, Z+26	; 0x1a
    2010:	9f 5f       	subi	r25, 0xFF	; 255
    2012:	9f 73       	andi	r25, 0x3F	; 63
    2014:	92 8f       	std	Z+26, r25	; 0x1a
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:171
    return c;
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:167

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    201a:	8f ef       	ldi	r24, 0xFF	; 255
    201c:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:173
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    201e:	08 95       	ret

00002020 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:155
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
    2020:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:156
  if (_rx_buffer_head == _rx_buffer_tail) {
    2022:	91 8d       	ldd	r25, Z+25	; 0x19
    2024:	82 8d       	ldd	r24, Z+26	; 0x1a
    2026:	98 17       	cp	r25, r24
    2028:	31 f0       	breq	.+12     	; 0x2036 <HardwareSerial::peek()+0x16>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:159
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    202a:	82 8d       	ldd	r24, Z+26	; 0x1a
    202c:	e8 0f       	add	r30, r24
    202e:	f1 1d       	adc	r31, r1
    2030:	85 8d       	ldd	r24, Z+29	; 0x1d
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:157
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2036:	8f ef       	ldi	r24, 0xFF	; 255
    2038:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:161
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    203a:	08 95       	ret

0000203c <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:150
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    203c:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:151
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    203e:	91 8d       	ldd	r25, Z+25	; 0x19
    2040:	22 8d       	ldd	r18, Z+26	; 0x1a
    2042:	89 2f       	mov	r24, r25
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	80 5c       	subi	r24, 0xC0	; 192
    2048:	9f 4f       	sbci	r25, 0xFF	; 255
    204a:	82 1b       	sub	r24, r18
    204c:	91 09       	sbc	r25, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:152
}
    204e:	8f 73       	andi	r24, 0x3F	; 63
    2050:	99 27       	eor	r25, r25
    2052:	08 95       	ret

00002054 <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:82
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    2054:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:85
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    2056:	a4 8d       	ldd	r26, Z+28	; 0x1c
    2058:	a8 0f       	add	r26, r24
    205a:	b9 2f       	mov	r27, r25
    205c:	b1 1d       	adc	r27, r1
    205e:	a3 5a       	subi	r26, 0xA3	; 163
    2060:	bf 4f       	sbci	r27, 0xFF	; 255
    2062:	2c 91       	ld	r18, X
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:86
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    2064:	84 8d       	ldd	r24, Z+28	; 0x1c
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	01 96       	adiw	r24, 0x01	; 1
    206a:	8f 73       	andi	r24, 0x3F	; 63
    206c:	99 27       	eor	r25, r25
    206e:	84 8f       	std	Z+28, r24	; 0x1c
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:88

  *_udr = c;
    2070:	a6 89       	ldd	r26, Z+22	; 0x16
    2072:	b7 89       	ldd	r27, Z+23	; 0x17
    2074:	2c 93       	st	X, r18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:93

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  *_ucsra |= _BV(TXC0);
    2076:	a0 89       	ldd	r26, Z+16	; 0x10
    2078:	b1 89       	ldd	r27, Z+17	; 0x11
    207a:	8c 91       	ld	r24, X
    207c:	80 64       	ori	r24, 0x40	; 64
    207e:	8c 93       	st	X, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:95

  if (_tx_buffer_head == _tx_buffer_tail) {
    2080:	93 8d       	ldd	r25, Z+27	; 0x1b
    2082:	84 8d       	ldd	r24, Z+28	; 0x1c
    2084:	98 13       	cpse	r25, r24
    2086:	06 c0       	rjmp	.+12     	; 0x2094 <HardwareSerial::_tx_udr_empty_irq()+0x40>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:97
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
    2088:	02 88       	ldd	r0, Z+18	; 0x12
    208a:	f3 89       	ldd	r31, Z+19	; 0x13
    208c:	e0 2d       	mov	r30, r0
    208e:	80 81       	ld	r24, Z
    2090:	8f 7d       	andi	r24, 0xDF	; 223
    2092:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:99
  }
}
    2094:	08 95       	ret

00002096 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:211
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    2096:	ef 92       	push	r14
    2098:	ff 92       	push	r15
    209a:	0f 93       	push	r16
    209c:	1f 93       	push	r17
    209e:	cf 93       	push	r28
    20a0:	df 93       	push	r29
    20a2:	ec 01       	movw	r28, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:212
  _written = true;
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	88 8f       	std	Y+24, r24	; 0x18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:217
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    20a8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    20aa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    20ac:	98 13       	cpse	r25, r24
    20ae:	16 c0       	rjmp	.+44     	; 0x20dc <HardwareSerial::write(unsigned char)+0x46>
    20b0:	e8 89       	ldd	r30, Y+16	; 0x10
    20b2:	f9 89       	ldd	r31, Y+17	; 0x11
    20b4:	80 81       	ld	r24, Z
    20b6:	85 ff       	sbrs	r24, 5
    20b8:	11 c0       	rjmp	.+34     	; 0x20dc <HardwareSerial::write(unsigned char)+0x46>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:218
    *_udr = c;
    20ba:	ee 89       	ldd	r30, Y+22	; 0x16
    20bc:	ff 89       	ldd	r31, Y+23	; 0x17
    20be:	60 83       	st	Z, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:219
    *_ucsra |= _BV(TXC0);
    20c0:	e8 89       	ldd	r30, Y+16	; 0x10
    20c2:	f9 89       	ldd	r31, Y+17	; 0x11
    20c4:	80 81       	ld	r24, Z
    20c6:	80 64       	ori	r24, 0x40	; 64
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:242
  }

  _tx_buffer[_tx_buffer_head] = c;
  _tx_buffer_head = i;

  *_ucsrb |= _BV(UDRIE0);
    20c8:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:245
  
  return 1;
}
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	df 91       	pop	r29
    20d0:	cf 91       	pop	r28
    20d2:	1f 91       	pop	r17
    20d4:	0f 91       	pop	r16
    20d6:	ff 90       	pop	r15
    20d8:	ef 90       	pop	r14
    20da:	08 95       	ret
    20dc:	f6 2e       	mov	r15, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:222
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    *_ucsra |= _BV(TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    20de:	0b 8d       	ldd	r16, Y+27	; 0x1b
    20e0:	10 e0       	ldi	r17, 0x00	; 0
    20e2:	0f 5f       	subi	r16, 0xFF	; 255
    20e4:	1f 4f       	sbci	r17, 0xFF	; 255
    20e6:	0f 73       	andi	r16, 0x3F	; 63
    20e8:	11 27       	eor	r17, r17
    20ea:	e0 2e       	mov	r14, r16
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:226

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    20ec:	8c 8d       	ldd	r24, Y+28	; 0x1c
    20ee:	8e 11       	cpse	r24, r14
    20f0:	0c c0       	rjmp	.+24     	; 0x210a <HardwareSerial::write(unsigned char)+0x74>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:227
    if (bit_is_clear(SREG, SREG_I)) {
    20f2:	0f b6       	in	r0, 0x3f	; 63
    20f4:	07 fc       	sbrc	r0, 7
    20f6:	fa cf       	rjmp	.-12     	; 0x20ec <HardwareSerial::write(unsigned char)+0x56>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:232
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    20f8:	e8 89       	ldd	r30, Y+16	; 0x10
    20fa:	f9 89       	ldd	r31, Y+17	; 0x11
    20fc:	80 81       	ld	r24, Z
    20fe:	85 ff       	sbrs	r24, 5
    2100:	f5 cf       	rjmp	.-22     	; 0x20ec <HardwareSerial::write(unsigned char)+0x56>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:233
        _tx_udr_empty_irq();
    2102:	ce 01       	movw	r24, r28
    2104:	0e 94 2a 10 	call	0x2054	; 0x2054 <HardwareSerial::_tx_udr_empty_irq()>
    2108:	f1 cf       	rjmp	.-30     	; 0x20ec <HardwareSerial::write(unsigned char)+0x56>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:239
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    210a:	eb 8d       	ldd	r30, Y+27	; 0x1b
    210c:	ec 0f       	add	r30, r28
    210e:	fd 2f       	mov	r31, r29
    2110:	f1 1d       	adc	r31, r1
    2112:	e3 5a       	subi	r30, 0xA3	; 163
    2114:	ff 4f       	sbci	r31, 0xFF	; 255
    2116:	f0 82       	st	Z, r15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:240
  _tx_buffer_head = i;
    2118:	0b 8f       	std	Y+27, r16	; 0x1b
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:242

  *_ucsrb |= _BV(UDRIE0);
    211a:	ea 89       	ldd	r30, Y+18	; 0x12
    211c:	fb 89       	ldd	r31, Y+19	; 0x13
    211e:	80 81       	ld	r24, Z
    2120:	80 62       	ori	r24, 0x20	; 32
    2122:	d2 cf       	rjmp	.-92     	; 0x20c8 <HardwareSerial::write(unsigned char)+0x32>

00002124 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:191
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    2124:	cf 93       	push	r28
    2126:	df 93       	push	r29
    2128:	ec 01       	movw	r28, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:195
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    212a:	88 8d       	ldd	r24, Y+24	; 0x18
    212c:	88 23       	and	r24, r24
    212e:	b9 f0       	breq	.+46     	; 0x215e <HardwareSerial::flush()+0x3a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:198
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    2130:	aa 89       	ldd	r26, Y+18	; 0x12
    2132:	bb 89       	ldd	r27, Y+19	; 0x13
    2134:	e8 89       	ldd	r30, Y+16	; 0x10
    2136:	f9 89       	ldd	r31, Y+17	; 0x11
    2138:	8c 91       	ld	r24, X
    213a:	85 fd       	sbrc	r24, 5
    213c:	03 c0       	rjmp	.+6      	; 0x2144 <HardwareSerial::flush()+0x20>
    213e:	80 81       	ld	r24, Z
    2140:	86 fd       	sbrc	r24, 6
    2142:	0d c0       	rjmp	.+26     	; 0x215e <HardwareSerial::flush()+0x3a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:199
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    2144:	0f b6       	in	r0, 0x3f	; 63
    2146:	07 fc       	sbrc	r0, 7
    2148:	f7 cf       	rjmp	.-18     	; 0x2138 <HardwareSerial::flush()+0x14>
    214a:	8c 91       	ld	r24, X
    214c:	85 ff       	sbrs	r24, 5
    214e:	f2 cf       	rjmp	.-28     	; 0x2134 <HardwareSerial::flush()+0x10>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:203
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
    2150:	80 81       	ld	r24, Z
    2152:	85 ff       	sbrs	r24, 5
    2154:	ed cf       	rjmp	.-38     	; 0x2130 <HardwareSerial::flush()+0xc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:204
        _tx_udr_empty_irq();
    2156:	ce 01       	movw	r24, r28
    2158:	0e 94 2a 10 	call	0x2054	; 0x2054 <HardwareSerial::_tx_udr_empty_irq()>
    215c:	e9 cf       	rjmp	.-46     	; 0x2130 <HardwareSerial::flush()+0xc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:208
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    215e:	df 91       	pop	r29
    2160:	cf 91       	pop	r28
    2162:	08 95       	ret

00002164 <Serial0_available()>:
_Z17Serial0_availablev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    2164:	8c e2       	ldi	r24, 0x2C	; 44
    2166:	9f e0       	ldi	r25, 0x0F	; 15
    2168:	0e 94 1e 10 	call	0x203c	; 0x203c <HardwareSerial::available()>
    216c:	21 e0       	ldi	r18, 0x01	; 1
    216e:	89 2b       	or	r24, r25
    2170:	09 f4       	brne	.+2      	; 0x2174 <Serial0_available()+0x10>
    2172:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial0.cpp:77
}
    2174:	82 2f       	mov	r24, r18
    2176:	08 95       	ret

00002178 <serialEventRun()>:
_Z14serialEventRunv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:66
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    2178:	80 e0       	ldi	r24, 0x00	; 0
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	89 2b       	or	r24, r25
    217e:	29 f0       	breq	.+10     	; 0x218a <serialEventRun()+0x12>
    2180:	0e 94 b2 10 	call	0x2164	; 0x2164 <Serial0_available()>
    2184:	81 11       	cpse	r24, r1
    2186:	0e 94 00 00 	call	0	; 0x0 <__vectors>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:69
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    218a:	80 e0       	ldi	r24, 0x00	; 0
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	89 2b       	or	r24, r25
    2190:	49 f0       	breq	.+18     	; 0x21a4 <serialEventRun()+0x2c>
    2192:	80 e0       	ldi	r24, 0x00	; 0
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	89 2b       	or	r24, r25
    2198:	29 f0       	breq	.+10     	; 0x21a4 <serialEventRun()+0x2c>
    219a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    219e:	81 11       	cpse	r24, r1
    21a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:77
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
    21a4:	08 95       	ret

000021a6 <turnOffPWM>:
turnOffPWM():
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    21a6:	82 50       	subi	r24, 0x02	; 2
    21a8:	82 31       	cpi	r24, 0x12	; 18
    21aa:	08 f0       	brcs	.+2      	; 0x21ae <turnOffPWM+0x8>
    21ac:	5f c0       	rjmp	.+190    	; 0x226c <__stack+0x6d>
    21ae:	e8 2f       	mov	r30, r24
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	88 27       	eor	r24, r24
    21b4:	e1 52       	subi	r30, 0x21	; 33
    21b6:	ff 4e       	sbci	r31, 0xEF	; 239
    21b8:	8f 4f       	sbci	r24, 0xFF	; 255
    21ba:	0c 94 b2 8b 	jmp	0x11764	; 0x11764 <__tablejump2__>
    21be:	33 11       	cpse	r19, r3
    21c0:	37 11       	cpse	r19, r7
    21c2:	f1 10       	cpse	r15, r1
    21c4:	f7 10       	cpse	r15, r7
    21c6:	fb 10       	cpse	r15, r11
    21c8:	36 11       	cpse	r19, r6
    21ca:	ff 10       	cpse	r15, r15
    21cc:	05 11       	cpse	r16, r5
    21ce:	09 11       	cpse	r16, r9
    21d0:	0f 11       	cpse	r16, r15
    21d2:	13 11       	cpse	r17, r3
    21d4:	17 11       	cpse	r17, r7
    21d6:	1d 11       	cpse	r17, r13
    21d8:	21 11       	cpse	r18, r1
    21da:	36 11       	cpse	r19, r6
    21dc:	25 11       	cpse	r18, r5
    21de:	2b 11       	cpse	r18, r11
    21e0:	2f 11       	cpse	r18, r15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    21e2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    21e6:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    21e8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    21ec:	08 95       	ret
    21ee:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    21f2:	8f 7d       	andi	r24, 0xDF	; 223
    21f4:	f9 cf       	rjmp	.-14     	; 0x21e8 <turnOffPWM+0x42>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:92
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1C1)
      case TIMER1C:
        TCCR1A &= ~_BV(COM1C1);
    21f6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    21fa:	87 7f       	andi	r24, 0xF7	; 247
    21fc:	f5 cf       	rjmp	.-22     	; 0x21e8 <turnOffPWM+0x42>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
    21fe:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    2202:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    2204:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    2208:	08 95       	ret
    220a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    220e:	8f 7d       	andi	r24, 0xDF	; 223
    2210:	f9 cf       	rjmp	.-14     	; 0x2204 <__stack+0x5>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
    2212:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    2216:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:126
        TCCR3A &= ~_BV(COM3B1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
    2218:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    221c:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    221e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    2222:	8f 7d       	andi	r24, 0xDF	; 223
    2224:	f9 cf       	rjmp	.-14     	; 0x2218 <__stack+0x19>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:126
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
    2226:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    222a:	87 7f       	andi	r24, 0xF7	; 247
    222c:	f5 cf       	rjmp	.-22     	; 0x2218 <__stack+0x19>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:133
    #endif

    // Timer4
    #if defined(TCCR4A) && defined(COM4A1)
      case TIMER4A:
        TCCR4A &= ~_BV(COM4A1);
    222e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    2232:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:143
        TCCR4A &= ~_BV(COM4B1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
    2234:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    2238:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:138
        TCCR4A &= ~_BV(COM4A1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4B1)
      case  TIMER4B:
        TCCR4A &= ~_BV(COM4B1);
    223a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    223e:	8f 7d       	andi	r24, 0xDF	; 223
    2240:	f9 cf       	rjmp	.-14     	; 0x2234 <__stack+0x35>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:143
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
    2242:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    2246:	87 7f       	andi	r24, 0xF7	; 247
    2248:	f5 cf       	rjmp	.-22     	; 0x2234 <__stack+0x35>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:155
    #endif

    // Timer5
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
    224a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    224e:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
    2250:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    2254:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:158
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
    2256:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    225a:	8f 7d       	andi	r24, 0xDF	; 223
    225c:	f9 cf       	rjmp	.-14     	; 0x2250 <__stack+0x51>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
    225e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    2262:	87 7f       	andi	r24, 0xF7	; 247
    2264:	f5 cf       	rjmp	.-22     	; 0x2250 <__stack+0x51>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
    2266:	84 b5       	in	r24, 0x24	; 36
    2268:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    226a:	84 bd       	out	0x24, r24	; 36
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
    226c:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    226e:	84 b5       	in	r24, 0x24	; 36
    2270:	8f 7d       	andi	r24, 0xDF	; 223
    2272:	fb cf       	rjmp	.-10     	; 0x226a <__stack+0x6b>

00002274 <digitalWrite>:
digitalWrite():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2274:	1f 93       	push	r17
    2276:	cf 93       	push	r28
    2278:	df 93       	push	r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
    227a:	28 2f       	mov	r18, r24
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	f9 01       	movw	r30, r18
    2280:	ed 58       	subi	r30, 0x8D	; 141
    2282:	f9 4e       	sbci	r31, 0xE9	; 233
    2284:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    2286:	f9 01       	movw	r30, r18
    2288:	ec 54       	subi	r30, 0x4C	; 76
    228a:	f4 4e       	sbci	r31, 0xE4	; 228
    228c:	d4 91       	lpm	r29, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    228e:	f9 01       	movw	r30, r18
    2290:	e6 50       	subi	r30, 0x06	; 6
    2292:	f4 4e       	sbci	r31, 0xE4	; 228
    2294:	c4 91       	lpm	r28, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    2296:	cc 23       	and	r28, r28
    2298:	a9 f0       	breq	.+42     	; 0x22c4 <digitalWrite+0x50>
    229a:	16 2f       	mov	r17, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    229c:	81 11       	cpse	r24, r1
    229e:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <turnOffPWM>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
    22a2:	ec 2f       	mov	r30, r28
    22a4:	f0 e0       	ldi	r31, 0x00	; 0
    22a6:	ee 0f       	add	r30, r30
    22a8:	ff 1f       	adc	r31, r31
    22aa:	e6 51       	subi	r30, 0x16	; 22
    22ac:	f4 4e       	sbci	r31, 0xE4	; 228
    22ae:	a5 91       	lpm	r26, Z+
    22b0:	b4 91       	lpm	r27, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    22b2:	8f b7       	in	r24, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:203
  cli();
    22b4:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    22b6:	ec 91       	ld	r30, X
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    22b8:	11 11       	cpse	r17, r1
    22ba:	08 c0       	rjmp	.+16     	; 0x22cc <digitalWrite+0x58>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    22bc:	d0 95       	com	r29
    22be:	de 23       	and	r29, r30
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    22c0:	dc 93       	st	X, r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    22c2:	8f bf       	out	0x3f, r24	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:212
}
    22c4:	df 91       	pop	r29
    22c6:	cf 91       	pop	r28
    22c8:	1f 91       	pop	r17
    22ca:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    22cc:	de 2b       	or	r29, r30
    22ce:	f8 cf       	rjmp	.-16     	; 0x22c0 <digitalWrite+0x4c>

000022d0 <EEPROM_CAT25::endCommand() [clone .constprop.107]>:
_ZN12EEPROM_CAT2510endCommandEv.constprop.107():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:215
  _spi->transfer((uint8_t)(address & 0xFF));
}

void EEPROM_CAT25::endCommand(void)
{
  digitalWrite(_chipSelect, HIGH);
    22d0:	61 e0       	ldi	r22, 0x01	; 1
    22d2:	80 91 78 10 	lds	r24, 0x1078	; 0x801078 <SROM+0xa>
    22d6:	0c 94 3a 11 	jmp	0x2274	; 0x2274 <digitalWrite>

000022da <TwoWire::begin() [clone .constprop.73]>:
_ZN7TwoWire5beginEv.constprop.73():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:57

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
    22da:	10 92 da 0e 	sts	0x0EDA, r1	; 0x800eda <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:58
  rxBufferLength = 0;
    22de:	10 92 d9 0e 	sts	0x0ED9, r1	; 0x800ed9 <TwoWire::rxBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:60

  txBufferIndex = 0;
    22e2:	10 92 e2 0e 	sts	0x0EE2, r1	; 0x800ee2 <TwoWire::txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:61
  txBufferLength = 0;
    22e6:	10 92 e1 0e 	sts	0x0EE1, r1	; 0x800ee1 <TwoWire::txBufferLength>
twi_init():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:71
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
    22ea:	10 92 2b 0f 	sts	0x0F2B, r1	; 0x800f2b <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:72
  twi_sendStop = true; // default value
    22ee:	81 e0       	ldi	r24, 0x01	; 1
    22f0:	80 93 2a 0f 	sts	0x0F2A, r24	; 0x800f2a <twi_sendStop>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:73
  twi_inRepStart = false;
    22f4:	10 92 25 0f 	sts	0x0F25, r1	; 0x800f25 <twi_inRepStart>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:76

  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
    22f8:	61 e0       	ldi	r22, 0x01	; 1
    22fa:	83 e1       	ldi	r24, 0x13	; 19
    22fc:	0e 94 3a 11 	call	0x2274	; 0x2274 <digitalWrite>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:77
  digitalWrite(SCL, 1);
    2300:	61 e0       	ldi	r22, 0x01	; 1
    2302:	82 e1       	ldi	r24, 0x12	; 18
    2304:	0e 94 3a 11 	call	0x2274	; 0x2274 <digitalWrite>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:80

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
    2308:	e9 eb       	ldi	r30, 0xB9	; 185
    230a:	f0 e0       	ldi	r31, 0x00	; 0
    230c:	80 81       	ld	r24, Z
    230e:	8e 7f       	andi	r24, 0xFE	; 254
    2310:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:81
  cbi(TWSR, TWPS1);
    2312:	80 81       	ld	r24, Z
    2314:	8d 7f       	andi	r24, 0xFD	; 253
    2316:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:82
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
    2318:	88 e4       	ldi	r24, 0x48	; 72
    231a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:90
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    231e:	85 e4       	ldi	r24, 0x45	; 69
    2320:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
twi_attachSlaveTxEvent():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:344
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
    2324:	85 ef       	ldi	r24, 0xF5	; 245
    2326:	9e e0       	ldi	r25, 0x0E	; 14
    2328:	90 93 cd 0e 	sts	0x0ECD, r25	; 0x800ecd <twi_onSlaveTransmit+0x1>
    232c:	80 93 cc 0e 	sts	0x0ECC, r24	; 0x800ecc <twi_onSlaveTransmit>
twi_attachSlaveRxEvent():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:333
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
  twi_onSlaveReceive = function;
    2330:	86 ef       	ldi	r24, 0xF6	; 246
    2332:	9e e0       	ldi	r25, 0x0E	; 14
    2334:	90 93 cb 0e 	sts	0x0ECB, r25	; 0x800ecb <twi_onSlaveReceive+0x1>
    2338:	80 93 ca 0e 	sts	0x0ECA, r24	; 0x800eca <twi_onSlaveReceive>
_ZN7TwoWire5beginEv.constprop.73():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:66

  twi_init();
  twi_attachSlaveTxEvent(onRequestService); // default callback must exist
  twi_attachSlaveRxEvent(onReceiveService); // default callback must exist
}
    233c:	08 95       	ret

0000233e <pinMode>:
pinMode():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    233e:	cf 93       	push	r28
    2340:	df 93       	push	r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	fc 01       	movw	r30, r24
    2346:	ec 54       	subi	r30, 0x4C	; 76
    2348:	f4 4e       	sbci	r31, 0xE4	; 228
    234a:	24 91       	lpm	r18, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    234c:	86 50       	subi	r24, 0x06	; 6
    234e:	94 4e       	sbci	r25, 0xE4	; 228
    2350:	fc 01       	movw	r30, r24
    2352:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    2354:	88 23       	and	r24, r24
    2356:	c9 f0       	breq	.+50     	; 0x238a <pinMode+0x4c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	88 0f       	add	r24, r24
    235c:	99 1f       	adc	r25, r25
    235e:	fc 01       	movw	r30, r24
    2360:	ed 59       	subi	r30, 0x9D	; 157
    2362:	f9 4e       	sbci	r31, 0xE9	; 233
    2364:	a5 91       	lpm	r26, Z+
    2366:	b4 91       	lpm	r27, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    2368:	fc 01       	movw	r30, r24
    236a:	e6 51       	subi	r30, 0x16	; 22
    236c:	f4 4e       	sbci	r31, 0xE4	; 228
    236e:	c5 91       	lpm	r28, Z+
    2370:	d4 91       	lpm	r29, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    2372:	61 11       	cpse	r22, r1
    2374:	0d c0       	rjmp	.+26     	; 0x2390 <pinMode+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    2376:	9f b7       	in	r25, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:43
    cli();
    2378:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    237a:	8c 91       	ld	r24, X
    237c:	20 95       	com	r18
    237e:	82 23       	and	r24, r18
    2380:	8c 93       	st	X, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    2382:	88 81       	ld	r24, Y
    2384:	28 23       	and	r18, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    2386:	28 83       	st	Y, r18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    2388:	9f bf       	out	0x3f, r25	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    238a:	df 91       	pop	r29
    238c:	cf 91       	pop	r28
    238e:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    2390:	62 30       	cpi	r22, 0x02	; 2
    2392:	51 f4       	brne	.+20     	; 0x23a8 <pinMode+0x6a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    2394:	9f b7       	in	r25, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:49
    cli();
    2396:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    2398:	3c 91       	ld	r19, X
    239a:	82 2f       	mov	r24, r18
    239c:	80 95       	com	r24
    239e:	83 23       	and	r24, r19
    23a0:	8c 93       	st	X, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    23a2:	e8 81       	ld	r30, Y
    23a4:	2e 2b       	or	r18, r30
    23a6:	ef cf       	rjmp	.-34     	; 0x2386 <pinMode+0x48>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    23a8:	8f b7       	in	r24, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:55
    cli();
    23aa:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    23ac:	ec 91       	ld	r30, X
    23ae:	2e 2b       	or	r18, r30
    23b0:	2c 93       	st	X, r18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    23b2:	8f bf       	out	0x3f, r24	; 63
    23b4:	ea cf       	rjmp	.-44     	; 0x238a <pinMode+0x4c>

000023b6 <micros>:
micros():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:91
  return m;
}

unsigned long micros() {
  unsigned long m;
  uint8_t oldSREG = SREG;
    23b6:	3f b7       	in	r19, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:96
  // t will be the number where the timer0 counter stopped
  uint8_t t;

  // Stop all interrupts
  cli();
    23b8:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:97
  m = timer0_overflow_count;
    23ba:	80 91 c4 0c 	lds	r24, 0x0CC4	; 0x800cc4 <timer0_overflow_count>
    23be:	90 91 c5 0c 	lds	r25, 0x0CC5	; 0x800cc5 <timer0_overflow_count+0x1>
    23c2:	a0 91 c6 0c 	lds	r26, 0x0CC6	; 0x800cc6 <timer0_overflow_count+0x2>
    23c6:	b0 91 c7 0c 	lds	r27, 0x0CC7	; 0x800cc7 <timer0_overflow_count+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:101

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
    23ca:	26 b5       	in	r18, 0x26	; 38
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:110
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
    23cc:	a8 9b       	sbis	0x15, 0	; 21
    23ce:	05 c0       	rjmp	.+10     	; 0x23da <micros+0x24>
    23d0:	2f 3f       	cpi	r18, 0xFF	; 255
    23d2:	19 f0       	breq	.+6      	; 0x23da <micros+0x24>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:111
    m++;
    23d4:	01 96       	adiw	r24, 0x01	; 1
    23d6:	a1 1d       	adc	r26, r1
    23d8:	b1 1d       	adc	r27, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:117
#else
  if ((TIFR & _BV(TOV0)) && (t < 255))
    m++;
#endif
  // Restore SREG
  SREG = oldSREG;
    23da:	3f bf       	out	0x3f, r19	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:169
#else
  // 32 MHz, 24 MHz, 16 MHz, 8 MHz, 4 MHz, 1 MHz
  // Shift by 8 to the left (multiply by 256) so t (which is 1 byte in size) can fit in 
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    23dc:	ba 2f       	mov	r27, r26
    23de:	a9 2f       	mov	r26, r25
    23e0:	98 2f       	mov	r25, r24
    23e2:	88 27       	eor	r24, r24
    23e4:	bc 01       	movw	r22, r24
    23e6:	cd 01       	movw	r24, r26
    23e8:	62 0f       	add	r22, r18
    23ea:	71 1d       	adc	r23, r1
    23ec:	81 1d       	adc	r24, r1
    23ee:	91 1d       	adc	r25, r1
    23f0:	42 e0       	ldi	r20, 0x02	; 2
    23f2:	66 0f       	add	r22, r22
    23f4:	77 1f       	adc	r23, r23
    23f6:	88 1f       	adc	r24, r24
    23f8:	99 1f       	adc	r25, r25
    23fa:	4a 95       	dec	r20
    23fc:	d1 f7       	brne	.-12     	; 0x23f2 <micros+0x3c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:171
#endif
}
    23fe:	08 95       	ret

00002400 <delay>:
delay():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:174

void delay(unsigned long ms)
{
    2400:	8f 92       	push	r8
    2402:	9f 92       	push	r9
    2404:	af 92       	push	r10
    2406:	bf 92       	push	r11
    2408:	cf 92       	push	r12
    240a:	df 92       	push	r13
    240c:	ef 92       	push	r14
    240e:	ff 92       	push	r15
    2410:	6b 01       	movw	r12, r22
    2412:	7c 01       	movw	r14, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:175
  uint32_t start = micros();
    2414:	0e 94 db 11 	call	0x23b6	; 0x23b6 <micros>
    2418:	4b 01       	movw	r8, r22
    241a:	5c 01       	movw	r10, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:179

  while (ms > 0) {
    yield();
    while ( ms > 0 && (micros() - start) >= 1000) {
    241c:	c1 14       	cp	r12, r1
    241e:	d1 04       	cpc	r13, r1
    2420:	e1 04       	cpc	r14, r1
    2422:	f1 04       	cpc	r15, r1
    2424:	b9 f0       	breq	.+46     	; 0x2454 <delay+0x54>
    2426:	0e 94 db 11 	call	0x23b6	; 0x23b6 <micros>
    242a:	68 19       	sub	r22, r8
    242c:	79 09       	sbc	r23, r9
    242e:	8a 09       	sbc	r24, r10
    2430:	9b 09       	sbc	r25, r11
    2432:	68 3e       	cpi	r22, 0xE8	; 232
    2434:	73 40       	sbci	r23, 0x03	; 3
    2436:	81 05       	cpc	r24, r1
    2438:	91 05       	cpc	r25, r1
    243a:	80 f3       	brcs	.-32     	; 0x241c <delay+0x1c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:180
      ms--;
    243c:	21 e0       	ldi	r18, 0x01	; 1
    243e:	c2 1a       	sub	r12, r18
    2440:	d1 08       	sbc	r13, r1
    2442:	e1 08       	sbc	r14, r1
    2444:	f1 08       	sbc	r15, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:181
      start += 1000;
    2446:	88 ee       	ldi	r24, 0xE8	; 232
    2448:	88 0e       	add	r8, r24
    244a:	83 e0       	ldi	r24, 0x03	; 3
    244c:	98 1e       	adc	r9, r24
    244e:	a1 1c       	adc	r10, r1
    2450:	b1 1c       	adc	r11, r1
    2452:	e4 cf       	rjmp	.-56     	; 0x241c <delay+0x1c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:184
    }
  }
}
    2454:	ff 90       	pop	r15
    2456:	ef 90       	pop	r14
    2458:	df 90       	pop	r13
    245a:	cf 90       	pop	r12
    245c:	bf 90       	pop	r11
    245e:	af 90       	pop	r10
    2460:	9f 90       	pop	r9
    2462:	8f 90       	pop	r8
    2464:	08 95       	ret

00002466 <LCDWIKI_KBV::reset() [clone .constprop.81]>:
_ZN11LCDWIKI_KBV5resetEv.constprop.81():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:250
void LCDWIKI_KBV::reset(void)
{
//	have_reset = 1;
//    setWriteDir();
//Set all control bits to idle state
    CS_IDLE;
    2466:	e0 91 e5 11 	lds	r30, 0x11E5	; 0x8011e5 <my_lcd+0x2e>
    246a:	f0 91 e6 11 	lds	r31, 0x11E6	; 0x8011e6 <my_lcd+0x2f>
    246e:	80 81       	ld	r24, Z
    2470:	90 91 ed 11 	lds	r25, 0x11ED	; 0x8011ed <my_lcd+0x36>
    2474:	89 2b       	or	r24, r25
    2476:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:251
    RD_IDLE;
    2478:	e0 91 eb 11 	lds	r30, 0x11EB	; 0x8011eb <my_lcd+0x34>
    247c:	f0 91 ec 11 	lds	r31, 0x11EC	; 0x8011ec <my_lcd+0x35>
    2480:	80 81       	ld	r24, Z
    2482:	90 91 f0 11 	lds	r25, 0x11F0	; 0x8011f0 <my_lcd+0x39>
    2486:	89 2b       	or	r24, r25
    2488:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:252
    WR_IDLE;
    248a:	e0 91 e9 11 	lds	r30, 0x11E9	; 0x8011e9 <my_lcd+0x32>
    248e:	f0 91 ea 11 	lds	r31, 0x11EA	; 0x8011ea <my_lcd+0x33>
    2492:	80 81       	ld	r24, Z
    2494:	90 91 ef 11 	lds	r25, 0x11EF	; 0x8011ef <my_lcd+0x38>
    2498:	89 2b       	or	r24, r25
    249a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:262
  digitalWrite(5, HIGH);
//  delay(100);
  //digitalWrite(5, LOW);
 // delay(100);
#else
  if(_reset) 
    249c:	80 91 f5 11 	lds	r24, 0x11F5	; 0x8011f5 <my_lcd+0x3e>
    24a0:	88 23       	and	r24, r24
    24a2:	71 f0       	breq	.+28     	; 0x24c0 <LCDWIKI_KBV::reset() [clone .constprop.81]+0x5a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:264
  {
    digitalWrite(_reset, LOW);
    24a4:	60 e0       	ldi	r22, 0x00	; 0
    24a6:	0e 94 3a 11 	call	0x2274	; 0x2274 <digitalWrite>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:265
    delay(2);
    24aa:	62 e0       	ldi	r22, 0x02	; 2
    24ac:	70 e0       	ldi	r23, 0x00	; 0
    24ae:	80 e0       	ldi	r24, 0x00	; 0
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	0e 94 00 12 	call	0x2400	; 0x2400 <delay>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:266
    digitalWrite(_reset, HIGH);
    24b6:	61 e0       	ldi	r22, 0x01	; 1
    24b8:	80 91 f5 11 	lds	r24, 0x11F5	; 0x8011f5 <my_lcd+0x3e>
    24bc:	0e 94 3a 11 	call	0x2274	; 0x2274 <digitalWrite>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:272
//	delay(100);
	//digitalWrite(_reset, LOW);
	//delay(100);
  }
#endif
  CS_ACTIVE;
    24c0:	e0 91 e5 11 	lds	r30, 0x11E5	; 0x8011e5 <my_lcd+0x2e>
    24c4:	f0 91 e6 11 	lds	r31, 0x11E6	; 0x8011e6 <my_lcd+0x2f>
    24c8:	80 81       	ld	r24, Z
    24ca:	90 91 f1 11 	lds	r25, 0x11F1	; 0x8011f1 <my_lcd+0x3a>
    24ce:	89 23       	and	r24, r25
    24d0:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:273
  CD_COMMAND;
    24d2:	e0 91 e7 11 	lds	r30, 0x11E7	; 0x8011e7 <my_lcd+0x30>
    24d6:	f0 91 e8 11 	lds	r31, 0x11E8	; 0x8011e8 <my_lcd+0x31>
    24da:	80 81       	ld	r24, Z
    24dc:	90 91 f2 11 	lds	r25, 0x11F2	; 0x8011f2 <my_lcd+0x3b>
    24e0:	89 23       	and	r24, r25
    24e2:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:274
  write8(0x00);
    24e4:	12 b8       	out	0x02, r1	; 2
    24e6:	e0 91 e9 11 	lds	r30, 0x11E9	; 0x8011e9 <my_lcd+0x32>
    24ea:	f0 91 ea 11 	lds	r31, 0x11EA	; 0x8011ea <my_lcd+0x33>
    24ee:	80 81       	ld	r24, Z
    24f0:	90 91 f3 11 	lds	r25, 0x11F3	; 0x8011f3 <my_lcd+0x3c>
    24f4:	89 23       	and	r24, r25
    24f6:	80 83       	st	Z, r24
    24f8:	e0 91 e9 11 	lds	r30, 0x11E9	; 0x8011e9 <my_lcd+0x32>
    24fc:	f0 91 ea 11 	lds	r31, 0x11EA	; 0x8011ea <my_lcd+0x33>
    2500:	80 81       	ld	r24, Z
    2502:	90 91 ef 11 	lds	r25, 0x11EF	; 0x8011ef <my_lcd+0x38>
    2506:	89 2b       	or	r24, r25
    2508:	80 83       	st	Z, r24
    250a:	83 e0       	ldi	r24, 0x03	; 3
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:277
  for(uint8_t i=0; i<3; i++)
  {
  	WR_STROBE; // Three extra 0x00s
    250c:	e0 91 e9 11 	lds	r30, 0x11E9	; 0x8011e9 <my_lcd+0x32>
    2510:	f0 91 ea 11 	lds	r31, 0x11EA	; 0x8011ea <my_lcd+0x33>
    2514:	90 81       	ld	r25, Z
    2516:	20 91 f3 11 	lds	r18, 0x11F3	; 0x8011f3 <my_lcd+0x3c>
    251a:	92 23       	and	r25, r18
    251c:	90 83       	st	Z, r25
    251e:	e0 91 e9 11 	lds	r30, 0x11E9	; 0x8011e9 <my_lcd+0x32>
    2522:	f0 91 ea 11 	lds	r31, 0x11EA	; 0x8011ea <my_lcd+0x33>
    2526:	90 81       	ld	r25, Z
    2528:	20 91 ef 11 	lds	r18, 0x11EF	; 0x8011ef <my_lcd+0x38>
    252c:	92 2b       	or	r25, r18
    252e:	90 83       	st	Z, r25
    2530:	81 50       	subi	r24, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:275
  }
#endif
  CS_ACTIVE;
  CD_COMMAND;
  write8(0x00);
  for(uint8_t i=0; i<3; i++)
    2532:	61 f7       	brne	.-40     	; 0x250c <LCDWIKI_KBV::reset() [clone .constprop.81]+0xa6>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:279
  {
  	WR_STROBE; // Three extra 0x00s
  }
  CS_IDLE;
    2534:	e0 91 e5 11 	lds	r30, 0x11E5	; 0x8011e5 <my_lcd+0x2e>
    2538:	f0 91 e6 11 	lds	r31, 0x11E6	; 0x8011e6 <my_lcd+0x2f>
    253c:	80 81       	ld	r24, Z
    253e:	90 91 ed 11 	lds	r25, 0x11ED	; 0x8011ed <my_lcd+0x36>
    2542:	89 2b       	or	r24, r25
    2544:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:280
}
    2546:	08 95       	ret

00002548 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.79]>:
_ZN11LCDWIKI_KBV8Read_RegEja.constprop.79():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:491
{
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3);
}

//read value from lcd register 
uint16_t LCDWIKI_KBV::Read_Reg(uint16_t reg, int8_t index)
    2548:	cf 93       	push	r28
    254a:	c6 2f       	mov	r28, r22
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:499
    uint8_t low;
//  if (!have_reset)
 // {
 //     reset();
//  }
	CS_ACTIVE;
    254c:	e0 91 e5 11 	lds	r30, 0x11E5	; 0x8011e5 <my_lcd+0x2e>
    2550:	f0 91 e6 11 	lds	r31, 0x11E6	; 0x8011e6 <my_lcd+0x2f>
    2554:	90 81       	ld	r25, Z
    2556:	20 91 f1 11 	lds	r18, 0x11F1	; 0x8011f1 <my_lcd+0x3a>
    255a:	92 23       	and	r25, r18
    255c:	90 83       	st	Z, r25
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:500
    writeCmd16(reg);
    255e:	e0 91 e7 11 	lds	r30, 0x11E7	; 0x8011e7 <my_lcd+0x30>
    2562:	f0 91 e8 11 	lds	r31, 0x11E8	; 0x8011e8 <my_lcd+0x31>
    2566:	90 81       	ld	r25, Z
    2568:	20 91 f2 11 	lds	r18, 0x11F2	; 0x8011f2 <my_lcd+0x3b>
    256c:	92 23       	and	r25, r18
    256e:	90 83       	st	Z, r25
    2570:	12 b8       	out	0x02, r1	; 2
    2572:	e0 91 e9 11 	lds	r30, 0x11E9	; 0x8011e9 <my_lcd+0x32>
    2576:	f0 91 ea 11 	lds	r31, 0x11EA	; 0x8011ea <my_lcd+0x33>
    257a:	90 81       	ld	r25, Z
    257c:	20 91 f3 11 	lds	r18, 0x11F3	; 0x8011f3 <my_lcd+0x3c>
    2580:	92 23       	and	r25, r18
    2582:	90 83       	st	Z, r25
    2584:	e0 91 e9 11 	lds	r30, 0x11E9	; 0x8011e9 <my_lcd+0x32>
    2588:	f0 91 ea 11 	lds	r31, 0x11EA	; 0x8011ea <my_lcd+0x33>
    258c:	90 81       	ld	r25, Z
    258e:	20 91 ef 11 	lds	r18, 0x11EF	; 0x8011ef <my_lcd+0x38>
    2592:	92 2b       	or	r25, r18
    2594:	90 83       	st	Z, r25
    2596:	82 b9       	out	0x02, r24	; 2
    2598:	e0 91 e9 11 	lds	r30, 0x11E9	; 0x8011e9 <my_lcd+0x32>
    259c:	f0 91 ea 11 	lds	r31, 0x11EA	; 0x8011ea <my_lcd+0x33>
    25a0:	80 81       	ld	r24, Z
    25a2:	90 91 f3 11 	lds	r25, 0x11F3	; 0x8011f3 <my_lcd+0x3c>
    25a6:	89 23       	and	r24, r25
    25a8:	80 83       	st	Z, r24
    25aa:	e0 91 e9 11 	lds	r30, 0x11E9	; 0x8011e9 <my_lcd+0x32>
    25ae:	f0 91 ea 11 	lds	r31, 0x11EA	; 0x8011ea <my_lcd+0x33>
    25b2:	80 81       	ld	r24, Z
    25b4:	90 91 ef 11 	lds	r25, 0x11EF	; 0x8011ef <my_lcd+0x38>
    25b8:	89 2b       	or	r24, r25
    25ba:	80 83       	st	Z, r24
    25bc:	e0 91 e7 11 	lds	r30, 0x11E7	; 0x8011e7 <my_lcd+0x30>
    25c0:	f0 91 e8 11 	lds	r31, 0x11E8	; 0x8011e8 <my_lcd+0x31>
    25c4:	80 81       	ld	r24, Z
    25c6:	90 91 ee 11 	lds	r25, 0x11EE	; 0x8011ee <my_lcd+0x37>
    25ca:	89 2b       	or	r24, r25
    25cc:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:501
    setReadDir();
    25ce:	81 b1       	in	r24, 0x01	; 1
    25d0:	11 b8       	out	0x01, r1	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:502
    delay(1); 
    25d2:	61 e0       	ldi	r22, 0x01	; 1
    25d4:	70 e0       	ldi	r23, 0x00	; 0
    25d6:	80 e0       	ldi	r24, 0x00	; 0
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	0e 94 00 12 	call	0x2400	; 0x2400 <delay>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:508
	do 
	{ 
	//ead8(high);
	//ead8(low);
	//et = (high << 8) | lowc
		read16(ret);  //read 16bits
    25de:	e0 91 eb 11 	lds	r30, 0x11EB	; 0x8011eb <my_lcd+0x34>
    25e2:	f0 91 ec 11 	lds	r31, 0x11EC	; 0x8011ec <my_lcd+0x35>
    25e6:	80 81       	ld	r24, Z
    25e8:	90 91 f4 11 	lds	r25, 0x11F4	; 0x8011f4 <my_lcd+0x3d>
    25ec:	89 23       	and	r24, r25
    25ee:	80 83       	st	Z, r24
    25f0:	20 b1       	in	r18, 0x00	; 0
    25f2:	e0 91 eb 11 	lds	r30, 0x11EB	; 0x8011eb <my_lcd+0x34>
    25f6:	f0 91 ec 11 	lds	r31, 0x11EC	; 0x8011ec <my_lcd+0x35>
    25fa:	90 81       	ld	r25, Z
    25fc:	80 91 f0 11 	lds	r24, 0x11F0	; 0x8011f0 <my_lcd+0x39>
    2600:	98 2b       	or	r25, r24
    2602:	90 83       	st	Z, r25
    2604:	e0 91 eb 11 	lds	r30, 0x11EB	; 0x8011eb <my_lcd+0x34>
    2608:	f0 91 ec 11 	lds	r31, 0x11EC	; 0x8011ec <my_lcd+0x35>
    260c:	90 81       	ld	r25, Z
    260e:	80 91 f4 11 	lds	r24, 0x11F4	; 0x8011f4 <my_lcd+0x3d>
    2612:	98 23       	and	r25, r24
    2614:	90 83       	st	Z, r25
    2616:	80 b1       	in	r24, 0x00	; 0
    2618:	e0 91 eb 11 	lds	r30, 0x11EB	; 0x8011eb <my_lcd+0x34>
    261c:	f0 91 ec 11 	lds	r31, 0x11EC	; 0x8011ec <my_lcd+0x35>
    2620:	90 81       	ld	r25, Z
    2622:	30 91 f0 11 	lds	r19, 0x11F0	; 0x8011f0 <my_lcd+0x39>
    2626:	93 2b       	or	r25, r19
    2628:	90 83       	st	Z, r25
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:509
	}while (--index >= 0);   
    262a:	c1 30       	cpi	r28, 0x01	; 1
    262c:	79 f0       	breq	.+30     	; 0x264c <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.79]+0x104>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:511
//    RD_IDLE;
    CS_IDLE;
    262e:	e0 91 e5 11 	lds	r30, 0x11E5	; 0x8011e5 <my_lcd+0x2e>
    2632:	f0 91 e6 11 	lds	r31, 0x11E6	; 0x8011e6 <my_lcd+0x2f>
    2636:	90 81       	ld	r25, Z
    2638:	30 91 ed 11 	lds	r19, 0x11ED	; 0x8011ed <my_lcd+0x36>
    263c:	93 2b       	or	r25, r19
    263e:	90 83       	st	Z, r25
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:512
    setWriteDir();
    2640:	91 b1       	in	r25, 0x01	; 1
    2642:	9f ef       	ldi	r25, 0xFF	; 255
    2644:	91 b9       	out	0x01, r25	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:514
    return ret;
}
    2646:	92 2f       	mov	r25, r18
    2648:	cf 91       	pop	r28
    264a:	08 95       	ret
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:509
	{ 
	//ead8(high);
	//ead8(low);
	//et = (high << 8) | lowc
		read16(ret);  //read 16bits
	}while (--index >= 0);   
    264c:	c0 e0       	ldi	r28, 0x00	; 0
    264e:	c7 cf       	rjmp	.-114    	; 0x25de <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.79]+0x96>

00002650 <millis>:
millis():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:78
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
    2650:	2f b7       	in	r18, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:82

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
    2652:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:83
  m = timer0_millis;
    2654:	60 91 c0 0c 	lds	r22, 0x0CC0	; 0x800cc0 <timer0_millis>
    2658:	70 91 c1 0c 	lds	r23, 0x0CC1	; 0x800cc1 <timer0_millis+0x1>
    265c:	80 91 c2 0c 	lds	r24, 0x0CC2	; 0x800cc2 <timer0_millis+0x2>
    2660:	90 91 c3 0c 	lds	r25, 0x0CC3	; 0x800cc3 <timer0_millis+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:84
  SREG = oldSREG;
    2664:	2f bf       	out	0x3f, r18	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:87

  return m;
}
    2666:	08 95       	ret

00002668 <PubSubClient::readByte(unsigned char*) [clone .constprop.149]>:
_ZN12PubSubClient8readByteEPh.constprop.149():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:209
    }
    return true;
}

// reads a byte into result
boolean PubSubClient::readByte(uint8_t * result) {
    2668:	cf 92       	push	r12
    266a:	df 92       	push	r13
    266c:	ef 92       	push	r14
    266e:	ff 92       	push	r15
    2670:	cf 93       	push	r28
    2672:	df 93       	push	r29
    2674:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:210
   uint32_t previousMillis = millis();
    2676:	0e 94 28 13 	call	0x2650	; 0x2650 <millis>
    267a:	6b 01       	movw	r12, r22
    267c:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:211
   while(!_client->available()) {
    267e:	80 91 b1 13 	lds	r24, 0x13B1	; 0x8013b1 <mqtt_client>
    2682:	90 91 b2 13 	lds	r25, 0x13B2	; 0x8013b2 <mqtt_client+0x1>
    2686:	dc 01       	movw	r26, r24
    2688:	ed 91       	ld	r30, X+
    268a:	fc 91       	ld	r31, X
    268c:	00 84       	ldd	r0, Z+8	; 0x08
    268e:	f1 85       	ldd	r31, Z+9	; 0x09
    2690:	e0 2d       	mov	r30, r0
    2692:	19 95       	eicall
    2694:	89 2b       	or	r24, r25
    2696:	69 f4       	brne	.+26     	; 0x26b2 <PubSubClient::readByte(unsigned char*) [clone .constprop.149]+0x4a>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:212
     uint32_t currentMillis = millis();
    2698:	0e 94 28 13 	call	0x2650	; 0x2650 <millis>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:213
     if(currentMillis - previousMillis >= ((int32_t) MQTT_SOCKET_TIMEOUT * 100)){
    269c:	6c 19       	sub	r22, r12
    269e:	7d 09       	sbc	r23, r13
    26a0:	8e 09       	sbc	r24, r14
    26a2:	9f 09       	sbc	r25, r15
    26a4:	64 36       	cpi	r22, 0x64	; 100
    26a6:	71 05       	cpc	r23, r1
    26a8:	81 05       	cpc	r24, r1
    26aa:	91 05       	cpc	r25, r1
    26ac:	40 f3       	brcs	.-48     	; 0x267e <PubSubClient::readByte(unsigned char*) [clone .constprop.149]+0x16>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:214
       return false;
    26ae:	80 e0       	ldi	r24, 0x00	; 0
    26b0:	0d c0       	rjmp	.+26     	; 0x26cc <PubSubClient::readByte(unsigned char*) [clone .constprop.149]+0x64>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:217
     }
   }
   *result = _client->read();
    26b2:	80 91 b1 13 	lds	r24, 0x13B1	; 0x8013b1 <mqtt_client>
    26b6:	90 91 b2 13 	lds	r25, 0x13B2	; 0x8013b2 <mqtt_client+0x1>
    26ba:	dc 01       	movw	r26, r24
    26bc:	ed 91       	ld	r30, X+
    26be:	fc 91       	ld	r31, X
    26c0:	02 84       	ldd	r0, Z+10	; 0x0a
    26c2:	f3 85       	ldd	r31, Z+11	; 0x0b
    26c4:	e0 2d       	mov	r30, r0
    26c6:	19 95       	eicall
    26c8:	88 83       	st	Y, r24
    26ca:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:219
   return true;
}
    26cc:	df 91       	pop	r29
    26ce:	cf 91       	pop	r28
    26d0:	ff 90       	pop	r15
    26d2:	ef 90       	pop	r14
    26d4:	df 90       	pop	r13
    26d6:	cf 90       	pop	r12
    26d8:	08 95       	ret

000026da <PubSubClient::readPacket(unsigned char*) [clone .constprop.147]>:
_ZN12PubSubClient10readPacketEPh.constprop.147():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:232
    return true;
  }
  return false;
}

uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
    26da:	3f 92       	push	r3
    26dc:	4f 92       	push	r4
    26de:	5f 92       	push	r5
    26e0:	6f 92       	push	r6
    26e2:	7f 92       	push	r7
    26e4:	8f 92       	push	r8
    26e6:	9f 92       	push	r9
    26e8:	af 92       	push	r10
    26ea:	bf 92       	push	r11
    26ec:	cf 92       	push	r12
    26ee:	df 92       	push	r13
    26f0:	ef 92       	push	r14
    26f2:	ff 92       	push	r15
    26f4:	0f 93       	push	r16
    26f6:	1f 93       	push	r17
    26f8:	cf 93       	push	r28
    26fa:	df 93       	push	r29
    26fc:	1f 92       	push	r1
    26fe:	cd b7       	in	r28, 0x3d	; 61
    2700:	de b7       	in	r29, 0x3e	; 62
    2702:	5c 01       	movw	r10, r24
readByte():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:225

// reads a byte into result[*index] and increments index
boolean PubSubClient::readByte(uint8_t * result, uint16_t * index){
  uint16_t current_index = *index;
  uint8_t * write_address = &(result[current_index]);
  if(readByte(write_address)){
    2704:	83 eb       	ldi	r24, 0xB3	; 179
    2706:	93 e1       	ldi	r25, 0x13	; 19
    2708:	0e 94 34 13 	call	0x2668	; 0x2668 <PubSubClient::readByte(unsigned char*) [clone .constprop.149]>
    270c:	81 11       	cpse	r24, r1
    270e:	16 c0       	rjmp	.+44     	; 0x273c <PubSubClient::readPacket(unsigned char*) [clone .constprop.147]+0x62>
_ZN12PubSubClient10readPacketEPh.constprop.147():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:234
  return false;
}

uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    if(!readByte(buffer, &len)) return 0;
    2710:	10 e0       	ldi	r17, 0x00	; 0
    2712:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:280
    if (!this->stream && len > MQTT_MAX_PACKET_SIZE) {
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
    2714:	c8 01       	movw	r24, r16
    2716:	0f 90       	pop	r0
    2718:	df 91       	pop	r29
    271a:	cf 91       	pop	r28
    271c:	1f 91       	pop	r17
    271e:	0f 91       	pop	r16
    2720:	ff 90       	pop	r15
    2722:	ef 90       	pop	r14
    2724:	df 90       	pop	r13
    2726:	cf 90       	pop	r12
    2728:	bf 90       	pop	r11
    272a:	af 90       	pop	r10
    272c:	9f 90       	pop	r9
    272e:	8f 90       	pop	r8
    2730:	7f 90       	pop	r7
    2732:	6f 90       	pop	r6
    2734:	5f 90       	pop	r5
    2736:	4f 90       	pop	r4
    2738:	3f 90       	pop	r3
    273a:	08 95       	ret
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:235
}

uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    if(!readByte(buffer, &len)) return 0;
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    273c:	30 90 b3 13 	lds	r3, 0x13B3	; 0x8013b3 <mqtt_client+0x2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:238
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    2740:	19 82       	std	Y+1, r1	; 0x01
    2742:	34 eb       	ldi	r19, 0xB4	; 180
    2744:	83 2e       	mov	r8, r19
    2746:	33 e1       	ldi	r19, 0x13	; 19
    2748:	93 2e       	mov	r9, r19
readByte():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:226
// reads a byte into result[*index] and increments index
boolean PubSubClient::readByte(uint8_t * result, uint16_t * index){
  uint16_t current_index = *index;
  uint8_t * write_address = &(result[current_index]);
  if(readByte(write_address)){
    *index = current_index + 1;
    274a:	ee 24       	eor	r14, r14
    274c:	e3 94       	inc	r14
    274e:	f1 2c       	mov	r15, r1
_ZN12PubSubClient10readPacketEPh.constprop.147():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:237
uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    if(!readByte(buffer, &len)) return 0;
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    2750:	d1 2c       	mov	r13, r1
    2752:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:236

uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    if(!readByte(buffer, &len)) return 0;
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    2754:	41 2c       	mov	r4, r1
    2756:	51 2c       	mov	r5, r1
    2758:	32 01       	movw	r6, r4
    275a:	43 94       	inc	r4
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:243
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        if(!readByte(&digit)) return 0;
    275c:	ce 01       	movw	r24, r28
    275e:	01 96       	adiw	r24, 0x01	; 1
    2760:	0e 94 34 13 	call	0x2668	; 0x2668 <PubSubClient::readByte(unsigned char*) [clone .constprop.149]>
    2764:	88 23       	and	r24, r24
    2766:	a1 f2       	breq	.-88     	; 0x2710 <PubSubClient::readPacket(unsigned char*) [clone .constprop.147]+0x36>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:244
        buffer[len++] = digit;
    2768:	87 01       	movw	r16, r14
    276a:	0f 5f       	subi	r16, 0xFF	; 255
    276c:	1f 4f       	sbci	r17, 0xFF	; 255
    276e:	89 81       	ldd	r24, Y+1	; 0x01
    2770:	d4 01       	movw	r26, r8
    2772:	8d 93       	st	X+, r24
    2774:	4d 01       	movw	r8, r26
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:245
        length += (digit & 127) * multiplier;
    2776:	28 2f       	mov	r18, r24
    2778:	2f 77       	andi	r18, 0x7F	; 127
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	24 9d       	mul	r18, r4
    277e:	a0 01       	movw	r20, r0
    2780:	25 9d       	mul	r18, r5
    2782:	50 0d       	add	r21, r0
    2784:	34 9d       	mul	r19, r4
    2786:	50 0d       	add	r21, r0
    2788:	11 24       	eor	r1, r1
    278a:	c4 0e       	add	r12, r20
    278c:	d5 1e       	adc	r13, r21
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:246
        multiplier *= 128;
    278e:	27 e0       	ldi	r18, 0x07	; 7
    2790:	44 0c       	add	r4, r4
    2792:	55 1c       	adc	r5, r5
    2794:	66 1c       	adc	r6, r6
    2796:	77 1c       	adc	r7, r7
    2798:	2a 95       	dec	r18
    279a:	d1 f7       	brne	.-12     	; 0x2790 <PubSubClient::readPacket(unsigned char*) [clone .constprop.147]+0xb6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:247
    } while ((digit & 128) != 0);
    279c:	87 fd       	sbrc	r24, 7
    279e:	31 c0       	rjmp	.+98     	; 0x2802 <PubSubClient::readPacket(unsigned char*) [clone .constprop.147]+0x128>
    27a0:	b3 2d       	mov	r27, r3
    27a2:	b0 7f       	andi	r27, 0xF0	; 240
    27a4:	3b 2e       	mov	r3, r27
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:248
    *lengthLength = len-1;
    27a6:	8f ef       	ldi	r24, 0xFF	; 255
    27a8:	80 0f       	add	r24, r16
    27aa:	f5 01       	movw	r30, r10
    27ac:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:250

    if (isPublish) {
    27ae:	f0 e3       	ldi	r31, 0x30	; 48
    27b0:	bf 13       	cpse	r27, r31
    27b2:	29 c0       	rjmp	.+82     	; 0x2806 <PubSubClient::readPacket(unsigned char*) [clone .constprop.147]+0x12c>
readByte():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:225

// reads a byte into result[*index] and increments index
boolean PubSubClient::readByte(uint8_t * result, uint16_t * index){
  uint16_t current_index = *index;
  uint8_t * write_address = &(result[current_index]);
  if(readByte(write_address)){
    27b4:	c8 01       	movw	r24, r16
    27b6:	8d 54       	subi	r24, 0x4D	; 77
    27b8:	9c 4e       	sbci	r25, 0xEC	; 236
    27ba:	0e 94 34 13 	call	0x2668	; 0x2668 <PubSubClient::readByte(unsigned char*) [clone .constprop.149]>
    27be:	88 23       	and	r24, r24
    27c0:	09 f4       	brne	.+2      	; 0x27c4 <PubSubClient::readPacket(unsigned char*) [clone .constprop.147]+0xea>
    27c2:	a6 cf       	rjmp	.-180    	; 0x2710 <PubSubClient::readPacket(unsigned char*) [clone .constprop.147]+0x36>
    27c4:	c7 01       	movw	r24, r14
    27c6:	8b 54       	subi	r24, 0x4B	; 75
    27c8:	9c 4e       	sbci	r25, 0xEC	; 236
    27ca:	0e 94 34 13 	call	0x2668	; 0x2668 <PubSubClient::readByte(unsigned char*) [clone .constprop.149]>
    27ce:	88 23       	and	r24, r24
    27d0:	09 f4       	brne	.+2      	; 0x27d4 <PubSubClient::readPacket(unsigned char*) [clone .constprop.147]+0xfa>
    27d2:	9e cf       	rjmp	.-196    	; 0x2710 <PubSubClient::readPacket(unsigned char*) [clone .constprop.147]+0x36>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:226
    *index = current_index + 1;
    27d4:	0e 5f       	subi	r16, 0xFE	; 254
    27d6:	1f 4f       	sbci	r17, 0xFF	; 255
_ZN12PubSubClient10readPacketEPh.constprop.147():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:254

    if (isPublish) {
        // Read in topic length to calculate bytes to skip over for Stream writing
        if(!readByte(buffer, &len)) return 0;
        if(!readByte(buffer, &len)) return 0;
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
    27d8:	d5 01       	movw	r26, r10
    27da:	ec 91       	ld	r30, X
    27dc:	f0 e0       	ldi	r31, 0x00	; 0
    27de:	ef 54       	subi	r30, 0x4F	; 79
    27e0:	fc 4e       	sbci	r31, 0xEC	; 236
    27e2:	e3 80       	ldd	r14, Z+3	; 0x03
    27e4:	f1 2c       	mov	r15, r1
    27e6:	fe 2c       	mov	r15, r14
    27e8:	ee 24       	eor	r14, r14
    27ea:	84 81       	ldd	r24, Z+4	; 0x04
    27ec:	e8 0e       	add	r14, r24
    27ee:	f1 1c       	adc	r15, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:256
        start = 2;
        if (buffer[0]&MQTTQOS1) {
    27f0:	80 91 b3 13 	lds	r24, 0x13B3	; 0x8013b3 <mqtt_client+0x2>
    27f4:	81 ff       	sbrs	r24, 1
    27f6:	03 c0       	rjmp	.+6      	; 0x27fe <PubSubClient::readPacket(unsigned char*) [clone .constprop.147]+0x124>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:258
            // skip message id
            skip += 2;
    27f8:	b2 e0       	ldi	r27, 0x02	; 2
    27fa:	eb 0e       	add	r14, r27
    27fc:	f1 1c       	adc	r15, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:255
    if (isPublish) {
        // Read in topic length to calculate bytes to skip over for Stream writing
        if(!readByte(buffer, &len)) return 0;
        if(!readByte(buffer, &len)) return 0;
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
    27fe:	92 e0       	ldi	r25, 0x02	; 2
    2800:	05 c0       	rjmp	.+10     	; 0x280c <PubSubClient::readPacket(unsigned char*) [clone .constprop.147]+0x132>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:244
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        if(!readByte(&digit)) return 0;
        buffer[len++] = digit;
    2802:	78 01       	movw	r14, r16
    2804:	ab cf       	rjmp	.-170    	; 0x275c <PubSubClient::readPacket(unsigned char*) [clone .constprop.147]+0x82>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:240
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;
    2806:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:239
    if(!readByte(buffer, &len)) return 0;
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
    2808:	f1 2c       	mov	r15, r1
    280a:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:262
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
    280c:	69 2e       	mov	r6, r25
    280e:	71 2c       	mov	r7, r1
    2810:	60 1a       	sub	r6, r16
    2812:	71 0a       	sbc	r7, r17
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:265
        if(!readByte(&digit)) return 0;
        if (this->stream) {
            if (isPublish && len-*lengthLength-2>skip) {
    2814:	8e ef       	ldi	r24, 0xFE	; 254
    2816:	88 2e       	mov	r8, r24
    2818:	99 24       	eor	r9, r9
    281a:	9a 94       	dec	r9
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:262
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
    281c:	c3 01       	movw	r24, r6
    281e:	80 0f       	add	r24, r16
    2820:	91 1f       	adc	r25, r17
    2822:	8c 15       	cp	r24, r12
    2824:	9d 05       	cpc	r25, r13
    2826:	78 f5       	brcc	.+94     	; 0x2886 <PubSubClient::readPacket(unsigned char*) [clone .constprop.147]+0x1ac>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:263
        if(!readByte(&digit)) return 0;
    2828:	ce 01       	movw	r24, r28
    282a:	01 96       	adiw	r24, 0x01	; 1
    282c:	0e 94 34 13 	call	0x2668	; 0x2668 <PubSubClient::readByte(unsigned char*) [clone .constprop.149]>
    2830:	88 23       	and	r24, r24
    2832:	09 f4       	brne	.+2      	; 0x2836 <PubSubClient::readPacket(unsigned char*) [clone .constprop.147]+0x15c>
    2834:	6d cf       	rjmp	.-294    	; 0x2710 <PubSubClient::readPacket(unsigned char*) [clone .constprop.147]+0x36>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:264
        if (this->stream) {
    2836:	80 91 ca 15 	lds	r24, 0x15CA	; 0x8015ca <mqtt_client+0x219>
    283a:	90 91 cb 15 	lds	r25, 0x15CB	; 0x8015cb <mqtt_client+0x21a>
    283e:	00 97       	sbiw	r24, 0x00	; 0
    2840:	b1 f0       	breq	.+44     	; 0x286e <PubSubClient::readPacket(unsigned char*) [clone .constprop.147]+0x194>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:265
            if (isPublish && len-*lengthLength-2>skip) {
    2842:	e0 e3       	ldi	r30, 0x30	; 48
    2844:	3e 12       	cpse	r3, r30
    2846:	13 c0       	rjmp	.+38     	; 0x286e <PubSubClient::readPacket(unsigned char*) [clone .constprop.147]+0x194>
    2848:	d5 01       	movw	r26, r10
    284a:	2c 91       	ld	r18, X
    284c:	f4 01       	movw	r30, r8
    284e:	e2 1b       	sub	r30, r18
    2850:	f1 09       	sbc	r31, r1
    2852:	9f 01       	movw	r18, r30
    2854:	20 0f       	add	r18, r16
    2856:	31 1f       	adc	r19, r17
    2858:	e2 16       	cp	r14, r18
    285a:	f3 06       	cpc	r15, r19
    285c:	40 f4       	brcc	.+16     	; 0x286e <PubSubClient::readPacket(unsigned char*) [clone .constprop.147]+0x194>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:266
                this->stream->write(digit);
    285e:	dc 01       	movw	r26, r24
    2860:	ed 91       	ld	r30, X+
    2862:	fc 91       	ld	r31, X
    2864:	01 90       	ld	r0, Z+
    2866:	f0 81       	ld	r31, Z
    2868:	e0 2d       	mov	r30, r0
    286a:	69 81       	ldd	r22, Y+1	; 0x01
    286c:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:269
            }
        }
        if (len < MQTT_MAX_PACKET_SIZE) {
    286e:	01 15       	cp	r16, r1
    2870:	b2 e0       	ldi	r27, 0x02	; 2
    2872:	1b 07       	cpc	r17, r27
    2874:	28 f4       	brcc	.+10     	; 0x2880 <PubSubClient::readPacket(unsigned char*) [clone .constprop.147]+0x1a6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:270
            buffer[len] = digit;
    2876:	89 81       	ldd	r24, Y+1	; 0x01
    2878:	f8 01       	movw	r30, r16
    287a:	ef 54       	subi	r30, 0x4F	; 79
    287c:	fc 4e       	sbci	r31, 0xEC	; 236
    287e:	82 83       	std	Z+2, r24	; 0x02
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:272
        }
        len++;
    2880:	0f 5f       	subi	r16, 0xFF	; 255
    2882:	1f 4f       	sbci	r17, 0xFF	; 255
    2884:	cb cf       	rjmp	.-106    	; 0x281c <PubSubClient::readPacket(unsigned char*) [clone .constprop.147]+0x142>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:275
    }

    if (!this->stream && len > MQTT_MAX_PACKET_SIZE) {
    2886:	80 91 ca 15 	lds	r24, 0x15CA	; 0x8015ca <mqtt_client+0x219>
    288a:	90 91 cb 15 	lds	r25, 0x15CB	; 0x8015cb <mqtt_client+0x21a>
    288e:	89 2b       	or	r24, r25
    2890:	09 f0       	breq	.+2      	; 0x2894 <PubSubClient::readPacket(unsigned char*) [clone .constprop.147]+0x1ba>
    2892:	40 cf       	rjmp	.-384    	; 0x2714 <PubSubClient::readPacket(unsigned char*) [clone .constprop.147]+0x3a>
    2894:	01 30       	cpi	r16, 0x01	; 1
    2896:	e2 e0       	ldi	r30, 0x02	; 2
    2898:	1e 07       	cpc	r17, r30
    289a:	08 f0       	brcs	.+2      	; 0x289e <PubSubClient::readPacket(unsigned char*) [clone .constprop.147]+0x1c4>
    289c:	39 cf       	rjmp	.-398    	; 0x2710 <PubSubClient::readPacket(unsigned char*) [clone .constprop.147]+0x36>
    289e:	3a cf       	rjmp	.-396    	; 0x2714 <PubSubClient::readPacket(unsigned char*) [clone .constprop.147]+0x3a>

000028a0 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    28a0:	af 92       	push	r10
    28a2:	bf 92       	push	r11
    28a4:	cf 92       	push	r12
    28a6:	df 92       	push	r13
    28a8:	ef 92       	push	r14
    28aa:	ff 92       	push	r15
    28ac:	0f 93       	push	r16
    28ae:	1f 93       	push	r17
    28b0:	cf 93       	push	r28
    28b2:	df 93       	push	r29
    28b4:	6c 01       	movw	r12, r24
    28b6:	7b 01       	movw	r14, r22
    28b8:	8b 01       	movw	r16, r22
    28ba:	04 0f       	add	r16, r20
    28bc:	15 1f       	adc	r17, r21
    28be:	eb 01       	movw	r28, r22
    28c0:	5e 01       	movw	r10, r28
    28c2:	ae 18       	sub	r10, r14
    28c4:	bf 08       	sbc	r11, r15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
    28c6:	c0 17       	cp	r28, r16
    28c8:	d1 07       	cpc	r29, r17
    28ca:	59 f0       	breq	.+22     	; 0x28e2 <Print::write(unsigned char const*, unsigned int)+0x42>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
    28cc:	69 91       	ld	r22, Y+
    28ce:	d6 01       	movw	r26, r12
    28d0:	ed 91       	ld	r30, X+
    28d2:	fc 91       	ld	r31, X
    28d4:	01 90       	ld	r0, Z+
    28d6:	f0 81       	ld	r31, Z
    28d8:	e0 2d       	mov	r30, r0
    28da:	c6 01       	movw	r24, r12
    28dc:	19 95       	eicall
    28de:	89 2b       	or	r24, r25
    28e0:	79 f7       	brne	.-34     	; 0x28c0 <Print::write(unsigned char const*, unsigned int)+0x20>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
    28e2:	c5 01       	movw	r24, r10
    28e4:	df 91       	pop	r29
    28e6:	cf 91       	pop	r28
    28e8:	1f 91       	pop	r17
    28ea:	0f 91       	pop	r16
    28ec:	ff 90       	pop	r15
    28ee:	ef 90       	pop	r14
    28f0:	df 90       	pop	r13
    28f2:	cf 90       	pop	r12
    28f4:	bf 90       	pop	r11
    28f6:	af 90       	pop	r10
    28f8:	08 95       	ret

000028fa <a2d_start_first(unsigned char)>:
_Z15a2d_start_firsth():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:58
}


void a2d_start_first(uint8_t vstup)
{
ADMUX = ((a2d_reference & 3) << 6) + (vstup & 7);
    28fa:	20 91 77 0b 	lds	r18, 0x0B77	; 0x800b77 <a2d_reference>
    28fe:	90 e4       	ldi	r25, 0x40	; 64
    2900:	29 9f       	mul	r18, r25
    2902:	90 01       	movw	r18, r0
    2904:	11 24       	eor	r1, r1
    2906:	28 0f       	add	r18, r24
    2908:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:59
a2d_input = vstup;
    290c:	80 93 78 0b 	sts	0x0B78, r24	; 0x800b78 <a2d_input>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:60
sbi(ADCSRA, ADSC);
    2910:	ea e7       	ldi	r30, 0x7A	; 122
    2912:	f0 e0       	ldi	r31, 0x00	; 0
    2914:	80 81       	ld	r24, Z
    2916:	80 64       	ori	r24, 0x40	; 64
    2918:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:61
}
    291a:	08 95       	ret

0000291c <NTPClient::getEpochTime() const>:
_ZNK9NTPClient12getEpochTimeEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:105
    return this->forceUpdate();
  }
  return true;
}

unsigned long NTPClient::getEpochTime() const {
    291c:	cf 92       	push	r12
    291e:	df 92       	push	r13
    2920:	ef 92       	push	r14
    2922:	ff 92       	push	r15
    2924:	0f 93       	push	r16
    2926:	1f 93       	push	r17
    2928:	cf 93       	push	r28
    292a:	df 93       	push	r29
    292c:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:106
  return this->_timeOffset + // User offset
    292e:	cf 80       	ldd	r12, Y+7	; 0x07
    2930:	d8 84       	ldd	r13, Y+8	; 0x08
    2932:	e9 84       	ldd	r14, Y+9	; 0x09
    2934:	fa 84       	ldd	r15, Y+10	; 0x0a
    2936:	8f 85       	ldd	r24, Y+15	; 0x0f
    2938:	98 89       	ldd	r25, Y+16	; 0x10
    293a:	a9 89       	ldd	r26, Y+17	; 0x11
    293c:	ba 89       	ldd	r27, Y+18	; 0x12
    293e:	c8 0e       	add	r12, r24
    2940:	d9 1e       	adc	r13, r25
    2942:	ea 1e       	adc	r14, r26
    2944:	fb 1e       	adc	r15, r27
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:108
         this->_currentEpoc + // Epoc returned by the NTP server
         ((millis() - this->_lastUpdate) / 1000); // Time since last update
    2946:	0e 94 28 13 	call	0x2650	; 0x2650 <millis>
    294a:	0b 89       	ldd	r16, Y+19	; 0x13
    294c:	1c 89       	ldd	r17, Y+20	; 0x14
    294e:	2d 89       	ldd	r18, Y+21	; 0x15
    2950:	3e 89       	ldd	r19, Y+22	; 0x16
    2952:	60 1b       	sub	r22, r16
    2954:	71 0b       	sbc	r23, r17
    2956:	82 0b       	sbc	r24, r18
    2958:	93 0b       	sbc	r25, r19
    295a:	28 ee       	ldi	r18, 0xE8	; 232
    295c:	33 e0       	ldi	r19, 0x03	; 3
    295e:	40 e0       	ldi	r20, 0x00	; 0
    2960:	50 e0       	ldi	r21, 0x00	; 0
    2962:	0e 94 31 8a 	call	0x11462	; 0x11462 <__udivmodsi4>
    2966:	ca 01       	movw	r24, r20
    2968:	b9 01       	movw	r22, r18
    296a:	6c 0d       	add	r22, r12
    296c:	7d 1d       	adc	r23, r13
    296e:	8e 1d       	adc	r24, r14
    2970:	9f 1d       	adc	r25, r15
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:109
}
    2972:	df 91       	pop	r29
    2974:	cf 91       	pop	r28
    2976:	1f 91       	pop	r17
    2978:	0f 91       	pop	r16
    297a:	ff 90       	pop	r15
    297c:	ef 90       	pop	r14
    297e:	df 90       	pop	r13
    2980:	cf 90       	pop	r12
    2982:	08 95       	ret

00002984 <NTPClient::begin()>:
_ZN9NTPClient5beginEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:52
  this->_timeOffset     = timeOffset;
  this->_poolServerName = poolServerName;
  this->_updateInterval = updateInterval;
}

void NTPClient::begin() {
    2984:	cf 93       	push	r28
    2986:	df 93       	push	r29
    2988:	ec 01       	movw	r28, r24
begin():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:57
  this->begin(NTP_DEFAULT_LOCAL_PORT);
}

void NTPClient::begin(int port) {
  this->_port = port;
    298a:	89 e3       	ldi	r24, 0x39	; 57
    298c:	95 e0       	ldi	r25, 0x05	; 5
    298e:	9e 83       	std	Y+6, r25	; 0x06
    2990:	8d 83       	std	Y+5, r24	; 0x05
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:59

  this->_udp->begin(this->_port);
    2992:	88 81       	ld	r24, Y
    2994:	99 81       	ldd	r25, Y+1	; 0x01
    2996:	dc 01       	movw	r26, r24
    2998:	ed 91       	ld	r30, X+
    299a:	fc 91       	ld	r31, X
    299c:	06 84       	ldd	r0, Z+14	; 0x0e
    299e:	f7 85       	ldd	r31, Z+15	; 0x0f
    29a0:	e0 2d       	mov	r30, r0
    29a2:	69 e3       	ldi	r22, 0x39	; 57
    29a4:	75 e0       	ldi	r23, 0x05	; 5
    29a6:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:61

  this->_udpSetup = true;
    29a8:	81 e0       	ldi	r24, 0x01	; 1
    29aa:	8a 83       	std	Y+2, r24	; 0x02
_ZN9NTPClient5beginEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:54
  this->_updateInterval = updateInterval;
}

void NTPClient::begin() {
  this->begin(NTP_DEFAULT_LOCAL_PORT);
}
    29ac:	df 91       	pop	r29
    29ae:	cf 91       	pop	r28
    29b0:	08 95       	ret

000029b2 <twi_stop>:
twi_stop():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:372
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    29b2:	85 ed       	ldi	r24, 0xD5	; 213
    29b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:376

  // wait for stop condition to be executed on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    29b8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    29bc:	84 fd       	sbrc	r24, 4
    29be:	fc cf       	rjmp	.-8      	; 0x29b8 <twi_stop+0x6>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:381
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    29c0:	10 92 2b 0f 	sts	0x0F2B, r1	; 0x800f2b <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:382
}
    29c4:	08 95       	ret

000029c6 <twi_transmit>:
twi_transmit():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:307
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    29c6:	20 91 54 0b 	lds	r18, 0x0B54	; 0x800b54 <twi_txBufferLength>
    29ca:	26 0f       	add	r18, r22
    29cc:	33 27       	eor	r19, r19
    29ce:	33 1f       	adc	r19, r19
    29d0:	21 32       	cpi	r18, 0x21	; 33
    29d2:	31 05       	cpc	r19, r1
    29d4:	ec f4       	brge	.+58     	; 0x2a10 <twi_transmit+0x4a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:312
    return 1;
  }

  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    29d6:	20 91 2b 0f 	lds	r18, 0x0F2B	; 0x800f2b <twi_state>
    29da:	fc 01       	movw	r30, r24
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	80 e0       	ldi	r24, 0x00	; 0
    29e0:	24 30       	cpi	r18, 0x04	; 4
    29e2:	69 f0       	breq	.+26     	; 0x29fe <twi_transmit+0x38>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:313
    return 2;
    29e4:	82 e0       	ldi	r24, 0x02	; 2
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:323
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;

  return 0;
}
    29e6:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:318
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    twi_txBuffer[twi_txBufferLength+i] = data[i];
    29e8:	a0 91 54 0b 	lds	r26, 0x0B54	; 0x800b54 <twi_txBufferLength>
    29ec:	21 91       	ld	r18, Z+
    29ee:	ac 01       	movw	r20, r24
    29f0:	4c 5c       	subi	r20, 0xCC	; 204
    29f2:	54 4f       	sbci	r21, 0xF4	; 244
    29f4:	a4 0f       	add	r26, r20
    29f6:	b5 2f       	mov	r27, r21
    29f8:	b1 1d       	adc	r27, r1
    29fa:	2c 93       	st	X, r18
    29fc:	01 96       	adiw	r24, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:317
  if(TWI_STX != twi_state){
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    29fe:	86 17       	cp	r24, r22
    2a00:	98 f3       	brcs	.-26     	; 0x29e8 <twi_transmit+0x22>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:320
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
    2a02:	80 91 54 0b 	lds	r24, 0x0B54	; 0x800b54 <twi_txBufferLength>
    2a06:	68 0f       	add	r22, r24
    2a08:	60 93 54 0b 	sts	0x0B54, r22	; 0x800b54 <twi_txBufferLength>
    2a0c:	80 e0       	ldi	r24, 0x00	; 0
    2a0e:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:308
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    return 1;
    2a10:	81 e0       	ldi	r24, 0x01	; 1
    2a12:	08 95       	ret

00002a14 <TwoWire::flush()>:
_ZN7TwoWire5flushEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:274
}

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
    2a14:	08 95       	ret

00002a16 <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:264
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;

  if(rxBufferIndex < rxBufferLength){
    2a16:	e0 91 da 0e 	lds	r30, 0x0EDA	; 0x800eda <TwoWire::rxBufferIndex>
    2a1a:	80 91 d9 0e 	lds	r24, 0x0ED9	; 0x800ed9 <TwoWire::rxBufferLength>
    2a1e:	e8 17       	cp	r30, r24
    2a20:	30 f4       	brcc	.+12     	; 0x2a2e <TwoWire::peek()+0x18>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:265
    value = rxBuffer[rxBufferIndex];
    2a22:	f0 e0       	ldi	r31, 0x00	; 0
    2a24:	eb 51       	subi	r30, 0x1B	; 27
    2a26:	f1 4f       	sbci	r31, 0xF1	; 241
    2a28:	80 81       	ld	r24, Z
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:262
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
    2a2e:	8f ef       	ldi	r24, 0xFF	; 255
    2a30:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:269
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
    2a32:	08 95       	ret

00002a34 <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:219

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    2a34:	cf 92       	push	r12
    2a36:	df 92       	push	r13
    2a38:	ef 92       	push	r14
    2a3a:	ff 92       	push	r15
    2a3c:	0f 93       	push	r16
    2a3e:	1f 93       	push	r17
    2a40:	cf 93       	push	r28
    2a42:	df 93       	push	r29
    2a44:	7c 01       	movw	r14, r24
    2a46:	cb 01       	movw	r24, r22
    2a48:	8a 01       	movw	r16, r20
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:220
  if(transmitting){
    2a4a:	20 91 e4 0e 	lds	r18, 0x0EE4	; 0x800ee4 <TwoWire::transmitting>
    2a4e:	22 23       	and	r18, r18
    2a50:	89 f0       	breq	.+34     	; 0x2a74 <TwoWire::write(unsigned char const*, unsigned int)+0x40>
    2a52:	eb 01       	movw	r28, r22
    2a54:	6b 01       	movw	r12, r22
    2a56:	c4 0e       	add	r12, r20
    2a58:	d5 1e       	adc	r13, r21
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:222
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    2a5a:	cc 15       	cp	r28, r12
    2a5c:	dd 05       	cpc	r29, r13
    2a5e:	69 f0       	breq	.+26     	; 0x2a7a <TwoWire::write(unsigned char const*, unsigned int)+0x46>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:223
      write(data[i]);
    2a60:	69 91       	ld	r22, Y+
    2a62:	d7 01       	movw	r26, r14
    2a64:	ed 91       	ld	r30, X+
    2a66:	fc 91       	ld	r31, X
    2a68:	01 90       	ld	r0, Z+
    2a6a:	f0 81       	ld	r31, Z
    2a6c:	e0 2d       	mov	r30, r0
    2a6e:	c7 01       	movw	r24, r14
    2a70:	19 95       	eicall
    2a72:	f3 cf       	rjmp	.-26     	; 0x2a5a <TwoWire::write(unsigned char const*, unsigned int)+0x26>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:228
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    2a74:	64 2f       	mov	r22, r20
    2a76:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <twi_transmit>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:231
  }
  return quantity;
}
    2a7a:	c8 01       	movw	r24, r16
    2a7c:	df 91       	pop	r29
    2a7e:	cf 91       	pop	r28
    2a80:	1f 91       	pop	r17
    2a82:	0f 91       	pop	r16
    2a84:	ff 90       	pop	r15
    2a86:	ef 90       	pop	r14
    2a88:	df 90       	pop	r13
    2a8a:	cf 90       	pop	r12
    2a8c:	08 95       	ret

00002a8e <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:194

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
    2a8e:	cf 93       	push	r28
    2a90:	df 93       	push	r29
    2a92:	1f 92       	push	r1
    2a94:	cd b7       	in	r28, 0x3d	; 61
    2a96:	de b7       	in	r29, 0x3e	; 62
    2a98:	69 83       	std	Y+1, r22	; 0x01
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:195
  if(transmitting){
    2a9a:	20 91 e4 0e 	lds	r18, 0x0EE4	; 0x800ee4 <TwoWire::transmitting>
    2a9e:	22 23       	and	r18, r18
    2aa0:	f9 f0       	breq	.+62     	; 0x2ae0 <TwoWire::write(unsigned char)+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:198
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= TWI_BUFFER_SIZE){
    2aa2:	20 91 e1 0e 	lds	r18, 0x0EE1	; 0x800ee1 <TwoWire::txBufferLength>
    2aa6:	20 32       	cpi	r18, 0x20	; 32
    2aa8:	58 f0       	brcs	.+22     	; 0x2ac0 <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.h:44
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    2aaa:	21 e0       	ldi	r18, 0x01	; 1
    2aac:	30 e0       	ldi	r19, 0x00	; 0
    2aae:	fc 01       	movw	r30, r24
    2ab0:	33 83       	std	Z+3, r19	; 0x03
    2ab2:	22 83       	std	Z+2, r18	; 0x02
_ZN7TwoWire5writeEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:200
      setWriteError();
      return 0;
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:213
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
}
    2ab8:	0f 90       	pop	r0
    2aba:	df 91       	pop	r29
    2abc:	cf 91       	pop	r28
    2abe:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:203
    if(txBufferLength >= TWI_BUFFER_SIZE){
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    2ac0:	80 91 e2 0e 	lds	r24, 0x0EE2	; 0x800ee2 <TwoWire::txBufferIndex>
    2ac4:	e8 2f       	mov	r30, r24
    2ac6:	f0 e0       	ldi	r31, 0x00	; 0
    2ac8:	ec 5e       	subi	r30, 0xEC	; 236
    2aca:	f4 4f       	sbci	r31, 0xF4	; 244
    2acc:	99 81       	ldd	r25, Y+1	; 0x01
    2ace:	90 83       	st	Z, r25
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:204
    ++txBufferIndex;
    2ad0:	8f 5f       	subi	r24, 0xFF	; 255
    2ad2:	80 93 e2 0e 	sts	0x0EE2, r24	; 0x800ee2 <TwoWire::txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:206
    // update amount in buffer
    txBufferLength = txBufferIndex;
    2ad6:	80 93 e1 0e 	sts	0x0EE1, r24	; 0x800ee1 <TwoWire::txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:212
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
    2ada:	81 e0       	ldi	r24, 0x01	; 1
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	ec cf       	rjmp	.-40     	; 0x2ab8 <TwoWire::write(unsigned char)+0x2a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:210
    // update amount in buffer
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    2ae0:	61 e0       	ldi	r22, 0x01	; 1
    2ae2:	ce 01       	movw	r24, r28
    2ae4:	01 96       	adiw	r24, 0x01	; 1
    2ae6:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <twi_transmit>
    2aea:	f7 cf       	rjmp	.-18     	; 0x2ada <TwoWire::write(unsigned char)+0x4c>

00002aec <TwoWire::write(int) [clone .constprop.116]>:
_ZN7TwoWire5writeEi.constprop.116():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.h:78
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    2aec:	68 2f       	mov	r22, r24
    2aee:	86 ef       	ldi	r24, 0xF6	; 246
    2af0:	91 e1       	ldi	r25, 0x11	; 17
    2af2:	0c 94 47 15 	jmp	0x2a8e	; 0x2a8e <TwoWire::write(unsigned char)>

00002af6 <TwoWire::endTransmission()>:
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:173
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
  // transmit buffer (blocking)
  uint8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
    2af6:	20 91 e1 0e 	lds	r18, 0x0EE1	; 0x800ee1 <TwoWire::txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:232
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    return 1;
    2afa:	81 e0       	ldi	r24, 0x01	; 1
twi_writeTo():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:231
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    2afc:	21 32       	cpi	r18, 0x21	; 33
    2afe:	08 f0       	brcs	.+2      	; 0x2b02 <TwoWire::endTransmission()+0xc>
    2b00:	44 c0       	rjmp	.+136    	; 0x2b8a <TwoWire::endTransmission()+0x94>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:236
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    2b02:	80 91 2b 0f 	lds	r24, 0x0F2B	; 0x800f2b <twi_state>
    2b06:	81 11       	cpse	r24, r1
    2b08:	fc cf       	rjmp	.-8      	; 0x2b02 <TwoWire::endTransmission()+0xc>
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:173
    2b0a:	80 91 e3 0e 	lds	r24, 0x0EE3	; 0x800ee3 <TwoWire::txAddress>
twi_writeTo():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:239
    continue;
  }
  twi_state = TWI_MTX;
    2b0e:	92 e0       	ldi	r25, 0x02	; 2
    2b10:	90 93 2b 0f 	sts	0x0F2B, r25	; 0x800f2b <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:240
  twi_sendStop = sendStop;
    2b14:	91 e0       	ldi	r25, 0x01	; 1
    2b16:	90 93 2a 0f 	sts	0x0F2A, r25	; 0x800f2a <twi_sendStop>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:242
  // reset error state (0xFF.. no error occurred)
  twi_error = 0xFF;
    2b1a:	9f ef       	ldi	r25, 0xFF	; 255
    2b1c:	90 93 29 0f 	sts	0x0F29, r25	; 0x800f29 <twi_error>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:245

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    2b20:	10 92 28 0f 	sts	0x0F28, r1	; 0x800f28 <twi_masterBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:246
  twi_masterBufferLength = length;
    2b24:	20 93 27 0f 	sts	0x0F27, r18	; 0x800f27 <twi_masterBufferLength>
    2b28:	a4 e1       	ldi	r26, 0x14	; 20
    2b2a:	bb e0       	ldi	r27, 0x0B	; 11
    2b2c:	e5 e0       	ldi	r30, 0x05	; 5
    2b2e:	ff e0       	ldi	r31, 0x0F	; 15
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:249

  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    2b30:	90 e0       	ldi	r25, 0x00	; 0
twi_writeTo():
    2b32:	29 13       	cpse	r18, r25
    2b34:	31 c0       	rjmp	.+98     	; 0x2b98 <TwoWire::endTransmission()+0xa2>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:254
    twi_masterBuffer[i] = data[i];
  }

  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    2b36:	10 92 26 0f 	sts	0x0F26, r1	; 0x800f26 <twi_slarw>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:255
  twi_slarw |= address << 1;
    2b3a:	90 91 26 0f 	lds	r25, 0x0F26	; 0x800f26 <twi_slarw>
    2b3e:	88 0f       	add	r24, r24
    2b40:	89 2b       	or	r24, r25
    2b42:	80 93 26 0f 	sts	0x0F26, r24	; 0x800f26 <twi_slarw>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:260

  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    2b46:	80 91 25 0f 	lds	r24, 0x0F25	; 0x800f25 <twi_inRepStart>
    2b4a:	81 30       	cpi	r24, 0x01	; 1
    2b4c:	49 f5       	brne	.+82     	; 0x2ba0 <TwoWire::endTransmission()+0xaa>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:267
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // Remember, we're dealing with an ASYNC ISR
    2b4e:	10 92 25 0f 	sts	0x0F25, r1	; 0x800f25 <twi_inRepStart>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:269
    do {
      TWDR = twi_slarw;
    2b52:	80 91 26 0f 	lds	r24, 0x0F26	; 0x800f26 <twi_slarw>
    2b56:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:270
    } while(TWCR & _BV(TWWC));
    2b5a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2b5e:	83 fd       	sbrc	r24, 3
    2b60:	f8 cf       	rjmp	.-16     	; 0x2b52 <TwoWire::endTransmission()+0x5c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:271
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
    2b62:	85 ec       	ldi	r24, 0xC5	; 197
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:275
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
    2b64:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:278

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    2b68:	80 91 2b 0f 	lds	r24, 0x0F2B	; 0x800f2b <twi_state>
    2b6c:	82 30       	cpi	r24, 0x02	; 2
    2b6e:	e1 f3       	breq	.-8      	; 0x2b68 <TwoWire::endTransmission()+0x72>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:282
    continue;
  }

  if (twi_error == 0xFF)
    2b70:	80 91 29 0f 	lds	r24, 0x0F29	; 0x800f29 <twi_error>
    2b74:	8f 3f       	cpi	r24, 0xFF	; 255
    2b76:	b1 f0       	breq	.+44     	; 0x2ba4 <TwoWire::endTransmission()+0xae>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:284
    return 0; // success
  else if (twi_error == TW_MT_SLA_NACK)
    2b78:	80 91 29 0f 	lds	r24, 0x0F29	; 0x800f29 <twi_error>
    2b7c:	80 32       	cpi	r24, 0x20	; 32
    2b7e:	a1 f0       	breq	.+40     	; 0x2ba8 <TwoWire::endTransmission()+0xb2>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:286
    return 2; // error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    2b80:	80 91 29 0f 	lds	r24, 0x0F29	; 0x800f29 <twi_error>
    2b84:	80 33       	cpi	r24, 0x30	; 48
    2b86:	91 f0       	breq	.+36     	; 0x2bac <TwoWire::endTransmission()+0xb6>
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:289
    return 3; // error: data send, nack received
  else
    return 4; // other twi error
    2b88:	84 e0       	ldi	r24, 0x04	; 4
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:175
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    2b8a:	10 92 e2 0e 	sts	0x0EE2, r1	; 0x800ee2 <TwoWire::txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:176
  txBufferLength = 0;
    2b8e:	10 92 e1 0e 	sts	0x0EE1, r1	; 0x800ee1 <TwoWire::txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:178
  // indicate that we are done transmitting
  transmitting = 0;
    2b92:	10 92 e4 0e 	sts	0x0EE4, r1	; 0x800ee4 <TwoWire::transmitting>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:188
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
}
    2b96:	08 95       	ret
twi_writeTo():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:250
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;

  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    twi_masterBuffer[i] = data[i];
    2b98:	3d 91       	ld	r19, X+
    2b9a:	31 93       	st	Z+, r19
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:249
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;

  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    2b9c:	9f 5f       	subi	r25, 0xFF	; 255
    2b9e:	c9 cf       	rjmp	.-110    	; 0x2b32 <TwoWire::endTransmission()+0x3c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:275
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
    2ba0:	85 ee       	ldi	r24, 0xE5	; 229
    2ba2:	e0 cf       	rjmp	.-64     	; 0x2b64 <TwoWire::endTransmission()+0x6e>
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:283
  while(wait && (TWI_MTX == twi_state)){
    continue;
  }

  if (twi_error == 0xFF)
    return 0; // success
    2ba4:	80 e0       	ldi	r24, 0x00	; 0
    2ba6:	f1 cf       	rjmp	.-30     	; 0x2b8a <TwoWire::endTransmission()+0x94>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:285
  else if (twi_error == TW_MT_SLA_NACK)
    return 2; // error: address send, nack received
    2ba8:	82 e0       	ldi	r24, 0x02	; 2
    2baa:	ef cf       	rjmp	.-34     	; 0x2b8a <TwoWire::endTransmission()+0x94>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:287
  else if (twi_error == TW_MT_DATA_NACK)
    return 3; // error: data send, nack received
    2bac:	83 e0       	ldi	r24, 0x03	; 3
    2bae:	ed cf       	rjmp	.-38     	; 0x2b8a <TwoWire::endTransmission()+0x94>

00002bb0 <ds2482reset(unsigned char)>:
_Z11ds2482reseth():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:170
	if(i2c_write(DS2482_C_DRST)==FALSE) { i2c_stop();return DS2482_ERR_WRITE; }
	i2c_stop();
	return DS2482_ERR_OK;
	*/        

        Wire.beginTransmission(address);
    2bb0:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <TwoWire::beginTransmission(unsigned char) [clone .constprop.181]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:171
        Wire.write(DS2482_C_DRST);
    2bb4:	80 ef       	ldi	r24, 0xF0	; 240
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	0e 94 76 15 	call	0x2aec	; 0x2aec <TwoWire::write(int) [clone .constprop.116]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:172
        if (Wire.endTransmission() == I2C_ERROR_OK)
    2bbc:	86 ef       	ldi	r24, 0xF6	; 246
    2bbe:	91 e1       	ldi	r25, 0x11	; 17
    2bc0:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <TwoWire::endTransmission()>
    2bc4:	81 11       	cpse	r24, r1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:175
          return DS2482_ERR_OK;
        else
          return DS2482_ERR_I2C_DEVICE;        
    2bc6:	8a e0       	ldi	r24, 0x0A	; 10
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:177

}
    2bc8:	08 95       	ret

00002bca <RTC_DS1307::adjust(DateTime const&)>:
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:254
  Wire.requestFrom(DS1307_ADDRESS, 1);
  uint8_t ss = Wire._I2C_READ();
  return !(ss>>7);
}

void RTC_DS1307::adjust(const DateTime& dt) {
    2bca:	1f 93       	push	r17
    2bcc:	cf 93       	push	r28
    2bce:	df 93       	push	r29
    2bd0:	ec 01       	movw	r28, r24
beginTransmission():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:154
  txBufferLength = 0;
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
    2bd2:	88 e6       	ldi	r24, 0x68	; 104
    2bd4:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <TwoWire::beginTransmission(unsigned char) [clone .constprop.181]>
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:256
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
    2bd8:	60 e0       	ldi	r22, 0x00	; 0
    2bda:	86 ef       	ldi	r24, 0xF6	; 246
    2bdc:	91 e1       	ldi	r25, 0x11	; 17
    2bde:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <TwoWire::write(unsigned char)>
    2be2:	2d 81       	ldd	r18, Y+5	; 0x05
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
    2be4:	1a e0       	ldi	r17, 0x0A	; 10
    2be6:	82 2f       	mov	r24, r18
    2be8:	61 2f       	mov	r22, r17
    2bea:	0e 94 a6 8b 	call	0x1174c	; 0x1174c <__udivmodqi4>
    2bee:	68 2f       	mov	r22, r24
    2bf0:	66 0f       	add	r22, r22
    2bf2:	68 0f       	add	r22, r24
    2bf4:	66 0f       	add	r22, r22
    2bf6:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:258

void RTC_DS1307::adjust(const DateTime& dt) {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
  //Wire._I2C_WRITE(0x80);
  Wire._I2C_WRITE(bin2bcd(dt.second()));
    2bf8:	86 ef       	ldi	r24, 0xF6	; 246
    2bfa:	91 e1       	ldi	r25, 0x11	; 17
    2bfc:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <TwoWire::write(unsigned char)>
    2c00:	2c 81       	ldd	r18, Y+4	; 0x04
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
    2c02:	82 2f       	mov	r24, r18
    2c04:	61 2f       	mov	r22, r17
    2c06:	0e 94 a6 8b 	call	0x1174c	; 0x1174c <__udivmodqi4>
    2c0a:	68 2f       	mov	r22, r24
    2c0c:	66 0f       	add	r22, r22
    2c0e:	68 0f       	add	r22, r24
    2c10:	66 0f       	add	r22, r22
    2c12:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:259
void RTC_DS1307::adjust(const DateTime& dt) {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
  //Wire._I2C_WRITE(0x80);
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
    2c14:	86 ef       	ldi	r24, 0xF6	; 246
    2c16:	91 e1       	ldi	r25, 0x11	; 17
    2c18:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <TwoWire::write(unsigned char)>
    2c1c:	2b 81       	ldd	r18, Y+3	; 0x03
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
    2c1e:	82 2f       	mov	r24, r18
    2c20:	61 2f       	mov	r22, r17
    2c22:	0e 94 a6 8b 	call	0x1174c	; 0x1174c <__udivmodqi4>
    2c26:	68 2f       	mov	r22, r24
    2c28:	66 0f       	add	r22, r22
    2c2a:	68 0f       	add	r22, r24
    2c2c:	66 0f       	add	r22, r22
    2c2e:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:260
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
  //Wire._I2C_WRITE(0x80);
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
    2c30:	86 ef       	ldi	r24, 0xF6	; 246
    2c32:	91 e1       	ldi	r25, 0x11	; 17
    2c34:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:261
  Wire._I2C_WRITE(bin2bcd(0));
    2c38:	60 e0       	ldi	r22, 0x00	; 0
    2c3a:	86 ef       	ldi	r24, 0xF6	; 246
    2c3c:	91 e1       	ldi	r25, 0x11	; 17
    2c3e:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <TwoWire::write(unsigned char)>
    2c42:	2a 81       	ldd	r18, Y+2	; 0x02
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
    2c44:	82 2f       	mov	r24, r18
    2c46:	61 2f       	mov	r22, r17
    2c48:	0e 94 a6 8b 	call	0x1174c	; 0x1174c <__udivmodqi4>
    2c4c:	68 2f       	mov	r22, r24
    2c4e:	66 0f       	add	r22, r22
    2c50:	68 0f       	add	r22, r24
    2c52:	66 0f       	add	r22, r22
    2c54:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:262
  //Wire._I2C_WRITE(0x80);
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
    2c56:	86 ef       	ldi	r24, 0xF6	; 246
    2c58:	91 e1       	ldi	r25, 0x11	; 17
    2c5a:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <TwoWire::write(unsigned char)>
    2c5e:	29 81       	ldd	r18, Y+1	; 0x01
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
    2c60:	82 2f       	mov	r24, r18
    2c62:	61 2f       	mov	r22, r17
    2c64:	0e 94 a6 8b 	call	0x1174c	; 0x1174c <__udivmodqi4>
    2c68:	68 2f       	mov	r22, r24
    2c6a:	66 0f       	add	r22, r22
    2c6c:	68 0f       	add	r22, r24
    2c6e:	66 0f       	add	r22, r22
    2c70:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:263
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
  Wire._I2C_WRITE(bin2bcd(dt.month()));
    2c72:	86 ef       	ldi	r24, 0xF6	; 246
    2c74:	91 e1       	ldi	r25, 0x11	; 17
    2c76:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <TwoWire::write(unsigned char)>
    2c7a:	28 81       	ld	r18, Y
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
    2c7c:	82 2f       	mov	r24, r18
    2c7e:	61 2f       	mov	r22, r17
    2c80:	0e 94 a6 8b 	call	0x1174c	; 0x1174c <__udivmodqi4>
    2c84:	68 2f       	mov	r22, r24
    2c86:	66 0f       	add	r22, r22
    2c88:	68 0f       	add	r22, r24
    2c8a:	66 0f       	add	r22, r22
    2c8c:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:264
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
  Wire._I2C_WRITE(bin2bcd(dt.month()));
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000));
    2c8e:	86 ef       	ldi	r24, 0xF6	; 246
    2c90:	91 e1       	ldi	r25, 0x11	; 17
    2c92:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:265
  Wire.endTransmission();
    2c96:	86 ef       	ldi	r24, 0xF6	; 246
    2c98:	91 e1       	ldi	r25, 0x11	; 17
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:266
}
    2c9a:	df 91       	pop	r29
    2c9c:	cf 91       	pop	r28
    2c9e:	1f 91       	pop	r17
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:265
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
  Wire._I2C_WRITE(bin2bcd(dt.month()));
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000));
  Wire.endTransmission();
    2ca0:	0c 94 7b 15 	jmp	0x2af6	; 0x2af6 <TwoWire::endTransmission()>

00002ca4 <PubSubClient::connected()>:
_ZN12PubSubClient9connectedEv():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:538
    buf[pos-i-1] = (i & 0xFF);
    return pos;
}


boolean PubSubClient::connected() {
    2ca4:	cf 93       	push	r28
    2ca6:	df 93       	push	r29
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:540
    boolean rc;
    if (_client == NULL ) {
    2ca8:	fc 01       	movw	r30, r24
    2caa:	a0 81       	ld	r26, Z
    2cac:	b1 81       	ldd	r27, Z+1	; 0x01
    2cae:	10 97       	sbiw	r26, 0x00	; 0
    2cb0:	21 f4       	brne	.+8      	; 0x2cba <PubSubClient::connected()+0x16>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:543
        rc = false;
    } else {
        rc = (int)_client->connected();
    2cb2:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:553
                _client->stop();
            }
        }
    }
    return rc;
}
    2cb4:	df 91       	pop	r29
    2cb6:	cf 91       	pop	r28
    2cb8:	08 95       	ret
    2cba:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:543
boolean PubSubClient::connected() {
    boolean rc;
    if (_client == NULL ) {
        rc = false;
    } else {
        rc = (int)_client->connected();
    2cbc:	ed 91       	ld	r30, X+
    2cbe:	fc 91       	ld	r31, X
    2cc0:	11 97       	sbiw	r26, 0x01	; 1
    2cc2:	06 88       	ldd	r0, Z+22	; 0x16
    2cc4:	f7 89       	ldd	r31, Z+23	; 0x17
    2cc6:	e0 2d       	mov	r30, r0
    2cc8:	cd 01       	movw	r24, r26
    2cca:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:544
        if (!rc) {
    2ccc:	81 11       	cpse	r24, r1
    2cce:	1e c0       	rjmp	.+60     	; 0x2d0c <PubSubClient::connected()+0x68>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:545
            if (this->_state == MQTT_CONNECTED) {
    2cd0:	fe 01       	movw	r30, r28
    2cd2:	e5 5e       	subi	r30, 0xE5	; 229
    2cd4:	fd 4f       	sbci	r31, 0xFD	; 253
    2cd6:	80 81       	ld	r24, Z
    2cd8:	91 81       	ldd	r25, Z+1	; 0x01
    2cda:	89 2b       	or	r24, r25
    2cdc:	51 f7       	brne	.-44     	; 0x2cb2 <PubSubClient::connected()+0xe>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:546
                this->_state = MQTT_CONNECTION_LOST;
    2cde:	8d ef       	ldi	r24, 0xFD	; 253
    2ce0:	9f ef       	ldi	r25, 0xFF	; 255
    2ce2:	91 83       	std	Z+1, r25	; 0x01
    2ce4:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:547
                _client->flush();
    2ce6:	88 81       	ld	r24, Y
    2ce8:	99 81       	ldd	r25, Y+1	; 0x01
    2cea:	dc 01       	movw	r26, r24
    2cec:	ed 91       	ld	r30, X+
    2cee:	fc 91       	ld	r31, X
    2cf0:	06 80       	ldd	r0, Z+6	; 0x06
    2cf2:	f7 81       	ldd	r31, Z+7	; 0x07
    2cf4:	e0 2d       	mov	r30, r0
    2cf6:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:548
                _client->stop();
    2cf8:	88 81       	ld	r24, Y
    2cfa:	99 81       	ldd	r25, Y+1	; 0x01
    2cfc:	dc 01       	movw	r26, r24
    2cfe:	ed 91       	ld	r30, X+
    2d00:	fc 91       	ld	r31, X
    2d02:	04 88       	ldd	r0, Z+20	; 0x14
    2d04:	f5 89       	ldd	r31, Z+21	; 0x15
    2d06:	e0 2d       	mov	r30, r0
    2d08:	19 95       	eicall
    2d0a:	d3 cf       	rjmp	.-90     	; 0x2cb2 <PubSubClient::connected()+0xe>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:543
boolean PubSubClient::connected() {
    boolean rc;
    if (_client == NULL ) {
        rc = false;
    } else {
        rc = (int)_client->connected();
    2d0c:	81 e0       	ldi	r24, 0x01	; 1
    2d0e:	d2 cf       	rjmp	.-92     	; 0x2cb4 <PubSubClient::connected()+0x10>

00002d10 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>:
_ZN12PubSubClient5writeEhPhj():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:426
    lastOutActivity = millis();

    return rc == tlen + 4 + plength;
}

boolean PubSubClient::write(uint8_t header, uint8_t* buf, uint16_t length) {
    2d10:	bf 92       	push	r11
    2d12:	cf 92       	push	r12
    2d14:	df 92       	push	r13
    2d16:	ef 92       	push	r14
    2d18:	ff 92       	push	r15
    2d1a:	0f 93       	push	r16
    2d1c:	1f 93       	push	r17
    2d1e:	cf 93       	push	r28
    2d20:	df 93       	push	r29
    2d22:	00 d0       	rcall	.+0      	; 0x2d24 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x14>
    2d24:	1f 92       	push	r1
    2d26:	cd b7       	in	r28, 0x3d	; 61
    2d28:	de b7       	in	r29, 0x3e	; 62
    2d2a:	7c 01       	movw	r14, r24
    2d2c:	b6 2e       	mov	r11, r22
    2d2e:	89 01       	movw	r16, r18
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:432
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
    2d30:	c9 01       	movw	r24, r18
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:428
    return rc == tlen + 4 + plength;
}

boolean PubSubClient::write(uint8_t header, uint8_t* buf, uint16_t length) {
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    2d32:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:439
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
    2d34:	be 01       	movw	r22, r28
    2d36:	6f 5f       	subi	r22, 0xFF	; 255
    2d38:	7f 4f       	sbci	r23, 0xFF	; 255
    2d3a:	6b 01       	movw	r12, r22
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:434
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
    2d3c:	28 2f       	mov	r18, r24
    2d3e:	2f 77       	andi	r18, 0x7F	; 127
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:435
        len = len / 128;
    2d40:	88 0f       	add	r24, r24
    2d42:	89 2f       	mov	r24, r25
    2d44:	88 1f       	adc	r24, r24
    2d46:	99 0b       	sbc	r25, r25
    2d48:	91 95       	neg	r25
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:436
        if (len > 0) {
    2d4a:	00 97       	sbiw	r24, 0x00	; 0
    2d4c:	09 f0       	breq	.+2      	; 0x2d50 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x40>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:437
            digit |= 0x80;
    2d4e:	20 68       	ori	r18, 0x80	; 128
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:439
        }
        lenBuf[pos++] = digit;
    2d50:	f6 01       	movw	r30, r12
    2d52:	e3 0f       	add	r30, r19
    2d54:	f1 1d       	adc	r31, r1
    2d56:	20 83       	st	Z, r18
    2d58:	3f 5f       	subi	r19, 0xFF	; 255
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:441
        llen++;
    } while(len>0);
    2d5a:	00 97       	sbiw	r24, 0x00	; 0
    2d5c:	79 f7       	brne	.-34     	; 0x2d3c <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x2c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:443

    buf[4-llen] = header;
    2d5e:	e3 2f       	mov	r30, r19
    2d60:	f0 e0       	ldi	r31, 0x00	; 0
    2d62:	ba 01       	movw	r22, r20
    2d64:	6e 1b       	sub	r22, r30
    2d66:	7f 0b       	sbc	r23, r31
    2d68:	6c 5f       	subi	r22, 0xFC	; 252
    2d6a:	7f 4f       	sbci	r23, 0xFF	; 255
    2d6c:	db 01       	movw	r26, r22
    2d6e:	bc 92       	st	X, r11
    2d70:	4e 1b       	sub	r20, r30
    2d72:	5f 0b       	sbc	r21, r31
    2d74:	4b 5f       	subi	r20, 0xFB	; 251
    2d76:	5f 4f       	sbci	r21, 0xFF	; 255
    2d78:	c6 01       	movw	r24, r12
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:444
    for (int i=0;i<llen;i++) {
    2d7a:	9c 01       	movw	r18, r24
    2d7c:	2c 19       	sub	r18, r12
    2d7e:	3d 09       	sbc	r19, r13
    2d80:	2e 17       	cp	r18, r30
    2d82:	3f 07       	cpc	r19, r31
    2d84:	3c f4       	brge	.+14     	; 0x2d94 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x84>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:445
        buf[5-llen+i] = lenBuf[i];
    2d86:	dc 01       	movw	r26, r24
    2d88:	2d 91       	ld	r18, X+
    2d8a:	cd 01       	movw	r24, r26
    2d8c:	da 01       	movw	r26, r20
    2d8e:	2d 93       	st	X+, r18
    2d90:	ad 01       	movw	r20, r26
    2d92:	f3 cf       	rjmp	.-26     	; 0x2d7a <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x6a>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:462
        bytesRemaining -= rc;
        writeBuf += rc;
    }
    return result;
#else
    rc = _client->write(buf+(4-llen),length+1+llen);
    2d94:	d7 01       	movw	r26, r14
    2d96:	8d 91       	ld	r24, X+
    2d98:	9c 91       	ld	r25, X
    2d9a:	0f 5f       	subi	r16, 0xFF	; 255
    2d9c:	1f 4f       	sbci	r17, 0xFF	; 255
    2d9e:	0e 0f       	add	r16, r30
    2da0:	1f 1f       	adc	r17, r31
    2da2:	dc 01       	movw	r26, r24
    2da4:	ed 91       	ld	r30, X+
    2da6:	fc 91       	ld	r31, X
    2da8:	02 80       	ldd	r0, Z+2	; 0x02
    2daa:	f3 81       	ldd	r31, Z+3	; 0x03
    2dac:	e0 2d       	mov	r30, r0
    2dae:	a8 01       	movw	r20, r16
    2db0:	19 95       	eicall
    2db2:	6c 01       	movw	r12, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:463
    lastOutActivity = millis();
    2db4:	0e 94 28 13 	call	0x2650	; 0x2650 <millis>
    2db8:	f7 01       	movw	r30, r14
    2dba:	ec 5f       	subi	r30, 0xFC	; 252
    2dbc:	fd 4f       	sbci	r31, 0xFD	; 253
    2dbe:	60 83       	st	Z, r22
    2dc0:	71 83       	std	Z+1, r23	; 0x01
    2dc2:	82 83       	std	Z+2, r24	; 0x02
    2dc4:	93 83       	std	Z+3, r25	; 0x03
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:464
    return (rc == 1+llen+length);
    2dc6:	81 e0       	ldi	r24, 0x01	; 1
    2dc8:	0c 15       	cp	r16, r12
    2dca:	1d 05       	cpc	r17, r13
    2dcc:	09 f0       	breq	.+2      	; 0x2dd0 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0xc0>
    2dce:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:466
#endif
}
    2dd0:	0f 90       	pop	r0
    2dd2:	0f 90       	pop	r0
    2dd4:	0f 90       	pop	r0
    2dd6:	0f 90       	pop	r0
    2dd8:	df 91       	pop	r29
    2dda:	cf 91       	pop	r28
    2ddc:	1f 91       	pop	r17
    2dde:	0f 91       	pop	r16
    2de0:	ff 90       	pop	r15
    2de2:	ef 90       	pop	r14
    2de4:	df 90       	pop	r13
    2de6:	cf 90       	pop	r12
    2de8:	bf 90       	pop	r11
    2dea:	08 95       	ret

00002dec <W5500Class::resetSS()>:
_ZN10W5500Class7resetSSEv():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:342

private:
  // could do inline optimizations
  static inline void initSS()  { pinMode(SPI_CS, OUTPUT); }
  static inline void setSS()   {  digitalWrite(SPI_CS, LOW); }
  static inline void resetSS() {  digitalWrite(SPI_CS, HIGH); }
    2dec:	61 e0       	ldi	r22, 0x01	; 1
    2dee:	80 91 d8 0e 	lds	r24, 0x0ED8	; 0x800ed8 <SPI_CS>
    2df2:	0c 94 3a 11 	jmp	0x2274	; 0x2274 <digitalWrite>

00002df6 <W5500Class::setSS()>:
_ZN10W5500Class5setSSEv():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:341
  static const uint16_t RSIZE = 2048; // Max Rx buffer size

private:
  // could do inline optimizations
  static inline void initSS()  { pinMode(SPI_CS, OUTPUT); }
  static inline void setSS()   {  digitalWrite(SPI_CS, LOW); }
    2df6:	60 e0       	ldi	r22, 0x00	; 0
    2df8:	80 91 d8 0e 	lds	r24, 0x0ED8	; 0x800ed8 <SPI_CS>
    2dfc:	0c 94 3a 11 	jmp	0x2274	; 0x2274 <digitalWrite>

00002e00 <SPIClass::endTransaction()>:
_ZN8SPIClass14endTransactionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:287
      #endif
      {
        SREG = interruptSave;
      }
    }
  }
    2e00:	08 95       	ret

00002e02 <SPIClass::transfer(unsigned char)>:
_ZN8SPIClass8transferEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:212
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
    2e02:	8e bd       	out	0x2e, r24	; 46
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:219
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
    2e04:	00 00       	nop
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:220
    while (!(SPSR & _BV(SPIF))) ; // wait
    2e06:	0d b4       	in	r0, 0x2d	; 45
    2e08:	07 fe       	sbrs	r0, 7
    2e0a:	fd cf       	rjmp	.-6      	; 0x2e06 <SPIClass::transfer(unsigned char)+0x4>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:221
    return SPDR;
    2e0c:	8e b5       	in	r24, 0x2e	; 46
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:222
  }
    2e0e:	08 95       	ret

00002e10 <SPIClass::beginTransaction(SPISettings)>:
_ZN8SPIClass16beginTransactionE11SPISettings():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:206
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
    2e10:	8c bd       	out	0x2c, r24	; 44
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:207
    SPSR = settings.spsr;
    2e12:	9d bd       	out	0x2d, r25	; 45
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:208
  }
    2e14:	08 95       	ret

00002e16 <W5500Class::read(unsigned int, unsigned char)>:
_ZN10W5500Class4readEjh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:134

    return _len;
}

uint8_t W5500Class::read(uint16_t _addr, uint8_t _cb)
{
    2e16:	cf 93       	push	r28
    2e18:	df 93       	push	r29
    2e1a:	d8 2f       	mov	r29, r24
    2e1c:	c6 2f       	mov	r28, r22
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:135
    SPI.beginTransaction(wiznet_SPI_settings);
    2e1e:	80 91 d5 0f 	lds	r24, 0x0FD5	; 0x800fd5 <wiznet_SPI_settings>
    2e22:	90 91 d6 0f 	lds	r25, 0x0FD6	; 0x800fd6 <wiznet_SPI_settings+0x1>
    2e26:	0e 94 08 17 	call	0x2e10	; 0x2e10 <SPIClass::beginTransaction(SPISettings)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:136
    setSS();
    2e2a:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <W5500Class::setSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:137
    SPI.transfer(_addr >> 8);
    2e2e:	80 e0       	ldi	r24, 0x00	; 0
    2e30:	0e 94 01 17 	call	0x2e02	; 0x2e02 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:138
    SPI.transfer(_addr & 0xFF);
    2e34:	8d 2f       	mov	r24, r29
    2e36:	0e 94 01 17 	call	0x2e02	; 0x2e02 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:139
    SPI.transfer(_cb);
    2e3a:	8c 2f       	mov	r24, r28
    2e3c:	0e 94 01 17 	call	0x2e02	; 0x2e02 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:140
    uint8_t _data = SPI.transfer(0);
    2e40:	80 e0       	ldi	r24, 0x00	; 0
    2e42:	0e 94 01 17 	call	0x2e02	; 0x2e02 <SPIClass::transfer(unsigned char)>
    2e46:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:141
    resetSS();
    2e48:	0e 94 f6 16 	call	0x2dec	; 0x2dec <W5500Class::resetSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:145
    SPI.endTransaction();

    return _data;
}
    2e4c:	8c 2f       	mov	r24, r28
    2e4e:	df 91       	pop	r29
    2e50:	cf 91       	pop	r28
    2e52:	08 95       	ret

00002e54 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>:
_ZN10W5500Class5writeEjhPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:118

    return 1;
}

uint16_t W5500Class::write(uint16_t _addr, uint8_t _cb, const uint8_t *_buf, uint16_t _len)
{
    2e54:	df 92       	push	r13
    2e56:	ef 92       	push	r14
    2e58:	ff 92       	push	r15
    2e5a:	0f 93       	push	r16
    2e5c:	1f 93       	push	r17
    2e5e:	cf 93       	push	r28
    2e60:	df 93       	push	r29
    2e62:	d8 2f       	mov	r29, r24
    2e64:	d9 2e       	mov	r13, r25
    2e66:	c6 2f       	mov	r28, r22
    2e68:	7a 01       	movw	r14, r20
    2e6a:	89 01       	movw	r16, r18
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:119
    SPI.beginTransaction(wiznet_SPI_settings);
    2e6c:	80 91 d5 0f 	lds	r24, 0x0FD5	; 0x800fd5 <wiznet_SPI_settings>
    2e70:	90 91 d6 0f 	lds	r25, 0x0FD6	; 0x800fd6 <wiznet_SPI_settings+0x1>
    2e74:	0e 94 08 17 	call	0x2e10	; 0x2e10 <SPIClass::beginTransaction(SPISettings)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:120
    setSS();
    2e78:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <W5500Class::setSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:121
    SPI.transfer(_addr >> 8);
    2e7c:	8d 2d       	mov	r24, r13
    2e7e:	0e 94 01 17 	call	0x2e02	; 0x2e02 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:122
    SPI.transfer(_addr & 0xFF);
    2e82:	8d 2f       	mov	r24, r29
    2e84:	0e 94 01 17 	call	0x2e02	; 0x2e02 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:123
    SPI.transfer(_cb);
    2e88:	8c 2f       	mov	r24, r28
    2e8a:	0e 94 01 17 	call	0x2e02	; 0x2e02 <SPIClass::transfer(unsigned char)>
    2e8e:	e7 01       	movw	r28, r14
    2e90:	e0 0e       	add	r14, r16
    2e92:	f1 1e       	adc	r15, r17
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:124
    for (uint16_t i=0; i<_len; i++){
    2e94:	ce 15       	cp	r28, r14
    2e96:	df 05       	cpc	r29, r15
    2e98:	21 f0       	breq	.+8      	; 0x2ea2 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)+0x4e>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:125
        SPI.transfer(_buf[i]);
    2e9a:	89 91       	ld	r24, Y+
    2e9c:	0e 94 01 17 	call	0x2e02	; 0x2e02 <SPIClass::transfer(unsigned char)>
    2ea0:	f9 cf       	rjmp	.-14     	; 0x2e94 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)+0x40>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:127
    }
    resetSS();
    2ea2:	0e 94 f6 16 	call	0x2dec	; 0x2dec <W5500Class::resetSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:131
    SPI.endTransaction();

    return _len;
}
    2ea6:	c8 01       	movw	r24, r16
    2ea8:	df 91       	pop	r29
    2eaa:	cf 91       	pop	r28
    2eac:	1f 91       	pop	r17
    2eae:	0f 91       	pop	r16
    2eb0:	ff 90       	pop	r15
    2eb2:	ef 90       	pop	r14
    2eb4:	df 90       	pop	r13
    2eb6:	08 95       	ret

00002eb8 <W5500Class::write(unsigned int, unsigned char, unsigned char)>:
_ZN10W5500Class5writeEjhh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:104
    uint8_t cntl_byte = (0x18+(s<<5));
    read((uint16_t)src , cntl_byte, (uint8_t *)dst, len);
}

uint8_t W5500Class::write(uint16_t _addr, uint8_t _cb, uint8_t _data)
{
    2eb8:	1f 93       	push	r17
    2eba:	cf 93       	push	r28
    2ebc:	df 93       	push	r29
    2ebe:	18 2f       	mov	r17, r24
    2ec0:	d6 2f       	mov	r29, r22
    2ec2:	c4 2f       	mov	r28, r20
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:105
    SPI.beginTransaction(wiznet_SPI_settings);
    2ec4:	80 91 d5 0f 	lds	r24, 0x0FD5	; 0x800fd5 <wiznet_SPI_settings>
    2ec8:	90 91 d6 0f 	lds	r25, 0x0FD6	; 0x800fd6 <wiznet_SPI_settings+0x1>
    2ecc:	0e 94 08 17 	call	0x2e10	; 0x2e10 <SPIClass::beginTransaction(SPISettings)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:106
    setSS();  
    2ed0:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <W5500Class::setSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:107
    SPI.transfer(_addr >> 8);
    2ed4:	80 e0       	ldi	r24, 0x00	; 0
    2ed6:	0e 94 01 17 	call	0x2e02	; 0x2e02 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:108
    SPI.transfer(_addr & 0xFF);
    2eda:	81 2f       	mov	r24, r17
    2edc:	0e 94 01 17 	call	0x2e02	; 0x2e02 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:109
    SPI.transfer(_cb);
    2ee0:	8d 2f       	mov	r24, r29
    2ee2:	0e 94 01 17 	call	0x2e02	; 0x2e02 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:110
    SPI.transfer(_data);
    2ee6:	8c 2f       	mov	r24, r28
    2ee8:	0e 94 01 17 	call	0x2e02	; 0x2e02 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:111
    resetSS();
    2eec:	0e 94 f6 16 	call	0x2dec	; 0x2dec <W5500Class::resetSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:115
    SPI.endTransaction();

    return 1;
}
    2ef0:	81 e0       	ldi	r24, 0x01	; 1
    2ef2:	df 91       	pop	r29
    2ef4:	cf 91       	pop	r28
    2ef6:	1f 91       	pop	r17
    2ef8:	08 95       	ret

00002efa <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>:
_ZN10W5500Class7writeSnEhjh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:352
uint8_t W5500Class::readSn(SOCKET _s, uint16_t _addr) {
    uint8_t cntl_byte = (_s<<5)+0x08;
    return read(_addr, cntl_byte);
}

uint8_t W5500Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
    2efa:	9b 01       	movw	r18, r22
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:353
    uint8_t cntl_byte = (_s<<5)+0x0C;
    2efc:	82 95       	swap	r24
    2efe:	88 0f       	add	r24, r24
    2f00:	80 7e       	andi	r24, 0xE0	; 224
    2f02:	6c e0       	ldi	r22, 0x0C	; 12
    2f04:	68 0f       	add	r22, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:354
    return write(_addr, cntl_byte, _data);
    2f06:	c9 01       	movw	r24, r18
    2f08:	0c 94 5c 17 	jmp	0x2eb8	; 0x2eb8 <W5500Class::write(unsigned int, unsigned char, unsigned char)>

00002f0c <EthernetUDP::flush()>:
_ZN11EthernetUDP5flushEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:212
  ::peek(_sock, &b);
  return b;
}

void EthernetUDP::flush()
{
    2f0c:	cf 93       	push	r28
    2f0e:	df 93       	push	r29
    2f10:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:217
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5500 always behaves :)

  while (_remaining)
    2f12:	89 8d       	ldd	r24, Y+25	; 0x19
    2f14:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2f16:	89 2b       	or	r24, r25
    2f18:	41 f0       	breq	.+16     	; 0x2f2a <EthernetUDP::flush()+0x1e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:219
  {
    read();
    2f1a:	e8 81       	ld	r30, Y
    2f1c:	f9 81       	ldd	r31, Y+1	; 0x01
    2f1e:	02 84       	ldd	r0, Z+10	; 0x0a
    2f20:	f3 85       	ldd	r31, Z+11	; 0x0b
    2f22:	e0 2d       	mov	r30, r0
    2f24:	ce 01       	movw	r24, r28
    2f26:	19 95       	eicall
    2f28:	f4 cf       	rjmp	.-24     	; 0x2f12 <EthernetUDP::flush()+0x6>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:221
  }
}
    2f2a:	df 91       	pop	r29
    2f2c:	cf 91       	pop	r28
    2f2e:	08 95       	ret

00002f30 <EthernetUDP::write(unsigned char)>:
_ZN11EthernetUDP5writeEh():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:111
{
  return sendUDP(_sock);
}

size_t EthernetUDP::write(uint8_t byte)
{
    2f30:	cf 93       	push	r28
    2f32:	df 93       	push	r29
    2f34:	1f 92       	push	r1
    2f36:	cd b7       	in	r28, 0x3d	; 61
    2f38:	de b7       	in	r29, 0x3e	; 62
    2f3a:	69 83       	std	Y+1, r22	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:112
  return write(&byte, 1);
    2f3c:	dc 01       	movw	r26, r24
    2f3e:	ed 91       	ld	r30, X+
    2f40:	fc 91       	ld	r31, X
    2f42:	02 80       	ldd	r0, Z+2	; 0x02
    2f44:	f3 81       	ldd	r31, Z+3	; 0x03
    2f46:	e0 2d       	mov	r30, r0
    2f48:	41 e0       	ldi	r20, 0x01	; 1
    2f4a:	50 e0       	ldi	r21, 0x00	; 0
    2f4c:	be 01       	movw	r22, r28
    2f4e:	6f 5f       	subi	r22, 0xFF	; 255
    2f50:	7f 4f       	sbci	r23, 0xFF	; 255
    2f52:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:113
}
    2f54:	0f 90       	pop	r0
    2f56:	df 91       	pop	r29
    2f58:	cf 91       	pop	r28
    2f5a:	08 95       	ret

00002f5c <EthernetUDP::beginPacket(IPAddress, unsigned int)>:
_ZN11EthernetUDP11beginPacketE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:100
    return ret;
  }
}

int EthernetUDP::beginPacket(IPAddress ip, uint16_t port)
{
    2f5c:	1f 93       	push	r17
    2f5e:	cf 93       	push	r28
    2f60:	df 93       	push	r29
    2f62:	fb 01       	movw	r30, r22
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:101
  _offset = 0;
    2f64:	dc 01       	movw	r26, r24
    2f66:	58 96       	adiw	r26, 0x18	; 24
    2f68:	1c 92       	st	X, r1
    2f6a:	1e 92       	st	-X, r1
    2f6c:	57 97       	sbiw	r26, 0x17	; 23
startUDP():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:375
  return ret;
}

int startUDP(SOCKET s, uint8_t* addr, uint16_t port)
{
  if
    2f6e:	22 81       	ldd	r18, Z+2	; 0x02
    2f70:	21 11       	cpse	r18, r1
    2f72:	09 c0       	rjmp	.+18     	; 0x2f86 <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x2a>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:377
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
    2f74:	23 81       	ldd	r18, Z+3	; 0x03
    2f76:	21 11       	cpse	r18, r1
    2f78:	06 c0       	rjmp	.+12     	; 0x2f86 <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x2a>
    2f7a:	24 81       	ldd	r18, Z+4	; 0x04
    2f7c:	21 11       	cpse	r18, r1
    2f7e:	03 c0       	rjmp	.+6      	; 0x2f86 <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x2a>
    2f80:	25 81       	ldd	r18, Z+5	; 0x05
    2f82:	22 23       	and	r18, r18
    2f84:	39 f1       	breq	.+78     	; 0x2fd4 <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x78>
    2f86:	41 15       	cp	r20, r1
    2f88:	51 05       	cpc	r21, r1
    2f8a:	21 f1       	breq	.+72     	; 0x2fd4 <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x78>
    2f8c:	ea 01       	movw	r28, r20
_ZN11EthernetUDP11beginPacketE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:102
  return startUDP(_sock, rawIPAddress(ip), port);
    2f8e:	dc 01       	movw	r26, r24
    2f90:	1c 96       	adiw	r26, 0x0c	; 12
    2f92:	1c 91       	ld	r17, X
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    2f94:	af 01       	movw	r20, r30
    2f96:	4e 5f       	subi	r20, 0xFE	; 254
    2f98:	5f 4f       	sbci	r21, 0xFF	; 255
writeSn():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:363
    uint8_t cntl_byte = (_s<<5)+0x08;
    return read(_addr, cntl_byte, _buf, _len );
}

uint16_t W5500Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {
    uint8_t cntl_byte = (_s<<5)+0x0C;
    2f9a:	61 2f       	mov	r22, r17
    2f9c:	62 95       	swap	r22
    2f9e:	66 0f       	add	r22, r22
    2fa0:	60 7e       	andi	r22, 0xE0	; 224
    2fa2:	64 5f       	subi	r22, 0xF4	; 244
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:364
    return write(_addr, cntl_byte, _buf, _len);
    2fa4:	24 e0       	ldi	r18, 0x04	; 4
    2fa6:	30 e0       	ldi	r19, 0x00	; 0
    2fa8:	8c e0       	ldi	r24, 0x0C	; 12
    2faa:	90 e0       	ldi	r25, 0x00	; 0
    2fac:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
writeSnDPORT():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:312
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
  __SOCKET_REGISTER16(SnPORT,     0x0004)        // Source Port
  __SOCKET_REGISTER_N(SnDHAR,     0x0006, 6)     // Destination Hardw Addr
  __SOCKET_REGISTER_N(SnDIPR,     0x000C, 4)     // Destination IP Addr
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
    2fb0:	4d 2f       	mov	r20, r29
    2fb2:	60 e1       	ldi	r22, 0x10	; 16
    2fb4:	70 e0       	ldi	r23, 0x00	; 0
    2fb6:	81 2f       	mov	r24, r17
    2fb8:	0e 94 7d 17 	call	0x2efa	; 0x2efa <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
    2fbc:	4c 2f       	mov	r20, r28
    2fbe:	61 e1       	ldi	r22, 0x11	; 17
    2fc0:	70 e0       	ldi	r23, 0x00	; 0
    2fc2:	81 2f       	mov	r24, r17
    2fc4:	0e 94 7d 17 	call	0x2efa	; 0x2efa <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
    2fc8:	81 e0       	ldi	r24, 0x01	; 1
    2fca:	90 e0       	ldi	r25, 0x00	; 0
_ZN11EthernetUDP11beginPacketE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:103
}
    2fcc:	df 91       	pop	r29
    2fce:	cf 91       	pop	r28
    2fd0:	1f 91       	pop	r17
    2fd2:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:381
     ((port == 0x00))
    ) 
  {
    return 0;
    2fd4:	90 e0       	ldi	r25, 0x00	; 0
    2fd6:	80 e0       	ldi	r24, 0x00	; 0
    2fd8:	f9 cf       	rjmp	.-14     	; 0x2fcc <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x70>

00002fda <EthernetUDP::available()>:
_ZN11EthernetUDP9availableEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:69

/* return number of bytes available in the current packet,
   will return zero if parsePacket hasn't been called yet */
int EthernetUDP::available() {
  return _remaining;
}
    2fda:	fc 01       	movw	r30, r24
    2fdc:	81 8d       	ldd	r24, Z+25	; 0x19
    2fde:	92 8d       	ldd	r25, Z+26	; 0x1a
    2fe0:	08 95       	ret

00002fe2 <EthernetUDP::remotePort()>:
_ZN11EthernetUDP10remotePortEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.h:102
  virtual void flush();	// Finish reading the current packet

  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() { return _remoteIP; };
  // Return the port of the host who sent the current incoming packet
  virtual uint16_t remotePort() { return _remotePort; };
    2fe2:	fc 01       	movw	r30, r24
    2fe4:	85 89       	ldd	r24, Z+21	; 0x15
    2fe6:	96 89       	ldd	r25, Z+22	; 0x16
    2fe8:	08 95       	ret

00002fea <EthernetUDP::remoteIP()>:
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    2fea:	22 ee       	ldi	r18, 0xE2	; 226
    2fec:	32 e0       	ldi	r19, 0x02	; 2
    2fee:	fc 01       	movw	r30, r24
    2ff0:	31 83       	std	Z+1, r19	; 0x01
    2ff2:	20 83       	st	Z, r18
    2ff4:	fb 01       	movw	r30, r22
    2ff6:	41 89       	ldd	r20, Z+17	; 0x11
    2ff8:	52 89       	ldd	r21, Z+18	; 0x12
    2ffa:	63 89       	ldd	r22, Z+19	; 0x13
    2ffc:	74 89       	ldd	r23, Z+20	; 0x14
    2ffe:	fc 01       	movw	r30, r24
    3000:	42 83       	std	Z+2, r20	; 0x02
    3002:	53 83       	std	Z+3, r21	; 0x03
    3004:	64 83       	std	Z+4, r22	; 0x04
    3006:	75 83       	std	Z+5, r23	; 0x05
_ZN11EthernetUDP8remoteIPEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.h:100
  // Return the next byte from the current packet without moving on to the next byte
  virtual int peek();
  virtual void flush();	// Finish reading the current packet

  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() { return _remoteIP; };
    3008:	08 95       	ret

0000300a <UDP::beginMulticast(IPAddress, unsigned int)>:
_ZN3UDP14beginMulticastE9IPAddressj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Udp.h:45

class UDP : public Stream {

public:
  virtual uint8_t begin(uint16_t) =0;  // initialize, start listening on specified port. Returns 1 if successful, 0 if there are no sockets available to use
  virtual uint8_t beginMulticast(IPAddress, uint16_t) { return 0; }  // initialize, start listening on specified multicast IP address and port. Returns 1 if successful, 0 on failure
    300a:	80 e0       	ldi	r24, 0x00	; 0
    300c:	08 95       	ret

0000300e <EthernetClient::operator==(EthernetClient const&)>:
_ZN14EthernetClienteqERKS_():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:167
EthernetClient::operator bool() {
  return _sock != MAX_SOCK_NUM;
}

bool EthernetClient::operator==(const EthernetClient& rhs) {
  return _sock == rhs._sock && _sock != MAX_SOCK_NUM && rhs._sock != MAX_SOCK_NUM;
    300e:	fc 01       	movw	r30, r24
    3010:	94 85       	ldd	r25, Z+12	; 0x0c
    3012:	fb 01       	movw	r30, r22
    3014:	84 85       	ldd	r24, Z+12	; 0x0c
    3016:	98 13       	cpse	r25, r24
    3018:	03 c0       	rjmp	.+6      	; 0x3020 <EthernetClient::operator==(EthernetClient const&)+0x12>
    301a:	81 e0       	ldi	r24, 0x01	; 1
    301c:	98 30       	cpi	r25, 0x08	; 8
    301e:	09 f4       	brne	.+2      	; 0x3022 <EthernetClient::operator==(EthernetClient const&)+0x14>
    3020:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:168
}
    3022:	08 95       	ret

00003024 <EthernetClient::operator bool()>:
_ZN14EthernetClientcvbEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:163

// the next function allows us to use the client returned by
// EthernetServer::available() as the condition in an if-statement.

EthernetClient::operator bool() {
  return _sock != MAX_SOCK_NUM;
    3024:	21 e0       	ldi	r18, 0x01	; 1
    3026:	fc 01       	movw	r30, r24
    3028:	84 85       	ldd	r24, Z+12	; 0x0c
    302a:	88 30       	cpi	r24, 0x08	; 8
    302c:	09 f4       	brne	.+2      	; 0x3030 <EthernetClient::operator bool()+0xc>
    302e:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:164
}
    3030:	82 2f       	mov	r24, r18
    3032:	08 95       	ret

00003034 <dialog_yes_button_click(unsigned char)>:
_Z23dialog_yes_button_clickh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:216
}

void dialog_yes_button_click(uint8_t args)
{

}
    3034:	08 95       	ret

00003036 <EthernetClient::flush()>:
_ZN14EthernetClient5flushEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:124
  return b;
}

void EthernetClient::flush() {
  ::flush(_sock);
}
    3036:	08 95       	ret

00003038 <EthernetClient::write(unsigned char)>:
_ZN14EthernetClient5writeEh():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:73
  }

  return 1;
}

size_t EthernetClient::write(uint8_t b) {
    3038:	cf 93       	push	r28
    303a:	df 93       	push	r29
    303c:	1f 92       	push	r1
    303e:	cd b7       	in	r28, 0x3d	; 61
    3040:	de b7       	in	r29, 0x3e	; 62
    3042:	69 83       	std	Y+1, r22	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:74
  return write(&b, 1);
    3044:	dc 01       	movw	r26, r24
    3046:	ed 91       	ld	r30, X+
    3048:	fc 91       	ld	r31, X
    304a:	02 80       	ldd	r0, Z+2	; 0x02
    304c:	f3 81       	ldd	r31, Z+3	; 0x03
    304e:	e0 2d       	mov	r30, r0
    3050:	41 e0       	ldi	r20, 0x01	; 1
    3052:	50 e0       	ldi	r21, 0x00	; 0
    3054:	be 01       	movw	r22, r28
    3056:	6f 5f       	subi	r22, 0xFF	; 255
    3058:	7f 4f       	sbci	r23, 0xFF	; 255
    305a:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:75
}
    305c:	0f 90       	pop	r0
    305e:	df 91       	pop	r29
    3060:	cf 91       	pop	r28
    3062:	08 95       	ret

00003064 <EthernetClient::operator!=(EthernetClient const&)>:
_ZN14EthernetClientneERKS_():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.h:28
  virtual void flush();
  virtual void stop();
  virtual uint8_t connected();
  virtual operator bool();
  virtual bool operator==(const EthernetClient&);
  virtual bool operator!=(const EthernetClient& rhs) { return !this->operator==(rhs); };
    3064:	dc 01       	movw	r26, r24
    3066:	ed 91       	ld	r30, X+
    3068:	fc 91       	ld	r31, X
    306a:	02 8c       	ldd	r0, Z+26	; 0x1a
    306c:	f3 8d       	ldd	r31, Z+27	; 0x1b
    306e:	e0 2d       	mov	r30, r0
    3070:	19 95       	eicall
    3072:	91 e0       	ldi	r25, 0x01	; 1
    3074:	89 27       	eor	r24, r25
    3076:	08 95       	ret

00003078 <W5500Class::readSn(unsigned char, unsigned int)>:
_ZN10W5500Class6readSnEhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:347
  static inline void resetSS() {  digitalWrite(SPI_CS, HIGH); }
};

extern W5500Class w5500;

uint8_t W5500Class::readSn(SOCKET _s, uint16_t _addr) {
    3078:	9b 01       	movw	r18, r22
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:348
    uint8_t cntl_byte = (_s<<5)+0x08;
    307a:	82 95       	swap	r24
    307c:	88 0f       	add	r24, r24
    307e:	80 7e       	andi	r24, 0xE0	; 224
    3080:	68 e0       	ldi	r22, 0x08	; 8
    3082:	68 0f       	add	r22, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:349
    return read(_addr, cntl_byte);
    3084:	c9 01       	movw	r24, r18
    3086:	0c 94 0b 17 	jmp	0x2e16	; 0x2e16 <W5500Class::read(unsigned int, unsigned char)>

0000308a <W5500Class::send_data_processing_offset(unsigned char, unsigned int, unsigned char const*, unsigned int) [clone .constprop.27]>:
_ZN10W5500Class27send_data_processing_offsetEhjPKhj.constprop.27():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:74
  // This is same as having no offset in a call to send_data_processing_offset
  send_data_processing_offset(s, 0, data, len);

}

void W5500Class::send_data_processing_offset(SOCKET s, uint16_t data_offset, const uint8_t *data, uint16_t len)
    308a:	bf 92       	push	r11
    308c:	cf 92       	push	r12
    308e:	df 92       	push	r13
    3090:	ef 92       	push	r14
    3092:	ff 92       	push	r15
    3094:	0f 93       	push	r16
    3096:	1f 93       	push	r17
    3098:	cf 93       	push	r28
    309a:	df 93       	push	r29
    309c:	b8 2e       	mov	r11, r24
    309e:	6b 01       	movw	r12, r22
    30a0:	7a 01       	movw	r14, r20
    30a2:	89 01       	movw	r16, r18
readSnTX_WR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:319
  __SOCKET_REGISTER8(SnPROTO,     0x0014)        // Protocol in IP RAW Mode
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
    30a4:	64 e2       	ldi	r22, 0x24	; 36
    30a6:	70 e0       	ldi	r23, 0x00	; 0
    30a8:	0e 94 3c 18 	call	0x3078	; 0x3078 <W5500Class::readSn(unsigned char, unsigned int)>
    30ac:	c8 2f       	mov	r28, r24
    30ae:	65 e2       	ldi	r22, 0x25	; 37
    30b0:	70 e0       	ldi	r23, 0x00	; 0
    30b2:	8b 2d       	mov	r24, r11
    30b4:	0e 94 3c 18 	call	0x3078	; 0x3078 <W5500Class::readSn(unsigned char, unsigned int)>
    30b8:	d0 e0       	ldi	r29, 0x00	; 0
    30ba:	dc 2f       	mov	r29, r28
    30bc:	cc 27       	eor	r28, r28
_ZN10W5500Class27send_data_processing_offsetEhjPKhj.constprop.27():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:78
{
    uint16_t ptr = readSnTX_WR(s);
    uint8_t cntl_byte = (0x14+(s<<5));
    ptr += data_offset;
    30be:	8c 0d       	add	r24, r12
    30c0:	9d 2d       	mov	r25, r13
    30c2:	91 1d       	adc	r25, r1
    30c4:	c8 0f       	add	r28, r24
    30c6:	d9 1f       	adc	r29, r25
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:77
}

void W5500Class::send_data_processing_offset(SOCKET s, uint16_t data_offset, const uint8_t *data, uint16_t len)
{
    uint16_t ptr = readSnTX_WR(s);
    uint8_t cntl_byte = (0x14+(s<<5));
    30c8:	6b 2d       	mov	r22, r11
    30ca:	62 95       	swap	r22
    30cc:	66 0f       	add	r22, r22
    30ce:	60 7e       	andi	r22, 0xE0	; 224
    30d0:	6c 5e       	subi	r22, 0xEC	; 236
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:79
    ptr += data_offset;
    write(ptr, cntl_byte, data, len);
    30d2:	98 01       	movw	r18, r16
    30d4:	a7 01       	movw	r20, r14
    30d6:	ce 01       	movw	r24, r28
    30d8:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:80
    ptr += len;
    30dc:	c0 0f       	add	r28, r16
    30de:	d1 1f       	adc	r29, r17
writeSnTX_WR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:319
    30e0:	4d 2f       	mov	r20, r29
    30e2:	64 e2       	ldi	r22, 0x24	; 36
    30e4:	70 e0       	ldi	r23, 0x00	; 0
    30e6:	8b 2d       	mov	r24, r11
    30e8:	0e 94 7d 17 	call	0x2efa	; 0x2efa <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
    30ec:	4c 2f       	mov	r20, r28
    30ee:	65 e2       	ldi	r22, 0x25	; 37
    30f0:	70 e0       	ldi	r23, 0x00	; 0
    30f2:	8b 2d       	mov	r24, r11
_ZN10W5500Class27send_data_processing_offsetEhjPKhj.constprop.27():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:82
    writeSnTX_WR(s, ptr);
}
    30f4:	df 91       	pop	r29
    30f6:	cf 91       	pop	r28
    30f8:	1f 91       	pop	r17
    30fa:	0f 91       	pop	r16
    30fc:	ff 90       	pop	r15
    30fe:	ef 90       	pop	r14
    3100:	df 90       	pop	r13
    3102:	cf 90       	pop	r12
    3104:	bf 90       	pop	r11
writeSnTX_WR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:319
    3106:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>

0000310a <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.25]>:
_ZN10W5500Class9execCmdSnEh7SockCMD.constprop.25():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:163
    SPI.endTransaction();

    return _len;
}

void W5500Class::execCmdSn(SOCKET s, SockCMD _cmd) {
    310a:	cf 93       	push	r28
    310c:	c8 2f       	mov	r28, r24
    310e:	46 2f       	mov	r20, r22
writeSnCR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:306
    return readSn(_s, address, _buff, size);                 \
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
    3110:	61 e0       	ldi	r22, 0x01	; 1
    3112:	70 e0       	ldi	r23, 0x00	; 0
    3114:	0e 94 7d 17 	call	0x2efa	; 0x2efa <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
readSnCR():
    3118:	61 e0       	ldi	r22, 0x01	; 1
    311a:	70 e0       	ldi	r23, 0x00	; 0
    311c:	8c 2f       	mov	r24, r28
    311e:	0e 94 3c 18 	call	0x3078	; 0x3078 <W5500Class::readSn(unsigned char, unsigned int)>
_ZN10W5500Class9execCmdSnEh7SockCMD.constprop.25():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:167
    // Send command to socket
    writeSnCR(s, _cmd);
    // Wait for command to complete
    while (readSnCR(s))
    3122:	81 11       	cpse	r24, r1
    3124:	f9 cf       	rjmp	.-14     	; 0x3118 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.25]+0xe>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:169
    ;
}
    3126:	cf 91       	pop	r28
    3128:	08 95       	ret

0000312a <close(unsigned char)>:
_Z5closeh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:43

/**
 * @brief	This function close the socket and parameter is "s" which represent the socket number
 */
void close(SOCKET s)
{
    312a:	cf 93       	push	r28
    312c:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:44
  w5500.execCmdSn(s, Sock_CLOSE);
    312e:	60 e1       	ldi	r22, 0x10	; 16
    3130:	70 e0       	ldi	r23, 0x00	; 0
    3132:	0e 94 85 18 	call	0x310a	; 0x310a <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.25]>
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
    3136:	4f ef       	ldi	r20, 0xFF	; 255
    3138:	62 e0       	ldi	r22, 0x02	; 2
    313a:	70 e0       	ldi	r23, 0x00	; 0
    313c:	8c 2f       	mov	r24, r28
_Z5closeh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:46
  w5500.writeSnIR(s, 0xFF);
}
    313e:	cf 91       	pop	r28
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
    3140:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>

00003144 <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.20]>:
_Z6sockethhjh.part.0.constprop.20():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:16

/**
 * @brief	This Socket function initialize the channel in perticular mode, and set the port and wait for w5500 done it.
 * @return 	1 for success else 0.
 */
uint8_t socket(SOCKET s, uint8_t protocol, uint16_t port, uint8_t flag)
    3144:	0f 93       	push	r16
    3146:	1f 93       	push	r17
    3148:	cf 93       	push	r28
    314a:	df 93       	push	r29
    314c:	c8 2f       	mov	r28, r24
    314e:	d6 2f       	mov	r29, r22
    3150:	8a 01       	movw	r16, r20
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:20
{
  if ((protocol == SnMR::TCP) || (protocol == SnMR::UDP) || (protocol == SnMR::IPRAW) || (protocol == SnMR::MACRAW) || (protocol == SnMR::PPPOE))
  {
    close(s);
    3152:	0e 94 95 18 	call	0x312a	; 0x312a <close(unsigned char)>
writeSnMR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:305
  static uint16_t read##name(SOCKET _s, uint8_t *_buff) {    \
    return readSn(_s, address, _buff, size);                 \
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
    3156:	4d 2f       	mov	r20, r29
    3158:	70 e0       	ldi	r23, 0x00	; 0
    315a:	60 e0       	ldi	r22, 0x00	; 0
    315c:	8c 2f       	mov	r24, r28
    315e:	0e 94 7d 17 	call	0x2efa	; 0x2efa <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_Z6sockethhjh.part.0.constprop.20():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:22
    w5500.writeSnMR(s, protocol | flag);
    if (port != 0) {
    3162:	01 15       	cp	r16, r1
    3164:	11 05       	cpc	r17, r1
    3166:	b9 f0       	breq	.+46     	; 0x3196 <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.20]+0x52>
writeSnPORT():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:309
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
  __SOCKET_REGISTER16(SnPORT,     0x0004)        // Source Port
    3168:	41 2f       	mov	r20, r17
    316a:	64 e0       	ldi	r22, 0x04	; 4
    316c:	70 e0       	ldi	r23, 0x00	; 0
    316e:	8c 2f       	mov	r24, r28
    3170:	0e 94 7d 17 	call	0x2efa	; 0x2efa <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
    3174:	40 2f       	mov	r20, r16
    3176:	65 e0       	ldi	r22, 0x05	; 5
    3178:	70 e0       	ldi	r23, 0x00	; 0
    317a:	8c 2f       	mov	r24, r28
    317c:	0e 94 7d 17 	call	0x2efa	; 0x2efa <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_Z6sockethhjh.part.0.constprop.20():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:30
    else {
      local_port++; // if don't set the source port, set local_port number.
      w5500.writeSnPORT(s, local_port);
    }

    w5500.execCmdSn(s, Sock_OPEN);
    3180:	61 e0       	ldi	r22, 0x01	; 1
    3182:	70 e0       	ldi	r23, 0x00	; 0
    3184:	8c 2f       	mov	r24, r28
    3186:	0e 94 85 18 	call	0x310a	; 0x310a <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.25]>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:36
    
    return 1;
  }

  return 0;
}
    318a:	81 e0       	ldi	r24, 0x01	; 1
    318c:	df 91       	pop	r29
    318e:	cf 91       	pop	r28
    3190:	1f 91       	pop	r17
    3192:	0f 91       	pop	r16
    3194:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:26
    w5500.writeSnMR(s, protocol | flag);
    if (port != 0) {
      w5500.writeSnPORT(s, port);
    } 
    else {
      local_port++; // if don't set the source port, set local_port number.
    3196:	00 91 c8 0c 	lds	r16, 0x0CC8	; 0x800cc8 <local_port>
    319a:	10 91 c9 0c 	lds	r17, 0x0CC9	; 0x800cc9 <local_port+0x1>
    319e:	0f 5f       	subi	r16, 0xFF	; 255
    31a0:	1f 4f       	sbci	r17, 0xFF	; 255
    31a2:	10 93 c9 0c 	sts	0x0CC9, r17	; 0x800cc9 <local_port+0x1>
    31a6:	00 93 c8 0c 	sts	0x0CC8, r16	; 0x800cc8 <local_port>
    31aa:	de cf       	rjmp	.-68     	; 0x3168 <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.20]+0x24>

000031ac <EthernetUDP::stop()>:
_ZN11EthernetUDP4stopEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:73

/* Release any resources being used by this EthernetUDP instance */
void EthernetUDP::stop()
{
    31ac:	cf 93       	push	r28
    31ae:	df 93       	push	r29
    31b0:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:74
  if (_sock == MAX_SOCK_NUM)
    31b2:	8c 85       	ldd	r24, Y+12	; 0x0c
    31b4:	88 30       	cpi	r24, 0x08	; 8
    31b6:	21 f0       	breq	.+8      	; 0x31c0 <EthernetUDP::stop()+0x14>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:77
    return;

  close(_sock);
    31b8:	0e 94 95 18 	call	0x312a	; 0x312a <close(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:80

  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
    31bc:	88 e0       	ldi	r24, 0x08	; 8
    31be:	8c 87       	std	Y+12, r24	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:81
}
    31c0:	df 91       	pop	r29
    31c2:	cf 91       	pop	r28
    31c4:	08 95       	ret

000031c6 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.23]>:
_ZN10W5500Class20recv_data_processingEhPhjh.constprop.23():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:84
    write(ptr, cntl_byte, data, len);
    ptr += len;
    writeSnTX_WR(s, ptr);
}

void W5500Class::recv_data_processing(SOCKET s, uint8_t *data, uint16_t len, uint8_t peek)
    31c6:	af 92       	push	r10
    31c8:	bf 92       	push	r11
    31ca:	cf 92       	push	r12
    31cc:	df 92       	push	r13
    31ce:	ef 92       	push	r14
    31d0:	ff 92       	push	r15
    31d2:	0f 93       	push	r16
    31d4:	1f 93       	push	r17
    31d6:	cf 93       	push	r28
    31d8:	df 93       	push	r29
    31da:	f8 2e       	mov	r15, r24
    31dc:	5b 01       	movw	r10, r22
    31de:	6a 01       	movw	r12, r20
    31e0:	e2 2e       	mov	r14, r18
readSnRX_RD():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:321
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
  __SOCKET_REGISTER16(SnRX_RSR,   0x0026)        // RX Free Size
  __SOCKET_REGISTER16(SnRX_RD,    0x0028)        // RX Read Pointer
    31e2:	68 e2       	ldi	r22, 0x28	; 40
    31e4:	70 e0       	ldi	r23, 0x00	; 0
    31e6:	0e 94 3c 18 	call	0x3078	; 0x3078 <W5500Class::readSn(unsigned char, unsigned int)>
    31ea:	08 2f       	mov	r16, r24
    31ec:	10 e0       	ldi	r17, 0x00	; 0
    31ee:	10 2f       	mov	r17, r16
    31f0:	00 27       	eor	r16, r16
    31f2:	69 e2       	ldi	r22, 0x29	; 41
    31f4:	70 e0       	ldi	r23, 0x00	; 0
    31f6:	8f 2d       	mov	r24, r15
    31f8:	0e 94 3c 18 	call	0x3078	; 0x3078 <W5500Class::readSn(unsigned char, unsigned int)>
    31fc:	e8 01       	movw	r28, r16
    31fe:	c8 0f       	add	r28, r24
    3200:	d1 1d       	adc	r29, r1
read():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:149
    return _data;
}

uint16_t W5500Class::read(uint16_t _addr, uint8_t _cb, uint8_t *_buf, uint16_t _len)
{ 
    SPI.beginTransaction(wiznet_SPI_settings);
    3202:	80 91 d5 0f 	lds	r24, 0x0FD5	; 0x800fd5 <wiznet_SPI_settings>
    3206:	90 91 d6 0f 	lds	r25, 0x0FD6	; 0x800fd6 <wiznet_SPI_settings+0x1>
    320a:	0e 94 08 17 	call	0x2e10	; 0x2e10 <SPIClass::beginTransaction(SPISettings)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:150
    setSS();
    320e:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <W5500Class::setSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:151
    SPI.transfer(_addr >> 8);
    3212:	8d 2f       	mov	r24, r29
    3214:	0e 94 01 17 	call	0x2e02	; 0x2e02 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:152
    SPI.transfer(_addr & 0xFF);
    3218:	8c 2f       	mov	r24, r28
    321a:	0e 94 01 17 	call	0x2e02	; 0x2e02 <SPIClass::transfer(unsigned char)>
read_data():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:99
    }
}

void W5500Class::read_data(SOCKET s, volatile uint16_t src, volatile uint8_t *dst, uint16_t len)
{
    uint8_t cntl_byte = (0x18+(s<<5));
    321e:	8f 2d       	mov	r24, r15
    3220:	82 95       	swap	r24
    3222:	88 0f       	add	r24, r24
    3224:	80 7e       	andi	r24, 0xE0	; 224
read():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:153
{ 
    SPI.beginTransaction(wiznet_SPI_settings);
    setSS();
    SPI.transfer(_addr >> 8);
    SPI.transfer(_addr & 0xFF);
    SPI.transfer(_cb);
    3226:	88 5e       	subi	r24, 0xE8	; 232
    3228:	0e 94 01 17 	call	0x2e02	; 0x2e02 <SPIClass::transfer(unsigned char)>
    322c:	85 01       	movw	r16, r10
    322e:	ac 0c       	add	r10, r12
    3230:	bd 1c       	adc	r11, r13
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:155
    for (uint16_t i=0; i<_len; i++){
        _buf[i] = SPI.transfer(0);
    3232:	80 e0       	ldi	r24, 0x00	; 0
    3234:	0e 94 01 17 	call	0x2e02	; 0x2e02 <SPIClass::transfer(unsigned char)>
    3238:	f8 01       	movw	r30, r16
    323a:	81 93       	st	Z+, r24
    323c:	8f 01       	movw	r16, r30
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:154
    SPI.beginTransaction(wiznet_SPI_settings);
    setSS();
    SPI.transfer(_addr >> 8);
    SPI.transfer(_addr & 0xFF);
    SPI.transfer(_cb);
    for (uint16_t i=0; i<_len; i++){
    323e:	ea 15       	cp	r30, r10
    3240:	fb 05       	cpc	r31, r11
    3242:	b9 f7       	brne	.-18     	; 0x3232 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.23]+0x6c>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:157
        _buf[i] = SPI.transfer(0);
    }
    resetSS();
    3244:	0e 94 f6 16 	call	0x2dec	; 0x2dec <W5500Class::resetSS()>
_ZN10W5500Class20recv_data_processingEhPhjh.constprop.23():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:90
{
    uint16_t ptr;
    ptr = readSnRX_RD(s);

    read_data(s, ptr, data, len);
    if (!peek)
    3248:	e1 10       	cpse	r14, r1
    324a:	18 c0       	rjmp	.+48     	; 0x327c <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.23]+0xb6>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:92
    {
        ptr += len;
    324c:	cc 0d       	add	r28, r12
    324e:	dd 1d       	adc	r29, r13
writeSnRX_RD():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:321
    3250:	4d 2f       	mov	r20, r29
    3252:	68 e2       	ldi	r22, 0x28	; 40
    3254:	70 e0       	ldi	r23, 0x00	; 0
    3256:	8f 2d       	mov	r24, r15
    3258:	0e 94 7d 17 	call	0x2efa	; 0x2efa <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
    325c:	4c 2f       	mov	r20, r28
    325e:	69 e2       	ldi	r22, 0x29	; 41
    3260:	70 e0       	ldi	r23, 0x00	; 0
    3262:	8f 2d       	mov	r24, r15
_ZN10W5500Class20recv_data_processingEhPhjh.constprop.23():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:95
        writeSnRX_RD(s, ptr);
    }
}
    3264:	df 91       	pop	r29
    3266:	cf 91       	pop	r28
    3268:	1f 91       	pop	r17
    326a:	0f 91       	pop	r16
    326c:	ff 90       	pop	r15
    326e:	ef 90       	pop	r14
    3270:	df 90       	pop	r13
    3272:	cf 90       	pop	r12
    3274:	bf 90       	pop	r11
    3276:	af 90       	pop	r10
writeSnRX_RD():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:321
    3278:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN10W5500Class20recv_data_processingEhPhjh.constprop.23():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:95
    327c:	df 91       	pop	r29
    327e:	cf 91       	pop	r28
    3280:	1f 91       	pop	r17
    3282:	0f 91       	pop	r16
    3284:	ff 90       	pop	r15
    3286:	ef 90       	pop	r14
    3288:	df 90       	pop	r13
    328a:	cf 90       	pop	r12
    328c:	bf 90       	pop	r11
    328e:	af 90       	pop	r10
    3290:	08 95       	ret

00003292 <EthernetClient::peek()>:
_ZN14EthernetClient4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:113

int EthernetClient::read(uint8_t *buf, size_t size) {
  return recv(_sock, buf, size);
}

int EthernetClient::peek() {
    3292:	0f 93       	push	r16
    3294:	1f 93       	push	r17
    3296:	cf 93       	push	r28
    3298:	df 93       	push	r29
    329a:	1f 92       	push	r1
    329c:	cd b7       	in	r28, 0x3d	; 61
    329e:	de b7       	in	r29, 0x3e	; 62
    32a0:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:116
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must
  if (!available())
    32a2:	dc 01       	movw	r26, r24
    32a4:	ed 91       	ld	r30, X+
    32a6:	fc 91       	ld	r31, X
    32a8:	00 84       	ldd	r0, Z+8	; 0x08
    32aa:	f1 85       	ldd	r31, Z+9	; 0x09
    32ac:	e0 2d       	mov	r30, r0
    32ae:	19 95       	eicall
    32b0:	89 2b       	or	r24, r25
    32b2:	91 f0       	breq	.+36     	; 0x32d8 <EthernetClient::peek()+0x46>
peek():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:192
 * 		
 * @return
 */
uint16_t peek(SOCKET s, uint8_t *buf)
{
  w5500.recv_data_processing(s, buf, 1, 1);
    32b4:	21 e0       	ldi	r18, 0x01	; 1
    32b6:	41 e0       	ldi	r20, 0x01	; 1
    32b8:	50 e0       	ldi	r21, 0x00	; 0
    32ba:	be 01       	movw	r22, r28
    32bc:	6f 5f       	subi	r22, 0xFF	; 255
    32be:	7f 4f       	sbci	r23, 0xFF	; 255
    32c0:	f8 01       	movw	r30, r16
    32c2:	84 85       	ldd	r24, Z+12	; 0x0c
    32c4:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.23]>
_ZN14EthernetClient4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:119
    return -1;
  ::peek(_sock, &b);
  return b;
    32c8:	89 81       	ldd	r24, Y+1	; 0x01
    32ca:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:120
}
    32cc:	0f 90       	pop	r0
    32ce:	df 91       	pop	r29
    32d0:	cf 91       	pop	r28
    32d2:	1f 91       	pop	r17
    32d4:	0f 91       	pop	r16
    32d6:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:117

int EthernetClient::peek() {
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must
  if (!available())
    return -1;
    32d8:	8f ef       	ldi	r24, 0xFF	; 255
    32da:	9f ef       	ldi	r25, 0xFF	; 255
    32dc:	f7 cf       	rjmp	.-18     	; 0x32cc <EthernetClient::peek()+0x3a>

000032de <EthernetUDP::peek()>:
_ZN11EthernetUDP4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:200
  return -1;

}

int EthernetUDP::peek()
{
    32de:	cf 93       	push	r28
    32e0:	df 93       	push	r29
    32e2:	1f 92       	push	r1
    32e4:	cd b7       	in	r28, 0x3d	; 61
    32e6:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:205
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
    32e8:	fc 01       	movw	r30, r24
    32ea:	21 8d       	ldd	r18, Z+25	; 0x19
    32ec:	32 8d       	ldd	r19, Z+26	; 0x1a
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:206
    return -1;
    32ee:	8f ef       	ldi	r24, 0xFF	; 255
    32f0:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:205
{
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
    32f2:	23 2b       	or	r18, r19
    32f4:	59 f0       	breq	.+22     	; 0x330c <EthernetUDP::peek()+0x2e>
peek():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:192
    32f6:	21 e0       	ldi	r18, 0x01	; 1
    32f8:	41 e0       	ldi	r20, 0x01	; 1
    32fa:	50 e0       	ldi	r21, 0x00	; 0
    32fc:	be 01       	movw	r22, r28
    32fe:	6f 5f       	subi	r22, 0xFF	; 255
    3300:	7f 4f       	sbci	r23, 0xFF	; 255
    3302:	84 85       	ldd	r24, Z+12	; 0x0c
    3304:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.23]>
_ZN11EthernetUDP4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:208
    return -1;
  ::peek(_sock, &b);
  return b;
    3308:	89 81       	ldd	r24, Y+1	; 0x01
    330a:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:209
}
    330c:	0f 90       	pop	r0
    330e:	df 91       	pop	r29
    3310:	cf 91       	pop	r28
    3312:	08 95       	ret

00003314 <W5500Class::readSnRX_RSR(unsigned char)>:
_ZN10W5500Class12readSnRX_RSREh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:320
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
  __SOCKET_REGISTER16(SnRX_RSR,   0x0026)        // RX Free Size
    3314:	1f 93       	push	r17
    3316:	cf 93       	push	r28
    3318:	df 93       	push	r29
    331a:	18 2f       	mov	r17, r24
    331c:	66 e2       	ldi	r22, 0x26	; 38
    331e:	70 e0       	ldi	r23, 0x00	; 0
    3320:	0e 94 3c 18 	call	0x3078	; 0x3078 <W5500Class::readSn(unsigned char, unsigned int)>
    3324:	c8 2f       	mov	r28, r24
    3326:	d0 e0       	ldi	r29, 0x00	; 0
    3328:	dc 2f       	mov	r29, r28
    332a:	cc 27       	eor	r28, r28
    332c:	67 e2       	ldi	r22, 0x27	; 39
    332e:	70 e0       	ldi	r23, 0x00	; 0
    3330:	81 2f       	mov	r24, r17
    3332:	0e 94 3c 18 	call	0x3078	; 0x3078 <W5500Class::readSn(unsigned char, unsigned int)>
    3336:	8c 0f       	add	r24, r28
    3338:	9d 2f       	mov	r25, r29
    333a:	91 1d       	adc	r25, r1
    333c:	df 91       	pop	r29
    333e:	cf 91       	pop	r28
    3340:	1f 91       	pop	r17
    3342:	08 95       	ret

00003344 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.22]>:
_ZN10W5500Class17getRXReceivedSizeEh.constprop.22():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:55
    } 
    while (val != val1);
    return val;
}

uint16_t W5500Class::getRXReceivedSize(SOCKET s)
    3344:	ff 92       	push	r15
    3346:	0f 93       	push	r16
    3348:	1f 93       	push	r17
    334a:	cf 93       	push	r28
    334c:	df 93       	push	r29
    334e:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:57
{
    uint16_t val=0,val1=0;
    3350:	10 e0       	ldi	r17, 0x00	; 0
    3352:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:59
    do {
        val1 = readSnRX_RSR(s);
    3354:	8f 2d       	mov	r24, r15
    3356:	0e 94 8a 19 	call	0x3314	; 0x3314 <W5500Class::readSnRX_RSR(unsigned char)>
    335a:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:60
        if (val1 != 0)
    335c:	89 2b       	or	r24, r25
    335e:	21 f0       	breq	.+8      	; 0x3368 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.22]+0x24>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:61
            val = readSnRX_RSR(s);
    3360:	8f 2d       	mov	r24, r15
    3362:	0e 94 8a 19 	call	0x3314	; 0x3314 <W5500Class::readSnRX_RSR(unsigned char)>
    3366:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:63
    } 
    while (val != val1);
    3368:	c0 17       	cp	r28, r16
    336a:	d1 07       	cpc	r29, r17
    336c:	99 f7       	brne	.-26     	; 0x3354 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.22]+0x10>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:65
    return val;
}
    336e:	ce 01       	movw	r24, r28
    3370:	df 91       	pop	r29
    3372:	cf 91       	pop	r28
    3374:	1f 91       	pop	r17
    3376:	0f 91       	pop	r16
    3378:	ff 90       	pop	r15
    337a:	08 95       	ret

0000337c <EthernetClient::available()>:
_ZN14EthernetClient9availableEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:90
  }
  return size;
}

int EthernetClient::available() {
  if (_sock != MAX_SOCK_NUM)
    337c:	fc 01       	movw	r30, r24
    337e:	84 85       	ldd	r24, Z+12	; 0x0c
    3380:	88 30       	cpi	r24, 0x08	; 8
    3382:	11 f0       	breq	.+4      	; 0x3388 <EthernetClient::available()+0xc>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:91
    return w5500.getRXReceivedSize(_sock);
    3384:	0c 94 a2 19 	jmp	0x3344	; 0x3344 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.22]>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:93
  return 0;
}
    3388:	90 e0       	ldi	r25, 0x00	; 0
    338a:	80 e0       	ldi	r24, 0x00	; 0
    338c:	08 95       	ret

0000338e <W5500Class::readSnTX_FSR(unsigned char)>:
_ZN10W5500Class12readSnTX_FSREh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:317
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
  __SOCKET_REGISTER16(SnMSSR,     0x0012)        // Max Segment Size
  __SOCKET_REGISTER8(SnPROTO,     0x0014)        // Protocol in IP RAW Mode
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
    338e:	1f 93       	push	r17
    3390:	cf 93       	push	r28
    3392:	df 93       	push	r29
    3394:	18 2f       	mov	r17, r24
    3396:	60 e2       	ldi	r22, 0x20	; 32
    3398:	70 e0       	ldi	r23, 0x00	; 0
    339a:	0e 94 3c 18 	call	0x3078	; 0x3078 <W5500Class::readSn(unsigned char, unsigned int)>
    339e:	c8 2f       	mov	r28, r24
    33a0:	d0 e0       	ldi	r29, 0x00	; 0
    33a2:	dc 2f       	mov	r29, r28
    33a4:	cc 27       	eor	r28, r28
    33a6:	61 e2       	ldi	r22, 0x21	; 33
    33a8:	70 e0       	ldi	r23, 0x00	; 0
    33aa:	81 2f       	mov	r24, r17
    33ac:	0e 94 3c 18 	call	0x3078	; 0x3078 <W5500Class::readSn(unsigned char, unsigned int)>
    33b0:	8c 0f       	add	r24, r28
    33b2:	9d 2f       	mov	r25, r29
    33b4:	91 1d       	adc	r25, r1
    33b6:	df 91       	pop	r29
    33b8:	cf 91       	pop	r28
    33ba:	1f 91       	pop	r17
    33bc:	08 95       	ret

000033be <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.26]>:
_ZN10W5500Class13getTXFreeSizeEh.constprop.26():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:43
    write( 0x1E, cntl_byte, 2); //0x1E - Sn_RXBUF_SIZE
    write( 0x1F, cntl_byte, 2); //0x1F - Sn_TXBUF_SIZE
  }
}

uint16_t W5500Class::getTXFreeSize(SOCKET s)
    33be:	ff 92       	push	r15
    33c0:	0f 93       	push	r16
    33c2:	1f 93       	push	r17
    33c4:	cf 93       	push	r28
    33c6:	df 93       	push	r29
    33c8:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:45
{
    uint16_t val=0, val1=0;
    33ca:	10 e0       	ldi	r17, 0x00	; 0
    33cc:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:47
    do {
        val1 = readSnTX_FSR(s);
    33ce:	8f 2d       	mov	r24, r15
    33d0:	0e 94 c7 19 	call	0x338e	; 0x338e <W5500Class::readSnTX_FSR(unsigned char)>
    33d4:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:48
        if (val1 != 0)
    33d6:	89 2b       	or	r24, r25
    33d8:	21 f0       	breq	.+8      	; 0x33e2 <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.26]+0x24>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:49
            val = readSnTX_FSR(s);
    33da:	8f 2d       	mov	r24, r15
    33dc:	0e 94 c7 19 	call	0x338e	; 0x338e <W5500Class::readSnTX_FSR(unsigned char)>
    33e0:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:51
    } 
    while (val != val1);
    33e2:	c0 17       	cp	r28, r16
    33e4:	d1 07       	cpc	r29, r17
    33e6:	99 f7       	brne	.-26     	; 0x33ce <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.26]+0x10>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:53
    return val;
}
    33e8:	ce 01       	movw	r24, r28
    33ea:	df 91       	pop	r29
    33ec:	cf 91       	pop	r28
    33ee:	1f 91       	pop	r17
    33f0:	0f 91       	pop	r16
    33f2:	ff 90       	pop	r15
    33f4:	08 95       	ret

000033f6 <EthernetUDP::write(unsigned char const*, unsigned int)>:
_ZN11EthernetUDP5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:116
{
  return write(&byte, 1);
}

size_t EthernetUDP::write(const uint8_t *buffer, size_t size)
{
    33f6:	af 92       	push	r10
    33f8:	bf 92       	push	r11
    33fa:	cf 92       	push	r12
    33fc:	df 92       	push	r13
    33fe:	ff 92       	push	r15
    3400:	0f 93       	push	r16
    3402:	1f 93       	push	r17
    3404:	cf 93       	push	r28
    3406:	df 93       	push	r29
    3408:	8c 01       	movw	r16, r24
    340a:	5b 01       	movw	r10, r22
    340c:	ea 01       	movw	r28, r20
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:117
  uint16_t bytes_written = bufferData(_sock, _offset, buffer, size);
    340e:	fc 01       	movw	r30, r24
    3410:	c7 88       	ldd	r12, Z+23	; 0x17
    3412:	d0 8c       	ldd	r13, Z+24	; 0x18
    3414:	f4 84       	ldd	r15, Z+12	; 0x0c
bufferData():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:361
}

uint16_t bufferData(SOCKET s, uint16_t offset, const uint8_t* buf, uint16_t len)
{
  uint16_t ret =0;
  if (len > w5500.getTXFreeSize(s))
    3416:	8f 2d       	mov	r24, r15
    3418:	0e 94 df 19 	call	0x33be	; 0x33be <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.26]>
    341c:	8c 17       	cp	r24, r28
    341e:	9d 07       	cpc	r25, r29
    3420:	20 f4       	brcc	.+8      	; 0x342a <EthernetUDP::write(unsigned char const*, unsigned int)+0x34>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:363
  {
    ret = w5500.getTXFreeSize(s); // check size not to exceed MAX size.
    3422:	8f 2d       	mov	r24, r15
    3424:	0e 94 df 19 	call	0x33be	; 0x33be <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.26]>
    3428:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:369
  }
  else
  {
    ret = len;
  }
  w5500.send_data_processing_offset(s, offset, buf, ret);
    342a:	9e 01       	movw	r18, r28
    342c:	a5 01       	movw	r20, r10
    342e:	b6 01       	movw	r22, r12
    3430:	8f 2d       	mov	r24, r15
    3432:	0e 94 45 18 	call	0x308a	; 0x308a <W5500Class::send_data_processing_offset(unsigned char, unsigned int, unsigned char const*, unsigned int) [clone .constprop.27]>
_ZN11EthernetUDP5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:118
  _offset += bytes_written;
    3436:	f8 01       	movw	r30, r16
    3438:	87 89       	ldd	r24, Z+23	; 0x17
    343a:	90 8d       	ldd	r25, Z+24	; 0x18
    343c:	8c 0f       	add	r24, r28
    343e:	9d 1f       	adc	r25, r29
    3440:	90 8f       	std	Z+24, r25	; 0x18
    3442:	87 8b       	std	Z+23, r24	; 0x17
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:120
  return bytes_written;
}
    3444:	ce 01       	movw	r24, r28
    3446:	df 91       	pop	r29
    3448:	cf 91       	pop	r28
    344a:	1f 91       	pop	r17
    344c:	0f 91       	pop	r16
    344e:	ff 90       	pop	r15
    3450:	df 90       	pop	r13
    3452:	cf 90       	pop	r12
    3454:	bf 90       	pop	r11
    3456:	af 90       	pop	r10
    3458:	08 95       	ret

0000345a <EthernetClient::status()>:
_ZN14EthernetClient6statusEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:155
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
}

uint8_t EthernetClient::status() {
  if (_sock == MAX_SOCK_NUM) return SnSR::CLOSED;
    345a:	fc 01       	movw	r30, r24
    345c:	84 85       	ldd	r24, Z+12	; 0x0c
    345e:	88 30       	cpi	r24, 0x08	; 8
    3460:	21 f0       	breq	.+8      	; 0x346a <EthernetClient::status()+0x10>
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
    3462:	63 e0       	ldi	r22, 0x03	; 3
    3464:	70 e0       	ldi	r23, 0x00	; 0
    3466:	0c 94 3c 18 	jmp	0x3078	; 0x3078 <W5500Class::readSn(unsigned char, unsigned int)>
_ZN14EthernetClient6statusEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:157
  return w5500.readSnSR(_sock);
}
    346a:	80 e0       	ldi	r24, 0x00	; 0
    346c:	08 95       	ret

0000346e <EthernetClient::connected()>:
_ZN14EthernetClient9connectedEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:146

  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
    346e:	cf 93       	push	r28
    3470:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:147
  if (_sock == MAX_SOCK_NUM) return 0;
    3472:	fc 01       	movw	r30, r24
    3474:	24 85       	ldd	r18, Z+12	; 0x0c
    3476:	28 30       	cpi	r18, 0x08	; 8
    3478:	d9 f0       	breq	.+54     	; 0x34b0 <EthernetClient::connected()+0x42>
    347a:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:149
  
  uint8_t s = status();
    347c:	0e 94 2d 1a 	call	0x345a	; 0x345a <EthernetClient::status()>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:150
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    3480:	84 31       	cpi	r24, 0x14	; 20
    3482:	89 f0       	breq	.+34     	; 0x34a6 <EthernetClient::connected()+0x38>
    3484:	88 23       	and	r24, r24
    3486:	79 f0       	breq	.+30     	; 0x34a6 <EthernetClient::connected()+0x38>
    3488:	88 31       	cpi	r24, 0x18	; 24
    348a:	69 f0       	breq	.+26     	; 0x34a6 <EthernetClient::connected()+0x38>
    348c:	21 e0       	ldi	r18, 0x01	; 1
    348e:	8c 31       	cpi	r24, 0x1C	; 28
    3490:	59 f4       	brne	.+22     	; 0x34a8 <EthernetClient::connected()+0x3a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:151
    (s == SnSR::CLOSE_WAIT && !available()));
    3492:	e8 81       	ld	r30, Y
    3494:	f9 81       	ldd	r31, Y+1	; 0x01
    3496:	00 84       	ldd	r0, Z+8	; 0x08
    3498:	f1 85       	ldd	r31, Z+9	; 0x09
    349a:	e0 2d       	mov	r30, r0
    349c:	ce 01       	movw	r24, r28
    349e:	19 95       	eicall
    34a0:	21 e0       	ldi	r18, 0x01	; 1
    34a2:	89 2b       	or	r24, r25
    34a4:	09 f4       	brne	.+2      	; 0x34a8 <EthernetClient::connected()+0x3a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:150

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
  
  uint8_t s = status();
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    34a6:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:151
    (s == SnSR::CLOSE_WAIT && !available()));
    34a8:	82 2f       	mov	r24, r18
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:152
}
    34aa:	df 91       	pop	r29
    34ac:	cf 91       	pop	r28
    34ae:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:147
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
    34b0:	80 e0       	ldi	r24, 0x00	; 0
    34b2:	fb cf       	rjmp	.-10     	; 0x34aa <EthernetClient::connected()+0x3c>

000034b4 <EthernetClient::stop()>:
_ZN14EthernetClient4stopEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:126

void EthernetClient::flush() {
  ::flush(_sock);
}

void EthernetClient::stop() {
    34b4:	cf 92       	push	r12
    34b6:	df 92       	push	r13
    34b8:	ef 92       	push	r14
    34ba:	ff 92       	push	r15
    34bc:	cf 93       	push	r28
    34be:	df 93       	push	r29
    34c0:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:127
  if (_sock == MAX_SOCK_NUM)
    34c2:	8c 85       	ldd	r24, Y+12	; 0x0c
    34c4:	88 30       	cpi	r24, 0x08	; 8
    34c6:	49 f1       	breq	.+82     	; 0x351a <EthernetClient::stop()+0x66>
disconnect():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:94
 * @brief	This function used for disconnect the socket and parameter is "s" which represent the socket number
 * @return	1 for success else 0.
 */
void disconnect(SOCKET s)
{
  w5500.execCmdSn(s, Sock_DISCON);
    34c8:	68 e0       	ldi	r22, 0x08	; 8
    34ca:	70 e0       	ldi	r23, 0x00	; 0
    34cc:	0e 94 85 18 	call	0x310a	; 0x310a <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.25]>
_ZN14EthernetClient4stopEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:132
    return;

  // attempt to close the connection gracefully (send a FIN to other side)
  disconnect(_sock);
  unsigned long start = millis();
    34d0:	0e 94 28 13 	call	0x2650	; 0x2650 <millis>
    34d4:	6b 01       	movw	r12, r22
    34d6:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:135

  // wait a second for the connection to close
  while (status() != SnSR::CLOSED && millis() - start < 1000)
    34d8:	ce 01       	movw	r24, r28
    34da:	0e 94 2d 1a 	call	0x345a	; 0x345a <EthernetClient::status()>
    34de:	88 23       	and	r24, r24
    34e0:	91 f0       	breq	.+36     	; 0x3506 <EthernetClient::stop()+0x52>
    34e2:	0e 94 28 13 	call	0x2650	; 0x2650 <millis>
    34e6:	6c 19       	sub	r22, r12
    34e8:	7d 09       	sbc	r23, r13
    34ea:	8e 09       	sbc	r24, r14
    34ec:	9f 09       	sbc	r25, r15
    34ee:	68 3e       	cpi	r22, 0xE8	; 232
    34f0:	73 40       	sbci	r23, 0x03	; 3
    34f2:	81 05       	cpc	r24, r1
    34f4:	91 05       	cpc	r25, r1
    34f6:	38 f4       	brcc	.+14     	; 0x3506 <EthernetClient::stop()+0x52>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:136
    delay(1);
    34f8:	61 e0       	ldi	r22, 0x01	; 1
    34fa:	70 e0       	ldi	r23, 0x00	; 0
    34fc:	80 e0       	ldi	r24, 0x00	; 0
    34fe:	90 e0       	ldi	r25, 0x00	; 0
    3500:	0e 94 00 12 	call	0x2400	; 0x2400 <delay>
    3504:	e9 cf       	rjmp	.-46     	; 0x34d8 <EthernetClient::stop()+0x24>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:139

  // if it hasn't closed, close it forcefully
  if (status() != SnSR::CLOSED)
    3506:	ce 01       	movw	r24, r28
    3508:	0e 94 2d 1a 	call	0x345a	; 0x345a <EthernetClient::status()>
    350c:	88 23       	and	r24, r24
    350e:	19 f0       	breq	.+6      	; 0x3516 <EthernetClient::stop()+0x62>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:140
    close(_sock);
    3510:	8c 85       	ldd	r24, Y+12	; 0x0c
    3512:	0e 94 95 18 	call	0x312a	; 0x312a <close(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:143

  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
    3516:	88 e0       	ldi	r24, 0x08	; 8
    3518:	8c 87       	std	Y+12, r24	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:144
}
    351a:	df 91       	pop	r29
    351c:	cf 91       	pop	r28
    351e:	ff 90       	pop	r15
    3520:	ef 90       	pop	r14
    3522:	df 90       	pop	r13
    3524:	cf 90       	pop	r12
    3526:	08 95       	ret

00003528 <recv(unsigned char, unsigned char*, int)>:
_Z4recvhPhi():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:153
 * 		It continues to wait for data as much as the application wants to receive.
 * 		
 * @return	received data size for success else -1.
 */
int16_t recv(SOCKET s, uint8_t *buf, int16_t len)
{
    3528:	cf 92       	push	r12
    352a:	df 92       	push	r13
    352c:	ef 92       	push	r14
    352e:	ff 92       	push	r15
    3530:	1f 93       	push	r17
    3532:	cf 93       	push	r28
    3534:	df 93       	push	r29
    3536:	18 2f       	mov	r17, r24
    3538:	6b 01       	movw	r12, r22
    353a:	7a 01       	movw	r14, r20
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:155
  // Check how much data is available
  int16_t ret = w5500.getRXReceivedSize(s);
    353c:	0e 94 a2 19 	call	0x3344	; 0x3344 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.22]>
    3540:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:156
  if ( ret == 0 )
    3542:	00 97       	sbiw	r24, 0x00	; 0
    3544:	d9 f4       	brne	.+54     	; 0x357c <recv(unsigned char, unsigned char*, int)+0x54>
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
    3546:	63 e0       	ldi	r22, 0x03	; 3
    3548:	70 e0       	ldi	r23, 0x00	; 0
    354a:	81 2f       	mov	r24, r17
    354c:	0e 94 3c 18 	call	0x3078	; 0x3078 <W5500Class::readSn(unsigned char, unsigned int)>
_Z4recvhPhi():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:160
  {
    // No data available.
    uint8_t status = w5500.readSnSR(s);
    if ( status == SnSR::LISTEN || status == SnSR::CLOSED || status == SnSR::CLOSE_WAIT )
    3550:	84 31       	cpi	r24, 0x14	; 20
    3552:	59 f0       	breq	.+22     	; 0x356a <recv(unsigned char, unsigned char*, int)+0x42>
    3554:	88 23       	and	r24, r24
    3556:	49 f0       	breq	.+18     	; 0x356a <recv(unsigned char, unsigned char*, int)+0x42>
    3558:	c1 e0       	ldi	r28, 0x01	; 1
    355a:	d0 e0       	ldi	r29, 0x00	; 0
    355c:	8c 31       	cpi	r24, 0x1C	; 28
    355e:	11 f4       	brne	.+4      	; 0x3564 <recv(unsigned char, unsigned char*, int)+0x3c>
    3560:	d0 e0       	ldi	r29, 0x00	; 0
    3562:	c0 e0       	ldi	r28, 0x00	; 0
    3564:	d1 95       	neg	r29
    3566:	c1 95       	neg	r28
    3568:	d1 09       	sbc	r29, r1
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:182
  {
    w5500.recv_data_processing(s, buf, ret);
    w5500.execCmdSn(s, Sock_RECV);
  }
  return ret;
}
    356a:	ce 01       	movw	r24, r28
    356c:	df 91       	pop	r29
    356e:	cf 91       	pop	r28
    3570:	1f 91       	pop	r17
    3572:	ff 90       	pop	r15
    3574:	ef 90       	pop	r14
    3576:	df 90       	pop	r13
    3578:	cf 90       	pop	r12
    357a:	08 95       	ret
    357c:	e8 16       	cp	r14, r24
    357e:	f9 06       	cpc	r15, r25
    3580:	0c f4       	brge	.+2      	; 0x3584 <recv(unsigned char, unsigned char*, int)+0x5c>
    3582:	e7 01       	movw	r28, r14
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:176
  else if (ret > len)
  {
    ret = len;
  }

  if ( ret > 0 )
    3584:	1c 16       	cp	r1, r28
    3586:	1d 06       	cpc	r1, r29
    3588:	84 f7       	brge	.-32     	; 0x356a <recv(unsigned char, unsigned char*, int)+0x42>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:178
  {
    w5500.recv_data_processing(s, buf, ret);
    358a:	20 e0       	ldi	r18, 0x00	; 0
    358c:	ae 01       	movw	r20, r28
    358e:	b6 01       	movw	r22, r12
    3590:	81 2f       	mov	r24, r17
    3592:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.23]>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:179
    w5500.execCmdSn(s, Sock_RECV);
    3596:	60 e4       	ldi	r22, 0x40	; 64
    3598:	70 e0       	ldi	r23, 0x00	; 0
    359a:	81 2f       	mov	r24, r17
    359c:	0e 94 85 18 	call	0x310a	; 0x310a <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.25]>
    35a0:	e4 cf       	rjmp	.-56     	; 0x356a <recv(unsigned char, unsigned char*, int)+0x42>

000035a2 <EthernetUDP::read(unsigned char*, unsigned int)>:
_ZN11EthernetUDP4readEPhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:167
  // If we get here, there's no data available
  return -1;
}

int EthernetUDP::read(unsigned char* buffer, size_t len)
{
    35a2:	cf 93       	push	r28
    35a4:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:169

  if (_remaining > 0)
    35a6:	fc 01       	movw	r30, r24
    35a8:	21 8d       	ldd	r18, Z+25	; 0x19
    35aa:	32 8d       	ldd	r19, Z+26	; 0x1a
    35ac:	21 15       	cp	r18, r1
    35ae:	31 05       	cpc	r19, r1
    35b0:	29 f4       	brne	.+10     	; 0x35bc <EthernetUDP::read(unsigned char*, unsigned int)+0x1a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:195
    }

  }

  // If we get here, there's no data available or recv failed
  return -1;
    35b2:	8f ef       	ldi	r24, 0xFF	; 255
    35b4:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:197

}
    35b6:	df 91       	pop	r29
    35b8:	cf 91       	pop	r28
    35ba:	08 95       	ret
    35bc:	ec 01       	movw	r28, r24
    35be:	84 85       	ldd	r24, Z+12	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:174
  if (_remaining > 0)
  {

    int got;

    if (_remaining <= len)
    35c0:	42 17       	cp	r20, r18
    35c2:	53 07       	cpc	r21, r19
    35c4:	08 f0       	brcs	.+2      	; 0x35c8 <EthernetUDP::read(unsigned char*, unsigned int)+0x26>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:177
    {
      // data should fit in the buffer
      got = recv(_sock, buffer, _remaining);
    35c6:	a9 01       	movw	r20, r18
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:183
    }
    else
    {
      // too much data for the buffer, 
      // grab as much as will fit
      got = recv(_sock, buffer, len);
    35c8:	0e 94 94 1a 	call	0x3528	; 0x3528 <recv(unsigned char, unsigned char*, int)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:186
    }

    if (got > 0)
    35cc:	18 16       	cp	r1, r24
    35ce:	19 06       	cpc	r1, r25
    35d0:	84 f7       	brge	.-32     	; 0x35b2 <EthernetUDP::read(unsigned char*, unsigned int)+0x10>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:188
    {
      _remaining -= got;
    35d2:	29 8d       	ldd	r18, Y+25	; 0x19
    35d4:	3a 8d       	ldd	r19, Y+26	; 0x1a
    35d6:	28 1b       	sub	r18, r24
    35d8:	39 0b       	sbc	r19, r25
    35da:	3a 8f       	std	Y+26, r19	; 0x1a
    35dc:	29 8f       	std	Y+25, r18	; 0x19
    35de:	eb cf       	rjmp	.-42     	; 0x35b6 <EthernetUDP::read(unsigned char*, unsigned int)+0x14>

000035e0 <EthernetUDP::read()>:
_ZN11EthernetUDP4readEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:152
  // There aren't any packets available
  return 0;
}

int EthernetUDP::read()
{
    35e0:	0f 93       	push	r16
    35e2:	1f 93       	push	r17
    35e4:	cf 93       	push	r28
    35e6:	df 93       	push	r29
    35e8:	1f 92       	push	r1
    35ea:	cd b7       	in	r28, 0x3d	; 61
    35ec:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:155
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
    35ee:	fc 01       	movw	r30, r24
    35f0:	21 8d       	ldd	r18, Z+25	; 0x19
    35f2:	32 8d       	ldd	r19, Z+26	; 0x1a
    35f4:	23 2b       	or	r18, r19
    35f6:	41 f4       	brne	.+16     	; 0x3608 <EthernetUDP::read()+0x28>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:163
    _remaining--;
    return byte;
  }

  // If we get here, there's no data available
  return -1;
    35f8:	8f ef       	ldi	r24, 0xFF	; 255
    35fa:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:164
}
    35fc:	0f 90       	pop	r0
    35fe:	df 91       	pop	r29
    3600:	cf 91       	pop	r28
    3602:	1f 91       	pop	r17
    3604:	0f 91       	pop	r16
    3606:	08 95       	ret
    3608:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:155

int EthernetUDP::read()
{
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
    360a:	41 e0       	ldi	r20, 0x01	; 1
    360c:	50 e0       	ldi	r21, 0x00	; 0
    360e:	be 01       	movw	r22, r28
    3610:	6f 5f       	subi	r22, 0xFF	; 255
    3612:	7f 4f       	sbci	r23, 0xFF	; 255
    3614:	fc 01       	movw	r30, r24
    3616:	84 85       	ldd	r24, Z+12	; 0x0c
    3618:	0e 94 94 1a 	call	0x3528	; 0x3528 <recv(unsigned char, unsigned char*, int)>
    361c:	18 16       	cp	r1, r24
    361e:	19 06       	cpc	r1, r25
    3620:	5c f7       	brge	.-42     	; 0x35f8 <EthernetUDP::read()+0x18>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:158
  {
    // We read things without any problems
    _remaining--;
    3622:	f8 01       	movw	r30, r16
    3624:	81 8d       	ldd	r24, Z+25	; 0x19
    3626:	92 8d       	ldd	r25, Z+26	; 0x1a
    3628:	01 97       	sbiw	r24, 0x01	; 1
    362a:	92 8f       	std	Z+26, r25	; 0x1a
    362c:	81 8f       	std	Z+25, r24	; 0x19
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:159
    return byte;
    362e:	89 81       	ldd	r24, Y+1	; 0x01
    3630:	90 e0       	ldi	r25, 0x00	; 0
    3632:	e4 cf       	rjmp	.-56     	; 0x35fc <EthernetUDP::read()+0x1c>

00003634 <EthernetClient::read(unsigned char*, unsigned int)>:
_ZN14EthernetClient4readEPhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:110
    return -1;
  }
}

int EthernetClient::read(uint8_t *buf, size_t size) {
  return recv(_sock, buf, size);
    3634:	fc 01       	movw	r30, r24
    3636:	84 85       	ldd	r24, Z+12	; 0x0c
    3638:	0c 94 94 1a 	jmp	0x3528	; 0x3528 <recv(unsigned char, unsigned char*, int)>

0000363c <EthernetClient::read()>:
_ZN14EthernetClient4readEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:95
  if (_sock != MAX_SOCK_NUM)
    return w5500.getRXReceivedSize(_sock);
  return 0;
}

int EthernetClient::read() {
    363c:	cf 93       	push	r28
    363e:	df 93       	push	r29
    3640:	1f 92       	push	r1
    3642:	cd b7       	in	r28, 0x3d	; 61
    3644:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:97
  uint8_t b;
  if ( recv(_sock, &b, 1) > 0 )
    3646:	41 e0       	ldi	r20, 0x01	; 1
    3648:	50 e0       	ldi	r21, 0x00	; 0
    364a:	be 01       	movw	r22, r28
    364c:	6f 5f       	subi	r22, 0xFF	; 255
    364e:	7f 4f       	sbci	r23, 0xFF	; 255
    3650:	fc 01       	movw	r30, r24
    3652:	84 85       	ldd	r24, Z+12	; 0x0c
    3654:	0e 94 94 1a 	call	0x3528	; 0x3528 <recv(unsigned char, unsigned char*, int)>
    3658:	18 16       	cp	r1, r24
    365a:	19 06       	cpc	r1, r25
    365c:	34 f4       	brge	.+12     	; 0x366a <EthernetClient::read()+0x2e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:100
  {
    // recv worked
    return b;
    365e:	89 81       	ldd	r24, Y+1	; 0x01
    3660:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:107
  else
  {
    // No data available
    return -1;
  }
}
    3662:	0f 90       	pop	r0
    3664:	df 91       	pop	r29
    3666:	cf 91       	pop	r28
    3668:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:105
    return b;
  }
  else
  {
    // No data available
    return -1;
    366a:	8f ef       	ldi	r24, 0xFF	; 255
    366c:	9f ef       	ldi	r25, 0xFF	; 255
    366e:	f9 cf       	rjmp	.-14     	; 0x3662 <EthernetClient::read()+0x26>

00003670 <EthernetUDP::endPacket()>:
_ZN11EthernetUDP9endPacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:106
  _offset = 0;
  return startUDP(_sock, rawIPAddress(ip), port);
}

int EthernetUDP::endPacket()
{
    3670:	cf 93       	push	r28
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:107
  return sendUDP(_sock);
    3672:	fc 01       	movw	r30, r24
    3674:	c4 85       	ldd	r28, Z+12	; 0x0c
sendUDP():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:393
  }
}

int sendUDP(SOCKET s)
{
  w5500.execCmdSn(s, Sock_SEND);
    3676:	60 e2       	ldi	r22, 0x20	; 32
    3678:	70 e0       	ldi	r23, 0x00	; 0
    367a:	8c 2f       	mov	r24, r28
    367c:	0e 94 85 18 	call	0x310a	; 0x310a <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.25]>
readSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
    3680:	62 e0       	ldi	r22, 0x02	; 2
    3682:	70 e0       	ldi	r23, 0x00	; 0
    3684:	8c 2f       	mov	r24, r28
    3686:	0e 94 3c 18 	call	0x3078	; 0x3078 <W5500Class::readSn(unsigned char, unsigned int)>
sendUDP():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:396
		
  /* +2008.01 bj */
  while ( (w5500.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    368a:	84 fd       	sbrc	r24, 4
    368c:	11 c0       	rjmp	.+34     	; 0x36b0 <EthernetUDP::endPacket()+0x40>
readSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
    368e:	62 e0       	ldi	r22, 0x02	; 2
    3690:	70 e0       	ldi	r23, 0x00	; 0
    3692:	8c 2f       	mov	r24, r28
    3694:	0e 94 3c 18 	call	0x3078	; 0x3078 <W5500Class::readSn(unsigned char, unsigned int)>
sendUDP():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:398
  {
    if (w5500.readSnIR(s) & SnIR::TIMEOUT)
    3698:	83 ff       	sbrs	r24, 3
    369a:	f2 cf       	rjmp	.-28     	; 0x3680 <EthernetUDP::endPacket()+0x10>
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
    369c:	48 e1       	ldi	r20, 0x18	; 24
    369e:	62 e0       	ldi	r22, 0x02	; 2
    36a0:	70 e0       	ldi	r23, 0x00	; 0
    36a2:	8c 2f       	mov	r24, r28
    36a4:	0e 94 7d 17 	call	0x2efa	; 0x2efa <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN11EthernetUDP9endPacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:402
    {
      /* +2008.01 [bj]: clear interrupt */
      w5500.writeSnIR(s, (SnIR::SEND_OK|SnIR::TIMEOUT));
      return 0;
    36a8:	90 e0       	ldi	r25, 0x00	; 0
    36aa:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:108
}
    36ac:	cf 91       	pop	r28
    36ae:	08 95       	ret
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
    36b0:	40 e1       	ldi	r20, 0x10	; 16
    36b2:	62 e0       	ldi	r22, 0x02	; 2
    36b4:	70 e0       	ldi	r23, 0x00	; 0
    36b6:	8c 2f       	mov	r24, r28
    36b8:	0e 94 7d 17 	call	0x2efa	; 0x2efa <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN11EthernetUDP9endPacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:410

  /* +2008.01 bj */	
  w5500.writeSnIR(s, SnIR::SEND_OK);

  /* Sent ok */
  return 1;
    36bc:	81 e0       	ldi	r24, 0x01	; 1
    36be:	90 e0       	ldi	r25, 0x00	; 0
    36c0:	f5 cf       	rjmp	.-22     	; 0x36ac <EthernetUDP::endPacket()+0x3c>

000036c2 <EthernetUDP::begin(unsigned int)>:
_ZN11EthernetUDP5beginEj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:43

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
    36c2:	ef 92       	push	r14
    36c4:	ff 92       	push	r15
    36c6:	1f 93       	push	r17
    36c8:	cf 93       	push	r28
    36ca:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:44
  if (_sock != MAX_SOCK_NUM)
    36cc:	fc 01       	movw	r30, r24
    36ce:	24 85       	ldd	r18, Z+12	; 0x0c
    36d0:	28 30       	cpi	r18, 0x08	; 8
    36d2:	39 f0       	breq	.+14     	; 0x36e2 <EthernetUDP::begin(unsigned int)+0x20>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:45
    return 0;
    36d4:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:63
  _port = port;
  _remaining = 0;
  socket(_sock, SnMR::UDP, _port, 0);

  return 1;
}
    36d6:	df 91       	pop	r29
    36d8:	cf 91       	pop	r28
    36da:	1f 91       	pop	r17
    36dc:	ff 90       	pop	r15
    36de:	ef 90       	pop	r14
    36e0:	08 95       	ret
    36e2:	7b 01       	movw	r14, r22
    36e4:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:44
/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    36e6:	10 e0       	ldi	r17, 0x00	; 0
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
    36e8:	63 e0       	ldi	r22, 0x03	; 3
    36ea:	70 e0       	ldi	r23, 0x00	; 0
    36ec:	81 2f       	mov	r24, r17
    36ee:	0e 94 3c 18 	call	0x3078	; 0x3078 <W5500Class::readSn(unsigned char, unsigned int)>
_ZN11EthernetUDP5beginEj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:49
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
    36f2:	81 11       	cpse	r24, r1
    36f4:	0e c0       	rjmp	.+28     	; 0x3712 <EthernetUDP::begin(unsigned int)+0x50>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:50
      _sock = i;
    36f6:	1c 87       	std	Y+12, r17	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:55
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    36f8:	8c 85       	ldd	r24, Y+12	; 0x0c
    36fa:	88 30       	cpi	r24, 0x08	; 8
    36fc:	59 f3       	breq	.-42     	; 0x36d4 <EthernetUDP::begin(unsigned int)+0x12>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:58
    return 0;

  _port = port;
    36fe:	fe 86       	std	Y+14, r15	; 0x0e
    3700:	ed 86       	std	Y+13, r14	; 0x0d
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:59
  _remaining = 0;
    3702:	1a 8e       	std	Y+26, r1	; 0x1a
    3704:	19 8e       	std	Y+25, r1	; 0x19
socket():
    3706:	a7 01       	movw	r20, r14
    3708:	62 e0       	ldi	r22, 0x02	; 2
    370a:	0e 94 a2 18 	call	0x3144	; 0x3144 <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.20]>
_ZN11EthernetUDP5beginEj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:62
  socket(_sock, SnMR::UDP, _port, 0);

  return 1;
    370e:	81 e0       	ldi	r24, 0x01	; 1
    3710:	e2 cf       	rjmp	.-60     	; 0x36d6 <EthernetUDP::begin(unsigned int)+0x14>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:49
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
    3712:	88 31       	cpi	r24, 0x18	; 24
    3714:	81 f3       	breq	.-32     	; 0x36f6 <EthernetUDP::begin(unsigned int)+0x34>
    3716:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:47
/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    3718:	18 30       	cpi	r17, 0x08	; 8
    371a:	31 f7       	brne	.-52     	; 0x36e8 <EthernetUDP::begin(unsigned int)+0x26>
    371c:	ed cf       	rjmp	.-38     	; 0x36f8 <EthernetUDP::begin(unsigned int)+0x36>

0000371e <EthernetClient::write(unsigned char const*, unsigned int)>:
_ZN14EthernetClient5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:77

size_t EthernetClient::write(uint8_t b) {
  return write(&b, 1);
}

size_t EthernetClient::write(const uint8_t *buf, size_t size) {
    371e:	8f 92       	push	r8
    3720:	9f 92       	push	r9
    3722:	af 92       	push	r10
    3724:	bf 92       	push	r11
    3726:	cf 92       	push	r12
    3728:	df 92       	push	r13
    372a:	ef 92       	push	r14
    372c:	ff 92       	push	r15
    372e:	0f 93       	push	r16
    3730:	1f 93       	push	r17
    3732:	cf 93       	push	r28
    3734:	6c 01       	movw	r12, r24
    3736:	5b 01       	movw	r10, r22
    3738:	7a 01       	movw	r14, r20
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:78
  if (_sock == MAX_SOCK_NUM) {
    373a:	fc 01       	movw	r30, r24
    373c:	c4 85       	ldd	r28, Z+12	; 0x0c
    373e:	c8 30       	cpi	r28, 0x08	; 8
    3740:	a1 f4       	brne	.+40     	; 0x376a <EthernetClient::write(unsigned char const*, unsigned int)+0x4c>
_ZN5Print13setWriteErrorEi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.h:44
    3742:	81 e0       	ldi	r24, 0x01	; 1
    3744:	90 e0       	ldi	r25, 0x00	; 0
    3746:	f6 01       	movw	r30, r12
    3748:	93 83       	std	Z+3, r25	; 0x03
    374a:	82 83       	std	Z+2, r24	; 0x02
_ZN14EthernetClient5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:80
    setWriteError();
    return 0;
    374c:	f1 2c       	mov	r15, r1
    374e:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:87
  if (!send(_sock, buf, size)) {
    setWriteError();
    return 0;
  }
  return size;
}
    3750:	c7 01       	movw	r24, r14
    3752:	cf 91       	pop	r28
    3754:	1f 91       	pop	r17
    3756:	0f 91       	pop	r16
    3758:	ff 90       	pop	r15
    375a:	ef 90       	pop	r14
    375c:	df 90       	pop	r13
    375e:	cf 90       	pop	r12
    3760:	bf 90       	pop	r11
    3762:	af 90       	pop	r10
    3764:	9f 90       	pop	r9
    3766:	8f 90       	pop	r8
    3768:	08 95       	ret
    376a:	8a 01       	movw	r16, r20
    376c:	41 30       	cpi	r20, 0x01	; 1
    376e:	58 40       	sbci	r21, 0x08	; 8
    3770:	10 f0       	brcs	.+4      	; 0x3776 <EthernetClient::write(unsigned char const*, unsigned int)+0x58>
    3772:	00 e0       	ldi	r16, 0x00	; 0
    3774:	18 e0       	ldi	r17, 0x08	; 8
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:116
    ret = len;

  // if freebuf is available, start.
  do 
  {
    freesize = w5500.getTXFreeSize(s);
    3776:	8c 2f       	mov	r24, r28
    3778:	0e 94 df 19 	call	0x33be	; 0x33be <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.26]>
    377c:	4c 01       	movw	r8, r24
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
    377e:	63 e0       	ldi	r22, 0x03	; 3
    3780:	70 e0       	ldi	r23, 0x00	; 0
    3782:	8c 2f       	mov	r24, r28
    3784:	0e 94 3c 18 	call	0x3078	; 0x3078 <W5500Class::readSn(unsigned char, unsigned int)>
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:118
    status = w5500.readSnSR(s);
    if ((status != SnSR::ESTABLISHED) && (status != SnSR::CLOSE_WAIT))
    3788:	87 31       	cpi	r24, 0x17	; 23
    378a:	11 f0       	breq	.+4      	; 0x3790 <EthernetClient::write(unsigned char const*, unsigned int)+0x72>
    378c:	8c 31       	cpi	r24, 0x1C	; 28
    378e:	09 f5       	brne	.+66     	; 0x37d2 <EthernetClient::write(unsigned char const*, unsigned int)+0xb4>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:124
    {
      ret = 0; 
      break;
    }
  } 
  while (freesize < ret);
    3790:	80 16       	cp	r8, r16
    3792:	91 06       	cpc	r9, r17
    3794:	80 f3       	brcs	.-32     	; 0x3776 <EthernetClient::write(unsigned char const*, unsigned int)+0x58>
send_data_processing():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:70
}

void W5500Class::send_data_processing(SOCKET s, const uint8_t *data, uint16_t len)
{
  // This is same as having no offset in a call to send_data_processing_offset
  send_data_processing_offset(s, 0, data, len);
    3796:	98 01       	movw	r18, r16
    3798:	a5 01       	movw	r20, r10
    379a:	70 e0       	ldi	r23, 0x00	; 0
    379c:	60 e0       	ldi	r22, 0x00	; 0
    379e:	8c 2f       	mov	r24, r28
    37a0:	0e 94 45 18 	call	0x308a	; 0x308a <W5500Class::send_data_processing_offset(unsigned char, unsigned int, unsigned char const*, unsigned int) [clone .constprop.27]>
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:128

  // copy data
  w5500.send_data_processing(s, (uint8_t *)buf, ret);
  w5500.execCmdSn(s, Sock_SEND);
    37a4:	60 e2       	ldi	r22, 0x20	; 32
    37a6:	70 e0       	ldi	r23, 0x00	; 0
    37a8:	8c 2f       	mov	r24, r28
    37aa:	0e 94 85 18 	call	0x310a	; 0x310a <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.25]>
readSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
    37ae:	62 e0       	ldi	r22, 0x02	; 2
    37b0:	70 e0       	ldi	r23, 0x00	; 0
    37b2:	8c 2f       	mov	r24, r28
    37b4:	0e 94 3c 18 	call	0x3078	; 0x3078 <W5500Class::readSn(unsigned char, unsigned int)>
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:131

  /* +2008.01 bj */
  while ( (w5500.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    37b8:	84 fd       	sbrc	r24, 4
    37ba:	0e c0       	rjmp	.+28     	; 0x37d8 <EthernetClient::write(unsigned char const*, unsigned int)+0xba>
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
    37bc:	63 e0       	ldi	r22, 0x03	; 3
    37be:	70 e0       	ldi	r23, 0x00	; 0
    37c0:	8c 2f       	mov	r24, r28
    37c2:	0e 94 3c 18 	call	0x3078	; 0x3078 <W5500Class::readSn(unsigned char, unsigned int)>
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:134
  {
    /* m2008.01 [bj] : reduce code */
    if ( w5500.readSnSR(s) == SnSR::CLOSED )
    37c6:	81 11       	cpse	r24, r1
    37c8:	f2 cf       	rjmp	.-28     	; 0x37ae <EthernetClient::write(unsigned char const*, unsigned int)+0x90>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:136
    {
      close(s);
    37ca:	8c 2f       	mov	r24, r28
    37cc:	0e 94 95 18 	call	0x312a	; 0x312a <close(unsigned char)>
    37d0:	b8 cf       	rjmp	.-144    	; 0x3742 <EthernetClient::write(unsigned char const*, unsigned int)+0x24>
_ZN14EthernetClient5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:120
  {
    freesize = w5500.getTXFreeSize(s);
    status = w5500.readSnSR(s);
    if ((status != SnSR::ESTABLISHED) && (status != SnSR::CLOSE_WAIT))
    {
      ret = 0; 
    37d2:	10 e0       	ldi	r17, 0x00	; 0
    37d4:	00 e0       	ldi	r16, 0x00	; 0
    37d6:	df cf       	rjmp	.-66     	; 0x3796 <EthernetClient::write(unsigned char const*, unsigned int)+0x78>
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
    37d8:	40 e1       	ldi	r20, 0x10	; 16
    37da:	62 e0       	ldi	r22, 0x02	; 2
    37dc:	70 e0       	ldi	r23, 0x00	; 0
    37de:	8c 2f       	mov	r24, r28
    37e0:	0e 94 7d 17 	call	0x2efa	; 0x2efa <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN14EthernetClient5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:82
size_t EthernetClient::write(const uint8_t *buf, size_t size) {
  if (_sock == MAX_SOCK_NUM) {
    setWriteError();
    return 0;
  }
  if (!send(_sock, buf, size)) {
    37e4:	01 2b       	or	r16, r17
    37e6:	09 f0       	breq	.+2      	; 0x37ea <EthernetClient::write(unsigned char const*, unsigned int)+0xcc>
    37e8:	b3 cf       	rjmp	.-154    	; 0x3750 <EthernetClient::write(unsigned char const*, unsigned int)+0x32>
    37ea:	ab cf       	rjmp	.-170    	; 0x3742 <EthernetClient::write(unsigned char const*, unsigned int)+0x24>

000037ec <EthernetClient::connect(IPAddress, unsigned int)>:
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:38
  } else {
    return ret;
  }
}

int EthernetClient::connect(IPAddress ip, uint16_t port) {
    37ec:	df 92       	push	r13
    37ee:	ef 92       	push	r14
    37f0:	ff 92       	push	r15
    37f2:	0f 93       	push	r16
    37f4:	1f 93       	push	r17
    37f6:	cf 93       	push	r28
    37f8:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:39
  if (_sock != MAX_SOCK_NUM)
    37fa:	fc 01       	movw	r30, r24
    37fc:	24 85       	ldd	r18, Z+12	; 0x0c
    37fe:	28 30       	cpi	r18, 0x08	; 8
    3800:	51 f0       	breq	.+20     	; 0x3816 <EthernetClient::connect(IPAddress, unsigned int)+0x2a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:59
  if (_srcport == 0) _srcport = 1024;
  socket(_sock, SnMR::TCP, _srcport, 0);

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    _sock = MAX_SOCK_NUM;
    return 0;
    3802:	90 e0       	ldi	r25, 0x00	; 0
    3804:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:71
      return 0;
    }
  }

  return 1;
}
    3806:	df 91       	pop	r29
    3808:	cf 91       	pop	r28
    380a:	1f 91       	pop	r17
    380c:	0f 91       	pop	r16
    380e:	ff 90       	pop	r15
    3810:	ef 90       	pop	r14
    3812:	df 90       	pop	r13
    3814:	08 95       	ret
    3816:	7a 01       	movw	r14, r20
    3818:	eb 01       	movw	r28, r22
    381a:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:39
    return ret;
  }
}

int EthernetClient::connect(IPAddress ip, uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    381c:	d1 2c       	mov	r13, r1
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
    381e:	63 e0       	ldi	r22, 0x03	; 3
    3820:	70 e0       	ldi	r23, 0x00	; 0
    3822:	8d 2d       	mov	r24, r13
    3824:	0e 94 3c 18 	call	0x3078	; 0x3078 <W5500Class::readSn(unsigned char, unsigned int)>
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:44
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
    3828:	81 11       	cpse	r24, r1
    382a:	28 c0       	rjmp	.+80     	; 0x387c <EthernetClient::connect(IPAddress, unsigned int)+0x90>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:45
      _sock = i;
    382c:	f8 01       	movw	r30, r16
    382e:	d4 86       	std	Z+12, r13	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:50
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    3830:	f8 01       	movw	r30, r16
    3832:	84 85       	ldd	r24, Z+12	; 0x0c
    3834:	88 30       	cpi	r24, 0x08	; 8
    3836:	29 f3       	breq	.-54     	; 0x3802 <EthernetClient::connect(IPAddress, unsigned int)+0x16>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:53
    return 0;

  _srcport++;
    3838:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <EthernetClient::_srcport>
    383c:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <EthernetClient::_srcport+0x1>
    3840:	2f 5f       	subi	r18, 0xFF	; 255
    3842:	3f 4f       	sbci	r19, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:54
  if (_srcport == 0) _srcport = 1024;
    3844:	19 f1       	breq	.+70     	; 0x388c <EthernetClient::connect(IPAddress, unsigned int)+0xa0>
    3846:	30 93 05 02 	sts	0x0205, r19	; 0x800205 <EthernetClient::_srcport+0x1>
    384a:	20 93 04 02 	sts	0x0204, r18	; 0x800204 <EthernetClient::_srcport>
socket():
    384e:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <EthernetClient::_srcport>
    3852:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <EthernetClient::_srcport+0x1>
    3856:	61 e0       	ldi	r22, 0x01	; 1
    3858:	0e 94 a2 18 	call	0x3144	; 0x3144 <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.20]>
connect():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:72
 */
uint8_t connect(SOCKET s, uint8_t * addr, uint16_t port)
{
  if 
    (
  ((addr[0] == 0xFF) && (addr[1] == 0xFF) && (addr[2] == 0xFF) && (addr[3] == 0xFF)) ||
    385c:	8a 81       	ldd	r24, Y+2	; 0x02
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:70
 * 		
 * @return	1 for success else 0.
 */
uint8_t connect(SOCKET s, uint8_t * addr, uint16_t port)
{
  if 
    385e:	8f 3f       	cpi	r24, 0xFF	; 255
    3860:	c1 f4       	brne	.+48     	; 0x3892 <EthernetClient::connect(IPAddress, unsigned int)+0xa6>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:72
    (
  ((addr[0] == 0xFF) && (addr[1] == 0xFF) && (addr[2] == 0xFF) && (addr[3] == 0xFF)) ||
    3862:	8b 81       	ldd	r24, Y+3	; 0x03
    3864:	8f 3f       	cpi	r24, 0xFF	; 255
    3866:	01 f5       	brne	.+64     	; 0x38a8 <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
    3868:	8c 81       	ldd	r24, Y+4	; 0x04
    386a:	8f 3f       	cpi	r24, 0xFF	; 255
    386c:	e9 f4       	brne	.+58     	; 0x38a8 <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
    386e:	8d 81       	ldd	r24, Y+5	; 0x05
    3870:	8f 3f       	cpi	r24, 0xFF	; 255
    3872:	d1 f4       	brne	.+52     	; 0x38a8 <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:58
  socket(_sock, SnMR::TCP, _srcport, 0);

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    _sock = MAX_SOCK_NUM;
    3874:	88 e0       	ldi	r24, 0x08	; 8
    3876:	f8 01       	movw	r30, r16
    3878:	84 87       	std	Z+12, r24	; 0x0c
    387a:	c3 cf       	rjmp	.-122    	; 0x3802 <EthernetClient::connect(IPAddress, unsigned int)+0x16>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:44
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
    387c:	8b 7f       	andi	r24, 0xFB	; 251
    387e:	88 31       	cpi	r24, 0x18	; 24
    3880:	a9 f2       	breq	.-86     	; 0x382c <EthernetClient::connect(IPAddress, unsigned int)+0x40>
    3882:	d3 94       	inc	r13
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:42

int EthernetClient::connect(IPAddress ip, uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    3884:	f8 e0       	ldi	r31, 0x08	; 8
    3886:	df 12       	cpse	r13, r31
    3888:	ca cf       	rjmp	.-108    	; 0x381e <EthernetClient::connect(IPAddress, unsigned int)+0x32>
    388a:	d2 cf       	rjmp	.-92     	; 0x3830 <EthernetClient::connect(IPAddress, unsigned int)+0x44>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:54

  if (_sock == MAX_SOCK_NUM)
    return 0;

  _srcport++;
  if (_srcport == 0) _srcport = 1024;
    388c:	20 e0       	ldi	r18, 0x00	; 0
    388e:	34 e0       	ldi	r19, 0x04	; 4
    3890:	da cf       	rjmp	.-76     	; 0x3846 <EthernetClient::connect(IPAddress, unsigned int)+0x5a>
connect():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:72
    3892:	81 11       	cpse	r24, r1
    3894:	09 c0       	rjmp	.+18     	; 0x38a8 <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:73
    ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
    3896:	8b 81       	ldd	r24, Y+3	; 0x03
    3898:	81 11       	cpse	r24, r1
    389a:	06 c0       	rjmp	.+12     	; 0x38a8 <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
    389c:	8c 81       	ldd	r24, Y+4	; 0x04
    389e:	81 11       	cpse	r24, r1
    38a0:	03 c0       	rjmp	.+6      	; 0x38a8 <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
    38a2:	8d 81       	ldd	r24, Y+5	; 0x05
    38a4:	88 23       	and	r24, r24
    38a6:	31 f3       	breq	.-52     	; 0x3874 <EthernetClient::connect(IPAddress, unsigned int)+0x88>
    38a8:	e1 14       	cp	r14, r1
    38aa:	f1 04       	cpc	r15, r1
    38ac:	19 f3       	breq	.-58     	; 0x3874 <EthernetClient::connect(IPAddress, unsigned int)+0x88>
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:57
  socket(_sock, SnMR::TCP, _srcport, 0);

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    38ae:	f8 01       	movw	r30, r16
    38b0:	d4 84       	ldd	r13, Z+12	; 0x0c
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    38b2:	ae 01       	movw	r20, r28
    38b4:	4e 5f       	subi	r20, 0xFE	; 254
    38b6:	5f 4f       	sbci	r21, 0xFF	; 255
writeSn():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:363
    uint8_t cntl_byte = (_s<<5)+0x08;
    return read(_addr, cntl_byte, _buf, _len );
}

uint16_t W5500Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {
    uint8_t cntl_byte = (_s<<5)+0x0C;
    38b8:	6d 2d       	mov	r22, r13
    38ba:	62 95       	swap	r22
    38bc:	66 0f       	add	r22, r22
    38be:	60 7e       	andi	r22, 0xE0	; 224
    38c0:	64 5f       	subi	r22, 0xF4	; 244
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:364
    return write(_addr, cntl_byte, _buf, _len);
    38c2:	24 e0       	ldi	r18, 0x04	; 4
    38c4:	30 e0       	ldi	r19, 0x00	; 0
    38c6:	8c e0       	ldi	r24, 0x0C	; 12
    38c8:	90 e0       	ldi	r25, 0x00	; 0
    38ca:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
writeSnDPORT():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:312
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
  __SOCKET_REGISTER16(SnPORT,     0x0004)        // Source Port
  __SOCKET_REGISTER_N(SnDHAR,     0x0006, 6)     // Destination Hardw Addr
  __SOCKET_REGISTER_N(SnDIPR,     0x000C, 4)     // Destination IP Addr
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
    38ce:	4f 2d       	mov	r20, r15
    38d0:	60 e1       	ldi	r22, 0x10	; 16
    38d2:	70 e0       	ldi	r23, 0x00	; 0
    38d4:	8d 2d       	mov	r24, r13
    38d6:	0e 94 7d 17 	call	0x2efa	; 0x2efa <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
    38da:	4e 2d       	mov	r20, r14
    38dc:	61 e1       	ldi	r22, 0x11	; 17
    38de:	70 e0       	ldi	r23, 0x00	; 0
    38e0:	8d 2d       	mov	r24, r13
    38e2:	0e 94 7d 17 	call	0x2efa	; 0x2efa <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
connect():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:81
    return 0;

  // set destination IP
  w5500.writeSnDIPR(s, addr);
  w5500.writeSnDPORT(s, port);
  w5500.execCmdSn(s, Sock_CONNECT);
    38e6:	64 e0       	ldi	r22, 0x04	; 4
    38e8:	70 e0       	ldi	r23, 0x00	; 0
    38ea:	8d 2d       	mov	r24, r13
    38ec:	0e 94 85 18 	call	0x310a	; 0x310a <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.25]>
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:62
    _sock = MAX_SOCK_NUM;
    return 0;
  }

  while (status() != SnSR::ESTABLISHED) {
    38f0:	c8 01       	movw	r24, r16
    38f2:	0e 94 2d 1a 	call	0x345a	; 0x345a <EthernetClient::status()>
    38f6:	87 31       	cpi	r24, 0x17	; 23
    38f8:	61 f0       	breq	.+24     	; 0x3912 <EthernetClient::connect(IPAddress, unsigned int)+0x126>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:63
    delay(1);
    38fa:	61 e0       	ldi	r22, 0x01	; 1
    38fc:	70 e0       	ldi	r23, 0x00	; 0
    38fe:	80 e0       	ldi	r24, 0x00	; 0
    3900:	90 e0       	ldi	r25, 0x00	; 0
    3902:	0e 94 00 12 	call	0x2400	; 0x2400 <delay>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:64
    if (status() == SnSR::CLOSED) {
    3906:	c8 01       	movw	r24, r16
    3908:	0e 94 2d 1a 	call	0x345a	; 0x345a <EthernetClient::status()>
    390c:	81 11       	cpse	r24, r1
    390e:	f0 cf       	rjmp	.-32     	; 0x38f0 <EthernetClient::connect(IPAddress, unsigned int)+0x104>
    3910:	b1 cf       	rjmp	.-158    	; 0x3874 <EthernetClient::connect(IPAddress, unsigned int)+0x88>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:70
      _sock = MAX_SOCK_NUM;
      return 0;
    }
  }

  return 1;
    3912:	81 e0       	ldi	r24, 0x01	; 1
    3914:	90 e0       	ldi	r25, 0x00	; 0
    3916:	77 cf       	rjmp	.-274    	; 0x3806 <EthernetClient::connect(IPAddress, unsigned int)+0x1a>

00003918 <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.h:63
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    3918:	90 e0       	ldi	r25, 0x00	; 0
    391a:	80 e0       	ldi	r24, 0x00	; 0
    391c:	08 95       	ret

0000391e <EthernetUDP::read(char*, unsigned int)>:
_ZN11EthernetUDP4readEPcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.h:94
  // Read up to len bytes from the current packet and place them into buffer
  // Returns the number of bytes read, or 0 if none are available
  virtual int read(unsigned char* buffer, size_t len);
  // Read up to len characters from the current packet and place them into buffer
  // Returns the number of characters read, or 0 if none are available
  virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
    391e:	dc 01       	movw	r26, r24
    3920:	ed 91       	ld	r30, X+
    3922:	fc 91       	ld	r31, X
    3924:	04 8c       	ldd	r0, Z+28	; 0x1c
    3926:	f5 8d       	ldd	r31, Z+29	; 0x1d
    3928:	e0 2d       	mov	r30, r0
    392a:	19 94       	eijmp

0000392c <SPIClass::begin()>:
_ZN8SPIClass5beginEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:27
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    392c:	cf 93       	push	r28
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:28
  uint8_t sreg = SREG;
    392e:	cf b7       	in	r28, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:29
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    3930:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:30
  if (!initialized) {
    3932:	80 91 13 0b 	lds	r24, 0x0B13	; 0x800b13 <SPIClass::initialized>
    3936:	81 11       	cpse	r24, r1
    3938:	27 c0       	rjmp	.+78     	; 0x3988 <SPIClass::begin()+0x5c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:32
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    393a:	e2 e0       	ldi	r30, 0x02	; 2
    393c:	fc e1       	ldi	r31, 0x1C	; 28
    393e:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:33
    uint8_t bit = digitalPinToBitMask(SS);
    3940:	ec eb       	ldi	r30, 0xBC	; 188
    3942:	fb e1       	ldi	r31, 0x1B	; 27
    3944:	94 91       	lpm	r25, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:34
    volatile uint8_t *reg = portModeRegister(port);
    3946:	e8 2f       	mov	r30, r24
    3948:	f0 e0       	ldi	r31, 0x00	; 0
    394a:	ee 0f       	add	r30, r30
    394c:	ff 1f       	adc	r31, r31
    394e:	ed 59       	subi	r30, 0x9D	; 157
    3950:	f9 4e       	sbci	r31, 0xE9	; 233
    3952:	a5 91       	lpm	r26, Z+
    3954:	b4 91       	lpm	r27, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:38

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    3956:	ec 91       	ld	r30, X
    3958:	e9 23       	and	r30, r25
    395a:	21 f4       	brne	.+8      	; 0x3964 <SPIClass::begin()+0x38>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:39
      digitalWrite(SS, HIGH);
    395c:	61 e0       	ldi	r22, 0x01	; 1
    395e:	88 e0       	ldi	r24, 0x08	; 8
    3960:	0e 94 3a 11 	call	0x2274	; 0x2274 <digitalWrite>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:45
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    3964:	61 e0       	ldi	r22, 0x01	; 1
    3966:	88 e0       	ldi	r24, 0x08	; 8
    3968:	0e 94 9f 11 	call	0x233e	; 0x233e <pinMode>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:50

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    396c:	8c b5       	in	r24, 0x2c	; 44
    396e:	80 61       	ori	r24, 0x10	; 16
    3970:	8c bd       	out	0x2c, r24	; 44
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:51
    SPCR |= _BV(SPE);
    3972:	8c b5       	in	r24, 0x2c	; 44
    3974:	80 64       	ori	r24, 0x40	; 64
    3976:	8c bd       	out	0x2c, r24	; 44
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:59
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    3978:	61 e0       	ldi	r22, 0x01	; 1
    397a:	89 e0       	ldi	r24, 0x09	; 9
    397c:	0e 94 9f 11 	call	0x233e	; 0x233e <pinMode>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:60
    pinMode(MOSI, OUTPUT);
    3980:	61 e0       	ldi	r22, 0x01	; 1
    3982:	8a e0       	ldi	r24, 0x0A	; 10
    3984:	0e 94 9f 11 	call	0x233e	; 0x233e <pinMode>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:62
  }
  initialized++; // reference count
    3988:	80 91 13 0b 	lds	r24, 0x0B13	; 0x800b13 <SPIClass::initialized>
    398c:	8f 5f       	subi	r24, 0xFF	; 255
    398e:	80 93 13 0b 	sts	0x0B13, r24	; 0x800b13 <SPIClass::initialized>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:63
  SREG = sreg;
    3992:	cf bf       	out	0x3f, r28	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:64
}
    3994:	cf 91       	pop	r28
    3996:	08 95       	ret

00003998 <EthernetClass::begin(unsigned char*, IPAddress, IPAddress, IPAddress, IPAddress) [clone .constprop.117]>:
_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_.constprop.117():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.cpp:136
{
  IPAddress subnet(255, 255, 255, 0);
  begin(mac_address, local_ip, dns_server, gateway, subnet);
}

void EthernetClass::begin(uint8_t *mac, IPAddress local_ip, IPAddress dns_server, IPAddress gateway, IPAddress subnet)
    3998:	8f 92       	push	r8
    399a:	9f 92       	push	r9
    399c:	af 92       	push	r10
    399e:	bf 92       	push	r11
    39a0:	cf 92       	push	r12
    39a2:	df 92       	push	r13
    39a4:	ef 92       	push	r14
    39a6:	ff 92       	push	r15
    39a8:	0f 93       	push	r16
    39aa:	1f 93       	push	r17
    39ac:	cf 93       	push	r28
    39ae:	5c 01       	movw	r10, r24
    39b0:	6b 01       	movw	r12, r22
    39b2:	7a 01       	movw	r14, r20
    39b4:	89 01       	movw	r16, r18
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.cpp:138
{
  w5500.init(w5500_cspin);
    39b6:	c0 91 fb 0f 	lds	r28, 0x0FFB	; 0x800ffb <Ethernet+0xc>
init():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:30
SPISettings wiznet_SPI_settings(8000000, MSBFIRST, SPI_MODE0);
uint8_t SPI_CS;

void W5500Class::init(uint8_t ss_pin)
{
  SPI_CS = ss_pin;
    39ba:	c0 93 d8 0e 	sts	0x0ED8, r28	; 0x800ed8 <SPI_CS>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:32

  delay(1000);
    39be:	68 ee       	ldi	r22, 0xE8	; 232
    39c0:	73 e0       	ldi	r23, 0x03	; 3
    39c2:	80 e0       	ldi	r24, 0x00	; 0
    39c4:	90 e0       	ldi	r25, 0x00	; 0
    39c6:	0e 94 00 12 	call	0x2400	; 0x2400 <delay>
initSS():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:340
private:
  static const uint16_t RSIZE = 2048; // Max Rx buffer size

private:
  // could do inline optimizations
  static inline void initSS()  { pinMode(SPI_CS, OUTPUT); }
    39ca:	61 e0       	ldi	r22, 0x01	; 1
    39cc:	8c 2f       	mov	r24, r28
    39ce:	0e 94 9f 11 	call	0x233e	; 0x233e <pinMode>
init():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:34
  initSS();
  SPI.begin();
    39d2:	0e 94 96 1c 	call	0x392c	; 0x392c <SPIClass::begin()>
readMR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:234
  static uint16_t read##name(uint8_t *_buff) {    \
    return read(address, 0x00, _buff, size);      \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
    39d6:	60 e0       	ldi	r22, 0x00	; 0
    39d8:	90 e0       	ldi	r25, 0x00	; 0
    39da:	80 e0       	ldi	r24, 0x00	; 0
    39dc:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <W5500Class::read(unsigned int, unsigned char)>
_ZN10W5500Class7swResetEv.isra.1():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:417
//  readPHYCFGR();
  return read(0x002E, 0x00);
}

void W5500Class::swReset() {
  writeMR( (readMR() | 0x80) );
    39e0:	48 2f       	mov	r20, r24
    39e2:	40 68       	ori	r20, 0x80	; 128
writeMR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:234
  static uint16_t read##name(uint8_t *_buff) {    \
    return read(address, 0x00, _buff, size);      \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
    39e4:	64 e0       	ldi	r22, 0x04	; 4
    39e6:	90 e0       	ldi	r25, 0x00	; 0
    39e8:	80 e0       	ldi	r24, 0x00	; 0
    39ea:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <W5500Class::write(unsigned int, unsigned char, unsigned char)>
    39ee:	cc e0       	ldi	r28, 0x0C	; 12
    39f0:	88 e0       	ldi	r24, 0x08	; 8
    39f2:	88 2e       	mov	r8, r24
    39f4:	91 2c       	mov	r9, r1
init():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:38
  w5500.swReset();
  for (int i=0; i<MAX_SOCK_NUM; i++) {
    uint8_t cntl_byte = (0x0C + (i<<5));
    write( 0x1E, cntl_byte, 2); //0x1E - Sn_RXBUF_SIZE
    39f6:	42 e0       	ldi	r20, 0x02	; 2
    39f8:	6c 2f       	mov	r22, r28
    39fa:	8e e1       	ldi	r24, 0x1E	; 30
    39fc:	90 e0       	ldi	r25, 0x00	; 0
    39fe:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <W5500Class::write(unsigned int, unsigned char, unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:39
    write( 0x1F, cntl_byte, 2); //0x1F - Sn_TXBUF_SIZE
    3a02:	42 e0       	ldi	r20, 0x02	; 2
    3a04:	6c 2f       	mov	r22, r28
    3a06:	8f e1       	ldi	r24, 0x1F	; 31
    3a08:	90 e0       	ldi	r25, 0x00	; 0
    3a0a:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <W5500Class::write(unsigned int, unsigned char, unsigned char)>
    3a0e:	81 e0       	ldi	r24, 0x01	; 1
    3a10:	88 1a       	sub	r8, r24
    3a12:	91 08       	sbc	r9, r1
    3a14:	c0 5e       	subi	r28, 0xE0	; 224
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:36

  delay(1000);
  initSS();
  SPI.begin();
  w5500.swReset();
  for (int i=0; i<MAX_SOCK_NUM; i++) {
    3a16:	81 14       	cp	r8, r1
    3a18:	91 04       	cpc	r9, r1
    3a1a:	69 f7       	brne	.-38     	; 0x39f6 <EthernetClass::begin(unsigned char*, IPAddress, IPAddress, IPAddress, IPAddress) [clone .constprop.117]+0x5e>
writeSHAR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:237
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
  __GP_REGISTER_N(SHAR,   0x0009, 6); // Source MAC address
    3a1c:	26 e0       	ldi	r18, 0x06	; 6
    3a1e:	30 e0       	ldi	r19, 0x00	; 0
    3a20:	46 e1       	ldi	r20, 0x16	; 22
    3a22:	50 e1       	ldi	r21, 0x10	; 16
    3a24:	64 e0       	ldi	r22, 0x04	; 4
    3a26:	89 e0       	ldi	r24, 0x09	; 9
    3a28:	90 e0       	ldi	r25, 0x00	; 0
    3a2a:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:40
    3a2e:	a5 01       	movw	r20, r10
    3a30:	4e 5f       	subi	r20, 0xFE	; 254
    3a32:	5f 4f       	sbci	r21, 0xFF	; 255
writeSIPR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:238
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
    3a34:	24 e0       	ldi	r18, 0x04	; 4
    3a36:	30 e0       	ldi	r19, 0x00	; 0
    3a38:	64 e0       	ldi	r22, 0x04	; 4
    3a3a:	8f e0       	ldi	r24, 0x0F	; 15
    3a3c:	90 e0       	ldi	r25, 0x00	; 0
    3a3e:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:40
    3a42:	a7 01       	movw	r20, r14
    3a44:	4e 5f       	subi	r20, 0xFE	; 254
    3a46:	5f 4f       	sbci	r21, 0xFF	; 255
writeGAR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:235
    return read(address, 0x00, _buff, size);      \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
    3a48:	24 e0       	ldi	r18, 0x04	; 4
    3a4a:	30 e0       	ldi	r19, 0x00	; 0
    3a4c:	64 e0       	ldi	r22, 0x04	; 4
    3a4e:	81 e0       	ldi	r24, 0x01	; 1
    3a50:	90 e0       	ldi	r25, 0x00	; 0
    3a52:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:40
    3a56:	a8 01       	movw	r20, r16
    3a58:	4e 5f       	subi	r20, 0xFE	; 254
    3a5a:	5f 4f       	sbci	r21, 0xFF	; 255
writeSUBR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:236
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
    3a5c:	24 e0       	ldi	r18, 0x04	; 4
    3a5e:	30 e0       	ldi	r19, 0x00	; 0
    3a60:	64 e0       	ldi	r22, 0x04	; 4
    3a62:	85 e0       	ldi	r24, 0x05	; 5
    3a64:	90 e0       	ldi	r25, 0x00	; 0
    3a66:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
_ZN9IPAddressaSERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    3a6a:	f6 01       	movw	r30, r12
    3a6c:	82 81       	ldd	r24, Z+2	; 0x02
    3a6e:	93 81       	ldd	r25, Z+3	; 0x03
    3a70:	a4 81       	ldd	r26, Z+4	; 0x04
    3a72:	b5 81       	ldd	r27, Z+5	; 0x05
    3a74:	80 93 f1 0f 	sts	0x0FF1, r24	; 0x800ff1 <Ethernet+0x2>
    3a78:	90 93 f2 0f 	sts	0x0FF2, r25	; 0x800ff2 <Ethernet+0x3>
    3a7c:	a0 93 f3 0f 	sts	0x0FF3, r26	; 0x800ff3 <Ethernet+0x4>
    3a80:	b0 93 f4 0f 	sts	0x0FF4, r27	; 0x800ff4 <Ethernet+0x5>
_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_.constprop.117():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.cpp:144
  w5500.setMACAddress(mac);
  w5500.setIPAddress(local_ip.raw_address());
  w5500.setGatewayIp(gateway.raw_address());
  w5500.setSubnetMask(subnet.raw_address());
  _dnsServerAddress = dns_server;
}
    3a84:	cf 91       	pop	r28
    3a86:	1f 91       	pop	r17
    3a88:	0f 91       	pop	r16
    3a8a:	ff 90       	pop	r15
    3a8c:	ef 90       	pop	r14
    3a8e:	df 90       	pop	r13
    3a90:	cf 90       	pop	r12
    3a92:	bf 90       	pop	r11
    3a94:	af 90       	pop	r10
    3a96:	9f 90       	pop	r9
    3a98:	8f 90       	pop	r8
    3a9a:	08 95       	ret

00003a9c <SoftSPIB::transfer(unsigned char)>:
_ZN8SoftSPIB8transferEh():
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:76
    val[l] = transfer(val[l]);
    }
}


uint8_t SoftSPIB::transfer(uint8_t val) {
    3a9c:	7f 92       	push	r7
    3a9e:	8f 92       	push	r8
    3aa0:	9f 92       	push	r9
    3aa2:	af 92       	push	r10
    3aa4:	bf 92       	push	r11
    3aa6:	cf 92       	push	r12
    3aa8:	df 92       	push	r13
    3aaa:	ef 92       	push	r14
    3aac:	ff 92       	push	r15
    3aae:	0f 93       	push	r16
    3ab0:	1f 93       	push	r17
    3ab2:	cf 93       	push	r28
    3ab4:	df 93       	push	r29
    3ab6:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:79

    uint8_t out = 0;
    if (_order == MSBFIRST) {
    3ab8:	fc 01       	movw	r30, r24
    3aba:	86 81       	ldd	r24, Z+6	; 0x06
    3abc:	81 11       	cpse	r24, r1
    3abe:	35 c0       	rjmp	.+106    	; 0x3b2a <SoftSPIB::transfer(unsigned char)+0x8e>
    3ac0:	86 2f       	mov	r24, r22
    3ac2:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:81
        uint8_t v2 = 
            ((val & 0x01) << 7) |
    3ac4:	ec 01       	movw	r28, r24
    3ac6:	d6 95       	lsr	r29
    3ac8:	dc 2f       	mov	r29, r28
    3aca:	cc 27       	eor	r28, r28
    3acc:	d7 95       	ror	r29
    3ace:	c7 95       	ror	r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:88
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
            ((val & 0x80) >> 7);
    3ad0:	66 1f       	adc	r22, r22
    3ad2:	66 27       	eor	r22, r22
    3ad4:	66 1f       	adc	r22, r22
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
    3ad6:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:82

    uint8_t out = 0;
    if (_order == MSBFIRST) {
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
    3ad8:	ec 01       	movw	r28, r24
    3ada:	55 e0       	ldi	r21, 0x05	; 5
    3adc:	cc 0f       	add	r28, r28
    3ade:	dd 1f       	adc	r29, r29
    3ae0:	5a 95       	dec	r21
    3ae2:	e1 f7       	brne	.-8      	; 0x3adc <SoftSPIB::transfer(unsigned char)+0x40>
    3ae4:	c0 74       	andi	r28, 0x40	; 64
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
    3ae6:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:83
    uint8_t out = 0;
    if (_order == MSBFIRST) {
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
    3ae8:	ec 01       	movw	r28, r24
    3aea:	73 e0       	ldi	r23, 0x03	; 3
    3aec:	cc 0f       	add	r28, r28
    3aee:	dd 1f       	adc	r29, r29
    3af0:	7a 95       	dec	r23
    3af2:	e1 f7       	brne	.-8      	; 0x3aec <SoftSPIB::transfer(unsigned char)+0x50>
    3af4:	c0 72       	andi	r28, 0x20	; 32
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
    3af6:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:84
    if (_order == MSBFIRST) {
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
    3af8:	ec 01       	movw	r28, r24
    3afa:	cc 0f       	add	r28, r28
    3afc:	dd 1f       	adc	r29, r29
    3afe:	c0 71       	andi	r28, 0x10	; 16
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
    3b00:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:85
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
    3b02:	ec 01       	movw	r28, r24
    3b04:	d5 95       	asr	r29
    3b06:	c7 95       	ror	r28
    3b08:	c8 70       	andi	r28, 0x08	; 8
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
    3b0a:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:86
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
    3b0c:	ec 01       	movw	r28, r24
    3b0e:	a3 e0       	ldi	r26, 0x03	; 3
    3b10:	d5 95       	asr	r29
    3b12:	c7 95       	ror	r28
    3b14:	aa 95       	dec	r26
    3b16:	e1 f7       	brne	.-8      	; 0x3b10 <SoftSPIB::transfer(unsigned char)+0x74>
    3b18:	c4 70       	andi	r28, 0x04	; 4
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x40) >> 5) |
    3b1a:	6c 2b       	or	r22, r28
    3b1c:	b5 e0       	ldi	r27, 0x05	; 5
    3b1e:	95 95       	asr	r25
    3b20:	87 95       	ror	r24
    3b22:	ba 95       	dec	r27
    3b24:	e1 f7       	brne	.-8      	; 0x3b1e <SoftSPIB::transfer(unsigned char)+0x82>
    3b26:	82 70       	andi	r24, 0x02	; 2
    3b28:	68 2b       	or	r22, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:96

    //uint8_t del = _delay >> 1;

    uint8_t bval = 0;

    int sck = (_ckp) ? HIGH : LOW;
    3b2a:	91 e0       	ldi	r25, 0x01	; 1
    3b2c:	80 e0       	ldi	r24, 0x00	; 0
    3b2e:	f8 01       	movw	r30, r16
    3b30:	21 81       	ldd	r18, Z+1	; 0x01
    3b32:	21 11       	cpse	r18, r1
    3b34:	01 c0       	rjmp	.+2      	; 0x3b38 <SoftSPIB::transfer(unsigned char)+0x9c>
    3b36:	90 e0       	ldi	r25, 0x00	; 0
    3b38:	e9 2e       	mov	r14, r25
    3b3a:	f8 2e       	mov	r15, r24
    3b3c:	d1 2c       	mov	r13, r1
    3b3e:	c1 2c       	mov	r12, r1
    3b40:	91 2c       	mov	r9, r1
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:107
            digitalWrite(_sck, sck);            
            //wait(del);
        }

        /* ... Write bit */
        digitalWrite(_mosi, ((val & (1<<bit)) ? HIGH : LOW));
    3b42:	c6 2f       	mov	r28, r22
    3b44:	d0 e0       	ldi	r29, 0x00	; 0
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:100

    int sck = (_ckp) ? HIGH : LOW;

    for (uint8_t bit = 0u; bit < 8u; bit++)
    {
        if (_cke) {
    3b46:	f8 01       	movw	r30, r16
    3b48:	80 81       	ld	r24, Z
    3b4a:	88 23       	and	r24, r24
    3b4c:	39 f0       	breq	.+14     	; 0x3b5c <SoftSPIB::transfer(unsigned char)+0xc0>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:101
            sck ^= 1;
    3b4e:	f1 e0       	ldi	r31, 0x01	; 1
    3b50:	ef 26       	eor	r14, r31
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:102
            digitalWrite(_sck, sck);            
    3b52:	6e 2d       	mov	r22, r14
    3b54:	f8 01       	movw	r30, r16
    3b56:	85 81       	ldd	r24, Z+5	; 0x05
    3b58:	0e 94 3a 11 	call	0x2274	; 0x2274 <digitalWrite>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:107
            //wait(del);
        }

        /* ... Write bit */
        digitalWrite(_mosi, ((val & (1<<bit)) ? HIGH : LOW));
    3b5c:	be 01       	movw	r22, r28
    3b5e:	0c 2c       	mov	r0, r12
    3b60:	02 c0       	rjmp	.+4      	; 0x3b66 <SoftSPIB::transfer(unsigned char)+0xca>
    3b62:	75 95       	asr	r23
    3b64:	67 95       	ror	r22
    3b66:	0a 94       	dec	r0
    3b68:	e2 f7       	brpl	.-8      	; 0x3b62 <SoftSPIB::transfer(unsigned char)+0xc6>
    3b6a:	61 70       	andi	r22, 0x01	; 1
    3b6c:	f8 01       	movw	r30, r16
    3b6e:	84 81       	ldd	r24, Z+4	; 0x04
    3b70:	0e 94 3a 11 	call	0x2274	; 0x2274 <digitalWrite>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:111

        //wait(del);

        sck ^= 1u; 
    3b74:	57 01       	movw	r10, r14
    3b76:	f1 e0       	ldi	r31, 0x01	; 1
    3b78:	af 26       	eor	r10, r31
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:112
	digitalWrite(_sck, sck);
    3b7a:	6a 2d       	mov	r22, r10
    3b7c:	f8 01       	movw	r30, r16
    3b7e:	85 81       	ldd	r24, Z+5	; 0x05
    3b80:	0e 94 3a 11 	call	0x2274	; 0x2274 <digitalWrite>
digitalRead():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:216
  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
  uint8_t timer = digitalPinToTimer(pin);
    3b84:	f8 01       	movw	r30, r16
    3b86:	23 81       	ldd	r18, Z+3	; 0x03
    3b88:	30 e0       	ldi	r19, 0x00	; 0
    3b8a:	f9 01       	movw	r30, r18
    3b8c:	ed 58       	subi	r30, 0x8D	; 141
    3b8e:	f9 4e       	sbci	r31, 0xE9	; 233
    3b90:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
    3b92:	f9 01       	movw	r30, r18
    3b94:	ec 54       	subi	r30, 0x4C	; 76
    3b96:	f4 4e       	sbci	r31, 0xE4	; 228
    3b98:	84 90       	lpm	r8, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
    3b9a:	f9 01       	movw	r30, r18
    3b9c:	e6 50       	subi	r30, 0x06	; 6
    3b9e:	f4 4e       	sbci	r31, 0xE4	; 228
    3ba0:	74 90       	lpm	r7, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
    3ba2:	77 20       	and	r7, r7
    3ba4:	a9 f1       	breq	.+106    	; 0x3c10 <SoftSPIB::transfer(unsigned char)+0x174>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    3ba6:	81 11       	cpse	r24, r1
    3ba8:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <turnOffPWM>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
    3bac:	e7 2d       	mov	r30, r7
    3bae:	f0 e0       	ldi	r31, 0x00	; 0
    3bb0:	ee 0f       	add	r30, r30
    3bb2:	ff 1f       	adc	r31, r31
    3bb4:	ec 55       	subi	r30, 0x5C	; 92
    3bb6:	f4 4e       	sbci	r31, 0xE4	; 228
    3bb8:	a5 91       	lpm	r26, Z+
    3bba:	b4 91       	lpm	r27, Z
    3bbc:	ec 91       	ld	r30, X
    3bbe:	8e 22       	and	r8, r30
    3bc0:	31 e0       	ldi	r19, 0x01	; 1
    3bc2:	20 e0       	ldi	r18, 0x00	; 0
    3bc4:	09 f4       	brne	.+2      	; 0x3bc8 <SoftSPIB::transfer(unsigned char)+0x12c>
    3bc6:	30 e0       	ldi	r19, 0x00	; 0
_ZN8SoftSPIB8transferEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
    3bc8:	83 2f       	mov	r24, r19
    3bca:	92 2f       	mov	r25, r18
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:118

        /* ... Read bit */
        {
            bval = digitalRead(_miso);

            if (_order == MSBFIRST) {
    3bcc:	f8 01       	movw	r30, r16
    3bce:	26 81       	ldd	r18, Z+6	; 0x06
    3bd0:	21 11       	cpse	r18, r1
    3bd2:	21 c0       	rjmp	.+66     	; 0x3c16 <SoftSPIB::transfer(unsigned char)+0x17a>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:119
                out <<= 1;
    3bd4:	99 0c       	add	r9, r9
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:123
                out |= bval;
            } else {
                out >>= 1;
                out |= bval << 7;
    3bd6:	98 2a       	or	r9, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:129
            }
        }

        //wait(del);

        if (!_cke) {
    3bd8:	f8 01       	movw	r30, r16
    3bda:	80 81       	ld	r24, Z
    3bdc:	88 23       	and	r24, r24
    3bde:	11 f1       	breq	.+68     	; 0x3c24 <SoftSPIB::transfer(unsigned char)+0x188>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:111
        /* ... Write bit */
        digitalWrite(_mosi, ((val & (1<<bit)) ? HIGH : LOW));

        //wait(del);

        sck ^= 1u; 
    3be0:	75 01       	movw	r14, r10
    3be2:	ff ef       	ldi	r31, 0xFF	; 255
    3be4:	cf 1a       	sub	r12, r31
    3be6:	df 0a       	sbc	r13, r31
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:98

    uint8_t bval = 0;

    int sck = (_ckp) ? HIGH : LOW;

    for (uint8_t bit = 0u; bit < 8u; bit++)
    3be8:	28 e0       	ldi	r18, 0x08	; 8
    3bea:	c2 16       	cp	r12, r18
    3bec:	d1 04       	cpc	r13, r1
    3bee:	09 f0       	breq	.+2      	; 0x3bf2 <SoftSPIB::transfer(unsigned char)+0x156>
    3bf0:	aa cf       	rjmp	.-172    	; 0x3b46 <SoftSPIB::transfer(unsigned char)+0xaa>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:137
        }
    }

    return out;

}
    3bf2:	89 2d       	mov	r24, r9
    3bf4:	df 91       	pop	r29
    3bf6:	cf 91       	pop	r28
    3bf8:	1f 91       	pop	r17
    3bfa:	0f 91       	pop	r16
    3bfc:	ff 90       	pop	r15
    3bfe:	ef 90       	pop	r14
    3c00:	df 90       	pop	r13
    3c02:	cf 90       	pop	r12
    3c04:	bf 90       	pop	r11
    3c06:	af 90       	pop	r10
    3c08:	9f 90       	pop	r9
    3c0a:	8f 90       	pop	r8
    3c0c:	7f 90       	pop	r7
    3c0e:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:220
    3c10:	90 e0       	ldi	r25, 0x00	; 0
    3c12:	80 e0       	ldi	r24, 0x00	; 0
    3c14:	db cf       	rjmp	.-74     	; 0x3bcc <SoftSPIB::transfer(unsigned char)+0x130>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:123
            if (_order == MSBFIRST) {
                out <<= 1;
                out |= bval;
            } else {
                out >>= 1;
                out |= bval << 7;
    3c16:	96 95       	lsr	r25
    3c18:	98 2f       	mov	r25, r24
    3c1a:	88 27       	eor	r24, r24
    3c1c:	97 95       	ror	r25
    3c1e:	87 95       	ror	r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:122

            if (_order == MSBFIRST) {
                out <<= 1;
                out |= bval;
            } else {
                out >>= 1;
    3c20:	96 94       	lsr	r9
    3c22:	d9 cf       	rjmp	.-78     	; 0x3bd6 <SoftSPIB::transfer(unsigned char)+0x13a>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:131

        //wait(del);

        if (!_cke) {
            sck ^= 1u;
            digitalWrite(_sck, sck);
    3c24:	6e 2d       	mov	r22, r14
    3c26:	85 81       	ldd	r24, Z+5	; 0x05
    3c28:	0e 94 3a 11 	call	0x2274	; 0x2274 <digitalWrite>
    3c2c:	da cf       	rjmp	.-76     	; 0x3be2 <SoftSPIB::transfer(unsigned char)+0x146>

00003c2e <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.105]>:
_ZN12EEPROM_CAT2512startCommandEhm.constprop.105():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:180
  endCommand();

  return(length);
}

void EEPROM_CAT25::startCommand(uint8_t command, const uint32_t address)
    3c2e:	cf 93       	push	r28
    3c30:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:183
{
  //_spi->beginTransaction();
  digitalWrite(_chipSelect, LOW);
    3c32:	60 e0       	ldi	r22, 0x00	; 0
    3c34:	80 91 78 10 	lds	r24, 0x1078	; 0x801078 <SROM+0xa>
    3c38:	0e 94 3a 11 	call	0x2274	; 0x2274 <digitalWrite>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:193
    } else if (command == EEPROM_CAT25_COMMAND_WRITE) {
      command = EEPROM_CAT25_COMMAND_WRITE_A8_HIGH;
    }
  }

  _spi->transfer(command);
    3c3c:	6c 2f       	mov	r22, r28
    3c3e:	80 91 6e 10 	lds	r24, 0x106E	; 0x80106e <SROM>
    3c42:	90 91 6f 10 	lds	r25, 0x106F	; 0x80106f <SROM+0x1>
    3c46:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:195

  if (command == EEPROM_CAT25_COMMAND_READ || command == EEPROM_CAT25_COMMAND_WRITE) {
    3c4a:	c2 50       	subi	r28, 0x02	; 2
    3c4c:	c2 30       	cpi	r28, 0x02	; 2
    3c4e:	a8 f5       	brcc	.+106    	; 0x3cba <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.105]+0x8c>
sendAddressBytes():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:202
  }
}

void EEPROM_CAT25::sendAddressBytes(const uint32_t address)
{
  if (_capacity > 0x10000) {
    3c50:	80 91 72 10 	lds	r24, 0x1072	; 0x801072 <SROM+0x4>
    3c54:	90 91 73 10 	lds	r25, 0x1073	; 0x801073 <SROM+0x5>
    3c58:	a0 91 74 10 	lds	r26, 0x1074	; 0x801074 <SROM+0x6>
    3c5c:	b0 91 75 10 	lds	r27, 0x1075	; 0x801075 <SROM+0x7>
    3c60:	01 97       	sbiw	r24, 0x01	; 1
    3c62:	a1 40       	sbci	r26, 0x01	; 1
    3c64:	b1 05       	cpc	r27, r1
    3c66:	38 f0       	brcs	.+14     	; 0x3c76 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.105]+0x48>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:203
    _spi->transfer((uint8_t)((address >> 16) & 0xFF));
    3c68:	60 e0       	ldi	r22, 0x00	; 0
    3c6a:	80 91 6e 10 	lds	r24, 0x106E	; 0x80106e <SROM>
    3c6e:	90 91 6f 10 	lds	r25, 0x106F	; 0x80106f <SROM+0x1>
    3c72:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:206
  }

  if ((_capacity > 0x100) && (_device != CAT25040)) {
    3c76:	80 91 72 10 	lds	r24, 0x1072	; 0x801072 <SROM+0x4>
    3c7a:	90 91 73 10 	lds	r25, 0x1073	; 0x801073 <SROM+0x5>
    3c7e:	a0 91 74 10 	lds	r26, 0x1074	; 0x801074 <SROM+0x6>
    3c82:	b0 91 75 10 	lds	r27, 0x1075	; 0x801075 <SROM+0x7>
    3c86:	81 30       	cpi	r24, 0x01	; 1
    3c88:	91 40       	sbci	r25, 0x01	; 1
    3c8a:	a1 05       	cpc	r26, r1
    3c8c:	b1 05       	cpc	r27, r1
    3c8e:	68 f0       	brcs	.+26     	; 0x3caa <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.105]+0x7c>
    3c90:	80 91 70 10 	lds	r24, 0x1070	; 0x801070 <SROM+0x2>
    3c94:	90 91 71 10 	lds	r25, 0x1071	; 0x801071 <SROM+0x3>
    3c98:	0b 97       	sbiw	r24, 0x0b	; 11
    3c9a:	39 f0       	breq	.+14     	; 0x3caa <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.105]+0x7c>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:207
    _spi->transfer((uint8_t)((address >> 8) & 0xFF));
    3c9c:	60 e0       	ldi	r22, 0x00	; 0
    3c9e:	80 91 6e 10 	lds	r24, 0x106E	; 0x80106e <SROM>
    3ca2:	90 91 6f 10 	lds	r25, 0x106F	; 0x80106f <SROM+0x1>
    3ca6:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:210
  }

  _spi->transfer((uint8_t)(address & 0xFF));
    3caa:	60 e0       	ldi	r22, 0x00	; 0
    3cac:	80 91 6e 10 	lds	r24, 0x106E	; 0x80106e <SROM>
    3cb0:	90 91 6f 10 	lds	r25, 0x106F	; 0x80106f <SROM+0x1>
_ZN12EEPROM_CAT2512startCommandEhm.constprop.105():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:198
  _spi->transfer(command);

  if (command == EEPROM_CAT25_COMMAND_READ || command == EEPROM_CAT25_COMMAND_WRITE) {
    sendAddressBytes(address);
  }
}
    3cb4:	cf 91       	pop	r28
sendAddressBytes():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:210

  if ((_capacity > 0x100) && (_device != CAT25040)) {
    _spi->transfer((uint8_t)((address >> 8) & 0xFF));
  }

  _spi->transfer((uint8_t)(address & 0xFF));
    3cb6:	0c 94 4e 1d 	jmp	0x3a9c	; 0x3a9c <SoftSPIB::transfer(unsigned char)>
_ZN12EEPROM_CAT2512startCommandEhm.constprop.105():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:198
  _spi->transfer(command);

  if (command == EEPROM_CAT25_COMMAND_READ || command == EEPROM_CAT25_COMMAND_WRITE) {
    sendAddressBytes(address);
  }
}
    3cba:	cf 91       	pop	r28
    3cbc:	08 95       	ret

00003cbe <EEPROM_CAT25::getStatusRegister() [clone .constprop.104]>:
_ZN12EEPROM_CAT2517getStatusRegisterEv.constprop.104():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:42
void EEPROM_CAT25::end(void)
{
  pinMode(_chipSelect, INPUT);
}

uint8_t EEPROM_CAT25::getStatusRegister(void)
    3cbe:	cf 93       	push	r28
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:44
{
  startCommand(EEPROM_CAT25_COMMAND_RDSR, 0);
    3cc0:	85 e0       	ldi	r24, 0x05	; 5
    3cc2:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.105]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:45
  uint8_t ret = _spi->transfer(EEPROM_CAT25_DUMMY_BYTE);
    3cc6:	6f ef       	ldi	r22, 0xFF	; 255
    3cc8:	80 91 6e 10 	lds	r24, 0x106E	; 0x80106e <SROM>
    3ccc:	90 91 6f 10 	lds	r25, 0x106F	; 0x80106f <SROM+0x1>
    3cd0:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <SoftSPIB::transfer(unsigned char)>
    3cd4:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:46
  endCommand();
    3cd6:	0e 94 68 11 	call	0x22d0	; 0x22d0 <EEPROM_CAT25::endCommand() [clone .constprop.107]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:48
  return(ret);
}
    3cda:	8c 2f       	mov	r24, r28
    3cdc:	cf 91       	pop	r28
    3cde:	08 95       	ret

00003ce0 <SRAM_23LC::sendAddressBytes(unsigned long) [clone .constprop.96]>:
_ZN9SRAM_23LC16sendAddressBytesEm.constprop.96():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:135
  }
}

void SRAM_23LC::sendAddressBytes(const uint32_t address)
{
  if (_capacity > 0x10000) {
    3ce0:	80 91 81 10 	lds	r24, 0x1081	; 0x801081 <SRAM+0x4>
    3ce4:	90 91 82 10 	lds	r25, 0x1082	; 0x801082 <SRAM+0x5>
    3ce8:	a0 91 83 10 	lds	r26, 0x1083	; 0x801083 <SRAM+0x6>
    3cec:	b0 91 84 10 	lds	r27, 0x1084	; 0x801084 <SRAM+0x7>
    3cf0:	01 97       	sbiw	r24, 0x01	; 1
    3cf2:	a1 40       	sbci	r26, 0x01	; 1
    3cf4:	b1 05       	cpc	r27, r1
    3cf6:	38 f0       	brcs	.+14     	; 0x3d06 <SRAM_23LC::sendAddressBytes(unsigned long) [clone .constprop.96]+0x26>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:136
    _spi->transfer((uint8_t)((address >> 16) & 0xFF));
    3cf8:	60 e0       	ldi	r22, 0x00	; 0
    3cfa:	80 91 7d 10 	lds	r24, 0x107D	; 0x80107d <SRAM>
    3cfe:	90 91 7e 10 	lds	r25, 0x107E	; 0x80107e <SRAM+0x1>
    3d02:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:138
  }
  _spi->transfer((uint8_t)((address >> 8) & 0xFF));
    3d06:	60 e0       	ldi	r22, 0x00	; 0
    3d08:	80 91 7d 10 	lds	r24, 0x107D	; 0x80107d <SRAM>
    3d0c:	90 91 7e 10 	lds	r25, 0x107E	; 0x80107e <SRAM+0x1>
    3d10:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:139
  _spi->transfer((uint8_t)(address & 0xFF));
    3d14:	60 e0       	ldi	r22, 0x00	; 0
    3d16:	80 91 7d 10 	lds	r24, 0x107D	; 0x80107d <SRAM>
    3d1a:	90 91 7e 10 	lds	r25, 0x107E	; 0x80107e <SRAM+0x1>
    3d1e:	0c 94 4e 1d 	jmp	0x3a9c	; 0x3a9c <SoftSPIB::transfer(unsigned char)>

00003d22 <SoftSPIB::begin()>:
_ZN8SoftSPIB5beginEv():
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:15
    _ckp = 0;
    _order = MSBFIRST;
    digitalWrite(_sck, _ckp ? HIGH : LOW);
}

void SoftSPIB::begin() {
    3d22:	cf 93       	push	r28
    3d24:	df 93       	push	r29
    3d26:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:16
    pinMode(_mosi, OUTPUT);
    3d28:	61 e0       	ldi	r22, 0x01	; 1
    3d2a:	8c 81       	ldd	r24, Y+4	; 0x04
    3d2c:	0e 94 9f 11 	call	0x233e	; 0x233e <pinMode>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:17
    pinMode(_miso, INPUT);
    3d30:	60 e0       	ldi	r22, 0x00	; 0
    3d32:	8b 81       	ldd	r24, Y+3	; 0x03
    3d34:	0e 94 9f 11 	call	0x233e	; 0x233e <pinMode>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:18
    pinMode(_sck, OUTPUT);
    3d38:	61 e0       	ldi	r22, 0x01	; 1
    3d3a:	8d 81       	ldd	r24, Y+5	; 0x05
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:19
}
    3d3c:	df 91       	pop	r29
    3d3e:	cf 91       	pop	r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:18
}

void SoftSPIB::begin() {
    pinMode(_mosi, OUTPUT);
    pinMode(_miso, INPUT);
    pinMode(_sck, OUTPUT);
    3d40:	0c 94 9f 11 	jmp	0x233e	; 0x233e <pinMode>

00003d44 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>:
_ZN11LCDWIKI_KBV9Fill_RectEiiiij():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:623
	CS_IDLE;
}

//fill area from x to x+w,y to y+h
void LCDWIKI_KBV::Fill_Rect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
    3d44:	4f 92       	push	r4
    3d46:	5f 92       	push	r5
    3d48:	6f 92       	push	r6
    3d4a:	7f 92       	push	r7
    3d4c:	8f 92       	push	r8
    3d4e:	9f 92       	push	r9
    3d50:	af 92       	push	r10
    3d52:	bf 92       	push	r11
    3d54:	cf 92       	push	r12
    3d56:	df 92       	push	r13
    3d58:	ef 92       	push	r14
    3d5a:	ff 92       	push	r15
    3d5c:	0f 93       	push	r16
    3d5e:	1f 93       	push	r17
    3d60:	cf 93       	push	r28
    3d62:	df 93       	push	r29
    3d64:	ec 01       	movw	r28, r24
    3d66:	5a 01       	movw	r10, r20
    3d68:	27 01       	movw	r4, r14
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:625
	int16_t end;
	if (w < 0) 
    3d6a:	37 ff       	sbrs	r19, 7
    3d6c:	05 c0       	rjmp	.+10     	; 0x3d78 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x34>
    3d6e:	62 0f       	add	r22, r18
    3d70:	73 1f       	adc	r23, r19
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:627
	{
        w = -w;
    3d72:	31 95       	neg	r19
    3d74:	21 95       	neg	r18
    3d76:	31 09       	sbc	r19, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:630
        x -= w;
    }                           //+ve w
    end = x + w;
    3d78:	7b 01       	movw	r14, r22
    3d7a:	e2 0e       	add	r14, r18
    3d7c:	f3 1e       	adc	r15, r19
    3d7e:	6b 01       	movw	r12, r22
    3d80:	77 ff       	sbrs	r23, 7
    3d82:	02 c0       	rjmp	.+4      	; 0x3d88 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x44>
    3d84:	d1 2c       	mov	r13, r1
    3d86:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:635
    if (x < 0)
    {
        x = 0;
    }
    if (end > Get_Width())
    3d88:	e8 81       	ld	r30, Y
    3d8a:	f9 81       	ldd	r31, Y+1	; 0x01
    3d8c:	06 84       	ldd	r0, Z+14	; 0x0e
    3d8e:	f7 85       	ldd	r31, Z+15	; 0x0f
    3d90:	e0 2d       	mov	r30, r0
    3d92:	ce 01       	movw	r24, r28
    3d94:	19 95       	eicall
    3d96:	8e 15       	cp	r24, r14
    3d98:	9f 05       	cpc	r25, r15
    3d9a:	44 f4       	brge	.+16     	; 0x3dac <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x68>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:637
    {
        end = Get_Width();
    3d9c:	e8 81       	ld	r30, Y
    3d9e:	f9 81       	ldd	r31, Y+1	; 0x01
    3da0:	06 84       	ldd	r0, Z+14	; 0x0e
    3da2:	f7 85       	ldd	r31, Z+15	; 0x0f
    3da4:	e0 2d       	mov	r30, r0
    3da6:	ce 01       	movw	r24, r28
    3da8:	19 95       	eicall
    3daa:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:639
    }
    w = end - x;
    3dac:	47 01       	movw	r8, r14
    3dae:	8c 18       	sub	r8, r12
    3db0:	9d 08       	sbc	r9, r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:640
    if (h < 0) 
    3db2:	17 ff       	sbrs	r17, 7
    3db4:	05 c0       	rjmp	.+10     	; 0x3dc0 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x7c>
    3db6:	a0 0e       	add	r10, r16
    3db8:	b1 1e       	adc	r11, r17
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:642
	{
        h = -h;
    3dba:	11 95       	neg	r17
    3dbc:	01 95       	neg	r16
    3dbe:	11 09       	sbc	r17, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:645
        y -= h;
    }                           //+ve h
    end = y + h;
    3dc0:	0a 0d       	add	r16, r10
    3dc2:	1b 1d       	adc	r17, r11
    3dc4:	b7 fe       	sbrs	r11, 7
    3dc6:	02 c0       	rjmp	.+4      	; 0x3dcc <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x88>
    3dc8:	b1 2c       	mov	r11, r1
    3dca:	a1 2c       	mov	r10, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:650
    if (y < 0)
    {
        y = 0;
    }
    if (end > Get_Height())
    3dcc:	e8 81       	ld	r30, Y
    3dce:	f9 81       	ldd	r31, Y+1	; 0x01
    3dd0:	04 84       	ldd	r0, Z+12	; 0x0c
    3dd2:	f5 85       	ldd	r31, Z+13	; 0x0d
    3dd4:	e0 2d       	mov	r30, r0
    3dd6:	ce 01       	movw	r24, r28
    3dd8:	19 95       	eicall
    3dda:	80 17       	cp	r24, r16
    3ddc:	91 07       	cpc	r25, r17
    3dde:	44 f4       	brge	.+16     	; 0x3df0 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0xac>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:652
    {
        end = Get_Height();
    3de0:	e8 81       	ld	r30, Y
    3de2:	f9 81       	ldd	r31, Y+1	; 0x01
    3de4:	04 84       	ldd	r0, Z+12	; 0x0c
    3de6:	f5 85       	ldd	r31, Z+13	; 0x0d
    3de8:	e0 2d       	mov	r30, r0
    3dea:	ce 01       	movw	r24, r28
    3dec:	19 95       	eicall
    3dee:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:654
    }
    h = end - y;
    3df0:	38 01       	movw	r6, r16
    3df2:	6a 18       	sub	r6, r10
    3df4:	7b 08       	sbc	r7, r11
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:655
    Set_Addr_Window(x, y, x + w - 1, y + h - 1);//set area
    3df6:	01 50       	subi	r16, 0x01	; 1
    3df8:	11 09       	sbc	r17, r1
    3dfa:	97 01       	movw	r18, r14
    3dfc:	21 50       	subi	r18, 0x01	; 1
    3dfe:	31 09       	sbc	r19, r1
    3e00:	e8 81       	ld	r30, Y
    3e02:	f9 81       	ldd	r31, Y+1	; 0x01
    3e04:	06 80       	ldd	r0, Z+6	; 0x06
    3e06:	f7 81       	ldd	r31, Z+7	; 0x07
    3e08:	e0 2d       	mov	r30, r0
    3e0a:	a5 01       	movw	r20, r10
    3e0c:	b6 01       	movw	r22, r12
    3e0e:	ce 01       	movw	r24, r28
    3e10:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:656
	CS_ACTIVE;
    3e12:	ee a5       	ldd	r30, Y+46	; 0x2e
    3e14:	ff a5       	ldd	r31, Y+47	; 0x2f
    3e16:	80 81       	ld	r24, Z
    3e18:	9a ad       	ldd	r25, Y+58	; 0x3a
    3e1a:	89 23       	and	r24, r25
    3e1c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:657
    if(lcd_driver == ID_932X)
    3e1e:	88 8d       	ldd	r24, Y+24	; 0x18
    3e20:	99 8d       	ldd	r25, Y+25	; 0x19
    3e22:	89 2b       	or	r24, r25
    3e24:	c9 f4       	brne	.+50     	; 0x3e58 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x114>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:659
	{
		writeCmd8(ILI932X_START_OSC);
    3e26:	e8 a9       	ldd	r30, Y+48	; 0x30
    3e28:	f9 a9       	ldd	r31, Y+49	; 0x31
    3e2a:	80 81       	ld	r24, Z
    3e2c:	9b ad       	ldd	r25, Y+59	; 0x3b
    3e2e:	89 23       	and	r24, r25
    3e30:	80 83       	st	Z, r24
    3e32:	12 b8       	out	0x02, r1	; 2
    3e34:	ea a9       	ldd	r30, Y+50	; 0x32
    3e36:	fb a9       	ldd	r31, Y+51	; 0x33
    3e38:	80 81       	ld	r24, Z
    3e3a:	9c ad       	ldd	r25, Y+60	; 0x3c
    3e3c:	89 23       	and	r24, r25
    3e3e:	80 83       	st	Z, r24
    3e40:	ea a9       	ldd	r30, Y+50	; 0x32
    3e42:	fb a9       	ldd	r31, Y+51	; 0x33
    3e44:	80 81       	ld	r24, Z
    3e46:	98 ad       	ldd	r25, Y+56	; 0x38
    3e48:	89 2b       	or	r24, r25
    3e4a:	80 83       	st	Z, r24
    3e4c:	e8 a9       	ldd	r30, Y+48	; 0x30
    3e4e:	f9 a9       	ldd	r31, Y+49	; 0x31
    3e50:	80 81       	ld	r24, Z
    3e52:	9f a9       	ldd	r25, Y+55	; 0x37
    3e54:	89 2b       	or	r24, r25
    3e56:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:662
			
	}
	writeCmd8(CC);	
    3e58:	e8 a9       	ldd	r30, Y+48	; 0x30
    3e5a:	f9 a9       	ldd	r31, Y+49	; 0x31
    3e5c:	80 81       	ld	r24, Z
    3e5e:	9b ad       	ldd	r25, Y+59	; 0x3b
    3e60:	89 23       	and	r24, r25
    3e62:	80 83       	st	Z, r24
    3e64:	88 a1       	ldd	r24, Y+32	; 0x20
    3e66:	82 b9       	out	0x02, r24	; 2
    3e68:	ea a9       	ldd	r30, Y+50	; 0x32
    3e6a:	fb a9       	ldd	r31, Y+51	; 0x33
    3e6c:	80 81       	ld	r24, Z
    3e6e:	9c ad       	ldd	r25, Y+60	; 0x3c
    3e70:	89 23       	and	r24, r25
    3e72:	80 83       	st	Z, r24
    3e74:	ea a9       	ldd	r30, Y+50	; 0x32
    3e76:	fb a9       	ldd	r31, Y+51	; 0x33
    3e78:	80 81       	ld	r24, Z
    3e7a:	98 ad       	ldd	r25, Y+56	; 0x38
    3e7c:	89 2b       	or	r24, r25
    3e7e:	80 83       	st	Z, r24
    3e80:	e8 a9       	ldd	r30, Y+48	; 0x30
    3e82:	f9 a9       	ldd	r31, Y+49	; 0x31
    3e84:	80 81       	ld	r24, Z
    3e86:	9f a9       	ldd	r25, Y+55	; 0x37
    3e88:	89 2b       	or	r24, r25
    3e8a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:663
	if (h > w) 
    3e8c:	86 14       	cp	r8, r6
    3e8e:	97 04       	cpc	r9, r7
    3e90:	2c f0       	brlt	.+10     	; 0x3e9c <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x158>
    3e92:	96 2d       	mov	r25, r6
    3e94:	87 2d       	mov	r24, r7
    3e96:	34 01       	movw	r6, r8
    3e98:	89 2e       	mov	r8, r25
    3e9a:	98 2e       	mov	r9, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:669
	{
        end = h;
        h = w;
        w = end;
    }
	while (h-- > 0) 
    3e9c:	18 14       	cp	r1, r8
    3e9e:	19 04       	cpc	r1, r9
    3ea0:	0c f5       	brge	.+66     	; 0x3ee4 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1a0>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:671
	{
		end = w;
    3ea2:	c3 01       	movw	r24, r6
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:674
		do 
		{
   			writeData16(color);//set color data
    3ea4:	52 b8       	out	0x02, r5	; 2
    3ea6:	ea a9       	ldd	r30, Y+50	; 0x32
    3ea8:	fb a9       	ldd	r31, Y+51	; 0x33
    3eaa:	20 81       	ld	r18, Z
    3eac:	3c ad       	ldd	r19, Y+60	; 0x3c
    3eae:	23 23       	and	r18, r19
    3eb0:	20 83       	st	Z, r18
    3eb2:	ea a9       	ldd	r30, Y+50	; 0x32
    3eb4:	fb a9       	ldd	r31, Y+51	; 0x33
    3eb6:	20 81       	ld	r18, Z
    3eb8:	38 ad       	ldd	r19, Y+56	; 0x38
    3eba:	23 2b       	or	r18, r19
    3ebc:	20 83       	st	Z, r18
    3ebe:	42 b8       	out	0x02, r4	; 2
    3ec0:	ea a9       	ldd	r30, Y+50	; 0x32
    3ec2:	fb a9       	ldd	r31, Y+51	; 0x33
    3ec4:	20 81       	ld	r18, Z
    3ec6:	3c ad       	ldd	r19, Y+60	; 0x3c
    3ec8:	23 23       	and	r18, r19
    3eca:	20 83       	st	Z, r18
    3ecc:	ea a9       	ldd	r30, Y+50	; 0x32
    3ece:	fb a9       	ldd	r31, Y+51	; 0x33
    3ed0:	20 81       	ld	r18, Z
    3ed2:	38 ad       	ldd	r19, Y+56	; 0x38
    3ed4:	23 2b       	or	r18, r19
    3ed6:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:675
        } while (--end != 0);
    3ed8:	01 97       	sbiw	r24, 0x01	; 1
    3eda:	21 f7       	brne	.-56     	; 0x3ea4 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x160>
    3edc:	81 e0       	ldi	r24, 0x01	; 1
    3ede:	88 1a       	sub	r8, r24
    3ee0:	91 08       	sbc	r9, r1
    3ee2:	dc cf       	rjmp	.-72     	; 0x3e9c <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x158>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:677
	}
	if(lcd_driver == ID_932X)
    3ee4:	88 8d       	ldd	r24, Y+24	; 0x18
    3ee6:	99 8d       	ldd	r25, Y+25	; 0x19
    3ee8:	00 97       	sbiw	r24, 0x00	; 0
    3eea:	51 f5       	brne	.+84     	; 0x3f40 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1fc>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:679
	{
		Set_Addr_Window(0, 0, width - 1, height - 1);
    3eec:	0c 89       	ldd	r16, Y+20	; 0x14
    3eee:	1d 89       	ldd	r17, Y+21	; 0x15
    3ef0:	01 50       	subi	r16, 0x01	; 1
    3ef2:	11 09       	sbc	r17, r1
    3ef4:	2a 89       	ldd	r18, Y+18	; 0x12
    3ef6:	3b 89       	ldd	r19, Y+19	; 0x13
    3ef8:	21 50       	subi	r18, 0x01	; 1
    3efa:	31 09       	sbc	r19, r1
    3efc:	e8 81       	ld	r30, Y
    3efe:	f9 81       	ldd	r31, Y+1	; 0x01
    3f00:	06 80       	ldd	r0, Z+6	; 0x06
    3f02:	f7 81       	ldd	r31, Z+7	; 0x07
    3f04:	e0 2d       	mov	r30, r0
    3f06:	50 e0       	ldi	r21, 0x00	; 0
    3f08:	40 e0       	ldi	r20, 0x00	; 0
    3f0a:	70 e0       	ldi	r23, 0x00	; 0
    3f0c:	60 e0       	ldi	r22, 0x00	; 0
    3f0e:	ce 01       	movw	r24, r28
    3f10:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:685
	}
	else if(lcd_driver == ID_7575)
	{
		Set_LR();
	}
	CS_IDLE;
    3f12:	ee a5       	ldd	r30, Y+46	; 0x2e
    3f14:	ff a5       	ldd	r31, Y+47	; 0x2f
    3f16:	80 81       	ld	r24, Z
    3f18:	9e a9       	ldd	r25, Y+54	; 0x36
    3f1a:	89 2b       	or	r24, r25
    3f1c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:686
}
    3f1e:	df 91       	pop	r29
    3f20:	cf 91       	pop	r28
    3f22:	1f 91       	pop	r17
    3f24:	0f 91       	pop	r16
    3f26:	ff 90       	pop	r15
    3f28:	ef 90       	pop	r14
    3f2a:	df 90       	pop	r13
    3f2c:	cf 90       	pop	r12
    3f2e:	bf 90       	pop	r11
    3f30:	af 90       	pop	r10
    3f32:	9f 90       	pop	r9
    3f34:	8f 90       	pop	r8
    3f36:	7f 90       	pop	r7
    3f38:	6f 90       	pop	r6
    3f3a:	5f 90       	pop	r5
    3f3c:	4f 90       	pop	r4
    3f3e:	08 95       	ret
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:681
	}
	if(lcd_driver == ID_932X)
	{
		Set_Addr_Window(0, 0, width - 1, height - 1);
	}
	else if(lcd_driver == ID_7575)
    3f40:	01 97       	sbiw	r24, 0x01	; 1
    3f42:	39 f7       	brne	.-50     	; 0x3f12 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1ce>
    3f44:	ee a5       	ldd	r30, Y+46	; 0x2e
    3f46:	ff a5       	ldd	r31, Y+47	; 0x2f
Set_LR():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:408
// to save a few register writes on each pixel drawn, the lower-right
// corner of the address window is reset after most fill operations, so
// that drawPixel only needs to change the upper left each time.
void LCDWIKI_KBV::Set_LR(void)
{
	CS_ACTIVE;
    3f48:	80 81       	ld	r24, Z
    3f4a:	9a ad       	ldd	r25, Y+58	; 0x3a
    3f4c:	89 23       	and	r24, r25
    3f4e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:409
	writeCmdData8(HX8347G_COLADDREND_HI,(width -1)>>8);
    3f50:	e8 a9       	ldd	r30, Y+48	; 0x30
    3f52:	f9 a9       	ldd	r31, Y+49	; 0x31
    3f54:	80 81       	ld	r24, Z
    3f56:	9b ad       	ldd	r25, Y+59	; 0x3b
    3f58:	89 23       	and	r24, r25
    3f5a:	80 83       	st	Z, r24
    3f5c:	84 e0       	ldi	r24, 0x04	; 4
    3f5e:	82 b9       	out	0x02, r24	; 2
    3f60:	ea a9       	ldd	r30, Y+50	; 0x32
    3f62:	fb a9       	ldd	r31, Y+51	; 0x33
    3f64:	80 81       	ld	r24, Z
    3f66:	9c ad       	ldd	r25, Y+60	; 0x3c
    3f68:	89 23       	and	r24, r25
    3f6a:	80 83       	st	Z, r24
    3f6c:	ea a9       	ldd	r30, Y+50	; 0x32
    3f6e:	fb a9       	ldd	r31, Y+51	; 0x33
    3f70:	80 81       	ld	r24, Z
    3f72:	98 ad       	ldd	r25, Y+56	; 0x38
    3f74:	89 2b       	or	r24, r25
    3f76:	80 83       	st	Z, r24
    3f78:	e8 a9       	ldd	r30, Y+48	; 0x30
    3f7a:	f9 a9       	ldd	r31, Y+49	; 0x31
    3f7c:	80 81       	ld	r24, Z
    3f7e:	9f a9       	ldd	r25, Y+55	; 0x37
    3f80:	89 2b       	or	r24, r25
    3f82:	80 83       	st	Z, r24
    3f84:	8a 89       	ldd	r24, Y+18	; 0x12
    3f86:	9b 89       	ldd	r25, Y+19	; 0x13
    3f88:	01 97       	sbiw	r24, 0x01	; 1
    3f8a:	92 b9       	out	0x02, r25	; 2
    3f8c:	ea a9       	ldd	r30, Y+50	; 0x32
    3f8e:	fb a9       	ldd	r31, Y+51	; 0x33
    3f90:	80 81       	ld	r24, Z
    3f92:	9c ad       	ldd	r25, Y+60	; 0x3c
    3f94:	89 23       	and	r24, r25
    3f96:	80 83       	st	Z, r24
    3f98:	ea a9       	ldd	r30, Y+50	; 0x32
    3f9a:	fb a9       	ldd	r31, Y+51	; 0x33
    3f9c:	80 81       	ld	r24, Z
    3f9e:	98 ad       	ldd	r25, Y+56	; 0x38
    3fa0:	89 2b       	or	r24, r25
    3fa2:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:410
	writeCmdData8(HX8347G_COLADDREND_LO,width -1);
    3fa4:	e8 a9       	ldd	r30, Y+48	; 0x30
    3fa6:	f9 a9       	ldd	r31, Y+49	; 0x31
    3fa8:	80 81       	ld	r24, Z
    3faa:	9b ad       	ldd	r25, Y+59	; 0x3b
    3fac:	89 23       	and	r24, r25
    3fae:	80 83       	st	Z, r24
    3fb0:	85 e0       	ldi	r24, 0x05	; 5
    3fb2:	82 b9       	out	0x02, r24	; 2
    3fb4:	ea a9       	ldd	r30, Y+50	; 0x32
    3fb6:	fb a9       	ldd	r31, Y+51	; 0x33
    3fb8:	80 81       	ld	r24, Z
    3fba:	9c ad       	ldd	r25, Y+60	; 0x3c
    3fbc:	89 23       	and	r24, r25
    3fbe:	80 83       	st	Z, r24
    3fc0:	ea a9       	ldd	r30, Y+50	; 0x32
    3fc2:	fb a9       	ldd	r31, Y+51	; 0x33
    3fc4:	80 81       	ld	r24, Z
    3fc6:	98 ad       	ldd	r25, Y+56	; 0x38
    3fc8:	89 2b       	or	r24, r25
    3fca:	80 83       	st	Z, r24
    3fcc:	e8 a9       	ldd	r30, Y+48	; 0x30
    3fce:	f9 a9       	ldd	r31, Y+49	; 0x31
    3fd0:	80 81       	ld	r24, Z
    3fd2:	9f a9       	ldd	r25, Y+55	; 0x37
    3fd4:	89 2b       	or	r24, r25
    3fd6:	80 83       	st	Z, r24
    3fd8:	8a 89       	ldd	r24, Y+18	; 0x12
    3fda:	81 50       	subi	r24, 0x01	; 1
    3fdc:	82 b9       	out	0x02, r24	; 2
    3fde:	ea a9       	ldd	r30, Y+50	; 0x32
    3fe0:	fb a9       	ldd	r31, Y+51	; 0x33
    3fe2:	80 81       	ld	r24, Z
    3fe4:	9c ad       	ldd	r25, Y+60	; 0x3c
    3fe6:	89 23       	and	r24, r25
    3fe8:	80 83       	st	Z, r24
    3fea:	ea a9       	ldd	r30, Y+50	; 0x32
    3fec:	fb a9       	ldd	r31, Y+51	; 0x33
    3fee:	80 81       	ld	r24, Z
    3ff0:	98 ad       	ldd	r25, Y+56	; 0x38
    3ff2:	89 2b       	or	r24, r25
    3ff4:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:411
	writeCmdData8(HX8347G_ROWADDREND_HI,(height -1)>>8);
    3ff6:	e8 a9       	ldd	r30, Y+48	; 0x30
    3ff8:	f9 a9       	ldd	r31, Y+49	; 0x31
    3ffa:	80 81       	ld	r24, Z
    3ffc:	9b ad       	ldd	r25, Y+59	; 0x3b
    3ffe:	89 23       	and	r24, r25
    4000:	80 83       	st	Z, r24
    4002:	88 e0       	ldi	r24, 0x08	; 8
    4004:	82 b9       	out	0x02, r24	; 2
    4006:	ea a9       	ldd	r30, Y+50	; 0x32
    4008:	fb a9       	ldd	r31, Y+51	; 0x33
    400a:	80 81       	ld	r24, Z
    400c:	9c ad       	ldd	r25, Y+60	; 0x3c
    400e:	89 23       	and	r24, r25
    4010:	80 83       	st	Z, r24
    4012:	ea a9       	ldd	r30, Y+50	; 0x32
    4014:	fb a9       	ldd	r31, Y+51	; 0x33
    4016:	80 81       	ld	r24, Z
    4018:	98 ad       	ldd	r25, Y+56	; 0x38
    401a:	89 2b       	or	r24, r25
    401c:	80 83       	st	Z, r24
    401e:	e8 a9       	ldd	r30, Y+48	; 0x30
    4020:	f9 a9       	ldd	r31, Y+49	; 0x31
    4022:	80 81       	ld	r24, Z
    4024:	9f a9       	ldd	r25, Y+55	; 0x37
    4026:	89 2b       	or	r24, r25
    4028:	80 83       	st	Z, r24
    402a:	8c 89       	ldd	r24, Y+20	; 0x14
    402c:	9d 89       	ldd	r25, Y+21	; 0x15
    402e:	01 97       	sbiw	r24, 0x01	; 1
    4030:	92 b9       	out	0x02, r25	; 2
    4032:	ea a9       	ldd	r30, Y+50	; 0x32
    4034:	fb a9       	ldd	r31, Y+51	; 0x33
    4036:	80 81       	ld	r24, Z
    4038:	9c ad       	ldd	r25, Y+60	; 0x3c
    403a:	89 23       	and	r24, r25
    403c:	80 83       	st	Z, r24
    403e:	ea a9       	ldd	r30, Y+50	; 0x32
    4040:	fb a9       	ldd	r31, Y+51	; 0x33
    4042:	80 81       	ld	r24, Z
    4044:	98 ad       	ldd	r25, Y+56	; 0x38
    4046:	89 2b       	or	r24, r25
    4048:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:412
	writeCmdData8(HX8347G_ROWADDREND_LO,height -1);
    404a:	e8 a9       	ldd	r30, Y+48	; 0x30
    404c:	f9 a9       	ldd	r31, Y+49	; 0x31
    404e:	80 81       	ld	r24, Z
    4050:	9b ad       	ldd	r25, Y+59	; 0x3b
    4052:	89 23       	and	r24, r25
    4054:	80 83       	st	Z, r24
    4056:	89 e0       	ldi	r24, 0x09	; 9
    4058:	82 b9       	out	0x02, r24	; 2
    405a:	ea a9       	ldd	r30, Y+50	; 0x32
    405c:	fb a9       	ldd	r31, Y+51	; 0x33
    405e:	80 81       	ld	r24, Z
    4060:	9c ad       	ldd	r25, Y+60	; 0x3c
    4062:	89 23       	and	r24, r25
    4064:	80 83       	st	Z, r24
    4066:	ea a9       	ldd	r30, Y+50	; 0x32
    4068:	fb a9       	ldd	r31, Y+51	; 0x33
    406a:	80 81       	ld	r24, Z
    406c:	98 ad       	ldd	r25, Y+56	; 0x38
    406e:	89 2b       	or	r24, r25
    4070:	80 83       	st	Z, r24
    4072:	e8 a9       	ldd	r30, Y+48	; 0x30
    4074:	f9 a9       	ldd	r31, Y+49	; 0x31
    4076:	80 81       	ld	r24, Z
    4078:	9f a9       	ldd	r25, Y+55	; 0x37
    407a:	89 2b       	or	r24, r25
    407c:	80 83       	st	Z, r24
    407e:	8c 89       	ldd	r24, Y+20	; 0x14
    4080:	81 50       	subi	r24, 0x01	; 1
    4082:	82 b9       	out	0x02, r24	; 2
    4084:	ea a9       	ldd	r30, Y+50	; 0x32
    4086:	fb a9       	ldd	r31, Y+51	; 0x33
    4088:	80 81       	ld	r24, Z
    408a:	9c ad       	ldd	r25, Y+60	; 0x3c
    408c:	89 23       	and	r24, r25
    408e:	80 83       	st	Z, r24
    4090:	ea a9       	ldd	r30, Y+50	; 0x32
    4092:	fb a9       	ldd	r31, Y+51	; 0x33
    4094:	80 81       	ld	r24, Z
    4096:	98 ad       	ldd	r25, Y+56	; 0x38
    4098:	89 2b       	or	r24, r25
    409a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:413
	CS_IDLE;
    409c:	ee a5       	ldd	r30, Y+46	; 0x2e
    409e:	ff a5       	ldd	r31, Y+47	; 0x2f
    40a0:	80 81       	ld	r24, Z
    40a2:	9e a9       	ldd	r25, Y+54	; 0x36
    40a4:	89 2b       	or	r24, r25
    40a6:	80 83       	st	Z, r24
    40a8:	34 cf       	rjmp	.-408    	; 0x3f12 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1ce>

000040aa <LCDWIKI_GUI::Fill_Screen(unsigned int) [clone .constprop.175]>:
_ZN11LCDWIKI_GUI11Fill_ScreenEj.constprop.175():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:99
{
	Fill_Rect(x, y, w, 1, draw_color);
}

//Fill the full screen with color
void LCDWIKI_GUI::Fill_Screen(uint16_t color)
    40aa:	ef 92       	push	r14
    40ac:	ff 92       	push	r15
    40ae:	0f 93       	push	r16
    40b0:	1f 93       	push	r17
Get_Height():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:743
}

//get lcd height
int16_t LCDWIKI_KBV::Get_Height(void) const
{
	return height;
    40b2:	e7 eb       	ldi	r30, 0xB7	; 183
    40b4:	f1 e1       	ldi	r31, 0x11	; 17
_ZN11LCDWIKI_GUI11Fill_ScreenEj.constprop.175():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:101
{
	Fill_Rect(0, 0, Get_Width(), Get_Height(), color);
    40b6:	04 89       	ldd	r16, Z+20	; 0x14
    40b8:	15 89       	ldd	r17, Z+21	; 0x15
    40ba:	22 89       	ldd	r18, Z+18	; 0x12
    40bc:	33 89       	ldd	r19, Z+19	; 0x13
    40be:	7c 01       	movw	r14, r24
    40c0:	50 e0       	ldi	r21, 0x00	; 0
    40c2:	40 e0       	ldi	r20, 0x00	; 0
    40c4:	70 e0       	ldi	r23, 0x00	; 0
    40c6:	60 e0       	ldi	r22, 0x00	; 0
    40c8:	cf 01       	movw	r24, r30
    40ca:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:102
}
    40ce:	1f 91       	pop	r17
    40d0:	0f 91       	pop	r16
    40d2:	ff 90       	pop	r15
    40d4:	ef 90       	pop	r14
    40d6:	08 95       	ret

000040d8 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.174]>:
_ZN11LCDWIKI_GUI15Draw_Fast_HLineEiii.constprop.174():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:93
{
	Fill_Rect(x, y, 1, h, draw_color);
}

//draw a horizontal line
void LCDWIKI_GUI::Draw_Fast_HLine(int16_t x, int16_t y, int16_t w)
    40d8:	ef 92       	push	r14
    40da:	ff 92       	push	r15
    40dc:	0f 93       	push	r16
    40de:	1f 93       	push	r17
    40e0:	9a 01       	movw	r18, r20
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:95
{
	Fill_Rect(x, y, w, 1, draw_color);
    40e2:	e0 90 c1 11 	lds	r14, 0x11C1	; 0x8011c1 <my_lcd+0xa>
    40e6:	f0 90 c2 11 	lds	r15, 0x11C2	; 0x8011c2 <my_lcd+0xb>
    40ea:	01 e0       	ldi	r16, 0x01	; 1
    40ec:	10 e0       	ldi	r17, 0x00	; 0
    40ee:	ab 01       	movw	r20, r22
    40f0:	bc 01       	movw	r22, r24
    40f2:	87 eb       	ldi	r24, 0xB7	; 183
    40f4:	91 e1       	ldi	r25, 0x11	; 17
    40f6:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:96
}
    40fa:	1f 91       	pop	r17
    40fc:	0f 91       	pop	r16
    40fe:	ff 90       	pop	r15
    4100:	ef 90       	pop	r14
    4102:	08 95       	ret

00004104 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.172]>:
_ZN11LCDWIKI_GUI14Draw_RectangleEiiii.constprop.172():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:162
    	}
  	}
}

//draw a rectangle
void LCDWIKI_GUI::Draw_Rectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
    4104:	8f 92       	push	r8
    4106:	9f 92       	push	r9
    4108:	af 92       	push	r10
    410a:	bf 92       	push	r11
    410c:	cf 92       	push	r12
    410e:	df 92       	push	r13
    4110:	ef 92       	push	r14
    4112:	ff 92       	push	r15
    4114:	0f 93       	push	r16
    4116:	1f 93       	push	r17
    4118:	cf 93       	push	r28
    411a:	df 93       	push	r29
    411c:	6c 01       	movw	r12, r24
    411e:	eb 01       	movw	r28, r22
    4120:	4a 01       	movw	r8, r20
    4122:	79 01       	movw	r14, r18
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:164
{ 
	int16_t w = x2 - x1 + 1, h = y2 - y1 + 1;
    4124:	9a 01       	movw	r18, r20
    4126:	28 1b       	sub	r18, r24
    4128:	39 0b       	sbc	r19, r25
    412a:	89 01       	movw	r16, r18
    412c:	0f 5f       	subi	r16, 0xFF	; 255
    412e:	1f 4f       	sbci	r17, 0xFF	; 255
    4130:	c7 01       	movw	r24, r14
    4132:	86 1b       	sub	r24, r22
    4134:	97 0b       	sbc	r25, r23
    4136:	5c 01       	movw	r10, r24
    4138:	4f ef       	ldi	r20, 0xFF	; 255
    413a:	a4 1a       	sub	r10, r20
    413c:	b4 0a       	sbc	r11, r20
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:165
	if (w < 0) 
    413e:	17 ff       	sbrs	r17, 7
    4140:	04 c0       	rjmp	.+8      	; 0x414a <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.172]+0x46>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:168
	{ 
		x1 = x2; 
		w = -w; 
    4142:	89 01       	movw	r16, r18
    4144:	00 95       	com	r16
    4146:	10 95       	com	r17
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:167
void LCDWIKI_GUI::Draw_Rectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
{ 
	int16_t w = x2 - x1 + 1, h = y2 - y1 + 1;
	if (w < 0) 
	{ 
		x1 = x2; 
    4148:	64 01       	movw	r12, r8
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:170
		w = -w; 
	}
	if (h < 0) 
    414a:	b7 fe       	sbrs	r11, 7
    414c:	04 c0       	rjmp	.+8      	; 0x4156 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.172]+0x52>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:173
	{ 
		y1 = y2; 
		h = -h; 
    414e:	5c 01       	movw	r10, r24
    4150:	a0 94       	com	r10
    4152:	b0 94       	com	r11
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:172
		x1 = x2; 
		w = -w; 
	}
	if (h < 0) 
	{ 
		y1 = y2; 
    4154:	e7 01       	movw	r28, r14
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:175
		h = -h; 
	}
	Draw_Fast_HLine(x1, y1, w);
    4156:	a8 01       	movw	r20, r16
    4158:	be 01       	movw	r22, r28
    415a:	c6 01       	movw	r24, r12
    415c:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.174]>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:176
  	Draw_Fast_HLine(x1, y2, w);
    4160:	a8 01       	movw	r20, r16
    4162:	b7 01       	movw	r22, r14
    4164:	c6 01       	movw	r24, r12
    4166:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.174]>
Draw_Fast_VLine():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:89
}

//draw a vertical line 
void LCDWIKI_GUI::Draw_Fast_VLine(int16_t x, int16_t y, int16_t h)
{
	Fill_Rect(x, y, 1, h, draw_color);
    416a:	e0 90 c1 11 	lds	r14, 0x11C1	; 0x8011c1 <my_lcd+0xa>
    416e:	f0 90 c2 11 	lds	r15, 0x11C2	; 0x8011c2 <my_lcd+0xb>
    4172:	85 01       	movw	r16, r10
    4174:	21 e0       	ldi	r18, 0x01	; 1
    4176:	30 e0       	ldi	r19, 0x00	; 0
    4178:	ae 01       	movw	r20, r28
    417a:	b6 01       	movw	r22, r12
    417c:	87 eb       	ldi	r24, 0xB7	; 183
    417e:	91 e1       	ldi	r25, 0x11	; 17
    4180:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
    4184:	e0 90 c1 11 	lds	r14, 0x11C1	; 0x8011c1 <my_lcd+0xa>
    4188:	f0 90 c2 11 	lds	r15, 0x11C2	; 0x8011c2 <my_lcd+0xb>
    418c:	21 e0       	ldi	r18, 0x01	; 1
    418e:	30 e0       	ldi	r19, 0x00	; 0
    4190:	ae 01       	movw	r20, r28
    4192:	b4 01       	movw	r22, r8
    4194:	87 eb       	ldi	r24, 0xB7	; 183
    4196:	91 e1       	ldi	r25, 0x11	; 17
    4198:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
_ZN11LCDWIKI_GUI14Draw_RectangleEiiii.constprop.172():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:179
	}
	Draw_Fast_HLine(x1, y1, w);
  	Draw_Fast_HLine(x1, y2, w);
	Draw_Fast_VLine(x1, y1, h);
	Draw_Fast_VLine(x2, y1, h);
}
    419c:	df 91       	pop	r29
    419e:	cf 91       	pop	r28
    41a0:	1f 91       	pop	r17
    41a2:	0f 91       	pop	r16
    41a4:	ff 90       	pop	r15
    41a6:	ef 90       	pop	r14
    41a8:	df 90       	pop	r13
    41aa:	cf 90       	pop	r12
    41ac:	bf 90       	pop	r11
    41ae:	af 90       	pop	r10
    41b0:	9f 90       	pop	r9
    41b2:	8f 90       	pop	r8
    41b4:	08 95       	ret

000041b6 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)>:
_ZN11LCDWIKI_KBV9Draw_PixeEiij():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:610
	}
}

//set x,y  coordinate and color to draw a pixel point 
void LCDWIKI_KBV::Draw_Pixe(int16_t x, int16_t y, uint16_t color)
{
    41b6:	af 92       	push	r10
    41b8:	bf 92       	push	r11
    41ba:	cf 92       	push	r12
    41bc:	df 92       	push	r13
    41be:	ef 92       	push	r14
    41c0:	ff 92       	push	r15
    41c2:	0f 93       	push	r16
    41c4:	1f 93       	push	r17
    41c6:	cf 93       	push	r28
    41c8:	df 93       	push	r29
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:611
	if((x < 0) || (y < 0) || (x > Get_Width()) || (y > Get_Height()))
    41ca:	77 fd       	sbrc	r23, 7
    41cc:	75 c0       	rjmp	.+234    	; 0x42b8 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
    41ce:	57 fd       	sbrc	r21, 7
    41d0:	73 c0       	rjmp	.+230    	; 0x42b8 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
    41d2:	c3 2e       	mov	r12, r19
    41d4:	d2 2e       	mov	r13, r18
    41d6:	5a 01       	movw	r10, r20
    41d8:	7b 01       	movw	r14, r22
    41da:	ec 01       	movw	r28, r24
    41dc:	e8 81       	ld	r30, Y
    41de:	f9 81       	ldd	r31, Y+1	; 0x01
    41e0:	06 84       	ldd	r0, Z+14	; 0x0e
    41e2:	f7 85       	ldd	r31, Z+15	; 0x0f
    41e4:	e0 2d       	mov	r30, r0
    41e6:	19 95       	eicall
    41e8:	8e 15       	cp	r24, r14
    41ea:	9f 05       	cpc	r25, r15
    41ec:	0c f4       	brge	.+2      	; 0x41f0 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x3a>
    41ee:	64 c0       	rjmp	.+200    	; 0x42b8 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
    41f0:	e8 81       	ld	r30, Y
    41f2:	f9 81       	ldd	r31, Y+1	; 0x01
    41f4:	04 84       	ldd	r0, Z+12	; 0x0c
    41f6:	f5 85       	ldd	r31, Z+13	; 0x0d
    41f8:	e0 2d       	mov	r30, r0
    41fa:	ce 01       	movw	r24, r28
    41fc:	19 95       	eicall
    41fe:	8a 15       	cp	r24, r10
    4200:	9b 05       	cpc	r25, r11
    4202:	0c f4       	brge	.+2      	; 0x4206 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x50>
    4204:	59 c0       	rjmp	.+178    	; 0x42b8 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:615
	{
		return;
	}
	Set_Addr_Window(x, y, x, y);
    4206:	e8 81       	ld	r30, Y
    4208:	f9 81       	ldd	r31, Y+1	; 0x01
    420a:	06 80       	ldd	r0, Z+6	; 0x06
    420c:	f7 81       	ldd	r31, Z+7	; 0x07
    420e:	e0 2d       	mov	r30, r0
    4210:	85 01       	movw	r16, r10
    4212:	97 01       	movw	r18, r14
    4214:	a5 01       	movw	r20, r10
    4216:	b7 01       	movw	r22, r14
    4218:	ce 01       	movw	r24, r28
    421a:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:616
	CS_ACTIVE;
    421c:	ee a5       	ldd	r30, Y+46	; 0x2e
    421e:	ff a5       	ldd	r31, Y+47	; 0x2f
    4220:	80 81       	ld	r24, Z
    4222:	9a ad       	ldd	r25, Y+58	; 0x3a
    4224:	89 23       	and	r24, r25
    4226:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:617
	writeCmdData16(CC, color);
    4228:	98 a1       	ldd	r25, Y+32	; 0x20
    422a:	29 a1       	ldd	r18, Y+33	; 0x21
    422c:	e8 a9       	ldd	r30, Y+48	; 0x30
    422e:	f9 a9       	ldd	r31, Y+49	; 0x31
    4230:	80 81       	ld	r24, Z
    4232:	3b ad       	ldd	r19, Y+59	; 0x3b
    4234:	83 23       	and	r24, r19
    4236:	80 83       	st	Z, r24
    4238:	22 b9       	out	0x02, r18	; 2
    423a:	ea a9       	ldd	r30, Y+50	; 0x32
    423c:	fb a9       	ldd	r31, Y+51	; 0x33
    423e:	80 81       	ld	r24, Z
    4240:	2c ad       	ldd	r18, Y+60	; 0x3c
    4242:	82 23       	and	r24, r18
    4244:	80 83       	st	Z, r24
    4246:	ea a9       	ldd	r30, Y+50	; 0x32
    4248:	fb a9       	ldd	r31, Y+51	; 0x33
    424a:	80 81       	ld	r24, Z
    424c:	28 ad       	ldd	r18, Y+56	; 0x38
    424e:	82 2b       	or	r24, r18
    4250:	80 83       	st	Z, r24
    4252:	92 b9       	out	0x02, r25	; 2
    4254:	ea a9       	ldd	r30, Y+50	; 0x32
    4256:	fb a9       	ldd	r31, Y+51	; 0x33
    4258:	80 81       	ld	r24, Z
    425a:	9c ad       	ldd	r25, Y+60	; 0x3c
    425c:	89 23       	and	r24, r25
    425e:	80 83       	st	Z, r24
    4260:	ea a9       	ldd	r30, Y+50	; 0x32
    4262:	fb a9       	ldd	r31, Y+51	; 0x33
    4264:	80 81       	ld	r24, Z
    4266:	98 ad       	ldd	r25, Y+56	; 0x38
    4268:	89 2b       	or	r24, r25
    426a:	80 83       	st	Z, r24
    426c:	e8 a9       	ldd	r30, Y+48	; 0x30
    426e:	f9 a9       	ldd	r31, Y+49	; 0x31
    4270:	80 81       	ld	r24, Z
    4272:	9f a9       	ldd	r25, Y+55	; 0x37
    4274:	89 2b       	or	r24, r25
    4276:	80 83       	st	Z, r24
    4278:	c2 b8       	out	0x02, r12	; 2
    427a:	ea a9       	ldd	r30, Y+50	; 0x32
    427c:	fb a9       	ldd	r31, Y+51	; 0x33
    427e:	80 81       	ld	r24, Z
    4280:	9c ad       	ldd	r25, Y+60	; 0x3c
    4282:	89 23       	and	r24, r25
    4284:	80 83       	st	Z, r24
    4286:	ea a9       	ldd	r30, Y+50	; 0x32
    4288:	fb a9       	ldd	r31, Y+51	; 0x33
    428a:	80 81       	ld	r24, Z
    428c:	98 ad       	ldd	r25, Y+56	; 0x38
    428e:	89 2b       	or	r24, r25
    4290:	80 83       	st	Z, r24
    4292:	d2 b8       	out	0x02, r13	; 2
    4294:	ea a9       	ldd	r30, Y+50	; 0x32
    4296:	fb a9       	ldd	r31, Y+51	; 0x33
    4298:	80 81       	ld	r24, Z
    429a:	9c ad       	ldd	r25, Y+60	; 0x3c
    429c:	89 23       	and	r24, r25
    429e:	80 83       	st	Z, r24
    42a0:	ea a9       	ldd	r30, Y+50	; 0x32
    42a2:	fb a9       	ldd	r31, Y+51	; 0x33
    42a4:	80 81       	ld	r24, Z
    42a6:	98 ad       	ldd	r25, Y+56	; 0x38
    42a8:	89 2b       	or	r24, r25
    42aa:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:618
	CS_IDLE;
    42ac:	ee a5       	ldd	r30, Y+46	; 0x2e
    42ae:	ff a5       	ldd	r31, Y+47	; 0x2f
    42b0:	80 81       	ld	r24, Z
    42b2:	9e a9       	ldd	r25, Y+54	; 0x36
    42b4:	89 2b       	or	r24, r25
    42b6:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:619
}
    42b8:	df 91       	pop	r29
    42ba:	cf 91       	pop	r28
    42bc:	1f 91       	pop	r17
    42be:	0f 91       	pop	r16
    42c0:	ff 90       	pop	r15
    42c2:	ef 90       	pop	r14
    42c4:	df 90       	pop	r13
    42c6:	cf 90       	pop	r12
    42c8:	bf 90       	pop	r11
    42ca:	af 90       	pop	r10
    42cc:	08 95       	ret

000042ce <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)>:
_ZN11LCDWIKI_KBV9Read_GRAMEiiPjii():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:518
    return ret;
}

//read graph RAM data
int16_t LCDWIKI_KBV::Read_GRAM(int16_t x, int16_t y, uint16_t *block, int16_t w, int16_t h)
{
    42ce:	7f 92       	push	r7
    42d0:	8f 92       	push	r8
    42d2:	9f 92       	push	r9
    42d4:	af 92       	push	r10
    42d6:	bf 92       	push	r11
    42d8:	cf 92       	push	r12
    42da:	df 92       	push	r13
    42dc:	ef 92       	push	r14
    42de:	ff 92       	push	r15
    42e0:	0f 93       	push	r16
    42e2:	1f 93       	push	r17
    42e4:	cf 93       	push	r28
    42e6:	df 93       	push	r29
    42e8:	ec 01       	movw	r28, r24
    42ea:	59 01       	movw	r10, r18
    42ec:	98 01       	movw	r18, r16
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:520
	uint16_t ret, dummy;
    int16_t n = w * h;
    42ee:	0e 9d       	mul	r16, r14
    42f0:	60 01       	movw	r12, r0
    42f2:	0f 9d       	mul	r16, r15
    42f4:	d0 0c       	add	r13, r0
    42f6:	1e 9d       	mul	r17, r14
    42f8:	d0 0c       	add	r13, r0
    42fa:	11 24       	eor	r1, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:522
    uint8_t r, g, b, tmp;
    Set_Addr_Window(x, y, x + w - 1, y + h - 1);
    42fc:	87 01       	movw	r16, r14
    42fe:	04 0f       	add	r16, r20
    4300:	15 1f       	adc	r17, r21
    4302:	01 50       	subi	r16, 0x01	; 1
    4304:	11 09       	sbc	r17, r1
    4306:	26 0f       	add	r18, r22
    4308:	37 1f       	adc	r19, r23
    430a:	21 50       	subi	r18, 0x01	; 1
    430c:	31 09       	sbc	r19, r1
    430e:	e8 81       	ld	r30, Y
    4310:	f9 81       	ldd	r31, Y+1	; 0x01
    4312:	06 80       	ldd	r0, Z+6	; 0x06
    4314:	f7 81       	ldd	r31, Z+7	; 0x07
    4316:	e0 2d       	mov	r30, r0
    4318:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:566
            	n--;
        	}
        }
//        RD_IDLE;
        CS_IDLE;
        setWriteDir();
    431a:	77 24       	eor	r7, r7
    431c:	7a 94       	dec	r7
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:523
{
	uint16_t ret, dummy;
    int16_t n = w * h;
    uint8_t r, g, b, tmp;
    Set_Addr_Window(x, y, x + w - 1, y + h - 1);
    while (n > 0) 
    431e:	1c 14       	cp	r1, r12
    4320:	1d 04       	cpc	r1, r13
    4322:	0c f0       	brlt	.+2      	; 0x4326 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x58>
    4324:	0a c1       	rjmp	.+532    	; 0x453a <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x26c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:525
	{
        CS_ACTIVE;
    4326:	ee a5       	ldd	r30, Y+46	; 0x2e
    4328:	ff a5       	ldd	r31, Y+47	; 0x2f
    432a:	80 81       	ld	r24, Z
    432c:	9a ad       	ldd	r25, Y+58	; 0x3a
    432e:	89 23       	and	r24, r25
    4330:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:526
		writeCmd16(RC);
    4332:	e8 a9       	ldd	r30, Y+48	; 0x30
    4334:	f9 a9       	ldd	r31, Y+49	; 0x31
    4336:	80 81       	ld	r24, Z
    4338:	9b ad       	ldd	r25, Y+59	; 0x3b
    433a:	89 23       	and	r24, r25
    433c:	80 83       	st	Z, r24
    433e:	9a a1       	ldd	r25, Y+34	; 0x22
    4340:	8b a1       	ldd	r24, Y+35	; 0x23
    4342:	82 b9       	out	0x02, r24	; 2
    4344:	ea a9       	ldd	r30, Y+50	; 0x32
    4346:	fb a9       	ldd	r31, Y+51	; 0x33
    4348:	80 81       	ld	r24, Z
    434a:	2c ad       	ldd	r18, Y+60	; 0x3c
    434c:	82 23       	and	r24, r18
    434e:	80 83       	st	Z, r24
    4350:	ea a9       	ldd	r30, Y+50	; 0x32
    4352:	fb a9       	ldd	r31, Y+51	; 0x33
    4354:	80 81       	ld	r24, Z
    4356:	28 ad       	ldd	r18, Y+56	; 0x38
    4358:	82 2b       	or	r24, r18
    435a:	80 83       	st	Z, r24
    435c:	92 b9       	out	0x02, r25	; 2
    435e:	ea a9       	ldd	r30, Y+50	; 0x32
    4360:	fb a9       	ldd	r31, Y+51	; 0x33
    4362:	80 81       	ld	r24, Z
    4364:	9c ad       	ldd	r25, Y+60	; 0x3c
    4366:	89 23       	and	r24, r25
    4368:	80 83       	st	Z, r24
    436a:	ea a9       	ldd	r30, Y+50	; 0x32
    436c:	fb a9       	ldd	r31, Y+51	; 0x33
    436e:	80 81       	ld	r24, Z
    4370:	98 ad       	ldd	r25, Y+56	; 0x38
    4372:	89 2b       	or	r24, r25
    4374:	80 83       	st	Z, r24
    4376:	e8 a9       	ldd	r30, Y+48	; 0x30
    4378:	f9 a9       	ldd	r31, Y+49	; 0x31
    437a:	80 81       	ld	r24, Z
    437c:	9f a9       	ldd	r25, Y+55	; 0x37
    437e:	89 2b       	or	r24, r25
    4380:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:527
        setReadDir();
    4382:	81 b1       	in	r24, 0x01	; 1
    4384:	11 b8       	out	0x01, r1	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:528
		if(lcd_driver == ID_932X)
    4386:	88 8d       	ldd	r24, Y+24	; 0x18
    4388:	99 8d       	ldd	r25, Y+25	; 0x19
    438a:	89 2b       	or	r24, r25
    438c:	09 f0       	breq	.+2      	; 0x4390 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0xc2>
    438e:	67 c0       	rjmp	.+206    	; 0x445e <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x190>
    4390:	f5 01       	movw	r30, r10
    4392:	c6 01       	movw	r24, r12
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:532
		{
			while(n)
			{
				for(int i =0; i< 2; i++)
    4394:	42 e0       	ldi	r20, 0x02	; 2
    4396:	50 e0       	ldi	r21, 0x00	; 0
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:534
				{
					read8(r);
    4398:	ac a9       	ldd	r26, Y+52	; 0x34
    439a:	bd a9       	ldd	r27, Y+53	; 0x35
    439c:	2c 91       	ld	r18, X
    439e:	3d ad       	ldd	r19, Y+61	; 0x3d
    43a0:	23 23       	and	r18, r19
    43a2:	2c 93       	st	X, r18
    43a4:	20 b1       	in	r18, 0x00	; 0
    43a6:	ac a9       	ldd	r26, Y+52	; 0x34
    43a8:	bd a9       	ldd	r27, Y+53	; 0x35
    43aa:	2c 91       	ld	r18, X
    43ac:	39 ad       	ldd	r19, Y+57	; 0x39
    43ae:	23 2b       	or	r18, r19
    43b0:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:535
					read8(r);
    43b2:	ac a9       	ldd	r26, Y+52	; 0x34
    43b4:	bd a9       	ldd	r27, Y+53	; 0x35
    43b6:	2c 91       	ld	r18, X
    43b8:	3d ad       	ldd	r19, Y+61	; 0x3d
    43ba:	23 23       	and	r18, r19
    43bc:	2c 93       	st	X, r18
    43be:	20 b1       	in	r18, 0x00	; 0
    43c0:	ac a9       	ldd	r26, Y+52	; 0x34
    43c2:	bd a9       	ldd	r27, Y+53	; 0x35
    43c4:	2c 91       	ld	r18, X
    43c6:	39 ad       	ldd	r19, Y+57	; 0x39
    43c8:	23 2b       	or	r18, r19
    43ca:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:536
					read8(r);
    43cc:	ac a9       	ldd	r26, Y+52	; 0x34
    43ce:	bd a9       	ldd	r27, Y+53	; 0x35
    43d0:	2c 91       	ld	r18, X
    43d2:	3d ad       	ldd	r19, Y+61	; 0x3d
    43d4:	23 23       	and	r18, r19
    43d6:	2c 93       	st	X, r18
    43d8:	20 b1       	in	r18, 0x00	; 0
    43da:	ac a9       	ldd	r26, Y+52	; 0x34
    43dc:	bd a9       	ldd	r27, Y+53	; 0x35
    43de:	3c 91       	ld	r19, X
    43e0:	69 ad       	ldd	r22, Y+57	; 0x39
    43e2:	36 2b       	or	r19, r22
    43e4:	3c 93       	st	X, r19
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:537
					read8(g);
    43e6:	ac a9       	ldd	r26, Y+52	; 0x34
    43e8:	bd a9       	ldd	r27, Y+53	; 0x35
    43ea:	3c 91       	ld	r19, X
    43ec:	6d ad       	ldd	r22, Y+61	; 0x3d
    43ee:	36 23       	and	r19, r22
    43f0:	3c 93       	st	X, r19
    43f2:	60 b1       	in	r22, 0x00	; 0
    43f4:	ac a9       	ldd	r26, Y+52	; 0x34
    43f6:	bd a9       	ldd	r27, Y+53	; 0x35
    43f8:	3c 91       	ld	r19, X
    43fa:	79 ad       	ldd	r23, Y+57	; 0x39
    43fc:	37 2b       	or	r19, r23
    43fe:	3c 93       	st	X, r19
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:532
        setReadDir();
		if(lcd_driver == ID_932X)
		{
			while(n)
			{
				for(int i =0; i< 2; i++)
    4400:	41 30       	cpi	r20, 0x01	; 1
    4402:	51 05       	cpc	r21, r1
    4404:	49 f5       	brne	.+82     	; 0x4458 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x18a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:539
					read8(r);
					read8(r);
					read8(r);
					read8(g);
				}
				*block++ = (r<<8 | g);
    4406:	32 2f       	mov	r19, r18
    4408:	26 2f       	mov	r18, r22
    440a:	21 93       	st	Z+, r18
    440c:	31 93       	st	Z+, r19
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:540
				n--;
    440e:	01 97       	sbiw	r24, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:530
        CS_ACTIVE;
		writeCmd16(RC);
        setReadDir();
		if(lcd_driver == ID_932X)
		{
			while(n)
    4410:	09 f0       	breq	.+2      	; 0x4414 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x146>
    4412:	c0 cf       	rjmp	.-128    	; 0x4394 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0xc6>
    4414:	cc 0c       	add	r12, r12
    4416:	dd 1c       	adc	r13, r13
    4418:	ac 0c       	add	r10, r12
    441a:	bd 1c       	adc	r11, r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:542
					read8(g);
				}
				*block++ = (r<<8 | g);
				n--;
			}
			Set_Addr_Window(0, 0, width - 1, height - 1);
    441c:	0c 89       	ldd	r16, Y+20	; 0x14
    441e:	1d 89       	ldd	r17, Y+21	; 0x15
    4420:	01 50       	subi	r16, 0x01	; 1
    4422:	11 09       	sbc	r17, r1
    4424:	2a 89       	ldd	r18, Y+18	; 0x12
    4426:	3b 89       	ldd	r19, Y+19	; 0x13
    4428:	21 50       	subi	r18, 0x01	; 1
    442a:	31 09       	sbc	r19, r1
    442c:	e8 81       	ld	r30, Y
    442e:	f9 81       	ldd	r31, Y+1	; 0x01
    4430:	06 80       	ldd	r0, Z+6	; 0x06
    4432:	f7 81       	ldd	r31, Z+7	; 0x07
    4434:	e0 2d       	mov	r30, r0
    4436:	50 e0       	ldi	r21, 0x00	; 0
    4438:	40 e0       	ldi	r20, 0x00	; 0
    443a:	70 e0       	ldi	r23, 0x00	; 0
    443c:	60 e0       	ldi	r22, 0x00	; 0
    443e:	ce 01       	movw	r24, r28
    4440:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:565
            	*block++ = ret;
            	n--;
        	}
        }
//        RD_IDLE;
        CS_IDLE;
    4442:	ee a5       	ldd	r30, Y+46	; 0x2e
    4444:	ff a5       	ldd	r31, Y+47	; 0x2f
    4446:	80 81       	ld	r24, Z
    4448:	9e a9       	ldd	r25, Y+54	; 0x36
    444a:	89 2b       	or	r24, r25
    444c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:566
        setWriteDir();
    444e:	81 b1       	in	r24, 0x01	; 1
    4450:	71 b8       	out	0x01, r7	; 1
    4452:	d1 2c       	mov	r13, r1
    4454:	c1 2c       	mov	r12, r1
    4456:	63 cf       	rjmp	.-314    	; 0x431e <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x50>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:532
        setReadDir();
		if(lcd_driver == ID_932X)
		{
			while(n)
			{
				for(int i =0; i< 2; i++)
    4458:	41 e0       	ldi	r20, 0x01	; 1
    445a:	50 e0       	ldi	r21, 0x00	; 0
    445c:	9d cf       	rjmp	.-198    	; 0x4398 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0xca>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:546
			}
			Set_Addr_Window(0, 0, width - 1, height - 1);
		}
		else 
		{
			read8(r);
    445e:	ec a9       	ldd	r30, Y+52	; 0x34
    4460:	fd a9       	ldd	r31, Y+53	; 0x35
    4462:	80 81       	ld	r24, Z
    4464:	9d ad       	ldd	r25, Y+61	; 0x3d
    4466:	89 23       	and	r24, r25
    4468:	80 83       	st	Z, r24
    446a:	80 b1       	in	r24, 0x00	; 0
    446c:	ec a9       	ldd	r30, Y+52	; 0x34
    446e:	fd a9       	ldd	r31, Y+53	; 0x35
    4470:	80 81       	ld	r24, Z
    4472:	99 ad       	ldd	r25, Y+57	; 0x39
    4474:	89 2b       	or	r24, r25
    4476:	80 83       	st	Z, r24
    4478:	75 01       	movw	r14, r10
    447a:	86 01       	movw	r16, r12
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:549
        	while (n) 
			{
				if(R24BIT == 1)
    447c:	8c a5       	ldd	r24, Y+44	; 0x2c
    447e:	9d a5       	ldd	r25, Y+45	; 0x2d
    4480:	81 30       	cpi	r24, 0x01	; 1
    4482:	91 05       	cpc	r25, r1
    4484:	d9 f5       	brne	.+118    	; 0x44fc <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x22e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:551
				{
        			read8(r);
    4486:	ec a9       	ldd	r30, Y+52	; 0x34
    4488:	fd a9       	ldd	r31, Y+53	; 0x35
    448a:	80 81       	ld	r24, Z
    448c:	9d ad       	ldd	r25, Y+61	; 0x3d
    448e:	89 23       	and	r24, r25
    4490:	80 83       	st	Z, r24
    4492:	60 b1       	in	r22, 0x00	; 0
    4494:	ec a9       	ldd	r30, Y+52	; 0x34
    4496:	fd a9       	ldd	r31, Y+53	; 0x35
    4498:	80 81       	ld	r24, Z
    449a:	99 ad       	ldd	r25, Y+57	; 0x39
    449c:	89 2b       	or	r24, r25
    449e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:552
         			read8(g);
    44a0:	ec a9       	ldd	r30, Y+52	; 0x34
    44a2:	fd a9       	ldd	r31, Y+53	; 0x35
    44a4:	80 81       	ld	r24, Z
    44a6:	9d ad       	ldd	r25, Y+61	; 0x3d
    44a8:	89 23       	and	r24, r25
    44aa:	80 83       	st	Z, r24
    44ac:	40 b1       	in	r20, 0x00	; 0
    44ae:	ec a9       	ldd	r30, Y+52	; 0x34
    44b0:	fd a9       	ldd	r31, Y+53	; 0x35
    44b2:	80 81       	ld	r24, Z
    44b4:	99 ad       	ldd	r25, Y+57	; 0x39
    44b6:	89 2b       	or	r24, r25
    44b8:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:553
        			read8(b);
    44ba:	ec a9       	ldd	r30, Y+52	; 0x34
    44bc:	fd a9       	ldd	r31, Y+53	; 0x35
    44be:	80 81       	ld	r24, Z
    44c0:	9d ad       	ldd	r25, Y+61	; 0x3d
    44c2:	89 23       	and	r24, r25
    44c4:	80 83       	st	Z, r24
    44c6:	20 b1       	in	r18, 0x00	; 0
    44c8:	ec a9       	ldd	r30, Y+52	; 0x34
    44ca:	fd a9       	ldd	r31, Y+53	; 0x35
    44cc:	80 81       	ld	r24, Z
    44ce:	99 ad       	ldd	r25, Y+57	; 0x39
    44d0:	89 2b       	or	r24, r25
    44d2:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:554
            		ret = Color_To_565(r, g, b);
    44d4:	e8 81       	ld	r30, Y
    44d6:	f9 81       	ldd	r31, Y+1	; 0x01
    44d8:	01 90       	ld	r0, Z+
    44da:	f0 81       	ld	r31, Z
    44dc:	e0 2d       	mov	r30, r0
    44de:	ce 01       	movw	r24, r28
    44e0:	19 95       	eicall
    44e2:	4c 01       	movw	r8, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:560
				}
				else if(R24BIT == 0)
				{
					read16(ret);
				}
            	*block++ = ret;
    44e4:	f7 01       	movw	r30, r14
    44e6:	81 92       	st	Z+, r8
    44e8:	91 92       	st	Z+, r9
    44ea:	7f 01       	movw	r14, r30
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:561
            	n--;
    44ec:	01 50       	subi	r16, 0x01	; 1
    44ee:	11 09       	sbc	r17, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:547
			Set_Addr_Window(0, 0, width - 1, height - 1);
		}
		else 
		{
			read8(r);
        	while (n) 
    44f0:	29 f6       	brne	.-118    	; 0x447c <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x1ae>
    44f2:	cc 0c       	add	r12, r12
    44f4:	dd 1c       	adc	r13, r13
    44f6:	ac 0c       	add	r10, r12
    44f8:	bd 1c       	adc	r11, r13
    44fa:	a3 cf       	rjmp	.-186    	; 0x4442 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x174>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:556
        			read8(r);
         			read8(g);
        			read8(b);
            		ret = Color_To_565(r, g, b);
				}
				else if(R24BIT == 0)
    44fc:	89 2b       	or	r24, r25
    44fe:	91 f7       	brne	.-28     	; 0x44e4 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x216>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:558
				{
					read16(ret);
    4500:	ec a9       	ldd	r30, Y+52	; 0x34
    4502:	fd a9       	ldd	r31, Y+53	; 0x35
    4504:	80 81       	ld	r24, Z
    4506:	9d ad       	ldd	r25, Y+61	; 0x3d
    4508:	89 23       	and	r24, r25
    450a:	80 83       	st	Z, r24
    450c:	80 b0       	in	r8, 0x00	; 0
    450e:	ec a9       	ldd	r30, Y+52	; 0x34
    4510:	fd a9       	ldd	r31, Y+53	; 0x35
    4512:	80 81       	ld	r24, Z
    4514:	99 ad       	ldd	r25, Y+57	; 0x39
    4516:	89 2b       	or	r24, r25
    4518:	80 83       	st	Z, r24
    451a:	ec a9       	ldd	r30, Y+52	; 0x34
    451c:	fd a9       	ldd	r31, Y+53	; 0x35
    451e:	80 81       	ld	r24, Z
    4520:	9d ad       	ldd	r25, Y+61	; 0x3d
    4522:	89 23       	and	r24, r25
    4524:	80 83       	st	Z, r24
    4526:	90 b1       	in	r25, 0x00	; 0
    4528:	ec a9       	ldd	r30, Y+52	; 0x34
    452a:	fd a9       	ldd	r31, Y+53	; 0x35
    452c:	80 81       	ld	r24, Z
    452e:	29 ad       	ldd	r18, Y+57	; 0x39
    4530:	82 2b       	or	r24, r18
    4532:	80 83       	st	Z, r24
    4534:	98 2c       	mov	r9, r8
    4536:	89 2e       	mov	r8, r25
    4538:	d5 cf       	rjmp	.-86     	; 0x44e4 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x216>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:569
//        RD_IDLE;
        CS_IDLE;
        setWriteDir();
    }
	return 0;
}
    453a:	90 e0       	ldi	r25, 0x00	; 0
    453c:	80 e0       	ldi	r24, 0x00	; 0
    453e:	df 91       	pop	r29
    4540:	cf 91       	pop	r28
    4542:	1f 91       	pop	r17
    4544:	0f 91       	pop	r16
    4546:	ff 90       	pop	r15
    4548:	ef 90       	pop	r14
    454a:	df 90       	pop	r13
    454c:	cf 90       	pop	r12
    454e:	bf 90       	pop	r11
    4550:	af 90       	pop	r10
    4552:	9f 90       	pop	r9
    4554:	8f 90       	pop	r8
    4556:	7f 90       	pop	r7
    4558:	08 95       	ret

0000455a <LCDWIKI_KBV::Color_To_565(unsigned char, unsigned char, unsigned char)>:
_ZN11LCDWIKI_KBV12Color_To_565Ehhh():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:487
}

//Pass 8-bit (each) R,G,B, get back 16-bit packed color
uint16_t LCDWIKI_KBV::Color_To_565(uint8_t r, uint8_t g, uint8_t b)
{
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3);
    455a:	38 e0       	ldi	r19, 0x08	; 8
    455c:	43 9f       	mul	r20, r19
    455e:	c0 01       	movw	r24, r0
    4560:	11 24       	eor	r1, r1
    4562:	80 7e       	andi	r24, 0xE0	; 224
    4564:	97 70       	andi	r25, 0x07	; 7
    4566:	26 95       	lsr	r18
    4568:	26 95       	lsr	r18
    456a:	26 95       	lsr	r18
    456c:	82 2b       	or	r24, r18
    456e:	70 e0       	ldi	r23, 0x00	; 0
    4570:	76 2f       	mov	r23, r22
    4572:	66 27       	eor	r22, r22
    4574:	66 27       	eor	r22, r22
    4576:	78 7f       	andi	r23, 0xF8	; 248
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:488
}
    4578:	86 2b       	or	r24, r22
    457a:	97 2b       	or	r25, r23
    457c:	08 95       	ret

0000457e <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)>:
_ZN11LCDWIKI_KBV14Push_Any_ColorEPjibh():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:418
	CS_IDLE;
}

//push color table for 16bits
void LCDWIKI_KBV::Push_Any_Color(uint16_t * block, int16_t n, bool first, uint8_t flags)
{
    457e:	0f 93       	push	r16
    4580:	cf 93       	push	r28
    4582:	df 93       	push	r29
    4584:	dc 01       	movw	r26, r24
    4586:	01 70       	andi	r16, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:423
	uint16_t color;
    uint8_t h, l;
	bool isconst = flags & 1;
//	bool isbigend = (flags & 2) != 0;
    CS_ACTIVE;
    4588:	9e 96       	adiw	r26, 0x2e	; 46
    458a:	ed 91       	ld	r30, X+
    458c:	fc 91       	ld	r31, X
    458e:	9f 97       	sbiw	r26, 0x2f	; 47
    4590:	80 81       	ld	r24, Z
    4592:	da 96       	adiw	r26, 0x3a	; 58
    4594:	9c 91       	ld	r25, X
    4596:	da 97       	sbiw	r26, 0x3a	; 58
    4598:	89 23       	and	r24, r25
    459a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:424
    if (first) 
    459c:	22 23       	and	r18, r18
    459e:	09 f4       	brne	.+2      	; 0x45a2 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x24>
    45a0:	5b c0       	rjmp	.+182    	; 0x4658 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xda>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:426
	{  
		if(lcd_driver == ID_932X)
    45a2:	58 96       	adiw	r26, 0x18	; 24
    45a4:	8d 91       	ld	r24, X+
    45a6:	9c 91       	ld	r25, X
    45a8:	59 97       	sbiw	r26, 0x19	; 25
    45aa:	89 2b       	or	r24, r25
    45ac:	49 f5       	brne	.+82     	; 0x4600 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x82>
    45ae:	d0 96       	adiw	r26, 0x30	; 48
    45b0:	ed 91       	ld	r30, X+
    45b2:	fc 91       	ld	r31, X
    45b4:	d1 97       	sbiw	r26, 0x31	; 49
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:428
		{
			writeCmd8(ILI932X_START_OSC);
    45b6:	80 81       	ld	r24, Z
    45b8:	db 96       	adiw	r26, 0x3b	; 59
    45ba:	9c 91       	ld	r25, X
    45bc:	db 97       	sbiw	r26, 0x3b	; 59
    45be:	89 23       	and	r24, r25
    45c0:	80 83       	st	Z, r24
    45c2:	12 b8       	out	0x02, r1	; 2
    45c4:	d2 96       	adiw	r26, 0x32	; 50
    45c6:	ed 91       	ld	r30, X+
    45c8:	fc 91       	ld	r31, X
    45ca:	d3 97       	sbiw	r26, 0x33	; 51
    45cc:	80 81       	ld	r24, Z
    45ce:	dc 96       	adiw	r26, 0x3c	; 60
    45d0:	9c 91       	ld	r25, X
    45d2:	dc 97       	sbiw	r26, 0x3c	; 60
    45d4:	89 23       	and	r24, r25
    45d6:	80 83       	st	Z, r24
    45d8:	d2 96       	adiw	r26, 0x32	; 50
    45da:	ed 91       	ld	r30, X+
    45dc:	fc 91       	ld	r31, X
    45de:	d3 97       	sbiw	r26, 0x33	; 51
    45e0:	80 81       	ld	r24, Z
    45e2:	d8 96       	adiw	r26, 0x38	; 56
    45e4:	9c 91       	ld	r25, X
    45e6:	d8 97       	sbiw	r26, 0x38	; 56
    45e8:	89 2b       	or	r24, r25
    45ea:	80 83       	st	Z, r24
    45ec:	d0 96       	adiw	r26, 0x30	; 48
    45ee:	ed 91       	ld	r30, X+
    45f0:	fc 91       	ld	r31, X
    45f2:	d1 97       	sbiw	r26, 0x31	; 49
    45f4:	80 81       	ld	r24, Z
    45f6:	d7 96       	adiw	r26, 0x37	; 55
    45f8:	9c 91       	ld	r25, X
    45fa:	d7 97       	sbiw	r26, 0x37	; 55
    45fc:	89 2b       	or	r24, r25
    45fe:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:431
			
		}
		writeCmd8(CC);			
    4600:	d0 96       	adiw	r26, 0x30	; 48
    4602:	ed 91       	ld	r30, X+
    4604:	fc 91       	ld	r31, X
    4606:	d1 97       	sbiw	r26, 0x31	; 49
    4608:	80 81       	ld	r24, Z
    460a:	db 96       	adiw	r26, 0x3b	; 59
    460c:	9c 91       	ld	r25, X
    460e:	db 97       	sbiw	r26, 0x3b	; 59
    4610:	89 23       	and	r24, r25
    4612:	80 83       	st	Z, r24
    4614:	90 96       	adiw	r26, 0x20	; 32
    4616:	8c 91       	ld	r24, X
    4618:	90 97       	sbiw	r26, 0x20	; 32
    461a:	82 b9       	out	0x02, r24	; 2
    461c:	d2 96       	adiw	r26, 0x32	; 50
    461e:	ed 91       	ld	r30, X+
    4620:	fc 91       	ld	r31, X
    4622:	d3 97       	sbiw	r26, 0x33	; 51
    4624:	80 81       	ld	r24, Z
    4626:	dc 96       	adiw	r26, 0x3c	; 60
    4628:	9c 91       	ld	r25, X
    462a:	dc 97       	sbiw	r26, 0x3c	; 60
    462c:	89 23       	and	r24, r25
    462e:	80 83       	st	Z, r24
    4630:	d2 96       	adiw	r26, 0x32	; 50
    4632:	ed 91       	ld	r30, X+
    4634:	fc 91       	ld	r31, X
    4636:	d3 97       	sbiw	r26, 0x33	; 51
    4638:	80 81       	ld	r24, Z
    463a:	d8 96       	adiw	r26, 0x38	; 56
    463c:	9c 91       	ld	r25, X
    463e:	d8 97       	sbiw	r26, 0x38	; 56
    4640:	89 2b       	or	r24, r25
    4642:	80 83       	st	Z, r24
    4644:	d0 96       	adiw	r26, 0x30	; 48
    4646:	ed 91       	ld	r30, X+
    4648:	fc 91       	ld	r31, X
    464a:	d1 97       	sbiw	r26, 0x31	; 49
    464c:	80 81       	ld	r24, Z
    464e:	d7 96       	adiw	r26, 0x37	; 55
    4650:	9c 91       	ld	r25, X
    4652:	d7 97       	sbiw	r26, 0x37	; 55
    4654:	89 2b       	or	r24, r25
    4656:	80 83       	st	Z, r24
    4658:	eb 01       	movw	r28, r22
    465a:	ca 01       	movw	r24, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:433
    }
    while (n-- > 0) 
    465c:	18 16       	cp	r1, r24
    465e:	19 06       	cpc	r1, r25
    4660:	bc f5       	brge	.+110    	; 0x46d0 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x152>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:435
	{
        if (isconst) 
    4662:	00 23       	and	r16, r16
    4664:	91 f1       	breq	.+100    	; 0x46ca <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x14c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:437
		{
			color = pgm_read_word(block++);		
    4666:	fe 01       	movw	r30, r28
    4668:	45 91       	lpm	r20, Z+
    466a:	54 91       	lpm	r21, Z
    466c:	34 2f       	mov	r19, r20
    466e:	25 2f       	mov	r18, r21
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:444
		else 
		{
			color = (*block++);			

		}		
        writeData16(color);
    4670:	22 b9       	out	0x02, r18	; 2
    4672:	d2 96       	adiw	r26, 0x32	; 50
    4674:	ed 91       	ld	r30, X+
    4676:	fc 91       	ld	r31, X
    4678:	d3 97       	sbiw	r26, 0x33	; 51
    467a:	20 81       	ld	r18, Z
    467c:	dc 96       	adiw	r26, 0x3c	; 60
    467e:	4c 91       	ld	r20, X
    4680:	dc 97       	sbiw	r26, 0x3c	; 60
    4682:	24 23       	and	r18, r20
    4684:	20 83       	st	Z, r18
    4686:	d2 96       	adiw	r26, 0x32	; 50
    4688:	ed 91       	ld	r30, X+
    468a:	fc 91       	ld	r31, X
    468c:	d3 97       	sbiw	r26, 0x33	; 51
    468e:	20 81       	ld	r18, Z
    4690:	d8 96       	adiw	r26, 0x38	; 56
    4692:	4c 91       	ld	r20, X
    4694:	d8 97       	sbiw	r26, 0x38	; 56
    4696:	24 2b       	or	r18, r20
    4698:	20 83       	st	Z, r18
    469a:	32 b9       	out	0x02, r19	; 2
    469c:	d2 96       	adiw	r26, 0x32	; 50
    469e:	ed 91       	ld	r30, X+
    46a0:	fc 91       	ld	r31, X
    46a2:	d3 97       	sbiw	r26, 0x33	; 51
    46a4:	20 81       	ld	r18, Z
    46a6:	dc 96       	adiw	r26, 0x3c	; 60
    46a8:	3c 91       	ld	r19, X
    46aa:	dc 97       	sbiw	r26, 0x3c	; 60
    46ac:	23 23       	and	r18, r19
    46ae:	20 83       	st	Z, r18
    46b0:	d2 96       	adiw	r26, 0x32	; 50
    46b2:	ed 91       	ld	r30, X+
    46b4:	fc 91       	ld	r31, X
    46b6:	d3 97       	sbiw	r26, 0x33	; 51
    46b8:	20 81       	ld	r18, Z
    46ba:	d8 96       	adiw	r26, 0x38	; 56
    46bc:	3c 91       	ld	r19, X
    46be:	d8 97       	sbiw	r26, 0x38	; 56
    46c0:	23 2b       	or	r18, r19
    46c2:	20 83       	st	Z, r18
    46c4:	22 96       	adiw	r28, 0x02	; 2
    46c6:	01 97       	sbiw	r24, 0x01	; 1
    46c8:	c9 cf       	rjmp	.-110    	; 0x465c <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xde>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:441
		{
			color = pgm_read_word(block++);		
        } 
		else 
		{
			color = (*block++);			
    46ca:	38 81       	ld	r19, Y
    46cc:	29 81       	ldd	r18, Y+1	; 0x01
    46ce:	d0 cf       	rjmp	.-96     	; 0x4670 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xf2>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:446

		}		
        writeData16(color);
    }
    CS_IDLE;
    46d0:	9e 96       	adiw	r26, 0x2e	; 46
    46d2:	ed 91       	ld	r30, X+
    46d4:	fc 91       	ld	r31, X
    46d6:	9f 97       	sbiw	r26, 0x2f	; 47
    46d8:	80 81       	ld	r24, Z
    46da:	d6 96       	adiw	r26, 0x36	; 54
    46dc:	9c 91       	ld	r25, X
    46de:	89 2b       	or	r24, r25
    46e0:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:447
}
    46e2:	df 91       	pop	r29
    46e4:	cf 91       	pop	r28
    46e6:	0f 91       	pop	r16
    46e8:	08 95       	ret

000046ea <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>:
_ZN11LCDWIKI_KBV12Push_CommandEjPha():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:305
	CS_IDLE;
}

//Write a command and N datas
void LCDWIKI_KBV::Push_Command(uint16_t cmd, uint8_t *block, int8_t N)
{
    46ea:	cf 93       	push	r28
    46ec:	df 93       	push	r29
    46ee:	fc 01       	movw	r30, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:306
  	CS_ACTIVE;
    46f0:	a6 a5       	ldd	r26, Z+46	; 0x2e
    46f2:	b7 a5       	ldd	r27, Z+47	; 0x2f
    46f4:	8c 91       	ld	r24, X
    46f6:	92 ad       	ldd	r25, Z+58	; 0x3a
    46f8:	89 23       	and	r24, r25
    46fa:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:307
    writeCmd16(cmd);
    46fc:	a0 a9       	ldd	r26, Z+48	; 0x30
    46fe:	b1 a9       	ldd	r27, Z+49	; 0x31
    4700:	8c 91       	ld	r24, X
    4702:	93 ad       	ldd	r25, Z+59	; 0x3b
    4704:	89 23       	and	r24, r25
    4706:	8c 93       	st	X, r24
    4708:	72 b9       	out	0x02, r23	; 2
    470a:	a2 a9       	ldd	r26, Z+50	; 0x32
    470c:	b3 a9       	ldd	r27, Z+51	; 0x33
    470e:	8c 91       	ld	r24, X
    4710:	94 ad       	ldd	r25, Z+60	; 0x3c
    4712:	89 23       	and	r24, r25
    4714:	8c 93       	st	X, r24
    4716:	a2 a9       	ldd	r26, Z+50	; 0x32
    4718:	b3 a9       	ldd	r27, Z+51	; 0x33
    471a:	8c 91       	ld	r24, X
    471c:	90 ad       	ldd	r25, Z+56	; 0x38
    471e:	89 2b       	or	r24, r25
    4720:	8c 93       	st	X, r24
    4722:	62 b9       	out	0x02, r22	; 2
    4724:	a2 a9       	ldd	r26, Z+50	; 0x32
    4726:	b3 a9       	ldd	r27, Z+51	; 0x33
    4728:	8c 91       	ld	r24, X
    472a:	94 ad       	ldd	r25, Z+60	; 0x3c
    472c:	89 23       	and	r24, r25
    472e:	8c 93       	st	X, r24
    4730:	a2 a9       	ldd	r26, Z+50	; 0x32
    4732:	b3 a9       	ldd	r27, Z+51	; 0x33
    4734:	8c 91       	ld	r24, X
    4736:	90 ad       	ldd	r25, Z+56	; 0x38
    4738:	89 2b       	or	r24, r25
    473a:	8c 93       	st	X, r24
    473c:	a0 a9       	ldd	r26, Z+48	; 0x30
    473e:	b1 a9       	ldd	r27, Z+49	; 0x31
    4740:	8c 91       	ld	r24, X
    4742:	97 a9       	ldd	r25, Z+55	; 0x37
    4744:	89 2b       	or	r24, r25
    4746:	8c 93       	st	X, r24
    4748:	da 01       	movw	r26, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:308
    while (N-- > 0) 
    474a:	9f ef       	ldi	r25, 0xFF	; 255
    474c:	92 0f       	add	r25, r18
    474e:	12 16       	cp	r1, r18
    4750:	0c f0       	brlt	.+2      	; 0x4754 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0x6a>
    4752:	3f c0       	rjmp	.+126    	; 0x47d2 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0xe8>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:310
	{
        uint8_t u8 = *block++;
    4754:	8d 91       	ld	r24, X+
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:311
        writeData8(u8); 
    4756:	82 b9       	out	0x02, r24	; 2
    4758:	c2 a9       	ldd	r28, Z+50	; 0x32
    475a:	d3 a9       	ldd	r29, Z+51	; 0x33
    475c:	88 81       	ld	r24, Y
    475e:	24 ad       	ldd	r18, Z+60	; 0x3c
    4760:	82 23       	and	r24, r18
    4762:	88 83       	st	Y, r24
    4764:	c2 a9       	ldd	r28, Z+50	; 0x32
    4766:	d3 a9       	ldd	r29, Z+51	; 0x33
    4768:	88 81       	ld	r24, Y
    476a:	20 ad       	ldd	r18, Z+56	; 0x38
    476c:	82 2b       	or	r24, r18
    476e:	88 83       	st	Y, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:312
		if(N && (lcd_driver == ID_7575))
    4770:	99 23       	and	r25, r25
    4772:	69 f1       	breq	.+90     	; 0x47ce <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0xe4>
    4774:	20 8d       	ldd	r18, Z+24	; 0x18
    4776:	31 8d       	ldd	r19, Z+25	; 0x19
    4778:	21 30       	cpi	r18, 0x01	; 1
    477a:	31 05       	cpc	r19, r1
    477c:	41 f5       	brne	.+80     	; 0x47ce <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0xe4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:314
		{
			cmd++;
    477e:	6f 5f       	subi	r22, 0xFF	; 255
    4780:	7f 4f       	sbci	r23, 0xFF	; 255
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:315
			writeCmd16(cmd);
    4782:	c0 a9       	ldd	r28, Z+48	; 0x30
    4784:	d1 a9       	ldd	r29, Z+49	; 0x31
    4786:	88 81       	ld	r24, Y
    4788:	23 ad       	ldd	r18, Z+59	; 0x3b
    478a:	82 23       	and	r24, r18
    478c:	88 83       	st	Y, r24
    478e:	72 b9       	out	0x02, r23	; 2
    4790:	c2 a9       	ldd	r28, Z+50	; 0x32
    4792:	d3 a9       	ldd	r29, Z+51	; 0x33
    4794:	88 81       	ld	r24, Y
    4796:	24 ad       	ldd	r18, Z+60	; 0x3c
    4798:	82 23       	and	r24, r18
    479a:	88 83       	st	Y, r24
    479c:	c2 a9       	ldd	r28, Z+50	; 0x32
    479e:	d3 a9       	ldd	r29, Z+51	; 0x33
    47a0:	88 81       	ld	r24, Y
    47a2:	20 ad       	ldd	r18, Z+56	; 0x38
    47a4:	82 2b       	or	r24, r18
    47a6:	88 83       	st	Y, r24
    47a8:	62 b9       	out	0x02, r22	; 2
    47aa:	c2 a9       	ldd	r28, Z+50	; 0x32
    47ac:	d3 a9       	ldd	r29, Z+51	; 0x33
    47ae:	88 81       	ld	r24, Y
    47b0:	24 ad       	ldd	r18, Z+60	; 0x3c
    47b2:	82 23       	and	r24, r18
    47b4:	88 83       	st	Y, r24
    47b6:	c2 a9       	ldd	r28, Z+50	; 0x32
    47b8:	d3 a9       	ldd	r29, Z+51	; 0x33
    47ba:	88 81       	ld	r24, Y
    47bc:	20 ad       	ldd	r18, Z+56	; 0x38
    47be:	82 2b       	or	r24, r18
    47c0:	88 83       	st	Y, r24
    47c2:	c0 a9       	ldd	r28, Z+48	; 0x30
    47c4:	d1 a9       	ldd	r29, Z+49	; 0x31
    47c6:	88 81       	ld	r24, Y
    47c8:	27 a9       	ldd	r18, Z+55	; 0x37
    47ca:	82 2b       	or	r24, r18
    47cc:	88 83       	st	Y, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:305
	CS_IDLE;
}

//Write a command and N datas
void LCDWIKI_KBV::Push_Command(uint16_t cmd, uint8_t *block, int8_t N)
{
    47ce:	29 2f       	mov	r18, r25
    47d0:	bc cf       	rjmp	.-136    	; 0x474a <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0x60>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:318
		{
			cmd++;
			writeCmd16(cmd);
		}
    }
    CS_IDLE;
    47d2:	a6 a5       	ldd	r26, Z+46	; 0x2e
    47d4:	b7 a5       	ldd	r27, Z+47	; 0x2f
    47d6:	8c 91       	ld	r24, X
    47d8:	96 a9       	ldd	r25, Z+54	; 0x36
    47da:	89 2b       	or	r24, r25
    47dc:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:319
}
    47de:	df 91       	pop	r29
    47e0:	cf 91       	pop	r28
    47e2:	08 95       	ret

000047e4 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)>:
_ZN11LCDWIKI_KBV15Set_Addr_WindowEiiii():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:323

// Sets the LCD address window 
void LCDWIKI_KBV::Set_Addr_Window(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
{
    47e4:	af 92       	push	r10
    47e6:	bf 92       	push	r11
    47e8:	cf 92       	push	r12
    47ea:	df 92       	push	r13
    47ec:	ef 92       	push	r14
    47ee:	ff 92       	push	r15
    47f0:	0f 93       	push	r16
    47f2:	1f 93       	push	r17
    47f4:	cf 93       	push	r28
    47f6:	df 93       	push	r29
    47f8:	00 d0       	rcall	.+0      	; 0x47fa <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x16>
    47fa:	00 d0       	rcall	.+0      	; 0x47fc <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x18>
    47fc:	1f 92       	push	r1
    47fe:	1f 92       	push	r1
    4800:	cd b7       	in	r28, 0x3d	; 61
    4802:	de b7       	in	r29, 0x3e	; 62
    4804:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:324
	CS_ACTIVE;
    4806:	dc 01       	movw	r26, r24
    4808:	9e 96       	adiw	r26, 0x2e	; 46
    480a:	ed 91       	ld	r30, X+
    480c:	fc 91       	ld	r31, X
    480e:	9f 97       	sbiw	r26, 0x2f	; 47
    4810:	80 81       	ld	r24, Z
    4812:	da 96       	adiw	r26, 0x3a	; 58
    4814:	9c 91       	ld	r25, X
    4816:	da 97       	sbiw	r26, 0x3a	; 58
    4818:	89 23       	and	r24, r25
    481a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:325
	if(lcd_driver == ID_932X) 
    481c:	58 96       	adiw	r26, 0x18	; 24
    481e:	8d 91       	ld	r24, X+
    4820:	9c 91       	ld	r25, X
    4822:	59 97       	sbiw	r26, 0x19	; 25
    4824:	00 97       	sbiw	r24, 0x00	; 0
    4826:	09 f0       	breq	.+2      	; 0x482a <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x46>
    4828:	44 c3       	rjmp	.+1672   	; 0x4eb2 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6ce>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:336
	    // set to the top-left corner -- although fill operations can be
	    // done in any direction, the current screen rotation is applied
	    // because some users find it disconcerting when a fill does not
	    // occur top-to-bottom.
	    int x, y, t;
	    switch(rotation) 
    482a:	56 96       	adiw	r26, 0x16	; 22
    482c:	8d 91       	ld	r24, X+
    482e:	9c 91       	ld	r25, X
    4830:	57 97       	sbiw	r26, 0x17	; 23
    4832:	82 30       	cpi	r24, 0x02	; 2
    4834:	91 05       	cpc	r25, r1
    4836:	09 f4       	brne	.+2      	; 0x483a <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x56>
    4838:	0b c3       	rjmp	.+1558   	; 0x4e50 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x66c>
    483a:	83 30       	cpi	r24, 0x03	; 3
    483c:	91 05       	cpc	r25, r1
    483e:	09 f4       	brne	.+2      	; 0x4842 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x5e>
    4840:	23 c3       	rjmp	.+1606   	; 0x4e88 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6a4>
    4842:	01 97       	sbiw	r24, 0x01	; 1
    4844:	09 f0       	breq	.+2      	; 0x4848 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x64>
    4846:	32 c3       	rjmp	.+1636   	; 0x4eac <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6c8>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:345
			      y  = y1;
			      break;
		     case 1:
			      t  = y1;
			      y1 = x1;
			      x1 = WIDTH  - 1 - y2;
    4848:	1e 96       	adiw	r26, 0x0e	; 14
    484a:	0d 90       	ld	r0, X+
    484c:	bc 91       	ld	r27, X
    484e:	a0 2d       	mov	r26, r0
    4850:	68 01       	movw	r12, r16
    4852:	c0 94       	com	r12
    4854:	d0 94       	com	r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:347
			      y2 = x2;
			      x2 = WIDTH  - 1 - t;
    4856:	40 95       	com	r20
    4858:	50 95       	com	r21
    485a:	fa 01       	movw	r30, r20
    485c:	ea 0f       	add	r30, r26
    485e:	fb 1f       	adc	r31, r27
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:349
			      x  = x2;
			      y  = y1;
    4860:	cb 01       	movw	r24, r22
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:346
			      break;
		     case 1:
			      t  = y1;
			      y1 = x1;
			      x1 = WIDTH  - 1 - y2;
			      y2 = x2;
    4862:	89 01       	movw	r16, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:347
			      x2 = WIDTH  - 1 - t;
    4864:	9f 01       	movw	r18, r30
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:344
			      x  = x1;
			      y  = y1;
			      break;
		     case 1:
			      t  = y1;
			      y1 = x1;
    4866:	ab 01       	movw	r20, r22
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:345
			      x1 = WIDTH  - 1 - y2;
    4868:	b6 01       	movw	r22, r12
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:353
			      x  = x2;
			      y  = y1;
		      	  break;
		     case 2:
			      t  = x1;
			      x1 = WIDTH  - 1 - x2;
    486a:	6a 0f       	add	r22, r26
    486c:	7b 1f       	adc	r23, r27
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:371
			      y2 = HEIGHT - 1 - t;
			      x  = x1;
			      y  = y2;
			      break;
    	}
    writeCmdData16(ILI932X_HOR_START_AD, x1); // Set address window
    486e:	d7 01       	movw	r26, r14
    4870:	d0 96       	adiw	r26, 0x30	; 48
    4872:	cd 90       	ld	r12, X+
    4874:	dc 90       	ld	r13, X
    4876:	d6 01       	movw	r26, r12
    4878:	bc 90       	ld	r11, X
    487a:	d7 01       	movw	r26, r14
    487c:	db 96       	adiw	r26, 0x3b	; 59
    487e:	ac 90       	ld	r10, X
    4880:	ba 20       	and	r11, r10
    4882:	d6 01       	movw	r26, r12
    4884:	bc 92       	st	X, r11
    4886:	12 b8       	out	0x02, r1	; 2
    4888:	d7 01       	movw	r26, r14
    488a:	d2 96       	adiw	r26, 0x32	; 50
    488c:	cd 90       	ld	r12, X+
    488e:	dc 90       	ld	r13, X
    4890:	d6 01       	movw	r26, r12
    4892:	bc 90       	ld	r11, X
    4894:	d7 01       	movw	r26, r14
    4896:	dc 96       	adiw	r26, 0x3c	; 60
    4898:	ac 90       	ld	r10, X
    489a:	ba 20       	and	r11, r10
    489c:	d6 01       	movw	r26, r12
    489e:	bc 92       	st	X, r11
    48a0:	d7 01       	movw	r26, r14
    48a2:	d2 96       	adiw	r26, 0x32	; 50
    48a4:	cd 90       	ld	r12, X+
    48a6:	dc 90       	ld	r13, X
    48a8:	d6 01       	movw	r26, r12
    48aa:	bc 90       	ld	r11, X
    48ac:	d7 01       	movw	r26, r14
    48ae:	d8 96       	adiw	r26, 0x38	; 56
    48b0:	ac 90       	ld	r10, X
    48b2:	ba 28       	or	r11, r10
    48b4:	d6 01       	movw	r26, r12
    48b6:	bc 92       	st	X, r11
    48b8:	a0 e5       	ldi	r26, 0x50	; 80
    48ba:	a2 b9       	out	0x02, r26	; 2
    48bc:	d7 01       	movw	r26, r14
    48be:	d2 96       	adiw	r26, 0x32	; 50
    48c0:	cd 90       	ld	r12, X+
    48c2:	dc 90       	ld	r13, X
    48c4:	d6 01       	movw	r26, r12
    48c6:	bc 90       	ld	r11, X
    48c8:	d7 01       	movw	r26, r14
    48ca:	dc 96       	adiw	r26, 0x3c	; 60
    48cc:	ac 90       	ld	r10, X
    48ce:	ba 20       	and	r11, r10
    48d0:	d6 01       	movw	r26, r12
    48d2:	bc 92       	st	X, r11
    48d4:	d7 01       	movw	r26, r14
    48d6:	d2 96       	adiw	r26, 0x32	; 50
    48d8:	cd 90       	ld	r12, X+
    48da:	dc 90       	ld	r13, X
    48dc:	d6 01       	movw	r26, r12
    48de:	bc 90       	ld	r11, X
    48e0:	d7 01       	movw	r26, r14
    48e2:	d8 96       	adiw	r26, 0x38	; 56
    48e4:	ac 90       	ld	r10, X
    48e6:	ba 28       	or	r11, r10
    48e8:	d6 01       	movw	r26, r12
    48ea:	bc 92       	st	X, r11
    48ec:	d7 01       	movw	r26, r14
    48ee:	d0 96       	adiw	r26, 0x30	; 48
    48f0:	cd 90       	ld	r12, X+
    48f2:	dc 90       	ld	r13, X
    48f4:	d6 01       	movw	r26, r12
    48f6:	bc 90       	ld	r11, X
    48f8:	d7 01       	movw	r26, r14
    48fa:	d7 96       	adiw	r26, 0x37	; 55
    48fc:	ac 90       	ld	r10, X
    48fe:	ba 28       	or	r11, r10
    4900:	d6 01       	movw	r26, r12
    4902:	bc 92       	st	X, r11
    4904:	72 b9       	out	0x02, r23	; 2
    4906:	d7 01       	movw	r26, r14
    4908:	d2 96       	adiw	r26, 0x32	; 50
    490a:	ad 90       	ld	r10, X+
    490c:	bc 90       	ld	r11, X
    490e:	d5 01       	movw	r26, r10
    4910:	7c 91       	ld	r23, X
    4912:	d7 01       	movw	r26, r14
    4914:	dc 96       	adiw	r26, 0x3c	; 60
    4916:	dc 90       	ld	r13, X
    4918:	7d 21       	and	r23, r13
    491a:	d5 01       	movw	r26, r10
    491c:	7c 93       	st	X, r23
    491e:	d7 01       	movw	r26, r14
    4920:	d2 96       	adiw	r26, 0x32	; 50
    4922:	ad 90       	ld	r10, X+
    4924:	bc 90       	ld	r11, X
    4926:	d5 01       	movw	r26, r10
    4928:	7c 91       	ld	r23, X
    492a:	d7 01       	movw	r26, r14
    492c:	d8 96       	adiw	r26, 0x38	; 56
    492e:	dc 90       	ld	r13, X
    4930:	7d 29       	or	r23, r13
    4932:	d5 01       	movw	r26, r10
    4934:	7c 93       	st	X, r23
    4936:	62 b9       	out	0x02, r22	; 2
    4938:	d7 01       	movw	r26, r14
    493a:	d2 96       	adiw	r26, 0x32	; 50
    493c:	cd 90       	ld	r12, X+
    493e:	dc 90       	ld	r13, X
    4940:	d6 01       	movw	r26, r12
    4942:	6c 91       	ld	r22, X
    4944:	d7 01       	movw	r26, r14
    4946:	dc 96       	adiw	r26, 0x3c	; 60
    4948:	7c 91       	ld	r23, X
    494a:	67 23       	and	r22, r23
    494c:	d6 01       	movw	r26, r12
    494e:	6c 93       	st	X, r22
    4950:	d7 01       	movw	r26, r14
    4952:	d2 96       	adiw	r26, 0x32	; 50
    4954:	cd 90       	ld	r12, X+
    4956:	dc 90       	ld	r13, X
    4958:	d6 01       	movw	r26, r12
    495a:	6c 91       	ld	r22, X
    495c:	d7 01       	movw	r26, r14
    495e:	d8 96       	adiw	r26, 0x38	; 56
    4960:	7c 91       	ld	r23, X
    4962:	67 2b       	or	r22, r23
    4964:	d6 01       	movw	r26, r12
    4966:	6c 93       	st	X, r22
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:372
    writeCmdData16(ILI932X_HOR_END_AD, x2);
    4968:	d7 01       	movw	r26, r14
    496a:	d0 96       	adiw	r26, 0x30	; 48
    496c:	cd 90       	ld	r12, X+
    496e:	dc 90       	ld	r13, X
    4970:	d6 01       	movw	r26, r12
    4972:	6c 91       	ld	r22, X
    4974:	d7 01       	movw	r26, r14
    4976:	db 96       	adiw	r26, 0x3b	; 59
    4978:	7c 91       	ld	r23, X
    497a:	67 23       	and	r22, r23
    497c:	d6 01       	movw	r26, r12
    497e:	6c 93       	st	X, r22
    4980:	12 b8       	out	0x02, r1	; 2
    4982:	d7 01       	movw	r26, r14
    4984:	d2 96       	adiw	r26, 0x32	; 50
    4986:	cd 90       	ld	r12, X+
    4988:	dc 90       	ld	r13, X
    498a:	d6 01       	movw	r26, r12
    498c:	6c 91       	ld	r22, X
    498e:	d7 01       	movw	r26, r14
    4990:	dc 96       	adiw	r26, 0x3c	; 60
    4992:	7c 91       	ld	r23, X
    4994:	67 23       	and	r22, r23
    4996:	d6 01       	movw	r26, r12
    4998:	6c 93       	st	X, r22
    499a:	d7 01       	movw	r26, r14
    499c:	d2 96       	adiw	r26, 0x32	; 50
    499e:	cd 90       	ld	r12, X+
    49a0:	dc 90       	ld	r13, X
    49a2:	d6 01       	movw	r26, r12
    49a4:	6c 91       	ld	r22, X
    49a6:	d7 01       	movw	r26, r14
    49a8:	d8 96       	adiw	r26, 0x38	; 56
    49aa:	7c 91       	ld	r23, X
    49ac:	67 2b       	or	r22, r23
    49ae:	d6 01       	movw	r26, r12
    49b0:	6c 93       	st	X, r22
    49b2:	61 e5       	ldi	r22, 0x51	; 81
    49b4:	62 b9       	out	0x02, r22	; 2
    49b6:	d7 01       	movw	r26, r14
    49b8:	d2 96       	adiw	r26, 0x32	; 50
    49ba:	cd 90       	ld	r12, X+
    49bc:	dc 90       	ld	r13, X
    49be:	d6 01       	movw	r26, r12
    49c0:	6c 91       	ld	r22, X
    49c2:	d7 01       	movw	r26, r14
    49c4:	dc 96       	adiw	r26, 0x3c	; 60
    49c6:	7c 91       	ld	r23, X
    49c8:	67 23       	and	r22, r23
    49ca:	d6 01       	movw	r26, r12
    49cc:	6c 93       	st	X, r22
    49ce:	d7 01       	movw	r26, r14
    49d0:	d2 96       	adiw	r26, 0x32	; 50
    49d2:	cd 90       	ld	r12, X+
    49d4:	dc 90       	ld	r13, X
    49d6:	d6 01       	movw	r26, r12
    49d8:	6c 91       	ld	r22, X
    49da:	d7 01       	movw	r26, r14
    49dc:	d8 96       	adiw	r26, 0x38	; 56
    49de:	7c 91       	ld	r23, X
    49e0:	67 2b       	or	r22, r23
    49e2:	d6 01       	movw	r26, r12
    49e4:	6c 93       	st	X, r22
    49e6:	d7 01       	movw	r26, r14
    49e8:	d0 96       	adiw	r26, 0x30	; 48
    49ea:	cd 90       	ld	r12, X+
    49ec:	dc 90       	ld	r13, X
    49ee:	d6 01       	movw	r26, r12
    49f0:	6c 91       	ld	r22, X
    49f2:	d7 01       	movw	r26, r14
    49f4:	d7 96       	adiw	r26, 0x37	; 55
    49f6:	7c 91       	ld	r23, X
    49f8:	67 2b       	or	r22, r23
    49fa:	d6 01       	movw	r26, r12
    49fc:	6c 93       	st	X, r22
    49fe:	32 b9       	out	0x02, r19	; 2
    4a00:	d7 01       	movw	r26, r14
    4a02:	d2 96       	adiw	r26, 0x32	; 50
    4a04:	cd 90       	ld	r12, X+
    4a06:	dc 90       	ld	r13, X
    4a08:	d6 01       	movw	r26, r12
    4a0a:	3c 91       	ld	r19, X
    4a0c:	d7 01       	movw	r26, r14
    4a0e:	dc 96       	adiw	r26, 0x3c	; 60
    4a10:	6c 91       	ld	r22, X
    4a12:	36 23       	and	r19, r22
    4a14:	d6 01       	movw	r26, r12
    4a16:	3c 93       	st	X, r19
    4a18:	d7 01       	movw	r26, r14
    4a1a:	d2 96       	adiw	r26, 0x32	; 50
    4a1c:	cd 90       	ld	r12, X+
    4a1e:	dc 90       	ld	r13, X
    4a20:	d6 01       	movw	r26, r12
    4a22:	3c 91       	ld	r19, X
    4a24:	d7 01       	movw	r26, r14
    4a26:	d8 96       	adiw	r26, 0x38	; 56
    4a28:	6c 91       	ld	r22, X
    4a2a:	36 2b       	or	r19, r22
    4a2c:	d6 01       	movw	r26, r12
    4a2e:	3c 93       	st	X, r19
    4a30:	22 b9       	out	0x02, r18	; 2
    4a32:	d7 01       	movw	r26, r14
    4a34:	d2 96       	adiw	r26, 0x32	; 50
    4a36:	6d 91       	ld	r22, X+
    4a38:	7c 91       	ld	r23, X
    4a3a:	db 01       	movw	r26, r22
    4a3c:	2c 91       	ld	r18, X
    4a3e:	d7 01       	movw	r26, r14
    4a40:	dc 96       	adiw	r26, 0x3c	; 60
    4a42:	3c 91       	ld	r19, X
    4a44:	23 23       	and	r18, r19
    4a46:	db 01       	movw	r26, r22
    4a48:	2c 93       	st	X, r18
    4a4a:	d7 01       	movw	r26, r14
    4a4c:	d2 96       	adiw	r26, 0x32	; 50
    4a4e:	6d 91       	ld	r22, X+
    4a50:	7c 91       	ld	r23, X
    4a52:	db 01       	movw	r26, r22
    4a54:	2c 91       	ld	r18, X
    4a56:	d7 01       	movw	r26, r14
    4a58:	d8 96       	adiw	r26, 0x38	; 56
    4a5a:	3c 91       	ld	r19, X
    4a5c:	23 2b       	or	r18, r19
    4a5e:	db 01       	movw	r26, r22
    4a60:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:373
    writeCmdData16(ILI932X_VER_START_AD, y1);
    4a62:	d7 01       	movw	r26, r14
    4a64:	d0 96       	adiw	r26, 0x30	; 48
    4a66:	6d 91       	ld	r22, X+
    4a68:	7c 91       	ld	r23, X
    4a6a:	db 01       	movw	r26, r22
    4a6c:	2c 91       	ld	r18, X
    4a6e:	d7 01       	movw	r26, r14
    4a70:	db 96       	adiw	r26, 0x3b	; 59
    4a72:	3c 91       	ld	r19, X
    4a74:	23 23       	and	r18, r19
    4a76:	db 01       	movw	r26, r22
    4a78:	2c 93       	st	X, r18
    4a7a:	12 b8       	out	0x02, r1	; 2
    4a7c:	d7 01       	movw	r26, r14
    4a7e:	d2 96       	adiw	r26, 0x32	; 50
    4a80:	6d 91       	ld	r22, X+
    4a82:	7c 91       	ld	r23, X
    4a84:	db 01       	movw	r26, r22
    4a86:	2c 91       	ld	r18, X
    4a88:	d7 01       	movw	r26, r14
    4a8a:	dc 96       	adiw	r26, 0x3c	; 60
    4a8c:	3c 91       	ld	r19, X
    4a8e:	23 23       	and	r18, r19
    4a90:	db 01       	movw	r26, r22
    4a92:	2c 93       	st	X, r18
    4a94:	d7 01       	movw	r26, r14
    4a96:	d2 96       	adiw	r26, 0x32	; 50
    4a98:	6d 91       	ld	r22, X+
    4a9a:	7c 91       	ld	r23, X
    4a9c:	db 01       	movw	r26, r22
    4a9e:	2c 91       	ld	r18, X
    4aa0:	d7 01       	movw	r26, r14
    4aa2:	d8 96       	adiw	r26, 0x38	; 56
    4aa4:	3c 91       	ld	r19, X
    4aa6:	23 2b       	or	r18, r19
    4aa8:	db 01       	movw	r26, r22
    4aaa:	2c 93       	st	X, r18
    4aac:	22 e5       	ldi	r18, 0x52	; 82
    4aae:	22 b9       	out	0x02, r18	; 2
    4ab0:	d7 01       	movw	r26, r14
    4ab2:	d2 96       	adiw	r26, 0x32	; 50
    4ab4:	6d 91       	ld	r22, X+
    4ab6:	7c 91       	ld	r23, X
    4ab8:	db 01       	movw	r26, r22
    4aba:	2c 91       	ld	r18, X
    4abc:	d7 01       	movw	r26, r14
    4abe:	dc 96       	adiw	r26, 0x3c	; 60
    4ac0:	3c 91       	ld	r19, X
    4ac2:	23 23       	and	r18, r19
    4ac4:	db 01       	movw	r26, r22
    4ac6:	2c 93       	st	X, r18
    4ac8:	d7 01       	movw	r26, r14
    4aca:	d2 96       	adiw	r26, 0x32	; 50
    4acc:	6d 91       	ld	r22, X+
    4ace:	7c 91       	ld	r23, X
    4ad0:	db 01       	movw	r26, r22
    4ad2:	2c 91       	ld	r18, X
    4ad4:	d7 01       	movw	r26, r14
    4ad6:	d8 96       	adiw	r26, 0x38	; 56
    4ad8:	3c 91       	ld	r19, X
    4ada:	23 2b       	or	r18, r19
    4adc:	db 01       	movw	r26, r22
    4ade:	2c 93       	st	X, r18
    4ae0:	d7 01       	movw	r26, r14
    4ae2:	d0 96       	adiw	r26, 0x30	; 48
    4ae4:	6d 91       	ld	r22, X+
    4ae6:	7c 91       	ld	r23, X
    4ae8:	db 01       	movw	r26, r22
    4aea:	2c 91       	ld	r18, X
    4aec:	d7 01       	movw	r26, r14
    4aee:	d7 96       	adiw	r26, 0x37	; 55
    4af0:	3c 91       	ld	r19, X
    4af2:	23 2b       	or	r18, r19
    4af4:	db 01       	movw	r26, r22
    4af6:	2c 93       	st	X, r18
    4af8:	52 b9       	out	0x02, r21	; 2
    4afa:	d7 01       	movw	r26, r14
    4afc:	d2 96       	adiw	r26, 0x32	; 50
    4afe:	6d 91       	ld	r22, X+
    4b00:	7c 91       	ld	r23, X
    4b02:	db 01       	movw	r26, r22
    4b04:	2c 91       	ld	r18, X
    4b06:	d7 01       	movw	r26, r14
    4b08:	dc 96       	adiw	r26, 0x3c	; 60
    4b0a:	3c 91       	ld	r19, X
    4b0c:	23 23       	and	r18, r19
    4b0e:	db 01       	movw	r26, r22
    4b10:	2c 93       	st	X, r18
    4b12:	d7 01       	movw	r26, r14
    4b14:	d2 96       	adiw	r26, 0x32	; 50
    4b16:	6d 91       	ld	r22, X+
    4b18:	7c 91       	ld	r23, X
    4b1a:	db 01       	movw	r26, r22
    4b1c:	2c 91       	ld	r18, X
    4b1e:	d7 01       	movw	r26, r14
    4b20:	d8 96       	adiw	r26, 0x38	; 56
    4b22:	3c 91       	ld	r19, X
    4b24:	23 2b       	or	r18, r19
    4b26:	db 01       	movw	r26, r22
    4b28:	2c 93       	st	X, r18
    4b2a:	42 b9       	out	0x02, r20	; 2
    4b2c:	d7 01       	movw	r26, r14
    4b2e:	d2 96       	adiw	r26, 0x32	; 50
    4b30:	4d 91       	ld	r20, X+
    4b32:	5c 91       	ld	r21, X
    4b34:	da 01       	movw	r26, r20
    4b36:	2c 91       	ld	r18, X
    4b38:	d7 01       	movw	r26, r14
    4b3a:	dc 96       	adiw	r26, 0x3c	; 60
    4b3c:	3c 91       	ld	r19, X
    4b3e:	23 23       	and	r18, r19
    4b40:	da 01       	movw	r26, r20
    4b42:	2c 93       	st	X, r18
    4b44:	d7 01       	movw	r26, r14
    4b46:	d2 96       	adiw	r26, 0x32	; 50
    4b48:	4d 91       	ld	r20, X+
    4b4a:	5c 91       	ld	r21, X
    4b4c:	da 01       	movw	r26, r20
    4b4e:	2c 91       	ld	r18, X
    4b50:	d7 01       	movw	r26, r14
    4b52:	d8 96       	adiw	r26, 0x38	; 56
    4b54:	3c 91       	ld	r19, X
    4b56:	23 2b       	or	r18, r19
    4b58:	da 01       	movw	r26, r20
    4b5a:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:374
    writeCmdData16(ILI932X_VER_END_AD, y2);
    4b5c:	d7 01       	movw	r26, r14
    4b5e:	d0 96       	adiw	r26, 0x30	; 48
    4b60:	4d 91       	ld	r20, X+
    4b62:	5c 91       	ld	r21, X
    4b64:	da 01       	movw	r26, r20
    4b66:	2c 91       	ld	r18, X
    4b68:	d7 01       	movw	r26, r14
    4b6a:	db 96       	adiw	r26, 0x3b	; 59
    4b6c:	3c 91       	ld	r19, X
    4b6e:	23 23       	and	r18, r19
    4b70:	da 01       	movw	r26, r20
    4b72:	2c 93       	st	X, r18
    4b74:	12 b8       	out	0x02, r1	; 2
    4b76:	d7 01       	movw	r26, r14
    4b78:	d2 96       	adiw	r26, 0x32	; 50
    4b7a:	4d 91       	ld	r20, X+
    4b7c:	5c 91       	ld	r21, X
    4b7e:	da 01       	movw	r26, r20
    4b80:	2c 91       	ld	r18, X
    4b82:	d7 01       	movw	r26, r14
    4b84:	dc 96       	adiw	r26, 0x3c	; 60
    4b86:	3c 91       	ld	r19, X
    4b88:	23 23       	and	r18, r19
    4b8a:	da 01       	movw	r26, r20
    4b8c:	2c 93       	st	X, r18
    4b8e:	d7 01       	movw	r26, r14
    4b90:	d2 96       	adiw	r26, 0x32	; 50
    4b92:	4d 91       	ld	r20, X+
    4b94:	5c 91       	ld	r21, X
    4b96:	da 01       	movw	r26, r20
    4b98:	2c 91       	ld	r18, X
    4b9a:	d7 01       	movw	r26, r14
    4b9c:	d8 96       	adiw	r26, 0x38	; 56
    4b9e:	3c 91       	ld	r19, X
    4ba0:	23 2b       	or	r18, r19
    4ba2:	da 01       	movw	r26, r20
    4ba4:	2c 93       	st	X, r18
    4ba6:	23 e5       	ldi	r18, 0x53	; 83
    4ba8:	22 b9       	out	0x02, r18	; 2
    4baa:	d7 01       	movw	r26, r14
    4bac:	d2 96       	adiw	r26, 0x32	; 50
    4bae:	4d 91       	ld	r20, X+
    4bb0:	5c 91       	ld	r21, X
    4bb2:	da 01       	movw	r26, r20
    4bb4:	2c 91       	ld	r18, X
    4bb6:	d7 01       	movw	r26, r14
    4bb8:	dc 96       	adiw	r26, 0x3c	; 60
    4bba:	3c 91       	ld	r19, X
    4bbc:	23 23       	and	r18, r19
    4bbe:	da 01       	movw	r26, r20
    4bc0:	2c 93       	st	X, r18
    4bc2:	d7 01       	movw	r26, r14
    4bc4:	d2 96       	adiw	r26, 0x32	; 50
    4bc6:	4d 91       	ld	r20, X+
    4bc8:	5c 91       	ld	r21, X
    4bca:	da 01       	movw	r26, r20
    4bcc:	2c 91       	ld	r18, X
    4bce:	d7 01       	movw	r26, r14
    4bd0:	d8 96       	adiw	r26, 0x38	; 56
    4bd2:	3c 91       	ld	r19, X
    4bd4:	23 2b       	or	r18, r19
    4bd6:	da 01       	movw	r26, r20
    4bd8:	2c 93       	st	X, r18
    4bda:	d7 01       	movw	r26, r14
    4bdc:	d0 96       	adiw	r26, 0x30	; 48
    4bde:	4d 91       	ld	r20, X+
    4be0:	5c 91       	ld	r21, X
    4be2:	da 01       	movw	r26, r20
    4be4:	2c 91       	ld	r18, X
    4be6:	d7 01       	movw	r26, r14
    4be8:	d7 96       	adiw	r26, 0x37	; 55
    4bea:	3c 91       	ld	r19, X
    4bec:	23 2b       	or	r18, r19
    4bee:	da 01       	movw	r26, r20
    4bf0:	2c 93       	st	X, r18
    4bf2:	12 b9       	out	0x02, r17	; 2
    4bf4:	d7 01       	movw	r26, r14
    4bf6:	d2 96       	adiw	r26, 0x32	; 50
    4bf8:	4d 91       	ld	r20, X+
    4bfa:	5c 91       	ld	r21, X
    4bfc:	da 01       	movw	r26, r20
    4bfe:	2c 91       	ld	r18, X
    4c00:	d7 01       	movw	r26, r14
    4c02:	dc 96       	adiw	r26, 0x3c	; 60
    4c04:	3c 91       	ld	r19, X
    4c06:	23 23       	and	r18, r19
    4c08:	da 01       	movw	r26, r20
    4c0a:	2c 93       	st	X, r18
    4c0c:	d7 01       	movw	r26, r14
    4c0e:	d2 96       	adiw	r26, 0x32	; 50
    4c10:	4d 91       	ld	r20, X+
    4c12:	5c 91       	ld	r21, X
    4c14:	da 01       	movw	r26, r20
    4c16:	2c 91       	ld	r18, X
    4c18:	d7 01       	movw	r26, r14
    4c1a:	d8 96       	adiw	r26, 0x38	; 56
    4c1c:	3c 91       	ld	r19, X
    4c1e:	23 2b       	or	r18, r19
    4c20:	da 01       	movw	r26, r20
    4c22:	2c 93       	st	X, r18
    4c24:	02 b9       	out	0x02, r16	; 2
    4c26:	d7 01       	movw	r26, r14
    4c28:	d2 96       	adiw	r26, 0x32	; 50
    4c2a:	4d 91       	ld	r20, X+
    4c2c:	5c 91       	ld	r21, X
    4c2e:	da 01       	movw	r26, r20
    4c30:	2c 91       	ld	r18, X
    4c32:	d7 01       	movw	r26, r14
    4c34:	dc 96       	adiw	r26, 0x3c	; 60
    4c36:	3c 91       	ld	r19, X
    4c38:	23 23       	and	r18, r19
    4c3a:	da 01       	movw	r26, r20
    4c3c:	2c 93       	st	X, r18
    4c3e:	d7 01       	movw	r26, r14
    4c40:	d2 96       	adiw	r26, 0x32	; 50
    4c42:	4d 91       	ld	r20, X+
    4c44:	5c 91       	ld	r21, X
    4c46:	da 01       	movw	r26, r20
    4c48:	2c 91       	ld	r18, X
    4c4a:	d7 01       	movw	r26, r14
    4c4c:	d8 96       	adiw	r26, 0x38	; 56
    4c4e:	3c 91       	ld	r19, X
    4c50:	23 2b       	or	r18, r19
    4c52:	da 01       	movw	r26, r20
    4c54:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:375
    writeCmdData16(ILI932X_GRAM_HOR_AD, x ); // Set address counter to top left
    4c56:	d7 01       	movw	r26, r14
    4c58:	d0 96       	adiw	r26, 0x30	; 48
    4c5a:	4d 91       	ld	r20, X+
    4c5c:	5c 91       	ld	r21, X
    4c5e:	da 01       	movw	r26, r20
    4c60:	2c 91       	ld	r18, X
    4c62:	d7 01       	movw	r26, r14
    4c64:	db 96       	adiw	r26, 0x3b	; 59
    4c66:	3c 91       	ld	r19, X
    4c68:	23 23       	and	r18, r19
    4c6a:	da 01       	movw	r26, r20
    4c6c:	2c 93       	st	X, r18
    4c6e:	12 b8       	out	0x02, r1	; 2
    4c70:	d7 01       	movw	r26, r14
    4c72:	d2 96       	adiw	r26, 0x32	; 50
    4c74:	4d 91       	ld	r20, X+
    4c76:	5c 91       	ld	r21, X
    4c78:	da 01       	movw	r26, r20
    4c7a:	2c 91       	ld	r18, X
    4c7c:	d7 01       	movw	r26, r14
    4c7e:	dc 96       	adiw	r26, 0x3c	; 60
    4c80:	3c 91       	ld	r19, X
    4c82:	23 23       	and	r18, r19
    4c84:	da 01       	movw	r26, r20
    4c86:	2c 93       	st	X, r18
    4c88:	d7 01       	movw	r26, r14
    4c8a:	d2 96       	adiw	r26, 0x32	; 50
    4c8c:	4d 91       	ld	r20, X+
    4c8e:	5c 91       	ld	r21, X
    4c90:	da 01       	movw	r26, r20
    4c92:	2c 91       	ld	r18, X
    4c94:	d7 01       	movw	r26, r14
    4c96:	d8 96       	adiw	r26, 0x38	; 56
    4c98:	3c 91       	ld	r19, X
    4c9a:	23 2b       	or	r18, r19
    4c9c:	da 01       	movw	r26, r20
    4c9e:	2c 93       	st	X, r18
    4ca0:	20 e2       	ldi	r18, 0x20	; 32
    4ca2:	22 b9       	out	0x02, r18	; 2
    4ca4:	d7 01       	movw	r26, r14
    4ca6:	d2 96       	adiw	r26, 0x32	; 50
    4ca8:	4d 91       	ld	r20, X+
    4caa:	5c 91       	ld	r21, X
    4cac:	da 01       	movw	r26, r20
    4cae:	2c 91       	ld	r18, X
    4cb0:	d7 01       	movw	r26, r14
    4cb2:	dc 96       	adiw	r26, 0x3c	; 60
    4cb4:	3c 91       	ld	r19, X
    4cb6:	23 23       	and	r18, r19
    4cb8:	da 01       	movw	r26, r20
    4cba:	2c 93       	st	X, r18
    4cbc:	d7 01       	movw	r26, r14
    4cbe:	d2 96       	adiw	r26, 0x32	; 50
    4cc0:	4d 91       	ld	r20, X+
    4cc2:	5c 91       	ld	r21, X
    4cc4:	da 01       	movw	r26, r20
    4cc6:	2c 91       	ld	r18, X
    4cc8:	d7 01       	movw	r26, r14
    4cca:	d8 96       	adiw	r26, 0x38	; 56
    4ccc:	3c 91       	ld	r19, X
    4cce:	23 2b       	or	r18, r19
    4cd0:	da 01       	movw	r26, r20
    4cd2:	2c 93       	st	X, r18
    4cd4:	d7 01       	movw	r26, r14
    4cd6:	d0 96       	adiw	r26, 0x30	; 48
    4cd8:	4d 91       	ld	r20, X+
    4cda:	5c 91       	ld	r21, X
    4cdc:	da 01       	movw	r26, r20
    4cde:	2c 91       	ld	r18, X
    4ce0:	d7 01       	movw	r26, r14
    4ce2:	d7 96       	adiw	r26, 0x37	; 55
    4ce4:	3c 91       	ld	r19, X
    4ce6:	23 2b       	or	r18, r19
    4ce8:	da 01       	movw	r26, r20
    4cea:	2c 93       	st	X, r18
    4cec:	f2 b9       	out	0x02, r31	; 2
    4cee:	d7 01       	movw	r26, r14
    4cf0:	d2 96       	adiw	r26, 0x32	; 50
    4cf2:	4d 91       	ld	r20, X+
    4cf4:	5c 91       	ld	r21, X
    4cf6:	da 01       	movw	r26, r20
    4cf8:	2c 91       	ld	r18, X
    4cfa:	d7 01       	movw	r26, r14
    4cfc:	dc 96       	adiw	r26, 0x3c	; 60
    4cfe:	3c 91       	ld	r19, X
    4d00:	23 23       	and	r18, r19
    4d02:	da 01       	movw	r26, r20
    4d04:	2c 93       	st	X, r18
    4d06:	d7 01       	movw	r26, r14
    4d08:	d2 96       	adiw	r26, 0x32	; 50
    4d0a:	4d 91       	ld	r20, X+
    4d0c:	5c 91       	ld	r21, X
    4d0e:	da 01       	movw	r26, r20
    4d10:	2c 91       	ld	r18, X
    4d12:	d7 01       	movw	r26, r14
    4d14:	d8 96       	adiw	r26, 0x38	; 56
    4d16:	3c 91       	ld	r19, X
    4d18:	23 2b       	or	r18, r19
    4d1a:	da 01       	movw	r26, r20
    4d1c:	2c 93       	st	X, r18
    4d1e:	e2 b9       	out	0x02, r30	; 2
    4d20:	d7 01       	movw	r26, r14
    4d22:	d2 96       	adiw	r26, 0x32	; 50
    4d24:	ed 91       	ld	r30, X+
    4d26:	fc 91       	ld	r31, X
    4d28:	d3 97       	sbiw	r26, 0x33	; 51
    4d2a:	20 81       	ld	r18, Z
    4d2c:	dc 96       	adiw	r26, 0x3c	; 60
    4d2e:	3c 91       	ld	r19, X
    4d30:	dc 97       	sbiw	r26, 0x3c	; 60
    4d32:	23 23       	and	r18, r19
    4d34:	20 83       	st	Z, r18
    4d36:	d2 96       	adiw	r26, 0x32	; 50
    4d38:	ed 91       	ld	r30, X+
    4d3a:	fc 91       	ld	r31, X
    4d3c:	d3 97       	sbiw	r26, 0x33	; 51
    4d3e:	20 81       	ld	r18, Z
    4d40:	d8 96       	adiw	r26, 0x38	; 56
    4d42:	3c 91       	ld	r19, X
    4d44:	d8 97       	sbiw	r26, 0x38	; 56
    4d46:	23 2b       	or	r18, r19
    4d48:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:376
    writeCmdData16(ILI932X_GRAM_VER_AD, y );
    4d4a:	d0 96       	adiw	r26, 0x30	; 48
    4d4c:	ed 91       	ld	r30, X+
    4d4e:	fc 91       	ld	r31, X
    4d50:	d1 97       	sbiw	r26, 0x31	; 49
    4d52:	20 81       	ld	r18, Z
    4d54:	db 96       	adiw	r26, 0x3b	; 59
    4d56:	3c 91       	ld	r19, X
    4d58:	db 97       	sbiw	r26, 0x3b	; 59
    4d5a:	23 23       	and	r18, r19
    4d5c:	20 83       	st	Z, r18
    4d5e:	12 b8       	out	0x02, r1	; 2
    4d60:	d2 96       	adiw	r26, 0x32	; 50
    4d62:	ed 91       	ld	r30, X+
    4d64:	fc 91       	ld	r31, X
    4d66:	d3 97       	sbiw	r26, 0x33	; 51
    4d68:	20 81       	ld	r18, Z
    4d6a:	dc 96       	adiw	r26, 0x3c	; 60
    4d6c:	3c 91       	ld	r19, X
    4d6e:	dc 97       	sbiw	r26, 0x3c	; 60
    4d70:	23 23       	and	r18, r19
    4d72:	20 83       	st	Z, r18
    4d74:	d2 96       	adiw	r26, 0x32	; 50
    4d76:	ed 91       	ld	r30, X+
    4d78:	fc 91       	ld	r31, X
    4d7a:	d3 97       	sbiw	r26, 0x33	; 51
    4d7c:	20 81       	ld	r18, Z
    4d7e:	d8 96       	adiw	r26, 0x38	; 56
    4d80:	3c 91       	ld	r19, X
    4d82:	d8 97       	sbiw	r26, 0x38	; 56
    4d84:	23 2b       	or	r18, r19
    4d86:	20 83       	st	Z, r18
    4d88:	21 e2       	ldi	r18, 0x21	; 33
    4d8a:	22 b9       	out	0x02, r18	; 2
    4d8c:	d2 96       	adiw	r26, 0x32	; 50
    4d8e:	ed 91       	ld	r30, X+
    4d90:	fc 91       	ld	r31, X
    4d92:	d3 97       	sbiw	r26, 0x33	; 51
    4d94:	20 81       	ld	r18, Z
    4d96:	dc 96       	adiw	r26, 0x3c	; 60
    4d98:	3c 91       	ld	r19, X
    4d9a:	dc 97       	sbiw	r26, 0x3c	; 60
    4d9c:	23 23       	and	r18, r19
    4d9e:	20 83       	st	Z, r18
    4da0:	d2 96       	adiw	r26, 0x32	; 50
    4da2:	ed 91       	ld	r30, X+
    4da4:	fc 91       	ld	r31, X
    4da6:	d3 97       	sbiw	r26, 0x33	; 51
    4da8:	20 81       	ld	r18, Z
    4daa:	d8 96       	adiw	r26, 0x38	; 56
    4dac:	3c 91       	ld	r19, X
    4dae:	d8 97       	sbiw	r26, 0x38	; 56
    4db0:	23 2b       	or	r18, r19
    4db2:	20 83       	st	Z, r18
    4db4:	d0 96       	adiw	r26, 0x30	; 48
    4db6:	ed 91       	ld	r30, X+
    4db8:	fc 91       	ld	r31, X
    4dba:	d1 97       	sbiw	r26, 0x31	; 49
    4dbc:	20 81       	ld	r18, Z
    4dbe:	d7 96       	adiw	r26, 0x37	; 55
    4dc0:	3c 91       	ld	r19, X
    4dc2:	d7 97       	sbiw	r26, 0x37	; 55
    4dc4:	23 2b       	or	r18, r19
    4dc6:	20 83       	st	Z, r18
    4dc8:	92 b9       	out	0x02, r25	; 2
    4dca:	d2 96       	adiw	r26, 0x32	; 50
    4dcc:	ed 91       	ld	r30, X+
    4dce:	fc 91       	ld	r31, X
    4dd0:	d3 97       	sbiw	r26, 0x33	; 51
    4dd2:	90 81       	ld	r25, Z
    4dd4:	dc 96       	adiw	r26, 0x3c	; 60
    4dd6:	2c 91       	ld	r18, X
    4dd8:	dc 97       	sbiw	r26, 0x3c	; 60
    4dda:	92 23       	and	r25, r18
    4ddc:	90 83       	st	Z, r25
    4dde:	d2 96       	adiw	r26, 0x32	; 50
    4de0:	ed 91       	ld	r30, X+
    4de2:	fc 91       	ld	r31, X
    4de4:	d3 97       	sbiw	r26, 0x33	; 51
    4de6:	90 81       	ld	r25, Z
    4de8:	d8 96       	adiw	r26, 0x38	; 56
    4dea:	2c 91       	ld	r18, X
    4dec:	d8 97       	sbiw	r26, 0x38	; 56
    4dee:	92 2b       	or	r25, r18
    4df0:	90 83       	st	Z, r25
    4df2:	82 b9       	out	0x02, r24	; 2
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:387
		writeCmdData8(HX8347G_ROWADDRSTART_HI,y1>>8);
		writeCmdData8(HX8347G_ROWADDRSTART_LO,y1);
		writeCmdData8(HX8347G_COLADDREND_HI,x2>>8);
		writeCmdData8(HX8347G_COLADDREND_LO,x2);
		writeCmdData8(HX8347G_ROWADDREND_HI,y2>>8);
		writeCmdData8(HX8347G_ROWADDREND_LO,y2);
    4df4:	d2 96       	adiw	r26, 0x32	; 50
    4df6:	ed 91       	ld	r30, X+
    4df8:	fc 91       	ld	r31, X
    4dfa:	d3 97       	sbiw	r26, 0x33	; 51
    4dfc:	80 81       	ld	r24, Z
    4dfe:	dc 96       	adiw	r26, 0x3c	; 60
    4e00:	9c 91       	ld	r25, X
    4e02:	dc 97       	sbiw	r26, 0x3c	; 60
    4e04:	89 23       	and	r24, r25
    4e06:	80 83       	st	Z, r24
    4e08:	d2 96       	adiw	r26, 0x32	; 50
    4e0a:	ed 91       	ld	r30, X+
    4e0c:	fc 91       	ld	r31, X
    4e0e:	d3 97       	sbiw	r26, 0x33	; 51
    4e10:	80 81       	ld	r24, Z
    4e12:	d8 96       	adiw	r26, 0x38	; 56
    4e14:	9c 91       	ld	r25, X
    4e16:	89 2b       	or	r24, r25
    4e18:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:397
		uint8_t y_buf[] = {y1>>8,y1&0xFF,y2>>8,y2&0xFF}; 
	
		Push_Command(XC, x_buf, 4); //set x address
		Push_Command(YC, y_buf, 4); //set y address
	}
	CS_IDLE;		
    4e1a:	d7 01       	movw	r26, r14
    4e1c:	9e 96       	adiw	r26, 0x2e	; 46
    4e1e:	ed 91       	ld	r30, X+
    4e20:	fc 91       	ld	r31, X
    4e22:	9f 97       	sbiw	r26, 0x2f	; 47
    4e24:	80 81       	ld	r24, Z
    4e26:	d6 96       	adiw	r26, 0x36	; 54
    4e28:	9c 91       	ld	r25, X
    4e2a:	89 2b       	or	r24, r25
    4e2c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:398
}
    4e2e:	28 96       	adiw	r28, 0x08	; 8
    4e30:	0f b6       	in	r0, 0x3f	; 63
    4e32:	f8 94       	cli
    4e34:	de bf       	out	0x3e, r29	; 62
    4e36:	0f be       	out	0x3f, r0	; 63
    4e38:	cd bf       	out	0x3d, r28	; 61
    4e3a:	df 91       	pop	r29
    4e3c:	cf 91       	pop	r28
    4e3e:	1f 91       	pop	r17
    4e40:	0f 91       	pop	r16
    4e42:	ff 90       	pop	r15
    4e44:	ef 90       	pop	r14
    4e46:	df 90       	pop	r13
    4e48:	cf 90       	pop	r12
    4e4a:	bf 90       	pop	r11
    4e4c:	af 90       	pop	r10
    4e4e:	08 95       	ret
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:353
			      x  = x2;
			      y  = y1;
		      	  break;
		     case 2:
			      t  = x1;
			      x1 = WIDTH  - 1 - x2;
    4e50:	f7 01       	movw	r30, r14
    4e52:	a6 85       	ldd	r26, Z+14	; 0x0e
    4e54:	b7 85       	ldd	r27, Z+15	; 0x0f
    4e56:	59 01       	movw	r10, r18
    4e58:	a0 94       	com	r10
    4e5a:	b0 94       	com	r11
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:354
			      x2 = WIDTH  - 1 - t;
    4e5c:	9d 01       	movw	r18, r26
    4e5e:	26 1b       	sub	r18, r22
    4e60:	37 0b       	sbc	r19, r23
    4e62:	21 50       	subi	r18, 0x01	; 1
    4e64:	31 09       	sbc	r19, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:356
			      t  = y1;
			      y1 = HEIGHT - 1 - y2;
    4e66:	60 89       	ldd	r22, Z+16	; 0x10
    4e68:	71 89       	ldd	r23, Z+17	; 0x11
    4e6a:	68 01       	movw	r12, r16
    4e6c:	c0 94       	com	r12
    4e6e:	d0 94       	com	r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:357
			      y2 = HEIGHT - 1 - t;
    4e70:	8a 01       	movw	r16, r20
    4e72:	00 95       	com	r16
    4e74:	10 95       	com	r17
    4e76:	06 0f       	add	r16, r22
    4e78:	17 1f       	adc	r17, r23
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:359
			      x  = x2;
			      y  = y2;
    4e7a:	c8 01       	movw	r24, r16
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:358
			      x1 = WIDTH  - 1 - x2;
			      x2 = WIDTH  - 1 - t;
			      t  = y1;
			      y1 = HEIGHT - 1 - y2;
			      y2 = HEIGHT - 1 - t;
			      x  = x2;
    4e7c:	f9 01       	movw	r30, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:356
		     case 2:
			      t  = x1;
			      x1 = WIDTH  - 1 - x2;
			      x2 = WIDTH  - 1 - t;
			      t  = y1;
			      y1 = HEIGHT - 1 - y2;
    4e7e:	a6 01       	movw	r20, r12
    4e80:	46 0f       	add	r20, r22
    4e82:	57 1f       	adc	r21, r23
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:353
			      x  = x2;
			      y  = y1;
		      	  break;
		     case 2:
			      t  = x1;
			      x1 = WIDTH  - 1 - x2;
    4e84:	b5 01       	movw	r22, r10
    4e86:	f1 cc       	rjmp	.-1566   	; 0x486a <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x86>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:364
			      y  = y2;
			      break;
		     case 3:
			      t  = x1;
			      x1 = y1;
			      y1 = HEIGHT - 1 - x2;
    4e88:	f7 01       	movw	r30, r14
    4e8a:	a0 89       	ldd	r26, Z+16	; 0x10
    4e8c:	b1 89       	ldd	r27, Z+17	; 0x11
    4e8e:	69 01       	movw	r12, r18
    4e90:	c0 94       	com	r12
    4e92:	d0 94       	com	r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:366
			      x2 = y2;
			      y2 = HEIGHT - 1 - t;
    4e94:	cd 01       	movw	r24, r26
    4e96:	86 1b       	sub	r24, r22
    4e98:	97 0b       	sbc	r25, r23
    4e9a:	01 97       	sbiw	r24, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:367
			      x  = x1;
    4e9c:	fa 01       	movw	r30, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:365
			      break;
		     case 3:
			      t  = x1;
			      x1 = y1;
			      y1 = HEIGHT - 1 - x2;
			      x2 = y2;
    4e9e:	98 01       	movw	r18, r16
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:366
			      y2 = HEIGHT - 1 - t;
    4ea0:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:363
			      x  = x2;
			      y  = y2;
			      break;
		     case 3:
			      t  = x1;
			      x1 = y1;
    4ea2:	ba 01       	movw	r22, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:364
			      y1 = HEIGHT - 1 - x2;
    4ea4:	a6 01       	movw	r20, r12
    4ea6:	4a 0f       	add	r20, r26
    4ea8:	5b 1f       	adc	r21, r27
    4eaa:	e1 cc       	rjmp	.-1598   	; 0x486e <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x8a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:340
	    int x, y, t;
	    switch(rotation) 
		{
		     default:
			      x  = x1;
			      y  = y1;
    4eac:	ca 01       	movw	r24, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:339
	    // occur top-to-bottom.
	    int x, y, t;
	    switch(rotation) 
		{
		     default:
			      x  = x1;
    4eae:	fb 01       	movw	r30, r22
    4eb0:	de cc       	rjmp	.-1604   	; 0x486e <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x8a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:378
    writeCmdData16(ILI932X_VER_START_AD, y1);
    writeCmdData16(ILI932X_VER_END_AD, y2);
    writeCmdData16(ILI932X_GRAM_HOR_AD, x ); // Set address counter to top left
    writeCmdData16(ILI932X_GRAM_VER_AD, y );
 	} 
	else if(lcd_driver == ID_7575)
    4eb2:	01 97       	sbiw	r24, 0x01	; 1
    4eb4:	09 f0       	breq	.+2      	; 0x4eb8 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6d4>
    4eb6:	e5 c1       	rjmp	.+970    	; 0x5282 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0xa9e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:380
	{
		writeCmdData8(HX8347G_COLADDRSTART_HI,x1>>8);
    4eb8:	d0 96       	adiw	r26, 0x30	; 48
    4eba:	ed 91       	ld	r30, X+
    4ebc:	fc 91       	ld	r31, X
    4ebe:	d1 97       	sbiw	r26, 0x31	; 49
    4ec0:	80 81       	ld	r24, Z
    4ec2:	db 96       	adiw	r26, 0x3b	; 59
    4ec4:	9c 91       	ld	r25, X
    4ec6:	db 97       	sbiw	r26, 0x3b	; 59
    4ec8:	89 23       	and	r24, r25
    4eca:	80 83       	st	Z, r24
    4ecc:	82 e0       	ldi	r24, 0x02	; 2
    4ece:	82 b9       	out	0x02, r24	; 2
    4ed0:	d2 96       	adiw	r26, 0x32	; 50
    4ed2:	ed 91       	ld	r30, X+
    4ed4:	fc 91       	ld	r31, X
    4ed6:	d3 97       	sbiw	r26, 0x33	; 51
    4ed8:	80 81       	ld	r24, Z
    4eda:	dc 96       	adiw	r26, 0x3c	; 60
    4edc:	9c 91       	ld	r25, X
    4ede:	dc 97       	sbiw	r26, 0x3c	; 60
    4ee0:	89 23       	and	r24, r25
    4ee2:	80 83       	st	Z, r24
    4ee4:	d2 96       	adiw	r26, 0x32	; 50
    4ee6:	ed 91       	ld	r30, X+
    4ee8:	fc 91       	ld	r31, X
    4eea:	d3 97       	sbiw	r26, 0x33	; 51
    4eec:	80 81       	ld	r24, Z
    4eee:	d8 96       	adiw	r26, 0x38	; 56
    4ef0:	9c 91       	ld	r25, X
    4ef2:	d8 97       	sbiw	r26, 0x38	; 56
    4ef4:	89 2b       	or	r24, r25
    4ef6:	80 83       	st	Z, r24
    4ef8:	d0 96       	adiw	r26, 0x30	; 48
    4efa:	ed 91       	ld	r30, X+
    4efc:	fc 91       	ld	r31, X
    4efe:	d1 97       	sbiw	r26, 0x31	; 49
    4f00:	80 81       	ld	r24, Z
    4f02:	d7 96       	adiw	r26, 0x37	; 55
    4f04:	9c 91       	ld	r25, X
    4f06:	d7 97       	sbiw	r26, 0x37	; 55
    4f08:	89 2b       	or	r24, r25
    4f0a:	80 83       	st	Z, r24
    4f0c:	72 b9       	out	0x02, r23	; 2
    4f0e:	d2 96       	adiw	r26, 0x32	; 50
    4f10:	ed 91       	ld	r30, X+
    4f12:	fc 91       	ld	r31, X
    4f14:	d3 97       	sbiw	r26, 0x33	; 51
    4f16:	80 81       	ld	r24, Z
    4f18:	dc 96       	adiw	r26, 0x3c	; 60
    4f1a:	9c 91       	ld	r25, X
    4f1c:	dc 97       	sbiw	r26, 0x3c	; 60
    4f1e:	89 23       	and	r24, r25
    4f20:	80 83       	st	Z, r24
    4f22:	d2 96       	adiw	r26, 0x32	; 50
    4f24:	ed 91       	ld	r30, X+
    4f26:	fc 91       	ld	r31, X
    4f28:	d3 97       	sbiw	r26, 0x33	; 51
    4f2a:	80 81       	ld	r24, Z
    4f2c:	d8 96       	adiw	r26, 0x38	; 56
    4f2e:	9c 91       	ld	r25, X
    4f30:	d8 97       	sbiw	r26, 0x38	; 56
    4f32:	89 2b       	or	r24, r25
    4f34:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:381
		writeCmdData8(HX8347G_COLADDRSTART_LO,x1);
    4f36:	d0 96       	adiw	r26, 0x30	; 48
    4f38:	ed 91       	ld	r30, X+
    4f3a:	fc 91       	ld	r31, X
    4f3c:	d1 97       	sbiw	r26, 0x31	; 49
    4f3e:	80 81       	ld	r24, Z
    4f40:	db 96       	adiw	r26, 0x3b	; 59
    4f42:	9c 91       	ld	r25, X
    4f44:	db 97       	sbiw	r26, 0x3b	; 59
    4f46:	89 23       	and	r24, r25
    4f48:	80 83       	st	Z, r24
    4f4a:	83 e0       	ldi	r24, 0x03	; 3
    4f4c:	82 b9       	out	0x02, r24	; 2
    4f4e:	d2 96       	adiw	r26, 0x32	; 50
    4f50:	ed 91       	ld	r30, X+
    4f52:	fc 91       	ld	r31, X
    4f54:	d3 97       	sbiw	r26, 0x33	; 51
    4f56:	80 81       	ld	r24, Z
    4f58:	dc 96       	adiw	r26, 0x3c	; 60
    4f5a:	9c 91       	ld	r25, X
    4f5c:	dc 97       	sbiw	r26, 0x3c	; 60
    4f5e:	89 23       	and	r24, r25
    4f60:	80 83       	st	Z, r24
    4f62:	d2 96       	adiw	r26, 0x32	; 50
    4f64:	ed 91       	ld	r30, X+
    4f66:	fc 91       	ld	r31, X
    4f68:	d3 97       	sbiw	r26, 0x33	; 51
    4f6a:	80 81       	ld	r24, Z
    4f6c:	d8 96       	adiw	r26, 0x38	; 56
    4f6e:	9c 91       	ld	r25, X
    4f70:	d8 97       	sbiw	r26, 0x38	; 56
    4f72:	89 2b       	or	r24, r25
    4f74:	80 83       	st	Z, r24
    4f76:	d0 96       	adiw	r26, 0x30	; 48
    4f78:	ed 91       	ld	r30, X+
    4f7a:	fc 91       	ld	r31, X
    4f7c:	d1 97       	sbiw	r26, 0x31	; 49
    4f7e:	80 81       	ld	r24, Z
    4f80:	d7 96       	adiw	r26, 0x37	; 55
    4f82:	9c 91       	ld	r25, X
    4f84:	d7 97       	sbiw	r26, 0x37	; 55
    4f86:	89 2b       	or	r24, r25
    4f88:	80 83       	st	Z, r24
    4f8a:	62 b9       	out	0x02, r22	; 2
    4f8c:	d2 96       	adiw	r26, 0x32	; 50
    4f8e:	ed 91       	ld	r30, X+
    4f90:	fc 91       	ld	r31, X
    4f92:	d3 97       	sbiw	r26, 0x33	; 51
    4f94:	80 81       	ld	r24, Z
    4f96:	dc 96       	adiw	r26, 0x3c	; 60
    4f98:	9c 91       	ld	r25, X
    4f9a:	dc 97       	sbiw	r26, 0x3c	; 60
    4f9c:	89 23       	and	r24, r25
    4f9e:	80 83       	st	Z, r24
    4fa0:	d2 96       	adiw	r26, 0x32	; 50
    4fa2:	ed 91       	ld	r30, X+
    4fa4:	fc 91       	ld	r31, X
    4fa6:	d3 97       	sbiw	r26, 0x33	; 51
    4fa8:	80 81       	ld	r24, Z
    4faa:	d8 96       	adiw	r26, 0x38	; 56
    4fac:	9c 91       	ld	r25, X
    4fae:	d8 97       	sbiw	r26, 0x38	; 56
    4fb0:	89 2b       	or	r24, r25
    4fb2:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:382
		writeCmdData8(HX8347G_ROWADDRSTART_HI,y1>>8);
    4fb4:	d0 96       	adiw	r26, 0x30	; 48
    4fb6:	ed 91       	ld	r30, X+
    4fb8:	fc 91       	ld	r31, X
    4fba:	d1 97       	sbiw	r26, 0x31	; 49
    4fbc:	80 81       	ld	r24, Z
    4fbe:	db 96       	adiw	r26, 0x3b	; 59
    4fc0:	9c 91       	ld	r25, X
    4fc2:	db 97       	sbiw	r26, 0x3b	; 59
    4fc4:	89 23       	and	r24, r25
    4fc6:	80 83       	st	Z, r24
    4fc8:	86 e0       	ldi	r24, 0x06	; 6
    4fca:	82 b9       	out	0x02, r24	; 2
    4fcc:	d2 96       	adiw	r26, 0x32	; 50
    4fce:	ed 91       	ld	r30, X+
    4fd0:	fc 91       	ld	r31, X
    4fd2:	d3 97       	sbiw	r26, 0x33	; 51
    4fd4:	80 81       	ld	r24, Z
    4fd6:	dc 96       	adiw	r26, 0x3c	; 60
    4fd8:	9c 91       	ld	r25, X
    4fda:	dc 97       	sbiw	r26, 0x3c	; 60
    4fdc:	89 23       	and	r24, r25
    4fde:	80 83       	st	Z, r24
    4fe0:	d2 96       	adiw	r26, 0x32	; 50
    4fe2:	ed 91       	ld	r30, X+
    4fe4:	fc 91       	ld	r31, X
    4fe6:	d3 97       	sbiw	r26, 0x33	; 51
    4fe8:	80 81       	ld	r24, Z
    4fea:	d8 96       	adiw	r26, 0x38	; 56
    4fec:	9c 91       	ld	r25, X
    4fee:	d8 97       	sbiw	r26, 0x38	; 56
    4ff0:	89 2b       	or	r24, r25
    4ff2:	80 83       	st	Z, r24
    4ff4:	d0 96       	adiw	r26, 0x30	; 48
    4ff6:	ed 91       	ld	r30, X+
    4ff8:	fc 91       	ld	r31, X
    4ffa:	d1 97       	sbiw	r26, 0x31	; 49
    4ffc:	80 81       	ld	r24, Z
    4ffe:	d7 96       	adiw	r26, 0x37	; 55
    5000:	9c 91       	ld	r25, X
    5002:	d7 97       	sbiw	r26, 0x37	; 55
    5004:	89 2b       	or	r24, r25
    5006:	80 83       	st	Z, r24
    5008:	52 b9       	out	0x02, r21	; 2
    500a:	d2 96       	adiw	r26, 0x32	; 50
    500c:	ed 91       	ld	r30, X+
    500e:	fc 91       	ld	r31, X
    5010:	d3 97       	sbiw	r26, 0x33	; 51
    5012:	80 81       	ld	r24, Z
    5014:	dc 96       	adiw	r26, 0x3c	; 60
    5016:	9c 91       	ld	r25, X
    5018:	dc 97       	sbiw	r26, 0x3c	; 60
    501a:	89 23       	and	r24, r25
    501c:	80 83       	st	Z, r24
    501e:	d2 96       	adiw	r26, 0x32	; 50
    5020:	ed 91       	ld	r30, X+
    5022:	fc 91       	ld	r31, X
    5024:	d3 97       	sbiw	r26, 0x33	; 51
    5026:	80 81       	ld	r24, Z
    5028:	d8 96       	adiw	r26, 0x38	; 56
    502a:	9c 91       	ld	r25, X
    502c:	d8 97       	sbiw	r26, 0x38	; 56
    502e:	89 2b       	or	r24, r25
    5030:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:383
		writeCmdData8(HX8347G_ROWADDRSTART_LO,y1);
    5032:	d0 96       	adiw	r26, 0x30	; 48
    5034:	ed 91       	ld	r30, X+
    5036:	fc 91       	ld	r31, X
    5038:	d1 97       	sbiw	r26, 0x31	; 49
    503a:	80 81       	ld	r24, Z
    503c:	db 96       	adiw	r26, 0x3b	; 59
    503e:	9c 91       	ld	r25, X
    5040:	db 97       	sbiw	r26, 0x3b	; 59
    5042:	89 23       	and	r24, r25
    5044:	80 83       	st	Z, r24
    5046:	87 e0       	ldi	r24, 0x07	; 7
    5048:	82 b9       	out	0x02, r24	; 2
    504a:	d2 96       	adiw	r26, 0x32	; 50
    504c:	ed 91       	ld	r30, X+
    504e:	fc 91       	ld	r31, X
    5050:	d3 97       	sbiw	r26, 0x33	; 51
    5052:	80 81       	ld	r24, Z
    5054:	dc 96       	adiw	r26, 0x3c	; 60
    5056:	9c 91       	ld	r25, X
    5058:	dc 97       	sbiw	r26, 0x3c	; 60
    505a:	89 23       	and	r24, r25
    505c:	80 83       	st	Z, r24
    505e:	d2 96       	adiw	r26, 0x32	; 50
    5060:	ed 91       	ld	r30, X+
    5062:	fc 91       	ld	r31, X
    5064:	d3 97       	sbiw	r26, 0x33	; 51
    5066:	80 81       	ld	r24, Z
    5068:	d8 96       	adiw	r26, 0x38	; 56
    506a:	9c 91       	ld	r25, X
    506c:	d8 97       	sbiw	r26, 0x38	; 56
    506e:	89 2b       	or	r24, r25
    5070:	80 83       	st	Z, r24
    5072:	d0 96       	adiw	r26, 0x30	; 48
    5074:	ed 91       	ld	r30, X+
    5076:	fc 91       	ld	r31, X
    5078:	d1 97       	sbiw	r26, 0x31	; 49
    507a:	80 81       	ld	r24, Z
    507c:	d7 96       	adiw	r26, 0x37	; 55
    507e:	9c 91       	ld	r25, X
    5080:	d7 97       	sbiw	r26, 0x37	; 55
    5082:	89 2b       	or	r24, r25
    5084:	80 83       	st	Z, r24
    5086:	42 b9       	out	0x02, r20	; 2
    5088:	d2 96       	adiw	r26, 0x32	; 50
    508a:	ed 91       	ld	r30, X+
    508c:	fc 91       	ld	r31, X
    508e:	d3 97       	sbiw	r26, 0x33	; 51
    5090:	80 81       	ld	r24, Z
    5092:	dc 96       	adiw	r26, 0x3c	; 60
    5094:	9c 91       	ld	r25, X
    5096:	dc 97       	sbiw	r26, 0x3c	; 60
    5098:	89 23       	and	r24, r25
    509a:	80 83       	st	Z, r24
    509c:	d2 96       	adiw	r26, 0x32	; 50
    509e:	ed 91       	ld	r30, X+
    50a0:	fc 91       	ld	r31, X
    50a2:	d3 97       	sbiw	r26, 0x33	; 51
    50a4:	80 81       	ld	r24, Z
    50a6:	d8 96       	adiw	r26, 0x38	; 56
    50a8:	9c 91       	ld	r25, X
    50aa:	d8 97       	sbiw	r26, 0x38	; 56
    50ac:	89 2b       	or	r24, r25
    50ae:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:384
		writeCmdData8(HX8347G_COLADDREND_HI,x2>>8);
    50b0:	d0 96       	adiw	r26, 0x30	; 48
    50b2:	ed 91       	ld	r30, X+
    50b4:	fc 91       	ld	r31, X
    50b6:	d1 97       	sbiw	r26, 0x31	; 49
    50b8:	80 81       	ld	r24, Z
    50ba:	db 96       	adiw	r26, 0x3b	; 59
    50bc:	9c 91       	ld	r25, X
    50be:	db 97       	sbiw	r26, 0x3b	; 59
    50c0:	89 23       	and	r24, r25
    50c2:	80 83       	st	Z, r24
    50c4:	84 e0       	ldi	r24, 0x04	; 4
    50c6:	82 b9       	out	0x02, r24	; 2
    50c8:	d2 96       	adiw	r26, 0x32	; 50
    50ca:	ed 91       	ld	r30, X+
    50cc:	fc 91       	ld	r31, X
    50ce:	d3 97       	sbiw	r26, 0x33	; 51
    50d0:	80 81       	ld	r24, Z
    50d2:	dc 96       	adiw	r26, 0x3c	; 60
    50d4:	9c 91       	ld	r25, X
    50d6:	dc 97       	sbiw	r26, 0x3c	; 60
    50d8:	89 23       	and	r24, r25
    50da:	80 83       	st	Z, r24
    50dc:	d2 96       	adiw	r26, 0x32	; 50
    50de:	ed 91       	ld	r30, X+
    50e0:	fc 91       	ld	r31, X
    50e2:	d3 97       	sbiw	r26, 0x33	; 51
    50e4:	80 81       	ld	r24, Z
    50e6:	d8 96       	adiw	r26, 0x38	; 56
    50e8:	9c 91       	ld	r25, X
    50ea:	d8 97       	sbiw	r26, 0x38	; 56
    50ec:	89 2b       	or	r24, r25
    50ee:	80 83       	st	Z, r24
    50f0:	d0 96       	adiw	r26, 0x30	; 48
    50f2:	ed 91       	ld	r30, X+
    50f4:	fc 91       	ld	r31, X
    50f6:	d1 97       	sbiw	r26, 0x31	; 49
    50f8:	80 81       	ld	r24, Z
    50fa:	d7 96       	adiw	r26, 0x37	; 55
    50fc:	9c 91       	ld	r25, X
    50fe:	d7 97       	sbiw	r26, 0x37	; 55
    5100:	89 2b       	or	r24, r25
    5102:	80 83       	st	Z, r24
    5104:	32 b9       	out	0x02, r19	; 2
    5106:	d2 96       	adiw	r26, 0x32	; 50
    5108:	ed 91       	ld	r30, X+
    510a:	fc 91       	ld	r31, X
    510c:	d3 97       	sbiw	r26, 0x33	; 51
    510e:	80 81       	ld	r24, Z
    5110:	dc 96       	adiw	r26, 0x3c	; 60
    5112:	9c 91       	ld	r25, X
    5114:	dc 97       	sbiw	r26, 0x3c	; 60
    5116:	89 23       	and	r24, r25
    5118:	80 83       	st	Z, r24
    511a:	d2 96       	adiw	r26, 0x32	; 50
    511c:	ed 91       	ld	r30, X+
    511e:	fc 91       	ld	r31, X
    5120:	d3 97       	sbiw	r26, 0x33	; 51
    5122:	80 81       	ld	r24, Z
    5124:	d8 96       	adiw	r26, 0x38	; 56
    5126:	9c 91       	ld	r25, X
    5128:	d8 97       	sbiw	r26, 0x38	; 56
    512a:	89 2b       	or	r24, r25
    512c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:385
		writeCmdData8(HX8347G_COLADDREND_LO,x2);
    512e:	d0 96       	adiw	r26, 0x30	; 48
    5130:	ed 91       	ld	r30, X+
    5132:	fc 91       	ld	r31, X
    5134:	d1 97       	sbiw	r26, 0x31	; 49
    5136:	80 81       	ld	r24, Z
    5138:	db 96       	adiw	r26, 0x3b	; 59
    513a:	9c 91       	ld	r25, X
    513c:	db 97       	sbiw	r26, 0x3b	; 59
    513e:	89 23       	and	r24, r25
    5140:	80 83       	st	Z, r24
    5142:	85 e0       	ldi	r24, 0x05	; 5
    5144:	82 b9       	out	0x02, r24	; 2
    5146:	d2 96       	adiw	r26, 0x32	; 50
    5148:	ed 91       	ld	r30, X+
    514a:	fc 91       	ld	r31, X
    514c:	d3 97       	sbiw	r26, 0x33	; 51
    514e:	80 81       	ld	r24, Z
    5150:	dc 96       	adiw	r26, 0x3c	; 60
    5152:	9c 91       	ld	r25, X
    5154:	dc 97       	sbiw	r26, 0x3c	; 60
    5156:	89 23       	and	r24, r25
    5158:	80 83       	st	Z, r24
    515a:	d2 96       	adiw	r26, 0x32	; 50
    515c:	ed 91       	ld	r30, X+
    515e:	fc 91       	ld	r31, X
    5160:	d3 97       	sbiw	r26, 0x33	; 51
    5162:	80 81       	ld	r24, Z
    5164:	d8 96       	adiw	r26, 0x38	; 56
    5166:	9c 91       	ld	r25, X
    5168:	d8 97       	sbiw	r26, 0x38	; 56
    516a:	89 2b       	or	r24, r25
    516c:	80 83       	st	Z, r24
    516e:	d0 96       	adiw	r26, 0x30	; 48
    5170:	ed 91       	ld	r30, X+
    5172:	fc 91       	ld	r31, X
    5174:	d1 97       	sbiw	r26, 0x31	; 49
    5176:	80 81       	ld	r24, Z
    5178:	d7 96       	adiw	r26, 0x37	; 55
    517a:	9c 91       	ld	r25, X
    517c:	d7 97       	sbiw	r26, 0x37	; 55
    517e:	89 2b       	or	r24, r25
    5180:	80 83       	st	Z, r24
    5182:	22 b9       	out	0x02, r18	; 2
    5184:	d2 96       	adiw	r26, 0x32	; 50
    5186:	ed 91       	ld	r30, X+
    5188:	fc 91       	ld	r31, X
    518a:	d3 97       	sbiw	r26, 0x33	; 51
    518c:	80 81       	ld	r24, Z
    518e:	dc 96       	adiw	r26, 0x3c	; 60
    5190:	9c 91       	ld	r25, X
    5192:	dc 97       	sbiw	r26, 0x3c	; 60
    5194:	89 23       	and	r24, r25
    5196:	80 83       	st	Z, r24
    5198:	d2 96       	adiw	r26, 0x32	; 50
    519a:	ed 91       	ld	r30, X+
    519c:	fc 91       	ld	r31, X
    519e:	d3 97       	sbiw	r26, 0x33	; 51
    51a0:	80 81       	ld	r24, Z
    51a2:	d8 96       	adiw	r26, 0x38	; 56
    51a4:	9c 91       	ld	r25, X
    51a6:	d8 97       	sbiw	r26, 0x38	; 56
    51a8:	89 2b       	or	r24, r25
    51aa:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:386
		writeCmdData8(HX8347G_ROWADDREND_HI,y2>>8);
    51ac:	d0 96       	adiw	r26, 0x30	; 48
    51ae:	ed 91       	ld	r30, X+
    51b0:	fc 91       	ld	r31, X
    51b2:	d1 97       	sbiw	r26, 0x31	; 49
    51b4:	80 81       	ld	r24, Z
    51b6:	db 96       	adiw	r26, 0x3b	; 59
    51b8:	9c 91       	ld	r25, X
    51ba:	db 97       	sbiw	r26, 0x3b	; 59
    51bc:	89 23       	and	r24, r25
    51be:	80 83       	st	Z, r24
    51c0:	88 e0       	ldi	r24, 0x08	; 8
    51c2:	82 b9       	out	0x02, r24	; 2
    51c4:	d2 96       	adiw	r26, 0x32	; 50
    51c6:	ed 91       	ld	r30, X+
    51c8:	fc 91       	ld	r31, X
    51ca:	d3 97       	sbiw	r26, 0x33	; 51
    51cc:	80 81       	ld	r24, Z
    51ce:	dc 96       	adiw	r26, 0x3c	; 60
    51d0:	9c 91       	ld	r25, X
    51d2:	dc 97       	sbiw	r26, 0x3c	; 60
    51d4:	89 23       	and	r24, r25
    51d6:	80 83       	st	Z, r24
    51d8:	d2 96       	adiw	r26, 0x32	; 50
    51da:	ed 91       	ld	r30, X+
    51dc:	fc 91       	ld	r31, X
    51de:	d3 97       	sbiw	r26, 0x33	; 51
    51e0:	80 81       	ld	r24, Z
    51e2:	d8 96       	adiw	r26, 0x38	; 56
    51e4:	9c 91       	ld	r25, X
    51e6:	d8 97       	sbiw	r26, 0x38	; 56
    51e8:	89 2b       	or	r24, r25
    51ea:	80 83       	st	Z, r24
    51ec:	d0 96       	adiw	r26, 0x30	; 48
    51ee:	ed 91       	ld	r30, X+
    51f0:	fc 91       	ld	r31, X
    51f2:	d1 97       	sbiw	r26, 0x31	; 49
    51f4:	80 81       	ld	r24, Z
    51f6:	d7 96       	adiw	r26, 0x37	; 55
    51f8:	9c 91       	ld	r25, X
    51fa:	d7 97       	sbiw	r26, 0x37	; 55
    51fc:	89 2b       	or	r24, r25
    51fe:	80 83       	st	Z, r24
    5200:	12 b9       	out	0x02, r17	; 2
    5202:	d2 96       	adiw	r26, 0x32	; 50
    5204:	ed 91       	ld	r30, X+
    5206:	fc 91       	ld	r31, X
    5208:	d3 97       	sbiw	r26, 0x33	; 51
    520a:	80 81       	ld	r24, Z
    520c:	dc 96       	adiw	r26, 0x3c	; 60
    520e:	9c 91       	ld	r25, X
    5210:	dc 97       	sbiw	r26, 0x3c	; 60
    5212:	89 23       	and	r24, r25
    5214:	80 83       	st	Z, r24
    5216:	d2 96       	adiw	r26, 0x32	; 50
    5218:	ed 91       	ld	r30, X+
    521a:	fc 91       	ld	r31, X
    521c:	d3 97       	sbiw	r26, 0x33	; 51
    521e:	80 81       	ld	r24, Z
    5220:	d8 96       	adiw	r26, 0x38	; 56
    5222:	9c 91       	ld	r25, X
    5224:	d8 97       	sbiw	r26, 0x38	; 56
    5226:	89 2b       	or	r24, r25
    5228:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:387
		writeCmdData8(HX8347G_ROWADDREND_LO,y2);
    522a:	d0 96       	adiw	r26, 0x30	; 48
    522c:	ed 91       	ld	r30, X+
    522e:	fc 91       	ld	r31, X
    5230:	d1 97       	sbiw	r26, 0x31	; 49
    5232:	80 81       	ld	r24, Z
    5234:	db 96       	adiw	r26, 0x3b	; 59
    5236:	9c 91       	ld	r25, X
    5238:	db 97       	sbiw	r26, 0x3b	; 59
    523a:	89 23       	and	r24, r25
    523c:	80 83       	st	Z, r24
    523e:	89 e0       	ldi	r24, 0x09	; 9
    5240:	82 b9       	out	0x02, r24	; 2
    5242:	d2 96       	adiw	r26, 0x32	; 50
    5244:	ed 91       	ld	r30, X+
    5246:	fc 91       	ld	r31, X
    5248:	d3 97       	sbiw	r26, 0x33	; 51
    524a:	80 81       	ld	r24, Z
    524c:	dc 96       	adiw	r26, 0x3c	; 60
    524e:	9c 91       	ld	r25, X
    5250:	dc 97       	sbiw	r26, 0x3c	; 60
    5252:	89 23       	and	r24, r25
    5254:	80 83       	st	Z, r24
    5256:	d2 96       	adiw	r26, 0x32	; 50
    5258:	ed 91       	ld	r30, X+
    525a:	fc 91       	ld	r31, X
    525c:	d3 97       	sbiw	r26, 0x33	; 51
    525e:	80 81       	ld	r24, Z
    5260:	d8 96       	adiw	r26, 0x38	; 56
    5262:	9c 91       	ld	r25, X
    5264:	d8 97       	sbiw	r26, 0x38	; 56
    5266:	89 2b       	or	r24, r25
    5268:	80 83       	st	Z, r24
    526a:	d0 96       	adiw	r26, 0x30	; 48
    526c:	ed 91       	ld	r30, X+
    526e:	fc 91       	ld	r31, X
    5270:	d1 97       	sbiw	r26, 0x31	; 49
    5272:	80 81       	ld	r24, Z
    5274:	d7 96       	adiw	r26, 0x37	; 55
    5276:	9c 91       	ld	r25, X
    5278:	d7 97       	sbiw	r26, 0x37	; 55
    527a:	89 2b       	or	r24, r25
    527c:	80 83       	st	Z, r24
    527e:	02 b9       	out	0x02, r16	; 2
    5280:	b9 cd       	rjmp	.-1166   	; 0x4df4 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x610>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:391
	}
	else
	{
		uint8_t x_buf[] = {x1>>8,x1&0xFF,x2>>8,x2&0xFF}; 
    5282:	7d 83       	std	Y+5, r23	; 0x05
    5284:	6e 83       	std	Y+6, r22	; 0x06
    5286:	3f 83       	std	Y+7, r19	; 0x07
    5288:	28 87       	std	Y+8, r18	; 0x08
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:392
		uint8_t y_buf[] = {y1>>8,y1&0xFF,y2>>8,y2&0xFF}; 
    528a:	59 83       	std	Y+1, r21	; 0x01
    528c:	4a 83       	std	Y+2, r20	; 0x02
    528e:	1b 83       	std	Y+3, r17	; 0x03
    5290:	0c 83       	std	Y+4, r16	; 0x04
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:394
	
		Push_Command(XC, x_buf, 4); //set x address
    5292:	f7 01       	movw	r30, r14
    5294:	64 8d       	ldd	r22, Z+28	; 0x1c
    5296:	75 8d       	ldd	r23, Z+29	; 0x1d
    5298:	24 e0       	ldi	r18, 0x04	; 4
    529a:	ae 01       	movw	r20, r28
    529c:	4b 5f       	subi	r20, 0xFB	; 251
    529e:	5f 4f       	sbci	r21, 0xFF	; 255
    52a0:	c7 01       	movw	r24, r14
    52a2:	0e 94 75 23 	call	0x46ea	; 0x46ea <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:395
		Push_Command(YC, y_buf, 4); //set y address
    52a6:	d7 01       	movw	r26, r14
    52a8:	5e 96       	adiw	r26, 0x1e	; 30
    52aa:	6d 91       	ld	r22, X+
    52ac:	7c 91       	ld	r23, X
    52ae:	24 e0       	ldi	r18, 0x04	; 4
    52b0:	ae 01       	movw	r20, r28
    52b2:	4f 5f       	subi	r20, 0xFF	; 255
    52b4:	5f 4f       	sbci	r21, 0xFF	; 255
    52b6:	c7 01       	movw	r24, r14
    52b8:	0e 94 75 23 	call	0x46ea	; 0x46ea <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
    52bc:	ae cd       	rjmp	.-1188   	; 0x4e1a <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x636>

000052be <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]>:
_ZN11LCDWIKI_KBV12Set_RotationEh.constprop.84():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:747
{
	return height;
}

//set clockwise rotation
void LCDWIKI_KBV::Set_Rotation(uint8_t r)
    52be:	0f 93       	push	r16
    52c0:	1f 93       	push	r17
    52c2:	cf 93       	push	r28
    52c4:	df 93       	push	r29
    52c6:	00 d0       	rcall	.+0      	; 0x52c8 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]+0xa>
    52c8:	00 d0       	rcall	.+0      	; 0x52ca <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]+0xc>
    52ca:	cd b7       	in	r28, 0x3d	; 61
    52cc:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:749
{
    rotation = r & 3;           // just perform the operation ourselves on the protected variables
    52ce:	48 2f       	mov	r20, r24
    52d0:	43 70       	andi	r20, 0x03	; 3
    52d2:	50 e0       	ldi	r21, 0x00	; 0
    52d4:	50 93 ce 11 	sts	0x11CE, r21	; 0x8011ce <my_lcd+0x17>
    52d8:	40 93 cd 11 	sts	0x11CD, r20	; 0x8011cd <my_lcd+0x16>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:750
    width = (rotation & 1) ? HEIGHT : WIDTH;
    52dc:	28 2f       	mov	r18, r24
    52de:	21 70       	andi	r18, 0x01	; 1
    52e0:	80 ff       	sbrs	r24, 0
    52e2:	3d c1       	rjmp	.+634    	; 0x555e <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]+0x2a0>
    52e4:	80 91 c7 11 	lds	r24, 0x11C7	; 0x8011c7 <my_lcd+0x10>
    52e8:	90 91 c8 11 	lds	r25, 0x11C8	; 0x8011c8 <my_lcd+0x11>
    52ec:	90 93 ca 11 	sts	0x11CA, r25	; 0x8011ca <my_lcd+0x13>
    52f0:	80 93 c9 11 	sts	0x11C9, r24	; 0x8011c9 <my_lcd+0x12>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:751
    height = (rotation & 1) ? WIDTH : HEIGHT;
    52f4:	80 91 c5 11 	lds	r24, 0x11C5	; 0x8011c5 <my_lcd+0xe>
    52f8:	90 91 c6 11 	lds	r25, 0x11C6	; 0x8011c6 <my_lcd+0xf>
    52fc:	21 11       	cpse	r18, r1
    52fe:	04 c0       	rjmp	.+8      	; 0x5308 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]+0x4a>
    5300:	80 91 c7 11 	lds	r24, 0x11C7	; 0x8011c7 <my_lcd+0x10>
    5304:	90 91 c8 11 	lds	r25, 0x11C8	; 0x8011c8 <my_lcd+0x11>
    5308:	90 93 cc 11 	sts	0x11CC, r25	; 0x8011cc <my_lcd+0x15>
    530c:	80 93 cb 11 	sts	0x11CB, r24	; 0x8011cb <my_lcd+0x14>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:752
	CS_ACTIVE;
    5310:	a0 91 e5 11 	lds	r26, 0x11E5	; 0x8011e5 <my_lcd+0x2e>
    5314:	b0 91 e6 11 	lds	r27, 0x11E6	; 0x8011e6 <my_lcd+0x2f>
    5318:	8c 91       	ld	r24, X
    531a:	90 91 f1 11 	lds	r25, 0x11F1	; 0x8011f1 <my_lcd+0x3a>
    531e:	89 23       	and	r24, r25
    5320:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:753
	if(lcd_driver == ID_932X)
    5322:	40 91 cf 11 	lds	r20, 0x11CF	; 0x8011cf <my_lcd+0x18>
    5326:	50 91 d0 11 	lds	r21, 0x11D0	; 0x8011d0 <my_lcd+0x19>
    532a:	80 91 cd 11 	lds	r24, 0x11CD	; 0x8011cd <my_lcd+0x16>
    532e:	90 91 ce 11 	lds	r25, 0x11CE	; 0x8011ce <my_lcd+0x17>
    5332:	a0 91 e7 11 	lds	r26, 0x11E7	; 0x8011e7 <my_lcd+0x30>
    5336:	b0 91 e8 11 	lds	r27, 0x11E8	; 0x8011e8 <my_lcd+0x31>
    533a:	20 91 f2 11 	lds	r18, 0x11F2	; 0x8011f2 <my_lcd+0x3b>
    533e:	41 15       	cp	r20, r1
    5340:	51 05       	cpc	r21, r1
    5342:	09 f0       	breq	.+2      	; 0x5346 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]+0x88>
    5344:	13 c1       	rjmp	.+550    	; 0x556c <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]+0x2ae>
    5346:	01 97       	sbiw	r24, 0x01	; 1
    5348:	83 30       	cpi	r24, 0x03	; 3
    534a:	91 05       	cpc	r25, r1
    534c:	08 f0       	brcs	.+2      	; 0x5350 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]+0x92>
    534e:	0c c1       	rjmp	.+536    	; 0x5568 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]+0x2aa>
    5350:	88 0f       	add	r24, r24
    5352:	99 1f       	adc	r25, r25
    5354:	fc 01       	movw	r30, r24
    5356:	e0 5b       	subi	r30, 0xB0	; 176
    5358:	fd 4f       	sbci	r31, 0xFD	; 253
    535a:	90 81       	ld	r25, Z
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:771
				break;
		 	case 3 : 
				val = 0x1018;  //270 degree 
				break;
		}
		writeCmdData16(MD, val); 
    535c:	30 91 df 11 	lds	r19, 0x11DF	; 0x8011df <my_lcd+0x28>
    5360:	40 91 e0 11 	lds	r20, 0x11E0	; 0x8011e0 <my_lcd+0x29>
    5364:	8c 91       	ld	r24, X
    5366:	28 23       	and	r18, r24
    5368:	2c 93       	st	X, r18
    536a:	42 b9       	out	0x02, r20	; 2
    536c:	e0 91 e9 11 	lds	r30, 0x11E9	; 0x8011e9 <my_lcd+0x32>
    5370:	f0 91 ea 11 	lds	r31, 0x11EA	; 0x8011ea <my_lcd+0x33>
    5374:	80 81       	ld	r24, Z
    5376:	20 91 f3 11 	lds	r18, 0x11F3	; 0x8011f3 <my_lcd+0x3c>
    537a:	82 23       	and	r24, r18
    537c:	80 83       	st	Z, r24
    537e:	e0 91 e9 11 	lds	r30, 0x11E9	; 0x8011e9 <my_lcd+0x32>
    5382:	f0 91 ea 11 	lds	r31, 0x11EA	; 0x8011ea <my_lcd+0x33>
    5386:	80 81       	ld	r24, Z
    5388:	20 91 ef 11 	lds	r18, 0x11EF	; 0x8011ef <my_lcd+0x38>
    538c:	82 2b       	or	r24, r18
    538e:	80 83       	st	Z, r24
    5390:	32 b9       	out	0x02, r19	; 2
    5392:	e0 91 e9 11 	lds	r30, 0x11E9	; 0x8011e9 <my_lcd+0x32>
    5396:	f0 91 ea 11 	lds	r31, 0x11EA	; 0x8011ea <my_lcd+0x33>
    539a:	80 81       	ld	r24, Z
    539c:	20 91 f3 11 	lds	r18, 0x11F3	; 0x8011f3 <my_lcd+0x3c>
    53a0:	82 23       	and	r24, r18
    53a2:	80 83       	st	Z, r24
    53a4:	e0 91 e9 11 	lds	r30, 0x11E9	; 0x8011e9 <my_lcd+0x32>
    53a8:	f0 91 ea 11 	lds	r31, 0x11EA	; 0x8011ea <my_lcd+0x33>
    53ac:	80 81       	ld	r24, Z
    53ae:	20 91 ef 11 	lds	r18, 0x11EF	; 0x8011ef <my_lcd+0x38>
    53b2:	82 2b       	or	r24, r18
    53b4:	80 83       	st	Z, r24
    53b6:	e0 91 e7 11 	lds	r30, 0x11E7	; 0x8011e7 <my_lcd+0x30>
    53ba:	f0 91 e8 11 	lds	r31, 0x11E8	; 0x8011e8 <my_lcd+0x31>
    53be:	80 81       	ld	r24, Z
    53c0:	20 91 ee 11 	lds	r18, 0x11EE	; 0x8011ee <my_lcd+0x37>
    53c4:	82 2b       	or	r24, r18
    53c6:	80 83       	st	Z, r24
    53c8:	80 e1       	ldi	r24, 0x10	; 16
    53ca:	82 b9       	out	0x02, r24	; 2
    53cc:	e0 91 e9 11 	lds	r30, 0x11E9	; 0x8011e9 <my_lcd+0x32>
    53d0:	f0 91 ea 11 	lds	r31, 0x11EA	; 0x8011ea <my_lcd+0x33>
    53d4:	80 81       	ld	r24, Z
    53d6:	20 91 f3 11 	lds	r18, 0x11F3	; 0x8011f3 <my_lcd+0x3c>
    53da:	82 23       	and	r24, r18
    53dc:	80 83       	st	Z, r24
    53de:	e0 91 e9 11 	lds	r30, 0x11E9	; 0x8011e9 <my_lcd+0x32>
    53e2:	f0 91 ea 11 	lds	r31, 0x11EA	; 0x8011ea <my_lcd+0x33>
    53e6:	80 81       	ld	r24, Z
    53e8:	20 91 ef 11 	lds	r18, 0x11EF	; 0x8011ef <my_lcd+0x38>
    53ec:	82 2b       	or	r24, r18
    53ee:	80 83       	st	Z, r24
    53f0:	92 b9       	out	0x02, r25	; 2
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:872
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY| ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
    53f2:	e0 91 e9 11 	lds	r30, 0x11E9	; 0x8011e9 <my_lcd+0x32>
    53f6:	f0 91 ea 11 	lds	r31, 0x11EA	; 0x8011ea <my_lcd+0x33>
    53fa:	80 81       	ld	r24, Z
    53fc:	90 91 f3 11 	lds	r25, 0x11F3	; 0x8011f3 <my_lcd+0x3c>
    5400:	89 23       	and	r24, r25
    5402:	80 83       	st	Z, r24
    5404:	e0 91 e9 11 	lds	r30, 0x11E9	; 0x8011e9 <my_lcd+0x32>
    5408:	f0 91 ea 11 	lds	r31, 0x11EA	; 0x8011ea <my_lcd+0x33>
    540c:	80 81       	ld	r24, Z
    540e:	90 91 ef 11 	lds	r25, 0x11EF	; 0x8011ef <my_lcd+0x38>
    5412:	89 2b       	or	r24, r25
    5414:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:874
	}
 	Set_Addr_Window(0, 0, width - 1, height - 1);
    5416:	00 91 cb 11 	lds	r16, 0x11CB	; 0x8011cb <my_lcd+0x14>
    541a:	10 91 cc 11 	lds	r17, 0x11CC	; 0x8011cc <my_lcd+0x15>
    541e:	01 50       	subi	r16, 0x01	; 1
    5420:	11 09       	sbc	r17, r1
    5422:	20 91 c9 11 	lds	r18, 0x11C9	; 0x8011c9 <my_lcd+0x12>
    5426:	30 91 ca 11 	lds	r19, 0x11CA	; 0x8011ca <my_lcd+0x13>
    542a:	21 50       	subi	r18, 0x01	; 1
    542c:	31 09       	sbc	r19, r1
    542e:	50 e0       	ldi	r21, 0x00	; 0
    5430:	40 e0       	ldi	r20, 0x00	; 0
    5432:	70 e0       	ldi	r23, 0x00	; 0
    5434:	60 e0       	ldi	r22, 0x00	; 0
    5436:	87 eb       	ldi	r24, 0xB7	; 183
    5438:	91 e1       	ldi	r25, 0x11	; 17
    543a:	0e 94 f2 23 	call	0x47e4	; 0x47e4 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)>
Vert_Scroll():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:704
    if (offset < 0)
    {
        vsp += scrollines;          //keep in unsigned range
    }
    sea = top + scrollines - 1;
	if(lcd_driver == ID_932X)
    543e:	80 91 cf 11 	lds	r24, 0x11CF	; 0x8011cf <my_lcd+0x18>
    5442:	90 91 d0 11 	lds	r25, 0x11D0	; 0x8011d0 <my_lcd+0x19>
    5446:	89 2b       	or	r24, r25
    5448:	09 f0       	breq	.+2      	; 0x544c <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]+0x18e>
    544a:	9e c1       	rjmp	.+828    	; 0x5788 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]+0x4ca>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:706
	{
		writeCmdData8(SC1, (1 << 1) | 0x1);        //!NDL, VLE, REV
    544c:	e0 91 e7 11 	lds	r30, 0x11E7	; 0x8011e7 <my_lcd+0x30>
    5450:	f0 91 e8 11 	lds	r31, 0x11E8	; 0x8011e8 <my_lcd+0x31>
    5454:	80 81       	ld	r24, Z
    5456:	90 91 f2 11 	lds	r25, 0x11F2	; 0x8011f2 <my_lcd+0x3b>
    545a:	89 23       	and	r24, r25
    545c:	80 83       	st	Z, r24
    545e:	80 91 db 11 	lds	r24, 0x11DB	; 0x8011db <my_lcd+0x24>
    5462:	82 b9       	out	0x02, r24	; 2
    5464:	e0 91 e9 11 	lds	r30, 0x11E9	; 0x8011e9 <my_lcd+0x32>
    5468:	f0 91 ea 11 	lds	r31, 0x11EA	; 0x8011ea <my_lcd+0x33>
    546c:	80 81       	ld	r24, Z
    546e:	90 91 f3 11 	lds	r25, 0x11F3	; 0x8011f3 <my_lcd+0x3c>
    5472:	89 23       	and	r24, r25
    5474:	80 83       	st	Z, r24
    5476:	e0 91 e9 11 	lds	r30, 0x11E9	; 0x8011e9 <my_lcd+0x32>
    547a:	f0 91 ea 11 	lds	r31, 0x11EA	; 0x8011ea <my_lcd+0x33>
    547e:	80 81       	ld	r24, Z
    5480:	90 91 ef 11 	lds	r25, 0x11EF	; 0x8011ef <my_lcd+0x38>
    5484:	89 2b       	or	r24, r25
    5486:	80 83       	st	Z, r24
    5488:	e0 91 e7 11 	lds	r30, 0x11E7	; 0x8011e7 <my_lcd+0x30>
    548c:	f0 91 e8 11 	lds	r31, 0x11E8	; 0x8011e8 <my_lcd+0x31>
    5490:	80 81       	ld	r24, Z
    5492:	90 91 ee 11 	lds	r25, 0x11EE	; 0x8011ee <my_lcd+0x37>
    5496:	89 2b       	or	r24, r25
    5498:	80 83       	st	Z, r24
    549a:	83 e0       	ldi	r24, 0x03	; 3
    549c:	82 b9       	out	0x02, r24	; 2
    549e:	e0 91 e9 11 	lds	r30, 0x11E9	; 0x8011e9 <my_lcd+0x32>
    54a2:	f0 91 ea 11 	lds	r31, 0x11EA	; 0x8011ea <my_lcd+0x33>
    54a6:	80 81       	ld	r24, Z
    54a8:	90 91 f3 11 	lds	r25, 0x11F3	; 0x8011f3 <my_lcd+0x3c>
    54ac:	89 23       	and	r24, r25
    54ae:	80 83       	st	Z, r24
    54b0:	e0 91 e9 11 	lds	r30, 0x11E9	; 0x8011e9 <my_lcd+0x32>
    54b4:	f0 91 ea 11 	lds	r31, 0x11EA	; 0x8011ea <my_lcd+0x33>
    54b8:	80 81       	ld	r24, Z
    54ba:	90 91 ef 11 	lds	r25, 0x11EF	; 0x8011ef <my_lcd+0x38>
    54be:	89 2b       	or	r24, r25
    54c0:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:707
        writeCmdData8(SC2, vsp);        //VL#
    54c2:	e0 91 e7 11 	lds	r30, 0x11E7	; 0x8011e7 <my_lcd+0x30>
    54c6:	f0 91 e8 11 	lds	r31, 0x11E8	; 0x8011e8 <my_lcd+0x31>
    54ca:	80 81       	ld	r24, Z
    54cc:	90 91 f2 11 	lds	r25, 0x11F2	; 0x8011f2 <my_lcd+0x3b>
    54d0:	89 23       	and	r24, r25
    54d2:	80 83       	st	Z, r24
    54d4:	80 91 dd 11 	lds	r24, 0x11DD	; 0x8011dd <my_lcd+0x26>
    54d8:	82 b9       	out	0x02, r24	; 2
    54da:	e0 91 e9 11 	lds	r30, 0x11E9	; 0x8011e9 <my_lcd+0x32>
    54de:	f0 91 ea 11 	lds	r31, 0x11EA	; 0x8011ea <my_lcd+0x33>
    54e2:	80 81       	ld	r24, Z
    54e4:	90 91 f3 11 	lds	r25, 0x11F3	; 0x8011f3 <my_lcd+0x3c>
    54e8:	89 23       	and	r24, r25
    54ea:	80 83       	st	Z, r24
    54ec:	e0 91 e9 11 	lds	r30, 0x11E9	; 0x8011e9 <my_lcd+0x32>
    54f0:	f0 91 ea 11 	lds	r31, 0x11EA	; 0x8011ea <my_lcd+0x33>
    54f4:	80 81       	ld	r24, Z
    54f6:	90 91 ef 11 	lds	r25, 0x11EF	; 0x8011ef <my_lcd+0x38>
    54fa:	89 2b       	or	r24, r25
    54fc:	80 83       	st	Z, r24
    54fe:	e0 91 e7 11 	lds	r30, 0x11E7	; 0x8011e7 <my_lcd+0x30>
    5502:	f0 91 e8 11 	lds	r31, 0x11E8	; 0x8011e8 <my_lcd+0x31>
    5506:	80 81       	ld	r24, Z
    5508:	90 91 ee 11 	lds	r25, 0x11EE	; 0x8011ee <my_lcd+0x37>
    550c:	89 2b       	or	r24, r25
    550e:	80 83       	st	Z, r24
    5510:	12 b8       	out	0x02, r1	; 2
    5512:	e0 91 e9 11 	lds	r30, 0x11E9	; 0x8011e9 <my_lcd+0x32>
    5516:	f0 91 ea 11 	lds	r31, 0x11EA	; 0x8011ea <my_lcd+0x33>
    551a:	80 81       	ld	r24, Z
    551c:	90 91 f3 11 	lds	r25, 0x11F3	; 0x8011f3 <my_lcd+0x3c>
    5520:	89 23       	and	r24, r25
    5522:	80 83       	st	Z, r24
    5524:	e0 91 e9 11 	lds	r30, 0x11E9	; 0x8011e9 <my_lcd+0x32>
    5528:	f0 91 ea 11 	lds	r31, 0x11EA	; 0x8011ea <my_lcd+0x33>
    552c:	80 81       	ld	r24, Z
    552e:	90 91 ef 11 	lds	r25, 0x11EF	; 0x8011ef <my_lcd+0x38>
    5532:	89 2b       	or	r24, r25
    5534:	80 83       	st	Z, r24
_ZN11LCDWIKI_KBV12Set_RotationEh.constprop.84():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:876
		 }
		 writeCmdData8(MD, val); 
	}
 	Set_Addr_Window(0, 0, width - 1, height - 1);
	Vert_Scroll(0, HEIGHT, 0);
	CS_IDLE;
    5536:	e0 91 e5 11 	lds	r30, 0x11E5	; 0x8011e5 <my_lcd+0x2e>
    553a:	f0 91 e6 11 	lds	r31, 0x11E6	; 0x8011e6 <my_lcd+0x2f>
    553e:	80 81       	ld	r24, Z
    5540:	90 91 ed 11 	lds	r25, 0x11ED	; 0x8011ed <my_lcd+0x36>
    5544:	89 2b       	or	r24, r25
    5546:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:877
}
    5548:	26 96       	adiw	r28, 0x06	; 6
    554a:	0f b6       	in	r0, 0x3f	; 63
    554c:	f8 94       	cli
    554e:	de bf       	out	0x3e, r29	; 62
    5550:	0f be       	out	0x3f, r0	; 63
    5552:	cd bf       	out	0x3d, r28	; 61
    5554:	df 91       	pop	r29
    5556:	cf 91       	pop	r28
    5558:	1f 91       	pop	r17
    555a:	0f 91       	pop	r16
    555c:	08 95       	ret
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:750

//set clockwise rotation
void LCDWIKI_KBV::Set_Rotation(uint8_t r)
{
    rotation = r & 3;           // just perform the operation ourselves on the protected variables
    width = (rotation & 1) ? HEIGHT : WIDTH;
    555e:	80 91 c5 11 	lds	r24, 0x11C5	; 0x8011c5 <my_lcd+0xe>
    5562:	90 91 c6 11 	lds	r25, 0x11C6	; 0x8011c6 <my_lcd+0xf>
    5566:	c2 ce       	rjmp	.-636    	; 0x52ec <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]+0x2e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:756
    height = (rotation & 1) ? WIDTH : HEIGHT;
	CS_ACTIVE;
	if(lcd_driver == ID_932X)
	{
		uint16_t val;
		switch(rotation) 
    5568:	90 e3       	ldi	r25, 0x30	; 48
    556a:	f8 ce       	rjmp	.-528    	; 0x535c <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]+0x9e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:773
				val = 0x1018;  //270 degree 
				break;
		}
		writeCmdData16(MD, val); 
	}
	else if(lcd_driver == ID_7735)
    556c:	46 30       	cpi	r20, 0x06	; 6
    556e:	51 05       	cpc	r21, r1
    5570:	99 f5       	brne	.+102    	; 0x55d8 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]+0x31a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:782
		{
			case 0: 
				val = 0xD0; //0 degree 
				break;
		 	case 1: 
				val = 0xA0; //90 degree 
    5572:	f0 ea       	ldi	r31, 0xA0	; 160
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:776
		writeCmdData16(MD, val); 
	}
	else if(lcd_driver == ID_7735)
	{
		uint8_t val;
		switch(rotation)
    5574:	81 30       	cpi	r24, 0x01	; 1
    5576:	91 05       	cpc	r25, r1
    5578:	51 f0       	breq	.+20     	; 0x558e <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]+0x2d0>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:779
		{
			case 0: 
				val = 0xD0; //0 degree 
    557a:	f0 ed       	ldi	r31, 0xD0	; 208
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:776
		writeCmdData16(MD, val); 
	}
	else if(lcd_driver == ID_7735)
	{
		uint8_t val;
		switch(rotation)
    557c:	81 30       	cpi	r24, 0x01	; 1
    557e:	91 05       	cpc	r25, r1
    5580:	30 f0       	brcs	.+12     	; 0x558e <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]+0x2d0>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:785
				break;
		 	case 1: 
				val = 0xA0; //90 degree 
				break;
		 	case 2: 
				val = 0x00; //180 degree 
    5582:	f0 e0       	ldi	r31, 0x00	; 0
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:776
		writeCmdData16(MD, val); 
	}
	else if(lcd_driver == ID_7735)
	{
		uint8_t val;
		switch(rotation)
    5584:	82 30       	cpi	r24, 0x02	; 2
    5586:	91 05       	cpc	r25, r1
    5588:	11 f0       	breq	.+4      	; 0x558e <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]+0x2d0>
    558a:	03 97       	sbiw	r24, 0x03	; 3
    558c:	19 f1       	breq	.+70     	; 0x55d4 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]+0x316>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:791
				break;
		 	case 3: 
				val = 0x60; //270 degree
				break;			
		}
		writeCmdData8(MD, val);
    558e:	8c 91       	ld	r24, X
    5590:	28 23       	and	r18, r24
    5592:	2c 93       	st	X, r18
    5594:	80 91 df 11 	lds	r24, 0x11DF	; 0x8011df <my_lcd+0x28>
    5598:	82 b9       	out	0x02, r24	; 2
    559a:	a0 91 e9 11 	lds	r26, 0x11E9	; 0x8011e9 <my_lcd+0x32>
    559e:	b0 91 ea 11 	lds	r27, 0x11EA	; 0x8011ea <my_lcd+0x33>
    55a2:	8c 91       	ld	r24, X
    55a4:	90 91 f3 11 	lds	r25, 0x11F3	; 0x8011f3 <my_lcd+0x3c>
    55a8:	89 23       	and	r24, r25
    55aa:	8c 93       	st	X, r24
    55ac:	a0 91 e9 11 	lds	r26, 0x11E9	; 0x8011e9 <my_lcd+0x32>
    55b0:	b0 91 ea 11 	lds	r27, 0x11EA	; 0x8011ea <my_lcd+0x33>
    55b4:	8c 91       	ld	r24, X
    55b6:	90 91 ef 11 	lds	r25, 0x11EF	; 0x8011ef <my_lcd+0x38>
    55ba:	89 2b       	or	r24, r25
    55bc:	8c 93       	st	X, r24
    55be:	a0 91 e7 11 	lds	r26, 0x11E7	; 0x8011e7 <my_lcd+0x30>
    55c2:	b0 91 e8 11 	lds	r27, 0x11E8	; 0x8011e8 <my_lcd+0x31>
    55c6:	8c 91       	ld	r24, X
    55c8:	90 91 ee 11 	lds	r25, 0x11EE	; 0x8011ee <my_lcd+0x37>
    55cc:	89 2b       	or	r24, r25
    55ce:	8c 93       	st	X, r24
    55d0:	f2 b9       	out	0x02, r31	; 2
    55d2:	0f cf       	rjmp	.-482    	; 0x53f2 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:788
				break;
		 	case 2: 
				val = 0x00; //180 degree 
				break;
		 	case 3: 
				val = 0x60; //270 degree
    55d4:	f0 e6       	ldi	r31, 0x60	; 96
    55d6:	db cf       	rjmp	.-74     	; 0x558e <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]+0x2d0>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:793
				break;			
		}
		writeCmdData8(MD, val);
	}
	else if(lcd_driver == ID_9481)
    55d8:	48 30       	cpi	r20, 0x08	; 8
    55da:	51 05       	cpc	r21, r1
    55dc:	99 f5       	brne	.+102    	; 0x5644 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]+0x386>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:802
		{
		   	case 0:
		     	val = 0x09; //0 degree PAO=0,CAO=0,P/CO=0,VO=0,RGBO=1,DO=0,HF=0,VF=1
		     	break;
		   	case 1:
		     	val = 0x2B; //90 degree PAO=0,CAO=0,P/CO=1,VO=0,RGBO=1,DO=0,HF=1,VF=1
    55de:	eb e2       	ldi	r30, 0x2B	; 43
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:796
		writeCmdData8(MD, val);
	}
	else if(lcd_driver == ID_9481)
	{
		uint8_t val;
		switch (rotation) 
    55e0:	81 30       	cpi	r24, 0x01	; 1
    55e2:	91 05       	cpc	r25, r1
    55e4:	51 f0       	breq	.+20     	; 0x55fa <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]+0x33c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:799
		{
		   	case 0:
		     	val = 0x09; //0 degree PAO=0,CAO=0,P/CO=0,VO=0,RGBO=1,DO=0,HF=0,VF=1
    55e6:	e9 e0       	ldi	r30, 0x09	; 9
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:796
		writeCmdData8(MD, val);
	}
	else if(lcd_driver == ID_9481)
	{
		uint8_t val;
		switch (rotation) 
    55e8:	81 30       	cpi	r24, 0x01	; 1
    55ea:	91 05       	cpc	r25, r1
    55ec:	30 f0       	brcs	.+12     	; 0x55fa <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]+0x33c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:805
		     	break;
		   	case 1:
		     	val = 0x2B; //90 degree PAO=0,CAO=0,P/CO=1,VO=0,RGBO=1,DO=0,HF=1,VF=1
		     	break;
		 	case 2:
		    	val = 0x0A; //180 degree PAO=0,CAO=0,P/CO=0,VO=0,RGBO=1,DO=0,HF=1,VF=0
    55ee:	ea e0       	ldi	r30, 0x0A	; 10
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:796
		writeCmdData8(MD, val);
	}
	else if(lcd_driver == ID_9481)
	{
		uint8_t val;
		switch (rotation) 
    55f0:	82 30       	cpi	r24, 0x02	; 2
    55f2:	91 05       	cpc	r25, r1
    55f4:	11 f0       	breq	.+4      	; 0x55fa <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]+0x33c>
    55f6:	03 97       	sbiw	r24, 0x03	; 3
    55f8:	19 f1       	breq	.+70     	; 0x5640 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]+0x382>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:811
		    	break;
		   	case 3:
		     	val = 0x28; //270 degree PAO=0,CAO=0,P/CO=1,VO=0,RGBO=1,DO=0,HF=0,VF=0
		     	break;
		 }
		 writeCmdData8(MD, val); 
    55fa:	8c 91       	ld	r24, X
    55fc:	28 23       	and	r18, r24
    55fe:	2c 93       	st	X, r18
    5600:	80 91 df 11 	lds	r24, 0x11DF	; 0x8011df <my_lcd+0x28>
    5604:	82 b9       	out	0x02, r24	; 2
    5606:	a0 91 e9 11 	lds	r26, 0x11E9	; 0x8011e9 <my_lcd+0x32>
    560a:	b0 91 ea 11 	lds	r27, 0x11EA	; 0x8011ea <my_lcd+0x33>
    560e:	8c 91       	ld	r24, X
    5610:	90 91 f3 11 	lds	r25, 0x11F3	; 0x8011f3 <my_lcd+0x3c>
    5614:	89 23       	and	r24, r25
    5616:	8c 93       	st	X, r24
    5618:	a0 91 e9 11 	lds	r26, 0x11E9	; 0x8011e9 <my_lcd+0x32>
    561c:	b0 91 ea 11 	lds	r27, 0x11EA	; 0x8011ea <my_lcd+0x33>
    5620:	8c 91       	ld	r24, X
    5622:	90 91 ef 11 	lds	r25, 0x11EF	; 0x8011ef <my_lcd+0x38>
    5626:	89 2b       	or	r24, r25
    5628:	8c 93       	st	X, r24
    562a:	a0 91 e7 11 	lds	r26, 0x11E7	; 0x8011e7 <my_lcd+0x30>
    562e:	b0 91 e8 11 	lds	r27, 0x11E8	; 0x8011e8 <my_lcd+0x31>
    5632:	8c 91       	ld	r24, X
    5634:	90 91 ee 11 	lds	r25, 0x11EE	; 0x8011ee <my_lcd+0x37>
    5638:	89 2b       	or	r24, r25
    563a:	8c 93       	st	X, r24
    563c:	e2 b9       	out	0x02, r30	; 2
    563e:	d9 ce       	rjmp	.-590    	; 0x53f2 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:808
		     	break;
		 	case 2:
		    	val = 0x0A; //180 degree PAO=0,CAO=0,P/CO=0,VO=0,RGBO=1,DO=0,HF=1,VF=0
		    	break;
		   	case 3:
		     	val = 0x28; //270 degree PAO=0,CAO=0,P/CO=1,VO=0,RGBO=1,DO=0,HF=0,VF=0
    5640:	e8 e2       	ldi	r30, 0x28	; 40
    5642:	db cf       	rjmp	.-74     	; 0x55fa <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]+0x33c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:814
		     	break;
		 }
		 writeCmdData8(MD, val); 

	}
	else if(lcd_driver == ID_9486)
    5644:	45 30       	cpi	r20, 0x05	; 5
    5646:	51 05       	cpc	r21, r1
    5648:	a1 f5       	brne	.+104    	; 0x56b2 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]+0x3f4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:817
	{
		uint8_t val;
		switch (rotation) 
    564a:	81 30       	cpi	r24, 0x01	; 1
    564c:	91 05       	cpc	r25, r1
    564e:	49 f1       	breq	.+82     	; 0x56a2 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]+0x3e4>
    5650:	70 f1       	brcs	.+92     	; 0x56ae <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]+0x3f0>
    5652:	82 30       	cpi	r24, 0x02	; 2
    5654:	91 05       	cpc	r25, r1
    5656:	39 f1       	breq	.+78     	; 0x56a6 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]+0x3e8>
    5658:	03 97       	sbiw	r24, 0x03	; 3
    565a:	39 f1       	breq	.+78     	; 0x56aa <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]+0x3ec>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:832
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
    565c:	8c 91       	ld	r24, X
    565e:	28 23       	and	r18, r24
    5660:	2c 93       	st	X, r18
    5662:	80 91 df 11 	lds	r24, 0x11DF	; 0x8011df <my_lcd+0x28>
    5666:	82 b9       	out	0x02, r24	; 2
    5668:	e0 91 e9 11 	lds	r30, 0x11E9	; 0x8011e9 <my_lcd+0x32>
    566c:	f0 91 ea 11 	lds	r31, 0x11EA	; 0x8011ea <my_lcd+0x33>
    5670:	80 81       	ld	r24, Z
    5672:	90 91 f3 11 	lds	r25, 0x11F3	; 0x8011f3 <my_lcd+0x3c>
    5676:	89 23       	and	r24, r25
    5678:	80 83       	st	Z, r24
    567a:	e0 91 e9 11 	lds	r30, 0x11E9	; 0x8011e9 <my_lcd+0x32>
    567e:	f0 91 ea 11 	lds	r31, 0x11EA	; 0x8011ea <my_lcd+0x33>
    5682:	80 81       	ld	r24, Z
    5684:	90 91 ef 11 	lds	r25, 0x11EF	; 0x8011ef <my_lcd+0x38>
    5688:	89 2b       	or	r24, r25
    568a:	80 83       	st	Z, r24
    568c:	e0 91 e7 11 	lds	r30, 0x11E7	; 0x8011e7 <my_lcd+0x30>
    5690:	f0 91 e8 11 	lds	r31, 0x11E8	; 0x8011e8 <my_lcd+0x31>
    5694:	80 81       	ld	r24, Z
    5696:	90 91 ee 11 	lds	r25, 0x11EE	; 0x8011ee <my_lcd+0x37>
    569a:	89 2b       	or	r24, r25
    569c:	80 83       	st	Z, r24
    569e:	72 b9       	out	0x02, r23	; 2
    56a0:	a8 ce       	rjmp	.-688    	; 0x53f2 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:823
		{
		   	case 0:
		     	val = ILI9341_MADCTL_BGR; //0 degree 
		     	break;
		   	case 1:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MV | ILI9341_MADCTL_ML | ILI9341_MADCTL_BGR ; //90 degree 
    56a2:	78 e7       	ldi	r23, 0x78	; 120
    56a4:	db cf       	rjmp	.-74     	; 0x565c <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]+0x39e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:826
		     	break;
		 	case 2:
		    	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_MX |ILI9341_MADCTL_BGR; //180 degree 
    56a6:	78 ec       	ldi	r23, 0xC8	; 200
    56a8:	d9 cf       	rjmp	.-78     	; 0x565c <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]+0x39e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:829
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
    56aa:	78 ea       	ldi	r23, 0xA8	; 168
    56ac:	d7 cf       	rjmp	.-82     	; 0x565c <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]+0x39e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:820
	{
		uint8_t val;
		switch (rotation) 
		{
		   	case 0:
		     	val = ILI9341_MADCTL_BGR; //0 degree 
    56ae:	78 e0       	ldi	r23, 0x08	; 8
    56b0:	d5 cf       	rjmp	.-86     	; 0x565c <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]+0x39e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:834
		     	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
	}
	else if(lcd_driver == ID_9488)
    56b2:	47 30       	cpi	r20, 0x07	; 7
    56b4:	51 05       	cpc	r21, r1
    56b6:	a1 f5       	brne	.+104    	; 0x5720 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]+0x462>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:837
	{
		uint8_t val;
		switch (rotation) 
    56b8:	81 30       	cpi	r24, 0x01	; 1
    56ba:	91 05       	cpc	r25, r1
    56bc:	49 f1       	breq	.+82     	; 0x5710 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]+0x452>
    56be:	70 f1       	brcs	.+92     	; 0x571c <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]+0x45e>
    56c0:	82 30       	cpi	r24, 0x02	; 2
    56c2:	91 05       	cpc	r25, r1
    56c4:	39 f1       	breq	.+78     	; 0x5714 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]+0x456>
    56c6:	03 97       	sbiw	r24, 0x03	; 3
    56c8:	39 f1       	breq	.+78     	; 0x5718 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]+0x45a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:852
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
    56ca:	8c 91       	ld	r24, X
    56cc:	28 23       	and	r18, r24
    56ce:	2c 93       	st	X, r18
    56d0:	80 91 df 11 	lds	r24, 0x11DF	; 0x8011df <my_lcd+0x28>
    56d4:	82 b9       	out	0x02, r24	; 2
    56d6:	e0 91 e9 11 	lds	r30, 0x11E9	; 0x8011e9 <my_lcd+0x32>
    56da:	f0 91 ea 11 	lds	r31, 0x11EA	; 0x8011ea <my_lcd+0x33>
    56de:	80 81       	ld	r24, Z
    56e0:	90 91 f3 11 	lds	r25, 0x11F3	; 0x8011f3 <my_lcd+0x3c>
    56e4:	89 23       	and	r24, r25
    56e6:	80 83       	st	Z, r24
    56e8:	e0 91 e9 11 	lds	r30, 0x11E9	; 0x8011e9 <my_lcd+0x32>
    56ec:	f0 91 ea 11 	lds	r31, 0x11EA	; 0x8011ea <my_lcd+0x33>
    56f0:	80 81       	ld	r24, Z
    56f2:	90 91 ef 11 	lds	r25, 0x11EF	; 0x8011ef <my_lcd+0x38>
    56f6:	89 2b       	or	r24, r25
    56f8:	80 83       	st	Z, r24
    56fa:	e0 91 e7 11 	lds	r30, 0x11E7	; 0x8011e7 <my_lcd+0x30>
    56fe:	f0 91 e8 11 	lds	r31, 0x11E8	; 0x8011e8 <my_lcd+0x31>
    5702:	80 81       	ld	r24, Z
    5704:	90 91 ee 11 	lds	r25, 0x11EE	; 0x8011ee <my_lcd+0x37>
    5708:	89 2b       	or	r24, r25
    570a:	80 83       	st	Z, r24
    570c:	62 b9       	out	0x02, r22	; 2
    570e:	71 ce       	rjmp	.-798    	; 0x53f2 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:843
		{			
			case 0:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR ; //0 degree 
		     	break;
		   	case 1:
		     	val = ILI9341_MADCTL_MV | ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR ; //90 degree 
    5710:	68 ea       	ldi	r22, 0xA8	; 168
    5712:	db cf       	rjmp	.-74     	; 0x56ca <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]+0x40c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:846
		     	break;
		 	case 2:
		    	val = ILI9341_MADCTL_ML | ILI9341_MADCTL_BGR; //180 degree 
    5714:	68 e1       	ldi	r22, 0x18	; 24
    5716:	d9 cf       	rjmp	.-78     	; 0x56ca <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]+0x40c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:849
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
    5718:	68 e7       	ldi	r22, 0x78	; 120
    571a:	d7 cf       	rjmp	.-82     	; 0x56ca <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]+0x40c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:840
	{
		uint8_t val;
		switch (rotation) 
		{			
			case 0:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR ; //0 degree 
    571c:	68 ec       	ldi	r22, 0xC8	; 200
    571e:	d5 cf       	rjmp	.-86     	; 0x56ca <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]+0x40c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:857
		 writeCmdData8(MD, val); 
	}
	else
	{
		uint8_t val;
		switch (rotation) 
    5720:	81 30       	cpi	r24, 0x01	; 1
    5722:	91 05       	cpc	r25, r1
    5724:	49 f1       	breq	.+82     	; 0x5778 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]+0x4ba>
    5726:	70 f1       	brcs	.+92     	; 0x5784 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]+0x4c6>
    5728:	82 30       	cpi	r24, 0x02	; 2
    572a:	91 05       	cpc	r25, r1
    572c:	39 f1       	breq	.+78     	; 0x577c <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]+0x4be>
    572e:	03 97       	sbiw	r24, 0x03	; 3
    5730:	39 f1       	breq	.+78     	; 0x5780 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]+0x4c2>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:872
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY| ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
    5732:	8c 91       	ld	r24, X
    5734:	28 23       	and	r18, r24
    5736:	2c 93       	st	X, r18
    5738:	80 91 df 11 	lds	r24, 0x11DF	; 0x8011df <my_lcd+0x28>
    573c:	82 b9       	out	0x02, r24	; 2
    573e:	e0 91 e9 11 	lds	r30, 0x11E9	; 0x8011e9 <my_lcd+0x32>
    5742:	f0 91 ea 11 	lds	r31, 0x11EA	; 0x8011ea <my_lcd+0x33>
    5746:	80 81       	ld	r24, Z
    5748:	90 91 f3 11 	lds	r25, 0x11F3	; 0x8011f3 <my_lcd+0x3c>
    574c:	89 23       	and	r24, r25
    574e:	80 83       	st	Z, r24
    5750:	e0 91 e9 11 	lds	r30, 0x11E9	; 0x8011e9 <my_lcd+0x32>
    5754:	f0 91 ea 11 	lds	r31, 0x11EA	; 0x8011ea <my_lcd+0x33>
    5758:	80 81       	ld	r24, Z
    575a:	90 91 ef 11 	lds	r25, 0x11EF	; 0x8011ef <my_lcd+0x38>
    575e:	89 2b       	or	r24, r25
    5760:	80 83       	st	Z, r24
    5762:	e0 91 e7 11 	lds	r30, 0x11E7	; 0x8011e7 <my_lcd+0x30>
    5766:	f0 91 e8 11 	lds	r31, 0x11E8	; 0x8011e8 <my_lcd+0x31>
    576a:	80 81       	ld	r24, Z
    576c:	90 91 ee 11 	lds	r25, 0x11EE	; 0x8011ee <my_lcd+0x37>
    5770:	89 2b       	or	r24, r25
    5772:	80 83       	st	Z, r24
    5774:	32 b9       	out	0x02, r19	; 2
    5776:	3d ce       	rjmp	.-902    	; 0x53f2 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:863
		{
		   	case 0:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR; //0 degree 
		     	break;
		   	case 1:
		     	val = ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //90 degree 
    5778:	38 e2       	ldi	r19, 0x28	; 40
    577a:	db cf       	rjmp	.-74     	; 0x5732 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]+0x474>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:866
		     	break;
		 	case 2:
		    	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_ML |ILI9341_MADCTL_BGR; //180 degree 
    577c:	38 e9       	ldi	r19, 0x98	; 152
    577e:	d9 cf       	rjmp	.-78     	; 0x5732 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]+0x474>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:869
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY| ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
    5780:	38 ef       	ldi	r19, 0xF8	; 248
    5782:	d7 cf       	rjmp	.-82     	; 0x5732 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]+0x474>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:860
	{
		uint8_t val;
		switch (rotation) 
		{
		   	case 0:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR; //0 degree 
    5784:	38 e4       	ldi	r19, 0x48	; 72
    5786:	d5 cf       	rjmp	.-86     	; 0x5732 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]+0x474>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:875
		     	break;
		 }
		 writeCmdData8(MD, val); 
	}
 	Set_Addr_Window(0, 0, width - 1, height - 1);
	Vert_Scroll(0, HEIGHT, 0);
    5788:	80 91 c7 11 	lds	r24, 0x11C7	; 0x8011c7 <my_lcd+0x10>
    578c:	90 91 c8 11 	lds	r25, 0x11C8	; 0x8011c8 <my_lcd+0x11>
Vert_Scroll():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:712
        writeCmdData8(SC2, vsp);        //VL#
	}
	else
	{
  		uint8_t d[6];           // for multi-byte parameters
  		d[0] = top >> 8;        //TFA
    5790:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:713
  		d[1] = top;
    5792:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:714
  		d[2] = scrollines >> 8; //VSA
    5794:	9b 83       	std	Y+3, r25	; 0x03
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:715
  		d[3] = scrollines;
    5796:	8c 83       	std	Y+4, r24	; 0x04
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:716
  		d[4] = bfa >> 8;        //BFA
    5798:	1d 82       	std	Y+5, r1	; 0x05
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:717
  		d[5] = bfa;
    579a:	1e 82       	std	Y+6, r1	; 0x06
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:718
		Push_Command(SC1, d, 6);
    579c:	60 91 db 11 	lds	r22, 0x11DB	; 0x8011db <my_lcd+0x24>
    57a0:	70 91 dc 11 	lds	r23, 0x11DC	; 0x8011dc <my_lcd+0x25>
    57a4:	26 e0       	ldi	r18, 0x06	; 6
    57a6:	ae 01       	movw	r20, r28
    57a8:	4f 5f       	subi	r20, 0xFF	; 255
    57aa:	5f 4f       	sbci	r21, 0xFF	; 255
    57ac:	87 eb       	ldi	r24, 0xB7	; 183
    57ae:	91 e1       	ldi	r25, 0x11	; 17
    57b0:	0e 94 75 23 	call	0x46ea	; 0x46ea <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:719
		d[0] = vsp >> 8;        //VSP
    57b4:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:720
  		d[1] = vsp;
    57b6:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:721
		Push_Command(SC2, d, 2);
    57b8:	60 91 dd 11 	lds	r22, 0x11DD	; 0x8011dd <my_lcd+0x26>
    57bc:	70 91 de 11 	lds	r23, 0x11DE	; 0x8011de <my_lcd+0x27>
    57c0:	22 e0       	ldi	r18, 0x02	; 2
    57c2:	ae 01       	movw	r20, r28
    57c4:	4f 5f       	subi	r20, 0xFF	; 255
    57c6:	5f 4f       	sbci	r21, 0xFF	; 255
    57c8:	87 eb       	ldi	r24, 0xB7	; 183
    57ca:	91 e1       	ldi	r25, 0x11	; 17
    57cc:	0e 94 75 23 	call	0x46ea	; 0x46ea <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:722
		if(lcd_driver == ID_7575)
    57d0:	80 91 cf 11 	lds	r24, 0x11CF	; 0x8011cf <my_lcd+0x18>
    57d4:	90 91 d0 11 	lds	r25, 0x11D0	; 0x8011d0 <my_lcd+0x19>
    57d8:	01 97       	sbiw	r24, 0x01	; 1
    57da:	61 f4       	brne	.+24     	; 0x57f4 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]+0x536>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:724
		{
			d[0] = (offset != 0) ? 0x08:0;
    57dc:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:725
			Push_Command(0x01, d, 1);
    57de:	21 e0       	ldi	r18, 0x01	; 1
    57e0:	ae 01       	movw	r20, r28
    57e2:	4f 5f       	subi	r20, 0xFF	; 255
    57e4:	5f 4f       	sbci	r21, 0xFF	; 255
    57e6:	61 e0       	ldi	r22, 0x01	; 1
    57e8:	70 e0       	ldi	r23, 0x00	; 0
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:729
		}
		else if (offset == 0) 
		{
			Push_Command(0x13, NULL, 0);
    57ea:	87 eb       	ldi	r24, 0xB7	; 183
    57ec:	91 e1       	ldi	r25, 0x11	; 17
    57ee:	0e 94 75 23 	call	0x46ea	; 0x46ea <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
    57f2:	a1 ce       	rjmp	.-702    	; 0x5536 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]+0x278>
    57f4:	20 e0       	ldi	r18, 0x00	; 0
    57f6:	50 e0       	ldi	r21, 0x00	; 0
    57f8:	40 e0       	ldi	r20, 0x00	; 0
    57fa:	63 e1       	ldi	r22, 0x13	; 19
    57fc:	70 e0       	ldi	r23, 0x00	; 0
    57fe:	f5 cf       	rjmp	.-22     	; 0x57ea <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]+0x52c>

00005800 <thermostat_ring_update_pid_parameters(unsigned char)>:
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:219




void thermostat_ring_update_pid_parameters(uint8_t idx)
{
    5800:	2f 92       	push	r2
    5802:	3f 92       	push	r3
    5804:	4f 92       	push	r4
    5806:	5f 92       	push	r5
    5808:	6f 92       	push	r6
    580a:	7f 92       	push	r7
    580c:	8f 92       	push	r8
    580e:	9f 92       	push	r9
    5810:	af 92       	push	r10
    5812:	bf 92       	push	r11
    5814:	cf 92       	push	r12
    5816:	df 92       	push	r13
    5818:	ef 92       	push	r14
    581a:	ff 92       	push	r15
    581c:	0f 93       	push	r16
    581e:	1f 93       	push	r17
    5820:	cf 93       	push	r28
    5822:	df 93       	push	r29
    5824:	00 d0       	rcall	.+0      	; 0x5826 <thermostat_ring_update_pid_parameters(unsigned char)+0x26>
    5826:	00 d0       	rcall	.+0      	; 0x5828 <thermostat_ring_update_pid_parameters(unsigned char)+0x28>
    5828:	cd b7       	in	r28, 0x3d	; 61
    582a:	de b7       	in	r29, 0x3e	; 62
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:220
  array_pids[idx]->SetTunings(PID_p[idx], PID_i[idx], PID_d[idx]);
    582c:	28 2e       	mov	r2, r24
    582e:	31 2c       	mov	r3, r1
    5830:	c1 01       	movw	r24, r2
    5832:	88 0f       	add	r24, r24
    5834:	99 1f       	adc	r25, r25
    5836:	e0 91 0e 10 	lds	r30, 0x100E	; 0x80100e <array_pids>
    583a:	f0 91 0f 10 	lds	r31, 0x100F	; 0x80100f <array_pids+0x1>
    583e:	e8 0f       	add	r30, r24
    5840:	f9 1f       	adc	r31, r25
    5842:	80 81       	ld	r24, Z
    5844:	91 81       	ldd	r25, Z+1	; 0x01
    5846:	9e 83       	std	Y+6, r25	; 0x06
    5848:	8d 83       	std	Y+5, r24	; 0x05
    584a:	81 01       	movw	r16, r2
    584c:	00 0f       	add	r16, r16
    584e:	11 1f       	adc	r17, r17
    5850:	00 0f       	add	r16, r16
    5852:	11 1f       	adc	r17, r17
    5854:	f8 01       	movw	r30, r16
    5856:	e0 5b       	subi	r30, 0xB0	; 176
    5858:	f5 4f       	sbci	r31, 0xF5	; 245
    585a:	40 80       	ld	r4, Z
    585c:	51 80       	ldd	r5, Z+1	; 0x01
    585e:	62 80       	ldd	r6, Z+2	; 0x02
    5860:	73 80       	ldd	r7, Z+3	; 0x03
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:104
 * it's called automatically from the constructor, but tunings can also
 * be adjusted on the fly during normal operation
 ******************************************************************************/
void PID::SetTunings(double Kp, double Ki, double Kd, int POn)
{
   if (Kp<0 || Ki<0 || Kd<0) return;
    5862:	20 e0       	ldi	r18, 0x00	; 0
    5864:	30 e0       	ldi	r19, 0x00	; 0
    5866:	a9 01       	movw	r20, r18
    5868:	c3 01       	movw	r24, r6
    586a:	b2 01       	movw	r22, r4
    586c:	0e 94 bf 88 	call	0x1117e	; 0x1117e <__cmpsf2>
    5870:	87 fd       	sbrc	r24, 7
    5872:	97 c0       	rjmp	.+302    	; 0x59a2 <thermostat_ring_update_pid_parameters(unsigned char)+0x1a2>
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:220
    5874:	f8 01       	movw	r30, r16
    5876:	e4 57       	subi	r30, 0x74	; 116
    5878:	f5 4f       	sbci	r31, 0xF5	; 245
    587a:	80 80       	ld	r8, Z
    587c:	91 80       	ldd	r9, Z+1	; 0x01
    587e:	a2 80       	ldd	r10, Z+2	; 0x02
    5880:	b3 80       	ldd	r11, Z+3	; 0x03
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:104
    5882:	20 e0       	ldi	r18, 0x00	; 0
    5884:	30 e0       	ldi	r19, 0x00	; 0
    5886:	a9 01       	movw	r20, r18
    5888:	c5 01       	movw	r24, r10
    588a:	b4 01       	movw	r22, r8
    588c:	0e 94 bf 88 	call	0x1117e	; 0x1117e <__cmpsf2>
    5890:	87 fd       	sbrc	r24, 7
    5892:	87 c0       	rjmp	.+270    	; 0x59a2 <thermostat_ring_update_pid_parameters(unsigned char)+0x1a2>
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:220
    5894:	f8 01       	movw	r30, r16
    5896:	e8 53       	subi	r30, 0x38	; 56
    5898:	f5 4f       	sbci	r31, 0xF5	; 245
    589a:	c0 80       	ld	r12, Z
    589c:	d1 80       	ldd	r13, Z+1	; 0x01
    589e:	e2 80       	ldd	r14, Z+2	; 0x02
    58a0:	f3 80       	ldd	r15, Z+3	; 0x03
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:104
    58a2:	20 e0       	ldi	r18, 0x00	; 0
    58a4:	30 e0       	ldi	r19, 0x00	; 0
    58a6:	a9 01       	movw	r20, r18
    58a8:	c7 01       	movw	r24, r14
    58aa:	b6 01       	movw	r22, r12
    58ac:	0e 94 bf 88 	call	0x1117e	; 0x1117e <__cmpsf2>
    58b0:	87 fd       	sbrc	r24, 7
    58b2:	77 c0       	rjmp	.+238    	; 0x59a2 <thermostat_ring_update_pid_parameters(unsigned char)+0x1a2>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:107

   pOn = POn;
   pOnE = POn == P_ON_E;
    58b4:	81 e0       	ldi	r24, 0x01	; 1
    58b6:	ed 81       	ldd	r30, Y+5	; 0x05
    58b8:	fe 81       	ldd	r31, Y+6	; 0x06
    58ba:	22 8d       	ldd	r18, Z+26	; 0x1a
    58bc:	33 8d       	ldd	r19, Z+27	; 0x1b
    58be:	21 30       	cpi	r18, 0x01	; 1
    58c0:	31 05       	cpc	r19, r1
    58c2:	09 f0       	breq	.+2      	; 0x58c6 <thermostat_ring_update_pid_parameters(unsigned char)+0xc6>
    58c4:	80 e0       	ldi	r24, 0x00	; 0
    58c6:	ed 81       	ldd	r30, Y+5	; 0x05
    58c8:	fe 81       	ldd	r31, Y+6	; 0x06
    58ca:	83 af       	std	Z+59, r24	; 0x3b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:109

   dispKp = Kp; dispKi = Ki; dispKd = Kd;
    58cc:	40 82       	st	Z, r4
    58ce:	51 82       	std	Z+1, r5	; 0x01
    58d0:	62 82       	std	Z+2, r6	; 0x02
    58d2:	73 82       	std	Z+3, r7	; 0x03
    58d4:	84 82       	std	Z+4, r8	; 0x04
    58d6:	95 82       	std	Z+5, r9	; 0x05
    58d8:	a6 82       	std	Z+6, r10	; 0x06
    58da:	b7 82       	std	Z+7, r11	; 0x07
    58dc:	c0 86       	std	Z+8, r12	; 0x08
    58de:	d1 86       	std	Z+9, r13	; 0x09
    58e0:	e2 86       	std	Z+10, r14	; 0x0a
    58e2:	f3 86       	std	Z+11, r15	; 0x0b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:111

   double SampleTimeInSec = ((double)SampleTime)/1000;
    58e4:	66 a5       	ldd	r22, Z+46	; 0x2e
    58e6:	77 a5       	ldd	r23, Z+47	; 0x2f
    58e8:	80 a9       	ldd	r24, Z+48	; 0x30
    58ea:	91 a9       	ldd	r25, Z+49	; 0x31
    58ec:	0e 94 c4 88 	call	0x11188	; 0x11188 <__floatunsisf>
    58f0:	20 e0       	ldi	r18, 0x00	; 0
    58f2:	30 e0       	ldi	r19, 0x00	; 0
    58f4:	4a e7       	ldi	r20, 0x7A	; 122
    58f6:	54 e4       	ldi	r21, 0x44	; 68
    58f8:	0e 94 f9 8a 	call	0x115f2	; 0x115f2 <__divsf3>
    58fc:	69 83       	std	Y+1, r22	; 0x01
    58fe:	7a 83       	std	Y+2, r23	; 0x02
    5900:	8b 83       	std	Y+3, r24	; 0x03
    5902:	9c 83       	std	Y+4, r25	; 0x04
/home/saric/Arduino/libraries/PID/PID_v1.cpp:112
   kp = Kp;
    5904:	ed 81       	ldd	r30, Y+5	; 0x05
    5906:	fe 81       	ldd	r31, Y+6	; 0x06
    5908:	44 86       	std	Z+12, r4	; 0x0c
    590a:	55 86       	std	Z+13, r5	; 0x0d
    590c:	66 86       	std	Z+14, r6	; 0x0e
    590e:	77 86       	std	Z+15, r7	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:113
   ki = Ki * SampleTimeInSec;
    5910:	9b 01       	movw	r18, r22
    5912:	ac 01       	movw	r20, r24
    5914:	c5 01       	movw	r24, r10
    5916:	b4 01       	movw	r22, r8
    5918:	0e 94 25 89 	call	0x1124a	; 0x1124a <__mulsf3>
    591c:	4b 01       	movw	r8, r22
    591e:	5c 01       	movw	r10, r24
    5920:	ed 81       	ldd	r30, Y+5	; 0x05
    5922:	fe 81       	ldd	r31, Y+6	; 0x06
    5924:	80 8a       	std	Z+16, r8	; 0x10
    5926:	91 8a       	std	Z+17, r9	; 0x11
    5928:	a2 8a       	std	Z+18, r10	; 0x12
    592a:	b3 8a       	std	Z+19, r11	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:114
   kd = Kd / SampleTimeInSec;
    592c:	29 81       	ldd	r18, Y+1	; 0x01
    592e:	3a 81       	ldd	r19, Y+2	; 0x02
    5930:	4b 81       	ldd	r20, Y+3	; 0x03
    5932:	5c 81       	ldd	r21, Y+4	; 0x04
    5934:	c7 01       	movw	r24, r14
    5936:	b6 01       	movw	r22, r12
    5938:	0e 94 f9 8a 	call	0x115f2	; 0x115f2 <__divsf3>
    593c:	6b 01       	movw	r12, r22
    593e:	7c 01       	movw	r14, r24
    5940:	ed 81       	ldd	r30, Y+5	; 0x05
    5942:	fe 81       	ldd	r31, Y+6	; 0x06
    5944:	c4 8a       	std	Z+20, r12	; 0x14
    5946:	d5 8a       	std	Z+21, r13	; 0x15
    5948:	e6 8a       	std	Z+22, r14	; 0x16
    594a:	f7 8a       	std	Z+23, r15	; 0x17
/home/saric/Arduino/libraries/PID/PID_v1.cpp:116

  if(controllerDirection == REVERSE)
    594c:	80 8d       	ldd	r24, Z+24	; 0x18
    594e:	91 8d       	ldd	r25, Z+25	; 0x19
    5950:	01 97       	sbiw	r24, 0x01	; 1
    5952:	39 f5       	brne	.+78     	; 0x59a2 <thermostat_ring_update_pid_parameters(unsigned char)+0x1a2>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:118
   {
      kp = (0 - kp);
    5954:	a3 01       	movw	r20, r6
    5956:	92 01       	movw	r18, r4
    5958:	60 e0       	ldi	r22, 0x00	; 0
    595a:	70 e0       	ldi	r23, 0x00	; 0
    595c:	cb 01       	movw	r24, r22
    595e:	0e 94 8c 8a 	call	0x11518	; 0x11518 <__subsf3>
    5962:	ed 81       	ldd	r30, Y+5	; 0x05
    5964:	fe 81       	ldd	r31, Y+6	; 0x06
    5966:	64 87       	std	Z+12, r22	; 0x0c
    5968:	75 87       	std	Z+13, r23	; 0x0d
    596a:	86 87       	std	Z+14, r24	; 0x0e
    596c:	97 87       	std	Z+15, r25	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:119
      ki = (0 - ki);
    596e:	a5 01       	movw	r20, r10
    5970:	94 01       	movw	r18, r8
    5972:	60 e0       	ldi	r22, 0x00	; 0
    5974:	70 e0       	ldi	r23, 0x00	; 0
    5976:	cb 01       	movw	r24, r22
    5978:	0e 94 8c 8a 	call	0x11518	; 0x11518 <__subsf3>
    597c:	ed 81       	ldd	r30, Y+5	; 0x05
    597e:	fe 81       	ldd	r31, Y+6	; 0x06
    5980:	60 8b       	std	Z+16, r22	; 0x10
    5982:	71 8b       	std	Z+17, r23	; 0x11
    5984:	82 8b       	std	Z+18, r24	; 0x12
    5986:	93 8b       	std	Z+19, r25	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:120
      kd = (0 - kd);
    5988:	a7 01       	movw	r20, r14
    598a:	96 01       	movw	r18, r12
    598c:	60 e0       	ldi	r22, 0x00	; 0
    598e:	70 e0       	ldi	r23, 0x00	; 0
    5990:	cb 01       	movw	r24, r22
    5992:	0e 94 8c 8a 	call	0x11518	; 0x11518 <__subsf3>
    5996:	ed 81       	ldd	r30, Y+5	; 0x05
    5998:	fe 81       	ldd	r31, Y+6	; 0x06
    599a:	64 8b       	std	Z+20, r22	; 0x14
    599c:	75 8b       	std	Z+21, r23	; 0x15
    599e:	86 8b       	std	Z+22, r24	; 0x16
    59a0:	97 8b       	std	Z+23, r25	; 0x17
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:221
  array_pids[idx]->SetSampleTime(PID_time[idx]);
    59a2:	f1 01       	movw	r30, r2
    59a4:	ec 5f       	subi	r30, 0xFC	; 252
    59a6:	f4 4f       	sbci	r31, 0xF4	; 244
    59a8:	10 81       	ld	r17, Z
    59aa:	61 2f       	mov	r22, r17
    59ac:	70 e0       	ldi	r23, 0x00	; 0
SetSampleTime():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:136
/* SetSampleTime(...) *********************************************************
 * sets the period, in Milliseconds, at which the calculation is performed
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
   if (NewSampleTime > 0)
    59ae:	61 15       	cp	r22, r1
    59b0:	71 05       	cpc	r23, r1
    59b2:	f1 f1       	breq	.+124    	; 0x5a30 <thermostat_ring_update_pid_parameters(unsigned char)+0x230>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:138
   {
      double ratio  = (double)NewSampleTime
    59b4:	07 2e       	mov	r0, r23
    59b6:	00 0c       	add	r0, r0
    59b8:	88 0b       	sbc	r24, r24
    59ba:	99 0b       	sbc	r25, r25
    59bc:	0e 94 c6 88 	call	0x1118c	; 0x1118c <__floatsisf>
    59c0:	6b 01       	movw	r12, r22
    59c2:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:139
                      / (double)SampleTime;
    59c4:	ed 81       	ldd	r30, Y+5	; 0x05
    59c6:	fe 81       	ldd	r31, Y+6	; 0x06
    59c8:	66 a5       	ldd	r22, Z+46	; 0x2e
    59ca:	77 a5       	ldd	r23, Z+47	; 0x2f
    59cc:	80 a9       	ldd	r24, Z+48	; 0x30
    59ce:	91 a9       	ldd	r25, Z+49	; 0x31
    59d0:	0e 94 c4 88 	call	0x11188	; 0x11188 <__floatunsisf>
    59d4:	9b 01       	movw	r18, r22
    59d6:	ac 01       	movw	r20, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:138
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
   if (NewSampleTime > 0)
   {
      double ratio  = (double)NewSampleTime
    59d8:	c7 01       	movw	r24, r14
    59da:	b6 01       	movw	r22, r12
    59dc:	0e 94 f9 8a 	call	0x115f2	; 0x115f2 <__divsf3>
    59e0:	6b 01       	movw	r12, r22
    59e2:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:140
                      / (double)SampleTime;
      ki *= ratio;
    59e4:	ac 01       	movw	r20, r24
    59e6:	9b 01       	movw	r18, r22
    59e8:	ed 81       	ldd	r30, Y+5	; 0x05
    59ea:	fe 81       	ldd	r31, Y+6	; 0x06
    59ec:	60 89       	ldd	r22, Z+16	; 0x10
    59ee:	71 89       	ldd	r23, Z+17	; 0x11
    59f0:	82 89       	ldd	r24, Z+18	; 0x12
    59f2:	93 89       	ldd	r25, Z+19	; 0x13
    59f4:	0e 94 25 89 	call	0x1124a	; 0x1124a <__mulsf3>
    59f8:	ed 81       	ldd	r30, Y+5	; 0x05
    59fa:	fe 81       	ldd	r31, Y+6	; 0x06
    59fc:	60 8b       	std	Z+16, r22	; 0x10
    59fe:	71 8b       	std	Z+17, r23	; 0x11
    5a00:	82 8b       	std	Z+18, r24	; 0x12
    5a02:	93 8b       	std	Z+19, r25	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:141
      kd /= ratio;
    5a04:	a7 01       	movw	r20, r14
    5a06:	96 01       	movw	r18, r12
    5a08:	64 89       	ldd	r22, Z+20	; 0x14
    5a0a:	75 89       	ldd	r23, Z+21	; 0x15
    5a0c:	86 89       	ldd	r24, Z+22	; 0x16
    5a0e:	97 89       	ldd	r25, Z+23	; 0x17
    5a10:	0e 94 f9 8a 	call	0x115f2	; 0x115f2 <__divsf3>
    5a14:	ed 81       	ldd	r30, Y+5	; 0x05
    5a16:	fe 81       	ldd	r31, Y+6	; 0x06
    5a18:	64 8b       	std	Z+20, r22	; 0x14
    5a1a:	75 8b       	std	Z+21, r23	; 0x15
    5a1c:	86 8b       	std	Z+22, r24	; 0x16
    5a1e:	97 8b       	std	Z+23, r25	; 0x17
/home/saric/Arduino/libraries/PID/PID_v1.cpp:142
      SampleTime = (unsigned long)NewSampleTime;
    5a20:	81 2f       	mov	r24, r17
    5a22:	90 e0       	ldi	r25, 0x00	; 0
    5a24:	b0 e0       	ldi	r27, 0x00	; 0
    5a26:	a0 e0       	ldi	r26, 0x00	; 0
    5a28:	86 a7       	std	Z+46, r24	; 0x2e
    5a2a:	97 a7       	std	Z+47, r25	; 0x2f
    5a2c:	a0 ab       	std	Z+48, r26	; 0x30
    5a2e:	b1 ab       	std	Z+49, r27	; 0x31
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:222
}
    5a30:	26 96       	adiw	r28, 0x06	; 6
    5a32:	0f b6       	in	r0, 0x3f	; 63
    5a34:	f8 94       	cli
    5a36:	de bf       	out	0x3e, r29	; 62
    5a38:	0f be       	out	0x3f, r0	; 63
    5a3a:	cd bf       	out	0x3d, r28	; 61
    5a3c:	df 91       	pop	r29
    5a3e:	cf 91       	pop	r28
    5a40:	1f 91       	pop	r17
    5a42:	0f 91       	pop	r16
    5a44:	ff 90       	pop	r15
    5a46:	ef 90       	pop	r14
    5a48:	df 90       	pop	r13
    5a4a:	cf 90       	pop	r12
    5a4c:	bf 90       	pop	r11
    5a4e:	af 90       	pop	r10
    5a50:	9f 90       	pop	r9
    5a52:	8f 90       	pop	r8
    5a54:	7f 90       	pop	r7
    5a56:	6f 90       	pop	r6
    5a58:	5f 90       	pop	r5
    5a5a:	4f 90       	pop	r4
    5a5c:	3f 90       	pop	r3
    5a5e:	2f 90       	pop	r2
    5a60:	08 95       	ret

00005a62 <tds_compare_rom(unsigned char*, unsigned char*)>:
_Z15tds_compare_romPhS_():
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:150
  }
}

/// funkce pro porovnani rom
bool tds_compare_rom(uint8_t *rom1, uint8_t *rom2)
{
    5a62:	fb 01       	movw	r30, r22
    5a64:	9c 01       	movw	r18, r24
    5a66:	28 5f       	subi	r18, 0xF8	; 248
    5a68:	3f 4f       	sbci	r19, 0xFF	; 255
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:153
  bool ret = True;
  for (uint8_t r = 0; r < 8; r++)
    if (rom1[r] != rom2[r])
    5a6a:	dc 01       	movw	r26, r24
    5a6c:	5d 91       	ld	r21, X+
    5a6e:	cd 01       	movw	r24, r26
    5a70:	41 91       	ld	r20, Z+
    5a72:	54 13       	cpse	r21, r20
    5a74:	05 c0       	rjmp	.+10     	; 0x5a80 <tds_compare_rom(unsigned char*, unsigned char*)+0x1e>
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:152

/// funkce pro porovnani rom
bool tds_compare_rom(uint8_t *rom1, uint8_t *rom2)
{
  bool ret = True;
  for (uint8_t r = 0; r < 8; r++)
    5a76:	a2 17       	cp	r26, r18
    5a78:	b3 07       	cpc	r27, r19
    5a7a:	b9 f7       	brne	.-18     	; 0x5a6a <tds_compare_rom(unsigned char*, unsigned char*)+0x8>
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:151
}

/// funkce pro porovnani rom
bool tds_compare_rom(uint8_t *rom1, uint8_t *rom2)
{
  bool ret = True;
    5a7c:	81 e0       	ldi	r24, 0x01	; 1
    5a7e:	08 95       	ret
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:155
  for (uint8_t r = 0; r < 8; r++)
    if (rom1[r] != rom2[r])
    {
      ret = False;
    5a80:	80 e0       	ldi	r24, 0x00	; 0
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:159
      break;
    }
  return ret;
}
    5a82:	08 95       	ret

00005a84 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE9isBetweenEccc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:265
    }
    return DeserializationError::Ok;
  }

  static inline bool isBetween(char c, char min, char max) {
    return min <= c && c <= max;
    5a84:	80 33       	cpi	r24, 0x30	; 48
    5a86:	9c f0       	brlt	.+38     	; 0x5aae <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x2a>
    5a88:	8a 33       	cpi	r24, 0x3A	; 58
    5a8a:	24 f0       	brlt	.+8      	; 0x5a94 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x10>
    5a8c:	8f 35       	cpi	r24, 0x5F	; 95
    5a8e:	24 f0       	brlt	.+8      	; 0x5a98 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x14>
    5a90:	8b 37       	cpi	r24, 0x7B	; 123
    5a92:	24 f4       	brge	.+8      	; 0x5a9c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x18>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE22canBeInNonQuotedStringEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:270
  }

  static inline bool canBeInNonQuotedString(char c) {
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
    5a94:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:271
  }
    5a96:	08 95       	ret
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE9isBetweenEccc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:265
    }
    return DeserializationError::Ok;
  }

  static inline bool isBetween(char c, char min, char max) {
    return min <= c && c <= max;
    5a98:	81 34       	cpi	r24, 0x41	; 65
    5a9a:	4c f0       	brlt	.+18     	; 0x5aae <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x2a>
    5a9c:	8b 35       	cpi	r24, 0x5B	; 91
    5a9e:	d4 f3       	brlt	.-12     	; 0x5a94 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x10>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE22canBeInNonQuotedStringEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:270
  }

  static inline bool canBeInNonQuotedString(char c) {
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
    5aa0:	93 ed       	ldi	r25, 0xD3	; 211
    5aa2:	98 0f       	add	r25, r24
    5aa4:	81 e0       	ldi	r24, 0x01	; 1
    5aa6:	92 30       	cpi	r25, 0x02	; 2
    5aa8:	b0 f3       	brcs	.-20     	; 0x5a96 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x12>
    5aaa:	80 e0       	ldi	r24, 0x00	; 0
    5aac:	08 95       	ret
    5aae:	8b 32       	cpi	r24, 0x2B	; 43
    5ab0:	b9 f7       	brne	.-18     	; 0x5aa0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x1c>
    5ab2:	f0 cf       	rjmp	.-32     	; 0x5a94 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x10>

00005ab4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE7currentEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:47
  }

 private:
  JsonDeserializer &operator=(const JsonDeserializer &);  // non-copiable

  char current() {
    5ab4:	fc 01       	movw	r30, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:48
    if (!_loaded) {
    5ab6:	80 85       	ldd	r24, Z+8	; 0x08
    5ab8:	81 11       	cpse	r24, r1
    5aba:	0a c0       	rjmp	.+20     	; 0x5ad0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()+0x1c>
_ZN11ArduinoJson9Internals23UnsafeCharPointerReaderIcE4readEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/./CharPointerReader.hpp:19
 public:
  explicit UnsafeCharPointerReader(const TChar* ptr)
      : _ptr(ptr ? ptr : reinterpret_cast<const TChar*>("")) {}

  char read() {
    return static_cast<char>(*_ptr++);
    5abc:	a2 81       	ldd	r26, Z+2	; 0x02
    5abe:	b3 81       	ldd	r27, Z+3	; 0x03
    5ac0:	cd 01       	movw	r24, r26
    5ac2:	01 96       	adiw	r24, 0x01	; 1
    5ac4:	93 83       	std	Z+3, r25	; 0x03
    5ac6:	82 83       	std	Z+2, r24	; 0x02
    5ac8:	8c 91       	ld	r24, X
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE7currentEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:52
      if (_reader.ended())
        _current = 0;
      else
        _current = _reader.read();
    5aca:	87 83       	std	Z+7, r24	; 0x07
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:53
      _loaded = true;
    5acc:	81 e0       	ldi	r24, 0x01	; 1
    5ace:	80 87       	std	Z+8, r24	; 0x08
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:56
    }
    return _current;
  }
    5ad0:	87 81       	ldd	r24, Z+7	; 0x07
    5ad2:	08 95       	ret

00005ad4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:182
    if (err) return err;
    variant.set(value);
    return DeserializationError::Ok;
  }

  DeserializationError parseQuotedString(const char **result) {
    5ad4:	df 92       	push	r13
    5ad6:	ef 92       	push	r14
    5ad8:	ff 92       	push	r15
    5ada:	0f 93       	push	r16
    5adc:	1f 93       	push	r17
    5ade:	cf 93       	push	r28
    5ae0:	df 93       	push	r29
    5ae2:	ec 01       	movw	r28, r24
    5ae4:	7b 01       	movw	r14, r22
_ZN11ArduinoJson9Internals11StringMoverIcE6StringC2EPPc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:15
template <typename TChar>
class StringMover {
 public:
  class String {
   public:
    String(TChar** ptr) : _writePtr(ptr), _startPtr(*ptr) {}
    5ae6:	0c 81       	ldd	r16, Y+4	; 0x04
    5ae8:	1d 81       	ldd	r17, Y+5	; 0x05
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:186
    typename remove_reference<TStringStorage>::type::String str =
        _stringStorage.startString();

    char stopChar = current();
    5aea:	0e 94 5a 2d 	call	0x5ab4	; 0x5ab4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    5aee:	d8 2e       	mov	r13, r24
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    5af0:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:190

    char stopChar = current();

    move();
    for (;;) {
      char c = current();
    5af2:	ce 01       	movw	r24, r28
    5af4:	0e 94 5a 2d 	call	0x5ab4	; 0x5ab4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    5af8:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:192

    move();
    for (;;) {
      char c = current();
      move();
      if (c == stopChar) break;
    5afa:	d8 16       	cp	r13, r24
    5afc:	89 f1       	breq	.+98     	; 0x5b60 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x8c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:194

      if (c == '\0') return DeserializationError::IncompleteInput;
    5afe:	81 11       	cpse	r24, r1
    5b00:	0a c0       	rjmp	.+20     	; 0x5b16 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x42>
    5b02:	81 e0       	ldi	r24, 0x01	; 1
    5b04:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:212
    }

    *result = str.c_str();
    if (*result == NULL) return DeserializationError::NoMemory;
    return DeserializationError::Ok;
  }
    5b06:	df 91       	pop	r29
    5b08:	cf 91       	pop	r28
    5b0a:	1f 91       	pop	r17
    5b0c:	0f 91       	pop	r16
    5b0e:	ff 90       	pop	r15
    5b10:	ef 90       	pop	r14
    5b12:	df 90       	pop	r13
    5b14:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:196
      move();
      if (c == stopChar) break;

      if (c == '\0') return DeserializationError::IncompleteInput;

      if (c == '\\') {
    5b16:	8c 35       	cpi	r24, 0x5C	; 92
    5b18:	d1 f4       	brne	.+52     	; 0x5b4e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x7a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:197
        c = current();
    5b1a:	ce 01       	movw	r24, r28
    5b1c:	0e 94 5a 2d 	call	0x5ab4	; 0x5ab4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:198
        if (c == '\0') return DeserializationError::IncompleteInput;
    5b20:	88 23       	and	r24, r24
    5b22:	79 f3       	breq	.-34     	; 0x5b02 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x2e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:199
        if (c == 'u') return DeserializationError::NotSupported;
    5b24:	85 37       	cpi	r24, 0x75	; 117
    5b26:	19 f4       	brne	.+6      	; 0x5b2e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x5a>
    5b28:	84 e0       	ldi	r24, 0x04	; 4
    5b2a:	90 e0       	ldi	r25, 0x00	; 0
    5b2c:	ec cf       	rjmp	.-40     	; 0x5b06 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:23
    return p[0];
  }

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
    const char *p = escapeTable(true);
    5b2e:	e8 ee       	ldi	r30, 0xE8	; 232
    5b30:	f2 e0       	ldi	r31, 0x02	; 2
unescapeChar():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:25
    for (;;) {
      if (p[0] == '\0') return c;
    5b32:	90 81       	ld	r25, Z
    5b34:	99 23       	and	r25, r25
    5b36:	51 f0       	breq	.+20     	; 0x5b4c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x78>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:26
      if (p[0] == c) return p[1];
    5b38:	89 13       	cpse	r24, r25
    5b3a:	06 c0       	rjmp	.+12     	; 0x5b48 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x74>
    5b3c:	81 81       	ldd	r24, Z+1	; 0x01
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:202
        // replace char
        c = EscapeSequence::unescapeChar(c);
        if (c == '\0') return DeserializationError::InvalidInput;
    5b3e:	81 11       	cpse	r24, r1
    5b40:	05 c0       	rjmp	.+10     	; 0x5b4c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x78>
    5b42:	82 e0       	ldi	r24, 0x02	; 2
    5b44:	90 e0       	ldi	r25, 0x00	; 0
    5b46:	df cf       	rjmp	.-66     	; 0x5b06 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>
unescapeChar():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:27
      p += 2;
    5b48:	32 96       	adiw	r30, 0x02	; 2
    5b4a:	f3 cf       	rjmp	.-26     	; 0x5b32 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x5e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    5b4c:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals11StringMoverIcE6String6appendEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:18

    void append(char c) {
      *(*_writePtr)++ = TChar(c);
    5b4e:	ec 81       	ldd	r30, Y+4	; 0x04
    5b50:	fd 81       	ldd	r31, Y+5	; 0x05
    5b52:	9f 01       	movw	r18, r30
    5b54:	2f 5f       	subi	r18, 0xFF	; 255
    5b56:	3f 4f       	sbci	r19, 0xFF	; 255
    5b58:	3d 83       	std	Y+5, r19	; 0x05
    5b5a:	2c 83       	std	Y+4, r18	; 0x04
    5b5c:	80 83       	st	Z, r24
    5b5e:	c9 cf       	rjmp	.-110    	; 0x5af2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x1e>
c_str():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:22
    }

    const char* c_str() const {
      *(*_writePtr)++ = 0;
    5b60:	ec 81       	ldd	r30, Y+4	; 0x04
    5b62:	fd 81       	ldd	r31, Y+5	; 0x05
    5b64:	cf 01       	movw	r24, r30
    5b66:	01 96       	adiw	r24, 0x01	; 1
    5b68:	9d 83       	std	Y+5, r25	; 0x05
    5b6a:	8c 83       	std	Y+4, r24	; 0x04
    5b6c:	10 82       	st	Z, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:209
      }

      str.append(c);
    }

    *result = str.c_str();
    5b6e:	f7 01       	movw	r30, r14
    5b70:	11 83       	std	Z+1, r17	; 0x01
    5b72:	00 83       	st	Z, r16
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:210
    if (*result == NULL) return DeserializationError::NoMemory;
    5b74:	83 e0       	ldi	r24, 0x03	; 3
    5b76:	90 e0       	ldi	r25, 0x00	; 0
    5b78:	01 2b       	or	r16, r17
    5b7a:	29 f2       	breq	.-118    	; 0x5b06 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:211
    return DeserializationError::Ok;
    5b7c:	90 e0       	ldi	r25, 0x00	; 0
    5b7e:	80 e0       	ldi	r24, 0x00	; 0
    5b80:	c2 cf       	rjmp	.-124    	; 0x5b06 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>

00005b82 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:277

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
  }

  DeserializationError skipSpacesAndComments() {
    5b82:	1f 93       	push	r17
    5b84:	cf 93       	push	r28
    5b86:	df 93       	push	r29
    5b88:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:279
    for (;;) {
      switch (current()) {
    5b8a:	ce 01       	movw	r24, r28
    5b8c:	0e 94 5a 2d 	call	0x5ab4	; 0x5ab4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    5b90:	8b 30       	cpi	r24, 0x0B	; 11
    5b92:	3c f4       	brge	.+14     	; 0x5ba2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x20>
    5b94:	89 30       	cpi	r24, 0x09	; 9
    5b96:	5c f4       	brge	.+22     	; 0x5bae <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x2c>
    5b98:	88 23       	and	r24, r24
    5b9a:	e9 f0       	breq	.+58     	; 0x5bd6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x54>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:331
              return DeserializationError::InvalidInput;
          }
          break;

        default:
          return DeserializationError::Ok;
    5b9c:	90 e0       	ldi	r25, 0x00	; 0
    5b9e:	80 e0       	ldi	r24, 0x00	; 0
    5ba0:	1c c0       	rjmp	.+56     	; 0x5bda <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x58>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:279
    return c == '\'' || c == '\"';
  }

  DeserializationError skipSpacesAndComments() {
    for (;;) {
      switch (current()) {
    5ba2:	80 32       	cpi	r24, 0x20	; 32
    5ba4:	21 f0       	breq	.+8      	; 0x5bae <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x2c>
    5ba6:	8f 32       	cpi	r24, 0x2F	; 47
    5ba8:	21 f0       	breq	.+8      	; 0x5bb2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x30>
    5baa:	8d 30       	cpi	r24, 0x0D	; 13
    5bac:	b9 f7       	brne	.-18     	; 0x5b9c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x1a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    5bae:	18 86       	std	Y+8, r1	; 0x08
    5bb0:	ec cf       	rjmp	.-40     	; 0x5b8a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x8>
    5bb2:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:295
          continue;

        // comments
        case '/':
          move();  // skip '/'
          switch (current()) {
    5bb4:	ce 01       	movw	r24, r28
    5bb6:	0e 94 5a 2d 	call	0x5ab4	; 0x5ab4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    5bba:	8a 32       	cpi	r24, 0x2A	; 42
    5bbc:	29 f0       	breq	.+10     	; 0x5bc8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x46>
    5bbe:	8f 32       	cpi	r24, 0x2F	; 47
    5bc0:	d1 f0       	breq	.+52     	; 0x5bf6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x74>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:326
              }
              break;

            // not a comment, just a '/'
            default:
              return DeserializationError::InvalidInput;
    5bc2:	82 e0       	ldi	r24, 0x02	; 2
    5bc4:	90 e0       	ldi	r25, 0x00	; 0
    5bc6:	09 c0       	rjmp	.+18     	; 0x5bda <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x58>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    5bc8:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:299
          move();  // skip '/'
          switch (current()) {
            // block comment
            case '*': {
              move();  // skip '*'
              bool wasStar = false;
    5bca:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:301
              for (;;) {
                char c = current();
    5bcc:	ce 01       	movw	r24, r28
    5bce:	0e 94 5a 2d 	call	0x5ab4	; 0x5ab4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:302
                if (c == '\0') return DeserializationError::IncompleteInput;
    5bd2:	81 11       	cpse	r24, r1
    5bd4:	06 c0       	rjmp	.+12     	; 0x5be2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x60>
    5bd6:	81 e0       	ldi	r24, 0x01	; 1
    5bd8:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:334

        default:
          return DeserializationError::Ok;
      }
    }
  }
    5bda:	df 91       	pop	r29
    5bdc:	cf 91       	pop	r28
    5bde:	1f 91       	pop	r17
    5be0:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:303
              move();  // skip '*'
              bool wasStar = false;
              for (;;) {
                char c = current();
                if (c == '\0') return DeserializationError::IncompleteInput;
                if (c == '/' && wasStar) {
    5be2:	8f 32       	cpi	r24, 0x2F	; 47
    5be4:	11 f4       	brne	.+4      	; 0x5bea <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x68>
    5be6:	11 11       	cpse	r17, r1
    5be8:	e2 cf       	rjmp	.-60     	; 0x5bae <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x2c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:307
                  move();
                  break;
                }
                wasStar = c == '*';
    5bea:	11 e0       	ldi	r17, 0x01	; 1
    5bec:	8a 32       	cpi	r24, 0x2A	; 42
    5bee:	09 f0       	breq	.+2      	; 0x5bf2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x70>
    5bf0:	10 e0       	ldi	r17, 0x00	; 0
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    5bf2:	18 86       	std	Y+8, r1	; 0x08
    5bf4:	eb cf       	rjmp	.-42     	; 0x5bcc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x4a>
    5bf6:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:318
            // trailing comment
            case '/':
              // no need to skip "//"
              for (;;) {
                move();
                char c = current();
    5bf8:	ce 01       	movw	r24, r28
    5bfa:	0e 94 5a 2d 	call	0x5ab4	; 0x5ab4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:319
                if (c == '\0') return DeserializationError::IncompleteInput;
    5bfe:	88 23       	and	r24, r24
    5c00:	51 f3       	breq	.-44     	; 0x5bd6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x54>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:320
                if (c == '\n') break;
    5c02:	8a 30       	cpi	r24, 0x0A	; 10
    5c04:	c1 f7       	brne	.-16     	; 0x5bf6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x74>
    5c06:	c1 cf       	rjmp	.-126    	; 0x5b8a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x8>

00005c08 <a2d_complete(unsigned char, unsigned int)>:
_Z12a2d_completehj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2447
}
/*************************************************************************************************************************/
/////  zde resim, zpracovani zmerenych dat ///////////////////////////////////////////////////
void a2d_complete(uint8_t channel, uint16_t data)
{
  if (channel == A_PROUD) proud = data;
    5c08:	83 30       	cpi	r24, 0x03	; 3
    5c0a:	41 f4       	brne	.+16     	; 0x5c1c <a2d_complete(unsigned char, unsigned int)+0x14>
    5c0c:	70 93 c3 0b 	sts	0x0BC3, r23	; 0x800bc3 <proud+0x1>
    5c10:	60 93 c2 0b 	sts	0x0BC2, r22	; 0x800bc2 <proud>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2452
  if (channel == A_TRIV ) tritri = data;
  if (channel == A_PETV) petnula = data;
  if (channel == A_DVANACTV) dvanact = data;
  if (channel == A_LIGHT) light_curr = data;
  a2d_run_now = 1;
    5c14:	81 e0       	ldi	r24, 0x01	; 1
    5c16:	80 93 aa 0c 	sts	0x0CAA, r24	; 0x800caa <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2453
}
    5c1a:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2448
/*************************************************************************************************************************/
/////  zde resim, zpracovani zmerenych dat ///////////////////////////////////////////////////
void a2d_complete(uint8_t channel, uint16_t data)
{
  if (channel == A_PROUD) proud = data;
  if (channel == A_TRIV ) tritri = data;
    5c1c:	86 30       	cpi	r24, 0x06	; 6
    5c1e:	29 f4       	brne	.+10     	; 0x5c2a <a2d_complete(unsigned char, unsigned int)+0x22>
    5c20:	70 93 c9 0b 	sts	0x0BC9, r23	; 0x800bc9 <tritri+0x1>
    5c24:	60 93 c8 0b 	sts	0x0BC8, r22	; 0x800bc8 <tritri>
    5c28:	f5 cf       	rjmp	.-22     	; 0x5c14 <a2d_complete(unsigned char, unsigned int)+0xc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2449
  if (channel == A_PETV) petnula = data;
    5c2a:	85 30       	cpi	r24, 0x05	; 5
    5c2c:	29 f4       	brne	.+10     	; 0x5c38 <a2d_complete(unsigned char, unsigned int)+0x30>
    5c2e:	70 93 c7 0b 	sts	0x0BC7, r23	; 0x800bc7 <petnula+0x1>
    5c32:	60 93 c6 0b 	sts	0x0BC6, r22	; 0x800bc6 <petnula>
    5c36:	ee cf       	rjmp	.-36     	; 0x5c14 <a2d_complete(unsigned char, unsigned int)+0xc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2450
  if (channel == A_DVANACTV) dvanact = data;
    5c38:	84 30       	cpi	r24, 0x04	; 4
    5c3a:	29 f4       	brne	.+10     	; 0x5c46 <a2d_complete(unsigned char, unsigned int)+0x3e>
    5c3c:	70 93 c5 0b 	sts	0x0BC5, r23	; 0x800bc5 <dvanact+0x1>
    5c40:	60 93 c4 0b 	sts	0x0BC4, r22	; 0x800bc4 <dvanact>
    5c44:	e7 cf       	rjmp	.-50     	; 0x5c14 <a2d_complete(unsigned char, unsigned int)+0xc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2451
  if (channel == A_LIGHT) light_curr = data;
    5c46:	87 30       	cpi	r24, 0x07	; 7
    5c48:	29 f7       	brne	.-54     	; 0x5c14 <a2d_complete(unsigned char, unsigned int)+0xc>
    5c4a:	70 93 a5 0c 	sts	0x0CA5, r23	; 0x800ca5 <light_curr+0x1>
    5c4e:	60 93 a4 0c 	sts	0x0CA4, r22	; 0x800ca4 <light_curr>
    5c52:	e0 cf       	rjmp	.-64     	; 0x5c14 <a2d_complete(unsigned char, unsigned int)+0xc>

00005c54 <MenuHistoryGetMenu()>:
_Z18MenuHistoryGetMenuv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:953
{
  Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
  {
    menus = &Menu_All.ListMenu1[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    5c54:	a0 91 16 09 	lds	r26, 0x0916	; 0x800916 <MenuHistoryIndex>
    5c58:	b0 e0       	ldi	r27, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:950


Menu1 *MenuHistoryGetMenu(void)
{
  Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
    5c5a:	20 e0       	ldi	r18, 0x00	; 0
    5c5c:	40 e1       	ldi	r20, 0x10	; 16
    5c5e:	54 e0       	ldi	r21, 0x04	; 4
    5c60:	6c e9       	ldi	r22, 0x9C	; 156
    5c62:	71 e0       	ldi	r23, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:953
  {
    menus = &Menu_All.ListMenu1[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    5c64:	a4 5f       	subi	r26, 0xF4	; 244
    5c66:	b6 4f       	sbci	r27, 0xF6	; 246
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:950


Menu1 *MenuHistoryGetMenu(void)
{
  Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
    5c68:	fa 01       	movw	r30, r20
    5c6a:	84 91       	lpm	r24, Z
    5c6c:	28 17       	cp	r18, r24
    5c6e:	88 f4       	brcc	.+34     	; 0x5c92 <MenuHistoryGetMenu()+0x3e>
    5c70:	26 9f       	mul	r18, r22
    5c72:	c0 01       	movw	r24, r0
    5c74:	27 9f       	mul	r18, r23
    5c76:	90 0d       	add	r25, r0
    5c78:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:953
  {
    menus = &Menu_All.ListMenu1[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    5c7a:	fc 01       	movw	r30, r24
    5c7c:	e1 56       	subi	r30, 0x61	; 97
    5c7e:	fa 4f       	sbci	r31, 0xFA	; 250
    5c80:	e4 91       	lpm	r30, Z
    5c82:	3c 91       	ld	r19, X
    5c84:	3e 13       	cpse	r19, r30
    5c86:	03 c0       	rjmp	.+6      	; 0x5c8e <MenuHistoryGetMenu()+0x3a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:952
Menu1 *MenuHistoryGetMenu(void)
{
  Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
  {
    menus = &Menu_All.ListMenu1[idx];
    5c88:	8f 5e       	subi	r24, 0xEF	; 239
    5c8a:	9b 4f       	sbci	r25, 0xFB	; 251
    5c8c:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:950


Menu1 *MenuHistoryGetMenu(void)
{
  Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
    5c8e:	2f 5f       	subi	r18, 0xFF	; 255
    5c90:	eb cf       	rjmp	.-42     	; 0x5c68 <MenuHistoryGetMenu()+0x14>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:959
    {
      return menus;
    }
  }
  
}
    5c92:	08 95       	ret

00005c94 <nullfce()>:
_Z7nullfcev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:634





void nullfce(void) {};
    5c94:	08 95       	ret

00005c96 <button_redraw(unsigned char)>:
_Z13button_redrawh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:211


uint8_t button_redraw(uint8_t args)
{
  return 0;
}
    5c96:	80 e0       	ldi	r24, 0x00	; 0
    5c98:	08 95       	ret

00005c9a <one_wire_last_index_for_menu(unsigned char)>:
_Z28one_wire_last_index_for_menuh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:205
uint8_t one_wire_last_index_for_menu(uint8_t idx)
{
  uint8_t ret = 0;
  ret = HW_ONEWIRE_MAXROMS;
  return ret;
}
    5c9a:	86 e0       	ldi	r24, 0x06	; 6
    5c9c:	08 95       	ret

00005c9e <budik_enabled(unsigned char)>:
_Z13budik_enabledh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:185


uint8_t budik_enabled(uint8_t args)
{
  return 1;
}
    5c9e:	81 e0       	ldi	r24, 0x01	; 1
    5ca0:	08 95       	ret

00005ca2 <serial_putc(char, __file*)>:
_Z11serial_putccP6__file():
/home/saric/Arduino/libraries/RF24/printf.h:23
#define __PRINTF_H__

#if defined (ARDUINO) && !defined (__arm__) && !defined(__ARDUINO_X86__)

int serial_putc( char c, FILE * )
{
    5ca2:	cf 93       	push	r28
    5ca4:	c8 2f       	mov	r28, r24
write():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.h:133
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    5ca6:	68 2f       	mov	r22, r24
    5ca8:	8c e2       	ldi	r24, 0x2C	; 44
    5caa:	9f e0       	ldi	r25, 0x0F	; 15
    5cac:	0e 94 4b 10 	call	0x2096	; 0x2096 <HardwareSerial::write(unsigned char)>
_Z11serial_putccP6__file():
/home/saric/Arduino/libraries/RF24/printf.h:27
  Serial.write( c );

  return c;
}
    5cb0:	8c 2f       	mov	r24, r28
    5cb2:	cc 0f       	add	r28, r28
    5cb4:	99 0b       	sbc	r25, r25
    5cb6:	cf 91       	pop	r28
    5cb8:	08 95       	ret

00005cba <ArduinoJson::Internals::StaticMemoryPoolBase::alloc(unsigned int)>:
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5allocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:57
  size_t size() const {
    return _size;
  }

  // Allocates the specified amount of bytes in the memoryPool
  virtual void* alloc(size_t bytes) {
    5cba:	fc 01       	movw	r30, r24
_ZNK11ArduinoJson9Internals20StaticMemoryPoolBase8canAllocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:82
  void alignNextAlloc() {
    _size = round_size_up(_size);
  }

  bool canAlloc(size_t bytes) const {
    return _size + bytes <= _capacity;
    5cbc:	86 81       	ldd	r24, Z+6	; 0x06
    5cbe:	97 81       	ldd	r25, Z+7	; 0x07
    5cc0:	68 0f       	add	r22, r24
    5cc2:	79 1f       	adc	r23, r25
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5allocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:59
  }

  // Allocates the specified amount of bytes in the memoryPool
  virtual void* alloc(size_t bytes) {
    alignNextAlloc();
    if (!canAlloc(bytes)) return NULL;
    5cc4:	24 81       	ldd	r18, Z+4	; 0x04
    5cc6:	35 81       	ldd	r19, Z+5	; 0x05
    5cc8:	26 17       	cp	r18, r22
    5cca:	37 07       	cpc	r19, r23
    5ccc:	38 f0       	brcs	.+14     	; 0x5cdc <ArduinoJson::Internals::StaticMemoryPoolBase::alloc(unsigned int)+0x22>
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase7doAllocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:86
  bool canAlloc(size_t bytes) const {
    return _size + bytes <= _capacity;
  }

  void* doAlloc(size_t bytes) {
    void* p = &_buffer[_size];
    5cce:	22 81       	ldd	r18, Z+2	; 0x02
    5cd0:	33 81       	ldd	r19, Z+3	; 0x03
    5cd2:	82 0f       	add	r24, r18
    5cd4:	93 1f       	adc	r25, r19
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:87
    _size += bytes;
    5cd6:	77 83       	std	Z+7, r23	; 0x07
    5cd8:	66 83       	std	Z+6, r22	; 0x06
    5cda:	08 95       	ret
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5allocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:59
  }

  // Allocates the specified amount of bytes in the memoryPool
  virtual void* alloc(size_t bytes) {
    alignNextAlloc();
    if (!canAlloc(bytes)) return NULL;
    5cdc:	90 e0       	ldi	r25, 0x00	; 0
    5cde:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:61
    return doAlloc(bytes);
  }
    5ce0:	08 95       	ret

00005ce2 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.163]>:
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.163():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:657
{
	Print(st, x, y);
}

//print string
void LCDWIKI_GUI::Print_String(String st, int16_t x, int16_t y)
    5ce2:	2f 92       	push	r2
    5ce4:	3f 92       	push	r3
    5ce6:	4f 92       	push	r4
    5ce8:	5f 92       	push	r5
    5cea:	6f 92       	push	r6
    5cec:	7f 92       	push	r7
    5cee:	8f 92       	push	r8
    5cf0:	9f 92       	push	r9
    5cf2:	af 92       	push	r10
    5cf4:	bf 92       	push	r11
    5cf6:	cf 92       	push	r12
    5cf8:	df 92       	push	r13
    5cfa:	ef 92       	push	r14
    5cfc:	ff 92       	push	r15
    5cfe:	0f 93       	push	r16
    5d00:	1f 93       	push	r17
    5d02:	cf 93       	push	r28
    5d04:	df 93       	push	r29
    5d06:	cd b7       	in	r28, 0x3d	; 61
    5d08:	de b7       	in	r29, 0x3e	; 62
    5d0a:	2d 97       	sbiw	r28, 0x0d	; 13
    5d0c:	0f b6       	in	r0, 0x3f	; 63
    5d0e:	f8 94       	cli
    5d10:	de bf       	out	0x3e, r29	; 62
    5d12:	0f be       	out	0x3f, r0	; 63
    5d14:	cd bf       	out	0x3d, r28	; 61
    5d16:	fc 01       	movw	r30, r24
    5d18:	a0 81       	ld	r26, Z
    5d1a:	b1 81       	ldd	r27, Z+1	; 0x01
Print():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:611
{
	int16_t pos;
	uint16_t len;
	const char * p = (const char *)st;
	size_t n = 0;
	if (x == CENTER || x == RIGHT) 
    5d1c:	cb 01       	movw	r24, r22
    5d1e:	8e 50       	subi	r24, 0x0E	; 14
    5d20:	97 42       	sbci	r25, 0x27	; 39
    5d22:	02 97       	sbiw	r24, 0x02	; 2
    5d24:	20 f5       	brcc	.+72     	; 0x5d6e <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.163]+0x8c>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:613
	{
		len = strlen((const char *)st) * 6 * text_size;		
    5d26:	fd 01       	movw	r30, r26
    5d28:	01 90       	ld	r0, Z+
    5d2a:	00 20       	and	r0, r0
    5d2c:	e9 f7       	brne	.-6      	; 0x5d28 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.163]+0x46>
    5d2e:	31 97       	sbiw	r30, 0x01	; 1
    5d30:	ea 1b       	sub	r30, r26
    5d32:	fb 0b       	sbc	r31, r27
    5d34:	80 91 c3 11 	lds	r24, 0x11C3	; 0x8011c3 <my_lcd+0xc>
    5d38:	26 e0       	ldi	r18, 0x06	; 6
    5d3a:	82 9f       	mul	r24, r18
    5d3c:	c0 01       	movw	r24, r0
    5d3e:	11 24       	eor	r1, r1
    5d40:	8e 9f       	mul	r24, r30
    5d42:	90 01       	movw	r18, r0
    5d44:	8f 9f       	mul	r24, r31
    5d46:	30 0d       	add	r19, r0
    5d48:	9e 9f       	mul	r25, r30
    5d4a:	30 0d       	add	r19, r0
    5d4c:	11 24       	eor	r1, r1
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:614
		pos = (Get_Display_Width() - len); 
    5d4e:	80 91 c9 11 	lds	r24, 0x11C9	; 0x8011c9 <my_lcd+0x12>
    5d52:	90 91 ca 11 	lds	r25, 0x11CA	; 0x8011ca <my_lcd+0x13>
    5d56:	82 1b       	sub	r24, r18
    5d58:	93 0b       	sbc	r25, r19
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:615
		if (x == CENTER)
    5d5a:	6e 30       	cpi	r22, 0x0E	; 14
    5d5c:	77 42       	sbci	r23, 0x27	; 39
    5d5e:	89 f5       	brne	.+98     	; 0x5dc2 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.163]+0xe0>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:617
		{
			x = pos/2;
    5d60:	bc 01       	movw	r22, r24
    5d62:	97 ff       	sbrs	r25, 7
    5d64:	02 c0       	rjmp	.+4      	; 0x5d6a <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.163]+0x88>
    5d66:	6f 5f       	subi	r22, 0xFF	; 255
    5d68:	7f 4f       	sbci	r23, 0xFF	; 255
    5d6a:	75 95       	asr	r23
    5d6c:	67 95       	ror	r22
Set_Text_Cousur():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:474
}

//set text coordinate
void LCDWIKI_GUI::Set_Text_Cousur(int16_t x, int16_t y)
{
	text_x = x;
    5d6e:	70 93 ba 11 	sts	0x11BA, r23	; 0x8011ba <my_lcd+0x3>
    5d72:	60 93 b9 11 	sts	0x11B9, r22	; 0x8011b9 <my_lcd+0x2>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:475
	text_y = y;
    5d76:	50 93 bc 11 	sts	0x11BC, r21	; 0x8011bc <my_lcd+0x5>
    5d7a:	40 93 bb 11 	sts	0x11BB, r20	; 0x8011bb <my_lcd+0x4>
    5d7e:	be 83       	std	Y+6, r27	; 0x06
    5d80:	ad 83       	std	Y+5, r26	; 0x05
Print():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:627
		}
	}
    Set_Text_Cousur(x, y);
	while(1)
	{
		unsigned char ch = *(p++);//pgm_read_byte(p++);
    5d82:	ed 81       	ldd	r30, Y+5	; 0x05
    5d84:	fe 81       	ldd	r31, Y+6	; 0x06
    5d86:	91 91       	ld	r25, Z+
    5d88:	fe 83       	std	Y+6, r31	; 0x06
    5d8a:	ed 83       	std	Y+5, r30	; 0x05
    5d8c:	89 2f       	mov	r24, r25
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:628
		if(ch == 0)
    5d8e:	99 23       	and	r25, r25
    5d90:	09 f4       	brne	.+2      	; 0x5d94 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.163]+0xb2>
    5d92:	dd c0       	rjmp	.+442    	; 0x5f4e <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.163]+0x26c>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:792
}

//write a char
size_t LCDWIKI_GUI::write(uint8_t c) 
{
	if (c == '\n') 
    5d94:	9a 30       	cpi	r25, 0x0A	; 10
    5d96:	c9 f4       	brne	.+50     	; 0x5dca <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.163]+0xe8>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:794
	{
    	text_y += text_size*8;
    5d98:	80 91 c3 11 	lds	r24, 0x11C3	; 0x8011c3 <my_lcd+0xc>
    5d9c:	f8 e0       	ldi	r31, 0x08	; 8
    5d9e:	8f 9f       	mul	r24, r31
    5da0:	c0 01       	movw	r24, r0
    5da2:	11 24       	eor	r1, r1
    5da4:	20 91 bb 11 	lds	r18, 0x11BB	; 0x8011bb <my_lcd+0x4>
    5da8:	30 91 bc 11 	lds	r19, 0x11BC	; 0x8011bc <my_lcd+0x5>
    5dac:	82 0f       	add	r24, r18
    5dae:	93 1f       	adc	r25, r19
    5db0:	90 93 bc 11 	sts	0x11BC, r25	; 0x8011bc <my_lcd+0x5>
    5db4:	80 93 bb 11 	sts	0x11BB, r24	; 0x8011bb <my_lcd+0x4>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:795
    	text_x  = 0;
    5db8:	10 92 ba 11 	sts	0x11BA, r1	; 0x8011ba <my_lcd+0x3>
    5dbc:	10 92 b9 11 	sts	0x11B9, r1	; 0x8011b9 <my_lcd+0x2>
    5dc0:	e0 cf       	rjmp	.-64     	; 0x5d82 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.163]+0xa0>
Print():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:621
		{
			x = pos/2;
		}
		else
		{
			x = pos - 1;
    5dc2:	bc 01       	movw	r22, r24
    5dc4:	61 50       	subi	r22, 0x01	; 1
    5dc6:	71 09       	sbc	r23, r1
    5dc8:	d2 cf       	rjmp	.-92     	; 0x5d6e <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.163]+0x8c>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:797
	if (c == '\n') 
	{
    	text_y += text_size*8;
    	text_x  = 0;
 	} 
	else if(c == '\r')
    5dca:	9d 30       	cpi	r25, 0x0D	; 13
    5dcc:	d1 f2       	breq	.-76     	; 0x5d82 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.163]+0xa0>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:802
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
    5dce:	20 91 b9 11 	lds	r18, 0x11B9	; 0x8011b9 <my_lcd+0x2>
    5dd2:	30 91 ba 11 	lds	r19, 0x11BA	; 0x8011ba <my_lcd+0x3>
    5dd6:	39 87       	std	Y+9, r19	; 0x09
    5dd8:	28 87       	std	Y+8, r18	; 0x08
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:553
}

//draw a char
void LCDWIKI_GUI::Draw_Char(int16_t x, int16_t y, uint8_t c, uint16_t color,uint16_t bg, uint8_t size, boolean mode)
{
	if((x >= Get_Width()) || (y >= Get_Height()) || ((x + 6 * size - 1) < 0) || ((y + 8 * size - 1) < 0))
    5dda:	20 91 c9 11 	lds	r18, 0x11C9	; 0x8011c9 <my_lcd+0x12>
    5dde:	30 91 ca 11 	lds	r19, 0x11CA	; 0x8011ca <my_lcd+0x13>
    5de2:	48 85       	ldd	r20, Y+8	; 0x08
    5de4:	59 85       	ldd	r21, Y+9	; 0x09
    5de6:	42 17       	cp	r20, r18
    5de8:	53 07       	cpc	r21, r19
    5dea:	0c f0       	brlt	.+2      	; 0x5dee <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.163]+0x10c>
    5dec:	88 c0       	rjmp	.+272    	; 0x5efe <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.163]+0x21c>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:802
	else if(c == '\r')
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
    5dee:	60 90 bb 11 	lds	r6, 0x11BB	; 0x8011bb <my_lcd+0x4>
    5df2:	70 90 bc 11 	lds	r7, 0x11BC	; 0x8011bc <my_lcd+0x5>
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:553
}

//draw a char
void LCDWIKI_GUI::Draw_Char(int16_t x, int16_t y, uint8_t c, uint16_t color,uint16_t bg, uint8_t size, boolean mode)
{
	if((x >= Get_Width()) || (y >= Get_Height()) || ((x + 6 * size - 1) < 0) || ((y + 8 * size - 1) < 0))
    5df6:	20 91 cb 11 	lds	r18, 0x11CB	; 0x8011cb <my_lcd+0x14>
    5dfa:	30 91 cc 11 	lds	r19, 0x11CC	; 0x8011cc <my_lcd+0x15>
    5dfe:	62 16       	cp	r6, r18
    5e00:	73 06       	cpc	r7, r19
    5e02:	0c f0       	brlt	.+2      	; 0x5e06 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.163]+0x124>
    5e04:	7c c0       	rjmp	.+248    	; 0x5efe <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.163]+0x21c>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:802
	else if(c == '\r')
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
    5e06:	50 91 c3 11 	lds	r21, 0x11C3	; 0x8011c3 <my_lcd+0xc>
    5e0a:	5a 83       	std	Y+2, r21	; 0x02
    5e0c:	c5 2e       	mov	r12, r21
    5e0e:	d1 2c       	mov	r13, r1
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:553
}

//draw a char
void LCDWIKI_GUI::Draw_Char(int16_t x, int16_t y, uint8_t c, uint16_t color,uint16_t bg, uint8_t size, boolean mode)
{
	if((x >= Get_Width()) || (y >= Get_Height()) || ((x + 6 * size - 1) < 0) || ((y + 8 * size - 1) < 0))
    5e10:	28 85       	ldd	r18, Y+8	; 0x08
    5e12:	39 85       	ldd	r19, Y+9	; 0x09
    5e14:	e6 e0       	ldi	r30, 0x06	; 6
    5e16:	5e 9f       	mul	r21, r30
    5e18:	20 0d       	add	r18, r0
    5e1a:	31 1d       	adc	r19, r1
    5e1c:	11 24       	eor	r1, r1
    5e1e:	12 16       	cp	r1, r18
    5e20:	13 06       	cpc	r1, r19
    5e22:	0c f0       	brlt	.+2      	; 0x5e26 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.163]+0x144>
    5e24:	6c c0       	rjmp	.+216    	; 0x5efe <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.163]+0x21c>
    5e26:	96 01       	movw	r18, r12
    5e28:	93 e0       	ldi	r25, 0x03	; 3
    5e2a:	22 0f       	add	r18, r18
    5e2c:	33 1f       	adc	r19, r19
    5e2e:	9a 95       	dec	r25
    5e30:	e1 f7       	brne	.-8      	; 0x5e2a <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.163]+0x148>
    5e32:	26 0d       	add	r18, r6
    5e34:	37 1d       	adc	r19, r7
    5e36:	12 16       	cp	r1, r18
    5e38:	13 06       	cpc	r1, r19
    5e3a:	0c f0       	brlt	.+2      	; 0x5e3e <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.163]+0x15c>
    5e3c:	60 c0       	rjmp	.+192    	; 0x5efe <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.163]+0x21c>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:557
	{
    	return;
	}		
  	if(c >= 176)
    5e3e:	80 3b       	cpi	r24, 0xB0	; 176
    5e40:	08 f0       	brcs	.+2      	; 0x5e44 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.163]+0x162>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:559
  	{
		c++; 
    5e42:	8f 5f       	subi	r24, 0xFF	; 255
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:802
	else if(c == '\r')
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
    5e44:	f0 91 c4 11 	lds	r31, 0x11C4	; 0x8011c4 <my_lcd+0xd>
    5e48:	ff 83       	std	Y+7, r31	; 0x07
    5e4a:	20 90 bf 11 	lds	r2, 0x11BF	; 0x8011bf <my_lcd+0x8>
    5e4e:	30 90 c0 11 	lds	r3, 0x11C0	; 0x8011c0 <my_lcd+0x9>
    5e52:	20 91 bd 11 	lds	r18, 0x11BD	; 0x8011bd <my_lcd+0x6>
    5e56:	30 91 be 11 	lds	r19, 0x11BE	; 0x8011be <my_lcd+0x7>
    5e5a:	3c 83       	std	Y+4, r19	; 0x04
    5e5c:	2b 83       	std	Y+3, r18	; 0x03
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:570
    	{
      		line = 0x0;
    	}
    	else
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
    5e5e:	48 85       	ldd	r20, Y+8	; 0x08
    5e60:	59 85       	ldd	r21, Y+9	; 0x09
    5e62:	5d 87       	std	Y+13, r21	; 0x0d
    5e64:	4c 87       	std	Y+12, r20	; 0x0c
    5e66:	5a 01       	movw	r10, r20
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.163():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:561
	}		
  	if(c >= 176)
  	{
		c++; 
  	}
	for (int8_t i=0; i<6; i++) 
    5e68:	19 82       	std	Y+1, r1	; 0x01
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:570
    	{
      		line = 0x0;
    	}
    	else
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
    5e6a:	29 ea       	ldi	r18, 0xA9	; 169
    5e6c:	36 e1       	ldi	r19, 0x16	; 22
    5e6e:	24 1b       	sub	r18, r20
    5e70:	35 0b       	sbc	r19, r21
    5e72:	f9 01       	movw	r30, r18
    5e74:	45 e0       	ldi	r20, 0x05	; 5
    5e76:	84 9f       	mul	r24, r20
    5e78:	e0 0d       	add	r30, r0
    5e7a:	f1 1d       	adc	r31, r1
    5e7c:	11 24       	eor	r1, r1
    5e7e:	fb 87       	std	Y+11, r31	; 0x0b
    5e80:	ea 87       	std	Y+10, r30	; 0x0a
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:564
		c++; 
  	}
	for (int8_t i=0; i<6; i++) 
	{
    	uint8_t line;
    	if (i == 5)
    5e82:	59 81       	ldd	r21, Y+1	; 0x01
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.163():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:566
    	{
      		line = 0x0;
    5e84:	e0 e0       	ldi	r30, 0x00	; 0
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:564
		c++; 
  	}
	for (int8_t i=0; i<6; i++) 
	{
    	uint8_t line;
    	if (i == 5)
    5e86:	55 30       	cpi	r21, 0x05	; 5
    5e88:	29 f0       	breq	.+10     	; 0x5e94 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.163]+0x1b2>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:570
    	{
      		line = 0x0;
    	}
    	else
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
    5e8a:	ea 85       	ldd	r30, Y+10	; 0x0a
    5e8c:	fb 85       	ldd	r31, Y+11	; 0x0b
    5e8e:	ea 0d       	add	r30, r10
    5e90:	fb 1d       	adc	r31, r11
    5e92:	e4 91       	lpm	r30, Z
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.163():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:566
	for (int8_t i=0; i<6; i++) 
	{
    	uint8_t line;
    	if (i == 5)
    	{
      		line = 0x0;
    5e94:	23 01       	movw	r4, r6
    5e96:	91 2c       	mov	r9, r1
    5e98:	81 2c       	mov	r8, r1
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:574
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
    	}
    	for (int8_t j = 0; j<8; j++) 
		{
      		if (line & 0x1) 
    5e9a:	8e 2f       	mov	r24, r30
    5e9c:	90 e0       	ldi	r25, 0x00	; 0
    5e9e:	99 87       	std	Y+9, r25	; 0x09
    5ea0:	88 87       	std	Y+8, r24	; 0x08
    5ea2:	e0 ff       	sbrs	r30, 0
    5ea4:	3c c0       	rjmp	.+120    	; 0x5f1e <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.163]+0x23c>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:576
			{
        		if (size == 1)
    5ea6:	9a 81       	ldd	r25, Y+2	; 0x02
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:578
        		{
        			Draw_Pixe(x+i, y+j, color);
    5ea8:	2b 81       	ldd	r18, Y+3	; 0x03
    5eaa:	3c 81       	ldd	r19, Y+4	; 0x04
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:582
        		}
        		else 
				{  
					Fill_Rect(x+(i*size), y+(j*size), size, size, color);
    5eac:	eb 80       	ldd	r14, Y+3	; 0x03
    5eae:	fc 80       	ldd	r15, Y+4	; 0x04
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:576
    	}
    	for (int8_t j = 0; j<8; j++) 
		{
      		if (line & 0x1) 
			{
        		if (size == 1)
    5eb0:	91 30       	cpi	r25, 0x01	; 1
    5eb2:	09 f0       	breq	.+2      	; 0x5eb6 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.163]+0x1d4>
    5eb4:	42 c0       	rjmp	.+132    	; 0x5f3a <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.163]+0x258>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:591
			{
				if(!mode)
				{
	        		if (size == 1) 
	        		{
	        			Draw_Pixe(x+i, y+j, bg);
    5eb6:	a3 01       	movw	r20, r6
    5eb8:	48 0d       	add	r20, r8
    5eba:	59 1d       	adc	r21, r9
    5ebc:	b5 01       	movw	r22, r10
    5ebe:	87 eb       	ldi	r24, 0xB7	; 183
    5ec0:	91 e1       	ldi	r25, 0x11	; 17
    5ec2:	0e 94 db 20 	call	0x41b6	; 0x41b6 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:599
					{  
						Fill_Rect(x+i*size, y+j*size, size, size, bg);
					}
				}
			}
      		line >>= 1;
    5ec6:	e8 85       	ldd	r30, Y+8	; 0x08
    5ec8:	f9 85       	ldd	r31, Y+9	; 0x09
    5eca:	f5 95       	asr	r31
    5ecc:	e7 95       	ror	r30
    5ece:	3f ef       	ldi	r19, 0xFF	; 255
    5ed0:	83 1a       	sub	r8, r19
    5ed2:	93 0a       	sbc	r9, r19
    5ed4:	4c 0c       	add	r4, r12
    5ed6:	5d 1c       	adc	r5, r13
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:572
    	}
    	else
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
    	}
    	for (int8_t j = 0; j<8; j++) 
    5ed8:	48 e0       	ldi	r20, 0x08	; 8
    5eda:	84 16       	cp	r8, r20
    5edc:	91 04       	cpc	r9, r1
    5ede:	e9 f6       	brne	.-70     	; 0x5e9a <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.163]+0x1b8>
    5ee0:	5f ef       	ldi	r21, 0xFF	; 255
    5ee2:	a5 1a       	sub	r10, r21
    5ee4:	b5 0a       	sbc	r11, r21
    5ee6:	8c 85       	ldd	r24, Y+12	; 0x0c
    5ee8:	9d 85       	ldd	r25, Y+13	; 0x0d
    5eea:	8c 0d       	add	r24, r12
    5eec:	9d 1d       	adc	r25, r13
    5eee:	9d 87       	std	Y+13, r25	; 0x0d
    5ef0:	8c 87       	std	Y+12, r24	; 0x0c
    5ef2:	99 81       	ldd	r25, Y+1	; 0x01
    5ef4:	9f 5f       	subi	r25, 0xFF	; 255
    5ef6:	99 83       	std	Y+1, r25	; 0x01
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:561
	}		
  	if(c >= 176)
  	{
		c++; 
  	}
	for (int8_t i=0; i<6; i++) 
    5ef8:	96 30       	cpi	r25, 0x06	; 6
    5efa:	09 f0       	breq	.+2      	; 0x5efe <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.163]+0x21c>
    5efc:	c2 cf       	rjmp	.-124    	; 0x5e82 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.163]+0x1a0>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:803
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
    	text_x += text_size*6;		
    5efe:	20 91 c3 11 	lds	r18, 0x11C3	; 0x8011c3 <my_lcd+0xc>
    5f02:	80 91 b9 11 	lds	r24, 0x11B9	; 0x8011b9 <my_lcd+0x2>
    5f06:	90 91 ba 11 	lds	r25, 0x11BA	; 0x8011ba <my_lcd+0x3>
    5f0a:	e6 e0       	ldi	r30, 0x06	; 6
    5f0c:	2e 9f       	mul	r18, r30
    5f0e:	80 0d       	add	r24, r0
    5f10:	91 1d       	adc	r25, r1
    5f12:	11 24       	eor	r1, r1
    5f14:	90 93 ba 11 	sts	0x11BA, r25	; 0x8011ba <my_lcd+0x3>
    5f18:	80 93 b9 11 	sts	0x11B9, r24	; 0x8011b9 <my_lcd+0x2>
    5f1c:	32 cf       	rjmp	.-412    	; 0x5d82 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.163]+0xa0>
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:585
        		else 
				{  
					Fill_Rect(x+(i*size), y+(j*size), size, size, color);
        		}
        	} 
			else if (bg != color) 				
    5f1e:	eb 81       	ldd	r30, Y+3	; 0x03
    5f20:	fc 81       	ldd	r31, Y+4	; 0x04
    5f22:	2e 16       	cp	r2, r30
    5f24:	3f 06       	cpc	r3, r31
    5f26:	79 f2       	breq	.-98     	; 0x5ec6 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.163]+0x1e4>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:587
			{
				if(!mode)
    5f28:	ff 81       	ldd	r31, Y+7	; 0x07
    5f2a:	f1 11       	cpse	r31, r1
    5f2c:	cc cf       	rjmp	.-104    	; 0x5ec6 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.163]+0x1e4>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:589
				{
	        		if (size == 1) 
    5f2e:	2a 81       	ldd	r18, Y+2	; 0x02
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:595
	        		{
	        			Draw_Pixe(x+i, y+j, bg);
	        		}
	        		else 
					{  
						Fill_Rect(x+i*size, y+j*size, size, size, bg);
    5f30:	71 01       	movw	r14, r2
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:589
        	} 
			else if (bg != color) 				
			{
				if(!mode)
				{
	        		if (size == 1) 
    5f32:	21 30       	cpi	r18, 0x01	; 1
    5f34:	11 f4       	brne	.+4      	; 0x5f3a <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.163]+0x258>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:591
	        		{
	        			Draw_Pixe(x+i, y+j, bg);
    5f36:	91 01       	movw	r18, r2
    5f38:	be cf       	rjmp	.-132    	; 0x5eb6 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.163]+0x1d4>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:595
	        		}
	        		else 
					{  
						Fill_Rect(x+i*size, y+j*size, size, size, bg);
    5f3a:	86 01       	movw	r16, r12
    5f3c:	96 01       	movw	r18, r12
    5f3e:	a2 01       	movw	r20, r4
    5f40:	6c 85       	ldd	r22, Y+12	; 0x0c
    5f42:	7d 85       	ldd	r23, Y+13	; 0x0d
    5f44:	87 eb       	ldi	r24, 0xB7	; 183
    5f46:	91 e1       	ldi	r25, 0x11	; 17
    5f48:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
    5f4c:	bc cf       	rjmp	.-136    	; 0x5ec6 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.163]+0x1e4>
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.163():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:660

//print string
void LCDWIKI_GUI::Print_String(String st, int16_t x, int16_t y)
{
	Print((uint8_t *)(st.c_str()), x, y);
}
    5f4e:	2d 96       	adiw	r28, 0x0d	; 13
    5f50:	0f b6       	in	r0, 0x3f	; 63
    5f52:	f8 94       	cli
    5f54:	de bf       	out	0x3e, r29	; 62
    5f56:	0f be       	out	0x3f, r0	; 63
    5f58:	cd bf       	out	0x3d, r28	; 61
    5f5a:	df 91       	pop	r29
    5f5c:	cf 91       	pop	r28
    5f5e:	1f 91       	pop	r17
    5f60:	0f 91       	pop	r16
    5f62:	ff 90       	pop	r15
    5f64:	ef 90       	pop	r14
    5f66:	df 90       	pop	r13
    5f68:	cf 90       	pop	r12
    5f6a:	bf 90       	pop	r11
    5f6c:	af 90       	pop	r10
    5f6e:	9f 90       	pop	r9
    5f70:	8f 90       	pop	r8
    5f72:	7f 90       	pop	r7
    5f74:	6f 90       	pop	r6
    5f76:	5f 90       	pop	r5
    5f78:	4f 90       	pop	r4
    5f7a:	3f 90       	pop	r3
    5f7c:	2f 90       	pop	r2
    5f7e:	08 95       	ret

00005f80 <PubSubClient::subscribe(char const*) [clone .constprop.154]>:
_ZN12PubSubClient9subscribeEPKc.constprop.154():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:468

boolean PubSubClient::subscribe(const char* topic) {
    5f80:	cf 93       	push	r28
    5f82:	df 93       	push	r29
subscribe():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:476

boolean PubSubClient::subscribe(const char* topic, uint8_t qos) {
    if (qos < 0 || qos > 1) {
        return false;
    }
    if (MQTT_MAX_PACKET_SIZE < 9 + strlen(topic)) {
    5f84:	fc 01       	movw	r30, r24
    5f86:	01 90       	ld	r0, Z+
    5f88:	00 20       	and	r0, r0
    5f8a:	e9 f7       	brne	.-6      	; 0x5f86 <PubSubClient::subscribe(char const*) [clone .constprop.154]+0x6>
    5f8c:	9f 01       	movw	r18, r30
    5f8e:	28 1b       	sub	r18, r24
    5f90:	39 0b       	sbc	r19, r25
    5f92:	28 5f       	subi	r18, 0xF8	; 248
    5f94:	3f 4f       	sbci	r19, 0xFF	; 255
    5f96:	21 30       	cpi	r18, 0x01	; 1
    5f98:	32 40       	sbci	r19, 0x02	; 2
    5f9a:	98 f5       	brcc	.+102    	; 0x6002 <PubSubClient::subscribe(char const*) [clone .constprop.154]+0x82>
    5f9c:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:480
        // Too long
        return false;
    }
    if (connected()) {
    5f9e:	81 eb       	ldi	r24, 0xB1	; 177
    5fa0:	93 e1       	ldi	r25, 0x13	; 19
    5fa2:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <PubSubClient::connected()>
    5fa6:	88 23       	and	r24, r24
    5fa8:	61 f1       	breq	.+88     	; 0x6002 <PubSubClient::subscribe(char const*) [clone .constprop.154]+0x82>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:483
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        nextMsgId++;
    5faa:	80 91 b3 15 	lds	r24, 0x15B3	; 0x8015b3 <mqtt_client+0x202>
    5fae:	90 91 b4 15 	lds	r25, 0x15B4	; 0x8015b4 <mqtt_client+0x203>
    5fb2:	01 96       	adiw	r24, 0x01	; 1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:484
        if (nextMsgId == 0) {
    5fb4:	19 f1       	breq	.+70     	; 0x5ffc <PubSubClient::subscribe(char const*) [clone .constprop.154]+0x7c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:485
            nextMsgId = 1;
    5fb6:	90 93 b4 15 	sts	0x15B4, r25	; 0x8015b4 <mqtt_client+0x203>
    5fba:	80 93 b3 15 	sts	0x15B3, r24	; 0x8015b3 <mqtt_client+0x202>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:487
        }
        buffer[length++] = (nextMsgId >> 8);
    5fbe:	80 91 b3 15 	lds	r24, 0x15B3	; 0x8015b3 <mqtt_client+0x202>
    5fc2:	90 91 b4 15 	lds	r25, 0x15B4	; 0x8015b4 <mqtt_client+0x203>
    5fc6:	90 93 b8 13 	sts	0x13B8, r25	; 0x8013b8 <mqtt_client+0x7>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:488
        buffer[length++] = (nextMsgId & 0xFF);
    5fca:	80 93 b9 13 	sts	0x13B9, r24	; 0x8013b9 <mqtt_client+0x8>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:489
        length = writeString((char*)topic, buffer,length);
    5fce:	47 e0       	ldi	r20, 0x07	; 7
    5fd0:	50 e0       	ldi	r21, 0x00	; 0
    5fd2:	63 eb       	ldi	r22, 0xB3	; 179
    5fd4:	73 e1       	ldi	r23, 0x13	; 19
    5fd6:	ce 01       	movw	r24, r28
    5fd8:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.157]>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:490
        buffer[length++] = qos;
    5fdc:	fc 01       	movw	r30, r24
    5fde:	ef 54       	subi	r30, 0x4F	; 79
    5fe0:	fc 4e       	sbci	r31, 0xEC	; 236
    5fe2:	12 82       	std	Z+2, r1	; 0x02
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:491
        return write(MQTTSUBSCRIBE|MQTTQOS1,buffer,length-5);
    5fe4:	9c 01       	movw	r18, r24
    5fe6:	24 50       	subi	r18, 0x04	; 4
    5fe8:	31 09       	sbc	r19, r1
    5fea:	43 eb       	ldi	r20, 0xB3	; 179
    5fec:	53 e1       	ldi	r21, 0x13	; 19
    5fee:	62 e8       	ldi	r22, 0x82	; 130
    5ff0:	81 eb       	ldi	r24, 0xB1	; 177
    5ff2:	93 e1       	ldi	r25, 0x13	; 19
_ZN12PubSubClient9subscribeEPKc.constprop.154():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:470
#endif
}

boolean PubSubClient::subscribe(const char* topic) {
    return subscribe(topic, 0);
}
    5ff4:	df 91       	pop	r29
    5ff6:	cf 91       	pop	r28
subscribe():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:491
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
        length = writeString((char*)topic, buffer,length);
        buffer[length++] = qos;
        return write(MQTTSUBSCRIBE|MQTTQOS1,buffer,length-5);
    5ff8:	0c 94 88 16 	jmp	0x2d10	; 0x2d10 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:485
    if (connected()) {
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        nextMsgId++;
        if (nextMsgId == 0) {
            nextMsgId = 1;
    5ffc:	81 e0       	ldi	r24, 0x01	; 1
    5ffe:	90 e0       	ldi	r25, 0x00	; 0
    6000:	da cf       	rjmp	.-76     	; 0x5fb6 <PubSubClient::subscribe(char const*) [clone .constprop.154]+0x36>
_ZN12PubSubClient9subscribeEPKc.constprop.154():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:470
#endif
}

boolean PubSubClient::subscribe(const char* topic) {
    return subscribe(topic, 0);
}
    6002:	80 e0       	ldi	r24, 0x00	; 0
    6004:	df 91       	pop	r29
    6006:	cf 91       	pop	r28
    6008:	08 95       	ret

0000600a <Print::printNumber(unsigned long, unsigned char)>:
_ZN5Print11printNumberEmh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:233
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    600a:	8f 92       	push	r8
    600c:	9f 92       	push	r9
    600e:	af 92       	push	r10
    6010:	bf 92       	push	r11
    6012:	ef 92       	push	r14
    6014:	ff 92       	push	r15
    6016:	0f 93       	push	r16
    6018:	1f 93       	push	r17
    601a:	cf 93       	push	r28
    601c:	df 93       	push	r29
    601e:	cd b7       	in	r28, 0x3d	; 61
    6020:	de b7       	in	r29, 0x3e	; 62
    6022:	a1 97       	sbiw	r28, 0x21	; 33
    6024:	0f b6       	in	r0, 0x3f	; 63
    6026:	f8 94       	cli
    6028:	de bf       	out	0x3e, r29	; 62
    602a:	0f be       	out	0x3f, r0	; 63
    602c:	cd bf       	out	0x3d, r28	; 61
    602e:	7c 01       	movw	r14, r24
    6030:	fa 01       	movw	r30, r20
    6032:	cb 01       	movw	r24, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:237
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    6034:	19 a2       	std	Y+33, r1	; 0x21
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:240

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    6036:	22 30       	cpi	r18, 0x02	; 2
    6038:	08 f4       	brcc	.+2      	; 0x603c <Print::printNumber(unsigned long, unsigned char)+0x32>
    603a:	2a e0       	ldi	r18, 0x0A	; 10
    603c:	8e 01       	movw	r16, r28
    603e:	0f 5d       	subi	r16, 0xDF	; 223
    6040:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:243

  do {
    char c = n % base;
    6042:	82 2e       	mov	r8, r18
    6044:	91 2c       	mov	r9, r1
    6046:	b1 2c       	mov	r11, r1
    6048:	a1 2c       	mov	r10, r1
    604a:	bf 01       	movw	r22, r30
    604c:	a5 01       	movw	r20, r10
    604e:	94 01       	movw	r18, r8
    6050:	0e 94 31 8a 	call	0x11462	; 0x11462 <__udivmodsi4>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:244
    n /= base;
    6054:	f9 01       	movw	r30, r18
    6056:	ca 01       	movw	r24, r20
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:246

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    6058:	6a 30       	cpi	r22, 0x0A	; 10
    605a:	74 f5       	brge	.+92     	; 0x60b8 <Print::printNumber(unsigned long, unsigned char)+0xae>
    605c:	60 5d       	subi	r22, 0xD0	; 208
    605e:	d8 01       	movw	r26, r16
    6060:	6e 93       	st	-X, r22
    6062:	8d 01       	movw	r16, r26
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:247
  } while(n);
    6064:	23 2b       	or	r18, r19
    6066:	24 2b       	or	r18, r20
    6068:	25 2b       	or	r18, r21
    606a:	79 f7       	brne	.-34     	; 0x604a <Print::printNumber(unsigned long, unsigned char)+0x40>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    606c:	90 e0       	ldi	r25, 0x00	; 0
    606e:	80 e0       	ldi	r24, 0x00	; 0
write():
    6070:	10 97       	sbiw	r26, 0x00	; 0
    6072:	89 f0       	breq	.+34     	; 0x6096 <Print::printNumber(unsigned long, unsigned char)+0x8c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.h:54
      return write((const uint8_t *)str, strlen(str));
    6074:	fd 01       	movw	r30, r26
    6076:	01 90       	ld	r0, Z+
    6078:	00 20       	and	r0, r0
    607a:	e9 f7       	brne	.-6      	; 0x6076 <Print::printNumber(unsigned long, unsigned char)+0x6c>
    607c:	31 97       	sbiw	r30, 0x01	; 1
    607e:	af 01       	movw	r20, r30
    6080:	4a 1b       	sub	r20, r26
    6082:	5b 0b       	sbc	r21, r27
    6084:	d7 01       	movw	r26, r14
    6086:	ed 91       	ld	r30, X+
    6088:	fc 91       	ld	r31, X
    608a:	02 80       	ldd	r0, Z+2	; 0x02
    608c:	f3 81       	ldd	r31, Z+3	; 0x03
    608e:	e0 2d       	mov	r30, r0
    6090:	b8 01       	movw	r22, r16
    6092:	c7 01       	movw	r24, r14
    6094:	19 95       	eicall
_ZN5Print11printNumberEmh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:250

  return write(str);
}
    6096:	a1 96       	adiw	r28, 0x21	; 33
    6098:	0f b6       	in	r0, 0x3f	; 63
    609a:	f8 94       	cli
    609c:	de bf       	out	0x3e, r29	; 62
    609e:	0f be       	out	0x3f, r0	; 63
    60a0:	cd bf       	out	0x3d, r28	; 61
    60a2:	df 91       	pop	r29
    60a4:	cf 91       	pop	r28
    60a6:	1f 91       	pop	r17
    60a8:	0f 91       	pop	r16
    60aa:	ff 90       	pop	r15
    60ac:	ef 90       	pop	r14
    60ae:	bf 90       	pop	r11
    60b0:	af 90       	pop	r10
    60b2:	9f 90       	pop	r9
    60b4:	8f 90       	pop	r8
    60b6:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:246

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    60b8:	69 5c       	subi	r22, 0xC9	; 201
    60ba:	d1 cf       	rjmp	.-94     	; 0x605e <Print::printNumber(unsigned long, unsigned char)+0x54>

000060bc <PubSubClient::publish(char const*, char const*)>:
_ZN12PubSubClient7publishEPKcS1_():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:347
        return true;
    }
    return false;
}

boolean PubSubClient::publish(const char* topic, const char* payload) {
    60bc:	af 92       	push	r10
    60be:	bf 92       	push	r11
    60c0:	cf 92       	push	r12
    60c2:	df 92       	push	r13
    60c4:	ef 92       	push	r14
    60c6:	ff 92       	push	r15
    60c8:	0f 93       	push	r16
    60ca:	1f 93       	push	r17
    60cc:	cf 93       	push	r28
    60ce:	df 93       	push	r29
    60d0:	7c 01       	movw	r14, r24
    60d2:	5b 01       	movw	r10, r22
    60d4:	8a 01       	movw	r16, r20
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:348
    return publish(topic,(const uint8_t*)payload,strlen(payload),false);
    60d6:	ea 01       	movw	r28, r20
    60d8:	09 90       	ld	r0, Y+
    60da:	00 20       	and	r0, r0
    60dc:	e9 f7       	brne	.-6      	; 0x60d8 <PubSubClient::publish(char const*, char const*)+0x1c>
    60de:	21 97       	sbiw	r28, 0x01	; 1
    60e0:	c4 1b       	sub	r28, r20
    60e2:	d5 0b       	sbc	r29, r21
publish():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:360
boolean PubSubClient::publish(const char* topic, const uint8_t* payload, unsigned int plength) {
    return publish(topic, payload, plength, false);
}

boolean PubSubClient::publish(const char* topic, const uint8_t* payload, unsigned int plength, boolean retained) {
    if (connected()) {
    60e4:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <PubSubClient::connected()>
    60e8:	88 23       	and	r24, r24
    60ea:	c9 f1       	breq	.+114    	; 0x615e <PubSubClient::publish(char const*, char const*)+0xa2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:361
        if (MQTT_MAX_PACKET_SIZE < 5 + 2+strlen(topic) + plength) {
    60ec:	f5 01       	movw	r30, r10
    60ee:	01 90       	ld	r0, Z+
    60f0:	00 20       	and	r0, r0
    60f2:	e9 f7       	brne	.-6      	; 0x60ee <PubSubClient::publish(char const*, char const*)+0x32>
    60f4:	31 97       	sbiw	r30, 0x01	; 1
    60f6:	ea 19       	sub	r30, r10
    60f8:	fb 09       	sbc	r31, r11
    60fa:	ce 01       	movw	r24, r28
    60fc:	07 96       	adiw	r24, 0x07	; 7
    60fe:	e8 0f       	add	r30, r24
    6100:	f9 1f       	adc	r31, r25
    6102:	e1 30       	cpi	r30, 0x01	; 1
    6104:	f2 40       	sbci	r31, 0x02	; 2
    6106:	58 f5       	brcc	.+86     	; 0x615e <PubSubClient::publish(char const*, char const*)+0xa2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:367
            // Too long
            return false;
        }
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        length = writeString(topic,buffer,length);
    6108:	67 01       	movw	r12, r14
    610a:	82 e0       	ldi	r24, 0x02	; 2
    610c:	c8 0e       	add	r12, r24
    610e:	d1 1c       	adc	r13, r1
    6110:	45 e0       	ldi	r20, 0x05	; 5
    6112:	50 e0       	ldi	r21, 0x00	; 0
    6114:	b6 01       	movw	r22, r12
    6116:	c5 01       	movw	r24, r10
    6118:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.157]>
    611c:	f8 01       	movw	r30, r16
    611e:	dc 01       	movw	r26, r24
    6120:	12 96       	adiw	r26, 0x02	; 2
    6122:	ae 0d       	add	r26, r14
    6124:	bf 1d       	adc	r27, r15
    6126:	a8 01       	movw	r20, r16
    6128:	4c 0f       	add	r20, r28
    612a:	5d 1f       	adc	r21, r29
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:369
        uint16_t i;
        for (i=0;i<plength;i++) {
    612c:	e4 17       	cp	r30, r20
    612e:	f5 07       	cpc	r31, r21
    6130:	19 f0       	breq	.+6      	; 0x6138 <PubSubClient::publish(char const*, char const*)+0x7c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:370
            buffer[length++] = payload[i];
    6132:	21 91       	ld	r18, Z+
    6134:	2d 93       	st	X+, r18
    6136:	fa cf       	rjmp	.-12     	; 0x612c <PubSubClient::publish(char const*, char const*)+0x70>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:376
        }
        uint8_t header = MQTTPUBLISH;
        if (retained) {
            header |= 1;
        }
        return write(header,buffer,length-5);
    6138:	25 97       	sbiw	r28, 0x05	; 5
    613a:	9e 01       	movw	r18, r28
    613c:	28 0f       	add	r18, r24
    613e:	39 1f       	adc	r19, r25
    6140:	a6 01       	movw	r20, r12
    6142:	60 e3       	ldi	r22, 0x30	; 48
    6144:	c7 01       	movw	r24, r14
_ZN12PubSubClient7publishEPKcS1_():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:349
    return false;
}

boolean PubSubClient::publish(const char* topic, const char* payload) {
    return publish(topic,(const uint8_t*)payload,strlen(payload),false);
}
    6146:	df 91       	pop	r29
    6148:	cf 91       	pop	r28
    614a:	1f 91       	pop	r17
    614c:	0f 91       	pop	r16
    614e:	ff 90       	pop	r15
    6150:	ef 90       	pop	r14
    6152:	df 90       	pop	r13
    6154:	cf 90       	pop	r12
    6156:	bf 90       	pop	r11
    6158:	af 90       	pop	r10
publish():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:376
        }
        uint8_t header = MQTTPUBLISH;
        if (retained) {
            header |= 1;
        }
        return write(header,buffer,length-5);
    615a:	0c 94 88 16 	jmp	0x2d10	; 0x2d10 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
_ZN12PubSubClient7publishEPKcS1_():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:349
    return false;
}

boolean PubSubClient::publish(const char* topic, const char* payload) {
    return publish(topic,(const uint8_t*)payload,strlen(payload),false);
}
    615e:	80 e0       	ldi	r24, 0x00	; 0
    6160:	df 91       	pop	r29
    6162:	cf 91       	pop	r28
    6164:	1f 91       	pop	r17
    6166:	0f 91       	pop	r16
    6168:	ff 90       	pop	r15
    616a:	ef 90       	pop	r14
    616c:	df 90       	pop	r13
    616e:	cf 90       	pop	r12
    6170:	bf 90       	pop	r11
    6172:	af 90       	pop	r10
    6174:	08 95       	ret

00006176 <budik_text_state(unsigned char, char*)>:
_Z16budik_text_statehPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:188

void budik_text_state(uint8_t args, char *text)
{
    6176:	cb 01       	movw	r24, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:189
  strcpy(text, "Zapnuto 06:45");
    6178:	63 ef       	ldi	r22, 0xF3	; 243
    617a:	72 e0       	ldi	r23, 0x02	; 2
    617c:	0c 94 c8 8c 	jmp	0x11990	; 0x11990 <strcpy>

00006180 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.158]>:
_Z11show_stringPciihjjb.constprop.158():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1252
    csize - velikost pisma
    fc - foreground color
    bc - backgroud color
    mode - ?
*/
void show_string(char *str, int16_t x, int16_t y, uint8_t csize, uint16_t fc, uint16_t bc, boolean mode)
    6180:	8f 92       	push	r8
    6182:	9f 92       	push	r9
    6184:	af 92       	push	r10
    6186:	bf 92       	push	r11
    6188:	cf 92       	push	r12
    618a:	df 92       	push	r13
    618c:	ef 92       	push	r14
    618e:	ff 92       	push	r15
    6190:	0f 93       	push	r16
    6192:	1f 93       	push	r17
    6194:	cf 93       	push	r28
    6196:	df 93       	push	r29
    6198:	00 d0       	rcall	.+0      	; 0x619a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.158]+0x1a>
    619a:	00 d0       	rcall	.+0      	; 0x619c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.158]+0x1c>
    619c:	cd b7       	in	r28, 0x3d	; 61
    619e:	de b7       	in	r29, 0x3e	; 62
    61a0:	6c 01       	movw	r12, r24
    61a2:	5b 01       	movw	r10, r22
    61a4:	4a 01       	movw	r8, r20
Set_Text_Mode():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:541
}

//set text mode
void LCDWIKI_GUI::Set_Text_Mode(boolean mode)
{
	text_mode = mode;
    61a6:	10 92 c4 11 	sts	0x11C4, r1	; 0x8011c4 <my_lcd+0xd>
Set_Text_Size():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:529
}

//set text size
void LCDWIKI_GUI::Set_Text_Size(uint8_t s)
{
	text_size = s;
    61aa:	20 93 c3 11 	sts	0x11C3, r18	; 0x8011c3 <my_lcd+0xc>
Set_Text_colour():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:493
}

//set text colour with 16bit color
void LCDWIKI_GUI::Set_Text_colour(uint16_t color)
{
	text_color = color;
    61ae:	10 93 be 11 	sts	0x11BE, r17	; 0x8011be <my_lcd+0x7>
    61b2:	00 93 bd 11 	sts	0x11BD, r16	; 0x8011bd <my_lcd+0x6>
Set_Text_Back_colour():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:511
}

//set text background colour with 16bits color
void LCDWIKI_GUI::Set_Text_Back_colour(uint16_t color)
{
	text_bgcolor = color;	
    61b6:	f0 92 c0 11 	sts	0x11C0, r15	; 0x8011c0 <my_lcd+0x9>
    61ba:	e0 92 bf 11 	sts	0x11BF, r14	; 0x8011bf <my_lcd+0x8>
_ZN6String4initEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:133
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
    61be:	1a 82       	std	Y+2, r1	; 0x02
    61c0:	19 82       	std	Y+1, r1	; 0x01
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:134
  capacity = 0;
    61c2:	1c 82       	std	Y+4, r1	; 0x04
    61c4:	1b 82       	std	Y+3, r1	; 0x03
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:135
  len = 0;
    61c6:	1e 82       	std	Y+6, r1	; 0x06
    61c8:	1d 82       	std	Y+5, r1	; 0x05
__base_ctor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:31
/*********************************************/

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
    61ca:	fc 01       	movw	r30, r24
    61cc:	01 90       	ld	r0, Z+
    61ce:	00 20       	and	r0, r0
    61d0:	e9 f7       	brne	.-6      	; 0x61cc <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.158]+0x4c>
    61d2:	31 97       	sbiw	r30, 0x01	; 1
    61d4:	8f 01       	movw	r16, r30
    61d6:	08 1b       	sub	r16, r24
    61d8:	19 0b       	sbc	r17, r25
changeBuffer():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:157
  return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
  char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    61da:	b8 01       	movw	r22, r16
    61dc:	6f 5f       	subi	r22, 0xFF	; 255
    61de:	7f 4f       	sbci	r23, 0xFF	; 255
    61e0:	90 e0       	ldi	r25, 0x00	; 0
    61e2:	80 e0       	ldi	r24, 0x00	; 0
    61e4:	0e 94 ba 8b 	call	0x11774	; 0x11774 <realloc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:158
  if (newbuffer) {
    61e8:	00 97       	sbiw	r24, 0x00	; 0
    61ea:	81 f0       	breq	.+32     	; 0x620c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.158]+0x8c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:159
    buffer = newbuffer;
    61ec:	9a 83       	std	Y+2, r25	; 0x02
    61ee:	89 83       	std	Y+1, r24	; 0x01
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:160
    capacity = maxStrLen;
    61f0:	1c 83       	std	Y+4, r17	; 0x04
    61f2:	0b 83       	std	Y+3, r16	; 0x03
reserve():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:149

unsigned char String::reserve(unsigned int size)
{
  if (buffer && capacity >= size) return 1;
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
    61f4:	2d 81       	ldd	r18, Y+5	; 0x05
    61f6:	3e 81       	ldd	r19, Y+6	; 0x06
    61f8:	23 2b       	or	r18, r19
    61fa:	11 f4       	brne	.+4      	; 0x6200 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.158]+0x80>
    61fc:	fc 01       	movw	r30, r24
    61fe:	10 82       	st	Z, r1
copy():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:176
{
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
    6200:	1e 83       	std	Y+6, r17	; 0x06
    6202:	0d 83       	std	Y+5, r16	; 0x05
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:177
  strcpy(buffer, cstr);
    6204:	b6 01       	movw	r22, r12
    6206:	0e 94 c8 8c 	call	0x11990	; 0x11990 <strcpy>
    620a:	0c c0       	rjmp	.+24     	; 0x6224 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.158]+0xa4>
invalidate():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:140
  len = 0;
}

void String::invalidate(void)
{
  if (buffer) free(buffer);
    620c:	89 81       	ldd	r24, Y+1	; 0x01
    620e:	9a 81       	ldd	r25, Y+2	; 0x02
    6210:	00 97       	sbiw	r24, 0x00	; 0
    6212:	11 f0       	breq	.+4      	; 0x6218 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.158]+0x98>
    6214:	0e 94 2a 85 	call	0x10a54	; 0x10a54 <free>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:141
  buffer = NULL;
    6218:	1a 82       	std	Y+2, r1	; 0x02
    621a:	19 82       	std	Y+1, r1	; 0x01
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:142
  capacity = len = 0;
    621c:	1e 82       	std	Y+6, r1	; 0x06
    621e:	1d 82       	std	Y+5, r1	; 0x05
    6220:	1c 82       	std	Y+4, r1	; 0x04
    6222:	1b 82       	std	Y+3, r1	; 0x03
_Z11show_stringPciihjjb.constprop.158():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1258
{
  my_lcd.Set_Text_Mode(mode);
  my_lcd.Set_Text_Size(csize);
  my_lcd.Set_Text_colour(fc);
  my_lcd.Set_Text_Back_colour(bc);
  my_lcd.Print_String(str, x, y);
    6224:	a4 01       	movw	r20, r8
    6226:	b5 01       	movw	r22, r10
    6228:	ce 01       	movw	r24, r28
    622a:	01 96       	adiw	r24, 0x01	; 1
    622c:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.163]>
__base_dtor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  free(buffer);
    6230:	89 81       	ldd	r24, Y+1	; 0x01
    6232:	9a 81       	ldd	r25, Y+2	; 0x02
    6234:	0e 94 2a 85 	call	0x10a54	; 0x10a54 <free>
_Z11show_stringPciihjjb.constprop.158():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1259
}
    6238:	26 96       	adiw	r28, 0x06	; 6
    623a:	0f b6       	in	r0, 0x3f	; 63
    623c:	f8 94       	cli
    623e:	de bf       	out	0x3e, r29	; 62
    6240:	0f be       	out	0x3f, r0	; 63
    6242:	cd bf       	out	0x3d, r28	; 61
    6244:	df 91       	pop	r29
    6246:	cf 91       	pop	r28
    6248:	1f 91       	pop	r17
    624a:	0f 91       	pop	r16
    624c:	ff 90       	pop	r15
    624e:	ef 90       	pop	r14
    6250:	df 90       	pop	r13
    6252:	cf 90       	pop	r12
    6254:	bf 90       	pop	r11
    6256:	af 90       	pop	r10
    6258:	9f 90       	pop	r9
    625a:	8f 90       	pop	r8
    625c:	08 95       	ret

0000625e <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*)>:
_Z14button_click_1jjjjhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3391
  }
*/
//////////////////////////////////////////////////////////
/// typ tlacitka 1 ////
void button_click_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t font_size_1, uint8_t font_size_2, char *line1, char *line2)
{
    625e:	2f 92       	push	r2
    6260:	3f 92       	push	r3
    6262:	4f 92       	push	r4
    6264:	5f 92       	push	r5
    6266:	6f 92       	push	r6
    6268:	7f 92       	push	r7
    626a:	8f 92       	push	r8
    626c:	9f 92       	push	r9
    626e:	af 92       	push	r10
    6270:	bf 92       	push	r11
    6272:	cf 92       	push	r12
    6274:	df 92       	push	r13
    6276:	ef 92       	push	r14
    6278:	ff 92       	push	r15
    627a:	0f 93       	push	r16
    627c:	1f 93       	push	r17
    627e:	cf 93       	push	r28
    6280:	df 93       	push	r29
    6282:	00 d0       	rcall	.+0      	; 0x6284 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*)+0x26>
    6284:	1f 92       	push	r1
    6286:	cd b7       	in	r28, 0x3d	; 61
    6288:	de b7       	in	r29, 0x3e	; 62
    628a:	4c 01       	movw	r8, r24
    628c:	7c 83       	std	Y+4, r23	; 0x04
    628e:	6b 83       	std	Y+3, r22	; 0x03
    6290:	2a 01       	movw	r4, r20
    6292:	39 01       	movw	r6, r18
    6294:	09 83       	std	Y+1, r16	; 0x01
    6296:	ea 82       	std	Y+2, r14	; 0x02
    6298:	15 01       	movw	r2, r10
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
}

//set 16bits draw color
void LCDWIKI_GUI::Set_Draw_color(uint16_t color)
{
	draw_color = color;
    629a:	10 92 c2 11 	sts	0x11C2, r1	; 0x8011c2 <my_lcd+0xb>
    629e:	10 92 c1 11 	sts	0x11C1, r1	; 0x8011c1 <my_lcd+0xa>
    62a2:	10 e0       	ldi	r17, 0x00	; 0
    62a4:	00 e0       	ldi	r16, 0x00	; 0
_Z14button_click_1jjjjhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3402
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;

  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    62a6:	5b 01       	movw	r10, r22
    62a8:	a2 0e       	add	r10, r18
    62aa:	b3 1e       	adc	r11, r19
    62ac:	7c 01       	movw	r14, r24
    62ae:	e4 0e       	add	r14, r20
    62b0:	f5 1e       	adc	r15, r21
    62b2:	95 01       	movw	r18, r10
    62b4:	20 1b       	sub	r18, r16
    62b6:	31 0b       	sbc	r19, r17
    62b8:	a7 01       	movw	r20, r14
    62ba:	40 1b       	sub	r20, r16
    62bc:	51 0b       	sbc	r21, r17
    62be:	6b 81       	ldd	r22, Y+3	; 0x03
    62c0:	7c 81       	ldd	r23, Y+4	; 0x04
    62c2:	60 0f       	add	r22, r16
    62c4:	71 1f       	adc	r23, r17
    62c6:	c8 01       	movw	r24, r16
    62c8:	88 0d       	add	r24, r8
    62ca:	99 1d       	adc	r25, r9
    62cc:	0e 94 82 20 	call	0x4104	; 0x4104 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.172]>
    62d0:	0f 5f       	subi	r16, 0xFF	; 255
    62d2:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3401
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;

  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    62d4:	03 30       	cpi	r16, 0x03	; 3
    62d6:	11 05       	cpc	r17, r1
    62d8:	61 f7       	brne	.-40     	; 0x62b2 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*)+0x54>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3404
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);

  if (strlen(line1) > 0)
    62da:	f6 01       	movw	r30, r12
    62dc:	80 81       	ld	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3398
  uint16_t posy1 = 0;;
  uint16_t posx2 = 0;
  uint16_t posy2 = 0;
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
    62de:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3393
//////////////////////////////////////////////////////////
/// typ tlacitka 1 ////
void button_click_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t font_size_1, uint8_t font_size_2, char *line1, char *line2)
{
  uint16_t posx1 = 0;
  uint16_t posy1 = 0;;
    62e0:	b1 2c       	mov	r11, r1
    62e2:	a1 2c       	mov	r10, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3404

  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);

  if (strlen(line1) > 0)
    62e4:	88 23       	and	r24, r24
    62e6:	79 f1       	breq	.+94     	; 0x6346 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*)+0xe8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3407
  {
    num_lines_const = 2;
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    62e8:	01 90       	ld	r0, Z+
    62ea:	00 20       	and	r0, r0
    62ec:	e9 f7       	brne	.-6      	; 0x62e8 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*)+0x8a>
    62ee:	31 97       	sbiw	r30, 0x01	; 1
    62f0:	ec 19       	sub	r30, r12
    62f2:	fd 09       	sbc	r31, r13
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1268
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
    62f4:	89 81       	ldd	r24, Y+1	; 0x01
    62f6:	88 0f       	add	r24, r24
    62f8:	29 81       	ldd	r18, Y+1	; 0x01
    62fa:	82 0f       	add	r24, r18
    62fc:	88 0f       	add	r24, r24
_Z14button_click_1jjjjhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3409
  if (strlen(line1) > 0)
  {
    num_lines_const = 2;
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    62fe:	53 01       	movw	r10, r6
    6300:	a8 1a       	sub	r10, r24
    6302:	b1 08       	sbc	r11, r1
    6304:	b6 94       	lsr	r11
    6306:	a7 94       	ror	r10
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3410
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, WHITE, 0);
    6308:	4b 81       	ldd	r20, Y+3	; 0x03
    630a:	5c 81       	ldd	r21, Y+4	; 0x04
    630c:	41 50       	subi	r20, 0x01	; 1
    630e:	51 09       	sbc	r21, r1
    6310:	4a 0d       	add	r20, r10
    6312:	5b 1d       	adc	r21, r11
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1263
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    6314:	66 e0       	ldi	r22, 0x06	; 6
    6316:	e6 9f       	mul	r30, r22
    6318:	f0 01       	movw	r30, r0
    631a:	11 24       	eor	r1, r1
    631c:	2e 9f       	mul	r18, r30
    631e:	c0 01       	movw	r24, r0
    6320:	2f 9f       	mul	r18, r31
    6322:	90 0d       	add	r25, r0
    6324:	11 24       	eor	r1, r1
_Z14button_click_1jjjjhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3408

  if (strlen(line1) > 0)
  {
    num_lines_const = 2;
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
    6326:	b2 01       	movw	r22, r4
    6328:	68 1b       	sub	r22, r24
    632a:	79 0b       	sbc	r23, r25
    632c:	76 95       	lsr	r23
    632e:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3410
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, WHITE, 0);
    6330:	68 0d       	add	r22, r8
    6332:	79 1d       	adc	r23, r9
    6334:	ee 24       	eor	r14, r14
    6336:	ea 94       	dec	r14
    6338:	fe 2c       	mov	r15, r14
    633a:	10 e0       	ldi	r17, 0x00	; 0
    633c:	00 e0       	ldi	r16, 0x00	; 0
    633e:	c6 01       	movw	r24, r12
    6340:	0e 94 c0 30 	call	0x6180	; 0x6180 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.158]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3406
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);

  if (strlen(line1) > 0)
  {
    num_lines_const = 2;
    6344:	62 e0       	ldi	r22, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3413
    posx1 = (size_x - tmp1) / 2;
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, WHITE, 0);
  }

  if (strlen(line2) > 0)
    6346:	f1 01       	movw	r30, r2
    6348:	80 81       	ld	r24, Z
    634a:	88 23       	and	r24, r24
    634c:	b1 f1       	breq	.+108    	; 0x63ba <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*)+0x15c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3416
  {
    num_lines_const = num_lines_const + 2;
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    634e:	01 90       	ld	r0, Z+
    6350:	00 20       	and	r0, r0
    6352:	e9 f7       	brne	.-6      	; 0x634e <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*)+0xf0>
    6354:	9f 01       	movw	r18, r30
    6356:	21 50       	subi	r18, 0x01	; 1
    6358:	31 09       	sbc	r19, r1
    635a:	22 19       	sub	r18, r2
    635c:	33 09       	sbc	r19, r3
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1268
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
    635e:	8a 81       	ldd	r24, Y+2	; 0x02
    6360:	88 0f       	add	r24, r24
    6362:	fa 81       	ldd	r31, Y+2	; 0x02
    6364:	8f 0f       	add	r24, r31
    6366:	88 0f       	add	r24, r24
_Z14button_click_1jjjjhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3418
  if (strlen(line2) > 0)
  {
    num_lines_const = num_lines_const + 2;
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) / num_lines_const);
    6368:	a3 01       	movw	r20, r6
    636a:	48 1b       	sub	r20, r24
    636c:	51 09       	sbc	r21, r1
    636e:	ca 01       	movw	r24, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3415
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, WHITE, 0);
  }

  if (strlen(line2) > 0)
  {
    num_lines_const = num_lines_const + 2;
    6370:	6e 5f       	subi	r22, 0xFE	; 254
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3418
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) / num_lines_const);
    6372:	70 e0       	ldi	r23, 0x00	; 0
    6374:	0e 94 09 8a 	call	0x11412	; 0x11412 <__udivmodhi4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3419
    show_string(line2, x + posx2 , y + posy2 - 1 , font_size_2, BLACK, WHITE, 0);
    6378:	8b 81       	ldd	r24, Y+3	; 0x03
    637a:	9c 81       	ldd	r25, Y+4	; 0x04
    637c:	01 97       	sbiw	r24, 0x01	; 1
    637e:	a8 0e       	add	r10, r24
    6380:	b9 1e       	adc	r11, r25
    6382:	ab 01       	movw	r20, r22
    6384:	4a 0d       	add	r20, r10
    6386:	5b 1d       	adc	r21, r11
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1263
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    6388:	96 e0       	ldi	r25, 0x06	; 6
    638a:	29 9f       	mul	r18, r25
    638c:	90 01       	movw	r18, r0
    638e:	11 24       	eor	r1, r1
    6390:	f2 9f       	mul	r31, r18
    6392:	c0 01       	movw	r24, r0
    6394:	f3 9f       	mul	r31, r19
    6396:	90 0d       	add	r25, r0
    6398:	11 24       	eor	r1, r1
_Z14button_click_1jjjjhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3417

  if (strlen(line2) > 0)
  {
    num_lines_const = num_lines_const + 2;
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
    639a:	b2 01       	movw	r22, r4
    639c:	68 1b       	sub	r22, r24
    639e:	79 0b       	sbc	r23, r25
    63a0:	76 95       	lsr	r23
    63a2:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3419
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) / num_lines_const);
    show_string(line2, x + posx2 , y + posy2 - 1 , font_size_2, BLACK, WHITE, 0);
    63a4:	68 0d       	add	r22, r8
    63a6:	79 1d       	adc	r23, r9
    63a8:	ee 24       	eor	r14, r14
    63aa:	ea 94       	dec	r14
    63ac:	fe 2c       	mov	r15, r14
    63ae:	10 e0       	ldi	r17, 0x00	; 0
    63b0:	00 e0       	ldi	r16, 0x00	; 0
    63b2:	2f 2f       	mov	r18, r31
    63b4:	c1 01       	movw	r24, r2
    63b6:	0e 94 c0 30 	call	0x6180	; 0x6180 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.158]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3421
  }
}
    63ba:	0f 90       	pop	r0
    63bc:	0f 90       	pop	r0
    63be:	0f 90       	pop	r0
    63c0:	0f 90       	pop	r0
    63c2:	df 91       	pop	r29
    63c4:	cf 91       	pop	r28
    63c6:	1f 91       	pop	r17
    63c8:	0f 91       	pop	r16
    63ca:	ff 90       	pop	r15
    63cc:	ef 90       	pop	r14
    63ce:	df 90       	pop	r13
    63d0:	cf 90       	pop	r12
    63d2:	bf 90       	pop	r11
    63d4:	af 90       	pop	r10
    63d6:	9f 90       	pop	r9
    63d8:	8f 90       	pop	r8
    63da:	7f 90       	pop	r7
    63dc:	6f 90       	pop	r6
    63de:	5f 90       	pop	r5
    63e0:	4f 90       	pop	r4
    63e2:	3f 90       	pop	r3
    63e4:	2f 90       	pop	r2
    63e6:	08 95       	ret

000063e8 <TwoWire::requestFrom(unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:127
uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop) {
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint32_t)0, (uint8_t)0, (uint8_t)sendStop);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
    63e8:	86 2f       	mov	r24, r22
twi_readFrom():
    63ea:	64 2f       	mov	r22, r20
    63ec:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <twi_readFrom.part.0.constprop.183>
requestFrom():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:116
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    63f0:	10 92 da 0e 	sts	0x0EDA, r1	; 0x800eda <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:117
  rxBufferLength = read;
    63f4:	80 93 d9 0e 	sts	0x0ED9, r24	; 0x800ed9 <TwoWire::rxBufferLength>
_ZN7TwoWire11requestFromEhh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:129
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}
    63f8:	08 95       	ret

000063fa <ds2482owReadByte(unsigned char, unsigned char*)>:
_Z16ds2482owReadBytehPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:720
 * DS2482_ERR_START
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 */
uint8_t ds2482owReadByte(uint8_t address, uint8_t *byte)
{
    63fa:	ff 92       	push	r15
    63fc:	0f 93       	push	r16
    63fe:	1f 93       	push	r17
    6400:	cf 93       	push	r28
    6402:	df 93       	push	r29
    6404:	d8 2f       	mov	r29, r24
    6406:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:738
	i2c_start(address+I2C_WRITE);
	i2c_write(DS2482_C_OWRB);
	i2c_stop();
	*/
	
	Wire.beginTransmission(address);
    6408:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <TwoWire::beginTransmission(unsigned char) [clone .constprop.181]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:739
        Wire.write(DS2482_C_OWRB);
    640c:	86 e9       	ldi	r24, 0x96	; 150
    640e:	90 e0       	ldi	r25, 0x00	; 0
    6410:	0e 94 76 15 	call	0x2aec	; 0x2aec <TwoWire::write(int) [clone .constprop.116]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:740
        if (Wire.endTransmission() != I2C_ERROR_OK)
    6414:	86 ef       	ldi	r24, 0xF6	; 246
    6416:	91 e1       	ldi	r25, 0x11	; 17
    6418:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <TwoWire::endTransmission()>
    641c:	ce ef       	ldi	r28, 0xFE	; 254
    641e:	88 23       	and	r24, r24
    6420:	41 f0       	breq	.+16     	; 0x6432 <ds2482owReadByte(unsigned char, unsigned char*)+0x38>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:741
          return DS2482_ERR_WRITE;
    6422:	c3 e0       	ldi	r28, 0x03	; 3
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:809
	Wire.requestFrom(address, cnt);	
        if ( Wire.available() >= 1 )
             *byte = Wire.read();	

	return DS2482_ERR_OK;
}
    6424:	8c 2f       	mov	r24, r28
    6426:	df 91       	pop	r29
    6428:	cf 91       	pop	r28
    642a:	1f 91       	pop	r17
    642c:	0f 91       	pop	r16
    642e:	ff 90       	pop	r15
    6430:	08 95       	ret
    6432:	c1 50       	subi	r28, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:750
	 * Keep reading the status register until the 1WB bit is cleared.
	 */
	while(1)
	{
		p++;
		if (p>253)
    6434:	e1 f1       	breq	.+120    	; 0x64ae <ds2482owReadByte(unsigned char, unsigned char*)+0xb4>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:770
		//twiReadByte(byte);
		i2c_stop();		
		*/	

		uint8_t cnt = 1;
                Wire.requestFrom(address, cnt);
    6436:	41 e0       	ldi	r20, 0x01	; 1
    6438:	6d 2f       	mov	r22, r29
    643a:	86 ef       	ldi	r24, 0xF6	; 246
    643c:	91 e1       	ldi	r25, 0x11	; 17
    643e:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <TwoWire::requestFrom(unsigned char, unsigned char)>
available():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:238
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
    6442:	80 91 d9 0e 	lds	r24, 0x0ED9	; 0x800ed9 <TwoWire::rxBufferLength>
    6446:	90 91 da 0e 	lds	r25, 0x0EDA	; 0x800eda <TwoWire::rxBufferIndex>
    644a:	89 1b       	sub	r24, r25
    644c:	99 0b       	sbc	r25, r25
_Z16ds2482owReadBytehPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:771
                if ( Wire.available() >= 1 )
    644e:	18 16       	cp	r1, r24
    6450:	19 06       	cpc	r1, r25
    6452:	1c f4       	brge	.+6      	; 0x645a <ds2482owReadByte(unsigned char, unsigned char*)+0x60>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:772
                   t = Wire.read();
    6454:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <TwoWire::read() [clone .constprop.139]>
    6458:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:775
		

		if(!(t & DS2482_S_1WB))
    645a:	f0 fc       	sbrc	r15, 0
    645c:	ea cf       	rjmp	.-44     	; 0x6432 <ds2482owReadByte(unsigned char, unsigned char*)+0x38>
ds2482setReadPointer():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:258
	if(i2c_write(pointer)==FALSE){i2c_stop(); return DS2482_ERR_WRITE;}
	i2c_stop();
	return DS2482_ERR_OK;
	*/

        Wire.beginTransmission(address);
    645e:	8d 2f       	mov	r24, r29
    6460:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <TwoWire::beginTransmission(unsigned char) [clone .constprop.181]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:259
        Wire.write(DS2482_C_SRP);
    6464:	81 ee       	ldi	r24, 0xE1	; 225
    6466:	90 e0       	ldi	r25, 0x00	; 0
    6468:	0e 94 76 15 	call	0x2aec	; 0x2aec <TwoWire::write(int) [clone .constprop.116]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:260
        Wire.write(pointer);
    646c:	61 ee       	ldi	r22, 0xE1	; 225
    646e:	86 ef       	ldi	r24, 0xF6	; 246
    6470:	91 e1       	ldi	r25, 0x11	; 17
    6472:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:261
        if (Wire.endTransmission() == I2C_ERROR_OK)
    6476:	86 ef       	ldi	r24, 0xF6	; 246
    6478:	91 e1       	ldi	r25, 0x11	; 17
    647a:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <TwoWire::endTransmission()>
    647e:	c8 2f       	mov	r28, r24
    6480:	81 11       	cpse	r24, r1
    6482:	cf cf       	rjmp	.-98     	; 0x6422 <ds2482owReadByte(unsigned char, unsigned char*)+0x28>
_Z16ds2482owReadBytehPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:804
	*byte=t;
	i2c_stop();
	*/

	uint8_t cnt = 1;
	Wire.requestFrom(address, cnt);	
    6484:	41 e0       	ldi	r20, 0x01	; 1
    6486:	6d 2f       	mov	r22, r29
    6488:	86 ef       	ldi	r24, 0xF6	; 246
    648a:	91 e1       	ldi	r25, 0x11	; 17
    648c:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <TwoWire::requestFrom(unsigned char, unsigned char)>
available():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:238
    6490:	80 91 d9 0e 	lds	r24, 0x0ED9	; 0x800ed9 <TwoWire::rxBufferLength>
    6494:	90 91 da 0e 	lds	r25, 0x0EDA	; 0x800eda <TwoWire::rxBufferIndex>
    6498:	89 1b       	sub	r24, r25
    649a:	99 0b       	sbc	r25, r25
_Z16ds2482owReadBytehPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:805
        if ( Wire.available() >= 1 )
    649c:	18 16       	cp	r1, r24
    649e:	19 06       	cpc	r1, r25
    64a0:	0c f0       	brlt	.+2      	; 0x64a4 <ds2482owReadByte(unsigned char, unsigned char*)+0xaa>
    64a2:	c0 cf       	rjmp	.-128    	; 0x6424 <ds2482owReadByte(unsigned char, unsigned char*)+0x2a>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:806
             *byte = Wire.read();	
    64a4:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <TwoWire::read() [clone .constprop.139]>
    64a8:	f8 01       	movw	r30, r16
    64aa:	80 83       	st	Z, r24
    64ac:	bb cf       	rjmp	.-138    	; 0x6424 <ds2482owReadByte(unsigned char, unsigned char*)+0x2a>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:751
	 */
	while(1)
	{
		p++;
		if (p>253)
			return DS2482_ERR_READ;
    64ae:	c4 e0       	ldi	r28, 0x04	; 4
    64b0:	b9 cf       	rjmp	.-142    	; 0x6424 <ds2482owReadByte(unsigned char, unsigned char*)+0x2a>

000064b2 <ds2482owWriteByte(unsigned char, unsigned char)>:
_Z17ds2482owWriteBytehh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:550
 * DS2482_ERR_START
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 */
uint8_t ds2482owWriteByte(uint8_t address, uint8_t byte)
{
    64b2:	0f 93       	push	r16
    64b4:	1f 93       	push	r17
    64b6:	cf 93       	push	r28
    64b8:	df 93       	push	r29
    64ba:	08 2f       	mov	r16, r24
    64bc:	d6 2f       	mov	r29, r22
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:571
	if(i2c_write(DS2482_C_OWWB)==FALSE){i2c_stop();return DS2482_ERR_WRITE;}
	if(i2c_write(byte)==FALSE){i2c_stop();return DS2482_ERR_WRITE;}
	i2c_stop();
	*/

	Wire.beginTransmission(address);
    64be:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <TwoWire::beginTransmission(unsigned char) [clone .constprop.181]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:572
        Wire.write(DS2482_C_OWWB);
    64c2:	85 ea       	ldi	r24, 0xA5	; 165
    64c4:	90 e0       	ldi	r25, 0x00	; 0
    64c6:	0e 94 76 15 	call	0x2aec	; 0x2aec <TwoWire::write(int) [clone .constprop.116]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:573
	Wire.write(byte);
    64ca:	6d 2f       	mov	r22, r29
    64cc:	86 ef       	ldi	r24, 0xF6	; 246
    64ce:	91 e1       	ldi	r25, 0x11	; 17
    64d0:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:574
        if (Wire.endTransmission() != I2C_ERROR_OK)
    64d4:	86 ef       	ldi	r24, 0xF6	; 246
    64d6:	91 e1       	ldi	r25, 0x11	; 17
    64d8:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <TwoWire::endTransmission()>
    64dc:	c8 2f       	mov	r28, r24
    64de:	81 11       	cpse	r24, r1
    64e0:	1d c0       	rjmp	.+58     	; 0x651c <ds2482owWriteByte(unsigned char, unsigned char)+0x6a>
    64e2:	1e ef       	ldi	r17, 0xFE	; 254
    64e4:	11 50       	subi	r17, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:584
	 * Keep reading the status register until the 1WB bit is cleared.
	 */
	while(1)
	{
		p++;
		if (p>253){
    64e6:	e1 f0       	breq	.+56     	; 0x6520 <ds2482owWriteByte(unsigned char, unsigned char)+0x6e>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:605
		twiReadByte(&byte);
		i2c_stop();
		*/
		///todo byresit ukazatel
		uint8_t cnt = 1;
                Wire.requestFrom(address, cnt);
    64e8:	41 e0       	ldi	r20, 0x01	; 1
    64ea:	60 2f       	mov	r22, r16
    64ec:	86 ef       	ldi	r24, 0xF6	; 246
    64ee:	91 e1       	ldi	r25, 0x11	; 17
    64f0:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <TwoWire::requestFrom(unsigned char, unsigned char)>
available():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:238
    64f4:	80 91 d9 0e 	lds	r24, 0x0ED9	; 0x800ed9 <TwoWire::rxBufferLength>
    64f8:	90 91 da 0e 	lds	r25, 0x0EDA	; 0x800eda <TwoWire::rxBufferIndex>
    64fc:	89 1b       	sub	r24, r25
    64fe:	99 0b       	sbc	r25, r25
_Z17ds2482owWriteBytehh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:606
                if ( Wire.available() >= 1 )
    6500:	18 16       	cp	r1, r24
    6502:	19 06       	cpc	r1, r25
    6504:	1c f4       	brge	.+6      	; 0x650c <ds2482owWriteByte(unsigned char, unsigned char)+0x5a>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:607
                   byte = Wire.read();
    6506:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <TwoWire::read() [clone .constprop.139]>
    650a:	d8 2f       	mov	r29, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:610


		if(!(byte & DS2482_S_1WB))
    650c:	d0 fd       	sbrc	r29, 0
    650e:	ea cf       	rjmp	.-44     	; 0x64e4 <ds2482owWriteByte(unsigned char, unsigned char)+0x32>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:616
			break;
	}

	
	return DS2482_ERR_OK;
}
    6510:	8c 2f       	mov	r24, r28
    6512:	df 91       	pop	r29
    6514:	cf 91       	pop	r28
    6516:	1f 91       	pop	r17
    6518:	0f 91       	pop	r16
    651a:	08 95       	ret
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:575

	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWWB);
	Wire.write(byte);
        if (Wire.endTransmission() != I2C_ERROR_OK)
          return DS2482_ERR_WRITE;
    651c:	c3 e0       	ldi	r28, 0x03	; 3
    651e:	f8 cf       	rjmp	.-16     	; 0x6510 <ds2482owWriteByte(unsigned char, unsigned char)+0x5e>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:585
	 */
	while(1)
	{
		p++;
		if (p>253){
			return DS2482_ERR_READ;
    6520:	c4 e0       	ldi	r28, 0x04	; 4
    6522:	f6 cf       	rjmp	.-20     	; 0x6510 <ds2482owWriteByte(unsigned char, unsigned char)+0x5e>

00006524 <owMatchRom(unsigned char, unsigned char*)>:
_Z10owMatchRomhPh():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:48
 * DS2482_ERR_START
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 */
uint8_t owMatchRom(uint8_t ds2482_address, uint8_t *rom)
{
    6524:	ef 92       	push	r14
    6526:	ff 92       	push	r15
    6528:	1f 93       	push	r17
    652a:	cf 93       	push	r28
    652c:	df 93       	push	r29
    652e:	18 2f       	mov	r17, r24
    6530:	7b 01       	movw	r14, r22
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:50
	uint8_t r;
	r = ds2482owWriteByte(ds2482_address, OW_MATCH_ROM);
    6532:	65 e5       	ldi	r22, 0x55	; 85
    6534:	0e 94 59 32 	call	0x64b2	; 0x64b2 <ds2482owWriteByte(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:51
	if(r)
    6538:	81 11       	cpse	r24, r1
    653a:	0d c0       	rjmp	.+26     	; 0x6556 <owMatchRom(unsigned char, unsigned char*)+0x32>
    653c:	e7 01       	movw	r28, r14
    653e:	88 e0       	ldi	r24, 0x08	; 8
    6540:	e8 0e       	add	r14, r24
    6542:	f1 1c       	adc	r15, r1
owWriteBlock():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:29
{
	uint8_t r, c;
	
	for(c=0;c<length;c++)
	{
		r = ds2482owWriteByte(ds2482_address, *(block+c));
    6544:	69 91       	ld	r22, Y+
    6546:	81 2f       	mov	r24, r17
    6548:	0e 94 59 32 	call	0x64b2	; 0x64b2 <ds2482owWriteByte(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:30
		if(r)
    654c:	81 11       	cpse	r24, r1
    654e:	03 c0       	rjmp	.+6      	; 0x6556 <owMatchRom(unsigned char, unsigned char*)+0x32>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:27
 */
uint8_t owWriteBlock(uint8_t ds2482_address, uint8_t *block, uint8_t length)
{
	uint8_t r, c;
	
	for(c=0;c<length;c++)
    6550:	ec 16       	cp	r14, r28
    6552:	fd 06       	cpc	r15, r29
    6554:	b9 f7       	brne	.-18     	; 0x6544 <owMatchRom(unsigned char, unsigned char*)+0x20>
_Z10owMatchRomhPh():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:59
	r = owWriteBlock(ds2482_address, rom, 8);
	if(r)
		return r;
	
	return DS2482_ERR_OK;
}
    6556:	df 91       	pop	r29
    6558:	cf 91       	pop	r28
    655a:	1f 91       	pop	r17
    655c:	ff 90       	pop	r15
    655e:	ef 90       	pop	r14
    6560:	08 95       	ret

00006562 <ds2482owReset(unsigned char)>:
_Z13ds2482owReseth():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:475
 * DS2482_ERR_WRITE
 * DS2482_ERR_READ
 * DS2482_ERR_NO_DEVICE
 */
uint8_t ds2482owReset(uint8_t address)
{
    6562:	0f 93       	push	r16
    6564:	1f 93       	push	r17
    6566:	cf 93       	push	r28
    6568:	df 93       	push	r29
    656a:	08 2f       	mov	r16, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:493
	i2c_start(address+I2C_WRITE);
	i2c_write(DS2482_C_OWRS);
	i2c_stop();
	*/

	Wire.beginTransmission(address);
    656c:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <TwoWire::beginTransmission(unsigned char) [clone .constprop.181]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:494
        Wire.write(DS2482_C_OWRS);
    6570:	84 eb       	ldi	r24, 0xB4	; 180
    6572:	90 e0       	ldi	r25, 0x00	; 0
    6574:	0e 94 76 15 	call	0x2aec	; 0x2aec <TwoWire::write(int) [clone .constprop.116]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:495
        if (Wire.endTransmission() != I2C_ERROR_OK)
    6578:	86 ef       	ldi	r24, 0xF6	; 246
    657a:	91 e1       	ldi	r25, 0x11	; 17
    657c:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <TwoWire::endTransmission()>
    6580:	c8 2f       	mov	r28, r24
    6582:	81 11       	cpse	r24, r1
    6584:	1b c0       	rjmp	.+54     	; 0x65bc <ds2482owReset(unsigned char)+0x5a>
    6586:	de ef       	ldi	r29, 0xFE	; 254
    6588:	d1 50       	subi	r29, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:520
		//twiReadByte(&byte);
		byte=i2c_readNak();
		i2c_stop();
		*/
		p++;
                if (p>253)
    658a:	f9 f0       	breq	.+62     	; 0x65ca <ds2482owReset(unsigned char)+0x68>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:524
                  return DS2482_ERR_READ;		

		uint8_t cnt = 1;
		Wire.requestFrom(address, cnt);
    658c:	41 e0       	ldi	r20, 0x01	; 1
    658e:	60 2f       	mov	r22, r16
    6590:	86 ef       	ldi	r24, 0xF6	; 246
    6592:	91 e1       	ldi	r25, 0x11	; 17
    6594:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <TwoWire::requestFrom(unsigned char, unsigned char)>
available():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:238
    6598:	80 91 d9 0e 	lds	r24, 0x0ED9	; 0x800ed9 <TwoWire::rxBufferLength>
    659c:	90 91 da 0e 	lds	r25, 0x0EDA	; 0x800eda <TwoWire::rxBufferIndex>
    65a0:	89 1b       	sub	r24, r25
    65a2:	99 0b       	sbc	r25, r25
_Z13ds2482owReseth():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:525
		if ( Wire.available() >= 1 )
    65a4:	18 16       	cp	r1, r24
    65a6:	19 06       	cpc	r1, r25
    65a8:	1c f4       	brge	.+6      	; 0x65b0 <ds2482owReset(unsigned char)+0x4e>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:526
                   byte = Wire.read();
    65aa:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <TwoWire::read() [clone .constprop.139]>
    65ae:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:528

		if(!(byte & DS2482_S_1WB))
    65b0:	10 fd       	sbrc	r17, 0
    65b2:	ea cf       	rjmp	.-44     	; 0x6588 <ds2482owReset(unsigned char)+0x26>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:533
			break;
	}

	/* Check if there is any devices detected */
	if(!(byte & DS2482_S_PPD))
    65b4:	11 fd       	sbrc	r17, 1
    65b6:	03 c0       	rjmp	.+6      	; 0x65be <ds2482owReset(unsigned char)+0x5c>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:534
		return DS2482_ERR_NO_DEVICE;
    65b8:	c5 e0       	ldi	r28, 0x05	; 5
    65ba:	01 c0       	rjmp	.+2      	; 0x65be <ds2482owReset(unsigned char)+0x5c>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:496
	*/

	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWRS);
        if (Wire.endTransmission() != I2C_ERROR_OK)
          return DS2482_ERR_WRITE;
    65bc:	c3 e0       	ldi	r28, 0x03	; 3
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:537
	/* Check if there is any devices detected */
	if(!(byte & DS2482_S_PPD))
		return DS2482_ERR_NO_DEVICE;

	return DS2482_ERR_OK;
}
    65be:	8c 2f       	mov	r24, r28
    65c0:	df 91       	pop	r29
    65c2:	cf 91       	pop	r28
    65c4:	1f 91       	pop	r17
    65c6:	0f 91       	pop	r16
    65c8:	08 95       	ret
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:521
		byte=i2c_readNak();
		i2c_stop();
		*/
		p++;
                if (p>253)
                  return DS2482_ERR_READ;		
    65ca:	c4 e0       	ldi	r28, 0x04	; 4
    65cc:	f8 cf       	rjmp	.-16     	; 0x65be <ds2482owReset(unsigned char)+0x5c>

000065ce <owMatchNext(unsigned char, unsigned char*) [clone .constprop.114]>:
_Z11owMatchNexthPh.constprop.114():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:122
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 * DS2482_ERR_READ
 * DS2482_ERR_NO_DEVICE
 */
uint8_t owMatchNext(uint8_t ds2482_address, uint8_t *rom)
    65ce:	df 92       	push	r13
    65d0:	ef 92       	push	r14
    65d2:	ff 92       	push	r15
    65d4:	0f 93       	push	r16
    65d6:	1f 93       	push	r17
    65d8:	cf 93       	push	r28
    65da:	df 93       	push	r29
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:130
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
	serial_byte_number = 0;

	if(lastDevice)
    65dc:	90 91 d7 0e 	lds	r25, 0x0ED7	; 0x800ed7 <lastDevice>
    65e0:	99 23       	and	r25, r25
    65e2:	51 f0       	breq	.+20     	; 0x65f8 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.114]+0x2a>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:131
		return DS2482_ERR_NO_DEVICE;
    65e4:	d5 e0       	ldi	r29, 0x05	; 5
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:190
	}else
	{
		return DS2482_ERR_NO_DEVICE;
	}
	return DS2482_ERR_OK;
}
    65e6:	8d 2f       	mov	r24, r29
    65e8:	df 91       	pop	r29
    65ea:	cf 91       	pop	r28
    65ec:	1f 91       	pop	r17
    65ee:	0f 91       	pop	r16
    65f0:	ff 90       	pop	r15
    65f2:	ef 90       	pop	r14
    65f4:	df 90       	pop	r13
    65f6:	08 95       	ret
    65f8:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:133
	serial_byte_number = 0;

	if(lastDevice)
		return DS2482_ERR_NO_DEVICE;

	r = owReset(ds2482_address);
    65fa:	0e 94 b1 32 	call	0x6562	; 0x6562 <ds2482owReset(unsigned char)>
    65fe:	d8 2f       	mov	r29, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:134
	if(r)	return r;
    6600:	81 11       	cpse	r24, r1
    6602:	f1 cf       	rjmp	.-30     	; 0x65e6 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.114]+0x18>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:136

	r = owWriteByte(ds2482_address, OW_SEARCH_ROM);
    6604:	60 ef       	ldi	r22, 0xF0	; 240
    6606:	8f 2d       	mov	r24, r15
    6608:	0e 94 59 32 	call	0x64b2	; 0x64b2 <ds2482owWriteByte(unsigned char, unsigned char)>
    660c:	d8 2f       	mov	r29, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:128
{
	uint8_t r, bit_number, last_zero, direction, bit_test, serial_byte_mask, serial_byte_number;
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
	serial_byte_number = 0;
    660e:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:127
uint8_t owMatchNext(uint8_t ds2482_address, uint8_t *rom)
{
	uint8_t r, bit_number, last_zero, direction, bit_test, serial_byte_mask, serial_byte_number;
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
    6610:	11 e0       	ldi	r17, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:125
 * DS2482_ERR_NO_DEVICE
 */
uint8_t owMatchNext(uint8_t ds2482_address, uint8_t *rom)
{
	uint8_t r, bit_number, last_zero, direction, bit_test, serial_byte_mask, serial_byte_number;
	bit_number = 1;
    6612:	01 e0       	ldi	r16, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:137

	r = owReset(ds2482_address);
	if(r)	return r;

	r = owWriteByte(ds2482_address, OW_SEARCH_ROM);
	if(r)	return r;
    6614:	81 11       	cpse	r24, r1
    6616:	e7 cf       	rjmp	.-50     	; 0x65e6 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.114]+0x18>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:142
	
	while(serial_byte_number < 8)
	{
		/* If this discrepancy occurs before the last, use the same bit as we did the last time in this place */
		if(bit_number < lastDiscrepancy)
    6618:	80 91 ce 0e 	lds	r24, 0x0ECE	; 0x800ece <lastDiscrepancy>
    661c:	08 17       	cp	r16, r24
    661e:	50 f4       	brcc	.+20     	; 0x6634 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.114]+0x66>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:143
			direction = ((rom[serial_byte_number] & serial_byte_mask) > 0);
    6620:	ee 2d       	mov	r30, r14
    6622:	f0 e0       	ldi	r31, 0x00	; 0
    6624:	e1 53       	subi	r30, 0x31	; 49
    6626:	f1 4f       	sbci	r31, 0xF1	; 241
    6628:	80 81       	ld	r24, Z
    662a:	81 23       	and	r24, r17
    662c:	c1 e0       	ldi	r28, 0x01	; 1
    662e:	29 f4       	brne	.+10     	; 0x663a <owMatchNext(unsigned char, unsigned char*) [clone .constprop.114]+0x6c>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:146
		else
			/* If same bit as last time, pick 1, else pick 0 */
			direction = (bit_number == lastDiscrepancy);
    6630:	c0 e0       	ldi	r28, 0x00	; 0
    6632:	03 c0       	rjmp	.+6      	; 0x663a <owMatchNext(unsigned char, unsigned char*) [clone .constprop.114]+0x6c>
    6634:	c1 e0       	ldi	r28, 0x01	; 1
    6636:	80 13       	cpse	r24, r16
    6638:	fb cf       	rjmp	.-10     	; 0x6630 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.114]+0x62>
ds2482owWriteTriplet():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:666
	i2c_write(DS2482_C_OWT);
	i2c_write((*direction)?0x80:0x00);
	i2c_stop();
	*/

	Wire.beginTransmission(address);
    663a:	8f 2d       	mov	r24, r15
    663c:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <TwoWire::beginTransmission(unsigned char) [clone .constprop.181]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:667
        Wire.write(DS2482_C_OWT);
    6640:	88 e7       	ldi	r24, 0x78	; 120
    6642:	90 e0       	ldi	r25, 0x00	; 0
    6644:	0e 94 76 15 	call	0x2aec	; 0x2aec <TwoWire::write(int) [clone .constprop.116]>
_Z11owMatchNexthPh.constprop.114():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:668
        Wire.write((*direction)?0x80:0x00);
    6648:	90 e0       	ldi	r25, 0x00	; 0
    664a:	80 e0       	ldi	r24, 0x00	; 0
ds2482owWriteTriplet():
    664c:	cc 23       	and	r28, r28
    664e:	11 f0       	breq	.+4      	; 0x6654 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.114]+0x86>
_Z11owMatchNexthPh.constprop.114():
    6650:	80 e8       	ldi	r24, 0x80	; 128
    6652:	90 e0       	ldi	r25, 0x00	; 0
ds2482owWriteTriplet():
    6654:	0e 94 76 15 	call	0x2aec	; 0x2aec <TwoWire::write(int) [clone .constprop.116]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:669
        if (Wire.endTransmission() != I2C_ERROR_OK)
    6658:	86 ef       	ldi	r24, 0xF6	; 246
    665a:	91 e1       	ldi	r25, 0x11	; 17
    665c:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <TwoWire::endTransmission()>
    6660:	81 11       	cpse	r24, r1
    6662:	53 c0       	rjmp	.+166    	; 0x670a <owMatchNext(unsigned char, unsigned char*) [clone .constprop.114]+0x13c>
    6664:	6e ef       	ldi	r22, 0xFE	; 254
    6666:	d6 2e       	mov	r13, r22
    6668:	da 94       	dec	r13
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:679
	 * Keep reading the status register until the 1WB bit is cleared.
	 */
	while(1)
	{
		p++;
		if (p>253)
    666a:	dd 20       	and	r13, r13
    666c:	09 f4       	brne	.+2      	; 0x6670 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.114]+0xa2>
    666e:	4f c0       	rjmp	.+158    	; 0x670e <owMatchNext(unsigned char, unsigned char*) [clone .constprop.114]+0x140>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:698
		twiReadByte(direction);
		i2c_stop();
		*/
	
		uint8_t cnt = 1;
                Wire.requestFrom(address, cnt);	
    6670:	41 e0       	ldi	r20, 0x01	; 1
    6672:	6f 2d       	mov	r22, r15
    6674:	86 ef       	ldi	r24, 0xF6	; 246
    6676:	91 e1       	ldi	r25, 0x11	; 17
    6678:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <TwoWire::requestFrom(unsigned char, unsigned char)>
available():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:238
    667c:	80 91 d9 0e 	lds	r24, 0x0ED9	; 0x800ed9 <TwoWire::rxBufferLength>
    6680:	90 91 da 0e 	lds	r25, 0x0EDA	; 0x800eda <TwoWire::rxBufferIndex>
    6684:	89 1b       	sub	r24, r25
    6686:	99 0b       	sbc	r25, r25
ds2482owWriteTriplet():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:699
                if ( Wire.available() >= 1 )
    6688:	18 16       	cp	r1, r24
    668a:	19 06       	cpc	r1, r25
    668c:	1c f4       	brge	.+6      	; 0x6694 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.114]+0xc6>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:700
                   *direction = Wire.read();
    668e:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <TwoWire::read() [clone .constprop.139]>
    6692:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:702

		if(!((*direction) & DS2482_S_1WB))
    6694:	c0 fd       	sbrc	r28, 0
    6696:	e8 cf       	rjmp	.-48     	; 0x6668 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.114]+0x9a>
_Z11owMatchNexthPh.constprop.114():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:152

		r=ds2482owWriteTriplet(ds2482_address, &direction);
		if(r) return r;

		/* Convert direction to bit_test value */
		bit_test = (direction&(DS2482_S_SBR|DS2482_S_TSB)) >> 5;
    6698:	2c 2f       	mov	r18, r28
    669a:	30 e0       	ldi	r19, 0x00	; 0
    669c:	c9 01       	movw	r24, r18
    669e:	45 e0       	ldi	r20, 0x05	; 5
    66a0:	95 95       	asr	r25
    66a2:	87 95       	ror	r24
    66a4:	4a 95       	dec	r20
    66a6:	e1 f7       	brne	.-8      	; 0x66a0 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.114]+0xd2>
    66a8:	83 70       	andi	r24, 0x03	; 3
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:153
		direction>>=7;
    66aa:	22 0f       	add	r18, r18
    66ac:	23 2f       	mov	r18, r19
    66ae:	22 1f       	adc	r18, r18
    66b0:	33 0b       	sbc	r19, r19
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:154
		if(bit_test == 3)	/* Both bits where 1 */
    66b2:	83 30       	cpi	r24, 0x03	; 3
    66b4:	99 f0       	breq	.+38     	; 0x66dc <owMatchNext(unsigned char, unsigned char*) [clone .constprop.114]+0x10e>
    66b6:	ee 2d       	mov	r30, r14
    66b8:	f0 e0       	ldi	r31, 0x00	; 0
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:157
			break;

		if(bit_test == 0)
    66ba:	81 11       	cpse	r24, r1
    66bc:	1b c0       	rjmp	.+54     	; 0x66f4 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.114]+0x126>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:160
		{
			/* Multiple matches, the DS2482 handled our branching, we brached to direction */ 
			if(!direction)
    66be:	22 23       	and	r18, r18
    66c0:	11 f1       	breq	.+68     	; 0x6706 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.114]+0x138>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:167
		}
		/* else bit_test > 0 which means the direction was decied automaticly by the DS2482 */

		/* Set or clear the bit in the ROM */
		if(direction)
			rom[serial_byte_number] |= serial_byte_mask;
    66c2:	e1 53       	subi	r30, 0x31	; 49
    66c4:	f1 4f       	sbci	r31, 0xF1	; 241
    66c6:	80 81       	ld	r24, Z
    66c8:	81 2b       	or	r24, r17
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:169
		else
			rom[serial_byte_number] &= ~serial_byte_mask;
    66ca:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:171
			
		bit_number++;
    66cc:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:172
		serial_byte_mask <<= 1;
    66ce:	11 0f       	add	r17, r17
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:174

		if(serial_byte_mask == 0)
    66d0:	11 f4       	brne	.+4      	; 0x66d6 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.114]+0x108>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:176
		{
			serial_byte_number++;
    66d2:	e3 94       	inc	r14
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:177
			serial_byte_mask = 1;
    66d4:	11 e0       	ldi	r17, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:139
	if(r)	return r;

	r = owWriteByte(ds2482_address, OW_SEARCH_ROM);
	if(r)	return r;
	
	while(serial_byte_number < 8)
    66d6:	88 e0       	ldi	r24, 0x08	; 8
    66d8:	e8 12       	cpse	r14, r24
    66da:	9e cf       	rjmp	.-196    	; 0x6618 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.114]+0x4a>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:181
			serial_byte_number++;
			serial_byte_mask = 1;
		}
	}	/* while */
	
	if(!(bit_number < 65))
    66dc:	01 34       	cpi	r16, 0x41	; 65
    66de:	08 f4       	brcc	.+2      	; 0x66e2 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.114]+0x114>
    66e0:	81 cf       	rjmp	.-254    	; 0x65e4 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.114]+0x16>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:183
	{
		lastDiscrepancy = last_zero;
    66e2:	d0 93 ce 0e 	sts	0x0ECE, r29	; 0x800ece <lastDiscrepancy>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:184
		lastDevice = (lastDiscrepancy == 0);
    66e6:	81 e0       	ldi	r24, 0x01	; 1
    66e8:	d1 11       	cpse	r29, r1
    66ea:	80 e0       	ldi	r24, 0x00	; 0
    66ec:	80 93 d7 0e 	sts	0x0ED7, r24	; 0x800ed7 <lastDevice>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:189
	}else
	{
		return DS2482_ERR_NO_DEVICE;
	}
	return DS2482_ERR_OK;
    66f0:	d0 e0       	ldi	r29, 0x00	; 0
    66f2:	79 cf       	rjmp	.-270    	; 0x65e6 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.114]+0x18>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:166
				last_zero = bit_number;
		}
		/* else bit_test > 0 which means the direction was decied automaticly by the DS2482 */

		/* Set or clear the bit in the ROM */
		if(direction)
    66f4:	21 11       	cpse	r18, r1
    66f6:	e5 cf       	rjmp	.-54     	; 0x66c2 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.114]+0xf4>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:169
			rom[serial_byte_number] |= serial_byte_mask;
		else
			rom[serial_byte_number] &= ~serial_byte_mask;
    66f8:	e1 53       	subi	r30, 0x31	; 49
    66fa:	f1 4f       	sbci	r31, 0xF1	; 241
    66fc:	80 81       	ld	r24, Z
    66fe:	91 2f       	mov	r25, r17
    6700:	90 95       	com	r25
    6702:	89 23       	and	r24, r25
    6704:	e2 cf       	rjmp	.-60     	; 0x66ca <owMatchNext(unsigned char, unsigned char*) [clone .constprop.114]+0xfc>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:160
			break;

		if(bit_test == 0)
		{
			/* Multiple matches, the DS2482 handled our branching, we brached to direction */ 
			if(!direction)
    6706:	d0 2f       	mov	r29, r16
    6708:	f7 cf       	rjmp	.-18     	; 0x66f8 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.114]+0x12a>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:670

	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWT);
        Wire.write((*direction)?0x80:0x00);
        if (Wire.endTransmission() != I2C_ERROR_OK)
          return DS2482_ERR_WRITE;
    670a:	d3 e0       	ldi	r29, 0x03	; 3
    670c:	6c cf       	rjmp	.-296    	; 0x65e6 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.114]+0x18>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:680
	 */
	while(1)
	{
		p++;
		if (p>253)
			return DS2482_ERR_READ;
    670e:	d4 e0       	ldi	r29, 0x04	; 4
    6710:	6a cf       	rjmp	.-300    	; 0x65e6 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.114]+0x18>

00006712 <TwoWire::requestFrom(int, int) [clone .constprop.138]>:
_ZN7TwoWire11requestFromEii.constprop.138():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:131
uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
    6712:	68 2f       	mov	r22, r24
    6714:	88 e6       	ldi	r24, 0x68	; 104
    6716:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <twi_readFrom.part.0.constprop.183>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:116
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    671a:	10 92 da 0e 	sts	0x0EDA, r1	; 0x800eda <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:117
  rxBufferLength = read;
    671e:	80 93 d9 0e 	sts	0x0ED9, r24	; 0x800ed9 <TwoWire::rxBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:134
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}
    6722:	08 95       	ret

00006724 <RTC_DS1307::isrunning() [clone .constprop.136]>:
_ZN10RTC_DS13079isrunningEv.constprop.136():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:154
  txBufferLength = 0;
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
    6724:	88 e6       	ldi	r24, 0x68	; 104
    6726:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <TwoWire::beginTransmission(unsigned char) [clone .constprop.181]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:246
  return true;
}

uint8_t RTC_DS1307::isrunning(void) {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0);
    672a:	60 e0       	ldi	r22, 0x00	; 0
    672c:	86 ef       	ldi	r24, 0xF6	; 246
    672e:	91 e1       	ldi	r25, 0x11	; 17
    6730:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:247
  Wire.endTransmission();
    6734:	86 ef       	ldi	r24, 0xF6	; 246
    6736:	91 e1       	ldi	r25, 0x11	; 17
    6738:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:249

  Wire.requestFrom(DS1307_ADDRESS, 1);
    673c:	81 e0       	ldi	r24, 0x01	; 1
    673e:	90 e0       	ldi	r25, 0x00	; 0
    6740:	0e 94 89 33 	call	0x6712	; 0x6712 <TwoWire::requestFrom(int, int) [clone .constprop.138]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:250
  uint8_t ss = Wire._I2C_READ();
    6744:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <TwoWire::read() [clone .constprop.139]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:251
  return !(ss>>7);
    6748:	80 58       	subi	r24, 0x80	; 128
    674a:	87 fb       	bst	r24, 7
    674c:	88 27       	eor	r24, r24
    674e:	80 f9       	bld	r24, 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:252
}
    6750:	08 95       	ret

00006752 <IPAddress::printTo(Print&) const>:
_ZNK9IPAddress7printToER5Print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:104
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
    6752:	8f 92       	push	r8
    6754:	9f 92       	push	r9
    6756:	af 92       	push	r10
    6758:	bf 92       	push	r11
    675a:	cf 92       	push	r12
    675c:	df 92       	push	r13
    675e:	ef 92       	push	r14
    6760:	ff 92       	push	r15
    6762:	0f 93       	push	r16
    6764:	1f 93       	push	r17
    6766:	cf 93       	push	r28
    6768:	df 93       	push	r29
    676a:	7c 01       	movw	r14, r24
    676c:	eb 01       	movw	r28, r22
    676e:	6c 01       	movw	r12, r24
    6770:	82 e0       	ldi	r24, 0x02	; 2
    6772:	c8 0e       	add	r12, r24
    6774:	d1 1c       	adc	r13, r1
    6776:	47 01       	movw	r8, r14
    6778:	e5 e0       	ldi	r30, 0x05	; 5
    677a:	8e 0e       	add	r8, r30
    677c:	91 1c       	adc	r9, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:105
    size_t n = 0;
    677e:	10 e0       	ldi	r17, 0x00	; 0
    6780:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:108
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address.bytes[i], DEC);
    6782:	f6 01       	movw	r30, r12
    6784:	41 91       	ld	r20, Z+
    6786:	6f 01       	movw	r12, r30
print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:74
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    6788:	50 e0       	ldi	r21, 0x00	; 0
    678a:	70 e0       	ldi	r23, 0x00	; 0
    678c:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    678e:	2a e0       	ldi	r18, 0x0A	; 10
    6790:	ce 01       	movw	r24, r28
    6792:	0e 94 05 30 	call	0x600a	; 0x600a <Print::printNumber(unsigned long, unsigned char)>
    6796:	5c 01       	movw	r10, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:69
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    6798:	e8 81       	ld	r30, Y
    679a:	f9 81       	ldd	r31, Y+1	; 0x01
    679c:	01 90       	ld	r0, Z+
    679e:	f0 81       	ld	r31, Z
    67a0:	e0 2d       	mov	r30, r0
    67a2:	6e e2       	ldi	r22, 0x2E	; 46
    67a4:	ce 01       	movw	r24, r28
    67a6:	19 95       	eicall
_ZNK9IPAddress7printToER5Print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:109
        n += p.print('.');
    67a8:	8a 0d       	add	r24, r10
    67aa:	9b 1d       	adc	r25, r11
    67ac:	08 0f       	add	r16, r24
    67ae:	19 1f       	adc	r17, r25
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:106
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    67b0:	c8 14       	cp	r12, r8
    67b2:	d9 04       	cpc	r13, r9
    67b4:	31 f7       	brne	.-52     	; 0x6782 <IPAddress::printTo(Print&) const+0x30>
print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:74
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    67b6:	f7 01       	movw	r30, r14
    67b8:	45 81       	ldd	r20, Z+5	; 0x05
    67ba:	50 e0       	ldi	r21, 0x00	; 0
    67bc:	70 e0       	ldi	r23, 0x00	; 0
    67be:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    67c0:	2a e0       	ldi	r18, 0x0A	; 10
    67c2:	ce 01       	movw	r24, r28
    67c4:	0e 94 05 30 	call	0x600a	; 0x600a <Print::printNumber(unsigned long, unsigned char)>
_ZNK9IPAddress7printToER5Print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:113
        n += p.print(_address.bytes[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address.bytes[3], DEC);
    return n;
}
    67c8:	80 0f       	add	r24, r16
    67ca:	91 1f       	adc	r25, r17
    67cc:	df 91       	pop	r29
    67ce:	cf 91       	pop	r28
    67d0:	1f 91       	pop	r17
    67d2:	0f 91       	pop	r16
    67d4:	ff 90       	pop	r15
    67d6:	ef 90       	pop	r14
    67d8:	df 90       	pop	r13
    67da:	cf 90       	pop	r12
    67dc:	bf 90       	pop	r11
    67de:	af 90       	pop	r10
    67e0:	9f 90       	pop	r9
    67e2:	8f 90       	pop	r8
    67e4:	08 95       	ret

000067e6 <draw_menu(bool)>:
_Z9draw_menub():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:657




bool draw_menu(bool redraw)
{
    67e6:	2f 92       	push	r2
    67e8:	3f 92       	push	r3
    67ea:	4f 92       	push	r4
    67ec:	5f 92       	push	r5
    67ee:	6f 92       	push	r6
    67f0:	7f 92       	push	r7
    67f2:	8f 92       	push	r8
    67f4:	9f 92       	push	r9
    67f6:	af 92       	push	r10
    67f8:	bf 92       	push	r11
    67fa:	cf 92       	push	r12
    67fc:	df 92       	push	r13
    67fe:	ef 92       	push	r14
    6800:	ff 92       	push	r15
    6802:	0f 93       	push	r16
    6804:	1f 93       	push	r17
    6806:	cf 93       	push	r28
    6808:	df 93       	push	r29
    680a:	cd b7       	in	r28, 0x3d	; 61
    680c:	de b7       	in	r29, 0x3e	; 62
    680e:	c0 5d       	subi	r28, 0xD0	; 208
    6810:	d1 09       	sbc	r29, r1
    6812:	0f b6       	in	r0, 0x3f	; 63
    6814:	f8 94       	cli
    6816:	de bf       	out	0x3e, r29	; 62
    6818:	0f be       	out	0x3f, r0	; 63
    681a:	cd bf       	out	0x3d, r28	; 61
    681c:	cc 53       	subi	r28, 0x3C	; 60
    681e:	df 4f       	sbci	r29, 0xFF	; 255
    6820:	88 83       	st	Y, r24
    6822:	c4 5c       	subi	r28, 0xC4	; 196
    6824:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:682
  uint16_t new_x;
  uint16_t new_y;
  uint8_t rdr = 0;
  uint8_t args;

  current = MenuHistoryGetMenu();
    6826:	0e 94 2a 2e 	call	0x5c54	; 0x5c54 <MenuHistoryGetMenu()>
    682a:	2c 01       	movw	r4, r24
TP_Scan():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:186
  	}        
} 

uint8_t LCDWIKI_TOUCH::TP_Scan(uint8_t mode)
{
	if(TIRQ_STATE==0) 
    682c:	e0 91 b0 11 	lds	r30, 0x11B0	; 0x8011b0 <my_touch+0x17>
    6830:	f0 91 b1 11 	lds	r31, 0x11B1	; 0x8011b1 <my_touch+0x18>
    6834:	80 81       	ld	r24, Z
    6836:	90 91 b6 11 	lds	r25, 0x11B6	; 0x8011b6 <my_touch+0x1d>
    683a:	89 23       	and	r24, r25
    683c:	09 f0       	breq	.+2      	; 0x6840 <draw_menu(bool)+0x5a>
    683e:	12 c2       	rjmp	.+1060   	; 0x6c64 <draw_menu(bool)+0x47e>
TP_Read_Coordinate():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:147
} 

uint8_t LCDWIKI_TOUCH::TP_Read_Coordinate(uint16_t *x,uint16_t *y)
{
        uint16_t xtemp,ytemp;                                                    
        xtemp=TP_Read_XY(CMD_RDX);
    6840:	80 ed       	ldi	r24, 0xD0	; 208
    6842:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.40]>
    6846:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:148
        ytemp=TP_Read_XY(CMD_RDY);
    6848:	80 e9       	ldi	r24, 0x90	; 144
    684a:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.40]>
    684e:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:147
} 

uint8_t LCDWIKI_TOUCH::TP_Read_Coordinate(uint16_t *x,uint16_t *y)
{
        uint16_t xtemp,ytemp;                                                    
        xtemp=TP_Read_XY(CMD_RDX);
    6850:	80 ed       	ldi	r24, 0xD0	; 208
    6852:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.40]>
    6856:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:148
        ytemp=TP_Read_XY(CMD_RDY);
    6858:	80 e9       	ldi	r24, 0x90	; 144
    685a:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.40]>
    685e:	6c 01       	movw	r12, r24
TP_Read_Coordinate2():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:171
	flag=TP_Read_Coordinate(&x2,&y2);
    if(flag==0)
    {
		return 0;   
    }
	if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))//Before and after the two samples are within +- ERR_RANGE.
    6860:	0a 15       	cp	r16, r10
    6862:	1b 05       	cpc	r17, r11
    6864:	48 f0       	brcs	.+18     	; 0x6878 <draw_menu(bool)+0x92>
    6866:	c5 01       	movw	r24, r10
    6868:	c2 96       	adiw	r24, 0x32	; 50
    686a:	08 17       	cp	r16, r24
    686c:	19 07       	cpc	r17, r25
    686e:	50 f0       	brcs	.+20     	; 0x6884 <draw_menu(bool)+0x9e>
    6870:	a0 16       	cp	r10, r16
    6872:	b1 06       	cpc	r11, r17
    6874:	08 f4       	brcc	.+2      	; 0x6878 <draw_menu(bool)+0x92>
    6876:	51 c0       	rjmp	.+162    	; 0x691a <draw_menu(bool)+0x134>
    6878:	c8 01       	movw	r24, r16
    687a:	c2 96       	adiw	r24, 0x32	; 50
    687c:	a8 16       	cp	r10, r24
    687e:	b9 06       	cpc	r11, r25
    6880:	08 f0       	brcs	.+2      	; 0x6884 <draw_menu(bool)+0x9e>
    6882:	4b c0       	rjmp	.+150    	; 0x691a <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:172
    &&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
    6884:	ec 14       	cp	r14, r12
    6886:	fd 04       	cpc	r15, r13
    6888:	48 f0       	brcs	.+18     	; 0x689c <draw_menu(bool)+0xb6>
    688a:	c6 01       	movw	r24, r12
    688c:	c2 96       	adiw	r24, 0x32	; 50
    688e:	e8 16       	cp	r14, r24
    6890:	f9 06       	cpc	r15, r25
    6892:	48 f0       	brcs	.+18     	; 0x68a6 <draw_menu(bool)+0xc0>
    6894:	ce 14       	cp	r12, r14
    6896:	df 04       	cpc	r13, r15
    6898:	08 f4       	brcc	.+2      	; 0x689c <draw_menu(bool)+0xb6>
    689a:	3f c0       	rjmp	.+126    	; 0x691a <draw_menu(bool)+0x134>
    689c:	c7 01       	movw	r24, r14
    689e:	c2 96       	adiw	r24, 0x32	; 50
    68a0:	c8 16       	cp	r12, r24
    68a2:	d9 06       	cpc	r13, r25
    68a4:	d0 f5       	brcc	.+116    	; 0x691a <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:174
    {
        *x=(x1+x2)/2;
    68a6:	98 01       	movw	r18, r16
    68a8:	2a 0d       	add	r18, r10
    68aa:	3b 1d       	adc	r19, r11
    68ac:	36 95       	lsr	r19
    68ae:	27 95       	ror	r18
TP_Scan():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:201
			temp = (long)XFAC*x/10000;
			x=temp+XOFFSET;
			temp = (long)YFAC*y/10000;
		    y=temp+YOFFSET;
	   */
			x=((long)XFAC*x)/10000+XOFFSET;
    68b0:	a4 e5       	ldi	r26, 0x54	; 84
    68b2:	b3 e0       	ldi	r27, 0x03	; 3
    68b4:	0e 94 7d 8a 	call	0x114fa	; 0x114fa <__umulhisi3>
    68b8:	50 e1       	ldi	r21, 0x10	; 16
    68ba:	85 2e       	mov	r8, r21
    68bc:	57 e2       	ldi	r21, 0x27	; 39
    68be:	95 2e       	mov	r9, r21
    68c0:	a1 2c       	mov	r10, r1
    68c2:	b1 2c       	mov	r11, r1
    68c4:	a5 01       	movw	r20, r10
    68c6:	94 01       	movw	r18, r8
    68c8:	0e 94 53 8a 	call	0x114a6	; 0x114a6 <__divmodsi4>
    68cc:	89 01       	movw	r16, r18
    68ce:	0e 50       	subi	r16, 0x0E	; 14
    68d0:	11 09       	sbc	r17, r1
    68d2:	10 93 9e 11 	sts	0x119E, r17	; 0x80119e <my_touch+0x5>
    68d6:	00 93 9d 11 	sts	0x119D, r16	; 0x80119d <my_touch+0x4>
TP_Read_Coordinate2():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:175
    }
	if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))//Before and after the two samples are within +- ERR_RANGE.
    &&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
    {
        *x=(x1+x2)/2;
        *y=(y1+y2)/2;
    68da:	97 01       	movw	r18, r14
    68dc:	2c 0d       	add	r18, r12
    68de:	3d 1d       	adc	r19, r13
    68e0:	36 95       	lsr	r19
    68e2:	27 95       	ror	r18
TP_Scan():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:202
			x=temp+XOFFSET;
			temp = (long)YFAC*y/10000;
		    y=temp+YOFFSET;
	   */
			x=((long)XFAC*x)/10000+XOFFSET;
		    y=((long)YFAC*y)/10000+YOFFSET;
    68e4:	a4 e0       	ldi	r26, 0x04	; 4
    68e6:	b5 e0       	ldi	r27, 0x05	; 5
    68e8:	0e 94 7d 8a 	call	0x114fa	; 0x114fa <__umulhisi3>
    68ec:	a5 01       	movw	r20, r10
    68ee:	94 01       	movw	r18, r8
    68f0:	0e 94 53 8a 	call	0x114a6	; 0x114a6 <__divmodsi4>
    68f4:	2e 51       	subi	r18, 0x1E	; 30
    68f6:	31 09       	sbc	r19, r1
    68f8:	30 93 a0 11 	sts	0x11A0, r19	; 0x8011a0 <my_touch+0x7>
    68fc:	20 93 9f 11 	sts	0x119F, r18	; 0x80119f <my_touch+0x6>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:203
			switch(touch_rotation)
    6900:	80 91 a6 11 	lds	r24, 0x11A6	; 0x8011a6 <my_touch+0xd>
    6904:	81 30       	cpi	r24, 0x01	; 1
    6906:	09 f4       	brne	.+2      	; 0x690a <draw_menu(bool)+0x124>
    6908:	63 c1       	rjmp	.+710    	; 0x6bd0 <draw_menu(bool)+0x3ea>
    690a:	08 f4       	brcc	.+2      	; 0x690e <draw_menu(bool)+0x128>
    690c:	30 c1       	rjmp	.+608    	; 0x6b6e <draw_menu(bool)+0x388>
    690e:	82 30       	cpi	r24, 0x02	; 2
    6910:	09 f4       	brne	.+2      	; 0x6914 <draw_menu(bool)+0x12e>
    6912:	8f c1       	rjmp	.+798    	; 0x6c32 <draw_menu(bool)+0x44c>
    6914:	83 30       	cpi	r24, 0x03	; 3
    6916:	09 f4       	brne	.+2      	; 0x691a <draw_menu(bool)+0x134>
    6918:	98 c1       	rjmp	.+816    	; 0x6c4a <draw_menu(bool)+0x464>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:315
					break;
				default:
					break;
			}
	 	}
		if((touch_statue&TP_PRES_DOWN)==0)
    691a:	80 91 a5 11 	lds	r24, 0x11A5	; 0x8011a5 <my_touch+0xc>
    691e:	87 fd       	sbrc	r24, 7
    6920:	13 c0       	rjmp	.+38     	; 0x6948 <draw_menu(bool)+0x162>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:317
		{		 
			touch_statue=TP_PRES_DOWN|TP_CATH_PRES; 
    6922:	80 ec       	ldi	r24, 0xC0	; 192
    6924:	80 93 a5 11 	sts	0x11A5, r24	; 0x8011a5 <my_touch+0xc>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:318
			x0=x;
    6928:	80 91 9d 11 	lds	r24, 0x119D	; 0x80119d <my_touch+0x4>
    692c:	90 91 9e 11 	lds	r25, 0x119E	; 0x80119e <my_touch+0x5>
    6930:	90 93 9a 11 	sts	0x119A, r25	; 0x80119a <my_touch+0x1>
    6934:	80 93 99 11 	sts	0x1199, r24	; 0x801199 <my_touch>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:319
			y0=y;  	   			 
    6938:	80 91 9f 11 	lds	r24, 0x119F	; 0x80119f <my_touch+0x6>
    693c:	90 91 a0 11 	lds	r25, 0x11A0	; 0x8011a0 <my_touch+0x7>
    6940:	90 93 9c 11 	sts	0x119C, r25	; 0x80119c <my_touch+0x3>
    6944:	80 93 9b 11 	sts	0x119B, r24	; 0x80119b <my_touch+0x2>
_Z9draw_menub():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:688

  click_x = 0;
  click_y = 0;

  my_touch.TP_Scan(0);
  if (my_touch.TP_Get_State()&TP_PRES_DOWN && redraw == false)
    6948:	80 91 a5 11 	lds	r24, 0x11A5	; 0x8011a5 <my_touch+0xc>
    694c:	87 ff       	sbrs	r24, 7
    694e:	a5 c1       	rjmp	.+842    	; 0x6c9a <draw_menu(bool)+0x4b4>
    6950:	cc 53       	subi	r28, 0x3C	; 60
    6952:	df 4f       	sbci	r29, 0xFF	; 255
    6954:	28 81       	ld	r18, Y
    6956:	c4 5c       	subi	r28, 0xC4	; 196
    6958:	d0 40       	sbci	r29, 0x00	; 0
    695a:	21 11       	cpse	r18, r1
    695c:	9e c1       	rjmp	.+828    	; 0x6c9a <draw_menu(bool)+0x4b4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:690
  {
    click_x = my_touch.x;
    695e:	40 91 9d 11 	lds	r20, 0x119D	; 0x80119d <my_touch+0x4>
    6962:	50 91 9e 11 	lds	r21, 0x119E	; 0x80119e <my_touch+0x5>
    6966:	c7 54       	subi	r28, 0x47	; 71
    6968:	df 4f       	sbci	r29, 0xFF	; 255
    696a:	59 83       	std	Y+1, r21	; 0x01
    696c:	48 83       	st	Y, r20
    696e:	c9 5b       	subi	r28, 0xB9	; 185
    6970:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:691
    click_y = my_touch.y;
    6972:	60 91 9f 11 	lds	r22, 0x119F	; 0x80119f <my_touch+0x6>
    6976:	70 91 a0 11 	lds	r23, 0x11A0	; 0x8011a0 <my_touch+0x7>
    697a:	c5 54       	subi	r28, 0x45	; 69
    697c:	df 4f       	sbci	r29, 0xFF	; 255
    697e:	79 83       	std	Y+1, r23	; 0x01
    6980:	68 83       	st	Y, r22
    6982:	cb 5b       	subi	r28, 0xBB	; 187
    6984:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:694
  }

  rfnt = pgm_read_word(&current->redraw);
    6986:	f2 01       	movw	r30, r4
    6988:	e6 56       	subi	r30, 0x66	; 102
    698a:	fe 4f       	sbci	r31, 0xFE	; 254
    698c:	25 91       	lpm	r18, Z+
    698e:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:695
  rdr = (ret_fptr(rfnt))(pgm_read_word(&current->idx));
    6990:	f2 01       	movw	r30, r4
    6992:	e2 57       	subi	r30, 0x72	; 114
    6994:	fe 4f       	sbci	r31, 0xFE	; 254
    6996:	85 91       	lpm	r24, Z+
    6998:	94 91       	lpm	r25, Z
    699a:	f9 01       	movw	r30, r18
    699c:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:696
  if ( rdr == 1 || redraw == true )
    699e:	81 30       	cpi	r24, 0x01	; 1
    69a0:	39 f0       	breq	.+14     	; 0x69b0 <draw_menu(bool)+0x1ca>
    69a2:	cc 53       	subi	r28, 0x3C	; 60
    69a4:	df 4f       	sbci	r29, 0xFF	; 255
    69a6:	f8 81       	ld	r31, Y
    69a8:	c4 5c       	subi	r28, 0xC4	; 196
    69aa:	d0 40       	sbci	r29, 0x00	; 0
    69ac:	ff 23       	and	r31, r31
    69ae:	f9 f0       	breq	.+62     	; 0x69ee <draw_menu(bool)+0x208>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:698
  {
    strcpy_P(str1, pgm_read_word(&current->name));
    69b0:	f2 01       	movw	r30, r4
    69b2:	65 91       	lpm	r22, Z+
    69b4:	74 91       	lpm	r23, Z
    69b6:	ce 01       	movw	r24, r28
    69b8:	01 96       	adiw	r24, 0x01	; 1
    69ba:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:699
    show_string(str1, pgm_read_word(&current->x) + 5, pgm_read_word(&current->y) + 5, 2, BLACK, WHITE, 0);
    69be:	f2 01       	movw	r30, r4
    69c0:	ef 56       	subi	r30, 0x6F	; 111
    69c2:	fe 4f       	sbci	r31, 0xFE	; 254
    69c4:	45 91       	lpm	r20, Z+
    69c6:	54 91       	lpm	r21, Z
    69c8:	f2 01       	movw	r30, r4
    69ca:	e1 57       	subi	r30, 0x71	; 113
    69cc:	fe 4f       	sbci	r31, 0xFE	; 254
    69ce:	65 91       	lpm	r22, Z+
    69d0:	74 91       	lpm	r23, Z
    69d2:	4b 5f       	subi	r20, 0xFB	; 251
    69d4:	5f 4f       	sbci	r21, 0xFF	; 255
    69d6:	6b 5f       	subi	r22, 0xFB	; 251
    69d8:	7f 4f       	sbci	r23, 0xFF	; 255
    69da:	ee 24       	eor	r14, r14
    69dc:	ea 94       	dec	r14
    69de:	fe 2c       	mov	r15, r14
    69e0:	10 e0       	ldi	r17, 0x00	; 0
    69e2:	00 e0       	ldi	r16, 0x00	; 0
    69e4:	22 e0       	ldi	r18, 0x02	; 2
    69e6:	ce 01       	movw	r24, r28
    69e8:	01 96       	adiw	r24, 0x01	; 1
    69ea:	0e 94 c0 30 	call	0x6180	; 0x6180 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.158]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:684
  uint8_t rdr = 0;
  uint8_t args;

  current = MenuHistoryGetMenu();

  click_x = 0;
    69ee:	10 e0       	ldi	r17, 0x00	; 0
    69f0:	cf 53       	subi	r28, 0x3F	; 63
    69f2:	df 4f       	sbci	r29, 0xFF	; 255
    69f4:	18 82       	st	Y, r1
    69f6:	c1 5c       	subi	r28, 0xC1	; 193
    69f8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:704
    show_string(str1, pgm_read_word(&current->x) + 5, pgm_read_word(&current->y) + 5, 2, BLACK, WHITE, 0);
  }

  /// tlacitko typ 1 se prekresluje s celym menu
  /// tlacitko typ 1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_1); idx++)
    69fa:	12 01       	movw	r2, r4
    69fc:	27 e7       	ldi	r18, 0x77	; 119
    69fe:	22 1a       	sub	r2, r18
    6a00:	2e ef       	ldi	r18, 0xFE	; 254
    6a02:	32 0a       	sbc	r3, r18
    6a04:	f1 01       	movw	r30, r2
    6a06:	84 91       	lpm	r24, Z
    6a08:	18 17       	cp	r17, r24
    6a0a:	08 f0       	brcs	.+2      	; 0x6a0e <draw_menu(bool)+0x228>
    6a0c:	53 c1       	rjmp	.+678    	; 0x6cb4 <draw_menu(bool)+0x4ce>
    6a0e:	81 2e       	mov	r8, r17
    6a10:	91 2c       	mov	r9, r1
    6a12:	ff ef       	ldi	r31, 0xFF	; 255
    6a14:	8f 1a       	sub	r8, r31
    6a16:	9f 0a       	sbc	r9, r31
    6a18:	84 e0       	ldi	r24, 0x04	; 4
    6a1a:	88 0c       	add	r8, r8
    6a1c:	99 1c       	adc	r9, r9
    6a1e:	8a 95       	dec	r24
    6a20:	e1 f7       	brne	.-8      	; 0x6a1a <draw_menu(bool)+0x234>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:707
  {
    button_1 = &current->button_1[idx];
    rfnt = pgm_read_word(&button_1->redraw);
    6a22:	f2 01       	movw	r30, r4
    6a24:	e8 0d       	add	r30, r8
    6a26:	f9 1d       	adc	r31, r9
    6a28:	25 91       	lpm	r18, Z+
    6a2a:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:708
    rdr = (ret_fptr(rfnt))(pgm_read_word(&button_1->args));
    6a2c:	34 01       	movw	r6, r8
    6a2e:	43 e0       	ldi	r20, 0x03	; 3
    6a30:	64 1a       	sub	r6, r20
    6a32:	71 08       	sbc	r7, r1
    6a34:	64 0c       	add	r6, r4
    6a36:	75 1c       	adc	r7, r5
    6a38:	f3 01       	movw	r30, r6
    6a3a:	85 91       	lpm	r24, Z+
    6a3c:	94 91       	lpm	r25, Z
    6a3e:	f9 01       	movw	r30, r18
    6a40:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:709
    if ( rdr == 1 || redraw == true )
    6a42:	81 30       	cpi	r24, 0x01	; 1
    6a44:	41 f0       	breq	.+16     	; 0x6a56 <draw_menu(bool)+0x270>
    6a46:	cc 53       	subi	r28, 0x3C	; 60
    6a48:	df 4f       	sbci	r29, 0xFF	; 255
    6a4a:	f8 81       	ld	r31, Y
    6a4c:	c4 5c       	subi	r28, 0xC4	; 196
    6a4e:	d0 40       	sbci	r29, 0x00	; 0
    6a50:	ff 23       	and	r31, r31
    6a52:	09 f4       	brne	.+2      	; 0x6a56 <draw_menu(bool)+0x270>
    6a54:	34 c0       	rjmp	.+104    	; 0x6abe <draw_menu(bool)+0x2d8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:711
    {
      strcpy_P(str2, pgm_read_word(&button_1->name));
    6a56:	f4 01       	movw	r30, r8
    6a58:	3e 97       	sbiw	r30, 0x0e	; 14
    6a5a:	e4 0d       	add	r30, r4
    6a5c:	f5 1d       	adc	r31, r5
    6a5e:	65 91       	lpm	r22, Z+
    6a60:	74 91       	lpm	r23, Z
    6a62:	ce 01       	movw	r24, r28
    6a64:	8f 57       	subi	r24, 0x7F	; 127
    6a66:	9f 4f       	sbci	r25, 0xFF	; 255
    6a68:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:712
      str1[0] = 0;
    6a6c:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:713
      button_click_1(pgm_read_word(&button_1->x), pgm_read_word(&button_1->y), pgm_read_word(&button_1->size_x), pgm_read_word(&button_1->size_y), pgm_read_byte(&button_1->font_size),pgm_read_byte(&dyn_button_1->font_size), str2, str1 );
    6a6e:	e8 e0       	ldi	r30, 0x08	; 8
    6a70:	f0 e0       	ldi	r31, 0x00	; 0
    6a72:	e4 90       	lpm	r14, Z
    6a74:	f4 01       	movw	r30, r8
    6a76:	34 97       	sbiw	r30, 0x04	; 4
    6a78:	e4 0d       	add	r30, r4
    6a7a:	f5 1d       	adc	r31, r5
    6a7c:	04 91       	lpm	r16, Z
    6a7e:	f4 01       	movw	r30, r8
    6a80:	36 97       	sbiw	r30, 0x06	; 6
    6a82:	e4 0d       	add	r30, r4
    6a84:	f5 1d       	adc	r31, r5
    6a86:	25 91       	lpm	r18, Z+
    6a88:	34 91       	lpm	r19, Z
    6a8a:	f4 01       	movw	r30, r8
    6a8c:	38 97       	sbiw	r30, 0x08	; 8
    6a8e:	e4 0d       	add	r30, r4
    6a90:	f5 1d       	adc	r31, r5
    6a92:	45 91       	lpm	r20, Z+
    6a94:	54 91       	lpm	r21, Z
    6a96:	f4 01       	movw	r30, r8
    6a98:	3a 97       	sbiw	r30, 0x0a	; 10
    6a9a:	e4 0d       	add	r30, r4
    6a9c:	f5 1d       	adc	r31, r5
    6a9e:	65 91       	lpm	r22, Z+
    6aa0:	74 91       	lpm	r23, Z
    6aa2:	f4 01       	movw	r30, r8
    6aa4:	3c 97       	sbiw	r30, 0x0c	; 12
    6aa6:	e4 0d       	add	r30, r4
    6aa8:	f5 1d       	adc	r31, r5
    6aaa:	85 91       	lpm	r24, Z+
    6aac:	94 91       	lpm	r25, Z
    6aae:	fe 01       	movw	r30, r28
    6ab0:	31 96       	adiw	r30, 0x01	; 1
    6ab2:	5f 01       	movw	r10, r30
    6ab4:	e0 58       	subi	r30, 0x80	; 128
    6ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    6ab8:	6f 01       	movw	r12, r30
    6aba:	0e 94 2f 31 	call	0x625e	; 0x625e <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:715
    }
    if (click_x > 0 && click_y > 0)
    6abe:	c7 54       	subi	r28, 0x47	; 71
    6ac0:	df 4f       	sbci	r29, 0xFF	; 255
    6ac2:	28 81       	ld	r18, Y
    6ac4:	39 81       	ldd	r19, Y+1	; 0x01
    6ac6:	c9 5b       	subi	r28, 0xB9	; 185
    6ac8:	d0 40       	sbci	r29, 0x00	; 0
    6aca:	23 2b       	or	r18, r19
    6acc:	09 f4       	brne	.+2      	; 0x6ad0 <draw_menu(bool)+0x2ea>
    6ace:	4d c0       	rjmp	.+154    	; 0x6b6a <draw_menu(bool)+0x384>
    6ad0:	c5 54       	subi	r28, 0x45	; 69
    6ad2:	df 4f       	sbci	r29, 0xFF	; 255
    6ad4:	48 81       	ld	r20, Y
    6ad6:	59 81       	ldd	r21, Y+1	; 0x01
    6ad8:	cb 5b       	subi	r28, 0xBB	; 187
    6ada:	d0 40       	sbci	r29, 0x00	; 0
    6adc:	45 2b       	or	r20, r21
    6ade:	09 f4       	brne	.+2      	; 0x6ae2 <draw_menu(bool)+0x2fc>
    6ae0:	44 c0       	rjmp	.+136    	; 0x6b6a <draw_menu(bool)+0x384>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:716
      if (button_click_touch(pgm_read_word(&button_1->x), pgm_read_word(&button_1->y), pgm_read_word(&button_1->size_x), pgm_read_word(&button_1->size_y), click_x, click_y) == true)
    6ae2:	f4 01       	movw	r30, r8
    6ae4:	36 97       	sbiw	r30, 0x06	; 6
    6ae6:	e4 0d       	add	r30, r4
    6ae8:	f5 1d       	adc	r31, r5
    6aea:	85 91       	lpm	r24, Z+
    6aec:	94 91       	lpm	r25, Z
    6aee:	f4 01       	movw	r30, r8
    6af0:	38 97       	sbiw	r30, 0x08	; 8
    6af2:	e4 0d       	add	r30, r4
    6af4:	f5 1d       	adc	r31, r5
    6af6:	25 91       	lpm	r18, Z+
    6af8:	34 91       	lpm	r19, Z
    6afa:	f4 01       	movw	r30, r8
    6afc:	3a 97       	sbiw	r30, 0x0a	; 10
    6afe:	e4 0d       	add	r30, r4
    6b00:	f5 1d       	adc	r31, r5
    6b02:	45 91       	lpm	r20, Z+
    6b04:	54 91       	lpm	r21, Z
    6b06:	f4 01       	movw	r30, r8
    6b08:	3c 97       	sbiw	r30, 0x0c	; 12
    6b0a:	e4 0d       	add	r30, r4
    6b0c:	f5 1d       	adc	r31, r5
    6b0e:	65 91       	lpm	r22, Z+
    6b10:	74 91       	lpm	r23, Z
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1274
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
    6b12:	c7 54       	subi	r28, 0x47	; 71
    6b14:	df 4f       	sbci	r29, 0xFF	; 255
    6b16:	e8 81       	ld	r30, Y
    6b18:	f9 81       	ldd	r31, Y+1	; 0x01
    6b1a:	c9 5b       	subi	r28, 0xB9	; 185
    6b1c:	d0 40       	sbci	r29, 0x00	; 0
    6b1e:	6e 17       	cp	r22, r30
    6b20:	7f 07       	cpc	r23, r31
    6b22:	1c f5       	brge	.+70     	; 0x6b6a <draw_menu(bool)+0x384>
button_click_touch():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3476


bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
  bool ret = false;
  if (is_pressed(x, y, x + size_x, y + size_y, click_x, click_y) == true)
    6b24:	26 0f       	add	r18, r22
    6b26:	37 1f       	adc	r19, r23
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1274
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
    6b28:	e2 17       	cp	r30, r18
    6b2a:	f3 07       	cpc	r31, r19
    6b2c:	f4 f4       	brge	.+60     	; 0x6b6a <draw_menu(bool)+0x384>
    6b2e:	c5 54       	subi	r28, 0x45	; 69
    6b30:	df 4f       	sbci	r29, 0xFF	; 255
    6b32:	28 81       	ld	r18, Y
    6b34:	39 81       	ldd	r19, Y+1	; 0x01
    6b36:	cb 5b       	subi	r28, 0xBB	; 187
    6b38:	d0 40       	sbci	r29, 0x00	; 0
    6b3a:	42 17       	cp	r20, r18
    6b3c:	53 07       	cpc	r21, r19
    6b3e:	ac f4       	brge	.+42     	; 0x6b6a <draw_menu(bool)+0x384>
button_click_touch():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3476


bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
  bool ret = false;
  if (is_pressed(x, y, x + size_x, y + size_y, click_x, click_y) == true)
    6b40:	84 0f       	add	r24, r20
    6b42:	95 1f       	adc	r25, r21
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1274
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
    6b44:	28 17       	cp	r18, r24
    6b46:	39 07       	cpc	r19, r25
    6b48:	84 f4       	brge	.+32     	; 0x6b6a <draw_menu(bool)+0x384>
_Z9draw_menub():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:718
      button_click_1(pgm_read_word(&button_1->x), pgm_read_word(&button_1->y), pgm_read_word(&button_1->size_x), pgm_read_word(&button_1->size_y), pgm_read_byte(&button_1->font_size),pgm_read_byte(&dyn_button_1->font_size), str2, str1 );
    }
    if (click_x > 0 && click_y > 0)
      if (button_click_touch(pgm_read_word(&button_1->x), pgm_read_word(&button_1->y), pgm_read_word(&button_1->size_x), pgm_read_word(&button_1->size_y), click_x, click_y) == true)
      {
        fnt =  pgm_read_word(&button_1->onclick);
    6b4a:	f4 01       	movw	r30, r8
    6b4c:	32 97       	sbiw	r30, 0x02	; 2
    6b4e:	e4 0d       	add	r30, r4
    6b50:	f5 1d       	adc	r31, r5
    6b52:	25 91       	lpm	r18, Z+
    6b54:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:719
        ((fptr)fnt)(pgm_read_byte(&button_1->args));
    6b56:	f3 01       	movw	r30, r6
    6b58:	84 91       	lpm	r24, Z
    6b5a:	f9 01       	movw	r30, r18
    6b5c:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:720
        ret = true;
    6b5e:	f1 e0       	ldi	r31, 0x01	; 1
    6b60:	cf 53       	subi	r28, 0x3F	; 63
    6b62:	df 4f       	sbci	r29, 0xFF	; 255
    6b64:	f8 83       	st	Y, r31
    6b66:	c1 5c       	subi	r28, 0xC1	; 193
    6b68:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:704
    show_string(str1, pgm_read_word(&current->x) + 5, pgm_read_word(&current->y) + 5, 2, BLACK, WHITE, 0);
  }

  /// tlacitko typ 1 se prekresluje s celym menu
  /// tlacitko typ 1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_1); idx++)
    6b6a:	1f 5f       	subi	r17, 0xFF	; 255
    6b6c:	4b cf       	rjmp	.-362    	; 0x6a04 <draw_menu(bool)+0x21e>
TP_Scan():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:206
			x=((long)XFAC*x)/10000+XOFFSET;
		    y=((long)YFAC*y)/10000+YOFFSET;
			switch(touch_rotation)
			{
				case 0:
					if(lcd_rotation == 0)
    6b6e:	80 91 a7 11 	lds	r24, 0x11A7	; 0x8011a7 <my_touch+0xe>
    6b72:	88 23       	and	r24, r24
    6b74:	09 f4       	brne	.+2      	; 0x6b78 <draw_menu(bool)+0x392>
    6b76:	d1 ce       	rjmp	.-606    	; 0x691a <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:210
					{
						break;
					}
					else if(lcd_rotation == 1)
    6b78:	81 30       	cpi	r24, 0x01	; 1
    6b7a:	59 f4       	brne	.+22     	; 0x6b92 <draw_menu(bool)+0x3ac>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:280
					}
					else if(lcd_rotation == 3)
					{
						uint16_t tmp;
						tmp = x;
						x=y;
    6b7c:	30 93 9e 11 	sts	0x119E, r19	; 0x80119e <my_touch+0x5>
    6b80:	20 93 9d 11 	sts	0x119D, r18	; 0x80119d <my_touch+0x4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:297
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
						x = wid-x;
						y = heig - y;
    6b84:	80 91 a3 11 	lds	r24, 0x11A3	; 0x8011a3 <my_touch+0xa>
    6b88:	90 91 a4 11 	lds	r25, 0x11A4	; 0x8011a4 <my_touch+0xb>
    6b8c:	80 1b       	sub	r24, r16
    6b8e:	91 0b       	sbc	r25, r17
    6b90:	3d c0       	rjmp	.+122    	; 0x6c0c <draw_menu(bool)+0x426>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:218
						tmp = x;
						x=y;
						y=tmp;
						y = heig - y;
					}
					else if(lcd_rotation == 2)
    6b92:	82 30       	cpi	r24, 0x02	; 2
    6b94:	59 f4       	brne	.+22     	; 0x6bac <draw_menu(bool)+0x3c6>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:261
					}
					break;
				case 2:
					if(lcd_rotation == 0)
					{
						x = wid-x;
    6b96:	80 91 a1 11 	lds	r24, 0x11A1	; 0x8011a1 <my_touch+0x8>
    6b9a:	90 91 a2 11 	lds	r25, 0x11A2	; 0x8011a2 <my_touch+0x9>
    6b9e:	80 1b       	sub	r24, r16
    6ba0:	91 0b       	sbc	r25, r17
    6ba2:	90 93 9e 11 	sts	0x119E, r25	; 0x80119e <my_touch+0x5>
    6ba6:	80 93 9d 11 	sts	0x119D, r24	; 0x80119d <my_touch+0x4>
    6baa:	2a c0       	rjmp	.+84     	; 0x6c00 <draw_menu(bool)+0x41a>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:223
					else if(lcd_rotation == 2)
					{
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 3)
    6bac:	83 30       	cpi	r24, 0x03	; 3
    6bae:	09 f0       	breq	.+2      	; 0x6bb2 <draw_menu(bool)+0x3cc>
    6bb0:	b4 ce       	rjmp	.-664    	; 0x691a <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:269
					else if(lcd_rotation == 1)
					{
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
    6bb2:	10 93 a0 11 	sts	0x11A0, r17	; 0x8011a0 <my_touch+0x7>
    6bb6:	00 93 9f 11 	sts	0x119F, r16	; 0x80119f <my_touch+0x6>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:270
						x = wid-x;
    6bba:	80 91 a1 11 	lds	r24, 0x11A1	; 0x8011a1 <my_touch+0x8>
    6bbe:	90 91 a2 11 	lds	r25, 0x11A2	; 0x8011a2 <my_touch+0x9>
    6bc2:	82 1b       	sub	r24, r18
    6bc4:	93 0b       	sbc	r25, r19
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:301
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 2)
					{
						x = wid-x;;
    6bc6:	90 93 9e 11 	sts	0x119E, r25	; 0x80119e <my_touch+0x5>
    6bca:	80 93 9d 11 	sts	0x119D, r24	; 0x80119d <my_touch+0x4>
    6bce:	a5 ce       	rjmp	.-694    	; 0x691a <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:233
						y=tmp;
						x = wid-x;
					}
					break;
				case 1:
					if(lcd_rotation == 0)
    6bd0:	80 91 a7 11 	lds	r24, 0x11A7	; 0x8011a7 <my_touch+0xe>
    6bd4:	81 11       	cpse	r24, r1
    6bd6:	07 c0       	rjmp	.+14     	; 0x6be6 <draw_menu(bool)+0x400>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:301
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 2)
					{
						x = wid-x;;
    6bd8:	80 91 a1 11 	lds	r24, 0x11A1	; 0x8011a1 <my_touch+0x8>
    6bdc:	90 91 a2 11 	lds	r25, 0x11A2	; 0x8011a2 <my_touch+0x9>
    6be0:	80 1b       	sub	r24, r16
    6be2:	91 0b       	sbc	r25, r17
    6be4:	f0 cf       	rjmp	.-32     	; 0x6bc6 <draw_menu(bool)+0x3e0>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:237
				case 1:
					if(lcd_rotation == 0)
					{
						x = wid-x;
					}
					else if(lcd_rotation == 1)
    6be6:	81 30       	cpi	r24, 0x01	; 1
    6be8:	49 f4       	brne	.+18     	; 0x6bfc <draw_menu(bool)+0x416>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:307
					}
					else if(lcd_rotation == 3)
					{
						uint16_t tmp;
						tmp = x;
						x=y;
    6bea:	30 93 9e 11 	sts	0x119E, r19	; 0x80119e <my_touch+0x5>
    6bee:	20 93 9d 11 	sts	0x119D, r18	; 0x80119d <my_touch+0x4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:308
						y=tmp;
    6bf2:	10 93 a0 11 	sts	0x11A0, r17	; 0x8011a0 <my_touch+0x7>
    6bf6:	00 93 9f 11 	sts	0x119F, r16	; 0x80119f <my_touch+0x6>
    6bfa:	8f ce       	rjmp	.-738    	; 0x691a <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:244
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
					}
					else if(lcd_rotation == 2)
    6bfc:	82 30       	cpi	r24, 0x02	; 2
    6bfe:	59 f4       	brne	.+22     	; 0x6c16 <draw_menu(bool)+0x430>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:288
					}
					break;
				case 3:
					if(lcd_rotation == 0)
					{
						y = heig - y;
    6c00:	80 91 a3 11 	lds	r24, 0x11A3	; 0x8011a3 <my_touch+0xa>
    6c04:	90 91 a4 11 	lds	r25, 0x11A4	; 0x8011a4 <my_touch+0xb>
    6c08:	82 1b       	sub	r24, r18
    6c0a:	93 0b       	sbc	r25, r19
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:297
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
						x = wid-x;
						y = heig - y;
    6c0c:	90 93 a0 11 	sts	0x11A0, r25	; 0x8011a0 <my_touch+0x7>
    6c10:	80 93 9f 11 	sts	0x119F, r24	; 0x80119f <my_touch+0x6>
    6c14:	82 ce       	rjmp	.-764    	; 0x691a <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:248
					}
					else if(lcd_rotation == 2)
					{
						y = heig - y;
					}
					else if(lcd_rotation == 3)
    6c16:	83 30       	cpi	r24, 0x03	; 3
    6c18:	09 f0       	breq	.+2      	; 0x6c1c <draw_menu(bool)+0x436>
    6c1a:	7f ce       	rjmp	.-770    	; 0x691a <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:296
					{
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
						x = wid-x;
    6c1c:	80 91 a1 11 	lds	r24, 0x11A1	; 0x8011a1 <my_touch+0x8>
    6c20:	90 91 a2 11 	lds	r25, 0x11A2	; 0x8011a2 <my_touch+0x9>
    6c24:	82 1b       	sub	r24, r18
    6c26:	93 0b       	sbc	r25, r19
    6c28:	90 93 9e 11 	sts	0x119E, r25	; 0x80119e <my_touch+0x5>
    6c2c:	80 93 9d 11 	sts	0x119D, r24	; 0x80119d <my_touch+0x4>
    6c30:	a9 cf       	rjmp	.-174    	; 0x6b84 <draw_menu(bool)+0x39e>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:259
						x = wid-x;
						y = heig - y;
					}
					break;
				case 2:
					if(lcd_rotation == 0)
    6c32:	80 91 a7 11 	lds	r24, 0x11A7	; 0x8011a7 <my_touch+0xe>
    6c36:	88 23       	and	r24, r24
    6c38:	09 f4       	brne	.+2      	; 0x6c3c <draw_menu(bool)+0x456>
    6c3a:	ad cf       	rjmp	.-166    	; 0x6b96 <draw_menu(bool)+0x3b0>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:264
					{
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 1)
    6c3c:	81 30       	cpi	r24, 0x01	; 1
    6c3e:	09 f4       	brne	.+2      	; 0x6c42 <draw_menu(bool)+0x45c>
    6c40:	b8 cf       	rjmp	.-144    	; 0x6bb2 <draw_menu(bool)+0x3cc>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:276
					}
					else if(lcd_rotation == 2)
					{
						break;
					}
					else if(lcd_rotation == 3)
    6c42:	83 30       	cpi	r24, 0x03	; 3
    6c44:	09 f0       	breq	.+2      	; 0x6c48 <draw_menu(bool)+0x462>
    6c46:	69 ce       	rjmp	.-814    	; 0x691a <draw_menu(bool)+0x134>
    6c48:	99 cf       	rjmp	.-206    	; 0x6b7c <draw_menu(bool)+0x396>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:286
						y=tmp;
						y = heig - y;
					}
					break;
				case 3:
					if(lcd_rotation == 0)
    6c4a:	80 91 a7 11 	lds	r24, 0x11A7	; 0x8011a7 <my_touch+0xe>
    6c4e:	88 23       	and	r24, r24
    6c50:	b9 f2       	breq	.-82     	; 0x6c00 <draw_menu(bool)+0x41a>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:290
					{
						y = heig - y;
					}
					else if(lcd_rotation == 1)
    6c52:	81 30       	cpi	r24, 0x01	; 1
    6c54:	19 f3       	breq	.-58     	; 0x6c1c <draw_menu(bool)+0x436>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:299
						x=y;
						y=tmp;
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 2)
    6c56:	82 30       	cpi	r24, 0x02	; 2
    6c58:	09 f4       	brne	.+2      	; 0x6c5c <draw_menu(bool)+0x476>
    6c5a:	be cf       	rjmp	.-132    	; 0x6bd8 <draw_menu(bool)+0x3f2>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:303
					{
						x = wid-x;;
					}
					else if(lcd_rotation == 3)
    6c5c:	83 30       	cpi	r24, 0x03	; 3
    6c5e:	09 f0       	breq	.+2      	; 0x6c62 <draw_menu(bool)+0x47c>
    6c60:	5c ce       	rjmp	.-840    	; 0x691a <draw_menu(bool)+0x134>
    6c62:	c3 cf       	rjmp	.-122    	; 0x6bea <draw_menu(bool)+0x404>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:324
			y0=y;  	   			 
		}			   
	}
	else
	{
		if(touch_statue&TP_PRES_DOWN)
    6c64:	80 91 a5 11 	lds	r24, 0x11A5	; 0x8011a5 <my_touch+0xc>
    6c68:	87 ff       	sbrs	r24, 7
    6c6a:	04 c0       	rjmp	.+8      	; 0x6c74 <draw_menu(bool)+0x48e>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:326
		{
			touch_statue&=~(1<<7);
    6c6c:	8f 77       	andi	r24, 0x7F	; 127
    6c6e:	80 93 a5 11 	sts	0x11A5, r24	; 0x8011a5 <my_touch+0xc>
    6c72:	6a ce       	rjmp	.-812    	; 0x6948 <draw_menu(bool)+0x162>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:330
		}
		else
		{
			x0=0;
    6c74:	10 92 9a 11 	sts	0x119A, r1	; 0x80119a <my_touch+0x1>
    6c78:	10 92 99 11 	sts	0x1199, r1	; 0x801199 <my_touch>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:331
			y0=0;
    6c7c:	10 92 9c 11 	sts	0x119C, r1	; 0x80119c <my_touch+0x3>
    6c80:	10 92 9b 11 	sts	0x119B, r1	; 0x80119b <my_touch+0x2>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:332
			x=0xffff;
    6c84:	8f ef       	ldi	r24, 0xFF	; 255
    6c86:	9f ef       	ldi	r25, 0xFF	; 255
    6c88:	90 93 9e 11 	sts	0x119E, r25	; 0x80119e <my_touch+0x5>
    6c8c:	80 93 9d 11 	sts	0x119D, r24	; 0x80119d <my_touch+0x4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:333
			y=0xffff;
    6c90:	90 93 a0 11 	sts	0x11A0, r25	; 0x8011a0 <my_touch+0x7>
    6c94:	80 93 9f 11 	sts	0x119F, r24	; 0x80119f <my_touch+0x6>
    6c98:	57 ce       	rjmp	.-850    	; 0x6948 <draw_menu(bool)+0x162>
_Z9draw_menub():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:685
  uint8_t args;

  current = MenuHistoryGetMenu();

  click_x = 0;
  click_y = 0;
    6c9a:	c5 54       	subi	r28, 0x45	; 69
    6c9c:	df 4f       	sbci	r29, 0xFF	; 255
    6c9e:	19 82       	std	Y+1, r1	; 0x01
    6ca0:	18 82       	st	Y, r1
    6ca2:	cb 5b       	subi	r28, 0xBB	; 187
    6ca4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:684
  uint8_t rdr = 0;
  uint8_t args;

  current = MenuHistoryGetMenu();

  click_x = 0;
    6ca6:	c7 54       	subi	r28, 0x47	; 71
    6ca8:	df 4f       	sbci	r29, 0xFF	; 255
    6caa:	19 82       	std	Y+1, r1	; 0x01
    6cac:	18 82       	st	Y, r1
    6cae:	c9 5b       	subi	r28, 0xB9	; 185
    6cb0:	d0 40       	sbci	r29, 0x00	; 0
    6cb2:	69 ce       	rjmp	.-814    	; 0x6986 <draw_menu(bool)+0x1a0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:724
        ((fptr)fnt)(pgm_read_byte(&button_1->args));
        ret = true;
      }
  }

  if (ret == true)  goto draw_menu_end;
    6cb4:	cf 53       	subi	r28, 0x3F	; 63
    6cb6:	df 4f       	sbci	r29, 0xFF	; 255
    6cb8:	28 81       	ld	r18, Y
    6cba:	c1 5c       	subi	r28, 0xC1	; 193
    6cbc:	d0 40       	sbci	r29, 0x00	; 0
    6cbe:	21 11       	cpse	r18, r1
    6cc0:	c6 c6       	rjmp	.+3468   	; 0x7a4e <draw_menu(bool)+0x1268>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:726
  /// tlacitko typ 2
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_2); idx++)
    6cc2:	c3 54       	subi	r28, 0x43	; 67
    6cc4:	df 4f       	sbci	r29, 0xFF	; 255
    6cc6:	18 82       	st	Y, r1
    6cc8:	cd 5b       	subi	r28, 0xBD	; 189
    6cca:	d0 40       	sbci	r29, 0x00	; 0
    6ccc:	a2 01       	movw	r20, r4
    6cce:	46 57       	subi	r20, 0x76	; 118
    6cd0:	5e 4f       	sbci	r21, 0xFE	; 254
    6cd2:	c1 53       	subi	r28, 0x31	; 49
    6cd4:	df 4f       	sbci	r29, 0xFF	; 255
    6cd6:	59 83       	std	Y+1, r21	; 0x01
    6cd8:	48 83       	st	Y, r20
    6cda:	cf 5c       	subi	r28, 0xCF	; 207
    6cdc:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:733
    button_2 = &current->button_2[idx];
    rfnt = pgm_read_word(&button_2->redraw);
    rdr = (ret_fptr(rfnt))(pgm_read_word(&button_2->args));
    if ( rdr == 1 || redraw == true)
    {
      strcpy_P(str2, pgm_read_word(&button_2->name));
    6cde:	be 01       	movw	r22, r28
    6ce0:	6f 57       	subi	r22, 0x7F	; 127
    6ce2:	7f 4f       	sbci	r23, 0xFF	; 255
    6ce4:	cf 54       	subi	r28, 0x4F	; 79
    6ce6:	df 4f       	sbci	r29, 0xFF	; 255
    6ce8:	79 83       	std	Y+1, r23	; 0x01
    6cea:	68 83       	st	Y, r22
    6cec:	c1 5b       	subi	r28, 0xB1	; 177
    6cee:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:726
      }
  }

  if (ret == true)  goto draw_menu_end;
  /// tlacitko typ 2
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_2); idx++)
    6cf0:	c1 53       	subi	r28, 0x31	; 49
    6cf2:	df 4f       	sbci	r29, 0xFF	; 255
    6cf4:	e8 81       	ld	r30, Y
    6cf6:	f9 81       	ldd	r31, Y+1	; 0x01
    6cf8:	cf 5c       	subi	r28, 0xCF	; 207
    6cfa:	d0 40       	sbci	r29, 0x00	; 0
    6cfc:	84 91       	lpm	r24, Z
    6cfe:	c3 54       	subi	r28, 0x43	; 67
    6d00:	df 4f       	sbci	r29, 0xFF	; 255
    6d02:	f8 81       	ld	r31, Y
    6d04:	cd 5b       	subi	r28, 0xBD	; 189
    6d06:	d0 40       	sbci	r29, 0x00	; 0
    6d08:	f8 17       	cp	r31, r24
    6d0a:	08 f0       	brcs	.+2      	; 0x6d0e <draw_menu(bool)+0x528>
    6d0c:	5d c2       	rjmp	.+1210   	; 0x71c8 <draw_menu(bool)+0x9e2>
    6d0e:	26 e1       	ldi	r18, 0x16	; 22
    6d10:	f2 9f       	mul	r31, r18
    6d12:	50 01       	movw	r10, r0
    6d14:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:729
  {
    button_2 = &current->button_2[idx];
    rfnt = pgm_read_word(&button_2->redraw);
    6d16:	f5 01       	movw	r30, r10
    6d18:	ea 54       	subi	r30, 0x4A	; 74
    6d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    6d1c:	e4 0d       	add	r30, r4
    6d1e:	f5 1d       	adc	r31, r5
    6d20:	25 91       	lpm	r18, Z+
    6d22:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:730
    rdr = (ret_fptr(rfnt))(pgm_read_word(&button_2->args));
    6d24:	c5 01       	movw	r24, r10
    6d26:	8f 54       	subi	r24, 0x4F	; 79
    6d28:	9f 4f       	sbci	r25, 0xFF	; 255
    6d2a:	a2 01       	movw	r20, r4
    6d2c:	48 0f       	add	r20, r24
    6d2e:	59 1f       	adc	r21, r25
    6d30:	c9 53       	subi	r28, 0x39	; 57
    6d32:	df 4f       	sbci	r29, 0xFF	; 255
    6d34:	59 83       	std	Y+1, r21	; 0x01
    6d36:	48 83       	st	Y, r20
    6d38:	c7 5c       	subi	r28, 0xC7	; 199
    6d3a:	d0 40       	sbci	r29, 0x00	; 0
    6d3c:	fa 01       	movw	r30, r20
    6d3e:	85 91       	lpm	r24, Z+
    6d40:	94 91       	lpm	r25, Z
    6d42:	f9 01       	movw	r30, r18
    6d44:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:731
    if ( rdr == 1 || redraw == true)
    6d46:	81 30       	cpi	r24, 0x01	; 1
    6d48:	41 f0       	breq	.+16     	; 0x6d5a <draw_menu(bool)+0x574>
    6d4a:	cc 53       	subi	r28, 0x3C	; 60
    6d4c:	df 4f       	sbci	r29, 0xFF	; 255
    6d4e:	f8 81       	ld	r31, Y
    6d50:	c4 5c       	subi	r28, 0xC4	; 196
    6d52:	d0 40       	sbci	r29, 0x00	; 0
    6d54:	ff 23       	and	r31, r31
    6d56:	09 f4       	brne	.+2      	; 0x6d5a <draw_menu(bool)+0x574>
    6d58:	cb c1       	rjmp	.+918    	; 0x70f0 <draw_menu(bool)+0x90a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:733
    {
      strcpy_P(str2, pgm_read_word(&button_2->name));
    6d5a:	f5 01       	movw	r30, r10
    6d5c:	ee 55       	subi	r30, 0x5E	; 94
    6d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    6d60:	e4 0d       	add	r30, r4
    6d62:	f5 1d       	adc	r31, r5
    6d64:	65 91       	lpm	r22, Z+
    6d66:	74 91       	lpm	r23, Z
    6d68:	ce 01       	movw	r24, r28
    6d6a:	8f 57       	subi	r24, 0x7F	; 127
    6d6c:	9f 4f       	sbci	r25, 0xFF	; 255
    6d6e:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:734
      rfnt = pgm_read_word(&button_2->get_status_fnt);
    6d72:	f5 01       	movw	r30, r10
    6d74:	ec 54       	subi	r30, 0x4C	; 76
    6d76:	ff 4f       	sbci	r31, 0xFF	; 255
    6d78:	e4 0d       	add	r30, r4
    6d7a:	f5 1d       	adc	r31, r5
    6d7c:	25 91       	lpm	r18, Z+
    6d7e:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:735
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args));
    6d80:	c9 53       	subi	r28, 0x39	; 57
    6d82:	df 4f       	sbci	r29, 0xFF	; 255
    6d84:	e8 81       	ld	r30, Y
    6d86:	f9 81       	ldd	r31, Y+1	; 0x01
    6d88:	c7 5c       	subi	r28, 0xC7	; 199
    6d8a:	d0 40       	sbci	r29, 0x00	; 0
    6d8c:	84 91       	lpm	r24, Z
    6d8e:	f9 01       	movw	r30, r18
    6d90:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:740
      button_click_2(pgm_read_word(&button_2->x), \
                     pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
                     pgm_read_word(&button_2->size_y), pgm_read_byte(&button_2->font_size), \
                     pgm_read_word(&button_2->color_active), \
                     pgm_read_word(&button_2->color_inactive), state,  str2);
    6d92:	f5 01       	movw	r30, r10
    6d94:	e1 55       	subi	r30, 0x51	; 81
    6d96:	ff 4f       	sbci	r31, 0xFF	; 255
    6d98:	e4 0d       	add	r30, r4
    6d9a:	f5 1d       	adc	r31, r5
    6d9c:	45 91       	lpm	r20, Z+
    6d9e:	54 91       	lpm	r21, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:739
      rfnt = pgm_read_word(&button_2->get_status_fnt);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args));
      button_click_2(pgm_read_word(&button_2->x), \
                     pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
                     pgm_read_word(&button_2->size_y), pgm_read_byte(&button_2->font_size), \
                     pgm_read_word(&button_2->color_active), \
    6da0:	f5 01       	movw	r30, r10
    6da2:	e3 55       	subi	r30, 0x53	; 83
    6da4:	ff 4f       	sbci	r31, 0xFF	; 255
    6da6:	e4 0d       	add	r30, r4
    6da8:	f5 1d       	adc	r31, r5
    6daa:	25 91       	lpm	r18, Z+
    6dac:	34 91       	lpm	r19, Z
    6dae:	cb 54       	subi	r28, 0x4B	; 75
    6db0:	df 4f       	sbci	r29, 0xFF	; 255
    6db2:	28 83       	st	Y, r18
    6db4:	c5 5b       	subi	r28, 0xB5	; 181
    6db6:	d0 40       	sbci	r29, 0x00	; 0
    6db8:	c9 54       	subi	r28, 0x49	; 73
    6dba:	df 4f       	sbci	r29, 0xFF	; 255
    6dbc:	38 83       	st	Y, r19
    6dbe:	c7 5b       	subi	r28, 0xB7	; 183
    6dc0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:738
      strcpy_P(str2, pgm_read_word(&button_2->name));
      rfnt = pgm_read_word(&button_2->get_status_fnt);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args));
      button_click_2(pgm_read_word(&button_2->x), \
                     pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
                     pgm_read_word(&button_2->size_y), pgm_read_byte(&button_2->font_size), \
    6dc2:	f5 01       	movw	r30, r10
    6dc4:	e4 55       	subi	r30, 0x54	; 84
    6dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    6dc8:	e4 0d       	add	r30, r4
    6dca:	f5 1d       	adc	r31, r5
    6dcc:	24 91       	lpm	r18, Z
    6dce:	ce 53       	subi	r28, 0x3E	; 62
    6dd0:	df 4f       	sbci	r29, 0xFF	; 255
    6dd2:	28 83       	st	Y, r18
    6dd4:	c2 5c       	subi	r28, 0xC2	; 194
    6dd6:	d0 40       	sbci	r29, 0x00	; 0
    6dd8:	f5 01       	movw	r30, r10
    6dda:	e6 55       	subi	r30, 0x56	; 86
    6ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    6dde:	e4 0d       	add	r30, r4
    6de0:	f5 1d       	adc	r31, r5
    6de2:	05 91       	lpm	r16, Z+
    6de4:	14 91       	lpm	r17, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:737
    {
      strcpy_P(str2, pgm_read_word(&button_2->name));
      rfnt = pgm_read_word(&button_2->get_status_fnt);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args));
      button_click_2(pgm_read_word(&button_2->x), \
                     pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
    6de6:	f5 01       	movw	r30, r10
    6de8:	e8 55       	subi	r30, 0x58	; 88
    6dea:	ff 4f       	sbci	r31, 0xFF	; 255
    6dec:	e4 0d       	add	r30, r4
    6dee:	f5 1d       	adc	r31, r5
    6df0:	25 91       	lpm	r18, Z+
    6df2:	34 91       	lpm	r19, Z
    6df4:	f5 01       	movw	r30, r10
    6df6:	ea 55       	subi	r30, 0x5A	; 90
    6df8:	ff 4f       	sbci	r31, 0xFF	; 255
    6dfa:	e4 0d       	add	r30, r4
    6dfc:	f5 1d       	adc	r31, r5
    6dfe:	25 90       	lpm	r2, Z+
    6e00:	34 90       	lpm	r3, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:736
    if ( rdr == 1 || redraw == true)
    {
      strcpy_P(str2, pgm_read_word(&button_2->name));
      rfnt = pgm_read_word(&button_2->get_status_fnt);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args));
      button_click_2(pgm_read_word(&button_2->x), \
    6e02:	f5 01       	movw	r30, r10
    6e04:	ec 55       	subi	r30, 0x5C	; 92
    6e06:	ff 4f       	sbci	r31, 0xFF	; 255
    6e08:	e4 0d       	add	r30, r4
    6e0a:	f5 1d       	adc	r31, r5
    6e0c:	65 91       	lpm	r22, Z+
    6e0e:	74 91       	lpm	r23, Z
    6e10:	cd 54       	subi	r28, 0x4D	; 77
    6e12:	df 4f       	sbci	r29, 0xFF	; 255
    6e14:	79 83       	std	Y+1, r23	; 0x01
    6e16:	68 83       	st	Y, r22
    6e18:	c3 5b       	subi	r28, 0xB3	; 179
    6e1a:	d0 40       	sbci	r29, 0x00	; 0
button_click_2():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3430
{
  uint8_t posx, posy, tmpy, tmpx;
  uint16_t back_color;

  back_color = color_inactive;
  if (state == 1)
    6e1c:	81 11       	cpse	r24, r1
    6e1e:	0a c0       	rjmp	.+20     	; 0x6e34 <draw_menu(bool)+0x64e>
_Z9draw_menub():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3429
void button_click_2(uint16_t x, uint16_t y, uint8_t size_x, uint8_t size_y, uint8_t font_size, uint16_t color_active , uint16_t color_inactive, uint8_t state, char *text)
{
  uint8_t posx, posy, tmpy, tmpx;
  uint16_t back_color;

  back_color = color_inactive;
    6e20:	cb 54       	subi	r28, 0x4B	; 75
    6e22:	df 4f       	sbci	r29, 0xFF	; 255
    6e24:	48 83       	st	Y, r20
    6e26:	c5 5b       	subi	r28, 0xB5	; 181
    6e28:	d0 40       	sbci	r29, 0x00	; 0
    6e2a:	c9 54       	subi	r28, 0x49	; 73
    6e2c:	df 4f       	sbci	r29, 0xFF	; 255
    6e2e:	58 83       	st	Y, r21
    6e30:	c7 5b       	subi	r28, 0xB7	; 183
    6e32:	d0 40       	sbci	r29, 0x00	; 0
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    6e34:	10 92 c2 11 	sts	0x11C2, r1	; 0x8011c2 <my_lcd+0xb>
    6e38:	10 92 c1 11 	sts	0x11C1, r1	; 0x8011c1 <my_lcd+0xa>
    6e3c:	11 27       	eor	r17, r17
button_click_2():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3434
  if (state == 1)
    back_color = color_active;

  my_lcd.Set_Draw_color(BLACK);
  my_lcd.Draw_Rectangle(x, y, x + size_x, y + size_y);
    6e3e:	41 01       	movw	r8, r2
    6e40:	80 0e       	add	r8, r16
    6e42:	91 1e       	adc	r9, r17
    6e44:	c9 01       	movw	r24, r18
    6e46:	99 27       	eor	r25, r25
    6e48:	cb 53       	subi	r28, 0x3B	; 59
    6e4a:	df 4f       	sbci	r29, 0xFF	; 255
    6e4c:	99 83       	std	Y+1, r25	; 0x01
    6e4e:	88 83       	st	Y, r24
    6e50:	c5 5c       	subi	r28, 0xC5	; 197
    6e52:	d0 40       	sbci	r29, 0x00	; 0
    6e54:	cd 54       	subi	r28, 0x4D	; 77
    6e56:	df 4f       	sbci	r29, 0xFF	; 255
    6e58:	c8 80       	ld	r12, Y
    6e5a:	d9 80       	ldd	r13, Y+1	; 0x01
    6e5c:	c3 5b       	subi	r28, 0xB3	; 179
    6e5e:	d0 40       	sbci	r29, 0x00	; 0
    6e60:	c8 0e       	add	r12, r24
    6e62:	d9 1e       	adc	r13, r25
    6e64:	94 01       	movw	r18, r8
    6e66:	a6 01       	movw	r20, r12
    6e68:	b1 01       	movw	r22, r2
    6e6a:	cd 54       	subi	r28, 0x4D	; 77
    6e6c:	df 4f       	sbci	r29, 0xFF	; 255
    6e6e:	88 81       	ld	r24, Y
    6e70:	99 81       	ldd	r25, Y+1	; 0x01
    6e72:	c3 5b       	subi	r28, 0xB3	; 179
    6e74:	d0 40       	sbci	r29, 0x00	; 0
    6e76:	0e 94 82 20 	call	0x4104	; 0x4104 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.172]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3435
  my_lcd.Draw_Rectangle(x + 1, y + 1, x + size_x - 1, y + size_y - 1);
    6e7a:	94 01       	movw	r18, r8
    6e7c:	21 50       	subi	r18, 0x01	; 1
    6e7e:	31 09       	sbc	r19, r1
    6e80:	a6 01       	movw	r20, r12
    6e82:	41 50       	subi	r20, 0x01	; 1
    6e84:	51 09       	sbc	r21, r1
    6e86:	b1 01       	movw	r22, r2
    6e88:	6f 5f       	subi	r22, 0xFF	; 255
    6e8a:	7f 4f       	sbci	r23, 0xFF	; 255
    6e8c:	cd 54       	subi	r28, 0x4D	; 77
    6e8e:	df 4f       	sbci	r29, 0xFF	; 255
    6e90:	88 81       	ld	r24, Y
    6e92:	99 81       	ldd	r25, Y+1	; 0x01
    6e94:	c3 5b       	subi	r28, 0xB3	; 179
    6e96:	d0 40       	sbci	r29, 0x00	; 0
    6e98:	01 96       	adiw	r24, 0x01	; 1
    6e9a:	0e 94 82 20 	call	0x4104	; 0x4104 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.172]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3436
  my_lcd.Draw_Rectangle(x + 2, y + 2, x + size_x - 2, y + size_y - 2);
    6e9e:	94 01       	movw	r18, r8
    6ea0:	22 50       	subi	r18, 0x02	; 2
    6ea2:	31 09       	sbc	r19, r1
    6ea4:	a6 01       	movw	r20, r12
    6ea6:	42 50       	subi	r20, 0x02	; 2
    6ea8:	51 09       	sbc	r21, r1
    6eaa:	b1 01       	movw	r22, r2
    6eac:	6e 5f       	subi	r22, 0xFE	; 254
    6eae:	7f 4f       	sbci	r23, 0xFF	; 255
    6eb0:	cd 54       	subi	r28, 0x4D	; 77
    6eb2:	df 4f       	sbci	r29, 0xFF	; 255
    6eb4:	88 81       	ld	r24, Y
    6eb6:	99 81       	ldd	r25, Y+1	; 0x01
    6eb8:	c3 5b       	subi	r28, 0xB3	; 179
    6eba:	d0 40       	sbci	r29, 0x00	; 0
    6ebc:	02 96       	adiw	r24, 0x02	; 2
    6ebe:	0e 94 82 20 	call	0x4104	; 0x4104 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.172]>
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1268
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
    6ec2:	ce 53       	subi	r28, 0x3E	; 62
    6ec4:	df 4f       	sbci	r29, 0xFF	; 255
    6ec6:	78 80       	ld	r7, Y
    6ec8:	c2 5c       	subi	r28, 0xC2	; 194
    6eca:	d0 40       	sbci	r29, 0x00	; 0
    6ecc:	77 0c       	add	r7, r7
    6ece:	ce 53       	subi	r28, 0x3E	; 62
    6ed0:	df 4f       	sbci	r29, 0xFF	; 255
    6ed2:	98 81       	ld	r25, Y
    6ed4:	c2 5c       	subi	r28, 0xC2	; 194
    6ed6:	d0 40       	sbci	r29, 0x00	; 0
    6ed8:	79 0e       	add	r7, r25
    6eda:	77 0c       	add	r7, r7
    6edc:	c3 53       	subi	r28, 0x33	; 51
    6ede:	df 4f       	sbci	r29, 0xFF	; 255
    6ee0:	78 82       	st	Y, r7
    6ee2:	cd 5c       	subi	r28, 0xCD	; 205
    6ee4:	d0 40       	sbci	r29, 0x00	; 0
button_click_2():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3438
  my_lcd.Set_Draw_color(BLACK);
  my_lcd.Draw_Rectangle(x, y, x + size_x, y + size_y);
  my_lcd.Draw_Rectangle(x + 1, y + 1, x + size_x - 1, y + size_y - 1);
  my_lcd.Draw_Rectangle(x + 2, y + 2, x + size_x - 2, y + size_y - 2);
  tmpy = show_string_size_hight(font_size);
  tmpx = show_string_size_width(strlen(text), font_size);
    6ee6:	cf 54       	subi	r28, 0x4F	; 79
    6ee8:	df 4f       	sbci	r29, 0xFF	; 255
    6eea:	e8 81       	ld	r30, Y
    6eec:	f9 81       	ldd	r31, Y+1	; 0x01
    6eee:	c1 5b       	subi	r28, 0xB1	; 177
    6ef0:	d0 40       	sbci	r29, 0x00	; 0
    6ef2:	01 90       	ld	r0, Z+
    6ef4:	00 20       	and	r0, r0
    6ef6:	e9 f7       	brne	.-6      	; 0x6ef2 <draw_menu(bool)+0x70c>
    6ef8:	31 97       	sbiw	r30, 0x01	; 1
    6efa:	cf 54       	subi	r28, 0x4F	; 79
    6efc:	df 4f       	sbci	r29, 0xFF	; 255
    6efe:	28 81       	ld	r18, Y
    6f00:	39 81       	ldd	r19, Y+1	; 0x01
    6f02:	c1 5b       	subi	r28, 0xB1	; 177
    6f04:	d0 40       	sbci	r29, 0x00	; 0
    6f06:	e2 1b       	sub	r30, r18
    6f08:	f3 0b       	sbc	r31, r19
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1263
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    6f0a:	36 e0       	ldi	r19, 0x06	; 6
    6f0c:	e3 9f       	mul	r30, r19
    6f0e:	f0 01       	movw	r30, r0
    6f10:	11 24       	eor	r1, r1
    6f12:	9e 9f       	mul	r25, r30
    6f14:	b0 01       	movw	r22, r0
    6f16:	9f 9f       	mul	r25, r31
    6f18:	70 0d       	add	r23, r0
    6f1a:	11 24       	eor	r1, r1
    6f1c:	ab 01       	movw	r20, r22
    6f1e:	55 27       	eor	r21, r21
    6f20:	c7 53       	subi	r28, 0x37	; 55
    6f22:	df 4f       	sbci	r29, 0xFF	; 255
    6f24:	59 83       	std	Y+1, r21	; 0x01
    6f26:	48 83       	st	Y, r20
    6f28:	c9 5c       	subi	r28, 0xC9	; 201
    6f2a:	d0 40       	sbci	r29, 0x00	; 0
button_click_2():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3440
  my_lcd.Draw_Rectangle(x + 1, y + 1, x + size_x - 1, y + size_y - 1);
  my_lcd.Draw_Rectangle(x + 2, y + 2, x + size_x - 2, y + size_y - 2);
  tmpy = show_string_size_hight(font_size);
  tmpx = show_string_size_width(strlen(text), font_size);
  posx = (size_x - tmpx) / 2;
  posy = (size_y - tmpy) / 2;
    6f2c:	67 2c       	mov	r6, r7
    6f2e:	71 2c       	mov	r7, r1
    6f30:	68 01       	movw	r12, r16
    6f32:	c6 18       	sub	r12, r6
    6f34:	d7 08       	sbc	r13, r7
    6f36:	46 01       	movw	r8, r12
    6f38:	d7 fe       	sbrs	r13, 7
    6f3a:	03 c0       	rjmp	.+6      	; 0x6f42 <draw_menu(bool)+0x75c>
    6f3c:	5f ef       	ldi	r21, 0xFF	; 255
    6f3e:	85 1a       	sub	r8, r21
    6f40:	95 0a       	sbc	r9, r21
    6f42:	95 94       	asr	r9
    6f44:	87 94       	ror	r8
    6f46:	99 24       	eor	r9, r9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3442
  /// horni vybarveni
  my_lcd.Fill_Rect(x + 3, y + 3, size_x - 5, posy - 3, back_color );
    6f48:	cd 54       	subi	r28, 0x4D	; 77
    6f4a:	df 4f       	sbci	r29, 0xFF	; 255
    6f4c:	68 81       	ld	r22, Y
    6f4e:	79 81       	ldd	r23, Y+1	; 0x01
    6f50:	c3 5b       	subi	r28, 0xB3	; 179
    6f52:	d0 40       	sbci	r29, 0x00	; 0
    6f54:	6d 5f       	subi	r22, 0xFD	; 253
    6f56:	7f 4f       	sbci	r23, 0xFF	; 255
    6f58:	c5 53       	subi	r28, 0x35	; 53
    6f5a:	df 4f       	sbci	r29, 0xFF	; 255
    6f5c:	79 83       	std	Y+1, r23	; 0x01
    6f5e:	68 83       	st	Y, r22
    6f60:	cb 5c       	subi	r28, 0xCB	; 203
    6f62:	d0 40       	sbci	r29, 0x00	; 0
    6f64:	84 01       	movw	r16, r8
    6f66:	03 50       	subi	r16, 0x03	; 3
    6f68:	11 09       	sbc	r17, r1
    6f6a:	cb 54       	subi	r28, 0x4B	; 75
    6f6c:	df 4f       	sbci	r29, 0xFF	; 255
    6f6e:	e8 80       	ld	r14, Y
    6f70:	c5 5b       	subi	r28, 0xB5	; 181
    6f72:	d0 40       	sbci	r29, 0x00	; 0
    6f74:	c9 54       	subi	r28, 0x49	; 73
    6f76:	df 4f       	sbci	r29, 0xFF	; 255
    6f78:	f8 80       	ld	r15, Y
    6f7a:	c7 5b       	subi	r28, 0xB7	; 183
    6f7c:	d0 40       	sbci	r29, 0x00	; 0
    6f7e:	cb 53       	subi	r28, 0x3B	; 59
    6f80:	df 4f       	sbci	r29, 0xFF	; 255
    6f82:	88 81       	ld	r24, Y
    6f84:	99 81       	ldd	r25, Y+1	; 0x01
    6f86:	c5 5c       	subi	r28, 0xC5	; 197
    6f88:	d0 40       	sbci	r29, 0x00	; 0
    6f8a:	05 97       	sbiw	r24, 0x05	; 5
    6f8c:	c1 54       	subi	r28, 0x41	; 65
    6f8e:	df 4f       	sbci	r29, 0xFF	; 255
    6f90:	99 83       	std	Y+1, r25	; 0x01
    6f92:	88 83       	st	Y, r24
    6f94:	cf 5b       	subi	r28, 0xBF	; 191
    6f96:	d0 40       	sbci	r29, 0x00	; 0
    6f98:	9c 01       	movw	r18, r24
    6f9a:	a1 01       	movw	r20, r2
    6f9c:	4d 5f       	subi	r20, 0xFD	; 253
    6f9e:	5f 4f       	sbci	r21, 0xFF	; 255
    6fa0:	87 eb       	ldi	r24, 0xB7	; 183
    6fa2:	91 e1       	ldi	r25, 0x11	; 17
    6fa4:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3444
  /// spodni vybarveni
  my_lcd.Fill_Rect(x + 3, y + tmpy + posy + 6, size_x - 5, size_y - tmpy - posy - 8, back_color );
    6fa8:	86 01       	movw	r16, r12
    6faa:	08 19       	sub	r16, r8
    6fac:	19 09       	sbc	r17, r9
    6fae:	08 50       	subi	r16, 0x08	; 8
    6fb0:	11 09       	sbc	r17, r1
    6fb2:	a1 01       	movw	r20, r2
    6fb4:	4a 5f       	subi	r20, 0xFA	; 250
    6fb6:	5f 4f       	sbci	r21, 0xFF	; 255
    6fb8:	c3 53       	subi	r28, 0x33	; 51
    6fba:	df 4f       	sbci	r29, 0xFF	; 255
    6fbc:	98 81       	ld	r25, Y
    6fbe:	cd 5c       	subi	r28, 0xCD	; 205
    6fc0:	d0 40       	sbci	r29, 0x00	; 0
    6fc2:	49 0f       	add	r20, r25
    6fc4:	51 1d       	adc	r21, r1
    6fc6:	48 0d       	add	r20, r8
    6fc8:	59 1d       	adc	r21, r9
    6fca:	cb 54       	subi	r28, 0x4B	; 75
    6fcc:	df 4f       	sbci	r29, 0xFF	; 255
    6fce:	e8 80       	ld	r14, Y
    6fd0:	c5 5b       	subi	r28, 0xB5	; 181
    6fd2:	d0 40       	sbci	r29, 0x00	; 0
    6fd4:	c9 54       	subi	r28, 0x49	; 73
    6fd6:	df 4f       	sbci	r29, 0xFF	; 255
    6fd8:	f8 80       	ld	r15, Y
    6fda:	c7 5b       	subi	r28, 0xB7	; 183
    6fdc:	d0 40       	sbci	r29, 0x00	; 0
    6fde:	c1 54       	subi	r28, 0x41	; 65
    6fe0:	df 4f       	sbci	r29, 0xFF	; 255
    6fe2:	28 81       	ld	r18, Y
    6fe4:	39 81       	ldd	r19, Y+1	; 0x01
    6fe6:	cf 5b       	subi	r28, 0xBF	; 191
    6fe8:	d0 40       	sbci	r29, 0x00	; 0
    6fea:	c5 53       	subi	r28, 0x35	; 53
    6fec:	df 4f       	sbci	r29, 0xFF	; 255
    6fee:	68 81       	ld	r22, Y
    6ff0:	79 81       	ldd	r23, Y+1	; 0x01
    6ff2:	cb 5c       	subi	r28, 0xCB	; 203
    6ff4:	d0 40       	sbci	r29, 0x00	; 0
    6ff6:	87 eb       	ldi	r24, 0xB7	; 183
    6ff8:	91 e1       	ldi	r25, 0x11	; 17
    6ffa:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3446
  /// leve vybarveni
  my_lcd.Fill_Rect(x + 3, y + posy, posx - 3, tmpy + 6, back_color);
    6ffe:	63 01       	movw	r12, r6
    7000:	e6 e0       	ldi	r30, 0x06	; 6
    7002:	ce 0e       	add	r12, r30
    7004:	d1 1c       	adc	r13, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3439
  my_lcd.Draw_Rectangle(x, y, x + size_x, y + size_y);
  my_lcd.Draw_Rectangle(x + 1, y + 1, x + size_x - 1, y + size_y - 1);
  my_lcd.Draw_Rectangle(x + 2, y + 2, x + size_x - 2, y + size_y - 2);
  tmpy = show_string_size_hight(font_size);
  tmpx = show_string_size_width(strlen(text), font_size);
  posx = (size_x - tmpx) / 2;
    7006:	cb 53       	subi	r28, 0x3B	; 59
    7008:	df 4f       	sbci	r29, 0xFF	; 255
    700a:	68 80       	ld	r6, Y
    700c:	79 80       	ldd	r7, Y+1	; 0x01
    700e:	c5 5c       	subi	r28, 0xC5	; 197
    7010:	d0 40       	sbci	r29, 0x00	; 0
    7012:	c7 53       	subi	r28, 0x37	; 55
    7014:	df 4f       	sbci	r29, 0xFF	; 255
    7016:	28 81       	ld	r18, Y
    7018:	39 81       	ldd	r19, Y+1	; 0x01
    701a:	c9 5c       	subi	r28, 0xC9	; 201
    701c:	d0 40       	sbci	r29, 0x00	; 0
    701e:	62 1a       	sub	r6, r18
    7020:	73 0a       	sbc	r7, r19
    7022:	77 fe       	sbrs	r7, 7
    7024:	03 c0       	rjmp	.+6      	; 0x702c <draw_menu(bool)+0x846>
    7026:	3f ef       	ldi	r19, 0xFF	; 255
    7028:	63 1a       	sub	r6, r19
    702a:	73 0a       	sbc	r7, r19
    702c:	75 94       	asr	r7
    702e:	67 94       	ror	r6
    7030:	77 24       	eor	r7, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3446
  /// horni vybarveni
  my_lcd.Fill_Rect(x + 3, y + 3, size_x - 5, posy - 3, back_color );
  /// spodni vybarveni
  my_lcd.Fill_Rect(x + 3, y + tmpy + posy + 6, size_x - 5, size_y - tmpy - posy - 8, back_color );
  /// leve vybarveni
  my_lcd.Fill_Rect(x + 3, y + posy, posx - 3, tmpy + 6, back_color);
    7032:	82 0c       	add	r8, r2
    7034:	93 1c       	adc	r9, r3
    7036:	93 01       	movw	r18, r6
    7038:	23 50       	subi	r18, 0x03	; 3
    703a:	31 09       	sbc	r19, r1
    703c:	cb 54       	subi	r28, 0x4B	; 75
    703e:	df 4f       	sbci	r29, 0xFF	; 255
    7040:	e8 80       	ld	r14, Y
    7042:	c5 5b       	subi	r28, 0xB5	; 181
    7044:	d0 40       	sbci	r29, 0x00	; 0
    7046:	c9 54       	subi	r28, 0x49	; 73
    7048:	df 4f       	sbci	r29, 0xFF	; 255
    704a:	f8 80       	ld	r15, Y
    704c:	c7 5b       	subi	r28, 0xB7	; 183
    704e:	d0 40       	sbci	r29, 0x00	; 0
    7050:	86 01       	movw	r16, r12
    7052:	a4 01       	movw	r20, r8
    7054:	c5 53       	subi	r28, 0x35	; 53
    7056:	df 4f       	sbci	r29, 0xFF	; 255
    7058:	68 81       	ld	r22, Y
    705a:	79 81       	ldd	r23, Y+1	; 0x01
    705c:	cb 5c       	subi	r28, 0xCB	; 203
    705e:	d0 40       	sbci	r29, 0x00	; 0
    7060:	87 eb       	ldi	r24, 0xB7	; 183
    7062:	91 e1       	ldi	r25, 0x11	; 17
    7064:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3448
  /// prave vybarveni
  my_lcd.Fill_Rect(x + posx + tmpx, y + posy, size_x - posx - tmpx - 2, tmpy + 6, back_color );
    7068:	cd 54       	subi	r28, 0x4D	; 77
    706a:	df 4f       	sbci	r29, 0xFF	; 255
    706c:	28 80       	ld	r2, Y
    706e:	39 80       	ldd	r3, Y+1	; 0x01
    7070:	c3 5b       	subi	r28, 0xB3	; 179
    7072:	d0 40       	sbci	r29, 0x00	; 0
    7074:	26 0c       	add	r2, r6
    7076:	37 1c       	adc	r3, r7
    7078:	cb 53       	subi	r28, 0x3B	; 59
    707a:	df 4f       	sbci	r29, 0xFF	; 255
    707c:	28 81       	ld	r18, Y
    707e:	39 81       	ldd	r19, Y+1	; 0x01
    7080:	c5 5c       	subi	r28, 0xC5	; 197
    7082:	d0 40       	sbci	r29, 0x00	; 0
    7084:	26 19       	sub	r18, r6
    7086:	37 09       	sbc	r19, r7
    7088:	c7 53       	subi	r28, 0x37	; 55
    708a:	df 4f       	sbci	r29, 0xFF	; 255
    708c:	48 81       	ld	r20, Y
    708e:	59 81       	ldd	r21, Y+1	; 0x01
    7090:	c9 5c       	subi	r28, 0xC9	; 201
    7092:	d0 40       	sbci	r29, 0x00	; 0
    7094:	24 1b       	sub	r18, r20
    7096:	35 0b       	sbc	r19, r21
    7098:	22 50       	subi	r18, 0x02	; 2
    709a:	31 09       	sbc	r19, r1
    709c:	ba 01       	movw	r22, r20
    709e:	62 0d       	add	r22, r2
    70a0:	73 1d       	adc	r23, r3
    70a2:	cb 54       	subi	r28, 0x4B	; 75
    70a4:	df 4f       	sbci	r29, 0xFF	; 255
    70a6:	e8 80       	ld	r14, Y
    70a8:	c5 5b       	subi	r28, 0xB5	; 181
    70aa:	d0 40       	sbci	r29, 0x00	; 0
    70ac:	c9 54       	subi	r28, 0x49	; 73
    70ae:	df 4f       	sbci	r29, 0xFF	; 255
    70b0:	f8 80       	ld	r15, Y
    70b2:	c7 5b       	subi	r28, 0xB7	; 183
    70b4:	d0 40       	sbci	r29, 0x00	; 0
    70b6:	a4 01       	movw	r20, r8
    70b8:	87 eb       	ldi	r24, 0xB7	; 183
    70ba:	91 e1       	ldi	r25, 0x11	; 17
    70bc:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3449
  show_string(text, x + posx, y + posy, font_size, BLACK, back_color, 0);
    70c0:	cb 54       	subi	r28, 0x4B	; 75
    70c2:	df 4f       	sbci	r29, 0xFF	; 255
    70c4:	e8 80       	ld	r14, Y
    70c6:	c5 5b       	subi	r28, 0xB5	; 181
    70c8:	d0 40       	sbci	r29, 0x00	; 0
    70ca:	c9 54       	subi	r28, 0x49	; 73
    70cc:	df 4f       	sbci	r29, 0xFF	; 255
    70ce:	f8 80       	ld	r15, Y
    70d0:	c7 5b       	subi	r28, 0xB7	; 183
    70d2:	d0 40       	sbci	r29, 0x00	; 0
    70d4:	10 e0       	ldi	r17, 0x00	; 0
    70d6:	00 e0       	ldi	r16, 0x00	; 0
    70d8:	ce 53       	subi	r28, 0x3E	; 62
    70da:	df 4f       	sbci	r29, 0xFF	; 255
    70dc:	28 81       	ld	r18, Y
    70de:	c2 5c       	subi	r28, 0xC2	; 194
    70e0:	d0 40       	sbci	r29, 0x00	; 0
    70e2:	a4 01       	movw	r20, r8
    70e4:	b1 01       	movw	r22, r2
    70e6:	ce 01       	movw	r24, r28
    70e8:	8f 57       	subi	r24, 0x7F	; 127
    70ea:	9f 4f       	sbci	r25, 0xFF	; 255
    70ec:	0e 94 c0 30 	call	0x6180	; 0x6180 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.158]>
_Z9draw_menub():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:742
                     pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
                     pgm_read_word(&button_2->size_y), pgm_read_byte(&button_2->font_size), \
                     pgm_read_word(&button_2->color_active), \
                     pgm_read_word(&button_2->color_inactive), state,  str2);
    }
    if (click_x > 0 && click_y > 0)
    70f0:	c7 54       	subi	r28, 0x47	; 71
    70f2:	df 4f       	sbci	r29, 0xFF	; 255
    70f4:	68 81       	ld	r22, Y
    70f6:	79 81       	ldd	r23, Y+1	; 0x01
    70f8:	c9 5b       	subi	r28, 0xB9	; 185
    70fa:	d0 40       	sbci	r29, 0x00	; 0
    70fc:	67 2b       	or	r22, r23
    70fe:	09 f4       	brne	.+2      	; 0x7102 <draw_menu(bool)+0x91c>
    7100:	57 c0       	rjmp	.+174    	; 0x71b0 <draw_menu(bool)+0x9ca>
    7102:	c5 54       	subi	r28, 0x45	; 69
    7104:	df 4f       	sbci	r29, 0xFF	; 255
    7106:	88 81       	ld	r24, Y
    7108:	99 81       	ldd	r25, Y+1	; 0x01
    710a:	cb 5b       	subi	r28, 0xBB	; 187
    710c:	d0 40       	sbci	r29, 0x00	; 0
    710e:	89 2b       	or	r24, r25
    7110:	09 f4       	brne	.+2      	; 0x7114 <draw_menu(bool)+0x92e>
    7112:	4e c0       	rjmp	.+156    	; 0x71b0 <draw_menu(bool)+0x9ca>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:743
      if (button_click_touch(pgm_read_word(&button_2->x), pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), pgm_read_word(&button_2->size_y), click_x, click_y) == true)
    7114:	f5 01       	movw	r30, r10
    7116:	e6 55       	subi	r30, 0x56	; 86
    7118:	ff 4f       	sbci	r31, 0xFF	; 255
    711a:	e4 0d       	add	r30, r4
    711c:	f5 1d       	adc	r31, r5
    711e:	85 91       	lpm	r24, Z+
    7120:	94 91       	lpm	r25, Z
    7122:	f5 01       	movw	r30, r10
    7124:	e8 55       	subi	r30, 0x58	; 88
    7126:	ff 4f       	sbci	r31, 0xFF	; 255
    7128:	e4 0d       	add	r30, r4
    712a:	f5 1d       	adc	r31, r5
    712c:	25 91       	lpm	r18, Z+
    712e:	34 91       	lpm	r19, Z
    7130:	f5 01       	movw	r30, r10
    7132:	ea 55       	subi	r30, 0x5A	; 90
    7134:	ff 4f       	sbci	r31, 0xFF	; 255
    7136:	e4 0d       	add	r30, r4
    7138:	f5 1d       	adc	r31, r5
    713a:	45 91       	lpm	r20, Z+
    713c:	54 91       	lpm	r21, Z
    713e:	f5 01       	movw	r30, r10
    7140:	ec 55       	subi	r30, 0x5C	; 92
    7142:	ff 4f       	sbci	r31, 0xFF	; 255
    7144:	e4 0d       	add	r30, r4
    7146:	f5 1d       	adc	r31, r5
    7148:	65 91       	lpm	r22, Z+
    714a:	74 91       	lpm	r23, Z
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1274
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
    714c:	c7 54       	subi	r28, 0x47	; 71
    714e:	df 4f       	sbci	r29, 0xFF	; 255
    7150:	e8 81       	ld	r30, Y
    7152:	f9 81       	ldd	r31, Y+1	; 0x01
    7154:	c9 5b       	subi	r28, 0xB9	; 185
    7156:	d0 40       	sbci	r29, 0x00	; 0
    7158:	6e 17       	cp	r22, r30
    715a:	7f 07       	cpc	r23, r31
    715c:	4c f5       	brge	.+82     	; 0x71b0 <draw_menu(bool)+0x9ca>
button_click_touch():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3476


bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
  bool ret = false;
  if (is_pressed(x, y, x + size_x, y + size_y, click_x, click_y) == true)
    715e:	26 0f       	add	r18, r22
    7160:	37 1f       	adc	r19, r23
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1274
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
    7162:	e2 17       	cp	r30, r18
    7164:	f3 07       	cpc	r31, r19
    7166:	24 f5       	brge	.+72     	; 0x71b0 <draw_menu(bool)+0x9ca>
    7168:	c5 54       	subi	r28, 0x45	; 69
    716a:	df 4f       	sbci	r29, 0xFF	; 255
    716c:	28 81       	ld	r18, Y
    716e:	39 81       	ldd	r19, Y+1	; 0x01
    7170:	cb 5b       	subi	r28, 0xBB	; 187
    7172:	d0 40       	sbci	r29, 0x00	; 0
    7174:	42 17       	cp	r20, r18
    7176:	53 07       	cpc	r21, r19
    7178:	dc f4       	brge	.+54     	; 0x71b0 <draw_menu(bool)+0x9ca>
button_click_touch():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3476


bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
  bool ret = false;
  if (is_pressed(x, y, x + size_x, y + size_y, click_x, click_y) == true)
    717a:	84 0f       	add	r24, r20
    717c:	95 1f       	adc	r25, r21
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1274
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
    717e:	28 17       	cp	r18, r24
    7180:	39 07       	cpc	r19, r25
    7182:	b4 f4       	brge	.+44     	; 0x71b0 <draw_menu(bool)+0x9ca>
_Z9draw_menub():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:745
                     pgm_read_word(&button_2->color_inactive), state,  str2);
    }
    if (click_x > 0 && click_y > 0)
      if (button_click_touch(pgm_read_word(&button_2->x), pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), pgm_read_word(&button_2->size_y), click_x, click_y) == true)
      {
        fnt =  pgm_read_word(&button_2->onclick);
    7184:	f5 01       	movw	r30, r10
    7186:	ee 54       	subi	r30, 0x4E	; 78
    7188:	ff 4f       	sbci	r31, 0xFF	; 255
    718a:	e4 0d       	add	r30, r4
    718c:	f5 1d       	adc	r31, r5
    718e:	25 91       	lpm	r18, Z+
    7190:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:746
        ((fptr)fnt)(pgm_read_byte(&button_2->args));
    7192:	c9 53       	subi	r28, 0x39	; 57
    7194:	df 4f       	sbci	r29, 0xFF	; 255
    7196:	e8 81       	ld	r30, Y
    7198:	f9 81       	ldd	r31, Y+1	; 0x01
    719a:	c7 5c       	subi	r28, 0xC7	; 199
    719c:	d0 40       	sbci	r29, 0x00	; 0
    719e:	84 91       	lpm	r24, Z
    71a0:	f9 01       	movw	r30, r18
    71a2:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:747
        ret = true;
    71a4:	f1 e0       	ldi	r31, 0x01	; 1
    71a6:	cf 53       	subi	r28, 0x3F	; 63
    71a8:	df 4f       	sbci	r29, 0xFF	; 255
    71aa:	f8 83       	st	Y, r31
    71ac:	c1 5c       	subi	r28, 0xC1	; 193
    71ae:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:726
      }
  }

  if (ret == true)  goto draw_menu_end;
  /// tlacitko typ 2
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_2); idx++)
    71b0:	c3 54       	subi	r28, 0x43	; 67
    71b2:	df 4f       	sbci	r29, 0xFF	; 255
    71b4:	28 81       	ld	r18, Y
    71b6:	cd 5b       	subi	r28, 0xBD	; 189
    71b8:	d0 40       	sbci	r29, 0x00	; 0
    71ba:	2f 5f       	subi	r18, 0xFF	; 255
    71bc:	c3 54       	subi	r28, 0x43	; 67
    71be:	df 4f       	sbci	r29, 0xFF	; 255
    71c0:	28 83       	st	Y, r18
    71c2:	cd 5b       	subi	r28, 0xBD	; 189
    71c4:	d0 40       	sbci	r29, 0x00	; 0
    71c6:	94 cd       	rjmp	.-1240   	; 0x6cf0 <draw_menu(bool)+0x50a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:750
        fnt =  pgm_read_word(&button_2->onclick);
        ((fptr)fnt)(pgm_read_byte(&button_2->args));
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
    71c8:	cf 53       	subi	r28, 0x3F	; 63
    71ca:	df 4f       	sbci	r29, 0xFF	; 255
    71cc:	38 81       	ld	r19, Y
    71ce:	c1 5c       	subi	r28, 0xC1	; 193
    71d0:	d0 40       	sbci	r29, 0x00	; 0
    71d2:	31 11       	cpse	r19, r1
    71d4:	3c c4       	rjmp	.+2168   	; 0x7a4e <draw_menu(bool)+0x1268>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:752
  /// menu programy
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_function_1); idx++)
    71d6:	f1 2c       	mov	r15, r1
    71d8:	62 01       	movw	r12, r4
    71da:	45 e7       	ldi	r20, 0x75	; 117
    71dc:	c4 1a       	sub	r12, r20
    71de:	4e ef       	ldi	r20, 0xFE	; 254
    71e0:	d4 0a       	sbc	r13, r20
    71e2:	b9 e0       	ldi	r27, 0x09	; 9
    71e4:	eb 2e       	mov	r14, r27
    71e6:	f6 01       	movw	r30, r12
    71e8:	84 91       	lpm	r24, Z
    71ea:	f8 16       	cp	r15, r24
    71ec:	08 f0       	brcs	.+2      	; 0x71f0 <draw_menu(bool)+0xa0a>
    71ee:	37 c0       	rjmp	.+110    	; 0x725e <draw_menu(bool)+0xa78>
    71f0:	fe 9c       	mul	r15, r14
    71f2:	80 01       	movw	r16, r0
    71f4:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:755
  {
    function_1 = &current->function_1[idx];
    rfnt = pgm_read_word(&function_1->redraw);
    71f6:	f8 01       	movw	r30, r16
    71f8:	e9 5e       	subi	r30, 0xE9	; 233
    71fa:	fe 4f       	sbci	r31, 0xFE	; 254
    71fc:	e4 0d       	add	r30, r4
    71fe:	f5 1d       	adc	r31, r5
    7200:	25 91       	lpm	r18, Z+
    7202:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:756
    rdr = (ret_fptr(rfnt))(pgm_read_word(&function_1->args));
    7204:	f8 01       	movw	r30, r16
    7206:	ec 5e       	subi	r30, 0xEC	; 236
    7208:	fe 4f       	sbci	r31, 0xFE	; 254
    720a:	e4 0d       	add	r30, r4
    720c:	f5 1d       	adc	r31, r5
    720e:	85 91       	lpm	r24, Z+
    7210:	94 91       	lpm	r25, Z
    7212:	f9 01       	movw	r30, r18
    7214:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:757
    if (rdr == 1 || redraw == true)
    7216:	81 30       	cpi	r24, 0x01	; 1
    7218:	39 f0       	breq	.+14     	; 0x7228 <draw_menu(bool)+0xa42>
    721a:	cc 53       	subi	r28, 0x3C	; 60
    721c:	df 4f       	sbci	r29, 0xFF	; 255
    721e:	f8 81       	ld	r31, Y
    7220:	c4 5c       	subi	r28, 0xC4	; 196
    7222:	d0 40       	sbci	r29, 0x00	; 0
    7224:	ff 23       	and	r31, r31
    7226:	c9 f0       	breq	.+50     	; 0x725a <draw_menu(bool)+0xa74>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:759
    {
      fnt_xy =  pgm_read_dword(&function_1->fnt);
    7228:	f8 01       	movw	r30, r16
    722a:	eb 5e       	subi	r30, 0xEB	; 235
    722c:	fe 4f       	sbci	r31, 0xFE	; 254
    722e:	e4 0d       	add	r30, r4
    7230:	f5 1d       	adc	r31, r5
    7232:	85 90       	lpm	r8, Z+
    7234:	95 90       	lpm	r9, Z+
    7236:	a5 90       	lpm	r10, Z+
    7238:	b4 90       	lpm	r11, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:760
      ((fptr_xy)fnt_xy)(pgm_read_word(&function_1->x), pgm_read_word(&function_1->y));
    723a:	f8 01       	movw	r30, r16
    723c:	ee 5e       	subi	r30, 0xEE	; 238
    723e:	fe 4f       	sbci	r31, 0xFE	; 254
    7240:	e4 0d       	add	r30, r4
    7242:	f5 1d       	adc	r31, r5
    7244:	65 91       	lpm	r22, Z+
    7246:	74 91       	lpm	r23, Z
    7248:	f8 01       	movw	r30, r16
    724a:	e0 5f       	subi	r30, 0xF0	; 240
    724c:	fe 4f       	sbci	r31, 0xFE	; 254
    724e:	e4 0d       	add	r30, r4
    7250:	f5 1d       	adc	r31, r5
    7252:	85 91       	lpm	r24, Z+
    7254:	94 91       	lpm	r25, Z
    7256:	f4 01       	movw	r30, r8
    7258:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:752
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
  /// menu programy
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_function_1); idx++)
    725a:	f3 94       	inc	r15
    725c:	c4 cf       	rjmp	.-120    	; 0x71e6 <draw_menu(bool)+0xa00>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:766
    }
  }

  if (ret == true)  goto draw_menu_end;
  /// menu switch_1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_switch_1); idx++)
    725e:	cd 54       	subi	r28, 0x4D	; 77
    7260:	df 4f       	sbci	r29, 0xFF	; 255
    7262:	18 82       	st	Y, r1
    7264:	c3 5b       	subi	r28, 0xB3	; 179
    7266:	d0 40       	sbci	r29, 0x00	; 0
    7268:	92 01       	movw	r18, r4
    726a:	24 57       	subi	r18, 0x74	; 116
    726c:	3e 4f       	sbci	r19, 0xFE	; 254
    726e:	ce 53       	subi	r28, 0x3E	; 62
    7270:	df 4f       	sbci	r29, 0xFF	; 255
    7272:	39 83       	std	Y+1, r19	; 0x01
    7274:	28 83       	st	Y, r18
    7276:	c2 5c       	subi	r28, 0xC2	; 194
    7278:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:773
    switch_1 = &current->switch_1[idx];
    rfnt = pgm_read_word(&switch_1->redraw);
    rdr = (ret_fptr(rfnt))(pgm_read_word(&switch_1->args));
    if (rdr == 1 || redraw == true)
    {
      strcpy_P(str2, pgm_read_word(&switch_1->name));
    727a:	3e 01       	movw	r6, r28
    727c:	31 e8       	ldi	r19, 0x81	; 129
    727e:	63 0e       	add	r6, r19
    7280:	71 1c       	adc	r7, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:778
      rfnt = pgm_read_word(&switch_1->get_status_fnt);
      gss = pgm_read_word(&switch_1->get_status_string);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args));
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), str1, str3);
    7282:	ae 01       	movw	r20, r28
    7284:	4f 5f       	subi	r20, 0xFF	; 255
    7286:	5f 4f       	sbci	r21, 0xFF	; 255
    7288:	cf 54       	subi	r28, 0x4F	; 79
    728a:	df 4f       	sbci	r29, 0xFF	; 255
    728c:	59 83       	std	Y+1, r21	; 0x01
    728e:	48 83       	st	Y, r20
    7290:	c1 5b       	subi	r28, 0xB1	; 177
    7292:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:766
    }
  }

  if (ret == true)  goto draw_menu_end;
  /// menu switch_1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_switch_1); idx++)
    7294:	ce 53       	subi	r28, 0x3E	; 62
    7296:	df 4f       	sbci	r29, 0xFF	; 255
    7298:	e8 81       	ld	r30, Y
    729a:	f9 81       	ldd	r31, Y+1	; 0x01
    729c:	c2 5c       	subi	r28, 0xC2	; 194
    729e:	d0 40       	sbci	r29, 0x00	; 0
    72a0:	84 91       	lpm	r24, Z
    72a2:	cd 54       	subi	r28, 0x4D	; 77
    72a4:	df 4f       	sbci	r29, 0xFF	; 255
    72a6:	f8 81       	ld	r31, Y
    72a8:	c3 5b       	subi	r28, 0xB3	; 179
    72aa:	d0 40       	sbci	r29, 0x00	; 0
    72ac:	f8 17       	cp	r31, r24
    72ae:	08 f0       	brcs	.+2      	; 0x72b2 <draw_menu(bool)+0xacc>
    72b0:	b7 c1       	rjmp	.+878    	; 0x7620 <draw_menu(bool)+0xe3a>
    72b2:	28 e1       	ldi	r18, 0x18	; 24
    72b4:	f2 9f       	mul	r31, r18
    72b6:	60 01       	movw	r12, r0
    72b8:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:769
  {
    switch_1 = &current->switch_1[idx];
    rfnt = pgm_read_word(&switch_1->redraw);
    72ba:	f6 01       	movw	r30, r12
    72bc:	ef 5b       	subi	r30, 0xBF	; 191
    72be:	fe 4f       	sbci	r31, 0xFE	; 254
    72c0:	e4 0d       	add	r30, r4
    72c2:	f5 1d       	adc	r31, r5
    72c4:	25 91       	lpm	r18, Z+
    72c6:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:770
    rdr = (ret_fptr(rfnt))(pgm_read_word(&switch_1->args));
    72c8:	c6 01       	movw	r24, r12
    72ca:	86 5c       	subi	r24, 0xC6	; 198
    72cc:	9e 4f       	sbci	r25, 0xFE	; 254
    72ce:	a2 01       	movw	r20, r4
    72d0:	48 0f       	add	r20, r24
    72d2:	59 1f       	adc	r21, r25
    72d4:	cb 54       	subi	r28, 0x4B	; 75
    72d6:	df 4f       	sbci	r29, 0xFF	; 255
    72d8:	59 83       	std	Y+1, r21	; 0x01
    72da:	48 83       	st	Y, r20
    72dc:	c5 5b       	subi	r28, 0xB5	; 181
    72de:	d0 40       	sbci	r29, 0x00	; 0
    72e0:	fa 01       	movw	r30, r20
    72e2:	85 91       	lpm	r24, Z+
    72e4:	94 91       	lpm	r25, Z
    72e6:	f9 01       	movw	r30, r18
    72e8:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:771
    if (rdr == 1 || redraw == true)
    72ea:	81 30       	cpi	r24, 0x01	; 1
    72ec:	41 f0       	breq	.+16     	; 0x72fe <draw_menu(bool)+0xb18>
    72ee:	cc 53       	subi	r28, 0x3C	; 60
    72f0:	df 4f       	sbci	r29, 0xFF	; 255
    72f2:	f8 81       	ld	r31, Y
    72f4:	c4 5c       	subi	r28, 0xC4	; 196
    72f6:	d0 40       	sbci	r29, 0x00	; 0
    72f8:	ff 23       	and	r31, r31
    72fa:	09 f4       	brne	.+2      	; 0x72fe <draw_menu(bool)+0xb18>
    72fc:	25 c1       	rjmp	.+586    	; 0x7548 <draw_menu(bool)+0xd62>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:773
    {
      strcpy_P(str2, pgm_read_word(&switch_1->name));
    72fe:	f6 01       	movw	r30, r12
    7300:	e5 5d       	subi	r30, 0xD5	; 213
    7302:	fe 4f       	sbci	r31, 0xFE	; 254
    7304:	e4 0d       	add	r30, r4
    7306:	f5 1d       	adc	r31, r5
    7308:	65 91       	lpm	r22, Z+
    730a:	74 91       	lpm	r23, Z
    730c:	c3 01       	movw	r24, r6
    730e:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:774
      rfnt = pgm_read_word(&switch_1->get_status_fnt);
    7312:	f6 01       	movw	r30, r12
    7314:	e3 5c       	subi	r30, 0xC3	; 195
    7316:	fe 4f       	sbci	r31, 0xFE	; 254
    7318:	e4 0d       	add	r30, r4
    731a:	f5 1d       	adc	r31, r5
    731c:	25 91       	lpm	r18, Z+
    731e:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:775
      gss = pgm_read_word(&switch_1->get_status_string);
    7320:	f6 01       	movw	r30, r12
    7322:	e1 5c       	subi	r30, 0xC1	; 193
    7324:	fe 4f       	sbci	r31, 0xFE	; 254
    7326:	e4 0d       	add	r30, r4
    7328:	f5 1d       	adc	r31, r5
    732a:	05 91       	lpm	r16, Z+
    732c:	14 91       	lpm	r17, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:776
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args));
    732e:	cb 54       	subi	r28, 0x4B	; 75
    7330:	df 4f       	sbci	r29, 0xFF	; 255
    7332:	e8 81       	ld	r30, Y
    7334:	f9 81       	ldd	r31, Y+1	; 0x01
    7336:	c5 5b       	subi	r28, 0xB5	; 181
    7338:	d0 40       	sbci	r29, 0x00	; 0
    733a:	84 91       	lpm	r24, Z
    733c:	f9 01       	movw	r30, r18
    733e:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:777
      str3[0] = 0;
    7340:	cf 55       	subi	r28, 0x5F	; 95
    7342:	df 4f       	sbci	r29, 0xFF	; 255
    7344:	18 82       	st	Y, r1
    7346:	c1 5a       	subi	r28, 0xA1	; 161
    7348:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:778
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), str1, str3);
    734a:	cb 54       	subi	r28, 0x4B	; 75
    734c:	df 4f       	sbci	r29, 0xFF	; 255
    734e:	e8 81       	ld	r30, Y
    7350:	f9 81       	ldd	r31, Y+1	; 0x01
    7352:	c5 5b       	subi	r28, 0xB5	; 181
    7354:	d0 40       	sbci	r29, 0x00	; 0
    7356:	84 91       	lpm	r24, Z
    7358:	ae 01       	movw	r20, r28
    735a:	4f 55       	subi	r20, 0x5F	; 95
    735c:	5f 4f       	sbci	r21, 0xFF	; 255
    735e:	be 01       	movw	r22, r28
    7360:	6f 5f       	subi	r22, 0xFF	; 255
    7362:	7f 4f       	sbci	r23, 0xFF	; 255
    7364:	f8 01       	movw	r30, r16
    7366:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:783
      button_switch_1(pgm_read_word(&switch_1->x), \
                      pgm_read_word(&switch_1->y), \
                      pgm_read_word(&switch_1->size_x), \
                      pgm_read_word(&switch_1->size_y), \
                      pgm_read_word(&switch_1->font_size), state, str2, str1);
    7368:	f6 01       	movw	r30, r12
    736a:	eb 5c       	subi	r30, 0xCB	; 203
    736c:	fe 4f       	sbci	r31, 0xFE	; 254
    736e:	e4 0d       	add	r30, r4
    7370:	f5 1d       	adc	r31, r5
    7372:	25 91       	lpm	r18, Z+
    7374:	34 91       	lpm	r19, Z
    7376:	c9 54       	subi	r28, 0x49	; 73
    7378:	df 4f       	sbci	r29, 0xFF	; 255
    737a:	39 83       	std	Y+1, r19	; 0x01
    737c:	28 83       	st	Y, r18
    737e:	c7 5b       	subi	r28, 0xB7	; 183
    7380:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:782
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), str1, str3);
      button_switch_1(pgm_read_word(&switch_1->x), \
                      pgm_read_word(&switch_1->y), \
                      pgm_read_word(&switch_1->size_x), \
                      pgm_read_word(&switch_1->size_y), \
    7382:	f6 01       	movw	r30, r12
    7384:	ed 5c       	subi	r30, 0xCD	; 205
    7386:	fe 4f       	sbci	r31, 0xFE	; 254
    7388:	e4 0d       	add	r30, r4
    738a:	f5 1d       	adc	r31, r5
    738c:	25 90       	lpm	r2, Z+
    738e:	34 90       	lpm	r3, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:781
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args));
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), str1, str3);
      button_switch_1(pgm_read_word(&switch_1->x), \
                      pgm_read_word(&switch_1->y), \
                      pgm_read_word(&switch_1->size_x), \
    7390:	f6 01       	movw	r30, r12
    7392:	ef 5c       	subi	r30, 0xCF	; 207
    7394:	fe 4f       	sbci	r31, 0xFE	; 254
    7396:	e4 0d       	add	r30, r4
    7398:	f5 1d       	adc	r31, r5
    739a:	65 91       	lpm	r22, Z+
    739c:	74 91       	lpm	r23, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:780
      gss = pgm_read_word(&switch_1->get_status_string);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args));
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), str1, str3);
      button_switch_1(pgm_read_word(&switch_1->x), \
                      pgm_read_word(&switch_1->y), \
    739e:	f6 01       	movw	r30, r12
    73a0:	e1 5d       	subi	r30, 0xD1	; 209
    73a2:	fe 4f       	sbci	r31, 0xFE	; 254
    73a4:	e4 0d       	add	r30, r4
    73a6:	f5 1d       	adc	r31, r5
    73a8:	a5 90       	lpm	r10, Z+
    73aa:	b4 90       	lpm	r11, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:779
      rfnt = pgm_read_word(&switch_1->get_status_fnt);
      gss = pgm_read_word(&switch_1->get_status_string);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args));
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), str1, str3);
      button_switch_1(pgm_read_word(&switch_1->x), \
    73ac:	f6 01       	movw	r30, r12
    73ae:	e3 5d       	subi	r30, 0xD3	; 211
    73b0:	fe 4f       	sbci	r31, 0xFE	; 254
    73b2:	e4 0d       	add	r30, r4
    73b4:	f5 1d       	adc	r31, r5
    73b6:	85 90       	lpm	r8, Z+
    73b8:	94 90       	lpm	r9, Z
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    73ba:	10 92 c2 11 	sts	0x11C2, r1	; 0x8011c2 <my_lcd+0xb>
    73be:	10 92 c1 11 	sts	0x11C1, r1	; 0x8011c1 <my_lcd+0xa>
    73c2:	33 24       	eor	r3, r3
button_switch_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3457

void button_switch_1(uint16_t x, uint16_t y, uint8_t size_x, uint8_t size_y, uint8_t font_size, uint8_t state, char *text, char *text_value)
{
  uint8_t posx , posy, tmpy, tmpx;
  my_lcd.Set_Draw_color(BLACK);
  my_lcd.Draw_Rectangle(x, y, x + size_x + 2, y + size_y);
    73c4:	75 01       	movw	r14, r10
    73c6:	e2 0c       	add	r14, r2
    73c8:	f3 1c       	adc	r15, r3
    73ca:	ab 01       	movw	r20, r22
    73cc:	55 27       	eor	r21, r21
    73ce:	c3 54       	subi	r28, 0x43	; 67
    73d0:	df 4f       	sbci	r29, 0xFF	; 255
    73d2:	59 83       	std	Y+1, r21	; 0x01
    73d4:	48 83       	st	Y, r20
    73d6:	cd 5b       	subi	r28, 0xBD	; 189
    73d8:	d0 40       	sbci	r29, 0x00	; 0
    73da:	8a 01       	movw	r16, r20
    73dc:	08 0d       	add	r16, r8
    73de:	19 1d       	adc	r17, r9
    73e0:	a8 01       	movw	r20, r16
    73e2:	4e 5f       	subi	r20, 0xFE	; 254
    73e4:	5f 4f       	sbci	r21, 0xFF	; 255
    73e6:	97 01       	movw	r18, r14
    73e8:	b5 01       	movw	r22, r10
    73ea:	c4 01       	movw	r24, r8
    73ec:	0e 94 82 20 	call	0x4104	; 0x4104 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.172]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3458
  my_lcd.Draw_Rectangle(x + 1, y + 1, x + size_x + 1, y + size_y - 1);
    73f0:	97 01       	movw	r18, r14
    73f2:	21 50       	subi	r18, 0x01	; 1
    73f4:	31 09       	sbc	r19, r1
    73f6:	a8 01       	movw	r20, r16
    73f8:	4f 5f       	subi	r20, 0xFF	; 255
    73fa:	5f 4f       	sbci	r21, 0xFF	; 255
    73fc:	b5 01       	movw	r22, r10
    73fe:	6f 5f       	subi	r22, 0xFF	; 255
    7400:	7f 4f       	sbci	r23, 0xFF	; 255
    7402:	c4 01       	movw	r24, r8
    7404:	01 96       	adiw	r24, 0x01	; 1
    7406:	0e 94 82 20 	call	0x4104	; 0x4104 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.172]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3459
  my_lcd.Draw_Rectangle(x + 2, y + 2, x + size_x, y + size_y - 2);
    740a:	97 01       	movw	r18, r14
    740c:	22 50       	subi	r18, 0x02	; 2
    740e:	31 09       	sbc	r19, r1
    7410:	b5 01       	movw	r22, r10
    7412:	6e 5f       	subi	r22, 0xFE	; 254
    7414:	7f 4f       	sbci	r23, 0xFF	; 255
    7416:	a8 01       	movw	r20, r16
    7418:	c4 01       	movw	r24, r8
    741a:	02 96       	adiw	r24, 0x02	; 2
    741c:	0e 94 82 20 	call	0x4104	; 0x4104 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.172]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3461
  tmpy = show_string_size_hight(font_size);
  tmpx = show_string_size_width(strlen(text), font_size);
    7420:	f3 01       	movw	r30, r6
    7422:	01 90       	ld	r0, Z+
    7424:	00 20       	and	r0, r0
    7426:	e9 f7       	brne	.-6      	; 0x7422 <draw_menu(bool)+0xc3c>
    7428:	31 97       	sbiw	r30, 0x01	; 1
    742a:	e6 19       	sub	r30, r6
    742c:	f7 09       	sbc	r31, r7
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1268
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
    742e:	c9 54       	subi	r28, 0x49	; 73
    7430:	df 4f       	sbci	r29, 0xFF	; 255
    7432:	88 81       	ld	r24, Y
    7434:	c7 5b       	subi	r28, 0xB7	; 183
    7436:	d0 40       	sbci	r29, 0x00	; 0
    7438:	88 0f       	add	r24, r24
    743a:	c9 54       	subi	r28, 0x49	; 73
    743c:	df 4f       	sbci	r29, 0xFF	; 255
    743e:	58 81       	ld	r21, Y
    7440:	c7 5b       	subi	r28, 0xB7	; 183
    7442:	d0 40       	sbci	r29, 0x00	; 0
    7444:	85 0f       	add	r24, r21
    7446:	88 0f       	add	r24, r24
button_switch_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3463
  my_lcd.Draw_Rectangle(x + 1, y + 1, x + size_x + 1, y + size_y - 1);
  my_lcd.Draw_Rectangle(x + 2, y + 2, x + size_x, y + size_y - 2);
  tmpy = show_string_size_hight(font_size);
  tmpx = show_string_size_width(strlen(text), font_size);
  posx = (size_x - tmpx) / 2;
  posy = (size_y - tmpy) / 4;
    7448:	a1 01       	movw	r20, r2
    744a:	48 1b       	sub	r20, r24
    744c:	51 09       	sbc	r21, r1
    744e:	57 ff       	sbrs	r21, 7
    7450:	02 c0       	rjmp	.+4      	; 0x7456 <draw_menu(bool)+0xc70>
    7452:	4d 5f       	subi	r20, 0xFD	; 253
    7454:	5f 4f       	sbci	r21, 0xFF	; 255
    7456:	55 95       	asr	r21
    7458:	47 95       	ror	r20
    745a:	55 95       	asr	r21
    745c:	47 95       	ror	r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3464
  show_string(text, x + posx, y + posy, font_size, BLACK, WHITE, 0);
    745e:	4a 0d       	add	r20, r10
    7460:	5b 2d       	mov	r21, r11
    7462:	51 1d       	adc	r21, r1
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1263
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    7464:	66 e0       	ldi	r22, 0x06	; 6
    7466:	e6 9f       	mul	r30, r22
    7468:	f0 01       	movw	r30, r0
    746a:	11 24       	eor	r1, r1
    746c:	c9 54       	subi	r28, 0x49	; 73
    746e:	df 4f       	sbci	r29, 0xFF	; 255
    7470:	78 81       	ld	r23, Y
    7472:	c7 5b       	subi	r28, 0xB7	; 183
    7474:	d0 40       	sbci	r29, 0x00	; 0
    7476:	7e 9f       	mul	r23, r30
    7478:	c0 01       	movw	r24, r0
    747a:	7f 9f       	mul	r23, r31
    747c:	90 0d       	add	r25, r0
    747e:	11 24       	eor	r1, r1
button_switch_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3462
  my_lcd.Draw_Rectangle(x, y, x + size_x + 2, y + size_y);
  my_lcd.Draw_Rectangle(x + 1, y + 1, x + size_x + 1, y + size_y - 1);
  my_lcd.Draw_Rectangle(x + 2, y + 2, x + size_x, y + size_y - 2);
  tmpy = show_string_size_hight(font_size);
  tmpx = show_string_size_width(strlen(text), font_size);
  posx = (size_x - tmpx) / 2;
    7480:	99 27       	eor	r25, r25
    7482:	c3 54       	subi	r28, 0x43	; 67
    7484:	df 4f       	sbci	r29, 0xFF	; 255
    7486:	68 81       	ld	r22, Y
    7488:	79 81       	ldd	r23, Y+1	; 0x01
    748a:	cd 5b       	subi	r28, 0xBD	; 189
    748c:	d0 40       	sbci	r29, 0x00	; 0
    748e:	68 1b       	sub	r22, r24
    7490:	79 0b       	sbc	r23, r25
    7492:	77 ff       	sbrs	r23, 7
    7494:	02 c0       	rjmp	.+4      	; 0x749a <draw_menu(bool)+0xcb4>
    7496:	6f 5f       	subi	r22, 0xFF	; 255
    7498:	7f 4f       	sbci	r23, 0xFF	; 255
    749a:	75 95       	asr	r23
    749c:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3464
  posy = (size_y - tmpy) / 4;
  show_string(text, x + posx, y + posy, font_size, BLACK, WHITE, 0);
    749e:	68 0d       	add	r22, r8
    74a0:	79 2d       	mov	r23, r9
    74a2:	71 1d       	adc	r23, r1
    74a4:	ee 24       	eor	r14, r14
    74a6:	ea 94       	dec	r14
    74a8:	fe 2c       	mov	r15, r14
    74aa:	10 e0       	ldi	r17, 0x00	; 0
    74ac:	00 e0       	ldi	r16, 0x00	; 0
    74ae:	c9 54       	subi	r28, 0x49	; 73
    74b0:	df 4f       	sbci	r29, 0xFF	; 255
    74b2:	28 81       	ld	r18, Y
    74b4:	c7 5b       	subi	r28, 0xB7	; 183
    74b6:	d0 40       	sbci	r29, 0x00	; 0
    74b8:	c3 01       	movw	r24, r6
    74ba:	0e 94 c0 30 	call	0x6180	; 0x6180 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.158]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3466
  tmpy = show_string_size_hight(1);
  tmpx = show_string_size_width(strlen(text_value), 1);
    74be:	cf 54       	subi	r28, 0x4F	; 79
    74c0:	df 4f       	sbci	r29, 0xFF	; 255
    74c2:	e8 81       	ld	r30, Y
    74c4:	f9 81       	ldd	r31, Y+1	; 0x01
    74c6:	c1 5b       	subi	r28, 0xB1	; 177
    74c8:	d0 40       	sbci	r29, 0x00	; 0
    74ca:	01 90       	ld	r0, Z+
    74cc:	00 20       	and	r0, r0
    74ce:	e9 f7       	brne	.-6      	; 0x74ca <draw_menu(bool)+0xce4>
    74d0:	31 97       	sbiw	r30, 0x01	; 1
    74d2:	cf 54       	subi	r28, 0x4F	; 79
    74d4:	df 4f       	sbci	r29, 0xFF	; 255
    74d6:	88 81       	ld	r24, Y
    74d8:	99 81       	ldd	r25, Y+1	; 0x01
    74da:	c1 5b       	subi	r28, 0xB1	; 177
    74dc:	d0 40       	sbci	r29, 0x00	; 0
    74de:	e8 1b       	sub	r30, r24
    74e0:	f9 0b       	sbc	r31, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3468
  posx = (size_x - tmpx) / 2;
  posy = (size_y - tmpy) / 4;
    74e2:	a1 01       	movw	r20, r2
    74e4:	46 50       	subi	r20, 0x06	; 6
    74e6:	51 09       	sbc	r21, r1
    74e8:	57 ff       	sbrs	r21, 7
    74ea:	02 c0       	rjmp	.+4      	; 0x74f0 <draw_menu(bool)+0xd0a>
    74ec:	4d 5f       	subi	r20, 0xFD	; 253
    74ee:	5f 4f       	sbci	r21, 0xFF	; 255
    74f0:	55 95       	asr	r21
    74f2:	47 95       	ror	r20
    74f4:	55 95       	asr	r21
    74f6:	47 95       	ror	r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3469
  show_string(text_value, x + posx, y + (posy * 3), 1, BLACK, WHITE, 0);
    74f8:	55 27       	eor	r21, r21
    74fa:	ca 01       	movw	r24, r20
    74fc:	88 0f       	add	r24, r24
    74fe:	99 1f       	adc	r25, r25
    7500:	48 0f       	add	r20, r24
    7502:	59 1f       	adc	r21, r25
    7504:	4a 0d       	add	r20, r10
    7506:	5b 1d       	adc	r21, r11
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1263
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    7508:	96 e0       	ldi	r25, 0x06	; 6
    750a:	e9 9f       	mul	r30, r25
    750c:	f0 01       	movw	r30, r0
    750e:	11 24       	eor	r1, r1
button_switch_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3467
  posx = (size_x - tmpx) / 2;
  posy = (size_y - tmpy) / 4;
  show_string(text, x + posx, y + posy, font_size, BLACK, WHITE, 0);
  tmpy = show_string_size_hight(1);
  tmpx = show_string_size_width(strlen(text_value), 1);
  posx = (size_x - tmpx) / 2;
    7510:	ff 27       	eor	r31, r31
    7512:	c3 54       	subi	r28, 0x43	; 67
    7514:	df 4f       	sbci	r29, 0xFF	; 255
    7516:	68 81       	ld	r22, Y
    7518:	79 81       	ldd	r23, Y+1	; 0x01
    751a:	cd 5b       	subi	r28, 0xBD	; 189
    751c:	d0 40       	sbci	r29, 0x00	; 0
    751e:	6e 1b       	sub	r22, r30
    7520:	7f 0b       	sbc	r23, r31
    7522:	77 ff       	sbrs	r23, 7
    7524:	02 c0       	rjmp	.+4      	; 0x752a <draw_menu(bool)+0xd44>
    7526:	6f 5f       	subi	r22, 0xFF	; 255
    7528:	7f 4f       	sbci	r23, 0xFF	; 255
    752a:	75 95       	asr	r23
    752c:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3469
  posy = (size_y - tmpy) / 4;
  show_string(text_value, x + posx, y + (posy * 3), 1, BLACK, WHITE, 0);
    752e:	68 0d       	add	r22, r8
    7530:	79 2d       	mov	r23, r9
    7532:	71 1d       	adc	r23, r1
    7534:	ee 24       	eor	r14, r14
    7536:	ea 94       	dec	r14
    7538:	fe 2c       	mov	r15, r14
    753a:	10 e0       	ldi	r17, 0x00	; 0
    753c:	00 e0       	ldi	r16, 0x00	; 0
    753e:	21 e0       	ldi	r18, 0x01	; 1
    7540:	ce 01       	movw	r24, r28
    7542:	01 96       	adiw	r24, 0x01	; 1
    7544:	0e 94 c0 30 	call	0x6180	; 0x6180 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.158]>
_Z9draw_menub():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:786
                      pgm_read_word(&switch_1->size_x), \
                      pgm_read_word(&switch_1->size_y), \
                      pgm_read_word(&switch_1->font_size), state, str2, str1);

    }
    if (click_x > 0 && click_y > 0)
    7548:	c7 54       	subi	r28, 0x47	; 71
    754a:	df 4f       	sbci	r29, 0xFF	; 255
    754c:	e8 81       	ld	r30, Y
    754e:	f9 81       	ldd	r31, Y+1	; 0x01
    7550:	c9 5b       	subi	r28, 0xB9	; 185
    7552:	d0 40       	sbci	r29, 0x00	; 0
    7554:	ef 2b       	or	r30, r31
    7556:	09 f4       	brne	.+2      	; 0x755a <draw_menu(bool)+0xd74>
    7558:	57 c0       	rjmp	.+174    	; 0x7608 <draw_menu(bool)+0xe22>
    755a:	c5 54       	subi	r28, 0x45	; 69
    755c:	df 4f       	sbci	r29, 0xFF	; 255
    755e:	28 81       	ld	r18, Y
    7560:	39 81       	ldd	r19, Y+1	; 0x01
    7562:	cb 5b       	subi	r28, 0xBB	; 187
    7564:	d0 40       	sbci	r29, 0x00	; 0
    7566:	23 2b       	or	r18, r19
    7568:	09 f4       	brne	.+2      	; 0x756c <draw_menu(bool)+0xd86>
    756a:	4e c0       	rjmp	.+156    	; 0x7608 <draw_menu(bool)+0xe22>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:787
      if (button_click_touch(pgm_read_word(&switch_1->x), pgm_read_word(&switch_1->y), pgm_read_word(&switch_1->size_x), pgm_read_word(&switch_1->size_y), click_x, click_y) == true)
    756c:	f6 01       	movw	r30, r12
    756e:	ed 5c       	subi	r30, 0xCD	; 205
    7570:	fe 4f       	sbci	r31, 0xFE	; 254
    7572:	e4 0d       	add	r30, r4
    7574:	f5 1d       	adc	r31, r5
    7576:	85 91       	lpm	r24, Z+
    7578:	94 91       	lpm	r25, Z
    757a:	f6 01       	movw	r30, r12
    757c:	ef 5c       	subi	r30, 0xCF	; 207
    757e:	fe 4f       	sbci	r31, 0xFE	; 254
    7580:	e4 0d       	add	r30, r4
    7582:	f5 1d       	adc	r31, r5
    7584:	25 91       	lpm	r18, Z+
    7586:	34 91       	lpm	r19, Z
    7588:	f6 01       	movw	r30, r12
    758a:	e1 5d       	subi	r30, 0xD1	; 209
    758c:	fe 4f       	sbci	r31, 0xFE	; 254
    758e:	e4 0d       	add	r30, r4
    7590:	f5 1d       	adc	r31, r5
    7592:	45 91       	lpm	r20, Z+
    7594:	54 91       	lpm	r21, Z
    7596:	f6 01       	movw	r30, r12
    7598:	e3 5d       	subi	r30, 0xD3	; 211
    759a:	fe 4f       	sbci	r31, 0xFE	; 254
    759c:	e4 0d       	add	r30, r4
    759e:	f5 1d       	adc	r31, r5
    75a0:	65 91       	lpm	r22, Z+
    75a2:	74 91       	lpm	r23, Z
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1274
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
    75a4:	c7 54       	subi	r28, 0x47	; 71
    75a6:	df 4f       	sbci	r29, 0xFF	; 255
    75a8:	e8 81       	ld	r30, Y
    75aa:	f9 81       	ldd	r31, Y+1	; 0x01
    75ac:	c9 5b       	subi	r28, 0xB9	; 185
    75ae:	d0 40       	sbci	r29, 0x00	; 0
    75b0:	6e 17       	cp	r22, r30
    75b2:	7f 07       	cpc	r23, r31
    75b4:	4c f5       	brge	.+82     	; 0x7608 <draw_menu(bool)+0xe22>
button_click_touch():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3476


bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
  bool ret = false;
  if (is_pressed(x, y, x + size_x, y + size_y, click_x, click_y) == true)
    75b6:	26 0f       	add	r18, r22
    75b8:	37 1f       	adc	r19, r23
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1274
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
    75ba:	e2 17       	cp	r30, r18
    75bc:	f3 07       	cpc	r31, r19
    75be:	24 f5       	brge	.+72     	; 0x7608 <draw_menu(bool)+0xe22>
    75c0:	c5 54       	subi	r28, 0x45	; 69
    75c2:	df 4f       	sbci	r29, 0xFF	; 255
    75c4:	28 81       	ld	r18, Y
    75c6:	39 81       	ldd	r19, Y+1	; 0x01
    75c8:	cb 5b       	subi	r28, 0xBB	; 187
    75ca:	d0 40       	sbci	r29, 0x00	; 0
    75cc:	42 17       	cp	r20, r18
    75ce:	53 07       	cpc	r21, r19
    75d0:	dc f4       	brge	.+54     	; 0x7608 <draw_menu(bool)+0xe22>
button_click_touch():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3476


bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
  bool ret = false;
  if (is_pressed(x, y, x + size_x, y + size_y, click_x, click_y) == true)
    75d2:	84 0f       	add	r24, r20
    75d4:	95 1f       	adc	r25, r21
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1274
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
    75d6:	28 17       	cp	r18, r24
    75d8:	39 07       	cpc	r19, r25
    75da:	b4 f4       	brge	.+44     	; 0x7608 <draw_menu(bool)+0xe22>
_Z9draw_menub():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:789

    }
    if (click_x > 0 && click_y > 0)
      if (button_click_touch(pgm_read_word(&switch_1->x), pgm_read_word(&switch_1->y), pgm_read_word(&switch_1->size_x), pgm_read_word(&switch_1->size_y), click_x, click_y) == true)
      {
        fnt =  pgm_read_word(&switch_1->onclick);
    75dc:	f6 01       	movw	r30, r12
    75de:	e5 5c       	subi	r30, 0xC5	; 197
    75e0:	fe 4f       	sbci	r31, 0xFE	; 254
    75e2:	e4 0d       	add	r30, r4
    75e4:	f5 1d       	adc	r31, r5
    75e6:	25 91       	lpm	r18, Z+
    75e8:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:790
        ((fptr)fnt)(pgm_read_byte(&switch_1->args));
    75ea:	cb 54       	subi	r28, 0x4B	; 75
    75ec:	df 4f       	sbci	r29, 0xFF	; 255
    75ee:	e8 81       	ld	r30, Y
    75f0:	f9 81       	ldd	r31, Y+1	; 0x01
    75f2:	c5 5b       	subi	r28, 0xB5	; 181
    75f4:	d0 40       	sbci	r29, 0x00	; 0
    75f6:	84 91       	lpm	r24, Z
    75f8:	f9 01       	movw	r30, r18
    75fa:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:791
        ret = true;
    75fc:	f1 e0       	ldi	r31, 0x01	; 1
    75fe:	cf 53       	subi	r28, 0x3F	; 63
    7600:	df 4f       	sbci	r29, 0xFF	; 255
    7602:	f8 83       	st	Y, r31
    7604:	c1 5c       	subi	r28, 0xC1	; 193
    7606:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:766
    }
  }

  if (ret == true)  goto draw_menu_end;
  /// menu switch_1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_switch_1); idx++)
    7608:	cd 54       	subi	r28, 0x4D	; 77
    760a:	df 4f       	sbci	r29, 0xFF	; 255
    760c:	28 81       	ld	r18, Y
    760e:	c3 5b       	subi	r28, 0xB3	; 179
    7610:	d0 40       	sbci	r29, 0x00	; 0
    7612:	2f 5f       	subi	r18, 0xFF	; 255
    7614:	cd 54       	subi	r28, 0x4D	; 77
    7616:	df 4f       	sbci	r29, 0xFF	; 255
    7618:	28 83       	st	Y, r18
    761a:	c3 5b       	subi	r28, 0xB3	; 179
    761c:	d0 40       	sbci	r29, 0x00	; 0
    761e:	3a ce       	rjmp	.-908    	; 0x7294 <draw_menu(bool)+0xaae>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:795
        ((fptr)fnt)(pgm_read_byte(&switch_1->args));
        ret = true;
      }
  }

  if (ret == true)  goto draw_menu_end;
    7620:	cf 53       	subi	r28, 0x3F	; 63
    7622:	df 4f       	sbci	r29, 0xFF	; 255
    7624:	38 81       	ld	r19, Y
    7626:	c1 5c       	subi	r28, 0xC1	; 193
    7628:	d0 40       	sbci	r29, 0x00	; 0
    762a:	31 11       	cpse	r19, r1
    762c:	10 c2       	rjmp	.+1056   	; 0x7a4e <draw_menu(bool)+0x1268>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:796
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_button_1); idx++)
    762e:	10 e0       	ldi	r17, 0x00	; 0
    7630:	a2 01       	movw	r20, r4
    7632:	43 57       	subi	r20, 0x73	; 115
    7634:	5e 4f       	sbci	r21, 0xFE	; 254
    7636:	c5 53       	subi	r28, 0x35	; 53
    7638:	df 4f       	sbci	r29, 0xFF	; 255
    763a:	59 83       	std	Y+1, r21	; 0x01
    763c:	48 83       	st	Y, r20
    763e:	cb 5c       	subi	r28, 0xCB	; 203
    7640:	d0 40       	sbci	r29, 0x00	; 0
    7642:	c5 53       	subi	r28, 0x35	; 53
    7644:	df 4f       	sbci	r29, 0xFF	; 255
    7646:	e8 81       	ld	r30, Y
    7648:	f9 81       	ldd	r31, Y+1	; 0x01
    764a:	cb 5c       	subi	r28, 0xCB	; 203
    764c:	d0 40       	sbci	r29, 0x00	; 0
    764e:	84 91       	lpm	r24, Z
    7650:	18 17       	cp	r17, r24
    7652:	08 f0       	brcs	.+2      	; 0x7656 <draw_menu(bool)+0xe70>
    7654:	02 c2       	rjmp	.+1028   	; 0x7a5a <draw_menu(bool)+0x1274>
    7656:	f6 e1       	ldi	r31, 0x16	; 22
    7658:	1f 9f       	mul	r17, r31
    765a:	40 01       	movw	r8, r0
    765c:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:799
  {
    dyn_button_1 = &current->dyn_button[idx];
    rfnt = pgm_read_word(&dyn_button_1->redraw);
    765e:	f4 01       	movw	r30, r8
    7660:	e9 57       	subi	r30, 0x79	; 121
    7662:	fe 4f       	sbci	r31, 0xFE	; 254
    7664:	e4 0d       	add	r30, r4
    7666:	f5 1d       	adc	r31, r5
    7668:	25 91       	lpm	r18, Z+
    766a:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:800
    rdr = (ret_fptr(rfnt))(pgm_read_word(&dyn_button_1->args));
    766c:	c4 01       	movw	r24, r8
    766e:	80 58       	subi	r24, 0x80	; 128
    7670:	9e 4f       	sbci	r25, 0xFE	; 254
    7672:	a2 01       	movw	r20, r4
    7674:	48 0f       	add	r20, r24
    7676:	59 1f       	adc	r21, r25
    7678:	cb 54       	subi	r28, 0x4B	; 75
    767a:	df 4f       	sbci	r29, 0xFF	; 255
    767c:	59 83       	std	Y+1, r21	; 0x01
    767e:	48 83       	st	Y, r20
    7680:	c5 5b       	subi	r28, 0xB5	; 181
    7682:	d0 40       	sbci	r29, 0x00	; 0
    7684:	fa 01       	movw	r30, r20
    7686:	85 91       	lpm	r24, Z+
    7688:	94 91       	lpm	r25, Z
    768a:	f9 01       	movw	r30, r18
    768c:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:801
    if (rdr == 1 || redraw == true)
    768e:	81 30       	cpi	r24, 0x01	; 1
    7690:	41 f0       	breq	.+16     	; 0x76a2 <draw_menu(bool)+0xebc>
    7692:	cc 53       	subi	r28, 0x3C	; 60
    7694:	df 4f       	sbci	r29, 0xFF	; 255
    7696:	f8 81       	ld	r31, Y
    7698:	c4 5c       	subi	r28, 0xC4	; 196
    769a:	d0 40       	sbci	r29, 0x00	; 0
    769c:	ff 23       	and	r31, r31
    769e:	09 f4       	brne	.+2      	; 0x76a2 <draw_menu(bool)+0xebc>
    76a0:	0d c1       	rjmp	.+538    	; 0x78bc <draw_menu(bool)+0x10d6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:804
    {
      loop_i = 0;
      rfnt =  pgm_read_word(&dyn_button_1->function_for_max_items);
    76a2:	f4 01       	movw	r30, r8
    76a4:	eb 57       	subi	r30, 0x7B	; 123
    76a6:	fe 4f       	sbci	r31, 0xFE	; 254
    76a8:	e4 0d       	add	r30, r4
    76aa:	f5 1d       	adc	r31, r5
    76ac:	25 91       	lpm	r18, Z+
    76ae:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:805
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_button_1->args));
    76b0:	cb 54       	subi	r28, 0x4B	; 75
    76b2:	df 4f       	sbci	r29, 0xFF	; 255
    76b4:	e8 81       	ld	r30, Y
    76b6:	f9 81       	ldd	r31, Y+1	; 0x01
    76b8:	c5 5b       	subi	r28, 0xB5	; 181
    76ba:	d0 40       	sbci	r29, 0x00	; 0
    76bc:	85 91       	lpm	r24, Z+
    76be:	94 91       	lpm	r25, Z
    76c0:	f9 01       	movw	r30, r18
    76c2:	19 95       	eicall
    76c4:	f8 2e       	mov	r15, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:806
      gss = pgm_read_word(&dyn_button_1->get_status_string);
    76c6:	f4 01       	movw	r30, r8
    76c8:	ef 57       	subi	r30, 0x7F	; 127
    76ca:	fe 4f       	sbci	r31, 0xFE	; 254
    76cc:	e4 0d       	add	r30, r4
    76ce:	f5 1d       	adc	r31, r5
    76d0:	25 91       	lpm	r18, Z+
    76d2:	34 91       	lpm	r19, Z
    76d4:	c3 53       	subi	r28, 0x33	; 51
    76d6:	df 4f       	sbci	r29, 0xFF	; 255
    76d8:	39 83       	std	Y+1, r19	; 0x01
    76da:	28 83       	st	Y, r18
    76dc:	cd 5c       	subi	r28, 0xCD	; 205
    76de:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:811

      roller_function(&loop_i, &loop_cnt);
      while (loop_i < loop_cnt)
      {
        new_x = pgm_read_word(&dyn_button_1->first_x);
    76e0:	c4 01       	movw	r24, r8
    76e2:	8d 58       	subi	r24, 0x8D	; 141
    76e4:	9e 4f       	sbci	r25, 0xFE	; 254
    76e6:	a2 01       	movw	r20, r4
    76e8:	48 0f       	add	r20, r24
    76ea:	59 1f       	adc	r21, r25
    76ec:	c9 54       	subi	r28, 0x49	; 73
    76ee:	df 4f       	sbci	r29, 0xFF	; 255
    76f0:	59 83       	std	Y+1, r21	; 0x01
    76f2:	48 83       	st	Y, r20
    76f4:	c7 5b       	subi	r28, 0xB7	; 183
    76f6:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:812
        new_y = pgm_read_word(&dyn_button_1->first_y);
    76f8:	02 96       	adiw	r24, 0x02	; 2
    76fa:	b2 01       	movw	r22, r4
    76fc:	68 0f       	add	r22, r24
    76fe:	79 1f       	adc	r23, r25
    7700:	c3 54       	subi	r28, 0x43	; 67
    7702:	df 4f       	sbci	r29, 0xFF	; 255
    7704:	79 83       	std	Y+1, r23	; 0x01
    7706:	68 83       	st	Y, r22
    7708:	cd 5b       	subi	r28, 0xBD	; 189
    770a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:813
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
    770c:	08 96       	adiw	r24, 0x08	; 8
    770e:	f2 01       	movw	r30, r4
    7710:	e8 0f       	add	r30, r24
    7712:	f9 1f       	adc	r31, r25
    7714:	ce 53       	subi	r28, 0x3E	; 62
    7716:	df 4f       	sbci	r29, 0xFF	; 255
    7718:	f9 83       	std	Y+1, r31	; 0x01
    771a:	e8 83       	st	Y, r30
    771c:	c2 5c       	subi	r28, 0xC2	; 194
    771e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:814
          new_y = pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_xy) * loop_i);
    7720:	01 97       	sbiw	r24, 0x01	; 1
    7722:	92 01       	movw	r18, r4
    7724:	28 0f       	add	r18, r24
    7726:	39 1f       	adc	r19, r25
    7728:	c1 54       	subi	r28, 0x41	; 65
    772a:	df 4f       	sbci	r29, 0xFF	; 255
    772c:	39 83       	std	Y+1, r19	; 0x01
    772e:	28 83       	st	Y, r18
    7730:	cf 5b       	subi	r28, 0xBF	; 191
    7732:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:819
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_xy) * loop_i);

        ((ret_string_fptr)gss)(loop_i, str1, str2);
        button_click_1(new_x, new_y , pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), pgm_read_byte(&dyn_button_1->font_size),pgm_read_byte(&dyn_button_1->font_size), str1, str2);
    7734:	01 97       	sbiw	r24, 0x01	; 1
    7736:	a2 01       	movw	r20, r4
    7738:	48 0f       	add	r20, r24
    773a:	59 1f       	adc	r21, r25
    773c:	cb 53       	subi	r28, 0x3B	; 59
    773e:	df 4f       	sbci	r29, 0xFF	; 255
    7740:	59 83       	std	Y+1, r21	; 0x01
    7742:	48 83       	st	Y, r20
    7744:	c5 5c       	subi	r28, 0xC5	; 197
    7746:	d0 40       	sbci	r29, 0x00	; 0
    7748:	02 97       	sbiw	r24, 0x02	; 2
    774a:	b2 01       	movw	r22, r4
    774c:	68 0f       	add	r22, r24
    774e:	79 1f       	adc	r23, r25
    7750:	c9 53       	subi	r28, 0x39	; 57
    7752:	df 4f       	sbci	r29, 0xFF	; 255
    7754:	79 83       	std	Y+1, r23	; 0x01
    7756:	68 83       	st	Y, r22
    7758:	c7 5c       	subi	r28, 0xC7	; 199
    775a:	d0 40       	sbci	r29, 0x00	; 0
    775c:	02 97       	sbiw	r24, 0x02	; 2
    775e:	f2 01       	movw	r30, r4
    7760:	e8 0f       	add	r30, r24
    7762:	f9 1f       	adc	r31, r25
    7764:	c7 53       	subi	r28, 0x37	; 55
    7766:	df 4f       	sbci	r29, 0xFF	; 255
    7768:	f9 83       	std	Y+1, r31	; 0x01
    776a:	e8 83       	st	Y, r30
    776c:	c9 5c       	subi	r28, 0xC9	; 201
    776e:	d0 40       	sbci	r29, 0x00	; 0
    7770:	cd 54       	subi	r28, 0x4D	; 77
    7772:	df 4f       	sbci	r29, 0xFF	; 255
    7774:	19 82       	std	Y+1, r1	; 0x01
    7776:	18 82       	st	Y, r1
    7778:	c3 5b       	subi	r28, 0xB3	; 179
    777a:	d0 40       	sbci	r29, 0x00	; 0
    777c:	cd 54       	subi	r28, 0x4D	; 77
    777e:	df 4f       	sbci	r29, 0xFF	; 255
    7780:	88 81       	ld	r24, Y
    7782:	c3 5b       	subi	r28, 0xB3	; 179
    7784:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:809
      rfnt =  pgm_read_word(&dyn_button_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_button_1->args));
      gss = pgm_read_word(&dyn_button_1->get_status_string);

      roller_function(&loop_i, &loop_cnt);
      while (loop_i < loop_cnt)
    7786:	8f 15       	cp	r24, r15
    7788:	08 f0       	brcs	.+2      	; 0x778c <draw_menu(bool)+0xfa6>
    778a:	98 c0       	rjmp	.+304    	; 0x78bc <draw_menu(bool)+0x10d6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:811
      {
        new_x = pgm_read_word(&dyn_button_1->first_x);
    778c:	c9 54       	subi	r28, 0x49	; 73
    778e:	df 4f       	sbci	r29, 0xFF	; 255
    7790:	e8 81       	ld	r30, Y
    7792:	f9 81       	ldd	r31, Y+1	; 0x01
    7794:	c7 5b       	subi	r28, 0xB7	; 183
    7796:	d0 40       	sbci	r29, 0x00	; 0
    7798:	25 90       	lpm	r2, Z+
    779a:	34 90       	lpm	r3, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:812
        new_y = pgm_read_word(&dyn_button_1->first_y);
    779c:	c3 54       	subi	r28, 0x43	; 67
    779e:	df 4f       	sbci	r29, 0xFF	; 255
    77a0:	e8 81       	ld	r30, Y
    77a2:	f9 81       	ldd	r31, Y+1	; 0x01
    77a4:	cd 5b       	subi	r28, 0xBD	; 189
    77a6:	d0 40       	sbci	r29, 0x00	; 0
    77a8:	65 90       	lpm	r6, Z+
    77aa:	74 90       	lpm	r7, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:813
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
    77ac:	ce 53       	subi	r28, 0x3E	; 62
    77ae:	df 4f       	sbci	r29, 0xFF	; 255
    77b0:	e8 81       	ld	r30, Y
    77b2:	f9 81       	ldd	r31, Y+1	; 0x01
    77b4:	c2 5c       	subi	r28, 0xC2	; 194
    77b6:	d0 40       	sbci	r29, 0x00	; 0
    77b8:	94 91       	lpm	r25, Z
    77ba:	91 11       	cpse	r25, r1
    77bc:	1c c0       	rjmp	.+56     	; 0x77f6 <draw_menu(bool)+0x1010>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:814
          new_y = pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_xy) * loop_i);
    77be:	c3 54       	subi	r28, 0x43	; 67
    77c0:	df 4f       	sbci	r29, 0xFF	; 255
    77c2:	e8 81       	ld	r30, Y
    77c4:	f9 81       	ldd	r31, Y+1	; 0x01
    77c6:	cd 5b       	subi	r28, 0xBD	; 189
    77c8:	d0 40       	sbci	r29, 0x00	; 0
    77ca:	25 91       	lpm	r18, Z+
    77cc:	34 91       	lpm	r19, Z
    77ce:	c1 54       	subi	r28, 0x41	; 65
    77d0:	df 4f       	sbci	r29, 0xFF	; 255
    77d2:	e8 81       	ld	r30, Y
    77d4:	f9 81       	ldd	r31, Y+1	; 0x01
    77d6:	cf 5b       	subi	r28, 0xBF	; 191
    77d8:	d0 40       	sbci	r29, 0x00	; 0
    77da:	94 91       	lpm	r25, Z
    77dc:	cd 54       	subi	r28, 0x4D	; 77
    77de:	df 4f       	sbci	r29, 0xFF	; 255
    77e0:	48 81       	ld	r20, Y
    77e2:	59 81       	ldd	r21, Y+1	; 0x01
    77e4:	c3 5b       	subi	r28, 0xB3	; 179
    77e6:	d0 40       	sbci	r29, 0x00	; 0
    77e8:	94 9f       	mul	r25, r20
    77ea:	30 01       	movw	r6, r0
    77ec:	95 9f       	mul	r25, r21
    77ee:	70 0c       	add	r7, r0
    77f0:	11 24       	eor	r1, r1
    77f2:	62 0e       	add	r6, r18
    77f4:	73 1e       	adc	r7, r19
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:815
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
    77f6:	ce 53       	subi	r28, 0x3E	; 62
    77f8:	df 4f       	sbci	r29, 0xFF	; 255
    77fa:	e8 81       	ld	r30, Y
    77fc:	f9 81       	ldd	r31, Y+1	; 0x01
    77fe:	c2 5c       	subi	r28, 0xC2	; 194
    7800:	d0 40       	sbci	r29, 0x00	; 0
    7802:	94 91       	lpm	r25, Z
    7804:	91 30       	cpi	r25, 0x01	; 1
    7806:	e1 f4       	brne	.+56     	; 0x7840 <draw_menu(bool)+0x105a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:816
          new_x = pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_xy) * loop_i);
    7808:	c9 54       	subi	r28, 0x49	; 73
    780a:	df 4f       	sbci	r29, 0xFF	; 255
    780c:	e8 81       	ld	r30, Y
    780e:	f9 81       	ldd	r31, Y+1	; 0x01
    7810:	c7 5b       	subi	r28, 0xB7	; 183
    7812:	d0 40       	sbci	r29, 0x00	; 0
    7814:	25 90       	lpm	r2, Z+
    7816:	34 90       	lpm	r3, Z
    7818:	c1 54       	subi	r28, 0x41	; 65
    781a:	df 4f       	sbci	r29, 0xFF	; 255
    781c:	e8 81       	ld	r30, Y
    781e:	f9 81       	ldd	r31, Y+1	; 0x01
    7820:	cf 5b       	subi	r28, 0xBF	; 191
    7822:	d0 40       	sbci	r29, 0x00	; 0
    7824:	94 91       	lpm	r25, Z
    7826:	cd 54       	subi	r28, 0x4D	; 77
    7828:	df 4f       	sbci	r29, 0xFF	; 255
    782a:	48 81       	ld	r20, Y
    782c:	59 81       	ldd	r21, Y+1	; 0x01
    782e:	c3 5b       	subi	r28, 0xB3	; 179
    7830:	d0 40       	sbci	r29, 0x00	; 0
    7832:	94 9f       	mul	r25, r20
    7834:	90 01       	movw	r18, r0
    7836:	95 9f       	mul	r25, r21
    7838:	30 0d       	add	r19, r0
    783a:	11 24       	eor	r1, r1
    783c:	22 0e       	add	r2, r18
    783e:	33 1e       	adc	r3, r19
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:818

        ((ret_string_fptr)gss)(loop_i, str1, str2);
    7840:	ae 01       	movw	r20, r28
    7842:	4f 57       	subi	r20, 0x7F	; 127
    7844:	5f 4f       	sbci	r21, 0xFF	; 255
    7846:	be 01       	movw	r22, r28
    7848:	6f 5f       	subi	r22, 0xFF	; 255
    784a:	7f 4f       	sbci	r23, 0xFF	; 255
    784c:	c3 53       	subi	r28, 0x33	; 51
    784e:	df 4f       	sbci	r29, 0xFF	; 255
    7850:	e8 81       	ld	r30, Y
    7852:	f9 81       	ldd	r31, Y+1	; 0x01
    7854:	cd 5c       	subi	r28, 0xCD	; 205
    7856:	d0 40       	sbci	r29, 0x00	; 0
    7858:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:819
        button_click_1(new_x, new_y , pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), pgm_read_byte(&dyn_button_1->font_size),pgm_read_byte(&dyn_button_1->font_size), str1, str2);
    785a:	cb 53       	subi	r28, 0x3B	; 59
    785c:	df 4f       	sbci	r29, 0xFF	; 255
    785e:	e8 81       	ld	r30, Y
    7860:	f9 81       	ldd	r31, Y+1	; 0x01
    7862:	c5 5c       	subi	r28, 0xC5	; 197
    7864:	d0 40       	sbci	r29, 0x00	; 0
    7866:	e4 90       	lpm	r14, Z
    7868:	04 91       	lpm	r16, Z
    786a:	c9 53       	subi	r28, 0x39	; 57
    786c:	df 4f       	sbci	r29, 0xFF	; 255
    786e:	e8 81       	ld	r30, Y
    7870:	f9 81       	ldd	r31, Y+1	; 0x01
    7872:	c7 5c       	subi	r28, 0xC7	; 199
    7874:	d0 40       	sbci	r29, 0x00	; 0
    7876:	25 91       	lpm	r18, Z+
    7878:	34 91       	lpm	r19, Z
    787a:	c7 53       	subi	r28, 0x37	; 55
    787c:	df 4f       	sbci	r29, 0xFF	; 255
    787e:	e8 81       	ld	r30, Y
    7880:	f9 81       	ldd	r31, Y+1	; 0x01
    7882:	c9 5c       	subi	r28, 0xC9	; 201
    7884:	d0 40       	sbci	r29, 0x00	; 0
    7886:	45 91       	lpm	r20, Z+
    7888:	54 91       	lpm	r21, Z
    788a:	be 01       	movw	r22, r28
    788c:	6f 57       	subi	r22, 0x7F	; 127
    788e:	7f 4f       	sbci	r23, 0xFF	; 255
    7890:	5b 01       	movw	r10, r22
    7892:	ce 01       	movw	r24, r28
    7894:	01 96       	adiw	r24, 0x01	; 1
    7896:	6c 01       	movw	r12, r24
    7898:	b3 01       	movw	r22, r6
    789a:	c1 01       	movw	r24, r2
    789c:	0e 94 2f 31 	call	0x625e	; 0x625e <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*)>
    78a0:	cd 54       	subi	r28, 0x4D	; 77
    78a2:	df 4f       	sbci	r29, 0xFF	; 255
    78a4:	e8 81       	ld	r30, Y
    78a6:	f9 81       	ldd	r31, Y+1	; 0x01
    78a8:	c3 5b       	subi	r28, 0xB3	; 179
    78aa:	d0 40       	sbci	r29, 0x00	; 0
    78ac:	31 96       	adiw	r30, 0x01	; 1
    78ae:	cd 54       	subi	r28, 0x4D	; 77
    78b0:	df 4f       	sbci	r29, 0xFF	; 255
    78b2:	f9 83       	std	Y+1, r31	; 0x01
    78b4:	e8 83       	st	Y, r30
    78b6:	c3 5b       	subi	r28, 0xB3	; 179
    78b8:	d0 40       	sbci	r29, 0x00	; 0
    78ba:	60 cf       	rjmp	.-320    	; 0x777c <draw_menu(bool)+0xf96>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:824
        loop_i++;
      }
    }

    if (click_x > 0 && click_y > 0)
    78bc:	c7 54       	subi	r28, 0x47	; 71
    78be:	df 4f       	sbci	r29, 0xFF	; 255
    78c0:	28 81       	ld	r18, Y
    78c2:	39 81       	ldd	r19, Y+1	; 0x01
    78c4:	c9 5b       	subi	r28, 0xB9	; 185
    78c6:	d0 40       	sbci	r29, 0x00	; 0
    78c8:	23 2b       	or	r18, r19
    78ca:	09 f4       	brne	.+2      	; 0x78ce <draw_menu(bool)+0x10e8>
    78cc:	be c0       	rjmp	.+380    	; 0x7a4a <draw_menu(bool)+0x1264>
    78ce:	c5 54       	subi	r28, 0x45	; 69
    78d0:	df 4f       	sbci	r29, 0xFF	; 255
    78d2:	48 81       	ld	r20, Y
    78d4:	59 81       	ldd	r21, Y+1	; 0x01
    78d6:	cb 5b       	subi	r28, 0xBB	; 187
    78d8:	d0 40       	sbci	r29, 0x00	; 0
    78da:	45 2b       	or	r20, r21
    78dc:	09 f4       	brne	.+2      	; 0x78e0 <draw_menu(bool)+0x10fa>
    78de:	b5 c0       	rjmp	.+362    	; 0x7a4a <draw_menu(bool)+0x1264>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:827
    {
      loop_i = 0;
      rfnt =  pgm_read_word(&dyn_button_1->function_for_max_items);
    78e0:	f4 01       	movw	r30, r8
    78e2:	eb 57       	subi	r30, 0x7B	; 123
    78e4:	fe 4f       	sbci	r31, 0xFE	; 254
    78e6:	e4 0d       	add	r30, r4
    78e8:	f5 1d       	adc	r31, r5
    78ea:	25 91       	lpm	r18, Z+
    78ec:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:828
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_button_1->args));
    78ee:	cb 54       	subi	r28, 0x4B	; 75
    78f0:	df 4f       	sbci	r29, 0xFF	; 255
    78f2:	e8 81       	ld	r30, Y
    78f4:	f9 81       	ldd	r31, Y+1	; 0x01
    78f6:	c5 5b       	subi	r28, 0xB5	; 181
    78f8:	d0 40       	sbci	r29, 0x00	; 0
    78fa:	85 91       	lpm	r24, Z+
    78fc:	94 91       	lpm	r25, Z
    78fe:	f9 01       	movw	r30, r18
    7900:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:833

      roller_function(&loop_i, &loop_cnt);
      while (loop_i < loop_cnt)
      {
        new_x = pgm_read_word(&dyn_button_1->first_x);
    7902:	74 01       	movw	r14, r8
    7904:	fd e8       	ldi	r31, 0x8D	; 141
    7906:	ef 1a       	sub	r14, r31
    7908:	fe ef       	ldi	r31, 0xFE	; 254
    790a:	ff 0a       	sbc	r15, r31
    790c:	e4 0c       	add	r14, r4
    790e:	f5 1c       	adc	r15, r5
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:834
        new_y = pgm_read_word(&dyn_button_1->first_y);
    7910:	14 01       	movw	r2, r8
    7912:	2b e8       	ldi	r18, 0x8B	; 139
    7914:	22 1a       	sub	r2, r18
    7916:	2e ef       	ldi	r18, 0xFE	; 254
    7918:	32 0a       	sbc	r3, r18
    791a:	24 0c       	add	r2, r4
    791c:	35 1c       	adc	r3, r5
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:835
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
    791e:	34 01       	movw	r6, r8
    7920:	33 e8       	ldi	r19, 0x83	; 131
    7922:	63 1a       	sub	r6, r19
    7924:	3e ef       	ldi	r19, 0xFE	; 254
    7926:	73 0a       	sbc	r7, r19
    7928:	64 0c       	add	r6, r4
    792a:	75 1c       	adc	r7, r5
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:836
          new_y = pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_xy) * loop_i);
    792c:	54 01       	movw	r10, r8
    792e:	44 e8       	ldi	r20, 0x84	; 132
    7930:	a4 1a       	sub	r10, r20
    7932:	4e ef       	ldi	r20, 0xFE	; 254
    7934:	b4 0a       	sbc	r11, r20
    7936:	a4 0c       	add	r10, r4
    7938:	b5 1c       	adc	r11, r5
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:839
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_xy) * loop_i);
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), click_x, click_y) == true)
    793a:	94 01       	movw	r18, r8
    793c:	27 58       	subi	r18, 0x87	; 135
    793e:	3e 4f       	sbci	r19, 0xFE	; 254
    7940:	b2 01       	movw	r22, r4
    7942:	62 0f       	add	r22, r18
    7944:	73 1f       	adc	r23, r19
    7946:	cd 54       	subi	r28, 0x4D	; 77
    7948:	df 4f       	sbci	r29, 0xFF	; 255
    794a:	79 83       	std	Y+1, r23	; 0x01
    794c:	68 83       	st	Y, r22
    794e:	c3 5b       	subi	r28, 0xB3	; 179
    7950:	d0 40       	sbci	r29, 0x00	; 0
    7952:	22 50       	subi	r18, 0x02	; 2
    7954:	31 09       	sbc	r19, r1
    7956:	a2 01       	movw	r20, r4
    7958:	42 0f       	add	r20, r18
    795a:	53 1f       	adc	r21, r19
    795c:	c9 54       	subi	r28, 0x49	; 73
    795e:	df 4f       	sbci	r29, 0xFF	; 255
    7960:	59 83       	std	Y+1, r21	; 0x01
    7962:	48 83       	st	Y, r20
    7964:	c7 5b       	subi	r28, 0xB7	; 183
    7966:	d0 40       	sbci	r29, 0x00	; 0
    7968:	70 e0       	ldi	r23, 0x00	; 0
    796a:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:831
      loop_i = 0;
      rfnt =  pgm_read_word(&dyn_button_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_button_1->args));

      roller_function(&loop_i, &loop_cnt);
      while (loop_i < loop_cnt)
    796c:	68 17       	cp	r22, r24
    796e:	08 f0       	brcs	.+2      	; 0x7972 <draw_menu(bool)+0x118c>
    7970:	6c c0       	rjmp	.+216    	; 0x7a4a <draw_menu(bool)+0x1264>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:833
      {
        new_x = pgm_read_word(&dyn_button_1->first_x);
    7972:	f7 01       	movw	r30, r14
    7974:	45 91       	lpm	r20, Z+
    7976:	54 91       	lpm	r21, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:834
        new_y = pgm_read_word(&dyn_button_1->first_y);
    7978:	f1 01       	movw	r30, r2
    797a:	25 91       	lpm	r18, Z+
    797c:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:835
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
    797e:	f3 01       	movw	r30, r6
    7980:	94 91       	lpm	r25, Z
    7982:	91 11       	cpse	r25, r1
    7984:	0c c0       	rjmp	.+24     	; 0x799e <draw_menu(bool)+0x11b8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:836
          new_y = pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_xy) * loop_i);
    7986:	f1 01       	movw	r30, r2
    7988:	25 91       	lpm	r18, Z+
    798a:	34 91       	lpm	r19, Z
    798c:	f5 01       	movw	r30, r10
    798e:	94 91       	lpm	r25, Z
    7990:	96 9f       	mul	r25, r22
    7992:	f0 01       	movw	r30, r0
    7994:	97 9f       	mul	r25, r23
    7996:	f0 0d       	add	r31, r0
    7998:	11 24       	eor	r1, r1
    799a:	2e 0f       	add	r18, r30
    799c:	3f 1f       	adc	r19, r31
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:837
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
    799e:	f3 01       	movw	r30, r6
    79a0:	94 91       	lpm	r25, Z
    79a2:	91 30       	cpi	r25, 0x01	; 1
    79a4:	61 f4       	brne	.+24     	; 0x79be <draw_menu(bool)+0x11d8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:838
          new_x = pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_xy) * loop_i);
    79a6:	f7 01       	movw	r30, r14
    79a8:	45 91       	lpm	r20, Z+
    79aa:	54 91       	lpm	r21, Z
    79ac:	f5 01       	movw	r30, r10
    79ae:	94 91       	lpm	r25, Z
    79b0:	96 9f       	mul	r25, r22
    79b2:	f0 01       	movw	r30, r0
    79b4:	97 9f       	mul	r25, r23
    79b6:	f0 0d       	add	r31, r0
    79b8:	11 24       	eor	r1, r1
    79ba:	4e 0f       	add	r20, r30
    79bc:	5f 1f       	adc	r21, r31
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:839
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), click_x, click_y) == true)
    79be:	cd 54       	subi	r28, 0x4D	; 77
    79c0:	df 4f       	sbci	r29, 0xFF	; 255
    79c2:	e8 81       	ld	r30, Y
    79c4:	f9 81       	ldd	r31, Y+1	; 0x01
    79c6:	c3 5b       	subi	r28, 0xB3	; 179
    79c8:	d0 40       	sbci	r29, 0x00	; 0
    79ca:	a5 91       	lpm	r26, Z+
    79cc:	b4 91       	lpm	r27, Z
    79ce:	c9 54       	subi	r28, 0x49	; 73
    79d0:	df 4f       	sbci	r29, 0xFF	; 255
    79d2:	e8 81       	ld	r30, Y
    79d4:	f9 81       	ldd	r31, Y+1	; 0x01
    79d6:	c7 5b       	subi	r28, 0xB7	; 183
    79d8:	d0 40       	sbci	r29, 0x00	; 0
    79da:	c5 90       	lpm	r12, Z+
    79dc:	d4 90       	lpm	r13, Z
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1274
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
    79de:	c7 54       	subi	r28, 0x47	; 71
    79e0:	df 4f       	sbci	r29, 0xFF	; 255
    79e2:	e8 81       	ld	r30, Y
    79e4:	f9 81       	ldd	r31, Y+1	; 0x01
    79e6:	c9 5b       	subi	r28, 0xB9	; 185
    79e8:	d0 40       	sbci	r29, 0x00	; 0
    79ea:	4e 17       	cp	r20, r30
    79ec:	5f 07       	cpc	r21, r31
    79ee:	9c f4       	brge	.+38     	; 0x7a16 <draw_menu(bool)+0x1230>
button_click_touch():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3476


bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
  bool ret = false;
  if (is_pressed(x, y, x + size_x, y + size_y, click_x, click_y) == true)
    79f0:	4c 0d       	add	r20, r12
    79f2:	5d 1d       	adc	r21, r13
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1274
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
    79f4:	e4 17       	cp	r30, r20
    79f6:	f5 07       	cpc	r31, r21
    79f8:	74 f4       	brge	.+28     	; 0x7a16 <draw_menu(bool)+0x1230>
    79fa:	c5 54       	subi	r28, 0x45	; 69
    79fc:	df 4f       	sbci	r29, 0xFF	; 255
    79fe:	48 81       	ld	r20, Y
    7a00:	59 81       	ldd	r21, Y+1	; 0x01
    7a02:	cb 5b       	subi	r28, 0xBB	; 187
    7a04:	d0 40       	sbci	r29, 0x00	; 0
    7a06:	24 17       	cp	r18, r20
    7a08:	35 07       	cpc	r19, r21
    7a0a:	2c f4       	brge	.+10     	; 0x7a16 <draw_menu(bool)+0x1230>
button_click_touch():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3476


bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
  bool ret = false;
  if (is_pressed(x, y, x + size_x, y + size_y, click_x, click_y) == true)
    7a0c:	2a 0f       	add	r18, r26
    7a0e:	3b 1f       	adc	r19, r27
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1274
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
    7a10:	42 17       	cp	r20, r18
    7a12:	53 07       	cpc	r21, r19
    7a14:	1c f0       	brlt	.+6      	; 0x7a1c <draw_menu(bool)+0x1236>
    7a16:	6f 5f       	subi	r22, 0xFF	; 255
    7a18:	7f 4f       	sbci	r23, 0xFF	; 255
    7a1a:	a8 cf       	rjmp	.-176    	; 0x796c <draw_menu(bool)+0x1186>
_Z9draw_menub():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:841
          new_y = pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_xy) * loop_i);
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_xy) * loop_i);
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), click_x, click_y) == true)
        {
          fntargs =  pgm_read_word(&dyn_button_1->dyn_button_onclick);
    7a1c:	f4 01       	movw	r30, r8
    7a1e:	ed 57       	subi	r30, 0x7D	; 125
    7a20:	fe 4f       	sbci	r31, 0xFE	; 254
    7a22:	e4 0d       	add	r30, r4
    7a24:	f5 1d       	adc	r31, r5
    7a26:	25 91       	lpm	r18, Z+
    7a28:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:842
          ((fptr_args)fntargs)(pgm_read_byte(&dyn_button_1->args), loop_i);
    7a2a:	cb 54       	subi	r28, 0x4B	; 75
    7a2c:	df 4f       	sbci	r29, 0xFF	; 255
    7a2e:	e8 81       	ld	r30, Y
    7a30:	f9 81       	ldd	r31, Y+1	; 0x01
    7a32:	c5 5b       	subi	r28, 0xB5	; 181
    7a34:	d0 40       	sbci	r29, 0x00	; 0
    7a36:	84 91       	lpm	r24, Z
    7a38:	90 e0       	ldi	r25, 0x00	; 0
    7a3a:	f9 01       	movw	r30, r18
    7a3c:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:843
          ret = true;
    7a3e:	f1 e0       	ldi	r31, 0x01	; 1
    7a40:	cf 53       	subi	r28, 0x3F	; 63
    7a42:	df 4f       	sbci	r29, 0xFF	; 255
    7a44:	f8 83       	st	Y, r31
    7a46:	c1 5c       	subi	r28, 0xC1	; 193
    7a48:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:796
        ret = true;
      }
  }

  if (ret == true)  goto draw_menu_end;
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_button_1); idx++)
    7a4a:	1f 5f       	subi	r17, 0xFF	; 255
    7a4c:	fa cd       	rjmp	.-1036   	; 0x7642 <draw_menu(bool)+0xe5c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:843
          new_x = pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_xy) * loop_i);
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), click_x, click_y) == true)
        {
          fntargs =  pgm_read_word(&dyn_button_1->dyn_button_onclick);
          ((fptr_args)fntargs)(pgm_read_byte(&dyn_button_1->args), loop_i);
          ret = true;
    7a4e:	21 e0       	ldi	r18, 0x01	; 1
    7a50:	cf 53       	subi	r28, 0x3F	; 63
    7a52:	df 4f       	sbci	r29, 0xFF	; 255
    7a54:	28 83       	st	Y, r18
    7a56:	c1 5c       	subi	r28, 0xC1	; 193
    7a58:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:853
    }
  }

draw_menu_end:
  return ret;
}
    7a5a:	cf 53       	subi	r28, 0x3F	; 63
    7a5c:	df 4f       	sbci	r29, 0xFF	; 255
    7a5e:	88 81       	ld	r24, Y
    7a60:	c1 5c       	subi	r28, 0xC1	; 193
    7a62:	d0 40       	sbci	r29, 0x00	; 0
    7a64:	c0 53       	subi	r28, 0x30	; 48
    7a66:	df 4f       	sbci	r29, 0xFF	; 255
    7a68:	0f b6       	in	r0, 0x3f	; 63
    7a6a:	f8 94       	cli
    7a6c:	de bf       	out	0x3e, r29	; 62
    7a6e:	0f be       	out	0x3f, r0	; 63
    7a70:	cd bf       	out	0x3d, r28	; 61
    7a72:	df 91       	pop	r29
    7a74:	cf 91       	pop	r28
    7a76:	1f 91       	pop	r17
    7a78:	0f 91       	pop	r16
    7a7a:	ff 90       	pop	r15
    7a7c:	ef 90       	pop	r14
    7a7e:	df 90       	pop	r13
    7a80:	cf 90       	pop	r12
    7a82:	bf 90       	pop	r11
    7a84:	af 90       	pop	r10
    7a86:	9f 90       	pop	r9
    7a88:	8f 90       	pop	r8
    7a8a:	7f 90       	pop	r7
    7a8c:	6f 90       	pop	r6
    7a8e:	5f 90       	pop	r5
    7a90:	4f 90       	pop	r4
    7a92:	3f 90       	pop	r3
    7a94:	2f 90       	pop	r2
    7a96:	08 95       	ret

00007a98 <PubSubClient::loop() [clone .constprop.123]>:
_ZN12PubSubClient4loopEv.constprop.123():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:282
    }

    return len;
}

boolean PubSubClient::loop() {
    7a98:	3f 92       	push	r3
    7a9a:	4f 92       	push	r4
    7a9c:	5f 92       	push	r5
    7a9e:	6f 92       	push	r6
    7aa0:	7f 92       	push	r7
    7aa2:	8f 92       	push	r8
    7aa4:	9f 92       	push	r9
    7aa6:	af 92       	push	r10
    7aa8:	bf 92       	push	r11
    7aaa:	cf 92       	push	r12
    7aac:	df 92       	push	r13
    7aae:	ef 92       	push	r14
    7ab0:	ff 92       	push	r15
    7ab2:	0f 93       	push	r16
    7ab4:	1f 93       	push	r17
    7ab6:	cf 93       	push	r28
    7ab8:	df 93       	push	r29
    7aba:	1f 92       	push	r1
    7abc:	cd b7       	in	r28, 0x3d	; 61
    7abe:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:345
            }
        }
        return true;
    }
    return false;
}
    7ac0:	4d b6       	in	r4, 0x3d	; 61
    7ac2:	5e b6       	in	r5, 0x3e	; 62
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:283

    return len;
}

boolean PubSubClient::loop() {
    if (connected()) {
    7ac4:	81 eb       	ldi	r24, 0xB1	; 177
    7ac6:	93 e1       	ldi	r25, 0x13	; 19
    7ac8:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <PubSubClient::connected()>
    7acc:	98 2e       	mov	r9, r24
    7ace:	88 23       	and	r24, r24
    7ad0:	09 f4       	brne	.+2      	; 0x7ad4 <PubSubClient::loop() [clone .constprop.123]+0x3c>
    7ad2:	45 c0       	rjmp	.+138    	; 0x7b5e <PubSubClient::loop() [clone .constprop.123]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:284
        unsigned long t = millis();
    7ad4:	0e 94 28 13 	call	0x2650	; 0x2650 <millis>
    7ad8:	6b 01       	movw	r12, r22
    7ada:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:285
        if ((t - lastInActivity > MQTT_KEEPALIVE*1000UL) || (t - lastOutActivity > MQTT_KEEPALIVE*1000UL)) {
    7adc:	80 91 b9 15 	lds	r24, 0x15B9	; 0x8015b9 <mqtt_client+0x208>
    7ae0:	90 91 ba 15 	lds	r25, 0x15BA	; 0x8015ba <mqtt_client+0x209>
    7ae4:	a0 91 bb 15 	lds	r26, 0x15BB	; 0x8015bb <mqtt_client+0x20a>
    7ae8:	b0 91 bc 15 	lds	r27, 0x15BC	; 0x8015bc <mqtt_client+0x20b>
    7aec:	a7 01       	movw	r20, r14
    7aee:	96 01       	movw	r18, r12
    7af0:	28 1b       	sub	r18, r24
    7af2:	39 0b       	sbc	r19, r25
    7af4:	4a 0b       	sbc	r20, r26
    7af6:	5b 0b       	sbc	r21, r27
    7af8:	da 01       	movw	r26, r20
    7afa:	c9 01       	movw	r24, r18
    7afc:	89 39       	cpi	r24, 0x99	; 153
    7afe:	9a 43       	sbci	r25, 0x3A	; 58
    7b00:	a1 05       	cpc	r26, r1
    7b02:	b1 05       	cpc	r27, r1
    7b04:	b0 f4       	brcc	.+44     	; 0x7b32 <PubSubClient::loop() [clone .constprop.123]+0x9a>
    7b06:	80 91 b5 15 	lds	r24, 0x15B5	; 0x8015b5 <mqtt_client+0x204>
    7b0a:	90 91 b6 15 	lds	r25, 0x15B6	; 0x8015b6 <mqtt_client+0x205>
    7b0e:	a0 91 b7 15 	lds	r26, 0x15B7	; 0x8015b7 <mqtt_client+0x206>
    7b12:	b0 91 b8 15 	lds	r27, 0x15B8	; 0x8015b8 <mqtt_client+0x207>
    7b16:	a7 01       	movw	r20, r14
    7b18:	96 01       	movw	r18, r12
    7b1a:	28 1b       	sub	r18, r24
    7b1c:	39 0b       	sbc	r19, r25
    7b1e:	4a 0b       	sbc	r20, r26
    7b20:	5b 0b       	sbc	r21, r27
    7b22:	da 01       	movw	r26, r20
    7b24:	c9 01       	movw	r24, r18
    7b26:	89 39       	cpi	r24, 0x99	; 153
    7b28:	9a 43       	sbci	r25, 0x3A	; 58
    7b2a:	a1 05       	cpc	r26, r1
    7b2c:	b1 05       	cpc	r27, r1
    7b2e:	08 f4       	brcc	.+2      	; 0x7b32 <PubSubClient::loop() [clone .constprop.123]+0x9a>
    7b30:	52 c0       	rjmp	.+164    	; 0x7bd6 <PubSubClient::loop() [clone .constprop.123]+0x13e>
    7b32:	80 91 b1 13 	lds	r24, 0x13B1	; 0x8013b1 <mqtt_client>
    7b36:	90 91 b2 13 	lds	r25, 0x13B2	; 0x8013b2 <mqtt_client+0x1>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:286
            if (pingOutstanding) {
    7b3a:	20 91 bd 15 	lds	r18, 0x15BD	; 0x8015bd <mqtt_client+0x20c>
    7b3e:	22 23       	and	r18, r18
    7b40:	39 f1       	breq	.+78     	; 0x7b90 <PubSubClient::loop() [clone .constprop.123]+0xf8>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:287
                this->_state = MQTT_CONNECTION_TIMEOUT;
    7b42:	2c ef       	ldi	r18, 0xFC	; 252
    7b44:	3f ef       	ldi	r19, 0xFF	; 255
    7b46:	30 93 cd 15 	sts	0x15CD, r19	; 0x8015cd <mqtt_client+0x21c>
    7b4a:	20 93 cc 15 	sts	0x15CC, r18	; 0x8015cc <mqtt_client+0x21b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:288
                _client->stop();
    7b4e:	dc 01       	movw	r26, r24
    7b50:	ed 91       	ld	r30, X+
    7b52:	fc 91       	ld	r31, X
    7b54:	04 88       	ldd	r0, Z+20	; 0x14
    7b56:	f5 89       	ldd	r31, Z+21	; 0x15
    7b58:	e0 2d       	mov	r30, r0
    7b5a:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:289
                return false;
    7b5c:	91 2c       	mov	r9, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:345
            }
        }
        return true;
    }
    return false;
}
    7b5e:	89 2d       	mov	r24, r9
    7b60:	0f b6       	in	r0, 0x3f	; 63
    7b62:	f8 94       	cli
    7b64:	5e be       	out	0x3e, r5	; 62
    7b66:	0f be       	out	0x3f, r0	; 63
    7b68:	4d be       	out	0x3d, r4	; 61
    7b6a:	0f 90       	pop	r0
    7b6c:	df 91       	pop	r29
    7b6e:	cf 91       	pop	r28
    7b70:	1f 91       	pop	r17
    7b72:	0f 91       	pop	r16
    7b74:	ff 90       	pop	r15
    7b76:	ef 90       	pop	r14
    7b78:	df 90       	pop	r13
    7b7a:	cf 90       	pop	r12
    7b7c:	bf 90       	pop	r11
    7b7e:	af 90       	pop	r10
    7b80:	9f 90       	pop	r9
    7b82:	8f 90       	pop	r8
    7b84:	7f 90       	pop	r7
    7b86:	6f 90       	pop	r6
    7b88:	5f 90       	pop	r5
    7b8a:	4f 90       	pop	r4
    7b8c:	3f 90       	pop	r3
    7b8e:	08 95       	ret
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:291
            if (pingOutstanding) {
                this->_state = MQTT_CONNECTION_TIMEOUT;
                _client->stop();
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
    7b90:	20 ec       	ldi	r18, 0xC0	; 192
    7b92:	20 93 b3 13 	sts	0x13B3, r18	; 0x8013b3 <mqtt_client+0x2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:292
                buffer[1] = 0;
    7b96:	10 92 b4 13 	sts	0x13B4, r1	; 0x8013b4 <mqtt_client+0x3>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:293
                _client->write(buffer,2);
    7b9a:	dc 01       	movw	r26, r24
    7b9c:	ed 91       	ld	r30, X+
    7b9e:	fc 91       	ld	r31, X
    7ba0:	02 80       	ldd	r0, Z+2	; 0x02
    7ba2:	f3 81       	ldd	r31, Z+3	; 0x03
    7ba4:	e0 2d       	mov	r30, r0
    7ba6:	42 e0       	ldi	r20, 0x02	; 2
    7ba8:	50 e0       	ldi	r21, 0x00	; 0
    7baa:	63 eb       	ldi	r22, 0xB3	; 179
    7bac:	73 e1       	ldi	r23, 0x13	; 19
    7bae:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:294
                lastOutActivity = t;
    7bb0:	c0 92 b5 15 	sts	0x15B5, r12	; 0x8015b5 <mqtt_client+0x204>
    7bb4:	d0 92 b6 15 	sts	0x15B6, r13	; 0x8015b6 <mqtt_client+0x205>
    7bb8:	e0 92 b7 15 	sts	0x15B7, r14	; 0x8015b7 <mqtt_client+0x206>
    7bbc:	f0 92 b8 15 	sts	0x15B8, r15	; 0x8015b8 <mqtt_client+0x207>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:295
                lastInActivity = t;
    7bc0:	c0 92 b9 15 	sts	0x15B9, r12	; 0x8015b9 <mqtt_client+0x208>
    7bc4:	d0 92 ba 15 	sts	0x15BA, r13	; 0x8015ba <mqtt_client+0x209>
    7bc8:	e0 92 bb 15 	sts	0x15BB, r14	; 0x8015bb <mqtt_client+0x20a>
    7bcc:	f0 92 bc 15 	sts	0x15BC, r15	; 0x8015bc <mqtt_client+0x20b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:296
                pingOutstanding = true;
    7bd0:	81 e0       	ldi	r24, 0x01	; 1
    7bd2:	80 93 bd 15 	sts	0x15BD, r24	; 0x8015bd <mqtt_client+0x20c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:299
            }
        }
        if (_client->available()) {
    7bd6:	80 91 b1 13 	lds	r24, 0x13B1	; 0x8013b1 <mqtt_client>
    7bda:	90 91 b2 13 	lds	r25, 0x13B2	; 0x8013b2 <mqtt_client+0x1>
    7bde:	dc 01       	movw	r26, r24
    7be0:	ed 91       	ld	r30, X+
    7be2:	fc 91       	ld	r31, X
    7be4:	00 84       	ldd	r0, Z+8	; 0x08
    7be6:	f1 85       	ldd	r31, Z+9	; 0x09
    7be8:	e0 2d       	mov	r30, r0
    7bea:	19 95       	eicall
    7bec:	89 2b       	or	r24, r25
    7bee:	09 f4       	brne	.+2      	; 0x7bf2 <PubSubClient::loop() [clone .constprop.123]+0x15a>
    7bf0:	b6 cf       	rjmp	.-148    	; 0x7b5e <PubSubClient::loop() [clone .constprop.123]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:301
            uint8_t llen;
            uint16_t len = readPacket(&llen);
    7bf2:	ce 01       	movw	r24, r28
    7bf4:	01 96       	adiw	r24, 0x01	; 1
    7bf6:	0e 94 6d 13 	call	0x26da	; 0x26da <PubSubClient::readPacket(unsigned char*) [clone .constprop.147]>
    7bfa:	ac 01       	movw	r20, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:304
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
    7bfc:	89 2b       	or	r24, r25
    7bfe:	09 f4       	brne	.+2      	; 0x7c02 <PubSubClient::loop() [clone .constprop.123]+0x16a>
    7c00:	ae cf       	rjmp	.-164    	; 0x7b5e <PubSubClient::loop() [clone .constprop.123]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:305
                lastInActivity = t;
    7c02:	c0 92 b9 15 	sts	0x15B9, r12	; 0x8015b9 <mqtt_client+0x208>
    7c06:	d0 92 ba 15 	sts	0x15BA, r13	; 0x8015ba <mqtt_client+0x209>
    7c0a:	e0 92 bb 15 	sts	0x15BB, r14	; 0x8015bb <mqtt_client+0x20a>
    7c0e:	f0 92 bc 15 	sts	0x15BC, r15	; 0x8015bc <mqtt_client+0x20b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:306
                uint8_t type = buffer[0]&0xF0;
    7c12:	80 90 b3 13 	lds	r8, 0x13B3	; 0x8013b3 <mqtt_client+0x2>
    7c16:	88 2d       	mov	r24, r8
    7c18:	80 7f       	andi	r24, 0xF0	; 240
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:307
                if (type == MQTTPUBLISH) {
    7c1a:	80 33       	cpi	r24, 0x30	; 48
    7c1c:	09 f0       	breq	.+2      	; 0x7c20 <PubSubClient::loop() [clone .constprop.123]+0x188>
    7c1e:	83 c0       	rjmp	.+262    	; 0x7d26 <PubSubClient::loop() [clone .constprop.123]+0x28e>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:308
                    if (callback) {
    7c20:	a0 90 be 15 	lds	r10, 0x15BE	; 0x8015be <mqtt_client+0x20d>
    7c24:	b0 90 bf 15 	lds	r11, 0x15BF	; 0x8015bf <mqtt_client+0x20e>
    7c28:	a1 14       	cp	r10, r1
    7c2a:	b1 04       	cpc	r11, r1
    7c2c:	09 f4       	brne	.+2      	; 0x7c30 <PubSubClient::loop() [clone .constprop.123]+0x198>
    7c2e:	97 cf       	rjmp	.-210    	; 0x7b5e <PubSubClient::loop() [clone .constprop.123]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:331
                            lastOutActivity = t;

                        } else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
                        }
    7c30:	6d b6       	in	r6, 0x3d	; 61
    7c32:	7e b6       	in	r7, 0x3e	; 62
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:309
            if (len > 0) {
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2];
    7c34:	69 81       	ldd	r22, Y+1	; 0x01
    7c36:	70 e0       	ldi	r23, 0x00	; 0
    7c38:	fb 01       	movw	r30, r22
    7c3a:	ef 54       	subi	r30, 0x4F	; 79
    7c3c:	fc 4e       	sbci	r31, 0xEC	; 236
    7c3e:	23 81       	ldd	r18, Z+3	; 0x03
    7c40:	30 e0       	ldi	r19, 0x00	; 0
    7c42:	32 2f       	mov	r19, r18
    7c44:	22 27       	eor	r18, r18
    7c46:	84 81       	ldd	r24, Z+4	; 0x04
    7c48:	28 0f       	add	r18, r24
    7c4a:	31 1d       	adc	r19, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:310
                        char topic[tl+1];
    7c4c:	c9 01       	movw	r24, r18
    7c4e:	01 96       	adiw	r24, 0x01	; 1
    7c50:	ed b7       	in	r30, 0x3d	; 61
    7c52:	fe b7       	in	r31, 0x3e	; 62
    7c54:	e8 1b       	sub	r30, r24
    7c56:	f9 0b       	sbc	r31, r25
    7c58:	0f b6       	in	r0, 0x3f	; 63
    7c5a:	f8 94       	cli
    7c5c:	fe bf       	out	0x3e, r31	; 62
    7c5e:	0f be       	out	0x3f, r0	; 63
    7c60:	ed bf       	out	0x3d, r30	; 61
    7c62:	8d b7       	in	r24, 0x3d	; 61
    7c64:	9e b7       	in	r25, 0x3e	; 62
    7c66:	01 96       	adiw	r24, 0x01	; 1
    7c68:	db 01       	movw	r26, r22
    7c6a:	aa 54       	subi	r26, 0x4A	; 74
    7c6c:	bc 4e       	sbci	r27, 0xEC	; 236
    7c6e:	fc 01       	movw	r30, r24
    7c70:	8c 01       	movw	r16, r24
    7c72:	02 0f       	add	r16, r18
    7c74:	13 1f       	adc	r17, r19
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:311
                        for (uint16_t i=0;i<tl;i++) {
    7c76:	e0 17       	cp	r30, r16
    7c78:	f1 07       	cpc	r31, r17
    7c7a:	19 f0       	breq	.+6      	; 0x7c82 <PubSubClient::loop() [clone .constprop.123]+0x1ea>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:312
                            topic[i] = buffer[llen+3+i];
    7c7c:	3d 90       	ld	r3, X+
    7c7e:	31 92       	st	Z+, r3
    7c80:	fa cf       	rjmp	.-12     	; 0x7c76 <PubSubClient::loop() [clone .constprop.123]+0x1de>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:314
                        }
                        topic[tl] = 0;
    7c82:	10 82       	st	Z, r1
    7c84:	da 01       	movw	r26, r20
    7c86:	a6 1b       	sub	r26, r22
    7c88:	b7 0b       	sbc	r27, r23
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:316
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1) {
    7c8a:	f8 2d       	mov	r31, r8
    7c8c:	f6 70       	andi	r31, 0x06	; 6
    7c8e:	8f 2e       	mov	r8, r31
    7c90:	42 e0       	ldi	r20, 0x02	; 2
    7c92:	f4 13       	cpse	r31, r20
    7c94:	3c c0       	rjmp	.+120    	; 0x7d0e <PubSubClient::loop() [clone .constprop.123]+0x276>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:317
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
    7c96:	62 0f       	add	r22, r18
    7c98:	73 1f       	adc	r23, r19
    7c9a:	fb 01       	movw	r30, r22
    7c9c:	ef 54       	subi	r30, 0x4F	; 79
    7c9e:	fc 4e       	sbci	r31, 0xEC	; 236
    7ca0:	45 81       	ldd	r20, Z+5	; 0x05
    7ca2:	50 e0       	ldi	r21, 0x00	; 0
    7ca4:	54 2f       	mov	r21, r20
    7ca6:	44 27       	eor	r20, r20
    7ca8:	06 81       	ldd	r16, Z+6	; 0x06
    7caa:	04 0f       	add	r16, r20
    7cac:	15 2f       	mov	r17, r21
    7cae:	11 1d       	adc	r17, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:319
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
    7cb0:	ad 01       	movw	r20, r26
    7cb2:	42 1b       	sub	r20, r18
    7cb4:	53 0b       	sbc	r21, r19
    7cb6:	45 50       	subi	r20, 0x05	; 5
    7cb8:	51 09       	sbc	r21, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:318
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1) {
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
                            payload = buffer+llen+3+tl+2;
    7cba:	68 54       	subi	r22, 0x48	; 72
    7cbc:	7c 4e       	sbci	r23, 0xEC	; 236
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:319
                            callback(topic,payload,len-llen-3-tl-2);
    7cbe:	f5 01       	movw	r30, r10
    7cc0:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:321

                            buffer[0] = MQTTPUBACK;
    7cc2:	80 e4       	ldi	r24, 0x40	; 64
    7cc4:	80 93 b3 13 	sts	0x13B3, r24	; 0x8013b3 <mqtt_client+0x2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:322
                            buffer[1] = 2;
    7cc8:	80 92 b4 13 	sts	0x13B4, r8	; 0x8013b4 <mqtt_client+0x3>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:323
                            buffer[2] = (msgId >> 8);
    7ccc:	10 93 b5 13 	sts	0x13B5, r17	; 0x8013b5 <mqtt_client+0x4>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:324
                            buffer[3] = (msgId & 0xFF);
    7cd0:	00 93 b6 13 	sts	0x13B6, r16	; 0x8013b6 <mqtt_client+0x5>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:325
                            _client->write(buffer,4);
    7cd4:	80 91 b1 13 	lds	r24, 0x13B1	; 0x8013b1 <mqtt_client>
    7cd8:	90 91 b2 13 	lds	r25, 0x13B2	; 0x8013b2 <mqtt_client+0x1>
    7cdc:	dc 01       	movw	r26, r24
    7cde:	ed 91       	ld	r30, X+
    7ce0:	fc 91       	ld	r31, X
    7ce2:	02 80       	ldd	r0, Z+2	; 0x02
    7ce4:	f3 81       	ldd	r31, Z+3	; 0x03
    7ce6:	e0 2d       	mov	r30, r0
    7ce8:	44 e0       	ldi	r20, 0x04	; 4
    7cea:	50 e0       	ldi	r21, 0x00	; 0
    7cec:	63 eb       	ldi	r22, 0xB3	; 179
    7cee:	73 e1       	ldi	r23, 0x13	; 19
    7cf0:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:326
                            lastOutActivity = t;
    7cf2:	c0 92 b5 15 	sts	0x15B5, r12	; 0x8015b5 <mqtt_client+0x204>
    7cf6:	d0 92 b6 15 	sts	0x15B6, r13	; 0x8015b6 <mqtt_client+0x205>
    7cfa:	e0 92 b7 15 	sts	0x15B7, r14	; 0x8015b7 <mqtt_client+0x206>
    7cfe:	f0 92 b8 15 	sts	0x15B8, r15	; 0x8015b8 <mqtt_client+0x207>
    7d02:	0f b6       	in	r0, 0x3f	; 63
    7d04:	f8 94       	cli
    7d06:	7e be       	out	0x3e, r7	; 62
    7d08:	0f be       	out	0x3f, r0	; 63
    7d0a:	6d be       	out	0x3d, r6	; 61
    7d0c:	28 cf       	rjmp	.-432    	; 0x7b5e <PubSubClient::loop() [clone .constprop.123]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:330

                        } else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
    7d0e:	ad 01       	movw	r20, r26
    7d10:	42 1b       	sub	r20, r18
    7d12:	53 0b       	sbc	r21, r19
    7d14:	43 50       	subi	r20, 0x03	; 3
    7d16:	51 09       	sbc	r21, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:329
                            buffer[3] = (msgId & 0xFF);
                            _client->write(buffer,4);
                            lastOutActivity = t;

                        } else {
                            payload = buffer+llen+3+tl;
    7d18:	62 0f       	add	r22, r18
    7d1a:	73 1f       	adc	r23, r19
    7d1c:	6a 54       	subi	r22, 0x4A	; 74
    7d1e:	7c 4e       	sbci	r23, 0xEC	; 236
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:330
                            callback(topic,payload,len-llen-3-tl);
    7d20:	f5 01       	movw	r30, r10
    7d22:	19 95       	eicall
    7d24:	ee cf       	rjmp	.-36     	; 0x7d02 <PubSubClient::loop() [clone .constprop.123]+0x26a>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:333
                        }
                    }
                } else if (type == MQTTPINGREQ) {
    7d26:	80 3c       	cpi	r24, 0xC0	; 192
    7d28:	a9 f4       	brne	.+42     	; 0x7d54 <PubSubClient::loop() [clone .constprop.123]+0x2bc>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:334
                    buffer[0] = MQTTPINGRESP;
    7d2a:	80 ed       	ldi	r24, 0xD0	; 208
    7d2c:	80 93 b3 13 	sts	0x13B3, r24	; 0x8013b3 <mqtt_client+0x2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:335
                    buffer[1] = 0;
    7d30:	10 92 b4 13 	sts	0x13B4, r1	; 0x8013b4 <mqtt_client+0x3>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:336
                    _client->write(buffer,2);
    7d34:	80 91 b1 13 	lds	r24, 0x13B1	; 0x8013b1 <mqtt_client>
    7d38:	90 91 b2 13 	lds	r25, 0x13B2	; 0x8013b2 <mqtt_client+0x1>
    7d3c:	dc 01       	movw	r26, r24
    7d3e:	ed 91       	ld	r30, X+
    7d40:	fc 91       	ld	r31, X
    7d42:	02 80       	ldd	r0, Z+2	; 0x02
    7d44:	f3 81       	ldd	r31, Z+3	; 0x03
    7d46:	e0 2d       	mov	r30, r0
    7d48:	42 e0       	ldi	r20, 0x02	; 2
    7d4a:	50 e0       	ldi	r21, 0x00	; 0
    7d4c:	63 eb       	ldi	r22, 0xB3	; 179
    7d4e:	73 e1       	ldi	r23, 0x13	; 19
    7d50:	19 95       	eicall
    7d52:	05 cf       	rjmp	.-502    	; 0x7b5e <PubSubClient::loop() [clone .constprop.123]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:337
                } else if (type == MQTTPINGRESP) {
    7d54:	80 3d       	cpi	r24, 0xD0	; 208
    7d56:	09 f0       	breq	.+2      	; 0x7d5a <PubSubClient::loop() [clone .constprop.123]+0x2c2>
    7d58:	02 cf       	rjmp	.-508    	; 0x7b5e <PubSubClient::loop() [clone .constprop.123]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:338
                    pingOutstanding = false;
    7d5a:	10 92 bd 15 	sts	0x15BD, r1	; 0x8015bd <mqtt_client+0x20c>
    7d5e:	ff ce       	rjmp	.-514    	; 0x7b5e <PubSubClient::loop() [clone .constprop.123]+0xc6>

00007d60 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.69]>:
_Z10parseBytesPKccPhii.constprop.69():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:100
  data.f = x;
  for (int i = 0; i < 4; i++) ar[i] = data.b[i];
}


void parseBytes(const char* str, char sep, uint8_t* bytes, int maxBytes, int base) {
    7d60:	cf 92       	push	r12
    7d62:	df 92       	push	r13
    7d64:	ef 92       	push	r14
    7d66:	ff 92       	push	r15
    7d68:	0f 93       	push	r16
    7d6a:	1f 93       	push	r17
    7d6c:	cf 93       	push	r28
    7d6e:	df 93       	push	r29
    7d70:	8b 01       	movw	r16, r22
    7d72:	7b 01       	movw	r14, r22
    7d74:	e4 0e       	add	r14, r20
    7d76:	f5 1e       	adc	r15, r21
    7d78:	ca e4       	ldi	r28, 0x4A	; 74
    7d7a:	de e0       	ldi	r29, 0x0E	; 14
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:103
  for (int i = 0; i < maxBytes; i++) {
    bytes[i] = strtoul(str, NULL, base);  // Convert byte
    str = strchr(str, sep);               // Find next separator
    7d7c:	c8 2e       	mov	r12, r24
    7d7e:	88 0f       	add	r24, r24
    7d80:	dd 08       	sbc	r13, r13
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:102
}


void parseBytes(const char* str, char sep, uint8_t* bytes, int maxBytes, int base) {
  for (int i = 0; i < maxBytes; i++) {
    bytes[i] = strtoul(str, NULL, base);  // Convert byte
    7d82:	4a e0       	ldi	r20, 0x0A	; 10
    7d84:	50 e0       	ldi	r21, 0x00	; 0
    7d86:	70 e0       	ldi	r23, 0x00	; 0
    7d88:	60 e0       	ldi	r22, 0x00	; 0
    7d8a:	ce 01       	movw	r24, r28
    7d8c:	0e 94 09 7f 	call	0xfe12	; 0xfe12 <strtoul>
    7d90:	f8 01       	movw	r30, r16
    7d92:	61 93       	st	Z+, r22
    7d94:	8f 01       	movw	r16, r30
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:103
    str = strchr(str, sep);               // Find next separator
    7d96:	b6 01       	movw	r22, r12
    7d98:	ce 01       	movw	r24, r28
    7d9a:	0e 94 b4 8c 	call	0x11968	; 0x11968 <strchr>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:104
    if (str == NULL || *str == '\0') {
    7d9e:	00 97       	sbiw	r24, 0x00	; 0
    7da0:	49 f0       	breq	.+18     	; 0x7db4 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.69]+0x54>
    7da2:	fc 01       	movw	r30, r24
    7da4:	20 81       	ld	r18, Z
    7da6:	22 23       	and	r18, r18
    7da8:	29 f0       	breq	.+10     	; 0x7db4 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.69]+0x54>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:107
      break;                            // No more separators, exit
    }
    str++;                                // Point to next character after separator
    7daa:	ec 01       	movw	r28, r24
    7dac:	21 96       	adiw	r28, 0x01	; 1
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:101
  for (int i = 0; i < 4; i++) ar[i] = data.b[i];
}


void parseBytes(const char* str, char sep, uint8_t* bytes, int maxBytes, int base) {
  for (int i = 0; i < maxBytes; i++) {
    7dae:	0e 15       	cp	r16, r14
    7db0:	1f 05       	cpc	r17, r15
    7db2:	39 f7       	brne	.-50     	; 0x7d82 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.69]+0x22>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:109
    if (str == NULL || *str == '\0') {
      break;                            // No more separators, exit
    }
    str++;                                // Point to next character after separator
  }
}
    7db4:	df 91       	pop	r29
    7db6:	cf 91       	pop	r28
    7db8:	1f 91       	pop	r17
    7dba:	0f 91       	pop	r16
    7dbc:	ff 90       	pop	r15
    7dbe:	ef 90       	pop	r14
    7dc0:	df 90       	pop	r13
    7dc2:	cf 90       	pop	r12
    7dc4:	08 95       	ret

00007dc6 <know_mqtt_create_or_update(char*, unsigned char) [clone .constprop.58]>:
_Z26know_mqtt_create_or_updatePch.constprop.58():
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:336
  mqtt_error = 0;
}


////////////////////////////////////////////////////////////////////////////
void know_mqtt_create_or_update(char *nazev, uint8_t type)
    7dc6:	df 92       	push	r13
    7dc8:	ef 92       	push	r14
    7dca:	ff 92       	push	r15
    7dcc:	0f 93       	push	r16
    7dce:	1f 93       	push	r17
    7dd0:	cf 93       	push	r28
    7dd2:	df 93       	push	r29
    7dd4:	d8 2e       	mov	r13, r24
    7dd6:	8a ec       	ldi	r24, 0xCA	; 202
    7dd8:	e8 2e       	mov	r14, r24
    7dda:	8c e0       	ldi	r24, 0x0C	; 12
    7ddc:	f8 2e       	mov	r15, r24
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:339
{
  uint8_t active = 0;
  for (uint8_t idx = 0; idx < MAX_KNOW_MQTT; idx++)
    7dde:	87 01       	movw	r16, r14
    7de0:	d0 e0       	ldi	r29, 0x00	; 0
    7de2:	c0 e0       	ldi	r28, 0x00	; 0
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:340
    if (know_mqtt[idx].type == type)
    7de4:	f8 01       	movw	r30, r16
    7de6:	82 85       	ldd	r24, Z+10	; 0x0a
    7de8:	d8 12       	cpse	r13, r24
    7dea:	21 c0       	rjmp	.+66     	; 0x7e2e <know_mqtt_create_or_update(char*, unsigned char) [clone .constprop.58]+0x68>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:341
      if (strcmp(know_mqtt[idx].device, nazev) == 0)
    7dec:	6a e4       	ldi	r22, 0x4A	; 74
    7dee:	7e e0       	ldi	r23, 0x0E	; 14
    7df0:	c8 01       	movw	r24, r16
    7df2:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
    7df6:	89 2b       	or	r24, r25
    7df8:	d1 f4       	brne	.+52     	; 0x7e2e <know_mqtt_create_or_update(char*, unsigned char) [clone .constprop.58]+0x68>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:344
      {
        active = 1;
        know_mqtt[idx].last_update = 0;
    7dfa:	8c e0       	ldi	r24, 0x0C	; 12
    7dfc:	8c 9f       	mul	r24, r28
    7dfe:	f0 01       	movw	r30, r0
    7e00:	8d 9f       	mul	r24, r29
    7e02:	f0 0d       	add	r31, r0
    7e04:	11 24       	eor	r1, r1
    7e06:	e6 53       	subi	r30, 0x36	; 54
    7e08:	f3 4f       	sbci	r31, 0xF3	; 243
    7e0a:	13 86       	std	Z+11, r1	; 0x0b
    7e0c:	08 c0       	rjmp	.+16     	; 0x7e1e <know_mqtt_create_or_update(char*, unsigned char) [clone .constprop.58]+0x58>
    7e0e:	2f 5f       	subi	r18, 0xFF	; 255
    7e10:	3f 4f       	sbci	r19, 0xFF	; 255
    7e12:	fc e0       	ldi	r31, 0x0C	; 12
    7e14:	ef 0e       	add	r14, r31
    7e16:	f1 1c       	adc	r15, r1
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:349
        break;
      }
  if (active == 0)
  {
    for (uint8_t idx = 0; idx < MAX_KNOW_MQTT; idx++)
    7e18:	20 32       	cpi	r18, 0x20	; 32
    7e1a:	31 05       	cpc	r19, r1
    7e1c:	81 f4       	brne	.+32     	; 0x7e3e <know_mqtt_create_or_update(char*, unsigned char) [clone .constprop.58]+0x78>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:358
        know_mqtt[idx].last_update = 0;
        strcpy(know_mqtt[idx].device, nazev);
        break;
      }
  }
}
    7e1e:	df 91       	pop	r29
    7e20:	cf 91       	pop	r28
    7e22:	1f 91       	pop	r17
    7e24:	0f 91       	pop	r16
    7e26:	ff 90       	pop	r15
    7e28:	ef 90       	pop	r14
    7e2a:	df 90       	pop	r13
    7e2c:	08 95       	ret
    7e2e:	21 96       	adiw	r28, 0x01	; 1
    7e30:	04 5f       	subi	r16, 0xF4	; 244
    7e32:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:339

////////////////////////////////////////////////////////////////////////////
void know_mqtt_create_or_update(char *nazev, uint8_t type)
{
  uint8_t active = 0;
  for (uint8_t idx = 0; idx < MAX_KNOW_MQTT; idx++)
    7e34:	c0 32       	cpi	r28, 0x20	; 32
    7e36:	d1 05       	cpc	r29, r1
    7e38:	a9 f6       	brne	.-86     	; 0x7de4 <know_mqtt_create_or_update(char*, unsigned char) [clone .constprop.58]+0x1e>
    7e3a:	30 e0       	ldi	r19, 0x00	; 0
    7e3c:	20 e0       	ldi	r18, 0x00	; 0
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:350
        break;
      }
  if (active == 0)
  {
    for (uint8_t idx = 0; idx < MAX_KNOW_MQTT; idx++)
      if (know_mqtt[idx].type == TYPE_FREE)
    7e3e:	f7 01       	movw	r30, r14
    7e40:	82 85       	ldd	r24, Z+10	; 0x0a
    7e42:	81 11       	cpse	r24, r1
    7e44:	e4 cf       	rjmp	.-56     	; 0x7e0e <know_mqtt_create_or_update(char*, unsigned char) [clone .constprop.58]+0x48>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:352
      {
        know_mqtt[idx].type = type;
    7e46:	4c e0       	ldi	r20, 0x0C	; 12
    7e48:	42 9f       	mul	r20, r18
    7e4a:	c0 01       	movw	r24, r0
    7e4c:	43 9f       	mul	r20, r19
    7e4e:	90 0d       	add	r25, r0
    7e50:	11 24       	eor	r1, r1
    7e52:	86 53       	subi	r24, 0x36	; 54
    7e54:	93 4f       	sbci	r25, 0xF3	; 243
    7e56:	fc 01       	movw	r30, r24
    7e58:	d2 86       	std	Z+10, r13	; 0x0a
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:353
        know_mqtt[idx].last_update = 0;
    7e5a:	13 86       	std	Z+11, r1	; 0x0b
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:354
        strcpy(know_mqtt[idx].device, nazev);
    7e5c:	6a e4       	ldi	r22, 0x4A	; 74
    7e5e:	7e e0       	ldi	r23, 0x0E	; 14
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:358
        break;
      }
  }
}
    7e60:	df 91       	pop	r29
    7e62:	cf 91       	pop	r28
    7e64:	1f 91       	pop	r17
    7e66:	0f 91       	pop	r16
    7e68:	ff 90       	pop	r15
    7e6a:	ef 90       	pop	r14
    7e6c:	df 90       	pop	r13
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:354
    for (uint8_t idx = 0; idx < MAX_KNOW_MQTT; idx++)
      if (know_mqtt[idx].type == TYPE_FREE)
      {
        know_mqtt[idx].type = type;
        know_mqtt[idx].last_update = 0;
        strcpy(know_mqtt[idx].device, nazev);
    7e6e:	0c 94 c8 8c 	jmp	0x11990	; 0x11990 <strcpy>

00007e72 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.17]>:
_ZN11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_.isra.17():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:294
  template <typename TStringRef>
  FORCE_INLINE JsonObject createNestedObject_impl(TStringRef key);

  // Returns the list node that matches the specified key.
  template <typename TStringRef>
  Internals::Slot* findSlot(TStringRef key) {
    7e72:	0f 93       	push	r16
    7e74:	1f 93       	push	r17
    7e76:	cf 93       	push	r28
    7e78:	df 93       	push	r29
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:295
    if (!_data) return 0;
    7e7a:	00 97       	sbiw	r24, 0x00	; 0
    7e7c:	01 f1       	breq	.+64     	; 0x7ebe <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.17]+0x4c>
    7e7e:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:296
    Internals::Slot* slot = _data->head;
    7e80:	fc 01       	movw	r30, r24
    7e82:	c0 81       	ld	r28, Z
    7e84:	d1 81       	ldd	r29, Z+1	; 0x01
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:297
    while (slot) {
    7e86:	20 97       	sbiw	r28, 0x00	; 0
    7e88:	d1 f0       	breq	.+52     	; 0x7ebe <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.17]+0x4c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:298
      if (Internals::makeString(key).equals(slot->key)) break;
    7e8a:	6a 85       	ldd	r22, Y+10	; 0x0a
    7e8c:	7b 85       	ldd	r23, Y+11	; 0x0b
equals():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/ZeroTerminatedRamString.hpp:16
 public:
  ZeroTerminatedRamString(const char* str) : _str(str) {}

  bool equals(const char* expected) const {
    const char* actual = reinterpret_cast<const char*>(_str);
    if (!actual || !expected) return actual == expected;
    7e8e:	01 15       	cp	r16, r1
    7e90:	11 05       	cpc	r17, r1
    7e92:	19 f0       	breq	.+6      	; 0x7e9a <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.17]+0x28>
    7e94:	61 15       	cp	r22, r1
    7e96:	71 05       	cpc	r23, r1
    7e98:	49 f4       	brne	.+18     	; 0x7eac <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.17]+0x3a>
    7e9a:	06 17       	cp	r16, r22
    7e9c:	17 07       	cpc	r17, r23
    7e9e:	59 f4       	brne	.+22     	; 0x7eb6 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.17]+0x44>
_ZN11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_.isra.17():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:302
      slot = slot->next;
    }
    return slot;
  }
    7ea0:	ce 01       	movw	r24, r28
    7ea2:	df 91       	pop	r29
    7ea4:	cf 91       	pop	r28
    7ea6:	1f 91       	pop	r17
    7ea8:	0f 91       	pop	r16
    7eaa:	08 95       	ret
equals():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/ZeroTerminatedRamString.hpp:17
    return strcmp(actual, expected) == 0;
    7eac:	c8 01       	movw	r24, r16
    7eae:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
    7eb2:	89 2b       	or	r24, r25
    7eb4:	a9 f3       	breq	.-22     	; 0x7ea0 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.17]+0x2e>
_ZN11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_.isra.17():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:299
  Internals::Slot* findSlot(TStringRef key) {
    if (!_data) return 0;
    Internals::Slot* slot = _data->head;
    while (slot) {
      if (Internals::makeString(key).equals(slot->key)) break;
      slot = slot->next;
    7eb6:	0e 80       	ldd	r0, Y+6	; 0x06
    7eb8:	df 81       	ldd	r29, Y+7	; 0x07
    7eba:	c0 2d       	mov	r28, r0
    7ebc:	e4 cf       	rjmp	.-56     	; 0x7e86 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.17]+0x14>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:295
  FORCE_INLINE JsonObject createNestedObject_impl(TStringRef key);

  // Returns the list node that matches the specified key.
  template <typename TStringRef>
  Internals::Slot* findSlot(TStringRef key) {
    if (!_data) return 0;
    7ebe:	d0 e0       	ldi	r29, 0x00	; 0
    7ec0:	c0 e0       	ldi	r28, 0x00	; 0
    7ec2:	ee cf       	rjmp	.-36     	; 0x7ea0 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.17]+0x2e>

00007ec4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:28
      : _memoryPool(&memoryPool),
        _reader(reader),
        _stringStorage(stringStorage),
        _nestingLimit(nestingLimit),
        _loaded(false) {}
  DeserializationError parse(JsonVariant variant) {
    7ec4:	4f 92       	push	r4
    7ec6:	5f 92       	push	r5
    7ec8:	6f 92       	push	r6
    7eca:	7f 92       	push	r7
    7ecc:	8f 92       	push	r8
    7ece:	9f 92       	push	r9
    7ed0:	af 92       	push	r10
    7ed2:	bf 92       	push	r11
    7ed4:	df 92       	push	r13
    7ed6:	ef 92       	push	r14
    7ed8:	ff 92       	push	r15
    7eda:	0f 93       	push	r16
    7edc:	1f 93       	push	r17
    7ede:	cf 93       	push	r28
    7ee0:	df 93       	push	r29
    7ee2:	cd b7       	in	r28, 0x3d	; 61
    7ee4:	de b7       	in	r29, 0x3e	; 62
    7ee6:	c4 54       	subi	r28, 0x44	; 68
    7ee8:	d1 09       	sbc	r29, r1
    7eea:	0f b6       	in	r0, 0x3f	; 63
    7eec:	f8 94       	cli
    7eee:	de bf       	out	0x3e, r29	; 62
    7ef0:	0f be       	out	0x3f, r0	; 63
    7ef2:	cd bf       	out	0x3d, r28	; 61
    7ef4:	8c 01       	movw	r16, r24
    7ef6:	4a 01       	movw	r8, r20
    7ef8:	5b 01       	movw	r10, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:29
    DeserializationError err = skipSpacesAndComments();
    7efa:	0e 94 c1 2d 	call	0x5b82	; 0x5b82 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:30
    if (err) return err;
    7efe:	00 97       	sbiw	r24, 0x00	; 0
    7f00:	09 f0       	breq	.+2      	; 0x7f04 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x40>
    7f02:	b0 c0       	rjmp	.+352    	; 0x8064 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1a0>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:32

    switch (current()) {
    7f04:	c8 01       	movw	r24, r16
    7f06:	0e 94 5a 2d 	call	0x5ab4	; 0x5ab4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    7f0a:	75 01       	movw	r14, r10
    7f0c:	8b 35       	cpi	r24, 0x5B	; 91
    7f0e:	49 f1       	breq	.+82     	; 0x7f62 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x9e>
    7f10:	8b 37       	cpi	r24, 0x7B	; 123
    7f12:	09 f4       	brne	.+2      	; 0x7f16 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x52>
    7f14:	d2 c0       	rjmp	.+420    	; 0x80ba <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1f6>
parseValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:159
      if (err) return err;
    }
  }

  DeserializationError parseValue(JsonVariant variant) {
    if (isQuote(current())) {
    7f16:	c8 01       	movw	r24, r16
    7f18:	0e 94 5a 2d 	call	0x5ab4	; 0x5ab4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
isQuote():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:274
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
  }

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
    7f1c:	87 32       	cpi	r24, 0x27	; 39
    7f1e:	09 f4       	brne	.+2      	; 0x7f22 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5e>
    7f20:	eb c1       	rjmp	.+982    	; 0x82f8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x434>
    7f22:	82 32       	cpi	r24, 0x22	; 34
    7f24:	09 f4       	brne	.+2      	; 0x7f28 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x64>
    7f26:	e8 c1       	rjmp	.+976    	; 0x82f8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x434>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:240

  DeserializationError parseNumericValue(JsonVariant result) {
    char buffer[64];
    uint8_t n = 0;

    char c = current();
    7f28:	c8 01       	movw	r24, r16
    7f2a:	0e 94 5a 2d 	call	0x5ab4	; 0x5ab4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    7f2e:	b8 2e       	mov	r11, r24
    7f30:	ce 01       	movw	r24, r28
    7f32:	01 96       	adiw	r24, 0x01	; 1
    7f34:	4c 01       	movw	r8, r24
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:238
    return DeserializationError::Ok;
  }

  DeserializationError parseNumericValue(JsonVariant result) {
    char buffer[64];
    uint8_t n = 0;
    7f36:	d1 2c       	mov	r13, r1
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:241

    char c = current();
    while (canBeInNonQuotedString(c) && n < 63) {
    7f38:	8b 2d       	mov	r24, r11
    7f3a:	0e 94 42 2d 	call	0x5a84	; 0x5a84 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>
    7f3e:	88 23       	and	r24, r24
    7f40:	09 f4       	brne	.+2      	; 0x7f44 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x80>
    7f42:	f5 c1       	rjmp	.+1002   	; 0x832e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x46a>
    7f44:	bf e3       	ldi	r27, 0x3F	; 63
    7f46:	db 16       	cp	r13, r27
    7f48:	09 f4       	brne	.+2      	; 0x7f4c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x88>
    7f4a:	f1 c1       	rjmp	.+994    	; 0x832e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x46a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    7f4c:	f8 01       	movw	r30, r16
    7f4e:	10 86       	std	Z+8, r1	; 0x08
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:243
    uint8_t n = 0;

    char c = current();
    while (canBeInNonQuotedString(c) && n < 63) {
      move();
      buffer[n++] = c;
    7f50:	d3 94       	inc	r13
    7f52:	d4 01       	movw	r26, r8
    7f54:	bd 92       	st	X+, r11
    7f56:	4d 01       	movw	r8, r26
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:244
      c = current();
    7f58:	c8 01       	movw	r24, r16
    7f5a:	0e 94 5a 2d 	call	0x5ab4	; 0x5ab4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    7f5e:	b8 2e       	mov	r11, r24
    7f60:	eb cf       	rjmp	.-42     	; 0x7f38 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x74>
parseArray():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:69
    move();
    return true;
  }

  DeserializationError parseArray(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
    7f62:	d8 01       	movw	r26, r16
    7f64:	16 96       	adiw	r26, 0x06	; 6
    7f66:	8c 91       	ld	r24, X
    7f68:	88 23       	and	r24, r24
    7f6a:	09 f4       	brne	.+2      	; 0x7f6e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xaa>
    7f6c:	c1 c1       	rjmp	.+898    	; 0x82f0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x42c>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:78

template <typename T>
inline typename Internals::enable_if<Internals::is_same<T, JsonArray>::value,
                                     JsonArray>::type
JsonVariant::to() {
  if (!_data) return JsonArray();
    7f6e:	a1 14       	cp	r10, r1
    7f70:	b1 04       	cpc	r11, r1
    7f72:	09 f4       	brne	.+2      	; 0x7f76 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xb2>
    7f74:	2d c1       	rjmp	.+602    	; 0x81d0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x30c>
_ZN11ArduinoJson9Internals15JsonVariantData7toArrayEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:70
  void setNull() {
    type = JSON_NULL;
  }

  JsonArrayData *toArray() {
    type = JSON_ARRAY;
    7f76:	88 e0       	ldi	r24, 0x08	; 8
    7f78:	90 e0       	ldi	r25, 0x00	; 0
    7f7a:	f5 01       	movw	r30, r10
    7f7c:	91 83       	std	Z+1, r25	; 0x01
    7f7e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:71
    content.asArray.head = 0;
    7f80:	13 82       	std	Z+3, r1	; 0x03
    7f82:	12 82       	std	Z+2, r1	; 0x02
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:72
    content.asArray.tail = 0;
    7f84:	15 82       	std	Z+5, r1	; 0x05
    7f86:	14 82       	std	Z+4, r1	; 0x04
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    7f88:	c8 01       	movw	r24, r16
    7f8a:	0e 94 5a 2d 	call	0x5ab4	; 0x5ab4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    7f8e:	8b 35       	cpi	r24, 0x5B	; 91
    7f90:	09 f0       	breq	.+2      	; 0x7f94 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xd0>
    7f92:	ef c0       	rjmp	.+478    	; 0x8172 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    7f94:	d8 01       	movw	r26, r16
    7f96:	18 96       	adiw	r26, 0x08	; 8
    7f98:	1c 92       	st	X, r1
parseArray():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:78

    // Check opening braket
    if (!eat('[')) return DeserializationError::InvalidInput;

    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
    7f9a:	c8 01       	movw	r24, r16
    7f9c:	0e 94 c1 2d 	call	0x5b82	; 0x5b82 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    7fa0:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:79
    if (err) return err;
    7fa2:	89 2b       	or	r24, r25
    7fa4:	09 f0       	breq	.+2      	; 0x7fa8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xe4>
    7fa6:	5d c0       	rjmp	.+186    	; 0x8062 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    7fa8:	c8 01       	movw	r24, r16
    7faa:	0e 94 5a 2d 	call	0x5ab4	; 0x5ab4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    7fae:	8d 35       	cpi	r24, 0x5D	; 93
    7fb0:	09 f4       	brne	.+2      	; 0x7fb4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xf0>
    7fb2:	55 c0       	rjmp	.+170    	; 0x805e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19a>
add():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:57
  }

  JsonVariant add() {
    if (!_data) return JsonVariant();

    Internals::Slot* slot = new (_memoryPool) Internals::Slot();
    7fb4:	8c e0       	ldi	r24, 0x0C	; 12
    7fb6:	d8 2e       	mov	r13, r24
operator new():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Memory/AllocableInMemoryPool.hpp:15
namespace Internals {

class AllocableInMemoryPool {
 public:
  void *operator new(size_t n, MemoryPool *memoryPool) NOEXCEPT {
    return memoryPool->alloc(n);
    7fb8:	d4 01       	movw	r26, r8
    7fba:	ed 91       	ld	r30, X+
    7fbc:	fc 91       	ld	r31, X
    7fbe:	01 90       	ld	r0, Z+
    7fc0:	f0 81       	ld	r31, Z
    7fc2:	e0 2d       	mov	r30, r0
    7fc4:	6c e0       	ldi	r22, 0x0C	; 12
    7fc6:	70 e0       	ldi	r23, 0x00	; 0
    7fc8:	c4 01       	movw	r24, r8
    7fca:	19 95       	eicall
    7fcc:	fc 01       	movw	r30, r24
add():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:57
    7fce:	00 97       	sbiw	r24, 0x00	; 0
    7fd0:	09 f4       	brne	.+2      	; 0x7fd4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x110>
    7fd2:	64 c0       	rjmp	.+200    	; 0x809c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1d8>
    7fd4:	dc 01       	movw	r26, r24
    7fd6:	2d 2d       	mov	r18, r13
    7fd8:	1d 92       	st	X+, r1
    7fda:	2a 95       	dec	r18
    7fdc:	e9 f7       	brne	.-6      	; 0x7fd8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x114>
_ZN11ArduinoJson9Internals15JsonVariantDataC2Ev():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:20
struct JsonVariantData {
  JsonVariantType type;
  JsonVariantContent content;

  JsonVariantData() {
    type = JSON_NULL;
    7fde:	11 82       	std	Z+1, r1	; 0x01
    7fe0:	10 82       	st	Z, r1
add():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:62
    if (!slot) return JsonVariant();

    slot->next = 0;

    if (_data->tail) {
    7fe2:	d7 01       	movw	r26, r14
    7fe4:	14 96       	adiw	r26, 0x04	; 4
    7fe6:	8d 91       	ld	r24, X+
    7fe8:	9c 91       	ld	r25, X
    7fea:	15 97       	sbiw	r26, 0x05	; 5
    7fec:	00 97       	sbiw	r24, 0x00	; 0
    7fee:	09 f4       	brne	.+2      	; 0x7ff2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x12e>
    7ff0:	50 c0       	rjmp	.+160    	; 0x8092 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1ce>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:63
      slot->prev = _data->tail;
    7ff2:	91 87       	std	Z+9, r25	; 0x09
    7ff4:	80 87       	std	Z+8, r24	; 0x08
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:64
      _data->tail->next = slot;
    7ff6:	14 96       	adiw	r26, 0x04	; 4
    7ff8:	8d 91       	ld	r24, X+
    7ffa:	9c 91       	ld	r25, X
    7ffc:	dc 01       	movw	r26, r24
    7ffe:	17 96       	adiw	r26, 0x07	; 7
    8000:	fc 93       	st	X, r31
    8002:	ee 93       	st	-X, r30
    8004:	16 97       	sbiw	r26, 0x06	; 6
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:65
      _data->tail = slot;
    8006:	d7 01       	movw	r26, r14
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:69
    } else {
      slot->prev = 0;
      _data->head = slot;
      _data->tail = slot;
    8008:	15 96       	adiw	r26, 0x05	; 5
    800a:	fc 93       	st	X, r31
    800c:	ee 93       	st	-X, r30
    800e:	14 97       	sbiw	r26, 0x04	; 4
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:79
  return JsonArray(_memoryPool, _data->toArray());
    8010:	98 2d       	mov	r25, r8
    8012:	89 2d       	mov	r24, r9
    8014:	49 2e       	mov	r4, r25
    8016:	58 2e       	mov	r5, r24
    8018:	3f 01       	movw	r6, r30
parseArray():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:88

    // Read each value
    for (;;) {
      // Allocate slot in array
      JsonVariant value = array.add();
      if (value.isInvalid()) return DeserializationError::NoMemory;
    801a:	ef 2b       	or	r30, r31
    801c:	09 f4       	brne	.+2      	; 0x8020 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x15c>
    801e:	d8 c0       	rjmp	.+432    	; 0x81d0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x30c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:91

      // 1 - Parse value
      _nestingLimit--;
    8020:	f8 01       	movw	r30, r16
    8022:	86 81       	ldd	r24, Z+6	; 0x06
    8024:	81 50       	subi	r24, 0x01	; 1
    8026:	86 83       	std	Z+6, r24	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:92
      err = parse(value);
    8028:	b3 01       	movw	r22, r6
    802a:	a2 01       	movw	r20, r4
    802c:	c8 01       	movw	r24, r16
    802e:	0e 94 62 3f 	call	0x7ec4	; 0x7ec4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>
    8032:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:93
      _nestingLimit++;
    8034:	d8 01       	movw	r26, r16
    8036:	16 96       	adiw	r26, 0x06	; 6
    8038:	8c 91       	ld	r24, X
    803a:	16 97       	sbiw	r26, 0x06	; 6
    803c:	8f 5f       	subi	r24, 0xFF	; 255
    803e:	16 96       	adiw	r26, 0x06	; 6
    8040:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:94
      if (err) return err;
    8042:	a1 14       	cp	r10, r1
    8044:	b1 04       	cpc	r11, r1
    8046:	69 f4       	brne	.+26     	; 0x8062 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:97

      // 2 - Skip spaces
      err = skipSpacesAndComments();
    8048:	c8 01       	movw	r24, r16
    804a:	0e 94 c1 2d 	call	0x5b82	; 0x5b82 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    804e:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:98
      if (err) return err;
    8050:	89 2b       	or	r24, r25
    8052:	39 f4       	brne	.+14     	; 0x8062 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    8054:	c8 01       	movw	r24, r16
    8056:	0e 94 5a 2d 	call	0x5ab4	; 0x5ab4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    805a:	8d 35       	cpi	r24, 0x5D	; 93
    805c:	21 f5       	brne	.+72     	; 0x80a6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1e2>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    805e:	f8 01       	movw	r30, r16
    8060:	10 86       	std	Z+8, r1	; 0x08
    8062:	c5 01       	movw	r24, r10
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:42
        return parseObject(variant);

      default:
        return parseValue(variant);
    }
  }
    8064:	cc 5b       	subi	r28, 0xBC	; 188
    8066:	df 4f       	sbci	r29, 0xFF	; 255
    8068:	0f b6       	in	r0, 0x3f	; 63
    806a:	f8 94       	cli
    806c:	de bf       	out	0x3e, r29	; 62
    806e:	0f be       	out	0x3f, r0	; 63
    8070:	cd bf       	out	0x3d, r28	; 61
    8072:	df 91       	pop	r29
    8074:	cf 91       	pop	r28
    8076:	1f 91       	pop	r17
    8078:	0f 91       	pop	r16
    807a:	ff 90       	pop	r15
    807c:	ef 90       	pop	r14
    807e:	df 90       	pop	r13
    8080:	bf 90       	pop	r11
    8082:	af 90       	pop	r10
    8084:	9f 90       	pop	r9
    8086:	8f 90       	pop	r8
    8088:	7f 90       	pop	r7
    808a:	6f 90       	pop	r6
    808c:	5f 90       	pop	r5
    808e:	4f 90       	pop	r4
    8090:	08 95       	ret
add():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:68
      slot->prev = _data->tail;
      _data->tail->next = slot;
      _data->tail = slot;
    } else {
      slot->prev = 0;
      _data->head = slot;
    8092:	13 96       	adiw	r26, 0x03	; 3
    8094:	fc 93       	st	X, r31
    8096:	ee 93       	st	-X, r30
    8098:	12 97       	sbiw	r26, 0x02	; 2
    809a:	b6 cf       	rjmp	.-148    	; 0x8008 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x144>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:58

  JsonVariant add() {
    if (!_data) return JsonVariant();

    Internals::Slot* slot = new (_memoryPool) Internals::Slot();
    if (!slot) return JsonVariant();
    809c:	f0 e0       	ldi	r31, 0x00	; 0
    809e:	e0 e0       	ldi	r30, 0x00	; 0
    80a0:	90 e0       	ldi	r25, 0x00	; 0
    80a2:	80 e0       	ldi	r24, 0x00	; 0
    80a4:	b7 cf       	rjmp	.-146    	; 0x8014 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x150>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    80a6:	c8 01       	movw	r24, r16
    80a8:	0e 94 5a 2d 	call	0x5ab4	; 0x5ab4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    80ac:	8c 32       	cpi	r24, 0x2C	; 44
    80ae:	09 f0       	breq	.+2      	; 0x80b2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1ee>
    80b0:	60 c0       	rjmp	.+192    	; 0x8172 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    80b2:	d8 01       	movw	r26, r16
    80b4:	18 96       	adiw	r26, 0x08	; 8
    80b6:	1c 92       	st	X, r1
    80b8:	7f cf       	rjmp	.-258    	; 0x7fb8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xf4>
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:107
      if (!eat(',')) return DeserializationError::InvalidInput;
    }
  }

  DeserializationError parseObject(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
    80ba:	f8 01       	movw	r30, r16
    80bc:	86 81       	ldd	r24, Z+6	; 0x06
    80be:	88 23       	and	r24, r24
    80c0:	09 f4       	brne	.+2      	; 0x80c4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x200>
    80c2:	16 c1       	rjmp	.+556    	; 0x82f0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x42c>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:86

template <typename T>
typename Internals::enable_if<Internals::is_same<T, JsonObject>::value,
                              JsonObject>::type
JsonVariant::to() {
  if (!_data) return JsonObject();
    80c4:	a1 14       	cp	r10, r1
    80c6:	b1 04       	cpc	r11, r1
    80c8:	09 f4       	brne	.+2      	; 0x80cc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x208>
    80ca:	82 c0       	rjmp	.+260    	; 0x81d0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x30c>
    80cc:	34 01       	movw	r6, r8
_ZN11ArduinoJson9Internals15JsonVariantData8toObjectEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:77
    content.asArray.tail = 0;
    return &content.asArray;
  }

  JsonObjectData *toObject() {
    type = JSON_OBJECT;
    80ce:	89 e0       	ldi	r24, 0x09	; 9
    80d0:	90 e0       	ldi	r25, 0x00	; 0
    80d2:	d5 01       	movw	r26, r10
    80d4:	11 96       	adiw	r26, 0x01	; 1
    80d6:	9c 93       	st	X, r25
    80d8:	8e 93       	st	-X, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:78
    content.asObject.head = 0;
    80da:	13 96       	adiw	r26, 0x03	; 3
    80dc:	1c 92       	st	X, r1
    80de:	1e 92       	st	-X, r1
    80e0:	12 97       	sbiw	r26, 0x02	; 2
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:79
    content.asObject.tail = 0;
    80e2:	15 96       	adiw	r26, 0x05	; 5
    80e4:	1c 92       	st	X, r1
    80e6:	1e 92       	st	-X, r1
    80e8:	14 97       	sbiw	r26, 0x04	; 4
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:80
    return &content.asObject;
    80ea:	45 01       	movw	r8, r10
    80ec:	b2 e0       	ldi	r27, 0x02	; 2
    80ee:	8b 0e       	add	r8, r27
    80f0:	91 1c       	adc	r9, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    80f2:	c8 01       	movw	r24, r16
    80f4:	0e 94 5a 2d 	call	0x5ab4	; 0x5ab4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    80f8:	8b 37       	cpi	r24, 0x7B	; 123
    80fa:	d9 f5       	brne	.+118    	; 0x8172 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    80fc:	f8 01       	movw	r30, r16
    80fe:	10 86       	std	Z+8, r1	; 0x08
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:116

    // Check opening brace
    if (!eat('{')) return DeserializationError::InvalidInput;

    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
    8100:	c8 01       	movw	r24, r16
    8102:	0e 94 c1 2d 	call	0x5b82	; 0x5b82 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    8106:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:117
    if (err) return err;
    8108:	89 2b       	or	r24, r25
    810a:	09 f0       	breq	.+2      	; 0x810e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x24a>
    810c:	aa cf       	rjmp	.-172    	; 0x8062 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    810e:	c8 01       	movw	r24, r16
    8110:	0e 94 5a 2d 	call	0x5ab4	; 0x5ab4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    8114:	8d 37       	cpi	r24, 0x7D	; 125
    8116:	09 f4       	brne	.+2      	; 0x811a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x256>
    8118:	9c c0       	rjmp	.+312    	; 0x8252 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x38e>
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:348

    // search a matching key
    Internals::Slot* slot = findSlot<TStringRef>(key);
    if (!slot) {
      // add the key
      slot = new (_memoryPool) Internals::Slot();
    811a:	bc e0       	ldi	r27, 0x0C	; 12
    811c:	5b 2e       	mov	r5, r27
parseKey():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:167
      return parseNumericValue(variant);
    }
  }

  DeserializationError parseKey(const char **key) {
    if (isQuote(current())) {
    811e:	c8 01       	movw	r24, r16
    8120:	0e 94 5a 2d 	call	0x5ab4	; 0x5ab4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
isQuote():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:274
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
  }

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
    8124:	87 32       	cpi	r24, 0x27	; 39
    8126:	79 f0       	breq	.+30     	; 0x8146 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x282>
    8128:	82 32       	cpi	r24, 0x22	; 34
    812a:	69 f0       	breq	.+26     	; 0x8146 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x282>
_ZN11ArduinoJson9Internals11StringMoverIcE6StringC2EPPc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:15
template <typename TChar>
class StringMover {
 public:
  class String {
   public:
    String(TChar** ptr) : _writePtr(ptr), _startPtr(*ptr) {}
    812c:	f8 01       	movw	r30, r16
    812e:	a4 80       	ldd	r10, Z+4	; 0x04
    8130:	b5 80       	ldd	r11, Z+5	; 0x05
parseNonQuotedString():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:218

  DeserializationError parseNonQuotedString(const char **result) {
    typename remove_reference<TStringStorage>::type::String str =
        _stringStorage.startString();

    char c = current();
    8132:	c8 01       	movw	r24, r16
    8134:	0e 94 5a 2d 	call	0x5ab4	; 0x5ab4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    8138:	d8 2e       	mov	r13, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:219
    if (c == '\0') return DeserializationError::IncompleteInput;
    813a:	81 11       	cpse	r24, r1
    813c:	1e c0       	rjmp	.+60     	; 0x817a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2b6>
    813e:	aa 24       	eor	r10, r10
    8140:	a3 94       	inc	r10
    8142:	b1 2c       	mov	r11, r1
    8144:	8e cf       	rjmp	.-228    	; 0x8062 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
parseKey():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:168
    }
  }

  DeserializationError parseKey(const char **key) {
    if (isQuote(current())) {
      return parseQuotedString(key);
    8146:	be 01       	movw	r22, r28
    8148:	6f 5f       	subi	r22, 0xFF	; 255
    814a:	7f 4f       	sbci	r23, 0xFF	; 255
    814c:	c8 01       	movw	r24, r16
    814e:	0e 94 6a 2d 	call	0x5ad4	; 0x5ad4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)>
    8152:	5c 01       	movw	r10, r24
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:127
    // Read each key value pair
    for (;;) {
      // Parse key
      const char *key;
      err = parseKey(&key);
      if (err) return err;
    8154:	89 2b       	or	r24, r25
    8156:	09 f0       	breq	.+2      	; 0x815a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x296>
    8158:	84 cf       	rjmp	.-248    	; 0x8062 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:130

      // Skip spaces
      err = skipSpacesAndComments();
    815a:	c8 01       	movw	r24, r16
    815c:	0e 94 c1 2d 	call	0x5b82	; 0x5b82 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    8160:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:131
      if (err) return err;  // Colon
    8162:	89 2b       	or	r24, r25
    8164:	09 f0       	breq	.+2      	; 0x8168 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2a4>
    8166:	7d cf       	rjmp	.-262    	; 0x8062 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    8168:	c8 01       	movw	r24, r16
    816a:	0e 94 5a 2d 	call	0x5ab4	; 0x5ab4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    816e:	8a 33       	cpi	r24, 0x3A	; 58
    8170:	99 f1       	breq	.+102    	; 0x81d8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x314>
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:113

    JsonObject object = variant.to<JsonObject>();
    if (object.isNull()) return DeserializationError::NoMemory;

    // Check opening brace
    if (!eat('{')) return DeserializationError::InvalidInput;
    8172:	72 e0       	ldi	r23, 0x02	; 2
    8174:	a7 2e       	mov	r10, r23
    8176:	b1 2c       	mov	r11, r1
    8178:	74 cf       	rjmp	.-280    	; 0x8062 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
parseNonQuotedString():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:221
        _stringStorage.startString();

    char c = current();
    if (c == '\0') return DeserializationError::IncompleteInput;

    if (canBeInNonQuotedString(c)) {  // no quotes
    817a:	0e 94 42 2d 	call	0x5a84	; 0x5a84 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>
    817e:	88 23       	and	r24, r24
    8180:	c1 f3       	breq	.-16     	; 0x8172 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    8182:	d8 01       	movw	r26, r16
    8184:	18 96       	adiw	r26, 0x08	; 8
    8186:	1c 92       	st	X, r1
    8188:	18 97       	sbiw	r26, 0x08	; 8
_ZN11ArduinoJson9Internals11StringMoverIcE6String6appendEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:18

    void append(char c) {
      *(*_writePtr)++ = TChar(c);
    818a:	14 96       	adiw	r26, 0x04	; 4
    818c:	ed 91       	ld	r30, X+
    818e:	fc 91       	ld	r31, X
    8190:	15 97       	sbiw	r26, 0x05	; 5
    8192:	cf 01       	movw	r24, r30
    8194:	01 96       	adiw	r24, 0x01	; 1
    8196:	15 96       	adiw	r26, 0x05	; 5
    8198:	9c 93       	st	X, r25
    819a:	8e 93       	st	-X, r24
    819c:	14 97       	sbiw	r26, 0x04	; 4
    819e:	d0 82       	st	Z, r13
parseNonQuotedString():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:225

    if (canBeInNonQuotedString(c)) {  // no quotes
      do {
        move();
        str.append(c);
        c = current();
    81a0:	c8 01       	movw	r24, r16
    81a2:	0e 94 5a 2d 	call	0x5ab4	; 0x5ab4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    81a6:	d8 2e       	mov	r13, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:226
      } while (canBeInNonQuotedString(c));
    81a8:	0e 94 42 2d 	call	0x5a84	; 0x5a84 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>
    81ac:	81 11       	cpse	r24, r1
    81ae:	e9 cf       	rjmp	.-46     	; 0x8182 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2be>
c_str():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:22
    }

    const char* c_str() const {
      *(*_writePtr)++ = 0;
    81b0:	d8 01       	movw	r26, r16
    81b2:	14 96       	adiw	r26, 0x04	; 4
    81b4:	ed 91       	ld	r30, X+
    81b6:	fc 91       	ld	r31, X
    81b8:	15 97       	sbiw	r26, 0x05	; 5
    81ba:	cf 01       	movw	r24, r30
    81bc:	01 96       	adiw	r24, 0x01	; 1
    81be:	15 96       	adiw	r26, 0x05	; 5
    81c0:	9c 93       	st	X, r25
    81c2:	8e 93       	st	-X, r24
    81c4:	14 97       	sbiw	r26, 0x04	; 4
    81c6:	10 82       	st	Z, r1
parseNonQuotedString():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:231
    } else {
      return DeserializationError::InvalidInput;
    }

    *result = str.c_str();
    81c8:	ba 82       	std	Y+2, r11	; 0x02
    81ca:	a9 82       	std	Y+1, r10	; 0x01
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:232
    if (*result == NULL) return DeserializationError::NoMemory;
    81cc:	ab 28       	or	r10, r11
    81ce:	29 f6       	brne	.-118    	; 0x815a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x296>
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:110

  DeserializationError parseObject(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;

    JsonObject object = variant.to<JsonObject>();
    if (object.isNull()) return DeserializationError::NoMemory;
    81d0:	e3 e0       	ldi	r30, 0x03	; 3
    81d2:	ae 2e       	mov	r10, r30
    81d4:	b1 2c       	mov	r11, r1
    81d6:	45 cf       	rjmp	.-374    	; 0x8062 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    81d8:	f8 01       	movw	r30, r16
    81da:	10 86       	std	Z+8, r1	; 0x08
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:135
      err = skipSpacesAndComments();
      if (err) return err;  // Colon
      if (!eat(':')) return DeserializationError::InvalidInput;

      // Allocate slot in object
      JsonVariant value = object.set(key);
    81dc:	a9 80       	ldd	r10, Y+1	; 0x01
    81de:	ba 80       	ldd	r11, Y+2	; 0x02
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:342
  template <typename TStringRef>
  FORCE_INLINE JsonVariant set_impl(TStringRef key) {
    if (!_data) return JsonVariant();

    // ignore null key
    if (Internals::makeString(key).is_null()) return JsonVariant();
    81e0:	a1 14       	cp	r10, r1
    81e2:	b1 04       	cpc	r11, r1
    81e4:	d1 f5       	brne	.+116    	; 0x825a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x396>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
    81e6:	90 e0       	ldi	r25, 0x00	; 0
    81e8:	80 e0       	ldi	r24, 0x00	; 0
    81ea:	30 e0       	ldi	r19, 0x00	; 0
    81ec:	20 e0       	ldi	r18, 0x00	; 0
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:135
    81ee:	22 96       	adiw	r28, 0x02	; 2
    81f0:	3f af       	std	Y+63, r19	; 0x3f
    81f2:	22 97       	sbiw	r28, 0x02	; 2
    81f4:	23 96       	adiw	r28, 0x03	; 3
    81f6:	2f af       	std	Y+63, r18	; 0x3f
    81f8:	23 97       	sbiw	r28, 0x03	; 3
    81fa:	25 96       	adiw	r28, 0x05	; 5
    81fc:	9f af       	std	Y+63, r25	; 0x3f
    81fe:	8e af       	std	Y+62, r24	; 0x3e
    8200:	25 97       	sbiw	r28, 0x05	; 5
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:136
      if (value.isInvalid()) return DeserializationError::NoMemory;
    8202:	89 2b       	or	r24, r25
    8204:	29 f3       	breq	.-54     	; 0x81d0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x30c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:139

      // Parse value
      _nestingLimit--;
    8206:	d8 01       	movw	r26, r16
    8208:	16 96       	adiw	r26, 0x06	; 6
    820a:	8c 91       	ld	r24, X
    820c:	16 97       	sbiw	r26, 0x06	; 6
    820e:	81 50       	subi	r24, 0x01	; 1
    8210:	16 96       	adiw	r26, 0x06	; 6
    8212:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:140
      err = parse(value);
    8214:	25 96       	adiw	r28, 0x05	; 5
    8216:	4c ad       	ldd	r20, Y+60	; 0x3c
    8218:	5d ad       	ldd	r21, Y+61	; 0x3d
    821a:	6e ad       	ldd	r22, Y+62	; 0x3e
    821c:	7f ad       	ldd	r23, Y+63	; 0x3f
    821e:	25 97       	sbiw	r28, 0x05	; 5
    8220:	c8 01       	movw	r24, r16
    8222:	0e 94 62 3f 	call	0x7ec4	; 0x7ec4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>
    8226:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:141
      _nestingLimit++;
    8228:	f8 01       	movw	r30, r16
    822a:	86 81       	ldd	r24, Z+6	; 0x06
    822c:	8f 5f       	subi	r24, 0xFF	; 255
    822e:	86 83       	std	Z+6, r24	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:142
      if (err) return err;
    8230:	a1 14       	cp	r10, r1
    8232:	b1 04       	cpc	r11, r1
    8234:	09 f0       	breq	.+2      	; 0x8238 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x374>
    8236:	15 cf       	rjmp	.-470    	; 0x8062 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:145

      // Skip spaces
      err = skipSpacesAndComments();
    8238:	c8 01       	movw	r24, r16
    823a:	0e 94 c1 2d 	call	0x5b82	; 0x5b82 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    823e:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:146
      if (err) return err;
    8240:	89 2b       	or	r24, r25
    8242:	09 f0       	breq	.+2      	; 0x8246 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x382>
    8244:	0e cf       	rjmp	.-484    	; 0x8062 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    8246:	c8 01       	movw	r24, r16
    8248:	0e 94 5a 2d 	call	0x5ab4	; 0x5ab4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    824c:	8d 37       	cpi	r24, 0x7D	; 125
    824e:	09 f0       	breq	.+2      	; 0x8252 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x38e>
    8250:	3f c0       	rjmp	.+126    	; 0x82d0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x40c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    8252:	d8 01       	movw	r26, r16
    8254:	18 96       	adiw	r26, 0x08	; 8
    8256:	1c 92       	st	X, r1
    8258:	04 cf       	rjmp	.-504    	; 0x8062 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:345

    // search a matching key
    Internals::Slot* slot = findSlot<TStringRef>(key);
    825a:	b5 01       	movw	r22, r10
    825c:	c4 01       	movw	r24, r8
    825e:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.17]>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:346
    if (!slot) {
    8262:	00 97       	sbiw	r24, 0x00	; 0
    8264:	49 f5       	brne	.+82     	; 0x82b8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3f4>
operator new():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Memory/AllocableInMemoryPool.hpp:15
    8266:	d3 01       	movw	r26, r6
    8268:	ed 91       	ld	r30, X+
    826a:	fc 91       	ld	r31, X
    826c:	01 90       	ld	r0, Z+
    826e:	f0 81       	ld	r31, Z
    8270:	e0 2d       	mov	r30, r0
    8272:	6c e0       	ldi	r22, 0x0C	; 12
    8274:	70 e0       	ldi	r23, 0x00	; 0
    8276:	c3 01       	movw	r24, r6
    8278:	19 95       	eicall
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:348
      // add the key
      slot = new (_memoryPool) Internals::Slot();
    827a:	00 97       	sbiw	r24, 0x00	; 0
    827c:	09 f4       	brne	.+2      	; 0x8280 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3bc>
    827e:	b3 cf       	rjmp	.-154    	; 0x81e6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x322>
    8280:	fc 01       	movw	r30, r24
    8282:	25 2d       	mov	r18, r5
    8284:	11 92       	st	Z+, r1
    8286:	2a 95       	dec	r18
    8288:	e9 f7       	brne	.-6      	; 0x8284 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3c0>
_ZN11ArduinoJson9Internals15JsonVariantDataC2Ev():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:20
struct JsonVariantData {
  JsonVariantType type;
  JsonVariantContent content;

  JsonVariantData() {
    type = JSON_NULL;
    828a:	dc 01       	movw	r26, r24
    828c:	1d 92       	st	X+, r1
    828e:	1c 92       	st	X, r1
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:353
      if (!slot) return JsonVariant();

      slot->next = 0;

      if (_data->tail) {
    8290:	d7 01       	movw	r26, r14
    8292:	14 96       	adiw	r26, 0x04	; 4
    8294:	ed 91       	ld	r30, X+
    8296:	fc 91       	ld	r31, X
    8298:	15 97       	sbiw	r26, 0x05	; 5
    829a:	30 97       	sbiw	r30, 0x00	; 0
    829c:	81 f0       	breq	.+32     	; 0x82be <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3fa>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:354
        slot->prev = _data->tail;
    829e:	dc 01       	movw	r26, r24
    82a0:	19 96       	adiw	r26, 0x09	; 9
    82a2:	fc 93       	st	X, r31
    82a4:	ee 93       	st	-X, r30
    82a6:	18 97       	sbiw	r26, 0x08	; 8
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:355
        _data->tail->next = slot;
    82a8:	97 83       	std	Z+7, r25	; 0x07
    82aa:	86 83       	std	Z+6, r24	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:356
        _data->tail = slot;
    82ac:	f7 01       	movw	r30, r14
    82ae:	95 83       	std	Z+5, r25	; 0x05
    82b0:	84 83       	std	Z+4, r24	; 0x04
_ZN11ArduinoJson10JsonObject7set_keyEPNS_9Internals4SlotEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:370

    return JsonVariant(_memoryPool, &slot->value);
  }

  FORCE_INLINE bool set_key(Internals::Slot* slot, const char* key) {
    slot->key = key;
    82b2:	fc 01       	movw	r30, r24
    82b4:	b3 86       	std	Z+11, r11	; 0x0b
    82b6:	a2 86       	std	Z+10, r10	; 0x0a
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:87
  return JsonObject(_memoryPool, _data->toObject());
    82b8:	36 2d       	mov	r19, r6
    82ba:	27 2d       	mov	r18, r7
    82bc:	98 cf       	rjmp	.-208    	; 0x81ee <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x32a>
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:359
        slot->prev = _data->tail;
        _data->tail->next = slot;
        _data->tail = slot;
      } else {
        slot->prev = 0;
        _data->head = slot;
    82be:	13 96       	adiw	r26, 0x03	; 3
    82c0:	9c 93       	st	X, r25
    82c2:	8e 93       	st	-X, r24
    82c4:	12 97       	sbiw	r26, 0x02	; 2
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:360
        _data->tail = slot;
    82c6:	15 96       	adiw	r26, 0x05	; 5
    82c8:	9c 93       	st	X, r25
    82ca:	8e 93       	st	-X, r24
    82cc:	14 97       	sbiw	r26, 0x04	; 4
    82ce:	f1 cf       	rjmp	.-30     	; 0x82b2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3ee>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    82d0:	c8 01       	movw	r24, r16
    82d2:	0e 94 5a 2d 	call	0x5ab4	; 0x5ab4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    82d6:	8c 32       	cpi	r24, 0x2C	; 44
    82d8:	09 f0       	breq	.+2      	; 0x82dc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x418>
    82da:	4b cf       	rjmp	.-362    	; 0x8172 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    82dc:	f8 01       	movw	r30, r16
    82de:	10 86       	std	Z+8, r1	; 0x08
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:153
      // More keys/values?
      if (eat('}')) return DeserializationError::Ok;
      if (!eat(',')) return DeserializationError::InvalidInput;

      // Skip spaces
      err = skipSpacesAndComments();
    82e0:	c8 01       	movw	r24, r16
    82e2:	0e 94 c1 2d 	call	0x5b82	; 0x5b82 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    82e6:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:154
      if (err) return err;
    82e8:	89 2b       	or	r24, r25
    82ea:	09 f4       	brne	.+2      	; 0x82ee <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x42a>
    82ec:	18 cf       	rjmp	.-464    	; 0x811e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x25a>
    82ee:	b9 ce       	rjmp	.-654    	; 0x8062 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:107
      if (!eat(',')) return DeserializationError::InvalidInput;
    }
  }

  DeserializationError parseObject(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
    82f0:	f5 e0       	ldi	r31, 0x05	; 5
    82f2:	af 2e       	mov	r10, r31
    82f4:	b1 2c       	mov	r11, r1
    82f6:	b5 ce       	rjmp	.-662    	; 0x8062 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE16parseStringValueENS_11JsonVariantE.isra.25():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:176
    }
  }

  DeserializationError parseStringValue(JsonVariant variant) {
    const char *value;
    DeserializationError err = parseQuotedString(&value);
    82f8:	be 01       	movw	r22, r28
    82fa:	6f 5f       	subi	r22, 0xFF	; 255
    82fc:	7f 4f       	sbci	r23, 0xFF	; 255
    82fe:	c8 01       	movw	r24, r16
    8300:	0e 94 6a 2d 	call	0x5ad4	; 0x5ad4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:177
    if (err) return err;
    8304:	00 97       	sbiw	r24, 0x00	; 0
    8306:	09 f0       	breq	.+2      	; 0x830a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x446>
    8308:	ad ce       	rjmp	.-678    	; 0x8064 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1a0>
_ZN11ArduinoJson11JsonVariant3setEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:154
    }
  }

  // set(const char*);
  FORCE_INLINE bool set(const char *value) {
    if (!_data) return false;
    830a:	e1 14       	cp	r14, r1
    830c:	f1 04       	cpc	r15, r1
    830e:	61 f0       	breq	.+24     	; 0x8328 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE16parseStringValueENS_11JsonVariantE.isra.25():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:178
    variant.set(value);
    8310:	89 81       	ldd	r24, Y+1	; 0x01
    8312:	9a 81       	ldd	r25, Y+2	; 0x02
_ZN11ArduinoJson9Internals15JsonVariantData15setLinkedStringEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:49
    type = JSON_OWNED_STRING;
    content.asString = value;
  }

  void setLinkedString(const char *value) {
    type = JSON_LINKED_STRING;
    8314:	23 e0       	ldi	r18, 0x03	; 3
    8316:	30 e0       	ldi	r19, 0x00	; 0
    8318:	d7 01       	movw	r26, r14
    831a:	11 96       	adiw	r26, 0x01	; 1
    831c:	3c 93       	st	X, r19
    831e:	2e 93       	st	-X, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:50
    content.asString = value;
    8320:	13 96       	adiw	r26, 0x03	; 3
    8322:	9c 93       	st	X, r25
    8324:	8e 93       	st	-X, r24
    8326:	12 97       	sbiw	r26, 0x02	; 2
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:261
    } else if (!strcmp(buffer, "null")) {
      // already null
    } else {
      return DeserializationError::InvalidInput;
    }
    return DeserializationError::Ok;
    8328:	90 e0       	ldi	r25, 0x00	; 0
    832a:	80 e0       	ldi	r24, 0x00	; 0
    832c:	9b ce       	rjmp	.-714    	; 0x8064 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1a0>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:246
    while (canBeInNonQuotedString(c) && n < 63) {
      move();
      buffer[n++] = c;
      c = current();
    }
    buffer[n] = 0;
    832e:	e1 e0       	ldi	r30, 0x01	; 1
    8330:	f0 e0       	ldi	r31, 0x00	; 0
    8332:	ec 0f       	add	r30, r28
    8334:	fd 1f       	adc	r31, r29
    8336:	ed 0d       	add	r30, r13
    8338:	f1 1d       	adc	r31, r1
    833a:	10 82       	st	Z, r1
isInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:13

namespace ArduinoJson {
namespace Internals {

inline bool isInteger(const char* s) {
  if (!s || !*s) return false;
    833c:	19 81       	ldd	r17, Y+1	; 0x01
    833e:	11 23       	and	r17, r17
    8340:	09 f4       	brne	.+2      	; 0x8344 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x480>
    8342:	51 c0       	rjmp	.+162    	; 0x83e6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x522>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:14
  if (issign(*s)) s++;
    8344:	fe 01       	movw	r30, r28
issign():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:15
inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
}

inline bool issign(char c) {
  return '-' == c || c == '+';
    8346:	1d 32       	cpi	r17, 0x2D	; 45
    8348:	71 f1       	breq	.+92     	; 0x83a6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4e2>
    834a:	1b 32       	cpi	r17, 0x2B	; 43
    834c:	61 f1       	breq	.+88     	; 0x83a6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4e2>
    834e:	31 96       	adiw	r30, 0x01	; 1
isInteger():
  while (isdigit(*s)) s++;
    8350:	81 91       	ld	r24, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11

namespace ArduinoJson {
namespace Internals {

inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
    8352:	90 ed       	ldi	r25, 0xD0	; 208
    8354:	98 0f       	add	r25, r24
isInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:15
    8356:	9a 30       	cpi	r25, 0x0A	; 10
    8358:	d8 f3       	brcs	.-10     	; 0x8350 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x48c>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:248

    if (isInteger(buffer)) {
    835a:	81 11       	cpse	r24, r1
    835c:	44 c0       	rjmp	.+136    	; 0x83e6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x522>
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"
    835e:	14 37       	cpi	r17, 0x74	; 116
    8360:	09 f4       	brne	.+2      	; 0x8364 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4a0>
    8362:	dd c1       	rjmp	.+954    	; 0x871e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x85a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  T result = 0;
  bool negative_result = false;

  switch (*s) {
    8364:	1b 32       	cpi	r17, 0x2B	; 43
    8366:	09 f1       	breq	.+66     	; 0x83aa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4e6>
    8368:	1d 32       	cpi	r17, 0x2D	; 45
    836a:	19 f1       	breq	.+70     	; 0x83b2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4ee>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
    836c:	10 e0       	ldi	r17, 0x00	; 0
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  switch (*s) {
    836e:	fe 01       	movw	r30, r28
    8370:	31 96       	adiw	r30, 0x01	; 1
    8372:	20 e0       	ldi	r18, 0x00	; 0
    8374:	30 e0       	ldi	r19, 0x00	; 0
    8376:	a9 01       	movw	r20, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
    8378:	01 91       	ld	r16, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    837a:	80 ed       	ldi	r24, 0xD0	; 208
    837c:	80 0f       	add	r24, r16
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    837e:	8a 30       	cpi	r24, 0x0A	; 10
    8380:	d0 f4       	brcc	.+52     	; 0x83b6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4f2>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
    result = T(result * 10 + T(*s - '0'));
    8382:	aa e0       	ldi	r26, 0x0A	; 10
    8384:	b0 e0       	ldi	r27, 0x00	; 0
    8386:	0e 94 72 8a 	call	0x114e4	; 0x114e4 <__muluhisi3>
    838a:	20 2f       	mov	r18, r16
    838c:	00 0f       	add	r16, r16
    838e:	33 0b       	sbc	r19, r19
    8390:	20 53       	subi	r18, 0x30	; 48
    8392:	31 09       	sbc	r19, r1
    8394:	03 2e       	mov	r0, r19
    8396:	00 0c       	add	r0, r0
    8398:	44 0b       	sbc	r20, r20
    839a:	55 0b       	sbc	r21, r21
    839c:	26 0f       	add	r18, r22
    839e:	37 1f       	adc	r19, r23
    83a0:	48 1f       	adc	r20, r24
    83a2:	59 1f       	adc	r21, r25
    83a4:	e9 cf       	rjmp	.-46     	; 0x8378 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4b4>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:14
namespace ArduinoJson {
namespace Internals {

inline bool isInteger(const char* s) {
  if (!s || !*s) return false;
  if (issign(*s)) s++;
    83a6:	32 96       	adiw	r30, 0x02	; 2
    83a8:	d3 cf       	rjmp	.-90     	; 0x8350 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x48c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
    83aa:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:26

  switch (*s) {
    case '-':
      negative_result = true;
      s++;
    83ac:	fe 01       	movw	r30, r28
    83ae:	32 96       	adiw	r30, 0x02	; 2
    83b0:	e0 cf       	rjmp	.-64     	; 0x8372 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4ae>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:25
  T result = 0;
  bool negative_result = false;

  switch (*s) {
    case '-':
      negative_result = true;
    83b2:	11 e0       	ldi	r17, 0x01	; 1
    83b4:	fb cf       	rjmp	.-10     	; 0x83ac <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4e8>
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    83b6:	11 23       	and	r17, r17
    83b8:	09 f4       	brne	.+2      	; 0x83bc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4f8>
    83ba:	b5 c1       	rjmp	.+874    	; 0x8726 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x862>
_ZN11ArduinoJson11JsonVariant3setIlEEbT_PNS_9Internals9enable_ifIXaasrNS3_11is_integralIS2_EE5valuesrNS3_9is_signedIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:70
  FORCE_INLINE bool set(
      T value,
      typename Internals::enable_if<Internals::is_integral<T>::value &&
                                    Internals::is_signed<T>::value>::type * =
          0) {
    if (!_data) return false;
    83bc:	e1 14       	cp	r14, r1
    83be:	f1 04       	cpc	r15, r1
    83c0:	09 f4       	brne	.+2      	; 0x83c4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x500>
    83c2:	b2 cf       	rjmp	.-156    	; 0x8328 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals15JsonVariantData18setNegativeIntegerEm():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:34
    type = JSON_FLOAT;
    content.asFloat = value;
  }

  void setNegativeInteger(JsonUInt value) {
    type = JSON_NEGATIVE_INTEGER;
    83c4:	87 e0       	ldi	r24, 0x07	; 7
    83c6:	90 e0       	ldi	r25, 0x00	; 0
_ZN11ArduinoJson11JsonVariant3setIlEEbT_PNS_9Internals9enable_ifIXaasrNS3_11is_integralIS2_EE5valuesrNS3_9is_signedIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:71
    if (value >= 0)
    83c8:	21 15       	cp	r18, r1
    83ca:	31 05       	cpc	r19, r1
    83cc:	41 05       	cpc	r20, r1
    83ce:	51 05       	cpc	r21, r1
    83d0:	11 f4       	brne	.+4      	; 0x83d6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x512>
_ZN11ArduinoJson9Internals15JsonVariantData17setPostiveIntegerEm():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:39
    content.asInteger = value;
  }

  void setPostiveInteger(JsonUInt value) {
    type = JSON_POSITIVE_INTEGER;
    83d2:	86 e0       	ldi	r24, 0x06	; 6
    83d4:	90 e0       	ldi	r25, 0x00	; 0
_ZN11ArduinoJson9Internals15JsonVariantData18setNegativeIntegerEm():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:34
    type = JSON_FLOAT;
    content.asFloat = value;
  }

  void setNegativeInteger(JsonUInt value) {
    type = JSON_NEGATIVE_INTEGER;
    83d6:	f7 01       	movw	r30, r14
    83d8:	91 83       	std	Z+1, r25	; 0x01
    83da:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:35
    content.asInteger = value;
    83dc:	22 83       	std	Z+2, r18	; 0x02
    83de:	33 83       	std	Z+3, r19	; 0x03
    83e0:	44 83       	std	Z+4, r20	; 0x04
    83e2:	55 83       	std	Z+5, r21	; 0x05
    83e4:	a1 cf       	rjmp	.-190    	; 0x8328 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:16
namespace Internals {

inline bool isFloat(const char* s) {
  if (!s) return false;

  if (!strcmp(s, "NaN")) return true;
    83e6:	61 e0       	ldi	r22, 0x01	; 1
    83e8:	73 e0       	ldi	r23, 0x03	; 3
    83ea:	ce 01       	movw	r24, r28
    83ec:	01 96       	adiw	r24, 0x01	; 1
    83ee:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
    83f2:	89 2b       	or	r24, r25
    83f4:	09 f4       	brne	.+2      	; 0x83f8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x534>
    83f6:	46 c0       	rjmp	.+140    	; 0x8484 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5c0>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:17
  if (issign(*s)) s++;
    83f8:	5e 01       	movw	r10, r28
    83fa:	f2 e0       	ldi	r31, 0x02	; 2
    83fc:	af 0e       	add	r10, r31
    83fe:	b1 1c       	adc	r11, r1
issign():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:15
}

inline bool issign(char c) {
  return '-' == c || c == '+';
    8400:	1d 32       	cpi	r17, 0x2D	; 45
    8402:	49 f0       	breq	.+18     	; 0x8416 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x552>
    8404:	fe 01       	movw	r30, r28
    8406:	31 96       	adiw	r30, 0x01	; 1
    8408:	5f 01       	movw	r10, r30
    840a:	1b 32       	cpi	r17, 0x2B	; 43
    840c:	21 f4       	brne	.+8      	; 0x8416 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x552>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:17
    840e:	5e 01       	movw	r10, r28
    8410:	22 e0       	ldi	r18, 0x02	; 2
    8412:	a2 0e       	add	r10, r18
    8414:	b1 1c       	adc	r11, r1
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:18
  if (!strcmp(s, "Infinity")) return true;
    8416:	65 e0       	ldi	r22, 0x05	; 5
    8418:	73 e0       	ldi	r23, 0x03	; 3
    841a:	c5 01       	movw	r24, r10
    841c:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
    8420:	89 2b       	or	r24, r25
    8422:	81 f1       	breq	.+96     	; 0x8484 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5c0>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:19
  if (*s == '\0') return false;
    8424:	d5 01       	movw	r26, r10
    8426:	8c 91       	ld	r24, X
    8428:	88 23       	and	r24, r24
    842a:	09 f4       	brne	.+2      	; 0x842e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x56a>
    842c:	3b c1       	rjmp	.+630    	; 0x86a4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7e0>
    842e:	fd 01       	movw	r30, r26
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:21

  while (isdigit(*s)) s++;
    8430:	8d 91       	ld	r24, X+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11

namespace ArduinoJson {
namespace Internals {

inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
    8432:	90 ed       	ldi	r25, 0xD0	; 208
    8434:	98 0f       	add	r25, r24
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:21
    8436:	9a 30       	cpi	r25, 0x0A	; 10
    8438:	d0 f3       	brcs	.-12     	; 0x842e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x56a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:23

  if (*s == '.') {
    843a:	8e 32       	cpi	r24, 0x2E	; 46
    843c:	41 f4       	brne	.+16     	; 0x844e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x58a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:24
    s++;
    843e:	9d 01       	movw	r18, r26
    8440:	f9 01       	movw	r30, r18
    8442:	2f 5f       	subi	r18, 0xFF	; 255
    8444:	3f 4f       	sbci	r19, 0xFF	; 255
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    8446:	80 81       	ld	r24, Z
    8448:	80 53       	subi	r24, 0x30	; 48
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:25
    while (isdigit(*s)) s++;
    844a:	8a 30       	cpi	r24, 0x0A	; 10
    844c:	c8 f3       	brcs	.-14     	; 0x8440 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x57c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:28
  }

  if (*s == 'e' || *s == 'E') {
    844e:	80 81       	ld	r24, Z
    8450:	8f 7d       	andi	r24, 0xDF	; 223
    8452:	85 34       	cpi	r24, 0x45	; 69
    8454:	a1 f4       	brne	.+40     	; 0x847e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5ba>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:30
    s++;
    if (issign(*s)) s++;
    8456:	81 81       	ldd	r24, Z+1	; 0x01
issign():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:15
}

inline bool issign(char c) {
  return '-' == c || c == '+';
    8458:	8d 32       	cpi	r24, 0x2D	; 45
    845a:	09 f4       	brne	.+2      	; 0x845e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x59a>
    845c:	57 c0       	rjmp	.+174    	; 0x850c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x648>
    845e:	8b 32       	cpi	r24, 0x2B	; 43
    8460:	09 f4       	brne	.+2      	; 0x8464 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5a0>
    8462:	54 c0       	rjmp	.+168    	; 0x850c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x648>
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:29
    s++;
    while (isdigit(*s)) s++;
  }

  if (*s == 'e' || *s == 'E') {
    s++;
    8464:	31 96       	adiw	r30, 0x01	; 1
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11

namespace ArduinoJson {
namespace Internals {

inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
    8466:	80 81       	ld	r24, Z
    8468:	80 53       	subi	r24, 0x30	; 48
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:31
    if (issign(*s)) s++;
    if (!isdigit(*s)) return false;
    846a:	8a 30       	cpi	r24, 0x0A	; 10
    846c:	08 f0       	brcs	.+2      	; 0x8470 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5ac>
    846e:	1a c1       	rjmp	.+564    	; 0x86a4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7e0>
    8470:	cf 01       	movw	r24, r30
    8472:	fc 01       	movw	r30, r24
    8474:	01 96       	adiw	r24, 0x01	; 1
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    8476:	20 81       	ld	r18, Z
    8478:	20 53       	subi	r18, 0x30	; 48
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:32
    while (isdigit(*s)) s++;
    847a:	2a 30       	cpi	r18, 0x0A	; 10
    847c:	d0 f3       	brcs	.-12     	; 0x8472 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5ae>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:250
      result.set(parseInteger<JsonInteger>(buffer));
    } else if (isFloat(buffer)) {
    847e:	80 81       	ld	r24, Z
    8480:	81 11       	cpse	r24, r1
    8482:	10 c1       	rjmp	.+544    	; 0x86a4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7e0>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:23
  typedef typename traits::exponent_type exponent_t;

  if (!s) return 0;  // NULL

  bool negative_result = false;
  switch (*s) {
    8484:	1b 32       	cpi	r17, 0x2B	; 43
    8486:	09 f4       	brne	.+2      	; 0x848a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5c6>
    8488:	43 c0       	rjmp	.+134    	; 0x8510 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x64c>
    848a:	1d 32       	cpi	r17, 0x2D	; 45
    848c:	09 f0       	breq	.+2      	; 0x8490 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5cc>
    848e:	47 c0       	rjmp	.+142    	; 0x851e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x65a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:26
    case '-':
      negative_result = true;
      s++;
    8490:	1a 81       	ldd	r17, Y+2	; 0x02
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:25
  if (!s) return 0;  // NULL

  bool negative_result = false;
  switch (*s) {
    case '-':
      negative_result = true;
    8492:	dd 24       	eor	r13, r13
    8494:	d3 94       	inc	r13
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:26
      s++;
    8496:	5e 01       	movw	r10, r28
    8498:	b2 e0       	ldi	r27, 0x02	; 2
    849a:	ab 0e       	add	r10, r27
    849c:	b1 1c       	adc	r11, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:33
    case '+':
      s++;
      break;
  }

  if (*s == 't') return 1;  // true
    849e:	60 e0       	ldi	r22, 0x00	; 0
    84a0:	70 e0       	ldi	r23, 0x00	; 0
    84a2:	80 e8       	ldi	r24, 0x80	; 128
    84a4:	9f e3       	ldi	r25, 0x3F	; 63
parseFloat():
    84a6:	14 37       	cpi	r17, 0x74	; 116
    84a8:	09 f4       	brne	.+2      	; 0x84ac <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5e8>
    84aa:	d2 c0       	rjmp	.+420    	; 0x8650 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:34
  if (*s == 'n' || *s == 'N') return traits::nan();
    84ac:	1f 7d       	andi	r17, 0xDF	; 223
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
    84ae:	60 e0       	ldi	r22, 0x00	; 0
    84b0:	70 e0       	ldi	r23, 0x00	; 0
    84b2:	80 ec       	ldi	r24, 0xC0	; 192
    84b4:	9f e7       	ldi	r25, 0x7F	; 127
parseFloat():
    84b6:	1e 34       	cpi	r17, 0x4E	; 78
    84b8:	09 f4       	brne	.+2      	; 0x84bc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5f8>
    84ba:	ca c0       	rjmp	.+404    	; 0x8650 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:35
  if (*s == 'i' || *s == 'I')
    84bc:	19 34       	cpi	r17, 0x49	; 73
    84be:	09 f4       	brne	.+2      	; 0x84c2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5fe>
    84c0:	97 c0       	rjmp	.+302    	; 0x85f0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x72c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:39
    return negative_result ? -traits::inf() : traits::inf();

  mantissa_t mantissa = 0;
  exponent_t exponent_offset = 0;
    84c2:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:38
  if (*s == 't') return 1;  // true
  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return negative_result ? -traits::inf() : traits::inf();

  mantissa_t mantissa = 0;
    84c4:	20 e0       	ldi	r18, 0x00	; 0
    84c6:	30 e0       	ldi	r19, 0x00	; 0
    84c8:	a9 01       	movw	r20, r18
    84ca:	f5 01       	movw	r30, r10
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:41
  exponent_t exponent_offset = 0;

  while (isdigit(*s)) {
    84cc:	d5 01       	movw	r26, r10
    84ce:	1d 91       	ld	r17, X+
    84d0:	5d 01       	movw	r10, r26
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    84d2:	80 ed       	ldi	r24, 0xD0	; 208
    84d4:	81 0f       	add	r24, r17
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:41
    84d6:	8a 30       	cpi	r24, 0x0A	; 10
    84d8:	48 f5       	brcc	.+82     	; 0x852c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x668>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:42
    if (mantissa < traits::mantissa_max / 10)
    84da:	2c 3c       	cpi	r18, 0xCC	; 204
    84dc:	bc ec       	ldi	r27, 0xCC	; 204
    84de:	3b 07       	cpc	r19, r27
    84e0:	bc e0       	ldi	r27, 0x0C	; 12
    84e2:	4b 07       	cpc	r20, r27
    84e4:	51 05       	cpc	r21, r1
    84e6:	04 f5       	brge	.+64     	; 0x8528 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x664>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:43
      mantissa = mantissa * 10 + (*s - '0');
    84e8:	aa e0       	ldi	r26, 0x0A	; 10
    84ea:	b0 e0       	ldi	r27, 0x00	; 0
    84ec:	0e 94 72 8a 	call	0x114e4	; 0x114e4 <__muluhisi3>
    84f0:	21 2f       	mov	r18, r17
    84f2:	11 0f       	add	r17, r17
    84f4:	33 0b       	sbc	r19, r19
    84f6:	20 53       	subi	r18, 0x30	; 48
    84f8:	31 09       	sbc	r19, r1
    84fa:	03 2e       	mov	r0, r19
    84fc:	00 0c       	add	r0, r0
    84fe:	44 0b       	sbc	r20, r20
    8500:	55 0b       	sbc	r21, r21
    8502:	26 0f       	add	r18, r22
    8504:	37 1f       	adc	r19, r23
    8506:	48 1f       	adc	r20, r24
    8508:	59 1f       	adc	r21, r25
    850a:	df cf       	rjmp	.-66     	; 0x84ca <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x606>
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:30
    while (isdigit(*s)) s++;
  }

  if (*s == 'e' || *s == 'E') {
    s++;
    if (issign(*s)) s++;
    850c:	32 96       	adiw	r30, 0x02	; 2
    850e:	ab cf       	rjmp	.-170    	; 0x8466 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5a2>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
    8510:	1a 81       	ldd	r17, Y+2	; 0x02
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:22
  typedef typename traits::mantissa_type mantissa_t;
  typedef typename traits::exponent_type exponent_t;

  if (!s) return 0;  // NULL

  bool negative_result = false;
    8512:	d1 2c       	mov	r13, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
    8514:	5e 01       	movw	r10, r28
    8516:	e2 e0       	ldi	r30, 0x02	; 2
    8518:	ae 0e       	add	r10, r30
    851a:	b1 1c       	adc	r11, r1
    851c:	c0 cf       	rjmp	.-128    	; 0x849e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5da>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:22
  typedef typename traits::mantissa_type mantissa_t;
  typedef typename traits::exponent_type exponent_t;

  if (!s) return 0;  // NULL

  bool negative_result = false;
    851e:	d1 2c       	mov	r13, r1
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:23
  switch (*s) {
    8520:	ce 01       	movw	r24, r28
    8522:	01 96       	adiw	r24, 0x01	; 1
    8524:	5c 01       	movw	r10, r24
    8526:	bb cf       	rjmp	.-138    	; 0x849e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5da>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:45

  while (isdigit(*s)) {
    if (mantissa < traits::mantissa_max / 10)
      mantissa = mantissa * 10 + (*s - '0');
    else
      exponent_offset++;
    8528:	0f 5f       	subi	r16, 0xFF	; 255
    852a:	cf cf       	rjmp	.-98     	; 0x84ca <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x606>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:49
    s++;
  }

  if (*s == '.') {
    852c:	1e 32       	cpi	r17, 0x2E	; 46
    852e:	31 f5       	brne	.+76     	; 0x857c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6b8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:50
    s++;
    8530:	5f 01       	movw	r10, r30
    8532:	8f ef       	ldi	r24, 0xFF	; 255
    8534:	a8 1a       	sub	r10, r24
    8536:	b8 0a       	sbc	r11, r24
    8538:	f5 01       	movw	r30, r10
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:51
    while (isdigit(*s)) {
    853a:	d5 01       	movw	r26, r10
    853c:	1d 91       	ld	r17, X+
    853e:	5d 01       	movw	r10, r26
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    8540:	80 ed       	ldi	r24, 0xD0	; 208
    8542:	81 0f       	add	r24, r17
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:51
    8544:	8a 30       	cpi	r24, 0x0A	; 10
    8546:	d0 f4       	brcc	.+52     	; 0x857c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6b8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:52
      if (mantissa < traits::mantissa_max / 10) {
    8548:	2c 3c       	cpi	r18, 0xCC	; 204
    854a:	bc ec       	ldi	r27, 0xCC	; 204
    854c:	3b 07       	cpc	r19, r27
    854e:	bc e0       	ldi	r27, 0x0C	; 12
    8550:	4b 07       	cpc	r20, r27
    8552:	51 05       	cpc	r21, r1
    8554:	8c f7       	brge	.-30     	; 0x8538 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x674>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:53
        mantissa = mantissa * 10 + (*s - '0');
    8556:	aa e0       	ldi	r26, 0x0A	; 10
    8558:	b0 e0       	ldi	r27, 0x00	; 0
    855a:	0e 94 72 8a 	call	0x114e4	; 0x114e4 <__muluhisi3>
    855e:	21 2f       	mov	r18, r17
    8560:	11 0f       	add	r17, r17
    8562:	33 0b       	sbc	r19, r19
    8564:	20 53       	subi	r18, 0x30	; 48
    8566:	31 09       	sbc	r19, r1
    8568:	03 2e       	mov	r0, r19
    856a:	00 0c       	add	r0, r0
    856c:	44 0b       	sbc	r20, r20
    856e:	55 0b       	sbc	r21, r21
    8570:	26 0f       	add	r18, r22
    8572:	37 1f       	adc	r19, r23
    8574:	48 1f       	adc	r20, r24
    8576:	59 1f       	adc	r21, r25
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:54
        exponent_offset--;
    8578:	01 50       	subi	r16, 0x01	; 1
    857a:	de cf       	rjmp	.-68     	; 0x8538 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x674>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:61
      s++;
    }
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    857c:	80 81       	ld	r24, Z
    857e:	8f 7d       	andi	r24, 0xDF	; 223
    8580:	00 2e       	mov	r0, r16
    8582:	00 0c       	add	r0, r0
    8584:	11 0b       	sbc	r17, r17
    8586:	85 34       	cpi	r24, 0x45	; 69
    8588:	09 f0       	breq	.+2      	; 0x858c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6c8>
    858a:	70 c0       	rjmp	.+224    	; 0x866c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7a8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:64
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
    858c:	81 81       	ldd	r24, Z+1	; 0x01
    858e:	8d 32       	cpi	r24, 0x2D	; 45
    8590:	41 f5       	brne	.+80     	; 0x85e2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x71e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:66
      negative_exponent = true;
      s++;
    8592:	32 96       	adiw	r30, 0x02	; 2
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:65
  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
      negative_exponent = true;
    8594:	b1 e0       	ldi	r27, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:63
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    bool negative_exponent = false;
    8596:	90 e0       	ldi	r25, 0x00	; 0
    8598:	80 e0       	ldi	r24, 0x00	; 0
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:72
    } else if (*s == '+') {
      s++;
    }

    while (isdigit(*s)) {
      exponent = exponent * 10 + (*s - '0');
    859a:	6a e0       	ldi	r22, 0x0A	; 10
    859c:	b6 2e       	mov	r11, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:71
      s++;
    } else if (*s == '+') {
      s++;
    }

    while (isdigit(*s)) {
    859e:	a1 91       	ld	r26, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    85a0:	60 ed       	ldi	r22, 0xD0	; 208
    85a2:	6a 0f       	add	r22, r26
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:71
    85a4:	6a 30       	cpi	r22, 0x0A	; 10
    85a6:	78 f5       	brcc	.+94     	; 0x8606 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x742>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:72
      exponent = exponent * 10 + (*s - '0');
    85a8:	b8 9e       	mul	r11, r24
    85aa:	b0 01       	movw	r22, r0
    85ac:	b9 9e       	mul	r11, r25
    85ae:	70 0d       	add	r23, r0
    85b0:	11 24       	eor	r1, r1
    85b2:	8a 2f       	mov	r24, r26
    85b4:	aa 0f       	add	r26, r26
    85b6:	99 0b       	sbc	r25, r25
    85b8:	c0 97       	sbiw	r24, 0x30	; 48
    85ba:	86 0f       	add	r24, r22
    85bc:	97 1f       	adc	r25, r23
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:73
      if (exponent + exponent_offset > traits::exponent_max) {
    85be:	b8 01       	movw	r22, r16
    85c0:	68 0f       	add	r22, r24
    85c2:	79 1f       	adc	r23, r25
    85c4:	67 32       	cpi	r22, 0x27	; 39
    85c6:	71 05       	cpc	r23, r1
    85c8:	54 f3       	brlt	.-44     	; 0x859e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6da>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:74
        if (negative_exponent)
    85ca:	bb 23       	and	r27, r27
    85cc:	89 f0       	breq	.+34     	; 0x85f0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x72c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:75
          return negative_result ? -0.0f : 0.0f;
    85ce:	60 e0       	ldi	r22, 0x00	; 0
    85d0:	70 e0       	ldi	r23, 0x00	; 0
    85d2:	80 e0       	ldi	r24, 0x00	; 0
    85d4:	90 e8       	ldi	r25, 0x80	; 128
parseFloat():
    85d6:	d1 10       	cpse	r13, r1
    85d8:	3b c0       	rjmp	.+118    	; 0x8650 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
    85da:	60 e0       	ldi	r22, 0x00	; 0
    85dc:	70 e0       	ldi	r23, 0x00	; 0
    85de:	cb 01       	movw	r24, r22
    85e0:	37 c0       	rjmp	.+110    	; 0x8650 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:67
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
      negative_exponent = true;
      s++;
    } else if (*s == '+') {
    85e2:	8b 32       	cpi	r24, 0x2B	; 43
    85e4:	19 f0       	breq	.+6      	; 0x85ec <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x728>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:62
    }
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    85e6:	31 96       	adiw	r30, 0x01	; 1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:63
    bool negative_exponent = false;
    85e8:	b0 e0       	ldi	r27, 0x00	; 0
    85ea:	d5 cf       	rjmp	.-86     	; 0x8596 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6d2>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:68
    if (*s == '-') {
      negative_exponent = true;
      s++;
    } else if (*s == '+') {
      s++;
    85ec:	32 96       	adiw	r30, 0x02	; 2
    85ee:	fc cf       	rjmp	.-8      	; 0x85e8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x724>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:36
  }

  if (*s == 't') return 1;  // true
  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return negative_result ? -traits::inf() : traits::inf();
    85f0:	60 e0       	ldi	r22, 0x00	; 0
    85f2:	70 e0       	ldi	r23, 0x00	; 0
    85f4:	80 e8       	ldi	r24, 0x80	; 128
    85f6:	9f ef       	ldi	r25, 0xFF	; 255
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:77
      exponent = exponent * 10 + (*s - '0');
      if (exponent + exponent_offset > traits::exponent_max) {
        if (negative_exponent)
          return negative_result ? -0.0f : 0.0f;
        else
          return negative_result ? -traits::inf() : traits::inf();
    85f8:	d1 10       	cpse	r13, r1
    85fa:	2a c0       	rjmp	.+84     	; 0x8650 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:36
  }

  if (*s == 't') return 1;  // true
  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return negative_result ? -traits::inf() : traits::inf();
    85fc:	60 e0       	ldi	r22, 0x00	; 0
    85fe:	70 e0       	ldi	r23, 0x00	; 0
    8600:	80 e8       	ldi	r24, 0x80	; 128
    8602:	9f e7       	ldi	r25, 0x7F	; 127
    8604:	25 c0       	rjmp	.+74     	; 0x8650 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:81
        else
          return negative_result ? -traits::inf() : traits::inf();
      }
      s++;
    }
    if (negative_exponent) exponent = -exponent;
    8606:	bb 23       	and	r27, r27
    8608:	19 f0       	breq	.+6      	; 0x8610 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x74c>
    860a:	91 95       	neg	r25
    860c:	81 95       	neg	r24
    860e:	91 09       	sbc	r25, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:83
  }
  exponent += exponent_offset;
    8610:	08 0f       	add	r16, r24
    8612:	19 1f       	adc	r17, r25
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:85

  T result = traits::make_float(static_cast<T>(mantissa), exponent);
    8614:	ca 01       	movw	r24, r20
    8616:	b9 01       	movw	r22, r18
    8618:	0e 94 c6 88 	call	0x1118c	; 0x1118c <__floatsisf>
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:123
  typedef int8_t exponent_type;
  static const exponent_type exponent_max = 38;

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
    861c:	10 16       	cp	r1, r16
    861e:	11 06       	cpc	r1, r17
    8620:	44 f5       	brge	.+80     	; 0x8672 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:124
      for (uint8_t index = 0; e != 0; index++) {
    8622:	b1 2c       	mov	r11, r1
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:125
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
    8624:	00 ff       	sbrs	r16, 0
    8626:	0c c0       	rjmp	.+24     	; 0x8640 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x77c>
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE24positiveBinaryPowerOfTenEi():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:140
    return m;
  }

  static T positiveBinaryPowerOfTen(int index) {
    static T factors[] = {1e1f, 1e2f, 1e4f, 1e8f, 1e16f, 1e32f};
    return factors[index];
    8628:	24 e0       	ldi	r18, 0x04	; 4
    862a:	b2 9e       	mul	r11, r18
    862c:	f0 01       	movw	r30, r0
    862e:	11 24       	eor	r1, r1
    8630:	e8 5c       	subi	r30, 0xC8	; 200
    8632:	fd 4f       	sbci	r31, 0xFD	; 253
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:125

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
      for (uint8_t index = 0; e != 0; index++) {
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
    8634:	20 81       	ld	r18, Z
    8636:	31 81       	ldd	r19, Z+1	; 0x01
    8638:	42 81       	ldd	r20, Z+2	; 0x02
    863a:	53 81       	ldd	r21, Z+3	; 0x03
    863c:	0e 94 25 89 	call	0x1124a	; 0x1124a <__mulsf3>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:126
        e >>= 1;
    8640:	15 95       	asr	r17
    8642:	07 95       	ror	r16
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:124
  static const exponent_type exponent_max = 38;

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
      for (uint8_t index = 0; e != 0; index++) {
    8644:	b3 94       	inc	r11
    8646:	01 15       	cp	r16, r1
    8648:	11 05       	cpc	r17, r1
    864a:	61 f7       	brne	.-40     	; 0x8624 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x760>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:87

  return negative_result ? -result : result;
    864c:	d1 10       	cpse	r13, r1
    864e:	90 58       	subi	r25, 0x80	; 128
_ZN11ArduinoJson11JsonVariant3setIfEEbT_PNS_9Internals9enable_ifIXsrNS3_17is_floating_pointIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:54
  // set(float value);
  template <typename T>
  FORCE_INLINE bool set(
      T value, typename Internals::enable_if<
                   Internals::is_floating_point<T>::value>::type * = 0) {
    if (!_data) return false;
    8650:	e1 14       	cp	r14, r1
    8652:	f1 04       	cpc	r15, r1
    8654:	09 f4       	brne	.+2      	; 0x8658 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x794>
    8656:	68 ce       	rjmp	.-816    	; 0x8328 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals15JsonVariantData8setFloatEf():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:29
    type = JSON_BOOLEAN;
    content.asInteger = static_cast<JsonUInt>(value);
  }

  void setFloat(JsonFloat value) {
    type = JSON_FLOAT;
    8658:	2a e0       	ldi	r18, 0x0A	; 10
    865a:	30 e0       	ldi	r19, 0x00	; 0
    865c:	f7 01       	movw	r30, r14
    865e:	31 83       	std	Z+1, r19	; 0x01
    8660:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:30
    content.asFloat = value;
    8662:	62 83       	std	Z+2, r22	; 0x02
    8664:	73 83       	std	Z+3, r23	; 0x03
    8666:	84 83       	std	Z+4, r24	; 0x04
    8668:	95 83       	std	Z+5, r25	; 0x05
    866a:	5e ce       	rjmp	.-836    	; 0x8328 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:60
      }
      s++;
    }
  }

  int exponent = 0;
    866c:	90 e0       	ldi	r25, 0x00	; 0
    866e:	80 e0       	ldi	r24, 0x00	; 0
    8670:	cf cf       	rjmp	.-98     	; 0x8610 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x74c>
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:129
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
        e >>= 1;
      }
    } else {
      e = -e;
    8672:	11 95       	neg	r17
    8674:	01 95       	neg	r16
    8676:	11 09       	sbc	r17, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:130
      for (uint8_t index = 0; e != 0; index++) {
    8678:	b1 2c       	mov	r11, r1
make_float():
    867a:	01 15       	cp	r16, r1
    867c:	11 05       	cpc	r17, r1
    867e:	31 f3       	breq	.-52     	; 0x864c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x788>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:131
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
    8680:	00 ff       	sbrs	r16, 0
    8682:	0c c0       	rjmp	.+24     	; 0x869c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7d8>
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE24negativeBinaryPowerOfTenEi():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:145
    return factors[index];
  }

  static T negativeBinaryPowerOfTen(int index) {
    static T factors[] = {1e-1f, 1e-2f, 1e-4f, 1e-8f, 1e-16f, 1e-32f};
    return factors[index];
    8684:	a4 e0       	ldi	r26, 0x04	; 4
    8686:	ba 9e       	mul	r11, r26
    8688:	f0 01       	movw	r30, r0
    868a:	11 24       	eor	r1, r1
    868c:	e0 5e       	subi	r30, 0xE0	; 224
    868e:	fd 4f       	sbci	r31, 0xFD	; 253
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:131
        e >>= 1;
      }
    } else {
      e = -e;
      for (uint8_t index = 0; e != 0; index++) {
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
    8690:	20 81       	ld	r18, Z
    8692:	31 81       	ldd	r19, Z+1	; 0x01
    8694:	42 81       	ldd	r20, Z+2	; 0x02
    8696:	53 81       	ldd	r21, Z+3	; 0x03
    8698:	0e 94 25 89 	call	0x1124a	; 0x1124a <__mulsf3>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:132
        e >>= 1;
    869c:	15 95       	asr	r17
    869e:	07 95       	ror	r16
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:130
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
        e >>= 1;
      }
    } else {
      e = -e;
      for (uint8_t index = 0; e != 0; index++) {
    86a0:	b3 94       	inc	r11
    86a2:	eb cf       	rjmp	.-42     	; 0x867a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7b6>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:252
      result.set(parseFloat<JsonFloat>(buffer));
    } else if (!strcmp(buffer, "true")) {
    86a4:	6e e0       	ldi	r22, 0x0E	; 14
    86a6:	73 e0       	ldi	r23, 0x03	; 3
    86a8:	ce 01       	movw	r24, r28
    86aa:	01 96       	adiw	r24, 0x01	; 1
    86ac:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
    86b0:	89 2b       	or	r24, r25
    86b2:	91 f4       	brne	.+36     	; 0x86d8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x814>
_ZN11ArduinoJson11JsonVariant3setEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:43
  // Creates an uninitialized JsonVariant
  FORCE_INLINE JsonVariant() : _memoryPool(0), _data(0) {}

  // set(bool value)
  FORCE_INLINE bool set(bool value) {
    if (!_data) return false;
    86b4:	e1 14       	cp	r14, r1
    86b6:	f1 04       	cpc	r15, r1
    86b8:	09 f4       	brne	.+2      	; 0x86bc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7f8>
    86ba:	36 ce       	rjmp	.-916    	; 0x8328 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals15JsonVariantData10setBooleanEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:24
  JsonVariantData() {
    type = JSON_NULL;
  }

  void setBoolean(bool value) {
    type = JSON_BOOLEAN;
    86bc:	85 e0       	ldi	r24, 0x05	; 5
    86be:	90 e0       	ldi	r25, 0x00	; 0
    86c0:	f7 01       	movw	r30, r14
    86c2:	91 83       	std	Z+1, r25	; 0x01
    86c4:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:25
    content.asInteger = static_cast<JsonUInt>(value);
    86c6:	81 e0       	ldi	r24, 0x01	; 1
    86c8:	90 e0       	ldi	r25, 0x00	; 0
    86ca:	a0 e0       	ldi	r26, 0x00	; 0
    86cc:	b0 e0       	ldi	r27, 0x00	; 0
    86ce:	82 83       	std	Z+2, r24	; 0x02
    86d0:	93 83       	std	Z+3, r25	; 0x03
    86d2:	a4 83       	std	Z+4, r26	; 0x04
    86d4:	b5 83       	std	Z+5, r27	; 0x05
    86d6:	28 ce       	rjmp	.-944    	; 0x8328 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:254
      result.set(true);
    } else if (!strcmp(buffer, "false")) {
    86d8:	63 e1       	ldi	r22, 0x13	; 19
    86da:	73 e0       	ldi	r23, 0x03	; 3
    86dc:	ce 01       	movw	r24, r28
    86de:	01 96       	adiw	r24, 0x01	; 1
    86e0:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
    86e4:	89 2b       	or	r24, r25
    86e6:	79 f4       	brne	.+30     	; 0x8706 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x842>
_ZN11ArduinoJson11JsonVariant3setEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:43
    86e8:	e1 14       	cp	r14, r1
    86ea:	f1 04       	cpc	r15, r1
    86ec:	09 f4       	brne	.+2      	; 0x86f0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x82c>
    86ee:	1c ce       	rjmp	.-968    	; 0x8328 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals15JsonVariantData10setBooleanEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:24
  JsonVariantData() {
    type = JSON_NULL;
  }

  void setBoolean(bool value) {
    type = JSON_BOOLEAN;
    86f0:	85 e0       	ldi	r24, 0x05	; 5
    86f2:	90 e0       	ldi	r25, 0x00	; 0
    86f4:	d7 01       	movw	r26, r14
    86f6:	8d 93       	st	X+, r24
    86f8:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:25
    content.asInteger = static_cast<JsonUInt>(value);
    86fa:	f7 01       	movw	r30, r14
    86fc:	12 82       	std	Z+2, r1	; 0x02
    86fe:	13 82       	std	Z+3, r1	; 0x03
    8700:	14 82       	std	Z+4, r1	; 0x04
    8702:	15 82       	std	Z+5, r1	; 0x05
    8704:	11 ce       	rjmp	.-990    	; 0x8328 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:256
      result.set(false);
    } else if (!strcmp(buffer, "null")) {
    8706:	69 e1       	ldi	r22, 0x19	; 25
    8708:	73 e0       	ldi	r23, 0x03	; 3
    870a:	ce 01       	movw	r24, r28
    870c:	01 96       	adiw	r24, 0x01	; 1
    870e:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
    8712:	89 2b       	or	r24, r25
    8714:	09 f4       	brne	.+2      	; 0x8718 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x854>
    8716:	08 ce       	rjmp	.-1008   	; 0x8328 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:259
      // already null
    } else {
      return DeserializationError::InvalidInput;
    8718:	82 e0       	ldi	r24, 0x02	; 2
    871a:	90 e0       	ldi	r25, 0x00	; 0
    871c:	a3 cc       	rjmp	.-1722   	; 0x8064 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1a0>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"
    871e:	21 e0       	ldi	r18, 0x01	; 1
    8720:	30 e0       	ldi	r19, 0x00	; 0
    8722:	40 e0       	ldi	r20, 0x00	; 0
    8724:	50 e0       	ldi	r21, 0x00	; 0
_ZN11ArduinoJson11JsonVariant3setIlEEbT_PNS_9Internals9enable_ifIXaasrNS3_11is_integralIS2_EE5valuesrNS3_9is_signedIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:70
  FORCE_INLINE bool set(
      T value,
      typename Internals::enable_if<Internals::is_integral<T>::value &&
                                    Internals::is_signed<T>::value>::type * =
          0) {
    if (!_data) return false;
    8726:	e1 14       	cp	r14, r1
    8728:	f1 04       	cpc	r15, r1
    872a:	09 f0       	breq	.+2      	; 0x872e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x86a>
    872c:	52 ce       	rjmp	.-860    	; 0x83d2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x50e>
    872e:	fc cd       	rjmp	.-1032   	; 0x8328 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>

00008730 <__cxa_pure_virtual>:
__cxa_pure_virtual():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/abi.cpp:27
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
    8730:	0e 94 9b 8c 	call	0x11936	; 0x11936 <abort>

00008734 <NTPClient::getYear() const>:
_ZNK9NTPClient7getYearEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:111
  return this->_timeOffset + // User offset
         this->_currentEpoc + // Epoc returned by the NTP server
         ((millis() - this->_lastUpdate) / 1000); // Time since last update
}

int NTPClient::getYear() const {
    8734:	cf 93       	push	r28
    8736:	df 93       	push	r29
    8738:	00 d0       	rcall	.+0      	; 0x873a <NTPClient::getYear() const+0x6>
    873a:	1f 92       	push	r1
    873c:	cd b7       	in	r28, 0x3d	; 61
    873e:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:112
  time_t rawtime = this->getEpochTime();
    8740:	0e 94 8e 14 	call	0x291c	; 0x291c <NTPClient::getEpochTime() const>
    8744:	69 83       	std	Y+1, r22	; 0x01
    8746:	7a 83       	std	Y+2, r23	; 0x02
    8748:	8b 83       	std	Y+3, r24	; 0x03
    874a:	9c 83       	std	Y+4, r25	; 0x04
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:114
  struct tm * ti;
  ti = localtime (&rawtime);
    874c:	ce 01       	movw	r24, r28
    874e:	01 96       	adiw	r24, 0x01	; 1
    8750:	0e 94 80 71 	call	0xe300	; 0xe300 <localtime>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:115
  int year = ti->tm_year + 1900;
    8754:	fc 01       	movw	r30, r24
    8756:	86 81       	ldd	r24, Z+6	; 0x06
    8758:	97 81       	ldd	r25, Z+7	; 0x07
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:118

  return year;
}
    875a:	84 59       	subi	r24, 0x94	; 148
    875c:	98 4f       	sbci	r25, 0xF8	; 248
    875e:	0f 90       	pop	r0
    8760:	0f 90       	pop	r0
    8762:	0f 90       	pop	r0
    8764:	0f 90       	pop	r0
    8766:	df 91       	pop	r29
    8768:	cf 91       	pop	r28
    876a:	08 95       	ret

0000876c <NTPClient::update()>:
_ZN9NTPClient6updateEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:96
  this->_currentEpoc = secsSince1900 - SEVENZYYEARS;

  return true;
}

bool NTPClient::update() {
    876c:	cf 92       	push	r12
    876e:	df 92       	push	r13
    8770:	ef 92       	push	r14
    8772:	ff 92       	push	r15
    8774:	0f 93       	push	r16
    8776:	1f 93       	push	r17
    8778:	cf 93       	push	r28
    877a:	df 93       	push	r29
    877c:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:97
  if ((millis() - this->_lastUpdate >= this->_updateInterval)     // Update after _updateInterval
    877e:	0e 94 28 13 	call	0x2650	; 0x2650 <millis>
    8782:	0b 89       	ldd	r16, Y+19	; 0x13
    8784:	1c 89       	ldd	r17, Y+20	; 0x14
    8786:	2d 89       	ldd	r18, Y+21	; 0x15
    8788:	3e 89       	ldd	r19, Y+22	; 0x16
    878a:	60 1b       	sub	r22, r16
    878c:	71 0b       	sbc	r23, r17
    878e:	82 0b       	sbc	r24, r18
    8790:	93 0b       	sbc	r25, r19
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:98
    || this->_lastUpdate == 0) {                                // Update if there was no update yet.
    8792:	cb 84       	ldd	r12, Y+11	; 0x0b
    8794:	dc 84       	ldd	r13, Y+12	; 0x0c
    8796:	ed 84       	ldd	r14, Y+13	; 0x0d
    8798:	fe 84       	ldd	r15, Y+14	; 0x0e
    879a:	6c 15       	cp	r22, r12
    879c:	7d 05       	cpc	r23, r13
    879e:	8e 05       	cpc	r24, r14
    87a0:	9f 05       	cpc	r25, r15
    87a2:	28 f4       	brcc	.+10     	; 0x87ae <NTPClient::update()+0x42>
    87a4:	01 2b       	or	r16, r17
    87a6:	02 2b       	or	r16, r18
    87a8:	03 2b       	or	r16, r19
    87aa:	09 f0       	breq	.+2      	; 0x87ae <NTPClient::update()+0x42>
    87ac:	9e c0       	rjmp	.+316    	; 0x88ea <NTPClient::update()+0x17e>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:99
    if (!this->_udpSetup) this->begin();                         // setup the UDP client if needed
    87ae:	8a 81       	ldd	r24, Y+2	; 0x02
    87b0:	81 11       	cpse	r24, r1
    87b2:	03 c0       	rjmp	.+6      	; 0x87ba <NTPClient::update()+0x4e>
    87b4:	ce 01       	movw	r24, r28
    87b6:	0e 94 c2 14 	call	0x2984	; 0x2984 <NTPClient::begin()>
sendNTPPacket():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:185
    this->_poolServerName = poolServerName;
}

void NTPClient::sendNTPPacket() {
  // set all bytes in the buffer to 0
  memset(this->_packetBuffer, 0, NTP_PACKET_SIZE);
    87ba:	7e 01       	movw	r14, r28
    87bc:	87 e1       	ldi	r24, 0x17	; 23
    87be:	e8 0e       	add	r14, r24
    87c0:	f1 1c       	adc	r15, r1
    87c2:	8c e2       	ldi	r24, 0x2C	; 44
    87c4:	fe 01       	movw	r30, r28
    87c6:	7b 96       	adiw	r30, 0x1b	; 27
    87c8:	df 01       	movw	r26, r30
    87ca:	1d 92       	st	X+, r1
    87cc:	8a 95       	dec	r24
    87ce:	e9 f7       	brne	.-6      	; 0x87ca <NTPClient::update()+0x5e>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:188
  // Initialize values needed to form NTP request
  // (see URL above for details on the packets)
  this->_packetBuffer[0] = 0b11100011;   // LI, Version, Mode
    87d0:	83 ee       	ldi	r24, 0xE3	; 227
    87d2:	8f 8b       	std	Y+23, r24	; 0x17
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:189
  this->_packetBuffer[1] = 0;     // Stratum, or type of clock
    87d4:	18 8e       	std	Y+24, r1	; 0x18
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:190
  this->_packetBuffer[2] = 6;     // Polling Interval
    87d6:	86 e0       	ldi	r24, 0x06	; 6
    87d8:	89 8f       	std	Y+25, r24	; 0x19
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:191
  this->_packetBuffer[3] = 0xEC;  // Peer Clock Precision
    87da:	8c ee       	ldi	r24, 0xEC	; 236
    87dc:	8a 8f       	std	Y+26, r24	; 0x1a
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:193
  // 8 bytes of zero for Root Delay & Root Dispersion
  this->_packetBuffer[12]  = 49;
    87de:	81 e3       	ldi	r24, 0x31	; 49
    87e0:	8b a3       	std	Y+35, r24	; 0x23
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:194
  this->_packetBuffer[13]  = 0x4E;
    87e2:	9e e4       	ldi	r25, 0x4E	; 78
    87e4:	9c a3       	std	Y+36, r25	; 0x24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:195
  this->_packetBuffer[14]  = 49;
    87e6:	8d a3       	std	Y+37, r24	; 0x25
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:196
  this->_packetBuffer[15]  = 52;
    87e8:	84 e3       	ldi	r24, 0x34	; 52
    87ea:	8e a3       	std	Y+38, r24	; 0x26
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:200

  // all NTP fields have been given values, now
  // you can send a packet requesting a timestamp:
  this->_udp->beginPacket(this->_poolServerName, 123); //NTP requests are to port 123
    87ec:	88 81       	ld	r24, Y
    87ee:	99 81       	ldd	r25, Y+1	; 0x01
    87f0:	6b 81       	ldd	r22, Y+3	; 0x03
    87f2:	7c 81       	ldd	r23, Y+4	; 0x04
    87f4:	dc 01       	movw	r26, r24
    87f6:	ed 91       	ld	r30, X+
    87f8:	fc 91       	ld	r31, X
    87fa:	06 88       	ldd	r0, Z+22	; 0x16
    87fc:	f7 89       	ldd	r31, Z+23	; 0x17
    87fe:	e0 2d       	mov	r30, r0
    8800:	4b e7       	ldi	r20, 0x7B	; 123
    8802:	50 e0       	ldi	r21, 0x00	; 0
    8804:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:201
  this->_udp->write(this->_packetBuffer, NTP_PACKET_SIZE);
    8806:	88 81       	ld	r24, Y
    8808:	99 81       	ldd	r25, Y+1	; 0x01
    880a:	dc 01       	movw	r26, r24
    880c:	ed 91       	ld	r30, X+
    880e:	fc 91       	ld	r31, X
    8810:	02 80       	ldd	r0, Z+2	; 0x02
    8812:	f3 81       	ldd	r31, Z+3	; 0x03
    8814:	e0 2d       	mov	r30, r0
    8816:	40 e3       	ldi	r20, 0x30	; 48
    8818:	50 e0       	ldi	r21, 0x00	; 0
    881a:	b7 01       	movw	r22, r14
    881c:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:202
  this->_udp->endPacket();
    881e:	88 81       	ld	r24, Y
    8820:	99 81       	ldd	r25, Y+1	; 0x01
    8822:	dc 01       	movw	r26, r24
    8824:	ed 91       	ld	r30, X+
    8826:	fc 91       	ld	r31, X
    8828:	00 8c       	ldd	r0, Z+24	; 0x18
    882a:	f1 8d       	ldd	r31, Z+25	; 0x19
    882c:	e0 2d       	mov	r30, r0
    882e:	19 95       	eicall
_ZN9NTPClient6updateEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:72
  #endif

  this->sendNTPPacket();

  // Wait till data is there or timeout...
  byte timeout = 0;
    8830:	10 e0       	ldi	r17, 0x00	; 0
forceUpdate():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:75
  int cb = 0;
  do {
    delay ( 10 );
    8832:	6a e0       	ldi	r22, 0x0A	; 10
    8834:	70 e0       	ldi	r23, 0x00	; 0
    8836:	80 e0       	ldi	r24, 0x00	; 0
    8838:	90 e0       	ldi	r25, 0x00	; 0
    883a:	0e 94 00 12 	call	0x2400	; 0x2400 <delay>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:76
    cb = this->_udp->parsePacket();
    883e:	88 81       	ld	r24, Y
    8840:	99 81       	ldd	r25, Y+1	; 0x01
    8842:	dc 01       	movw	r26, r24
    8844:	ed 91       	ld	r30, X+
    8846:	fc 91       	ld	r31, X
    8848:	02 8c       	ldd	r0, Z+26	; 0x1a
    884a:	f3 8d       	ldd	r31, Z+27	; 0x1b
    884c:	e0 2d       	mov	r30, r0
    884e:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:77
    if (timeout > 100) return false; // timeout after 1000 ms
    8850:	15 36       	cpi	r17, 0x65	; 101
    8852:	09 f4       	brne	.+2      	; 0x8856 <NTPClient::update()+0xea>
    8854:	54 c0       	rjmp	.+168    	; 0x88fe <NTPClient::update()+0x192>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:78
    timeout++;
    8856:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:79
  } while (cb == 0);
    8858:	89 2b       	or	r24, r25
    885a:	59 f3       	breq	.-42     	; 0x8832 <NTPClient::update()+0xc6>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:81

  this->_lastUpdate = millis() - (10 * (timeout + 1)); // Account for delay in reading the time
    885c:	0e 94 28 13 	call	0x2650	; 0x2650 <millis>
    8860:	21 2f       	mov	r18, r17
    8862:	30 e0       	ldi	r19, 0x00	; 0
    8864:	a9 01       	movw	r20, r18
    8866:	4f 5f       	subi	r20, 0xFF	; 255
    8868:	5f 4f       	sbci	r21, 0xFF	; 255
    886a:	ea e0       	ldi	r30, 0x0A	; 10
    886c:	e4 9f       	mul	r30, r20
    886e:	90 01       	movw	r18, r0
    8870:	e5 9f       	mul	r30, r21
    8872:	30 0d       	add	r19, r0
    8874:	11 24       	eor	r1, r1
    8876:	89 01       	movw	r16, r18
    8878:	33 0f       	add	r19, r19
    887a:	22 0b       	sbc	r18, r18
    887c:	33 0b       	sbc	r19, r19
    887e:	ab 01       	movw	r20, r22
    8880:	bc 01       	movw	r22, r24
    8882:	40 1b       	sub	r20, r16
    8884:	51 0b       	sbc	r21, r17
    8886:	62 0b       	sbc	r22, r18
    8888:	73 0b       	sbc	r23, r19
    888a:	4b 8b       	std	Y+19, r20	; 0x13
    888c:	5c 8b       	std	Y+20, r21	; 0x14
    888e:	6d 8b       	std	Y+21, r22	; 0x15
    8890:	7e 8b       	std	Y+22, r23	; 0x16
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:83

  this->_udp->read(this->_packetBuffer, NTP_PACKET_SIZE);
    8892:	88 81       	ld	r24, Y
    8894:	99 81       	ldd	r25, Y+1	; 0x01
    8896:	dc 01       	movw	r26, r24
    8898:	ed 91       	ld	r30, X+
    889a:	fc 91       	ld	r31, X
    889c:	04 8c       	ldd	r0, Z+28	; 0x1c
    889e:	f5 8d       	ldd	r31, Z+29	; 0x1d
    88a0:	e0 2d       	mov	r30, r0
    88a2:	40 e3       	ldi	r20, 0x30	; 48
    88a4:	50 e0       	ldi	r21, 0x00	; 0
    88a6:	b7 01       	movw	r22, r14
    88a8:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:85

  unsigned long highWord = word(this->_packetBuffer[40], this->_packetBuffer[41]);
    88aa:	fe 01       	movw	r30, r28
    88ac:	ff 96       	adiw	r30, 0x3f	; 63
    88ae:	80 81       	ld	r24, Z
    88b0:	91 81       	ldd	r25, Z+1	; 0x01
    88b2:	98 27       	eor	r25, r24
    88b4:	89 27       	eor	r24, r25
    88b6:	98 27       	eor	r25, r24
    88b8:	b0 e0       	ldi	r27, 0x00	; 0
    88ba:	a0 e0       	ldi	r26, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:89
  unsigned long lowWord = word(this->_packetBuffer[42], this->_packetBuffer[43]);
  // combine the four bytes (two words) into a long integer
  // this is NTP time (seconds since Jan 1 1900):
  unsigned long secsSince1900 = highWord << 16 | lowWord;
    88bc:	dc 01       	movw	r26, r24
    88be:	99 27       	eor	r25, r25
    88c0:	88 27       	eor	r24, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:86
  this->_lastUpdate = millis() - (10 * (timeout + 1)); // Account for delay in reading the time

  this->_udp->read(this->_packetBuffer, NTP_PACKET_SIZE);

  unsigned long highWord = word(this->_packetBuffer[40], this->_packetBuffer[41]);
  unsigned long lowWord = word(this->_packetBuffer[42], this->_packetBuffer[43]);
    88c2:	32 96       	adiw	r30, 0x02	; 2
    88c4:	40 81       	ld	r20, Z
    88c6:	51 81       	ldd	r21, Z+1	; 0x01
    88c8:	54 27       	eor	r21, r20
    88ca:	45 27       	eor	r20, r21
    88cc:	54 27       	eor	r21, r20
    88ce:	70 e0       	ldi	r23, 0x00	; 0
    88d0:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:89
  // combine the four bytes (two words) into a long integer
  // this is NTP time (seconds since Jan 1 1900):
  unsigned long secsSince1900 = highWord << 16 | lowWord;
    88d2:	84 2b       	or	r24, r20
    88d4:	95 2b       	or	r25, r21
    88d6:	a6 2b       	or	r26, r22
    88d8:	b7 2b       	or	r27, r23
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:91

  this->_currentEpoc = secsSince1900 - SEVENZYYEARS;
    88da:	80 58       	subi	r24, 0x80	; 128
    88dc:	9e 47       	sbci	r25, 0x7E	; 126
    88de:	aa 4a       	sbci	r26, 0xAA	; 170
    88e0:	b3 48       	sbci	r27, 0x83	; 131
    88e2:	8f 87       	std	Y+15, r24	; 0x0f
    88e4:	98 8b       	std	Y+16, r25	; 0x10
    88e6:	a9 8b       	std	Y+17, r26	; 0x11
    88e8:	ba 8b       	std	Y+18, r27	; 0x12
_ZN9NTPClient6updateEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:102
  if ((millis() - this->_lastUpdate >= this->_updateInterval)     // Update after _updateInterval
    || this->_lastUpdate == 0) {                                // Update if there was no update yet.
    if (!this->_udpSetup) this->begin();                         // setup the UDP client if needed
    return this->forceUpdate();
  }
  return true;
    88ea:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:103
}
    88ec:	df 91       	pop	r29
    88ee:	cf 91       	pop	r28
    88f0:	1f 91       	pop	r17
    88f2:	0f 91       	pop	r16
    88f4:	ff 90       	pop	r15
    88f6:	ef 90       	pop	r14
    88f8:	df 90       	pop	r13
    88fa:	cf 90       	pop	r12
    88fc:	08 95       	ret
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:77
  byte timeout = 0;
  int cb = 0;
  do {
    delay ( 10 );
    cb = this->_udp->parsePacket();
    if (timeout > 100) return false; // timeout after 1000 ms
    88fe:	80 e0       	ldi	r24, 0x00	; 0
    8900:	f5 cf       	rjmp	.-22     	; 0x88ec <NTPClient::update()+0x180>

00008902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>:
_ZN11EEPROMClass5writeEih.isra.2():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/EEPROM/src/EEPROM.h:47
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    8902:	0c 94 eb 89 	jmp	0x113d6	; 0x113d6 <eeprom_write_byte>

00008906 <EEPROMwriteFloat(unsigned int, float)>:
_Z16EEPROMwriteFloatjf():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:69
  return data.f;
}


void EEPROMwriteFloat(unsigned int addr, float x)
{
    8906:	cf 92       	push	r12
    8908:	df 92       	push	r13
    890a:	ef 92       	push	r14
    890c:	ff 92       	push	r15
    890e:	0f 93       	push	r16
    8910:	1f 93       	push	r17
    8912:	cf 93       	push	r28
    8914:	df 93       	push	r29
    8916:	00 d0       	rcall	.+0      	; 0x8918 <EEPROMwriteFloat(unsigned int, float)+0x12>
    8918:	1f 92       	push	r1
    891a:	cd b7       	in	r28, 0x3d	; 61
    891c:	de b7       	in	r29, 0x3e	; 62
    891e:	6c 01       	movw	r12, r24
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:74
  union {
    uint8_t b[4];
    float f;
  } data;
  data.f = x;
    8920:	49 83       	std	Y+1, r20	; 0x01
    8922:	5a 83       	std	Y+2, r21	; 0x02
    8924:	6b 83       	std	Y+3, r22	; 0x03
    8926:	7c 83       	std	Y+4, r23	; 0x04
    8928:	ce 01       	movw	r24, r28
    892a:	01 96       	adiw	r24, 0x01	; 1
    892c:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:75
  for (int i = 0; i < 4; i++) EEPROM.write(addr + i, data.b[i]);
    892e:	10 e0       	ldi	r17, 0x00	; 0
    8930:	00 e0       	ldi	r16, 0x00	; 0
    8932:	f7 01       	movw	r30, r14
    8934:	61 91       	ld	r22, Z+
    8936:	7f 01       	movw	r14, r30
    8938:	c8 01       	movw	r24, r16
    893a:	8c 0d       	add	r24, r12
    893c:	9d 1d       	adc	r25, r13
    893e:	0e 94 81 44 	call	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>
    8942:	0f 5f       	subi	r16, 0xFF	; 255
    8944:	1f 4f       	sbci	r17, 0xFF	; 255
    8946:	04 30       	cpi	r16, 0x04	; 4
    8948:	11 05       	cpc	r17, r1
    894a:	99 f7       	brne	.-26     	; 0x8932 <EEPROMwriteFloat(unsigned int, float)+0x2c>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:76
}
    894c:	0f 90       	pop	r0
    894e:	0f 90       	pop	r0
    8950:	0f 90       	pop	r0
    8952:	0f 90       	pop	r0
    8954:	df 91       	pop	r29
    8956:	cf 91       	pop	r28
    8958:	1f 91       	pop	r17
    895a:	0f 91       	pop	r16
    895c:	ff 90       	pop	r15
    895e:	ef 90       	pop	r14
    8960:	df 90       	pop	r13
    8962:	cf 90       	pop	r12
    8964:	08 95       	ret

00008966 <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>:
_Z27thermostat_program_set_weekhhh():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:372
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day );
}
//// nastavi jaky v jakych dnech program plati
void thermostat_program_set_week(uint8_t program_id, uint8_t interval_id, uint8_t week)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day, week);
    8966:	2d e4       	ldi	r18, 0x4D	; 77
    8968:	82 9f       	mul	r24, r18
    896a:	c0 01       	movw	r24, r0
    896c:	11 24       	eor	r1, r1
    896e:	26 e0       	ldi	r18, 0x06	; 6
    8970:	62 9f       	mul	r22, r18
    8972:	80 0d       	add	r24, r0
    8974:	91 1d       	adc	r25, r1
    8976:	11 24       	eor	r1, r1
    8978:	64 2f       	mov	r22, r20
    897a:	84 5c       	subi	r24, 0xC4	; 196
    897c:	9c 4f       	sbci	r25, 0xFC	; 252
    897e:	0c 94 81 44 	jmp	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>

00008982 <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>:
_Z32thermostat_program_set_thresholdhhj():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:331
  ret = (EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1) << 8)  + EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1);
  return ret;
}
//// nastavi rozhodovaci uroven termostatu
void thermostat_program_set_threshold(uint8_t program_id, uint8_t interval_id, uint16_t threshold)
{
    8982:	1f 93       	push	r17
    8984:	cf 93       	push	r28
    8986:	df 93       	push	r29
    8988:	14 2f       	mov	r17, r20
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:332
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1, ((threshold >> 8) & 0xff));
    898a:	9d e4       	ldi	r25, 0x4D	; 77
    898c:	89 9f       	mul	r24, r25
    898e:	e0 01       	movw	r28, r0
    8990:	11 24       	eor	r1, r1
    8992:	c5 5c       	subi	r28, 0xC5	; 197
    8994:	dc 4f       	sbci	r29, 0xFC	; 252
    8996:	86 e0       	ldi	r24, 0x06	; 6
    8998:	68 9f       	mul	r22, r24
    899a:	c0 0d       	add	r28, r0
    899c:	d1 1d       	adc	r29, r1
    899e:	11 24       	eor	r1, r1
    89a0:	65 2f       	mov	r22, r21
    89a2:	ce 01       	movw	r24, r28
    89a4:	05 96       	adiw	r24, 0x05	; 5
    89a6:	0e 94 81 44 	call	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:333
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1, (threshold & 0xff));
    89aa:	61 2f       	mov	r22, r17
    89ac:	ce 01       	movw	r24, r28
    89ae:	04 96       	adiw	r24, 0x04	; 4
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:334
}
    89b0:	df 91       	pop	r29
    89b2:	cf 91       	pop	r28
    89b4:	1f 91       	pop	r17
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:333
}
//// nastavi rozhodovaci uroven termostatu
void thermostat_program_set_threshold(uint8_t program_id, uint8_t interval_id, uint16_t threshold)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1, ((threshold >> 8) & 0xff));
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1, (threshold & 0xff));
    89b6:	0c 94 81 44 	jmp	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>

000089ba <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
_Z27thermostat_program_set_timehhhhhhh():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:313
  *stop_min = (stop & 0b00000011) * 15;
  *active = start & 0b00000001;
}
//// nastavi cas termostatu
void thermostat_program_set_time(uint8_t program_id, uint8_t interval_id, uint8_t start_hour, uint8_t start_min, uint8_t stop_hour, uint8_t stop_min, uint8_t active)
{
    89ba:	cf 92       	push	r12
    89bc:	ef 92       	push	r14
    89be:	0f 93       	push	r16
    89c0:	1f 93       	push	r17
    89c2:	cf 93       	push	r28
    89c4:	df 93       	push	r29
    89c6:	c8 2f       	mov	r28, r24
    89c8:	56 2f       	mov	r21, r22
    89ca:	8e 2d       	mov	r24, r14
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:316
  uint8_t start, stop;
  start = ((start_hour << 3) & 0b11111000) + (((start_min / 15) << 1) & 0b00000110 ) + (active & 0b00000001);
  stop = ((stop_hour << 3) & 0b11111000) + ((stop_min / 15) & 0b00000011);
    89cc:	3f e0       	ldi	r19, 0x0F	; 15
    89ce:	63 2f       	mov	r22, r19
    89d0:	0e 94 a6 8b 	call	0x1174c	; 0x1174c <__udivmodqi4>
    89d4:	83 70       	andi	r24, 0x03	; 3
    89d6:	98 e0       	ldi	r25, 0x08	; 8
    89d8:	09 9f       	mul	r16, r25
    89da:	80 01       	movw	r16, r0
    89dc:	11 24       	eor	r1, r1
    89de:	08 0f       	add	r16, r24
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:317
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1, start);
    89e0:	8d e4       	ldi	r24, 0x4D	; 77
    89e2:	c8 9f       	mul	r28, r24
    89e4:	e0 01       	movw	r28, r0
    89e6:	11 24       	eor	r1, r1
    89e8:	c5 5c       	subi	r28, 0xC5	; 197
    89ea:	dc 4f       	sbci	r29, 0xFC	; 252
    89ec:	96 e0       	ldi	r25, 0x06	; 6
    89ee:	59 9f       	mul	r21, r25
    89f0:	c0 0d       	add	r28, r0
    89f2:	d1 1d       	adc	r29, r1
    89f4:	11 24       	eor	r1, r1
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:315
}
//// nastavi cas termostatu
void thermostat_program_set_time(uint8_t program_id, uint8_t interval_id, uint8_t start_hour, uint8_t start_min, uint8_t stop_hour, uint8_t stop_min, uint8_t active)
{
  uint8_t start, stop;
  start = ((start_hour << 3) & 0b11111000) + (((start_min / 15) << 1) & 0b00000110 ) + (active & 0b00000001);
    89f6:	82 2f       	mov	r24, r18
    89f8:	0e 94 a6 8b 	call	0x1174c	; 0x1174c <__udivmodqi4>
    89fc:	68 2f       	mov	r22, r24
    89fe:	66 0f       	add	r22, r22
    8a00:	66 70       	andi	r22, 0x06	; 6
    8a02:	88 e0       	ldi	r24, 0x08	; 8
    8a04:	48 9f       	mul	r20, r24
    8a06:	a0 01       	movw	r20, r0
    8a08:	11 24       	eor	r1, r1
    8a0a:	9c 2d       	mov	r25, r12
    8a0c:	91 70       	andi	r25, 0x01	; 1
    8a0e:	c9 2e       	mov	r12, r25
    8a10:	c4 0e       	add	r12, r20
    8a12:	6c 0d       	add	r22, r12
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:317
  stop = ((stop_hour << 3) & 0b11111000) + ((stop_min / 15) & 0b00000011);
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1, start);
    8a14:	ce 01       	movw	r24, r28
    8a16:	02 96       	adiw	r24, 0x02	; 2
    8a18:	0e 94 81 44 	call	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:318
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1, stop);
    8a1c:	60 2f       	mov	r22, r16
    8a1e:	ce 01       	movw	r24, r28
    8a20:	03 96       	adiw	r24, 0x03	; 3
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:319
}
    8a22:	df 91       	pop	r29
    8a24:	cf 91       	pop	r28
    8a26:	1f 91       	pop	r17
    8a28:	0f 91       	pop	r16
    8a2a:	ef 90       	pop	r14
    8a2c:	cf 90       	pop	r12
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:318
{
  uint8_t start, stop;
  start = ((start_hour << 3) & 0b11111000) + (((start_min / 15) << 1) & 0b00000110 ) + (active & 0b00000001);
  stop = ((stop_hour << 3) & 0b11111000) + ((stop_min / 15) & 0b00000011);
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1, start);
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1, stop);
    8a2e:	0c 94 81 44 	jmp	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>

00008a32 <thermostat_program_set_name(unsigned char, char*)>:
_Z27thermostat_program_set_namehPc():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:282
    if (t == 0) break;
  }
}
//// nastavi pojmenovani programu
void thermostat_program_set_name(uint8_t program_id, char *name)
{
    8a32:	ef 92       	push	r14
    8a34:	ff 92       	push	r15
    8a36:	0f 93       	push	r16
    8a38:	1f 93       	push	r17
    8a3a:	cf 93       	push	r28
    8a3c:	df 93       	push	r29
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:285
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
  {
    EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + i + eeprom_thermostat_program_name, name[i]);
    8a3e:	9d e4       	ldi	r25, 0x4D	; 77
    8a40:	89 9f       	mul	r24, r25
    8a42:	80 01       	movw	r16, r0
    8a44:	11 24       	eor	r1, r1
    8a46:	eb 01       	movw	r28, r22
    8a48:	78 01       	movw	r14, r16
    8a4a:	82 e8       	ldi	r24, 0x82	; 130
    8a4c:	e8 1a       	sub	r14, r24
    8a4e:	8c ef       	ldi	r24, 0xFC	; 252
    8a50:	f8 0a       	sbc	r15, r24
    8a52:	08 57       	subi	r16, 0x78	; 120
    8a54:	1c 4f       	sbci	r17, 0xFC	; 252
    8a56:	69 91       	ld	r22, Y+
    8a58:	c7 01       	movw	r24, r14
    8a5a:	0e 94 81 44 	call	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:286
    if (name[i] == 0) break;
    8a5e:	fe 01       	movw	r30, r28
    8a60:	31 97       	sbiw	r30, 0x01	; 1
    8a62:	80 81       	ld	r24, Z
    8a64:	88 23       	and	r24, r24
    8a66:	31 f0       	breq	.+12     	; 0x8a74 <thermostat_program_set_name(unsigned char, char*)+0x42>
    8a68:	9f ef       	ldi	r25, 0xFF	; 255
    8a6a:	e9 1a       	sub	r14, r25
    8a6c:	f9 0a       	sbc	r15, r25
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:283
  }
}
//// nastavi pojmenovani programu
void thermostat_program_set_name(uint8_t program_id, char *name)
{
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
    8a6e:	e0 16       	cp	r14, r16
    8a70:	f1 06       	cpc	r15, r17
    8a72:	89 f7       	brne	.-30     	; 0x8a56 <thermostat_program_set_name(unsigned char, char*)+0x24>
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:288
  {
    EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + i + eeprom_thermostat_program_name, name[i]);
    if (name[i] == 0) break;
  }
}
    8a74:	df 91       	pop	r29
    8a76:	cf 91       	pop	r28
    8a78:	1f 91       	pop	r17
    8a7a:	0f 91       	pop	r16
    8a7c:	ff 90       	pop	r15
    8a7e:	ef 90       	pop	r14
    8a80:	08 95       	ret

00008a82 <thermostat_ring_set_pid_eeprom(unsigned char)>:
_Z30thermostat_ring_set_pid_eepromh():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:233
  PID_d[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d);
  PID_time[idx] = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer);
}

void thermostat_ring_set_pid_eeprom(uint8_t idx)
{
    8a82:	ef 92       	push	r14
    8a84:	ff 92       	push	r15
    8a86:	0f 93       	push	r16
    8a88:	1f 93       	push	r17
    8a8a:	cf 93       	push	r28
    8a8c:	df 93       	push	r29
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:234
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_p, PID_p[idx]);
    8a8e:	e8 2e       	mov	r14, r24
    8a90:	f1 2c       	mov	r15, r1
    8a92:	91 e2       	ldi	r25, 0x21	; 33
    8a94:	89 9f       	mul	r24, r25
    8a96:	e0 01       	movw	r28, r0
    8a98:	11 24       	eor	r1, r1
    8a9a:	87 01       	movw	r16, r14
    8a9c:	00 0f       	add	r16, r16
    8a9e:	11 1f       	adc	r17, r17
    8aa0:	00 0f       	add	r16, r16
    8aa2:	11 1f       	adc	r17, r17
    8aa4:	f8 01       	movw	r30, r16
    8aa6:	e0 5b       	subi	r30, 0xB0	; 176
    8aa8:	f5 4f       	sbci	r31, 0xF5	; 245
    8aaa:	40 81       	ld	r20, Z
    8aac:	51 81       	ldd	r21, Z+1	; 0x01
    8aae:	62 81       	ldd	r22, Z+2	; 0x02
    8ab0:	73 81       	ldd	r23, Z+3	; 0x03
    8ab2:	ce 01       	movw	r24, r28
    8ab4:	80 5a       	subi	r24, 0xA0	; 160
    8ab6:	9e 4f       	sbci	r25, 0xFE	; 254
    8ab8:	0e 94 83 44 	call	0x8906	; 0x8906 <EEPROMwriteFloat(unsigned int, float)>
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:235
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_i, PID_i[idx]);
    8abc:	f8 01       	movw	r30, r16
    8abe:	e4 57       	subi	r30, 0x74	; 116
    8ac0:	f5 4f       	sbci	r31, 0xF5	; 245
    8ac2:	40 81       	ld	r20, Z
    8ac4:	51 81       	ldd	r21, Z+1	; 0x01
    8ac6:	62 81       	ldd	r22, Z+2	; 0x02
    8ac8:	73 81       	ldd	r23, Z+3	; 0x03
    8aca:	ce 01       	movw	r24, r28
    8acc:	8c 59       	subi	r24, 0x9C	; 156
    8ace:	9e 4f       	sbci	r25, 0xFE	; 254
    8ad0:	0e 94 83 44 	call	0x8906	; 0x8906 <EEPROMwriteFloat(unsigned int, float)>
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:236
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d, PID_d[idx]);
    8ad4:	f8 01       	movw	r30, r16
    8ad6:	e8 53       	subi	r30, 0x38	; 56
    8ad8:	f5 4f       	sbci	r31, 0xF5	; 245
    8ada:	40 81       	ld	r20, Z
    8adc:	51 81       	ldd	r21, Z+1	; 0x01
    8ade:	62 81       	ldd	r22, Z+2	; 0x02
    8ae0:	73 81       	ldd	r23, Z+3	; 0x03
    8ae2:	ce 01       	movw	r24, r28
    8ae4:	88 59       	subi	r24, 0x98	; 152
    8ae6:	9e 4f       	sbci	r25, 0xFE	; 254
    8ae8:	0e 94 83 44 	call	0x8906	; 0x8906 <EEPROMwriteFloat(unsigned int, float)>
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:237
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
    8aec:	f7 01       	movw	r30, r14
    8aee:	ec 5f       	subi	r30, 0xFC	; 252
    8af0:	f4 4f       	sbci	r31, 0xF4	; 244
    8af2:	60 81       	ld	r22, Z
    8af4:	ce 01       	movw	r24, r28
    8af6:	84 59       	subi	r24, 0x94	; 148
    8af8:	9e 4f       	sbci	r25, 0xFE	; 254
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:238
}
    8afa:	df 91       	pop	r29
    8afc:	cf 91       	pop	r28
    8afe:	1f 91       	pop	r17
    8b00:	0f 91       	pop	r16
    8b02:	ff 90       	pop	r15
    8b04:	ef 90       	pop	r14
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:237
void thermostat_ring_set_pid_eeprom(uint8_t idx)
{
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_p, PID_p[idx]);
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_i, PID_i[idx]);
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d, PID_d[idx]);
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
    8b06:	0c 94 81 44 	jmp	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>

00008b0a <thermostat_ring_set_mezni(unsigned char, int)>:
_Z25thermostat_ring_set_meznihi():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:157
int thermostat_ring_get_mezni(uint8_t idx)
{
  return (EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni) << 8) + EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1);
}
void thermostat_ring_set_mezni(uint8_t idx, int temp)
{
    8b0a:	1f 93       	push	r17
    8b0c:	cf 93       	push	r28
    8b0e:	df 93       	push	r29
    8b10:	16 2f       	mov	r17, r22
    8b12:	67 2f       	mov	r22, r23
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:158
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni, temp >> 8);
    8b14:	91 e2       	ldi	r25, 0x21	; 33
    8b16:	89 9f       	mul	r24, r25
    8b18:	e0 01       	movw	r28, r0
    8b1a:	11 24       	eor	r1, r1
    8b1c:	ce 01       	movw	r24, r28
    8b1e:	8a 5a       	subi	r24, 0xAA	; 170
    8b20:	9e 4f       	sbci	r25, 0xFE	; 254
    8b22:	0e 94 81 44 	call	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:159
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1, temp & 0xff);
    8b26:	61 2f       	mov	r22, r17
    8b28:	ce 01       	movw	r24, r28
    8b2a:	89 5a       	subi	r24, 0xA9	; 169
    8b2c:	9e 4f       	sbci	r25, 0xFE	; 254
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:160
}
    8b2e:	df 91       	pop	r29
    8b30:	cf 91       	pop	r28
    8b32:	1f 91       	pop	r17
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:159
  return (EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni) << 8) + EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1);
}
void thermostat_ring_set_mezni(uint8_t idx, int temp)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni, temp >> 8);
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1, temp & 0xff);
    8b34:	0c 94 81 44 	jmp	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>

00008b38 <thermostat_ring_set_name(unsigned char, char*)>:
_Z24thermostat_ring_set_namehPc():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:110
    name[i] = t;
    if (t == 0) break;
  }
}
void thermostat_ring_set_name(uint8_t idx, char *name)
{
    8b38:	df 92       	push	r13
    8b3a:	ef 92       	push	r14
    8b3c:	ff 92       	push	r15
    8b3e:	0f 93       	push	r16
    8b40:	1f 93       	push	r17
    8b42:	cf 93       	push	r28
    8b44:	df 93       	push	r29
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:115
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = name[i];
    EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i, t);
    8b46:	91 e2       	ldi	r25, 0x21	; 33
    8b48:	89 9f       	mul	r24, r25
    8b4a:	e0 01       	movw	r28, r0
    8b4c:	11 24       	eor	r1, r1
    8b4e:	7b 01       	movw	r14, r22
    8b50:	8e 01       	movw	r16, r28
    8b52:	04 5b       	subi	r16, 0xB4	; 180
    8b54:	1e 4f       	sbci	r17, 0xFE	; 254
    8b56:	cb 5a       	subi	r28, 0xAB	; 171
    8b58:	de 4f       	sbci	r29, 0xFE	; 254
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:114
void thermostat_ring_set_name(uint8_t idx, char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = name[i];
    8b5a:	f7 01       	movw	r30, r14
    8b5c:	d1 90       	ld	r13, Z+
    8b5e:	7f 01       	movw	r14, r30
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:115
    EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i, t);
    8b60:	6d 2d       	mov	r22, r13
    8b62:	c8 01       	movw	r24, r16
    8b64:	0e 94 81 44 	call	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:116
    if (t == 0) break;
    8b68:	dd 20       	and	r13, r13
    8b6a:	29 f0       	breq	.+10     	; 0x8b76 <thermostat_ring_set_name(unsigned char, char*)+0x3e>
    8b6c:	0f 5f       	subi	r16, 0xFF	; 255
    8b6e:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:112
  }
}
void thermostat_ring_set_name(uint8_t idx, char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
    8b70:	0c 17       	cp	r16, r28
    8b72:	1d 07       	cpc	r17, r29
    8b74:	91 f7       	brne	.-28     	; 0x8b5a <thermostat_ring_set_name(unsigned char, char*)+0x22>
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:118
  {
    t = name[i];
    EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i, t);
    if (t == 0) break;
  }
}
    8b76:	df 91       	pop	r29
    8b78:	cf 91       	pop	r28
    8b7a:	1f 91       	pop	r17
    8b7c:	0f 91       	pop	r16
    8b7e:	ff 90       	pop	r15
    8b80:	ef 90       	pop	r14
    8b82:	df 90       	pop	r13
    8b84:	08 95       	ret

00008b86 <thermostat_ring_clear(unsigned char)>:
_Z21thermostat_ring_clearh():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:419
  return ret;
}


void thermostat_ring_clear(uint8_t idx)
{
    8b86:	8f 92       	push	r8
    8b88:	9f 92       	push	r9
    8b8a:	af 92       	push	r10
    8b8c:	bf 92       	push	r11
    8b8e:	ef 92       	push	r14
    8b90:	ff 92       	push	r15
    8b92:	0f 93       	push	r16
    8b94:	1f 93       	push	r17
    8b96:	cf 93       	push	r28
    8b98:	c8 2f       	mov	r28, r24
thermostat_ring_pid_set_kp():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:242
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
}

void thermostat_ring_pid_set_kp(uint8_t id, float x)
{
  PID_p[id] = x;
    8b9a:	e8 2e       	mov	r14, r24
    8b9c:	f1 2c       	mov	r15, r1
    8b9e:	87 01       	movw	r16, r14
    8ba0:	00 0f       	add	r16, r16
    8ba2:	11 1f       	adc	r17, r17
    8ba4:	00 0f       	add	r16, r16
    8ba6:	11 1f       	adc	r17, r17
    8ba8:	f8 01       	movw	r30, r16
    8baa:	e0 5b       	subi	r30, 0xB0	; 176
    8bac:	f5 4f       	sbci	r31, 0xF5	; 245
    8bae:	81 2c       	mov	r8, r1
    8bb0:	91 2c       	mov	r9, r1
    8bb2:	90 e8       	ldi	r25, 0x80	; 128
    8bb4:	a9 2e       	mov	r10, r25
    8bb6:	9f e3       	ldi	r25, 0x3F	; 63
    8bb8:	b9 2e       	mov	r11, r25
    8bba:	80 82       	st	Z, r8
    8bbc:	91 82       	std	Z+1, r9	; 0x01
    8bbe:	a2 82       	std	Z+2, r10	; 0x02
    8bc0:	b3 82       	std	Z+3, r11	; 0x03
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:243
  thermostat_ring_update_pid_parameters(id);
    8bc2:	8c 2f       	mov	r24, r28
    8bc4:	0e 94 00 2c 	call	0x5800	; 0x5800 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:244
  thermostat_ring_set_pid_eeprom(id);
    8bc8:	8c 2f       	mov	r24, r28
    8bca:	0e 94 41 45 	call	0x8a82	; 0x8a82 <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_pid_set_ki():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:248
}
void thermostat_ring_pid_set_ki(uint8_t id, float x)
{
  PID_i[id] = x;
    8bce:	f8 01       	movw	r30, r16
    8bd0:	e4 57       	subi	r30, 0x74	; 116
    8bd2:	f5 4f       	sbci	r31, 0xF5	; 245
    8bd4:	80 e0       	ldi	r24, 0x00	; 0
    8bd6:	90 e0       	ldi	r25, 0x00	; 0
    8bd8:	a0 e0       	ldi	r26, 0x00	; 0
    8bda:	bf e3       	ldi	r27, 0x3F	; 63
    8bdc:	80 83       	st	Z, r24
    8bde:	91 83       	std	Z+1, r25	; 0x01
    8be0:	a2 83       	std	Z+2, r26	; 0x02
    8be2:	b3 83       	std	Z+3, r27	; 0x03
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:249
  thermostat_ring_update_pid_parameters(id);
    8be4:	8c 2f       	mov	r24, r28
    8be6:	0e 94 00 2c 	call	0x5800	; 0x5800 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:250
  thermostat_ring_set_pid_eeprom(id);
    8bea:	8c 2f       	mov	r24, r28
    8bec:	0e 94 41 45 	call	0x8a82	; 0x8a82 <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_pid_set_kd():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:254
}
void thermostat_ring_pid_set_kd(uint8_t id, float x)
{
  PID_d[id] = x;
    8bf0:	f8 01       	movw	r30, r16
    8bf2:	e8 53       	subi	r30, 0x38	; 56
    8bf4:	f5 4f       	sbci	r31, 0xF5	; 245
    8bf6:	80 82       	st	Z, r8
    8bf8:	91 82       	std	Z+1, r9	; 0x01
    8bfa:	a2 82       	std	Z+2, r10	; 0x02
    8bfc:	b3 82       	std	Z+3, r11	; 0x03
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:255
  thermostat_ring_update_pid_parameters(id);
    8bfe:	8c 2f       	mov	r24, r28
    8c00:	0e 94 00 2c 	call	0x5800	; 0x5800 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:256
  thermostat_ring_set_pid_eeprom(id);
    8c04:	8c 2f       	mov	r24, r28
    8c06:	0e 94 41 45 	call	0x8a82	; 0x8a82 <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_pid_set_time():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:261
}

void thermostat_ring_pid_set_time(uint8_t id, uint8_t timer)
{
  PID_time[id] = timer;
    8c0a:	f7 01       	movw	r30, r14
    8c0c:	ec 5f       	subi	r30, 0xFC	; 252
    8c0e:	f4 4f       	sbci	r31, 0xF4	; 244
    8c10:	8c e3       	ldi	r24, 0x3C	; 60
    8c12:	80 83       	st	Z, r24
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:262
  thermostat_ring_update_pid_parameters(id);
    8c14:	8c 2f       	mov	r24, r28
    8c16:	0e 94 00 2c 	call	0x5800	; 0x5800 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:263
  thermostat_ring_set_pid_eeprom(id);
    8c1a:	8c 2f       	mov	r24, r28
    8c1c:	0e 94 41 45 	call	0x8a82	; 0x8a82 <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_set_asociate_tds():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:170
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
}
void thermostat_ring_set_asociate_tds(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds, id);
    8c20:	81 e2       	ldi	r24, 0x21	; 33
    8c22:	c8 9f       	mul	r28, r24
    8c24:	80 01       	movw	r16, r0
    8c26:	11 24       	eor	r1, r1
    8c28:	6f ef       	ldi	r22, 0xFF	; 255
    8c2a:	c8 01       	movw	r24, r16
    8c2c:	84 5a       	subi	r24, 0xA4	; 164
    8c2e:	9e 4f       	sbci	r25, 0xFE	; 254
    8c30:	0e 94 81 44 	call	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>
_Z21thermostat_ring_clearh():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:425
  thermostat_ring_pid_set_kp(idx, 1);
  thermostat_ring_pid_set_ki(idx, 0.5);
  thermostat_ring_pid_set_kd(idx, 1);
  thermostat_ring_pid_set_time(idx, 60);
  thermostat_ring_set_asociate_tds(idx, 255);
  thermostat_ring_set_mezni(idx, 220);
    8c34:	6c ed       	ldi	r22, 0xDC	; 220
    8c36:	70 e0       	ldi	r23, 0x00	; 0
    8c38:	8c 2f       	mov	r24, r28
    8c3a:	0e 94 85 45 	call	0x8b0a	; 0x8b0a <thermostat_ring_set_mezni(unsigned char, int)>
thermostat_ring_set_program_id():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:148
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
}
void thermostat_ring_set_program_id(uint8_t idx, uint8_t id)
{
  return EEPROM.write((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program, id);
    8c3e:	6f ef       	ldi	r22, 0xFF	; 255
    8c40:	c8 01       	movw	r24, r16
    8c42:	85 5a       	subi	r24, 0xA5	; 165
    8c44:	9e 4f       	sbci	r25, 0xFE	; 254
    8c46:	0e 94 81 44 	call	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>
thermostat_ring_set_state():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:23
{
  return therm_stav[idx];
}
void thermostat_ring_set_state(uint8_t idx, uint8_t stav)
{
  therm_stav[idx] = stav;
    8c4a:	f7 01       	movw	r30, r14
    8c4c:	e5 53       	subi	r30, 0x35	; 53
    8c4e:	f4 4f       	sbci	r31, 0xF4	; 244
    8c50:	10 82       	st	Z, r1
thermostat_ring_set_active():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:137
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active);
}
void thermostat_ring_set_active(uint8_t idx, uint8_t ready)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active, ready);
    8c52:	6f ef       	ldi	r22, 0xFF	; 255
    8c54:	c8 01       	movw	r24, r16
    8c56:	83 5a       	subi	r24, 0xA3	; 163
    8c58:	9e 4f       	sbci	r25, 0xFE	; 254
    8c5a:	0e 94 81 44 	call	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>
thermostat_ring_set_output():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:127
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
}
void thermostat_ring_set_output(uint8_t idx, uint8_t output)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output, output);
    8c5e:	6f ef       	ldi	r22, 0xFF	; 255
    8c60:	c8 01       	movw	r24, r16
    8c62:	81 5a       	subi	r24, 0xA1	; 161
    8c64:	9e 4f       	sbci	r25, 0xFE	; 254
    8c66:	0e 94 81 44 	call	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>
thermostat_ring_set_mode():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:180
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_mode);
}
void thermostat_ring_set_mode(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mode, id);
    8c6a:	60 e0       	ldi	r22, 0x00	; 0
    8c6c:	c8 01       	movw	r24, r16
    8c6e:	82 5a       	subi	r24, 0xA2	; 162
    8c70:	9e 4f       	sbci	r25, 0xFE	; 254
    8c72:	0e 94 81 44 	call	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>
_Z21thermostat_ring_clearh():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:432
  thermostat_ring_set_state(idx, 0);
  thermostat_ring_set_power(idx, 0);
  thermostat_ring_set_active(idx, RING_FREE);
  thermostat_ring_set_output(idx, 255);
  thermostat_ring_set_mode(idx, 0);
  thermostat_ring_set_name(idx, "FREE");
    8c76:	6e e1       	ldi	r22, 0x1E	; 30
    8c78:	73 e0       	ldi	r23, 0x03	; 3
    8c7a:	8c 2f       	mov	r24, r28
    8c7c:	0e 94 9c 45 	call	0x8b38	; 0x8b38 <thermostat_ring_set_name(unsigned char, char*)>
thermostat_ring_set_status_bites():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:202
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
    8c80:	60 e0       	ldi	r22, 0x00	; 0
    8c82:	c8 01       	movw	r24, r16
    8c84:	88 5a       	subi	r24, 0xA8	; 168
    8c86:	9e 4f       	sbci	r25, 0xFE	; 254
_Z21thermostat_ring_clearh():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:434
  thermostat_ring_set_active(idx, RING_FREE);
  thermostat_ring_set_output(idx, 255);
  thermostat_ring_set_mode(idx, 0);
  thermostat_ring_set_name(idx, "FREE");
  thermostat_ring_set_status_bites(idx, 0);
}
    8c88:	cf 91       	pop	r28
    8c8a:	1f 91       	pop	r17
    8c8c:	0f 91       	pop	r16
    8c8e:	ff 90       	pop	r15
    8c90:	ef 90       	pop	r14
    8c92:	bf 90       	pop	r11
    8c94:	af 90       	pop	r10
    8c96:	9f 90       	pop	r9
    8c98:	8f 90       	pop	r8
thermostat_ring_set_status_bites():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:202
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
    8c9a:	0c 94 81 44 	jmp	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>

00008c9e <thermostat_default_ring_set_mode(unsigned char)>:
_Z32thermostat_default_ring_set_modeh():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:180
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_mode);
}
void thermostat_ring_set_mode(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mode, id);
    8c9e:	20 91 ca 0b 	lds	r18, 0x0BCA	; 0x800bca <default_ring>
    8ca2:	91 e2       	ldi	r25, 0x21	; 33
    8ca4:	29 9f       	mul	r18, r25
    8ca6:	90 01       	movw	r18, r0
    8ca8:	11 24       	eor	r1, r1
    8caa:	68 2f       	mov	r22, r24
    8cac:	c9 01       	movw	r24, r18
    8cae:	82 5a       	subi	r24, 0xA2	; 162
    8cb0:	9e 4f       	sbci	r25, 0xFE	; 254
    8cb2:	0e 94 81 44 	call	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1399
  return ret;
}
uint8_t thermostat_default_ring_set_mode(uint8_t args)
{
  thermostat_ring_set_mode(default_ring, args);
}
    8cb6:	08 95       	ret

00008cb8 <set_tds18s20(unsigned char, struct_DDS18s20*)>:
_Z12set_tds18s20hP15struct_DDS18s20():
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:45
  }
  return ret;
}
/// nastavi strukturu tds
void set_tds18s20(uint8_t idx, struct_DDS18s20 *tds)
{
    8cb8:	af 92       	push	r10
    8cba:	bf 92       	push	r11
    8cbc:	cf 92       	push	r12
    8cbe:	df 92       	push	r13
    8cc0:	ef 92       	push	r14
    8cc2:	ff 92       	push	r15
    8cc4:	0f 93       	push	r16
    8cc6:	1f 93       	push	r17
    8cc8:	cf 93       	push	r28
    8cca:	df 93       	push	r29
    8ccc:	7b 01       	movw	r14, r22
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:46
  EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used, tds->used);
    8cce:	96 e1       	ldi	r25, 0x16	; 22
    8cd0:	89 9f       	mul	r24, r25
    8cd2:	e0 01       	movw	r28, r0
    8cd4:	11 24       	eor	r1, r1
    8cd6:	f7 01       	movw	r30, r14
    8cd8:	61 91       	ld	r22, Z+
    8cda:	6f 01       	movw	r12, r30
    8cdc:	ce 01       	movw	r24, r28
    8cde:	88 53       	subi	r24, 0x38	; 56
    8ce0:	9f 4f       	sbci	r25, 0xFF	; 255
    8ce2:	0e 94 81 44 	call	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>
    8ce6:	8e 01       	movw	r16, r28
    8ce8:	07 53       	subi	r16, 0x37	; 55
    8cea:	1f 4f       	sbci	r17, 0xFF	; 255
    8cec:	5e 01       	movw	r10, r28
    8cee:	f1 ed       	ldi	r31, 0xD1	; 209
    8cf0:	af 0e       	add	r10, r31
    8cf2:	b1 1c       	adc	r11, r1
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:49
  for (uint8_t m = 0; m < 8; m++)
  {
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_rom + m, tds->rom[m]);
    8cf4:	f6 01       	movw	r30, r12
    8cf6:	61 91       	ld	r22, Z+
    8cf8:	6f 01       	movw	r12, r30
    8cfa:	c8 01       	movw	r24, r16
    8cfc:	0e 94 81 44 	call	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:50
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m, tds->name[m]);
    8d00:	f6 01       	movw	r30, r12
    8d02:	62 85       	ldd	r22, Z+10	; 0x0a
    8d04:	c8 01       	movw	r24, r16
    8d06:	0b 96       	adiw	r24, 0x0b	; 11
    8d08:	0e 94 81 44 	call	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>
    8d0c:	0f 5f       	subi	r16, 0xFF	; 255
    8d0e:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:47
}
/// nastavi strukturu tds
void set_tds18s20(uint8_t idx, struct_DDS18s20 *tds)
{
  EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used, tds->used);
  for (uint8_t m = 0; m < 8; m++)
    8d10:	0a 15       	cp	r16, r10
    8d12:	1b 05       	cpc	r17, r11
    8d14:	79 f7       	brne	.-34     	; 0x8cf4 <set_tds18s20(unsigned char, struct_DDS18s20*)+0x3c>
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:52
  {
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_rom + m, tds->rom[m]);
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m, tds->name[m]);
  }
  EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_assigned, tds->assigned_ds2482 );
    8d16:	f7 01       	movw	r30, r14
    8d18:	61 85       	ldd	r22, Z+9	; 0x09
    8d1a:	c8 01       	movw	r24, r16
    8d1c:	0e 94 81 44 	call	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:53
  EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_high, (tds->offset >> 8) & 0xff);
    8d20:	f7 01       	movw	r30, r14
    8d22:	63 85       	ldd	r22, Z+11	; 0x0b
    8d24:	ce 01       	movw	r24, r28
    8d26:	8e 52       	subi	r24, 0x2E	; 46
    8d28:	9f 4f       	sbci	r25, 0xFF	; 255
    8d2a:	0e 94 81 44 	call	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:54
  EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_low, (tds->offset) & 0xff);
    8d2e:	f7 01       	movw	r30, r14
    8d30:	62 85       	ldd	r22, Z+10	; 0x0a
    8d32:	ce 01       	movw	r24, r28
    8d34:	8d 52       	subi	r24, 0x2D	; 45
    8d36:	9f 4f       	sbci	r25, 0xFF	; 255
    8d38:	0e 94 81 44 	call	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:55
  EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_period , tds->period);
    8d3c:	f7 01       	movw	r30, r14
    8d3e:	64 89       	ldd	r22, Z+20	; 0x14
    8d40:	ce 01       	movw	r24, r28
    8d42:	84 52       	subi	r24, 0x24	; 36
    8d44:	9f 4f       	sbci	r25, 0xFF	; 255
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:56
}
    8d46:	df 91       	pop	r29
    8d48:	cf 91       	pop	r28
    8d4a:	1f 91       	pop	r17
    8d4c:	0f 91       	pop	r16
    8d4e:	ff 90       	pop	r15
    8d50:	ef 90       	pop	r14
    8d52:	df 90       	pop	r13
    8d54:	cf 90       	pop	r12
    8d56:	bf 90       	pop	r11
    8d58:	af 90       	pop	r10
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:55
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m, tds->name[m]);
  }
  EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_assigned, tds->assigned_ds2482 );
  EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_high, (tds->offset >> 8) & 0xff);
  EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_low, (tds->offset) & 0xff);
  EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_period , tds->period);
    8d5a:	0c 94 81 44 	jmp	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>

00008d5e <device_set_name(char*)>:
_Z15device_set_namePc():
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:74
    }
  }
}
//// ulozi nazev zarizeni
void device_set_name(char *name)
{
    8d5e:	ff 92       	push	r15
    8d60:	0f 93       	push	r16
    8d62:	1f 93       	push	r17
    8d64:	cf 93       	push	r28
    8d66:	df 93       	push	r29
    8d68:	8c 01       	movw	r16, r24
    8d6a:	d0 e0       	ldi	r29, 0x00	; 0
    8d6c:	c0 e0       	ldi	r28, 0x00	; 0
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:78
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = name[i];
    8d6e:	f8 01       	movw	r30, r16
    8d70:	f1 90       	ld	r15, Z+
    8d72:	8f 01       	movw	r16, r30
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:79
    EEPROM.write(device_nazev +  i, t);
    8d74:	6f 2d       	mov	r22, r15
    8d76:	ce 01       	movw	r24, r28
    8d78:	8c 59       	subi	r24, 0x9C	; 156
    8d7a:	9f 4f       	sbci	r25, 0xFF	; 255
    8d7c:	0e 94 81 44 	call	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:80
    if (t == 0)
    8d80:	f1 10       	cpse	r15, r1
    8d82:	0b c0       	rjmp	.+22     	; 0x8d9a <device_set_name(char*)+0x3c>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:82
    {
      EEPROM.write(device_nazev +  i + 1, 0);
    8d84:	60 e0       	ldi	r22, 0x00	; 0
    8d86:	ce 01       	movw	r24, r28
    8d88:	8b 59       	subi	r24, 0x9B	; 155
    8d8a:	9f 4f       	sbci	r25, 0xFF	; 255
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:86
      break;
    }
  }
}
    8d8c:	df 91       	pop	r29
    8d8e:	cf 91       	pop	r28
    8d90:	1f 91       	pop	r17
    8d92:	0f 91       	pop	r16
    8d94:	ff 90       	pop	r15
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:82
  {
    t = name[i];
    EEPROM.write(device_nazev +  i, t);
    if (t == 0)
    {
      EEPROM.write(device_nazev +  i + 1, 0);
    8d96:	0c 94 81 44 	jmp	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>
    8d9a:	21 96       	adiw	r28, 0x01	; 1
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:76
}
//// ulozi nazev zarizeni
void device_set_name(char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
    8d9c:	c9 30       	cpi	r28, 0x09	; 9
    8d9e:	d1 05       	cpc	r29, r1
    8da0:	31 f7       	brne	.-52     	; 0x8d6e <device_set_name(char*)+0x10>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:86
    {
      EEPROM.write(device_nazev +  i + 1, 0);
      break;
    }
  }
}
    8da2:	df 91       	pop	r29
    8da4:	cf 91       	pop	r28
    8da6:	1f 91       	pop	r17
    8da8:	0f 91       	pop	r16
    8daa:	ff 90       	pop	r15
    8dac:	08 95       	ret

00008dae <save_setup_network()>:
_Z18save_setup_networkv():
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:41
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// ulozi nastaveni site
void save_setup_network(void)
{
    8dae:	ef 92       	push	r14
    8db0:	ff 92       	push	r15
    8db2:	0f 93       	push	r16
    8db4:	1f 93       	push	r17
    8db6:	cf 93       	push	r28
    8db8:	df 93       	push	r29
    8dba:	06 e1       	ldi	r16, 0x16	; 22
    8dbc:	10 e1       	ldi	r17, 0x10	; 16
    8dbe:	ce e6       	ldi	r28, 0x6E	; 110
    8dc0:	d0 e0       	ldi	r29, 0x00	; 0
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:42
  for (uint8_t m = 0; m < 6; m++) EEPROM.write(device_mac + m, device.mac[m]);
    8dc2:	f8 01       	movw	r30, r16
    8dc4:	61 91       	ld	r22, Z+
    8dc6:	8f 01       	movw	r16, r30
    8dc8:	ce 01       	movw	r24, r28
    8dca:	0e 94 81 44 	call	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>
    8dce:	21 96       	adiw	r28, 0x01	; 1
    8dd0:	c4 37       	cpi	r28, 0x74	; 116
    8dd2:	d1 05       	cpc	r29, r1
    8dd4:	b1 f7       	brne	.-20     	; 0x8dc2 <save_setup_network()+0x14>
    8dd6:	0c e1       	ldi	r16, 0x1C	; 28
    8dd8:	10 e1       	ldi	r17, 0x10	; 16
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:43
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_ip + m, device.myIP[m]);
    8dda:	f8 01       	movw	r30, r16
    8ddc:	61 91       	ld	r22, Z+
    8dde:	8f 01       	movw	r16, r30
    8de0:	ce 01       	movw	r24, r28
    8de2:	0e 94 81 44 	call	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>
    8de6:	21 96       	adiw	r28, 0x01	; 1
    8de8:	c8 37       	cpi	r28, 0x78	; 120
    8dea:	d1 05       	cpc	r29, r1
    8dec:	b1 f7       	brne	.-20     	; 0x8dda <save_setup_network()+0x2c>
    8dee:	00 e2       	ldi	r16, 0x20	; 32
    8df0:	10 e1       	ldi	r17, 0x10	; 16
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:44
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_mask + m, device.myMASK[m]);
    8df2:	f8 01       	movw	r30, r16
    8df4:	61 91       	ld	r22, Z+
    8df6:	8f 01       	movw	r16, r30
    8df8:	ce 01       	movw	r24, r28
    8dfa:	0e 94 81 44 	call	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>
    8dfe:	21 96       	adiw	r28, 0x01	; 1
    8e00:	cc 37       	cpi	r28, 0x7C	; 124
    8e02:	d1 05       	cpc	r29, r1
    8e04:	b1 f7       	brne	.-20     	; 0x8df2 <save_setup_network()+0x44>
    8e06:	28 e2       	ldi	r18, 0x28	; 40
    8e08:	e2 2e       	mov	r14, r18
    8e0a:	20 e1       	ldi	r18, 0x10	; 16
    8e0c:	f2 2e       	mov	r15, r18
    8e0e:	00 e8       	ldi	r16, 0x80	; 128
    8e10:	10 e0       	ldi	r17, 0x00	; 0
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:45
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_gw + m, device.myGW[m]);
    8e12:	f7 01       	movw	r30, r14
    8e14:	61 91       	ld	r22, Z+
    8e16:	7f 01       	movw	r14, r30
    8e18:	c8 01       	movw	r24, r16
    8e1a:	0e 94 81 44 	call	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>
    8e1e:	0f 5f       	subi	r16, 0xFF	; 255
    8e20:	1f 4f       	sbci	r17, 0xFF	; 255
    8e22:	04 38       	cpi	r16, 0x84	; 132
    8e24:	11 05       	cpc	r17, r1
    8e26:	a9 f7       	brne	.-22     	; 0x8e12 <save_setup_network()+0x64>
    8e28:	94 e2       	ldi	r25, 0x24	; 36
    8e2a:	e9 2e       	mov	r14, r25
    8e2c:	90 e1       	ldi	r25, 0x10	; 16
    8e2e:	f9 2e       	mov	r15, r25
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:46
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_dns + m, device.myDNS[m]);
    8e30:	f7 01       	movw	r30, r14
    8e32:	61 91       	ld	r22, Z+
    8e34:	7f 01       	movw	r14, r30
    8e36:	ce 01       	movw	r24, r28
    8e38:	0e 94 81 44 	call	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>
    8e3c:	21 96       	adiw	r28, 0x01	; 1
    8e3e:	c0 38       	cpi	r28, 0x80	; 128
    8e40:	d1 05       	cpc	r29, r1
    8e42:	b1 f7       	brne	.-20     	; 0x8e30 <save_setup_network()+0x82>
    8e44:	8c e2       	ldi	r24, 0x2C	; 44
    8e46:	e8 2e       	mov	r14, r24
    8e48:	80 e1       	ldi	r24, 0x10	; 16
    8e4a:	f8 2e       	mov	r15, r24
    8e4c:	c4 e6       	ldi	r28, 0x64	; 100
    8e4e:	d0 e0       	ldi	r29, 0x00	; 0
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:47
  for (uint8_t m = 0; m < 9; m++) EEPROM.write(device_nazev + m, device.nazev[m]);
    8e50:	f7 01       	movw	r30, r14
    8e52:	61 91       	ld	r22, Z+
    8e54:	7f 01       	movw	r14, r30
    8e56:	ce 01       	movw	r24, r28
    8e58:	0e 94 81 44 	call	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>
    8e5c:	21 96       	adiw	r28, 0x01	; 1
    8e5e:	cd 36       	cpi	r28, 0x6D	; 109
    8e60:	d1 05       	cpc	r29, r1
    8e62:	b1 f7       	brne	.-20     	; 0x8e50 <save_setup_network()+0xa2>
    8e64:	c6 e3       	ldi	r28, 0x36	; 54
    8e66:	d0 e1       	ldi	r29, 0x10	; 16
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:48
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_mqtt_server + m, device.mqtt_server[m]);
    8e68:	69 91       	ld	r22, Y+
    8e6a:	c8 01       	movw	r24, r16
    8e6c:	0e 94 81 44 	call	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>
    8e70:	0f 5f       	subi	r16, 0xFF	; 255
    8e72:	1f 4f       	sbci	r17, 0xFF	; 255
    8e74:	08 38       	cpi	r16, 0x88	; 136
    8e76:	11 05       	cpc	r17, r1
    8e78:	b9 f7       	brne	.-18     	; 0x8e68 <save_setup_network()+0xba>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:49
  EEPROM.write(device_mqtt_port, device.mqtt_port >> 8);
    8e7a:	60 91 3b 10 	lds	r22, 0x103B	; 0x80103b <device+0x25>
    8e7e:	88 e8       	ldi	r24, 0x88	; 136
    8e80:	90 e0       	ldi	r25, 0x00	; 0
    8e82:	0e 94 81 44 	call	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:50
  EEPROM.write(device_mqtt_port + 1, device.mqtt_port & 0xff);
    8e86:	60 91 3a 10 	lds	r22, 0x103A	; 0x80103a <device+0x24>
    8e8a:	89 e8       	ldi	r24, 0x89	; 137
    8e8c:	90 e0       	ldi	r25, 0x00	; 0
    8e8e:	0e 94 81 44 	call	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>
    8e92:	0c e3       	ldi	r16, 0x3C	; 60
    8e94:	10 e1       	ldi	r17, 0x10	; 16
    8e96:	ca e8       	ldi	r28, 0x8A	; 138
    8e98:	d0 e0       	ldi	r29, 0x00	; 0
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:51
  for (uint8_t m = 0; m < 20; m++) EEPROM.write(device_mqtt_user + m, device.mqtt_user[m]);
    8e9a:	f8 01       	movw	r30, r16
    8e9c:	61 91       	ld	r22, Z+
    8e9e:	8f 01       	movw	r16, r30
    8ea0:	ce 01       	movw	r24, r28
    8ea2:	0e 94 81 44 	call	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>
    8ea6:	21 96       	adiw	r28, 0x01	; 1
    8ea8:	ce 39       	cpi	r28, 0x9E	; 158
    8eaa:	d1 05       	cpc	r29, r1
    8eac:	b1 f7       	brne	.-20     	; 0x8e9a <save_setup_network()+0xec>
    8eae:	00 e5       	ldi	r16, 0x50	; 80
    8eb0:	10 e1       	ldi	r17, 0x10	; 16
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:52
  for (uint8_t m = 0; m < 20; m++) EEPROM.write(device_mqtt_key + m, device.mqtt_key[m]);
    8eb2:	f8 01       	movw	r30, r16
    8eb4:	61 91       	ld	r22, Z+
    8eb6:	8f 01       	movw	r16, r30
    8eb8:	ce 01       	movw	r24, r28
    8eba:	0e 94 81 44 	call	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>
    8ebe:	21 96       	adiw	r28, 0x01	; 1
    8ec0:	c2 3b       	cpi	r28, 0xB2	; 178
    8ec2:	d1 05       	cpc	r29, r1
    8ec4:	b1 f7       	brne	.-20     	; 0x8eb2 <save_setup_network()+0x104>
    8ec6:	04 e6       	ldi	r16, 0x64	; 100
    8ec8:	10 e1       	ldi	r17, 0x10	; 16
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:53
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_ntp_server + m, device.ntp_server[m]);
    8eca:	f8 01       	movw	r30, r16
    8ecc:	61 91       	ld	r22, Z+
    8ece:	8f 01       	movw	r16, r30
    8ed0:	ce 01       	movw	r24, r28
    8ed2:	0e 94 81 44 	call	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>
    8ed6:	21 96       	adiw	r28, 0x01	; 1
    8ed8:	c6 3b       	cpi	r28, 0xB6	; 182
    8eda:	d1 05       	cpc	r29, r1
    8edc:	b1 f7       	brne	.-20     	; 0x8eca <save_setup_network()+0x11c>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:54
}
    8ede:	df 91       	pop	r29
    8ee0:	cf 91       	pop	r28
    8ee2:	1f 91       	pop	r17
    8ee4:	0f 91       	pop	r16
    8ee6:	ff 90       	pop	r15
    8ee8:	ef 90       	pop	r14
    8eea:	08 95       	ret

00008eec <remote_tds_set_name(unsigned char, unsigned char, char*)>:
_Z19remote_tds_set_namehhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1316
  *active = EEPROM.read(remote_tds_name0 + (10 * idx) + 9);
}
///
/// nastavi topic
void remote_tds_set_name(uint8_t idx, uint8_t active , char *name)
{
    8eec:	cf 92       	push	r12
    8eee:	df 92       	push	r13
    8ef0:	ef 92       	push	r14
    8ef2:	ff 92       	push	r15
    8ef4:	0f 93       	push	r16
    8ef6:	1f 93       	push	r17
    8ef8:	cf 93       	push	r28
    8efa:	df 93       	push	r29
    8efc:	c6 2e       	mov	r12, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1322
  char tmp2[64];
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = name[i];
    EEPROM.write(remote_tds_name0 + (10 * idx) + i, t);
    8efe:	9a e0       	ldi	r25, 0x0A	; 10
    8f00:	89 9f       	mul	r24, r25
    8f02:	e0 01       	movw	r28, r0
    8f04:	11 24       	eor	r1, r1
    8f06:	7a 01       	movw	r14, r20
    8f08:	8e 01       	movw	r16, r28
    8f0a:	06 55       	subi	r16, 0x56	; 86
    8f0c:	1a 4f       	sbci	r17, 0xFA	; 250
    8f0e:	cd 54       	subi	r28, 0x4D	; 77
    8f10:	da 4f       	sbci	r29, 0xFA	; 250
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1321
{
  char tmp2[64];
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = name[i];
    8f12:	f7 01       	movw	r30, r14
    8f14:	d1 90       	ld	r13, Z+
    8f16:	7f 01       	movw	r14, r30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1322
    EEPROM.write(remote_tds_name0 + (10 * idx) + i, t);
    8f18:	6d 2d       	mov	r22, r13
    8f1a:	c8 01       	movw	r24, r16
    8f1c:	0e 94 81 44 	call	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1323
    if (t == 0) break;
    8f20:	dd 20       	and	r13, r13
    8f22:	29 f0       	breq	.+10     	; 0x8f2e <remote_tds_set_name(unsigned char, unsigned char, char*)+0x42>
    8f24:	0f 5f       	subi	r16, 0xFF	; 255
    8f26:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1319
/// nastavi topic
void remote_tds_set_name(uint8_t idx, uint8_t active , char *name)
{
  char tmp2[64];
  char t;
  for (uint8_t i = 0; i < 9; i++)
    8f28:	0c 17       	cp	r16, r28
    8f2a:	1d 07       	cpc	r17, r29
    8f2c:	91 f7       	brne	.-28     	; 0x8f12 <remote_tds_set_name(unsigned char, unsigned char, char*)+0x26>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1325
  {
    t = name[i];
    EEPROM.write(remote_tds_name0 + (10 * idx) + i, t);
    if (t == 0) break;
  }
  EEPROM.write(remote_tds_name0 + (10 * idx) + 9, active);
    8f2e:	6c 2d       	mov	r22, r12
    8f30:	ce 01       	movw	r24, r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1326
}
    8f32:	df 91       	pop	r29
    8f34:	cf 91       	pop	r28
    8f36:	1f 91       	pop	r17
    8f38:	0f 91       	pop	r16
    8f3a:	ff 90       	pop	r15
    8f3c:	ef 90       	pop	r14
    8f3e:	df 90       	pop	r13
    8f40:	cf 90       	pop	r12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1325
  {
    t = name[i];
    EEPROM.write(remote_tds_name0 + (10 * idx) + i, t);
    if (t == 0) break;
  }
  EEPROM.write(remote_tds_name0 + (10 * idx) + 9, active);
    8f42:	0c 94 81 44 	jmp	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>

00008f46 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224]>:
_ZN11EEPROMClass4readEi.isra.1():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/EEPROM/src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    8f46:	0c 94 e3 89 	jmp	0x113c6	; 0x113c6 <eeprom_read_byte>

00008f4a <EEPROMreadFloat(unsigned int)>:
_Z15EEPROMreadFloatj():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:58
}


//// cteni zapis eeprom float datovy typ
float EEPROMreadFloat(unsigned int addr)
{
    8f4a:	cf 92       	push	r12
    8f4c:	df 92       	push	r13
    8f4e:	ef 92       	push	r14
    8f50:	ff 92       	push	r15
    8f52:	0f 93       	push	r16
    8f54:	1f 93       	push	r17
    8f56:	cf 93       	push	r28
    8f58:	df 93       	push	r29
    8f5a:	00 d0       	rcall	.+0      	; 0x8f5c <EEPROMreadFloat(unsigned int)+0x12>
    8f5c:	1f 92       	push	r1
    8f5e:	cd b7       	in	r28, 0x3d	; 61
    8f60:	de b7       	in	r29, 0x3e	; 62
    8f62:	7e 01       	movw	r14, r28
    8f64:	25 e0       	ldi	r18, 0x05	; 5
    8f66:	e2 0e       	add	r14, r18
    8f68:	f1 1c       	adc	r15, r1
    8f6a:	8e 01       	movw	r16, r28
    8f6c:	0f 5f       	subi	r16, 0xFF	; 255
    8f6e:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:63
  union {
    uint8_t b[4];
    float f;
  } data;
  for (int i = 0; i < 4; i++) data.b[i] = EEPROM.read(addr + i);
    8f70:	6c 01       	movw	r12, r24
    8f72:	c0 1a       	sub	r12, r16
    8f74:	d1 0a       	sbc	r13, r17
    8f76:	c6 01       	movw	r24, r12
    8f78:	80 0f       	add	r24, r16
    8f7a:	91 1f       	adc	r25, r17
    8f7c:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224]>
    8f80:	f8 01       	movw	r30, r16
    8f82:	81 93       	st	Z+, r24
    8f84:	8f 01       	movw	r16, r30
    8f86:	ee 15       	cp	r30, r14
    8f88:	ff 05       	cpc	r31, r15
    8f8a:	a9 f7       	brne	.-22     	; 0x8f76 <EEPROMreadFloat(unsigned int)+0x2c>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:64
  return data.f;
    8f8c:	69 81       	ldd	r22, Y+1	; 0x01
    8f8e:	7a 81       	ldd	r23, Y+2	; 0x02
    8f90:	8b 81       	ldd	r24, Y+3	; 0x03
    8f92:	9c 81       	ldd	r25, Y+4	; 0x04
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:65
}
    8f94:	0f 90       	pop	r0
    8f96:	0f 90       	pop	r0
    8f98:	0f 90       	pop	r0
    8f9a:	0f 90       	pop	r0
    8f9c:	df 91       	pop	r29
    8f9e:	cf 91       	pop	r28
    8fa0:	1f 91       	pop	r17
    8fa2:	0f 91       	pop	r16
    8fa4:	ff 90       	pop	r15
    8fa6:	ef 90       	pop	r14
    8fa8:	df 90       	pop	r13
    8faa:	cf 90       	pop	r12
    8fac:	08 95       	ret

00008fae <thermostat_default_ring_has_mode(unsigned char)>:
_Z32thermostat_default_ring_has_modeh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1390
   funkce pro zjisteni, zda mode v args je aktivni a nebo ne
   return
     - uint8_t 1... activni, 0... neaktivni
*/
uint8_t thermostat_default_ring_has_mode(uint8_t args)
{
    8fae:	cf 93       	push	r28
    8fb0:	c8 2f       	mov	r28, r24
thermostat_ring_get_mode():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:176
}
//////////////////////////////////////////////////////////////////////////////////////////////////////
//// nastaveni/ziska modu k ringu termostatu
uint8_t thermostat_ring_get_mode(uint8_t idx)
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_mode);
    8fb2:	80 91 ca 0b 	lds	r24, 0x0BCA	; 0x800bca <default_ring>
    8fb6:	21 e2       	ldi	r18, 0x21	; 33
    8fb8:	82 9f       	mul	r24, r18
    8fba:	c0 01       	movw	r24, r0
    8fbc:	11 24       	eor	r1, r1
    8fbe:	82 5a       	subi	r24, 0xA2	; 162
    8fc0:	9e 4f       	sbci	r25, 0xFE	; 254
    8fc2:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224]>
thermostat_ring_get_mode_1():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:185
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mode, id);
}
bool thermostat_ring_get_mode_1(uint8_t idx, uint8_t args)
{
  bool ret = false;
  if (thermostat_ring_get_mode(idx) == args)
    8fc6:	91 e0       	ldi	r25, 0x01	; 1
    8fc8:	c8 13       	cpse	r28, r24
    8fca:	90 e0       	ldi	r25, 0x00	; 0
_Z32thermostat_default_ring_has_modeh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1395
  uint8_t ret = 0;
  if (thermostat_ring_get_mode_1(default_ring, args) == true)
    ret = 1;
  return ret;
}
    8fcc:	89 2f       	mov	r24, r25
    8fce:	cf 91       	pop	r28
    8fd0:	08 95       	ret

00008fd2 <get_tds18s20(unsigned char, struct_DDS18s20*)>:
_Z12get_tds18s20hP15struct_DDS18s20():
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:26
    if ( EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used) == 1) cnt++;
  return cnt;
}
/// ziska strikturu tds
uint8_t get_tds18s20(uint8_t idx, struct_DDS18s20 *tds)
{
    8fd2:	af 92       	push	r10
    8fd4:	bf 92       	push	r11
    8fd6:	cf 92       	push	r12
    8fd8:	df 92       	push	r13
    8fda:	ef 92       	push	r14
    8fdc:	ff 92       	push	r15
    8fde:	0f 93       	push	r16
    8fe0:	1f 93       	push	r17
    8fe2:	cf 93       	push	r28
    8fe4:	df 93       	push	r29
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:28
  uint8_t ret = 0;
  if (idx < HW_ONEWIRE_MAXROMS)
    8fe6:	86 30       	cpi	r24, 0x06	; 6
    8fe8:	08 f0       	brcs	.+2      	; 0x8fec <get_tds18s20(unsigned char, struct_DDS18s20*)+0x1a>
    8fea:	52 c0       	rjmp	.+164    	; 0x9090 <get_tds18s20(unsigned char, struct_DDS18s20*)+0xbe>
    8fec:	7b 01       	movw	r14, r22
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:30
  {
    tds->used = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used);
    8fee:	96 e1       	ldi	r25, 0x16	; 22
    8ff0:	89 9f       	mul	r24, r25
    8ff2:	e0 01       	movw	r28, r0
    8ff4:	11 24       	eor	r1, r1
    8ff6:	ce 01       	movw	r24, r28
    8ff8:	88 53       	subi	r24, 0x38	; 56
    8ffa:	9f 4f       	sbci	r25, 0xFF	; 255
    8ffc:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224]>
    9000:	f7 01       	movw	r30, r14
    9002:	81 93       	st	Z+, r24
    9004:	6f 01       	movw	r12, r30
    9006:	8e 01       	movw	r16, r28
    9008:	07 53       	subi	r16, 0x37	; 55
    900a:	1f 4f       	sbci	r17, 0xFF	; 255
    900c:	5e 01       	movw	r10, r28
    900e:	f1 ed       	ldi	r31, 0xD1	; 209
    9010:	af 0e       	add	r10, r31
    9012:	b1 1c       	adc	r11, r1
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:33
    for (uint8_t m = 0; m < 8; m++)
    {
      tds->rom[m] = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_rom + m);
    9014:	c8 01       	movw	r24, r16
    9016:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224]>
    901a:	f6 01       	movw	r30, r12
    901c:	81 93       	st	Z+, r24
    901e:	6f 01       	movw	r12, r30
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:34
      tds->name[m] = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m);
    9020:	c8 01       	movw	r24, r16
    9022:	0b 96       	adiw	r24, 0x0b	; 11
    9024:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224]>
    9028:	f6 01       	movw	r30, r12
    902a:	82 87       	std	Z+10, r24	; 0x0a
    902c:	0f 5f       	subi	r16, 0xFF	; 255
    902e:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:31
{
  uint8_t ret = 0;
  if (idx < HW_ONEWIRE_MAXROMS)
  {
    tds->used = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used);
    for (uint8_t m = 0; m < 8; m++)
    9030:	0a 15       	cp	r16, r10
    9032:	1b 05       	cpc	r17, r11
    9034:	79 f7       	brne	.-34     	; 0x9014 <get_tds18s20(unsigned char, struct_DDS18s20*)+0x42>
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:36
    {
      tds->rom[m] = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_rom + m);
      tds->name[m] = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m);
    }
    tds->assigned_ds2482 = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_assigned);
    9036:	c8 01       	movw	r24, r16
    9038:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224]>
    903c:	f7 01       	movw	r30, r14
    903e:	81 87       	std	Z+9, r24	; 0x09
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:37
    tds->offset = (EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_high) << 8) + EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_low);
    9040:	ce 01       	movw	r24, r28
    9042:	8e 52       	subi	r24, 0x2E	; 46
    9044:	9f 4f       	sbci	r25, 0xFF	; 255
    9046:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224]>
    904a:	18 2f       	mov	r17, r24
    904c:	ce 01       	movw	r24, r28
    904e:	8d 52       	subi	r24, 0x2D	; 45
    9050:	9f 4f       	sbci	r25, 0xFF	; 255
    9052:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224]>
    9056:	21 2f       	mov	r18, r17
    9058:	30 e0       	ldi	r19, 0x00	; 0
    905a:	32 2f       	mov	r19, r18
    905c:	22 27       	eor	r18, r18
    905e:	82 0f       	add	r24, r18
    9060:	93 2f       	mov	r25, r19
    9062:	91 1d       	adc	r25, r1
    9064:	f7 01       	movw	r30, r14
    9066:	93 87       	std	Z+11, r25	; 0x0b
    9068:	82 87       	std	Z+10, r24	; 0x0a
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:38
    tds->period = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_period);
    906a:	ce 01       	movw	r24, r28
    906c:	84 52       	subi	r24, 0x24	; 36
    906e:	9f 4f       	sbci	r25, 0xFF	; 255
    9070:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224]>
    9074:	f7 01       	movw	r30, r14
    9076:	84 8b       	std	Z+20, r24	; 0x14
    9078:	81 e0       	ldi	r24, 0x01	; 1
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:42
    ret = 1;
  }
  return ret;
}
    907a:	df 91       	pop	r29
    907c:	cf 91       	pop	r28
    907e:	1f 91       	pop	r17
    9080:	0f 91       	pop	r16
    9082:	ff 90       	pop	r15
    9084:	ef 90       	pop	r14
    9086:	df 90       	pop	r13
    9088:	cf 90       	pop	r12
    908a:	bf 90       	pop	r11
    908c:	af 90       	pop	r10
    908e:	08 95       	ret
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:27
  return cnt;
}
/// ziska strikturu tds
uint8_t get_tds18s20(uint8_t idx, struct_DDS18s20 *tds)
{
  uint8_t ret = 0;
    9090:	80 e0       	ldi	r24, 0x00	; 0
    9092:	f3 cf       	rjmp	.-26     	; 0x907a <get_tds18s20(unsigned char, struct_DDS18s20*)+0xa8>

00009094 <tds_update_associate()>:
_Z20tds_update_associatev():
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:128
  tds_set_clear(w_rom[idx].tds_idx);
}

//// funkce, ktera zpetne nastavi do w_rom tds_idx, do jake realne tds je to assiciovano
void tds_update_associate(void)
{
    9094:	ef 92       	push	r14
    9096:	ff 92       	push	r15
    9098:	0f 93       	push	r16
    909a:	1f 93       	push	r17
    909c:	cf 93       	push	r28
    909e:	df 93       	push	r29
    90a0:	cd b7       	in	r28, 0x3d	; 61
    90a2:	de b7       	in	r29, 0x3e	; 62
    90a4:	6e 97       	sbiw	r28, 0x1e	; 30
    90a6:	0f b6       	in	r0, 0x3f	; 63
    90a8:	f8 94       	cli
    90aa:	de bf       	out	0x3e, r29	; 62
    90ac:	0f be       	out	0x3f, r0	; 63
    90ae:	cd bf       	out	0x3d, r28	; 61
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:131
  struct_DDS18s20 tds;
  uint8_t tmp_rom[8];
  for (uint8_t r = 0; r < 8; r++) tmp_rom[r] = 0;
    90b0:	1f 8a       	std	Y+23, r1	; 0x17
    90b2:	18 8e       	std	Y+24, r1	; 0x18
    90b4:	19 8e       	std	Y+25, r1	; 0x19
    90b6:	1a 8e       	std	Y+26, r1	; 0x1a
    90b8:	1b 8e       	std	Y+27, r1	; 0x1b
    90ba:	1c 8e       	std	Y+28, r1	; 0x1c
    90bc:	1d 8e       	std	Y+29, r1	; 0x1d
    90be:	1e 8e       	std	Y+30, r1	; 0x1e
    90c0:	0b e7       	ldi	r16, 0x7B	; 123
    90c2:	1b e0       	ldi	r17, 0x0B	; 11
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:135

  for (uint8_t wrom_id = 0; wrom_id < HW_ONEWIRE_MAXROMS; wrom_id++)
  {
    w_rom[wrom_id].tds_idx = 255;
    90c4:	ee 24       	eor	r14, r14
    90c6:	ea 94       	dec	r14
    90c8:	f8 01       	movw	r30, r16
    90ca:	e2 86       	std	Z+10, r14	; 0x0a
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:136
    if (tds_compare_rom(tmp_rom, w_rom[wrom_id].rom) == true)
    90cc:	b8 01       	movw	r22, r16
    90ce:	ce 01       	movw	r24, r28
    90d0:	47 96       	adiw	r24, 0x17	; 23
    90d2:	0e 94 31 2d 	call	0x5a62	; 0x5a62 <tds_compare_rom(unsigned char*, unsigned char*)>
    90d6:	81 11       	cpse	r24, r1
    90d8:	14 c0       	rjmp	.+40     	; 0x9102 <tds_update_associate()+0x6e>
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:139
      continue;
    
    for (uint8_t tds_id = 0; tds_id < HW_ONEWIRE_MAXROMS; tds_id++)
    90da:	f1 2c       	mov	r15, r1
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:141
    {
    get_tds18s20(tds_id, &tds);
    90dc:	be 01       	movw	r22, r28
    90de:	6f 5f       	subi	r22, 0xFF	; 255
    90e0:	7f 4f       	sbci	r23, 0xFF	; 255
    90e2:	8f 2d       	mov	r24, r15
    90e4:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:142
    if (tds_compare_rom(tds.rom, w_rom[wrom_id].rom) == true)
    90e8:	b8 01       	movw	r22, r16
    90ea:	ce 01       	movw	r24, r28
    90ec:	02 96       	adiw	r24, 0x02	; 2
    90ee:	0e 94 31 2d 	call	0x5a62	; 0x5a62 <tds_compare_rom(unsigned char*, unsigned char*)>
    90f2:	88 23       	and	r24, r24
    90f4:	11 f0       	breq	.+4      	; 0x90fa <tds_update_associate()+0x66>
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:143
        w_rom[wrom_id].tds_idx = tds_id;
    90f6:	f8 01       	movw	r30, r16
    90f8:	f2 86       	std	Z+10, r15	; 0x0a
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:139
  {
    w_rom[wrom_id].tds_idx = 255;
    if (tds_compare_rom(tmp_rom, w_rom[wrom_id].rom) == true)
      continue;
    
    for (uint8_t tds_id = 0; tds_id < HW_ONEWIRE_MAXROMS; tds_id++)
    90fa:	f3 94       	inc	r15
    90fc:	f6 e0       	ldi	r31, 0x06	; 6
    90fe:	ff 12       	cpse	r15, r31
    9100:	ed cf       	rjmp	.-38     	; 0x90dc <tds_update_associate()+0x48>
    9102:	05 5f       	subi	r16, 0xF5	; 245
    9104:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:133
{
  struct_DDS18s20 tds;
  uint8_t tmp_rom[8];
  for (uint8_t r = 0; r < 8; r++) tmp_rom[r] = 0;

  for (uint8_t wrom_id = 0; wrom_id < HW_ONEWIRE_MAXROMS; wrom_id++)
    9106:	8b e0       	ldi	r24, 0x0B	; 11
    9108:	0d 3b       	cpi	r16, 0xBD	; 189
    910a:	18 07       	cpc	r17, r24
    910c:	e9 f6       	brne	.-70     	; 0x90c8 <tds_update_associate()+0x34>
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:146
    get_tds18s20(tds_id, &tds);
    if (tds_compare_rom(tds.rom, w_rom[wrom_id].rom) == true)
        w_rom[wrom_id].tds_idx = tds_id;
    }
  }
}
    910e:	6e 96       	adiw	r28, 0x1e	; 30
    9110:	0f b6       	in	r0, 0x3f	; 63
    9112:	f8 94       	cli
    9114:	de bf       	out	0x3e, r29	; 62
    9116:	0f be       	out	0x3f, r0	; 63
    9118:	cd bf       	out	0x3d, r28	; 61
    911a:	df 91       	pop	r29
    911c:	cf 91       	pop	r28
    911e:	1f 91       	pop	r17
    9120:	0f 91       	pop	r16
    9122:	ff 90       	pop	r15
    9124:	ef 90       	pop	r14
    9126:	08 95       	ret

00009128 <device_get_name(char*)>:
_Z15device_get_namePc():
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:59

//////////////////////////
//// nacte nazev zarizeni
void device_get_name(char *name)
{
    9128:	0f 93       	push	r16
    912a:	1f 93       	push	r17
    912c:	cf 93       	push	r28
    912e:	df 93       	push	r29
    9130:	8c 01       	movw	r16, r24
    9132:	c4 e6       	ldi	r28, 0x64	; 100
    9134:	d0 e0       	ldi	r29, 0x00	; 0
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:63
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = EEPROM.read(device_nazev  + i);
    9136:	ce 01       	movw	r24, r28
    9138:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224]>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:64
    name[i] = t;
    913c:	f8 01       	movw	r30, r16
    913e:	81 93       	st	Z+, r24
    9140:	8f 01       	movw	r16, r30
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:65
    name[i + 1] = 0;
    9142:	10 82       	st	Z, r1
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:66
    if (t == 0)
    9144:	88 23       	and	r24, r24
    9146:	21 f0       	breq	.+8      	; 0x9150 <device_get_name(char*)+0x28>
    9148:	21 96       	adiw	r28, 0x01	; 1
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:61
//////////////////////////
//// nacte nazev zarizeni
void device_get_name(char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
    914a:	cd 36       	cpi	r28, 0x6D	; 109
    914c:	d1 05       	cpc	r29, r1
    914e:	99 f7       	brne	.-26     	; 0x9136 <device_get_name(char*)+0xe>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:71
    if (t == 0)
    {
      break;
    }
  }
}
    9150:	df 91       	pop	r29
    9152:	cf 91       	pop	r28
    9154:	1f 91       	pop	r17
    9156:	0f 91       	pop	r16
    9158:	08 95       	ret

0000915a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.140]>:
_Z41send_mqtt_message_prefix_id_topic_payloadP12PubSubClientPchS1_S1_.constprop.140():
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:165
void send_mqtt_set_header(char* header)
{
  header_out = header;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
void send_mqtt_message_prefix_id_topic_payload(PubSubClient *mqtt_client, char *prefix, uint8_t id, char *topic, char *payload)
    915a:	af 92       	push	r10
    915c:	bf 92       	push	r11
    915e:	df 92       	push	r13
    9160:	ef 92       	push	r14
    9162:	ff 92       	push	r15
    9164:	0f 93       	push	r16
    9166:	1f 93       	push	r17
    9168:	cf 93       	push	r28
    916a:	df 93       	push	r29
    916c:	cd b7       	in	r28, 0x3d	; 61
    916e:	de b7       	in	r29, 0x3e	; 62
    9170:	c6 55       	subi	r28, 0x56	; 86
    9172:	d1 09       	sbc	r29, r1
    9174:	0f b6       	in	r0, 0x3f	; 63
    9176:	f8 94       	cli
    9178:	de bf       	out	0x3e, r29	; 62
    917a:	0f be       	out	0x3f, r0	; 63
    917c:	cd bf       	out	0x3d, r28	; 61
    917e:	5c 01       	movw	r10, r24
    9180:	d6 2e       	mov	r13, r22
    9182:	7a 01       	movw	r14, r20
    9184:	89 01       	movw	r16, r18
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:170
{
  char str_topic[64];
  char hostname[10];
  char tmp1[12];
  if (mqtt_client->connected())
    9186:	81 eb       	ldi	r24, 0xB1	; 177
    9188:	93 e1       	ldi	r25, 0x13	; 19
    918a:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <PubSubClient::connected()>
    918e:	88 23       	and	r24, r24
    9190:	09 f4       	brne	.+2      	; 0x9194 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.140]+0x3a>
    9192:	52 c0       	rjmp	.+164    	; 0x9238 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.140]+0xde>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:172
  {
    mqtt_send_message++;
    9194:	80 91 dd 0e 	lds	r24, 0x0EDD	; 0x800edd <mqtt_send_message>
    9198:	90 91 de 0e 	lds	r25, 0x0EDE	; 0x800ede <mqtt_send_message+0x1>
    919c:	01 96       	adiw	r24, 0x01	; 1
    919e:	90 93 de 0e 	sts	0x0EDE, r25	; 0x800ede <mqtt_send_message+0x1>
    91a2:	80 93 dd 0e 	sts	0x0EDD, r24	; 0x800edd <mqtt_send_message>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:173
    device_get_name(hostname);
    91a6:	ce 01       	movw	r24, r28
    91a8:	83 5b       	subi	r24, 0xB3	; 179
    91aa:	9f 4f       	sbci	r25, 0xFF	; 255
    91ac:	0e 94 94 48 	call	0x9128	; 0x9128 <device_get_name(char*)>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:174
    strcpy_P(str_topic, header_out);
    91b0:	60 91 db 0e 	lds	r22, 0x0EDB	; 0x800edb <header_out>
    91b4:	70 91 dc 0e 	lds	r23, 0x0EDC	; 0x800edc <header_out+0x1>
    91b8:	ce 01       	movw	r24, r28
    91ba:	01 96       	adiw	r24, 0x01	; 1
    91bc:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:175
    strcat(str_topic, hostname);
    91c0:	be 01       	movw	r22, r28
    91c2:	63 5b       	subi	r22, 0xB3	; 179
    91c4:	7f 4f       	sbci	r23, 0xFF	; 255
    91c6:	ce 01       	movw	r24, r28
    91c8:	01 96       	adiw	r24, 0x01	; 1
    91ca:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:176
    strcat(str_topic, "/");
    91ce:	63 e1       	ldi	r22, 0x13	; 19
    91d0:	74 e0       	ldi	r23, 0x04	; 4
    91d2:	ce 01       	movw	r24, r28
    91d4:	01 96       	adiw	r24, 0x01	; 1
    91d6:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:177
    strcat(str_topic, prefix);
    91da:	b5 01       	movw	r22, r10
    91dc:	ce 01       	movw	r24, r28
    91de:	01 96       	adiw	r24, 0x01	; 1
    91e0:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:178
    strcat(str_topic, "/");
    91e4:	63 e1       	ldi	r22, 0x13	; 19
    91e6:	74 e0       	ldi	r23, 0x04	; 4
    91e8:	ce 01       	movw	r24, r28
    91ea:	01 96       	adiw	r24, 0x01	; 1
    91ec:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    91f0:	4a e0       	ldi	r20, 0x0A	; 10
    91f2:	be 01       	movw	r22, r28
    91f4:	6f 5b       	subi	r22, 0xBF	; 191
    91f6:	7f 4f       	sbci	r23, 0xFF	; 255
    91f8:	8d 2d       	mov	r24, r13
    91fa:	90 e0       	ldi	r25, 0x00	; 0
    91fc:	0e 94 7f 80 	call	0x100fe	; 0x100fe <__itoa_ncheck>
_Z41send_mqtt_message_prefix_id_topic_payloadP12PubSubClientPchS1_S1_.constprop.140():
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:180
    itoa(id, tmp1, 10);
    strcat(str_topic, tmp1);
    9200:	be 01       	movw	r22, r28
    9202:	6f 5b       	subi	r22, 0xBF	; 191
    9204:	7f 4f       	sbci	r23, 0xFF	; 255
    9206:	ce 01       	movw	r24, r28
    9208:	01 96       	adiw	r24, 0x01	; 1
    920a:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:181
    strcat(str_topic, "/");
    920e:	63 e1       	ldi	r22, 0x13	; 19
    9210:	74 e0       	ldi	r23, 0x04	; 4
    9212:	ce 01       	movw	r24, r28
    9214:	01 96       	adiw	r24, 0x01	; 1
    9216:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:182
    strcat(str_topic, topic);
    921a:	b7 01       	movw	r22, r14
    921c:	ce 01       	movw	r24, r28
    921e:	01 96       	adiw	r24, 0x01	; 1
    9220:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:183
    if (mqtt_client->publish(str_topic, payload) == false) mqtt_error++;
    9224:	a8 01       	movw	r20, r16
    9226:	be 01       	movw	r22, r28
    9228:	6f 5f       	subi	r22, 0xFF	; 255
    922a:	7f 4f       	sbci	r23, 0xFF	; 255
    922c:	81 eb       	ldi	r24, 0xB1	; 177
    922e:	93 e1       	ldi	r25, 0x13	; 19
    9230:	0e 94 5e 30 	call	0x60bc	; 0x60bc <PubSubClient::publish(char const*, char const*)>
    9234:	81 11       	cpse	r24, r1
    9236:	09 c0       	rjmp	.+18     	; 0x924a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.140]+0xf0>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:186
  }
  else
    mqtt_error++;
    9238:	80 91 df 0e 	lds	r24, 0x0EDF	; 0x800edf <mqtt_error>
    923c:	90 91 e0 0e 	lds	r25, 0x0EE0	; 0x800ee0 <mqtt_error+0x1>
    9240:	01 96       	adiw	r24, 0x01	; 1
    9242:	90 93 e0 0e 	sts	0x0EE0, r25	; 0x800ee0 <mqtt_error+0x1>
    9246:	80 93 df 0e 	sts	0x0EDF, r24	; 0x800edf <mqtt_error>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:187
}
    924a:	ca 5a       	subi	r28, 0xAA	; 170
    924c:	df 4f       	sbci	r29, 0xFF	; 255
    924e:	0f b6       	in	r0, 0x3f	; 63
    9250:	f8 94       	cli
    9252:	de bf       	out	0x3e, r29	; 62
    9254:	0f be       	out	0x3f, r0	; 63
    9256:	cd bf       	out	0x3d, r28	; 61
    9258:	df 91       	pop	r29
    925a:	cf 91       	pop	r28
    925c:	1f 91       	pop	r17
    925e:	0f 91       	pop	r16
    9260:	ff 90       	pop	r15
    9262:	ef 90       	pop	r14
    9264:	df 90       	pop	r13
    9266:	bf 90       	pop	r11
    9268:	af 90       	pop	r10
    926a:	08 95       	ret

0000926c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>:
_Z25send_mqtt_general_payloadP12PubSubClientPcPKc():
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:217
  else
    mqtt_error++;
}
///
void send_mqtt_general_payload(PubSubClient *mqtt_client, char *topic, const char *payload)
{
    926c:	cf 92       	push	r12
    926e:	df 92       	push	r13
    9270:	ef 92       	push	r14
    9272:	ff 92       	push	r15
    9274:	0f 93       	push	r16
    9276:	1f 93       	push	r17
    9278:	cf 93       	push	r28
    927a:	df 93       	push	r29
    927c:	cd b7       	in	r28, 0x3d	; 61
    927e:	de b7       	in	r29, 0x3e	; 62
    9280:	ca 54       	subi	r28, 0x4A	; 74
    9282:	d1 09       	sbc	r29, r1
    9284:	0f b6       	in	r0, 0x3f	; 63
    9286:	f8 94       	cli
    9288:	de bf       	out	0x3e, r29	; 62
    928a:	0f be       	out	0x3f, r0	; 63
    928c:	cd bf       	out	0x3d, r28	; 61
    928e:	8c 01       	movw	r16, r24
    9290:	6b 01       	movw	r12, r22
    9292:	7a 01       	movw	r14, r20
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:220
  const char str_topic[64];
  char hostname[10];
  if (mqtt_client->connected())
    9294:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <PubSubClient::connected()>
    9298:	88 23       	and	r24, r24
    929a:	89 f1       	breq	.+98     	; 0x92fe <send_mqtt_general_payload(PubSubClient*, char*, char const*)+0x92>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:222
  {
    mqtt_send_message++;
    929c:	80 91 dd 0e 	lds	r24, 0x0EDD	; 0x800edd <mqtt_send_message>
    92a0:	90 91 de 0e 	lds	r25, 0x0EDE	; 0x800ede <mqtt_send_message+0x1>
    92a4:	01 96       	adiw	r24, 0x01	; 1
    92a6:	90 93 de 0e 	sts	0x0EDE, r25	; 0x800ede <mqtt_send_message+0x1>
    92aa:	80 93 dd 0e 	sts	0x0EDD, r24	; 0x800edd <mqtt_send_message>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:223
    device_get_name(hostname);
    92ae:	ce 01       	movw	r24, r28
    92b0:	8f 5b       	subi	r24, 0xBF	; 191
    92b2:	9f 4f       	sbci	r25, 0xFF	; 255
    92b4:	0e 94 94 48 	call	0x9128	; 0x9128 <device_get_name(char*)>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:224
    strcpy_P(str_topic, header_out);
    92b8:	60 91 db 0e 	lds	r22, 0x0EDB	; 0x800edb <header_out>
    92bc:	70 91 dc 0e 	lds	r23, 0x0EDC	; 0x800edc <header_out+0x1>
    92c0:	ce 01       	movw	r24, r28
    92c2:	01 96       	adiw	r24, 0x01	; 1
    92c4:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:225
    strcat(str_topic, hostname);
    92c8:	be 01       	movw	r22, r28
    92ca:	6f 5b       	subi	r22, 0xBF	; 191
    92cc:	7f 4f       	sbci	r23, 0xFF	; 255
    92ce:	ce 01       	movw	r24, r28
    92d0:	01 96       	adiw	r24, 0x01	; 1
    92d2:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:226
    strcat(str_topic, "/");
    92d6:	63 e1       	ldi	r22, 0x13	; 19
    92d8:	74 e0       	ldi	r23, 0x04	; 4
    92da:	ce 01       	movw	r24, r28
    92dc:	01 96       	adiw	r24, 0x01	; 1
    92de:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:227
    strcat(str_topic, topic);
    92e2:	b6 01       	movw	r22, r12
    92e4:	ce 01       	movw	r24, r28
    92e6:	01 96       	adiw	r24, 0x01	; 1
    92e8:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:228
    if (mqtt_client->publish(str_topic, payload) == false) mqtt_error++;
    92ec:	a7 01       	movw	r20, r14
    92ee:	be 01       	movw	r22, r28
    92f0:	6f 5f       	subi	r22, 0xFF	; 255
    92f2:	7f 4f       	sbci	r23, 0xFF	; 255
    92f4:	c8 01       	movw	r24, r16
    92f6:	0e 94 5e 30 	call	0x60bc	; 0x60bc <PubSubClient::publish(char const*, char const*)>
    92fa:	81 11       	cpse	r24, r1
    92fc:	09 c0       	rjmp	.+18     	; 0x9310 <send_mqtt_general_payload(PubSubClient*, char*, char const*)+0xa4>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:231
  }
  else
    mqtt_error++;
    92fe:	80 91 df 0e 	lds	r24, 0x0EDF	; 0x800edf <mqtt_error>
    9302:	90 91 e0 0e 	lds	r25, 0x0EE0	; 0x800ee0 <mqtt_error+0x1>
    9306:	01 96       	adiw	r24, 0x01	; 1
    9308:	90 93 e0 0e 	sts	0x0EE0, r25	; 0x800ee0 <mqtt_error+0x1>
    930c:	80 93 df 0e 	sts	0x0EDF, r24	; 0x800edf <mqtt_error>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:232
}
    9310:	c6 5b       	subi	r28, 0xB6	; 182
    9312:	df 4f       	sbci	r29, 0xFF	; 255
    9314:	0f b6       	in	r0, 0x3f	; 63
    9316:	f8 94       	cli
    9318:	de bf       	out	0x3e, r29	; 62
    931a:	0f be       	out	0x3f, r0	; 63
    931c:	cd bf       	out	0x3d, r28	; 61
    931e:	df 91       	pop	r29
    9320:	cf 91       	pop	r28
    9322:	1f 91       	pop	r17
    9324:	0f 91       	pop	r16
    9326:	ff 90       	pop	r15
    9328:	ef 90       	pop	r14
    932a:	df 90       	pop	r13
    932c:	cf 90       	pop	r12
    932e:	08 95       	ret

00009330 <log_error(PubSubClient*, char*) [clone .constprop.70]>:
_Z9log_errorP12PubSubClientPc.constprop.70():
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:433
    send_mqtt_general_payload(mqtt_get_public_mqtt_client(), topic, mqtt_log);
    mqtt_log_cnt = 0;
  }
}
///////////////////////////////////////////////////////////////////////////
void log_error(PubSubClient *mqtt_client, char *log)
    9330:	0f 93       	push	r16
    9332:	1f 93       	push	r17
    9334:	cf 93       	push	r28
    9336:	df 93       	push	r29
    9338:	cd b7       	in	r28, 0x3d	; 61
    933a:	de b7       	in	r29, 0x3e	; 62
    933c:	60 97       	sbiw	r28, 0x10	; 16
    933e:	0f b6       	in	r0, 0x3f	; 63
    9340:	f8 94       	cli
    9342:	de bf       	out	0x3e, r29	; 62
    9344:	0f be       	out	0x3f, r0	; 63
    9346:	cd bf       	out	0x3d, r28	; 61
    9348:	8c 01       	movw	r16, r24
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:436
{
  char topic[16];
  strcpy(topic, "log-app");
    934a:	63 e2       	ldi	r22, 0x23	; 35
    934c:	73 e0       	ldi	r23, 0x03	; 3
    934e:	ce 01       	movw	r24, r28
    9350:	01 96       	adiw	r24, 0x01	; 1
    9352:	0e 94 c8 8c 	call	0x11990	; 0x11990 <strcpy>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:437
  send_mqtt_general_payload(mqtt_client, topic, log);
    9356:	a8 01       	movw	r20, r16
    9358:	be 01       	movw	r22, r28
    935a:	6f 5f       	subi	r22, 0xFF	; 255
    935c:	7f 4f       	sbci	r23, 0xFF	; 255
    935e:	81 eb       	ldi	r24, 0xB1	; 177
    9360:	93 e1       	ldi	r25, 0x13	; 19
    9362:	0e 94 36 49 	call	0x926c	; 0x926c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:438
}
    9366:	60 96       	adiw	r28, 0x10	; 16
    9368:	0f b6       	in	r0, 0x3f	; 63
    936a:	f8 94       	cli
    936c:	de bf       	out	0x3e, r29	; 62
    936e:	0f be       	out	0x3f, r0	; 63
    9370:	cd bf       	out	0x3d, r28	; 61
    9372:	df 91       	pop	r29
    9374:	cf 91       	pop	r28
    9376:	1f 91       	pop	r17
    9378:	0f 91       	pop	r16
    937a:	08 95       	ret

0000937c <printf_via_mqtt(char, __file*)>:
_Z15printf_via_mqttcP6__file():
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:420
  return ret;
}
//////////////////////////////////////////////////////////////////////
/// servisni logovatko pres mqtt ///
int printf_via_mqtt(char c, FILE * t)
{
    937c:	cf 93       	push	r28
    937e:	df 93       	push	r29
    9380:	cd b7       	in	r28, 0x3d	; 61
    9382:	de b7       	in	r29, 0x3e	; 62
    9384:	60 97       	sbiw	r28, 0x10	; 16
    9386:	0f b6       	in	r0, 0x3f	; 63
    9388:	f8 94       	cli
    938a:	de bf       	out	0x3e, r29	; 62
    938c:	0f be       	out	0x3f, r0	; 63
    938e:	cd bf       	out	0x3d, r28	; 61
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:422
  char topic[16];
  mqtt_log[mqtt_log_cnt] = c;
    9390:	90 91 4f 0a 	lds	r25, 0x0A4F	; 0x800a4f <mqtt_log_cnt>
    9394:	e9 2f       	mov	r30, r25
    9396:	f0 e0       	ldi	r31, 0x00	; 0
    9398:	e1 53       	subi	r30, 0x31	; 49
    939a:	f6 4f       	sbci	r31, 0xF6	; 246
    939c:	80 83       	st	Z, r24
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:423
  mqtt_log[mqtt_log_cnt + 1] = 0;
    939e:	11 82       	std	Z+1, r1	; 0x01
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:424
  mqtt_log_cnt++;
    93a0:	9f 5f       	subi	r25, 0xFF	; 255
    93a2:	90 93 4f 0a 	sts	0x0A4F, r25	; 0x800a4f <mqtt_log_cnt>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:425
  if (mqtt_log_cnt > 127 || c == '\n' || c == 0)
    93a6:	97 fd       	sbrc	r25, 7
    93a8:	04 c0       	rjmp	.+8      	; 0x93b2 <printf_via_mqtt(char, __file*)+0x36>
    93aa:	8a 30       	cpi	r24, 0x0A	; 10
    93ac:	11 f0       	breq	.+4      	; 0x93b2 <printf_via_mqtt(char, __file*)+0x36>
    93ae:	81 11       	cpse	r24, r1
    93b0:	13 c0       	rjmp	.+38     	; 0x93d8 <printf_via_mqtt(char, __file*)+0x5c>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:427
  {
    strcpy(topic, "log-printf");
    93b2:	6b e2       	ldi	r22, 0x2B	; 43
    93b4:	73 e0       	ldi	r23, 0x03	; 3
    93b6:	ce 01       	movw	r24, r28
    93b8:	01 96       	adiw	r24, 0x01	; 1
    93ba:	0e 94 c8 8c 	call	0x11990	; 0x11990 <strcpy>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:428
    send_mqtt_general_payload(mqtt_get_public_mqtt_client(), topic, mqtt_log);
    93be:	4f ec       	ldi	r20, 0xCF	; 207
    93c0:	59 e0       	ldi	r21, 0x09	; 9
    93c2:	be 01       	movw	r22, r28
    93c4:	6f 5f       	subi	r22, 0xFF	; 255
    93c6:	7f 4f       	sbci	r23, 0xFF	; 255
    93c8:	80 91 cd 09 	lds	r24, 0x09CD	; 0x8009cd <pub_mqtt_client>
    93cc:	90 91 ce 09 	lds	r25, 0x09CE	; 0x8009ce <pub_mqtt_client+0x1>
    93d0:	0e 94 36 49 	call	0x926c	; 0x926c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:429
    mqtt_log_cnt = 0;
    93d4:	10 92 4f 0a 	sts	0x0A4F, r1	; 0x800a4f <mqtt_log_cnt>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:431
  }
}
    93d8:	60 96       	adiw	r28, 0x10	; 16
    93da:	0f b6       	in	r0, 0x3f	; 63
    93dc:	f8 94       	cli
    93de:	de bf       	out	0x3e, r29	; 62
    93e0:	0f be       	out	0x3f, r0	; 63
    93e2:	cd bf       	out	0x3d, r28	; 61
    93e4:	df 91       	pop	r29
    93e6:	cf 91       	pop	r28
    93e8:	08 95       	ret

000093ea <mqtt_reconnect()>:
_Z14mqtt_reconnectv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2041

}
/*************************************************************************************************************************/
/// mqtt_reconent - funkce pro prihlaseni k MQTT topicum
byte mqtt_reconnect(void)
{
    93ea:	0f 93       	push	r16
    93ec:	1f 93       	push	r17
    93ee:	cf 93       	push	r28
    93f0:	df 93       	push	r29
    93f2:	cd b7       	in	r28, 0x3d	; 61
    93f4:	de b7       	in	r29, 0x3e	; 62
    93f6:	a5 97       	sbiw	r28, 0x25	; 37
    93f8:	0f b6       	in	r0, 0x3f	; 63
    93fa:	f8 94       	cli
    93fc:	de bf       	out	0x3e, r29	; 62
    93fe:	0f be       	out	0x3f, r0	; 63
    9400:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2047
  char nazev[10];
  char topic[26];
  byte ret = MQTT_DISCONNECTED;
  ///  /thermctl/xxxxxxxx/#
  ///  /thermctl/global/#
  device_get_name(nazev);
    9402:	ce 01       	movw	r24, r28
    9404:	4b 96       	adiw	r24, 0x1b	; 27
    9406:	0e 94 94 48 	call	0x9128	; 0x9128 <device_get_name(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2048
  if (!mqtt_client.connected())
    940a:	81 eb       	ldi	r24, 0xB1	; 177
    940c:	93 e1       	ldi	r25, 0x13	; 19
    940e:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <PubSubClient::connected()>
    9412:	81 11       	cpse	r24, r1
    9414:	97 c0       	rjmp	.+302    	; 0x9544 <mqtt_reconnect()+0x15a>
connect():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:117
boolean PubSubClient::connect(const char *id, const char* willTopic, uint8_t willQos, boolean willRetain, const char* willMessage) {
    return connect(id,NULL,NULL,willTopic,willQos,willRetain,willMessage);
}

boolean PubSubClient::connect(const char *id, const char *user, const char *pass, const char* willTopic, uint8_t willQos, boolean willRetain, const char* willMessage) {
    if (!connected()) {
    9416:	81 eb       	ldi	r24, 0xB1	; 177
    9418:	93 e1       	ldi	r25, 0x13	; 19
    941a:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <PubSubClient::connected()>
    941e:	81 11       	cpse	r24, r1
    9420:	d0 c0       	rjmp	.+416    	; 0x95c2 <mqtt_reconnect()+0x1d8>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:120
        int result = 0;

        if (domain != NULL) {
    9422:	60 91 c6 15 	lds	r22, 0x15C6	; 0x8015c6 <mqtt_client+0x215>
    9426:	70 91 c7 15 	lds	r23, 0x15C7	; 0x8015c7 <mqtt_client+0x216>
    942a:	80 91 b1 13 	lds	r24, 0x13B1	; 0x8013b1 <mqtt_client>
    942e:	90 91 b2 13 	lds	r25, 0x13B2	; 0x8013b2 <mqtt_client+0x1>
    9432:	dc 01       	movw	r26, r24
    9434:	ed 91       	ld	r30, X+
    9436:	fc 91       	ld	r31, X
    9438:	40 91 c8 15 	lds	r20, 0x15C8	; 0x8015c8 <mqtt_client+0x217>
    943c:	50 91 c9 15 	lds	r21, 0x15C9	; 0x8015c9 <mqtt_client+0x218>
    9440:	61 15       	cp	r22, r1
    9442:	71 05       	cpc	r23, r1
    9444:	09 f4       	brne	.+2      	; 0x9448 <mqtt_reconnect()+0x5e>
    9446:	8b c0       	rjmp	.+278    	; 0x955e <mqtt_reconnect()+0x174>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:121
            result = _client->connect(this->domain, this->port);
    9448:	00 88       	ldd	r0, Z+16	; 0x10
    944a:	f1 89       	ldd	r31, Z+17	; 0x11
    944c:	e0 2d       	mov	r30, r0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:123
        } else {
            result = _client->connect(this->ip, this->port);
    944e:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:125
        }
        if (result == 1) {
    9450:	81 30       	cpi	r24, 0x01	; 1
    9452:	91 05       	cpc	r25, r1
    9454:	09 f0       	breq	.+2      	; 0x9458 <mqtt_reconnect()+0x6e>
    9456:	0b c1       	rjmp	.+534    	; 0x966e <mqtt_reconnect()+0x284>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:126
            nextMsgId = 1;
    9458:	90 93 b4 15 	sts	0x15B4, r25	; 0x8015b4 <mqtt_client+0x203>
    945c:	80 93 b3 15 	sts	0x15B3, r24	; 0x8015b3 <mqtt_client+0x202>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:135

#if MQTT_VERSION == MQTT_VERSION_3_1
            uint8_t d[9] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_VERSION};
#define MQTT_HEADER_VERSION_LENGTH 9
#elif MQTT_VERSION == MQTT_VERSION_3_1_1
            uint8_t d[7] = {0x00,0x04,'M','Q','T','T',MQTT_VERSION};
    9460:	87 e0       	ldi	r24, 0x07	; 7
    9462:	e6 e1       	ldi	r30, 0x16	; 22
    9464:	f2 e0       	ldi	r31, 0x02	; 2
    9466:	de 01       	movw	r26, r28
    9468:	11 96       	adiw	r26, 0x01	; 1
    946a:	01 90       	ld	r0, Z+
    946c:	0d 92       	st	X+, r0
    946e:	8a 95       	dec	r24
    9470:	e1 f7       	brne	.-8      	; 0x946a <mqtt_reconnect()+0x80>
    9472:	fe 01       	movw	r30, r28
    9474:	31 96       	adiw	r30, 0x01	; 1
    9476:	a8 eb       	ldi	r26, 0xB8	; 184
    9478:	b3 e1       	ldi	r27, 0x13	; 19
    947a:	ce 01       	movw	r24, r28
    947c:	08 96       	adiw	r24, 0x08	; 8
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:139
#define MQTT_HEADER_VERSION_LENGTH 7
#endif
            for (j = 0;j<MQTT_HEADER_VERSION_LENGTH;j++) {
                buffer[length++] = d[j];
    947e:	21 91       	ld	r18, Z+
    9480:	2d 93       	st	X+, r18
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:138
#define MQTT_HEADER_VERSION_LENGTH 9
#elif MQTT_VERSION == MQTT_VERSION_3_1_1
            uint8_t d[7] = {0x00,0x04,'M','Q','T','T',MQTT_VERSION};
#define MQTT_HEADER_VERSION_LENGTH 7
#endif
            for (j = 0;j<MQTT_HEADER_VERSION_LENGTH;j++) {
    9482:	8e 17       	cp	r24, r30
    9484:	9f 07       	cpc	r25, r31
    9486:	d9 f7       	brne	.-10     	; 0x947e <mqtt_reconnect()+0x94>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:157
                if(pass != NULL) {
                    v = v|(0x80>>1);
                }
            }

            buffer[length++] = v;
    9488:	82 e0       	ldi	r24, 0x02	; 2
    948a:	80 93 bf 13 	sts	0x13BF, r24	; 0x8013bf <mqtt_client+0xe>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:159

            buffer[length++] = ((MQTT_KEEPALIVE) >> 8);
    948e:	10 92 c0 13 	sts	0x13C0, r1	; 0x8013c0 <mqtt_client+0xf>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:160
            buffer[length++] = ((MQTT_KEEPALIVE) & 0xFF);
    9492:	8f e0       	ldi	r24, 0x0F	; 15
    9494:	80 93 c1 13 	sts	0x13C1, r24	; 0x8013c1 <mqtt_client+0x10>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:161
            length = writeString(id,buffer,length);
    9498:	4f e0       	ldi	r20, 0x0F	; 15
    949a:	50 e0       	ldi	r21, 0x00	; 0
    949c:	63 eb       	ldi	r22, 0xB3	; 179
    949e:	73 e1       	ldi	r23, 0x13	; 19
    94a0:	ce 01       	movw	r24, r28
    94a2:	4b 96       	adiw	r24, 0x1b	; 27
    94a4:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.157]>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:174
                if(pass != NULL) {
                    length = writeString(pass,buffer,length);
                }
            }

            write(MQTTCONNECT,buffer,length-5);
    94a8:	9c 01       	movw	r18, r24
    94aa:	25 50       	subi	r18, 0x05	; 5
    94ac:	31 09       	sbc	r19, r1
    94ae:	43 eb       	ldi	r20, 0xB3	; 179
    94b0:	53 e1       	ldi	r21, 0x13	; 19
    94b2:	60 e1       	ldi	r22, 0x10	; 16
    94b4:	81 eb       	ldi	r24, 0xB1	; 177
    94b6:	93 e1       	ldi	r25, 0x13	; 19
    94b8:	0e 94 88 16 	call	0x2d10	; 0x2d10 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:176

            lastInActivity = lastOutActivity = millis();
    94bc:	0e 94 28 13 	call	0x2650	; 0x2650 <millis>
    94c0:	60 93 b5 15 	sts	0x15B5, r22	; 0x8015b5 <mqtt_client+0x204>
    94c4:	70 93 b6 15 	sts	0x15B6, r23	; 0x8015b6 <mqtt_client+0x205>
    94c8:	80 93 b7 15 	sts	0x15B7, r24	; 0x8015b7 <mqtt_client+0x206>
    94cc:	90 93 b8 15 	sts	0x15B8, r25	; 0x8015b8 <mqtt_client+0x207>
    94d0:	60 93 b9 15 	sts	0x15B9, r22	; 0x8015b9 <mqtt_client+0x208>
    94d4:	70 93 ba 15 	sts	0x15BA, r23	; 0x8015ba <mqtt_client+0x209>
    94d8:	80 93 bb 15 	sts	0x15BB, r24	; 0x8015bb <mqtt_client+0x20a>
    94dc:	90 93 bc 15 	sts	0x15BC, r25	; 0x8015bc <mqtt_client+0x20b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:178

            while (!_client->available()) {
    94e0:	80 91 b1 13 	lds	r24, 0x13B1	; 0x8013b1 <mqtt_client>
    94e4:	90 91 b2 13 	lds	r25, 0x13B2	; 0x8013b2 <mqtt_client+0x1>
    94e8:	dc 01       	movw	r26, r24
    94ea:	ed 91       	ld	r30, X+
    94ec:	fc 91       	ld	r31, X
    94ee:	00 84       	ldd	r0, Z+8	; 0x08
    94f0:	f1 85       	ldd	r31, Z+9	; 0x09
    94f2:	e0 2d       	mov	r30, r0
    94f4:	19 95       	eicall
    94f6:	89 2b       	or	r24, r25
    94f8:	09 f0       	breq	.+2      	; 0x94fc <mqtt_reconnect()+0x112>
    94fa:	48 c0       	rjmp	.+144    	; 0x958c <mqtt_reconnect()+0x1a2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:179
                unsigned long t = millis();
    94fc:	0e 94 28 13 	call	0x2650	; 0x2650 <millis>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:180
                if (t-lastInActivity >= ((int32_t) MQTT_SOCKET_TIMEOUT*100)) {
    9500:	00 91 b9 15 	lds	r16, 0x15B9	; 0x8015b9 <mqtt_client+0x208>
    9504:	10 91 ba 15 	lds	r17, 0x15BA	; 0x8015ba <mqtt_client+0x209>
    9508:	20 91 bb 15 	lds	r18, 0x15BB	; 0x8015bb <mqtt_client+0x20a>
    950c:	30 91 bc 15 	lds	r19, 0x15BC	; 0x8015bc <mqtt_client+0x20b>
    9510:	60 1b       	sub	r22, r16
    9512:	71 0b       	sbc	r23, r17
    9514:	82 0b       	sbc	r24, r18
    9516:	93 0b       	sbc	r25, r19
    9518:	64 36       	cpi	r22, 0x64	; 100
    951a:	71 05       	cpc	r23, r1
    951c:	81 05       	cpc	r24, r1
    951e:	91 05       	cpc	r25, r1
    9520:	f8 f2       	brcs	.-66     	; 0x94e0 <mqtt_reconnect()+0xf6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:181
                    _state = MQTT_CONNECTION_TIMEOUT;
    9522:	8c ef       	ldi	r24, 0xFC	; 252
    9524:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:196
                    lastInActivity = millis();
                    pingOutstanding = false;
                    _state = MQTT_CONNECTED;
                    return true;
                } else {
                    _state = buffer[3];
    9526:	90 93 cd 15 	sts	0x15CD, r25	; 0x8015cd <mqtt_client+0x21c>
    952a:	80 93 cc 15 	sts	0x15CC, r24	; 0x8015cc <mqtt_client+0x21b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:199
                }
            }
            _client->stop();
    952e:	80 91 b1 13 	lds	r24, 0x13B1	; 0x8013b1 <mqtt_client>
    9532:	90 91 b2 13 	lds	r25, 0x13B2	; 0x8013b2 <mqtt_client+0x1>
    9536:	dc 01       	movw	r26, r24
    9538:	ed 91       	ld	r30, X+
    953a:	fc 91       	ld	r31, X
    953c:	04 88       	ldd	r0, Z+20	; 0x14
    953e:	f5 89       	ldd	r31, Z+21	; 0x15
    9540:	e0 2d       	mov	r30, r0
    9542:	19 95       	eicall
_Z14mqtt_reconnectv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2079
      strcpy_P(topic, termbig_header_out);
      mqtt_client.subscribe(topic);
    }
  ret = mqtt_client.state();
  return ret;
}
    9544:	80 91 cc 15 	lds	r24, 0x15CC	; 0x8015cc <mqtt_client+0x21b>
    9548:	a5 96       	adiw	r28, 0x25	; 37
    954a:	0f b6       	in	r0, 0x3f	; 63
    954c:	f8 94       	cli
    954e:	de bf       	out	0x3e, r29	; 62
    9550:	0f be       	out	0x3f, r0	; 63
    9552:	cd bf       	out	0x3d, r28	; 61
    9554:	df 91       	pop	r29
    9556:	cf 91       	pop	r28
    9558:	1f 91       	pop	r17
    955a:	0f 91       	pop	r16
    955c:	08 95       	ret
connect():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:123
        int result = 0;

        if (domain != NULL) {
            result = _client->connect(this->domain, this->port);
        } else {
            result = _client->connect(this->ip, this->port);
    955e:	06 84       	ldd	r0, Z+14	; 0x0e
    9560:	f7 85       	ldd	r31, Z+15	; 0x0f
    9562:	e0 2d       	mov	r30, r0
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
    9564:	22 ee       	ldi	r18, 0xE2	; 226
    9566:	32 e0       	ldi	r19, 0x02	; 2
    9568:	3a 83       	std	Y+2, r19	; 0x02
    956a:	29 83       	std	Y+1, r18	; 0x01
    956c:	00 91 c2 15 	lds	r16, 0x15C2	; 0x8015c2 <mqtt_client+0x211>
    9570:	10 91 c3 15 	lds	r17, 0x15C3	; 0x8015c3 <mqtt_client+0x212>
    9574:	20 91 c4 15 	lds	r18, 0x15C4	; 0x8015c4 <mqtt_client+0x213>
    9578:	30 91 c5 15 	lds	r19, 0x15C5	; 0x8015c5 <mqtt_client+0x214>
    957c:	0b 83       	std	Y+3, r16	; 0x03
    957e:	1c 83       	std	Y+4, r17	; 0x04
    9580:	2d 83       	std	Y+5, r18	; 0x05
    9582:	3e 83       	std	Y+6, r19	; 0x06
connect():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:123
    9584:	be 01       	movw	r22, r28
    9586:	6f 5f       	subi	r22, 0xFF	; 255
    9588:	7f 4f       	sbci	r23, 0xFF	; 255
    958a:	61 cf       	rjmp	.-318    	; 0x944e <mqtt_reconnect()+0x64>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:187
                    _client->stop();
                    return false;
                }
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);
    958c:	ce 01       	movw	r24, r28
    958e:	85 96       	adiw	r24, 0x25	; 37
    9590:	0e 94 6d 13 	call	0x26da	; 0x26da <PubSubClient::readPacket(unsigned char*) [clone .constprop.147]>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:189

            if (len == 4) {
    9594:	04 97       	sbiw	r24, 0x04	; 4
    9596:	59 f6       	brne	.-106    	; 0x952e <mqtt_reconnect()+0x144>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:190
                if (buffer[3] == 0) {
    9598:	80 91 b6 13 	lds	r24, 0x13B6	; 0x8013b6 <mqtt_client+0x5>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:196
                    lastInActivity = millis();
                    pingOutstanding = false;
                    _state = MQTT_CONNECTED;
                    return true;
                } else {
                    _state = buffer[3];
    959c:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:190
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);

            if (len == 4) {
                if (buffer[3] == 0) {
    959e:	81 11       	cpse	r24, r1
    95a0:	c2 cf       	rjmp	.-124    	; 0x9526 <mqtt_reconnect()+0x13c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:191
                    lastInActivity = millis();
    95a2:	0e 94 28 13 	call	0x2650	; 0x2650 <millis>
    95a6:	60 93 b9 15 	sts	0x15B9, r22	; 0x8015b9 <mqtt_client+0x208>
    95aa:	70 93 ba 15 	sts	0x15BA, r23	; 0x8015ba <mqtt_client+0x209>
    95ae:	80 93 bb 15 	sts	0x15BB, r24	; 0x8015bb <mqtt_client+0x20a>
    95b2:	90 93 bc 15 	sts	0x15BC, r25	; 0x8015bc <mqtt_client+0x20b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:192
                    pingOutstanding = false;
    95b6:	10 92 bd 15 	sts	0x15BD, r1	; 0x8015bd <mqtt_client+0x20c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:193
                    _state = MQTT_CONNECTED;
    95ba:	10 92 cd 15 	sts	0x15CD, r1	; 0x8015cd <mqtt_client+0x21c>
    95be:	10 92 cc 15 	sts	0x15CC, r1	; 0x8015cc <mqtt_client+0x21b>
_Z14mqtt_reconnectv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2051
  ///  /thermctl/global/#
  device_get_name(nazev);
  if (!mqtt_client.connected())
    if (mqtt_client.connect(nazev))
    {
      strcpy_P(topic, thermctl_header_in);
    95c2:	6c ea       	ldi	r22, 0xAC	; 172
    95c4:	74 e1       	ldi	r23, 0x14	; 20
    95c6:	ce 01       	movw	r24, r28
    95c8:	01 96       	adiw	r24, 0x01	; 1
    95ca:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2052
      strcat(topic, nazev);
    95ce:	be 01       	movw	r22, r28
    95d0:	65 5e       	subi	r22, 0xE5	; 229
    95d2:	7f 4f       	sbci	r23, 0xFF	; 255
    95d4:	ce 01       	movw	r24, r28
    95d6:	01 96       	adiw	r24, 0x01	; 1
    95d8:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2053
      strcat(topic, "/#");
    95dc:	6c e3       	ldi	r22, 0x3C	; 60
    95de:	73 e0       	ldi	r23, 0x03	; 3
    95e0:	ce 01       	movw	r24, r28
    95e2:	01 96       	adiw	r24, 0x01	; 1
    95e4:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2054
      mqtt_client.subscribe(topic);
    95e8:	ce 01       	movw	r24, r28
    95ea:	01 96       	adiw	r24, 0x01	; 1
    95ec:	0e 94 c0 2f 	call	0x5f80	; 0x5f80 <PubSubClient::subscribe(char const*) [clone .constprop.154]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2055
      strcpy_P(topic, thermctl_header_in);
    95f0:	6c ea       	ldi	r22, 0xAC	; 172
    95f2:	74 e1       	ldi	r23, 0x14	; 20
    95f4:	ce 01       	movw	r24, r28
    95f6:	01 96       	adiw	r24, 0x01	; 1
    95f8:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2056
      strcat(topic, "global/#");
    95fc:	66 e3       	ldi	r22, 0x36	; 54
    95fe:	73 e0       	ldi	r23, 0x03	; 3
    9600:	ce 01       	movw	r24, r28
    9602:	01 96       	adiw	r24, 0x01	; 1
    9604:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2057
      mqtt_client.subscribe(topic);
    9608:	ce 01       	movw	r24, r28
    960a:	01 96       	adiw	r24, 0x01	; 1
    960c:	0e 94 c0 2f 	call	0x5f80	; 0x5f80 <PubSubClient::subscribe(char const*) [clone .constprop.154]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2064
        //// /rtds/xxxxx
        for (uint8_t idx = 0; idx < 5; idx++)
        remote_tds_subscibe_topic(idx);
      */
      //// svetelny controller
      strcpy_P(topic, lightctl_header_out);
    9610:	6d e9       	ldi	r22, 0x9D	; 157
    9612:	74 e1       	ldi	r23, 0x14	; 20
    9614:	ce 01       	movw	r24, r28
    9616:	01 96       	adiw	r24, 0x01	; 1
    9618:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2065
      strcat(topic, "/#");
    961c:	6c e3       	ldi	r22, 0x3C	; 60
    961e:	73 e0       	ldi	r23, 0x03	; 3
    9620:	ce 01       	movw	r24, r28
    9622:	01 96       	adiw	r24, 0x01	; 1
    9624:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2066
      mqtt_client.subscribe(topic);
    9628:	ce 01       	movw	r24, r28
    962a:	01 96       	adiw	r24, 0x01	; 1
    962c:	0e 94 c0 2f 	call	0x5f80	; 0x5f80 <PubSubClient::subscribe(char const*) [clone .constprop.154]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2068
      /// zpetna vazba od ostatnich room controleru
      strcpy_P(topic, thermctl_subscribe);
    9630:	65 e8       	ldi	r22, 0x85	; 133
    9632:	74 e1       	ldi	r23, 0x14	; 20
    9634:	ce 01       	movw	r24, r28
    9636:	01 96       	adiw	r24, 0x01	; 1
    9638:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2069
      mqtt_client.subscribe(topic);
    963c:	ce 01       	movw	r24, r28
    963e:	01 96       	adiw	r24, 0x01	; 1
    9640:	0e 94 c0 2f 	call	0x5f80	; 0x5f80 <PubSubClient::subscribe(char const*) [clone .constprop.154]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2071
      /// zpetna vazba od ostatnich term controlleru
      strcpy_P(topic, termbig_subscribe);
    9644:	6e e6       	ldi	r22, 0x6E	; 110
    9646:	74 e1       	ldi	r23, 0x14	; 20
    9648:	ce 01       	movw	r24, r28
    964a:	01 96       	adiw	r24, 0x01	; 1
    964c:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2072
      mqtt_client.subscribe(topic);
    9650:	ce 01       	movw	r24, r28
    9652:	01 96       	adiw	r24, 0x01	; 1
    9654:	0e 94 c0 2f 	call	0x5f80	; 0x5f80 <PubSubClient::subscribe(char const*) [clone .constprop.154]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2074
      /// zpetna vazba od vystupu
      strcpy_P(topic, termbig_header_out);
    9658:	60 e6       	ldi	r22, 0x60	; 96
    965a:	74 e1       	ldi	r23, 0x14	; 20
    965c:	ce 01       	movw	r24, r28
    965e:	01 96       	adiw	r24, 0x01	; 1
    9660:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2075
      mqtt_client.subscribe(topic);
    9664:	ce 01       	movw	r24, r28
    9666:	01 96       	adiw	r24, 0x01	; 1
    9668:	0e 94 c0 2f 	call	0x5f80	; 0x5f80 <PubSubClient::subscribe(char const*) [clone .constprop.154]>
    966c:	6b cf       	rjmp	.-298    	; 0x9544 <mqtt_reconnect()+0x15a>
connect():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:201
                    _state = buffer[3];
                }
            }
            _client->stop();
        } else {
            _state = MQTT_CONNECT_FAILED;
    966e:	8e ef       	ldi	r24, 0xFE	; 254
    9670:	9f ef       	ldi	r25, 0xFF	; 255
    9672:	90 93 cd 15 	sts	0x15CD, r25	; 0x8015cd <mqtt_client+0x21c>
    9676:	80 93 cc 15 	sts	0x15CC, r24	; 0x8015cc <mqtt_client+0x21b>
    967a:	64 cf       	rjmp	.-312    	; 0x9544 <mqtt_reconnect()+0x15a>

0000967c <remote_tds_get_name(unsigned char, unsigned char*, char*)>:
_Z19remote_tds_get_namehPhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1303
  active - ukazatel na promenou active
  name - ukazatel na nazev topicu
*/
/// ziska nazev topicu
void remote_tds_get_name(uint8_t idx, uint8_t *active, char *name)
{
    967c:	cf 92       	push	r12
    967e:	df 92       	push	r13
    9680:	ef 92       	push	r14
    9682:	ff 92       	push	r15
    9684:	0f 93       	push	r16
    9686:	1f 93       	push	r17
    9688:	cf 93       	push	r28
    968a:	df 93       	push	r29
    968c:	6b 01       	movw	r12, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1307
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = EEPROM.read(remote_tds_name0 + (10 * idx) + i);
    968e:	9a e0       	ldi	r25, 0x0A	; 10
    9690:	89 9f       	mul	r24, r25
    9692:	e0 01       	movw	r28, r0
    9694:	11 24       	eor	r1, r1
    9696:	8e 01       	movw	r16, r28
    9698:	06 55       	subi	r16, 0x56	; 86
    969a:	1a 4f       	sbci	r17, 0xFA	; 250
    969c:	7a 01       	movw	r14, r20
    969e:	cd 54       	subi	r28, 0x4D	; 77
    96a0:	da 4f       	sbci	r29, 0xFA	; 250
    96a2:	c8 01       	movw	r24, r16
    96a4:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1308
    name[i] = t;
    96a8:	f7 01       	movw	r30, r14
    96aa:	81 93       	st	Z+, r24
    96ac:	7f 01       	movw	r14, r30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1309
    if (t == 0) break;
    96ae:	88 23       	and	r24, r24
    96b0:	29 f0       	breq	.+10     	; 0x96bc <remote_tds_get_name(unsigned char, unsigned char*, char*)+0x40>
    96b2:	0f 5f       	subi	r16, 0xFF	; 255
    96b4:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1305
*/
/// ziska nazev topicu
void remote_tds_get_name(uint8_t idx, uint8_t *active, char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
    96b6:	0c 17       	cp	r16, r28
    96b8:	1d 07       	cpc	r17, r29
    96ba:	99 f7       	brne	.-26     	; 0x96a2 <remote_tds_get_name(unsigned char, unsigned char*, char*)+0x26>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1311
  {
    t = EEPROM.read(remote_tds_name0 + (10 * idx) + i);
    name[i] = t;
    if (t == 0) break;
  }
  *active = EEPROM.read(remote_tds_name0 + (10 * idx) + 9);
    96bc:	ce 01       	movw	r24, r28
    96be:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224]>
    96c2:	f6 01       	movw	r30, r12
    96c4:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1312
}
    96c6:	df 91       	pop	r29
    96c8:	cf 91       	pop	r28
    96ca:	1f 91       	pop	r17
    96cc:	0f 91       	pop	r16
    96ce:	ff 90       	pop	r15
    96d0:	ef 90       	pop	r14
    96d2:	df 90       	pop	r13
    96d4:	cf 90       	pop	r12
    96d6:	08 95       	ret

000096d8 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>:
_Z12createStringPccPhhh():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:114
}



void createString(char* str, char sep, uint8_t* bytes, uint8_t maxBytes, uint8_t base)
{
    96d8:	4f 92       	push	r4
    96da:	5f 92       	push	r5
    96dc:	6f 92       	push	r6
    96de:	7f 92       	push	r7
    96e0:	8f 92       	push	r8
    96e2:	9f 92       	push	r9
    96e4:	af 92       	push	r10
    96e6:	bf 92       	push	r11
    96e8:	cf 92       	push	r12
    96ea:	df 92       	push	r13
    96ec:	ef 92       	push	r14
    96ee:	ff 92       	push	r15
    96f0:	0f 93       	push	r16
    96f2:	1f 93       	push	r17
    96f4:	cf 93       	push	r28
    96f6:	df 93       	push	r29
    96f8:	00 d0       	rcall	.+0      	; 0x96fa <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x22>
    96fa:	00 d0       	rcall	.+0      	; 0x96fc <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x24>
    96fc:	1f 92       	push	r1
    96fe:	1f 92       	push	r1
    9700:	cd b7       	in	r28, 0x3d	; 61
    9702:	de b7       	in	r29, 0x3e	; 62
    9704:	6c 01       	movw	r12, r24
    9706:	46 2e       	mov	r4, r22
    9708:	52 2e       	mov	r5, r18
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:116
  char tmp1[8];
  str[0] = 0;
    970a:	fc 01       	movw	r30, r24
    970c:	10 82       	st	Z, r1
    970e:	3a 01       	movw	r6, r20
    9710:	f1 2c       	mov	r15, r1
    9712:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:119
  for (uint8_t a = 0; a < maxBytes; a++ )
  {
    itoa(bytes[a], tmp1, base);
    9714:	a0 2e       	mov	r10, r16
    9716:	b1 2c       	mov	r11, r1
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:433
extern __inline__ __ATTR_GNU_INLINE__
char *itoa (int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__itoa (int, char *, int);
	return __itoa (__val, __s, __radix);
    9718:	8e 01       	movw	r16, r28
    971a:	0f 5f       	subi	r16, 0xFF	; 255
    971c:	1f 4f       	sbci	r17, 0xFF	; 255
_Z12createStringPccPhhh():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:123
    if (strlen(tmp1) < 2)
      strcat(str, "0");
    strcat(str, tmp1); 
    if (a < maxBytes - 1)
    971e:	82 2f       	mov	r24, r18
    9720:	81 50       	subi	r24, 0x01	; 1
    9722:	99 0b       	sbc	r25, r25
    9724:	4c 01       	movw	r8, r24
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:119
{
  char tmp1[8];
  str[0] = 0;
  for (uint8_t a = 0; a < maxBytes; a++ )
  {
    itoa(bytes[a], tmp1, base);
    9726:	f3 01       	movw	r30, r6
    9728:	81 91       	ld	r24, Z+
    972a:	3f 01       	movw	r6, r30
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:433
    972c:	a5 01       	movw	r20, r10
    972e:	b8 01       	movw	r22, r16
    9730:	90 e0       	ldi	r25, 0x00	; 0
    9732:	0e 94 74 80 	call	0x100e8	; 0x100e8 <itoa>
_Z12createStringPccPhhh():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:120
    if (strlen(tmp1) < 2)
    9736:	f8 01       	movw	r30, r16
    9738:	01 90       	ld	r0, Z+
    973a:	00 20       	and	r0, r0
    973c:	e9 f7       	brne	.-6      	; 0x9738 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x60>
    973e:	31 97       	sbiw	r30, 0x01	; 1
    9740:	e0 1b       	sub	r30, r16
    9742:	f1 0b       	sbc	r31, r17
    9744:	32 97       	sbiw	r30, 0x02	; 2
    9746:	28 f4       	brcc	.+10     	; 0x9752 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x7a>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:121
      strcat(str, "0");
    9748:	6f e3       	ldi	r22, 0x3F	; 63
    974a:	73 e0       	ldi	r23, 0x03	; 3
    974c:	c6 01       	movw	r24, r12
    974e:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:122
    strcat(str, tmp1); 
    9752:	b8 01       	movw	r22, r16
    9754:	c6 01       	movw	r24, r12
    9756:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:123
    if (a < maxBytes - 1)
    975a:	e8 14       	cp	r14, r8
    975c:	f9 04       	cpc	r15, r9
    975e:	34 f4       	brge	.+12     	; 0x976c <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x94>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:125
    {
      tmp1[0] = sep;
    9760:	49 82       	std	Y+1, r4	; 0x01
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:126
      tmp1[1] = 0;
    9762:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:127
      strcat(str, tmp1);
    9764:	b8 01       	movw	r22, r16
    9766:	c6 01       	movw	r24, r12
    9768:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
    976c:	ff ef       	ldi	r31, 0xFF	; 255
    976e:	ef 1a       	sub	r14, r31
    9770:	ff 0a       	sbc	r15, r31
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:117

void createString(char* str, char sep, uint8_t* bytes, uint8_t maxBytes, uint8_t base)
{
  char tmp1[8];
  str[0] = 0;
  for (uint8_t a = 0; a < maxBytes; a++ )
    9772:	e5 14       	cp	r14, r5
    9774:	c0 f2       	brcs	.-80     	; 0x9726 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x4e>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:130
      tmp1[0] = sep;
      tmp1[1] = 0;
      strcat(str, tmp1);
    }
  }
}
    9776:	28 96       	adiw	r28, 0x08	; 8
    9778:	0f b6       	in	r0, 0x3f	; 63
    977a:	f8 94       	cli
    977c:	de bf       	out	0x3e, r29	; 62
    977e:	0f be       	out	0x3f, r0	; 63
    9780:	cd bf       	out	0x3d, r28	; 61
    9782:	df 91       	pop	r29
    9784:	cf 91       	pop	r28
    9786:	1f 91       	pop	r17
    9788:	0f 91       	pop	r16
    978a:	ff 90       	pop	r15
    978c:	ef 90       	pop	r14
    978e:	df 90       	pop	r13
    9790:	cf 90       	pop	r12
    9792:	bf 90       	pop	r11
    9794:	af 90       	pop	r10
    9796:	9f 90       	pop	r9
    9798:	8f 90       	pop	r8
    979a:	7f 90       	pop	r7
    979c:	6f 90       	pop	r6
    979e:	5f 90       	pop	r5
    97a0:	4f 90       	pop	r4
    97a2:	08 95       	ret

000097a4 <EthernetUDP::parsePacket()>:
_ZN11EthernetUDP11parsePacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:123
  _offset += bytes_written;
  return bytes_written;
}

int EthernetUDP::parsePacket()
{
    97a4:	0f 93       	push	r16
    97a6:	1f 93       	push	r17
    97a8:	cf 93       	push	r28
    97aa:	df 93       	push	r29
    97ac:	00 d0       	rcall	.+0      	; 0x97ae <EthernetUDP::parsePacket()+0xa>
    97ae:	00 d0       	rcall	.+0      	; 0x97b0 <EthernetUDP::parsePacket()+0xc>
    97b0:	1f 92       	push	r1
    97b2:	1f 92       	push	r1
    97b4:	cd b7       	in	r28, 0x3d	; 61
    97b6:	de b7       	in	r29, 0x3e	; 62
    97b8:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:125
  // discard any remaining bytes in the last packet
  flush();
    97ba:	dc 01       	movw	r26, r24
    97bc:	ed 91       	ld	r30, X+
    97be:	fc 91       	ld	r31, X
    97c0:	06 80       	ldd	r0, Z+6	; 0x06
    97c2:	f7 81       	ldd	r31, Z+7	; 0x07
    97c4:	e0 2d       	mov	r30, r0
    97c6:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:127

  if (w5500.getRXReceivedSize(_sock) > 0)
    97c8:	f8 01       	movw	r30, r16
    97ca:	84 85       	ldd	r24, Z+12	; 0x0c
    97cc:	0e 94 a2 19 	call	0x3344	; 0x3344 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.22]>
    97d0:	89 2b       	or	r24, r25
    97d2:	b1 f1       	breq	.+108    	; 0x9840 <EthernetUDP::parsePacket()+0x9c>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:133
  {
    //HACK - hand-parse the UDP packet using TCP recv method
    uint8_t tmpBuf[8];
    int ret =0; 
    //read 8 header bytes and get IP and port from it
    ret = recv(_sock,tmpBuf,8);
    97d4:	48 e0       	ldi	r20, 0x08	; 8
    97d6:	50 e0       	ldi	r21, 0x00	; 0
    97d8:	be 01       	movw	r22, r28
    97da:	6f 5f       	subi	r22, 0xFF	; 255
    97dc:	7f 4f       	sbci	r23, 0xFF	; 255
    97de:	d8 01       	movw	r26, r16
    97e0:	1c 96       	adiw	r26, 0x0c	; 12
    97e2:	8c 91       	ld	r24, X
    97e4:	0e 94 94 1a 	call	0x3528	; 0x3528 <recv(unsigned char, unsigned char*, int)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:134
    if (ret > 0)
    97e8:	18 16       	cp	r1, r24
    97ea:	19 06       	cpc	r1, r25
    97ec:	f4 f4       	brge	.+60     	; 0x982a <EthernetUDP::parsePacket()+0x86>
operator=():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:88
    return true;
}

IPAddress& IPAddress::operator=(const uint8_t *address)
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
    97ee:	d8 01       	movw	r26, r16
    97f0:	51 96       	adiw	r26, 0x11	; 17
    97f2:	84 e0       	ldi	r24, 0x04	; 4
    97f4:	fe 01       	movw	r30, r28
    97f6:	31 96       	adiw	r30, 0x01	; 1
    97f8:	01 90       	ld	r0, Z+
    97fa:	0d 92       	st	X+, r0
    97fc:	8a 95       	dec	r24
    97fe:	e1 f7       	brne	.-8      	; 0x97f8 <EthernetUDP::parsePacket()+0x54>
_ZN11EthernetUDP11parsePacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:137
    {
      _remoteIP = tmpBuf;
      _remotePort = tmpBuf[4];
    9800:	8d 81       	ldd	r24, Y+5	; 0x05
    9802:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:138
      _remotePort = (_remotePort << 8) + tmpBuf[5];
    9804:	98 2f       	mov	r25, r24
    9806:	88 27       	eor	r24, r24
    9808:	2e 81       	ldd	r18, Y+6	; 0x06
    980a:	82 0f       	add	r24, r18
    980c:	91 1d       	adc	r25, r1
    980e:	f8 01       	movw	r30, r16
    9810:	96 8b       	std	Z+22, r25	; 0x16
    9812:	85 8b       	std	Z+21, r24	; 0x15
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:139
      _remaining = tmpBuf[6];
    9814:	8f 81       	ldd	r24, Y+7	; 0x07
    9816:	28 2f       	mov	r18, r24
    9818:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:140
      _remaining = (_remaining << 8) + tmpBuf[7];
    981a:	32 2f       	mov	r19, r18
    981c:	22 27       	eor	r18, r18
    981e:	88 85       	ldd	r24, Y+8	; 0x08
    9820:	82 0f       	add	r24, r18
    9822:	93 2f       	mov	r25, r19
    9824:	91 1d       	adc	r25, r1
    9826:	92 8f       	std	Z+26, r25	; 0x1a
    9828:	81 8f       	std	Z+25, r24	; 0x19
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:149
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
}
    982a:	28 96       	adiw	r28, 0x08	; 8
    982c:	0f b6       	in	r0, 0x3f	; 63
    982e:	f8 94       	cli
    9830:	de bf       	out	0x3e, r29	; 62
    9832:	0f be       	out	0x3f, r0	; 63
    9834:	cd bf       	out	0x3d, r28	; 61
    9836:	df 91       	pop	r29
    9838:	cf 91       	pop	r28
    983a:	1f 91       	pop	r17
    983c:	0f 91       	pop	r16
    983e:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:148
      ret = _remaining;
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
    9840:	90 e0       	ldi	r25, 0x00	; 0
    9842:	80 e0       	ldi	r24, 0x00	; 0
    9844:	f2 cf       	rjmp	.-28     	; 0x982a <EthernetUDP::parsePacket()+0x86>

00009846 <DNSClient::getHostByName(char const*, IPAddress&)>:
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:119
        return 0;
    }
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
    9846:	4f 92       	push	r4
    9848:	5f 92       	push	r5
    984a:	6f 92       	push	r6
    984c:	7f 92       	push	r7
    984e:	8f 92       	push	r8
    9850:	9f 92       	push	r9
    9852:	af 92       	push	r10
    9854:	bf 92       	push	r11
    9856:	cf 92       	push	r12
    9858:	df 92       	push	r13
    985a:	ef 92       	push	r14
    985c:	ff 92       	push	r15
    985e:	0f 93       	push	r16
    9860:	1f 93       	push	r17
    9862:	cf 93       	push	r28
    9864:	df 93       	push	r29
    9866:	cd b7       	in	r28, 0x3d	; 61
    9868:	de b7       	in	r29, 0x3e	; 62
    986a:	63 97       	sbiw	r28, 0x13	; 19
    986c:	0f b6       	in	r0, 0x3f	; 63
    986e:	f8 94       	cli
    9870:	de bf       	out	0x3e, r29	; 62
    9872:	0f be       	out	0x3f, r0	; 63
    9874:	cd bf       	out	0x3d, r28	; 61
    9876:	7c 01       	movw	r14, r24
    9878:	6b 01       	movw	r12, r22
    987a:	3a 01       	movw	r6, r20
    987c:	fb 01       	movw	r30, r22
    987e:	db 01       	movw	r26, r22
inet_aton():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:62

int DNSClient::inet_aton(const char* aIPAddrString, IPAddress& aResult)
{
    // See if we've been given a valid IP address
    const char* p =aIPAddrString;
    while (*p &&
    9880:	8d 91       	ld	r24, X+
    9882:	81 11       	cpse	r24, r1
    9884:	fd cf       	rjmp	.-6      	; 0x9880 <DNSClient::getHostByName(char const*, IPAddress&)+0x3a>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:73
    if (*p == '\0')
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
    9886:	30 e0       	ldi	r19, 0x00	; 0
    9888:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:72

    if (*p == '\0')
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
    988a:	90 e0       	ldi	r25, 0x00	; 0
    988c:	80 e0       	ldi	r24, 0x00	; 0
inet_aton():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:94
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    988e:	5a e0       	ldi	r21, 0x0A	; 10
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:74
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
        while (*p && (segment < 4))
    9890:	41 91       	ld	r20, Z+
    9892:	44 23       	and	r20, r20
    9894:	01 f1       	breq	.+64     	; 0x98d6 <DNSClient::getHostByName(char const*, IPAddress&)+0x90>
    9896:	84 30       	cpi	r24, 0x04	; 4
    9898:	91 05       	cpc	r25, r1
    989a:	0c f0       	brlt	.+2      	; 0x989e <DNSClient::getHostByName(char const*, IPAddress&)+0x58>
    989c:	42 c0       	rjmp	.+132    	; 0x9922 <DNSClient::getHostByName(char const*, IPAddress&)+0xdc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:76
        {
            if (*p == '.')
    989e:	4e 32       	cpi	r20, 0x2E	; 46
    98a0:	69 f4       	brne	.+26     	; 0x98bc <DNSClient::getHostByName(char const*, IPAddress&)+0x76>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:79
            {
                // We've reached the end of a segment
                if (segmentValue > 255)
    98a2:	2f 3f       	cpi	r18, 0xFF	; 255
    98a4:	31 05       	cpc	r19, r1
    98a6:	09 f0       	breq	.+2      	; 0x98aa <DNSClient::getHostByName(char const*, IPAddress&)+0x64>
    98a8:	e4 f5       	brge	.+120    	; 0x9922 <DNSClient::getHostByName(char const*, IPAddress&)+0xdc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:86
                    // You can't have IP address segments that don't fit in a byte
                    return 0;
                }
                else
                {
                    aResult[segment] = (byte)segmentValue;
    98aa:	d3 01       	movw	r26, r6
    98ac:	a8 0f       	add	r26, r24
    98ae:	b9 1f       	adc	r27, r25
    98b0:	12 96       	adiw	r26, 0x02	; 2
    98b2:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:87
                    segment++;
    98b4:	01 96       	adiw	r24, 0x01	; 1
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:88
                    segmentValue = 0;
    98b6:	30 e0       	ldi	r19, 0x00	; 0
    98b8:	20 e0       	ldi	r18, 0x00	; 0
    98ba:	ea cf       	rjmp	.-44     	; 0x9890 <DNSClient::getHostByName(char const*, IPAddress&)+0x4a>
inet_aton():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:94
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    98bc:	52 9f       	mul	r21, r18
    98be:	b0 01       	movw	r22, r0
    98c0:	53 9f       	mul	r21, r19
    98c2:	70 0d       	add	r23, r0
    98c4:	11 24       	eor	r1, r1
    98c6:	24 2f       	mov	r18, r20
    98c8:	44 0f       	add	r20, r20
    98ca:	33 0b       	sbc	r19, r19
    98cc:	20 53       	subi	r18, 0x30	; 48
    98ce:	31 09       	sbc	r19, r1
    98d0:	26 0f       	add	r18, r22
    98d2:	37 1f       	adc	r19, r23
    98d4:	dd cf       	rjmp	.-70     	; 0x9890 <DNSClient::getHostByName(char const*, IPAddress&)+0x4a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:100
            }
            p++;
        }
        // We've reached the end of address, but there'll still be the last
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
    98d6:	2f 3f       	cpi	r18, 0xFF	; 255
    98d8:	31 05       	cpc	r19, r1
    98da:	09 f0       	breq	.+2      	; 0x98de <DNSClient::getHostByName(char const*, IPAddress&)+0x98>
    98dc:	14 f5       	brge	.+68     	; 0x9922 <DNSClient::getHostByName(char const*, IPAddress&)+0xdc>
    98de:	84 30       	cpi	r24, 0x04	; 4
    98e0:	91 05       	cpc	r25, r1
    98e2:	fc f4       	brge	.+62     	; 0x9922 <DNSClient::getHostByName(char const*, IPAddress&)+0xdc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:108
            // or more than four segments
            return 0;
        }
        else
        {
            aResult[segment] = (byte)segmentValue;
    98e4:	68 0e       	add	r6, r24
    98e6:	79 1e       	adc	r7, r25
    98e8:	f3 01       	movw	r30, r6
    98ea:	22 83       	std	Z+2, r18	; 0x02
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:126

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    {
        // It is, our work here is done
        return 1;
    98ec:	cc 24       	eor	r12, r12
    98ee:	c3 94       	inc	r12
    98f0:	d1 2c       	mov	r13, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:173
        // We're done with the socket now
        iUdp.stop();
    }

    return ret;
}
    98f2:	c6 01       	movw	r24, r12
    98f4:	63 96       	adiw	r28, 0x13	; 19
    98f6:	0f b6       	in	r0, 0x3f	; 63
    98f8:	f8 94       	cli
    98fa:	de bf       	out	0x3e, r29	; 62
    98fc:	0f be       	out	0x3f, r0	; 63
    98fe:	cd bf       	out	0x3d, r28	; 61
    9900:	df 91       	pop	r29
    9902:	cf 91       	pop	r28
    9904:	1f 91       	pop	r17
    9906:	0f 91       	pop	r16
    9908:	ff 90       	pop	r15
    990a:	ef 90       	pop	r14
    990c:	df 90       	pop	r13
    990e:	cf 90       	pop	r12
    9910:	bf 90       	pop	r11
    9912:	af 90       	pop	r10
    9914:	9f 90       	pop	r9
    9916:	8f 90       	pop	r8
    9918:	7f 90       	pop	r7
    991a:	6f 90       	pop	r6
    991c:	5f 90       	pop	r5
    991e:	4f 90       	pop	r4
    9920:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:130
        // It is, our work here is done
        return 1;
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    9922:	f7 01       	movw	r30, r14
    9924:	42 81       	ldd	r20, Z+2	; 0x02
    9926:	53 81       	ldd	r21, Z+3	; 0x03
    9928:	64 81       	ldd	r22, Z+4	; 0x04
    992a:	75 81       	ldd	r23, Z+5	; 0x05
    992c:	80 91 04 10 	lds	r24, 0x1004	; 0x801004 <_ZL11INADDR_NONE.lto_priv.196+0x2>
    9930:	90 91 05 10 	lds	r25, 0x1005	; 0x801005 <_ZL11INADDR_NONE.lto_priv.196+0x3>
    9934:	a0 91 06 10 	lds	r26, 0x1006	; 0x801006 <_ZL11INADDR_NONE.lto_priv.196+0x4>
    9938:	b0 91 07 10 	lds	r27, 0x1007	; 0x801007 <_ZL11INADDR_NONE.lto_priv.196+0x5>
    993c:	48 17       	cp	r20, r24
    993e:	59 07       	cpc	r21, r25
    9940:	6a 07       	cpc	r22, r26
    9942:	7b 07       	cpc	r23, r27
    9944:	09 f4       	brne	.+2      	; 0x9948 <DNSClient::getHostByName(char const*, IPAddress&)+0x102>
    9946:	00 c2       	rjmp	.+1024   	; 0x9d48 <DNSClient::getHostByName(char const*, IPAddress&)+0x502>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:136
    {
        return INVALID_SERVER;
    }
	
    // Find a socket to use
    if (iUdp.begin(1024+(millis() & 0xF)) == 1)
    9948:	87 01       	movw	r16, r14
    994a:	08 5f       	subi	r16, 0xF8	; 248
    994c:	1f 4f       	sbci	r17, 0xFF	; 255
    994e:	0e 94 28 13 	call	0x2650	; 0x2650 <millis>
    9952:	6f 70       	andi	r22, 0x0F	; 15
    9954:	77 27       	eor	r23, r23
    9956:	7c 5f       	subi	r23, 0xFC	; 252
    9958:	c8 01       	movw	r24, r16
    995a:	0e 94 61 1b 	call	0x36c2	; 0x36c2 <EthernetUDP::begin(unsigned int)>
    995e:	81 30       	cpi	r24, 0x01	; 1
    9960:	09 f0       	breq	.+2      	; 0x9964 <DNSClient::getHostByName(char const*, IPAddress&)+0x11e>
    9962:	f7 c1       	rjmp	.+1006   	; 0x9d52 <DNSClient::getHostByName(char const*, IPAddress&)+0x50c>
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
    9964:	82 ee       	ldi	r24, 0xE2	; 226
    9966:	92 e0       	ldi	r25, 0x02	; 2
    9968:	9a 83       	std	Y+2, r25	; 0x02
    996a:	89 83       	std	Y+1, r24	; 0x01
    996c:	f7 01       	movw	r30, r14
    996e:	82 81       	ldd	r24, Z+2	; 0x02
    9970:	93 81       	ldd	r25, Z+3	; 0x03
    9972:	a4 81       	ldd	r26, Z+4	; 0x04
    9974:	b5 81       	ldd	r27, Z+5	; 0x05
    9976:	8b 83       	std	Y+3, r24	; 0x03
    9978:	9c 83       	std	Y+4, r25	; 0x04
    997a:	ad 83       	std	Y+5, r26	; 0x05
    997c:	be 83       	std	Y+6, r27	; 0x06
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:143
        // Try up to three times
        int retries = 0;
//        while ((retries < 3) && (ret <= 0))
        {
            // Send DNS request
            ret = iUdp.beginPacket(iDNSServer, DNS_PORT);
    997e:	45 e3       	ldi	r20, 0x35	; 53
    9980:	50 e0       	ldi	r21, 0x00	; 0
    9982:	be 01       	movw	r22, r28
    9984:	6f 5f       	subi	r22, 0xFF	; 255
    9986:	7f 4f       	sbci	r23, 0xFF	; 255
    9988:	c8 01       	movw	r24, r16
    998a:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <EthernetUDP::beginPacket(IPAddress, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:144
            if (ret != 0)
    998e:	89 2b       	or	r24, r25
    9990:	31 f4       	brne	.+12     	; 0x999e <DNSClient::getHostByName(char const*, IPAddress&)+0x158>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:275
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
        (iUdp.remotePort() != DNS_PORT) )
    {
        // It's not from who we expected
        return INVALID_SERVER;
    9992:	d1 2c       	mov	r13, r1
    9994:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:169
            }
            retries++;
        }

        // We're done with the socket now
        iUdp.stop();
    9996:	c8 01       	movw	r24, r16
    9998:	0e 94 d6 18 	call	0x31ac	; 0x31ac <EthernetUDP::stop()>
    999c:	aa cf       	rjmp	.-172    	; 0x98f2 <DNSClient::getHostByName(char const*, IPAddress&)+0xac>
BuildRequest():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:195
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    //    |                    ARCOUNT                    |
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    // As we only support one request at a time at present, we can simplify
    // some of this header
    iRequestId = millis(); // generate a random ID
    999e:	0e 94 28 13 	call	0x2650	; 0x2650 <millis>
    99a2:	f7 01       	movw	r30, r14
    99a4:	77 83       	std	Z+7, r23	; 0x07
    99a6:	66 83       	std	Z+6, r22	; 0x06
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:200
    uint16_t twoByteBuffer;

    // FIXME We should also check that there's enough space available to write to, rather
    // FIXME than assume there's enough space (as the code does at present)
    iUdp.write((uint8_t*)&iRequestId, sizeof(iRequestId));
    99a8:	42 e0       	ldi	r20, 0x02	; 2
    99aa:	50 e0       	ldi	r21, 0x00	; 0
    99ac:	b7 01       	movw	r22, r14
    99ae:	6a 5f       	subi	r22, 0xFA	; 250
    99b0:	7f 4f       	sbci	r23, 0xFF	; 255
    99b2:	c8 01       	movw	r24, r16
    99b4:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:202

    twoByteBuffer = htons(QUERY_FLAG | OPCODE_STANDARD_QUERY | RECURSION_DESIRED_FLAG);
    99b8:	81 e0       	ldi	r24, 0x01	; 1
    99ba:	90 e0       	ldi	r25, 0x00	; 0
    99bc:	9a 83       	std	Y+2, r25	; 0x02
    99be:	89 83       	std	Y+1, r24	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:203
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    99c0:	42 e0       	ldi	r20, 0x02	; 2
    99c2:	50 e0       	ldi	r21, 0x00	; 0
    99c4:	be 01       	movw	r22, r28
    99c6:	6f 5f       	subi	r22, 0xFF	; 255
    99c8:	7f 4f       	sbci	r23, 0xFF	; 255
    99ca:	c8 01       	movw	r24, r16
    99cc:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:205

    twoByteBuffer = htons(1);  // One question record
    99d0:	80 e0       	ldi	r24, 0x00	; 0
    99d2:	91 e0       	ldi	r25, 0x01	; 1
    99d4:	9a 83       	std	Y+2, r25	; 0x02
    99d6:	89 83       	std	Y+1, r24	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:206
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    99d8:	42 e0       	ldi	r20, 0x02	; 2
    99da:	50 e0       	ldi	r21, 0x00	; 0
    99dc:	be 01       	movw	r22, r28
    99de:	6f 5f       	subi	r22, 0xFF	; 255
    99e0:	7f 4f       	sbci	r23, 0xFF	; 255
    99e2:	c8 01       	movw	r24, r16
    99e4:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:208

    twoByteBuffer = 0;  // Zero answer records
    99e8:	1a 82       	std	Y+2, r1	; 0x02
    99ea:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:209
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    99ec:	42 e0       	ldi	r20, 0x02	; 2
    99ee:	50 e0       	ldi	r21, 0x00	; 0
    99f0:	be 01       	movw	r22, r28
    99f2:	6f 5f       	subi	r22, 0xFF	; 255
    99f4:	7f 4f       	sbci	r23, 0xFF	; 255
    99f6:	c8 01       	movw	r24, r16
    99f8:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:211

    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    99fc:	42 e0       	ldi	r20, 0x02	; 2
    99fe:	50 e0       	ldi	r21, 0x00	; 0
    9a00:	be 01       	movw	r22, r28
    9a02:	6f 5f       	subi	r22, 0xFF	; 255
    9a04:	7f 4f       	sbci	r23, 0xFF	; 255
    9a06:	c8 01       	movw	r24, r16
    9a08:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:213
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    9a0c:	42 e0       	ldi	r20, 0x02	; 2
    9a0e:	50 e0       	ldi	r21, 0x00	; 0
    9a10:	be 01       	movw	r22, r28
    9a12:	6f 5f       	subi	r22, 0xFF	; 255
    9a14:	7f 4f       	sbci	r23, 0xFF	; 255
    9a16:	c8 01       	movw	r24, r16
    9a18:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <EthernetUDP::write(unsigned char const*, unsigned int)>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:216

    // Build question
    const char* start =aName;
    9a1c:	56 01       	movw	r10, r12
BuildRequest():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:220
    const char* end =start;
    uint8_t len;
    // Run through the name being requested
    while (*end)
    9a1e:	f6 01       	movw	r30, r12
    9a20:	80 81       	ld	r24, Z
    9a22:	88 23       	and	r24, r24
    9a24:	01 f1       	breq	.+64     	; 0x9a66 <DNSClient::getHostByName(char const*, IPAddress&)+0x220>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:223
    {
        // Find out how long this section of the name is
        end = start;
    9a26:	65 01       	movw	r12, r10
BuildRequest():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:224
        while (*end && (*end != '.') )
    9a28:	f6 01       	movw	r30, r12
    9a2a:	81 91       	ld	r24, Z+
    9a2c:	2f 01       	movw	r4, r30
    9a2e:	88 23       	and	r24, r24
    9a30:	11 f0       	breq	.+4      	; 0x9a36 <DNSClient::getHostByName(char const*, IPAddress&)+0x1f0>
    9a32:	8e 32       	cpi	r24, 0x2E	; 46
    9a34:	b1 f4       	brne	.+44     	; 0x9a62 <DNSClient::getHostByName(char const*, IPAddress&)+0x21c>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:229
        {
            end++;
        }

        if (end-start > 0)
    9a36:	46 01       	movw	r8, r12
    9a38:	8a 18       	sub	r8, r10
    9a3a:	9b 08       	sbc	r9, r11
    9a3c:	18 14       	cp	r1, r8
    9a3e:	19 04       	cpc	r1, r9
    9a40:	74 f4       	brge	.+28     	; 0x9a5e <DNSClient::getHostByName(char const*, IPAddress&)+0x218>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:232
        {
            // Write out the size of this section
            len = end-start;
    9a42:	8d 86       	std	Y+13, r8	; 0x0d
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:233
            iUdp.write(&len, sizeof(len));
    9a44:	41 e0       	ldi	r20, 0x01	; 1
    9a46:	50 e0       	ldi	r21, 0x00	; 0
    9a48:	be 01       	movw	r22, r28
    9a4a:	63 5f       	subi	r22, 0xF3	; 243
    9a4c:	7f 4f       	sbci	r23, 0xFF	; 255
    9a4e:	c8 01       	movw	r24, r16
    9a50:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:235
            // And then write out the section
            iUdp.write((uint8_t*)start, end-start);
    9a54:	a4 01       	movw	r20, r8
    9a56:	b5 01       	movw	r22, r10
    9a58:	c8 01       	movw	r24, r16
    9a5a:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <EthernetUDP::write(unsigned char const*, unsigned int)>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:216
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));

    // Build question
    const char* start =aName;
    9a5e:	52 01       	movw	r10, r4
    9a60:	de cf       	rjmp	.-68     	; 0x9a1e <DNSClient::getHostByName(char const*, IPAddress&)+0x1d8>
BuildRequest():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:224
    // Run through the name being requested
    while (*end)
    {
        // Find out how long this section of the name is
        end = start;
        while (*end && (*end != '.') )
    9a62:	62 01       	movw	r12, r4
    9a64:	e1 cf       	rjmp	.-62     	; 0x9a28 <DNSClient::getHostByName(char const*, IPAddress&)+0x1e2>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:242
        start = end+1;
    }

    // We've got to the end of the question name, so
    // terminate it with a zero-length section
    len = 0;
    9a66:	1d 86       	std	Y+13, r1	; 0x0d
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:243
    iUdp.write(&len, sizeof(len));
    9a68:	41 e0       	ldi	r20, 0x01	; 1
    9a6a:	50 e0       	ldi	r21, 0x00	; 0
    9a6c:	be 01       	movw	r22, r28
    9a6e:	63 5f       	subi	r22, 0xF3	; 243
    9a70:	7f 4f       	sbci	r23, 0xFF	; 255
    9a72:	c8 01       	movw	r24, r16
    9a74:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:245
    // Finally the type and class of question
    twoByteBuffer = htons(TYPE_A);
    9a78:	c1 2c       	mov	r12, r1
    9a7a:	dd 24       	eor	r13, r13
    9a7c:	d3 94       	inc	r13
    9a7e:	da 82       	std	Y+2, r13	; 0x02
    9a80:	c9 82       	std	Y+1, r12	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:246
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    9a82:	42 e0       	ldi	r20, 0x02	; 2
    9a84:	50 e0       	ldi	r21, 0x00	; 0
    9a86:	be 01       	movw	r22, r28
    9a88:	6f 5f       	subi	r22, 0xFF	; 255
    9a8a:	7f 4f       	sbci	r23, 0xFF	; 255
    9a8c:	c8 01       	movw	r24, r16
    9a8e:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:248

    twoByteBuffer = htons(CLASS_IN);  // Internet class of question
    9a92:	da 82       	std	Y+2, r13	; 0x02
    9a94:	c9 82       	std	Y+1, r12	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:249
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    9a96:	42 e0       	ldi	r20, 0x02	; 2
    9a98:	50 e0       	ldi	r21, 0x00	; 0
    9a9a:	be 01       	movw	r22, r28
    9a9c:	6f 5f       	subi	r22, 0xFF	; 255
    9a9e:	7f 4f       	sbci	r23, 0xFF	; 255
    9aa0:	c8 01       	movw	r24, r16
    9aa2:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <EthernetUDP::write(unsigned char const*, unsigned int)>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:151
                // Now output the request data
                ret = BuildRequest(aHostname);
                if (ret != 0)
                {
                    // And finally send the request
                    ret = iUdp.endPacket();
    9aa6:	c8 01       	movw	r24, r16
    9aa8:	0e 94 38 1b 	call	0x3670	; 0x3670 <EthernetUDP::endPacket()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:152
                    if (ret != 0)
    9aac:	89 2b       	or	r24, r25
    9aae:	09 f4       	brne	.+2      	; 0x9ab2 <DNSClient::getHostByName(char const*, IPAddress&)+0x26c>
    9ab0:	70 cf       	rjmp	.-288    	; 0x9992 <DNSClient::getHostByName(char const*, IPAddress&)+0x14c>
    9ab2:	f3 e0       	ldi	r31, 0x03	; 3
    9ab4:	af 2e       	mov	r10, r31
    9ab6:	b1 2c       	mov	r11, r1
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    9ab8:	23 01       	movw	r4, r6
    9aba:	22 e0       	ldi	r18, 0x02	; 2
    9abc:	42 0e       	add	r4, r18
    9abe:	51 1c       	adc	r5, r1
    9ac0:	43 c0       	rjmp	.+134    	; 0x9b48 <DNSClient::getHostByName(char const*, IPAddress&)+0x302>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:271

    // We've had a reply!
    // Read the UDP header
    uint8_t header[DNS_HEADER_SIZE]; // Enough space to reuse for the DNS header
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
    9ac2:	f7 01       	movw	r30, r14
    9ac4:	42 81       	ldd	r20, Z+2	; 0x02
    9ac6:	53 81       	ldd	r21, Z+3	; 0x03
    9ac8:	64 81       	ldd	r22, Z+4	; 0x04
    9aca:	75 81       	ldd	r23, Z+5	; 0x05
    9acc:	81 8d       	ldd	r24, Z+25	; 0x19
    9ace:	92 8d       	ldd	r25, Z+26	; 0x1a
    9ad0:	a3 8d       	ldd	r26, Z+27	; 0x1b
    9ad2:	b4 8d       	ldd	r27, Z+28	; 0x1c
    9ad4:	48 17       	cp	r20, r24
    9ad6:	59 07       	cpc	r21, r25
    9ad8:	6a 07       	cpc	r22, r26
    9ada:	7b 07       	cpc	r23, r27
    9adc:	09 f0       	breq	.+2      	; 0x9ae0 <DNSClient::getHostByName(char const*, IPAddress&)+0x29a>
    9ade:	2a c1       	rjmp	.+596    	; 0x9d34 <DNSClient::getHostByName(char const*, IPAddress&)+0x4ee>
    9ae0:	85 8d       	ldd	r24, Z+29	; 0x1d
    9ae2:	96 8d       	ldd	r25, Z+30	; 0x1e
    9ae4:	c5 97       	sbiw	r24, 0x35	; 53
    9ae6:	09 f0       	breq	.+2      	; 0x9aea <DNSClient::getHostByName(char const*, IPAddress&)+0x2a4>
    9ae8:	25 c1       	rjmp	.+586    	; 0x9d34 <DNSClient::getHostByName(char const*, IPAddress&)+0x4ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:279
        // It's not from who we expected
        return INVALID_SERVER;
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    9aea:	81 a1       	ldd	r24, Z+33	; 0x21
    9aec:	92 a1       	ldd	r25, Z+34	; 0x22
    9aee:	0c 97       	sbiw	r24, 0x0c	; 12
    9af0:	0c f4       	brge	.+2      	; 0x9af4 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ae>
    9af2:	25 c1       	rjmp	.+586    	; 0x9d3e <DNSClient::getHostByName(char const*, IPAddress&)+0x4f8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:283
    {
        return TRUNCATED;
    }
    iUdp.read(header, DNS_HEADER_SIZE);
    9af4:	4c e0       	ldi	r20, 0x0C	; 12
    9af6:	50 e0       	ldi	r21, 0x00	; 0
    9af8:	be 01       	movw	r22, r28
    9afa:	6f 5f       	subi	r22, 0xFF	; 255
    9afc:	7f 4f       	sbci	r23, 0xFF	; 255
    9afe:	c8 01       	movw	r24, r16
    9b00:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:285

    uint16_t header_flags = htons(*((uint16_t*)&header[2]));
    9b04:	8b 81       	ldd	r24, Y+3	; 0x03
    9b06:	9c 81       	ldd	r25, Y+4	; 0x04
    9b08:	98 27       	eor	r25, r24
    9b0a:	89 27       	eor	r24, r25
    9b0c:	98 27       	eor	r25, r24
    9b0e:	9a 8b       	std	Y+18, r25	; 0x12
    9b10:	89 8b       	std	Y+17, r24	; 0x11
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:287
    // Check that it's a response to this request
    if ( ( iRequestId != (*((uint16_t*)&header[0])) ) ||
    9b12:	f7 01       	movw	r30, r14
    9b14:	46 81       	ldd	r20, Z+6	; 0x06
    9b16:	57 81       	ldd	r21, Z+7	; 0x07
    9b18:	29 81       	ldd	r18, Y+1	; 0x01
    9b1a:	3a 81       	ldd	r19, Y+2	; 0x02
    9b1c:	42 17       	cp	r20, r18
    9b1e:	53 07       	cpc	r21, r19
    9b20:	11 f4       	brne	.+4      	; 0x9b26 <DNSClient::getHostByName(char const*, IPAddress&)+0x2e0>
    9b22:	97 fd       	sbrc	r25, 7
    9b24:	2f c0       	rjmp	.+94     	; 0x9b84 <DNSClient::getHostByName(char const*, IPAddress&)+0x33e>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:291
        ((header_flags & QUERY_RESPONSE_MASK) != (uint16_t)RESPONSE_FLAG) )
    {
        // Mark the entire packet as read
        iUdp.flush();
    9b26:	c8 01       	movw	r24, r16
    9b28:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:292
        return INVALID_RESPONSE;
    9b2c:	ec ef       	ldi	r30, 0xFC	; 252
    9b2e:	ce 2e       	mov	r12, r30
    9b30:	dd 24       	eor	r13, r13
    9b32:	da 94       	dec	r13
    9b34:	81 e0       	ldi	r24, 0x01	; 1
    9b36:	a8 1a       	sub	r10, r24
    9b38:	b1 08       	sbc	r11, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:157
                    if (ret != 0)
                    {
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
    9b3a:	09 f4       	brne	.+2      	; 0x9b3e <DNSClient::getHostByName(char const*, IPAddress&)+0x2f8>
    9b3c:	2c cf       	rjmp	.-424    	; 0x9996 <DNSClient::getHostByName(char const*, IPAddress&)+0x150>
    9b3e:	ff ef       	ldi	r31, 0xFF	; 255
    9b40:	cf 16       	cp	r12, r31
    9b42:	df 06       	cpc	r13, r31
    9b44:	09 f0       	breq	.+2      	; 0x9b48 <DNSClient::getHostByName(char const*, IPAddress&)+0x302>
    9b46:	27 cf       	rjmp	.-434    	; 0x9996 <DNSClient::getHostByName(char const*, IPAddress&)+0x150>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:257
}


uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();
    9b48:	0e 94 28 13 	call	0x2650	; 0x2650 <millis>
    9b4c:	3b 01       	movw	r6, r22
    9b4e:	4c 01       	movw	r8, r24
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:260

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    9b50:	c8 01       	movw	r24, r16
    9b52:	0e 94 d2 4b 	call	0x97a4	; 0x97a4 <EthernetUDP::parsePacket()>
    9b56:	18 16       	cp	r1, r24
    9b58:	19 06       	cpc	r1, r25
    9b5a:	0c f4       	brge	.+2      	; 0x9b5e <DNSClient::getHostByName(char const*, IPAddress&)+0x318>
    9b5c:	b2 cf       	rjmp	.-156    	; 0x9ac2 <DNSClient::getHostByName(char const*, IPAddress&)+0x27c>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:262
    {
        if((millis() - startTime) > aTimeout)
    9b5e:	0e 94 28 13 	call	0x2650	; 0x2650 <millis>
    9b62:	66 19       	sub	r22, r6
    9b64:	77 09       	sbc	r23, r7
    9b66:	88 09       	sbc	r24, r8
    9b68:	99 09       	sbc	r25, r9
    9b6a:	69 38       	cpi	r22, 0x89	; 137
    9b6c:	73 41       	sbci	r23, 0x13	; 19
    9b6e:	81 05       	cpc	r24, r1
    9b70:	91 05       	cpc	r25, r1
    9b72:	08 f0       	brcs	.+2      	; 0x9b76 <DNSClient::getHostByName(char const*, IPAddress&)+0x330>
    9b74:	db c0       	rjmp	.+438    	; 0x9d2c <DNSClient::getHostByName(char const*, IPAddress&)+0x4e6>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:264
            return TIMED_OUT;
        delay(50);
    9b76:	62 e3       	ldi	r22, 0x32	; 50
    9b78:	70 e0       	ldi	r23, 0x00	; 0
    9b7a:	80 e0       	ldi	r24, 0x00	; 0
    9b7c:	90 e0       	ldi	r25, 0x00	; 0
    9b7e:	0e 94 00 12 	call	0x2400	; 0x2400 <delay>
    9b82:	e6 cf       	rjmp	.-52     	; 0x9b50 <DNSClient::getHostByName(char const*, IPAddress&)+0x30a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:296
        iUdp.flush();
        return INVALID_RESPONSE;
    }
    // Check for any errors in the response (or in our request)
    // although we don't do anything to get round these
    if ( (header_flags & TRUNCATION_FLAG) || (header_flags & RESP_MASK) )
    9b84:	8f 70       	andi	r24, 0x0F	; 15
    9b86:	92 70       	andi	r25, 0x02	; 2
    9b88:	89 2b       	or	r24, r25
    9b8a:	41 f0       	breq	.+16     	; 0x9b9c <DNSClient::getHostByName(char const*, IPAddress&)+0x356>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:299
    {
        // Mark the entire packet as read
        iUdp.flush();
    9b8c:	c8 01       	movw	r24, r16
    9b8e:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:300
        return -5; //INVALID_RESPONSE;
    9b92:	7b ef       	ldi	r23, 0xFB	; 251
    9b94:	c7 2e       	mov	r12, r23
    9b96:	dd 24       	eor	r13, r13
    9b98:	da 94       	dec	r13
    9b9a:	cc cf       	rjmp	.-104    	; 0x9b34 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:304
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
    9b9c:	6f 80       	ldd	r6, Y+7	; 0x07
    9b9e:	78 84       	ldd	r7, Y+8	; 0x08
    9ba0:	76 24       	eor	r7, r6
    9ba2:	67 24       	eor	r6, r7
    9ba4:	76 24       	eor	r7, r6
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:313
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    9ba6:	d1 2c       	mov	r13, r1
    9ba8:	c1 2c       	mov	r12, r1
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:305
        return -5; //INVALID_RESPONSE;
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
    if (answerCount == 0 )
    9baa:	61 14       	cp	r6, r1
    9bac:	71 04       	cpc	r7, r1
    9bae:	d1 f4       	brne	.+52     	; 0x9be4 <DNSClient::getHostByName(char const*, IPAddress&)+0x39e>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:308
    {
        // Mark the entire packet as read
        iUdp.flush();
    9bb0:	c8 01       	movw	r24, r16
    9bb2:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:309
        return -6; //INVALID_RESPONSE;
    9bb6:	6a ef       	ldi	r22, 0xFA	; 250
    9bb8:	c6 2e       	mov	r12, r22
    9bba:	dd 24       	eor	r13, r13
    9bbc:	da 94       	dec	r13
    9bbe:	ba cf       	rjmp	.-140    	; 0x9b34 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:329
                while(len--)
                {
                    iUdp.read(); // we don't care about the returned byte
                }
            }
        } while (len != 0);
    9bc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    9bc2:	81 11       	cpse	r24, r1
    9bc4:	17 c0       	rjmp	.+46     	; 0x9bf4 <DNSClient::getHostByName(char const*, IPAddress&)+0x3ae>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:334

        // Now jump over the type and class
        for (int i =0; i < 4; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    9bc6:	c8 01       	movw	r24, r16
    9bc8:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <EthernetUDP::read()>
    9bcc:	c8 01       	movw	r24, r16
    9bce:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <EthernetUDP::read()>
    9bd2:	c8 01       	movw	r24, r16
    9bd4:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <EthernetUDP::read()>
    9bd8:	c8 01       	movw	r24, r16
    9bda:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:313
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    9bde:	ff ef       	ldi	r31, 0xFF	; 255
    9be0:	cf 1a       	sub	r12, r31
    9be2:	df 0a       	sbc	r13, r31
    9be4:	8d 81       	ldd	r24, Y+5	; 0x05
    9be6:	9e 81       	ldd	r25, Y+6	; 0x06
    9be8:	98 27       	eor	r25, r24
    9bea:	89 27       	eor	r24, r25
    9bec:	98 27       	eor	r25, r24
    9bee:	c8 16       	cp	r12, r24
    9bf0:	d9 06       	cpc	r13, r25
    9bf2:	a8 f4       	brcc	.+42     	; 0x9c1e <DNSClient::getHostByName(char const*, IPAddress&)+0x3d8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:319
    {
        // Skip over the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    9bf4:	41 e0       	ldi	r20, 0x01	; 1
    9bf6:	50 e0       	ldi	r21, 0x00	; 0
    9bf8:	be 01       	movw	r22, r28
    9bfa:	63 5f       	subi	r22, 0xF3	; 243
    9bfc:	7f 4f       	sbci	r23, 0xFF	; 255
    9bfe:	c8 01       	movw	r24, r16
    9c00:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:320
            if (len > 0)
    9c04:	8d 85       	ldd	r24, Y+13	; 0x0d
    9c06:	88 23       	and	r24, r24
    9c08:	d9 f2       	breq	.-74     	; 0x9bc0 <DNSClient::getHostByName(char const*, IPAddress&)+0x37a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:324
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
    9c0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    9c0c:	9f ef       	ldi	r25, 0xFF	; 255
    9c0e:	98 0f       	add	r25, r24
    9c10:	9d 87       	std	Y+13, r25	; 0x0d
    9c12:	88 23       	and	r24, r24
    9c14:	a9 f2       	breq	.-86     	; 0x9bc0 <DNSClient::getHostByName(char const*, IPAddress&)+0x37a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:326
                {
                    iUdp.read(); // we don't care about the returned byte
    9c16:	c8 01       	movw	r24, r16
    9c18:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <EthernetUDP::read()>
    9c1c:	f6 cf       	rjmp	.-20     	; 0x9c0a <DNSClient::getHostByName(char const*, IPAddress&)+0x3c4>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:343
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
    9c1e:	91 2c       	mov	r9, r1
    9c20:	81 2c       	mov	r8, r1
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:349
    {
        // Skip the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    9c22:	41 e0       	ldi	r20, 0x01	; 1
    9c24:	50 e0       	ldi	r21, 0x00	; 0
    9c26:	be 01       	movw	r22, r28
    9c28:	6d 5e       	subi	r22, 0xED	; 237
    9c2a:	7f 4f       	sbci	r23, 0xFF	; 255
    9c2c:	c8 01       	movw	r24, r16
    9c2e:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:350
            if ((len & LABEL_COMPRESSION_MASK) == 0)
    9c32:	8b 89       	ldd	r24, Y+19	; 0x13
    9c34:	98 2f       	mov	r25, r24
    9c36:	90 7c       	andi	r25, 0xC0	; 192
    9c38:	61 f4       	brne	.+24     	; 0x9c52 <DNSClient::getHostByName(char const*, IPAddress&)+0x40c>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:353
            {
                // It's just a normal label
                if (len > 0)
    9c3a:	88 23       	and	r24, r24
    9c3c:	89 f0       	breq	.+34     	; 0x9c60 <DNSClient::getHostByName(char const*, IPAddress&)+0x41a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:358
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
    9c3e:	8b 89       	ldd	r24, Y+19	; 0x13
    9c40:	9f ef       	ldi	r25, 0xFF	; 255
    9c42:	98 0f       	add	r25, r24
    9c44:	9b 8b       	std	Y+19, r25	; 0x13
    9c46:	88 23       	and	r24, r24
    9c48:	41 f0       	breq	.+16     	; 0x9c5a <DNSClient::getHostByName(char const*, IPAddress&)+0x414>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:360
                    {
                        iUdp.read(); // we don't care about the returned byte
    9c4a:	c8 01       	movw	r24, r16
    9c4c:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <EthernetUDP::read()>
    9c50:	f6 cf       	rjmp	.-20     	; 0x9c3e <DNSClient::getHostByName(char const*, IPAddress&)+0x3f8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:373
                // says that a name is either a sequence of labels ended with a
                // 0 length octet or a pointer or a sequence of labels ending in
                // a pointer.  Either way, when we get here we're at the end of
                // the name
                // Skip over the pointer
                iUdp.read(); // we don't care about the returned byte
    9c52:	c8 01       	movw	r24, r16
    9c54:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:375
                // And set len so that we drop out of the name loop
                len = 0;
    9c58:	1b 8a       	std	Y+19, r1	; 0x13
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:377
            }
        } while (len != 0);
    9c5a:	8b 89       	ldd	r24, Y+19	; 0x13
    9c5c:	81 11       	cpse	r24, r1
    9c5e:	e1 cf       	rjmp	.-62     	; 0x9c22 <DNSClient::getHostByName(char const*, IPAddress&)+0x3dc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:382

        // Check the type and class
        uint16_t answerType;
        uint16_t answerClass;
        iUdp.read((uint8_t*)&answerType, sizeof(answerType));
    9c60:	42 e0       	ldi	r20, 0x02	; 2
    9c62:	50 e0       	ldi	r21, 0x00	; 0
    9c64:	be 01       	movw	r22, r28
    9c66:	61 5f       	subi	r22, 0xF1	; 241
    9c68:	7f 4f       	sbci	r23, 0xFF	; 255
    9c6a:	c8 01       	movw	r24, r16
    9c6c:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:383
        iUdp.read((uint8_t*)&answerClass, sizeof(answerClass));
    9c70:	42 e0       	ldi	r20, 0x02	; 2
    9c72:	50 e0       	ldi	r21, 0x00	; 0
    9c74:	be 01       	movw	r22, r28
    9c76:	63 5f       	subi	r22, 0xF3	; 243
    9c78:	7f 4f       	sbci	r23, 0xFF	; 255
    9c7a:	c8 01       	movw	r24, r16
    9c7c:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:388

        // Ignore the Time-To-Live as we don't do any caching
        for (int i =0; i < TTL_SIZE; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    9c80:	c8 01       	movw	r24, r16
    9c82:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <EthernetUDP::read()>
    9c86:	c8 01       	movw	r24, r16
    9c88:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <EthernetUDP::read()>
    9c8c:	c8 01       	movw	r24, r16
    9c8e:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <EthernetUDP::read()>
    9c92:	c8 01       	movw	r24, r16
    9c94:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:393
        }

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));
    9c98:	42 e0       	ldi	r20, 0x02	; 2
    9c9a:	50 e0       	ldi	r21, 0x00	; 0
    9c9c:	be 01       	movw	r22, r28
    9c9e:	6f 5e       	subi	r22, 0xEF	; 239
    9ca0:	7f 4f       	sbci	r23, 0xFF	; 255
    9ca2:	c8 01       	movw	r24, r16
    9ca4:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:395

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
    9ca8:	8f 85       	ldd	r24, Y+15	; 0x0f
    9caa:	98 89       	ldd	r25, Y+16	; 0x10
    9cac:	81 15       	cp	r24, r1
    9cae:	91 40       	sbci	r25, 0x01	; 1
    9cb0:	e9 f4       	brne	.+58     	; 0x9cec <DNSClient::getHostByName(char const*, IPAddress&)+0x4a6>
    9cb2:	cd 84       	ldd	r12, Y+13	; 0x0d
    9cb4:	de 84       	ldd	r13, Y+14	; 0x0e
    9cb6:	dc 24       	eor	r13, r12
    9cb8:	cd 24       	eor	r12, r13
    9cba:	dc 24       	eor	r13, r12
    9cbc:	81 e0       	ldi	r24, 0x01	; 1
    9cbe:	c8 16       	cp	r12, r24
    9cc0:	d1 04       	cpc	r13, r1
    9cc2:	a1 f4       	brne	.+40     	; 0x9cec <DNSClient::getHostByName(char const*, IPAddress&)+0x4a6>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:397
        {
            if (htons(header_flags) != 4)
    9cc4:	89 89       	ldd	r24, Y+17	; 0x11
    9cc6:	9a 89       	ldd	r25, Y+18	; 0x12
    9cc8:	81 15       	cp	r24, r1
    9cca:	94 40       	sbci	r25, 0x04	; 4
    9ccc:	41 f0       	breq	.+16     	; 0x9cde <DNSClient::getHostByName(char const*, IPAddress&)+0x498>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:401
            {
                // It's a weird size
                // Mark the entire packet as read
                iUdp.flush();
    9cce:	c8 01       	movw	r24, r16
    9cd0:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:402
                return -9;//INVALID_RESPONSE;
    9cd4:	57 ef       	ldi	r21, 0xF7	; 247
    9cd6:	c5 2e       	mov	r12, r21
    9cd8:	dd 24       	eor	r13, r13
    9cda:	da 94       	dec	r13
    9cdc:	2b cf       	rjmp	.-426    	; 0x9b34 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:404
            }
            iUdp.read(aAddress.raw_address(), 4);
    9cde:	44 e0       	ldi	r20, 0x04	; 4
    9ce0:	50 e0       	ldi	r21, 0x00	; 0
    9ce2:	b2 01       	movw	r22, r4
    9ce4:	c8 01       	movw	r24, r16
    9ce6:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <EthernetUDP::read(unsigned char*, unsigned int)>
    9cea:	24 cf       	rjmp	.-440    	; 0x9b34 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:395

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
    9cec:	d1 2c       	mov	r13, r1
    9cee:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:410
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    9cf0:	89 89       	ldd	r24, Y+17	; 0x11
    9cf2:	9a 89       	ldd	r25, Y+18	; 0x12
    9cf4:	98 27       	eor	r25, r24
    9cf6:	89 27       	eor	r24, r25
    9cf8:	98 27       	eor	r25, r24
    9cfa:	c8 16       	cp	r12, r24
    9cfc:	d9 06       	cpc	r13, r25
    9cfe:	38 f4       	brcc	.+14     	; 0x9d0e <DNSClient::getHostByName(char const*, IPAddress&)+0x4c8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:412
            {
                iUdp.read(); // we don't care about the returned byte
    9d00:	c8 01       	movw	r24, r16
    9d02:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:410
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    9d06:	ff ef       	ldi	r31, 0xFF	; 255
    9d08:	cf 1a       	sub	r12, r31
    9d0a:	df 0a       	sbc	r13, r31
    9d0c:	f1 cf       	rjmp	.-30     	; 0x9cf0 <DNSClient::getHostByName(char const*, IPAddress&)+0x4aa>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:343
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
    9d0e:	2f ef       	ldi	r18, 0xFF	; 255
    9d10:	82 1a       	sub	r8, r18
    9d12:	92 0a       	sbc	r9, r18
    9d14:	68 14       	cp	r6, r8
    9d16:	79 04       	cpc	r7, r9
    9d18:	09 f0       	breq	.+2      	; 0x9d1c <DNSClient::getHostByName(char const*, IPAddress&)+0x4d6>
    9d1a:	83 cf       	rjmp	.-250    	; 0x9c22 <DNSClient::getHostByName(char const*, IPAddress&)+0x3dc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:418
            }
        }
    }

    // Mark the entire packet as read
    iUdp.flush();
    9d1c:	c8 01       	movw	r24, r16
    9d1e:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:421

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
    9d22:	46 ef       	ldi	r20, 0xF6	; 246
    9d24:	c4 2e       	mov	r12, r20
    9d26:	dd 24       	eor	r13, r13
    9d28:	da 94       	dec	r13
    9d2a:	04 cf       	rjmp	.-504    	; 0x9b34 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:263

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    {
        if((millis() - startTime) > aTimeout)
            return TIMED_OUT;
    9d2c:	cc 24       	eor	r12, r12
    9d2e:	ca 94       	dec	r12
    9d30:	dc 2c       	mov	r13, r12
    9d32:	00 cf       	rjmp	.-512    	; 0x9b34 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:275
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
        (iUdp.remotePort() != DNS_PORT) )
    {
        // It's not from who we expected
        return INVALID_SERVER;
    9d34:	2e ef       	ldi	r18, 0xFE	; 254
    9d36:	c2 2e       	mov	r12, r18
    9d38:	dd 24       	eor	r13, r13
    9d3a:	da 94       	dec	r13
    9d3c:	fb ce       	rjmp	.-522    	; 0x9b34 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:281
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    {
        return TRUNCATED;
    9d3e:	9d ef       	ldi	r25, 0xFD	; 253
    9d40:	c9 2e       	mov	r12, r25
    9d42:	dd 24       	eor	r13, r13
    9d44:	da 94       	dec	r13
    9d46:	f6 ce       	rjmp	.-532    	; 0x9b34 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:132
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    {
        return INVALID_SERVER;
    9d48:	8e ef       	ldi	r24, 0xFE	; 254
    9d4a:	c8 2e       	mov	r12, r24
    9d4c:	dd 24       	eor	r13, r13
    9d4e:	da 94       	dec	r13
    9d50:	d0 cd       	rjmp	.-1120   	; 0x98f2 <DNSClient::getHostByName(char const*, IPAddress&)+0xac>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:120
    }
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
    int ret =0;
    9d52:	d1 2c       	mov	r13, r1
    9d54:	c1 2c       	mov	r12, r1
    9d56:	cd cd       	rjmp	.-1126   	; 0x98f2 <DNSClient::getHostByName(char const*, IPAddress&)+0xac>

00009d58 <EthernetUDP::beginPacket(char const*, unsigned int)>:
_ZN11EthernetUDP11beginPacketEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:84
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

int EthernetUDP::beginPacket(const char *host, uint16_t port)
{
    9d58:	cf 92       	push	r12
    9d5a:	df 92       	push	r13
    9d5c:	ef 92       	push	r14
    9d5e:	ff 92       	push	r15
    9d60:	0f 93       	push	r16
    9d62:	1f 93       	push	r17
    9d64:	cf 93       	push	r28
    9d66:	df 93       	push	r29
    9d68:	cd b7       	in	r28, 0x3d	; 61
    9d6a:	de b7       	in	r29, 0x3e	; 62
    9d6c:	af 97       	sbiw	r28, 0x2f	; 47
    9d6e:	0f b6       	in	r0, 0x3f	; 63
    9d70:	f8 94       	cli
    9d72:	de bf       	out	0x3e, r29	; 62
    9d74:	0f be       	out	0x3f, r0	; 63
    9d76:	cd bf       	out	0x3d, r28	; 61
    9d78:	7c 01       	movw	r14, r24
    9d7a:	6a 01       	movw	r12, r20
__base_ctor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:23
*/

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
    9d7c:	02 ee       	ldi	r16, 0xE2	; 226
    9d7e:	12 e0       	ldi	r17, 0x02	; 2
    9d80:	1a 83       	std	Y+2, r17	; 0x02
    9d82:	09 83       	std	Y+1, r16	; 0x01
_ZN5PrintC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    9d84:	1c 86       	std	Y+12, r1	; 0x0c
    9d86:	1b 86       	std	Y+11, r1	; 0x0b
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    9d88:	88 ee       	ldi	r24, 0xE8	; 232
    9d8a:	93 e0       	ldi	r25, 0x03	; 3
    9d8c:	a0 e0       	ldi	r26, 0x00	; 0
    9d8e:	b0 e0       	ldi	r27, 0x00	; 0
    9d90:	8d 87       	std	Y+13, r24	; 0x0d
    9d92:	9e 87       	std	Y+14, r25	; 0x0e
    9d94:	af 87       	std	Y+15, r26	; 0x0f
    9d96:	b8 8b       	std	Y+16, r27	; 0x10
__base_ctor ():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:40
#include "Ethernet2.h"
#include "Udp.h"
#include "Dns.h"

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}
    9d98:	88 e9       	ldi	r24, 0x98	; 152
    9d9a:	92 e0       	ldi	r25, 0x02	; 2
    9d9c:	9a 87       	std	Y+10, r25	; 0x0a
    9d9e:	89 87       	std	Y+9, r24	; 0x09
    9da0:	88 e0       	ldi	r24, 0x08	; 8
    9da2:	8d 8b       	std	Y+21, r24	; 0x15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:23
    9da4:	19 8f       	std	Y+25, r17	; 0x19
    9da6:	08 8f       	std	Y+24, r16	; 0x18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:25
{
    _address.dword = 0;
    9da8:	1a 8e       	std	Y+26, r1	; 0x1a
    9daa:	1b 8e       	std	Y+27, r1	; 0x1b
    9dac:	1c 8e       	std	Y+28, r1	; 0x1c
    9dae:	1d 8e       	std	Y+29, r1	; 0x1d
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:23
*/

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
    9db0:	1b a7       	std	Y+43, r17	; 0x2b
    9db2:	0a a7       	std	Y+42, r16	; 0x2a
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:25
{
    _address.dword = 0;
    9db4:	1c a6       	std	Y+44, r1	; 0x2c
    9db6:	1d a6       	std	Y+45, r1	; 0x2d
    9db8:	1e a6       	std	Y+46, r1	; 0x2e
    9dba:	1f a6       	std	Y+47, r1	; 0x2f
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    9dbc:	80 91 f1 0f 	lds	r24, 0x0FF1	; 0x800ff1 <Ethernet+0x2>
    9dc0:	90 91 f2 0f 	lds	r25, 0x0FF2	; 0x800ff2 <Ethernet+0x3>
    9dc4:	a0 91 f3 0f 	lds	r26, 0x0FF3	; 0x800ff3 <Ethernet+0x4>
    9dc8:	b0 91 f4 0f 	lds	r27, 0x0FF4	; 0x800ff4 <Ethernet+0x5>
    9dcc:	8e a3       	std	Y+38, r24	; 0x26
    9dce:	9f a3       	std	Y+39, r25	; 0x27
    9dd0:	a8 a7       	std	Y+40, r26	; 0x28
    9dd2:	b9 a7       	std	Y+41, r27	; 0x29
_ZN9IPAddressaSERKS_():
    9dd4:	8b 83       	std	Y+3, r24	; 0x03
    9dd6:	9c 83       	std	Y+4, r25	; 0x04
    9dd8:	ad 83       	std	Y+5, r26	; 0x05
    9dda:	be 83       	std	Y+6, r27	; 0x06
begin():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:54
#define INVALID_RESPONSE -4

void DNSClient::begin(const IPAddress& aDNSServer)
{
    iDNSServer = aDNSServer;
    iRequestId = 0;
    9ddc:	18 86       	std	Y+8, r1	; 0x08
    9dde:	1f 82       	std	Y+7, r1	; 0x07
_ZN11EthernetUDP11beginPacketEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:91
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;

  dns.begin(Ethernet.dnsServerIP());
  ret = dns.getHostByName(host, remote_addr);
    9de0:	ae 01       	movw	r20, r28
    9de2:	46 5d       	subi	r20, 0xD6	; 214
    9de4:	5f 4f       	sbci	r21, 0xFF	; 255
    9de6:	ce 01       	movw	r24, r28
    9de8:	01 96       	adiw	r24, 0x01	; 1
    9dea:	0e 94 23 4c 	call	0x9846	; 0x9846 <DNSClient::getHostByName(char const*, IPAddress&)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:92
  if (ret == 1) {
    9dee:	81 30       	cpi	r24, 0x01	; 1
    9df0:	91 05       	cpc	r25, r1
    9df2:	b1 f4       	brne	.+44     	; 0x9e20 <EthernetUDP::beginPacket(char const*, unsigned int)+0xc8>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:93
    return beginPacket(remote_addr, port);
    9df4:	d7 01       	movw	r26, r14
    9df6:	ed 91       	ld	r30, X+
    9df8:	fc 91       	ld	r31, X
    9dfa:	04 88       	ldd	r0, Z+20	; 0x14
    9dfc:	f5 89       	ldd	r31, Z+21	; 0x15
    9dfe:	e0 2d       	mov	r30, r0
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
    9e00:	1d a3       	std	Y+37, r17	; 0x25
    9e02:	0c a3       	std	Y+36, r16	; 0x24
    9e04:	8c a5       	ldd	r24, Y+44	; 0x2c
    9e06:	9d a5       	ldd	r25, Y+45	; 0x2d
    9e08:	ae a5       	ldd	r26, Y+46	; 0x2e
    9e0a:	bf a5       	ldd	r27, Y+47	; 0x2f
    9e0c:	8e a3       	std	Y+38, r24	; 0x26
    9e0e:	9f a3       	std	Y+39, r25	; 0x27
    9e10:	a8 a7       	std	Y+40, r26	; 0x28
    9e12:	b9 a7       	std	Y+41, r27	; 0x29
_ZN11EthernetUDP11beginPacketEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:93
    9e14:	a6 01       	movw	r20, r12
    9e16:	be 01       	movw	r22, r28
    9e18:	6c 5d       	subi	r22, 0xDC	; 220
    9e1a:	7f 4f       	sbci	r23, 0xFF	; 255
    9e1c:	c7 01       	movw	r24, r14
    9e1e:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:97
  } else {
    return ret;
  }
}
    9e20:	af 96       	adiw	r28, 0x2f	; 47
    9e22:	0f b6       	in	r0, 0x3f	; 63
    9e24:	f8 94       	cli
    9e26:	de bf       	out	0x3e, r29	; 62
    9e28:	0f be       	out	0x3f, r0	; 63
    9e2a:	cd bf       	out	0x3d, r28	; 61
    9e2c:	df 91       	pop	r29
    9e2e:	cf 91       	pop	r28
    9e30:	1f 91       	pop	r17
    9e32:	0f 91       	pop	r16
    9e34:	ff 90       	pop	r15
    9e36:	ef 90       	pop	r14
    9e38:	df 90       	pop	r13
    9e3a:	cf 90       	pop	r12
    9e3c:	08 95       	ret

00009e3e <EthernetClient::connect(char const*, unsigned int)>:
_ZN14EthernetClient7connectEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:23
}

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
}

int EthernetClient::connect(const char* host, uint16_t port) {
    9e3e:	cf 92       	push	r12
    9e40:	df 92       	push	r13
    9e42:	ef 92       	push	r14
    9e44:	ff 92       	push	r15
    9e46:	0f 93       	push	r16
    9e48:	1f 93       	push	r17
    9e4a:	cf 93       	push	r28
    9e4c:	df 93       	push	r29
    9e4e:	cd b7       	in	r28, 0x3d	; 61
    9e50:	de b7       	in	r29, 0x3e	; 62
    9e52:	af 97       	sbiw	r28, 0x2f	; 47
    9e54:	0f b6       	in	r0, 0x3f	; 63
    9e56:	f8 94       	cli
    9e58:	de bf       	out	0x3e, r29	; 62
    9e5a:	0f be       	out	0x3f, r0	; 63
    9e5c:	cd bf       	out	0x3d, r28	; 61
    9e5e:	7c 01       	movw	r14, r24
    9e60:	6a 01       	movw	r12, r20
__base_ctor ():
*/

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
    9e62:	02 ee       	ldi	r16, 0xE2	; 226
    9e64:	12 e0       	ldi	r17, 0x02	; 2
    9e66:	1a 83       	std	Y+2, r17	; 0x02
    9e68:	09 83       	std	Y+1, r16	; 0x01
_ZN5PrintC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.h:46
    9e6a:	1c 86       	std	Y+12, r1	; 0x0c
    9e6c:	1b 86       	std	Y+11, r1	; 0x0b
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Stream.h:63
    9e6e:	88 ee       	ldi	r24, 0xE8	; 232
    9e70:	93 e0       	ldi	r25, 0x03	; 3
    9e72:	a0 e0       	ldi	r26, 0x00	; 0
    9e74:	b0 e0       	ldi	r27, 0x00	; 0
    9e76:	8d 87       	std	Y+13, r24	; 0x0d
    9e78:	9e 87       	std	Y+14, r25	; 0x0e
    9e7a:	af 87       	std	Y+15, r26	; 0x0f
    9e7c:	b8 8b       	std	Y+16, r27	; 0x10
__base_ctor ():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:40
#include "Ethernet2.h"
#include "Udp.h"
#include "Dns.h"

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}
    9e7e:	88 e9       	ldi	r24, 0x98	; 152
    9e80:	92 e0       	ldi	r25, 0x02	; 2
    9e82:	9a 87       	std	Y+10, r25	; 0x0a
    9e84:	89 87       	std	Y+9, r24	; 0x09
    9e86:	88 e0       	ldi	r24, 0x08	; 8
    9e88:	8d 8b       	std	Y+21, r24	; 0x15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:23
    9e8a:	19 8f       	std	Y+25, r17	; 0x19
    9e8c:	08 8f       	std	Y+24, r16	; 0x18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:25
{
    _address.dword = 0;
    9e8e:	1a 8e       	std	Y+26, r1	; 0x1a
    9e90:	1b 8e       	std	Y+27, r1	; 0x1b
    9e92:	1c 8e       	std	Y+28, r1	; 0x1c
    9e94:	1d 8e       	std	Y+29, r1	; 0x1d
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:23
*/

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
    9e96:	1b a7       	std	Y+43, r17	; 0x2b
    9e98:	0a a7       	std	Y+42, r16	; 0x2a
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:25
{
    _address.dword = 0;
    9e9a:	1c a6       	std	Y+44, r1	; 0x2c
    9e9c:	1d a6       	std	Y+45, r1	; 0x2d
    9e9e:	1e a6       	std	Y+46, r1	; 0x2e
    9ea0:	1f a6       	std	Y+47, r1	; 0x2f
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
    9ea2:	80 91 f1 0f 	lds	r24, 0x0FF1	; 0x800ff1 <Ethernet+0x2>
    9ea6:	90 91 f2 0f 	lds	r25, 0x0FF2	; 0x800ff2 <Ethernet+0x3>
    9eaa:	a0 91 f3 0f 	lds	r26, 0x0FF3	; 0x800ff3 <Ethernet+0x4>
    9eae:	b0 91 f4 0f 	lds	r27, 0x0FF4	; 0x800ff4 <Ethernet+0x5>
    9eb2:	8e a3       	std	Y+38, r24	; 0x26
    9eb4:	9f a3       	std	Y+39, r25	; 0x27
    9eb6:	a8 a7       	std	Y+40, r26	; 0x28
    9eb8:	b9 a7       	std	Y+41, r27	; 0x29
_ZN9IPAddressaSERKS_():
    9eba:	8b 83       	std	Y+3, r24	; 0x03
    9ebc:	9c 83       	std	Y+4, r25	; 0x04
    9ebe:	ad 83       	std	Y+5, r26	; 0x05
    9ec0:	be 83       	std	Y+6, r27	; 0x06
begin():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:54
    9ec2:	18 86       	std	Y+8, r1	; 0x08
    9ec4:	1f 82       	std	Y+7, r1	; 0x07
_ZN14EthernetClient7connectEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:30
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;

  dns.begin(Ethernet.dnsServerIP());
  ret = dns.getHostByName(host, remote_addr);
    9ec6:	ae 01       	movw	r20, r28
    9ec8:	46 5d       	subi	r20, 0xD6	; 214
    9eca:	5f 4f       	sbci	r21, 0xFF	; 255
    9ecc:	ce 01       	movw	r24, r28
    9ece:	01 96       	adiw	r24, 0x01	; 1
    9ed0:	0e 94 23 4c 	call	0x9846	; 0x9846 <DNSClient::getHostByName(char const*, IPAddress&)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:31
  if (ret == 1) {
    9ed4:	81 30       	cpi	r24, 0x01	; 1
    9ed6:	91 05       	cpc	r25, r1
    9ed8:	b1 f4       	brne	.+44     	; 0x9f06 <EthernetClient::connect(char const*, unsigned int)+0xc8>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:32
    return connect(remote_addr, port);
    9eda:	d7 01       	movw	r26, r14
    9edc:	ed 91       	ld	r30, X+
    9ede:	fc 91       	ld	r31, X
    9ee0:	06 84       	ldd	r0, Z+14	; 0x0e
    9ee2:	f7 85       	ldd	r31, Z+15	; 0x0f
    9ee4:	e0 2d       	mov	r30, r0
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
    9ee6:	1d a3       	std	Y+37, r17	; 0x25
    9ee8:	0c a3       	std	Y+36, r16	; 0x24
    9eea:	8c a5       	ldd	r24, Y+44	; 0x2c
    9eec:	9d a5       	ldd	r25, Y+45	; 0x2d
    9eee:	ae a5       	ldd	r26, Y+46	; 0x2e
    9ef0:	bf a5       	ldd	r27, Y+47	; 0x2f
    9ef2:	8e a3       	std	Y+38, r24	; 0x26
    9ef4:	9f a3       	std	Y+39, r25	; 0x27
    9ef6:	a8 a7       	std	Y+40, r26	; 0x28
    9ef8:	b9 a7       	std	Y+41, r27	; 0x29
_ZN14EthernetClient7connectEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:32
    9efa:	a6 01       	movw	r20, r12
    9efc:	be 01       	movw	r22, r28
    9efe:	6c 5d       	subi	r22, 0xDC	; 220
    9f00:	7f 4f       	sbci	r23, 0xFF	; 255
    9f02:	c7 01       	movw	r24, r14
    9f04:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:36
  } else {
    return ret;
  }
}
    9f06:	af 96       	adiw	r28, 0x2f	; 47
    9f08:	0f b6       	in	r0, 0x3f	; 63
    9f0a:	f8 94       	cli
    9f0c:	de bf       	out	0x3e, r29	; 62
    9f0e:	0f be       	out	0x3f, r0	; 63
    9f10:	cd bf       	out	0x3d, r28	; 61
    9f12:	df 91       	pop	r29
    9f14:	cf 91       	pop	r28
    9f16:	1f 91       	pop	r17
    9f18:	0f 91       	pop	r16
    9f1a:	ff 90       	pop	r15
    9f1c:	ef 90       	pop	r14
    9f1e:	df 90       	pop	r13
    9f20:	cf 90       	pop	r12
    9f22:	08 95       	ret

00009f24 <display_element_show_date_1(unsigned int, unsigned int)>:
_Z27display_element_show_date_1jj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3349
  my_lcd.Set_Draw_color(BLACK);
  my_lcd.Draw_Rectangle(x, y, x + 244, y + 84);
}
////////////////////////////////////////////////////
void display_element_show_date_1(uint16_t x, uint16_t y)
{
    9f24:	af 92       	push	r10
    9f26:	bf 92       	push	r11
    9f28:	cf 92       	push	r12
    9f2a:	df 92       	push	r13
    9f2c:	ef 92       	push	r14
    9f2e:	ff 92       	push	r15
    9f30:	0f 93       	push	r16
    9f32:	1f 93       	push	r17
    9f34:	cf 93       	push	r28
    9f36:	df 93       	push	r29
    9f38:	cd b7       	in	r28, 0x3d	; 61
    9f3a:	de b7       	in	r29, 0x3e	; 62
    9f3c:	60 97       	sbiw	r28, 0x10	; 16
    9f3e:	0f b6       	in	r0, 0x3f	; 63
    9f40:	f8 94       	cli
    9f42:	de bf       	out	0x3e, r29	; 62
    9f44:	0f be       	out	0x3f, r0	; 63
    9f46:	cd bf       	out	0x3d, r28	; 61
    9f48:	5c 01       	movw	r10, r24
    9f4a:	8b 01       	movw	r16, r22
selftest_get_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2486
     ... 0 - neni oznacen jako chybny
     ... neni 0 - chybny flag
*/
uint8_t selftest_get_0(uint8_t what)
{
  return selftest_data & (1 << what);
    9f4c:	80 91 9d 0c 	lds	r24, 0x0C9D	; 0x800c9d <selftest_data>
    9f50:	9e 01       	movw	r18, r28
    9f52:	2f 5f       	subi	r18, 0xFF	; 255
    9f54:	3f 4f       	sbci	r19, 0xFF	; 255
    9f56:	69 01       	movw	r12, r18
_Z27display_element_show_date_1jj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3351
}
////////////////////////////////////////////////////
void display_element_show_date_1(uint16_t x, uint16_t y)
{
  char str1[16];
  if (selftest_get_0(SELFTEST_ERR_RTC) == 0)
    9f58:	80 fd       	sbrc	r24, 0
    9f5a:	4e c0       	rjmp	.+156    	; 0x9ff8 <display_element_show_date_1(unsigned int, unsigned int)+0xd4>
_ZNK8DateTime4yearEv():
/home/saric/Arduino/libraries/RTClib/RTClib.h:38
    DateTime (uint16_t year, uint8_t month, uint8_t day, 
                uint8_t hour =0, uint8_t min =0, uint8_t sec =0);
    DateTime (const DateTime& copy);
    DateTime (const char* date, const char* time);
    DateTime (const __FlashStringHelper* date, const __FlashStringHelper* time);
    uint16_t year() const       { return 2000 + yOff; }
    9f5c:	80 91 f6 15 	lds	r24, 0x15F6	; 0x8015f6 <now>
    9f60:	90 e0       	ldi	r25, 0x00	; 0
    9f62:	80 53       	subi	r24, 0x30	; 48
    9f64:	98 4f       	sbci	r25, 0xF8	; 248
_Z27display_element_show_date_1jj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3353
  {
    sprintf(str1, "%02d.%02d.%04d", now.day(), now.month(), now.year());
    9f66:	9f 93       	push	r25
    9f68:	8f 93       	push	r24
    9f6a:	80 91 f7 15 	lds	r24, 0x15F7	; 0x8015f7 <now+0x1>
    9f6e:	1f 92       	push	r1
    9f70:	8f 93       	push	r24
    9f72:	80 91 f8 15 	lds	r24, 0x15F8	; 0x8015f8 <now+0x2>
    9f76:	1f 92       	push	r1
    9f78:	8f 93       	push	r24
    9f7a:	81 e4       	ldi	r24, 0x41	; 65
    9f7c:	93 e0       	ldi	r25, 0x03	; 3
    9f7e:	9f 93       	push	r25
    9f80:	8f 93       	push	r24
    9f82:	3f 93       	push	r19
    9f84:	2f 93       	push	r18
    9f86:	0e 94 3b 8d 	call	0x11a76	; 0x11a76 <sprintf>
    9f8a:	0f b6       	in	r0, 0x3f	; 63
    9f8c:	f8 94       	cli
    9f8e:	de bf       	out	0x3e, r29	; 62
    9f90:	0f be       	out	0x3f, r0	; 63
    9f92:	cd bf       	out	0x3d, r28	; 61
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    9f94:	8f ef       	ldi	r24, 0xFF	; 255
    9f96:	9f ef       	ldi	r25, 0xFF	; 255
    9f98:	90 93 c2 11 	sts	0x11C2, r25	; 0x8011c2 <my_lcd+0xb>
    9f9c:	80 93 c1 11 	sts	0x11C1, r24	; 0x8011c1 <my_lcd+0xa>
_Z27display_element_show_date_1jj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3360
  else
  {
    strcpy(str1, "--.--.----");
  }
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Draw_Fast_HLine(x, y, 142);
    9fa0:	4e e8       	ldi	r20, 0x8E	; 142
    9fa2:	50 e0       	ldi	r21, 0x00	; 0
    9fa4:	b8 01       	movw	r22, r16
    9fa6:	c5 01       	movw	r24, r10
    9fa8:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.174]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3361
  my_lcd.Draw_Fast_HLine(x, y + 1, 142);
    9fac:	b8 01       	movw	r22, r16
    9fae:	6f 5f       	subi	r22, 0xFF	; 255
    9fb0:	7f 4f       	sbci	r23, 0xFF	; 255
    9fb2:	4e e8       	ldi	r20, 0x8E	; 142
    9fb4:	50 e0       	ldi	r21, 0x00	; 0
    9fb6:	c5 01       	movw	r24, r10
    9fb8:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.174]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3362
  show_string(str1, x, y + 2, 3, BLACK, WHITE, 0);
    9fbc:	a8 01       	movw	r20, r16
    9fbe:	4e 5f       	subi	r20, 0xFE	; 254
    9fc0:	5f 4f       	sbci	r21, 0xFF	; 255
    9fc2:	ee 24       	eor	r14, r14
    9fc4:	ea 94       	dec	r14
    9fc6:	fe 2c       	mov	r15, r14
    9fc8:	10 e0       	ldi	r17, 0x00	; 0
    9fca:	00 e0       	ldi	r16, 0x00	; 0
    9fcc:	23 e0       	ldi	r18, 0x03	; 3
    9fce:	b5 01       	movw	r22, r10
    9fd0:	c6 01       	movw	r24, r12
    9fd2:	0e 94 c0 30 	call	0x6180	; 0x6180 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.158]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3363
}
    9fd6:	60 96       	adiw	r28, 0x10	; 16
    9fd8:	0f b6       	in	r0, 0x3f	; 63
    9fda:	f8 94       	cli
    9fdc:	de bf       	out	0x3e, r29	; 62
    9fde:	0f be       	out	0x3f, r0	; 63
    9fe0:	cd bf       	out	0x3d, r28	; 61
    9fe2:	df 91       	pop	r29
    9fe4:	cf 91       	pop	r28
    9fe6:	1f 91       	pop	r17
    9fe8:	0f 91       	pop	r16
    9fea:	ff 90       	pop	r15
    9fec:	ef 90       	pop	r14
    9fee:	df 90       	pop	r13
    9ff0:	cf 90       	pop	r12
    9ff2:	bf 90       	pop	r11
    9ff4:	af 90       	pop	r10
    9ff6:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3357
  {
    sprintf(str1, "%02d.%02d.%04d", now.day(), now.month(), now.year());
  }
  else
  {
    strcpy(str1, "--.--.----");
    9ff8:	60 e5       	ldi	r22, 0x50	; 80
    9ffa:	73 e0       	ldi	r23, 0x03	; 3
    9ffc:	c9 01       	movw	r24, r18
    9ffe:	0e 94 c8 8c 	call	0x11990	; 0x11990 <strcpy>
    a002:	c8 cf       	rjmp	.-112    	; 0x9f94 <display_element_show_date_1(unsigned int, unsigned int)+0x70>

0000a004 <display_element_show_time_1(unsigned int, unsigned int)>:
_Z27display_element_show_time_1jj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3283
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// funkce pro zobrazeni casu
void display_element_show_time_1(uint16_t x, uint16_t y)
{
    a004:	8f 92       	push	r8
    a006:	9f 92       	push	r9
    a008:	af 92       	push	r10
    a00a:	bf 92       	push	r11
    a00c:	cf 92       	push	r12
    a00e:	df 92       	push	r13
    a010:	ef 92       	push	r14
    a012:	ff 92       	push	r15
    a014:	0f 93       	push	r16
    a016:	1f 93       	push	r17
    a018:	cf 93       	push	r28
    a01a:	df 93       	push	r29
    a01c:	cd b7       	in	r28, 0x3d	; 61
    a01e:	de b7       	in	r29, 0x3e	; 62
    a020:	68 97       	sbiw	r28, 0x18	; 24
    a022:	0f b6       	in	r0, 0x3f	; 63
    a024:	f8 94       	cli
    a026:	de bf       	out	0x3e, r29	; 62
    a028:	0f be       	out	0x3f, r0	; 63
    a02a:	cd bf       	out	0x3d, r28	; 61
    a02c:	5c 01       	movw	r10, r24
    a02e:	4b 01       	movw	r8, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3286
  char str1[24];
  uint16_t pos = 0;
  strcpy_P(str1, current_time);
    a030:	64 e4       	ldi	r22, 0x44	; 68
    a032:	76 e1       	ldi	r23, 0x16	; 22
    a034:	ce 01       	movw	r24, r28
    a036:	01 96       	adiw	r24, 0x01	; 1
    a038:	6c 01       	movw	r12, r24
    a03a:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3288
  pos = (244 - show_string_size_width(16, 1)) / 2;
  show_string(str1, x + pos + 5, y + 5, 1, BLACK, WHITE, 0);
    a03e:	a4 01       	movw	r20, r8
    a040:	4b 5f       	subi	r20, 0xFB	; 251
    a042:	5f 4f       	sbci	r21, 0xFF	; 255
    a044:	b5 01       	movw	r22, r10
    a046:	61 5b       	subi	r22, 0xB1	; 177
    a048:	7f 4f       	sbci	r23, 0xFF	; 255
    a04a:	ee 24       	eor	r14, r14
    a04c:	ea 94       	dec	r14
    a04e:	fe 2c       	mov	r15, r14
    a050:	10 e0       	ldi	r17, 0x00	; 0
    a052:	00 e0       	ldi	r16, 0x00	; 0
    a054:	21 e0       	ldi	r18, 0x01	; 1
    a056:	c6 01       	movw	r24, r12
    a058:	0e 94 c0 30 	call	0x6180	; 0x6180 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.158]>
selftest_get_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2486
     ... 0 - neni oznacen jako chybny
     ... neni 0 - chybny flag
*/
uint8_t selftest_get_0(uint8_t what)
{
  return selftest_data & (1 << what);
    a05c:	80 91 9d 0c 	lds	r24, 0x0C9D	; 0x800c9d <selftest_data>
_Z27display_element_show_time_1jj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3289
  char str1[24];
  uint16_t pos = 0;
  strcpy_P(str1, current_time);
  pos = (244 - show_string_size_width(16, 1)) / 2;
  show_string(str1, x + pos + 5, y + 5, 1, BLACK, WHITE, 0);
  if (selftest_get_0(SELFTEST_ERR_RTC) == 0)
    a060:	80 fd       	sbrc	r24, 0
    a062:	50 c0       	rjmp	.+160    	; 0xa104 <display_element_show_time_1(unsigned int, unsigned int)+0x100>
    a064:	90 91 fa 15 	lds	r25, 0x15FA	; 0x8015fa <now+0x4>
    a068:	80 91 f9 15 	lds	r24, 0x15F9	; 0x8015f9 <now+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3291
  {
    if (uptime % 2 )
    a06c:	20 91 b3 0c 	lds	r18, 0x0CB3	; 0x800cb3 <uptime>
    a070:	20 ff       	sbrs	r18, 0
    a072:	41 c0       	rjmp	.+130    	; 0xa0f6 <display_element_show_time_1(unsigned int, unsigned int)+0xf2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3292
      sprintf(str1, "%02d:%02d", now.hour(), now.minute());
    a074:	1f 92       	push	r1
    a076:	9f 93       	push	r25
    a078:	1f 92       	push	r1
    a07a:	8f 93       	push	r24
    a07c:	8b e5       	ldi	r24, 0x5B	; 91
    a07e:	93 e0       	ldi	r25, 0x03	; 3
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3294
    else
      sprintf(str1, "%02d %02d", now.hour(), now.minute());
    a080:	9f 93       	push	r25
    a082:	8f 93       	push	r24
    a084:	df 92       	push	r13
    a086:	cf 92       	push	r12
    a088:	0e 94 3b 8d 	call	0x11a76	; 0x11a76 <sprintf>
    a08c:	0f b6       	in	r0, 0x3f	; 63
    a08e:	f8 94       	cli
    a090:	de bf       	out	0x3e, r29	; 62
    a092:	0f be       	out	0x3f, r0	; 63
    a094:	cd bf       	out	0x3d, r28	; 61
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    a096:	10 92 c2 11 	sts	0x11C2, r1	; 0x8011c2 <my_lcd+0xb>
    a09a:	10 92 c1 11 	sts	0x11C1, r1	; 0x8011c1 <my_lcd+0xa>
_Z27display_element_show_time_1jj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3301
  else
  {
    strcpy(str1, "--:--");
  }
  my_lcd.Set_Draw_color(BLACK);
  show_string(str1, x + 4, y + 20, 8, BLACK, WHITE, 0);
    a09e:	a4 01       	movw	r20, r8
    a0a0:	4c 5e       	subi	r20, 0xEC	; 236
    a0a2:	5f 4f       	sbci	r21, 0xFF	; 255
    a0a4:	b5 01       	movw	r22, r10
    a0a6:	6c 5f       	subi	r22, 0xFC	; 252
    a0a8:	7f 4f       	sbci	r23, 0xFF	; 255
    a0aa:	ee 24       	eor	r14, r14
    a0ac:	ea 94       	dec	r14
    a0ae:	fe 2c       	mov	r15, r14
    a0b0:	10 e0       	ldi	r17, 0x00	; 0
    a0b2:	00 e0       	ldi	r16, 0x00	; 0
    a0b4:	28 e0       	ldi	r18, 0x08	; 8
    a0b6:	c6 01       	movw	r24, r12
    a0b8:	0e 94 c0 30 	call	0x6180	; 0x6180 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.158]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3302
  my_lcd.Draw_Rectangle(x, y, x + 244, y + 84);
    a0bc:	94 01       	movw	r18, r8
    a0be:	2c 5a       	subi	r18, 0xAC	; 172
    a0c0:	3f 4f       	sbci	r19, 0xFF	; 255
    a0c2:	a5 01       	movw	r20, r10
    a0c4:	4c 50       	subi	r20, 0x0C	; 12
    a0c6:	5f 4f       	sbci	r21, 0xFF	; 255
    a0c8:	b4 01       	movw	r22, r8
    a0ca:	c5 01       	movw	r24, r10
    a0cc:	0e 94 82 20 	call	0x4104	; 0x4104 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.172]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3303
}
    a0d0:	68 96       	adiw	r28, 0x18	; 24
    a0d2:	0f b6       	in	r0, 0x3f	; 63
    a0d4:	f8 94       	cli
    a0d6:	de bf       	out	0x3e, r29	; 62
    a0d8:	0f be       	out	0x3f, r0	; 63
    a0da:	cd bf       	out	0x3d, r28	; 61
    a0dc:	df 91       	pop	r29
    a0de:	cf 91       	pop	r28
    a0e0:	1f 91       	pop	r17
    a0e2:	0f 91       	pop	r16
    a0e4:	ff 90       	pop	r15
    a0e6:	ef 90       	pop	r14
    a0e8:	df 90       	pop	r13
    a0ea:	cf 90       	pop	r12
    a0ec:	bf 90       	pop	r11
    a0ee:	af 90       	pop	r10
    a0f0:	9f 90       	pop	r9
    a0f2:	8f 90       	pop	r8
    a0f4:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3294
  if (selftest_get_0(SELFTEST_ERR_RTC) == 0)
  {
    if (uptime % 2 )
      sprintf(str1, "%02d:%02d", now.hour(), now.minute());
    else
      sprintf(str1, "%02d %02d", now.hour(), now.minute());
    a0f6:	1f 92       	push	r1
    a0f8:	9f 93       	push	r25
    a0fa:	1f 92       	push	r1
    a0fc:	8f 93       	push	r24
    a0fe:	85 e6       	ldi	r24, 0x65	; 101
    a100:	93 e0       	ldi	r25, 0x03	; 3
    a102:	be cf       	rjmp	.-132    	; 0xa080 <display_element_show_time_1(unsigned int, unsigned int)+0x7c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3298
  }
  else
  {
    strcpy(str1, "--:--");
    a104:	6f e6       	ldi	r22, 0x6F	; 111
    a106:	73 e0       	ldi	r23, 0x03	; 3
    a108:	c6 01       	movw	r24, r12
    a10a:	0e 94 c8 8c 	call	0x11990	; 0x11990 <strcpy>
    a10e:	c3 cf       	rjmp	.-122    	; 0xa096 <display_element_show_time_1(unsigned int, unsigned int)+0x92>

0000a110 <one_wire_associate_text_button(unsigned char, char*, char*)>:
_Z30one_wire_associate_text_buttonhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:193
{
  strcpy(text, "Zapnuto 06:45");
}

void one_wire_associate_text_button(uint8_t idx, char *line1, char *line2)
{
    a110:	af 92       	push	r10
    a112:	bf 92       	push	r11
    a114:	cf 92       	push	r12
    a116:	df 92       	push	r13
    a118:	ef 92       	push	r14
    a11a:	ff 92       	push	r15
    a11c:	0f 93       	push	r16
    a11e:	1f 93       	push	r17
    a120:	cf 93       	push	r28
    a122:	df 93       	push	r29
    a124:	cd b7       	in	r28, 0x3d	; 61
    a126:	de b7       	in	r29, 0x3e	; 62
    a128:	6a 97       	sbiw	r28, 0x1a	; 26
    a12a:	0f b6       	in	r0, 0x3f	; 63
    a12c:	f8 94       	cli
    a12e:	de bf       	out	0x3e, r29	; 62
    a130:	0f be       	out	0x3f, r0	; 63
    a132:	cd bf       	out	0x3d, r28	; 61
    a134:	18 2f       	mov	r17, r24
    a136:	b6 2e       	mov	r11, r22
    a138:	a7 2e       	mov	r10, r23
    a13a:	7a 01       	movw	r14, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:195
  char str2[26];
  createString(str2, ':', w_rom[idx].rom, 8, 16);
    a13c:	8b e0       	ldi	r24, 0x0B	; 11
    a13e:	18 9f       	mul	r17, r24
    a140:	a0 01       	movw	r20, r0
    a142:	11 24       	eor	r1, r1
    a144:	45 58       	subi	r20, 0x85	; 133
    a146:	54 4f       	sbci	r21, 0xF4	; 244
    a148:	00 e1       	ldi	r16, 0x10	; 16
    a14a:	28 e0       	ldi	r18, 0x08	; 8
    a14c:	6a e3       	ldi	r22, 0x3A	; 58
    a14e:	ce 01       	movw	r24, r28
    a150:	01 96       	adiw	r24, 0x01	; 1
    a152:	6c 01       	movw	r12, r24
    a154:	0e 94 6c 4b 	call	0x96d8	; 0x96d8 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:196
  sprintf(line1, "%d: %s", idx, str2);
    a158:	df 92       	push	r13
    a15a:	cf 92       	push	r12
    a15c:	1f 92       	push	r1
    a15e:	1f 93       	push	r17
    a160:	85 e7       	ldi	r24, 0x75	; 117
    a162:	93 e0       	ldi	r25, 0x03	; 3
    a164:	9f 93       	push	r25
    a166:	8f 93       	push	r24
    a168:	af 92       	push	r10
    a16a:	bf 92       	push	r11
    a16c:	0e 94 3b 8d 	call	0x11a76	; 0x11a76 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:197
  strcpy(line2, "Nastaveni TDS");
    a170:	0f b6       	in	r0, 0x3f	; 63
    a172:	f8 94       	cli
    a174:	de bf       	out	0x3e, r29	; 62
    a176:	0f be       	out	0x3f, r0	; 63
    a178:	cd bf       	out	0x3d, r28	; 61
    a17a:	6c e7       	ldi	r22, 0x7C	; 124
    a17c:	73 e0       	ldi	r23, 0x03	; 3
    a17e:	c7 01       	movw	r24, r14
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:198
}
    a180:	6a 96       	adiw	r28, 0x1a	; 26
    a182:	0f b6       	in	r0, 0x3f	; 63
    a184:	f8 94       	cli
    a186:	de bf       	out	0x3e, r29	; 62
    a188:	0f be       	out	0x3f, r0	; 63
    a18a:	cd bf       	out	0x3d, r28	; 61
    a18c:	df 91       	pop	r29
    a18e:	cf 91       	pop	r28
    a190:	1f 91       	pop	r17
    a192:	0f 91       	pop	r16
    a194:	ff 90       	pop	r15
    a196:	ef 90       	pop	r14
    a198:	df 90       	pop	r13
    a19a:	cf 90       	pop	r12
    a19c:	bf 90       	pop	r11
    a19e:	af 90       	pop	r10
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:197
void one_wire_associate_text_button(uint8_t idx, char *line1, char *line2)
{
  char str2[26];
  createString(str2, ':', w_rom[idx].rom, 8, 16);
  sprintf(line1, "%d: %s", idx, str2);
  strcpy(line2, "Nastaveni TDS");
    a1a0:	0c 94 c8 8c 	jmp	0x11990	; 0x11990 <strcpy>

0000a1a4 <display_element_show_temp_1(unsigned int, unsigned int)>:
_Z27display_element_show_temp_1jj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3307
  my_lcd.Draw_Rectangle(x, y, x + 244, y + 84);
}

/// funkce pro zobrazeni teploty
void display_element_show_temp_1(uint16_t x, uint16_t y)
{
    a1a4:	4f 92       	push	r4
    a1a6:	5f 92       	push	r5
    a1a8:	6f 92       	push	r6
    a1aa:	7f 92       	push	r7
    a1ac:	8f 92       	push	r8
    a1ae:	9f 92       	push	r9
    a1b0:	af 92       	push	r10
    a1b2:	bf 92       	push	r11
    a1b4:	cf 92       	push	r12
    a1b6:	df 92       	push	r13
    a1b8:	ef 92       	push	r14
    a1ba:	ff 92       	push	r15
    a1bc:	0f 93       	push	r16
    a1be:	1f 93       	push	r17
    a1c0:	cf 93       	push	r28
    a1c2:	df 93       	push	r29
    a1c4:	cd b7       	in	r28, 0x3d	; 61
    a1c6:	de b7       	in	r29, 0x3e	; 62
    a1c8:	e2 97       	sbiw	r28, 0x32	; 50
    a1ca:	0f b6       	in	r0, 0x3f	; 63
    a1cc:	f8 94       	cli
    a1ce:	de bf       	out	0x3e, r29	; 62
    a1d0:	0f be       	out	0x3f, r0	; 63
    a1d2:	cd bf       	out	0x3d, r28	; 61
    a1d4:	6c 01       	movw	r12, r24
    a1d6:	5b 01       	movw	r10, r22
thermostat_ring_get_asociate_tds():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:166


/// ziska/nastavi cislo tds k ringu termostatu
uint8_t thermostat_ring_get_asociate_tds(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
    a1d8:	80 91 ca 0b 	lds	r24, 0x0BCA	; 0x800bca <default_ring>
    a1dc:	21 e2       	ldi	r18, 0x21	; 33
    a1de:	82 9f       	mul	r24, r18
    a1e0:	c0 01       	movw	r24, r0
    a1e2:	11 24       	eor	r1, r1
    a1e4:	84 5a       	subi	r24, 0xA4	; 164
    a1e6:	9e 4f       	sbci	r25, 0xFE	; 254
    a1e8:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224]>
    a1ec:	58 2e       	mov	r5, r24
_Z27display_element_show_temp_1jj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3316
  char str2[8];
  int  tt, te, td, tu = 0;
  uint16_t pos;

  idx = thermostat_ring_get_asociate_tds(default_ring);
  strcpy_P(str1, current_temp);
    a1ee:	61 e5       	ldi	r22, 0x51	; 81
    a1f0:	76 e1       	ldi	r23, 0x16	; 22
    a1f2:	ce 01       	movw	r24, r28
    a1f4:	47 96       	adiw	r24, 0x17	; 23
    a1f6:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3317
  if (get_tds18s20(idx, &tds) == 1)
    a1fa:	be 01       	movw	r22, r28
    a1fc:	6f 5f       	subi	r22, 0xFF	; 255
    a1fe:	7f 4f       	sbci	r23, 0xFF	; 255
    a200:	85 2d       	mov	r24, r5
    a202:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3319
  {
    strcat(str1, tds.name);
    a206:	be 01       	movw	r22, r28
    a208:	63 5f       	subi	r22, 0xF3	; 243
    a20a:	7f 4f       	sbci	r23, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3317
  int  tt, te, td, tu = 0;
  uint16_t pos;

  idx = thermostat_ring_get_asociate_tds(default_ring);
  strcpy_P(str1, current_temp);
  if (get_tds18s20(idx, &tds) == 1)
    a20c:	81 30       	cpi	r24, 0x01	; 1
    a20e:	11 f0       	breq	.+4      	; 0xa214 <display_element_show_temp_1(unsigned int, unsigned int)+0x70>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3323
  {
    strcat(str1, tds.name);
  }
  else
  {
    strcat(str1, "err");
    a210:	6a e8       	ldi	r22, 0x8A	; 138
    a212:	73 e0       	ldi	r23, 0x03	; 3
    a214:	ce 01       	movw	r24, r28
    a216:	47 96       	adiw	r24, 0x17	; 23
    a218:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3325
  }
  show_string(str1, x + pos + 5, y + 5, 1, BLACK, WHITE, 0);
    a21c:	ee 24       	eor	r14, r14
    a21e:	ea 94       	dec	r14
    a220:	fe 2c       	mov	r15, r14
    a222:	10 e0       	ldi	r17, 0x00	; 0
    a224:	00 e0       	ldi	r16, 0x00	; 0
    a226:	21 e0       	ldi	r18, 0x01	; 1
    a228:	a5 01       	movw	r20, r10
    a22a:	4b 5f       	subi	r20, 0xFB	; 251
    a22c:	5f 4f       	sbci	r21, 0xFF	; 255
    a22e:	b6 01       	movw	r22, r12
    a230:	6b 5f       	subi	r22, 0xFB	; 251
    a232:	7f 4f       	sbci	r23, 0xFF	; 255
    a234:	ce 01       	movw	r24, r28
    a236:	47 96       	adiw	r24, 0x17	; 23
    a238:	0e 94 c0 30 	call	0x6180	; 0x6180 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.158]>
    a23c:	35 01       	movw	r6, r10
    a23e:	84 e1       	ldi	r24, 0x14	; 20
    a240:	68 0e       	add	r6, r24
    a242:	71 1c       	adc	r7, r1
    a244:	46 01       	movw	r8, r12
    a246:	24 e0       	ldi	r18, 0x04	; 4
    a248:	82 0e       	add	r8, r18
    a24a:	91 1c       	adc	r9, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3326
  if (status_tds18s20[idx].online == True)
    a24c:	8e e1       	ldi	r24, 0x1E	; 30
    a24e:	58 9e       	mul	r5, r24
    a250:	f0 01       	movw	r30, r0
    a252:	11 24       	eor	r1, r1
    a254:	e7 51       	subi	r30, 0x17	; 23
    a256:	f4 4f       	sbci	r31, 0xF4	; 244
    a258:	83 8d       	ldd	r24, Z+27	; 0x1b
    a25a:	81 30       	cpi	r24, 0x01	; 1
    a25c:	09 f0       	breq	.+2      	; 0xa260 <display_element_show_temp_1(unsigned int, unsigned int)+0xbc>
    a25e:	57 c0       	rjmp	.+174    	; 0xa30e <display_element_show_temp_1(unsigned int, unsigned int)+0x16a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3328
  {
    tt = status_tds18s20[idx].temp;
    a260:	85 81       	ldd	r24, Z+5	; 0x05
    a262:	96 81       	ldd	r25, Z+6	; 0x06
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3329
    te = (tt / 1000);
    a264:	68 ee       	ldi	r22, 0xE8	; 232
    a266:	73 e0       	ldi	r23, 0x03	; 3
    a268:	0e 94 1d 8a 	call	0x1143a	; 0x1143a <__divmodhi4>
    a26c:	9b 01       	movw	r18, r22
    a26e:	2c 01       	movw	r4, r24
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    a270:	4a e0       	ldi	r20, 0x0A	; 10
    a272:	be 01       	movw	r22, r28
    a274:	69 5e       	subi	r22, 0xE9	; 233
    a276:	7f 4f       	sbci	r23, 0xFF	; 255
    a278:	c9 01       	movw	r24, r18
    a27a:	0e 94 7f 80 	call	0x100fe	; 0x100fe <__itoa_ncheck>
_Z27display_element_show_temp_1jj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3333
    tu = te * 1000;
    td = (tt - tu);
    itoa(te, str1, 10);
    strcat(str1, ".");
    a27e:	63 e4       	ldi	r22, 0x43	; 67
    a280:	77 e0       	ldi	r23, 0x07	; 7
    a282:	ce 01       	movw	r24, r28
    a284:	47 96       	adiw	r24, 0x17	; 23
    a286:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    a28a:	4a e0       	ldi	r20, 0x0A	; 10
    a28c:	be 01       	movw	r22, r28
    a28e:	65 5d       	subi	r22, 0xD5	; 213
    a290:	7f 4f       	sbci	r23, 0xFF	; 255
    a292:	c2 01       	movw	r24, r4
    a294:	0e 94 7f 80 	call	0x100fe	; 0x100fe <__itoa_ncheck>
_Z27display_element_show_temp_1jj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3335
    itoa(td, str2, 10);
    strncat(str1, str2, 1);
    a298:	41 e0       	ldi	r20, 0x01	; 1
    a29a:	50 e0       	ldi	r21, 0x00	; 0
    a29c:	be 01       	movw	r22, r28
    a29e:	65 5d       	subi	r22, 0xD5	; 213
    a2a0:	7f 4f       	sbci	r23, 0xFF	; 255
    a2a2:	ce 01       	movw	r24, r28
    a2a4:	47 96       	adiw	r24, 0x17	; 23
    a2a6:	0e 94 cf 8c 	call	0x1199e	; 0x1199e <strncat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3336
    strcat(str1, "C");
    a2aa:	68 e2       	ldi	r22, 0x28	; 40
    a2ac:	77 e0       	ldi	r23, 0x07	; 7
    a2ae:	ce 01       	movw	r24, r28
    a2b0:	47 96       	adiw	r24, 0x17	; 23
    a2b2:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3342
    show_string(str1, x + 4, y + 20, 8, BLACK, WHITE, 0);
  }
  else
  {
    strcpy(str1, "ERR");
    show_string(str1, x + 4, y + 20, 8, RED, WHITE, 0);
    a2b6:	28 e0       	ldi	r18, 0x08	; 8
    a2b8:	a3 01       	movw	r20, r6
    a2ba:	b4 01       	movw	r22, r8
    a2bc:	ce 01       	movw	r24, r28
    a2be:	47 96       	adiw	r24, 0x17	; 23
    a2c0:	0e 94 c0 30 	call	0x6180	; 0x6180 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.158]>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    a2c4:	10 92 c2 11 	sts	0x11C2, r1	; 0x8011c2 <my_lcd+0xb>
    a2c8:	10 92 c1 11 	sts	0x11C1, r1	; 0x8011c1 <my_lcd+0xa>
_Z27display_element_show_temp_1jj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3345
  }
  my_lcd.Set_Draw_color(BLACK);
  my_lcd.Draw_Rectangle(x, y, x + 244, y + 84);
    a2cc:	95 01       	movw	r18, r10
    a2ce:	2c 5a       	subi	r18, 0xAC	; 172
    a2d0:	3f 4f       	sbci	r19, 0xFF	; 255
    a2d2:	a6 01       	movw	r20, r12
    a2d4:	4c 50       	subi	r20, 0x0C	; 12
    a2d6:	5f 4f       	sbci	r21, 0xFF	; 255
    a2d8:	b5 01       	movw	r22, r10
    a2da:	c6 01       	movw	r24, r12
    a2dc:	0e 94 82 20 	call	0x4104	; 0x4104 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.172]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3346
}
    a2e0:	e2 96       	adiw	r28, 0x32	; 50
    a2e2:	0f b6       	in	r0, 0x3f	; 63
    a2e4:	f8 94       	cli
    a2e6:	de bf       	out	0x3e, r29	; 62
    a2e8:	0f be       	out	0x3f, r0	; 63
    a2ea:	cd bf       	out	0x3d, r28	; 61
    a2ec:	df 91       	pop	r29
    a2ee:	cf 91       	pop	r28
    a2f0:	1f 91       	pop	r17
    a2f2:	0f 91       	pop	r16
    a2f4:	ff 90       	pop	r15
    a2f6:	ef 90       	pop	r14
    a2f8:	df 90       	pop	r13
    a2fa:	cf 90       	pop	r12
    a2fc:	bf 90       	pop	r11
    a2fe:	af 90       	pop	r10
    a300:	9f 90       	pop	r9
    a302:	8f 90       	pop	r8
    a304:	7f 90       	pop	r7
    a306:	6f 90       	pop	r6
    a308:	5f 90       	pop	r5
    a30a:	4f 90       	pop	r4
    a30c:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3341
    strcat(str1, "C");
    show_string(str1, x + 4, y + 20, 8, BLACK, WHITE, 0);
  }
  else
  {
    strcpy(str1, "ERR");
    a30e:	66 e4       	ldi	r22, 0x46	; 70
    a310:	77 e0       	ldi	r23, 0x07	; 7
    a312:	ce 01       	movw	r24, r28
    a314:	47 96       	adiw	r24, 0x17	; 23
    a316:	0e 94 c8 8c 	call	0x11990	; 0x11990 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3342
    show_string(str1, x + 4, y + 20, 8, RED, WHITE, 0);
    a31a:	ee 24       	eor	r14, r14
    a31c:	ea 94       	dec	r14
    a31e:	fe 2c       	mov	r15, r14
    a320:	00 e0       	ldi	r16, 0x00	; 0
    a322:	18 ef       	ldi	r17, 0xF8	; 248
    a324:	c8 cf       	rjmp	.-112    	; 0xa2b6 <display_element_show_temp_1(unsigned int, unsigned int)+0x112>

0000a326 <mqtt_callback(char*, unsigned char*, unsigned int)>:
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1426
   topic - ukazatel na nazev topicu
   payload - ukazatel na pole prichozich dat
   length - pocet prichozich dat
*/
void mqtt_callback(char* topic, byte* payload, unsigned int length)
{
    a326:	2f 92       	push	r2
    a328:	3f 92       	push	r3
    a32a:	4f 92       	push	r4
    a32c:	5f 92       	push	r5
    a32e:	6f 92       	push	r6
    a330:	7f 92       	push	r7
    a332:	8f 92       	push	r8
    a334:	9f 92       	push	r9
    a336:	af 92       	push	r10
    a338:	bf 92       	push	r11
    a33a:	cf 92       	push	r12
    a33c:	df 92       	push	r13
    a33e:	ef 92       	push	r14
    a340:	ff 92       	push	r15
    a342:	0f 93       	push	r16
    a344:	1f 93       	push	r17
    a346:	cf 93       	push	r28
    a348:	df 93       	push	r29
    a34a:	cd b7       	in	r28, 0x3d	; 61
    a34c:	de b7       	in	r29, 0x3e	; 62
    a34e:	c7 51       	subi	r28, 0x17	; 23
    a350:	d1 40       	sbci	r29, 0x01	; 1
    a352:	0f b6       	in	r0, 0x3f	; 63
    a354:	f8 94       	cli
    a356:	de bf       	out	0x3e, r29	; 62
    a358:	0f be       	out	0x3f, r0	; 63
    a35a:	cd bf       	out	0x3d, r28	; 61
    a35c:	4c 01       	movw	r8, r24
__base_ctor ():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:25
 */

#include "NTPClient.h"
#include "time.h"

NTPClient::NTPClient(UDP& udp) {
    a35e:	1b 82       	std	Y+3, r1	; 0x03
    a360:	8e e8       	ldi	r24, 0x8E	; 142
    a362:	93 e0       	ldi	r25, 0x03	; 3
    a364:	9d 83       	std	Y+5, r25	; 0x05
    a366:	8c 83       	std	Y+4, r24	; 0x04
    a368:	89 e3       	ldi	r24, 0x39	; 57
    a36a:	95 e0       	ldi	r25, 0x05	; 5
    a36c:	9f 83       	std	Y+7, r25	; 0x07
    a36e:	8e 83       	std	Y+6, r24	; 0x06
    a370:	18 86       	std	Y+8, r1	; 0x08
    a372:	19 86       	std	Y+9, r1	; 0x09
    a374:	1a 86       	std	Y+10, r1	; 0x0a
    a376:	1b 86       	std	Y+11, r1	; 0x0b
    a378:	80 e6       	ldi	r24, 0x60	; 96
    a37a:	9a ee       	ldi	r25, 0xEA	; 234
    a37c:	a0 e0       	ldi	r26, 0x00	; 0
    a37e:	b0 e0       	ldi	r27, 0x00	; 0
    a380:	8c 87       	std	Y+12, r24	; 0x0c
    a382:	9d 87       	std	Y+13, r25	; 0x0d
    a384:	ae 87       	std	Y+14, r26	; 0x0e
    a386:	bf 87       	std	Y+15, r27	; 0x0f
    a388:	18 8a       	std	Y+16, r1	; 0x10
    a38a:	19 8a       	std	Y+17, r1	; 0x11
    a38c:	1a 8a       	std	Y+18, r1	; 0x12
    a38e:	1b 8a       	std	Y+19, r1	; 0x13
    a390:	1c 8a       	std	Y+20, r1	; 0x14
    a392:	1d 8a       	std	Y+21, r1	; 0x15
    a394:	1e 8a       	std	Y+22, r1	; 0x16
    a396:	1f 8a       	std	Y+23, r1	; 0x17
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:26
  this->_udp            = &udp;
    a398:	8e ec       	ldi	r24, 0xCE	; 206
    a39a:	95 e1       	ldi	r25, 0x15	; 21
    a39c:	9a 83       	std	Y+2, r25	; 0x02
    a39e:	89 83       	std	Y+1, r24	; 0x01
    a3a0:	ea e4       	ldi	r30, 0x4A	; 74
    a3a2:	fe e0       	ldi	r31, 0x0E	; 14
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1440
  struct_DDS18s20 tds;
  char *pch;
  uint8_t active;
  NTPClient timeClient(udpClient);

  for (uint8_t j = 0; j < 128; j++) my_payload[j] = 0;
    a3a4:	80 e0       	ldi	r24, 0x00	; 0
    a3a6:	11 92       	st	Z+, r1
    a3a8:	8f 5f       	subi	r24, 0xFF	; 255
    a3aa:	80 38       	cpi	r24, 0x80	; 128
    a3ac:	e1 f7       	brne	.-8      	; 0xa3a6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x80>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1442
  ////
  mqtt_receive_message++; /// inkrementuji promenou celkovy pocet prijatych zprav
    a3ae:	80 91 c0 0b 	lds	r24, 0x0BC0	; 0x800bc0 <mqtt_receive_message>
    a3b2:	90 91 c1 0b 	lds	r25, 0x0BC1	; 0x800bc1 <mqtt_receive_message+0x1>
    a3b6:	01 96       	adiw	r24, 0x01	; 1
    a3b8:	90 93 c1 0b 	sts	0x0BC1, r25	; 0x800bc1 <mqtt_receive_message+0x1>
    a3bc:	80 93 c0 0b 	sts	0x0BC0, r24	; 0x800bc0 <mqtt_receive_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1443
  strncpy(my_payload, (char*) payload, length);
    a3c0:	8a e4       	ldi	r24, 0x4A	; 74
    a3c2:	9e e0       	ldi	r25, 0x0E	; 14
    a3c4:	0e 94 ed 8c 	call	0x119da	; 0x119da <strncpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1446
  ///
  /// kamarad discovery
  strcpy_P(str1, termbig_subscribe);
    a3c8:	5e 01       	movw	r10, r28
    a3ca:	28 ec       	ldi	r18, 0xC8	; 200
    a3cc:	a2 0e       	add	r10, r18
    a3ce:	b1 1c       	adc	r11, r1
    a3d0:	6e e6       	ldi	r22, 0x6E	; 110
    a3d2:	74 e1       	ldi	r23, 0x14	; 20
    a3d4:	c5 01       	movw	r24, r10
    a3d6:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1447
  if (strcmp(str1, topic) == 0)
    a3da:	b4 01       	movw	r22, r8
    a3dc:	c5 01       	movw	r24, r10
    a3de:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
    a3e2:	89 2b       	or	r24, r25
    a3e4:	61 f4       	brne	.+24     	; 0xa3fe <mqtt_callback(char*, unsigned char*, unsigned int)+0xd8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1449
  {
    mqtt_process_message++; /// inkrementuji promenou celkovy pocet zpracovanych zprav
    a3e6:	80 91 be 0b 	lds	r24, 0x0BBE	; 0x800bbe <mqtt_process_message>
    a3ea:	90 91 bf 0b 	lds	r25, 0x0BBF	; 0x800bbf <mqtt_process_message+0x1>
    a3ee:	01 96       	adiw	r24, 0x01	; 1
    a3f0:	90 93 bf 0b 	sts	0x0BBF, r25	; 0x800bbf <mqtt_process_message+0x1>
    a3f4:	80 93 be 0b 	sts	0x0BBE, r24	; 0x800bbe <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1450
    know_mqtt_create_or_update(my_payload, TYPE_TERMBIG);
    a3f8:	82 e0       	ldi	r24, 0x02	; 2
    a3fa:	0e 94 e3 3e 	call	0x7dc6	; 0x7dc6 <know_mqtt_create_or_update(char*, unsigned char) [clone .constprop.58]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1452
  }
  strcpy_P(str1, thermctl_subscribe);
    a3fe:	65 e8       	ldi	r22, 0x85	; 133
    a400:	74 e1       	ldi	r23, 0x14	; 20
    a402:	c5 01       	movw	r24, r10
    a404:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1453
  if (strcmp(str1, topic) == 0)
    a408:	b4 01       	movw	r22, r8
    a40a:	c5 01       	movw	r24, r10
    a40c:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
    a410:	89 2b       	or	r24, r25
    a412:	61 f4       	brne	.+24     	; 0xa42c <mqtt_callback(char*, unsigned char*, unsigned int)+0x106>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1455
  {
    mqtt_process_message++;
    a414:	80 91 be 0b 	lds	r24, 0x0BBE	; 0x800bbe <mqtt_process_message>
    a418:	90 91 bf 0b 	lds	r25, 0x0BBF	; 0x800bbf <mqtt_process_message+0x1>
    a41c:	01 96       	adiw	r24, 0x01	; 1
    a41e:	90 93 bf 0b 	sts	0x0BBF, r25	; 0x800bbf <mqtt_process_message+0x1>
    a422:	80 93 be 0b 	sts	0x0BBE, r24	; 0x800bbe <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1456
    know_mqtt_create_or_update(my_payload, TYPE_THERMCTL);
    a426:	81 e0       	ldi	r24, 0x01	; 1
    a428:	0e 94 e3 3e 	call	0x7dc6	; 0x7dc6 <know_mqtt_create_or_update(char*, unsigned char) [clone .constprop.58]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1461
  }
  ///
  /// nastavovani casu
  //// /thermctl-in/global/time/set - nastaveni casu. payload json
  strcpy_P(str1, thermctl_header_in);
    a42c:	6c ea       	ldi	r22, 0xAC	; 172
    a42e:	74 e1       	ldi	r23, 0x14	; 20
    a430:	c5 01       	movw	r24, r10
    a432:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1462
  strcat_P(str1, global_time_set);
    a436:	60 e5       	ldi	r22, 0x50	; 80
    a438:	74 e1       	ldi	r23, 0x14	; 20
    a43a:	c5 01       	movw	r24, r10
    a43c:	0e 94 37 80 	call	0x1006e	; 0x1006e <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1463
  if (strcmp(str1, topic) == 0)
    a440:	b4 01       	movw	r22, r8
    a442:	c5 01       	movw	r24, r10
    a444:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
    a448:	89 2b       	or	r24, r25
    a44a:	09 f0       	breq	.+2      	; 0xa44e <mqtt_callback(char*, unsigned char*, unsigned int)+0x128>
    a44c:	a9 c0       	rjmp	.+338    	; 0xa5a0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x27a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1465
  {
    mqtt_process_message++;
    a44e:	80 91 be 0b 	lds	r24, 0x0BBE	; 0x800bbe <mqtt_process_message>
    a452:	90 91 bf 0b 	lds	r25, 0x0BBF	; 0x800bbf <mqtt_process_message+0x1>
    a456:	01 96       	adiw	r24, 0x01	; 1
    a458:	90 93 bf 0b 	sts	0x0BBF, r25	; 0x800bbf <mqtt_process_message+0x1>
    a45c:	80 93 be 0b 	sts	0x0BBE, r24	; 0x800bbe <mqtt_process_message>
deserialize():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/deserialize.hpp:49
// TChar* = char*, const char*, const FlashStringHelper*
template <template <typename, typename> class TDeserializer, typename TDocument,
          typename TChar>
DeserializationError deserialize(TDocument &doc, TChar *input) {
  using namespace Internals;
  return makeDeserializer<TDeserializer>(
    a460:	20 91 8a 10 	lds	r18, 0x108A	; 0x80108a <doc>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEEC2ERNS0_10MemoryPoolES3_S5_h():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:27
                   TStringStorage stringStorage, uint8_t nestingLimit)
      : _memoryPool(&memoryPool),
        _reader(reader),
        _stringStorage(stringStorage),
        _nestingLimit(nestingLimit),
        _loaded(false) {}
    a464:	8b e8       	ldi	r24, 0x8B	; 139
    a466:	90 e1       	ldi	r25, 0x10	; 16
    a468:	2a 96       	adiw	r28, 0x0a	; 10
    a46a:	9f af       	std	Y+63, r25	; 0x3f
    a46c:	8e af       	std	Y+62, r24	; 0x3e
    a46e:	2a 97       	sbiw	r28, 0x0a	; 10
    a470:	8a e4       	ldi	r24, 0x4A	; 74
    a472:	9e e0       	ldi	r25, 0x0E	; 14
    a474:	2c 96       	adiw	r28, 0x0c	; 12
    a476:	9f af       	std	Y+63, r25	; 0x3f
    a478:	8e af       	std	Y+62, r24	; 0x3e
    a47a:	2c 97       	sbiw	r28, 0x0c	; 12
    a47c:	2e 96       	adiw	r28, 0x0e	; 14
    a47e:	9f af       	std	Y+63, r25	; 0x3f
    a480:	8e af       	std	Y+62, r24	; 0x3e
    a482:	2e 97       	sbiw	r28, 0x0e	; 14
    a484:	2f 96       	adiw	r28, 0x0f	; 15
    a486:	2f af       	std	Y+63, r18	; 0x3f
    a488:	2f 97       	sbiw	r28, 0x0f	; 15
    a48a:	61 96       	adiw	r28, 0x11	; 17
    a48c:	1f ae       	std	Y+63, r1	; 0x3f
    a48e:	61 97       	sbiw	r28, 0x11	; 17
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5clearEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:66

  // Resets the memoryPool.
  // USE WITH CAUTION: this invalidates all previously allocated data
  void clear() {
    _size = 0;
    a490:	10 92 92 10 	sts	0x1092, r1	; 0x801092 <doc+0x8>
    a494:	10 92 91 10 	sts	0x1091, r1	; 0x801091 <doc+0x7>
_ZN11ArduinoJson9Internals15JsonVariantData7setNullEv():
    content.asRaw.data = data;
    content.asRaw.size = size;
  }

  void setNull() {
    type = JSON_NULL;
    a498:	10 92 94 11 	sts	0x1194, r1	; 0x801194 <doc+0x10a>
    a49c:	10 92 93 11 	sts	0x1193, r1	; 0x801193 <doc+0x109>
    a4a0:	4b e8       	ldi	r20, 0x8B	; 139
    a4a2:	50 e1       	ldi	r21, 0x10	; 16
    a4a4:	63 e9       	ldi	r22, 0x93	; 147
    a4a6:	71 e1       	ldi	r23, 0x11	; 17
deserialize():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/deserialize.hpp:52
             doc.memoryPool(), makeReader(input),
             makeStringStorage(doc.memoryPool(), input), doc.nestingLimit)
      .parse(doc.template to<JsonVariant>());
    a4a8:	ce 01       	movw	r24, r28
    a4aa:	88 5b       	subi	r24, 0xB8	; 184
    a4ac:	9f 4f       	sbci	r25, 0xFF	; 255
    a4ae:	0e 94 62 3f 	call	0x7ec4	; 0x7ec4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>
_ZN11ArduinoJson9Internals15JsonVariantData8asObjectEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:88
  JsonArrayData *asArray() {
    return type == JSON_ARRAY ? &content.asArray : 0;
  }

  JsonObjectData *asObject() {
    return type == JSON_OBJECT ? &content.asObject : 0;
    a4b2:	80 91 93 11 	lds	r24, 0x1193	; 0x801193 <doc+0x109>
    a4b6:	90 91 94 11 	lds	r25, 0x1194	; 0x801194 <doc+0x10a>
_Z13mqtt_callbackPcPhj():
    a4ba:	05 e9       	ldi	r16, 0x95	; 149
    a4bc:	11 e1       	ldi	r17, 0x11	; 17
_ZN11ArduinoJson9Internals15JsonVariantData8asObjectEv():
    a4be:	09 97       	sbiw	r24, 0x09	; 9
    a4c0:	11 f0       	breq	.+4      	; 0xa4c6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a0>
_Z13mqtt_callbackPcPhj():
    a4c2:	10 e0       	ldi	r17, 0x00	; 0
    a4c4:	00 e0       	ldi	r16, 0x00	; 0
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    }
    return slot;
  }
  template <typename TStringRef>
  FORCE_INLINE Internals::Slot* findSlot(TStringRef key) const {
    return const_cast<JsonObject*>(this)->findSlot<TStringRef>(key);
    a4c6:	6b e9       	ldi	r22, 0x9B	; 155
    a4c8:	73 e0       	ldi	r23, 0x03	; 3
    a4ca:	c8 01       	movw	r24, r16
    a4cc:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.17]>
    a4d0:	7c 01       	movw	r14, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1468
    deserializeJson(doc, my_payload);
    JsonObject root = doc.as<JsonObject>();
    if (root.containsKey("year") && root.containsKey("month") && root.containsKey("month") && root.containsKey("hour") && root.containsKey("minute") && root.containsKey("second"))
    a4d2:	89 2b       	or	r24, r25
    a4d4:	09 f4       	brne	.+2      	; 0xa4d8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b2>
    a4d6:	64 c0       	rjmp	.+200    	; 0xa5a0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x27a>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    a4d8:	60 ea       	ldi	r22, 0xA0	; 160
    a4da:	73 e0       	ldi	r23, 0x03	; 3
    a4dc:	c8 01       	movw	r24, r16
    a4de:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.17]>
    a4e2:	2c 01       	movw	r4, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1468
    a4e4:	89 2b       	or	r24, r25
    a4e6:	09 f4       	brne	.+2      	; 0xa4ea <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c4>
    a4e8:	5b c0       	rjmp	.+182    	; 0xa5a0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x27a>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    a4ea:	66 ea       	ldi	r22, 0xA6	; 166
    a4ec:	73 e0       	ldi	r23, 0x03	; 3
    a4ee:	c8 01       	movw	r24, r16
    a4f0:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.17]>
    a4f4:	3c 01       	movw	r6, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1468
    a4f6:	89 2b       	or	r24, r25
    a4f8:	09 f4       	brne	.+2      	; 0xa4fc <mqtt_callback(char*, unsigned char*, unsigned int)+0x1d6>
    a4fa:	52 c0       	rjmp	.+164    	; 0xa5a0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x27a>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    a4fc:	6b ea       	ldi	r22, 0xAB	; 171
    a4fe:	73 e0       	ldi	r23, 0x03	; 3
    a500:	c8 01       	movw	r24, r16
    a502:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.17]>
    a506:	6c 01       	movw	r12, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1468
    a508:	89 2b       	or	r24, r25
    a50a:	09 f4       	brne	.+2      	; 0xa50e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1e8>
    a50c:	49 c0       	rjmp	.+146    	; 0xa5a0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x27a>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    a50e:	62 eb       	ldi	r22, 0xB2	; 178
    a510:	73 e0       	ldi	r23, 0x03	; 3
    a512:	c8 01       	movw	r24, r16
    a514:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.17]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1468
    a518:	00 97       	sbiw	r24, 0x00	; 0
    a51a:	09 f4       	brne	.+2      	; 0xa51e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1f8>
    a51c:	41 c0       	rjmp	.+130    	; 0xa5a0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x27a>
_ZNK11ArduinoJson11JsonVariant2asIhEEKNS_9Internals9enable_ifIXsrNS2_11is_integralIT_EE5valueES5_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:182
  // unsigned long as<unsigned long>() const;
  template <typename T>
  FORCE_INLINE const typename Internals::enable_if<
      Internals::is_integral<T>::value, T>::type
  as() const {
    return _data ? _data->asInteger<T>() : T();
    a51e:	0e 94 b0 72 	call	0xe560	; 0xe560 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    a522:	38 2e       	mov	r3, r24
    a524:	c6 01       	movw	r24, r12
    a526:	0e 94 b0 72 	call	0xe560	; 0xe560 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    a52a:	d8 2e       	mov	r13, r24
    a52c:	c3 01       	movw	r24, r6
    a52e:	0e 94 b0 72 	call	0xe560	; 0xe560 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    a532:	c8 2e       	mov	r12, r24
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    a534:	69 eb       	ldi	r22, 0xB9	; 185
    a536:	73 e0       	ldi	r23, 0x03	; 3
    a538:	c8 01       	movw	r24, r16
    a53a:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.17]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:312

  template <typename TStringRef, typename TValue>
  FORCE_INLINE typename Internals::JsonVariantAs<TValue>::type get_impl(
      TStringRef key) const {
    Internals::Slot* slot = findSlot<TStringRef>(key);
    return slot ? JsonVariant(_memoryPool, &slot->value).as<TValue>()
    a53e:	10 e0       	ldi	r17, 0x00	; 0
_ZNK11ArduinoJson10JsonObject8get_implIPKchEENS_9Internals13JsonVariantAsIT0_E4typeET_():
    a540:	00 97       	sbiw	r24, 0x00	; 0
    a542:	19 f0       	breq	.+6      	; 0xa54a <mqtt_callback(char*, unsigned char*, unsigned int)+0x224>
_ZNK11ArduinoJson11JsonVariant2asIhEEKNS_9Internals9enable_ifIXsrNS2_11is_integralIT_EE5valueES5_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:182
    a544:	0e 94 b0 72 	call	0xe560	; 0xe560 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    a548:	18 2f       	mov	r17, r24
    a54a:	c2 01       	movw	r24, r4
    a54c:	0e 94 b0 72 	call	0xe560	; 0xe560 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    a550:	08 2f       	mov	r16, r24
asInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
  }

  template <typename T>
  T asInteger() const {
    switch (type) {
    a552:	d7 01       	movw	r26, r14
    a554:	8d 91       	ld	r24, X+
    a556:	9c 91       	ld	r25, X
    a558:	11 97       	sbiw	r26, 0x01	; 1
    a55a:	87 30       	cpi	r24, 0x07	; 7
    a55c:	91 05       	cpc	r25, r1
    a55e:	08 f0       	brcs	.+2      	; 0xa562 <mqtt_callback(char*, unsigned char*, unsigned int)+0x23c>
    a560:	28 c2       	rjmp	.+1104   	; 0xa9b2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x68c>
    a562:	85 30       	cpi	r24, 0x05	; 5
    a564:	91 05       	cpc	r25, r1
    a566:	08 f0       	brcs	.+2      	; 0xa56a <mqtt_callback(char*, unsigned char*, unsigned int)+0x244>
    a568:	32 c2       	rjmp	.+1124   	; 0xa9ce <mqtt_callback(char*, unsigned char*, unsigned int)+0x6a8>
    a56a:	03 97       	sbiw	r24, 0x03	; 3
    a56c:	08 f0       	brcs	.+2      	; 0xa570 <mqtt_callback(char*, unsigned char*, unsigned int)+0x24a>
    a56e:	41 c2       	rjmp	.+1154   	; 0xa9f2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x6cc>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
    a570:	60 e0       	ldi	r22, 0x00	; 0
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
    yOff = year;
    a572:	29 96       	adiw	r28, 0x09	; 9
    a574:	6f af       	std	Y+63, r22	; 0x3f
    a576:	29 97       	sbiw	r28, 0x09	; 9
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:105
    m = month;
    a578:	2a 96       	adiw	r28, 0x0a	; 10
    a57a:	0f af       	std	Y+63, r16	; 0x3f
    a57c:	2a 97       	sbiw	r28, 0x0a	; 10
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:106
    d = day;
    a57e:	2b 96       	adiw	r28, 0x0b	; 11
    a580:	1f af       	std	Y+63, r17	; 0x3f
    a582:	2b 97       	sbiw	r28, 0x0b	; 11
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:107
    hh = hour;
    a584:	2c 96       	adiw	r28, 0x0c	; 12
    a586:	cf ae       	std	Y+63, r12	; 0x3f
    a588:	2c 97       	sbiw	r28, 0x0c	; 12
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:108
    mm = min;
    a58a:	2d 96       	adiw	r28, 0x0d	; 13
    a58c:	df ae       	std	Y+63, r13	; 0x3f
    a58e:	2d 97       	sbiw	r28, 0x0d	; 13
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:109
    ss = sec;
    a590:	2e 96       	adiw	r28, 0x0e	; 14
    a592:	3f ae       	std	Y+63, r3	; 0x3f
    a594:	2e 97       	sbiw	r28, 0x0e	; 14
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1469
      rtc.adjust(DateTime(root["year"], root["month"], root["day"], root["hour"], root["minute"], root["second"]));
    a596:	ce 01       	movw	r24, r28
    a598:	88 5b       	subi	r24, 0xB8	; 184
    a59a:	9f 4f       	sbci	r25, 0xFF	; 255
    a59c:	0e 94 e5 15 	call	0x2bca	; 0x2bca <RTC_DS1307::adjust(DateTime const&)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1472
  }
  //// /thermctl-in/global/time/ntp - jednorazova aktualizace casu z ntp serveru
  strcpy_P(str1, thermctl_header_in);
    a5a0:	6c ea       	ldi	r22, 0xAC	; 172
    a5a2:	74 e1       	ldi	r23, 0x14	; 20
    a5a4:	c5 01       	movw	r24, r10
    a5a6:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1473
  strcat_P(str1, global_time_ntp);
    a5aa:	60 e4       	ldi	r22, 0x40	; 64
    a5ac:	74 e1       	ldi	r23, 0x14	; 20
    a5ae:	c5 01       	movw	r24, r10
    a5b0:	0e 94 37 80 	call	0x1006e	; 0x1006e <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1474
  if (strcmp(str1, topic) == 0)
    a5b4:	b4 01       	movw	r22, r8
    a5b6:	c5 01       	movw	r24, r10
    a5b8:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
    a5bc:	89 2b       	or	r24, r25
    a5be:	09 f0       	breq	.+2      	; 0xa5c2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x29c>
    a5c0:	e5 c0       	rjmp	.+458    	; 0xa78c <mqtt_callback(char*, unsigned char*, unsigned int)+0x466>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1476
  {
    mqtt_process_message++;
    a5c2:	80 91 be 0b 	lds	r24, 0x0BBE	; 0x800bbe <mqtt_process_message>
    a5c6:	90 91 bf 0b 	lds	r25, 0x0BBF	; 0x800bbf <mqtt_process_message+0x1>
    a5ca:	01 96       	adiw	r24, 0x01	; 1
    a5cc:	90 93 bf 0b 	sts	0x0BBF, r25	; 0x800bbf <mqtt_process_message+0x1>
    a5d0:	80 93 be 0b 	sts	0x0BBE, r24	; 0x800bbe <mqtt_process_message>
time_get_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2530
///
/////////////// Casove funkce ///////////////////////////////////////////////////////////////////
/// time_get_offset - ziska casovy offset, letni/zimni cas
uint8_t time_get_offset(void)
{
  return EEPROM.read(time_offset);
    a5d4:	81 e0       	ldi	r24, 0x01	; 1
    a5d6:	90 e0       	ldi	r25, 0x00	; 0
    a5d8:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224]>
    a5dc:	18 2f       	mov	r17, r24
ntp_update():
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:385
//////////////////////////////////////////////////////////////////////
uint8_t ntp_update(NTPClient *timeClient, RTC_DS1307 *rtc, uint8_t offset)
{
  char tmp1[20];
  uint8_t ret = 0;
  tmp1[0] = 0;
    a5de:	7e 01       	movw	r14, r28
    a5e0:	28 e4       	ldi	r18, 0x48	; 72
    a5e2:	e2 0e       	add	r14, r18
    a5e4:	f1 1c       	adc	r15, r1
    a5e6:	d7 01       	movw	r26, r14
    a5e8:	1c 92       	st	X, r1
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:386
  createString(tmp1, '.', device.ntp_server, 4, 10);
    a5ea:	0a e0       	ldi	r16, 0x0A	; 10
    a5ec:	24 e0       	ldi	r18, 0x04	; 4
    a5ee:	44 e6       	ldi	r20, 0x64	; 100
    a5f0:	50 e1       	ldi	r21, 0x10	; 16
    a5f2:	6e e2       	ldi	r22, 0x2E	; 46
    a5f4:	c7 01       	movw	r24, r14
    a5f6:	0e 94 6c 4b 	call	0x96d8	; 0x96d8 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:387
  timeClient->begin();
    a5fa:	ce 01       	movw	r24, r28
    a5fc:	01 96       	adiw	r24, 0x01	; 1
    a5fe:	0e 94 c2 14 	call	0x2984	; 0x2984 <NTPClient::begin()>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:388
  timeClient->setTimeOffset(3600 * offset);
    a602:	20 e1       	ldi	r18, 0x10	; 16
    a604:	3e e0       	ldi	r19, 0x0E	; 14
    a606:	12 9f       	mul	r17, r18
    a608:	c0 01       	movw	r24, r0
    a60a:	13 9f       	mul	r17, r19
    a60c:	90 0d       	add	r25, r0
    a60e:	11 24       	eor	r1, r1
setTimeOffset():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:172

  this->_udpSetup = false;
}

void NTPClient::setTimeOffset(int timeOffset) {
  this->_timeOffset     = timeOffset;
    a610:	09 2e       	mov	r0, r25
    a612:	00 0c       	add	r0, r0
    a614:	aa 0b       	sbc	r26, r26
    a616:	bb 0b       	sbc	r27, r27
    a618:	88 87       	std	Y+8, r24	; 0x08
    a61a:	99 87       	std	Y+9, r25	; 0x09
    a61c:	aa 87       	std	Y+10, r26	; 0x0a
    a61e:	bb 87       	std	Y+11, r27	; 0x0b
setPoolServerName():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:180
void NTPClient::setUpdateInterval(unsigned long updateInterval) {
  this->_updateInterval = updateInterval;
}

void NTPClient::setPoolServerName(const char* poolServerName) {
    this->_poolServerName = poolServerName;
    a620:	fd 82       	std	Y+5, r15	; 0x05
    a622:	ec 82       	std	Y+4, r14	; 0x04
ntp_update():
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:390
  timeClient->setPoolServerName(tmp1);
  if (timeClient->update() == true)
    a624:	ce 01       	movw	r24, r28
    a626:	01 96       	adiw	r24, 0x01	; 1
    a628:	0e 94 b6 43 	call	0x876c	; 0x876c <NTPClient::update()>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:384

//////////////////////////////////////////////////////////////////////
uint8_t ntp_update(NTPClient *timeClient, RTC_DS1307 *rtc, uint8_t offset)
{
  char tmp1[20];
  uint8_t ret = 0;
    a62c:	10 e0       	ldi	r17, 0x00	; 0
ntp_update():
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:390
  tmp1[0] = 0;
  createString(tmp1, '.', device.ntp_server, 4, 10);
  timeClient->begin();
  timeClient->setTimeOffset(3600 * offset);
  timeClient->setPoolServerName(tmp1);
  if (timeClient->update() == true)
    a62e:	88 23       	and	r24, r24
    a630:	09 f4       	brne	.+2      	; 0xa634 <mqtt_callback(char*, unsigned char*, unsigned int)+0x30e>
    a632:	9a c0       	rjmp	.+308    	; 0xa768 <mqtt_callback(char*, unsigned char*, unsigned int)+0x442>
getSeconds():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:148
}
int NTPClient::getMinutes() const {
  return ((this->getEpochTime() % 3600) / 60);
}
int NTPClient::getSeconds() const {
  return (this->getEpochTime() % 60);
    a634:	ce 01       	movw	r24, r28
    a636:	01 96       	adiw	r24, 0x01	; 1
    a638:	0e 94 8e 14 	call	0x291c	; 0x291c <NTPClient::getEpochTime() const>
    a63c:	2c e3       	ldi	r18, 0x3C	; 60
    a63e:	c2 2e       	mov	r12, r18
    a640:	d1 2c       	mov	r13, r1
    a642:	e1 2c       	mov	r14, r1
    a644:	f1 2c       	mov	r15, r1
    a646:	a7 01       	movw	r20, r14
    a648:	96 01       	movw	r18, r12
    a64a:	0e 94 31 8a 	call	0x11462	; 0x11462 <__udivmodsi4>
    a64e:	36 2e       	mov	r3, r22
getMinutes():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:145
}
int NTPClient::getHours() const {
  return ((this->getEpochTime()  % 86400L) / 3600);
}
int NTPClient::getMinutes() const {
  return ((this->getEpochTime() % 3600) / 60);
    a650:	ce 01       	movw	r24, r28
    a652:	01 96       	adiw	r24, 0x01	; 1
    a654:	0e 94 8e 14 	call	0x291c	; 0x291c <NTPClient::getEpochTime() const>
    a658:	30 e1       	ldi	r19, 0x10	; 16
    a65a:	43 2e       	mov	r4, r19
    a65c:	3e e0       	ldi	r19, 0x0E	; 14
    a65e:	53 2e       	mov	r5, r19
    a660:	61 2c       	mov	r6, r1
    a662:	71 2c       	mov	r7, r1
    a664:	a3 01       	movw	r20, r6
    a666:	92 01       	movw	r18, r4
    a668:	0e 94 31 8a 	call	0x11462	; 0x11462 <__udivmodsi4>
    a66c:	a7 01       	movw	r20, r14
    a66e:	96 01       	movw	r18, r12
    a670:	0e 94 31 8a 	call	0x11462	; 0x11462 <__udivmodsi4>
    a674:	e2 2e       	mov	r14, r18
getHours():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:142

int NTPClient::getDay() const {
  return (((this->getEpochTime()  / 86400L) + 4 ) % 7); //0 is Sunday
}
int NTPClient::getHours() const {
  return ((this->getEpochTime()  % 86400L) / 3600);
    a676:	ce 01       	movw	r24, r28
    a678:	01 96       	adiw	r24, 0x01	; 1
    a67a:	0e 94 8e 14 	call	0x291c	; 0x291c <NTPClient::getEpochTime() const>
    a67e:	20 e8       	ldi	r18, 0x80	; 128
    a680:	31 e5       	ldi	r19, 0x51	; 81
    a682:	41 e0       	ldi	r20, 0x01	; 1
    a684:	50 e0       	ldi	r21, 0x00	; 0
    a686:	0e 94 31 8a 	call	0x11462	; 0x11462 <__udivmodsi4>
    a68a:	a3 01       	movw	r20, r6
    a68c:	92 01       	movw	r18, r4
    a68e:	0e 94 31 8a 	call	0x11462	; 0x11462 <__udivmodsi4>
    a692:	d2 2e       	mov	r13, r18
getDate():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:130

  return month;
}

int NTPClient::getDate() const {
  time_t rawtime = this->getEpochTime();
    a694:	ce 01       	movw	r24, r28
    a696:	01 96       	adiw	r24, 0x01	; 1
    a698:	0e 94 8e 14 	call	0x291c	; 0x291c <NTPClient::getEpochTime() const>
    a69c:	c8 57       	subi	r28, 0x78	; 120
    a69e:	df 4f       	sbci	r29, 0xFF	; 255
    a6a0:	68 83       	st	Y, r22
    a6a2:	79 83       	std	Y+1, r23	; 0x01
    a6a4:	8a 83       	std	Y+2, r24	; 0x02
    a6a6:	9b 83       	std	Y+3, r25	; 0x03
    a6a8:	c8 58       	subi	r28, 0x88	; 136
    a6aa:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:132
  struct tm * ti;
  ti = localtime (&rawtime);
    a6ac:	ce 01       	movw	r24, r28
    a6ae:	88 57       	subi	r24, 0x78	; 120
    a6b0:	9f 4f       	sbci	r25, 0xFF	; 255
    a6b2:	0e 94 80 71 	call	0xe300	; 0xe300 <localtime>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:133
  int month = (ti->tm_mday) < 10 ? 0 + (ti->tm_mday) : (ti->tm_mday);
    a6b6:	fc 01       	movw	r30, r24
    a6b8:	c3 80       	ldd	r12, Z+3	; 0x03
getMonth():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:121

  return year;
}

int NTPClient::getMonth() const {
  time_t rawtime = this->getEpochTime();
    a6ba:	ce 01       	movw	r24, r28
    a6bc:	01 96       	adiw	r24, 0x01	; 1
    a6be:	0e 94 8e 14 	call	0x291c	; 0x291c <NTPClient::getEpochTime() const>
    a6c2:	c8 57       	subi	r28, 0x78	; 120
    a6c4:	df 4f       	sbci	r29, 0xFF	; 255
    a6c6:	68 83       	st	Y, r22
    a6c8:	79 83       	std	Y+1, r23	; 0x01
    a6ca:	8a 83       	std	Y+2, r24	; 0x02
    a6cc:	9b 83       	std	Y+3, r25	; 0x03
    a6ce:	c8 58       	subi	r28, 0x88	; 136
    a6d0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:123
  struct tm * ti;
  ti = localtime (&rawtime);
    a6d2:	ce 01       	movw	r24, r28
    a6d4:	88 57       	subi	r24, 0x78	; 120
    a6d6:	9f 4f       	sbci	r25, 0xFF	; 255
    a6d8:	0e 94 80 71 	call	0xe300	; 0xe300 <localtime>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:124
  int month = (ti->tm_mon + 1) < 10 ? 0 + (ti->tm_mon + 1) : (ti->tm_mon + 1);
    a6dc:	dc 01       	movw	r26, r24
    a6de:	15 96       	adiw	r26, 0x05	; 5
    a6e0:	0c 91       	ld	r16, X
    a6e2:	00 2e       	mov	r0, r16
    a6e4:	00 0c       	add	r0, r0
    a6e6:	11 0b       	sbc	r17, r17
    a6e8:	0f 5f       	subi	r16, 0xFF	; 255
    a6ea:	1f 4f       	sbci	r17, 0xFF	; 255
ntp_update():
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:392
  {
    rtc->adjust(DateTime(timeClient->getYear(), timeClient->getMonth() , timeClient->getDate(), timeClient->getHours(), timeClient->getMinutes(), timeClient->getSeconds()));
    a6ec:	ce 01       	movw	r24, r28
    a6ee:	01 96       	adiw	r24, 0x01	; 1
    a6f0:	0e 94 9a 43 	call	0x8734	; 0x8734 <NTPClient::getYear() const>
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:102
    }
    d = days + 1;
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
    a6f4:	80 3d       	cpi	r24, 0xD0	; 208
    a6f6:	b7 e0       	ldi	r27, 0x07	; 7
    a6f8:	9b 07       	cpc	r25, r27
    a6fa:	10 f0       	brcs	.+4      	; 0xa700 <mqtt_callback(char*, unsigned char*, unsigned int)+0x3da>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:103
        year -= 2000;
    a6fc:	80 5d       	subi	r24, 0xD0	; 208
    a6fe:	97 40       	sbci	r25, 0x07	; 7
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
    yOff = year;
    a700:	c8 57       	subi	r28, 0x78	; 120
    a702:	df 4f       	sbci	r29, 0xFF	; 255
    a704:	88 83       	st	Y, r24
    a706:	c8 58       	subi	r28, 0x88	; 136
    a708:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:105
    m = month;
    a70a:	c7 57       	subi	r28, 0x77	; 119
    a70c:	df 4f       	sbci	r29, 0xFF	; 255
    a70e:	08 83       	st	Y, r16
    a710:	c9 58       	subi	r28, 0x89	; 137
    a712:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:106
    d = day;
    a714:	c6 57       	subi	r28, 0x76	; 118
    a716:	df 4f       	sbci	r29, 0xFF	; 255
    a718:	c8 82       	st	Y, r12
    a71a:	ca 58       	subi	r28, 0x8A	; 138
    a71c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:107
    hh = hour;
    a71e:	c5 57       	subi	r28, 0x75	; 117
    a720:	df 4f       	sbci	r29, 0xFF	; 255
    a722:	d8 82       	st	Y, r13
    a724:	cb 58       	subi	r28, 0x8B	; 139
    a726:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:108
    mm = min;
    a728:	c4 57       	subi	r28, 0x74	; 116
    a72a:	df 4f       	sbci	r29, 0xFF	; 255
    a72c:	e8 82       	st	Y, r14
    a72e:	cc 58       	subi	r28, 0x8C	; 140
    a730:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:109
    ss = sec;
    a732:	c3 57       	subi	r28, 0x73	; 115
    a734:	df 4f       	sbci	r29, 0xFF	; 255
    a736:	38 82       	st	Y, r3
    a738:	cd 58       	subi	r28, 0x8D	; 141
    a73a:	d0 40       	sbci	r29, 0x00	; 0
ntp_update():
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:392
    a73c:	ce 01       	movw	r24, r28
    a73e:	88 57       	subi	r24, 0x78	; 120
    a740:	9f 4f       	sbci	r25, 0xFF	; 255
    a742:	0e 94 e5 15 	call	0x2bca	; 0x2bca <RTC_DS1307::adjust(DateTime const&)>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:394
    ret = 1;
    printf("y%d\n", timeClient->getYear());
    a746:	ce 01       	movw	r24, r28
    a748:	01 96       	adiw	r24, 0x01	; 1
    a74a:	0e 94 9a 43 	call	0x8734	; 0x8734 <NTPClient::getYear() const>
    a74e:	9f 93       	push	r25
    a750:	8f 93       	push	r24
    a752:	8d eb       	ldi	r24, 0xBD	; 189
    a754:	93 e0       	ldi	r25, 0x03	; 3
    a756:	9f 93       	push	r25
    a758:	8f 93       	push	r24
    a75a:	0e 94 fc 8c 	call	0x119f8	; 0x119f8 <printf>
    a75e:	0f 90       	pop	r0
    a760:	0f 90       	pop	r0
    a762:	0f 90       	pop	r0
    a764:	0f 90       	pop	r0
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:393
  timeClient->setTimeOffset(3600 * offset);
  timeClient->setPoolServerName(tmp1);
  if (timeClient->update() == true)
  {
    rtc->adjust(DateTime(timeClient->getYear(), timeClient->getMonth() , timeClient->getDate(), timeClient->getHours(), timeClient->getMinutes(), timeClient->getSeconds()));
    ret = 1;
    a766:	11 e0       	ldi	r17, 0x01	; 1
end():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:166

  return hoursStr + ":" + minuteStr + ":" + secondStr;
}

void NTPClient::end() {
  this->_udp->stop();
    a768:	89 81       	ldd	r24, Y+1	; 0x01
    a76a:	9a 81       	ldd	r25, Y+2	; 0x02
    a76c:	dc 01       	movw	r26, r24
    a76e:	ed 91       	ld	r30, X+
    a770:	fc 91       	ld	r31, X
    a772:	02 88       	ldd	r0, Z+18	; 0x12
    a774:	f3 89       	ldd	r31, Z+19	; 0x13
    a776:	e0 2d       	mov	r30, r0
    a778:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:168

  this->_udpSetup = false;
    a77a:	1b 82       	std	Y+3, r1	; 0x03
    a77c:	80 91 9d 0c 	lds	r24, 0x0C9D	; 0x800c9d <selftest_data>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1477
  strcpy_P(str1, thermctl_header_in);
  strcat_P(str1, global_time_ntp);
  if (strcmp(str1, topic) == 0)
  {
    mqtt_process_message++;
    if (ntp_update(&timeClient, &rtc, time_get_offset()) == 1)
    a780:	11 30       	cpi	r17, 0x01	; 1
    a782:	09 f0       	breq	.+2      	; 0xa786 <mqtt_callback(char*, unsigned char*, unsigned int)+0x460>
    a784:	63 c1       	rjmp	.+710    	; 0xaa4c <mqtt_callback(char*, unsigned char*, unsigned int)+0x726>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1478
      cbi(selftest_data, SELFTEST_ERR_NTP); //TODO predelat na volani funkce
    a786:	8d 7f       	andi	r24, 0xFD	; 253
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1480
    else
      sbi(selftest_data, SELFTEST_ERR_NTP); //TODO predelat na volani funkce
    a788:	80 93 9d 0c 	sts	0x0C9D, r24	; 0x800c9d <selftest_data>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1483
  }
  //// /termbig-in/global/time/offset - nastaveni offsetu casu
  strcpy_P(str1, thermctl_header_in);
    a78c:	6c ea       	ldi	r22, 0xAC	; 172
    a78e:	74 e1       	ldi	r23, 0x14	; 20
    a790:	c5 01       	movw	r24, r10
    a792:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1484
  strcat_P(str1, global_time_offset);
    a796:	69 e2       	ldi	r22, 0x29	; 41
    a798:	74 e1       	ldi	r23, 0x14	; 20
    a79a:	c5 01       	movw	r24, r10
    a79c:	0e 94 37 80 	call	0x1006e	; 0x1006e <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1485
  if (strcmp(str1, topic) == 0)
    a7a0:	b4 01       	movw	r22, r8
    a7a2:	c5 01       	movw	r24, r10
    a7a4:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
    a7a8:	89 2b       	or	r24, r25
    a7aa:	91 f4       	brne	.+36     	; 0xa7d0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x4aa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1487
  {
    mqtt_process_message++;
    a7ac:	80 91 be 0b 	lds	r24, 0x0BBE	; 0x800bbe <mqtt_process_message>
    a7b0:	90 91 bf 0b 	lds	r25, 0x0BBF	; 0x800bbf <mqtt_process_message+0x1>
    a7b4:	01 96       	adiw	r24, 0x01	; 1
    a7b6:	90 93 bf 0b 	sts	0x0BBF, r25	; 0x800bbf <mqtt_process_message+0x1>
    a7ba:	80 93 be 0b 	sts	0x0BBE, r24	; 0x800bbe <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1488
    time_set_offset(atoi(my_payload));
    a7be:	8a e4       	ldi	r24, 0x4A	; 74
    a7c0:	9e e0       	ldi	r25, 0x0E	; 14
    a7c2:	0e 94 10 80 	call	0x10020	; 0x10020 <atoi>
time_set_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2535
  return EEPROM.read(time_offset);
}
/// time_set_offset - nastavi casovy offset letni/zimni
void time_set_offset(uint8_t offset)
{
  EEPROM.write(time_offset, offset);
    a7c6:	68 2f       	mov	r22, r24
    a7c8:	81 e0       	ldi	r24, 0x01	; 1
    a7ca:	90 e0       	ldi	r25, 0x00	; 0
    a7cc:	0e 94 81 44 	call	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1492
    mqtt_process_message++;
    time_set_offset(atoi(my_payload));
  }
  /// nastavovani vlastnosti TDS
  //// /thermctl-in/XXXX/tds/associate - asociace do tds si pridam mac 1wire - odpoved je pod jakem ID to mam ulozeno
  strcpy_P(str1, thermctl_header_in);
    a7d0:	6c ea       	ldi	r22, 0xAC	; 172
    a7d2:	74 e1       	ldi	r23, 0x14	; 20
    a7d4:	c5 01       	movw	r24, r10
    a7d6:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1493
  strcat(str1, device.nazev);
    a7da:	6c e2       	ldi	r22, 0x2C	; 44
    a7dc:	70 e1       	ldi	r23, 0x10	; 16
    a7de:	c5 01       	movw	r24, r10
    a7e0:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1494
  strcat(str1, "/tds/associate");
    a7e4:	62 ec       	ldi	r22, 0xC2	; 194
    a7e6:	73 e0       	ldi	r23, 0x03	; 3
    a7e8:	c5 01       	movw	r24, r10
    a7ea:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1495
  if (strcmp(str1, topic) == 0)
    a7ee:	b4 01       	movw	r22, r8
    a7f0:	c5 01       	movw	r24, r10
    a7f2:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1433
  const char tmp1[16];
  char tmp2[16];
  static char my_payload[128];
  boolean ret = 0;
  uint8_t cnt = 0;
  uint8_t id = 0;
    a7f6:	71 2c       	mov	r7, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1495
  /// nastavovani vlastnosti TDS
  //// /thermctl-in/XXXX/tds/associate - asociace do tds si pridam mac 1wire - odpoved je pod jakem ID to mam ulozeno
  strcpy_P(str1, thermctl_header_in);
  strcat(str1, device.nazev);
  strcat(str1, "/tds/associate");
  if (strcmp(str1, topic) == 0)
    a7f8:	89 2b       	or	r24, r25
    a7fa:	09 f0       	breq	.+2      	; 0xa7fe <mqtt_callback(char*, unsigned char*, unsigned int)+0x4d8>
    a7fc:	8f c0       	rjmp	.+286    	; 0xa91c <mqtt_callback(char*, unsigned char*, unsigned int)+0x5f6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1497
  {
    mqtt_process_message++;
    a7fe:	80 91 be 0b 	lds	r24, 0x0BBE	; 0x800bbe <mqtt_process_message>
    a802:	90 91 bf 0b 	lds	r25, 0x0BBF	; 0x800bbf <mqtt_process_message+0x1>
    a806:	01 96       	adiw	r24, 0x01	; 1
    a808:	90 93 bf 0b 	sts	0x0BBF, r25	; 0x800bbf <mqtt_process_message+0x1>
    a80c:	80 93 be 0b 	sts	0x0BBE, r24	; 0x800bbe <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1498
    id = atoi(my_payload);
    a810:	8a e4       	ldi	r24, 0x4A	; 74
    a812:	9e e0       	ldi	r25, 0x0E	; 14
    a814:	0e 94 10 80 	call	0x10020	; 0x10020 <atoi>
    a818:	78 2e       	mov	r7, r24
tds_check_associate():
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:166
/// funkce overeni associace
uint8_t tds_check_associate(uint8_t id)
{
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if ( id < Global_HWwirenum)
    a81a:	20 91 bd 0b 	lds	r18, 0x0BBD	; 0x800bbd <Global_HWwirenum>
    a81e:	82 17       	cp	r24, r18
    a820:	08 f0       	brcs	.+2      	; 0xa824 <mqtt_callback(char*, unsigned char*, unsigned int)+0x4fe>
    a822:	1d c1       	rjmp	.+570    	; 0xaa5e <mqtt_callback(char*, unsigned char*, unsigned int)+0x738>
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:171
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    {
      get_tds18s20(idx, &tds);
      if (tds_compare_rom(tds.rom, w_rom[id].rom) == True)
    a824:	6c 01       	movw	r12, r24
    a826:	dd 24       	eor	r13, r13
    a828:	bb e0       	ldi	r27, 0x0B	; 11
    a82a:	8b 9f       	mul	r24, r27
    a82c:	80 01       	movw	r16, r0
    a82e:	11 24       	eor	r1, r1
    a830:	05 58       	subi	r16, 0x85	; 133
    a832:	14 4f       	sbci	r17, 0xF4	; 244
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:168
{
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if ( id < Global_HWwirenum)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    a834:	61 2c       	mov	r6, r1
tds_check_associate():
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:171
    {
      get_tds18s20(idx, &tds);
      if (tds_compare_rom(tds.rom, w_rom[id].rom) == True)
    a836:	88 e4       	ldi	r24, 0x48	; 72
    a838:	e8 2e       	mov	r14, r24
    a83a:	f1 2c       	mov	r15, r1
    a83c:	ec 0e       	add	r14, r28
    a83e:	fd 1e       	adc	r15, r29
    a840:	ef ef       	ldi	r30, 0xFF	; 255
    a842:	ee 1a       	sub	r14, r30
    a844:	fe 0a       	sbc	r15, r30
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:170
  struct_DDS18s20 tds;
  if ( id < Global_HWwirenum)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    {
      get_tds18s20(idx, &tds);
    a846:	be 01       	movw	r22, r28
    a848:	68 5b       	subi	r22, 0xB8	; 184
    a84a:	7f 4f       	sbci	r23, 0xFF	; 255
    a84c:	86 2d       	mov	r24, r6
    a84e:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:171
      if (tds_compare_rom(tds.rom, w_rom[id].rom) == True)
    a852:	b8 01       	movw	r22, r16
    a854:	c7 01       	movw	r24, r14
    a856:	0e 94 31 2d 	call	0x5a62	; 0x5a62 <tds_compare_rom(unsigned char*, unsigned char*)>
    a85a:	81 11       	cpse	r24, r1
    a85c:	00 c1       	rjmp	.+512    	; 0xaa5e <mqtt_callback(char*, unsigned char*, unsigned int)+0x738>
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:168
{
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if ( id < Global_HWwirenum)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    a85e:	63 94       	inc	r6
    a860:	f6 e0       	ldi	r31, 0x06	; 6
    a862:	6f 12       	cpse	r6, r31
    a864:	f0 cf       	rjmp	.-32     	; 0xa846 <mqtt_callback(char*, unsigned char*, unsigned int)+0x520>
    a866:	f1 2c       	mov	r15, r1
tds_associate():
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:197
  if (tds_check_associate(id) == 255)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    {
      get_tds18s20(idx, &tds);
      if (tds.used == 0 && w_rom[id].used == 1)
    a868:	2b e0       	ldi	r18, 0x0B	; 11
    a86a:	2c 9d       	mul	r18, r12
    a86c:	c0 01       	movw	r24, r0
    a86e:	2d 9d       	mul	r18, r13
    a870:	90 0d       	add	r25, r0
    a872:	11 24       	eor	r1, r1
    a874:	9c 01       	movw	r18, r24
    a876:	2c 57       	subi	r18, 0x7C	; 124
    a878:	34 4f       	sbci	r19, 0xF4	; 244
    a87a:	69 01       	movw	r12, r18
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:196
  struct_DDS18s20 tds;
  if (tds_check_associate(id) == 255)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    {
      get_tds18s20(idx, &tds);
    a87c:	be 01       	movw	r22, r28
    a87e:	68 5b       	subi	r22, 0xB8	; 184
    a880:	7f 4f       	sbci	r23, 0xFF	; 255
    a882:	8f 2d       	mov	r24, r15
    a884:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:197
      if (tds.used == 0 && w_rom[id].used == 1)
    a888:	29 96       	adiw	r28, 0x09	; 9
    a88a:	8f ad       	ldd	r24, Y+63	; 0x3f
    a88c:	29 97       	sbiw	r28, 0x09	; 9
    a88e:	81 11       	cpse	r24, r1
    a890:	df c0       	rjmp	.+446    	; 0xaa50 <mqtt_callback(char*, unsigned char*, unsigned int)+0x72a>
    a892:	d6 01       	movw	r26, r12
    a894:	8c 91       	ld	r24, X
    a896:	81 30       	cpi	r24, 0x01	; 1
    a898:	09 f0       	breq	.+2      	; 0xa89c <mqtt_callback(char*, unsigned char*, unsigned int)+0x576>
    a89a:	da c0       	rjmp	.+436    	; 0xaa50 <mqtt_callback(char*, unsigned char*, unsigned int)+0x72a>
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:199
      {
        tds.used = 1;
    a89c:	fe 01       	movw	r30, r28
    a89e:	e8 5b       	subi	r30, 0xB8	; 184
    a8a0:	ff 4f       	sbci	r31, 0xFF	; 255
    a8a2:	81 93       	st	Z+, r24
    a8a4:	90 e0       	ldi	r25, 0x00	; 0
    a8a6:	80 e0       	ldi	r24, 0x00	; 0
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:201
        for (uint8_t i = 0; i < 8; i++)
          tds.rom[i] = w_rom[id].rom[i];
    a8a8:	d8 01       	movw	r26, r16
    a8aa:	a8 0f       	add	r26, r24
    a8ac:	b9 1f       	adc	r27, r25
    a8ae:	2c 91       	ld	r18, X
    a8b0:	21 93       	st	Z+, r18
    a8b2:	01 96       	adiw	r24, 0x01	; 1
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:200
    {
      get_tds18s20(idx, &tds);
      if (tds.used == 0 && w_rom[id].used == 1)
      {
        tds.used = 1;
        for (uint8_t i = 0; i < 8; i++)
    a8b4:	88 30       	cpi	r24, 0x08	; 8
    a8b6:	91 05       	cpc	r25, r1
    a8b8:	b9 f7       	brne	.-18     	; 0xa8a8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x582>
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:202
          tds.rom[i] = w_rom[id].rom[i];
        tds.assigned_ds2482 = ds2482_address[w_rom[idx].assigned_ds2482].i2c_addr;
    a8ba:	bb e0       	ldi	r27, 0x0B	; 11
    a8bc:	fb 9e       	mul	r15, r27
    a8be:	f0 01       	movw	r30, r0
    a8c0:	11 24       	eor	r1, r1
    a8c2:	e5 58       	subi	r30, 0x85	; 133
    a8c4:	f4 4f       	sbci	r31, 0xF4	; 244
    a8c6:	e0 85       	ldd	r30, Z+8	; 0x08
    a8c8:	f0 e0       	ldi	r31, 0x00	; 0
    a8ca:	ee 0f       	add	r30, r30
    a8cc:	ff 1f       	adc	r31, r31
    a8ce:	e5 53       	subi	r30, 0x35	; 53
    a8d0:	f6 4f       	sbci	r31, 0xF6	; 246
    a8d2:	80 81       	ld	r24, Z
    a8d4:	62 96       	adiw	r28, 0x12	; 18
    a8d6:	8f af       	std	Y+63, r24	; 0x3f
    a8d8:	62 97       	sbiw	r28, 0x12	; 18
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:203
        set_tds18s20(idx, &tds);
    a8da:	be 01       	movw	r22, r28
    a8dc:	68 5b       	subi	r22, 0xB8	; 184
    a8de:	7f 4f       	sbci	r23, 0xFF	; 255
    a8e0:	8f 2d       	mov	r24, r15
    a8e2:	0e 94 5c 46 	call	0x8cb8	; 0x8cb8 <set_tds18s20(unsigned char, struct_DDS18s20*)>
    a8e6:	ee e1       	ldi	r30, 0x1E	; 30
    a8e8:	fe 9e       	mul	r15, r30
    a8ea:	a0 01       	movw	r20, r0
    a8ec:	11 24       	eor	r1, r1
    a8ee:	90 e0       	ldi	r25, 0x00	; 0
    a8f0:	80 e0       	ldi	r24, 0x00	; 0
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:205
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
          status_tds18s20[idx].average_temp[cnt] = 20000;
    a8f2:	20 e2       	ldi	r18, 0x20	; 32
    a8f4:	3e e4       	ldi	r19, 0x4E	; 78
    a8f6:	fc 01       	movw	r30, r24
    a8f8:	ee 0f       	add	r30, r30
    a8fa:	ff 1f       	adc	r31, r31
    a8fc:	e4 0f       	add	r30, r20
    a8fe:	f5 1f       	adc	r31, r21
    a900:	e7 51       	subi	r30, 0x17	; 23
    a902:	f4 4f       	sbci	r31, 0xF4	; 244
    a904:	30 87       	std	Z+8, r19	; 0x08
    a906:	27 83       	std	Z+7, r18	; 0x07
    a908:	01 96       	adiw	r24, 0x01	; 1
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:204
        tds.used = 1;
        for (uint8_t i = 0; i < 8; i++)
          tds.rom[i] = w_rom[id].rom[i];
        tds.assigned_ds2482 = ds2482_address[w_rom[idx].assigned_ds2482].i2c_addr;
        set_tds18s20(idx, &tds);
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
    a90a:	8a 30       	cpi	r24, 0x0A	; 10
    a90c:	91 05       	cpc	r25, r1
    a90e:	99 f7       	brne	.-26     	; 0xa8f6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5d0>
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:211
        ret = idx;
        break;
      }
    }
  }
  tds_update_associate();
    a910:	0e 94 4a 48 	call	0x9094	; 0x9094 <tds_update_associate()>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1499
    if (tds_associate(id) == 255)
    a914:	2f ef       	ldi	r18, 0xFF	; 255
    a916:	f2 16       	cp	r15, r18
    a918:	09 f4       	brne	.+2      	; 0xa91c <mqtt_callback(char*, unsigned char*, unsigned int)+0x5f6>
    a91a:	a3 c0       	rjmp	.+326    	; 0xaa62 <mqtt_callback(char*, unsigned char*, unsigned int)+0x73c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1506
  }
  ///
  //// /thermctl-in/XXXX/tds/set/IDcko/name - nastavi cidlu nazev
  //// /thermctl-in/XXXX/tds/set/IDcko/offset
  //// /thermctl-in/XXXX/tds/set/IDcko/period
  strcpy_P(str1, thermctl_header_in);
    a91c:	6c ea       	ldi	r22, 0xAC	; 172
    a91e:	74 e1       	ldi	r23, 0x14	; 20
    a920:	c5 01       	movw	r24, r10
    a922:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1507
  strcat(str1, device.nazev);
    a926:	6c e2       	ldi	r22, 0x2C	; 44
    a928:	70 e1       	ldi	r23, 0x10	; 16
    a92a:	c5 01       	movw	r24, r10
    a92c:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1508
  strcat(str1, "/tds/set/");
    a930:	6e ee       	ldi	r22, 0xEE	; 238
    a932:	73 e0       	ldi	r23, 0x03	; 3
    a934:	c5 01       	movw	r24, r10
    a936:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1509
  if (strncmp(str1, topic, strlen(str1)) == 0)
    a93a:	f5 01       	movw	r30, r10
    a93c:	01 90       	ld	r0, Z+
    a93e:	00 20       	and	r0, r0
    a940:	e9 f7       	brne	.-6      	; 0xa93c <mqtt_callback(char*, unsigned char*, unsigned int)+0x616>
    a942:	31 97       	sbiw	r30, 0x01	; 1
    a944:	af 01       	movw	r20, r30
    a946:	4a 19       	sub	r20, r10
    a948:	5b 09       	sbc	r21, r11
    a94a:	b4 01       	movw	r22, r8
    a94c:	c5 01       	movw	r24, r10
    a94e:	0e 94 df 8c 	call	0x119be	; 0x119be <strncmp>
    a952:	89 2b       	or	r24, r25
    a954:	09 f0       	breq	.+2      	; 0xa958 <mqtt_callback(char*, unsigned char*, unsigned int)+0x632>
    a956:	0a c1       	rjmp	.+532    	; 0xab6c <mqtt_callback(char*, unsigned char*, unsigned int)+0x846>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1511
  {
    mqtt_process_message++;
    a958:	80 91 be 0b 	lds	r24, 0x0BBE	; 0x800bbe <mqtt_process_message>
    a95c:	90 91 bf 0b 	lds	r25, 0x0BBF	; 0x800bbf <mqtt_process_message+0x1>
    a960:	01 96       	adiw	r24, 0x01	; 1
    a962:	90 93 bf 0b 	sts	0x0BBF, r25	; 0x800bbf <mqtt_process_message+0x1>
    a966:	80 93 be 0b 	sts	0x0BBE, r24	; 0x800bbe <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1513
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    a96a:	f5 01       	movw	r30, r10
    a96c:	01 90       	ld	r0, Z+
    a96e:	00 20       	and	r0, r0
    a970:	e9 f7       	brne	.-6      	; 0xa96c <mqtt_callback(char*, unsigned char*, unsigned int)+0x646>
    a972:	31 97       	sbiw	r30, 0x01	; 1
    a974:	ea 19       	sub	r30, r10
    a976:	fb 09       	sbc	r31, r11
    a978:	9e 2f       	mov	r25, r30
    a97a:	4e 2f       	mov	r20, r30
    a97c:	84 2f       	mov	r24, r20
    a97e:	89 1b       	sub	r24, r25
    a980:	24 2f       	mov	r18, r20
    a982:	30 e0       	ldi	r19, 0x00	; 0
    a984:	d4 01       	movw	r26, r8
    a986:	0d 90       	ld	r0, X+
    a988:	00 20       	and	r0, r0
    a98a:	e9 f7       	brne	.-6      	; 0xa986 <mqtt_callback(char*, unsigned char*, unsigned int)+0x660>
    a98c:	11 97       	sbiw	r26, 0x01	; 1
    a98e:	a8 19       	sub	r26, r8
    a990:	b9 09       	sbc	r27, r9
    a992:	2a 17       	cp	r18, r26
    a994:	3b 07       	cpc	r19, r27
    a996:	08 f0       	brcs	.+2      	; 0xa99a <mqtt_callback(char*, unsigned char*, unsigned int)+0x674>
    a998:	69 c0       	rjmp	.+210    	; 0xaa6c <mqtt_callback(char*, unsigned char*, unsigned int)+0x746>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1515
    {
      str1[cnt] = topic[f];
    a99a:	d5 01       	movw	r26, r10
    a99c:	a8 0f       	add	r26, r24
    a99e:	b1 1d       	adc	r27, r1
    a9a0:	28 0d       	add	r18, r8
    a9a2:	39 1d       	adc	r19, r9
    a9a4:	f9 01       	movw	r30, r18
    a9a6:	80 81       	ld	r24, Z
    a9a8:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1516
      str1[cnt + 1] = 0;
    a9aa:	11 96       	adiw	r26, 0x01	; 1
    a9ac:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1513
  strcat(str1, "/tds/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    a9ae:	4f 5f       	subi	r20, 0xFF	; 255
    a9b0:	e5 cf       	rjmp	.-54     	; 0xa97c <mqtt_callback(char*, unsigned char*, unsigned int)+0x656>
asInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
    a9b2:	87 30       	cpi	r24, 0x07	; 7
    a9b4:	91 05       	cpc	r25, r1
    a9b6:	b1 f0       	breq	.+44     	; 0xa9e4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x6be>
    a9b8:	0a 97       	sbiw	r24, 0x0a	; 10
    a9ba:	09 f0       	breq	.+2      	; 0xa9be <mqtt_callback(char*, unsigned char*, unsigned int)+0x698>
    a9bc:	d9 cd       	rjmp	.-1102   	; 0xa570 <mqtt_callback(char*, unsigned char*, unsigned int)+0x24a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:103
        return T(~content.asInteger + 1);
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
      case JSON_FLOAT:
        return T(content.asFloat);
    a9be:	f7 01       	movw	r30, r14
    a9c0:	62 81       	ldd	r22, Z+2	; 0x02
    a9c2:	73 81       	ldd	r23, Z+3	; 0x03
    a9c4:	84 81       	ldd	r24, Z+4	; 0x04
    a9c6:	95 81       	ldd	r25, Z+5	; 0x05
    a9c8:	0e 94 72 8b 	call	0x116e4	; 0x116e4 <__fixunssfsi>
    a9cc:	03 c0       	rjmp	.+6      	; 0xa9d4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x6ae>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:96
  template <typename T>
  T asInteger() const {
    switch (type) {
      case JSON_POSITIVE_INTEGER:
      case JSON_BOOLEAN:
        return T(content.asInteger);
    a9ce:	f7 01       	movw	r30, r14
    a9d0:	62 81       	ldd	r22, Z+2	; 0x02
    a9d2:	73 81       	ldd	r23, Z+3	; 0x03
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:102
    }
    d = days + 1;
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
    a9d4:	60 3d       	cpi	r22, 0xD0	; 208
    a9d6:	f7 e0       	ldi	r31, 0x07	; 7
    a9d8:	7f 07       	cpc	r23, r31
    a9da:	08 f4       	brcc	.+2      	; 0xa9de <mqtt_callback(char*, unsigned char*, unsigned int)+0x6b8>
    a9dc:	ca cd       	rjmp	.-1132   	; 0xa572 <mqtt_callback(char*, unsigned char*, unsigned int)+0x24c>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:103
        year -= 2000;
    a9de:	60 5d       	subi	r22, 0xD0	; 208
    a9e0:	77 40       	sbci	r23, 0x07	; 7
    a9e2:	c7 cd       	rjmp	.-1138   	; 0xa572 <mqtt_callback(char*, unsigned char*, unsigned int)+0x24c>
asInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:98
      case JSON_NEGATIVE_INTEGER:
        return T(~content.asInteger + 1);
    a9e4:	12 96       	adiw	r26, 0x02	; 2
    a9e6:	6d 91       	ld	r22, X+
    a9e8:	7c 91       	ld	r23, X
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    a9ea:	71 95       	neg	r23
    a9ec:	61 95       	neg	r22
    a9ee:	71 09       	sbc	r23, r1
    a9f0:	f1 cf       	rjmp	.-30     	; 0xa9d4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x6ae>
asInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:101
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
    a9f2:	12 96       	adiw	r26, 0x02	; 2
    a9f4:	ed 91       	ld	r30, X+
    a9f6:	fc 91       	ld	r31, X
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
    a9f8:	30 97       	sbiw	r30, 0x00	; 0
    a9fa:	09 f4       	brne	.+2      	; 0xa9fe <mqtt_callback(char*, unsigned char*, unsigned int)+0x6d8>
    a9fc:	b9 cd       	rjmp	.-1166   	; 0xa570 <mqtt_callback(char*, unsigned char*, unsigned int)+0x24a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18

  if (*s == 't') return 1;  // "true"
    a9fe:	80 81       	ld	r24, Z
_Z13mqtt_callbackPcPhj():
    aa00:	61 e0       	ldi	r22, 0x01	; 1
    aa02:	70 e0       	ldi	r23, 0x00	; 0
parseInteger():
    aa04:	84 37       	cpi	r24, 0x74	; 116
    aa06:	09 f4       	brne	.+2      	; 0xaa0a <mqtt_callback(char*, unsigned char*, unsigned int)+0x6e4>
    aa08:	b4 cd       	rjmp	.-1176   	; 0xa572 <mqtt_callback(char*, unsigned char*, unsigned int)+0x24c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  T result = 0;
  bool negative_result = false;

  switch (*s) {
    aa0a:	8b 32       	cpi	r24, 0x2B	; 43
    aa0c:	c9 f0       	breq	.+50     	; 0xaa40 <mqtt_callback(char*, unsigned char*, unsigned int)+0x71a>
    aa0e:	8d 32       	cpi	r24, 0x2D	; 45
    aa10:	c1 f4       	brne	.+48     	; 0xaa42 <mqtt_callback(char*, unsigned char*, unsigned int)+0x71c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:26
    case '-':
      negative_result = true;
      s++;
    aa12:	31 96       	adiw	r30, 0x01	; 1
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:25
  T result = 0;
  bool negative_result = false;

  switch (*s) {
    case '-':
      negative_result = true;
    aa14:	81 e0       	ldi	r24, 0x01	; 1
parseInteger():
    aa16:	70 e0       	ldi	r23, 0x00	; 0
    aa18:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
      s++;
      break;
  }

  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    aa1a:	4a e0       	ldi	r20, 0x0A	; 10
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
    aa1c:	91 91       	ld	r25, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    aa1e:	20 ed       	ldi	r18, 0xD0	; 208
    aa20:	29 0f       	add	r18, r25
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    aa22:	2a 30       	cpi	r18, 0x0A	; 10
    aa24:	80 f4       	brcc	.+32     	; 0xaa46 <mqtt_callback(char*, unsigned char*, unsigned int)+0x720>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
    result = T(result * 10 + T(*s - '0'));
    aa26:	46 9f       	mul	r20, r22
    aa28:	90 01       	movw	r18, r0
    aa2a:	47 9f       	mul	r20, r23
    aa2c:	30 0d       	add	r19, r0
    aa2e:	11 24       	eor	r1, r1
    aa30:	b9 01       	movw	r22, r18
    aa32:	60 53       	subi	r22, 0x30	; 48
    aa34:	71 09       	sbc	r23, r1
    aa36:	69 0f       	add	r22, r25
    aa38:	71 1d       	adc	r23, r1
    aa3a:	97 fd       	sbrc	r25, 7
    aa3c:	7a 95       	dec	r23
    aa3e:	ee cf       	rjmp	.-36     	; 0xaa1c <mqtt_callback(char*, unsigned char*, unsigned int)+0x6f6>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
    aa40:	31 96       	adiw	r30, 0x01	; 1
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
    aa42:	80 e0       	ldi	r24, 0x00	; 0
    aa44:	e8 cf       	rjmp	.-48     	; 0xaa16 <mqtt_callback(char*, unsigned char*, unsigned int)+0x6f0>
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    aa46:	81 11       	cpse	r24, r1
    aa48:	d0 cf       	rjmp	.-96     	; 0xa9ea <mqtt_callback(char*, unsigned char*, unsigned int)+0x6c4>
    aa4a:	c4 cf       	rjmp	.-120    	; 0xa9d4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x6ae>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1480
  {
    mqtt_process_message++;
    if (ntp_update(&timeClient, &rtc, time_get_offset()) == 1)
      cbi(selftest_data, SELFTEST_ERR_NTP); //TODO predelat na volani funkce
    else
      sbi(selftest_data, SELFTEST_ERR_NTP); //TODO predelat na volani funkce
    aa4c:	82 60       	ori	r24, 0x02	; 2
    aa4e:	9c ce       	rjmp	.-712    	; 0xa788 <mqtt_callback(char*, unsigned char*, unsigned int)+0x462>
tds_associate():
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:194
{
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if (tds_check_associate(id) == 255)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    aa50:	f3 94       	inc	r15
    aa52:	f6 e0       	ldi	r31, 0x06	; 6
    aa54:	ff 12       	cpse	r15, r31
    aa56:	12 cf       	rjmp	.-476    	; 0xa87c <mqtt_callback(char*, unsigned char*, unsigned int)+0x556>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:190
return w_rom[id].tds_idx;
}

uint8_t tds_associate(uint8_t id)
{
  uint8_t ret = 255;
    aa58:	ff 24       	eor	r15, r15
    aa5a:	fa 94       	dec	r15
    aa5c:	59 cf       	rjmp	.-334    	; 0xa910 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5ea>
tds_associate():
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:211
        ret = idx;
        break;
      }
    }
  }
  tds_update_associate();
    aa5e:	0e 94 4a 48 	call	0x9094	; 0x9094 <tds_update_associate()>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1500
  if (strcmp(str1, topic) == 0)
  {
    mqtt_process_message++;
    id = atoi(my_payload);
    if (tds_associate(id) == 255)
      log_error(&mqtt_client, "tds/associate full or bad id");
    aa62:	81 ed       	ldi	r24, 0xD1	; 209
    aa64:	93 e0       	ldi	r25, 0x03	; 3
    aa66:	0e 94 98 49 	call	0x9330	; 0x9330 <log_error(PubSubClient*, char*) [clone .constprop.70]>
    aa6a:	58 cf       	rjmp	.-336    	; 0xa91c <mqtt_callback(char*, unsigned char*, unsigned int)+0x5f6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1520
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    aa6c:	63 e1       	ldi	r22, 0x13	; 19
    aa6e:	74 e0       	ldi	r23, 0x04	; 4
    aa70:	c5 01       	movw	r24, r10
    aa72:	0e 94 49 80 	call	0x10092	; 0x10092 <strtok>
    aa76:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1519
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    aa78:	61 2c       	mov	r6, r1
tds_set_name():
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:70
//// nastavi nazev k tds cidlu
void tds_set_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
  strcpy(tds.name, name);
    aa7a:	b8 e4       	ldi	r27, 0x48	; 72
    aa7c:	eb 2e       	mov	r14, r27
    aa7e:	f1 2c       	mov	r15, r1
    aa80:	ec 0e       	add	r14, r28
    aa82:	fd 1e       	adc	r15, r29
    aa84:	fc e0       	ldi	r31, 0x0C	; 12
    aa86:	ef 0e       	add	r14, r31
    aa88:	f1 1c       	adc	r15, r1
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1521
    pch = strtok (str1, "/");
    while (pch != NULL)
    aa8a:	01 15       	cp	r16, r1
    aa8c:	11 05       	cpc	r17, r1
    aa8e:	09 f4       	brne	.+2      	; 0xaa92 <mqtt_callback(char*, unsigned char*, unsigned int)+0x76c>
    aa90:	6d c0       	rjmp	.+218    	; 0xab6c <mqtt_callback(char*, unsigned char*, unsigned int)+0x846>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1523
    {
      if (cnt == 0) id = atoi(pch);
    aa92:	61 10       	cpse	r6, r1
    aa94:	0d c0       	rjmp	.+26     	; 0xaab0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x78a>
    aa96:	c8 01       	movw	r24, r16
    aa98:	0e 94 10 80 	call	0x10020	; 0x10020 <atoi>
    aa9c:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1524
      if (id < HW_ONEWIRE_MAXROMS)
    aa9e:	25 e0       	ldi	r18, 0x05	; 5
    aaa0:	28 17       	cp	r18, r24
    aaa2:	08 f0       	brcs	.+2      	; 0xaaa6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x780>
    aaa4:	5a c0       	rjmp	.+180    	; 0xab5a <mqtt_callback(char*, unsigned char*, unsigned int)+0x834>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1532
        if ((cnt == 1) && (strcmp(pch, "offset") == 0)) tds_set_offset(id, atoi(my_payload));
        if ((cnt == 1) && (strcmp(pch, "period") == 0)) tds_set_period(id, atoi(my_payload));
      }
      else
      {
        log_error(&mqtt_client, "tds/set bad id");
    aaa6:	86 e1       	ldi	r24, 0x16	; 22
    aaa8:	94 e0       	ldi	r25, 0x04	; 4
    aaaa:	0e 94 98 49 	call	0x9330	; 0x9330 <log_error(PubSubClient*, char*) [clone .constprop.70]>
    aaae:	55 c0       	rjmp	.+170    	; 0xab5a <mqtt_callback(char*, unsigned char*, unsigned int)+0x834>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1524
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < HW_ONEWIRE_MAXROMS)
    aab0:	35 e0       	ldi	r19, 0x05	; 5
    aab2:	37 15       	cp	r19, r7
    aab4:	c0 f3       	brcs	.-16     	; 0xaaa6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x780>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1526
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0)) tds_set_name(id, my_payload);
    aab6:	81 e0       	ldi	r24, 0x01	; 1
    aab8:	68 12       	cpse	r6, r24
    aaba:	4f c0       	rjmp	.+158    	; 0xab5a <mqtt_callback(char*, unsigned char*, unsigned int)+0x834>
    aabc:	64 e0       	ldi	r22, 0x04	; 4
    aabe:	76 e0       	ldi	r23, 0x06	; 6
    aac0:	c8 01       	movw	r24, r16
    aac2:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
    aac6:	89 2b       	or	r24, r25
    aac8:	89 f4       	brne	.+34     	; 0xaaec <mqtt_callback(char*, unsigned char*, unsigned int)+0x7c6>
tds_set_name():
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:69
}
//// nastavi nazev k tds cidlu
void tds_set_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    aaca:	be 01       	movw	r22, r28
    aacc:	68 5b       	subi	r22, 0xB8	; 184
    aace:	7f 4f       	sbci	r23, 0xFF	; 255
    aad0:	87 2d       	mov	r24, r7
    aad2:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:70
  strcpy(tds.name, name);
    aad6:	6a e4       	ldi	r22, 0x4A	; 74
    aad8:	7e e0       	ldi	r23, 0x0E	; 14
    aada:	c7 01       	movw	r24, r14
    aadc:	0e 94 c8 8c 	call	0x11990	; 0x11990 <strcpy>
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:71
  set_tds18s20(idx, &tds);
    aae0:	be 01       	movw	r22, r28
    aae2:	68 5b       	subi	r22, 0xB8	; 184
    aae4:	7f 4f       	sbci	r23, 0xFF	; 255
    aae6:	87 2d       	mov	r24, r7
    aae8:	0e 94 5c 46 	call	0x8cb8	; 0x8cb8 <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1527
        if ((cnt == 1) && (strcmp(pch, "offset") == 0)) tds_set_offset(id, atoi(my_payload));
    aaec:	66 e7       	ldi	r22, 0x76	; 118
    aaee:	78 e0       	ldi	r23, 0x08	; 8
    aaf0:	c8 01       	movw	r24, r16
    aaf2:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
    aaf6:	89 2b       	or	r24, r25
    aaf8:	a9 f4       	brne	.+42     	; 0xab24 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7fe>
    aafa:	8a e4       	ldi	r24, 0x4A	; 74
    aafc:	9e e0       	ldi	r25, 0x0E	; 14
    aafe:	0e 94 10 80 	call	0x10020	; 0x10020 <atoi>
    ab02:	6c 01       	movw	r12, r24
tds_set_offset():
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:77
}
//// funkce nastavi offset cidlu tds
void tds_set_offset(uint8_t idx, int offset)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    ab04:	be 01       	movw	r22, r28
    ab06:	68 5b       	subi	r22, 0xB8	; 184
    ab08:	7f 4f       	sbci	r23, 0xFF	; 255
    ab0a:	87 2d       	mov	r24, r7
    ab0c:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:78
  tds.offset = offset;
    ab10:	64 96       	adiw	r28, 0x14	; 20
    ab12:	df ae       	std	Y+63, r13	; 0x3f
    ab14:	ce ae       	std	Y+62, r12	; 0x3e
    ab16:	64 97       	sbiw	r28, 0x14	; 20
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:79
  set_tds18s20(idx, &tds);
    ab18:	be 01       	movw	r22, r28
    ab1a:	68 5b       	subi	r22, 0xB8	; 184
    ab1c:	7f 4f       	sbci	r23, 0xFF	; 255
    ab1e:	87 2d       	mov	r24, r7
    ab20:	0e 94 5c 46 	call	0x8cb8	; 0x8cb8 <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1528
        if ((cnt == 1) && (strcmp(pch, "period") == 0)) tds_set_period(id, atoi(my_payload));
    ab24:	63 e7       	ldi	r22, 0x73	; 115
    ab26:	76 e0       	ldi	r23, 0x06	; 6
    ab28:	c8 01       	movw	r24, r16
    ab2a:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
    ab2e:	89 2b       	or	r24, r25
    ab30:	a1 f4       	brne	.+40     	; 0xab5a <mqtt_callback(char*, unsigned char*, unsigned int)+0x834>
    ab32:	8a e4       	ldi	r24, 0x4A	; 74
    ab34:	9e e0       	ldi	r25, 0x0E	; 14
    ab36:	0e 94 10 80 	call	0x10020	; 0x10020 <atoi>
    ab3a:	18 2f       	mov	r17, r24
tds_set_period():
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:93
///////
//// funkce nastavi periodu mereni
void tds_set_period(uint8_t idx, uint8_t period)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    ab3c:	be 01       	movw	r22, r28
    ab3e:	68 5b       	subi	r22, 0xB8	; 184
    ab40:	7f 4f       	sbci	r23, 0xFF	; 255
    ab42:	87 2d       	mov	r24, r7
    ab44:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <get_tds18s20(unsigned char, struct_DDS18s20*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1528
    ab48:	6d 96       	adiw	r28, 0x1d	; 29
    ab4a:	1f af       	std	Y+63, r17	; 0x3f
    ab4c:	6d 97       	sbiw	r28, 0x1d	; 29
tds_set_period():
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:95
  tds.period = period;
  set_tds18s20(idx, &tds);
    ab4e:	be 01       	movw	r22, r28
    ab50:	68 5b       	subi	r22, 0xB8	; 184
    ab52:	7f 4f       	sbci	r23, 0xFF	; 255
    ab54:	87 2d       	mov	r24, r7
    ab56:	0e 94 5c 46 	call	0x8cb8	; 0x8cb8 <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1534
      }
      else
      {
        log_error(&mqtt_client, "tds/set bad id");
      }
      pch = strtok (NULL, "/");
    ab5a:	63 e1       	ldi	r22, 0x13	; 19
    ab5c:	74 e0       	ldi	r23, 0x04	; 4
    ab5e:	90 e0       	ldi	r25, 0x00	; 0
    ab60:	80 e0       	ldi	r24, 0x00	; 0
    ab62:	0e 94 49 80 	call	0x10092	; 0x10092 <strtok>
    ab66:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1535
      cnt++;
    ab68:	63 94       	inc	r6
    ab6a:	8f cf       	rjmp	.-226    	; 0xaa8a <mqtt_callback(char*, unsigned char*, unsigned int)+0x764>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1540
    }
  }
  ////
  //// /thermctl-in/XXXX/tds/clear
  strcpy_P(str1, thermctl_header_in);
    ab6c:	6c ea       	ldi	r22, 0xAC	; 172
    ab6e:	74 e1       	ldi	r23, 0x14	; 20
    ab70:	c5 01       	movw	r24, r10
    ab72:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1541
  strcat(str1, device.nazev);
    ab76:	6c e2       	ldi	r22, 0x2C	; 44
    ab78:	70 e1       	ldi	r23, 0x10	; 16
    ab7a:	c5 01       	movw	r24, r10
    ab7c:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1542
  strcat(str1, "/tds/clear");
    ab80:	68 ef       	ldi	r22, 0xF8	; 248
    ab82:	73 e0       	ldi	r23, 0x03	; 3
    ab84:	c5 01       	movw	r24, r10
    ab86:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1543
  if (strncmp(str1, topic, strlen(str1)) == 0)
    ab8a:	f5 01       	movw	r30, r10
    ab8c:	01 90       	ld	r0, Z+
    ab8e:	00 20       	and	r0, r0
    ab90:	e9 f7       	brne	.-6      	; 0xab8c <mqtt_callback(char*, unsigned char*, unsigned int)+0x866>
    ab92:	31 97       	sbiw	r30, 0x01	; 1
    ab94:	af 01       	movw	r20, r30
    ab96:	4a 19       	sub	r20, r10
    ab98:	5b 09       	sbc	r21, r11
    ab9a:	b4 01       	movw	r22, r8
    ab9c:	c5 01       	movw	r24, r10
    ab9e:	0e 94 df 8c 	call	0x119be	; 0x119be <strncmp>
    aba2:	89 2b       	or	r24, r25
    aba4:	09 f0       	breq	.+2      	; 0xaba8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x882>
    aba6:	4e c0       	rjmp	.+156    	; 0xac44 <mqtt_callback(char*, unsigned char*, unsigned int)+0x91e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1545
  {
    mqtt_process_message++;
    aba8:	80 91 be 0b 	lds	r24, 0x0BBE	; 0x800bbe <mqtt_process_message>
    abac:	90 91 bf 0b 	lds	r25, 0x0BBF	; 0x800bbf <mqtt_process_message+0x1>
    abb0:	01 96       	adiw	r24, 0x01	; 1
    abb2:	90 93 bf 0b 	sts	0x0BBF, r25	; 0x800bbf <mqtt_process_message+0x1>
    abb6:	80 93 be 0b 	sts	0x0BBE, r24	; 0x800bbe <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1546
    id = atoi(my_payload);
    abba:	8a e4       	ldi	r24, 0x4A	; 74
    abbc:	9e e0       	ldi	r25, 0x0E	; 14
    abbe:	0e 94 10 80 	call	0x10020	; 0x10020 <atoi>
    abc2:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1547
    if (id < HW_ONEWIRE_MAXROMS)
    abc4:	a5 e0       	ldi	r26, 0x05	; 5
    abc6:	a8 17       	cp	r26, r24
    abc8:	08 f4       	brcc	.+2      	; 0xabcc <mqtt_callback(char*, unsigned char*, unsigned int)+0x8a6>
    abca:	86 c0       	rjmp	.+268    	; 0xacd8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9b2>
tds_set_clear():
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:109

//// funkce vymaze associovane 1wire -> tds
void tds_set_clear(uint8_t idx)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    abcc:	be 01       	movw	r22, r28
    abce:	68 5b       	subi	r22, 0xB8	; 184
    abd0:	7f 4f       	sbci	r23, 0xFF	; 255
    abd2:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:110
  tds.used = 0;
    abd6:	29 96       	adiw	r28, 0x09	; 9
    abd8:	1f ae       	std	Y+63, r1	; 0x3f
    abda:	29 97       	sbiw	r28, 0x09	; 9
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:111
  strcpy(tds.name, "FREE");
    abdc:	6e e1       	ldi	r22, 0x1E	; 30
    abde:	73 e0       	ldi	r23, 0x03	; 3
    abe0:	88 e4       	ldi	r24, 0x48	; 72
    abe2:	90 e0       	ldi	r25, 0x00	; 0
    abe4:	8c 0f       	add	r24, r28
    abe6:	9d 1f       	adc	r25, r29
    abe8:	0c 96       	adiw	r24, 0x0c	; 12
    abea:	0e 94 c8 8c 	call	0x11990	; 0x11990 <strcpy>
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:112
  tds.offset = 0;
    abee:	64 96       	adiw	r28, 0x14	; 20
    abf0:	1f ae       	std	Y+63, r1	; 0x3f
    abf2:	1e ae       	std	Y+62, r1	; 0x3e
    abf4:	64 97       	sbiw	r28, 0x14	; 20
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:113
  tds.period = 10;
    abf6:	8a e0       	ldi	r24, 0x0A	; 10
    abf8:	6d 96       	adiw	r28, 0x1d	; 29
    abfa:	8f af       	std	Y+63, r24	; 0x3f
    abfc:	6d 97       	sbiw	r28, 0x1d	; 29
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:115
  for (uint8_t i = 0; i < 8; i++)
    tds.rom[i] = 0;
    abfe:	2a 96       	adiw	r28, 0x0a	; 10
    ac00:	1f ae       	std	Y+63, r1	; 0x3f
    ac02:	2a 97       	sbiw	r28, 0x0a	; 10
    ac04:	2b 96       	adiw	r28, 0x0b	; 11
    ac06:	1f ae       	std	Y+63, r1	; 0x3f
    ac08:	2b 97       	sbiw	r28, 0x0b	; 11
    ac0a:	2c 96       	adiw	r28, 0x0c	; 12
    ac0c:	1f ae       	std	Y+63, r1	; 0x3f
    ac0e:	2c 97       	sbiw	r28, 0x0c	; 12
    ac10:	2d 96       	adiw	r28, 0x0d	; 13
    ac12:	1f ae       	std	Y+63, r1	; 0x3f
    ac14:	2d 97       	sbiw	r28, 0x0d	; 13
    ac16:	2e 96       	adiw	r28, 0x0e	; 14
    ac18:	1f ae       	std	Y+63, r1	; 0x3f
    ac1a:	2e 97       	sbiw	r28, 0x0e	; 14
    ac1c:	2f 96       	adiw	r28, 0x0f	; 15
    ac1e:	1f ae       	std	Y+63, r1	; 0x3f
    ac20:	2f 97       	sbiw	r28, 0x0f	; 15
    ac22:	60 96       	adiw	r28, 0x10	; 16
    ac24:	1f ae       	std	Y+63, r1	; 0x3f
    ac26:	60 97       	sbiw	r28, 0x10	; 16
    ac28:	61 96       	adiw	r28, 0x11	; 17
    ac2a:	1f ae       	std	Y+63, r1	; 0x3f
    ac2c:	61 97       	sbiw	r28, 0x11	; 17
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:116
  tds.assigned_ds2482 = 0;
    ac2e:	62 96       	adiw	r28, 0x12	; 18
    ac30:	1f ae       	std	Y+63, r1	; 0x3f
    ac32:	62 97       	sbiw	r28, 0x12	; 18
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:117
  set_tds18s20(idx, &tds);
    ac34:	be 01       	movw	r22, r28
    ac36:	68 5b       	subi	r22, 0xB8	; 184
    ac38:	7f 4f       	sbci	r23, 0xFF	; 255
    ac3a:	87 2d       	mov	r24, r7
    ac3c:	0e 94 5c 46 	call	0x8cb8	; 0x8cb8 <set_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:118
  tds_update_associate();
    ac40:	0e 94 4a 48 	call	0x9094	; 0x9094 <tds_update_associate()>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1556
  }
  ////////
  ////////
  /// nastavovani vlastnosti RTDS ///
  //// thermctl-in/XXXXX/rtds/set/IDX/name - 8 znaku nastavi a udela prihlaseni
  strcpy_P(str1, thermctl_header_in);
    ac44:	6c ea       	ldi	r22, 0xAC	; 172
    ac46:	74 e1       	ldi	r23, 0x14	; 20
    ac48:	c5 01       	movw	r24, r10
    ac4a:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1557
  strcat(str1, device.nazev);
    ac4e:	6c e2       	ldi	r22, 0x2C	; 44
    ac50:	70 e1       	ldi	r23, 0x10	; 16
    ac52:	c5 01       	movw	r24, r10
    ac54:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1558
  strcat(str1, "/rtds/set/");
    ac58:	63 e0       	ldi	r22, 0x03	; 3
    ac5a:	74 e0       	ldi	r23, 0x04	; 4
    ac5c:	c5 01       	movw	r24, r10
    ac5e:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1559
  if (strncmp(str1, topic, strlen(str1)) == 0)
    ac62:	f5 01       	movw	r30, r10
    ac64:	01 90       	ld	r0, Z+
    ac66:	00 20       	and	r0, r0
    ac68:	e9 f7       	brne	.-6      	; 0xac64 <mqtt_callback(char*, unsigned char*, unsigned int)+0x93e>
    ac6a:	31 97       	sbiw	r30, 0x01	; 1
    ac6c:	af 01       	movw	r20, r30
    ac6e:	4a 19       	sub	r20, r10
    ac70:	5b 09       	sbc	r21, r11
    ac72:	b4 01       	movw	r22, r8
    ac74:	c5 01       	movw	r24, r10
    ac76:	0e 94 df 8c 	call	0x119be	; 0x119be <strncmp>
    ac7a:	89 2b       	or	r24, r25
    ac7c:	09 f0       	breq	.+2      	; 0xac80 <mqtt_callback(char*, unsigned char*, unsigned int)+0x95a>
    ac7e:	94 c0       	rjmp	.+296    	; 0xada8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa82>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1561
  {
    mqtt_process_message++;
    ac80:	80 91 be 0b 	lds	r24, 0x0BBE	; 0x800bbe <mqtt_process_message>
    ac84:	90 91 bf 0b 	lds	r25, 0x0BBF	; 0x800bbf <mqtt_process_message+0x1>
    ac88:	01 96       	adiw	r24, 0x01	; 1
    ac8a:	90 93 bf 0b 	sts	0x0BBF, r25	; 0x800bbf <mqtt_process_message+0x1>
    ac8e:	80 93 be 0b 	sts	0x0BBE, r24	; 0x800bbe <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1563
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    ac92:	f5 01       	movw	r30, r10
    ac94:	01 90       	ld	r0, Z+
    ac96:	00 20       	and	r0, r0
    ac98:	e9 f7       	brne	.-6      	; 0xac94 <mqtt_callback(char*, unsigned char*, unsigned int)+0x96e>
    ac9a:	31 97       	sbiw	r30, 0x01	; 1
    ac9c:	ea 19       	sub	r30, r10
    ac9e:	fb 09       	sbc	r31, r11
    aca0:	9e 2f       	mov	r25, r30
    aca2:	4e 2f       	mov	r20, r30
    aca4:	84 2f       	mov	r24, r20
    aca6:	89 1b       	sub	r24, r25
    aca8:	24 2f       	mov	r18, r20
    acaa:	30 e0       	ldi	r19, 0x00	; 0
    acac:	d4 01       	movw	r26, r8
    acae:	0d 90       	ld	r0, X+
    acb0:	00 20       	and	r0, r0
    acb2:	e9 f7       	brne	.-6      	; 0xacae <mqtt_callback(char*, unsigned char*, unsigned int)+0x988>
    acb4:	11 97       	sbiw	r26, 0x01	; 1
    acb6:	a8 19       	sub	r26, r8
    acb8:	b9 09       	sbc	r27, r9
    acba:	2a 17       	cp	r18, r26
    acbc:	3b 07       	cpc	r19, r27
    acbe:	88 f4       	brcc	.+34     	; 0xace2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9bc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1565
    {
      str1[cnt] = topic[f];
    acc0:	d5 01       	movw	r26, r10
    acc2:	a8 0f       	add	r26, r24
    acc4:	b1 1d       	adc	r27, r1
    acc6:	28 0d       	add	r18, r8
    acc8:	39 1d       	adc	r19, r9
    acca:	f9 01       	movw	r30, r18
    accc:	80 81       	ld	r24, Z
    acce:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1566
      str1[cnt + 1] = 0;
    acd0:	11 96       	adiw	r26, 0x01	; 1
    acd2:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1563
  strcat(str1, "/rtds/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    acd4:	4f 5f       	subi	r20, 0xFF	; 255
    acd6:	e6 cf       	rjmp	.-52     	; 0xaca4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x97e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1550
    mqtt_process_message++;
    id = atoi(my_payload);
    if (id < HW_ONEWIRE_MAXROMS)
      tds_set_clear(id);
    else
      log_error(&mqtt_client, "tds/clear bad id");
    acd8:	82 e3       	ldi	r24, 0x32	; 50
    acda:	94 e0       	ldi	r25, 0x04	; 4
    acdc:	0e 94 98 49 	call	0x9330	; 0x9330 <log_error(PubSubClient*, char*) [clone .constprop.70]>
    ace0:	b1 cf       	rjmp	.-158    	; 0xac44 <mqtt_callback(char*, unsigned char*, unsigned int)+0x91e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1570
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    ace2:	63 e1       	ldi	r22, 0x13	; 19
    ace4:	74 e0       	ldi	r23, 0x04	; 4
    ace6:	c5 01       	movw	r24, r10
    ace8:	0e 94 49 80 	call	0x10092	; 0x10092 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1569
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    acec:	10 e0       	ldi	r17, 0x00	; 0
remote_tds_get_active():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1331
}
///
/// je aktivni
void remote_tds_get_active(uint8_t idx, uint8_t *active)
{
  *active = EEPROM.read(remote_tds_name0 + (10 * idx) + 9);
    acee:	0a e0       	ldi	r16, 0x0A	; 10
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1571
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    acf0:	00 97       	sbiw	r24, 0x00	; 0
    acf2:	09 f4       	brne	.+2      	; 0xacf6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9d0>
    acf4:	59 c0       	rjmp	.+178    	; 0xada8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa82>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1573
    {
      if (cnt == 0) id = atoi(pch);
    acf6:	11 11       	cpse	r17, r1
    acf8:	0c c0       	rjmp	.+24     	; 0xad12 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9ec>
    acfa:	0e 94 10 80 	call	0x10020	; 0x10020 <atoi>
    acfe:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1574
      if (id < MAX_RTDS)
    ad00:	f4 e0       	ldi	r31, 0x04	; 4
    ad02:	f8 17       	cp	r31, r24
    ad04:	08 f0       	brcs	.+2      	; 0xad08 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9e2>
    ad06:	48 c0       	rjmp	.+144    	; 0xad98 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa72>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1588
          }
        }
      }
      else
      {
        log_error(&mqtt_client, "rtds/set bad id");
    ad08:	85 e1       	ldi	r24, 0x15	; 21
    ad0a:	94 e0       	ldi	r25, 0x04	; 4
    ad0c:	0e 94 98 49 	call	0x9330	; 0x9330 <log_error(PubSubClient*, char*) [clone .constprop.70]>
    ad10:	43 c0       	rjmp	.+134    	; 0xad98 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa72>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1574
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < MAX_RTDS)
    ad12:	24 e0       	ldi	r18, 0x04	; 4
    ad14:	27 15       	cp	r18, r7
    ad16:	c0 f3       	brcs	.-16     	; 0xad08 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1576
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0))
    ad18:	11 30       	cpi	r17, 0x01	; 1
    ad1a:	f1 f5       	brne	.+124    	; 0xad98 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa72>
    ad1c:	64 e0       	ldi	r22, 0x04	; 4
    ad1e:	76 e0       	ldi	r23, 0x06	; 6
    ad20:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
    ad24:	89 2b       	or	r24, r25
    ad26:	c1 f5       	brne	.+112    	; 0xad98 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa72>
remote_tds_get_active():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1331
}
///
/// je aktivni
void remote_tds_get_active(uint8_t idx, uint8_t *active)
{
  *active = EEPROM.read(remote_tds_name0 + (10 * idx) + 9);
    ad28:	70 9e       	mul	r7, r16
    ad2a:	c0 01       	movw	r24, r0
    ad2c:	11 24       	eor	r1, r1
    ad2e:	8d 54       	subi	r24, 0x4D	; 77
    ad30:	9a 4f       	sbci	r25, 0xFA	; 250
    ad32:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1579
      if (id < MAX_RTDS)
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0))
        {
          remote_tds_get_active(id, &active);
          if (active == 0)
    ad36:	81 11       	cpse	r24, r1
    ad38:	2f c0       	rjmp	.+94     	; 0xad98 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa72>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1581
          {
            remote_tds_set_name(id, 1, my_payload);
    ad3a:	4a e4       	ldi	r20, 0x4A	; 74
    ad3c:	5e e0       	ldi	r21, 0x0E	; 14
    ad3e:	61 e0       	ldi	r22, 0x01	; 1
    ad40:	87 2d       	mov	r24, r7
    ad42:	0e 94 76 47 	call	0x8eec	; 0x8eec <remote_tds_set_name(unsigned char, unsigned char, char*)>
remote_tds_subscibe_topic():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1342
*/
void remote_tds_subscibe_topic(uint8_t idx)
{
  char tmp1[64];
  char tmp2[64];
  uint8_t active = 0;
    ad46:	c8 5f       	subi	r28, 0xF8	; 248
    ad48:	de 4f       	sbci	r29, 0xFE	; 254
    ad4a:	18 82       	st	Y, r1
    ad4c:	c8 50       	subi	r28, 0x08	; 8
    ad4e:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1343
  remote_tds_get_name(idx, &active, tmp1);
    ad50:	ae 01       	movw	r20, r28
    ad52:	48 57       	subi	r20, 0x78	; 120
    ad54:	5f 4f       	sbci	r21, 0xFF	; 255
    ad56:	be 01       	movw	r22, r28
    ad58:	68 5f       	subi	r22, 0xF8	; 248
    ad5a:	7e 4f       	sbci	r23, 0xFE	; 254
    ad5c:	87 2d       	mov	r24, r7
    ad5e:	0e 94 3e 4b 	call	0x967c	; 0x967c <remote_tds_get_name(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1344
  if (active == 1)
    ad62:	c8 5f       	subi	r28, 0xF8	; 248
    ad64:	de 4f       	sbci	r29, 0xFE	; 254
    ad66:	88 81       	ld	r24, Y
    ad68:	c8 50       	subi	r28, 0x08	; 8
    ad6a:	d1 40       	sbci	r29, 0x01	; 1
    ad6c:	81 30       	cpi	r24, 0x01	; 1
    ad6e:	a1 f4       	brne	.+40     	; 0xad98 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa72>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1346
  {
    strcpy(tmp2, "/rtds/");
    ad70:	6e e0       	ldi	r22, 0x0E	; 14
    ad72:	74 e0       	ldi	r23, 0x04	; 4
    ad74:	ce 01       	movw	r24, r28
    ad76:	88 5b       	subi	r24, 0xB8	; 184
    ad78:	9f 4f       	sbci	r25, 0xFF	; 255
    ad7a:	0e 94 c8 8c 	call	0x11990	; 0x11990 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1347
    strcat(tmp2, tmp1);
    ad7e:	be 01       	movw	r22, r28
    ad80:	68 57       	subi	r22, 0x78	; 120
    ad82:	7f 4f       	sbci	r23, 0xFF	; 255
    ad84:	ce 01       	movw	r24, r28
    ad86:	88 5b       	subi	r24, 0xB8	; 184
    ad88:	9f 4f       	sbci	r25, 0xFF	; 255
    ad8a:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1348
    mqtt_client.subscribe(tmp2);
    ad8e:	ce 01       	movw	r24, r28
    ad90:	88 5b       	subi	r24, 0xB8	; 184
    ad92:	9f 4f       	sbci	r25, 0xFF	; 255
    ad94:	0e 94 c0 2f 	call	0x5f80	; 0x5f80 <PubSubClient::subscribe(char const*) [clone .constprop.154]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1590
      }
      else
      {
        log_error(&mqtt_client, "rtds/set bad id");
      }
      pch = strtok (NULL, "/");
    ad98:	63 e1       	ldi	r22, 0x13	; 19
    ad9a:	74 e0       	ldi	r23, 0x04	; 4
    ad9c:	90 e0       	ldi	r25, 0x00	; 0
    ad9e:	80 e0       	ldi	r24, 0x00	; 0
    ada0:	0e 94 49 80 	call	0x10092	; 0x10092 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1591
      cnt++;
    ada4:	1f 5f       	subi	r17, 0xFF	; 255
    ada6:	a4 cf       	rjmp	.-184    	; 0xacf0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9ca>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1596
    }
  }
  ////
  //// /thermctl-in/XXXX/rtds/clear index vymaze a odhlasi
  strcpy_P(str1, thermctl_header_in);
    ada8:	6c ea       	ldi	r22, 0xAC	; 172
    adaa:	74 e1       	ldi	r23, 0x14	; 20
    adac:	c5 01       	movw	r24, r10
    adae:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1597
  strcat(str1, device.nazev);
    adb2:	6c e2       	ldi	r22, 0x2C	; 44
    adb4:	70 e1       	ldi	r23, 0x10	; 16
    adb6:	c5 01       	movw	r24, r10
    adb8:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1598
  strcat(str1, "/rtds/clear");
    adbc:	65 e2       	ldi	r22, 0x25	; 37
    adbe:	74 e0       	ldi	r23, 0x04	; 4
    adc0:	c5 01       	movw	r24, r10
    adc2:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1599
  if (strncmp(str1, topic, strlen(str1)) == 0)
    adc6:	f5 01       	movw	r30, r10
    adc8:	01 90       	ld	r0, Z+
    adca:	00 20       	and	r0, r0
    adcc:	e9 f7       	brne	.-6      	; 0xadc8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xaa2>
    adce:	31 97       	sbiw	r30, 0x01	; 1
    add0:	af 01       	movw	r20, r30
    add2:	4a 19       	sub	r20, r10
    add4:	5b 09       	sbc	r21, r11
    add6:	b4 01       	movw	r22, r8
    add8:	c5 01       	movw	r24, r10
    adda:	0e 94 df 8c 	call	0x119be	; 0x119be <strncmp>
    adde:	89 2b       	or	r24, r25
    ade0:	09 f0       	breq	.+2      	; 0xade4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xabe>
    ade2:	76 c0       	rjmp	.+236    	; 0xaed0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xbaa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1601
  {
    mqtt_process_message++;
    ade4:	80 91 be 0b 	lds	r24, 0x0BBE	; 0x800bbe <mqtt_process_message>
    ade8:	90 91 bf 0b 	lds	r25, 0x0BBF	; 0x800bbf <mqtt_process_message+0x1>
    adec:	01 96       	adiw	r24, 0x01	; 1
    adee:	90 93 bf 0b 	sts	0x0BBF, r25	; 0x800bbf <mqtt_process_message+0x1>
    adf2:	80 93 be 0b 	sts	0x0BBE, r24	; 0x800bbe <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1602
    id = atoi(my_payload);
    adf6:	8a e4       	ldi	r24, 0x4A	; 74
    adf8:	9e e0       	ldi	r25, 0x0E	; 14
    adfa:	0e 94 10 80 	call	0x10020	; 0x10020 <atoi>
    adfe:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1603
    if (id < MAX_RTDS)
    ae00:	34 e0       	ldi	r19, 0x04	; 4
    ae02:	38 17       	cp	r19, r24
    ae04:	08 f4       	brcc	.+2      	; 0xae08 <mqtt_callback(char*, unsigned char*, unsigned int)+0xae2>
    ae06:	10 c1       	rjmp	.+544    	; 0xb028 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd02>
remote_tds_unsubscibe_topic():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1357
/// funkce pro zruseni odebirani topicu vzdalenych cidel
void remote_tds_unsubscibe_topic(uint8_t idx)
{
  char tmp1[64];
  char tmp2[64];
  uint8_t active = 0;
    ae08:	c8 5f       	subi	r28, 0xF8	; 248
    ae0a:	de 4f       	sbci	r29, 0xFE	; 254
    ae0c:	18 82       	st	Y, r1
    ae0e:	c8 50       	subi	r28, 0x08	; 8
    ae10:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1358
  remote_tds_get_name(idx, &active, tmp1);
    ae12:	ae 01       	movw	r20, r28
    ae14:	48 57       	subi	r20, 0x78	; 120
    ae16:	5f 4f       	sbci	r21, 0xFF	; 255
    ae18:	be 01       	movw	r22, r28
    ae1a:	68 5f       	subi	r22, 0xF8	; 248
    ae1c:	7e 4f       	sbci	r23, 0xFE	; 254
    ae1e:	0e 94 3e 4b 	call	0x967c	; 0x967c <remote_tds_get_name(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1359
  if (active == 1)
    ae22:	c8 5f       	subi	r28, 0xF8	; 248
    ae24:	de 4f       	sbci	r29, 0xFE	; 254
    ae26:	88 81       	ld	r24, Y
    ae28:	c8 50       	subi	r28, 0x08	; 8
    ae2a:	d1 40       	sbci	r29, 0x01	; 1
    ae2c:	81 30       	cpi	r24, 0x01	; 1
    ae2e:	09 f0       	breq	.+2      	; 0xae32 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb0c>
    ae30:	49 c0       	rjmp	.+146    	; 0xaec4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb9e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1361
  {
    strcpy(tmp2, "/rtds/");
    ae32:	8e 01       	movw	r16, r28
    ae34:	08 5b       	subi	r16, 0xB8	; 184
    ae36:	1f 4f       	sbci	r17, 0xFF	; 255
    ae38:	6e e0       	ldi	r22, 0x0E	; 14
    ae3a:	74 e0       	ldi	r23, 0x04	; 4
    ae3c:	c8 01       	movw	r24, r16
    ae3e:	0e 94 c8 8c 	call	0x11990	; 0x11990 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1362
    strcat(tmp2, tmp1);
    ae42:	be 01       	movw	r22, r28
    ae44:	68 57       	subi	r22, 0x78	; 120
    ae46:	7f 4f       	sbci	r23, 0xFF	; 255
    ae48:	c8 01       	movw	r24, r16
    ae4a:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
unsubscribe():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:497
    }
    return false;
}

boolean PubSubClient::unsubscribe(const char* topic) {
    if (MQTT_MAX_PACKET_SIZE < 9 + strlen(topic)) {
    ae4e:	d8 01       	movw	r26, r16
    ae50:	0d 90       	ld	r0, X+
    ae52:	00 20       	and	r0, r0
    ae54:	e9 f7       	brne	.-6      	; 0xae50 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb2a>
    ae56:	cd 01       	movw	r24, r26
    ae58:	80 1b       	sub	r24, r16
    ae5a:	91 0b       	sbc	r25, r17
    ae5c:	08 96       	adiw	r24, 0x08	; 8
    ae5e:	81 30       	cpi	r24, 0x01	; 1
    ae60:	92 40       	sbci	r25, 0x02	; 2
    ae62:	80 f5       	brcc	.+96     	; 0xaec4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb9e>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:501
        // Too long
        return false;
    }
    if (connected()) {
    ae64:	81 eb       	ldi	r24, 0xB1	; 177
    ae66:	93 e1       	ldi	r25, 0x13	; 19
    ae68:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <PubSubClient::connected()>
    ae6c:	88 23       	and	r24, r24
    ae6e:	51 f1       	breq	.+84     	; 0xaec4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb9e>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:503
        uint16_t length = 5;
        nextMsgId++;
    ae70:	80 91 b3 15 	lds	r24, 0x15B3	; 0x8015b3 <mqtt_client+0x202>
    ae74:	90 91 b4 15 	lds	r25, 0x15B4	; 0x8015b4 <mqtt_client+0x203>
    ae78:	01 96       	adiw	r24, 0x01	; 1
    ae7a:	90 93 b4 15 	sts	0x15B4, r25	; 0x8015b4 <mqtt_client+0x203>
    ae7e:	80 93 b3 15 	sts	0x15B3, r24	; 0x8015b3 <mqtt_client+0x202>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:504
        if (nextMsgId == 0) {
    ae82:	89 2b       	or	r24, r25
    ae84:	31 f4       	brne	.+12     	; 0xae92 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb6c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:505
            nextMsgId = 1;
    ae86:	81 e0       	ldi	r24, 0x01	; 1
    ae88:	90 e0       	ldi	r25, 0x00	; 0
    ae8a:	90 93 b4 15 	sts	0x15B4, r25	; 0x8015b4 <mqtt_client+0x203>
    ae8e:	80 93 b3 15 	sts	0x15B3, r24	; 0x8015b3 <mqtt_client+0x202>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:507
        }
        buffer[length++] = (nextMsgId >> 8);
    ae92:	80 91 b3 15 	lds	r24, 0x15B3	; 0x8015b3 <mqtt_client+0x202>
    ae96:	90 91 b4 15 	lds	r25, 0x15B4	; 0x8015b4 <mqtt_client+0x203>
    ae9a:	90 93 b8 13 	sts	0x13B8, r25	; 0x8013b8 <mqtt_client+0x7>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:508
        buffer[length++] = (nextMsgId & 0xFF);
    ae9e:	80 93 b9 13 	sts	0x13B9, r24	; 0x8013b9 <mqtt_client+0x8>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:509
        length = writeString(topic, buffer,length);
    aea2:	47 e0       	ldi	r20, 0x07	; 7
    aea4:	50 e0       	ldi	r21, 0x00	; 0
    aea6:	63 eb       	ldi	r22, 0xB3	; 179
    aea8:	73 e1       	ldi	r23, 0x13	; 19
    aeaa:	c8 01       	movw	r24, r16
    aeac:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.157]>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:510
        return write(MQTTUNSUBSCRIBE|MQTTQOS1,buffer,length-5);
    aeb0:	9c 01       	movw	r18, r24
    aeb2:	25 50       	subi	r18, 0x05	; 5
    aeb4:	31 09       	sbc	r19, r1
    aeb6:	43 eb       	ldi	r20, 0xB3	; 179
    aeb8:	53 e1       	ldi	r21, 0x13	; 19
    aeba:	62 ea       	ldi	r22, 0xA2	; 162
    aebc:	81 eb       	ldi	r24, 0xB1	; 177
    aebe:	93 e1       	ldi	r25, 0x13	; 19
    aec0:	0e 94 88 16 	call	0x2d10	; 0x2d10 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1606
    mqtt_process_message++;
    id = atoi(my_payload);
    if (id < MAX_RTDS)
    {
      remote_tds_unsubscibe_topic(id);
      remote_tds_set_name(id, 0, "");
    aec4:	42 ef       	ldi	r20, 0xF2	; 242
    aec6:	52 e0       	ldi	r21, 0x02	; 2
    aec8:	60 e0       	ldi	r22, 0x00	; 0
    aeca:	87 2d       	mov	r24, r7
    aecc:	0e 94 76 47 	call	0x8eec	; 0x8eec <remote_tds_set_name(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1614
    {
      log_error(&mqtt_client, "rtds/clear bad id");
    }
  }
  //// ziska nastaveni remote_tds
  strcpy_P(str1, thermctl_header_in);
    aed0:	6c ea       	ldi	r22, 0xAC	; 172
    aed2:	74 e1       	ldi	r23, 0x14	; 20
    aed4:	c5 01       	movw	r24, r10
    aed6:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1615
  strcat(str1, device.nazev);
    aeda:	6c e2       	ldi	r22, 0x2C	; 44
    aedc:	70 e1       	ldi	r23, 0x10	; 16
    aede:	c5 01       	movw	r24, r10
    aee0:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1616
  strcat(str1, "/rtds/get");
    aee4:	63 e4       	ldi	r22, 0x43	; 67
    aee6:	74 e0       	ldi	r23, 0x04	; 4
    aee8:	c5 01       	movw	r24, r10
    aeea:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1617
  if (strncmp(str1, topic, strlen(str1)) == 0)
    aeee:	f5 01       	movw	r30, r10
    aef0:	01 90       	ld	r0, Z+
    aef2:	00 20       	and	r0, r0
    aef4:	e9 f7       	brne	.-6      	; 0xaef0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xbca>
    aef6:	31 97       	sbiw	r30, 0x01	; 1
    aef8:	af 01       	movw	r20, r30
    aefa:	4a 19       	sub	r20, r10
    aefc:	5b 09       	sbc	r21, r11
    aefe:	b4 01       	movw	r22, r8
    af00:	c5 01       	movw	r24, r10
    af02:	0e 94 df 8c 	call	0x119be	; 0x119be <strncmp>
    af06:	89 2b       	or	r24, r25
    af08:	09 f0       	breq	.+2      	; 0xaf0c <mqtt_callback(char*, unsigned char*, unsigned int)+0xbe6>
    af0a:	4e c0       	rjmp	.+156    	; 0xafa8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc82>
send_mqtt_remote_tds_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2381
*/
///
///
void send_mqtt_remote_tds_status(void)
{
  uint8_t active = 0;
    af0c:	c8 57       	subi	r28, 0x78	; 120
    af0e:	df 4f       	sbci	r29, 0xFF	; 255
    af10:	18 82       	st	Y, r1
    af12:	c8 58       	subi	r28, 0x88	; 136
    af14:	d0 40       	sbci	r29, 0x00	; 0
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2383
  char payload[10];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    af16:	10 e0       	ldi	r17, 0x00	; 0
send_mqtt_remote_tds_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2385
  {
    remote_tds_get_name(idx, &active, payload);
    af18:	ae 01       	movw	r20, r28
    af1a:	48 5b       	subi	r20, 0xB8	; 184
    af1c:	5f 4f       	sbci	r21, 0xFF	; 255
    af1e:	be 01       	movw	r22, r28
    af20:	68 57       	subi	r22, 0x78	; 120
    af22:	7f 4f       	sbci	r23, 0xFF	; 255
    af24:	81 2f       	mov	r24, r17
    af26:	0e 94 3e 4b 	call	0x967c	; 0x967c <remote_tds_get_name(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2387
    /// odeslu pouze pokud je neco aktivni, jinak ne
    if (active == 1)
    af2a:	c8 57       	subi	r28, 0x78	; 120
    af2c:	df 4f       	sbci	r29, 0xFF	; 255
    af2e:	88 81       	ld	r24, Y
    af30:	c8 58       	subi	r28, 0x88	; 136
    af32:	d0 40       	sbci	r29, 0x00	; 0
    af34:	81 30       	cpi	r24, 0x01	; 1
    af36:	a1 f5       	brne	.+104    	; 0xafa0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc7a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2389
    {
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "name", payload);
    af38:	9e 01       	movw	r18, r28
    af3a:	28 5b       	subi	r18, 0xB8	; 184
    af3c:	3f 4f       	sbci	r19, 0xFF	; 255
    af3e:	44 e0       	ldi	r20, 0x04	; 4
    af40:	56 e0       	ldi	r21, 0x06	; 6
    af42:	61 2f       	mov	r22, r17
    af44:	8d e4       	ldi	r24, 0x4D	; 77
    af46:	94 e0       	ldi	r25, 0x04	; 4
    af48:	0e 94 ad 48 	call	0x915a	; 0x915a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.140]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2390
      itoa(active, payload, 10);
    af4c:	c8 57       	subi	r28, 0x78	; 120
    af4e:	df 4f       	sbci	r29, 0xFF	; 255
    af50:	88 81       	ld	r24, Y
    af52:	c8 58       	subi	r28, 0x88	; 136
    af54:	d0 40       	sbci	r29, 0x00	; 0
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    af56:	4a e0       	ldi	r20, 0x0A	; 10
    af58:	be 01       	movw	r22, r28
    af5a:	68 5b       	subi	r22, 0xB8	; 184
    af5c:	7f 4f       	sbci	r23, 0xFF	; 255
    af5e:	90 e0       	ldi	r25, 0x00	; 0
    af60:	0e 94 7f 80 	call	0x100fe	; 0x100fe <__itoa_ncheck>
send_mqtt_remote_tds_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2391
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "active", payload);
    af64:	9e 01       	movw	r18, r28
    af66:	28 5b       	subi	r18, 0xB8	; 184
    af68:	3f 4f       	sbci	r19, 0xFF	; 255
    af6a:	42 e5       	ldi	r20, 0x52	; 82
    af6c:	54 e0       	ldi	r21, 0x04	; 4
    af6e:	61 2f       	mov	r22, r17
    af70:	8d e4       	ldi	r24, 0x4D	; 77
    af72:	94 e0       	ldi	r25, 0x04	; 4
    af74:	0e 94 ad 48 	call	0x915a	; 0x915a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.140]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2393
      /// itoa(remote_tds[idx], payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "temp", payload);
    af78:	9e 01       	movw	r18, r28
    af7a:	28 5b       	subi	r18, 0xB8	; 184
    af7c:	3f 4f       	sbci	r19, 0xFF	; 255
    af7e:	49 e5       	ldi	r20, 0x59	; 89
    af80:	54 e0       	ldi	r21, 0x04	; 4
    af82:	61 2f       	mov	r22, r17
    af84:	8d e4       	ldi	r24, 0x4D	; 77
    af86:	94 e0       	ldi	r25, 0x04	; 4
    af88:	0e 94 ad 48 	call	0x915a	; 0x915a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.140]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2395
      /// itoa(remote_tds_last_update[idx], payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "last_update", payload);
    af8c:	9e 01       	movw	r18, r28
    af8e:	28 5b       	subi	r18, 0xB8	; 184
    af90:	3f 4f       	sbci	r19, 0xFF	; 255
    af92:	4e e5       	ldi	r20, 0x5E	; 94
    af94:	54 e0       	ldi	r21, 0x04	; 4
    af96:	61 2f       	mov	r22, r17
    af98:	8d e4       	ldi	r24, 0x4D	; 77
    af9a:	94 e0       	ldi	r25, 0x04	; 4
    af9c:	0e 94 ad 48 	call	0x915a	; 0x915a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.140]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2383
///
void send_mqtt_remote_tds_status(void)
{
  uint8_t active = 0;
  char payload[10];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    afa0:	1f 5f       	subi	r17, 0xFF	; 255
    afa2:	15 30       	cpi	r17, 0x05	; 5
    afa4:	09 f0       	breq	.+2      	; 0xafa8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc82>
    afa6:	b8 cf       	rjmp	.-144    	; 0xaf18 <mqtt_callback(char*, unsigned char*, unsigned int)+0xbf2>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1623
  {
    send_mqtt_remote_tds_status();
  }
  ////
  //// rtds/NAME - hodnota, kde NAME je nazev cidla
  strcpy(str1, "/rtds/");
    afa8:	6e e0       	ldi	r22, 0x0E	; 14
    afaa:	74 e0       	ldi	r23, 0x04	; 4
    afac:	c5 01       	movw	r24, r10
    afae:	0e 94 c8 8c 	call	0x11990	; 0x11990 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1624
  if (strncmp(str1, topic, strlen(str1)) == 0)
    afb2:	f5 01       	movw	r30, r10
    afb4:	01 90       	ld	r0, Z+
    afb6:	00 20       	and	r0, r0
    afb8:	e9 f7       	brne	.-6      	; 0xafb4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc8e>
    afba:	31 97       	sbiw	r30, 0x01	; 1
    afbc:	af 01       	movw	r20, r30
    afbe:	4a 19       	sub	r20, r10
    afc0:	5b 09       	sbc	r21, r11
    afc2:	b4 01       	movw	r22, r8
    afc4:	c5 01       	movw	r24, r10
    afc6:	0e 94 df 8c 	call	0x119be	; 0x119be <strncmp>
    afca:	89 2b       	or	r24, r25
    afcc:	09 f0       	breq	.+2      	; 0xafd0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xcaa>
    afce:	41 c0       	rjmp	.+130    	; 0xb052 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd2c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1626
  {
    mqtt_process_message++;
    afd0:	80 91 be 0b 	lds	r24, 0x0BBE	; 0x800bbe <mqtt_process_message>
    afd4:	90 91 bf 0b 	lds	r25, 0x0BBF	; 0x800bbf <mqtt_process_message+0x1>
    afd8:	01 96       	adiw	r24, 0x01	; 1
    afda:	90 93 bf 0b 	sts	0x0BBF, r25	; 0x800bbf <mqtt_process_message+0x1>
    afde:	80 93 be 0b 	sts	0x0BBE, r24	; 0x800bbe <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1628
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    afe2:	f5 01       	movw	r30, r10
    afe4:	01 90       	ld	r0, Z+
    afe6:	00 20       	and	r0, r0
    afe8:	e9 f7       	brne	.-6      	; 0xafe4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xcbe>
    afea:	31 97       	sbiw	r30, 0x01	; 1
    afec:	ea 19       	sub	r30, r10
    afee:	fb 09       	sbc	r31, r11
    aff0:	9e 2f       	mov	r25, r30
    aff2:	4e 2f       	mov	r20, r30
    aff4:	84 2f       	mov	r24, r20
    aff6:	89 1b       	sub	r24, r25
    aff8:	24 2f       	mov	r18, r20
    affa:	30 e0       	ldi	r19, 0x00	; 0
    affc:	d4 01       	movw	r26, r8
    affe:	0d 90       	ld	r0, X+
    b000:	00 20       	and	r0, r0
    b002:	e9 f7       	brne	.-6      	; 0xaffe <mqtt_callback(char*, unsigned char*, unsigned int)+0xcd8>
    b004:	11 97       	sbiw	r26, 0x01	; 1
    b006:	a8 19       	sub	r26, r8
    b008:	b9 09       	sbc	r27, r9
    b00a:	2a 17       	cp	r18, r26
    b00c:	3b 07       	cpc	r19, r27
    b00e:	88 f4       	brcc	.+34     	; 0xb032 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd0c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1630
    {
      str1[cnt] = topic[f];
    b010:	d5 01       	movw	r26, r10
    b012:	a8 0f       	add	r26, r24
    b014:	b1 1d       	adc	r27, r1
    b016:	28 0d       	add	r18, r8
    b018:	39 1d       	adc	r19, r9
    b01a:	f9 01       	movw	r30, r18
    b01c:	80 81       	ld	r24, Z
    b01e:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1631
      str1[cnt + 1] = 0;
    b020:	11 96       	adiw	r26, 0x01	; 1
    b022:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1628
  strcpy(str1, "/rtds/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    b024:	4f 5f       	subi	r20, 0xFF	; 255
    b026:	e6 cf       	rjmp	.-52     	; 0xaff4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xcce>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1610
      remote_tds_unsubscibe_topic(id);
      remote_tds_set_name(id, 0, "");
    }
    else
    {
      log_error(&mqtt_client, "rtds/clear bad id");
    b028:	81 e3       	ldi	r24, 0x31	; 49
    b02a:	94 e0       	ldi	r25, 0x04	; 4
    b02c:	0e 94 98 49 	call	0x9330	; 0x9330 <log_error(PubSubClient*, char*) [clone .constprop.70]>
    b030:	4f cf       	rjmp	.-354    	; 0xaed0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xbaa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1634
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    b032:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1636
    {
      uint8_t active = 0;
    b034:	29 96       	adiw	r28, 0x09	; 9
    b036:	1f ae       	std	Y+63, r1	; 0x3f
    b038:	29 97       	sbiw	r28, 0x09	; 9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1637
      remote_tds_get_name(idx, &active, tmp1);
    b03a:	ae 01       	movw	r20, r28
    b03c:	48 57       	subi	r20, 0x78	; 120
    b03e:	5f 4f       	sbci	r21, 0xFF	; 255
    b040:	be 01       	movw	r22, r28
    b042:	68 5b       	subi	r22, 0xB8	; 184
    b044:	7f 4f       	sbci	r23, 0xFF	; 255
    b046:	81 2f       	mov	r24, r17
    b048:	0e 94 3e 4b 	call	0x967c	; 0x967c <remote_tds_get_name(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1634
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    b04c:	1f 5f       	subi	r17, 0xFF	; 255
    b04e:	15 30       	cpi	r17, 0x05	; 5
    b050:	89 f7       	brne	.-30     	; 0xb034 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd0e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1645
        //remote_tds[idx] = atoi(my_payload);
        //remote_tds_last_update[idx] = 0;
      }
    }
  }
  strcpy(str1, "/rtds/list");
    b052:	6a e6       	ldi	r22, 0x6A	; 106
    b054:	74 e0       	ldi	r23, 0x04	; 4
    b056:	c5 01       	movw	r24, r10
    b058:	0e 94 c8 8c 	call	0x11990	; 0x11990 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1660
  //// thermctl-in/XXXXX/prog/set/IDX/active  - 0-off, 1-heat, 2-cool,3.....
  //// thermctl-in/XXXXX/prog_interval/set/IDX/IDcko/theshold - pro jednotlive casove useky ruzne teploty
  //// thermctl-in/XXXXX/prog_interval/set/IDX/IDcko/active - pro jednotlivy usek povoleni zakazani
  //// thermctl-in/XXXXX/prog_interval/set/IDX/IDcko/time - nastavi cas pro jednotlive intervaly
  //// thermctl-in/XXXXX/prog/clear - IDX
  strcpy_P(str1, thermctl_header_in);
    b05c:	6c ea       	ldi	r22, 0xAC	; 172
    b05e:	74 e1       	ldi	r23, 0x14	; 20
    b060:	c5 01       	movw	r24, r10
    b062:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1661
  strcat(str1, device.nazev);
    b066:	6c e2       	ldi	r22, 0x2C	; 44
    b068:	70 e1       	ldi	r23, 0x10	; 16
    b06a:	c5 01       	movw	r24, r10
    b06c:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1662
  strcat(str1, "/prog/set/");
    b070:	65 e7       	ldi	r22, 0x75	; 117
    b072:	74 e0       	ldi	r23, 0x04	; 4
    b074:	c5 01       	movw	r24, r10
    b076:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1663
  if (strncmp(str1, topic, strlen(str1)) == 0)
    b07a:	f5 01       	movw	r30, r10
    b07c:	01 90       	ld	r0, Z+
    b07e:	00 20       	and	r0, r0
    b080:	e9 f7       	brne	.-6      	; 0xb07c <mqtt_callback(char*, unsigned char*, unsigned int)+0xd56>
    b082:	31 97       	sbiw	r30, 0x01	; 1
    b084:	af 01       	movw	r20, r30
    b086:	4a 19       	sub	r20, r10
    b088:	5b 09       	sbc	r21, r11
    b08a:	b4 01       	movw	r22, r8
    b08c:	c5 01       	movw	r24, r10
    b08e:	0e 94 df 8c 	call	0x119be	; 0x119be <strncmp>
    b092:	89 2b       	or	r24, r25
    b094:	09 f0       	breq	.+2      	; 0xb098 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd72>
    b096:	75 c0       	rjmp	.+234    	; 0xb182 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe5c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1665
  {
    mqtt_process_message++;
    b098:	80 91 be 0b 	lds	r24, 0x0BBE	; 0x800bbe <mqtt_process_message>
    b09c:	90 91 bf 0b 	lds	r25, 0x0BBF	; 0x800bbf <mqtt_process_message+0x1>
    b0a0:	01 96       	adiw	r24, 0x01	; 1
    b0a2:	90 93 bf 0b 	sts	0x0BBF, r25	; 0x800bbf <mqtt_process_message+0x1>
    b0a6:	80 93 be 0b 	sts	0x0BBE, r24	; 0x800bbe <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1667
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    b0aa:	f5 01       	movw	r30, r10
    b0ac:	01 90       	ld	r0, Z+
    b0ae:	00 20       	and	r0, r0
    b0b0:	e9 f7       	brne	.-6      	; 0xb0ac <mqtt_callback(char*, unsigned char*, unsigned int)+0xd86>
    b0b2:	31 97       	sbiw	r30, 0x01	; 1
    b0b4:	ea 19       	sub	r30, r10
    b0b6:	fb 09       	sbc	r31, r11
    b0b8:	9e 2f       	mov	r25, r30
    b0ba:	4e 2f       	mov	r20, r30
    b0bc:	84 2f       	mov	r24, r20
    b0be:	89 1b       	sub	r24, r25
    b0c0:	24 2f       	mov	r18, r20
    b0c2:	30 e0       	ldi	r19, 0x00	; 0
    b0c4:	d4 01       	movw	r26, r8
    b0c6:	0d 90       	ld	r0, X+
    b0c8:	00 20       	and	r0, r0
    b0ca:	e9 f7       	brne	.-6      	; 0xb0c6 <mqtt_callback(char*, unsigned char*, unsigned int)+0xda0>
    b0cc:	11 97       	sbiw	r26, 0x01	; 1
    b0ce:	a8 19       	sub	r26, r8
    b0d0:	b9 09       	sbc	r27, r9
    b0d2:	2a 17       	cp	r18, r26
    b0d4:	3b 07       	cpc	r19, r27
    b0d6:	60 f4       	brcc	.+24     	; 0xb0f0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xdca>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1669
    {
      str1[cnt] = topic[f];
    b0d8:	d5 01       	movw	r26, r10
    b0da:	a8 0f       	add	r26, r24
    b0dc:	b1 1d       	adc	r27, r1
    b0de:	28 0d       	add	r18, r8
    b0e0:	39 1d       	adc	r19, r9
    b0e2:	f9 01       	movw	r30, r18
    b0e4:	80 81       	ld	r24, Z
    b0e6:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1670
      str1[cnt + 1] = 0;
    b0e8:	11 96       	adiw	r26, 0x01	; 1
    b0ea:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1667
  strcat(str1, "/prog/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    b0ec:	4f 5f       	subi	r20, 0xFF	; 255
    b0ee:	e6 cf       	rjmp	.-52     	; 0xb0bc <mqtt_callback(char*, unsigned char*, unsigned int)+0xd96>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1674
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    b0f0:	63 e1       	ldi	r22, 0x13	; 19
    b0f2:	74 e0       	ldi	r23, 0x04	; 4
    b0f4:	c5 01       	movw	r24, r10
    b0f6:	0e 94 49 80 	call	0x10092	; 0x10092 <strtok>
    b0fa:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1673
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    b0fc:	f1 2c       	mov	r15, r1
thermostat_program_set_active():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:296
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active);
}
void thermostat_program_set_active(uint8_t program_id, uint8_t active)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active, active);
    b0fe:	ad e4       	ldi	r26, 0x4D	; 77
    b100:	ea 2e       	mov	r14, r26
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1675
    pch = strtok (str1, "/");
    while (pch != NULL)
    b102:	01 15       	cp	r16, r1
    b104:	11 05       	cpc	r17, r1
    b106:	e9 f1       	breq	.+122    	; 0xb182 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe5c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1677
    {
      if (cnt == 0) id = atoi(pch);
    b108:	f1 10       	cpse	r15, r1
    b10a:	0c c0       	rjmp	.+24     	; 0xb124 <mqtt_callback(char*, unsigned char*, unsigned int)+0xdfe>
    b10c:	c8 01       	movw	r24, r16
    b10e:	0e 94 10 80 	call	0x10020	; 0x10020 <atoi>
    b112:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1678
      if (id < AVAILABLE_PROGRAM)
    b114:	f7 e0       	ldi	r31, 0x07	; 7
    b116:	f8 17       	cp	r31, r24
    b118:	58 f5       	brcc	.+86     	; 0xb170 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe4a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1685
        if ((cnt == 1) && (strcmp(pch, "name") == 0))  thermostat_program_set_name(id, my_payload);
        if ((cnt == 1) && (strcmp(pch, "active") == 0))  thermostat_program_set_active(id, atoi(my_payload));
      }
      else
      {
        log_error(&mqtt_client, "prog/set bad id");
    b11a:	80 e8       	ldi	r24, 0x80	; 128
    b11c:	94 e0       	ldi	r25, 0x04	; 4
    b11e:	0e 94 98 49 	call	0x9330	; 0x9330 <log_error(PubSubClient*, char*) [clone .constprop.70]>
    b122:	26 c0       	rjmp	.+76     	; 0xb170 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe4a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1678
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < AVAILABLE_PROGRAM)
    b124:	27 e0       	ldi	r18, 0x07	; 7
    b126:	27 15       	cp	r18, r7
    b128:	c0 f3       	brcs	.-16     	; 0xb11a <mqtt_callback(char*, unsigned char*, unsigned int)+0xdf4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1680
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0))  thermostat_program_set_name(id, my_payload);
    b12a:	31 e0       	ldi	r19, 0x01	; 1
    b12c:	f3 12       	cpse	r15, r19
    b12e:	20 c0       	rjmp	.+64     	; 0xb170 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe4a>
    b130:	64 e0       	ldi	r22, 0x04	; 4
    b132:	76 e0       	ldi	r23, 0x06	; 6
    b134:	c8 01       	movw	r24, r16
    b136:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
    b13a:	89 2b       	or	r24, r25
    b13c:	29 f4       	brne	.+10     	; 0xb148 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe22>
    b13e:	6a e4       	ldi	r22, 0x4A	; 74
    b140:	7e e0       	ldi	r23, 0x0E	; 14
    b142:	87 2d       	mov	r24, r7
    b144:	0e 94 19 45 	call	0x8a32	; 0x8a32 <thermostat_program_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1681
        if ((cnt == 1) && (strcmp(pch, "active") == 0))  thermostat_program_set_active(id, atoi(my_payload));
    b148:	62 e5       	ldi	r22, 0x52	; 82
    b14a:	74 e0       	ldi	r23, 0x04	; 4
    b14c:	c8 01       	movw	r24, r16
    b14e:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
    b152:	89 2b       	or	r24, r25
    b154:	69 f4       	brne	.+26     	; 0xb170 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe4a>
    b156:	8a e4       	ldi	r24, 0x4A	; 74
    b158:	9e e0       	ldi	r25, 0x0E	; 14
    b15a:	0e 94 10 80 	call	0x10020	; 0x10020 <atoi>
thermostat_program_set_active():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:296
    b15e:	7e 9c       	mul	r7, r14
    b160:	90 01       	movw	r18, r0
    b162:	11 24       	eor	r1, r1
    b164:	68 2f       	mov	r22, r24
    b166:	c9 01       	movw	r24, r18
    b168:	85 5c       	subi	r24, 0xC5	; 197
    b16a:	9c 4f       	sbci	r25, 0xFC	; 252
    b16c:	0e 94 81 44 	call	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1687
      }
      else
      {
        log_error(&mqtt_client, "prog/set bad id");
      }
      pch = strtok (NULL, "/");
    b170:	63 e1       	ldi	r22, 0x13	; 19
    b172:	74 e0       	ldi	r23, 0x04	; 4
    b174:	90 e0       	ldi	r25, 0x00	; 0
    b176:	80 e0       	ldi	r24, 0x00	; 0
    b178:	0e 94 49 80 	call	0x10092	; 0x10092 <strtok>
    b17c:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1688
      cnt++;
    b17e:	f3 94       	inc	r15
    b180:	c0 cf       	rjmp	.-128    	; 0xb102 <mqtt_callback(char*, unsigned char*, unsigned int)+0xddc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1692
    }
  }
  ////
  strcpy_P(str1, thermctl_header_in);
    b182:	6c ea       	ldi	r22, 0xAC	; 172
    b184:	74 e1       	ldi	r23, 0x14	; 20
    b186:	c5 01       	movw	r24, r10
    b188:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1693
  strcat(str1, device.nazev);
    b18c:	6c e2       	ldi	r22, 0x2C	; 44
    b18e:	70 e1       	ldi	r23, 0x10	; 16
    b190:	c5 01       	movw	r24, r10
    b192:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1694
  strcat(str1, "/prog/clear");
    b196:	60 e9       	ldi	r22, 0x90	; 144
    b198:	74 e0       	ldi	r23, 0x04	; 4
    b19a:	c5 01       	movw	r24, r10
    b19c:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1695
  if (strncmp(str1, topic, strlen(str1)) == 0)
    b1a0:	f5 01       	movw	r30, r10
    b1a2:	01 90       	ld	r0, Z+
    b1a4:	00 20       	and	r0, r0
    b1a6:	e9 f7       	brne	.-6      	; 0xb1a2 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe7c>
    b1a8:	31 97       	sbiw	r30, 0x01	; 1
    b1aa:	af 01       	movw	r20, r30
    b1ac:	4a 19       	sub	r20, r10
    b1ae:	5b 09       	sbc	r21, r11
    b1b0:	b4 01       	movw	r22, r8
    b1b2:	c5 01       	movw	r24, r10
    b1b4:	0e 94 df 8c 	call	0x119be	; 0x119be <strncmp>
    b1b8:	89 2b       	or	r24, r25
    b1ba:	09 f0       	breq	.+2      	; 0xb1be <mqtt_callback(char*, unsigned char*, unsigned int)+0xe98>
    b1bc:	52 c0       	rjmp	.+164    	; 0xb262 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf3c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1697
  {
    mqtt_process_message++;
    b1be:	80 91 be 0b 	lds	r24, 0x0BBE	; 0x800bbe <mqtt_process_message>
    b1c2:	90 91 bf 0b 	lds	r25, 0x0BBF	; 0x800bbf <mqtt_process_message+0x1>
    b1c6:	01 96       	adiw	r24, 0x01	; 1
    b1c8:	90 93 bf 0b 	sts	0x0BBF, r25	; 0x800bbf <mqtt_process_message+0x1>
    b1cc:	80 93 be 0b 	sts	0x0BBE, r24	; 0x800bbe <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1698
    id = atoi(my_payload);
    b1d0:	8a e4       	ldi	r24, 0x4A	; 74
    b1d2:	9e e0       	ldi	r25, 0x0E	; 14
    b1d4:	0e 94 10 80 	call	0x10020	; 0x10020 <atoi>
    b1d8:	18 2f       	mov	r17, r24
    b1da:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1699
    if (id < AVAILABLE_PROGRAM)
    b1dc:	87 e0       	ldi	r24, 0x07	; 7
    b1de:	81 17       	cp	r24, r17
    b1e0:	08 f4       	brcc	.+2      	; 0xb1e4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xebe>
    b1e2:	89 c0       	rjmp	.+274    	; 0xb2f6 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfd0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1701
    {
      strcpy(tmp2, "PROG");
    b1e4:	6c e9       	ldi	r22, 0x9C	; 156
    b1e6:	74 e0       	ldi	r23, 0x04	; 4
    b1e8:	ce 01       	movw	r24, r28
    b1ea:	88 5f       	subi	r24, 0xF8	; 248
    b1ec:	9e 4f       	sbci	r25, 0xFE	; 254
    b1ee:	0e 94 c8 8c 	call	0x11990	; 0x11990 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1702
      thermostat_program_set_name(id, tmp2);
    b1f2:	be 01       	movw	r22, r28
    b1f4:	68 5f       	subi	r22, 0xF8	; 248
    b1f6:	7e 4f       	sbci	r23, 0xFE	; 254
    b1f8:	81 2f       	mov	r24, r17
    b1fa:	0e 94 19 45 	call	0x8a32	; 0x8a32 <thermostat_program_set_name(unsigned char, char*)>
thermostat_program_set_active():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:296
    b1fe:	ad e4       	ldi	r26, 0x4D	; 77
    b200:	1a 9f       	mul	r17, r26
    b202:	c0 01       	movw	r24, r0
    b204:	11 24       	eor	r1, r1
    b206:	60 e0       	ldi	r22, 0x00	; 0
    b208:	85 5c       	subi	r24, 0xC5	; 197
    b20a:	9c 4f       	sbci	r25, 0xFC	; 252
    b20c:	0e 94 81 44 	call	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1704
      thermostat_program_set_active(id, 0);
      for (uint8_t progid = 0; progid < MAX_PROGRAM_INTERVAL; progid++)
    b210:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1706
      {
        thermostat_program_set_time(id, progid, 0, 0, 0, 0, 0);
    b212:	c1 2c       	mov	r12, r1
    b214:	e1 2c       	mov	r14, r1
    b216:	00 e0       	ldi	r16, 0x00	; 0
    b218:	20 e0       	ldi	r18, 0x00	; 0
    b21a:	40 e0       	ldi	r20, 0x00	; 0
    b21c:	61 2f       	mov	r22, r17
    b21e:	87 2d       	mov	r24, r7
    b220:	0e 94 dd 44 	call	0x89ba	; 0x89ba <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1707
        thermostat_program_set_threshold(id, progid, 220);
    b224:	4c ed       	ldi	r20, 0xDC	; 220
    b226:	50 e0       	ldi	r21, 0x00	; 0
    b228:	61 2f       	mov	r22, r17
    b22a:	87 2d       	mov	r24, r7
    b22c:	0e 94 c1 44 	call	0x8982	; 0x8982 <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1708
        thermostat_program_set_week(id, progid, 0);
    b230:	40 e0       	ldi	r20, 0x00	; 0
    b232:	61 2f       	mov	r22, r17
    b234:	87 2d       	mov	r24, r7
    b236:	0e 94 b3 44 	call	0x8966	; 0x8966 <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1704
    if (id < AVAILABLE_PROGRAM)
    {
      strcpy(tmp2, "PROG");
      thermostat_program_set_name(id, tmp2);
      thermostat_program_set_active(id, 0);
      for (uint8_t progid = 0; progid < MAX_PROGRAM_INTERVAL; progid++)
    b23a:	1f 5f       	subi	r17, 0xFF	; 255
    b23c:	1b 30       	cpi	r17, 0x0B	; 11
    b23e:	49 f7       	brne	.-46     	; 0xb212 <mqtt_callback(char*, unsigned char*, unsigned int)+0xeec>
    b240:	0b e5       	ldi	r16, 0x5B	; 91
    b242:	11 e0       	ldi	r17, 0x01	; 1
thermostat_ring_get_program_id():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:144


//// nastaveni programu k ringu termostatu
uint8_t thermostat_ring_get_program_id(uint8_t idx)
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
    b244:	c8 01       	movw	r24, r16
    b246:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1712
        thermostat_program_set_threshold(id, progid, 220);
        thermostat_program_set_week(id, progid, 0);
      }
      for (uint8_t tix = 0; tix < MAX_THERMOSTAT; tix++)
      {
        if (thermostat_ring_get_program_id(tix) == id)
    b24a:	78 12       	cpse	r7, r24
    b24c:	04 c0       	rjmp	.+8      	; 0xb256 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf30>
thermostat_ring_set_program_id():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:148
}
void thermostat_ring_set_program_id(uint8_t idx, uint8_t id)
{
  return EEPROM.write((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program, id);
    b24e:	6f ef       	ldi	r22, 0xFF	; 255
    b250:	c8 01       	movw	r24, r16
    b252:	0e 94 81 44 	call	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>
    b256:	0f 5d       	subi	r16, 0xDF	; 223
    b258:	1f 4f       	sbci	r17, 0xFF	; 255
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1710
      {
        thermostat_program_set_time(id, progid, 0, 0, 0, 0, 0);
        thermostat_program_set_threshold(id, progid, 220);
        thermostat_program_set_week(id, progid, 0);
      }
      for (uint8_t tix = 0; tix < MAX_THERMOSTAT; tix++)
    b25a:	0a 34       	cpi	r16, 0x4A	; 74
    b25c:	b3 e0       	ldi	r27, 0x03	; 3
    b25e:	1b 07       	cpc	r17, r27
    b260:	89 f7       	brne	.-30     	; 0xb244 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf1e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1724
    {
      log_error(&mqtt_client, "prog/clear bad id");
    }
  }
  /////
  strcpy_P(str1, thermctl_header_in);
    b262:	6c ea       	ldi	r22, 0xAC	; 172
    b264:	74 e1       	ldi	r23, 0x14	; 20
    b266:	c5 01       	movw	r24, r10
    b268:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1725
  strcat(str1, device.nazev);
    b26c:	6c e2       	ldi	r22, 0x2C	; 44
    b26e:	70 e1       	ldi	r23, 0x10	; 16
    b270:	c5 01       	movw	r24, r10
    b272:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1726
  strcat(str1, "/prog_interval/set/");
    b276:	63 eb       	ldi	r22, 0xB3	; 179
    b278:	74 e0       	ldi	r23, 0x04	; 4
    b27a:	c5 01       	movw	r24, r10
    b27c:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1727
  if (strncmp(str1, topic, strlen(str1)) == 0)
    b280:	f5 01       	movw	r30, r10
    b282:	01 90       	ld	r0, Z+
    b284:	00 20       	and	r0, r0
    b286:	e9 f7       	brne	.-6      	; 0xb282 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf5c>
    b288:	31 97       	sbiw	r30, 0x01	; 1
    b28a:	af 01       	movw	r20, r30
    b28c:	4a 19       	sub	r20, r10
    b28e:	5b 09       	sbc	r21, r11
    b290:	b4 01       	movw	r22, r8
    b292:	c5 01       	movw	r24, r10
    b294:	0e 94 df 8c 	call	0x119be	; 0x119be <strncmp>
    b298:	89 2b       	or	r24, r25
    b29a:	09 f0       	breq	.+2      	; 0xb29e <mqtt_callback(char*, unsigned char*, unsigned int)+0xf78>
    b29c:	04 c1       	rjmp	.+520    	; 0xb4a6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1180>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1729
  {
    mqtt_process_message++;
    b29e:	80 91 be 0b 	lds	r24, 0x0BBE	; 0x800bbe <mqtt_process_message>
    b2a2:	90 91 bf 0b 	lds	r25, 0x0BBF	; 0x800bbf <mqtt_process_message+0x1>
    b2a6:	01 96       	adiw	r24, 0x01	; 1
    b2a8:	90 93 bf 0b 	sts	0x0BBF, r25	; 0x800bbf <mqtt_process_message+0x1>
    b2ac:	80 93 be 0b 	sts	0x0BBE, r24	; 0x800bbe <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1731
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    b2b0:	f5 01       	movw	r30, r10
    b2b2:	01 90       	ld	r0, Z+
    b2b4:	00 20       	and	r0, r0
    b2b6:	e9 f7       	brne	.-6      	; 0xb2b2 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf8c>
    b2b8:	31 97       	sbiw	r30, 0x01	; 1
    b2ba:	ea 19       	sub	r30, r10
    b2bc:	fb 09       	sbc	r31, r11
    b2be:	9e 2f       	mov	r25, r30
    b2c0:	4e 2f       	mov	r20, r30
    b2c2:	84 2f       	mov	r24, r20
    b2c4:	89 1b       	sub	r24, r25
    b2c6:	24 2f       	mov	r18, r20
    b2c8:	30 e0       	ldi	r19, 0x00	; 0
    b2ca:	d4 01       	movw	r26, r8
    b2cc:	0d 90       	ld	r0, X+
    b2ce:	00 20       	and	r0, r0
    b2d0:	e9 f7       	brne	.-6      	; 0xb2cc <mqtt_callback(char*, unsigned char*, unsigned int)+0xfa6>
    b2d2:	11 97       	sbiw	r26, 0x01	; 1
    b2d4:	a8 19       	sub	r26, r8
    b2d6:	b9 09       	sbc	r27, r9
    b2d8:	2a 17       	cp	r18, r26
    b2da:	3b 07       	cpc	r19, r27
    b2dc:	88 f4       	brcc	.+34     	; 0xb300 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfda>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1733
    {
      str1[cnt] = topic[f];
    b2de:	d5 01       	movw	r26, r10
    b2e0:	a8 0f       	add	r26, r24
    b2e2:	b1 1d       	adc	r27, r1
    b2e4:	28 0d       	add	r18, r8
    b2e6:	39 1d       	adc	r19, r9
    b2e8:	f9 01       	movw	r30, r18
    b2ea:	80 81       	ld	r24, Z
    b2ec:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1734
      str1[cnt + 1] = 0;
    b2ee:	11 96       	adiw	r26, 0x01	; 1
    b2f0:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1731
  strcat(str1, "/prog_interval/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    b2f2:	4f 5f       	subi	r20, 0xFF	; 255
    b2f4:	e6 cf       	rjmp	.-52     	; 0xb2c2 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf9c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1720
        }
      }
    }
    else
    {
      log_error(&mqtt_client, "prog/clear bad id");
    b2f6:	81 ea       	ldi	r24, 0xA1	; 161
    b2f8:	94 e0       	ldi	r25, 0x04	; 4
    b2fa:	0e 94 98 49 	call	0x9330	; 0x9330 <log_error(PubSubClient*, char*) [clone .constprop.70]>
    b2fe:	b1 cf       	rjmp	.-158    	; 0xb262 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf3c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1738
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    b300:	63 e1       	ldi	r22, 0x13	; 19
    b302:	74 e0       	ldi	r23, 0x04	; 4
    b304:	c5 01       	movw	r24, r10
    b306:	0e 94 49 80 	call	0x10092	; 0x10092 <strtok>
    b30a:	2c 01       	movw	r4, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1434
  char tmp2[16];
  static char my_payload[128];
  boolean ret = 0;
  uint8_t cnt = 0;
  uint8_t id = 0;
  uint8_t id_interval = 0;
    b30c:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1737
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    b30e:	d1 2c       	mov	r13, r1
thermostat_program_get_time():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:303


//// ziska cas termostatu
void thermostat_program_get_time(uint8_t program_id, uint8_t interval_id, uint8_t *start_hour, uint8_t *start_min, uint8_t *stop_hour, uint8_t *stop_min, uint8_t *active)
{
  uint8_t start = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1);
    b310:	e6 e0       	ldi	r30, 0x06	; 6
    b312:	3e 2e       	mov	r3, r30
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:306
  uint8_t stop = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size)  + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1);
  *start_hour = (start >> 3) & 0b00011111;
  *start_min = (start >> 1 & 0b00000011) * 15;
    b314:	ff e0       	ldi	r31, 0x0F	; 15
    b316:	6f 2e       	mov	r6, r31
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1739
    pch = strtok (str1, "/");
    while (pch != NULL)
    b318:	41 14       	cp	r4, r1
    b31a:	51 04       	cpc	r5, r1
    b31c:	09 f4       	brne	.+2      	; 0xb320 <mqtt_callback(char*, unsigned char*, unsigned int)+0xffa>
    b31e:	c3 c0       	rjmp	.+390    	; 0xb4a6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1180>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1741
    {
      if (cnt == 0) id = atoi(pch);
    b320:	d1 10       	cpse	r13, r1
    b322:	7f c0       	rjmp	.+254    	; 0xb422 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10fc>
    b324:	c2 01       	movw	r24, r4
    b326:	0e 94 10 80 	call	0x10020	; 0x10020 <atoi>
    b32a:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1743
      if (cnt == 1) id_interval = atoi(pch);
      if (id < AVAILABLE_PROGRAM && id_interval < MAX_PROGRAM_INTERVAL)
    b32c:	27 e0       	ldi	r18, 0x07	; 7
    b32e:	27 15       	cp	r18, r7
    b330:	08 f4       	brcc	.+2      	; 0xb334 <mqtt_callback(char*, unsigned char*, unsigned int)+0x100e>
    b332:	b4 c0       	rjmp	.+360    	; 0xb49c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1176>
    b334:	1b 30       	cpi	r17, 0x0B	; 11
    b336:	08 f0       	brcs	.+2      	; 0xb33a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1014>
    b338:	b1 c0       	rjmp	.+354    	; 0xb49c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1176>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1745
      {
        if ((cnt == 2) && (strcmp(pch, "active") == 0))  thermostat_program_set_interval_active(id, id_interval, atoi(my_payload));
    b33a:	32 e0       	ldi	r19, 0x02	; 2
    b33c:	d3 12       	cpse	r13, r19
    b33e:	a5 c0       	rjmp	.+330    	; 0xb48a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1164>
    b340:	62 e5       	ldi	r22, 0x52	; 82
    b342:	74 e0       	ldi	r23, 0x04	; 4
    b344:	c2 01       	movw	r24, r4
    b346:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
    b34a:	89 2b       	or	r24, r25
    b34c:	b1 f5       	brne	.+108    	; 0xb3ba <mqtt_callback(char*, unsigned char*, unsigned int)+0x1094>
    b34e:	8a e4       	ldi	r24, 0x4A	; 74
    b350:	9e e0       	ldi	r25, 0x0E	; 14
    b352:	0e 94 10 80 	call	0x10020	; 0x10020 <atoi>
    b356:	c8 2e       	mov	r12, r24
thermostat_program_get_time():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:303


//// ziska cas termostatu
void thermostat_program_get_time(uint8_t program_id, uint8_t interval_id, uint8_t *start_hour, uint8_t *start_min, uint8_t *stop_hour, uint8_t *stop_min, uint8_t *active)
{
  uint8_t start = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1);
    b358:	8d e4       	ldi	r24, 0x4D	; 77
    b35a:	78 9e       	mul	r7, r24
    b35c:	70 01       	movw	r14, r0
    b35e:	11 24       	eor	r1, r1
    b360:	a5 ec       	ldi	r26, 0xC5	; 197
    b362:	ea 1a       	sub	r14, r26
    b364:	ac ef       	ldi	r26, 0xFC	; 252
    b366:	fa 0a       	sbc	r15, r26
    b368:	13 9d       	mul	r17, r3
    b36a:	e0 0c       	add	r14, r0
    b36c:	f1 1c       	adc	r15, r1
    b36e:	11 24       	eor	r1, r1
    b370:	c7 01       	movw	r24, r14
    b372:	02 96       	adiw	r24, 0x02	; 2
    b374:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224]>
    b378:	28 2e       	mov	r2, r24
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:304
  uint8_t stop = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size)  + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1);
    b37a:	c7 01       	movw	r24, r14
    b37c:	03 96       	adiw	r24, 0x03	; 3
    b37e:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224]>
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:305
  *start_hour = (start >> 3) & 0b00011111;
    b382:	42 2d       	mov	r20, r2
    b384:	46 95       	lsr	r20
    b386:	46 95       	lsr	r20
    b388:	46 95       	lsr	r20
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:306
  *start_min = (start >> 1 & 0b00000011) * 15;
    b38a:	22 2d       	mov	r18, r2
    b38c:	30 e0       	ldi	r19, 0x00	; 0
    b38e:	35 95       	asr	r19
    b390:	27 95       	ror	r18
    b392:	23 70       	andi	r18, 0x03	; 3
    b394:	26 9d       	mul	r18, r6
    b396:	20 2d       	mov	r18, r0
    b398:	11 24       	eor	r1, r1
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:307
  *stop_hour = (stop >> 3) & 0b00011111;
    b39a:	08 2f       	mov	r16, r24
    b39c:	06 95       	lsr	r16
    b39e:	06 95       	lsr	r16
    b3a0:	06 95       	lsr	r16
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:308
  *stop_min = (stop & 0b00000011) * 15;
    b3a2:	83 70       	andi	r24, 0x03	; 3
    b3a4:	86 9d       	mul	r24, r6
    b3a6:	e0 2c       	mov	r14, r0
    b3a8:	11 24       	eor	r1, r1
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:309
  *active = start & 0b00000001;
    b3aa:	82 2d       	mov	r24, r2
    b3ac:	81 70       	andi	r24, 0x01	; 1
thermostat_program_set_interval_active():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:381
/***************************************************************************************************************/
void thermostat_program_set_interval_active(uint8_t program_id, uint8_t interval_id, uint8_t set_active)
{
  uint8_t start_hour, start_min, stop_hour, stop_min, active;
  thermostat_program_get_time(program_id, interval_id, &start_hour, &start_min, &stop_hour, &stop_min, &active);
  if (active != set_active)
    b3ae:	c8 16       	cp	r12, r24
    b3b0:	21 f0       	breq	.+8      	; 0xb3ba <mqtt_callback(char*, unsigned char*, unsigned int)+0x1094>
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:382
    thermostat_program_set_time(program_id, interval_id, start_hour, start_min, stop_hour, stop_min, set_active);
    b3b2:	61 2f       	mov	r22, r17
    b3b4:	87 2d       	mov	r24, r7
    b3b6:	0e 94 dd 44 	call	0x89ba	; 0x89ba <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1746
        if ((cnt == 2) && (strcmp(pch, "threshold") == 0))  thermostat_program_set_threshold(id, id_interval , atoi(my_payload));
    b3ba:	6a e7       	ldi	r22, 0x7A	; 122
    b3bc:	76 e0       	ldi	r23, 0x06	; 6
    b3be:	c2 01       	movw	r24, r4
    b3c0:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
    b3c4:	89 2b       	or	r24, r25
    b3c6:	49 f4       	brne	.+18     	; 0xb3da <mqtt_callback(char*, unsigned char*, unsigned int)+0x10b4>
    b3c8:	8a e4       	ldi	r24, 0x4A	; 74
    b3ca:	9e e0       	ldi	r25, 0x0E	; 14
    b3cc:	0e 94 10 80 	call	0x10020	; 0x10020 <atoi>
    b3d0:	ac 01       	movw	r20, r24
    b3d2:	61 2f       	mov	r22, r17
    b3d4:	87 2d       	mov	r24, r7
    b3d6:	0e 94 c1 44 	call	0x8982	; 0x8982 <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1747
        if ((cnt == 2) && (strcmp(pch, "time") == 0)) thermostat_program_set_parse_interval(id, id_interval, my_payload);
    b3da:	62 ec       	ldi	r22, 0xC2	; 194
    b3dc:	76 e0       	ldi	r23, 0x06	; 6
    b3de:	c2 01       	movw	r24, r4
    b3e0:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
    b3e4:	89 2b       	or	r24, r25
    b3e6:	09 f0       	breq	.+2      	; 0xb3ea <mqtt_callback(char*, unsigned char*, unsigned int)+0x10c4>
    b3e8:	50 c0       	rjmp	.+160    	; 0xb48a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1164>
thermostat_program_set_parse_interval():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:344
{
  uint8_t cnt;
  uint8_t start_hour = 0, start_min = 0, stop_hour = 0, stop_min = 0, active = 0, week = 0;
  char *pch;
  cnt = 0;
  pch = strtok (str, ",");
    b3ea:	67 ec       	ldi	r22, 0xC7	; 199
    b3ec:	74 e0       	ldi	r23, 0x04	; 4
    b3ee:	8a e4       	ldi	r24, 0x4A	; 74
    b3f0:	9e e0       	ldi	r25, 0x0E	; 14
    b3f2:	0e 94 49 80 	call	0x10092	; 0x10092 <strtok>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:341

//// rozparsuje casovy format start_hour,start_min,stop_hour,stop_min,active a ulozi jej
void thermostat_program_set_parse_interval(uint8_t program_id, uint8_t interval_id,  char *str)
{
  uint8_t cnt;
  uint8_t start_hour = 0, start_min = 0, stop_hour = 0, stop_min = 0, active = 0, week = 0;
    b3f6:	f1 2c       	mov	r15, r1
    b3f8:	c1 2c       	mov	r12, r1
    b3fa:	e1 2c       	mov	r14, r1
    b3fc:	21 2c       	mov	r2, r1
    b3fe:	41 2c       	mov	r4, r1
    b400:	51 2c       	mov	r5, r1
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:343
  char *pch;
  cnt = 0;
    b402:	00 e0       	ldi	r16, 0x00	; 0
thermostat_program_set_parse_interval():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:345
  pch = strtok (str, ",");
  while (pch != NULL)
    b404:	00 97       	sbiw	r24, 0x00	; 0
    b406:	99 f1       	breq	.+102    	; 0xb46e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1148>
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:347
  {
    if (cnt == 0) start_hour = atoi(pch);
    b408:	01 11       	cpse	r16, r1
    b40a:	13 c0       	rjmp	.+38     	; 0xb432 <mqtt_callback(char*, unsigned char*, unsigned int)+0x110c>
    b40c:	0e 94 10 80 	call	0x10020	; 0x10020 <atoi>
    b410:	58 2e       	mov	r5, r24
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:354
    if (cnt == 2) stop_hour = atoi(pch);
    if (cnt == 3) stop_min = atoi(pch);
    if (cnt == 4) week = atoi(pch);
    if (cnt == 5) active = atoi(pch);

    pch = strtok (NULL, ",");
    b412:	67 ec       	ldi	r22, 0xC7	; 199
    b414:	74 e0       	ldi	r23, 0x04	; 4
    b416:	90 e0       	ldi	r25, 0x00	; 0
    b418:	80 e0       	ldi	r24, 0x00	; 0
    b41a:	0e 94 49 80 	call	0x10092	; 0x10092 <strtok>
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:355
    cnt++;
    b41e:	0f 5f       	subi	r16, 0xFF	; 255
    b420:	f1 cf       	rjmp	.-30     	; 0xb404 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10de>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1742
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1) id_interval = atoi(pch);
    b422:	f1 e0       	ldi	r31, 0x01	; 1
    b424:	df 12       	cpse	r13, r31
    b426:	82 cf       	rjmp	.-252    	; 0xb32c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1006>
    b428:	c2 01       	movw	r24, r4
    b42a:	0e 94 10 80 	call	0x10020	; 0x10020 <atoi>
    b42e:	18 2f       	mov	r17, r24
    b430:	7d cf       	rjmp	.-262    	; 0xb32c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1006>
thermostat_program_set_parse_interval():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:348
  cnt = 0;
  pch = strtok (str, ",");
  while (pch != NULL)
  {
    if (cnt == 0) start_hour = atoi(pch);
    if (cnt == 1) start_min = atoi(pch);
    b432:	01 30       	cpi	r16, 0x01	; 1
    b434:	21 f4       	brne	.+8      	; 0xb43e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1118>
    b436:	0e 94 10 80 	call	0x10020	; 0x10020 <atoi>
    b43a:	48 2e       	mov	r4, r24
    b43c:	ea cf       	rjmp	.-44     	; 0xb412 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10ec>
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:349
    if (cnt == 2) stop_hour = atoi(pch);
    b43e:	02 30       	cpi	r16, 0x02	; 2
    b440:	21 f4       	brne	.+8      	; 0xb44a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1124>
    b442:	0e 94 10 80 	call	0x10020	; 0x10020 <atoi>
    b446:	28 2e       	mov	r2, r24
    b448:	e4 cf       	rjmp	.-56     	; 0xb412 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10ec>
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:350
    if (cnt == 3) stop_min = atoi(pch);
    b44a:	03 30       	cpi	r16, 0x03	; 3
    b44c:	21 f4       	brne	.+8      	; 0xb456 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1130>
    b44e:	0e 94 10 80 	call	0x10020	; 0x10020 <atoi>
    b452:	e8 2e       	mov	r14, r24
    b454:	de cf       	rjmp	.-68     	; 0xb412 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10ec>
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:351
    if (cnt == 4) week = atoi(pch);
    b456:	04 30       	cpi	r16, 0x04	; 4
    b458:	21 f4       	brne	.+8      	; 0xb462 <mqtt_callback(char*, unsigned char*, unsigned int)+0x113c>
    b45a:	0e 94 10 80 	call	0x10020	; 0x10020 <atoi>
    b45e:	f8 2e       	mov	r15, r24
    b460:	d8 cf       	rjmp	.-80     	; 0xb412 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10ec>
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:352
    if (cnt == 5) active = atoi(pch);
    b462:	05 30       	cpi	r16, 0x05	; 5
    b464:	b1 f6       	brne	.-84     	; 0xb412 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10ec>
    b466:	0e 94 10 80 	call	0x10020	; 0x10020 <atoi>
    b46a:	c8 2e       	mov	r12, r24
    b46c:	d2 cf       	rjmp	.-92     	; 0xb412 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10ec>
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:357

    pch = strtok (NULL, ",");
    cnt++;
  }
  if (cnt == 6)
    b46e:	06 30       	cpi	r16, 0x06	; 6
    b470:	61 f4       	brne	.+24     	; 0xb48a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1164>
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:359
  {
    thermostat_program_set_time(program_id, interval_id, start_hour, start_min, stop_hour, stop_min, active);
    b472:	02 2d       	mov	r16, r2
    b474:	24 2d       	mov	r18, r4
    b476:	45 2d       	mov	r20, r5
    b478:	61 2f       	mov	r22, r17
    b47a:	87 2d       	mov	r24, r7
    b47c:	0e 94 dd 44 	call	0x89ba	; 0x89ba <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:360
    thermostat_program_set_week(program_id, interval_id, week);
    b480:	4f 2d       	mov	r20, r15
    b482:	61 2f       	mov	r22, r17
    b484:	87 2d       	mov	r24, r7
    b486:	0e 94 b3 44 	call	0x8966	; 0x8966 <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1753
      }
      else
      {
        log_error(&mqtt_client, "prog_interval/set bad id");
      }
      pch = strtok (NULL, "/");
    b48a:	63 e1       	ldi	r22, 0x13	; 19
    b48c:	74 e0       	ldi	r23, 0x04	; 4
    b48e:	90 e0       	ldi	r25, 0x00	; 0
    b490:	80 e0       	ldi	r24, 0x00	; 0
    b492:	0e 94 49 80 	call	0x10092	; 0x10092 <strtok>
    b496:	2c 01       	movw	r4, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1754
      cnt++;
    b498:	d3 94       	inc	r13
    b49a:	3e cf       	rjmp	.-388    	; 0xb318 <mqtt_callback(char*, unsigned char*, unsigned int)+0xff2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1751
        if ((cnt == 2) && (strcmp(pch, "threshold") == 0))  thermostat_program_set_threshold(id, id_interval , atoi(my_payload));
        if ((cnt == 2) && (strcmp(pch, "time") == 0)) thermostat_program_set_parse_interval(id, id_interval, my_payload);
      }
      else
      {
        log_error(&mqtt_client, "prog_interval/set bad id");
    b49c:	89 ec       	ldi	r24, 0xC9	; 201
    b49e:	94 e0       	ldi	r25, 0x04	; 4
    b4a0:	0e 94 98 49 	call	0x9330	; 0x9330 <log_error(PubSubClient*, char*) [clone .constprop.70]>
    b4a4:	f2 cf       	rjmp	.-28     	; 0xb48a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1164>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1759
      cnt++;
    }
  }
  ///
  //// thermctl-in/XXXXX/ring/default, nastavi vychozi ring na displaji
  strcpy_P(str1, thermctl_header_in);
    b4a6:	6c ea       	ldi	r22, 0xAC	; 172
    b4a8:	74 e1       	ldi	r23, 0x14	; 20
    b4aa:	c5 01       	movw	r24, r10
    b4ac:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1760
  strcat(str1, device.nazev);
    b4b0:	6c e2       	ldi	r22, 0x2C	; 44
    b4b2:	70 e1       	ldi	r23, 0x10	; 16
    b4b4:	c5 01       	movw	r24, r10
    b4b6:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1761
  strcat(str1, "/ring/default");
    b4ba:	62 ee       	ldi	r22, 0xE2	; 226
    b4bc:	74 e0       	ldi	r23, 0x04	; 4
    b4be:	c5 01       	movw	r24, r10
    b4c0:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1762
  if (strcmp(str1, topic) == 0)
    b4c4:	b4 01       	movw	r22, r8
    b4c6:	c5 01       	movw	r24, r10
    b4c8:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
    b4cc:	89 2b       	or	r24, r25
    b4ce:	a1 f4       	brne	.+40     	; 0xb4f8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11d2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1764
  {
    mqtt_process_message++;
    b4d0:	80 91 be 0b 	lds	r24, 0x0BBE	; 0x800bbe <mqtt_process_message>
    b4d4:	90 91 bf 0b 	lds	r25, 0x0BBF	; 0x800bbf <mqtt_process_message+0x1>
    b4d8:	01 96       	adiw	r24, 0x01	; 1
    b4da:	90 93 bf 0b 	sts	0x0BBF, r25	; 0x800bbf <mqtt_process_message+0x1>
    b4de:	80 93 be 0b 	sts	0x0BBE, r24	; 0x800bbe <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1765
    default_ring = atoi(my_payload);
    b4e2:	8a e4       	ldi	r24, 0x4A	; 74
    b4e4:	9e e0       	ldi	r25, 0x0E	; 14
    b4e6:	0e 94 10 80 	call	0x10020	; 0x10020 <atoi>
    b4ea:	80 93 ca 0b 	sts	0x0BCA, r24	; 0x800bca <default_ring>
set_default_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1373
/*
   ring - cislo aktivniho ringu
*/
void set_default_ring(uint8_t ring)
{
  EEPROM.write(my_default_ring, ring);
    b4ee:	68 2f       	mov	r22, r24
    b4f0:	8c e5       	ldi	r24, 0x5C	; 92
    b4f2:	90 e0       	ldi	r25, 0x00	; 0
    b4f4:	0e 94 81 44 	call	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1770
    default_ring = atoi(my_payload);
    set_default_ring(default_ring);
  }
  ///
  //// thermctl-in/XXXXX/ring/get/IDcko/pid
  strcpy_P(str1, thermctl_header_in);
    b4f8:	6c ea       	ldi	r22, 0xAC	; 172
    b4fa:	74 e1       	ldi	r23, 0x14	; 20
    b4fc:	c5 01       	movw	r24, r10
    b4fe:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1771
  strcat(str1, device.nazev);
    b502:	6c e2       	ldi	r22, 0x2C	; 44
    b504:	70 e1       	ldi	r23, 0x10	; 16
    b506:	c5 01       	movw	r24, r10
    b508:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1772
  strcat(str1, "/ring/get/");
    b50c:	60 ef       	ldi	r22, 0xF0	; 240
    b50e:	74 e0       	ldi	r23, 0x04	; 4
    b510:	c5 01       	movw	r24, r10
    b512:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1773
  if (strncmp(str1, topic, strlen(str1)) == 0)
    b516:	f5 01       	movw	r30, r10
    b518:	01 90       	ld	r0, Z+
    b51a:	00 20       	and	r0, r0
    b51c:	e9 f7       	brne	.-6      	; 0xb518 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11f2>
    b51e:	31 97       	sbiw	r30, 0x01	; 1
    b520:	8f 01       	movw	r16, r30
    b522:	0a 19       	sub	r16, r10
    b524:	1b 09       	sbc	r17, r11
    b526:	a8 01       	movw	r20, r16
    b528:	b4 01       	movw	r22, r8
    b52a:	c5 01       	movw	r24, r10
    b52c:	0e 94 df 8c 	call	0x119be	; 0x119be <strncmp>
    b530:	89 2b       	or	r24, r25
    b532:	09 f0       	breq	.+2      	; 0xb536 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1210>
    b534:	9c c0       	rjmp	.+312    	; 0xb66e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1348>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1776
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    b536:	90 2f       	mov	r25, r16
    b538:	80 2f       	mov	r24, r16
    b53a:	89 1b       	sub	r24, r25
    b53c:	20 2f       	mov	r18, r16
    b53e:	30 e0       	ldi	r19, 0x00	; 0
    b540:	f4 01       	movw	r30, r8
    b542:	01 90       	ld	r0, Z+
    b544:	00 20       	and	r0, r0
    b546:	e9 f7       	brne	.-6      	; 0xb542 <mqtt_callback(char*, unsigned char*, unsigned int)+0x121c>
    b548:	31 97       	sbiw	r30, 0x01	; 1
    b54a:	e8 19       	sub	r30, r8
    b54c:	f9 09       	sbc	r31, r9
    b54e:	2e 17       	cp	r18, r30
    b550:	3f 07       	cpc	r19, r31
    b552:	58 f4       	brcc	.+22     	; 0xb56a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1244>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1778
    {
      str1[cnt] = topic[f];
    b554:	f5 01       	movw	r30, r10
    b556:	e8 0f       	add	r30, r24
    b558:	f1 1d       	adc	r31, r1
    b55a:	28 0d       	add	r18, r8
    b55c:	39 1d       	adc	r19, r9
    b55e:	d9 01       	movw	r26, r18
    b560:	8c 91       	ld	r24, X
    b562:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1779
      str1[cnt + 1] = 0;
    b564:	11 82       	std	Z+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1776
  strcat(str1, device.nazev);
  strcat(str1, "/ring/get/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    b566:	0f 5f       	subi	r16, 0xFF	; 255
    b568:	e7 cf       	rjmp	.-50     	; 0xb538 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1212>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1783
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    b56a:	63 e1       	ldi	r22, 0x13	; 19
    b56c:	74 e0       	ldi	r23, 0x04	; 4
    b56e:	c5 01       	movw	r24, r10
    b570:	0e 94 49 80 	call	0x10092	; 0x10092 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1782
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    b574:	61 2c       	mov	r6, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1784
    pch = strtok (str1, "/");
    while (pch != NULL)
    b576:	00 97       	sbiw	r24, 0x00	; 0
    b578:	09 f4       	brne	.+2      	; 0xb57c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1256>
    b57a:	79 c0       	rjmp	.+242    	; 0xb66e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1348>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1786
    {
      if (cnt == 0) id = atoi(my_payload);
    b57c:	61 10       	cpse	r6, r1
    b57e:	0e c0       	rjmp	.+28     	; 0xb59c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1276>
    b580:	8a e4       	ldi	r24, 0x4A	; 74
    b582:	9e e0       	ldi	r25, 0x0E	; 14
    b584:	0e 94 10 80 	call	0x10020	; 0x10020 <atoi>
    b588:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1787
      if (id < MAX_THERMOSTAT)
    b58a:	be e0       	ldi	r27, 0x0E	; 14
    b58c:	b8 17       	cp	r27, r24
    b58e:	08 f0       	brcs	.+2      	; 0xb592 <mqtt_callback(char*, unsigned char*, unsigned int)+0x126c>
    b590:	66 c0       	rjmp	.+204    	; 0xb65e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1338>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1793
      {
        if ((cnt == 1) && (strcmp(pch, "pid") == 0))  mqtt_send_pid_variable(id);
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
    b592:	8f ef       	ldi	r24, 0xFF	; 255
    b594:	94 e0       	ldi	r25, 0x04	; 4
    b596:	0e 94 98 49 	call	0x9330	; 0x9330 <log_error(PubSubClient*, char*) [clone .constprop.70]>
    b59a:	61 c0       	rjmp	.+194    	; 0xb65e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1338>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1787
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(my_payload);
      if (id < MAX_THERMOSTAT)
    b59c:	ee e0       	ldi	r30, 0x0E	; 14
    b59e:	e7 15       	cp	r30, r7
    b5a0:	c0 f3       	brcs	.-16     	; 0xb592 <mqtt_callback(char*, unsigned char*, unsigned int)+0x126c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1789
      {
        if ((cnt == 1) && (strcmp(pch, "pid") == 0))  mqtt_send_pid_variable(id);
    b5a2:	f1 e0       	ldi	r31, 0x01	; 1
    b5a4:	6f 12       	cpse	r6, r31
    b5a6:	5b c0       	rjmp	.+182    	; 0xb65e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1338>
    b5a8:	6b ef       	ldi	r22, 0xFB	; 251
    b5aa:	74 e0       	ldi	r23, 0x04	; 4
    b5ac:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
    b5b0:	89 2b       	or	r24, r25
    b5b2:	09 f0       	breq	.+2      	; 0xb5b6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1290>
    b5b4:	54 c0       	rjmp	.+168    	; 0xb65e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1338>
thermostat_get_pid_p():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:65
  array_pids[idx]->Compute();
}

float thermostat_get_pid_p(uint8_t idx)
{
  return PID_p[idx];
    b5b6:	c7 2c       	mov	r12, r7
    b5b8:	d1 2c       	mov	r13, r1
    b5ba:	76 01       	movw	r14, r12
    b5bc:	ee 0c       	add	r14, r14
    b5be:	ff 1c       	adc	r15, r15
    b5c0:	ee 0c       	add	r14, r14
    b5c2:	ff 1c       	adc	r15, r15
    b5c4:	f7 01       	movw	r30, r14
    b5c6:	e0 5b       	subi	r30, 0xB0	; 176
    b5c8:	f5 4f       	sbci	r31, 0xF5	; 245
mqtt_send_pid_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2347
   /thermctl-out/XXXXX/pid/IDX/kd
*/
void mqtt_send_pid_variable(uint8_t idx)
{
  char payload[32];
  dtostrf(thermostat_get_pid_p(idx), 7, 2, payload);
    b5ca:	60 81       	ld	r22, Z
    b5cc:	71 81       	ldd	r23, Z+1	; 0x01
    b5ce:	82 81       	ldd	r24, Z+2	; 0x02
    b5d0:	93 81       	ldd	r25, Z+3	; 0x03
    b5d2:	8e 01       	movw	r16, r28
    b5d4:	08 5b       	subi	r16, 0xB8	; 184
    b5d6:	1f 4f       	sbci	r17, 0xFF	; 255
    b5d8:	22 e0       	ldi	r18, 0x02	; 2
    b5da:	47 e0       	ldi	r20, 0x07	; 7
    b5dc:	0e 94 eb 7e 	call	0xfdd6	; 0xfdd6 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2348
  send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "pid", idx, "kp", payload);
    b5e0:	98 01       	movw	r18, r16
    b5e2:	4d ea       	ldi	r20, 0xAD	; 173
    b5e4:	56 e0       	ldi	r21, 0x06	; 6
    b5e6:	67 2d       	mov	r22, r7
    b5e8:	8b ef       	ldi	r24, 0xFB	; 251
    b5ea:	94 e0       	ldi	r25, 0x04	; 4
    b5ec:	0e 94 ad 48 	call	0x915a	; 0x915a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.140]>
thermostat_get_pid_i():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:85
  return PID_Output[idx];
}

float thermostat_get_pid_i(uint8_t idx)
{
  return PID_i[idx];
    b5f0:	f7 01       	movw	r30, r14
    b5f2:	e4 57       	subi	r30, 0x74	; 116
    b5f4:	f5 4f       	sbci	r31, 0xF5	; 245
mqtt_send_pid_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2349
  dtostrf(thermostat_get_pid_i(idx), 7, 2, payload);
    b5f6:	60 81       	ld	r22, Z
    b5f8:	71 81       	ldd	r23, Z+1	; 0x01
    b5fa:	82 81       	ldd	r24, Z+2	; 0x02
    b5fc:	93 81       	ldd	r25, Z+3	; 0x03
    b5fe:	22 e0       	ldi	r18, 0x02	; 2
    b600:	47 e0       	ldi	r20, 0x07	; 7
    b602:	0e 94 eb 7e 	call	0xfdd6	; 0xfdd6 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2350
  send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "pid", idx, "ki", payload);
    b606:	98 01       	movw	r18, r16
    b608:	44 eb       	ldi	r20, 0xB4	; 180
    b60a:	56 e0       	ldi	r21, 0x06	; 6
    b60c:	67 2d       	mov	r22, r7
    b60e:	8b ef       	ldi	r24, 0xFB	; 251
    b610:	94 e0       	ldi	r25, 0x04	; 4
    b612:	0e 94 ad 48 	call	0x915a	; 0x915a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.140]>
thermostat_get_pid_d():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:90
}

float thermostat_get_pid_d(uint8_t idx)
{
  return PID_d[idx];
    b616:	f7 01       	movw	r30, r14
    b618:	e8 53       	subi	r30, 0x38	; 56
    b61a:	f5 4f       	sbci	r31, 0xF5	; 245
mqtt_send_pid_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2351
  dtostrf(thermostat_get_pid_d(idx), 7, 2, payload);
    b61c:	60 81       	ld	r22, Z
    b61e:	71 81       	ldd	r23, Z+1	; 0x01
    b620:	82 81       	ldd	r24, Z+2	; 0x02
    b622:	93 81       	ldd	r25, Z+3	; 0x03
    b624:	22 e0       	ldi	r18, 0x02	; 2
    b626:	47 e0       	ldi	r20, 0x07	; 7
    b628:	0e 94 eb 7e 	call	0xfdd6	; 0xfdd6 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2352
  send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "pid", idx, "kd", payload);
    b62c:	98 01       	movw	r18, r16
    b62e:	4b eb       	ldi	r20, 0xBB	; 187
    b630:	56 e0       	ldi	r21, 0x06	; 6
    b632:	67 2d       	mov	r22, r7
    b634:	8b ef       	ldi	r24, 0xFB	; 251
    b636:	94 e0       	ldi	r25, 0x04	; 4
    b638:	0e 94 ad 48 	call	0x915a	; 0x915a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.140]>
thermostat_get_pid_time():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:95
}

uint8_t thermostat_get_pid_time(uint8_t idx)
{
  return PID_time[idx];
    b63c:	f6 01       	movw	r30, r12
    b63e:	ec 5f       	subi	r30, 0xFC	; 252
    b640:	f4 4f       	sbci	r31, 0xF4	; 244
mqtt_send_pid_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2353
  itoa(thermostat_get_pid_time(idx), payload, 10);
    b642:	80 81       	ld	r24, Z
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    b644:	4a e0       	ldi	r20, 0x0A	; 10
    b646:	b8 01       	movw	r22, r16
    b648:	90 e0       	ldi	r25, 0x00	; 0
    b64a:	0e 94 7f 80 	call	0x100fe	; 0x100fe <__itoa_ncheck>
mqtt_send_pid_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2354
  send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "pid", idx, "time", payload);
    b64e:	98 01       	movw	r18, r16
    b650:	42 ec       	ldi	r20, 0xC2	; 194
    b652:	56 e0       	ldi	r21, 0x06	; 6
    b654:	67 2d       	mov	r22, r7
    b656:	8b ef       	ldi	r24, 0xFB	; 251
    b658:	94 e0       	ldi	r25, 0x04	; 4
    b65a:	0e 94 ad 48 	call	0x915a	; 0x915a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.140]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1795
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
      }
      pch = strtok (NULL, "/");
    b65e:	63 e1       	ldi	r22, 0x13	; 19
    b660:	74 e0       	ldi	r23, 0x04	; 4
    b662:	90 e0       	ldi	r25, 0x00	; 0
    b664:	80 e0       	ldi	r24, 0x00	; 0
    b666:	0e 94 49 80 	call	0x10092	; 0x10092 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1796
      cnt++;
    b66a:	63 94       	inc	r6
    b66c:	84 cf       	rjmp	.-248    	; 0xb576 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1250>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1815
  //// thermctl-in/XXXXX/ring/set/IDcko/output
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_kp
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_ki
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_kd
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_time
  strcpy_P(str1, thermctl_header_in);
    b66e:	6c ea       	ldi	r22, 0xAC	; 172
    b670:	74 e1       	ldi	r23, 0x14	; 20
    b672:	c5 01       	movw	r24, r10
    b674:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1816
  strcat(str1, device.nazev);
    b678:	6c e2       	ldi	r22, 0x2C	; 44
    b67a:	70 e1       	ldi	r23, 0x10	; 16
    b67c:	c5 01       	movw	r24, r10
    b67e:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1817
  strcat(str1, "/ring/set/");
    b682:	6f e0       	ldi	r22, 0x0F	; 15
    b684:	75 e0       	ldi	r23, 0x05	; 5
    b686:	c5 01       	movw	r24, r10
    b688:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1818
  if (strncmp(str1, topic, strlen(str1)) == 0)
    b68c:	f5 01       	movw	r30, r10
    b68e:	01 90       	ld	r0, Z+
    b690:	00 20       	and	r0, r0
    b692:	e9 f7       	brne	.-6      	; 0xb68e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1368>
    b694:	31 97       	sbiw	r30, 0x01	; 1
    b696:	8f 01       	movw	r16, r30
    b698:	0a 19       	sub	r16, r10
    b69a:	1b 09       	sbc	r17, r11
    b69c:	a8 01       	movw	r20, r16
    b69e:	b4 01       	movw	r22, r8
    b6a0:	c5 01       	movw	r24, r10
    b6a2:	0e 94 df 8c 	call	0x119be	; 0x119be <strncmp>
    b6a6:	89 2b       	or	r24, r25
    b6a8:	09 f0       	breq	.+2      	; 0xb6ac <mqtt_callback(char*, unsigned char*, unsigned int)+0x1386>
    b6aa:	b1 c1       	rjmp	.+866    	; 0xba0e <mqtt_callback(char*, unsigned char*, unsigned int)+0x16e8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1821
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    b6ac:	90 2f       	mov	r25, r16
    b6ae:	80 2f       	mov	r24, r16
    b6b0:	89 1b       	sub	r24, r25
    b6b2:	20 2f       	mov	r18, r16
    b6b4:	30 e0       	ldi	r19, 0x00	; 0
    b6b6:	f4 01       	movw	r30, r8
    b6b8:	01 90       	ld	r0, Z+
    b6ba:	00 20       	and	r0, r0
    b6bc:	e9 f7       	brne	.-6      	; 0xb6b8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1392>
    b6be:	31 97       	sbiw	r30, 0x01	; 1
    b6c0:	e8 19       	sub	r30, r8
    b6c2:	f9 09       	sbc	r31, r9
    b6c4:	2e 17       	cp	r18, r30
    b6c6:	3f 07       	cpc	r19, r31
    b6c8:	58 f4       	brcc	.+22     	; 0xb6e0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x13ba>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1823
    {
      str1[cnt] = topic[f];
    b6ca:	f5 01       	movw	r30, r10
    b6cc:	e8 0f       	add	r30, r24
    b6ce:	f1 1d       	adc	r31, r1
    b6d0:	28 0d       	add	r18, r8
    b6d2:	39 1d       	adc	r19, r9
    b6d4:	d9 01       	movw	r26, r18
    b6d6:	8c 91       	ld	r24, X
    b6d8:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1824
      str1[cnt + 1] = 0;
    b6da:	11 82       	std	Z+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1821
  strcat(str1, device.nazev);
  strcat(str1, "/ring/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    b6dc:	0f 5f       	subi	r16, 0xFF	; 255
    b6de:	e7 cf       	rjmp	.-50     	; 0xb6ae <mqtt_callback(char*, unsigned char*, unsigned int)+0x1388>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1828
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    b6e0:	63 e1       	ldi	r22, 0x13	; 19
    b6e2:	74 e0       	ldi	r23, 0x04	; 4
    b6e4:	c5 01       	movw	r24, r10
    b6e6:	0e 94 49 80 	call	0x10092	; 0x10092 <strtok>
    b6ea:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1827
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    b6ec:	d1 2c       	mov	r13, r1
thermostat_ring_set_output():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:127
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
}
void thermostat_ring_set_output(uint8_t idx, uint8_t output)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output, output);
    b6ee:	51 e2       	ldi	r21, 0x21	; 33
    b6f0:	e5 2e       	mov	r14, r21
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1829
    pch = strtok (str1, "/");
    while (pch != NULL)
    b6f2:	01 15       	cp	r16, r1
    b6f4:	11 05       	cpc	r17, r1
    b6f6:	09 f4       	brne	.+2      	; 0xb6fa <mqtt_callback(char*, unsigned char*, unsigned int)+0x13d4>
    b6f8:	8a c1       	rjmp	.+788    	; 0xba0e <mqtt_callback(char*, unsigned char*, unsigned int)+0x16e8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1831
    {
      if (cnt == 0) id = atoi(pch);
    b6fa:	d1 10       	cpse	r13, r1
    b6fc:	0d c0       	rjmp	.+26     	; 0xb718 <mqtt_callback(char*, unsigned char*, unsigned int)+0x13f2>
    b6fe:	c8 01       	movw	r24, r16
    b700:	0e 94 10 80 	call	0x10020	; 0x10020 <atoi>
    b704:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1832
      if (id < MAX_THERMOSTAT)
    b706:	be e0       	ldi	r27, 0x0E	; 14
    b708:	b8 17       	cp	r27, r24
    b70a:	08 f0       	brcs	.+2      	; 0xb70e <mqtt_callback(char*, unsigned char*, unsigned int)+0x13e8>
    b70c:	77 c1       	rjmp	.+750    	; 0xb9fc <mqtt_callback(char*, unsigned char*, unsigned int)+0x16d6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1869
        if ((cnt == 1) && (strcmp(pch, "pid_kd") == 0)) thermostat_ring_pid_set_kd(id, atof(my_payload));
        if ((cnt == 1) && (strcmp(pch, "pid_time") == 0)) thermostat_ring_pid_set_time(id, atoi(my_payload));
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
    b70e:	8f ef       	ldi	r24, 0xFF	; 255
    b710:	94 e0       	ldi	r25, 0x04	; 4
    b712:	0e 94 98 49 	call	0x9330	; 0x9330 <log_error(PubSubClient*, char*) [clone .constprop.70]>
    b716:	72 c1       	rjmp	.+740    	; 0xb9fc <mqtt_callback(char*, unsigned char*, unsigned int)+0x16d6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1832
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < MAX_THERMOSTAT)
    b718:	ee e0       	ldi	r30, 0x0E	; 14
    b71a:	e7 15       	cp	r30, r7
    b71c:	c0 f3       	brcs	.-16     	; 0xb70e <mqtt_callback(char*, unsigned char*, unsigned int)+0x13e8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1834
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0)) thermostat_ring_set_name(id, my_payload);
    b71e:	f1 e0       	ldi	r31, 0x01	; 1
    b720:	df 12       	cpse	r13, r31
    b722:	6c c1       	rjmp	.+728    	; 0xb9fc <mqtt_callback(char*, unsigned char*, unsigned int)+0x16d6>
    b724:	64 e0       	ldi	r22, 0x04	; 4
    b726:	76 e0       	ldi	r23, 0x06	; 6
    b728:	c8 01       	movw	r24, r16
    b72a:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
    b72e:	89 2b       	or	r24, r25
    b730:	29 f4       	brne	.+10     	; 0xb73c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1416>
    b732:	6a e4       	ldi	r22, 0x4A	; 74
    b734:	7e e0       	ldi	r23, 0x0E	; 14
    b736:	87 2d       	mov	r24, r7
    b738:	0e 94 9c 45 	call	0x8b38	; 0x8b38 <thermostat_ring_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1835
        if ((cnt == 1) && (strcmp(pch, "program") == 0))
    b73c:	64 e8       	ldi	r22, 0x84	; 132
    b73e:	76 e0       	ldi	r23, 0x06	; 6
    b740:	c8 01       	movw	r24, r16
    b742:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
    b746:	89 2b       	or	r24, r25
    b748:	81 f4       	brne	.+32     	; 0xb76a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1444>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1836
          if (atoi(my_payload) < AVAILABLE_PROGRAM)
    b74a:	8a e4       	ldi	r24, 0x4A	; 74
    b74c:	9e e0       	ldi	r25, 0x0E	; 14
    b74e:	0e 94 10 80 	call	0x10020	; 0x10020 <atoi>
    b752:	88 30       	cpi	r24, 0x08	; 8
    b754:	91 05       	cpc	r25, r1
    b756:	4c f4       	brge	.+18     	; 0xb76a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1444>
thermostat_ring_set_program_id():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:148
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
}
void thermostat_ring_set_program_id(uint8_t idx, uint8_t id)
{
  return EEPROM.write((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program, id);
    b758:	7e 9c       	mul	r7, r14
    b75a:	90 01       	movw	r18, r0
    b75c:	11 24       	eor	r1, r1
    b75e:	68 2f       	mov	r22, r24
    b760:	c9 01       	movw	r24, r18
    b762:	85 5a       	subi	r24, 0xA5	; 165
    b764:	9e 4f       	sbci	r25, 0xFE	; 254
    b766:	0e 94 81 44 	call	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1838
            thermostat_ring_set_program_id(id, atoi(my_payload));
        if ((cnt == 1) && (strcmp(pch, "threshold-f") == 0)) thermostat_ring_set_mezni(id, atof(my_payload) * 10); /// thereshold hodnota presne ve floatu * 10
    b76a:	6c e8       	ldi	r22, 0x8C	; 140
    b76c:	76 e0       	ldi	r23, 0x06	; 6
    b76e:	c8 01       	movw	r24, r16
    b770:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
    b774:	89 2b       	or	r24, r25
    b776:	79 f4       	brne	.+30     	; 0xb796 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1470>
    b778:	8a e4       	ldi	r24, 0x4A	; 74
    b77a:	9e e0       	ldi	r25, 0x0E	; 14
    b77c:	0e 94 0c 80 	call	0x10018	; 0x10018 <atof>
    b780:	20 e0       	ldi	r18, 0x00	; 0
    b782:	30 e0       	ldi	r19, 0x00	; 0
    b784:	40 e2       	ldi	r20, 0x20	; 32
    b786:	51 e4       	ldi	r21, 0x41	; 65
    b788:	0e 94 25 89 	call	0x1124a	; 0x1124a <__mulsf3>
    b78c:	0e 94 6b 8b 	call	0x116d6	; 0x116d6 <__fixsfsi>
    b790:	87 2d       	mov	r24, r7
    b792:	0e 94 85 45 	call	0x8b0a	; 0x8b0a <thermostat_ring_set_mezni(unsigned char, int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1839
        if ((cnt == 1) && (strcmp(pch, "threshold") == 0)) thermostat_ring_set_mezni(id, atoi(my_payload));
    b796:	6a e7       	ldi	r22, 0x7A	; 122
    b798:	76 e0       	ldi	r23, 0x06	; 6
    b79a:	c8 01       	movw	r24, r16
    b79c:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
    b7a0:	89 2b       	or	r24, r25
    b7a2:	41 f4       	brne	.+16     	; 0xb7b4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x148e>
    b7a4:	8a e4       	ldi	r24, 0x4A	; 74
    b7a6:	9e e0       	ldi	r25, 0x0E	; 14
    b7a8:	0e 94 10 80 	call	0x10020	; 0x10020 <atoi>
    b7ac:	bc 01       	movw	r22, r24
    b7ae:	87 2d       	mov	r24, r7
    b7b0:	0e 94 85 45 	call	0x8b0a	; 0x8b0a <thermostat_ring_set_mezni(unsigned char, int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1840
        if ((cnt == 1) && (strcmp(pch, "text_mode") == 0))
    b7b4:	68 e9       	ldi	r22, 0x98	; 152
    b7b6:	76 e0       	ldi	r23, 0x06	; 6
    b7b8:	c8 01       	movw	r24, r16
    b7ba:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
    b7be:	89 2b       	or	r24, r25
    b7c0:	09 f0       	breq	.+2      	; 0xb7c4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x149e>
    b7c2:	46 c0       	rjmp	.+140    	; 0xb850 <mqtt_callback(char*, unsigned char*, unsigned int)+0x152a>
convert_text_mode():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2564
/// funkce prevadi ciselnou hodnotu na skutecne pojmenovani
uint8_t convert_text_mode(char *str2)
{
  uint8_t mode = 0;
  if (strcmp(str2, "off") == 0) mode = TERM_MODE_OFF;
  if (strcmp(str2, "heat") == 0) mode = TERM_MODE_MAX;
    b7c4:	6a e1       	ldi	r22, 0x1A	; 26
    b7c6:	75 e0       	ldi	r23, 0x05	; 5
    b7c8:	8a e4       	ldi	r24, 0x4A	; 74
    b7ca:	9e e0       	ldi	r25, 0x0E	; 14
    b7cc:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
    b7d0:	ff 24       	eor	r15, r15
    b7d2:	f3 94       	inc	r15
    b7d4:	89 2b       	or	r24, r25
    b7d6:	09 f0       	breq	.+2      	; 0xb7da <mqtt_callback(char*, unsigned char*, unsigned int)+0x14b4>
    b7d8:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2565
  if (strcmp(str2, "manual") == 0) mode = TERM_MODE_MAN_HEAT;
    b7da:	6f e1       	ldi	r22, 0x1F	; 31
    b7dc:	75 e0       	ldi	r23, 0x05	; 5
    b7de:	8a e4       	ldi	r24, 0x4A	; 74
    b7e0:	9e e0       	ldi	r25, 0x0E	; 14
    b7e2:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
    b7e6:	89 2b       	or	r24, r25
    b7e8:	11 f4       	brne	.+4      	; 0xb7ee <mqtt_callback(char*, unsigned char*, unsigned int)+0x14c8>
_Z13mqtt_callbackPcPhj():
    b7ea:	43 e0       	ldi	r20, 0x03	; 3
    b7ec:	f4 2e       	mov	r15, r20
convert_text_mode():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2566
  if (strcmp(str2, "auto") == 0) mode = TERM_MODE_PROG;
    b7ee:	66 e2       	ldi	r22, 0x26	; 38
    b7f0:	75 e0       	ldi	r23, 0x05	; 5
    b7f2:	8a e4       	ldi	r24, 0x4A	; 74
    b7f4:	9e e0       	ldi	r25, 0x0E	; 14
    b7f6:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
    b7fa:	89 2b       	or	r24, r25
    b7fc:	11 f4       	brne	.+4      	; 0xb802 <mqtt_callback(char*, unsigned char*, unsigned int)+0x14dc>
_Z13mqtt_callbackPcPhj():
    b7fe:	32 e0       	ldi	r19, 0x02	; 2
    b800:	f3 2e       	mov	r15, r19
convert_text_mode():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2567
  if (strcmp(str2, "cool") == 0) mode = TERM_MODE_CLIMATE_MAX;
    b802:	6b e2       	ldi	r22, 0x2B	; 43
    b804:	75 e0       	ldi	r23, 0x05	; 5
    b806:	8a e4       	ldi	r24, 0x4A	; 74
    b808:	9e e0       	ldi	r25, 0x0E	; 14
    b80a:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
    b80e:	89 2b       	or	r24, r25
    b810:	11 f4       	brne	.+4      	; 0xb816 <mqtt_callback(char*, unsigned char*, unsigned int)+0x14f0>
_Z13mqtt_callbackPcPhj():
    b812:	24 e0       	ldi	r18, 0x04	; 4
    b814:	f2 2e       	mov	r15, r18
convert_text_mode():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2568
  if (strcmp(str2, "fan_only") == 0) mode = TERM_MODE_FAN;
    b816:	60 e3       	ldi	r22, 0x30	; 48
    b818:	75 e0       	ldi	r23, 0x05	; 5
    b81a:	8a e4       	ldi	r24, 0x4A	; 74
    b81c:	9e e0       	ldi	r25, 0x0E	; 14
    b81e:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
    b822:	89 2b       	or	r24, r25
    b824:	11 f4       	brne	.+4      	; 0xb82a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1504>
_Z13mqtt_callbackPcPhj():
    b826:	96 e0       	ldi	r25, 0x06	; 6
    b828:	f9 2e       	mov	r15, r25
thermostat_ring_set_mode():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:180
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_mode);
}
void thermostat_ring_set_mode(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mode, id);
    b82a:	7e 9c       	mul	r7, r14
    b82c:	c0 01       	movw	r24, r0
    b82e:	11 24       	eor	r1, r1
    b830:	6f 2d       	mov	r22, r15
    b832:	82 5a       	subi	r24, 0xA2	; 162
    b834:	9e 4f       	sbci	r25, 0xFE	; 254
    b836:	0e 94 81 44 	call	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1844
        if ((cnt == 1) && (strcmp(pch, "threshold") == 0)) thermostat_ring_set_mezni(id, atoi(my_payload));
        if ((cnt == 1) && (strcmp(pch, "text_mode") == 0))
        {
          active = convert_text_mode(my_payload);
          thermostat_ring_set_mode(id, active);
          if (active == TERM_MODE_MAN_HEAT)
    b83a:	23 e0       	ldi	r18, 0x03	; 3
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1845
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 0);
    b83c:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1844
        if ((cnt == 1) && (strcmp(pch, "threshold") == 0)) thermostat_ring_set_mezni(id, atoi(my_payload));
        if ((cnt == 1) && (strcmp(pch, "text_mode") == 0))
        {
          active = convert_text_mode(my_payload);
          thermostat_ring_set_mode(id, active);
          if (active == TERM_MODE_MAN_HEAT)
    b83e:	f2 16       	cp	r15, r18
    b840:	21 f0       	breq	.+8      	; 0xb84a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1524>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1846
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 0);
          if (active == TERM_MODE_MAN_COOL)
    b842:	35 e0       	ldi	r19, 0x05	; 5
    b844:	f3 12       	cpse	r15, r19
    b846:	04 c0       	rjmp	.+8      	; 0xb850 <mqtt_callback(char*, unsigned char*, unsigned int)+0x152a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1847
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 1);
    b848:	61 e0       	ldi	r22, 0x01	; 1
    b84a:	87 2d       	mov	r24, r7
    b84c:	0e 94 f2 72 	call	0xe5e4	; 0xe5e4 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.66]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1849
        }
        if ((cnt == 1) && (strcmp(pch, "mode") == 0))
    b850:	6d e9       	ldi	r22, 0x9D	; 157
    b852:	76 e0       	ldi	r23, 0x06	; 6
    b854:	c8 01       	movw	r24, r16
    b856:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
    b85a:	89 2b       	or	r24, r25
    b85c:	c1 f4       	brne	.+48     	; 0xb88e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1568>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1851
        {
          active = atoi(my_payload);
    b85e:	8a e4       	ldi	r24, 0x4A	; 74
    b860:	9e e0       	ldi	r25, 0x0E	; 14
    b862:	0e 94 10 80 	call	0x10020	; 0x10020 <atoi>
    b866:	f8 2e       	mov	r15, r24
thermostat_ring_set_mode():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:180
    b868:	7e 9c       	mul	r7, r14
    b86a:	c0 01       	movw	r24, r0
    b86c:	11 24       	eor	r1, r1
    b86e:	6f 2d       	mov	r22, r15
    b870:	82 5a       	subi	r24, 0xA2	; 162
    b872:	9e 4f       	sbci	r25, 0xFE	; 254
    b874:	0e 94 81 44 	call	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1853
          thermostat_ring_set_mode(id, active);
          if (active == TERM_MODE_MAN_HEAT)
    b878:	83 e0       	ldi	r24, 0x03	; 3
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1854
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 0);
    b87a:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1853
        }
        if ((cnt == 1) && (strcmp(pch, "mode") == 0))
        {
          active = atoi(my_payload);
          thermostat_ring_set_mode(id, active);
          if (active == TERM_MODE_MAN_HEAT)
    b87c:	f8 16       	cp	r15, r24
    b87e:	21 f0       	breq	.+8      	; 0xb888 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1562>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1855
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 0);
          if (active == TERM_MODE_MAN_COOL)
    b880:	a5 e0       	ldi	r26, 0x05	; 5
    b882:	fa 12       	cpse	r15, r26
    b884:	04 c0       	rjmp	.+8      	; 0xb88e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1568>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1856
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 1);
    b886:	61 e0       	ldi	r22, 0x01	; 1
    b888:	87 2d       	mov	r24, r7
    b88a:	0e 94 f2 72 	call	0xe5e4	; 0xe5e4 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.66]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1858
        }
        if ((cnt == 1) && (strcmp(pch, "tds") == 0)) thermostat_ring_set_asociate_tds(id, atoi(my_payload));
    b88e:	6e e4       	ldi	r22, 0x4E	; 78
    b890:	74 e0       	ldi	r23, 0x04	; 4
    b892:	c8 01       	movw	r24, r16
    b894:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
    b898:	89 2b       	or	r24, r25
    b89a:	69 f4       	brne	.+26     	; 0xb8b6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1590>
    b89c:	8a e4       	ldi	r24, 0x4A	; 74
    b89e:	9e e0       	ldi	r25, 0x0E	; 14
    b8a0:	0e 94 10 80 	call	0x10020	; 0x10020 <atoi>
thermostat_ring_set_asociate_tds():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:170
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
}
void thermostat_ring_set_asociate_tds(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds, id);
    b8a4:	7e 9c       	mul	r7, r14
    b8a6:	90 01       	movw	r18, r0
    b8a8:	11 24       	eor	r1, r1
    b8aa:	68 2f       	mov	r22, r24
    b8ac:	c9 01       	movw	r24, r18
    b8ae:	84 5a       	subi	r24, 0xA4	; 164
    b8b0:	9e 4f       	sbci	r25, 0xFE	; 254
    b8b2:	0e 94 81 44 	call	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1859
        if ((cnt == 1) && (strcmp(pch, "rtds") == 0)) thermostat_ring_set_asociate_tds(id, atoi(my_payload) + TDS_MEMORY_MAP_RTDS);
    b8b6:	6d e4       	ldi	r22, 0x4D	; 77
    b8b8:	74 e0       	ldi	r23, 0x04	; 4
    b8ba:	c8 01       	movw	r24, r16
    b8bc:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
    b8c0:	89 2b       	or	r24, r25
    b8c2:	69 f4       	brne	.+26     	; 0xb8de <mqtt_callback(char*, unsigned char*, unsigned int)+0x15b8>
    b8c4:	8a e4       	ldi	r24, 0x4A	; 74
    b8c6:	9e e0       	ldi	r25, 0x0E	; 14
    b8c8:	0e 94 10 80 	call	0x10020	; 0x10020 <atoi>
    b8cc:	60 e1       	ldi	r22, 0x10	; 16
    b8ce:	68 0f       	add	r22, r24
thermostat_ring_set_asociate_tds():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:170
    b8d0:	7e 9c       	mul	r7, r14
    b8d2:	c0 01       	movw	r24, r0
    b8d4:	11 24       	eor	r1, r1
    b8d6:	84 5a       	subi	r24, 0xA4	; 164
    b8d8:	9e 4f       	sbci	r25, 0xFE	; 254
    b8da:	0e 94 81 44 	call	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1860
        if ((cnt == 1) && (strcmp(pch, "active") == 0)) thermostat_ring_set_active(id, atoi(my_payload));
    b8de:	62 e5       	ldi	r22, 0x52	; 82
    b8e0:	74 e0       	ldi	r23, 0x04	; 4
    b8e2:	c8 01       	movw	r24, r16
    b8e4:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
    b8e8:	89 2b       	or	r24, r25
    b8ea:	69 f4       	brne	.+26     	; 0xb906 <mqtt_callback(char*, unsigned char*, unsigned int)+0x15e0>
    b8ec:	8a e4       	ldi	r24, 0x4A	; 74
    b8ee:	9e e0       	ldi	r25, 0x0E	; 14
    b8f0:	0e 94 10 80 	call	0x10020	; 0x10020 <atoi>
thermostat_ring_set_active():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:137
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active);
}
void thermostat_ring_set_active(uint8_t idx, uint8_t ready)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active, ready);
    b8f4:	7e 9c       	mul	r7, r14
    b8f6:	90 01       	movw	r18, r0
    b8f8:	11 24       	eor	r1, r1
    b8fa:	68 2f       	mov	r22, r24
    b8fc:	c9 01       	movw	r24, r18
    b8fe:	83 5a       	subi	r24, 0xA3	; 163
    b900:	9e 4f       	sbci	r25, 0xFE	; 254
    b902:	0e 94 81 44 	call	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1861
        if ((cnt == 1) && (strcmp(pch, "output") == 0)) thermostat_ring_set_output(id, atoi(my_payload));
    b906:	62 ea       	ldi	r22, 0xA2	; 162
    b908:	76 e0       	ldi	r23, 0x06	; 6
    b90a:	c8 01       	movw	r24, r16
    b90c:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
    b910:	89 2b       	or	r24, r25
    b912:	69 f4       	brne	.+26     	; 0xb92e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1608>
    b914:	8a e4       	ldi	r24, 0x4A	; 74
    b916:	9e e0       	ldi	r25, 0x0E	; 14
    b918:	0e 94 10 80 	call	0x10020	; 0x10020 <atoi>
thermostat_ring_set_output():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:127
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
}
void thermostat_ring_set_output(uint8_t idx, uint8_t output)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output, output);
    b91c:	7e 9c       	mul	r7, r14
    b91e:	90 01       	movw	r18, r0
    b920:	11 24       	eor	r1, r1
    b922:	68 2f       	mov	r22, r24
    b924:	c9 01       	movw	r24, r18
    b926:	81 5a       	subi	r24, 0xA1	; 161
    b928:	9e 4f       	sbci	r25, 0xFE	; 254
    b92a:	0e 94 81 44 	call	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1862
        if ((cnt == 1) && (strcmp(pch, "pid_kp") == 0)) thermostat_ring_pid_set_kp(id, atof(my_payload));
    b92e:	69 ea       	ldi	r22, 0xA9	; 169
    b930:	76 e0       	ldi	r23, 0x06	; 6
    b932:	c8 01       	movw	r24, r16
    b934:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
    b938:	89 2b       	or	r24, r25
    b93a:	a1 f4       	brne	.+40     	; 0xb964 <mqtt_callback(char*, unsigned char*, unsigned int)+0x163e>
    b93c:	8a e4       	ldi	r24, 0x4A	; 74
    b93e:	9e e0       	ldi	r25, 0x0E	; 14
    b940:	0e 94 0c 80 	call	0x10018	; 0x10018 <atof>
thermostat_ring_pid_set_kp():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:242
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
}

void thermostat_ring_pid_set_kp(uint8_t id, float x)
{
  PID_p[id] = x;
    b944:	b4 e0       	ldi	r27, 0x04	; 4
    b946:	7b 9e       	mul	r7, r27
    b948:	f0 01       	movw	r30, r0
    b94a:	11 24       	eor	r1, r1
    b94c:	e0 5b       	subi	r30, 0xB0	; 176
    b94e:	f5 4f       	sbci	r31, 0xF5	; 245
    b950:	60 83       	st	Z, r22
    b952:	71 83       	std	Z+1, r23	; 0x01
    b954:	82 83       	std	Z+2, r24	; 0x02
    b956:	93 83       	std	Z+3, r25	; 0x03
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:243
  thermostat_ring_update_pid_parameters(id);
    b958:	87 2d       	mov	r24, r7
    b95a:	0e 94 00 2c 	call	0x5800	; 0x5800 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:244
  thermostat_ring_set_pid_eeprom(id);
    b95e:	87 2d       	mov	r24, r7
    b960:	0e 94 41 45 	call	0x8a82	; 0x8a82 <thermostat_ring_set_pid_eeprom(unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1863
        if ((cnt == 1) && (strcmp(pch, "pid_ki") == 0)) thermostat_ring_pid_set_ki(id, atof(my_payload));
    b964:	60 eb       	ldi	r22, 0xB0	; 176
    b966:	76 e0       	ldi	r23, 0x06	; 6
    b968:	c8 01       	movw	r24, r16
    b96a:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
    b96e:	89 2b       	or	r24, r25
    b970:	a1 f4       	brne	.+40     	; 0xb99a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1674>
    b972:	8a e4       	ldi	r24, 0x4A	; 74
    b974:	9e e0       	ldi	r25, 0x0E	; 14
    b976:	0e 94 0c 80 	call	0x10018	; 0x10018 <atof>
thermostat_ring_pid_set_ki():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:248
}
void thermostat_ring_pid_set_ki(uint8_t id, float x)
{
  PID_i[id] = x;
    b97a:	24 e0       	ldi	r18, 0x04	; 4
    b97c:	72 9e       	mul	r7, r18
    b97e:	f0 01       	movw	r30, r0
    b980:	11 24       	eor	r1, r1
    b982:	e4 57       	subi	r30, 0x74	; 116
    b984:	f5 4f       	sbci	r31, 0xF5	; 245
    b986:	60 83       	st	Z, r22
    b988:	71 83       	std	Z+1, r23	; 0x01
    b98a:	82 83       	std	Z+2, r24	; 0x02
    b98c:	93 83       	std	Z+3, r25	; 0x03
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:249
  thermostat_ring_update_pid_parameters(id);
    b98e:	87 2d       	mov	r24, r7
    b990:	0e 94 00 2c 	call	0x5800	; 0x5800 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:250
  thermostat_ring_set_pid_eeprom(id);
    b994:	87 2d       	mov	r24, r7
    b996:	0e 94 41 45 	call	0x8a82	; 0x8a82 <thermostat_ring_set_pid_eeprom(unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1864
        if ((cnt == 1) && (strcmp(pch, "pid_kd") == 0)) thermostat_ring_pid_set_kd(id, atof(my_payload));
    b99a:	67 eb       	ldi	r22, 0xB7	; 183
    b99c:	76 e0       	ldi	r23, 0x06	; 6
    b99e:	c8 01       	movw	r24, r16
    b9a0:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
    b9a4:	89 2b       	or	r24, r25
    b9a6:	a1 f4       	brne	.+40     	; 0xb9d0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x16aa>
    b9a8:	8a e4       	ldi	r24, 0x4A	; 74
    b9aa:	9e e0       	ldi	r25, 0x0E	; 14
    b9ac:	0e 94 0c 80 	call	0x10018	; 0x10018 <atof>
thermostat_ring_pid_set_kd():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:254
}
void thermostat_ring_pid_set_kd(uint8_t id, float x)
{
  PID_d[id] = x;
    b9b0:	34 e0       	ldi	r19, 0x04	; 4
    b9b2:	73 9e       	mul	r7, r19
    b9b4:	f0 01       	movw	r30, r0
    b9b6:	11 24       	eor	r1, r1
    b9b8:	e8 53       	subi	r30, 0x38	; 56
    b9ba:	f5 4f       	sbci	r31, 0xF5	; 245
    b9bc:	60 83       	st	Z, r22
    b9be:	71 83       	std	Z+1, r23	; 0x01
    b9c0:	82 83       	std	Z+2, r24	; 0x02
    b9c2:	93 83       	std	Z+3, r25	; 0x03
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:255
  thermostat_ring_update_pid_parameters(id);
    b9c4:	87 2d       	mov	r24, r7
    b9c6:	0e 94 00 2c 	call	0x5800	; 0x5800 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:256
  thermostat_ring_set_pid_eeprom(id);
    b9ca:	87 2d       	mov	r24, r7
    b9cc:	0e 94 41 45 	call	0x8a82	; 0x8a82 <thermostat_ring_set_pid_eeprom(unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1865
        if ((cnt == 1) && (strcmp(pch, "pid_time") == 0)) thermostat_ring_pid_set_time(id, atoi(my_payload));
    b9d0:	6e eb       	ldi	r22, 0xBE	; 190
    b9d2:	76 e0       	ldi	r23, 0x06	; 6
    b9d4:	c8 01       	movw	r24, r16
    b9d6:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
    b9da:	89 2b       	or	r24, r25
    b9dc:	79 f4       	brne	.+30     	; 0xb9fc <mqtt_callback(char*, unsigned char*, unsigned int)+0x16d6>
    b9de:	8a e4       	ldi	r24, 0x4A	; 74
    b9e0:	9e e0       	ldi	r25, 0x0E	; 14
    b9e2:	0e 94 10 80 	call	0x10020	; 0x10020 <atoi>
thermostat_ring_pid_set_time():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:261
}

void thermostat_ring_pid_set_time(uint8_t id, uint8_t timer)
{
  PID_time[id] = timer;
    b9e6:	e7 2d       	mov	r30, r7
    b9e8:	f0 e0       	ldi	r31, 0x00	; 0
    b9ea:	ec 5f       	subi	r30, 0xFC	; 252
    b9ec:	f4 4f       	sbci	r31, 0xF4	; 244
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1865
    b9ee:	80 83       	st	Z, r24
thermostat_ring_pid_set_time():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:262
  thermostat_ring_update_pid_parameters(id);
    b9f0:	87 2d       	mov	r24, r7
    b9f2:	0e 94 00 2c 	call	0x5800	; 0x5800 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:263
  thermostat_ring_set_pid_eeprom(id);
    b9f6:	87 2d       	mov	r24, r7
    b9f8:	0e 94 41 45 	call	0x8a82	; 0x8a82 <thermostat_ring_set_pid_eeprom(unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1871
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
      }
      pch = strtok (NULL, "/");
    b9fc:	63 e1       	ldi	r22, 0x13	; 19
    b9fe:	74 e0       	ldi	r23, 0x04	; 4
    ba00:	90 e0       	ldi	r25, 0x00	; 0
    ba02:	80 e0       	ldi	r24, 0x00	; 0
    ba04:	0e 94 49 80 	call	0x10092	; 0x10092 <strtok>
    ba08:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1872
      cnt++;
    ba0a:	d3 94       	inc	r13
    ba0c:	72 ce       	rjmp	.-796    	; 0xb6f2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x13cc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1877
    }

  }
  //// nastaveni ringu do vychoziho stavu
  strcpy_P(str1, thermctl_header_in);
    ba0e:	6c ea       	ldi	r22, 0xAC	; 172
    ba10:	74 e1       	ldi	r23, 0x14	; 20
    ba12:	c5 01       	movw	r24, r10
    ba14:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1878
  strcat(str1, device.nazev);
    ba18:	6c e2       	ldi	r22, 0x2C	; 44
    ba1a:	70 e1       	ldi	r23, 0x10	; 16
    ba1c:	c5 01       	movw	r24, r10
    ba1e:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1879
  strcat(str1, "/ring/clear");
    ba22:	69 e3       	ldi	r22, 0x39	; 57
    ba24:	75 e0       	ldi	r23, 0x05	; 5
    ba26:	c5 01       	movw	r24, r10
    ba28:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1880
  if (strncmp(str1, topic, strlen(str1)) == 0)
    ba2c:	f5 01       	movw	r30, r10
    ba2e:	01 90       	ld	r0, Z+
    ba30:	00 20       	and	r0, r0
    ba32:	e9 f7       	brne	.-6      	; 0xba2e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1708>
    ba34:	31 97       	sbiw	r30, 0x01	; 1
    ba36:	af 01       	movw	r20, r30
    ba38:	4a 19       	sub	r20, r10
    ba3a:	5b 09       	sbc	r21, r11
    ba3c:	b4 01       	movw	r22, r8
    ba3e:	c5 01       	movw	r24, r10
    ba40:	0e 94 df 8c 	call	0x119be	; 0x119be <strncmp>
    ba44:	89 2b       	or	r24, r25
    ba46:	a9 f4       	brne	.+42     	; 0xba72 <mqtt_callback(char*, unsigned char*, unsigned int)+0x174c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1882
  {
    mqtt_process_message++;
    ba48:	80 91 be 0b 	lds	r24, 0x0BBE	; 0x800bbe <mqtt_process_message>
    ba4c:	90 91 bf 0b 	lds	r25, 0x0BBF	; 0x800bbf <mqtt_process_message+0x1>
    ba50:	01 96       	adiw	r24, 0x01	; 1
    ba52:	90 93 bf 0b 	sts	0x0BBF, r25	; 0x800bbf <mqtt_process_message+0x1>
    ba56:	80 93 be 0b 	sts	0x0BBE, r24	; 0x800bbe <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1883
    id = atoi(my_payload);
    ba5a:	8a e4       	ldi	r24, 0x4A	; 74
    ba5c:	9e e0       	ldi	r25, 0x0E	; 14
    ba5e:	0e 94 10 80 	call	0x10020	; 0x10020 <atoi>
    ba62:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1884
    if (id < MAX_THERMOSTAT)
    ba64:	8e e0       	ldi	r24, 0x0E	; 14
    ba66:	87 15       	cp	r24, r7
    ba68:	08 f4       	brcc	.+2      	; 0xba6c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1746>
    ba6a:	34 c1       	rjmp	.+616    	; 0xbcd4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x19ae>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1886
    {
      thermostat_ring_clear(id);
    ba6c:	87 2d       	mov	r24, r7
    ba6e:	0e 94 c3 45 	call	0x8b86	; 0x8b86 <thermostat_ring_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1897
  }
  ////////
  ////////
  //// nastavovani vlastnosti site
  //// ziskani nastaveni site
  strcpy_P(str1, thermctl_header_in);
    ba72:	6c ea       	ldi	r22, 0xAC	; 172
    ba74:	74 e1       	ldi	r23, 0x14	; 20
    ba76:	c5 01       	movw	r24, r10
    ba78:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1898
  strcat(str1, device.nazev);
    ba7c:	6c e2       	ldi	r22, 0x2C	; 44
    ba7e:	70 e1       	ldi	r23, 0x10	; 16
    ba80:	c5 01       	movw	r24, r10
    ba82:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1899
  strcat(str1, "/network/get/config");
    ba86:	67 e5       	ldi	r22, 0x57	; 87
    ba88:	75 e0       	ldi	r23, 0x05	; 5
    ba8a:	c5 01       	movw	r24, r10
    ba8c:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1900
  if (strncmp(str1, topic, strlen(str1)) == 0)
    ba90:	f5 01       	movw	r30, r10
    ba92:	01 90       	ld	r0, Z+
    ba94:	00 20       	and	r0, r0
    ba96:	e9 f7       	brne	.-6      	; 0xba92 <mqtt_callback(char*, unsigned char*, unsigned int)+0x176c>
    ba98:	31 97       	sbiw	r30, 0x01	; 1
    ba9a:	af 01       	movw	r20, r30
    ba9c:	4a 19       	sub	r20, r10
    ba9e:	5b 09       	sbc	r21, r11
    baa0:	b4 01       	movw	r22, r8
    baa2:	c5 01       	movw	r24, r10
    baa4:	0e 94 df 8c 	call	0x119be	; 0x119be <strncmp>
    baa8:	89 2b       	or	r24, r25
    baaa:	09 f0       	breq	.+2      	; 0xbaae <mqtt_callback(char*, unsigned char*, unsigned int)+0x1788>
    baac:	c9 c0       	rjmp	.+402    	; 0xbc40 <mqtt_callback(char*, unsigned char*, unsigned int)+0x191a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1902
  {
    mqtt_process_message++;
    baae:	80 91 be 0b 	lds	r24, 0x0BBE	; 0x800bbe <mqtt_process_message>
    bab2:	90 91 bf 0b 	lds	r25, 0x0BBF	; 0x800bbf <mqtt_process_message+0x1>
    bab6:	01 96       	adiw	r24, 0x01	; 1
    bab8:	90 93 bf 0b 	sts	0x0BBF, r25	; 0x800bbf <mqtt_process_message+0x1>
    babc:	80 93 be 0b 	sts	0x0BBE, r24	; 0x800bbe <mqtt_process_message>
send_network_config():
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:261
//// thermctl-out/XXXXX/network/mqtt_key
//// thermctl-out/XXXXX/network/name
void send_network_config(PubSubClient *mqtt_client)
{
  char payload[20];
  payload[0] = 0;
    bac0:	29 96       	adiw	r28, 0x09	; 9
    bac2:	1f ae       	std	Y+63, r1	; 0x3f
    bac4:	29 97       	sbiw	r28, 0x09	; 9
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:262
  createString(payload, ':', device.mac, 6, 16);
    bac6:	00 e1       	ldi	r16, 0x10	; 16
    bac8:	26 e0       	ldi	r18, 0x06	; 6
    baca:	46 e1       	ldi	r20, 0x16	; 22
    bacc:	50 e1       	ldi	r21, 0x10	; 16
    bace:	6a e3       	ldi	r22, 0x3A	; 58
    bad0:	ce 01       	movw	r24, r28
    bad2:	88 5b       	subi	r24, 0xB8	; 184
    bad4:	9f 4f       	sbci	r25, 0xFF	; 255
    bad6:	0e 94 6c 4b 	call	0x96d8	; 0x96d8 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:263
  send_mqtt_general_payload(mqtt_client, "network/mac", payload);
    bada:	ae 01       	movw	r20, r28
    badc:	48 5b       	subi	r20, 0xB8	; 184
    bade:	5f 4f       	sbci	r21, 0xFF	; 255
    bae0:	6b e6       	ldi	r22, 0x6B	; 107
    bae2:	75 e0       	ldi	r23, 0x05	; 5
    bae4:	81 eb       	ldi	r24, 0xB1	; 177
    bae6:	93 e1       	ldi	r25, 0x13	; 19
    bae8:	0e 94 36 49 	call	0x926c	; 0x926c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:264
  payload[0] = 0;
    baec:	29 96       	adiw	r28, 0x09	; 9
    baee:	1f ae       	std	Y+63, r1	; 0x3f
    baf0:	29 97       	sbiw	r28, 0x09	; 9
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:265
  createString(payload, '.', device.myIP, 4, 10);
    baf2:	0a e0       	ldi	r16, 0x0A	; 10
    baf4:	24 e0       	ldi	r18, 0x04	; 4
    baf6:	4c e1       	ldi	r20, 0x1C	; 28
    baf8:	50 e1       	ldi	r21, 0x10	; 16
    bafa:	6e e2       	ldi	r22, 0x2E	; 46
    bafc:	ce 01       	movw	r24, r28
    bafe:	88 5b       	subi	r24, 0xB8	; 184
    bb00:	9f 4f       	sbci	r25, 0xFF	; 255
    bb02:	0e 94 6c 4b 	call	0x96d8	; 0x96d8 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:266
  send_mqtt_general_payload(mqtt_client, "network/ip", payload);
    bb06:	ae 01       	movw	r20, r28
    bb08:	48 5b       	subi	r20, 0xB8	; 184
    bb0a:	5f 4f       	sbci	r21, 0xFF	; 255
    bb0c:	67 e7       	ldi	r22, 0x77	; 119
    bb0e:	75 e0       	ldi	r23, 0x05	; 5
    bb10:	81 eb       	ldi	r24, 0xB1	; 177
    bb12:	93 e1       	ldi	r25, 0x13	; 19
    bb14:	0e 94 36 49 	call	0x926c	; 0x926c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:267
  payload[0] = 0;
    bb18:	29 96       	adiw	r28, 0x09	; 9
    bb1a:	1f ae       	std	Y+63, r1	; 0x3f
    bb1c:	29 97       	sbiw	r28, 0x09	; 9
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:268
  createString(payload, '.', device.myMASK, 4, 10);
    bb1e:	24 e0       	ldi	r18, 0x04	; 4
    bb20:	40 e2       	ldi	r20, 0x20	; 32
    bb22:	50 e1       	ldi	r21, 0x10	; 16
    bb24:	6e e2       	ldi	r22, 0x2E	; 46
    bb26:	ce 01       	movw	r24, r28
    bb28:	88 5b       	subi	r24, 0xB8	; 184
    bb2a:	9f 4f       	sbci	r25, 0xFF	; 255
    bb2c:	0e 94 6c 4b 	call	0x96d8	; 0x96d8 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:269
  send_mqtt_general_payload(mqtt_client, "network/netmask", payload);
    bb30:	ae 01       	movw	r20, r28
    bb32:	48 5b       	subi	r20, 0xB8	; 184
    bb34:	5f 4f       	sbci	r21, 0xFF	; 255
    bb36:	62 e8       	ldi	r22, 0x82	; 130
    bb38:	75 e0       	ldi	r23, 0x05	; 5
    bb3a:	81 eb       	ldi	r24, 0xB1	; 177
    bb3c:	93 e1       	ldi	r25, 0x13	; 19
    bb3e:	0e 94 36 49 	call	0x926c	; 0x926c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:271

  payload[0] = 0;
    bb42:	29 96       	adiw	r28, 0x09	; 9
    bb44:	1f ae       	std	Y+63, r1	; 0x3f
    bb46:	29 97       	sbiw	r28, 0x09	; 9
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:272
  createString(payload, '.', device.myGW, 4, 10);
    bb48:	24 e0       	ldi	r18, 0x04	; 4
    bb4a:	48 e2       	ldi	r20, 0x28	; 40
    bb4c:	50 e1       	ldi	r21, 0x10	; 16
    bb4e:	6e e2       	ldi	r22, 0x2E	; 46
    bb50:	ce 01       	movw	r24, r28
    bb52:	88 5b       	subi	r24, 0xB8	; 184
    bb54:	9f 4f       	sbci	r25, 0xFF	; 255
    bb56:	0e 94 6c 4b 	call	0x96d8	; 0x96d8 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:273
  send_mqtt_general_payload(mqtt_client, "network/gw", payload);
    bb5a:	ae 01       	movw	r20, r28
    bb5c:	48 5b       	subi	r20, 0xB8	; 184
    bb5e:	5f 4f       	sbci	r21, 0xFF	; 255
    bb60:	62 e9       	ldi	r22, 0x92	; 146
    bb62:	75 e0       	ldi	r23, 0x05	; 5
    bb64:	81 eb       	ldi	r24, 0xB1	; 177
    bb66:	93 e1       	ldi	r25, 0x13	; 19
    bb68:	0e 94 36 49 	call	0x926c	; 0x926c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:275

  payload[0] = 0;
    bb6c:	29 96       	adiw	r28, 0x09	; 9
    bb6e:	1f ae       	std	Y+63, r1	; 0x3f
    bb70:	29 97       	sbiw	r28, 0x09	; 9
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:276
  createString(payload, '.', device.myDNS, 4, 10);
    bb72:	24 e0       	ldi	r18, 0x04	; 4
    bb74:	44 e2       	ldi	r20, 0x24	; 36
    bb76:	50 e1       	ldi	r21, 0x10	; 16
    bb78:	6e e2       	ldi	r22, 0x2E	; 46
    bb7a:	ce 01       	movw	r24, r28
    bb7c:	88 5b       	subi	r24, 0xB8	; 184
    bb7e:	9f 4f       	sbci	r25, 0xFF	; 255
    bb80:	0e 94 6c 4b 	call	0x96d8	; 0x96d8 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:277
  send_mqtt_general_payload(mqtt_client, "network/dns", payload);
    bb84:	ae 01       	movw	r20, r28
    bb86:	48 5b       	subi	r20, 0xB8	; 184
    bb88:	5f 4f       	sbci	r21, 0xFF	; 255
    bb8a:	6d e9       	ldi	r22, 0x9D	; 157
    bb8c:	75 e0       	ldi	r23, 0x05	; 5
    bb8e:	81 eb       	ldi	r24, 0xB1	; 177
    bb90:	93 e1       	ldi	r25, 0x13	; 19
    bb92:	0e 94 36 49 	call	0x926c	; 0x926c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:279

  payload[0] = 0;
    bb96:	29 96       	adiw	r28, 0x09	; 9
    bb98:	1f ae       	std	Y+63, r1	; 0x3f
    bb9a:	29 97       	sbiw	r28, 0x09	; 9
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:280
  createString(payload, '.', device.ntp_server, 4, 10);
    bb9c:	24 e0       	ldi	r18, 0x04	; 4
    bb9e:	44 e6       	ldi	r20, 0x64	; 100
    bba0:	50 e1       	ldi	r21, 0x10	; 16
    bba2:	6e e2       	ldi	r22, 0x2E	; 46
    bba4:	ce 01       	movw	r24, r28
    bba6:	88 5b       	subi	r24, 0xB8	; 184
    bba8:	9f 4f       	sbci	r25, 0xFF	; 255
    bbaa:	0e 94 6c 4b 	call	0x96d8	; 0x96d8 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:281
  send_mqtt_general_payload(mqtt_client, "network/ntp", payload);
    bbae:	ae 01       	movw	r20, r28
    bbb0:	48 5b       	subi	r20, 0xB8	; 184
    bbb2:	5f 4f       	sbci	r21, 0xFF	; 255
    bbb4:	69 ea       	ldi	r22, 0xA9	; 169
    bbb6:	75 e0       	ldi	r23, 0x05	; 5
    bbb8:	81 eb       	ldi	r24, 0xB1	; 177
    bbba:	93 e1       	ldi	r25, 0x13	; 19
    bbbc:	0e 94 36 49 	call	0x926c	; 0x926c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:283

  payload[0] = 0;
    bbc0:	29 96       	adiw	r28, 0x09	; 9
    bbc2:	1f ae       	std	Y+63, r1	; 0x3f
    bbc4:	29 97       	sbiw	r28, 0x09	; 9
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:284
  createString(payload, '.', device.mqtt_server, 4, 10);
    bbc6:	24 e0       	ldi	r18, 0x04	; 4
    bbc8:	46 e3       	ldi	r20, 0x36	; 54
    bbca:	50 e1       	ldi	r21, 0x10	; 16
    bbcc:	6e e2       	ldi	r22, 0x2E	; 46
    bbce:	ce 01       	movw	r24, r28
    bbd0:	88 5b       	subi	r24, 0xB8	; 184
    bbd2:	9f 4f       	sbci	r25, 0xFF	; 255
    bbd4:	0e 94 6c 4b 	call	0x96d8	; 0x96d8 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:285
  send_mqtt_general_payload(mqtt_client, "network/mqtt_host", payload);
    bbd8:	ae 01       	movw	r20, r28
    bbda:	48 5b       	subi	r20, 0xB8	; 184
    bbdc:	5f 4f       	sbci	r21, 0xFF	; 255
    bbde:	65 eb       	ldi	r22, 0xB5	; 181
    bbe0:	75 e0       	ldi	r23, 0x05	; 5
    bbe2:	81 eb       	ldi	r24, 0xB1	; 177
    bbe4:	93 e1       	ldi	r25, 0x13	; 19
    bbe6:	0e 94 36 49 	call	0x926c	; 0x926c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    bbea:	4a e0       	ldi	r20, 0x0A	; 10
    bbec:	be 01       	movw	r22, r28
    bbee:	68 5b       	subi	r22, 0xB8	; 184
    bbf0:	7f 4f       	sbci	r23, 0xFF	; 255
    bbf2:	80 91 3a 10 	lds	r24, 0x103A	; 0x80103a <device+0x24>
    bbf6:	90 91 3b 10 	lds	r25, 0x103B	; 0x80103b <device+0x25>
    bbfa:	0e 94 7f 80 	call	0x100fe	; 0x100fe <__itoa_ncheck>
send_network_config():
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:288

  itoa(device.mqtt_port, payload, 10);
  send_mqtt_general_payload(mqtt_client, "network/mqtt_port", payload);
    bbfe:	ae 01       	movw	r20, r28
    bc00:	48 5b       	subi	r20, 0xB8	; 184
    bc02:	5f 4f       	sbci	r21, 0xFF	; 255
    bc04:	67 ec       	ldi	r22, 0xC7	; 199
    bc06:	75 e0       	ldi	r23, 0x05	; 5
    bc08:	81 eb       	ldi	r24, 0xB1	; 177
    bc0a:	93 e1       	ldi	r25, 0x13	; 19
    bc0c:	0e 94 36 49 	call	0x926c	; 0x926c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:289
  send_mqtt_general_payload(mqtt_client, "network/mqtt_user", device.mqtt_user);
    bc10:	4c e3       	ldi	r20, 0x3C	; 60
    bc12:	50 e1       	ldi	r21, 0x10	; 16
    bc14:	69 ed       	ldi	r22, 0xD9	; 217
    bc16:	75 e0       	ldi	r23, 0x05	; 5
    bc18:	81 eb       	ldi	r24, 0xB1	; 177
    bc1a:	93 e1       	ldi	r25, 0x13	; 19
    bc1c:	0e 94 36 49 	call	0x926c	; 0x926c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:290
  send_mqtt_general_payload(mqtt_client, "network/mqtt_key", device.mqtt_key);
    bc20:	40 e5       	ldi	r20, 0x50	; 80
    bc22:	50 e1       	ldi	r21, 0x10	; 16
    bc24:	6b ee       	ldi	r22, 0xEB	; 235
    bc26:	75 e0       	ldi	r23, 0x05	; 5
    bc28:	81 eb       	ldi	r24, 0xB1	; 177
    bc2a:	93 e1       	ldi	r25, 0x13	; 19
    bc2c:	0e 94 36 49 	call	0x926c	; 0x926c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:291
  send_mqtt_general_payload(mqtt_client, "network/name", device.nazev);
    bc30:	4c e2       	ldi	r20, 0x2C	; 44
    bc32:	50 e1       	ldi	r21, 0x10	; 16
    bc34:	6c ef       	ldi	r22, 0xFC	; 252
    bc36:	75 e0       	ldi	r23, 0x05	; 5
    bc38:	81 eb       	ldi	r24, 0xB1	; 177
    bc3a:	93 e1       	ldi	r25, 0x13	; 19
    bc3c:	0e 94 36 49 	call	0x926c	; 0x926c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1917
  //// thermctl-in/XXXXX/network/set/mqtt_host
  //// thermctl-in/XXXXX/network/set/mqtt_port
  //// thermctl-in/XXXXX/network/set/mqtt_user
  //// thermctl-in/XXXXX/network/set/mqtt_key
  //// thermctl-in/XXXXX/network/set/name
  strcpy_P(str1, thermctl_header_in);
    bc40:	6c ea       	ldi	r22, 0xAC	; 172
    bc42:	74 e1       	ldi	r23, 0x14	; 20
    bc44:	c5 01       	movw	r24, r10
    bc46:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1918
  strcat(str1, device.nazev);
    bc4a:	6c e2       	ldi	r22, 0x2C	; 44
    bc4c:	70 e1       	ldi	r23, 0x10	; 16
    bc4e:	c5 01       	movw	r24, r10
    bc50:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1919
  strcat(str1, "/network/set/");
    bc54:	69 e0       	ldi	r22, 0x09	; 9
    bc56:	76 e0       	ldi	r23, 0x06	; 6
    bc58:	c5 01       	movw	r24, r10
    bc5a:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1920
  if (strncmp(str1, topic, strlen(str1)) == 0)
    bc5e:	f5 01       	movw	r30, r10
    bc60:	01 90       	ld	r0, Z+
    bc62:	00 20       	and	r0, r0
    bc64:	e9 f7       	brne	.-6      	; 0xbc60 <mqtt_callback(char*, unsigned char*, unsigned int)+0x193a>
    bc66:	31 97       	sbiw	r30, 0x01	; 1
    bc68:	af 01       	movw	r20, r30
    bc6a:	4a 19       	sub	r20, r10
    bc6c:	5b 09       	sbc	r21, r11
    bc6e:	b4 01       	movw	r22, r8
    bc70:	c5 01       	movw	r24, r10
    bc72:	0e 94 df 8c 	call	0x119be	; 0x119be <strncmp>
    bc76:	89 2b       	or	r24, r25
    bc78:	09 f0       	breq	.+2      	; 0xbc7c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1956>
    bc7a:	f1 c0       	rjmp	.+482    	; 0xbe5e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b38>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1922
  {
    mqtt_process_message++;
    bc7c:	80 91 be 0b 	lds	r24, 0x0BBE	; 0x800bbe <mqtt_process_message>
    bc80:	90 91 bf 0b 	lds	r25, 0x0BBF	; 0x800bbf <mqtt_process_message+0x1>
    bc84:	01 96       	adiw	r24, 0x01	; 1
    bc86:	90 93 bf 0b 	sts	0x0BBF, r25	; 0x800bbf <mqtt_process_message+0x1>
    bc8a:	80 93 be 0b 	sts	0x0BBE, r24	; 0x800bbe <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1924
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    bc8e:	f5 01       	movw	r30, r10
    bc90:	01 90       	ld	r0, Z+
    bc92:	00 20       	and	r0, r0
    bc94:	e9 f7       	brne	.-6      	; 0xbc90 <mqtt_callback(char*, unsigned char*, unsigned int)+0x196a>
    bc96:	31 97       	sbiw	r30, 0x01	; 1
    bc98:	ea 19       	sub	r30, r10
    bc9a:	fb 09       	sbc	r31, r11
    bc9c:	9e 2f       	mov	r25, r30
    bc9e:	4e 2f       	mov	r20, r30
    bca0:	84 2f       	mov	r24, r20
    bca2:	89 1b       	sub	r24, r25
    bca4:	24 2f       	mov	r18, r20
    bca6:	30 e0       	ldi	r19, 0x00	; 0
    bca8:	d4 01       	movw	r26, r8
    bcaa:	0d 90       	ld	r0, X+
    bcac:	00 20       	and	r0, r0
    bcae:	e9 f7       	brne	.-6      	; 0xbcaa <mqtt_callback(char*, unsigned char*, unsigned int)+0x1984>
    bcb0:	11 97       	sbiw	r26, 0x01	; 1
    bcb2:	a8 19       	sub	r26, r8
    bcb4:	b9 09       	sbc	r27, r9
    bcb6:	2a 17       	cp	r18, r26
    bcb8:	3b 07       	cpc	r19, r27
    bcba:	88 f4       	brcc	.+34     	; 0xbcde <mqtt_callback(char*, unsigned char*, unsigned int)+0x19b8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1926
    {
      str1[cnt] = topic[f];
    bcbc:	d5 01       	movw	r26, r10
    bcbe:	a8 0f       	add	r26, r24
    bcc0:	b1 1d       	adc	r27, r1
    bcc2:	28 0d       	add	r18, r8
    bcc4:	39 1d       	adc	r19, r9
    bcc6:	f9 01       	movw	r30, r18
    bcc8:	80 81       	ld	r24, Z
    bcca:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1927
      str1[cnt + 1] = 0;
    bccc:	11 96       	adiw	r26, 0x01	; 1
    bcce:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1924
  strcat(str1, "/network/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    bcd0:	4f 5f       	subi	r20, 0xFF	; 255
    bcd2:	e6 cf       	rjmp	.-52     	; 0xbca0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x197a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1890
    {
      thermostat_ring_clear(id);
    }
    else
    {
      log_error(&mqtt_client, "ring/clear bad id");
    bcd4:	85 e4       	ldi	r24, 0x45	; 69
    bcd6:	95 e0       	ldi	r25, 0x05	; 5
    bcd8:	0e 94 98 49 	call	0x9330	; 0x9330 <log_error(PubSubClient*, char*) [clone .constprop.70]>
    bcdc:	ca ce       	rjmp	.-620    	; 0xba72 <mqtt_callback(char*, unsigned char*, unsigned int)+0x174c>
setting_network():
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:94
{
  uint8_t cnt;
  uint8_t ret = 0;
  char *pch;
  cnt = 0;
  pch = strtok (data, "/");
    bcde:	63 e1       	ldi	r22, 0x13	; 19
    bce0:	74 e0       	ldi	r23, 0x04	; 4
    bce2:	c5 01       	movw	r24, r10
    bce4:	0e 94 49 80 	call	0x10092	; 0x10092 <strtok>
    bce8:	7c 01       	movw	r14, r24
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:93
uint8_t setting_network(char *data, char *my_payload)
{
  uint8_t cnt;
  uint8_t ret = 0;
  char *pch;
  cnt = 0;
    bcea:	10 e0       	ldi	r17, 0x00	; 0
setting_network():
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:95
  pch = strtok (data, "/");
  while (pch != NULL)
    bcec:	e1 14       	cp	r14, r1
    bcee:	f1 04       	cpc	r15, r1
    bcf0:	09 f4       	brne	.+2      	; 0xbcf4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x19ce>
    bcf2:	a9 c0       	rjmp	.+338    	; 0xbe46 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b20>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:97
  {
    if (strcmp(pch, "mac") == 0)
    bcf4:	63 e7       	ldi	r22, 0x73	; 115
    bcf6:	75 e0       	ldi	r23, 0x05	; 5
    bcf8:	c7 01       	movw	r24, r14
    bcfa:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
    bcfe:	89 2b       	or	r24, r25
    bd00:	41 f4       	brne	.+16     	; 0xbd12 <mqtt_callback(char*, unsigned char*, unsigned int)+0x19ec>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:99
    {
      parseBytes(my_payload, ':', device.mac, 6, 10);
    bd02:	46 e0       	ldi	r20, 0x06	; 6
    bd04:	50 e0       	ldi	r21, 0x00	; 0
    bd06:	66 e1       	ldi	r22, 0x16	; 22
    bd08:	70 e1       	ldi	r23, 0x10	; 16
    bd0a:	8a e3       	ldi	r24, 0x3A	; 58
    bd0c:	0e 94 b0 3e 	call	0x7d60	; 0x7d60 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.69]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:100
      cnt = 1;
    bd10:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:102
    }
    if (strcmp(pch, "ip") == 0)
    bd12:	6f e7       	ldi	r22, 0x7F	; 127
    bd14:	75 e0       	ldi	r23, 0x05	; 5
    bd16:	c7 01       	movw	r24, r14
    bd18:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
    bd1c:	89 2b       	or	r24, r25
    bd1e:	41 f4       	brne	.+16     	; 0xbd30 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a0a>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:104
    {
      parseBytes(my_payload, '.', device.myIP, 4, 10);
    bd20:	44 e0       	ldi	r20, 0x04	; 4
    bd22:	50 e0       	ldi	r21, 0x00	; 0
    bd24:	6c e1       	ldi	r22, 0x1C	; 28
    bd26:	70 e1       	ldi	r23, 0x10	; 16
    bd28:	8e e2       	ldi	r24, 0x2E	; 46
    bd2a:	0e 94 b0 3e 	call	0x7d60	; 0x7d60 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.69]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:105
      cnt = 1;
    bd2e:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:107
    }
    if (strcmp(pch, "netmask") == 0)
    bd30:	6a e8       	ldi	r22, 0x8A	; 138
    bd32:	75 e0       	ldi	r23, 0x05	; 5
    bd34:	c7 01       	movw	r24, r14
    bd36:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
    bd3a:	89 2b       	or	r24, r25
    bd3c:	41 f4       	brne	.+16     	; 0xbd4e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a28>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:109
    {
      parseBytes(my_payload, '.', device.myMASK, 4, 10);
    bd3e:	44 e0       	ldi	r20, 0x04	; 4
    bd40:	50 e0       	ldi	r21, 0x00	; 0
    bd42:	60 e2       	ldi	r22, 0x20	; 32
    bd44:	70 e1       	ldi	r23, 0x10	; 16
    bd46:	8e e2       	ldi	r24, 0x2E	; 46
    bd48:	0e 94 b0 3e 	call	0x7d60	; 0x7d60 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.69]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:110
      cnt = 1;
    bd4c:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:112
    }
    if (strcmp(pch, "gw") == 0)
    bd4e:	6a e9       	ldi	r22, 0x9A	; 154
    bd50:	75 e0       	ldi	r23, 0x05	; 5
    bd52:	c7 01       	movw	r24, r14
    bd54:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
    bd58:	89 2b       	or	r24, r25
    bd5a:	41 f4       	brne	.+16     	; 0xbd6c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a46>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:114
    {
      parseBytes(my_payload, '.', device.myGW, 4, 10);
    bd5c:	44 e0       	ldi	r20, 0x04	; 4
    bd5e:	50 e0       	ldi	r21, 0x00	; 0
    bd60:	68 e2       	ldi	r22, 0x28	; 40
    bd62:	70 e1       	ldi	r23, 0x10	; 16
    bd64:	8e e2       	ldi	r24, 0x2E	; 46
    bd66:	0e 94 b0 3e 	call	0x7d60	; 0x7d60 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.69]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:115
      cnt = 1;
    bd6a:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:117
    }
    if (strcmp(pch, "dns") == 0)
    bd6c:	65 ea       	ldi	r22, 0xA5	; 165
    bd6e:	75 e0       	ldi	r23, 0x05	; 5
    bd70:	c7 01       	movw	r24, r14
    bd72:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
    bd76:	89 2b       	or	r24, r25
    bd78:	41 f4       	brne	.+16     	; 0xbd8a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a64>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:119
    {
      parseBytes(my_payload, '.', device.myDNS, 4, 10);
    bd7a:	44 e0       	ldi	r20, 0x04	; 4
    bd7c:	50 e0       	ldi	r21, 0x00	; 0
    bd7e:	64 e2       	ldi	r22, 0x24	; 36
    bd80:	70 e1       	ldi	r23, 0x10	; 16
    bd82:	8e e2       	ldi	r24, 0x2E	; 46
    bd84:	0e 94 b0 3e 	call	0x7d60	; 0x7d60 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.69]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:120
      cnt = 1;
    bd88:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:122
    }
    if (strcmp(pch, "ntp") == 0)
    bd8a:	61 eb       	ldi	r22, 0xB1	; 177
    bd8c:	75 e0       	ldi	r23, 0x05	; 5
    bd8e:	c7 01       	movw	r24, r14
    bd90:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
    bd94:	89 2b       	or	r24, r25
    bd96:	41 f4       	brne	.+16     	; 0xbda8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a82>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:124
    {
      parseBytes(my_payload, '.', device.ntp_server, 4, 10);
    bd98:	44 e0       	ldi	r20, 0x04	; 4
    bd9a:	50 e0       	ldi	r21, 0x00	; 0
    bd9c:	64 e6       	ldi	r22, 0x64	; 100
    bd9e:	70 e1       	ldi	r23, 0x10	; 16
    bda0:	8e e2       	ldi	r24, 0x2E	; 46
    bda2:	0e 94 b0 3e 	call	0x7d60	; 0x7d60 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.69]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:125
      cnt = 1;
    bda6:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:127
    }
    if (strcmp(pch, "mqtt_host") == 0)
    bda8:	6d eb       	ldi	r22, 0xBD	; 189
    bdaa:	75 e0       	ldi	r23, 0x05	; 5
    bdac:	c7 01       	movw	r24, r14
    bdae:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
    bdb2:	89 2b       	or	r24, r25
    bdb4:	41 f4       	brne	.+16     	; 0xbdc6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1aa0>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:129
    {
      parseBytes(my_payload, '.', device.mqtt_server, 4, 10);
    bdb6:	44 e0       	ldi	r20, 0x04	; 4
    bdb8:	50 e0       	ldi	r21, 0x00	; 0
    bdba:	66 e3       	ldi	r22, 0x36	; 54
    bdbc:	70 e1       	ldi	r23, 0x10	; 16
    bdbe:	8e e2       	ldi	r24, 0x2E	; 46
    bdc0:	0e 94 b0 3e 	call	0x7d60	; 0x7d60 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.69]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:130
      cnt = 1;
    bdc4:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:132
    }
    if (strcmp(pch, "mqtt_port") == 0)
    bdc6:	6f ec       	ldi	r22, 0xCF	; 207
    bdc8:	75 e0       	ldi	r23, 0x05	; 5
    bdca:	c7 01       	movw	r24, r14
    bdcc:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
    bdd0:	89 2b       	or	r24, r25
    bdd2:	49 f4       	brne	.+18     	; 0xbde6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ac0>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:134
    {
      device.mqtt_port = atoi(my_payload);
    bdd4:	8a e4       	ldi	r24, 0x4A	; 74
    bdd6:	9e e0       	ldi	r25, 0x0E	; 14
    bdd8:	0e 94 10 80 	call	0x10020	; 0x10020 <atoi>
    bddc:	90 93 3b 10 	sts	0x103B, r25	; 0x80103b <device+0x25>
    bde0:	80 93 3a 10 	sts	0x103A, r24	; 0x80103a <device+0x24>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:135
      cnt = 1;
    bde4:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:137
    }
    if (strcmp(pch, "mqtt_user") == 0)
    bde6:	61 ee       	ldi	r22, 0xE1	; 225
    bde8:	75 e0       	ldi	r23, 0x05	; 5
    bdea:	c7 01       	movw	r24, r14
    bdec:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
    bdf0:	89 2b       	or	r24, r25
    bdf2:	39 f4       	brne	.+14     	; 0xbe02 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1adc>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:139
    {
      strcpy(device.mqtt_user, my_payload);
    bdf4:	6a e4       	ldi	r22, 0x4A	; 74
    bdf6:	7e e0       	ldi	r23, 0x0E	; 14
    bdf8:	8c e3       	ldi	r24, 0x3C	; 60
    bdfa:	90 e1       	ldi	r25, 0x10	; 16
    bdfc:	0e 94 c8 8c 	call	0x11990	; 0x11990 <strcpy>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:140
      cnt = 1;
    be00:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:142
    }
    if (strcmp(pch, "mqtt_pass") == 0)
    be02:	67 e1       	ldi	r22, 0x17	; 23
    be04:	76 e0       	ldi	r23, 0x06	; 6
    be06:	c7 01       	movw	r24, r14
    be08:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
    be0c:	89 2b       	or	r24, r25
    be0e:	39 f4       	brne	.+14     	; 0xbe1e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1af8>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:144
    {
      strcpy(device.mqtt_key, my_payload);
    be10:	6a e4       	ldi	r22, 0x4A	; 74
    be12:	7e e0       	ldi	r23, 0x0E	; 14
    be14:	80 e5       	ldi	r24, 0x50	; 80
    be16:	90 e1       	ldi	r25, 0x10	; 16
    be18:	0e 94 c8 8c 	call	0x11990	; 0x11990 <strcpy>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:145
      cnt = 1;
    be1c:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:147
    }
    if (strcmp(pch, "name") == 0)
    be1e:	64 e0       	ldi	r22, 0x04	; 4
    be20:	76 e0       	ldi	r23, 0x06	; 6
    be22:	c7 01       	movw	r24, r14
    be24:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
    be28:	89 2b       	or	r24, r25
    be2a:	29 f4       	brne	.+10     	; 0xbe36 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b10>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:149
    {
      device_set_name(my_payload);
    be2c:	8a e4       	ldi	r24, 0x4A	; 74
    be2e:	9e e0       	ldi	r25, 0x0E	; 14
    be30:	0e 94 af 46 	call	0x8d5e	; 0x8d5e <device_set_name(char*)>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:150
      cnt = 2;
    be34:	12 e0       	ldi	r17, 0x02	; 2
setting_network():
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:152
    }
    pch = strtok (NULL, "/");
    be36:	63 e1       	ldi	r22, 0x13	; 19
    be38:	74 e0       	ldi	r23, 0x04	; 4
    be3a:	90 e0       	ldi	r25, 0x00	; 0
    be3c:	80 e0       	ldi	r24, 0x00	; 0
    be3e:	0e 94 49 80 	call	0x10092	; 0x10092 <strtok>
    be42:	7c 01       	movw	r14, r24
    be44:	53 cf       	rjmp	.-346    	; 0xbcec <mqtt_callback(char*, unsigned char*, unsigned int)+0x19c6>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1931
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = setting_network(str1, my_payload);
    if (cnt == 1)
    be46:	11 30       	cpi	r17, 0x01	; 1
    be48:	41 f4       	brne	.+16     	; 0xbe5a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b34>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1933
    {
      save_setup_network();
    be4a:	0e 94 d7 46 	call	0x8dae	; 0x8dae <save_setup_network()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1938
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    }
    if (cnt == 2)
    {
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    be4e:	80 91 9d 0c 	lds	r24, 0x0C9D	; 0x800c9d <selftest_data>
    be52:	80 68       	ori	r24, 0x80	; 128
    be54:	80 93 9d 0c 	sts	0x0C9D, r24	; 0x800c9d <selftest_data>
    be58:	02 c0       	rjmp	.+4      	; 0xbe5e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b38>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1936
    if (cnt == 1)
    {
      save_setup_network();
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    }
    if (cnt == 2)
    be5a:	12 30       	cpi	r17, 0x02	; 2
    be5c:	c1 f3       	breq	.-16     	; 0xbe4e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b28>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1943
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    }
  }
  //// priradi k menu pro rizeni intezity svetla vystup
  //// thermctl-in/XXXXX//light/set/IDX/output
  strcpy_P(str1, thermctl_header_in);
    be5e:	6c ea       	ldi	r22, 0xAC	; 172
    be60:	74 e1       	ldi	r23, 0x14	; 20
    be62:	c5 01       	movw	r24, r10
    be64:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1944
  strcat(str1, device.nazev);
    be68:	6c e2       	ldi	r22, 0x2C	; 44
    be6a:	70 e1       	ldi	r23, 0x10	; 16
    be6c:	c5 01       	movw	r24, r10
    be6e:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1945
  strcat(str1, "/light/set/");
    be72:	61 e2       	ldi	r22, 0x21	; 33
    be74:	76 e0       	ldi	r23, 0x06	; 6
    be76:	c5 01       	movw	r24, r10
    be78:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1946
  if (strncmp(str1, topic, strlen(str1)) == 0)
    be7c:	f5 01       	movw	r30, r10
    be7e:	01 90       	ld	r0, Z+
    be80:	00 20       	and	r0, r0
    be82:	e9 f7       	brne	.-6      	; 0xbe7e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b58>
    be84:	31 97       	sbiw	r30, 0x01	; 1
    be86:	af 01       	movw	r20, r30
    be88:	4a 19       	sub	r20, r10
    be8a:	5b 09       	sbc	r21, r11
    be8c:	b4 01       	movw	r22, r8
    be8e:	c5 01       	movw	r24, r10
    be90:	0e 94 df 8c 	call	0x119be	; 0x119be <strncmp>
    be94:	89 2b       	or	r24, r25
    be96:	09 f0       	breq	.+2      	; 0xbe9a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b74>
    be98:	41 c0       	rjmp	.+130    	; 0xbf1c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1bf6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1948
  {
    mqtt_process_message++;
    be9a:	80 91 be 0b 	lds	r24, 0x0BBE	; 0x800bbe <mqtt_process_message>
    be9e:	90 91 bf 0b 	lds	r25, 0x0BBF	; 0x800bbf <mqtt_process_message+0x1>
    bea2:	01 96       	adiw	r24, 0x01	; 1
    bea4:	90 93 bf 0b 	sts	0x0BBF, r25	; 0x800bbf <mqtt_process_message+0x1>
    bea8:	80 93 be 0b 	sts	0x0BBE, r24	; 0x800bbe <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1951
    //strncpy(str2, payload, length);
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    beac:	f5 01       	movw	r30, r10
    beae:	01 90       	ld	r0, Z+
    beb0:	00 20       	and	r0, r0
    beb2:	e9 f7       	brne	.-6      	; 0xbeae <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b88>
    beb4:	31 97       	sbiw	r30, 0x01	; 1
    beb6:	ea 19       	sub	r30, r10
    beb8:	fb 09       	sbc	r31, r11
    beba:	9e 2f       	mov	r25, r30
    bebc:	4e 2f       	mov	r20, r30
    bebe:	84 2f       	mov	r24, r20
    bec0:	89 1b       	sub	r24, r25
    bec2:	24 2f       	mov	r18, r20
    bec4:	30 e0       	ldi	r19, 0x00	; 0
    bec6:	d4 01       	movw	r26, r8
    bec8:	0d 90       	ld	r0, X+
    beca:	00 20       	and	r0, r0
    becc:	e9 f7       	brne	.-6      	; 0xbec8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ba2>
    bece:	11 97       	sbiw	r26, 0x01	; 1
    bed0:	a8 19       	sub	r26, r8
    bed2:	b9 09       	sbc	r27, r9
    bed4:	2a 17       	cp	r18, r26
    bed6:	3b 07       	cpc	r19, r27
    bed8:	60 f4       	brcc	.+24     	; 0xbef2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1bcc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1953
    {
      str1[cnt] = topic[f];
    beda:	d5 01       	movw	r26, r10
    bedc:	a8 0f       	add	r26, r24
    bede:	b1 1d       	adc	r27, r1
    bee0:	28 0d       	add	r18, r8
    bee2:	39 1d       	adc	r19, r9
    bee4:	f9 01       	movw	r30, r18
    bee6:	80 81       	ld	r24, Z
    bee8:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1954
      str1[cnt + 1] = 0;
    beea:	11 96       	adiw	r26, 0x01	; 1
    beec:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1951
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    //strncpy(str2, payload, length);
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    beee:	4f 5f       	subi	r20, 0xFF	; 255
    bef0:	e6 cf       	rjmp	.-52     	; 0xbebe <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b98>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1958
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    bef2:	63 e1       	ldi	r22, 0x13	; 19
    bef4:	74 e0       	ldi	r23, 0x04	; 4
    bef6:	c5 01       	movw	r24, r10
    bef8:	0e 94 49 80 	call	0x10092	; 0x10092 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1957
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    befc:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1959
    pch = strtok (str1, "/");
    while (pch != NULL)
    befe:	00 97       	sbiw	r24, 0x00	; 0
    bf00:	69 f0       	breq	.+26     	; 0xbf1c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1bf6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1961
    {
      if (cnt == 0) id = atoi(pch);
    bf02:	11 11       	cpse	r17, r1
    bf04:	03 c0       	rjmp	.+6      	; 0xbf0c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1be6>
    bf06:	0e 94 10 80 	call	0x10020	; 0x10020 <atoi>
    bf0a:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1964
      //if ((cnt == 1) && (strcmp(pch, "output") == 0)) light_set_output(id, atoi(my_payload));
      //if ((cnt == 1) && (strcmp(pch, "value") == 0)) light_value[id] = atoi(my_payload);
      pch = strtok (NULL, "/");
    bf0c:	63 e1       	ldi	r22, 0x13	; 19
    bf0e:	74 e0       	ldi	r23, 0x04	; 4
    bf10:	90 e0       	ldi	r25, 0x00	; 0
    bf12:	80 e0       	ldi	r24, 0x00	; 0
    bf14:	0e 94 49 80 	call	0x10092	; 0x10092 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1965
      cnt++;
    bf18:	1f 5f       	subi	r17, 0xFF	; 255
    bf1a:	f1 cf       	rjmp	.-30     	; 0xbefe <mqtt_callback(char*, unsigned char*, unsigned int)+0x1bd8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1970
    }
  }
  ///
  /// zpetna vazba od vystupu
  strcpy_P(str1, termbig_header_out);
    bf1c:	60 e6       	ldi	r22, 0x60	; 96
    bf1e:	74 e1       	ldi	r23, 0x14	; 20
    bf20:	c5 01       	movw	r24, r10
    bf22:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1971
  strcat(str1, "output/");
    bf26:	6d e2       	ldi	r22, 0x2D	; 45
    bf28:	76 e0       	ldi	r23, 0x06	; 6
    bf2a:	c5 01       	movw	r24, r10
    bf2c:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1972
  if (strncmp(str1, topic, strlen(str1)) == 0)
    bf30:	f5 01       	movw	r30, r10
    bf32:	01 90       	ld	r0, Z+
    bf34:	00 20       	and	r0, r0
    bf36:	e9 f7       	brne	.-6      	; 0xbf32 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c0c>
    bf38:	31 97       	sbiw	r30, 0x01	; 1
    bf3a:	af 01       	movw	r20, r30
    bf3c:	4a 19       	sub	r20, r10
    bf3e:	5b 09       	sbc	r21, r11
    bf40:	b4 01       	movw	r22, r8
    bf42:	c5 01       	movw	r24, r10
    bf44:	0e 94 df 8c 	call	0x119be	; 0x119be <strncmp>
    bf48:	89 2b       	or	r24, r25
    bf4a:	09 f0       	breq	.+2      	; 0xbf4e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c28>
    bf4c:	73 c0       	rjmp	.+230    	; 0xc034 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1d0e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1974
  {
    mqtt_process_message++;
    bf4e:	80 91 be 0b 	lds	r24, 0x0BBE	; 0x800bbe <mqtt_process_message>
    bf52:	90 91 bf 0b 	lds	r25, 0x0BBF	; 0x800bbf <mqtt_process_message+0x1>
    bf56:	01 96       	adiw	r24, 0x01	; 1
    bf58:	90 93 bf 0b 	sts	0x0BBF, r25	; 0x800bbf <mqtt_process_message+0x1>
    bf5c:	80 93 be 0b 	sts	0x0BBE, r24	; 0x800bbe <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1976
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    bf60:	f5 01       	movw	r30, r10
    bf62:	01 90       	ld	r0, Z+
    bf64:	00 20       	and	r0, r0
    bf66:	e9 f7       	brne	.-6      	; 0xbf62 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c3c>
    bf68:	31 97       	sbiw	r30, 0x01	; 1
    bf6a:	ea 19       	sub	r30, r10
    bf6c:	fb 09       	sbc	r31, r11
    bf6e:	9e 2f       	mov	r25, r30
    bf70:	4e 2f       	mov	r20, r30
    bf72:	84 2f       	mov	r24, r20
    bf74:	89 1b       	sub	r24, r25
    bf76:	24 2f       	mov	r18, r20
    bf78:	30 e0       	ldi	r19, 0x00	; 0
    bf7a:	d4 01       	movw	r26, r8
    bf7c:	0d 90       	ld	r0, X+
    bf7e:	00 20       	and	r0, r0
    bf80:	e9 f7       	brne	.-6      	; 0xbf7c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c56>
    bf82:	11 97       	sbiw	r26, 0x01	; 1
    bf84:	a8 19       	sub	r26, r8
    bf86:	b9 09       	sbc	r27, r9
    bf88:	2a 17       	cp	r18, r26
    bf8a:	3b 07       	cpc	r19, r27
    bf8c:	60 f4       	brcc	.+24     	; 0xbfa6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c80>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1978
    {
      str1[cnt] = topic[f];
    bf8e:	d5 01       	movw	r26, r10
    bf90:	a8 0f       	add	r26, r24
    bf92:	b1 1d       	adc	r27, r1
    bf94:	28 0d       	add	r18, r8
    bf96:	39 1d       	adc	r19, r9
    bf98:	f9 01       	movw	r30, r18
    bf9a:	80 81       	ld	r24, Z
    bf9c:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1979
      str1[cnt + 1] = 0;
    bf9e:	11 96       	adiw	r26, 0x01	; 1
    bfa0:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1976
  strcat(str1, "output/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    bfa2:	4f 5f       	subi	r20, 0xFF	; 255
    bfa4:	e6 cf       	rjmp	.-52     	; 0xbf72 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1983
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    bfa6:	63 e1       	ldi	r22, 0x13	; 19
    bfa8:	74 e0       	ldi	r23, 0x04	; 4
    bfaa:	c5 01       	movw	r24, r10
    bfac:	0e 94 49 80 	call	0x10092	; 0x10092 <strtok>
    bfb0:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1982
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    bfb2:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1984
    pch = strtok (str1, "/");
    while (pch != NULL)
    bfb4:	01 15       	cp	r16, r1
    bfb6:	11 05       	cpc	r17, r1
    bfb8:	e9 f1       	breq	.+122    	; 0xc034 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1d0e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1986
    {
      if (cnt == 0) id = atoi(pch);
    bfba:	f1 10       	cpse	r15, r1
    bfbc:	0d c0       	rjmp	.+26     	; 0xbfd8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1cb2>
    bfbe:	c8 01       	movw	r24, r16
    bfc0:	0e 94 10 80 	call	0x10020	; 0x10020 <atoi>
    bfc4:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1997
            if (strcmp(pch, "pwm")) last_output_update[id] = 0;
            if (strcmp(pch, "state")) last_output_update[id] = 0;
            break;
          }
      }
      pch = strtok (NULL, "/");
    bfc6:	63 e1       	ldi	r22, 0x13	; 19
    bfc8:	74 e0       	ldi	r23, 0x04	; 4
    bfca:	90 e0       	ldi	r25, 0x00	; 0
    bfcc:	80 e0       	ldi	r24, 0x00	; 0
    bfce:	0e 94 49 80 	call	0x10092	; 0x10092 <strtok>
    bfd2:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1998
      cnt++;
    bfd4:	f3 94       	inc	r15
    bfd6:	ee cf       	rjmp	.-36     	; 0xbfb4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c8e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1987
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1)
    bfd8:	f1 e0       	ldi	r31, 0x01	; 1
    bfda:	ff 12       	cpse	r15, r31
    bfdc:	f4 cf       	rjmp	.-24     	; 0xbfc6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ca0>
    bfde:	8f e5       	ldi	r24, 0x5F	; 95
    bfe0:	c8 2e       	mov	r12, r24
    bfe2:	dd 24       	eor	r13, r13
    bfe4:	d3 94       	inc	r13
thermostat_ring_get_output():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:123
}

/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_output(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
    bfe6:	c6 01       	movw	r24, r12
    bfe8:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1990
      {
        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
          if (thermostat_ring_get_output(idx) == id)
    bfec:	78 12       	cpse	r7, r24
    bfee:	19 c0       	rjmp	.+50     	; 0xc022 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1cfc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1992
          {
            if (strcmp(pch, "pwm")) last_output_update[id] = 0;
    bff0:	65 e3       	ldi	r22, 0x35	; 53
    bff2:	76 e0       	ldi	r23, 0x06	; 6
    bff4:	c8 01       	movw	r24, r16
    bff6:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
    bffa:	89 2b       	or	r24, r25
    bffc:	29 f0       	breq	.+10     	; 0xc008 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ce2>
    bffe:	e7 2d       	mov	r30, r7
    c000:	f0 e0       	ldi	r31, 0x00	; 0
    c002:	e6 52       	subi	r30, 0x26	; 38
    c004:	f4 4f       	sbci	r31, 0xF4	; 244
    c006:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1993
            if (strcmp(pch, "state")) last_output_update[id] = 0;
    c008:	69 e3       	ldi	r22, 0x39	; 57
    c00a:	76 e0       	ldi	r23, 0x06	; 6
    c00c:	c8 01       	movw	r24, r16
    c00e:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
    c012:	89 2b       	or	r24, r25
    c014:	c1 f2       	breq	.-80     	; 0xbfc6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ca0>
    c016:	e7 2d       	mov	r30, r7
    c018:	f0 e0       	ldi	r31, 0x00	; 0
    c01a:	e6 52       	subi	r30, 0x26	; 38
    c01c:	f4 4f       	sbci	r31, 0xF4	; 244
    c01e:	10 82       	st	Z, r1
    c020:	d2 cf       	rjmp	.-92     	; 0xbfc6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ca0>
    c022:	21 e2       	ldi	r18, 0x21	; 33
    c024:	c2 0e       	add	r12, r18
    c026:	d1 1c       	adc	r13, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1989
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1)
      {
        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
    c028:	3e e4       	ldi	r19, 0x4E	; 78
    c02a:	c3 16       	cp	r12, r19
    c02c:	33 e0       	ldi	r19, 0x03	; 3
    c02e:	d3 06       	cpc	r13, r19
    c030:	d1 f6       	brne	.-76     	; 0xbfe6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1cc0>
    c032:	c9 cf       	rjmp	.-110    	; 0xbfc6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ca0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2003
      cnt++;
    }
  }

  //// thermctl-in/XXXXX/reload
  strcpy_P(str1, thermctl_header_in);
    c034:	6c ea       	ldi	r22, 0xAC	; 172
    c036:	74 e1       	ldi	r23, 0x14	; 20
    c038:	c5 01       	movw	r24, r10
    c03a:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2004
  strcat(str1, device.nazev);
    c03e:	6c e2       	ldi	r22, 0x2C	; 44
    c040:	70 e1       	ldi	r23, 0x10	; 16
    c042:	c5 01       	movw	r24, r10
    c044:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2005
  strcat(str1, "/reload");
    c048:	6f e3       	ldi	r22, 0x3F	; 63
    c04a:	76 e0       	ldi	r23, 0x06	; 6
    c04c:	c5 01       	movw	r24, r10
    c04e:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2006
  if (strcmp(str1, topic) == 0)
    c052:	b4 01       	movw	r22, r8
    c054:	c5 01       	movw	r24, r10
    c056:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
    c05a:	8c 01       	movw	r16, r24
    c05c:	89 2b       	or	r24, r25
    c05e:	79 f4       	brne	.+30     	; 0xc07e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1d58>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2008
  {
    mqtt_process_message++;
    c060:	80 91 be 0b 	lds	r24, 0x0BBE	; 0x800bbe <mqtt_process_message>
    c064:	90 91 bf 0b 	lds	r25, 0x0BBF	; 0x800bbf <mqtt_process_message+0x1>
    c068:	01 96       	adiw	r24, 0x01	; 1
    c06a:	90 93 bf 0b 	sts	0x0BBF, r25	; 0x800bbf <mqtt_process_message+0x1>
    c06e:	80 93 be 0b 	sts	0x0BBE, r24	; 0x800bbe <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2009
    log_error(&mqtt_client, "reload ..... ");
    c072:	87 e4       	ldi	r24, 0x47	; 71
    c074:	96 e0       	ldi	r25, 0x06	; 6
    c076:	0e 94 98 49 	call	0x9330	; 0x9330 <log_error(PubSubClient*, char*) [clone .constprop.70]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2010
    resetFunc();
    c07a:	f8 01       	movw	r30, r16
    c07c:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2014
  }

  //// thermctl-in/XXXXX/reload
  strcpy_P(str1, thermctl_header_in);
    c07e:	6c ea       	ldi	r22, 0xAC	; 172
    c080:	74 e1       	ldi	r23, 0x14	; 20
    c082:	c5 01       	movw	r24, r10
    c084:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2015
  strcat(str1, device.nazev);
    c088:	6c e2       	ldi	r22, 0x2C	; 44
    c08a:	70 e1       	ldi	r23, 0x10	; 16
    c08c:	c5 01       	movw	r24, r10
    c08e:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2016
  strcat(str1, "/bootloader");
    c092:	65 e5       	ldi	r22, 0x55	; 85
    c094:	76 e0       	ldi	r23, 0x06	; 6
    c096:	c5 01       	movw	r24, r10
    c098:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2017
  if (strcmp(str1, topic) == 0)
    c09c:	b4 01       	movw	r22, r8
    c09e:	c5 01       	movw	r24, r10
    c0a0:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
    c0a4:	89 2b       	or	r24, r25
    c0a6:	e9 f4       	brne	.+58     	; 0xc0e2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1dbc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2019
  {
    mqtt_process_message++;
    c0a8:	80 91 be 0b 	lds	r24, 0x0BBE	; 0x800bbe <mqtt_process_message>
    c0ac:	90 91 bf 0b 	lds	r25, 0x0BBF	; 0x800bbf <mqtt_process_message+0x1>
    c0b0:	01 96       	adiw	r24, 0x01	; 1
    c0b2:	90 93 bf 0b 	sts	0x0BBF, r25	; 0x800bbf <mqtt_process_message+0x1>
    c0b6:	80 93 be 0b 	sts	0x0BBE, r24	; 0x800bbe <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2020
    log_error(&mqtt_client, "bootloader ..... ");
    c0ba:	81 e6       	ldi	r24, 0x61	; 97
    c0bc:	96 e0       	ldi	r25, 0x06	; 6
    c0be:	0e 94 98 49 	call	0x9330	; 0x9330 <log_error(PubSubClient*, char*) [clone .constprop.70]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2021
    EEPROM.write(bootloader_tag, 255);
    c0c2:	6f ef       	ldi	r22, 0xFF	; 255
    c0c4:	90 e0       	ldi	r25, 0x00	; 0
    c0c6:	80 e0       	ldi	r24, 0x00	; 0
    c0c8:	0e 94 81 44 	call	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>
wdt_enable():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/avr/wdt.h:486
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
    c0cc:	88 e1       	ldi	r24, 0x18	; 24
    c0ce:	9e e0       	ldi	r25, 0x0E	; 14
    c0d0:	0f b6       	in	r0, 0x3f	; 63
    c0d2:	f8 94       	cli
    c0d4:	a8 95       	wdr
    c0d6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    c0da:	0f be       	out	0x3f, r0	; 63
    c0dc:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    c0e0:	ff cf       	rjmp	.-2      	; 0xc0e0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1dba>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2027
    wdt_enable(WDTO_1S);
    while (1);
  }

  //// /thermctl-in/XXXXX/reset_default
  strcpy_P(str1, thermctl_header_in);
    c0e2:	6c ea       	ldi	r22, 0xAC	; 172
    c0e4:	74 e1       	ldi	r23, 0x14	; 20
    c0e6:	c5 01       	movw	r24, r10
    c0e8:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2028
  strcat(str1, device.nazev);
    c0ec:	6c e2       	ldi	r22, 0x2C	; 44
    c0ee:	70 e1       	ldi	r23, 0x10	; 16
    c0f0:	c5 01       	movw	r24, r10
    c0f2:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2029
  strcat(str1, "/default");
    c0f6:	67 ee       	ldi	r22, 0xE7	; 231
    c0f8:	74 e0       	ldi	r23, 0x04	; 4
    c0fa:	c5 01       	movw	r24, r10
    c0fc:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2030
  if (strcmp(str1, topic) == 0)
    c100:	b4 01       	movw	r22, r8
    c102:	c5 01       	movw	r24, r10
    c104:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <strcmp>
    c108:	89 2b       	or	r24, r25
    c10a:	91 f4       	brne	.+36     	; 0xc130 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1e0a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2032
  {
    mqtt_process_message++;
    c10c:	80 91 be 0b 	lds	r24, 0x0BBE	; 0x800bbe <mqtt_process_message>
    c110:	90 91 bf 0b 	lds	r25, 0x0BBF	; 0x800bbf <mqtt_process_message+0x1>
    c114:	01 96       	adiw	r24, 0x01	; 1
    c116:	90 93 bf 0b 	sts	0x0BBF, r25	; 0x800bbf <mqtt_process_message+0x1>
    c11a:	80 93 be 0b 	sts	0x0BBE, r24	; 0x800bbe <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2034
    //strncpy(str2, payload, length);
    EEPROM.write(set_default_values, atoi(my_payload));
    c11e:	8a e4       	ldi	r24, 0x4A	; 74
    c120:	9e e0       	ldi	r25, 0x0E	; 14
    c122:	0e 94 10 80 	call	0x10020	; 0x10020 <atoi>
    c126:	68 2f       	mov	r22, r24
    c128:	8a e5       	ldi	r24, 0x5A	; 90
    c12a:	90 e0       	ldi	r25, 0x00	; 0
    c12c:	0e 94 81 44 	call	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2037
  }

}
    c130:	c9 5e       	subi	r28, 0xE9	; 233
    c132:	de 4f       	sbci	r29, 0xFE	; 254
    c134:	0f b6       	in	r0, 0x3f	; 63
    c136:	f8 94       	cli
    c138:	de bf       	out	0x3e, r29	; 62
    c13a:	0f be       	out	0x3f, r0	; 63
    c13c:	cd bf       	out	0x3d, r28	; 61
    c13e:	df 91       	pop	r29
    c140:	cf 91       	pop	r28
    c142:	1f 91       	pop	r17
    c144:	0f 91       	pop	r16
    c146:	ff 90       	pop	r15
    c148:	ef 90       	pop	r14
    c14a:	df 90       	pop	r13
    c14c:	cf 90       	pop	r12
    c14e:	bf 90       	pop	r11
    c150:	af 90       	pop	r10
    c152:	9f 90       	pop	r9
    c154:	8f 90       	pop	r8
    c156:	7f 90       	pop	r7
    c158:	6f 90       	pop	r6
    c15a:	5f 90       	pop	r5
    c15c:	4f 90       	pop	r4
    c15e:	3f 90       	pop	r3
    c160:	2f 90       	pop	r2
    c162:	08 95       	ret

0000c164 <MenuPrepareStyle()>:
_Z16MenuPrepareStylev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:867




void MenuPrepareStyle(void)
{
    c164:	7f 92       	push	r7
    c166:	8f 92       	push	r8
    c168:	9f 92       	push	r9
    c16a:	af 92       	push	r10
    c16c:	bf 92       	push	r11
    c16e:	cf 92       	push	r12
    c170:	df 92       	push	r13
    c172:	ef 92       	push	r14
    c174:	ff 92       	push	r15
    c176:	0f 93       	push	r16
    c178:	1f 93       	push	r17
    c17a:	cf 93       	push	r28
    c17c:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:877
  uint16_t size_y;
  uint16_t color_background;
  uint8_t args;
  Menu1 *current;

  current = MenuHistoryGetMenu();
    c17e:	0e 94 2a 2e 	call	0x5c54	; 0x5c54 <MenuHistoryGetMenu()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:878
  attr = pgm_read_byte(&current->atributes);
    c182:	fc 01       	movw	r30, r24
    c184:	e9 56       	subi	r30, 0x69	; 105
    c186:	fe 4f       	sbci	r31, 0xFE	; 254
    c188:	74 90       	lpm	r7, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:879
  x = pgm_read_word(&current->x);
    c18a:	38 97       	sbiw	r30, 0x08	; 8
    c18c:	a5 90       	lpm	r10, Z+
    c18e:	b4 90       	lpm	r11, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:880
  y = pgm_read_word(&current->y);
    c190:	fc 01       	movw	r30, r24
    c192:	ef 56       	subi	r30, 0x6F	; 111
    c194:	fe 4f       	sbci	r31, 0xFE	; 254
    c196:	c5 91       	lpm	r28, Z+
    c198:	d4 91       	lpm	r29, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:881
  size_x = pgm_read_word(&current->size_x);
    c19a:	fc 01       	movw	r30, r24
    c19c:	ed 56       	subi	r30, 0x6D	; 109
    c19e:	fe 4f       	sbci	r31, 0xFE	; 254
    c1a0:	85 90       	lpm	r8, Z+
    c1a2:	94 90       	lpm	r9, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:882
  size_y = pgm_read_word(&current->size_y);
    c1a4:	fc 01       	movw	r30, r24
    c1a6:	eb 56       	subi	r30, 0x6B	; 107
    c1a8:	fe 4f       	sbci	r31, 0xFE	; 254
    c1aa:	c5 90       	lpm	r12, Z+
    c1ac:	d4 90       	lpm	r13, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:883
  color_background = pgm_read_word(&current->color_background);
    c1ae:	88 56       	subi	r24, 0x68	; 104
    c1b0:	9e 4f       	sbci	r25, 0xFE	; 254
    c1b2:	fc 01       	movw	r30, r24
    c1b4:	e5 90       	lpm	r14, Z+
    c1b6:	f4 90       	lpm	r15, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:885

  printf("attr %d\n", attr);
    c1b8:	1f 92       	push	r1
    c1ba:	7f 92       	push	r7
    c1bc:	87 ec       	ldi	r24, 0xC7	; 199
    c1be:	96 e0       	ldi	r25, 0x06	; 6
    c1c0:	9f 93       	push	r25
    c1c2:	8f 93       	push	r24
    c1c4:	0e 94 fc 8c 	call	0x119f8	; 0x119f8 <printf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:886
  if ((attr & (1 << MENU_ATTRIBUTES_CLEAN_DISPLAY)) != 0)
    c1c8:	0f 90       	pop	r0
    c1ca:	0f 90       	pop	r0
    c1cc:	0f 90       	pop	r0
    c1ce:	0f 90       	pop	r0
    c1d0:	70 fe       	sbrs	r7, 0
    c1d2:	07 c0       	rjmp	.+14     	; 0xc1e2 <MenuPrepareStyle()+0x7e>
DisplayClean():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1232
  ///
*/

void DisplayClean(uint16_t color)
{
  my_lcd.Fill_Screen(color);
    c1d4:	c7 01       	movw	r24, r14
    c1d6:	0e 94 55 20 	call	0x40aa	; 0x40aa <LCDWIKI_GUI::Fill_Screen(unsigned int) [clone .constprop.175]>
_Z16MenuPrepareStylev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:889

  printf("attr %d\n", attr);
  if ((attr & (1 << MENU_ATTRIBUTES_CLEAN_DISPLAY)) != 0)
  {
    DisplayClean(color_background);
    printf("mazu disply\n");
    c1da:	80 ed       	ldi	r24, 0xD0	; 208
    c1dc:	96 e0       	ldi	r25, 0x06	; 6
    c1de:	0e 94 10 8d 	call	0x11a20	; 0x11a20 <puts>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:892
  }

  if ((attr & (1 << MENU_ATTRIBUTES_FILL_COLOR_RECTANGLE)) != 0)
    c1e2:	71 fe       	sbrs	r7, 1
    c1e4:	18 c0       	rjmp	.+48     	; 0xc216 <MenuPrepareStyle()+0xb2>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    c1e6:	f0 92 c2 11 	sts	0x11C2, r15	; 0x8011c2 <my_lcd+0xb>
    c1ea:	e0 92 c1 11 	sts	0x11C1, r14	; 0x8011c1 <my_lcd+0xa>
Fill_Rectangle():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:72
}

//fill a rectangle
void LCDWIKI_GUI::Fill_Rectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
{
	int w = x2 - x1 + 1, h = y2 - y1 + 1;
    c1ee:	94 01       	movw	r18, r8
    c1f0:	2f 5f       	subi	r18, 0xFF	; 255
    c1f2:	3f 4f       	sbci	r19, 0xFF	; 255
    c1f4:	86 01       	movw	r16, r12
    c1f6:	0f 5f       	subi	r16, 0xFF	; 255
    c1f8:	1f 4f       	sbci	r17, 0xFF	; 255
_Z16MenuPrepareStylev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:895
  {
    my_lcd.Set_Draw_color(color_background);
    my_lcd.Fill_Rectangle(x, y, x + size_x, y + size_y);
    c1fa:	b5 01       	movw	r22, r10
Fill_Rectangle():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:73
   	if (w < 0) 
    c1fc:	37 fd       	sbrc	r19, 7
    c1fe:	46 c0       	rjmp	.+140    	; 0xc28c <MenuPrepareStyle()+0x128>
_Z16MenuPrepareStylev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:895
    c200:	ae 01       	movw	r20, r28
Fill_Rectangle():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:78
	{ 
		x1 = x2; 
		w = -w; 
	}
	if (h < 0) 
    c202:	17 fd       	sbrc	r17, 7
    c204:	49 c0       	rjmp	.+146    	; 0xc298 <MenuPrepareStyle()+0x134>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:83
	{ 
		y1 = y2; 
		h = -h; 
	}
	Fill_Rect(x1, y1, w, h, draw_color);
    c206:	87 eb       	ldi	r24, 0xB7	; 183
    c208:	91 e1       	ldi	r25, 0x11	; 17
    c20a:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
_Z16MenuPrepareStylev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:896
    printf("vybarvuji ctverec\n");
    c20e:	8c ed       	ldi	r24, 0xDC	; 220
    c210:	96 e0       	ldi	r25, 0x06	; 6
    c212:	0e 94 10 8d 	call	0x11a20	; 0x11a20 <puts>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:899
  }

  if ((attr & (1 << MENU_ATTRIBUTES_DECORATE_MENU)) != 0)
    c216:	72 fe       	sbrs	r7, 2
    c218:	45 c0       	rjmp	.+138    	; 0xc2a4 <MenuPrepareStyle()+0x140>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
}

//set 16bits draw color
void LCDWIKI_GUI::Set_Draw_color(uint16_t color)
{
	draw_color = color;
    c21a:	10 92 c2 11 	sts	0x11C2, r1	; 0x8011c2 <my_lcd+0xb>
    c21e:	10 92 c1 11 	sts	0x11C1, r1	; 0x8011c1 <my_lcd+0xa>
    c222:	f1 2c       	mov	r15, r1
    c224:	e1 2c       	mov	r14, r1
_Z16MenuPrepareStylev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:904
  {
    my_lcd.Set_Draw_color(BLACK);
    for (uint8_t i = 0; i < 4; i++)
    {
      my_lcd.Draw_Rectangle(x + i, y + i, x + size_x - i, y + size_y - i);
    c226:	cc 0e       	add	r12, r28
    c228:	dd 1e       	adc	r13, r29
    c22a:	85 01       	movw	r16, r10
    c22c:	08 0d       	add	r16, r8
    c22e:	19 1d       	adc	r17, r9
    c230:	96 01       	movw	r18, r12
    c232:	2e 19       	sub	r18, r14
    c234:	3f 09       	sbc	r19, r15
    c236:	a8 01       	movw	r20, r16
    c238:	4e 19       	sub	r20, r14
    c23a:	5f 09       	sbc	r21, r15
    c23c:	be 01       	movw	r22, r28
    c23e:	c5 01       	movw	r24, r10
    c240:	8e 0d       	add	r24, r14
    c242:	9f 1d       	adc	r25, r15
    c244:	0e 94 82 20 	call	0x4104	; 0x4104 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.172]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:905
      my_lcd.Draw_Fast_HLine(x, y + 20 + i, size_x - i);
    c248:	a4 01       	movw	r20, r8
    c24a:	4e 19       	sub	r20, r14
    c24c:	5f 09       	sbc	r21, r15
    c24e:	be 01       	movw	r22, r28
    c250:	6c 5e       	subi	r22, 0xEC	; 236
    c252:	7f 4f       	sbci	r23, 0xFF	; 255
    c254:	c5 01       	movw	r24, r10
    c256:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.174]>
    c25a:	8f ef       	ldi	r24, 0xFF	; 255
    c25c:	e8 1a       	sub	r14, r24
    c25e:	f8 0a       	sbc	r15, r24
    c260:	21 96       	adiw	r28, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:902
  }

  if ((attr & (1 << MENU_ATTRIBUTES_DECORATE_MENU)) != 0)
  {
    my_lcd.Set_Draw_color(BLACK);
    for (uint8_t i = 0; i < 4; i++)
    c262:	84 e0       	ldi	r24, 0x04	; 4
    c264:	e8 16       	cp	r14, r24
    c266:	f1 04       	cpc	r15, r1
    c268:	19 f7       	brne	.-58     	; 0xc230 <MenuPrepareStyle()+0xcc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:907
    {
      my_lcd.Draw_Rectangle(x + i, y + i, x + size_x - i, y + size_y - i);
      my_lcd.Draw_Fast_HLine(x, y + 20 + i, size_x - i);
    }
    printf("delam dekoraci\n");
    c26a:	8e ee       	ldi	r24, 0xEE	; 238
    c26c:	96 e0       	ldi	r25, 0x06	; 6
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:910
  }

}
    c26e:	df 91       	pop	r29
    c270:	cf 91       	pop	r28
    c272:	1f 91       	pop	r17
    c274:	0f 91       	pop	r16
    c276:	ff 90       	pop	r15
    c278:	ef 90       	pop	r14
    c27a:	df 90       	pop	r13
    c27c:	cf 90       	pop	r12
    c27e:	bf 90       	pop	r11
    c280:	af 90       	pop	r10
    c282:	9f 90       	pop	r9
    c284:	8f 90       	pop	r8
    c286:	7f 90       	pop	r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:907
    for (uint8_t i = 0; i < 4; i++)
    {
      my_lcd.Draw_Rectangle(x + i, y + i, x + size_x - i, y + size_y - i);
      my_lcd.Draw_Fast_HLine(x, y + 20 + i, size_x - i);
    }
    printf("delam dekoraci\n");
    c288:	0c 94 10 8d 	jmp	0x11a20	; 0x11a20 <puts>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:895
  }

  if ((attr & (1 << MENU_ATTRIBUTES_FILL_COLOR_RECTANGLE)) != 0)
  {
    my_lcd.Set_Draw_color(color_background);
    my_lcd.Fill_Rectangle(x, y, x + size_x, y + size_y);
    c28c:	68 0d       	add	r22, r8
    c28e:	79 1d       	adc	r23, r9
Fill_Rectangle():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:76
{
	int w = x2 - x1 + 1, h = y2 - y1 + 1;
   	if (w < 0) 
	{ 
		x1 = x2; 
		w = -w; 
    c290:	94 01       	movw	r18, r8
    c292:	20 95       	com	r18
    c294:	30 95       	com	r19
    c296:	b4 cf       	rjmp	.-152    	; 0xc200 <MenuPrepareStyle()+0x9c>
_Z16MenuPrepareStylev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:895
    c298:	4c 0d       	add	r20, r12
    c29a:	5d 1d       	adc	r21, r13
Fill_Rectangle():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:81
	}
	if (h < 0) 
	{ 
		y1 = y2; 
		h = -h; 
    c29c:	86 01       	movw	r16, r12
    c29e:	00 95       	com	r16
    c2a0:	10 95       	com	r17
    c2a2:	b1 cf       	rjmp	.-158    	; 0xc206 <MenuPrepareStyle()+0xa2>
_Z16MenuPrepareStylev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:910
      my_lcd.Draw_Fast_HLine(x, y + 20 + i, size_x - i);
    }
    printf("delam dekoraci\n");
  }

}
    c2a4:	df 91       	pop	r29
    c2a6:	cf 91       	pop	r28
    c2a8:	1f 91       	pop	r17
    c2aa:	0f 91       	pop	r16
    c2ac:	ff 90       	pop	r15
    c2ae:	ef 90       	pop	r14
    c2b0:	df 90       	pop	r13
    c2b2:	cf 90       	pop	r12
    c2b4:	bf 90       	pop	r11
    c2b6:	af 90       	pop	r10
    c2b8:	9f 90       	pop	r9
    c2ba:	8f 90       	pop	r8
    c2bc:	7f 90       	pop	r7
    c2be:	08 95       	ret

0000c2c0 <setup>:
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2741
/*************************************************************************************************************************/


/// setup - zakladni nastaveni - vola se pouze 1x
void setup()
{
    c2c0:	2f 92       	push	r2
    c2c2:	3f 92       	push	r3
    c2c4:	4f 92       	push	r4
    c2c6:	5f 92       	push	r5
    c2c8:	6f 92       	push	r6
    c2ca:	7f 92       	push	r7
    c2cc:	8f 92       	push	r8
    c2ce:	9f 92       	push	r9
    c2d0:	af 92       	push	r10
    c2d2:	bf 92       	push	r11
    c2d4:	cf 92       	push	r12
    c2d6:	df 92       	push	r13
    c2d8:	ef 92       	push	r14
    c2da:	ff 92       	push	r15
    c2dc:	0f 93       	push	r16
    c2de:	1f 93       	push	r17
    c2e0:	cf 93       	push	r28
    c2e2:	df 93       	push	r29
    c2e4:	cd b7       	in	r28, 0x3d	; 61
    c2e6:	de b7       	in	r29, 0x3e	; 62
    c2e8:	cd 54       	subi	r28, 0x4D	; 77
    c2ea:	d1 40       	sbci	r29, 0x01	; 1
    c2ec:	0f b6       	in	r0, 0x3f	; 63
    c2ee:	f8 94       	cli
    c2f0:	de bf       	out	0x3e, r29	; 62
    c2f2:	0f be       	out	0x3f, r0	; 63
    c2f4:	cd bf       	out	0x3d, r28	; 61
__base_ctor ():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:25
 */

#include "NTPClient.h"
#include "time.h"

NTPClient::NTPClient(UDP& udp) {
    c2f6:	1b 82       	std	Y+3, r1	; 0x03
    c2f8:	8e e8       	ldi	r24, 0x8E	; 142
    c2fa:	93 e0       	ldi	r25, 0x03	; 3
    c2fc:	9d 83       	std	Y+5, r25	; 0x05
    c2fe:	8c 83       	std	Y+4, r24	; 0x04
    c300:	89 e3       	ldi	r24, 0x39	; 57
    c302:	95 e0       	ldi	r25, 0x05	; 5
    c304:	9f 83       	std	Y+7, r25	; 0x07
    c306:	8e 83       	std	Y+6, r24	; 0x06
    c308:	18 86       	std	Y+8, r1	; 0x08
    c30a:	19 86       	std	Y+9, r1	; 0x09
    c30c:	1a 86       	std	Y+10, r1	; 0x0a
    c30e:	1b 86       	std	Y+11, r1	; 0x0b
    c310:	80 e6       	ldi	r24, 0x60	; 96
    c312:	9a ee       	ldi	r25, 0xEA	; 234
    c314:	a0 e0       	ldi	r26, 0x00	; 0
    c316:	b0 e0       	ldi	r27, 0x00	; 0
    c318:	8c 87       	std	Y+12, r24	; 0x0c
    c31a:	9d 87       	std	Y+13, r25	; 0x0d
    c31c:	ae 87       	std	Y+14, r26	; 0x0e
    c31e:	bf 87       	std	Y+15, r27	; 0x0f
    c320:	18 8a       	std	Y+16, r1	; 0x10
    c322:	19 8a       	std	Y+17, r1	; 0x11
    c324:	1a 8a       	std	Y+18, r1	; 0x12
    c326:	1b 8a       	std	Y+19, r1	; 0x13
    c328:	1c 8a       	std	Y+20, r1	; 0x14
    c32a:	1d 8a       	std	Y+21, r1	; 0x15
    c32c:	1e 8a       	std	Y+22, r1	; 0x16
    c32e:	1f 8a       	std	Y+23, r1	; 0x17
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:26
  this->_udp            = &udp;
    c330:	8e ec       	ldi	r24, 0xCE	; 206
    c332:	95 e1       	ldi	r25, 0x15	; 21
    c334:	9a 83       	std	Y+2, r25	; 0x02
    c336:	89 83       	std	Y+1, r24	; 0x01
setup_io_pin():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2542
/////////////// HW funkce ///////////////////////////////////////////////////////////////////////

/// setup_io_pin - nastaveni IO pinu
void setup_io_pin(void)
{
  pinMode(ETH_RST, OUTPUT);
    c338:	61 e0       	ldi	r22, 0x01	; 1
    c33a:	86 e0       	ldi	r24, 0x06	; 6
    c33c:	0e 94 9f 11 	call	0x233e	; 0x233e <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2543
  pinMode(ETH_CS, OUTPUT);
    c340:	61 e0       	ldi	r22, 0x01	; 1
    c342:	8f e0       	ldi	r24, 0x0F	; 15
    c344:	0e 94 9f 11 	call	0x233e	; 0x233e <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2544
  pinMode(LED, OUTPUT);
    c348:	61 e0       	ldi	r22, 0x01	; 1
    c34a:	88 e0       	ldi	r24, 0x08	; 8
    c34c:	0e 94 9f 11 	call	0x233e	; 0x233e <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2545
  pinMode(PIEZO, OUTPUT);
    c350:	61 e0       	ldi	r22, 0x01	; 1
    c352:	8c e0       	ldi	r24, 0x0C	; 12
    c354:	0e 94 9f 11 	call	0x233e	; 0x233e <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2546
  pinMode(STORAGE_RAM_CS, OUTPUT);
    c358:	61 e0       	ldi	r22, 0x01	; 1
    c35a:	86 e1       	ldi	r24, 0x16	; 22
    c35c:	0e 94 9f 11 	call	0x233e	; 0x233e <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2547
  pinMode(STORAGE_EEPROM_CS, OUTPUT);
    c360:	61 e0       	ldi	r22, 0x01	; 1
    c362:	87 e1       	ldi	r24, 0x17	; 23
    c364:	0e 94 9f 11 	call	0x233e	; 0x233e <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2548
  pinMode(JUMPER, INPUT_PULLUP);
    c368:	62 e0       	ldi	r22, 0x02	; 2
    c36a:	8e e0       	ldi	r24, 0x0E	; 14
    c36c:	0e 94 9f 11 	call	0x233e	; 0x233e <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2550

  digitalWrite(PIEZO, LOW);
    c370:	60 e0       	ldi	r22, 0x00	; 0
    c372:	8c e0       	ldi	r24, 0x0C	; 12
    c374:	0e 94 3a 11 	call	0x2274	; 0x2274 <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2551
  delay(1000);
    c378:	68 ee       	ldi	r22, 0xE8	; 232
    c37a:	73 e0       	ldi	r23, 0x03	; 3
    c37c:	80 e0       	ldi	r24, 0x00	; 0
    c37e:	90 e0       	ldi	r25, 0x00	; 0
    c380:	0e 94 00 12 	call	0x2400	; 0x2400 <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2552
  digitalWrite(PIEZO, HIGH);
    c384:	61 e0       	ldi	r22, 0x01	; 1
    c386:	8c e0       	ldi	r24, 0x0C	; 12
    c388:	0e 94 3a 11 	call	0x2274	; 0x2274 <digitalWrite>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2757

  NTPClient timeClient(udpClient);

  setup_io_pin();

  interrupts();             // enable all interrupts
    c38c:	78 94       	sei
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2758
  SPI.begin();
    c38e:	0e 94 96 1c 	call	0x392c	; 0x392c <SPIClass::begin()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2759
  Wire.begin();
    c392:	0e 94 6d 11 	call	0x22da	; 0x22da <TwoWire::begin() [clone .constprop.73]>
begin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:240

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }

boolean RTC_DS1307::begin(void) {
  Wire.begin();
    c396:	0e 94 6d 11 	call	0x22da	; 0x22da <TwoWire::begin() [clone .constprop.73]>
mqtt_set_public_mqtt_client():
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:442
  send_mqtt_general_payload(mqtt_client, topic, log);
}
///////////////////////////////////////////////////////////////////////////
void mqtt_set_public_mqtt_client(PubSubClient *mqtt_client)
{
  pub_mqtt_client = mqtt_client;
    c39a:	81 eb       	ldi	r24, 0xB1	; 177
    c39c:	93 e1       	ldi	r25, 0x13	; 19
    c39e:	90 93 ce 09 	sts	0x09CE, r25	; 0x8009ce <pub_mqtt_client+0x1>
    c3a2:	80 93 cd 09 	sts	0x09CD, r24	; 0x8009cd <pub_mqtt_client>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2763
  rtc.begin();

  mqtt_set_public_mqtt_client(&mqtt_client);
  fdevopen( &printf_via_mqtt, 0);
    c3a6:	70 e0       	ldi	r23, 0x00	; 0
    c3a8:	60 e0       	ldi	r22, 0x00	; 0
    c3aa:	8e eb       	ldi	r24, 0xBE	; 190
    c3ac:	99 e4       	ldi	r25, 0x49	; 73
    c3ae:	0e 94 ac 80 	call	0x10158	; 0x10158 <fdevopen>
printf_begin():
/home/saric/Arduino/libraries/RF24/printf.h:31

void printf_begin(void)
{
  fdevopen( &serial_putc, 0 );
    c3b2:	70 e0       	ldi	r23, 0x00	; 0
    c3b4:	60 e0       	ldi	r22, 0x00	; 0
    c3b6:	81 e5       	ldi	r24, 0x51	; 81
    c3b8:	9e e2       	ldi	r25, 0x2E	; 46
    c3ba:	0e 94 ac 80 	call	0x10158	; 0x10158 <fdevopen>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2766
  printf_begin();

  swSPI.begin();
    c3be:	8d ef       	ldi	r24, 0xFD	; 253
    c3c0:	95 e1       	ldi	r25, 0x15	; 21
    c3c2:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <SoftSPIB::begin()>
MenuHistoryInit():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:943
}


void MenuHistoryInit(void)
{
  MenuHistory[MenuHistoryIndex] = MENU_DEFAULT_SCREEN;
    c3c6:	e0 91 16 09 	lds	r30, 0x0916	; 0x800916 <MenuHistoryIndex>
    c3ca:	f0 e0       	ldi	r31, 0x00	; 0
    c3cc:	e4 5f       	subi	r30, 0xF4	; 244
    c3ce:	f6 4f       	sbci	r31, 0xF6	; 246
    c3d0:	10 82       	st	Z, r1
Init_LCD():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:234
*/

// Initialization lcd modules
void LCDWIKI_KBV::Init_LCD(void)
{
	reset();
    c3d2:	0e 94 33 12 	call	0x2466	; 0x2466 <LCDWIKI_KBV::reset() [clone .constprop.81]>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:235
	if(lcd_model == 0xFFFF)
    c3d6:	80 91 d1 11 	lds	r24, 0x11D1	; 0x8011d1 <my_lcd+0x1a>
    c3da:	90 91 d2 11 	lds	r25, 0x11D2	; 0x8011d2 <my_lcd+0x1b>
    c3de:	01 96       	adiw	r24, 0x01	; 1
    c3e0:	09 f0       	breq	.+2      	; 0xc3e4 <setup+0x124>
    c3e2:	4c c0       	rjmp	.+152    	; 0xc47c <setup+0x1bc>
Read_ID():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:575

//read LCD controller chip ID 
uint16_t LCDWIKI_KBV::Read_ID(void)
{
	uint16_t ret;
	if ((Read_Reg(0x04,0) == 0x00)&&(Read_Reg(0x04,1) == 0x8000))
    c3e4:	60 e0       	ldi	r22, 0x00	; 0
    c3e6:	84 e0       	ldi	r24, 0x04	; 4
    c3e8:	90 e0       	ldi	r25, 0x00	; 0
    c3ea:	0e 94 a4 12 	call	0x2548	; 0x2548 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.79]>
    c3ee:	89 2b       	or	r24, r25
    c3f0:	39 f5       	brne	.+78     	; 0xc440 <setup+0x180>
    c3f2:	61 e0       	ldi	r22, 0x01	; 1
    c3f4:	84 e0       	ldi	r24, 0x04	; 4
    c3f6:	90 e0       	ldi	r25, 0x00	; 0
    c3f8:	0e 94 a4 12 	call	0x2548	; 0x2548 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.79]>
    c3fc:	81 15       	cp	r24, r1
    c3fe:	90 48       	sbci	r25, 0x80	; 128
    c400:	f9 f4       	brne	.+62     	; 0xc440 <setup+0x180>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:577
	{
		uint8_t buf[] = {0xFF, 0x83, 0x57};
    c402:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <__malloc_margin+0x9>
    c406:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <__malloc_margin+0xa>
    c40a:	a0 91 1f 02 	lds	r26, 0x021F	; 0x80021f <__malloc_margin+0xb>
    c40e:	2b 96       	adiw	r28, 0x0b	; 11
    c410:	8d af       	std	Y+61, r24	; 0x3d
    c412:	9e af       	std	Y+62, r25	; 0x3e
    c414:	af af       	std	Y+63, r26	; 0x3f
    c416:	2b 97       	sbiw	r28, 0x0b	; 11
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:578
		Push_Command(HX8357D_SETC, buf, sizeof(buf));
    c418:	23 e0       	ldi	r18, 0x03	; 3
    c41a:	ae 01       	movw	r20, r28
    c41c:	48 5b       	subi	r20, 0xB8	; 184
    c41e:	5f 4f       	sbci	r21, 0xFF	; 255
    c420:	69 eb       	ldi	r22, 0xB9	; 185
    c422:	70 e0       	ldi	r23, 0x00	; 0
    c424:	87 eb       	ldi	r24, 0xB7	; 183
    c426:	91 e1       	ldi	r25, 0x11	; 17
    c428:	0e 94 75 23 	call	0x46ea	; 0x46ea <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:579
		ret = (Read_Reg(0xD0,0) << 16) | Read_Reg(0xD0,1);
    c42c:	60 e0       	ldi	r22, 0x00	; 0
    c42e:	80 ed       	ldi	r24, 0xD0	; 208
    c430:	90 e0       	ldi	r25, 0x00	; 0
    c432:	0e 94 a4 12 	call	0x2548	; 0x2548 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.79]>
    c436:	61 e0       	ldi	r22, 0x01	; 1
    c438:	80 ed       	ldi	r24, 0xD0	; 208
    c43a:	90 e0       	ldi	r25, 0x00	; 0
    c43c:	0e 94 a4 12 	call	0x2548	; 0x2548 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.79]>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:585
		if((ret == 0x990000) || (ret == 0x900000))
		{
			return 0x9090;
		}
	}
	ret = Read_Reg(0xD3,1); //0x9341 0x9486
    c440:	61 e0       	ldi	r22, 0x01	; 1
    c442:	83 ed       	ldi	r24, 0xD3	; 211
    c444:	90 e0       	ldi	r25, 0x00	; 0
    c446:	0e 94 a4 12 	call	0x2548	; 0x2548 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.79]>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:586
	if(ret == 0x9341)
    c44a:	81 34       	cpi	r24, 0x41	; 65
    c44c:	a3 e9       	ldi	r26, 0x93	; 147
    c44e:	9a 07       	cpc	r25, r26
    c450:	89 f0       	breq	.+34     	; 0xc474 <setup+0x1b4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:590
	{
		return 0x9341;
	}
	else if(ret == 0x9486)
    c452:	86 38       	cpi	r24, 0x86	; 134
    c454:	b4 e9       	ldi	r27, 0x94	; 148
    c456:	9b 07       	cpc	r25, r27
    c458:	69 f0       	breq	.+26     	; 0xc474 <setup+0x1b4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:594
	{
		return 0x9486;
	}
	else if(ret == 0x9488)
    c45a:	88 38       	cpi	r24, 0x88	; 136
    c45c:	e4 e9       	ldi	r30, 0x94	; 148
    c45e:	9e 07       	cpc	r25, r30
    c460:	49 f0       	breq	.+18     	; 0xc474 <setup+0x1b4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:598
	{
		return 0x9488;
	}
	else if(ret == 0x7796)
    c462:	86 39       	cpi	r24, 0x96	; 150
    c464:	f7 e7       	ldi	r31, 0x77	; 119
    c466:	9f 07       	cpc	r25, r31
    c468:	29 f0       	breq	.+10     	; 0xc474 <setup+0x1b4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:604
	{
		return 0x7796;
	}
	else
	{
		return Read_Reg(0, 0); //others
    c46a:	60 e0       	ldi	r22, 0x00	; 0
    c46c:	90 e0       	ldi	r25, 0x00	; 0
    c46e:	80 e0       	ldi	r24, 0x00	; 0
    c470:	0e 94 a4 12 	call	0x2548	; 0x2548 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.79]>
Init_LCD():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:237
void LCDWIKI_KBV::Init_LCD(void)
{
	reset();
	if(lcd_model == 0xFFFF)
	{
		lcd_model = Read_ID(); 
    c474:	90 93 d2 11 	sts	0x11D2, r25	; 0x8011d2 <my_lcd+0x1b>
    c478:	80 93 d1 11 	sts	0x11D1, r24	; 0x8011d1 <my_lcd+0x1a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:240
	}
//	uint16_t ID = Read_ID(); 
	start(lcd_model);
    c47c:	00 91 d1 11 	lds	r16, 0x11D1	; 0x8011d1 <my_lcd+0x1a>
    c480:	10 91 d2 11 	lds	r17, 0x11D2	; 0x8011d2 <my_lcd+0x1b>
start():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:955
    }
}

void LCDWIKI_KBV::start(uint16_t ID)
{
	reset();
    c484:	0e 94 33 12 	call	0x2466	; 0x2466 <LCDWIKI_KBV::reset() [clone .constprop.81]>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:956
	delay(200);
    c488:	68 ec       	ldi	r22, 0xC8	; 200
    c48a:	70 e0       	ldi	r23, 0x00	; 0
    c48c:	80 e0       	ldi	r24, 0x00	; 0
    c48e:	90 e0       	ldi	r25, 0x00	; 0
    c490:	0e 94 00 12 	call	0x2400	; 0x2400 <delay>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:957
	switch(ID)
    c494:	06 39       	cpi	r16, 0x96	; 150
    c496:	17 47       	sbci	r17, 0x77	; 119
    c498:	09 f0       	breq	.+2      	; 0xc49c <setup+0x1dc>
    c49a:	16 c3       	rjmp	.+1580   	; 0xcac8 <setup+0x808>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:962
	{
		

		case 0x7796:
			lcd_driver = ID_7796;
    c49c:	89 e0       	ldi	r24, 0x09	; 9
    c49e:	90 e0       	ldi	r25, 0x00	; 0
    c4a0:	90 93 d0 11 	sts	0x11D0, r25	; 0x8011d0 <my_lcd+0x19>
    c4a4:	80 93 cf 11 	sts	0x11CF, r24	; 0x8011cf <my_lcd+0x18>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:965
			//WIDTH = 128,HEIGHT = 160;
			//width = WIDTH, height = HEIGHT;
			XC=ILI9341_COLADDRSET,YC=ILI9341_PAGEADDRSET,CC=ILI9341_MEMORYWRITE,RC=HX8357_RAMRD,SC1=0x33,SC2=0x37,MD=ILI9341_MADCTL,VL=0,R24BIT=0;
    c4a8:	8a e2       	ldi	r24, 0x2A	; 42
    c4aa:	90 e0       	ldi	r25, 0x00	; 0
    c4ac:	90 93 d4 11 	sts	0x11D4, r25	; 0x8011d4 <my_lcd+0x1d>
    c4b0:	80 93 d3 11 	sts	0x11D3, r24	; 0x8011d3 <my_lcd+0x1c>
    c4b4:	8b e2       	ldi	r24, 0x2B	; 43
    c4b6:	90 e0       	ldi	r25, 0x00	; 0
    c4b8:	90 93 d6 11 	sts	0x11D6, r25	; 0x8011d6 <my_lcd+0x1f>
    c4bc:	80 93 d5 11 	sts	0x11D5, r24	; 0x8011d5 <my_lcd+0x1e>
    c4c0:	8c e2       	ldi	r24, 0x2C	; 44
    c4c2:	90 e0       	ldi	r25, 0x00	; 0
    c4c4:	90 93 d8 11 	sts	0x11D8, r25	; 0x8011d8 <my_lcd+0x21>
    c4c8:	80 93 d7 11 	sts	0x11D7, r24	; 0x8011d7 <my_lcd+0x20>
    c4cc:	8e e2       	ldi	r24, 0x2E	; 46
    c4ce:	90 e0       	ldi	r25, 0x00	; 0
    c4d0:	90 93 da 11 	sts	0x11DA, r25	; 0x8011da <my_lcd+0x23>
    c4d4:	80 93 d9 11 	sts	0x11D9, r24	; 0x8011d9 <my_lcd+0x22>
    c4d8:	83 e3       	ldi	r24, 0x33	; 51
    c4da:	90 e0       	ldi	r25, 0x00	; 0
    c4dc:	90 93 dc 11 	sts	0x11DC, r25	; 0x8011dc <my_lcd+0x25>
    c4e0:	80 93 db 11 	sts	0x11DB, r24	; 0x8011db <my_lcd+0x24>
    c4e4:	87 e3       	ldi	r24, 0x37	; 55
    c4e6:	90 e0       	ldi	r25, 0x00	; 0
    c4e8:	90 93 de 11 	sts	0x11DE, r25	; 0x8011de <my_lcd+0x27>
    c4ec:	80 93 dd 11 	sts	0x11DD, r24	; 0x8011dd <my_lcd+0x26>
    c4f0:	86 e3       	ldi	r24, 0x36	; 54
    c4f2:	90 e0       	ldi	r25, 0x00	; 0
    c4f4:	90 93 e0 11 	sts	0x11E0, r25	; 0x8011e0 <my_lcd+0x29>
    c4f8:	80 93 df 11 	sts	0x11DF, r24	; 0x8011df <my_lcd+0x28>
    c4fc:	10 92 e2 11 	sts	0x11E2, r1	; 0x8011e2 <my_lcd+0x2b>
    c500:	10 92 e1 11 	sts	0x11E1, r1	; 0x8011e1 <my_lcd+0x2a>
    c504:	10 92 e4 11 	sts	0x11E4, r1	; 0x8011e4 <my_lcd+0x2d>
    c508:	10 92 e3 11 	sts	0x11E3, r1	; 0x8011e3 <my_lcd+0x2c>
setup():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:912
}

void LCDWIKI_KBV:: init_table8(const void *table, int16_t size)
{
	uint8_t i;
    uint8_t *p = (uint8_t *) table, dat[MAX_REG_NUM];            //R61526 has GAMMA[22] 
    c50c:	2a eb       	ldi	r18, 0xBA	; 186
    c50e:	e2 2e       	mov	r14, r18
    c510:	24 e1       	ldi	r18, 0x14	; 20
    c512:	f2 2e       	mov	r15, r18
start():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:965

		case 0x7796:
			lcd_driver = ID_7796;
			//WIDTH = 128,HEIGHT = 160;
			//width = WIDTH, height = HEIGHT;
			XC=ILI9341_COLADDRSET,YC=ILI9341_PAGEADDRSET,CC=ILI9341_MEMORYWRITE,RC=HX8357_RAMRD,SC1=0x33,SC2=0x37,MD=ILI9341_MADCTL,VL=0,R24BIT=0;
    c514:	3c e6       	ldi	r19, 0x6C	; 108
    c516:	c3 2e       	mov	r12, r19
    c518:	d1 2c       	mov	r13, r1
init_table8():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:915
{
	uint8_t i;
    uint8_t *p = (uint8_t *) table, dat[MAX_REG_NUM];            //R61526 has GAMMA[22] 
    while (size > 0) 
	{
        uint8_t cmd = pgm_read_byte(p++);
    c51a:	f7 01       	movw	r30, r14
    c51c:	64 91       	lpm	r22, Z
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:916
        uint8_t len = pgm_read_byte(p++);
    c51e:	31 96       	adiw	r30, 0x01	; 1
    c520:	14 91       	lpm	r17, Z
    c522:	f2 e0       	ldi	r31, 0x02	; 2
    c524:	ef 0e       	add	r14, r31
    c526:	f1 1c       	adc	r15, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:917
        if (cmd == TFTLCD_DELAY8) 
    c528:	6f 37       	cpi	r22, 0x7F	; 127
    c52a:	89 f0       	breq	.+34     	; 0xc54e <setup+0x28e>
    c52c:	de 01       	movw	r26, r28
    c52e:	a8 5b       	subi	r26, 0xB8	; 184
    c530:	bf 4f       	sbci	r27, 0xFF	; 255
    c532:	30 e0       	ldi	r19, 0x00	; 0
    c534:	20 e0       	ldi	r18, 0x00	; 0
    c536:	ad 01       	movw	r20, r26
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:924
            delay(len);
            len = 0;
        } 
		else 
		{
            for (i = 0; i < len; i++)
    c538:	21 17       	cp	r18, r17
    c53a:	08 f0       	brcs	.+2      	; 0xc53e <setup+0x27e>
    c53c:	bc c2       	rjmp	.+1400   	; 0xcab6 <setup+0x7f6>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:926
            {
                dat[i] = pgm_read_byte(p++);
    c53e:	f7 01       	movw	r30, r14
    c540:	e2 0f       	add	r30, r18
    c542:	f3 1f       	adc	r31, r19
    c544:	e4 91       	lpm	r30, Z
    c546:	ed 93       	st	X+, r30
    c548:	2f 5f       	subi	r18, 0xFF	; 255
    c54a:	3f 4f       	sbci	r19, 0xFF	; 255
    c54c:	f5 cf       	rjmp	.-22     	; 0xc538 <setup+0x278>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:919
	{
        uint8_t cmd = pgm_read_byte(p++);
        uint8_t len = pgm_read_byte(p++);
        if (cmd == TFTLCD_DELAY8) 
		{
            delay(len);
    c54e:	61 2f       	mov	r22, r17
    c550:	70 e0       	ldi	r23, 0x00	; 0
    c552:	90 e0       	ldi	r25, 0x00	; 0
    c554:	80 e0       	ldi	r24, 0x00	; 0
    c556:	0e 94 00 12 	call	0x2400	; 0x2400 <delay>
setup():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:920
            len = 0;
    c55a:	10 e0       	ldi	r17, 0x00	; 0
init_table8():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:930
            {
                dat[i] = pgm_read_byte(p++);
            }
			Push_Command(cmd,dat,len);
        }
        size -= len + 2;
    c55c:	61 2f       	mov	r22, r17
    c55e:	70 e0       	ldi	r23, 0x00	; 0
    c560:	6e 5f       	subi	r22, 0xFE	; 254
    c562:	7f 4f       	sbci	r23, 0xFF	; 255
    c564:	c6 1a       	sub	r12, r22
    c566:	d7 0a       	sbc	r13, r23
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:913

void LCDWIKI_KBV:: init_table8(const void *table, int16_t size)
{
	uint8_t i;
    uint8_t *p = (uint8_t *) table, dat[MAX_REG_NUM];            //R61526 has GAMMA[22] 
    while (size > 0) 
    c568:	1c 14       	cp	r1, r12
    c56a:	1d 04       	cpc	r1, r13
    c56c:	b4 f2       	brlt	.-84     	; 0xc51a <setup+0x25a>
start():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:1002
			break;
		default:
			lcd_driver = ID_UNKNOWN;
			break;		
	}
	Set_Rotation(rotation); 
    c56e:	80 91 cd 11 	lds	r24, 0x11CD	; 0x8011cd <my_lcd+0x16>
    c572:	0e 94 5f 29 	call	0x52be	; 0x52be <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]>
Invert_Display():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:892
}

//Anti color display 
void LCDWIKI_KBV::Invert_Display(boolean i)
{
	CS_ACTIVE;
    c576:	e0 91 e5 11 	lds	r30, 0x11E5	; 0x8011e5 <my_lcd+0x2e>
    c57a:	f0 91 e6 11 	lds	r31, 0x11E6	; 0x8011e6 <my_lcd+0x2f>
    c57e:	80 81       	ld	r24, Z
    c580:	90 91 f1 11 	lds	r25, 0x11F1	; 0x8011f1 <my_lcd+0x3a>
    c584:	89 23       	and	r24, r25
    c586:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:893
	uint8_t val = VL^i;
    c588:	90 91 e1 11 	lds	r25, 0x11E1	; 0x8011e1 <my_lcd+0x2a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:894
	if(lcd_driver == ID_932X)
    c58c:	20 91 cf 11 	lds	r18, 0x11CF	; 0x8011cf <my_lcd+0x18>
    c590:	30 91 d0 11 	lds	r19, 0x11D0	; 0x8011d0 <my_lcd+0x19>
    c594:	e0 91 e7 11 	lds	r30, 0x11E7	; 0x8011e7 <my_lcd+0x30>
    c598:	f0 91 e8 11 	lds	r31, 0x11E8	; 0x8011e8 <my_lcd+0x31>
    c59c:	80 91 f2 11 	lds	r24, 0x11F2	; 0x8011f2 <my_lcd+0x3b>
    c5a0:	21 15       	cp	r18, r1
    c5a2:	31 05       	cpc	r19, r1
    c5a4:	09 f0       	breq	.+2      	; 0xc5a8 <setup+0x2e8>
    c5a6:	97 c2       	rjmp	.+1326   	; 0xcad6 <setup+0x816>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:896
	{
		writeCmdData8(0x61, val);
    c5a8:	20 81       	ld	r18, Z
    c5aa:	82 23       	and	r24, r18
    c5ac:	80 83       	st	Z, r24
    c5ae:	81 e6       	ldi	r24, 0x61	; 97
    c5b0:	82 b9       	out	0x02, r24	; 2
    c5b2:	e0 91 e9 11 	lds	r30, 0x11E9	; 0x8011e9 <my_lcd+0x32>
    c5b6:	f0 91 ea 11 	lds	r31, 0x11EA	; 0x8011ea <my_lcd+0x33>
    c5ba:	80 81       	ld	r24, Z
    c5bc:	20 91 f3 11 	lds	r18, 0x11F3	; 0x8011f3 <my_lcd+0x3c>
    c5c0:	82 23       	and	r24, r18
    c5c2:	80 83       	st	Z, r24
    c5c4:	e0 91 e9 11 	lds	r30, 0x11E9	; 0x8011e9 <my_lcd+0x32>
    c5c8:	f0 91 ea 11 	lds	r31, 0x11EA	; 0x8011ea <my_lcd+0x33>
    c5cc:	80 81       	ld	r24, Z
    c5ce:	20 91 ef 11 	lds	r18, 0x11EF	; 0x8011ef <my_lcd+0x38>
    c5d2:	82 2b       	or	r24, r18
    c5d4:	80 83       	st	Z, r24
    c5d6:	e0 91 e7 11 	lds	r30, 0x11E7	; 0x8011e7 <my_lcd+0x30>
    c5da:	f0 91 e8 11 	lds	r31, 0x11E8	; 0x8011e8 <my_lcd+0x31>
    c5de:	80 81       	ld	r24, Z
    c5e0:	20 91 ee 11 	lds	r18, 0x11EE	; 0x8011ee <my_lcd+0x37>
    c5e4:	82 2b       	or	r24, r18
    c5e6:	80 83       	st	Z, r24
    c5e8:	92 b9       	out	0x02, r25	; 2
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:900
	}
	else if(lcd_driver == ID_7575)
	{
		writeCmdData8(0x01, val ? 8 : 10);
    c5ea:	e0 91 e9 11 	lds	r30, 0x11E9	; 0x8011e9 <my_lcd+0x32>
    c5ee:	f0 91 ea 11 	lds	r31, 0x11EA	; 0x8011ea <my_lcd+0x33>
    c5f2:	80 81       	ld	r24, Z
    c5f4:	90 91 f3 11 	lds	r25, 0x11F3	; 0x8011f3 <my_lcd+0x3c>
    c5f8:	89 23       	and	r24, r25
    c5fa:	80 83       	st	Z, r24
    c5fc:	e0 91 e9 11 	lds	r30, 0x11E9	; 0x8011e9 <my_lcd+0x32>
    c600:	f0 91 ea 11 	lds	r31, 0x11EA	; 0x8011ea <my_lcd+0x33>
    c604:	80 81       	ld	r24, Z
    c606:	90 91 ef 11 	lds	r25, 0x11EF	; 0x8011ef <my_lcd+0x38>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:904
	}
	else
	{
		writeCmd8(val ? 0x21 : 0x20);
    c60a:	89 2b       	or	r24, r25
    c60c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:906
	}
	CS_IDLE;
    c60e:	e0 91 e5 11 	lds	r30, 0x11E5	; 0x8011e5 <my_lcd+0x2e>
    c612:	f0 91 e6 11 	lds	r31, 0x11E6	; 0x8011e6 <my_lcd+0x2f>
    c616:	80 81       	ld	r24, Z
    c618:	90 91 ed 11 	lds	r25, 0x11ED	; 0x8011ed <my_lcd+0x36>
    c61c:	89 2b       	or	r24, r25
    c61e:	80 83       	st	Z, r24
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2771
  swSPI.begin();

  MenuHistoryInit();

  my_lcd.Init_LCD();
  my_lcd.Set_Rotation(3);
    c620:	83 e0       	ldi	r24, 0x03	; 3
    c622:	0e 94 5f 29 	call	0x52be	; 0x52be <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.84]>
TP_Set_Rotation():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:341
	return touch_statue&TP_PRES_DOWN;
}

void LCDWIKI_TOUCH::TP_Set_Rotation(uint8_t val)
{
	touch_rotation = val;
    c626:	83 e0       	ldi	r24, 0x03	; 3
    c628:	80 93 a6 11 	sts	0x11A6, r24	; 0x8011a6 <my_touch+0xd>
Get_Height():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:743
}

//get lcd height
int16_t LCDWIKI_KBV::Get_Height(void) const
{
	return height;
    c62c:	20 91 cb 11 	lds	r18, 0x11CB	; 0x8011cb <my_lcd+0x14>
    c630:	30 91 cc 11 	lds	r19, 0x11CC	; 0x8011cc <my_lcd+0x15>
Get_Width():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:737
}

//get lcd width
int16_t LCDWIKI_KBV::Get_Width(void) const
{
	return width;
    c634:	40 91 c9 11 	lds	r20, 0x11C9	; 0x8011c9 <my_lcd+0x12>
    c638:	50 91 ca 11 	lds	r21, 0x11CA	; 0x8011ca <my_lcd+0x13>
Get_Rotation():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:886
//1  :  90 degree
//2  :  180 degree
//3  :  270 degree
uint8_t LCDWIKI_KBV::Get_Rotation(void) const
{
	return rotation;
    c63c:	90 91 cd 11 	lds	r25, 0x11CD	; 0x8011cd <my_lcd+0x16>
TP_Init():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:53
	y=0xffff;
}

void LCDWIKI_TOUCH::TP_Init(uint8_t r,uint16_t w, uint16_t h)
{
	TDIN_HIGH;
    c640:	e0 91 ae 11 	lds	r30, 0x11AE	; 0x8011ae <my_touch+0x15>
    c644:	f0 91 af 11 	lds	r31, 0x11AF	; 0x8011af <my_touch+0x16>
    c648:	80 81       	ld	r24, Z
    c64a:	60 91 b5 11 	lds	r22, 0x11B5	; 0x8011b5 <my_touch+0x1c>
    c64e:	86 2b       	or	r24, r22
    c650:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:54
	TCLK_HIGH; 
    c652:	e0 91 aa 11 	lds	r30, 0x11AA	; 0x8011aa <my_touch+0x11>
    c656:	f0 91 ab 11 	lds	r31, 0x11AB	; 0x8011ab <my_touch+0x12>
    c65a:	80 81       	ld	r24, Z
    c65c:	60 91 b3 11 	lds	r22, 0x11B3	; 0x8011b3 <my_touch+0x1a>
    c660:	86 2b       	or	r24, r22
    c662:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:55
	TCS_HIGH;
    c664:	e0 91 a8 11 	lds	r30, 0x11A8	; 0x8011a8 <my_touch+0xf>
    c668:	f0 91 a9 11 	lds	r31, 0x11A9	; 0x8011a9 <my_touch+0x10>
    c66c:	80 81       	ld	r24, Z
    c66e:	60 91 b2 11 	lds	r22, 0x11B2	; 0x8011b2 <my_touch+0x19>
    c672:	86 2b       	or	r24, r22
    c674:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:56
	wid = w;
    c676:	50 93 a2 11 	sts	0x11A2, r21	; 0x8011a2 <my_touch+0x9>
    c67a:	40 93 a1 11 	sts	0x11A1, r20	; 0x8011a1 <my_touch+0x8>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:57
	heig = h;	
    c67e:	30 93 a4 11 	sts	0x11A4, r19	; 0x8011a4 <my_touch+0xb>
    c682:	20 93 a3 11 	sts	0x11A3, r18	; 0x8011a3 <my_touch+0xa>
LCD_Set_Rotation():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:351
	return touch_rotation;
}

void LCDWIKI_TOUCH::LCD_Set_Rotation(uint8_t val)
{
	lcd_rotation = val;
    c686:	90 93 a7 11 	sts	0x11A7, r25	; 0x8011a7 <my_touch+0xe>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2774
  my_touch.TP_Set_Rotation(3);
  my_touch.TP_Init(my_lcd.Get_Rotation(), my_lcd.Get_Display_Width(), my_lcd.Get_Display_Height());
  my_lcd.Fill_Screen(WHITE);
    c68a:	8f ef       	ldi	r24, 0xFF	; 255
    c68c:	9f ef       	ldi	r25, 0xFF	; 255
    c68e:	0e 94 55 20 	call	0x40aa	; 0x40aa <LCDWIKI_GUI::Fill_Screen(unsigned int) [clone .constprop.175]>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
}

//set 16bits draw color
void LCDWIKI_GUI::Set_Draw_color(uint16_t color)
{
	draw_color = color;
    c692:	8f e1       	ldi	r24, 0x1F	; 31
    c694:	90 e0       	ldi	r25, 0x00	; 0
    c696:	90 93 c2 11 	sts	0x11C2, r25	; 0x8011c2 <my_lcd+0xb>
    c69a:	80 93 c1 11 	sts	0x11C1, r24	; 0x8011c1 <my_lcd+0xa>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2776
  my_lcd.Set_Draw_color(BLUE);
  strcpy_P(str1, term_title);
    c69e:	1e 01       	movw	r2, r28
    c6a0:	28 e4       	ldi	r18, 0x48	; 72
    c6a2:	22 0e       	add	r2, r18
    c6a4:	31 1c       	adc	r3, r1
    c6a6:	6e e2       	ldi	r22, 0x2E	; 46
    c6a8:	76 e1       	ldi	r23, 0x16	; 22
    c6aa:	c1 01       	movw	r24, r2
    c6ac:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2777
  show_string(str1, 30, 10, 2, BLUE, WHITE, 0);
    c6b0:	ee 24       	eor	r14, r14
    c6b2:	ea 94       	dec	r14
    c6b4:	fe 2c       	mov	r15, r14
    c6b6:	0f e1       	ldi	r16, 0x1F	; 31
    c6b8:	10 e0       	ldi	r17, 0x00	; 0
    c6ba:	22 e0       	ldi	r18, 0x02	; 2
    c6bc:	4a e0       	ldi	r20, 0x0A	; 10
    c6be:	50 e0       	ldi	r21, 0x00	; 0
    c6c0:	6e e1       	ldi	r22, 0x1E	; 30
    c6c2:	70 e0       	ldi	r23, 0x00	; 0
    c6c4:	c1 01       	movw	r24, r2
    c6c6:	0e 94 c0 30 	call	0x6180	; 0x6180 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.158]>
    c6ca:	8e e1       	ldi	r24, 0x1E	; 30
    c6cc:	90 e0       	ldi	r25, 0x00	; 0
    c6ce:	c2 5c       	subi	r28, 0xC2	; 194
    c6d0:	de 4f       	sbci	r29, 0xFE	; 254
    c6d2:	99 83       	std	Y+1, r25	; 0x01
    c6d4:	88 83       	st	Y, r24
    c6d6:	ce 53       	subi	r28, 0x3E	; 62
    c6d8:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2779
  ///
  for (uint8_t init = 0;  init < 16; init++)
    c6da:	a1 2c       	mov	r10, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3138
    }
    ///
    /// inicializace RTC casu
    if (init == 15)
    {
      strcpy_P(str1, text_rtc_cas);
    c6dc:	d2 2c       	mov	r13, r2
    c6de:	b3 2c       	mov	r11, r3
__base_ctor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:43
    _address.dword = address;
}

IPAddress::IPAddress(const uint8_t *address)
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
    c6e0:	a2 e3       	ldi	r26, 0x32	; 50
    c6e2:	b1 e0       	ldi	r27, 0x01	; 1
    c6e4:	ac 0f       	add	r26, r28
    c6e6:	bd 1f       	adc	r27, r29
    c6e8:	12 96       	adiw	r26, 0x02	; 2
    c6ea:	cc 5b       	subi	r28, 0xBC	; 188
    c6ec:	de 4f       	sbci	r29, 0xFE	; 254
    c6ee:	b9 83       	std	Y+1, r27	; 0x01
    c6f0:	a8 83       	st	Y, r26
    c6f2:	c4 54       	subi	r28, 0x44	; 68
    c6f4:	d1 40       	sbci	r29, 0x01	; 1
    c6f6:	ec e2       	ldi	r30, 0x2C	; 44
    c6f8:	f1 e0       	ldi	r31, 0x01	; 1
    c6fa:	ec 0f       	add	r30, r28
    c6fc:	fd 1f       	adc	r31, r29
    c6fe:	32 96       	adiw	r30, 0x02	; 2
    c700:	ca 5b       	subi	r28, 0xBA	; 186
    c702:	de 4f       	sbci	r29, 0xFE	; 254
    c704:	f9 83       	std	Y+1, r31	; 0x01
    c706:	e8 83       	st	Y, r30
    c708:	c6 54       	subi	r28, 0x46	; 70
    c70a:	d1 40       	sbci	r29, 0x01	; 1
    c70c:	26 e2       	ldi	r18, 0x26	; 38
    c70e:	31 e0       	ldi	r19, 0x01	; 1
    c710:	2c 0f       	add	r18, r28
    c712:	3d 1f       	adc	r19, r29
    c714:	2e 5f       	subi	r18, 0xFE	; 254
    c716:	3f 4f       	sbci	r19, 0xFF	; 255
    c718:	c8 5b       	subi	r28, 0xB8	; 184
    c71a:	de 4f       	sbci	r29, 0xFE	; 254
    c71c:	39 83       	std	Y+1, r19	; 0x01
    c71e:	28 83       	st	Y, r18
    c720:	c8 54       	subi	r28, 0x48	; 72
    c722:	d1 40       	sbci	r29, 0x01	; 1
    c724:	8e ed       	ldi	r24, 0xDE	; 222
    c726:	90 e0       	ldi	r25, 0x00	; 0
    c728:	8c 0f       	add	r24, r28
    c72a:	9d 1f       	adc	r25, r29
    c72c:	02 96       	adiw	r24, 0x02	; 2
    c72e:	c6 5b       	subi	r28, 0xB6	; 182
    c730:	de 4f       	sbci	r29, 0xFE	; 254
    c732:	99 83       	std	Y+1, r25	; 0x01
    c734:	88 83       	st	Y, r24
    c736:	ca 54       	subi	r28, 0x4A	; 74
    c738:	d1 40       	sbci	r29, 0x01	; 1
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2879
        }
        ///
        for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
        {
          get_tds18s20(idx, &tds);
          strcpy(tds.name, "FREE");
    c73a:	a8 ec       	ldi	r26, 0xC8	; 200
    c73c:	b0 e0       	ldi	r27, 0x00	; 0
    c73e:	ac 0f       	add	r26, r28
    c740:	bd 1f       	adc	r27, r29
    c742:	1c 96       	adiw	r26, 0x0c	; 12
    c744:	c4 5b       	subi	r28, 0xB4	; 180
    c746:	de 4f       	sbci	r29, 0xFE	; 254
    c748:	b9 83       	std	Y+1, r27	; 0x01
    c74a:	a8 83       	st	Y, r26
    c74c:	cc 54       	subi	r28, 0x4C	; 76
    c74e:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2781
  strcpy_P(str1, term_title);
  show_string(str1, 30, 10, 2, BLUE, WHITE, 0);
  ///
  for (uint8_t init = 0;  init < 16; init++)
  {
    show_string("X", 30 + (init * 15), 30, 1, RED, WHITE, 0);
    c750:	ee 24       	eor	r14, r14
    c752:	ea 94       	dec	r14
    c754:	fe 2c       	mov	r15, r14
    c756:	00 e0       	ldi	r16, 0x00	; 0
    c758:	18 ef       	ldi	r17, 0xF8	; 248
    c75a:	21 e0       	ldi	r18, 0x01	; 1
    c75c:	4e e1       	ldi	r20, 0x1E	; 30
    c75e:	50 e0       	ldi	r21, 0x00	; 0
    c760:	c2 5c       	subi	r28, 0xC2	; 194
    c762:	de 4f       	sbci	r29, 0xFE	; 254
    c764:	68 81       	ld	r22, Y
    c766:	79 81       	ldd	r23, Y+1	; 0x01
    c768:	ce 53       	subi	r28, 0x3E	; 62
    c76a:	d1 40       	sbci	r29, 0x01	; 1
    c76c:	8d ef       	ldi	r24, 0xFD	; 253
    c76e:	96 e0       	ldi	r25, 0x06	; 6
    c770:	0e 94 c0 30 	call	0x6180	; 0x6180 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.158]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2783
    /// inicalizace vnitrniho ADC prevodniku
    if (init == 0)
    c774:	a1 10       	cpse	r10, r1
    c776:	fa c1       	rjmp	.+1012   	; 0xcb6c <setup+0x8ac>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2785
    {
      strcpy_P(str1, text_vnitrni_ochrany);
    c778:	6e e1       	ldi	r22, 0x1E	; 30
    c77a:	76 e1       	ldi	r23, 0x16	; 22
    c77c:	c1 01       	movw	r24, r2
    c77e:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2786
      strcat(str1, ":1");
    c782:	6f ef       	ldi	r22, 0xFF	; 255
    c784:	76 e0       	ldi	r23, 0x06	; 6
    c786:	c1 01       	movw	r24, r2
    c788:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2787
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    c78c:	00 ee       	ldi	r16, 0xE0	; 224
    c78e:	17 e0       	ldi	r17, 0x07	; 7
    c790:	21 e0       	ldi	r18, 0x01	; 1
    c792:	42 e3       	ldi	r20, 0x32	; 50
    c794:	50 e0       	ldi	r21, 0x00	; 0
    c796:	6e e1       	ldi	r22, 0x1E	; 30
    c798:	70 e0       	ldi	r23, 0x00	; 0
    c79a:	c1 01       	movw	r24, r2
    c79c:	0e 94 c0 30 	call	0x6180	; 0x6180 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.158]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2789

      tritri = 0;
    c7a0:	10 92 c9 0b 	sts	0x0BC9, r1	; 0x800bc9 <tritri+0x1>
    c7a4:	10 92 c8 0b 	sts	0x0BC8, r1	; 0x800bc8 <tritri>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2790
      petnula = 0;
    c7a8:	10 92 c7 0b 	sts	0x0BC7, r1	; 0x800bc7 <petnula+0x1>
    c7ac:	10 92 c6 0b 	sts	0x0BC6, r1	; 0x800bc6 <petnula>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2791
      dvanact = 0;
    c7b0:	10 92 c5 0b 	sts	0x0BC5, r1	; 0x800bc5 <dvanact+0x1>
    c7b4:	10 92 c4 0b 	sts	0x0BC4, r1	; 0x800bc4 <dvanact>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2793
      dvanact = 0;
      light_curr = 0;
    c7b8:	10 92 a5 0c 	sts	0x0CA5, r1	; 0x800ca5 <light_curr+0x1>
    c7bc:	10 92 a4 0c 	sts	0x0CA4, r1	; 0x800ca4 <light_curr>
init_a2d():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:35

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// inicializace a2d prevodniku //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void init_a2d(uint8_t enable_channel, uint8_t delicka, uint8_t reference)
{
a2d_enable = enable_channel;
    c7c0:	88 ef       	ldi	r24, 0xF8	; 248
    c7c2:	80 93 9e 0c 	sts	0x0C9E, r24	; 0x800c9e <a2d_enable>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:36
a2d_reference = reference;
    c7c6:	83 e0       	ldi	r24, 0x03	; 3
    c7c8:	80 93 77 0b 	sts	0x0B77, r24	; 0x800b77 <a2d_reference>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:38
a2d_delicka = delicka;
a2d_index = 0;
    c7cc:	10 92 9f 0c 	sts	0x0C9F, r1	; 0x800c9f <a2d_index>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:39
a2d_input = 0;
    c7d0:	10 92 78 0b 	sts	0x0B78, r1	; 0x800b78 <a2d_input>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:41
a2d_data = 0;
ADCSRA = ((1<<ADEN|1<<ADIE) + (a2d_delicka & 7));
    c7d4:	8e e8       	ldi	r24, 0x8E	; 142
    c7d6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:42
ADMUX = 0;
    c7da:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:43
ADMUX = ((a2d_reference & 3) << 6) ;
    c7de:	80 91 77 0b 	lds	r24, 0x0B77	; 0x800b77 <a2d_reference>
    c7e2:	b0 e4       	ldi	r27, 0x40	; 64
    c7e4:	8b 9f       	mul	r24, r27
    c7e6:	c0 01       	movw	r24, r0
    c7e8:	11 24       	eor	r1, r1
    c7ea:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
a2d_handler():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:18
typedef void (*a2d_interupt)(uint8_t, uint16_t);
volatile static a2d_interupt a2d_interupt_func;

void a2d_handler(void (*a2d_command)(uint8_t channel, uint16_t data))
{
a2d_interupt_func = a2d_command;
    c7ee:	84 e0       	ldi	r24, 0x04	; 4
    c7f0:	9e e2       	ldi	r25, 0x2E	; 46
    c7f2:	90 93 7a 0b 	sts	0x0B7A, r25	; 0x800b7a <a2d_interupt_func+0x1>
    c7f6:	80 93 79 0b 	sts	0x0B79, r24	; 0x800b79 <a2d_interupt_func>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2799
      /// inicializace prevodniku
      init_a2d((1 << A_PROUD | 1 << A_TRIV | 1 << A_PETV | 1 << A_DVANACTV | 1 << A_LIGHT), 6, 3);
      a2d_handler(a2d_complete);
      ///
      /// spotreba proudu
      a2d_run_now = 0;
    c7fa:	10 92 aa 0c 	sts	0x0CAA, r1	; 0x800caa <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2800
      a2d_start_first(A_PROUD);
    c7fe:	83 e0       	ldi	r24, 0x03	; 3
    c800:	0e 94 7d 14 	call	0x28fa	; 0x28fa <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2801
      milis = millis();
    c804:	0e 94 28 13 	call	0x2650	; 0x2650 <millis>
    c808:	2b 01       	movw	r4, r22
    c80a:	3c 01       	movw	r6, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2802
      while (a2d_run_now == 0 && millis() - milis < 10);
    c80c:	0e 94 28 13 	call	0x2650	; 0x2650 <millis>
    c810:	64 19       	sub	r22, r4
    c812:	75 09       	sbc	r23, r5
    c814:	86 09       	sbc	r24, r6
    c816:	97 09       	sbc	r25, r7
    c818:	6a 30       	cpi	r22, 0x0A	; 10
    c81a:	71 05       	cpc	r23, r1
    c81c:	81 05       	cpc	r24, r1
    c81e:	91 05       	cpc	r25, r1
    c820:	a8 f3       	brcs	.-22     	; 0xc80c <setup+0x54c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2805
      /// regulator 3.3V
      a2d_run_now = 0;
      a2d_start_first(A_TRIV);
    c822:	86 e0       	ldi	r24, 0x06	; 6
    c824:	0e 94 7d 14 	call	0x28fa	; 0x28fa <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2806
      milis = millis();
    c828:	0e 94 28 13 	call	0x2650	; 0x2650 <millis>
    c82c:	2b 01       	movw	r4, r22
    c82e:	3c 01       	movw	r6, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2807
      while (a2d_run_now == 0 && millis() - milis < 10);
    c830:	0e 94 28 13 	call	0x2650	; 0x2650 <millis>
    c834:	64 19       	sub	r22, r4
    c836:	75 09       	sbc	r23, r5
    c838:	86 09       	sbc	r24, r6
    c83a:	97 09       	sbc	r25, r7
    c83c:	6a 30       	cpi	r22, 0x0A	; 10
    c83e:	71 05       	cpc	r23, r1
    c840:	81 05       	cpc	r24, r1
    c842:	91 05       	cpc	r25, r1
    c844:	a8 f3       	brcs	.-22     	; 0xc830 <setup+0x570>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2810
      /// regulator 5.0V
      a2d_run_now = 0;
      a2d_start_first(A_PETV);
    c846:	85 e0       	ldi	r24, 0x05	; 5
    c848:	0e 94 7d 14 	call	0x28fa	; 0x28fa <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2811
      milis = millis();
    c84c:	0e 94 28 13 	call	0x2650	; 0x2650 <millis>
    c850:	2b 01       	movw	r4, r22
    c852:	3c 01       	movw	r6, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2812
      while (a2d_run_now == 0 && millis() - milis < 10);
    c854:	0e 94 28 13 	call	0x2650	; 0x2650 <millis>
    c858:	64 19       	sub	r22, r4
    c85a:	75 09       	sbc	r23, r5
    c85c:	86 09       	sbc	r24, r6
    c85e:	97 09       	sbc	r25, r7
    c860:	6a 30       	cpi	r22, 0x0A	; 10
    c862:	71 05       	cpc	r23, r1
    c864:	81 05       	cpc	r24, r1
    c866:	91 05       	cpc	r25, r1
    c868:	a8 f3       	brcs	.-22     	; 0xc854 <setup+0x594>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2815
      /// vstupni napeti 12V
      a2d_run_now = 0;
      a2d_start_first(A_DVANACTV);
    c86a:	84 e0       	ldi	r24, 0x04	; 4
    c86c:	0e 94 7d 14 	call	0x28fa	; 0x28fa <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2816
      milis = millis();
    c870:	0e 94 28 13 	call	0x2650	; 0x2650 <millis>
    c874:	2b 01       	movw	r4, r22
    c876:	3c 01       	movw	r6, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2817
      while (a2d_run_now == 0 && millis() - milis < 10);
    c878:	0e 94 28 13 	call	0x2650	; 0x2650 <millis>
    c87c:	64 19       	sub	r22, r4
    c87e:	75 09       	sbc	r23, r5
    c880:	86 09       	sbc	r24, r6
    c882:	97 09       	sbc	r25, r7
    c884:	6a 30       	cpi	r22, 0x0A	; 10
    c886:	71 05       	cpc	r23, r1
    c888:	81 05       	cpc	r24, r1
    c88a:	91 05       	cpc	r25, r1
    c88c:	a8 f3       	brcs	.-22     	; 0xc878 <setup+0x5b8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2820
      /// aktualni intenzita svetla
      a2d_run_now = 0;
      a2d_start_first(A_LIGHT);
    c88e:	87 e0       	ldi	r24, 0x07	; 7
    c890:	0e 94 7d 14 	call	0x28fa	; 0x28fa <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2821
      milis = millis();
    c894:	0e 94 28 13 	call	0x2650	; 0x2650 <millis>
    c898:	2b 01       	movw	r4, r22
    c89a:	3c 01       	movw	r6, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2822
      while (a2d_run_now == 0 && millis() - milis < 10);
    c89c:	0e 94 28 13 	call	0x2650	; 0x2650 <millis>
    c8a0:	64 19       	sub	r22, r4
    c8a2:	75 09       	sbc	r23, r5
    c8a4:	86 09       	sbc	r24, r6
    c8a6:	97 09       	sbc	r25, r7
    c8a8:	6a 30       	cpi	r22, 0x0A	; 10
    c8aa:	71 05       	cpc	r23, r1
    c8ac:	81 05       	cpc	r24, r1
    c8ae:	91 05       	cpc	r25, r1
    c8b0:	a8 f3       	brcs	.-22     	; 0xc89c <setup+0x5dc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2826
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
    c8b2:	4e 01       	movw	r8, r28
    c8b4:	ea ef       	ldi	r30, 0xFA	; 250
    c8b6:	8e 1a       	sub	r8, r30
    c8b8:	ee ef       	ldi	r30, 0xFE	; 254
    c8ba:	9e 0a       	sbc	r9, r30
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2508
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
    c8bc:	80 91 c8 0b 	lds	r24, 0x0BC8	; 0x800bc8 <tritri>
    c8c0:	90 91 c9 0b 	lds	r25, 0x0BC9	; 0x800bc9 <tritri+0x1>
    c8c4:	25 e0       	ldi	r18, 0x05	; 5
    c8c6:	28 9f       	mul	r18, r24
    c8c8:	b0 01       	movw	r22, r0
    c8ca:	29 9f       	mul	r18, r25
    c8cc:	70 0d       	add	r23, r0
    c8ce:	11 24       	eor	r1, r1
    c8d0:	90 e0       	ldi	r25, 0x00	; 0
    c8d2:	80 e0       	ldi	r24, 0x00	; 0
    c8d4:	0e 94 c4 88 	call	0x11188	; 0x11188 <__floatunsisf>
    c8d8:	20 e0       	ldi	r18, 0x00	; 0
    c8da:	30 e0       	ldi	r19, 0x00	; 0
    c8dc:	4a e7       	ldi	r20, 0x7A	; 122
    c8de:	54 e4       	ldi	r21, 0x44	; 68
    c8e0:	0e 94 f9 8a 	call	0x115f2	; 0x115f2 <__divsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2826
      milis = millis();
      while (a2d_run_now == 0 && millis() - milis < 10);
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
    c8e4:	84 01       	movw	r16, r8
    c8e6:	22 e0       	ldi	r18, 0x02	; 2
    c8e8:	44 e0       	ldi	r20, 0x04	; 4
    c8ea:	0e 94 eb 7e 	call	0xfdd6	; 0xfdd6 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2827
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
    c8ee:	7e 01       	movw	r14, r28
    c8f0:	f2 ef       	ldi	r31, 0xF2	; 242
    c8f2:	ef 1a       	sub	r14, r31
    c8f4:	fe ef       	ldi	r31, 0xFE	; 254
    c8f6:	ff 0a       	sbc	r15, r31
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2508
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
    c8f8:	60 91 c6 0b 	lds	r22, 0x0BC6	; 0x800bc6 <petnula>
    c8fc:	70 91 c7 0b 	lds	r23, 0x0BC7	; 0x800bc7 <petnula+0x1>
    c900:	13 e0       	ldi	r17, 0x03	; 3
    c902:	66 0f       	add	r22, r22
    c904:	77 1f       	adc	r23, r23
    c906:	1a 95       	dec	r17
    c908:	e1 f7       	brne	.-8      	; 0xc902 <setup+0x642>
    c90a:	90 e0       	ldi	r25, 0x00	; 0
    c90c:	80 e0       	ldi	r24, 0x00	; 0
    c90e:	0e 94 c4 88 	call	0x11188	; 0x11188 <__floatunsisf>
    c912:	20 e0       	ldi	r18, 0x00	; 0
    c914:	30 e0       	ldi	r19, 0x00	; 0
    c916:	4a e7       	ldi	r20, 0x7A	; 122
    c918:	54 e4       	ldi	r21, 0x44	; 68
    c91a:	0e 94 f9 8a 	call	0x115f2	; 0x115f2 <__divsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2827
      while (a2d_run_now == 0 && millis() - milis < 10);
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
    c91e:	87 01       	movw	r16, r14
    c920:	22 e0       	ldi	r18, 0x02	; 2
    c922:	44 e0       	ldi	r20, 0x04	; 4
    c924:	0e 94 eb 7e 	call	0xfdd6	; 0xfdd6 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2828
      dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, s_dvanact);
    c928:	3e 01       	movw	r6, r28
    c92a:	2a ee       	ldi	r18, 0xEA	; 234
    c92c:	62 1a       	sub	r6, r18
    c92e:	2e ef       	ldi	r18, 0xFE	; 254
    c930:	72 0a       	sbc	r7, r18
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2508
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
    c932:	80 91 c4 0b 	lds	r24, 0x0BC4	; 0x800bc4 <dvanact>
    c936:	90 91 c5 0b 	lds	r25, 0x0BC5	; 0x800bc5 <dvanact+0x1>
    c93a:	29 e3       	ldi	r18, 0x39	; 57
    c93c:	28 9f       	mul	r18, r24
    c93e:	b0 01       	movw	r22, r0
    c940:	29 9f       	mul	r18, r25
    c942:	70 0d       	add	r23, r0
    c944:	11 24       	eor	r1, r1
    c946:	90 e0       	ldi	r25, 0x00	; 0
    c948:	80 e0       	ldi	r24, 0x00	; 0
    c94a:	0e 94 c4 88 	call	0x11188	; 0x11188 <__floatunsisf>
    c94e:	20 e0       	ldi	r18, 0x00	; 0
    c950:	30 e0       	ldi	r19, 0x00	; 0
    c952:	4a e7       	ldi	r20, 0x7A	; 122
    c954:	54 e4       	ldi	r21, 0x44	; 68
    c956:	0e 94 f9 8a 	call	0x115f2	; 0x115f2 <__divsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2828
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
      dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, s_dvanact);
    c95a:	83 01       	movw	r16, r6
    c95c:	22 e0       	ldi	r18, 0x02	; 2
    c95e:	44 e0       	ldi	r20, 0x04	; 4
    c960:	0e 94 eb 7e 	call	0xfdd6	; 0xfdd6 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2829
      dtostrf(prepocet_proudu(proud), 4, 2, s_current);
    c964:	2e 01       	movw	r4, r28
    c966:	32 ee       	ldi	r19, 0xE2	; 226
    c968:	43 1a       	sub	r4, r19
    c96a:	3e ef       	ldi	r19, 0xFE	; 254
    c96c:	53 0a       	sbc	r5, r19
prepocet_proudu():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2523
*/
float prepocet_proudu(uint16_t vstup)
{
#define proud_constanta  470
  float proud = (vstup - proud_constanta) * 5 / 185;
  return vstup;
    c96e:	60 91 c2 0b 	lds	r22, 0x0BC2	; 0x800bc2 <proud>
    c972:	70 91 c3 0b 	lds	r23, 0x0BC3	; 0x800bc3 <proud+0x1>
    c976:	90 e0       	ldi	r25, 0x00	; 0
    c978:	80 e0       	ldi	r24, 0x00	; 0
    c97a:	0e 94 c4 88 	call	0x11188	; 0x11188 <__floatunsisf>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2829
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
      dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, s_dvanact);
      dtostrf(prepocet_proudu(proud), 4, 2, s_current);
    c97e:	82 01       	movw	r16, r4
    c980:	22 e0       	ldi	r18, 0x02	; 2
    c982:	44 e0       	ldi	r20, 0x04	; 4
    c984:	0e 94 eb 7e 	call	0xfdd6	; 0xfdd6 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2830
      sprintf(str2, "3.3V=%s; 5.0V=%s; IN=%s; I=%s", s_tritri, s_petnula, s_dvanact, s_current);
    c988:	5f 92       	push	r5
    c98a:	4f 92       	push	r4
    c98c:	7f 92       	push	r7
    c98e:	6f 92       	push	r6
    c990:	ff 92       	push	r15
    c992:	ef 92       	push	r14
    c994:	9f 92       	push	r9
    c996:	8f 92       	push	r8
    c998:	82 e0       	ldi	r24, 0x02	; 2
    c99a:	97 e0       	ldi	r25, 0x07	; 7
    c99c:	9f 93       	push	r25
    c99e:	8f 93       	push	r24
    c9a0:	4e 01       	movw	r8, r28
    c9a2:	88 e8       	ldi	r24, 0x88	; 136
    c9a4:	88 0e       	add	r8, r24
    c9a6:	91 1c       	adc	r9, r1
    c9a8:	9f 92       	push	r9
    c9aa:	8f 92       	push	r8
    c9ac:	0e 94 3b 8d 	call	0x11a76	; 0x11a76 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2831
      show_string(str2, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    c9b0:	ee 24       	eor	r14, r14
    c9b2:	ea 94       	dec	r14
    c9b4:	fe 2c       	mov	r15, r14
    c9b6:	00 ee       	ldi	r16, 0xE0	; 224
    c9b8:	17 e0       	ldi	r17, 0x07	; 7
    c9ba:	21 e0       	ldi	r18, 0x01	; 1
    c9bc:	42 e3       	ldi	r20, 0x32	; 50
    c9be:	50 e0       	ldi	r21, 0x00	; 0
    c9c0:	60 ea       	ldi	r22, 0xA0	; 160
    c9c2:	70 e0       	ldi	r23, 0x00	; 0
    c9c4:	c4 01       	movw	r24, r8
    c9c6:	0e 94 c0 30 	call	0x6180	; 0x6180 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.158]>
    c9ca:	0f b6       	in	r0, 0x3f	; 63
    c9cc:	f8 94       	cli
    c9ce:	de bf       	out	0x3e, r29	; 62
    c9d0:	0f be       	out	0x3f, r0	; 63
    c9d2:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3117
      }
      default_ring = get_default_ring();
    }
    ///
    /// kontrola NTP serveru
    if (init == 14)
    c9d4:	2e e0       	ldi	r18, 0x0E	; 14
    c9d6:	a2 12       	cpse	r10, r18
    c9d8:	0c 94 49 6d 	jmp	0xda92	; 0xda92 <setup+0x17d2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3119
    {
      strcpy_P(str1, text_ntp_cas);
    c9dc:	69 e3       	ldi	r22, 0x39	; 57
    c9de:	75 e1       	ldi	r23, 0x15	; 21
    c9e0:	c1 01       	movw	r24, r2
    c9e2:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3120
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    c9e6:	ee 24       	eor	r14, r14
    c9e8:	ea 94       	dec	r14
    c9ea:	fe 2c       	mov	r15, r14
    c9ec:	00 ee       	ldi	r16, 0xE0	; 224
    c9ee:	17 e0       	ldi	r17, 0x07	; 7
    c9f0:	21 e0       	ldi	r18, 0x01	; 1
    c9f2:	4e eb       	ldi	r20, 0xBE	; 190
    c9f4:	50 e0       	ldi	r21, 0x00	; 0
    c9f6:	6e e1       	ldi	r22, 0x1E	; 30
    c9f8:	70 e0       	ldi	r23, 0x00	; 0
    c9fa:	c1 01       	movw	r24, r2
    c9fc:	0e 94 c0 30 	call	0x6180	; 0x6180 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.158]>
ntp_check():
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:404

uint8_t ntp_check(NTPClient *timeClient)
{
  char tmp1[20];
  uint8_t ret = 0;
  tmp1[0] = 0;
    ca00:	c2 52       	subi	r28, 0x22	; 34
    ca02:	df 4f       	sbci	r29, 0xFF	; 255
    ca04:	18 82       	st	Y, r1
    ca06:	ce 5d       	subi	r28, 0xDE	; 222
    ca08:	d0 40       	sbci	r29, 0x00	; 0
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:405
  createString(tmp1, '.', device.ntp_server, 4, 10);
    ca0a:	0a e0       	ldi	r16, 0x0A	; 10
    ca0c:	24 e0       	ldi	r18, 0x04	; 4
    ca0e:	44 e6       	ldi	r20, 0x64	; 100
    ca10:	50 e1       	ldi	r21, 0x10	; 16
    ca12:	6e e2       	ldi	r22, 0x2E	; 46
    ca14:	ce 01       	movw	r24, r28
    ca16:	82 52       	subi	r24, 0x22	; 34
    ca18:	9f 4f       	sbci	r25, 0xFF	; 255
    ca1a:	0e 94 6c 4b 	call	0x96d8	; 0x96d8 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
begin():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:57
void NTPClient::begin() {
  this->begin(NTP_DEFAULT_LOCAL_PORT);
}

void NTPClient::begin(int port) {
  this->_port = port;
    ca1e:	89 e3       	ldi	r24, 0x39	; 57
    ca20:	95 e0       	ldi	r25, 0x05	; 5
    ca22:	9f 83       	std	Y+7, r25	; 0x07
    ca24:	8e 83       	std	Y+6, r24	; 0x06
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:59

  this->_udp->begin(this->_port);
    ca26:	89 81       	ldd	r24, Y+1	; 0x01
    ca28:	9a 81       	ldd	r25, Y+2	; 0x02
    ca2a:	dc 01       	movw	r26, r24
    ca2c:	ed 91       	ld	r30, X+
    ca2e:	fc 91       	ld	r31, X
    ca30:	06 84       	ldd	r0, Z+14	; 0x0e
    ca32:	f7 85       	ldd	r31, Z+15	; 0x0f
    ca34:	e0 2d       	mov	r30, r0
    ca36:	69 e3       	ldi	r22, 0x39	; 57
    ca38:	75 e0       	ldi	r23, 0x05	; 5
    ca3a:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:61

  this->_udpSetup = true;
    ca3c:	81 e0       	ldi	r24, 0x01	; 1
    ca3e:	8b 83       	std	Y+3, r24	; 0x03
setTimeOffset():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:172

  this->_udpSetup = false;
}

void NTPClient::setTimeOffset(int timeOffset) {
  this->_timeOffset     = timeOffset;
    ca40:	80 e1       	ldi	r24, 0x10	; 16
    ca42:	9e e0       	ldi	r25, 0x0E	; 14
    ca44:	a0 e0       	ldi	r26, 0x00	; 0
    ca46:	b0 e0       	ldi	r27, 0x00	; 0
    ca48:	88 87       	std	Y+8, r24	; 0x08
    ca4a:	99 87       	std	Y+9, r25	; 0x09
    ca4c:	aa 87       	std	Y+10, r26	; 0x0a
    ca4e:	bb 87       	std	Y+11, r27	; 0x0b
setPoolServerName():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:180
void NTPClient::setUpdateInterval(unsigned long updateInterval) {
  this->_updateInterval = updateInterval;
}

void NTPClient::setPoolServerName(const char* poolServerName) {
    this->_poolServerName = poolServerName;
    ca50:	ee ed       	ldi	r30, 0xDE	; 222
    ca52:	f0 e0       	ldi	r31, 0x00	; 0
    ca54:	ec 0f       	add	r30, r28
    ca56:	fd 1f       	adc	r31, r29
    ca58:	fd 83       	std	Y+5, r31	; 0x05
    ca5a:	ec 83       	std	Y+4, r30	; 0x04
setUpdateInterval():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:176
void NTPClient::setTimeOffset(int timeOffset) {
  this->_timeOffset     = timeOffset;
}

void NTPClient::setUpdateInterval(unsigned long updateInterval) {
  this->_updateInterval = updateInterval;
    ca5c:	81 e0       	ldi	r24, 0x01	; 1
    ca5e:	90 e0       	ldi	r25, 0x00	; 0
    ca60:	a0 e0       	ldi	r26, 0x00	; 0
    ca62:	b0 e0       	ldi	r27, 0x00	; 0
    ca64:	8c 87       	std	Y+12, r24	; 0x0c
    ca66:	9d 87       	std	Y+13, r25	; 0x0d
    ca68:	ae 87       	std	Y+14, r26	; 0x0e
    ca6a:	bf 87       	std	Y+15, r27	; 0x0f
ntp_check():
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:410
  timeClient->begin();
  timeClient->setTimeOffset(3600);
  timeClient->setPoolServerName(tmp1);
  timeClient->setUpdateInterval(1);
  if (timeClient->update() == true)
    ca6c:	ce 01       	movw	r24, r28
    ca6e:	01 96       	adiw	r24, 0x01	; 1
    ca70:	0e 94 b6 43 	call	0x876c	; 0x876c <NTPClient::update()>
    ca74:	18 2f       	mov	r17, r24
end():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:166

  return hoursStr + ":" + minuteStr + ":" + secondStr;
}

void NTPClient::end() {
  this->_udp->stop();
    ca76:	89 81       	ldd	r24, Y+1	; 0x01
    ca78:	9a 81       	ldd	r25, Y+2	; 0x02
    ca7a:	dc 01       	movw	r26, r24
    ca7c:	ed 91       	ld	r30, X+
    ca7e:	fc 91       	ld	r31, X
    ca80:	02 88       	ldd	r0, Z+18	; 0x12
    ca82:	f3 89       	ldd	r31, Z+19	; 0x13
    ca84:	e0 2d       	mov	r30, r0
    ca86:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:168

  this->_udpSetup = false;
    ca88:	1b 82       	std	Y+3, r1	; 0x03
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3121
      if (ntp_check(&timeClient) == 0)
    ca8a:	11 11       	cpse	r17, r1
    ca8c:	ec c7       	rjmp	.+4056   	; 0xda66 <setup+0x17a6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3123
      {
        strcpy(str1, "ERROR");
    ca8e:	6e e4       	ldi	r22, 0x4E	; 78
    ca90:	77 e0       	ldi	r23, 0x07	; 7
    ca92:	c1 01       	movw	r24, r2
    ca94:	0e 94 c8 8c 	call	0x11990	; 0x11990 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3124
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
    ca98:	00 e0       	ldi	r16, 0x00	; 0
    ca9a:	18 ef       	ldi	r17, 0xF8	; 248
    ca9c:	21 e0       	ldi	r18, 0x01	; 1
    ca9e:	4e eb       	ldi	r20, 0xBE	; 190
    caa0:	50 e0       	ldi	r21, 0x00	; 0
    caa2:	60 ea       	ldi	r22, 0xA0	; 160
    caa4:	70 e0       	ldi	r23, 0x00	; 0
    caa6:	c1 01       	movw	r24, r2
    caa8:	0e 94 c0 30 	call	0x6180	; 0x6180 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.158]>
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2464
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
    caac:	80 91 9d 0c 	lds	r24, 0x0C9D	; 0x800c9d <selftest_data>
    cab0:	82 60       	ori	r24, 0x02	; 2
    cab2:	0c 94 e2 6d 	jmp	0xdbc4	; 0xdbc4 <setup+0x1904>
    cab6:	e1 0e       	add	r14, r17
    cab8:	f1 1c       	adc	r15, r1
init_table8():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:928
		{
            for (i = 0; i < len; i++)
            {
                dat[i] = pgm_read_byte(p++);
            }
			Push_Command(cmd,dat,len);
    caba:	70 e0       	ldi	r23, 0x00	; 0
    cabc:	21 2f       	mov	r18, r17
    cabe:	87 eb       	ldi	r24, 0xB7	; 183
    cac0:	91 e1       	ldi	r25, 0x11	; 17
    cac2:	0e 94 75 23 	call	0x46ea	; 0x46ea <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
    cac6:	4a cd       	rjmp	.-1388   	; 0xc55c <setup+0x29c>
start():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:999
            	0x29, 0
			};
			init_table8(ST7796S_regValues, sizeof(ST7796S_regValues));
			break;
		default:
			lcd_driver = ID_UNKNOWN;
    cac8:	8f ef       	ldi	r24, 0xFF	; 255
    caca:	90 e0       	ldi	r25, 0x00	; 0
    cacc:	90 93 d0 11 	sts	0x11D0, r25	; 0x8011d0 <my_lcd+0x19>
    cad0:	80 93 cf 11 	sts	0x11CF, r24	; 0x8011cf <my_lcd+0x18>
    cad4:	4c cd       	rjmp	.-1384   	; 0xc56e <setup+0x2ae>
Invert_Display():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:898
	uint8_t val = VL^i;
	if(lcd_driver == ID_932X)
	{
		writeCmdData8(0x61, val);
	}
	else if(lcd_driver == ID_7575)
    cad6:	21 30       	cpi	r18, 0x01	; 1
    cad8:	31 05       	cpc	r19, r1
    cada:	31 f5       	brne	.+76     	; 0xcb28 <setup+0x868>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:900
	{
		writeCmdData8(0x01, val ? 8 : 10);
    cadc:	20 81       	ld	r18, Z
    cade:	82 23       	and	r24, r18
    cae0:	80 83       	st	Z, r24
    cae2:	81 e0       	ldi	r24, 0x01	; 1
    cae4:	82 b9       	out	0x02, r24	; 2
    cae6:	e0 91 e9 11 	lds	r30, 0x11E9	; 0x8011e9 <my_lcd+0x32>
    caea:	f0 91 ea 11 	lds	r31, 0x11EA	; 0x8011ea <my_lcd+0x33>
    caee:	80 81       	ld	r24, Z
    caf0:	20 91 f3 11 	lds	r18, 0x11F3	; 0x8011f3 <my_lcd+0x3c>
    caf4:	82 23       	and	r24, r18
    caf6:	80 83       	st	Z, r24
    caf8:	e0 91 e9 11 	lds	r30, 0x11E9	; 0x8011e9 <my_lcd+0x32>
    cafc:	f0 91 ea 11 	lds	r31, 0x11EA	; 0x8011ea <my_lcd+0x33>
    cb00:	80 81       	ld	r24, Z
    cb02:	20 91 ef 11 	lds	r18, 0x11EF	; 0x8011ef <my_lcd+0x38>
    cb06:	82 2b       	or	r24, r18
    cb08:	80 83       	st	Z, r24
    cb0a:	e0 91 e7 11 	lds	r30, 0x11E7	; 0x8011e7 <my_lcd+0x30>
    cb0e:	f0 91 e8 11 	lds	r31, 0x11E8	; 0x8011e8 <my_lcd+0x31>
    cb12:	80 81       	ld	r24, Z
    cb14:	20 91 ee 11 	lds	r18, 0x11EE	; 0x8011ee <my_lcd+0x37>
    cb18:	82 2b       	or	r24, r18
    cb1a:	80 83       	st	Z, r24
setup():
    cb1c:	88 e0       	ldi	r24, 0x08	; 8
Invert_Display():
    cb1e:	91 11       	cpse	r25, r1
    cb20:	01 c0       	rjmp	.+2      	; 0xcb24 <setup+0x864>
setup():
    cb22:	8a e0       	ldi	r24, 0x0A	; 10
Invert_Display():
    cb24:	82 b9       	out	0x02, r24	; 2
    cb26:	61 cd       	rjmp	.-1342   	; 0xc5ea <setup+0x32a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:904
	}
	else
	{
		writeCmd8(val ? 0x21 : 0x20);
    cb28:	20 81       	ld	r18, Z
    cb2a:	82 23       	and	r24, r18
    cb2c:	80 83       	st	Z, r24
setup():
    cb2e:	81 e2       	ldi	r24, 0x21	; 33
Invert_Display():
    cb30:	91 11       	cpse	r25, r1
    cb32:	01 c0       	rjmp	.+2      	; 0xcb36 <setup+0x876>
setup():
    cb34:	80 e2       	ldi	r24, 0x20	; 32
Invert_Display():
    cb36:	82 b9       	out	0x02, r24	; 2
    cb38:	e0 91 e9 11 	lds	r30, 0x11E9	; 0x8011e9 <my_lcd+0x32>
    cb3c:	f0 91 ea 11 	lds	r31, 0x11EA	; 0x8011ea <my_lcd+0x33>
    cb40:	80 81       	ld	r24, Z
    cb42:	90 91 f3 11 	lds	r25, 0x11F3	; 0x8011f3 <my_lcd+0x3c>
    cb46:	89 23       	and	r24, r25
    cb48:	80 83       	st	Z, r24
    cb4a:	e0 91 e9 11 	lds	r30, 0x11E9	; 0x8011e9 <my_lcd+0x32>
    cb4e:	f0 91 ea 11 	lds	r31, 0x11EA	; 0x8011ea <my_lcd+0x33>
    cb52:	80 81       	ld	r24, Z
    cb54:	90 91 ef 11 	lds	r25, 0x11EF	; 0x8011ef <my_lcd+0x38>
    cb58:	89 2b       	or	r24, r25
    cb5a:	80 83       	st	Z, r24
    cb5c:	e0 91 e7 11 	lds	r30, 0x11E7	; 0x8011e7 <my_lcd+0x30>
    cb60:	f0 91 e8 11 	lds	r31, 0x11E8	; 0x8011e8 <my_lcd+0x31>
    cb64:	80 81       	ld	r24, Z
    cb66:	90 91 ee 11 	lds	r25, 0x11EE	; 0x8011ee <my_lcd+0x37>
    cb6a:	4f cd       	rjmp	.-1378   	; 0xc60a <setup+0x34a>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2835
      sprintf(str2, "3.3V=%s; 5.0V=%s; IN=%s; I=%s", s_tritri, s_petnula, s_dvanact, s_current);
      show_string(str2, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    }
    ///
    /// inicializace vnitrniho teplomeru LM75B
    if (init == 1)
    cb6c:	b1 e0       	ldi	r27, 0x01	; 1
    cb6e:	ab 12       	cpse	r10, r27
    cb70:	c3 c0       	rjmp	.+390    	; 0xccf8 <setup+0xa38>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2837
    {
      strcpy_P(str1, text_vnitrni_ochrany);
    cb72:	6e e1       	ldi	r22, 0x1E	; 30
    cb74:	76 e1       	ldi	r23, 0x16	; 22
    cb76:	c1 01       	movw	r24, r2
    cb78:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2838
      strcat(str1, ":2");
    cb7c:	60 e2       	ldi	r22, 0x20	; 32
    cb7e:	77 e0       	ldi	r23, 0x07	; 7
    cb80:	c1 01       	movw	r24, r2
    cb82:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2839
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    cb86:	ee 24       	eor	r14, r14
    cb88:	ea 94       	dec	r14
    cb8a:	fe 2c       	mov	r15, r14
    cb8c:	00 ee       	ldi	r16, 0xE0	; 224
    cb8e:	17 e0       	ldi	r17, 0x07	; 7
    cb90:	21 e0       	ldi	r18, 0x01	; 1
    cb92:	4c e3       	ldi	r20, 0x3C	; 60
    cb94:	50 e0       	ldi	r21, 0x00	; 0
    cb96:	6e e1       	ldi	r22, 0x1E	; 30
    cb98:	70 e0       	ldi	r23, 0x00	; 0
    cb9a:	c1 01       	movw	r24, r2
    cb9c:	0e 94 c0 30 	call	0x6180	; 0x6180 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.158]>
readTemperatureC():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:83
  inline int16_t convertFloatTemperature(float value) {
    return (int16_t)(value / temperature_frac_factor);
  }

  float readTemperatureC() {
    return convertIntegerTemperature(readIntegerTemperatureRegister(attributes->registers->temperature));
    cba0:	e0 91 0d 12 	lds	r30, 0x120D	; 0x80120d <lm75_temp+0xb>
    cba4:	f0 91 0e 12 	lds	r31, 0x120E	; 0x80120e <lm75_temp+0xc>
    cba8:	04 80       	ldd	r0, Z+4	; 0x04
    cbaa:	f5 81       	ldd	r31, Z+5	; 0x05
    cbac:	e0 2d       	mov	r30, r0
    cbae:	10 81       	ld	r17, Z
readIntegerTemperatureRegister():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:53
  .registers                      = &LM75_Compatible_Registers,
};

int16_t Temperature_LM75_Derived::readIntegerTemperatureRegister(uint8_t register_index) {
  // Select the temperature register at register_index.
  bus->beginTransmission(i2c_address);
    cbb0:	80 91 04 12 	lds	r24, 0x1204	; 0x801204 <lm75_temp+0x2>
    cbb4:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <TwoWire::beginTransmission(unsigned char) [clone .constprop.181]>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:54
  bus->write(register_index);
    cbb8:	80 91 02 12 	lds	r24, 0x1202	; 0x801202 <lm75_temp>
    cbbc:	90 91 03 12 	lds	r25, 0x1203	; 0x801203 <lm75_temp+0x1>
    cbc0:	dc 01       	movw	r26, r24
    cbc2:	ed 91       	ld	r30, X+
    cbc4:	fc 91       	ld	r31, X
    cbc6:	01 90       	ld	r0, Z+
    cbc8:	f0 81       	ld	r31, Z
    cbca:	e0 2d       	mov	r30, r0
    cbcc:	61 2f       	mov	r22, r17
    cbce:	19 95       	eicall
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:55
  bus->endTransmission();
    cbd0:	80 91 02 12 	lds	r24, 0x1202	; 0x801202 <lm75_temp>
    cbd4:	90 91 03 12 	lds	r25, 0x1203	; 0x801203 <lm75_temp+0x1>
    cbd8:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:58

  // Start a transaction to read the register data.
  bus->requestFrom(i2c_address, (uint8_t) (resolution <= 8 ? 1 : 2));
    cbdc:	80 91 02 12 	lds	r24, 0x1202	; 0x801202 <lm75_temp>
    cbe0:	90 91 03 12 	lds	r25, 0x1203	; 0x801203 <lm75_temp+0x1>
    cbe4:	20 91 05 12 	lds	r18, 0x1205	; 0x801205 <lm75_temp+0x3>
setup():
    cbe8:	41 e0       	ldi	r20, 0x01	; 1
readIntegerTemperatureRegister():
    cbea:	29 30       	cpi	r18, 0x09	; 9
    cbec:	08 f0       	brcs	.+2      	; 0xcbf0 <setup+0x930>
setup():
    cbee:	42 e0       	ldi	r20, 0x02	; 2
readIntegerTemperatureRegister():
    cbf0:	60 91 04 12 	lds	r22, 0x1204	; 0x801204 <lm75_temp+0x2>
    cbf4:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <TwoWire::requestFrom(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:61

  // Read the most significant byte of the temperature data.
  uint16_t t = bus->read() << 8;
    cbf8:	80 91 02 12 	lds	r24, 0x1202	; 0x801202 <lm75_temp>
    cbfc:	90 91 03 12 	lds	r25, 0x1203	; 0x801203 <lm75_temp+0x1>
    cc00:	dc 01       	movw	r26, r24
    cc02:	ed 91       	ld	r30, X+
    cc04:	fc 91       	ld	r31, X
    cc06:	02 84       	ldd	r0, Z+10	; 0x0a
    cc08:	f3 85       	ldd	r31, Z+11	; 0x0b
    cc0a:	e0 2d       	mov	r30, r0
    cc0c:	19 95       	eicall
    cc0e:	cf 5b       	subi	r28, 0xBF	; 191
    cc10:	de 4f       	sbci	r29, 0xFE	; 254
    cc12:	88 83       	st	Y, r24
    cc14:	c1 54       	subi	r28, 0x41	; 65
    cc16:	d1 40       	sbci	r29, 0x01	; 1
    cc18:	c0 5c       	subi	r28, 0xC0	; 192
    cc1a:	de 4f       	sbci	r29, 0xFE	; 254
    cc1c:	18 82       	st	Y, r1
    cc1e:	c0 54       	subi	r28, 0x40	; 64
    cc20:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:64
  
  // Read the least significant byte of the temperature data, if requested.
  if (resolution > 8) {
    cc22:	80 91 05 12 	lds	r24, 0x1205	; 0x801205 <lm75_temp+0x3>
    cc26:	89 30       	cpi	r24, 0x09	; 9
    cc28:	c8 f0       	brcs	.+50     	; 0xcc5c <setup+0x99c>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:65
    t |= bus->read();
    cc2a:	80 91 02 12 	lds	r24, 0x1202	; 0x801202 <lm75_temp>
    cc2e:	90 91 03 12 	lds	r25, 0x1203	; 0x801203 <lm75_temp+0x1>
    cc32:	dc 01       	movw	r26, r24
    cc34:	ed 91       	ld	r30, X+
    cc36:	fc 91       	ld	r31, X
    cc38:	02 84       	ldd	r0, Z+10	; 0x0a
    cc3a:	f3 85       	ldd	r31, Z+11	; 0x0b
    cc3c:	e0 2d       	mov	r30, r0
    cc3e:	19 95       	eicall
    cc40:	c0 5c       	subi	r28, 0xC0	; 192
    cc42:	de 4f       	sbci	r29, 0xFE	; 254
    cc44:	e8 81       	ld	r30, Y
    cc46:	f9 81       	ldd	r31, Y+1	; 0x01
    cc48:	c0 54       	subi	r28, 0x40	; 64
    cc4a:	d1 40       	sbci	r29, 0x01	; 1
    cc4c:	e8 2b       	or	r30, r24
    cc4e:	f9 2b       	or	r31, r25
    cc50:	c0 5c       	subi	r28, 0xC0	; 192
    cc52:	de 4f       	sbci	r29, 0xFE	; 254
    cc54:	f9 83       	std	Y+1, r31	; 0x01
    cc56:	e8 83       	st	Y, r30
    cc58:	c0 54       	subi	r28, 0x40	; 64
    cc5a:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:69
  }

  // Finished reading the register data.
  bus->endTransmission();
    cc5c:	80 91 02 12 	lds	r24, 0x1202	; 0x801202 <lm75_temp>
    cc60:	90 91 03 12 	lds	r25, 0x1203	; 0x801203 <lm75_temp+0x1>
    cc64:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <TwoWire::endTransmission()>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2840
      dtostrf(lm75_temp.readTemperatureC(), 4, 2, s_current);
    cc68:	7e 01       	movw	r14, r28
    cc6a:	f2 ee       	ldi	r31, 0xE2	; 226
    cc6c:	ef 1a       	sub	r14, r31
    cc6e:	fe ef       	ldi	r31, 0xFE	; 254
    cc70:	ff 0a       	sbc	r15, r31
readIntegerTemperatureRegister():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:72

  // Mask out unused/reserved bit from the full 16-bit register.
  t &= resolution_mask;
    cc72:	60 91 06 12 	lds	r22, 0x1206	; 0x801206 <lm75_temp+0x4>
    cc76:	70 91 07 12 	lds	r23, 0x1207	; 0x801207 <lm75_temp+0x5>
    cc7a:	c0 5c       	subi	r28, 0xC0	; 192
    cc7c:	de 4f       	sbci	r29, 0xFE	; 254
    cc7e:	28 81       	ld	r18, Y
    cc80:	39 81       	ldd	r19, Y+1	; 0x01
    cc82:	c0 54       	subi	r28, 0x40	; 64
    cc84:	d1 40       	sbci	r29, 0x01	; 1
    cc86:	62 23       	and	r22, r18
    cc88:	73 23       	and	r23, r19
_ZN24Temperature_LM75_Derived25convertIntegerTemperatureEi():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:75
    setInternalResolution(attributes->default_temperature_resolution);
    setInternalTemperatureFracWidth(attributes->default_temperature_frac_width);
  }

  inline float convertIntegerTemperature(int16_t value) {
    return (float)value * temperature_frac_factor;
    cc8a:	07 2e       	mov	r0, r23
    cc8c:	00 0c       	add	r0, r0
    cc8e:	88 0b       	sbc	r24, r24
    cc90:	99 0b       	sbc	r25, r25
    cc92:	0e 94 c6 88 	call	0x1118c	; 0x1118c <__floatsisf>
    cc96:	20 91 09 12 	lds	r18, 0x1209	; 0x801209 <lm75_temp+0x7>
    cc9a:	30 91 0a 12 	lds	r19, 0x120A	; 0x80120a <lm75_temp+0x8>
    cc9e:	40 91 0b 12 	lds	r20, 0x120B	; 0x80120b <lm75_temp+0x9>
    cca2:	50 91 0c 12 	lds	r21, 0x120C	; 0x80120c <lm75_temp+0xa>
    cca6:	0e 94 25 89 	call	0x1124a	; 0x1124a <__mulsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2840
    ccaa:	87 01       	movw	r16, r14
    ccac:	22 e0       	ldi	r18, 0x02	; 2
    ccae:	44 e0       	ldi	r20, 0x04	; 4
    ccb0:	0e 94 eb 7e 	call	0xfdd6	; 0xfdd6 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2841
      sprintf(str2, "iT=%sC", s_current);
    ccb4:	ff 92       	push	r15
    ccb6:	ef 92       	push	r14
    ccb8:	83 e2       	ldi	r24, 0x23	; 35
    ccba:	97 e0       	ldi	r25, 0x07	; 7
    ccbc:	9f 93       	push	r25
    ccbe:	8f 93       	push	r24
    ccc0:	4e 01       	movw	r8, r28
    ccc2:	38 e8       	ldi	r19, 0x88	; 136
    ccc4:	83 0e       	add	r8, r19
    ccc6:	91 1c       	adc	r9, r1
    ccc8:	9f 92       	push	r9
    ccca:	8f 92       	push	r8
    cccc:	0e 94 3b 8d 	call	0x11a76	; 0x11a76 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2842
      show_string(str2, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    ccd0:	ee 24       	eor	r14, r14
    ccd2:	ea 94       	dec	r14
    ccd4:	fe 2c       	mov	r15, r14
    ccd6:	00 ee       	ldi	r16, 0xE0	; 224
    ccd8:	17 e0       	ldi	r17, 0x07	; 7
    ccda:	21 e0       	ldi	r18, 0x01	; 1
    ccdc:	4c e3       	ldi	r20, 0x3C	; 60
    ccde:	50 e0       	ldi	r21, 0x00	; 0
    cce0:	60 ea       	ldi	r22, 0xA0	; 160
    cce2:	70 e0       	ldi	r23, 0x00	; 0
    cce4:	c4 01       	movw	r24, r8
    cce6:	0e 94 c0 30 	call	0x6180	; 0x6180 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.158]>
    ccea:	0f 90       	pop	r0
    ccec:	0f 90       	pop	r0
    ccee:	0f 90       	pop	r0
    ccf0:	0f 90       	pop	r0
    ccf2:	0f 90       	pop	r0
    ccf4:	0f 90       	pop	r0
    ccf6:	6e ce       	rjmp	.-804    	; 0xc9d4 <setup+0x714>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2846
    }
    ///
    //// nastaveni vychozich hodnot systemu
    if (init == 2)
    ccf8:	82 e0       	ldi	r24, 0x02	; 2
    ccfa:	a8 12       	cpse	r10, r24
    ccfc:	85 c1       	rjmp	.+778    	; 0xd008 <setup+0xd48>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2848
    {
      if (EEPROM.read(set_default_values) == 255)
    ccfe:	8a e5       	ldi	r24, 0x5A	; 90
    cd00:	90 e0       	ldi	r25, 0x00	; 0
    cd02:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224]>
    cd06:	8f 3f       	cpi	r24, 0xFF	; 255
    cd08:	09 f0       	breq	.+2      	; 0xcd0c <setup+0xa4c>
    cd0a:	6b c1       	rjmp	.+726    	; 0xcfe2 <setup+0xd22>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2850
      {
        EEPROM.write(set_default_values, 0);
    cd0c:	60 e0       	ldi	r22, 0x00	; 0
    cd0e:	8a e5       	ldi	r24, 0x5A	; 90
    cd10:	90 e0       	ldi	r25, 0x00	; 0
    cd12:	0e 94 81 44 	call	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2851
        strcpy_P(str1, text_vychozi_nastaveni);
    cd16:	6c e0       	ldi	r22, 0x0C	; 12
    cd18:	76 e1       	ldi	r23, 0x16	; 22
    cd1a:	8d 2d       	mov	r24, r13
    cd1c:	9b 2d       	mov	r25, r11
    cd1e:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2852
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    cd22:	ee 24       	eor	r14, r14
    cd24:	ea 94       	dec	r14
    cd26:	fe 2c       	mov	r15, r14
    cd28:	00 e0       	ldi	r16, 0x00	; 0
    cd2a:	18 ef       	ldi	r17, 0xF8	; 248
    cd2c:	21 e0       	ldi	r18, 0x01	; 1
    cd2e:	46 e4       	ldi	r20, 0x46	; 70
    cd30:	50 e0       	ldi	r21, 0x00	; 0
    cd32:	6e e1       	ldi	r22, 0x1E	; 30
    cd34:	70 e0       	ldi	r23, 0x00	; 0
    cd36:	8d 2d       	mov	r24, r13
    cd38:	9b 2d       	mov	r25, r11
    cd3a:	0e 94 c0 30 	call	0x6180	; 0x6180 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.158]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2854

        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
    cd3e:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2855
          thermostat_ring_clear(idx);
    cd40:	81 2f       	mov	r24, r17
    cd42:	0e 94 c3 45 	call	0x8b86	; 0x8b86 <thermostat_ring_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2854
      {
        EEPROM.write(set_default_values, 0);
        strcpy_P(str1, text_vychozi_nastaveni);
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );

        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
    cd46:	1f 5f       	subi	r17, 0xFF	; 255
    cd48:	1f 30       	cpi	r17, 0x0F	; 15
    cd4a:	d1 f7       	brne	.-12     	; 0xcd40 <setup+0xa80>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2857
          thermostat_ring_clear(idx);
        ///
        for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    cd4c:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2859
        {
          strcpy(tmp1, "");
    cd4e:	62 ef       	ldi	r22, 0xF2	; 242
    cd50:	72 e0       	ldi	r23, 0x02	; 2
    cd52:	ce 01       	movw	r24, r28
    cd54:	8e 50       	subi	r24, 0x0E	; 14
    cd56:	9f 4f       	sbci	r25, 0xFF	; 255
    cd58:	0e 94 c8 8c 	call	0x11990	; 0x11990 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2860
          remote_tds_set_name(idx, 0 , tmp1);
    cd5c:	ae 01       	movw	r20, r28
    cd5e:	4e 50       	subi	r20, 0x0E	; 14
    cd60:	5f 4f       	sbci	r21, 0xFF	; 255
    cd62:	60 e0       	ldi	r22, 0x00	; 0
    cd64:	81 2f       	mov	r24, r17
    cd66:	0e 94 76 47 	call	0x8eec	; 0x8eec <remote_tds_set_name(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2857
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );

        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
          thermostat_ring_clear(idx);
        ///
        for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    cd6a:	1f 5f       	subi	r17, 0xFF	; 255
    cd6c:	15 30       	cpi	r17, 0x05	; 5
    cd6e:	79 f7       	brne	.-34     	; 0xcd4e <setup+0xa8e>
    cd70:	eb e3       	ldi	r30, 0x3B	; 59
    cd72:	8e 2e       	mov	r8, r30
    cd74:	e3 e0       	ldi	r30, 0x03	; 3
    cd76:	9e 2e       	mov	r9, r30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2863
        {
          strcpy(tmp1, "");
          remote_tds_set_name(idx, 0 , tmp1);
        }
        ///
        for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
    cd78:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2865
        {
          strcpy(str2, "PROG");
    cd7a:	6c e9       	ldi	r22, 0x9C	; 156
    cd7c:	74 e0       	ldi	r23, 0x04	; 4
    cd7e:	ce 01       	movw	r24, r28
    cd80:	88 57       	subi	r24, 0x78	; 120
    cd82:	9f 4f       	sbci	r25, 0xFF	; 255
    cd84:	0e 94 c8 8c 	call	0x11990	; 0x11990 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2866
          thermostat_program_set_name(idx, str2);
    cd88:	be 01       	movw	r22, r28
    cd8a:	68 57       	subi	r22, 0x78	; 120
    cd8c:	7f 4f       	sbci	r23, 0xFF	; 255
    cd8e:	81 2f       	mov	r24, r17
    cd90:	0e 94 19 45 	call	0x8a32	; 0x8a32 <thermostat_program_set_name(unsigned char, char*)>
thermostat_program_set_active():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:296
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active);
}
void thermostat_program_set_active(uint8_t program_id, uint8_t active)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active, active);
    cd94:	60 e0       	ldi	r22, 0x00	; 0
    cd96:	c4 01       	movw	r24, r8
    cd98:	0e 94 81 44 	call	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2868
          thermostat_program_set_active(idx, 0);
          for (uint8_t interval_id = 0; interval_id < MAX_PROGRAM_INTERVAL; interval_id++)
    cd9c:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2870
          {
            thermostat_program_set_time(idx, interval_id, 0, 0, 0, 0, 0);
    cd9e:	c1 2c       	mov	r12, r1
    cda0:	e1 2c       	mov	r14, r1
    cda2:	00 e0       	ldi	r16, 0x00	; 0
    cda4:	20 e0       	ldi	r18, 0x00	; 0
    cda6:	40 e0       	ldi	r20, 0x00	; 0
    cda8:	6f 2d       	mov	r22, r15
    cdaa:	81 2f       	mov	r24, r17
    cdac:	0e 94 dd 44 	call	0x89ba	; 0x89ba <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2871
            thermostat_program_set_threshold(idx, interval_id, 220);
    cdb0:	4c ed       	ldi	r20, 0xDC	; 220
    cdb2:	50 e0       	ldi	r21, 0x00	; 0
    cdb4:	6f 2d       	mov	r22, r15
    cdb6:	81 2f       	mov	r24, r17
    cdb8:	0e 94 c1 44 	call	0x8982	; 0x8982 <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2872
            thermostat_program_set_week(idx, interval_id, 0);
    cdbc:	40 e0       	ldi	r20, 0x00	; 0
    cdbe:	6f 2d       	mov	r22, r15
    cdc0:	81 2f       	mov	r24, r17
    cdc2:	0e 94 b3 44 	call	0x8966	; 0x8966 <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2868
        for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
        {
          strcpy(str2, "PROG");
          thermostat_program_set_name(idx, str2);
          thermostat_program_set_active(idx, 0);
          for (uint8_t interval_id = 0; interval_id < MAX_PROGRAM_INTERVAL; interval_id++)
    cdc6:	f3 94       	inc	r15
    cdc8:	9b e0       	ldi	r25, 0x0B	; 11
    cdca:	f9 12       	cpse	r15, r25
    cdcc:	e8 cf       	rjmp	.-48     	; 0xcd9e <setup+0xade>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2863
        {
          strcpy(tmp1, "");
          remote_tds_set_name(idx, 0 , tmp1);
        }
        ///
        for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
    cdce:	1f 5f       	subi	r17, 0xFF	; 255
    cdd0:	ad e4       	ldi	r26, 0x4D	; 77
    cdd2:	8a 0e       	add	r8, r26
    cdd4:	91 1c       	adc	r9, r1
    cdd6:	18 30       	cpi	r17, 0x08	; 8
    cdd8:	81 f6       	brne	.-96     	; 0xcd7a <setup+0xaba>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2883
          get_tds18s20(idx, &tds);
          strcpy(tds.name, "FREE");
          tds.used = 0;
          tds.offset = 0;
          tds.assigned_ds2482 = 0;
          tds.period = 10;
    cdda:	7a e0       	ldi	r23, 0x0A	; 10
    cddc:	f7 2e       	mov	r15, r23
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2884
          for (uint8_t m = 0; m < 8; m++) tds.rom[m] = 0xff;
    cdde:	1f ef       	ldi	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2878
          }
        }
        ///
        for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
        {
          get_tds18s20(idx, &tds);
    cde0:	be 01       	movw	r22, r28
    cde2:	68 53       	subi	r22, 0x38	; 56
    cde4:	7f 4f       	sbci	r23, 0xFF	; 255
    cde6:	80 2f       	mov	r24, r16
    cde8:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2879
          strcpy(tds.name, "FREE");
    cdec:	6e e1       	ldi	r22, 0x1E	; 30
    cdee:	73 e0       	ldi	r23, 0x03	; 3
    cdf0:	c4 5b       	subi	r28, 0xB4	; 180
    cdf2:	de 4f       	sbci	r29, 0xFE	; 254
    cdf4:	88 81       	ld	r24, Y
    cdf6:	99 81       	ldd	r25, Y+1	; 0x01
    cdf8:	cc 54       	subi	r28, 0x4C	; 76
    cdfa:	d1 40       	sbci	r29, 0x01	; 1
    cdfc:	0e 94 c8 8c 	call	0x11990	; 0x11990 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2880
          tds.used = 0;
    ce00:	c8 53       	subi	r28, 0x38	; 56
    ce02:	df 4f       	sbci	r29, 0xFF	; 255
    ce04:	18 82       	st	Y, r1
    ce06:	c8 5c       	subi	r28, 0xC8	; 200
    ce08:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2881
          tds.offset = 0;
    ce0a:	ce 52       	subi	r28, 0x2E	; 46
    ce0c:	df 4f       	sbci	r29, 0xFF	; 255
    ce0e:	19 82       	std	Y+1, r1	; 0x01
    ce10:	18 82       	st	Y, r1
    ce12:	c2 5d       	subi	r28, 0xD2	; 210
    ce14:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2882
          tds.assigned_ds2482 = 0;
    ce16:	cf 52       	subi	r28, 0x2F	; 47
    ce18:	df 4f       	sbci	r29, 0xFF	; 255
    ce1a:	18 82       	st	Y, r1
    ce1c:	c1 5d       	subi	r28, 0xD1	; 209
    ce1e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2883
          tds.period = 10;
    ce20:	c4 52       	subi	r28, 0x24	; 36
    ce22:	df 4f       	sbci	r29, 0xFF	; 255
    ce24:	f8 82       	st	Y, r15
    ce26:	cc 5d       	subi	r28, 0xDC	; 220
    ce28:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2884
          for (uint8_t m = 0; m < 8; m++) tds.rom[m] = 0xff;
    ce2a:	c7 53       	subi	r28, 0x37	; 55
    ce2c:	df 4f       	sbci	r29, 0xFF	; 255
    ce2e:	18 83       	st	Y, r17
    ce30:	c9 5c       	subi	r28, 0xC9	; 201
    ce32:	d0 40       	sbci	r29, 0x00	; 0
    ce34:	c6 53       	subi	r28, 0x36	; 54
    ce36:	df 4f       	sbci	r29, 0xFF	; 255
    ce38:	18 83       	st	Y, r17
    ce3a:	ca 5c       	subi	r28, 0xCA	; 202
    ce3c:	d0 40       	sbci	r29, 0x00	; 0
    ce3e:	c5 53       	subi	r28, 0x35	; 53
    ce40:	df 4f       	sbci	r29, 0xFF	; 255
    ce42:	18 83       	st	Y, r17
    ce44:	cb 5c       	subi	r28, 0xCB	; 203
    ce46:	d0 40       	sbci	r29, 0x00	; 0
    ce48:	c4 53       	subi	r28, 0x34	; 52
    ce4a:	df 4f       	sbci	r29, 0xFF	; 255
    ce4c:	18 83       	st	Y, r17
    ce4e:	cc 5c       	subi	r28, 0xCC	; 204
    ce50:	d0 40       	sbci	r29, 0x00	; 0
    ce52:	c3 53       	subi	r28, 0x33	; 51
    ce54:	df 4f       	sbci	r29, 0xFF	; 255
    ce56:	18 83       	st	Y, r17
    ce58:	cd 5c       	subi	r28, 0xCD	; 205
    ce5a:	d0 40       	sbci	r29, 0x00	; 0
    ce5c:	c2 53       	subi	r28, 0x32	; 50
    ce5e:	df 4f       	sbci	r29, 0xFF	; 255
    ce60:	18 83       	st	Y, r17
    ce62:	ce 5c       	subi	r28, 0xCE	; 206
    ce64:	d0 40       	sbci	r29, 0x00	; 0
    ce66:	c1 53       	subi	r28, 0x31	; 49
    ce68:	df 4f       	sbci	r29, 0xFF	; 255
    ce6a:	18 83       	st	Y, r17
    ce6c:	cf 5c       	subi	r28, 0xCF	; 207
    ce6e:	d0 40       	sbci	r29, 0x00	; 0
    ce70:	c0 53       	subi	r28, 0x30	; 48
    ce72:	df 4f       	sbci	r29, 0xFF	; 255
    ce74:	18 83       	st	Y, r17
    ce76:	c0 5d       	subi	r28, 0xD0	; 208
    ce78:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2885
          set_tds18s20(idx, &tds);
    ce7a:	be 01       	movw	r22, r28
    ce7c:	68 53       	subi	r22, 0x38	; 56
    ce7e:	7f 4f       	sbci	r23, 0xFF	; 255
    ce80:	80 2f       	mov	r24, r16
    ce82:	0e 94 5c 46 	call	0x8cb8	; 0x8cb8 <set_tds18s20(unsigned char, struct_DDS18s20*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2876
            thermostat_program_set_threshold(idx, interval_id, 220);
            thermostat_program_set_week(idx, interval_id, 0);
          }
        }
        ///
        for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    ce86:	0f 5f       	subi	r16, 0xFF	; 255
    ce88:	06 30       	cpi	r16, 0x06	; 6
    ce8a:	09 f0       	breq	.+2      	; 0xce8e <setup+0xbce>
    ce8c:	a9 cf       	rjmp	.-174    	; 0xcde0 <setup+0xb20>
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
    yOff = year;
    ce8e:	84 e1       	ldi	r24, 0x14	; 20
    ce90:	c2 52       	subi	r28, 0x22	; 34
    ce92:	df 4f       	sbci	r29, 0xFF	; 255
    ce94:	88 83       	st	Y, r24
    ce96:	ce 5d       	subi	r28, 0xDE	; 222
    ce98:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:105
    m = month;
    ce9a:	8c e0       	ldi	r24, 0x0C	; 12
    ce9c:	c1 52       	subi	r28, 0x21	; 33
    ce9e:	df 4f       	sbci	r29, 0xFF	; 255
    cea0:	88 83       	st	Y, r24
    cea2:	cf 5d       	subi	r28, 0xDF	; 223
    cea4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:106
    d = day;
    cea6:	8e e0       	ldi	r24, 0x0E	; 14
    cea8:	c0 52       	subi	r28, 0x20	; 32
    ceaa:	df 4f       	sbci	r29, 0xFF	; 255
    ceac:	88 83       	st	Y, r24
    ceae:	c0 5e       	subi	r28, 0xE0	; 224
    ceb0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:107
    hh = hour;
    ceb2:	91 e1       	ldi	r25, 0x11	; 17
    ceb4:	cf 51       	subi	r28, 0x1F	; 31
    ceb6:	df 4f       	sbci	r29, 0xFF	; 255
    ceb8:	98 83       	st	Y, r25
    ceba:	c1 5e       	subi	r28, 0xE1	; 225
    cebc:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:108
    mm = min;
    cebe:	ce 51       	subi	r28, 0x1E	; 30
    cec0:	df 4f       	sbci	r29, 0xFF	; 255
    cec2:	88 83       	st	Y, r24
    cec4:	c2 5e       	subi	r28, 0xE2	; 226
    cec6:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:109
    ss = sec;
    cec8:	cd 51       	subi	r28, 0x1D	; 29
    ceca:	df 4f       	sbci	r29, 0xFF	; 255
    cecc:	18 82       	st	Y, r1
    cece:	c3 5e       	subi	r28, 0xE3	; 227
    ced0:	d0 40       	sbci	r29, 0x00	; 0
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2888
          tds.period = 10;
          for (uint8_t m = 0; m < 8; m++) tds.rom[m] = 0xff;
          set_tds18s20(idx, &tds);
        }

        rtc.adjust(DateTime(2020, 12, 14, 17, 14, 0));
    ced2:	ce 01       	movw	r24, r28
    ced4:	82 52       	subi	r24, 0x22	; 34
    ced6:	9f 4f       	sbci	r25, 0xFF	; 255
    ced8:	0e 94 e5 15 	call	0x2bca	; 0x2bca <RTC_DS1307::adjust(DateTime const&)>
time_set_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2535
  return EEPROM.read(time_offset);
}
/// time_set_offset - nastavi casovy offset letni/zimni
void time_set_offset(uint8_t offset)
{
  EEPROM.write(time_offset, offset);
    cedc:	61 e0       	ldi	r22, 0x01	; 1
    cede:	81 e0       	ldi	r24, 0x01	; 1
    cee0:	90 e0       	ldi	r25, 0x00	; 0
    cee2:	0e 94 81 44 	call	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2891
        }

        rtc.adjust(DateTime(2020, 12, 14, 17, 14, 0));
        time_set_offset(1);
        /// pokus o vetsi random
        device.mac[0] = 2; device.mac[1] = 1; device.mac[2] = 2; device.mac[3] = dvanact >> 1; device.mac[4] = light_curr >> 1; device.mac[5] = proud >> 1;
    cee6:	82 e0       	ldi	r24, 0x02	; 2
    cee8:	80 93 16 10 	sts	0x1016, r24	; 0x801016 <device>
    ceec:	91 e0       	ldi	r25, 0x01	; 1
    ceee:	90 93 17 10 	sts	0x1017, r25	; 0x801017 <device+0x1>
    cef2:	80 93 18 10 	sts	0x1018, r24	; 0x801018 <device+0x2>
    cef6:	20 91 c4 0b 	lds	r18, 0x0BC4	; 0x800bc4 <dvanact>
    cefa:	30 91 c5 0b 	lds	r19, 0x0BC5	; 0x800bc5 <dvanact+0x1>
    cefe:	36 95       	lsr	r19
    cf00:	27 95       	ror	r18
    cf02:	20 93 19 10 	sts	0x1019, r18	; 0x801019 <device+0x3>
    cf06:	20 91 a4 0c 	lds	r18, 0x0CA4	; 0x800ca4 <light_curr>
    cf0a:	30 91 a5 0c 	lds	r19, 0x0CA5	; 0x800ca5 <light_curr+0x1>
    cf0e:	36 95       	lsr	r19
    cf10:	27 95       	ror	r18
    cf12:	20 93 1a 10 	sts	0x101A, r18	; 0x80101a <device+0x4>
    cf16:	20 91 c2 0b 	lds	r18, 0x0BC2	; 0x800bc2 <proud>
    cf1a:	30 91 c3 0b 	lds	r19, 0x0BC3	; 0x800bc3 <proud+0x1>
    cf1e:	36 95       	lsr	r19
    cf20:	27 95       	ror	r18
    cf22:	20 93 1b 10 	sts	0x101B, r18	; 0x80101b <device+0x5>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2892
        device.myIP[0] = 192; device.myIP[1] = 168; device.myIP[2] = 2; device.myIP[3] = 110;
    cf26:	30 ec       	ldi	r19, 0xC0	; 192
    cf28:	30 93 1c 10 	sts	0x101C, r19	; 0x80101c <device+0x6>
    cf2c:	28 ea       	ldi	r18, 0xA8	; 168
    cf2e:	20 93 1d 10 	sts	0x101D, r18	; 0x80101d <device+0x7>
    cf32:	80 93 1e 10 	sts	0x101E, r24	; 0x80101e <device+0x8>
    cf36:	4e e6       	ldi	r20, 0x6E	; 110
    cf38:	40 93 1f 10 	sts	0x101F, r20	; 0x80101f <device+0x9>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2893
        device.myMASK[0] = 255; device.myMASK[1] = 255; device.myMASK[2] = 255; device.myMASK[3] = 0;
    cf3c:	10 93 20 10 	sts	0x1020, r17	; 0x801020 <device+0xa>
    cf40:	10 93 21 10 	sts	0x1021, r17	; 0x801021 <device+0xb>
    cf44:	10 93 22 10 	sts	0x1022, r17	; 0x801022 <device+0xc>
    cf48:	10 92 23 10 	sts	0x1023, r1	; 0x801023 <device+0xd>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2895

        device.myGW[0] = 192; device.myGW[1] = 168; device.myGW[2] = 2; device.myGW[3] = 1;
    cf4c:	30 93 28 10 	sts	0x1028, r19	; 0x801028 <device+0x12>
    cf50:	20 93 29 10 	sts	0x1029, r18	; 0x801029 <device+0x13>
    cf54:	80 93 2a 10 	sts	0x102A, r24	; 0x80102a <device+0x14>
    cf58:	90 93 2b 10 	sts	0x102B, r25	; 0x80102b <device+0x15>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2896
        device.myDNS[0] = 192; device.myDNS[1] = 168; device.myDNS[2] = 2; device.myDNS[3] = 1;
    cf5c:	30 93 24 10 	sts	0x1024, r19	; 0x801024 <device+0xe>
    cf60:	20 93 25 10 	sts	0x1025, r18	; 0x801025 <device+0xf>
    cf64:	80 93 26 10 	sts	0x1026, r24	; 0x801026 <device+0x10>
    cf68:	90 93 27 10 	sts	0x1027, r25	; 0x801027 <device+0x11>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2897
        device.mqtt_server[0] = 192; device.mqtt_server[1] = 168; device.mqtt_server[2] = 2; device.mqtt_server[3] = 1;
    cf6c:	30 93 36 10 	sts	0x1036, r19	; 0x801036 <device+0x20>
    cf70:	20 93 37 10 	sts	0x1037, r18	; 0x801037 <device+0x21>
    cf74:	80 93 38 10 	sts	0x1038, r24	; 0x801038 <device+0x22>
    cf78:	90 93 39 10 	sts	0x1039, r25	; 0x801039 <device+0x23>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2898
        device.ntp_server[0] = 192; device.ntp_server[1] = 168; device.ntp_server[2] = 2; device.ntp_server[3] = 1;
    cf7c:	30 93 64 10 	sts	0x1064, r19	; 0x801064 <device+0x4e>
    cf80:	20 93 65 10 	sts	0x1065, r18	; 0x801065 <device+0x4f>
    cf84:	80 93 66 10 	sts	0x1066, r24	; 0x801066 <device+0x50>
    cf88:	90 93 67 10 	sts	0x1067, r25	; 0x801067 <device+0x51>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2899
        device.mqtt_port = 1883;
    cf8c:	8b e5       	ldi	r24, 0x5B	; 91
    cf8e:	97 e0       	ldi	r25, 0x07	; 7
    cf90:	90 93 3b 10 	sts	0x103B, r25	; 0x80103b <device+0x25>
    cf94:	80 93 3a 10 	sts	0x103A, r24	; 0x80103a <device+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2900
        strcpy(device.mqtt_user, "saric");
    cf98:	6a e2       	ldi	r22, 0x2A	; 42
    cf9a:	77 e0       	ldi	r23, 0x07	; 7
    cf9c:	8c e3       	ldi	r24, 0x3C	; 60
    cf9e:	90 e1       	ldi	r25, 0x10	; 16
    cfa0:	0e 94 c8 8c 	call	0x11990	; 0x11990 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2901
        strcpy(device.mqtt_key, "no");
    cfa4:	60 e3       	ldi	r22, 0x30	; 48
    cfa6:	77 e0       	ldi	r23, 0x07	; 7
    cfa8:	80 e5       	ldi	r24, 0x50	; 80
    cfaa:	90 e1       	ldi	r25, 0x10	; 16
    cfac:	0e 94 c8 8c 	call	0x11990	; 0x11990 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2902
        save_setup_network();
    cfb0:	0e 94 d7 46 	call	0x8dae	; 0x8dae <save_setup_network()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2903
        strcpy(str1, "TERM D1");
    cfb4:	63 e3       	ldi	r22, 0x33	; 51
    cfb6:	77 e0       	ldi	r23, 0x07	; 7
    cfb8:	8d 2d       	mov	r24, r13
    cfba:	9b 2d       	mov	r25, r11
    cfbc:	0e 94 c8 8c 	call	0x11990	; 0x11990 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2904
        device_set_name(str1);
    cfc0:	8d 2d       	mov	r24, r13
    cfc2:	9b 2d       	mov	r25, r11
    cfc4:	0e 94 af 46 	call	0x8d5e	; 0x8d5e <device_set_name(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2906
        char hostname[10];
        device_get_name(hostname);
    cfc8:	ce 01       	movw	r24, r28
    cfca:	82 52       	subi	r24, 0x22	; 34
    cfcc:	9f 4f       	sbci	r25, 0xFF	; 255
    cfce:	0e 94 94 48 	call	0x9128	; 0x9128 <device_get_name(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2907
        default_ring = 0;
    cfd2:	10 92 ca 0b 	sts	0x0BCA, r1	; 0x800bca <default_ring>
set_default_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1373
/*
   ring - cislo aktivniho ringu
*/
void set_default_ring(uint8_t ring)
{
  EEPROM.write(my_default_ring, ring);
    cfd6:	60 e0       	ldi	r22, 0x00	; 0
    cfd8:	8c e5       	ldi	r24, 0x5C	; 92
    cfda:	90 e0       	ldi	r25, 0x00	; 0
    cfdc:	0e 94 81 44 	call	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>
    cfe0:	f9 cc       	rjmp	.-1550   	; 0xc9d4 <setup+0x714>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2912
        default_ring = 0;
        set_default_ring(default_ring);
      }
      else
      {
        strcpy_P(str1, text_bezny_start);
    cfe2:	60 e0       	ldi	r22, 0x00	; 0
    cfe4:	76 e1       	ldi	r23, 0x16	; 22
    cfe6:	8d 2d       	mov	r24, r13
    cfe8:	9b 2d       	mov	r25, r11
    cfea:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2913
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    cfee:	ee 24       	eor	r14, r14
    cff0:	ea 94       	dec	r14
    cff2:	fe 2c       	mov	r15, r14
    cff4:	00 ee       	ldi	r16, 0xE0	; 224
    cff6:	17 e0       	ldi	r17, 0x07	; 7
    cff8:	21 e0       	ldi	r18, 0x01	; 1
    cffa:	46 e4       	ldi	r20, 0x46	; 70
    cffc:	50 e0       	ldi	r21, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2945
      }
      else
      {
        strcpy_P(str1, text_test_ram);
        strcat(str1, " ERR");
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    cffe:	6e e1       	ldi	r22, 0x1E	; 30
    d000:	70 e0       	ldi	r23, 0x00	; 0
    d002:	8d 2d       	mov	r24, r13
    d004:	9b 2d       	mov	r25, r11
    d006:	9c c0       	rjmp	.+312    	; 0xd140 <setup+0xe80>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2918
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      }
    }
    ///
    /// test SRAM
    if (init == 3)
    d008:	b3 e0       	ldi	r27, 0x03	; 3
    d00a:	ab 12       	cpse	r10, r27
    d00c:	b1 c0       	rjmp	.+354    	; 0xd170 <setup+0xeb0>
begin():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:50



void SRAM_23LC::begin(void)
{
  digitalWrite(_chipSelect, HIGH);
    d00e:	61 e0       	ldi	r22, 0x01	; 1
    d010:	80 91 85 10 	lds	r24, 0x1085	; 0x801085 <SRAM+0x8>
    d014:	0e 94 3a 11 	call	0x2274	; 0x2274 <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:51
  pinMode(_chipSelect, OUTPUT);
    d018:	61 e0       	ldi	r22, 0x01	; 1
    d01a:	80 91 85 10 	lds	r24, 0x1085	; 0x801085 <SRAM+0x8>
    d01e:	0e 94 9f 11 	call	0x233e	; 0x233e <pinMode>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:53

  _spi->begin();
    d022:	80 91 7d 10 	lds	r24, 0x107D	; 0x80107d <SRAM>
    d026:	90 91 7e 10 	lds	r25, 0x107E	; 0x80107e <SRAM+0x1>
    d02a:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <SoftSPIB::begin()>
startCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:125
}

void SRAM_23LC::startCommand(const uint8_t command, const uint32_t address)
{
  //_spi->beginTransaction(_spiSettings);
  digitalWrite(_chipSelect, LOW);
    d02e:	60 e0       	ldi	r22, 0x00	; 0
    d030:	80 91 85 10 	lds	r24, 0x1085	; 0x801085 <SRAM+0x8>
    d034:	0e 94 3a 11 	call	0x2274	; 0x2274 <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:127

  _spi->transfer(command);
    d038:	61 e0       	ldi	r22, 0x01	; 1
    d03a:	80 91 7d 10 	lds	r24, 0x107D	; 0x80107d <SRAM>
    d03e:	90 91 7e 10 	lds	r25, 0x107E	; 0x80107e <SRAM+0x1>
    d042:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <SoftSPIB::transfer(unsigned char)>
begin():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:56
  pinMode(_chipSelect, OUTPUT);

  _spi->begin();

  startCommand(SRAM_23LC_COMMAND_WRMR, 0);
  _spi->transfer(SRAM_23LC_MODE_SEQUENTIAL);
    d046:	60 e4       	ldi	r22, 0x40	; 64
    d048:	80 91 7d 10 	lds	r24, 0x107D	; 0x80107d <SRAM>
    d04c:	90 91 7e 10 	lds	r25, 0x107E	; 0x80107e <SRAM+0x1>
    d050:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <SoftSPIB::transfer(unsigned char)>
endCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:144
  _spi->transfer((uint8_t)(address & 0xFF));
}

void SRAM_23LC::endCommand(void)
{
  digitalWrite(_chipSelect, HIGH);
    d054:	61 e0       	ldi	r22, 0x01	; 1
    d056:	80 91 85 10 	lds	r24, 0x1085	; 0x801085 <SRAM+0x8>
    d05a:	0e 94 3a 11 	call	0x2274	; 0x2274 <digitalWrite>
writeByte():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:80
  return(ret);
}

size_t SRAM_23LC::writeByte(const uint32_t address, const uint8_t byte)
{
  if (address >= _capacity) {
    d05e:	80 91 81 10 	lds	r24, 0x1081	; 0x801081 <SRAM+0x4>
    d062:	90 91 82 10 	lds	r25, 0x1082	; 0x801082 <SRAM+0x5>
    d066:	a0 91 83 10 	lds	r26, 0x1083	; 0x801083 <SRAM+0x6>
    d06a:	b0 91 84 10 	lds	r27, 0x1084	; 0x801084 <SRAM+0x7>
    d06e:	89 2b       	or	r24, r25
    d070:	8a 2b       	or	r24, r26
    d072:	8b 2b       	or	r24, r27
    d074:	d1 f0       	breq	.+52     	; 0xd0aa <setup+0xdea>
startCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:125
}

void SRAM_23LC::startCommand(const uint8_t command, const uint32_t address)
{
  //_spi->beginTransaction(_spiSettings);
  digitalWrite(_chipSelect, LOW);
    d076:	60 e0       	ldi	r22, 0x00	; 0
    d078:	80 91 85 10 	lds	r24, 0x1085	; 0x801085 <SRAM+0x8>
    d07c:	0e 94 3a 11 	call	0x2274	; 0x2274 <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:127

  _spi->transfer(command);
    d080:	62 e0       	ldi	r22, 0x02	; 2
    d082:	80 91 7d 10 	lds	r24, 0x107D	; 0x80107d <SRAM>
    d086:	90 91 7e 10 	lds	r25, 0x107E	; 0x80107e <SRAM+0x1>
    d08a:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:129
  if (command == SRAM_23LC_COMMAND_READ || command == SRAM_23LC_COMMAND_WRITE) {
    sendAddressBytes(address);
    d08e:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <SRAM_23LC::sendAddressBytes(unsigned long) [clone .constprop.96]>
writeByte():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:85
  if (address >= _capacity) {
    return(0);
  }

  startCommand(SRAM_23LC_COMMAND_WRITE, address);
  _spi->transfer(byte);
    d092:	6b ea       	ldi	r22, 0xAB	; 171
    d094:	80 91 7d 10 	lds	r24, 0x107D	; 0x80107d <SRAM>
    d098:	90 91 7e 10 	lds	r25, 0x107E	; 0x80107e <SRAM+0x1>
    d09c:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <SoftSPIB::transfer(unsigned char)>
endCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:144
  _spi->transfer((uint8_t)(address & 0xFF));
}

void SRAM_23LC::endCommand(void)
{
  digitalWrite(_chipSelect, HIGH);
    d0a0:	61 e0       	ldi	r22, 0x01	; 1
    d0a2:	80 91 85 10 	lds	r24, 0x1085	; 0x801085 <SRAM+0x8>
    d0a6:	0e 94 3a 11 	call	0x2274	; 0x2274 <digitalWrite>
readByte():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:67
  pinMode(_chipSelect, INPUT);
}

uint8_t SRAM_23LC::readByte(const uint32_t address)
{
  if (address >= _capacity) {
    d0aa:	80 91 81 10 	lds	r24, 0x1081	; 0x801081 <SRAM+0x4>
    d0ae:	90 91 82 10 	lds	r25, 0x1082	; 0x801082 <SRAM+0x5>
    d0b2:	a0 91 83 10 	lds	r26, 0x1083	; 0x801083 <SRAM+0x6>
    d0b6:	b0 91 84 10 	lds	r27, 0x1084	; 0x801084 <SRAM+0x7>
    d0ba:	89 2b       	or	r24, r25
    d0bc:	8a 2b       	or	r24, r26
    d0be:	8b 2b       	or	r24, r27
    d0c0:	09 f4       	brne	.+2      	; 0xd0c4 <setup+0xe04>
    d0c2:	41 c0       	rjmp	.+130    	; 0xd146 <setup+0xe86>
startCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:125
}

void SRAM_23LC::startCommand(const uint8_t command, const uint32_t address)
{
  //_spi->beginTransaction(_spiSettings);
  digitalWrite(_chipSelect, LOW);
    d0c4:	60 e0       	ldi	r22, 0x00	; 0
    d0c6:	80 91 85 10 	lds	r24, 0x1085	; 0x801085 <SRAM+0x8>
    d0ca:	0e 94 3a 11 	call	0x2274	; 0x2274 <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:127

  _spi->transfer(command);
    d0ce:	63 e0       	ldi	r22, 0x03	; 3
    d0d0:	80 91 7d 10 	lds	r24, 0x107D	; 0x80107d <SRAM>
    d0d4:	90 91 7e 10 	lds	r25, 0x107E	; 0x80107e <SRAM+0x1>
    d0d8:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:129
  if (command == SRAM_23LC_COMMAND_READ || command == SRAM_23LC_COMMAND_WRITE) {
    sendAddressBytes(address);
    d0dc:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <SRAM_23LC::sendAddressBytes(unsigned long) [clone .constprop.96]>
readByte():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:72
  if (address >= _capacity) {
    return(0);
  }

  startCommand(SRAM_23LC_COMMAND_READ, address);
  uint8_t ret = _spi->transfer(SRAM_23LC_DUMMY_BYTE);
    d0e0:	6f ef       	ldi	r22, 0xFF	; 255
    d0e2:	80 91 7d 10 	lds	r24, 0x107D	; 0x80107d <SRAM>
    d0e6:	90 91 7e 10 	lds	r25, 0x107E	; 0x80107e <SRAM+0x1>
    d0ea:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <SoftSPIB::transfer(unsigned char)>
    d0ee:	18 2f       	mov	r17, r24
endCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:144
  _spi->transfer((uint8_t)(address & 0xFF));
}

void SRAM_23LC::endCommand(void)
{
  digitalWrite(_chipSelect, HIGH);
    d0f0:	61 e0       	ldi	r22, 0x01	; 1
    d0f2:	80 91 85 10 	lds	r24, 0x1085	; 0x801085 <SRAM+0x8>
    d0f6:	0e 94 3a 11 	call	0x2274	; 0x2274 <digitalWrite>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2922
    {
      SRAM.begin();
      SRAM.writeByte(0, 0xAB);
      if (SRAM.readByte(0) == 0xAB)
    d0fa:	1b 3a       	cpi	r17, 0xAB	; 171
    d0fc:	21 f5       	brne	.+72     	; 0xd146 <setup+0xe86>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2924
      {
        strcpy_P(str1, text_test_ram);
    d0fe:	63 ef       	ldi	r22, 0xF3	; 243
    d100:	75 e1       	ldi	r23, 0x15	; 21
    d102:	8d 2d       	mov	r24, r13
    d104:	9b 2d       	mov	r25, r11
    d106:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2925
        strcat(str1, " init ...");
    d10a:	6b e3       	ldi	r22, 0x3B	; 59
    d10c:	77 e0       	ldi	r23, 0x07	; 7
    d10e:	8d 2d       	mov	r24, r13
    d110:	9b 2d       	mov	r25, r11
    d112:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2926
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    d116:	ee 24       	eor	r14, r14
    d118:	ea 94       	dec	r14
    d11a:	fe 2c       	mov	r15, r14
    d11c:	00 ee       	ldi	r16, 0xE0	; 224
    d11e:	17 e0       	ldi	r17, 0x07	; 7
    d120:	21 e0       	ldi	r18, 0x01	; 1
    d122:	40 e5       	ldi	r20, 0x50	; 80
    d124:	50 e0       	ldi	r21, 0x00	; 0
    d126:	6e e1       	ldi	r22, 0x1E	; 30
    d128:	70 e0       	ldi	r23, 0x00	; 0
    d12a:	8d 2d       	mov	r24, r13
    d12c:	9b 2d       	mov	r25, r11
    d12e:	0e 94 c0 30 	call	0x6180	; 0x6180 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.158]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2939
            sprintf(str1, "%d/2048", p);
            show_string(str1, 180, 50 + (init * 10), 1, GREEN, WHITE, 0 );
          }
          }
        */
        show_string("OK", 210, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    d132:	21 e0       	ldi	r18, 0x01	; 1
    d134:	40 e5       	ldi	r20, 0x50	; 80
    d136:	50 e0       	ldi	r21, 0x00	; 0
    d138:	62 ed       	ldi	r22, 0xD2	; 210
    d13a:	70 e0       	ldi	r23, 0x00	; 0
    d13c:	8b e4       	ldi	r24, 0x4B	; 75
    d13e:	97 e0       	ldi	r25, 0x07	; 7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2945
      }
      else
      {
        strcpy_P(str1, text_test_ram);
        strcat(str1, " ERR");
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    d140:	0e 94 c0 30 	call	0x6180	; 0x6180 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.158]>
    d144:	47 cc       	rjmp	.-1906   	; 0xc9d4 <setup+0x714>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2943
        */
        show_string("OK", 210, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_test_ram);
    d146:	63 ef       	ldi	r22, 0xF3	; 243
    d148:	75 e1       	ldi	r23, 0x15	; 21
    d14a:	8d 2d       	mov	r24, r13
    d14c:	9b 2d       	mov	r25, r11
    d14e:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2944
        strcat(str1, " ERR");
    d152:	65 e4       	ldi	r22, 0x45	; 69
    d154:	77 e0       	ldi	r23, 0x07	; 7
    d156:	8d 2d       	mov	r24, r13
    d158:	9b 2d       	mov	r25, r11
    d15a:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2945
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    d15e:	ee 24       	eor	r14, r14
    d160:	ea 94       	dec	r14
    d162:	fe 2c       	mov	r15, r14
    d164:	00 e0       	ldi	r16, 0x00	; 0
    d166:	18 ef       	ldi	r17, 0xF8	; 248
    d168:	21 e0       	ldi	r18, 0x01	; 1
    d16a:	40 e5       	ldi	r20, 0x50	; 80
    d16c:	50 e0       	ldi	r21, 0x00	; 0
    d16e:	47 cf       	rjmp	.-370    	; 0xcffe <setup+0xd3e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2950
      }
    }

    //// init EEPROMKY
    if (init == 4)
    d170:	e4 e0       	ldi	r30, 0x04	; 4
    d172:	ae 12       	cpse	r10, r30
    d174:	d4 c4       	rjmp	.+2472   	; 0xdb1e <setup+0x185e>
begin():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:31
}


void EEPROM_CAT25::begin(void)
{
  digitalWrite(_chipSelect, HIGH);
    d176:	61 e0       	ldi	r22, 0x01	; 1
    d178:	80 91 78 10 	lds	r24, 0x1078	; 0x801078 <SROM+0xa>
    d17c:	0e 94 3a 11 	call	0x2274	; 0x2274 <digitalWrite>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:32
  pinMode(_chipSelect, OUTPUT);
    d180:	61 e0       	ldi	r22, 0x01	; 1
    d182:	80 91 78 10 	lds	r24, 0x1078	; 0x801078 <SROM+0xa>
    d186:	0e 94 9f 11 	call	0x233e	; 0x233e <pinMode>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:34

  _spi->begin();
    d18a:	80 91 6e 10 	lds	r24, 0x106E	; 0x80106e <SROM>
    d18e:	90 91 6f 10 	lds	r25, 0x106F	; 0x80106f <SROM+0x1>
    d192:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <SoftSPIB::begin()>
writeByte():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:90
}

size_t EEPROM_CAT25::writeByte(const uint32_t address, const uint8_t byte)
{

  if (address >= _capacity) {
    d196:	80 91 72 10 	lds	r24, 0x1072	; 0x801072 <SROM+0x4>
    d19a:	90 91 73 10 	lds	r25, 0x1073	; 0x801073 <SROM+0x5>
    d19e:	a0 91 74 10 	lds	r26, 0x1074	; 0x801074 <SROM+0x6>
    d1a2:	b0 91 75 10 	lds	r27, 0x1075	; 0x801075 <SROM+0x7>
    d1a6:	89 2b       	or	r24, r25
    d1a8:	8a 2b       	or	r24, r26
    d1aa:	8b 2b       	or	r24, r27
    d1ac:	a9 f0       	breq	.+42     	; 0xd1d8 <setup+0xf18>
isReady():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:52
  return(ret);
}

bool EEPROM_CAT25::isReady(void)
{
  if ((getStatusRegister() & EEPROM_CAT25_RDY_Msk) == EEPROM_CAT25_RDY_BUSY) {
    d1ae:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <EEPROM_CAT25::getStatusRegister() [clone .constprop.104]>
    d1b2:	80 fd       	sbrc	r24, 0
    d1b4:	fc cf       	rjmp	.-8      	; 0xd1ae <setup+0xeee>
enableWrite():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:60
  return(true);
}

void EEPROM_CAT25::enableWrite(void)
{
  startCommand(EEPROM_CAT25_COMMAND_WREN, 0);
    d1b6:	86 e0       	ldi	r24, 0x06	; 6
    d1b8:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.105]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:61
  endCommand();
    d1bc:	0e 94 68 11 	call	0x22d0	; 0x22d0 <EEPROM_CAT25::endCommand() [clone .constprop.107]>
writeByte():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:100
  while (!isReady()) {
    yield();
  }

  enableWrite();
  startCommand(EEPROM_CAT25_COMMAND_WRITE, address);
    d1c0:	82 e0       	ldi	r24, 0x02	; 2
    d1c2:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.105]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:101
  _spi->transfer(byte);
    d1c6:	6a eb       	ldi	r22, 0xBA	; 186
    d1c8:	80 91 6e 10 	lds	r24, 0x106E	; 0x80106e <SROM>
    d1cc:	90 91 6f 10 	lds	r25, 0x106F	; 0x80106f <SROM+0x1>
    d1d0:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:102
  endCommand();
    d1d4:	0e 94 68 11 	call	0x22d0	; 0x22d0 <EEPROM_CAT25::endCommand() [clone .constprop.107]>
readByte():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:72
  endCommand();
}

uint8_t EEPROM_CAT25::readByte(const uint32_t address)
{
  if (address >= _capacity) {
    d1d8:	80 91 72 10 	lds	r24, 0x1072	; 0x801072 <SROM+0x4>
    d1dc:	90 91 73 10 	lds	r25, 0x1073	; 0x801073 <SROM+0x5>
    d1e0:	a0 91 74 10 	lds	r26, 0x1074	; 0x801074 <SROM+0x6>
    d1e4:	b0 91 75 10 	lds	r27, 0x1075	; 0x801075 <SROM+0x7>
    d1e8:	89 2b       	or	r24, r25
    d1ea:	8a 2b       	or	r24, r26
    d1ec:	8b 2b       	or	r24, r27
    d1ee:	71 f1       	breq	.+92     	; 0xd24c <setup+0xf8c>
isReady():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:52
  return(ret);
}

bool EEPROM_CAT25::isReady(void)
{
  if ((getStatusRegister() & EEPROM_CAT25_RDY_Msk) == EEPROM_CAT25_RDY_BUSY) {
    d1f0:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <EEPROM_CAT25::getStatusRegister() [clone .constprop.104]>
    d1f4:	80 fd       	sbrc	r24, 0
    d1f6:	fc cf       	rjmp	.-8      	; 0xd1f0 <setup+0xf30>
readByte():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:80

  while (!isReady()) {
    yield();
  }

  startCommand(EEPROM_CAT25_COMMAND_READ, address);
    d1f8:	83 e0       	ldi	r24, 0x03	; 3
    d1fa:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.105]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:81
  uint8_t ret = _spi->transfer(EEPROM_CAT25_DUMMY_BYTE);
    d1fe:	6f ef       	ldi	r22, 0xFF	; 255
    d200:	80 91 6e 10 	lds	r24, 0x106E	; 0x80106e <SROM>
    d204:	90 91 6f 10 	lds	r25, 0x106F	; 0x80106f <SROM+0x1>
    d208:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <SoftSPIB::transfer(unsigned char)>
    d20c:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:82
  endCommand();
    d20e:	0e 94 68 11 	call	0x22d0	; 0x22d0 <EEPROM_CAT25::endCommand() [clone .constprop.107]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2954
    {
      SROM.begin();
      SROM.writeByte(0, 0xBA);
      if (SROM.readByte(0) == 0xBA)
    d212:	1a 3b       	cpi	r17, 0xBA	; 186
    d214:	d9 f4       	brne	.+54     	; 0xd24c <setup+0xf8c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2957

      {
        strcpy_P(str1, text_test_eeprom);
    d216:	63 ee       	ldi	r22, 0xE3	; 227
    d218:	75 e1       	ldi	r23, 0x15	; 21
    d21a:	8d 2d       	mov	r24, r13
    d21c:	9b 2d       	mov	r25, r11
    d21e:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2958
        strcat(str1, " OK");
    d222:	6a e4       	ldi	r22, 0x4A	; 74
    d224:	77 e0       	ldi	r23, 0x07	; 7
    d226:	8d 2d       	mov	r24, r13
    d228:	9b 2d       	mov	r25, r11
    d22a:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2959
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    d22e:	ee 24       	eor	r14, r14
    d230:	ea 94       	dec	r14
    d232:	fe 2c       	mov	r15, r14
    d234:	00 ee       	ldi	r16, 0xE0	; 224
    d236:	17 e0       	ldi	r17, 0x07	; 7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2965
      }
      else
      {
        strcpy_P(str1, text_test_eeprom);
        strcat(str1, " ERR");
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    d238:	21 e0       	ldi	r18, 0x01	; 1
    d23a:	4a e5       	ldi	r20, 0x5A	; 90
    d23c:	50 e0       	ldi	r21, 0x00	; 0
    d23e:	6e e1       	ldi	r22, 0x1E	; 30
    d240:	70 e0       	ldi	r23, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3080
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
      else
      {
        strcpy(str1, "OK");
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    d242:	8d 2d       	mov	r24, r13
    d244:	9b 2d       	mov	r25, r11
    d246:	0e 94 c0 30 	call	0x6180	; 0x6180 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.158]>
    d24a:	f9 c0       	rjmp	.+498    	; 0xd43e <setup+0x117e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2963
        strcat(str1, " OK");
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_test_eeprom);
    d24c:	63 ee       	ldi	r22, 0xE3	; 227
    d24e:	75 e1       	ldi	r23, 0x15	; 21
    d250:	8d 2d       	mov	r24, r13
    d252:	9b 2d       	mov	r25, r11
    d254:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2964
        strcat(str1, " ERR");
    d258:	65 e4       	ldi	r22, 0x45	; 69
    d25a:	77 e0       	ldi	r23, 0x07	; 7
    d25c:	8d 2d       	mov	r24, r13
    d25e:	9b 2d       	mov	r25, r11
    d260:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2965
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    d264:	ee 24       	eor	r14, r14
    d266:	ea 94       	dec	r14
    d268:	fe 2c       	mov	r15, r14
    d26a:	00 e0       	ldi	r16, 0x00	; 0
    d26c:	18 ef       	ldi	r17, 0xF8	; 248
    d26e:	e4 cf       	rjmp	.-56     	; 0xd238 <setup+0xf78>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2972
    }

    ///  nacteni provoznich parametru
    if (init == 5)
    {
      strcpy_P(str1, text_nastaveni_systemu);
    d270:	61 ed       	ldi	r22, 0xD1	; 209
    d272:	75 e1       	ldi	r23, 0x15	; 21
    d274:	8d 2d       	mov	r24, r13
    d276:	9b 2d       	mov	r25, r11
    d278:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2973
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    d27c:	ee 24       	eor	r14, r14
    d27e:	ea 94       	dec	r14
    d280:	fe 2c       	mov	r15, r14
    d282:	00 ee       	ldi	r16, 0xE0	; 224
    d284:	17 e0       	ldi	r17, 0x07	; 7
    d286:	21 e0       	ldi	r18, 0x01	; 1
    d288:	44 e6       	ldi	r20, 0x64	; 100
    d28a:	50 e0       	ldi	r21, 0x00	; 0
    d28c:	6e e1       	ldi	r22, 0x1E	; 30
    d28e:	70 e0       	ldi	r23, 0x00	; 0
    d290:	8d 2d       	mov	r24, r13
    d292:	9b 2d       	mov	r25, r11
    d294:	0e 94 c0 30 	call	0x6180	; 0x6180 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.158]>
    d298:	a6 e1       	ldi	r26, 0x16	; 22
    d29a:	ea 2e       	mov	r14, r26
    d29c:	a0 e1       	ldi	r26, 0x10	; 16
    d29e:	fa 2e       	mov	r15, r26
    d2a0:	0e e6       	ldi	r16, 0x6E	; 110
    d2a2:	10 e0       	ldi	r17, 0x00	; 0
load_setup_network():
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:25

///////////////////////////////////////// MQTT network funkce //////////////////////////////////////////////////////
//
void load_setup_network(void)
{
  for (uint8_t m = 0; m < 6; m++) device.mac[m] = EEPROM.read(device_mac + m);
    d2a4:	c8 01       	movw	r24, r16
    d2a6:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224]>
    d2aa:	d7 01       	movw	r26, r14
    d2ac:	8d 93       	st	X+, r24
    d2ae:	7d 01       	movw	r14, r26
    d2b0:	0f 5f       	subi	r16, 0xFF	; 255
    d2b2:	1f 4f       	sbci	r17, 0xFF	; 255
    d2b4:	04 37       	cpi	r16, 0x74	; 116
    d2b6:	11 05       	cpc	r17, r1
    d2b8:	a9 f7       	brne	.-22     	; 0xd2a4 <setup+0xfe4>
    d2ba:	ec e1       	ldi	r30, 0x1C	; 28
    d2bc:	ee 2e       	mov	r14, r30
    d2be:	e0 e1       	ldi	r30, 0x10	; 16
    d2c0:	fe 2e       	mov	r15, r30
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:26
  for (uint8_t m = 0; m < 4; m++) device.myIP[m] = EEPROM.read(device_ip + m);
    d2c2:	c8 01       	movw	r24, r16
    d2c4:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224]>
    d2c8:	f7 01       	movw	r30, r14
    d2ca:	81 93       	st	Z+, r24
    d2cc:	7f 01       	movw	r14, r30
    d2ce:	0f 5f       	subi	r16, 0xFF	; 255
    d2d0:	1f 4f       	sbci	r17, 0xFF	; 255
    d2d2:	08 37       	cpi	r16, 0x78	; 120
    d2d4:	11 05       	cpc	r17, r1
    d2d6:	a9 f7       	brne	.-22     	; 0xd2c2 <setup+0x1002>
    d2d8:	70 e2       	ldi	r23, 0x20	; 32
    d2da:	e7 2e       	mov	r14, r23
    d2dc:	70 e1       	ldi	r23, 0x10	; 16
    d2de:	f7 2e       	mov	r15, r23
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:27
  for (uint8_t m = 0; m < 4; m++) device.myMASK[m] = EEPROM.read(device_mask + m);
    d2e0:	c8 01       	movw	r24, r16
    d2e2:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224]>
    d2e6:	d7 01       	movw	r26, r14
    d2e8:	8d 93       	st	X+, r24
    d2ea:	7d 01       	movw	r14, r26
    d2ec:	0f 5f       	subi	r16, 0xFF	; 255
    d2ee:	1f 4f       	sbci	r17, 0xFF	; 255
    d2f0:	0c 37       	cpi	r16, 0x7C	; 124
    d2f2:	11 05       	cpc	r17, r1
    d2f4:	a9 f7       	brne	.-22     	; 0xd2e0 <setup+0x1020>
    d2f6:	58 e2       	ldi	r21, 0x28	; 40
    d2f8:	85 2e       	mov	r8, r21
    d2fa:	50 e1       	ldi	r21, 0x10	; 16
    d2fc:	95 2e       	mov	r9, r21
    d2fe:	60 e8       	ldi	r22, 0x80	; 128
    d300:	e6 2e       	mov	r14, r22
    d302:	f1 2c       	mov	r15, r1
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:28
  for (uint8_t m = 0; m < 4; m++) device.myGW[m] = EEPROM.read(device_gw + m);
    d304:	c7 01       	movw	r24, r14
    d306:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224]>
    d30a:	f4 01       	movw	r30, r8
    d30c:	81 93       	st	Z+, r24
    d30e:	4f 01       	movw	r8, r30
    d310:	ff ef       	ldi	r31, 0xFF	; 255
    d312:	ef 1a       	sub	r14, r31
    d314:	ff 0a       	sbc	r15, r31
    d316:	24 e8       	ldi	r18, 0x84	; 132
    d318:	e2 16       	cp	r14, r18
    d31a:	f1 04       	cpc	r15, r1
    d31c:	99 f7       	brne	.-26     	; 0xd304 <setup+0x1044>
    d31e:	44 e2       	ldi	r20, 0x24	; 36
    d320:	84 2e       	mov	r8, r20
    d322:	40 e1       	ldi	r20, 0x10	; 16
    d324:	94 2e       	mov	r9, r20
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:29
  for (uint8_t m = 0; m < 4; m++) device.myDNS[m] = EEPROM.read(device_dns + m);
    d326:	c8 01       	movw	r24, r16
    d328:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224]>
    d32c:	d4 01       	movw	r26, r8
    d32e:	8d 93       	st	X+, r24
    d330:	4d 01       	movw	r8, r26
    d332:	0f 5f       	subi	r16, 0xFF	; 255
    d334:	1f 4f       	sbci	r17, 0xFF	; 255
    d336:	00 38       	cpi	r16, 0x80	; 128
    d338:	11 05       	cpc	r17, r1
    d33a:	a9 f7       	brne	.-22     	; 0xd326 <setup+0x1066>
    d33c:	3c e2       	ldi	r19, 0x2C	; 44
    d33e:	83 2e       	mov	r8, r19
    d340:	30 e1       	ldi	r19, 0x10	; 16
    d342:	93 2e       	mov	r9, r19
    d344:	04 e6       	ldi	r16, 0x64	; 100
    d346:	10 e0       	ldi	r17, 0x00	; 0
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:30
  for (uint8_t m = 0; m < 9; m++) device.nazev[m] = EEPROM.read(device_nazev + m);
    d348:	c8 01       	movw	r24, r16
    d34a:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224]>
    d34e:	f4 01       	movw	r30, r8
    d350:	81 93       	st	Z+, r24
    d352:	4f 01       	movw	r8, r30
    d354:	0f 5f       	subi	r16, 0xFF	; 255
    d356:	1f 4f       	sbci	r17, 0xFF	; 255
    d358:	0d 36       	cpi	r16, 0x6D	; 109
    d35a:	11 05       	cpc	r17, r1
    d35c:	a9 f7       	brne	.-22     	; 0xd348 <setup+0x1088>
    d35e:	06 e3       	ldi	r16, 0x36	; 54
    d360:	10 e1       	ldi	r17, 0x10	; 16
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:31
  for (uint8_t m = 0; m < 4; m++) device.mqtt_server[m] = EEPROM.read(device_mqtt_server + m);
    d362:	c7 01       	movw	r24, r14
    d364:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224]>
    d368:	d8 01       	movw	r26, r16
    d36a:	8d 93       	st	X+, r24
    d36c:	8d 01       	movw	r16, r26
    d36e:	bf ef       	ldi	r27, 0xFF	; 255
    d370:	eb 1a       	sub	r14, r27
    d372:	fb 0a       	sbc	r15, r27
    d374:	e8 e8       	ldi	r30, 0x88	; 136
    d376:	ee 16       	cp	r14, r30
    d378:	f1 04       	cpc	r15, r1
    d37a:	99 f7       	brne	.-26     	; 0xd362 <setup+0x10a2>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:32
  device.mqtt_port = (EEPROM.read(device_mqtt_port) << 8) + EEPROM.read(device_mqtt_port + 1);
    d37c:	88 e8       	ldi	r24, 0x88	; 136
    d37e:	90 e0       	ldi	r25, 0x00	; 0
    d380:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224]>
    d384:	18 2f       	mov	r17, r24
    d386:	89 e8       	ldi	r24, 0x89	; 137
    d388:	90 e0       	ldi	r25, 0x00	; 0
    d38a:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224]>
    d38e:	21 2f       	mov	r18, r17
    d390:	30 e0       	ldi	r19, 0x00	; 0
    d392:	32 2f       	mov	r19, r18
    d394:	22 27       	eor	r18, r18
    d396:	82 0f       	add	r24, r18
    d398:	93 2f       	mov	r25, r19
    d39a:	91 1d       	adc	r25, r1
    d39c:	90 93 3b 10 	sts	0x103B, r25	; 0x80103b <device+0x25>
    d3a0:	80 93 3a 10 	sts	0x103A, r24	; 0x80103a <device+0x24>
    d3a4:	2c e3       	ldi	r18, 0x3C	; 60
    d3a6:	e2 2e       	mov	r14, r18
    d3a8:	20 e1       	ldi	r18, 0x10	; 16
    d3aa:	f2 2e       	mov	r15, r18
    d3ac:	0a e8       	ldi	r16, 0x8A	; 138
    d3ae:	10 e0       	ldi	r17, 0x00	; 0
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:33
  for (uint8_t m = 0; m < 20; m++) device.mqtt_user[m] = EEPROM.read(device_mqtt_user + m);
    d3b0:	c8 01       	movw	r24, r16
    d3b2:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224]>
    d3b6:	d7 01       	movw	r26, r14
    d3b8:	8d 93       	st	X+, r24
    d3ba:	7d 01       	movw	r14, r26
    d3bc:	0f 5f       	subi	r16, 0xFF	; 255
    d3be:	1f 4f       	sbci	r17, 0xFF	; 255
    d3c0:	0e 39       	cpi	r16, 0x9E	; 158
    d3c2:	11 05       	cpc	r17, r1
    d3c4:	a9 f7       	brne	.-22     	; 0xd3b0 <setup+0x10f0>
    d3c6:	80 e5       	ldi	r24, 0x50	; 80
    d3c8:	e8 2e       	mov	r14, r24
    d3ca:	80 e1       	ldi	r24, 0x10	; 16
    d3cc:	f8 2e       	mov	r15, r24
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:34
  for (uint8_t m = 0; m < 20; m++) device.mqtt_key[m] = EEPROM.read(device_mqtt_key + m);
    d3ce:	c8 01       	movw	r24, r16
    d3d0:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224]>
    d3d4:	f7 01       	movw	r30, r14
    d3d6:	81 93       	st	Z+, r24
    d3d8:	7f 01       	movw	r14, r30
    d3da:	0f 5f       	subi	r16, 0xFF	; 255
    d3dc:	1f 4f       	sbci	r17, 0xFF	; 255
    d3de:	02 3b       	cpi	r16, 0xB2	; 178
    d3e0:	11 05       	cpc	r17, r1
    d3e2:	a9 f7       	brne	.-22     	; 0xd3ce <setup+0x110e>
    d3e4:	b4 e6       	ldi	r27, 0x64	; 100
    d3e6:	eb 2e       	mov	r14, r27
    d3e8:	b0 e1       	ldi	r27, 0x10	; 16
    d3ea:	fb 2e       	mov	r15, r27
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:35
  for (uint8_t m = 0; m < 4; m++) device.ntp_server[m] = EEPROM.read(device_ntp_server + m);
    d3ec:	c8 01       	movw	r24, r16
    d3ee:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224]>
    d3f2:	d7 01       	movw	r26, r14
    d3f4:	8d 93       	st	X+, r24
    d3f6:	7d 01       	movw	r14, r26
    d3f8:	0f 5f       	subi	r16, 0xFF	; 255
    d3fa:	1f 4f       	sbci	r17, 0xFF	; 255
    d3fc:	06 3b       	cpi	r16, 0xB6	; 182
    d3fe:	11 05       	cpc	r17, r1
    d400:	a9 f7       	brne	.-22     	; 0xd3ec <setup+0x112c>
    d402:	49 ee       	ldi	r20, 0xE9	; 233
    d404:	5b e0       	ldi	r21, 0x0B	; 11
    d406:	26 e0       	ldi	r18, 0x06	; 6
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2979
      /// nactu nastaveni site
      load_setup_network();
      //// kvuli lepsimu nabehu pocitani nastavim vychozi hodnotu na 2000 = 20 stupnu
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
          status_tds18s20[idx].average_temp[cnt] = 20000;
    d408:	60 e2       	ldi	r22, 0x20	; 32
    d40a:	7e e4       	ldi	r23, 0x4E	; 78
load_setup_network():
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:35
    d40c:	90 e0       	ldi	r25, 0x00	; 0
    d40e:	80 e0       	ldi	r24, 0x00	; 0
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2979
    d410:	fc 01       	movw	r30, r24
    d412:	ee 0f       	add	r30, r30
    d414:	ff 1f       	adc	r31, r31
    d416:	e4 0f       	add	r30, r20
    d418:	f5 1f       	adc	r31, r21
    d41a:	70 87       	std	Z+8, r23	; 0x08
    d41c:	67 83       	std	Z+7, r22	; 0x07
    d41e:	01 96       	adiw	r24, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2978
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      /// nactu nastaveni site
      load_setup_network();
      //// kvuli lepsimu nabehu pocitani nastavim vychozi hodnotu na 2000 = 20 stupnu
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
    d420:	8a 30       	cpi	r24, 0x0A	; 10
    d422:	91 05       	cpc	r25, r1
    d424:	a9 f7       	brne	.-22     	; 0xd410 <setup+0x1150>
    d426:	21 50       	subi	r18, 0x01	; 1
    d428:	42 5e       	subi	r20, 0xE2	; 226
    d42a:	5f 4f       	sbci	r21, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2977
      strcpy_P(str1, text_nastaveni_systemu);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      /// nactu nastaveni site
      load_setup_network();
      //// kvuli lepsimu nabehu pocitani nastavim vychozi hodnotu na 2000 = 20 stupnu
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    d42c:	21 11       	cpse	r18, r1
    d42e:	ee cf       	rjmp	.-36     	; 0xd40c <setup+0x114c>
    d430:	ea ed       	ldi	r30, 0xDA	; 218
    d432:	fb e0       	ldi	r31, 0x0B	; 11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2982
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
          status_tds18s20[idx].average_temp[cnt] = 20000;
      ///
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
        last_output_update[idx] = 0;
    d434:	11 92       	st	Z+, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2981
      //// kvuli lepsimu nabehu pocitani nastavim vychozi hodnotu na 2000 = 20 stupnu
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
          status_tds18s20[idx].average_temp[cnt] = 20000;
      ///
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
    d436:	bb e0       	ldi	r27, 0x0B	; 11
    d438:	e9 3e       	cpi	r30, 0xE9	; 233
    d43a:	fb 07       	cpc	r31, r27
    d43c:	d9 f7       	brne	.-10     	; 0xd434 <setup+0x1174>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2779
  my_lcd.Fill_Screen(WHITE);
  my_lcd.Set_Draw_color(BLUE);
  strcpy_P(str1, term_title);
  show_string(str1, 30, 10, 2, BLUE, WHITE, 0);
  ///
  for (uint8_t init = 0;  init < 16; init++)
    d43e:	a3 94       	inc	r10
    d440:	c2 5c       	subi	r28, 0xC2	; 194
    d442:	de 4f       	sbci	r29, 0xFE	; 254
    d444:	e8 81       	ld	r30, Y
    d446:	f9 81       	ldd	r31, Y+1	; 0x01
    d448:	ce 53       	subi	r28, 0x3E	; 62
    d44a:	d1 40       	sbci	r29, 0x01	; 1
    d44c:	3f 96       	adiw	r30, 0x0f	; 15
    d44e:	c2 5c       	subi	r28, 0xC2	; 194
    d450:	de 4f       	sbci	r29, 0xFE	; 254
    d452:	f9 83       	std	Y+1, r31	; 0x01
    d454:	e8 83       	st	Y, r30
    d456:	ce 53       	subi	r28, 0x3E	; 62
    d458:	d1 40       	sbci	r29, 0x01	; 1
    d45a:	f0 e1       	ldi	r31, 0x10	; 16
    d45c:	af 12       	cpse	r10, r31
    d45e:	78 c9       	rjmp	.-3344   	; 0xc750 <setup+0x490>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3155
        selftest_set_0(SELFTEST_ERR_RTC);
      }
    }

  }
  delay(500);
    d460:	64 ef       	ldi	r22, 0xF4	; 244
    d462:	71 e0       	ldi	r23, 0x01	; 1
    d464:	80 e0       	ldi	r24, 0x00	; 0
    d466:	90 e0       	ldi	r25, 0x00	; 0
    d468:	0e 94 00 12 	call	0x2400	; 0x2400 <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3156
  MenuPrepareStyle();
    d46c:	0e 94 b2 60 	call	0xc164	; 0xc164 <MenuPrepareStyle()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3158

  a2d_run_now = 1;
    d470:	81 e0       	ldi	r24, 0x01	; 1
    d472:	80 93 aa 0c 	sts	0x0CAA, r24	; 0x800caa <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3160

}
    d476:	c3 5b       	subi	r28, 0xB3	; 179
    d478:	de 4f       	sbci	r29, 0xFE	; 254
    d47a:	0f b6       	in	r0, 0x3f	; 63
    d47c:	f8 94       	cli
    d47e:	de bf       	out	0x3e, r29	; 62
    d480:	0f be       	out	0x3f, r0	; 63
    d482:	cd bf       	out	0x3d, r28	; 61
    d484:	df 91       	pop	r29
    d486:	cf 91       	pop	r28
    d488:	1f 91       	pop	r17
    d48a:	0f 91       	pop	r16
    d48c:	ff 90       	pop	r15
    d48e:	ef 90       	pop	r14
    d490:	df 90       	pop	r13
    d492:	cf 90       	pop	r12
    d494:	bf 90       	pop	r11
    d496:	af 90       	pop	r10
    d498:	9f 90       	pop	r9
    d49a:	8f 90       	pop	r8
    d49c:	7f 90       	pop	r7
    d49e:	6f 90       	pop	r6
    d4a0:	5f 90       	pop	r5
    d4a2:	4f 90       	pop	r4
    d4a4:	3f 90       	pop	r3
    d4a6:	2f 90       	pop	r2
    d4a8:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2988
    }
    ///
    /// zobrazeni kalibracnich informaci touchscreenu
    if (init == 6)
    {
      strcpy_P(str1, text_touchscreen);
    d4aa:	65 ec       	ldi	r22, 0xC5	; 197
    d4ac:	75 e1       	ldi	r23, 0x15	; 21
    d4ae:	c1 01       	movw	r24, r2
    d4b0:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2989
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    d4b4:	ee 24       	eor	r14, r14
    d4b6:	ea 94       	dec	r14
    d4b8:	fe 2c       	mov	r15, r14
    d4ba:	00 ee       	ldi	r16, 0xE0	; 224
    d4bc:	17 e0       	ldi	r17, 0x07	; 7
    d4be:	21 e0       	ldi	r18, 0x01	; 1
    d4c0:	4e e6       	ldi	r20, 0x6E	; 110
    d4c2:	50 e0       	ldi	r21, 0x00	; 0
    d4c4:	6e e1       	ldi	r22, 0x1E	; 30
    d4c6:	70 e0       	ldi	r23, 0x00	; 0
    d4c8:	c1 01       	movw	r24, r2
    d4ca:	0e 94 c0 30 	call	0x6180	; 0x6180 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.158]>
Get_Height():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:743
}

//get lcd height
int16_t LCDWIKI_KBV::Get_Height(void) const
{
	return height;
    d4ce:	20 91 cb 11 	lds	r18, 0x11CB	; 0x8011cb <my_lcd+0x14>
    d4d2:	30 91 cc 11 	lds	r19, 0x11CC	; 0x8011cc <my_lcd+0x15>
Get_Width():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:737
}

//get lcd width
int16_t LCDWIKI_KBV::Get_Width(void) const
{
	return width;
    d4d6:	40 91 c9 11 	lds	r20, 0x11C9	; 0x8011c9 <my_lcd+0x12>
    d4da:	50 91 ca 11 	lds	r21, 0x11CA	; 0x8011ca <my_lcd+0x13>
Get_Rotation():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:886
//1  :  90 degree
//2  :  180 degree
//3  :  270 degree
uint8_t LCDWIKI_KBV::Get_Rotation(void) const
{
	return rotation;
    d4de:	90 91 cd 11 	lds	r25, 0x11CD	; 0x8011cd <my_lcd+0x16>
TP_Init():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:53
	y=0xffff;
}

void LCDWIKI_TOUCH::TP_Init(uint8_t r,uint16_t w, uint16_t h)
{
	TDIN_HIGH;
    d4e2:	e0 91 ae 11 	lds	r30, 0x11AE	; 0x8011ae <my_touch+0x15>
    d4e6:	f0 91 af 11 	lds	r31, 0x11AF	; 0x8011af <my_touch+0x16>
    d4ea:	80 81       	ld	r24, Z
    d4ec:	60 91 b5 11 	lds	r22, 0x11B5	; 0x8011b5 <my_touch+0x1c>
    d4f0:	86 2b       	or	r24, r22
    d4f2:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:54
	TCLK_HIGH; 
    d4f4:	e0 91 aa 11 	lds	r30, 0x11AA	; 0x8011aa <my_touch+0x11>
    d4f8:	f0 91 ab 11 	lds	r31, 0x11AB	; 0x8011ab <my_touch+0x12>
    d4fc:	80 81       	ld	r24, Z
    d4fe:	60 91 b3 11 	lds	r22, 0x11B3	; 0x8011b3 <my_touch+0x1a>
    d502:	86 2b       	or	r24, r22
    d504:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:55
	TCS_HIGH;
    d506:	e0 91 a8 11 	lds	r30, 0x11A8	; 0x8011a8 <my_touch+0xf>
    d50a:	f0 91 a9 11 	lds	r31, 0x11A9	; 0x8011a9 <my_touch+0x10>
    d50e:	80 81       	ld	r24, Z
    d510:	60 91 b2 11 	lds	r22, 0x11B2	; 0x8011b2 <my_touch+0x19>
    d514:	86 2b       	or	r24, r22
    d516:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:56
	wid = w;
    d518:	50 93 a2 11 	sts	0x11A2, r21	; 0x8011a2 <my_touch+0x9>
    d51c:	40 93 a1 11 	sts	0x11A1, r20	; 0x8011a1 <my_touch+0x8>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:57
	heig = h;	
    d520:	30 93 a4 11 	sts	0x11A4, r19	; 0x8011a4 <my_touch+0xb>
    d524:	20 93 a3 11 	sts	0x11A3, r18	; 0x8011a3 <my_touch+0xa>
LCD_Set_Rotation():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:351
	return touch_rotation;
}

void LCDWIKI_TOUCH::LCD_Set_Rotation(uint8_t val)
{
	lcd_rotation = val;
    d528:	90 93 a7 11 	sts	0x11A7, r25	; 0x8011a7 <my_touch+0xe>
    d52c:	88 cf       	rjmp	.-240    	; 0xd43e <setup+0x117e>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3015
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
        selftest_clear_0(SELFTEST_ERR_ONEWIRE);
      }
      else
      {
        strcpy(str1, "ERROR");
    d52e:	6e e4       	ldi	r22, 0x4E	; 78
    d530:	77 e0       	ldi	r23, 0x07	; 7
    d532:	8d 2d       	mov	r24, r13
    d534:	9b 2d       	mov	r25, r11
    d536:	0e 94 c8 8c 	call	0x11990	; 0x11990 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3016
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
    d53a:	ee 24       	eor	r14, r14
    d53c:	ea 94       	dec	r14
    d53e:	fe 2c       	mov	r15, r14
    d540:	00 e0       	ldi	r16, 0x00	; 0
    d542:	18 ef       	ldi	r17, 0xF8	; 248
    d544:	21 e0       	ldi	r18, 0x01	; 1
    d546:	48 e7       	ldi	r20, 0x78	; 120
    d548:	50 e0       	ldi	r21, 0x00	; 0
    d54a:	60 ea       	ldi	r22, 0xA0	; 160
    d54c:	70 e0       	ldi	r23, 0x00	; 0
    d54e:	8d 2d       	mov	r24, r13
    d550:	9b 2d       	mov	r25, r11
    d552:	0e 94 c0 30 	call	0x6180	; 0x6180 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.158]>
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2464
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
    d556:	80 91 9d 0c 	lds	r24, 0x0C9D	; 0x800c9d <selftest_data>
    d55a:	84 60       	ori	r24, 0x04	; 4
    d55c:	33 c3       	rjmp	.+1638   	; 0xdbc4 <setup+0x1904>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3022
        selftest_set_0(SELFTEST_ERR_ONEWIRE);
      }
    }
    ///
    /// hledani zarizeni na 1wire sbernici
    if (init == 8)
    d55e:	e8 e0       	ldi	r30, 0x08	; 8
    d560:	ae 12       	cpse	r10, r30
    d562:	98 c0       	rjmp	.+304    	; 0xd694 <setup+0x13d4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3024
    {
      strcpy_P(str1, text_onewire_hledam);
    d564:	69 ea       	ldi	r22, 0xA9	; 169
    d566:	75 e1       	ldi	r23, 0x15	; 21
    d568:	8d 2d       	mov	r24, r13
    d56a:	9b 2d       	mov	r25, r11
    d56c:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3025
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    d570:	ee 24       	eor	r14, r14
    d572:	ea 94       	dec	r14
    d574:	fe 2c       	mov	r15, r14
    d576:	00 ee       	ldi	r16, 0xE0	; 224
    d578:	17 e0       	ldi	r17, 0x07	; 7
    d57a:	21 e0       	ldi	r18, 0x01	; 1
    d57c:	42 e8       	ldi	r20, 0x82	; 130
    d57e:	50 e0       	ldi	r21, 0x00	; 0
    d580:	6e e1       	ldi	r22, 0x1E	; 30
    d582:	70 e0       	ldi	r23, 0x00	; 0
    d584:	8d 2d       	mov	r24, r13
    d586:	9b 2d       	mov	r25, r11
    d588:	0e 94 c0 30 	call	0x6180	; 0x6180 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.158]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3026
      Global_HWwirenum = 0;
    d58c:	10 92 bd 0b 	sts	0x0BBD, r1	; 0x800bbd <Global_HWwirenum>
one_hw_search_device():
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:221
//*************************************************************************************************************//
/////vyhledani zarizeni na hw 1wire sbernici////////
uint8_t one_hw_search_device(uint8_t idx)
{
  uint8_t r;
  ds2482_address[idx].HWwirenum = 0;
    d590:	10 92 cc 09 	sts	0x09CC, r1	; 0x8009cc <ds2482_address+0x1>
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:222
  ds2482init(ds2482_address[idx].i2c_addr);
    d594:	10 91 cb 09 	lds	r17, 0x09CB	; 0x8009cb <ds2482_address>
ds2482init():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:186
 * Initialize TWI, this routine is designed for 8Mhz operation.
 */
uint8_t ds2482init(uint8_t addr)
{

	Wire.beginTransmission(addr);
    d598:	81 2f       	mov	r24, r17
    d59a:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <TwoWire::beginTransmission(unsigned char) [clone .constprop.181]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:187
        if (Wire.endTransmission() == I2C_ERROR_OK)
    d59e:	86 ef       	ldi	r24, 0xF6	; 246
    d5a0:	91 e1       	ldi	r25, 0x11	; 17
    d5a2:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <TwoWire::endTransmission()>
    d5a6:	81 11       	cpse	r24, r1
    d5a8:	10 c0       	rjmp	.+32     	; 0xd5ca <setup+0x130a>
ds2482setConfig():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:352
	//	return DS2482_ERR_WRITE;

	return DS2482_ERR_OK;
	*/

        Wire.beginTransmission(address);
    d5aa:	81 2f       	mov	r24, r17
    d5ac:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <TwoWire::beginTransmission(unsigned char) [clone .constprop.181]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:353
        Wire.write(DS2482_C_WCFG);
    d5b0:	82 ed       	ldi	r24, 0xD2	; 210
    d5b2:	90 e0       	ldi	r25, 0x00	; 0
    d5b4:	0e 94 76 15 	call	0x2aec	; 0x2aec <TwoWire::write(int) [clone .constprop.116]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:354
        Wire.write(config);
    d5b8:	60 e0       	ldi	r22, 0x00	; 0
    d5ba:	86 ef       	ldi	r24, 0xF6	; 246
    d5bc:	91 e1       	ldi	r25, 0x11	; 17
    d5be:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:355
        if (Wire.endTransmission() == I2C_ERROR_OK)
    d5c2:	86 ef       	ldi	r24, 0xF6	; 246
    d5c4:	91 e1       	ldi	r25, 0x11	; 17
    d5c6:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <TwoWire::endTransmission()>
one_hw_search_device():
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:223
  ds2482reset(ds2482_address[idx].i2c_addr);
    d5ca:	81 2f       	mov	r24, r17
    d5cc:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <ds2482reset(unsigned char)>
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:224
  ds2482owReset(ds2482_address[idx].i2c_addr);
    d5d0:	81 2f       	mov	r24, r17
    d5d2:	0e 94 b1 32 	call	0x6562	; 0x6562 <ds2482owReset(unsigned char)>
owMatchFirst():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:104
 *
 * Can return anything owMatchLast returns
 */
uint8_t owMatchFirst(uint8_t ds2482_address, uint8_t *rom)
{
	lastDiscrepancy = lastDevice = 0;
    d5d6:	10 92 d7 0e 	sts	0x0ED7, r1	; 0x800ed7 <lastDevice>
    d5da:	10 92 ce 0e 	sts	0x0ECE, r1	; 0x800ece <lastDiscrepancy>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:105
	return owMatchNext(ds2482_address, rom);
    d5de:	81 2f       	mov	r24, r17
    d5e0:	0e 94 e7 32 	call	0x65ce	; 0x65ce <owMatchNext(unsigned char, unsigned char*) [clone .constprop.114]>
one_hw_search_device():
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:233
  }
  if (r) {
    /*jina chyba*/
  }
  ///
  if (r == DS2482_ERR_OK)
    d5e4:	81 11       	cpse	r24, r1
    d5e6:	33 c0       	rjmp	.+102    	; 0xd64e <setup+0x138e>
    d5e8:	3b e0       	ldi	r19, 0x0B	; 11
    d5ea:	e3 2e       	mov	r14, r19
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:238
    while (1) {
      if (ds2482_address[idx].HWwirenum > HW_ONEWIRE_MAXDEVICES - 1) break;
      for (uint8_t a = 0; a < 8; a++)  w_rom[Global_HWwirenum].rom[a] = tmp_rom[a];
      w_rom[Global_HWwirenum].assigned_ds2482 = idx;
      w_rom[Global_HWwirenum].used = 1;
    d5ec:	cc 24       	eor	r12, r12
    d5ee:	c3 94       	inc	r12
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:235
    /*jina chyba*/
  }
  ///
  if (r == DS2482_ERR_OK)
    while (1) {
      if (ds2482_address[idx].HWwirenum > HW_ONEWIRE_MAXDEVICES - 1) break;
    d5f0:	f0 90 cc 09 	lds	r15, 0x09CC	; 0x8009cc <ds2482_address+0x1>
    d5f4:	00 91 bd 0b 	lds	r16, 0x0BBD	; 0x800bbd <Global_HWwirenum>
    d5f8:	20 2f       	mov	r18, r16
    d5fa:	30 e0       	ldi	r19, 0x00	; 0
    d5fc:	f5 e0       	ldi	r31, 0x05	; 5
    d5fe:	ff 15       	cp	r31, r15
    d600:	30 f1       	brcs	.+76     	; 0xd64e <setup+0x138e>
    d602:	af ec       	ldi	r26, 0xCF	; 207
    d604:	be e0       	ldi	r27, 0x0E	; 14
    d606:	0e 9d       	mul	r16, r14
    d608:	a0 01       	movw	r20, r0
    d60a:	11 24       	eor	r1, r1
    d60c:	90 e0       	ldi	r25, 0x00	; 0
    d60e:	80 e0       	ldi	r24, 0x00	; 0
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:236
      for (uint8_t a = 0; a < 8; a++)  w_rom[Global_HWwirenum].rom[a] = tmp_rom[a];
    d610:	6d 91       	ld	r22, X+
    d612:	fc 01       	movw	r30, r24
    d614:	e4 0f       	add	r30, r20
    d616:	f5 1f       	adc	r31, r21
    d618:	e5 58       	subi	r30, 0x85	; 133
    d61a:	f4 4f       	sbci	r31, 0xF4	; 244
    d61c:	60 83       	st	Z, r22
    d61e:	01 96       	adiw	r24, 0x01	; 1
    d620:	88 30       	cpi	r24, 0x08	; 8
    d622:	91 05       	cpc	r25, r1
    d624:	a9 f7       	brne	.-22     	; 0xd610 <setup+0x1350>
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:237
      w_rom[Global_HWwirenum].assigned_ds2482 = idx;
    d626:	e2 9e       	mul	r14, r18
    d628:	f0 01       	movw	r30, r0
    d62a:	e3 9e       	mul	r14, r19
    d62c:	f0 0d       	add	r31, r0
    d62e:	11 24       	eor	r1, r1
    d630:	e5 58       	subi	r30, 0x85	; 133
    d632:	f4 4f       	sbci	r31, 0xF4	; 244
    d634:	10 86       	std	Z+8, r1	; 0x08
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:238
      w_rom[Global_HWwirenum].used = 1;
    d636:	c1 86       	std	Z+9, r12	; 0x09
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:239
      r = owMatchNext(ds2482_address[idx].i2c_addr, tmp_rom);
    d638:	81 2f       	mov	r24, r17
    d63a:	0e 94 e7 32 	call	0x65ce	; 0x65ce <owMatchNext(unsigned char, unsigned char*) [clone .constprop.114]>
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:241
      /// celkovy pocet detekovanych roms
      ds2482_address[idx].HWwirenum++;
    d63e:	f3 94       	inc	r15
    d640:	f0 92 cc 09 	sts	0x09CC, r15	; 0x8009cc <ds2482_address+0x1>
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:242
      Global_HWwirenum++;
    d644:	0f 5f       	subi	r16, 0xFF	; 255
    d646:	00 93 bd 0b 	sts	0x0BBD, r16	; 0x800bbd <Global_HWwirenum>
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:243
      if (r == DS2482_ERR_NO_DEVICE)
    d64a:	85 30       	cpi	r24, 0x05	; 5
    d64c:	89 f6       	brne	.-94     	; 0xd5f0 <setup+0x1330>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3028
      one_hw_search_device(0);
      tds_update_associate();
    d64e:	0e 94 4a 48 	call	0x9094	; 0x9094 <tds_update_associate()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3029
      strcpy (str1, "Nalezeno: ");
    d652:	64 e5       	ldi	r22, 0x54	; 84
    d654:	77 e0       	ldi	r23, 0x07	; 7
    d656:	8d 2d       	mov	r24, r13
    d658:	9b 2d       	mov	r25, r11
    d65a:	0e 94 c8 8c 	call	0x11990	; 0x11990 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3030
      itoa(Global_HWwirenum, str2, 10);
    d65e:	80 91 bd 0b 	lds	r24, 0x0BBD	; 0x800bbd <Global_HWwirenum>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    d662:	4a e0       	ldi	r20, 0x0A	; 10
    d664:	be 01       	movw	r22, r28
    d666:	68 57       	subi	r22, 0x78	; 120
    d668:	7f 4f       	sbci	r23, 0xFF	; 255
    d66a:	90 e0       	ldi	r25, 0x00	; 0
    d66c:	0e 94 7f 80 	call	0x100fe	; 0x100fe <__itoa_ncheck>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3031
      strcat(str1, str2);
    d670:	be 01       	movw	r22, r28
    d672:	68 57       	subi	r22, 0x78	; 120
    d674:	7f 4f       	sbci	r23, 0xFF	; 255
    d676:	8d 2d       	mov	r24, r13
    d678:	9b 2d       	mov	r25, r11
    d67a:	0e 94 a9 8c 	call	0x11952	; 0x11952 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3032
      show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    d67e:	ee 24       	eor	r14, r14
    d680:	ea 94       	dec	r14
    d682:	fe 2c       	mov	r15, r14
    d684:	00 ee       	ldi	r16, 0xE0	; 224
    d686:	17 e0       	ldi	r17, 0x07	; 7
    d688:	21 e0       	ldi	r18, 0x01	; 1
    d68a:	42 e8       	ldi	r20, 0x82	; 130
    d68c:	50 e0       	ldi	r21, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3080
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
      else
      {
        strcpy(str1, "OK");
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    d68e:	60 ea       	ldi	r22, 0xA0	; 160
    d690:	70 e0       	ldi	r23, 0x00	; 0
    d692:	d7 cd       	rjmp	.-1106   	; 0xd242 <setup+0xf82>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3036
      strcat(str1, str2);
      show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    }
    ///
    /// inicializace wiznet w5500
    if (init == 9)
    d694:	29 e0       	ldi	r18, 0x09	; 9
    d696:	a2 12       	cpse	r10, r18
    d698:	98 c2       	rjmp	.+1328   	; 0xdbca <setup+0x190a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3038
    {
      digitalWrite(ETH_RST, HIGH);
    d69a:	61 e0       	ldi	r22, 0x01	; 1
    d69c:	86 e0       	ldi	r24, 0x06	; 6
    d69e:	0e 94 3a 11 	call	0x2274	; 0x2274 <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3039
      delay(10);
    d6a2:	6a e0       	ldi	r22, 0x0A	; 10
    d6a4:	70 e0       	ldi	r23, 0x00	; 0
    d6a6:	80 e0       	ldi	r24, 0x00	; 0
    d6a8:	90 e0       	ldi	r25, 0x00	; 0
    d6aa:	0e 94 00 12 	call	0x2400	; 0x2400 <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3040
      digitalWrite(ETH_RST, LOW);
    d6ae:	60 e0       	ldi	r22, 0x00	; 0
    d6b0:	86 e0       	ldi	r24, 0x06	; 6
    d6b2:	0e 94 3a 11 	call	0x2274	; 0x2274 <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3041
      delay(10);
    d6b6:	6a e0       	ldi	r22, 0x0A	; 10
    d6b8:	70 e0       	ldi	r23, 0x00	; 0
    d6ba:	80 e0       	ldi	r24, 0x00	; 0
    d6bc:	90 e0       	ldi	r25, 0x00	; 0
    d6be:	0e 94 00 12 	call	0x2400	; 0x2400 <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3042
      digitalWrite(ETH_RST, HIGH);
    d6c2:	61 e0       	ldi	r22, 0x01	; 1
    d6c4:	86 e0       	ldi	r24, 0x06	; 6
    d6c6:	0e 94 3a 11 	call	0x2274	; 0x2274 <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3043
      delay(100);
    d6ca:	64 e6       	ldi	r22, 0x64	; 100
    d6cc:	70 e0       	ldi	r23, 0x00	; 0
    d6ce:	80 e0       	ldi	r24, 0x00	; 0
    d6d0:	90 e0       	ldi	r25, 0x00	; 0
    d6d2:	0e 94 00 12 	call	0x2400	; 0x2400 <delay>
_ZN13EthernetClass4initEh():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.h:35

  static uint8_t _state[MAX_SOCK_NUM];
  static uint16_t _server_port[MAX_SOCK_NUM];

  EthernetClass() { _dhcp = NULL; w5500_cspin = 10; }
  void init(uint8_t _cspin = 10) { w5500_cspin = _cspin; }
    d6d6:	8f e0       	ldi	r24, 0x0F	; 15
    d6d8:	80 93 fb 0f 	sts	0x0FFB, r24	; 0x800ffb <Ethernet+0xc>
__base_ctor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:41
IPAddress::IPAddress(uint32_t address)
{
    _address.dword = address;
}

IPAddress::IPAddress(const uint8_t *address)
    d6dc:	82 ee       	ldi	r24, 0xE2	; 226
    d6de:	92 e0       	ldi	r25, 0x02	; 2
    d6e0:	ce 5c       	subi	r28, 0xCE	; 206
    d6e2:	de 4f       	sbci	r29, 0xFE	; 254
    d6e4:	99 83       	std	Y+1, r25	; 0x01
    d6e6:	88 83       	st	Y, r24
    d6e8:	c2 53       	subi	r28, 0x32	; 50
    d6ea:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:43
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
    d6ec:	24 e0       	ldi	r18, 0x04	; 4
    d6ee:	e0 e2       	ldi	r30, 0x20	; 32
    d6f0:	f0 e1       	ldi	r31, 0x10	; 16
    d6f2:	cc 5b       	subi	r28, 0xBC	; 188
    d6f4:	de 4f       	sbci	r29, 0xFE	; 254
    d6f6:	a8 81       	ld	r26, Y
    d6f8:	b9 81       	ldd	r27, Y+1	; 0x01
    d6fa:	c4 54       	subi	r28, 0x44	; 68
    d6fc:	d1 40       	sbci	r29, 0x01	; 1
    d6fe:	01 90       	ld	r0, Z+
    d700:	0d 92       	st	X+, r0
    d702:	2a 95       	dec	r18
    d704:	e1 f7       	brne	.-8      	; 0xd6fe <setup+0x143e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:41
IPAddress::IPAddress(uint32_t address)
{
    _address.dword = address;
}

IPAddress::IPAddress(const uint8_t *address)
    d706:	c4 5d       	subi	r28, 0xD4	; 212
    d708:	de 4f       	sbci	r29, 0xFE	; 254
    d70a:	99 83       	std	Y+1, r25	; 0x01
    d70c:	88 83       	st	Y, r24
    d70e:	cc 52       	subi	r28, 0x2C	; 44
    d710:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:43
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
    d712:	24 e0       	ldi	r18, 0x04	; 4
    d714:	e8 e2       	ldi	r30, 0x28	; 40
    d716:	f0 e1       	ldi	r31, 0x10	; 16
    d718:	ca 5b       	subi	r28, 0xBA	; 186
    d71a:	de 4f       	sbci	r29, 0xFE	; 254
    d71c:	a8 81       	ld	r26, Y
    d71e:	b9 81       	ldd	r27, Y+1	; 0x01
    d720:	c6 54       	subi	r28, 0x46	; 70
    d722:	d1 40       	sbci	r29, 0x01	; 1
    d724:	01 90       	ld	r0, Z+
    d726:	0d 92       	st	X+, r0
    d728:	2a 95       	dec	r18
    d72a:	e1 f7       	brne	.-8      	; 0xd724 <setup+0x1464>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:41
IPAddress::IPAddress(uint32_t address)
{
    _address.dword = address;
}

IPAddress::IPAddress(const uint8_t *address)
    d72c:	ca 5d       	subi	r28, 0xDA	; 218
    d72e:	de 4f       	sbci	r29, 0xFE	; 254
    d730:	99 83       	std	Y+1, r25	; 0x01
    d732:	88 83       	st	Y, r24
    d734:	c6 52       	subi	r28, 0x26	; 38
    d736:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:43
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
    d738:	24 e0       	ldi	r18, 0x04	; 4
    d73a:	e4 e2       	ldi	r30, 0x24	; 36
    d73c:	f0 e1       	ldi	r31, 0x10	; 16
    d73e:	c8 5b       	subi	r28, 0xB8	; 184
    d740:	de 4f       	sbci	r29, 0xFE	; 254
    d742:	a8 81       	ld	r26, Y
    d744:	b9 81       	ldd	r27, Y+1	; 0x01
    d746:	c8 54       	subi	r28, 0x48	; 72
    d748:	d1 40       	sbci	r29, 0x01	; 1
    d74a:	01 90       	ld	r0, Z+
    d74c:	0d 92       	st	X+, r0
    d74e:	2a 95       	dec	r18
    d750:	e1 f7       	brne	.-8      	; 0xd74a <setup+0x148a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:41
IPAddress::IPAddress(uint32_t address)
{
    _address.dword = address;
}

IPAddress::IPAddress(const uint8_t *address)
    d752:	c2 52       	subi	r28, 0x22	; 34
    d754:	df 4f       	sbci	r29, 0xFF	; 255
    d756:	99 83       	std	Y+1, r25	; 0x01
    d758:	88 83       	st	Y, r24
    d75a:	ce 5d       	subi	r28, 0xDE	; 222
    d75c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:43
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
    d75e:	84 e0       	ldi	r24, 0x04	; 4
    d760:	ec e1       	ldi	r30, 0x1C	; 28
    d762:	f0 e1       	ldi	r31, 0x10	; 16
    d764:	c6 5b       	subi	r28, 0xB6	; 182
    d766:	de 4f       	sbci	r29, 0xFE	; 254
    d768:	a8 81       	ld	r26, Y
    d76a:	b9 81       	ldd	r27, Y+1	; 0x01
    d76c:	ca 54       	subi	r28, 0x4A	; 74
    d76e:	d1 40       	sbci	r29, 0x01	; 1
    d770:	01 90       	ld	r0, Z+
    d772:	0d 92       	st	X+, r0
    d774:	8a 95       	dec	r24
    d776:	e1 f7       	brne	.-8      	; 0xd770 <setup+0x14b0>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3045
      Ethernet.init(ETH_CS);
      Ethernet.begin(device.mac, device.myIP, device.myDNS, device.myGW, device.myMASK);
    d778:	9e 01       	movw	r18, r28
    d77a:	2e 5c       	subi	r18, 0xCE	; 206
    d77c:	3e 4f       	sbci	r19, 0xFE	; 254
    d77e:	ae 01       	movw	r20, r28
    d780:	44 5d       	subi	r20, 0xD4	; 212
    d782:	5e 4f       	sbci	r21, 0xFE	; 254
    d784:	be 01       	movw	r22, r28
    d786:	6a 5d       	subi	r22, 0xDA	; 218
    d788:	7e 4f       	sbci	r23, 0xFE	; 254
    d78a:	ce 01       	movw	r24, r28
    d78c:	82 52       	subi	r24, 0x22	; 34
    d78e:	9f 4f       	sbci	r25, 0xFF	; 255
    d790:	0e 94 cc 1c 	call	0x3998	; 0x3998 <EthernetClass::begin(unsigned char*, IPAddress, IPAddress, IPAddress, IPAddress) [clone .constprop.117]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3046
      strcpy_P(str1, text_ethernet_rozhrani);
    d794:	67 e9       	ldi	r22, 0x97	; 151
    d796:	75 e1       	ldi	r23, 0x15	; 21
    d798:	8d 2d       	mov	r24, r13
    d79a:	9b 2d       	mov	r25, r11
    d79c:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3047
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    d7a0:	ee 24       	eor	r14, r14
    d7a2:	ea 94       	dec	r14
    d7a4:	fe 2c       	mov	r15, r14
    d7a6:	00 ee       	ldi	r16, 0xE0	; 224
    d7a8:	17 e0       	ldi	r17, 0x07	; 7
    d7aa:	21 e0       	ldi	r18, 0x01	; 1
    d7ac:	4c e8       	ldi	r20, 0x8C	; 140
    d7ae:	50 e0       	ldi	r21, 0x00	; 0
    d7b0:	6e e1       	ldi	r22, 0x1E	; 30
    d7b2:	70 e0       	ldi	r23, 0x00	; 0
    d7b4:	8d 2d       	mov	r24, r13
    d7b6:	9b 2d       	mov	r25, r11
    d7b8:	0e 94 c0 30 	call	0x6180	; 0x6180 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.158]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3048
      delay(100);
    d7bc:	64 e6       	ldi	r22, 0x64	; 100
    d7be:	70 e0       	ldi	r23, 0x00	; 0
    d7c0:	80 e0       	ldi	r24, 0x00	; 0
    d7c2:	90 e0       	ldi	r25, 0x00	; 0
    d7c4:	0e 94 00 12 	call	0x2400	; 0x2400 <delay>
    d7c8:	3a ce       	rjmp	.-908    	; 0xd43e <setup+0x117e>
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2464
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
    d7ca:	90 62       	ori	r25, 0x20	; 32
    d7cc:	90 93 9d 0c 	sts	0x0C9D, r25	; 0x800c9d <selftest_data>
    d7d0:	3d c2       	rjmp	.+1146   	; 0xdc4c <setup+0x198c>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3079
        strcpy(str1, "ERROR");
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
      else
      {
        strcpy(str1, "OK");
    d7d2:	6b e4       	ldi	r22, 0x4B	; 75
    d7d4:	77 e0       	ldi	r23, 0x07	; 7
    d7d6:	8d 2d       	mov	r24, r13
    d7d8:	9b 2d       	mov	r25, r11
    d7da:	0e 94 c8 8c 	call	0x11990	; 0x11990 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3080
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    d7de:	ee 24       	eor	r14, r14
    d7e0:	ea 94       	dec	r14
    d7e2:	fe 2c       	mov	r15, r14
    d7e4:	00 ee       	ldi	r16, 0xE0	; 224
    d7e6:	17 e0       	ldi	r17, 0x07	; 7
    d7e8:	56 c2       	rjmp	.+1196   	; 0xdc96 <setup+0x19d6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3086
      }

    }
    ///
    /// inicializace rest api rozhrani
    if (init == 11)
    d7ea:	8b e0       	ldi	r24, 0x0B	; 11
    d7ec:	a8 12       	cpse	r10, r24
    d7ee:	0f c0       	rjmp	.+30     	; 0xd80e <setup+0x154e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3088
    {
      strcpy_P(str1, text_rest_rozhrani);
    d7f0:	68 e6       	ldi	r22, 0x68	; 104
    d7f2:	75 e1       	ldi	r23, 0x15	; 21
    d7f4:	8d 2d       	mov	r24, r13
    d7f6:	9b 2d       	mov	r25, r11
    d7f8:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3089
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    d7fc:	ee 24       	eor	r14, r14
    d7fe:	ea 94       	dec	r14
    d800:	fe 2c       	mov	r15, r14
    d802:	00 ee       	ldi	r16, 0xE0	; 224
    d804:	17 e0       	ldi	r17, 0x07	; 7
    d806:	21 e0       	ldi	r18, 0x01	; 1
    d808:	40 ea       	ldi	r20, 0xA0	; 160
    d80a:	50 e0       	ldi	r21, 0x00	; 0
    d80c:	18 cd       	rjmp	.-1488   	; 0xd23e <setup+0xf7e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3093
    }
    ///
    /// inicializace nrf
    if (init == 12)
    d80e:	9c e0       	ldi	r25, 0x0C	; 12
    d810:	a9 12       	cpse	r10, r25
    d812:	45 c2       	rjmp	.+1162   	; 0xdc9e <setup+0x19de>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3095
    {
      strcpy_P(str1, text_nrf_rozhrani);
    d814:	6b e5       	ldi	r22, 0x5B	; 91
    d816:	75 e1       	ldi	r23, 0x15	; 21
    d818:	8d 2d       	mov	r24, r13
    d81a:	9b 2d       	mov	r25, r11
    d81c:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3096
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    d820:	ee 24       	eor	r14, r14
    d822:	ea 94       	dec	r14
    d824:	fe 2c       	mov	r15, r14
    d826:	00 ee       	ldi	r16, 0xE0	; 224
    d828:	17 e0       	ldi	r17, 0x07	; 7
    d82a:	21 e0       	ldi	r18, 0x01	; 1
    d82c:	4a ea       	ldi	r20, 0xAA	; 170
    d82e:	50 e0       	ldi	r21, 0x00	; 0
    d830:	06 cd       	rjmp	.-1524   	; 0xd23e <setup+0xf7e>
Initialize():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:194
void PID::Initialize()
{
   outputSum = *myOutput;
   lastInput = *myInput;
   if(outputSum > outMax) outputSum = outMax;
   else if(outputSum < outMin) outputSum = outMin;
    d832:	d8 01       	movw	r26, r16
    d834:	d2 96       	adiw	r26, 0x32	; 50
    d836:	8d 91       	ld	r24, X+
    d838:	9d 91       	ld	r25, X+
    d83a:	0d 90       	ld	r0, X+
    d83c:	bc 91       	ld	r27, X
    d83e:	a0 2d       	mov	r26, r0
    d840:	c8 5c       	subi	r28, 0xC8	; 200
    d842:	de 4f       	sbci	r29, 0xFE	; 254
    d844:	88 83       	st	Y, r24
    d846:	99 83       	std	Y+1, r25	; 0x01
    d848:	aa 83       	std	Y+2, r26	; 0x02
    d84a:	bb 83       	std	Y+3, r27	; 0x03
    d84c:	c8 53       	subi	r28, 0x38	; 56
    d84e:	d1 40       	sbci	r29, 0x01	; 1
    d850:	9c 01       	movw	r18, r24
    d852:	ad 01       	movw	r20, r26
    d854:	c3 01       	movw	r24, r6
    d856:	b2 01       	movw	r22, r4
    d858:	0e 94 bf 88 	call	0x1117e	; 0x1117e <__cmpsf2>
    d85c:	87 fd       	sbrc	r24, 7
    d85e:	0e c3       	rjmp	.+1564   	; 0xde7c <setup+0x1bbc>
SetMode():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:182
    bool newAuto = (Mode == AUTOMATIC);
    if(newAuto && !inAuto)
    {  /*we just went from manual to auto*/
        PID::Initialize();
    }
    inAuto = newAuto;
    d860:	d8 01       	movw	r26, r16
    d862:	da 96       	adiw	r26, 0x3a	; 58
    d864:	cc 92       	st	X, r12
SetOutputLimits():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:157
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   if(Min >= Max) return;
   outMin = Min;
    d866:	f8 01       	movw	r30, r16
    d868:	12 aa       	std	Z+50, r1	; 0x32
    d86a:	13 aa       	std	Z+51, r1	; 0x33
    d86c:	14 aa       	std	Z+52, r1	; 0x34
    d86e:	15 aa       	std	Z+53, r1	; 0x35
/home/saric/Arduino/libraries/PID/PID_v1.cpp:158
   outMax = Max;
    d870:	80 e0       	ldi	r24, 0x00	; 0
    d872:	90 e0       	ldi	r25, 0x00	; 0
    d874:	af e7       	ldi	r26, 0x7F	; 127
    d876:	b3 e4       	ldi	r27, 0x43	; 67
    d878:	86 ab       	std	Z+54, r24	; 0x36
    d87a:	97 ab       	std	Z+55, r25	; 0x37
    d87c:	a0 af       	std	Z+56, r26	; 0x38
    d87e:	b1 af       	std	Z+57, r27	; 0x39
/home/saric/Arduino/libraries/PID/PID_v1.cpp:162

   if(inAuto)
   {
	   if(*myOutput > outMax) *myOutput = outMax;
    d880:	26 8d       	ldd	r18, Z+30	; 0x1e
    d882:	37 8d       	ldd	r19, Z+31	; 0x1f
    d884:	c8 5c       	subi	r28, 0xC8	; 200
    d886:	de 4f       	sbci	r29, 0xFE	; 254
    d888:	39 83       	std	Y+1, r19	; 0x01
    d88a:	28 83       	st	Y, r18
    d88c:	c8 53       	subi	r28, 0x38	; 56
    d88e:	d1 40       	sbci	r29, 0x01	; 1
    d890:	d9 01       	movw	r26, r18
    d892:	4d 90       	ld	r4, X+
    d894:	5d 90       	ld	r5, X+
    d896:	6d 90       	ld	r6, X+
    d898:	7c 90       	ld	r7, X
    d89a:	20 e0       	ldi	r18, 0x00	; 0
    d89c:	30 e0       	ldi	r19, 0x00	; 0
    d89e:	4f e7       	ldi	r20, 0x7F	; 127
    d8a0:	53 e4       	ldi	r21, 0x43	; 67
    d8a2:	c3 01       	movw	r24, r6
    d8a4:	b2 01       	movw	r22, r4
    d8a6:	0e 94 a1 8b 	call	0x11742	; 0x11742 <__gesf2>
    d8aa:	18 16       	cp	r1, r24
    d8ac:	94 f5       	brge	.+100    	; 0xd912 <setup+0x1652>
    d8ae:	80 e0       	ldi	r24, 0x00	; 0
    d8b0:	90 e0       	ldi	r25, 0x00	; 0
    d8b2:	af e7       	ldi	r26, 0x7F	; 127
    d8b4:	b3 e4       	ldi	r27, 0x43	; 67
    d8b6:	c8 5c       	subi	r28, 0xC8	; 200
    d8b8:	de 4f       	sbci	r29, 0xFE	; 254
    d8ba:	e8 81       	ld	r30, Y
    d8bc:	f9 81       	ldd	r31, Y+1	; 0x01
    d8be:	c8 53       	subi	r28, 0x38	; 56
    d8c0:	d1 40       	sbci	r29, 0x01	; 1
    d8c2:	80 83       	st	Z, r24
    d8c4:	91 83       	std	Z+1, r25	; 0x01
    d8c6:	a2 83       	std	Z+2, r26	; 0x02
    d8c8:	b3 83       	std	Z+3, r27	; 0x03
/home/saric/Arduino/libraries/PID/PID_v1.cpp:165
	   else if(*myOutput < outMin) *myOutput = outMin;

	   if(outputSum > outMax) outputSum= outMax;
    d8ca:	d8 01       	movw	r26, r16
    d8cc:	96 96       	adiw	r26, 0x26	; 38
    d8ce:	8d 91       	ld	r24, X+
    d8d0:	9d 91       	ld	r25, X+
    d8d2:	0d 90       	ld	r0, X+
    d8d4:	bc 91       	ld	r27, X
    d8d6:	a0 2d       	mov	r26, r0
    d8d8:	c8 5c       	subi	r28, 0xC8	; 200
    d8da:	de 4f       	sbci	r29, 0xFE	; 254
    d8dc:	88 83       	st	Y, r24
    d8de:	99 83       	std	Y+1, r25	; 0x01
    d8e0:	aa 83       	std	Y+2, r26	; 0x02
    d8e2:	bb 83       	std	Y+3, r27	; 0x03
    d8e4:	c8 53       	subi	r28, 0x38	; 56
    d8e6:	d1 40       	sbci	r29, 0x01	; 1
    d8e8:	f8 01       	movw	r30, r16
    d8ea:	46 a8       	ldd	r4, Z+54	; 0x36
    d8ec:	57 a8       	ldd	r5, Z+55	; 0x37
    d8ee:	60 ac       	ldd	r6, Z+56	; 0x38
    d8f0:	71 ac       	ldd	r7, Z+57	; 0x39
    d8f2:	a3 01       	movw	r20, r6
    d8f4:	92 01       	movw	r18, r4
    d8f6:	bc 01       	movw	r22, r24
    d8f8:	cd 01       	movw	r24, r26
    d8fa:	0e 94 a1 8b 	call	0x11742	; 0x11742 <__gesf2>
    d8fe:	18 16       	cp	r1, r24
    d900:	ec f4       	brge	.+58     	; 0xd93c <setup+0x167c>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:166
	   else if(outputSum < outMin) outputSum= outMin;
    d902:	d8 01       	movw	r26, r16
    d904:	96 96       	adiw	r26, 0x26	; 38
    d906:	4d 92       	st	X+, r4
    d908:	5d 92       	st	X+, r5
    d90a:	6d 92       	st	X+, r6
    d90c:	7c 92       	st	X, r7
    d90e:	99 97       	sbiw	r26, 0x29	; 41
    d910:	28 c0       	rjmp	.+80     	; 0xd962 <setup+0x16a2>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:163
   outMax = Max;

   if(inAuto)
   {
	   if(*myOutput > outMax) *myOutput = outMax;
	   else if(*myOutput < outMin) *myOutput = outMin;
    d912:	20 e0       	ldi	r18, 0x00	; 0
    d914:	30 e0       	ldi	r19, 0x00	; 0
    d916:	a9 01       	movw	r20, r18
    d918:	c3 01       	movw	r24, r6
    d91a:	b2 01       	movw	r22, r4
    d91c:	0e 94 bf 88 	call	0x1117e	; 0x1117e <__cmpsf2>
    d920:	87 ff       	sbrs	r24, 7
    d922:	d3 cf       	rjmp	.-90     	; 0xd8ca <setup+0x160a>
    d924:	c8 5c       	subi	r28, 0xC8	; 200
    d926:	de 4f       	sbci	r29, 0xFE	; 254
    d928:	a8 81       	ld	r26, Y
    d92a:	b9 81       	ldd	r27, Y+1	; 0x01
    d92c:	c8 53       	subi	r28, 0x38	; 56
    d92e:	d1 40       	sbci	r29, 0x01	; 1
    d930:	1d 92       	st	X+, r1
    d932:	1d 92       	st	X+, r1
    d934:	1d 92       	st	X+, r1
    d936:	1c 92       	st	X, r1
    d938:	13 97       	sbiw	r26, 0x03	; 3
    d93a:	c7 cf       	rjmp	.-114    	; 0xd8ca <setup+0x160a>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:166

	   if(outputSum > outMax) outputSum= outMax;
	   else if(outputSum < outMin) outputSum= outMin;
    d93c:	f8 01       	movw	r30, r16
    d93e:	42 a8       	ldd	r4, Z+50	; 0x32
    d940:	53 a8       	ldd	r5, Z+51	; 0x33
    d942:	64 a8       	ldd	r6, Z+52	; 0x34
    d944:	75 a8       	ldd	r7, Z+53	; 0x35
    d946:	a3 01       	movw	r20, r6
    d948:	92 01       	movw	r18, r4
    d94a:	c8 5c       	subi	r28, 0xC8	; 200
    d94c:	de 4f       	sbci	r29, 0xFE	; 254
    d94e:	68 81       	ld	r22, Y
    d950:	79 81       	ldd	r23, Y+1	; 0x01
    d952:	8a 81       	ldd	r24, Y+2	; 0x02
    d954:	9b 81       	ldd	r25, Y+3	; 0x03
    d956:	c8 53       	subi	r28, 0x38	; 56
    d958:	d1 40       	sbci	r29, 0x01	; 1
    d95a:	0e 94 bf 88 	call	0x1117e	; 0x1117e <__cmpsf2>
    d95e:	87 fd       	sbrc	r24, 7
    d960:	d0 cf       	rjmp	.-96     	; 0xd902 <setup+0x1642>
    d962:	c4 5c       	subi	r28, 0xC4	; 196
    d964:	de 4f       	sbci	r29, 0xFE	; 254
    d966:	e8 81       	ld	r30, Y
    d968:	f9 81       	ldd	r31, Y+1	; 0x01
    d96a:	cc 53       	subi	r28, 0x3C	; 60
    d96c:	d1 40       	sbci	r29, 0x01	; 1
    d96e:	34 96       	adiw	r30, 0x04	; 4
    d970:	c4 5c       	subi	r28, 0xC4	; 196
    d972:	de 4f       	sbci	r29, 0xFE	; 254
    d974:	f9 83       	std	Y+1, r31	; 0x01
    d976:	e8 83       	st	Y, r30
    d978:	cc 53       	subi	r28, 0x3C	; 60
    d97a:	d1 40       	sbci	r29, 0x01	; 1
    d97c:	ce 5b       	subi	r28, 0xBE	; 190
    d97e:	de 4f       	sbci	r29, 0xFE	; 254
    d980:	28 81       	ld	r18, Y
    d982:	39 81       	ldd	r19, Y+1	; 0x01
    d984:	c2 54       	subi	r28, 0x42	; 66
    d986:	d1 40       	sbci	r29, 0x01	; 1
    d988:	2c 5f       	subi	r18, 0xFC	; 252
    d98a:	3f 4f       	sbci	r19, 0xFF	; 255
    d98c:	ce 5b       	subi	r28, 0xBE	; 190
    d98e:	de 4f       	sbci	r29, 0xFE	; 254
    d990:	39 83       	std	Y+1, r19	; 0x01
    d992:	28 83       	st	Y, r18
    d994:	c2 54       	subi	r28, 0x42	; 66
    d996:	d1 40       	sbci	r29, 0x01	; 1
    d998:	34 e0       	ldi	r19, 0x04	; 4
    d99a:	e3 0e       	add	r14, r19
    d99c:	f1 1c       	adc	r15, r1
    d99e:	82 e0       	ldi	r24, 0x02	; 2
    d9a0:	88 0e       	add	r8, r24
    d9a2:	91 1c       	adc	r9, r1
thermostat_init_pid():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:40

PID** array_pids = new PID*[MAX_THERMOSTAT];

void thermostat_init_pid(void)
{
  for (uint8_t p = 0; p < MAX_THERMOSTAT; p++)
    d9a4:	9e e1       	ldi	r25, 0x1E	; 30
    d9a6:	89 16       	cp	r8, r25
    d9a8:	91 04       	cpc	r9, r1
    d9aa:	09 f0       	breq	.+2      	; 0xd9ae <setup+0x16ee>
    d9ac:	a8 c1       	rjmp	.+848    	; 0xdcfe <setup+0x1a3e>
    d9ae:	ab ec       	ldi	r26, 0xCB	; 203
    d9b0:	bb e0       	ldi	r27, 0x0B	; 11
    d9b2:	c4 5c       	subi	r28, 0xC4	; 196
    d9b4:	de 4f       	sbci	r29, 0xFE	; 254
    d9b6:	b9 83       	std	Y+1, r27	; 0x01
    d9b8:	a8 83       	st	Y, r26
    d9ba:	cc 53       	subi	r28, 0x3C	; 60
    d9bc:	d1 40       	sbci	r29, 0x01	; 1
    d9be:	40 e5       	ldi	r20, 0x50	; 80
    d9c0:	44 2e       	mov	r4, r20
    d9c2:	4a e0       	ldi	r20, 0x0A	; 10
    d9c4:	54 2e       	mov	r5, r20
    d9c6:	5c e8       	ldi	r21, 0x8C	; 140
    d9c8:	65 2e       	mov	r6, r21
    d9ca:	5a e0       	ldi	r21, 0x0A	; 10
    d9cc:	75 2e       	mov	r7, r21
    d9ce:	68 ec       	ldi	r22, 0xC8	; 200
    d9d0:	86 2e       	mov	r8, r22
    d9d2:	6a e0       	ldi	r22, 0x0A	; 10
    d9d4:	96 2e       	mov	r9, r22
    d9d6:	74 e0       	ldi	r23, 0x04	; 4
    d9d8:	e7 2e       	mov	r14, r23
    d9da:	7b e0       	ldi	r23, 0x0B	; 11
    d9dc:	f7 2e       	mov	r15, r23
    d9de:	00 e6       	ldi	r16, 0x60	; 96
    d9e0:	11 e0       	ldi	r17, 0x01	; 1
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3106
    {
      strcpy_P(str1, text_pid_regulator);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      thermostat_init_pid();
      /// nastaveni vychozich hodnot pro regulator
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
    d9e2:	c1 2c       	mov	r12, r1
thermostat_ring_set_state():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:23
{
  return therm_stav[idx];
}
void thermostat_ring_set_state(uint8_t idx, uint8_t stav)
{
  therm_stav[idx] = stav;
    d9e4:	c4 5c       	subi	r28, 0xC4	; 196
    d9e6:	de 4f       	sbci	r29, 0xFE	; 254
    d9e8:	e8 81       	ld	r30, Y
    d9ea:	f9 81       	ldd	r31, Y+1	; 0x01
    d9ec:	cc 53       	subi	r28, 0x3C	; 60
    d9ee:	d1 40       	sbci	r29, 0x01	; 1
    d9f0:	11 92       	st	Z+, r1
    d9f2:	c4 5c       	subi	r28, 0xC4	; 196
    d9f4:	de 4f       	sbci	r29, 0xFE	; 254
    d9f6:	f9 83       	std	Y+1, r31	; 0x01
    d9f8:	e8 83       	st	Y, r30
    d9fa:	cc 53       	subi	r28, 0x3C	; 60
    d9fc:	d1 40       	sbci	r29, 0x01	; 1
thermostat_ring_get_pid_eeprom():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:226
  array_pids[idx]->SetSampleTime(PID_time[idx]);
}

void thermostat_ring_get_pid_eeprom(uint8_t idx)
{
  PID_p[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_p);
    d9fe:	c8 01       	movw	r24, r16
    da00:	0e 94 a5 47 	call	0x8f4a	; 0x8f4a <EEPROMreadFloat(unsigned int)>
    da04:	d2 01       	movw	r26, r4
    da06:	6d 93       	st	X+, r22
    da08:	7d 93       	st	X+, r23
    da0a:	8d 93       	st	X+, r24
    da0c:	9d 93       	st	X+, r25
    da0e:	2d 01       	movw	r4, r26
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:227
  PID_i[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_i);
    da10:	c8 01       	movw	r24, r16
    da12:	04 96       	adiw	r24, 0x04	; 4
    da14:	0e 94 a5 47 	call	0x8f4a	; 0x8f4a <EEPROMreadFloat(unsigned int)>
    da18:	f3 01       	movw	r30, r6
    da1a:	61 93       	st	Z+, r22
    da1c:	71 93       	st	Z+, r23
    da1e:	81 93       	st	Z+, r24
    da20:	91 93       	st	Z+, r25
    da22:	3f 01       	movw	r6, r30
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:228
  PID_d[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d);
    da24:	c8 01       	movw	r24, r16
    da26:	08 96       	adiw	r24, 0x08	; 8
    da28:	0e 94 a5 47 	call	0x8f4a	; 0x8f4a <EEPROMreadFloat(unsigned int)>
    da2c:	d4 01       	movw	r26, r8
    da2e:	6d 93       	st	X+, r22
    da30:	7d 93       	st	X+, r23
    da32:	8d 93       	st	X+, r24
    da34:	9d 93       	st	X+, r25
    da36:	4d 01       	movw	r8, r26
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:229
  PID_time[idx] = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer);
    da38:	c8 01       	movw	r24, r16
    da3a:	0c 96       	adiw	r24, 0x0c	; 12
    da3c:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224]>
    da40:	f7 01       	movw	r30, r14
    da42:	81 93       	st	Z+, r24
    da44:	7f 01       	movw	r14, r30
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3111
      {
        thermostat_ring_set_state(idx, 0);
        thermostat_ring_set_power(idx, 0);
        thermostat_ring_get_pid_eeprom(idx);
        thermostat_ring_update_pid_parameters(idx);
    da46:	8c 2d       	mov	r24, r12
    da48:	0e 94 00 2c 	call	0x5800	; 0x5800 <thermostat_ring_update_pid_parameters(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3106
    {
      strcpy_P(str1, text_pid_regulator);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      thermostat_init_pid();
      /// nastaveni vychozich hodnot pro regulator
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
    da4c:	c3 94       	inc	r12
    da4e:	0f 5d       	subi	r16, 0xDF	; 223
    da50:	1f 4f       	sbci	r17, 0xFF	; 255
    da52:	ff e0       	ldi	r31, 0x0F	; 15
    da54:	cf 12       	cpse	r12, r31
    da56:	c6 cf       	rjmp	.-116    	; 0xd9e4 <setup+0x1724>
get_default_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1382
   return
     - uint8_t s id ringu
*/
uint8_t get_default_ring(void)
{
  return EEPROM.read(my_default_ring);
    da58:	8c e5       	ldi	r24, 0x5C	; 92
    da5a:	90 e0       	ldi	r25, 0x00	; 0
    da5c:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3113
        thermostat_ring_set_state(idx, 0);
        thermostat_ring_set_power(idx, 0);
        thermostat_ring_get_pid_eeprom(idx);
        thermostat_ring_update_pid_parameters(idx);
      }
      default_ring = get_default_ring();
    da60:	80 93 ca 0b 	sts	0x0BCA, r24	; 0x800bca <default_ring>
    da64:	ec cc       	rjmp	.-1576   	; 0xd43e <setup+0x117e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3129
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
        selftest_set_0(SELFTEST_ERR_NTP);
      }
      else
      {
        strcpy(str1, "OK");
    da66:	6b e4       	ldi	r22, 0x4B	; 75
    da68:	77 e0       	ldi	r23, 0x07	; 7
    da6a:	c1 01       	movw	r24, r2
    da6c:	0e 94 c8 8c 	call	0x11990	; 0x11990 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3130
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    da70:	ee 24       	eor	r14, r14
    da72:	ea 94       	dec	r14
    da74:	fe 2c       	mov	r15, r14
    da76:	00 ee       	ldi	r16, 0xE0	; 224
    da78:	17 e0       	ldi	r17, 0x07	; 7
    da7a:	21 e0       	ldi	r18, 0x01	; 1
    da7c:	4e eb       	ldi	r20, 0xBE	; 190
    da7e:	50 e0       	ldi	r21, 0x00	; 0
    da80:	60 ea       	ldi	r22, 0xA0	; 160
    da82:	70 e0       	ldi	r23, 0x00	; 0
    da84:	c1 01       	movw	r24, r2
    da86:	0e 94 c0 30 	call	0x6180	; 0x6180 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.158]>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2473
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
    da8a:	80 91 9d 0c 	lds	r24, 0x0C9D	; 0x800c9d <selftest_data>
    da8e:	8d 7f       	andi	r24, 0xFD	; 253
    da90:	99 c0       	rjmp	.+306    	; 0xdbc4 <setup+0x1904>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3136
        selftest_clear_0(SELFTEST_ERR_NTP);
      }
    }
    ///
    /// inicializace RTC casu
    if (init == 15)
    da92:	bf e0       	ldi	r27, 0x0F	; 15
    da94:	ab 12       	cpse	r10, r27
    da96:	d3 cc       	rjmp	.-1626   	; 0xd43e <setup+0x117e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3138
    {
      strcpy_P(str1, text_rtc_cas);
    da98:	66 e2       	ldi	r22, 0x26	; 38
    da9a:	75 e1       	ldi	r23, 0x15	; 21
    da9c:	8d 2d       	mov	r24, r13
    da9e:	9b 2d       	mov	r25, r11
    daa0:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3139
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    daa4:	ee 24       	eor	r14, r14
    daa6:	ea 94       	dec	r14
    daa8:	fe 2c       	mov	r15, r14
    daaa:	00 ee       	ldi	r16, 0xE0	; 224
    daac:	17 e0       	ldi	r17, 0x07	; 7
    daae:	21 e0       	ldi	r18, 0x01	; 1
    dab0:	48 ec       	ldi	r20, 0xC8	; 200
    dab2:	50 e0       	ldi	r21, 0x00	; 0
    dab4:	6e e1       	ldi	r22, 0x1E	; 30
    dab6:	70 e0       	ldi	r23, 0x00	; 0
    dab8:	8d 2d       	mov	r24, r13
    daba:	9b 2d       	mov	r25, r11
    dabc:	0e 94 c0 30 	call	0x6180	; 0x6180 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.158]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3140
      if (rtc.isrunning())
    dac0:	0e 94 92 33 	call	0x6724	; 0x6724 <RTC_DS1307::isrunning() [clone .constprop.136]>
    dac4:	88 23       	and	r24, r24
    dac6:	99 f0       	breq	.+38     	; 0xdaee <setup+0x182e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3142
      {
        strcpy(str1, "OK");
    dac8:	6b e4       	ldi	r22, 0x4B	; 75
    daca:	77 e0       	ldi	r23, 0x07	; 7
    dacc:	8d 2d       	mov	r24, r13
    dace:	9b 2d       	mov	r25, r11
    dad0:	0e 94 c8 8c 	call	0x11990	; 0x11990 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3143
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    dad4:	21 e0       	ldi	r18, 0x01	; 1
    dad6:	48 ec       	ldi	r20, 0xC8	; 200
    dad8:	50 e0       	ldi	r21, 0x00	; 0
    dada:	60 ea       	ldi	r22, 0xA0	; 160
    dadc:	70 e0       	ldi	r23, 0x00	; 0
    dade:	8d 2d       	mov	r24, r13
    dae0:	9b 2d       	mov	r25, r11
    dae2:	0e 94 c0 30 	call	0x6180	; 0x6180 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.158]>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2473
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
    dae6:	80 91 9d 0c 	lds	r24, 0x0C9D	; 0x800c9d <selftest_data>
    daea:	8e 7f       	andi	r24, 0xFE	; 254
    daec:	6b c0       	rjmp	.+214    	; 0xdbc4 <setup+0x1904>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3148
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
        selftest_clear_0(SELFTEST_ERR_RTC);
      }
      else
      {
        strcpy(str1, "ERROR");
    daee:	6e e4       	ldi	r22, 0x4E	; 78
    daf0:	77 e0       	ldi	r23, 0x07	; 7
    daf2:	8d 2d       	mov	r24, r13
    daf4:	9b 2d       	mov	r25, r11
    daf6:	0e 94 c8 8c 	call	0x11990	; 0x11990 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3149
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
    dafa:	ee 24       	eor	r14, r14
    dafc:	ea 94       	dec	r14
    dafe:	fe 2c       	mov	r15, r14
    db00:	00 e0       	ldi	r16, 0x00	; 0
    db02:	18 ef       	ldi	r17, 0xF8	; 248
    db04:	21 e0       	ldi	r18, 0x01	; 1
    db06:	48 ec       	ldi	r20, 0xC8	; 200
    db08:	50 e0       	ldi	r21, 0x00	; 0
    db0a:	60 ea       	ldi	r22, 0xA0	; 160
    db0c:	70 e0       	ldi	r23, 0x00	; 0
    db0e:	8d 2d       	mov	r24, r13
    db10:	9b 2d       	mov	r25, r11
    db12:	0e 94 c0 30 	call	0x6180	; 0x6180 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.158]>
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2464
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
    db16:	80 91 9d 0c 	lds	r24, 0x0C9D	; 0x800c9d <selftest_data>
    db1a:	81 60       	ori	r24, 0x01	; 1
    db1c:	53 c0       	rjmp	.+166    	; 0xdbc4 <setup+0x1904>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2970
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
    }

    ///  nacteni provoznich parametru
    if (init == 5)
    db1e:	25 e0       	ldi	r18, 0x05	; 5
    db20:	a2 16       	cp	r10, r18
    db22:	09 f4       	brne	.+2      	; 0xdb26 <setup+0x1866>
    db24:	a5 cb       	rjmp	.-2230   	; 0xd270 <setup+0xfb0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2986
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
        last_output_update[idx] = 0;
    }
    ///
    /// zobrazeni kalibracnich informaci touchscreenu
    if (init == 6)
    db26:	36 e0       	ldi	r19, 0x06	; 6
    db28:	a3 16       	cp	r10, r19
    db2a:	09 f4       	brne	.+2      	; 0xdb2e <setup+0x186e>
    db2c:	be cc       	rjmp	.-1668   	; 0xd4aa <setup+0x11ea>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2994
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      my_touch.TP_Init(my_lcd.Get_Rotation(), my_lcd.Get_Display_Width(), my_lcd.Get_Display_Height());
    }
    ///
    /// inicializace ds2482
    if (init == 7)
    db2e:	87 e0       	ldi	r24, 0x07	; 7
    db30:	a8 12       	cpse	r10, r24
    db32:	15 cd       	rjmp	.-1494   	; 0xd55e <setup+0x129e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2996
    {
      strcpy_P(str1, text_onewire_rozhrani);
    db34:	66 eb       	ldi	r22, 0xB6	; 182
    db36:	75 e1       	ldi	r23, 0x15	; 21
    db38:	8d 2d       	mov	r24, r13
    db3a:	9b 2d       	mov	r25, r11
    db3c:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2997
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    db40:	ee 24       	eor	r14, r14
    db42:	ea 94       	dec	r14
    db44:	fe 2c       	mov	r15, r14
    db46:	00 ee       	ldi	r16, 0xE0	; 224
    db48:	17 e0       	ldi	r17, 0x07	; 7
    db4a:	21 e0       	ldi	r18, 0x01	; 1
    db4c:	48 e7       	ldi	r20, 0x78	; 120
    db4e:	50 e0       	ldi	r21, 0x00	; 0
    db50:	6e e1       	ldi	r22, 0x1E	; 30
    db52:	70 e0       	ldi	r23, 0x00	; 0
    db54:	8d 2d       	mov	r24, r13
    db56:	9b 2d       	mov	r25, r11
    db58:	0e 94 c0 30 	call	0x6180	; 0x6180 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.158]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2998
      ds2482_address[0].i2c_addr = 0b0011000;
    db5c:	88 e1       	ldi	r24, 0x18	; 24
    db5e:	80 93 cb 09 	sts	0x09CB, r24	; 0x8009cb <ds2482_address>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2999
      ds2482_address[0].HWwirenum = 0;
    db62:	10 92 cc 09 	sts	0x09CC, r1	; 0x8009cc <ds2482_address+0x1>
    db66:	e9 ee       	ldi	r30, 0xE9	; 233
    db68:	fb e0       	ldi	r31, 0x0B	; 11
    db6a:	8d e9       	ldi	r24, 0x9D	; 157
    db6c:	9c e0       	ldi	r25, 0x0C	; 12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3003
      ///
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++ )
      {
        status_tds18s20[idx].wait = false;
    db6e:	15 8e       	std	Z+29, r1	; 0x1d
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3004
        status_tds18s20[idx].period_now = 0;
    db70:	14 8e       	std	Z+28, r1	; 0x1c
    db72:	7e 96       	adiw	r30, 0x1e	; 30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3001
      strcpy_P(str1, text_onewire_rozhrani);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      ds2482_address[0].i2c_addr = 0b0011000;
      ds2482_address[0].HWwirenum = 0;
      ///
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++ )
    db74:	8e 17       	cp	r24, r30
    db76:	9f 07       	cpc	r25, r31
    db78:	d1 f7       	brne	.-12     	; 0xdb6e <setup+0x18ae>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    db7a:	4a e0       	ldi	r20, 0x0A	; 10
    db7c:	be 01       	movw	r22, r28
    db7e:	6e 50       	subi	r22, 0x0E	; 14
    db80:	7f 4f       	sbci	r23, 0xFF	; 255
    db82:	88 e1       	ldi	r24, 0x18	; 24
    db84:	90 e0       	ldi	r25, 0x00	; 0
    db86:	0e 94 7f 80 	call	0x100fe	; 0x100fe <__itoa_ncheck>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3007
      {
        status_tds18s20[idx].wait = false;
        status_tds18s20[idx].period_now = 0;
      }
      itoa(ds2482_address[0].i2c_addr, tmp1, 10);
      if (ds2482reset(ds2482_address[0].i2c_addr) == DS2482_ERR_OK)
    db8a:	80 91 cb 09 	lds	r24, 0x09CB	; 0x8009cb <ds2482_address>
    db8e:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <ds2482reset(unsigned char)>
    db92:	81 11       	cpse	r24, r1
    db94:	cc cc       	rjmp	.-1640   	; 0xd52e <setup+0x126e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3009
      {
        strcpy(str1, "OK");
    db96:	6b e4       	ldi	r22, 0x4B	; 75
    db98:	77 e0       	ldi	r23, 0x07	; 7
    db9a:	8d 2d       	mov	r24, r13
    db9c:	9b 2d       	mov	r25, r11
    db9e:	0e 94 c8 8c 	call	0x11990	; 0x11990 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3010
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    dba2:	ee 24       	eor	r14, r14
    dba4:	ea 94       	dec	r14
    dba6:	fe 2c       	mov	r15, r14
    dba8:	00 ee       	ldi	r16, 0xE0	; 224
    dbaa:	17 e0       	ldi	r17, 0x07	; 7
    dbac:	21 e0       	ldi	r18, 0x01	; 1
    dbae:	48 e7       	ldi	r20, 0x78	; 120
    dbb0:	50 e0       	ldi	r21, 0x00	; 0
    dbb2:	60 ea       	ldi	r22, 0xA0	; 160
    dbb4:	70 e0       	ldi	r23, 0x00	; 0
    dbb6:	8d 2d       	mov	r24, r13
    dbb8:	9b 2d       	mov	r25, r11
    dbba:	0e 94 c0 30 	call	0x6180	; 0x6180 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.158]>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2473
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
    dbbe:	80 91 9d 0c 	lds	r24, 0x0C9D	; 0x800c9d <selftest_data>
    dbc2:	8b 7f       	andi	r24, 0xFB	; 251
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2464
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
    dbc4:	80 93 9d 0c 	sts	0x0C9D, r24	; 0x800c9d <selftest_data>
    dbc8:	3a cc       	rjmp	.-1932   	; 0xd43e <setup+0x117e>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3052
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      delay(100);
    }
    ///
    ///inicializace mqtt rozhrani
    if (init == 10)
    dbca:	9a e0       	ldi	r25, 0x0A	; 10
    dbcc:	a9 12       	cpse	r10, r25
    dbce:	0d ce       	rjmp	.-998    	; 0xd7ea <setup+0x152a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3054
    {
      strcpy_P(str1, text_mqtt_rozhrani);
    dbd0:	69 e8       	ldi	r22, 0x89	; 137
    dbd2:	75 e1       	ldi	r23, 0x15	; 21
    dbd4:	c1 01       	movw	r24, r2
    dbd6:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3055
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    dbda:	ee 24       	eor	r14, r14
    dbdc:	ea 94       	dec	r14
    dbde:	fe 2c       	mov	r15, r14
    dbe0:	00 ee       	ldi	r16, 0xE0	; 224
    dbe2:	17 e0       	ldi	r17, 0x07	; 7
    dbe4:	21 e0       	ldi	r18, 0x01	; 1
    dbe6:	46 e9       	ldi	r20, 0x96	; 150
    dbe8:	50 e0       	ldi	r21, 0x00	; 0
    dbea:	6e e1       	ldi	r22, 0x1E	; 30
    dbec:	70 e0       	ldi	r23, 0x00	; 0
    dbee:	c1 01       	movw	r24, r2
    dbf0:	0e 94 c0 30 	call	0x6180	; 0x6180 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.158]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3056
      mqtt_client.setServer(device.mqtt_server, device.mqtt_port);
    dbf4:	80 91 3a 10 	lds	r24, 0x103A	; 0x80103a <device+0x24>
    dbf8:	90 91 3b 10 	lds	r25, 0x103B	; 0x80103b <device+0x25>
setServer():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:556
    }
    return rc;
}

PubSubClient& PubSubClient::setServer(uint8_t * ip, uint16_t port) {
    IPAddress addr(ip[0],ip[1],ip[2],ip[3]);
    dbfc:	20 91 39 10 	lds	r18, 0x1039	; 0x801039 <device+0x23>
    dc00:	30 91 38 10 	lds	r19, 0x1038	; 0x801038 <device+0x22>
    dc04:	40 91 37 10 	lds	r20, 0x1037	; 0x801037 <device+0x21>
_ZN9IPAddressaSERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
    dc08:	50 91 36 10 	lds	r21, 0x1036	; 0x801036 <device+0x20>
    dc0c:	50 93 c2 15 	sts	0x15C2, r21	; 0x8015c2 <mqtt_client+0x211>
    dc10:	40 93 c3 15 	sts	0x15C3, r20	; 0x8015c3 <mqtt_client+0x212>
    dc14:	30 93 c4 15 	sts	0x15C4, r19	; 0x8015c4 <mqtt_client+0x213>
    dc18:	20 93 c5 15 	sts	0x15C5, r18	; 0x8015c5 <mqtt_client+0x214>
setServer():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:562
    return setServer(addr,port);
}

PubSubClient& PubSubClient::setServer(IPAddress ip, uint16_t port) {
    this->ip = ip;
    this->port = port;
    dc1c:	90 93 c9 15 	sts	0x15C9, r25	; 0x8015c9 <mqtt_client+0x218>
    dc20:	80 93 c8 15 	sts	0x15C8, r24	; 0x8015c8 <mqtt_client+0x217>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:563
    this->domain = NULL;
    dc24:	10 92 c7 15 	sts	0x15C7, r1	; 0x8015c7 <mqtt_client+0x216>
    dc28:	10 92 c6 15 	sts	0x15C6, r1	; 0x8015c6 <mqtt_client+0x215>
setCallback():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:574
    this->port = port;
    return *this;
}

PubSubClient& PubSubClient::setCallback(MQTT_CALLBACK_SIGNATURE) {
    this->callback = callback;
    dc2c:	83 e9       	ldi	r24, 0x93	; 147
    dc2e:	91 e5       	ldi	r25, 0x51	; 81
    dc30:	90 93 bf 15 	sts	0x15BF, r25	; 0x8015bf <mqtt_client+0x20e>
    dc34:	80 93 be 15 	sts	0x15BE, r24	; 0x8015be <mqtt_client+0x20d>
send_mqtt_set_header():
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:162

////////////////////////////////////////////////////////////////////////////////////////////////////////
//****************************************************************************************************//
void send_mqtt_set_header(char* header)
{
  header_out = header;
    dc38:	8a e7       	ldi	r24, 0x7A	; 122
    dc3a:	95 e1       	ldi	r25, 0x15	; 21
    dc3c:	90 93 dc 0e 	sts	0x0EDC, r25	; 0x800edc <header_out+0x1>
    dc40:	80 93 db 0e 	sts	0x0EDB, r24	; 0x800edb <header_out>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3059
      mqtt_client.setCallback(mqtt_callback);
      send_mqtt_set_header(thermctl_header_out);
      milis = millis();
    dc44:	0e 94 28 13 	call	0x2650	; 0x2650 <millis>
    dc48:	2b 01       	movw	r4, r22
    dc4a:	3c 01       	movw	r6, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3060
      while ((millis() - milis) < 3000 )
    dc4c:	0e 94 28 13 	call	0x2650	; 0x2650 <millis>
    dc50:	64 19       	sub	r22, r4
    dc52:	75 09       	sbc	r23, r5
    dc54:	86 09       	sbc	r24, r6
    dc56:	97 09       	sbc	r25, r7
    dc58:	68 3b       	cpi	r22, 0xB8	; 184
    dc5a:	7b 40       	sbci	r23, 0x0B	; 11
    dc5c:	81 05       	cpc	r24, r1
    dc5e:	91 05       	cpc	r25, r1
    dc60:	58 f4       	brcc	.+22     	; 0xdc78 <setup+0x19b8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3062
      {
        mqtt_client.loop();
    dc62:	0e 94 4c 3d 	call	0x7a98	; 0x7a98 <PubSubClient::loop() [clone .constprop.123]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3063
        if (mqtt_reconnect() == 0)
    dc66:	0e 94 f5 49 	call	0x93ea	; 0x93ea <mqtt_reconnect()>
    dc6a:	90 91 9d 0c 	lds	r25, 0x0C9D	; 0x800c9d <selftest_data>
    dc6e:	81 11       	cpse	r24, r1
    dc70:	ac cd       	rjmp	.-1192   	; 0xd7ca <setup+0x150a>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2473
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
    dc72:	9f 7d       	andi	r25, 0xDF	; 223
    dc74:	90 93 9d 0c 	sts	0x0C9D, r25	; 0x800c9d <selftest_data>
selftest_get_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2486
     ... 0 - neni oznacen jako chybny
     ... neni 0 - chybny flag
*/
uint8_t selftest_get_0(uint8_t what)
{
  return selftest_data & (1 << what);
    dc78:	80 91 9d 0c 	lds	r24, 0x0C9D	; 0x800c9d <selftest_data>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3072
        }
        else
          selftest_set_0(SELFTEST_MQTT_LINK);
      }

      if (selftest_get_0(SELFTEST_MQTT_LINK) != 0)
    dc7c:	85 ff       	sbrs	r24, 5
    dc7e:	a9 cd       	rjmp	.-1198   	; 0xd7d2 <setup+0x1512>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3074
      {
        strcpy(str1, "ERROR");
    dc80:	6e e4       	ldi	r22, 0x4E	; 78
    dc82:	77 e0       	ldi	r23, 0x07	; 7
    dc84:	8d 2d       	mov	r24, r13
    dc86:	9b 2d       	mov	r25, r11
    dc88:	0e 94 c8 8c 	call	0x11990	; 0x11990 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3075
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
    dc8c:	ee 24       	eor	r14, r14
    dc8e:	ea 94       	dec	r14
    dc90:	fe 2c       	mov	r15, r14
    dc92:	00 e0       	ldi	r16, 0x00	; 0
    dc94:	18 ef       	ldi	r17, 0xF8	; 248
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3080
      }
      else
      {
        strcpy(str1, "OK");
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    dc96:	21 e0       	ldi	r18, 0x01	; 1
    dc98:	46 e9       	ldi	r20, 0x96	; 150
    dc9a:	50 e0       	ldi	r21, 0x00	; 0
    dc9c:	f8 cc       	rjmp	.-1552   	; 0xd68e <setup+0x13ce>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3100
      strcpy_P(str1, text_nrf_rozhrani);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    }
    ///
    /// inicializace termostatu
    if (init == 13)
    dc9e:	ad e0       	ldi	r26, 0x0D	; 13
    dca0:	aa 12       	cpse	r10, r26
    dca2:	0c 94 ea 64 	jmp	0xc9d4	; 0xc9d4 <setup+0x714>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3102
    {
      strcpy_P(str1, text_pid_regulator);
    dca6:	6d e4       	ldi	r22, 0x4D	; 77
    dca8:	75 e1       	ldi	r23, 0x15	; 21
    dcaa:	8d 2d       	mov	r24, r13
    dcac:	9b 2d       	mov	r25, r11
    dcae:	0e 94 42 80 	call	0x10084	; 0x10084 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3103
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    dcb2:	ee 24       	eor	r14, r14
    dcb4:	ea 94       	dec	r14
    dcb6:	fe 2c       	mov	r15, r14
    dcb8:	00 ee       	ldi	r16, 0xE0	; 224
    dcba:	17 e0       	ldi	r17, 0x07	; 7
    dcbc:	21 e0       	ldi	r18, 0x01	; 1
    dcbe:	44 eb       	ldi	r20, 0xB4	; 180
    dcc0:	50 e0       	ldi	r21, 0x00	; 0
    dcc2:	6e e1       	ldi	r22, 0x1E	; 30
    dcc4:	70 e0       	ldi	r23, 0x00	; 0
    dcc6:	8d 2d       	mov	r24, r13
    dcc8:	9b 2d       	mov	r25, r11
    dcca:	0e 94 c0 30 	call	0x6180	; 0x6180 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.158]>
    dcce:	a3 e5       	ldi	r26, 0x53	; 83
    dcd0:	b9 e0       	ldi	r27, 0x09	; 9
    dcd2:	c4 5c       	subi	r28, 0xC4	; 196
    dcd4:	de 4f       	sbci	r29, 0xFE	; 254
    dcd6:	b9 83       	std	Y+1, r27	; 0x01
    dcd8:	a8 83       	st	Y, r26
    dcda:	cc 53       	subi	r28, 0x3C	; 60
    dcdc:	d1 40       	sbci	r29, 0x01	; 1
    dcde:	e7 e1       	ldi	r30, 0x17	; 23
    dce0:	f9 e0       	ldi	r31, 0x09	; 9
    dce2:	ce 5b       	subi	r28, 0xBE	; 190
    dce4:	de 4f       	sbci	r29, 0xFE	; 254
    dce6:	f9 83       	std	Y+1, r31	; 0x01
    dce8:	e8 83       	st	Y, r30
    dcea:	c2 54       	subi	r28, 0x42	; 66
    dcec:	d1 40       	sbci	r29, 0x01	; 1
    dcee:	ff e8       	ldi	r31, 0x8F	; 143
    dcf0:	ef 2e       	mov	r14, r31
    dcf2:	f9 e0       	ldi	r31, 0x09	; 9
    dcf4:	ff 2e       	mov	r15, r31
    dcf6:	91 2c       	mov	r9, r1
    dcf8:	81 2c       	mov	r8, r1
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:107
void PID::SetTunings(double Kp, double Ki, double Kd, int POn)
{
   if (Kp<0 || Ki<0 || Kd<0) return;

   pOn = POn;
   pOnE = POn == P_ON_E;
    dcfa:	cc 24       	eor	r12, r12
    dcfc:	c3 94       	inc	r12
operator new():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/new.cpp:22
*/

#include <stdlib.h>

void *operator new(size_t size) {
  return malloc(size);
    dcfe:	8c e3       	ldi	r24, 0x3C	; 60
    dd00:	90 e0       	ldi	r25, 0x00	; 0
    dd02:	0e 94 8e 84 	call	0x1091c	; 0x1091c <malloc>
    dd06:	8c 01       	movw	r16, r24
__base_ctor ():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:23
 *    reliable defaults, so we need to have the user set them.
 ***************************************************************************/
PID::PID(double* Input, double* Output, double* Setpoint,
        double Kp, double Ki, double Kd, int POn, int ControllerDirection)
{
    myOutput = Output;
    dd08:	c4 5c       	subi	r28, 0xC4	; 196
    dd0a:	de 4f       	sbci	r29, 0xFE	; 254
    dd0c:	e8 81       	ld	r30, Y
    dd0e:	f9 81       	ldd	r31, Y+1	; 0x01
    dd10:	cc 53       	subi	r28, 0x3C	; 60
    dd12:	d1 40       	sbci	r29, 0x01	; 1
    dd14:	dc 01       	movw	r26, r24
    dd16:	5f 96       	adiw	r26, 0x1f	; 31
    dd18:	fc 93       	st	X, r31
    dd1a:	ee 93       	st	-X, r30
    dd1c:	5e 97       	sbiw	r26, 0x1e	; 30
/home/saric/Arduino/libraries/PID/PID_v1.cpp:24
    myInput = Input;
    dd1e:	ce 5b       	subi	r28, 0xBE	; 190
    dd20:	de 4f       	sbci	r29, 0xFE	; 254
    dd22:	28 81       	ld	r18, Y
    dd24:	39 81       	ldd	r19, Y+1	; 0x01
    dd26:	c2 54       	subi	r28, 0x42	; 66
    dd28:	d1 40       	sbci	r29, 0x01	; 1
    dd2a:	5d 96       	adiw	r26, 0x1d	; 29
    dd2c:	3c 93       	st	X, r19
    dd2e:	2e 93       	st	-X, r18
    dd30:	5c 97       	sbiw	r26, 0x1c	; 28
/home/saric/Arduino/libraries/PID/PID_v1.cpp:25
    mySetpoint = Setpoint;
    dd32:	91 96       	adiw	r26, 0x21	; 33
    dd34:	fc 92       	st	X, r15
    dd36:	ee 92       	st	-X, r14
    dd38:	90 97       	sbiw	r26, 0x20	; 32
/home/saric/Arduino/libraries/PID/PID_v1.cpp:26
    inAuto = false;
    dd3a:	da 96       	adiw	r26, 0x3a	; 58
    dd3c:	1c 92       	st	X, r1
    dd3e:	da 97       	sbiw	r26, 0x3a	; 58
SetOutputLimits():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:157
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   if(Min >= Max) return;
   outMin = Min;
    dd40:	d2 96       	adiw	r26, 0x32	; 50
    dd42:	1d 92       	st	X+, r1
    dd44:	1d 92       	st	X+, r1
    dd46:	1d 92       	st	X+, r1
    dd48:	1c 92       	st	X, r1
    dd4a:	d5 97       	sbiw	r26, 0x35	; 53
/home/saric/Arduino/libraries/PID/PID_v1.cpp:158
   outMax = Max;
    dd4c:	80 e0       	ldi	r24, 0x00	; 0
    dd4e:	90 e0       	ldi	r25, 0x00	; 0
    dd50:	af e7       	ldi	r26, 0x7F	; 127
    dd52:	b3 e4       	ldi	r27, 0x43	; 67
    dd54:	f8 01       	movw	r30, r16
    dd56:	86 ab       	std	Z+54, r24	; 0x36
    dd58:	97 ab       	std	Z+55, r25	; 0x37
    dd5a:	a0 af       	std	Z+56, r26	; 0x38
    dd5c:	b1 af       	std	Z+57, r27	; 0x39
__base_ctor ():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:31
    inAuto = false;

    PID::SetOutputLimits(0, 255);				//default output limit corresponds to
												//the arduino pwm limits

    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds
    dd5e:	84 e6       	ldi	r24, 0x64	; 100
    dd60:	90 e0       	ldi	r25, 0x00	; 0
    dd62:	a0 e0       	ldi	r26, 0x00	; 0
    dd64:	b0 e0       	ldi	r27, 0x00	; 0
    dd66:	86 a7       	std	Z+46, r24	; 0x2e
    dd68:	97 a7       	std	Z+47, r25	; 0x2f
    dd6a:	a0 ab       	std	Z+48, r26	; 0x30
    dd6c:	b1 ab       	std	Z+49, r27	; 0x31
SetControllerDirection():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:211
   {
	    kp = (0 - kp);
      ki = (0 - ki);
      kd = (0 - kd);
   }
   controllerDirection = Direction;
    dd6e:	11 8e       	std	Z+25, r1	; 0x19
    dd70:	10 8e       	std	Z+24, r1	; 0x18
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:106
 ******************************************************************************/
void PID::SetTunings(double Kp, double Ki, double Kd, int POn)
{
   if (Kp<0 || Ki<0 || Kd<0) return;

   pOn = POn;
    dd72:	21 e0       	ldi	r18, 0x01	; 1
    dd74:	30 e0       	ldi	r19, 0x00	; 0
    dd76:	33 8f       	std	Z+27, r19	; 0x1b
    dd78:	22 8f       	std	Z+26, r18	; 0x1a
/home/saric/Arduino/libraries/PID/PID_v1.cpp:107
   pOnE = POn == P_ON_E;
    dd7a:	c3 ae       	std	Z+59, r12	; 0x3b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:109

   dispKp = Kp; dispKi = Ki; dispKd = Kd;
    dd7c:	80 e0       	ldi	r24, 0x00	; 0
    dd7e:	90 e0       	ldi	r25, 0x00	; 0
    dd80:	a0 e0       	ldi	r26, 0x00	; 0
    dd82:	b0 e4       	ldi	r27, 0x40	; 64
    dd84:	80 83       	st	Z, r24
    dd86:	91 83       	std	Z+1, r25	; 0x01
    dd88:	a2 83       	std	Z+2, r26	; 0x02
    dd8a:	b3 83       	std	Z+3, r27	; 0x03
    dd8c:	80 e0       	ldi	r24, 0x00	; 0
    dd8e:	90 e0       	ldi	r25, 0x00	; 0
    dd90:	a0 ea       	ldi	r26, 0xA0	; 160
    dd92:	b0 e4       	ldi	r27, 0x40	; 64
    dd94:	84 83       	std	Z+4, r24	; 0x04
    dd96:	95 83       	std	Z+5, r25	; 0x05
    dd98:	a6 83       	std	Z+6, r26	; 0x06
    dd9a:	b7 83       	std	Z+7, r27	; 0x07
    dd9c:	80 e0       	ldi	r24, 0x00	; 0
    dd9e:	90 e0       	ldi	r25, 0x00	; 0
    dda0:	a0 e8       	ldi	r26, 0x80	; 128
    dda2:	bf e3       	ldi	r27, 0x3F	; 63
    dda4:	80 87       	std	Z+8, r24	; 0x08
    dda6:	91 87       	std	Z+9, r25	; 0x09
    dda8:	a2 87       	std	Z+10, r26	; 0x0a
    ddaa:	b3 87       	std	Z+11, r27	; 0x0b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:112

   double SampleTimeInSec = ((double)SampleTime)/1000;
   kp = Kp;
    ddac:	80 e0       	ldi	r24, 0x00	; 0
    ddae:	90 e0       	ldi	r25, 0x00	; 0
    ddb0:	a0 e0       	ldi	r26, 0x00	; 0
    ddb2:	b0 e4       	ldi	r27, 0x40	; 64
    ddb4:	84 87       	std	Z+12, r24	; 0x0c
    ddb6:	95 87       	std	Z+13, r25	; 0x0d
    ddb8:	a6 87       	std	Z+14, r26	; 0x0e
    ddba:	b7 87       	std	Z+15, r27	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:113
   ki = Ki * SampleTimeInSec;
    ddbc:	80 e0       	ldi	r24, 0x00	; 0
    ddbe:	90 e0       	ldi	r25, 0x00	; 0
    ddc0:	a0 e0       	ldi	r26, 0x00	; 0
    ddc2:	bf e3       	ldi	r27, 0x3F	; 63
    ddc4:	80 8b       	std	Z+16, r24	; 0x10
    ddc6:	91 8b       	std	Z+17, r25	; 0x11
    ddc8:	a2 8b       	std	Z+18, r26	; 0x12
    ddca:	b3 8b       	std	Z+19, r27	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:114
   kd = Kd / SampleTimeInSec;
    ddcc:	80 e0       	ldi	r24, 0x00	; 0
    ddce:	90 e0       	ldi	r25, 0x00	; 0
    ddd0:	a0 e2       	ldi	r26, 0x20	; 32
    ddd2:	b1 e4       	ldi	r27, 0x41	; 65
    ddd4:	84 8b       	std	Z+20, r24	; 0x14
    ddd6:	95 8b       	std	Z+21, r25	; 0x15
    ddd8:	a6 8b       	std	Z+22, r26	; 0x16
    ddda:	b7 8b       	std	Z+23, r27	; 0x17
__base_ctor ():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:36
    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds

    PID::SetControllerDirection(ControllerDirection);
    PID::SetTunings(Kp, Ki, Kd, POn);

    lastTime = (millis() / 1000) - SampleTime;
    dddc:	0e 94 28 13 	call	0x2650	; 0x2650 <millis>
    dde0:	28 ee       	ldi	r18, 0xE8	; 232
    dde2:	33 e0       	ldi	r19, 0x03	; 3
    dde4:	40 e0       	ldi	r20, 0x00	; 0
    dde6:	50 e0       	ldi	r21, 0x00	; 0
    dde8:	0e 94 31 8a 	call	0x11462	; 0x11462 <__udivmodsi4>
    ddec:	f8 01       	movw	r30, r16
    ddee:	86 a5       	ldd	r24, Z+46	; 0x2e
    ddf0:	97 a5       	ldd	r25, Z+47	; 0x2f
    ddf2:	a0 a9       	ldd	r26, Z+48	; 0x30
    ddf4:	b1 a9       	ldd	r27, Z+49	; 0x31
    ddf6:	28 1b       	sub	r18, r24
    ddf8:	39 0b       	sbc	r19, r25
    ddfa:	4a 0b       	sbc	r20, r26
    ddfc:	5b 0b       	sbc	r21, r27
    ddfe:	d8 01       	movw	r26, r16
    de00:	22 a3       	std	Z+34, r18	; 0x22
    de02:	33 a3       	std	Z+35, r19	; 0x23
    de04:	44 a3       	std	Z+36, r20	; 0x24
    de06:	55 a3       	std	Z+37, r21	; 0x25
thermostat_init_pid():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:42

void thermostat_init_pid(void)
{
  for (uint8_t p = 0; p < MAX_THERMOSTAT; p++)
  {
    array_pids[p] = new PID(&PID_Input[p], &PID_Output[p], &PID_Setpoint[p], 2, 5, 1, DIRECT);
    de08:	e0 91 0e 10 	lds	r30, 0x100E	; 0x80100e <array_pids>
    de0c:	f0 91 0f 10 	lds	r31, 0x100F	; 0x80100f <array_pids+0x1>
    de10:	e8 0d       	add	r30, r8
    de12:	f9 1d       	adc	r31, r9
    de14:	11 83       	std	Z+1, r17	; 0x01
    de16:	00 83       	st	Z, r16
SetMode():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:178
 * automatically initialized
 ******************************************************************************/
void PID::SetMode(int Mode)
{
    bool newAuto = (Mode == AUTOMATIC);
    if(newAuto && !inAuto)
    de18:	da 96       	adiw	r26, 0x3a	; 58
    de1a:	8c 91       	ld	r24, X
    de1c:	da 97       	sbiw	r26, 0x3a	; 58
    de1e:	81 11       	cpse	r24, r1
    de20:	1f cd       	rjmp	.-1474   	; 0xd860 <setup+0x15a0>
Initialize():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:191
 *	does all the things that need to happen to ensure a bumpless transfer
 *  from manual to automatic mode.
 ******************************************************************************/
void PID::Initialize()
{
   outputSum = *myOutput;
    de22:	5e 96       	adiw	r26, 0x1e	; 30
    de24:	ed 91       	ld	r30, X+
    de26:	fc 91       	ld	r31, X
    de28:	40 80       	ld	r4, Z
    de2a:	51 80       	ldd	r5, Z+1	; 0x01
    de2c:	62 80       	ldd	r6, Z+2	; 0x02
    de2e:	73 80       	ldd	r7, Z+3	; 0x03
    de30:	f8 01       	movw	r30, r16
    de32:	46 a2       	std	Z+38, r4	; 0x26
    de34:	57 a2       	std	Z+39, r5	; 0x27
    de36:	60 a6       	std	Z+40, r6	; 0x28
    de38:	71 a6       	std	Z+41, r7	; 0x29
/home/saric/Arduino/libraries/PID/PID_v1.cpp:192
   lastInput = *myInput;
    de3a:	04 8c       	ldd	r0, Z+28	; 0x1c
    de3c:	f5 8d       	ldd	r31, Z+29	; 0x1d
    de3e:	e0 2d       	mov	r30, r0
    de40:	80 81       	ld	r24, Z
    de42:	91 81       	ldd	r25, Z+1	; 0x01
    de44:	a2 81       	ldd	r26, Z+2	; 0x02
    de46:	b3 81       	ldd	r27, Z+3	; 0x03
    de48:	f8 01       	movw	r30, r16
    de4a:	82 a7       	std	Z+42, r24	; 0x2a
    de4c:	93 a7       	std	Z+43, r25	; 0x2b
    de4e:	a4 a7       	std	Z+44, r26	; 0x2c
    de50:	b5 a7       	std	Z+45, r27	; 0x2d
/home/saric/Arduino/libraries/PID/PID_v1.cpp:193
   if(outputSum > outMax) outputSum = outMax;
    de52:	86 a9       	ldd	r24, Z+54	; 0x36
    de54:	97 a9       	ldd	r25, Z+55	; 0x37
    de56:	a0 ad       	ldd	r26, Z+56	; 0x38
    de58:	b1 ad       	ldd	r27, Z+57	; 0x39
    de5a:	c8 5c       	subi	r28, 0xC8	; 200
    de5c:	de 4f       	sbci	r29, 0xFE	; 254
    de5e:	88 83       	st	Y, r24
    de60:	99 83       	std	Y+1, r25	; 0x01
    de62:	aa 83       	std	Y+2, r26	; 0x02
    de64:	bb 83       	std	Y+3, r27	; 0x03
    de66:	c8 53       	subi	r28, 0x38	; 56
    de68:	d1 40       	sbci	r29, 0x01	; 1
    de6a:	9c 01       	movw	r18, r24
    de6c:	ad 01       	movw	r20, r26
    de6e:	c3 01       	movw	r24, r6
    de70:	b2 01       	movw	r22, r4
    de72:	0e 94 a1 8b 	call	0x11742	; 0x11742 <__gesf2>
    de76:	18 16       	cp	r1, r24
    de78:	0c f0       	brlt	.+2      	; 0xde7c <setup+0x1bbc>
    de7a:	db cc       	rjmp	.-1610   	; 0xd832 <setup+0x1572>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:194
   else if(outputSum < outMin) outputSum = outMin;
    de7c:	c8 5c       	subi	r28, 0xC8	; 200
    de7e:	de 4f       	sbci	r29, 0xFE	; 254
    de80:	88 81       	ld	r24, Y
    de82:	99 81       	ldd	r25, Y+1	; 0x01
    de84:	aa 81       	ldd	r26, Y+2	; 0x02
    de86:	bb 81       	ldd	r27, Y+3	; 0x03
    de88:	c8 53       	subi	r28, 0x38	; 56
    de8a:	d1 40       	sbci	r29, 0x01	; 1
    de8c:	f8 01       	movw	r30, r16
    de8e:	86 a3       	std	Z+38, r24	; 0x26
    de90:	97 a3       	std	Z+39, r25	; 0x27
    de92:	a0 a7       	std	Z+40, r26	; 0x28
    de94:	b1 a7       	std	Z+41, r27	; 0x29
    de96:	e4 cc       	rjmp	.-1592   	; 0xd860 <setup+0x15a0>

0000de98 <MenuHistoryNextMenu(unsigned char)>:
_Z19MenuHistoryNextMenuh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:932
}


void MenuHistoryNextMenu(uint8_t id)
{
  if (MenuHistoryIndex < MENU_MAX_HISTORY)
    de98:	e0 91 16 09 	lds	r30, 0x0916	; 0x800916 <MenuHistoryIndex>
    de9c:	ea 30       	cpi	r30, 0x0A	; 10
    de9e:	48 f4       	brcc	.+18     	; 0xdeb2 <MenuHistoryNextMenu(unsigned char)+0x1a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:934
  {
    MenuHistoryIndex++;
    dea0:	ef 5f       	subi	r30, 0xFF	; 255
    dea2:	e0 93 16 09 	sts	0x0916, r30	; 0x800916 <MenuHistoryIndex>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:935
    MenuHistory[MenuHistoryIndex] = id;
    dea6:	f0 e0       	ldi	r31, 0x00	; 0
    dea8:	e4 5f       	subi	r30, 0xF4	; 244
    deaa:	f6 4f       	sbci	r31, 0xF6	; 246
    deac:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:936
    MenuPrepareStyle();
    deae:	0c 94 b2 60 	jmp	0xc164	; 0xc164 <MenuPrepareStyle()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:938
  }
}
    deb2:	08 95       	ret

0000deb4 <associate_onewire(unsigned char, unsigned char)>:
_Z17associate_onewirehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:221
}

void associate_onewire(uint8_t args1, uint8_t idx)
{

  printf("zde: %d, %d\n", args1, idx);
    deb4:	1f 92       	push	r1
    deb6:	6f 93       	push	r22
    deb8:	1f 92       	push	r1
    deba:	8f 93       	push	r24
    debc:	8f e5       	ldi	r24, 0x5F	; 95
    debe:	97 e0       	ldi	r25, 0x07	; 7
    dec0:	9f 93       	push	r25
    dec2:	8f 93       	push	r24
    dec4:	0e 94 fc 8c 	call	0x119f8	; 0x119f8 <printf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:222
  MenuHistoryNextMenu(MENU_DIALOG_YES_NO);
    dec8:	0f 90       	pop	r0
    deca:	0f 90       	pop	r0
    decc:	0f 90       	pop	r0
    dece:	0f 90       	pop	r0
    ded0:	0f 90       	pop	r0
    ded2:	0f 90       	pop	r0
    ded4:	84 e6       	ldi	r24, 0x64	; 100
    ded6:	0c 94 4c 6f 	jmp	0xde98	; 0xde98 <MenuHistoryNextMenu(unsigned char)>

0000deda <MenuHistoryPrevMenu()>:
_Z19MenuHistoryPrevMenuv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:921


void MenuHistoryPrevMenu(void)
{

  if (MenuHistoryIndex > 0)
    deda:	80 91 16 09 	lds	r24, 0x0916	; 0x800916 <MenuHistoryIndex>
    dede:	88 23       	and	r24, r24
    dee0:	29 f0       	breq	.+10     	; 0xdeec <MenuHistoryPrevMenu()+0x12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:923
  {
    MenuHistoryIndex--;
    dee2:	81 50       	subi	r24, 0x01	; 1
    dee4:	80 93 16 09 	sts	0x0916, r24	; 0x800916 <MenuHistoryIndex>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:924
    MenuPrepareStyle();
    dee8:	0c 94 b2 60 	jmp	0xc164	; 0xc164 <MenuPrepareStyle()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:927

  }
}
    deec:	08 95       	ret

0000deee <__vector_23>:
__vector_23():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:57
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    deee:	1f 92       	push	r1
    def0:	0f 92       	push	r0
    def2:	0f b6       	in	r0, 0x3f	; 63
    def4:	0f 92       	push	r0
    def6:	11 24       	eor	r1, r1
    def8:	2f 93       	push	r18
    defa:	3f 93       	push	r19
    defc:	8f 93       	push	r24
    defe:	9f 93       	push	r25
    df00:	af 93       	push	r26
    df02:	bf 93       	push	r27
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:60
  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
    df04:	80 91 c0 0c 	lds	r24, 0x0CC0	; 0x800cc0 <timer0_millis>
    df08:	90 91 c1 0c 	lds	r25, 0x0CC1	; 0x800cc1 <timer0_millis+0x1>
    df0c:	a0 91 c2 0c 	lds	r26, 0x0CC2	; 0x800cc2 <timer0_millis+0x2>
    df10:	b0 91 c3 0c 	lds	r27, 0x0CC3	; 0x800cc3 <timer0_millis+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:61
  unsigned char f = timer0_fract;
    df14:	30 91 bf 0c 	lds	r19, 0x0CBF	; 0x800cbf <timer0_fract>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:64

  m += MILLIS_INC;
  f += FRACT_INC;
    df18:	23 e0       	ldi	r18, 0x03	; 3
    df1a:	23 0f       	add	r18, r19
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:65
  if (f >= FRACT_MAX) {
    df1c:	2d 37       	cpi	r18, 0x7D	; 125
    df1e:	58 f5       	brcc	.+86     	; 0xdf76 <__vector_23+0x88>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:63
  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
  unsigned char f = timer0_fract;

  m += MILLIS_INC;
    df20:	01 96       	adiw	r24, 0x01	; 1
    df22:	a1 1d       	adc	r26, r1
    df24:	b1 1d       	adc	r27, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:70
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += 1;
  }

  timer0_fract = f;
    df26:	20 93 bf 0c 	sts	0x0CBF, r18	; 0x800cbf <timer0_fract>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:71
  timer0_millis = m;
    df2a:	80 93 c0 0c 	sts	0x0CC0, r24	; 0x800cc0 <timer0_millis>
    df2e:	90 93 c1 0c 	sts	0x0CC1, r25	; 0x800cc1 <timer0_millis+0x1>
    df32:	a0 93 c2 0c 	sts	0x0CC2, r26	; 0x800cc2 <timer0_millis+0x2>
    df36:	b0 93 c3 0c 	sts	0x0CC3, r27	; 0x800cc3 <timer0_millis+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:72
  timer0_overflow_count++;
    df3a:	80 91 c4 0c 	lds	r24, 0x0CC4	; 0x800cc4 <timer0_overflow_count>
    df3e:	90 91 c5 0c 	lds	r25, 0x0CC5	; 0x800cc5 <timer0_overflow_count+0x1>
    df42:	a0 91 c6 0c 	lds	r26, 0x0CC6	; 0x800cc6 <timer0_overflow_count+0x2>
    df46:	b0 91 c7 0c 	lds	r27, 0x0CC7	; 0x800cc7 <timer0_overflow_count+0x3>
    df4a:	01 96       	adiw	r24, 0x01	; 1
    df4c:	a1 1d       	adc	r26, r1
    df4e:	b1 1d       	adc	r27, r1
    df50:	80 93 c4 0c 	sts	0x0CC4, r24	; 0x800cc4 <timer0_overflow_count>
    df54:	90 93 c5 0c 	sts	0x0CC5, r25	; 0x800cc5 <timer0_overflow_count+0x1>
    df58:	a0 93 c6 0c 	sts	0x0CC6, r26	; 0x800cc6 <timer0_overflow_count+0x2>
    df5c:	b0 93 c7 0c 	sts	0x0CC7, r27	; 0x800cc7 <timer0_overflow_count+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:73
}
    df60:	bf 91       	pop	r27
    df62:	af 91       	pop	r26
    df64:	9f 91       	pop	r25
    df66:	8f 91       	pop	r24
    df68:	3f 91       	pop	r19
    df6a:	2f 91       	pop	r18
    df6c:	0f 90       	pop	r0
    df6e:	0f be       	out	0x3f, r0	; 63
    df70:	0f 90       	pop	r0
    df72:	1f 90       	pop	r1
    df74:	18 95       	reti
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:66
  unsigned char f = timer0_fract;

  m += MILLIS_INC;
  f += FRACT_INC;
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    df76:	26 e8       	ldi	r18, 0x86	; 134
    df78:	23 0f       	add	r18, r19
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:67
    m += 1;
    df7a:	02 96       	adiw	r24, 0x02	; 2
    df7c:	a1 1d       	adc	r26, r1
    df7e:	b1 1d       	adc	r27, r1
    df80:	d2 cf       	rjmp	.-92     	; 0xdf26 <__vector_23+0x38>

0000df82 <__vector_26>:
__vector_26():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    df82:	1f 92       	push	r1
    df84:	0f 92       	push	r0
    df86:	0f b6       	in	r0, 0x3f	; 63
    df88:	0f 92       	push	r0
    df8a:	11 24       	eor	r1, r1
    df8c:	0b b6       	in	r0, 0x3b	; 59
    df8e:	0f 92       	push	r0
    df90:	2f 93       	push	r18
    df92:	3f 93       	push	r19
    df94:	4f 93       	push	r20
    df96:	5f 93       	push	r21
    df98:	6f 93       	push	r22
    df9a:	7f 93       	push	r23
    df9c:	8f 93       	push	r24
    df9e:	9f 93       	push	r25
    dfa0:	af 93       	push	r26
    dfa2:	bf 93       	push	r27
    dfa4:	ef 93       	push	r30
    dfa6:	ff 93       	push	r31
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    dfa8:	8c e2       	ldi	r24, 0x2C	; 44
    dfaa:	9f e0       	ldi	r25, 0x0F	; 15
    dfac:	0e 94 2a 10 	call	0x2054	; 0x2054 <HardwareSerial::_tx_udr_empty_irq()>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial0.cpp:65
}
    dfb0:	ff 91       	pop	r31
    dfb2:	ef 91       	pop	r30
    dfb4:	bf 91       	pop	r27
    dfb6:	af 91       	pop	r26
    dfb8:	9f 91       	pop	r25
    dfba:	8f 91       	pop	r24
    dfbc:	7f 91       	pop	r23
    dfbe:	6f 91       	pop	r22
    dfc0:	5f 91       	pop	r21
    dfc2:	4f 91       	pop	r20
    dfc4:	3f 91       	pop	r19
    dfc6:	2f 91       	pop	r18
    dfc8:	0f 90       	pop	r0
    dfca:	0b be       	out	0x3b, r0	; 59
    dfcc:	0f 90       	pop	r0
    dfce:	0f be       	out	0x3f, r0	; 63
    dfd0:	0f 90       	pop	r0
    dfd2:	1f 90       	pop	r1
    dfd4:	18 95       	reti

0000dfd6 <__vector_25>:
__vector_25():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    dfd6:	1f 92       	push	r1
    dfd8:	0f 92       	push	r0
    dfda:	0f b6       	in	r0, 0x3f	; 63
    dfdc:	0f 92       	push	r0
    dfde:	11 24       	eor	r1, r1
    dfe0:	0b b6       	in	r0, 0x3b	; 59
    dfe2:	0f 92       	push	r0
    dfe4:	2f 93       	push	r18
    dfe6:	8f 93       	push	r24
    dfe8:	9f 93       	push	r25
    dfea:	ef 93       	push	r30
    dfec:	ff 93       	push	r31
_rx_complete_irq():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    dfee:	e0 91 3c 0f 	lds	r30, 0x0F3C	; 0x800f3c <Serial+0x10>
    dff2:	f0 91 3d 0f 	lds	r31, 0x0F3D	; 0x800f3d <Serial+0x11>
    dff6:	80 81       	ld	r24, Z
    dff8:	e0 91 42 0f 	lds	r30, 0x0F42	; 0x800f42 <Serial+0x16>
    dffc:	f0 91 43 0f 	lds	r31, 0x0F43	; 0x800f43 <Serial+0x17>
    e000:	82 fd       	sbrc	r24, 2
    e002:	1d c0       	rjmp	.+58     	; 0xe03e <__vector_25+0x68>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    e004:	90 81       	ld	r25, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    e006:	80 91 45 0f 	lds	r24, 0x0F45	; 0x800f45 <Serial+0x19>
    e00a:	8f 5f       	subi	r24, 0xFF	; 255
    e00c:	8f 73       	andi	r24, 0x3F	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    e00e:	20 91 46 0f 	lds	r18, 0x0F46	; 0x800f46 <Serial+0x1a>
    e012:	82 17       	cp	r24, r18
    e014:	41 f0       	breq	.+16     	; 0xe026 <__vector_25+0x50>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
    e016:	e0 91 45 0f 	lds	r30, 0x0F45	; 0x800f45 <Serial+0x19>
    e01a:	f0 e0       	ldi	r31, 0x00	; 0
    e01c:	e4 5d       	subi	r30, 0xD4	; 212
    e01e:	f0 4f       	sbci	r31, 0xF0	; 240
    e020:	95 8f       	std	Z+29, r25	; 0x1d
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial_private.h:115
      _rx_buffer_head = i;
    e022:	80 93 45 0f 	sts	0x0F45, r24	; 0x800f45 <Serial+0x19>
__vector_25():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    e026:	ff 91       	pop	r31
    e028:	ef 91       	pop	r30
    e02a:	9f 91       	pop	r25
    e02c:	8f 91       	pop	r24
    e02e:	2f 91       	pop	r18
    e030:	0f 90       	pop	r0
    e032:	0b be       	out	0x3b, r0	; 59
    e034:	0f 90       	pop	r0
    e036:	0f be       	out	0x3f, r0	; 63
    e038:	0f 90       	pop	r0
    e03a:	1f 90       	pop	r1
    e03c:	18 95       	reti
_rx_complete_irq():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    e03e:	80 81       	ld	r24, Z
    e040:	f2 cf       	rjmp	.-28     	; 0xe026 <__vector_25+0x50>

0000e042 <__vector_29>:
__vector_29():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:95
{
  return a2d_index;
}

ISR(ADC_vect)
{
    e042:	1f 92       	push	r1
    e044:	0f 92       	push	r0
    e046:	0f b6       	in	r0, 0x3f	; 63
    e048:	0f 92       	push	r0
    e04a:	11 24       	eor	r1, r1
    e04c:	0b b6       	in	r0, 0x3b	; 59
    e04e:	0f 92       	push	r0
    e050:	2f 93       	push	r18
    e052:	3f 93       	push	r19
    e054:	4f 93       	push	r20
    e056:	5f 93       	push	r21
    e058:	6f 93       	push	r22
    e05a:	7f 93       	push	r23
    e05c:	8f 93       	push	r24
    e05e:	9f 93       	push	r25
    e060:	af 93       	push	r26
    e062:	bf 93       	push	r27
    e064:	cf 93       	push	r28
    e066:	ef 93       	push	r30
    e068:	ff 93       	push	r31
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:96
  uint8_t back = SREG;
    e06a:	cf b7       	in	r28, 0x3f	; 63
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:97
  a2d_data = ADCL + (ADCH<<8);
    e06c:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
    e070:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:98
  a2d_interupt_func(a2d_input, a2d_data);
    e074:	e0 91 79 0b 	lds	r30, 0x0B79	; 0x800b79 <a2d_interupt_func>
    e078:	f0 91 7a 0b 	lds	r31, 0x0B7A	; 0x800b7a <a2d_interupt_func+0x1>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:97
}

ISR(ADC_vect)
{
  uint8_t back = SREG;
  a2d_data = ADCL + (ADCH<<8);
    e07c:	68 2f       	mov	r22, r24
    e07e:	70 e0       	ldi	r23, 0x00	; 0
    e080:	76 2f       	mov	r23, r22
    e082:	66 27       	eor	r22, r22
    e084:	69 0f       	add	r22, r25
    e086:	71 1d       	adc	r23, r1
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:98
  a2d_interupt_func(a2d_input, a2d_data);
    e088:	80 91 78 0b 	lds	r24, 0x0B78	; 0x800b78 <a2d_input>
    e08c:	19 95       	eicall
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:99
  SREG = back;
    e08e:	cf bf       	out	0x3f, r28	; 63
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:100
}
    e090:	ff 91       	pop	r31
    e092:	ef 91       	pop	r30
    e094:	cf 91       	pop	r28
    e096:	bf 91       	pop	r27
    e098:	af 91       	pop	r26
    e09a:	9f 91       	pop	r25
    e09c:	8f 91       	pop	r24
    e09e:	7f 91       	pop	r23
    e0a0:	6f 91       	pop	r22
    e0a2:	5f 91       	pop	r21
    e0a4:	4f 91       	pop	r20
    e0a6:	3f 91       	pop	r19
    e0a8:	2f 91       	pop	r18
    e0aa:	0f 90       	pop	r0
    e0ac:	0b be       	out	0x3b, r0	; 59
    e0ae:	0f 90       	pop	r0
    e0b0:	0f be       	out	0x3f, r0	; 63
    e0b2:	0f 90       	pop	r0
    e0b4:	1f 90       	pop	r1
    e0b6:	18 95       	reti

0000e0b8 <__vector_39>:
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:400
  // update twi state
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
    e0b8:	1f 92       	push	r1
    e0ba:	0f 92       	push	r0
    e0bc:	0f b6       	in	r0, 0x3f	; 63
    e0be:	0f 92       	push	r0
    e0c0:	11 24       	eor	r1, r1
    e0c2:	0b b6       	in	r0, 0x3b	; 59
    e0c4:	0f 92       	push	r0
    e0c6:	2f 93       	push	r18
    e0c8:	3f 93       	push	r19
    e0ca:	4f 93       	push	r20
    e0cc:	5f 93       	push	r21
    e0ce:	6f 93       	push	r22
    e0d0:	7f 93       	push	r23
    e0d2:	8f 93       	push	r24
    e0d4:	9f 93       	push	r25
    e0d6:	af 93       	push	r26
    e0d8:	bf 93       	push	r27
    e0da:	ef 93       	push	r30
    e0dc:	ff 93       	push	r31
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  switch(TW_STATUS){
    e0de:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    e0e2:	88 7f       	andi	r24, 0xF8	; 248
    e0e4:	80 36       	cpi	r24, 0x60	; 96
    e0e6:	09 f4       	brne	.+2      	; 0xe0ea <__vector_39+0x32>
    e0e8:	4d c0       	rjmp	.+154    	; 0xe184 <__vector_39+0xcc>
    e0ea:	08 f0       	brcs	.+2      	; 0xe0ee <__vector_39+0x36>
    e0ec:	40 c0       	rjmp	.+128    	; 0xe16e <__vector_39+0xb6>
    e0ee:	88 32       	cpi	r24, 0x28	; 40
    e0f0:	09 f4       	brne	.+2      	; 0xe0f4 <__vector_39+0x3c>
    e0f2:	a9 c0       	rjmp	.+338    	; 0xe246 <__vector_39+0x18e>
    e0f4:	28 f5       	brcc	.+74     	; 0xe140 <__vector_39+0x88>
    e0f6:	80 31       	cpi	r24, 0x10	; 16
    e0f8:	09 f4       	brne	.+2      	; 0xe0fc <__vector_39+0x44>
    e0fa:	9d c0       	rjmp	.+314    	; 0xe236 <__vector_39+0x17e>
    e0fc:	c8 f4       	brcc	.+50     	; 0xe130 <__vector_39+0x78>
    e0fe:	88 23       	and	r24, r24
    e100:	09 f4       	brne	.+2      	; 0xe104 <__vector_39+0x4c>
    e102:	fb c0       	rjmp	.+502    	; 0xe2fa <__vector_39+0x242>
    e104:	88 30       	cpi	r24, 0x08	; 8
    e106:	09 f4       	brne	.+2      	; 0xe10a <__vector_39+0x52>
    e108:	96 c0       	rjmp	.+300    	; 0xe236 <__vector_39+0x17e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:562
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    e10a:	ff 91       	pop	r31
    e10c:	ef 91       	pop	r30
    e10e:	bf 91       	pop	r27
    e110:	af 91       	pop	r26
    e112:	9f 91       	pop	r25
    e114:	8f 91       	pop	r24
    e116:	7f 91       	pop	r23
    e118:	6f 91       	pop	r22
    e11a:	5f 91       	pop	r21
    e11c:	4f 91       	pop	r20
    e11e:	3f 91       	pop	r19
    e120:	2f 91       	pop	r18
    e122:	0f 90       	pop	r0
    e124:	0b be       	out	0x3b, r0	; 59
    e126:	0f 90       	pop	r0
    e128:	0f be       	out	0x3f, r0	; 63
    e12a:	0f 90       	pop	r0
    e12c:	1f 90       	pop	r1
    e12e:	18 95       	reti
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    e130:	88 31       	cpi	r24, 0x18	; 24
    e132:	09 f4       	brne	.+2      	; 0xe136 <__vector_39+0x7e>
    e134:	88 c0       	rjmp	.+272    	; 0xe246 <__vector_39+0x18e>
    e136:	80 32       	cpi	r24, 0x20	; 32
    e138:	41 f7       	brne	.-48     	; 0xe10a <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:436
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    e13a:	80 93 29 0f 	sts	0x0F29, r24	; 0x800f29 <twi_error>
    e13e:	14 c0       	rjmp	.+40     	; 0xe168 <__vector_39+0xb0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    e140:	80 34       	cpi	r24, 0x40	; 64
    e142:	09 f4       	brne	.+2      	; 0xe146 <__vector_39+0x8e>
    e144:	9d c0       	rjmp	.+314    	; 0xe280 <__vector_39+0x1c8>
    e146:	40 f4       	brcc	.+16     	; 0xe158 <__vector_39+0xa0>
    e148:	80 33       	cpi	r24, 0x30	; 48
    e14a:	b9 f3       	breq	.-18     	; 0xe13a <__vector_39+0x82>
    e14c:	88 33       	cpi	r24, 0x38	; 56
    e14e:	e9 f6       	brne	.-70     	; 0xe10a <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:440
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    e150:	80 93 29 0f 	sts	0x0F29, r24	; 0x800f29 <twi_error>
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    e154:	85 ec       	ldi	r24, 0xC5	; 197
    e156:	b0 c0       	rjmp	.+352    	; 0xe2b8 <__vector_39+0x200>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    e158:	80 35       	cpi	r24, 0x50	; 80
    e15a:	09 f4       	brne	.+2      	; 0xe15e <__vector_39+0xa6>
    e15c:	85 c0       	rjmp	.+266    	; 0xe268 <__vector_39+0x1b0>
    e15e:	88 35       	cpi	r24, 0x58	; 88
    e160:	09 f4       	brne	.+2      	; 0xe164 <__vector_39+0xac>
    e162:	96 c0       	rjmp	.+300    	; 0xe290 <__vector_39+0x1d8>
    e164:	88 34       	cpi	r24, 0x48	; 72
    e166:	89 f6       	brne	.-94     	; 0xe10a <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:559
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
    e168:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <twi_stop>
    e16c:	ce cf       	rjmp	.-100    	; 0xe10a <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    e16e:	88 39       	cpi	r24, 0x98	; 152
    e170:	09 f4       	brne	.+2      	; 0xe174 <__vector_39+0xbc>
    e172:	8c c0       	rjmp	.+280    	; 0xe28c <__vector_39+0x1d4>
    e174:	38 f5       	brcc	.+78     	; 0xe1c4 <__vector_39+0x10c>
    e176:	88 37       	cpi	r24, 0x78	; 120
    e178:	29 f0       	breq	.+10     	; 0xe184 <__vector_39+0xcc>
    e17a:	50 f4       	brcc	.+20     	; 0xe190 <__vector_39+0xd8>
    e17c:	88 36       	cpi	r24, 0x68	; 104
    e17e:	11 f0       	breq	.+4      	; 0xe184 <__vector_39+0xcc>
    e180:	80 37       	cpi	r24, 0x70	; 112
    e182:	19 f6       	brne	.-122    	; 0xe10a <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:482
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    e184:	83 e0       	ldi	r24, 0x03	; 3
    e186:	80 93 2b 0f 	sts	0x0F2B, r24	; 0x800f2b <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:484
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    e18a:	10 92 76 0b 	sts	0x0B76, r1	; 0x800b76 <twi_rxBufferIndex>
    e18e:	57 c0       	rjmp	.+174    	; 0xe23e <__vector_39+0x186>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    e190:	88 38       	cpi	r24, 0x88	; 136
    e192:	09 f4       	brne	.+2      	; 0xe196 <__vector_39+0xde>
    e194:	7b c0       	rjmp	.+246    	; 0xe28c <__vector_39+0x1d4>
    e196:	80 39       	cpi	r24, 0x90	; 144
    e198:	19 f0       	breq	.+6      	; 0xe1a0 <__vector_39+0xe8>
    e19a:	80 38       	cpi	r24, 0x80	; 128
    e19c:	09 f0       	breq	.+2      	; 0xe1a0 <__vector_39+0xe8>
    e19e:	b5 cf       	rjmp	.-150    	; 0xe10a <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:490
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    e1a0:	80 91 76 0b 	lds	r24, 0x0B76	; 0x800b76 <twi_rxBufferIndex>
    e1a4:	80 32       	cpi	r24, 0x20	; 32
    e1a6:	08 f0       	brcs	.+2      	; 0xe1aa <__vector_39+0xf2>
    e1a8:	71 c0       	rjmp	.+226    	; 0xe28c <__vector_39+0x1d4>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:492
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    e1aa:	e0 91 76 0b 	lds	r30, 0x0B76	; 0x800b76 <twi_rxBufferIndex>
    e1ae:	81 e0       	ldi	r24, 0x01	; 1
    e1b0:	8e 0f       	add	r24, r30
    e1b2:	80 93 76 0b 	sts	0x0B76, r24	; 0x800b76 <twi_rxBufferIndex>
    e1b6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    e1ba:	f0 e0       	ldi	r31, 0x00	; 0
    e1bc:	ea 5a       	subi	r30, 0xAA	; 170
    e1be:	f4 4f       	sbci	r31, 0xF4	; 244
    e1c0:	80 83       	st	Z, r24
    e1c2:	3d c0       	rjmp	.+122    	; 0xe23e <__vector_39+0x186>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    e1c4:	80 3b       	cpi	r24, 0xB0	; 176
    e1c6:	39 f0       	breq	.+14     	; 0xe1d6 <__vector_39+0x11e>
    e1c8:	e0 f4       	brcc	.+56     	; 0xe202 <__vector_39+0x14a>
    e1ca:	80 3a       	cpi	r24, 0xA0	; 160
    e1cc:	09 f4       	brne	.+2      	; 0xe1d0 <__vector_39+0x118>
    e1ce:	79 c0       	rjmp	.+242    	; 0xe2c2 <__vector_39+0x20a>
    e1d0:	88 3a       	cpi	r24, 0xA8	; 168
    e1d2:	09 f0       	breq	.+2      	; 0xe1d6 <__vector_39+0x11e>
    e1d4:	9a cf       	rjmp	.-204    	; 0xe10a <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:521

    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    e1d6:	84 e0       	ldi	r24, 0x04	; 4
    e1d8:	80 93 2b 0f 	sts	0x0F2B, r24	; 0x800f2b <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:523
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    e1dc:	10 92 55 0b 	sts	0x0B55, r1	; 0x800b55 <twi_txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:525
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    e1e0:	10 92 54 0b 	sts	0x0B54, r1	; 0x800b54 <twi_txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:528
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    e1e4:	e0 91 cc 0e 	lds	r30, 0x0ECC	; 0x800ecc <twi_onSlaveTransmit>
    e1e8:	f0 91 cd 0e 	lds	r31, 0x0ECD	; 0x800ecd <twi_onSlaveTransmit+0x1>
    e1ec:	19 95       	eicall
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:530
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    e1ee:	80 91 54 0b 	lds	r24, 0x0B54	; 0x800b54 <twi_txBufferLength>
    e1f2:	81 11       	cpse	r24, r1
    e1f4:	0f c0       	rjmp	.+30     	; 0xe214 <__vector_39+0x15c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:531
        twi_txBufferLength = 1;
    e1f6:	81 e0       	ldi	r24, 0x01	; 1
    e1f8:	80 93 54 0b 	sts	0x0B54, r24	; 0x800b54 <twi_txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:532
        twi_txBuffer[0] = 0x00;
    e1fc:	10 92 34 0b 	sts	0x0B34, r1	; 0x800b34 <twi_txBuffer>
    e200:	09 c0       	rjmp	.+18     	; 0xe214 <__vector_39+0x15c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    e202:	80 3c       	cpi	r24, 0xC0	; 192
    e204:	09 f4       	brne	.+2      	; 0xe208 <__vector_39+0x150>
    e206:	a6 cf       	rjmp	.-180    	; 0xe154 <__vector_39+0x9c>
    e208:	88 3c       	cpi	r24, 0xC8	; 200
    e20a:	09 f4       	brne	.+2      	; 0xe20e <__vector_39+0x156>
    e20c:	a3 cf       	rjmp	.-186    	; 0xe154 <__vector_39+0x9c>
    e20e:	88 3b       	cpi	r24, 0xB8	; 184
    e210:	09 f0       	breq	.+2      	; 0xe214 <__vector_39+0x15c>
    e212:	7b cf       	rjmp	.-266    	; 0xe10a <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:538
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    e214:	e0 91 55 0b 	lds	r30, 0x0B55	; 0x800b55 <twi_txBufferIndex>
    e218:	81 e0       	ldi	r24, 0x01	; 1
    e21a:	8e 0f       	add	r24, r30
    e21c:	80 93 55 0b 	sts	0x0B55, r24	; 0x800b55 <twi_txBufferIndex>
    e220:	f0 e0       	ldi	r31, 0x00	; 0
    e222:	ec 5c       	subi	r30, 0xCC	; 204
    e224:	f4 4f       	sbci	r31, 0xF4	; 244
    e226:	80 81       	ld	r24, Z
    e228:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:540
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    e22c:	90 91 55 0b 	lds	r25, 0x0B55	; 0x800b55 <twi_txBufferIndex>
    e230:	80 91 54 0b 	lds	r24, 0x0B54	; 0x800b54 <twi_txBufferLength>
    e234:	29 c0       	rjmp	.+82     	; 0xe288 <__vector_39+0x1d0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:406
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    e236:	80 91 26 0f 	lds	r24, 0x0F26	; 0x800f26 <twi_slarw>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:416
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    e23a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    e23e:	85 ec       	ldi	r24, 0xC5	; 197
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:359
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    e240:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    e244:	62 cf       	rjmp	.-316    	; 0xe10a <__vector_39+0x52>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:414

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
    e246:	90 91 28 0f 	lds	r25, 0x0F28	; 0x800f28 <twi_masterBufferIndex>
    e24a:	80 91 27 0f 	lds	r24, 0x0F27	; 0x800f27 <twi_masterBufferLength>
    e24e:	98 17       	cp	r25, r24
    e250:	58 f5       	brcc	.+86     	; 0xe2a8 <__vector_39+0x1f0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:416
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    e252:	e0 91 28 0f 	lds	r30, 0x0F28	; 0x800f28 <twi_masterBufferIndex>
    e256:	81 e0       	ldi	r24, 0x01	; 1
    e258:	8e 0f       	add	r24, r30
    e25a:	80 93 28 0f 	sts	0x0F28, r24	; 0x800f28 <twi_masterBufferIndex>
    e25e:	f0 e0       	ldi	r31, 0x00	; 0
    e260:	eb 5f       	subi	r30, 0xFB	; 251
    e262:	f0 4f       	sbci	r31, 0xF0	; 240
    e264:	80 81       	ld	r24, Z
    e266:	e9 cf       	rjmp	.-46     	; 0xe23a <__vector_39+0x182>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:447
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    e268:	e0 91 28 0f 	lds	r30, 0x0F28	; 0x800f28 <twi_masterBufferIndex>
    e26c:	81 e0       	ldi	r24, 0x01	; 1
    e26e:	8e 0f       	add	r24, r30
    e270:	80 93 28 0f 	sts	0x0F28, r24	; 0x800f28 <twi_masterBufferIndex>
    e274:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    e278:	f0 e0       	ldi	r31, 0x00	; 0
    e27a:	eb 5f       	subi	r30, 0xFB	; 251
    e27c:	f0 4f       	sbci	r31, 0xF0	; 240
    e27e:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:451
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    e280:	90 91 28 0f 	lds	r25, 0x0F28	; 0x800f28 <twi_masterBufferIndex>
    e284:	80 91 27 0f 	lds	r24, 0x0F27	; 0x800f27 <twi_masterBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:540
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    e288:	98 17       	cp	r25, r24
    e28a:	c8 f2       	brcs	.-78     	; 0xe23e <__vector_39+0x186>
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    e28c:	85 e8       	ldi	r24, 0x85	; 133
    e28e:	d8 cf       	rjmp	.-80     	; 0xe240 <__vector_39+0x188>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:459
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    e290:	e0 91 28 0f 	lds	r30, 0x0F28	; 0x800f28 <twi_masterBufferIndex>
    e294:	81 e0       	ldi	r24, 0x01	; 1
    e296:	8e 0f       	add	r24, r30
    e298:	80 93 28 0f 	sts	0x0F28, r24	; 0x800f28 <twi_masterBufferIndex>
    e29c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    e2a0:	f0 e0       	ldi	r31, 0x00	; 0
    e2a2:	eb 5f       	subi	r30, 0xFB	; 251
    e2a4:	f0 4f       	sbci	r31, 0xF0	; 240
    e2a6:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:460
  if (twi_sendStop)
    e2a8:	80 91 2a 0f 	lds	r24, 0x0F2A	; 0x800f2a <twi_sendStop>
    e2ac:	81 11       	cpse	r24, r1
    e2ae:	5c cf       	rjmp	.-328    	; 0xe168 <__vector_39+0xb0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:463
          twi_stop();
  else {
    twi_inRepStart = true;  // we're going to send the START
    e2b0:	81 e0       	ldi	r24, 0x01	; 1
    e2b2:	80 93 25 0f 	sts	0x0F25, r24	; 0x800f25 <twi_inRepStart>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:467
    // don't enable the interrupt. We'll generate the start, but we
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    e2b6:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    e2b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:551
    case TW_ST_DATA_NACK: // received nack, we are done
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    e2bc:	10 92 2b 0f 	sts	0x0F2B, r1	; 0x800f2b <twi_state>
    e2c0:	24 cf       	rjmp	.-440    	; 0xe10a <__vector_39+0x52>
twi_releaseBus():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:393
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    e2c2:	85 ec       	ldi	r24, 0xC5	; 197
    e2c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:396

  // update twi state
  twi_state = TWI_READY;
    e2c8:	10 92 2b 0f 	sts	0x0F2B, r1	; 0x800f2b <twi_state>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:503
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    e2cc:	80 91 76 0b 	lds	r24, 0x0B76	; 0x800b76 <twi_rxBufferIndex>
    e2d0:	80 32       	cpi	r24, 0x20	; 32
    e2d2:	30 f4       	brcc	.+12     	; 0xe2e0 <__vector_39+0x228>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:504
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    e2d4:	e0 91 76 0b 	lds	r30, 0x0B76	; 0x800b76 <twi_rxBufferIndex>
    e2d8:	f0 e0       	ldi	r31, 0x00	; 0
    e2da:	ea 5a       	subi	r30, 0xAA	; 170
    e2dc:	f4 4f       	sbci	r31, 0xF4	; 244
    e2de:	10 82       	st	Z, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:507
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    e2e0:	60 91 76 0b 	lds	r22, 0x0B76	; 0x800b76 <twi_rxBufferIndex>
    e2e4:	70 e0       	ldi	r23, 0x00	; 0
    e2e6:	e0 91 ca 0e 	lds	r30, 0x0ECA	; 0x800eca <twi_onSlaveReceive>
    e2ea:	f0 91 cb 0e 	lds	r31, 0x0ECB	; 0x800ecb <twi_onSlaveReceive+0x1>
    e2ee:	86 e5       	ldi	r24, 0x56	; 86
    e2f0:	9b e0       	ldi	r25, 0x0B	; 11
    e2f2:	19 95       	eicall
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:509
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    e2f4:	10 92 76 0b 	sts	0x0B76, r1	; 0x800b76 <twi_rxBufferIndex>
    e2f8:	08 cf       	rjmp	.-496    	; 0xe10a <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:558

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    e2fa:	10 92 29 0f 	sts	0x0F29, r1	; 0x800f29 <twi_error>
    e2fe:	34 cf       	rjmp	.-408    	; 0xe168 <__vector_39+0xb0>

0000e300 <localtime>:
localtime():
    e300:	62 e1       	ldi	r22, 0x12	; 18
    e302:	76 e1       	ldi	r23, 0x16	; 22
    e304:	0e 94 87 71 	call	0xe30e	; 0xe30e <localtime_r>
    e308:	82 e1       	ldi	r24, 0x12	; 18
    e30a:	96 e1       	ldi	r25, 0x16	; 22
    e30c:	08 95       	ret

0000e30e <localtime_r>:
localtime_r():
    e30e:	cf 92       	push	r12
    e310:	df 92       	push	r13
    e312:	ef 92       	push	r14
    e314:	ff 92       	push	r15
    e316:	0f 93       	push	r16
    e318:	1f 93       	push	r17
    e31a:	cf 93       	push	r28
    e31c:	df 93       	push	r29
    e31e:	00 d0       	rcall	.+0      	; 0xe320 <localtime_r+0x12>
    e320:	1f 92       	push	r1
    e322:	cd b7       	in	r28, 0x3d	; 61
    e324:	de b7       	in	r29, 0x3e	; 62
    e326:	6c 01       	movw	r12, r24
    e328:	7b 01       	movw	r14, r22
    e32a:	e0 91 28 16 	lds	r30, 0x1628	; 0x801628 <__dst_ptr>
    e32e:	f0 91 29 16 	lds	r31, 0x1629	; 0x801629 <__dst_ptr+0x1>
    e332:	0f ef       	ldi	r16, 0xFF	; 255
    e334:	1f ef       	ldi	r17, 0xFF	; 255
    e336:	30 97       	sbiw	r30, 0x00	; 0
    e338:	21 f0       	breq	.+8      	; 0xe342 <localtime_r+0x34>
    e33a:	6e e1       	ldi	r22, 0x1E	; 30
    e33c:	76 e1       	ldi	r23, 0x16	; 22
    e33e:	19 95       	eicall
    e340:	8c 01       	movw	r16, r24
    e342:	f6 01       	movw	r30, r12
    e344:	80 81       	ld	r24, Z
    e346:	91 81       	ldd	r25, Z+1	; 0x01
    e348:	a2 81       	ldd	r26, Z+2	; 0x02
    e34a:	b3 81       	ldd	r27, Z+3	; 0x03
    e34c:	40 91 1e 16 	lds	r20, 0x161E	; 0x80161e <__utc_offset>
    e350:	50 91 1f 16 	lds	r21, 0x161F	; 0x80161f <__utc_offset+0x1>
    e354:	60 91 20 16 	lds	r22, 0x1620	; 0x801620 <__utc_offset+0x2>
    e358:	70 91 21 16 	lds	r23, 0x1621	; 0x801621 <__utc_offset+0x3>
    e35c:	84 0f       	add	r24, r20
    e35e:	95 1f       	adc	r25, r21
    e360:	a6 1f       	adc	r26, r22
    e362:	b7 1f       	adc	r27, r23
    e364:	10 16       	cp	r1, r16
    e366:	11 06       	cpc	r1, r17
    e368:	cc f0       	brlt	.+50     	; 0xe39c <localtime_r+0x8e>
    e36a:	89 83       	std	Y+1, r24	; 0x01
    e36c:	9a 83       	std	Y+2, r25	; 0x02
    e36e:	ab 83       	std	Y+3, r26	; 0x03
    e370:	bc 83       	std	Y+4, r27	; 0x04
    e372:	b7 01       	movw	r22, r14
    e374:	ce 01       	movw	r24, r28
    e376:	01 96       	adiw	r24, 0x01	; 1
    e378:	0e 94 d8 71 	call	0xe3b0	; 0xe3b0 <gmtime_r>
    e37c:	f7 01       	movw	r30, r14
    e37e:	13 87       	std	Z+11, r17	; 0x0b
    e380:	02 87       	std	Z+10, r16	; 0x0a
    e382:	0f 90       	pop	r0
    e384:	0f 90       	pop	r0
    e386:	0f 90       	pop	r0
    e388:	0f 90       	pop	r0
    e38a:	df 91       	pop	r29
    e38c:	cf 91       	pop	r28
    e38e:	1f 91       	pop	r17
    e390:	0f 91       	pop	r16
    e392:	ff 90       	pop	r15
    e394:	ef 90       	pop	r14
    e396:	df 90       	pop	r13
    e398:	cf 90       	pop	r12
    e39a:	08 95       	ret
    e39c:	a8 01       	movw	r20, r16
    e39e:	01 2e       	mov	r0, r17
    e3a0:	00 0c       	add	r0, r0
    e3a2:	66 0b       	sbc	r22, r22
    e3a4:	77 0b       	sbc	r23, r23
    e3a6:	84 0f       	add	r24, r20
    e3a8:	95 1f       	adc	r25, r21
    e3aa:	a6 1f       	adc	r26, r22
    e3ac:	b7 1f       	adc	r27, r23
    e3ae:	dd cf       	rjmp	.-70     	; 0xe36a <localtime_r+0x5c>

0000e3b0 <gmtime_r>:
gmtime_r():
    e3b0:	cf 92       	push	r12
    e3b2:	df 92       	push	r13
    e3b4:	ef 92       	push	r14
    e3b6:	ff 92       	push	r15
    e3b8:	0f 93       	push	r16
    e3ba:	1f 93       	push	r17
    e3bc:	cf 93       	push	r28
    e3be:	df 93       	push	r29
    e3c0:	00 d0       	rcall	.+0      	; 0xe3c2 <gmtime_r+0x12>
    e3c2:	00 d0       	rcall	.+0      	; 0xe3c4 <gmtime_r+0x14>
    e3c4:	1f 92       	push	r1
    e3c6:	1f 92       	push	r1
    e3c8:	cd b7       	in	r28, 0x3d	; 61
    e3ca:	de b7       	in	r29, 0x3e	; 62
    e3cc:	8b 01       	movw	r16, r22
    e3ce:	fc 01       	movw	r30, r24
    e3d0:	60 81       	ld	r22, Z
    e3d2:	71 81       	ldd	r23, Z+1	; 0x01
    e3d4:	82 81       	ldd	r24, Z+2	; 0x02
    e3d6:	93 81       	ldd	r25, Z+3	; 0x03
    e3d8:	20 e8       	ldi	r18, 0x80	; 128
    e3da:	31 e5       	ldi	r19, 0x51	; 81
    e3dc:	41 e0       	ldi	r20, 0x01	; 1
    e3de:	50 e0       	ldi	r21, 0x00	; 0
    e3e0:	0e 94 31 8a 	call	0x11462	; 0x11462 <__udivmodsi4>
    e3e4:	69 01       	movw	r12, r18
    e3e6:	7a 01       	movw	r14, r20
    e3e8:	2c e3       	ldi	r18, 0x3C	; 60
    e3ea:	30 e0       	ldi	r19, 0x00	; 0
    e3ec:	40 e0       	ldi	r20, 0x00	; 0
    e3ee:	50 e0       	ldi	r21, 0x00	; 0
    e3f0:	0e 94 53 8a 	call	0x114a6	; 0x114a6 <__divmodsi4>
    e3f4:	29 83       	std	Y+1, r18	; 0x01
    e3f6:	3a 83       	std	Y+2, r19	; 0x02
    e3f8:	4b 83       	std	Y+3, r20	; 0x03
    e3fa:	5c 83       	std	Y+4, r21	; 0x04
    e3fc:	89 81       	ldd	r24, Y+1	; 0x01
    e3fe:	9a 81       	ldd	r25, Y+2	; 0x02
    e400:	ab 81       	ldd	r26, Y+3	; 0x03
    e402:	bc 81       	ldd	r27, Y+4	; 0x04
    e404:	f8 01       	movw	r30, r16
    e406:	60 83       	st	Z, r22
    e408:	6c e3       	ldi	r22, 0x3C	; 60
    e40a:	70 e0       	ldi	r23, 0x00	; 0
    e40c:	0e 94 1d 8a 	call	0x1143a	; 0x1143a <__divmodhi4>
    e410:	dc 01       	movw	r26, r24
    e412:	f8 01       	movw	r30, r16
    e414:	a1 83       	std	Z+1, r26	; 0x01
    e416:	62 83       	std	Z+2, r22	; 0x02
    e418:	c6 01       	movw	r24, r12
    e41a:	06 96       	adiw	r24, 0x06	; 6
    e41c:	67 e0       	ldi	r22, 0x07	; 7
    e41e:	70 e0       	ldi	r23, 0x00	; 0
    e420:	0e 94 09 8a 	call	0x11412	; 0x11412 <__udivmodhi4>
    e424:	84 83       	std	Z+4, r24	; 0x04
    e426:	2d ea       	ldi	r18, 0xAD	; 173
    e428:	3e e8       	ldi	r19, 0x8E	; 142
    e42a:	40 e0       	ldi	r20, 0x00	; 0
    e42c:	50 e0       	ldi	r21, 0x00	; 0
    e42e:	c7 01       	movw	r24, r14
    e430:	b6 01       	movw	r22, r12
    e432:	0e 94 53 8a 	call	0x114a6	; 0x114a6 <__divmodsi4>
    e436:	29 83       	std	Y+1, r18	; 0x01
    e438:	3a 83       	std	Y+2, r19	; 0x02
    e43a:	6d 83       	std	Y+5, r22	; 0x05
    e43c:	7e 83       	std	Y+6, r23	; 0x06
    e43e:	8f 83       	std	Y+7, r24	; 0x07
    e440:	98 87       	std	Y+8, r25	; 0x08
    e442:	89 81       	ldd	r24, Y+1	; 0x01
    e444:	9a 81       	ldd	r25, Y+2	; 0x02
    e446:	24 e6       	ldi	r18, 0x64	; 100
    e448:	28 9f       	mul	r18, r24
    e44a:	60 01       	movw	r12, r0
    e44c:	29 9f       	mul	r18, r25
    e44e:	d0 0c       	add	r13, r0
    e450:	11 24       	eor	r1, r1
    e452:	6d 81       	ldd	r22, Y+5	; 0x05
    e454:	7e 81       	ldd	r23, Y+6	; 0x06
    e456:	8f 81       	ldd	r24, Y+7	; 0x07
    e458:	98 85       	ldd	r25, Y+8	; 0x08
    e45a:	25 eb       	ldi	r18, 0xB5	; 181
    e45c:	35 e0       	ldi	r19, 0x05	; 5
    e45e:	40 e0       	ldi	r20, 0x00	; 0
    e460:	50 e0       	ldi	r21, 0x00	; 0
    e462:	0e 94 53 8a 	call	0x114a6	; 0x114a6 <__divmodsi4>
    e466:	29 83       	std	Y+1, r18	; 0x01
    e468:	3a 83       	std	Y+2, r19	; 0x02
    e46a:	6d 83       	std	Y+5, r22	; 0x05
    e46c:	7e 83       	std	Y+6, r23	; 0x06
    e46e:	e9 80       	ldd	r14, Y+1	; 0x01
    e470:	fa 80       	ldd	r15, Y+2	; 0x02
    e472:	ee 0c       	add	r14, r14
    e474:	ff 1c       	adc	r15, r15
    e476:	ee 0c       	add	r14, r14
    e478:	ff 1c       	adc	r15, r15
    e47a:	ec 0c       	add	r14, r12
    e47c:	fd 1c       	adc	r15, r13
    e47e:	8d 81       	ldd	r24, Y+5	; 0x05
    e480:	9e 81       	ldd	r25, Y+6	; 0x06
    e482:	f5 e6       	ldi	r31, 0x65	; 101
    e484:	ef 16       	cp	r14, r31
    e486:	f1 04       	cpc	r15, r1
    e488:	08 f4       	brcc	.+2      	; 0xe48c <gmtime_r+0xdc>
    e48a:	3f c0       	rjmp	.+126    	; 0xe50a <gmtime_r+0x15a>
    e48c:	01 96       	adiw	r24, 0x01	; 1
    e48e:	21 e0       	ldi	r18, 0x01	; 1
    e490:	30 e0       	ldi	r19, 0x00	; 0
    e492:	a9 01       	movw	r20, r18
    e494:	44 59       	subi	r20, 0x94	; 148
    e496:	5e 4f       	sbci	r21, 0xFE	; 254
    e498:	48 17       	cp	r20, r24
    e49a:	59 07       	cpc	r21, r25
    e49c:	60 f4       	brcc	.+24     	; 0xe4b6 <gmtime_r+0x106>
    e49e:	6d e6       	ldi	r22, 0x6D	; 109
    e4a0:	71 e0       	ldi	r23, 0x01	; 1
    e4a2:	82 1b       	sub	r24, r18
    e4a4:	93 0b       	sbc	r25, r19
    e4a6:	0e 94 1d 8a 	call	0x1143a	; 0x1143a <__divmodhi4>
    e4aa:	dc 01       	movw	r26, r24
    e4ac:	e6 0e       	add	r14, r22
    e4ae:	f7 1e       	adc	r15, r23
    e4b0:	cd 01       	movw	r24, r26
    e4b2:	30 e0       	ldi	r19, 0x00	; 0
    e4b4:	20 e0       	ldi	r18, 0x00	; 0
    e4b6:	44 e6       	ldi	r20, 0x64	; 100
    e4b8:	e4 0e       	add	r14, r20
    e4ba:	f1 1c       	adc	r15, r1
    e4bc:	f8 01       	movw	r30, r16
    e4be:	f7 82       	std	Z+7, r15	; 0x07
    e4c0:	e6 82       	std	Z+6, r14	; 0x06
    e4c2:	91 87       	std	Z+9, r25	; 0x09
    e4c4:	80 87       	std	Z+8, r24	; 0x08
    e4c6:	25 5c       	subi	r18, 0xC5	; 197
    e4c8:	3f 4f       	sbci	r19, 0xFF	; 255
    e4ca:	82 17       	cp	r24, r18
    e4cc:	93 07       	cpc	r25, r19
    e4ce:	38 f5       	brcc	.+78     	; 0xe51e <gmtime_r+0x16e>
    e4d0:	6f e1       	ldi	r22, 0x1F	; 31
    e4d2:	70 e0       	ldi	r23, 0x00	; 0
    e4d4:	0e 94 1d 8a 	call	0x1143a	; 0x1143a <__divmodhi4>
    e4d8:	dc 01       	movw	r26, r24
    e4da:	f8 01       	movw	r30, r16
    e4dc:	65 83       	std	Z+5, r22	; 0x05
    e4de:	a3 83       	std	Z+3, r26	; 0x03
    e4e0:	f8 01       	movw	r30, r16
    e4e2:	13 86       	std	Z+11, r1	; 0x0b
    e4e4:	12 86       	std	Z+10, r1	; 0x0a
    e4e6:	83 81       	ldd	r24, Z+3	; 0x03
    e4e8:	8f 5f       	subi	r24, 0xFF	; 255
    e4ea:	83 83       	std	Z+3, r24	; 0x03
    e4ec:	28 96       	adiw	r28, 0x08	; 8
    e4ee:	0f b6       	in	r0, 0x3f	; 63
    e4f0:	f8 94       	cli
    e4f2:	de bf       	out	0x3e, r29	; 62
    e4f4:	0f be       	out	0x3f, r0	; 63
    e4f6:	cd bf       	out	0x3d, r28	; 61
    e4f8:	df 91       	pop	r29
    e4fa:	cf 91       	pop	r28
    e4fc:	1f 91       	pop	r17
    e4fe:	0f 91       	pop	r16
    e500:	ff 90       	pop	r15
    e502:	ef 90       	pop	r14
    e504:	df 90       	pop	r13
    e506:	cf 90       	pop	r12
    e508:	08 95       	ret
    e50a:	51 e0       	ldi	r21, 0x01	; 1
    e50c:	40 e0       	ldi	r20, 0x00	; 0
    e50e:	24 e6       	ldi	r18, 0x64	; 100
    e510:	e2 16       	cp	r14, r18
    e512:	f1 04       	cpc	r15, r1
    e514:	09 f4       	brne	.+2      	; 0xe518 <gmtime_r+0x168>
    e516:	50 e0       	ldi	r21, 0x00	; 0
    e518:	25 2f       	mov	r18, r21
    e51a:	34 2f       	mov	r19, r20
    e51c:	ba cf       	rjmp	.-140    	; 0xe492 <gmtime_r+0xe2>
    e51e:	69 e9       	ldi	r22, 0x99	; 153
    e520:	70 e0       	ldi	r23, 0x00	; 0
    e522:	82 1b       	sub	r24, r18
    e524:	93 0b       	sbc	r25, r19
    e526:	0e 94 1d 8a 	call	0x1143a	; 0x1143a <__divmodhi4>
    e52a:	dc 01       	movw	r26, r24
    e52c:	26 2f       	mov	r18, r22
    e52e:	22 0f       	add	r18, r18
    e530:	22 0f       	add	r18, r18
    e532:	f2 2e       	mov	r15, r18
    e534:	f6 0e       	add	r15, r22
    e536:	6d e3       	ldi	r22, 0x3D	; 61
    e538:	70 e0       	ldi	r23, 0x00	; 0
    e53a:	cd 01       	movw	r24, r26
    e53c:	0e 94 1d 8a 	call	0x1143a	; 0x1143a <__divmodhi4>
    e540:	dc 01       	movw	r26, r24
    e542:	e6 2e       	mov	r14, r22
    e544:	ee 0c       	add	r14, r14
    e546:	6f e1       	ldi	r22, 0x1F	; 31
    e548:	70 e0       	ldi	r23, 0x00	; 0
    e54a:	cd 01       	movw	r24, r26
    e54c:	0e 94 1d 8a 	call	0x1143a	; 0x1143a <__divmodhi4>
    e550:	dc 01       	movw	r26, r24
    e552:	22 e0       	ldi	r18, 0x02	; 2
    e554:	26 0f       	add	r18, r22
    e556:	2f 0d       	add	r18, r15
    e558:	2e 0d       	add	r18, r14
    e55a:	f8 01       	movw	r30, r16
    e55c:	25 83       	std	Z+5, r18	; 0x05
    e55e:	bf cf       	rjmp	.-130    	; 0xe4de <gmtime_r+0x12e>

0000e560 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>:
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:92
  JsonObjectData *asObject() {
    return type == JSON_OBJECT ? &content.asObject : 0;
  }

  template <typename T>
  T asInteger() const {
    e560:	fc 01       	movw	r30, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
    switch (type) {
    e562:	80 81       	ld	r24, Z
    e564:	91 81       	ldd	r25, Z+1	; 0x01
    e566:	87 30       	cpi	r24, 0x07	; 7
    e568:	91 05       	cpc	r25, r1
    e56a:	38 f4       	brcc	.+14     	; 0xe57a <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x1a>
    e56c:	85 30       	cpi	r24, 0x05	; 5
    e56e:	91 05       	cpc	r25, r1
    e570:	88 f4       	brcc	.+34     	; 0xe594 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x34>
    e572:	03 97       	sbiw	r24, 0x03	; 3
    e574:	a0 f4       	brcc	.+40     	; 0xe59e <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x3e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
    e576:	80 e0       	ldi	r24, 0x00	; 0
    e578:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
    e57a:	87 30       	cpi	r24, 0x07	; 7
    e57c:	91 05       	cpc	r25, r1
    e57e:	61 f0       	breq	.+24     	; 0xe598 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x38>
    e580:	0a 97       	sbiw	r24, 0x0a	; 10
    e582:	c9 f7       	brne	.-14     	; 0xe576 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x16>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:103
        return T(~content.asInteger + 1);
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
      case JSON_FLOAT:
        return T(content.asFloat);
    e584:	62 81       	ldd	r22, Z+2	; 0x02
    e586:	73 81       	ldd	r23, Z+3	; 0x03
    e588:	84 81       	ldd	r24, Z+4	; 0x04
    e58a:	95 81       	ldd	r25, Z+5	; 0x05
    e58c:	0e 94 72 8b 	call	0x116e4	; 0x116e4 <__fixunssfsi>
    e590:	86 2f       	mov	r24, r22
    e592:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:96
  template <typename T>
  T asInteger() const {
    switch (type) {
      case JSON_POSITIVE_INTEGER:
      case JSON_BOOLEAN:
        return T(content.asInteger);
    e594:	82 81       	ldd	r24, Z+2	; 0x02
    e596:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:98
      case JSON_NEGATIVE_INTEGER:
        return T(~content.asInteger + 1);
    e598:	82 81       	ldd	r24, Z+2	; 0x02
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    e59a:	81 95       	neg	r24
    e59c:	08 95       	ret
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:101
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
    e59e:	02 80       	ldd	r0, Z+2	; 0x02
    e5a0:	f3 81       	ldd	r31, Z+3	; 0x03
    e5a2:	e0 2d       	mov	r30, r0
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
    e5a4:	30 97       	sbiw	r30, 0x00	; 0
    e5a6:	39 f3       	breq	.-50     	; 0xe576 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x16>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18

  if (*s == 't') return 1;  // "true"
    e5a8:	80 81       	ld	r24, Z
    e5aa:	84 37       	cpi	r24, 0x74	; 116
    e5ac:	c9 f0       	breq	.+50     	; 0xe5e0 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x80>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  T result = 0;
  bool negative_result = false;

  switch (*s) {
    e5ae:	8b 32       	cpi	r24, 0x2B	; 43
    e5b0:	89 f0       	breq	.+34     	; 0xe5d4 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x74>
    e5b2:	8d 32       	cpi	r24, 0x2D	; 45
    e5b4:	81 f4       	brne	.+32     	; 0xe5d6 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x76>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:26
    case '-':
      negative_result = true;
      s++;
    e5b6:	31 96       	adiw	r30, 0x01	; 1
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:25
  T result = 0;
  bool negative_result = false;

  switch (*s) {
    case '-':
      negative_result = true;
    e5b8:	91 e0       	ldi	r25, 0x01	; 1
parseInteger():
    e5ba:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
      s++;
      break;
  }

  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    e5bc:	2a e0       	ldi	r18, 0x0A	; 10
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
    e5be:	61 91       	ld	r22, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    e5c0:	30 ed       	ldi	r19, 0xD0	; 208
    e5c2:	36 0f       	add	r19, r22
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    e5c4:	3a 30       	cpi	r19, 0x0A	; 10
    e5c6:	48 f4       	brcc	.+18     	; 0xe5da <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x7a>
    e5c8:	82 9f       	mul	r24, r18
    e5ca:	60 0d       	add	r22, r0
    e5cc:	11 24       	eor	r1, r1
    e5ce:	86 2f       	mov	r24, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
    result = T(result * 10 + T(*s - '0'));
    e5d0:	80 53       	subi	r24, 0x30	; 48
    e5d2:	f5 cf       	rjmp	.-22     	; 0xe5be <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x5e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
    e5d4:	31 96       	adiw	r30, 0x01	; 1
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
    e5d6:	90 e0       	ldi	r25, 0x00	; 0
    e5d8:	f0 cf       	rjmp	.-32     	; 0xe5ba <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x5a>
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    e5da:	91 11       	cpse	r25, r1
    e5dc:	de cf       	rjmp	.-68     	; 0xe59a <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x3a>
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:107
      case JSON_FLOAT:
        return T(content.asFloat);
      default:
        return 0;
    }
  }
    e5de:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"
    e5e0:	81 e0       	ldi	r24, 0x01	; 1
    e5e2:	fd cf       	rjmp	.-6      	; 0xe5de <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x7e>

0000e5e4 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.66]>:
_Z28thermostat_ring_update_biteshhh.constprop.66():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:204
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
}
void thermostat_ring_update_bites(uint8_t idx, uint8_t bits, uint8_t sets)
    e5e4:	1f 93       	push	r17
    e5e6:	cf 93       	push	r28
    e5e8:	df 93       	push	r29
    e5ea:	16 2f       	mov	r17, r22
thermostat_ring_get_status_data():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:193
}
//////////////////////////////////////
//// nastaveni/ziska modu k ringu termostatu
uint8_t thermostat_ring_get_status_data(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites);
    e5ec:	91 e2       	ldi	r25, 0x21	; 33
    e5ee:	89 9f       	mul	r24, r25
    e5f0:	e0 01       	movw	r28, r0
    e5f2:	11 24       	eor	r1, r1
    e5f4:	c8 5a       	subi	r28, 0xA8	; 168
    e5f6:	de 4f       	sbci	r29, 0xFE	; 254
    e5f8:	ce 01       	movw	r24, r28
    e5fa:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224]>
    e5fe:	68 2f       	mov	r22, r24
_Z28thermostat_ring_update_biteshhh.constprop.66():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:207
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
}
void thermostat_ring_update_bites(uint8_t idx, uint8_t bits, uint8_t sets)
{
  uint8_t b = thermostat_ring_get_status_data(idx);
  if (sets == 0) cbi(b, bits);
    e600:	11 11       	cpse	r17, r1
    e602:	07 c0       	rjmp	.+14     	; 0xe612 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.66]+0x2e>
    e604:	6e 7f       	andi	r22, 0xFE	; 254
thermostat_ring_set_status_bites():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:202
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
    e606:	ce 01       	movw	r24, r28
_Z28thermostat_ring_update_biteshhh.constprop.66():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:210
{
  uint8_t b = thermostat_ring_get_status_data(idx);
  if (sets == 0) cbi(b, bits);
  else sbi(b, bits);
  thermostat_ring_set_status_bites(idx, b);
}
    e608:	df 91       	pop	r29
    e60a:	cf 91       	pop	r28
    e60c:	1f 91       	pop	r17
thermostat_ring_set_status_bites():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:202
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
    e60e:	0c 94 81 44 	jmp	0x8902	; 0x8902 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220]>
_Z28thermostat_ring_update_biteshhh.constprop.66():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:208
}
void thermostat_ring_update_bites(uint8_t idx, uint8_t bits, uint8_t sets)
{
  uint8_t b = thermostat_ring_get_status_data(idx);
  if (sets == 0) cbi(b, bits);
  else sbi(b, bits);
    e612:	61 60       	ori	r22, 0x01	; 1
    e614:	f8 cf       	rjmp	.-16     	; 0xe606 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.66]+0x22>

0000e616 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.6788>:
_GLOBAL__I_65535_0_room_control_v3.ino.cpp.o.6788():
    e616:	0f 93       	push	r16
    e618:	1f 93       	push	r17
    e61a:	cf 93       	push	r28
    e61c:	df 93       	push	r29
    e61e:	10 92 2f 0f 	sts	0x0F2F, r1	; 0x800f2f <Serial+0x3>
    e622:	10 92 2e 0f 	sts	0x0F2E, r1	; 0x800f2e <Serial+0x2>
    e626:	88 ee       	ldi	r24, 0xE8	; 232
    e628:	93 e0       	ldi	r25, 0x03	; 3
    e62a:	a0 e0       	ldi	r26, 0x00	; 0
    e62c:	b0 e0       	ldi	r27, 0x00	; 0
    e62e:	80 93 30 0f 	sts	0x0F30, r24	; 0x800f30 <Serial+0x4>
    e632:	90 93 31 0f 	sts	0x0F31, r25	; 0x800f31 <Serial+0x5>
    e636:	a0 93 32 0f 	sts	0x0F32, r26	; 0x800f32 <Serial+0x6>
    e63a:	b0 93 33 0f 	sts	0x0F33, r27	; 0x800f33 <Serial+0x7>
    e63e:	2a e5       	ldi	r18, 0x5A	; 90
    e640:	32 e0       	ldi	r19, 0x02	; 2
    e642:	30 93 2d 0f 	sts	0x0F2D, r19	; 0x800f2d <Serial+0x1>
    e646:	20 93 2c 0f 	sts	0x0F2C, r18	; 0x800f2c <Serial>
    e64a:	25 ec       	ldi	r18, 0xC5	; 197
    e64c:	30 e0       	ldi	r19, 0x00	; 0
    e64e:	30 93 39 0f 	sts	0x0F39, r19	; 0x800f39 <Serial+0xd>
    e652:	20 93 38 0f 	sts	0x0F38, r18	; 0x800f38 <Serial+0xc>
    e656:	24 ec       	ldi	r18, 0xC4	; 196
    e658:	30 e0       	ldi	r19, 0x00	; 0
    e65a:	30 93 3b 0f 	sts	0x0F3B, r19	; 0x800f3b <Serial+0xf>
    e65e:	20 93 3a 0f 	sts	0x0F3A, r18	; 0x800f3a <Serial+0xe>
    e662:	20 ec       	ldi	r18, 0xC0	; 192
    e664:	30 e0       	ldi	r19, 0x00	; 0
    e666:	30 93 3d 0f 	sts	0x0F3D, r19	; 0x800f3d <Serial+0x11>
    e66a:	20 93 3c 0f 	sts	0x0F3C, r18	; 0x800f3c <Serial+0x10>
    e66e:	21 ec       	ldi	r18, 0xC1	; 193
    e670:	30 e0       	ldi	r19, 0x00	; 0
    e672:	30 93 3f 0f 	sts	0x0F3F, r19	; 0x800f3f <Serial+0x13>
    e676:	20 93 3e 0f 	sts	0x0F3E, r18	; 0x800f3e <Serial+0x12>
    e67a:	22 ec       	ldi	r18, 0xC2	; 194
    e67c:	30 e0       	ldi	r19, 0x00	; 0
    e67e:	30 93 41 0f 	sts	0x0F41, r19	; 0x800f41 <Serial+0x15>
    e682:	20 93 40 0f 	sts	0x0F40, r18	; 0x800f40 <Serial+0x14>
    e686:	26 ec       	ldi	r18, 0xC6	; 198
    e688:	30 e0       	ldi	r19, 0x00	; 0
    e68a:	30 93 43 0f 	sts	0x0F43, r19	; 0x800f43 <Serial+0x17>
    e68e:	20 93 42 0f 	sts	0x0F42, r18	; 0x800f42 <Serial+0x16>
    e692:	10 92 45 0f 	sts	0x0F45, r1	; 0x800f45 <Serial+0x19>
    e696:	10 92 46 0f 	sts	0x0F46, r1	; 0x800f46 <Serial+0x1a>
    e69a:	10 92 47 0f 	sts	0x0F47, r1	; 0x800f47 <Serial+0x1b>
    e69e:	10 92 48 0f 	sts	0x0F48, r1	; 0x800f48 <Serial+0x1c>
    e6a2:	c2 ee       	ldi	r28, 0xE2	; 226
    e6a4:	d2 e0       	ldi	r29, 0x02	; 2
    e6a6:	d0 93 ca 0f 	sts	0x0FCA, r29	; 0x800fca <_ZL11INADDR_NONE.lto_priv.203+0x1>
    e6aa:	c0 93 c9 0f 	sts	0x0FC9, r28	; 0x800fc9 <_ZL11INADDR_NONE.lto_priv.203>
    e6ae:	10 92 cb 0f 	sts	0x0FCB, r1	; 0x800fcb <_ZL11INADDR_NONE.lto_priv.203+0x2>
    e6b2:	10 92 cc 0f 	sts	0x0FCC, r1	; 0x800fcc <_ZL11INADDR_NONE.lto_priv.203+0x3>
    e6b6:	10 92 cd 0f 	sts	0x0FCD, r1	; 0x800fcd <_ZL11INADDR_NONE.lto_priv.203+0x4>
    e6ba:	10 92 ce 0f 	sts	0x0FCE, r1	; 0x800fce <_ZL11INADDR_NONE.lto_priv.203+0x5>
    e6be:	10 92 f9 11 	sts	0x11F9, r1	; 0x8011f9 <Wire+0x3>
    e6c2:	10 92 f8 11 	sts	0x11F8, r1	; 0x8011f8 <Wire+0x2>
    e6c6:	80 93 fa 11 	sts	0x11FA, r24	; 0x8011fa <Wire+0x4>
    e6ca:	90 93 fb 11 	sts	0x11FB, r25	; 0x8011fb <Wire+0x5>
    e6ce:	a0 93 fc 11 	sts	0x11FC, r26	; 0x8011fc <Wire+0x6>
    e6d2:	b0 93 fd 11 	sts	0x11FD, r27	; 0x8011fd <Wire+0x7>
    e6d6:	8c e6       	ldi	r24, 0x6C	; 108
    e6d8:	92 e0       	ldi	r25, 0x02	; 2
    e6da:	90 93 f7 11 	sts	0x11F7, r25	; 0x8011f7 <Wire+0x1>
    e6de:	80 93 f6 11 	sts	0x11F6, r24	; 0x8011f6 <Wire>
    e6e2:	d0 93 d0 0f 	sts	0x0FD0, r29	; 0x800fd0 <_ZL11INADDR_NONE.lto_priv.202+0x1>
    e6e6:	c0 93 cf 0f 	sts	0x0FCF, r28	; 0x800fcf <_ZL11INADDR_NONE.lto_priv.202>
    e6ea:	10 92 d1 0f 	sts	0x0FD1, r1	; 0x800fd1 <_ZL11INADDR_NONE.lto_priv.202+0x2>
    e6ee:	10 92 d2 0f 	sts	0x0FD2, r1	; 0x800fd2 <_ZL11INADDR_NONE.lto_priv.202+0x3>
    e6f2:	10 92 d3 0f 	sts	0x0FD3, r1	; 0x800fd3 <_ZL11INADDR_NONE.lto_priv.202+0x4>
    e6f6:	10 92 d4 0f 	sts	0x0FD4, r1	; 0x800fd4 <_ZL11INADDR_NONE.lto_priv.202+0x5>
    e6fa:	80 e5       	ldi	r24, 0x50	; 80
    e6fc:	80 93 d5 0f 	sts	0x0FD5, r24	; 0x800fd5 <wiznet_SPI_settings>
    e700:	81 e0       	ldi	r24, 0x01	; 1
    e702:	80 93 d6 0f 	sts	0x0FD6, r24	; 0x800fd6 <wiznet_SPI_settings+0x1>
    e706:	d0 93 d8 0f 	sts	0x0FD8, r29	; 0x800fd8 <_ZL11INADDR_NONE.lto_priv.201+0x1>
    e70a:	c0 93 d7 0f 	sts	0x0FD7, r28	; 0x800fd7 <_ZL11INADDR_NONE.lto_priv.201>
    e70e:	10 92 d9 0f 	sts	0x0FD9, r1	; 0x800fd9 <_ZL11INADDR_NONE.lto_priv.201+0x2>
    e712:	10 92 da 0f 	sts	0x0FDA, r1	; 0x800fda <_ZL11INADDR_NONE.lto_priv.201+0x3>
    e716:	10 92 db 0f 	sts	0x0FDB, r1	; 0x800fdb <_ZL11INADDR_NONE.lto_priv.201+0x4>
    e71a:	10 92 dc 0f 	sts	0x0FDC, r1	; 0x800fdc <_ZL11INADDR_NONE.lto_priv.201+0x5>
    e71e:	d0 93 de 0f 	sts	0x0FDE, r29	; 0x800fde <_ZL11INADDR_NONE.lto_priv.200+0x1>
    e722:	c0 93 dd 0f 	sts	0x0FDD, r28	; 0x800fdd <_ZL11INADDR_NONE.lto_priv.200>
    e726:	10 92 df 0f 	sts	0x0FDF, r1	; 0x800fdf <_ZL11INADDR_NONE.lto_priv.200+0x2>
    e72a:	10 92 e0 0f 	sts	0x0FE0, r1	; 0x800fe0 <_ZL11INADDR_NONE.lto_priv.200+0x3>
    e72e:	10 92 e1 0f 	sts	0x0FE1, r1	; 0x800fe1 <_ZL11INADDR_NONE.lto_priv.200+0x4>
    e732:	10 92 e2 0f 	sts	0x0FE2, r1	; 0x800fe2 <_ZL11INADDR_NONE.lto_priv.200+0x5>
    e736:	d0 93 e4 0f 	sts	0x0FE4, r29	; 0x800fe4 <_ZL11INADDR_NONE.lto_priv.199+0x1>
    e73a:	c0 93 e3 0f 	sts	0x0FE3, r28	; 0x800fe3 <_ZL11INADDR_NONE.lto_priv.199>
    e73e:	10 92 e5 0f 	sts	0x0FE5, r1	; 0x800fe5 <_ZL11INADDR_NONE.lto_priv.199+0x2>
    e742:	10 92 e6 0f 	sts	0x0FE6, r1	; 0x800fe6 <_ZL11INADDR_NONE.lto_priv.199+0x3>
    e746:	10 92 e7 0f 	sts	0x0FE7, r1	; 0x800fe7 <_ZL11INADDR_NONE.lto_priv.199+0x4>
    e74a:	10 92 e8 0f 	sts	0x0FE8, r1	; 0x800fe8 <_ZL11INADDR_NONE.lto_priv.199+0x5>
    e74e:	d0 93 ea 0f 	sts	0x0FEA, r29	; 0x800fea <_ZL11INADDR_NONE.lto_priv.198+0x1>
    e752:	c0 93 e9 0f 	sts	0x0FE9, r28	; 0x800fe9 <_ZL11INADDR_NONE.lto_priv.198>
    e756:	10 92 eb 0f 	sts	0x0FEB, r1	; 0x800feb <_ZL11INADDR_NONE.lto_priv.198+0x2>
    e75a:	10 92 ec 0f 	sts	0x0FEC, r1	; 0x800fec <_ZL11INADDR_NONE.lto_priv.198+0x3>
    e75e:	10 92 ed 0f 	sts	0x0FED, r1	; 0x800fed <_ZL11INADDR_NONE.lto_priv.198+0x4>
    e762:	10 92 ee 0f 	sts	0x0FEE, r1	; 0x800fee <_ZL11INADDR_NONE.lto_priv.198+0x5>
    e766:	d0 93 fd 0f 	sts	0x0FFD, r29	; 0x800ffd <_ZL11INADDR_NONE.lto_priv.197+0x1>
    e76a:	c0 93 fc 0f 	sts	0x0FFC, r28	; 0x800ffc <_ZL11INADDR_NONE.lto_priv.197>
    e76e:	10 92 fe 0f 	sts	0x0FFE, r1	; 0x800ffe <_ZL11INADDR_NONE.lto_priv.197+0x2>
    e772:	10 92 ff 0f 	sts	0x0FFF, r1	; 0x800fff <_ZL11INADDR_NONE.lto_priv.197+0x3>
    e776:	10 92 00 10 	sts	0x1000, r1	; 0x801000 <_ZL11INADDR_NONE.lto_priv.197+0x4>
    e77a:	10 92 01 10 	sts	0x1001, r1	; 0x801001 <_ZL11INADDR_NONE.lto_priv.197+0x5>
    e77e:	d0 93 f0 0f 	sts	0x0FF0, r29	; 0x800ff0 <Ethernet+0x1>
    e782:	c0 93 ef 0f 	sts	0x0FEF, r28	; 0x800fef <Ethernet>
    e786:	10 92 f1 0f 	sts	0x0FF1, r1	; 0x800ff1 <Ethernet+0x2>
    e78a:	10 92 f2 0f 	sts	0x0FF2, r1	; 0x800ff2 <Ethernet+0x3>
    e78e:	10 92 f3 0f 	sts	0x0FF3, r1	; 0x800ff3 <Ethernet+0x4>
    e792:	10 92 f4 0f 	sts	0x0FF4, r1	; 0x800ff4 <Ethernet+0x5>
    e796:	10 92 fa 0f 	sts	0x0FFA, r1	; 0x800ffa <Ethernet+0xb>
    e79a:	10 92 f9 0f 	sts	0x0FF9, r1	; 0x800ff9 <Ethernet+0xa>
    e79e:	8a e0       	ldi	r24, 0x0A	; 10
    e7a0:	80 93 fb 0f 	sts	0x0FFB, r24	; 0x800ffb <Ethernet+0xc>
    e7a4:	d0 93 03 10 	sts	0x1003, r29	; 0x801003 <_ZL11INADDR_NONE.lto_priv.196+0x1>
    e7a8:	c0 93 02 10 	sts	0x1002, r28	; 0x801002 <_ZL11INADDR_NONE.lto_priv.196>
    e7ac:	10 92 04 10 	sts	0x1004, r1	; 0x801004 <_ZL11INADDR_NONE.lto_priv.196+0x2>
    e7b0:	10 92 05 10 	sts	0x1005, r1	; 0x801005 <_ZL11INADDR_NONE.lto_priv.196+0x3>
    e7b4:	10 92 06 10 	sts	0x1006, r1	; 0x801006 <_ZL11INADDR_NONE.lto_priv.196+0x4>
    e7b8:	10 92 07 10 	sts	0x1007, r1	; 0x801007 <_ZL11INADDR_NONE.lto_priv.196+0x5>
    e7bc:	d0 93 09 10 	sts	0x1009, r29	; 0x801009 <_ZL11INADDR_NONE.lto_priv.195+0x1>
    e7c0:	c0 93 08 10 	sts	0x1008, r28	; 0x801008 <_ZL11INADDR_NONE.lto_priv.195>
    e7c4:	10 92 0a 10 	sts	0x100A, r1	; 0x80100a <_ZL11INADDR_NONE.lto_priv.195+0x2>
    e7c8:	10 92 0b 10 	sts	0x100B, r1	; 0x80100b <_ZL11INADDR_NONE.lto_priv.195+0x3>
    e7cc:	10 92 0c 10 	sts	0x100C, r1	; 0x80100c <_ZL11INADDR_NONE.lto_priv.195+0x4>
    e7d0:	10 92 0d 10 	sts	0x100D, r1	; 0x80100d <_ZL11INADDR_NONE.lto_priv.195+0x5>
    e7d4:	8e e1       	ldi	r24, 0x1E	; 30
    e7d6:	90 e0       	ldi	r25, 0x00	; 0
    e7d8:	0e 94 8e 84 	call	0x1091c	; 0x1091c <malloc>
    e7dc:	90 93 0f 10 	sts	0x100F, r25	; 0x80100f <array_pids+0x1>
    e7e0:	80 93 0e 10 	sts	0x100E, r24	; 0x80100e <array_pids>
    e7e4:	d0 93 11 10 	sts	0x1011, r29	; 0x801011 <_ZL11INADDR_NONE.lto_priv.194+0x1>
    e7e8:	c0 93 10 10 	sts	0x1010, r28	; 0x801010 <_ZL11INADDR_NONE.lto_priv.194>
    e7ec:	10 92 12 10 	sts	0x1012, r1	; 0x801012 <_ZL11INADDR_NONE.lto_priv.194+0x2>
    e7f0:	10 92 13 10 	sts	0x1013, r1	; 0x801013 <_ZL11INADDR_NONE.lto_priv.194+0x3>
    e7f4:	10 92 14 10 	sts	0x1014, r1	; 0x801014 <_ZL11INADDR_NONE.lto_priv.194+0x4>
    e7f8:	10 92 15 10 	sts	0x1015, r1	; 0x801015 <_ZL11INADDR_NONE.lto_priv.194+0x5>
    e7fc:	d0 93 69 10 	sts	0x1069, r29	; 0x801069 <_ZL11INADDR_NONE.lto_priv.193+0x1>
    e800:	c0 93 68 10 	sts	0x1068, r28	; 0x801068 <_ZL11INADDR_NONE.lto_priv.193>
    e804:	10 92 6a 10 	sts	0x106A, r1	; 0x80106a <_ZL11INADDR_NONE.lto_priv.193+0x2>
    e808:	10 92 6b 10 	sts	0x106B, r1	; 0x80106b <_ZL11INADDR_NONE.lto_priv.193+0x3>
    e80c:	10 92 6c 10 	sts	0x106C, r1	; 0x80106c <_ZL11INADDR_NONE.lto_priv.193+0x4>
    e810:	10 92 6d 10 	sts	0x106D, r1	; 0x80106d <_ZL11INADDR_NONE.lto_priv.193+0x5>
    e814:	8b e5       	ldi	r24, 0x5B	; 91
    e816:	97 e0       	ldi	r25, 0x07	; 7
    e818:	90 93 3b 10 	sts	0x103B, r25	; 0x80103b <device+0x25>
    e81c:	80 93 3a 10 	sts	0x103A, r24	; 0x80103a <device+0x24>
    e820:	d0 93 05 16 	sts	0x1605, r29	; 0x801605 <_ZL11INADDR_NONE.lto_priv.192+0x1>
    e824:	c0 93 04 16 	sts	0x1604, r28	; 0x801604 <_ZL11INADDR_NONE.lto_priv.192>
    e828:	10 92 06 16 	sts	0x1606, r1	; 0x801606 <_ZL11INADDR_NONE.lto_priv.192+0x2>
    e82c:	10 92 07 16 	sts	0x1607, r1	; 0x801607 <_ZL11INADDR_NONE.lto_priv.192+0x3>
    e830:	10 92 08 16 	sts	0x1608, r1	; 0x801608 <_ZL11INADDR_NONE.lto_priv.192+0x4>
    e834:	10 92 09 16 	sts	0x1609, r1	; 0x801609 <_ZL11INADDR_NONE.lto_priv.192+0x5>
    e838:	88 e1       	ldi	r24, 0x18	; 24
    e83a:	80 93 01 16 	sts	0x1601, r24	; 0x801601 <swSPI+0x4>
    e83e:	8a e1       	ldi	r24, 0x1A	; 26
    e840:	80 93 00 16 	sts	0x1600, r24	; 0x801600 <swSPI+0x3>
    e844:	89 e1       	ldi	r24, 0x19	; 25
    e846:	80 93 02 16 	sts	0x1602, r24	; 0x801602 <swSPI+0x5>
    e84a:	82 e0       	ldi	r24, 0x02	; 2
    e84c:	80 93 ff 15 	sts	0x15FF, r24	; 0x8015ff <swSPI+0x2>
    e850:	10 92 fd 15 	sts	0x15FD, r1	; 0x8015fd <swSPI>
    e854:	10 92 fe 15 	sts	0x15FE, r1	; 0x8015fe <swSPI+0x1>
    e858:	10 92 03 16 	sts	0x1603, r1	; 0x801603 <swSPI+0x6>
    e85c:	60 e0       	ldi	r22, 0x00	; 0
    e85e:	89 e1       	ldi	r24, 0x19	; 25
    e860:	0e 94 3a 11 	call	0x2274	; 0x2274 <digitalWrite>
    e864:	80 e1       	ldi	r24, 0x10	; 16
    e866:	80 93 fb 15 	sts	0x15FB, r24	; 0x8015fb <now+0x5>
    e86a:	8c e1       	ldi	r24, 0x1C	; 28
    e86c:	80 93 fa 15 	sts	0x15FA, r24	; 0x8015fa <now+0x4>
    e870:	86 e0       	ldi	r24, 0x06	; 6
    e872:	80 93 f9 15 	sts	0x15F9, r24	; 0x8015f9 <now+0x3>
    e876:	40 e0       	ldi	r20, 0x00	; 0
    e878:	81 e6       	ldi	r24, 0x61	; 97
    e87a:	97 e9       	ldi	r25, 0x97	; 151
    e87c:	e3 e9       	ldi	r30, 0x93	; 147
    e87e:	fe ef       	ldi	r31, 0xFE	; 254
    e880:	54 2f       	mov	r21, r20
    e882:	53 70       	andi	r21, 0x03	; 3
    e884:	21 e0       	ldi	r18, 0x01	; 1
    e886:	09 f0       	breq	.+2      	; 0xe88a <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.6788+0x274>
    e888:	20 e0       	ldi	r18, 0x00	; 0
    e88a:	61 e0       	ldi	r22, 0x01	; 1
    e88c:	64 0f       	add	r22, r20
    e88e:	30 e0       	ldi	r19, 0x00	; 0
    e890:	d9 01       	movw	r26, r18
    e892:	a3 59       	subi	r26, 0x93	; 147
    e894:	be 4f       	sbci	r27, 0xFE	; 254
    e896:	8a 17       	cp	r24, r26
    e898:	9b 07       	cpc	r25, r27
    e89a:	38 f0       	brcs	.+14     	; 0xe8aa <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.6788+0x294>
    e89c:	af 01       	movw	r20, r30
    e89e:	42 1b       	sub	r20, r18
    e8a0:	53 0b       	sbc	r21, r19
    e8a2:	84 0f       	add	r24, r20
    e8a4:	95 1f       	adc	r25, r21
    e8a6:	46 2f       	mov	r20, r22
    e8a8:	eb cf       	rjmp	.-42     	; 0xe880 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.6788+0x26a>
    e8aa:	40 93 f6 15 	sts	0x15F6, r20	; 0x8015f6 <now>
    e8ae:	21 e0       	ldi	r18, 0x01	; 1
    e8b0:	62 2f       	mov	r22, r18
    e8b2:	61 50       	subi	r22, 0x01	; 1
    e8b4:	77 0b       	sbc	r23, r23
    e8b6:	fb 01       	movw	r30, r22
    e8b8:	e0 5d       	subi	r30, 0xD0	; 208
    e8ba:	f3 4e       	sbci	r31, 0xE3	; 227
    e8bc:	e4 91       	lpm	r30, Z
    e8be:	51 11       	cpse	r21, r1
    e8c0:	03 c0       	rjmp	.+6      	; 0xe8c8 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.6788+0x2b2>
    e8c2:	22 30       	cpi	r18, 0x02	; 2
    e8c4:	09 f4       	brne	.+2      	; 0xe8c8 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.6788+0x2b2>
    e8c6:	ef 5f       	subi	r30, 0xFF	; 255
    e8c8:	f0 e0       	ldi	r31, 0x00	; 0
    e8ca:	31 e0       	ldi	r19, 0x01	; 1
    e8cc:	32 0f       	add	r19, r18
    e8ce:	8e 17       	cp	r24, r30
    e8d0:	9f 07       	cpc	r25, r31
    e8d2:	20 f0       	brcs	.+8      	; 0xe8dc <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.6788+0x2c6>
    e8d4:	8e 1b       	sub	r24, r30
    e8d6:	9f 0b       	sbc	r25, r31
    e8d8:	23 2f       	mov	r18, r19
    e8da:	ea cf       	rjmp	.-44     	; 0xe8b0 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.6788+0x29a>
    e8dc:	20 93 f7 15 	sts	0x15F7, r18	; 0x8015f7 <now+0x1>
    e8e0:	8f 5f       	subi	r24, 0xFF	; 255
    e8e2:	80 93 f8 15 	sts	0x15F8, r24	; 0x8015f8 <now+0x2>
    e8e6:	10 92 ec 15 	sts	0x15EC, r1	; 0x8015ec <ethClient+0x3>
    e8ea:	10 92 eb 15 	sts	0x15EB, r1	; 0x8015eb <ethClient+0x2>
    e8ee:	48 ee       	ldi	r20, 0xE8	; 232
    e8f0:	53 e0       	ldi	r21, 0x03	; 3
    e8f2:	60 e0       	ldi	r22, 0x00	; 0
    e8f4:	70 e0       	ldi	r23, 0x00	; 0
    e8f6:	40 93 ed 15 	sts	0x15ED, r20	; 0x8015ed <ethClient+0x4>
    e8fa:	50 93 ee 15 	sts	0x15EE, r21	; 0x8015ee <ethClient+0x5>
    e8fe:	60 93 ef 15 	sts	0x15EF, r22	; 0x8015ef <ethClient+0x6>
    e902:	70 93 f0 15 	sts	0x15F0, r23	; 0x8015f0 <ethClient+0x7>
    e906:	80 ec       	ldi	r24, 0xC0	; 192
    e908:	92 e0       	ldi	r25, 0x02	; 2
    e90a:	90 93 ea 15 	sts	0x15EA, r25	; 0x8015ea <ethClient+0x1>
    e90e:	80 93 e9 15 	sts	0x15E9, r24	; 0x8015e9 <ethClient>
    e912:	88 e0       	ldi	r24, 0x08	; 8
    e914:	80 93 f5 15 	sts	0x15F5, r24	; 0x8015f5 <ethClient+0xc>
    e918:	10 92 d1 15 	sts	0x15D1, r1	; 0x8015d1 <udpClient+0x3>
    e91c:	10 92 d0 15 	sts	0x15D0, r1	; 0x8015d0 <udpClient+0x2>
    e920:	40 93 d2 15 	sts	0x15D2, r20	; 0x8015d2 <udpClient+0x4>
    e924:	50 93 d3 15 	sts	0x15D3, r21	; 0x8015d3 <udpClient+0x5>
    e928:	60 93 d4 15 	sts	0x15D4, r22	; 0x8015d4 <udpClient+0x6>
    e92c:	70 93 d5 15 	sts	0x15D5, r23	; 0x8015d5 <udpClient+0x7>
    e930:	28 e9       	ldi	r18, 0x98	; 152
    e932:	32 e0       	ldi	r19, 0x02	; 2
    e934:	30 93 cf 15 	sts	0x15CF, r19	; 0x8015cf <udpClient+0x1>
    e938:	20 93 ce 15 	sts	0x15CE, r18	; 0x8015ce <udpClient>
    e93c:	80 93 da 15 	sts	0x15DA, r24	; 0x8015da <udpClient+0xc>
    e940:	82 ee       	ldi	r24, 0xE2	; 226
    e942:	92 e0       	ldi	r25, 0x02	; 2
    e944:	90 93 de 15 	sts	0x15DE, r25	; 0x8015de <udpClient+0x10>
    e948:	80 93 dd 15 	sts	0x15DD, r24	; 0x8015dd <udpClient+0xf>
    e94c:	10 92 df 15 	sts	0x15DF, r1	; 0x8015df <udpClient+0x11>
    e950:	10 92 e0 15 	sts	0x15E0, r1	; 0x8015e0 <udpClient+0x12>
    e954:	10 92 e1 15 	sts	0x15E1, r1	; 0x8015e1 <udpClient+0x13>
    e958:	10 92 e2 15 	sts	0x15E2, r1	; 0x8015e2 <udpClient+0x14>
    e95c:	90 93 c1 15 	sts	0x15C1, r25	; 0x8015c1 <mqtt_client+0x210>
    e960:	80 93 c0 15 	sts	0x15C0, r24	; 0x8015c0 <mqtt_client+0x20f>
    e964:	10 92 c2 15 	sts	0x15C2, r1	; 0x8015c2 <mqtt_client+0x211>
    e968:	10 92 c3 15 	sts	0x15C3, r1	; 0x8015c3 <mqtt_client+0x212>
    e96c:	10 92 c4 15 	sts	0x15C4, r1	; 0x8015c4 <mqtt_client+0x213>
    e970:	10 92 c5 15 	sts	0x15C5, r1	; 0x8015c5 <mqtt_client+0x214>
    e974:	0f ef       	ldi	r16, 0xFF	; 255
    e976:	1f ef       	ldi	r17, 0xFF	; 255
    e978:	10 93 cd 15 	sts	0x15CD, r17	; 0x8015cd <mqtt_client+0x21c>
    e97c:	00 93 cc 15 	sts	0x15CC, r16	; 0x8015cc <mqtt_client+0x21b>
    e980:	89 ee       	ldi	r24, 0xE9	; 233
    e982:	95 e1       	ldi	r25, 0x15	; 21
    e984:	90 93 b2 13 	sts	0x13B2, r25	; 0x8013b2 <mqtt_client+0x1>
    e988:	80 93 b1 13 	sts	0x13B1, r24	; 0x8013b1 <mqtt_client>
    e98c:	10 92 cb 15 	sts	0x15CB, r1	; 0x8015cb <mqtt_client+0x21a>
    e990:	10 92 ca 15 	sts	0x15CA, r1	; 0x8015ca <mqtt_client+0x219>
    e994:	89 e9       	ldi	r24, 0x99	; 153
    e996:	93 e1       	ldi	r25, 0x13	; 19
    e998:	23 e0       	ldi	r18, 0x03	; 3
    e99a:	30 e0       	ldi	r19, 0x00	; 0
    e99c:	30 93 9a 13 	sts	0x139A, r19	; 0x80139a <radio+0x1>
    e9a0:	20 93 99 13 	sts	0x1399, r18	; 0x801399 <radio>
    e9a4:	22 e0       	ldi	r18, 0x02	; 2
    e9a6:	30 e0       	ldi	r19, 0x00	; 0
    e9a8:	30 93 9c 13 	sts	0x139C, r19	; 0x80139c <radio+0x3>
    e9ac:	20 93 9b 13 	sts	0x139B, r18	; 0x80139b <radio+0x2>
    e9b0:	10 92 9f 13 	sts	0x139F, r1	; 0x80139f <radio+0x6>
    e9b4:	20 e2       	ldi	r18, 0x20	; 32
    e9b6:	20 93 a0 13 	sts	0x13A0, r18	; 0x8013a0 <radio+0x7>
    e9ba:	10 92 a1 13 	sts	0x13A1, r1	; 0x8013a1 <radio+0x8>
    e9be:	25 e0       	ldi	r18, 0x05	; 5
    e9c0:	20 93 a7 13 	sts	0x13A7, r18	; 0x8013a7 <radio+0xe>
    e9c4:	45 e0       	ldi	r20, 0x05	; 5
    e9c6:	50 e0       	ldi	r21, 0x00	; 0
    e9c8:	60 e0       	ldi	r22, 0x00	; 0
    e9ca:	70 e0       	ldi	r23, 0x00	; 0
    e9cc:	40 93 ad 13 	sts	0x13AD, r20	; 0x8013ad <radio+0x14>
    e9d0:	50 93 ae 13 	sts	0x13AE, r21	; 0x8013ae <radio+0x15>
    e9d4:	60 93 af 13 	sts	0x13AF, r22	; 0x8013af <radio+0x16>
    e9d8:	70 93 b0 13 	sts	0x13B0, r23	; 0x8013b0 <radio+0x17>
    e9dc:	10 92 a2 13 	sts	0x13A2, r1	; 0x8013a2 <radio+0x9>
    e9e0:	90 93 57 12 	sts	0x1257, r25	; 0x801257 <network+0x30>
    e9e4:	80 93 56 12 	sts	0x1256, r24	; 0x801256 <network+0x2f>
    e9e8:	2c e5       	ldi	r18, 0x5C	; 92
    e9ea:	32 e1       	ldi	r19, 0x12	; 18
    e9ec:	30 93 f7 12 	sts	0x12F7, r19	; 0x8012f7 <network+0xd0>
    e9f0:	20 93 f6 12 	sts	0x12F6, r18	; 0x8012f6 <network+0xcf>
    e9f4:	24 e0       	ldi	r18, 0x04	; 4
    e9f6:	33 e1       	ldi	r19, 0x13	; 19
    e9f8:	30 93 03 13 	sts	0x1303, r19	; 0x801303 <network+0xdc>
    e9fc:	20 93 02 13 	sts	0x1302, r18	; 0x801302 <network+0xdb>
    ea00:	28 ef       	ldi	r18, 0xF8	; 248
    ea02:	32 e1       	ldi	r19, 0x12	; 18
    ea04:	30 93 4f 12 	sts	0x124F, r19	; 0x80124f <network+0x28>
    ea08:	20 93 4e 12 	sts	0x124E, r18	; 0x80124e <network+0x27>
    ea0c:	10 92 52 12 	sts	0x1252, r1	; 0x801252 <network+0x2b>
    ea10:	10 92 53 12 	sts	0x1253, r1	; 0x801253 <network+0x2c>
    ea14:	10 92 54 12 	sts	0x1254, r1	; 0x801254 <network+0x2d>
    ea18:	10 92 55 12 	sts	0x1255, r1	; 0x801255 <network+0x2e>
    ea1c:	10 92 51 12 	sts	0x1251, r1	; 0x801251 <network+0x2a>
    ea20:	10 92 50 12 	sts	0x1250, r1	; 0x801250 <network+0x29>
    ea24:	10 92 27 12 	sts	0x1227, r1	; 0x801227 <network>
    ea28:	90 93 16 12 	sts	0x1216, r25	; 0x801216 <mesh+0x7>
    ea2c:	80 93 15 12 	sts	0x1215, r24	; 0x801215 <mesh+0x6>
    ea30:	87 e2       	ldi	r24, 0x27	; 39
    ea32:	92 e1       	ldi	r25, 0x12	; 18
    ea34:	90 93 18 12 	sts	0x1218, r25	; 0x801218 <mesh+0x9>
    ea38:	80 93 17 12 	sts	0x1217, r24	; 0x801217 <mesh+0x8>
    ea3c:	86 ef       	ldi	r24, 0xF6	; 246
    ea3e:	91 e1       	ldi	r25, 0x11	; 17
    ea40:	90 93 03 12 	sts	0x1203, r25	; 0x801203 <lm75_temp+0x1>
    ea44:	80 93 02 12 	sts	0x1202, r24	; 0x801202 <lm75_temp>
    ea48:	88 e4       	ldi	r24, 0x48	; 72
    ea4a:	80 93 04 12 	sts	0x1204, r24	; 0x801204 <lm75_temp+0x2>
    ea4e:	8a e0       	ldi	r24, 0x0A	; 10
    ea50:	92 e0       	ldi	r25, 0x02	; 2
    ea52:	90 93 0e 12 	sts	0x120E, r25	; 0x80120e <lm75_temp+0xc>
    ea56:	80 93 0d 12 	sts	0x120D, r24	; 0x80120d <lm75_temp+0xb>
    ea5a:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <Generic_LM75_11Bit_Attributes+0x1>
    ea5e:	90 93 05 12 	sts	0x1205, r25	; 0x801205 <lm75_temp+0x3>
    ea62:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <Generic_LM75_11Bit_Attributes>
    ea66:	89 1b       	sub	r24, r25
    ea68:	99 0b       	sbc	r25, r25
    ea6a:	c1 e0       	ldi	r28, 0x01	; 1
    ea6c:	d0 e0       	ldi	r29, 0x00	; 0
    ea6e:	9e 01       	movw	r18, r28
    ea70:	02 c0       	rjmp	.+4      	; 0xea76 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.6788+0x460>
    ea72:	22 0f       	add	r18, r18
    ea74:	33 1f       	adc	r19, r19
    ea76:	8a 95       	dec	r24
    ea78:	e2 f7       	brpl	.-8      	; 0xea72 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.6788+0x45c>
    ea7a:	c9 01       	movw	r24, r18
    ea7c:	91 95       	neg	r25
    ea7e:	81 95       	neg	r24
    ea80:	91 09       	sbc	r25, r1
    ea82:	90 93 07 12 	sts	0x1207, r25	; 0x801207 <lm75_temp+0x5>
    ea86:	80 93 06 12 	sts	0x1206, r24	; 0x801206 <lm75_temp+0x4>
    ea8a:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <Generic_LM75_11Bit_Attributes+0x2>
    ea8e:	80 93 08 12 	sts	0x1208, r24	; 0x801208 <lm75_temp+0x6>
    ea92:	be 01       	movw	r22, r28
    ea94:	02 c0       	rjmp	.+4      	; 0xea9a <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.6788+0x484>
    ea96:	66 0f       	add	r22, r22
    ea98:	77 1f       	adc	r23, r23
    ea9a:	8a 95       	dec	r24
    ea9c:	e2 f7       	brpl	.-8      	; 0xea96 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.6788+0x480>
    ea9e:	07 2e       	mov	r0, r23
    eaa0:	00 0c       	add	r0, r0
    eaa2:	88 0b       	sbc	r24, r24
    eaa4:	99 0b       	sbc	r25, r25
    eaa6:	0e 94 c6 88 	call	0x1118c	; 0x1118c <__floatsisf>
    eaaa:	9b 01       	movw	r18, r22
    eaac:	ac 01       	movw	r20, r24
    eaae:	60 e0       	ldi	r22, 0x00	; 0
    eab0:	70 e0       	ldi	r23, 0x00	; 0
    eab2:	80 e8       	ldi	r24, 0x80	; 128
    eab4:	9f e3       	ldi	r25, 0x3F	; 63
    eab6:	0e 94 f9 8a 	call	0x115f2	; 0x115f2 <__divsf3>
    eaba:	60 93 09 12 	sts	0x1209, r22	; 0x801209 <lm75_temp+0x7>
    eabe:	70 93 0a 12 	sts	0x120A, r23	; 0x80120a <lm75_temp+0x8>
    eac2:	80 93 0b 12 	sts	0x120B, r24	; 0x80120b <lm75_temp+0x9>
    eac6:	90 93 0c 12 	sts	0x120C, r25	; 0x80120c <lm75_temp+0xa>
    eaca:	80 e0       	ldi	r24, 0x00	; 0
    eacc:	98 ef       	ldi	r25, 0xF8	; 248
    eace:	90 93 c0 11 	sts	0x11C0, r25	; 0x8011c0 <my_lcd+0x9>
    ead2:	80 93 bf 11 	sts	0x11BF, r24	; 0x8011bf <my_lcd+0x8>
    ead6:	20 ee       	ldi	r18, 0xE0	; 224
    ead8:	37 e0       	ldi	r19, 0x07	; 7
    eada:	30 93 be 11 	sts	0x11BE, r19	; 0x8011be <my_lcd+0x7>
    eade:	20 93 bd 11 	sts	0x11BD, r18	; 0x8011bd <my_lcd+0x6>
    eae2:	90 93 c2 11 	sts	0x11C2, r25	; 0x8011c2 <my_lcd+0xb>
    eae6:	80 93 c1 11 	sts	0x11C1, r24	; 0x8011c1 <my_lcd+0xa>
    eaea:	81 e0       	ldi	r24, 0x01	; 1
    eaec:	80 93 c3 11 	sts	0x11C3, r24	; 0x8011c3 <my_lcd+0xc>
    eaf0:	10 92 c4 11 	sts	0x11C4, r1	; 0x8011c4 <my_lcd+0xd>
    eaf4:	84 e8       	ldi	r24, 0x84	; 132
    eaf6:	92 e0       	ldi	r25, 0x02	; 2
    eaf8:	90 93 b8 11 	sts	0x11B8, r25	; 0x8011b8 <my_lcd+0x1>
    eafc:	80 93 b7 11 	sts	0x11B7, r24	; 0x8011b7 <my_lcd>
    eb00:	82 e2       	ldi	r24, 0x22	; 34
    eb02:	80 93 f5 11 	sts	0x11F5, r24	; 0x8011f5 <my_lcd+0x3e>
    eb06:	eb e1       	ldi	r30, 0x1B	; 27
    eb08:	fc e1       	ldi	r31, 0x1C	; 28
    eb0a:	e4 91       	lpm	r30, Z
    eb0c:	f0 e0       	ldi	r31, 0x00	; 0
    eb0e:	ee 0f       	add	r30, r30
    eb10:	ff 1f       	adc	r31, r31
    eb12:	e6 51       	subi	r30, 0x16	; 22
    eb14:	f4 4e       	sbci	r31, 0xE4	; 228
    eb16:	a5 91       	lpm	r26, Z+
    eb18:	b4 91       	lpm	r27, Z
    eb1a:	b0 93 e6 11 	sts	0x11E6, r27	; 0x8011e6 <my_lcd+0x2f>
    eb1e:	a0 93 e5 11 	sts	0x11E5, r26	; 0x8011e5 <my_lcd+0x2e>
    eb22:	ed e1       	ldi	r30, 0x1D	; 29
    eb24:	fc e1       	ldi	r31, 0x1C	; 28
    eb26:	e4 91       	lpm	r30, Z
    eb28:	f0 e0       	ldi	r31, 0x00	; 0
    eb2a:	ee 0f       	add	r30, r30
    eb2c:	ff 1f       	adc	r31, r31
    eb2e:	e6 51       	subi	r30, 0x16	; 22
    eb30:	f4 4e       	sbci	r31, 0xE4	; 228
    eb32:	85 91       	lpm	r24, Z+
    eb34:	94 91       	lpm	r25, Z
    eb36:	90 93 e8 11 	sts	0x11E8, r25	; 0x8011e8 <my_lcd+0x31>
    eb3a:	80 93 e7 11 	sts	0x11E7, r24	; 0x8011e7 <my_lcd+0x30>
    eb3e:	ee e1       	ldi	r30, 0x1E	; 30
    eb40:	fc e1       	ldi	r31, 0x1C	; 28
    eb42:	e4 91       	lpm	r30, Z
    eb44:	f0 e0       	ldi	r31, 0x00	; 0
    eb46:	ee 0f       	add	r30, r30
    eb48:	ff 1f       	adc	r31, r31
    eb4a:	e6 51       	subi	r30, 0x16	; 22
    eb4c:	f4 4e       	sbci	r31, 0xE4	; 228
    eb4e:	85 91       	lpm	r24, Z+
    eb50:	94 91       	lpm	r25, Z
    eb52:	90 93 ea 11 	sts	0x11EA, r25	; 0x8011ea <my_lcd+0x33>
    eb56:	80 93 e9 11 	sts	0x11E9, r24	; 0x8011e9 <my_lcd+0x32>
    eb5a:	ea e1       	ldi	r30, 0x1A	; 26
    eb5c:	fc e1       	ldi	r31, 0x1C	; 28
    eb5e:	e4 91       	lpm	r30, Z
    eb60:	f0 e0       	ldi	r31, 0x00	; 0
    eb62:	ee 0f       	add	r30, r30
    eb64:	ff 1f       	adc	r31, r31
    eb66:	e6 51       	subi	r30, 0x16	; 22
    eb68:	f4 4e       	sbci	r31, 0xE4	; 228
    eb6a:	85 91       	lpm	r24, Z+
    eb6c:	94 91       	lpm	r25, Z
    eb6e:	90 93 ec 11 	sts	0x11EC, r25	; 0x8011ec <my_lcd+0x35>
    eb72:	80 93 eb 11 	sts	0x11EB, r24	; 0x8011eb <my_lcd+0x34>
    eb76:	e5 ed       	ldi	r30, 0xD5	; 213
    eb78:	fb e1       	ldi	r31, 0x1B	; 27
    eb7a:	84 91       	lpm	r24, Z
    eb7c:	80 93 ed 11 	sts	0x11ED, r24	; 0x8011ed <my_lcd+0x36>
    eb80:	e7 ed       	ldi	r30, 0xD7	; 215
    eb82:	fb e1       	ldi	r31, 0x1B	; 27
    eb84:	24 91       	lpm	r18, Z
    eb86:	20 93 ee 11 	sts	0x11EE, r18	; 0x8011ee <my_lcd+0x37>
    eb8a:	e8 ed       	ldi	r30, 0xD8	; 216
    eb8c:	fb e1       	ldi	r31, 0x1B	; 27
    eb8e:	94 91       	lpm	r25, Z
    eb90:	90 93 ef 11 	sts	0x11EF, r25	; 0x8011ef <my_lcd+0x38>
    eb94:	e4 ed       	ldi	r30, 0xD4	; 212
    eb96:	fb e1       	ldi	r31, 0x1B	; 27
    eb98:	e4 91       	lpm	r30, Z
    eb9a:	e0 93 f0 11 	sts	0x11F0, r30	; 0x8011f0 <my_lcd+0x39>
    eb9e:	38 2f       	mov	r19, r24
    eba0:	30 95       	com	r19
    eba2:	30 93 f1 11 	sts	0x11F1, r19	; 0x8011f1 <my_lcd+0x3a>
    eba6:	20 95       	com	r18
    eba8:	20 93 f2 11 	sts	0x11F2, r18	; 0x8011f2 <my_lcd+0x3b>
    ebac:	90 95       	com	r25
    ebae:	90 93 f3 11 	sts	0x11F3, r25	; 0x8011f3 <my_lcd+0x3c>
    ebb2:	e0 95       	com	r30
    ebb4:	e0 93 f4 11 	sts	0x11F4, r30	; 0x8011f4 <my_lcd+0x3d>
    ebb8:	ec 91       	ld	r30, X
    ebba:	e8 2b       	or	r30, r24
    ebbc:	ec 93       	st	X, r30
    ebbe:	e0 91 e7 11 	lds	r30, 0x11E7	; 0x8011e7 <my_lcd+0x30>
    ebc2:	f0 91 e8 11 	lds	r31, 0x11E8	; 0x8011e8 <my_lcd+0x31>
    ebc6:	80 81       	ld	r24, Z
    ebc8:	90 91 ee 11 	lds	r25, 0x11EE	; 0x8011ee <my_lcd+0x37>
    ebcc:	89 2b       	or	r24, r25
    ebce:	80 83       	st	Z, r24
    ebd0:	e0 91 e9 11 	lds	r30, 0x11E9	; 0x8011e9 <my_lcd+0x32>
    ebd4:	f0 91 ea 11 	lds	r31, 0x11EA	; 0x8011ea <my_lcd+0x33>
    ebd8:	80 81       	ld	r24, Z
    ebda:	90 91 ef 11 	lds	r25, 0x11EF	; 0x8011ef <my_lcd+0x38>
    ebde:	89 2b       	or	r24, r25
    ebe0:	80 83       	st	Z, r24
    ebe2:	e0 91 eb 11 	lds	r30, 0x11EB	; 0x8011eb <my_lcd+0x34>
    ebe6:	f0 91 ec 11 	lds	r31, 0x11EC	; 0x8011ec <my_lcd+0x35>
    ebea:	80 81       	ld	r24, Z
    ebec:	90 91 f0 11 	lds	r25, 0x11F0	; 0x8011f0 <my_lcd+0x39>
    ebf0:	89 2b       	or	r24, r25
    ebf2:	80 83       	st	Z, r24
    ebf4:	61 e0       	ldi	r22, 0x01	; 1
    ebf6:	81 e2       	ldi	r24, 0x21	; 33
    ebf8:	0e 94 9f 11 	call	0x233e	; 0x233e <pinMode>
    ebfc:	61 e0       	ldi	r22, 0x01	; 1
    ebfe:	83 e2       	ldi	r24, 0x23	; 35
    ec00:	0e 94 9f 11 	call	0x233e	; 0x233e <pinMode>
    ec04:	61 e0       	ldi	r22, 0x01	; 1
    ec06:	84 e2       	ldi	r24, 0x24	; 36
    ec08:	0e 94 9f 11 	call	0x233e	; 0x233e <pinMode>
    ec0c:	61 e0       	ldi	r22, 0x01	; 1
    ec0e:	80 e2       	ldi	r24, 0x20	; 32
    ec10:	0e 94 9f 11 	call	0x233e	; 0x233e <pinMode>
    ec14:	61 e0       	ldi	r22, 0x01	; 1
    ec16:	82 e2       	ldi	r24, 0x22	; 34
    ec18:	0e 94 3a 11 	call	0x2274	; 0x2274 <digitalWrite>
    ec1c:	61 e0       	ldi	r22, 0x01	; 1
    ec1e:	82 e2       	ldi	r24, 0x22	; 34
    ec20:	0e 94 9f 11 	call	0x233e	; 0x233e <pinMode>
    ec24:	10 92 ce 11 	sts	0x11CE, r1	; 0x8011ce <my_lcd+0x17>
    ec28:	10 92 cd 11 	sts	0x11CD, r1	; 0x8011cd <my_lcd+0x16>
    ec2c:	86 e9       	ldi	r24, 0x96	; 150
    ec2e:	97 e7       	ldi	r25, 0x77	; 119
    ec30:	90 93 d2 11 	sts	0x11D2, r25	; 0x8011d2 <my_lcd+0x1b>
    ec34:	80 93 d1 11 	sts	0x11D1, r24	; 0x8011d1 <my_lcd+0x1a>
    ec38:	20 e4       	ldi	r18, 0x40	; 64
    ec3a:	31 e0       	ldi	r19, 0x01	; 1
    ec3c:	30 93 c6 11 	sts	0x11C6, r19	; 0x8011c6 <my_lcd+0xf>
    ec40:	20 93 c5 11 	sts	0x11C5, r18	; 0x8011c5 <my_lcd+0xe>
    ec44:	80 ee       	ldi	r24, 0xE0	; 224
    ec46:	91 e0       	ldi	r25, 0x01	; 1
    ec48:	90 93 c8 11 	sts	0x11C8, r25	; 0x8011c8 <my_lcd+0x11>
    ec4c:	80 93 c7 11 	sts	0x11C7, r24	; 0x8011c7 <my_lcd+0x10>
    ec50:	41 b1       	in	r20, 0x01	; 1
    ec52:	4f ef       	ldi	r20, 0xFF	; 255
    ec54:	41 b9       	out	0x01, r20	; 1
    ec56:	30 93 ca 11 	sts	0x11CA, r19	; 0x8011ca <my_lcd+0x13>
    ec5a:	20 93 c9 11 	sts	0x11C9, r18	; 0x8011c9 <my_lcd+0x12>
    ec5e:	90 93 cc 11 	sts	0x11CC, r25	; 0x8011cc <my_lcd+0x15>
    ec62:	80 93 cb 11 	sts	0x11CB, r24	; 0x8011cb <my_lcd+0x14>
    ec66:	e6 e1       	ldi	r30, 0x16	; 22
    ec68:	fc e1       	ldi	r31, 0x1C	; 28
    ec6a:	e4 91       	lpm	r30, Z
    ec6c:	f0 e0       	ldi	r31, 0x00	; 0
    ec6e:	ee 0f       	add	r30, r30
    ec70:	ff 1f       	adc	r31, r31
    ec72:	e6 51       	subi	r30, 0x16	; 22
    ec74:	f4 4e       	sbci	r31, 0xE4	; 228
    ec76:	85 91       	lpm	r24, Z+
    ec78:	94 91       	lpm	r25, Z
    ec7a:	90 93 a9 11 	sts	0x11A9, r25	; 0x8011a9 <my_touch+0x10>
    ec7e:	80 93 a8 11 	sts	0x11A8, r24	; 0x8011a8 <my_touch+0xf>
    ec82:	e5 e1       	ldi	r30, 0x15	; 21
    ec84:	fc e1       	ldi	r31, 0x1C	; 28
    ec86:	e4 91       	lpm	r30, Z
    ec88:	f0 e0       	ldi	r31, 0x00	; 0
    ec8a:	ee 0f       	add	r30, r30
    ec8c:	ff 1f       	adc	r31, r31
    ec8e:	e6 51       	subi	r30, 0x16	; 22
    ec90:	f4 4e       	sbci	r31, 0xE4	; 228
    ec92:	85 91       	lpm	r24, Z+
    ec94:	94 91       	lpm	r25, Z
    ec96:	90 93 ab 11 	sts	0x11AB, r25	; 0x8011ab <my_touch+0x12>
    ec9a:	80 93 aa 11 	sts	0x11AA, r24	; 0x8011aa <my_touch+0x11>
    ec9e:	e7 e1       	ldi	r30, 0x17	; 23
    eca0:	fc e1       	ldi	r31, 0x1C	; 28
    eca2:	e4 91       	lpm	r30, Z
    eca4:	f0 e0       	ldi	r31, 0x00	; 0
    eca6:	ee 0f       	add	r30, r30
    eca8:	ff 1f       	adc	r31, r31
    ecaa:	ec 55       	subi	r30, 0x5C	; 92
    ecac:	f4 4e       	sbci	r31, 0xE4	; 228
    ecae:	85 91       	lpm	r24, Z+
    ecb0:	94 91       	lpm	r25, Z
    ecb2:	90 93 ad 11 	sts	0x11AD, r25	; 0x8011ad <my_touch+0x14>
    ecb6:	80 93 ac 11 	sts	0x11AC, r24	; 0x8011ac <my_touch+0x13>
    ecba:	e8 e1       	ldi	r30, 0x18	; 24
    ecbc:	fc e1       	ldi	r31, 0x1C	; 28
    ecbe:	e4 91       	lpm	r30, Z
    ecc0:	f0 e0       	ldi	r31, 0x00	; 0
    ecc2:	ee 0f       	add	r30, r30
    ecc4:	ff 1f       	adc	r31, r31
    ecc6:	e6 51       	subi	r30, 0x16	; 22
    ecc8:	f4 4e       	sbci	r31, 0xE4	; 228
    ecca:	85 91       	lpm	r24, Z+
    eccc:	94 91       	lpm	r25, Z
    ecce:	90 93 af 11 	sts	0x11AF, r25	; 0x8011af <my_touch+0x16>
    ecd2:	80 93 ae 11 	sts	0x11AE, r24	; 0x8011ae <my_touch+0x15>
    ecd6:	e1 e0       	ldi	r30, 0x01	; 1
    ecd8:	fc e1       	ldi	r31, 0x1C	; 28
    ecda:	e4 91       	lpm	r30, Z
    ecdc:	f0 e0       	ldi	r31, 0x00	; 0
    ecde:	ee 0f       	add	r30, r30
    ece0:	ff 1f       	adc	r31, r31
    ece2:	ec 55       	subi	r30, 0x5C	; 92
    ece4:	f4 4e       	sbci	r31, 0xE4	; 228
    ece6:	85 91       	lpm	r24, Z+
    ece8:	94 91       	lpm	r25, Z
    ecea:	90 93 b1 11 	sts	0x11B1, r25	; 0x8011b1 <my_touch+0x18>
    ecee:	80 93 b0 11 	sts	0x11B0, r24	; 0x8011b0 <my_touch+0x17>
    ecf2:	e0 ed       	ldi	r30, 0xD0	; 208
    ecf4:	fb e1       	ldi	r31, 0x1B	; 27
    ecf6:	e4 91       	lpm	r30, Z
    ecf8:	e0 93 b2 11 	sts	0x11B2, r30	; 0x8011b2 <my_touch+0x19>
    ecfc:	ef ec       	ldi	r30, 0xCF	; 207
    ecfe:	fb e1       	ldi	r31, 0x1B	; 27
    ed00:	e4 91       	lpm	r30, Z
    ed02:	e0 93 b3 11 	sts	0x11B3, r30	; 0x8011b3 <my_touch+0x1a>
    ed06:	e1 ed       	ldi	r30, 0xD1	; 209
    ed08:	fb e1       	ldi	r31, 0x1B	; 27
    ed0a:	e4 91       	lpm	r30, Z
    ed0c:	e0 93 b4 11 	sts	0x11B4, r30	; 0x8011b4 <my_touch+0x1b>
    ed10:	e2 ed       	ldi	r30, 0xD2	; 210
    ed12:	fb e1       	ldi	r31, 0x1B	; 27
    ed14:	e4 91       	lpm	r30, Z
    ed16:	e0 93 b5 11 	sts	0x11B5, r30	; 0x8011b5 <my_touch+0x1c>
    ed1a:	eb eb       	ldi	r30, 0xBB	; 187
    ed1c:	fb e1       	ldi	r31, 0x1B	; 27
    ed1e:	e4 91       	lpm	r30, Z
    ed20:	e0 93 b6 11 	sts	0x11B6, r30	; 0x8011b6 <my_touch+0x1d>
    ed24:	61 e0       	ldi	r22, 0x01	; 1
    ed26:	8c e1       	ldi	r24, 0x1C	; 28
    ed28:	0e 94 9f 11 	call	0x233e	; 0x233e <pinMode>
    ed2c:	61 e0       	ldi	r22, 0x01	; 1
    ed2e:	8b e1       	ldi	r24, 0x1B	; 27
    ed30:	0e 94 9f 11 	call	0x233e	; 0x233e <pinMode>
    ed34:	60 e0       	ldi	r22, 0x00	; 0
    ed36:	8d e1       	ldi	r24, 0x1D	; 29
    ed38:	0e 94 9f 11 	call	0x233e	; 0x233e <pinMode>
    ed3c:	61 e0       	ldi	r22, 0x01	; 1
    ed3e:	8e e1       	ldi	r24, 0x1E	; 30
    ed40:	0e 94 9f 11 	call	0x233e	; 0x233e <pinMode>
    ed44:	60 e0       	ldi	r22, 0x00	; 0
    ed46:	87 e0       	ldi	r24, 0x07	; 7
    ed48:	0e 94 9f 11 	call	0x233e	; 0x233e <pinMode>
    ed4c:	10 92 a5 11 	sts	0x11A5, r1	; 0x8011a5 <my_touch+0xc>
    ed50:	10 92 a6 11 	sts	0x11A6, r1	; 0x8011a6 <my_touch+0xd>
    ed54:	10 92 a7 11 	sts	0x11A7, r1	; 0x8011a7 <my_touch+0xe>
    ed58:	10 92 a2 11 	sts	0x11A2, r1	; 0x8011a2 <my_touch+0x9>
    ed5c:	10 92 a1 11 	sts	0x11A1, r1	; 0x8011a1 <my_touch+0x8>
    ed60:	10 92 a4 11 	sts	0x11A4, r1	; 0x8011a4 <my_touch+0xb>
    ed64:	10 92 a3 11 	sts	0x11A3, r1	; 0x8011a3 <my_touch+0xa>
    ed68:	10 92 9a 11 	sts	0x119A, r1	; 0x80119a <my_touch+0x1>
    ed6c:	10 92 99 11 	sts	0x1199, r1	; 0x801199 <my_touch>
    ed70:	10 92 9c 11 	sts	0x119C, r1	; 0x80119c <my_touch+0x3>
    ed74:	10 92 9b 11 	sts	0x119B, r1	; 0x80119b <my_touch+0x2>
    ed78:	10 93 9e 11 	sts	0x119E, r17	; 0x80119e <my_touch+0x5>
    ed7c:	00 93 9d 11 	sts	0x119D, r16	; 0x80119d <my_touch+0x4>
    ed80:	10 93 a0 11 	sts	0x11A0, r17	; 0x8011a0 <my_touch+0x7>
    ed84:	00 93 9f 11 	sts	0x119F, r16	; 0x80119f <my_touch+0x6>
    ed88:	8a e0       	ldi	r24, 0x0A	; 10
    ed8a:	80 93 8a 10 	sts	0x108A, r24	; 0x80108a <doc>
    ed8e:	83 e9       	ldi	r24, 0x93	; 147
    ed90:	90 e1       	ldi	r25, 0x10	; 16
    ed92:	90 93 8e 10 	sts	0x108E, r25	; 0x80108e <doc+0x4>
    ed96:	80 93 8d 10 	sts	0x108D, r24	; 0x80108d <doc+0x3>
    ed9a:	20 e0       	ldi	r18, 0x00	; 0
    ed9c:	31 e0       	ldi	r19, 0x01	; 1
    ed9e:	30 93 90 10 	sts	0x1090, r19	; 0x801090 <doc+0x6>
    eda2:	20 93 8f 10 	sts	0x108F, r18	; 0x80108f <doc+0x5>
    eda6:	10 92 92 10 	sts	0x1092, r1	; 0x801092 <doc+0x8>
    edaa:	10 92 91 10 	sts	0x1091, r1	; 0x801091 <doc+0x7>
    edae:	8e e7       	ldi	r24, 0x7E	; 126
    edb0:	92 e0       	ldi	r25, 0x02	; 2
    edb2:	90 93 8c 10 	sts	0x108C, r25	; 0x80108c <doc+0x2>
    edb6:	80 93 8b 10 	sts	0x108B, r24	; 0x80108b <doc+0x1>
    edba:	10 92 94 11 	sts	0x1194, r1	; 0x801194 <doc+0x10a>
    edbe:	10 92 93 11 	sts	0x1193, r1	; 0x801193 <doc+0x109>
    edc2:	80 e0       	ldi	r24, 0x00	; 0
    edc4:	90 e0       	ldi	r25, 0x00	; 0
    edc6:	a2 e0       	ldi	r26, 0x02	; 2
    edc8:	b0 e0       	ldi	r27, 0x00	; 0
    edca:	80 93 81 10 	sts	0x1081, r24	; 0x801081 <SRAM+0x4>
    edce:	90 93 82 10 	sts	0x1082, r25	; 0x801082 <SRAM+0x5>
    edd2:	a0 93 83 10 	sts	0x1083, r26	; 0x801083 <SRAM+0x6>
    edd6:	b0 93 84 10 	sts	0x1084, r27	; 0x801084 <SRAM+0x7>
    edda:	d0 93 80 10 	sts	0x1080, r29	; 0x801080 <SRAM+0x3>
    edde:	c0 93 7f 10 	sts	0x107F, r28	; 0x80107f <SRAM+0x2>
    ede2:	8d ef       	ldi	r24, 0xFD	; 253
    ede4:	95 e1       	ldi	r25, 0x15	; 21
    ede6:	90 93 7e 10 	sts	0x107E, r25	; 0x80107e <SRAM+0x1>
    edea:	80 93 7d 10 	sts	0x107D, r24	; 0x80107d <SRAM>
    edee:	46 e1       	ldi	r20, 0x16	; 22
    edf0:	40 93 85 10 	sts	0x1085, r20	; 0x801085 <SRAM+0x8>
    edf4:	40 e0       	ldi	r20, 0x00	; 0
    edf6:	50 e0       	ldi	r21, 0x00	; 0
    edf8:	64 e0       	ldi	r22, 0x04	; 4
    edfa:	70 e0       	ldi	r23, 0x00	; 0
    edfc:	40 93 72 10 	sts	0x1072, r20	; 0x801072 <SROM+0x4>
    ee00:	50 93 73 10 	sts	0x1073, r21	; 0x801073 <SROM+0x5>
    ee04:	60 93 74 10 	sts	0x1074, r22	; 0x801074 <SROM+0x6>
    ee08:	70 93 75 10 	sts	0x1075, r23	; 0x801075 <SROM+0x7>
    ee0c:	30 93 77 10 	sts	0x1077, r19	; 0x801077 <SROM+0x9>
    ee10:	20 93 76 10 	sts	0x1076, r18	; 0x801076 <SROM+0x8>
    ee14:	10 92 71 10 	sts	0x1071, r1	; 0x801071 <SROM+0x3>
    ee18:	10 92 70 10 	sts	0x1070, r1	; 0x801070 <SROM+0x2>
    ee1c:	90 93 6f 10 	sts	0x106F, r25	; 0x80106f <SROM+0x1>
    ee20:	80 93 6e 10 	sts	0x106E, r24	; 0x80106e <SROM>
    ee24:	87 e1       	ldi	r24, 0x17	; 23
    ee26:	80 93 78 10 	sts	0x1078, r24	; 0x801078 <SROM+0xa>
    ee2a:	df 91       	pop	r29
    ee2c:	cf 91       	pop	r28
    ee2e:	1f 91       	pop	r17
    ee30:	0f 91       	pop	r16
    ee32:	08 95       	ret

0000ee34 <main>:
main():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/main.cpp:34

//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
    ee34:	cf 93       	push	r28
    ee36:	df 93       	push	r29
    ee38:	cd b7       	in	r28, 0x3d	; 61
    ee3a:	de b7       	in	r29, 0x3e	; 62
    ee3c:	c7 58       	subi	r28, 0x87	; 135
    ee3e:	d1 09       	sbc	r29, r1
    ee40:	0f b6       	in	r0, 0x3f	; 63
    ee42:	f8 94       	cli
    ee44:	de bf       	out	0x3e, r29	; 62
    ee46:	0f be       	out	0x3f, r0	; 63
    ee48:	cd bf       	out	0x3d, r28	; 61
init():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:612

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    ee4a:	78 94       	sei
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:624

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    ee4c:	84 b5       	in	r24, 0x24	; 36
    ee4e:	83 60       	ori	r24, 0x03	; 3
    ee50:	84 bd       	out	0x24, r24	; 36
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:639
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    ee52:	85 b5       	in	r24, 0x25	; 37
    ee54:	83 60       	ori	r24, 0x03	; 3
    ee56:	85 bd       	out	0x25, r24	; 37
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:651

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    ee58:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
    ee5c:	81 60       	ori	r24, 0x01	; 1
    ee5e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:662
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    ee62:	82 e0       	ldi	r24, 0x02	; 2
    ee64:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:664
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    ee68:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
    ee6c:	81 60       	ori	r24, 0x01	; 1
    ee6e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:673
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    ee72:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    ee76:	81 60       	ori	r24, 0x01	; 1
    ee78:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:680

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    ee7c:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
    ee80:	84 60       	ori	r24, 0x04	; 4
    ee82:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:689

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    ee86:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    ee8a:	81 60       	ori	r24, 0x01	; 1
    ee8c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:695
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
    ee90:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
    ee94:	83 60       	ori	r24, 0x03	; 3
    ee96:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:696
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
    ee9a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    ee9e:	81 60       	ori	r24, 0x01	; 1
    eea0:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:705
  TCCR4B |= _BV(CS42) | _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
  TCCR4D |= _BV(WGM40);                        // Put timer 4 in phase- and frequency-correct PWM mode 
  TCCR4A |= _BV(PWM4A);                        // Enable PWM mode for comparator OCR4A
  TCCR4C |= _BV(PWM4D);                        // Enable PWM mode for comparator OCR4D 
#elif defined(TCCR4B) && defined(CS41) && defined(WGM40)
  TCCR4B |= _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
    eea4:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
    eea8:	83 60       	ori	r24, 0x03	; 3
    eeaa:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:706
  TCCR4A |= _BV(WGM40);            // Put timer 4 in 8-bit phase correct pwm mode
    eeae:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    eeb2:	81 60       	ori	r24, 0x01	; 1
    eeb4:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:710
#endif

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
  TCCR5B |= _BV(CS51) | _BV(CS50); // Set timer 5 prescale factor to 64
    eeb8:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
    eebc:	83 60       	ori	r24, 0x03	; 3
    eebe:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:711
  TCCR5A |= _BV(WGM50);            // Put timer 5 in 8-bit phase correct pwm mode
    eec2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    eec6:	81 60       	ori	r24, 0x01	; 1
    eec8:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:717
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
    eecc:	87 e8       	ldi	r24, 0x87	; 135
    eece:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:737
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    eed2:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
main():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
    eed6:	0e 94 60 61 	call	0xc2c0	; 0xc2c0 <setup>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2263
          avg = avg / MAX_AVG_TEMP;
          avg = avg / 10;
          itoa(avg, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "temp_avg", payload);

          strcpy(payload, tds.name);
    eeda:	21 e4       	ldi	r18, 0x41	; 65
    eedc:	30 e0       	ldi	r19, 0x00	; 0
    eede:	2c 0f       	add	r18, r28
    eee0:	3d 1f       	adc	r19, r29
    eee2:	24 5f       	subi	r18, 0xF4	; 244
    eee4:	3f 4f       	sbci	r19, 0xFF	; 255
    eee6:	cc 57       	subi	r28, 0x7C	; 124
    eee8:	df 4f       	sbci	r29, 0xFF	; 255
    eeea:	39 83       	std	Y+1, r19	; 0x01
    eeec:	28 83       	st	Y, r18
    eeee:	c4 58       	subi	r28, 0x84	; 132
    eef0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2272
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "offset", payload);
          tt = status_tds18s20[id].online;
          itoa(tt, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "online", payload);
          payload[0] = 0;
          createString(payload, ':', tds.rom, 8, 16);
    eef2:	41 e4       	ldi	r20, 0x41	; 65
    eef4:	50 e0       	ldi	r21, 0x00	; 0
    eef6:	4c 0f       	add	r20, r28
    eef8:	5d 1f       	adc	r21, r29
    eefa:	4f 5f       	subi	r20, 0xFF	; 255
    eefc:	5f 4f       	sbci	r21, 0xFF	; 255
    eefe:	ca 57       	subi	r28, 0x7A	; 122
    ef00:	df 4f       	sbci	r29, 0xFF	; 255
    ef02:	59 83       	std	Y+1, r21	; 0x01
    ef04:	48 83       	st	Y, r20
    ef06:	c6 58       	subi	r28, 0x86	; 134
    ef08:	d0 40       	sbci	r29, 0x00	; 0
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3179
  char str1[16];
  unsigned long load_now;



  load_now = millis();
    ef0a:	0e 94 28 13 	call	0x2650	; 0x2650 <millis>
    ef0e:	1b 01       	movw	r2, r22
    ef10:	2c 01       	movw	r4, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3180
  if (mqtt_reconnect() == 0)
    ef12:	0e 94 f5 49 	call	0x93ea	; 0x93ea <mqtt_reconnect()>
    ef16:	90 91 9d 0c 	lds	r25, 0x0C9D	; 0x800c9d <selftest_data>
    ef1a:	81 11       	cpse	r24, r1
    ef1c:	87 c0       	rjmp	.+270    	; 0xf02c <main+0x1f8>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2473
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
    ef1e:	9f 7d       	andi	r25, 0xDF	; 223
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2464
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
    ef20:	90 93 9d 0c 	sts	0x0C9D, r25	; 0x800c9d <selftest_data>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3185
  if (mqtt_reconnect() == 0)
    selftest_clear_0(SELFTEST_MQTT_LINK);
  else
    selftest_set_0(SELFTEST_MQTT_LINK);

  mqtt_client.loop();
    ef24:	0e 94 4c 3d 	call	0x7a98	; 0x7a98 <PubSubClient::loop() [clone .constprop.123]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3198
    //sprintf(str1, "x=%d y=%d", my_touch.x, my_touch.y);
    //show_string(str1, 0, 270, 1, BLACK, LIGHTGREY, 0);
    }
  */

  if (draw_menu(false) == true)
    ef28:	80 e0       	ldi	r24, 0x00	; 0
    ef2a:	0e 94 f3 33 	call	0x67e6	; 0x67e6 <draw_menu(bool)>
    ef2e:	88 23       	and	r24, r24
    ef30:	19 f0       	breq	.+6      	; 0xef38 <main+0x104>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3199
    draw_menu(true);
    ef32:	81 e0       	ldi	r24, 0x01	; 1
    ef34:	0e 94 f3 33 	call	0x67e6	; 0x67e6 <draw_menu(bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3203

  ////////////////////
  /// kazdych 10sec
  if ((millis() - milis_10s) > 10000)
    ef38:	0e 94 28 13 	call	0x2650	; 0x2650 <millis>
    ef3c:	00 91 bb 0c 	lds	r16, 0x0CBB	; 0x800cbb <milis_10s>
    ef40:	10 91 bc 0c 	lds	r17, 0x0CBC	; 0x800cbc <milis_10s+0x1>
    ef44:	20 91 bd 0c 	lds	r18, 0x0CBD	; 0x800cbd <milis_10s+0x2>
    ef48:	30 91 be 0c 	lds	r19, 0x0CBE	; 0x800cbe <milis_10s+0x3>
    ef4c:	60 1b       	sub	r22, r16
    ef4e:	71 0b       	sbc	r23, r17
    ef50:	82 0b       	sbc	r24, r18
    ef52:	93 0b       	sbc	r25, r19
    ef54:	61 31       	cpi	r22, 0x11	; 17
    ef56:	77 42       	sbci	r23, 0x27	; 39
    ef58:	81 05       	cpc	r24, r1
    ef5a:	91 05       	cpc	r25, r1
    ef5c:	08 f4       	brcc	.+2      	; 0xef60 <main+0x12c>
    ef5e:	a2 c4       	rjmp	.+2372   	; 0xf8a4 <main+0xa70>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3205
  {
    milis_10s = millis();
    ef60:	0e 94 28 13 	call	0x2650	; 0x2650 <millis>
    ef64:	60 93 bb 0c 	sts	0x0CBB, r22	; 0x800cbb <milis_10s>
    ef68:	70 93 bc 0c 	sts	0x0CBC, r23	; 0x800cbc <milis_10s+0x1>
    ef6c:	80 93 bd 0c 	sts	0x0CBD, r24	; 0x800cbd <milis_10s+0x2>
    ef70:	90 93 be 0c 	sts	0x0CBE, r25	; 0x800cbe <milis_10s+0x3>
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2093
{
  char str_topic[64];
  char hostname[10];
  char payload[64];
  char tmp1[4];
  itoa(Global_HWwirenum, payload, 10);
    ef74:	80 91 bd 0b 	lds	r24, 0x0BBD	; 0x800bbd <Global_HWwirenum>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    ef78:	4a e0       	ldi	r20, 0x0A	; 10
    ef7a:	be 01       	movw	r22, r28
    ef7c:	6f 5f       	subi	r22, 0xFF	; 255
    ef7e:	7f 4f       	sbci	r23, 0xFF	; 255
    ef80:	90 e0       	ldi	r25, 0x00	; 0
    ef82:	0e 94 7f 80 	call	0x100fe	; 0x100fe <__itoa_ncheck>
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2094
  send_mqtt_general_payload(&mqtt_client, "1wire/count", payload);
    ef86:	ae 01       	movw	r20, r28
    ef88:	4f 5f       	subi	r20, 0xFF	; 255
    ef8a:	5f 4f       	sbci	r21, 0xFF	; 255
    ef8c:	6c e6       	ldi	r22, 0x6C	; 108
    ef8e:	77 e0       	ldi	r23, 0x07	; 7
    ef90:	81 eb       	ldi	r24, 0xB1	; 177
    ef92:	93 e1       	ldi	r25, 0x13	; 19
    ef94:	0e 94 36 49 	call	0x926c	; 0x926c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2095
  for (uint8_t i = 0; i < Global_HWwirenum; i++)
    ef98:	10 e0       	ldi	r17, 0x00	; 0
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2097
  {
    createString(payload, ':', w_rom[i].rom, 8, 16);
    ef9a:	6b e0       	ldi	r22, 0x0B	; 11
    ef9c:	d6 2e       	mov	r13, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2095
  char hostname[10];
  char payload[64];
  char tmp1[4];
  itoa(Global_HWwirenum, payload, 10);
  send_mqtt_general_payload(&mqtt_client, "1wire/count", payload);
  for (uint8_t i = 0; i < Global_HWwirenum; i++)
    ef9e:	80 91 bd 0b 	lds	r24, 0x0BBD	; 0x800bbd <Global_HWwirenum>
    efa2:	18 17       	cp	r17, r24
    efa4:	08 f0       	brcs	.+2      	; 0xefa8 <main+0x174>
    efa6:	44 c0       	rjmp	.+136    	; 0xf030 <main+0x1fc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2097
  {
    createString(payload, ':', w_rom[i].rom, 8, 16);
    efa8:	1d 9d       	mul	r17, r13
    efaa:	c0 01       	movw	r24, r0
    efac:	11 24       	eor	r1, r1
    efae:	dc 01       	movw	r26, r24
    efb0:	a5 58       	subi	r26, 0x85	; 133
    efb2:	b4 4f       	sbci	r27, 0xF4	; 244
    efb4:	7d 01       	movw	r14, r26
    efb6:	00 e1       	ldi	r16, 0x10	; 16
    efb8:	28 e0       	ldi	r18, 0x08	; 8
    efba:	ad 01       	movw	r20, r26
    efbc:	6a e3       	ldi	r22, 0x3A	; 58
    efbe:	ce 01       	movw	r24, r28
    efc0:	01 96       	adiw	r24, 0x01	; 1
    efc2:	0e 94 6c 4b 	call	0x96d8	; 0x96d8 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2098
    send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "1wire", i, "rom", payload);
    efc6:	9e 01       	movw	r18, r28
    efc8:	2f 5f       	subi	r18, 0xFF	; 255
    efca:	3f 4f       	sbci	r19, 0xFF	; 255
    efcc:	48 e7       	ldi	r20, 0x78	; 120
    efce:	57 e0       	ldi	r21, 0x07	; 7
    efd0:	61 2f       	mov	r22, r17
    efd2:	8c e7       	ldi	r24, 0x7C	; 124
    efd4:	97 e0       	ldi	r25, 0x07	; 7
    efd6:	0e 94 ad 48 	call	0x915a	; 0x915a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.140]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2100
    ///
    itoa(w_rom[i].assigned_ds2482, payload, 10);
    efda:	f7 01       	movw	r30, r14
    efdc:	80 85       	ldd	r24, Z+8	; 0x08
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    efde:	4a e0       	ldi	r20, 0x0A	; 10
    efe0:	be 01       	movw	r22, r28
    efe2:	6f 5f       	subi	r22, 0xFF	; 255
    efe4:	7f 4f       	sbci	r23, 0xFF	; 255
    efe6:	90 e0       	ldi	r25, 0x00	; 0
    efe8:	0e 94 7f 80 	call	0x100fe	; 0x100fe <__itoa_ncheck>
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2101
    send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "1wire", i, "assigned", payload);
    efec:	9e 01       	movw	r18, r28
    efee:	2f 5f       	subi	r18, 0xFF	; 255
    eff0:	3f 4f       	sbci	r19, 0xFF	; 255
    eff2:	42 e8       	ldi	r20, 0x82	; 130
    eff4:	57 e0       	ldi	r21, 0x07	; 7
    eff6:	61 2f       	mov	r22, r17
    eff8:	8c e7       	ldi	r24, 0x7C	; 124
    effa:	97 e0       	ldi	r25, 0x07	; 7
    effc:	0e 94 ad 48 	call	0x915a	; 0x915a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.140]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2103
    ///
    itoa(w_rom[i].tds_idx, payload, 10);
    f000:	d7 01       	movw	r26, r14
    f002:	1a 96       	adiw	r26, 0x0a	; 10
    f004:	8c 91       	ld	r24, X
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    f006:	4a e0       	ldi	r20, 0x0A	; 10
    f008:	be 01       	movw	r22, r28
    f00a:	6f 5f       	subi	r22, 0xFF	; 255
    f00c:	7f 4f       	sbci	r23, 0xFF	; 255
    f00e:	90 e0       	ldi	r25, 0x00	; 0
    f010:	0e 94 7f 80 	call	0x100fe	; 0x100fe <__itoa_ncheck>
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2104
    send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "1wire", i, "tds_idx", payload);
    f014:	9e 01       	movw	r18, r28
    f016:	2f 5f       	subi	r18, 0xFF	; 255
    f018:	3f 4f       	sbci	r19, 0xFF	; 255
    f01a:	4b e8       	ldi	r20, 0x8B	; 139
    f01c:	57 e0       	ldi	r21, 0x07	; 7
    f01e:	61 2f       	mov	r22, r17
    f020:	8c e7       	ldi	r24, 0x7C	; 124
    f022:	97 e0       	ldi	r25, 0x07	; 7
    f024:	0e 94 ad 48 	call	0x915a	; 0x915a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.140]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2095
  char hostname[10];
  char payload[64];
  char tmp1[4];
  itoa(Global_HWwirenum, payload, 10);
  send_mqtt_general_payload(&mqtt_client, "1wire/count", payload);
  for (uint8_t i = 0; i < Global_HWwirenum; i++)
    f028:	1f 5f       	subi	r17, 0xFF	; 255
    f02a:	b9 cf       	rjmp	.-142    	; 0xef9e <main+0x16a>
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2464
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
    f02c:	90 62       	ori	r25, 0x20	; 32
    f02e:	78 cf       	rjmp	.-272    	; 0xef20 <main+0xec>
send_mqtt_status():
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:302
void send_mqtt_status(PubSubClient *mqtt_client)
{
  char str_topic[64];
  char hostname[10];
  char payload[64];
  if (mqtt_client->connected())
    f030:	81 eb       	ldi	r24, 0xB1	; 177
    f032:	93 e1       	ldi	r25, 0x13	; 19
    f034:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <PubSubClient::connected()>
    f038:	88 23       	and	r24, r24
    f03a:	09 f4       	brne	.+2      	; 0xf03e <main+0x20a>
    f03c:	a4 c0       	rjmp	.+328    	; 0xf186 <main+0x352>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:304
  {
    strcpy(str_topic, "status/mqtt/send");
    f03e:	63 e9       	ldi	r22, 0x93	; 147
    f040:	77 e0       	ldi	r23, 0x07	; 7
    f042:	ce 01       	movw	r24, r28
    f044:	8f 5b       	subi	r24, 0xBF	; 191
    f046:	9f 4f       	sbci	r25, 0xFF	; 255
    f048:	0e 94 c8 8c 	call	0x11990	; 0x11990 <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    f04c:	4a e0       	ldi	r20, 0x0A	; 10
    f04e:	be 01       	movw	r22, r28
    f050:	6f 5f       	subi	r22, 0xFF	; 255
    f052:	7f 4f       	sbci	r23, 0xFF	; 255
    f054:	80 91 dd 0e 	lds	r24, 0x0EDD	; 0x800edd <mqtt_send_message>
    f058:	90 91 de 0e 	lds	r25, 0x0EDE	; 0x800ede <mqtt_send_message+0x1>
    f05c:	0e 94 7f 80 	call	0x100fe	; 0x100fe <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:306
    itoa(mqtt_send_message, payload, 10);
    mqtt_send_message = 0;
    f060:	10 92 de 0e 	sts	0x0EDE, r1	; 0x800ede <mqtt_send_message+0x1>
    f064:	10 92 dd 0e 	sts	0x0EDD, r1	; 0x800edd <mqtt_send_message>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:307
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
    f068:	ae 01       	movw	r20, r28
    f06a:	4f 5f       	subi	r20, 0xFF	; 255
    f06c:	5f 4f       	sbci	r21, 0xFF	; 255
    f06e:	be 01       	movw	r22, r28
    f070:	6f 5b       	subi	r22, 0xBF	; 191
    f072:	7f 4f       	sbci	r23, 0xFF	; 255
    f074:	81 eb       	ldi	r24, 0xB1	; 177
    f076:	93 e1       	ldi	r25, 0x13	; 19
    f078:	0e 94 36 49 	call	0x926c	; 0x926c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:309
    ///
    strcpy(str_topic, "status/mqtt/error");
    f07c:	64 ea       	ldi	r22, 0xA4	; 164
    f07e:	77 e0       	ldi	r23, 0x07	; 7
    f080:	ce 01       	movw	r24, r28
    f082:	8f 5b       	subi	r24, 0xBF	; 191
    f084:	9f 4f       	sbci	r25, 0xFF	; 255
    f086:	0e 94 c8 8c 	call	0x11990	; 0x11990 <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    f08a:	4a e0       	ldi	r20, 0x0A	; 10
    f08c:	be 01       	movw	r22, r28
    f08e:	6f 5f       	subi	r22, 0xFF	; 255
    f090:	7f 4f       	sbci	r23, 0xFF	; 255
    f092:	80 91 df 0e 	lds	r24, 0x0EDF	; 0x800edf <mqtt_error>
    f096:	90 91 e0 0e 	lds	r25, 0x0EE0	; 0x800ee0 <mqtt_error+0x1>
    f09a:	0e 94 7f 80 	call	0x100fe	; 0x100fe <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:311
    itoa(mqtt_error, payload, 10);
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
    f09e:	ae 01       	movw	r20, r28
    f0a0:	4f 5f       	subi	r20, 0xFF	; 255
    f0a2:	5f 4f       	sbci	r21, 0xFF	; 255
    f0a4:	be 01       	movw	r22, r28
    f0a6:	6f 5b       	subi	r22, 0xBF	; 191
    f0a8:	7f 4f       	sbci	r23, 0xFF	; 255
    f0aa:	81 eb       	ldi	r24, 0xB1	; 177
    f0ac:	93 e1       	ldi	r25, 0x13	; 19
    f0ae:	0e 94 36 49 	call	0x926c	; 0x926c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:313
    ///
    strcpy(str_topic, "status/mqtt/receive");
    f0b2:	66 eb       	ldi	r22, 0xB6	; 182
    f0b4:	77 e0       	ldi	r23, 0x07	; 7
    f0b6:	ce 01       	movw	r24, r28
    f0b8:	8f 5b       	subi	r24, 0xBF	; 191
    f0ba:	9f 4f       	sbci	r25, 0xFF	; 255
    f0bc:	0e 94 c8 8c 	call	0x11990	; 0x11990 <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    f0c0:	4a e0       	ldi	r20, 0x0A	; 10
    f0c2:	be 01       	movw	r22, r28
    f0c4:	6f 5f       	subi	r22, 0xFF	; 255
    f0c6:	7f 4f       	sbci	r23, 0xFF	; 255
    f0c8:	80 91 c0 0b 	lds	r24, 0x0BC0	; 0x800bc0 <mqtt_receive_message>
    f0cc:	90 91 c1 0b 	lds	r25, 0x0BC1	; 0x800bc1 <mqtt_receive_message+0x1>
    f0d0:	0e 94 7f 80 	call	0x100fe	; 0x100fe <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:315
    itoa(mqtt_receive_message, payload, 10);
    mqtt_receive_message = 0;
    f0d4:	10 92 c1 0b 	sts	0x0BC1, r1	; 0x800bc1 <mqtt_receive_message+0x1>
    f0d8:	10 92 c0 0b 	sts	0x0BC0, r1	; 0x800bc0 <mqtt_receive_message>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:316
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
    f0dc:	ae 01       	movw	r20, r28
    f0de:	4f 5f       	subi	r20, 0xFF	; 255
    f0e0:	5f 4f       	sbci	r21, 0xFF	; 255
    f0e2:	be 01       	movw	r22, r28
    f0e4:	6f 5b       	subi	r22, 0xBF	; 191
    f0e6:	7f 4f       	sbci	r23, 0xFF	; 255
    f0e8:	81 eb       	ldi	r24, 0xB1	; 177
    f0ea:	93 e1       	ldi	r25, 0x13	; 19
    f0ec:	0e 94 36 49 	call	0x926c	; 0x926c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:318
    ///
    strcpy(str_topic, "status/mqtt/process");
    f0f0:	6a ec       	ldi	r22, 0xCA	; 202
    f0f2:	77 e0       	ldi	r23, 0x07	; 7
    f0f4:	ce 01       	movw	r24, r28
    f0f6:	8f 5b       	subi	r24, 0xBF	; 191
    f0f8:	9f 4f       	sbci	r25, 0xFF	; 255
    f0fa:	0e 94 c8 8c 	call	0x11990	; 0x11990 <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    f0fe:	4a e0       	ldi	r20, 0x0A	; 10
    f100:	be 01       	movw	r22, r28
    f102:	6f 5f       	subi	r22, 0xFF	; 255
    f104:	7f 4f       	sbci	r23, 0xFF	; 255
    f106:	80 91 be 0b 	lds	r24, 0x0BBE	; 0x800bbe <mqtt_process_message>
    f10a:	90 91 bf 0b 	lds	r25, 0x0BBF	; 0x800bbf <mqtt_process_message+0x1>
    f10e:	0e 94 7f 80 	call	0x100fe	; 0x100fe <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:320
    itoa(mqtt_process_message, payload, 10);
    mqtt_process_message = 0;
    f112:	10 92 bf 0b 	sts	0x0BBF, r1	; 0x800bbf <mqtt_process_message+0x1>
    f116:	10 92 be 0b 	sts	0x0BBE, r1	; 0x800bbe <mqtt_process_message>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:321
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
    f11a:	ae 01       	movw	r20, r28
    f11c:	4f 5f       	subi	r20, 0xFF	; 255
    f11e:	5f 4f       	sbci	r21, 0xFF	; 255
    f120:	be 01       	movw	r22, r28
    f122:	6f 5b       	subi	r22, 0xBF	; 191
    f124:	7f 4f       	sbci	r23, 0xFF	; 255
    f126:	81 eb       	ldi	r24, 0xB1	; 177
    f128:	93 e1       	ldi	r25, 0x13	; 19
    f12a:	0e 94 36 49 	call	0x926c	; 0x926c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:323

    payload[0] = 0;
    f12e:	19 82       	std	Y+1, r1	; 0x01
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:324
    createString(payload, '.', device.myIP, 4, 10);
    f130:	0a e0       	ldi	r16, 0x0A	; 10
    f132:	24 e0       	ldi	r18, 0x04	; 4
    f134:	4c e1       	ldi	r20, 0x1C	; 28
    f136:	50 e1       	ldi	r21, 0x10	; 16
    f138:	6e e2       	ldi	r22, 0x2E	; 46
    f13a:	ce 01       	movw	r24, r28
    f13c:	01 96       	adiw	r24, 0x01	; 1
    f13e:	0e 94 6c 4b 	call	0x96d8	; 0x96d8 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:325
    send_mqtt_general_payload(mqtt_client, "network/ip", payload);
    f142:	ae 01       	movw	r20, r28
    f144:	4f 5f       	subi	r20, 0xFF	; 255
    f146:	5f 4f       	sbci	r21, 0xFF	; 255
    f148:	67 e7       	ldi	r22, 0x77	; 119
    f14a:	75 e0       	ldi	r23, 0x05	; 5
    f14c:	81 eb       	ldi	r24, 0xB1	; 177
    f14e:	93 e1       	ldi	r25, 0x13	; 19
    f150:	0e 94 36 49 	call	0x926c	; 0x926c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:327

    strcpy(str_topic, "status/know_devices");
    f154:	6e ed       	ldi	r22, 0xDE	; 222
    f156:	77 e0       	ldi	r23, 0x07	; 7
    f158:	ce 01       	movw	r24, r28
    f15a:	8f 5b       	subi	r24, 0xBF	; 191
    f15c:	9f 4f       	sbci	r25, 0xFF	; 255
    f15e:	0e 94 c8 8c 	call	0x11990	; 0x11990 <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    f162:	4a e0       	ldi	r20, 0x0A	; 10
    f164:	be 01       	movw	r22, r28
    f166:	6f 5f       	subi	r22, 0xFF	; 255
    f168:	7f 4f       	sbci	r23, 0xFF	; 255
    f16a:	90 e0       	ldi	r25, 0x00	; 0
    f16c:	80 e0       	ldi	r24, 0x00	; 0
    f16e:	0e 94 7f 80 	call	0x100fe	; 0x100fe <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:329
    itoa(count_know_mqtt, payload, 10);
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
    f172:	ae 01       	movw	r20, r28
    f174:	4f 5f       	subi	r20, 0xFF	; 255
    f176:	5f 4f       	sbci	r21, 0xFF	; 255
    f178:	be 01       	movw	r22, r28
    f17a:	6f 5b       	subi	r22, 0xBF	; 191
    f17c:	7f 4f       	sbci	r23, 0xFF	; 255
    f17e:	81 eb       	ldi	r24, 0xB1	; 177
    f180:	93 e1       	ldi	r25, 0x13	; 19
    f182:	0e 94 36 49 	call	0x926c	; 0x926c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_695434/sketch/saric_mqtt_network.cpp:331
  }
  mqtt_error = 0;
    f186:	10 92 e0 0e 	sts	0x0EE0, r1	; 0x800ee0 <mqtt_error+0x1>
    f18a:	10 92 df 0e 	sts	0x0EDF, r1	; 0x800edf <mqtt_error>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2113
/// funkce pro odeslani zakladnich informaci o tomto zarizeni
void send_device_status(void)
{
  char str_topic[64];
  char payload[64];
  if (mqtt_client.connected())
    f18e:	81 eb       	ldi	r24, 0xB1	; 177
    f190:	93 e1       	ldi	r25, 0x13	; 19
    f192:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <PubSubClient::connected()>
    f196:	88 23       	and	r24, r24
    f198:	09 f4       	brne	.+2      	; 0xf19c <main+0x368>
    f19a:	52 c1       	rjmp	.+676    	; 0xf440 <main+0x60c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2115
  {
    strcpy(str_topic, "status/uptime");
    f19c:	62 ef       	ldi	r22, 0xF2	; 242
    f19e:	77 e0       	ldi	r23, 0x07	; 7
    f1a0:	ce 01       	movw	r24, r28
    f1a2:	8f 5b       	subi	r24, 0xBF	; 191
    f1a4:	9f 4f       	sbci	r25, 0xFF	; 255
    f1a6:	0e 94 c8 8c 	call	0x11990	; 0x11990 <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    f1aa:	4a e0       	ldi	r20, 0x0A	; 10
    f1ac:	be 01       	movw	r22, r28
    f1ae:	6f 5f       	subi	r22, 0xFF	; 255
    f1b0:	7f 4f       	sbci	r23, 0xFF	; 255
    f1b2:	80 91 b3 0c 	lds	r24, 0x0CB3	; 0x800cb3 <uptime>
    f1b6:	90 91 b4 0c 	lds	r25, 0x0CB4	; 0x800cb4 <uptime+0x1>
    f1ba:	0e 94 7f 80 	call	0x100fe	; 0x100fe <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2117
    itoa(uptime, payload, 10);
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
    f1be:	ae 01       	movw	r20, r28
    f1c0:	4f 5f       	subi	r20, 0xFF	; 255
    f1c2:	5f 4f       	sbci	r21, 0xFF	; 255
    f1c4:	be 01       	movw	r22, r28
    f1c6:	6f 5b       	subi	r22, 0xBF	; 191
    f1c8:	7f 4f       	sbci	r23, 0xFF	; 255
    f1ca:	81 eb       	ldi	r24, 0xB1	; 177
    f1cc:	93 e1       	ldi	r25, 0x13	; 19
    f1ce:	0e 94 36 49 	call	0x926c	; 0x926c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2119
    ///
    strcpy(str_topic, "status/brigthness");
    f1d2:	60 e0       	ldi	r22, 0x00	; 0
    f1d4:	78 e0       	ldi	r23, 0x08	; 8
    f1d6:	ce 01       	movw	r24, r28
    f1d8:	8f 5b       	subi	r24, 0xBF	; 191
    f1da:	9f 4f       	sbci	r25, 0xFF	; 255
    f1dc:	0e 94 c8 8c 	call	0x11990	; 0x11990 <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    f1e0:	4a e0       	ldi	r20, 0x0A	; 10
    f1e2:	be 01       	movw	r22, r28
    f1e4:	6f 5f       	subi	r22, 0xFF	; 255
    f1e6:	7f 4f       	sbci	r23, 0xFF	; 255
    f1e8:	80 91 a4 0c 	lds	r24, 0x0CA4	; 0x800ca4 <light_curr>
    f1ec:	90 91 a5 0c 	lds	r25, 0x0CA5	; 0x800ca5 <light_curr+0x1>
    f1f0:	0e 94 7f 80 	call	0x100fe	; 0x100fe <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2121
    itoa(light_curr, payload, 10);
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
    f1f4:	ae 01       	movw	r20, r28
    f1f6:	4f 5f       	subi	r20, 0xFF	; 255
    f1f8:	5f 4f       	sbci	r21, 0xFF	; 255
    f1fa:	be 01       	movw	r22, r28
    f1fc:	6f 5b       	subi	r22, 0xBF	; 191
    f1fe:	7f 4f       	sbci	r23, 0xFF	; 255
    f200:	81 eb       	ldi	r24, 0xB1	; 177
    f202:	93 e1       	ldi	r25, 0x13	; 19
    f204:	0e 94 36 49 	call	0x926c	; 0x926c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2127
    ///
    //strcpy(str_topic, "status/light");
    //itoa(jas_disp, payload, 10);
    //send_mqtt_general_payload(&mqtt_client, str_topic, payload);
    ///
    strcpy(str_topic, "status/auto_brigthness");
    f208:	62 e1       	ldi	r22, 0x12	; 18
    f20a:	78 e0       	ldi	r23, 0x08	; 8
    f20c:	ce 01       	movw	r24, r28
    f20e:	8f 5b       	subi	r24, 0xBF	; 191
    f210:	9f 4f       	sbci	r25, 0xFF	; 255
    f212:	0e 94 c8 8c 	call	0x11990	; 0x11990 <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    f216:	4a e0       	ldi	r20, 0x0A	; 10
    f218:	be 01       	movw	r22, r28
    f21a:	6f 5f       	subi	r22, 0xFF	; 255
    f21c:	7f 4f       	sbci	r23, 0xFF	; 255
    f21e:	90 e0       	ldi	r25, 0x00	; 0
    f220:	80 e0       	ldi	r24, 0x00	; 0
    f222:	0e 94 7f 80 	call	0x100fe	; 0x100fe <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2129
    itoa(auto_jas, payload, 10);
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
    f226:	ae 01       	movw	r20, r28
    f228:	4f 5f       	subi	r20, 0xFF	; 255
    f22a:	5f 4f       	sbci	r21, 0xFF	; 255
    f22c:	be 01       	movw	r22, r28
    f22e:	6f 5b       	subi	r22, 0xBF	; 191
    f230:	7f 4f       	sbci	r23, 0xFF	; 255
    f232:	81 eb       	ldi	r24, 0xB1	; 177
    f234:	93 e1       	ldi	r25, 0x13	; 19
    f236:	0e 94 36 49 	call	0x926c	; 0x926c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2131
    ///
    strcpy(str_topic, "status/load_min");
    f23a:	69 e2       	ldi	r22, 0x29	; 41
    f23c:	78 e0       	ldi	r23, 0x08	; 8
    f23e:	ce 01       	movw	r24, r28
    f240:	8f 5b       	subi	r24, 0xBF	; 191
    f242:	9f 4f       	sbci	r25, 0xFF	; 255
    f244:	0e 94 c8 8c 	call	0x11990	; 0x11990 <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    f248:	4a e0       	ldi	r20, 0x0A	; 10
    f24a:	be 01       	movw	r22, r28
    f24c:	6f 5f       	subi	r22, 0xFF	; 255
    f24e:	7f 4f       	sbci	r23, 0xFF	; 255
    f250:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <load_min>
    f254:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <load_min+0x1>
    f258:	0e 94 7f 80 	call	0x100fe	; 0x100fe <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2133
    itoa(load_min, payload, 10);
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
    f25c:	ae 01       	movw	r20, r28
    f25e:	4f 5f       	subi	r20, 0xFF	; 255
    f260:	5f 4f       	sbci	r21, 0xFF	; 255
    f262:	be 01       	movw	r22, r28
    f264:	6f 5b       	subi	r22, 0xBF	; 191
    f266:	7f 4f       	sbci	r23, 0xFF	; 255
    f268:	81 eb       	ldi	r24, 0xB1	; 177
    f26a:	93 e1       	ldi	r25, 0x13	; 19
    f26c:	0e 94 36 49 	call	0x926c	; 0x926c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2135
    ///
    strcpy(str_topic, "status/load_max");
    f270:	69 e3       	ldi	r22, 0x39	; 57
    f272:	78 e0       	ldi	r23, 0x08	; 8
    f274:	ce 01       	movw	r24, r28
    f276:	8f 5b       	subi	r24, 0xBF	; 191
    f278:	9f 4f       	sbci	r25, 0xFF	; 255
    f27a:	0e 94 c8 8c 	call	0x11990	; 0x11990 <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    f27e:	4a e0       	ldi	r20, 0x0A	; 10
    f280:	be 01       	movw	r22, r28
    f282:	6f 5f       	subi	r22, 0xFF	; 255
    f284:	7f 4f       	sbci	r23, 0xFF	; 255
    f286:	80 91 a6 0c 	lds	r24, 0x0CA6	; 0x800ca6 <load_max>
    f28a:	90 91 a7 0c 	lds	r25, 0x0CA7	; 0x800ca7 <load_max+0x1>
    f28e:	0e 94 7f 80 	call	0x100fe	; 0x100fe <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2137
    itoa(load_max, payload, 10);
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
    f292:	ae 01       	movw	r20, r28
    f294:	4f 5f       	subi	r20, 0xFF	; 255
    f296:	5f 4f       	sbci	r21, 0xFF	; 255
    f298:	be 01       	movw	r22, r28
    f29a:	6f 5b       	subi	r22, 0xBF	; 191
    f29c:	7f 4f       	sbci	r23, 0xFF	; 255
    f29e:	81 eb       	ldi	r24, 0xB1	; 177
    f2a0:	93 e1       	ldi	r25, 0x13	; 19
    f2a2:	0e 94 36 49 	call	0x926c	; 0x926c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2139
    ///
    load_max = 0;
    f2a6:	10 92 a6 0c 	sts	0x0CA6, r1	; 0x800ca6 <load_max>
    f2aa:	10 92 a7 0c 	sts	0x0CA7, r1	; 0x800ca7 <load_max+0x1>
    f2ae:	10 92 a8 0c 	sts	0x0CA8, r1	; 0x800ca8 <load_max+0x2>
    f2b2:	10 92 a9 0c 	sts	0x0CA9, r1	; 0x800ca9 <load_max+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2140
    load_min = 0xffffffff;
    f2b6:	2f ef       	ldi	r18, 0xFF	; 255
    f2b8:	3f ef       	ldi	r19, 0xFF	; 255
    f2ba:	a9 01       	movw	r20, r18
    f2bc:	20 93 06 02 	sts	0x0206, r18	; 0x800206 <load_min>
    f2c0:	30 93 07 02 	sts	0x0207, r19	; 0x800207 <load_min+0x1>
    f2c4:	40 93 08 02 	sts	0x0208, r20	; 0x800208 <load_min+0x2>
    f2c8:	50 93 09 02 	sts	0x0209, r21	; 0x800209 <load_min+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2142
    ///
    strcpy(str_topic, "status/default_ring");
    f2cc:	69 e4       	ldi	r22, 0x49	; 73
    f2ce:	78 e0       	ldi	r23, 0x08	; 8
    f2d0:	ce 01       	movw	r24, r28
    f2d2:	8f 5b       	subi	r24, 0xBF	; 191
    f2d4:	9f 4f       	sbci	r25, 0xFF	; 255
    f2d6:	0e 94 c8 8c 	call	0x11990	; 0x11990 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2143
    itoa(default_ring, payload, 10);
    f2da:	80 91 ca 0b 	lds	r24, 0x0BCA	; 0x800bca <default_ring>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    f2de:	4a e0       	ldi	r20, 0x0A	; 10
    f2e0:	be 01       	movw	r22, r28
    f2e2:	6f 5f       	subi	r22, 0xFF	; 255
    f2e4:	7f 4f       	sbci	r23, 0xFF	; 255
    f2e6:	90 e0       	ldi	r25, 0x00	; 0
    f2e8:	0e 94 7f 80 	call	0x100fe	; 0x100fe <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2144
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
    f2ec:	ae 01       	movw	r20, r28
    f2ee:	4f 5f       	subi	r20, 0xFF	; 255
    f2f0:	5f 4f       	sbci	r21, 0xFF	; 255
    f2f2:	be 01       	movw	r22, r28
    f2f4:	6f 5b       	subi	r22, 0xBF	; 191
    f2f6:	7f 4f       	sbci	r23, 0xFF	; 255
    f2f8:	81 eb       	ldi	r24, 0xB1	; 177
    f2fa:	93 e1       	ldi	r25, 0x13	; 19
    f2fc:	0e 94 36 49 	call	0x926c	; 0x926c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2146
    ///
    strcpy(str_topic, "status/selftest");
    f300:	6d e5       	ldi	r22, 0x5D	; 93
    f302:	78 e0       	ldi	r23, 0x08	; 8
    f304:	ce 01       	movw	r24, r28
    f306:	8f 5b       	subi	r24, 0xBF	; 191
    f308:	9f 4f       	sbci	r25, 0xFF	; 255
    f30a:	0e 94 c8 8c 	call	0x11990	; 0x11990 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2147
    itoa(selftest_data, payload, 10);
    f30e:	80 91 9d 0c 	lds	r24, 0x0C9D	; 0x800c9d <selftest_data>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    f312:	4a e0       	ldi	r20, 0x0A	; 10
    f314:	be 01       	movw	r22, r28
    f316:	6f 5f       	subi	r22, 0xFF	; 255
    f318:	7f 4f       	sbci	r23, 0xFF	; 255
    f31a:	90 e0       	ldi	r25, 0x00	; 0
    f31c:	0e 94 7f 80 	call	0x100fe	; 0x100fe <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2148
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
    f320:	ae 01       	movw	r20, r28
    f322:	4f 5f       	subi	r20, 0xFF	; 255
    f324:	5f 4f       	sbci	r21, 0xFF	; 255
    f326:	be 01       	movw	r22, r28
    f328:	6f 5b       	subi	r22, 0xBF	; 191
    f32a:	7f 4f       	sbci	r23, 0xFF	; 255
    f32c:	81 eb       	ldi	r24, 0xB1	; 177
    f32e:	93 e1       	ldi	r25, 0x13	; 19
    f330:	0e 94 36 49 	call	0x926c	; 0x926c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
time_get_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2530
///
/////////////// Casove funkce ///////////////////////////////////////////////////////////////////
/// time_get_offset - ziska casovy offset, letni/zimni cas
uint8_t time_get_offset(void)
{
  return EEPROM.read(time_offset);
    f334:	81 e0       	ldi	r24, 0x01	; 1
    f336:	90 e0       	ldi	r25, 0x00	; 0
    f338:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    f33c:	4a e0       	ldi	r20, 0x0A	; 10
    f33e:	be 01       	movw	r22, r28
    f340:	6f 5f       	subi	r22, 0xFF	; 255
    f342:	7f 4f       	sbci	r23, 0xFF	; 255
    f344:	90 e0       	ldi	r25, 0x00	; 0
    f346:	0e 94 7f 80 	call	0x100fe	; 0x100fe <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2159
      strcpy(str_topic, "status/light/count");
      itoa(use_light_curr, payload, 10);
      send_mqtt_general_payload(&mqtt_client, str_topic, payload);
    */
    itoa(time_get_offset(), payload, 10);
    send_mqtt_general_payload(&mqtt_client, "time/ntp_offset", payload);
    f34a:	ae 01       	movw	r20, r28
    f34c:	4f 5f       	subi	r20, 0xFF	; 255
    f34e:	5f 4f       	sbci	r21, 0xFF	; 255
    f350:	6d e6       	ldi	r22, 0x6D	; 109
    f352:	78 e0       	ldi	r23, 0x08	; 8
    f354:	81 eb       	ldi	r24, 0xB1	; 177
    f356:	93 e1       	ldi	r25, 0x13	; 19
    f358:	0e 94 36 49 	call	0x926c	; 0x926c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2508
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
    f35c:	80 91 c8 0b 	lds	r24, 0x0BC8	; 0x800bc8 <tritri>
    f360:	90 91 c9 0b 	lds	r25, 0x0BC9	; 0x800bc9 <tritri+0x1>
    f364:	25 e0       	ldi	r18, 0x05	; 5
    f366:	28 9f       	mul	r18, r24
    f368:	b0 01       	movw	r22, r0
    f36a:	29 9f       	mul	r18, r25
    f36c:	70 0d       	add	r23, r0
    f36e:	11 24       	eor	r1, r1
    f370:	90 e0       	ldi	r25, 0x00	; 0
    f372:	80 e0       	ldi	r24, 0x00	; 0
    f374:	0e 94 c4 88 	call	0x11188	; 0x11188 <__floatunsisf>
    f378:	20 e0       	ldi	r18, 0x00	; 0
    f37a:	30 e0       	ldi	r19, 0x00	; 0
    f37c:	4a e7       	ldi	r20, 0x7A	; 122
    f37e:	54 e4       	ldi	r21, 0x44	; 68
    f380:	0e 94 f9 8a 	call	0x115f2	; 0x115f2 <__divsf3>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2161
      send_mqtt_general_payload(&mqtt_client, str_topic, payload);
    */
    itoa(time_get_offset(), payload, 10);
    send_mqtt_general_payload(&mqtt_client, "time/ntp_offset", payload);
    ///
    dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, payload);
    f384:	8e 01       	movw	r16, r28
    f386:	0f 5f       	subi	r16, 0xFF	; 255
    f388:	1f 4f       	sbci	r17, 0xFF	; 255
    f38a:	22 e0       	ldi	r18, 0x02	; 2
    f38c:	44 e0       	ldi	r20, 0x04	; 4
    f38e:	0e 94 eb 7e 	call	0xfdd6	; 0xfdd6 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2162
    send_mqtt_general_payload(&mqtt_client, "status/voltage/33V", payload);
    f392:	a8 01       	movw	r20, r16
    f394:	6d e7       	ldi	r22, 0x7D	; 125
    f396:	78 e0       	ldi	r23, 0x08	; 8
    f398:	81 eb       	ldi	r24, 0xB1	; 177
    f39a:	93 e1       	ldi	r25, 0x13	; 19
    f39c:	0e 94 36 49 	call	0x926c	; 0x926c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2508
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
    f3a0:	60 91 c6 0b 	lds	r22, 0x0BC6	; 0x800bc6 <petnula>
    f3a4:	70 91 c7 0b 	lds	r23, 0x0BC7	; 0x800bc7 <petnula+0x1>
    f3a8:	53 e0       	ldi	r21, 0x03	; 3
    f3aa:	66 0f       	add	r22, r22
    f3ac:	77 1f       	adc	r23, r23
    f3ae:	5a 95       	dec	r21
    f3b0:	e1 f7       	brne	.-8      	; 0xf3aa <main+0x576>
    f3b2:	90 e0       	ldi	r25, 0x00	; 0
    f3b4:	80 e0       	ldi	r24, 0x00	; 0
    f3b6:	0e 94 c4 88 	call	0x11188	; 0x11188 <__floatunsisf>
    f3ba:	20 e0       	ldi	r18, 0x00	; 0
    f3bc:	30 e0       	ldi	r19, 0x00	; 0
    f3be:	4a e7       	ldi	r20, 0x7A	; 122
    f3c0:	54 e4       	ldi	r21, 0x44	; 68
    f3c2:	0e 94 f9 8a 	call	0x115f2	; 0x115f2 <__divsf3>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2164
    send_mqtt_general_payload(&mqtt_client, "time/ntp_offset", payload);
    ///
    dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, payload);
    send_mqtt_general_payload(&mqtt_client, "status/voltage/33V", payload);
    ///
    dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, payload);
    f3c6:	22 e0       	ldi	r18, 0x02	; 2
    f3c8:	44 e0       	ldi	r20, 0x04	; 4
    f3ca:	0e 94 eb 7e 	call	0xfdd6	; 0xfdd6 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2165
    send_mqtt_general_payload(&mqtt_client, "status/voltage/50V", payload);
    f3ce:	a8 01       	movw	r20, r16
    f3d0:	60 e9       	ldi	r22, 0x90	; 144
    f3d2:	78 e0       	ldi	r23, 0x08	; 8
    f3d4:	81 eb       	ldi	r24, 0xB1	; 177
    f3d6:	93 e1       	ldi	r25, 0x13	; 19
    f3d8:	0e 94 36 49 	call	0x926c	; 0x926c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2508
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
    f3dc:	80 91 c4 0b 	lds	r24, 0x0BC4	; 0x800bc4 <dvanact>
    f3e0:	90 91 c5 0b 	lds	r25, 0x0BC5	; 0x800bc5 <dvanact+0x1>
    f3e4:	29 e3       	ldi	r18, 0x39	; 57
    f3e6:	28 9f       	mul	r18, r24
    f3e8:	b0 01       	movw	r22, r0
    f3ea:	29 9f       	mul	r18, r25
    f3ec:	70 0d       	add	r23, r0
    f3ee:	11 24       	eor	r1, r1
    f3f0:	90 e0       	ldi	r25, 0x00	; 0
    f3f2:	80 e0       	ldi	r24, 0x00	; 0
    f3f4:	0e 94 c4 88 	call	0x11188	; 0x11188 <__floatunsisf>
    f3f8:	20 e0       	ldi	r18, 0x00	; 0
    f3fa:	30 e0       	ldi	r19, 0x00	; 0
    f3fc:	4a e7       	ldi	r20, 0x7A	; 122
    f3fe:	54 e4       	ldi	r21, 0x44	; 68
    f400:	0e 94 f9 8a 	call	0x115f2	; 0x115f2 <__divsf3>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2167
    send_mqtt_general_payload(&mqtt_client, "status/voltage/33V", payload);
    ///
    dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, payload);
    send_mqtt_general_payload(&mqtt_client, "status/voltage/50V", payload);
    ///
    dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, payload);
    f404:	22 e0       	ldi	r18, 0x02	; 2
    f406:	44 e0       	ldi	r20, 0x04	; 4
    f408:	0e 94 eb 7e 	call	0xfdd6	; 0xfdd6 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2168
    send_mqtt_general_payload(&mqtt_client, "status/voltage/12V", payload);
    f40c:	a8 01       	movw	r20, r16
    f40e:	63 ea       	ldi	r22, 0xA3	; 163
    f410:	78 e0       	ldi	r23, 0x08	; 8
    f412:	81 eb       	ldi	r24, 0xB1	; 177
    f414:	93 e1       	ldi	r25, 0x13	; 19
    f416:	0e 94 36 49 	call	0x926c	; 0x926c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
prepocet_proudu():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2523
*/
float prepocet_proudu(uint16_t vstup)
{
#define proud_constanta  470
  float proud = (vstup - proud_constanta) * 5 / 185;
  return vstup;
    f41a:	60 91 c2 0b 	lds	r22, 0x0BC2	; 0x800bc2 <proud>
    f41e:	70 91 c3 0b 	lds	r23, 0x0BC3	; 0x800bc3 <proud+0x1>
    f422:	90 e0       	ldi	r25, 0x00	; 0
    f424:	80 e0       	ldi	r24, 0x00	; 0
    f426:	0e 94 c4 88 	call	0x11188	; 0x11188 <__floatunsisf>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2170
    send_mqtt_general_payload(&mqtt_client, "status/voltage/50V", payload);
    ///
    dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, payload);
    send_mqtt_general_payload(&mqtt_client, "status/voltage/12V", payload);
    ///
    dtostrf(prepocet_proudu(proud), 4, 2, payload);
    f42a:	22 e0       	ldi	r18, 0x02	; 2
    f42c:	44 e0       	ldi	r20, 0x04	; 4
    f42e:	0e 94 eb 7e 	call	0xfdd6	; 0xfdd6 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2171
    send_mqtt_general_payload(&mqtt_client, "status/current/consume", payload);
    f432:	a8 01       	movw	r20, r16
    f434:	66 eb       	ldi	r22, 0xB6	; 182
    f436:	78 e0       	ldi	r23, 0x08	; 8
    f438:	81 eb       	ldi	r24, 0xB1	; 177
    f43a:	93 e1       	ldi	r25, 0x13	; 19
    f43c:	0e 94 36 49 	call	0x926c	; 0x926c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2095
  char hostname[10];
  char payload[64];
  char tmp1[4];
  itoa(Global_HWwirenum, payload, 10);
  send_mqtt_general_payload(&mqtt_client, "1wire/count", payload);
  for (uint8_t i = 0; i < Global_HWwirenum; i++)
    f440:	0d e5       	ldi	r16, 0x5D	; 93
    f442:	11 e0       	ldi	r17, 0x01	; 1
    f444:	d1 2c       	mov	r13, r1
    f446:	c1 2c       	mov	r12, r1
    f448:	fc 2c       	mov	r15, r12
thermostat_ring_get_active():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:133
}
////////////////////////////////////////////////////////////////////////////////////////////////////////
/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_active(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active);
    f44a:	c8 01       	movw	r24, r16
    f44c:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224]>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2196
  uint8_t tdsid;
  //char tmp1[12];
  //device_get_name(hostname);
  for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
    //// odeslu pouze pokud je ring pripraveny
    if (thermostat_ring_get_active(idx) != RING_FREE)
    f450:	8f 3f       	cpi	r24, 0xFF	; 255
    f452:	09 f4       	brne	.+2      	; 0xf456 <main+0x622>
    f454:	33 c1       	rjmp	.+614    	; 0xf6bc <main+0x888>
    f456:	38 01       	movw	r6, r16
    f458:	31 e1       	ldi	r19, 0x11	; 17
    f45a:	63 1a       	sub	r6, r19
    f45c:	71 08       	sbc	r7, r1
    f45e:	ae 01       	movw	r20, r28
    f460:	4f 5f       	subi	r20, 0xFF	; 255
    f462:	5f 4f       	sbci	r21, 0xFF	; 255
    f464:	5a 01       	movw	r10, r20
    f466:	48 01       	movw	r8, r16
    f468:	58 e0       	ldi	r21, 0x08	; 8
    f46a:	85 1a       	sub	r8, r21
    f46c:	91 08       	sbc	r9, r1
thermostat_ring_get_name():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:104
void thermostat_ring_get_name(uint8_t idx, char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i);
    f46e:	c3 01       	movw	r24, r6
    f470:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224]>
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:105
    name[i] = t;
    f474:	d5 01       	movw	r26, r10
    f476:	8d 93       	st	X+, r24
    f478:	5d 01       	movw	r10, r26
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:106
    if (t == 0) break;
    f47a:	88 23       	and	r24, r24
    f47c:	31 f0       	breq	.+12     	; 0xf48a <main+0x656>
    f47e:	bf ef       	ldi	r27, 0xFF	; 255
    f480:	6b 1a       	sub	r6, r27
    f482:	7b 0a       	sbc	r7, r27
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:102

/// ziska/nastavi nazev termostatu
void thermostat_ring_get_name(uint8_t idx, char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
    f484:	68 14       	cp	r6, r8
    f486:	79 04       	cpc	r7, r9
    f488:	91 f7       	brne	.-28     	; 0xf46e <main+0x63a>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2199
    {
      thermostat_ring_get_name(idx, payload);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "name", payload);
    f48a:	9e 01       	movw	r18, r28
    f48c:	2f 5f       	subi	r18, 0xFF	; 255
    f48e:	3f 4f       	sbci	r19, 0xFF	; 255
    f490:	44 e0       	ldi	r20, 0x04	; 4
    f492:	56 e0       	ldi	r21, 0x06	; 6
    f494:	6f 2d       	mov	r22, r15
    f496:	88 e5       	ldi	r24, 0x58	; 88
    f498:	98 e0       	ldi	r25, 0x08	; 8
    f49a:	0e 94 ad 48 	call	0x915a	; 0x915a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.140]>
thermostat_ring_get_active():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:133
}
////////////////////////////////////////////////////////////////////////////////////////////////////////
/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_active(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active);
    f49e:	c8 01       	movw	r24, r16
    f4a0:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    f4a4:	4a e0       	ldi	r20, 0x0A	; 10
    f4a6:	be 01       	movw	r22, r28
    f4a8:	6f 5f       	subi	r22, 0xFF	; 255
    f4aa:	7f 4f       	sbci	r23, 0xFF	; 255
    f4ac:	90 e0       	ldi	r25, 0x00	; 0
    f4ae:	0e 94 7f 80 	call	0x100fe	; 0x100fe <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2201
      itoa(thermostat_ring_get_active(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "active", payload);
    f4b2:	9e 01       	movw	r18, r28
    f4b4:	2f 5f       	subi	r18, 0xFF	; 255
    f4b6:	3f 4f       	sbci	r19, 0xFF	; 255
    f4b8:	42 e5       	ldi	r20, 0x52	; 82
    f4ba:	54 e0       	ldi	r21, 0x04	; 4
    f4bc:	6f 2d       	mov	r22, r15
    f4be:	88 e5       	ldi	r24, 0x58	; 88
    f4c0:	98 e0       	ldi	r25, 0x08	; 8
    f4c2:	0e 94 ad 48 	call	0x915a	; 0x915a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.140]>
thermostat_ring_get_program_id():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:144


//// nastaveni programu k ringu termostatu
uint8_t thermostat_ring_get_program_id(uint8_t idx)
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
    f4c6:	c8 01       	movw	r24, r16
    f4c8:	02 97       	sbiw	r24, 0x02	; 2
    f4ca:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    f4ce:	4a e0       	ldi	r20, 0x0A	; 10
    f4d0:	be 01       	movw	r22, r28
    f4d2:	6f 5f       	subi	r22, 0xFF	; 255
    f4d4:	7f 4f       	sbci	r23, 0xFF	; 255
    f4d6:	90 e0       	ldi	r25, 0x00	; 0
    f4d8:	0e 94 7f 80 	call	0x100fe	; 0x100fe <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2203
      itoa(thermostat_ring_get_program_id(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "program", payload);
    f4dc:	9e 01       	movw	r18, r28
    f4de:	2f 5f       	subi	r18, 0xFF	; 255
    f4e0:	3f 4f       	sbci	r19, 0xFF	; 255
    f4e2:	44 e8       	ldi	r20, 0x84	; 132
    f4e4:	56 e0       	ldi	r21, 0x06	; 6
    f4e6:	6f 2d       	mov	r22, r15
    f4e8:	88 e5       	ldi	r24, 0x58	; 88
    f4ea:	98 e0       	ldi	r25, 0x08	; 8
    f4ec:	0e 94 ad 48 	call	0x915a	; 0x915a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.140]>
thermostat_ring_get_mezni():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:154
}
///////////////////////////////////////////////////////////////////////////////////////////////////////
///mezni rozhodovaci teplota
int thermostat_ring_get_mezni(uint8_t idx)
{
  return (EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni) << 8) + EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1);
    f4f0:	c8 01       	movw	r24, r16
    f4f2:	07 97       	sbiw	r24, 0x07	; 7
    f4f4:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224]>
    f4f8:	e8 2e       	mov	r14, r24
    f4fa:	c8 01       	movw	r24, r16
    f4fc:	06 97       	sbiw	r24, 0x06	; 6
    f4fe:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224]>
    f502:	2e 2d       	mov	r18, r14
    f504:	30 e0       	ldi	r19, 0x00	; 0
    f506:	32 2f       	mov	r19, r18
    f508:	22 27       	eor	r18, r18
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    f50a:	4a e0       	ldi	r20, 0x0A	; 10
    f50c:	be 01       	movw	r22, r28
    f50e:	6f 5f       	subi	r22, 0xFF	; 255
    f510:	7f 4f       	sbci	r23, 0xFF	; 255
    f512:	82 0f       	add	r24, r18
    f514:	93 2f       	mov	r25, r19
    f516:	91 1d       	adc	r25, r1
    f518:	0e 94 7f 80 	call	0x100fe	; 0x100fe <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2205
      itoa(thermostat_ring_get_mezni(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "threshold", payload);
    f51c:	9e 01       	movw	r18, r28
    f51e:	2f 5f       	subi	r18, 0xFF	; 255
    f520:	3f 4f       	sbci	r19, 0xFF	; 255
    f522:	4a e7       	ldi	r20, 0x7A	; 122
    f524:	56 e0       	ldi	r21, 0x06	; 6
    f526:	6f 2d       	mov	r22, r15
    f528:	88 e5       	ldi	r24, 0x58	; 88
    f52a:	98 e0       	ldi	r25, 0x08	; 8
    f52c:	0e 94 ad 48 	call	0x915a	; 0x915a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.140]>
    f530:	58 01       	movw	r10, r16
    f532:	ef ef       	ldi	r30, 0xFF	; 255
    f534:	ae 1a       	sub	r10, r30
    f536:	be 0a       	sbc	r11, r30
thermostat_ring_get_mode():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:176
}
//////////////////////////////////////////////////////////////////////////////////////////////////////
//// nastaveni/ziska modu k ringu termostatu
uint8_t thermostat_ring_get_mode(uint8_t idx)
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_mode);
    f538:	c5 01       	movw	r24, r10
    f53a:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    f53e:	4a e0       	ldi	r20, 0x0A	; 10
    f540:	be 01       	movw	r22, r28
    f542:	6f 5f       	subi	r22, 0xFF	; 255
    f544:	7f 4f       	sbci	r23, 0xFF	; 255
    f546:	90 e0       	ldi	r25, 0x00	; 0
    f548:	0e 94 7f 80 	call	0x100fe	; 0x100fe <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2207
      itoa(thermostat_ring_get_mode(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "mode", payload);
    f54c:	9e 01       	movw	r18, r28
    f54e:	2f 5f       	subi	r18, 0xFF	; 255
    f550:	3f 4f       	sbci	r19, 0xFF	; 255
    f552:	4d e9       	ldi	r20, 0x9D	; 157
    f554:	56 e0       	ldi	r21, 0x06	; 6
    f556:	6f 2d       	mov	r22, r15
    f558:	88 e5       	ldi	r24, 0x58	; 88
    f55a:	98 e0       	ldi	r25, 0x08	; 8
    f55c:	0e 94 ad 48 	call	0x915a	; 0x915a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.140]>
thermostat_ring_get_mode():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:176
    f560:	c5 01       	movw	r24, r10
    f562:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224]>
convert_mode_text():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2574
  return mode;
}

void convert_mode_text(uint8_t mode, char *str)
{
  if (mode == TERM_MODE_OFF)   strcpy(str, "off");
    f566:	6d ec       	ldi	r22, 0xCD	; 205
    f568:	78 e0       	ldi	r23, 0x08	; 8
    f56a:	88 23       	and	r24, r24
    f56c:	a1 f0       	breq	.+40     	; 0xf596 <main+0x762>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2575
  if (mode == TERM_MODE_MAX)   strcpy(str, "heat");
    f56e:	6a e1       	ldi	r22, 0x1A	; 26
    f570:	75 e0       	ldi	r23, 0x05	; 5
    f572:	81 30       	cpi	r24, 0x01	; 1
    f574:	81 f0       	breq	.+32     	; 0xf596 <main+0x762>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2576
  if (mode == TERM_MODE_MAN_HEAT)   strcpy(str, "manual");
    f576:	6f e1       	ldi	r22, 0x1F	; 31
    f578:	75 e0       	ldi	r23, 0x05	; 5
    f57a:	83 30       	cpi	r24, 0x03	; 3
    f57c:	61 f0       	breq	.+24     	; 0xf596 <main+0x762>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2577
  if (mode == TERM_MODE_PROG)   strcpy(str, "auto");
    f57e:	66 e2       	ldi	r22, 0x26	; 38
    f580:	75 e0       	ldi	r23, 0x05	; 5
    f582:	82 30       	cpi	r24, 0x02	; 2
    f584:	41 f0       	breq	.+16     	; 0xf596 <main+0x762>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2578
  if (mode == TERM_MODE_CLIMATE_MAX)   strcpy(str, "cool");
    f586:	6b e2       	ldi	r22, 0x2B	; 43
    f588:	75 e0       	ldi	r23, 0x05	; 5
    f58a:	84 30       	cpi	r24, 0x04	; 4
    f58c:	21 f0       	breq	.+8      	; 0xf596 <main+0x762>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2579
  if (mode == TERM_MODE_FAN)   strcpy(str, "fan_only");
    f58e:	86 30       	cpi	r24, 0x06	; 6
    f590:	31 f4       	brne	.+12     	; 0xf59e <main+0x76a>
    f592:	60 e3       	ldi	r22, 0x30	; 48
    f594:	75 e0       	ldi	r23, 0x05	; 5
    f596:	ce 01       	movw	r24, r28
    f598:	01 96       	adiw	r24, 0x01	; 1
    f59a:	0e 94 c8 8c 	call	0x11990	; 0x11990 <strcpy>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2209
      itoa(thermostat_ring_get_mezni(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "threshold", payload);
      itoa(thermostat_ring_get_mode(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "mode", payload);
      convert_mode_text(thermostat_ring_get_mode(idx), payload);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "text_mode", payload);
    f59e:	9e 01       	movw	r18, r28
    f5a0:	2f 5f       	subi	r18, 0xFF	; 255
    f5a2:	3f 4f       	sbci	r19, 0xFF	; 255
    f5a4:	48 e9       	ldi	r20, 0x98	; 152
    f5a6:	56 e0       	ldi	r21, 0x06	; 6
    f5a8:	6f 2d       	mov	r22, r15
    f5aa:	88 e5       	ldi	r24, 0x58	; 88
    f5ac:	98 e0       	ldi	r25, 0x08	; 8
    f5ae:	0e 94 ad 48 	call	0x915a	; 0x915a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.140]>
thermostat_ring_get_state():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:19
uint8_t therm_power[MAX_THERMOSTAT];

/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_state(uint8_t idx)
{
  return therm_stav[idx];
    f5b2:	f6 01       	movw	r30, r12
    f5b4:	e5 53       	subi	r30, 0x35	; 53
    f5b6:	f4 4f       	sbci	r31, 0xF4	; 244
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2210
      itoa(thermostat_ring_get_state(idx), payload, 10);
    f5b8:	80 81       	ld	r24, Z
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    f5ba:	4a e0       	ldi	r20, 0x0A	; 10
    f5bc:	be 01       	movw	r22, r28
    f5be:	6f 5f       	subi	r22, 0xFF	; 255
    f5c0:	7f 4f       	sbci	r23, 0xFF	; 255
    f5c2:	90 e0       	ldi	r25, 0x00	; 0
    f5c4:	0e 94 7f 80 	call	0x100fe	; 0x100fe <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2211
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "status", payload);
    f5c8:	9e 01       	movw	r18, r28
    f5ca:	2f 5f       	subi	r18, 0xFF	; 255
    f5cc:	3f 4f       	sbci	r19, 0xFF	; 255
    f5ce:	41 ed       	ldi	r20, 0xD1	; 209
    f5d0:	58 e0       	ldi	r21, 0x08	; 8
    f5d2:	6f 2d       	mov	r22, r15
    f5d4:	88 e5       	ldi	r24, 0x58	; 88
    f5d6:	98 e0       	ldi	r25, 0x08	; 8
    f5d8:	0e 94 ad 48 	call	0x915a	; 0x915a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.140]>
thermostat_ring_get_asociate_tds():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:166


/// ziska/nastavi cislo tds k ringu termostatu
uint8_t thermostat_ring_get_asociate_tds(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
    f5dc:	c8 01       	movw	r24, r16
    f5de:	01 97       	sbiw	r24, 0x01	; 1
    f5e0:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224]>
    f5e4:	e8 2e       	mov	r14, r24
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2213
      tdsid = thermostat_ring_get_asociate_tds(idx);
      if (tdsid >= TDS_MEMORY_MAP_TDS && tdsid < TDS_MEMORY_MAP_RTDS)
    f5e6:	ff e0       	ldi	r31, 0x0F	; 15
    f5e8:	f8 17       	cp	r31, r24
    f5ea:	88 f0       	brcs	.+34     	; 0xf60e <main+0x7da>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    f5ec:	4a e0       	ldi	r20, 0x0A	; 10
    f5ee:	be 01       	movw	r22, r28
    f5f0:	6f 5f       	subi	r22, 0xFF	; 255
    f5f2:	7f 4f       	sbci	r23, 0xFF	; 255
    f5f4:	90 e0       	ldi	r25, 0x00	; 0
    f5f6:	0e 94 7f 80 	call	0x100fe	; 0x100fe <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2216
      {
        itoa(tdsid, payload, 10);
        send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "tds", payload);
    f5fa:	9e 01       	movw	r18, r28
    f5fc:	2f 5f       	subi	r18, 0xFF	; 255
    f5fe:	3f 4f       	sbci	r19, 0xFF	; 255
    f600:	4e e4       	ldi	r20, 0x4E	; 78
    f602:	54 e0       	ldi	r21, 0x04	; 4
    f604:	6f 2d       	mov	r22, r15
    f606:	88 e5       	ldi	r24, 0x58	; 88
    f608:	98 e0       	ldi	r25, 0x08	; 8
    f60a:	0e 94 ad 48 	call	0x915a	; 0x915a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.140]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2218
      }
      if (tdsid >= TDS_MEMORY_MAP_RTDS && tdsid < 127)
    f60e:	80 ef       	ldi	r24, 0xF0	; 240
    f610:	8e 0d       	add	r24, r14
    f612:	8f 36       	cpi	r24, 0x6F	; 111
    f614:	a0 f4       	brcc	.+40     	; 0xf63e <main+0x80a>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    f616:	4a e0       	ldi	r20, 0x0A	; 10
    f618:	be 01       	movw	r22, r28
    f61a:	6f 5f       	subi	r22, 0xFF	; 255
    f61c:	7f 4f       	sbci	r23, 0xFF	; 255
    f61e:	2e 2d       	mov	r18, r14
    f620:	20 51       	subi	r18, 0x10	; 16
    f622:	33 0b       	sbc	r19, r19
    f624:	c9 01       	movw	r24, r18
    f626:	0e 94 7f 80 	call	0x100fe	; 0x100fe <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2221
      {
        itoa(tdsid - TDS_MEMORY_MAP_RTDS, payload, 10);
        send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "rtds", payload);
    f62a:	9e 01       	movw	r18, r28
    f62c:	2f 5f       	subi	r18, 0xFF	; 255
    f62e:	3f 4f       	sbci	r19, 0xFF	; 255
    f630:	4d e4       	ldi	r20, 0x4D	; 77
    f632:	54 e0       	ldi	r21, 0x04	; 4
    f634:	6f 2d       	mov	r22, r15
    f636:	88 e5       	ldi	r24, 0x58	; 88
    f638:	98 e0       	ldi	r25, 0x08	; 8
    f63a:	0e 94 ad 48 	call	0x915a	; 0x915a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.140]>
thermostat_ring_get_output():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:123
}

/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_output(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
    f63e:	c8 01       	movw	r24, r16
    f640:	02 96       	adiw	r24, 0x02	; 2
    f642:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    f646:	4a e0       	ldi	r20, 0x0A	; 10
    f648:	be 01       	movw	r22, r28
    f64a:	6f 5f       	subi	r22, 0xFF	; 255
    f64c:	7f 4f       	sbci	r23, 0xFF	; 255
    f64e:	90 e0       	ldi	r25, 0x00	; 0
    f650:	0e 94 7f 80 	call	0x100fe	; 0x100fe <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2224
      }
      itoa(thermostat_ring_get_output(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "output", payload);
    f654:	9e 01       	movw	r18, r28
    f656:	2f 5f       	subi	r18, 0xFF	; 255
    f658:	3f 4f       	sbci	r19, 0xFF	; 255
    f65a:	42 ea       	ldi	r20, 0xA2	; 162
    f65c:	56 e0       	ldi	r21, 0x06	; 6
    f65e:	6f 2d       	mov	r22, r15
    f660:	88 e5       	ldi	r24, 0x58	; 88
    f662:	98 e0       	ldi	r25, 0x08	; 8
    f664:	0e 94 ad 48 	call	0x915a	; 0x915a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.140]>
thermostat_ring_get_status_data():
/tmp/arduino_build_695434/sketch/saric_thermostat.cpp:193
}
//////////////////////////////////////
//// nastaveni/ziska modu k ringu termostatu
uint8_t thermostat_ring_get_status_data(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites);
    f668:	c8 01       	movw	r24, r16
    f66a:	05 97       	sbiw	r24, 0x05	; 5
    f66c:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    f670:	4a e0       	ldi	r20, 0x0A	; 10
    f672:	be 01       	movw	r22, r28
    f674:	6f 5f       	subi	r22, 0xFF	; 255
    f676:	7f 4f       	sbci	r23, 0xFF	; 255
    f678:	90 e0       	ldi	r25, 0x00	; 0
    f67a:	0e 94 7f 80 	call	0x100fe	; 0x100fe <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2227

      itoa(thermostat_ring_get_status_data(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "status_bites", payload);
    f67e:	9e 01       	movw	r18, r28
    f680:	2f 5f       	subi	r18, 0xFF	; 255
    f682:	3f 4f       	sbci	r19, 0xFF	; 255
    f684:	48 ed       	ldi	r20, 0xD8	; 216
    f686:	58 e0       	ldi	r21, 0x08	; 8
    f688:	6f 2d       	mov	r22, r15
    f68a:	88 e5       	ldi	r24, 0x58	; 88
    f68c:	98 e0       	ldi	r25, 0x08	; 8
    f68e:	0e 94 ad 48 	call	0x915a	; 0x915a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.140]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2229

      itoa(last_output_update[idx], payload, 10);
    f692:	f6 01       	movw	r30, r12
    f694:	e6 52       	subi	r30, 0x26	; 38
    f696:	f4 4f       	sbci	r31, 0xF4	; 244
    f698:	80 81       	ld	r24, Z
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    f69a:	4a e0       	ldi	r20, 0x0A	; 10
    f69c:	be 01       	movw	r22, r28
    f69e:	6f 5f       	subi	r22, 0xFF	; 255
    f6a0:	7f 4f       	sbci	r23, 0xFF	; 255
    f6a2:	90 e0       	ldi	r25, 0x00	; 0
    f6a4:	0e 94 7f 80 	call	0x100fe	; 0x100fe <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2230
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "output_update", payload);
    f6a8:	9e 01       	movw	r18, r28
    f6aa:	2f 5f       	subi	r18, 0xFF	; 255
    f6ac:	3f 4f       	sbci	r19, 0xFF	; 255
    f6ae:	45 ee       	ldi	r20, 0xE5	; 229
    f6b0:	58 e0       	ldi	r21, 0x08	; 8
    f6b2:	6f 2d       	mov	r22, r15
    f6b4:	88 e5       	ldi	r24, 0x58	; 88
    f6b6:	98 e0       	ldi	r25, 0x08	; 8
    f6b8:	0e 94 ad 48 	call	0x915a	; 0x915a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.140]>
    f6bc:	3f ef       	ldi	r19, 0xFF	; 255
    f6be:	c3 1a       	sub	r12, r19
    f6c0:	d3 0a       	sbc	r13, r19
    f6c2:	0f 5d       	subi	r16, 0xDF	; 223
    f6c4:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2194
  //char hostname[10];
  char payload[64];
  uint8_t tdsid;
  //char tmp1[12];
  //device_get_name(hostname);
  for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
    f6c6:	4f e0       	ldi	r20, 0x0F	; 15
    f6c8:	c4 16       	cp	r12, r20
    f6ca:	d1 04       	cpc	r13, r1
    f6cc:	09 f0       	breq	.+2      	; 0xf6d0 <main+0x89c>
    f6ce:	bc ce       	rjmp	.-648    	; 0xf448 <main+0x614>
    f6d0:	89 ee       	ldi	r24, 0xE9	; 233
    f6d2:	e8 2e       	mov	r14, r24
    f6d4:	8b e0       	ldi	r24, 0x0B	; 11
    f6d6:	f8 2e       	mov	r15, r24
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2249
  struct_DDS18s20 tds;
  char payload[64];
  char tmp1[4];
  int tt;
  long avg = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
    f6d8:	10 e0       	ldi	r17, 0x00	; 0
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2253
    if (get_tds18s20(id, &tds) == 1)
      if (tds.used == 1) if (status_tds18s20[id].online == True)
        {
          tt = status_tds18s20[id].temp / 10;
    f6da:	9a e0       	ldi	r25, 0x0A	; 10
    f6dc:	c9 2e       	mov	r12, r25
    f6de:	d1 2c       	mov	r13, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2250
  char payload[64];
  char tmp1[4];
  int tt;
  long avg = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
    if (get_tds18s20(id, &tds) == 1)
    f6e0:	be 01       	movw	r22, r28
    f6e2:	6f 5b       	subi	r22, 0xBF	; 191
    f6e4:	7f 4f       	sbci	r23, 0xFF	; 255
    f6e6:	81 2f       	mov	r24, r17
    f6e8:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <get_tds18s20(unsigned char, struct_DDS18s20*)>
    f6ec:	81 30       	cpi	r24, 0x01	; 1
    f6ee:	09 f0       	breq	.+2      	; 0xf6f2 <main+0x8be>
    f6f0:	d2 c0       	rjmp	.+420    	; 0xf896 <main+0xa62>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2251
      if (tds.used == 1) if (status_tds18s20[id].online == True)
    f6f2:	22 96       	adiw	r28, 0x02	; 2
    f6f4:	8f ad       	ldd	r24, Y+63	; 0x3f
    f6f6:	22 97       	sbiw	r28, 0x02	; 2
    f6f8:	81 30       	cpi	r24, 0x01	; 1
    f6fa:	09 f0       	breq	.+2      	; 0xf6fe <main+0x8ca>
    f6fc:	cc c0       	rjmp	.+408    	; 0xf896 <main+0xa62>
    f6fe:	d7 01       	movw	r26, r14
    f700:	5b 96       	adiw	r26, 0x1b	; 27
    f702:	8c 91       	ld	r24, X
    f704:	5b 97       	sbiw	r26, 0x1b	; 27
    f706:	81 30       	cpi	r24, 0x01	; 1
    f708:	09 f0       	breq	.+2      	; 0xf70c <main+0x8d8>
    f70a:	c5 c0       	rjmp	.+394    	; 0xf896 <main+0xa62>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2253
        {
          tt = status_tds18s20[id].temp / 10;
    f70c:	15 96       	adiw	r26, 0x05	; 5
    f70e:	8d 91       	ld	r24, X+
    f710:	9c 91       	ld	r25, X
    f712:	b6 01       	movw	r22, r12
    f714:	0e 94 1d 8a 	call	0x1143a	; 0x1143a <__divmodhi4>
    f718:	cb 01       	movw	r24, r22
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    f71a:	4a e0       	ldi	r20, 0x0A	; 10
    f71c:	be 01       	movw	r22, r28
    f71e:	6f 5f       	subi	r22, 0xFF	; 255
    f720:	7f 4f       	sbci	r23, 0xFF	; 255
    f722:	0e 94 7f 80 	call	0x100fe	; 0x100fe <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2255
          itoa(tt, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "temp", payload);
    f726:	9e 01       	movw	r18, r28
    f728:	2f 5f       	subi	r18, 0xFF	; 255
    f72a:	3f 4f       	sbci	r19, 0xFF	; 255
    f72c:	49 e5       	ldi	r20, 0x59	; 89
    f72e:	54 e0       	ldi	r21, 0x04	; 4
    f730:	61 2f       	mov	r22, r17
    f732:	8e e4       	ldi	r24, 0x4E	; 78
    f734:	94 e0       	ldi	r25, 0x04	; 4
    f736:	0e 94 ad 48 	call	0x915a	; 0x915a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.140]>
    f73a:	30 e0       	ldi	r19, 0x00	; 0
    f73c:	20 e0       	ldi	r18, 0x00	; 0
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2256
          avg = 0;
    f73e:	60 e0       	ldi	r22, 0x00	; 0
    f740:	70 e0       	ldi	r23, 0x00	; 0
    f742:	cb 01       	movw	r24, r22
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2257
          for (uint8_t c = 0; c < MAX_AVG_TEMP; c++) avg = avg + status_tds18s20[id].average_temp[c];
    f744:	f9 01       	movw	r30, r18
    f746:	ee 0f       	add	r30, r30
    f748:	ff 1f       	adc	r31, r31
    f74a:	ee 0d       	add	r30, r14
    f74c:	ff 1d       	adc	r31, r15
    f74e:	87 80       	ldd	r8, Z+7	; 0x07
    f750:	90 84       	ldd	r9, Z+8	; 0x08
    f752:	09 2c       	mov	r0, r9
    f754:	00 0c       	add	r0, r0
    f756:	aa 08       	sbc	r10, r10
    f758:	bb 08       	sbc	r11, r11
    f75a:	68 0d       	add	r22, r8
    f75c:	79 1d       	adc	r23, r9
    f75e:	8a 1d       	adc	r24, r10
    f760:	9b 1d       	adc	r25, r11
    f762:	2f 5f       	subi	r18, 0xFF	; 255
    f764:	3f 4f       	sbci	r19, 0xFF	; 255
    f766:	2a 30       	cpi	r18, 0x0A	; 10
    f768:	31 05       	cpc	r19, r1
    f76a:	61 f7       	brne	.-40     	; 0xf744 <main+0x910>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2259
          avg = avg / MAX_AVG_TEMP;
          avg = avg / 10;
    f76c:	24 e6       	ldi	r18, 0x64	; 100
    f76e:	30 e0       	ldi	r19, 0x00	; 0
    f770:	40 e0       	ldi	r20, 0x00	; 0
    f772:	50 e0       	ldi	r21, 0x00	; 0
    f774:	0e 94 53 8a 	call	0x114a6	; 0x114a6 <__divmodsi4>
    f778:	c9 01       	movw	r24, r18
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    f77a:	4a e0       	ldi	r20, 0x0A	; 10
    f77c:	be 01       	movw	r22, r28
    f77e:	6f 5f       	subi	r22, 0xFF	; 255
    f780:	7f 4f       	sbci	r23, 0xFF	; 255
    f782:	0e 94 7f 80 	call	0x100fe	; 0x100fe <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2261
          itoa(avg, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "temp_avg", payload);
    f786:	9e 01       	movw	r18, r28
    f788:	2f 5f       	subi	r18, 0xFF	; 255
    f78a:	3f 4f       	sbci	r19, 0xFF	; 255
    f78c:	43 ef       	ldi	r20, 0xF3	; 243
    f78e:	58 e0       	ldi	r21, 0x08	; 8
    f790:	61 2f       	mov	r22, r17
    f792:	8e e4       	ldi	r24, 0x4E	; 78
    f794:	94 e0       	ldi	r25, 0x04	; 4
    f796:	0e 94 ad 48 	call	0x915a	; 0x915a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.140]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2263

          strcpy(payload, tds.name);
    f79a:	cc 57       	subi	r28, 0x7C	; 124
    f79c:	df 4f       	sbci	r29, 0xFF	; 255
    f79e:	68 81       	ld	r22, Y
    f7a0:	79 81       	ldd	r23, Y+1	; 0x01
    f7a2:	c4 58       	subi	r28, 0x84	; 132
    f7a4:	d0 40       	sbci	r29, 0x00	; 0
    f7a6:	ce 01       	movw	r24, r28
    f7a8:	01 96       	adiw	r24, 0x01	; 1
    f7aa:	0e 94 c8 8c 	call	0x11990	; 0x11990 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2264
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "name", payload);
    f7ae:	9e 01       	movw	r18, r28
    f7b0:	2f 5f       	subi	r18, 0xFF	; 255
    f7b2:	3f 4f       	sbci	r19, 0xFF	; 255
    f7b4:	44 e0       	ldi	r20, 0x04	; 4
    f7b6:	56 e0       	ldi	r21, 0x06	; 6
    f7b8:	61 2f       	mov	r22, r17
    f7ba:	8e e4       	ldi	r24, 0x4E	; 78
    f7bc:	94 e0       	ldi	r25, 0x04	; 4
    f7be:	0e 94 ad 48 	call	0x915a	; 0x915a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.140]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    f7c2:	4a e0       	ldi	r20, 0x0A	; 10
    f7c4:	be 01       	movw	r22, r28
    f7c6:	6f 5f       	subi	r22, 0xFF	; 255
    f7c8:	7f 4f       	sbci	r23, 0xFF	; 255
    f7ca:	2d 96       	adiw	r28, 0x0d	; 13
    f7cc:	8e ad       	ldd	r24, Y+62	; 0x3e
    f7ce:	9f ad       	ldd	r25, Y+63	; 0x3f
    f7d0:	2d 97       	sbiw	r28, 0x0d	; 13
    f7d2:	0e 94 7f 80 	call	0x100fe	; 0x100fe <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2267
          tt = tds.offset;
          itoa(tt, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "offset", payload);
    f7d6:	9e 01       	movw	r18, r28
    f7d8:	2f 5f       	subi	r18, 0xFF	; 255
    f7da:	3f 4f       	sbci	r19, 0xFF	; 255
    f7dc:	46 e7       	ldi	r20, 0x76	; 118
    f7de:	58 e0       	ldi	r21, 0x08	; 8
    f7e0:	61 2f       	mov	r22, r17
    f7e2:	8e e4       	ldi	r24, 0x4E	; 78
    f7e4:	94 e0       	ldi	r25, 0x04	; 4
    f7e6:	0e 94 ad 48 	call	0x915a	; 0x915a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.140]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2268
          tt = status_tds18s20[id].online;
    f7ea:	f7 01       	movw	r30, r14
    f7ec:	83 8d       	ldd	r24, Z+27	; 0x1b
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    f7ee:	4a e0       	ldi	r20, 0x0A	; 10
    f7f0:	be 01       	movw	r22, r28
    f7f2:	6f 5f       	subi	r22, 0xFF	; 255
    f7f4:	7f 4f       	sbci	r23, 0xFF	; 255
    f7f6:	90 e0       	ldi	r25, 0x00	; 0
    f7f8:	0e 94 7f 80 	call	0x100fe	; 0x100fe <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2270
          itoa(tt, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "online", payload);
    f7fc:	9e 01       	movw	r18, r28
    f7fe:	2f 5f       	subi	r18, 0xFF	; 255
    f800:	3f 4f       	sbci	r19, 0xFF	; 255
    f802:	4c ef       	ldi	r20, 0xFC	; 252
    f804:	58 e0       	ldi	r21, 0x08	; 8
    f806:	61 2f       	mov	r22, r17
    f808:	8e e4       	ldi	r24, 0x4E	; 78
    f80a:	94 e0       	ldi	r25, 0x04	; 4
    f80c:	0e 94 ad 48 	call	0x915a	; 0x915a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.140]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2271
          payload[0] = 0;
    f810:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2272
          createString(payload, ':', tds.rom, 8, 16);
    f812:	00 e1       	ldi	r16, 0x10	; 16
    f814:	28 e0       	ldi	r18, 0x08	; 8
    f816:	ca 57       	subi	r28, 0x7A	; 122
    f818:	df 4f       	sbci	r29, 0xFF	; 255
    f81a:	48 81       	ld	r20, Y
    f81c:	59 81       	ldd	r21, Y+1	; 0x01
    f81e:	c6 58       	subi	r28, 0x86	; 134
    f820:	d0 40       	sbci	r29, 0x00	; 0
    f822:	6a e3       	ldi	r22, 0x3A	; 58
    f824:	ce 01       	movw	r24, r28
    f826:	01 96       	adiw	r24, 0x01	; 1
    f828:	0e 94 6c 4b 	call	0x96d8	; 0x96d8 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2273
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "rom", payload);
    f82c:	9e 01       	movw	r18, r28
    f82e:	2f 5f       	subi	r18, 0xFF	; 255
    f830:	3f 4f       	sbci	r19, 0xFF	; 255
    f832:	48 e7       	ldi	r20, 0x78	; 120
    f834:	57 e0       	ldi	r21, 0x07	; 7
    f836:	61 2f       	mov	r22, r17
    f838:	8e e4       	ldi	r24, 0x4E	; 78
    f83a:	94 e0       	ldi	r25, 0x04	; 4
    f83c:	0e 94 ad 48 	call	0x915a	; 0x915a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.140]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2274
          tt = tds.period;
    f840:	66 96       	adiw	r28, 0x16	; 22
    f842:	8f ad       	ldd	r24, Y+63	; 0x3f
    f844:	66 97       	sbiw	r28, 0x16	; 22
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    f846:	4a e0       	ldi	r20, 0x0A	; 10
    f848:	be 01       	movw	r22, r28
    f84a:	6f 5f       	subi	r22, 0xFF	; 255
    f84c:	7f 4f       	sbci	r23, 0xFF	; 255
    f84e:	90 e0       	ldi	r25, 0x00	; 0
    f850:	0e 94 7f 80 	call	0x100fe	; 0x100fe <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2276
          itoa(tt, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "period", payload);
    f854:	9e 01       	movw	r18, r28
    f856:	2f 5f       	subi	r18, 0xFF	; 255
    f858:	3f 4f       	sbci	r19, 0xFF	; 255
    f85a:	43 e7       	ldi	r20, 0x73	; 115
    f85c:	56 e0       	ldi	r21, 0x06	; 6
    f85e:	61 2f       	mov	r22, r17
    f860:	8e e4       	ldi	r24, 0x4E	; 78
    f862:	94 e0       	ldi	r25, 0x04	; 4
    f864:	0e 94 ad 48 	call	0x915a	; 0x915a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.140]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2278

          tt = (uptime & 0xff) - status_tds18s20[id].period_now;
    f868:	80 91 b3 0c 	lds	r24, 0x0CB3	; 0x800cb3 <uptime>
    f86c:	d7 01       	movw	r26, r14
    f86e:	5c 96       	adiw	r26, 0x1c	; 28
    f870:	9c 91       	ld	r25, X
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    f872:	4a e0       	ldi	r20, 0x0A	; 10
    f874:	be 01       	movw	r22, r28
    f876:	6f 5f       	subi	r22, 0xFF	; 255
    f878:	7f 4f       	sbci	r23, 0xFF	; 255
    f87a:	89 1b       	sub	r24, r25
    f87c:	99 0b       	sbc	r25, r25
    f87e:	0e 94 7f 80 	call	0x100fe	; 0x100fe <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2280
          itoa(tt, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "start_at", payload);
    f882:	9e 01       	movw	r18, r28
    f884:	2f 5f       	subi	r18, 0xFF	; 255
    f886:	3f 4f       	sbci	r19, 0xFF	; 255
    f888:	43 e0       	ldi	r20, 0x03	; 3
    f88a:	59 e0       	ldi	r21, 0x09	; 9
    f88c:	61 2f       	mov	r22, r17
    f88e:	8e e4       	ldi	r24, 0x4E	; 78
    f890:	94 e0       	ldi	r25, 0x04	; 4
    f892:	0e 94 ad 48 	call	0x915a	; 0x915a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.140]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2249
  struct_DDS18s20 tds;
  char payload[64];
  char tmp1[4];
  int tt;
  long avg = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
    f896:	1f 5f       	subi	r17, 0xFF	; 255
    f898:	be e1       	ldi	r27, 0x1E	; 30
    f89a:	eb 0e       	add	r14, r27
    f89c:	f1 1c       	adc	r15, r1
    f89e:	16 30       	cpi	r17, 0x06	; 6
    f8a0:	09 f0       	breq	.+2      	; 0xf8a4 <main+0xa70>
    f8a2:	1e cf       	rjmp	.-452    	; 0xf6e0 <main+0x8ac>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3226
    //send_mesh_status();


  }

  if ((millis() - milis_1s) > 1000)
    f8a4:	0e 94 28 13 	call	0x2650	; 0x2650 <millis>
    f8a8:	00 91 b7 0c 	lds	r16, 0x0CB7	; 0x800cb7 <milis_1s>
    f8ac:	10 91 b8 0c 	lds	r17, 0x0CB8	; 0x800cb8 <milis_1s+0x1>
    f8b0:	20 91 b9 0c 	lds	r18, 0x0CB9	; 0x800cb9 <milis_1s+0x2>
    f8b4:	30 91 ba 0c 	lds	r19, 0x0CBA	; 0x800cba <milis_1s+0x3>
    f8b8:	60 1b       	sub	r22, r16
    f8ba:	71 0b       	sbc	r23, r17
    f8bc:	82 0b       	sbc	r24, r18
    f8be:	93 0b       	sbc	r25, r19
    f8c0:	69 3e       	cpi	r22, 0xE9	; 233
    f8c2:	73 40       	sbci	r23, 0x03	; 3
    f8c4:	81 05       	cpc	r24, r1
    f8c6:	91 05       	cpc	r25, r1
    f8c8:	08 f4       	brcc	.+2      	; 0xf8cc <main+0xa98>
    f8ca:	3b c1       	rjmp	.+630    	; 0xfb42 <main+0xd0e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3228
  {
    milis_1s = millis();
    f8cc:	0e 94 28 13 	call	0x2650	; 0x2650 <millis>
    f8d0:	60 93 b7 0c 	sts	0x0CB7, r22	; 0x800cb7 <milis_1s>
    f8d4:	70 93 b8 0c 	sts	0x0CB8, r23	; 0x800cb8 <milis_1s+0x1>
    f8d8:	80 93 b9 0c 	sts	0x0CB9, r24	; 0x800cb9 <milis_1s+0x2>
    f8dc:	90 93 ba 0c 	sts	0x0CBA, r25	; 0x800cba <milis_1s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3229
    uptime++;
    f8e0:	80 90 b3 0c 	lds	r8, 0x0CB3	; 0x800cb3 <uptime>
    f8e4:	90 90 b4 0c 	lds	r9, 0x0CB4	; 0x800cb4 <uptime+0x1>
    f8e8:	a0 90 b5 0c 	lds	r10, 0x0CB5	; 0x800cb5 <uptime+0x2>
    f8ec:	b0 90 b6 0c 	lds	r11, 0x0CB6	; 0x800cb6 <uptime+0x3>
    f8f0:	ff ef       	ldi	r31, 0xFF	; 255
    f8f2:	8f 1a       	sub	r8, r31
    f8f4:	9f 0a       	sbc	r9, r31
    f8f6:	af 0a       	sbc	r10, r31
    f8f8:	bf 0a       	sbc	r11, r31
    f8fa:	80 92 b3 0c 	sts	0x0CB3, r8	; 0x800cb3 <uptime>
    f8fe:	90 92 b4 0c 	sts	0x0CB4, r9	; 0x800cb4 <uptime+0x1>
    f902:	a0 92 b5 0c 	sts	0x0CB5, r10	; 0x800cb5 <uptime+0x2>
    f906:	b0 92 b6 0c 	sts	0x0CB6, r11	; 0x800cb6 <uptime+0x3>
    f90a:	09 ee       	ldi	r16, 0xE9	; 233
    f90c:	1b e0       	ldi	r17, 0x0B	; 11
main():
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:257
uint8_t mereni_hwwire(uint16_t uptime)
{
  uint8_t status = 0;
  uint8_t t, e;
  struct_DDS18s20 tds;
  for (uint8_t w = 0; w < HW_ONEWIRE_MAXROMS; w++)
    f90e:	f1 2c       	mov	r15, r1
mereni_hwwire():
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:260
  {
    get_tds18s20(w, &tds);
    if ((tds.used == 1) && (((uptime & 0xff) - status_tds18s20[w].period_now) > tds.period))
    f910:	94 01       	movw	r18, r8
    f912:	33 27       	eor	r19, r19
    f914:	ce 57       	subi	r28, 0x7E	; 126
    f916:	df 4f       	sbci	r29, 0xFF	; 255
    f918:	39 83       	std	Y+1, r19	; 0x01
    f91a:	28 83       	st	Y, r18
    f91c:	c2 58       	subi	r28, 0x82	; 130
    f91e:	d0 40       	sbci	r29, 0x00	; 0
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:259
  uint8_t status = 0;
  uint8_t t, e;
  struct_DDS18s20 tds;
  for (uint8_t w = 0; w < HW_ONEWIRE_MAXROMS; w++)
  {
    get_tds18s20(w, &tds);
    f920:	be 01       	movw	r22, r28
    f922:	6f 5f       	subi	r22, 0xFF	; 255
    f924:	7f 4f       	sbci	r23, 0xFF	; 255
    f926:	8f 2d       	mov	r24, r15
    f928:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:260
    if ((tds.used == 1) && (((uptime & 0xff) - status_tds18s20[w].period_now) > tds.period))
    f92c:	e9 80       	ldd	r14, Y+1	; 0x01
    f92e:	31 e0       	ldi	r19, 0x01	; 1
    f930:	e3 12       	cpse	r14, r19
    f932:	f7 c0       	rjmp	.+494    	; 0xfb22 <main+0xcee>
    f934:	d8 01       	movw	r26, r16
    f936:	5c 96       	adiw	r26, 0x1c	; 28
    f938:	8c 91       	ld	r24, X
    f93a:	5c 97       	sbiw	r26, 0x1c	; 28
    f93c:	ce 57       	subi	r28, 0x7E	; 126
    f93e:	df 4f       	sbci	r29, 0xFF	; 255
    f940:	e8 81       	ld	r30, Y
    f942:	f9 81       	ldd	r31, Y+1	; 0x01
    f944:	c2 58       	subi	r28, 0x82	; 130
    f946:	d0 40       	sbci	r29, 0x00	; 0
    f948:	e8 1b       	sub	r30, r24
    f94a:	f1 09       	sbc	r31, r1
    f94c:	2d 89       	ldd	r18, Y+21	; 0x15
    f94e:	2e 17       	cp	r18, r30
    f950:	1f 06       	cpc	r1, r31
    f952:	08 f0       	brcs	.+2      	; 0xf956 <main+0xb22>
    f954:	e6 c0       	rjmp	.+460    	; 0xfb22 <main+0xcee>
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:262
    {
      if (status_tds18s20[w].wait == false)
    f956:	5d 96       	adiw	r26, 0x1d	; 29
    f958:	8c 91       	ld	r24, X
    f95a:	81 11       	cpse	r24, r1
    f95c:	10 c0       	rjmp	.+32     	; 0xf97e <main+0xb4a>
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:264
      {
        owReset(tds.assigned_ds2482);
    f95e:	8a 85       	ldd	r24, Y+10	; 0x0a
    f960:	0e 94 b1 32 	call	0x6562	; 0x6562 <ds2482owReset(unsigned char)>
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:265
        owMatchRom(tds.assigned_ds2482, tds.rom);
    f964:	be 01       	movw	r22, r28
    f966:	6e 5f       	subi	r22, 0xFE	; 254
    f968:	7f 4f       	sbci	r23, 0xFF	; 255
    f96a:	8a 85       	ldd	r24, Y+10	; 0x0a
    f96c:	0e 94 92 32 	call	0x6524	; 0x6524 <owMatchRom(unsigned char, unsigned char*)>
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:266
        owWriteByte(tds.assigned_ds2482, OW_CONVERT_T);
    f970:	64 e4       	ldi	r22, 0x44	; 68
    f972:	8a 85       	ldd	r24, Y+10	; 0x0a
    f974:	0e 94 59 32 	call	0x64b2	; 0x64b2 <ds2482owWriteByte(unsigned char, unsigned char)>
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:267
        status_tds18s20[w].wait = true;
    f978:	d8 01       	movw	r26, r16
    f97a:	5d 96       	adiw	r26, 0x1d	; 29
    f97c:	ec 92       	st	X, r14
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:269
      }
      if (status_tds18s20[w].wait == true)
    f97e:	f8 01       	movw	r30, r16
    f980:	d5 8c       	ldd	r13, Z+29	; 0x1d
    f982:	f1 e0       	ldi	r31, 0x01	; 1
    f984:	df 12       	cpse	r13, r31
    f986:	cd c0       	rjmp	.+410    	; 0xfb22 <main+0xcee>
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:271
      {
        owReset(tds.assigned_ds2482);
    f988:	8a 85       	ldd	r24, Y+10	; 0x0a
    f98a:	0e 94 b1 32 	call	0x6562	; 0x6562 <ds2482owReset(unsigned char)>
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:272
        owMatchRom(tds.assigned_ds2482, tds.rom);
    f98e:	be 01       	movw	r22, r28
    f990:	6e 5f       	subi	r22, 0xFE	; 254
    f992:	7f 4f       	sbci	r23, 0xFF	; 255
    f994:	8a 85       	ldd	r24, Y+10	; 0x0a
    f996:	0e 94 92 32 	call	0x6524	; 0x6524 <owMatchRom(unsigned char, unsigned char*)>
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:273
        owReadByte(tds.assigned_ds2482, &t);
    f99a:	be 01       	movw	r22, r28
    f99c:	6f 57       	subi	r22, 0x7F	; 127
    f99e:	7f 4f       	sbci	r23, 0xFF	; 255
    f9a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    f9a2:	0e 94 fd 31 	call	0x63fa	; 0x63fa <ds2482owReadByte(unsigned char, unsigned char*)>
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:274
        if (t != 0)
    f9a6:	cf 57       	subi	r28, 0x7F	; 127
    f9a8:	df 4f       	sbci	r29, 0xFF	; 255
    f9aa:	88 81       	ld	r24, Y
    f9ac:	c1 58       	subi	r28, 0x81	; 129
    f9ae:	d0 40       	sbci	r29, 0x00	; 0
    f9b0:	88 23       	and	r24, r24
    f9b2:	09 f4       	brne	.+2      	; 0xf9b6 <main+0xb82>
    f9b4:	b6 c0       	rjmp	.+364    	; 0xfb22 <main+0xcee>
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:276
        {
          status_tds18s20[w].wait = false;
    f9b6:	d8 01       	movw	r26, r16
    f9b8:	5d 96       	adiw	r26, 0x1d	; 29
    f9ba:	1c 92       	st	X, r1
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:277
          status = owReset(tds.assigned_ds2482);
    f9bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    f9be:	0e 94 b1 32 	call	0x6562	; 0x6562 <ds2482owReset(unsigned char)>
    f9c2:	68 2e       	mov	r6, r24
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:278
          status = status + owMatchRom(tds.assigned_ds2482, tds.rom );
    f9c4:	be 01       	movw	r22, r28
    f9c6:	6e 5f       	subi	r22, 0xFE	; 254
    f9c8:	7f 4f       	sbci	r23, 0xFF	; 255
    f9ca:	8a 85       	ldd	r24, Y+10	; 0x0a
    f9cc:	0e 94 92 32 	call	0x6524	; 0x6524 <owMatchRom(unsigned char, unsigned char*)>
    f9d0:	68 0e       	add	r6, r24
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:279
          status = status + owWriteByte(tds.assigned_ds2482, OW_READ_SCRATCHPAD);
    f9d2:	6e eb       	ldi	r22, 0xBE	; 190
    f9d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    f9d6:	0e 94 59 32 	call	0x64b2	; 0x64b2 <ds2482owWriteByte(unsigned char, unsigned char)>
    f9da:	68 0e       	add	r6, r24
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:280
          status = status + owReadByte(tds.assigned_ds2482, &e);     //0byte
    f9dc:	be 01       	movw	r22, r28
    f9de:	6f 5b       	subi	r22, 0xBF	; 191
    f9e0:	7f 4f       	sbci	r23, 0xFF	; 255
    f9e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    f9e4:	0e 94 fd 31 	call	0x63fa	; 0x63fa <ds2482owReadByte(unsigned char, unsigned char*)>
    f9e8:	68 0e       	add	r6, r24
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:281
          status_tds18s20[w].tempL = e;
    f9ea:	22 96       	adiw	r28, 0x02	; 2
    f9ec:	cf ac       	ldd	r12, Y+63	; 0x3f
    f9ee:	22 97       	sbiw	r28, 0x02	; 2
    f9f0:	f8 01       	movw	r30, r16
    f9f2:	c0 82       	st	Z, r12
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:282
          status = status + owReadByte(tds.assigned_ds2482, &e);     //1byte
    f9f4:	be 01       	movw	r22, r28
    f9f6:	6f 5b       	subi	r22, 0xBF	; 191
    f9f8:	7f 4f       	sbci	r23, 0xFF	; 255
    f9fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    f9fc:	0e 94 fd 31 	call	0x63fa	; 0x63fa <ds2482owReadByte(unsigned char, unsigned char*)>
    fa00:	68 0e       	add	r6, r24
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:283
          status_tds18s20[w].tempH = e;
    fa02:	22 96       	adiw	r28, 0x02	; 2
    fa04:	7f ac       	ldd	r7, Y+63	; 0x3f
    fa06:	22 97       	sbiw	r28, 0x02	; 2
    fa08:	d8 01       	movw	r26, r16
    fa0a:	11 96       	adiw	r26, 0x01	; 1
    fa0c:	7c 92       	st	X, r7
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:284
          status = status + owReadByte(tds.assigned_ds2482, &e); //2byte
    fa0e:	be 01       	movw	r22, r28
    fa10:	6f 5b       	subi	r22, 0xBF	; 191
    fa12:	7f 4f       	sbci	r23, 0xFF	; 255
    fa14:	8a 85       	ldd	r24, Y+10	; 0x0a
    fa16:	0e 94 fd 31 	call	0x63fa	; 0x63fa <ds2482owReadByte(unsigned char, unsigned char*)>
    fa1a:	68 0e       	add	r6, r24
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:285
          status = status + owReadByte(tds.assigned_ds2482, &e); //3byte
    fa1c:	be 01       	movw	r22, r28
    fa1e:	6f 5b       	subi	r22, 0xBF	; 191
    fa20:	7f 4f       	sbci	r23, 0xFF	; 255
    fa22:	8a 85       	ldd	r24, Y+10	; 0x0a
    fa24:	0e 94 fd 31 	call	0x63fa	; 0x63fa <ds2482owReadByte(unsigned char, unsigned char*)>
    fa28:	68 0e       	add	r6, r24
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:286
          status = status + owReadByte(tds.assigned_ds2482, &e); //4byte
    fa2a:	be 01       	movw	r22, r28
    fa2c:	6f 5b       	subi	r22, 0xBF	; 191
    fa2e:	7f 4f       	sbci	r23, 0xFF	; 255
    fa30:	8a 85       	ldd	r24, Y+10	; 0x0a
    fa32:	0e 94 fd 31 	call	0x63fa	; 0x63fa <ds2482owReadByte(unsigned char, unsigned char*)>
    fa36:	68 0e       	add	r6, r24
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:287
          status = status + owReadByte(tds.assigned_ds2482, &e); //5byte
    fa38:	be 01       	movw	r22, r28
    fa3a:	6f 5b       	subi	r22, 0xBF	; 191
    fa3c:	7f 4f       	sbci	r23, 0xFF	; 255
    fa3e:	8a 85       	ldd	r24, Y+10	; 0x0a
    fa40:	0e 94 fd 31 	call	0x63fa	; 0x63fa <ds2482owReadByte(unsigned char, unsigned char*)>
    fa44:	68 0e       	add	r6, r24
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:288
          status = status + owReadByte(tds.assigned_ds2482, &e); //6byte
    fa46:	be 01       	movw	r22, r28
    fa48:	6f 5b       	subi	r22, 0xBF	; 191
    fa4a:	7f 4f       	sbci	r23, 0xFF	; 255
    fa4c:	8a 85       	ldd	r24, Y+10	; 0x0a
    fa4e:	0e 94 fd 31 	call	0x63fa	; 0x63fa <ds2482owReadByte(unsigned char, unsigned char*)>
    fa52:	68 0e       	add	r6, r24
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:289
          status_tds18s20[w].CR = e; //count remain
    fa54:	22 96       	adiw	r28, 0x02	; 2
    fa56:	8f ad       	ldd	r24, Y+63	; 0x3f
    fa58:	22 97       	sbiw	r28, 0x02	; 2
    fa5a:	f8 01       	movw	r30, r16
    fa5c:	82 83       	std	Z+2, r24	; 0x02
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:290
          status = status + owReadByte(tds.assigned_ds2482, &e); //7byte
    fa5e:	be 01       	movw	r22, r28
    fa60:	6f 5b       	subi	r22, 0xBF	; 191
    fa62:	7f 4f       	sbci	r23, 0xFF	; 255
    fa64:	8a 85       	ldd	r24, Y+10	; 0x0a
    fa66:	0e 94 fd 31 	call	0x63fa	; 0x63fa <ds2482owReadByte(unsigned char, unsigned char*)>
    fa6a:	68 0e       	add	r6, r24
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:291
          status_tds18s20[w].CP = e; // count per
    fa6c:	22 96       	adiw	r28, 0x02	; 2
    fa6e:	ef ac       	ldd	r14, Y+63	; 0x3f
    fa70:	22 97       	sbiw	r28, 0x02	; 2
    fa72:	d8 01       	movw	r26, r16
    fa74:	13 96       	adiw	r26, 0x03	; 3
    fa76:	ec 92       	st	X, r14
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:292
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
    fa78:	be 01       	movw	r22, r28
    fa7a:	6f 5b       	subi	r22, 0xBF	; 191
    fa7c:	7f 4f       	sbci	r23, 0xFF	; 255
    fa7e:	8a 85       	ldd	r24, Y+10	; 0x0a
    fa80:	0e 94 fd 31 	call	0x63fa	; 0x63fa <ds2482owReadByte(unsigned char, unsigned char*)>
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:293
          status_tds18s20[w].CRC = e; // crc soucet
    fa84:	22 96       	adiw	r28, 0x02	; 2
    fa86:	9f ad       	ldd	r25, Y+63	; 0x3f
    fa88:	22 97       	sbiw	r28, 0x02	; 2
    fa8a:	f8 01       	movw	r30, r16
    fa8c:	94 83       	std	Z+4, r25	; 0x04
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:292
          status = status + owReadByte(tds.assigned_ds2482, &e); //5byte
          status = status + owReadByte(tds.assigned_ds2482, &e); //6byte
          status_tds18s20[w].CR = e; //count remain
          status = status + owReadByte(tds.assigned_ds2482, &e); //7byte
          status_tds18s20[w].CP = e; // count per
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
    fa8e:	86 0d       	add	r24, r6
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:294
          status_tds18s20[w].CRC = e; // crc soucet
          if (status == 0)
    fa90:	09 f0       	breq	.+2      	; 0xfa94 <main+0xc60>
    fa92:	95 c1       	rjmp	.+810    	; 0xfdbe <main+0xf8a>
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:297
          {
            int temp = (int) status_tds18s20[w].tempH << 11 | (int) status_tds18s20[w].tempL << 3;
            status_tds18s20[w].temp = ((temp & 0xfff0) << 3) -  16 + (  (  (status_tds18s20[w].CP - (status_tds18s20[t].CR) << 7) ) / status_tds18s20[w].CP ) + tds.offset;
    fa94:	6e 2d       	mov	r22, r14
    fa96:	70 e0       	ldi	r23, 0x00	; 0
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:296
          status_tds18s20[w].CP = e; // count per
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
          status_tds18s20[w].CRC = e; // crc soucet
          if (status == 0)
          {
            int temp = (int) status_tds18s20[w].tempH << 11 | (int) status_tds18s20[w].tempL << 3;
    fa98:	27 2d       	mov	r18, r7
    fa9a:	30 e0       	ldi	r19, 0x00	; 0
    fa9c:	32 2f       	mov	r19, r18
    fa9e:	22 27       	eor	r18, r18
    faa0:	33 0f       	add	r19, r19
    faa2:	33 0f       	add	r19, r19
    faa4:	33 0f       	add	r19, r19
    faa6:	f8 e0       	ldi	r31, 0x08	; 8
    faa8:	cf 9e       	mul	r12, r31
    faaa:	c0 01       	movw	r24, r0
    faac:	11 24       	eor	r1, r1
    faae:	28 2b       	or	r18, r24
    fab0:	39 2b       	or	r19, r25
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:297
            status_tds18s20[w].temp = ((temp & 0xfff0) << 3) -  16 + (  (  (status_tds18s20[w].CP - (status_tds18s20[t].CR) << 7) ) / status_tds18s20[w].CP ) + tds.offset;
    fab2:	a3 e0       	ldi	r26, 0x03	; 3
    fab4:	22 0f       	add	r18, r18
    fab6:	33 1f       	adc	r19, r19
    fab8:	aa 95       	dec	r26
    faba:	e1 f7       	brne	.-8      	; 0xfab4 <main+0xc80>
    fabc:	20 78       	andi	r18, 0x80	; 128
    fabe:	8b 85       	ldd	r24, Y+11	; 0x0b
    fac0:	9c 85       	ldd	r25, Y+12	; 0x0c
    fac2:	40 97       	sbiw	r24, 0x10	; 16
    fac4:	28 0f       	add	r18, r24
    fac6:	39 1f       	adc	r19, r25
    fac8:	cf 57       	subi	r28, 0x7F	; 127
    faca:	df 4f       	sbci	r29, 0xFF	; 255
    facc:	e8 81       	ld	r30, Y
    face:	c1 58       	subi	r28, 0x81	; 129
    fad0:	d0 40       	sbci	r29, 0x00	; 0
    fad2:	4e e1       	ldi	r20, 0x1E	; 30
    fad4:	4e 9f       	mul	r20, r30
    fad6:	f0 01       	movw	r30, r0
    fad8:	11 24       	eor	r1, r1
    fada:	e7 51       	subi	r30, 0x17	; 23
    fadc:	f4 4f       	sbci	r31, 0xF4	; 244
    fade:	82 81       	ldd	r24, Z+2	; 0x02
    fae0:	db 01       	movw	r26, r22
    fae2:	a8 1b       	sub	r26, r24
    fae4:	b1 09       	sbc	r27, r1
    fae6:	cd 01       	movw	r24, r26
    fae8:	96 95       	lsr	r25
    faea:	98 2f       	mov	r25, r24
    faec:	88 27       	eor	r24, r24
    faee:	97 95       	ror	r25
    faf0:	87 95       	ror	r24
    faf2:	0e 94 1d 8a 	call	0x1143a	; 0x1143a <__divmodhi4>
    faf6:	26 0f       	add	r18, r22
    faf8:	37 1f       	adc	r19, r23
    fafa:	f8 01       	movw	r30, r16
    fafc:	36 83       	std	Z+6, r19	; 0x06
    fafe:	25 83       	std	Z+5, r18	; 0x05
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:298
            status_tds18s20[w].online = True;
    fb00:	d3 8e       	std	Z+27, r13	; 0x1b
main():
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:299
            for (uint8_t av = 9; av > 0; av--) status_tds18s20[w].average_temp[av] = status_tds18s20[w].average_temp[av - 1];
    fb02:	49 e0       	ldi	r20, 0x09	; 9
mereni_hwwire():
    fb04:	87 89       	ldd	r24, Z+23	; 0x17
    fb06:	90 8d       	ldd	r25, Z+24	; 0x18
    fb08:	92 8f       	std	Z+26, r25	; 0x1a
    fb0a:	81 8f       	std	Z+25, r24	; 0x19
    fb0c:	41 50       	subi	r20, 0x01	; 1
    fb0e:	32 97       	sbiw	r30, 0x02	; 2
    fb10:	41 11       	cpse	r20, r1
    fb12:	f8 cf       	rjmp	.-16     	; 0xfb04 <main+0xcd0>
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:300
            status_tds18s20[w].average_temp[0] = status_tds18s20[w].temp;
    fb14:	d8 01       	movw	r26, r16
    fb16:	18 96       	adiw	r26, 0x08	; 8
    fb18:	3c 93       	st	X, r19
    fb1a:	2e 93       	st	-X, r18
    fb1c:	17 97       	sbiw	r26, 0x07	; 7
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:301
            status_tds18s20[w].period_now = uptime & 0xff;
    fb1e:	5c 96       	adiw	r26, 0x1c	; 28
    fb20:	8c 92       	st	X, r8
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:257
uint8_t mereni_hwwire(uint16_t uptime)
{
  uint8_t status = 0;
  uint8_t t, e;
  struct_DDS18s20 tds;
  for (uint8_t w = 0; w < HW_ONEWIRE_MAXROMS; w++)
    fb22:	f3 94       	inc	r15
    fb24:	02 5e       	subi	r16, 0xE2	; 226
    fb26:	1f 4f       	sbci	r17, 0xFF	; 255
    fb28:	f6 e0       	ldi	r31, 0x06	; 6
    fb2a:	ff 12       	cpse	r15, r31
    fb2c:	f9 ce       	rjmp	.-526    	; 0xf920 <main+0xaec>
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1407
{
  struct_DDS18s20 tds;
  int tt;
  uint16_t active = 0;
  uint16_t pos = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
    fb2e:	10 e0       	ldi	r17, 0x00	; 0
tds_extended_memory_store():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1408
    if (get_tds18s20(id, &tds) == 1)
    fb30:	be 01       	movw	r22, r28
    fb32:	6f 5f       	subi	r22, 0xFF	; 255
    fb34:	7f 4f       	sbci	r23, 0xFF	; 255
    fb36:	81 2f       	mov	r24, r17
    fb38:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1407
{
  struct_DDS18s20 tds;
  int tt;
  uint16_t active = 0;
  uint16_t pos = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
    fb3c:	1f 5f       	subi	r17, 0xFF	; 255
    fb3e:	16 30       	cpi	r17, 0x06	; 6
    fb40:	b9 f7       	brne	.-18     	; 0xfb30 <main+0xcfc>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3235
    mereni_hwwire(uptime);
    tds_extended_memory_store();
  }

  //digitalWrite(LED, LOW);
  if ((millis() - milis_05s) > 500)
    fb42:	0e 94 28 13 	call	0x2650	; 0x2650 <millis>
    fb46:	00 91 af 0c 	lds	r16, 0x0CAF	; 0x800caf <milis_05s>
    fb4a:	10 91 b0 0c 	lds	r17, 0x0CB0	; 0x800cb0 <milis_05s+0x1>
    fb4e:	20 91 b1 0c 	lds	r18, 0x0CB1	; 0x800cb1 <milis_05s+0x2>
    fb52:	30 91 b2 0c 	lds	r19, 0x0CB2	; 0x800cb2 <milis_05s+0x3>
    fb56:	60 1b       	sub	r22, r16
    fb58:	71 0b       	sbc	r23, r17
    fb5a:	82 0b       	sbc	r24, r18
    fb5c:	93 0b       	sbc	r25, r19
    fb5e:	65 3f       	cpi	r22, 0xF5	; 245
    fb60:	71 40       	sbci	r23, 0x01	; 1
    fb62:	81 05       	cpc	r24, r1
    fb64:	91 05       	cpc	r25, r1
    fb66:	08 f4       	brcc	.+2      	; 0xfb6a <main+0xd36>
    fb68:	96 c0       	rjmp	.+300    	; 0xfc96 <main+0xe62>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3237
  {
    milis_05s = millis();
    fb6a:	0e 94 28 13 	call	0x2650	; 0x2650 <millis>
    fb6e:	60 93 af 0c 	sts	0x0CAF, r22	; 0x800caf <milis_05s>
    fb72:	70 93 b0 0c 	sts	0x0CB0, r23	; 0x800cb0 <milis_05s+0x1>
    fb76:	80 93 b1 0c 	sts	0x0CB1, r24	; 0x800cb1 <milis_05s+0x2>
    fb7a:	90 93 b2 0c 	sts	0x0CB2, r25	; 0x800cb2 <milis_05s+0x3>
beginTransmission():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:154
    fb7e:	88 e6       	ldi	r24, 0x68	; 104
    fb80:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <TwoWire::beginTransmission(unsigned char) [clone .constprop.181]>
now():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:270
  Wire.endTransmission();
}

DateTime RTC_DS1307::now() {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0);	
    fb84:	60 e0       	ldi	r22, 0x00	; 0
    fb86:	86 ef       	ldi	r24, 0xF6	; 246
    fb88:	91 e1       	ldi	r25, 0x11	; 17
    fb8a:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:271
  Wire.endTransmission();
    fb8e:	86 ef       	ldi	r24, 0xF6	; 246
    fb90:	91 e1       	ldi	r25, 0x11	; 17
    fb92:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:273

  Wire.requestFrom(DS1307_ADDRESS, 7);
    fb96:	87 e0       	ldi	r24, 0x07	; 7
    fb98:	90 e0       	ldi	r25, 0x00	; 0
    fb9a:	0e 94 89 33 	call	0x6712	; 0x6712 <TwoWire::requestFrom(int, int) [clone .constprop.138]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:274
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
    fb9e:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <TwoWire::read() [clone .constprop.139]>
    fba2:	8f 77       	andi	r24, 0x7F	; 127
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
    fba4:	28 2f       	mov	r18, r24
    fba6:	30 e0       	ldi	r19, 0x00	; 0
    fba8:	94 e0       	ldi	r25, 0x04	; 4
    fbaa:	35 95       	asr	r19
    fbac:	27 95       	ror	r18
    fbae:	9a 95       	dec	r25
    fbb0:	e1 f7       	brne	.-8      	; 0xfbaa <main+0xd76>
    fbb2:	92 2f       	mov	r25, r18
    fbb4:	99 0f       	add	r25, r25
    fbb6:	99 0f       	add	r25, r25
    fbb8:	12 2f       	mov	r17, r18
    fbba:	19 1b       	sub	r17, r25
    fbbc:	11 0f       	add	r17, r17
    fbbe:	18 0f       	add	r17, r24
now():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:275
  Wire._I2C_WRITE((byte)0);	
  Wire.endTransmission();

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
    fbc0:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <TwoWire::read() [clone .constprop.139]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
    fbc4:	9c 01       	movw	r18, r24
    fbc6:	44 e0       	ldi	r20, 0x04	; 4
    fbc8:	35 95       	asr	r19
    fbca:	27 95       	ror	r18
    fbcc:	4a 95       	dec	r20
    fbce:	e1 f7       	brne	.-8      	; 0xfbc8 <main+0xd94>
    fbd0:	2f 70       	andi	r18, 0x0F	; 15
    fbd2:	33 27       	eor	r19, r19
    fbd4:	92 2f       	mov	r25, r18
    fbd6:	99 0f       	add	r25, r25
    fbd8:	99 0f       	add	r25, r25
    fbda:	02 2f       	mov	r16, r18
    fbdc:	09 1b       	sub	r16, r25
    fbde:	00 0f       	add	r16, r16
    fbe0:	08 0f       	add	r16, r24
now():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:276
  Wire.endTransmission();

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
    fbe2:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <TwoWire::read() [clone .constprop.139]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
    fbe6:	9c 01       	movw	r18, r24
    fbe8:	54 e0       	ldi	r21, 0x04	; 4
    fbea:	35 95       	asr	r19
    fbec:	27 95       	ror	r18
    fbee:	5a 95       	dec	r21
    fbf0:	e1 f7       	brne	.-8      	; 0xfbea <main+0xdb6>
    fbf2:	2f 70       	andi	r18, 0x0F	; 15
    fbf4:	33 27       	eor	r19, r19
    fbf6:	92 2f       	mov	r25, r18
    fbf8:	99 0f       	add	r25, r25
    fbfa:	99 0f       	add	r25, r25
    fbfc:	f2 2e       	mov	r15, r18
    fbfe:	f9 1a       	sub	r15, r25
    fc00:	ff 0c       	add	r15, r15
    fc02:	f8 0e       	add	r15, r24
now():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:277

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
    fc04:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <TwoWire::read() [clone .constprop.139]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:278
  uint8_t d = bcd2bin(Wire._I2C_READ());
    fc08:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <TwoWire::read() [clone .constprop.139]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
    fc0c:	9c 01       	movw	r18, r24
    fc0e:	64 e0       	ldi	r22, 0x04	; 4
    fc10:	35 95       	asr	r19
    fc12:	27 95       	ror	r18
    fc14:	6a 95       	dec	r22
    fc16:	e1 f7       	brne	.-8      	; 0xfc10 <main+0xddc>
    fc18:	2f 70       	andi	r18, 0x0F	; 15
    fc1a:	33 27       	eor	r19, r19
    fc1c:	92 2f       	mov	r25, r18
    fc1e:	99 0f       	add	r25, r25
    fc20:	99 0f       	add	r25, r25
    fc22:	e2 2e       	mov	r14, r18
    fc24:	e9 1a       	sub	r14, r25
    fc26:	ee 0c       	add	r14, r14
    fc28:	e8 0e       	add	r14, r24
now():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:279
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
    fc2a:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <TwoWire::read() [clone .constprop.139]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
    fc2e:	9c 01       	movw	r18, r24
    fc30:	74 e0       	ldi	r23, 0x04	; 4
    fc32:	35 95       	asr	r19
    fc34:	27 95       	ror	r18
    fc36:	7a 95       	dec	r23
    fc38:	e1 f7       	brne	.-8      	; 0xfc32 <main+0xdfe>
    fc3a:	2f 70       	andi	r18, 0x0F	; 15
    fc3c:	33 27       	eor	r19, r19
    fc3e:	92 2f       	mov	r25, r18
    fc40:	99 0f       	add	r25, r25
    fc42:	99 0f       	add	r25, r25
    fc44:	d2 2e       	mov	r13, r18
    fc46:	d9 1a       	sub	r13, r25
    fc48:	dd 0c       	add	r13, r13
    fc4a:	d8 0e       	add	r13, r24
now():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:280
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
  uint16_t y = bcd2bin(Wire._I2C_READ()) + 2000;
    fc4c:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <TwoWire::read() [clone .constprop.139]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
    fc50:	9c 01       	movw	r18, r24
    fc52:	e4 e0       	ldi	r30, 0x04	; 4
    fc54:	35 95       	asr	r19
    fc56:	27 95       	ror	r18
    fc58:	ea 95       	dec	r30
    fc5a:	e1 f7       	brne	.-8      	; 0xfc54 <main+0xe20>
    fc5c:	2f 70       	andi	r18, 0x0F	; 15
    fc5e:	33 27       	eor	r19, r19
    fc60:	92 2f       	mov	r25, r18
    fc62:	99 0f       	add	r25, r25
    fc64:	99 0f       	add	r25, r25
    fc66:	29 1b       	sub	r18, r25
    fc68:	22 0f       	add	r18, r18
    fc6a:	82 0f       	add	r24, r18
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
    yOff = year;
    fc6c:	80 93 f6 15 	sts	0x15F6, r24	; 0x8015f6 <now>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3238
    now = rtc.now();
    fc70:	d0 92 f7 15 	sts	0x15F7, r13	; 0x8015f7 <now+0x1>
    fc74:	e0 92 f8 15 	sts	0x15F8, r14	; 0x8015f8 <now+0x2>
    fc78:	f0 92 f9 15 	sts	0x15F9, r15	; 0x8015f9 <now+0x3>
    fc7c:	00 93 fa 15 	sts	0x15FA, r16	; 0x8015fa <now+0x4>
    fc80:	10 93 fb 15 	sts	0x15FB, r17	; 0x8015fb <now+0x5>
selftest():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2492
}
///
/// selftest - pusteni skupiny vlastnich selftestu
void selftest(void)
{
  if (!rtc.isrunning())
    fc84:	0e 94 92 33 	call	0x6724	; 0x6724 <RTC_DS1307::isrunning() [clone .constprop.136]>
    fc88:	90 91 9d 0c 	lds	r25, 0x0C9D	; 0x800c9d <selftest_data>
    fc8c:	81 11       	cpse	r24, r1
    fc8e:	99 c0       	rjmp	.+306    	; 0xfdc2 <main+0xf8e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2493
    sbi(selftest_data, SELFTEST_ERR_RTC);
    fc90:	91 60       	ori	r25, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2495
  else
    cbi(selftest_data, SELFTEST_ERR_RTC);
    fc92:	90 93 9d 0c 	sts	0x0C9D, r25	; 0x800c9d <selftest_data>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3248




  /// kazdych 50ms
  if ((millis() - milis_005s) > 50)
    fc96:	0e 94 28 13 	call	0x2650	; 0x2650 <millis>
    fc9a:	00 91 ab 0c 	lds	r16, 0x0CAB	; 0x800cab <milis_005s>
    fc9e:	10 91 ac 0c 	lds	r17, 0x0CAC	; 0x800cac <milis_005s+0x1>
    fca2:	20 91 ad 0c 	lds	r18, 0x0CAD	; 0x800cad <milis_005s+0x2>
    fca6:	30 91 ae 0c 	lds	r19, 0x0CAE	; 0x800cae <milis_005s+0x3>
    fcaa:	60 1b       	sub	r22, r16
    fcac:	71 0b       	sbc	r23, r17
    fcae:	82 0b       	sbc	r24, r18
    fcb0:	93 0b       	sbc	r25, r19
    fcb2:	63 33       	cpi	r22, 0x33	; 51
    fcb4:	71 05       	cpc	r23, r1
    fcb6:	81 05       	cpc	r24, r1
    fcb8:	91 05       	cpc	r25, r1
    fcba:	90 f1       	brcs	.+100    	; 0xfd20 <main+0xeec>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3250
  {
    milis_005s = millis();
    fcbc:	0e 94 28 13 	call	0x2650	; 0x2650 <millis>
    fcc0:	60 93 ab 0c 	sts	0x0CAB, r22	; 0x800cab <milis_005s>
    fcc4:	70 93 ac 0c 	sts	0x0CAC, r23	; 0x800cac <milis_005s+0x1>
    fcc8:	80 93 ad 0c 	sts	0x0CAD, r24	; 0x800cad <milis_005s+0x2>
    fccc:	90 93 ae 0c 	sts	0x0CAE, r25	; 0x800cae <milis_005s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3253

    /// obsluha adc prevodniku
    if (a2d_run_now == 1)
    fcd0:	80 91 aa 0c 	lds	r24, 0x0CAA	; 0x800caa <a2d_run_now>
    fcd4:	81 30       	cpi	r24, 0x01	; 1
    fcd6:	21 f5       	brne	.+72     	; 0xfd20 <main+0xeec>
a2d_start_process():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:70
uint8_t start = 0;
uint8_t v = 0;
for(uint8_t i = 0; i < 8; i++)	
	{
	v = (1 << i);
	if ( (a2d_enable & v) != 0 ) 
    fcd8:	30 91 9e 0c 	lds	r19, 0x0C9E	; 0x800c9e <a2d_enable>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:71
		if ( (a2d_index & v) == 0) 
    fcdc:	20 91 9f 0c 	lds	r18, 0x0C9F	; 0x800c9f <a2d_index>
    fce0:	90 e0       	ldi	r25, 0x00	; 0
    fce2:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:69
{
uint8_t start = 0;
uint8_t v = 0;
for(uint8_t i = 0; i < 8; i++)	
	{
	v = (1 << i);
    fce4:	61 e0       	ldi	r22, 0x01	; 1
    fce6:	70 e0       	ldi	r23, 0x00	; 0
    fce8:	ab 01       	movw	r20, r22
    fcea:	08 2e       	mov	r0, r24
    fcec:	01 c0       	rjmp	.+2      	; 0xfcf0 <main+0xebc>
    fcee:	44 0f       	add	r20, r20
    fcf0:	0a 94       	dec	r0
    fcf2:	ea f7       	brpl	.-6      	; 0xfcee <main+0xeba>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:70
	if ( (a2d_enable & v) != 0 ) 
    fcf4:	e3 2f       	mov	r30, r19
    fcf6:	e4 23       	and	r30, r20
    fcf8:	09 f4       	brne	.+2      	; 0xfcfc <main+0xec8>
    fcfa:	65 c0       	rjmp	.+202    	; 0xfdc6 <main+0xf92>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:71
		if ( (a2d_index & v) == 0) 
    fcfc:	e2 2f       	mov	r30, r18
    fcfe:	e4 23       	and	r30, r20
    fd00:	09 f0       	breq	.+2      	; 0xfd04 <main+0xed0>
    fd02:	61 c0       	rjmp	.+194    	; 0xfdc6 <main+0xf92>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:73
			{
			sbi(a2d_index, i);
    fd04:	24 2b       	or	r18, r20
    fd06:	20 93 9f 0c 	sts	0x0C9F, r18	; 0x800c9f <a2d_index>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:74
			a2d_start_first(i);
    fd0a:	0e 94 7d 14 	call	0x28fa	; 0x28fa <a2d_start_first(unsigned char)>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3256
    {
      a2d_start_process();
      a2d_run_now = 0;
    fd0e:	10 92 aa 0c 	sts	0x0CAA, r1	; 0x800caa <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3257
      if (a2d_done() == 0) a2d_run_now = 1;
    fd12:	80 91 9f 0c 	lds	r24, 0x0C9F	; 0x800c9f <a2d_index>
    fd16:	81 11       	cpse	r24, r1
    fd18:	03 c0       	rjmp	.+6      	; 0xfd20 <main+0xeec>
    fd1a:	81 e0       	ldi	r24, 0x01	; 1
    fd1c:	80 93 aa 0c 	sts	0x0CAA, r24	; 0x800caa <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3261
    }
  }

  load = millis() - load_now;
    fd20:	0e 94 28 13 	call	0x2650	; 0x2650 <millis>
    fd24:	dc 01       	movw	r26, r24
    fd26:	cb 01       	movw	r24, r22
    fd28:	82 19       	sub	r24, r2
    fd2a:	93 09       	sbc	r25, r3
    fd2c:	a4 09       	sbc	r26, r4
    fd2e:	b5 09       	sbc	r27, r5
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3262
  if (load < load_min) load_min = load;
    fd30:	00 91 06 02 	lds	r16, 0x0206	; 0x800206 <load_min>
    fd34:	10 91 07 02 	lds	r17, 0x0207	; 0x800207 <load_min+0x1>
    fd38:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <load_min+0x2>
    fd3c:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <load_min+0x3>
    fd40:	80 17       	cp	r24, r16
    fd42:	91 07       	cpc	r25, r17
    fd44:	a2 07       	cpc	r26, r18
    fd46:	b3 07       	cpc	r27, r19
    fd48:	40 f4       	brcc	.+16     	; 0xfd5a <main+0xf26>
    fd4a:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <load_min>
    fd4e:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <load_min+0x1>
    fd52:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <load_min+0x2>
    fd56:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <load_min+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3263
  if (load > load_max) load_max = load;
    fd5a:	00 91 a6 0c 	lds	r16, 0x0CA6	; 0x800ca6 <load_max>
    fd5e:	10 91 a7 0c 	lds	r17, 0x0CA7	; 0x800ca7 <load_max+0x1>
    fd62:	20 91 a8 0c 	lds	r18, 0x0CA8	; 0x800ca8 <load_max+0x2>
    fd66:	30 91 a9 0c 	lds	r19, 0x0CA9	; 0x800ca9 <load_max+0x3>
    fd6a:	08 17       	cp	r16, r24
    fd6c:	19 07       	cpc	r17, r25
    fd6e:	2a 07       	cpc	r18, r26
    fd70:	3b 07       	cpc	r19, r27
    fd72:	40 f4       	brcc	.+16     	; 0xfd84 <main+0xf50>
    fd74:	80 93 a6 0c 	sts	0x0CA6, r24	; 0x800ca6 <load_max>
    fd78:	90 93 a7 0c 	sts	0x0CA7, r25	; 0x800ca7 <load_max+0x1>
    fd7c:	a0 93 a8 0c 	sts	0x0CA8, r26	; 0x800ca8 <load_max+0x2>
    fd80:	b0 93 a9 0c 	sts	0x0CA9, r27	; 0x800ca9 <load_max+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3266

  /// automaticke nastaveni jasu displaye
  if (light_curr < light_min) light_min = light_curr;
    fd84:	80 91 a4 0c 	lds	r24, 0x0CA4	; 0x800ca4 <light_curr>
    fd88:	90 91 a5 0c 	lds	r25, 0x0CA5	; 0x800ca5 <light_curr+0x1>
    fd8c:	20 91 a2 0c 	lds	r18, 0x0CA2	; 0x800ca2 <light_min>
    fd90:	30 91 a3 0c 	lds	r19, 0x0CA3	; 0x800ca3 <light_min+0x1>
    fd94:	82 17       	cp	r24, r18
    fd96:	93 07       	cpc	r25, r19
    fd98:	20 f4       	brcc	.+8      	; 0xfda2 <main+0xf6e>
    fd9a:	90 93 a3 0c 	sts	0x0CA3, r25	; 0x800ca3 <light_min+0x1>
    fd9e:	80 93 a2 0c 	sts	0x0CA2, r24	; 0x800ca2 <light_min>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3267
  if (light_curr > light_max) light_max = light_curr;
    fda2:	20 91 a0 0c 	lds	r18, 0x0CA0	; 0x800ca0 <light_max>
    fda6:	30 91 a1 0c 	lds	r19, 0x0CA1	; 0x800ca1 <light_max+0x1>
    fdaa:	28 17       	cp	r18, r24
    fdac:	39 07       	cpc	r19, r25
    fdae:	20 f4       	brcc	.+8      	; 0xfdb8 <main+0xf84>
    fdb0:	90 93 a1 0c 	sts	0x0CA1, r25	; 0x800ca1 <light_max+0x1>
    fdb4:	80 93 a0 0c 	sts	0x0CA0, r24	; 0x800ca0 <light_max>
main():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    fdb8:	0e 94 bc 10 	call	0x2178	; 0x2178 <serialEventRun()>
    fdbc:	a6 c8       	rjmp	.-3764   	; 0xef0a <main+0xd6>
mereni_hwwire():
/tmp/arduino_build_695434/sketch/saric_tds_function.cpp:305
            status_tds18s20[w].average_temp[0] = status_tds18s20[w].temp;
            status_tds18s20[w].period_now = uptime & 0xff;
          }
          else
          {
            status_tds18s20[w].online = False;
    fdbe:	13 8e       	std	Z+27, r1	; 0x1b
    fdc0:	b0 ce       	rjmp	.-672    	; 0xfb22 <main+0xcee>
selftest():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2495
void selftest(void)
{
  if (!rtc.isrunning())
    sbi(selftest_data, SELFTEST_ERR_RTC);
  else
    cbi(selftest_data, SELFTEST_ERR_RTC);
    fdc2:	9e 7f       	andi	r25, 0xFE	; 254
    fdc4:	66 cf       	rjmp	.-308    	; 0xfc92 <main+0xe5e>
    fdc6:	01 96       	adiw	r24, 0x01	; 1
a2d_start_process():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:67
/////////////funkce a2d prevodniku, automaticka spousteni mereni////////////////////////////////////////////////////////
void a2d_start_process(void)
{
uint8_t start = 0;
uint8_t v = 0;
for(uint8_t i = 0; i < 8; i++)	
    fdc8:	88 30       	cpi	r24, 0x08	; 8
    fdca:	91 05       	cpc	r25, r1
    fdcc:	09 f0       	breq	.+2      	; 0xfdd0 <main+0xf9c>
    fdce:	8c cf       	rjmp	.-232    	; 0xfce8 <main+0xeb4>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:83
	}

//// pokud jsem jiz zmeril vsechny, tak jedu od zacatku
if (start == 0)
	{
	a2d_index = 0;
    fdd0:	10 92 9f 0c 	sts	0x0C9F, r1	; 0x800c9f <a2d_index>
    fdd4:	9c cf       	rjmp	.-200    	; 0xfd0e <main+0xeda>

0000fdd6 <dtostrf>:
dtostrf():
    fdd6:	ef 92       	push	r14
    fdd8:	0f 93       	push	r16
    fdda:	1f 93       	push	r17
    fddc:	cf 93       	push	r28
    fdde:	df 93       	push	r29
    fde0:	e8 01       	movw	r28, r16
    fde2:	34 e0       	ldi	r19, 0x04	; 4
    fde4:	47 fd       	sbrc	r20, 7
    fde6:	34 e1       	ldi	r19, 0x14	; 20
    fde8:	04 2e       	mov	r0, r20
    fdea:	00 0c       	add	r0, r0
    fdec:	55 0b       	sbc	r21, r21
    fdee:	57 ff       	sbrs	r21, 7
    fdf0:	03 c0       	rjmp	.+6      	; 0xfdf8 <dtostrf+0x22>
    fdf2:	51 95       	neg	r21
    fdf4:	41 95       	neg	r20
    fdf6:	51 09       	sbc	r21, r1
    fdf8:	e3 2e       	mov	r14, r19
    fdfa:	02 2f       	mov	r16, r18
    fdfc:	24 2f       	mov	r18, r20
    fdfe:	ae 01       	movw	r20, r28
    fe00:	0e 94 15 83 	call	0x1062a	; 0x1062a <dtoa_prf>
    fe04:	ce 01       	movw	r24, r28
    fe06:	df 91       	pop	r29
    fe08:	cf 91       	pop	r28
    fe0a:	1f 91       	pop	r17
    fe0c:	0f 91       	pop	r16
    fe0e:	ef 90       	pop	r14
    fe10:	08 95       	ret

0000fe12 <strtoul>:
strtoul():
    fe12:	3f 92       	push	r3
    fe14:	4f 92       	push	r4
    fe16:	5f 92       	push	r5
    fe18:	6f 92       	push	r6
    fe1a:	7f 92       	push	r7
    fe1c:	8f 92       	push	r8
    fe1e:	9f 92       	push	r9
    fe20:	af 92       	push	r10
    fe22:	bf 92       	push	r11
    fe24:	cf 92       	push	r12
    fe26:	df 92       	push	r13
    fe28:	ef 92       	push	r14
    fe2a:	ff 92       	push	r15
    fe2c:	0f 93       	push	r16
    fe2e:	1f 93       	push	r17
    fe30:	cf 93       	push	r28
    fe32:	df 93       	push	r29
    fe34:	5c 01       	movw	r10, r24
    fe36:	6b 01       	movw	r12, r22
    fe38:	7a 01       	movw	r14, r20
    fe3a:	61 15       	cp	r22, r1
    fe3c:	71 05       	cpc	r23, r1
    fe3e:	19 f0       	breq	.+6      	; 0xfe46 <strtoul+0x34>
    fe40:	fb 01       	movw	r30, r22
    fe42:	91 83       	std	Z+1, r25	; 0x01
    fe44:	80 83       	st	Z, r24
    fe46:	e1 14       	cp	r14, r1
    fe48:	f1 04       	cpc	r15, r1
    fe4a:	49 f0       	breq	.+18     	; 0xfe5e <strtoul+0x4c>
    fe4c:	c7 01       	movw	r24, r14
    fe4e:	02 97       	sbiw	r24, 0x02	; 2
    fe50:	83 97       	sbiw	r24, 0x23	; 35
    fe52:	28 f0       	brcs	.+10     	; 0xfe5e <strtoul+0x4c>
    fe54:	60 e0       	ldi	r22, 0x00	; 0
    fe56:	70 e0       	ldi	r23, 0x00	; 0
    fe58:	cb 01       	movw	r24, r22
    fe5a:	9b c0       	rjmp	.+310    	; 0xff92 <strtoul+0x180>
    fe5c:	5e 01       	movw	r10, r28
    fe5e:	e5 01       	movw	r28, r10
    fe60:	21 96       	adiw	r28, 0x01	; 1
    fe62:	f5 01       	movw	r30, r10
    fe64:	10 81       	ld	r17, Z
    fe66:	81 2f       	mov	r24, r17
    fe68:	90 e0       	ldi	r25, 0x00	; 0
    fe6a:	0e 94 2e 80 	call	0x1005c	; 0x1005c <isspace>
    fe6e:	89 2b       	or	r24, r25
    fe70:	a9 f7       	brne	.-22     	; 0xfe5c <strtoul+0x4a>
    fe72:	1d 32       	cpi	r17, 0x2D	; 45
    fe74:	09 f0       	breq	.+2      	; 0xfe78 <strtoul+0x66>
    fe76:	5c c0       	rjmp	.+184    	; 0xff30 <strtoul+0x11e>
    fe78:	21 96       	adiw	r28, 0x01	; 1
    fe7a:	f5 01       	movw	r30, r10
    fe7c:	11 81       	ldd	r17, Z+1	; 0x01
    fe7e:	01 e0       	ldi	r16, 0x01	; 1
    fe80:	e1 14       	cp	r14, r1
    fe82:	f1 04       	cpc	r15, r1
    fe84:	09 f4       	brne	.+2      	; 0xfe88 <strtoul+0x76>
    fe86:	bb c0       	rjmp	.+374    	; 0xfffe <strtoul+0x1ec>
    fe88:	f0 e1       	ldi	r31, 0x10	; 16
    fe8a:	ef 16       	cp	r14, r31
    fe8c:	f1 04       	cpc	r15, r1
    fe8e:	09 f0       	breq	.+2      	; 0xfe92 <strtoul+0x80>
    fe90:	9b c0       	rjmp	.+310    	; 0xffc8 <strtoul+0x1b6>
    fe92:	10 33       	cpi	r17, 0x30	; 48
    fe94:	41 f4       	brne	.+16     	; 0xfea6 <strtoul+0x94>
    fe96:	88 81       	ld	r24, Y
    fe98:	8f 7d       	andi	r24, 0xDF	; 223
    fe9a:	88 35       	cpi	r24, 0x58	; 88
    fe9c:	09 f0       	breq	.+2      	; 0xfea0 <strtoul+0x8e>
    fe9e:	8f c0       	rjmp	.+286    	; 0xffbe <strtoul+0x1ac>
    fea0:	19 81       	ldd	r17, Y+1	; 0x01
    fea2:	22 96       	adiw	r28, 0x02	; 2
    fea4:	02 60       	ori	r16, 0x02	; 2
    fea6:	e0 e1       	ldi	r30, 0x10	; 16
    fea8:	ee 2e       	mov	r14, r30
    feaa:	f1 2c       	mov	r15, r1
    feac:	88 24       	eor	r8, r8
    feae:	8a 94       	dec	r8
    feb0:	98 2c       	mov	r9, r8
    feb2:	a8 2c       	mov	r10, r8
    feb4:	ff e0       	ldi	r31, 0x0F	; 15
    feb6:	bf 2e       	mov	r11, r31
    feb8:	20 e0       	ldi	r18, 0x00	; 0
    feba:	60 e0       	ldi	r22, 0x00	; 0
    febc:	70 e0       	ldi	r23, 0x00	; 0
    febe:	cb 01       	movw	r24, r22
    fec0:	27 01       	movw	r4, r14
    fec2:	0f 2c       	mov	r0, r15
    fec4:	00 0c       	add	r0, r0
    fec6:	66 08       	sbc	r6, r6
    fec8:	77 08       	sbc	r7, r7
    feca:	fe 01       	movw	r30, r28
    fecc:	50 ed       	ldi	r21, 0xD0	; 208
    fece:	35 2e       	mov	r3, r21
    fed0:	31 0e       	add	r3, r17
    fed2:	39 e0       	ldi	r19, 0x09	; 9
    fed4:	33 15       	cp	r19, r3
    fed6:	68 f4       	brcc	.+26     	; 0xfef2 <strtoul+0xe0>
    fed8:	3f eb       	ldi	r19, 0xBF	; 191
    feda:	31 0f       	add	r19, r17
    fedc:	49 ec       	ldi	r20, 0xC9	; 201
    fede:	34 2e       	mov	r3, r20
    fee0:	3a 31       	cpi	r19, 0x1A	; 26
    fee2:	30 f0       	brcs	.+12     	; 0xfef0 <strtoul+0xde>
    fee4:	3f e9       	ldi	r19, 0x9F	; 159
    fee6:	31 0f       	add	r19, r17
    fee8:	3a 31       	cpi	r19, 0x1A	; 26
    feea:	b0 f5       	brcc	.+108    	; 0xff58 <strtoul+0x146>
    feec:	39 ea       	ldi	r19, 0xA9	; 169
    feee:	33 2e       	mov	r3, r19
    fef0:	31 0e       	add	r3, r17
    fef2:	3e 14       	cp	r3, r14
    fef4:	1f 04       	cpc	r1, r15
    fef6:	84 f5       	brge	.+96     	; 0xff58 <strtoul+0x146>
    fef8:	2f 3f       	cpi	r18, 0xFF	; 255
    fefa:	b9 f0       	breq	.+46     	; 0xff2a <strtoul+0x118>
    fefc:	86 16       	cp	r8, r22
    fefe:	97 06       	cpc	r9, r23
    ff00:	a8 06       	cpc	r10, r24
    ff02:	b9 06       	cpc	r11, r25
    ff04:	38 f1       	brcs	.+78     	; 0xff54 <strtoul+0x142>
    ff06:	a3 01       	movw	r20, r6
    ff08:	92 01       	movw	r18, r4
    ff0a:	0e 94 f9 89 	call	0x113f2	; 0x113f2 <__mulsi3>
    ff0e:	23 2d       	mov	r18, r3
    ff10:	30 e0       	ldi	r19, 0x00	; 0
    ff12:	50 e0       	ldi	r21, 0x00	; 0
    ff14:	40 e0       	ldi	r20, 0x00	; 0
    ff16:	62 0f       	add	r22, r18
    ff18:	73 1f       	adc	r23, r19
    ff1a:	84 1f       	adc	r24, r20
    ff1c:	95 1f       	adc	r25, r21
    ff1e:	62 17       	cp	r22, r18
    ff20:	73 07       	cpc	r23, r19
    ff22:	84 07       	cpc	r24, r20
    ff24:	95 07       	cpc	r25, r21
    ff26:	b0 f0       	brcs	.+44     	; 0xff54 <strtoul+0x142>
    ff28:	21 e0       	ldi	r18, 0x01	; 1
    ff2a:	21 96       	adiw	r28, 0x01	; 1
    ff2c:	10 81       	ld	r17, Z
    ff2e:	cd cf       	rjmp	.-102    	; 0xfeca <strtoul+0xb8>
    ff30:	1b 32       	cpi	r17, 0x2B	; 43
    ff32:	21 f4       	brne	.+8      	; 0xff3c <strtoul+0x12a>
    ff34:	e5 01       	movw	r28, r10
    ff36:	22 96       	adiw	r28, 0x02	; 2
    ff38:	f5 01       	movw	r30, r10
    ff3a:	11 81       	ldd	r17, Z+1	; 0x01
    ff3c:	00 e0       	ldi	r16, 0x00	; 0
    ff3e:	a0 cf       	rjmp	.-192    	; 0xfe80 <strtoul+0x6e>
    ff40:	78 e0       	ldi	r23, 0x08	; 8
    ff42:	e7 2e       	mov	r14, r23
    ff44:	f1 2c       	mov	r15, r1
    ff46:	88 24       	eor	r8, r8
    ff48:	8a 94       	dec	r8
    ff4a:	98 2c       	mov	r9, r8
    ff4c:	a8 2c       	mov	r10, r8
    ff4e:	6f e1       	ldi	r22, 0x1F	; 31
    ff50:	b6 2e       	mov	r11, r22
    ff52:	b2 cf       	rjmp	.-156    	; 0xfeb8 <strtoul+0xa6>
    ff54:	2f ef       	ldi	r18, 0xFF	; 255
    ff56:	e9 cf       	rjmp	.-46     	; 0xff2a <strtoul+0x118>
    ff58:	c1 14       	cp	r12, r1
    ff5a:	d1 04       	cpc	r13, r1
    ff5c:	31 f0       	breq	.+12     	; 0xff6a <strtoul+0x158>
    ff5e:	22 23       	and	r18, r18
    ff60:	51 f1       	breq	.+84     	; 0xffb6 <strtoul+0x1a4>
    ff62:	21 97       	sbiw	r28, 0x01	; 1
    ff64:	f6 01       	movw	r30, r12
    ff66:	d1 83       	std	Z+1, r29	; 0x01
    ff68:	c0 83       	st	Z, r28
    ff6a:	00 ff       	sbrs	r16, 0
    ff6c:	07 c0       	rjmp	.+14     	; 0xff7c <strtoul+0x16a>
    ff6e:	90 95       	com	r25
    ff70:	80 95       	com	r24
    ff72:	70 95       	com	r23
    ff74:	61 95       	neg	r22
    ff76:	7f 4f       	sbci	r23, 0xFF	; 255
    ff78:	8f 4f       	sbci	r24, 0xFF	; 255
    ff7a:	9f 4f       	sbci	r25, 0xFF	; 255
    ff7c:	2f 3f       	cpi	r18, 0xFF	; 255
    ff7e:	49 f4       	brne	.+18     	; 0xff92 <strtoul+0x180>
    ff80:	82 e2       	ldi	r24, 0x22	; 34
    ff82:	90 e0       	ldi	r25, 0x00	; 0
    ff84:	90 93 23 16 	sts	0x1623, r25	; 0x801623 <errno+0x1>
    ff88:	80 93 22 16 	sts	0x1622, r24	; 0x801622 <errno>
    ff8c:	6f ef       	ldi	r22, 0xFF	; 255
    ff8e:	7f ef       	ldi	r23, 0xFF	; 255
    ff90:	cb 01       	movw	r24, r22
    ff92:	df 91       	pop	r29
    ff94:	cf 91       	pop	r28
    ff96:	1f 91       	pop	r17
    ff98:	0f 91       	pop	r16
    ff9a:	ff 90       	pop	r15
    ff9c:	ef 90       	pop	r14
    ff9e:	df 90       	pop	r13
    ffa0:	cf 90       	pop	r12
    ffa2:	bf 90       	pop	r11
    ffa4:	af 90       	pop	r10
    ffa6:	9f 90       	pop	r9
    ffa8:	8f 90       	pop	r8
    ffaa:	7f 90       	pop	r7
    ffac:	6f 90       	pop	r6
    ffae:	5f 90       	pop	r5
    ffb0:	4f 90       	pop	r4
    ffb2:	3f 90       	pop	r3
    ffb4:	08 95       	ret
    ffb6:	01 ff       	sbrs	r16, 1
    ffb8:	d8 cf       	rjmp	.-80     	; 0xff6a <strtoul+0x158>
    ffba:	22 97       	sbiw	r28, 0x02	; 2
    ffbc:	d3 cf       	rjmp	.-90     	; 0xff64 <strtoul+0x152>
    ffbe:	10 e3       	ldi	r17, 0x30	; 48
    ffc0:	e1 14       	cp	r14, r1
    ffc2:	f1 04       	cpc	r15, r1
    ffc4:	09 f4       	brne	.+2      	; 0xffc8 <strtoul+0x1b6>
    ffc6:	bc cf       	rjmp	.-136    	; 0xff40 <strtoul+0x12e>
    ffc8:	3a e0       	ldi	r19, 0x0A	; 10
    ffca:	e3 16       	cp	r14, r19
    ffcc:	f1 04       	cpc	r15, r1
    ffce:	e9 f0       	breq	.+58     	; 0x1000a <__EEPROM_REGION_LENGTH__+0xa>
    ffd0:	80 e1       	ldi	r24, 0x10	; 16
    ffd2:	e8 16       	cp	r14, r24
    ffd4:	f1 04       	cpc	r15, r1
    ffd6:	09 f4       	brne	.+2      	; 0xffda <strtoul+0x1c8>
    ffd8:	66 cf       	rjmp	.-308    	; 0xfea6 <strtoul+0x94>
    ffda:	e8 e0       	ldi	r30, 0x08	; 8
    ffdc:	ee 16       	cp	r14, r30
    ffde:	f1 04       	cpc	r15, r1
    ffe0:	09 f4       	brne	.+2      	; 0xffe4 <strtoul+0x1d2>
    ffe2:	b1 cf       	rjmp	.-158    	; 0xff46 <strtoul+0x134>
    ffe4:	6f ef       	ldi	r22, 0xFF	; 255
    ffe6:	7f ef       	ldi	r23, 0xFF	; 255
    ffe8:	cb 01       	movw	r24, r22
    ffea:	97 01       	movw	r18, r14
    ffec:	0f 2c       	mov	r0, r15
    ffee:	00 0c       	add	r0, r0
    fff0:	44 0b       	sbc	r20, r20
    fff2:	55 0b       	sbc	r21, r21
    fff4:	0e 94 31 8a 	call	0x11462	; 0x11462 <__udivmodsi4>
    fff8:	49 01       	movw	r8, r18
    fffa:	5a 01       	movw	r10, r20
    fffc:	5d cf       	rjmp	.-326    	; 0xfeb8 <strtoul+0xa6>
    fffe:	10 33       	cpi	r17, 0x30	; 48
   10000:	09 f4       	brne	.+2      	; 0x10004 <__EEPROM_REGION_LENGTH__+0x4>
   10002:	49 cf       	rjmp	.-366    	; 0xfe96 <strtoul+0x84>
   10004:	9a e0       	ldi	r25, 0x0A	; 10
   10006:	e9 2e       	mov	r14, r25
   10008:	f1 2c       	mov	r15, r1
   1000a:	89 e9       	ldi	r24, 0x99	; 153
   1000c:	88 2e       	mov	r8, r24
   1000e:	98 2c       	mov	r9, r8
   10010:	a8 2c       	mov	r10, r8
   10012:	89 e1       	ldi	r24, 0x19	; 25
   10014:	b8 2e       	mov	r11, r24
   10016:	50 cf       	rjmp	.-352    	; 0xfeb8 <strtoul+0xa6>

00010018 <atof>:
atof():
   10018:	66 27       	eor	r22, r22
   1001a:	77 27       	eor	r23, r23
   1001c:	0c 94 b3 85 	jmp	0x10b66	; 0x10b66 <strtod>

00010020 <atoi>:
atoi():
   10020:	fc 01       	movw	r30, r24
   10022:	88 27       	eor	r24, r24
   10024:	99 27       	eor	r25, r25
   10026:	e8 94       	clt
   10028:	21 91       	ld	r18, Z+
   1002a:	20 32       	cpi	r18, 0x20	; 32
   1002c:	e9 f3       	breq	.-6      	; 0x10028 <atoi+0x8>
   1002e:	29 30       	cpi	r18, 0x09	; 9
   10030:	10 f0       	brcs	.+4      	; 0x10036 <atoi+0x16>
   10032:	2e 30       	cpi	r18, 0x0E	; 14
   10034:	c8 f3       	brcs	.-14     	; 0x10028 <atoi+0x8>
   10036:	2b 32       	cpi	r18, 0x2B	; 43
   10038:	41 f0       	breq	.+16     	; 0x1004a <atoi+0x2a>
   1003a:	2d 32       	cpi	r18, 0x2D	; 45
   1003c:	39 f4       	brne	.+14     	; 0x1004c <atoi+0x2c>
   1003e:	68 94       	set
   10040:	04 c0       	rjmp	.+8      	; 0x1004a <atoi+0x2a>
   10042:	0e 94 8a 80 	call	0x10114	; 0x10114 <__mulhi_const_10>
   10046:	82 0f       	add	r24, r18
   10048:	91 1d       	adc	r25, r1
   1004a:	21 91       	ld	r18, Z+
   1004c:	20 53       	subi	r18, 0x30	; 48
   1004e:	2a 30       	cpi	r18, 0x0A	; 10
   10050:	c0 f3       	brcs	.-16     	; 0x10042 <atoi+0x22>
   10052:	1e f4       	brtc	.+6      	; 0x1005a <atoi+0x3a>
   10054:	90 95       	com	r25
   10056:	81 95       	neg	r24
   10058:	9f 4f       	sbci	r25, 0xFF	; 255
   1005a:	08 95       	ret

0001005c <isspace>:
isspace():
   1005c:	91 11       	cpse	r25, r1
   1005e:	0c 94 e9 87 	jmp	0x10fd2	; 0x10fd2 <__ctype_isfalse>
   10062:	80 32       	cpi	r24, 0x20	; 32
   10064:	19 f0       	breq	.+6      	; 0x1006c <isspace+0x10>
   10066:	89 50       	subi	r24, 0x09	; 9
   10068:	85 50       	subi	r24, 0x05	; 5
   1006a:	c8 f7       	brcc	.-14     	; 0x1005e <isspace+0x2>
   1006c:	08 95       	ret

0001006e <strcat_P>:
strcat_P():
   1006e:	fb 01       	movw	r30, r22
   10070:	dc 01       	movw	r26, r24
   10072:	0d 90       	ld	r0, X+
   10074:	00 20       	and	r0, r0
   10076:	e9 f7       	brne	.-6      	; 0x10072 <strcat_P+0x4>
   10078:	11 97       	sbiw	r26, 0x01	; 1
   1007a:	05 90       	lpm	r0, Z+
   1007c:	0d 92       	st	X+, r0
   1007e:	00 20       	and	r0, r0
   10080:	e1 f7       	brne	.-8      	; 0x1007a <strcat_P+0xc>
   10082:	08 95       	ret

00010084 <strcpy_P>:
strcpy_P():
   10084:	fb 01       	movw	r30, r22
   10086:	dc 01       	movw	r26, r24
   10088:	05 90       	lpm	r0, Z+
   1008a:	0d 92       	st	X+, r0
   1008c:	00 20       	and	r0, r0
   1008e:	e1 f7       	brne	.-8      	; 0x10088 <strcpy_P+0x4>
   10090:	08 95       	ret

00010092 <strtok>:
strtok():
   10092:	4a e0       	ldi	r20, 0x0A	; 10
   10094:	56 e1       	ldi	r21, 0x16	; 22
   10096:	0c 94 4d 80 	jmp	0x1009a	; 0x1009a <strtok_r>

0001009a <strtok_r>:
strtok_r():
   1009a:	fa 01       	movw	r30, r20
   1009c:	a1 91       	ld	r26, Z+
   1009e:	b0 81       	ld	r27, Z
   100a0:	00 97       	sbiw	r24, 0x00	; 0
   100a2:	19 f4       	brne	.+6      	; 0x100aa <strtok_r+0x10>
   100a4:	10 97       	sbiw	r26, 0x00	; 0
   100a6:	e1 f0       	breq	.+56     	; 0x100e0 <strtok_r+0x46>
   100a8:	cd 01       	movw	r24, r26
   100aa:	dc 01       	movw	r26, r24
   100ac:	cd 01       	movw	r24, r26
   100ae:	0d 90       	ld	r0, X+
   100b0:	00 20       	and	r0, r0
   100b2:	11 f4       	brne	.+4      	; 0x100b8 <strtok_r+0x1e>
   100b4:	c0 01       	movw	r24, r0
   100b6:	13 c0       	rjmp	.+38     	; 0x100de <strtok_r+0x44>
   100b8:	fb 01       	movw	r30, r22
   100ba:	21 91       	ld	r18, Z+
   100bc:	22 23       	and	r18, r18
   100be:	19 f0       	breq	.+6      	; 0x100c6 <strtok_r+0x2c>
   100c0:	20 15       	cp	r18, r0
   100c2:	d9 f7       	brne	.-10     	; 0x100ba <strtok_r+0x20>
   100c4:	f3 cf       	rjmp	.-26     	; 0x100ac <strtok_r+0x12>
   100c6:	fb 01       	movw	r30, r22
   100c8:	21 91       	ld	r18, Z+
   100ca:	20 15       	cp	r18, r0
   100cc:	19 f4       	brne	.+6      	; 0x100d4 <strtok_r+0x3a>
   100ce:	1e 92       	st	-X, r1
   100d0:	11 96       	adiw	r26, 0x01	; 1
   100d2:	06 c0       	rjmp	.+12     	; 0x100e0 <strtok_r+0x46>
   100d4:	22 23       	and	r18, r18
   100d6:	c1 f7       	brne	.-16     	; 0x100c8 <strtok_r+0x2e>
   100d8:	0d 90       	ld	r0, X+
   100da:	00 20       	and	r0, r0
   100dc:	a1 f7       	brne	.-24     	; 0x100c6 <strtok_r+0x2c>
   100de:	d0 01       	movw	r26, r0
   100e0:	fa 01       	movw	r30, r20
   100e2:	a1 93       	st	Z+, r26
   100e4:	b0 83       	st	Z, r27
   100e6:	08 95       	ret

000100e8 <itoa>:
itoa():
   100e8:	45 32       	cpi	r20, 0x25	; 37
   100ea:	51 05       	cpc	r21, r1
   100ec:	20 f4       	brcc	.+8      	; 0x100f6 <itoa+0xe>
   100ee:	42 30       	cpi	r20, 0x02	; 2
   100f0:	10 f0       	brcs	.+4      	; 0x100f6 <itoa+0xe>
   100f2:	0c 94 7f 80 	jmp	0x100fe	; 0x100fe <__itoa_ncheck>
   100f6:	fb 01       	movw	r30, r22
   100f8:	10 82       	st	Z, r1
   100fa:	cb 01       	movw	r24, r22
   100fc:	08 95       	ret

000100fe <__itoa_ncheck>:
__itoa_ncheck():
   100fe:	bb 27       	eor	r27, r27
   10100:	4a 30       	cpi	r20, 0x0A	; 10
   10102:	31 f4       	brne	.+12     	; 0x10110 <__itoa_ncheck+0x12>
   10104:	99 23       	and	r25, r25
   10106:	22 f4       	brpl	.+8      	; 0x10110 <__itoa_ncheck+0x12>
   10108:	bd e2       	ldi	r27, 0x2D	; 45
   1010a:	90 95       	com	r25
   1010c:	81 95       	neg	r24
   1010e:	9f 4f       	sbci	r25, 0xFF	; 255
   10110:	0c 94 93 80 	jmp	0x10126	; 0x10126 <__utoa_common>

00010114 <__mulhi_const_10>:
__mulhi_const_10():
   10114:	7a e0       	ldi	r23, 0x0A	; 10
   10116:	97 9f       	mul	r25, r23
   10118:	90 2d       	mov	r25, r0
   1011a:	87 9f       	mul	r24, r23
   1011c:	80 2d       	mov	r24, r0
   1011e:	91 0d       	add	r25, r1
   10120:	11 24       	eor	r1, r1
   10122:	08 95       	ret

00010124 <__utoa_ncheck>:
__utoa_ncheck():
   10124:	bb 27       	eor	r27, r27

00010126 <__utoa_common>:
   10126:	fb 01       	movw	r30, r22
   10128:	55 27       	eor	r21, r21
   1012a:	aa 27       	eor	r26, r26
   1012c:	88 0f       	add	r24, r24
   1012e:	99 1f       	adc	r25, r25
   10130:	aa 1f       	adc	r26, r26
   10132:	a4 17       	cp	r26, r20
   10134:	10 f0       	brcs	.+4      	; 0x1013a <__utoa_common+0x14>
   10136:	a4 1b       	sub	r26, r20
   10138:	83 95       	inc	r24
   1013a:	50 51       	subi	r21, 0x10	; 16
   1013c:	b9 f7       	brne	.-18     	; 0x1012c <__utoa_common+0x6>
   1013e:	a0 5d       	subi	r26, 0xD0	; 208
   10140:	aa 33       	cpi	r26, 0x3A	; 58
   10142:	08 f0       	brcs	.+2      	; 0x10146 <__utoa_common+0x20>
   10144:	a9 5d       	subi	r26, 0xD9	; 217
   10146:	a1 93       	st	Z+, r26
   10148:	00 97       	sbiw	r24, 0x00	; 0
   1014a:	79 f7       	brne	.-34     	; 0x1012a <__utoa_common+0x4>
   1014c:	b1 11       	cpse	r27, r1
   1014e:	b1 93       	st	Z+, r27
   10150:	11 92       	st	Z+, r1
   10152:	cb 01       	movw	r24, r22
   10154:	0c 94 21 88 	jmp	0x11042	; 0x11042 <strrev>

00010158 <fdevopen>:
fdevopen():
   10158:	0f 93       	push	r16
   1015a:	1f 93       	push	r17
   1015c:	cf 93       	push	r28
   1015e:	df 93       	push	r29
   10160:	00 97       	sbiw	r24, 0x00	; 0
   10162:	59 f4       	brne	.+22     	; 0x1017a <fdevopen+0x22>
   10164:	61 15       	cp	r22, r1
   10166:	71 05       	cpc	r23, r1
   10168:	41 f4       	brne	.+16     	; 0x1017a <fdevopen+0x22>
   1016a:	f0 e0       	ldi	r31, 0x00	; 0
   1016c:	e0 e0       	ldi	r30, 0x00	; 0
   1016e:	cf 01       	movw	r24, r30
   10170:	df 91       	pop	r29
   10172:	cf 91       	pop	r28
   10174:	1f 91       	pop	r17
   10176:	0f 91       	pop	r16
   10178:	08 95       	ret
   1017a:	8b 01       	movw	r16, r22
   1017c:	ec 01       	movw	r28, r24
   1017e:	6e e0       	ldi	r22, 0x0E	; 14
   10180:	70 e0       	ldi	r23, 0x00	; 0
   10182:	81 e0       	ldi	r24, 0x01	; 1
   10184:	90 e0       	ldi	r25, 0x00	; 0
   10186:	0e 94 f9 82 	call	0x105f2	; 0x105f2 <calloc>
   1018a:	fc 01       	movw	r30, r24
   1018c:	89 2b       	or	r24, r25
   1018e:	69 f3       	breq	.-38     	; 0x1016a <fdevopen+0x12>
   10190:	80 e8       	ldi	r24, 0x80	; 128
   10192:	83 83       	std	Z+3, r24	; 0x03
   10194:	01 15       	cp	r16, r1
   10196:	11 05       	cpc	r17, r1
   10198:	71 f0       	breq	.+28     	; 0x101b6 <fdevopen+0x5e>
   1019a:	13 87       	std	Z+11, r17	; 0x0b
   1019c:	02 87       	std	Z+10, r16	; 0x0a
   1019e:	81 e8       	ldi	r24, 0x81	; 129
   101a0:	83 83       	std	Z+3, r24	; 0x03
   101a2:	80 91 0c 16 	lds	r24, 0x160C	; 0x80160c <__iob>
   101a6:	90 91 0d 16 	lds	r25, 0x160D	; 0x80160d <__iob+0x1>
   101aa:	89 2b       	or	r24, r25
   101ac:	21 f4       	brne	.+8      	; 0x101b6 <fdevopen+0x5e>
   101ae:	f0 93 0d 16 	sts	0x160D, r31	; 0x80160d <__iob+0x1>
   101b2:	e0 93 0c 16 	sts	0x160C, r30	; 0x80160c <__iob>
   101b6:	20 97       	sbiw	r28, 0x00	; 0
   101b8:	d1 f2       	breq	.-76     	; 0x1016e <fdevopen+0x16>
   101ba:	d1 87       	std	Z+9, r29	; 0x09
   101bc:	c0 87       	std	Z+8, r28	; 0x08
   101be:	83 81       	ldd	r24, Z+3	; 0x03
   101c0:	82 60       	ori	r24, 0x02	; 2
   101c2:	83 83       	std	Z+3, r24	; 0x03
   101c4:	80 91 0e 16 	lds	r24, 0x160E	; 0x80160e <__iob+0x2>
   101c8:	90 91 0f 16 	lds	r25, 0x160F	; 0x80160f <__iob+0x3>
   101cc:	89 2b       	or	r24, r25
   101ce:	79 f6       	brne	.-98     	; 0x1016e <fdevopen+0x16>
   101d0:	f0 93 0f 16 	sts	0x160F, r31	; 0x80160f <__iob+0x3>
   101d4:	e0 93 0e 16 	sts	0x160E, r30	; 0x80160e <__iob+0x2>
   101d8:	80 91 10 16 	lds	r24, 0x1610	; 0x801610 <__iob+0x4>
   101dc:	90 91 11 16 	lds	r25, 0x1611	; 0x801611 <__iob+0x5>
   101e0:	89 2b       	or	r24, r25
   101e2:	29 f6       	brne	.-118    	; 0x1016e <fdevopen+0x16>
   101e4:	f0 93 11 16 	sts	0x1611, r31	; 0x801611 <__iob+0x5>
   101e8:	e0 93 10 16 	sts	0x1610, r30	; 0x801610 <__iob+0x4>
   101ec:	c0 cf       	rjmp	.-128    	; 0x1016e <fdevopen+0x16>

000101ee <vfprintf>:
vfprintf():
   101ee:	2f 92       	push	r2
   101f0:	3f 92       	push	r3
   101f2:	4f 92       	push	r4
   101f4:	5f 92       	push	r5
   101f6:	6f 92       	push	r6
   101f8:	7f 92       	push	r7
   101fa:	8f 92       	push	r8
   101fc:	9f 92       	push	r9
   101fe:	af 92       	push	r10
   10200:	bf 92       	push	r11
   10202:	cf 92       	push	r12
   10204:	df 92       	push	r13
   10206:	ef 92       	push	r14
   10208:	ff 92       	push	r15
   1020a:	0f 93       	push	r16
   1020c:	1f 93       	push	r17
   1020e:	cf 93       	push	r28
   10210:	df 93       	push	r29
   10212:	00 d0       	rcall	.+0      	; 0x10214 <vfprintf+0x26>
   10214:	00 d0       	rcall	.+0      	; 0x10216 <vfprintf+0x28>
   10216:	00 d0       	rcall	.+0      	; 0x10218 <vfprintf+0x2a>
   10218:	1f 92       	push	r1
   1021a:	1f 92       	push	r1
   1021c:	cd b7       	in	r28, 0x3d	; 61
   1021e:	de b7       	in	r29, 0x3e	; 62
   10220:	7c 01       	movw	r14, r24
   10222:	3b 01       	movw	r6, r22
   10224:	8a 01       	movw	r16, r20
   10226:	fc 01       	movw	r30, r24
   10228:	17 82       	std	Z+7, r1	; 0x07
   1022a:	16 82       	std	Z+6, r1	; 0x06
   1022c:	83 81       	ldd	r24, Z+3	; 0x03
   1022e:	81 ff       	sbrs	r24, 1
   10230:	dd c1       	rjmp	.+954    	; 0x105ec <vfprintf+0x3fe>
   10232:	ce 01       	movw	r24, r28
   10234:	01 96       	adiw	r24, 0x01	; 1
   10236:	5c 01       	movw	r10, r24
   10238:	f7 01       	movw	r30, r14
   1023a:	93 81       	ldd	r25, Z+3	; 0x03
   1023c:	f3 01       	movw	r30, r6
   1023e:	93 fd       	sbrc	r25, 3
   10240:	85 91       	lpm	r24, Z+
   10242:	93 ff       	sbrs	r25, 3
   10244:	81 91       	ld	r24, Z+
   10246:	3f 01       	movw	r6, r30
   10248:	88 23       	and	r24, r24
   1024a:	09 f4       	brne	.+2      	; 0x1024e <vfprintf+0x60>
   1024c:	53 c1       	rjmp	.+678    	; 0x104f4 <vfprintf+0x306>
   1024e:	85 32       	cpi	r24, 0x25	; 37
   10250:	39 f4       	brne	.+14     	; 0x10260 <vfprintf+0x72>
   10252:	93 fd       	sbrc	r25, 3
   10254:	85 91       	lpm	r24, Z+
   10256:	93 ff       	sbrs	r25, 3
   10258:	81 91       	ld	r24, Z+
   1025a:	3f 01       	movw	r6, r30
   1025c:	85 32       	cpi	r24, 0x25	; 37
   1025e:	29 f4       	brne	.+10     	; 0x1026a <vfprintf+0x7c>
   10260:	b7 01       	movw	r22, r14
   10262:	90 e0       	ldi	r25, 0x00	; 0
   10264:	0e 94 31 88 	call	0x11062	; 0x11062 <fputc>
   10268:	e7 cf       	rjmp	.-50     	; 0x10238 <vfprintf+0x4a>
   1026a:	91 2c       	mov	r9, r1
   1026c:	21 2c       	mov	r2, r1
   1026e:	31 2c       	mov	r3, r1
   10270:	ff e1       	ldi	r31, 0x1F	; 31
   10272:	f3 15       	cp	r31, r3
   10274:	38 f0       	brcs	.+14     	; 0x10284 <vfprintf+0x96>
   10276:	8b 32       	cpi	r24, 0x2B	; 43
   10278:	11 f1       	breq	.+68     	; 0x102be <vfprintf+0xd0>
   1027a:	90 f4       	brcc	.+36     	; 0x102a0 <vfprintf+0xb2>
   1027c:	80 32       	cpi	r24, 0x20	; 32
   1027e:	09 f1       	breq	.+66     	; 0x102c2 <vfprintf+0xd4>
   10280:	83 32       	cpi	r24, 0x23	; 35
   10282:	29 f1       	breq	.+74     	; 0x102ce <vfprintf+0xe0>
   10284:	37 fc       	sbrc	r3, 7
   10286:	3c c0       	rjmp	.+120    	; 0x10300 <vfprintf+0x112>
   10288:	20 ed       	ldi	r18, 0xD0	; 208
   1028a:	28 0f       	add	r18, r24
   1028c:	2a 30       	cpi	r18, 0x0A	; 10
   1028e:	50 f5       	brcc	.+84     	; 0x102e4 <vfprintf+0xf6>
   10290:	36 fe       	sbrs	r3, 6
   10292:	20 c0       	rjmp	.+64     	; 0x102d4 <vfprintf+0xe6>
   10294:	8a e0       	ldi	r24, 0x0A	; 10
   10296:	98 9e       	mul	r9, r24
   10298:	20 0d       	add	r18, r0
   1029a:	11 24       	eor	r1, r1
   1029c:	92 2e       	mov	r9, r18
   1029e:	06 c0       	rjmp	.+12     	; 0x102ac <vfprintf+0xbe>
   102a0:	8d 32       	cpi	r24, 0x2D	; 45
   102a2:	91 f0       	breq	.+36     	; 0x102c8 <vfprintf+0xda>
   102a4:	80 33       	cpi	r24, 0x30	; 48
   102a6:	71 f7       	brne	.-36     	; 0x10284 <vfprintf+0x96>
   102a8:	68 94       	set
   102aa:	30 f8       	bld	r3, 0
   102ac:	f3 01       	movw	r30, r6
   102ae:	93 fd       	sbrc	r25, 3
   102b0:	85 91       	lpm	r24, Z+
   102b2:	93 ff       	sbrs	r25, 3
   102b4:	81 91       	ld	r24, Z+
   102b6:	3f 01       	movw	r6, r30
   102b8:	81 11       	cpse	r24, r1
   102ba:	da cf       	rjmp	.-76     	; 0x10270 <vfprintf+0x82>
   102bc:	21 c0       	rjmp	.+66     	; 0x10300 <vfprintf+0x112>
   102be:	68 94       	set
   102c0:	31 f8       	bld	r3, 1
   102c2:	68 94       	set
   102c4:	32 f8       	bld	r3, 2
   102c6:	f2 cf       	rjmp	.-28     	; 0x102ac <vfprintf+0xbe>
   102c8:	68 94       	set
   102ca:	33 f8       	bld	r3, 3
   102cc:	ef cf       	rjmp	.-34     	; 0x102ac <vfprintf+0xbe>
   102ce:	68 94       	set
   102d0:	34 f8       	bld	r3, 4
   102d2:	ec cf       	rjmp	.-40     	; 0x102ac <vfprintf+0xbe>
   102d4:	ea e0       	ldi	r30, 0x0A	; 10
   102d6:	2e 9e       	mul	r2, r30
   102d8:	20 0d       	add	r18, r0
   102da:	11 24       	eor	r1, r1
   102dc:	22 2e       	mov	r2, r18
   102de:	68 94       	set
   102e0:	35 f8       	bld	r3, 5
   102e2:	e4 cf       	rjmp	.-56     	; 0x102ac <vfprintf+0xbe>
   102e4:	8e 32       	cpi	r24, 0x2E	; 46
   102e6:	29 f4       	brne	.+10     	; 0x102f2 <vfprintf+0x104>
   102e8:	36 fc       	sbrc	r3, 6
   102ea:	04 c1       	rjmp	.+520    	; 0x104f4 <vfprintf+0x306>
   102ec:	68 94       	set
   102ee:	36 f8       	bld	r3, 6
   102f0:	dd cf       	rjmp	.-70     	; 0x102ac <vfprintf+0xbe>
   102f2:	8c 36       	cpi	r24, 0x6C	; 108
   102f4:	19 f4       	brne	.+6      	; 0x102fc <vfprintf+0x10e>
   102f6:	68 94       	set
   102f8:	37 f8       	bld	r3, 7
   102fa:	d8 cf       	rjmp	.-80     	; 0x102ac <vfprintf+0xbe>
   102fc:	88 36       	cpi	r24, 0x68	; 104
   102fe:	b1 f2       	breq	.-84     	; 0x102ac <vfprintf+0xbe>
   10300:	98 2f       	mov	r25, r24
   10302:	9f 7d       	andi	r25, 0xDF	; 223
   10304:	95 54       	subi	r25, 0x45	; 69
   10306:	93 30       	cpi	r25, 0x03	; 3
   10308:	e0 f0       	brcs	.+56     	; 0x10342 <vfprintf+0x154>
   1030a:	83 36       	cpi	r24, 0x63	; 99
   1030c:	a1 f1       	breq	.+104    	; 0x10376 <vfprintf+0x188>
   1030e:	83 37       	cpi	r24, 0x73	; 115
   10310:	c1 f1       	breq	.+112    	; 0x10382 <vfprintf+0x194>
   10312:	83 35       	cpi	r24, 0x53	; 83
   10314:	09 f0       	breq	.+2      	; 0x10318 <vfprintf+0x12a>
   10316:	63 c0       	rjmp	.+198    	; 0x103de <vfprintf+0x1f0>
   10318:	28 01       	movw	r4, r16
   1031a:	f2 e0       	ldi	r31, 0x02	; 2
   1031c:	4f 0e       	add	r4, r31
   1031e:	51 1c       	adc	r5, r1
   10320:	f8 01       	movw	r30, r16
   10322:	c0 80       	ld	r12, Z
   10324:	d1 80       	ldd	r13, Z+1	; 0x01
   10326:	69 2d       	mov	r22, r9
   10328:	70 e0       	ldi	r23, 0x00	; 0
   1032a:	36 fc       	sbrc	r3, 6
   1032c:	02 c0       	rjmp	.+4      	; 0x10332 <vfprintf+0x144>
   1032e:	6f ef       	ldi	r22, 0xFF	; 255
   10330:	7f ef       	ldi	r23, 0xFF	; 255
   10332:	c6 01       	movw	r24, r12
   10334:	0e 94 04 88 	call	0x11008	; 0x11008 <strnlen_P>
   10338:	4c 01       	movw	r8, r24
   1033a:	68 94       	set
   1033c:	37 f8       	bld	r3, 7
   1033e:	82 01       	movw	r16, r4
   10340:	0a c0       	rjmp	.+20     	; 0x10356 <vfprintf+0x168>
   10342:	0c 5f       	subi	r16, 0xFC	; 252
   10344:	1f 4f       	sbci	r17, 0xFF	; 255
   10346:	ff e3       	ldi	r31, 0x3F	; 63
   10348:	f9 83       	std	Y+1, r31	; 0x01
   1034a:	88 24       	eor	r8, r8
   1034c:	83 94       	inc	r8
   1034e:	91 2c       	mov	r9, r1
   10350:	65 01       	movw	r12, r10
   10352:	e8 94       	clt
   10354:	37 f8       	bld	r3, 7
   10356:	33 fe       	sbrs	r3, 3
   10358:	2d c0       	rjmp	.+90     	; 0x103b4 <vfprintf+0x1c6>
   1035a:	52 2c       	mov	r5, r2
   1035c:	81 14       	cp	r8, r1
   1035e:	91 04       	cpc	r9, r1
   10360:	71 f5       	brne	.+92     	; 0x103be <vfprintf+0x1d0>
   10362:	55 20       	and	r5, r5
   10364:	09 f4       	brne	.+2      	; 0x10368 <vfprintf+0x17a>
   10366:	68 cf       	rjmp	.-304    	; 0x10238 <vfprintf+0x4a>
   10368:	b7 01       	movw	r22, r14
   1036a:	80 e2       	ldi	r24, 0x20	; 32
   1036c:	90 e0       	ldi	r25, 0x00	; 0
   1036e:	0e 94 31 88 	call	0x11062	; 0x11062 <fputc>
   10372:	5a 94       	dec	r5
   10374:	f6 cf       	rjmp	.-20     	; 0x10362 <vfprintf+0x174>
   10376:	f8 01       	movw	r30, r16
   10378:	80 81       	ld	r24, Z
   1037a:	89 83       	std	Y+1, r24	; 0x01
   1037c:	0e 5f       	subi	r16, 0xFE	; 254
   1037e:	1f 4f       	sbci	r17, 0xFF	; 255
   10380:	e4 cf       	rjmp	.-56     	; 0x1034a <vfprintf+0x15c>
   10382:	28 01       	movw	r4, r16
   10384:	f2 e0       	ldi	r31, 0x02	; 2
   10386:	4f 0e       	add	r4, r31
   10388:	51 1c       	adc	r5, r1
   1038a:	f8 01       	movw	r30, r16
   1038c:	c0 80       	ld	r12, Z
   1038e:	d1 80       	ldd	r13, Z+1	; 0x01
   10390:	69 2d       	mov	r22, r9
   10392:	70 e0       	ldi	r23, 0x00	; 0
   10394:	36 fc       	sbrc	r3, 6
   10396:	02 c0       	rjmp	.+4      	; 0x1039c <vfprintf+0x1ae>
   10398:	6f ef       	ldi	r22, 0xFF	; 255
   1039a:	7f ef       	ldi	r23, 0xFF	; 255
   1039c:	c6 01       	movw	r24, r12
   1039e:	0e 94 16 88 	call	0x1102c	; 0x1102c <strnlen>
   103a2:	4c 01       	movw	r8, r24
   103a4:	82 01       	movw	r16, r4
   103a6:	d5 cf       	rjmp	.-86     	; 0x10352 <vfprintf+0x164>
   103a8:	b7 01       	movw	r22, r14
   103aa:	80 e2       	ldi	r24, 0x20	; 32
   103ac:	90 e0       	ldi	r25, 0x00	; 0
   103ae:	0e 94 31 88 	call	0x11062	; 0x11062 <fputc>
   103b2:	2a 94       	dec	r2
   103b4:	28 14       	cp	r2, r8
   103b6:	19 04       	cpc	r1, r9
   103b8:	09 f0       	breq	.+2      	; 0x103bc <vfprintf+0x1ce>
   103ba:	b0 f7       	brcc	.-20     	; 0x103a8 <vfprintf+0x1ba>
   103bc:	ce cf       	rjmp	.-100    	; 0x1035a <vfprintf+0x16c>
   103be:	f6 01       	movw	r30, r12
   103c0:	37 fc       	sbrc	r3, 7
   103c2:	85 91       	lpm	r24, Z+
   103c4:	37 fe       	sbrs	r3, 7
   103c6:	81 91       	ld	r24, Z+
   103c8:	6f 01       	movw	r12, r30
   103ca:	b7 01       	movw	r22, r14
   103cc:	90 e0       	ldi	r25, 0x00	; 0
   103ce:	0e 94 31 88 	call	0x11062	; 0x11062 <fputc>
   103d2:	51 10       	cpse	r5, r1
   103d4:	5a 94       	dec	r5
   103d6:	f1 e0       	ldi	r31, 0x01	; 1
   103d8:	8f 1a       	sub	r8, r31
   103da:	91 08       	sbc	r9, r1
   103dc:	bf cf       	rjmp	.-130    	; 0x1035c <vfprintf+0x16e>
   103de:	84 36       	cpi	r24, 0x64	; 100
   103e0:	19 f0       	breq	.+6      	; 0x103e8 <vfprintf+0x1fa>
   103e2:	89 36       	cpi	r24, 0x69	; 105
   103e4:	09 f0       	breq	.+2      	; 0x103e8 <vfprintf+0x1fa>
   103e6:	77 c0       	rjmp	.+238    	; 0x104d6 <vfprintf+0x2e8>
   103e8:	f8 01       	movw	r30, r16
   103ea:	37 fe       	sbrs	r3, 7
   103ec:	6b c0       	rjmp	.+214    	; 0x104c4 <vfprintf+0x2d6>
   103ee:	60 81       	ld	r22, Z
   103f0:	71 81       	ldd	r23, Z+1	; 0x01
   103f2:	82 81       	ldd	r24, Z+2	; 0x02
   103f4:	93 81       	ldd	r25, Z+3	; 0x03
   103f6:	0c 5f       	subi	r16, 0xFC	; 252
   103f8:	1f 4f       	sbci	r17, 0xFF	; 255
   103fa:	f3 2d       	mov	r31, r3
   103fc:	ff 76       	andi	r31, 0x6F	; 111
   103fe:	3f 2e       	mov	r3, r31
   10400:	97 ff       	sbrs	r25, 7
   10402:	09 c0       	rjmp	.+18     	; 0x10416 <vfprintf+0x228>
   10404:	90 95       	com	r25
   10406:	80 95       	com	r24
   10408:	70 95       	com	r23
   1040a:	61 95       	neg	r22
   1040c:	7f 4f       	sbci	r23, 0xFF	; 255
   1040e:	8f 4f       	sbci	r24, 0xFF	; 255
   10410:	9f 4f       	sbci	r25, 0xFF	; 255
   10412:	68 94       	set
   10414:	37 f8       	bld	r3, 7
   10416:	2a e0       	ldi	r18, 0x0A	; 10
   10418:	30 e0       	ldi	r19, 0x00	; 0
   1041a:	a5 01       	movw	r20, r10
   1041c:	0e 94 61 88 	call	0x110c2	; 0x110c2 <__ultoa_invert>
   10420:	c8 2e       	mov	r12, r24
   10422:	ca 18       	sub	r12, r10
   10424:	8c 2c       	mov	r8, r12
   10426:	43 2c       	mov	r4, r3
   10428:	36 fe       	sbrs	r3, 6
   1042a:	0c c0       	rjmp	.+24     	; 0x10444 <vfprintf+0x256>
   1042c:	e8 94       	clt
   1042e:	40 f8       	bld	r4, 0
   10430:	c9 14       	cp	r12, r9
   10432:	40 f4       	brcc	.+16     	; 0x10444 <vfprintf+0x256>
   10434:	34 fe       	sbrs	r3, 4
   10436:	05 c0       	rjmp	.+10     	; 0x10442 <vfprintf+0x254>
   10438:	32 fc       	sbrc	r3, 2
   1043a:	03 c0       	rjmp	.+6      	; 0x10442 <vfprintf+0x254>
   1043c:	f3 2d       	mov	r31, r3
   1043e:	fe 7e       	andi	r31, 0xEE	; 238
   10440:	4f 2e       	mov	r4, r31
   10442:	89 2c       	mov	r8, r9
   10444:	44 fe       	sbrs	r4, 4
   10446:	aa c0       	rjmp	.+340    	; 0x1059c <vfprintf+0x3ae>
   10448:	fe 01       	movw	r30, r28
   1044a:	ec 0d       	add	r30, r12
   1044c:	f1 1d       	adc	r31, r1
   1044e:	80 81       	ld	r24, Z
   10450:	80 33       	cpi	r24, 0x30	; 48
   10452:	09 f0       	breq	.+2      	; 0x10456 <vfprintf+0x268>
   10454:	9c c0       	rjmp	.+312    	; 0x1058e <vfprintf+0x3a0>
   10456:	24 2d       	mov	r18, r4
   10458:	29 7e       	andi	r18, 0xE9	; 233
   1045a:	42 2e       	mov	r4, r18
   1045c:	84 2d       	mov	r24, r4
   1045e:	88 70       	andi	r24, 0x08	; 8
   10460:	58 2e       	mov	r5, r24
   10462:	43 fc       	sbrc	r4, 3
   10464:	aa c0       	rjmp	.+340    	; 0x105ba <vfprintf+0x3cc>
   10466:	40 fe       	sbrs	r4, 0
   10468:	a4 c0       	rjmp	.+328    	; 0x105b2 <vfprintf+0x3c4>
   1046a:	9c 2c       	mov	r9, r12
   1046c:	82 14       	cp	r8, r2
   1046e:	18 f4       	brcc	.+6      	; 0x10476 <vfprintf+0x288>
   10470:	2c 0c       	add	r2, r12
   10472:	92 2c       	mov	r9, r2
   10474:	98 18       	sub	r9, r8
   10476:	44 fe       	sbrs	r4, 4
   10478:	a6 c0       	rjmp	.+332    	; 0x105c6 <vfprintf+0x3d8>
   1047a:	b7 01       	movw	r22, r14
   1047c:	80 e3       	ldi	r24, 0x30	; 48
   1047e:	90 e0       	ldi	r25, 0x00	; 0
   10480:	0e 94 31 88 	call	0x11062	; 0x11062 <fputc>
   10484:	42 fe       	sbrs	r4, 2
   10486:	09 c0       	rjmp	.+18     	; 0x1049a <vfprintf+0x2ac>
   10488:	88 e7       	ldi	r24, 0x78	; 120
   1048a:	90 e0       	ldi	r25, 0x00	; 0
   1048c:	41 fe       	sbrs	r4, 1
   1048e:	02 c0       	rjmp	.+4      	; 0x10494 <vfprintf+0x2a6>
   10490:	88 e5       	ldi	r24, 0x58	; 88
   10492:	90 e0       	ldi	r25, 0x00	; 0
   10494:	b7 01       	movw	r22, r14
   10496:	0e 94 31 88 	call	0x11062	; 0x11062 <fputc>
   1049a:	c9 14       	cp	r12, r9
   1049c:	08 f4       	brcc	.+2      	; 0x104a0 <vfprintf+0x2b2>
   1049e:	9f c0       	rjmp	.+318    	; 0x105de <vfprintf+0x3f0>
   104a0:	ca 94       	dec	r12
   104a2:	d1 2c       	mov	r13, r1
   104a4:	9f ef       	ldi	r25, 0xFF	; 255
   104a6:	c9 1a       	sub	r12, r25
   104a8:	d9 0a       	sbc	r13, r25
   104aa:	ca 0c       	add	r12, r10
   104ac:	db 1c       	adc	r13, r11
   104ae:	f6 01       	movw	r30, r12
   104b0:	82 91       	ld	r24, -Z
   104b2:	6f 01       	movw	r12, r30
   104b4:	b7 01       	movw	r22, r14
   104b6:	90 e0       	ldi	r25, 0x00	; 0
   104b8:	0e 94 31 88 	call	0x11062	; 0x11062 <fputc>
   104bc:	ac 14       	cp	r10, r12
   104be:	bd 04       	cpc	r11, r13
   104c0:	b1 f7       	brne	.-20     	; 0x104ae <vfprintf+0x2c0>
   104c2:	4f cf       	rjmp	.-354    	; 0x10362 <vfprintf+0x174>
   104c4:	60 81       	ld	r22, Z
   104c6:	71 81       	ldd	r23, Z+1	; 0x01
   104c8:	07 2e       	mov	r0, r23
   104ca:	00 0c       	add	r0, r0
   104cc:	88 0b       	sbc	r24, r24
   104ce:	99 0b       	sbc	r25, r25
   104d0:	0e 5f       	subi	r16, 0xFE	; 254
   104d2:	1f 4f       	sbci	r17, 0xFF	; 255
   104d4:	92 cf       	rjmp	.-220    	; 0x103fa <vfprintf+0x20c>
   104d6:	d3 2c       	mov	r13, r3
   104d8:	e8 94       	clt
   104da:	d4 f8       	bld	r13, 4
   104dc:	2a e0       	ldi	r18, 0x0A	; 10
   104de:	30 e0       	ldi	r19, 0x00	; 0
   104e0:	85 37       	cpi	r24, 0x75	; 117
   104e2:	e1 f1       	breq	.+120    	; 0x1055c <vfprintf+0x36e>
   104e4:	23 2d       	mov	r18, r3
   104e6:	29 7f       	andi	r18, 0xF9	; 249
   104e8:	d2 2e       	mov	r13, r18
   104ea:	8f 36       	cpi	r24, 0x6F	; 111
   104ec:	a9 f1       	breq	.+106    	; 0x10558 <vfprintf+0x36a>
   104ee:	f0 f4       	brcc	.+60     	; 0x1052c <vfprintf+0x33e>
   104f0:	88 35       	cpi	r24, 0x58	; 88
   104f2:	51 f1       	breq	.+84     	; 0x10548 <vfprintf+0x35a>
   104f4:	f7 01       	movw	r30, r14
   104f6:	86 81       	ldd	r24, Z+6	; 0x06
   104f8:	97 81       	ldd	r25, Z+7	; 0x07
   104fa:	2b 96       	adiw	r28, 0x0b	; 11
   104fc:	0f b6       	in	r0, 0x3f	; 63
   104fe:	f8 94       	cli
   10500:	de bf       	out	0x3e, r29	; 62
   10502:	0f be       	out	0x3f, r0	; 63
   10504:	cd bf       	out	0x3d, r28	; 61
   10506:	df 91       	pop	r29
   10508:	cf 91       	pop	r28
   1050a:	1f 91       	pop	r17
   1050c:	0f 91       	pop	r16
   1050e:	ff 90       	pop	r15
   10510:	ef 90       	pop	r14
   10512:	df 90       	pop	r13
   10514:	cf 90       	pop	r12
   10516:	bf 90       	pop	r11
   10518:	af 90       	pop	r10
   1051a:	9f 90       	pop	r9
   1051c:	8f 90       	pop	r8
   1051e:	7f 90       	pop	r7
   10520:	6f 90       	pop	r6
   10522:	5f 90       	pop	r5
   10524:	4f 90       	pop	r4
   10526:	3f 90       	pop	r3
   10528:	2f 90       	pop	r2
   1052a:	08 95       	ret
   1052c:	80 37       	cpi	r24, 0x70	; 112
   1052e:	49 f0       	breq	.+18     	; 0x10542 <vfprintf+0x354>
   10530:	88 37       	cpi	r24, 0x78	; 120
   10532:	01 f7       	brne	.-64     	; 0x104f4 <vfprintf+0x306>
   10534:	d4 fe       	sbrs	r13, 4
   10536:	02 c0       	rjmp	.+4      	; 0x1053c <vfprintf+0x34e>
   10538:	68 94       	set
   1053a:	d2 f8       	bld	r13, 2
   1053c:	20 e1       	ldi	r18, 0x10	; 16
   1053e:	30 e0       	ldi	r19, 0x00	; 0
   10540:	0d c0       	rjmp	.+26     	; 0x1055c <vfprintf+0x36e>
   10542:	68 94       	set
   10544:	d4 f8       	bld	r13, 4
   10546:	f6 cf       	rjmp	.-20     	; 0x10534 <vfprintf+0x346>
   10548:	34 fe       	sbrs	r3, 4
   1054a:	03 c0       	rjmp	.+6      	; 0x10552 <vfprintf+0x364>
   1054c:	82 2f       	mov	r24, r18
   1054e:	86 60       	ori	r24, 0x06	; 6
   10550:	d8 2e       	mov	r13, r24
   10552:	20 e1       	ldi	r18, 0x10	; 16
   10554:	32 e0       	ldi	r19, 0x02	; 2
   10556:	02 c0       	rjmp	.+4      	; 0x1055c <vfprintf+0x36e>
   10558:	28 e0       	ldi	r18, 0x08	; 8
   1055a:	30 e0       	ldi	r19, 0x00	; 0
   1055c:	f8 01       	movw	r30, r16
   1055e:	d7 fe       	sbrs	r13, 7
   10560:	0f c0       	rjmp	.+30     	; 0x10580 <vfprintf+0x392>
   10562:	60 81       	ld	r22, Z
   10564:	71 81       	ldd	r23, Z+1	; 0x01
   10566:	82 81       	ldd	r24, Z+2	; 0x02
   10568:	93 81       	ldd	r25, Z+3	; 0x03
   1056a:	0c 5f       	subi	r16, 0xFC	; 252
   1056c:	1f 4f       	sbci	r17, 0xFF	; 255
   1056e:	a5 01       	movw	r20, r10
   10570:	0e 94 61 88 	call	0x110c2	; 0x110c2 <__ultoa_invert>
   10574:	c8 2e       	mov	r12, r24
   10576:	ca 18       	sub	r12, r10
   10578:	3d 2c       	mov	r3, r13
   1057a:	e8 94       	clt
   1057c:	37 f8       	bld	r3, 7
   1057e:	52 cf       	rjmp	.-348    	; 0x10424 <vfprintf+0x236>
   10580:	60 81       	ld	r22, Z
   10582:	71 81       	ldd	r23, Z+1	; 0x01
   10584:	90 e0       	ldi	r25, 0x00	; 0
   10586:	80 e0       	ldi	r24, 0x00	; 0
   10588:	0e 5f       	subi	r16, 0xFE	; 254
   1058a:	1f 4f       	sbci	r17, 0xFF	; 255
   1058c:	f0 cf       	rjmp	.-32     	; 0x1056e <vfprintf+0x380>
   1058e:	42 fc       	sbrc	r4, 2
   10590:	02 c0       	rjmp	.+4      	; 0x10596 <vfprintf+0x3a8>
   10592:	83 94       	inc	r8
   10594:	63 cf       	rjmp	.-314    	; 0x1045c <vfprintf+0x26e>
   10596:	83 94       	inc	r8
   10598:	83 94       	inc	r8
   1059a:	60 cf       	rjmp	.-320    	; 0x1045c <vfprintf+0x26e>
   1059c:	84 2d       	mov	r24, r4
   1059e:	86 78       	andi	r24, 0x86	; 134
   105a0:	09 f4       	brne	.+2      	; 0x105a4 <vfprintf+0x3b6>
   105a2:	5c cf       	rjmp	.-328    	; 0x1045c <vfprintf+0x26e>
   105a4:	f6 cf       	rjmp	.-20     	; 0x10592 <vfprintf+0x3a4>
   105a6:	b7 01       	movw	r22, r14
   105a8:	80 e2       	ldi	r24, 0x20	; 32
   105aa:	90 e0       	ldi	r25, 0x00	; 0
   105ac:	0e 94 31 88 	call	0x11062	; 0x11062 <fputc>
   105b0:	83 94       	inc	r8
   105b2:	82 14       	cp	r8, r2
   105b4:	c0 f3       	brcs	.-16     	; 0x105a6 <vfprintf+0x3b8>
   105b6:	51 2c       	mov	r5, r1
   105b8:	5e cf       	rjmp	.-324    	; 0x10476 <vfprintf+0x288>
   105ba:	52 2c       	mov	r5, r2
   105bc:	58 18       	sub	r5, r8
   105be:	82 14       	cp	r8, r2
   105c0:	08 f4       	brcc	.+2      	; 0x105c4 <vfprintf+0x3d6>
   105c2:	59 cf       	rjmp	.-334    	; 0x10476 <vfprintf+0x288>
   105c4:	f8 cf       	rjmp	.-16     	; 0x105b6 <vfprintf+0x3c8>
   105c6:	84 2d       	mov	r24, r4
   105c8:	86 78       	andi	r24, 0x86	; 134
   105ca:	09 f4       	brne	.+2      	; 0x105ce <vfprintf+0x3e0>
   105cc:	66 cf       	rjmp	.-308    	; 0x1049a <vfprintf+0x2ac>
   105ce:	8b e2       	ldi	r24, 0x2B	; 43
   105d0:	41 fe       	sbrs	r4, 1
   105d2:	80 e2       	ldi	r24, 0x20	; 32
   105d4:	47 fc       	sbrc	r4, 7
   105d6:	8d e2       	ldi	r24, 0x2D	; 45
   105d8:	b7 01       	movw	r22, r14
   105da:	90 e0       	ldi	r25, 0x00	; 0
   105dc:	5c cf       	rjmp	.-328    	; 0x10496 <vfprintf+0x2a8>
   105de:	b7 01       	movw	r22, r14
   105e0:	80 e3       	ldi	r24, 0x30	; 48
   105e2:	90 e0       	ldi	r25, 0x00	; 0
   105e4:	0e 94 31 88 	call	0x11062	; 0x11062 <fputc>
   105e8:	9a 94       	dec	r9
   105ea:	57 cf       	rjmp	.-338    	; 0x1049a <vfprintf+0x2ac>
   105ec:	8f ef       	ldi	r24, 0xFF	; 255
   105ee:	9f ef       	ldi	r25, 0xFF	; 255
   105f0:	84 cf       	rjmp	.-248    	; 0x104fa <vfprintf+0x30c>

000105f2 <calloc>:
calloc():
   105f2:	0f 93       	push	r16
   105f4:	1f 93       	push	r17
   105f6:	cf 93       	push	r28
   105f8:	df 93       	push	r29
   105fa:	86 9f       	mul	r24, r22
   105fc:	80 01       	movw	r16, r0
   105fe:	87 9f       	mul	r24, r23
   10600:	10 0d       	add	r17, r0
   10602:	96 9f       	mul	r25, r22
   10604:	10 0d       	add	r17, r0
   10606:	11 24       	eor	r1, r1
   10608:	c8 01       	movw	r24, r16
   1060a:	0e 94 8e 84 	call	0x1091c	; 0x1091c <malloc>
   1060e:	ec 01       	movw	r28, r24
   10610:	00 97       	sbiw	r24, 0x00	; 0
   10612:	29 f0       	breq	.+10     	; 0x1061e <calloc+0x2c>
   10614:	a8 01       	movw	r20, r16
   10616:	70 e0       	ldi	r23, 0x00	; 0
   10618:	60 e0       	ldi	r22, 0x00	; 0
   1061a:	0e 94 0f 88 	call	0x1101e	; 0x1101e <memset>
   1061e:	ce 01       	movw	r24, r28
   10620:	df 91       	pop	r29
   10622:	cf 91       	pop	r28
   10624:	1f 91       	pop	r17
   10626:	0f 91       	pop	r16
   10628:	08 95       	ret

0001062a <dtoa_prf>:
dtoa_prf():
   1062a:	8f 92       	push	r8
   1062c:	9f 92       	push	r9
   1062e:	af 92       	push	r10
   10630:	bf 92       	push	r11
   10632:	cf 92       	push	r12
   10634:	df 92       	push	r13
   10636:	ef 92       	push	r14
   10638:	ff 92       	push	r15
   1063a:	0f 93       	push	r16
   1063c:	1f 93       	push	r17
   1063e:	cf 93       	push	r28
   10640:	df 93       	push	r29
   10642:	00 d0       	rcall	.+0      	; 0x10644 <dtoa_prf+0x1a>
   10644:	00 d0       	rcall	.+0      	; 0x10646 <dtoa_prf+0x1c>
   10646:	00 d0       	rcall	.+0      	; 0x10648 <dtoa_prf+0x1e>
   10648:	cd b7       	in	r28, 0x3d	; 61
   1064a:	de b7       	in	r29, 0x3e	; 62
   1064c:	6a 01       	movw	r12, r20
   1064e:	f2 2e       	mov	r15, r18
   10650:	b0 2e       	mov	r11, r16
   10652:	10 2f       	mov	r17, r16
   10654:	fb e3       	ldi	r31, 0x3B	; 59
   10656:	af 2e       	mov	r10, r31
   10658:	a0 16       	cp	r10, r16
   1065a:	08 f4       	brcc	.+2      	; 0x1065e <dtoa_prf+0x34>
   1065c:	1b e3       	ldi	r17, 0x3B	; 59
   1065e:	1f 5f       	subi	r17, 0xFF	; 255
   10660:	01 2f       	mov	r16, r17
   10662:	27 e0       	ldi	r18, 0x07	; 7
   10664:	ae 01       	movw	r20, r28
   10666:	4f 5f       	subi	r20, 0xFF	; 255
   10668:	5f 4f       	sbci	r21, 0xFF	; 255
   1066a:	0e 94 11 87 	call	0x10e22	; 0x10e22 <__ftoa_engine>
   1066e:	bc 01       	movw	r22, r24
   10670:	89 81       	ldd	r24, Y+1	; 0x01
   10672:	98 2f       	mov	r25, r24
   10674:	99 70       	andi	r25, 0x09	; 9
   10676:	91 30       	cpi	r25, 0x01	; 1
   10678:	09 f4       	brne	.+2      	; 0x1067c <dtoa_prf+0x52>
   1067a:	4e c0       	rjmp	.+156    	; 0x10718 <dtoa_prf+0xee>
   1067c:	9b e2       	ldi	r25, 0x2B	; 43
   1067e:	e1 fc       	sbrc	r14, 1
   10680:	04 c0       	rjmp	.+8      	; 0x1068a <dtoa_prf+0x60>
   10682:	9e 2d       	mov	r25, r14
   10684:	91 70       	andi	r25, 0x01	; 1
   10686:	e0 fc       	sbrc	r14, 0
   10688:	49 c0       	rjmp	.+146    	; 0x1071c <dtoa_prf+0xf2>
   1068a:	5e 2d       	mov	r21, r14
   1068c:	50 71       	andi	r21, 0x10	; 16
   1068e:	e8 2f       	mov	r30, r24
   10690:	e8 70       	andi	r30, 0x08	; 8
   10692:	83 ff       	sbrs	r24, 3
   10694:	55 c0       	rjmp	.+170    	; 0x10740 <dtoa_prf+0x116>
   10696:	84 e0       	ldi	r24, 0x04	; 4
   10698:	91 11       	cpse	r25, r1
   1069a:	01 c0       	rjmp	.+2      	; 0x1069e <dtoa_prf+0x74>
   1069c:	83 e0       	ldi	r24, 0x03	; 3
   1069e:	ef 2d       	mov	r30, r15
   106a0:	e8 1b       	sub	r30, r24
   106a2:	8f 15       	cp	r24, r15
   106a4:	08 f0       	brcs	.+2      	; 0x106a8 <dtoa_prf+0x7e>
   106a6:	e0 e0       	ldi	r30, 0x00	; 0
   106a8:	d6 01       	movw	r26, r12
   106aa:	8e 2f       	mov	r24, r30
   106ac:	20 e2       	ldi	r18, 0x20	; 32
   106ae:	55 23       	and	r21, r21
   106b0:	c9 f1       	breq	.+114    	; 0x10724 <dtoa_prf+0xfa>
   106b2:	99 23       	and	r25, r25
   106b4:	29 f0       	breq	.+10     	; 0x106c0 <dtoa_prf+0x96>
   106b6:	d6 01       	movw	r26, r12
   106b8:	9c 93       	st	X, r25
   106ba:	c6 01       	movw	r24, r12
   106bc:	01 96       	adiw	r24, 0x01	; 1
   106be:	6c 01       	movw	r12, r24
   106c0:	96 01       	movw	r18, r12
   106c2:	2d 5f       	subi	r18, 0xFD	; 253
   106c4:	3f 4f       	sbci	r19, 0xFF	; 255
   106c6:	e2 fe       	sbrs	r14, 2
   106c8:	33 c0       	rjmp	.+102    	; 0x10730 <dtoa_prf+0x106>
   106ca:	8e e4       	ldi	r24, 0x4E	; 78
   106cc:	d6 01       	movw	r26, r12
   106ce:	8c 93       	st	X, r24
   106d0:	91 e4       	ldi	r25, 0x41	; 65
   106d2:	11 96       	adiw	r26, 0x01	; 1
   106d4:	9c 93       	st	X, r25
   106d6:	11 97       	sbiw	r26, 0x01	; 1
   106d8:	12 96       	adiw	r26, 0x02	; 2
   106da:	8c 93       	st	X, r24
   106dc:	d9 01       	movw	r26, r18
   106de:	8e 2f       	mov	r24, r30
   106e0:	90 e2       	ldi	r25, 0x20	; 32
   106e2:	81 11       	cpse	r24, r1
   106e4:	2a c0       	rjmp	.+84     	; 0x1073a <dtoa_prf+0x110>
   106e6:	e2 0f       	add	r30, r18
   106e8:	f3 2f       	mov	r31, r19
   106ea:	f1 1d       	adc	r31, r1
   106ec:	10 82       	st	Z, r1
   106ee:	8e ef       	ldi	r24, 0xFE	; 254
   106f0:	9f ef       	ldi	r25, 0xFF	; 255
   106f2:	29 96       	adiw	r28, 0x09	; 9
   106f4:	0f b6       	in	r0, 0x3f	; 63
   106f6:	f8 94       	cli
   106f8:	de bf       	out	0x3e, r29	; 62
   106fa:	0f be       	out	0x3f, r0	; 63
   106fc:	cd bf       	out	0x3d, r28	; 61
   106fe:	df 91       	pop	r29
   10700:	cf 91       	pop	r28
   10702:	1f 91       	pop	r17
   10704:	0f 91       	pop	r16
   10706:	ff 90       	pop	r15
   10708:	ef 90       	pop	r14
   1070a:	df 90       	pop	r13
   1070c:	cf 90       	pop	r12
   1070e:	bf 90       	pop	r11
   10710:	af 90       	pop	r10
   10712:	9f 90       	pop	r9
   10714:	8f 90       	pop	r8
   10716:	08 95       	ret
   10718:	9d e2       	ldi	r25, 0x2D	; 45
   1071a:	b7 cf       	rjmp	.-146    	; 0x1068a <dtoa_prf+0x60>
   1071c:	90 e2       	ldi	r25, 0x20	; 32
   1071e:	b5 cf       	rjmp	.-150    	; 0x1068a <dtoa_prf+0x60>
   10720:	2d 93       	st	X+, r18
   10722:	81 50       	subi	r24, 0x01	; 1
   10724:	81 11       	cpse	r24, r1
   10726:	fc cf       	rjmp	.-8      	; 0x10720 <dtoa_prf+0xf6>
   10728:	ce 0e       	add	r12, r30
   1072a:	d1 1c       	adc	r13, r1
   1072c:	e0 e0       	ldi	r30, 0x00	; 0
   1072e:	c1 cf       	rjmp	.-126    	; 0x106b2 <dtoa_prf+0x88>
   10730:	8e e6       	ldi	r24, 0x6E	; 110
   10732:	d6 01       	movw	r26, r12
   10734:	8c 93       	st	X, r24
   10736:	91 e6       	ldi	r25, 0x61	; 97
   10738:	cc cf       	rjmp	.-104    	; 0x106d2 <dtoa_prf+0xa8>
   1073a:	9d 93       	st	X+, r25
   1073c:	81 50       	subi	r24, 0x01	; 1
   1073e:	d1 cf       	rjmp	.-94     	; 0x106e2 <dtoa_prf+0xb8>
   10740:	48 2f       	mov	r20, r24
   10742:	44 70       	andi	r20, 0x04	; 4
   10744:	82 ff       	sbrs	r24, 2
   10746:	3d c0       	rjmp	.+122    	; 0x107c2 <dtoa_prf+0x198>
   10748:	84 e0       	ldi	r24, 0x04	; 4
   1074a:	91 11       	cpse	r25, r1
   1074c:	01 c0       	rjmp	.+2      	; 0x10750 <dtoa_prf+0x126>
   1074e:	83 e0       	ldi	r24, 0x03	; 3
   10750:	8f 15       	cp	r24, r15
   10752:	10 f4       	brcc	.+4      	; 0x10758 <dtoa_prf+0x12e>
   10754:	ef 2d       	mov	r30, r15
   10756:	e8 1b       	sub	r30, r24
   10758:	d6 01       	movw	r26, r12
   1075a:	8e 2f       	mov	r24, r30
   1075c:	20 e2       	ldi	r18, 0x20	; 32
   1075e:	55 23       	and	r21, r21
   10760:	09 f1       	breq	.+66     	; 0x107a4 <dtoa_prf+0x17a>
   10762:	99 23       	and	r25, r25
   10764:	29 f0       	breq	.+10     	; 0x10770 <dtoa_prf+0x146>
   10766:	d6 01       	movw	r26, r12
   10768:	9c 93       	st	X, r25
   1076a:	c6 01       	movw	r24, r12
   1076c:	01 96       	adiw	r24, 0x01	; 1
   1076e:	6c 01       	movw	r12, r24
   10770:	96 01       	movw	r18, r12
   10772:	2d 5f       	subi	r18, 0xFD	; 253
   10774:	3f 4f       	sbci	r19, 0xFF	; 255
   10776:	e2 fe       	sbrs	r14, 2
   10778:	1b c0       	rjmp	.+54     	; 0x107b0 <dtoa_prf+0x186>
   1077a:	89 e4       	ldi	r24, 0x49	; 73
   1077c:	d6 01       	movw	r26, r12
   1077e:	8c 93       	st	X, r24
   10780:	8e e4       	ldi	r24, 0x4E	; 78
   10782:	11 96       	adiw	r26, 0x01	; 1
   10784:	8c 93       	st	X, r24
   10786:	11 97       	sbiw	r26, 0x01	; 1
   10788:	86 e4       	ldi	r24, 0x46	; 70
   1078a:	12 96       	adiw	r26, 0x02	; 2
   1078c:	8c 93       	st	X, r24
   1078e:	d9 01       	movw	r26, r18
   10790:	8e 2f       	mov	r24, r30
   10792:	90 e2       	ldi	r25, 0x20	; 32
   10794:	88 23       	and	r24, r24
   10796:	09 f4       	brne	.+2      	; 0x1079a <dtoa_prf+0x170>
   10798:	a6 cf       	rjmp	.-180    	; 0x106e6 <dtoa_prf+0xbc>
   1079a:	9d 93       	st	X+, r25
   1079c:	81 50       	subi	r24, 0x01	; 1
   1079e:	fa cf       	rjmp	.-12     	; 0x10794 <dtoa_prf+0x16a>
   107a0:	2d 93       	st	X+, r18
   107a2:	81 50       	subi	r24, 0x01	; 1
   107a4:	81 11       	cpse	r24, r1
   107a6:	fc cf       	rjmp	.-8      	; 0x107a0 <dtoa_prf+0x176>
   107a8:	ce 0e       	add	r12, r30
   107aa:	d1 1c       	adc	r13, r1
   107ac:	e0 e0       	ldi	r30, 0x00	; 0
   107ae:	d9 cf       	rjmp	.-78     	; 0x10762 <dtoa_prf+0x138>
   107b0:	89 e6       	ldi	r24, 0x69	; 105
   107b2:	d6 01       	movw	r26, r12
   107b4:	8c 93       	st	X, r24
   107b6:	8e e6       	ldi	r24, 0x6E	; 110
   107b8:	11 96       	adiw	r26, 0x01	; 1
   107ba:	8c 93       	st	X, r24
   107bc:	11 97       	sbiw	r26, 0x01	; 1
   107be:	86 e6       	ldi	r24, 0x66	; 102
   107c0:	e4 cf       	rjmp	.-56     	; 0x1078a <dtoa_prf+0x160>
   107c2:	9b 01       	movw	r18, r22
   107c4:	77 ff       	sbrs	r23, 7
   107c6:	02 c0       	rjmp	.+4      	; 0x107cc <dtoa_prf+0x1a2>
   107c8:	30 e0       	ldi	r19, 0x00	; 0
   107ca:	20 e0       	ldi	r18, 0x00	; 0
   107cc:	a1 e0       	ldi	r26, 0x01	; 1
   107ce:	b0 e0       	ldi	r27, 0x00	; 0
   107d0:	91 11       	cpse	r25, r1
   107d2:	02 c0       	rjmp	.+4      	; 0x107d8 <dtoa_prf+0x1ae>
   107d4:	b0 e0       	ldi	r27, 0x00	; 0
   107d6:	a0 e0       	ldi	r26, 0x00	; 0
   107d8:	f9 01       	movw	r30, r18
   107da:	31 96       	adiw	r30, 0x01	; 1
   107dc:	ae 0f       	add	r26, r30
   107de:	bf 1f       	adc	r27, r31
   107e0:	8b 2c       	mov	r8, r11
   107e2:	91 2c       	mov	r9, r1
   107e4:	bb 20       	and	r11, r11
   107e6:	09 f4       	brne	.+2      	; 0x107ea <dtoa_prf+0x1c0>
   107e8:	61 c0       	rjmp	.+194    	; 0x108ac <dtoa_prf+0x282>
   107ea:	54 01       	movw	r10, r8
   107ec:	ef ef       	ldi	r30, 0xFF	; 255
   107ee:	ae 1a       	sub	r10, r30
   107f0:	be 0a       	sbc	r11, r30
   107f2:	aa 0d       	add	r26, r10
   107f4:	bb 1d       	adc	r27, r11
   107f6:	fa 16       	cp	r15, r26
   107f8:	1b 06       	cpc	r1, r27
   107fa:	19 f0       	breq	.+6      	; 0x10802 <dtoa_prf+0x1d8>
   107fc:	14 f0       	brlt	.+4      	; 0x10802 <dtoa_prf+0x1d8>
   107fe:	4f 2d       	mov	r20, r15
   10800:	4a 1b       	sub	r20, r26
   10802:	51 11       	cpse	r21, r1
   10804:	88 c0       	rjmp	.+272    	; 0x10916 <dtoa_prf+0x2ec>
   10806:	e3 fc       	sbrc	r14, 3
   10808:	59 c0       	rjmp	.+178    	; 0x108bc <dtoa_prf+0x292>
   1080a:	76 01       	movw	r14, r12
   1080c:	a4 2f       	mov	r26, r20
   1080e:	b0 e2       	ldi	r27, 0x20	; 32
   10810:	a1 11       	cpse	r26, r1
   10812:	4f c0       	rjmp	.+158    	; 0x108b2 <dtoa_prf+0x288>
   10814:	c4 0e       	add	r12, r20
   10816:	d1 1c       	adc	r13, r1
   10818:	99 23       	and	r25, r25
   1081a:	09 f4       	brne	.+2      	; 0x1081e <dtoa_prf+0x1f4>
   1081c:	5b c0       	rjmp	.+182    	; 0x108d4 <dtoa_prf+0x2aa>
   1081e:	40 e0       	ldi	r20, 0x00	; 0
   10820:	d6 01       	movw	r26, r12
   10822:	11 96       	adiw	r26, 0x01	; 1
   10824:	f6 01       	movw	r30, r12
   10826:	90 83       	st	Z, r25
   10828:	6d 01       	movw	r12, r26
   1082a:	55 23       	and	r21, r21
   1082c:	09 f4       	brne	.+2      	; 0x10830 <dtoa_prf+0x206>
   1082e:	48 c0       	rjmp	.+144    	; 0x108c0 <dtoa_prf+0x296>
   10830:	01 2f       	mov	r16, r17
   10832:	06 0f       	add	r16, r22
   10834:	9a 81       	ldd	r25, Y+2	; 0x02
   10836:	58 2f       	mov	r21, r24
   10838:	50 71       	andi	r21, 0x10	; 16
   1083a:	84 ff       	sbrs	r24, 4
   1083c:	03 c0       	rjmp	.+6      	; 0x10844 <dtoa_prf+0x21a>
   1083e:	91 33       	cpi	r25, 0x31	; 49
   10840:	09 f4       	brne	.+2      	; 0x10844 <dtoa_prf+0x21a>
   10842:	01 50       	subi	r16, 0x01	; 1
   10844:	10 16       	cp	r1, r16
   10846:	0c f0       	brlt	.+2      	; 0x1084a <dtoa_prf+0x220>
   10848:	47 c0       	rjmp	.+142    	; 0x108d8 <dtoa_prf+0x2ae>
   1084a:	09 30       	cpi	r16, 0x09	; 9
   1084c:	08 f0       	brcs	.+2      	; 0x10850 <dtoa_prf+0x226>
   1084e:	08 e0       	ldi	r16, 0x08	; 8
   10850:	ee e2       	ldi	r30, 0x2E	; 46
   10852:	fe 2e       	mov	r15, r30
   10854:	5b 01       	movw	r10, r22
   10856:	a0 1a       	sub	r10, r16
   10858:	b1 08       	sbc	r11, r1
   1085a:	85 01       	movw	r16, r10
   1085c:	91 94       	neg	r9
   1085e:	81 94       	neg	r8
   10860:	91 08       	sbc	r9, r1
   10862:	2f 3f       	cpi	r18, 0xFF	; 255
   10864:	32 07       	cpc	r19, r18
   10866:	29 f4       	brne	.+10     	; 0x10872 <dtoa_prf+0x248>
   10868:	d6 01       	movw	r26, r12
   1086a:	fc 92       	st	X, r15
   1086c:	f6 01       	movw	r30, r12
   1086e:	31 96       	adiw	r30, 0x01	; 1
   10870:	6f 01       	movw	r12, r30
   10872:	62 17       	cp	r22, r18
   10874:	73 07       	cpc	r23, r19
   10876:	94 f1       	brlt	.+100    	; 0x108dc <dtoa_prf+0x2b2>
   10878:	02 17       	cp	r16, r18
   1087a:	13 07       	cpc	r17, r19
   1087c:	7c f5       	brge	.+94     	; 0x108dc <dtoa_prf+0x2b2>
   1087e:	db 01       	movw	r26, r22
   10880:	a2 1b       	sub	r26, r18
   10882:	b3 0b       	sbc	r27, r19
   10884:	aa 24       	eor	r10, r10
   10886:	a3 94       	inc	r10
   10888:	b1 2c       	mov	r11, r1
   1088a:	ac 0e       	add	r10, r28
   1088c:	bd 1e       	adc	r11, r29
   1088e:	aa 0d       	add	r26, r10
   10890:	bb 1d       	adc	r27, r11
   10892:	11 96       	adiw	r26, 0x01	; 1
   10894:	8c 91       	ld	r24, X
   10896:	21 50       	subi	r18, 0x01	; 1
   10898:	31 09       	sbc	r19, r1
   1089a:	d6 01       	movw	r26, r12
   1089c:	11 96       	adiw	r26, 0x01	; 1
   1089e:	28 15       	cp	r18, r8
   108a0:	39 05       	cpc	r19, r9
   108a2:	f4 f0       	brlt	.+60     	; 0x108e0 <dtoa_prf+0x2b6>
   108a4:	f6 01       	movw	r30, r12
   108a6:	80 83       	st	Z, r24
   108a8:	6d 01       	movw	r12, r26
   108aa:	db cf       	rjmp	.-74     	; 0x10862 <dtoa_prf+0x238>
   108ac:	b1 2c       	mov	r11, r1
   108ae:	a1 2c       	mov	r10, r1
   108b0:	a0 cf       	rjmp	.-192    	; 0x107f2 <dtoa_prf+0x1c8>
   108b2:	f7 01       	movw	r30, r14
   108b4:	b1 93       	st	Z+, r27
   108b6:	7f 01       	movw	r14, r30
   108b8:	a1 50       	subi	r26, 0x01	; 1
   108ba:	aa cf       	rjmp	.-172    	; 0x10810 <dtoa_prf+0x1e6>
   108bc:	91 11       	cpse	r25, r1
   108be:	b0 cf       	rjmp	.-160    	; 0x10820 <dtoa_prf+0x1f6>
   108c0:	d6 01       	movw	r26, r12
   108c2:	94 2f       	mov	r25, r20
   108c4:	50 e3       	ldi	r21, 0x30	; 48
   108c6:	02 c0       	rjmp	.+4      	; 0x108cc <dtoa_prf+0x2a2>
   108c8:	5d 93       	st	X+, r21
   108ca:	91 50       	subi	r25, 0x01	; 1
   108cc:	91 11       	cpse	r25, r1
   108ce:	fc cf       	rjmp	.-8      	; 0x108c8 <dtoa_prf+0x29e>
   108d0:	c4 0e       	add	r12, r20
   108d2:	d1 1c       	adc	r13, r1
   108d4:	40 e0       	ldi	r20, 0x00	; 0
   108d6:	ac cf       	rjmp	.-168    	; 0x10830 <dtoa_prf+0x206>
   108d8:	01 e0       	ldi	r16, 0x01	; 1
   108da:	ba cf       	rjmp	.-140    	; 0x10850 <dtoa_prf+0x226>
   108dc:	80 e3       	ldi	r24, 0x30	; 48
   108de:	db cf       	rjmp	.-74     	; 0x10896 <dtoa_prf+0x26c>
   108e0:	62 17       	cp	r22, r18
   108e2:	73 07       	cpc	r23, r19
   108e4:	31 f4       	brne	.+12     	; 0x108f2 <dtoa_prf+0x2c8>
   108e6:	96 33       	cpi	r25, 0x36	; 54
   108e8:	88 f4       	brcc	.+34     	; 0x1090c <dtoa_prf+0x2e2>
   108ea:	95 33       	cpi	r25, 0x35	; 53
   108ec:	11 f4       	brne	.+4      	; 0x108f2 <dtoa_prf+0x2c8>
   108ee:	55 23       	and	r21, r21
   108f0:	69 f0       	breq	.+26     	; 0x1090c <dtoa_prf+0x2e2>
   108f2:	f6 01       	movw	r30, r12
   108f4:	80 83       	st	Z, r24
   108f6:	fd 01       	movw	r30, r26
   108f8:	84 2f       	mov	r24, r20
   108fa:	90 e2       	ldi	r25, 0x20	; 32
   108fc:	81 11       	cpse	r24, r1
   108fe:	08 c0       	rjmp	.+16     	; 0x10910 <dtoa_prf+0x2e6>
   10900:	a4 0f       	add	r26, r20
   10902:	b1 1d       	adc	r27, r1
   10904:	1c 92       	st	X, r1
   10906:	90 e0       	ldi	r25, 0x00	; 0
   10908:	80 e0       	ldi	r24, 0x00	; 0
   1090a:	f3 ce       	rjmp	.-538    	; 0x106f2 <dtoa_prf+0xc8>
   1090c:	81 e3       	ldi	r24, 0x31	; 49
   1090e:	f1 cf       	rjmp	.-30     	; 0x108f2 <dtoa_prf+0x2c8>
   10910:	91 93       	st	Z+, r25
   10912:	81 50       	subi	r24, 0x01	; 1
   10914:	f3 cf       	rjmp	.-26     	; 0x108fc <dtoa_prf+0x2d2>
   10916:	91 11       	cpse	r25, r1
   10918:	83 cf       	rjmp	.-250    	; 0x10820 <dtoa_prf+0x1f6>
   1091a:	8a cf       	rjmp	.-236    	; 0x10830 <dtoa_prf+0x206>

0001091c <malloc>:
malloc():
   1091c:	0f 93       	push	r16
   1091e:	1f 93       	push	r17
   10920:	cf 93       	push	r28
   10922:	df 93       	push	r29
   10924:	82 30       	cpi	r24, 0x02	; 2
   10926:	91 05       	cpc	r25, r1
   10928:	10 f4       	brcc	.+4      	; 0x1092e <malloc+0x12>
   1092a:	82 e0       	ldi	r24, 0x02	; 2
   1092c:	90 e0       	ldi	r25, 0x00	; 0
   1092e:	e0 91 26 16 	lds	r30, 0x1626	; 0x801626 <__flp>
   10932:	f0 91 27 16 	lds	r31, 0x1627	; 0x801627 <__flp+0x1>
   10936:	30 e0       	ldi	r19, 0x00	; 0
   10938:	20 e0       	ldi	r18, 0x00	; 0
   1093a:	b0 e0       	ldi	r27, 0x00	; 0
   1093c:	a0 e0       	ldi	r26, 0x00	; 0
   1093e:	30 97       	sbiw	r30, 0x00	; 0
   10940:	99 f4       	brne	.+38     	; 0x10968 <malloc+0x4c>
   10942:	21 15       	cp	r18, r1
   10944:	31 05       	cpc	r19, r1
   10946:	09 f4       	brne	.+2      	; 0x1094a <malloc+0x2e>
   10948:	4a c0       	rjmp	.+148    	; 0x109de <malloc+0xc2>
   1094a:	28 1b       	sub	r18, r24
   1094c:	39 0b       	sbc	r19, r25
   1094e:	24 30       	cpi	r18, 0x04	; 4
   10950:	31 05       	cpc	r19, r1
   10952:	d8 f5       	brcc	.+118    	; 0x109ca <malloc+0xae>
   10954:	8a 81       	ldd	r24, Y+2	; 0x02
   10956:	9b 81       	ldd	r25, Y+3	; 0x03
   10958:	61 15       	cp	r22, r1
   1095a:	71 05       	cpc	r23, r1
   1095c:	89 f1       	breq	.+98     	; 0x109c0 <malloc+0xa4>
   1095e:	fb 01       	movw	r30, r22
   10960:	93 83       	std	Z+3, r25	; 0x03
   10962:	82 83       	std	Z+2, r24	; 0x02
   10964:	fe 01       	movw	r30, r28
   10966:	11 c0       	rjmp	.+34     	; 0x1098a <malloc+0x6e>
   10968:	40 81       	ld	r20, Z
   1096a:	51 81       	ldd	r21, Z+1	; 0x01
   1096c:	02 81       	ldd	r16, Z+2	; 0x02
   1096e:	13 81       	ldd	r17, Z+3	; 0x03
   10970:	48 17       	cp	r20, r24
   10972:	59 07       	cpc	r21, r25
   10974:	e0 f0       	brcs	.+56     	; 0x109ae <malloc+0x92>
   10976:	48 17       	cp	r20, r24
   10978:	59 07       	cpc	r21, r25
   1097a:	99 f4       	brne	.+38     	; 0x109a2 <malloc+0x86>
   1097c:	10 97       	sbiw	r26, 0x00	; 0
   1097e:	61 f0       	breq	.+24     	; 0x10998 <malloc+0x7c>
   10980:	12 96       	adiw	r26, 0x02	; 2
   10982:	0c 93       	st	X, r16
   10984:	12 97       	sbiw	r26, 0x02	; 2
   10986:	13 96       	adiw	r26, 0x03	; 3
   10988:	1c 93       	st	X, r17
   1098a:	32 96       	adiw	r30, 0x02	; 2
   1098c:	cf 01       	movw	r24, r30
   1098e:	df 91       	pop	r29
   10990:	cf 91       	pop	r28
   10992:	1f 91       	pop	r17
   10994:	0f 91       	pop	r16
   10996:	08 95       	ret
   10998:	00 93 26 16 	sts	0x1626, r16	; 0x801626 <__flp>
   1099c:	10 93 27 16 	sts	0x1627, r17	; 0x801627 <__flp+0x1>
   109a0:	f4 cf       	rjmp	.-24     	; 0x1098a <malloc+0x6e>
   109a2:	21 15       	cp	r18, r1
   109a4:	31 05       	cpc	r19, r1
   109a6:	51 f0       	breq	.+20     	; 0x109bc <malloc+0xa0>
   109a8:	42 17       	cp	r20, r18
   109aa:	53 07       	cpc	r21, r19
   109ac:	38 f0       	brcs	.+14     	; 0x109bc <malloc+0xa0>
   109ae:	a9 01       	movw	r20, r18
   109b0:	db 01       	movw	r26, r22
   109b2:	9a 01       	movw	r18, r20
   109b4:	bd 01       	movw	r22, r26
   109b6:	df 01       	movw	r26, r30
   109b8:	f8 01       	movw	r30, r16
   109ba:	c1 cf       	rjmp	.-126    	; 0x1093e <malloc+0x22>
   109bc:	ef 01       	movw	r28, r30
   109be:	f9 cf       	rjmp	.-14     	; 0x109b2 <malloc+0x96>
   109c0:	90 93 27 16 	sts	0x1627, r25	; 0x801627 <__flp+0x1>
   109c4:	80 93 26 16 	sts	0x1626, r24	; 0x801626 <__flp>
   109c8:	cd cf       	rjmp	.-102    	; 0x10964 <malloc+0x48>
   109ca:	fe 01       	movw	r30, r28
   109cc:	e2 0f       	add	r30, r18
   109ce:	f3 1f       	adc	r31, r19
   109d0:	81 93       	st	Z+, r24
   109d2:	91 93       	st	Z+, r25
   109d4:	22 50       	subi	r18, 0x02	; 2
   109d6:	31 09       	sbc	r19, r1
   109d8:	39 83       	std	Y+1, r19	; 0x01
   109da:	28 83       	st	Y, r18
   109dc:	d7 cf       	rjmp	.-82     	; 0x1098c <malloc+0x70>
   109de:	20 91 24 16 	lds	r18, 0x1624	; 0x801624 <__brkval>
   109e2:	30 91 25 16 	lds	r19, 0x1625	; 0x801625 <__brkval+0x1>
   109e6:	23 2b       	or	r18, r19
   109e8:	41 f4       	brne	.+16     	; 0x109fa <malloc+0xde>
   109ea:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <__malloc_heap_start>
   109ee:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <__malloc_heap_start+0x1>
   109f2:	30 93 25 16 	sts	0x1625, r19	; 0x801625 <__brkval+0x1>
   109f6:	20 93 24 16 	sts	0x1624, r18	; 0x801624 <__brkval>
   109fa:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <__malloc_heap_end>
   109fe:	30 91 11 02 	lds	r19, 0x0211	; 0x800211 <__malloc_heap_end+0x1>
   10a02:	21 15       	cp	r18, r1
   10a04:	31 05       	cpc	r19, r1
   10a06:	41 f4       	brne	.+16     	; 0x10a18 <malloc+0xfc>
   10a08:	2d b7       	in	r18, 0x3d	; 61
   10a0a:	3e b7       	in	r19, 0x3e	; 62
   10a0c:	40 91 14 02 	lds	r20, 0x0214	; 0x800214 <__malloc_margin>
   10a10:	50 91 15 02 	lds	r21, 0x0215	; 0x800215 <__malloc_margin+0x1>
   10a14:	24 1b       	sub	r18, r20
   10a16:	35 0b       	sbc	r19, r21
   10a18:	e0 91 24 16 	lds	r30, 0x1624	; 0x801624 <__brkval>
   10a1c:	f0 91 25 16 	lds	r31, 0x1625	; 0x801625 <__brkval+0x1>
   10a20:	e2 17       	cp	r30, r18
   10a22:	f3 07       	cpc	r31, r19
   10a24:	a0 f4       	brcc	.+40     	; 0x10a4e <malloc+0x132>
   10a26:	2e 1b       	sub	r18, r30
   10a28:	3f 0b       	sbc	r19, r31
   10a2a:	28 17       	cp	r18, r24
   10a2c:	39 07       	cpc	r19, r25
   10a2e:	78 f0       	brcs	.+30     	; 0x10a4e <malloc+0x132>
   10a30:	ac 01       	movw	r20, r24
   10a32:	4e 5f       	subi	r20, 0xFE	; 254
   10a34:	5f 4f       	sbci	r21, 0xFF	; 255
   10a36:	24 17       	cp	r18, r20
   10a38:	35 07       	cpc	r19, r21
   10a3a:	48 f0       	brcs	.+18     	; 0x10a4e <malloc+0x132>
   10a3c:	4e 0f       	add	r20, r30
   10a3e:	5f 1f       	adc	r21, r31
   10a40:	50 93 25 16 	sts	0x1625, r21	; 0x801625 <__brkval+0x1>
   10a44:	40 93 24 16 	sts	0x1624, r20	; 0x801624 <__brkval>
   10a48:	81 93       	st	Z+, r24
   10a4a:	91 93       	st	Z+, r25
   10a4c:	9f cf       	rjmp	.-194    	; 0x1098c <malloc+0x70>
   10a4e:	f0 e0       	ldi	r31, 0x00	; 0
   10a50:	e0 e0       	ldi	r30, 0x00	; 0
   10a52:	9c cf       	rjmp	.-200    	; 0x1098c <malloc+0x70>

00010a54 <free>:
free():
   10a54:	cf 93       	push	r28
   10a56:	df 93       	push	r29
   10a58:	00 97       	sbiw	r24, 0x00	; 0
   10a5a:	e9 f0       	breq	.+58     	; 0x10a96 <free+0x42>
   10a5c:	fc 01       	movw	r30, r24
   10a5e:	32 97       	sbiw	r30, 0x02	; 2
   10a60:	13 82       	std	Z+3, r1	; 0x03
   10a62:	12 82       	std	Z+2, r1	; 0x02
   10a64:	a0 91 26 16 	lds	r26, 0x1626	; 0x801626 <__flp>
   10a68:	b0 91 27 16 	lds	r27, 0x1627	; 0x801627 <__flp+0x1>
   10a6c:	ed 01       	movw	r28, r26
   10a6e:	30 e0       	ldi	r19, 0x00	; 0
   10a70:	20 e0       	ldi	r18, 0x00	; 0
   10a72:	10 97       	sbiw	r26, 0x00	; 0
   10a74:	a1 f4       	brne	.+40     	; 0x10a9e <free+0x4a>
   10a76:	20 81       	ld	r18, Z
   10a78:	31 81       	ldd	r19, Z+1	; 0x01
   10a7a:	82 0f       	add	r24, r18
   10a7c:	93 1f       	adc	r25, r19
   10a7e:	20 91 24 16 	lds	r18, 0x1624	; 0x801624 <__brkval>
   10a82:	30 91 25 16 	lds	r19, 0x1625	; 0x801625 <__brkval+0x1>
   10a86:	28 17       	cp	r18, r24
   10a88:	39 07       	cpc	r19, r25
   10a8a:	09 f0       	breq	.+2      	; 0x10a8e <free+0x3a>
   10a8c:	61 c0       	rjmp	.+194    	; 0x10b50 <free+0xfc>
   10a8e:	f0 93 25 16 	sts	0x1625, r31	; 0x801625 <__brkval+0x1>
   10a92:	e0 93 24 16 	sts	0x1624, r30	; 0x801624 <__brkval>
   10a96:	df 91       	pop	r29
   10a98:	cf 91       	pop	r28
   10a9a:	08 95       	ret
   10a9c:	ea 01       	movw	r28, r20
   10a9e:	ce 17       	cp	r28, r30
   10aa0:	df 07       	cpc	r29, r31
   10aa2:	e8 f5       	brcc	.+122    	; 0x10b1e <free+0xca>
   10aa4:	4a 81       	ldd	r20, Y+2	; 0x02
   10aa6:	5b 81       	ldd	r21, Y+3	; 0x03
   10aa8:	9e 01       	movw	r18, r28
   10aaa:	41 15       	cp	r20, r1
   10aac:	51 05       	cpc	r21, r1
   10aae:	b1 f7       	brne	.-20     	; 0x10a9c <free+0x48>
   10ab0:	e9 01       	movw	r28, r18
   10ab2:	fb 83       	std	Y+3, r31	; 0x03
   10ab4:	ea 83       	std	Y+2, r30	; 0x02
   10ab6:	49 91       	ld	r20, Y+
   10ab8:	59 91       	ld	r21, Y+
   10aba:	c4 0f       	add	r28, r20
   10abc:	d5 1f       	adc	r29, r21
   10abe:	ec 17       	cp	r30, r28
   10ac0:	fd 07       	cpc	r31, r29
   10ac2:	61 f4       	brne	.+24     	; 0x10adc <free+0x88>
   10ac4:	80 81       	ld	r24, Z
   10ac6:	91 81       	ldd	r25, Z+1	; 0x01
   10ac8:	02 96       	adiw	r24, 0x02	; 2
   10aca:	84 0f       	add	r24, r20
   10acc:	95 1f       	adc	r25, r21
   10ace:	e9 01       	movw	r28, r18
   10ad0:	99 83       	std	Y+1, r25	; 0x01
   10ad2:	88 83       	st	Y, r24
   10ad4:	82 81       	ldd	r24, Z+2	; 0x02
   10ad6:	93 81       	ldd	r25, Z+3	; 0x03
   10ad8:	9b 83       	std	Y+3, r25	; 0x03
   10ada:	8a 83       	std	Y+2, r24	; 0x02
   10adc:	f0 e0       	ldi	r31, 0x00	; 0
   10ade:	e0 e0       	ldi	r30, 0x00	; 0
   10ae0:	12 96       	adiw	r26, 0x02	; 2
   10ae2:	8d 91       	ld	r24, X+
   10ae4:	9c 91       	ld	r25, X
   10ae6:	13 97       	sbiw	r26, 0x03	; 3
   10ae8:	00 97       	sbiw	r24, 0x00	; 0
   10aea:	b9 f5       	brne	.+110    	; 0x10b5a <free+0x106>
   10aec:	2d 91       	ld	r18, X+
   10aee:	3c 91       	ld	r19, X
   10af0:	11 97       	sbiw	r26, 0x01	; 1
   10af2:	cd 01       	movw	r24, r26
   10af4:	02 96       	adiw	r24, 0x02	; 2
   10af6:	82 0f       	add	r24, r18
   10af8:	93 1f       	adc	r25, r19
   10afa:	20 91 24 16 	lds	r18, 0x1624	; 0x801624 <__brkval>
   10afe:	30 91 25 16 	lds	r19, 0x1625	; 0x801625 <__brkval+0x1>
   10b02:	28 17       	cp	r18, r24
   10b04:	39 07       	cpc	r19, r25
   10b06:	39 f6       	brne	.-114    	; 0x10a96 <free+0x42>
   10b08:	30 97       	sbiw	r30, 0x00	; 0
   10b0a:	51 f5       	brne	.+84     	; 0x10b60 <free+0x10c>
   10b0c:	10 92 27 16 	sts	0x1627, r1	; 0x801627 <__flp+0x1>
   10b10:	10 92 26 16 	sts	0x1626, r1	; 0x801626 <__flp>
   10b14:	b0 93 25 16 	sts	0x1625, r27	; 0x801625 <__brkval+0x1>
   10b18:	a0 93 24 16 	sts	0x1624, r26	; 0x801624 <__brkval>
   10b1c:	bc cf       	rjmp	.-136    	; 0x10a96 <free+0x42>
   10b1e:	d3 83       	std	Z+3, r29	; 0x03
   10b20:	c2 83       	std	Z+2, r28	; 0x02
   10b22:	40 81       	ld	r20, Z
   10b24:	51 81       	ldd	r21, Z+1	; 0x01
   10b26:	84 0f       	add	r24, r20
   10b28:	95 1f       	adc	r25, r21
   10b2a:	c8 17       	cp	r28, r24
   10b2c:	d9 07       	cpc	r29, r25
   10b2e:	61 f4       	brne	.+24     	; 0x10b48 <free+0xf4>
   10b30:	4e 5f       	subi	r20, 0xFE	; 254
   10b32:	5f 4f       	sbci	r21, 0xFF	; 255
   10b34:	88 81       	ld	r24, Y
   10b36:	99 81       	ldd	r25, Y+1	; 0x01
   10b38:	48 0f       	add	r20, r24
   10b3a:	59 1f       	adc	r21, r25
   10b3c:	51 83       	std	Z+1, r21	; 0x01
   10b3e:	40 83       	st	Z, r20
   10b40:	8a 81       	ldd	r24, Y+2	; 0x02
   10b42:	9b 81       	ldd	r25, Y+3	; 0x03
   10b44:	93 83       	std	Z+3, r25	; 0x03
   10b46:	82 83       	std	Z+2, r24	; 0x02
   10b48:	21 15       	cp	r18, r1
   10b4a:	31 05       	cpc	r19, r1
   10b4c:	09 f0       	breq	.+2      	; 0x10b50 <free+0xfc>
   10b4e:	b0 cf       	rjmp	.-160    	; 0x10ab0 <free+0x5c>
   10b50:	f0 93 27 16 	sts	0x1627, r31	; 0x801627 <__flp+0x1>
   10b54:	e0 93 26 16 	sts	0x1626, r30	; 0x801626 <__flp>
   10b58:	9e cf       	rjmp	.-196    	; 0x10a96 <free+0x42>
   10b5a:	fd 01       	movw	r30, r26
   10b5c:	dc 01       	movw	r26, r24
   10b5e:	c0 cf       	rjmp	.-128    	; 0x10ae0 <free+0x8c>
   10b60:	13 82       	std	Z+3, r1	; 0x03
   10b62:	12 82       	std	Z+2, r1	; 0x02
   10b64:	d7 cf       	rjmp	.-82     	; 0x10b14 <free+0xc0>

00010b66 <strtod>:
strtod():
   10b66:	8f 92       	push	r8
   10b68:	9f 92       	push	r9
   10b6a:	af 92       	push	r10
   10b6c:	bf 92       	push	r11
   10b6e:	cf 92       	push	r12
   10b70:	df 92       	push	r13
   10b72:	ef 92       	push	r14
   10b74:	ff 92       	push	r15
   10b76:	0f 93       	push	r16
   10b78:	1f 93       	push	r17
   10b7a:	cf 93       	push	r28
   10b7c:	df 93       	push	r29
   10b7e:	5c 01       	movw	r10, r24
   10b80:	7b 01       	movw	r14, r22
   10b82:	61 15       	cp	r22, r1
   10b84:	71 05       	cpc	r23, r1
   10b86:	19 f0       	breq	.+6      	; 0x10b8e <strtod+0x28>
   10b88:	db 01       	movw	r26, r22
   10b8a:	8d 93       	st	X+, r24
   10b8c:	9c 93       	st	X, r25
   10b8e:	85 01       	movw	r16, r10
   10b90:	0f 5f       	subi	r16, 0xFF	; 255
   10b92:	1f 4f       	sbci	r17, 0xFF	; 255
   10b94:	f5 01       	movw	r30, r10
   10b96:	d0 81       	ld	r29, Z
   10b98:	8d 2f       	mov	r24, r29
   10b9a:	90 e0       	ldi	r25, 0x00	; 0
   10b9c:	0e 94 2e 80 	call	0x1005c	; 0x1005c <isspace>
   10ba0:	6c 01       	movw	r12, r24
   10ba2:	89 2b       	or	r24, r25
   10ba4:	b9 f5       	brne	.+110    	; 0x10c14 <strtod+0xae>
   10ba6:	dd 32       	cpi	r29, 0x2D	; 45
   10ba8:	b9 f5       	brne	.+110    	; 0x10c18 <strtod+0xb2>
   10baa:	0f 5f       	subi	r16, 0xFF	; 255
   10bac:	1f 4f       	sbci	r17, 0xFF	; 255
   10bae:	d5 01       	movw	r26, r10
   10bb0:	11 96       	adiw	r26, 0x01	; 1
   10bb2:	dc 91       	ld	r29, X
   10bb4:	c1 e0       	ldi	r28, 0x01	; 1
   10bb6:	58 01       	movw	r10, r16
   10bb8:	f1 e0       	ldi	r31, 0x01	; 1
   10bba:	af 1a       	sub	r10, r31
   10bbc:	b1 08       	sbc	r11, r1
   10bbe:	43 e0       	ldi	r20, 0x03	; 3
   10bc0:	50 e0       	ldi	r21, 0x00	; 0
   10bc2:	6c e4       	ldi	r22, 0x4C	; 76
   10bc4:	72 e0       	ldi	r23, 0x02	; 2
   10bc6:	c5 01       	movw	r24, r10
   10bc8:	0e 94 ec 87 	call	0x10fd8	; 0x10fd8 <strncasecmp_P>
   10bcc:	89 2b       	or	r24, r25
   10bce:	69 f5       	brne	.+90     	; 0x10c2a <strtod+0xc4>
   10bd0:	68 01       	movw	r12, r16
   10bd2:	82 e0       	ldi	r24, 0x02	; 2
   10bd4:	c8 0e       	add	r12, r24
   10bd6:	d1 1c       	adc	r13, r1
   10bd8:	45 e0       	ldi	r20, 0x05	; 5
   10bda:	50 e0       	ldi	r21, 0x00	; 0
   10bdc:	67 e4       	ldi	r22, 0x47	; 71
   10bde:	72 e0       	ldi	r23, 0x02	; 2
   10be0:	c6 01       	movw	r24, r12
   10be2:	0e 94 ec 87 	call	0x10fd8	; 0x10fd8 <strncasecmp_P>
   10be6:	89 2b       	or	r24, r25
   10be8:	21 f4       	brne	.+8      	; 0x10bf2 <strtod+0x8c>
   10bea:	68 01       	movw	r12, r16
   10bec:	97 e0       	ldi	r25, 0x07	; 7
   10bee:	c9 0e       	add	r12, r25
   10bf0:	d1 1c       	adc	r13, r1
   10bf2:	e1 14       	cp	r14, r1
   10bf4:	f1 04       	cpc	r15, r1
   10bf6:	19 f0       	breq	.+6      	; 0x10bfe <strtod+0x98>
   10bf8:	d7 01       	movw	r26, r14
   10bfa:	cd 92       	st	X+, r12
   10bfc:	dc 92       	st	X, r13
   10bfe:	60 e0       	ldi	r22, 0x00	; 0
   10c00:	70 e0       	ldi	r23, 0x00	; 0
   10c02:	80 e8       	ldi	r24, 0x80	; 128
   10c04:	9f ef       	ldi	r25, 0xFF	; 255
   10c06:	c1 11       	cpse	r28, r1
   10c08:	ff c0       	rjmp	.+510    	; 0x10e08 <strtod+0x2a2>
   10c0a:	60 e0       	ldi	r22, 0x00	; 0
   10c0c:	70 e0       	ldi	r23, 0x00	; 0
   10c0e:	80 e8       	ldi	r24, 0x80	; 128
   10c10:	9f e7       	ldi	r25, 0x7F	; 127
   10c12:	fa c0       	rjmp	.+500    	; 0x10e08 <strtod+0x2a2>
   10c14:	58 01       	movw	r10, r16
   10c16:	bb cf       	rjmp	.-138    	; 0x10b8e <strtod+0x28>
   10c18:	db 32       	cpi	r29, 0x2B	; 43
   10c1a:	29 f4       	brne	.+10     	; 0x10c26 <strtod+0xc0>
   10c1c:	85 01       	movw	r16, r10
   10c1e:	0e 5f       	subi	r16, 0xFE	; 254
   10c20:	1f 4f       	sbci	r17, 0xFF	; 255
   10c22:	f5 01       	movw	r30, r10
   10c24:	d1 81       	ldd	r29, Z+1	; 0x01
   10c26:	c0 e0       	ldi	r28, 0x00	; 0
   10c28:	c6 cf       	rjmp	.-116    	; 0x10bb6 <strtod+0x50>
   10c2a:	43 e0       	ldi	r20, 0x03	; 3
   10c2c:	50 e0       	ldi	r21, 0x00	; 0
   10c2e:	64 e4       	ldi	r22, 0x44	; 68
   10c30:	72 e0       	ldi	r23, 0x02	; 2
   10c32:	c5 01       	movw	r24, r10
   10c34:	0e 94 ec 87 	call	0x10fd8	; 0x10fd8 <strncasecmp_P>
   10c38:	89 2b       	or	r24, r25
   10c3a:	e9 f0       	breq	.+58     	; 0x10c76 <strtod+0x110>
   10c3c:	f8 01       	movw	r30, r16
   10c3e:	10 e0       	ldi	r17, 0x00	; 0
   10c40:	00 e0       	ldi	r16, 0x00	; 0
   10c42:	20 e0       	ldi	r18, 0x00	; 0
   10c44:	30 e0       	ldi	r19, 0x00	; 0
   10c46:	a9 01       	movw	r20, r18
   10c48:	5f 01       	movw	r10, r30
   10c4a:	b0 ed       	ldi	r27, 0xD0	; 208
   10c4c:	8b 2e       	mov	r8, r27
   10c4e:	8d 0e       	add	r8, r29
   10c50:	89 e0       	ldi	r24, 0x09	; 9
   10c52:	88 15       	cp	r24, r8
   10c54:	c8 f1       	brcs	.+114    	; 0x10cc8 <strtod+0x162>
   10c56:	9c 2e       	mov	r9, r28
   10c58:	68 94       	set
   10c5a:	91 f8       	bld	r9, 1
   10c5c:	8c 2f       	mov	r24, r28
   10c5e:	88 70       	andi	r24, 0x08	; 8
   10c60:	c2 ff       	sbrs	r28, 2
   10c62:	16 c0       	rjmp	.+44     	; 0x10c90 <strtod+0x12a>
   10c64:	81 11       	cpse	r24, r1
   10c66:	02 c0       	rjmp	.+4      	; 0x10c6c <strtod+0x106>
   10c68:	0f 5f       	subi	r16, 0xFF	; 255
   10c6a:	1f 4f       	sbci	r17, 0xFF	; 255
   10c6c:	31 96       	adiw	r30, 0x01	; 1
   10c6e:	d5 01       	movw	r26, r10
   10c70:	dc 91       	ld	r29, X
   10c72:	c9 2d       	mov	r28, r9
   10c74:	e9 cf       	rjmp	.-46     	; 0x10c48 <strtod+0xe2>
   10c76:	e1 14       	cp	r14, r1
   10c78:	f1 04       	cpc	r15, r1
   10c7a:	29 f0       	breq	.+10     	; 0x10c86 <strtod+0x120>
   10c7c:	0e 5f       	subi	r16, 0xFE	; 254
   10c7e:	1f 4f       	sbci	r17, 0xFF	; 255
   10c80:	f7 01       	movw	r30, r14
   10c82:	11 83       	std	Z+1, r17	; 0x01
   10c84:	00 83       	st	Z, r16
   10c86:	60 e0       	ldi	r22, 0x00	; 0
   10c88:	70 e0       	ldi	r23, 0x00	; 0
   10c8a:	80 ec       	ldi	r24, 0xC0	; 192
   10c8c:	9f e7       	ldi	r25, 0x7F	; 127
   10c8e:	bc c0       	rjmp	.+376    	; 0x10e08 <strtod+0x2a2>
   10c90:	88 23       	and	r24, r24
   10c92:	11 f0       	breq	.+4      	; 0x10c98 <strtod+0x132>
   10c94:	01 50       	subi	r16, 0x01	; 1
   10c96:	11 09       	sbc	r17, r1
   10c98:	a5 e0       	ldi	r26, 0x05	; 5
   10c9a:	b0 e0       	ldi	r27, 0x00	; 0
   10c9c:	0e 94 72 8a 	call	0x114e4	; 0x114e4 <__muluhisi3>
   10ca0:	9b 01       	movw	r18, r22
   10ca2:	ac 01       	movw	r20, r24
   10ca4:	22 0f       	add	r18, r18
   10ca6:	33 1f       	adc	r19, r19
   10ca8:	44 1f       	adc	r20, r20
   10caa:	55 1f       	adc	r21, r21
   10cac:	28 0d       	add	r18, r8
   10cae:	31 1d       	adc	r19, r1
   10cb0:	41 1d       	adc	r20, r1
   10cb2:	51 1d       	adc	r21, r1
   10cb4:	28 39       	cpi	r18, 0x98	; 152
   10cb6:	99 e9       	ldi	r25, 0x99	; 153
   10cb8:	39 07       	cpc	r19, r25
   10cba:	49 07       	cpc	r20, r25
   10cbc:	99 e1       	ldi	r25, 0x19	; 25
   10cbe:	59 07       	cpc	r21, r25
   10cc0:	a8 f2       	brcs	.-86     	; 0x10c6c <strtod+0x106>
   10cc2:	c6 60       	ori	r28, 0x06	; 6
   10cc4:	9c 2e       	mov	r9, r28
   10cc6:	d2 cf       	rjmp	.-92     	; 0x10c6c <strtod+0x106>
   10cc8:	ae ef       	ldi	r26, 0xFE	; 254
   10cca:	8a 12       	cpse	r8, r26
   10ccc:	06 c0       	rjmp	.+12     	; 0x10cda <strtod+0x174>
   10cce:	c3 fd       	sbrc	r28, 3
   10cd0:	3c c0       	rjmp	.+120    	; 0x10d4a <strtod+0x1e4>
   10cd2:	9c 2e       	mov	r9, r28
   10cd4:	68 94       	set
   10cd6:	93 f8       	bld	r9, 3
   10cd8:	c9 cf       	rjmp	.-110    	; 0x10c6c <strtod+0x106>
   10cda:	df 7d       	andi	r29, 0xDF	; 223
   10cdc:	d5 34       	cpi	r29, 0x45	; 69
   10cde:	a9 f5       	brne	.+106    	; 0x10d4a <strtod+0x1e4>
   10ce0:	80 81       	ld	r24, Z
   10ce2:	8d 32       	cpi	r24, 0x2D	; 45
   10ce4:	39 f4       	brne	.+14     	; 0x10cf4 <strtod+0x18e>
   10ce6:	c0 61       	ori	r28, 0x10	; 16
   10ce8:	df 01       	movw	r26, r30
   10cea:	12 96       	adiw	r26, 0x02	; 2
   10cec:	81 81       	ldd	r24, Z+1	; 0x01
   10cee:	62 e0       	ldi	r22, 0x02	; 2
   10cf0:	70 e0       	ldi	r23, 0x00	; 0
   10cf2:	06 c0       	rjmp	.+12     	; 0x10d00 <strtod+0x19a>
   10cf4:	df 01       	movw	r26, r30
   10cf6:	8b 32       	cpi	r24, 0x2B	; 43
   10cf8:	c1 f3       	breq	.-16     	; 0x10cea <strtod+0x184>
   10cfa:	11 96       	adiw	r26, 0x01	; 1
   10cfc:	61 e0       	ldi	r22, 0x01	; 1
   10cfe:	70 e0       	ldi	r23, 0x00	; 0
   10d00:	80 53       	subi	r24, 0x30	; 48
   10d02:	5d 01       	movw	r10, r26
   10d04:	a6 1a       	sub	r10, r22
   10d06:	b7 0a       	sbc	r11, r23
   10d08:	8a 30       	cpi	r24, 0x0A	; 10
   10d0a:	f8 f4       	brcc	.+62     	; 0x10d4a <strtod+0x1e4>
   10d0c:	e0 e8       	ldi	r30, 0x80	; 128
   10d0e:	ce 16       	cp	r12, r30
   10d10:	ec e0       	ldi	r30, 0x0C	; 12
   10d12:	de 06       	cpc	r13, r30
   10d14:	5c f4       	brge	.+22     	; 0x10d2c <strtod+0x1c6>
   10d16:	b6 01       	movw	r22, r12
   10d18:	66 0f       	add	r22, r22
   10d1a:	77 1f       	adc	r23, r23
   10d1c:	66 0f       	add	r22, r22
   10d1e:	77 1f       	adc	r23, r23
   10d20:	c6 0e       	add	r12, r22
   10d22:	d7 1e       	adc	r13, r23
   10d24:	cc 0c       	add	r12, r12
   10d26:	dd 1c       	adc	r13, r13
   10d28:	c8 0e       	add	r12, r24
   10d2a:	d1 1c       	adc	r13, r1
   10d2c:	5d 01       	movw	r10, r26
   10d2e:	ff ef       	ldi	r31, 0xFF	; 255
   10d30:	af 1a       	sub	r10, r31
   10d32:	bf 0a       	sbc	r11, r31
   10d34:	8c 91       	ld	r24, X
   10d36:	80 53       	subi	r24, 0x30	; 48
   10d38:	8a 30       	cpi	r24, 0x0A	; 10
   10d3a:	a8 f1       	brcs	.+106    	; 0x10da6 <strtod+0x240>
   10d3c:	c4 ff       	sbrs	r28, 4
   10d3e:	03 c0       	rjmp	.+6      	; 0x10d46 <strtod+0x1e0>
   10d40:	d1 94       	neg	r13
   10d42:	c1 94       	neg	r12
   10d44:	d1 08       	sbc	r13, r1
   10d46:	0c 0d       	add	r16, r12
   10d48:	1d 1d       	adc	r17, r13
   10d4a:	c1 ff       	sbrs	r28, 1
   10d4c:	09 c0       	rjmp	.+18     	; 0x10d60 <strtod+0x1fa>
   10d4e:	e1 14       	cp	r14, r1
   10d50:	f1 04       	cpc	r15, r1
   10d52:	31 f0       	breq	.+12     	; 0x10d60 <strtod+0x1fa>
   10d54:	81 e0       	ldi	r24, 0x01	; 1
   10d56:	a8 1a       	sub	r10, r24
   10d58:	b1 08       	sbc	r11, r1
   10d5a:	d7 01       	movw	r26, r14
   10d5c:	ad 92       	st	X+, r10
   10d5e:	bc 92       	st	X, r11
   10d60:	ca 01       	movw	r24, r20
   10d62:	b9 01       	movw	r22, r18
   10d64:	0e 94 c4 88 	call	0x11188	; 0x11188 <__floatunsisf>
   10d68:	c3 70       	andi	r28, 0x03	; 3
   10d6a:	c3 30       	cpi	r28, 0x03	; 3
   10d6c:	09 f4       	brne	.+2      	; 0x10d70 <strtod+0x20a>
   10d6e:	90 58       	subi	r25, 0x80	; 128
   10d70:	4b 01       	movw	r8, r22
   10d72:	5c 01       	movw	r10, r24
   10d74:	20 e0       	ldi	r18, 0x00	; 0
   10d76:	30 e0       	ldi	r19, 0x00	; 0
   10d78:	a9 01       	movw	r20, r18
   10d7a:	0e 94 bf 88 	call	0x1117e	; 0x1117e <__cmpsf2>
   10d7e:	88 23       	and	r24, r24
   10d80:	09 f4       	brne	.+2      	; 0x10d84 <strtod+0x21e>
   10d82:	40 c0       	rjmp	.+128    	; 0x10e04 <strtod+0x29e>
   10d84:	cb e7       	ldi	r28, 0x7B	; 123
   10d86:	d2 e0       	ldi	r29, 0x02	; 2
   10d88:	17 ff       	sbrs	r17, 7
   10d8a:	05 c0       	rjmp	.+10     	; 0x10d96 <strtod+0x230>
   10d8c:	11 95       	neg	r17
   10d8e:	01 95       	neg	r16
   10d90:	11 09       	sbc	r17, r1
   10d92:	c3 e6       	ldi	r28, 0x63	; 99
   10d94:	d2 e0       	ldi	r29, 0x02	; 2
   10d96:	6e 01       	movw	r12, r28
   10d98:	b8 e1       	ldi	r27, 0x18	; 24
   10d9a:	cb 1a       	sub	r12, r27
   10d9c:	d1 08       	sbc	r13, r1
   10d9e:	80 e2       	ldi	r24, 0x20	; 32
   10da0:	e8 2e       	mov	r14, r24
   10da2:	f1 2c       	mov	r15, r1
   10da4:	0f c0       	rjmp	.+30     	; 0x10dc4 <strtod+0x25e>
   10da6:	d5 01       	movw	r26, r10
   10da8:	b1 cf       	rjmp	.-158    	; 0x10d0c <strtod+0x1a6>
   10daa:	fe 01       	movw	r30, r28
   10dac:	25 91       	lpm	r18, Z+
   10dae:	35 91       	lpm	r19, Z+
   10db0:	45 91       	lpm	r20, Z+
   10db2:	54 91       	lpm	r21, Z
   10db4:	0e 19       	sub	r16, r14
   10db6:	1f 09       	sbc	r17, r15
   10db8:	c5 01       	movw	r24, r10
   10dba:	b4 01       	movw	r22, r8
   10dbc:	0e 94 25 89 	call	0x1124a	; 0x1124a <__mulsf3>
   10dc0:	4b 01       	movw	r8, r22
   10dc2:	5c 01       	movw	r10, r24
   10dc4:	d5 01       	movw	r26, r10
   10dc6:	c4 01       	movw	r24, r8
   10dc8:	0e 15       	cp	r16, r14
   10dca:	1f 05       	cpc	r17, r15
   10dcc:	74 f7       	brge	.-36     	; 0x10daa <strtod+0x244>
   10dce:	24 97       	sbiw	r28, 0x04	; 4
   10dd0:	f5 94       	asr	r15
   10dd2:	e7 94       	ror	r14
   10dd4:	cc 16       	cp	r12, r28
   10dd6:	dd 06       	cpc	r13, r29
   10dd8:	a9 f7       	brne	.-22     	; 0x10dc4 <strtod+0x25e>
   10dda:	8a 2f       	mov	r24, r26
   10ddc:	88 0f       	add	r24, r24
   10dde:	8b 2f       	mov	r24, r27
   10de0:	88 1f       	adc	r24, r24
   10de2:	8f 3f       	cpi	r24, 0xFF	; 255
   10de4:	49 f0       	breq	.+18     	; 0x10df8 <strtod+0x292>
   10de6:	20 e0       	ldi	r18, 0x00	; 0
   10de8:	30 e0       	ldi	r19, 0x00	; 0
   10dea:	a9 01       	movw	r20, r18
   10dec:	c5 01       	movw	r24, r10
   10dee:	b4 01       	movw	r22, r8
   10df0:	0e 94 bf 88 	call	0x1117e	; 0x1117e <__cmpsf2>
   10df4:	81 11       	cpse	r24, r1
   10df6:	06 c0       	rjmp	.+12     	; 0x10e04 <strtod+0x29e>
   10df8:	82 e2       	ldi	r24, 0x22	; 34
   10dfa:	90 e0       	ldi	r25, 0x00	; 0
   10dfc:	90 93 23 16 	sts	0x1623, r25	; 0x801623 <errno+0x1>
   10e00:	80 93 22 16 	sts	0x1622, r24	; 0x801622 <errno>
   10e04:	c5 01       	movw	r24, r10
   10e06:	b4 01       	movw	r22, r8
   10e08:	df 91       	pop	r29
   10e0a:	cf 91       	pop	r28
   10e0c:	1f 91       	pop	r17
   10e0e:	0f 91       	pop	r16
   10e10:	ff 90       	pop	r15
   10e12:	ef 90       	pop	r14
   10e14:	df 90       	pop	r13
   10e16:	cf 90       	pop	r12
   10e18:	bf 90       	pop	r11
   10e1a:	af 90       	pop	r10
   10e1c:	9f 90       	pop	r9
   10e1e:	8f 90       	pop	r8
   10e20:	08 95       	ret

00010e22 <__ftoa_engine>:
__ftoa_engine():
   10e22:	28 30       	cpi	r18, 0x08	; 8
   10e24:	08 f0       	brcs	.+2      	; 0x10e28 <__ftoa_engine+0x6>
   10e26:	27 e0       	ldi	r18, 0x07	; 7
   10e28:	33 27       	eor	r19, r19
   10e2a:	da 01       	movw	r26, r20
   10e2c:	99 0f       	add	r25, r25
   10e2e:	31 1d       	adc	r19, r1
   10e30:	87 fd       	sbrc	r24, 7
   10e32:	91 60       	ori	r25, 0x01	; 1
   10e34:	00 96       	adiw	r24, 0x00	; 0
   10e36:	61 05       	cpc	r22, r1
   10e38:	71 05       	cpc	r23, r1
   10e3a:	39 f4       	brne	.+14     	; 0x10e4a <__ftoa_engine+0x28>
   10e3c:	32 60       	ori	r19, 0x02	; 2
   10e3e:	2e 5f       	subi	r18, 0xFE	; 254
   10e40:	3d 93       	st	X+, r19
   10e42:	30 e3       	ldi	r19, 0x30	; 48
   10e44:	2a 95       	dec	r18
   10e46:	e1 f7       	brne	.-8      	; 0x10e40 <__ftoa_engine+0x1e>
   10e48:	08 95       	ret
   10e4a:	9f 3f       	cpi	r25, 0xFF	; 255
   10e4c:	30 f0       	brcs	.+12     	; 0x10e5a <__ftoa_engine+0x38>
   10e4e:	80 38       	cpi	r24, 0x80	; 128
   10e50:	71 05       	cpc	r23, r1
   10e52:	61 05       	cpc	r22, r1
   10e54:	09 f0       	breq	.+2      	; 0x10e58 <__ftoa_engine+0x36>
   10e56:	3c 5f       	subi	r19, 0xFC	; 252
   10e58:	3c 5f       	subi	r19, 0xFC	; 252
   10e5a:	3d 93       	st	X+, r19
   10e5c:	91 30       	cpi	r25, 0x01	; 1
   10e5e:	08 f0       	brcs	.+2      	; 0x10e62 <__ftoa_engine+0x40>
   10e60:	80 68       	ori	r24, 0x80	; 128
   10e62:	91 1d       	adc	r25, r1
   10e64:	df 93       	push	r29
   10e66:	cf 93       	push	r28
   10e68:	1f 93       	push	r17
   10e6a:	0f 93       	push	r16
   10e6c:	ff 92       	push	r15
   10e6e:	ef 92       	push	r14
   10e70:	19 2f       	mov	r17, r25
   10e72:	98 7f       	andi	r25, 0xF8	; 248
   10e74:	96 95       	lsr	r25
   10e76:	e9 2f       	mov	r30, r25
   10e78:	96 95       	lsr	r25
   10e7a:	96 95       	lsr	r25
   10e7c:	e9 0f       	add	r30, r25
   10e7e:	ff 27       	eor	r31, r31
   10e80:	e7 52       	subi	r30, 0x27	; 39
   10e82:	fd 4f       	sbci	r31, 0xFD	; 253
   10e84:	99 27       	eor	r25, r25
   10e86:	33 27       	eor	r19, r19
   10e88:	ee 24       	eor	r14, r14
   10e8a:	ff 24       	eor	r15, r15
   10e8c:	a7 01       	movw	r20, r14
   10e8e:	e7 01       	movw	r28, r14
   10e90:	05 90       	lpm	r0, Z+
   10e92:	08 94       	sec
   10e94:	07 94       	ror	r0
   10e96:	28 f4       	brcc	.+10     	; 0x10ea2 <__ftoa_engine+0x80>
   10e98:	36 0f       	add	r19, r22
   10e9a:	e7 1e       	adc	r14, r23
   10e9c:	f8 1e       	adc	r15, r24
   10e9e:	49 1f       	adc	r20, r25
   10ea0:	51 1d       	adc	r21, r1
   10ea2:	66 0f       	add	r22, r22
   10ea4:	77 1f       	adc	r23, r23
   10ea6:	88 1f       	adc	r24, r24
   10ea8:	99 1f       	adc	r25, r25
   10eaa:	06 94       	lsr	r0
   10eac:	a1 f7       	brne	.-24     	; 0x10e96 <__ftoa_engine+0x74>
   10eae:	05 90       	lpm	r0, Z+
   10eb0:	07 94       	ror	r0
   10eb2:	28 f4       	brcc	.+10     	; 0x10ebe <__ftoa_engine+0x9c>
   10eb4:	e7 0e       	add	r14, r23
   10eb6:	f8 1e       	adc	r15, r24
   10eb8:	49 1f       	adc	r20, r25
   10eba:	56 1f       	adc	r21, r22
   10ebc:	c1 1d       	adc	r28, r1
   10ebe:	77 0f       	add	r23, r23
   10ec0:	88 1f       	adc	r24, r24
   10ec2:	99 1f       	adc	r25, r25
   10ec4:	66 1f       	adc	r22, r22
   10ec6:	06 94       	lsr	r0
   10ec8:	a1 f7       	brne	.-24     	; 0x10eb2 <__ftoa_engine+0x90>
   10eca:	05 90       	lpm	r0, Z+
   10ecc:	07 94       	ror	r0
   10ece:	28 f4       	brcc	.+10     	; 0x10eda <__ftoa_engine+0xb8>
   10ed0:	f8 0e       	add	r15, r24
   10ed2:	49 1f       	adc	r20, r25
   10ed4:	56 1f       	adc	r21, r22
   10ed6:	c7 1f       	adc	r28, r23
   10ed8:	d1 1d       	adc	r29, r1
   10eda:	88 0f       	add	r24, r24
   10edc:	99 1f       	adc	r25, r25
   10ede:	66 1f       	adc	r22, r22
   10ee0:	77 1f       	adc	r23, r23
   10ee2:	06 94       	lsr	r0
   10ee4:	a1 f7       	brne	.-24     	; 0x10ece <__ftoa_engine+0xac>
   10ee6:	05 90       	lpm	r0, Z+
   10ee8:	07 94       	ror	r0
   10eea:	20 f4       	brcc	.+8      	; 0x10ef4 <__ftoa_engine+0xd2>
   10eec:	49 0f       	add	r20, r25
   10eee:	56 1f       	adc	r21, r22
   10ef0:	c7 1f       	adc	r28, r23
   10ef2:	d8 1f       	adc	r29, r24
   10ef4:	99 0f       	add	r25, r25
   10ef6:	66 1f       	adc	r22, r22
   10ef8:	77 1f       	adc	r23, r23
   10efa:	88 1f       	adc	r24, r24
   10efc:	06 94       	lsr	r0
   10efe:	a9 f7       	brne	.-22     	; 0x10eea <__ftoa_engine+0xc8>
   10f00:	84 91       	lpm	r24, Z
   10f02:	10 95       	com	r17
   10f04:	17 70       	andi	r17, 0x07	; 7
   10f06:	41 f0       	breq	.+16     	; 0x10f18 <__ftoa_engine+0xf6>
   10f08:	d6 95       	lsr	r29
   10f0a:	c7 95       	ror	r28
   10f0c:	57 95       	ror	r21
   10f0e:	47 95       	ror	r20
   10f10:	f7 94       	ror	r15
   10f12:	e7 94       	ror	r14
   10f14:	1a 95       	dec	r17
   10f16:	c1 f7       	brne	.-16     	; 0x10f08 <__ftoa_engine+0xe6>
   10f18:	ef e7       	ldi	r30, 0x7F	; 127
   10f1a:	f2 e0       	ldi	r31, 0x02	; 2
   10f1c:	68 94       	set
   10f1e:	15 90       	lpm	r1, Z+
   10f20:	15 91       	lpm	r17, Z+
   10f22:	35 91       	lpm	r19, Z+
   10f24:	65 91       	lpm	r22, Z+
   10f26:	95 91       	lpm	r25, Z+
   10f28:	05 90       	lpm	r0, Z+
   10f2a:	7f e2       	ldi	r23, 0x2F	; 47
   10f2c:	73 95       	inc	r23
   10f2e:	e1 18       	sub	r14, r1
   10f30:	f1 0a       	sbc	r15, r17
   10f32:	43 0b       	sbc	r20, r19
   10f34:	56 0b       	sbc	r21, r22
   10f36:	c9 0b       	sbc	r28, r25
   10f38:	d0 09       	sbc	r29, r0
   10f3a:	c0 f7       	brcc	.-16     	; 0x10f2c <__ftoa_engine+0x10a>
   10f3c:	e1 0c       	add	r14, r1
   10f3e:	f1 1e       	adc	r15, r17
   10f40:	43 1f       	adc	r20, r19
   10f42:	56 1f       	adc	r21, r22
   10f44:	c9 1f       	adc	r28, r25
   10f46:	d0 1d       	adc	r29, r0
   10f48:	7e f4       	brtc	.+30     	; 0x10f68 <__ftoa_engine+0x146>
   10f4a:	70 33       	cpi	r23, 0x30	; 48
   10f4c:	11 f4       	brne	.+4      	; 0x10f52 <__ftoa_engine+0x130>
   10f4e:	8a 95       	dec	r24
   10f50:	e6 cf       	rjmp	.-52     	; 0x10f1e <__ftoa_engine+0xfc>
   10f52:	e8 94       	clt
   10f54:	01 50       	subi	r16, 0x01	; 1
   10f56:	30 f0       	brcs	.+12     	; 0x10f64 <__ftoa_engine+0x142>
   10f58:	08 0f       	add	r16, r24
   10f5a:	0a f4       	brpl	.+2      	; 0x10f5e <__ftoa_engine+0x13c>
   10f5c:	00 27       	eor	r16, r16
   10f5e:	02 17       	cp	r16, r18
   10f60:	08 f4       	brcc	.+2      	; 0x10f64 <__ftoa_engine+0x142>
   10f62:	20 2f       	mov	r18, r16
   10f64:	23 95       	inc	r18
   10f66:	02 2f       	mov	r16, r18
   10f68:	7a 33       	cpi	r23, 0x3A	; 58
   10f6a:	28 f0       	brcs	.+10     	; 0x10f76 <__ftoa_engine+0x154>
   10f6c:	79 e3       	ldi	r23, 0x39	; 57
   10f6e:	7d 93       	st	X+, r23
   10f70:	2a 95       	dec	r18
   10f72:	e9 f7       	brne	.-6      	; 0x10f6e <__ftoa_engine+0x14c>
   10f74:	10 c0       	rjmp	.+32     	; 0x10f96 <__ftoa_engine+0x174>
   10f76:	7d 93       	st	X+, r23
   10f78:	2a 95       	dec	r18
   10f7a:	89 f6       	brne	.-94     	; 0x10f1e <__ftoa_engine+0xfc>
   10f7c:	06 94       	lsr	r0
   10f7e:	97 95       	ror	r25
   10f80:	67 95       	ror	r22
   10f82:	37 95       	ror	r19
   10f84:	17 95       	ror	r17
   10f86:	17 94       	ror	r1
   10f88:	e1 18       	sub	r14, r1
   10f8a:	f1 0a       	sbc	r15, r17
   10f8c:	43 0b       	sbc	r20, r19
   10f8e:	56 0b       	sbc	r21, r22
   10f90:	c9 0b       	sbc	r28, r25
   10f92:	d0 09       	sbc	r29, r0
   10f94:	98 f0       	brcs	.+38     	; 0x10fbc <__ftoa_engine+0x19a>
   10f96:	23 95       	inc	r18
   10f98:	7e 91       	ld	r23, -X
   10f9a:	73 95       	inc	r23
   10f9c:	7a 33       	cpi	r23, 0x3A	; 58
   10f9e:	08 f0       	brcs	.+2      	; 0x10fa2 <__ftoa_engine+0x180>
   10fa0:	70 e3       	ldi	r23, 0x30	; 48
   10fa2:	7c 93       	st	X, r23
   10fa4:	20 13       	cpse	r18, r16
   10fa6:	b8 f7       	brcc	.-18     	; 0x10f96 <__ftoa_engine+0x174>
   10fa8:	7e 91       	ld	r23, -X
   10faa:	70 61       	ori	r23, 0x10	; 16
   10fac:	7d 93       	st	X+, r23
   10fae:	30 f0       	brcs	.+12     	; 0x10fbc <__ftoa_engine+0x19a>
   10fb0:	83 95       	inc	r24
   10fb2:	71 e3       	ldi	r23, 0x31	; 49
   10fb4:	7d 93       	st	X+, r23
   10fb6:	70 e3       	ldi	r23, 0x30	; 48
   10fb8:	2a 95       	dec	r18
   10fba:	e1 f7       	brne	.-8      	; 0x10fb4 <__ftoa_engine+0x192>
   10fbc:	11 24       	eor	r1, r1
   10fbe:	ef 90       	pop	r14
   10fc0:	ff 90       	pop	r15
   10fc2:	0f 91       	pop	r16
   10fc4:	1f 91       	pop	r17
   10fc6:	cf 91       	pop	r28
   10fc8:	df 91       	pop	r29
   10fca:	99 27       	eor	r25, r25
   10fcc:	87 fd       	sbrc	r24, 7
   10fce:	90 95       	com	r25
   10fd0:	08 95       	ret

00010fd2 <__ctype_isfalse>:
__ctype_isfalse():
   10fd2:	99 27       	eor	r25, r25
   10fd4:	88 27       	eor	r24, r24

00010fd6 <__ctype_istrue>:
__ctype_istrue():
   10fd6:	08 95       	ret

00010fd8 <strncasecmp_P>:
strncasecmp_P():
   10fd8:	fb 01       	movw	r30, r22
   10fda:	dc 01       	movw	r26, r24
   10fdc:	41 50       	subi	r20, 0x01	; 1
   10fde:	50 40       	sbci	r21, 0x00	; 0
   10fe0:	88 f0       	brcs	.+34     	; 0x11004 <strncasecmp_P+0x2c>
   10fe2:	8d 91       	ld	r24, X+
   10fe4:	81 34       	cpi	r24, 0x41	; 65
   10fe6:	1c f0       	brlt	.+6      	; 0x10fee <strncasecmp_P+0x16>
   10fe8:	8b 35       	cpi	r24, 0x5B	; 91
   10fea:	0c f4       	brge	.+2      	; 0x10fee <strncasecmp_P+0x16>
   10fec:	80 5e       	subi	r24, 0xE0	; 224
   10fee:	65 91       	lpm	r22, Z+
   10ff0:	61 34       	cpi	r22, 0x41	; 65
   10ff2:	1c f0       	brlt	.+6      	; 0x10ffa <strncasecmp_P+0x22>
   10ff4:	6b 35       	cpi	r22, 0x5B	; 91
   10ff6:	0c f4       	brge	.+2      	; 0x10ffa <strncasecmp_P+0x22>
   10ff8:	60 5e       	subi	r22, 0xE0	; 224
   10ffa:	86 1b       	sub	r24, r22
   10ffc:	61 11       	cpse	r22, r1
   10ffe:	71 f3       	breq	.-36     	; 0x10fdc <strncasecmp_P+0x4>
   11000:	99 0b       	sbc	r25, r25
   11002:	08 95       	ret
   11004:	88 1b       	sub	r24, r24
   11006:	fc cf       	rjmp	.-8      	; 0x11000 <strncasecmp_P+0x28>

00011008 <strnlen_P>:
strnlen_P():
   11008:	fc 01       	movw	r30, r24
   1100a:	05 90       	lpm	r0, Z+
   1100c:	61 50       	subi	r22, 0x01	; 1
   1100e:	70 40       	sbci	r23, 0x00	; 0
   11010:	01 10       	cpse	r0, r1
   11012:	d8 f7       	brcc	.-10     	; 0x1100a <strnlen_P+0x2>
   11014:	80 95       	com	r24
   11016:	90 95       	com	r25
   11018:	8e 0f       	add	r24, r30
   1101a:	9f 1f       	adc	r25, r31
   1101c:	08 95       	ret

0001101e <memset>:
memset():
   1101e:	dc 01       	movw	r26, r24
   11020:	01 c0       	rjmp	.+2      	; 0x11024 <memset+0x6>
   11022:	6d 93       	st	X+, r22
   11024:	41 50       	subi	r20, 0x01	; 1
   11026:	50 40       	sbci	r21, 0x00	; 0
   11028:	e0 f7       	brcc	.-8      	; 0x11022 <memset+0x4>
   1102a:	08 95       	ret

0001102c <strnlen>:
strnlen():
   1102c:	fc 01       	movw	r30, r24
   1102e:	61 50       	subi	r22, 0x01	; 1
   11030:	70 40       	sbci	r23, 0x00	; 0
   11032:	01 90       	ld	r0, Z+
   11034:	01 10       	cpse	r0, r1
   11036:	d8 f7       	brcc	.-10     	; 0x1102e <strnlen+0x2>
   11038:	80 95       	com	r24
   1103a:	90 95       	com	r25
   1103c:	8e 0f       	add	r24, r30
   1103e:	9f 1f       	adc	r25, r31
   11040:	08 95       	ret

00011042 <strrev>:
strrev():
   11042:	dc 01       	movw	r26, r24
   11044:	fc 01       	movw	r30, r24
   11046:	67 2f       	mov	r22, r23
   11048:	71 91       	ld	r23, Z+
   1104a:	77 23       	and	r23, r23
   1104c:	e1 f7       	brne	.-8      	; 0x11046 <strrev+0x4>
   1104e:	32 97       	sbiw	r30, 0x02	; 2
   11050:	04 c0       	rjmp	.+8      	; 0x1105a <strrev+0x18>
   11052:	7c 91       	ld	r23, X
   11054:	6d 93       	st	X+, r22
   11056:	70 83       	st	Z, r23
   11058:	62 91       	ld	r22, -Z
   1105a:	ae 17       	cp	r26, r30
   1105c:	bf 07       	cpc	r27, r31
   1105e:	c8 f3       	brcs	.-14     	; 0x11052 <strrev+0x10>
   11060:	08 95       	ret

00011062 <fputc>:
fputc():
   11062:	0f 93       	push	r16
   11064:	1f 93       	push	r17
   11066:	cf 93       	push	r28
   11068:	df 93       	push	r29
   1106a:	18 2f       	mov	r17, r24
   1106c:	09 2f       	mov	r16, r25
   1106e:	eb 01       	movw	r28, r22
   11070:	8b 81       	ldd	r24, Y+3	; 0x03
   11072:	81 fd       	sbrc	r24, 1
   11074:	09 c0       	rjmp	.+18     	; 0x11088 <fputc+0x26>
   11076:	1f ef       	ldi	r17, 0xFF	; 255
   11078:	0f ef       	ldi	r16, 0xFF	; 255
   1107a:	81 2f       	mov	r24, r17
   1107c:	90 2f       	mov	r25, r16
   1107e:	df 91       	pop	r29
   11080:	cf 91       	pop	r28
   11082:	1f 91       	pop	r17
   11084:	0f 91       	pop	r16
   11086:	08 95       	ret
   11088:	82 ff       	sbrs	r24, 2
   1108a:	14 c0       	rjmp	.+40     	; 0x110b4 <fputc+0x52>
   1108c:	2e 81       	ldd	r18, Y+6	; 0x06
   1108e:	3f 81       	ldd	r19, Y+7	; 0x07
   11090:	8c 81       	ldd	r24, Y+4	; 0x04
   11092:	9d 81       	ldd	r25, Y+5	; 0x05
   11094:	28 17       	cp	r18, r24
   11096:	39 07       	cpc	r19, r25
   11098:	3c f4       	brge	.+14     	; 0x110a8 <fputc+0x46>
   1109a:	e8 81       	ld	r30, Y
   1109c:	f9 81       	ldd	r31, Y+1	; 0x01
   1109e:	cf 01       	movw	r24, r30
   110a0:	01 96       	adiw	r24, 0x01	; 1
   110a2:	99 83       	std	Y+1, r25	; 0x01
   110a4:	88 83       	st	Y, r24
   110a6:	10 83       	st	Z, r17
   110a8:	8e 81       	ldd	r24, Y+6	; 0x06
   110aa:	9f 81       	ldd	r25, Y+7	; 0x07
   110ac:	01 96       	adiw	r24, 0x01	; 1
   110ae:	9f 83       	std	Y+7, r25	; 0x07
   110b0:	8e 83       	std	Y+6, r24	; 0x06
   110b2:	e3 cf       	rjmp	.-58     	; 0x1107a <fputc+0x18>
   110b4:	e8 85       	ldd	r30, Y+8	; 0x08
   110b6:	f9 85       	ldd	r31, Y+9	; 0x09
   110b8:	81 2f       	mov	r24, r17
   110ba:	19 95       	eicall
   110bc:	89 2b       	or	r24, r25
   110be:	a1 f3       	breq	.-24     	; 0x110a8 <fputc+0x46>
   110c0:	da cf       	rjmp	.-76     	; 0x11076 <fputc+0x14>

000110c2 <__ultoa_invert>:
__ultoa_invert():
   110c2:	fa 01       	movw	r30, r20
   110c4:	aa 27       	eor	r26, r26
   110c6:	28 30       	cpi	r18, 0x08	; 8
   110c8:	51 f1       	breq	.+84     	; 0x1111e <__ultoa_invert+0x5c>
   110ca:	20 31       	cpi	r18, 0x10	; 16
   110cc:	81 f1       	breq	.+96     	; 0x1112e <__ultoa_invert+0x6c>
   110ce:	e8 94       	clt
   110d0:	6f 93       	push	r22
   110d2:	6e 7f       	andi	r22, 0xFE	; 254
   110d4:	6e 5f       	subi	r22, 0xFE	; 254
   110d6:	7f 4f       	sbci	r23, 0xFF	; 255
   110d8:	8f 4f       	sbci	r24, 0xFF	; 255
   110da:	9f 4f       	sbci	r25, 0xFF	; 255
   110dc:	af 4f       	sbci	r26, 0xFF	; 255
   110de:	b1 e0       	ldi	r27, 0x01	; 1
   110e0:	3e d0       	rcall	.+124    	; 0x1115e <__ultoa_invert+0x9c>
   110e2:	b4 e0       	ldi	r27, 0x04	; 4
   110e4:	3c d0       	rcall	.+120    	; 0x1115e <__ultoa_invert+0x9c>
   110e6:	67 0f       	add	r22, r23
   110e8:	78 1f       	adc	r23, r24
   110ea:	89 1f       	adc	r24, r25
   110ec:	9a 1f       	adc	r25, r26
   110ee:	a1 1d       	adc	r26, r1
   110f0:	68 0f       	add	r22, r24
   110f2:	79 1f       	adc	r23, r25
   110f4:	8a 1f       	adc	r24, r26
   110f6:	91 1d       	adc	r25, r1
   110f8:	a1 1d       	adc	r26, r1
   110fa:	6a 0f       	add	r22, r26
   110fc:	71 1d       	adc	r23, r1
   110fe:	81 1d       	adc	r24, r1
   11100:	91 1d       	adc	r25, r1
   11102:	a1 1d       	adc	r26, r1
   11104:	20 d0       	rcall	.+64     	; 0x11146 <__ultoa_invert+0x84>
   11106:	09 f4       	brne	.+2      	; 0x1110a <__ultoa_invert+0x48>
   11108:	68 94       	set
   1110a:	3f 91       	pop	r19
   1110c:	2a e0       	ldi	r18, 0x0A	; 10
   1110e:	26 9f       	mul	r18, r22
   11110:	11 24       	eor	r1, r1
   11112:	30 19       	sub	r19, r0
   11114:	30 5d       	subi	r19, 0xD0	; 208
   11116:	31 93       	st	Z+, r19
   11118:	de f6       	brtc	.-74     	; 0x110d0 <__ultoa_invert+0xe>
   1111a:	cf 01       	movw	r24, r30
   1111c:	08 95       	ret
   1111e:	46 2f       	mov	r20, r22
   11120:	47 70       	andi	r20, 0x07	; 7
   11122:	40 5d       	subi	r20, 0xD0	; 208
   11124:	41 93       	st	Z+, r20
   11126:	b3 e0       	ldi	r27, 0x03	; 3
   11128:	0f d0       	rcall	.+30     	; 0x11148 <__ultoa_invert+0x86>
   1112a:	c9 f7       	brne	.-14     	; 0x1111e <__ultoa_invert+0x5c>
   1112c:	f6 cf       	rjmp	.-20     	; 0x1111a <__ultoa_invert+0x58>
   1112e:	46 2f       	mov	r20, r22
   11130:	4f 70       	andi	r20, 0x0F	; 15
   11132:	40 5d       	subi	r20, 0xD0	; 208
   11134:	4a 33       	cpi	r20, 0x3A	; 58
   11136:	18 f0       	brcs	.+6      	; 0x1113e <__ultoa_invert+0x7c>
   11138:	49 5d       	subi	r20, 0xD9	; 217
   1113a:	31 fd       	sbrc	r19, 1
   1113c:	40 52       	subi	r20, 0x20	; 32
   1113e:	41 93       	st	Z+, r20
   11140:	02 d0       	rcall	.+4      	; 0x11146 <__ultoa_invert+0x84>
   11142:	a9 f7       	brne	.-22     	; 0x1112e <__ultoa_invert+0x6c>
   11144:	ea cf       	rjmp	.-44     	; 0x1111a <__ultoa_invert+0x58>
   11146:	b4 e0       	ldi	r27, 0x04	; 4
   11148:	a6 95       	lsr	r26
   1114a:	97 95       	ror	r25
   1114c:	87 95       	ror	r24
   1114e:	77 95       	ror	r23
   11150:	67 95       	ror	r22
   11152:	ba 95       	dec	r27
   11154:	c9 f7       	brne	.-14     	; 0x11148 <__ultoa_invert+0x86>
   11156:	00 97       	sbiw	r24, 0x00	; 0
   11158:	61 05       	cpc	r22, r1
   1115a:	71 05       	cpc	r23, r1
   1115c:	08 95       	ret
   1115e:	9b 01       	movw	r18, r22
   11160:	ac 01       	movw	r20, r24
   11162:	0a 2e       	mov	r0, r26
   11164:	06 94       	lsr	r0
   11166:	57 95       	ror	r21
   11168:	47 95       	ror	r20
   1116a:	37 95       	ror	r19
   1116c:	27 95       	ror	r18
   1116e:	ba 95       	dec	r27
   11170:	c9 f7       	brne	.-14     	; 0x11164 <__ultoa_invert+0xa2>
   11172:	62 0f       	add	r22, r18
   11174:	73 1f       	adc	r23, r19
   11176:	84 1f       	adc	r24, r20
   11178:	95 1f       	adc	r25, r21
   1117a:	a0 1d       	adc	r26, r0
   1117c:	08 95       	ret

0001117e <__cmpsf2>:
__cmpsf2():
   1117e:	0e 94 01 89 	call	0x11202	; 0x11202 <__fp_cmp>
   11182:	08 f4       	brcc	.+2      	; 0x11186 <__cmpsf2+0x8>
   11184:	81 e0       	ldi	r24, 0x01	; 1
   11186:	08 95       	ret

00011188 <__floatunsisf>:
__floatunsisf():
   11188:	e8 94       	clt
   1118a:	09 c0       	rjmp	.+18     	; 0x1119e <__floatsisf+0x12>

0001118c <__floatsisf>:
   1118c:	97 fb       	bst	r25, 7
   1118e:	3e f4       	brtc	.+14     	; 0x1119e <__floatsisf+0x12>
   11190:	90 95       	com	r25
   11192:	80 95       	com	r24
   11194:	70 95       	com	r23
   11196:	61 95       	neg	r22
   11198:	7f 4f       	sbci	r23, 0xFF	; 255
   1119a:	8f 4f       	sbci	r24, 0xFF	; 255
   1119c:	9f 4f       	sbci	r25, 0xFF	; 255
   1119e:	99 23       	and	r25, r25
   111a0:	a9 f0       	breq	.+42     	; 0x111cc <__floatsisf+0x40>
   111a2:	f9 2f       	mov	r31, r25
   111a4:	96 e9       	ldi	r25, 0x96	; 150
   111a6:	bb 27       	eor	r27, r27
   111a8:	93 95       	inc	r25
   111aa:	f6 95       	lsr	r31
   111ac:	87 95       	ror	r24
   111ae:	77 95       	ror	r23
   111b0:	67 95       	ror	r22
   111b2:	b7 95       	ror	r27
   111b4:	f1 11       	cpse	r31, r1
   111b6:	f8 cf       	rjmp	.-16     	; 0x111a8 <__floatsisf+0x1c>
   111b8:	fa f4       	brpl	.+62     	; 0x111f8 <__floatsisf+0x6c>
   111ba:	bb 0f       	add	r27, r27
   111bc:	11 f4       	brne	.+4      	; 0x111c2 <__floatsisf+0x36>
   111be:	60 ff       	sbrs	r22, 0
   111c0:	1b c0       	rjmp	.+54     	; 0x111f8 <__floatsisf+0x6c>
   111c2:	6f 5f       	subi	r22, 0xFF	; 255
   111c4:	7f 4f       	sbci	r23, 0xFF	; 255
   111c6:	8f 4f       	sbci	r24, 0xFF	; 255
   111c8:	9f 4f       	sbci	r25, 0xFF	; 255
   111ca:	16 c0       	rjmp	.+44     	; 0x111f8 <__floatsisf+0x6c>
   111cc:	88 23       	and	r24, r24
   111ce:	11 f0       	breq	.+4      	; 0x111d4 <__floatsisf+0x48>
   111d0:	96 e9       	ldi	r25, 0x96	; 150
   111d2:	11 c0       	rjmp	.+34     	; 0x111f6 <__floatsisf+0x6a>
   111d4:	77 23       	and	r23, r23
   111d6:	21 f0       	breq	.+8      	; 0x111e0 <__floatsisf+0x54>
   111d8:	9e e8       	ldi	r25, 0x8E	; 142
   111da:	87 2f       	mov	r24, r23
   111dc:	76 2f       	mov	r23, r22
   111de:	05 c0       	rjmp	.+10     	; 0x111ea <__floatsisf+0x5e>
   111e0:	66 23       	and	r22, r22
   111e2:	71 f0       	breq	.+28     	; 0x11200 <__floatsisf+0x74>
   111e4:	96 e8       	ldi	r25, 0x86	; 134
   111e6:	86 2f       	mov	r24, r22
   111e8:	70 e0       	ldi	r23, 0x00	; 0
   111ea:	60 e0       	ldi	r22, 0x00	; 0
   111ec:	2a f0       	brmi	.+10     	; 0x111f8 <__floatsisf+0x6c>
   111ee:	9a 95       	dec	r25
   111f0:	66 0f       	add	r22, r22
   111f2:	77 1f       	adc	r23, r23
   111f4:	88 1f       	adc	r24, r24
   111f6:	da f7       	brpl	.-10     	; 0x111ee <__floatsisf+0x62>
   111f8:	88 0f       	add	r24, r24
   111fa:	96 95       	lsr	r25
   111fc:	87 95       	ror	r24
   111fe:	97 f9       	bld	r25, 7
   11200:	08 95       	ret

00011202 <__fp_cmp>:
__fp_cmp():
   11202:	99 0f       	add	r25, r25
   11204:	00 08       	sbc	r0, r0
   11206:	55 0f       	add	r21, r21
   11208:	aa 0b       	sbc	r26, r26
   1120a:	e0 e8       	ldi	r30, 0x80	; 128
   1120c:	fe ef       	ldi	r31, 0xFE	; 254
   1120e:	16 16       	cp	r1, r22
   11210:	17 06       	cpc	r1, r23
   11212:	e8 07       	cpc	r30, r24
   11214:	f9 07       	cpc	r31, r25
   11216:	c0 f0       	brcs	.+48     	; 0x11248 <__fp_cmp+0x46>
   11218:	12 16       	cp	r1, r18
   1121a:	13 06       	cpc	r1, r19
   1121c:	e4 07       	cpc	r30, r20
   1121e:	f5 07       	cpc	r31, r21
   11220:	98 f0       	brcs	.+38     	; 0x11248 <__fp_cmp+0x46>
   11222:	62 1b       	sub	r22, r18
   11224:	73 0b       	sbc	r23, r19
   11226:	84 0b       	sbc	r24, r20
   11228:	95 0b       	sbc	r25, r21
   1122a:	39 f4       	brne	.+14     	; 0x1123a <__fp_cmp+0x38>
   1122c:	0a 26       	eor	r0, r26
   1122e:	61 f0       	breq	.+24     	; 0x11248 <__fp_cmp+0x46>
   11230:	23 2b       	or	r18, r19
   11232:	24 2b       	or	r18, r20
   11234:	25 2b       	or	r18, r21
   11236:	21 f4       	brne	.+8      	; 0x11240 <__fp_cmp+0x3e>
   11238:	08 95       	ret
   1123a:	0a 26       	eor	r0, r26
   1123c:	09 f4       	brne	.+2      	; 0x11240 <__fp_cmp+0x3e>
   1123e:	a1 40       	sbci	r26, 0x01	; 1
   11240:	a6 95       	lsr	r26
   11242:	8f ef       	ldi	r24, 0xFF	; 255
   11244:	81 1d       	adc	r24, r1
   11246:	81 1d       	adc	r24, r1
   11248:	08 95       	ret

0001124a <__mulsf3>:
__mulsf3():
   1124a:	0e 94 38 89 	call	0x11270	; 0x11270 <__mulsf3x>
   1124e:	0c 94 a9 89 	jmp	0x11352	; 0x11352 <__fp_round>
   11252:	0e 94 9b 89 	call	0x11336	; 0x11336 <__fp_pscA>
   11256:	38 f0       	brcs	.+14     	; 0x11266 <__mulsf3+0x1c>
   11258:	0e 94 a2 89 	call	0x11344	; 0x11344 <__fp_pscB>
   1125c:	20 f0       	brcs	.+8      	; 0x11266 <__mulsf3+0x1c>
   1125e:	95 23       	and	r25, r21
   11260:	11 f0       	breq	.+4      	; 0x11266 <__mulsf3+0x1c>
   11262:	0c 94 92 89 	jmp	0x11324	; 0x11324 <__fp_inf>
   11266:	0c 94 98 89 	jmp	0x11330	; 0x11330 <__fp_nan>
   1126a:	11 24       	eor	r1, r1
   1126c:	0c 94 dd 89 	jmp	0x113ba	; 0x113ba <__fp_szero>

00011270 <__mulsf3x>:
__mulsf3x():
   11270:	0e 94 ba 89 	call	0x11374	; 0x11374 <__fp_split3>
   11274:	70 f3       	brcs	.-36     	; 0x11252 <__mulsf3+0x8>

00011276 <__mulsf3_pse>:
   11276:	95 9f       	mul	r25, r21
   11278:	c1 f3       	breq	.-16     	; 0x1126a <__mulsf3+0x20>
   1127a:	95 0f       	add	r25, r21
   1127c:	50 e0       	ldi	r21, 0x00	; 0
   1127e:	55 1f       	adc	r21, r21
   11280:	62 9f       	mul	r22, r18
   11282:	f0 01       	movw	r30, r0
   11284:	72 9f       	mul	r23, r18
   11286:	bb 27       	eor	r27, r27
   11288:	f0 0d       	add	r31, r0
   1128a:	b1 1d       	adc	r27, r1
   1128c:	63 9f       	mul	r22, r19
   1128e:	aa 27       	eor	r26, r26
   11290:	f0 0d       	add	r31, r0
   11292:	b1 1d       	adc	r27, r1
   11294:	aa 1f       	adc	r26, r26
   11296:	64 9f       	mul	r22, r20
   11298:	66 27       	eor	r22, r22
   1129a:	b0 0d       	add	r27, r0
   1129c:	a1 1d       	adc	r26, r1
   1129e:	66 1f       	adc	r22, r22
   112a0:	82 9f       	mul	r24, r18
   112a2:	22 27       	eor	r18, r18
   112a4:	b0 0d       	add	r27, r0
   112a6:	a1 1d       	adc	r26, r1
   112a8:	62 1f       	adc	r22, r18
   112aa:	73 9f       	mul	r23, r19
   112ac:	b0 0d       	add	r27, r0
   112ae:	a1 1d       	adc	r26, r1
   112b0:	62 1f       	adc	r22, r18
   112b2:	83 9f       	mul	r24, r19
   112b4:	a0 0d       	add	r26, r0
   112b6:	61 1d       	adc	r22, r1
   112b8:	22 1f       	adc	r18, r18
   112ba:	74 9f       	mul	r23, r20
   112bc:	33 27       	eor	r19, r19
   112be:	a0 0d       	add	r26, r0
   112c0:	61 1d       	adc	r22, r1
   112c2:	23 1f       	adc	r18, r19
   112c4:	84 9f       	mul	r24, r20
   112c6:	60 0d       	add	r22, r0
   112c8:	21 1d       	adc	r18, r1
   112ca:	82 2f       	mov	r24, r18
   112cc:	76 2f       	mov	r23, r22
   112ce:	6a 2f       	mov	r22, r26
   112d0:	11 24       	eor	r1, r1
   112d2:	9f 57       	subi	r25, 0x7F	; 127
   112d4:	50 40       	sbci	r21, 0x00	; 0
   112d6:	9a f0       	brmi	.+38     	; 0x112fe <__mulsf3_pse+0x88>
   112d8:	f1 f0       	breq	.+60     	; 0x11316 <__mulsf3_pse+0xa0>
   112da:	88 23       	and	r24, r24
   112dc:	4a f0       	brmi	.+18     	; 0x112f0 <__mulsf3_pse+0x7a>
   112de:	ee 0f       	add	r30, r30
   112e0:	ff 1f       	adc	r31, r31
   112e2:	bb 1f       	adc	r27, r27
   112e4:	66 1f       	adc	r22, r22
   112e6:	77 1f       	adc	r23, r23
   112e8:	88 1f       	adc	r24, r24
   112ea:	91 50       	subi	r25, 0x01	; 1
   112ec:	50 40       	sbci	r21, 0x00	; 0
   112ee:	a9 f7       	brne	.-22     	; 0x112da <__mulsf3_pse+0x64>
   112f0:	9e 3f       	cpi	r25, 0xFE	; 254
   112f2:	51 05       	cpc	r21, r1
   112f4:	80 f0       	brcs	.+32     	; 0x11316 <__mulsf3_pse+0xa0>
   112f6:	0c 94 92 89 	jmp	0x11324	; 0x11324 <__fp_inf>
   112fa:	0c 94 dd 89 	jmp	0x113ba	; 0x113ba <__fp_szero>
   112fe:	5f 3f       	cpi	r21, 0xFF	; 255
   11300:	e4 f3       	brlt	.-8      	; 0x112fa <__mulsf3_pse+0x84>
   11302:	98 3e       	cpi	r25, 0xE8	; 232
   11304:	d4 f3       	brlt	.-12     	; 0x112fa <__mulsf3_pse+0x84>
   11306:	86 95       	lsr	r24
   11308:	77 95       	ror	r23
   1130a:	67 95       	ror	r22
   1130c:	b7 95       	ror	r27
   1130e:	f7 95       	ror	r31
   11310:	e7 95       	ror	r30
   11312:	9f 5f       	subi	r25, 0xFF	; 255
   11314:	c1 f7       	brne	.-16     	; 0x11306 <__mulsf3_pse+0x90>
   11316:	fe 2b       	or	r31, r30
   11318:	88 0f       	add	r24, r24
   1131a:	91 1d       	adc	r25, r1
   1131c:	96 95       	lsr	r25
   1131e:	87 95       	ror	r24
   11320:	97 f9       	bld	r25, 7
   11322:	08 95       	ret

00011324 <__fp_inf>:
   11324:	97 f9       	bld	r25, 7
   11326:	9f 67       	ori	r25, 0x7F	; 127
   11328:	80 e8       	ldi	r24, 0x80	; 128
   1132a:	70 e0       	ldi	r23, 0x00	; 0
   1132c:	60 e0       	ldi	r22, 0x00	; 0
   1132e:	08 95       	ret

00011330 <__fp_nan>:
   11330:	9f ef       	ldi	r25, 0xFF	; 255
   11332:	80 ec       	ldi	r24, 0xC0	; 192
   11334:	08 95       	ret

00011336 <__fp_pscA>:
   11336:	00 24       	eor	r0, r0
   11338:	0a 94       	dec	r0
   1133a:	16 16       	cp	r1, r22
   1133c:	17 06       	cpc	r1, r23
   1133e:	18 06       	cpc	r1, r24
   11340:	09 06       	cpc	r0, r25
__fp_pscA():
   11342:	08 95       	ret

00011344 <__fp_pscB>:
__fp_pscB():
   11344:	00 24       	eor	r0, r0
   11346:	0a 94       	dec	r0
   11348:	12 16       	cp	r1, r18
   1134a:	13 06       	cpc	r1, r19
   1134c:	14 06       	cpc	r1, r20
   1134e:	05 06       	cpc	r0, r21
   11350:	08 95       	ret

00011352 <__fp_round>:
__fp_round():
   11352:	09 2e       	mov	r0, r25
   11354:	03 94       	inc	r0
   11356:	00 0c       	add	r0, r0
   11358:	11 f4       	brne	.+4      	; 0x1135e <__fp_round+0xc>
   1135a:	88 23       	and	r24, r24
   1135c:	52 f0       	brmi	.+20     	; 0x11372 <__fp_round+0x20>
   1135e:	bb 0f       	add	r27, r27
   11360:	40 f4       	brcc	.+16     	; 0x11372 <__fp_round+0x20>
   11362:	bf 2b       	or	r27, r31
   11364:	11 f4       	brne	.+4      	; 0x1136a <__fp_round+0x18>
   11366:	60 ff       	sbrs	r22, 0
   11368:	04 c0       	rjmp	.+8      	; 0x11372 <__fp_round+0x20>
   1136a:	6f 5f       	subi	r22, 0xFF	; 255
   1136c:	7f 4f       	sbci	r23, 0xFF	; 255
   1136e:	8f 4f       	sbci	r24, 0xFF	; 255
   11370:	9f 4f       	sbci	r25, 0xFF	; 255
   11372:	08 95       	ret

00011374 <__fp_split3>:
__fp_split3():
   11374:	57 fd       	sbrc	r21, 7
   11376:	90 58       	subi	r25, 0x80	; 128
   11378:	44 0f       	add	r20, r20
   1137a:	55 1f       	adc	r21, r21
   1137c:	59 f0       	breq	.+22     	; 0x11394 <__fp_splitA+0x10>
   1137e:	5f 3f       	cpi	r21, 0xFF	; 255
   11380:	71 f0       	breq	.+28     	; 0x1139e <__fp_splitA+0x1a>
   11382:	47 95       	ror	r20

00011384 <__fp_splitA>:
   11384:	88 0f       	add	r24, r24
   11386:	97 fb       	bst	r25, 7
   11388:	99 1f       	adc	r25, r25
   1138a:	61 f0       	breq	.+24     	; 0x113a4 <__fp_splitA+0x20>
   1138c:	9f 3f       	cpi	r25, 0xFF	; 255
   1138e:	79 f0       	breq	.+30     	; 0x113ae <__fp_splitA+0x2a>
   11390:	87 95       	ror	r24
   11392:	08 95       	ret
   11394:	12 16       	cp	r1, r18
   11396:	13 06       	cpc	r1, r19
   11398:	14 06       	cpc	r1, r20
   1139a:	55 1f       	adc	r21, r21
   1139c:	f2 cf       	rjmp	.-28     	; 0x11382 <__fp_split3+0xe>
   1139e:	46 95       	lsr	r20
   113a0:	f1 df       	rcall	.-30     	; 0x11384 <__fp_splitA>
   113a2:	08 c0       	rjmp	.+16     	; 0x113b4 <__fp_splitA+0x30>
   113a4:	16 16       	cp	r1, r22
   113a6:	17 06       	cpc	r1, r23
   113a8:	18 06       	cpc	r1, r24
   113aa:	99 1f       	adc	r25, r25
   113ac:	f1 cf       	rjmp	.-30     	; 0x11390 <__fp_splitA+0xc>
   113ae:	86 95       	lsr	r24
   113b0:	71 05       	cpc	r23, r1
   113b2:	61 05       	cpc	r22, r1
   113b4:	08 94       	sec
   113b6:	08 95       	ret

000113b8 <__fp_zero>:
__fp_zero():
   113b8:	e8 94       	clt

000113ba <__fp_szero>:
   113ba:	bb 27       	eor	r27, r27
   113bc:	66 27       	eor	r22, r22
   113be:	77 27       	eor	r23, r23
   113c0:	cb 01       	movw	r24, r22
   113c2:	97 f9       	bld	r25, 7
   113c4:	08 95       	ret

000113c6 <eeprom_read_byte>:
eeprom_read_byte():
   113c6:	f9 99       	sbic	0x1f, 1	; 31
   113c8:	fe cf       	rjmp	.-4      	; 0x113c6 <eeprom_read_byte>
   113ca:	92 bd       	out	0x22, r25	; 34
   113cc:	81 bd       	out	0x21, r24	; 33
   113ce:	f8 9a       	sbi	0x1f, 0	; 31
   113d0:	99 27       	eor	r25, r25
   113d2:	80 b5       	in	r24, 0x20	; 32
   113d4:	08 95       	ret

000113d6 <eeprom_write_byte>:
eeprom_write_byte():
   113d6:	26 2f       	mov	r18, r22

000113d8 <eeprom_write_r18>:
   113d8:	f9 99       	sbic	0x1f, 1	; 31
   113da:	fe cf       	rjmp	.-4      	; 0x113d8 <eeprom_write_r18>
   113dc:	1f ba       	out	0x1f, r1	; 31
   113de:	92 bd       	out	0x22, r25	; 34
   113e0:	81 bd       	out	0x21, r24	; 33
   113e2:	20 bd       	out	0x20, r18	; 32
   113e4:	0f b6       	in	r0, 0x3f	; 63
   113e6:	f8 94       	cli
   113e8:	fa 9a       	sbi	0x1f, 2	; 31
   113ea:	f9 9a       	sbi	0x1f, 1	; 31
   113ec:	0f be       	out	0x3f, r0	; 63
   113ee:	01 96       	adiw	r24, 0x01	; 1
   113f0:	08 95       	ret

000113f2 <__mulsi3>:
__mulsi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:648
   113f2:	db 01       	movw	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:649
   113f4:	8f 93       	push	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:650
   113f6:	9f 93       	push	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:651
   113f8:	0e 94 72 8a 	call	0x114e4	; 0x114e4 <__muluhisi3>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:652
   113fc:	bf 91       	pop	r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:653
   113fe:	af 91       	pop	r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:655
   11400:	a2 9f       	mul	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:656
   11402:	80 0d       	add	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:657
   11404:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:658
   11406:	a3 9f       	mul	r26, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:659
   11408:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:660
   1140a:	b2 9f       	mul	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:661
   1140c:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:662
   1140e:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:663
   11410:	08 95       	ret

00011412 <__udivmodhi4>:
__udivmodhi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
   11412:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
   11414:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
   11416:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
   11418:	07 c0       	rjmp	.+14     	; 0x11428 <__udivmodhi4_ep>

0001141a <__udivmodhi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
   1141a:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
   1141c:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
   1141e:	a6 17       	cp	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
   11420:	b7 07       	cpc	r27, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
   11422:	10 f0       	brcs	.+4      	; 0x11428 <__udivmodhi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
   11424:	a6 1b       	sub	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
   11426:	b7 0b       	sbc	r27, r23

00011428 <__udivmodhi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
   11428:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
   1142a:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
   1142c:	5a 95       	dec	r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
   1142e:	a9 f7       	brne	.-22     	; 0x1141a <__udivmodhi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
   11430:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
   11432:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
   11434:	bc 01       	movw	r22, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
   11436:	cd 01       	movw	r24, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
   11438:	08 95       	ret

0001143a <__divmodhi4>:
__divmodhi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
   1143a:	97 fb       	bst	r25, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
   1143c:	07 2e       	mov	r0, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
   1143e:	16 f4       	brtc	.+4      	; 0x11444 <__divmodhi4+0xa>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
   11440:	00 94       	com	r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
   11442:	07 d0       	rcall	.+14     	; 0x11452 <__divmodhi4_neg1>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
   11444:	77 fd       	sbrc	r23, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
   11446:	09 d0       	rcall	.+18     	; 0x1145a <__divmodhi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
   11448:	0e 94 09 8a 	call	0x11412	; 0x11412 <__udivmodhi4>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
   1144c:	07 fc       	sbrc	r0, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
   1144e:	05 d0       	rcall	.+10     	; 0x1145a <__divmodhi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
   11450:	3e f4       	brtc	.+14     	; 0x11460 <__divmodhi4_exit>

00011452 <__divmodhi4_neg1>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
   11452:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
   11454:	81 95       	neg	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
   11456:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
   11458:	08 95       	ret

0001145a <__divmodhi4_neg2>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
   1145a:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
   1145c:	61 95       	neg	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
   1145e:	7f 4f       	sbci	r23, 0xFF	; 255

00011460 <__divmodhi4_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
   11460:	08 95       	ret

00011462 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
   11462:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
   11464:	1a 2e       	mov	r1, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
   11466:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
   11468:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
   1146a:	fd 01       	movw	r30, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
   1146c:	0d c0       	rjmp	.+26     	; 0x11488 <__udivmodsi4_ep>

0001146e <__udivmodsi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
   1146e:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
   11470:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
   11472:	ee 1f       	adc	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
   11474:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
   11476:	a2 17       	cp	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
   11478:	b3 07       	cpc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
   1147a:	e4 07       	cpc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
   1147c:	f5 07       	cpc	r31, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
   1147e:	20 f0       	brcs	.+8      	; 0x11488 <__udivmodsi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
   11480:	a2 1b       	sub	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
   11482:	b3 0b       	sbc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
   11484:	e4 0b       	sbc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
   11486:	f5 0b       	sbc	r31, r21

00011488 <__udivmodsi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
   11488:	66 1f       	adc	r22, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
   1148a:	77 1f       	adc	r23, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
   1148c:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
   1148e:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
   11490:	1a 94       	dec	r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
   11492:	69 f7       	brne	.-38     	; 0x1146e <__udivmodsi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
   11494:	60 95       	com	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
   11496:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
   11498:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
   1149a:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
   1149c:	9b 01       	movw	r18, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
   1149e:	ac 01       	movw	r20, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
   114a0:	bd 01       	movw	r22, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
   114a2:	cf 01       	movw	r24, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
   114a4:	08 95       	ret

000114a6 <__divmodsi4>:
__divmodsi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
   114a6:	05 2e       	mov	r0, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
   114a8:	97 fb       	bst	r25, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
   114aa:	1e f4       	brtc	.+6      	; 0x114b2 <__divmodsi4+0xc>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
   114ac:	00 94       	com	r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
   114ae:	0e 94 6a 8a 	call	0x114d4	; 0x114d4 <__negsi2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
   114b2:	57 fd       	sbrc	r21, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
   114b4:	07 d0       	rcall	.+14     	; 0x114c4 <__divmodsi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
   114b6:	0e 94 31 8a 	call	0x11462	; 0x11462 <__udivmodsi4>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
   114ba:	07 fc       	sbrc	r0, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
   114bc:	03 d0       	rcall	.+6      	; 0x114c4 <__divmodsi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
   114be:	4e f4       	brtc	.+18     	; 0x114d2 <__divmodsi4_exit>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
   114c0:	0c 94 6a 8a 	jmp	0x114d4	; 0x114d4 <__negsi2>

000114c4 <__divmodsi4_neg2>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
   114c4:	50 95       	com	r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
   114c6:	40 95       	com	r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
   114c8:	30 95       	com	r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
   114ca:	21 95       	neg	r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
   114cc:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
   114ce:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
   114d0:	5f 4f       	sbci	r21, 0xFF	; 255

000114d2 <__divmodsi4_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
   114d2:	08 95       	ret

000114d4 <__negsi2>:
__negsi2():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
   114d4:	90 95       	com	r25
   114d6:	80 95       	com	r24
   114d8:	70 95       	com	r23
   114da:	61 95       	neg	r22
   114dc:	7f 4f       	sbci	r23, 0xFF	; 255
   114de:	8f 4f       	sbci	r24, 0xFF	; 255
   114e0:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
   114e2:	08 95       	ret

000114e4 <__muluhisi3>:
__muluhisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
   114e4:	0e 94 7d 8a 	call	0x114fa	; 0x114fa <__umulhisi3>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
   114e8:	a5 9f       	mul	r26, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
   114ea:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
   114ec:	b4 9f       	mul	r27, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
   114ee:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
   114f0:	a4 9f       	mul	r26, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
   114f2:	80 0d       	add	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
   114f4:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
   114f6:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
   114f8:	08 95       	ret

000114fa <__umulhisi3>:
__umulhisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
   114fa:	a2 9f       	mul	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
   114fc:	b0 01       	movw	r22, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
   114fe:	b3 9f       	mul	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
   11500:	c0 01       	movw	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
   11502:	a3 9f       	mul	r26, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
   11504:	70 0d       	add	r23, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
   11506:	81 1d       	adc	r24, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
   11508:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
   1150a:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
   1150c:	b2 9f       	mul	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
   1150e:	70 0d       	add	r23, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
   11510:	81 1d       	adc	r24, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
   11512:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
   11514:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
   11516:	08 95       	ret

00011518 <__subsf3>:
__subsf3():
   11518:	50 58       	subi	r21, 0x80	; 128

0001151a <__addsf3>:
   1151a:	bb 27       	eor	r27, r27
   1151c:	aa 27       	eor	r26, r26
   1151e:	0e 94 a4 8a 	call	0x11548	; 0x11548 <__addsf3x>
   11522:	0c 94 a9 89 	jmp	0x11352	; 0x11352 <__fp_round>
__addsf3():
   11526:	0e 94 9b 89 	call	0x11336	; 0x11336 <__fp_pscA>
   1152a:	38 f0       	brcs	.+14     	; 0x1153a <__addsf3+0x20>
   1152c:	0e 94 a2 89 	call	0x11344	; 0x11344 <__fp_pscB>
   11530:	20 f0       	brcs	.+8      	; 0x1153a <__addsf3+0x20>
   11532:	39 f4       	brne	.+14     	; 0x11542 <__addsf3+0x28>
   11534:	9f 3f       	cpi	r25, 0xFF	; 255
   11536:	19 f4       	brne	.+6      	; 0x1153e <__addsf3+0x24>
   11538:	26 f4       	brtc	.+8      	; 0x11542 <__addsf3+0x28>
   1153a:	0c 94 98 89 	jmp	0x11330	; 0x11330 <__fp_nan>
   1153e:	0e f4       	brtc	.+2      	; 0x11542 <__addsf3+0x28>
   11540:	e0 95       	com	r30
   11542:	e7 fb       	bst	r30, 7
   11544:	0c 94 92 89 	jmp	0x11324	; 0x11324 <__fp_inf>

00011548 <__addsf3x>:
__addsf3x():
   11548:	e9 2f       	mov	r30, r25
   1154a:	0e 94 ba 89 	call	0x11374	; 0x11374 <__fp_split3>
   1154e:	58 f3       	brcs	.-42     	; 0x11526 <__addsf3+0xc>
   11550:	ba 17       	cp	r27, r26
   11552:	62 07       	cpc	r22, r18
   11554:	73 07       	cpc	r23, r19
   11556:	84 07       	cpc	r24, r20
   11558:	95 07       	cpc	r25, r21
   1155a:	20 f0       	brcs	.+8      	; 0x11564 <__addsf3x+0x1c>
   1155c:	79 f4       	brne	.+30     	; 0x1157c <__addsf3x+0x34>
   1155e:	a6 f5       	brtc	.+104    	; 0x115c8 <__addsf3x+0x80>
   11560:	0c 94 dc 89 	jmp	0x113b8	; 0x113b8 <__fp_zero>
   11564:	0e f4       	brtc	.+2      	; 0x11568 <__addsf3x+0x20>
   11566:	e0 95       	com	r30
   11568:	0b 2e       	mov	r0, r27
   1156a:	ba 2f       	mov	r27, r26
   1156c:	a0 2d       	mov	r26, r0
   1156e:	0b 01       	movw	r0, r22
   11570:	b9 01       	movw	r22, r18
   11572:	90 01       	movw	r18, r0
   11574:	0c 01       	movw	r0, r24
   11576:	ca 01       	movw	r24, r20
   11578:	a0 01       	movw	r20, r0
   1157a:	11 24       	eor	r1, r1
   1157c:	ff 27       	eor	r31, r31
   1157e:	59 1b       	sub	r21, r25
   11580:	99 f0       	breq	.+38     	; 0x115a8 <__addsf3x+0x60>
   11582:	59 3f       	cpi	r21, 0xF9	; 249
   11584:	50 f4       	brcc	.+20     	; 0x1159a <__addsf3x+0x52>
   11586:	50 3e       	cpi	r21, 0xE0	; 224
   11588:	68 f1       	brcs	.+90     	; 0x115e4 <__addsf3x+0x9c>
   1158a:	1a 16       	cp	r1, r26
   1158c:	f0 40       	sbci	r31, 0x00	; 0
   1158e:	a2 2f       	mov	r26, r18
   11590:	23 2f       	mov	r18, r19
   11592:	34 2f       	mov	r19, r20
   11594:	44 27       	eor	r20, r20
   11596:	58 5f       	subi	r21, 0xF8	; 248
   11598:	f3 cf       	rjmp	.-26     	; 0x11580 <__addsf3x+0x38>
   1159a:	46 95       	lsr	r20
   1159c:	37 95       	ror	r19
   1159e:	27 95       	ror	r18
   115a0:	a7 95       	ror	r26
   115a2:	f0 40       	sbci	r31, 0x00	; 0
   115a4:	53 95       	inc	r21
   115a6:	c9 f7       	brne	.-14     	; 0x1159a <__addsf3x+0x52>
   115a8:	7e f4       	brtc	.+30     	; 0x115c8 <__addsf3x+0x80>
   115aa:	1f 16       	cp	r1, r31
   115ac:	ba 0b       	sbc	r27, r26
   115ae:	62 0b       	sbc	r22, r18
   115b0:	73 0b       	sbc	r23, r19
   115b2:	84 0b       	sbc	r24, r20
   115b4:	ba f0       	brmi	.+46     	; 0x115e4 <__addsf3x+0x9c>
   115b6:	91 50       	subi	r25, 0x01	; 1
   115b8:	a1 f0       	breq	.+40     	; 0x115e2 <__addsf3x+0x9a>
   115ba:	ff 0f       	add	r31, r31
   115bc:	bb 1f       	adc	r27, r27
   115be:	66 1f       	adc	r22, r22
   115c0:	77 1f       	adc	r23, r23
   115c2:	88 1f       	adc	r24, r24
   115c4:	c2 f7       	brpl	.-16     	; 0x115b6 <__addsf3x+0x6e>
   115c6:	0e c0       	rjmp	.+28     	; 0x115e4 <__addsf3x+0x9c>
   115c8:	ba 0f       	add	r27, r26
   115ca:	62 1f       	adc	r22, r18
   115cc:	73 1f       	adc	r23, r19
   115ce:	84 1f       	adc	r24, r20
   115d0:	48 f4       	brcc	.+18     	; 0x115e4 <__addsf3x+0x9c>
   115d2:	87 95       	ror	r24
   115d4:	77 95       	ror	r23
   115d6:	67 95       	ror	r22
   115d8:	b7 95       	ror	r27
   115da:	f7 95       	ror	r31
   115dc:	9e 3f       	cpi	r25, 0xFE	; 254
   115de:	08 f0       	brcs	.+2      	; 0x115e2 <__addsf3x+0x9a>
   115e0:	b0 cf       	rjmp	.-160    	; 0x11542 <__addsf3+0x28>
   115e2:	93 95       	inc	r25
   115e4:	88 0f       	add	r24, r24
   115e6:	08 f0       	brcs	.+2      	; 0x115ea <__addsf3x+0xa2>
   115e8:	99 27       	eor	r25, r25
   115ea:	ee 0f       	add	r30, r30
   115ec:	97 95       	ror	r25
   115ee:	87 95       	ror	r24
   115f0:	08 95       	ret

000115f2 <__divsf3>:
   115f2:	0e 94 0d 8b 	call	0x1161a	; 0x1161a <__divsf3x>
   115f6:	0c 94 a9 89 	jmp	0x11352	; 0x11352 <__fp_round>
   115fa:	0e 94 a2 89 	call	0x11344	; 0x11344 <__fp_pscB>
   115fe:	58 f0       	brcs	.+22     	; 0x11616 <__divsf3+0x24>
   11600:	0e 94 9b 89 	call	0x11336	; 0x11336 <__fp_pscA>
   11604:	40 f0       	brcs	.+16     	; 0x11616 <__divsf3+0x24>
   11606:	29 f4       	brne	.+10     	; 0x11612 <__divsf3+0x20>
   11608:	5f 3f       	cpi	r21, 0xFF	; 255
   1160a:	29 f0       	breq	.+10     	; 0x11616 <__divsf3+0x24>
   1160c:	0c 94 92 89 	jmp	0x11324	; 0x11324 <__fp_inf>
   11610:	51 11       	cpse	r21, r1
   11612:	0c 94 dd 89 	jmp	0x113ba	; 0x113ba <__fp_szero>
__divsf3():
   11616:	0c 94 98 89 	jmp	0x11330	; 0x11330 <__fp_nan>

0001161a <__divsf3x>:
__divsf3x():
   1161a:	0e 94 ba 89 	call	0x11374	; 0x11374 <__fp_split3>
   1161e:	68 f3       	brcs	.-38     	; 0x115fa <__divsf3+0x8>

00011620 <__divsf3_pse>:
   11620:	99 23       	and	r25, r25
   11622:	b1 f3       	breq	.-20     	; 0x11610 <__divsf3+0x1e>
   11624:	55 23       	and	r21, r21
   11626:	91 f3       	breq	.-28     	; 0x1160c <__divsf3+0x1a>
   11628:	95 1b       	sub	r25, r21
   1162a:	55 0b       	sbc	r21, r21
   1162c:	bb 27       	eor	r27, r27
   1162e:	aa 27       	eor	r26, r26
   11630:	62 17       	cp	r22, r18
   11632:	73 07       	cpc	r23, r19
   11634:	84 07       	cpc	r24, r20
   11636:	38 f0       	brcs	.+14     	; 0x11646 <__divsf3_pse+0x26>
   11638:	9f 5f       	subi	r25, 0xFF	; 255
   1163a:	5f 4f       	sbci	r21, 0xFF	; 255
   1163c:	22 0f       	add	r18, r18
   1163e:	33 1f       	adc	r19, r19
   11640:	44 1f       	adc	r20, r20
   11642:	aa 1f       	adc	r26, r26
   11644:	a9 f3       	breq	.-22     	; 0x11630 <__divsf3_pse+0x10>
   11646:	35 d0       	rcall	.+106    	; 0x116b2 <__divsf3_pse+0x92>
   11648:	0e 2e       	mov	r0, r30
   1164a:	3a f0       	brmi	.+14     	; 0x1165a <__divsf3_pse+0x3a>
   1164c:	e0 e8       	ldi	r30, 0x80	; 128
   1164e:	32 d0       	rcall	.+100    	; 0x116b4 <__divsf3_pse+0x94>
   11650:	91 50       	subi	r25, 0x01	; 1
   11652:	50 40       	sbci	r21, 0x00	; 0
   11654:	e6 95       	lsr	r30
   11656:	00 1c       	adc	r0, r0
   11658:	ca f7       	brpl	.-14     	; 0x1164c <__divsf3_pse+0x2c>
   1165a:	2b d0       	rcall	.+86     	; 0x116b2 <__divsf3_pse+0x92>
   1165c:	fe 2f       	mov	r31, r30
   1165e:	29 d0       	rcall	.+82     	; 0x116b2 <__divsf3_pse+0x92>
   11660:	66 0f       	add	r22, r22
   11662:	77 1f       	adc	r23, r23
   11664:	88 1f       	adc	r24, r24
   11666:	bb 1f       	adc	r27, r27
   11668:	26 17       	cp	r18, r22
   1166a:	37 07       	cpc	r19, r23
   1166c:	48 07       	cpc	r20, r24
   1166e:	ab 07       	cpc	r26, r27
   11670:	b0 e8       	ldi	r27, 0x80	; 128
   11672:	09 f0       	breq	.+2      	; 0x11676 <__divsf3_pse+0x56>
   11674:	bb 0b       	sbc	r27, r27
   11676:	80 2d       	mov	r24, r0
   11678:	bf 01       	movw	r22, r30
   1167a:	ff 27       	eor	r31, r31
   1167c:	93 58       	subi	r25, 0x83	; 131
   1167e:	5f 4f       	sbci	r21, 0xFF	; 255
   11680:	3a f0       	brmi	.+14     	; 0x11690 <__divsf3_pse+0x70>
   11682:	9e 3f       	cpi	r25, 0xFE	; 254
   11684:	51 05       	cpc	r21, r1
   11686:	78 f0       	brcs	.+30     	; 0x116a6 <__divsf3_pse+0x86>
   11688:	0c 94 92 89 	jmp	0x11324	; 0x11324 <__fp_inf>
   1168c:	0c 94 dd 89 	jmp	0x113ba	; 0x113ba <__fp_szero>
   11690:	5f 3f       	cpi	r21, 0xFF	; 255
   11692:	e4 f3       	brlt	.-8      	; 0x1168c <__divsf3_pse+0x6c>
   11694:	98 3e       	cpi	r25, 0xE8	; 232
   11696:	d4 f3       	brlt	.-12     	; 0x1168c <__divsf3_pse+0x6c>
   11698:	86 95       	lsr	r24
   1169a:	77 95       	ror	r23
   1169c:	67 95       	ror	r22
   1169e:	b7 95       	ror	r27
   116a0:	f7 95       	ror	r31
   116a2:	9f 5f       	subi	r25, 0xFF	; 255
   116a4:	c9 f7       	brne	.-14     	; 0x11698 <__divsf3_pse+0x78>
   116a6:	88 0f       	add	r24, r24
   116a8:	91 1d       	adc	r25, r1
   116aa:	96 95       	lsr	r25
   116ac:	87 95       	ror	r24
   116ae:	97 f9       	bld	r25, 7
   116b0:	08 95       	ret
   116b2:	e1 e0       	ldi	r30, 0x01	; 1
   116b4:	66 0f       	add	r22, r22
   116b6:	77 1f       	adc	r23, r23
   116b8:	88 1f       	adc	r24, r24
   116ba:	bb 1f       	adc	r27, r27
   116bc:	62 17       	cp	r22, r18
   116be:	73 07       	cpc	r23, r19
   116c0:	84 07       	cpc	r24, r20
   116c2:	ba 07       	cpc	r27, r26
   116c4:	20 f0       	brcs	.+8      	; 0x116ce <__divsf3_pse+0xae>
   116c6:	62 1b       	sub	r22, r18
   116c8:	73 0b       	sbc	r23, r19
   116ca:	84 0b       	sbc	r24, r20
   116cc:	ba 0b       	sbc	r27, r26
   116ce:	ee 1f       	adc	r30, r30
   116d0:	88 f7       	brcc	.-30     	; 0x116b4 <__divsf3_pse+0x94>
   116d2:	e0 95       	com	r30
   116d4:	08 95       	ret

000116d6 <__fixsfsi>:
   116d6:	0e 94 72 8b 	call	0x116e4	; 0x116e4 <__fixunssfsi>
   116da:	68 94       	set
   116dc:	b1 11       	cpse	r27, r1
   116de:	0c 94 dd 89 	jmp	0x113ba	; 0x113ba <__fp_szero>
   116e2:	08 95       	ret

000116e4 <__fixunssfsi>:
   116e4:	0e 94 c2 89 	call	0x11384	; 0x11384 <__fp_splitA>
   116e8:	88 f0       	brcs	.+34     	; 0x1170c <__fixunssfsi+0x28>
   116ea:	9f 57       	subi	r25, 0x7F	; 127
   116ec:	98 f0       	brcs	.+38     	; 0x11714 <__fixunssfsi+0x30>
   116ee:	b9 2f       	mov	r27, r25
   116f0:	99 27       	eor	r25, r25
   116f2:	b7 51       	subi	r27, 0x17	; 23
   116f4:	b0 f0       	brcs	.+44     	; 0x11722 <__fixunssfsi+0x3e>
__fixunssfsi():
   116f6:	e1 f0       	breq	.+56     	; 0x11730 <__fixunssfsi+0x4c>
   116f8:	66 0f       	add	r22, r22
   116fa:	77 1f       	adc	r23, r23
   116fc:	88 1f       	adc	r24, r24
   116fe:	99 1f       	adc	r25, r25
   11700:	1a f0       	brmi	.+6      	; 0x11708 <__fixunssfsi+0x24>
   11702:	ba 95       	dec	r27
   11704:	c9 f7       	brne	.-14     	; 0x116f8 <__fixunssfsi+0x14>
   11706:	14 c0       	rjmp	.+40     	; 0x11730 <__fixunssfsi+0x4c>
   11708:	b1 30       	cpi	r27, 0x01	; 1
   1170a:	91 f0       	breq	.+36     	; 0x11730 <__fixunssfsi+0x4c>
   1170c:	0e 94 dc 89 	call	0x113b8	; 0x113b8 <__fp_zero>
   11710:	b1 e0       	ldi	r27, 0x01	; 1
   11712:	08 95       	ret
   11714:	0c 94 dc 89 	jmp	0x113b8	; 0x113b8 <__fp_zero>
   11718:	67 2f       	mov	r22, r23
   1171a:	78 2f       	mov	r23, r24
   1171c:	88 27       	eor	r24, r24
   1171e:	b8 5f       	subi	r27, 0xF8	; 248
   11720:	39 f0       	breq	.+14     	; 0x11730 <__fixunssfsi+0x4c>
   11722:	b9 3f       	cpi	r27, 0xF9	; 249
   11724:	cc f3       	brlt	.-14     	; 0x11718 <__fixunssfsi+0x34>
   11726:	86 95       	lsr	r24
   11728:	77 95       	ror	r23
   1172a:	67 95       	ror	r22
   1172c:	b3 95       	inc	r27
   1172e:	d9 f7       	brne	.-10     	; 0x11726 <__fixunssfsi+0x42>
   11730:	3e f4       	brtc	.+14     	; 0x11740 <__fixunssfsi+0x5c>
   11732:	90 95       	com	r25
   11734:	80 95       	com	r24
   11736:	70 95       	com	r23
   11738:	61 95       	neg	r22
   1173a:	7f 4f       	sbci	r23, 0xFF	; 255
   1173c:	8f 4f       	sbci	r24, 0xFF	; 255
   1173e:	9f 4f       	sbci	r25, 0xFF	; 255
   11740:	08 95       	ret

00011742 <__gesf2>:
__gesf2():
   11742:	0e 94 01 89 	call	0x11202	; 0x11202 <__fp_cmp>
   11746:	08 f4       	brcc	.+2      	; 0x1174a <__gesf2+0x8>
   11748:	8f ef       	ldi	r24, 0xFF	; 255
   1174a:	08 95       	ret

0001174c <__udivmodqi4>:
__udivmodqi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1346
   1174c:	99 1b       	sub	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1347
   1174e:	79 e0       	ldi	r23, 0x09	; 9
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1348
   11750:	04 c0       	rjmp	.+8      	; 0x1175a <__udivmodqi4_ep>

00011752 <__udivmodqi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1350
   11752:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1351
   11754:	96 17       	cp	r25, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1352
   11756:	08 f0       	brcs	.+2      	; 0x1175a <__udivmodqi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1353
   11758:	96 1b       	sub	r25, r22

0001175a <__udivmodqi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1355
   1175a:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1356
   1175c:	7a 95       	dec	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1357
   1175e:	c9 f7       	brne	.-14     	; 0x11752 <__udivmodqi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1358
   11760:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1360
   11762:	08 95       	ret

00011764 <__tablejump2__>:
__tablejump2__():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
   11764:	ee 0f       	add	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
   11766:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2300
   11768:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2301
   1176a:	8b bf       	out	0x3b, r24	; 59
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
   1176c:	07 90       	elpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
   1176e:	f6 91       	elpm	r31, Z
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
   11770:	e0 2d       	mov	r30, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
   11772:	19 94       	eijmp

00011774 <realloc>:
realloc():
   11774:	4f 92       	push	r4
   11776:	5f 92       	push	r5
   11778:	6f 92       	push	r6
   1177a:	7f 92       	push	r7
   1177c:	8f 92       	push	r8
   1177e:	9f 92       	push	r9
   11780:	af 92       	push	r10
   11782:	bf 92       	push	r11
   11784:	cf 92       	push	r12
   11786:	df 92       	push	r13
   11788:	ef 92       	push	r14
   1178a:	ff 92       	push	r15
   1178c:	0f 93       	push	r16
   1178e:	1f 93       	push	r17
   11790:	cf 93       	push	r28
   11792:	df 93       	push	r29
   11794:	8c 01       	movw	r16, r24
   11796:	00 97       	sbiw	r24, 0x00	; 0
   11798:	99 f4       	brne	.+38     	; 0x117c0 <realloc+0x4c>
   1179a:	cb 01       	movw	r24, r22
   1179c:	df 91       	pop	r29
   1179e:	cf 91       	pop	r28
   117a0:	1f 91       	pop	r17
   117a2:	0f 91       	pop	r16
   117a4:	ff 90       	pop	r15
   117a6:	ef 90       	pop	r14
   117a8:	df 90       	pop	r13
   117aa:	cf 90       	pop	r12
   117ac:	bf 90       	pop	r11
   117ae:	af 90       	pop	r10
   117b0:	9f 90       	pop	r9
   117b2:	8f 90       	pop	r8
   117b4:	7f 90       	pop	r7
   117b6:	6f 90       	pop	r6
   117b8:	5f 90       	pop	r5
   117ba:	4f 90       	pop	r4
   117bc:	0c 94 8e 84 	jmp	0x1091c	; 0x1091c <malloc>
   117c0:	fc 01       	movw	r30, r24
   117c2:	e6 0f       	add	r30, r22
   117c4:	f7 1f       	adc	r31, r23
   117c6:	9c 01       	movw	r18, r24
   117c8:	22 50       	subi	r18, 0x02	; 2
   117ca:	31 09       	sbc	r19, r1
   117cc:	e2 17       	cp	r30, r18
   117ce:	f3 07       	cpc	r31, r19
   117d0:	08 f4       	brcc	.+2      	; 0x117d4 <realloc+0x60>
   117d2:	ae c0       	rjmp	.+348    	; 0x11930 <realloc+0x1bc>
   117d4:	d9 01       	movw	r26, r18
   117d6:	cd 91       	ld	r28, X+
   117d8:	dc 91       	ld	r29, X
   117da:	11 97       	sbiw	r26, 0x01	; 1
   117dc:	c6 17       	cp	r28, r22
   117de:	d7 07       	cpc	r29, r23
   117e0:	20 f1       	brcs	.+72     	; 0x1182a <realloc+0xb6>
   117e2:	c5 30       	cpi	r28, 0x05	; 5
   117e4:	d1 05       	cpc	r29, r1
   117e6:	78 f0       	brcs	.+30     	; 0x11806 <realloc+0x92>
   117e8:	ce 01       	movw	r24, r28
   117ea:	04 97       	sbiw	r24, 0x04	; 4
   117ec:	86 17       	cp	r24, r22
   117ee:	97 07       	cpc	r25, r23
   117f0:	50 f0       	brcs	.+20     	; 0x11806 <realloc+0x92>
   117f2:	c6 1b       	sub	r28, r22
   117f4:	d7 0b       	sbc	r29, r23
   117f6:	22 97       	sbiw	r28, 0x02	; 2
   117f8:	c1 93       	st	Z+, r28
   117fa:	d1 93       	st	Z+, r29
   117fc:	6d 93       	st	X+, r22
   117fe:	7c 93       	st	X, r23
   11800:	cf 01       	movw	r24, r30
   11802:	0e 94 2a 85 	call	0x10a54	; 0x10a54 <free>
   11806:	c8 01       	movw	r24, r16
   11808:	df 91       	pop	r29
   1180a:	cf 91       	pop	r28
   1180c:	1f 91       	pop	r17
   1180e:	0f 91       	pop	r16
   11810:	ff 90       	pop	r15
   11812:	ef 90       	pop	r14
   11814:	df 90       	pop	r13
   11816:	cf 90       	pop	r12
   11818:	bf 90       	pop	r11
   1181a:	af 90       	pop	r10
   1181c:	9f 90       	pop	r9
   1181e:	8f 90       	pop	r8
   11820:	7f 90       	pop	r7
   11822:	6f 90       	pop	r6
   11824:	5f 90       	pop	r5
   11826:	4f 90       	pop	r4
   11828:	08 95       	ret
   1182a:	5b 01       	movw	r10, r22
   1182c:	ac 1a       	sub	r10, r28
   1182e:	bd 0a       	sbc	r11, r29
   11830:	4c 01       	movw	r8, r24
   11832:	8c 0e       	add	r8, r28
   11834:	9d 1e       	adc	r9, r29
   11836:	a0 91 26 16 	lds	r26, 0x1626	; 0x801626 <__flp>
   1183a:	b0 91 27 16 	lds	r27, 0x1627	; 0x801627 <__flp+0x1>
   1183e:	51 2c       	mov	r5, r1
   11840:	41 2c       	mov	r4, r1
   11842:	f1 2c       	mov	r15, r1
   11844:	e1 2c       	mov	r14, r1
   11846:	10 97       	sbiw	r26, 0x00	; 0
   11848:	31 f5       	brne	.+76     	; 0x11896 <realloc+0x122>
   1184a:	80 91 24 16 	lds	r24, 0x1624	; 0x801624 <__brkval>
   1184e:	90 91 25 16 	lds	r25, 0x1625	; 0x801625 <__brkval+0x1>
   11852:	88 15       	cp	r24, r8
   11854:	99 05       	cpc	r25, r9
   11856:	09 f0       	breq	.+2      	; 0x1185a <realloc+0xe6>
   11858:	5c c0       	rjmp	.+184    	; 0x11912 <realloc+0x19e>
   1185a:	46 16       	cp	r4, r22
   1185c:	57 06       	cpc	r5, r23
   1185e:	08 f0       	brcs	.+2      	; 0x11862 <realloc+0xee>
   11860:	58 c0       	rjmp	.+176    	; 0x11912 <realloc+0x19e>
   11862:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <__malloc_heap_end>
   11866:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <__malloc_heap_end+0x1>
   1186a:	00 97       	sbiw	r24, 0x00	; 0
   1186c:	41 f4       	brne	.+16     	; 0x1187e <realloc+0x10a>
   1186e:	8d b7       	in	r24, 0x3d	; 61
   11870:	9e b7       	in	r25, 0x3e	; 62
   11872:	40 91 14 02 	lds	r20, 0x0214	; 0x800214 <__malloc_margin>
   11876:	50 91 15 02 	lds	r21, 0x0215	; 0x800215 <__malloc_margin+0x1>
   1187a:	84 1b       	sub	r24, r20
   1187c:	95 0b       	sbc	r25, r21
   1187e:	e8 17       	cp	r30, r24
   11880:	f9 07       	cpc	r31, r25
   11882:	08 f0       	brcs	.+2      	; 0x11886 <realloc+0x112>
   11884:	55 c0       	rjmp	.+170    	; 0x11930 <realloc+0x1bc>
   11886:	f0 93 25 16 	sts	0x1625, r31	; 0x801625 <__brkval+0x1>
   1188a:	e0 93 24 16 	sts	0x1624, r30	; 0x801624 <__brkval>
   1188e:	f9 01       	movw	r30, r18
   11890:	71 83       	std	Z+1, r23	; 0x01
   11892:	60 83       	st	Z, r22
   11894:	b8 cf       	rjmp	.-144    	; 0x11806 <realloc+0x92>
   11896:	8d 91       	ld	r24, X+
   11898:	9c 91       	ld	r25, X
   1189a:	11 97       	sbiw	r26, 0x01	; 1
   1189c:	12 96       	adiw	r26, 0x02	; 2
   1189e:	6c 90       	ld	r6, X
   118a0:	12 97       	sbiw	r26, 0x02	; 2
   118a2:	13 96       	adiw	r26, 0x03	; 3
   118a4:	7c 90       	ld	r7, X
   118a6:	13 97       	sbiw	r26, 0x03	; 3
   118a8:	a8 15       	cp	r26, r8
   118aa:	b9 05       	cpc	r27, r9
   118ac:	59 f5       	brne	.+86     	; 0x11904 <realloc+0x190>
   118ae:	6c 01       	movw	r12, r24
   118b0:	42 e0       	ldi	r20, 0x02	; 2
   118b2:	c4 0e       	add	r12, r20
   118b4:	d1 1c       	adc	r13, r1
   118b6:	ca 14       	cp	r12, r10
   118b8:	db 04       	cpc	r13, r11
   118ba:	20 f1       	brcs	.+72     	; 0x11904 <realloc+0x190>
   118bc:	ac 01       	movw	r20, r24
   118be:	4a 19       	sub	r20, r10
   118c0:	5b 09       	sbc	r21, r11
   118c2:	da 01       	movw	r26, r20
   118c4:	12 96       	adiw	r26, 0x02	; 2
   118c6:	15 97       	sbiw	r26, 0x05	; 5
   118c8:	80 f0       	brcs	.+32     	; 0x118ea <realloc+0x176>
   118ca:	62 82       	std	Z+2, r6	; 0x02
   118cc:	73 82       	std	Z+3, r7	; 0x03
   118ce:	51 83       	std	Z+1, r21	; 0x01
   118d0:	40 83       	st	Z, r20
   118d2:	d9 01       	movw	r26, r18
   118d4:	6d 93       	st	X+, r22
   118d6:	7c 93       	st	X, r23
   118d8:	e1 14       	cp	r14, r1
   118da:	f1 04       	cpc	r15, r1
   118dc:	71 f0       	breq	.+28     	; 0x118fa <realloc+0x186>
   118de:	d7 01       	movw	r26, r14
   118e0:	13 96       	adiw	r26, 0x03	; 3
   118e2:	fc 93       	st	X, r31
   118e4:	ee 93       	st	-X, r30
   118e6:	12 97       	sbiw	r26, 0x02	; 2
   118e8:	8e cf       	rjmp	.-228    	; 0x11806 <realloc+0x92>
   118ea:	22 96       	adiw	r28, 0x02	; 2
   118ec:	8c 0f       	add	r24, r28
   118ee:	9d 1f       	adc	r25, r29
   118f0:	f9 01       	movw	r30, r18
   118f2:	91 83       	std	Z+1, r25	; 0x01
   118f4:	80 83       	st	Z, r24
   118f6:	f3 01       	movw	r30, r6
   118f8:	ef cf       	rjmp	.-34     	; 0x118d8 <realloc+0x164>
   118fa:	f0 93 27 16 	sts	0x1627, r31	; 0x801627 <__flp+0x1>
   118fe:	e0 93 26 16 	sts	0x1626, r30	; 0x801626 <__flp>
   11902:	81 cf       	rjmp	.-254    	; 0x11806 <realloc+0x92>
   11904:	48 16       	cp	r4, r24
   11906:	59 06       	cpc	r5, r25
   11908:	08 f4       	brcc	.+2      	; 0x1190c <realloc+0x198>
   1190a:	2c 01       	movw	r4, r24
   1190c:	7d 01       	movw	r14, r26
   1190e:	d3 01       	movw	r26, r6
   11910:	9a cf       	rjmp	.-204    	; 0x11846 <realloc+0xd2>
   11912:	cb 01       	movw	r24, r22
   11914:	0e 94 8e 84 	call	0x1091c	; 0x1091c <malloc>
   11918:	7c 01       	movw	r14, r24
   1191a:	00 97       	sbiw	r24, 0x00	; 0
   1191c:	49 f0       	breq	.+18     	; 0x11930 <realloc+0x1bc>
   1191e:	ae 01       	movw	r20, r28
   11920:	b8 01       	movw	r22, r16
   11922:	0e 94 a0 8c 	call	0x11940	; 0x11940 <memcpy>
   11926:	c8 01       	movw	r24, r16
   11928:	0e 94 2a 85 	call	0x10a54	; 0x10a54 <free>
   1192c:	87 01       	movw	r16, r14
   1192e:	6b cf       	rjmp	.-298    	; 0x11806 <realloc+0x92>
   11930:	10 e0       	ldi	r17, 0x00	; 0
   11932:	00 e0       	ldi	r16, 0x00	; 0
   11934:	68 cf       	rjmp	.-304    	; 0x11806 <realloc+0x92>

00011936 <abort>:
abort():
   11936:	81 e0       	ldi	r24, 0x01	; 1
   11938:	90 e0       	ldi	r25, 0x00	; 0
   1193a:	f8 94       	cli
   1193c:	0c 94 6b 8d 	jmp	0x11ad6	; 0x11ad6 <_exit>

00011940 <memcpy>:
memcpy():
   11940:	fb 01       	movw	r30, r22
   11942:	dc 01       	movw	r26, r24
   11944:	02 c0       	rjmp	.+4      	; 0x1194a <memcpy+0xa>
   11946:	01 90       	ld	r0, Z+
   11948:	0d 92       	st	X+, r0
   1194a:	41 50       	subi	r20, 0x01	; 1
   1194c:	50 40       	sbci	r21, 0x00	; 0
   1194e:	d8 f7       	brcc	.-10     	; 0x11946 <memcpy+0x6>
   11950:	08 95       	ret

00011952 <strcat>:
strcat():
   11952:	fb 01       	movw	r30, r22
   11954:	dc 01       	movw	r26, r24
   11956:	0d 90       	ld	r0, X+
   11958:	00 20       	and	r0, r0
   1195a:	e9 f7       	brne	.-6      	; 0x11956 <strcat+0x4>
   1195c:	11 97       	sbiw	r26, 0x01	; 1
   1195e:	01 90       	ld	r0, Z+
   11960:	0d 92       	st	X+, r0
   11962:	00 20       	and	r0, r0
   11964:	e1 f7       	brne	.-8      	; 0x1195e <strcat+0xc>
   11966:	08 95       	ret

00011968 <strchr>:
strchr():
   11968:	fc 01       	movw	r30, r24
   1196a:	81 91       	ld	r24, Z+
   1196c:	86 17       	cp	r24, r22
   1196e:	21 f0       	breq	.+8      	; 0x11978 <strchr+0x10>
   11970:	88 23       	and	r24, r24
   11972:	d9 f7       	brne	.-10     	; 0x1196a <strchr+0x2>
   11974:	99 27       	eor	r25, r25
   11976:	08 95       	ret
   11978:	31 97       	sbiw	r30, 0x01	; 1
   1197a:	cf 01       	movw	r24, r30
   1197c:	08 95       	ret

0001197e <strcmp>:
strcmp():
   1197e:	fb 01       	movw	r30, r22
   11980:	dc 01       	movw	r26, r24
   11982:	8d 91       	ld	r24, X+
   11984:	01 90       	ld	r0, Z+
   11986:	80 19       	sub	r24, r0
   11988:	01 10       	cpse	r0, r1
   1198a:	d9 f3       	breq	.-10     	; 0x11982 <strcmp+0x4>
   1198c:	99 0b       	sbc	r25, r25
   1198e:	08 95       	ret

00011990 <strcpy>:
strcpy():
   11990:	fb 01       	movw	r30, r22
   11992:	dc 01       	movw	r26, r24
   11994:	01 90       	ld	r0, Z+
   11996:	0d 92       	st	X+, r0
   11998:	00 20       	and	r0, r0
   1199a:	e1 f7       	brne	.-8      	; 0x11994 <strcpy+0x4>
   1199c:	08 95       	ret

0001199e <strncat>:
strncat():
   1199e:	fb 01       	movw	r30, r22
   119a0:	dc 01       	movw	r26, r24
   119a2:	0d 90       	ld	r0, X+
   119a4:	00 20       	and	r0, r0
   119a6:	e9 f7       	brne	.-6      	; 0x119a2 <strncat+0x4>
   119a8:	11 97       	sbiw	r26, 0x01	; 1
   119aa:	41 50       	subi	r20, 0x01	; 1
   119ac:	50 40       	sbci	r21, 0x00	; 0
   119ae:	28 f0       	brcs	.+10     	; 0x119ba <strncat+0x1c>
   119b0:	01 90       	ld	r0, Z+
   119b2:	00 20       	and	r0, r0
   119b4:	0d 92       	st	X+, r0
   119b6:	c9 f7       	brne	.-14     	; 0x119aa <strncat+0xc>
   119b8:	08 95       	ret
   119ba:	1c 92       	st	X, r1
   119bc:	08 95       	ret

000119be <strncmp>:
strncmp():
   119be:	fb 01       	movw	r30, r22
   119c0:	dc 01       	movw	r26, r24
   119c2:	41 50       	subi	r20, 0x01	; 1
   119c4:	50 40       	sbci	r21, 0x00	; 0
   119c6:	30 f0       	brcs	.+12     	; 0x119d4 <strncmp+0x16>
   119c8:	8d 91       	ld	r24, X+
   119ca:	01 90       	ld	r0, Z+
   119cc:	80 19       	sub	r24, r0
   119ce:	19 f4       	brne	.+6      	; 0x119d6 <strncmp+0x18>
   119d0:	00 20       	and	r0, r0
   119d2:	b9 f7       	brne	.-18     	; 0x119c2 <strncmp+0x4>
   119d4:	88 1b       	sub	r24, r24
   119d6:	99 0b       	sbc	r25, r25
   119d8:	08 95       	ret

000119da <strncpy>:
strncpy():
   119da:	fb 01       	movw	r30, r22
   119dc:	dc 01       	movw	r26, r24
   119de:	41 50       	subi	r20, 0x01	; 1
   119e0:	50 40       	sbci	r21, 0x00	; 0
   119e2:	48 f0       	brcs	.+18     	; 0x119f6 <strncpy+0x1c>
   119e4:	01 90       	ld	r0, Z+
   119e6:	0d 92       	st	X+, r0
   119e8:	00 20       	and	r0, r0
   119ea:	c9 f7       	brne	.-14     	; 0x119de <strncpy+0x4>
   119ec:	01 c0       	rjmp	.+2      	; 0x119f0 <strncpy+0x16>
   119ee:	1d 92       	st	X+, r1
   119f0:	41 50       	subi	r20, 0x01	; 1
   119f2:	50 40       	sbci	r21, 0x00	; 0
   119f4:	e0 f7       	brcc	.-8      	; 0x119ee <strncpy+0x14>
   119f6:	08 95       	ret

000119f8 <printf>:
printf():
   119f8:	cf 93       	push	r28
   119fa:	df 93       	push	r29
   119fc:	cd b7       	in	r28, 0x3d	; 61
   119fe:	de b7       	in	r29, 0x3e	; 62
   11a00:	ae 01       	movw	r20, r28
   11a02:	4a 5f       	subi	r20, 0xFA	; 250
   11a04:	5f 4f       	sbci	r21, 0xFF	; 255
   11a06:	fa 01       	movw	r30, r20
   11a08:	61 91       	ld	r22, Z+
   11a0a:	71 91       	ld	r23, Z+
   11a0c:	af 01       	movw	r20, r30
   11a0e:	80 91 0e 16 	lds	r24, 0x160E	; 0x80160e <__iob+0x2>
   11a12:	90 91 0f 16 	lds	r25, 0x160F	; 0x80160f <__iob+0x3>
   11a16:	0e 94 f7 80 	call	0x101ee	; 0x101ee <vfprintf>
   11a1a:	df 91       	pop	r29
   11a1c:	cf 91       	pop	r28
   11a1e:	08 95       	ret

00011a20 <puts>:
puts():
   11a20:	0f 93       	push	r16
   11a22:	1f 93       	push	r17
   11a24:	cf 93       	push	r28
   11a26:	df 93       	push	r29
   11a28:	e0 91 0e 16 	lds	r30, 0x160E	; 0x80160e <__iob+0x2>
   11a2c:	f0 91 0f 16 	lds	r31, 0x160F	; 0x80160f <__iob+0x3>
   11a30:	23 81       	ldd	r18, Z+3	; 0x03
   11a32:	ec 01       	movw	r28, r24
   11a34:	10 e0       	ldi	r17, 0x00	; 0
   11a36:	00 e0       	ldi	r16, 0x00	; 0
   11a38:	21 fd       	sbrc	r18, 1
   11a3a:	08 c0       	rjmp	.+16     	; 0x11a4c <puts+0x2c>
   11a3c:	0f ef       	ldi	r16, 0xFF	; 255
   11a3e:	1f ef       	ldi	r17, 0xFF	; 255
   11a40:	14 c0       	rjmp	.+40     	; 0x11a6a <puts+0x4a>
   11a42:	19 95       	eicall
   11a44:	89 2b       	or	r24, r25
   11a46:	11 f0       	breq	.+4      	; 0x11a4c <puts+0x2c>
   11a48:	0f ef       	ldi	r16, 0xFF	; 255
   11a4a:	1f ef       	ldi	r17, 0xFF	; 255
   11a4c:	89 91       	ld	r24, Y+
   11a4e:	60 91 0e 16 	lds	r22, 0x160E	; 0x80160e <__iob+0x2>
   11a52:	70 91 0f 16 	lds	r23, 0x160F	; 0x80160f <__iob+0x3>
   11a56:	db 01       	movw	r26, r22
   11a58:	18 96       	adiw	r26, 0x08	; 8
   11a5a:	ed 91       	ld	r30, X+
   11a5c:	fc 91       	ld	r31, X
   11a5e:	81 11       	cpse	r24, r1
   11a60:	f0 cf       	rjmp	.-32     	; 0x11a42 <puts+0x22>
   11a62:	8a e0       	ldi	r24, 0x0A	; 10
   11a64:	19 95       	eicall
   11a66:	89 2b       	or	r24, r25
   11a68:	49 f7       	brne	.-46     	; 0x11a3c <puts+0x1c>
   11a6a:	c8 01       	movw	r24, r16
   11a6c:	df 91       	pop	r29
   11a6e:	cf 91       	pop	r28
   11a70:	1f 91       	pop	r17
   11a72:	0f 91       	pop	r16
   11a74:	08 95       	ret

00011a76 <sprintf>:
sprintf():
   11a76:	0f 93       	push	r16
   11a78:	1f 93       	push	r17
   11a7a:	cf 93       	push	r28
   11a7c:	df 93       	push	r29
   11a7e:	cd b7       	in	r28, 0x3d	; 61
   11a80:	de b7       	in	r29, 0x3e	; 62
   11a82:	2e 97       	sbiw	r28, 0x0e	; 14
   11a84:	0f b6       	in	r0, 0x3f	; 63
   11a86:	f8 94       	cli
   11a88:	de bf       	out	0x3e, r29	; 62
   11a8a:	0f be       	out	0x3f, r0	; 63
   11a8c:	cd bf       	out	0x3d, r28	; 61
   11a8e:	0e 89       	ldd	r16, Y+22	; 0x16
   11a90:	1f 89       	ldd	r17, Y+23	; 0x17
   11a92:	86 e0       	ldi	r24, 0x06	; 6
   11a94:	8c 83       	std	Y+4, r24	; 0x04
   11a96:	1a 83       	std	Y+2, r17	; 0x02
   11a98:	09 83       	std	Y+1, r16	; 0x01
   11a9a:	8f ef       	ldi	r24, 0xFF	; 255
   11a9c:	9f e7       	ldi	r25, 0x7F	; 127
   11a9e:	9e 83       	std	Y+6, r25	; 0x06
   11aa0:	8d 83       	std	Y+5, r24	; 0x05
   11aa2:	ae 01       	movw	r20, r28
   11aa4:	46 5e       	subi	r20, 0xE6	; 230
   11aa6:	5f 4f       	sbci	r21, 0xFF	; 255
   11aa8:	68 8d       	ldd	r22, Y+24	; 0x18
   11aaa:	79 8d       	ldd	r23, Y+25	; 0x19
   11aac:	ce 01       	movw	r24, r28
   11aae:	01 96       	adiw	r24, 0x01	; 1
   11ab0:	0e 94 f7 80 	call	0x101ee	; 0x101ee <vfprintf>
   11ab4:	2f 81       	ldd	r18, Y+7	; 0x07
   11ab6:	38 85       	ldd	r19, Y+8	; 0x08
   11ab8:	02 0f       	add	r16, r18
   11aba:	13 1f       	adc	r17, r19
   11abc:	f8 01       	movw	r30, r16
   11abe:	10 82       	st	Z, r1
   11ac0:	2e 96       	adiw	r28, 0x0e	; 14
   11ac2:	0f b6       	in	r0, 0x3f	; 63
   11ac4:	f8 94       	cli
   11ac6:	de bf       	out	0x3e, r29	; 62
   11ac8:	0f be       	out	0x3f, r0	; 63
   11aca:	cd bf       	out	0x3d, r28	; 61
   11acc:	df 91       	pop	r29
   11ace:	cf 91       	pop	r28
   11ad0:	1f 91       	pop	r17
   11ad2:	0f 91       	pop	r16
   11ad4:	08 95       	ret

00011ad6 <_exit>:
exit():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
   11ad6:	f8 94       	cli

00011ad8 <__stop_program>:
__stop_program():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
   11ad8:	ff cf       	rjmp	.-2      	; 0x11ad8 <__stop_program>
